private int currentDepth $F72 { try { Integer oneBased = ( ( Integer ) DEPTH_FIELD . get ( this ) ) ; return oneBased - NUM00 ; } $F180169 ( e ) }
protected $F8748 datasetIntegrity ( boolean nominalPredictor , boolean numericPredictor , boolean stringPredictor , boolean datePredictor , boolean relationalPredictor , boolean multiInstance , int classType , boolean predictorMissing , boolean classMissing ) { print ( NUM00 ) ; printAttributeSummary ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType ) ; print ( NUM00 ) ; int numTrain = getNumInstances ( ) , numClasses = NUM00 , missingLevel = NUM00 ; $F125783 ( result ) Instances train = null ; Kernel kernel = null ; try { train = makeTestDataset ( NUM00 , numTrain , nominalPredictor ? getNumNominal ( ) : NUM00 , numericPredictor ? getNumNumeric ( ) : NUM00 , stringPredictor ? getNumString ( ) : NUM00 , datePredictor ? getNumDate ( ) : NUM00 , relationalPredictor ? getNumRelational ( ) : NUM00 , numClasses , classType , multiInstance ) ; if ( missingLevel > NUM00 ) { addMissing ( train , missingLevel , predictorMissing , classMissing ) ; } kernel = Kernel . makeCopies ( getKernel ( ) , NUM00 ) [ NUM00 ] ; } catch ( Exception ex ) $F220112 ( ex ) try { Instances trainCopy = new Instances ( train ) ; kernel . buildKernel ( trainCopy ) ; compareDatasets ( train , trainCopy ) ; println ( NUM00 ) ; result [ NUM00 ] = _BOOL ; } catch ( Exception ex ) { println ( NUM00 ) ; result [ NUM00 ] = _BOOL ; if ( m_Debug ) { println ( NUM00 ) ; print ( NUM00 ) ; $F5354 ( println , ex ) println ( NUM00 ) ; println ( $F369 ( train ) ) ; } } return result ; }
public static int unionSize $F128693 ( x , y ) { final int lx = x . length , ly = y . length ; final int min = ( lx < ly ) ? lx : ly ; int i = NUM00 , res = NUM00 ; for ( ; i < min ; i ++ ) { res += Long . bitCount ( x [ i ] | y [ i ] ) ; } for ( ; i < lx ; i ++ ) { res += Long . bitCount ( x [ i ] ) ; } for ( ; i < ly ; i ++ ) { res += Long . bitCount ( y [ i ] ) ; } return res ; }
public void testReverseOrder4 $F72 throws Exception { $F116795 ( id , UUID ) GridCacheAdapter $F2538 cache = grid . internalCache ( ) ; GridCacheContext $F2538 ctx = cache . context ( ) ; GridCacheTestEntryEx entry1 = new GridCacheTestEntryEx ( ctx , NUM00 ) ; GridCacheTestEntryEx entry2 = new GridCacheTestEntryEx ( ctx , NUM00 ) ; GridCacheVersion ver1 = version ( NUM00 ) ; GridCacheVersion ver2 = version ( NUM00 ) ; GridCacheVersion ver3 = version ( NUM00 ) ; GridCacheMvccCandidate v3k1 = entry1 . addLocal ( NUM00 , ver3 , NUM00 , _BOOL , _BOOL ) ; GridCacheMvccCandidate v3k2 = entry2 . addLocal ( NUM00 , ver3 , NUM00 , _BOOL , _BOOL ) ; linkCandidates ( ctx , v3k1 , v3k2 ) ; entry1 . readyLocal ( ver3 ) ; checkLocal ( v3k1 , ver3 , _BOOL , _BOOL , _BOOL ) ; checkLocal ( v3k2 , ver3 , _BOOL , _BOOL , _BOOL ) ; GridCacheMvccCandidate v1k1 = entry1 . addLocal ( NUM00 , ver1 , NUM00 , _BOOL , _BOOL ) ; GridCacheMvccCandidate v1k2 = entry2 . addLocal ( NUM00 , ver1 , NUM00 , _BOOL , _BOOL ) ; linkCandidates ( ctx , v1k1 , v1k2 ) ; entry1 . readyLocal ( ver1 ) ; entry2 . readyLocal ( ver1 ) ; checkLocal ( v3k1 , ver3 , _BOOL , _BOOL , _BOOL ) ; checkLocal ( v3k2 , ver3 , _BOOL , _BOOL , _BOOL ) ; checkLocal ( v1k1 , ver1 , _BOOL , _BOOL , _BOOL ) ; checkLocal ( v1k2 , ver1 , _BOOL , _BOOL , _BOOL ) ; GridCacheMvccCandidate v2k2 = entry2 . addRemote ( id , NUM00 , ver2 , NUM00 , _BOOL , _BOOL ) ; checkRemote ( v2k2 , ver2 , _BOOL , _BOOL ) ; entry2 . readyLocal ( v3k2 ) ; checkLocal ( v3k1 , ver3 , _BOOL , _BOOL , _BOOL ) ; checkLocal ( v3k2 , ver3 , _BOOL , _BOOL , _BOOL ) ; }
$F1 public void closingOK $F72 { List < AddUserFields . AttributeSpec > specs = new ArrayList < AddUserFields . AttributeSpec > $F72 ; for ( $F2277 ( i , m_listModel ) ) { AddUserFields . AttributeSpec a = ( AddUserFields . AttributeSpec ) m_listModel . elementAt ( i ) ; specs . add ( a ) ; } if ( m_modifyL != null ) { m_modifyL . setModifiedStatus ( AddUserFieldsCustomizer . this , _BOOL ) ; } m_filter . setAttributeSpecs ( specs ) ; }
public String toString $F72 { $F280 ( text ) if ( ( m_classAttribute == null ) ) $F2455 try { $F84 ( text ) $F38468 ( text , m_kernel ) for ( int i = NUM00 ; i < m_classAttribute . numValues ( ) ; i ++ ) { for ( int j = i + NUM00 ; j < m_classAttribute . numValues ( ) ; j ++ ) { text . append ( NUM00 + m_classAttribute . value ( i ) + NUM00 + m_classAttribute . value ( j ) + NUM00 ) ; $F53015 ( text , m_classifiers , i , j ) if ( m_fitLogisticModels ) { $F84 ( text ) if ( m_classifiers [ i ] [ j ] . m_logistic == null ) $F86 ( text ) else { text . append ( m_classifiers [ i ] [ j ] . m_logistic ) ; } } $F84 ( text ) } } } catch ( Exception e ) $F2455 $F92 ( text ) }
public final Sector union ( Sector that ) { $F397 ( that , this ) Angle minLat = this . minLatitude ; Angle maxLat = this . maxLatitude ; Angle minLon = this . minLongitude ; Angle maxLon = this . maxLongitude ; if ( that . minLatitude . degrees < this . minLatitude . degrees ) minLat = that . minLatitude ; if ( that . maxLatitude . degrees > this . maxLatitude . degrees ) maxLat = that . maxLatitude ; if ( that . minLongitude . degrees < this . minLongitude . degrees ) minLon = that . minLongitude ; if ( that . maxLongitude . degrees > this . maxLongitude . degrees ) maxLon = that . maxLongitude ; return new Sector ( minLat , maxLat , minLon , maxLon ) ; }
private static boolean isDoubleEqual ( double value , double valueToCompare ) { return $F20923 ( Math , value , valueToCompare ) ; }
public void testIntValuePos $F72 { String a = NUM00 ; $F12208 ( aNumber , a ) int result = - NUM00 ; assertTrue ( NUM00 , aNumber . intValue ( ) == result ) ; }
private void walk ( File directory , int depth , $F9884 results ) throws IOException { checkIfCancelled ( directory , depth , results ) ; if ( handleDirectory ( directory , depth , results ) ) { handleDirectoryStart ( directory , depth , results ) ; int childDepth = depth + NUM00 ; if ( depthLimit < NUM00 || childDepth <= depthLimit ) { checkIfCancelled ( directory , depth , results ) ; $F5237 $F5239 ( childFiles , filter , directory ) ; childFiles = filterDirectoryContents ( directory , depth , childFiles ) ; if ( childFiles == null ) { handleRestricted ( directory , childDepth , results ) ; } else { for ( File childFile : childFiles ) { if $F3444 ( childFile ) { walk ( childFile , childDepth , results ) ; } else { checkIfCancelled ( childFile , childDepth , results ) ; handleFile ( childFile , childDepth , results ) ; checkIfCancelled ( childFile , childDepth , results ) ; } } } } handleDirectoryEnd ( directory , depth , results ) ; } checkIfCancelled ( directory , depth , results ) ; }
public static $F131 ordinalArray ( TupleSet tuples , String field ) { return $F157026 ( ordinalArray , tuples , field , DefaultLiteralComparator ) ; }
public void testDivideExceptionInvalidRM $F72 { String a = NUM00 ; int aScale = NUM00 ; String b = NUM00 ; int bScale = NUM00 ; $F1918 ( aNumber , a , aScale ) $F1918 ( bNumber , b , bScale ) try { aNumber . divide ( bNumber , NUM00 ) ; fail ( NUM00 ) ; } catch ( IllegalArgumentException e ) { assertEquals ( NUM00 , NUM00 , e . getMessage ( ) ) ; } }
$F1 public void datasetChanged ( DatasetChangeEvent event ) { super . datasetChanged ( event ) ; if ( this . subplots == null ) $F932 XYDataset dataset = null ; if ( event . getDataset ( ) instanceof XYDataset ) { dataset = ( XYDataset ) event . getDataset ( ) ; } for ( XYPlot subplot : this . subplots ) { if $F358955 ( subplot , dataset ) { subplot . configureRangeAxes ( ) ; } } }
public boolean onScheduleAsLibrary ( Config config , Config runtime , IScheduler scheduler , PackingPlan packing ) { boolean ret = _BOOL ; try { scheduler . initialize ( config , runtime ) ; ret = scheduler . onSchedule ( packing ) ; if ( ret ) { ret = SchedulerUtils . setLibSchedulerLocation ( runtime , scheduler , _BOOL ) ; } else { LOG . severe ( NUM00 ) ; } } $F3229 ( scheduler ) return ret ; }
public static boolean isStringType ( Type t ) { return $F183853 ( t , RefType ) ; }
public Entry updateOrCreateSource ( User user , String id , String url , String title , Long modTime , Long createTime , boolean isAdmin , Errors errors ) { if ( user == null ) { Errors . add ( errors , errorMessages . errorUserIsNull ( ) ) ; $F1274 } if ( url == null ) { Errors . add ( errors , errorMessages . errorUrlIsNull ( ) ) ; $F1274 } Entry source = getEntryByUserIdAndUrl ( user . getId ( ) , url ) ; if ( source == null ) { if $F2979 ( url ) { Errors . add ( errors , errorMessages . errorUrlIsEmpty ( ) ) ; $F1274 } if ( title == null ) { Errors . add ( errors , errorMessages . errorTitleIsNull ( ) ) ; $F1274 } if $F2979 ( title ) { Errors . add ( errors , errorMessages . errorTitleIsEmpty ( ) ) ; $F1274 } if ( modTime == null ) { Errors . add ( errors , errorMessages . errorModTimeIsNull ( ) ) ; $F1274 } if ( createTime == null ) { Errors . add ( errors , errorMessages . errorCreateTimeIsNull ( ) ) ; $F1274 } if ( id != null && ! idGenerator . isIdWellFormed ( id ) ) { Errors . add ( errors , errorMessages . errorIdIsInvalid ( ) ) ; $F1274 } if ( createTime . longValue ( ) > modTime . longValue ( ) ) { modTime = createTime ; } if ( url != null ) $F8576 ( url , cleanUpText ) if ( title != null ) $F8576 ( title , cleanUpText ) source = new Entry $F72 ; source . setDb ( db ) ; if ( id == null ) { id = idGenerator . getAnotherId ( ) ; } source . setId ( id ) ; source . setSourceUrl ( url ) ; source . setSourceTitle ( title ) ; source . setCreateTime ( createTime ) ; source . setType ( Constants . source ) ; source . setUserId ( user . getId ( ) ) ; db . persistEntry ( source ) ; } else if ( ! canUserModifyEntry ( user , source , isAdmin ) ) { Errors . add ( errors , errorMessages . errorUserIsNotEntitledToModifyTheSource ( ) ) ; $F1274 } source . setModTime ( modTime ) ; return source ; }
private void validateSqlStatement ( String sql , int jdbcStatementIndex ) { Assert . isTrue ( StringUtils . isNotBlank ( sql ) , NUM00 + jdbcStatementIndex + NUM00 ) ; }
public static Long [ ] valuesOf $F101011 ( array ) { Long [ ] dest = new Long [ array . length ] ; for ( $F1139 ( i , array ) ) $F11856 ( dest , i , Long , array ) return dest ; }
$F1 public boolean isTraceEnabled $F72 { return logger . isLoggable ( Level . FINEST ) ; }
private static void useMissile ( Player player ) { StackableItem projectilesItem = null ; if ( player . getRangeWeapon ( ) != null ) { projectilesItem = player . getAmmunition ( ) ; } if ( projectilesItem == null ) { projectilesItem = player . getMissileIfNotHoldingOtherWeapon ( ) ; } if ( projectilesItem != null ) { projectilesItem . removeOne ( ) ; } }
public TcpMatcher ( final NetworkConfig config ) { super ( config ) ; }
private int determineMaxLevelRec ( int level , Node v ) { int newLevel = level ; for ( $F149631 ( e , v ) ) { newLevel = Math . max ( newLevel , determineMaxLevelRec ( level , e . getTarget ( ) ) + NUM00 ) ; } return newLevel ; }
protected void requestPassCodeConfirmation $F72 { clearBoxes ( ) ; mPassCodeHdr . setText ( R . string . pass_code_reenter_your_pass_code ) ; $F185816 ( mPassCodeHdrExplanation , View ) mConfirmingPassCode = _BOOL ; }
private void addWorkerFailed ( Worker w ) { $F677 ( mainLock , this ) $F8934 ( mainLock ) try { $F198638 ( w , workers ) decrementWorkerCount ( ) ; tryTerminate ( ) ; } $F796 ( mainLock ) }
public void testInsert4 $F72 throws SQLException { DatabaseCreator . fillSimpleTable1 ( conn ) ; statement . execute ( NUM00 + DatabaseCreator . SIMPLE_TABLE2 + NUM00 + DatabaseCreator . SIMPLE_TABLE1 ) ; ResultSet r = statement . executeQuery ( NUM00 + DatabaseCreator . SIMPLE_TABLE2 + NUM00 + DatabaseCreator . SIMPLE_TABLE1 + NUM00 ) ; $F24630 ( r ) $F92911 ( assertEquals , r ) $F59 ( r ) }
private synchronized void putMapEntry ( String localId , MapEntry entry ) { if ( ! isLocalId ( localId ) ) $F322689 ( localId ) $F60661 ( json ) try { json . put ( NUM00 , entry . retainCount ) ; if ( entry . objectId != null ) { json . put ( NUM00 , entry . objectId ) ; } } catch ( JSONException je ) $F54146 ( je ) $F4453 ( file , diskPath , localId ) $F1909 ( diskPath ) try { ParseFileUtils . writeJSONObjectToFile ( file , json ) ; } $F29052 }
public void endElement $F1947 ( namespaceURI , localName , name ) throws $F2253 { $F5453 ( m_inEntityRef ) m_prefixMap . popNamespaces ( m_elemContext . m_currentElemDepth , null ) ; try { $F42851 ( writer , m_writer ) if ( m_elemContext . m_startTagOpen ) { if ( m_tracer != null ) super . fireStartElem ( m_elemContext . m_elementName ) ; $F19322 ( nAttrs , m_attributes ) if ( nAttrs > NUM00 ) { processAttributes ( m_writer , nAttrs ) ; $F725 ( m_attributes ) } if ( m_spaceBeforeClose ) $F3410 ( writer ) else $F3410 ( writer ) } else { $F32367 ( m_cdataTagOpen , closeCDATA ) if ( shouldIndent ( ) ) indent ( m_elemContext . m_currentElemDepth - NUM00 ) ; $F3410 ( writer ) $F3410 ( writer ) writer . write ( name ) ; $F3410 ( writer ) } } $F6289 ( e ) if ( ! m_elemContext . m_startTagOpen && m_doIndent ) { m_ispreserve = m_preserves . isEmpty ( ) ? _BOOL : m_preserves . pop ( ) ; } m_isprevtext = _BOOL ; if ( m_tracer != null ) super . fireEndElem ( name ) ; m_elemContext = m_elemContext . m_prev ; }
public static void f $F4353 ( msg , args ) { $F18748 ( allowWtf ) StackTraceElement caller = getCallerStackTraceElement ( ) ; String tag = generateTag ( caller ) ; if ( sLevel > LEVEL_FATAL ) $F932 if $F3305 ( args ) { $F3869 ( msg , String , args ) } Log . wtf ( tag , msg ) ; }
public void deleteLeaves ( String name ) { for ( $F2277 ( i , _leaves ) ) { CatalogTreeLeaf leaf = _leaves . get ( i ) ; if $F3175 ( name , leaf ) $F106 ( _leaves , i ) } }
public String toString $F72 { $F3239 ( s ) final int size = size ( ) ; for ( $F119 ( i , size ) ) $F6407 ( s , getInt , i ) $F92 ( s ) }
protected boolean validate ( final $F1469 component , final int soffset , int eoffset , final BitSet generous ) { if ( eoffset == - NUM00 ) $F65461 ( eoffset , component ) for ( int i = soffset ; i <= eoffset ; i ++ ) { if ( ! generous . get ( component [ i ] ) ) { return _BOOL ; } } return _BOOL ; }
private void buildPieces $F72 { pieces = new Piece $F2313 ( pathArray ) ; $F98511 ( paint ) $F28837 ( matrix ) Canvas canvas = new Canvas $F72 ; for ( $F1139 ( i , pieces ) ) { int shadow = Utils . nextInt ( Utils . dp2px ( NUM00 ) , Utils . dp2px ( NUM00 ) ) ; $F77510 ( path , pathArray , i ) RectF r = new RectF $F72 ; path . computeBounds ( r , _BOOL ) ; Bitmap pBitmap = Utils . createBitmapSafely ( ( int ) r . width ( ) + shadow * NUM00 , ( int ) r . height ( ) + shadow * NUM00 , Bitmap . Config . ARGB_4444 , NUM00 ) ; if ( pBitmap == null ) { pieces [ i ] = new Piece ( - NUM00 , - NUM00 , null , shadow ) ; $F598 } pieces [ i ] = new Piece ( ( int ) r . left + mTouchPoint . x - shadow , ( int ) r . top + mTouchPoint . y - shadow , pBitmap , shadow ) ; canvas . setBitmap ( pieces [ i ] . bitmap ) ; BitmapShader mBitmapShader = new BitmapShader ( mBitmap , Shader . TileMode . CLAMP , Shader . TileMode . CLAMP ) ; $F2268 ( matrix ) matrix . setTranslate ( - r . left - offsetX + shadow , - r . top - offsetY + shadow ) ; mBitmapShader . setLocalMatrix ( matrix ) ; $F2268 ( paint ) $F6212 ( offsetPath ) offsetPath . addPath ( path , - r . left + shadow , - r . top + shadow ) ; $F22950 ( paint , Paint ) paint . setShadowLayer ( shadow , NUM00 , NUM00 , NUM00 ) ; canvas . drawPath ( offsetPath , paint ) ; paint . setShadowLayer ( $F4026 ) ; paint . setXfermode ( new PorterDuffXfermode ( PorterDuff . Mode . XOR ) ) ; canvas . drawPath ( offsetPath , paint ) ; paint . setXfermode ( null ) ; paint . setShader ( mBitmapShader ) ; $F146962 ( paint ) canvas . drawPath ( offsetPath , paint ) ; } Arrays . sort ( pieces ) ; }
public boolean removeShutdownHook ( Thread hook ) { $F8108 ( sm , System ) if ( sm != null ) { sm . checkPermission ( RuntimePermissionCollection . SHUTDOWN_HOOKS_PERMISSION ) ; } $F1149 ( hook ) if ( VMState > NUM00 ) $F10763 synchronized ( hooksList ) $F20067 ( hooksList , hook ) }
public void run $F72 { while ( m_keyboardStream != null ) { try { if ( m_keyboardReadRequest ) { $F27015 ( s , m_keyboardStream ) m_keyboardInput . add ( s ) ; m_keyboardReadRequest = _BOOL ; $F59357 ( this , notifyAll ) } else try $F31130 ( Thread ) $F109995 } catch ( IOException io ) $F845 } }
public boolean boundScroll $F72 { float curScroll = getStackScroll ( ) ; float newScroll = getBoundedStackScroll ( curScroll ) ; if ( Float . compare ( newScroll , curScroll ) != NUM00 ) $F9278 ( setStackScroll , newScroll , _BOOL ) return _BOOL ; }
$F1 public AggregateableEvaluation aggregate ( Evaluation evaluation ) { m_Incorrect += evaluation . incorrect ( ) ; m_Correct += evaluation . correct ( ) ; m_Unclassified += evaluation . unclassified ( ) ; m_MissingClass += evaluation . m_MissingClass ; m_WithClass += evaluation . m_WithClass ; if ( evaluation . m_ConfusionMatrix != null ) { $F3789 newMatrix = evaluation . confusionMatrix ( ) ; if ( newMatrix != null ) { for ( $F1139 ( i , m_ConfusionMatrix ) ) { for ( $F179379 ( j , m_ConfusionMatrix , i ) ) { m_ConfusionMatrix [ i ] [ j ] += newMatrix [ i ] [ j ] ; } } } } $F1986 newClassPriors = evaluation . m_ClassPriors ; if ( newClassPriors != null && m_ClassPriors != null ) { for ( int i = NUM00 ; i < this . m_ClassPriors . length ; i ++ ) $F15086 ( m_ClassPriors , i , newClassPriors ) } m_ClassPriorsSum = evaluation . m_ClassPriorsSum ; m_TotalCost += evaluation . totalCost ( ) ; m_SumErr += evaluation . m_SumErr ; m_SumAbsErr += evaluation . m_SumAbsErr ; m_SumSqrErr += evaluation . m_SumSqrErr ; m_SumClass += evaluation . m_SumClass ; m_SumSqrClass += evaluation . m_SumSqrClass ; m_SumPredicted += evaluation . m_SumPredicted ; m_SumSqrPredicted += evaluation . m_SumSqrPredicted ; m_SumClassPredicted += evaluation . m_SumClassPredicted ; m_SumPriorAbsErr += evaluation . m_SumPriorAbsErr ; m_SumPriorSqrErr += evaluation . m_SumPriorSqrErr ; m_SumKBInfo += evaluation . m_SumKBInfo ; $F1986 newMarginCounts = evaluation . m_MarginCounts ; if ( newMarginCounts != null ) { for ( $F1139 ( i , m_MarginCounts ) ) { m_MarginCounts [ i ] += newMarginCounts [ i ] ; } } m_ComplexityStatisticsAvailable = evaluation . m_ComplexityStatisticsAvailable ; m_CoverageStatisticsAvailable = evaluation . m_CoverageStatisticsAvailable ; m_SumPriorEntropy += evaluation . m_SumPriorEntropy ; m_SumSchemeEntropy += evaluation . m_SumSchemeEntropy ; m_TotalSizeOfRegions += evaluation . m_TotalSizeOfRegions ; m_TotalCoverage += evaluation . m_TotalCoverage ; $F17258 predsToAdd = evaluation . m_Predictions ; if ( predsToAdd != null ) { if ( m_Predictions == null ) { m_Predictions = new $F17258 $F72 ; } for ( $F2277 ( i , predsToAdd ) ) $F62006 ( m_Predictions , predsToAdd , i ) } return this ; }
public void waitForVolumesToBeVisible ( CGRequestParams request ) { scan ( request . getCopies ( ) , request . getRsets ( ) ) ; }
protected void startAdditionalServices ( final Cache cache , $F87266 ( options ) ) throws Exception $F845
public void updateView $F72 { if ( fInputElement != null && fParentComposite != null ) { IndicatorViewState oldState = fStateMap . get ( fInputElement ) ; boolean reload = fFilesToReoad . contains ( fInputElement ) ; if ( reload || oldState == null ) { JsonObject jsonObject = DroidsafePluginUtilities . parseIndicatorFile ( fInputElement ) ; $F8249 ( jsonObject ) fFilesToReoad . remove ( fInputElement ) ; fState = new IndicatorViewState ( fInputElement , jsonObject , getSecuritySpec ( ) , oldState ) ; fStateMap . put ( fInputElement , fState ) ; } else { fState = oldState ; } setPartName ( fState . indicatorType ) ; showPage ( PAGE_VIEWER ) ; fTreeViewer . setInput ( fState . jsonObject ) ; if ( fTreeViewer . getSorter ( ) == null ) sortByField ( getSortByField ( ) ) ; } else { setPartName ( DEFAULT_PART_NAME ) ; } }
$F1 public void paint ( Graphics g ) { $F169501 ( g , image , this ) if ( ! paintCalled ) { paintCalled = _BOOL ; $F59357 ( this , notifyAll ) } }
$F1 public boolean connectionAllowed ( String eventName ) { if $F1710 ( m_listenees , eventName ) { return _BOOL ; } return _BOOL ; }
public boolean isPrefixed $F72 { return $F48845 ( name ) ; }
public void releaseAnyConnection ( Connection connection ) throws SQLException { try $F881 ( connection ) $F12237 ( ex ) }
public QuickActionView addActions ( Collection < Action > actions ) { checkShown ( ) ; mActions . addAll ( actions ) ; return this ; }
public void addSeriesRenderer ( int index , SimpleSeriesRenderer renderer ) $F42308 ( mRenderers , index , renderer )
$F98441 ( is , os , listener , bufferSize , current , total , DEFAULT_IMAGE_TOTAL_SIZE , bytes , count , shouldStopLoading , _BOOL )
private float calcAngle ( float value ) { return value / mData . getYValueSum ( ) * NUM00 ; }
$F10929 ( buf , mSizeLimit , mBuffersByLastUse , pos , Collections , mBuffersBySize , BUF_COMPARATOR , mCurrentSize , trim )
protected < T extends AbstractOptionValue $F5162 > AbstractOptions ( Function $F223439 valueFilter , AbstractOptions baseOptions , $F35808 values ) { requireNonNull ( baseOptions , NUM00 ) ; requireNonNull ( valueFilter , NUM00 ) ; requireNonNull ( values , NUM00 ) ; valueMap = new $F223444 ( baseOptions . valueMap ) ; putAll ( valueFilter , StreamSupport . stream ( values . spliterator ( ) , _BOOL ) ) ; }
public CharSeq concat ( CharSeq another ) { return new CharSeq ( str + another . str ) ; }
$F1 protected void doGet ( HttpServletRequest req , HttpServletResponse resp ) throws $F13444 { $F11560 ( resp ) $F70095 ( sendToClient , resp ) for ( Video v : this . videos ) { sendToClient . write ( $F43113 ( v ) + v . getUrl ( ) + NUM00 ) ; } }
protected void notifyStateChange ( int oldState , int newState ) { mState = newState ; if ( oldState != newState ) { firePropertyChange ( NUM00 , Integer . valueOf ( oldState ) , Integer . valueOf ( newState ) ) ; } }
public void test_GetOrder $F72 { assertEquals ( NUM00 , BigInteger . valueOf ( NUM00 ) , ecps . getOrder ( ) ) ; }
private void formatAndLogThrowable ( LoggingLevel level , Color color , String msg , Throwable t ) { if ( ! USE_COLORS ) $F55644 ( formatAndLogThrowable , level , msg , t ) if ( PhotonLogger . level . id < level . id ) $F932 LocalDateTime dateTime = LocalDateTime . now ( ) ; String formatted = formatLogLine ( level , dateTime , msg ) ; LoggingService . logThrowable ( dateTime , t , formatted , color ) ; }
public static String constructQueueRedisKey ( String queueName , String shardName , int priority , PinLaterJobState state ) { return String . format ( NUM00 , PINLATER_QUEUE_KEY_PREFIX , shardName , queueName , priority , state . getValue ( ) ) ; }
public static String decodeCharset ( String s , String charset ) { $F1338 ( s ) try { byte $F46499 = s . getBytes ( ASCII_CHARSET ) ; return ( new String ( buf , NUM00 , buf . length , charset ) ) ; } catch ( UnsupportedEncodingException uee ) { return s ; } }
public void addRestrictedDomain ( String domainName ) { $F63624 ( StringUtils , domainName ) $F9406 ( restrictedDomains ) restrictedDomains . add ( domainName ) ; }
StoppableReadLock ( ReadWriteLock lock , CancelCriterion stopper ) { this . lock = lock . readLock ( ) ; this . stopper = stopper ; }
public void testisAutoIncrement $F72 { try { assertFalse ( rsmd . isAutoIncrement ( NUM00 ) ) ; } $F125502 ( fail , e1 ) try { $F59 ( conn ) rsmd . getSchemaName ( NUM00 ) ; fail ( NUM00 ) ; } $F31184 }
private long computeInterfaceHash $F72 { long hash = NUM00 ; $F121388 ( sink ) try { $F5348 ( md , MessageDigest ) DataOutputStream out = new DataOutputStream ( new DigestOutputStream ( sink , md ) ) ; out . writeInt ( INTERFACE_HASH_STUB_VERSION ) ; for ( Method method : remoteMethods ) { MethodDoc methodDoc = method . methodDoc ( ) ; out . writeUTF ( methodDoc . name ( ) ) ; out . writeUTF ( Util . methodDescriptorOf ( methodDoc ) ) ; ClassDoc exceptions [ ] = methodDoc . thrownExceptions ( ) ; Arrays . sort ( exceptions , new ClassDocComparator $F72 ) ; for ( ClassDoc ex : exceptions ) { out . writeUTF ( Util . binaryNameOf ( ex ) ) ; } } $F1206 ( out ) byte hashArray [ ] = md . digest ( ) ; for ( int i = NUM00 ; i < $F121399 ( Math , hashArray ) ; i ++ ) { hash += ( ( long ) ( hashArray [ i ] & NUM00 ) ) < < ( i * NUM00 ) ; } } catch ( IOException e ) $F27253 ( e ) catch ( NoSuchAlgorithmException e ) $F27253 ( e ) return hash ; }
public static void copy $F251959 ( in , out ) throws IOException { $F18062 ( Assert , in ) $F18062 ( Assert , out ) out . write ( in ) ; }
$F18907 ( items )
private static native boolean renderFrame ( $F2027 pixels , long gifFileInPtr , $F2027 metaData ) ;
$F66520 ( msg , startpos , count , sb , initialSubmode , tmp , submode , idx , _BOOL , ch , SUBMODE_ALPHA , isAlphaUpper , isAlphaLower , SUBMODE_LOWER , isMixed , SUBMODE_MIXED , PUNCTUATION , MIXED , next , isPunctuation , SUBMODE_PUNCTUATION , h , len , i , odd )
public static boolean isValidNCName ( String ncName ) { $F49299 ( ncName , _BOOL ) $F12685 ( ch , ncName ) if ( isNCNameStart ( ch ) == _BOOL ) return _BOOL ; for ( $F1088 ( i , ncName ) ) { ch = ncName . charAt ( i ) ; if ( isNCName ( ch ) == _BOOL ) { return _BOOL ; } } return _BOOL ; }
public $F118223 addMessage ( MType message ) { $F18045 ( message ) ensureMutableMessageList ( ) ; messages . add ( message ) ; if ( builders != null ) $F723 ( builders ) onChanged ( ) ; incrementModCounts ( ) ; return this ; }
protected void prepareDataSet $F72 { dataSet1 = $F196441 ( Arrays ) ; dataSet2 = $F196441 ( Arrays ) ; dataSet3 = Arrays . asList ( $F20551 ) ; }
private ServiceRegistrar [ ] buildServiceRegistrar $F72 { int k = NUM00 ; ServiceRegistrar [ ] proxys = new ServiceRegistrar $F2313 ( proxyRegSet ) ; $F10531 ( iter , proxyRegSet ) while $F2921 ( iter ) { ProxyReg reg = ( ProxyReg ) iter . next ( ) ; proxys [ k ++ ] = reg . proxy ; } return proxys ; }
private static boolean checkValue ( String val ) throws MalformedObjectNameException { $F1149 ( val ) $F22998 ( len , val ) $F116 ( len , _BOOL ) $F9609 ( s , val ) final $F2027 result = parseValue ( s , NUM00 ) ; $F178172 ( endValue , result ) final boolean value_pattern = result [ NUM00 ] == NUM00 ; if ( endValue < len ) throw new MalformedObjectNameException ( NUM00 + s [ endValue ] + NUM00 ) ; return value_pattern ; }
protected void recoverPrimary ( Set excludedServers ) { if ( pool . getPoolOrCacheCancelInProgress ( ) != null ) $F932 $F179935 ( isDebugEnabled , logger ) if ( queueConnections . getPrimary ( ) != null ) { if ( isDebugEnabled ) $F981 ( logger ) $F665 } if ( isDebugEnabled ) $F981 ( logger ) if ( printRecoveringPrimary ) { logger . info ( LocalizedMessage . create ( LocalizedStrings . QueueManagerImpl_SUBSCRIPTION_MANAGER_REDUNDANCY_SATISFIER_PRIMARY_ENDPOINT_HAS_BEEN_LOST_ATTEMPTIMG_TO_RECOVER ) ) ; printRecoveringPrimary = _BOOL ; } QueueConnectionImpl newPrimary = null ; while ( newPrimary == null && pool . getPoolOrCacheCancelInProgress ( ) == null ) { List backups = queueConnections . getBackups ( ) ; newPrimary = promoteBackupToPrimary ( backups ) ; $F32472 ( newPrimary ) if ( ! addToConnectionList ( newPrimary , _BOOL ) ) { synchronized ( lock ) { queueConnections = queueConnections . removeConnection ( newPrimary ) ; } newPrimary = null ; } } if ( newPrimary != null ) { if ( isDebugEnabled ) { logger . debug ( NUM00 , newPrimary . getEndpoint ( ) ) ; } if ( PoolImpl . AFTER_PRIMARY_RECOVERED_CALLBACK_FLAG ) { ClientServerObserver bo = ClientServerObserverHolder . getInstance ( ) ; bo . afterPrimaryRecovered ( newPrimary . getServer ( ) ) ; } cqsConnected ( ) ; printPrimaryNotFoundError = _BOOL ; printRecoveringPrimary = _BOOL ; $F665 } while ( newPrimary == null ) { newPrimary = createNewPrimary ( excludedServers ) ; $F32472 ( newPrimary ) if ( ! addToConnectionList ( newPrimary , _BOOL ) ) { excludedServers . add ( newPrimary . getServer ( ) ) ; newPrimary = null ; } if ( newPrimary != null ) { if ( isDebugEnabled ) { logger . debug ( NUM00 , newPrimary . getEndpoint ( ) ) ; } if ( ! recoverInterest ( newPrimary , _BOOL ) ) { excludedServers . add ( newPrimary . getServer ( ) ) ; newPrimary = null ; } cqsConnected ( ) ; } if ( newPrimary != null && PoolImpl . AFTER_PRIMARY_RECOVERED_CALLBACK_FLAG ) { ClientServerObserver bo = ClientServerObserverHolder . getInstance ( ) ; bo . afterPrimaryRecovered ( newPrimary . getServer ( ) ) ; } printPrimaryNotFoundError = _BOOL ; printRecoveringPrimary = _BOOL ; $F665 } cqsDisconnected ( ) ; if ( isDebugEnabled ) $F981 ( logger ) synchronized ( lock ) { queueConnections = queueConnections . setPrimaryDiscoveryFailed ( null ) ; $F165 ( lock ) } }
$F5077 ( journalWriter , writer , journalFileTmp , IO_BUFFER_SIZE , MAGIC , VERSION_1 , Integer , appVersion , valueCount , entry , lruEntries , DIRTY , CLEAN , journalFile , _BOOL )
public void remove $F72 throws RecurrenceInfoException { List < RecurrenceRule > rulesList = new ArrayList < RecurrenceRule > $F72 ; rulesList . addAll ( rRulesList ) ; rulesList . addAll ( eRulesList ) ; try { for ( RecurrenceRule rule : rulesList ) $F7042 ( rule ) $F7042 ( info ) } catch ( RecurrenceRuleException rre ) { throw new RecurrenceInfoException $F2808 ( rre ) ; } catch ( GenericEntityException gee ) { throw new RecurrenceInfoException $F2808 ( gee ) ; } }
public void addNodesInDocOrder ( DTMIterator iterator , XPathContext support ) { if ( ! m_mutable ) throw new RuntimeException ( XSLMessages . createXPATHMessage ( XPATHErrorResources . ER_NODESETDTM_NOT_MUTABLE , null ) ) ; int node ; while ( DTM . NULL != $F161934 ( node , iterator ) ) { addNodeInDocOrder ( node , support ) ; } }
protected boolean needToRefetchData $F72 { $F657 ( now , System ) long last = lastDataFetchTime ; if ( ( last + fetchIntervalMillis ) < now ) { lastDataFetchTime = now ; return _BOOL ; } return _BOOL ; }
$F1 public DocumentType createDocumentType $F1947 ( qualifiedName , publicID , systemID ) { checkQName ( qualifiedName ) ; return new DocumentTypeImpl ( null , qualifiedName , publicID , systemID ) ; }
public void handleRequest ( RequestContext rc ) throws CLIException { super . handleRequest ( rc ) ; ldapLogin ( ) ; SSOToken adminSSOToken = getAdminSSOToken ( ) ; IOutput outputWriter = getOutputWriter ( ) ; String realm = getStringOptionValue ( IArgument . REALM_NAME ) ; String patternType = getStringOptionValue ( IArgument . AGENT_TYPE ) ; String filter = getStringOptionValue ( IArgument . FILTER ) ; $F23170 ( patternType ) if $F38892 ( filter ) { filter = NUM00 ; } $F28010 ( params , realm , patternType , filter ) $F28013 ( writeLog , LogWriter , Level , params ) try { AMIdentityRepository amir = new AMIdentityRepository ( adminSSOToken , realm ) ; IdSearchResults isr = amir . searchIdentities ( IdType . AGENTONLY , filter , new IdSearchControl $F72 ) ; Set results = isr . getSearchResults ( ) ; if $F2772 ( results ) { for ( $F2774 ( i , results ) ) { AMIdentity amid = ( AMIdentity ) i . next ( ) ; if ( ! matchType ( amid , patternType ) ) $F38599 ( i ) } } if $F2772 ( results ) { for ( $F2774 ( i , results ) ) { AMIdentity amid = ( AMIdentity ) i . next ( ) ; $F131 args = { amid . getName ( ) , amid . getUniversalId ( ) } ; outputWriter . printlnMessage ( MessageFormat . format ( getResourceString ( NUM00 ) , args ) ) ; } } else $F265961 ( outputWriter , getResourceString ) $F28013 ( writeLog , LogWriter , Level , params ) } catch ( IdRepoException e ) { $F28032 ( args , realm , patternType , filter , e ) debugError ( NUM00 , e ) ; $F28035 ( writeLog , LogWriter , Level , args ) $F145379 ( e , ExitCodes ) } catch ( SSOException e ) { $F28032 ( args , realm , patternType , filter , e ) debugError ( NUM00 , e ) ; $F28035 ( writeLog , LogWriter , Level , args ) $F145379 ( e , ExitCodes ) } }
public $F96 toBytes $F72 { try { $F1538 ( out ) $F145993 ( _field , out ) $F11316 ( out ) } $F57213 ( e ) }
$F1431 public static < E extends Enum < ? extends Style . HasCssName > > E fromStyleName ( final String styleName , final $F48880 enumClass , final E defaultValue ) { $F6973 ( styleName , enumClass , defaultValue ) for ( final Enum < ? extends Style . HasCssName > constant : enumClass . getEnumConstants ( ) ) { final Style . HasCssName anEnum = ( Style . HasCssName ) constant ; final String cssClass = anEnum . getCssName ( ) ; if ( cssClass != null && StyleHelper . containsStyle ( styleName , cssClass ) ) { return ( E ) anEnum ; } } return defaultValue ; }
@ HLEUnimplemented @ HLEFunction ( nid = NUM00 , version = NUM00 , checkInsideInterrupt = _BOOL ) public int sceMpegNextAvcRpAu ( @ CheckArgument ( NUM00 ) int mpeg , int streamUid ) { if $F15257 ( streamMap , streamUid ) { $F18177 ( log , String , streamUid ) $F150 } int result = hleMpegGetAvcAu ( null ) ; if ( result != NUM00 ) { $F117609 ( log , String , result ) return result ; } videoFrameCount ++ ; startedMpeg = _BOOL ; $F1082 }
private $F33153 createExportMaskMap ( $F4324 placedMasks ) { $F33153 $F8690 ( exportMaskMap ) ; Iterator < ExportMask > exportMaskIterator = dbClient . queryIterativeObjects ( ExportMask . class , placedMasks , _BOOL ) ; while $F2921 ( exportMaskIterator ) { ExportMask exportMask = exportMaskIterator . next ( ) ; $F33163 ( exportMaskMap , exportMask ) } return exportMaskMap ; }
public ImmutableArray2 $F22664 insert ( int index , K obj ) { int len = length + NUM00 ; int newLen = len ; boolean extendable ; if ( index == len - NUM00 ) { AtomicBoolean x = canExtend ; if ( x != null ) { canExtend = null ; if ( array . length > index && x . getAndSet ( _BOOL ) ) { array [ index ] = obj ; return new ImmutableArray2 $F22664 ( array , len , _BOOL ) ; } } extendable = _BOOL ; newLen = len + NUM00 ; } else { extendable = _BOOL ; } $F1431 $F26136 a2 = ( $F26136 ) new Object [ newLen ] ; DataUtils . copyWithGap ( array , a2 , length , index ) ; a2 [ index ] = obj ; return new ImmutableArray2 $F22664 ( a2 , len , extendable ) ; }
public void writeNoScale ( Image c , Component i ) { $F113304 ( page , newpage ) int x = x0 + width - ( c . getWidth ( null ) + charwidth ) ; int y = y0 + ( linenum * lineheight ) + lineascent ; if ( page != null && pagenum >= prFirst ) { page . drawImage ( c , x , y , c . getWidth ( null ) , c . getHeight ( null ) , null ) ; } }
public void putDocumentInCache ( int n , Source source ) { int cachedNode = getNode ( source ) ; if ( DTM . NULL != cachedNode ) { if $F62529 ( cachedNode , n ) throw new RuntimeException ( NUM00 + NUM00 + source . getSystemId ( ) ) ; $F665 } if ( null != source . getSystemId ( ) ) { m_sourceTree . addElement ( new SourceTree ( n , source . getSystemId ( ) ) ) ; } }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
public static void copy ( InputStream is , Resource out , boolean closeIS ) throws IOException { OutputStream os = null ; try { os = toBufferedOutputStream ( out . getOutputStream ( ) ) ; } catch ( IOException ioe ) { IOUtil . closeEL ( os ) ; throw ioe ; } copy ( is , os , closeIS , _BOOL ) ; }
public String fadeAudio ( String path , String type , double fadeInLength , double stopTime , double fadeOutLength ) throws IOException { final $F3803 curves = Arrays . asList ( new String [ ] { NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ) ; if $F2200 ( curves , type ) $F1666 ( type ) $F1705 ( file , path ) String outFile = file . getCanonicalPath ( ) + NUM00 ; $F8728 ( cmd ) cmd . add ( soxBin ) ; cmd . add ( path ) ; cmd . add ( outFile ) ; $F18793 ( cmd ) cmd . add ( type ) ; $F31982 ( cmd , fadeInLength ) if ( stopTime != - NUM00 ) $F31982 ( cmd , stopTime ) if ( fadeOutLength != - NUM00 ) $F31982 ( cmd , fadeOutLength ) try { int rc = execSox ( cmd , callback ) ; if ( rc != NUM00 ) { outFile = null ; } } $F12241 ( e ) $F3101 ( e ) return outFile ; }
$F1 public void draw ( Canvas canvas ) { super . draw ( canvas ) ; if ( mEdgeGlowTop != null ) { $F3666 ( scrollX , getScrollX ) if ( ! mEdgeGlowTop . isFinished ( ) ) { final int restoreCount = canvas . save ( ) ; final int topPadding = mListPadding . top + mGlowPaddingTop ; final int bottomPadding = mListPadding . bottom + mGlowPaddingBottom ; final int height = getHeight ( ) - topPadding - bottomPadding ; int edgeX = Math . min ( NUM00 , scrollX + mFirstPositionDistanceGuess ) ; canvas . rotate ( - NUM00 ) ; canvas . translate ( - getHeight ( ) + topPadding , edgeX ) ; mEdgeGlowTop . setSize ( height , height ) ; if ( mEdgeGlowTop . draw ( canvas ) ) $F5795 ( invalidate ) canvas . restoreToCount ( restoreCount ) ; } if ( ! mEdgeGlowBottom . isFinished ( ) ) { final int restoreCount = canvas . save ( ) ; final int topPadding = mListPadding . left + mGlowPaddingTop ; final int bottomPadding = mListPadding . right + mGlowPaddingBottom ; final int height = getHeight ( ) - topPadding - bottomPadding ; $F3666 ( width , getWidth ) int edgeX = Math . max ( width , scrollX + mLastPositionDistanceGuess ) ; canvas . rotate ( NUM00 ) ; $F86480 ( canvas , topPadding , edgeX ) mEdgeGlowBottom . setSize ( height , height ) ; if ( mEdgeGlowBottom . draw ( canvas ) ) $F5795 ( invalidate ) canvas . restoreToCount ( restoreCount ) ; } } }
public static ClassProperties loadProperties ( $F749 cls , Properties properties , boolean inherit ) { ClassProperties cp = new ClassProperties ( properties ) ; for ( Class c : cls ) { cp . load ( c , inherit ) ; } return cp ; }
public void testCase20 $F72 { $F3017 $F3021 int bSign = NUM00 ; BigInteger aNumber = BigInteger . ZERO ; $F3023 ( bNumber , bSign , bBytes ) $F3024 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
private static void fixGPSTimeStamp ( XMPNode exifSchema ) throws XMPException { XMPNode gpsDateTime = XMPNodeUtils . findChildNode ( exifSchema , NUM00 , _BOOL ) ; $F2329 ( gpsDateTime ) try { XMPDateTime binGPSStamp ; XMPDateTime binOtherDate ; binGPSStamp = XMPUtils . convertToDate ( gpsDateTime . getValue ( ) ) ; if ( binGPSStamp . getYear ( ) != NUM00 || binGPSStamp . getMonth ( ) != NUM00 || binGPSStamp . getDay ( ) != NUM00 ) $F932 XMPNode otherDate = XMPNodeUtils . findChildNode ( exifSchema , NUM00 , _BOOL ) ; if ( otherDate == null ) { otherDate = XMPNodeUtils . findChildNode ( exifSchema , NUM00 , _BOOL ) ; } binOtherDate = XMPUtils . convertToDate ( otherDate . getValue ( ) ) ; Calendar cal = binGPSStamp . getCalendar ( ) ; cal . set ( Calendar . YEAR , binOtherDate . getYear ( ) ) ; cal . set ( Calendar . MONTH , binOtherDate . getMonth ( ) ) ; cal . set ( Calendar . DAY_OF_MONTH , binOtherDate . getDay ( ) ) ; binGPSStamp = new XMPDateTimeImpl ( cal ) ; gpsDateTime . setValue ( XMPUtils . convertFromDate ( binGPSStamp ) ) ; } catch ( XMPException e ) $F932 }
protected boolean cellConsumesEventType ( Cell $F1011 cell , String eventType ) { $F2689 consumedEvents = cell . getConsumedEvents ( ) ; $F28807 ( consumedEvents , eventType ) }
public int read $F72 throws IOException { $F7468 ( b0 , fInputStream ) if ( b0 > NUM00 ) { throw new IOException ( Localizer . getMessage ( NUM00 , Integer . toString ( b0 ) ) ) ; } return b0 ; }
protected void create_y_axis ( int i ) { Log . e ( NUM00 , i + NUM00 ) ; float ver_height = ( ( graphheight / label_size ) * i ) + border ; if $F2283 ( i , largest_value_set ) canvas . drawLine ( horstart , ver_height , width - ( border ) , ver_height , paint ) ; else $F41674 ( canvas , horstart , ver_height , border , paint ) $F339 ( paint , Color ) int Y_labels = ( int ) size - NUM00 - i ; String y_labels = String . format ( NUM00 , Y_labels * y_axis_ratio ) ; paint . setTextAlign ( Paint . Align . RIGHT ) ; canvas . drawText ( y_labels , horstart - NUM00 , ver_height - NUM00 , paint ) ; paint . setTextAlign ( Paint . Align . LEFT ) ; }
public long max $F72 $F1522 ( deltaMax )
public void print ( File file ) throws IOException { checkExec ( ) ; $F8108 ( sm , System ) if ( sm != null ) { sm . checkPrintJobAccess ( ) ; } checkActionSupport ( Action . PRINT ) ; checkFileValidation ( file ) ; peer . print ( file ) ; }
public void extend ( RuleGrounding other ) { if ( other . isFailed ( ) ) { $F725 ( groundings ) $F665 } extend ( other . getAlternatives ( ) ) ; }
$F1 public String expect ( Pattern pattern ) { final String token = read ( pattern ) ; if ( token == null ) { throw new ParserException ( NUM00 + pattern . pattern ( ) + NUM00 + document ) ; } return token ; }
public void testGetTableTypesOrder $F72 throws Exception { $F9236 ( dmd , con ) ResultSet rs = dmd . getTableTypes ( ) ; String previousType = NUM00 ; while $F1682 ( rs ) { $F27130 ( type , rs ) assertTrue ( type . compareTo ( previousType ) >= NUM00 ) ; previousType = type ; } $F59 ( rs ) }
private FileChannel updateCache ( String filePath ) { FileChannel fileChannel = fileNameAndStreamCache . get ( filePath ) ; try { if ( null == fileChannel ) { $F4647 ( stream , filePath ) $F42861 ( fileChannel , stream ) fileNameAndStreamCache . put ( filePath , fileChannel ) ; } } catch ( IOException e ) { LOGGER . error ( e , e . getMessage ( ) ) ; } return fileChannel ; }
$F43277 ( listener , mListeners )
private static String descriptorForFieldSignature ( String signature ) $F11447 ( signature )
public void addParameters ( final $F386819 parameters ) { $F1932 ( LOG ) if ( parameters == null ) $F10911 ( LOG ) else { super . clearRequestBody ( ) ; $F68861 ( i , parameters , params ) } }
$F21175 public Atom annotationInterfaceToAnnotationClass $F72 { $F64222 ( annotationClassName_tmp , val ) $F12508 ( System , val , annotationClassName_tmp ) annotationClassName_tmp [ val . length - NUM00 ] = NUM00 ; annotationClassName_tmp [ val . length ] = NUM00 ; annotationClassName_tmp [ val . length + NUM00 ] = NUM00 ; return Atom . findOrCreateUtf8Atom ( annotationClassName_tmp ) ; }
public boolean resourceSupportAR ( Integer id ) { $F1933 ( id , _BOOL ) return resourceSupportAR ( id . intValue ( ) ) ; }
public static $F529 createElectronicText $F71242 ( dctx , context ) { $F157005 ( result , createElectronicTextMethod , dctx , context ) return result ; }
public PatternGuardExpr ( String namespace , String name , Expression [ ] parameters , PatternExpr guarded ) { this ( namespace , name , Arrays . asList ( parameters ) , guarded ) ; }
public static int intersectLineLine ( Line2D a , Line2D b , Point2D intersect ) { double a1x = a . getX1 ( ) , a1y = a . getY1 ( ) ; double a2x = a . getX2 ( ) , a2y = a . getY2 ( ) ; double b1x = b . getX1 ( ) , b1y = b . getY1 ( ) ; double b2x = b . getX2 ( ) , b2y = b . getY2 ( ) ; return intersectLineLine ( a1x , a1y , a2x , a2y , b1x , b1y , b2x , b2y , intersect ) ; }
public static Set updateAndGetRemovableOCs ( Set origSet , Set removeOCs ) { Set returnOCs = removeOCs ; if $F1032 ( removeOCs ) { $F266988 ( returnOCs ) $F10531 ( itr1 , origSet ) while $F2921 ( itr1 ) { $F2778 ( origOC , itr1 ) $F10531 ( itr2 , removeOCs ) while $F2921 ( itr2 ) { $F2778 ( removeOC , itr2 ) if $F8397 ( origOC , removeOC ) $F97801 ( returnOCs , origOC ) } } origSet . removeAll ( returnOCs ) ; } return returnOCs ; }
public static int unixTimestamp $F72 { return ( int ) $F210831 ( System ) ; }
public boolean isPDFLicense $F72 { String key = getSummary ( ) ; $F179974 ( key ) }
protected void drawGridBackground ( Canvas c ) { $F351179 ( mDrawGridBackground , c , mViewPortHandler , mGridBackgroundPaint ) $F351179 ( mDrawBorders , c , mViewPortHandler , mBorderPaint ) }
public ZipStreamImpl openReadImpl ( PathImpl path ) throws IOException { $F14393 ( pathName , path ) return openReadImpl ( pathName ) ; }
$F52843 ( packed , map , i , j , count , value )
$F1 public void onTmpFilesCopied ( ResultCode result ) $F9099 ( dismissLoadingDialog , finish )
public synchronized OMGraphicList prepare $F72 { Projection projection = getProjection ( ) ; boolean DEBUG_FINE = $F5288 ( logger , Level ) ; if ( projection == null ) { if ( DEBUG_FINE ) { logger . fine ( getName ( ) + NUM00 ) ; } return new OMGraphicList $F72 ; } if ( spatialIndex == null ) { if ( DEBUG_FINE ) { logger . fine ( getName ( ) + NUM00 ) ; } OMGraphicList list = getList ( ) ; if ( list != null ) { list . generate ( projection , _BOOL ) ; return list ; } else { return new OMGraphicList $F72 ; } } Point2D ul = projection . getUpperLeft ( ) ; Point2D lr = projection . getLowerRight ( ) ; $F82240 ( ulLat , ul ) $F82242 ( ulLon , ul ) $F82240 ( lrLat , lr ) $F82242 ( lrLon , lr ) $F138819 ( list ) if ( ProjMath . isCrossingDateline ( ulLon , lrLon , projection . getScale ( ) ) ) { $F22808 ( DEBUG_FINE , logger ) $F59772 ( ymin , Math , ulLat , lrLat ) $F7560 ( ymax , Math , ulLat , lrLat ) try { list = spatialIndex . getOMGraphics ( ulLon , ymin , NUM00 , ymax , list , drawingAttributes , projection , coordTransform ) ; list = spatialIndex . getOMGraphics ( - NUM00 , ymin , lrLon , ymax , list , drawingAttributes , projection , coordTransform ) ; } catch ( InterruptedIOException iioe ) { list = null ; } catch ( IOException ex ) { $F157331 ( DEBUG_FINE , ex ) } catch ( FormatException fe ) { $F157331 ( DEBUG_FINE , fe ) } catch ( NullPointerException npe ) { $F157331 ( DEBUG_FINE , npe ) } } else { $F59772 ( xmin , Math , ulLon , lrLon ) $F7560 ( xmax , Math , ulLon , lrLon ) $F59772 ( ymin , Math , ulLat , lrLat ) $F7560 ( ymax , Math , ulLat , lrLat ) try { list = spatialIndex . getOMGraphics ( xmin , ymin , xmax , ymax , list , drawingAttributes , projection , coordTransform ) ; } catch ( InterruptedIOException iioe ) { list = null ; } catch ( $F3258 ex ) { $F157331 ( DEBUG_FINE , ex ) } catch ( FormatException fe ) { $F157331 ( DEBUG_FINE , fe ) } catch ( NullPointerException npe ) { $F157331 ( DEBUG_FINE , npe ) } } return list ; }
static WorkQueue commonSubmitterQueue $F72 { ForkJoinPool p ; $F17861 ws ; int m ; Submitter z ; return ( $F17863 ( z , submitters ) && ( p = commonPool ) != null && $F17865 ( ws , p ) && $F17868 ( m , ws ) ) ? ws [ m & z . seed & SQMASK ] : null ; }
private boolean isFieldPackagePrivate ( Element attribute ) { Set < Modifier > modifiers = attribute . getModifiers ( ) ; return ! modifiers . contains ( PUBLIC ) && ! modifiers . contains ( PROTECTED ) && ! modifiers . contains ( PRIVATE ) ; }
public void testDivideRoundHalfUpPos $F72 $F207243 ( a , aScale , b , bScale , c , resScale , aNumber , bNumber , result , BigDecimal , assertEquals )
public boolean reallyRestoreMsWordListFormatForUser ( String userId , InputStreamReader streamReader , boolean isAdmin , Errors errors ) { if ( userId == null ) { Errors . add ( errors , errorMessages . errorsUserIdIsNull ( ) ) ; return _BOOL ; } if ( streamReader == null ) { Errors . add ( errors , errorMessages . errorsTheInputStreamReaderIsNull ( ) ) ; return _BOOL ; } $F20481 ( bf , streamReader ) final User user = getUserById ( userId ) ; $F1933 ( user , _BOOL ) boolean createdAnyChildren = _BOOL ; try { $F42358 ( now , System ) Entry notebook = createEntryNoteBook ( user , NUM00 , now , null , null , _BOOL , _BOOL , _BOOL , isAdmin , _BOOL , errors ) ; $F1933 ( notebook , _BOOL ) Entry root = getEntryById ( notebook . getRootId ( ) ) ; $F60075 parents = new $F60075 $F72 ; HashMap $F8434 bulletToDepth = new HashMap $F8434 $F72 ; String line = null ; Integer previousDepth = NUM00 ; parents . add ( root ) ; while $F443 ( line , bf ) { $F1382 ( line ) if $F2979 ( line ) $F1448 String note = line ; Integer depth = NUM00 ; if ( $F15506 ( line ) ) { $F28921 ( bullet , line ) $F64779 ( note , line ) depth = bulletToDepth . get ( bullet ) ; if ( depth == null ) { depth = new Integer ( $F2958 ( bulletToDepth ) ) ; bulletToDepth . put ( bullet , depth ) ; } for ( $F2198 ( i , parents ) ; i > depth . intValue ( ) ; -- i ) { $F18938 ( parents , i ) } depth = new Integer ( $F2958 ( parents ) ) ; } else { previousDepth = NUM00 ; while $F3817 ( parents ) $F68329 ( parents ) } $F4975 ( parents , _BOOL ) Entry $F7662 ( parent , parents ) ; Entry entry = createSimpleEntry ( user , note , now , parent . getId ( ) , TreeRelType . Parent , _BOOL , _BOOL , _BOOL , isAdmin , Constants . note , errors , null ) ; $F1933 ( entry , _BOOL ) if ( previousDepth . intValue ( ) != depth . intValue ( ) ) $F207 ( parents , entry ) else $F233310 ( parents , entry ) createdAnyChildren = _BOOL ; } } catch ( IOException e ) { Errors . add ( errors , errorMessages . errorProblemReadingInput ( ) ) ; } return createdAnyChildren ; }
$F169125 protected void onPageScrolled $F3665 ( position , offset , offsetPixels ) { $F31867 ( mDecorChildCount , scrollX , getScrollX , paddingLeft , getPaddingLeft , paddingRight , getPaddingRight , width , getWidth , childCount , getChildCount , i , child , getChildAt , lp , hgrav , Gravity , childLeft , Math , childOffset ) dispatchOnPageScrolled ( position , offset , offsetPixels ) ; $F31877 ( mPageTransformer , scrollX , getScrollX , childCount , getChildCount , i , child , getChildAt , lp , transformPos , getClientWidth ) mCalledSuper = _BOOL ; }
public static String convertCodes ( String string ) { $F6928 ( string ) int current = NUM00 ; $F7782 ( cs , string ) $F83 ( sb ) for ( char c : cs ) { if ( current <= cs . length && c == NUM00 ) { char tc = Character . toLowerCase ( cs [ current + NUM00 ] ) ; if ( tc == NUM00 || tc == NUM00 || tc == NUM00 || tc == NUM00 || tc == NUM00 || tc == NUM00 || tc == NUM00 || tc == NUM00 || tc == NUM00 || tc == NUM00 || tc == NUM00 || tc == NUM00 || tc == NUM00 || tc == NUM00 || tc == NUM00 || tc == NUM00 || tc == NUM00 || tc == NUM00 || tc == NUM00 || tc == NUM00 || tc == NUM00 ) $F86 ( sb ) else $F288 ( sb , c ) } else $F288 ( sb , c ) current ++ ; } $F92 ( sb ) }
private void loadText ( InputStream is ) { BufferedReader reader ; String line ; $F13241 ( unitList ) $F13241 ( unitTypesList ) if ( is == null ) $F78453 $F105457 ( reader , is ) try { $F36243 ( line , reader ) lineCount ++ ; while ( line != null ) { if $F14943 ( line ) { parseAndAdd ( line , reader ) ; } $F36243 ( line , reader ) } $F59 ( reader ) units = new DatabaseClusterUnit $F2313 ( unitList ) ; units = ( DatabaseClusterUnit [ ] ) unitList . toArray ( units ) ; unitList = null ; unitTypes = new UnitType $F2313 ( unitTypesList ) ; unitTypes = ( UnitType [ ] ) unitTypesList . toArray ( unitTypes ) ; unitTypesList = null ; } catch ( IOException e ) { throw new Error ( e . getMessage ( ) + NUM00 + lineCount ) ; } $F4231 }
private float calculateSelectorRadius $F72 { if ( mfSelectorRadius == NUM00 ) { $F2047 ( nHeight , mSelectedView ) $F2049 ( nWidth , mSelectedView ) $F17432 ( nLargerSide , Math , nWidth , nHeight ) mfSelectorRadius = ( ( nLargerSide ^ NUM00 ) / NUM00 ) ; } return mfSelectorRadius ; }
private int measureWidth ( int measureSpec ) { int result ; $F20444 ( specMode , MeasureSpec , measureSpec ) $F23132 ( specSize , MeasureSpec , measureSpec ) if ( specMode == MeasureSpec . EXACTLY ) { result = specSize ; } else { result = ( int ) mTextPaint . measureText ( mText ) + getPaddingLeft ( ) + getPaddingRight ( ) ; $F23140 ( specMode , MeasureSpec , result , Math , specSize ) } return result ; }
public void test_getPutByteArray $F72 { final int capacity = NUM00 ; final ByteArrayBuffer buf = new ByteArrayBuffer ( capacity ) ; assertEquals ( $F19905 , buf . getByte ( NUM00 ) ) ; assertEquals ( $F19905 , buf . getByte ( capacity - NUM00 ) ) ; final int pos = NUM00 ; for ( $F119 ( i , LIMIT ) ) { final $F96 expected = new byte [ r . nextInt ( capacity - NUM00 ) ] ; r . nextBytes ( expected ) ; buf . put ( pos , expected ) ; assertEquals ( NUM00 , BytesUtil . compareBytesWithLenAndOffset ( NUM00 , expected . length , expected , pos , expected . length , buf . array ( ) ) ) ; final $F96 $F14612 ( actual , expected ) ; buf . get ( pos , actual ) ; assertTrue ( BytesUtil . bytesEqual ( expected , actual ) ) ; } assertEquals ( $F19905 , buf . getByte ( NUM00 ) ) ; assertEquals ( $F19905 , buf . getByte ( pos + capacity - NUM00 ) ) ; }
$F1 public void onAdded ( final RPObject object ) { if ( isUser ( object ) ) { if $F16934 ( object ) { $F103786 ( adminlevel , object ) } } }
private String local_number $F72 throws ParseException { $F83 ( s ) $F10954 ( debug , dbg_enter ) try { int lc = NUM00 ; while ( lexer . hasMoreChars ( ) ) { char la = lexer . lookAhead ( NUM00 ) ; if ( la == NUM00 || la == NUM00 || la == NUM00 || la == NUM00 || la == NUM00 || la == NUM00 || Lexer . isHexDigit ( la ) ) { lexer . consume ( NUM00 ) ; s . append ( la ) ; lc ++ ; } else if ( lc > NUM00 ) $F597 else throw createParseException ( NUM00 + la ) ; } $F92 ( s ) } finally { $F10954 ( debug , dbg_leave ) } }
public void pathValuesToPixel ( $F77502 paths ) $F155016 ( i , paths , pathValueToPixel )
public static $F96 decode ( String s ) $F36684 ( decode , s )
public static void checkState ( boolean expression , Object errorMessage ) { if ( ExoPlayerLibraryInfo . ASSERTIONS_ENABLED && ! expression ) { throw new IllegalStateException $F45942 ( String , errorMessage ) ; } }
public static void slideInFromTopAnimator ( $F4170 List $F113170 animators , $F4170 View view , RecyclerView recyclerView ) { alphaAnimator ( animators , view , NUM00 ) ; animators . add ( ObjectAnimator . ofFloat ( view , NUM00 , - recyclerView . getMeasuredHeight ( ) > > NUM00 , NUM00 ) ) ; if ( FlexibleAdapter . DEBUG ) $F27746 ( Log , TAG ) }
MutableBigInteger ( MutableBigInteger val ) { intLen = val . intLen ; value = Arrays . copyOfRange ( val . value , val . offset , val . offset + intLen ) ; }
@ RequestMapping ( $F3144 ) public void ssoBindingError ( Locale locale , @ PathVariable ( $F3144 ) String tenant , HttpServletResponse response ) throws IOException { logger . info ( $F370 ( locale , tenant ) ) ; ssoDefaultTenantError ( locale , response ) ; }
public CheckpointManager ( NetworkParameters params , $F5466 InputStream inputStream ) throws IOException { this . params = checkNotNull ( params ) ; $F192589 ( inputStream , openStream , params ) checkNotNull ( inputStream ) ; inputStream = new BufferedInputStream ( inputStream ) ; $F46282 ( inputStream ) $F7468 ( first , inputStream ) $F2268 ( inputStream ) if ( first == BINARY_MAGIC . charAt ( NUM00 ) ) dataHash = readBinary ( inputStream ) ; else if ( first == TEXTUAL_MAGIC . charAt ( NUM00 ) ) dataHash = readTextual ( inputStream ) ; else $F3575 }
public IndexSegmentIndex ( IRawStore store , Checkpoint checkpoint , IndexMetadata metadata , boolean readOnly ) { super ( store , checkpoint , metadata , readOnly ) ; }
private String liveness $F72 { boolean isClosed = _BOOL ; try { if ( isClosed ( ) ) { isClosed = _BOOL ; } } catch ( SQLException s ) { isClosed = _BOOL ; } if ( isClosed ) $F2455 $F1278 }
private static void insertValue ( final $F14855 paramsMap , final String paramVal , final String parameterName ) { if ( paramVal != null ) { $F24645 ( list ) list . add ( paramVal ) ; paramsMap . put ( parameterName , list ) ; } }
public Dimension minimumLayoutSize ( Container target ) { Dimension size ; synchronized ( this ) { checkContainer ( target ) ; checkRequests ( ) ; size = new Dimension ( xTotal . minimum , yTotal . minimum ) ; } $F3970 ( insets , target ) size . width = ( int ) Math . min ( ( long ) size . width + ( long ) insets . left + ( long ) insets . right , Integer . MAX_VALUE ) ; size . height = ( int ) Math . min ( ( long ) size . height + ( long ) insets . top + ( long ) insets . bottom , Integer . MAX_VALUE ) ; return size ; }
private static void solve_l2r_l1l2_svr ( Problem prob , $F1986 w , Parameter param ) { int l = prob . l ; double C = param . C ; double p = param . p ; int w_size = prob . n ; double eps = param . eps ; int i , s , iter = NUM00 ; int max_iter = param . getMaxIters ( ) ; int active_size = l ; $F4120 ( index , l ) double d , G , H ; double Gmax_old = Double . POSITIVE_INFINITY ; double Gmax_new , Gnorm1_new ; double Gnorm1_init = - NUM00 ; $F9662 ( beta , l ) $F9662 ( QD , l ) $F1986 y = prob . y ; $F1986 lambda = new double [ ] { NUM00 / C } ; $F1986 upper_bound = new double [ ] { Double . POSITIVE_INFINITY } ; if ( param . solverType == SolverType . L2R_L1LOSS_SVR_DUAL ) { lambda [ NUM00 ] = NUM00 ; upper_bound [ NUM00 ] = C ; } for ( i = NUM00 ; i < l ; i ++ ) beta [ i ] = NUM00 ; for ( i = NUM00 ; i < w_size ; i ++ ) w [ i ] = NUM00 ; for ( i = NUM00 ; i < l ; i ++ ) { QD [ i ] = NUM00 ; for ( Feature xi : prob . x [ i ] ) { $F10704 ( val , xi ) QD [ i ] += val * val ; w [ xi . getIndex ( ) - NUM00 ] += beta [ i ] * val ; } index [ i ] = i ; } while ( iter < max_iter ) { Gmax_new = NUM00 ; Gnorm1_new = NUM00 ; for ( i = NUM00 ; i < active_size ; i ++ ) { int j = i + random . nextInt ( active_size - i ) ; swap ( index , i , j ) ; } for ( s = NUM00 ; s < active_size ; s ++ ) { i = index [ s ] ; G = - y [ i ] + lambda [ GETI_SVR ( i ) ] * beta [ i ] ; H = QD [ i ] + lambda [ GETI_SVR ( i ) ] ; for ( Feature xi : prob . x [ i ] ) { int ind = xi . getIndex ( ) - NUM00 ; $F10704 ( val , xi ) G += val * w [ ind ] ; } double Gp = G + p ; double Gn = G - p ; double violation = NUM00 ; if ( beta [ i ] == NUM00 ) { if ( Gp < NUM00 ) violation = - Gp ; else if ( Gn > NUM00 ) violation = Gn ; else if ( Gp > Gmax_old && Gn < - Gmax_old ) { active_size -- ; swap ( index , s , active_size ) ; s -- ; $F598 } } else if ( beta [ i ] >= upper_bound [ GETI_SVR ( i ) ] ) { if ( Gp > NUM00 ) violation = Gp ; else if ( Gp < - Gmax_old ) { active_size -- ; swap ( index , s , active_size ) ; s -- ; $F598 } } else if ( beta [ i ] <= - upper_bound [ GETI_SVR ( i ) ] ) { if ( Gn < NUM00 ) violation = - Gn ; else if ( Gn > Gmax_old ) { active_size -- ; swap ( index , s , active_size ) ; s -- ; $F598 } } else if ( beta [ i ] > NUM00 ) violation = Math . abs ( Gp ) ; else violation = Math . abs ( Gn ) ; $F19410 ( Gmax_new , Math , violation ) Gnorm1_new += violation ; if ( Gp < H * beta [ i ] ) d = - Gp / H ; else if ( Gn > H * beta [ i ] ) d = - Gn / H ; else d = - beta [ i ] ; if $F20932 ( Math , d ) $F598 double beta_old = beta [ i ] ; beta [ i ] = Math . min ( Math . max ( beta [ i ] + d , - upper_bound [ GETI_SVR ( i ) ] ) , upper_bound [ GETI_SVR ( i ) ] ) ; d = beta [ i ] - beta_old ; if ( d != NUM00 ) { for ( Feature xi : prob . x [ i ] ) { w [ xi . getIndex ( ) - NUM00 ] += d * xi . getValue ( ) ; } } } if ( iter == NUM00 ) Gnorm1_init = Gnorm1_new ; iter ++ ; if ( iter % NUM00 == NUM00 ) info ( NUM00 ) ; if ( Gnorm1_new <= eps * Gnorm1_init ) { if ( active_size == l ) $F597 else { active_size = l ; info ( NUM00 ) ; Gmax_old = Double . POSITIVE_INFINITY ; $F598 } } Gmax_old = Gmax_new ; } info ( NUM00 , iter ) ; if ( iter >= max_iter ) info ( NUM00 ) ; double v = NUM00 ; int nSV = NUM00 ; for ( i = NUM00 ; i < w_size ; i ++ ) $F60596 ( v , w , i ) v = NUM00 * v ; for ( i = NUM00 ; i < l ; i ++ ) { v += p * Math . abs ( beta [ i ] ) - y [ i ] * beta [ i ] + NUM00 * lambda [ GETI_SVR ( i ) ] * beta [ i ] * beta [ i ] ; if ( beta [ i ] != NUM00 ) nSV ++ ; } info ( NUM00 , v ) ; info ( NUM00 , nSV ) ; }
public boolean select ( int position ) { View v = mAllList . get ( position ) ; if ( mMultiChoiceAdapter != null ) { performVibrate ( ) ; performSelect ( v , position , _BOOL ) ; return _BOOL ; } return _BOOL ; }
$F1 public $F987 listOptions $F72 { $F20795 ( result ) $F9007 ( result ) $F9007 ( result ) $F9010 ( result , Collections , super ) $F1007 ( result ) }
$F1 public void ignorableWhitespace ( XMLString text , Augmentations augs ) throws XNIException { if ( ! fIncludeIgnorableWhitespace || fFilterReject ) $F932 if ( ! fDeferNodeExpansion ) { Node child = fCurrentNode . getLastChild ( ) ; if ( child != null && $F77051 ( child , Node ) ) { Text textNode = ( Text ) child ; textNode . appendData ( text . toString ( ) ) ; } else { Text textNode = fDocument . createTextNode ( text . toString ( ) ) ; if ( fDocumentImpl != null ) { TextImpl textNodeImpl = ( TextImpl ) textNode ; textNodeImpl . setIgnorableWhitespace ( _BOOL ) ; } fCurrentNode . appendChild ( textNode ) ; } } else { int txt = fDeferredDocumentImpl . createDeferredTextNode ( text . toString ( ) , _BOOL ) ; fDeferredDocumentImpl . appendChild ( fCurrentNodeIndex , txt ) ; } }
private static final void waitForEditorToBeActive ( IEditorPart internalFileEditor , IWorkbenchPage page ) { $F657 ( start , System ) long end = start ; do $F22067 ( end , System ) while ( page . getActiveEditor ( ) != internalFileEditor && ( end - start ) < NUM00 ) ; if ( page . getActiveEditor ( ) != internalFileEditor ) $F10910 ( logger ) }
private Solution largestObjectiveValue ( int objective , Population population ) { Solution largest = null ; double value = Double . NEGATIVE_INFINITY ; for ( Solution solution : population ) { if ( solution . getObjective ( objective ) > value ) { largest = solution ; value = solution . getObjective ( objective ) ; } } return largest ; }
public static int convertLatmToY ( int latm ) { long v = Math . round ( ( Mercator . MAX_Y - Mercator . lat2y ( latm / LATLON_TO_LATLONM ) ) * MAX_AP_UNITS / ( Mercator . MAX_Y * NUM00 ) ) ; if ( v > MAX_AP_UNITS ) return MAX_AP_UNITS ; $F125151 ( v ) $F23219 ( v ) }
public void registerCallbackHandler ( SMSObjectListener changeListener ) throws SMSException { objectListener = changeListener ; if ( ! notificationInitialized ) { String notificationFlag = SystemProperties . get ( NOTIFICATION_PROPERTY , NUM00 ) ; if $F21935 ( notificationFlag ) { try { URL url = WebtopNaming . getNotificationURL ( ) ; PLLClient . addNotificationHandler ( JAXRPCUtil . SMS_SERVICE , new SMSNotificationHandler $F72 ) ; client . send ( NUM00 , url . toString ( ) , null , null ) ; $F36310 ( debug , url ) } catch ( Exception e ) { if $F12866 ( debug ) { debug . warning ( $F47745 ( e ) + NUM00 ) ; } startPollingThreadIfEnabled ( getCachePollingInterval ( ) ) ; } } else $F7429 ( startPollingThreadIfEnabled , getCachePollingInterval ) notificationInitialized = _BOOL ; } }
public static NSObject parse ( InputStream in ) throws ParseException , IOException { $F96 buf = PropertyListParser . readAll ( in ) ; $F59 ( in ) return parse ( buf ) ; }
protected double currentScoreFunction $F72 { double score = NUM00 ; for ( int i = NUM00 ; i < this . values [ this . currentVar1 ] . length ; i ++ ) { for ( int j = NUM00 ; j < this . values [ this . currentVar2 ] . length ; j ++ ) { score -= this . currentCounts [ this . currentVar1 ] [ this . currentVar2 ] [ i ] [ j ] * Math . log ( this . currentPi [ i ] [ j ] ) ; } } return score ; }
public grammaticalityEstimator ( Set FileNames , int iMinChar , int iMaxChar , int iCharWindow , int iMinWord , int iMaxWord , int iWordWindow ) { iMinCharNGram = iMinChar ; iMaxCharNGram = iMaxChar ; iMinWordNGram = iMinWord ; iMaxWordNGram = iMaxWord ; iWordDist = iWordWindow ; iCharDist = iCharWindow ; DistroDocs = new TreeMap < Integer , DistributionDocument > $F72 ; DistroWordDocs = new TreeMap < Integer , DistributionWordDocument > $F72 ; $F280 ( sb ) $F10531 ( iTexts , FileNames ) while $F2921 ( iTexts ) { $F2778 ( sFile , iTexts ) try { $F51387 ( bf , sFile ) String sTmp ; while $F443 ( sTmp , bf ) sb . append ( sTmp ) ; $F59 ( bf ) } catch ( FileNotFoundException ex ) $F289588 ( ex , System ) catch ( IOException ex ) $F289588 ( ex , System ) sb . append ( $F2858 ) ; } $F6947 ( FullTextDataString , sb ) for ( int iCnt = iMinCharNGram ; iCnt <= iMaxCharNGram ; iCnt ++ ) { DistroDocs . put ( iCnt , new DistributionDocument ( iCharDist , iCnt ) ) ; } for ( int iCnt = iMinWordNGram ; iCnt <= iMaxWordNGram ; iCnt ++ ) { DistroWordDocs . put ( iCnt , new DistributionWordDocument ( iWordDist , iCnt ) ) ; } }
private int checkZoneLink ( SpannableStringBuilder out , String in , int start ) { int pos = start + NUM00 ; $F83 ( temp ) String targetString = in . substring ( pos , Math . min ( in . length ( ) , pos + NUM00 ) ) ; boolean prevIsDash = _BOOL ; for ( $F1088 ( i , targetString ) ) { $F1280 ( c , targetString , i ) if $F19297 ( c ) $F40016 ( temp , c , prevIsDash , _BOOL ) else if ( c == NUM00 ) { $F7630 ( i ) if ( prevIsDash ) { $F50865 ( temp ) $F597 } temp . append ( c ) ; prevIsDash = _BOOL ; } else { if ( prevIsDash ) $F50866 ( temp ) $F597 } } $F1822 ( zone , temp ) if ( $F3598 ( zone ) || zone . equalsIgnoreCase ( NUM00 ) ) $F7629 out . append ( zone ) ; return pos + zone . length ( ) - NUM00 ; }
public void checkNextPoissonConsistency ( double mean ) { final int sampleSize = NUM00 ; final int minExpectedCount = NUM00 ; long maxObservedValue = NUM00 ; final double alpha = NUM00 ; UnitTestUtils . Frequency $F17803 frequency = new UnitTestUtils . Frequency $F17803 $F72 ; for ( $F119 ( i , sampleSize ) ) { long value = randomData . nextPoisson ( mean ) ; $F12283 ( value , maxObservedValue ) frequency . addValue ( value ) ; } PoissonDistribution poissonDistribution = new PoissonDistribution ( mean ) ; int lower = NUM00 ; while ( poissonDistribution . cumulativeProbability ( lower - NUM00 ) * sampleSize < minExpectedCount ) { lower ++ ; } int upper = $F11263 ( mean ) ; while ( ( NUM00 - poissonDistribution . cumulativeProbability ( upper - NUM00 ) ) * sampleSize < minExpectedCount ) { upper -- ; } int binWidth = NUM00 ; boolean widthSufficient = _BOOL ; double lowerBinMass = NUM00 ; double upperBinMass = NUM00 ; while ( ! widthSufficient ) { binWidth ++ ; lowerBinMass = poissonDistribution . probability ( lower - NUM00 , lower + binWidth - NUM00 ) ; upperBinMass = poissonDistribution . probability ( upper - binWidth - NUM00 , upper - NUM00 ) ; widthSufficient = FastMath . min ( lowerBinMass , upperBinMass ) * sampleSize >= minExpectedCount ; } $F67791 ( binBounds ) binBounds . add ( lower ) ; int bound = lower + binWidth ; while ( bound < upper - binWidth ) { binBounds . add ( bound ) ; bound += binWidth ; } binBounds . add ( upper ) ; final int $F152626 ( binCount , binBounds ) ; $F12300 ( observed , binCount ) $F9662 ( expected , binCount ) observed [ NUM00 ] = NUM00 ; for ( $F119 ( i , lower ) ) { observed [ NUM00 ] += frequency . getCount ( ( long ) i ) ; } expected [ NUM00 ] = poissonDistribution . cumulativeProbability ( lower - NUM00 ) * sampleSize ; observed [ binCount - NUM00 ] = NUM00 ; for ( int i = upper ; i <= maxObservedValue ; i ++ ) { observed [ binCount - NUM00 ] += frequency . getCount ( ( long ) i ) ; } expected [ binCount - NUM00 ] = ( NUM00 - poissonDistribution . cumulativeProbability ( upper - NUM00 ) ) * sampleSize ; for ( $F4864 ( i , binCount ) ) { observed [ i ] = NUM00 ; for ( int j = binBounds . get ( i - NUM00 ) ; j < binBounds . get ( i ) ; j ++ ) { observed [ i ] += frequency . getCount ( ( long ) j ) ; } expected [ i ] = ( poissonDistribution . cumulativeProbability ( binBounds . get ( i ) - NUM00 ) - poissonDistribution . cumulativeProbability ( binBounds . get ( i - NUM00 ) - NUM00 ) ) * sampleSize ; } if ( UnitTestUtils . chiSquareTest ( expected , observed ) < alpha ) { $F83 ( msgBuffer ) $F79122 ( df ) $F84 ( msgBuffer ) msgBuffer . append ( mean ) ; $F84 ( msgBuffer ) msgBuffer . append ( UnitTestUtils . chiSquareTest ( expected , observed ) ) ; $F84 ( msgBuffer ) msgBuffer . append ( UnitTestUtils . chiSquare ( expected , observed ) ) ; $F84 ( msgBuffer ) $F84 ( msgBuffer ) for ( $F1139 ( i , expected ) ) { $F84 ( msgBuffer ) msgBuffer . append ( i == NUM00 ? NUM00 : binBounds . get ( i - NUM00 ) ) ; $F84 ( msgBuffer ) msgBuffer . append ( i == binBounds . size ( ) ? NUM00 : binBounds . get ( i ) ) ; $F84 ( msgBuffer ) $F84 ( msgBuffer ) msgBuffer . append ( df . format ( expected [ i ] ) ) ; $F84 ( msgBuffer ) $F6939 ( msgBuffer , observed , i ) $F84 ( msgBuffer ) } $F84 ( msgBuffer ) msgBuffer . append ( alpha ) ; $F84 ( msgBuffer ) Assert . fail ( msgBuffer . toString ( ) ) ; } }
public static void checkValid $F9830 ( x ) { for ( double v : x ) { if $F35707 ( Double , v ) $F1666 ( v ) } }
final void layoutChildren ( boolean queryAdapter ) { $F3666 ( paddingLeft , getPaddingLeft ) $F3666 ( paddingRight , getPaddingRight ) final int itemMargin = mItemMargin ; final int colWidth = ( getWidth ( ) - paddingLeft - paddingRight - itemMargin * ( mColCount - NUM00 ) ) / mColCount ; mColWidth = colWidth ; int rebuildLayoutRecordsBefore = - NUM00 ; int rebuildLayoutRecordsAfter = - NUM00 ; $F406787 ( Arrays , mItemBottoms , Integer ) $F3666 ( childCount , getChildCount ) int amountRemoved = NUM00 ; for ( $F119 ( i , childCount ) ) { View child = getChildAt ( i ) ; $F310049 ( lp , child ) final int col = lp . column ; final int position = mFirstPosition + i ; final boolean needsLayout = queryAdapter || child . isLayoutRequested ( ) ; if ( queryAdapter ) { View newView = obtainView ( position , child ) ; if ( newView == null ) { removeViewAt ( i ) ; if ( i - NUM00 >= NUM00 ) invalidateLayoutRecordsAfterPosition ( i - NUM00 ) ; amountRemoved ++ ; $F598 } else if ( newView != child ) { removeViewAt ( i ) ; addView ( newView , i ) ; child = newView ; } lp = ( LayoutParams ) child . getLayoutParams ( ) ; } final int span = $F406799 ( Math , mColCount , lp ) ; final int widthSize = colWidth * span + itemMargin * ( span - NUM00 ) ; if ( needsLayout ) { final int widthSpec = $F19050 ( MeasureSpec , widthSize ) ; final int heightSpec ; if ( lp . height == LayoutParams . WRAP_CONTENT ) { heightSpec = MeasureSpec . makeMeasureSpec ( NUM00 , MeasureSpec . UNSPECIFIED ) ; } else { heightSpec = MeasureSpec . makeMeasureSpec ( lp . height , MeasureSpec . EXACTLY ) ; } child . measure ( widthSpec , heightSpec ) ; } int childTop = mItemBottoms [ col ] > Integer . MIN_VALUE ? mItemBottoms [ col ] + mItemMargin : child . getTop ( ) ; if ( span > NUM00 ) { int lowest = childTop ; for ( int j = col + NUM00 ; j < col + span ; j ++ ) { final int bottom = mItemBottoms [ j ] + mItemMargin ; $F12283 ( bottom , lowest ) } childTop = lowest ; } final int childHeight = child . getMeasuredHeight ( ) ; final int childBottom = childTop + childHeight ; final int childLeft = paddingLeft + col * ( colWidth + itemMargin ) ; final int childRight = childLeft + child . getMeasuredWidth ( ) ; child . layout ( childLeft , childTop , childRight , childBottom ) ; for ( $F5883 ( j , col , span ) ) { mItemBottoms [ j ] = childBottom ; } final LayoutRecord rec = mLayoutRecords . get ( position ) ; if ( rec != null && rec . height != childHeight ) { rec . height = childHeight ; rebuildLayoutRecordsBefore = position ; } if ( rec != null && rec . span != span ) { rec . span = span ; rebuildLayoutRecordsAfter = position ; } } for ( $F119 ( i , mColCount ) ) { if ( mItemBottoms [ i ] == Integer . MIN_VALUE ) $F15086 ( mItemBottoms , i , mItemTops ) } if ( rebuildLayoutRecordsBefore >= NUM00 || rebuildLayoutRecordsAfter >= NUM00 ) { $F308891 ( rebuildLayoutRecordsBefore , invalidateLayoutRecordsBeforePosition ) $F308891 ( rebuildLayoutRecordsAfter , invalidateLayoutRecordsAfterPosition ) for ( int i = NUM00 ; i < ( childCount - amountRemoved ) ; i ++ ) { final int position = mFirstPosition + i ; final View child = getChildAt ( i ) ; $F3670 ( lp , child ) LayoutRecord rec = mLayoutRecords . get ( position ) ; if ( rec == null ) { rec = new LayoutRecord $F72 ; mLayoutRecords . put ( position , rec ) ; } rec . column = lp . column ; $F130165 ( rec , child ) rec . id = lp . id ; rec . span = $F406799 ( Math , mColCount , lp ) ; } } if ( this . mSelectorPosition != INVALID_POSITION ) $F406862 ( child , getChildAt , mMotionPosition , mFirstPosition , positionSelector ) else if ( mTouchMode > TOUCH_MODE_DOWN ) $F406862 ( child , getChildAt , mMotionPosition , mFirstPosition , positionSelector ) else $F406864 ( mSelectorRect ) }
protected void processConnectionEvent ( ConnectionEvent event ) { for ( Enumeration < ConnectionListener > e = connectionListeners . elements ( ) ; e . hasMoreElements ( ) ; ) { ConnectionListener l = e . nextElement ( ) ; switch $F56007 ( event ) { case ConnectionEvent . CONNECTED : l . connected ( ( ConnectedEvent ) event ) ; $F597 case ConnectionEvent . DISCONNECTED : l . disconnected ( ( DisconnectedEvent ) event ) ; $F597 case ConnectionEvent . PACKET_RECEIVED : l . packetReceived ( ( PacketReceivedEvent ) event ) ; $F597 } } }
public double percentage ( ConstantRange range ) { SortedSet < Constant > sorted = values ( ) ; SortedSet < Constant > contained = new TreeSet < Constant > $F72 ; Constant prev = null ; for ( Constant pct : sorted ) { if $F105 ( range , pct ) contained . add ( pct ) ; else if $F2979 ( contained ) prev = pct ; } if $F10471 ( contained ) $F1082 double prevPercent = prev == null ? NUM00 : pcts . get ( prev ) ; return pcts . get ( contained . last ( ) ) - prevPercent ; }
public static void closeQuiet ( $F5466 Closeable closeable ) $F25132 ( closeable )
$F1 public void releaseLuceePageContext ( PageContext pc , boolean register ) { if ( pc . getId ( ) < NUM00 ) $F665 $F33833 ( pc ) $F33833 ( ThreadLocalPageContext ) runningPcs . remove ( Integer . valueOf ( pc . getId ( ) ) ) ; if ( $F6213 ( pcs ) && pc . getRequestTimeoutException ( ) == null ) pcs . push ( pc ) ; }
public void addEventListener ( SIPDialogEventListener newListener ) $F207 ( eventListeners , newListener )
$F25527 ( redundantOpCompactThreshold , redundantOpCount , lruEntries )
private static $F96 stringToByteArray ( String str ) { $F1338 ( str ) $F39526 ( srcByte , str ) int srcLength = srcByte . length ; $F130978 ( result , srcLength ) $F135 ( System , srcByte , result , srcLength ) result [ srcLength ] = NUM00 ; return result ; }
public static Properties loadProperties ( ClassLoader classLoader , String classpathResource ) $F15679 ( loadProperties , classpathResource )
$F1 public boolean equals ( Object o ) { if ( o instanceof Graph ) { return string . equals ( o . toString ( ) ) ; } return _BOOL ; }
public final static NameValuePair parseNameValuePair $F45528 ( value , parser ) throws ParseException { $F826 ( value ) $F45529 ( parser , SaveHeaderValueParser ) $F45535 ( buffer , value ) buffer . append ( value ) ; SaveParserCursor cursor = new SaveParserCursor ( $F34024 ( value ) ) ; return parser . parseNameValuePair ( buffer , cursor ) ; }
$F35762 ( newScrollValue , itemDimension , initialMotionValue , lastMotionValue , getPullToRefreshScrollDirection , HORIZONTAL , mInitialMotionX , mLastMotionX , VERTICAL , mInitialMotionY , mLastMotionY , mCurrentMode , PULL_FROM_END , Math , FRICTION , getFooterSize , PULL_FROM_START , getHeaderSize , setHeaderScroll , isRefreshing , scale , mFooterLayout , mHeaderLayout , mState , State , setState )
private static MappingObject ObjectAt ( PCalLocation loc , MappingObject [ ] [ ] map ) { return map [ loc . getLine ( ) ] [ loc . getColumn ( ) ] ; }
public String parse ( File file , JSON m ) { try { Template template = getTemplate ( file ) ; if ( template != null ) { $F29429 ( w ) $F5172 ( writer , w ) template . merge ( new VelocityContext ( m ) , writer ) ; $F1206 ( writer ) $F59 ( writer ) $F92 ( w ) } } $F36160 ( log , e ) $F1274 }
private $F16501 diff_main $F35621 ( text1 , text2 , checklines , deadline ) { $F3541 ( text1 , text2 ) $F16501 diffs ; if $F1238 ( text1 , text2 ) { diffs = new $F16501 $F72 ; if $F35625 ( text1 ) $F35630 ( diffs , Operation , text1 ) return diffs ; } int commonlength = diff_commonPrefix ( text1 , text2 ) ; $F11991 ( commonprefix , text1 , commonlength ) $F11978 ( text1 , commonlength ) $F11978 ( text2 , commonlength ) commonlength = diff_commonSuffix ( text1 , text2 ) ; String commonsuffix = $F35634 ( text1 , commonlength ) ; $F35641 ( text1 , commonlength ) $F35641 ( text2 , commonlength ) diffs = diff_compute ( text1 , text2 , checklines , deadline ) ; if $F35625 ( commonprefix ) { diffs . addFirst ( $F35627 ( Operation , commonprefix ) ) ; } if $F35625 ( commonsuffix ) { diffs . addLast ( $F35627 ( Operation , commonsuffix ) ) ; } diff_cleanupMerge ( diffs ) ; return diffs ; }
public Repository ( String domain , boolean fairLock ) { lock = new ReentrantReadWriteLock ( fairLock ) ; domainTb = new HashMap < String , Map < String , NamedObject > > $F989 ; if $F69744 ( domain ) this . domain = domain . intern ( ) ; else this . domain = ServiceName . DOMAIN ; domainTb . put ( this . domain , new HashMap < String , NamedObject > $F72 ) ; }
public int countTokens $F72 { int count = NUM00 ; boolean inToken = _BOOL ; for ( int i = position , length = string . length ( ) ; i < length ; i ++ ) { if ( delimiters . indexOf ( string . charAt ( i ) , NUM00 ) >= NUM00 ) { if ( returnDelimiters ) count ++ ; if ( inToken ) { count ++ ; inToken = _BOOL ; } } else { inToken = _BOOL ; } } if ( inToken ) count ++ ; return count ; }
public static synchronized void indexDocument ( CodeIndexDocument codeIndexDocument ) throws IOException { Queue < CodeIndexDocument > queue = new ConcurrentLinkedQueue $F200 $F72 ; queue . add ( codeIndexDocument ) ; indexDocuments ( queue ) ; queue = null ; }
protected void resetCommon $F72 throws XNIException $F16404 ( count , fCommonComponents , i , c , this )
private void updateVolumeLabels ( Volume trustedSrc , Volume invalidTgt ) { VirtualArray invalidTgtVA = dbClient . queryObject ( VirtualArray . class , invalidTgt . getVirtualArray ( ) ) ; $F83 ( newLabel ) newLabel . append ( trustedSrc . getLabel ( ) ) ; $F84 ( newLabel ) newLabel . append ( invalidTgtVA . getLabel ( ) ) ; $F209111 ( log , newLabel ) invalidTgt . setLabel ( newLabel . toString ( ) ) ; NamedURI projectURI = invalidTgt . getProject ( ) ; projectURI . setName ( newLabel . toString ( ) ) ; invalidTgt . setProject ( projectURI ) ; NamedURI tenantURI = invalidTgt . getTenant ( ) ; tenantURI . setName ( newLabel . toString ( ) ) ; invalidTgt . setTenant ( tenantURI ) ; Volume tgtVplexVolume = VPlexSrdfUtil . getVplexVolumeFromSrdfVolume ( dbClient , invalidTgt ) ; if ( tgtVplexVolume != null ) { Volume srcVplexVolume = VPlexSrdfUtil . getVplexVolumeFromSrdfVolume ( dbClient , trustedSrc ) ; if ( srcVplexVolume != null ) { $F4910 ( newLabel ) newLabel . append ( srcVplexVolume . getLabel ( ) ) ; $F84 ( newLabel ) newLabel . append ( invalidTgtVA . getLabel ( ) ) ; $F209111 ( log , newLabel ) tgtVplexVolume . setLabel ( newLabel . toString ( ) ) ; projectURI = tgtVplexVolume . getProject ( ) ; projectURI . setName ( newLabel . toString ( ) ) ; tgtVplexVolume . setProject ( projectURI ) ; tenantURI = tgtVplexVolume . getTenant ( ) ; tenantURI . setName ( newLabel . toString ( ) ) ; tgtVplexVolume . setTenant ( tenantURI ) ; dbClient . updateAndReindexObject ( tgtVplexVolume ) ; } } }
protected void handle ( Exception exception , String title , String message ) { Utils . handleError ( getShell ( ) , exception , title , message ) ; }
private void readObject ( ObjectInputStream in ) throws $F6427 { $F6428 ( in ) i18n = Environment . getI18n ( ) ; beanContextChildSupport = new BeanContextChildSupport ( this ) ; }
private void paintForegroundEnabled $F269611 ( g , width , height ) { Shape s = decodeArrowPath ( width , height ) ; g . setPaint ( enabledColor ) ; g . fill ( s ) ; }
private static void logThrow ( Level level , String className , String methodName , String message , $F131 args , Throwable thrown ) { java . util . logging . LogRecord lr = new java . util . logging . LogRecord ( level , message ) ; lr . setLoggerName ( logger . getName ( ) ) ; lr . setSourceClassName ( className ) ; lr . setSourceMethodName ( methodName ) ; lr . setParameters ( args ) ; lr . setThrown ( thrown ) ; logger . log ( lr ) ; }
public void testToBigIntegerZero $F72 $F114431 ( a , bNumber , aNumber , result , assertTrue )
public void onAccuracyChanged ( Sensor sensor , int accuracy ) { if ( sensor . getType ( ) != Sensor . TYPE_ACCELEROMETER ) $F932 if ( this . status == AccelListener . STOPPED ) $F932 this . accuracy = accuracy ; }
$F125330 ( allowsTrailingArguments )
@ AndroidOnly ( NUM00 + NUM00 ) public void testSetMaxCRLNumberLjava_math_BigInteger $F72 { $F40920 ( selector ) $F88961 ( maxCRL ) $F390737 ( crl , maxCRL ) selector . setMaxCRLNumber ( null ) ; $F97594 ( assertTrue , selector , crl ) selector . setMaxCRLNumber ( maxCRL ) ; $F97594 ( assertTrue , selector , crl ) selector . setMaxCRLNumber ( new BigInteger $F580 ) ; $F97594 ( assertFalse , selector , crl ) }
private void evaluatePopup ( MouseEvent e ) { if $F264788 ( e ) { JPopupMenu menu = createBookmarkPopupMenu ( ) ; if ( menu != null ) $F268505 ( menu , this , e ) } }
private boolean removeTask ( Task t , int min ) { for ( $F2198 ( i , tasks ) ; -- i >= min ; ) { if $F36973 ( tasks , i , t ) { tasks . remove ( i ) ; if ( i < firstPending ) { firstPending -- ; for ( $F335206 ( j , threads ) ) { TaskThread thread = threads . get ( j ) ; if ( thread . task == t ) { if ( thread != Thread . currentThread ( ) ) $F7589 ( thread ) $F597 } } } return _BOOL ; } } return _BOOL ; }
public void test_DivideBigDecimalRoundingModeHALF_UP $F72 { String a = NUM00 ; String b = NUM00 ; RoundingMode rm = RoundingMode . HALF_UP ; String c = NUM00 ; $F29821 ( aNumber , a ) $F29821 ( bNumber , b ) $F29822 ( result , aNumber , bNumber , rm ) $F1925 ( assertEquals , c , result ) }
protected void ensurePathExists ( String path ) { $F6542 ( paths , path ) $F8755 ( spath ) for ( String temp : paths ) { if $F7283 ( StringUtils , temp ) $F1448 spath . append ( temp ) ; ensureExists ( spath . toString ( ) , null , acl , CreateMode . PERSISTENT ) ; $F84 ( spath ) } }
public $F6969 loadClass ( String name , boolean resolve ) throws ClassNotFoundException { $F24867 ( i , name ) if ( i != - NUM00 ) { $F8108 ( sm , System ) if ( sm != null ) { sm . checkPackageAccess ( name . substring ( NUM00 , i ) ) ; } } if ( ucp . knownToNotExist ( name ) ) { $F69674 ( c , findLoadedClass , name ) if ( c != null ) { $F72524 ( resolve , resolveClass , c ) return c ; } $F102970 ( name ) } return ( super . loadClass ( name , resolve ) ) ; }
$F23145 ( measureSpec , result , specMode , MeasureSpec , specSize , mRadius , getPaddingTop , getPaddingBottom , Math )
private boolean isListChildUnderClipped ( float x , float y ) { final View listChild = findListChildUnder ( x , y ) ; return listChild != null && isDescendantClipped ( listChild ) ; }
Rules ( Workspace workspace ) { this . root = workspace . getRoot ( ) ; this . teamHook = workspace . getTeamHook ( ) ; }
public static void writeByteArrayToFile ( File file , $F96 data , boolean append ) throws IOException { OutputStream out = null ; try { out = openOutputStream ( file , append ) ; out . write ( data ) ; $F59 ( out ) } $F18090 ( IOUtils , out ) }
public void add ( $F4170 T item ) { synchronized ( lock ) $F23232 ( items , item ) if ( notifyOnChange ) { $F4173 ( notifyItemInserted , items ) } }
private void checkPendingCustomMessages $F72 { if ( joiningNodes . isEmpty ( ) && isLocalNodeCoordinator ( ) ) { TcpDiscoveryCustomEventMessage msg ; while $F22655 ( msg , pendingCustomMsgs ) { processCustomMessage ( msg ) ; if ( msg . verified ( ) ) msgHist . add ( msg ) ; } } }
private static $F7465 ( msg , startpos , count , len , idx , ch , isDigit )
protected int parseAndAddNode ( XmlResourceParser parser , HashMap < String , TagParser > tagParserMap , $F17804 screenIds ) throws $F18821 { if $F3175 ( TAG_INCLUDE , parser ) { final int resId = getAttributeResourceValue ( parser , ATTR_WORKSPACE , NUM00 ) ; if ( resId != NUM00 ) $F8587 ( parseLayout , resId , screenIds ) else $F1083 } $F725 ( mValues ) parseContainerAndScreen ( parser , mTemp ) ; final long container = mTemp [ NUM00 ] ; final long screenId = mTemp [ NUM00 ] ; mValues . put ( Favorites . CONTAINER , container ) ; mValues . put ( Favorites . SCREEN , screenId ) ; mValues . put ( Favorites . CELLX , convertToDistanceFromEnd ( getAttributeValue ( parser , ATTR_X ) , mColumnCount ) ) ; mValues . put ( Favorites . CELLY , convertToDistanceFromEnd ( getAttributeValue ( parser , ATTR_Y ) , mRowCount ) ) ; TagParser $F24916 ( tagParser , tagParserMap , parser ) ; if ( tagParser == null ) { if ( LOGD ) Log . d ( $F71108 ( TAG , parser ) ) ; $F1082 } long newElementId = tagParser . parseAndAdd ( parser ) ; if ( newElementId >= NUM00 ) { if ( ! screenIds . contains ( screenId ) && container == Favorites . CONTAINER_DESKTOP ) $F207 ( screenIds , screenId ) $F1082 } $F1082 }
private float calculateScrambleImageHeightMultiplier ( float multiplier ) { switch ( currentPuzzle ) { case PuzzleUtils . TYPE_777 : case PuzzleUtils . TYPE_666 : case PuzzleUtils . TYPE_555 : case PuzzleUtils . TYPE_222 : case PuzzleUtils . TYPE_444 : case PuzzleUtils . TYPE_333 : return ( multiplier / NUM00 ) * NUM00 ; case PuzzleUtils . TYPE_CLOCK : return multiplier / NUM00 ; case PuzzleUtils . TYPE_MEGA : return ( multiplier / NUM00 ) ; case PuzzleUtils . TYPE_PYRA : return ( float ) ( multiplier / Math . sqrt ( NUM00 ) ) ; case PuzzleUtils . TYPE_SKEWB : return ( multiplier / NUM00 ) * NUM00 ; case PuzzleUtils . TYPE_SQUARE1 : return multiplier ; } return multiplier ; }
public void testNumericScalars $F72 throws Exception { $F44214 ( m ) m . enableDefaultTyping ( ) ; assertEquals ( NUM00 , m . writeValueAsString ( new Object [ ] { Integer . valueOf ( NUM00 ) } ) ) ; assertEquals ( NUM00 , m . writeValueAsString ( new Object [ ] { Long . valueOf ( NUM00 ) } ) ) ; assertEquals ( NUM00 , m . writeValueAsString ( new Object [ ] { Double . valueOf ( NUM00 ) } ) ) ; assertEquals ( NUM00 , m . writeValueAsString ( new Object [ ] { Float . valueOf ( NUM00 ) } ) ) ; }
protected void closeCallbacksExceptListener $F72 { closeCacheCallback ( getCacheLoader ( ) ) ; closeCacheCallback ( getCacheWriter ( ) ) ; closeCacheCallback ( getEvictionController ( ) ) ; }
private static int indexOf ( Object o , $F131 elements , int index , int fence ) { if ( o == null ) { for ( int i = index ; i < fence ; i ++ ) if ( elements [ i ] == null ) return i ; } else { for ( int i = index ; i < fence ; i ++ ) if $F145 ( o , elements , i ) return i ; } $F150 }
private void populateProfiles ( final ProfileList profiles ) { $F213890 ( profilesComboBox ) for ( Profile p : profiles ) $F86251 ( profilesComboBox , p ) final int count = profilesComboBox . getItemCount ( ) ; if ( count != NUM00 ) { profilesComboBox . setSelectedIndex ( count - NUM00 ) ; } }
private long checkFileHeader ( BufferedFileDataInput bfdi ) throws $F47918 { int magic = NUM00 ; short major = NUM00 ; short minor = NUM00 ; try { bfdi . waitAvailable ( HEADER_LENGTH , HEADER_WAIT_MILLIS ) ; $F5961 ( magic , bfdi ) $F11214 ( major , bfdi ) $F11214 ( minor , bfdi ) $F33039 ( baseSeqno , bfdi ) } catch ( IOException e ) { throw new THLException $F27414 ( file , e ) ; } if ( magic != MAGIC1BER ) throw new THLException ( $F62869 ( file ) ) ; if ( major != MAJOR_VERSION ) throw new THLException ( $F62869 ( file ) ) ; if ( minor != MINOR_VERSION ) logger . warn ( $F62869 ( file ) + major + NUM00 + minor + NUM00 + MAJOR_VERSION + NUM00 + MINOR_VERSION ) ; return baseSeqno ; }
public float realAbsolute $F72 $F170694 ( Math , mLeft )
private ExtremumType extremumType ( int n , $F1986 alpha_extreme , HyperBoundingBox interval ) { if $F74408 ( n , alpha_extreme ) { return extremumType ; } $F40939 ( alpha_extreme_l , alpha_extreme ) $F40939 ( alpha_extreme_r , alpha_extreme ) $F40939 ( alpha_extreme_c , alpha_extreme ) $F7057 ( System , alpha_extreme , alpha_extreme_l ) $F7057 ( System , alpha_extreme , alpha_extreme_r ) $F7057 ( System , alpha_extreme , alpha_extreme_c ) $F1986 centroid = SpatialUtil . centroid ( interval ) ; for ( $F119 ( i , n ) ) { alpha_extreme_l [ i ] = centroid [ i ] ; alpha_extreme_r [ i ] = centroid [ i ] ; alpha_extreme_c [ i ] = centroid [ i ] ; } double intervalLength = interval . getMax ( n ) - interval . getMin ( n ) ; alpha_extreme_l [ n ] = Math . random ( ) * intervalLength + interval . getMin ( n ) ; alpha_extreme_r [ n ] = Math . random ( ) * intervalLength + interval . getMin ( n ) ; double f_c = function ( alpha_extreme_c ) ; double f_l = function ( alpha_extreme_l ) ; double f_r = function ( alpha_extreme_r ) ; if ( f_l < f_c ) { if ( f_r < f_c || Math . abs ( f_r - f_c ) < DELTA ) { return ExtremumType . MAXIMUM ; } } if ( f_r < f_c ) { if ( f_l < f_c || Math . abs ( f_l - f_c ) < DELTA ) { return ExtremumType . MAXIMUM ; } } if ( f_l > f_c ) { if ( f_r > f_c || Math . abs ( f_r - f_c ) < DELTA ) { return ExtremumType . MINIMUM ; } } if ( f_r > f_c ) { if ( f_l > f_c || Math . abs ( f_l - f_c ) < DELTA ) { return ExtremumType . MINIMUM ; } } if ( Math . abs ( f_l - f_c ) < DELTA && Math . abs ( f_r - f_c ) < DELTA ) { return ExtremumType . CONSTANT ; } throw new IllegalArgumentException ( NUM00 + this + NUM00 + NUM00 + f_l + NUM00 + NUM00 + f_c + NUM00 + NUM00 + f_r + NUM00 + NUM00 + vec . toArray ( ) + NUM00 + NUM00 + FormatUtil . format ( alpha_extreme_c ) + NUM00 + NUM00 + FormatUtil . format ( alpha_extreme_l ) + NUM00 + NUM00 + FormatUtil . format ( alpha_extreme_r ) + NUM00 + NUM00 + n ) ; }
public static String map2OID ( String algName ) { return alg2OidMap . get ( $F184776 ( algName , Locale ) ) ; }
$F1 public Generator < ICircle > construct $F4374 ( args ) { return new UniformGenerator $F115457 ( Double , args ) ; }
private boolean yy_refill $F72 throws $F3258 { $F72981 ( yy_startRead , System , yy_buffer , yy_endRead , yy_currentPos , yy_markedPos , yy_pushbackPos ) $F72988 ( yy_currentPos , yy_buffer , System , newBuffer ) $F7994 ( numRead , yy_reader , yy_buffer , yy_endRead ) $F72989 ( numRead , _BOOL , yy_endRead ) }
protected void processMouseEvent ( MouseEvent e ) { if ( myInplaceComponent != null && ( MouseEvent . MOUSE_PRESSED == e . getID ( ) || MouseEvent . MOUSE_RELEASED == e . getID ( ) ) ) { finishEditing ( _BOOL ) ; } super . processMouseEvent ( e ) ; }
protected void addModule ( $F50791 moduleMap , Collection $F50793 moduleList , IFloodlightModule module ) { Collection < $F50789 > servs = moduleServiceMap . get ( module ) ; if ( servs != null ) { for ( $F50789 c : servs ) moduleMap . put ( c , module ) ; } moduleList . add ( module ) ; }
protected boolean hasAllTables $F72 throws CouldntLoadDataException , InvalidDatabaseException { $F973 ( NaviLogger ) final int counter = PostgreSQLHelpers . getTableCount ( getConnection ( ) , Lists . newArrayList ( TABLES ) ) ; if ( counter == NUM00 ) { return _BOOL ; } else if ( counter == TABLES . length ) { return _BOOL ; } else { throw new InvalidDatabaseException ( String . format ( NUM00 , counter , TABLES . length ) ) ; } }
public $F3803 classify ( List < List < Feature > > features ) throws CleartkProcessingException { $F20724 featureStringArray = toStrings ( features ) ; Pipe pipe = transducer . getInputPipe ( ) ; Instance instance = new Instance ( featureStringArray , null , null , null ) ; instance = pipe . instanceFrom ( instance ) ; Sequence $F1011 data = ( Sequence $F1011 ) instance . getData ( ) ; Sequence $F1011 untypedSequence = transducer . transduce ( data ) ; Sequence $F4 sequence = ReflectionUtil . uncheckedCast ( untypedSequence ) ; $F10144 ( returnValues ) for ( $F2277 ( i , sequence ) ) { $F1729 ( encodedOutcome , sequence , i ) returnValues . add ( outcomeEncoder . decode ( encodedOutcome ) ) ; } return returnValues ; }
public void onBindHeaderViewHolder ( $F43069 holder , int position ) { onBindHeaderViewHolder ( holder , position , Collections . emptyList ( ) ) ; }
private void updateLineList $F72 { if $F31483 ( horizontalLineRadiobutton ) $F5795 ( setHorizontalLineSelected ) else $F5795 ( setVerticalLineSelected ) updateButtonStates ( ) ; }
public void rectangle $F12359 ( x , y , halfWidth , halfHeight ) { $F30465 ( halfWidth ) $F30465 ( halfHeight ) double xs = scaleX ( x ) ; double ys = scaleY ( y ) ; double ws = factorX ( NUM00 * halfWidth ) ; double hs = factorY ( NUM00 * halfHeight ) ; if ( ws <= NUM00 && hs <= NUM00 ) pixel ( x , y ) ; else offscreen . draw ( new $F1634 ( xs - ws / NUM00 , ys - hs / NUM00 , ws , hs ) ) ; draw ( ) ; }
$F120210 ( maximumPullScroll , getMaximumPullScroll , pLeft , getPaddingLeft , pTop , getPaddingTop , pRight , getPaddingRight , pBottom , getPaddingBottom , getPullToRefreshScrollDirection , HORIZONTAL , mMode , mHeaderLayout , mFooterLayout , VERTICAL , DEBUG , Log , LOG_TAG , String , setPadding )
public void replaceSplitElement ( int aIndex , Fragment aSplitElement ) $F65992 ( splits , aIndex , aSplitElement )
private void startItemList ( StringBuilder result , String rootId ) { result . append ( NUM00 + NUM00 + rootId + NUM00 ) ; }
private static int numInitialSplits ( long numRecords ) { final int maxSplits = NUM00 ; final long recordsPerSplit = NUM00 ; return ( int ) Math . min ( maxSplits , numRecords / recordsPerSplit + NUM00 ) ; }
public void mouseClicked ( MouseEvent e ) { if ( e . getClickCount ( ) > NUM00 ) { $F58463 ( System ) } }
private static $F806 scanForSources ( final File sourceDir , $F11290 ( sourceIncludes ) , $F11290 ( sourceExcludes ) ) { final DirectoryScanner ds = new DirectoryScanner $F72 ; ds . setFollowSymlinks ( _BOOL ) ; ds . setBasedir ( sourceDir ) ; ds . setIncludes ( $F10148 ( sourceIncludes ) ) ; ds . setExcludes ( $F10148 ( sourceExcludes ) ) ; ds . addDefaultExcludes ( ) ; try { ds . scan ( ) ; } catch ( IllegalStateException e ) { return $F382 ; } return ds . getIncludedFiles ( ) ; }
private boolean hasNextPostponed $F72 $F3387 ( postponedRoutes )
public boolean hasSingleElement $F72 { $F214965 ( mSelectedWidgets ) }
public IgfsPath ( URI uri ) { $F18062 ( A , uri ) path = $F158868 ( normalizePath , uri ) ; }
public int toInt ( Element el , String attributeName ) { return Caster . toIntValue ( el . getAttribute ( attributeName ) , Integer . MIN_VALUE ) ; }
$F47733 ( reader , writer , buffer , count )
public void addGetters ( int assignedPropertyNumber , String propertyName ) { for ( EventType type : knownTypes ) { EventPropertyGetter getter = type . getGetter ( propertyName ) ; VariantPropertyGetterRow row = allGetters . get ( type ) ; if ( row == null ) { synchronized ( this ) { row = new VariantPropertyGetterRow ( type , new EventPropertyGetter [ assignedPropertyNumber + NUM00 ] ) ; allGetters . put ( type , row ) ; } } row . addGetter ( assignedPropertyNumber , getter ) ; } properties . add ( propertyName ) ; }
protected void markUsed ( Entry entry ) { entry . lastUsed = System . nanoTime ( ) ; }
$F1 public String execute $F72 { return SUCCESS ; }
private void handleStateLeft ( InetAddress endpoint , $F806 pieces ) { assert pieces . length >= NUM00 ; Collection $F40118 tokens = getTokensFor ( endpoint ) ; if $F585 ( logger ) $F39971 ( logger , endpoint , tokens ) excise ( tokens , endpoint , extractExpireTime ( pieces ) ) ; }
public static void register ( String algorithmURI , Class < ? extends SignatureAlgorithmSpi > implementingClass ) throws AlgorithmAlreadyRegisteredException , ClassNotFoundException , XMLSignatureException { $F139595 ( JavaUtils ) if $F59675 ( log , java ) { log . log ( $F59673 ( java ) , NUM00 + algorithmURI + NUM00 + implementingClass ) ; } Class < ? extends SignatureAlgorithmSpi > registeredClass = algorithmHash . get ( algorithmURI ) ; if ( registeredClass != null ) { Object exArgs [ ] = { algorithmURI , registeredClass } ; throw new AlgorithmAlreadyRegisteredException ( NUM00 , exArgs ) ; } algorithmHash . put ( algorithmURI , implementingClass ) ; }
$F1431 public KeyValuePersistenceSettings ( File settingsFile ) { InputStream in ; try { $F5335 ( in , settingsFile ) } catch ( IOException e ) { throw new IgniteException $F27414 ( settingsFile , e ) ; } init ( loadSettings ( in ) ) ; }
public boolean containsWordBreakingChar ( final $F4170 CharSequence input ) { if $F20899 ( TextUtils , input ) { for ( $F1088 ( i , input ) ) { $F1280 ( c , input , i ) $F46660 ( isWordBreakingChar , c , _BOOL ) } } return _BOOL ; }
private void checkInteriorIntersections $F72 { for ( $F2774 ( i , segStrings ) ) { SegmentString ss0 = ( SegmentString ) i . next ( ) ; for ( $F2774 ( j , segStrings ) ) { SegmentString ss1 = ( SegmentString ) j . next ( ) ; checkInteriorIntersections ( ss0 , ss1 ) ; } } }
public synchronized boolean removeElement ( Object object ) { int index ; if ( ( index = indexOf ( object , NUM00 ) ) == - NUM00 ) { return _BOOL ; } removeElementAt ( index ) ; return _BOOL ; }
private $F4203 UnaryOperator $F4203 compose ( UnaryOperator $F4203 before , UnaryOperator $F4203 after ) $F1337
private void addCdcColSpecs ( ArrayList < ColumnSpec > cdcSpecs , OneRowChange cdcRowChangeData ) { $F2199 ( cdcPos , cdcSpecs ) if ( cdcColumnsAtFront ) cdcPos = NUM00 ; ColumnSpec spec = cdcRowChangeData . new ColumnSpec $F72 ; spec . setIndex ( cdcPos + NUM00 ) ; $F87453 ( spec ) spec . setType ( java . sql . Types . VARCHAR ) ; $F4910 ( spec ) cdcSpecs . add ( cdcPos , spec ) ; spec = cdcRowChangeData . new ColumnSpec $F72 ; spec . setIndex ( cdcPos + NUM00 + NUM00 ) ; $F87453 ( spec ) spec . setType ( java . sql . Types . TIMESTAMP ) ; $F57027 ( cdcSpecs , cdcPos , spec ) spec = cdcRowChangeData . new ColumnSpec $F72 ; spec . setIndex ( cdcPos + NUM00 + NUM00 ) ; $F87453 ( spec ) spec . setType ( java . sql . Types . BIGINT ) ; $F57027 ( cdcSpecs , cdcPos , spec ) }
public static String convertToJavaFieldName ( String name ) { $F1384 ( dotIndex , name ) $F384188 ( dotIndex , name ) $F83044 ( split , name ) $F83 ( out ) boolean first = _BOOL ; for ( String section : split ) { if ( first ) $F40007 ( first , _BOOL , out , section ) else { out . append ( StringUtil . capitalize ( section ) ) ; } } $F92 ( out ) }
public static SecretKeys generateKey $F72 throws GeneralSecurityException { fixPrng ( ) ; $F156 ( keyGen , KeyGenerator , CIPHER ) keyGen . init ( AES_KEY_LENGTH_BITS ) ; $F43927 ( confidentialityKey , keyGen ) $F96 integrityKeyBytes = randomBytes ( HMAC_KEY_LENGTH_BITS / NUM00 ) ; SecretKey integrityKey = new SecretKeySpec ( integrityKeyBytes , HMAC_ALGORITHM ) ; return new SecretKeys ( confidentialityKey , integrityKey ) ; }
$F178575 ( expression , errorMessage , String )
protected void execute ( $F806 sqls , SQLiteDatabase db ) { String throwSQL = NUM00 ; try { if ( sqls != null ) { for ( String sql : sqls ) { throwSQL = sql ; db . execSQL ( BaseUtility . changeCase ( sql ) ) ; } } } catch ( SQLException e ) { throw new DatabaseGenerateException ( DatabaseGenerateException . SQL_ERROR + throwSQL ) ; } }
$F3441 ( journalWriter , writer , journalFileTmp , Util , MAGIC , VERSION_1 , Integer , appVersion , valueCount , entry , lruEntries , DIRTY , CLEAN , journalFile , renameTo , journalFileBackup , _BOOL )
private void refreshDoneButton ( boolean done ) { butDone . setText ( done ? Messages . getString ( NUM00 ) : Messages . getString ( NUM00 ) ) ; }
private void createMigrationTaskPage $F72 { MigrationTaskEditor migrationTaskEditor = new MigrationTaskEditor ( migrationTask , getContainer ( ) ) ; int index = addPage ( migrationTaskEditor . getControl ( ) ) ; setPageText ( index , NUM00 ) ; taskListeners . add ( migrationTaskEditor ) ; }
$F31880 ( position , offset , offsetPixels , mDecorChildCount , scrollX , getScrollX , paddingLeft , getPaddingLeft , paddingRight , getPaddingRight , width , getWidth , childCount , getChildCount , i , child , getChildAt , lp , hgrav , Gravity , childLeft , Math , childOffset , mOnPageChangeListener , mInternalPageChangeListener , mPageTransformer , transformPos , getClientWidth , mCalledSuper , _BOOL )
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
$F25545 ( i , count , buf , newbuf , mPool , System )
public static int toIPv4Address ( String ipAddress ) { if ( ipAddress == null ) $F11812 $F6542 ( octets , ipAddress ) if $F11845 ( octets ) $F11812 int result = NUM00 ; for ( $F809 ( i ) ) { int oct = Integer . valueOf ( octets [ i ] ) ; if $F58159 ( oct ) $F11812 result |= oct < < ( ( NUM00 - i ) * NUM00 ) ; } return result ; }
public void closeCursor ( Cursor cursor ) { $F59 ( cursor ) cursorMap . remove ( Integer . valueOf ( cursor . getCursorId ( ) ) ) ; }
private boolean hasNext ( Pattern pattern ) { $F1485 ( hasNext , _BOOL ) Matcher matcher = pattern . matcher ( gserValue . substring ( pos , length ) ) ; $F89398 ( matcher ) }
void pushInt ( int i ) { switch ( i ) { $F52533 mv . visitInsn ( ICONST_M1 ) ; $F665 $F3366 mv . visitInsn ( ICONST_0 ) ; $F665 $F3366 mv . visitInsn ( ICONST_1 ) ; $F665 $F3366 mv . visitInsn ( ICONST_2 ) ; $F665 $F3366 mv . visitInsn ( ICONST_3 ) ; $F665 $F3366 mv . visitInsn ( ICONST_4 ) ; $F665 $F3366 mv . visitInsn ( ICONST_5 ) ; $F665 } if ( i >= Byte . MIN_VALUE && i <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , i ) ; $F665 } if ( i >= Short . MIN_VALUE && i <= Short . MAX_VALUE ) { mv . visitIntInsn ( SIPUSH , i ) ; $F665 } mv . visitLdcInsn ( Integer . valueOf ( i ) ) ; }
public static String xmlNode $F106000 ( name , attributes , content , indent ) { String start = attributes == null ? name : name + attributes ; if ( content == null ) $F34654 ( start ) if ( indent && $F48845 ( content ) ) { content = NUM00 + indent ( content ) ; } return NUM00 + start + NUM00 + content + NUM00 + name + NUM00 ; }
public void add ( int position , $F4170 T item ) { synchronized ( lock ) { $F9406 ( items ) items . add ( position , item ) ; } $F72524 ( notifyOnChange , notifyItemInserted , position ) }
void notifyFailure ( Throwable exception ) { synchronized ( waitObject ) { isComplete = _BOOL ; if ( exception instanceof MqttException ) { pendingException = ( MqttException ) exception ; } else { pendingException = new MqttException ( exception ) ; } $F165 ( waitObject ) if ( exception instanceof MqttException ) { lastException = ( MqttException ) exception ; } if ( listener != null ) { listener . onFailure ( this , exception ) ; } } }
public static void transform ( StreamSource src , StreamSource stylesheet , Fop fop ) throws FOPException { Result res = new SAXResult ( fop . getDefaultHandler ( ) ) ; try { $F2218 ( factory , TransformerFactory ) Transformer transformer ; if ( stylesheet == null ) { transformer = factory . newTransformer ( ) ; } else { transformer = factory . newTransformer ( stylesheet ) ; } transformer . setURIResolver ( new LocalResolver ( transformer . getURIResolver ( ) ) ) ; transformer . transform ( src , res ) ; } catch ( Exception e ) { throw new FOPException ( e ) ; } }
public $F3803 splitStringWithDefaultDelimiterEscaped ( String inputString ) { String delimiter = configurationHelper . getProperty ( ConfigurationValue . FIELD_DATA_DELIMITER ) ; String escapeChar = configurationHelper . getProperty ( ConfigurationValue . FIELD_DATA_DELIMITER_ESCAPE_CHAR ) ; $F24645 ( splitString ) if $F16093 ( StringUtils , inputString ) { String regex = NUM00 + Pattern . quote ( escapeChar ) + NUM00 + Pattern . quote ( delimiter ) ; for ( String s : inputString . split ( regex ) ) { splitString . add ( s . replace ( escapeChar + delimiter , delimiter ) ) ; } } return splitString ; }
protected final boolean readAvailableBlocking $F72 throws IOException { $F1469 buffer = myBuffer ; StringBuilder token = myTextBuffer ; $F4910 ( token ) boolean read = _BOOL ; int n ; while $F87061 ( n , myReader , buffer ) { if ( myScheduledSubmitter != null ) myScheduledSubmitter . cancel ( _BOOL ) ; read = _BOOL ; synchronized ( myTextBuffer ) { processLine ( buffer , token , n ) ; } myScheduledSubmitter = myExecutorService . submit ( myTokenSubmitter ) ; } submitToken ( ) ; return read ; }
public void deleteObligation ( final Obligation obligation , int basicBlockId ) throws ObligationAcquiredOrReleasedInLoopException { Map < ObligationSet , State > updatedStateMap = new HashMap < ObligationSet , State > $F72 ; for ( Iterator $F7432 i = stateIterator ( ) ; i . hasNext ( ) ; ) { State state = i . next ( ) ; checkCircularity ( state , obligation , basicBlockId ) ; ObligationSet obligationSet = state . getObligationSet ( ) ; obligationSet . remove ( obligation ) ; if $F5973 ( obligationSet ) $F1717 ( updatedStateMap , obligationSet , state ) } replaceMap ( updatedStateMap ) ; }
$F73354 ( curViewBound , curViewWidth , right , mClipPadding )
public ContentImpl createCompoundPackageContent ( OleBlobImpl blob , String prettyName , String className , String typeName , ByteBuffer blobBb , int dataBlockLen ) { return new CompoundContentImpl ( blob , prettyName , className , typeName , blobBb . position ( ) , dataBlockLen ) ; }
protected boolean checkCoverage $F72 { int i ; int n ; $F2027 count ; Range r ; String attrIndex ; SubspaceClusterDefinition cl ; count = new int [ getNumAttributes ( ) ] ; for ( $F95978 ( i , getNumAttributes ) ) { for ( n = NUM00 ; n < getClusters ( ) . length ; n ++ ) { cl = ( SubspaceClusterDefinition ) getClusters ( ) [ n ] ; r = new Range ( cl . getAttrIndexRange ( ) ) ; r . setUpper ( getNumAttributes ( ) ) ; if ( r . isInRange ( i ) ) { count [ i ] ++ ; } } } attrIndex = NUM00 ; for ( $F6929 ( i , count ) ) { if ( count [ i ] == NUM00 ) { if $F35625 ( attrIndex ) { attrIndex += NUM00 ; } attrIndex += ( i + NUM00 ) ; } } if $F35625 ( attrIndex ) { throw new IllegalArgumentException $F54019 ( attrIndex ) ; } return _BOOL ; }
private $F11868 findValues ( String string ) { $F11868 $F129524 ( results ) ; for ( $F55140 ( str , string ) ) { if $F1264 ( str ) $F3762 ( results , findValue , str ) } return results ; }
private static int indexOf ( $F131 array , int len , Object elt ) { for ( $F119 ( i , len ) ) { if $F145 ( elt , array , i ) return i ; } $F150 }
$F1309 public void append $F2236 ( name , value ) { $F64948 ( l , map , name ) if ( l != null ) $F207 ( l , value ) else { l = Lists . newArrayList ( value ) ; map . put ( name , l ) ; } }
public boolean equals ( Object obj ) { $F3627 ( obj , this , _BOOL ) if ( ! ( obj instanceof Certificate ) ) { return _BOOL ; } Certificate object = ( Certificate ) obj ; try $F120506 ( Arrays , getEncoded , object ) catch ( CertificateEncodingException e ) { return _BOOL ; } }
public Statement between ( Object former , Object later ) { $F84 ( statement ) append ( former ) ; $F84 ( statement ) append ( later ) ; return this ; }
public $F96 encode1 ( final String s ) { final ByteArrayBuffer tmp = new ByteArrayBuffer $F45530 ( s ) ; final int nwritten = uc . encode ( s , tmp ) ; final int npack = LongPacker . getByteLength ( nwritten ) ; final $F96 a = new byte [ npack + nwritten ] ; final DataOutputBuffer dob = new DataOutputBuffer ( NUM00 , a ) ; try { dob . packLong ( nwritten ) ; dob . append ( tmp . array ( ) , NUM00 , tmp . pos ( ) ) ; return a ; } finally { try $F881 ( dob ) $F12153 ( e ) } }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
public static Map < Object , Long > valueHistogram ( GeoTimeSerie gts ) { Map < Object , Long > occurrences = new HashMap < Object , Long > $F72 ; for ( $F168888 ( i , gts ) ) { Object value = GTSHelper . valueAtIndex ( gts , i ) ; if $F15257 ( occurrences , value ) $F248856 ( occurrences , value ) else { occurrences . put ( value , NUM00 + occurrences . get ( value ) ) ; } } if ( GTSHelper . isBucketized ( gts ) && gts . bucketcount != gts . values ) { occurrences . put ( null , ( long ) ( gts . bucketcount - gts . values ) ) ; } return occurrences ; }
private void updateExistingRow ( final SQLiteDatabase database , final long id , boolean bumpCount ) { $F2544 ( stringId , String , id ) $F41822 ( database ) final Cursor cursor = database . query ( SongPlayCountColumns . NAME , null , WHERE_ID_EQUALS , $F8640 ( stringId ) , null , null , null ) ; if ( cursor != null && cursor . moveToFirst ( ) ) { int lastUpdatedIndex = cursor . getColumnIndex ( SongPlayCountColumns . LAST_UPDATED_WEEK_INDEX ) ; $F41834 ( lastUpdatedWeek , cursor , lastUpdatedIndex ) int weekDiff = mNumberOfWeeksSinceEpoch - lastUpdatedWeek ; if ( Math . abs ( weekDiff ) >= NUM_WEEKS ) { deleteEntry ( database , stringId ) ; $F308 ( bumpCount , createNewPlayedEntry , database , id ) } else if ( weekDiff != NUM00 ) { $F4120 ( playCounts , NUM_WEEKS ) if ( weekDiff > NUM00 ) { for ( $F8122 ( i , NUM_WEEKS , weekDiff ) ) { playCounts [ i + weekDiff ] = cursor . getInt ( getColumnIndexForWeek ( i ) ) ; } } else if ( weekDiff < NUM00 ) { for ( $F41842 ( i , NUM_WEEKS , weekDiff ) ) { playCounts [ i ] = cursor . getInt ( getColumnIndexForWeek ( i - weekDiff ) ) ; } } if ( bumpCount ) $F41850 ( playCounts ) float score = calculateScore ( playCounts ) ; if ( score < NUM00 ) { deleteEntry ( database , stringId ) ; } else { ContentValues values = new ContentValues ( NUM_WEEKS + NUM00 ) ; values . put ( SongPlayCountColumns . LAST_UPDATED_WEEK_INDEX , mNumberOfWeeksSinceEpoch ) ; values . put ( SongPlayCountColumns . PLAYCOUNTSCORE , score ) ; for ( $F119 ( i , NUM_WEEKS ) ) { values . put ( getColumnNameForWeek ( i ) , playCounts [ i ] ) ; } database . update ( SongPlayCountColumns . NAME , values , WHERE_ID_EQUALS , $F8640 ( stringId ) ) ; } } else if ( bumpCount ) { $F41874 ( values ) int scoreIndex = cursor . getColumnIndex ( SongPlayCountColumns . PLAYCOUNTSCORE ) ; float score = cursor . getFloat ( scoreIndex ) + getScoreMultiplierForWeek ( NUM00 ) ; values . put ( SongPlayCountColumns . PLAYCOUNTSCORE , score ) ; values . put ( getColumnNameForWeek ( NUM00 ) , cursor . getInt ( getColumnIndexForWeek ( NUM00 ) ) + NUM00 ) ; database . update ( SongPlayCountColumns . NAME , values , WHERE_ID_EQUALS , $F8640 ( stringId ) ) ; } $F59 ( cursor ) } else $F308 ( bumpCount , createNewPlayedEntry , database , id ) $F41894 ( database ) $F41895 ( database ) }
private void computeWeights ( Node node ) { int wsum = NUM00 ; for ( Node child : node . children ) { computeWeights ( child ) ; wsum += child . weight ; } node . weight = Math . max ( NUM00 , wsum ) ; }
public Searcher $F72 throws IOException { searcher = new IndexSearcher ( DirectoryReader . open ( FSDirectory . open ( Paths . get ( INDEX_DIR ) ) ) ) ; parser = new QueryParser ( CONTENT_FIELD , new StandardAnalyzer $F72 ) ; }
public QueryStringQueryBuilder field ( String field ) $F17642 ( fields , field , this )
public static < R , A , B > CompletionStage $F23350 combine ( CompletionStage $F20163 a , CompletionStage < B > b , BiFunction < A , B , R > function ) { return a . thenCombine ( b , function ) ; }
protected String buildCreateSchemaStatement $F72 throws ReplicatorException $F1337
public void testNegPosFirstShorter $F72 { $F50446 $F92469 int aSign = - NUM00 ; int bSign = NUM00 ; byte $F3018 = { NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F37344 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public StreamInfoManager ( TwitchApi api , StreamInfoListener listener ) { this . listener = listener ; this . api = api ; $F23429 ( pendingRequests ) invalidStreamInfo = new StreamInfo ( NUM00 , listener ) ; invalidStreamInfo . setRequested ( ) ; }
public Sentence asSentence $F72 { return Sentence . newConjunction ( sentences ) ; }
public boolean isPronoun $F72 $F298 ( typeString , SUFFIX_PRONOUN )
protected void appendShortType $F94426 ( sb , fieldType , fieldWidth ) $F86 ( sb )
public static Vector tokenizeString ( String source , String separator ) { if $F1277 ( separator ) { return tokenizeString ( source , separator . charAt ( NUM00 ) ) ; } $F6518 ( tokenized ) $F1749 ( len , source ) $F83 ( buf ) for ( $F119 ( iter , len ) ) { $F1280 ( current , source , iter ) if ( $F136643 ( separator , current ) ) { if $F4012 ( buf ) { $F147908 ( tokenized , buf ) $F6932 ( buf ) } } else $F288 ( buf , current ) } if $F4012 ( buf ) { $F147908 ( tokenized , buf ) } return tokenized ; }
private void backupFavorites ( BackupDataOutput data ) throws IOException { $F12250 ( cr , mContext ) Cursor cursor = cr . query ( Favorites . CONTENT_URI , FAVORITE_PROJECTION , getUserSelectionArg ( ) , null , null ) ; try { $F12257 ( cursor ) while $F12260 ( cursor ) { $F12262 ( id , cursor , ID_INDEX ) $F12262 ( updateTime , cursor , ID_MODIFIED ) Key key = getKey ( Key . FAVORITE , id ) ; mKeys . add ( key ) ; final String backupKey = keyToBackupKey ( key ) ; if ( ! mExistingKeys . contains ( backupKey ) || updateTime >= mLastBackupRestoreTime ) $F906 ( writeRowToBackup , key , packFavorite , cursor , data ) else { $F12259 ( DEBUG , Log , TAG , id ) } } } $F3229 ( cursor ) }
public void update $F72 { if ( lastTime != - NUM00 ) { long delta = System . nanoTime ( ) - lastTime ; rollingAverage . addValue ( delta ) ; } $F101251 ( lastTime , System ) }
public List < ValidationErrorMessage > validate $F72 { $F725 ( errorMessageIds ) $F896 ( paymentProduct ) for ( PaymentProductField field : paymentProduct . getPaymentProductFields ( ) ) { if ( ! isFieldInAccountOnFileAndNotAltered ( field ) ) { errorMessageIds . addAll ( field . validateValue ( $F13536 ( getValue , field ) ) ) ; } } return errorMessageIds ; }
KeyStoreState $F72 $F845
CryptoResult ( final T result , final $F81025 masterKeys , final CiphertextHeaders headers ) { result_ = result ; masterKeys_ = Collections . unmodifiableList ( masterKeys ) ; headers_ = headers ; encryptionContext_ = headers_ . getEncryptionContextMap ( ) ; }
public void stateChanged ( ChangeEvent e ) { $F7254 ( ignoreUpdate ) double value = ( double ) ( NUM00 - setpointSlider . getValue ( ) ) / NUM00 ; setSetPoint ( value ) ; sim . setSetPoint ( value ) ; }
public static $F806 parseDelimitedList ( String list , char delimiter ) { String delim = NUM00 + delimiter ; StringTokenizer st = new StringTokenizer ( list + delim + NUM00 , delim , _BOOL ) ; $F8728 ( v ) String lastToken = NUM00 ; String word = NUM00 ; while $F14498 ( st ) { $F8095 ( tok , st ) if ( lastToken != null ) { if $F1238 ( tok , delim ) { word = word + lastToken ; if $F1238 ( lastToken , delim ) tok = null ; } else { if $F1264 ( word ) v . add ( word ) ; word = NUM00 ; } } lastToken = tok ; } $F16105 ( v ) }
private void initializeLayout $F72 { GridLayout gl = new GridLayout $F32532 ; gl . setVgap ( NUM00 ) ; setLayout ( gl ) ; add ( $F34046 ) ; add ( frozenDD ) ; add ( $F34046 ) ; add ( tfUpBound ) ; add ( $F34046 ) ; add ( tfLowBound ) ; add ( $F34046 ) ; add ( tfIncrement ) ; add ( $F34046 ) ; add ( tfDelay ) ; setBorder ( $F171654 ( BorderFactory ) ) ; }
$F1 public boolean isRunning $F72 { return $F293975 ( frame ) ; }
public static MosaicDefinition createMosaicDefinition ( final Account creator ) { return createMosaicDefinition ( creator , Utils . createMosaicId ( NUM00 , NUM00 ) , createMosaicProperties ( ) ) ; }
public Result result ( SqlNode node , Collection $F304761 clauses , RelNode rel ) { final String alias2 = SqlValidatorUtil . getAlias ( node , - NUM00 ) ; final String alias3 = alias2 != null ? alias2 : NUM00 ; final String alias4 = SqlValidatorUtil . uniquify ( alias3 , aliasSet , SqlValidatorUtil . EXPR_SUGGESTER ) ; final String alias5 = alias2 == null || ! alias2 . equals ( alias4 ) ? alias4 : null ; return new Result ( node , clauses , alias5 , Collections . singletonList ( Pair . of ( alias4 , rel . getRowType ( ) ) ) ) ; }
private static void _trustAllHttpsCertificates $F72 { SSLContext context ; if ( _trustManagers == null ) { _trustManagers = new TrustManager [ ] { new FakeX509TrustManager $F72 } ; } try { $F6161 ( context , SSLContext ) context . init ( null , _trustManagers , $F5607 ) ; } catch ( GeneralSecurityException gse ) { throw new IllegalStateException $F1783 ( gse ) ; } HttpsURLConnection . setDefaultSSLSocketFactory ( context . getSocketFactory ( ) ) ; }
private static boolean isInNeedOfForm ( UIComponent component ) { return ( component instanceof ActionSource || component instanceof ActionSource2 || component instanceof EditableValueHolder ) ; }
private void addInternalListeners $F72 { cbDistribution . addItemListener ( cbItemListener ) ; }
public static double safeSqrt ( double x ) { return ( x < NUM00 ? - Math . sqrt ( - x ) : Math . sqrt ( x ) ) ; }
public static long runMultiThreaded ( Iterable < $F353160 > calls , GridTestSafeThreadFactory threadFactory ) throws Exception { if ( ! busyLock . enterBusy ( ) ) $F4638 Collection $F392673 $F204 ( threads ) ; long time ; try { for ( $F353160 call : calls ) threads . add ( threadFactory . newThread ( call ) ) ; $F3224 ( time , System ) for ( Thread t : threads ) $F2346 ( t ) } finally { busyLock . leaveBusy ( ) ; } for ( Thread t : threads ) $F14454 ( t ) time = System . currentTimeMillis ( ) - time ; threadFactory . checkError ( ) ; return time ; }
private void bappend ( char ch ) { try { mBuff [ ++ mBuffIdx ] = ch ; } catch ( Exception exp ) { char buff [ ] = new char [ mBuff . length < < NUM00 ] ; $F7057 ( System , mBuff , buff ) mBuff = buff ; mBuff [ mBuffIdx ] = ch ; } }
public void initializeOwnerReferencesForField ( StateManager sm , FieldMetaData fmd ) { if ( fmd . getAssociationType ( ) == FieldMetaData . ONE_TO_MANY ) { $F7922 collection = ( $F7922 ) sm . fetch ( fmd . getIndex ( ) ) ; if ( collection != null ) { for ( Object item : collection ) { if ( item != null ) { _relationsManager . setOwnerStateManagerForPersistentInstance ( item , sm , fmd ) ; } } } } else if ( fmd . getAssociationType ( ) == FieldMetaData . ONE_TO_ONE || fmd . isEmbeddedPC ( ) ) { Object value = sm . fetch ( fmd . getIndex ( ) ) ; if ( value != null ) { _relationsManager . setOwnerStateManagerForPersistentInstance ( value , sm , fmd ) ; } } }
public String buildUnionSubQuery ( String typeDiscriminatorColumn , $F806 unionColumns , $F2689 columnsPresentInTable , int computedColumnsOffset , String typeDiscriminatorValue , String selection , String groupBy , String having ) { int unionColumnsCount = unionColumns . length ; $F12914 ( projectionIn , unionColumnsCount ) for ( $F119 ( i , unionColumnsCount ) ) { String unionColumn = unionColumns [ i ] ; if $F1238 ( unionColumn , typeDiscriminatorColumn ) { projectionIn [ i ] = NUM00 + typeDiscriminatorValue + NUM00 + typeDiscriminatorColumn ; } else if ( i <= computedColumnsOffset || columnsPresentInTable . contains ( unionColumn ) ) { projectionIn [ i ] = unionColumn ; } else { projectionIn [ i ] = NUM00 + unionColumn ; } } return buildQuery ( projectionIn , selection , groupBy , having , null , null ) ; }
public Node ( Coordinate pt ) { this ( pt , new DirectedEdgeStar $F72 ) ; }
public synchronized void increase $F72 { if ( accuracy > NUM00 ) { $F5740 ( timePassed , System , lastAdded ) if ( timePassed > accuracy ) { clearUp ( ) ; if ( count > NUM00 ) { data . addFirst ( lastAdded + accuracy ) ; } $F3224 ( lastAdded , System ) count = NUM00 ; } count ++ ; } else { clearUp ( ) ; data . addFirst ( System . currentTimeMillis ( ) ) ; } }
public void revert ( final VirtualFile root , final List $F337766 files ) throws VcsException { for ( $F3803 paths : VcsFileUtil . chunkPaths ( root , files ) ) { GitSimpleHandler handler = new GitSimpleHandler ( myProject , root , GitCommand . CHECKOUT ) ; handler . addParameters ( NUM00 ) ; handler . endOptions ( ) ; handler . addParameters ( paths ) ; $F21687 ( handler ) } }
public static $F5415 concatAllFloat ( $F5415 ... arrays ) { int totalLength = NUM00 ; $F18832 ( subArrayCount , arrays ) $F189285 ( i , subArrayCount , totalLength , arrays ) $F5415 $F189287 ( result , Arrays , arrays , totalLength ) ; $F26358 ( offset , arrays ) $F189290 ( i , subArrayCount , System , arrays , result , offset ) return result ; }
public TaggedValueIterator ( final String aLine , final boolean attemptFirstWord , final String ... tags ) { this . aLine = aLine ; this . attemptFirstWord = attemptFirstWord ; this . tags = tags ; tagPos = NUM00 ; nextResult = getNextResult ( ) ; if ( attemptFirstWord ) { int a = NUM00 ; while $F7007 ( a , aLine ) { if ( aLine . charAt ( a ) == NUM00 || aLine . charAt ( a ) == NUM00 || $F1750 ( Character , aLine , a ) ) a ++ ; else $F597 } int b = a + NUM00 ; while $F7007 ( b , aLine ) { if ( $F15875 ( Character , aLine , b ) || aLine . charAt ( b ) == NUM00 ) b ++ ; else $F597 } if ( b - a > NUM00 ) { nextResult = aLine . substring ( a , b ) ; } tagPos = b ; } }
public void ascendTree $F72 { if ( null != parentPath ) { parentPath . append ( PARENT_PATH ) ; $F665 } File parentTree = calcParentTree ( ) ; if ( null != parentTree ) $F24818 ( treeFile , parentTree ) parentPath = new StringBuilder ( provideLastName ( ) ) ; parentPath . append ( PARENT_PATH ) ; }
public boolean canRead $F72 $F40347 ( _is )
void writeTo $F5474 ( b , off ) $F112231 ( System , buf , b , off , count )
void onItemDismissed ( final int position ) { final T removed = mData . get ( position ) ; final boolean wasRemoved = remove ( position ) ; if ( wasRemoved && mDataChangeListener != null ) { mDataChangeListener . onItemRemoved ( removed , position ) ; } }
public static double normalPDF $F7635 ( x , variance , meanValue ) { $F96817 ( standardDeviation , Math , variance ) return ( NUM00 / ( standardDeviation * $F172440 ( Math ) ) ) * Math . pow ( Math . E , - ( $F127638 ( x , meanValue ) ) / ( NUM00 * variance ) ) ; }
public static $F131 sortCopy ( $F131 objects , Comparer comparer ) { int len = objects . length ; $F133 ( copy , len ) $F135 ( System , objects , copy , len ) sort ( copy , comparer ) ; return copy ; }
public synchronized void addZoomListener ( ZoomListener listener ) $F207 ( mZoomListeners , listener )
private void clearRegisters ( Instruction start , Instruction end ) { for ( Instruction p = start ; ; p = p . nextInstructionInCodeOrder ( ) ) { for ( $F75495 ops = p . getOperands ( ) ; ops . hasMoreElements ( ) ; ) { $F75499 ( op , ops ) if ( op instanceof RegisterOperand ) { RegisterOperand rOp = ( RegisterOperand ) op ; clearDepGraphNodeForRegister ( rOp . getRegister ( ) ) ; } } $F67767 ( p , end ) } for ( Enumeration < Register > e = GenericPhysicalDefUse . enumerateAllImplicitDefUses ( ir ) ; e . hasMoreElements ( ) ; ) { Register r = e . nextElement ( ) ; clearDepGraphNodeForRegister ( r ) ; } }
public void fireAnnotationSelected ( WorkflowAnnotation anno ) { List < WorkflowAnnotation > $F19827 ( list ) ; list . add ( anno ) ; fireAnnotationsChanged ( AnnotationEvent . SELECTED_ANNOTATION_CHANGED , list ) ; }
public boolean updateStatsAndReturnIfAllowed $F72 { $F68120 ( now , SystemClock ) long deltaMs = now - mLastRequestTimestamp ; if ( deltaMs < mDelayMs ) return _BOOL ; mLastRequestTimestamp = now ; if ( deltaMs < NUM00 * mDelayMs ) { mDelayMs = Math . min ( MAX_DELAY , mDelayMs * NUM00 ) ; } else { mDelayMs = MIN_DELAY ; } return _BOOL ; }
public boolean verifyServerEvidenceMessage ( BigInteger serverM2 ) throws CryptoException { if ( ( this . A == null ) || ( this . M1 == null ) || ( this . S == null ) ) { throw new CryptoException $F3487 ; } BigInteger computedM2 = SRP6Util . calculateM2 ( digest , N , A , M1 , S ) ; if $F1238 ( computedM2 , serverM2 ) { this . M2 = serverM2 ; return _BOOL ; } return _BOOL ; }
public void handleText ( String text ) { if ( skippingCharacters > NUM00 ) { if $F11984 ( skippingCharacters , text ) { skippingCharacters -= text . length ( ) ; $F665 } else { $F11978 ( text , skippingCharacters ) skippingCharacters = NUM00 ; } } if ( rtfDestination != null ) { rtfDestination . handleText ( text ) ; $F665 } warning ( NUM00 ) ; }
public final boolean remove ( final URI serviceURI ) { boolean modified = _BOOL ; synchronized ( this ) { if ( aliases . remove ( serviceURI ) != null ) { modified = _BOOL ; } final ServiceFactory factory = services . remove ( serviceURI ) ; if ( factory != null ) { modified = _BOOL ; if ( factory instanceof CustomServiceFactory ) $F106 ( customServices , factory ) } } return modified ; }
$F5466 private static String referenceToAttribute ( String attrib , boolean includeDummies ) { while $F3106 ( attrib ) $F3109 ( attrib ) if $F3106 ( attrib ) { if ( includeDummies ) $F3109 ( attrib ) else $F1274 } if ( ! StringUtil . startsWithChar ( attrib , NUM00 ) ) $F1337 $F3108 ( attrib ) if ( StringUtil . startsWithChar ( attrib , NUM00 ) ) { String cleanAttribute = null ; for ( $F1088 ( i , attrib ) ) { $F1280 ( currChar , attrib , i ) if $F37111 ( currChar ) $F103997 ( cleanAttribute ) else if ( currChar == NUM00 ) { $F14493 ( cleanAttribute , attrib , i ) $F597 } } attrib = cleanAttribute ; } else { for ( $F1088 ( i , attrib ) ) { $F1280 ( currChar , attrib , i ) if $F58237 ( currChar ) { $F45799 ( attrib , i ) $F597 } } } return attrib ; }
public EscapedWriter ( Writer fos ) { super ( fos ) ; }
public boolean isExpired ( final Date date ) { $F826 ( date ) return ( cookieExpiryDate != null && cookieExpiryDate . getTime ( ) <= date . getTime ( ) ) ; }
public void record ( RecordBuilderImpl recordBuilder ) { storeBitmap ( recordBuilder ) ; OutputStream viewHierarchyDump = null ; try { viewHierarchyDump = mAlbum . openViewHierarchyFile ( recordBuilder . getName ( ) ) ; mViewHierarchy . deflate ( recordBuilder . getView ( ) , viewHierarchyDump ) ; mAlbum . addRecord ( recordBuilder ) ; } $F12153 ( e ) finally { if ( viewHierarchyDump != null ) { try $F881 ( viewHierarchyDump ) catch ( IOException e ) { Log . e ( NUM00 , NUM00 , e ) ; } } } }
protected boolean isCorrectMethod ( Method method , $F131 args ) { return ( $F3174 ( proxySignature , method ) && args . length == NUM00 ) ; }
public void testCase17 $F72 { $F221347 $F221350 int aSign = NUM00 ; int bSign = NUM00 ; byte $F3018 = { NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F221355 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public Metadata . Property . Builder clear $F72 { Metadata_Property_Builder _defaults = new Metadata . Property . Builder $F72 ; type = _defaults . type ; boxedType = _defaults . boxedType ; name = _defaults . name ; capitalizedName = _defaults . capitalizedName ; allCapsName = _defaults . allCapsName ; getterName = _defaults . getterName ; codeGenerator = _defaults . codeGenerator ; fullyCheckedCast = _defaults . fullyCheckedCast ; $F725 ( accessorAnnotations ) $F725 ( _unsetProperties ) $F27392 ( _unsetProperties , _defaults ) return ( Metadata . Property . Builder ) this ; }
public static float r_distance ( vec3 a , vec3 b ) { float x = a . m [ NUM00 ] - b . m [ NUM00 ] ; float y = a . m [ NUM00 ] - b . m [ NUM00 ] ; float z = a . m [ NUM00 ] - b . m [ NUM00 ] ; float result = $F16207 ( Math , x , y , z ) ; return result ; }
public void checkBackupInfo ( final File backupInfoFile , boolean backupInMultiVdc ) { try ( $F24408 ( fis , backupInfoFile ) ) { $F2697 ( properties ) properties . load ( fis ) ; checkVersion ( properties ) ; checkHosts ( properties , backupInMultiVdc ) ; } $F60644 ( log , ex ) }
static String toLowerCase ( String s ) { $F1749 ( len , s ) StringBuilder sb = null ; for ( $F119 ( i , len ) ) { $F1280 ( c , s , i ) if ( $F19295 ( c ) || ( c == NUM00 ) ) { if ( sb != null ) sb . append ( c ) ; } else if ( $F19295 ( c ) || ( c == NUM00 ) ) { if ( sb != null ) sb . append ( c ) ; } else if $F19295 ( c ) { if ( sb == null ) { $F3934 ( sb , len ) $F58551 ( sb , s , i ) } sb . append ( ( char ) ( c - CASE_DIFF ) ) ; } else $F825 } return $F75266 ( sb , s ) ; }
public void testConstructorSignBytesNegative3 $F72 { byte $F3009 = $F101798 ; int aSign = - NUM00 ; byte $F3018 = { - NUM00 , NUM00 , - NUM00 , - NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3030 ( rBytes ) $F3031 ( resBytes , aNumber ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , aNumber ) }
public static $F96 buildOpusComment ( String comment ) { $F96 data = new byte [ $F63757 ( comment ) ] ; writeOpusComment ( data , NUM00 , comment ) ; return data ; }
public static void assertProps ( UniformPair < EventBean > received , $F806 propertyNames , $F131 expectedInsert , $F131 expectedRemoved ) { assertProps ( received . getFirst ( ) , propertyNames , expectedInsert ) ; assertProps ( received . getSecond ( ) , propertyNames , expectedRemoved ) ; }
$F1654 ( al )
public static String toUpperCase ( String src ) { if ( src == null ) $F1337 else { return src . toUpperCase ( ) ; } }
public final Iterator < KnowledgeEdge > requiredEdgesIterator $F72 { Set < KnowledgeEdge > $F9626 ( edges ) ; for ( OrderedPair < Set < MyNode > > o : requiredRulesSpecs ) { final Set < MyNode > first = o . getFirst ( ) ; for ( MyNode s1 : first ) { final Set < MyNode > second = o . getSecond ( ) ; for ( MyNode s2 : second ) { if $F2137 ( s1 , s2 ) { edges . add ( new KnowledgeEdge ( $F66558 ( s1 , s2 ) ) ) ; } } } } $F16047 ( edges ) }
$F1309 public void unlock ( LockState $F4203 lockState ) { $F826 ( lockState ) if ( lockState . setLock != this ) $F825 if ( lockState . thread != Thread . currentThread ( ) ) $F825 threadSet . remove ( Thread . currentThread ( ) ) ; for ( ReentrantLock lock : lockState . locks ) $F795 ( lock ) }
public static String formatJavaDocBox ( String text ) { requireNonNull ( text ) ; return formatTextBox ( text , JAVA_DOC_WIDTH , JAVADOC_WORDS , JAVA_DOC_SINGLE_LINE_WORDS ) ; }
private static String forceNumberStringToTwoDigits ( String text ) { while $F3599 ( text ) $F21679 ( text ) if $F4012 ( text ) { text = text . substring ( $F1092 ( text ) , text . length ( ) ) ; } return text ; }
public void addDropItem ( final String name , final double probability , final int min , final int max ) { dropsItems . add ( new DropItem ( name , probability , min , max ) ) ; }
public static < E extends Identifiable > $F57915 findByPrimaryKeys ( EntityManager em , $F114477 ids , $F48880 type ) { requireArgument ( em != null , NUM00 ) ; requireArgument ( $F1031 ( ids ) , NUM00 ) ; requireArgument ( type != null , NUM00 ) ; TypedQuery $F11685 query = em . createNamedQuery ( NUM00 , type ) ; query . setHint ( NUM00 , NUM00 ) ; try { $F155222 ( query , ids ) $F155222 ( query , _BOOL ) $F155223 ( query ) } catch ( NoResultException ex ) { return new $F201 $F989 ; } }
private void loadWorkflow ( Properties ctx , int AD_Workflow_ID , HttpSession sess ) { MWorkflow wf = new MWorkflow ( ctx , AD_Workflow_ID , null ) ; MWFNode [ ] nodes = wf . getNodes ( _BOOL , Env . getContextAsInt ( ctx , NUM00 ) ) ; MWFNode wfn = null ; $F12181 ( nodes_ID ) for ( $F1139 ( i , nodes ) ) { wfn = nodes [ i ] ; nodes_ID . add ( new Integer ( wfn . getAD_WF_Node_ID ( ) ) ) ; } int imageMap [ ] [ ] = generateImageMap ( nodes_ID ) ; sess . setAttribute ( WORKFLOW , wf ) ; sess . setAttribute ( NODES , nodes ) ; sess . setAttribute ( NODES_ID , nodes_ID ) ; sess . setAttribute ( IMAGE_MAP , imageMap ) ; sess . setAttribute ( ACTIVE_NODE , $F89913 ) ; }
public int hashCode $F72 { int h = hash ; if ( h == - NUM00 ) { try { h = Arrays . hashCode ( X509CertImpl . getEncodedInternal ( this ) ) ; } catch ( CertificateException e ) { h = NUM00 ; } hash = h ; } return h ; }
public void removeFromTags ( String removeTag ) { tags . remove ( removeTag ) ; firePropertyChange ( TAG , null , removeTag ) ; firePropertyChange ( TAGS_AS_ <missing ';'> NUM00 , null , removeTag ) ; }
public static boolean verify $F55962 ( data , signature , pub ) { Preconditions . checkArgument ( data . length == NUM00 && signature . length <= NUM00 && pub . length <= NUM00 ) ; ByteBuffer byteBuff = nativeECDSABuffer . get ( ) ; if ( byteBuff == null ) { byteBuff = ByteBuffer . allocateDirect ( NUM00 + NUM00 + NUM00 + NUM00 ) ; $F16706 ( byteBuff , ByteOrder ) nativeECDSABuffer . set ( byteBuff ) ; } $F23501 ( byteBuff ) byteBuff . put ( data ) ; byteBuff . putInt ( signature . length ) ; byteBuff . putInt ( pub . length ) ; byteBuff . put ( signature ) ; byteBuff . put ( pub ) ; return secp256k1_ecdsa_verify ( byteBuff ) == NUM00 ; }
protected void deleteDirectory ( File webAppFile ) { if $F3444 ( webAppFile ) { $F5459 ( children , webAppFile ) $F5460 ( element , children , deleteDirectory ) $F1900 ( webAppFile ) } else $F19636 ( webAppFile ) }
$F1431 static public void assertSameIteratorAnyOrder ( final $F131 expected , final Iterator actual ) $F228450 ( assertSameIteratorAnyOrder , expected , actual )
public static String formattingFinishedPercentage ( final RolloutGroup rolloutGroup , final float finishedPercentage ) { float tmpFinishedPercentage = NUM00 ; switch ( rolloutGroup . getStatus ( ) ) { case READY : case SCHEDULED : case ERROR : tmpFinishedPercentage = NUM00 ; $F597 case FINISHED : tmpFinishedPercentage = NUM00 ; $F597 case RUNNING : tmpFinishedPercentage = finishedPercentage ; $F597 $F2448 } $F23890 ( String , tmpFinishedPercentage ) }
public static String generateHostName ( String vmName , String hostId ) { String hostname = vmName + NUM00 + hostId ; Preconditions . checkState ( hostname . equals ( hostname . toLowerCase ( ) ) , NUM00 ) ; return hostname ; }
protected void transferFromFile ( File idFile ) throws IOException { try ( BufferedReader br = new BufferedReader $F434 ( idFile ) ) { String line ; while $F443 ( line , br ) { $F1382 ( line ) if $F4012 ( line ) { transfer ( line ) ; } } } }
$F4562 ( view , deltaX , scrollX , deltaY , scrollY , scrollRange , fuzzyThreshold , scaleFactor , isTouchEvent , deltaValue , currentScrollValue , scrollValue , HORIZONTAL , VERTICAL , mode , newScrollValue , PullToRefreshBase , Log , LOG_TAG , State , Math )
private static String unwrap ( String expression ) { if $F3106 ( expression ) { expression = expression . substring ( $F12707 ( expression ) , $F1092 ( expression ) ) ; if $F8991 ( expression ) { expression = $F129389 ( expression ) ; } else { expression = $F129389 ( expression ) ; } } return expression ; }
public boolean areAllSegmentPresent ( int datasetSize ) { return mPieSegmentList . size ( ) == datasetSize ; }
protected int drawNextEventTimeDiff $F72 { int timeDiff = msgInterval [ NUM00 ] == msgInterval [ NUM00 ] ? NUM00 : rng . nextInt ( $F50510 ( msgInterval ) ) ; return msgInterval [ NUM00 ] + timeDiff ; }
private int createLines $F36827 ( text , insertPosition , offset ) { int count = NUM00 ; int start = NUM00 ; DelimiterInfo delimiterInfo = nextDelimiterInfo ( text , NUM00 ) ; while ( delimiterInfo != null && delimiterInfo . delimiterIndex > - NUM00 ) { int index = delimiterInfo . delimiterIndex + ( delimiterInfo . delimiterLength - NUM00 ) ; if ( insertPosition + count >= fLines . size ( ) ) fLines . add ( new Line ( offset + start , offset + index , delimiterInfo . delimiter ) ) ; else fLines . add ( insertPosition + count , new Line ( offset + start , offset + index , delimiterInfo . delimiter ) ) ; ++ count ; start = index + NUM00 ; delimiterInfo = nextDelimiterInfo ( text , start ) ; } if $F7007 ( start , text ) { if ( insertPosition + count < fLines . size ( ) ) { Line l = ( Line ) fLines . get ( insertPosition + count ) ; $F7878 ( delta , text , start ) l . offset -= delta ; l . length += delta ; } else { fLines . add ( new Line ( offset + start , offset + text . length ( ) - NUM00 , null ) ) ; ++ count ; } } return count ; }
public static double sqrt ( double x ) { $F41531 ( Math , x ) }
private ResultPointsAndTransitions transitionsBetween ( ResultPoint from , ResultPoint to ) { $F166720 ( fromX , from ) $F166722 ( fromY , from ) $F166720 ( toX , to ) $F166722 ( toY , to ) $F226920 ( steep , Math , toY , fromY , toX , fromX ) $F226922 ( steep , temp , fromX , fromY , toX , toY ) $F11871 ( dx , Math , toX , fromX ) $F11871 ( dy , Math , toY , fromY ) int error = - dx > > NUM00 ; $F211050 ( ystep , fromY , toY ) $F211050 ( xstep , fromX , toX ) int transitions = NUM00 ; $F226926 ( inBlack , image , steep , fromY , fromX ) $F226931 ( x , fromX , y , fromY , toX , xstep , isBlack , image , steep , inBlack , transitions , error , dy , toY , ystep , dx ) $F226932 ( from , to , transitions ) }
public static String toBits ( final long x ) { $F1121 ( sb ) long t = x ; for ( $F6268 ( i ) ) { if ( ( i & NUM00 ) == NUM00 && i > NUM00 ) $F86 ( sb ) sb . append ( t < NUM00 ? NUM00 : NUM00 ) ; t = t < < NUM00 ; } assert t == NUM00 ; $F92 ( sb ) }
public static final $F96 encodeUrl ( BitSet urlsafe , $F96 bytes ) { $F1338 ( bytes ) $F13265 ( urlsafe , WWW_FORM_URL ) $F1538 ( buffer ) for ( $F1139 ( i , bytes ) ) { int b = bytes [ i ] ; if ( b < NUM00 ) { b = NUM00 + b ; } if $F73204 ( urlsafe , b ) { if ( b == NUM00 ) { b = NUM00 ; } buffer . write ( b ) ; } else { $F3410 ( buffer ) char hex1 = Character . toUpperCase ( $F73208 ( Character , b ) ) ; char hex2 = Character . toUpperCase ( $F73213 ( Character , b ) ) ; buffer . write ( hex1 ) ; buffer . write ( hex2 ) ; } } $F11316 ( buffer ) }
public MessageTokenizer ( IDiscordClient client , String content ) { $F19273 ( content ) if $F1277 ( content ) $F824 $F19273 ( client ) this . content = content ; this . client = client ; stepForward ( NUM00 ) ; }
public void await ( int ID ) throws InterruptedException { $F7546 ( parties ) final boolean startCondition = competitionCondition ; int competingFor = ( locks . length * NUM00 - NUM00 - ID ) / NUM00 ; while ( competingFor >= NUM00 ) { final Lock node = locks [ competingFor ] ; if $F39091 ( node ) { synchronized ( node ) { while ( competitionCondition == startCondition ) $F18604 ( node ) } $F704 ( node ) wakeUpTarget ( competingFor * NUM00 + NUM00 ) ; wakeUpTarget ( competingFor * NUM00 + NUM00 ) ; $F665 } else { if ( competingFor == NUM00 ) $F597 competingFor = ( competingFor - NUM00 ) / NUM00 ; } } competitionCondition = ! competitionCondition ; wakeUpTarget ( NUM00 ) ; }
private void loadTranslationsCacheIfEmpty $F72 { if $F2979 ( translationCache ) { for ( ObjectTranslation translation : translations ) { if ( translation . getLocale ( ) != null && translation . getProperty ( ) != null && ! StringUtils . isEmpty ( translation . getValue ( ) ) ) { String key = ObjectTranslation . getCacheKey ( translation . getLocale ( ) , translation . getProperty ( ) ) ; $F96588 ( translationCache , key , translation ) } } } }
public NavMouseMode ( boolean shouldConsumeEvents ) { super ( modeID , shouldConsumeEvents ) ; setModeCursor ( Cursor . getPredefinedCursor ( Cursor . CROSSHAIR_CURSOR ) ) ; rectAttributes . setLinePaint ( Color . GRAY ) ; rectAttributes . setMattingPaint ( Color . LIGHT_GRAY ) ; rectAttributes . setMatted ( _BOOL ) ; }
public void addEvent ( SimEvent newEvent ) { newEvent . setSerial ( serial ++ ) ; sortedSet . add ( newEvent ) ; }
public static void stopTimer ( String name ) { $F25238 ( stopTime , System ) Long startTime = openTimers . remove ( name ) ; $F826 ( startTime ) SummaryStatistics statistics = data . get ( name ) ; if ( statistics == null ) { statistics = new SummaryStatistics $F72 ; data . put ( name , statistics ) ; } statistics . addValue ( stopTime - startTime ) ; }
public String toStringSummary $F72 { int resultsetLength ; String result ; String titles ; int i ; int j ; $F1747 ( m_NonSigWins ) resultsetLength = NUM00 + Math . max ( ( int ) ( Math . log ( getColCount ( ) ) / Math . log ( NUM00 ) ) , ( int ) ( Math . log ( getRowCount ( ) ) / Math . log ( NUM00 ) ) ) ; result = NUM00 ; titles = NUM00 ; result += NUM00 ; result += NUM00 + NUM00 ; result += NUM00 ; result += NUM00 ; for ( $F95978 ( i , getColCount ) ) { $F324879 ( getColHidden , i ) titles += NUM00 ; result += NUM00 ; titles += NUM00 + Utils . padLeft ( NUM00 + getSummaryTitle ( i ) , resultsetLength * NUM00 + NUM00 ) ; } result += NUM00 ; result += titles + NUM00 ; for ( $F95978 ( i , getColCount ) ) { $F324879 ( getColHidden , i ) for ( $F95978 ( j , getColCount ) ) { $F324879 ( getColHidden , j ) if ( j == NUM00 ) result += ( char ) ( $F146909 + i % NUM00 ) ; if ( j == i ) result += NUM00 ; else result += NUM00 + m_NonSigWins [ i ] [ j ] + NUM00 + m_Wins [ i ] [ j ] + NUM00 ; } result += NUM00 ; } result += NUM00 ; return result ; }
public static File createTempPath ( String path ) throws IOException { String sep = File . separator ; File tempDir = new File ( System . getProperty ( NUM00 ) + sep + path ) ; if $F1906 ( tempDir ) if $F4928 ( tempDir ) { $F3452 ( status , tempDir ) $F132377 ( tempDir , status ) } $F60829 ( tempDir ) return tempDir ; }
public void hspan ( double start , double end , Paint color , String legend ) { LegendText legendText = new LegendText ( color , legend ) ; comments . add ( legendText ) ; plotElements . add ( new HSpan ( start , end , color , legendText ) ) ; }
public StateInteractive extent_to_whole_connections $F72 { $F155343 selected_items = new $F155359 $F72 ; for ( BrdItem curr_item : items_list ) { if ( curr_item instanceof BrdConnectable ) { selected_items . addAll ( curr_item . get_connection_items ( ) ) ; } } $F4975 ( selected_items , return_state ) items_list = selected_items ; actlog_start_scope ( LogfileScope . EXTEND_TO_WHOLE_CONNECTIONS ) ; filter ( ) ; $F8798 ( i_brd ) return this ; }
public static IKeyBuilder newInstance ( int capacity , CollatorEnum collatorChoice , Locale locale , Object strength , DecompositionEnum mode ) { if ( collatorChoice == CollatorEnum . ASCII ) { return new KeyBuilder ( capacity ) ; } if ( locale == null ) { $F39044 ( locale , Locale ) if $F17747 ( log ) log . info ( $F16018 ( locale ) ) ; } final boolean icu = collatorChoice == CollatorEnum . ICU ; if ( icu && ! DefaultKeyBuilderFactory . isICUAvailable ( ) ) { throw new UnsupportedOperationException ( DefaultKeyBuilderFactory . ICU_NOT_AVAILABLE ) ; } $F172325 ( buf , createBuffer , capacity ) final int len = NUM00 ; switch ( collatorChoice ) { case ICU : return new KeyBuilder ( new ICUSortKeyGenerator ( locale , strength , mode ) , len , buf ) ; case JDK : return new KeyBuilder ( new JDKSortKeyGenerator ( locale , strength , mode ) , len , buf ) ; $F1267 $F134041 ( collatorChoice ) } }
private $F27878 possibleParents ( Node x , $F27878 nodes , IKnowledge knowledge ) { $F27878 $F19827 ( possibleParents ) ; $F20605 ( _x , x ) for ( Node z : nodes ) { $F20605 ( _z , z ) if ( possibleParentOf ( _z , _x , knowledge ) ) $F207 ( possibleParents , z ) } return possibleParents ; }
protected void configureFromProperties ( InputStream is , String rootDirectory ) throws IOException { $F2697 ( props ) props . load ( is ) ; props . put ( ROOT_DIR_PATH_PROPERTY , rootDirectory ) ; String oldPrefix = getPropertyPrefix ( ) ; setProperties ( null , props ) ; setPropertyPrefix ( oldPrefix ) ; }
Connection openNewConnection $F72 throws SQLException { Connection newConn = DriverManager . getConnection ( url , user , password ) ; if $F3106 ( url ) { try $F348538 ( s , newConn ) $F845 } else if $F3106 ( url ) { try $F348538 ( s , newConn ) { $F131050 ( s ) } } return newConn ; }
$F1 public void addRelations ( Task task , Iterable < ObjectId > projectIds , String fieldName ) { List < Project > $F19827 ( newProjectList ) ; Iterable < Project > projectsToAdd = projectRepository . findAll ( projectIds , null ) ; for ( Project project : projectsToAdd ) $F207 ( newProjectList , project ) try { if ( PropertyUtils . getProperty ( task , fieldName ) != null ) { Iterable < Project > projects = ( Iterable < Project > ) PropertyUtils . getProperty ( task , fieldName ) ; for ( Project project : projects ) $F207 ( newProjectList , project ) } } $F12237 ( e ) try { PropertyUtils . setProperty ( task , fieldName , newProjectList ) ; } $F12237 ( e ) taskRepository . save ( task ) ; }
protected void doFloodBDDP ( long pinSwitch , OFPacketIn pi , FloodlightContext cntx ) { TopologyInstance ti = getCurrentInstance ( _BOOL ) ; $F60758 switches = ti . getSwitchesInOpenflowDomain ( pinSwitch ) ; if ( switches == null ) { switches = new $F18150 $F72 ; switches . add ( pinSwitch ) ; } for ( long sid : switches ) { $F2579 ( sw , floodlightProvider , sid ) $F45557 ( sw ) Collection < Short > enabledPorts = sw . getEnabledPortNumbers ( ) ; $F45557 ( enabledPorts ) Set < Short > ports = new HashSet < Short > $F72 ; ports . addAll ( enabledPorts ) ; Set < Short > portsKnownToTopo = ti . getPortsWithLinks ( sid ) ; if ( portsKnownToTopo != null ) { for ( short p : portsKnownToTopo ) { NodePortTuple npt = new NodePortTuple ( sid , p ) ; if ( ti . isBroadcastDomainPort ( npt ) == _BOOL ) $F106 ( ports , p ) } } Set < Short > portsToEliminate = getPortsToEliminateForBDDP ( sid ) ; if ( portsToEliminate != null ) $F111938 ( ports , portsToEliminate ) if ( pinSwitch == sid ) { ports . remove ( pi . getInPort ( ) ) ; } doMultiActionPacketOut ( pi . getPacketData ( ) , sw , ports , cntx ) ; } }
public void sleepMillis ( final long millis ) { try $F7595 ( Thread , millis ) catch ( final InterruptedException e ) $F98543 ( logger , e ) }
private static void verifyWriteSetNotFound ( final BTree btree ) { $F973 ( log ) for ( $F6268 ( i ) ) { if $F105 ( btree , i ) $F1666 ( i ) } }
private double calculateEntropy ( double ... masses ) { double res = NUM00 ; for ( double d : masses ) { res -= ( d == NUM00 ) ? NUM00 : d * Math . log ( d ) ; } return res / LOG2 ; }
public static boolean isValidNmtoken ( String nmtoken ) { $F49299 ( nmtoken , _BOOL ) for ( $F1088 ( i , nmtoken ) ) { $F1280 ( ch , nmtoken , i ) $F38676 ( isName , ch , _BOOL ) } return _BOOL ; }
$F1 public void mousePressed ( MouseEvent e ) { m_frameLimiter . setRepeats ( _BOOL ) ; if ( ( e . getModifiers ( ) & InputEvent . BUTTON1_MASK ) != NUM00 && ! e . isAltDown ( ) && m_mouseState == NUM00 && m_scaling == NUM00 ) { if ( ( ( e . getModifiers ( ) & InputEvent . CTRL_MASK ) != NUM00 ) && ( ( e . getModifiers ( ) & InputEvent . SHIFT_MASK ) == NUM00 ) ) { m_mouseState = NUM00 ; } else if ( ( ( e . getModifiers ( ) & InputEvent . SHIFT_MASK ) != NUM00 ) && ( ( e . getModifiers ( ) & InputEvent . CTRL_MASK ) == NUM00 ) ) { m_oldMousePos . width = e . getX ( ) ; m_oldMousePos . height = e . getY ( ) ; m_newMousePos . width = e . getX ( ) ; m_newMousePos . height = e . getY ( ) ; m_mouseState = NUM00 ; Graphics g = getGraphics ( ) ; if ( m_ZoomBoxColor == null ) { $F129587 ( g , Color ) } else $F158293 ( g , m_ZoomBoxColor ) if ( m_ZoomBoxXORColor == null ) { g . setXORMode ( Color . white ) ; } else { g . setXORMode ( m_ZoomBoxXORColor ) ; } g . drawRect ( m_oldMousePos . width , m_oldMousePos . height , m_newMousePos . width - m_oldMousePos . width , m_newMousePos . height - m_oldMousePos . height ) ; $F355 ( g ) } else { m_oldMousePos . width = e . getX ( ) ; m_oldMousePos . height = e . getY ( ) ; m_newMousePos . width = e . getX ( ) ; m_newMousePos . height = e . getY ( ) ; m_mouseState = NUM00 ; $F2346 ( m_frameLimiter ) } } else if ( ( e . getButton ( ) == MouseEvent . BUTTON1 ) && e . isAltDown ( ) && e . isShiftDown ( ) && ! e . isControlDown ( ) ) $F5795 ( saveComponent ) else if ( m_mouseState == NUM00 && m_scaling == NUM00 ) $F845 }
private static double parseDoubleValue ( String parseString , String openTag , String closeTag , DataTypeValidationException exception ) throws DataTypeValidationException { String tagValue ; tagValue = parseStringValue ( parseString , openTag , closeTag , exception ) ; double doubleValue ; try $F97478 ( doubleValue , Double , tagValue ) catch ( NumberFormatException e ) { throw e ; } return doubleValue ; }
public void putString ( String s ) throws ArrayIndexOutOfBoundsException , UnsupportedEncodingException { $F151317 ( bytes , s ) int length = bytes . length ; int endAt = m_index + length + NUM00 ; if ( endAt > m_content . length ) throw new ArrayIndexOutOfBoundsException ( endAt + NUM00 + m_content . length ) ; $F6483 ( System , bytes , m_content , m_index , length ) m_index += length ; m_content [ m_index ++ ] = NUM00 ; debugAppendString ( s ) ; }
$F35762 ( newScrollValue , itemDimension , initialMotionValue , lastMotionValue , getPullToRefreshScrollDirection , HORIZONTAL , mInitialMotionX , mLastMotionX , VERTICAL , mInitialMotionY , mLastMotionY , mCurrentMode , PULL_FROM_END , Math , FRICTION , getFooterSize , PULL_FROM_START , getHeaderSize , setHeaderScroll , isRefreshing , scale , mFooterLayout , mHeaderLayout , mState , State , setState )
public void addRtcpListener ( RtcpEventListener listener ) $F6659 ( listeners , listener )
$F1 protected void ensureNumberOfColumns ( int numberOfColumns ) { if ( data . length >= numberOfColumns ) $F932 $F9662 ( newData , numberOfColumns ) $F7057 ( System , data , newData ) data = newData ; }
private static BitMatrix extractPureBits ( BitMatrix image ) throws NotFoundException { $F125230 ( leftTopBlack , image ) $F125232 ( rightBottomBlack , image ) $F125233 ( leftTopBlack , rightBottomBlack , NotFoundException ) float moduleSize = moduleSize ( leftTopBlack , image ) ; int top = leftTopBlack [ NUM00 ] ; int bottom = rightBottomBlack [ NUM00 ] ; int left = leftTopBlack [ NUM00 ] ; int right = rightBottomBlack [ NUM00 ] ; if ( left >= right || top >= bottom ) $F63046 ( NotFoundException ) $F125236 ( bottom , top , right , left ) $F125240 ( matrixWidth , Math , right , left , moduleSize ) $F125240 ( matrixHeight , Math , bottom , top , moduleSize ) $F125241 ( matrixWidth , matrixHeight , NotFoundException ) $F125242 ( matrixHeight , matrixWidth , NotFoundException ) $F55078 ( nudge , moduleSize ) top += nudge ; left += nudge ; $F125249 ( nudgedTooFarRight , left , matrixWidth , moduleSize , right ) $F125252 ( nudgedTooFarRight , nudge , NotFoundException , left ) $F125249 ( nudgedTooFarDown , top , matrixHeight , moduleSize , bottom ) $F125252 ( nudgedTooFarDown , nudge , NotFoundException , top ) $F125254 ( bits , matrixWidth , matrixHeight ) $F125266 ( y , matrixHeight , iOffset , top , moduleSize , x , matrixWidth , image , left , bits ) return bits ; }
$F1 public void error ( String domain , String key , XMLParseException exception ) throws XNIException { if ( fErrorHandler != null ) { SAXParseException saxException = createSAXParseException ( exception ) ; try $F16034 ( fErrorHandler , saxException ) catch ( SAXParseException e ) $F34850 ( createXMLParseException , e ) catch ( SAXException e ) $F34850 ( createXNIException , e ) } }
public static boolean connect ( FileDescriptor fd , InetAddress inetAddress , int port ) throws SocketException { try { return IoBridge . connect ( fd , inetAddress , port , NUM00 ) ; } catch ( SocketTimeoutException ex ) $F27253 ( ex ) }
public boolean isWhitespace ( int nodeHandle ) { int type = getNodeType ( nodeHandle ) ; Node node = getNode ( nodeHandle ) ; if ( TEXT_NODE == type || CDATA_SECTION_NODE == type ) { FastStringBuffer buf = StringBufferPool . get ( ) ; while ( node != null ) { $F77057 ( buf , node ) node = logicalNextDOMTextNode ( node ) ; } boolean b = buf . isWhitespace ( $F34024 ( buf ) ) ; StringBufferPool . free ( buf ) ; return b ; } return _BOOL ; }
public CStatusPanel ( final BackEndDebuggerProvider debuggerProvider ) { $F9898 ( super ) $F1832 ( Preconditions , debuggerProvider ) $F97485 ( m_label , Color ) add ( m_label ) ; m_synchronizer = new CStatusLabelSynchronizer ( m_label , debuggerProvider ) ; }
$F1 public boolean open ( String access ) { if $F3057 ( access ) { try { iStream = new FileImageInputStream $F15780 ( filePath ) ; parser = new LabelParser $F72 ; metadata = parser . parseHeader ( iStream ) ; $F59 ( iStream ) iStream = null ; } catch ( IOException e ) { try $F881 ( iStream ) catch ( Exception x ) $F845 return ( _BOOL ) ; } } return ( super . open ( access ) ) ; }
void deregisterSpring ( Spring spring ) { $F826 ( spring ) mActiveSprings . remove ( spring ) ; $F10194 ( mSpringRegistry , spring ) }
$F5466 public String fileName $F72 { return JavaLogger . fileName ( delegate ) ; }
public static BNode parseBNode ( String nTriplesBNode , ValueFactory valueFactory ) throws IllegalArgumentException { if $F3106 ( nTriplesBNode ) { return valueFactory . createBNode ( nTriplesBNode . substring ( NUM00 ) ) ; } else $F18931 ( nTriplesBNode ) }
public void resetPSRs $F72 $F6051 ( pilotRolls )
public static void sort $F97 ( array ) $F57765 ( DualPivotQuicksort , array )
public void closePopup $F72 { if ( openedSubPopup != null ) { openedSubPopup . closePopup ( ) ; } removeFromParent ( ) ; }
public void freeObject ( int id ) { if ( cacheId == id ) { cacheId = - NUM00 ; cache = null ; } map . remove ( id ) ; }
private void stretchViewVertically ( View view , int crossSize ) { $F310049 ( lp , view ) int newHeight = crossSize - lp . topMargin - lp . bottomMargin ; $F89002 ( newHeight , Math ) view . measure ( MeasureSpec . makeMeasureSpec ( view . getMeasuredWidth ( ) , MeasureSpec . EXACTLY ) , $F19050 ( MeasureSpec , newHeight ) ) ; }
public static InetAddress hexToInet6Address ( String addrHexString ) throws IllegalArgumentException { try { return numericToInetAddress ( String . format ( NUM00 , $F606 ( addrHexString ) , $F606 ( addrHexString ) , $F606 ( addrHexString ) , $F606 ( addrHexString ) , $F606 ( addrHexString ) , $F606 ( addrHexString ) , $F606 ( addrHexString ) , $F606 ( addrHexString ) ) ) ; } catch ( Exception e ) { Log . e ( NUM00 , NUM00 + addrHexString + NUM00 + e ) ; $F29415 ( e ) } }
public void trackFailure $F72 { retryTime = Utils . currentTimeMillis ( ) + ( long ) backoff ; backoff = Math . min ( backoff * params . multiplier , params . maximum ) ; }
public double readDouble $F72 throws IOException { return primitiveTypes . readDouble ( ) ; }
private boolean isAtMaximum ( Adjustable bar ) { return ( bar . getValue ( ) + bar . getVisibleAmount ( ) >= bar . getMaximum ( ) ) ; }
public boolean matchesCS ( String seq ) { return queue . startsWith ( seq , pos ) ; }
protected void parseAndAddMapTileSet ( URL tileSetProperties ) throws IOException , MalformedURLException { $F2697 ( descProps ) Logger logger = getLogger ( ) ; $F973 ( logger ) $F35900 ( descURLStream , tileSetProperties ) descProps . load ( descURLStream ) ; logger . info ( $F148552 ( tileSetProperties , descProps ) ) ; MapTileSet mts = createMapTileSetFromProperties ( descProps ) ; if ( mts != null && mts . allGood ( ) ) { $F20605 ( mtsName , mts ) $F20063 ( mapTileSets , mts ) $F9472 ( logger , mtsName ) } $F59 ( descURLStream ) }
protected Date compute ( double value ) { if $F35707 ( Double , value ) $F1337 long dateLong = ( long ) value ; $F25205 ( date , dateLong ) $F4377 ( cal , Calendar ) cal . setTime ( date ) ; $F11894 ( cal ) }
public void enablePan ( BluetoothAdapter adapter ) { if ( mPan == null ) mPan = ( BluetoothPan ) connectProxy ( adapter , BluetoothProfile . PAN ) ; assertNotNull ( mPan ) ; $F657 ( start , System ) mPan . setBluetoothTethering ( _BOOL ) ; $F657 ( stop , System ) assertTrue ( mPan . isTetheringOn ( ) ) ; writeOutput ( String . format ( NUM00 , ( stop - start ) ) ) ; }
private int distBetweenPoints ( int x1 , int z1 , int x2 , int z2 , boolean bAllowDiags ) { $F11871 ( w , Math , x2 , x1 ) $F11871 ( h , Math , z2 , z1 ) if ( bAllowDiags ) { if ( w < h ) w = NUM00 ; else h = NUM00 ; } return w + h + NUM00 ; }
public URL ( String protocol , String host , int port , String file , URLStreamHandler handler ) throws MalformedURLException { if ( port < - NUM00 ) $F285896 ( port ) $F896 ( protocol ) if ( $F82309 ( host ) && $F4434 ( host ) ) $F253145 ( host ) this . protocol = protocol ; this . host = host ; this . port = port ; file = UrlUtils . authoritySafePath ( host , file ) ; $F1384 ( hash , file ) if ( hash != - NUM00 ) { this . file = file . substring ( NUM00 , hash ) ; this . ref = file . substring ( hash + NUM00 ) ; } else $F6988 ( this , file ) fixURL ( _BOOL ) ; if ( handler == null ) { setupStreamHandler ( ) ; if ( streamHandler == null ) $F285896 ( protocol ) } else { streamHandler = handler ; } }
private $F28319 createVolumesMethod ( URI systemURI , URI poolURI , $F28584 volumeURIs , VirtualPoolCapabilityValuesWrapper capabilities ) { return new $F28319 ( NUM00 , systemURI , poolURI , volumeURIs , capabilities ) ; }
public FileCommandInfo ( int fd , String command , int result , String parameters ) { this ( _BOOL , fd , command , result , parameters ) ; }
public void init ( GuiManualHerblore manual ) { for ( ManualWidgetBase widget : widgets ) widget . init ( manual ) ; }
$F65857 ( connection , oldFactory , sc , SSLContext , trustAllCerts , newFactory , Log , LOG_TAG , e )
public final double sampleMax $F72 { return _activeCountMax . getAndSet ( _activeCount . get ( ) ) ; }
@ Get public Representation userCodeForm $F72 throws OAuth2RestletException , InvalidGrantException , NotFoundException , ServerException { final OAuth2Request request = requestFactory . create ( getRequest ( ) ) ; if ( request . getParameter ( OAuth2Constants . DeviceCode . USER_CODE ) != null ) $F15127 ( verify ) else $F25228 ( getTemplateRepresentation , FORM , request ) }
public void testMissionNameConstruction $F72 { String xml = NUM00 ; xml += createStartMissionXml ( NUM00 , NUM00 ) ; xml += createEndMissionXml ( ) ; $F217487 ( missionInputStream , xml ) String missionName = null ; try { missionName = MissionParser . getMissionName ( missionInputStream ) ; } catch ( MissionParseException e ) $F302 ( e ) Assert . assertEquals ( NUM00 , missionName ) ; }
$F1 public boolean equals ( Object other ) { $F3627 ( other , this , _BOOL ) if ( other instanceof ZoneOffsetTransition ) { ZoneOffsetTransition d = ( ZoneOffsetTransition ) other ; return $F142656 ( transition , d , offsetBefore ) && $F12737 ( offsetAfter , d ) ; } return _BOOL ; }
public void release $F72 { $F33833 ( super ) init ( ) ; }
public double unsafeSabrVolatility ( final double strike , final double forward , final double expiryTime , final double alpha , final double beta , final double nu , final double rho ) { final double oneMinusBeta = NUM00 - beta ; final double A = Math . pow ( forward * strike , oneMinusBeta ) ; final double sqrtA = Math . sqrt ( A ) ; double logM ; if ( ! isClose ( forward , strike ) ) logM = Math . log ( forward / strike ) ; else { final double epsilon = ( forward - strike ) / strike ; logM = epsilon - NUM00 * epsilon * epsilon ; } final double z = ( nu / alpha ) * sqrtA * logM ; final double B = NUM00 - NUM00 * rho * z + z * z ; final double C = oneMinusBeta * oneMinusBeta * logM * logM ; final double tmp = ( Math . sqrt ( B ) + z - rho ) / ( NUM00 - rho ) ; final double xx = Math . log ( tmp ) ; final double D = sqrtA * ( NUM00 + C / NUM00 + C * C / NUM00 ) ; final double d = NUM00 + expiryTime * ( oneMinusBeta * oneMinusBeta * alpha * alpha / ( NUM00 * A ) + NUM00 * rho * beta * nu * alpha / sqrtA + ( NUM00 - NUM00 * rho * rho ) * ( nu * nu / NUM00 ) ) ; double multiplier ; final double m = NUM00 ; if ( Math . abs ( z * z ) > Constants . QL_EPSILON * m ) multiplier = z / xx ; else { final double talpha = ( NUM00 - rho * rho ) / ( NUM00 - rho ) ; final double tbeta = alpha - NUM00 ; final double tgamma = rho / ( NUM00 - rho ) ; multiplier = NUM00 - beta * z + ( tgamma - talpha + tbeta * tbeta * NUM00 ) * z * z ; } return ( alpha / D ) * multiplier * d ; }
public void close $F72 { while $F5973 ( mReceivers ) { mContext . unregisterReceiver ( mReceivers . remove ( NUM00 ) ) ; } if ( mOutputWriter != null ) { try $F881 ( mOutputWriter ) $F122999 ( Log , mTag , e ) } }
private void resolveFiles ( $F3803 classpaths , $F2540 ( files ) , $F806 paths , String prefix ) { for ( String path : paths ) { $F150661 ( relativePath , fileHandler , path ) if ( prefix != null ) { relativePath = fileHandler . append ( prefix , relativePath ) ; } $F73441 ( classpaths , relativePath ) if $F251710 ( fileHandler , path ) { $F806 children = fileHandler . getChildren ( path ) ; if $F180527 ( children ) { resolveFiles ( null , files , children , relativePath ) ; } } else $F1717 ( files , relativePath , path ) } }
public void testGetInstance $F72 throws Exception { try { ExemptionMechanism . getInstance ( $F45216 , NUM00 ) ; fail ( NUM00 ) ; } catch ( NoSuchProviderException pe ) $F845 try { ExemptionMechanism . getInstance ( NUM00 , $F45216 ) ; fail ( NUM00 ) ; } $F45786 }
public synchronized void reloadConfiguration $F72 { properties = null ; $F725 ( finalParameters ) }
protected void removeMessageProcessor ( MessageProcessor oldMessageProcessor ) { synchronized ( messageProcessors ) { if $F16914 ( messageProcessors , oldMessageProcessor ) $F5196 ( oldMessageProcessor ) } }
X509IssuerSerial ( X509Certificate cert ) { this ( cert . getIssuerX500Principal ( ) , cert . getSerialNumber ( ) ) ; }
private void addToSet ( ObjectXmlPersist persist , IFile file , String setName ) throws IOException , CoreException { Collection < GraphEdgeMatcherDescriptor > updateSet = loadEdgeMatchers ( persist , file ) ; persistUpdatedBundle ( persist , file , updateSet , setName ) ; }
public void putBytes $F97 ( bytes ) { ensureCapacity ( bytes . length ) ; System . arraycopy ( bytes , NUM00 , this . byteBuffer , this . position , bytes . length ) ; this . position += bytes . length ; }
public static String arrayToDelimitedString ( $F131 arr , String delim ) { $F4158 ( arr ) $F280 ( sb ) for ( $F1139 ( i , arr ) ) { $F234280 ( i , sb , delim ) $F6939 ( sb , arr , i ) } $F92 ( sb ) }
public void clearAll $F72 { final List < EncodedImage > old ; synchronized ( this ) { $F159472 ( old , mMap ) ; $F725 ( mMap ) } for ( $F2277 ( i , old ) ) { EncodedImage encodedImage = old . get ( i ) ; $F2727 ( encodedImage ) } }
public static CompiereColor parse ( String attributes ) { CompiereColor cc = new CompiereColor $F72 ; try { if $F22 ( attributes ) cc . parseAttributres ( attributes ) ; } catch ( Exception e ) { log . severe ( $F28567 ( attributes , e ) ) ; } return cc ; }
public synchronized static LuaState newLuaState $F72 { int i = getNextStateIndex ( ) ; LuaState L = new LuaState ( i ) ; states . add ( i , L ) ; return L ; }
static long checkPreambleSize ( Memory mem ) { final long cap = mem . getCapacity ( ) ; if ( cap < NUM00 ) $F127556 ( throwNotBigEnough , cap ) final long pre0 = mem . getLong ( NUM00 ) ; final int $F178448 ( preLongs , pre0 ) ; final int required = Math . max ( preLongs < < NUM00 , NUM00 ) ; if ( cap < required ) { throwNotBigEnough ( cap , required ) ; } return pre0 ; }
public int read $F72 throws IOException { $F113304 ( inputStream , reopen ) count ( NUM00 ) ; $F51652 ( inputStream ) }
$F5803 ( drawable , getDrawable , matrix , prevMatrix , drawableWidth , drawableHeight , scaleX , viewWidth , scaleY , viewHeight , mScaleType , CENTER , CENTER_CROP , Math , CENTER_INSIDE , FIT_CENTER , FIT_XY , redundantXSpace , redundantYSpace , matchViewWidth , matchViewHeight , isZoomed , imageRenderedAtLeastOnce , normalizedScale , prevMatchViewWidth , prevMatchViewHeight , savePreviousImageValues , m , Matrix , transX , transY , prevActualWidth , actualWidth , getImageWidth , translateMatrixAfterRotate , prevViewWidth , prevActualHeight , actualHeight , getImageHeight , prevViewHeight , fixTrans , setImageMatrix )
public void limit $F12359 ( x1 , y1 , x2 , y2 ) { $F68034 ( clip , Math , x1 ) $F68034 ( clip , Math , y1 ) $F68037 ( clip , Math , x2 ) $F68037 ( clip , Math , y2 ) }
public void shutdown $F72 { $F42358 ( begin , System ) $F973 ( log ) $F115765 ( log , getTaskCount , scheduledPool ) $F115765 ( log , getTaskCount , instantPool ) $F115765 ( log , getTaskCount , longRunningPool ) log . info ( NUM00 + ( workStealingPool . getQueuedTaskCount ( ) + workStealingPool . getQueuedSubmissionCount ( ) ) + NUM00 ) ; $F733 ( scheduledPool ) $F733 ( instantPool ) $F733 ( longRunningPool ) $F733 ( workStealingPool ) boolean success = _BOOL ; try { success |= awaitTermination ( NUM00 ) ; scheduledPool . setExecuteExistingDelayedTasksAfterShutdownPolicy ( _BOOL ) ; scheduledPool . setContinueExistingPeriodicTasksAfterShutdownPolicy ( _BOOL ) ; success |= awaitTermination ( NUM00 ) ; } $F3101 ( e ) log . info ( NUM00 + success + NUM00 + $F32707 ( System , begin ) + NUM00 ) ; $F115765 ( log , getTaskCount , scheduledPool ) $F115765 ( log , getTaskCount , instantPool ) $F115765 ( log , getTaskCount , longRunningPool ) log . info ( NUM00 + ( workStealingPool . getQueuedTaskCount ( ) + workStealingPool . getQueuedSubmissionCount ( ) ) + NUM00 ) ; $F5832 ( workStealingPool ) }
public static Collection < InetAddress > toInetAddresses ( $F6877 addrs , $F6877 hostNames ) throws IgniteCheckedException { Set < InetAddress > res = new $F9623 $F716 ( addrs ) ; $F13712 ( hostNamesIt , hostNames ) for ( String addr : addrs ) { String hostName = $F81711 ( hostNamesIt ) ; InetAddress inetAddr = null ; if $F20899 ( F , hostName ) { try { inetAddr = InetAddress . getByName ( hostName ) ; } catch ( UnknownHostException ignored ) $F845 } if ( inetAddr == null || inetAddr . isLoopbackAddress ( ) ) { try { inetAddr = InetAddress . getByName ( addr ) ; } catch ( UnknownHostException ignored ) $F845 } $F67023 ( inetAddr , res ) } if $F2979 ( res ) throw new IgniteCheckedException $F6486 ( addrs , hostNames ) ; return res ; }
public static String removeNewLineChars ( String s ) { String retString = null ; if ( ( s != null ) && $F4012 ( s ) && $F12703 ( s ) ) { $F7782 ( chars , s ) int len = chars . length ; $F1350 ( sb , len ) for ( $F119 ( i , len ) ) { char c = chars [ i ] ; if ( c != NUM00 ) $F288 ( sb , c ) } $F6947 ( retString , sb ) } else { retString = s ; } return retString ; }
void calculateCounters $F72 { $F15308 ( isDBAvailable ) $F657 ( time , System ) int total = NUM00 ; $F8934 ( write ) try { countResetFeedsAndCategories ( ) ; total += countFeedsWithUnread ( ) ; countCategoriesWithUnread ( ) ; countSpecialCategories ( total ) ; } $F796 ( write ) Log . i ( TAG , String . format ( NUM00 , total , $F32707 ( System , time ) ) ) ; }
protected void appendHTML ( final StringBuilder sbuf , final char ch ) { switch ( ch ) { $F2999 ( sbuf ) $F2999 ( sbuf ) $F2999 ( sbuf ) $F3000 ( sbuf , ch ) } }
private Collection $F134071 migrateColumns ( SQLTable currentTable ) { List $F134071 $F204 ( vars ) ; String tableType = currentTable . getEntityType ( ) ; Map < String , ResourceType . DataType > columns = currentTable . getColumns ( ) ; $F2539 foreignColumns = currentTable . getForeignKeyColumns ( ) ; for ( $F3465 ( column , columns ) ) { ResourceType . DataType columnType = columns . get ( column ) ; if $F1710 ( foreignColumns , column ) { vars . addAll ( migrateAsRelation ( tableType , column , foreignColumns . get ( column ) ) ) ; } else { $F133393 ( vars , migrateAsResource , tableType , columnType , column ) } } return vars ; }
public int retrieveRowCount ( String tableName ) throws SQLException { ResultSet rs = null ; int rowCount = - NUM00 ; try { rs = statement . executeQuery ( NUM00 + tableName ) ; $F24630 ( rs ) $F55 ( rowCount , rs ) } $F14364 ( rs ) return rowCount ; }
public JarModifier ( File jarFile ) throws JarException , IOException { this . jarFile = jarFile ; JarFile jar = new JarFile ( jarFile ) ; Enumeration < ? extends JarEntry > enumerator = jar . entries ( ) ; while $F1444 ( enumerator ) { JarEntry currentEntry = ( JarEntry ) enumerator . nextElement ( ) ; JarEntry resetEntry = new JarEntry $F27949 ( currentEntry ) ; $F22760 ( jarEntries , currentEntry , resetEntry ) } String manifestPath = META_INF + SEPERATOR + NUM00 ; JarEntry jarEntry = jar . getJarEntry ( manifestPath ) ; if ( jarEntry != null ) { Enumeration $F145052 entries = jar . entries ( ) ; while $F1444 ( entries ) { jarEntry = ( JarEntry ) entries . nextElement ( ) ; if ( manifestPath . equalsIgnoreCase ( jarEntry . getName ( ) ) ) $F5153 else { jarEntry = null ; } } } Manifest manifest = new Manifest $F72 ; if ( jarEntry != null ) { manifest . read ( jar . getInputStream ( jarEntry ) ) ; } this . manifest = manifest ; $F59 ( jar ) }
$F1 public int addAttribute ( Attribute a ) { if ( a == null ) $F825 else { int index = - NUM00 ; Attribute original = a ; a = ( Attribute ) a . clone ( ) ; if $F3817 ( unusedColumnList ) { synchronized ( unusedColumnList ) { if $F3817 ( unusedColumnList ) { $F21431 ( index , unusedColumnList ) attributes . set ( index , a ) ; } else { $F8935 ( index , attributes ) attributes . add ( a ) ; } } } else { $F8935 ( index , attributes ) attributes . add ( a ) ; } a . setTableIndex ( index ) ; original . setTableIndex ( index ) ; return index ; } }
default B with ( String key , int value ) $F65298 ( with , key , Integer , value )
public static $F149197 void sortTopN ( X [ ] array , int offset , int limit , Comparator < ? super X > comp ) { partitionTopN ( array , offset , limit , comp ) ; Arrays . sort ( array , offset , ( int ) Math . min ( ( long ) offset + limit , array . length ) , comp ) ; }
protected boolean isServerTransaction $F72 { return this instanceof SIPServerTransaction ; }
Object addMarkedOccurrenceHighlight ( int start , int end , MarkOccurrencesHighlightPainter p ) throws BadLocationException { $F47177 ( doc , textArea ) TextUI mapper = textArea . getUI ( ) ; HighlightInfo i = new LayeredHighlightInfo $F72 ; i . painter = p ; i . p0 = doc . createPosition ( start ) ; i . p1 = doc . createPosition ( end - NUM00 ) ; markedOccurrences . add ( i ) ; mapper . damageRange ( textArea , start , end ) ; return i ; }
$F4562 ( view , deltaX , scrollX , deltaY , scrollY , scrollRange , fuzzyThreshold , scaleFactor , isTouchEvent , deltaValue , currentScrollValue , scrollValue , HORIZONTAL , VERTICAL , mode , newScrollValue , PullToRefreshBase , Log , LOG_TAG , State , Math )
public static void readFully ( InputStream in , byte $F46499 , int off , int len ) throws IOException { int toRead = len ; while ( toRead > NUM00 ) { $F24020 ( ret , in , buf , off , toRead ) $F28956 ( ret ) toRead -= ret ; off += ret ; } }
public static void assumeTrue ( BooleanSupplier assumptionSupplier , Supplier $F4 messageSupplier ) throws TestAbortedException { if ( ! assumptionSupplier . getAsBoolean ( ) ) { $F80909 ( throwTestAbortedException , messageSupplier ) } }
public static String addToCartBulk ( HttpServletRequest request , HttpServletResponse response ) { $F10362 ( categoryId , request ) ShoppingCart cart = getCartObject ( request ) ; $F15914 ( delegator , request ) $F15918 ( dispatcher , request ) ShoppingCartHelper cartHelper = new ShoppingCartHelper ( delegator , dispatcher , cart ) ; String controlDirective ; $F15921 ( result ) $F529 paramMap = UtilHttp . getParameterMap ( request ) ; String catalogId = CatalogWorker . getCurrentCatalogId ( request ) ; result = cartHelper . addToCartBulk ( catalogId , categoryId , paramMap ) ; controlDirective = processResult ( result , request ) ; if $F1238 ( controlDirective , ERROR ) $F2455 else $F2455 }
public void addFrequentSet ( FrequentItemSet itemSet ) { frequentSets . add ( itemSet ) ; maximumSetSize = Math . max ( itemSet . getNumberOfItems ( ) , maximumSetSize ) ; }
private int skipFromPeekBuffer ( int length ) { $F17565 ( bytesSkipped , Math , peekBufferLength , length ) updatePeekBuffer ( bytesSkipped ) ; return bytesSkipped ; }
protected $F28319 createRemoveVolumesFromCGMethod ( URI vplexURI , URI cgURI , $F28584 vplexVolumeURIs ) $F166144 ( REMOVE_VOLUMES_FROM_CG_STEP , vplexURI , cgURI , vplexVolumeURIs )
private static int showUrlsPrompt ( Component parent , $F3803 urls ) { String text = NUM00 ; for ( String url : urls ) { url = splitUrl ( url ) ; text += url + NUM00 ; } String okOption = NUM00 ; if $F3817 ( urls ) { okOption = $F10533 ( urls ) ; } $F806 options = { okOption , NUM00 } ; if $F10471 ( urls ) { options = new String [ ] { okOption , NUM00 , NUM00 } ; } int chosenOption = JOptionPane . showOptionDialog ( parent , text , NUM00 , JOptionPane . OK_CANCEL_OPTION , JOptionPane . QUESTION_MESSAGE , null , options , NUM00 ) ; return chosenOption ; }
int convertMouse ( MouseEvent event ) { int result ; if ( panelFont == null ) return ( NO_MOUSE ) ; int colOff = event . getX ( ) - GRID_WIDTH - PANEL_MARGIN ; int colNum = colOff / horizStep ; int colRem = colOff % horizStep ; if ( ( colNum >= panelColumns ) || ( colRem < TEXT_MARGIN ) || ( colRem > ( horizStep - GRID_WIDTH - TEXT_MARGIN ) ) ) $F3139 ( NO_MOUSE ) int rowOff = event . getY ( ) - GRID_WIDTH - PANEL_MARGIN ; int rowNum = rowOff / vertiStep ; int rowRem = rowOff % vertiStep ; if ( ( rowRem < TEXT_MARGIN ) || ( rowRem > ( vertiStep - GRID_WIDTH - TEXT_MARGIN ) ) ) $F3139 ( NO_MOUSE ) result = cornerIndex + ( rowNum * panelColumns ) + colNum ; if ( result >= cellCount ) return ( NO_MOUSE ) ; return ( result ) ; }
private static String computeRegexString $F1947 ( originalString , oldName , newName ) { $F80469 ( builder , originalString ) String oldNameOrNewNameRegEx = String . format ( NUM00 , Pattern . quote ( oldName ) , Pattern . quote ( newName ) ) ; $F12747 ( i , originalString , oldName ) if ( i >= NUM00 ) { int prevI = NUM00 ; while ( i >= NUM00 ) { builder . append ( Pattern . quote ( originalString . substring ( prevI , i ) ) ) ; builder . append ( oldNameOrNewNameRegEx ) ; prevI = i ; i = originalString . indexOf ( oldName , i + oldName . length ( ) ) ; } builder . append ( Pattern . quote ( originalString . substring ( prevI + oldName . length ( ) , originalString . length ( ) ) ) ) ; } $F92 ( builder ) }
public synchronized String generateCallIdentifier ( String address ) { String date = Long . toString ( System . currentTimeMillis ( ) + callIDCounter ++ + rand . nextLong ( ) ) ; byte cid [ ] = digester . digest ( date . getBytes ( ) ) ; $F21991 ( cidString , Utils , cid ) return cidString + NUM00 + address ; }
int parseHour ( String source , char patternChar , int offset ) throws ParseException { int min = ( patternChar == HOUR_1_LETTER || patternChar == HOUR12_1_LETTER ) ? NUM00 : NUM00 ; int max = ( ( patternChar == HOUR_LETTER || patternChar == HOUR_1_LETTER ) ? NUM00 : NUM00 ) + min ; return parseNumber ( source , offset , NUM00 , min , max ) - min ; }
public void doHistory ( KeyEvent e ) { if $F13190 ( e , m_Input ) { switch ( e . getKeyCode ( ) ) { case KeyEvent . VK_UP : if ( m_HistoryPos > NUM00 ) { m_HistoryPos -- ; String command = m_CommandHistory . elementAt ( m_HistoryPos ) ; m_Input . setText ( command ) ; } $F597 case KeyEvent . VK_DOWN : if $F1765 ( m_HistoryPos , m_CommandHistory ) { m_HistoryPos ++ ; String command = NUM00 ; if $F1765 ( m_HistoryPos , m_CommandHistory ) { command = m_CommandHistory . elementAt ( m_HistoryPos ) ; } m_Input . setText ( command ) ; } $F597 $F2448 } } }
public static $F262544 substitute ( Substitution substitution , $F262544 originalTypes ) { $F1275 ( originalTypes ) $F262544 substitutedTypes = originalTypes ; for ( $F21059 ( i , length , originalTypes ) ) { ReferenceBinding originalType = originalTypes [ i ] ; TypeBinding substitutedType = substitute ( substitution , originalType ) ; if ( ! ( substitutedType instanceof ReferenceBinding ) ) $F1337 if ( substitutedType != originalType ) { if ( substitutedTypes == originalTypes ) { System . arraycopy ( originalTypes , NUM00 , substitutedTypes = new ReferenceBinding [ length ] , NUM00 , i ) ; } substitutedTypes [ i ] = ( ReferenceBinding ) substitutedType ; } else if ( substitutedTypes != originalTypes ) { substitutedTypes [ i ] = originalType ; } } return substitutedTypes ; }
$F1 protected void onDraw ( Canvas canvas ) { super . onDraw ( canvas ) ; $F8249 ( mBitmapShader ) canvas . drawCircle ( mCenterX , mCenterY , mCoverRadius , mCoverPaint ) ; canvas . drawCircle ( mCenterX , mCenterY , mCoverRadius , mCoverFrontPaint ) ; mDurationText = secondsToTime ( mDurationSecondsCurrent ) ; $F77589 ( mDurationPaint , mDurationText , mRectDuration ) canvas . drawText ( mDurationText , ( mCenterX - ( $F77595 ( mRectDuration ) ) ) , ( mCenterY + ( $F180726 ( mRectDuration ) ) ) , mDurationPaint ) ; if ( mBitmapUnselectedAction1 != null && mBitmapSelectedAction1 != null ) { canvas . drawBitmap ( isAction1Selected ? mBitmapSelectedAction1 : mBitmapUnselectedAction1 , ( mCenterX - ( NUM00 * ( mCenterX / NUM00 ) ) ) , mCenterY + ( mCenterY / NUM00 ) - ( mCenterY / NUM00 ) , mActionPaint ) ; } if ( mBitmapUnselectedAction2 != null && mBitmapSelectedAction2 != null ) { canvas . drawBitmap ( isAction2Selected ? mBitmapSelectedAction2 : mBitmapUnselectedAction2 , mCenterX - ( mCenterX / NUM00 ) , mCenterY + ( mCenterY / NUM00 ) - ( mCenterY / NUM00 ) , mActionPaint ) ; } if ( mBitmapUnselectedAction3 != null && mBitmapSelectedAction3 != null ) { canvas . drawBitmap ( isAction3Selected ? mBitmapSelectedAction3 : mBitmapUnselectedAction3 , ( int ) ( mCenterX + ( NUM00 * ( mCenterX / NUM00 ) ) ) , mCenterY + ( mCenterY / NUM00 ) - ( mCenterY / NUM00 ) , mActionPaint ) ; } canvas . drawArc ( mProgressRectF , NUM00 , NUM00 , _BOOL , mPaintEmptyProgress ) ; canvas . drawArc ( mProgressRectF , NUM00 , calculatePastProgress ( ) , _BOOL , mPaintLoadedProgress ) ; canvas . drawCircle ( ( float ) ( mCenterX + ( ( mCenterX - NUM00 ) * Math . cos ( Math . toRadians ( calculatePastProgress ( ) - NUM00 ) ) ) ) , ( float ) ( mCenterY + ( ( mCenterX - NUM00 ) * Math . sin ( Math . toRadians ( calculatePastProgress ( ) - NUM00 ) ) ) ) , mRadiusToggle , mPaintProgressToggle ) ; }
private static Collection < TCPTransport > allKnownTransports $F72 { Set < TCPTransport > s ; synchronized ( localEndpoints ) { s = new HashSet < TCPTransport > $F716 ( localEndpoints ) ; for ( LinkedList < TCPEndpoint > epList : localEndpoints . values ( ) ) { TCPEndpoint ep = epList . getFirst ( ) ; s . add ( ep . transport ) ; } } return s ; }
public void requestSecondsUntilIdleLockout $F72 { operations . add ( PasswordPolicyStateOperationType . GET_SECONDS_UNTIL_IDLE_LOCKOUT ) ; }
@ RequestMapping ( $F3144 , method = { RequestMethod . GET } ) $F4586 private static $F3803 showHiveDatabases $F72 throws IOException { IHiveClient hiveClient = HiveClientFactory . getHiveClient ( ) ; $F36422 ( results ) try { results = hiveClient . getHiveDbNames ( ) ; } catch ( Exception e ) { $F301 ( e ) $F5614 ( e ) } return results ; }
public void testNegNegFirstShorter $F72 { $F50446 $F92469 int aSign = - NUM00 ; int bSign = - NUM00 ; byte $F3018 = { - NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F37344 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , result ) }
private static double hackyAdjuster ( double f ) { double tmp = Math . sqrt ( NUM00 - f ) ; return ( f <= NUM00 ) ? tmp : tmp + ( NUM00 * ( f - NUM00 ) ) ; }
private static Object fromString ( String s ) throws $F6427 { $F96 data = Base64 . decode ( s , Base64 . DEFAULT ) ; ObjectInputStream ois = new ObjectInputStream $F24702 ( data ) ; $F67404 ( o , ois ) $F59 ( ois ) return o ; }
private boolean copyDocument ( SearchDocument newDocument , SearchDocument document , $F24190 ( removedProperties ) ) { boolean mutated = _BOOL ; for ( String oldFieldName : document . getPropertyNames ( ) ) { newDocument . addProperty ( oldFieldName ) ; $F3803 oldValues = document . getProperty ( oldFieldName ) ; if ( oldValues != null ) { $F2689 objectsRemoved = ( removedProperties != null ) ? removedProperties . get ( oldFieldName ) : null ; for ( String oldValue : oldValues ) { if ( ( objectsRemoved != null ) && $F105 ( objectsRemoved , oldValue ) ) { mutated = _BOOL ; } else { addProperty ( oldFieldName , oldValue , newDocument ) ; } } } } return mutated ; }
public SVDMatrix ( Matrix Arg ) { this ( Arg , _BOOL , _BOOL , _BOOL ) ; }
public void unlockForClear ( InternalDistributedMember locker ) { synchronized ( this . clearLockSync ) { InternalDistributedSystem instance = InternalDistributedSystem . getAnyInstance ( ) ; if ( instance != null && logger . isDebugEnabled ( ) ) { logger . debug ( NUM00 , locker , System . identityHashCode ( this ) ) ; } if ( this . lockOwner != null && ! locker . equals ( this . lockOwner ) ) { if ( instance != null && logger . isDebugEnabled ( ) ) $F11589 ( logger , lockOwner ) $F665 } unlockVersionGeneration ( locker ) ; } }
public UnicastRef $F72 $F845
private static int lastIndexOf ( Object o , $F1113 $F131 elements , int index ) { if ( o == null ) { for ( $F141 ( i , index ) ) { if ( elements [ i ] == null ) { return i ; } } } else { for ( $F141 ( i , index ) ) { if $F145 ( o , elements , i ) { return i ; } } } $F150 }
public void write ( ByteBuffer buffer ) throws IOException { $F16709 ( buffer ) if ( mFileChannel . size ( ) + buffer . capacity ( ) < mMaxSize ) { while $F5720 ( buffer ) $F4050 ( mFileChannel , buffer ) updateWaveFileSize ( ) ; } else { int remaining = ( int ) ( mMaxSize - mFileChannel . size ( ) ) ; remaining -= ( int ) ( remaining % mAudioFormat . getFrameSize ( ) ) ; $F152855 ( bytes , buffer ) ByteBuffer current = ByteBuffer . wrap ( Arrays . copyOf ( bytes , remaining ) ) ; ByteBuffer next = ByteBuffer . wrap ( Arrays . copyOfRange ( bytes , remaining , bytes . length ) ) ; while $F5720 ( current ) $F4050 ( mFileChannel , current ) updateWaveFileSize ( ) ; rollover ( ) ; while $F5720 ( next ) $F4050 ( mFileChannel , next ) updateWaveFileSize ( ) ; } }
public static double dmod_d ( double lhs , double rhs ) { return rhs != NUM00 ? lhs - rhs * Math . floor ( lhs / rhs ) : Double . NaN ; }
public void testMaxLess $F72 { $F127614 $F79258 int aSign = NUM00 ; int bSign = NUM00 ; $F67522 $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F127615 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F67528 ( assertTrue , result ) }
private synchronized void block ( boolean tf ) { if ( tf ) { try { if ( m_ioThread . isAlive ( ) && m_state != IDLE ) $F5795 ( wait ) } $F34690 } else $F5795 ( notifyAll ) }
public void move ( MouseEvent e ) { Point2D pnt = getProjectionPoint ( e ) ; $F166720 ( x , pnt ) $F166722 ( y , pnt ) if ( poly . getRenderType ( ) == OMGraphic . RENDERTYPE_OFFSET ) { gpm = new OffsetGrabPoint ( x , y ) ; $F725 ( gpm ) } else { gpm = gpo ; $F725 ( gpm ) gpm . set ( x , y ) ; } addPolyGrabPointsToOGP ( gpm ) ; movingPoint = gpm ; }
public FloatBuffer put $F11671 ( src , srcOffset , floatCount ) $F11682 ( Arrays , src , srcOffset , floatCount , remaining , i , put , this )
public final void dispatchCharactersEvents ( int nodeHandle , ContentHandler ch , boolean normalize ) throws SAXException { int identity = makeNodeIdentity ( nodeHandle ) ; if ( identity == DTM . NULL ) $F665 int type = _type2 ( identity ) ; if ( type == DTM . ELEMENT_NODE || type == DTM . DOCUMENT_NODE ) { int startNode = identity ; identity = _firstch2 ( identity ) ; if ( DTM . NULL != identity ) { int offset = - NUM00 ; int length = NUM00 ; do { type = _exptype2 ( identity ) ; if $F117450 ( type , DTM ) { int dataIndex = m_dataOrQName . elementAt ( identity ) ; if ( dataIndex >= NUM00 ) { if ( - NUM00 == offset ) { offset = dataIndex > > > TEXT_LENGTH_BITS ; } length += dataIndex & TEXT_LENGTH_MAX ; } else { if ( - NUM00 == offset ) { offset = m_data . elementAt ( - dataIndex ) ; } length += m_data . elementAt ( - dataIndex + NUM00 ) ; } } identity ++ ; } while ( _parent2 ( identity ) >= startNode ) ; if ( length > NUM00 ) { if ( normalize ) m_chars . sendNormalizedSAXcharacters ( ch , offset , length ) ; else m_chars . sendSAXcharacters ( ch , offset , length ) ; } } } else if ( DTM . TEXT_NODE == type || DTM . CDATA_SECTION_NODE == type ) { int dataIndex = m_dataOrQName . elementAt ( identity ) ; if ( dataIndex >= NUM00 ) { if ( normalize ) m_chars . sendNormalizedSAXcharacters ( ch , dataIndex > > > TEXT_LENGTH_BITS , dataIndex & TEXT_LENGTH_MAX ) ; else m_chars . sendSAXcharacters ( ch , dataIndex > > > TEXT_LENGTH_BITS , dataIndex & TEXT_LENGTH_MAX ) ; } else { if ( normalize ) m_chars . sendNormalizedSAXcharacters ( ch , m_data . elementAt ( - dataIndex ) , m_data . elementAt ( - dataIndex + NUM00 ) ) ; else m_chars . sendSAXcharacters ( ch , m_data . elementAt ( - dataIndex ) , m_data . elementAt ( - dataIndex + NUM00 ) ) ; } } else { int dataIndex = m_dataOrQName . elementAt ( identity ) ; if ( dataIndex < NUM00 ) { dataIndex = - dataIndex ; dataIndex = m_data . elementAt ( dataIndex + NUM00 ) ; } $F124180 ( str , m_values , dataIndex ) if ( normalize ) FastStringBuffer . sendNormalizedSAXcharacters ( str . toCharArray ( ) , NUM00 , str . length ( ) , ch ) ; else ch . characters ( $F62204 ( str ) ) ; } }
public static boolean containIP $F14337 ( cidrPrefix , cidrMaskBits , ip ) { boolean matched = _BOOL ; int bitsToShift = NUM00 - cidrMaskBits ; if ( bitsToShift > NUM00 ) { cidrPrefix = cidrPrefix > > bitsToShift ; ip = ip > > bitsToShift ; cidrPrefix = cidrPrefix < < bitsToShift ; ip = ip < < bitsToShift ; } if ( cidrPrefix != ip ) { matched = _BOOL ; } return matched ; }
protected static Boolean lock ( String serviceName , Object name ) { DistributedLockService service = DistributedLockService . getServiceNamed ( serviceName ) ; boolean locked = service . lock ( name , NUM00 , - NUM00 ) ; $F33236 ( Boolean , locked ) }
protected int checkKnownCookie $F72 { int retVal = NUM00 ; debug . message ( NUM00 , ADAPTIVE ) ; HttpServletRequest req = getHttpServletRequest ( ) ; if ( req != null ) { Cookie cookie = CookieUtils . getCookieFromReq ( req , knownCookieName ) ; if ( cookie != null ) { if ( knownCookieValue . equalsIgnoreCase ( CookieUtils . getCookieValue ( cookie ) ) ) { retVal = knownCookieScore ; } } } $F23170 ( knownCookieValue ) if ( knownCookieSave ) { $F545 ( postAuthNMap , knownCookieName ) $F545 ( postAuthNMap , knownCookieValue ) } if ( ! knownCookieInvert ) { retVal = knownCookieScore - retVal ; } return retVal ; }
public $F5237 selectImportFiles ( final String title , boolean multipleSelection , FileNameExtensionFilter [ ] fileNameExtensionFilters ) { if ( Boolean . parseBoolean ( System . getProperty ( NUM00 , Boolean . toString ( OSType . isMac ( ) ) ) ) ) { FileDialog importDialog = fileDialogs . get ( title ) ; if ( importDialog == null ) { importDialog = new FileDialog ( this , title , FileDialog . LOAD ) ; fileDialogs . put ( title , importDialog ) ; } importDialog . setVisible ( _BOOL ) ; if ( importDialog . getFile ( ) != null ) { return new File [ ] { new File ( importDialog . getDirectory ( ) , importDialog . getFile ( ) ) } ; } } else { JFileChooser importChooser = fileChoosers . get ( title ) ; if ( importChooser == null ) { importChooser = new JFileChooser ( Utils . getCWD ( ) ) ; importChooser . setMultiSelectionEnabled ( multipleSelection ) ; for ( FileNameExtensionFilter fileNameExtensionFilter : fileNameExtensionFilters ) { importChooser . setFileFilter ( fileNameExtensionFilter ) ; } importChooser . setDialogTitle ( title ) ; fileChoosers . put ( title , importChooser ) ; } int returnVal = importChooser . showOpenDialog ( this ) ; if ( returnVal == JFileChooser . APPROVE_OPTION ) { if ( importChooser . isMultiSelectionEnabled ( ) ) { return importChooser . getSelectedFiles ( ) ; } else { return new File [ ] { importChooser . getSelectedFile ( ) } ; } } } $F1274 }
public GT_MetaGenerated_Item ( String aUnlocalized , short aOffset , short aItemAmount ) { super ( aUnlocalized ) ; setCreativeTab ( GregTech_API . TAB_GREGTECH_MATERIALS ) ; setHasSubtypes ( _BOOL ) ; setMaxDamage ( NUM00 ) ; mEnabledItems = new BitSet ( aItemAmount ) ; mVisibleItems = new BitSet ( aItemAmount ) ; mOffset = ( short ) Math . min ( NUM00 , aOffset ) ; mItemAmount = ( short ) Math . min ( aItemAmount , NUM00 - mOffset ) ; mIconList = new IIcon [ aItemAmount ] [ NUM00 ] ; sInstances . put ( getUnlocalizedName ( ) , this ) ; }
$F1 public $F987 listOptions $F72 { $F994 ( newVector ) $F9007 ( newVector ) $F9007 ( newVector ) $F1000 ( newVector ) $F1006 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F9010 ( newVector , Collections , super ) $F1007 ( newVector ) }
$F1 public SSLEngineResult wrap ( $F30903 srcs , int offset , int len , ByteBuffer dst ) throws SSLException { if ( engine_was_shutteddown ) { return new SSLEngineResult ( SSLEngineResult . Status . CLOSED , SSLEngineResult . HandshakeStatus . NOT_HANDSHAKING , NUM00 , NUM00 ) ; } if $F54923 ( srcs , dst ) $F4639 if ( dst . isReadOnly ( ) ) { throw new ReadOnlyBufferException $F72 ; } $F14406 ( handshake_started , beginHandshake ) SSLEngineResult . HandshakeStatus handshakeStatus = getHandshakeStatus ( ) ; if ( ( session == null || engine_was_closed ) && ( handshakeStatus . equals ( SSLEngineResult . HandshakeStatus . NEED_UNWRAP ) || handshakeStatus . equals ( SSLEngineResult . HandshakeStatus . NEED_TASK ) ) ) { return new SSLEngineResult ( getEngineStatus ( ) , handshakeStatus , NUM00 , NUM00 ) ; } $F45850 ( capacity , dst ) int produced = NUM00 ; if ( alertProtocol . hasAlert ( ) ) { if ( capacity < recordProtocol . getRecordSize ( NUM00 ) ) { return new SSLEngineResult ( SSLEngineResult . Status . BUFFER_OVERFLOW , handshakeStatus , NUM00 , NUM00 ) ; } $F96 alert_data = alertProtocol . wrap ( ) ; dst . put ( alert_data ) ; if ( alertProtocol . isFatalAlert ( ) ) { alertProtocol . setProcessed ( ) ; if ( session != null ) $F5218 ( session ) shutdown ( ) ; return new SSLEngineResult ( SSLEngineResult . Status . CLOSED , SSLEngineResult . HandshakeStatus . NOT_HANDSHAKING , NUM00 , alert_data . length ) ; } else { alertProtocol . setProcessed ( ) ; if ( close_notify_was_sent && close_notify_was_received ) { shutdown ( ) ; return new SSLEngineResult ( SSLEngineResult . Status . CLOSED , SSLEngineResult . HandshakeStatus . NOT_HANDSHAKING , NUM00 , alert_data . length ) ; } return new SSLEngineResult ( getEngineStatus ( ) , getHandshakeStatus ( ) , NUM00 , alert_data . length ) ; } } if ( capacity < recordProtocol . getMinRecordSize ( ) ) { if ( logger != null ) { logger . println ( NUM00 + capacity + NUM00 + recordProtocol . getMinRecordSize ( ) + NUM00 ) ; } return new SSLEngineResult ( SSLEngineResult . Status . BUFFER_OVERFLOW , handshakeStatus , NUM00 , NUM00 ) ; } try { if ( ! handshakeStatus . equals ( SSLEngineResult . HandshakeStatus . NEED_WRAP ) ) { dataStream . setSourceBuffers ( srcs , offset , len ) ; if ( ( capacity < SSLRecordProtocol . MAX_SSL_PACKET_SIZE ) && ( capacity < recordProtocol . getRecordSize ( dataStream . available ( ) ) ) ) { if ( logger != null ) { logger . println ( NUM00 + capacity + NUM00 + recordProtocol . getRecordSize ( dataStream . available ( ) ) + NUM00 ) ; } return new SSLEngineResult ( SSLEngineResult . Status . BUFFER_OVERFLOW , handshakeStatus , NUM00 , NUM00 ) ; } if ( remaining_wrapped_data == null ) { remaining_wrapped_data = recordProtocol . wrap ( ContentType . APPLICATION_DATA , dataStream ) ; } if ( capacity < remaining_wrapped_data . length ) { return new SSLEngineResult ( SSLEngineResult . Status . BUFFER_OVERFLOW , handshakeStatus , dataStream . consumed ( ) , NUM00 ) ; } else { dst . put ( remaining_wrapped_data ) ; produced = remaining_wrapped_data . length ; remaining_wrapped_data = null ; return new SSLEngineResult ( getEngineStatus ( ) , handshakeStatus , dataStream . consumed ( ) , produced ) ; } } else { if ( remaining_hsh_data == null ) { remaining_hsh_data = handshakeProtocol . wrap ( ) ; } if ( capacity < remaining_hsh_data . length ) { return new SSLEngineResult ( SSLEngineResult . Status . BUFFER_OVERFLOW , handshakeStatus , NUM00 , NUM00 ) ; } else { dst . put ( remaining_hsh_data ) ; produced = remaining_hsh_data . length ; remaining_hsh_data = null ; handshakeStatus = handshakeProtocol . getStatus ( ) ; if ( handshakeStatus . equals ( SSLEngineResult . HandshakeStatus . FINISHED ) ) { session = recordProtocol . getSession ( ) ; } } return new SSLEngineResult ( getEngineStatus ( ) , getHandshakeStatus ( ) , NUM00 , produced ) ; } } catch ( AlertException e ) { alertProtocol . alert ( AlertProtocol . FATAL , e . getDescriptionCode ( ) ) ; engine_was_closed = _BOOL ; if ( session != null ) $F5218 ( session ) throw e . getReason ( ) ; } }
public static $F96 readFully ( InputStream in ) throws IOException { $F11452 ( readFullyNoClose , in ) }
public static ParsedSql parseSqlStatement ( String sql ) { $F2695 ( namedParameters ) ParsedSql parsedSql = new ParsedSql ( sql ) ; $F7782 ( statement , sql ) int namedParameterCount = NUM00 ; int unnamedParameterCount = NUM00 ; int totalParameterCount = NUM00 ; int i = NUM00 ; while ( i < statement . length ) { int skipToPosition = skipCommentsAndQuotes ( statement , i ) ; if ( i != skipToPosition ) { $F5884 ( skipToPosition , statement ) i = skipToPosition ; } char c = statement [ i ] ; if $F37111 ( c ) { int j = i + NUM00 ; if ( j < statement . length && statement [ j ] == NUM00 && c == NUM00 ) { i = i + NUM00 ; $F598 } while ( j < statement . length && ! isParameterSeparator ( statement [ j ] ) ) { j ++ ; } if ( j - i > NUM00 ) { $F129846 ( parameter , sql , i , j ) if $F2200 ( namedParameters , parameter ) $F107337 ( namedParameters , parameter , namedParameterCount ) parsedSql . addNamedParameter ( parameter , i , j ) ; totalParameterCount ++ ; } i = j - NUM00 ; } else { if ( c == NUM00 ) $F1097 ( unnamedParameterCount , totalParameterCount ) } i ++ ; } parsedSql . setNamedParameterCount ( namedParameterCount ) ; parsedSql . setUnnamedParameterCount ( unnamedParameterCount ) ; parsedSql . setTotalParameterCount ( totalParameterCount ) ; return parsedSql ; }
final void putLong ( int offset , long value ) { unsafe . putLong ( offset + address , value ) ; }
public boolean onEvent ( ActionResult result ) { synchronized ( this ) { String requestId = result . getResponseInfo ( ) . mRequestId ; $F1933 ( requestId , _BOOL ) $F12396 ( eventRemoved , mRequestIds , requestId ) if ( eventRemoved ) { Class key = null ; for ( Class type : mLastRequestIdByType . keySet ( ) ) { if ( $F115302 ( requestId , mLastRequestIdByType , type ) ) $F3468 ( key , type ) } $F231860 ( key , mLastRequestIdByType ) } return eventRemoved ; } }
public static String gensalt ( int log_rounds , SecureRandom random ) { $F280 ( rs ) byte rnd [ ] = new byte [ BCRYPT_SALT_LEN ] ; random . nextBytes ( rnd ) ; $F84 ( rs ) $F2854 ( log_rounds , rs ) if ( log_rounds > NUM00 ) $F825 $F42779 ( rs , Integer , log_rounds ) $F84 ( rs ) rs . append ( encode_base64 ( rnd , rnd . length ) ) ; $F92 ( rs ) }
public void checkKey ( Object key ) throws PartitionedRegionException { $F24126 ( hasHash ) $F2329 ( key ) $F17043 ( expected , key ) $F19899 ( expected , keyHash ) throw new PartitionedRegionException ( NUM00 + expected + NUM00 + keyHash ) ; }
public StringBuffer numberToString ( final String strNumberToConvert ) { String strNumber = NUM00 , signBit = NUM00 ; if $F3106 ( strNumberToConvert ) { strNumber = NUM00 + $F47252 ( strNumberToConvert ) ; signBit = NUM00 ; } else strNumber = NUM00 + strNumberToConvert ; final DecimalFormat dft = new DecimalFormat $F580 ; final String strtemp = NUM00 + dft . format ( Double . parseDouble ( strNumber ) ) ; $F1350 ( strbNumber , strtemp ) $F22998 ( intLen , strbNumber ) for ( int i = intLen - NUM00 ; i > NUM00 ; i = i - NUM00 ) $F48459 ( strbNumber , i ) if $F3057 ( signBit ) strbNumber = strbNumber . insert ( NUM00 , NUM00 ) ; return strbNumber ; }
private void runInitScriptIfRequired ( String url , Connection connection ) throws SQLException { $F275 ( matcher , INITSCRIPT_MATCHING_PATTERN , url ) if $F24133 ( matcher ) { $F283 ( initScriptPath , matcher ) try { URL resource = Resources . getResource ( initScriptPath ) ; String sql = Resources . toString ( resource , Charsets . UTF_8 ) ; ScriptUtils . executeSqlScript ( connection , initScriptPath , sql ) ; } catch ( IOException | IllegalArgumentException e ) { $F18942 ( LOGGER , initScriptPath ) throw new SQLException ( NUM00 + initScriptPath , e ) ; } catch ( ScriptException e ) { $F59427 ( LOGGER , initScriptPath , e ) throw new SQLException ( NUM00 + initScriptPath , e ) ; } } }
private static int parseInt $F36827 ( value , beginIndex , endIndex ) throws NumberFormatException { if ( $F128898 ( beginIndex , endIndex , value ) || beginIndex > endIndex ) { throw new NumberFormatException ( value ) ; } int i = beginIndex ; int result = NUM00 ; int digit ; if ( i < endIndex ) { $F289104 ( digit , Character , value , i ) if ( digit < NUM00 ) $F111291 ( value ) result = - digit ; } while ( i < endIndex ) { $F289104 ( digit , Character , value , i ) if ( digit < NUM00 ) $F111291 ( value ) result *= NUM00 ; result -= digit ; } return - result ; }
public static void println ( Object x ) $F18992 ( out , x )
public static void checkFinite $F10212 ( val ) throws MathIllegalArgumentException { for ( $F1139 ( i , val ) ) { final double x = val [ i ] ; if ( Double . isInfinite ( x ) || Double . isNaN ( x ) ) { throw new MathIllegalArgumentException ( LocalizedCoreFormats . NOT_FINITE1BER , x ) ; } } }
private void initKeyboardButtons ( KeyboardView view ) { $F9404 ( mButtons ) mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_0 ) ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_1 ) ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_2 ) ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_3 ) ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_4 ) ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_5 ) ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_6 ) ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_7 ) ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_8 ) ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_9 ) ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_clear ) ) ; for ( View button : mButtons ) { button . setOnClickListener ( this ) ; } }
public static boolean isAutoNew ( Properties ctx , int WindowNo ) { $F19273 ( ctx ) String s = getContext ( ctx , WindowNo , NUM00 , _BOOL ) ; if ( s != null ) { if $F3057 ( s ) return _BOOL ; else return _BOOL ; } return isAutoNew ( ctx ) ; }
private static String findRelativePath ( String filePath , String dirPath ) { String relPath ; if ( ! $F22072 ( dirPath , File ) ) { dirPath = dirPath + File . separator ; } if $F7311 ( filePath , dirPath ) { $F94062 ( relPath , filePath , dirPath ) } else { relPath = filePath ; } return relPath ; }
public boolean init $F72 { $F156357 ( log ) MClient client = MClient . get ( Env . getCtx ( ) ) ; String ASPFilter = NUM00 ; if ( client . isUseASP ( ) ) ASPFilter = $F40 + client . getAD_Client_ID ( ) + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + client . getAD_Client_ID ( ) + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + client . getAD_Client_ID ( ) + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 ; String sql = null ; if ( Env . isBaseLanguage ( $F9205 ( Env ) ) ) sql = $F34354 + NUM00 + NUM00 + NUM00 + ASPFilter + NUM00 ; else sql = $F40645 + Env . getAD_Language ( Env . getCtx ( ) ) + NUM00 + NUM00 + ASPFilter + NUM00 ; boolean hasFields = _BOOL ; Rows rows = new Rows $F72 ; try { $F46 ( pstmt , DB , sql ) pstmt . setInt ( NUM00 , m_processInfo . getAD_Process_ID ( ) ) ; $F49 ( rs , pstmt ) while $F1682 ( rs ) { hasFields = _BOOL ; createField ( rs , rows ) ; isPair = ! isPair ; } $F59 ( rs ) $F59 ( pstmt ) } $F64 ( log , Level , sql , e ) if ( $F15255 ( m_mFields , m_mFields2 ) || $F15255 ( m_mFields , m_wEditors ) || $F15255 ( m_mFields2 , m_wEditors2 ) ) $F81302 ( log , Level ) if ( hasFields ) { centerPanel . appendChild ( rows ) ; dynamicDisplay ( ) ; } else dispose ( ) ; return hasFields ; }
$F62319 ( filename , separator , keepSeparator , size , prefix , getPrefixLength , array , otherSeparator , SYSTEM_SEPARATOR , OTHER_SEPARATOR , i , lastIsDirectory , _BOOL , System , j )
public void resetSingleton $F72 { root = null ; $F3223 ( tmpFileCounter ) $F725 ( accessedFiles ) shouldAllThrowIOException = _BOOL ; $F725 ( classesThatShouldThrowIOException ) synchronized ( leakingResources ) { for ( LeakingResource resource : leakingResources ) { try $F33834 ( resource ) catch ( Exception e ) { logger . warn ( $F5351 ( e ) , e ) ; } } $F725 ( leakingResources ) } }
public void testAndNotNegNegFirstLonger $F72 { $F37335 $F37339 int aSign = - NUM00 ; int bSign = - NUM00 ; byte $F3018 = { NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F89728 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public static String generateStringOfCharacters ( int count ) { $F83 ( sb ) for ( $F119 ( i , count ) ) { sb . append ( CHARACTERS . charAt ( ( int ) ( Math . random ( ) * CHARACTERS . length ( ) ) ) ) ; } $F92 ( sb ) }
private ExchangeRateManager $F72 { if ( System . getProperty ( NUM00 ) == null ) $F5788 addKnownRates ( ) ; }
public void removeAttribute ( String name ) { if ( name != null ) if ( attributesList != null ) { for ( $F2277 ( i , attributesList ) ) { Object o = attributesList . elementAt ( i ) ; if ( o instanceof AttributeField ) { AttributeField a = ( AttributeField ) o ; try { $F20605 ( n , a ) if ( n != null ) { if $F1238 ( name , n ) $F106 ( attributesList , a ) } } catch ( SdpParseException e ) $F845 } } } }
$F1 public void evict ( String key ) { key = safetyKey ( key ) ; $F140034 ( file , cacheDirectory , key ) $F1900 ( file ) }
public static boolean isUniqueContraintError ( Exception e ) { if ( DB . isPostgreSQL ( ) ) return isSQLState ( e , NUM00 ) ; return isErrorCode ( e , NUM00 ) ; }
$F156045 ( msg , x , super , this )
$F32569 ( panel , cols , rows , filler , filled_cell_11 , _BOOL , cc , Box , index )
private void insertUsedContextPrefixes $F72 { $F2199 ( unknownPrefixesCount , unknownPrefixesInXMLLiteral ) if ( unknownPrefixesCount > NUM00 ) { $F20818 ( contextPrefixes ) ElementInfo topElement = peekStack ( ) ; for ( $F119 ( i , unknownPrefixesCount ) ) { $F1729 ( prefix , unknownPrefixesInXMLLiteral , i ) String namespace = topElement . getNamespace ( prefix ) ; if ( namespace != null ) { appendNamespaceDecl ( contextPrefixes , prefix , namespace ) ; } } $F1384 ( endOfFirstStartTag , charBuf ) charBuf . insert ( endOfFirstStartTag , contextPrefixes . toString ( ) ) ; } $F725 ( unknownPrefixesInXMLLiteral ) }
public void addPutTimeNanos ( long duration ) { putTimeNanos . addAndGet ( duration ) ; if ( delegate != null ) delegate . addPutTimeNanos ( duration ) ; }
public static $F3807 precomputeHashes $F31474 ( data , tweak ) { $F15272 $F10252 ( list , MAX_HASH_FUNCS ) ; for ( $F1316 ( i , MAX_HASH_FUNCS ) ) $F139401 ( list , murmurhash3bit , i , data , tweak ) return list ; }
$F10344 ( HTTPRequestMethod ) @ Before ( adviceClass = { $F10345 , AnonymousViewCheck . class , UserBlockCheck . class } ) $F10353 public void showHomeFollowingTags $F10355 ( context , request , response , userName ) throws Exception { $F10360 ( user , request , User ) request . setAttribute ( Keys . TEMAPLTE_DIR_NAME , Symphonys . get ( NUM00 ) ) ; $F10375 ( renderer ) context . setRenderer ( renderer ) ; $F10384 ( renderer ) $F10377 ( dataModel , renderer ) filler . fillHeaderAndFooter ( request , response , dataModel ) ; $F10362 ( pageNumStr , request ) $F10365 ( Strings , pageNumStr ) $F10367 ( pageNum , Integer , pageNumStr ) $F10411 ( pageSize , Symphonys ) $F10411 ( windowSize , Symphonys ) fillHomeUser ( dataModel , user ) ; $F10381 ( followingId , user , Keys ) dataModel . put ( Follow . FOLLOWING_ID , followingId ) ; avatarQueryService . fillUserAvatarURL ( user ) ; final JSONObject followingTagsResult = followQueryService . getFollowingTags ( followingId , pageNum , pageSize ) ; final $F10413 followingTags = ( $F10413 ) followingTagsResult . opt ( Keys . RESULTS ) ; dataModel . put ( Common . USER_HOME_FOLLOWING_TAGS , followingTags ) ; final boolean isLoggedIn = ( Boolean ) dataModel . get ( Common . IS_LOGGED_IN ) ; if ( isLoggedIn ) { final JSONObject currentUser = ( JSONObject ) dataModel . get ( Common . CURRENT_USER ) ; $F10381 ( followerId , currentUser , Keys ) $F10398 ( isFollowing , followQueryService , followerId , followingId ) dataModel . put ( Common . IS_FOLLOWING , isFollowing ) ; for ( final JSONObject followingTag : followingTags ) { $F10381 ( homeUserFollowingTagId , followingTag , Keys ) followingTag . put ( Common . IS_FOLLOWING , followQueryService . isFollowing ( followerId , homeUserFollowingTagId ) ) ; } } user . put ( UserExt . USER_T_CREATE_TIME , new Date ( user . getLong ( Keys . OBJECT_ID ) ) ) ; final int followingTagCnt = followingTagsResult . optInt ( Pagination . PAGINATION_RECORD_COUNT ) ; final int pageCount = ( int ) Math . ceil ( followingTagCnt / ( double ) pageSize ) ; final $F3807 pageNums = Paginator . paginate ( pageNum , pageSize , pageCount , windowSize ) ; if $F5973 ( pageNums ) { dataModel . put ( Pagination . PAGINATION_FIRST_PAGE1 , pageNums . get ( NUM00 ) ) ; dataModel . put ( Pagination . PAGINATION_LAST_PAGE1 , $F7661 ( pageNums ) ) ; } $F10442 ( dataModel , Pagination , pageNum ) $F10444 ( dataModel , Pagination , pageCount ) dataModel . put ( Pagination . PAGINATION_PAGE1S , pageNums ) ; }
public int elevationAt ( float lat , float lon ) { if ( frame_is_valid == _BOOL ) { if ( lat >= dsi . sw_lat && lat <= dsi . ne_lat && lon >= dsi . sw_lon && lon <= dsi . ne_lon ) { int lat_index = Math . round ( ( lat - dsi . sw_lat ) * NUM00 / uhl . lat_post_interval ) ; int lon_index = Math . round ( ( lon - dsi . sw_lon ) * NUM00 / uhl . lon_post_interval ) ; if ( elevations [ lon_index ] == null ) readDataRecord ( lon_index ) ; return ( int ) elevations [ lon_index ] [ lat_index ] ; } } $F150 }
ObservedObject createObservedObject ( ObjectName object ) { return new ObservedObject ( object ) ; }
private void deleteChildren ( Element container ) { while $F49521 ( container ) { container . removeChild ( container . getLastChild ( ) ) ; } }
private void saveInitialChildState ( FacesContext facesContext , UIComponent component ) { if ( component instanceof EditableValueHolder && ! component . isTransient ( ) ) { String clientId = component . getClientId ( facesContext ) ; SavedState state = new SavedState $F72 ; initialChildState . put ( clientId , state ) ; state . populate ( ( EditableValueHolder ) component ) ; } Iterator < UIComponent > iterator = component . getFacetsAndChildren ( ) ; while $F2921 ( iterator ) { $F11626 ( saveChildState , facesContext , iterator ) ; } }
public boolean is_overlap $F72 { $F155343 start_contacts = get_start_contacts ( ) ; $F155343 end_contacts = get_end_contacts ( ) ; for ( BrdItem end_contact : end_contacts ) { $F12651 ( start_contacts , end_contact , _BOOL ) } return _BOOL ; }
static Object ensureNotNull ( Location location , Object value ) { if ( value == null ) { throw new EvalException ( location , NUM00 ) ; } return value ; }
public static final ArrayList readListXml ( InputStream in ) throws $F18821 { $F58707 ( parser , Xml ) $F58708 ( parser , in ) return ( ArrayList ) $F176917 ( readValueXml , parser ) ; }
private static String padRight ( String s , int minLength ) { return $F49045 ( String , minLength , s ) ; }
$F1 public $F14937 enumerateMeasures $F72 { $F75150 ( newVector ) $F6519 ( newVector ) $F1007 ( newVector ) }
protected synchronized void onSendTaskCompleted ( $F228084 buffer ) { logger . trace ( NUM00 , name ( ) , buffer ) ; $F15856 ( activeSendTasks ) }
public void addPreferencesButton $F72 { $F79691 ( prefsButton ) prefsButton . setHideActionText ( _BOOL ) ; prefsButton . setAction ( RasterPlotActions . getPropertiesDialogAction ( this ) ) ; buttonPanel . add ( prefsButton ) ; }
public void clearUnused ( ConfigImpl config ) { SystemOut . printDate ( config . getOutWriter ( ) , $F80356 ( size , maxSize ) ) ; if ( size ( ) > maxSize ) { $F131 keys = keys ( ) ; LongKeyList list = new LongKeyList $F72 ; for ( $F1139 ( i , keys ) ) { PageSource ps = getPageSource ( keys [ i ] , _BOOL ) ; long updateTime = ps . getLastAccessTime ( ) ; if ( updateTime + timeout < System . currentTimeMillis ( ) ) { long add = ( ( ps . getAccessCount ( ) - NUM00 ) * NUM00 ) ; $F46170 ( add , timeout ) list . add ( updateTime + add , keys [ i ] ) ; } } while ( size ( ) > maxSize ) { Object key = list . shift ( ) ; $F12576 ( key ) remove ( key ) ; } } }
public static GridField [ ] createFields ( Properties ctx , int WindowNo , int TabNo , int AD_Tab_ID ) { ArrayList < GridFieldVO > listVO = new ArrayList < GridFieldVO > $F72 ; int AD_Window_ID = NUM00 ; boolean readOnly = _BOOL ; String sql = GridFieldVO . getSQL ( ctx ) ; PreparedStatement pstmt = null ; try { $F47577 ( pstmt , DB , sql ) $F47 ( pstmt , AD_Tab_ID ) $F49 ( rs , pstmt ) while $F1682 ( rs ) { GridFieldVO vo = GridFieldVO . create ( ctx , WindowNo , TabNo , AD_Window_ID , AD_Tab_ID , readOnly , rs ) ; listVO . add ( vo ) ; } $F59 ( rs ) $F59 ( pstmt ) pstmt = null ; } $F230362 ( log , Level , sql , e ) $F285021 ( pstmt ) GridField [ ] retValue = new GridField $F2313 ( listVO ) ; for ( $F2277 ( i , listVO ) ) retValue [ i ] = new GridField ( ( GridFieldVO ) listVO . get ( i ) ) ; return retValue ; }
public ShortInterleavedRaster $F235065 ( sampleModel , dataBuffer , origin ) $F235073 ( this , sampleModel , dataBuffer , origin )
private void copyCarbonDataFileToCarbonStorePath ( String localFileName ) throws CarbonDataWriterException { $F657 ( copyStartTime , System ) $F21448 ( LOGGER , localFileName , carbonDataDirectoryPath ) try { CarbonFile localCarbonFile = FileFactory . getCarbonFile ( localFileName , FileFactory . getFileType ( localFileName ) ) ; String carbonFilePath = carbonDataDirectoryPath + localFileName . substring ( $F23703 ( localFileName , File ) ) ; copyLocalFileToCarbonStore ( carbonFilePath , localFileName , CarbonCommonConstants . BYTEBUFFER_SIZE , getMaxOfBlockAndFileSize ( fileSizeInBytes , localCarbonFile . getSize ( ) ) ) ; } catch ( IOException e ) { throw new CarbonDataWriterException $F580 ; } LOGGER . info ( NUM00 + localFileName + NUM00 + $F32707 ( System , copyStartTime ) ) ; }
$F1 public boolean flingBackward ( Selector obj , boolean isVertical ) throws UiObjectNotFoundException { UiScrollable scrollable = new UiScrollable ( obj . toUiSelector ( ) ) ; if ( isVertical ) scrollable . setAsVerticalList ( ) ; else scrollable . setAsHorizontalList ( ) ; return scrollable . flingBackward ( ) ; }
protected static double toDouble ( String s ) { try $F2404 ( Double , s ) catch ( Exception e ) { TestCase . fail ( NUM00 + s + NUM00 + throwableToString ( e ) ) ; return Double . NaN ; } }
public void addListener ( final IFilterPanelListener $F4203 listener ) $F232044 ( m_listeners , listener )
public void testmirror ( File orig , File origni , File truecolor ) { File mirror = TestSupport . addSuffixToName ( orig , NUM00 ) ; File recov = TestSupport . addSuffixToName ( orig , NUM00 ) ; long crc0 = NUM00 ; boolean interlaced ; boolean palete ; { PngReader pngr = new PngReader ( orig ) ; PngWriter pngw = null ; try { if $F146187 ( rand ) pngr . setLineSetFactory ( ImageLineSetDefault . getFactoryByte ( ) ) ; palete = pngr . imgInfo . indexed ; pngr . prepareSimpleDigestComputation ( ) ; interlaced = pngr . isInterlaced ( ) ; pngw = new PngWriter ( mirror , pngr . imgInfo , _BOOL ) ; pngw . setFilterType ( FilterType . FILTER_CYCLIC ) ; pngw . copyChunksFrom ( pngr . getChunksList ( ) ) ; IImageLineSet < ? extends IImageLine > lines = pngr . readRows ( ) ; for ( int row = NUM00 ; row < pngr . imgInfo . rows ; row ++ ) { mirrorLine ( lines . getImageLine ( row ) , pngr . imgInfo ) ; pngw . writeRow ( lines . getImageLine ( row ) ) ; } $F87417 ( pngr ) crc0 = PngHelperInternal . getDigest ( pngr ) ; $F87417 ( pngw ) } finally { $F59 ( pngr ) $F711 ( pngw ) } } { PngReader pngr2 = new PngReader ( mirror ) ; PngWriter pngw = null ; try { if ( pngr2 . imgInfo . bitDepth < NUM00 && rand . nextBoolean ( ) ) pngr2 . setLineSetFactory ( ImageLineSetDefault . getFactoryByte ( ) ) ; pngw = new PngWriter ( recov , pngr2 . imgInfo , _BOOL ) ; pngw . setFilterType ( FilterType . FILTER_DEFAULT ) ; pngw . copyChunksFrom ( pngr2 . getChunksList ( ) ) ; for ( int row = NUM00 ; row < pngr2 . imgInfo . rows ; row ++ ) { IImageLine line = pngr2 . readRow ( ) ; mirrorLine ( line , pngr2 . imgInfo ) ; pngw . writeRow ( line ) ; } $F87417 ( pngr2 ) $F87417 ( pngw ) } finally { $F59 ( pngr2 ) $F711 ( pngw ) } } if ( ! interlaced ) TestSupport . testCrcEquals ( recov , crc0 ) ; else TestSupport . testSameCrc ( recov , origni ) ; if ( interlaced ) additionalTestInterlaced ( orig , origni ) ; if ( palete && truecolor . exists ( ) ) additionalTestPalette ( orig , truecolor ) ; }
public boolean isStable $F72 $F298 ( myFeatures , FEATURE_STABLE )
public static void calcTextSize ( Paint paint , String demoText , FSize outputFSize ) { Rect r = mCalcTextSizeRect ; r . set ( $F4026 ) ; $F77589 ( paint , demoText , r ) outputFSize . width = r . width ( ) ; outputFSize . height = r . height ( ) ; }
protected void performDefaults $F72 { super . performDefaults ( ) ; initializeValues ( ) ; verifyValidation ( ) ; }
public String toString $F72 { $F64605 ( buf ) for ( int i = NUM00 , end = _pos - NUM00 ; i < end ; i ++ ) { $F6939 ( buf , _data , i ) $F84 ( buf ) } if $F44803 ( size ) { buf . append ( _data [ _pos - NUM00 ] ) ; } $F84 ( buf ) $F92 ( buf ) }
public static void write ( int x1 , int y1 , Image image , int image_width , int image_height , LinkProperties properties , DataOutputStream dos ) throws $F3 { $F108267 ( pixels , image_width , image_height ) PixelGrabber pixelgrabber = new PixelGrabber ( image , NUM00 , NUM00 , image_width , image_height , pixels , NUM00 , image_width ) ; pixelgrabber . grabPixels ( ) ; LinkRaster . write ( x1 , y1 , image_width , image_height , pixels , properties , dos ) ; }
$F1431 public void testProjectionPredicateDifferentClassLoaders $F72 throws Exception { final Ignite ignite3 = startGrid ( NUM00 ) ; $F52326 clsLdrUrls ; try { clsLdrUrls = new URL [ ] { new URL ( GridTestProperties . getProperty ( NUM00 ) ) } ; } catch ( MalformedURLException e ) $F7077 ( e ) ClassLoader ldr1 = new URLClassLoader ( clsLdrUrls , getClass ( ) . getClassLoader ( ) ) ; $F198604 ( taskCls , ldr1 ) $F198604 ( nodeFilterCls , ldr1 ) IgnitePredicate $F33331 nodeFilter = ( IgnitePredicate $F33331 ) nodeFilterCls . getConstructor ( UUID . class ) . newInstance ( ignite2 . cluster ( ) . localNode ( ) . id ( ) ) ; Map < UUID , Integer > ret = ( Map < UUID , Integer > ) executeAsync ( compute ( ignite1 . cluster ( ) . forPredicate ( nodeFilter ) ) , taskCls , null ) . get ( TASK_EXEC_TIMEOUT_MS ) ; assert ret != null ; assert ret . get ( ignite1 . cluster ( ) . localNode ( ) . id ( ) ) != null && ret . get ( ignite1 . cluster ( ) . localNode ( ) . id ( ) ) == NUM00 : ret . get ( ignite1 . cluster ( ) . localNode ( ) . id ( ) ) ; assert ret . get ( ignite3 . cluster ( ) . localNode ( ) . id ( ) ) != null && ret . get ( ignite3 . cluster ( ) . localNode ( ) . id ( ) ) == NUM00 : ret . get ( ignite3 . cluster ( ) . localNode ( ) . id ( ) ) ; }
public void stateChanged ( ChangeEvent evt ) { $F129070 ( scale , slider ) value . setText ( NUM00 + String . valueOf ( scale ) ) ; size . setText ( NUM00 + ( width * scale ) + NUM00 + ( height * scale ) + NUM00 ) ; $F8798 ( preview ) }
public static void writeToFile ( String content , File dstFile ) throws IOException { $F287736 ( bufferedWriter , dstFile , _BOOL ) bufferedWriter . write ( content ) ; $F59 ( bufferedWriter ) }
public static boolean isFileURL ( URL url ) { $F5524 ( protocol , url ) return ( $F86439 ( URL_PROTOCOL_FILE , protocol , URL_PROTOCOL_VFSFILE , URL_PROTOCOL_VFS ) ) ; }
private void updateStatus ( String relayState , int currentStatus ) { $F10158 ( tmp , currentStatusMap , relayState ) if ( tmp != null ) { $F79839 ( previousStatus , tmp ) switch ( previousStatus ) { case LOGOUT_SUCCEEDED_STATUS : if ( currentStatus > previousStatus ) { $F117910 ( currentStatusMap , relayState , currentStatus ) } $F597 case LOGOUT_FAILED_STATUS : if ( currentStatus < LOGOUT_FAILED_STATUS ) { $F117910 ( currentStatusMap , relayState , LOGOUT_PARTIAL_STATUS ) } $F597 $F2448 } } else { $F117910 ( currentStatusMap , relayState , currentStatus ) } }
public static $F2027 oidStrToInts ( String oid ) throws IOException { $F115 ( length , oid ) if $F198486 ( oid , length ) $F3496 ( oid ) $F2027 result = new int [ length / NUM00 + NUM00 ] ; int number = NUM00 ; for ( $F119 ( i , length ) ) { int value = NUM00 ; int pos = i ; for ( ; i < length ; i ++ ) { $F1280 ( ch , oid , i ) if ( ( ch < NUM00 ) || ( ch > NUM00 ) ) $F5153 value = NUM00 * value + ( ch - NUM00 ) ; } if ( i == pos ) $F3496 ( oid ) result [ number ++ ] = value ; $F15290 ( i , length ) $F1280 ( ch , oid , i ) if ( ch != NUM00 ) $F3496 ( oid ) } if ( number < NUM00 ) $F3496 ( oid ) return Arrays . copyOfRange ( result , NUM00 , number ) ; }
public static $F2689 listServers ( SSOToken ssoToken , String siteName ) throws SMSException , SSOException , ConfigurationException { $F13750 ( members ) String siteId = getSiteId ( ssoToken , siteName ) ; if ( siteId != null ) { $F2689 allServers = ServerConfiguration . getServers ( ssoToken ) ; for ( String svr : allServers ) { if ( ServerConfiguration . belongToSite ( ssoToken , svr , siteName ) ) $F207 ( members , svr ) } } return members ; }
public static GenericObjectEditorDialog createDialog ( Container parent ) $F13736 ( createDialog , parent )
public static boolean containsInLineFeatures ( StyledLayerDescriptor sld ) { if ( sld != null ) { for ( StyledLayer layer : sld . layers ( ) ) { if ( layer instanceof UserLayer ) { UserLayer userLayer = ( UserLayer ) layer ; if ( userLayer . getInlineFeatureDatastore ( ) != null ) { return _BOOL ; } } } } return _BOOL ; }
public byte decodeBuffer ( InputStream in ) [ ] throws IOException { $F1538 ( outStream ) decodeBuffer ( in , outStream ) ; return $F87573 ( outStream ) ; }
public static void runFinalization $F72 { RUNTIME . runFinalization ( ) ; }
private void displayAllStringDefinedInStringXml $F72 { SimpleIconFontTextView textView = ( SimpleIconFontTextView ) findViewById ( R . id . text_view_1 ) ; $F24645 ( list ) list . add ( getString ( R . string . gems_logo ) ) ; String text = TextUtils . join ( NUM00 , list ) ; textView . setText ( text ) ; }
public static void checkHTTPRequestLength ( HttpServletRequest request ) throws ServletException { int maxContentLength = SAMLUtils . getMaxContentLength ( ) ; if ( maxContentLength != NUM00 ) { $F7983 ( length , request ) if ( length == - NUM00 ) { throw new ServletException $F16961 ( bundle ) ; } if ( length > maxContentLength ) { $F36310 ( debug , length ) throw new ServletException $F16961 ( bundle ) ; } } }
public void addForeignKeyConstraint $F19845 ( name , sourceField , targetField , targetTable ) { ForeignKeyConstraint foreignKey = new ForeignKeyConstraint ( name , sourceField , targetField , targetTable ) ; addForeignKeyConstraint ( foreignKey ) ; }
$F1 public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; mHandler = new Handler $F72 ; setContentView ( R . layout . voice_recognition ) ; Button speakButton = ( Button ) findViewById ( R . id . btn_speak ) ; mList = ( ListView ) findViewById ( R . id . list ) ; mSupportedLanguageView = ( Spinner ) findViewById ( R . id . supported_languages ) ; PackageManager pm = getPackageManager ( ) ; $F45549 activities = pm . queryIntentActivities ( new Intent ( RecognizerIntent . ACTION_RECOGNIZE_SPEECH ) , NUM00 ) ; if $F6887 ( activities ) { speakButton . setOnClickListener ( this ) ; } else { speakButton . setEnabled ( _BOOL ) ; $F15121 ( speakButton ) } refreshVoiceSettings ( ) ; }
public void push ( Notification notification , NotificationResponseListener listener ) { final String notificationTopic = notification . getTopic ( ) ; final String topic = notificationTopic == null ? defaultTopic : notificationTopic ; Request req = Utils . buildRequest ( client , topic , notification , gateway ) ; semaphore . acquireUninterruptibly ( ) ; req . send ( new ResponseListener ( semaphore , notification , listener ) ) ; }
$F43588 ( json , key , value , isValueNumeric , _BOOL , Double , escapeJSON )
public void updateFromResource $F72 { for ( String resource : resources ) { InputStream is = ClassLoader . getSystemResourceAsStream ( resource ) ; LinkedHashMap < EntryType , LinkedHashMap < String , ConfigEntry > > parseResult = parse ( is ) ; for ( EntryType type : myMap . keySet ( ) ) { LinkedHashMap < String , ConfigEntry > dataMappings = myMap . get ( type ) ; LinkedHashMap < String , ConfigEntry > resourceMappings = parseResult . get ( type ) ; LinkedHashMap < String , ConfigEntry > tempMappings = new LinkedHashMap < String , ConfigEntry > $F72 ; LinkedHashSet $F4 keys = new LinkedHashSet $F4 $F72 ; $F70469 ( keys , dataMappings ) $F70469 ( keys , resourceMappings ) for ( String key : keys ) { if $F1710 ( resourceMappings , key ) $F103853 ( tempMappings , key , resourceMappings ) else $F103853 ( tempMappings , key , dataMappings ) } myMap . put ( type , tempMappings ) ; } } }
private void deselect ( final int index , final boolean shouldFireEvents ) { checkWidget ( ) ; if $F55119 ( index , items ) $F932 final DLItem item = selection . remove ( index ) ; $F72524 ( shouldFireEvents , fireSelectionEvent , item ) final List $F255565 deselectedItems = new ArrayList $F255565 $F72 ; item . setLastAction ( LAST_ACTION . DESELECTION ) ; deselectedItems . add ( item ) ; $F72524 ( shouldFireEvents , fireSelectionChangeEvent , deselectedItems ) redrawTables ( ) ; }
public boolean isLeaf ( Object nd ) { $F125481 ( node , nd ) return ! node . hasChildNodes ( ) ; }
public void addListener ( Listener listener ) { mListeners . add ( listener ) ; notifyServiceDiscovered ( mMatchingDrones ) ; }
$F1 boolean equals ( Object obj ) ;
private $F1986 parseVector ( String s ) { $F35105 ( entries , WHITESPACE_PATTERN , s ) $F40939 ( d , entries ) for ( $F1139 ( i , entries ) ) { try { d [ i ] = ParseUtil . parseDouble ( entries [ i ] ) ; } catch ( NumberFormatException e ) $F129033 } return d ; }
public void test_create_update $F72 throws IOException { final String id = NUM00 ; final $F529 metadata = $F532 ; metadata . put ( FileMetadataSchema . ID , id ) ; $F16824 ( metadata ) final int version0 ; final long createTime0 ; final $F96 expected0 = new byte $F137708 ; { version0 = repo . create ( metadata ) ; metadata . put ( FileMetadataSchema . VERSION , Integer . valueOf ( version0 ) ) ; assertEquals ( NUM00 , NUM00 , version0 ) ; RepositoryDocumentImpl doc = ( RepositoryDocumentImpl ) repo . read ( id ) ; createTime0 = doc . getVersionCreateTime ( ) ; $F529 actual = doc . asMap ( ) ; assertEquals ( NUM00 , id , actual . get ( FileMetadataSchema . ID ) ) ; assertEquals ( NUM00 , version0 , actual . get ( FileMetadataSchema . VERSION ) ) ; assertEquals ( NUM00 , NUM00 , actual . get ( NUM00 ) ) ; assertEquals ( NUM00 , metadata . size ( ) , actual . size ( ) ) ; repo . copyStream ( id , version0 , new ByteArrayInputStream ( expected0 ) ) ; assertEquals ( NUM00 , expected0 , read ( repo . inputStream ( id , version0 ) ) ) ; } final int version1 ; final long createTime1 ; final $F96 expected1 = new byte $F137708 ; { $F16824 ( metadata ) DocumentImpl doc1 = new DocumentImpl ( metadata ) ; doc1 . copyStream ( expected1 ) ; version1 = repo . update ( doc1 ) ; assertEquals ( NUM00 , NUM00 , version1 ) ; metadata . put ( FileMetadataSchema . VERSION , Integer . valueOf ( version1 ) ) ; RepositoryDocumentImpl doc = ( RepositoryDocumentImpl ) repo . read ( id ) ; createTime1 = doc . getVersionCreateTime ( ) ; assertNotSame ( NUM00 , NUM00 , createTime1 ) ; assertNotSame ( NUM00 , createTime0 , createTime1 ) ; $F529 actual = doc . asMap ( ) ; assertEquals ( NUM00 , id , actual . get ( FileMetadataSchema . ID ) ) ; assertEquals ( NUM00 , version1 , actual . get ( FileMetadataSchema . VERSION ) ) ; assertEquals ( NUM00 , NUM00 , actual . get ( NUM00 ) ) ; assertEquals ( NUM00 , metadata . size ( ) , actual . size ( ) ) ; assertEquals ( NUM00 , expected1 , read ( repo . inputStream ( id , version1 ) ) ) ; assertEquals ( NUM00 , $F68763 , read ( repo . inputStream ( id , version0 ) ) ) ; { ITPS tps = repo . readMetadata ( id , createTime1 - NUM00 ) ; ITPV tpv = tps . get ( FileMetadataSchema . VERSION ) ; assertEquals ( NUM00 , null , tpv . getValue ( ) ) ; } } }
$F1 public void writeExternal ( ObjectOutput out ) throws IOException { super . writeExternal ( out ) ; out . writeDouble ( knnDistance ) ; }
public SessionWrapper ( Session ses ) { this . ses = ses ; this . time = System . currentTimeMillis ( ) ; }
public static List < BatchResponse > postWithSingleRequest ( final RequestSpecification requestSpec , final ResponseSpecification responseSpec , final BatchRequest br ) { final List < BatchRequest > $F204 ( batchRequests ) ; batchRequests . add ( br ) ; final String jsonifiedRequest = BatchHelper . toJsonString ( batchRequests ) ; final List < BatchResponse > response = BatchHelper . postBatchRequestsWithoutEnclosingTransaction ( requestSpec , responseSpec , jsonifiedRequest ) ; Assert . assertNotNull ( response ) ; Assert . assertTrue ( $F3816 ( response ) ) ; return response ; }
public File programDirectory $F72 { return programDirectory ; }
$F1 public void clearRouteSensors $F72 { $F9404 ( _controlSensorList ) }
public static KEYSTORE_TYPE fromString ( String x ) throws ConfigurationException { for ( $F40424 ( currentType , KEYSTORE_TYPE ) ) { if $F280736 ( x , currentType ) return currentType ; } throw new ConfigurationException $F10797 ( MessageFormat , x ) ; }
public ObjectMapper nextLevel ( ObjectMapper level ) { ObjectMapper previous = levelStack . peek ( ) ; levelStack . push ( level ) ; return previous ; }
protected static int toDigit ( final char ch , final int index ) throws HexDecodeException { final int digit = Character . digit ( ch , NUM00 ) ; if ( digit == - NUM00 ) { throw new HexDecodeException ( NUM00 + ch + NUM00 + index ) ; } return digit ; }
public JSONObject toJson $F72 throws JSONException { $F60661 ( json ) $F19928 ( jpods ) for ( DiasporaPod pod : pods ) { jpods . put ( pod . toJson ( ) ) ; } $F545 ( json , jpods ) json . put ( $F132682 ( System ) ) ; return json ; }
public static KeyStore load ( File keyStoreFile , Password password ) throws CryptoException , FileNotFoundException { KeyStoreType keyStoreType = null ; try { keyStoreType = CryptoFileUtil . detectKeyStoreType ( new FileInputStream ( keyStoreFile ) ) ; } catch ( FileNotFoundException ex ) { throw ex ; } catch ( IOException ex ) $F102881 ( res , ex ) $F1338 ( keyStoreType ) return load ( keyStoreFile , password , keyStoreType ) ; }
$F1 public $F9107 ( pcl , m_pcSupport )
$F1219 static boolean isPrecachingEnabled ( Context context ) { $F111887 ( prefs , PreferenceManager , context ) return prefs . getBoolean ( PREF_IS_PRECACHING_ENABLED , _BOOL ) ; }
public void and ( LongBitSet other ) { int pos = Math . min ( numWords , other . numWords ) ; while ( -- pos >= NUM00 ) { bits [ pos ] &= other . bits [ pos ] ; } if ( numWords > other . numWords ) { Arrays . fill ( bits , other . numWords , numWords , NUM00 ) ; } }
$F1 public boolean equals ( Object obj ) { if ( this == obj ) return _BOOL ; if ( ! ( obj instanceof PrincipalEntry ) ) return _BOOL ; PrincipalEntry that = ( PrincipalEntry ) obj ; return ( $F142656 ( principalClass , that , principalName ) ) ; }
public boolean isValidLockdownProfile $F72 { try { return _BOOL ; } catch ( IllegalArgumentException e ) { Log . w ( TAG , NUM00 , e ) ; return _BOOL ; } }
private int readServerResponse $F72 throws IOException { $F75240 ( replyBuf ) int c ; int continuingCode = - NUM00 ; int code ; String response ; serverResponse . setSize ( NUM00 ) ; while ( _BOOL ) { while $F175320 ( c , in ) { if ( c == NUM00 ) { if $F175289 ( c , in ) $F86 ( replyBuf ) } $F36813 ( replyBuf , c ) $F41314 ( c ) } $F6947 ( response , replyBuf ) $F4910 ( replyBuf ) if ( logger . isLoggable ( PlatformLogger . Level . FINEST ) ) $F224661 ( logger , serverAddr , response ) if $F1277 ( response ) $F44867 ( code ) else { try { code = Integer . parseInt ( $F606 ( response ) ) ; } catch ( NumberFormatException e ) $F44867 ( code ) catch ( StringIndexOutOfBoundsException e ) $F1448 } serverResponse . addElement ( response ) ; if ( continuingCode != - NUM00 ) { if ( code != continuingCode || ( $F22876 ( response ) && $F4431 ( response ) ) ) $F1448 else { continuingCode = - NUM00 ; $F597 } } else if ( $F22876 ( response ) && $F4431 ( response ) ) $F34544 ( continuingCode , code ) else $F5153 } return code ; }
$F12423 ( filename , extensions , _BOOL , indexOfExtension , fileExt , getExtension , extension )
public FromClause ( Stream streamOne , OuterJoinQualifier outerJoinQualifier , Stream streamTwo ) { this ( streamOne ) ; add ( streamTwo ) ; outerJoinQualifiers . add ( outerJoinQualifier ) ; }
private static void decodeAnsiX12Segment ( BitSource bits , StringBuilder result ) throws FormatException { $F11844 ( cValues ) do { $F46340 ( bits ) $F2847 ( firstByte , bits ) $F32905 ( firstByte ) $F46342 ( parseTwoBytes , firstByte , bits , cValues ) for ( $F6268 ( i ) ) { int cValue = cValues [ i ] ; if ( cValue == NUM00 ) $F86 ( result ) else if ( cValue == NUM00 ) $F86 ( result ) else if ( cValue == NUM00 ) $F86 ( result ) else if ( cValue == NUM00 ) $F86 ( result ) else if ( cValue < NUM00 ) $F46359 ( result , cValue ) else if ( cValue < NUM00 ) $F46359 ( result , cValue ) else $F2172 ( FormatException ) } } while $F2892 ( bits ) ; }
public static KdbDatabase createKdbDatabase ( Credentials credentials , KdbHeader kdbHeader , InputStream inputStream ) throws IOException { DataInput dataInput = new LittleEndianDataInputStream ( inputStream ) ; checkSignature ( dataInput ) ; deserializeHeader ( kdbHeader , dataInput ) ; InputStream decryptedInputStream = kdbHeader . createDecryptedInputStream ( credentials . getKey ( ) , inputStream ) ; MessageDigest digest = Encryption . getMessageDigestInstance ( ) ; DigestInputStream digestInputStream = new DigestInputStream ( decryptedInputStream , digest ) ; dataInput = new LittleEndianDataInputStream ( digestInputStream ) ; KdbDatabase kdbDatabase = new KdbDatabase $F72 ; KdbGroup lastGroup = ( KdbGroup ) kdbDatabase . getRootGroup ( ) ; for ( long group = NUM00 ; group < kdbHeader . getGroupCount ( ) ; group ++ ) $F176272 ( lastGroup , deserializeGroup , dataInput ) for ( long entry = NUM00 ; entry < kdbHeader . getEntryCount ( ) ; entry ++ ) { deserializeEntry ( kdbDatabase , dataInput ) ; } if ( ! Arrays . equals ( digest . digest ( ) , kdbHeader . getContentHash ( ) ) ) $F4639 $F59 ( digestInputStream ) return kdbDatabase ; }
private DiffPart decodeAdd $F6803 ( blockSize_S , blockSize_L ) throws UnsupportedEncodingException , DecodingException { if ( blockSize_S < NUM00 || blockSize_L < NUM00 ) { throw new DecodingException ( NUM00 + blockSize_S + NUM00 + blockSize_L ) ; } $F83249 ( s , r , blockSize_S ) $F83249 ( l , r , blockSize_L ) $F1538 ( output ) for ( $F119 ( i , l ) ) { output . write ( r . readByte ( ) ) ; } DiffPart part = new DiffPart ( DiffAction . INSERT ) ; part . setStart ( s ) ; $F92634 ( part , output , WIKIPEDIA_ENCODING ) return part ; }
public void sort $F72 { Arrays . sort ( V , NUM00 , size ( ) ) ; }
public void rebuildPanel $F72 { if $F165223 ( activeWorker ) $F11437 ( activeWorker , _BOOL ) $F7600 ( panelImages ) $F8797 ( panelImages ) $F8798 ( scrollPane ) activeWorker = new ImageLoader ( mediaFiles ) ; $F1699 ( activeWorker ) }
protected void processBytes $F24576 ( buf , off , len ) { nBytesIn += len ; if ( len < NUM00 || state . isDone ( ) ) $F665 if ( state == State . ROW_READY ) throw new PngjInputException $F580 ; if ( inf . needsDictionary ( ) || ! inf . needsInput ( ) ) $F11388 inf . setInput ( buf , off , len ) ; if ( isCallbackMode ( ) ) { while ( inflateData ( ) ) { int nextRowLen = processRowCallback ( ) ; prepareForNextRow ( nextRowLen ) ; $F62357 ( isDone , processDoneCallback ) } } else inflateData ( ) ; }
$F1 protected String toString ( File obj ) $F33745 ( obj )
public final void goToNextPage $F72 { final boolean isLastPage = viewPager . getCurrentItem ( ) == $F113103 ( pages ) ; if ( ! isLastPage ) { viewPager . setCurrentItem ( viewPager . getCurrentItem ( ) + NUM00 , _BOOL ) ; } }
private static InputStream nullInputStream $F72 throws NullPointerException { if $F44803 ( currentTimeMillis ) $F1337 $F18043 }
public List < TypeId $F1011 > asList $F72 { return $F78193 ( Collections , Arrays , types ) ; }
private static void deleteRules ( $F3803 batchList , $F38669 rulesToDelete ) { String deleteStatement = NUM00 + RULES_TABLE + NUM00 ; for ( Rule rule : rulesToDelete ) { batchList . add ( String . format ( deleteStatement , rule . getUid ( ) ) ) ; } }
public boolean isVisited ( Object element ) $F69736 ( myVisitedElements , element )
public AwsIotConnection ( AbstractAwsIotClient client ) $F6988 ( this , client )
public static $F4203 $F124768 exceptionallyCompletedFuture ( Throwable throwable ) { final $F124768 future = new $F124768 $F72 ; future . completeExceptionally ( throwable ) ; return future ; }
protected void initForecastErrors ( ArrayList $F6204 model , TimeSeries . DataSequence data ) { double sumErr = NUM00 ; double sumAbsErr = NUM00 ; double sumAbsPercentErr = NUM00 ; double sumErrSquared = NUM00 ; int processedPoints = NUM00 ; $F2199 ( n , data ) for ( $F119 ( i , n ) ) { double error = model . get ( i ) - data . get ( i ) . value ; sumErr += error ; sumAbsErr += Math . abs ( error ) ; sumAbsPercentErr += Math . abs ( error / data . get ( i ) . value ) ; sumErrSquared += error * error ; processedPoints ++ ; } this . bias = sumErr / processedPoints ; this . mad = sumAbsErr / processedPoints ; this . mape = sumAbsPercentErr / processedPoints ; this . mse = sumErrSquared / processedPoints ; this . sae = sumAbsErr ; errorsInit = _BOOL ; }
public boolean checkModifiers ( MouseEvent e ) { return e . getModifiers ( ) == modifiers ; }
public void emitRetainedVars ( GenerateJsVisitor gen ) { if $F5973 ( retainedVars ) { gen . out ( NUM00 ) ; boolean first = _BOOL ; for ( String varName : retainedVars ) { if ( ! first ) { gen . out ( NUM00 ) ; } first = _BOOL ; gen . out ( varName ) ; } gen . endLine ( _BOOL ) ; $F725 ( retainedVars ) } }
public URI $F139050 ( scheme , authority , path , query , fragment ) throws URISyntaxException { $F284036 ( scheme , path ) $F83 ( uri ) $F43191 ( scheme , uri ) $F189369 ( authority , uri , AUTHORITY_ENCODER ) $F189367 ( path , PATH_ENCODER , uri ) $F189369 ( query , uri , ALL_LEGAL_ENCODER ) $F189369 ( fragment , uri , ALL_LEGAL_ENCODER ) $F25731 ( parseURI , uri , _BOOL ) }
public List < StructuredTranslation > KbestExtractOnHG ( HyperGraph hg , int topN ) { resetState ( ) ; if ( hg == null || hg . goalNode == null ) $F2905 ( emptyList ) final List < StructuredTranslation > $F10252 ( kbest , topN ) ; for ( $F9993 ( k , topN ) ) { StructuredTranslation translation = getKthStructuredTranslation ( hg . goalNode , k ) ; $F32472 ( translation ) kbest . add ( translation ) ; } return kbest ; }
$F1 public int read $F72 throws IOException { synchronized ( lock ) { checkNotClosed ( ) ; if ( pos != count ) $F7626 ( str , pos ) $F150 } }
public static boolean isSnapshotFullCopySupported ( URI blockSnapURI , DbClient dbClient ) { BlockSnapshot $F34887 ( blockObj , dbClient , blockSnapURI ) ; StorageSystem storage = dbClient . queryObject ( $F41797 , blockObj . getStorageController ( ) ) ; return ( storage != null && ( storage . deviceIsType ( Type . openstack ) || storage . deviceIsType ( Type . vnxblock ) || storage . deviceIsType ( Type . ibmxiv ) || storage . deviceIsType ( Type . vmax ) ) ) ; }
public Iterable < ServiceDescriptor > listServices $F72 { ArrayList < ServiceDescriptor > serviceDescriptors = new ArrayList < ServiceDescriptor > $F72 ; for ( FileDescriptor fileDescriptor : fileDescriptors ) { serviceDescriptors . addAll ( fileDescriptor . getServices ( ) ) ; } return serviceDescriptors ; }
private String stripCodeValueSentences ( String string ) $F8480 ( string )
public void testDivideRoundHalfEvenNeg2 $F72 { String a = NUM00 ; int aScale = NUM00 ; String b = NUM00 ; int bScale = NUM00 ; String c = NUM00 ; int resScale = - NUM00 ; $F1918 ( aNumber , a , aScale ) $F1918 ( bNumber , b , bScale ) BigDecimal result = aNumber . divide ( bNumber , resScale , BigDecimal . ROUND_HALF_EVEN ) ; $F1925 ( assertEquals , c , result ) $F1928 ( assertEquals , resScale , result ) }
public static double quantile $F7635 ( p , alpha , beta ) { if ( Double . isNaN ( alpha ) || Double . isNaN ( beta ) || Double . isNaN ( p ) || alpha < NUM00 || beta < NUM00 ) $F6623 ( Double ) if $F19274 ( p ) $F6623 ( Double ) $F14826 ( p ) $F14826 ( p ) if ( p > NUM00 ) { return NUM00 - rawQuantile ( NUM00 - p , beta , alpha , logBeta ( beta , alpha ) ) ; } else { return rawQuantile ( p , alpha , beta , logBeta ( alpha , beta ) ) ; } }
public boolean validate $F1947 ( cert , signedData , signature ) throws NoSuchAlgorithmException , IOException , Exception { $F96 certBytes = Base64 . decode ( cert ) ; $F96 signedDataBytes = Base64 . decode ( signedData ) ; $F96 signatureBytes = Base64 . decode ( signature ) ; return validate ( certBytes , signedDataBytes , signatureBytes ) ; }
private SharedDeployment createNewDeployment ( GridDeploymentMetadata meta , boolean isCache ) { assert Thread . holdsLock ( mux ) ; assert meta . parentLoader ( ) == null ; IgniteUuid ldrId = IgniteUuid . fromUuid ( ctx . localNodeId ( ) ) ; GridDeploymentClassLoader clsLdr ; if ( meta . deploymentMode ( ) == CONTINUOUS || meta . participants ( ) == null ) { clsLdr = new GridDeploymentClassLoader ( ldrId , meta . userVersion ( ) , meta . deploymentMode ( ) , _BOOL , ctx , ctx . config ( ) . getClassLoader ( ) != null ? ctx . config ( ) . getClassLoader ( ) : U . gridClassLoader ( ) , meta . classLoaderId ( ) , meta . senderNodeId ( ) , comm , ctx . config ( ) . getNetworkTimeout ( ) , log , ctx . config ( ) . getPeerClassLoadingLocalClassPathExclude ( ) , ctx . config ( ) . getPeerClassLoadingMissedResourcesCacheSize ( ) , meta . deploymentMode ( ) == CONTINUOUS , _BOOL ) ; if ( meta . participants ( ) != null ) for ( Map . Entry < UUID , IgniteUuid > e : meta . participants ( ) . entrySet ( ) ) clsLdr . register ( $F15245 ( e ) ) ; if $F585 ( log ) log . debug ( NUM00 + NUM00 + clsLdr + NUM00 + meta + NUM00 ) ; } else { assert meta . deploymentMode ( ) == SHARED ; clsLdr = new GridDeploymentClassLoader ( ldrId , meta . userVersion ( ) , meta . deploymentMode ( ) , _BOOL , ctx , U . gridClassLoader ( ) , meta . participants ( ) , comm , ctx . config ( ) . getNetworkTimeout ( ) , log , ctx . config ( ) . getPeerClassLoadingLocalClassPathExclude ( ) , ctx . config ( ) . getPeerClassLoadingMissedResourcesCacheSize ( ) , _BOOL , _BOOL ) ; if $F585 ( log ) log . debug ( NUM00 + NUM00 + clsLdr + NUM00 + meta + NUM00 ) ; } SharedDeployment dep = new SharedDeployment ( meta . deploymentMode ( ) , clsLdr , ldrId , meta . userVersion ( ) , meta . alias ( ) ) ; $F51620 ( log , dep ) if ( isCache ) { List < SharedDeployment > deps = F . addIfAbsent ( cache , meta . userVersion ( ) , new LinkedList < SharedDeployment > $F72 ) ; assert deps != null ; deps . add ( dep ) ; $F51620 ( log , cache ) } return dep ; }
$F1654 ( seq )
public void testAddServletRunAsRole $F72 throws Exception { String xml = WEBAPP_TEST_HEADER + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 ; $F168856 ( webXml , WebXmlIo , xml , getEntityResolver ) WebXmlUtils . addServletRunAsRoleName ( webXml , NUM00 , NUM00 ) ; String roleName = WebXmlUtils . getServletRunAsRoleName ( webXml , NUM00 ) ; assertEquals ( NUM00 , roleName ) ; }
public void testCase15 $F72 { $F70249 $F10679 int aSign = - NUM00 ; int bSign = - NUM00 ; $F113721 $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F10683 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F70256 ( assertEquals , result ) }
public MultiTermQuery ( final String field ) { $F40806 ( this , Objects , field ) }
public static void printLine ( Object message ) { if $F931 ( isDisabled ) $F45719 ( printLine , String , message ) }
public void accumulate ( TaggedLogAPIEntity entity ) throws Exception { AggregateAPIEntity current = root ; for ( String groupby : groupbys ) { String tagv = locateGroupbyField ( groupby , entity ) ; if $F4251 ( tagv ) { tagv = UNASSIGNED_GROUPBY_ROOT_FIELD_NAME ; } Map < String , AggregateAPIEntity > children = current . getEntityList ( ) ; if $F4257 ( children , tagv ) { children . put ( tagv , factory . create ( ) ) ; current . setNumDirectDescendants ( current . getNumDirectDescendants ( ) + NUM00 ) ; } AggregateAPIEntity child = children . get ( tagv ) ; if ( counting ) count ( child ) ; for ( String sumFunctionField : sumFunctionFields ) { sum ( child , entity , sumFunctionField ) ; } current = child ; } }
public void testInvalidXml $F72 throws Exception { testInvalidGpx ( INVALID_XML_GPX ) ; }
public String toString ( boolean expand ) { $F83 ( acc ) toString ( acc , NUM00 , expand ) ; $F92 ( acc ) }
public static boolean isAccessorPair ( TMember member , TMember member2 ) { return ( member instanceof TGetter && member2 instanceof TSetter ) || ( member instanceof TSetter && member2 instanceof TGetter ) ; }
public static DateFormat createUTCDateFormatter ( String dateFormat ) { DateFormat formatter = new SimpleDateFormat ( dateFormat ) ; $F69761 ( formatter , TimeZone ) return formatter ; }
public void writeLinkedKml ( final String filename , final KmlType kml ) { if $F3057 ( filename ) $F825 if $F3057 ( filename ) $F825 writeKml ( filename , kml ) ; }
String destinationFilePath $F72 { return destinationFilePath ; }
$F1 public void refreshUsersOrGroupsListFromServer $F72 { showLoadingDialog ( getString ( R . string . common_loading ) ) ; GetShareWithUsersAsyncTask getTask = new GetShareWithUsersAsyncTask ( this ) ; $F131 params = { getFile ( ) , getAccount ( ) , getStorageManager ( ) } ; getTask . execute ( params ) ; }
public BootPanel $F72 $F5795 ( initComponents )
private List $F29867 defaultHeaders $F72 { $F121432 ( dateFormat ) List $F29867 $F204 ( headers ) ; headers . add ( new BasicHeader ( NUM00 , $F52170 ( dateFormat ) ) ) ; return headers ; }
public AemParsys clear $F72 { List < WebElement > list = currentScope . findElements ( By . cssSelector ( SELECTOR_FOR_COMPONENT_IN_PARSYS ) ) ; $F22620 ( list ) return this ; }
protected RequestHandle sendRequest ( DefaultHttpClient client , HttpContext httpContext , HttpUriRequest uriRequest , String contentType , ResponseHandlerInterface responseHandler , Context context ) { if ( contentType != null ) { uriRequest . setHeader ( NUM00 , contentType ) ; } responseHandler . setRequestHeaders ( uriRequest . getAllHeaders ( ) ) ; responseHandler . setRequestURI ( uriRequest . getURI ( ) ) ; $F44535 request = threadPool . submit ( new AsyncHttpRequest ( client , httpContext , uriRequest , responseHandler ) ) ; if ( context != null ) { List $F265217 requestList = requestMap . get ( context ) ; if ( requestList == null ) { requestList = new LinkedList $F265217 $F72 ; requestMap . put ( context , requestList ) ; } requestList . add ( new WeakReference < $F44535 > ( request ) ) ; } return new RequestHandle ( request ) ; }
private void registerNewClient ( JsonObject jData ) { Client newClient = gson . fromJson ( jData , Client . class ) ; if $F45040 ( newClient ) { addClient ( newClient ) ; broadcastNewClient ( newClient ) ; sendClientList ( newClient ) ; } else { logger . log ( Level . WARNING , NUM00 ) ; } }
$F1 public void parse ( InputStream in , String baseURI ) throws IOException , RDFParseException , RDFHandlerException { $F826 ( in ) $F826 ( baseURI ) InputSource inputSource = new InputSource ( new BOMInputStream ( in , _BOOL ) ) ; inputSource . setSystemId ( baseURI ) ; parse ( inputSource ) ; }
public static Date parseDate ( String dateValue , Collection dateFormats ) throws DateParseException { $F826 ( dateValue ) $F13265 ( dateFormats , DEFAULT_PATTERNS ) $F91666 ( dateValue ) SimpleDateFormat dateParser = null ; $F242733 ( formatIter , dateFormats ) while $F2921 ( formatIter ) { final String format = $F2775 ( formatIter ) ; if ( dateParser == null ) { $F85877 ( dateParser , format , Locale ) ; $F69761 ( dateParser , TimeZone ) } else { dateParser . applyPattern ( format ) ; } try $F57093 ( dateParser , dateValue ) catch ( final ParseException pe ) $F845 } $F91673 ( dateValue ) }
public JSONObject remove ( String name ) { $F896 ( name ) int index = indexOf ( name ) ; if ( index != - NUM00 ) $F27228 ( table , index , names , values ) return this ; }
EdgeMap $F40167 findLoops ( Deque $F40167 code , Map < Block , Block > idom , SetMap < Block , Edge > pred ) { EdgeMap $F40167 loops = new EdgeMap $F40167 $F72 ; for ( Block b : code ) for ( Edge s : b . succ ( ) ) if ( isLoop ( s , idom ) ) { verboseStatus ( NUM00 + s ) ; Block h = s . to ; Set $F40167 loop = loops . get ( h ) ; Set $F40167 work = new TreeSet $F40167 $F72 ; for ( Edge p : pred . get ( h ) ) { if ( isLoop ( p , idom ) && ! loop . contains ( p . from ) && p . from != h ) { loop . add ( p . from ) ; work . add ( p . from ) ; } } while $F5973 ( work ) { Block x = getBlock ( work ) ; for ( Edge p : pred . get ( x ) ) { if ( p . from != h && ! loop . contains ( p . from ) ) { loop . add ( p . from ) ; work . add ( p . from ) ; } } } } return loops ; }
public $F2027 readLine $F72 { int record [ ] = new int [ MAX_LEN ] ; int checksum = NUM00 ; try { while ( ( $F7614 ( charIn , buffIn ) == NUM00 ) || ( charIn == NUM00 ) ) $F845 if ( charIn != NUM00 ) { $F15998 ( log , lineNo ) return new int [ ] { - NUM00 } ; } } catch ( IOException e ) { JOptionPane . showMessageDialog ( this , NUM00 , NUM00 , JOptionPane . ERROR_MESSAGE ) ; if $F585 ( log ) $F146649 ( log , e ) } record [ LEN ] = rdHexByte ( ) ; checksum += record [ LEN ] ; record [ ADDRH ] = rdHexByte ( ) ; checksum += record [ ADDRH ] ; record [ ADDRL ] = rdHexByte ( ) ; checksum += record [ ADDRL ] ; record [ TYPE ] = rdHexByte ( ) ; checksum += record [ TYPE ] ; address = ( address & NUM00 ) + record [ ADDRH ] * NUM00 + record [ ADDRL ] ; type = record [ TYPE ] ; if ( type != END ) { len = record [ LEN ] ; for ( $F9993 ( i , len ) ) { record [ TYPE + i ] = rdHexByte ( ) ; checksum += record [ TYPE + i ] ; } } int fileCheck = rdHexByte ( ) ; if ( ( ( checksum + fileCheck ) & NUM00 ) != NUM00 ) $F17663 ( log , lineNo ) lineNo ++ ; return record ; }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
private void generateHiveTestFiles $F72 throws FileNotFoundException { try ( PrintWriter writerA = new PrintWriter ( $F109794 ( testWorkDir ) ) ; PrintWriter writerB = new PrintWriter ( $F109794 ( testWorkDir ) ) ) { char sep = NUM00 ; int idB = NUM00 ; int idA = NUM00 ; int v = NUM00 ; for ( $F6268 ( i ) ) { writerA . print ( idA ++ ) ; writerA . print ( sep ) ; writerA . println ( idB ) ; writerB . print ( idB ++ ) ; writerB . print ( sep ) ; writerB . println ( v += NUM00 ) ; writerB . print ( idB ++ ) ; writerB . print ( sep ) ; writerB . println ( v += NUM00 ) ; } $F1206 ( writerA ) $F1206 ( writerB ) } }
public void renameEditorPanel ( Editor panel ) { $F110977 ( panelsList ) for ( $F2277 ( i , panelsList ) ) { $F16628 ( o , panelsList , i ) if ( o == panel ) { JCheckBoxMenuItem r = ( JCheckBoxMenuItem ) panelsSubMenu . getItem ( i ) ; r . setText ( panel . getTitle ( ) ) ; $F665 } } }
private boolean fitsAsSingleLine ( int col ) { return ( col + singleLineWidth ( ) <= PcalTLAGen . wrapColumn ) || ( bodyFormulas . sf == null && $F45555 ( prcdFormulas ) ) ; }
$F1 protected void before $F72 throws Throwable { previousThreads = Thread . getAllStackTraces ( ) ; }
public void sphericalToWorld ( Vector3 vec ) { if ( pjUnprojected == null ) { String projStr = NUM00 + projInfo . getSemiMajorAxis ( ) + NUM00 + projInfo . getSemiMinorAxis ( ) + NUM00 ; pjUnprojected = Proj4 . newInstance ( projStr ) ; } if ( pjProjected == null ) { pjProjected = Proj4 . newInstance ( proj4String ) ; } try { vec . toArray ( coord ) ; coord [ NUM00 ] = Math . toRadians ( coord [ NUM00 ] ) ; coord [ NUM00 ] = Math . toRadians ( coord [ NUM00 ] ) ; pjUnprojected . transform ( pjProjected , coord ) ; vec . setX ( coord [ NUM00 ] ) ; vec . setY ( coord [ NUM00 ] ) ; } $F1516 ( e ) }
public String replace ( CharSequence target , CharSequence replacement ) { $F896 ( target ) $F896 ( replacement ) $F1822 ( targetString , target ) int matchStart = indexOf ( targetString , NUM00 ) ; $F5881 ( matchStart , this ) $F1822 ( replacementString , replacement ) $F1749 ( targetLength , targetString ) if ( targetLength == NUM00 ) { int resultLength = count + ( count + NUM00 ) * replacementString . length ( ) ; $F7542 ( result , resultLength ) result . append ( replacementString ) ; int end = offset + count ; for ( int i = offset ; i != end ; ++ i ) { $F6939 ( result , value , i ) result . append ( replacementString ) ; } $F92 ( result ) } $F7542 ( result , count ) int searchStart = NUM00 ; do { result . append ( value , offset + searchStart , matchStart - searchStart ) ; result . append ( replacementString ) ; searchStart = matchStart + targetLength ; } while ( ( matchStart = indexOf ( targetString , searchStart ) ) != - NUM00 ) ; result . append ( value , offset + searchStart , count - searchStart ) ; $F92 ( result ) }
public static String encodeUrl ( final String str ) $F73165 ( encode , str )
public void drawRenderedImage ( RenderedImage img , AffineTransform xform ) { $F2329 ( img ) mPrintMetrics . drawImage ( this , img ) ; mDrawingArea . addInfinite ( ) ; }
private long buildSize ( int durationInSeconds , LinkInfo linfo ) { long result = - NUM00 ; double bitRateSum = NUM00 ; switch ( linfo . fmt ) { $F3366 bitRateSum = NUM00 + NUM00 / NUM00 ; $F597 $F3366 bitRateSum = NUM00 + NUM00 / NUM00 ; $F597 $F3366 bitRateSum = NUM00 + NUM00 / NUM00 ; $F597 $F3366 bitRateSum = NUM00 + NUM00 / NUM00 ; $F597 $F3366 bitRateSum = NUM00 + NUM00 / NUM00 ; $F597 $F3366 bitRateSum = NUM00 + NUM00 / NUM00 ; $F597 $F3366 bitRateSum = NUM00 + NUM00 / NUM00 ; $F597 $F3366 bitRateSum = NUM00 + NUM00 / NUM00 ; $F597 $F3366 bitRateSum = NUM00 + NUM00 / NUM00 ; $F597 $F3366 bitRateSum = NUM00 + NUM00 / NUM00 ; $F597 $F3366 bitRateSum = NUM00 + NUM00 / NUM00 ; $F597 $F3366 bitRateSum = NUM00 + NUM00 / NUM00 ; $F597 $F3366 bitRateSum = NUM00 + NUM00 / NUM00 ; $F597 $F3366 bitRateSum = NUM00 + NUM00 / NUM00 ; $F597 $F3366 bitRateSum = NUM00 + NUM00 / NUM00 ; $F597 $F3366 bitRateSum = NUM00 + NUM00 / NUM00 ; $F597 $F3366 bitRateSum = NUM00 + NUM00 / NUM00 ; $F597 $F3366 bitRateSum = NUM00 + NUM00 / NUM00 ; $F597 $F3366 bitRateSum = NUM00 + NUM00 / NUM00 ; $F597 $F3366 bitRateSum = NUM00 + NUM00 / NUM00 ; $F597 $F3366 bitRateSum = NUM00 + NUM00 / NUM00 ; $F597 $F3366 bitRateSum = NUM00 + NUM00 / NUM00 ; $F597 $F3366 bitRateSum = NUM00 + NUM00 / NUM00 ; $F597 $F3366 bitRateSum = NUM00 + NUM00 / NUM00 ; $F597 $F3366 bitRateSum = NUM00 + NUM00 / NUM00 ; $F597 $F3366 bitRateSum = NUM00 + NUM00 / NUM00 ; $F597 $F3366 bitRateSum = NUM00 / NUM00 ; $F597 $F3366 bitRateSum = NUM00 / NUM00 ; $F597 $F3366 bitRateSum = NUM00 / NUM00 ; $F597 } bitRateSum = bitRateSum * NUM00 * NUM00 ; result = ( long ) ( Math . ceil ( ( bitRateSum * durationInSeconds ) / NUM00 ) ) ; return result ; }
private void skipToEndOfLine $F72 { for ( $F93943 ( pos , in ) ) { $F1280 ( c , in , pos ) if $F37111 ( c ) $F56675 ( pos ) } }
public IndependenceTest indTestSubset ( List vars ) $F1337
$F1 public void actOn ( File f ) { BufferedReader reader = null ; try { $F438 ( reader , f ) announceSeedsFromReader ( reader ) ; } catch ( FileNotFoundException fnf ) $F55754 ( logger , Level , fnf ) $F18090 ( IOUtils , reader ) }
public static String formatMillis ( int millis ) { String result = NUM00 ; int hr = millis / NUM00 ; millis %= NUM00 ; int min = millis / NUM00 ; millis %= NUM00 ; int sec = millis / NUM00 ; if ( hr > NUM00 ) { result += hr + NUM00 ; } if ( min >= NUM00 ) { if ( min > NUM00 ) { result += min + NUM00 ; } else $F58266 ( result , min ) } if ( sec > NUM00 ) { result += sec ; } else { result += NUM00 + sec ; } return result ; }
$F16267 ( propertyName , listener , propertyChangeSupport )
public File createNewFolder ( File containingDir ) throws IOException { $F31068 ( containingDir ) File newFolder = createFileObject ( containingDir , newFolderString ) ; int i = NUM00 ; while ( newFolder . exists ( ) && i < NUM00 ) { newFolder = createFileObject ( containingDir , MessageFormat . format ( newFolderNextString , new Integer ( i ) ) ) ; i ++ ; } if $F3428 ( newFolder ) $F144276 ( newFolder ) else $F1908 ( newFolder ) return newFolder ; }
public ResourcesPoet addTypedArray ( String name , $F254768 ( values ) ) { $F8382 ( element , document ) $F34765 ( element , name ) for ( String value : values ) { $F8382 ( valueElement , document ) $F5849 ( valueElement , document , value ) element . appendChild ( valueElement ) ; } resourceElement . appendChild ( element ) ; return this ; }
public boolean addSubAction ( final ConfAction actionConf ) throws GeneralException , ConfigurationException { if ( actionConf . getType ( ) != null ) { final SubAction sub = SubAction . factory ( actionConf . getType ( ) , actionConf ) ; if ( sub == null ) { if ( Cfg . DEBUG ) { Check . log ( TAG + NUM00 + actionConf . getType ( ) ) ; } return _BOOL ; } list . add ( sub ) ; if ( sub instanceof SubActionSlow ) { setQueue ( MAIN_QUEUE ) ; } return _BOOL ; } else { $F135076 ( Cfg , Check , TAG ) return _BOOL ; } }
void fillEntryTree ( Set < PageLeafEntry > entries , Row row ) { int ptr = _rowHead ; $F96 buffer = _buffer ; while ( ptr < BLOCK_SIZE ) { int code = buffer [ ptr ] & CODE_MASK ; int len = getLength ( code , row ) ; if ( code == INSERT || code == REMOVE ) { PageLeafEntry entry = new PageLeafEntry ( this , row , ptr , len , code ) ; entries . add ( entry ) ; } ptr += len ; } }
public static $F50398 boolean containsAtleastOne ( Collection $F50398 left , Collection $F50398 right ) { $F6973 ( left , right , _BOOL ) for ( S id : left ) $F51680 ( right , id , _BOOL ) return _BOOL ; }
private boolean processKeyUp ( int keyCode ) { if ( keyCode == KeyEvent . KEYCODE_ESCAPE || keyCode == KeyEvent . KEYCODE_BACK ) $F27427 ( dismiss , _BOOL ) else if ( keyCode == KeyEvent . KEYCODE_TAB ) { if ( mInKbMode ) { $F121010 ( isTypedTimeFullyLegal , finishKbMode , _BOOL ) return _BOOL ; } } else if ( keyCode == KeyEvent . KEYCODE_ENTER ) { if ( mInKbMode ) { $F1485 ( isTypedTimeFullyLegal , _BOOL ) finishKbMode ( _BOOL ) ; } if ( mCallback != null ) { mCallback . onTimeSet ( mTimePicker , mTimePicker . getHours ( ) , mTimePicker . getMinutes ( ) ) ; } dismiss ( ) ; return _BOOL ; } else if ( keyCode == KeyEvent . KEYCODE_DEL ) { if ( mInKbMode ) { if $F5973 ( mTypedTimes ) { int deleted = deleteLastTypedKey ( ) ; String deletedKeyStr ; $F218511 ( deleted , getAmOrPmKeyCode , AM , deletedKeyStr , mAmText , PM , mPmText , String , getValFromKeyCode ) Utils . tryAccessibilityAnnounce ( mTimePicker , String . format ( mDeletedKeyFormat , deletedKeyStr ) ) ; updateDisplay ( _BOOL ) ; } } } else $F218536 ( keyCode , KeyEvent , mIs24HourMode , getAmOrPmKeyCode , AM , PM , mInKbMode , mTimePicker , Log , TAG , _BOOL , mTypedTimes , tryStartingKbMode , addKeyIfLegal , updateDisplay ) return _BOOL ; }
public void assertDurationIsInRange ( long expectedMillis ) { long minimum = ( long ) ( ( double ) expectedMillis * NUM00 ) ; long maximum = Math . max ( ( long ) ( ( double ) expectedMillis * NUM00 ) , NUM00 ) ; long waitMillis = Math . max ( expectedMillis * NUM00 , NUM00 ) ; long duration = getDurationMillis ( waitMillis ) ; if ( duration < minimum ) { Assert . fail ( NUM00 + expectedMillis + NUM00 + minimum + NUM00 + duration ) ; } else if ( duration > maximum ) { Assert . fail ( NUM00 + expectedMillis + NUM00 + maximum + NUM00 + duration ) ; } }
public void logDiff $F19845 ( id , field , db , hw ) { StringBuffer diffBuffer = new StringBuffer $F4456 ( String , id , field ) ; if ( $F4250 ( db ) || db . equalsIgnoreCase ( NO_MATCHING_ENTRY ) ) $F181853 ( diffBuffer , String , hw ) else if ( $F4250 ( hw ) || hw . equalsIgnoreCase ( NO_MATCHING_ENTRY ) ) $F181853 ( diffBuffer , String , db ) else { diffBuffer . append ( String . format ( NUM00 , db != null ? db : NUM00 , hw != null ? hw : NUM00 ) ) ; } msgs . append ( $F5528 ( diffBuffer ) ) ; if ( log != null ) { $F17749 ( log , diffBuffer ) } }
public FieldFrameBodyIMG ( Lyrics3Image image ) $F207 ( images , image )
public AbstractResource ( String mimetype ) { this ( mimetype , System . currentTimeMillis ( ) ) ; }
private Parameters $F72 { for ( $F2774 ( i , arguments ) ) { $F2778 ( arg , i ) $F37156 ( arg ) if $F14943 ( arg ) $F11416 ( arg ) $F1384 ( colonIndex , arg ) String key ; String value ; if ( colonIndex >= NUM00 ) $F60269 ( key , arg , colonIndex , value ) else { $F64779 ( key , arg ) value = NUM00 ; } if $F2200 ( allowedKeys , key ) throw new IllegalArgumentException ( NUM00 + arg . substring ( NUM00 ) + NUM00 + StringUtil . toCommaDelimitedString ( allowedKeys ) ) ; hashtable . put ( key , value ) ; } for ( $F2774 ( i , requiredKeys ) ) { $F2778 ( requiredKey , i ) if $F15257 ( hashtable , requiredKey ) $F11416 ( requiredKey ) } }
public List < TLV > initRespondSmp $F22381 ( question , secret , initiating ) throws OtrException { if ( question != null && ! initiating ) $F824 $F96 our_fp = Hex . decode ( keyManager . getLocalFingerprint ( sessionID ) ) ; String remoteFingerprint = keyManager . getRemoteFingerprint ( sessionID ) ; if ( remoteFingerprint == null ) throw new OtrException $F580 ; $F96 their_fp = Hex . decode ( remoteFingerprint ) ; $F96 sessionId ; try { sessionId = computeSessionId ( session . getS ( ) ) ; } catch ( SMException ex ) { throw new OtrException ( ex ) ; } $F96 bytes = secret . getBytes ( SerializationUtils . UTF8 ) ; int combined_buf_len = NUM00 + sessionId . length + bytes . length ; $F2175 ( combined_buf , combined_buf_len ) combined_buf [ NUM00 ] = NUM00 ; if ( initiating ) { $F10319 ( System , our_fp , combined_buf ) $F10319 ( System , their_fp , combined_buf ) } else { $F10319 ( System , their_fp , combined_buf ) $F10319 ( System , our_fp , combined_buf ) } $F7057 ( System , sessionId , combined_buf ) System . arraycopy ( bytes , NUM00 , combined_buf , NUM00 + sessionId . length , bytes . length ) ; MessageDigest sha256 ; try $F14527 ( sha256 , MessageDigest ) catch ( NoSuchAlgorithmException ex ) { throw new OtrException ( ex ) ; } $F96 combined_secret = sha256 . digest ( combined_buf ) ; $F96 smpmsg ; try { if ( initiating ) { smpmsg = SM . step1 ( smstate , combined_secret ) ; } else { smpmsg = SM . step2b ( smstate , combined_secret ) ; } } catch ( SMException ex ) { throw new OtrException ( ex ) ; } if ( question != null ) { bytes = question . getBytes ( SerializationUtils . UTF8 ) ; $F96 qsmpmsg = new byte [ bytes . length + NUM00 + smpmsg . length ] ; $F7057 ( System , bytes , qsmpmsg ) System . arraycopy ( smpmsg , NUM00 , qsmpmsg , bytes . length + NUM00 , smpmsg . length ) ; smpmsg = qsmpmsg ; } TLV sendtlv = new TLV ( initiating ? ( question != null ? TLV . SMP1Q : TLV . SMP1 ) : TLV . SMP2 , smpmsg ) ; smstate . nextExpected = initiating ? SM . EXPECT2 : SM . EXPECT3 ; return makeTlvList ( sendtlv ) ; }
private double melToLinFreq ( double inputFreq ) { return ( NUM00 * ( Math . pow ( NUM00 , ( inputFreq / NUM00 ) ) - NUM00 ) ) ; }
public RoundedIconGenerator ( int iconWidthPx , int iconHeightPx , int cornerRadiusPx , int backgroundColor , float textSizePx ) { mIconWidthPx = iconWidthPx ; mIconHeightPx = iconHeightPx ; mCornerRadiusPx = cornerRadiusPx ; mBackgroundRect = new RectF ( NUM00 , NUM00 , mIconWidthPx , mIconHeightPx ) ; mBackgroundPaint = new Paint ( Paint . ANTI_ALIAS_FLAG ) ; mBackgroundPaint . setColor ( backgroundColor ) ; mTextPaint = new TextPaint ( Paint . ANTI_ALIAS_FLAG ) ; mTextPaint . setColor ( Color . WHITE ) ; mTextPaint . setFakeBoldText ( _BOOL ) ; mTextPaint . setTextSize ( textSizePx ) ; $F319 ( textFontMetrics , mTextPaint ) mTextHeight = ( float ) Math . ceil ( textFontMetrics . bottom - textFontMetrics . top ) ; mTextYOffset = - textFontMetrics . top ; }
public static $F96 randomBytes ( int size ) { $F2175 ( bytes , size ) seededRandom . nextBytes ( bytes ) ; return bytes ; }
$F1 public String toString $F72 { $F280 ( BfString ) $F84 ( BfString ) if ( m_starting != null ) { $F84 ( BfString ) $F16690 ( BfString , startSetToString ) $F84 ( BfString ) } if ( m_threshold != - Double . MAX_VALUE ) { BfString . append ( NUM00 + Utils . doubleToString ( m_threshold , NUM00 , NUM00 ) + NUM00 ) ; } $F92 ( BfString ) }
protected void arraycopy $F24576 ( buf , pos , length ) { mMessage . write ( buf , pos , length ) ; mPosition = mPosition + length ; }
public boolean expired $F72 { return System . currentTimeMillis ( ) - time > DFLT_EXPIRATION_TIMEOUT ; }
public JSONObject put ( String key , boolean value ) throws JSONException { put ( key , value ? Boolean . TRUE : Boolean . FALSE ) ; return this ; }
$F13735 ( prefix , namespace , attName , attValue , xmlWriter )
private void handleSelection ( View view , Item item , int position ) { if ( ! item . isSelectable ( ) ) $F932 if ( item . isSelected ( ) && ! mAllowDeselection ) $F932 boolean selected = _BOOL ; if ( mPositionBasedStateManagement ) { selected = mSelections . contains ( position ) ; } else { selected = item . isSelected ( ) ; } if ( mSelectWithItemUpdate || view == null ) { $F14406 ( mMultiSelect , deselect ) if ( selected ) { deselect ( position ) ; } else { select ( position ) ; } } else { if ( ! mMultiSelect ) { if ( mPositionBasedStateManagement ) { $F116323 ( entries , mSelections ) while $F2921 ( entries ) { Integer pos = entries . next ( ) ; if ( pos != position ) { deselect ( pos , entries ) ; } } } else { $F11868 selections = getSelections ( ) ; for ( int pos : selections ) { if ( pos != position ) { deselect ( pos ) ; } } } } item . withSetSelected ( ! selected ) ; view . setSelected ( ! selected ) ; if ( mSelectionListener != null ) mSelectionListener . onSelectionChanged ( item , ! selected ) ; if ( mPositionBasedStateManagement ) { if ( selected ) { $F80306 ( mSelections , position ) } else $F207 ( mSelections , position ) } } }
public boolean canInvoke ( MDepreciationWorkfile assetwk , MAssetAcct assetAcct , int A_Current_Period , BigDecimal Accum_Dep ) { if ( assetwk == null ) $F433305 ( log , _BOOL ) int offset = NUM00 ; int lifePeriods = assetwk . getUseLifeMonths ( assetwk . isFiscal ( ) ) ; boolean ok = ( offset <= A_Current_Period ) ; if ( CLogMgt . isLevelFinest ( ) ) log . finest ( NUM00 + A_Current_Period + NUM00 + lifePeriods + NUM00 + offset + NUM00 + ok ) ; return ok ; }
$F99425 ( os , writeInt , CACHE_MAGIC , writeString , key , etag , writeLong , serverDate , lastModified , ttl , softTtl , writeStringStringMap , responseHeaders , _BOOL , VolleyLog , e )
public $F96 bytes $F72 throws HttpRequestException { final ByteArrayOutputStream output = byteStream ( ) ; try $F359906 ( copy , buffer , output ) $F189262 ( e ) $F11316 ( output ) }
public void fadeOutAllLayers $F72 { mTransitionState = TRANSITION_STARTING ; Arrays . fill ( mIsLayerOn , _BOOL ) ; invalidateSelf ( ) ; }
public TreeMap < Float , $F197452 > packModifiedFirstFitDescending $F72 $F39976
public void addTextChangeListener ( final FilterQueryChangeListener textChangeListener ) $F207 ( listeners , textChangeListener )
$F1 public Iterator < Profile > iterator $F72 $F16048 ( profiles )
private boolean startsWithSpace ( String str ) { return $F35624 ( str ) && $F4431 ( str ) ; }
$F16698 ( path , uriPrefix )
private int keyToLevel ( String key ) { $F6542 ( token , key ) return $F33765 ( token ) ; }
public boolean mouseDragged ( MouseEvent e ) { if ( grabbed_plot_graphics_ ) { $F121945 ( x , e ) $F55855 ( y , e ) int dx = x - prevX ; int dy = y - prevY ; plotX += dx ; plotY += dy ; prevX = x ; prevY = y ; graph . resize ( plotX , plotY , plotWidth , plotHeight ) ; OMGraphicList plotGraphics = graph . getPlotGraphics ( ) ; plotGraphics . generate ( getProjection ( ) , _BOOL ) ; repaint ( ) ; } return _BOOL ; }
private void initCachingHttpHeadersFilter ( ServletContext servletContext , EnumSet < DispatcherType > disps ) { $F980 ( log ) FilterRegistration . Dynamic cachingHttpHeadersFilter = servletContext . addFilter ( NUM00 , new CachingHttpHeadersFilter ( jHipsterProperties ) ) ; cachingHttpHeadersFilter . addMappingForUrlPatterns ( disps , _BOOL , NUM00 ) ; cachingHttpHeadersFilter . addMappingForUrlPatterns ( disps , _BOOL , NUM00 ) ; cachingHttpHeadersFilter . setAsyncSupported ( _BOOL ) ; }
protected void addCommonComponent ( XMLComponent component ) $F42353 ( fCommonComponents , component , addRecognizedParamsAndSetDefaults )
SNode awaitFulfill ( SNode s , boolean timed , long nanos ) { $F74107 ( deadline , timed , System , nanos ) $F686 ( w , Thread ) int spins = ( shouldSpin ( s ) ? ( timed ? maxTimedSpins : maxUntimedSpins ) : NUM00 ) ; for ( $F589 ) { if $F84922 ( w ) s . tryCancel ( ) ; SNode m = s . match ; $F60730 ( m ) if ( timed ) { $F27353 ( nanos , deadline , System ) if ( nanos <= NUM00 ) { s . tryCancel ( ) ; $F598 } } if ( spins > NUM00 ) spins = shouldSpin ( s ) ? ( spins - NUM00 ) : NUM00 ; else if $F74129 ( s ) s . waiter = w ; else if ( ! timed ) LockSupport . park ( this ) ; else if ( nanos > spinForTimeoutThreshold ) LockSupport . parkNanos ( this , nanos ) ; } }
public void load ( GeneralSubtrees generalSubtrees ) { List < GeneralSubtree > generalSubtreesList = generalSubtrees . getGeneralSubtrees ( ) ; Collections . sort ( generalSubtreesList , new GeneralSubtreeBaseComparator $F72 ) ; data = new Object [ generalSubtreesList . size ( ) ] [ NUM00 ] ; int i = NUM00 ; for ( GeneralSubtree generalSubtree : generalSubtreesList ) { data [ i ] [ NUM00 ] = generalSubtree ; data [ i ] [ NUM00 ] = generalSubtree ; data [ i ] [ NUM00 ] = generalSubtree ; i ++ ; } fireTableDataChanged ( ) ; }
$F1 public synchronized int read $F72 { return pos < count ? buffer . charAt ( pos ++ ) & NUM00 : - NUM00 ; }
public boolean isPingDisabled $F72 { return ( null != healthcheck && $F1905 ( healthcheck ) ) ; }
public static void writeToFile ( File file , String contents ) throws IOException { $F4649 ( fos , file ) $F60813 ( fos , contents ) $F59 ( fos ) }
public void makeTreeOfWritables ( Iterable < $F54234 > flatData ) { Text key = new Text $F72 ; for ( $F54234 pair : flatData ) { key . set ( pair . key ) ; ArrayList < IntWritable > valList ; if $F15257 ( mockInput , key ) { $F9404 ( valList ) mockInput . put ( key , valList ) ; key = new Text $F72 ; } else valList = ( ArrayList < IntWritable > ) mockInput . get ( key ) ; valList . add ( new IntWritable ( pair . value ( ) ) ) ; } }
public static double angle ( Coordinate p0 , Coordinate p1 ) { $F25547 ( dx , p1 , p0 ) $F25549 ( dy , p1 , p0 ) $F31795 ( Math , dy , dx ) }
public InMemoryCursor $F4374 ( columnNames ) { mCurrentPosition = - NUM00 ; mColumnNames = columnNames ; }
$F1 public boolean isEnabled $F72 { if ( ( attributeSelectionPanel != null ) && ! isValueOnly ( ) ) $F68134 ( attributeSelectionPanel ) else { $F68135 ( slider ) } return _BOOL ; }
private void renderForeground ( final ExecutionUnit process , final Graphics2D g2 , boolean printing ) { if ( drawHighlight && ! printing && ( model . isDragStarted ( ) || model . isDropTargetSet ( ) && model . isImportDragged ( ) ) || model . isOperatorSourceHovered ( ) ) { switch ( RapidMinerGUI . getDragHighlighteMode ( ) ) { case FULL : case BORDER : drawDragBorder ( process , g2 ) ; $F597 case NONE : $F1267 $F597 } } }
public ModbusTransaction createTransaction $F72 { ModbusSerialTransaction transaction = new ModbusSerialTransaction $F72 ; transaction . setTransport ( this ) ; return transaction ; }
public void start $F72 { if ( runner == null ) { $F40963 ( runner , this ) ; $F2346 ( runner ) } }
public synchronized int exportObject ( String name , Object obj ) throws CannotCompileException { $F121108 ( clazz , obj ) ExportedObject eo = new ExportedObject $F72 ; eo . object = obj ; eo . methods = clazz . getMethods ( ) ; exportedObjects . addElement ( eo ) ; eo . identifier = $F2281 ( exportedObjects ) ; if ( name != null ) exportedNames . put ( name , eo ) ; try { stubGen . makeProxyClass ( clazz ) ; } catch ( NotFoundException e ) { throw new CannotCompileException ( e ) ; } return eo . identifier ; }
protected final File createDBFFDCDirectory $F72 { $F1705 ( dbffdcDir , ffdcDirectoryName ) if $F1906 ( dbffdcDir ) { final boolean isDBFFDcDirCreated = dbffdcDir . mkdirs ( ) ; if ( isDBFFDcDirCreated ) { $F24661 ( dbffdcDir , ffdcDirectoryName ) return dbffdcDir ; } } else if $F4926 ( dbffdcDir ) $F1337 return dbffdcDir ; }
public static String readCharacterSizedString ( InputStream stream ) throws IOException { $F83 ( result ) int strLen = readUINT16 ( stream ) ; $F7468 ( character , stream ) character |= stream . read ( ) < < NUM00 ; do { if ( character != NUM00 ) { $F36813 ( result , character ) $F10201 ( character , stream ) character |= stream . read ( ) < < NUM00 ; } } while ( character != NUM00 || $F1286 ( result ) > strLen ) ; if ( strLen != $F1286 ( result ) ) $F4639 $F92 ( result ) }
protected void processChildren ( QueryNode queryTree ) throws QueryNodeException { List < QueryNode > children = queryTree . getChildren ( ) ; ChildrenList newChildren ; if $F8841 ( children ) { newChildren = allocateChildrenList ( ) ; try { for ( QueryNode child : children ) { child = processIteration ( child ) ; $F18045 ( child ) newChildren . add ( child ) ; } List < QueryNode > orderedChildrenList = setChildrenOrder ( newChildren ) ; queryTree . set ( orderedChildrenList ) ; } finally { newChildren . beingUsed = _BOOL ; } } }
private void initializeMessages $F24643 ( messages ) { messages . addAll ( Arrays . asList ( TipOfTheDayMessages . getGeneralMessages ( ) ) ) ; if ( OSUtils . isWindows ( ) ) { messages . addAll ( Arrays . asList ( TipOfTheDayMessages . getWindowsMessages ( ) ) ) ; } else if ( OSUtils . isMacOSX ( ) ) { messages . addAll ( Arrays . asList ( TipOfTheDayMessages . getMacOSXMessages ( ) ) ) ; } else if ( OSUtils . isLinux ( ) ) { messages . addAll ( Arrays . asList ( TipOfTheDayMessages . getLinuxMessages ( ) ) ) ; } else { messages . addAll ( Arrays . asList ( TipOfTheDayMessages . getOtherMessages ( ) ) ) ; } if ( ! OSUtils . isMacOSX ( ) ) { messages . addAll ( Arrays . asList ( TipOfTheDayMessages . getNonMacOSXMessages ( ) ) ) ; } messages . addAll ( Arrays . asList ( TipOfTheDayMessages . getFrostWireMessages ( ) ) ) ; Collections . shuffle ( messages ) ; _currentTip = - NUM00 ; }
public PersistedQueue ( final File queueEnvPath , final String queueName , final int cacheSize ) { $F1907 ( queueEnvPath ) final EnvironmentConfig dbEnvConfig = new EnvironmentConfig $F72 ; dbEnvConfig . setTransactional ( _BOOL ) ; dbEnvConfig . setAllowCreate ( _BOOL ) ; this . dbEnv = new Environment ( queueEnvPath , dbEnvConfig ) ; DatabaseConfig dbConfig = new DatabaseConfig $F72 ; dbConfig . setTransactional ( _BOOL ) ; dbConfig . setAllowCreate ( _BOOL ) ; dbConfig . setDeferredWrite ( _BOOL ) ; this . queueDatabase = dbEnv . openDatabase ( null , queueName , dbConfig ) ; this . queueName = queueName ; this . cacheSize = cacheSize ; this . opsCounter = NUM00 ; }
protected final StringBuilder write ( StringBuilder sb , final Object ... objects ) { for ( Object string : objects ) sb . append ( string ) ; return sb ; }
$F6802 ( esd , connectionAllowed )
public static Request newPostOpenGraphActionRequest ( Session session , OpenGraphAction openGraphAction , Callback callback ) { if ( openGraphAction == null ) { throw new FacebookException $F580 ; } if ( Utility . isNullOrEmpty ( openGraphAction . getType ( ) ) ) { throw new FacebookException $F580 ; } String path = String . format ( MY_ACTION_FORMAT , openGraphAction . getType ( ) ) ; return newPostRequest ( session , path , openGraphAction , callback ) ; }
public void showLoading $F72 { switchState ( LOADING , null , null , null , null , null , $F9641 ( Collections ) ) ; }
public void readExternal ( ObjectInput in ) throws $F6427 { $F5952 ( vocabSize , in ) for ( $F119 ( i , vocabSize ) ) { $F1540 ( line , in ) Vocabulary . id ( line ) ; } $F216839 ( numTokens , in ) countFuncs = new long [ in . readInt ( ) ] [ NUM00 ] ; for ( $F1139 ( i , countFuncs ) ) { countFuncs [ i ] [ NUM00 ] = in . readLong ( ) ; countFuncs [ i ] [ NUM00 ] = in . readLong ( ) ; } typesFuncs = new long [ in . readInt ( ) ] [ NUM00 ] ; for ( $F1139 ( i , typesFuncs ) ) { typesFuncs [ i ] [ NUM00 ] = in . readLong ( ) ; typesFuncs [ i ] [ NUM00 ] = in . readLong ( ) ; } $F216839 ( quantizationBase , in ) bf = new BloomFilter $F72 ; bf . readExternal ( in ) ; }
public static double computeMAD $F280936 ( x , median ) { for ( $F1139 ( i , x ) ) { x [ i ] = Math . abs ( x [ i ] - median ) ; } double mad = QuickSelect . median ( x ) ; if $F102905 ( mad ) { double min = Double . POSITIVE_INFINITY ; for ( double xi : x ) { if ( xi > NUM00 && xi < min ) { min = xi ; } } if ( min < Double . POSITIVE_INFINITY ) { mad = min ; } else { mad = NUM00 ; } } if ( mad == Double . POSITIVE_INFINITY ) { double max = NUM00 ; for ( double xi : x ) { if ( xi < Double . POSITIVE_INFINITY && xi > max ) { max = xi ; } } if ( max < Double . POSITIVE_INFINITY ) { mad = max ; } else { mad = NUM00 ; } } return mad ; }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
public SdpException ( Throwable rootCause ) { super ( rootCause . getLocalizedMessage ( ) ) ; }
$F65837 ( node , count , capacity , _BOOL , f , first , last , notEmpty )
protected void notifyPropertyChangeListener $F109214 ( property , oldValue , newValue ) { Set $F39994 v ; synchronized ( this ) { $F28907 ( v , listeners ) ; } for ( PropertyChangeListener listener : v ) { listener . propertyChange ( new PropertyChangeEvent ( this , property , oldValue , newValue ) ) ; } }
public boolean indicateDirtyRead ( ITemplateHolder template ) { return ( ( template . isReadOperation ( ) && _useDirtyRead ) || template . isDirtyReadRequested ( ) ) ; }
public JValueSlider $F21324 ( title , min , max , value ) { this ( title , new Integer ( min ) , new Integer ( max ) , new Integer ( value ) ) ; m_smin = min ; m_srange = max - min ; m_slider . setMinimum ( min ) ; m_slider . setMaximum ( max ) ; setValue ( new Integer ( value ) ) ; }
protected void applyAttributesToSymbol ( TacticalGraphicAttributes graphicAttributes , TacticalSymbolAttributes symbolAttributes ) { Double value = graphicAttributes . getInteriorOpacity ( ) ; if ( value != null ) { symbolAttributes . setOpacity ( value ) ; } value = graphicAttributes . getScale ( ) ; if ( value != null ) { symbolAttributes . setScale ( value ) ; } Material material = graphicAttributes . getInteriorMaterial ( ) ; symbolAttributes . setInteriorMaterial ( material ) ; Font font = graphicAttributes . getTextModifierFont ( ) ; if ( font != null ) { symbolAttributes . setTextModifierFont ( font ) ; } material = graphicAttributes . getTextModifierMaterial ( ) ; if ( material != null ) { symbolAttributes . setTextModifierMaterial ( material ) ; } }
public final void increaseIdleCount ( IdleStatus status , long currentTime ) { if ( status == IdleStatus . BOTH_IDLE ) { $F5224 ( idleCountForBoth ) lastIdleTimeForBoth = currentTime ; } else if ( status == IdleStatus . READER_IDLE ) { $F5224 ( idleCountForRead ) lastIdleTimeForRead = currentTime ; } else if ( status == IdleStatus . WRITER_IDLE ) { $F5224 ( idleCountForWrite ) lastIdleTimeForWrite = currentTime ; } else $F18931 ( status ) }
public RemoteServiceDescriptor ( String baseUrl , HttpJsonRequestFactory requestFactory ) throws IllegalArgumentException { this . baseUrl = baseUrl ; this . requestFactory = requestFactory ; try { $F23801 ( baseUrlURL , baseUrl ) final String protocol = baseUrlURL . getProtocol ( ) ; if ( ! $F40270 ( protocol ) ) $F74022 ( String , baseUrl ) } catch ( MalformedURLException e ) $F74022 ( String , baseUrl ) }
private Journal readJournal ( ParcelFileDescriptor oldState ) { Journal journal = new Journal $F72 ; $F1933 ( oldState , journal ) FileInputStream inStream = new FileInputStream $F122976 ( oldState ) ; try { $F89380 ( availableBytes , inStream ) $F12259 ( DEBUG , Log , TAG , availableBytes ) if ( availableBytes < MAX_JOURNAL_SIZE ) { $F2175 ( buffer , availableBytes ) int bytesRead = NUM00 ; boolean valid = _BOOL ; InvalidProtocolBufferNanoException lastProtoException = null ; while ( availableBytes > NUM00 ) { try { int result = inStream . read ( buffer , bytesRead , NUM00 ) ; if ( result > NUM00 ) { availableBytes -= result ; bytesRead += result ; } else { $F6173 ( Log , TAG ) availableBytes = NUM00 ; } } catch ( IOException e ) $F32833 ( buffer , availableBytes ) try { $F122989 ( MessageNano , journal , readCheckedBytes , buffer , bytesRead ) valid = _BOOL ; availableBytes = NUM00 ; $F27752 ( VERBOSE , Log , TAG , bytesRead ) } catch ( InvalidProtocolBufferNanoException e ) { lastProtoException = e ; $F725 ( journal ) } } $F12259 ( DEBUG , Log , TAG , bytesRead ) if ( ! valid ) $F100667 ( Log , TAG , lastProtoException ) } } $F122999 ( Log , TAG , e ) return journal ; }
public Server start $F72 throws SQLException { try { started = _BOOL ; $F2346 ( service ) String name = $F43113 ( service ) + service . getURL ( ) + NUM00 ; Thread t = new Thread ( this , name ) ; t . setDaemon ( service . isDaemon ( ) ) ; $F2346 ( t ) for ( int i = NUM00 ; i < NUM00 ; i += i ) { wait ( i ) ; $F46660 ( isRunning , _BOOL , this ) } $F46660 ( isRunning , _BOOL , this ) throw DbException . get ( ErrorCode . EXCEPTION_OPENING_PORT_2 , name , NUM00 + NUM00 ) ; } catch ( DbException e ) { throw DbException . toSQLException ( e ) ; } }
$F1 public boolean isComplete $F72 { return _BOOL ; }
public ByteMatrix encode ( String contents , int width , int height , Map < EncodeHintType , Object > hints ) throws WriterException { $F20313 ( contents ) if ( width < NUM00 || height < NUM00 ) $F20855 ( width , height ) ErrorCorrectionLevel errorCorrectionLevel = ErrorCorrectionLevel . L ; if ( hints != null ) { ErrorCorrectionLevel requestedECLevel = ( ErrorCorrectionLevel ) hints . get ( EncodeHintType . ERROR_CORRECTION ) ; $F57733 ( requestedECLevel , errorCorrectionLevel ) } QRCode code = new QRCode $F72 ; Encoder . encode ( contents , errorCorrectionLevel , hints , code ) ; return renderResult ( code , width , height ) ; }
public IntBuffer put $F74721 ( src , srcOffset , intCount ) { $F74722 ( isReadOnly ) $F11673 ( Arrays , src , srcOffset , intCount ) if ( intCount > remaining ( ) ) { throw new BufferOverflowException $F72 ; } for ( int i = srcOffset ; i < srcOffset + intCount ; ++ i ) $F11680 ( put , src , i ) return this ; }
public Request header ( String key , String value ) { Objects . requireNonNull ( key ) ; Objects . requireNonNull ( value ) ; _headers . put ( key , value ) ; return this ; }
public void updateUI $F72 { $F125777 ( super ) setBackground ( $F381381 ) ; setWrapStyleWord ( _BOOL ) ; setHighlighter ( null ) ; setEditable ( _BOOL ) ; LookAndFeel . installBorder ( this , NUM00 ) ; LookAndFeel . installColorsAndFont ( this , NUM00 , NUM00 , NUM00 ) ; if ( resizeHandler != null ) { resizeHandler . componentResized ( null ) ; } SizePolicy policy = ( SizePolicy ) getClientProperty ( SizePolicy . class ) ; if ( policy != null ) { GUIUtils . restrictSize ( this , policy ) ; } }
public static void generateExtensionManager ( File rootFolder ) throws IOException { $F4453 ( outFile , rootFolder , REGISTRY_PATH ) $F83 ( builder ) $F84 ( builder ) generateImports ( builder ) ; generateClass ( builder ) ; FileUtils . writeStringToFile ( outFile , builder . toString ( ) ) ; }
public synchronized Future $F2193 submit ( $F56328 task ) throws RejectedExecutionException { return pool . submit ( task ) ; }
private void checkBucketName ( String name ) throws InvalidBucketNameException { if ( name == null ) { throw new InvalidBucketNameException ( NULL_ <missing ';'> NUM00 , $F50952 } if ( $F3598 ( name ) || $F20 ( name ) ) { String msg = NUM00 ; throw new InvalidBucketNameException ( name , msg ) ; } if $F11809 ( name ) { String msg = NUM00 + NUM00 ; throw new InvalidBucketNameException ( name , msg ) ; } if $F48318 ( name ) { String msg = NUM00 + NUM00 ; throw new InvalidBucketNameException ( name , msg ) ; } }
private void validateUserNamespaceAuthorizationCreateRequest ( UserNamespaceAuthorizationCreateRequest request ) { $F18062 ( Assert , request ) validateUserNamespaceAuthorizationKey ( request . getUserNamespaceAuthorizationKey ( ) ) ; validateNamespacePermissions ( request . getNamespacePermissions ( ) ) ; }
protected String format ( Object o ) $F2495 ( o )
public void calculateDerived $F72 { xStats . calculateDerived ( ) ; yStats . calculateDerived ( ) ; differencesStats . calculateDerived ( ) ; correlation = Double . NaN ; if ( ! Double . isNaN ( xStats . stdDev ) && ! Double . isNaN ( yStats . stdDev ) && ! Utils . eq ( xStats . stdDev , NUM00 ) ) { double slope = ( xySum - xStats . sum * yStats . sum / count ) / ( xStats . sumSq - xStats . sum * xStats . mean ) ; if ( ! Utils . eq ( yStats . stdDev , NUM00 ) ) { correlation = slope * xStats . stdDev / yStats . stdDev ; } else { correlation = NUM00 ; } } if ( Utils . gr ( differencesStats . stdDev , NUM00 ) ) { double tval = differencesStats . mean * Math . sqrt ( count ) / differencesStats . stdDev ; if ( m_degreesOfFreedom >= NUM00 ) { differencesProbability = Statistics . FProbability ( tval * tval , NUM00 , m_degreesOfFreedom ) ; } else { if ( count > NUM00 ) { differencesProbability = Statistics . FProbability ( tval * tval , NUM00 , ( int ) count - NUM00 ) ; } else { differencesProbability = NUM00 ; } } } else { if ( differencesStats . sumSq == NUM00 ) { differencesProbability = NUM00 ; } else { differencesProbability = NUM00 ; } } differencesSignificance = NUM00 ; if ( differencesProbability <= sigLevel ) { if ( xStats . mean > yStats . mean ) { differencesSignificance = NUM00 ; } else $F44867 ( differencesSignificance ) } }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
protected boolean canDeleteConsistencyGroup ( final BlockConsistencyGroup consistencyGroup ) { return ( ! consistencyGroup . getInactive ( ) && ! consistencyGroup . created ( ) ) ; }
$F141880 ( closeable , rethrown )
public AmqpMessage receiveNoWait $F72 throws Exception { checkClosed ( ) ; return prefetch . poll ( ) ; }
$F1 protected void removeRange ( int start , int end ) { if ( start < NUM00 ) { throw new IndexOutOfBoundsException ( NUM00 + start ) ; } else if ( end > size ) $F73737 ( end , size ) else if ( start > end ) $F73737 ( start , end ) $F19899 ( start , end ) if ( end == size ) { Arrays . fill ( array , firstIndex + start , firstIndex + size , null ) ; } else if ( start == NUM00 ) { Arrays . fill ( array , firstIndex , firstIndex + end , null ) ; firstIndex += end ; } else { System . arraycopy ( array , firstIndex + end , array , firstIndex + start , size - end ) ; int lastIndex = firstIndex + size ; int newLast = lastIndex + start - end ; Arrays . fill ( array , newLast , lastIndex , null ) ; } size -= end - start ; modCount ++ ; }
private boolean zzRefill $F72 throws $F3258 { $F72981 ( zzStartRead , System , zzBuffer , zzEndRead , zzCurrentPos , zzMarkedPos , zzPushbackPos ) if ( zzCurrentPos >= zzBuffer . length ) { final char newBuffer [ ] = new char [ zzCurrentPos * NUM00 ] ; $F7057 ( System , zzBuffer , newBuffer ) zzBuffer = newBuffer ; } final int numRead = zzReader . read ( zzBuffer , zzEndRead , zzBuffer . length - zzEndRead ) ; $F72989 ( numRead , _BOOL , zzEndRead ) }
private void checkDuplicateNamesDuringDelete $F149310 ( ids ) { ArrayList $F37552 myEntities = game . getPlayerEntities ( game . getPlayer ( localPlayerNumber ) , _BOOL ) ; Hashtable < String , $F15272 > rawNameToId = new Hashtable < String , $F15272 > ( ( int ) $F98338 ( myEntities ) ) ; for ( Entity e : myEntities ) { String rawName = e . getShortNameRaw ( ) ; $F15272 namedIds = rawNameToId . get ( rawName ) ; if ( namedIds == null ) { $F117818 ( namedIds ) } $F42096 ( namedIds , e ) rawNameToId . put ( rawName , namedIds ) ; } for ( int id : ids ) { Entity removedEntity = game . getEntity ( id ) ; $F4322 ( removedEntity ) String removedRawName = removedEntity . getShortNameRaw ( ) ; Integer count = duplicateNameHash . get ( removedEntity . getShortNameRaw ( ) ) ; if ( ( count != null ) && ( count > NUM00 ) ) { $F15272 namedIds = rawNameToId . get ( removedRawName ) ; for ( Integer i : namedIds ) { Entity e = game . getEntity ( i ) ; String eRawName = e . getShortNameRaw ( ) ; if ( eRawName . equals ( removedRawName ) && ( e . duplicateMarker > removedEntity . duplicateMarker ) ) { e . duplicateMarker -- ; e . generateShortName ( ) ; e . generateDisplayName ( ) ; if ( ! $F60437 ( ids , e ) ) { sendUpdateEntity ( e ) ; } } } duplicateNameHash . put ( removedEntity . getShortNameRaw ( ) , new Integer ( count - NUM00 ) ) ; } else if ( count != null ) { duplicateNameHash . remove ( removedEntity . getShortNameRaw ( ) ) ; } } }
protected void stopBKCluster $F72 throws Exception { $F2727 ( bkc ) for ( BookieServer server : bs ) { $F733 ( server ) AutoRecoveryMain autoRecovery = autoRecoveryProcesses . get ( server ) ; if ( autoRecovery != null && isAutoRecoveryEnabled ( ) ) { $F733 ( autoRecovery ) LOG . debug ( NUM00 + server . getLocalAddress ( ) ) ; } } $F725 ( bs ) for ( File f : tmpDirs ) { FileUtils . deleteDirectory ( f ) ; } }
$F1322 ( criteria , oredCriteria )
public void releaseSelections ( Set $F37552 items ) { for ( Entity item : items ) { releaseSelection ( item ) ; } }
public HubLinkMapping ( String fileName , int numberOfHubs , Network network ) { this . numberOfHubs = numberOfHubs ; if $F3578 ( fileName ) { readMappingTable ( fileName ) ; unMappedLinksAtZeroHub = _BOOL ; $F665 } handleUnmappedLinksStart ( ) ; try { $F35542 ( fr , fileName ) $F20481 ( br , fr ) String line ; StringTokenizer tokenizer ; String token ; int linkId ; $F36243 ( line , br ) while ( line != null ) { tokenizer = new StringTokenizer ( line ) ; for ( int i = NUM00 ; i < this . numberOfHubs ; i ++ ) { $F39710 ( token , tokenizer ) linkId = ( int ) Double . parseDouble ( token ) ; linkHubMapping . put ( Integer . toString ( linkId ) , i ) ; } if $F14498 ( tokenizer ) $F11389 $F36243 ( line , br ) } } $F41337 ( e ) catch ( Exception e ) $F11389 $F36382 ( linkHubMapping ) handleUnmappedLinksEnd ( network ) ; }
public boolean deleteLoadName ( String load ) { $F92359 ( _loadList , load , _BOOL ) _loadList . remove ( load ) ; log . debug ( NUM00 + getName ( ) + NUM00 + load ) ; setDirtyAndFirePropertyChange ( LOADS_CHANGED_PROPERTY , $F2958 ( _loadList ) , _loadList . size ( ) ) ; return _BOOL ; }
private ComputeState validateComputeName ( String awsId , String vmName ) throws Throwable { if ( this . isAwsClientMock ) $F1337 ComputeState computeState = getComputeByAWSId ( this . host , awsId ) ; String tagNameValue = computeState . name ; assertNotNull ( NUM00 , tagNameValue ) ; assertEquals ( vmName , tagNameValue ) ; return computeState ; }
public static String fromTag ( IntArrayTag tag ) { $F83 ( builder ) builder . append ( ARRAY_START ) ; boolean start = _BOOL ; for ( int value : tag . getValue ( ) ) { IntTag i = new IntTag ( value ) ; $F11657 ( start , _BOOL , builder , ELEMENT_SEPERATOR ) $F6407 ( builder , fromTag , i ) } builder . append ( ARRAY_END ) ; $F92 ( builder ) }
public static int removeArgsAndReturnInsertionIndex ( $F3803 args , int argIndex , boolean tryRemovingArgValue ) { if $F55119 ( argIndex , args ) $F1083 if ( tryRemovingArgValue ) { String argValue = getArgValue ( args , argIndex + NUM00 ) ; if ( argValue != null ) { args . remove ( argIndex + NUM00 ) ; } } args . remove ( argIndex ) ; return argIndex ; }
void replacePolicyInResourceTree ( ServiceTypeManager svtm , SSOToken token , Policy oldPolicy , Policy newPolicy ) throws PolicyException , SSOException { removePolicyFromResourceTree ( svtm , token , oldPolicy ) ; addPolicyToResourceTree ( svtm , token , newPolicy ) ; }
public AtomicDoubleArray ( int length ) { larray = new AtomicLongArray ( length ) ; long ZERO = Double . doubleToRawLongBits ( NUM00 ) ; for ( $F119 ( i , length ) ) larray . set ( i , ZERO ) ; }
private void copyAction ( File srcFile , File destFile ) throws $F27136 { $F4647 ( istream , srcFile ) $F4649 ( ostream , destFile ) $F27404 ( input , istream ) $F27404 ( output , ostream ) try { input . transferTo ( NUM00 , input . size ( ) , output ) ; } finally { $F59 ( istream ) $F59 ( ostream ) $F59 ( input ) $F59 ( output ) } }
private void recomputeSeperation ( $F28974 ( means ) , $F28974 ( cdist ) , LongStatistic diststat ) { $F18832 ( k , means ) for ( $F119 ( i , k ) ) { $F80292 ( mi , DoubleVector , means , i ) for ( $F119 ( j , i ) ) { cdist [ i ] [ j ] = cdist [ j ] [ i ] = distanceFunction . distance ( mi , DoubleVector . wrap ( means [ j ] ) ) ; } } if ( diststat != null ) { diststat . increment ( ( k * ( k - NUM00 ) ) > > NUM00 ) ; } }
private static BufferedImage makeSquare ( BufferedImage input ) { if ( input . getHeight ( ) == input . getWidth ( ) ) { return input ; } else { int max = Math . max ( input . getHeight ( ) , input . getWidth ( ) ) ; int dx = ( max - input . getWidth ( ) ) / NUM00 ; int dy = ( max - input . getHeight ( ) ) / NUM00 ; return createImg ( max , max , input . getType ( ) , null ) ; } }
protected abstract void handleLostEntry ( HttpRoute route ) ;
public void writeStartElement ( String localName ) throws XMLStreamException { if $F6036 ( localName ) { throw new XMLStreamException $F580 ; } _state = STATE_ELEMENT ; if ( _currentEle != null && _currentEle . getState ( ) == ELEMENT_STARTTAG_OPEN ) $F5795 ( closeStartTag ) _currentEle = new Element ( _currentEle , localName , _BOOL ) ; openStartTag ( ) ; _writer . write ( localName ) ; }
public void addProcessInteractionListener ( final ProcessInteractionListener l ) $F41100 ( l , processInteractionListeners )
private void traverseInternal ( Object root , boolean yieldRoot , IdentityHashMap $F75026 seen ) { if ( root == null || seen . containsKey ( root ) ) $F932 if ( yieldRoot ) { $F145568 ( visit , root ) } $F22747 ( seen , root ) if ( root instanceof JSONObject ) { $F49150 ( json , root ) $F50737 ( keys , json ) while $F2921 ( keys ) { $F13714 ( key , keys ) try { traverseInternal ( json . get ( key ) , _BOOL , seen ) ; } catch ( JSONException e ) $F9491 ( e ) } } else if ( root instanceof JSONArray ) { JSONArray array = ( JSONArray ) root ; for ( $F38840 ( i , array ) ) { try { traverseInternal ( array . get ( i ) , _BOOL , seen ) ; } catch ( JSONException e ) $F9491 ( e ) } } else if ( root instanceof Map ) { $F22331 map = ( $F22331 ) root ; for ( Object value : map . values ( ) ) { traverseInternal ( value , _BOOL , seen ) ; } } else if ( root instanceof List ) { $F33514 ( list , root ) for ( Object value : list ) { traverseInternal ( value , _BOOL , seen ) ; } } else if ( root instanceof ParseObject ) { if ( traverseParseObjects ) { ParseObject object = ( ParseObject ) root ; for ( $F3465 ( key , object ) ) { traverseInternal ( object . get ( key ) , _BOOL , seen ) ; } } } else if ( root instanceof ParseACL ) { ParseACL acl = ( ParseACL ) root ; ParseUser user = acl . getUnresolvedUser ( ) ; if ( user != null && user . isCurrentUser ( ) ) { traverseInternal ( user , _BOOL , seen ) ; } } }
public StrBuilder replaceFirst $F2236 ( searchStr , replaceStr ) { final int searchLen = ( searchStr == null ? NUM00 : searchStr . length ( ) ) ; if ( searchLen > NUM00 ) { final int index = indexOf ( searchStr , NUM00 ) ; if ( index >= NUM00 ) { final int replaceLen = ( replaceStr == null ? NUM00 : replaceStr . length ( ) ) ; replaceImpl ( index , index + searchLen , searchLen , replaceStr , replaceLen ) ; } } return this ; }
protected abstract void internalPut ( int index , byte b ) ;
public CommonTurnoutOperationConfig ( TurnoutOperation op ) { super ( op ) ; myOp = ( CommonTurnoutOperation ) op ; maxTriesSpinner = new JSpinner $F72 ; intervalSpinner = new JSpinner $F72 ; $F275999 ( vbox , Box ) Box hbox1 = Box . createHorizontalBox ( ) ; Box hbox2 = Box . createHorizontalBox ( ) ; vbox . add ( hbox2 ) ; vbox . add ( hbox1 ) ; vbox . add ( Box . createVerticalGlue ( ) ) ; hbox1 . add ( new JLabel $F253578 ( Bundle ) ) ; $F154816 ( hbox1 , Box ) $F167982 ( intervalSpinner ) intervalSpinner . setModel ( new SpinnerNumberModel ( myOp . getInterval ( ) , CommonTurnoutOperation . minInterval , CommonTurnoutOperation . maxInterval , CommonTurnoutOperation . intervalStepSize ) ) ; hbox1 . add ( intervalSpinner ) ; hbox2 . add ( new JLabel $F253578 ( Bundle ) ) ; $F154816 ( hbox2 , Box ) $F167982 ( maxTriesSpinner ) maxTriesSpinner . setModel ( new SpinnerNumberModel ( myOp . getMaxTries ( ) , CommonTurnoutOperation . minMaxTries , CommonTurnoutOperation . maxMaxTries , NUM00 ) ) ; hbox2 . add ( maxTriesSpinner ) ; Box hbox3 = Box . createHorizontalBox ( ) ; $F154814 ( hbox3 , Box ) vbox . add ( hbox3 ) ; add ( vbox ) ; }
public static String gensalt ( int log_rounds , SecureRandom random ) { $F102540 ( log_rounds ) $F83 ( rs ) byte rnd [ ] = new byte [ BCRYPT_SALT_LEN ] ; random . nextBytes ( rnd ) ; $F84 ( rs ) $F2854 ( log_rounds , rs ) rs . append ( log_rounds ) ; $F84 ( rs ) encode_base64 ( rnd , rnd . length , rs ) ; $F92 ( rs ) }
protected void drawDescription ( Canvas c ) { if $F1264 ( mDescription ) { if ( mDescriptionPosition == null ) { c . drawText ( mDescription , getWidth ( ) - mViewPortHandler . offsetRight ( ) - NUM00 , getHeight ( ) - mViewPortHandler . offsetBottom ( ) - NUM00 , mDescPaint ) ; } else { c . drawText ( mDescription , mDescriptionPosition . x , mDescriptionPosition . y , mDescPaint ) ; } } }
long parseBytes ( String freeSpace , String path ) throws IOException { try { $F227249 ( bytes , Long , freeSpace ) if ( bytes < NUM00 ) { throw new IOException ( NUM00 + DF + NUM00 + NUM00 + path + NUM00 ) ; } return bytes ; } catch ( NumberFormatException ex ) { throw new IOExceptionWithCause ( NUM00 + DF + NUM00 + NUM00 + path + NUM00 , ex ) ; } }
public String findInterlanguageLink ( String lang ) { int start = $F242624 ( page , lang ) ; $F94834 ( start ) $F12712 ( end , page , start ) $F94834 ( end ) String link = page . substring ( start + NUM00 + lang . length ( ) , end ) ; if $F12703 ( link ) $F1337 if $F1277 ( link ) $F1274 return link ; }
private void updateActions ( final INaviAddressSpace addressSpace ) { m_loadAddressSpaceAction . setEnabled ( ! addressSpace . isLoaded ( ) ) ; }
public static $F4203 $F69963 from ( $F40799 ( source ) , int parallelism ) { return from ( source , parallelism , QueueSupplier . SMALL_BUFFER_SIZE , QueueSupplier . small ( ) ) ; }
private static void cleanDirectoryOnExit ( File directory ) throws IOException $F189472 ( directory , message , files , exception , file , forceDeleteOnExit , ioe )
private void addGumball ( float xPos , float yPos ) { Gumball gumball = new Gumball $F72 ; gumball . mXInitPos = xPos ; gumball . mYInitPos = yPos ; gumball . mSoundPoolId = UUID . randomUUID ( ) ; mSoundPoolId . put ( gumball . mSoundPoolId , _BOOL ) ; mGameView . addGumball ( gumball ) ; mSoundPool . play ( $F113059 ( mSoundBallDrop ) ) ; }
int put ( T segment , List $F11632 recycleBin ) { int count ; if ( lastCount == NUM00 ) { count = NUM00 ; lastCount = NUM00 ; last = segment ; } else if ( Objects . deepEquals ( last , segment ) ) { ++ lastCount ; count = NUM00 ; recycleBin . add ( segment ) ; } else { count = lastCount ; lastCount = NUM00 ; last = segment ; } return count ; }
$F61852 public void testDelete6 $F72 throws SQLException { DatabaseCreator . fillFKStrictTable ( conn ) ; statement . execute ( NUM00 + DatabaseCreator . FKSTRICT_TABLE + NUM00 + DatabaseCreator . PARENT_TABLE + NUM00 ) ; ResultSet r = statement . executeQuery ( NUM00 + DatabaseCreator . FKSTRICT_TABLE + NUM00 ) ; $F24630 ( r ) $F92911 ( assertEquals , r ) $F59 ( r ) }
public Channel chan ( final String topic , final JsonNode payload ) { LOG . log ( Level . FINE , NUM00 , $F40356 ( topic , payload ) ) ; final Channel channel = new Channel ( topic , payload , Socket . this ) ; $F9231 ( channels , channel ) return channel ; }
public PlaPointFloat change_size ( double p_new_size ) { if ( v_x == NUM00 && v_y == NUM00 ) { return this ; } $F25559 ( length , Math , v_x , v_y ) double new_x = ( v_x * p_new_size ) / length ; double new_y = ( v_y * p_new_size ) / length ; return new PlaPointFloat ( new_x , new_y ) ; }
int insert ( Row row , $F96 sourceBuffer , int sourceOffset , BlobOutputStream [ ] blobs ) { int rowHead = _rowHead ; int blobTail = _blobTail ; $F1749 ( rowLength , row ) rowHead -= rowLength ; if ( rowHead < blobTail ) $F7629 $F96 buffer = _buffer ; System . arraycopy ( sourceBuffer , sourceOffset , buffer , rowHead , rowLength ) ; buffer [ rowHead ] = ( byte ) ( ( buffer [ rowHead ] & ~ CODE_MASK ) | INSERT ) ; blobTail = row . insertBlobs ( buffer , rowHead , blobTail , blobs ) ; $F33287 ( blobTail ) setBlobTail ( blobTail ) ; rowHead ( rowHead ) ; validateBlock ( row ) ; return rowHead ; }
private void addDefaultUri $F72 throws IgniteSpiException { assert uriEncodedList != null ; URI uri ; try { uri = U . resolveWorkDirectory ( DFLT_DEPLOY_DIR , _BOOL ) . toURI ( ) ; } catch ( IgniteCheckedException e ) { throw new IgniteSpiException ( NUM00 , e ) ; } uriEncodedList . add ( uri ) ; }
protected void transfer ( String seqRange ) throws IOException { try { $F46662 ( rangePos , seqRange ) if ( rangePos == - NUM00 ) { transfer ( Long . parseLong ( seqRange ) ) ; } else { $F66071 ( start , seqRange , rangePos ) $F49882 ( end , seqRange , rangePos ) final long startIdx ; if $F1277 ( start ) { startIdx = NUM00 ; } else $F174805 ( startIdx , Long , start ) final long endIdx ; if $F1277 ( end ) { endIdx = mReader . numberSequences ( ) - NUM00 ; } else $F174805 ( endIdx , Long , end ) if ( startIdx > endIdx ) $F111291 ( seqRange ) for ( long i = startIdx ; i <= endIdx ; i ++ ) { transfer ( i ) ; } } } catch ( final NumberFormatException e ) { warnInvalidSequence ( seqRange ) ; } }
public static double distancePointLinePerpendicular ( Coordinate p , Coordinate A , Coordinate B ) { double len2 = $F27158 ( B , A ) * $F27158 ( B , A ) + $F27159 ( B , A ) * $F27159 ( B , A ) ; double s = ( $F27159 ( A , p ) * $F27158 ( B , A ) - $F27158 ( A , p ) * $F27159 ( B , A ) ) / len2 ; return Math . abs ( s ) * Math . sqrt ( len2 ) ; }
BigInteger copy $F72 { prepareJavaRepresentation ( ) ; $F4120 ( copyDigits , numberLength ) $F135 ( System , digits , copyDigits , numberLength ) return new BigInteger ( sign , numberLength , copyDigits ) ; }
$F21572 ( doc , elementList , nameNode , child , childData , load , _BOOL , assertEquals )
public String patchFixIds $F72 $F16566 ( properties )
public final void readFully $F97 ( b ) throws $F3258 { $F46502 ( readFully , b ) }
private void createGui $F72 { $F40881 ( outerNamePanel ) $F40871 ( outerNamePanel ) $F40881 ( namePanel ) $F40867 ( namePanel ) final JLabel nameLabel = new CHelpLabel ( NUM00 + NUM00 , new CNameHelp $F72 ) ; $F114439 ( nameLabel ) $F40893 ( namePanel , nameLabel , BorderLayout ) $F30063 ( namePanel , m_nameTextField , BorderLayout ) $F30063 ( outerNamePanel , namePanel , BorderLayout ) $F40881 ( outerDescriptionPanel ) $F40867 ( outerDescriptionPanel ) $F40881 ( descriptionPanel ) $F40871 ( descriptionPanel ) $F167982 ( descriptionPanel ) descriptionPanel . add ( new JScrollPane ( m_descriptionField ) ) ; $F30063 ( outerDescriptionPanel , descriptionPanel , BorderLayout ) $F40901 ( buttonPanel ) buttonPanel . add ( $F26679 ) ; $F40867 ( buttonPanel ) buttonPanel . add ( m_saveButton ) ; $F40881 ( topPanel ) $F58125 ( topPanel , outerNamePanel , BorderLayout ) $F30063 ( topPanel , outerDescriptionPanel , BorderLayout ) $F30069 ( topPanel , buttonPanel , BorderLayout ) $F40881 ( bottomPanel ) bottomPanel . setBorder ( m_tableBorder ) ; final JScrollPane scrollPane = new JScrollPane ( m_childrenTagTable ) ; $F30063 ( bottomPanel , scrollPane , BorderLayout ) final JSplitPane splitPane = new JSplitPane ( JSplitPane . VERTICAL_SPLIT , _BOOL , topPanel , bottomPanel ) ; splitPane . setOneTouchExpandable ( _BOOL ) ; splitPane . setDividerLocation ( splitPane . getMinimumDividerLocation ( ) ) ; $F242063 ( splitPane ) add ( splitPane ) ; }
public static boolean isJellybeanOrLater $F72 { return Build . VERSION . SDK_INT >= Build . VERSION_CODES . JELLY_BEAN ; }
public PartialCorrelationPdf ( int n , int k ) { this . n = n ; this . k = k ; double gammaRatio = gammaRatio ( n , k ) ; this . constant = ( NUM00 / Math . pow ( Math . PI , NUM00 ) ) * gammaRatio ; this . outsideExp = ( double ) ( n - k - NUM00 ) / NUM00 ; }
private static boolean isEnabled $F72 { if ( SystemUtils . IS_OS_WINDOWS ) { return _BOOL ; } try { $F3803 lines = CommandUtil . executeCommandAndGetLines ( Collections . singletonList ( NUM00 ) ) ; for ( String line : lines ) { if $F3578 ( line ) { if $F3578 ( line ) $F53787 ( Logger , _BOOL ) return _BOOL ; } } } $F15720 return _BOOL ; }
public boolean validate $F72 { $F24661 ( outputFile , outputPath ) if ( outputFile . exists ( ) || outputFile . isDirectory ( ) ) { invalidMessage = NUM00 ; return valid = _BOOL ; } if ( ! signMode ) { $F24661 ( keyFile , keyFilePath ) if ( $F1905 ( keyFile ) || keyFile . isDirectory ( ) ) { invalidMessage = NUM00 ; return valid = _BOOL ; } } return valid = _BOOL ; }
public void addResponseCodeListener ( ActionListener a ) $F6659 ( responseCodeListeners , a )
public double calculateLogLikelihood $F72 { double logL = NUM00 ; for ( Statistic statistic : dataList ) { for ( int j = NUM00 ; j < statistic . getDimension ( ) ; j ++ ) { logL -= Math . log ( statistic . getStatisticValue ( j ) ) ; } } return logL ; }
public static boolean hasDeadStatesFromInitial ( Automaton a ) { BitSet reachableFromInitial = getLiveStatesFromInitial ( a ) ; BitSet reachableFromAccept = getLiveStatesToAccept ( a ) ; reachableFromInitial . andNot ( reachableFromAccept ) ; return reachableFromInitial . isEmpty ( ) == _BOOL ; }
public Decimal subtract ( Decimal decimal ) { assertDefined ( ) ; if ( null == m_value ) $F3139 ( decimal ) BigDecimal value = m_value . subtract ( decimal . getBigDecimalValue ( ) ) ; return new Decimal ( value , SCALE ) ; }
public final boolean equals ( Object object ) { $F1933 ( object , _BOOL ) if ( ! ( object instanceof KnowledgeEdge ) ) { return _BOOL ; } KnowledgeEdge pair = ( KnowledgeEdge ) object ; return $F142656 ( from , pair , to ) ; }
protected int skipLine ( int c ) throws IOException { while ( c != - NUM00 && c != NUM00 && c != NUM00 ) $F145798 ( c , reader ) if ( c == NUM00 ) { $F10201 ( c , reader ) lineNo ++ ; reportLocation ( lineNo , NUM00 ) ; } else if ( c == NUM00 ) { $F10201 ( c , reader ) if ( c == NUM00 ) $F145798 ( c , reader ) lineNo ++ ; reportLocation ( lineNo , NUM00 ) ; } return c ; }
$F1 public void listVolumes ( CommandInput input , CompletionHandler completionHandler ) { createOrUpdateTargetSsl ( input ) ; URI uri = UriUtils . extendUri ( input . getDockerUri ( ) , NUM00 ) ; sendGet ( uri , null , completionHandler ) ; }
public static ByteBuffer base64StringToByteBuffer ( String base64EncodedKey ) { return ByteBuffer . wrap ( base64DecodeString ( base64EncodedKey ) ) ; }
public boolean step $F72 { $F657 ( current , System ) if ( mStart == NUM00 || ( current - mStart < NUM00 ) ) { mProgress = NUM00 ; } else if ( current - mStart > mDuration ) { if ( mLoop ) { mProgress = NUM00 ; start ( ) ; return _BOOL ; } mProgress = NUM00 ; return _BOOL ; } else { mProgress = ( current - mStart ) / ( double ) mDuration ; } return _BOOL ; }
protected void load_raw_characters ( StringBuilder sb ) throws IOException { int c = read_char ( ) ; for ( $F589 ) { c = read_char ( ) ; switch ( c ) { case CharacterSequence . CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_1 : case CharacterSequence . CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_2 : case CharacterSequence . CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_3 : $F598 $F52533 $F665 $F1267 if ( ! IonTokenConstsX . is7bitValue ( c ) ) $F8576 ( c , read_large_char_sequence ) } if ( IonUTF8 . needsSurrogateEncoding ( c ) ) { sb . append ( IonUTF8 . highSurrogate ( c ) ) ; c = IonUTF8 . lowSurrogate ( c ) ; } $F36813 ( sb , c ) } }
public SignatureFakingOracle ( final String documentString ) throws SignatureFakingException { Security . addProvider ( new BouncyCastleProvider $F72 ) ; signatureValueElements = new LinkedList $F6869 $F72 ; keyInfoElements = new LinkedList $F6869 $F72 ; $F36428 ( certificates ) certHandlers = new LinkedList < CertificateHandler > $F72 ; try { doc = DomUtilities . stringToDom ( documentString ) ; crawlSignatureElements ( ) ; $F25390 ( log , signatureValueElements ) crawlKeyInfoElements ( ) ; $F25390 ( log , keyInfoElements ) } catch ( SAXException e ) { throw new SignatureFakingException ( e ) ; } }
public ArbitraryLengthPathNode ( final TermNode left , final TermNode right , final VarNode tVarLeft , final VarNode tVarRight , final long lowerBound , final long upperBound ) { this ( new BOp [ ] { new JoinGroupNode $F72 } , NV . asMap ( new NV ( Annotations . LEFT_TERM , left ) , new NV ( Annotations . RIGHT_TERM , right ) , new NV ( Annotations . TRANSITIVITY_VAR_LEFT , tVarLeft ) , new NV ( Annotations . TRANSITIVITY_VAR_RIGHT , tVarRight ) , new NV ( Annotations . DROP_VARS , new ArrayList < VarNode > $F72 ) , new NV ( Annotations . LOWER_BOUND , lowerBound ) , new NV ( Annotations . UPPER_BOUND , upperBound ) ) ) ; final Set < VarNode > $F22304 ( dropVars ) ; dropVars . add ( tVarLeft ) ; dropVars . add ( tVarRight ) ; setProperty ( Annotations . DROP_VARS , dropVars ) ; }
$F34537 ( listener , changingListeners )
private Integer scanYamlDirectiveNumber ( Mark startMark ) { char ch = reader . peek ( ) ; if ( ! Character . isDigit ( ch ) ) { throw new ScannerException ( NUM00 , startMark , NUM00 + ch + NUM00 + $F1047 ( ch ) + NUM00 , reader . getMark ( ) ) ; } int length = NUM00 ; while ( Character . isDigit ( reader . peek ( length ) ) ) { length ++ ; } Integer value = Integer . parseInt ( reader . prefixForward ( length ) ) ; return value ; }
public static final String toBitString ( int i [ ] ) { StringBuilder $F144303 ( sb , i ) ; for ( int b : i ) $F288 ( sb , b ) $F92 ( sb ) }
public static ByteBuffer convertToSigned16BitSamples ( Buffer buffer ) { return convertToSigned16BitSamples ( buffer . getSamples ( ) ) ; }
boolean checkToken ( ByteWrapper token , Key nodeId , InetAddress ip , int port , Key lookupKey ) { updateTokenTimestamps ( ) ; boolean valid = checkToken ( token , nodeId , ip , port , lookupKey , timestampCurrent . get ( ) ) || checkToken ( token , nodeId , ip , port , lookupKey , timestampPrevious ) ; if ( ! valid ) DHT . logDebug ( NUM00 + ip . getHostAddress ( ) ) ; return valid ; }
$F9749 ( namespace , attName , attValue , xmlWriter , registerPrefix )
public void expandAll $F72 { cancelEditing ( ) ; final TreeModel tm = getModel ( ) ; final Object root = tm . getRoot ( ) ; if ( root != null ) { expandAllPaths ( new TreePath ( root ) , tm ) ; } }
protected void describeVocabularies ( final IVCount [ ] predicatePartitionCounts ) { final $F2689 namespaces = new LinkedHashSet $F4 $F72 ; { for ( IVCount tmp : predicatePartitionCounts ) { final URI p = ( URI ) tmp . getValue ( ) ; $F101311 ( namespace , p ) $F8996 ( namespace ) namespaces . add ( namespace ) ; } } final $F806 $F21575 ( a , namespaces ) ; Arrays . sort ( a ) ; for ( String namespace : a ) { g . add ( aDataset , VoidVocabularyDecl . vocabulary , f . createURI ( namespace ) ) ; } }
public void testInvokeAny4 $F72 throws Throwable { CountDownLatch latch = new CountDownLatch $F989 ; $F25236 ( e ) PoolCleaner cleaner = null ; try { cleaner = cleaner ( e ) ; $F25247 ( l ) $F3761 ( l , latchAwaitingStringTask , latch ) $F722 ( l ) try { e . invokeAny ( l ) ; shouldThrow ( ) ; } $F83403 $F38783 ( latch ) } $F14364 ( cleaner ) }
private static void solve_l2r_l1l2_svr ( Problem prob , $F1986 w , Parameter param ) { int l = prob . l ; double C = param . C ; double p = param . p ; int w_size = prob . n ; double eps = param . eps ; int i , s , iter = NUM00 ; int max_iter = NUM00 ; int active_size = l ; $F4120 ( index , l ) double d , G , H ; double Gmax_old = Double . POSITIVE_INFINITY ; double Gmax_new , Gnorm1_new ; double Gnorm1_init = NUM00 ; $F9662 ( beta , l ) $F9662 ( QD , l ) $F1986 y = prob . y ; $F1986 lambda = new double [ ] { NUM00 / C } ; $F1986 upper_bound = new double [ ] { Double . POSITIVE_INFINITY } ; if ( param . solverType == SolverType . L2R_L1LOSS_SVR_DUAL ) { lambda [ NUM00 ] = NUM00 ; upper_bound [ NUM00 ] = C ; } for ( i = NUM00 ; i < l ; i ++ ) $F5629 ( beta , i ) for ( i = NUM00 ; i < w_size ; i ++ ) $F5629 ( w , i ) for ( i = NUM00 ; i < l ; i ++ ) { QD [ i ] = NUM00 ; for ( Feature xi : prob . x [ i ] ) { $F10704 ( val , xi ) QD [ i ] += val * val ; w [ xi . getIndex ( ) - NUM00 ] += beta [ i ] * val ; } index [ i ] = i ; } while ( iter < max_iter ) { Gmax_new = NUM00 ; Gnorm1_new = NUM00 ; for ( i = NUM00 ; i < active_size ; i ++ ) { int j = i + random . nextInt ( active_size - i ) ; swap ( index , i , j ) ; } for ( s = NUM00 ; s < active_size ; s ++ ) { i = index [ s ] ; G = - y [ i ] + lambda [ GETI_SVR ( i ) ] * beta [ i ] ; H = QD [ i ] + lambda [ GETI_SVR ( i ) ] ; for ( Feature xi : prob . x [ i ] ) { int ind = xi . getIndex ( ) - NUM00 ; $F10704 ( val , xi ) G += val * w [ ind ] ; } double Gp = G + p ; double Gn = G - p ; double violation = NUM00 ; if ( beta [ i ] == NUM00 ) { if ( Gp < NUM00 ) { violation = - Gp ; } else if ( Gn > NUM00 ) { violation = Gn ; } else if ( Gp > Gmax_old && Gn < - Gmax_old ) { active_size -- ; swap ( index , s , active_size ) ; s -- ; $F598 } } else if ( beta [ i ] >= upper_bound [ GETI_SVR ( i ) ] ) { if ( Gp > NUM00 ) { violation = Gp ; } else if ( Gp < - Gmax_old ) { active_size -- ; swap ( index , s , active_size ) ; s -- ; $F598 } } else if ( beta [ i ] <= - upper_bound [ GETI_SVR ( i ) ] ) { if ( Gn < NUM00 ) { violation = - Gn ; } else if ( Gn > Gmax_old ) { active_size -- ; swap ( index , s , active_size ) ; s -- ; $F598 } } else if ( beta [ i ] > NUM00 ) { violation = Math . abs ( Gp ) ; } else { violation = Math . abs ( Gn ) ; } $F19410 ( Gmax_new , Math , violation ) Gnorm1_new += violation ; if ( Gp < H * beta [ i ] ) { d = - Gp / H ; } else if ( Gn > H * beta [ i ] ) { d = - Gn / H ; } else { d = - beta [ i ] ; } if $F20932 ( Math , d ) $F1448 double beta_old = beta [ i ] ; beta [ i ] = Math . min ( Math . max ( beta [ i ] + d , - upper_bound [ GETI_SVR ( i ) ] ) , upper_bound [ GETI_SVR ( i ) ] ) ; d = beta [ i ] - beta_old ; if ( d != NUM00 ) { for ( Feature xi : prob . x [ i ] ) { w [ xi . getIndex ( ) - NUM00 ] += d * xi . getValue ( ) ; } } } $F126526 ( iter , Gnorm1_init , Gnorm1_new ) iter ++ ; if ( iter % NUM00 == NUM00 ) $F1210 ( info ) if ( Gnorm1_new <= eps * Gnorm1_init ) { if ( active_size == l ) $F5153 else { active_size = l ; info ( NUM00 ) ; Gmax_old = Double . POSITIVE_INFINITY ; $F598 } } Gmax_old = Gmax_new ; } info ( NUM00 , iter ) ; if ( iter >= max_iter ) $F1210 ( info ) double v = NUM00 ; int nSV = NUM00 ; for ( i = NUM00 ; i < w_size ; i ++ ) { $F60596 ( v , w , i ) } v = NUM00 * v ; for ( i = NUM00 ; i < l ; i ++ ) { v += p * Math . abs ( beta [ i ] ) - y [ i ] * beta [ i ] + NUM00 * lambda [ GETI_SVR ( i ) ] * beta [ i ] * beta [ i ] ; if ( beta [ i ] != NUM00 ) { nSV ++ ; } } info ( NUM00 , v ) ; info ( NUM00 , nSV ) ; }
public SignalGroupSubTableAction ( String s ) $F845
public static $F3803 generateXVals ( int from , int to ) { $F10144 ( xvals ) for ( int i = from ; i < to ; i ++ ) $F34171 ( xvals , i ) return xvals ; }
public void testCompareToDiffSigns1 $F72 { $F67214 $F10679 int aSign = NUM00 ; int bSign = - NUM00 ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F79260 ( assertEquals , aNumber , bNumber ) }
private HashMap addAttr ( SvcReg reg , EntryClass eclass , int fldidx , Object value ) { HashMap [ ] attrMaps = serviceByAttr . get ( eclass ) ; if ( attrMaps == null ) { attrMaps = new HashMap [ eclass . getNumFields ( ) ] ; serviceByAttr . put ( eclass , attrMaps ) ; } HashMap map = attrMaps [ fldidx ] ; if ( map == null ) { $F6450 ( map ) ; attrMaps [ fldidx ] = map ; } $F73534 ( regs , map , value ) if ( regs == null ) { $F136190 ( regs ) map . put ( value , regs ) ; } else $F12651 ( regs , reg , map ) regs . add ( reg ) ; return map ; }
public QueryStringDecoderUtil ( URI uri ) { this ( uri , Charset . defaultCharset ( ) ) ; }
$F38947 ( rgbColor , red , green , blue , black , Math , cyan , magenta , yellow )
$F43277 ( listener , mListeners )
public static void showErrorMessage ( String msg ) $F127556 ( showErrorMessage , msg )
public final static NameValuePair parseNameValuePair $F45528 ( value , parser ) throws ParseException { $F826 ( value ) $F45529 ( parser , BasicHeaderValueParser ) $F45535 ( buffer , value ) buffer . append ( value ) ; $F45541 ( cursor , value ) return parser . parseNameValuePair ( buffer , cursor ) ; }
public static String stripCharsInBag ( String s , String bag ) { int i ; $F4000 ( stringBuilder ) for ( $F23302 ( i , s ) ) { $F1280 ( c , s , i ) if $F85013 ( bag , c ) stringBuilder . append ( c ) ; } $F92 ( stringBuilder ) }
public static double cos ( double radians ) { return Math . cos ( radians ) ; }
public static String formatNumber ( float number , int digitCount , boolean separateThousands ) { $F11577 ( out ) boolean neg = _BOOL ; $F40722 ( number ) boolean zero = _BOOL ; if ( number < NUM00 && number > - NUM00 ) { zero = _BOOL ; } if ( number < NUM00 ) $F385538 ( neg , _BOOL , number ) if ( digitCount > POW_10 . length ) $F65461 ( digitCount , POW_10 ) number *= POW_10 [ digitCount ] ; $F385541 ( lval , Math , number ) $F40997 ( ind , out ) int charCount = NUM00 ; boolean decimalPointAdded = _BOOL ; while ( lval != NUM00 || charCount < ( digitCount + NUM00 ) ) { $F273037 ( digit , lval ) lval = lval / NUM00 ; out [ ind -- ] = ( char ) ( digit + NUM00 ) ; charCount ++ ; if ( charCount == digitCount ) { out [ ind -- ] = NUM00 ; charCount ++ ; decimalPointAdded = _BOOL ; } else if ( separateThousands && lval != NUM00 && charCount > digitCount ) { if ( decimalPointAdded ) { if $F385546 ( charCount , digitCount ) { out [ ind -- ] = NUM00 ; charCount ++ ; } } else { if $F385546 ( charCount , digitCount ) { out [ ind -- ] = NUM00 ; charCount ++ ; } } } } $F385557 ( zero , out , ind , charCount ) $F385557 ( neg , out , ind , charCount ) int start = out . length - charCount ; return String . valueOf ( out , start , out . length - start ) ; }
$F1 protected void onDestroy $F72 { $F112103 ( super ) doReallyStop ( _BOOL ) ; mFragments . dispatchDestroy ( ) ; if ( mLoaderManager != null ) { mLoaderManager . doDestroy ( ) ; } }
$F166447 ( propertyName , in_vcl , beanContextChildSupport )
static public boolean doesFileExist ( Context c , String fileName , long fileSize , boolean deleteFileOnMismatch ) { File fileForNewFile = new File ( Helpers . generateSaveFileName ( c , fileName ) ) ; if $F3428 ( fileForNewFile ) { if $F19634 ( fileForNewFile , fileSize ) { return _BOOL ; } $F19637 ( deleteFileOnMismatch , fileForNewFile ) } return _BOOL ; }
static WindowsFileAttributes fromFindData ( long address ) { $F149755 ( fileAttrs , unsafe , address , OFFSETOF_FIND_DATA_ATTRIBUTES ) $F279493 ( creationTime , unsafe , address , OFFSETOF_FIND_DATA_CREATETIME ) $F279493 ( lastAccessTime , unsafe , address , OFFSETOF_FIND_DATA_LASTACCESSTIME ) $F279493 ( lastWriteTime , unsafe , address , OFFSETOF_FIND_DATA_LASTWRITETIME ) long size = ( ( long ) ( unsafe . getInt ( address + OFFSETOF_FIND_DATA_SIZEHIGH ) ) < < NUM00 ) + ( unsafe . getInt ( address + OFFSETOF_FIND_DATA_SIZELOW ) & NUM00 ) ; int reparseTag = isReparsePoint ( fileAttrs ) ? unsafe . getInt ( address + OFFSETOF_FIND_DATA_RESERVED0 ) : NUM00 ; return new WindowsFileAttributes ( fileAttrs , creationTime , lastAccessTime , lastWriteTime , size , reparseTag , NUM00 , NUM00 , NUM00 ) ; }
public static final void writeMapXml ( Map val , XmlSerializer out , WriteMapCallback callback ) throws $F18821 { $F2329 ( val ) Set s = val . entrySet ( ) ; $F10531 ( i , s ) while $F2921 ( i ) { $F53089 e = ( $F53089 ) i . next ( ) ; writeValueXml ( e . getValue ( ) , $F123408 ( e ) , out , callback ) ; } }
public void fireEventProgrammatically ( Event event ) { if ( ! event . isConsumed ( ) ) ripplerPane . fireEvent ( event ) ; }
private boolean hasFullEntry ( JsonValue entry , QuerySide querySide ) { if ( querySide == QuerySide . SOURCE && sourceQueryFullEntry != null ) { return sourceQueryFullEntry ; } else if ( querySide == QuerySide . TARGET && targetQueryFullEntry != null ) { return targetQueryFullEntry ; } if ( entry != null ) { short ignoreFields = NUM00 ; if ( entry . isDefined ( NUM00 ) ) { ignoreFields ++ ; } if ( entry . isDefined ( NUM00 ) ) { ignoreFields ++ ; } ignoreFields += NUM00 ; return entry . size ( ) > ignoreFields ; } else { return _BOOL ; } }
public static boolean isModule ( IResource resource ) { return ( resource != null && TLA_EXTENSION . equals ( resource . getFileExtension ( ) ) ) ; }
public int writeAnnotation ( Annotation annotation ) { $F35972 ( off , data ) writeByte ( annotation . visibility ) ; writeEncodedArray ( annotation . encodedAnnotation ) ; return off ; }
public static long fromInet4Address ( final InetAddress inetAddress ) { ensureIsInet4Address ( inetAddress ) ; return Integer . toUnsignedLong ( inetAddress . hashCode ( ) ) ; }
public boolean revisionContainsTemplateName ( int revId , String templateName ) throws WikiApiException { return revisionContainsTemplateNames ( revId , Arrays . asList ( $F8640 ( templateName ) ) ) ; }
public List < GenericEntry > retrieveAllAccountInfoRequests ( Date fromDate ) throws AppsForYourDomainException , IOException , ServiceException { String url = BASE_URL + NUM00 + domain ; if ( fromDate != null ) { url += NUM00 + DATE_FORMAT . format ( fromDate ) ; } return getAllPages ( new URL ( url ) , GenericFeed . class ) ; }
protected void drawCylinder ( int x , int y , int w , int h , Color fillColor , Paint fillPaint , Color penColor , boolean isShadow ) { int h4 = h / NUM00 ; int r = w - NUM00 ; if ( fillColor != null || fillPaint != null ) { Area area = new Area ( new Rectangle ( x , y + h4 / NUM00 , r , h - h4 ) ) ; area . add ( new Area ( new Rectangle ( x , y + h4 / NUM00 , r , h - h4 ) ) ) ; area . add ( new Area ( new $F35359 ( x , y , r , h4 ) ) ) ; area . add ( new Area ( new $F35359 ( x , y + h - h4 , r , h4 ) ) ) ; if ( isShadow ) { g . setColor ( mxConstants . SHADOW_COLOR ) ; g . translate ( mxConstants . SHADOW_OFFSETX , mxConstants . SHADOW_OFFSETY ) ; g . fill ( area ) ; g . translate ( - mxConstants . SHADOW_OFFSETX , - mxConstants . SHADOW_OFFSETY ) ; } if ( fillPaint != null ) $F158292 ( g , fillPaint ) else $F158293 ( g , fillColor ) g . fill ( area ) ; } if ( penColor != null ) { g . setColor ( penColor ) ; int h2 = h4 / NUM00 ; g . drawOval ( x , y , r , h4 ) ; g . drawLine ( x , y + h2 , x , y + h - h2 ) ; g . drawLine ( x + w - NUM00 , y + h2 , x + w - NUM00 , y + h - h2 ) ; g . drawArc ( x , y + h - h4 , r , h4 , NUM00 , - NUM00 ) ; } }
public StringList plus ( String ... args ) { StringList newList = new StringList $F72 ; newList . addAll ( this ) ; $F9629 ( newList , Arrays , args ) return newList ; }
private void walkParseTree ( List < SwiftBaseListener > listeners , TopLevelContext tree ) { ParseTreeWalker walker = new ParseTreeWalker $F72 ; $F22620 ( listeners ) }
$F1 public final char readChar $F72 throws IOException { $F52634 ( dis , work ) return ( char ) ( $F169749 ( work ) | $F18896 ( work ) ) ; }
public static int truncatedCompareTo ( final Date date1 , final Date date2 , final int field ) { final Date truncatedDate1 = truncate ( date1 , field ) ; final Date truncatedDate2 = truncate ( date2 , field ) ; $F12554 ( truncatedDate1 , truncatedDate2 ) }
protected List < DecompoundedWord > makeSplit ( String aWord ) { List < DecompoundedWord > result = new ArrayList < DecompoundedWord > $F72 ; for ( $F1088 ( i , aWord ) ) { String leftWord = $F1399 ( aWord , i ) ; $F36289 ( rightWord , aWord , i ) boolean leftGood = dict . contains ( leftWord ) && leftWord . length ( ) >= minWordLength ; boolean rightGood = rightWord . length ( ) > minRestLength || $F1276 ( rightWord ) ; if ( leftGood && rightGood ) { DecompoundedWord split = DecompoundedWord . createFromString ( leftWord + NUM00 + rightWord ) ; split . setSplitPos ( i ) ; result . add ( split ) ; } for ( String morpheme : morphemes . getAll ( ) ) { try { String leftWithoutMorpheme = $F15173 ( leftWord , morpheme ) ; if ( leftWord . endsWith ( morpheme ) && dict . contains ( leftWithoutMorpheme ) && rightGood ) { DecompoundedWord split = DecompoundedWord . createFromString ( leftWithoutMorpheme + NUM00 + morpheme + NUM00 + rightWord ) ; split . setSplitPos ( i ) ; result . add ( split ) ; } } catch ( StringIndexOutOfBoundsException e ) $F1448 } } return result ; }
$F9105 ( url )
public static String classNamePath ( String className ) { String filename = className . replace ( NUM00 , File . separator ) ; $F56558 ( filename ) if $F56559 ( filename ) { $F31601 ( filename ) } return NUM00 + File . separator + filename + NUM00 ; }
public void removeTitlePrefix ( String prfx ) { titlePrefix . remove ( prfx ) ; firePropertyChange ( TITLE_PREFIX , null , titlePrefix ) ; }
public void send ( Set recipients , boolean multicast ) throws InterruptedException , ReplyException { $F179935 ( isDebugEnabled , logger ) $F2758 ( Thread ) recipients = new HashSet ( recipients ) ; DistributedMember me = originDm . getDistributionManagerId ( ) ; $F80306 ( recipients , me ) $F291442 ( isDebugEnabled , logger , recipients ) rp = new ReplyProcessor21 ( originDm , recipients ) ; processorId = rp . getProcessorId ( ) ; setRecipients ( recipients ) ; setMulticast ( multicast ) ; Set failures = originDm . putOutgoing ( this ) ; if $F8841 ( failures ) { for ( $F2774 ( i , failures ) ) { InternalDistributedMember mbr = ( InternalDistributedMember ) i . next ( ) ; $F291442 ( isDebugEnabled , logger , mbr ) } } rp . waitForReplies ( ) ; }
private boolean isRelevant ( Object service , $F12345 attributes ) { LOOP : for ( Entry e : _serviceAttributes ) { for ( Entry en : attributes ) { if $F1238 ( e , en ) continue LOOP ; } return _BOOL ; } boolean flag = _BOOL ; for ( Entry en : attributes ) $F42256 ( _serviceName , en , flag , _BOOL ) $F25096 ( flag , _BOOL ) flag = _BOOL ; for ( Class cl : _classes ) { if $F38790 ( cl , service ) $F3468 ( flag , _BOOL ) } return flag ; }
private static boolean eq ( Object o1 , Object o2 ) $F64386 ( o1 , o2 )
public int findCarByRoadNumber ( String roadNumber ) { if ( sysList != null ) { if $F2137 ( roadNumber , _roadNumber ) { return getIndex ( NUM00 , roadNumber ) ; } int index = getIndex ( _index , roadNumber ) ; $F236432 ( index ) return getIndex ( NUM00 , roadNumber ) ; } $F150 }
@ SlashedClassName @ SuppressFBWarnings ( NUM00 ) public static String toSlashedClassName ( @ SlashedClassName ( when = When . UNKNOWN ) String className ) { if $F48846 ( className ) { return DescriptorFactory . canonicalizeString ( $F2934 ( className ) ) ; } return className ; }
public static double P_AveragePrecision ( int y [ ] , int r [ ] ) { double avg_prec = NUM00 ; int L = y . length ; $F67791 ( ones ) for ( $F119 ( j , L ) ) { if ( y [ j ] == NUM00 ) $F207 ( ones , j ) } if $F119130 ( ones ) $F1082 for ( int j : ones ) { double s = NUM00 ; for ( int k : ones ) { if ( r [ k ] <= r [ j ] ) { s ++ ; } } avg_prec += ( s / ( NUM00 + r [ j ] ) ) ; } avg_prec /= ones . size ( ) ; return avg_prec ; }
public Location newLocation ( String name ) { Location location = getLocationByName ( name ) ; if ( location == null ) { _id ++ ; location = new Location ( Integer . toString ( _id ) , name ) ; $F10192 ( oldSize , Integer , _locationHashTable ) $F33163 ( _locationHashTable , location ) $F10197 ( setDirtyAndFirePropertyChange , LISTLENGTH_CHANGED_PROPERTY , oldSize , Integer , _locationHashTable ) } return location ; }
$F1 public void close $F72 { closing = _BOOL ; if ( reservations == null || reservations . compareAndSet ( $F29083 ) ) doClose ( ) ; }
private void removeOMADownloadFromSharedPrefs ( long downloadId ) { $F47059 ( omaDownloads , getStoredDownloadInfo , PENDING_OMA_DOWNLOADS ) for ( String omaDownload : omaDownloads ) { OMAEntry entry = OMAEntry . parseOMAEntry ( omaDownload ) ; if ( entry . mDownloadId == downloadId ) { omaDownloads . remove ( omaDownload ) ; storeDownloadInfo ( PENDING_OMA_DOWNLOADS , omaDownloads ) ; $F665 } } }
public static boolean isAndroidSdkDirInLocalPropertiesFile ( $F1113 File projectDir ) { String androidHome = getAndroidHomeFromLocalPropertiesFile ( projectDir ) ; if $F48189 ( Strings , androidHome ) { $F574 ( msg , String , androidHome ) LOG . info ( msg ) ; return _BOOL ; } return _BOOL ; }
public static boolean hasTokenInformation ( Bundle bundle ) { $F1933 ( bundle , _BOOL ) $F19101 ( token , bundle , TOKEN_KEY ) if $F38892 ( token ) { return _BOOL ; } long expiresMilliseconds = bundle . getLong ( EXPIRATION_DATE_KEY , NUM00 ) ; $F6482 ( expiresMilliseconds , _BOOL ) return _BOOL ; }
public void resetPolicy $F72 { mPreferences . putString ( PREF_LAST_RESPONSE , Integer . toString ( Policy . RETRY ) ) ; setRetryUntil ( DEFAULT_RETRY_UNTIL ) ; setMaxRetries ( DEFAULT_MAX_RETRIES ) ; setRetryCount ( Long . parseLong ( DEFAULT_RETRY_COUNT ) ) ; setValidityTimestamp ( DEFAULT_VALIDITY_TIMESTAMP ) ; $F17621 ( mPreferences ) }
$F1 public boolean connectionAllowed ( String eventName ) { if ( eventName . equals ( NUM00 ) && m_listenees . containsKey ( eventName ) ) { return _BOOL ; } return _BOOL ; }
public static Vector2 pow ( Vector2 o , double power ) { return new Vector2 ( Math . pow ( o . x , power ) , Math . pow ( o . z , power ) ) ; }
public static Object invokeStatic ( String clazz , String methodName , $F749 types , $F131 values ) throws NoSuchMethodException { try { return invokeStatic ( Class . forName ( clazz ) , methodName , types , values ) ; } catch ( ClassNotFoundException e ) { throw new NoSuchMethodException ( NUM00 + clazz + NUM00 ) ; } }
public Prototype undump ( InputStream stream , String chunkname ) throws IOException { if ( stream . read ( ) != LUA_SIGNATURE [ NUM00 ] || stream . read ( ) != LUA_SIGNATURE [ NUM00 ] || stream . read ( ) != LUA_SIGNATURE [ NUM00 ] || stream . read ( ) != LUA_SIGNATURE [ NUM00 ] ) $F1274 String sname = getSourceName ( chunkname ) ; LoadState s = new LoadState ( stream , sname ) ; s . loadHeader ( ) ; switch ( s . luacNumberFormat ) { $F160093 ( NUMBER_FORMAT_FLOATS_OR_DOUBLES , NUMBER_FORMAT_INTS_ONLY , NUMBER_FORMAT1_PATCH_INT32 ) $F1267 throw new LuaError $F580 ; } return s . loadFunction ( LuaString . valueOf ( sname ) ) ; }
public void addButton ( URL url , String info , ActionListener al ) { JButton b = new JButton ( new ImageIcon ( url , info ) ) ; b . setToolTipText ( info ) ; b . setMargin ( $F32450 ) ; b . addActionListener ( al ) ; b . setBorderPainted ( _BOOL ) ; add ( b ) ; }
private void mapRequestToResponses ( Matcher < Request > requestMatcher , ResponseSource responses ) { mappings . add ( new MatcherResponseSourcePair ( requestMatcher , responses ) ) ; }
$F1 protected void commitToInput $F72 { JmxBeanSensorAssignment assignment = getInput ( ) ; if ( null != assignment ) { assignment . setDomain ( domainText . getText ( ) ) ; assignment . setObjectNameParameters ( new $F4188 ( parametersMap ) ) ; if ( allAttributesButton . getSelection ( ) ) { assignment . setAttributes ( $F87295 ( Collections ) ) ; } else { assignment . setAttributes ( $F28906 ( attributesSet ) ) ; } } }
public static $F806 split ( String original , String separator ) { $F6518 ( nodes ) $F12747 ( index , original , separator ) while ( index >= NUM00 ) { nodes . addElement ( original . substring ( NUM00 , index ) ) ; $F29993 ( original , index , separator ) index = original . indexOf ( separator ) ; } nodes . addElement ( original ) ; $F5442 ( ret , nodes ) for ( $F2277 ( i , nodes ) ) { ret [ i ] = $F1766 ( nodes , i ) ; } return ret ; }
public void insertTwin ( Instruction inst , Instruction twin ) { ListIterator < GCIRMapElement > iter = list . listIterator ( ) ; while $F2921 ( iter ) { GCIRMapElement newPtr = iter . next ( ) ; if ( newPtr . getInstruction ( ) == inst ) { iter . add ( newPtr . createTwin ( twin ) ) ; $F665 } } throw new OptimizingCompilerException ( NUM00 + inst + NUM00 ) ; }
public java . lang . Object newInstance $F72 throws java . lang . InstantiationException , java . lang . IllegalAccessException { Object o = newInstanceImpl ( ) ; if ( o == null ) { throw new InstantiationException $F72 ; } return o ; }
FormatSpecifierParser ( String format ) { this . format = format ; this . length = format . length ( ) ; }
public static void toString ( $F33240 iter , String separator , StringBuilder sb ) { while $F2921 ( iter ) { $F45691 ( sb , iter ) $F173088 ( iter , sb , separator ) } }
public boolean isFull $F72 { if ( maxSize > NUM00 && notifications . size ( ) >= maxSize ) { return _BOOL ; } return _BOOL ; }
private void schedulePlaylistSave $F72 { if ( ! mPlaylistLoading ) { if $F48405 ( mPlaylistSavePending , _BOOL ) { mThreadPoolManager . scheduleOnce ( new PlaylistSaveTask $F72 , NUM00 , TimeUnit . SECONDS ) ; } } }
public boolean isToRead $F72 { Iterator < VariableValue > i = variables . iterator ( ) ; while $F2921 ( i ) { VariableValue v = i . next ( ) ; if ( v . isToRead ( ) ) { return _BOOL ; } } return _BOOL ; }
public void actionPerformed ( ActionEvent e ) $F5795 ( navigateToPriorDemo )
public String toString $F72 { $F280 ( text ) for ( $F1139 ( i , m_Elements ) ) { $F96530 ( i , text ) text . append ( Utils . doubleToString ( m_Elements [ i ] , NUM00 ) ) ; } $F84 ( text ) $F92 ( text ) }
$F1309 public static Integer Integer ( int i ) $F62107 ( Integer , i )
$F1322 ( criteria , oredCriteria )
$F47011 ( tag , msg , args , sLevel , LEVEL_VERBOSE , String , Log )
public void saveIndexes $F72 { $F12181 ( toSave ) synchronized ( this ) { $F131 valueTable = this . indexes . valueTable ; for ( $F151668 ( i , l , valueTable ) ) { Index index = ( Index ) valueTable [ i ] ; $F67023 ( index , toSave ) } } boolean allSaved = _BOOL ; for ( $F62958 ( i , length , toSave ) ) { Index index = ( Index ) toSave . get ( i ) ; ReadWriteMonitor monitor = index . monitor ; $F45557 ( monitor ) try { monitor . enterRead ( ) ; if ( index . hasChanged ( ) ) { if ( monitor . exitReadEnterWrite ( ) ) { try { saveIndex ( index ) ; } catch ( IOException e ) { if ( VERBOSE ) { Util . verbose ( NUM00 , System . err ) ; $F301 ( e ) } allSaved = _BOOL ; } finally { monitor . exitWriteEnterRead ( ) ; } } else { allSaved = _BOOL ; } } } finally { monitor . exitRead ( ) ; } } if ( this . participantsContainers != null && this . participantUpdated ) { writeParticipantsIndexNamesFile ( ) ; this . participantUpdated = _BOOL ; } this . needToSave = ! allSaved ; }
private double match_bitapScore $F33970 ( e , x , loc , pattern ) { float accuracy = ( float ) e / pattern . length ( ) ; $F11871 ( proximity , Math , loc , x ) if ( Match_Distance == NUM00 ) { return proximity == NUM00 ? accuracy : NUM00 ; } return accuracy + $F124570 ( proximity , Match_Distance ) ; }
$F25079 ( deltaY , mPtrIndicator , DEBUG , PtrCLog , LOG_TAG , String , to , PtrIndicator , change , updatePos )
public void putAll $F15182 ( m ) { $F4173 ( tryPresize , m ) for ( $F15184 ( e , m ) ) putVal ( e . getKey ( ) , e . getValue ( ) , _BOOL ) ; }
public UndoableEdit insertString ( int where , String str ) throws BadLocationException { if ( where >= count || where < NUM00 ) { throw new BadLocationException ( NUM00 , count ) ; } $F7782 ( chars , str ) replace ( where , NUM00 , chars , NUM00 , chars . length ) ; if ( marks != null ) { updateMarksForInsert ( where , str . length ( ) ) ; } return new InsertUndo ( where , str . length ( ) ) ; }
$F198049 ( Byte , getValue )
boolean writeData $F72 throws IOException { int tosend ; int sent ; $F2175 ( block , kBlockSize ) do { tosend = Math . min ( sendStreamSize - totalSent , block . length ) ; $F21535 ( System , sendData , totalSent , block , tosend ) if ( tosend > NUM00 ) { sent = localSend ( block , tosend ) ; updateLocalClock ( ) ; if ( sent != - NUM00 ) { totalSent += sent ; } else { $F105262 ( logger , Level ) } } else { sent = tosend = NUM00 ; } } while ( sent > NUM00 ) ; if $F70311 ( logger , Level ) { logger . log ( Level . FINER , NUM00 + totalSent + NUM00 + ( sendStreamSize - totalSent ) ) ; } return tosend == NUM00 ; }
public static int copyAndCloseOutput ( Reader input , Writer output ) throws IOException { try $F8587 ( copy , input , output ) $F3229 ( output ) }
public int checkBookiesUp ( int count , int timeout ) throws Exception { ZooKeeper zkc = connectZooKeeper ( zkHost , zkPort , zkTimeoutSec ) ; try { int mostRecentSize = NUM00 ; for ( $F119 ( i , timeout ) ) { try { $F3803 children = zkc . getChildren ( NUM00 , _BOOL ) ; $F36382 ( children ) $F8935 ( mostRecentSize , children ) if ( ( mostRecentSize > count ) || LOG . isDebugEnabled ( ) ) { LOG . info ( NUM00 + mostRecentSize + NUM00 + NUM00 + count ) ; if ( ( mostRecentSize > count ) || LOG . isTraceEnabled ( ) ) { for ( String child : children ) $F10090 ( LOG , child ) } } $F15290 ( mostRecentSize , count ) } catch ( KeeperException e ) $F845 $F9470 ( Thread ) } return mostRecentSize ; } $F3229 ( zkc ) }
public Point2D inverseTransform ( Point2D src , Point2D dst ) { try { src . setLocation ( src . getX ( ) + rotXOffset , src . getY ( ) + rotYOffset ) ; dst = rotTransform . inverseTransform ( src , dst ) ; } catch ( NoninvertibleTransformException e ) { logger . log ( Level . FINE , e . getMessage ( ) , e ) ; } return dst ; }
public static Throwable shouldFail ( Class clazz , Closure code ) { Throwable th = null ; try $F180315 ( code ) catch ( GroovyRuntimeException gre ) { th = ScriptBytecodeAdapter . unwrap ( gre ) ; } $F268630 ( th , e ) if ( th == null ) { fail ( $F20488 ( code , clazz ) ) ; } else if $F78643 ( clazz , th ) { fail ( $F106504 ( code , clazz , th ) ) ; } return th ; }
public int write ( $F96 destMac , $F96 packet , int offset , int byteCount ) { $F896 ( destMac ) $F896 ( packet ) $F11673 ( Arrays , packet , offset , byteCount ) if $F11845 ( destMac ) { throw new IllegalArgumentException $F75477 ( destMac ) ; } return sendPacket ( fd , mInterfaceName , mProtocolType , destMac , packet , offset , byteCount ) ; }
private Boolean processYESNO $F17723 ( handler , uri , name , rawName , value ) throws $F2253 { if ( ! $F40270 ( value ) ) { handleError ( handler , XSLTErrorResources . INVALID_BOOLEAN , $F40356 ( name , value ) , null ) ; $F1274 } return new Boolean ( value . equals ( NUM00 ) ? _BOOL : _BOOL ) ; }
protected $F104317 loadRMAData ( int C_BPartner_ID ) { $F104317 list = new $F104317 $F72 ; $F180114 ( sqlStmt ) PreparedStatement pstmt = null ; try { $F47577 ( pstmt , DB , sqlStmt ) $F47 ( pstmt , C_BPartner_ID ) $F49 ( rs , pstmt ) while $F1682 ( rs ) { list . add ( new KeyNamePair ( rs . getInt ( NUM00 ) , rs . getString ( NUM00 ) ) ) ; } $F59 ( rs ) } catch ( SQLException e ) { log . log ( Level . SEVERE , sqlStmt . toString ( ) , e ) ; } finally { if ( pstmt != null ) { try $F881 ( pstmt ) catch ( Exception ex ) { log . severe ( NUM00 ) ; } } } return list ; }
$F1 public List < WorkOrder > searchWOForBilling ( $F87266 ( criteriaMap ) ) { $F980 ( logger ) final List < WorkOrder > filteredList = new ArrayList < WorkOrder > $F72 ; $F111652 ( criteriaMap , ACTION_FLAG ) for ( final WorkOrder workorder : searchWO ( criteriaMap ) ) if ( ! $F13536 ( isWOValidforBill , workorder ) ) filteredList . add ( workorder ) ; return filteredList ; }
public Week $F93037 ( time , zone , locale ) { $F19400 ( ParamChecks , time ) $F19400 ( ParamChecks , zone ) $F19400 ( ParamChecks , locale ) $F17013 ( calendar , Calendar , zone , locale ) calendar . setTime ( time ) ; int tempWeek = calendar . get ( Calendar . WEEK_OF_YEAR ) ; if ( tempWeek == NUM00 && $F21623 ( calendar , Calendar ) == Calendar . DECEMBER ) { this . week = NUM00 ; this . year = ( short ) ( $F21621 ( calendar , Calendar ) + NUM00 ) ; } else { this . week = ( byte ) Math . min ( tempWeek , LAST_WEEK_IN_YEAR ) ; $F91762 ( yyyy , calendar , Calendar ) if ( $F21623 ( calendar , Calendar ) == Calendar . JANUARY && this . week >= NUM00 ) { yyyy -- ; } this . year = ( short ) yyyy ; } peg ( calendar ) ; }
public ResourceQueue ( final NonBlockingLockManagerWithNewDesign $F23350 lockService , final R resource ) { $F10057 ( lockService ) $F10057 ( resource ) this . lockService = lockService ; this . resource = resource ; this . queue = new LinkedBlockingQueue $F4203 $F72 ; this . statisticsTask = new QueueSizeMovingAverageTask ( resource . toString ( ) , queue ) ; }
public void encodeAndSign ( X500Name subject , Signature signature ) throws CertificateException , IOException , SignatureException { DerOutputStream out , scratch ; $F96 certificateRequestInfo ; $F96 sig ; if ( encoded != null ) throw new SignatureException $F580 ; this . subject = subject ; $F153010 ( scratch ) scratch . putInteger ( BigInteger . ZERO ) ; subject . encode ( scratch ) ; scratch . write ( subjectPublicKeyInfo . getEncoded ( ) ) ; attributeSet . encode ( scratch ) ; $F153010 ( out ) $F109543 ( out , DerValue , scratch ) $F3031 ( certificateRequestInfo , out ) scratch = out ; $F6163 ( signature , certificateRequestInfo ) sig = signature . sign ( ) ; AlgorithmId algId = null ; try { algId = AlgorithmId . get ( signature . getAlgorithm ( ) ) ; } catch ( NoSuchAlgorithmException nsae ) { throw new SignatureException ( nsae ) ; } algId . encode ( scratch ) ; scratch . putBitString ( sig ) ; $F153010 ( out ) $F109543 ( out , DerValue , scratch ) $F3031 ( encoded , out ) }
public synchronized void schedulePeriodicTask ( TimerTask task , long period ) { try { m_timer . scheduleAtFixedRate ( task , NUM00 , period ) ; } catch ( IllegalStateException ie ) { m_timer = new Timer $F72 ; m_timer . scheduleAtFixedRate ( task , NUM00 , period ) ; } }
public static String abbreviate ( String str , FontMetrics fm , int width ) { $F317241 ( lastblank , nchars , cumx ) while ( cumx < width && nchars < str . length ( ) ) { if $F11974 ( Character , str , nchars ) { lastblank = nchars ; } cumx += fm . charWidth ( str . charAt ( nchars ) ) ; nchars ++ ; } if ( nchars < str . length ( ) && lastblank > NUM00 ) { nchars = lastblank ; } return ( nchars > NUM00 ? str . substring ( NUM00 , nchars ) : str ) ; }
protected void stopWraparoundTest $F72 { if ( testRunning && wrapTest ) { $F5191 ( wrapTimer ) statusText1 . setText ( $F11846 ( Integer , numErrors ) ) ; statusText1 . setVisible ( _BOOL ) ; statusText2 . setText ( Integer . toString ( numIterations ) + NUM00 ) ; statusText2 . setVisible ( _BOOL ) ; } }
protected void checkRowIndex ( final int row ) throws MathIllegalArgumentException { if ( row < NUM00 || row >= getRowDimension ( ) ) { throw new MathIllegalArgumentException ( LocalizedCoreFormats . ROW_INDEX , row , NUM00 , getRowDimension ( ) - NUM00 ) ; } }
private void nukeSymbols $F72 { _count = NUM00 ; _longestCollisionList = NUM00 ; $F9952 ( Arrays , _mainHash ) $F17838 ( Arrays , _mainNames ) $F17838 ( Arrays , _collList ) _collCount = NUM00 ; _collEnd = NUM00 ; }
private static float determineEnemyBlitzStrength ( final Territory blitzHere , final List < Route > blitzTerrRoutes , final List < Territory > blockTerr , final GameData data , final PlayerID ePlayer ) { final $F87074 $F9626 ( ignore ) ; $F114092 ( ignore ) final CompositeMatch $F101 blitzUnit = new CompositeMatchAnd $F200 ( Matches . unitIsOwnedBy ( ePlayer ) , Matches . UnitCanBlitz , Matches . UnitCanMove ) ; final CompositeMatch < Territory > validBlitzRoute = new CompositeMatchAnd $F200 ( Matches . territoryHasNoEnemyUnits ( ePlayer , data ) , Matches . TerritoryIsNotImpassableToLandUnits ( ePlayer , data ) ) ; final List < Route > $F204 ( routes ) ; final $F336297 blitzUnits = findAttackers ( blitzHere , NUM00 , ignore , ePlayer , data , blitzUnit , validBlitzRoute , blockTerr , routes , _BOOL ) ; for ( final Route r : routes ) { if ( r . numberOfSteps ( ) == NUM00 ) $F207 ( blitzTerrRoutes , r ) } return strength ( blitzUnits , _BOOL , _BOOL , _BOOL ) ; }
public Name join ( String identifier ) { validateLowerUnderscore ( identifier ) ; List < NamePiece > $F204 ( newPieceList ) ; newPieceList . addAll ( namePieces ) ; newPieceList . add ( new NamePiece ( identifier , CaseFormat . LOWER_UNDERSCORE ) ) ; return new Name ( newPieceList ) ; }
private LocalDateTime parseDate ( String dateStr , boolean tryAgain ) { LocalDateTime date = LocalDateTime . now ( ZoneId . of ( NUM00 ) ) ; if ( mDateTimeFormatter == null ) { initFormatter ( dateStr ) ; } if ( mDateTimeFormatter != null ) { try { date = LocalDateTime . parse ( dateStr , mDateTimeFormatter ) ; } catch ( DateTimeParseException e ) { Timber . d ( String . format ( NUM00 , dateStr ) ) ; if ( tryAgain ) { Timber . d ( NUM00 ) ; mDateTimeFormatter = null ; parseDate ( dateStr , _BOOL ) ; } } } return date ; }
public String toString $F72 { String string = caller ; if ( level > NUM00 || thread != - NUM00 ) { string += NUM00 ; } if ( level > NUM00 ) { string += level ; } if ( thread != - NUM00 ) { string += NUM00 + thread ; } if ( level > NUM00 || thread != - NUM00 ) { string += NUM00 ; } string += NUM00 ; $F70739 ( spawnMessage , string ) if $F4012 ( answer ) { string += answer + NUM00 ; } if $F4012 ( callee ) { string += callee + NUM00 ; } string += message ; $F70739 ( returnsInstantly , string ) return string ; }
public static boolean isWhiteSpace ( int c ) { switch ( c ) { case NUL_CHAR : $F1262 $F1262 case FF_CHAR : $F1262 $F1262 return _BOOL ; $F1267 return _BOOL ; } }
public void remove ( RequestFilter filter ) $F106 ( filters , filter )
protected void removeClassifiers $F23416 ( indices ) { int i ; if ( indices == null ) $F6051 ( m_ModelClassifiers ) else { for ( $F121270 ( i , indices ) ) m_ModelClassifiers . remove ( indices [ i ] ) ; } setModified ( _BOOL ) ; }
$F43832 ( pcl , m_pcSupport )
public int numCheckpoints $F72 $F1652 ( checkpoints )
public void addElement ( Object anObject ) { p_data . add ( anObject ) ; fireIntervalAdded ( this , $F2281 ( p_data ) , $F2281 ( p_data ) ) ; if ( $F10470 ( p_data ) && m_selectedObject == null && anObject != null ) setSelectedItem ( anObject ) ; }
public Builder addListenUrls $F24643 ( urls ) { $F10144 ( needAdd ) for ( String url : urls ) { if ( ! UrlUtil . isUrl ( url ) ) $F1448 needAdd . add ( url ) ; } if $F20899 ( CollectionUtil , needAdd ) { if ( mListenUrls == null ) { $F21884 ( mListenUrls ) } mListenUrls . addAll ( needAdd ) ; } return this ; }
public void addAssignedVirtualArrays $F32029 ( virtualArrayURIs ) { if $F13709 ( virtualArrayURIs ) { $F11293 ( addVirtualArrays ) addVirtualArrays . addAll ( virtualArrayURIs ) ; if ( _assignedVirtualArrays == null ) { setAssignedVirtualArrays ( new StringSet $F72 ) ; _assignedVirtualArrays . addAll ( addVirtualArrays ) ; } else $F21926 ( _assignedVirtualArrays , addVirtualArrays ) updateVirtualArrayTags ( ) ; } }
$F1 public boolean isCellEditable ( int row , int column ) { EnvVar envVar = dataList . get ( row ) ; $F3627 ( column , COL_VALUE , _BOOL ) return ! envVar . isPredefined ( ) ; }
$F52843 ( packed , map , i , j , count , value )
private boolean dropInTrash $F72 { if ( mHighlightedBlockView != null ) { mHighlightedBlockView . setHighlightedConnection ( null ) ; mHighlightedBlockView = null ; } $F725 ( mDraggedConnections ) return mController . trashRootBlock ( mPendingDrag . getRootDraggedBlock ( ) ) ; }
$F4203 $F5675 concatValues ( final $F10809 ... data ) { final $F5675 $F204 ( rv ) ; for ( $F10809 values : data ) $F50757 ( rv , Arrays , values ) return rv ; }
public DagIterator ( Graph pattern ) { for ( Edge edge : pattern . getEdges ( ) ) { if ( Edges . isDirectedEdge ( edge ) || Edges . isUndirectedEdge ( edge ) ) $F1448 throw new IllegalArgumentException ( NUM00 + NUM00 + edge ) ; } decoratedGraphs . add ( new DecoratedGraph ( pattern ) ) ; }
private boolean validateCustomCatalog ( String title , String value ) { return _BOOL ; }
public FunctionExecutionPooledExecutor ( BlockingQueue $F24548 q , int poolSize , PoolStatHelper stats , ThreadFactory tf ) { this ( q , poolSize , stats , tf , Integer . getInteger ( DistributionConfig . GEMFIRE_PREFIX + NUM00 , NUM00 * NUM00 ) , _BOOL ) ; }
protected boolean isSSDPDiscovery ( String body ) { if ( body != null && body . startsWith ( NUM00 ) && body . contains ( NUM00 ) ) { return _BOOL ; } return _BOOL ; }
$F1 public void addChild ( WXComponent child , int index ) { if ( child == null || index < - NUM00 ) $F932 if ( child instanceof WXBaseRefresh ) { if ( ! checkRefreshOrLoading ( child ) ) $F207 ( mRefreshs , child ) $F665 } $F9406 ( mChildren ) $F2199 ( count , mChildren ) index = index >= count ? - NUM00 : index ; if ( index == - NUM00 ) $F207 ( mChildren , child ) else $F42308 ( mChildren , index , child ) }
private void restoreSortingSelection ( $F2027 selection , int lead , ModelChange change ) { for ( $F26259 ( i , selection ) ) { selection [ i ] = convertRowIndexToView ( selection [ i ] , change ) ; } lead = convertRowIndexToView ( lead , change ) ; if ( selection . length == NUM00 || ( selection . length == NUM00 && selection [ NUM00 ] == getSelectedRow ( ) ) ) $F932 selectionModel . setValueIsAdjusting ( _BOOL ) ; $F149815 ( selectionModel ) for ( $F26259 ( i , selection ) ) { if ( selection [ i ] != - NUM00 ) { selectionModel . addSelectionInterval ( selection [ i ] , selection [ i ] ) ; } } SwingUtilities2 . setLeadAnchorWithoutSelection ( selectionModel , lead , lead ) ; selectionModel . setValueIsAdjusting ( _BOOL ) ; }
$F29611 ( remaining , count , EMPTY_BYTE_ARRAY , pos , buf , buffers , c , Math , System , newbuf )
$F92397 public void clean $F72 { mute ( null ) ; mute ( null ) ; mute ( null ) ; }
public void consume ( int eventCount , long timeoutInMillis , Predicate $F137768 condition ) throws TimeoutException { $F30465 ( eventCount ) $F7546 ( eventCount ) int eventsRemaining = eventCount ; final long stopTime = System . currentTimeMillis ( ) + timeoutInMillis ; while ( eventsRemaining > NUM00 && System . currentTimeMillis ( ) < stopTime ) { Event nextEvent = queue . poll ( ) ; if ( nextEvent != null ) { if $F167956 ( condition , nextEvent ) { -- eventsRemaining ; consumedEvents . accept ( nextEvent ) ; } else $F17670 ( ignoredEvents , nextEvent ) } } if ( eventsRemaining > NUM00 ) { throw new TimeoutException ( NUM00 + ( eventCount - eventsRemaining ) + NUM00 + eventCount + NUM00 + timeoutInMillis + NUM00 ) ; } }
private void updateUiFromCommand ( Command command ) { $F2329 ( command ) actionsComboBox . setText ( command . getAction ( ) ) ; dataTextField . setText ( command . getData ( ) ) ; categoryTextField . setText ( command . getCategory ( ) ) ; mimeTextField . setText ( command . getMimeType ( ) ) ; componentTextField . setText ( command . getComponent ( ) ) ; userTextField . setText ( command . getUser ( ) ) ; flagsList_ . removeSelectionInterval ( NUM00 , flagsList_ . getItemsCount ( ) ) ; List < IntentFlags > flags = command . getFlags ( ) ; if $F8841 ( flags ) { for ( IntentFlags flag : command . getFlags ( ) ) { flagsList_ . setSelectedValue ( flag , _BOOL ) ; } } else { $F53383 ( flagsList_ ) } updateFlagsTextField ( ) ; tableModel_ . removeAllRows ( ) ; List < ExtraField > extras = command . getExtras ( ) ; if $F8841 ( extras ) { for ( ExtraField extra : extras ) { tableModel_ . addRow ( extra ) ; } } updateTableVisibility ( ) ; }
public void testCompareToZeroZero $F72 { BigInteger aNumber = BigInteger . ZERO ; BigInteger bNumber = BigInteger . ZERO ; $F79260 ( assertEquals , aNumber , bNumber ) }
public static int randGaussian $F6803 ( mean , sd ) { return ( int ) ( rand . nextGaussian ( ) * sd + mean ) ; }
private float computeOverscrollPercent $F72 { if ( mOverScrollOffset >= NUM00 ) { return mOverScrollOffset / mMaxOverScroll ; } else { return mOverScrollOffset / mMaxUnderScroll ; } }
public IVector ( int c ) { vector = new int [ Math . max ( defaultCapacity , c ) ] ; }
public void processInvite ( RequestEvent requestEvent , ServerTransaction serverTransaction ) { final Request request = requestEvent . getRequest ( ) ; final SipProvider sipProvider = ( SipProvider ) requestEvent . getSource ( ) ; ServerTransaction st = serverTransaction ; try { if ( st == null ) { try { st = sipProvider . getNewServerTransaction ( request ) ; } catch ( TransactionUnavailableException tae ) { $F301 ( tae ) $F665 } catch ( TransactionAlreadyExistsException taex ) $F932 } final String toTag = NUM00 + System . nanoTime ( ) ; Response response = messageFactory . createResponse ( Response . RINGING , request ) ; $F38126 ( toHeader , response , ToHeader ) toHeader . setTag ( toTag ) ; st . sendResponse ( response ) ; $F38119 ( response , messageFactory , Response , request ) ; final Address address = addressFactory . createAddress ( NUM00 + myAddress + NUM00 + myPort + NUM00 ) ; final ContactHeader contactHeader = headerFactory . createContactHeader ( address ) ; response . addHeader ( contactHeader ) ; toHeader = ( ToHeader ) response . getHeader ( ToHeader . NAME ) ; toHeader . setTag ( toTag ) ; st . sendResponse ( response ) ; } $F1516 ( ex ) }
public static IgniteLogger logger ( GridKernalContext ctx , AtomicReference < IgniteLogger > logRef , Object obj ) { IgniteLogger log = logRef . get ( ) ; if ( log == null ) { logRef . compareAndSet ( null , ctx . log ( obj . getClass ( ) ) ) ; $F16478 ( log , logRef ) } return log ; }
protected boolean readReceiveDelay $F72 { try $F50527 ( receiveDelay , Integer , receiveDelayField ) catch ( Exception e ) $F50530 ( statusText1 , rb , _BOOL , receiveDelay , errorInStatus1 , resetNotes2 ) if ( receiveDelay < NUM00 ) $F50530 ( statusText1 , rb , _BOOL , receiveDelay , errorInStatus1 , resetNotes2 ) if ( receiveDelay > NUM00 ) $F50530 ( statusText1 , rb , _BOOL , receiveDelay , errorInStatus1 , resetNotes2 ) return _BOOL ; }
private void writeIndent ( int times ) throws IOException { for ( int i = options . getBaseIndent ( ) + times ; i > NUM00 ; i -- ) { writer . write ( options . getIndent ( ) ) ; } }
$F1 public int hashCode $F72 { int result = NUM00 ; $F195842 ( it , iterator ) while $F2921 ( it ) { $F8877 ( object , it ) result = ( NUM00 * result ) + $F50584 ( object ) ; } return result ; }
public static int parseString ( String value ) $F75349 ( Integer , value )
void doHandleJavaMouseEvent ( MouseEvent mouseEvent ) { if ( ! XToolkit . isLeftMouseButton ( mouseEvent ) && ! XToolkit . isRightMouseButton ( mouseEvent ) ) $F932 XBaseWindow grabWindow = XAwtState . getGrabWindow ( ) ; Point ptGlobal = mouseEvent . getLocationOnScreen ( ) ; if ( ! hasPointerMoved ) { if ( grabInputPoint == null || ( Math . abs ( ptGlobal . x - grabInputPoint . x ) > getMouseMovementSmudge ( ) ) || ( Math . abs ( ptGlobal . y - grabInputPoint . y ) > getMouseMovementSmudge ( ) ) ) { hasPointerMoved = _BOOL ; } } XBaseMenuWindow wnd = getMenuWindowFromPoint ( ptGlobal ) ; XMenuItemPeer item = ( wnd != null ) ? wnd . getItemFromPoint ( wnd . toLocal ( ptGlobal ) ) : null ; XBaseMenuWindow cwnd = getShowingLeaf ( ) ; switch ( mouseEvent . getID ( ) ) { case MouseEvent . MOUSE_PRESSED : showingMousePressedSubmenu = null ; if ( ( grabWindow == this ) && ( wnd == null ) ) $F5795 ( ungrabInput ) else { grabInput ( ) ; if ( item != null && ! item . isSeparator ( ) && item . isTargetItemEnabled ( ) ) { if ( wnd . getShowingSubmenu ( ) == item ) { showingMousePressedSubmenu = ( XMenuPeer ) item ; } wnd . selectItem ( item , _BOOL ) ; } else { if ( wnd != null ) { wnd . selectItem ( null , _BOOL ) ; } } } $F597 case MouseEvent . MOUSE_RELEASED : if ( item != null && ! item . isSeparator ( ) && item . isTargetItemEnabled ( ) ) { if ( item instanceof XMenuPeer ) { if ( showingMousePressedSubmenu == item ) { if ( wnd instanceof XMenuBarPeer ) $F5795 ( ungrabInput ) else { wnd . selectItem ( item , _BOOL ) ; } } } else { item . action ( mouseEvent . getWhen ( ) ) ; ungrabInput ( ) ; } } else { if ( hasPointerMoved || ( wnd instanceof XMenuBarPeer ) ) $F5795 ( ungrabInput ) } showingMousePressedSubmenu = null ; $F597 case MouseEvent . MOUSE_DRAGGED : if ( wnd != null ) { if ( item != null && ! item . isSeparator ( ) && item . isTargetItemEnabled ( ) ) { if ( grabWindow == this ) { wnd . selectItem ( item , _BOOL ) ; } } else { wnd . selectItem ( null , _BOOL ) ; } } else { if ( cwnd != null ) { cwnd . selectItem ( null , _BOOL ) ; } } $F597 } }
public boolean isInvalidNode $F72 { ASTNode first = fNodes . get ( NUM00 ) ; ASTNode candidate = first . getParent ( ) ; $F397 ( candidate , _BOOL ) if ( candidate . getNodeType ( ) == ASTNode . METHOD_DECLARATION ) return _BOOL ; return _BOOL ; }
public void push ( final float value ) { $F31338 ( bits , Float , value ) if $F31340 ( bits ) { mv . visitInsn ( Opcodes . FCONST_0 + ( int ) value ) ; } else $F31345 ( mv , value ) }
public void onMotion ( MotionEvent event , Interaction iact ) $F845
public synchronized void removeBatchClustererListener ( BatchClustererListener cl ) $F106 ( m_batchClustererListeners , cl )
public HeldLocksGrant refresh ( long expirationDateMs ) { return new HeldLocksGrant ( grantId , creationDateMs , expirationDateMs , lockMap , lockTimeout , versionId ) ; }
void removeKnownObject ( ParseObject object ) { $F15767 ( mutex , knownObjects , object ) }
static HeapBytesStore $F2147 wrap ( $F1113 $F96 bytes ) { return HeapBytesStore . wrap ( bytes ) ; }
private static String parse ( JsonValue base ) { if ( ! base . isString ( ) ) $F1337 return buildString ( base . asString ( ) ) ; }
public void testValueOfLongNegative2 $F72 { long longVal = - NUM00 ; $F2544 ( aNumber , BigInteger , longVal ) byte $F3018 = { - NUM00 , NUM00 , - NUM00 , - NUM00 } ; $F3030 ( rBytes ) $F3031 ( resBytes , aNumber ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , aNumber ) }
public void beforeInsert ( int index , char element ) { $F8871 ( index , size ) ensureCapacity ( size + NUM00 ) ; $F27096 ( System , elements , index , size ) elements [ index ] = element ; size ++ ; }
private void growEntries $F72 { int newLen = ( next . length < < NUM00 ) + NUM00 ; $F4120 ( newNext , newLen ) GridUnsafe . copyMemory ( next , INT_ARR_OFF , newNext , INT_ARR_OFF , size < < NUM00 ) ; next = newNext ; $F3936 ( nextEmpty , newLen ) $F99493 ( Arrays , nextEmpty ) $F133 ( newObjs , newLen ) $F135 ( System , objs , newObjs , size ) objs = newObjs ; }
public SidedPlane ( final Vector p , final boolean onSide , final Vector A , final Vector B ) { super ( A , B ) ; sigNum = onSide ? Math . signum ( evaluate ( p ) ) : - Math . signum ( evaluate ( p ) ) ; $F47005 ( sigNum ) }
public static boolean isInputStreamGZIPCompressed ( final PushbackInputStream inputStream ) throws IOException { $F397 ( inputStream , _BOOL ) $F12496 ( signature ) $F83249 ( readStatus , inputStream , signature ) inputStream . unread ( signature ) ; $F42455 ( streamHeader , signature ) return readStatus == NUM00 && GZIPInputStream . GZIP_MAGIC == streamHeader ; }
void insertOp $F14337 ( pos , length , op ) { $F219566 ( totalLen , m_ops , OpMap ) for ( $F151882 ( i , totalLen , pos ) ) { m_ops . setOp ( i + length , m_ops . getOp ( i ) ) ; } m_ops . setOp ( pos , op ) ; m_ops . setOp ( OpMap . MAPINDEX_LENGTH , totalLen + length ) ; }
private void clear $F72 { valid = _BOOL ; if $F21545 ( listenerObjects ) $F5795 ( deregisterListener ) ssm = null ; if ( SMSEntry . cacheSMSEntries ) $F5122 ( orgConfigs , globalConfigs ) }
public static void registerDecayableObject ( Decayable obj ) $F207 ( decayObjects , obj )
public static void assertExpectedOutputContains ( String expectedString , String x ) { if $F2200 ( x , expectedString ) { $F25590 ( fail , expectedString , x ) } }
public boolean remove ( String classname ) { String pkgname ; $F20799 ( names ) classname = cleanUp ( classname ) ; pkgname = extractPackage ( classname ) ; names = m_Cache . get ( pkgname ) ; if ( names != null ) $F20067 ( names , classname ) else { return _BOOL ; } }
public void testFailedStage $F72 { CFException ex = new CFException $F72 ; CompletionStage $F2305 f = CompletableFuture . failedStage ( ex ) ; AtomicInteger $F107657 ( x ) ; AtomicReference $F81247 r = new AtomicReference $F81247 $F72 ; f . whenComplete ( null ) ; assertEquals ( x . get ( ) , NUM00 ) ; $F38219 ( assertEquals , r , ex ) ; }
$F1 public void paintComponent ( Graphics g ) { super . paintComponent ( g ) ; $F20230 ( graphics , g ) graphics . setBackground ( mColorSpectrumBackground ) ; RenderingHints renderHints = new RenderingHints ( RenderingHints . KEY_ANTIALIASING , RenderingHints . VALUE_ANTIALIAS_ON ) ; renderHints . put ( RenderingHints . KEY_RENDERING , RenderingHints . VALUE_RENDER_QUALITY ) ; graphics . setRenderingHints ( renderHints ) ; drawFrequencies ( graphics ) ; drawCursor ( graphics ) ; }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
public void classLoaderDestroy ( DynamicClassLoader loader ) { Method $F5998 ( destroy , getDestroyMethod , _resource ) ; $F8249 ( destroy ) try $F173188 ( destroy , _resource ) $F173190 ( log , Level , e ) }
public boolean deleteAttachmentPoint ( DatapathId sw , OFPort port ) { AttachmentPoint ap = new AttachmentPoint ( sw , port , $F6419 ) ; if ( this . oldAPs != null ) { ArrayList < AttachmentPoint > apList = new ArrayList < AttachmentPoint > $F72 ; apList . addAll ( this . oldAPs ) ; $F12747 ( index , apList , ap ) if ( index > NUM00 ) { apList . remove ( index ) ; this . oldAPs = apList ; } } if ( this . attachmentPoints != null ) { ArrayList < AttachmentPoint > apList = new ArrayList < AttachmentPoint > $F72 ; apList . addAll ( this . attachmentPoints ) ; $F12747 ( index , apList , ap ) if ( index > NUM00 ) { apList . remove ( index ) ; this . attachmentPoints = apList ; return _BOOL ; } } return _BOOL ; }
static boolean isAssignableTo ( ClassNode type , ClassNode toBeAssignedTo ) { if ( UNKNOWN_PARAMETER_TYPE == type ) return _BOOL ; if ( type == toBeAssignedTo ) return _BOOL ; if ( toBeAssignedTo . redirect ( ) == NUM00 <missing ')'> _TYPE && type . redirect ( ) == G <missing ';'> NUM00 <missing ';'> _TYPE ) { return _BOOL ; } if ( isPrimitiveType ( toBeAssignedTo ) ) toBeAssignedTo = getWrapper ( toBeAssignedTo ) ; if ( isPrimitiveType ( type ) ) type = getWrapper ( type ) ; if ( Double_TYPE == toBeAssignedTo ) { return type . isDerivedFrom ( Number_TYPE ) ; } if ( Float_TYPE == toBeAssignedTo ) { return type . isDerivedFrom ( Number_TYPE ) && Double_TYPE != type . redirect ( ) ; } if ( Long_TYPE == toBeAssignedTo ) { return type . isDerivedFrom ( Number_TYPE ) && Double_TYPE != type . redirect ( ) && Float_TYPE != type . redirect ( ) ; } if ( Integer_TYPE == toBeAssignedTo ) { return type . isDerivedFrom ( Number_TYPE ) && Double_TYPE != type . redirect ( ) && Float_TYPE != type . redirect ( ) && Long_TYPE != type . redirect ( ) ; } if ( Short_TYPE == toBeAssignedTo ) { return type . isDerivedFrom ( Number_TYPE ) && Double_TYPE != type . redirect ( ) && Float_TYPE != type . redirect ( ) && Long_TYPE != type . redirect ( ) && Integer_TYPE != type . redirect ( ) ; } if ( Byte_TYPE == toBeAssignedTo ) { return type . redirect ( ) == Byte_TYPE ; } if ( type . isArray ( ) && toBeAssignedTo . isArray ( ) ) { return isAssignableTo ( type . getComponentType ( ) , toBeAssignedTo . getComponentType ( ) ) ; } if ( type . isDerivedFrom ( G <missing ')'> NUM00 <missing ';'> _TYPE ) && NUM00 <missing ';'> _TYPE . equals ( toBeAssignedTo ) ) { return _BOOL ; } if ( toBeAssignedTo . isDerivedFrom ( G <missing ')'> NUM00 <missing ';'> _TYPE ) && NUM00 <missing ';'> _TYPE . equals ( type ) ) { return _BOOL ; } if ( implementsInterfaceOrIsSubclassOf ( type , toBeAssignedTo ) ) { $F9506 ( OBJECT_TYPE , toBeAssignedTo , _BOOL ) if ( toBeAssignedTo . isUsingGenerics ( ) ) { GenericsType gt = GenericsUtils . buildWildcardType ( toBeAssignedTo ) ; return gt . isCompatibleWith ( type ) ; } return _BOOL ; } if ( type . isDerivedFrom ( CLOSURE_TYPE ) && isSAMType ( toBeAssignedTo ) ) { return _BOOL ; } return _BOOL ; }
public synchronized int totalRecoverFiles $F72 { int total = NUM00 ; for ( $F90432 ( file , fileDetails ) ) { if ( file . reused ( ) == _BOOL ) { total ++ ; } } return total ; }
$F107211 ( md5Model , animModel , defaultColour , invJointMatrices , calcInJointMatrices , animatedFrames , processAnimationFrames , list , md5Mesh , mesh , generateMesh , handleTexture , meshes , result )
$F156045 ( msg , x , super , this )
$F1 @ Timed public void deleteAssignment ( Experiment experiment , User . ID userID , Context context , Application . Name appName , Assignment currentAssignment ) { deleteUserFromLookUp ( experiment . getID ( ) , userID , context ) ; boolean countUp = _BOOL ; assignmentsCountExecutor . execute ( new AssignmentCountEnvelope ( assignmentsRepository , experimentRepository , dbRepository , experiment , currentAssignment , countUp , eventLog , null , assignUserToExport , assignBucketCount ) ) ; deleteAssignmentOld ( experiment . getID ( ) , userID , context , appName , currentAssignment . getBucketLabel ( ) ) ; removeIndexUserToExperiment ( userID , experiment . getID ( ) , context , appName ) ; removeIndexUserToBucket ( userID , experiment . getID ( ) , context , currentAssignment . getBucketLabel ( ) ) ; removeIndexExperimentsToUser ( userID , experiment . getID ( ) , context , appName ) ; }
String format ( Object obj , StringBuffer toAppendTo ) throws IllegalArgumentException { Date source = null ; if ( obj instanceof Date ) { source = ( Date ) obj ; } else if ( obj instanceof String ) { try { source = parse ( ( String ) obj ) ; } catch ( ParseException pe ) { throw new RuntimeException $F3362 ( pe ) ; } } if ( source == null ) { throw new IllegalArgumentException ( $F100654 ( obj ) ) ; } return format ( source , toAppendTo ) ; }
private static final boolean compareAndSetWaitStatus ( Node node , int expect , int update ) { return unsafe . compareAndSwapInt ( node , waitStatusOffset , expect , update ) ; }
public static ThreadDump create $F72 { ThreadDump threadDump = _threadDumpRef . get ( ) ; if ( threadDump == null ) { threadDump = new ThreadDumpPro $F72 ; _threadDumpRef . compareAndSet ( null , threadDump ) ; $F16478 ( threadDump , _threadDumpRef ) } return threadDump ; }
private void checkStart $F72 { if ( mCanProcessAudio && ! mOutput . isRunning ( ) && mOutput . available ( ) <= mBufferStartThreshold ) $F28175 ( mOutput ) }
protected boolean matchesFilter $F41327 ( input , filter ) { for ( final String match : filter ) { if $F2200 ( input , match ) return _BOOL ; } return _BOOL ; }
$F108235 ( f , first , n , item , last , count , notFull )
public IStatus run ( IProgressMonitor monitor ) { InputStream input = null ; FileOutputStream output = null ; IStatus jobStatus = Status . OK_STATUS ; $F12496 ( b ) int bytesRead ; try { $F7963 ( connection , url ) $F21223 ( input , url ) long totalBytesRead = NUM00 ; $F9520 ( responseStatusCode , connection ) if ( responseStatusCode >= HttpURLConnection . HTTP_BAD_REQUEST ) { jobStatus = new Status ( Status . ERROR , CorePlugin . PLUGIN_ID , MessageFormat . format ( NUM00 , responseStatusCode , connection . getResponseMessage ( ) ) ) ; } long contentLength = connection . getContentLength ( ) ; $F10893 ( output , target ) monitor . beginTask ( $F368 ( url ) , ( int ) contentLength ) ; while ( jobStatus == Status . OK_STATUS ) { if ( contentLength > NUM00 && totalBytesRead >= contentLength ) $F5153 bytesRead = input . read ( b ) ; $F76065 ( bytesRead ) $F11584 ( output , b , bytesRead ) totalBytesRead += bytesRead ; monitor . worked ( bytesRead ) ; if ( monitor . isCanceled ( ) ) { jobStatus = Status . CANCEL_STATUS ; $F597 } } } catch ( MalformedURLException e ) { jobStatus = new Status ( Status . ERROR , CorePlugin . PLUGIN_ID , NUM00 + url . toExternalForm ( ) , e ) ; } catch ( IOException e ) { jobStatus = new Status ( Status . ERROR , CorePlugin . PLUGIN_ID , NUM00 + url . toExternalForm ( ) , e ) ; } closeStreams ( input , output ) ; return jobStatus ; }
private static synchronized void initDocBuilderFactory $F72 { $F33943 ( docBuilderFactory , DocumentBuilderFactory ) docBuilderFactory . setIgnoringComments ( _BOOL ) ; docBuilderFactory . setCoalescing ( _BOOL ) ; }
$F149158 ( Math , svar0 )
private void createMissingValues $F72 { $F113821 ( sql ) PreparedStatement pstmt = null ; try { $F213538 ( pstmt , DB , sql , get_TrxName ) pstmt . setInt ( NUM00 , getA_Registration_ID ( ) ) ; $F49 ( rs , pstmt ) while $F1682 ( rs ) { MRegistrationValue v = new MRegistrationValue ( this , rs . getInt ( NUM00 ) , NUM00 ) ; $F45240 ( v ) } $F59 ( rs ) $F59 ( pstmt ) pstmt = null ; } catch ( Exception e ) { log . log ( Level . SEVERE , null , e ) ; } $F285021 ( pstmt ) }
private static String normalisePath ( String path ) $F11447 ( path )
public void startLaunchNotifier $F72 { $F61745 ( m_launchNotification ) m_launchNotifierThread . setDaemon ( _BOOL ) ; $F2346 ( m_launchNotifierThread ) }
private static void encode ( List < AclEntry > acl , long address ) { long offset = address ; for ( AclEntry ace : acl ) { int flags = NUM00 ; UserPrincipal who = ace . principal ( ) ; if ( ! ( who instanceof UnixUserPrincipals . User ) ) throw new ProviderMismatchException $F72 ; UnixUserPrincipals . User user = ( UnixUserPrincipals . User ) who ; int uid ; if ( user . isSpecial ( ) ) { uid = - NUM00 ; if ( who == UnixUserPrincipals . SPECIAL_OWNER ) flags |= ACE_OWNER ; else if ( who == UnixUserPrincipals . SPECIAL_GROUP ) flags |= ( ACE_GROUP | ACE_IDENTIFIER_GROUP ) ; else if ( who == UnixUserPrincipals . SPECIAL_EVERYONE ) flags |= ACE_EVERYONE ; else $F38997 } else { if ( user instanceof UnixUserPrincipals . Group ) { uid = user . gid ( ) ; flags |= ACE_IDENTIFIER_GROUP ; } else $F57332 ( uid , user ) } int type ; switch ( ace . type ( ) ) { case ALLOW : type = ACE_ACCESS_ALLOWED_ACE_TYPE ; $F597 case DENY : type = ACE_ACCESS_DENIED_ACE_TYPE ; $F597 case AUDIT : type = ACE_SYSTEM_AUDIT_ACE_TYPE ; $F597 case ALARM : type = ACE_SYSTEM_ALARM_ACE_TYPE ; $F597 $F1267 $F38997 } Set < AclEntryPermission > aceMask = ace . permissions ( ) ; int mask = NUM00 ; if ( aceMask . contains ( AclEntryPermission . READ_DATA ) ) mask |= ACE_READ_DATA ; if ( aceMask . contains ( AclEntryPermission . WRITE_DATA ) ) mask |= ACE_WRITE_DATA ; if ( aceMask . contains ( AclEntryPermission . APPEND_DATA ) ) mask |= ACE_APPEND_DATA ; if ( aceMask . contains ( AclEntryPermission . READ_NAMED_ATTRS ) ) mask |= ACE_READ_NAMED_ATTRS ; if ( aceMask . contains ( AclEntryPermission . WRITE_NAMED_ATTRS ) ) mask |= ACE_WRITE_NAMED_ATTRS ; if ( aceMask . contains ( AclEntryPermission . EXECUTE ) ) mask |= ACE_EXECUTE ; if ( aceMask . contains ( AclEntryPermission . DELETE_CHILD ) ) mask |= ACE_DELETE_CHILD ; if ( aceMask . contains ( AclEntryPermission . READ_ATTRIBUTES ) ) mask |= ACE_READ_ATTRIBUTES ; if ( aceMask . contains ( AclEntryPermission . WRITE_ATTRIBUTES ) ) mask |= ACE_WRITE_ATTRIBUTES ; if ( aceMask . contains ( AclEntryPermission . DELETE ) ) mask |= ACE_DELETE ; if ( aceMask . contains ( AclEntryPermission . READ_ACL ) ) mask |= ACE_READ_ACL ; if ( aceMask . contains ( AclEntryPermission . WRITE_ACL ) ) mask |= ACE_WRITE_ACL ; if ( aceMask . contains ( AclEntryPermission . WRITE_OWNER ) ) mask |= ACE_WRITE_OWNER ; if ( aceMask . contains ( AclEntryPermission . SYNCHRONIZE ) ) mask |= ACE_SYNCHRONIZE ; Set < AclEntryFlag > aceFlags = ace . flags ( ) ; if ( aceFlags . contains ( AclEntryFlag . FILE_INHERIT ) ) flags |= ACE_FILE_INHERIT_ACE ; if ( aceFlags . contains ( AclEntryFlag . DIRECTORY_INHERIT ) ) flags |= ACE_DIRECTORY_INHERIT_ACE ; if ( aceFlags . contains ( AclEntryFlag . NO_PROPAGATE_INHERIT ) ) flags |= ACE_NO_PROPAGATE_INHERIT_ACE ; if ( aceFlags . contains ( AclEntryFlag . INHERIT_ONLY ) ) flags |= ACE_INHERIT_ONLY_ACE ; unsafe . putInt ( offset + OFFSETOF_UID , uid ) ; unsafe . putInt ( offset + OFFSETOF_MASK , mask ) ; unsafe . putShort ( offset + OFFSETOF_FLAGS , ( short ) flags ) ; unsafe . putShort ( offset + OFFSETOF_TYPE , ( short ) type ) ; offset += SIZEOF_ACE_T ; } }
public static String expandHiddenDir ( final String filename ) { final int macro = filename . indexOf ( hiddenDirMacro , NUM00 ) ; String expandedFilter ; $F5881 ( macro , filename ) $F135076 ( Cfg , Check , TAG ) expandedFilter = filename . replaceFirst ( NUM00 , StringUtils . chomp ( Path . hidden ( ) , NUM00 ) ) ; $F44970 ( Cfg , Check , TAG , expandedFilter ) return expandedFilter ; }
private boolean tryQueueCurrentBuffer ( long elapsedWaiting ) { $F69790 ( currentBuffer , _BOOL ) if ( isOpen && neverPubQueue . size ( ) < neverPubCapacity ) { neverPubQueue . add ( currentBuffer ) ; totalQueuedRecords . addAndGet ( currentBuffer . sizeRecords ( ) ) ; $F5224 ( totalQueuedBuffers ) onQueueBufferSuccess ( currentBuffer , elapsedWaiting ) ; currentBuffer = new RecordBuffer $F200 ( flow ) ; return _BOOL ; } else if ( elapsedWaiting > NUM00 ) $F74118 ( onQueueBufferTimeout , currentBuffer , elapsedWaiting , _BOOL ) else return _BOOL ; }
public void updateValue ( final Object value , final boolean isSelected , boolean sync ) { $F84963 ( isReadOnly ) if ( GenericFormFactory . isTextForm ( formType ) ) { textString = ( String ) value ; if $F1256 ( textString , lastTextString ) { sync = _BOOL ; } lastTextString = textString ; } else { textString = ( String ) value ; this . isSelected = isSelected ; if ( isSelected != lastIsSelected && lastTextString != null && textString != null && textString . equals ( lastTextString ) ) { sync = _BOOL ; } lastTextString = textString ; lastIsSelected = isSelected ; } if ( ( sync && guiType != FormFactory . ULC ) && guiComp != null ) { syncGUI ( value ) ; } }
public boolean hasNext $F72 throws IOException { $F46282 ( dataInputStream ) $F7468 ( val , dataInputStream ) $F2268 ( dataInputStream ) return val != - NUM00 ; }
private final StringBuilder appendParameterSignature ( StringBuilder buffer , $F28330 ( parameterTypes ) , $F28330 ( parameterNames ) ) { if ( parameterTypes != null ) { for ( $F1139 ( i , parameterTypes ) ) { if ( i > NUM00 ) $F48903 ( buffer ) $F6939 ( buffer , parameterTypes , i ) if ( parameterNames != null && parameterNames [ i ] != null ) { $F84 ( buffer ) $F6939 ( buffer , parameterNames , i ) } } } return buffer ; }
public void completeHeartbeat ( Database database , long seqno , String eventId ) throws SQLException { $F51622 ( logger ) Statement st = null ; ResultSet rs = null ; Timestamp sts = new Timestamp $F989 ; Timestamp now = $F32 ( System ) ; $F300029 whereClause = new $F300029 $F72 ; $F300029 values = new $F300029 $F72 ; $F51620 ( logger , now ) try { $F2715 ( st , database ) rs = st . executeQuery ( sourceTsQuery ) ; if $F1682 ( rs ) sts = rs . getTimestamp ( NUM00 ) ; } finally { $F31187 ( rs ) $F31187 ( st ) } long $F13543 ( lag_millis , now , sts ) ; hbId . setValue ( KEY ) ; whereClause . add ( hbId ) ; hbSeqno . setValue ( seqno ) ; hbEventId . setValue ( eventId ) ; hbTargetTstamp . setValue ( now ) ; hbLagMillis . setValue ( lag_millis ) ; values . add ( hbSeqno ) ; values . add ( hbEventId ) ; values . add ( hbTargetTstamp ) ; values . add ( hbLagMillis ) ; database . update ( hbTable , whereClause , values ) ; }
public CipherParameters decrypt $F7159 ( in , inOff , inLen , keyLen ) throws IllegalArgumentException { if ( ! key . isPrivate ( ) ) $F825 BigInteger n = key . getModulus ( ) ; BigInteger d = key . getExponent ( ) ; $F2175 ( C , inLen ) $F198866 ( System , in , inOff , C ) BigInteger $F105488 ( c , C ) ; BigInteger r = c . modPow ( d , n ) ; return generateKey ( n , r , keyLen ) ; }
public PrivateKey loadPrivateKey $F72 throws Exception { if ( defaultKeys ) { return getPrivateKeyFromString ( RSAKeyLoader . DEFAULT_PKEY ) ; } if ( priKey == null ) { FileReader f = new FileReader ( path + NUM00 + this . id ) ; $F20481 ( r , f ) String tmp = NUM00 ; String key = NUM00 ; while $F443 ( tmp , r ) { key = key + tmp ; } $F59 ( f ) $F59 ( r ) priKey = getPrivateKeyFromString ( key ) ; } return priKey ; }
public void removeCategoriesListener ( SnapshotCategoriesListener listener ) $F106 ( listeners , listener )
public boolean hasUnsupportedCriticalExtension $F72 { Set extns = getCriticalExtensionOIDs ( ) ; $F1933 ( extns , _BOOL ) extns . remove ( RFC3280CertPathUtilities . ISSUING_DISTRIBUTION_POINT ) ; extns . remove ( RFC3280CertPathUtilities . DELTA_CRL_INDICATOR ) ; $F3386 ( extns ) }
private Integer zGetWeekNumberForASevenDayRange ( LocalDate firstDateInRange , WeekFields weekFieldRules , boolean requireUnanimousWeekNumber ) { $F15277 ( weekNumbersList ) for ( int daysIntoTheFuture = NUM00 ; daysIntoTheFuture <= NUM00 ; ++ daysIntoTheFuture ) { LocalDate currentDateInRange ; try { currentDateInRange = firstDateInRange . plusDays ( daysIntoTheFuture ) ; int currentWeekNumber = currentDateInRange . get ( weekFieldRules . weekOfWeekBasedYear ( ) ) ; weekNumbersList . add ( currentWeekNumber ) ; } catch ( Exception ex ) $F1083 } boolean isUnanimous = ( InternalUtilities . areObjectsEqual ( $F6243 ( weekNumbersList ) ) ) ; if ( isUnanimous ) $F38160 ( weekNumbersList ) $F5972 ( requireUnanimousWeekNumber ) int mostCommonWeekNumber = InternalUtilities . getMostCommonElementInList ( weekNumbersList ) ; return mostCommonWeekNumber ; }
private boolean isNotInArray $F8306 ( str , array ) { for ( $F1139 ( i , array ) ) $F55055 ( str , array , i , _BOOL ) return _BOOL ; }
Node cloneOrImportNode ( short operation , Node node , boolean deep ) { NodeImpl copy = shallowCopy ( operation , node ) ; if ( deep ) { $F9040 ( list , node ) for ( $F85554 ( i , list ) ) { copy . appendChild ( cloneOrImportNode ( operation , list . item ( i ) , deep ) ) ; } } notifyUserDataHandlers ( operation , node , copy ) ; return copy ; }
public static synchronized void cleanup $F72 { $F8934 ( w ) try { secp256k1_destroy_context ( Secp256k1Context . getContext ( ) ) ; } $F796 ( w ) }
public void init $F72 throws Exception { loadParameterFromZK ( ) ; _invalidLoginCleanupExecutor . scheduleWithFixedDelay ( new InvalidLoginCleaner $F72 , CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS , CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS , TimeUnit . MINUTES ) ; $F10635 ( _log , _maxAuthnLoginAttemtsCount ) $F10635 ( _log , _maxAuthnLoginAttemtsLifeTimeInMins ) $F10635 ( _log , CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS ) }
public $F3803 makeURLList ( String shard ) { $F3803 urls = StrUtils . splitSmart ( shard , NUM00 , _BOOL ) ; for ( $F2277 ( i , urls ) ) { urls . set ( i , buildUrl ( urls . get ( i ) ) ) ; } if $F3817 ( urls ) Collections . shuffle ( urls , r ) ; return urls ; }
public InputStreamReader reader ( final String charset ) throws HttpRequestException { try { return new InputStreamReader ( stream ( ) , getValidCharset ( charset ) ) ; } catch ( UnsupportedEncodingException e ) { throw new HttpRequestException ( e ) ; } }
private $F96 toZLIB ( RenderedImage image , Color bkg , String colorModel ) throws IOException { return ImageGraphics2D . toByteArray ( image , ImageConstants . RAW , ImageConstants . ENCODING_FLATE_ASCII85 , ImageGraphics2D . getRAWProperties ( bkg , colorModel ) ) ; }
public void addVertex ( Object id ) throws IllegalArgumentException { if ( initialized ) $F26853 Vertex vertex = new Vertex ( id ) ; Object existing = vertexMap . put ( id , vertex ) ; if ( existing != null ) $F26853 vertexList . add ( vertex ) ; }
public void configureLocalServices $F72 { clientMemo . setLnTrafficController ( this ) ; clientMemo . configureCommandStation ( LnCommandStationType . COMMAND_STATION_DCS100 , _BOOL , _BOOL ) ; clientMemo . configureManagers ( ) ; }
private static int indexOf ( int fromIndex , CharSequence csq ) { $F74334 ( csq ) $F115 ( length , csq ) int j = fromIndex ; int i = ( j < length ) ? csq . charAt ( j ++ ) : NUM00 ; i <<= NUM00 ; i |= ( j < length ) ? csq . charAt ( j ++ ) : NUM00 ; return i ; }
protected SizeRequirements calculateMinorAxisRequirements ( int axis , SizeRequirements r ) { updateGrid ( ) ; calculateColumnRequirements ( axis ) ; if ( r == null ) { r = new SizeRequirements $F72 ; } long min = NUM00 ; long pref = NUM00 ; int n = columnRequirements . length ; for ( $F119 ( i , n ) ) { SizeRequirements req = columnRequirements [ i ] ; min += req . minimum ; pref += req . preferred ; } int adjust = ( n + NUM00 ) * cellSpacing + NUM00 * borderWidth ; min += adjust ; pref += adjust ; r . minimum = ( int ) min ; r . preferred = ( int ) pref ; r . maximum = ( int ) pref ; AttributeSet attr = getAttributes ( ) ; CSS . LengthValue cssWidth = ( CSS . LengthValue ) attr . getAttribute ( CSS . Attribute . WIDTH ) ; if ( BlockView . spanSetFromAttributes ( axis , r , cssWidth , null ) ) { if ( r . minimum < ( int ) min ) { r . maximum = r . minimum = r . preferred = ( int ) min ; } } totalColumnRequirements . minimum = r . minimum ; totalColumnRequirements . preferred = r . preferred ; totalColumnRequirements . maximum = r . maximum ; Object o = attr . getAttribute ( CSS . Attribute . TEXT_ALIGN ) ; if ( o != null ) { $F1822 ( ta , o ) if $F3057 ( ta ) { r . alignment = NUM00 ; } else if $F3057 ( ta ) { r . alignment = NUM00 ; } else if $F3057 ( ta ) { r . alignment = NUM00 ; } else { r . alignment = NUM00 ; } } else { r . alignment = NUM00 ; } return r ; }
public void append ( String string ) { for ( $F1088 ( i , string ) ) append ( string . charAt ( i ) ) ; }
public ListenableFuture $F4 push ( final String name , final Expression func ) { String let = String . format ( NUM00 , name , func . toHaskell ( ) ) ; return pullRaw ( let ) ; }
public final String toString ( int depth ) { if ( depth <= NUM00 ) $F1278 return ( $F18412 ( super , depth , mantissa ) + NUM00 + exponent + NUM00 + $F161291 ( bigVal ) + NUM00 + image ) ; }
public MetaDataColumnDescriptor ( String columnName , int jdbcType , Object defaultValue ) { _columnName = columnName . toUpperCase ( ) ; _jdbcType = jdbcType ; _defaultValue = defaultValue ; }
private void bulkLoad ( $F1986 lmin , $F1986 lmax , $F27878 children , ArrayModifiableDBIDs ids , int start , int end , int dim , int level , int code ) { if ( dim == NUM00 ) { DBIDArrayIter iter = ids . iter ( ) ; iter . seek ( start ) ; $F69812 ( first , relation , iter ) $F60136 ( iter ) boolean degenerate = _BOOL ; loop : for ( ; iter . getOffset ( ) < end ; iter . advance ( ) ) { $F69812 ( other , relation , iter ) for ( $F1139 ( d , lmin ) ) { if ( Math . abs ( first . doubleValue ( d ) - other . doubleValue ( d ) ) > NUM00 ) { degenerate = _BOOL ; $F217121 } } } if ( degenerate ) { $F40939 ( center , lmin ) for ( $F1139 ( d , lmin ) ) { center [ d ] = lmin [ d ] * NUM00 + lmax [ d ] * NUM00 + shift [ d ] ; if ( center [ d ] > min [ d ] + width [ d ] ) { center [ d ] -= width [ d ] ; } } children . add ( new Node ( code , center , end - start , level , null ) ) ; $F665 } } if ( dim == lmin . length ) { $F40939 ( center , lmin ) for ( $F1139 ( d , lmin ) ) { center [ d ] = lmin [ d ] * NUM00 + lmax [ d ] * NUM00 + shift [ d ] ; if ( center [ d ] > min [ d ] + width [ d ] ) { center [ d ] -= width [ d ] ; } } if ( end - start < nmin ) { children . add ( new Node ( code , center , end - start , level , null ) ) ; $F665 } else { $F245843 ( newchildren ) bulkLoad ( lmin , lmax , newchildren , ids , start , end , NUM00 , level + NUM00 , NUM00 ) ; children . add ( new Node ( code , center , end - start , level , newchildren ) ) ; $F665 } } else { DBIDArrayIter siter = ids . iter ( ) , eiter = ids . iter ( ) ; siter . seek ( start ) ; eiter . seek ( end - NUM00 ) ; while ( siter . getOffset ( ) < eiter . getOffset ( ) ) { if ( getShiftedDim ( relation . get ( siter ) , dim , level ) <= NUM00 ) { $F60136 ( siter ) $F598 } if ( getShiftedDim ( relation . get ( eiter ) , dim , level ) > NUM00 ) { eiter . retract ( ) ; $F598 } ids . swap ( siter . getOffset ( ) , eiter . getOffset ( ) - NUM00 ) ; $F60136 ( siter ) eiter . retract ( ) ; } final int spos = siter . getOffset ( ) ; if ( start < spos ) { final double tmp = lmax [ dim ] ; lmax [ dim ] = lmax [ dim ] * NUM00 + lmin [ dim ] * NUM00 ; bulkLoad ( lmin , lmax , children , ids , start , spos , dim + NUM00 , level , code ) ; lmax [ dim ] = tmp ; } if ( spos < end ) { final double tmp = lmin [ dim ] ; lmin [ dim ] = lmax [ dim ] * NUM00 + lmin [ dim ] * NUM00 ; bulkLoad ( lmin , lmax , children , ids , spos , end , dim + NUM00 , level , code | ( NUM00 < < dim ) ) ; lmin [ dim ] = tmp ; } } }
protected $F46573 _forwardPoly ( $F5415 rawllpts , int ltype , int nsegs , boolean isFilled ) { boolean DEBUG = Debug . debugging ( NUM00 ) ; int len = $F92855 ( rawllpts ) ; if ( len < NUM00 ) return new $F46573 $F989 ; if ( isComplicatedLineType ( ltype ) ) return doPolyDispatch ( rawllpts , ltype , nsegs , isFilled ) ; int invalid_count = NUM00 ; boolean curr_invalid , prev_invalid = _BOOL ; $F101628 ( temp ) AzimuthVar az_first = null , az_save = null , azVar = new AzimuthVar $F72 ; ArrayList < AzimuthVar > sections = new ArrayList < AzimuthVar > $F989 ; $F5415 x_ , xs = new float [ len ] ; $F5415 y_ , ys = new float [ len ] ; _forward ( rawllpts [ NUM00 ] , rawllpts [ NUM00 ] , temp , azVar ) ; xs [ NUM00 ] = temp . x ; ys [ NUM00 ] = temp . y ; prev_invalid = azVar . invalid_forward ; if ( prev_invalid ) { ++ invalid_count ; } else { azVar . index = NUM00 ; azVar . current_azimuth = GreatCircle . sphericalAzimuth ( ( float ) centerY , ( float ) centerX , rawllpts [ NUM00 ] , rawllpts [ NUM00 ] ) ; if ( ! isFilled ) $F207 ( sections , azVar ) else { az_first = azVar ; } azVar = new AzimuthVar $F72 ; } int i = NUM00 , j = NUM00 ; for ( i = NUM00 , j = NUM00 ; i < len ; i ++ , j += NUM00 ) { azVar . invalid_forward = _BOOL ; _forward ( $F99948 ( rawllpts , j , temp , azVar ) ) ; curr_invalid = azVar . invalid_forward ; xs [ i ] = temp . x ; ys [ i ] = temp . y ; if ( ! curr_invalid && prev_invalid ) { azVar . index = i - NUM00 ; azVar . current_azimuth = GreatCircle . sphericalAzimuth ( ( float ) centerY , ( float ) centerX , rawllpts [ j - NUM00 ] , rawllpts [ j - NUM00 ] ) ; sections . add ( azVar ) ; azVar = new AzimuthVar $F72 ; } else if ( curr_invalid ) { if ( ! prev_invalid ) { azVar . index = i ; if ( isFilled && ( invalid_count == NUM00 ) ) { az_save = azVar ; } else $F207 ( sections , azVar ) azVar = new AzimuthVar $F72 ; } ++ invalid_count ; } prev_invalid = curr_invalid ; } if ( invalid_count == NUM00 ) { $F46573 ret_val = new $F46573 $F989 ; ret_val . add ( xs ) ; ret_val . add ( ys ) ; return ret_val ; } if ( invalid_count == len ) { return new $F46573 $F989 ; } if ( ! prev_invalid ) { if $F294167 ( isFilled , az_save ) { int l = az_save . index ; x_ = new float [ len + l ] ; y_ = new float [ len + l ] ; $F135 ( System , xs , x_ , len ) $F135 ( System , ys , y_ , len ) $F6483 ( System , xs , x_ , len , l ) $F6483 ( System , ys , y_ , len , l ) az_save . index = len + l ; sections . add ( az_save ) ; xs = x_ ; ys = y_ ; } else { if ( DEBUG && isFilled && ( az_save == null ) ) { $F18535 ( Debug ) } azVar . index = i ; j = rawllpts . length ; azVar . current_azimuth = GreatCircle . sphericalAzimuth ( ( float ) centerY , ( float ) centerX , rawllpts [ j - NUM00 ] , rawllpts [ j - NUM00 ] ) ; sections . add ( azVar ) ; } } else if ( az_save != null ) { $F32006 ( DEBUG , Debug ) sections . add ( az_first ) ; sections . add ( az_save ) ; } $F115 ( size , sections ) $F46573 ret_val = new $F46573 ( size ) ; if ( isFilled && ( len > NUM00 ) ) { generateFilledPoly ( xs , ys , sections , ret_val ) ; return ret_val ; } for ( j = NUM00 ; j < size ; j += NUM00 ) { AzimuthVar az1 = ( AzimuthVar ) sections . get ( j ) ; AzimuthVar az2 = ( AzimuthVar ) sections . get ( j + NUM00 ) ; int off1 = az1 . index ; int off2 = az2 . index ; int l = off2 - off1 ; $F189191 ( x_ , l ) $F189191 ( y_ , l ) $F21535 ( System , xs , off1 , x_ , l ) $F21535 ( System , ys , off1 , y_ , l ) ret_val . add ( x_ ) ; ret_val . add ( y_ ) ; } return ret_val ; }
private $F5 filterYears $F39268 ( items ) { $F13710 iterator ; $F4377 ( now , Calendar ) $F91762 ( year , now , Calendar ) $F2544 ( yearInString , String , year ) $F12258 ( Log , TAG , yearInString ) int prevYear = year - NUM00 ; $F2544 ( prevYearInString , String , prevYear ) $F12258 ( Log , TAG , prevYearInString ) for ( iterator = items . iterator ( ) ; iterator . hasNext ( ) ; ) { $F13714 ( s , iterator ) if ( s . matches ( NUM00 ) && ! s . contains ( yearInString ) && ! s . contains ( prevYearInString ) ) { $F12258 ( Log , TAG , s ) $F7042 ( iterator ) } } $F91773 ( Log , TAG , items ) return items ; }
public DataProviderEvent ( final LocalizableMessage reason , final Set $F12993 types ) { Reject . ifNull ( reason , types ) ; Reject . ifTrue ( types . isEmpty ( ) ) ; this . reason = reason ; final EnumSet $F12993 tmp = EnumSet . noneOf ( Type . class ) ; tmp . addAll ( types ) ; this . types = Collections . unmodifiableSet ( tmp ) ; }
public $F4203 $F3803 validateBean ( T bean , String errIfBeanNull ) { $F10144 ( errors ) if ( bean == null ) $F56741 ( errors , errIfBeanNull ) Set < ConstraintViolation $F4203 > violations = validator . validate ( bean ) ; for ( ConstraintViolation $F4203 violation : violations ) { errors . add ( violation . getMessage ( ) ) ; } return errors ; }
protected void smartInsertAfterBracket ( IDocument document , DocumentCommand command ) { if ( command . offset == - NUM00 || document . getLength ( ) == NUM00 ) $F932 try { int p = ( command . offset == document . getLength ( ) ? command . offset - NUM00 : command . offset ) ; int line = document . getLineOfOffset ( p ) ; int start = document . getLineOffset ( line ) ; int whiteend = findEndOfWhiteSpace ( document , start , command . offset ) ; if ( whiteend == command . offset ) { int indLine = findMatchingOpenBracket ( document , line , command . offset , NUM00 ) ; if ( indLine != - NUM00 && indLine != line ) { StringBuffer replaceText = new StringBuffer ( getIndentOfLine ( document , indLine ) ) ; replaceText . append ( document . get ( whiteend , command . offset - whiteend ) ) ; replaceText . append ( command . text ) ; command . length = command . offset - start ; command . offset = start ; command . text = replaceText . toString ( ) ; } } } catch ( BadLocationException e ) { GWTPluginLog . logError ( e ) ; } }
private String attemptToChooseFormattingPattern $F72 { if $F85574 ( nationalNumber , MIN_LEADING_DIGITS_LENGTH ) { $F31458 ( getAvailableFormats , nationalNumber ) String formattedNumber = attemptToFormatAccruedDigits ( ) ; if $F4012 ( formattedNumber ) { return formattedNumber ; } return maybeCreateNewTemplate ( ) ? inputAccruedNationalNumber ( ) : accruedInput . toString ( ) ; } else { $F17718 ( appendNationalNumber , nationalNumber ) } }
private void fillPicks $F72 throws Exception { MLookup orgL = MLookupFactory . get ( Env . getCtx ( ) , m_WindowNo , NUM00 , NUM00 , DisplayType . TableDir ) ; fWarehouse = new VLookup ( NUM00 , _BOOL , _BOOL , _BOOL , orgL ) ; $F405063 ( lWarehouse , Msg , Env ) fWarehouse . addVetoableChangeListener ( this ) ; $F37891 ( m_M_Warehouse_ID , fWarehouse ) MLookup bpL = MLookupFactory . get ( Env . getCtx ( ) , m_WindowNo , NUM00 , NUM00 , DisplayType . Search ) ; fBPartner = new VLookup ( NUM00 , _BOOL , _BOOL , _BOOL , bpL ) ; $F405063 ( lBPartner , Msg , Env ) fBPartner . addVetoableChangeListener ( this ) ; $F405063 ( lDocType , Msg , Env ) cmbDocType . addItem ( new KeyNamePair ( MOrder . Table_ID , $F9206 ( Msg , Env ) ) ) ; cmbDocType . addItem ( new KeyNamePair ( MRMA . Table_ID , $F9206 ( Msg , Env ) ) ) ; cmbDocType . addActionListener ( this ) ; }
$F1 protected FieldConfigBase createCopy ( FieldConfigBase fieldConfigBase ) { FieldConfigFontPreview copy = null ; if ( fieldConfigBase != null ) { copy = new FieldConfigFontPreview ( fieldConfigBase . getCommonData ( ) ) ; } return copy ; }
public void testConstructorSignBytesZeroNull3 $F72 { byte $F3009 = $F845 ; int aSign = NUM00 ; $F15143 $F3023 ( aNumber , aSign , aBytes ) $F3030 ( rBytes ) $F3031 ( resBytes , aNumber ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , aNumber ) }
public Object castToType ( int t , XPathContext support ) throws $F1872 { Object result ; switch ( t ) { case CLASS_ NUM00 : result = str ( ) ; $F597 case CLASS1BER : result = new Double ( num ( ) ) ; $F597 case CLASS_NODESET : result = iter ( ) ; $F597 case CLASS_BOOLEAN : result = new Boolean ( bool ( ) ) ; $F597 case CLASS_UNKNOWN : result = m_obj ; $F597 default : error ( XPATHErrorResources . ER_CANT_CONVERT_TO_TYPE , new Object [ ] { getTypeString ( ) , Integer . toString ( t ) } ) ; result = null ; } return result ;
public static void forceDeleteOnExit ( File file ) throws IOException { if $F3444 ( file ) { deleteDirectoryOnExit ( file ) ; } else $F125403 ( file ) }
public boolean init ( StepMetaInterface smi , StepDataInterface sdi ) { this . meta = ( ( SortKeyStepMeta ) smi ) ; this . data = ( ( SortKeyStepData ) sdi ) ; return super . init ( smi , sdi ) ; }
private void printAnnotationFromEditor ( final WorkflowAnnotation anno , final Graphics2D g2 ) { $F317 ( gPr , g2 ) Rectangle2D loc = anno . getLocation ( ) ; gPr . translate ( $F5048 ( loc ) ) ; gPr . setClip ( NUM00 , NUM00 , $F63353 ( loc ) , $F63349 ( loc ) ) ; Dimension size = new Dimension ( $F63353 ( loc ) , $F63349 ( loc ) ) ; pane . setSize ( size ) ; pane . setText ( AnnotationDrawUtils . createStyledCommentString ( anno ) ) ; $F197394 ( pane ) pane . paint ( gPr ) ; $F355 ( gPr ) }
public void add ( IPoint pt ) { if ( inProgress ) { throw new ConcurrentModificationException $F580 ; } points . add ( pt ) ; }
public static Configuration load ( Reader reader ) throws IOException { try { $F2697 ( properties ) properties . load ( reader ) ; return from ( properties ) ; } $F3229 ( reader ) }
public void add ( OffsettedItem item ) { throwIfPrepared ( ) ; try { if ( item . getAlignment ( ) > getAlignment ( ) ) $F825 } catch ( NullPointerException ex ) $F895 items . add ( item ) ; }
public static void addAnnotationToXML ( Element annotationsElement , String name , String value ) { if ( value == null ) { deleteAnnotationFromXML ( annotationsElement , name ) ; } else { final Document doc = annotationsElement . getOwnerDocument ( ) ; $F8382 ( elem , doc ) annotationsElement . appendChild ( elem ) ; $F34765 ( elem , name ) elem . setTextContent ( value ) ; } }
public boolean readBoolean $F72 throws IOException { return primitiveTypes . readBoolean ( ) ; }
public $F14937 enumerateMeasures $F72 { $F75150 ( newVector ) $F6519 ( newVector ) $F1007 ( newVector ) }
$F1 public Instances defineDataFormat $F72 throws Exception { $F95963 ( atts ) $F5 attValues ; int i ; $F23765 ( m_Random , getSeed ) ; m_nextClassShouldBeZero = _BOOL ; m_lastLabel = Double . NaN ; setNumExamplesAct ( getNumExamples ( ) ) ; $F53628 ( atts ) ; atts . add ( $F84263 ) ; atts . add ( $F84263 ) ; atts . add ( $F84263 ) ; $F30598 ( attValues ) for ( $F61299 ( i ) ) $F34171 ( attValues , i ) atts . add ( $F66780 ( attValues ) ) ; $F30598 ( attValues ) for ( i = NUM00 ; i <= NUM00 ; i ++ ) $F34171 ( attValues , i ) atts . add ( $F66780 ( attValues ) ) ; $F30598 ( attValues ) for ( $F61299 ( i ) ) $F34171 ( attValues , i ) atts . add ( $F66780 ( attValues ) ) ; atts . add ( $F84263 ) ; atts . add ( $F84263 ) ; atts . add ( $F84263 ) ; $F30598 ( attValues ) for ( $F61299 ( i ) ) $F34171 ( attValues , i ) atts . add ( $F66780 ( attValues ) ) ; $F66789 ( m_DatasetFormat , getRelationNameToUse , atts ) return m_DatasetFormat ; }
public static double lnGamma ( double alpha ) { double x = alpha , f = NUM00 , z ; if ( x < NUM00 ) { f = NUM00 ; z = x - NUM00 ; while ( ++ z < NUM00 ) { f *= z ; } x = z ; f = - Math . log ( f ) ; } z = NUM00 / ( x * x ) ; return f + ( x - NUM00 ) * Math . log ( x ) - x + NUM00 + ( ( ( - NUM00 * z + NUM00 ) * z - NUM00 ) * z + NUM00 ) / x ; }
$F52843 ( packed , map , i , j , count , value )
public void startTicker ( long delay , boolean rightToLeft ) { $F24126 ( tickerEnabled ) if $F931 ( isCellRenderer ) { Form parent = getComponentForm ( ) ; if ( parent != null ) { parent . registerAnimatedInternal ( this ) ; } } $F3224 ( tickerStartTime , System ) tickerDelay = delay ; tickerRunning = _BOOL ; this . rightToLeft = rightToLeft ; if ( isRTL ( ) ) { this . rightToLeft = ! this . rightToLeft ; } }
static CipherSuite valueOf ( int id1 , int id2 ) { id1 &= NUM00 ; id2 &= NUM00 ; int id = ( id1 < < NUM00 ) | id2 ; CipherSuite c = idMap . get ( id ) ; if ( c == null ) { String h1 = Integer . toString ( id1 , NUM00 ) ; String h2 = Integer . toString ( id2 , NUM00 ) ; c = new CipherSuite ( NUM00 + h1 + NUM00 + h2 , id ) ; } return c ; }
public static Context createPendingActionContext ( Context context , ReconAction action , String mappingName , JsonValue sourceObject , String reconId , Situation situation ) { $F535 ( pendingActionMap ) pendingActionMap . put ( MAPPING_NAME , mappingName ) ; pendingActionMap . put ( SOURCE_OBJECT , sourceObject ) ; pendingActionMap . put ( RECON_ID , reconId ) ; $F186791 ( pendingActionMap , ORIGINAL_SITUATION , situation ) PendingActionContext pendingActionContext = new PendingActionContext ( context , pendingActionMap , action . toString ( ) ) ; return pendingActionContext ; }
$F52843 ( packed , map , i , j , count , value )
public void showDroidsafeTextMarkers ( IEditorPart openedEditor , String className ) { if ( openedEditor != null && openedEditor instanceof ITextEditor && fProcessedClasses != null ) { ITextEditor editor = ( ITextEditor ) openedEditor ; if $F105 ( fProcessedClasses , className ) { if $F105 ( fClassesNeedUpdate , className ) { ClassMarkerProcessor classProcessor = get ( className ) ; classProcessor . updateTaintMarkers ( editor ) ; fClassesNeedUpdate . remove ( className ) ; } } else { fProcessedClasses . add ( className ) ; Map < String , Map < IntRange , Map < String , Set < CallLocationModel > > > > classTaintedDataMap = fTaintedDataMap . get ( className ) ; Map < String , Set < IntRange > > classUnreachableMethodMap = fUnreachableSourceMethodMap . get ( className ) ; if ( classTaintedDataMap != null || classUnreachableMethodMap != null ) { IEditorInput input = editor . getEditorInput ( ) ; if ( input instanceof FileEditorInput ) { ClassMarkerProcessor classProcessor = get ( className ) ; classProcessor . showDroidsafeTextMarkers ( editor ) ; } } } } }
private static void resolveNewExpression ( NewExpression objSubjectExpression , $F2690 objTypesSet ) { ClassReference objClassRef = objSubjectExpression . getClassReference ( ) ; if ( null == objClassRef || null == objClassRef . getFQN ( ) ) { objTypesSet . add ( Types . strResolvingAbortedOnPsiLevel ) ; $F665 } objTypesSet . add ( objClassRef . getFQN ( ) ) ; }
private static $F182941 pickUpToThree ( $F182941 sizes ) { $F182941 result = new ArrayList < Size > $F72 ; Size largest = sizes . get ( NUM00 ) ; result . add ( largest ) ; Size lastSize = largest ; for ( Size size : sizes ) { double targetArea = Math . pow ( $F31806 ( result ) ) * area ( largest ) ; if ( area ( size ) < targetArea ) { if ( ! result . contains ( lastSize ) && ( targetArea - area ( lastSize ) < area ( size ) - targetArea ) ) $F207 ( result , lastSize ) else $F207 ( result , size ) } lastSize = size ; if $F10471 ( result ) $F5153 } if ( $F6213 ( result ) && ! result . contains ( lastSize ) ) $F207 ( result , lastSize ) return result ; }
private boolean verifyLogRecord $F10142 ( record , macPos ) throws Exception { $F83 ( data ) for ( $F21583 ( m , record ) ) $F40727 ( data , record , m ) curMAC = record [ macPos ] ; verified = helper . verifyMAC ( data . toString ( ) , helper . toByteArray ( curMAC ) ) ; return verified ; }
public static void copyToClipboard ( Transferable t ) { ClipboardHelper . copyToClipboard ( t ) ; }
public static String formatPercent ( int downloadSize , int fileSize ) { $F5773 ( num , downloadSize , fileSize ) float percent = ( ( float ) $F35376 ( num ) ) / NUM00 ; return String . valueOf ( percent + NUM00 ) ; }
final private String attrDef2AttrDesc ( Attributes attrs ) throws NamingException { $F8755 ( attrDesc ) Attribute attr = null ; int count = NUM00 ; attr = attrs . get ( NUMERICOID_ID ) ; if ( attr != null ) { $F6407 ( attrDesc , writeNumericOID , attr ) count ++ ; } else { throw new ConfigurationException $F3487 ; } attr = attrs . get ( NAME_ID ) ; $F223946 ( attr , attrDesc , writeQDescrs , count ) attr = attrs . get ( DESC_ID ) ; $F223946 ( attr , attrDesc , writeQDString , count ) attr = attrs . get ( OBSOLETE_ID ) ; $F223946 ( attr , attrDesc , writeBoolean , count ) attr = attrs . get ( SUP_ID ) ; $F223946 ( attr , attrDesc , writeWOID , count ) attr = attrs . get ( EQUALITY_ID ) ; $F223946 ( attr , attrDesc , writeWOID , count ) attr = attrs . get ( ORDERING_ID ) ; $F223946 ( attr , attrDesc , writeWOID , count ) attr = attrs . get ( SUBSTR_ID ) ; $F223946 ( attr , attrDesc , writeWOID , count ) attr = attrs . get ( SYNTAX_ID ) ; $F223946 ( attr , attrDesc , writeWOID , count ) attr = attrs . get ( SINGLE_VAL_ID ) ; $F223946 ( attr , attrDesc , writeBoolean , count ) attr = attrs . get ( COLLECTIVE_ID ) ; $F223946 ( attr , attrDesc , writeBoolean , count ) attr = attrs . get ( NO_USER_MOD_ID ) ; $F223946 ( attr , attrDesc , writeBoolean , count ) attr = attrs . get ( USAGE_ID ) ; $F223946 ( attr , attrDesc , writeQDString , count ) if $F1765 ( count , attrs ) { String attrId = null ; for ( NamingEnumeration < $F187854 > ae = attrs . getAll ( ) ; ae . hasMoreElements ( ) ; ) { $F45366 ( attr , ae ) attrId = attr . getID ( ) ; if ( $F133966 ( attrId , NUMERICOID_ID , NAME_ID , SYNTAX_ID ) || attrId . equals ( DESC_ID ) || attrId . equals ( SINGLE_VAL_ID ) || attrId . equals ( EQUALITY_ID ) || attrId . equals ( ORDERING_ID ) || attrId . equals ( SUBSTR_ID ) || attrId . equals ( NO_USER_MOD_ID ) || attrId . equals ( USAGE_ID ) || attrId . equals ( SUP_ID ) || attrId . equals ( COLLECTIVE_ID ) || attrId . equals ( OBSOLETE_ID ) ) $F1448 else $F9821 ( attrDesc , writeQDStrings , attr ) } } $F84 ( attrDesc ) $F92 ( attrDesc ) }
private void updateActions $F72 { String selectedText = getSelectedText ( ) ; $F12553 ( selectedText ) boolean stuffSelected = $F1263 ( selectedText ) ; boolean allSelected = $F19068 ( selectedText , getText ) ; UNDO_ACTION . setEnabled ( isEnabled ( ) && isEditable ( ) && isUndoAvailable ( ) ) ; CUT_ACTION . setEnabled ( isEnabled ( ) && isEditable ( ) && stuffSelected ) ; COPY_ACTION . setEnabled ( isEnabled ( ) && stuffSelected ) ; PASTE_ACTION . setEnabled ( isEnabled ( ) && isEditable ( ) && isPasteAvailable ( ) ) ; DELETE_ACTION . setEnabled ( isEnabled ( ) && stuffSelected ) ; SELECT_ALL_ACTION . setEnabled ( isEnabled ( ) && ! allSelected ) ; }
public static $F4203 $F9884 makeImmutable $F50316 ( mutableCollection ) { $F9884 newCollection ; try { $F1431 Class < $F9884 > cls = ( Class < $F9884 > ) mutableCollection . getClass ( ) ; $F33943 ( newCollection , cls ) } catch ( InstantiationException | IllegalAccessException e ) $F48927 ( e ) for ( T element : mutableCollection ) { newCollection . add ( Utils . makeImmutable ( element ) ) ; } return Collections . unmodifiableCollection ( newCollection ) ; }
public synchronized void trackHexImages ( IHex hex , MediaTracker tracker ) { Image base = hexToImageCache . get ( hex ) ; List < Image > superImgs = hexToImageListCache . get ( hex ) ; List < Image > orthoImgs = orthoListCache . get ( hex ) ; tracker . addImage ( base , NUM00 ) ; if ( superImgs != null ) { for ( Iterator < Image > i = superImgs . iterator ( ) ; i . hasNext ( ) ; ) { tracker . addImage ( i . next ( ) , NUM00 ) ; } } if ( orthoImgs != null ) { for ( Iterator < Image > i = orthoImgs . iterator ( ) ; i . hasNext ( ) ; ) { tracker . addImage ( i . next ( ) , NUM00 ) ; } } }
public static Date parseText ( String dateStr ) { try $F57093 ( mSimpleTextFormat , dateStr ) catch ( ParseException e ) $F33618 ( e ) }
public boolean isProcessed ( Trace trace , Node node , Direction direction ) { boolean ret = _BOOL ; if ( processor . getNodeType ( ) == node . getType ( ) && processor . getDirection ( ) == direction ) { if ( uriFilter == null || uriFilter . test ( node . getUri ( ) ) ) { ret = _BOOL ; } } if $F14148 ( log , Level ) { log . finest ( NUM00 + trace + NUM00 + node + NUM00 + direction + NUM00 + ret ) ; } return ret ; }
$F1 public synchronized void powerOnSelfTest $F72 throws Error { for ( Iterator < WaveformSynthesizer > it = waveformSynthesizers . iterator ( ) ; it . hasNext ( ) ; ) { WaveformSynthesizer ws = it . next ( ) ; ws . powerOnSelfTest ( ) ; } }
private QuadEdge [ ] fetchTriangleToVisit ( QuadEdge edge , Stack edgeStack , boolean includeFrame , Set visitedEdges ) { QuadEdge curr = edge ; int edgeCount = NUM00 ; boolean isFrame = _BOOL ; do { triEdges [ edgeCount ] = curr ; if ( isFrameEdge ( curr ) ) isFrame = _BOOL ; QuadEdge sym = curr . sym ( ) ; if $F2200 ( visitedEdges , sym ) edgeStack . push ( sym ) ; visitedEdges . add ( curr ) ; edgeCount ++ ; curr = curr . lNext ( ) ; } while ( curr != edge ) ; if ( isFrame && ! includeFrame ) $F1274 return triEdges ; }
public Collection engineGenerateCRLs ( InputStream inStream ) throws CRLException { CRL crl ; $F19151 ( crls ) while $F2108 ( crl , engineGenerateCRL , inStream ) $F207 ( crls , crl ) return crls ; }
public void deleteEntityConfig ( String realm , String federationId ) throws WSFederationMetaException { $F2329 ( federationId ) $F23170 ( realm ) $F105633 ( objs , federationId , realm ) try { Map oldAttrs = configInst . getConfiguration ( realm , federationId ) ; $F125374 ( oldValues , oldAttrs , ATTR_ENTITY_CONFIG ) if $F4251 ( oldValues ) { LogUtil . error ( Level . INFO , LogUtil . NO_ENTITY_DESCRIPTOR_DELETE_ENTITY_CONFIG , objs , null ) ; $F45095 ( objs ) } IDPSSOConfigElement idpconfig = getIDPSSOConfig ( realm , federationId ) ; if ( idpconfig != null ) { removeFromCircleOfTrust ( idpconfig , realm , federationId ) ; } SPSSOConfigElement spconfig = getSPSSOConfig ( realm , federationId ) ; if ( spconfig != null ) { removeFromCircleOfTrust ( spconfig , realm , federationId ) ; } $F19850 ( attr ) attr . add ( ATTR_ENTITY_CONFIG ) ; configInst . deleteConfiguration ( realm , federationId , attr ) ; LogUtil . access ( Level . INFO , LogUtil . ENTITY_CONFIG_DELETED , objs , null ) ; WSFederationMetaCache . putEntityConfig ( realm , federationId , null ) ; } catch ( ConfigurationException e ) { $F5197 ( debug , e ) $F806 data = { e . getMessage ( ) , federationId , realm } ; LogUtil . error ( Level . INFO , LogUtil . CONFIG_ERROR_DELETE_ENTITY_CONFIG , data , null ) ; throw new WSFederationMetaException ( e ) ; } }
public static synchronized DataSourceViewsManager sharedInstance $F72 { if ( sharedInstance == null ) sharedInstance = new DataSourceViewsManager $F72 ; return sharedInstance ; }
public String tag $F1947 ( inner , c1 , c2 ) { boolean color = $F128757 ( attr , ATTR_COLOR ) && ToastBootstrap . color ; String s = NUM00 ; if ( color ) s += NUM00 + c1 + NUM00 ; s += inner ; if ( color ) s += NUM00 + c2 + NUM00 ; s += NUM00 ; if ( color ) s += NUM00 + c1 + NUM00 ; return color ? Pretty . format ( s ) : s ; }
private final String loadXmlDefinition $F72 { final Cache cache = CacheFactory . getAnyInstance ( ) ; $F24475 ( stringWriter ) final PrintWriter printWriter = new PrintWriter ( stringWriter ) ; CacheXmlGenerator . generate ( cache , printWriter , _BOOL , _BOOL , _BOOL ) ; $F59 ( printWriter ) $F17718 ( loadXmlDefinition , stringWriter ) }
private Long id ( HttpServletRequest request ) { Long id = null ; String pathInfo = request . getPathInfo ( ) ; if $F22 ( pathInfo ) { $F28924 ( idString , pathInfo ) id = Long . valueOf ( idString ) ; } return id ; }
public void uncompress $F72 { $F16709 ( data ) InflaterInputStream inflater = new InflaterInputStream ( data . asInputStream ( ) ) ; $F12496 ( buffer ) $F30909 ( tmp , IoBuffer ) tmp . setAutoExpand ( _BOOL ) ; try { while $F2892 ( inflater ) { $F83249 ( decompressed , inflater , buffer ) $F65649 ( decompressed ) $F148014 ( tmp , buffer , decompressed ) } } catch ( IOException e ) { tmp . free ( ) ; $F7076 ( e ) } finally { if ( inflater != null ) { try $F881 ( inflater ) catch ( IOException e1 ) $F845 } } data . free ( ) ; data = tmp ; $F14257 ( data ) prepareIO ( ) ; }
public void poll ( final TcpSocketStatisticsHandler handler ) { this . statisticsHandler = handler ; try { $F37249 ( fileLoader ) final ByteBuffer buffer = fileLoader . getBuffer ( ) ; $F2268 ( lineParser ) lineParser . handleToken ( buffer , buffer . position ( ) , buffer . limit ( ) ) ; } finally { this . statisticsHandler = null ; } monitoredSockets . purgeEntriesOlderThan ( updateCount ) ; updateCount ++ ; }
$F1 public void close $F72 throws IOException { synchronized ( lock ) { if $F931 ( isClosed ) { $F59 ( in ) buf = null ; } } }
public int compareTo ( CharBuffer otherBuffer ) { int compareRemaining = ( $F123020 ( remaining , otherBuffer ) ) ? remaining ( ) : otherBuffer . remaining ( ) ; int thisPos = position ; int otherPos = otherBuffer . position ; char thisByte , otherByte ; while ( compareRemaining > NUM00 ) { thisByte = get ( thisPos ) ; otherByte = otherBuffer . get ( otherPos ) ; if ( thisByte != otherByte ) { return thisByte < otherByte ? - NUM00 : NUM00 ; } thisPos ++ ; otherPos ++ ; compareRemaining -- ; } $F93077 ( remaining , otherBuffer ) }
public UrbanSimZoneCSVWriterV2 ( String matsim4opusTempDirectory , String matsimOutputDirectory ) { this . matsim4opusTempDirectory = matsim4opusTempDirectory ; this . matsimOutputDirectory = matsimOutputDirectory ; try { $F973 ( log ) zoneWriter = IOUtils . getBufferedWriter ( matsim4opusTempDirectory + FILE_NAME ) ; log . info ( NUM00 + matsim4opusTempDirectory + FILE_NAME + NUM00 ) ; zoneWriter . write ( Labels . ZONE_ID + NUM00 + Labels . ACCESSIBILITY_BY_FREESPEED + NUM00 + Labels . ACCESSIBILITY_BY_CAR + NUM00 + Labels . ACCESSIBILITY_BY_BIKE + NUM00 + Labels . ACCESSIBILITY_BY_WALK + NUM00 + Labels . ACCESSIBILITY_BY_PT ) ; $F1769 ( zoneWriter ) $F973 ( log ) } $F1516 ( e ) }
$F1 public void agg ( Object newVal ) { if $F2456 ( newVal ) { ByteBuffer buffer = ByteBuffer . wrap ( $F2457 ( newVal ) ) ; $F23501 ( buffer ) while $F5720 ( buffer ) { aggVal += buffer . getLong ( ) ; count += buffer . getDouble ( ) ; firstTime = _BOOL ; } $F665 } aggVal += ( Long ) newVal ; count ++ ; firstTime = _BOOL ; }
private static PolicyNotification extractPolicyNotification ( String xml ) throws PolicyEvaluationException { PolicyNotification policyNotification = null ; try { String notificationDataBlock = getNotificationDataBlock ( xml ) ; if ( notificationDataBlock != null ) { Document doc = XMLUtils . getXMLDocument ( $F107841 ( notificationDataBlock ) ) ; Node rootNode = XMLUtils . getRootNode ( doc , NODE_POLICY_SERVICE ) ; if ( rootNode != null ) { Node notificationNode = XMLUtils . getChildNode ( rootNode , NODE_POLICY_NOTIFICATION ) ; if ( notificationNode != null ) { policyNotification = PolicyNotification . parseXML ( notificationNode ) ; } else { debug . error ( $F38 ) ; throw new PolicyEvaluationException $F278179 ( ResBundleUtils ) ; } } else { $F137865 ( debug ) } } else { debug . error ( $F38 ) ; } } catch ( Exception xe ) { $F5197 ( debug , xe ) throw new PolicyEvaluationException ( ResBundleUtils . rbName , NUM00 , null , xe ) ; } return policyNotification ; }
$F46593 ( checkNotClosed , trimToSize , journalWriter )
private Object findParcel ( $F4170 $F96 objectArray , $F4170 String className ) { try { Class classTmp = getClassForName ( className ) ; Constructor declaredConstructor = classTmp . getDeclaredConstructor ( Parcel . class ) ; declaredConstructor . setAccessible ( _BOOL ) ; return declaredConstructor . newInstance ( WearBusTools . byteToParcel ( objectArray ) ) ; } catch ( Exception e ) { Log . d ( WearBusTools . BUSWEAR_TAG , $F5351 ( e ) ) ; } $F1274 }
private static final String decodeFieldName ( final String pXmlFieldName ) { $F83 ( str ) $F1749 ( fieldNameLength , pXmlFieldName ) char currentChar ; for ( $F119 ( i , fieldNameLength ) ) { currentChar = pXmlFieldName . charAt ( i ) ; if ( currentChar == NUM00 ) { str . append ( Character . toUpperCase ( pXmlFieldName . charAt ( ++ i ) ) ) ; } else $F288 ( str , currentChar ) } $F92 ( str ) }
public boolean isLoginSet $F72 { return ( username != null && ( password != null && $F1263 ( username ) && $F1263 ( password ) ) ) || oauth ; }
public void addContentItem ( ContentItem contentItem ) { if ( contentItems == null ) { contentItems = new ArrayList < ContentItem > $F72 ; } contentItems . add ( contentItem ) ; }
public static String canonicalizeClassName ( String name ) { $F34587 ( classname , name ) $F2936 ( classname ) $F120626 ( classname ) $F212530 ( classname ) return classname ; }
public static final void pause ( final int milliseconds ) { if ( milliseconds >= NUM00 || logger . isDebugEnabled ( ) ) $F58539 ( logger , milliseconds ) final long target = System . currentTimeMillis ( ) + milliseconds ; try { for ( $F589 ) { long msLeft = target - System . currentTimeMillis ( ) ; $F65649 ( msLeft ) Thread . sleep ( msLeft ) ; } } catch ( InterruptedException e ) { Assert . fail ( NUM00 , e ) ; } }
public boolean isHighlightWithInvisibleEdge $F72 { return highlightWithInvisibleEdge ; }
private Configuration prepareJobForCancelling $F72 throws Exception { prepareFile ( NUM00 , NUM00 ) ; $F3223 ( executedTasks ) $F3223 ( cancelledTasks ) $F3223 ( failMapperId ) $F3223 ( splitsCount ) Configuration $F73973 ( cfg ) ; setupFileSystems ( cfg ) ; $F156 ( job , Job , cfg ) job . setOutputKeyClass ( Text . class ) ; job . setOutputValueClass ( IntWritable . class ) ; job . setMapperClass ( CancellingTestMapper . class ) ; job . setNumReduceTasks ( NUM00 ) ; job . setInputFormatClass ( InFormat . class ) ; FileInputFormat . setInputPaths ( job , new Path ( NUM00 + getTestGridName ( NUM00 ) + NUM00 ) ) ; FileOutputFormat . setOutputPath ( job , new Path ( NUM00 + getTestGridName ( NUM00 ) + NUM00 ) ) ; job . setJarByClass ( getClass ( ) ) ; return job . getConfiguration ( ) ; }
$F15683 ( listener , changingListeners )
public static $F1986 lsf2lpc $F9830 ( lsf ) { MathUtils . quickSort ( lsf ) ; int P = lsf . length ; int half_order = P / NUM00 ; int i , j ; double xf , xx ; $F1986 a = new double [ P / NUM00 + NUM00 ] ; $F1986 a1 = new double [ P / NUM00 + NUM00 ] ; $F1986 a2 = new double [ P / NUM00 + NUM00 ] ; $F1986 b = new double [ P / NUM00 + NUM00 ] ; $F1986 b1 = new double [ P / NUM00 + NUM00 ] ; $F1986 b2 = new double [ P / NUM00 + NUM00 ] ; $F1986 p = new double [ P / NUM00 ] ; $F1986 q = new double [ P / NUM00 ] ; $F107812 ( oneMinusA , P ) oneMinusA [ NUM00 ] = NUM00 ; if ( ( lsf [ NUM00 ] <= NUM00 ) || $F104544 ( lsf ) ) { throw new IllegalArgumentException ( NUM00 + lsf [ NUM00 ] ) ; } for ( i = NUM00 ; i < P ; i ++ ) { if ( lsf [ i ] <= lsf [ i - NUM00 ] ) $F824 if ( ( lsf [ i ] <= NUM00 ) || ( lsf [ i ] >= NUM00 ) ) throw new IllegalArgumentException ( NUM00 + i + NUM00 + lsf [ i ] ) ; } for ( i = NUM00 ; i < half_order ; i ++ ) { p [ i ] = - NUM00 * Math . cos ( MathUtils . TWOPI * lsf [ NUM00 * i ] ) ; q [ i ] = - NUM00 * Math . cos ( MathUtils . TWOPI * lsf [ NUM00 * i + NUM00 ] ) ; } xf = NUM00 ; for ( i = NUM00 ; i <= P ; i ++ ) { if ( i == NUM00 ) xx = NUM00 ; else xx = NUM00 ; a [ NUM00 ] = xx + xf ; b [ NUM00 ] = xx - xf ; xf = xx ; for ( j = NUM00 ; j < half_order ; j ++ ) { a [ j + NUM00 ] = a [ j ] + p [ j ] * a1 [ j ] + a2 [ j ] ; b [ j + NUM00 ] = b [ j ] + q [ j ] * b1 [ j ] + b2 [ j ] ; a2 [ j ] = a1 [ j ] ; a1 [ j ] = a [ j ] ; b2 [ j ] = b1 [ j ] ; b1 [ j ] = b [ j ] ; } if ( i > NUM00 ) oneMinusA [ i ] = NUM00 * $F356083 ( a , half_order , b ) ; } return oneMinusA ; }
protected void generateFields $F72 { for ( $F335184 iterator = mElements . iterator ( ) ; iterator . hasNext ( ) ; ) { $F84573 ( element , iterator ) if ( ! element . used ) { $F7042 ( iterator ) $F598 } PsiField [ ] fields = mClass . getFields ( ) ; boolean duplicateField = _BOOL ; for ( PsiField field : fields ) { $F20605 ( name , field ) if ( name != null && name . equals ( element . getFieldName ( ) ) ) $F3468 ( duplicateField , _BOOL ) } if ( duplicateField ) { $F7042 ( iterator ) $F598 } mClass . add ( mFactory . createFieldFromText ( NUM00 + element . name + NUM00 + element . getFieldName ( ) + NUM00 , mClass ) ) ; } }
public boolean isFlying $F72 $F9911 ( flyThroughDialog )
public synchronized void init $F72 { channelFactory = new NioClientSocketChannelFactory ( Executors . newCachedThreadPool ( ) , Executors . newCachedThreadPool ( ) ) ; datagramChannelFactory = new NioDatagramChannelFactory ( Executors . newCachedThreadPool ( ) ) ; timer = new HashedWheelTimer $F72 ; }
public static String removePattern $F2236 ( source , regex ) { return replacePattern ( source , regex , StringUtils . EMPTY ) ; }
private void consumeNestedScroll $F2026 ( dxUnconsumed , dyUnconsumed , dxFinalUnconsumed , dyFinalUnconsumed ) { if ( mOverScrollEffect == OverScrollEffect . BOUNCE && dyFinalUnconsumed != NUM00 ) { mUnconsumedOverScrollOffset += - dyFinalUnconsumed ; int maxOffset = mOverScrollOffsetLimit ; if ( mUnconsumedOverScrollOffset > NUM00 ) { $F106734 ( mUnconsumedOverScrollOffset , Math , maxOffset ) } else if ( mUnconsumedOverScrollOffset < NUM00 ) { mUnconsumedOverScrollOffset = Math . max ( - maxOffset , mUnconsumedOverScrollOffset ) ; } setScrollingOffset ( getUnconsumedScrollingOffset ( ) ) ; } pullEdgeEffects ( dxUnconsumed , dyUnconsumed ) ; }
private void retrieveWaypoints ( SearchQuery query , ArrayList < Waypoint > waypoints ) { String queryLikeSelection2 = NUM00 + query . textQuery + NUM00 ; $F806 waypointSelectionArgs = new String [ ] { queryLikeSelection2 , queryLikeSelection2 , queryLikeSelection2 } ; Cursor cursor = null ; try { cursor = providerUtils . getWaypointCursor ( WAYPOINT_SELECTION_QUERY , waypointSelectionArgs , WAYPOINT_SELECTION_ORDER , MAX_SCORED_WAYPOINTS ) ; if ( cursor != null ) { waypoints . ensureCapacity ( cursor . getCount ( ) ) ; while $F12260 ( cursor ) { Waypoint waypoint = providerUtils . createWaypoint ( cursor ) ; if ( LocationUtils . isValidLocation ( waypoint . getLocation ( ) ) ) $F207 ( waypoints , waypoint ) } } } $F14364 ( cursor ) }
void release $F72 { imageLoader . cancelPendingRequests ( ) ; loading = new boolean $F2313 ( noxItems ) ; }
$F73823 ( lock , this , count )
public void add ( String name , long cnt ) { $F216949 ( _values ) _values . add ( new Count ( this , name , cnt ) ) ; }
void closeDialog $F72 ;
$F196938 ( textCompactionData , byteCompactionData , length , result , subMode , Mode , priorToShiftMode , i , subModeCh , ch , ALPHA , LL , ML , PS , MODE_SHIFT_TO_BYTE_COMPACTION_MODE , TEXT_COMPACTION_MODE_LATCH , LOWER , AS , MIXED , PL , MIXED_CHARS , AL , PUNCT , PAL , PUNCT_CHARS , ALPHA_SHIFT , PUNCT_SHIFT )
public MediaConfig createChannelFileAttachment ( String file , MediaConfig config ) { config . addCredentials ( this ) ; String xml = POSTFILE ( this . url + NUM00 , file , config . name , config . toXML ( ) ) ; Element root = parse ( xml ) ; $F1338 ( root ) try { MediaConfig media = new MediaConfig $F72 ; media . parseXML ( root ) ; return media ; } $F77633 ( this , SDKException , exception ) }
public void addParam ( AstNode param ) { assertNotNull ( param ) ; if ( params == null ) { params = new ArrayList < AstNode > $F72 ; } params . add ( param ) ; param . setParent ( this ) ; }
DeleteEvent ( $F4170 JSONObject json ) throws JSONException { super ( TYPE_DELETE , json ) ; if $F4329 ( TextUtils , mBlockId ) { throw new JSONException ( TYPENAME_DELETE + NUM00 + JSON_BLOCK_ID ) ; } mOldXml = json . optString ( JSON_OLD_VALUE ) ; JSONArray ids = json . getJSONArray ( JSON_IDS ) ; $F1749 ( count , ids ) $F3803 $F10252 ( temp , count ) ; for ( $F1316 ( i , count ) ) { temp . add ( ids . getString ( i ) ) ; } mIds = Collections . unmodifiableList ( temp ) ; }
public static boolean isFullCopyRestorable ( Volume volume , DbClient dbClient ) { boolean result = _BOOL ; String replicaState = volume . getReplicaState ( ) ; if ( isVolumeFullCopy ( volume , dbClient ) && replicaState != null && $F1030 ( replicaState ) ) { ReplicationState state = ReplicationState . getEnumValue ( replicaState ) ; if ( state != null && state == ReplicationState . SYNCHRONIZED ) { result = _BOOL ; } } return result ; }
private final static $F806 readQDStrings ( String string , $F2027 pos ) throws NamingException $F8587 ( readQDescrs , string , pos )
private static boolean isBufferTooLarge ( ByteBuffer buf ) { return isBufferTooLarge ( buf . capacity ( ) ) ; }
public static void resetIndexBufferTime $F72 $F21827 ( SAFE_QUERY_TIME )
protected abstract AdminResponse createResponse ( DistributionManager dm ) ;
protected boolean checkExternalStorageAndNotify ( String fileName ) { if $F147883 ( fileName ) { alertDownloadFailure ( R . string . download_no_sdcard_dlg_title ) ; return _BOOL ; } $F139156 ( status , Environment ) if ( ! status . equals ( Environment . MEDIA_MOUNTED ) ) { int title ; if ( status . equals ( Environment . MEDIA_SHARED ) ) { title = R . string . download_sdcard_busy_dlg_title ; } else { title = R . string . download_no_sdcard_dlg_title ; } alertDownloadFailure ( title ) ; return _BOOL ; } return _BOOL ; }
public static String plnoun $F66432 ( quantity , noun ) { final String enoun = fullForm ( noun ) ; if ( quantity == NUM00 ) $F4915 ( singular , enoun ) else $F4915 ( plural , noun ) }
public boolean verifyXMLSignature ( org . w3c . dom . Element element , $F9738 ( certAlias ) ) throws XMLSignatureException $F19580 ( verifyXMLSignature , element , DEF_ID_ATTRIBUTE , certAlias )
public void add ( Video video ) $F36131 ( videoList , video , notifyDataSetChanged )
private static boolean isInHorizontalTargetZone $F46870 ( x , y , handleXStart , handleXEnd , handleY , targetRadius ) { if $F104655 ( x , handleXStart , handleXEnd , Math , y , handleY , targetRadius ) { return _BOOL ; } return _BOOL ; }
public void readTransportSystems ( final $F2027 columnsIndices , final BufferedReader reader ) throws IOException { $F27015 ( line , reader ) while $F22 ( line ) $F63868 ( line , reader ) }
private boolean hasPrefix $F97 ( nal ) { if ( nal [ NUM00 ] == NUM00 && nal [ NUM00 ] == NUM00 && nal [ NUM00 ] == NUM00 && nal [ NUM00 ] == NUM00 ) return _BOOL ; else return _BOOL ; }
private void unshareMain $F72 { $F2027 old = _mainHash ; int len = _mainHash . length ; $F3936 ( _mainHash , len ) $F135 ( System , old , _mainHash , len ) _mainHashShared = _BOOL ; }
public ComponentConfigBuilder addItemInMultifield ( String multifieldLabel , int index , String itemType , String itemLabel , String value ) { $F170511 ( type , String , index , itemType ) $F170511 ( label , String , multifieldLabel , itemLabel ) config . add ( new ConfigurationEntry ( currentTab , type , label , value ) ) ; return this ; }
$F1654 ( names )
public static $F48508 randomPoints $F14337 ( n , d , scale ) { IMultiPoint points [ ] = new IMultiPoint [ n ] ; for ( $F119 ( i , n ) ) { $F83 ( sb ) for ( $F119 ( j , d ) ) { sb . append ( rGen . nextDouble ( ) * scale ) ; $F24364 ( j , d , sb ) } points [ i ] = new Hyperpoint $F3362 ( sb ) ; } return points ; }
private void parseParameters ( String parameters ) { Log . v ( NUM00 , NUM00 + NUM00 + parameters ) ; if ( parameters != null ) { int i ; do { $F49897 ( i , parameters ) if ( i < NUM00 ) { parseParameter ( parameters ) ; } else { $F12723 ( parseParameter , parameters , i ) ; $F6943 ( parameters , i ) } } while ( i >= NUM00 ) ; } }
public void addHttpSessionToken ( String site , String token ) { if $F94439 ( site ) { site = site + $F580 ; } HttpSessionTokensSet siteTokens = sessionTokens . get ( site ) ; if ( siteTokens == null ) { siteTokens = new HttpSessionTokensSet $F72 ; sessionTokens . put ( site , siteTokens ) ; } $F21448 ( log , site , token ) siteTokens . addToken ( token ) ; unmarkRemovedDefaultSessionToken ( site , token ) ; }
public GradleDistribution deserializeFromString ( String distributionString ) { Preconditions . checkNotNull ( distributionString ) ; String localInstallationPrefix = NUM00 ; if ( distributionString . startsWith ( localInstallationPrefix ) && distributionString . endsWith ( NUM00 ) ) { String localInstallationDir = distributionString . substring ( localInstallationPrefix . length ( ) , $F1092 ( distributionString ) ) ; return GradleDistribution . forLocalInstallation ( new File ( localInstallationDir ) ) ; } String remoteDistributionPrefix = NUM00 ; if ( distributionString . startsWith ( remoteDistributionPrefix ) && distributionString . endsWith ( NUM00 ) ) { String remoteDistributionUri = distributionString . substring ( remoteDistributionPrefix . length ( ) , $F1092 ( distributionString ) ) ; return GradleDistribution . forRemoteDistribution ( createURI ( remoteDistributionUri ) ) ; } String versionPrefix = NUM00 ; if ( distributionString . startsWith ( versionPrefix ) && distributionString . endsWith ( NUM00 ) ) { String version = distributionString . substring ( versionPrefix . length ( ) , $F1092 ( distributionString ) ) ; return GradleDistribution . forVersion ( version ) ; } String wrapperString = NUM00 ; if $F1238 ( distributionString , wrapperString ) { return GradleDistribution . fromBuild ( ) ; } $F574 ( message , String , distributionString ) $F5301 ( message ) }
public double metersToPixels $F72 { double screenCenterLat = screenTopLeft . latitude - screenSize . latitude / NUM00 ; double metersToLon = NUM00 / ( Util . LON_TO_METERS_AT_EQUATOR * Math . cos ( screenCenterLat / NUM00 * Math . PI ) ) ; return screenSize . longitude / windowWidth * metersToLon ; }
public boolean sendViaDataSocket $F24576 ( bytes , start , len ) { if ( dataOutputStream == null ) { $F1594 ( Log , TAG ) return _BOOL ; } $F6482 ( len , _BOOL ) try $F21537 ( dataOutputStream , bytes , start , len ) catch ( IOException e ) { $F1594 ( Log , TAG ) Log . i ( TAG , e . toString ( ) ) ; return _BOOL ; } localDataSocket . reportTraffic ( len ) ; return _BOOL ; }
private void pushContext ( BaseContext c ) $F31742 ( contextStack , c )
$F1 public void bookmarksOrHistoryPicker ( ComboViews startView ) { if ( mTabControl . getCurrentWebView ( ) == null ) $F932 $F191280 ( isInCustomActionMode , endActionMode ) $F53033 ( extras ) extras . putBoolean ( BrowserBookmarksPage . EXTRA_DISABLE_WINDOW , ! mTabControl . canCreateNewTab ( ) ) ; mUi . showComboView ( startView , extras ) ; }
public FST $F22381 ( fileName , encoding , verbose ) throws IOException { $F4647 ( fis , fileName ) try { loadHeaderless ( fis , encoding , verbose ) ; } $F3229 ( fis ) }
public static $F1986 normalizeZscore $F9830 ( x ) { double mn = mean ( x , NUM00 ) ; double sd = standardDeviation ( x , NUM00 ) ; for ( $F1139 ( i , x ) ) if $F179689 ( Double , x , i ) x [ i ] = ( x [ i ] - mn ) / sd ; return x ; }
void addLocation ( String location ) { $F13678 ( fLocationList , location ) fLocationList . add ( location ) ; $F17015 ( fTableViewer ) fTableViewer . setChecked ( location , _BOOL ) ; fTableViewer . setSelection ( new StructuredSelection ( location ) ) ; validateLocations ( ) ; }
public JavaFormatter ( String lineDelimiter , int initialIndentLevel , boolean useCodeFormatter , IJavaProject project ) { fLineDelimiter = lineDelimiter ; fUseCodeFormatter = useCodeFormatter ; fInitialIndentLevel = initialIndentLevel ; fProject = project ; }
public String encode $F2236 ( pString , charset ) throws EncoderException { $F1338 ( pString ) try $F8587 ( encodeText , pString , charset ) $F265978 ( e ) }
private static void checkPathNeed $F72 { if ( samplingInterval == - NUM00 ) $F20182 ( lastPreloadTime , readMorePaths ) if ( ! Double . isNaN ( lastPreloadTime ) && SimClock . getTime ( ) >= lastPreloadTime - ( samplingInterval * MIN_AHEAD_INTERVALS ) ) { for ( int i = NUM00 ; i < nrofPreload && ! Double . isNaN ( lastPreloadTime ) ; i ++ ) $F20182 ( lastPreloadTime , readMorePaths ) } }
public double wide ( Prior prior , Likelihood likelihood ) throws OperatorFailedException { final int nodeCount = tree . getNodeCount ( ) ; final NodeRef root = tree . getRoot ( ) ; NodeRef i ; int indexI ; do { indexI = MathUtils . nextInt ( nodeCount ) ; i = tree . getNode ( indexI ) ; } while ( root == i || ( tree . getParent ( i ) == root && tree . getNodeHeight ( i ) > tree . getNodeHeight ( getOtherChild ( tree , tree . getParent ( i ) , i ) ) ) ) ; $F67791 ( secondNodeIndices ) $F104539 ( probabilities ) NodeRef j , jP ; $F59939 ( iP , tree , i ) $F9667 ( heightIP , tree , iP ) $F9667 ( heightI , tree , i ) double sum = NUM00 ; double backward = calculateTreeLikelihood ( prior , likelihood , tree ) ; int offset = ( int ) - backward ; backward = Math . exp ( backward + offset ) ; for ( $F119 ( n , nodeCount ) ) { j = tree . getNode ( n ) ; if ( j != root ) { jP = tree . getParent ( j ) ; if ( ( iP != jP ) && ( tree . getNodeHeight ( j ) < heightIP ) && $F59627 ( heightI , tree , jP ) ) { secondNodeIndices . add ( n ) ; swap ( tree , i , j , iP , jP ) ; double prob = Math . exp ( calculateTreeLikelihood ( prior , likelihood , tree ) + offset ) ; probabilities . add ( prob ) ; swap ( tree , i , j , jP , iP ) ; sum += prob ; } } } if ( sum <= NUM00 ) $F62102 double ran = Math . random ( ) * sum ; int index = NUM00 ; while ( ran > NUM00 ) { ran -= probabilities . get ( index ) ; index ++ ; } index -- ; j = tree . getNode ( secondNodeIndices . get ( index ) ) ; jP = tree . getParent ( j ) ; $F9667 ( heightJP , tree , jP ) $F9667 ( heightJ , tree , j ) double sumForward2 = NUM00 ; NodeRef k , kP ; for ( $F119 ( n , nodeCount ) ) { k = tree . getNode ( n ) ; if ( k != root ) { kP = tree . getParent ( k ) ; if ( ( jP != kP ) && ( tree . getNodeHeight ( k ) < heightJP ) && $F59627 ( heightJ , tree , kP ) ) { swap ( tree , j , k , jP , kP ) ; double prob = Math . exp ( calculateTreeLikelihood ( prior , likelihood , tree ) + offset ) ; sumForward2 += prob ; swap ( tree , j , k , kP , jP ) ; } } } swap ( tree , i , j , iP , jP ) ; $F28095 ( forward , probabilities , index ) iP = jP ; heightIP = heightJP ; double sumBackward = NUM00 ; for ( $F119 ( n , nodeCount ) ) { j = tree . getNode ( n ) ; if ( j != root ) { jP = tree . getParent ( j ) ; if ( ( iP != jP ) && ( tree . getNodeHeight ( j ) < heightIP ) && $F59627 ( heightI , tree , jP ) ) { swap ( tree , i , j , iP , jP ) ; double prob = Math . exp ( calculateTreeLikelihood ( prior , likelihood , tree ) + offset ) ; sumBackward += prob ; swap ( tree , i , j , jP , iP ) ; } } } double sumBackward2 = NUM00 ; j = tree . getNode ( secondNodeIndices . get ( index ) ) ; jP = tree . getParent ( j ) ; heightJP = tree . getNodeHeight ( jP ) ; heightJ = tree . getNodeHeight ( j ) ; for ( $F119 ( n , nodeCount ) ) { k = tree . getNode ( n ) ; if ( k != root ) { kP = tree . getParent ( k ) ; if ( ( jP != kP ) && ( tree . getNodeHeight ( k ) < heightJP ) && $F59627 ( heightJ , tree , kP ) ) { swap ( tree , j , k , jP , kP ) ; double prob = Math . exp ( calculateTreeLikelihood ( prior , likelihood , tree ) + offset ) ; sumBackward2 += prob ; swap ( tree , j , k , kP , jP ) ; } } } double forwardProb = ( forward / sum ) + ( forward / sumForward2 ) ; double backwardProb = ( backward / sumBackward ) + ( backward / sumBackward2 ) ; double hastingsRatio = Math . log ( backwardProb / forwardProb ) ; return hastingsRatio ; }
public boolean isInputColumnNameAllowed ( String columnName ) { $F72105 ( columnName , _BOOL ) getInputColumnNames ( _BOOL ) ; for ( $F1139 ( i , m_inputcolumnnames ) ) { if $F145 ( columnName , m_inputcolumnnames , i ) return _BOOL ; } return _BOOL ; }
public static int rgb ( String hex ) { int color = ( int ) Long . parseLong ( $F2934 ( hex ) , NUM00 ) ; $F52249 ( r , color ) $F52249 ( g , color ) $F52249 ( b , color ) $F69465 ( Color , r , g , b ) }
$F1 public void addPropertyChangeListener ( String name , PropertyChangeListener pcl ) { m_bcSupport . addPropertyChangeListener ( name , pcl ) ; }
public void testEmptyOrNullBlob $F72 throws Exception { try { $F151311 ( stmt , connection ) try { $F270830 ( stmt ) stmt . setBytes ( NUM00 , $F10314 ) ; int insertedCount = stmt . executeUpdate ( ) ; assertTrue ( NUM00 , insertedCount == NUM00 ) ; $F270830 ( stmt ) stmt . setNull ( NUM00 , Types . BINARY ) ; $F102353 ( insertedCount , stmt ) assertTrue ( NUM00 , insertedCount == NUM00 ) ; } $F3229 ( stmt ) $F57556 ( stmt , connection ) $F270830 ( stmt ) try { $F49 ( rs , stmt ) $F32625 ( assertTrue , rs ) assertTrue ( NUM00 , Arrays . equals ( rs . getBytes ( NUM00 ) , $F10314 ) ) ; $F59 ( rs ) $F270830 ( stmt ) $F47578 ( rs , stmt ) $F32625 ( assertTrue , rs ) assertTrue ( NUM00 , rs . getObject ( NUM00 ) == null ) ; $F59 ( rs ) } $F3229 ( stmt ) } catch ( Exception ex ) { $F301 ( ex ) throw ex ; } }
$F9749 ( namespace , attName , attValue , xmlWriter , registerPrefix )
$F3441 ( journalWriter , writer , journalFileTmp , Utils , MAGIC , VERSION_1 , Integer , appVersion , valueCount , entry , lruEntries , DIRTY , CLEAN , journalFile , renameTo , journalFileBackup , _BOOL )
public void testCase22 $F72 { byte $F3014 = { NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 } ; $F89724 int bSign = - NUM00 ; BigInteger aNumber = BigInteger . ZERO ; $F3023 ( bNumber , bSign , bBytes ) $F10683 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F10686 ( assertEquals , result ) }
$F1431 public void restore ( String fileName ) throws $F6427 { ObjectInputStream ois = new ObjectInputStream $F18079 ( fileName ) ; locations = ( Map < V , Point > ) ois . readObject ( ) ; $F59 ( ois ) initializeLocations ( ) ; locked = _BOOL ; fireStateChanged ( ) ; }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
public void waitForData $F72 { if ( this . initialized ) $F932 waitOnInitialization ( this . initializationLatchAfterGetInitialImage ) ; }
private void blackmanHarris4sMin ( int size ) { int start = ( windowFunction . length - size ) / NUM00 ; int stop = ( windowFunction . length + size ) / NUM00 ; double scale = NUM00 / ( double ) size / NUM00 ; for ( int i = NUM00 ; start < stop ; start ++ , i ++ ) windowFunction [ i ] = scale * ( NUM00 - NUM00 * Math . cos ( twoPI * i / size ) + NUM00 * Math . cos ( NUM00 * twoPI * i / size ) - NUM00 * Math . cos ( NUM00 * twoPI * i / size ) ) ; }
private $F96 calculateCMSKeyChecksum $F97 ( key ) { $F12496 ( result ) $F6163 ( sha1 , key ) $F137382 ( sha1 , digest ) $F10319 ( System , digest , result ) return result ; }
$F60268 ( _lowerNick )
public boolean incrementReceived $F72 { $F62747 ( diff , System , startTime ) if ( diff >= NUM00 ) { packetsPerSecond = intervalPackets ; $F3224 ( startTime , System ) intervalPackets = NUM00 ; return _BOOL ; } else { intervalPackets ++ ; } this . receivedPackets ++ ; return _BOOL ; }
Sentence parseSentence ( final String text , final ConversationContext ctx ) { if ( isEmpty ( ) ) { return ConversationParser . parse ( text , ctx ) ; } $F9652 ( txt , text ) final Sentence sentence = new SentenceImplementation ( ctx , txt ) ; txt = ConversationParser . detectSentenceType ( txt , sentence ) ; if ( typeMatching ) { readTypeMatchExpressions ( txt , ctx , sentence ) ; } else if ( exactMatching ) { readSimpleExpressions ( txt , ctx , sentence ) ; } else if ( similarMatching ) { readSimpleExpressions ( txt , ctx , sentence ) ; } else if ( jokerMatching ) { readJokerExpressions ( txt , ctx , sentence ) ; } else $F79959 ( caseInsensitive , readSimpleExpressions , txt , ctx , sentence ) return sentence ; }
public KafkaCluster usingDirectory ( File dataDir ) { $F57478 ( running ) if ( $F102274 ( dataDir ) && $F4925 ( dataDir ) && $F14321 ( dataDir ) && $F15586 ( dataDir ) ) $F825 this . dataDir = dataDir ; return this ; }
$F25545 ( i , count , buf , newbuf , mPool , System )
void onConsumeFinished ( Purchase purchase , IabResult result ) ;
protected boolean checkProsodicPosition ( Element currentRulePart , String prosodicPositionType ) { $F32683 ( attNodes , currentRulePart ) for ( $F85554 ( z , attNodes ) ) { $F61359 ( el , attNodes , z ) $F48115 ( currentAtt , el ) $F61361 ( currentVal , el ) if $F3057 ( currentAtt ) { if $F14943 ( currentVal ) { if $F2137 ( prosodicPositionType , currentVal ) return _BOOL ; } else { $F131348 ( currentVal ) $F9506 ( prosodicPositionType , currentVal , _BOOL ) } } } return _BOOL ; }
public static BigDecimal parseBigDecimalForEntity ( String bigDecimalString ) throws NumberFormatException { $F1338 ( bigDecimalString ) $F1382 ( bigDecimalString ) $F2899 ( bigDecimalString ) if $F3599 ( bigDecimalString ) $F1337 return new BigDecimal ( bigDecimalString ) ; }
public static void registerOperators ( String name , InputStream operatorsXML , ClassLoader classLoader ) $F214324 ( registerOperators , name , operatorsXML , classLoader )
private void doPermissionWorkBeforeAndroidM ( $F4170 Activity activity , $F4170 $F806 permissions , $F5466 PermissionsResultAction action ) { for ( String perm : permissions ) { if ( action != null ) { if $F2200 ( mPermissions , perm ) { action . onResult ( perm , Permissions . NOT_FOUND ) ; } else if ( ActivityCompat . checkSelfPermission ( activity , perm ) != PackageManager . PERMISSION_GRANTED ) { action . onResult ( perm , Permissions . DENIED ) ; } else { action . onResult ( perm , Permissions . GRANTED ) ; } } } }
public void deleteSubGroupContainers ( Set groupContainers ) throws $F52710 { $F10531 ( iter , groupContainers ) while $F2921 ( iter ) { $F2778 ( groupContainerDN , iter ) AMGroupContainer groupContainer = new AMGroupContainerImpl ( token , groupContainerDN ) ; $F1900 ( groupContainer ) } }
public GlowTask ( Plugin owner , Runnable task , boolean sync , long delay , long period ) { super ( task , null ) ; $F201038 ( taskId , nextTaskId ) $F6947 ( description , task ) this . owner = owner ; this . delay = delay ; this . period = period ; counter = NUM00 ; this . sync = sync ; }
public static void init $F4374 ( args ) { try { compiler . initCompiler ( args ) ; if ( VM . BuildForAdaptiveSystem && VM . BuildWithBaseBootImageCompiler ) { optCompiler . initCompiler ( args ) ; } } catch ( Throwable e ) { while ( e != null ) { $F301 ( e ) $F131447 ( e ) } } }
static native boolean openDev $F72 ;
int sendNextByte $F72 { int result = NUM00 ; try { long tDiff = interByteTime - ( $F32707 ( System , lastRxTime ) * NUM00 ) ; if ( tDiff > NUM00 ) { $F630 ( log , tDiff ) Thread . sleep ( tDiff / NUM00 , ( int ) ( tDiff % NUM00 ) ) ; } } catch ( InterruptedException ex ) { $F103457 ( log , ex ) } if ( currTxCharPos >= currTxTgm . length ) $F20182 ( result , dequeueTelegram ) if ( result == NUM00 ) { writeChar ( currTxTgm [ currTxCharPos ++ ] , _BOOL ) ; if ( currTxCharPos >= currTxTgm . length ) { setProtStat ( ProtStatus . RECEIVING ) ; } } return result ; }
public static String encode ( Serializable o ) { $F1538 ( bos ) try { $F7054 ( oos , bos ) try { oos . writeObject ( o ) ; $F1206 ( oos ) } $F3229 ( oos ) return Base64 . encodeBytes ( bos . toByteArray ( ) ) ; } $F12153 ( e ) }
public static $F529 createImage $F71242 ( dctx , context ) { $F157005 ( result , createImageMethod , dctx , context ) return result ; }
public void addProfiles ( $F4170 IProfile ... profiles ) { if ( mAccountHeaderBuilder . mProfiles == null ) { mAccountHeaderBuilder . mProfiles = $F203 ; } Collections . addAll ( mAccountHeaderBuilder . mProfiles , IdDistributor . checkIds ( profiles ) ) ; mAccountHeaderBuilder . updateHeaderAndList ( ) ; }
private static boolean isIdentifierName ( String k ) { $F1749 ( n , k ) $F6482 ( n , _BOOL ) if ( ! Character . isJavaIdentifierStart ( k . charAt ( NUM00 ) ) ) { return _BOOL ; } for ( $F1316 ( i , n ) ) { if ( ! Character . isJavaIdentifierPart ( k . charAt ( i ) ) ) { return _BOOL ; } } return _BOOL ; }
static boolean lessThanUnsignedLong ( long x1 , long x2 ) { return ( x1 + Long . MIN_VALUE ) < ( x2 + Long . MIN_VALUE ) ; }
private void moveSingleNode ( Object source , Point newPoint ) { DisplayNode node = ( DisplayNode ) source ; int deltaX = newPoint . x - clickPoint . x ; $F20221 ( deltaY , newPoint , clickPoint ) int newX = node . getLocation ( ) . x + deltaX ; int newY = node . getLocation ( ) . y + deltaY ; node . setLocation ( newX , newY ) ; }
public static $F4203 $F5675 toList ( T obj1 , T obj2 , T obj3 ) { $F11916 ( list ) list . add ( obj1 ) ; list . add ( obj2 ) ; list . add ( obj3 ) ; return list ; }
public void addMacroRecord ( MacroRecord record ) { $F67023 ( record , macroRecords ) }
$F1431 protected KafkaSpoutWrapper createKafkaSpout ( Map conf , TopologyContext context , SpoutOutputCollector collector , final String topic , String schemeClsName , SpoutSpec spoutSpec , Map < String , StreamDefinition > sds ) throws Exception { $F21024 ( kafkaBrokerZkQuorum , config ) BrokerHosts hosts = null ; if ( config . hasPath ( NUM00 ) ) { hosts = new ZkHosts ( kafkaBrokerZkQuorum , config . getString ( NUM00 ) ) ; } else { hosts = new ZkHosts ( kafkaBrokerZkQuorum ) ; } String transactionZkRoot = DEFAULT_STORM_KAFKA_TRANSACTION_ZK_ROOT ; if ( config . hasPath ( NUM00 ) ) $F213842 ( transactionZkRoot , config ) String zkStateTransactionRelPath = DEFAULT_STORM_KAFKA_TRANSACTION_ZK_RELATIVE_PATH ; if ( config . hasPath ( NUM00 ) ) $F213842 ( zkStateTransactionRelPath , config ) SpoutConfig spoutConfig = new SpoutConfig ( hosts , topic , transactionZkRoot , zkStateTransactionRelPath + NUM00 + topic + NUM00 + topologyId ) ; boolean stormKafkaUseSameZkQuorumWithKafkaBroker = config . getBoolean ( NUM00 ) ; if ( stormKafkaUseSameZkQuorumWithKafkaBroker ) { ZkServerPortUtils utils = new ZkServerPortUtils ( kafkaBrokerZkQuorum ) ; spoutConfig . zkServers = utils . getZkHosts ( ) ; spoutConfig . zkPort = utils . getZkPort ( ) ; } else { ZkServerPortUtils utils = new ZkServerPortUtils $F16961 ( config ) ; spoutConfig . zkServers = utils . getZkHosts ( ) ; spoutConfig . zkPort = utils . getZkPort ( ) ; } spoutConfig . stateUpdateIntervalMs = config . hasPath ( NUM00 ) ? config . getInt ( NUM00 ) : NUM00 ; spoutConfig . fetchSizeBytes = config . hasPath ( NUM00 ) ? config . getInt ( NUM00 ) : NUM00 ; if ( config . hasPath ( NUM00 ) ) { spoutConfig . startOffsetTime = config . getInt ( NUM00 ) ; } spoutConfig . scheme = createMultiScheme ( conf , topic , schemeClsName ) ; KafkaSpoutWrapper wrapper = new KafkaSpoutWrapper ( spoutConfig , kafkaSpoutMetric ) ; SpoutOutputCollectorWrapper collectorWrapper = new SpoutOutputCollectorWrapper ( this , collector , topic , spoutSpec , numOfRouterBolts , sds , this . serializer ) ; wrapper . open ( conf , context , collectorWrapper ) ; if $F17747 ( LOG ) $F146673 ( LOG , topic , schemeClsName ) return wrapper ; }
public Builder addEmail ( Email email ) $F18637 ( emails , email , this )
public static HashProvider best ( HashParameters params ) { return best ( params , EnumSet . of ( HashSupport . STATEFUL ) ) ; }
public $F96 readRawBytes ( final int size ) throws IOException { if ( size < NUM00 ) { throw InvalidProtocolBufferNanoException . negativeSize ( ) ; } if ( bufferPos + size > currentLimit ) { skipRawBytes ( currentLimit - bufferPos ) ; throw InvalidProtocolBufferNanoException . truncatedMessage ( ) ; } if ( size <= bufferSize - bufferPos ) { $F4727 ( bytes , size ) $F21535 ( System , buffer , bufferPos , bytes , size ) bufferPos += size ; return bytes ; } else { throw InvalidProtocolBufferNanoException . truncatedMessage ( ) ; } }
static boolean pairSum ( int ar [ ] , int x ) { Arrays . sort ( ar ) ; int len = ar . length ; for ( int i = NUM00 , j = len - NUM00 ; i < j ; ) { if ( ar [ i ] + ar [ j ] == x ) { return _BOOL ; } else if ( ar [ i ] + ar [ j ] < x ) { i ++ ; } else { j -- ; } } return _BOOL ; }
public synchronized void loadFromFile $F72 { $F725 ( entries ) $F77510 ( file , Paths , fileName ) try ( BufferedReader reader = Files . newBufferedReader ( file , CHARSET ) ) { String line ; do { $F36243 ( line , reader ) AddressbookEntry parsedEntry = parseLine ( line ) ; if ( parsedEntry != null ) $F64959 ( entries , parsedEntry ) } while ( line != null ) ; } catch ( IOException ex ) { LOGGER . warning ( $F9309 ( ex ) ) ; } LOGGER . info ( $F26062 ( entries , fileName ) ) ; scanCategories ( ) ; }
public double localScore ( int i , int ... parents ) { for ( int p : parents ) if $F105 ( forbidden , p ) return Double . NaN ; double residualVariance = covariances . get ( i , i ) ; int n = getSampleSize ( ) ; int p = parents . length ; Matrix covxx = getSelection1 ( covariances , parents ) ; try { Matrix covxxInv = covxx . inverse ( ) ; Matrix covxy = getSelection2 ( covariances , parents , i ) ; Matrix b = covxxInv . times ( covxy ) ; double dot = NUM00 ; for ( int j = NUM00 ; j < covxy . getRowDimension ( ) ; j ++ ) { for ( int k = NUM00 ; k < covxy . getColumnDimension ( ) ; k ++ ) { dot += covxy . get ( j , k ) * b . get ( j , k ) ; } } residualVariance -= dot ; if ( residualVariance <= NUM00 ) { if ( isVerbose ( ) ) { out . println ( NUM00 + ( residualVariance / covariances . get ( i , i ) ) ) ; } return Double . NaN ; } double c = getPenaltyDiscount ( ) ; return score ( residualVariance , n , logn , p , c ) ; } catch ( Exception e ) { boolean removedOne = _BOOL ; while ( removedOne ) { $F37443 ( _parents ) $F46150 ( y , parents , _parents ) _parents . removeAll ( forbidden ) ; $F103411 ( parents , _parents ) for ( $F2277 ( y , _parents ) ) $F15302 ( parents , y , _parents ) removedOne = printMinimalLinearlyDependentSet ( parents , covariances ) ; } return Double . NaN ; } }
public boolean remove ( final int position ) { final AdapterTransaction removeTransaction = new RemoveTransaction $F200 ( this , position ) ; final boolean success = removeTransaction . perform ( ) ; mTransactions . offer ( removeTransaction ) ; return success ; }
private void encodeTypes ( $F17124 types , $F2100 ( m ) , String key , Declaration from ) { if $F4251 ( types ) $F665 $F20526 $F719 ( sats , types ) ; for ( Type st : types ) $F18351 ( sats , typeMap , st , from ) m . put ( key , sats ) ; }
public static void clearAssertionInformation $F72 { $F725 ( _AssertInfos ) _AssertOccured = _BOOL ; }
public void build ( String code , String customStatus ) { try { if ( customStatus != null ) { result . put ( resources . getString ( R . string . intent_extra_status ) , customStatus ) ; } else { result . put ( resources . getString ( R . string . intent_extra_status ) , $F222482 ( resources , R ) ) ; } result . put ( resources . getString ( R . string . intent_extra_code ) , code ) ; operationListResult . put ( result ) ; } catch ( JSONException e ) { $F222498 ( Log , TAG , e ) } }
public static Operator generateBranchPlan ( AkibanInformationSchema ais , Table table ) { final Operator indexScan = generateIndexScan ( ais , table ) ; final Schema schema = SchemaCache . globalSchema ( ais ) ; PrimaryKey pkey = table . getPrimaryKeyIncludingInternal ( ) ; IndexRowType indexType = schema . indexRowType ( pkey . getIndex ( ) ) ; return generateBranchPlan ( table , indexScan , indexType ) ; }
protected void addToMaintenanceQueue ( NodePortTuple npt ) $F116364 ( maintenanceQueue , npt , _BOOL )
$F65837 ( node , count , capacity , _BOOL , f , first , last , notEmpty )
public long startstack $F72 $F12907 ( Long , fields )
public static void copyRealmPrivilegesFromParent ( SSOToken token , OrganizationConfigManager parent , OrganizationConfigManager child ) throws SSOException , DelegationException { if $F6299 ( debug ) { debug . message ( NUM00 + NUM00 + parent . getOrganizationName ( ) + NUM00 + child . getOrganizationName ( ) ) ; } DelegationManager pdm = new DelegationManager ( token , parent . getOrganizationName ( ) ) ; DelegationManager cdm = new DelegationManager ( token , child . getOrganizationName ( ) ) ; String childOrgName = DNMapper . orgNameToDN ( child . getOrganizationName ( ) ) ; Set pdps = pdm . getPrivileges ( ) ; if $F4251 ( pdps ) { $F19243 ( debug ) $F665 } for ( $F2774 ( items , pdps ) ) { DelegationPrivilege dp = ( DelegationPrivilege ) items . next ( ) ; Set subjects = dp . getSubjects ( ) ; if $F4251 ( subjects ) { $F36310 ( debug , dp ) $F598 } $F19850 ( newSubjects ) for ( $F2774 ( subs , subjects ) ) { $F2778 ( sName , subs ) try { $F21551 ( id , IdUtils , token , sName ) AMIdentity newId = new AMIdentity ( token , id . getName ( ) , id . getType ( ) , childOrgName , id . getDN ( ) ) ; newSubjects . add ( IdUtils . getUniversalId ( newId ) ) ; } catch ( IdRepoException ide ) { if $F6299 ( debug ) { debug . message ( NUM00 + NUM00 + dp , ide ) ; } $F598 } } dp . setSubjects ( newSubjects ) ; Set permissions = dp . getPermissions ( ) ; if $F13709 ( permissions ) { $F10531 ( it , permissions ) while $F2921 ( it ) { DelegationPermission perm = ( DelegationPermission ) it . next ( ) ; perm . setOrganizationName ( NUM00 + childOrgName ) ; } } cdm . addPrivilege ( dp ) ; $F36310 ( debug , dp ) } }
public boolean match ( MimeType other ) { if ( this == other ) return _BOOL ; if ( type != null && other . type != null && $F45203 ( type , other ) ) return _BOOL ; if ( subtype != null && other . subtype != null && $F45203 ( subtype , other ) ) return _BOOL ; return _BOOL ; }
$F1 public boolean isArmed $F72 { return other . isArmed ( ) ; }
public EncoderTestSuiteBuilder valid ( int min , int max ) { _valid . set ( min , max + NUM00 ) ; $F38527 ( _invalid , min , max ) $F38527 ( _encoded , min , max ) return this ; }
protected $F81867 createChangeVirtualPoolDescriptors ( StorageSystem vplexSystem , Volume volume , VirtualPool newVpool , String taskId , $F46031 recommendations , VirtualPoolCapabilityValuesWrapper capabilities , ControllerOperationValuesWrapper operationsWrapper ) throws InternalException { URI volumeVarrayURI = volume . getVirtualArray ( ) ; VirtualArray volumeVarray = _dbClient . queryObject ( VirtualArray . class , volumeVarrayURI ) ; $F10635 ( s_logger , volumeVarrayURI ) URI volumeVpoolURI = volume . getVirtualPool ( ) ; VirtualPool currentVpool = _dbClient . queryObject ( $F81883 , volumeVpoolURI ) ; $F81867 descriptors = new ArrayList < VolumeDescriptor > $F72 ; VolumeDescriptor vplexVirtualVolumeDesc = new VolumeDescriptor ( VolumeDescriptor . Type . VPLEX_VIRT_VOLUME , volume . getStorageController ( ) , volume . getId ( ) , volume . getPool ( ) , null ) ; $F535 ( volumeParams ) volumeParams . put ( VolumeDescriptor . PARAM_VPOOL_CHANGE_EXISTING_VOLUME_ID , volume . getId ( ) ) ; volumeParams . put ( VolumeDescriptor . PARAM_VPOOL_CHANGE_NEW_VPOOL_ID , newVpool . getId ( ) ) ; volumeParams . put ( VolumeDescriptor . PARAM_VPOOL_CHANGE_OLD_VPOOL_ID , volume . getVirtualPool ( ) ) ; if ( operationsWrapper != null ) { if ( operationsWrapper . getMigrationSuspendBeforeCommit ( ) != null ) { volumeParams . put ( VolumeDescriptor . PARAM_MIGRATION_SUSPEND_BEFORE_COMMIT , operationsWrapper . getMigrationSuspendBeforeCommit ( ) ) ; } if ( operationsWrapper . getMigrationSuspendBeforeDeleteSource ( ) != null ) { volumeParams . put ( VolumeDescriptor . PARAM_MIGRATION_SUSPEND_BEFORE_DELETE_SOURCE , operationsWrapper . getMigrationSuspendBeforeDeleteSource ( ) ) ; } } vplexVirtualVolumeDesc . setParameters ( volumeParams ) ; descriptors . add ( vplexVirtualVolumeDesc ) ; if ( VirtualPoolChangeAnalyzer . vpoolChangeRequiresMigration ( currentVpool , newVpool ) ) { Volume migSrcVolume = getAssociatedVolumeInVArray ( volume , volumeVarrayURI ) ; descriptors . addAll ( createBackendVolumeMigrationDescriptors ( vplexSystem , volume , migSrcVolume , volumeVarray , newVpool , getVolumeCapacity ( migSrcVolume != null ? migSrcVolume : volume ) , taskId , recommendations , _BOOL , capabilities ) ) ; } URI haVarrayURI = VirtualPoolChangeAnalyzer . getHaVarrayURI ( currentVpool ) ; if ( haVarrayURI != null ) { VirtualArray haVarray = _dbClient . queryObject ( VirtualArray . class , haVarrayURI ) ; VirtualPool currentHaVpool = VirtualPoolChangeAnalyzer . getHaVpool ( currentVpool , _dbClient ) ; VirtualPool newHaVpool = VirtualPoolChangeAnalyzer . getNewHaVpool ( currentVpool , newVpool , _dbClient ) ; if ( VirtualPoolChangeAnalyzer . vpoolChangeRequiresMigration ( currentHaVpool , newHaVpool ) ) { Volume migSrcVolume = getAssociatedVolumeInVArray ( volume , haVarrayURI ) ; descriptors . addAll ( createBackendVolumeMigrationDescriptors ( vplexSystem , volume , migSrcVolume , haVarray , newHaVpool , getVolumeCapacity ( migSrcVolume != null ? migSrcVolume : volume ) , taskId , recommendations , _BOOL , capabilities ) ) ; } } return descriptors ; }
public static boolean isJavaScriptEnabled ( HttpServletRequest request ) { $F27836 ( session , request ) Boolean javaScriptEnabled = ( Boolean ) session . getAttribute ( NUM00 ) ; if ( javaScriptEnabled != null ) { $F44652 ( javaScriptEnabled ) } return _BOOL ; }
public boolean equals ( Object obj ) { if ( this == obj ) return _BOOL ; if ( obj instanceof ECFieldFp ) { return ( p . equals ( ( ( ECFieldFp ) obj ) . p ) ) ; } return _BOOL ; }
public String name $F72 { return theName ; }
$F141880 ( closeable , rethrown )
private static String checksumMD5 ( String data ) { MessageDigest md5 = null ; try $F14527 ( md5 , MessageDigest ) catch ( NoSuchAlgorithmException ex ) $F7077 ( ex ) return hexEncode ( md5 . digest ( data . getBytes ( ) ) ) ; }
public static boolean validSkinSpecFile ( String fileName ) { File file = new File ( Configuration . skinsDir ( ) , fileName ) ; if $F170765 ( file ) { return _BOOL ; } $F2218 ( dbf , DocumentBuilderFactory ) try { $F2220 ( builder , dbf ) $F2221 ( doc , builder , file ) NodeList listOfComponents = doc . getElementsByTagName ( UI_ELEMENT ) ; if ( $F72501 ( listOfComponents ) ) { return _BOOL ; } else { return _BOOL ; } } $F7474 ( _BOOL ) }
private void generateLegalTimesTree $F72 { int k0 = KeyEvent . KEYCODE_0 ; int k1 = KeyEvent . KEYCODE_1 ; int k2 = KeyEvent . KEYCODE_2 ; int k3 = KeyEvent . KEYCODE_3 ; int k4 = KeyEvent . KEYCODE_4 ; int k5 = KeyEvent . KEYCODE_5 ; int k6 = KeyEvent . KEYCODE_6 ; int k7 = KeyEvent . KEYCODE_7 ; int k8 = KeyEvent . KEYCODE_8 ; int k9 = KeyEvent . KEYCODE_9 ; $F58037 ( mLegalTimesTree ) $F58066 ( mIs24HourMode , minuteFirstDigit , k0 , k1 , k2 , k3 , k4 , k5 , minuteSecondDigit , k6 , k7 , k8 , k9 , firstDigit , mLegalTimesTree , secondDigit , thirdDigit , ampm , getAmOrPmKeyCode , AM , PM , fourthDigit ) }
public StrBuilder insert ( final int index , final Object obj ) { if ( obj == null ) $F8587 ( insert , index , nullText ) return insert ( index , obj . toString ( ) ) ; }
$F1 public void handleMouseMoved ( ChartCanvas canvas , MouseEvent e ) { if ( ! canvas . isTooltipEnabled ( ) ) $F932 String text = getTooltipText ( $F175257 ( canvas , e ) ) ; canvas . setTooltip ( text , e . getScreenX ( ) , e . getScreenY ( ) ) ; }
$F73823 ( lock , this , count )
private boolean loadUnpackedUMD ( String filename ) throws IOException , GeneralJpcspException { $F9303 ( doUmdBuffering , _BOOL ) $F1705 ( file , filename ) if $F3428 ( file ) { $F18800 ( raf , file ) $F27404 ( roChannel , raf ) ByteBuffer readbuffer = roChannel . map ( FileChannel . MapMode . READ_ONLY , NUM00 , $F181356 ( roChannel ) ) ; emulator . load ( NUM00 , readbuffer ) ; $F59 ( raf ) $F973 ( log ) return _BOOL ; } return _BOOL ; }
public boolean disableVMAX3Compression ( URI blockObjectURI , StorageSystem storageSystem ) { VirtualPool virtualPool = null ; StoragePool storagePool = null ; Volume volume = null ; if ( URIUtil . isType ( blockObjectURI , $F8540 ) ) { volume = _dbClient . queryObject ( $F8540 , blockObjectURI ) ; } else if ( URIUtil . isType ( blockObjectURI , $F34885 ) ) { BlockSnapshot $F34887 ( snapshot , _dbClient , blockObjectURI ) ; volume = _dbClient . queryObject ( $F8540 , snapshot . getParent ( ) ) ; } else if ( URIUtil . isType ( blockObjectURI , $F30624 ) ) { BlockMirror mirror = _dbClient . queryObject ( $F30624 , blockObjectURI ) ; virtualPool = _dbClient . queryObject ( $F81883 , mirror . getVirtualPool ( ) ) ; storagePool = _dbClient . queryObject ( StoragePool . class , mirror . getPool ( ) ) ; } if ( volume != null ) { virtualPool = _dbClient . queryObject ( $F81883 , volume . getVirtualPool ( ) ) ; storagePool = _dbClient . queryObject ( StoragePool . class , volume . getPool ( ) ) ; } return ( checkIfProviderSupportsCompressionOperations ( storageSystem ) && ! virtualPool . getCompressionEnabled ( ) && storagePool . getCompressionEnabled ( ) ) ; }
public static LatLon rhumbEndPosition ( LatLon p , double rhumbAzimuthRadians , double pathLengthRadians ) { $F826 ( p ) return rhumbEndPosition ( p , Angle . fromRadians ( rhumbAzimuthRadians ) , Angle . fromRadians ( pathLengthRadians ) ) ; }
private static int indexOf ( $F131 array , Object elt ) { return indexOf ( array , array . length , elt ) ; }
public Dimension maximumLayoutSize ( Container target ) { return new Dimension ( Integer . MAX_VALUE , Integer . MAX_VALUE ) ; }
public static String readStream ( InputStream in ) { $F58550 ( reader , in ) $F83 ( sb ) String line = null ; try { while $F443 ( line , reader ) $F104801 ( sb , line ) } catch ( IOException e ) { FreshAirLog . e ( NUM00 , e ) ; } finally { $F29053 ( in ) $F29053 ( reader ) } $F92 ( sb ) }
public void update ( long n ) $F120892 ( uncounted , n )
private void logExpiration ( Entry e ) { if ( e . renewalsDone ( ) ) { logger . log ( Level . FINE , NUM00 , e . lease ) ; } else { logger . log ( Levels . FAILED , NUM00 , e . lease ) ; } }
void removeRipple ( Ripple ripple ) { final Ripple [ ] ripples = mExitingRipples ; final int count = mExitingRipplesCount ; final int index = getRippleIndex ( ripple ) ; if ( index >= NUM00 ) { System . arraycopy ( ripples , index + NUM00 , ripples , index , count - ( index + NUM00 ) ) ; ripples [ count - NUM00 ] = null ; mExitingRipplesCount -- ; invalidateSelf ( ) ; } }
protected final void writeS ( ByteBuffer buf , String text ) { if ( text == null ) { buf . putChar ( NUM00 ) ; } else { $F22998 ( len , text ) for ( $F119 ( i , len ) ) { buf . putChar ( text . charAt ( i ) ) ; } buf . putChar ( NUM00 ) ; } }
$F1 public void onDrawEye ( Eye eye ) { $F14651 ( GLES20 ) Engine . checkGLError ( NUM00 ) ; if $F1264 ( prefOrientationProviderString ) { if ( firstOnDrawEye > NUM00 ) { firstOnDrawEye -- ; $F12457 ( m ) Matrix . invertM ( m , NUM00 , mHeadViewSDK , NUM00 ) ; Matrix . multiplyMM ( m , NUM00 , eye . getEyeView ( ) , NUM00 , m , NUM00 ) ; if ( eye . getType ( ) == Eye . Type . RIGHT ) { mEyeRightView = m ; } else if ( eye . getType ( ) == Eye . Type . LEFT ) { mEyeLeftView = m ; } $F665 } $F12457 ( m ) if ( eye . getType ( ) == Eye . Type . RIGHT ) { Matrix . multiplyMM ( m , NUM00 , mHeadViewUse , NUM00 , mEyeRightView , NUM00 ) ; } else { Matrix . multiplyMM ( m , NUM00 , mHeadViewUse , NUM00 , mEyeLeftView , NUM00 ) ; } Matrix . multiplyMM ( mView , NUM00 , m , NUM00 , mCamera , NUM00 ) ; } else { Matrix . multiplyMM ( mView , NUM00 , eye . getEyeView ( ) , NUM00 , mCamera , NUM00 ) ; } $F5415 perspective = eye . getPerspective ( Z_NEAR , Z_FAR ) ; $F14653 ( GLES20 ) GLES20 . glBlendFunc ( GLES20 . GL_SRC_ALPHA , GLES20 . GL_ONE_MINUS_SRC_ALPHA ) ; $F14657 ( GLES20 ) if ( prefShowEnv && bgEnv . isReady ( ) ) { Matrix . multiplyMM ( mModelView , NUM00 , mView , NUM00 , bgEnv . model , NUM00 ) ; Matrix . multiplyMM ( mModelViewProjection , NUM00 , perspective , NUM00 , mModelView , NUM00 ) ; bgEnv . draw ( eye . getType ( ) , mModelViewProjection ) ; } GLES20 . glDisable ( GLES20 . GL_DEPTH_TEST ) ; Matrix . multiplyMM ( mModelViewProjection , NUM00 , perspective , NUM00 , cameraPreview . model , NUM00 ) ; cameraPreview . draw ( eye . getType ( ) , mModelViewProjection ) ; Matrix . multiplyMM ( mModelView , NUM00 , mView , NUM00 , screen . model , NUM00 ) ; Matrix . multiplyMM ( mModelViewProjection , NUM00 , perspective , NUM00 , mModelView , NUM00 ) ; screen . draw ( eye . getType ( ) , mModelViewProjection ) ; for ( ButtonThing button : buttonList ) { Matrix . multiplyMM ( mModelView , NUM00 , mView , NUM00 , button . model , NUM00 ) ; Matrix . multiplyMM ( mModelViewProjection , NUM00 , perspective , NUM00 , mModelView , NUM00 ) ; button . draw ( eye . getType ( ) , mModelViewProjection ) ; } Matrix . multiplyMM ( mModelViewProjection , NUM00 , perspective , NUM00 , aimPoint . model , NUM00 ) ; aimPoint . draw ( Eye . Type . MONOCULAR , mModelViewProjection ) ; }
protected SourceRecords consumeRecordsByTopic ( int numRecords ) throws InterruptedException { SourceRecords records = new SourceRecords $F72 ; consumeRecords ( numRecords , null ) ; return records ; }
$F1 public boolean equals ( Object o ) { $F3627 ( this , o , _BOOL ) if ( ! ( o instanceof PrototypeSize ) ) { return _BOOL ; } PrototypeSize size = ( PrototypeSize ) o ; $F12738 ( prototype , size ) }
private static int compareVersion ( String versionStr1 , String versionStr2 ) { if ( versionStr1 == null ) { throw new MLContextException $F580 ; } if ( versionStr2 == null ) { throw new MLContextException $F580 ; } Scanner scanner1 = null ; Scanner scanner2 = null ; try { scanner1 = new Scanner ( versionStr1 ) ; scanner2 = new Scanner ( versionStr2 ) ; scanner1 . useDelimiter ( NUM00 ) ; scanner2 . useDelimiter ( NUM00 ) ; while ( scanner1 . hasNextInt ( ) && scanner2 . hasNextInt ( ) ) { $F8254 ( version1 , scanner1 ) $F8254 ( version2 , scanner2 ) if ( version1 < version2 ) $F7629 else if ( version1 > version2 ) $F1083 } return scanner1 . hasNextInt ( ) ? NUM00 : NUM00 ; } $F4651 ( scanner1 , scanner2 ) }
public static boolean isValidVector ( Vector2f vector ) { $F1933 ( vector , _BOOL ) if ( Float . isNaN ( vector . x ) || Float . isNaN ( vector . y ) ) { return _BOOL ; } if ( Float . isInfinite ( vector . x ) || Float . isInfinite ( vector . y ) ) { return _BOOL ; } return _BOOL ; }
public boolean isObsessional $F72 $F298 ( typeString , SUFFIX_OBSESSIONAL )
$F179160 public void changeLocoSpeed ( DccThrottle t , Block blk , float speed ) { if ( blk == referenced && speed == desiredSpeedStep ) $F932 float blockLength = blk . getLengthMm ( ) ; if ( blk == referenced ) { distanceRemaining = distanceRemaining - getDistanceTravelled ( _throttle . getIsForward ( ) , _throttle . getSpeedSetting ( ) , ( ( float ) ( System . nanoTime ( ) - lastTimeTimerStarted ) / NUM00 ) ) ; blockLength = distanceRemaining ; $F980 ( log ) } else { referenced = blk ; } changeLocoSpeed ( t , blockLength , speed ) ; }
public boolean remove ( Object targetChild ) $F8587 ( remove , targetChild , _BOOL )
private void notifyClassObservers ( ClassDescriptor classDescriptor ) { for ( IClassObserver observer : classObserverList ) { observer . observeClass ( classDescriptor ) ; } }
public void dup2 $F72 { mv . visitInsn ( Opcodes . DUP2 ) ; }
static boolean isAppXml ( String mime ) { return mime != null && ( mime . equals ( NUM00 ) || mime . equals ( NUM00 ) || mime . equals ( NUM00 ) || $F40447 ( mime ) ) ; }
public static NativePage createNativePageForURL ( String url , NativePage candidatePage , Tab tab , TabModelSelector tabModelSelector , Activity activity ) { return createNativePageForURL ( url , candidatePage , tab , tabModelSelector , activity , tab . isIncognito ( ) ) ; }
protected void throwParseException ( ParseException e ) throws ParseException { if ( locator != null ) { String elementLocation = NUM00 ; if ( curHandler != null ) { elementLocation += NUM00 + curHandler . qName ; } String location = NUM00 + String . valueOf ( locator . getLineNumber ( ) ) + NUM00 + String . valueOf ( locator . getColumnNumber ( ) ) + elementLocation + NUM00 ; LogUtils . logException ( logger , Level . FINE , location , e ) ; throw new ParseException ( location + e . getMessage ( ) , e ) ; } else { LogUtils . logException ( logger , Level . FINE , null , e ) ; throw e ; } }
public CustomEditor $F72 { $F9898 ( setLayout ) add ( m_Label , BorderLayout . CENTER ) ; m_DeleteBut . addActionListener ( m_InnerActionListener ) ; m_EditBut . addActionListener ( m_InnerActionListener ) ; m_UpBut . addActionListener ( m_InnerActionListener ) ; m_DownBut . addActionListener ( m_InnerActionListener ) ; m_AddBut . addActionListener ( m_InnerActionListener ) ; m_ElementList . addListSelectionListener ( m_InnerSelectionListener ) ; m_ElementList . addMouseListener ( m_InnerMouseListener ) ; $F58097 ( m_AddBut ) $F58097 ( m_DeleteBut ) $F58097 ( m_EditBut ) $F58097 ( m_UpBut ) $F58097 ( m_DownBut ) }
public MemoidOne ( Function < ? super Input , ? extends Output > fn , BiPredicate < Input , Input > equality ) { fn_ = Objects . requireNonNull ( fn ) ; equality_ = Objects . requireNonNull ( equality ) ; }
public static EPType singleValue ( Class singleValueType ) { if ( singleValueType != null && singleValueType . isArray ( ) ) { return new ClassMultiValuedEPType ( singleValueType , singleValueType . getComponentType ( ) ) ; } return new ClassEPType ( singleValueType ) ; }
private static $F6969 convertFieldType ( String fieldType ) { $F65325 ( fieldTypeMap , fieldType ) $F1274 }
void addXMLElementAfterTokenIndex ( int lastTokenIndex , XMLElement element , boolean addAfterNewLine ) throws Exception { addXMLElementAfterTokenIndex ( lastTokenIndex , element , addAfterNewLine , _BOOL ) ; }
public static $F529 findContentParents $F71242 ( dctx , context ) { $F34733 ( results , FastMap ) $F6689 parentList = FastList . newInstance ( ) ; $F545 ( results , parentList ) $F28487 ( dispatcher , dctx ) $F28495 ( contentId , context ) $F28495 ( contentAssocTypeId , context ) $F28495 ( direction , context ) if $F4329 ( UtilValidate , direction ) { direction = NUM00 ; } $F34733 ( traversMap , FastMap ) $F545 ( traversMap , contentId ) $F545 ( traversMap , direction ) $F545 ( traversMap , contentAssocTypeId ) try { $F28545 ( thisResults , dispatcher , traversMap ) String errorMsg = ServiceUtil . getErrorMessage ( thisResults ) ; if $F35028 ( UtilValidate , errorMsg ) { Debug . logError ( NUM00 + errorMsg , module ) ; return ServiceUtil . returnError ( errorMsg ) ; } $F108897 ( nodeMap , UtilGenerics , thisResults ) walkParentTree ( nodeMap , parentList ) ; } catch ( GenericServiceException e ) { return ServiceUtil . returnFailure ( e . getMessage ( ) ) ; } return results ; }
public static boolean arrayEquals ( Object x , Object y , double tolf , double told ) { if ( x == null && y == null ) { return _BOOL ; } $F6973 ( x , y , _BOOL ) $F20850 ( xClass , x ) $F20850 ( yClass , y ) $F35938 ( xClass , yClass , _BOOL ) if $F101443 ( xClass ) $F23588 ( x , y ) else { if ( xClass . equals ( $F144048 ) ) { return Arrays . equals ( $F25706 ( x ) , $F25706 ( y ) ) ; } else if ( xClass . equals ( $F1986 . class ) ) { if ( told == NUM00 ) { return Arrays . equals ( $F41244 ( x ) , $F41244 ( y ) ) ; } else { return doubleArrayEquals ( $F41244 ( x ) , $F41244 ( y ) , told ) ; } } else if ( xClass . equals ( $F2469 . class ) ) { return Arrays . equals ( $F2471 ( x ) , $F2471 ( y ) ) ; } else if ( xClass . equals ( $F5415 . class ) ) { if ( tolf == NUM00 ) { return Arrays . equals ( $F41250 ( x ) , $F41250 ( y ) ) ; } else { return floatArrayEquals ( $F41250 ( x ) , $F41250 ( y ) , ( float ) tolf ) ; } } else if ( xClass . equals ( $F144055 ) ) { return Arrays . equals ( $F2457 ( x ) , $F2457 ( y ) ) ; } else if ( xClass . equals ( $F5078 . class ) ) { return Arrays . equals ( $F41262 ( x ) , $F41262 ( y ) ) ; } else if ( xClass . equals ( $F1469 . class ) ) { return Arrays . equals ( $F114168 ( x ) , $F114168 ( y ) ) ; } else if ( xClass . equals ( $F144083 ) ) { return Arrays . equals ( $F41256 ( x ) , $F41256 ( y ) ) ; } else { $F32760 ( xo , x ) $F32760 ( yo , y ) $F164288 ( xo , yo , _BOOL ) for ( $F24429 ( i , xo ) ) { if ( ! arrayEquals ( xo [ i ] , yo [ i ] , tolf , told ) ) { return _BOOL ; } } return _BOOL ; } } }
public Dictionary ( Directory tempDir , String tempFileNamePrefix , InputStream affix , List $F64393 dictionaries , boolean ignoreCase ) throws $F79407 { this . ignoreCase = ignoreCase ; this . needsInputCleaning = ignoreCase ; this . needsOutputCleaning = _BOOL ; flagLookup . add ( new BytesRef $F72 ) ; Path aff = Files . createTempFile ( tempPath , NUM00 , NUM00 ) ; OutputStream out = new BufferedOutputStream ( Files . newOutputStream ( aff ) ) ; InputStream aff1 = null ; InputStream aff2 = null ; boolean success = _BOOL ; try { final $F96 buffer = new byte [ NUM00 * NUM00 ] ; int len ; $F87062 ( len , affix , buffer , out ) $F59 ( out ) aff1 = new BufferedInputStream $F33274 ( Files , aff ) ; String encoding = getDictionaryEncoding ( aff1 ) ; CharsetDecoder decoder = getJavaEncoding ( encoding ) ; aff2 = new BufferedInputStream $F33274 ( Files , aff ) ; readAffixFile ( aff2 , decoder ) ; IntSequenceOutputs o = IntSequenceOutputs . getSingleton ( ) ; Builder < IntsRef > b = new Builder $F200 ( FST . INPUT_TYPE . BYTE4 , o ) ; readDictionaryFiles ( tempDir , tempFileNamePrefix , dictionaries , decoder , b ) ; words = b . finish ( ) ; aliases = null ; morphAliases = null ; success = _BOOL ; } finally { IOUtils . closeWhileHandlingException ( out , aff1 , aff2 ) ; if ( success ) $F11331 ( Files , aff ) else { IOUtils . deleteFilesIgnoringExceptions ( aff ) ; } } }
public void collapseBuilding ( Building bldg ) { buildings . removeElement ( bldg ) ; Enumeration < Coords > bldgCoords = bldg . getCoords ( ) ; while $F1444 ( bldgCoords ) { final Coords coords = bldgCoords . nextElement ( ) ; collapseBuilding ( coords ) ; } }
$F22609 public void detachISO ( String vmId , boolean isDeleteFile , AsyncMethodCallback < Host . AsyncClient . detach_iso_call > handler ) throws RpcException { ensureClient ( ) ; DetachISORequest detachISORequest = new DetachISORequest ( vmId ) ; detachISORequest . setDelete_file ( isDeleteFile ) ; clientProxy . setTimeout ( DETACH_ISO_TIMEOUT_MS ) ; logger . info ( NUM00 , vmId , getHostIp ( ) , detachISORequest ) ; try { clientProxy . detach_iso ( detachISORequest , handler ) ; } $F22635 ( e ) }
private String readNfcErrorMsg ( ByteBuffer reply ) throws IOException { $F8354 ( errorType , reply ) $F8354 ( errorCode , reply ) $F8354 ( msgLen , reply ) $F40722 ( msgLen ) $F87627 ( msgBuffer , ByteBuffer , msgLen ) readFully ( msgBuffer ) ; String errorMsg = new String ( msgBuffer . array ( ) , NUM00 , msgLen - NUM00 , Charsets . US_ASCII ) ; return String . format ( NUM00 , errorType , errorCode , errorMsg ) ; }
private void show ( boolean show ) { if ( show ) { $F65150 ( mXFade ) mState = STATE_PIE ; mCurrentItem = null ; PieItem root = getRoot ( ) ; for ( PieItem openItem : mOpen ) { if ( openItem . hasItems ( ) ) { for ( PieItem item : openItem . getItems ( ) ) $F242209 ( item , _BOOL ) } } $F15121 ( mLabel ) $F725 ( mOpen ) mOpen . add ( root ) ; layoutPie ( ) ; fadeIn ( ) ; } else { mState = STATE_IDLE ; mTapMode = _BOOL ; $F65150 ( mXFade ) if ( mLabel != null ) $F71121 ( mLabel ) } setVisible ( show ) ; mHandler . sendEmptyMessage ( show ? MSG_OPEN : MSG_CLOSE ) ; }
private synchronized void persistProfileAndNotifyChange ( AuthnProvider modifiedProvider , boolean newObject ) { $F266936 ( modifiedProvider , System ) ; if ( newObject ) { _dbClient . createObject ( modifiedProvider ) ; } else { _dbClient . persistObject ( modifiedProvider ) ; } notifyChange ( ) ; }
public void addUndoableAction ( UndoableAction action ) { undoStack . push ( action ) ; $F6050 ( redoStack ) }
public IntArrayList $F23416 ( data ) { array = new int [ ( int ) $F28143 ( data ) + NUM00 ] ; size = data . length ; $F135 ( System , data , array , size ) }
private void addPingTimeData ( long sample ) { $F8934 ( lastPingTimesLock ) try { if ( lastPingTimes == null ) { $F11125 ( lastPingTimes , PING_MOVING_AVERAGE_WINDOW ) Arrays . fill ( lastPingTimes , sample ) ; } else { System . arraycopy ( lastPingTimes , NUM00 , lastPingTimes , NUM00 , lastPingTimes . length - NUM00 ) ; $F41606 ( lastPingTimes , sample ) } } $F796 ( lastPingTimesLock ) }
$F77358 ( buffer , contentEncoding )
protected void tearDown $F72 { try $F4650 ( ds , sds ) $F3957 }
public String substring $F36827 ( subject , start , stop ) { if ( stop == - NUM00 || stop >= subject . length ( ) ) $F61217 ( subject , start ) $F6669 ( subject , start , stop ) }
public boolean controlRunTrain ( int idx ) { if $F585 ( log ) { log . debug ( NUM00 + idx + NUM00 + _runMode + NUM00 + getDisplayName ( ) ) ; } boolean ret = _BOOL ; int oldIndex = - MODE_MANUAL ; if ( _engineer == null ) { switch ( idx ) { case HALT : case RESUME : case RETRY : ret = _BOOL ; $F597 case ABORT : if ( _runMode == Warrant . MODE_LEARN ) { firePropertyChange ( NUM00 , Integer . valueOf ( - MODE_LEARN ) , Integer . valueOf ( _idxCurrentOrder ) ) ; } else { stopWarrant ( _BOOL ) ; } $F597 } } else { synchronized ( _engineer ) { oldIndex = _engineer . getRunState ( ) ; switch ( idx ) { case HALT : _engineer . setHalt ( _BOOL ) ; $F597 case RESUME : _engineer . setHalt ( _BOOL ) ; restart ( ) ; ret = moveIntoNextBlock ( MID ) ; $F597 case RETRY : BlockOrder bo = getBlockOrderAt ( _idxCurrentOrder + NUM00 ) ; ret = _BOOL ; if ( bo != null ) { OBlock b = bo . getBlock ( ) ; if ( b . allocate ( this ) == null && ( b . getState ( ) & OBlock . OCCUPIED ) != NUM00 ) { _idxCurrentOrder ++ ; if $F1238 ( b , _stoppingBlock ) { _stoppingBlock . removePropertyChangeListener ( this ) ; _stoppingBlock = null ; } bo . setPath ( this ) ; restart ( ) ; goingActive ( b ) ; ret = _BOOL ; } } $F597 $F20998 ( ABORT , stopWarrant , _BOOL ) } } } if ( ret ) { firePropertyChange ( NUM00 , Integer . valueOf ( oldIndex ) , Integer . valueOf ( idx ) ) ; } return ret ; }
public void removeCustomSashFormListener ( ICustomSashFormListener listener ) $F4579 ( customSashFormListeners , listener )
$F59119 ( file , data , writeStringToFile , Charset , _BOOL )
protected void deleteSessionVariables $F71933 ( sessionId , varNames ) { $F59924 ( sessionId ) Key key = keyFactory . newKey ( sessionId ) ; Transaction transaction = datastore . newTransaction ( ) ; try { Entity stateEntity = transaction . get ( key ) ; Entity . Builder builder = Entity . builder ( stateEntity ) ; $F83 ( delNames ) for ( String varName : varNames ) { $F86403 ( delNames , varName ) builder = builder . remove ( varName ) ; } datastore . update ( builder . build ( ) ) ; } $F1214 finally { if $F433289 ( transaction ) $F21746 ( transaction ) } }
$F1 public String toString $F72 { $F20818 ( sb ) format ( $F106703 ( getYear ) , NUM00 , sb ) ; $F84 ( sb ) format ( $F106703 ( getMonth ) , NUM00 , sb ) ; $F84 ( sb ) format ( getDate ( ) , NUM00 , sb ) ; $F92 ( sb ) }
$F1 public void close $F72 throws IOException { if ( mBufferCount > NUM00 ) { try $F29756 ( mQueue , mBuffer , mBufferCount ) catch ( InterruptedException e ) $F14525 mBufferCount = NUM00 ; } $F59 ( mQueue ) try $F45915 ( mThread ) catch ( InterruptedException e ) $F14525 $F3229 ( super ) checkException ( ) ; }
public static int parseStringAsInt ( String in ) throws IndexParseFieldException { try $F75349 ( Integer , in ) catch ( NumberFormatException e ) { throw new IndexParseFieldException ( in , e ) ; } }
public void writeAll ( ResultSet rs , boolean includeColumnNames , boolean trim ) throws SQLException , IOException { $F72524 ( includeColumnNames , writeColumnNames , rs ) while $F1682 ( rs ) { writeNext ( resultService . getColumnValues ( rs , trim ) ) ; } }
public void testSpecialCase1 $F72 { byte $F3009 = $F201340 ; $F88888 int aSign = - NUM00 ; int bSign = - NUM00 ; byte $F3018 = { - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F37344 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , result ) }
private static void verifyDevice ( IDevice d , long mac , Short vlan , Integer ip , long swId , int port ) { assertNotNull ( d ) ; assertEquals ( MacAddress . of ( mac ) , d . getMACAddress ( ) ) ; if ( vlan == null ) assertArrayEquals ( new VlanVid [ ] { VlanVid . ofVlan ( - NUM00 ) } , d . getVlanId ( ) ) ; else assertArrayEquals ( new VlanVid [ ] { VlanVid . ofVlan ( vlan ) } , d . getVlanId ( ) ) ; if ( ip == null ) assertArrayEquals ( new IPv4Address [ ] { IPv4Address . of ( NUM00 ) } , d . getIPv4Addresses ( ) ) ; else assertArrayEquals ( new IPv4Address [ ] { IPv4Address . of ( ip ) } , d . getIPv4Addresses ( ) ) ; SwitchPort expectedAp = new SwitchPort ( DatapathId . of ( swId ) , OFPort . of ( port ) ) ; assertArrayEquals ( new SwitchPort [ ] { expectedAp } , d . getAttachmentPoints ( ) ) ; }
public ZoneRulesBuilder addWindow ( ZoneOffset standardOffset , LocalDateTime until , TimeDefinition untilDefinition ) { $F10578 ( Objects , standardOffset ) $F10578 ( Objects , until ) $F10578 ( Objects , untilDefinition ) TZWindow window = new TZWindow ( standardOffset , until , untilDefinition ) ; if $F3817 ( windowList ) { TZWindow $F7662 ( previous , windowList ) ; window . validateWindowOrder ( previous ) ; } windowList . add ( window ) ; return this ; }
public Hashtable < IPoint , List $F80240 > intersections ( Iterator $F80240 it ) { Collection $F80240 c = new ArrayList $F80240 $F72 ; $F3536 ( it , c ) return intersections ( c . toArray ( new ILineSegment $F10277 ) ) ; }
public boolean isTTFNativeFont $F72 { return ttf ; }
private void registerProviders $F72 { final DevMachine devMachine = appContext . getDevMachine ( ) ; $F2329 ( devMachine ) final Set < Macro > providers = getMacros ( devMachine ) ; checkNotNull ( providers ) ; $F19233 ( providers ) providerRegistry . register ( providers ) ; }
public LongMap ( int initialCapacity , float loadFactor ) { $F81428 ( initialCapacity ) if ( capacity > $F152871 ) $F11416 ( initialCapacity ) capacity = MathUtils . nextPowerOfTwo ( initialCapacity ) ; $F255788 ( loadFactor ) this . loadFactor = loadFactor ; $F53239 ( threshold , capacity , loadFactor ) mask = capacity - NUM00 ; hashShift = NUM00 - Integer . numberOfTrailingZeros ( capacity ) ; stashCapacity = Math . max ( NUM00 , ( int ) Math . ceil ( Math . log ( capacity ) ) + NUM00 ) ; pushIterations = Math . max ( Math . min ( capacity , NUM00 ) , $F86010 ( Math , capacity ) / NUM00 ) ; keyTable = new long [ capacity + stashCapacity ] ; valueTable = ( $F25667 ) new Object [ keyTable . length ] ; }
protected ASN1Set ( ASN1Encodable obj ) $F6659 ( set , obj )
protected void populateStreamBlob ( int testId , $F96 baseContent , int requiredSize ) throws SQLException { final $F96 testBytes = generateBlobContent ( baseContent , requiredSize ) ; try ( FbDatabase db = createDatabaseConnection ( ) ) { listener = new SimpleStatementListener $F72 ; transaction = getTransaction ( db ) ; try { statement = db . createStatement ( transaction ) ; statement . addStatementListener ( listener ) ; final BlobParameterBuffer blobParameterBuffer = db . createBlobParameterBuffer ( ) ; blobParameterBuffer . addArgument ( BlobParameterBuffer . TYPE , BlobParameterBuffer . TYPE_STREAM ) ; final FbBlob blob = db . createBlobForOutput ( transaction , blobParameterBuffer ) ; $F5837 ( blob ) int bytesWritten = NUM00 ; while ( bytesWritten < testBytes . length ) { $F96 buffer = new byte [ Math . min ( blob . getMaximumSegmentSize ( ) , testBytes . length - bytesWritten ) ] ; $F198866 ( System , testBytes , bytesWritten , buffer ) blob . putSegment ( buffer ) ; bytesWritten += buffer . length ; } $F59 ( blob ) statement . prepare ( INSERT_BLOB_TABLE ) ; final DatatypeCoder datatypeCoder = db . getDatatypeCoder ( ) ; FieldValue param1 = new FieldValue ( datatypeCoder . encodeInt ( testId ) ) ; FieldValue param2 = new FieldValue ( datatypeCoder . encodeLong ( blob . getBlobId ( ) ) ) ; statement . execute ( RowValue . of ( param1 , param2 ) ) ; $F59 ( statement ) } finally $F19092 ( transaction ) } }
private static long signFromBit_antiCyclic ( final double value ) { return Double . doubleToRawLongBits ( value ) > > NUM00 | NUM00 ; }
public void addNearKey ( KeyCacheObject key , GridCacheSharedContext ctx ) throws IgniteCheckedException $F207 ( nearKeys , key )
private void analyzeClassFields ( String className , int action ) { try { $F96883 ( dynamicClass , Class , className ) $F16273 ( fields , dynamicClass ) for ( Field field : fields ) { if ( isPrivateAndNonPrimitive ( field ) ) { oneToAnyConditions ( className , field , action ) ; manyToAnyConditions ( className , field , action ) ; } } } catch ( ClassNotFoundException ex ) { $F301 ( ex ) throw new DatabaseGenerateException ( DatabaseGenerateException . CLASS_NOT_FOUND + className ) ; } }
protected boolean isLevelEnabled ( int logLevel ) { return ( logLevel >= currentLogLevel ) ; }
public static void loadAll ( final JFrame parent , final IDebugger debugger , final IAddress offset , final int size ) { checkArguments ( parent , debugger , offset ) ; final CDumpAllWaiter waiter = new CDumpAllWaiter ( debugger , offset , size ) ; CProgressDialog . showEndless ( parent , NUM00 + NUM00 , waiter ) ; if ( waiter . getException ( ) != null ) { CUtilityFunctions . logException ( waiter . getException ( ) ) ; $F21899 ( innerMessage ) final String innerDescription = CUtilityFunctions . createDescription ( String . format ( NUM00 , offset . toHexString ( ) ) , $F21904 , $F21904 ) ; NaviErrorDialog . show ( parent , innerMessage , innerDescription , waiter . getException ( ) ) ; } }
public static boolean deleteDirectory ( String directory , boolean useOSNativeDelete ) throws IOException { boolean result = _BOOL ; if ( ! useOSNativeDelete ) { $F1705 ( dir , directory ) for ( $F3445 ( file , dir ) ) { if $F220007 ( file ) { log . debug ( $F20534 ( file ) ) ; } else { log . debug ( $F20534 ( file ) ) ; $F60829 ( file ) } file = null ; } if $F220007 ( dir ) { $F980 ( log ) result = _BOOL ; } else { $F980 ( log ) $F60829 ( dir ) } dir = null ; } else { Process p = null ; Thread std = null ; try { $F43316 ( runTime , Runtime ) $F980 ( log ) if ( File . separatorChar == NUM00 ) { p = runTime . exec ( $F139654 ( directory ) ) ; } else { p = runTime . exec ( NUM00 + $F79251 ( directory , File ) ) ; } std = stdOut ( p ) ; while $F44356 ( std ) { $F79821 ( Thread ) } $F980 ( log ) result = _BOOL ; } $F9877 ( log , e ) finally { if ( null != p ) { $F980 ( log ) $F17623 ( p ) p = null ; } std = null ; } } return result ; }
public void testSetAttributeNodeNS1 $F72 throws Throwable { Document doc ; Element element ; Attr attribute1 ; Attr attribute2 ; Attr attrNode ; String attrName ; String attrNS ; NamedNodeMap attributes ; int length ; $F236 ( doc , load , builder ) $F94892 ( element , doc ) $F89256 ( attribute1 , doc ) $F89256 ( attribute2 , doc ) $F187587 ( attribute2 ) element . setAttributeNodeNS ( attribute1 ) ; element . setAttributeNodeNS ( attribute2 ) ; $F296256 ( attrNode , element ) $F89257 ( attrName , attrNode ) $F89259 ( attrNS , attrNode ) assertEquals ( NUM00 , NUM00 , attrName ) ; assertEquals ( NUM00 , NUM00 , attrNS ) ; $F35323 ( attributes , element ) $F59131 ( length , attributes ) ; assertEquals ( NUM00 , NUM00 , length ) ; }
$F38752 ( _BOOL )
public static String findEditTable ( String tables ) { if $F20899 ( StringUtils , tables ) { $F1384 ( spacepos , tables ) $F1384 ( commapos , tables ) if $F35297 ( spacepos , commapos ) $F35299 ( tables , spacepos ) else if $F35297 ( commapos , spacepos ) $F35299 ( tables , commapos ) return tables ; } else $F4639 }
public void writeOperationsCarFile $F72 { makeBackupFile ( defaultOperationsFilename ( ) ) ; try { if ( ! checkFile ( defaultOperationsFilename ( ) ) ) { $F70659 file = new $F70659 ( defaultOperationsFilename ( ) ) ; $F70659 parentDir = file . getParentFile ( ) ; if $F1906 ( parentDir ) { if $F70667 ( parentDir ) $F21338 ( log ) } if ( file . createNewFile ( ) ) $F981 ( log ) } writeFile ( defaultOperationsFilename ( ) ) ; } $F70676 ( log , e ) }
$F156045 ( msg , x , super , this )
private boolean hasNewFollowers ( List < Follower > followers ) { return $F1030 ( followers ) && followers . get ( NUM00 ) . newFollower ; }
private void onTrackPointElementStart ( Attributes attributes ) throws SAXException { $F62203 ( latitude , attributes , ATT_LAT ) $F62203 ( longitude , attributes , ATT_LON ) if ( latitude == null || longitude == null ) { throw new SAXException ( createErrorMessage ( NUM00 ) ) ; } try { latitudeValue = Double . parseDouble ( latitude ) ; longitudeValue = Double . parseDouble ( longitude ) ; } catch ( NumberFormatException e ) { throw new SAXException ( createErrorMessage ( NUM00 + latitude + NUM00 + longitude ) , e ) ; } }
protected final void firePropertyChange ( PropertyChangeEvent evt ) { pcs . firePropertyChange ( evt ) ; }
$F61920 ( desc , start , canBeVoid , index , checkDesc , _BOOL , checkInternalName )
public static void sortFields ( FieldBinding [ ] sortedFields , int left , int right ) { Arrays . sort ( sortedFields , left , right , FIELD_COMPARATOR ) ; }
private void drawBackground ( final Graphics g ) { g . setColor ( m_bgColorOffset ) ; g . fillRect ( - m_firstColumn * m_charWidth , NUM00 , m_offsetViewWidth , getHeight ( ) ) ; }
public void addUniqueAttribute $F2236 ( elementName , attrName ) { if $F57241 ( elementName , attrName ) $F1717 ( _uniqueElementAttrMap , elementName , attrName ) }
private static DeleteVmResponse checkDeleteVmResponse ( DeleteVmResponse deleteVmResponse ) throws RpcException { $F10635 ( logger , deleteVmResponse ) switch $F52729 ( deleteVmResponse ) { case OK : $F597 $F52738 ( SYSTEM_ERROR , deleteVmResponse ) case VM_NOT_FOUND : throw new VmNotFoundException $F52730 ( deleteVmResponse ) ; case VM_NOT_POWERED_OFF : throw new VmNotPoweredOffException $F52730 ( deleteVmResponse ) ; $F52745 ( String , deleteVmResponse ) } return deleteVmResponse ; }
public void runTest $F72 throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; $F236 ( doc , load , _BOOL ) $F237 ( elementList , doc ) $F238 ( nameNode , elementList ) $F241 ( child , nameNode ) { boolean success = _BOOL ; try { $F4054 ( child ) } $F250 ( success , ex , DOMException ) assertTrue ( NUM00 , success ) ; } }
public void limitTransAndScale ( Matrix matrix , RectF content ) { $F12457 ( vals ) matrix . getValues ( vals ) ; $F5797 ( curTransX , vals , Matrix ) float curScaleX = vals [ Matrix . MSCALE_X ] ; float curTransY = vals [ Matrix . MTRANS_Y ] ; float curScaleY = vals [ Matrix . MSCALE_Y ] ; mScaleX = Math . max ( mMinScaleX , curScaleX ) ; mScaleY = Math . max ( mMinScaleY , curScaleY ) ; float width = NUM00 ; float height = NUM00 ; if ( content != null ) { $F54171 ( width , content ) $F54171 ( height , content ) } float maxTransX = - width * ( mScaleX - NUM00 ) ; float newTransX = Math . min ( Math . max ( curTransX , maxTransX - mTransOffsetX ) , mTransOffsetX ) ; float maxTransY = height * ( mScaleY - NUM00 ) ; float newTransY = Math . max ( Math . min ( curTransY , maxTransY + mTransOffsetY ) , - mTransOffsetY ) ; vals [ Matrix . MTRANS_X ] = newTransX ; vals [ Matrix . MSCALE_X ] = mScaleX ; vals [ Matrix . MTRANS_Y ] = newTransY ; vals [ Matrix . MSCALE_Y ] = mScaleY ; matrix . setValues ( vals ) ; }
public BlazeValueFactory valueFactory $F72 { return vf ; }
public StatefulRefreshToken ( JsonValue token ) throws InvalidGrantException { super ( token ) ; if ( $F87355 ( OAUTH_REFRESH_TOKEN , getTokenName ) ) { throw new InvalidGrantException ( NUM00 + getTokenId ( ) ) ; } }
public void putStyle ( String styleId , StyleSelector styleSelector ) { try { $F27213 ( id , Integer , styleId ) $F19410 ( mMaxStyleId , Math , id ) } $F32668 mStyles . put ( styleId , styleSelector ) ; }
private static String extractClientName ( String clientId , String host ) { String hostExcludedId = NUM00 ; if ( $F41536 ( isIPv6 , host , isIPv4 ) && clientId . startsWith ( host ) ) { $F94062 ( hostExcludedId , clientId , host ) } else { $F1384 ( firstDotIndex , host ) if ( firstDotIndex != - NUM00 ) { $F11991 ( hostShortName , host , firstDotIndex ) $F94062 ( hostExcludedId , clientId , hostShortName ) } } String vmPIDAndKindRegex = NUM00 ; String regex = NUM00 ; String name = NOT_AVAILABLE ; String temp = hostExcludedId ; $F1384 ( openIndex , temp ) if ( openIndex != - NUM00 ) { regex = vmPIDAndKindRegex + regex ; } if $F44202 ( temp , regex ) { $F6542 ( splitted , temp ) $F79270 ( name , splitted ) ; } return name ; }
public static $F4203 FastFuture $F4203 fromCompletableFuture ( final $F124768 cf ) { final FastFuture $F4203 f = new FastFuture $F200 $F72 ; cf . thenAccept ( null ) ; cf . exceptionally ( null ) ; return f ; }
public static boolean isPlaceAction ( InventoryAction action ) { switch ( action ) { case SWAP_WITH_CURSOR : case PLACE_ONE : case PLACE_ALL : case PLACE_SOME : return _BOOL ; } return _BOOL ; }
private void refreshMarkers $F72 { removeAll ( ) ; $F28017 ( markerMap ) List notices = textArea . getParserNotices ( ) ; for ( $F2774 ( i , notices ) ) { ParserNotice notice = ( ParserNotice ) i . next ( ) ; if ( notice . getLevel ( ) <= levelThreshold || ( notice instanceof TaskNotice ) ) { Integer key = new Integer ( notice . getLine ( ) ) ; Marker m = ( Marker ) markerMap . get ( key ) ; if ( m == null ) { m = new Marker ( notice ) ; m . addMouseListener ( listener ) ; markerMap . put ( key , m ) ; add ( m ) ; } else { m . addNotice ( notice ) ; } } } if ( getShowMarkedOccurrences ( ) && textArea . getMarkOccurrences ( ) ) { List occurrences = textArea . getMarkedOccurrences ( ) ; for ( $F2774 ( i , occurrences ) ) { DocumentRange range = ( DocumentRange ) i . next ( ) ; int line = NUM00 ; try { line = textArea . getLineOfOffset ( range . getStartOffset ( ) ) ; } catch ( BadLocationException ble ) $F1448 ParserNotice notice = new MarkedOccurrenceNotice ( range ) ; $F16747 ( key , line ) Marker m = ( Marker ) markerMap . get ( key ) ; if ( m == null ) { m = new Marker ( notice ) ; m . addMouseListener ( listener ) ; markerMap . put ( key , m ) ; add ( m ) ; } else { if ( ! m . containsMarkedOccurence ( ) ) { m . addNotice ( notice ) ; } } } } revalidate ( ) ; repaint ( ) ; }
$F183298 ( view , cache )
public static $F96 readInputStream ( InputStream i ) throws IOException $F42436 ( b , copy , i )
public void playMedia ( boolean showPlayerWindow ) { String filename = stopAndPrepareFilename ( ) ; if $F4012 ( filename ) { MPlayerMediator mplayerMediator = MPlayerMediator . instance ( ) ; if ( mplayerMediator != null ) $F25910 ( mplayerMediator , showPlayerWindow ) mplayer . open ( filename , getAdjustedVolume ( ) ) ; } notifyState ( getState ( ) ) ; }
public static String toUTF8String ( String s ) { return new String ( s . getBytes ( ) , Charset . forName ( PanboxConstants . STANDARD_CHARSET ) ) ; }
public static int encodeCacheFlags ( Collection < GridClientCacheFlag > flagSet ) { int bits = NUM00 ; if ( flagSet . contains ( GridClientCacheFlag . SKIP_STORE ) ) bits |= NUM00 ; return bits ; }
public void add ( DataSource source , boolean visible ) { add ( data . size ( ) , source , visible ) ; }
$F1 public void addValue ( double value , double weight ) { m_WeightedSum += value * weight ; m_WeightedSumSquared += value * value * weight ; m_SumOfWeights += weight ; if $F4257 ( m_TM , value ) $F1717 ( m_TM , value , weight ) else { m_TM . put ( value , m_TM . get ( value ) + weight ) ; } }
private JPanel buildRow ( final String string , final JCheckBox checkBox ) { $F40881 ( panel ) panel . add ( new JLabel ( string ) , BorderLayout . WEST ) ; $F40903 ( panel , checkBox , BorderLayout ) checkBox . addItemListener ( m_checkBoxListener ) ; return panel ; }
private static synchronized String formatAndParse ( SimpleDateFormat formatDate , SimpleDateFormat parseDate , String text ) { try { $F126579 ( date , parseDate , text ) $F94422 ( result , formatDate , date ) return result ; } catch ( ParseException e ) $F37856 ( logger , text ) $F1278 }
public static boolean isChildGroup ( String group ) { $F36741 ( group , GROUP_DELIMITER ) }
private void throwArrayIndexOutOfBoundsException ( int itemIndex ) { throw new ArrayIndexOutOfBoundsException ( NUM00 + NUM00 + spaceItems . size ( ) + NUM00 + itemIndex ) ; }
private LocusInfo createNextUncoveredLocusInfo ( final Locus stopBeforeLocus ) { while ( lastReferenceSequence <= stopBeforeLocus . getSequenceIndex ( ) && lastReferenceSequence <= referenceSequenceMask . getMaxSequenceIndex ( ) ) { if ( lastReferenceSequence == stopBeforeLocus . getSequenceIndex ( ) && lastPosition + NUM00 >= stopBeforeLocus . getPosition ( ) ) $F1337 final int nextbit = referenceSequenceMask . nextPosition ( lastReferenceSequence , lastPosition ) ; if ( nextbit == - NUM00 ) { if ( lastReferenceSequence == stopBeforeLocus . getSequenceIndex ( ) ) { lastPosition = stopBeforeLocus . getPosition ( ) ; $F1274 } lastReferenceSequence ++ ; lastPosition = NUM00 ; } else if ( lastReferenceSequence < stopBeforeLocus . getSequenceIndex ( ) || nextbit < stopBeforeLocus . getPosition ( ) ) { lastPosition = nextbit ; return new LocusInfo ( getReferenceSequence ( lastReferenceSequence ) , lastPosition ) ; } else if ( nextbit >= stopBeforeLocus . getPosition ( ) ) $F1337 } $F1274 }
public void globalConfigChanged ( String serviceName , String version , String groupName , String serviceComponent , int changeType ) $F845
public static void launchEmailIntent ( final Activity activity , String addr , String text ) { Log . i ( LOG_TAG , NUM00 + activity . getLocalClassName ( ) ) ; Intent emailIntent = new Intent ( Intent . ACTION_SEND ) ; emailIntent . putExtra ( Intent . EXTRA_EMAIL , $F8640 ( addr ) ) ; $F146148 ( emailIntent ) $F45547 ( emailpackageManager , activity ) $F45549 emailresolveInfos = emailpackageManager . queryIntentActivities ( emailIntent , NUM00 ) ; if $F3817 ( emailresolveInfos ) { activity . startActivity ( emailIntent ) ; } }
public int count $F72 { return n ; }
public void add ( int position , T item ) $F94473 ( mData , position , item , notifyItemInserted )
public void addTranslator ( ClassPool cp , Translator t ) throws NotFoundException , CannotCompileException { source = cp ; translator = t ; t . start ( cp ) ; }
private void onMainContentScrolled ( int currentY , int deltaY ) { if ( deltaY > mActionBarAutoHideSensivity ) { deltaY = mActionBarAutoHideSensivity ; } else if ( deltaY < - mActionBarAutoHideSensivity ) { deltaY = - mActionBarAutoHideSensivity ; } if ( Math . signum ( deltaY ) * Math . signum ( mActionBarAutoHideSignal ) < NUM00 ) { mActionBarAutoHideSignal = deltaY ; } else { mActionBarAutoHideSignal += deltaY ; } boolean shouldShow = currentY < mActionBarAutoHideMinY || ( mActionBarAutoHideSignal <= - mActionBarAutoHideSensivity ) ; autoShowOrHideActionBar ( shouldShow ) ; }
public void writeLEChars ( String s ) throws IOException { $F115 ( length , s ) for ( $F119 ( i , length ) ) { $F8205 ( c , s , i ) $F88315 ( out , c ) $F88317 ( out , c ) } written += length * NUM00 ; }
public static String readLine $F72 { String line ; try { line = scanner . nextLine ( ) ; } catch ( NoSuchElementException e ) { line = null ; } return line ; }
$F1309 public boolean isValid ( String regex ) { $F1933 ( regex , _BOOL ) $F55449 ( pattern , Pattern , regex ) Matcher matcher = pattern . matcher ( getText ( ) ) ; $F36689 ( matcher ) }
public void writeToFile ( String filename ) { GridUtils . writeSpatialGridTable ( this , filename ) ; }
public void addFooterView $F123554 ( v , data , isSelectable ) { $F123559 ( info ) info . view = v ; info . data = data ; info . isSelectable = isSelectable ; mFooterViewInfos . add ( info ) ; if ( mAdapter != null && mDataSetObserver != null ) { mDataSetObserver . onChanged ( ) ; } }
public void addCloseHook ( CloseHook hook ) $F23232 ( closeHooks , hook )
public void rejectedExecution ( Runnable r , ThreadPoolExecutor e ) { if $F210917 ( e ) $F21688 ( r ) }
private void updateRange ( double x , double y ) { $F16700 ( mMinX , Math , x ) $F19410 ( mMaxX , Math , x ) $F16700 ( mMinY , Math , y ) $F19410 ( mMaxY , Math , y ) }
$F146919 ( s , length , _BOOL , sum , i , digit , FormatException )
public void readConfig ( String filename ) throws FileNotFoundException { if $F3581 ( filename ) $F665 readConfig ( new FileReader ( filename ) ) ; }
private void applyTradingBonus ( Player player ) { player . incrementTradescore ( ) ; }
public static String slurpURLNoExceptions ( URL u ) { try $F4915 ( slurpURL , u ) $F84580 ( e ) }
private static void createCombinedTrace ( final TraceList newTrace , final List < TraceList > traces , $F99304 ( addresses ) ) { final $F99303 visitedAddresses = new LinkedHashSet < BreakpointAddress > $F72 ; for ( final TraceList trace : traces ) { for ( final ITraceEvent event : trace ) { final BreakpointAddress address = event . getOffset ( ) ; $F36398 ( addresses , address ) $F36399 ( visitedAddresses , address ) visitedAddresses . add ( address ) ; newTrace . addEvent ( event ) ; } } }
public void interruptAll $F72 { synchronized ( knownActorTasks ) { for ( $F8318 ft : knownActorTasks ) $F11437 ( ft , _BOOL ) threadGuard . interruptAll ( ) ; } }
$F1431 public void registerDefaultDeviceTypes $F72 { final $F12078 devicesList = DefaultPlatform . getDeviceServiceMap ( ) ; for ( HashMap . Entry $F2538 entry : devicesList . entrySet ( ) ) { $F3477 ( key , entry ) $F840 ( value , entry ) try { registerDeviceService ( ( Class < DeviceService > ) Class . forName ( key ) , ( Class < DiscoveryProvider > ) Class . forName ( value ) ) ; } catch ( ClassNotFoundException e ) $F302 ( e ) } }
private static void removeDependencySubsets ( String swcLocation , $F24190 ( dependencyMap ) , SwcDependencyInfoImpl depInfo ) { $F2695 ( removeSet ) SwcExternalScriptInfo externalInfo = depInfo . getSwcExternalScriptInfo ( swcLocation ) ; $F10651 $F122365 ( externalsBySwc ) ; for ( String swcDependLocation : dependencyMap . get ( swcLocation ) ) { for ( String swcDependLocation2 : dependencyMap . get ( swcLocation ) ) { if $F1238 ( swcDependLocation , swcDependLocation2 ) $F598 $F48768 ( externalScripts , externalsBySwc , swcDependLocation ) $F48768 ( externalScripts2 , externalsBySwc , swcDependLocation2 ) if ( externalScripts == null ) { externalScripts = externalInfo . getExternalScripts ( swcDependLocation ) ; externalsBySwc . put ( swcDependLocation , externalScripts ) ; } if ( externalScripts2 == null ) { externalScripts2 = externalInfo . getExternalScripts ( swcDependLocation2 ) ; externalsBySwc . put ( swcDependLocation2 , externalScripts2 ) ; } if ( externalScripts2 . size ( ) > externalScripts . size ( ) && externalScripts2 . containsAll ( externalScripts ) ) $F97801 ( removeSet , swcDependLocation ) } } $F48768 ( dependencySet , dependencyMap , swcLocation ) dependencySet . removeAll ( removeSet ) ; }
private void drawTicks ( Canvas canvas , double min , double max , double minAngle , double maxAngle , int centerX , int centerY , double longRadius , double shortRadius , double ticks , Paint paint , boolean labels ) { for ( double i = min ; i <= max ; i += ticks ) { double angle = getAngleForValue ( i , minAngle , maxAngle , min , max ) ; $F33859 ( sinValue , Math , angle ) $F54226 ( cosValue , Math , angle ) $F175108 ( x1 , Math , centerX , shortRadius , sinValue ) $F175108 ( y1 , Math , centerY , shortRadius , cosValue ) $F175108 ( x2 , Math , centerX , longRadius , sinValue ) $F175108 ( y2 , Math , centerY , longRadius , cosValue ) canvas . drawLine ( x1 , y1 , x2 , y2 , paint ) ; if ( labels ) { $F175116 ( paint , Align ) if ( x1 <= x2 ) { paint . setTextAlign ( Align . RIGHT ) ; } String text = i + NUM00 ; if ( Math . round ( i ) == ( long ) i ) { text = ( long ) i + NUM00 ; } canvas . drawText ( text , x1 , y1 , paint ) ; } } }
$F30789 ( d , imageView , getImageView , viewWidth , viewHeight , drawableWidth , drawableHeight , mBaseMatrix , widthScale , heightScale , mScaleType , ScaleType , scale , Math , mTempSrc , mTempDst , FIT_CENTER , ScaleToFit , FIT_START , FIT_END , FIT_XY , resetMatrix )
public static < T , K , L extends $F5675 > BiFunction < Partition < T , K , L > , T , Boolean > alwaysInsert $F72 $F1337
public void testFindSpringOpenLdap $F72 { LdapProxy proxy = getLdapOpenLdap ( ) ; List result = null ; try { result = proxy . find ( getLdapSearchVO ( NUM00 , LdapConstants . NO_SEARCH_LIMIT , null , null , null , LdapScopeConstants . SCOPE_SUBTREE ) ) ; } $F3957 assertNotNull ( result ) ; $F70108 ( assertEquals , result ) }
public void testConstructorStringRadix8 $F72 { String value = NUM00 ; int radix = NUM00 ; byte $F3018 = { NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 } ; $F3023 ( aNumber , value , radix ) $F3030 ( rBytes ) $F3031 ( resBytes , aNumber ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , aNumber ) }
private static boolean inEncoding ( char ch , String encoding ) { boolean isInEncoding ; try { char cArray [ ] = $F11574 ; cArray [ NUM00 ] = ch ; $F605 ( s , cArray ) $F45669 ( bArray , s , encoding ) isInEncoding = inEncoding ( ch , bArray ) ; } catch ( Exception e ) { isInEncoding = _BOOL ; if ( encoding == null ) isInEncoding = _BOOL ; } return isInEncoding ; }
public void delete ( SSOToken token , String dn ) throws $F16995 { for ( String entry : subEntries ( token , dn , NUM00 , NUM00 , _BOOL , _BOOL ) ) { debug . message ( NUM00 , entry ) ; delete ( token , getNamingAttribute ( ) + NUM00 + entry + NUM00 + dn ) ; } for ( String subOrg : searchSubOrgNames ( token , dn , NUM00 , NUM00 , _BOOL , _BOOL , _BOOL ) ) { debug . message ( NUM00 , subOrg ) ; delete ( token , subOrg ) ; } delete ( token . getPrincipal ( ) , dn ) ; objectChanged ( dn , DELETE ) ; }
private void removeHighlights $F72 { if ( textArea != null ) { RSyntaxTextAreaHighlighter h = ( RSyntaxTextAreaHighlighter ) textArea . getHighlighter ( ) ; for ( $F2277 ( i , tags ) ) { h . removeMarkOccurrencesHighlight ( tags . get ( i ) ) ; } } $F725 ( tags ) }
private static < T extends AbstractBlockBase $F4203 > void enqueueSuccessors ( T block , PriorityQueue $F4203 worklist , BitSet visitedBlocks ) { for ( T successor : block . getSuccessors ( ) ) { if ( ! $F82336 ( visitedBlocks , successor ) ) { visitedBlocks . set ( successor . getId ( ) ) ; worklist . add ( successor ) ; } } }
protected void addCommonComponent ( XMLComponent component ) $F42353 ( fCommonComponents , component , addRecognizedParamsAndSetDefaults )
public void addRole ( String role ) $F17651 ( role , roles )
public CModulesCheckBoxPanel ( final CModulesTableModel modulesTableModel ) { $F9898 ( super ) final JCheckBox checkBox = new JCheckBox $F580 ; checkBox . addItemListener ( new InternalCheckboxListener $F72 ) ; add ( checkBox ) ; m_modulesTableModel = modulesTableModel ; }
public QDate $F72 { this ( _gmtTimeZone ) ; }
protected void responseSent ( StreamResponseMessage responseMessage ) { if ( syncProtocol != null ) syncProtocol . responseSent ( responseMessage ) ; }
public final void append ( FastStringBuffer value ) { $F8249 ( value ) $F1749 ( strlen , value ) $F163790 ( strlen ) int copyfrom = NUM00 ; $F16051 ( chunk , m_array , m_lastChunk ) int available = m_chunkSize - m_firstFree ; while ( strlen > NUM00 ) { $F46170 ( available , strlen ) int sourcechunk = ( copyfrom + value . m_chunkSize - NUM00 ) > > > value . m_chunkBits ; int sourcecolumn = copyfrom & value . m_chunkMask ; int runlength = value . m_chunkSize - sourcecolumn ; $F46170 ( runlength , available ) System . arraycopy ( value . m_array [ sourcechunk ] , sourcecolumn , m_array [ m_lastChunk ] , m_firstFree , runlength ) ; if ( runlength != available ) System . arraycopy ( value . m_array [ sourcechunk + NUM00 ] , NUM00 , m_array [ m_lastChunk ] , m_firstFree + runlength , available - runlength ) ; strlen -= available ; copyfrom += available ; $F163794 ( strlen , i , m_array , m_lastChunk , newarray , System , chunk , m_rebundleBits , m_chunkBits , m_maxChunkBits , m_innerFSB , this , m_chunkSize , available , m_firstFree ) } m_firstFree += available ; }
protected Tuple < BlobStoreIndexShardSnapshots , Integer > buildBlobStoreIndexShardSnapshots ( Map < String , BlobMetaData > blobs ) { int latest = - NUM00 ; for ( $F3465 ( name , blobs ) ) { if $F7311 ( name , SNAPSHOT_INDEX_PREFIX ) { try { int gen = Integer . parseInt ( $F8182 ( name , SNAPSHOT_INDEX_PREFIX ) ) ; $F12283 ( gen , latest ) } catch ( NumberFormatException ex ) $F23016 ( logger , name ) } } if ( latest >= NUM00 ) { try { return new Tuple $F200 ( indexShardSnapshotsFormat . read ( blobContainer , Integer . toString ( latest ) ) , latest ) ; } catch ( IOException e ) { logger . warn ( NUM00 , e , SNAPSHOT_INDEX_PREFIX + latest ) ; } } List < SnapshotFiles > $F204 ( snapshots ) ; for ( $F3465 ( name , blobs ) ) { try { BlobStoreIndexShardSnapshot snapshot = null ; if $F7311 ( name , SNAPSHOT_PREFIX ) { snapshot = indexShardSnapshotFormat . readBlob ( blobContainer , name ) ; } else if $F7311 ( name , LEGACY_SNAPSHOT_PREFIX ) { snapshot = indexShardSnapshotLegacyFormat . readBlob ( blobContainer , name ) ; } if ( snapshot != null ) { snapshots . add ( new SnapshotFiles ( snapshot . snapshot ( ) , snapshot . indexFiles ( ) ) ) ; } } catch ( IOException e ) $F66732 ( logger , e , name ) } return new Tuple $F200 ( new BlobStoreIndexShardSnapshots ( snapshots ) , - NUM00 ) ; }
protected MapleQuestRequirement ( MapleQuest quest , ReadBin data ) throws IOException { this . quest = quest ; this . dayByDay = data . readByte ( ) > NUM00 ; this . normalAutoStart = data . readByte ( ) > NUM00 ; this . lvmin = data . readShort ( ) ; this . lvmax = data . readShort ( ) ; this . mbmin = data . readShort ( ) ; this . charismaMin = data . readShort ( ) ; this . charmMin = data . readShort ( ) ; this . craftMin = data . readShort ( ) ; this . insightMin = data . readShort ( ) ; this . senseMin = data . readShort ( ) ; this . willMin = data . readShort ( ) ; this . pop = data . readShort ( ) ; this . pettamenessmin = data . readShort ( ) ; this . subJobFlag = data . readShort ( ) ; this . npc = data . readInt ( ) ; this . interval = data . readInt ( ) ; this . end = data . readString ( ) ; this . startscript = data . readString ( ) ; this . endscript = data . readString ( ) ; $F6632 ( size , data ) for ( $F119 ( i , size ) ) { $F5952 ( field , data ) fieldEnter . add ( field ) ; } $F11214 ( size , data ) for ( $F119 ( i , size ) ) { $F6632 ( job , data ) jobs . add ( job ) ; } $F11214 ( size , data ) for ( $F119 ( i , size ) ) { $F5952 ( id , data ) boolean acquire = data . readByte ( ) > NUM00 ; skills . put ( id , acquire ) ; } $F11214 ( size , data ) for ( $F119 ( i , size ) ) { $F5952 ( id , data ) $F1544 ( state , data ) $F1544 ( order , data ) quests . put ( id , state ) ; } $F11214 ( size , data ) for ( $F119 ( i , size ) ) { $F5952 ( id , data ) $F5952 ( count , data ) $F1544 ( order , data ) items . put ( id , count ) ; } $F11214 ( size , data ) for ( $F119 ( i , size ) ) { $F5952 ( id , data ) $F5952 ( count , data ) mobs . put ( id , count ) ; } $F11214 ( size , data ) for ( $F119 ( i , size ) ) { $F5952 ( id , data ) pets . add ( id ) ; } }
public ForumPostConfig createReply ( ForumPostConfig config ) { config . addCredentials ( this ) ; $F77623 ( xml , POST , this , config ) Element root = parse ( xml ) ; $F1338 ( root ) try { ForumPostConfig $F98634 ( reply ) ; reply . parseXML ( root ) ; return reply ; } $F77633 ( this , SDKException , exception ) }
public boolean isArmed $F72 { return other . isArmed ( ) ; }
public static AttribKey forHtmlAttrib ( ElKey el , String localName ) { return new AttribKey ( el , HTML_NS , localName ) ; }
SparseArray ( Class $F105651 linearArrayType , $F2027 rowIndices , $F2027 colIndices , L realValues , L imagValues , int numRows , int numCols ) { validateUserSuppliedParameters ( linearArrayType , rowIndices , colIndices , realValues , imagValues ) ; $F83161 ( _baseComponentType , linearArrayType ) _outputArrayType = ( Class < L [ ] > ) ArrayUtils . getArrayClass ( _baseComponentType , NUM00 ) ; Map < SparseKey , SparseValue > sparseMap = createSparseMap ( linearArrayType , rowIndices , colIndices , realValues , imagValues , numRows , numCols ) ; _numRows = numRows ; _numCols = numCols ; ArrayList < SparseKey > keys = new ArrayList < SparseKey > $F57797 ( sparseMap ) ; Collections . sort ( keys ) ; $F103411 ( _rowIndices , keys ) $F103411 ( _colIndices , keys ) $F103411 ( _linearIndices , keys ) _realValues = linearArrayType . cast ( Array . newInstance ( _baseComponentType , keys . size ( ) ) ) ; _imagValues = imagValues == null ? null : linearArrayType . cast ( Array . newInstance ( _baseComponentType , keys . size ( ) ) ) ; for ( $F2277 ( i , keys ) ) { SparseKey key = keys . get ( i ) ; _rowIndices [ i ] = key . row ; _colIndices [ i ] = key . col ; _linearIndices [ i ] = key . linearIndex ; SparseValue value = sparseMap . get ( key ) ; setSparseValue ( value , _realValues , _imagValues , i ) ; } }
public static Tuple max ( TupleSet tuples , String field , Comparator cmp ) { if ( tuples instanceof Table ) { Table table = ( Table ) tuples ; ColumnMetadata md = table . getMetadata ( field ) ; return table . getTuple ( md . getMaximumRow ( ) ) ; } else { return max ( tuples . tuples ( ) , field , cmp ) ; } }
protected void updateRadioLinks $F72 { m_CVBut . setEnabled ( _BOOL ) ; $F84694 ( m_CVText , m_CVBut ) $F84694 ( m_CVLab , m_CVBut ) $F84694 ( m_SeedText , m_CVBut ) $F84694 ( m_SeedLab , m_CVBut ) if ( m_AttributeEvaluatorEditor . getValue ( ) instanceof AttributeTransformer ) { m_CVBut . setSelected ( _BOOL ) ; m_CVBut . setEnabled ( _BOOL ) ; m_CVText . setEnabled ( _BOOL ) ; m_CVLab . setEnabled ( _BOOL ) ; m_SeedText . setEnabled ( _BOOL ) ; m_SeedLab . setEnabled ( _BOOL ) ; m_TrainBut . setSelected ( _BOOL ) ; } }
private String idString ( int id1 , int id2 ) { return NUM00 + Integer . toHexString ( id2 & NUM00 ) + NUM00 + Integer . toHexString ( id1 & NUM00 ) + NUM00 + ( ( id2 & NUM00 ) * NUM00 + ( id1 & NUM00 ) ) + NUM00 ; }
public EtagCache resetStats $F72 { $F3223 ( hits ) $F3223 ( misses ) return this ; }
public void testOtherToStringDefault $F72 { NumberConverter converter = makeConverter ( ) ; assertEquals ( NUM00 , NUM00 , converter . convert ( $F10062 , new StringBuffer $F580 ) ) ; }
private void removeItemAtInt ( int index , boolean updateChildrenOnMenuViews ) { if ( ( index < NUM00 ) || $F6389 ( index , mItems ) ) $F665 mItems . remove ( index ) ; if ( updateChildrenOnMenuViews ) onItemsChanged ( _BOOL ) ; }
public void testShiftRight3 $F72 { $F17888 int aSign = NUM00 ; int number = NUM00 ; byte $F3018 = { NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F86501 ( result , aNumber , number ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
private void showFilterDialog ( Filter filter ) { int sortOrder = mAdapter . getCount ( ) - NUM00 ; if ( filter == null ) { EditFilterActivity . createNewFilter ( getActivity ( ) , sortOrder ) ; } else { EditFilterActivity . editFilter ( getActivity ( ) , filter , sortOrder ) ; } }
public static int numPixelsBetween $F2026 ( x1 , y1 , x2 , y2 ) { return ( int ) Math . sqrt ( Math . pow ( $F250385 ( x1 , x2 ) , NUM00 ) + Math . pow ( $F250385 ( y1 , y2 ) , NUM00 ) ) ; }
private KeyStore createKeys ( KeyStore keyStore , String keyAlgorithm , String publicAlias , String privateAlias , PrivateKeyEntry signer ) throws Exception { PrivateKey caKey ; X509Certificate caCert ; $F5958 caCertChain ; if ( signer == null ) { caKey = null ; caCert = null ; caCertChain = null ; } else { caKey = signer . getPrivateKey ( ) ; caCert = ( X509Certificate ) signer . getCertificate ( ) ; caCertChain = ( $F5958 ) signer . getCertificateChain ( ) ; } PrivateKey privateKey ; X509Certificate x509c ; if ( publicAlias == null && privateAlias == null ) $F39233 ( privateKey , x509c ) else { int keySize ; if $F3057 ( keyAlgorithm ) { keySize = NUM00 ; } else if $F3057 ( keyAlgorithm ) { keySize = NUM00 ; } else if $F3057 ( keyAlgorithm ) { keySize = NUM00 ; } else if $F3057 ( keyAlgorithm ) { keySize = NUM00 ; keyAlgorithm = NUM00 ; } else $F18931 ( keyAlgorithm ) $F156 ( kpg , KeyPairGenerator , keyAlgorithm ) kpg . initialize ( keySize , $F5607 ) ; $F284653 ( kp , kpg ) privateKey = kp . getPrivate ( ) ; PublicKey publicKey = kp . getPublic ( ) ; X500Principal issuer = ( ( caCert != null ) ? caCert . getSubjectX500Principal ( ) : subject ) ; PrivateKey signingKey = ( caKey == null ) ? privateKey : caKey ; x509c = createCertificate ( publicKey , signingKey , subject , issuer , keyUsage , ca , extendedKeyUsages , criticalExtendedKeyUsages , subjectAltNames , permittedNameConstraints , excludedNameConstraints ) ; } $F5958 x509cc ; if ( privateAlias == null ) { x509cc = null ; } else if ( caCertChain == null ) { x509cc = new X509Certificate [ ] { x509c } ; } else { x509cc = new X509Certificate $F22598 ( caCertChain ) ; x509cc [ NUM00 ] = x509c ; $F7057 ( System , caCertChain , x509cc ) } if ( privateAlias != null ) { keyStore . setKeyEntry ( privateAlias , privateKey , keyPassword , x509cc ) ; } if ( publicAlias != null ) { keyStore . setCertificateEntry ( publicAlias , x509c ) ; } return keyStore ; }
static boolean allowsPopup ( FormObject formObject ) { switch ( formObject . getParameterConstant ( PdfDictionary . Subtype ) ) { case PdfDictionary . Text : case PdfDictionary . Square : case PdfDictionary . Highlight : case PdfDictionary . Underline : case PdfDictionary . StrickOut : case PdfDictionary . Stamp : return _BOOL ; $F1267 return _BOOL ; } }
public static LocalGitRepo fromCurrentDir ( String remoteUrl ) throws ValidationException { Git git ; $F8809 ( gitDir ) try { git = Git . open ( gitDir ) ; } catch ( RepositoryNotFoundException rnfe ) { String fullPathOfCurrentDir = pathOf ( gitDir ) ; File gitRoot = $F1250 ( getGitRootIfItExistsInOneOfTheParentDirectories , fullPathOfCurrentDir ) ; String summary ; $F10144 ( messages ) if ( gitRoot == null ) { summary = NUM00 ; messages . add ( summary ) ; $F31982 ( messages , fullPathOfCurrentDir ) } else { summary = NUM00 ; messages . add ( summary ) ; $F31982 ( messages , fullPathOfCurrentDir ) messages . add ( NUM00 + pathOf ( gitRoot ) ) ; } throw new ValidationException ( summary , messages ) ; } catch ( Exception e ) { throw new ValidationException ( NUM00 + pathOf ( gitDir ) + NUM00 , Arrays . asList ( $F22435 ( e ) ) ) ; } return new LocalGitRepo ( git , remoteUrl ) ; }
public static Vector2 min ( Vector2 o1 , Vector2 o2 ) { return new Vector2 ( $F150934 ( Math , o1 , o2 ) , Math . min ( o1 . z , o2 . z ) ) ; }
public void addTestCall ( GenericAccessibleObject $F1011 call ) throws IllegalArgumentException { Inputs . checkNull ( call ) ; testMethods . add ( call ) ; }
public void serialize ( KXmlSerializer serializer ) throws IOException { mDeviceInfo . serialize ( serializer ) ; serializeHostInfo ( serializer ) ; serializeTestSummary ( serializer ) ; monkeyTag . serialize ( serializer ) ; List < TestPackageResult > pkgs = new ArrayList < TestPackageResult > $F6680 ( mPackageMap ) ; Collections . sort ( pkgs , new PkgComparator $F72 ) ; for ( TestPackageResult r : pkgs ) { r . serialize ( serializer ) ; } }
private void verifyBlockMirrorMigration $F72 throws Exception { $F973 ( log ) Iterator < BlockMirror > blockMirrorItr = _dbClient . queryIterativeObjects ( $F30624 , blockMirrorURIs ) ; List $F30635 blockObjects = new ArrayList $F30635 $F72 ; $F3536 ( blockMirrorItr , blockObjects ) verifyBlockObjects ( blockObjects ) ; }
public LogFormatter ( Logger log ) { if ( log == null ) log = Logger . getLogger ( Logger . GLOBAL_LOGGER_NAME ) ; Level lvl = null ; while ( log != null ) { lvl = log . getLevel ( ) ; if ( lvl != null ) $F597 $F10337 ( log ) } ; if ( lvl == null ) lvl = Level . WARNING ; this . level = lvl ; }
public synchronized void removeTextListener ( TextListener cl ) $F106 ( m_textListeners , cl )
$F120210 ( maximumPullScroll , getMaximumPullScroll , pLeft , getPaddingLeft , pTop , getPaddingTop , pRight , getPaddingRight , pBottom , getPaddingBottom , getPullToRefreshScrollDirection , HORIZONTAL , mMode , mHeaderLayout , mFooterLayout , VERTICAL , DEBUG , Log , LOG_TAG , String , setPadding )
private Element createIDPEntityDescriptor ( boolean exportPrivateData ) throws Exception { Element entEle = doc . createElementNS ( null , SAMLNames . ENTDESCRIPTOR ) ; String id = idmClient . getEntityID ( tenantName ) ; String alias = idmClient . getLocalIDPAlias ( tenantName ) ; $F13265 ( id , tenantName ) entEle . setAttribute ( SAMLNames . ENTID , id ) ; Element idpSSO = createIDPSSODescriptor ( exportPrivateData ) ; entEle . appendChild ( idpSSO ) ; if ( exportPrivateData ) { if $F4251 ( alias ) { alias = id ; } Element orgEle = createOrganization ( tenantName , tenantName , alias , SAMLNames . ENGLISH ) ; entEle . appendChild ( orgEle ) ; } return entEle ; }
public void clear $F72 { $F725 ( infoQueue ) while $F5973 ( dataQueue ) { allocator . release ( dataQueue . remove ( ) ) ; } totalBytesDropped = NUM00 ; totalBytesWritten = NUM00 ; lastAllocation = null ; lastAllocationOffset = allocationLength ; }
public void applyCamera ( GL2 gl ) { gl . glMatrixMode ( GL2 . GL_PROJECTION ) ; gl . glLoadIdentity ( ) ; glu . gluPerspective ( NUM00 , width / ( float ) height , NUM00 , NUM00 ) ; eye [ NUM00 ] = $F148723 ( Math , theta ) * NUM00 ; eye [ NUM00 ] = NUM00 ; eye [ NUM00 ] = $F148722 ( Math , theta ) * NUM00 ; glu . gluLookAt ( eye [ NUM00 ] , eye [ NUM00 ] , eye [ NUM00 ] , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 ) ; gl . glMatrixMode ( GL2 . GL_MODELVIEW ) ; gl . glLoadIdentity ( ) ; gl . glViewport ( NUM00 , NUM00 , width , height ) ; }
public static ResultSet pointTable ( double x , double y ) { GeometryFactory factory = new GeometryFactory $F72 ; SimpleResultSet rs = new SimpleResultSet $F72 ; rs . addColumn ( NUM00 , Types . JAVA_OBJECT , NUM00 , NUM00 , NUM00 ) ; rs . addRow ( factory . createPoint ( new Coordinate ( x , y ) ) ) ; return rs ; }
public void addToExistingVolumesIfAbsent ( $F59936 ( volumeWWNs ) ) { if ( _existingVolumes == null ) { _existingVolumes = new StringMap $F72 ; } for ( $F3465 ( wwn , volumeWWNs ) ) { String normalizedWWN = BlockObject . normalizeWWN ( wwn ) ; if ( ! _existingVolumes . containsKey ( normalizedWWN ) && ( _userAddedVolumes == null || ! _userAddedVolumes . containsKey ( normalizedWWN ) ) ) { String hluStr = ExportGroup . LUN_UNASSIGNED_STR ; $F99426 ( hlu , volumeWWNs , normalizedWWN ) $F170091 ( hlu , hluStr ) _existingVolumes . put ( normalizedWWN , hluStr ) ; } } }
public PathImpl createTempFile ( String prefix , String suffix ) throws IOException { if $F6036 ( prefix ) prefix = NUM00 ; $F12553 ( suffix ) synchronized ( LOCK ) { for ( $F6268 ( i ) ) { int r = Math . abs ( ( int ) RandomUtil . getRandomLong ( ) ) ; PathImpl file = lookup ( prefix + r + suffix ) ; if ( file . createNewFile ( ) ) return file ; } } $F3575 }
static Map < TargetType , List < TypeCompound > > partitionByTargetType ( Collection < TypeCompound > annos , List < TypeCompound > unmatched , TargetType ... targetTypes ) { final Map < TargetType , List < TypeCompound > > $F8690 ( targetTypeToAnnos ) ; for ( TargetType targetType : targetTypes ) { targetTypeToAnnos . put ( targetType , new ArrayList < TypeCompound > $F989 ) ; } for ( final TypeCompound anno : annos ) { final List < TypeCompound > annoSet = targetTypeToAnnos . get ( anno . getPosition ( ) . type ) ; if ( annoSet != null ) $F207 ( annoSet , anno ) else $F73441 ( unmatched , anno ) } return targetTypeToAnnos ; }
$F156045 ( msg , x , super , this )
public void load $F72 { try { if ( fileChannel == null ) { fileChannel = FileChannel . open ( path , StandardOpenOption . READ ) ; } $F16709 ( fileChannel ) $F725 ( buffer ) $F725 ( tmp ) while ( fileChannel . read ( tmp ) > NUM00 ) { $F14257 ( tmp ) if ( tmp . remaining ( ) > buffer . capacity ( ) - buffer . position ( ) ) { final ByteBuffer next = ByteBuffer . allocateDirect ( Math . max ( $F5699 ( buffer ) , tmp . remaining ( ) ) ) ; $F14257 ( buffer ) next . put ( buffer ) ; buffer = next ; } buffer . put ( tmp ) ; $F725 ( tmp ) } $F14257 ( buffer ) } catch ( final IOException e ) { throw new UncheckedIOException ( e ) ; } }
private void onHPChange ( final int amount ) { if ( User . squaredDistanceTo ( x , y ) < HEARING_DISTANCE_SQ ) { if ( amount > NUM00 ) { addTextIndicator ( NUM00 + amount , NotificationType . POSITIVE ) ; } else { addTextIndicator ( String . valueOf ( amount ) , NotificationType . NEGATIVE ) ; } } }
$F1113 private File resolveName $F116884 ( name ) throws IOException { File file ; if $F7311 ( name , ROOT ) { file = new File ( myTemplateRootFolder , $F8182 ( name , ROOT ) ) ; } else if ( myLastTemplateFolders != null ) { file = new File ( myLastTemplateFolders . peek ( ) , name ) ; } else { $F63508 ( file , myTemplateRootFolder , name ) } return file . getCanonicalFile ( ) ; }
public void initToolTip $F72 { if ( ttmanager == null ) { ttmanager = ToolTipManager . sharedInstance ( ) ; ttmanager . registerComponent ( map ) ; ttmanager . setEnabled ( _BOOL ) ; $F665 } if ( map != null ) { $F51105 ( map ) } }
public static $F806 decodeArray ( String encodedArray ) { $F6542 ( items , encodedArray ) $F8728 ( list ) for ( $F1139 ( i , items ) ) { String item = items [ i ] ; item = gsub ( NUM00 , NUM00 , item ) ; if $F1264 ( item ) $F207 ( list , item ) } $F14862 ( list ) }
public boolean computeAngleOffset $F72 { $F9303 ( mFinished , _BOOL ) long systemClock = AnimationUtils . currentAnimationTimeMillis ( ) ; long timePassed = systemClock - mStartTime ; if ( timePassed < mDuration ) { switch ( mMode ) { case SCROLL_MODE : $F5773 ( sc , timePassed , mDuration ) mCurrAngle = mStartAngle + Math . round ( mDeltaAngle * sc ) ; $F597 case FLING_MODE : float timePassedSeconds = timePassed / NUM00 ; float distance ; if ( mVelocity < NUM00 ) { distance = mCoeffVelocity * mVelocity * timePassedSeconds - ( mDeceleration * timePassedSeconds * timePassedSeconds / NUM00 ) ; } else { distance = - mCoeffVelocity * mVelocity * timePassedSeconds - ( mDeceleration * timePassedSeconds * timePassedSeconds / NUM00 ) ; } mCurrAngle = mStartAngle - Math . signum ( mVelocity ) * Math . round ( distance ) ; $F597 } return _BOOL ; } else $F98813 ( mFinished , _BOOL ) }
private void sendResource ( final UUID uuid , final Object resource , final long length , final InputStream is ) throws IOException { assert uuid != null ; assert resource != null ; assert length >= NUM00 ; assert is != null ; assert ! sentStatus ; long bytesWritten = NUM00 ; $F132947 ( begin , System ) final OutputStream os = s . getOutputStream ( ) ; try { { final DataOutputStream dos = new DataOutputStream ( os ) ; dos . write ( new byte [ ] { StatusEnum . OK . get ( ) } ) ; dos . writeLong ( length ) ; $F1206 ( dos ) bytesWritten += NUM00 + Bytes . SIZEOF_LONG ; sentStatus = _BOOL ; } final long checksum ; { final int BUFSIZE = Bytes . kilobyte32 * NUM00 ; final CheckedInputStream cis = new CheckedInputStream ( new BufferedInputStream ( is ) , new Adler32 $F72 ) ; $F4727 ( buff , BUFSIZE ) while ( _BOOL ) { final int read = cis . read ( buff , NUM00 , BUFSIZE ) ; $F137919 ( read ) $F11584 ( os , buff , read ) bytesWritten += read ; } checksum = cis . getChecksum ( ) . getValue ( ) ; } { final DataOutputStream dos = new DataOutputStream ( os ) ; dos . writeLong ( checksum ) ; bytesWritten += Bytes . SIZEOF_LONG ; $F1206 ( dos ) } $F1206 ( os ) if $F17747 ( log ) log . info ( $F3905 ( uuid , resource , length , checksum ) + TimeUnit . NANOSECONDS . toMillis ( System . nanoTime ( ) - begin ) + NUM00 ) ; } finally { try $F881 ( os ) $F58785 counters . bytesWritten . add ( bytesWritten ) ; counters . elapsedWriteNanos . add ( System . nanoTime ( ) - begin ) ; synchronized ( counters . maxWriteSizeLock ) { counters . maxWriteSize = Math . max ( counters . maxWriteSize , bytesWritten ) ; } } }
public long sigignore $F72 $F12907 ( Long , fields )
private static $F96 generateSeed $F72 { try { $F99460 ( seedBuffer ) final DataOutputStream seedBufferOut = new DataOutputStream ( seedBuffer ) ; seedBufferOut . writeLong ( System . currentTimeMillis ( ) ) ; seedBufferOut . writeLong ( System . nanoTime ( ) ) ; seedBufferOut . writeInt ( Process . myPid ( ) ) ; seedBufferOut . writeInt ( Process . myUid ( ) ) ; seedBufferOut . write ( BUILD_FINGERPRINT_AND_DEVICE_SERIAL ) ; $F59 ( seedBufferOut ) $F11316 ( seedBuffer ) } catch ( final IOException e ) { throw new SecurityException ( NUM00 , e ) ; } }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
public String render ( ValueExpr theExpr ) throws Exception { theExpr . visit ( this ) ; $F92 ( mBuffer ) }
public void stopSampling $F72 { if ( $F98948 ( mSamplingCounter ) ) { mHandler . stopSamplingThread ( ) ; addFinalSample ( ) ; } }
public static final void reverseWinding ( $F77749 points ) { $F142232 ( points , Messages ) $F115 ( size , points ) if $F2862 ( size ) $F665 Collections . reverse ( points ) ; }
public DSignCsr ( JFrame parent , PKCS10CertificationRequest pkcs10Csr , File csrFile , PrivateKey signPrivateKey , KeyPairType signKeyPairType , X509Certificate verificationCertificate , Provider provider ) throws CryptoException { $F36748 ( super , parent , Dialog ) this . pkcs10Csr = pkcs10Csr ; this . csrFile = csrFile ; this . signPrivateKey = signPrivateKey ; this . signKeyPairType = signKeyPairType ; this . verificationCertificate = verificationCertificate ; this . provider = provider ; $F15426 ( setTitle , res ) initComponents ( ) ; }
protected static void init $F72 { String notificationfactoryClassName = null ; try $F10616 ( notificationfactoryClassName , System , NOTIFICATION_FACTORY_NAME ) catch ( SecurityException e ) $F9491 ( e ) if ( notificationfactoryClassName != null ) { $F33929 ( nfc ) try { nfc = Class . forName ( notificationfactoryClassName ) ; factory = ( INotificationManagerFactory ) nfc . newInstance ( ) ; } catch ( ClassNotFoundException | InstantiationException | IllegalAccessException e ) $F9491 ( e ) } else { factory = new SyslogNotificationFactory $F72 ; } }
private int awaitDone ( boolean timed , long nanos ) throws InterruptedException { $F74107 ( deadline , timed , System , nanos ) WaitNode q = null ; boolean queued = _BOOL ; for ( $F589 ) { if $F2754 ( Thread ) { removeWaiter ( q ) ; $F2757 } int s = state ; if ( s > COMPLETING ) { if ( q != null ) q . thread = null ; return s ; } else if ( s == COMPLETING ) $F5756 ( Thread ) else if ( q == null ) q = new WaitNode $F72 ; else if ( ! queued ) queued = UNSAFE . compareAndSwapObject ( this , waitersOffset , q . next = waiters , q ) ; else if ( timed ) { $F27353 ( nanos , deadline , System ) if ( nanos <= NUM00 ) $F9278 ( removeWaiter , q , state ) LockSupport . parkNanos ( this , nanos ) ; } else LockSupport . park ( this ) ; } }
$F65837 ( node , count , capacity , _BOOL , f , first , last , notEmpty )
public static double clamp $F7635 ( value , low , high ) { return Math . min ( Math . max ( value , low ) , high ) ; }
public static String parseVolumeHostDirectory ( String volume ) { if $F4329 ( StringUtils , volume ) { return volume ; } if $F2200 ( volume , HOST_CONTAINER_DIR_DELIMITER ) { return volume ; } $F35105 ( hostContainerDir , volume , HOST_CONTAINER_DIR_DELIMITER ) $F231344 ( hostContainerDir ) String hostDir = hostContainerDir [ NUM00 ] ; return hostDir ; }
private String fmtTime ( double time ) { return Utilities . pad ( timeFormatter . format ( time ) + NUM00 , NUM00 ) ; }
$F78476 ( result , elementCount , System , elementData )
public static String right $F41200 ( s , width , fillChar ) { if $F85574 ( s , width ) { return s ; } $F1350 ( sb , width ) for ( $F135252 ( i , width , s ) ; -- i >= NUM00 ; ) $F288 ( sb , fillChar ) sb . append ( s ) ; $F92 ( sb ) }
public synchronized boolean addAll $F22451 ( c ) { modCount ++ ; $F11326 ( a , c ) int numNew = a . length ; ensureCapacityHelper ( elementCount + numNew ) ; $F6483 ( System , a , elementData , elementCount , numNew ) elementCount += numNew ; return numNew != NUM00 ; }
$F1 public void update ( DefaultApplicationState transState ) { newCheckpoint ( transState . getState ( ) , transState . getStateHash ( ) , transState . getLastCheckpointCID ( ) ) ; setLastCheckpointCID ( transState . getLastCheckpointCID ( ) ) ; }
public static $F96 stringToUtf8Bytes ( String string ) { $F1749 ( len , string ) $F171903 ( bytes , len ) int outAt = NUM00 ; for ( $F119 ( i , len ) ) { $F1280 ( c , string , i ) if ( ( c != NUM00 ) && ( c < NUM00 ) ) { $F8214 ( bytes , outAt , c ) outAt ++ ; } else if ( c < NUM00 ) { bytes [ outAt ] = $F476832 ( c ) ; bytes [ outAt + NUM00 ] = $F287679 ( c ) ; outAt += NUM00 ; } else { bytes [ outAt ] = $F476832 ( c ) ; bytes [ outAt + NUM00 ] = $F476832 ( c ) ; bytes [ outAt + NUM00 ] = $F287679 ( c ) ; outAt += NUM00 ; } } $F2175 ( result , outAt ) $F135 ( System , bytes , result , outAt ) return result ; }
private List < Pair $F528 > toPairList ( $F87266 ( bindings ) ) { final List < Pair $F528 > blist = new ArrayList < Pair $F528 > $F72 ; for ( final $F21130 pair : bindings . entrySet ( ) ) { blist . add ( new Pair $F528 ( $F15245 ( pair ) ) ) ; } return blist ; }
$F1 public boolean validateLabel ( String label ) { $F10578 ( Objects , label ) $F78369 ( labels , label ) }
public void addMessageObserver ( final MessageObserver observer ) { if ( observer == null ) $F18044 else $F113304 ( messageObservers , initMessageObserverList ) messageObservers . add ( observer ) ; }
public void show ( char initialChar ) { initialString = initialString . append ( initialChar ) ; show ( ) ; if ( SWT . getPlatform ( ) != NUM00 ) $F94311 ( setEditText , initialString ) }
private static void byte2hex ( byte b , StringBuffer buf ) { int $F84703 ( high , b ) ; $F74266 ( low , b ) $F6939 ( buf , HEX_DIGITS , high ) $F6939 ( buf , HEX_DIGITS , low ) }
public E remove ( int index ) { hashCodeUpToDate = _BOOL ; modCount ++ ; E oldValue = elementData ( index ) ; int numMoved = size - index - NUM00 ; if ( numMoved > NUM00 ) $F173011 ( System , elementData , index , numMoved ) elementData [ -- size ] = null ; return oldValue ; }
public static DoubleVector rnorm ( int n , double mean , double sd , Random random ) { $F30465 ( sd ) if ( sd == NUM00 ) return new DoubleVector ( n , mean ) ; DoubleVector v = new DoubleVector ( n ) ; for ( $F119 ( i , n ) ) v . set ( i , ( random . nextGaussian ( ) + mean ) / sd ) ; return v ; }
private PdfObject readCompressedStream ( PdfObject rootObj , int pointer , final PdfFileReader currentPdfFile , final ObjectReader objectReader , final PdfObject linearObj ) throws PdfException { while ( pointer != - NUM00 ) { movePointer ( pointer ) ; final $F96 raw = objectReader . readObjectData ( - NUM00 , null ) ; $F1121 ( objectName ) char current1 , last = NUM00 ; int matched = NUM00 , i1 = NUM00 ; while ( i1 < raw . length ) { current1 = ( char ) raw [ i1 ] ; if $F2862 ( current1 ) { current1 = NUM00 ; } if ( current1 == NUM00 && last == NUM00 ) { matched = NUM00 ; } else if ( current1 == pattern . charAt ( matched ) ) { matched ++ ; } else { matched = NUM00 ; objectName . append ( current1 ) ; } $F7256 ( matched ) last = current1 ; i1 ++ ; } $F84 ( objectName ) final PdfObject pdfObject = new CompressedObject $F3362 ( objectName ) ; pdfObject . setCompressedStream ( _BOOL ) ; final ObjectDecoder objectDecoder = new ObjectDecoder ( currentPdfFile ) ; objectDecoder . readDictionaryAsObject ( pdfObject , NUM00 , raw ) ; final $F2027 fieldSizes = pdfObject . getIntArray ( PdfDictionary . W ) ; $F96 xrefs = pdfObject . getDecodedStream ( ) ; if ( xrefs == null ) { xrefs = currentPdfFile . readStream ( pdfObject , _BOOL , _BOOL , _BOOL , _BOOL , _BOOL , null ) ; } final $F2027 Index = pdfObject . getIntArray ( PdfDictionary . Index ) ; if ( Index == null ) { CompressedObjects . readCompressedOffsets ( NUM00 , NUM00 , pdfObject . getInt ( PdfDictionary . Size ) , fieldSizes , xrefs , offset , pdf_datafile ) ; } else { $F18832 ( count , Index ) int pntr = NUM00 ; for ( $F6225 ( aa , count ) ) { pntr = CompressedObjects . readCompressedOffsets ( pntr , Index [ aa ] , Index [ aa + NUM00 ] , fieldSizes , xrefs , offset , pdf_datafile ) ; } } if ( rootObj == null ) { rootObj = pdfObject . getDictionary ( PdfDictionary . Root ) ; encryptObj = pdfObject . getDictionary ( PdfDictionary . Encrypt ) ; if ( encryptObj != null ) { final $F30974 IDs = pdfObject . getStringArray ( PdfDictionary . ID ) ; if ( IDs != null && this . ID == null ) { this . ID = IDs [ NUM00 ] ; } } infoObject = pdfObject . getDictionary ( PdfDictionary . Info ) ; } if ( linearObj != null ) $F44867 ( pointer ) else { pointer = pdfObject . getInt ( PdfDictionary . Prev ) ; if ( pointer != - NUM00 && ! isCompressedStream ( pointer , ( int ) eof ) ) { return readLegacyReferenceTable ( rootObj , pointer , ( int ) eof , currentPdfFile ) ; } } } return rootObj ; }
protected void warningOccurred ( int code ) { $F8934 ( cbLock ) try { if $F74591 ( code , MAX_WARNING ) { throw $F86636 ; } $F68359 ( processWarningOccurred , Integer , code ) ; } $F796 ( cbLock ) }
public boolean isKnownSub ( String subName ) $F298 ( KNOWN_SUBS , subName )
public String diff_text1 $F68061 ( diffs ) { $F83 ( text ) for ( Diff aDiff : diffs ) { if ( aDiff . operation != Operation . INSERT ) $F68065 ( text , aDiff ) } $F92 ( text ) }
public boolean isStored $F72 { return Integer . signum ( id ) != - NUM00 ; }
public static BigInteger sizeOfDirectoryAsBigInteger ( File directory ) { checkDirectory ( directory ) ; $F44946 ( files , directory ) if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { try { if ( ! isSymlink ( file ) ) { size = size . add ( BigInteger . valueOf ( sizeOf ( file ) ) ) ; } } $F62612 } return size ; }
public boolean isSearchLightBit ( int bit ) { if ( nodeType != SMINI ) { $F9464 ( log ) return ( _BOOL ) ; } if $F61157 ( bit ) { log . error ( NUM00 + Integer . toString ( bit ) ) ; return ( _BOOL ) ; } if ( locSearchLightBits [ bit ] == NUM00 ) $F3139 ( _BOOL ) return ( _BOOL ) ; }
public AgeFileFilter ( Date cutoffDate , boolean acceptOlder ) { this ( cutoffDate . getTime ( ) , acceptOlder ) ; }
public void calcMajorTick $F72 { majorTick = NUM00 ; majorTickCount = ( int ) Math . round ( log10 ( maxTick / minTick ) ) + NUM00 ; }
public boolean next $F72 throws GenericDataSourceException { try $F43105 ( _rs ) catch ( SQLException sqle ) { throw new GenericDataSourceException ( NUM00 + _sql , sqle ) ; } }
public void put ( String sample , HiddenAttribute attribute , Object value ) { put ( sample , attribute . toString ( ) , value ) ; }
void postMessage ( List < JetstreamMessage > msgs , DispatchQueueStats stats ) throws MessageServiceException { m_msgRcvCounter . addAndGet ( msgs . size ( ) ) ; if ( ( monitorUpstreamQueueAndPauseTraffic ( ) == UpstreamQueueState . FULL ) && $F27748 ( m_paused ) ) { if ( ! m_msgProcessor . hasAvailableCapacity ( m_twentyPercentCapacity ) ) { $F72375 ( m_totalMsgsDropped ) $F665 } } List $F24548 requests = new ArrayList $F24548 $F716 ( msgs ) ; for ( $F62958 ( i , t , msgs ) ) { JetstreamMessage tm = msgs . get ( i ) ; if ( tm . getTopic ( ) == null ) { $F72375 ( m_totalMsgsDropped ) $F35060 ( LOGGER ) $F598 } MessageServiceRequest msr = new MessageServiceRequest ( tm ) ; msr . setPriority ( tm . getPriority ( ) ) ; msr . setSequenceid ( tm . getSequenceId ( ) ) ; if ( msr . getPriority ( ) == JetstreamMessage . INTERNAL_MSG_PRIORITY ) { if ( ! m_internalMsgProcessor . processRequest ( msr ) ) { $F72375 ( m_totalMsgsDropped ) throw new MessageServiceException ( MessageServiceException . BUFFER_FULL , NUM00 ) ; } if ( m_msgsRcvdPerSec . addAndGet ( NUM00 ) < NUM00 ) $F3223 ( m_msgsRcvdPerSec ) $F72375 ( m_totalMsgsRcvd ) } else $F207 ( requests , msr ) } if $F5973 ( requests ) { $F2199 ( batchsize , requests ) if ( ! m_msgProcessor . processBatch ( requests ) ) { m_totalMsgsDropped . addAndGet ( batchsize ) ; throw new MessageServiceException ( MessageServiceException . BUFFER_FULL , NUM00 + NUM00 + batchsize + NUM00 + m_msgProcessor . getAvailableCapacity ( ) ) ; } m_avgMsgsRcvdPerSec . add ( batchsize ) ; m_totalMsgsRcvd . addAndGet ( batchsize ) ; } if ( stats != null ) { stats . setHighPriorityQueueDepth ( ( int ) m_msgProcessor . getPendingRequests ( ) ) ; stats . setLowPriorityQueueDepth ( ( int ) m_msgProcessor . getPendingRequests ( ) ) ; stats . setMaxQueueDepth ( ( int ) m_msgProcessor . getMaxQueueSz ( ) ) ; } }
public boolean unsetOrdering ( Object first , Object second ) { DigraphNode firstPONode = ( DigraphNode ) poNodes . get ( first ) ; DigraphNode secondPONode = ( DigraphNode ) poNodes . get ( second ) ; return firstPONode . removeEdge ( secondPONode ) || secondPONode . removeEdge ( firstPONode ) ; }
public String convertSWFToHTML ( InputStream in ) throws Exception { $F29429 ( out1 ) output = new PrintWriter ( out1 ) ; TagParser parser = new TagParser ( this ) ; SWFReader reader = new SWFReader ( parser , in ) ; reader . readFile ( ) ; $F59 ( in ) sizeCount = reader . size ; final String ret = NUM00 + ( headerstr . isEmpty ( ) ? NUM00 : NUM00 + headerstr + NUM00 ) + out1 . toString ( ) + NUM00 ; return ret ; }
public void write ( ClassFile classFile , File f ) throws IOException { $F4649 ( f_out , f ) try { write ( classFile , f_out ) ; } $F3229 ( f_out ) }
public Shape greatCircleLineShape $F72 { GeneralPath path = null ; if ( llpts != null && llpts . length >= NUM00 && llpts . length % NUM00 == NUM00 ) { double y1 = llpts [ NUM00 ] ; double x1 = llpts [ NUM00 ] ; path = new GeneralPath ( GeneralPath . WIND_EVEN_ODD , llpts . length / NUM00 ) ; boolean firstCoords = _BOOL ; for ( $F24429 ( i , llpts ) ) { double y2 = llpts [ i ] ; double x2 = llpts [ i + NUM00 ] ; double radDist = GreatCircle . sphericalDistance ( y1 , x1 , y2 , x2 ) ; int nsegs = ( int ) ( ProjMath . radToDeg ( radDist ) * segsPerDeg ) ; $F85331 ( nsegs ) $F1986 coords = GreatCircle . greatCircle ( y1 , x1 , y2 , x2 , nsegs , _BOOL ) ; if ( returnDegrees ) { ProjMath . arrayRadToDeg ( coords ) ; } for ( int j = NUM00 ; j <= coords . length - NUM00 ; j += NUM00 ) { if ( firstCoords ) { path . moveTo ( coords [ j + NUM00 ] , coords [ j ] ) ; firstCoords = _BOOL ; } else { path . lineTo ( coords [ j + NUM00 ] , coords [ j ] ) ; } } x1 = x2 ; y1 = y2 ; } if ( returnDegrees ) { path . lineTo ( ProjMath . radToDeg ( x1 ) , ProjMath . radToDeg ( y1 ) ) ; } else { path . lineTo ( x1 , y1 ) ; } } return path ; }
public Connection ( final InetSocketAddress peerAddress ) { this ( peerAddress , ( Handshaker ) null ) ; }
protected static Vector convertToVector ( final $F131 anArray ) { $F1338 ( anArray ) final Vector v = new Vector ( anArray . length ) ; for ( final Object element : anArray ) $F6659 ( v , element ) return v ; }
protected synchronized void notifyVersion ( SprogVersion v ) { ver = v ; for ( SprogVersionListener listener : getCopyOfListeners ( ) ) { try { listener . notifyVersion ( ver ) ; versionListeners . remove ( listener ) ; } catch ( Exception e ) $F63252 ( log , listener , e ) } }
protected void acceptDrop ( int dropOperation ) { DropTargetContextPeer peer = getDropTargetContextPeer ( ) ; if ( peer != null ) { peer . acceptDrop ( dropOperation ) ; } }
$F3594 ( oredCriteria , orderByClause , distinct , _BOOL )
$F1 public String toString $F72 { String result ; $F6947 ( result , super ) if ( m_CapabilitiesFilter != null ) { initCapabilities ( ) ; if ( m_Capabilities != null ) { if ( m_Capabilities . supportsMaybe ( m_CapabilitiesFilter ) && ! m_Capabilities . supports ( m_CapabilitiesFilter ) ) { result = NUM00 + MAYBE_SUPPORT + NUM00 + result + NUM00 ; } else if ( ! m_Capabilities . supports ( m_CapabilitiesFilter ) ) { result = NUM00 + NO_SUPPORT + NUM00 + result + NUM00 ; } } } return result ; }
$F156045 ( msg , x , super , this )
public void splitNode ( KDTreeNode node , int numNodesCreated , $F28974 ( nodeRanges ) , $F28974 ( universe ) ) throws Exception { correctlyInitialized ( ) ; if ( node . m_NodesRectBounds == null ) { node . m_NodesRectBounds = new double [ NUM00 ] [ node . m_NodeRanges . length ] ; for ( int i = NUM00 ; i < node . m_NodeRanges . length ; i ++ ) { node . m_NodesRectBounds [ MIN ] [ i ] = node . m_NodeRanges [ i ] [ MIN ] ; node . m_NodesRectBounds [ MAX ] [ i ] = node . m_NodeRanges [ i ] [ MAX ] ; } } double maxRectWidth = Double . NEGATIVE_INFINITY , maxPtWidth = Double . NEGATIVE_INFINITY , tempval ; int splitDim = - NUM00 , classIdx = m_Instances . classIndex ( ) ; for ( int i = NUM00 ; i < node . m_NodesRectBounds [ NUM00 ] . length ; i ++ ) { $F73688 ( i , classIdx ) tempval = node . m_NodesRectBounds [ MAX ] [ i ] - node . m_NodesRectBounds [ MIN ] [ i ] ; if ( m_NormalizeNodeWidth ) { tempval = tempval / universe [ i ] [ WIDTH ] ; } if ( tempval > maxRectWidth && node . m_NodeRanges [ i ] [ WIDTH ] > NUM00 ) maxRectWidth = tempval ; } for ( int i = NUM00 ; i < node . m_NodesRectBounds [ NUM00 ] . length ; i ++ ) { $F73688 ( i , classIdx ) tempval = node . m_NodesRectBounds [ MAX ] [ i ] - node . m_NodesRectBounds [ MIN ] [ i ] ; if ( m_NormalizeNodeWidth ) { tempval = tempval / universe [ i ] [ WIDTH ] ; } if ( tempval >= maxRectWidth * ( NUM00 - ERR ) && node . m_NodeRanges [ i ] [ WIDTH ] > NUM00 ) { if ( node . m_NodeRanges [ i ] [ WIDTH ] > maxPtWidth ) { maxPtWidth = node . m_NodeRanges [ i ] [ WIDTH ] ; if ( m_NormalizeNodeWidth ) maxPtWidth = maxPtWidth / universe [ i ] [ WIDTH ] ; splitDim = i ; } } } double splitVal = node . m_NodesRectBounds [ MIN ] [ splitDim ] + ( node . m_NodesRectBounds [ MAX ] [ splitDim ] - node . m_NodesRectBounds [ MIN ] [ splitDim ] ) * NUM00 ; if ( splitVal < node . m_NodeRanges [ splitDim ] [ MIN ] ) splitVal = node . m_NodeRanges [ splitDim ] [ MIN ] ; else if ( splitVal >= node . m_NodeRanges [ splitDim ] [ MAX ] ) splitVal = node . m_NodeRanges [ splitDim ] [ MAX ] - node . m_NodeRanges [ splitDim ] [ WIDTH ] * NUM00 ; int rightStart = rearrangePoints ( m_InstList , node . m_Start , node . m_End , splitDim , splitVal ) ; if ( rightStart == node . m_Start || rightStart > node . m_End ) { if ( rightStart == node . m_Start ) throw new Exception ( NUM00 + node . m_NodeNumber + NUM00 + NUM00 + NUM00 ) ; else throw new Exception ( NUM00 + node . m_NodeNumber + NUM00 + NUM00 + NUM00 ) ; } node . m_SplitDim = splitDim ; node . m_SplitValue = splitVal ; $F3789 widths = new double [ NUM00 ] [ node . m_NodesRectBounds [ NUM00 ] . length ] ; System . arraycopy ( node . m_NodesRectBounds [ MIN ] , NUM00 , widths [ MIN ] , NUM00 , node . m_NodesRectBounds [ MIN ] . length ) ; System . arraycopy ( node . m_NodesRectBounds [ MAX ] , NUM00 , widths [ MAX ] , NUM00 , node . m_NodesRectBounds [ MAX ] . length ) ; widths [ MAX ] [ splitDim ] = splitVal ; node . m_Left = new KDTreeNode ( numNodesCreated + NUM00 , node . m_Start , rightStart - NUM00 , m_EuclideanDistance . initializeRanges ( m_InstList , node . m_Start , rightStart - NUM00 ) , widths ) ; widths = new double [ NUM00 ] [ node . m_NodesRectBounds [ NUM00 ] . length ] ; System . arraycopy ( node . m_NodesRectBounds [ MIN ] , NUM00 , widths [ MIN ] , NUM00 , node . m_NodesRectBounds [ MIN ] . length ) ; System . arraycopy ( node . m_NodesRectBounds [ MAX ] , NUM00 , widths [ MAX ] , NUM00 , node . m_NodesRectBounds [ MAX ] . length ) ; widths [ MIN ] [ splitDim ] = splitVal ; node . m_Right = new KDTreeNode ( numNodesCreated + NUM00 , rightStart , node . m_End , m_EuclideanDistance . initializeRanges ( m_InstList , rightStart , node . m_End ) , widths ) ; }
public Date modifiedDate ( String path ) throws IllegalStateException , IOException , FTPIllegalReplyException , FTPException { synchronized ( lock ) { $F34216 ( connected ) $F34216 ( authenticated ) $F158032 ( communication , path ) $F73871 ( r , communication ) touchAutoNoopTimer ( ) ; $F73876 ( r ) $F806 messages = r . getMessages ( ) ; if $F11845 ( messages ) { throw new FTPIllegalReplyException $F72 ; } else { try { return MDTM_DATE_FORMAT . parse ( messages [ NUM00 ] ) ; } catch ( ParseException e ) { throw new FTPIllegalReplyException $F72 ; } } } }
public boolean importPkcs8 $F72 $F28110 ( jrbPkcs8 )
public ControlFlowGraph run ( CompilationUnitTree root , ProcessingEnvironment env , MethodTree tree , ClassTree classTree ) { UnderlyingAST underlyingAST = new CFGMethod ( tree , classTree ) ; return run ( root , env , underlyingAST ) ; }
private boolean isValidEngine $F72 { if ( hasFlag ( ~ ( CLAN_ENGINE | TANK_ENGINE | LARGE_ENGINE | SUPERHEAVY_ENGINE | SUPPORT_VEE_ENGINE ) ) ) { $F11030 ( problem , engineFlags ) return _BOOL ; } if ( hasFlag ( SUPPORT_VEE_ENGINE ) && ( engineType != STEAM ) && ( engineType != COMBUSTION_ENGINE ) && ( engineType != BATTERY ) && ( engineType != FUEL_CELL ) && ( engineType != SOLAR ) && ( engineType != FISSION ) && ( engineType != NORMAL_ENGINE ) && ( engineType != NONE ) ) $F117250 ( problem , _BOOL ) if ( ( ( $F96308 ( Math , engineRating ) > ENGINE_RATINGS . length ) || ( engineRating < NUM00 ) ) && ! hasFlag ( SUPPORT_VEE_ENGINE ) ) { $F11030 ( problem , engineRating ) return _BOOL ; } if ( ( engineRating > NUM00 ) && ! hasFlag ( SUPPORT_VEE_ENGINE ) ) { engineFlags |= LARGE_ENGINE ; } switch ( engineType ) { case COMBUSTION_ENGINE : case NORMAL_ENGINE : case XL_ENGINE : case XXL_ENGINE : case FUEL_CELL : case NONE : case MAGLEV : case BATTERY : case SOLAR : $F597 case COMPACT_ENGINE : if ( hasFlag ( LARGE_ENGINE ) ) { $F189165 ( problem , Messages ) return _BOOL ; } $F597 case LIGHT_ENGINE : case FISSION : if ( hasFlag ( CLAN_ENGINE ) ) { $F189165 ( problem , Messages ) return _BOOL ; } $F597 $F1267 $F11030 ( problem , engineType ) return _BOOL ; } return _BOOL ; }
static public void assertEquals ( String message , float expected , float actual , float delta ) $F62540 ( Float , expected , actual , failNotEquals , message , Math , delta )
private void calculateD $F9830 ( b ) { $F40484 ( length , mExtremalIndices ) $F10254 ( mD , length ) for ( $F119 ( k , length ) ) { mD [ k ] = b [ k ] * ( mGrid . getCosineFrequencyGrid ( ) [ mExtremalIndices . get ( k ) ] - mGrid . getCosineFrequencyGrid ( ) [ mExtremalIndices . get ( length ) ] ) ; } }
public static $F96 base64decode ( String coded ) { if ( null == coded ) $F1274 $F39526 ( src , coded ) int len = src . length ; int dlen = len - ( len / NUM00 ) ; dlen = $F14870 ( dlen ) + $F14870 ( dlen ) ; int rem = NUM00 ; if ( NUM00 == src [ len - NUM00 ] ) rem ++ ; if ( NUM00 == src [ len - NUM00 ] ) rem ++ ; dlen -= rem ; $F2175 ( dst , dlen ) int pos = NUM00 ; int dpos = NUM00 ; int col = NUM00 ; len -= NUM00 ; while ( pos < len ) { byte b0 = _base64de [ src [ pos ++ ] ] ; byte b1 = _base64de [ src [ pos ++ ] ] ; byte b2 = _base64de [ src [ pos ++ ] ] ; byte b3 = _base64de [ src [ pos ++ ] ] ; if ( B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3 ) $F1665 ( pos ) dst [ dpos ++ ] = ( byte ) ( ( b0 < < NUM00 ) | $F97528 ( b1 ) ) ; dst [ dpos ++ ] = ( byte ) ( ( b1 < < NUM00 ) | $F97528 ( b2 ) ) ; dst [ dpos ++ ] = ( byte ) ( ( b2 < < NUM00 ) | ( b3 & NUM00 ) ) ; col += NUM00 ; if ( NUM00 == col ) { if ( NUM00 != src [ pos ++ ] ) throw new RuntimeException ( NUM00 + ( pos - NUM00 ) ) ; col = NUM00 ; } } byte b0 = _base64de [ src [ pos ++ ] ] ; byte b1 = _base64de [ src [ pos ++ ] ] ; byte b2 = _base64de [ src [ pos ++ ] ] ; byte b3 = _base64de [ src [ pos ++ ] ] ; if ( B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3 ) $F1665 ( pos ) dst [ dpos ++ ] = ( byte ) ( ( b0 < < NUM00 ) | $F97528 ( b1 ) ) ; if ( NUM00 == rem ) return dst ; dst [ dpos ++ ] = ( byte ) ( ( b1 < < NUM00 ) | $F97528 ( b2 ) ) ; if ( NUM00 == rem ) return dst ; dst [ dpos ++ ] = ( byte ) ( ( b2 < < NUM00 ) | ( b3 & NUM00 ) ) ; return dst ; }
private static Properties loadProperties ( String propertiesFile ) { $F2697 ( properties ) try ( $F24408 ( is , propertiesFile ) ) $F46567 ( properties , is ) $F7078 ( e ) return properties ; }
public TextEditor replaceAll ( Pattern pattern , Replacement replacement ) { $F1150 ( m , pattern , text ) int lastIndex = NUM00 ; $F83 ( sb ) while $F281 ( m ) { sb . append ( text . subSequence ( lastIndex , m . start ( ) ) ) ; sb . append ( replacement . replacement ( m ) ) ; $F204945 ( lastIndex , m ) } sb . append ( text . subSequence ( lastIndex , text . length ( ) ) ) ; text = sb ; return this ; }
public Map < String , $F2539 > list ( String serviceName ) { Map < String , $F2539 > results = new HashMap < String , $F2539 > $F72 ; ServiceInfo [ ] infos = jmdns . list ( NUM00 + serviceName + NUM00 ) ; for ( ServiceInfo info : infos ) { _log . info ( NUM00 , info ) ; final $F806 hostAddrs = info . getHostAddresses ( ) ; $F3239 ( buf ) for ( String hostAddr : hostAddrs ) $F444 ( buf , hostAddr ) $F52199 ( key , buf ) $F10635 ( _log , key ) final $F2539 values = $F12080 ; for ( $F14937 e = info . getPropertyNames ( ) ; e . hasMoreElements ( ) ; ) { final String prop = e . nextElement ( ) ; final String value = new String ( info . getPropertyBytes ( prop ) ) ; $F21153 ( _log , prop , value ) values . put ( prop , value ) ; } if $F2979 ( values ) $F23016 ( _log , key ) results . put ( key , values . isEmpty ( ) ? null : values ) ; } return results ; }
$F22330 $F1 default LazyFutureStream $F30939 concat ( final Stream < ? extends U > other ) { return fromStream ( Stream . concat ( StreamSupport . stream ( Spliterators . spliteratorUnknownSize ( iterator ( ) , Spliterator . ORDERED ) , _BOOL ) , StreamSupport . stream ( Spliterators . spliteratorUnknownSize ( other . iterator ( ) , Spliterator . ORDERED ) , _BOOL ) ) ) ; }
private int moveComponents ( Container target , int x , int y , int width , int height , int rowStart , int rowEnd , boolean ltr , boolean useBaseline , $F2027 ascent , $F2027 descent ) { switch ( newAlign ) { case LEFT : x += ltr ? NUM00 : width ; $F597 case CENTER : x += width / NUM00 ; $F597 case RIGHT : x += ltr ? width : NUM00 ; $F597 case LEADING : $F597 case TRAILING : x += width ; $F597 } int maxAscent = NUM00 ; int nonbaselineHeight = NUM00 ; int baselineOffset = NUM00 ; if ( useBaseline ) { int maxDescent = NUM00 ; for ( int i = rowStart ; i < rowEnd ; i ++ ) { $F201892 ( m , target , i ) if ( m . visible ) { if ( ascent [ i ] >= NUM00 ) { maxAscent = Math . max ( maxAscent , ascent [ i ] ) ; maxDescent = Math . max ( maxDescent , descent [ i ] ) ; } else { nonbaselineHeight = Math . max ( m . getHeight ( ) , nonbaselineHeight ) ; } } } height = Math . max ( maxAscent + maxDescent , nonbaselineHeight ) ; baselineOffset = ( height - maxAscent - maxDescent ) / NUM00 ; } for ( int i = rowStart ; i < rowEnd ; i ++ ) { $F201892 ( m , target , i ) if $F201893 ( m ) { int cy ; if ( useBaseline && ascent [ i ] >= NUM00 ) { cy = y + baselineOffset + maxAscent - ascent [ i ] ; } else { cy = y + ( height - m . height ) / NUM00 ; } if ( ltr ) { m . setLocation ( x , cy ) ; } else { m . setLocation ( target . width - x - m . width , cy ) ; } x += m . width + hgap ; } } return height ; }
$F1 public void readExternal ( ObjectInput in ) throws IOException { path = IgfsUtils . readPath ( in ) ; $F5961 ( blockSize , in ) $F33039 ( grpBlockSize , in ) $F33039 ( len , in ) props = U . readStringMap ( in ) ; $F33039 ( accessTime , in ) $F33039 ( modificationTime , in ) $F1643 ( flags , in ) }
public StandardXYItemLabelGenerator $F72 { this ( DEFAULT_ITEM_LABEL_FORMAT , NumberFormat . getNumberInstance ( ) , NumberFormat . getNumberInstance ( ) ) ; }
public Vector2 ( double direction ) { this . x = Math . cos ( direction ) ; this . y = Math . sin ( direction ) ; }
public static $F529 convertDocumentFileToFile $F71242 ( dctx , context ) { XMultiComponentFactory xmulticomponentfactory = null ; $F28495 ( stringUrl , context ) $F28495 ( stringConvertedFile , context ) $F28495 ( inputMimeType , context ) $F28495 ( outputMimeType , context ) $F28495 ( oooHost , context ) $F28495 ( oooPort , context ) try { xmulticomponentfactory = OpenOfficeWorker . getRemoteServer ( oooHost , oooPort ) ; $F1705 ( inputFile , stringUrl ) $F6466 ( fileSize , inputFile ) $F4647 ( fis , inputFile ) ByteArrayOutputStream baos = new ByteArrayOutputStream $F1047 ( fileSize ) ; int c ; $F254305 ( c , fis , baos ) OpenOfficeByteArrayInputStream oobais = new OpenOfficeByteArrayInputStream $F87573 ( baos ) ; OpenOfficeByteArrayOutputStream oobaos = OpenOfficeWorker . convertOODocByteStreamToByteStream ( xmulticomponentfactory , oobais , inputMimeType , outputMimeType ) ; $F4649 ( fos , stringConvertedFile ) $F1569 ( fos , oobaos ) $F59 ( fos ) $F59 ( fis ) $F59 ( oobais ) $F59 ( oobaos ) $F254313 ( results , ServiceUtil ) return results ; } $F108926 ( Debug , e , module , ServiceUtil ) $F254315 ( Debug , e , module , ServiceUtil ) }
public double adjustedPow10 ( double val ) { boolean negFlag = ( val < NUM00 ) ; $F96183 ( negFlag , val ) double res ; if ( val < NUM00 ) { res = ( Math . pow ( NUM00 , val + NUM00 ) - NUM00 ) / NUM00 ; } else { res = Math . pow ( NUM00 , val ) ; } return negFlag ? ( - res ) : res ; }
$F1 public void clear $F72 $F115274 ( columnList )
public boolean isLastInvoice $F72 $F115042 ( cm , getCostingMethod , COSTINGMETHOD_LastInvoice )
public static void proxyPort ( final int port ) { final String portValue = Integer . toString ( port ) ; setProperty ( NUM00 , portValue ) ; setProperty ( NUM00 , portValue ) ; }
public static String fetchClusterName ( String clusterCgName ) { String clusterName = null ; if $F1032 ( clusterCgName ) { $F35105 ( tmp , clusterCgName , SPLITTER ) clusterName = tmp [ NUM00 ] ; } return clusterName ; }
private void fetchMyServiceCardsFromServer $F72 { RetroCallback retroCallback ; retroCallback = new RetroCallback ( this ) ; retroCallback . setRequestId ( HttpConstants . ApiResponseCodes . GET_MY_SERVICES ) ; retroCallbackList . add ( retroCallback ) ; mYeloApi . getMyServiceCards ( retroCallback ) ; }
public DViewAsymmetricKeyFields ( JDialog parent , String title , RSAPublicKey rsaPublicKey ) { super ( parent , title , Dialog . ModalityType . DOCUMENT_MODAL ) ; key = rsaPublicKey ; initFields ( ) ; }
public List < ColourChange > sampleConditionalMigrationEvents2 ( int parentColour , double parentHeight , int childColour , double childHeight , $F1986 m ) { List < ColourChange > colourChanges = new ArrayList < ColourChange > $F72 ; if ( parentHeight < childHeight ) $F60154 ( parentHeight , childHeight ) try { int currentColour = parentColour ; double currentHeight = parentHeight ; while ( _BOOL ) { ColourChange nextEvent = randomConditionalMigrationEvent ( currentColour , currentHeight , childColour , childHeight , m ) ; $F36868 ( currentHeight , nextEvent ) currentColour = nextEvent . getColourAbove ( ) ; colourChanges . add ( nextEvent ) ; } } catch ( NoEventException nee ) $F845 reverseColourChangeList ( colourChanges , parentColour ) ; return colourChanges ; }
public static boolean isAttribute ( Object objValue ) { if ( objValue instanceof String ) { $F71197 ( stringValue , objValue ) if ( stringValue . startsWith ( ATTRIBUTE_START ) && stringValue . endsWith ( ATTRIBUTE_END ) ) { return _BOOL ; } } return _BOOL ; }
public static String decodeASCII $F41456 ( key , off , len ) { $F4727 ( b , len ) $F21535 ( System , key , off , b , len ) for ( $F119 ( i , len ) ) { b [ i ] = decodeByte ( b [ i ] ) ; } try { $F34259 ( b ) } $F91725 ( e ) }
$F1 public void valueChanged ( TreeSelectionEvent e ) { $F7254 ( preventEvent ) if ( mainFrame != null ) { List < Operator > selectedOperators = getSelectedOperators ( ) ; if $F1032 ( selectedOperators ) { mainFrame . selectOperators ( selectedOperators ) ; } } }
public synchronized void removePropertyChangeListener ( PropertyChangeListener listener ) $F106 ( listeners , listener )
final boolean transferAfterCancelledWait ( Node node ) { if ( compareAndSetWaitStatus ( node , Node . CONDITION , NUM00 ) ) $F9278 ( enq , node , _BOOL ) while ( ! isOnSyncQueue ( node ) ) $F5756 ( Thread ) return _BOOL ; }
private static Intent createShareIntent ( Context context , final String shareText ) { final Intent shareIntent = new Intent ( Intent . ACTION_SEND ) ; shareIntent . putExtra ( android . content . Intent . EXTRA_SUBJECT , context . getString ( R . string . share_subject ) ) ; shareIntent . putExtra ( android . content . Intent . EXTRA_TEXT , shareText ) ; $F146148 ( shareIntent ) return shareIntent ; }
public static $F30939 AtomicIntegerFieldUpdater $F30939 newUpdater ( Class $F30939 tclass , String fieldName ) { if ( UnsafeHolder . isAvailable ( ) ) { return new AtomicIntegerFieldUpdaterImpl $F30939 ( tclass , fieldName ) ; } return AtomicIntegerFieldUpdater . newUpdater ( tclass , fieldName ) ; }
private boolean tryStep ( final double t0 , final $F1986 y0 , final double step , final int k , final $F1986 scale , final $F3789 f , final $F1986 yMiddle , final $F1986 yEnd ) throws MathIllegalArgumentException , MathIllegalStateException { final int n = sequence [ k ] ; final double subStep = step / n ; final double subStep2 = NUM00 * subStep ; double t = t0 + subStep ; for ( $F9808 ( i , y0 ) ) { yEnd [ i ] = y0 [ i ] + subStep * f [ NUM00 ] [ i ] ; } f [ NUM00 ] = computeDerivatives ( t , yEnd ) ; final $F1986 yTmp = y0 . clone ( ) ; for ( $F1316 ( j , n ) ) { if ( NUM00 * j == n ) { System . arraycopy ( yEnd , NUM00 , yMiddle , NUM00 , y0 . length ) ; } t += subStep ; for ( $F9808 ( i , y0 ) ) { final double middle = yEnd [ i ] ; yEnd [ i ] = yTmp [ i ] + subStep2 * f [ j ] [ i ] ; yTmp [ i ] = middle ; } f [ j + NUM00 ] = computeDerivatives ( t , yEnd ) ; if ( performTest && ( j <= maxChecks ) && ( k < maxIter ) ) { double initialNorm = NUM00 ; for ( $F9808 ( l , scale ) ) { final double ratio = f [ NUM00 ] [ l ] / scale [ l ] ; initialNorm += ratio * ratio ; } double deltaNorm = NUM00 ; for ( $F9808 ( l , scale ) ) { final double ratio = ( f [ j + NUM00 ] [ l ] - f [ NUM00 ] [ l ] ) / scale [ l ] ; deltaNorm += ratio * ratio ; } if ( deltaNorm > NUM00 * FastMath . max ( NUM00 , initialNorm ) ) { return _BOOL ; } } } for ( $F9808 ( i , y0 ) ) { yEnd [ i ] = NUM00 * ( yTmp [ i ] + yEnd [ i ] + subStep * f [ n ] [ i ] ) ; } return _BOOL ; }
$F103859 ( data , results , key )
private static $F7329 offsetLSR $F68514 ( offset , environment , instructions , registerNodeValue1 , registerNodeValue2 , immediateNodeValue ) { $F7336 ( address , environment ) $F7336 ( tmpVar1 , environment ) $F7336 ( tmpVar2 , environment ) $F7336 ( index , environment ) long baseOffset = offset ; instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dw , registerNodeValue2 , dw , NUM00 + immediateNodeValue , qw , tmpVar1 ) ) ; $F7364 ( instructions , ReilHelpers , baseOffset , qw , tmpVar1 , dw , dWordBitMask , index ) $F43828 ( instructions , ReilHelpers , baseOffset , dw , registerNodeValue1 , index , tmpVar2 ) $F7341 ( instructions , ReilHelpers , baseOffset , dw , tmpVar2 , dWordBitMask , address ) $F7348 ( address , registerNodeValue1 ) }
public static RowLimitSpec buildRowLimitSpec ( EsperEPL2GrammarParser . RowLimitContext ctx ) { Object numRows ; Object offset ; if ( ctx . o != null ) { numRows = parseNumOrVariableIdent ( ctx . n1 , ctx . i1 ) ; offset = parseNumOrVariableIdent ( ctx . n2 , ctx . i2 ) ; } else if ( ctx . c != null ) { offset = parseNumOrVariableIdent ( ctx . n1 , ctx . i1 ) ; numRows = parseNumOrVariableIdent ( ctx . n2 , ctx . i2 ) ; } else { numRows = parseNumOrVariableIdent ( ctx . n1 , ctx . i1 ) ; offset = null ; } Integer numRowsInt = null ; String numRowsVariable = null ; if ( numRows instanceof String ) $F80631 ( numRowsVariable , numRows ) else { numRowsInt = ( Integer ) numRows ; } Integer offsetInt = null ; String offsetVariable = null ; if ( offset instanceof String ) $F80631 ( offsetVariable , offset ) else { offsetInt = ( Integer ) offset ; } return new RowLimitSpec ( numRowsInt , offsetInt , numRowsVariable , offsetVariable ) ; }
public final int first_common_layer ( BrdItem p_other ) { int max_first_layer = Math . max ( $F120503 ( first_layer , p_other ) ) ; int min_last_layer = $F203679 ( Math , last_layer , p_other ) ; $F81007 ( max_first_layer , min_last_layer ) return max_first_layer ; }
public ItemStack removeItems ( ItemStack drive , ItemStack stack , int amountWanted ) { if ( getMaxKilobits ( drive ) == - NUM00 ) $F1274 int stored = getAmountStored ( drive , stack ) ; $F17565 ( amountGiven , Math , amountWanted , stored ) if ( amountGiven > NUM00 ) { setAmountStored ( drive , stack , stored - amountGiven ) ; stack . stackSize += amountGiven ; markDirty ( drive ) ; } return stack ; }
public void saveIndexes $F72 { $F12181 ( toSave ) synchronized ( this ) { $F131 valueTable = this . indexes . valueTable ; for ( $F151668 ( i , l , valueTable ) ) { Index index = ( Index ) valueTable [ i ] ; $F67023 ( index , toSave ) } } boolean allSaved = _BOOL ; for ( $F62958 ( i , length , toSave ) ) { Index index = ( Index ) toSave . get ( i ) ; ReadWriteMonitor monitor = index . monitor ; $F45557 ( monitor ) try { monitor . enterRead ( ) ; if ( index . hasChanged ( ) ) { if ( monitor . exitReadEnterWrite ( ) ) { try { saveIndex ( index ) ; } catch ( IOException e ) { if ( JobManager . VERBOSE ) { Util . verbose ( NUM00 , System . err ) ; $F301 ( e ) } allSaved = _BOOL ; } finally { monitor . exitWriteEnterRead ( ) ; } } else { allSaved = _BOOL ; } } } finally { monitor . exitRead ( ) ; } } if ( this . participantsContainers != null && this . participantUpdated ) { writeParticipantsIndexNamesFile ( ) ; this . participantUpdated = _BOOL ; } this . needToSave = ! allSaved ; }
public void addItem ( Artist artist , int position ) { $F1149 ( artist ) if ( position < getItemCount ( ) || position > getItemCount ( ) ) $F824 artists . add ( position , artist ) ; notifyItemInserted ( position ) ; }
public Process executeAsync ( final CommandLine command , $F2540 ( environment ) ) throws IOException { if $F271542 ( workingDirectory ) $F124393 ( workingDirectory ) return executeInternal ( command , environment , workingDirectory , streamHandler , null ) ; }
public void expandAndSelectIfExists ( RepositoryLocation location ) { if ( location . parent ( ) != null ) { expandIfExists ( location . parent ( ) , location . getName ( ) ) ; } else $F11707 ( expandIfExists , location ) scrollPathToVisible ( getSelectionPath ( ) ) ; }
public void nextToken $F72 { previousLine = line ; previousColumn = column ; while ( pos < matcher . regionStart ( ) ) { if $F11983 ( text , pos ) { ++ line ; column = NUM00 ; } else { ++ column ; } ++ pos ; } if ( matcher . regionStart ( ) == matcher . regionEnd ( ) ) { currentToken = NUM00 ; } else { matcher . usePattern ( TOKEN ) ; if $F54321 ( matcher ) { currentToken = matcher . group ( ) ; matcher . region ( matcher . end ( ) , matcher . regionEnd ( ) ) ; } else { currentToken = $F54327 ( String , text , pos ) ; matcher . region ( pos + NUM00 , matcher . regionEnd ( ) ) ; } skipWhitespace ( ) ; } }
public static void saveProvisioningValidity ( Context context , long validity ) { $F36109 ( validity ) $F52855 ( next , System , validity ) SharedPreferences preferences = context . getSharedPreferences ( AndroidRegistryFactory . RCS_PREFS_NAME , Activity . MODE_PRIVATE ) ; $F37526 ( editor , preferences ) editor . putLong ( REGISTRY_PROVISIONING_VALIDITY , validity ) ; editor . putLong ( REGISTRY_PROVISIONING_EXPIRATION , next ) ; $F17621 ( editor ) }
public void encode ( OutputStream out ) throws IOException { $F19904 ( tmp ) if $F73719 ( this ) { this . extensionId = PKIXExtensions . ReasonCode_Id ; this . critical = _BOOL ; encodeThis ( ) ; } super . encode ( tmp ) ; $F1569 ( out , tmp ) }
public DriverTask unexportVolumesFromInitiators ( $F15661 initiators , List < StorageVolume > volumes ) { $F973 ( LOG ) DriverTask task = new DellSCDriverTask $F580 ; ScServer server = null ; $F83 ( errBuffer ) int volumesUnmapped = NUM00 ; for ( StorageVolume volume : volumes ) { String ssn = volume . getStorageSystemId ( ) ; boolean isSnapshot = StringUtils . countMatches ( volume . getNativeId ( ) , NUM00 ) == NUM00 ; try { StorageCenterAPI api = connectionManager . getConnection ( ssn ) ; ScVolume scVol = null ; if ( isSnapshot ) { scVol = api . findReplayView ( volume . getNativeId ( ) ) ; if ( scVol != null ) { api . deleteVolume ( scVol . instanceId ) ; volumesUnmapped ++ ; $F598 } } else { scVol = api . getVolume ( volume . getNativeId ( ) ) ; } if ( scVol == null ) { throw new DellSCDriverException ( String . format ( NUM00 , volume . getNativeId ( ) ) ) ; } $F63621 ( server , findScServer , api , ssn , initiators ) if ( server == null ) { throw new DellSCDriverException ( SERVER_CREATE_FAIL_MSG ) ; } ScMappingProfile [ ] mappingProfiles = api . findMappingProfiles ( server . instanceId , scVol . instanceId ) ; for ( ScMappingProfile mappingProfile : mappingProfiles ) { api . deleteMappingProfile ( mappingProfile . instanceId ) ; } volumesUnmapped ++ ; LOG . info ( NUM00 , scVol . name , server . name ) ; } catch ( $F193202 dex ) { String error = String . format ( NUM00 , volume . getDisplayName ( ) , dex ) ; LOG . error ( error ) ; $F64611 ( errBuffer , String , error ) if ( SERVER_CREATE_FAIL_MSG . equals ( dex . getMessage ( ) ) ) $F5153 } } task . setMessage ( errBuffer . toString ( ) ) ; if $F25745 ( volumesUnmapped , volumes ) $F193217 ( task , TaskStatus ) else if ( volumesUnmapped == NUM00 ) { $F193219 ( task , TaskStatus ) } else $F193223 ( task , TaskStatus ) return task ; }
public void createClusterAsync ( final String projectId , final ClusterCreateSpec clusterCreateSpec , $F67201 ( responseCallback ) ) throws IOException { $F67207 ( path , String , getBasePath , projectId ) createObjectAsync ( path , serializeObjectAsJson ( clusterCreateSpec ) , responseCallback ) ; }
public static DereferenceAliasesPolicy valueOf ( final int intValue ) { if $F41457 ( intValue , ELEMENTS ) $F1337 return ELEMENTS [ intValue ] ; }
public void testGetNamedItemNS2 $F72 throws Throwable { Document doc ; NamedNodeMap attributes ; Node element ; Attr attribute ; NodeList elementList ; String attrName ; $F236 ( doc , load , builder ) $F103343 ( elementList , doc ) $F238 ( element , elementList ) $F35323 ( attributes , element ) attribute = ( Attr ) $F186021 ( attributes ) ; $F89257 ( attrName , attribute ) assertEquals ( NUM00 , NUM00 , attrName ) ; }
public static void writeUnsafe ( PacketOutputStream out , String value , boolean noBackslashEscapes ) throws IOException { $F151317 ( bytes , value ) out . writeUnsafe ( QUOTE ) ; writeBytesEscapedUnsafe ( out , bytes , bytes . length , noBackslashEscapes ) ; out . writeUnsafe ( QUOTE ) ; }
public void add ( final SAMRecord read , final int position ) { recordAndOffsets . add ( new RecordAndOffset ( read , position ) ) ; }
private Sha256Hash calculateHash $F72 { try { ByteArrayOutputStream bos = new UnsafeByteArrayOutputStream ( HEADER_SIZE ) ; writeHeader ( bos ) ; return new Sha256Hash ( Utils . reverseBytes ( doubleDigest ( bos . toByteArray ( ) ) ) ) ; } $F12153 ( e ) }
private void addPropertyType ( URI p , Resource t ) { OwlProperty prop = getProperty ( p ) ; if ( t . equals ( OWL . TRANSITIVEPROPERTY ) ) { prop . setTransitive ( ) ; } else if ( t . equals ( OWL . SYMMETRICPROPERTY ) ) { prop . setSymmetric ( ) ; } else if ( t . equals ( OWL2 . ASYMMETRICPROPERTY ) ) { prop . setAsymmetric ( ) ; } else if ( t . equals ( OWL . FUNCTIONALPROPERTY ) ) { prop . setFunctional ( ) ; } else if ( t . equals ( OWL . INVERSEFUNCTIONALPROPERTY ) ) { prop . setInverseFunctional ( ) ; } else if ( t . equals ( OWL2 . IRREFLEXIVEPROPERTY ) ) { prop . setIrreflexive ( ) ; } }
public static void equals ( Object object1 , Object object2 ) { checkAssertion ( object1 . equals ( object2 ) , null ) ; }
public static String writeActionsToString ( OFInstructionWriteActions inst , Logger log ) throws Exception { return ActionUtils . actionsToString ( inst . getActions ( ) , log ) ; }
protected void preAddInterruptibly ( Object o ) throws InterruptedException $F845
public static String encodeLines ( $F96 in , int iOff , int iLen , int lineLen , String lineSeparator ) { int blockLen = ( lineLen * NUM00 ) / NUM00 ; $F61934 ( blockLen ) $F61936 ( lines , iLen , blockLen ) int bufLen = $F61937 ( iLen ) * NUM00 + lines * lineSeparator . length ( ) ; $F7542 ( buf , bufLen ) int ip = NUM00 ; while ( ip < iLen ) { $F55158 ( l , Math , iLen , ip , blockLen ) buf . append ( encode ( in , iOff + ip , l ) ) ; buf . append ( lineSeparator ) ; ip += l ; } $F92 ( buf ) }
private ODataFeed readFeedLogPerf $F5805 ( query , params ) throws IOException , ODataException { $F657 ( delta_time , System ) ODataFeed feed = client . readFeed ( query , params ) ; log ( Level . DEBUG , NUM00 + query + NUM00 + delta_time + NUM00 ) ; return feed ; }
final int rllong ( DataInputStream dis ) throws IOException { int b1 , b2 , b3 , b4 ; int i = NUM00 ; $F5961 ( i , dis ) $F3252 ( b1 , i ) $F3252 ( b2 , i ) $F145783 ( b3 , i ) ; b4 = ( i & NUM00 ) > > > NUM00 ; i = ( b1 | b2 | b3 | b4 ) ; return i ; }
public void testShiftRight4 $F72 { $F17888 int aSign = NUM00 ; int number = NUM00 ; byte $F3018 = { NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F86501 ( result , aNumber , number ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public Dependencies resolveFromFile ( File file , String className , SootClass sc ) { DexlibWrapper wrapper = cache . get ( file ) ; if ( wrapper == null ) { wrapper = new DexlibWrapper ( file ) ; cache . put ( file , wrapper ) ; $F21883 ( wrapper ) } Dependencies deps = wrapper . makeSootClass ( sc , className ) ; addSourceFileTag ( $F71108 ( sc , file ) ) ; return deps ; }
public static String buildResponseUrl ( String tenant , LogoutState logoutState ) { String retval = null ; LogoutResponse samlResponse = logoutState . generateResponseForTenant ( tenant , logoutState . getMessageSource ( ) , logoutState . getLocale ( ) ) ; if ( samlResponse != null ) { $F209111 ( log , samlResponse ) retval = logoutState . generateResponseUrlForTenant ( samlResponse , tenant ) ; } return retval ; }
public static void assertLabel ( $F2027 path , String text ) { if ( verbose ) { log ( NUM00 + toString ( path ) + NUM00 + text + NUM00 ) ; } Label l = ( Label ) getComponentByPath ( path ) ; assertBool ( l != null , NUM00 + text ) ; assertBool ( text == l . getText ( ) || text . equals ( l . getText ( ) ) , ( NUM00 + l . getText ( ) ) + NUM00 + text ) ; }
private void interpolateResultList ( ArrayList < $F190112 > list ) { if $F186678 ( list ) $F665 $F101632 listPenPos = PathNodeUtils . calculatePenPosition ( list ) ; ArrayList < $F190112 > $F204 ( subList ) ; $F115 ( size , list ) $F190112 currentNode = null ; int i = NUM00 ; while ( i < size - NUM00 ) { currentNode = list . get ( i ) ; if ( ! isInterpolatableCommand ( currentNode . mType ) ) $F118993 ( i ) boolean validSequence = _BOOL ; int k = i ; for ( int j = i ; j < size && validSequence ; j ++ ) { if ( currentNode . mType == list . get ( j ) . mType ) { k = j ; if ( ! Arrays . equals ( currentNode . mParams , list . get ( j ) . mParams ) ) $F597 } else validSequence = _BOOL ; } if ( k - i > NUM00 ) { interpolateSubList ( list . subList ( i , k + NUM00 ) ) ; } i ++ ; } }
private void initTokenizer ( StreamTokenizer tokenizer ) { $F61733 ( tokenizer ) tokenizer . whitespaceChars ( NUM00 , ( NUM00 - NUM00 ) ) ; $F33902 ( tokenizer ) tokenizer . whitespaceChars ( NUM00 , NUM00 ) ; tokenizer . whitespaceChars ( NUM00 , NUM00 ) ; tokenizer . commentChar ( NUM00 ) ; tokenizer . whitespaceChars ( NUM00 , NUM00 ) ; $F70966 ( tokenizer ) $F70966 ( tokenizer ) tokenizer . eolIsSignificant ( _BOOL ) ; }
protected void illegalMessageReceived ( OFMessage m ) { String msg = getSwitchStateMessage ( m , NUM00 ) ; throw new SwitchStateException ( msg ) ; }
protected void run_ThreadSizeLoop $F72 throws Exception { for ( int i = NUM00 ; i <= NUM00 ; i += NUM00 ) { setNumWorkers ( i ) ; try { $F165308 ( Thread ) } $F887 } }
protected boolean read $F72 { if ( ! nReuseHeader ) { $F36253 ( Debug ) return readHeader ( ) ; } $F277754 ( tempData , nDataSize , nFieldOffset ) int $F18803 ( nReadBytes , poModule , tempData ) ; $F198866 ( System , pachData , nFieldOffset , tempData ) if ( nReadBytes != $F15690 ( nDataSize , nFieldOffset ) && nReadBytes == - NUM00 ) { return _BOOL ; } else if ( nReadBytes != $F15690 ( nDataSize , nFieldOffset ) ) $F24275 ( Debug , _BOOL ) return _BOOL ; }
$F1 public boolean lock $F72 { try { if ( ! FileFactory . isFileExist ( location , FileFactory . getFileType ( tmpPath ) ) ) { FileFactory . mkdirs ( location , FileFactory . getFileType ( tmpPath ) ) ; } String lockFilePath = location + CarbonCommonConstants . FILE_SEPARATOR + lockFile ; if ( ! FileFactory . isFileExist ( lockFilePath , FileFactory . getFileType ( location ) ) ) { FileFactory . createNewLockFile ( lockFilePath , FileFactory . getFileType ( location ) ) ; } $F10893 ( fileOutputStream , lockFilePath ) $F42861 ( channel , fileOutputStream ) try { fileLock = channel . tryLock ( ) ; } catch ( OverlappingFileLockException e ) { return _BOOL ; } if ( null != fileLock ) { return _BOOL ; } else { return _BOOL ; } } $F3092 ( _BOOL ) }
public void open ( int port ) throws IOException { connection = new DatagramSocket ( port ) ; connection . setSoTimeout ( timeout ) ; }
public String globalInfo $F72 $F11287
public MLResults execute ( Script script ) { ScriptExecutor scriptExecutor = new ScriptExecutor ( sparkMonitoringUtil ) ; scriptExecutor . setExplain ( explain ) ; scriptExecutor . setExplainLevel ( explainLevel ) ; scriptExecutor . setStatistics ( statistics ) ; scriptExecutor . setInit ( scriptHistoryStrings . isEmpty ( ) ) ; return execute ( script , scriptExecutor ) ; }
public void disable ( RichFormatterFeature feature ) $F106 ( features , feature )
public void removeEventListener ( ZWaveEventListener eventListener ) $F23075 ( zwaveEventListeners , eventListener )
private static double pythonTime $F72 { return $F165576 ( System ) ; }
$F28183 public final void add ( T ... newItems ) $F81861 ( add , Arrays , newItems )
public static String quoteIfJavaKeyword ( String name ) { return JVMModuleUtil . quoteIfJavaKeyword ( name ) ; }
public static Recipe fromCursor ( Cursor cursor ) { Recipe recipe = new Recipe $F8320 ; for ( $F90183 ( c , cursor ) ) { $F43881 ( columnName , cursor , c ) if ( columnName . equals ( RecipeTable . ID_COLUMN ) ) { recipe . id = cursor . getString ( c ) ; } else if ( columnName . equals ( RecipeTable . TITLE_COLUMN ) ) { recipe . setTitle ( cursor . getString ( c ) ) ; } else if $F197257 ( columnName , RecipeTable ) $F197260 ( recipe , cursor , c ) else if ( columnName . equals ( RecipeTable . PHOTO_COLUMN ) ) { recipe . setPhoto ( cursor . getString ( c ) ) ; } else if ( columnName . equals ( RecipeTable . PREP_TIME_COLUMN ) ) { recipe . setPrepTime ( cursor . getString ( c ) ) ; } } return recipe ; }
public static void checkState ( boolean expression , $F5466 Object errorMessage ) { if ( ! expression ) { throw new IllegalStateException $F45942 ( String , errorMessage ) ; } }
private static < T , ID > void addDropTableStatements ( DatabaseType databaseType , TableInfo < T , ID > tableInfo , $F3803 statements ) { $F10144 ( statementsBefore ) $F10144 ( statementsAfter ) for ( FieldType fieldType : tableInfo . getFieldTypes ( ) ) { databaseType . dropColumnArg ( fieldType , statementsBefore , statementsAfter ) ; } $F20818 ( sb ) $F84 ( sb ) databaseType . appendEscapedEntityName ( sb , tableInfo . getTableName ( ) ) ; $F84 ( sb ) statements . addAll ( statementsBefore ) ; $F40018 ( statements , sb ) statements . addAll ( statementsAfter ) ; }
public boolean isLocked $F72 $F3387 ( queue )
public long cguest_time $F72 $F12907 ( Long , fields )
private static ClassInfo findOrCreateClass ( String t ) { if $F2364 ( t ) { return ClassInfo . findOrCreateClass ( t ) ; } else { $F172220 ( baseType , t ) int level = ( t . length ( ) - t . indexOf ( NUM00 ) ) / NUM00 ; String s = NUM00 ; for ( $F1316 ( i , level ) ) s += NUM00 ; if $F3057 ( baseType ) s += NUM00 ; else if $F3057 ( baseType ) s += NUM00 ; else s += NUM00 + baseType + NUM00 ; return ClassInfo . findOrCreateClass ( s ) ; } }
$F106801 ( errorInStatus1 , editMode , statusText1 , editStatus1 , stdStatus1 , _BOOL , resetNotes2 )
$F79740 public int sceRtcSetTick ( TPointer timeAddr , TPointer64 ticksAddr ) { long ticks = ticksAddr . getValue ( ) - rtcMagicOffset ; ScePspDateTime time = ScePspDateTime . fromMicros ( ticks ) ; time . write ( timeAddr ) ; $F1082 }
public static void write ( File file , CharSequence data , Charset encoding , boolean append ) throws IOException { String str = $F48364 ( data ) ; writeStringToFile ( file , str , encoding , append ) ; }
private void populateNavDrawer $F72 { $F725 ( mNavDrawerItems ) mNavDrawerItems . add ( NAVDRAWER_ITEM_HOME ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_SEPARATOR ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_MY_FOLLOWING ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_MY_SHOTS ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_MY_BUCKETS ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_MY_PROJECTS ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_MY_TEAMS ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_MY_LIKES ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_SEPARATOR_SPECIAL ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_SETTINGS ) ; createNavDrawerItems ( ) ; }
private BigInteger oddModPow ( BigInteger y , BigInteger z ) { $F9506 ( y , ONE , this ) $F116 ( signum , ZERO ) $F2027 base = mag . clone ( ) ; $F2027 exp = y . mag ; $F2027 mod = z . mag ; int modLen = mod . length ; if $F69047 ( modLen ) { $F65716 ( x , modLen ) $F135 ( System , mod , x , modLen ) mod = x ; modLen ++ ; } int wbits = NUM00 ; int ebits = bitLength ( exp , exp . length ) ; if ( ( ebits != NUM00 ) || ( exp [ NUM00 ] != NUM00 ) ) { while ( ebits > bnExpModThreshTable [ wbits ] ) { wbits ++ ; } } int tblmask = NUM00 < < wbits ; $F26352 table = new int [ tblmask ] [ ] ; for ( $F119 ( i , tblmask ) ) $F134093 ( table , i , modLen ) long n0 = ( mod [ modLen - NUM00 ] & LONG_MASK ) + ( ( mod [ modLen - NUM00 ] & LONG_MASK ) < < NUM00 ) ; long inv = - MutableBigInteger . inverseMod64 ( n0 ) ; $F2027 a = leftShift ( base , base . length , modLen < < NUM00 ) ; MutableBigInteger q = new MutableBigInteger $F72 , a2 = new MutableBigInteger ( a ) , b2 = new MutableBigInteger ( mod ) ; $F5896 ( b2 ) MutableBigInteger r = a2 . divide ( b2 , q ) ; table [ NUM00 ] = r . toIntArray ( ) ; if ( table [ NUM00 ] . length < modLen ) { int offset = modLen - table [ NUM00 ] . length ; $F4120 ( t2 , modLen ) System . arraycopy ( table [ NUM00 ] , NUM00 , t2 , offset , table [ NUM00 ] . length ) ; table [ NUM00 ] = t2 ; } $F2027 b = montgomerySquare ( table [ NUM00 ] , mod , modLen , inv , null ) ; $F2027 t = Arrays . copyOf ( b , modLen ) ; for ( $F119 ( i , tblmask ) ) { table [ i ] = montgomeryMultiply ( t , table [ i - NUM00 ] , mod , modLen , inv , null ) ; } int bitpos = NUM00 < < ( ( ebits - NUM00 ) & $F34182 ) ; int buf = NUM00 ; int elen = exp . length ; int eIndex = NUM00 ; for ( $F9993 ( i , wbits ) ) { buf = ( buf < < NUM00 ) | ( ( ( exp [ eIndex ] & bitpos ) != NUM00 ) ? NUM00 : NUM00 ) ; bitpos >>>= NUM00 ; if ( bitpos == NUM00 ) { eIndex ++ ; bitpos = NUM00 < < $F34182 ; elen -- ; } } int multpos = ebits ; ebits -- ; boolean isone = _BOOL ; multpos = ebits - wbits ; while $F14827 ( buf ) { buf >>>= NUM00 ; multpos ++ ; } $F2027 mult = table [ buf > > > NUM00 ] ; buf = NUM00 ; if ( multpos == ebits ) isone = _BOOL ; while ( _BOOL ) { ebits -- ; buf <<= NUM00 ; if ( elen != NUM00 ) { buf |= ( ( exp [ eIndex ] & bitpos ) != NUM00 ) ? NUM00 : NUM00 ; bitpos >>>= NUM00 ; if ( bitpos == NUM00 ) { eIndex ++ ; bitpos = NUM00 < < $F34182 ; elen -- ; } } if $F18594 ( buf , tblmask ) { multpos = ebits - wbits ; while $F14827 ( buf ) { buf >>>= NUM00 ; multpos ++ ; } mult = table [ buf > > > NUM00 ] ; buf = NUM00 ; } if ( ebits == multpos ) { if ( isone ) { $F154779 ( b , mult ) isone = _BOOL ; } else { t = b ; a = montgomeryMultiply ( t , mult , mod , modLen , inv , a ) ; t = a ; a = b ; b = t ; } } if ( ebits == NUM00 ) $F597 if ( ! isone ) { t = b ; a = montgomerySquare ( t , mod , modLen , inv , a ) ; t = a ; a = b ; b = t ; } } $F2027 t2 = new int [ NUM00 * modLen ] ; System . arraycopy ( b , NUM00 , t2 , modLen , modLen ) ; b = montReduce ( t2 , mod , modLen , ( int ) inv ) ; t2 = Arrays . copyOf ( b , modLen ) ; return $F105487 ( t2 ) ; }
public void runTest $F72 throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; String childValue ; int childLength ; $F236 ( doc , load , _BOOL ) $F237 ( elementList , doc ) $F238 ( nameNode , elementList ) $F241 ( child , nameNode ) $F4055 ( childValue , child ) $F3935 ( childLength , childValue ) assertEquals ( NUM00 , NUM00 , childLength ) ; }
public int nextToken $F72 { while ( index < length && Character . isWhitespace ( expr [ index ] ) ) { index ++ ; } tokenVal = null ; if ( index == length ) return TOKEN_END ; int start = index ; char currentChar = expr [ index ] ; char nextChar = $F2858 ; index ++ ; if ( index < length ) nextChar = expr [ index ] ; switch ( currentChar ) { $F1262 return TOKEN_LBRACE ; $F1262 return TOKEN_RBRACE ; $F1262 return TOKEN_EQ ; $F1262 if ( nextChar == NUM00 ) { index ++ ; return TOKEN_NOT_EQ ; } return TOKEN_NOT ; $F1262 if ( nextChar == NUM00 ) { index ++ ; return TOKEN_OR ; } $F597 $F1262 if ( nextChar == NUM00 ) { index ++ ; return TOKEN_AND ; } $F597 $F1262 if ( nextChar == NUM00 ) { index ++ ; return TOKEN_GE ; } return TOKEN_GT ; $F1262 if ( nextChar == NUM00 ) { index ++ ; return TOKEN_LE ; } return TOKEN_LT ; $F2448 } int end = index ; if $F37111 ( currentChar ) { char endChar = currentChar ; boolean escaped = _BOOL ; start ++ ; for ( ; index < length ; index ++ ) { if ( expr [ index ] == NUM00 && ! escaped ) $F34544 ( escaped , _BOOL ) if ( expr [ index ] == endChar && ! escaped ) $F597 escaped = _BOOL ; } end = index ; index ++ ; } else if ( currentChar == NUM00 ) { char endChar = currentChar ; boolean escaped = _BOOL ; for ( ; index < length ; index ++ ) { if ( expr [ index ] == NUM00 && ! escaped ) $F34544 ( escaped , _BOOL ) if ( expr [ index ] == endChar && ! escaped ) $F597 escaped = _BOOL ; } end = ++ index ; } else { for ( ; index < length ; index ++ ) { if ( isMetaChar ( expr [ index ] ) ) $F597 } end = index ; } this . tokenVal = new String ( expr , start , end - start ) ; return TOKEN_ "STRING" ; }
public static Byte [ ] valuesOf $F97 ( array ) { Byte [ ] dest = new Byte [ array . length ] ; for ( $F1139 ( i , array ) ) $F11856 ( dest , i , Byte , array ) return dest ; }
public void auditCallhome ( OperationTypeEnum auditType , String operationalStatus , String description , Object ... descparams ) { _auditMgr . recordAuditLog ( null , null , EVENT_SERVICE_TYPE , auditType , System . currentTimeMillis ( ) , operationalStatus , description , descparams ) ; }
public static float mean $F11671 ( data , startIndex , endIndex ) { float mean = NUM00 ; int total = NUM00 ; $F89002 ( startIndex , Math ) startIndex = Math . min ( startIndex , data . length - NUM00 ) ; $F89002 ( endIndex , Math ) endIndex = Math . min ( endIndex , data . length - NUM00 ) ; $F46170 ( startIndex , endIndex ) for ( int i = startIndex ; i <= endIndex ; i ++ ) { if $F1998 ( Float , data , i ) $F824 mean += data [ i ] ; total ++ ; } mean /= total ; return mean ; }
public static String constructNTPtime ( long date ) { long ntpTime = NUM00 ; long startTime = ( date / SECONDS_TO_MILLISECONDS_CONVERSION_RATE ) + ntpTime ; $F33236 ( String , startTime ) }
protected MediaType selectMediaType ( ServerWebExchange exchange , List < MediaType > producibleTypes ) { List < MediaType > acceptableTypes = getAcceptableTypes ( exchange ) ; producibleTypes = getProducibleTypes ( exchange , producibleTypes ) ; Set < MediaType > $F22304 ( compatibleMediaTypes ) ; for ( MediaType acceptable : acceptableTypes ) { for ( MediaType producible : producibleTypes ) { if ( acceptable . isCompatibleWith ( producible ) ) $F18351 ( compatibleMediaTypes , selectMoreSpecificMediaType , acceptable , producible ) } } List < MediaType > $F10252 ( result , compatibleMediaTypes ) ; MediaType . sortBySpecificityAndQuality ( result ) ; for ( MediaType mediaType : compatibleMediaTypes ) { if ( mediaType . isConcrete ( ) ) { return mediaType ; } else if ( mediaType . equals ( MediaType . ALL ) || mediaType . equals ( MEDIA_TYPE_APPLICATION_ALL ) ) { return MediaType . APPLICATION_OCTET_STREAM ; } } $F1274 }
public void paintBorder $F6065 ( c , g , x , y , width , height ) { if ( ! ( c instanceof JPopupMenu ) ) $F932 $F58112 ( origFont , g ) $F86453 ( origColor , g ) JPopupMenu popup = ( JPopupMenu ) c ; $F10771 ( title , popup ) $F2329 ( title ) g . setFont ( font ) ; FontMetrics fm = SwingUtilities2 . getFontMetrics ( popup , g , font ) ; $F2047 ( fontHeight , fm ) int descent = fm . getDescent ( ) ; int ascent = fm . getAscent ( ) ; $F101628 ( textLoc ) int stringWidth = SwingUtilities2 . stringWidth ( popup , fm , title ) ; textLoc . y = y + ascent + TEXT_SPACING ; textLoc . x = x + $F70329 ( width , stringWidth ) ; g . setColor ( background ) ; g . fillRect ( textLoc . x - TEXT_SPACING , textLoc . y - ( fontHeight - descent ) , stringWidth + ( NUM00 * TEXT_SPACING ) , fontHeight - descent ) ; g . setColor ( foreground ) ; SwingUtilities2 . drawString ( popup , g , title , textLoc . x , textLoc . y ) ; MotifGraphicsUtils . drawGroove ( g , x , textLoc . y + TEXT_SPACING , width , GROOVE_HEIGHT , shadowColor , highlightColor ) ; g . setFont ( origFont ) ; g . setColor ( origColor ) ; }
public void ensureCapacity ( int mincap ) { if ( mincap > array . length ) { int newcap = ( $F28143 ( array ) > > NUM00 ) + NUM00 ; $F2027 olddata = array ; array = new int [ newcap < mincap ? mincap : newcap ] ; $F135 ( System , olddata , array , size ) } }
public void invalidateAndUnmap ( ByteBuffer ... bufs ) throws IOException { if ( cleaner != null ) { invalidated = _BOOL ; barrier . lazySet ( NUM00 ) ; $F5756 ( Thread ) for ( ByteBuffer b : bufs ) { cleaner . freeBuffer ( resourceDescription , b ) ; } } }
public int addDir ( File file ) { if $F1906 ( file ) $F1083 $F806 names = getNames ( getFiles ( file , NUM00 ) ) ; loadClass ( file , names ) ; $F1082 }
$F32357 ( Class , _BOOL )
$F1 public boolean equals ( Object obj ) { $F3627 ( obj , this , _BOOL ) if ( ! ( obj instanceof BubbleXYItemLabelGenerator ) ) { return _BOOL ; } $F3067 ( super , obj , _BOOL ) BubbleXYItemLabelGenerator that = ( BubbleXYItemLabelGenerator ) obj ; if ( ! ObjectUtilities . equal ( this . zFormat , that . zFormat ) ) { return _BOOL ; } if ( ! ObjectUtilities . equal ( this . zDateFormat , that . zDateFormat ) ) { return _BOOL ; } return _BOOL ; }
public static boolean hasElementChild ( Node node ) { $F9040 ( nl , node ) Node child = null ; $F19322 ( length , nl ) for ( $F119 ( i , length ) ) { child = nl . item ( i ) ; if $F61358 ( child , Node ) { return _BOOL ; } } return _BOOL ; }
public void delItem ( int index ) { synchronized ( getMenuTreeLock ( ) ) { if ( selectedIndex == index ) $F99517 ( selectItem , _BOOL ) else if ( selectedIndex > index ) { selectedIndex -- ; } if $F1765 ( index , items ) $F106 ( items , index ) else { if $F58998 ( log , PlatformLogger ) { log . fine ( $F57675 ( index , items ) ) ; } } } updateSize ( ) ; }
public static int countCSSPrimitiveNames $F72 $F1652 ( ALL_PRIMITIVE_PROPERTY_NAMES )
$F109836 ( v , printString )
private void checkPermission ( Object object , NamespacePermissionEnum [ ] permissions , List < AccessDeniedException > accessDeniedExceptions ) { if ( object != null ) { if ( object instanceof Collection ) { $F7922 $F7924 ( collection , object ) ; for ( Object element : collection ) { checkPermission ( element , permissions , accessDeniedExceptions ) ; } } else if ( object instanceof String ) { try { checkPermission ( ( String ) object , permissions ) ; } catch ( AccessDeniedException accessDeniedException ) $F207 ( accessDeniedExceptions , accessDeniedException ) } else { throw new IllegalStateException ( String . format ( NUM00 , $F10062 , Collection . class , object . getClass ( ) ) ) ; } } }
private void displayAllStringDefinedInStringXml $F72 { SimpleIconFontTextView textView = ( SimpleIconFontTextView ) findViewById ( R . id . text_view_2 ) ; $F24645 ( list ) list . add ( getString ( R . string . cubeicon_gems_logo ) ) ; list . add ( getString ( R . string . cubeicon_android ) ) ; list . add ( getString ( R . string . cubeicon_heart ) ) ; String text = TextUtils . join ( NUM00 , list ) ; textView . setText ( text ) ; }
private static Intent createMapActivityIntent ( Context context , URLSpan [ ] urlSpans ) { for ( $F1139 ( span_i , urlSpans ) ) { URLSpan urlSpan = urlSpans [ span_i ] ; String urlString = urlSpan . getURL ( ) ; if $F7311 ( urlString , GEO_PREFIX ) { Intent geoIntent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( urlString ) ) ; $F111932 ( geoIntent , Intent ) return geoIntent ; } } $F1274 }
private StringBuilder generateParameters $F72 { $F83 ( parameters ) if ( filterMap == null && expandParameters == null ) { return parameters ; } $F84 ( parameters ) int filterParameterCounter = NUM00 ; if $F1032 ( filterMap ) { parameters . append ( FILTER_PREFIX ) ; for ( $F19318 ( filterEntry , filterMap ) ) { parameters . append ( String . format ( NUM00 , filterEntry . getKey ( ) , filterEntry . getValue ( ) ) ) ; if ( ++ filterParameterCounter < filterMap . size ( ) ) $F86 ( parameters ) } if ( expandParameters != null ) $F86 ( parameters ) } if ( expandParameters != null ) { parameters . append ( EXPAND_PREFIX ) ; $F19402 ( iterator , expandParameters ) parameters . append ( String . format ( NUM00 , iterator . next ( ) ) ) ; while $F2921 ( iterator ) { parameters . append ( String . format ( NUM00 , iterator . next ( ) ) ) ; } } return parameters ; }
public void writeExif ( Bitmap bmap , OutputStream exifOutStream ) throws IOException { $F26831 ( bmap , exifOutStream , NULL_ARGUMENT_ ) OutputStream s = getExifWriterStream ( exifOutStream ) ; $F26834 ( bmap , Bitmap , s ) $F1206 ( s ) }
$F187098 ( index , length , System , data , badIndex )
public static $F147000 @ SlashedClassName String fromFieldSignature ( String signature ) { if $F4435 ( signature ) $F1337 $F16082 ( signature ) }
private void paintPreview ( int dx , int dy , float zoomfactor ) { if ( image != null ) { Graphics2D g2 = ( Graphics2D ) getGraphics ( ) ; UColor bg = renderer . getBackgroundColor ( ) ; g2 . setBackground ( new Color ( bg . getRed ( ) , bg . getGreen ( ) , bg . getBlue ( ) , bg . getAlpha ( ) ) ) ; int newWidth = Math . round ( image . getWidth ( null ) * zoomfactor ) ; int newHeight = ( int ) Math . round ( image . getHeight ( null ) * zoomfactor ) ; g2 . drawImage ( image , dx , dy , newWidth , newHeight , null ) ; if ( dx > NUM00 ) g2 . clearRect ( NUM00 , NUM00 , dx , getHeight ( ) ) ; else g2 . clearRect ( getWidth ( ) + dx , NUM00 , getWidth ( ) , getHeight ( ) ) ; if ( dy > NUM00 ) g2 . clearRect ( NUM00 , NUM00 , getWidth ( ) , dy ) ; else g2 . clearRect ( NUM00 , getHeight ( ) + dy , getWidth ( ) , getHeight ( ) ) ; } }
@ RequiresPermission ( Manifest . permission . CAMERA ) public CameraSource start $F72 throws IOException { synchronized ( mCameraLock ) { $F20092 ( mCamera , this ) mCamera = createCamera ( ) ; if ( $F20093 ( Build ) ) { mDummySurfaceTexture = new SurfaceTexture ( DUMMY_TEXTURE_NAME ) ; mCamera . setPreviewTexture ( mDummySurfaceTexture ) ; } else { mDummySurfaceView = new SurfaceView ( mContext ) ; mCamera . setPreviewDisplay ( mDummySurfaceView . getHolder ( ) ) ; } mCamera . startPreview ( ) ; $F20103 ( mProcessingThread , mFrameProcessor ) mFrameProcessor . setActive ( _BOOL ) ; $F2346 ( mProcessingThread ) } return this ; }
$F52361 ( mCategories , mValues )
public static List < $F31488 > partitionVariable ( $F31488 arr , int chunk ) { int count = NUM00 ; List < $F31488 > ret = new ArrayList < $F31488 > $F72 ; while $F1765 ( count , arr ) { $F31488 sublist = arr . subList ( count , count + chunk ) ; count += chunk ; ret . add ( sublist ) ; } for ( $F31488 lists : ret ) { if $F10255 ( lists , chunk ) ret . remove ( lists ) ; } return ret ; }
private static void updateWindowUI ( Window window ) { SwingUtilities . updateComponentTreeUI ( window ) ; Window ownedWins [ ] = window . getOwnedWindows ( ) ; for ( Window ownedWin : ownedWins ) { updateWindowUI ( ownedWin ) ; } }
public void clearResults $F72 { if ( resultList != null ) { $F725 ( resultList ) $F4176 ( mAdapter ) } listener . onSearchCleared ( ) ; }
public ArrayList < ConstraintWidget > findWidgets ( WidgetContainer container , int x , int y , int width , int height ) { ArrayList < ConstraintWidget > $F204 ( found ) ; Rectangle area = new Rectangle ( x , y , width , height ) ; for ( ConstraintWidget widget : container . getChildren ( ) ) { WidgetCompanion companion = ( WidgetCompanion ) widget . getCompanionWidget ( ) ; WidgetDecorator decorator = companion . getWidgetDecorator ( WidgetDecorator . BLUEPRINT_STYLE ) ; if ( $F181253 ( decorator ) ) $F1448 Rectangle bounds = new Rectangle ( widget . getDrawX ( ) , widget . getDrawY ( ) , widget . getWidth ( ) , widget . getHeight ( ) ) ; if $F82382 ( area , bounds ) $F207 ( found , widget ) } return found ; }
public final void printSymbol ( CharSequence text ) throws IOException { if ( text == null ) $F1210 ( appendAscii ) else if $F1277 ( text ) { throw new EmptySymbolException $F72 ; } else if ( symbolNeedsQuoting ( text , _BOOL ) ) { appendAscii ( NUM00 ) ; printCodePoints ( text , SYMBOL_ESCAPE_CODES ) ; appendAscii ( NUM00 ) ; } else { appendAscii ( text ) ; } }
public static ShoppingCartItem makeItem ( Integer cartLocation , GenericValue product , BigDecimal selectedAmount , BigDecimal quantity , BigDecimal unitPrice , Timestamp reservStart , BigDecimal reservLength , BigDecimal reservPersons , Timestamp shipBeforeDate , Timestamp shipAfterDate , $F128868 additionalProductFeatureAndAppls , $F2100 ( attributes ) , String prodCatalogId , ProductConfigWrapper configWrapper , String itemType , ShoppingCart . ShoppingCartItemGroup itemGroup , LocalDispatcher dispatcher , ShoppingCart cart , Boolean triggerExternalOpsBool , Boolean triggerPriceRulesBool , GenericValue parentProduct , Boolean skipInventoryChecks , Boolean skipProductChecks ) throws CartItemModifyException { return makeItem ( cartLocation , product , selectedAmount , quantity , unitPrice , reservStart , reservLength , reservPersons , null , null , shipBeforeDate , shipAfterDate , additionalProductFeatureAndAppls , attributes , prodCatalogId , configWrapper , itemType , itemGroup , dispatcher , cart , triggerExternalOpsBool , triggerPriceRulesBool , parentProduct , skipInventoryChecks , skipProductChecks ) ; }
$F1 public String toString $F72 { Map $F120448 sortedTable = InferenceUtils . getNBest ( table , Math . max ( $F33338 ( table ) ) ) ; String str = NUM00 ; for ( Entry $F120448 entry : sortedTable . entrySet ( ) ) { String prob = StringUtils . getShortForm ( entry . getValue ( ) ) ; str += $F25954 ( entry ) + prob + NUM00 ; } return $F4012 ( str ) ? $F4019 ( str ) : str ; }
protected final void updateBorderText ( final String text ) { $F1832 ( Preconditions , text ) m_titledBorder . setTitle ( text ) ; updateUI ( ) ; }
private void addClasses ( $F63826 ( classes ) , HashSet $F69669 result , String fieldName ) { if $F12414 ( classes ) Error . classesAbsent ( fieldName , configuredClass ) ; for ( $F6969 classe : classes ) result . add ( classe ) ; }
public void resetReferences $F72 { $F10834 ( _refs ) }
public static BigInteger decodeMPI $F75287 ( mpi , hasLength ) { $F96 buf ; if ( hasLength ) { int length = ( int ) readUint32BE ( mpi , NUM00 ) ; $F1325 ( buf , length ) $F135 ( System , mpi , buf , length ) } else buf = mpi ; if $F9634 ( buf ) return BigInteger . ZERO ; boolean isNegative = $F117560 ( buf ) ; if ( isNegative ) buf [ NUM00 ] &= NUM00 ; $F9144 ( result , buf ) return isNegative ? result . negate ( ) : result ; }
public void schemaChanged ( String serviceName , String version ) $F23075 ( mapRealmToFormat , ROOT )
public void sort ( DTMIterator v , Vector keys , XPathContext support ) throws $F1872 { m_keys = keys ; $F19322 ( n , v ) $F6518 ( nodes ) for ( $F119 ( i , n ) ) { NodeCompareElem elem = new NodeCompareElem ( v . item ( i ) ) ; nodes . addElement ( elem ) ; } $F6518 ( scratchVector ) mergesort ( nodes , scratchVector , NUM00 , n - NUM00 , support ) ; for ( $F119 ( i , n ) ) { v . setItem ( ( $F82324 ( nodes , i ) ) . m_node , i ) ; } v . setCurrentPos ( NUM00 ) ; }
protected DateTimeData parse ( String str ) throws SchemaDateTimeException { DateTimeData date = new DateTimeData ( str , this ) ; $F1749 ( len , str ) date . year = YEAR ; date . day = DAY ; if ( $F4434 ( str ) || $F4434 ( str ) ) { throw new SchemaDateTimeException ( NUM00 + str ) ; } int stop = NUM00 ; date . month = parseInt ( str , NUM00 , stop ) ; if ( str . length ( ) >= stop + NUM00 && str . charAt ( stop ) == NUM00 && $F10825 ( str , stop ) ) { stop += NUM00 ; } if ( stop < len ) { if ( ! isNextCharUTCSign ( str , stop , len ) ) { throw new SchemaDateTimeException ( NUM00 + str ) ; } else { getTimeZone ( str , date , stop , len ) ; } } validateDateTime ( date ) ; saveUnnormalized ( date ) ; if ( date . utc != NUM00 && date . utc != NUM00 ) { normalize ( date ) ; } date . position = NUM00 ; return date ; }
private void addToQueue ( SerialMessage serialMessage ) { $F2329 ( serialMessage ) if ( ! msgQueue . contains ( serialMessage ) && msgQueue . remainingCapacity ( ) > NUM00 ) $F207 ( msgQueue , serialMessage ) sendMessage ( ) ; }
private DBID stringToDBID ( String query ) { return DBIDUtil . importInteger ( Integer . valueOf ( query ) ) ; }
$F1 public final void writeShort ( int v ) throws IOException { $F68873 ( work , v ) $F8045 ( work , v ) $F105801 ( dis , work ) }
final public void println ( long v ) { Writer out = this . out ; $F8249 ( out ) print ( v ) ; try $F53422 ( out , _newline ) $F53427 ( log , Level , e ) }
public ThriftServiceMetadata $F60993 ( serviceType ) { requireNonNull ( serviceType , NUM00 ) ; interfaces = init ( null , Collections . singleton ( serviceType ) ) ; }
public WritableRaster createCompatibleWritableRaster ( int w , int h ) { if ( w <= NUM00 || h <= NUM00 ) { throw new RasterFormatException ( NUM00 + ( ( w <= NUM00 ) ? NUM00 : NUM00 ) ) ; } SampleModel sm = sampleModel . createCompatibleSampleModel ( w , h ) ; return new BytePackedRaster ( sm , $F69159 ) ; }
public static Response invalidEntity ( ConstraintViolationException e ) { $F83 ( errorMessage ) boolean firstPass = _BOOL ; for ( ConstraintViolation error : e . getConstraintViolations ( ) ) { $F48750 ( firstPass , errorMessage ) errorMessage . append ( String . format ( NUM00 , error . getPropertyPath ( ) , error . getMessage ( ) , error . getInvalidValue ( ) ) ) ; firstPass = _BOOL ; } ExternalException externalException = new ExternalException ( ErrorCode . INVALID_ENTITY , errorMessage . toString ( ) , null ) ; return externalException ( externalException ) ; }
public String checkStartBlock ( int mode ) { if $F585 ( log ) log . debug ( NUM00 + getDisplayName ( ) + NUM00 ) ; BlockOrder bo = _orders . get ( NUM00 ) ; OBlock block = bo . getBlock ( ) ; String msg = block . allocate ( this ) ; $F21525 ( msg ) msg = bo . setPath ( this ) ; $F21525 ( msg ) int state = block . getState ( ) ; if ( ( state & OBlock . DARK ) != NUM00 || _tempRunBlind ) { msg = Bundle . getMessage ( NUM00 , block . getDisplayName ( ) ) ; } else if ( ( state & OBlock . OCCUPIED ) == NUM00 ) { if ( mode == MODE_LEARN ) { msg = NUM00 ; } else { msg = NUM00 ; } msg = Bundle . getMessage ( msg , getTrainName ( ) , block . getDisplayName ( ) ) ; } else { TrackerTableAction . stopTrackerIn ( block ) ; } return msg ; }
private void parseSwitch ( int indent , boolean firstContent , String header , Layout layout , List < Elem > elems ) { TokenStream tokens = new TokenStream ( header ) ; Elem selector = parseExpr ( tokens ) ; tokens . checkAtEnd ( ) ; ImmutableList . Builder < Case > cases = ImmutableList . builder ( ) ; List < Elem > defaultElems = null ; boolean done ; String line = getNextLine ( ) ; $F275 ( matcher , COMMAND_LINE , line ) String command ; String rest ; if $F281 ( matcher ) { command = matcher . group ( COMMAND_NAME_GROUP ) ; rest = line . substring ( matcher . end ( ) ) ; done = _BOOL ; } else { error ( NUM00 ) ; done = _BOOL ; command = null ; rest = null ; } while ( ! done ) { switch ( command ) { case END_COMMAND : checkHeaderEmpty ( command , rest ) ; done = _BOOL ; $F597 case DEFAULT_COMMAND : checkHeaderEmpty ( command , rest ) ; if ( defaultElems != null ) $F1210 ( error ) defaultElems = parseUntil ( indent , layout , END_COMMAND ) ; command = lastTerminator ; rest = lastTerminatorHeader ; done = lastTerminator == null ; $F597 case CASE_COMMAND : tokens = new TokenStream ( rest ) ; Elem value = parseExpr ( tokens ) ; tokens . checkAtEnd ( ) ; List < Elem > caseElems = parseUntil ( indent , layout , END_COMMAND , CASE_COMMAND , DEFAULT_COMMAND ) ; if ( value != null ) { cases . add ( Case . create ( value , caseElems ) ) ; } command = lastTerminator ; rest = lastTerminatorHeader ; done = lastTerminator == null ; $F597 $F1267 unexpectedCommandError ( command ) ; done = _BOOL ; $F597 } } if ( selector != null ) { elems . add ( Block . create ( ! firstContent , Switch . create ( input . location ( ) , selector , cases . build ( ) , defaultElems ) ) ) ; } }
public void init ( String prefix , $F267681 url ) { try { java . io . InputStream in = url . openStream ( ) ; $F2697 ( props ) props . load ( in ) ; init ( getLayers ( prefix , props ) ) ; } catch ( java . net . MalformedURLException murle ) { $F30524 ( logger , url ) } catch ( $F3258 e ) $F18144 ( logger ) }
boolean suppressedBy ( DNSIncoming msg ) { try { for ( DNSRecord answer : msg . getAllAnswers ( ) ) $F283363 ( suppressedBy , answer , _BOOL ) return _BOOL ; } catch ( ArrayIndexOutOfBoundsException e ) { logger . log ( Level . WARNING , NUM00 + msg + NUM00 , e ) ; return _BOOL ; } }
public static Properties createProperties ( $F27504 ( map ) ) { $F2697 ( properties ) if ( ! $F4251 ( map ) ) { for ( $F3475 ( entry , map ) ) { properties . setProperty ( $F15245 ( entry ) ) ; } } return properties ; }
public Node selectFirst ( String query ) { $F27878 selectedNodes = select ( query ) ; $F4892 ( selectedNodes ) $F38159 ( selectedNodes ) }
public static $F806 stringArrayFromProperties ( Properties p , String propName , String tok ) { $F10127 ( ret ) $F7601 ( raw , p , propName ) if $F22 ( raw ) { try { $F14497 ( token , raw , tok ) $F17729 ( numPaths , token ) $F58180 ( ret , numPaths ) for ( $F119 ( i , numPaths ) ) { ret [ i ] = token . nextToken ( ) ; } return ret ; } catch ( $F104572 e ) $F302 ( e ) } return ret ; }
public void generate $F2026 ( x1 , y1 , x2 , y2 ) { $F101628 ( midPoint ) $F101628 ( arcCenter ) Point2D $F13619 ( peakPoint ) ; double distance = Math . sqrt ( Math . pow ( Math . abs ( y2 - y1 ) , NUM00 ) + Math . pow ( Math . abs ( x2 - x1 ) , NUM00 ) ) ; double straightLineSlope = Math . atan ( $F250385 ( y2 , y1 ) / $F250385 ( x2 , x1 ) ) ; double inverseSlope = straightLineSlope - ( Math . PI / NUM00 ) ; if $F22503 ( Debug ) { Debug . output ( NUM00 + Math . toDegrees ( straightLineSlope ) + NUM00 + distance + NUM00 ) ; } midPoint . setLocation ( x1 + $F70329 ( x2 , x1 ) , y1 + $F70329 ( y2 , y1 ) ) ; if $F22503 ( Debug ) { Debug . output ( $F3905 ( x1 , y1 , x2 , y2 ) + midPoint . x + NUM00 + midPoint . y + NUM00 ) ; } $F54226 ( arccos , Math , arcAngle ) double arcRadius ; if ( arccos != NUM00 ) { arcRadius = distance / Math . sqrt ( NUM00 * ( NUM00 - Math . cos ( arcAngle ) ) ) ; } else { arcRadius = distance / Math . sqrt ( NUM00 ) ; } $F32927 ( Debug , arcRadius ) double x = arcRadius - arcRadius * Math . cos ( arcAngle ) ; double rPrime = ( distance / NUM00 ) * ( Math . sqrt ( NUM00 - Math . pow ( x / distance , NUM00 ) ) ) / Math . sin ( arcAngle / NUM00 ) ; $F32927 ( Debug , rPrime ) int direction = NUM00 ; if ( arcUp ) direction = - NUM00 ; arcCenter . x = midPoint . x + ( direction * ( int ) $F68927 ( rPrime , Math , inverseSlope ) ) ; arcCenter . y = midPoint . y + ( direction * ( int ) $F68922 ( rPrime , Math , inverseSlope ) ) ; if $F22503 ( Debug ) { $F18535 ( Debug ) arcGraphics = new OMGraphicList $F72 ; double dist1 = Math . sqrt ( Math . pow ( ( double ) ( arcCenter . x - x1 ) , NUM00 ) + Math . pow ( ( double ) ( arcCenter . y - y1 ) , NUM00 ) ) ; double dist2 = Math . sqrt ( Math . pow ( ( double ) ( arcCenter . x - x2 ) , NUM00 ) + Math . pow ( ( double ) ( arcCenter . y - y2 ) , NUM00 ) ) ; Debug . output ( NUM00 + arcCenter . x + NUM00 + arcCenter . y + NUM00 + Math . toDegrees ( inverseSlope ) + NUM00 ) ; Debug . output ( NUM00 + dist1 + NUM00 + dist2 ) ; OMRect point1 = new OMRect ( x1 - NUM00 , y1 - NUM00 , x1 + NUM00 , y1 + NUM00 ) ; OMRect point2 = new OMRect ( x2 - NUM00 , y2 - NUM00 , x2 + NUM00 , y2 + NUM00 ) ; OMRect arcPoint = new OMRect ( arcCenter . x - NUM00 , arcCenter . y - NUM00 , arcCenter . x + NUM00 , arcCenter . y + NUM00 ) ; point1 . setLinePaint ( OMColor . red ) ; point2 . setLinePaint ( OMColor . red ) ; arcPoint . setLinePaint ( OMColor . blue ) ; arcGraphics . add ( point1 ) ; arcGraphics . add ( point2 ) ; arcGraphics . add ( arcPoint ) ; OMLine line1 = new OMLine ( x1 , y1 , x2 , y2 ) ; OMLine line2 = new OMLine ( midPoint . x , midPoint . y , arcCenter . x , arcCenter . y ) ; arcGraphics . add ( line1 ) ; arcGraphics . add ( line2 ) ; } int realCount = NUM00 ; double startSlope = getRealAngle ( $F10740 ( arcCenter ) , $F10783 ( arcCenter ) , x1 , y1 ) ; double endSlope = getRealAngle ( $F10740 ( arcCenter ) , $F10783 ( arcCenter ) , x2 , y2 ) ; double smallSlope , largeSlope ; double angleIncrement ; smallSlope = ( startSlope > endSlope ) ? endSlope : startSlope ; largeSlope = ( smallSlope == startSlope ) ? endSlope : startSlope ; while ( Math . abs ( smallSlope - largeSlope ) > Math . PI ) { if ( Math . abs ( largeSlope - smallSlope - Math . PI ) < NUM00 ) $F5153 $F36253 ( Debug ) double tmpSlope = smallSlope + MoreMath . TWO_PI ; smallSlope = largeSlope ; largeSlope = tmpSlope ; } if ( MoreMath . approximately_equal ( arcAngle , Math . PI ) && arcUp ) { $F36253 ( Debug ) double tmpSlope = smallSlope + MoreMath . TWO_PI ; smallSlope = largeSlope ; largeSlope = tmpSlope ; } if ( Math . abs ( y2 - y1 ) < Math . abs ( x2 - x1 ) ) { angleIncrement = Math . PI / Math . abs ( x2 - x1 ) ; } else { angleIncrement = Math . PI / Math . abs ( y2 - y1 ) ; } int numPoints = ( int ) ( Math . abs ( smallSlope - largeSlope ) / angleIncrement + NUM00 ) ; $F25850 ( xPoints , numPoints ) $F25850 ( yPoints , numPoints ) if $F22503 ( Debug ) { Debug . output ( NUM00 + startSlope + NUM00 + Math . toDegrees ( startSlope ) + NUM00 + endSlope + NUM00 + Math . toDegrees ( endSlope ) + NUM00 ) ; Debug . output ( NUM00 + smallSlope + NUM00 + Math . toDegrees ( smallSlope ) + NUM00 + largeSlope + NUM00 + Math . toDegrees ( largeSlope ) + NUM00 + angleIncrement + NUM00 + Math . toDegrees ( angleIncrement ) + NUM00 ) ; } reversed = _BOOL ; while ( smallSlope < largeSlope && realCount < numPoints ) { xPoints [ realCount ] = arcCenter . x + ( int ) $F68927 ( arcRadius , Math , smallSlope ) ; yPoints [ realCount ] = arcCenter . y + ( int ) $F68922 ( arcRadius , Math , smallSlope ) ; if ( realCount == NUM00 && xPoints [ realCount ] == x2 ) { $F36253 ( Debug ) reversed = _BOOL ; } if ( Debug . debugging ( NUM00 ) && realCount == NUM00 ) { OMLine startLine = new OMLine ( arcCenter . x , arcCenter . y , $F42446 ( xPoints ) , $F42446 ( yPoints ) ) ; startLine . setLinePaint ( OMColor . white ) ; arcGraphics . add ( startLine ) ; } else if $F22503 ( Debug ) { Debug . output ( NUM00 + smallSlope + NUM00 + smallSlope * NUM00 / Math . PI + NUM00 + xPoints [ realCount ] + NUM00 + yPoints [ realCount ] ) ; } if ( Math . abs ( largeSlope - smallSlope - ( arcAngle / NUM00 ) ) < angleIncrement ) { peakPoint . setLocation ( xPoints [ realCount ] , yPoints [ realCount ] ) ; $F36253 ( Debug ) } smallSlope += angleIncrement ; realCount ++ ; } $F189191 ( xpoints , realCount ) $F189191 ( ypoints , realCount ) $F135 ( System , xPoints , xpoints , realCount ) $F135 ( System , yPoints , ypoints , realCount ) }
private static int compareLocales ( Locale primary , Locale other ) { final String lang = primary . getLanguage ( ) ; if ( ( lang == null ) || ! lang . equals ( other . getLanguage ( ) ) ) $F1083 final String country = primary . getCountry ( ) ; if ( ( country == null ) || ! country . equals ( other . getCountry ( ) ) ) $F1083 final String variant = primary . getVariant ( ) ; if ( ( variant == null ) || ! variant . equals ( other . getVariant ( ) ) ) $F1083 $F1082 }
void queryReadResult ( PreparedStatement prep ) throws SQLException { $F49 ( rs , prep ) $F19097 ( meta , rs ) $F16742 ( columnCount , meta ) while $F1682 ( rs ) { for ( $F119 ( i , columnCount ) ) { rs . getString ( i + NUM00 ) ; } } }
$F188545 ( sourceList , entry , _BOOL )
public boolean equals ( Object obj ) { if ( obj instanceof MSort ) { MSort ms = ( MSort ) obj ; if ( data == ms . data ) return _BOOL ; } return _BOOL ; }
public static void endTransaction ( final CConnection connection ) throws SQLException { endTransaction ( connection . getConnection ( ) ) ; }
public CCrossReferencesPanel $F72 { $F9898 ( super ) m_table . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; add ( new JScrollPane ( m_table ) ) ; m_table . addMouseListener ( new InternalMouseListener $F72 ) ; }
private void doubleCapacity $F72 { int p = head ; int n = elements . length ; int r = n - p ; int newCapacity = n < < NUM00 ; if ( newCapacity < NUM00 ) $F4638 $F133 ( a , newCapacity ) $F21535 ( System , elements , p , a , r ) $F6483 ( System , elements , a , r , p ) elements = a ; head = NUM00 ; tail = n ; }
private void changeOpenAMDebugFolder ( String newOpenAMDebugFolder ) { SystemPropertiesManager . initializeProperties ( DebugConstants . CONFIG_DEBUG_DIRECTORY , newOpenAMDebugFolder ) ; }
protected String computeFullUrl ( URL baseUrl , String link ) { $F26918 ( link ) if $F14943 ( link ) { if $F3106 ( link ) { link = baseUrl . getProtocol ( ) + NUM00 + baseUrl . getAuthority ( ) + link ; } else { if $F3578 ( link ) $F1337 $F14393 ( path , baseUrl ) if $F2364 ( path ) { $F24867 ( sep , path ) $F36289 ( file , path , sep ) if $F80721 ( file ) $F45799 ( path , sep ) } link = baseUrl . getProtocol ( ) + NUM00 + baseUrl . getAuthority ( ) + path + NUM00 + link ; } } link = normalizeUrlEnding ( link ) ; String l = $F131081 ( link , Locale ) ; if ( $F65411 ( l ) ) $F1337 return link ; }
private void loadManifest $F72 { $F5453 ( _isManifestRead ) synchronized ( this ) { $F5453 ( _isManifestRead ) try { _manifest = _jarPath . getManifest ( ) ; $F8249 ( _manifest ) Attributes attr = _manifest . getMainAttributes ( ) ; if ( attr != null ) addManifestPackage ( NUM00 , attr ) ; Map < String , Attributes > entries = _manifest . getEntries ( ) ; for ( Map . Entry < String , Attributes > entry : entries . entrySet ( ) ) { $F3477 ( pkg , entry ) $F37891 ( attr , entry ) $F45557 ( attr ) addManifestPackage ( pkg , attr ) ; } } catch ( IOException e ) $F173189 ( log , Level , e ) finally { _isManifestRead = _BOOL ; } } }
public $F262544 convertToRawTypes ( $F262544 originalTypes , boolean forceErasure , boolean forceRawEnclosingType ) { $F1275 ( originalTypes ) $F262544 convertedTypes = originalTypes ; for ( $F21059 ( i , length , originalTypes ) ) { ReferenceBinding originalType = originalTypes [ i ] ; ReferenceBinding convertedType = ( ReferenceBinding ) convertToRawType ( forceErasure ? originalType . erasure ( ) : originalType , forceRawEnclosingType ) ; if ( convertedType != originalType ) { if ( convertedTypes == originalTypes ) { System . arraycopy ( originalTypes , NUM00 , convertedTypes = new ReferenceBinding [ length ] , NUM00 , i ) ; } convertedTypes [ i ] = convertedType ; } else if ( convertedTypes != originalTypes ) { convertedTypes [ i ] = originalType ; } } return convertedTypes ; }
public void addColumn ( int idx , Column column ) { if ( column != null ) $F42308 ( columns , idx , column ) }
public void readData ( DataInput din ) throws IOException { $F89921 ( reference , din ) $F89921 ( andMask , din ) $F89921 ( orMask , din ) }
boolean removeDisplay ( Display display ) $F20067 ( m_displays , display )
public double nextGaussian $F72 { if ( mHaveNextNextGaussian ) { mHaveNextNextGaussian = _BOOL ; return mNextNextGaussian ; } else { double v1 , v2 , s ; do { v1 = NUM00 * nextDouble ( ) - NUM00 ; v2 = NUM00 * nextDouble ( ) - NUM00 ; s = v1 * v1 + v2 * v2 ; } while ( s >= NUM00 || s == NUM00 ) ; final double multiplier = StrictMath . sqrt ( $F130364 ( StrictMath , s ) / s ) ; mNextNextGaussian = v2 * multiplier ; mHaveNextNextGaussian = _BOOL ; return v1 * multiplier ; } }
private void fireEvent ( final IRunningQuery q ) { $F10057 ( q ) $F19233 ( listeners ) final IRunningQueryListener [ ] a = listeners . toArray ( new IRunningQueryListener $F380 ) ; for ( IRunningQueryListener l : a ) { final IRunningQueryListener listener = l ; try { listener . notify ( q ) ; } catch ( Throwable t ) { if ( InnerCause . isInnerCause ( t , InterruptedException . class ) ) $F9491 ( t ) log . error ( t , t ) ; } } }
private void updateContactHeaderPort ( int localPort , SIPMessage message ) { if ( message != null && message . getContactHeader ( ) != null ) { ContactHeader contactHeader = message . getContactHeader ( ) ; Address contactAddress = contactHeader . getAddress ( ) ; contactAddress . setPort ( localPort ) ; } }
public static AndroidHttpClient newInstance ( String userAgent ) $F13736 ( newInstance , userAgent )
$F5466 GridCacheMvccCandidate addEntry ( GridLocalCacheEntry entry ) throws GridCacheEntryRemovedException { GridCacheMvccCandidate c = entry . addLocal ( threadId , lockVer , null , null , timeout , ! inTx ( ) , inTx ( ) , implicitSingle ( ) , _BOOL ) ; entries . add ( entry ) ; if ( c == null && timeout < NUM00 ) { $F51620 ( log , entry ) onFailed ( ) ; $F1274 } if ( c != null ) { entry . readyLocal ( c ) ; } return c ; }
$F1 public void visitVertex ( StreetRouter . State state ) { Integer edgeIdx = state . backEdge ; if ( ! ( edgeIdx == null || edgeIdx == - NUM00 ) ) { EdgeStore . Edge edge = edgeStore . getCursor ( edgeIdx ) ; GeoJsonFeature feature = new GeoJsonFeature ( edge . getGeometry ( ) ) ; feature . addProperty ( NUM00 , state . weight ) ; feature . addProperty ( NUM00 , state . streetMode ) ; feature . addProperty ( NUM00 , state . backEdge ) ; features . add ( feature ) ; } }
public void test_BSBM_Q1_noSolutions $F72 throws Exception { final TestHelper helper = new TestHelper ( NUM00 , NUM00 , $F58906 , NUM00 ) ; assertSameJoinOrder ( new int [ ] { NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } , helper ) ; }
public static void deleteFileOrLog ( File file ) { if $F7119 ( file ) { logger . warn ( FAILED_DELETING_FILE + file . getPath ( ) ) ; } }
$F233307 ( index , super , mMaxValues )
public GitlabGroupMember addGroupMember ( GitlabGroup group , GitlabUser user , GitlabAccessLevel accessLevel ) throws IOException { return addGroupMember ( group . getId ( ) , user . getId ( ) , accessLevel ) ; }
protected Logger ( String name , String resourceBundleName ) { super ( name , resourceBundleName ) ; }
$F1 public void increment ( double coord , short val ) { int bin = getBinNr ( coord ) ; if ( bin < NUM00 ) { if ( size - bin > data . length ) { $F5078 tmpdata = new short [ growSize ( data . length , size - bin ) ] ; System . arraycopy ( data , NUM00 , tmpdata , - bin , size ) ; data = tmpdata ; } else { System . arraycopy ( data , NUM00 , data , - bin , size ) ; Arrays . fill ( data , NUM00 , - bin , $F15211 ) ; } data [ NUM00 ] = val ; assert ( data . length >= size - bin ) ; offset -= bin ; size -= bin ; } else if ( bin >= data . length ) { $F5078 tmpdata = new short [ growSize ( data . length , bin + NUM00 ) ] ; $F135 ( System , data , tmpdata , size ) tmpdata [ bin ] = val ; data = tmpdata ; size = bin + NUM00 ; max = Double . MAX_VALUE ; } else { if ( bin >= size ) { size = bin + NUM00 ; } data [ bin ] += val ; } }
$F82267 ( expression , errorMessage , String )
default Document putAll ( Map < ? extends CharSequence , Object > fields ) { if ( fields != null ) { for ( Map . Entry < ? extends CharSequence , Object > entry : fields . entrySet ( ) ) { $F151386 ( set , entry ) } } return this ; }
private boolean containsIgnoreCase $F72133 ( stringlist , match ) { for ( String s : stringlist ) $F72434 ( s , match , _BOOL ) return _BOOL ; }
public static double computeMAD $F280936 ( x , median ) { for ( $F1139 ( i , x ) ) { x [ i ] = Math . abs ( x [ i ] - median ) ; } double mad = QuickSelect . median ( x ) ; if $F102905 ( mad ) { double min = Double . POSITIVE_INFINITY ; for ( double xi : x ) { if ( xi > NUM00 && xi < min ) { min = xi ; } } if ( min < Double . POSITIVE_INFINITY ) { mad = min ; } else { mad = NUM00 ; } } return mad ; }
private static $F4203 void initializeKnownPlugins ( final T pluginInterface , final IPluginRegistry < IPlugin $F4203 > registry , final List < PluginConfigItem > xmlPluginOrder , final List < Pair < IPlugin $F4203 , PluginStatus > > validatedPlugins , final List < Pair < IPlugin $F4203 , Exception > > initializedPlugins , final $F60758 processedPlugins ) { for ( final PluginConfigItem pt : xmlPluginOrder ) { processedPlugins . add ( pt . getGUID ( ) ) ; final IPlugin $F4203 plugin = findPlugin ( validatedPlugins , pt . getGUID ( ) ) ; if ( plugin != null ) { if ( pt . isLoad ( ) ) { initializePlugin ( plugin , pluginInterface , registry , initializedPlugins ) ; } else { registry . addDisabledPlugin ( plugin , DisabledPluginReason . NotLoaded ) ; } } } }
public static void sessionStop $F72 { $F8249 ( mProcess ) $F17623 ( mProcess ) mProcess = null ; }
public static void keepAlive ( final boolean keepAlive ) { $F68359 ( setProperty , Boolean , keepAlive ) ; }
public static Request newUploadVideoRequest ( Session session , File file , Callback callback ) throws FileNotFoundException { ParcelFileDescriptor descriptor = ParcelFileDescriptor . open ( file , ParcelFileDescriptor . MODE_READ_ONLY ) ; Bundle parameters = new Bundle $F989 ; parameters . putParcelable ( file . getName ( ) , descriptor ) ; return new Request ( session , MY_VIDEOS , parameters , HttpMethod . POST , callback ) ; }
private static $F96 readCheckedBytes $F5474 ( buffer , dataSize ) throws InvalidProtocolBufferNanoException { CheckedMessage wrapper = new CheckedMessage $F72 ; MessageNano . mergeFrom ( wrapper , buffer , NUM00 , dataSize ) ; $F64750 ( checksum ) $F64752 ( checksum , wrapper ) if ( wrapper . checksum != checksum . getValue ( ) ) { throw new InvalidProtocolBufferNanoException $F580 ; } return wrapper . payload ; }
private MulticastSocket createSocket $F72 throws IOException { MulticastSocket sock = new MulticastSocket ( mcastPort ) ; sock . setLoopbackMode ( _BOOL ) ; if ( sockItf != null ) sock . setInterface ( sockItf ) ; if ( sock . getLoopbackMode ( ) ) U . warn ( log , NUM00 + NUM00 ) ; sock . joinGroup ( mcastGrp ) ; if ( ttl != - NUM00 ) sock . setTimeToLive ( ttl ) ; return sock ; }
void copyNodeStructure ( $F93424 destination ) { while $F45088 ( destination , nodes ) destination . add ( new Node $F72 ) ; while $F92752 ( destination , nodes ) $F86372 ( destination ) $F2199 ( n , nodes ) for ( $F119 ( i , n ) ) { $F22142 ( node0 , nodes , i ) $F22142 ( node1 , destination , i ) node1 . heightParameter = node0 . heightParameter ; node1 . rateParameter = node0 . rateParameter ; node1 . traitParameter = node0 . traitParameter ; node1 . partitioning = node0 . partitioning ; node1 . taxon = node0 . taxon ; node1 . bifurcation = node0 . bifurcation ; node1 . number = node0 . number ; node1 . myHashCode = node0 . myHashCode ; if ( node0 . leftParent != null ) { node1 . leftParent = storedNodes . get ( nodes . indexOf ( node0 . leftParent ) ) ; } else { node1 . leftParent = null ; } if ( node0 . rightParent != null ) { node1 . rightParent = storedNodes . get ( nodes . indexOf ( node0 . rightParent ) ) ; } else { node1 . rightParent = null ; } if ( node0 . leftChild != null ) { node1 . leftChild = storedNodes . get ( nodes . indexOf ( node0 . leftChild ) ) ; } else { node1 . leftChild = null ; } if ( node0 . rightChild != null ) { node1 . rightChild = storedNodes . get ( nodes . indexOf ( node0 . rightChild ) ) ; } else { node1 . rightChild = null ; } } }
protected void checkSelectedSubsetMetaData ( ExampleSetMetaData subsetMetaData ) $F845
private void validateWill ( String dest , Object payload ) { if $F54923 ( dest , payload ) $F26853 MqttTopic . validate ( dest , _BOOL ) ; }
public BerInputStream ( InputStream in , int initialSize ) throws IOException { this . in = in ; $F1325 ( buffer , initialSize ) next ( ) ; if ( length != INDEFINIT_LENGTH ) { if ( buffer . length < ( length + offset ) ) { $F112445 ( newBuffer , length , offset ) $F135 ( System , buffer , newBuffer , offset ) buffer = newBuffer ; } } else { isIndefinedLength = _BOOL ; throw new ASN1Exception $F580 ; } }
private Member nextMember ( Member . Type type ) { return new TestMember ( type , new Address ( NUM00 , ++ port ) , new Address ( NUM00 , port + NUM00 ) ) ; }
protected void encodeLineSuffix ( OutputStream aStream ) throws IOException $F46210 ( pStream )
boolean isSystemFont $F72 { return systemFont ; }
public void addToBeLoaded ( final String url ) { $F30647 ( toBeLoaded ) if $F16093 ( StringUtils , url ) $F207 ( toBeLoaded , url ) }
default Document putAll ( Iterator < Field > fields ) { while $F2921 ( fields ) { Field field = fields . next ( ) ; setValue ( field . getName ( ) , field . getValue ( ) ) ; } return this ; }
public AppraiseGitReviewClient ( Repository repo ) { this . repo = repo ; this . author = new PersonIdent ( repo ) ; }
public RootBlockView ( final boolean rootBlock0 , final ByteBuffer buf , final ChecksumUtility checker ) throws RootBlockException { $F10057 ( buf ) if ( buf . remaining ( ) != SIZEOF_ROOT_BLOCK ) { throw new IllegalArgumentException ( NUM00 + SIZEOF_ROOT_BLOCK + NUM00 + buf . remaining ( ) ) ; } this . buf = buf . asReadOnlyBuffer ( ) ; this . rootBlock0 = rootBlock0 ; switch ( getStoreType ( ) ) { case RW : { am = new RWAddressManager $F8320 ; $F597 } case WORM : { $F3666 ( offsetBits , getOffsetBits ) am = new WormAddressManager ( offsetBits ) ; $F597 } $F1267 throw new RootBlockException ( NUM00 + getStoreType ( ) ) ; } if ( checker == null ) $F10911 ( log ) this . checker = checker ; valid ( ) ; }
protected SOAPRequest createSOAPRequest ( final String methodName , final SOAPMethodRequestWriter requestWriter ) { final PostMethod method = new PostMethod $F3362 ( endpoint ) ; method . setContentChunked ( _BOOL ) ; setRequestHeaders ( method , methodName ) ; final SOAPRequestEntity requestEntity = buildRequestEntity ( methodName , requestWriter ) ; requestEntity . setSOAPHeaderProvider ( soapHeaderProvider ) ; final BufferedSOAPRequestEntity bufferedEntity = new BufferedSOAPRequestEntity ( requestEntity ) ; method . setRequestEntity ( bufferedEntity ) ; return new SOAPRequest ( method , requestEntity ) ; }
$F1431 $F32043 public void innerEnum $F72 { $F6969 pc = PlayingCard . class ; List < $F40588 > $F204 ( include ) ; List < $F40588 > $F204 ( exclude ) ; for ( $F6969 c : pc . getDeclaredClasses ( ) ) { $F23165 ( mods , c ) if ( c . isEnum ( ) ) { if ( Modifier . isPublic ( mods ) ) { include . addAll ( asList ( c . getEnumConstants ( ) ) ) ; } else { exclude . addAll ( asList ( c . getEnumConstants ( ) ) ) ; } } } Set < TypedOperation > actual = getConcreteOperations ( pc ) ; assertEquals ( NUM00 , $F2958 ( include ) , actual . size ( ) ) ; for ( $F40588 e : include ) { assertTrue ( $F106222 ( e ) , actual . contains ( createEnumOperation ( e ) ) ) ; } for ( $F40588 e : exclude ) { assertFalse ( $F106222 ( e ) , actual . contains ( createEnumOperation ( e ) ) ) ; } }
public String toURI $F72 { $F126634 ( buffer ) buffer . append ( this . schemeName ) ; $F84 ( buffer ) buffer . append ( this . hostname ) ; if ( this . port != - NUM00 ) { $F84 ( buffer ) buffer . append ( Integer . toString ( this . port ) ) ; } $F92 ( buffer ) }
public void testWildcardsDoesNotNeedTwoDots $F72 throws Exception { String cert = $F40645 ; $F5348 ( cf , CertificateFactory ) InputStream $F21318 ( in , cert ) ; $F77786 ( x509 , cf , in ) mySSLSession session = new mySSLSession ( new X509Certificate [ ] { x509 } ) ; HostnameVerifier verifier = HttpsURLConnection . getDefaultHostnameVerifier ( ) ; assertTrue ( verifier . verify ( NUM00 , session ) ) ; }
public static boolean inTargetDir ( File file ) { return inTargetDir ( file . toPath ( ) ) ; }
public final boolean skipAny ( char c , CharSequence csq ) { int i = index ; $F1749 ( n , csq ) for ( ; ( i < n ) && $F44927 ( csq , i , c ) ; i ++ ) $F845 if ( i == index ) return _BOOL ; index = i ; return _BOOL ; }
private void generateUniformIntegerExamples ( Instances format , int numInstances , SubspaceClusterDefinition cl , String cName ) { Instance example = null ; int numAtts = m_NumAttributes ; if ( getClassFlag ( ) ) { numAtts ++ ; } example = new DenseInstance ( numAtts ) ; example . setDataset ( format ) ; $F8748 attributes = cl . getAttributes ( ) ; $F1986 minValue = cl . getMinValue ( ) ; $F1986 maxValue = cl . getMaxValue ( ) ; $F22974 ( minInt , minValue ) $F22974 ( maxInt , maxValue ) $F22974 ( intValue , maxValue ) $F22974 ( numInt , minValue ) int num = NUM00 ; for ( $F1139 ( i , minValue ) ) { minInt [ i ] = ( int ) Math . ceil ( minValue [ i ] ) ; maxInt [ i ] = ( int ) Math . floor ( maxValue [ i ] ) ; numInt [ i ] = ( maxInt [ i ] - minInt [ i ] + NUM00 ) ; num = num * numInt [ i ] ; } int numEach = numInstances / num ; int rest = numInstances - numEach * num ; for ( $F119 ( i , m_NumAttributes ) ) { if ( attributes [ i ] ) { example . setValue ( i , minInt [ i ] ) ; intValue [ i ] = minInt [ i ] ; } else { example . setMissing ( i ) ; } } if ( getClassFlag ( ) ) { example . setClassValue ( cName ) ; } int added = NUM00 ; int attr = NUM00 ; do { for ( $F119 ( k , numEach ) ) { format . add ( example ) ; example = $F69871 ( example ) ; added ++ ; } if ( rest > NUM00 ) { format . add ( example ) ; example = $F69871 ( example ) ; added ++ ; rest -- ; } $F66497 ( added , numInstances ) boolean done = _BOOL ; do { if ( attributes [ attr ] && ( intValue [ attr ] + NUM00 <= maxInt [ attr ] ) ) { intValue [ attr ] ++ ; done = _BOOL ; } else { attr ++ ; } } while ( ! done ) ; example . setValue ( attr , intValue [ attr ] ) ; } while ( added < numInstances ) ; }
public synchronized boolean removeAll ( Collection c ) { $F8867 ( elements , getArray ) int len = elements . length ; if ( len != NUM00 ) { int newlen = NUM00 ; $F133 ( temp , len ) for ( $F1316 ( i , len ) ) { Object element = elements [ i ] ; if $F2200 ( c , element ) temp [ newlen ++ ] = element ; } if ( newlen != len ) { setArray ( copyOfRange ( temp , NUM00 , newlen , $F22453 ) ) ; return _BOOL ; } } return _BOOL ; }
$F278301 ( expect , update , unsafe , this , tailOffset )
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
public Phone createPhone ( String value ) { PhoneField phoneImpl = new PhoneField $F72 ; try $F18283 ( phoneImpl , value ) $F18284 ( s ) return phoneImpl ; }
private ListResourceBundle loadResourceBundle ( String resourceBundle ) throws MissingResourceException { m_resourceBundleName = resourceBundle ; Locale locale = getLocale ( ) ; ListResourceBundle lrb ; try { ResourceBundle rb = ResourceBundle . getBundle ( m_resourceBundleName , locale ) ; lrb = ( ListResourceBundle ) rb ; } catch ( MissingResourceException e ) { try { lrb = ( ListResourceBundle ) $F9125 ( ResourceBundle , m_resourceBundleName ) ; } catch ( MissingResourceException e2 ) { throw new MissingResourceException ( NUM00 + m_resourceBundleName , m_resourceBundleName , NUM00 ) ; } } m_resourceBundle = lrb ; return lrb ; }
private $F2689 returnRemotePoolsAssociatedWithRemoteCopySettings ( $F224310 ( remoteCopySettings ) , $F2689 poolUris ) { $F2695 ( remotePoolUris ) for ( $F164545 ( entry , remoteCopySettings ) ) { VirtualPool vPool = _objectCache . queryObject ( $F81883 , URI . create ( entry . getKey ( ) ) ) ; if ( null == vPool ) $F21926 ( remotePoolUris , poolUris ) else if ( null != vPool . getUseMatchedPools ( ) && vPool . getUseMatchedPools ( ) ) { if ( null != vPool . getMatchedStoragePools ( ) ) { remotePoolUris . addAll ( vPool . getMatchedStoragePools ( ) ) ; } } else if ( null != vPool . getAssignedStoragePools ( ) ) { remotePoolUris . addAll ( vPool . getAssignedStoragePools ( ) ) ; } } return remotePoolUris ; }
private String convertToHtml ( final String string ) { return $F37742 ( string ) + NUM00 ; }
private synchronized void addLock ( FileLock lock ) throws OverlappingFileLockException { long lockEnd = lock . position ( ) + lock . size ( ) ; for ( FileLock existingLock : locks ) { if ( existingLock . position ( ) > lockEnd ) $F5153 if ( existingLock . overlaps ( lock . position ( ) , lock . size ( ) ) ) { throw new OverlappingFileLockException $F72 ; } } locks . add ( lock ) ; }
public static void UF7 $F93381 ( x , f , nx ) { int count1 = NUM00 ; int count2 = NUM00 ; double sum1 = NUM00 ; double sum2 = NUM00 ; double yj ; for ( $F9993 ( j , nx ) ) { $F94025 ( yj , x , j , Math , PI , nx ) if ( j % NUM00 == NUM00 ) { sum2 += yj * yj ; count2 ++ ; } else { sum1 += yj * yj ; count1 ++ ; } } yj = Math . pow ( x [ NUM00 ] , NUM00 ) ; f [ NUM00 ] = yj + NUM00 * sum1 / ( double ) count1 ; f [ NUM00 ] = NUM00 - yj + NUM00 * sum2 / ( double ) count2 ; }
private void reloadModelWithNewValue ( final Long newValue ) { final long newValueAsPrimitive = newValue == null ? getModelUpdatePeriod ( ) : newValue ; for ( final PropertyChangeListener listener : modelUpdatePeriodListeners ) { final PropertyChangeEvent event = new PropertyChangeEvent ( this , NUM00 , getModelUpdatePeriod ( ) , newValueAsPrimitive ) ; listener . propertyChange ( event ) ; } }
public static final String moveToUCIString ( Move m ) { String ret = squareToString ( m . from ) ; ret += squareToString ( m . to ) ; switch ( m . promoteTo ) { case Piece . WQUEEN : case Piece . BQUEEN : ret += NUM00 ; $F597 case Piece . WROOK : case Piece . BROOK : ret += NUM00 ; $F597 case Piece . WBISHOP : case Piece . BBISHOP : ret += NUM00 ; $F597 case Piece . WKNIGHT : case Piece . BKNIGHT : ret += NUM00 ; $F597 $F2448 } return ret ; }
public Image createAcceleratedImage ( Component target , int width , int height ) { ColorModel model = getColorModel ( Transparency . OPAQUE ) ; WritableRaster wr = model . createCompatibleWritableRaster ( width , height ) ; return new OffScreenImage ( target , model , wr , model . isAlphaPremultiplied ( ) ) ; }
public void displayState $F72 { PrintWriter xout = context . get ( Log . outKey ) ; $F7957 ( xout , fileObjectHistory ) $F7957 ( xout , openTypeNames ) $F7957 ( xout , generatedSourceNames ) xout . println ( NUM00 + generatedClasses . keySet ( ) ) ; $F7957 ( xout , aggregateGeneratedSourceNames ) $F7957 ( xout , aggregateGeneratedClassNames ) }
public static void writeStringToWriter ( String string , Writer writer ) throws IOException { $F5172 ( bw , writer ) $F40754 ( bw , string ) }
$F326023 ( n , max , data , length , System , newData )
public final void decRef $F72 throws IOException { ensureOpen ( ) ; final int rc = refCount . decrementAndGet ( ) ; if ( rc == NUM00 ) { boolean success = _BOOL ; try { doClose ( ) ; closed = _BOOL ; success = _BOOL ; } finally { if ( ! success ) $F16878 ( refCount ) } } else if ( rc < NUM00 ) $F322689 ( rc ) }
public static X500Name x500PrincipalToX500Name ( X500Principal principal ) { return X500Name . getInstance ( KseX500NameStyle . INSTANCE , principal . getEncoded ( ) ) ; }
private void assertDescribedResource ( final BigdataValue describedResource , final IDescribeCache describeCache , final TestHelper h ) { final Graph actualGraph = describeCache . lookup ( describedResource . getIV ( ) ) ; assertNotNull ( actualGraph ) ; final $F12622 expectedGraph = getExpectedDescription ( describedResource , h ) ; h . compareGraphs ( new HashSet $F12621 ( actualGraph ) , expectedGraph ) ; for ( Statement stmt : actualGraph ) { assertTrue ( stmt instanceof BigdataStatement ) ; final BigdataStatement st = ( BigdataStatement ) stmt ; assertNotNull ( st . s ( ) ) ; assertNotNull ( st . p ( ) ) ; assertNotNull ( st . o ( ) ) ; if ( st . getContext ( ) != null ) { assertNotNull ( st . c ( ) ) ; } } }
public boolean isFlat $F72 { return $F19068 ( TYPE_FLAT , getType ) ; }
$F1309 private List $F11616 buildLimitedNetworksList $F72 { final Context context = getActivity ( ) ; final ArrayList $F11616 limited = Lists . newArrayList ( ) ; if ( hasSubscription ( context ) ) { final String subscriberId = getActiveSubscriberId ( context ) ; if ( mPolicyEditor . hasLimitedPolicy ( buildTemplateMobileAll ( subscriberId ) ) ) { limited . add ( getText ( R . string . data_usage_list_mobile ) ) ; } if ( mPolicyEditor . hasLimitedPolicy ( buildTemplateMobile3gLower ( subscriberId ) ) ) { limited . add ( getText ( R . string . data_usage_tab_3g ) ) ; } if ( mPolicyEditor . hasLimitedPolicy ( buildTemplateMobile4g ( subscriberId ) ) ) { limited . add ( getText ( R . string . data_usage_tab_4g ) ) ; } } if ( mPolicyEditor . hasLimitedPolicy ( buildTemplateWifiWildcard ( ) ) ) { limited . add ( getText ( R . string . data_usage_tab_wifi ) ) ; } if ( mPolicyEditor . hasLimitedPolicy ( buildTemplateEthernet ( ) ) ) { limited . add ( getText ( R . string . data_usage_tab_ethernet ) ) ; } return limited ; }
public int evalRPN $F4374 ( tokens ) { if $F12414 ( tokens ) $F1082 Stack $F4 s = new Stack $F4 $F72 ; int len = tokens . length ; for ( $F119 ( i , len ) ) { String cur = tokens [ i ] ; if ( isOperator ( cur ) ) { int t2 = Integer . parseInt ( s . pop ( ) ) ; int t1 = Integer . parseInt ( s . pop ( ) ) ; int res = calculate ( t1 , t2 , cur ) ; s . push ( Integer . toString ( res ) ) ; } else s . push ( cur ) ; } return Integer . valueOf ( s . peek ( ) ) ; }
public synchronized void addAllSeries ( List < XYSeries > series ) $F21926 ( mSeries , series )
private static void exit ( String errMsg , Options options , int exitCode ) { if ( errMsg != null ) echo ( NUM00 + errMsg ) ; String runner = System . getProperty ( IGNITE_PROG_NAME , NUM00 ) ; $F1384 ( space , runner ) runner = runner . substring ( NUM00 , space == - NUM00 ? runner . length ( ) : space ) ; if ( options != null ) { HelpFormatter formatter = new HelpFormatter $F72 ; formatter . printHelp ( runner , options ) ; } System . exit ( exitCode ) ; }
$F1 public int compare ( NewSplitEmittedTerm term1 , NewSplitEmittedTerm term2 ) $F128741 ( term1 , term2 )
public AABB merge ( AABB other ) { $F36071 ( minX , Math , other ) $F36074 ( maxX , Math , other ) $F36071 ( minY , Math , other ) $F36074 ( maxY , Math , other ) $F36071 ( minZ , Math , other ) $F36074 ( maxZ , Math , other ) return this ; }
public static String generateAutoTag ( int stackOffset ) { $F11340 currentStack = getCurrentStack ( ) ; StackTraceElement element = currentStack [ stackOffset ] ; String className = element . getClassName ( ) ; String pkgPath [ ] = className . split ( NUM00 ) ; if $F3305 ( pkgPath ) { $F79270 ( className , pkgPath ) ; } $F83 ( sbInnerClass ) int index ; String strLoop = className ; while ( ( index = strLoop . lastIndexOf ( NUM00 ) ) != - NUM00 ) { $F36289 ( piece , strLoop , index ) $F34005 ( sbInnerClass , piece ) if $F48318 ( piece ) $F5153 $F2864 ( sbInnerClass ) $F45799 ( strLoop , index ) } if ( $F15506 ( sbInnerClass ) ) $F74607 ( sbInnerClass ) $F1822 ( innerClassName , sbInnerClass ) if ( TextUtils . isDigitsOnly ( innerClassName ) ) { innerClassName = null ; } return TextUtils . isEmpty ( innerClassName ) ? className : innerClassName ; }
public void flushPending $F72 throws SAXException { $F62355 ( m_needToCallStartDocument , startDocumentInternal , _BOOL ) if ( m_elemContext . m_startTagOpen ) $F42845 ( closeStartTag , m_elemContext , _BOOL ) $F62355 ( m_cdataTagOpen , closeCDATA , _BOOL ) if ( m_writer != null ) { try $F29882 ( m_writer ) $F29052 } }
private void handleSubscribe $F4374 ( args ) { switch ( args [ NUM00 ] ) { $F1262 TestSubscriber < Payload > rrsub = new TestSubscriber $F200 $F989 ; payloadSubscribers . put ( args [ NUM00 ] , rrsub ) ; $F266434 ( idToType , args ) ReactiveSocket rrclient = createClient . get ( ) ; Publisher < Payload > rrpub = rrclient . requestResponse ( new PayloadImpl $F76125 ( args ) ) ; rrpub . subscribe ( rrsub ) ; $F597 $F1262 TestSubscriber < Payload > rssub = new TestSubscriber $F200 $F989 ; payloadSubscribers . put ( args [ NUM00 ] , rssub ) ; $F266434 ( idToType , args ) ReactiveSocket rsclient = createClient . get ( ) ; Publisher < Payload > rspub = rsclient . requestStream ( new PayloadImpl $F76125 ( args ) ) ; rspub . subscribe ( rssub ) ; $F597 $F1262 TestSubscriber < Payload > rsubsub = new TestSubscriber $F200 $F989 ; payloadSubscribers . put ( args [ NUM00 ] , rsubsub ) ; $F266434 ( idToType , args ) ReactiveSocket rsubclient = createClient . get ( ) ; Publisher < Payload > rsubpub = rsubclient . requestSubscription ( new PayloadImpl $F76125 ( args ) ) ; rsubpub . subscribe ( rsubsub ) ; $F597 $F1262 TestSubscriber $F8317 fnfsub = new TestSubscriber $F200 $F989 ; fnfSubscribers . put ( args [ NUM00 ] , fnfsub ) ; $F266434 ( idToType , args ) ReactiveSocket fnfclient = createClient . get ( ) ; Publisher $F8317 fnfpub = fnfclient . fireAndForget ( new PayloadImpl $F76125 ( args ) ) ; fnfpub . subscribe ( fnfsub ) ; $F597 $F2448 } }
@ PostConstruct public void init $F72 { configurationViews . add ( defaultDistributionSetTypeLayout ) ; configurationViews . add ( authenticationConfigurationView ) ; configurationViews . add ( pollingConfigurationView ) ; }
public ExtendedType $F103468 ( nodetype , namespace , localName ) { this . nodetype = nodetype ; this . namespace = namespace ; this . localName = localName ; this . hash = nodetype + namespace . hashCode ( ) + localName . hashCode ( ) ; }
private static void validateNewAddition ( Vector paths , ExpressionOwner owner , LocPathIterator path ) throws RuntimeException { assertion ( owner . getExpression ( ) == path , NUM00 ) ; $F2199 ( n , paths ) for ( $F119 ( i , n ) ) { $F55733 ( ew , paths , i ) assertion ( ew != owner , NUM00 ) ; assertion ( ew . getExpression ( ) != path , NUM00 ) ; } }
$F1 public void start $F72 { for ( $F1316 ( i , threadCount ) ) { Set < SystemStreamPartition > threadSsps = new HashSet < SystemStreamPartition > $F72 ; for ( SystemStreamPartition ssp : ssps ) { if ( Math . abs ( ssp . hashCode ( ) ) % threadCount == i ) $F207 ( threadSsps , ssp ) } Thread thread = new Thread ( new MockSystemConsumerRunnable ( threadSsps ) , NUM00 + i ) ; thread . setDaemon ( _BOOL ) ; threads . add ( thread ) ; $F2346 ( thread ) } }
private List $F42619 initializeWeightsND $F72 { int N = NUM00 ; List $F42619 candidates = new $F302683 ( numberOfPoints * N ) ; for ( int i = NUM00 ; i < numberOfPoints * N ; i ++ ) { $F9662 ( weight , numberOfObjectives ) for ( $F119 ( j , numberOfObjectives ) ) { $F44646 ( weight , j , PRNG ) } $F55455 ( sum , StatUtils , weight ) for ( $F119 ( j , numberOfObjectives ) ) { weight [ j ] /= sum ; } candidates . add ( weight ) ; } List $F42619 weights = new $F302683 ( numberOfPoints * N ) ; for ( $F119 ( i , numberOfObjectives ) ) { $F9662 ( weight , numberOfObjectives ) weight [ i ] = NUM00 ; weights . add ( weight ) ; } while $F10255 ( weights , numberOfPoints ) { $F69807 ( weight ) double distance = Double . NEGATIVE_INFINITY ; for ( $F2277 ( i , candidates ) ) { double d = Double . POSITIVE_INFINITY ; for ( $F2277 ( j , weights ) ) { d = Math . min ( d , MathArrays . distance ( candidates . get ( i ) , weights . get ( j ) ) ) ; } if ( d > distance ) { weight = candidates . get ( i ) ; distance = d ; } } weights . add ( weight ) ; candidates . remove ( weight ) ; } return weights ; }
public void undo $F72 { try { if ( undoManager != null ) undoManager . undoOrRedo ( ) ; } catch ( CannotUndoException ignored ) $F845 catch ( CannotRedoException ignored ) $F845 }
public void removeColumn ( Column column ) $F275325 ( column , columns )
public String info $F72 { StringBuilder sb = new StringBuilder ( NUM00 + tableSize + NUM00 + elements + NUM00 + loadFactor + NUM00 + threshold ) ; $F11030 ( sb , numEmpty ) int size = NUM00 ; int min = elements ; int max = - NUM00 ; for ( $F119 ( i , tableSize ) ) { $F28830 list = bins [ i ] ; if ( list != null ) { $F2199 ( sz , list ) size += sz ; $F45132 ( sz , min ) $F12283 ( sz , max ) } } float avg = size ; int base = ( tableSize - numEmpty ) ; if ( base == NUM00 ) { $F84 ( sb ) $F84 ( sb ) $F84 ( sb ) } else { avg /= base ; $F11030 ( sb , avg ) $F11030 ( sb , min ) $F11030 ( sb , max ) } $F92 ( sb ) }
public boolean peekSample ( MediaCodec . BufferInfo out_bufferInfo ) { update ( ) ; boolean result = _BOOL ; if $F5973 ( mAvailableOutputBuffers ) { int index = mAvailableOutputBuffers . peek ( ) ; MediaCodec . BufferInfo info = mOutputBufferInfo [ index ] ; out_bufferInfo . set ( info . offset , info . size , info . presentationTimeUs , info . flags ) ; result = _BOOL ; } return result ; }
$F1 public AbstractScannedResult scanBlocklet ( BlocksChunkHolder blocksChunkHolder ) throws QueryExecutionException { try { fillScannedResult ( blocksChunkHolder ) ; } catch ( FilterUnsupportedException e ) { throw new QueryExecutionException $F1783 ( e ) ; } return scannedResult ; }
$F1 public int hashCode $F72 { return subconditions . hashCode ( ) - operator . hashCode ( ) ; }
public void balanceSegments $F72 { MAcctSchemaElement [ ] elements = m_acctSchema . getAcctSchemaElements ( ) ; for ( $F1139 ( i , elements ) ) { MAcctSchemaElement ase = elements [ i ] ; if ( ase . isBalanced ( ) ) balanceSegment ( ase . getElementType ( ) ) ; } }
public AnnotationDrawer ( final AnnotationsModel model , final ProcessRendererModel rendererModel ) { this . model = model ; this . rendererModel = rendererModel ; this . displayCache = $F4190 ; this . cachedID = $F4190 ; pane = new JEditorPane $F6600 ; $F55355 ( pane ) pane . setOpaque ( _BOOL ) ; }
public boolean hasUserPartitions $F72 $F3387 ( userOutput )
$F1 public void insertString ( final int offs , final String str , final AttributeSet attr ) { $F44858 ( offs ) if $F4012 ( str ) { int i ; for ( $F23302 ( i , str ) ) { if $F11983 ( str , i ) { $F4571 ( remainingTextString , str , i ) remainingTextAttr = attr ; inputKeyListener . keyPressed ( new KeyEvent ( new Container $F72 , KeyEvent . KEY_PRESSED , NUM00 , NUM00 , KeyEvent . VK_ENTER , NUM00 ) ) ; $F597 } else { insertChar ( offs + i , NUM00 + str . charAt ( i ) ) ; } } } else if $F1277 ( str ) { insertChar ( offs , str ) ; } }
protected int readCodePoint $F72 throws IOException { $F7468 ( next , reader ) if ( Character . isHighSurrogate ( ( char ) next ) ) { next = Character . toCodePoint ( ( char ) next , ( char ) reader . read ( ) ) ; } return next ; }
public static int putInt $F24576 ( bytes , offset , val ) { if ( littleEndian ) { $F410031 ( val , Integer ) } theUnsafe . putInt ( bytes , offset + BYTE_ARRAY_BASE_OFFSET , val ) ; return offset + Bytes . SIZEOF_INT ; }
public Item ( Drawable symbol , String labelText , Font font ) { double fontSize = font . getSize2D ( ) ; setLayout ( new EdgeLayout ( fontSize , NUM00 ) ) ; this . symbol = symbol ; add ( symbol , Location . WEST ) ; label = new Label ( labelText ) ; label . setFont ( font ) ; label . setAlignmentX ( NUM00 ) ; label . setAlignmentY ( NUM00 ) ; add ( label , Location . CENTER ) ; }
void tag ( String tag ) ;
public int consume $F72 { int consumedAmount ; if ( Math . abs ( left ) < $F59687 ( Math , getRegen ) ) { consumedAmount = left ; left = NUM00 ; } else { consumedAmount = getRegen ( ) ; left -= getRegen ( ) ; } return consumedAmount ; }
private Delegate delegate $F72 throws HadoopIgfsCommunicationException { Exception errShmem = null ; Exception errTcp = null ; Delegate curDelegate = delegateRef . get ( ) ; $F60730 ( curDelegate ) boolean skipInProc = parameter ( conf , PARAM_IGFS_ENDPOINT_NO_EMBED , authority , _BOOL ) ; if ( ! skipInProc ) { IgfsEx igfs = getIgfsEx ( endpoint . grid ( ) , endpoint . igfs ( ) ) ; if ( igfs != null ) { HadoopIgfsEx hadoop = null ; try { hadoop = new HadoopIgfsInProc ( igfs , log , userName ) ; curDelegate = new Delegate ( hadoop , hadoop . handshake ( logDir ) ) ; } catch ( IOException | IgniteCheckedException e ) { if ( e instanceof HadoopIgfsCommunicationException ) if ( hadoop != null ) hadoop . close ( _BOOL ) ; if $F585 ( log ) $F7028 ( log , e ) } } } boolean skipLocShmem = parameter ( conf , PARAM_IGFS_ENDPOINT_NO_LOCAL_SHMEM , authority , _BOOL ) ; if ( curDelegate == null && ! skipLocShmem && ! U . isWindows ( ) ) { HadoopIgfsEx hadoop = null ; try { hadoop = new HadoopIgfsOutProc ( endpoint . port ( ) , endpoint . grid ( ) , endpoint . igfs ( ) , log , userName ) ; curDelegate = new Delegate ( hadoop , hadoop . handshake ( logDir ) ) ; } catch ( IOException | IgniteCheckedException e ) { if ( e instanceof HadoopIgfsCommunicationException ) hadoop . close ( _BOOL ) ; if $F585 ( log ) log . debug ( NUM00 + endpoint . port ( ) + NUM00 , e ) ; errShmem = e ; } } boolean skipLocTcp = parameter ( conf , PARAM_IGFS_ENDPOINT_NO_LOCAL_TCP , authority , _BOOL ) ; if ( curDelegate == null && ! skipLocTcp ) { HadoopIgfsEx hadoop = null ; try { hadoop = new HadoopIgfsOutProc ( LOCALHOST , endpoint . port ( ) , endpoint . grid ( ) , endpoint . igfs ( ) , log , userName ) ; curDelegate = new Delegate ( hadoop , hadoop . handshake ( logDir ) ) ; } catch ( IOException | IgniteCheckedException e ) { if ( e instanceof HadoopIgfsCommunicationException ) hadoop . close ( _BOOL ) ; if $F585 ( log ) log . debug ( NUM00 + endpoint . host ( ) + NUM00 + endpoint . port ( ) + NUM00 , e ) ; errTcp = e ; } } if ( curDelegate == null && ( skipLocTcp || ! F . eq ( LOCALHOST , endpoint . host ( ) ) ) ) { HadoopIgfsEx hadoop = null ; try { hadoop = new HadoopIgfsOutProc ( endpoint . host ( ) , endpoint . port ( ) , endpoint . grid ( ) , endpoint . igfs ( ) , log , userName ) ; curDelegate = new Delegate ( hadoop , hadoop . handshake ( logDir ) ) ; } catch ( IOException | IgniteCheckedException e ) { if ( e instanceof HadoopIgfsCommunicationException ) hadoop . close ( _BOOL ) ; if $F585 ( log ) log . debug ( NUM00 + endpoint . host ( ) + NUM00 + endpoint . port ( ) + NUM00 , e ) ; errTcp = e ; } } if ( curDelegate != null ) { if ( ! delegateRef . compareAndSet ( null , curDelegate ) ) curDelegate . doomed = _BOOL ; return curDelegate ; } else { SB errMsg = new SB ( NUM00 + authority + NUM00 ) ; if ( errShmem != null ) errMsg . a ( NUM00 + endpoint . port ( ) + NUM00 + errShmem + NUM00 ) ; errMsg . a ( NUM00 + endpoint . host ( ) + NUM00 + endpoint . port ( ) + NUM00 + errTcp + NUM00 ) ; errMsg . a ( NUM00 + NUM00 ) ; throw new HadoopIgfsCommunicationException $F3362 ( errMsg ) ; } }
public FromClause add ( OuterJoinQualifier outerJoinQualifier ) $F18637 ( outerJoinQualifiers , outerJoinQualifier , this )
private static final $F5237 encode ( String src ) { if $F6036 ( src ) { return ( new File $F380 ) ; } $F17727 ( tokenizer , src ) $F5237 dirs = new File $F49889 ( tokenizer ) ; for ( $F1139 ( i , dirs ) ) { dirs [ i ] = new File $F52332 ( tokenizer ) ; } return dirs ; }
$F25527 ( redundantOpCompactThreshold , redundantOpCount , lruEntries )
public E poll ( long timeout , TimeUnit unit ) throws InterruptedException { $F194979 ( nanos , unit , timeout ) $F677 ( lock , this ) $F678 ( lock ) long t = now ( ) ; TenantQueue . Item item = null ; try { for ( $F589 ) { TenantQueue q = nextQueue ( t ) ; if ( q == null ) { if ( nanos <= NUM00 ) $F1274 else $F194980 ( nanos , available ) } else { long delay = q . next - t ; if ( delay <= NUM00 ) { item = q . poll ( t ) ; return item == null ? null : item . element ; } $F89986 ( nanos ) if ( nanos < delay || leader != null ) $F194980 ( nanos , available ) else { $F686 ( thisThread , Thread ) leader = thisThread ; try { long timeLeft = available . awaitNanos ( delay ) ; nanos -= delay - timeLeft ; } $F690 ( leader , thisThread ) } } $F101251 ( t , System ) } } finally { if ( leader == null && hasNext ( ) ) $F702 ( available ) $F704 ( lock ) done ( item , t ) ; } }
$F83977 ( listener , mListeners )
$F1654 ( patterns )
private SublimeBaseMenuItem addInternal ( int pivotID , Positioned positioned , SublimeBaseMenuItem newItem ) { int newItemGroupId = newItem . getGroupId ( ) ; checkExistenceOfGroup ( newItemGroupId ) ; int pivotIndex = findItemIndex ( pivotID ) ; SublimeBaseMenuItem pivot = mItems . get ( pivotIndex ) ; if ( newItem . getItemType ( ) == SublimeBaseMenuItem . ItemType . GROUP_HEADER ) { checkIfGroupHeaderAlreadyExistsForGroup ( newItemGroupId ) ; int index = findGroupIndex ( newItemGroupId ) ; if ( index >= NUM00 ) $F42308 ( mItems , index , newItem ) else { if ( positioned == Positioned . BEFORE ) { if ( pivot . getGroupId ( ) == NO_GROUP_ID || pivot . getItemType ( ) == SublimeBaseMenuItem . ItemType . GROUP_HEADER ) $F42308 ( mItems , pivotIndex , newItem ) else $F207 ( mItems , newItem ) } else if ( positioned == Positioned . AFTER ) { if ( pivot . getGroupId ( ) == NO_GROUP_ID || pivotIndex == findLastGroupIndex ( newItemGroupId ) ) { $F57027 ( mItems , pivotIndex , newItem ) } else $F207 ( mItems , newItem ) } } } else { if ( newItemGroupId != NO_GROUP_ID ) { int lastGroupIndex = findLastGroupIndex ( newItemGroupId ) ; if $F25745 ( lastGroupIndex , mItems ) { if ( positioned == Positioned . BEFORE ) { if ( pivot . getGroupId ( ) == NO_GROUP_ID || pivotIndex == findGroupIndex ( pivot . getGroupId ( ) ) ) $F42308 ( mItems , pivotIndex , newItem ) else $F207 ( mItems , newItem ) } else if ( positioned == Positioned . AFTER ) { if ( pivot . getGroupId ( ) == NO_GROUP_ID || pivotIndex == findLastGroupIndex ( pivot . getGroupId ( ) ) ) { $F57027 ( mItems , pivotIndex , newItem ) } else $F207 ( mItems , newItem ) } } else { if ( newItemGroupId == pivot . getGroupId ( ) ) { if ( positioned == Positioned . BEFORE ) { if ( pivot . getItemType ( ) != SublimeBaseMenuItem . ItemType . GROUP_HEADER ) $F42308 ( mItems , pivotIndex , newItem ) else { $F57027 ( mItems , lastGroupIndex , newItem ) } } else if ( positioned == Positioned . AFTER ) { $F57027 ( mItems , pivotIndex , newItem ) } } else { $F57027 ( mItems , lastGroupIndex , newItem ) } } } else { if ( positioned == Positioned . BEFORE ) { if ( pivot . getGroupId ( ) == NO_GROUP_ID || findGroupIndex ( pivot . getGroupId ( ) ) == pivotIndex ) $F42308 ( mItems , pivotIndex , newItem ) else $F207 ( mItems , newItem ) } else if ( positioned == Positioned . AFTER ) { if ( pivot . getGroupId ( ) == NO_GROUP_ID || pivotIndex == findLastGroupIndex ( pivot . getGroupId ( ) ) ) { $F57027 ( mItems , pivotIndex , newItem ) } else $F207 ( mItems , newItem ) } } } onItemsChanged ( ) ; return newItem ; }
public static void writeUint8 ( OutputStream theOs , int theValue ) throws IOException $F4050 ( theOs , theValue )
$F108235 ( f , first , n , item , last , count , notFull )
public void testCase11 $F72 { $F70249 $F10679 int aSign = NUM00 ; int bSign = - NUM00 ; byte $F3018 = { NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F3024 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
$F1 public void addHeader $F2236 ( header , value ) { mHeadersOptions . add ( new HeaderOption ( header , value ) ) ; }
public void store $F72 throws SAMLException { try { $F13765 ( keyProvider ) } catch ( KeyStoreException e ) { throw new SAMLException $F1783 ( e ) ; } catch ( CertificateException e ) { throw new SAMLException $F1783 ( e ) ; } catch ( NoSuchAlgorithmException e ) { throw new SAMLException $F1783 ( e ) ; } catch ( IOException e ) { throw new SAMLException $F1783 ( e ) ; } }
static void appendToPointerHierarchy ( final BaseType type , final BaseType pointer ) { $F1832 ( Preconditions , type ) $F1832 ( Preconditions , pointer ) Preconditions . checkArgument ( type != pointer , NUM00 ) ; Preconditions . checkArgument ( pointer . pointedToBy != type , NUM00 ) ; Preconditions . checkArgument ( type . pointsTo != pointer , NUM00 ) ; pointer . pointsTo = type ; type . pointedToBy = pointer ; }
public static void sort $F101011 ( a ) { $F166454 ( doSort , a ) ; }
public String toString $F72 { return NUM00 + String . format ( NUM00 , ValueSimilarity * NUM00 ) + NUM00 + String . format ( NUM00 , ContainmentSimilarity * NUM00 ) + NUM00 + String . format ( NUM00 , SizeSimilarity * NUM00 ) ; }
public $F19288 last $F72 { $F13085 iterator = iterator ( ) ; T value = null ; while $F2921 ( iterator ) $F45366 ( value , iterator ) $F122628 ( Optional , value ) }
public static void threadSleep ( long millis ) { try $F7595 ( Thread , millis ) catch ( InterruptedException ex ) { Log . e ( NUM00 , StringUtils . exceptionStackTraceToString ( ex ) ) ; } }
public int indexOf ( Node elem , int index ) { runTo ( - NUM00 ) ; if ( null == m_map ) $F150 for ( int i = index ; i < m_firstFree ; i ++ ) { Node node = m_map [ i ] ; if ( ( null != node ) && node . equals ( elem ) ) return i ; } $F150 }
static boolean isPackageAccess ( final int modifiers ) { return ( modifiers & ACCESS_TEST ) == NUM00 ; }
public void write ( final String filename ) { PrintStream stream ; try { stream = $F198100 ( filename ) ; } catch ( FileNotFoundException e ) { $F301 ( e ) $F665 } write ( stream ) ; $F59 ( stream ) }
ManagedWindowDecorator ( Window window , String windowId ) { this . window = window ; name = NUM00 + windowId ; }
$F1 public void write $F24576 ( b , off , len ) throws IOException { while ( len > NUM00 ) { int c = Math . min ( len , decoderIn . remaining ( ) ) ; decoderIn . put ( b , off , c ) ; processInput ( _BOOL ) ; len -= c ; off += c ; } $F8801 ( writeImmediately , flushOutput ) }
public static void log $F4353 ( message , args ) { if ( loggingEnabled ) { Log . d ( TAG , args . length == NUM00 ? message : String . format ( message , args ) ) ; } }
protected void processUpdates ( Queue < DeviceUpdate > updates ) { $F8249 ( updates ) DeviceUpdate update = null ; while ( null != ( update = updates . poll ( ) ) ) { $F57901 ( logger , update ) if ( update . change == DeviceUpdate . Change . DELETE ) { deviceSyncManager . removeDevice ( update . device ) ; } else { deviceSyncManager . storeDevice ( update . device ) ; } List < IDeviceListener > listeners = deviceListeners . getOrderedListeners ( ) ; notifyListeners ( listeners , update ) ; } }
boolean handleRemoteCanRebalance ( long size ) { return _BOOL ; }
public static File toSLDFile ( final File file ) { final String path = file . getAbsolutePath ( ) ; final String base = $F4019 ( path ) ; String newPath = base + NUM00 ; $F1705 ( sld , newPath ) if $F3428 ( sld ) { return sld ; } newPath = base + NUM00 ; $F24661 ( sld , newPath ) if $F3428 ( sld ) { return sld ; } $F1274 }
private String insertProperties $F5805 ( template , properties ) { for ( $F3475 ( entry , properties ) ) { template = template . replace ( $F15245 ( entry ) ) ; } return template ; }
public static void changeFont ( JComponent comp , int style ) { $F58112 ( font , comp ) comp . setFont ( font . deriveFont ( style ) ) ; }
public void drawContours ( Mat img , Color color ) { Drawing . drawContours ( img , contours , color ) ; }
public static void saveX509Cert ( String certStr , File certFile ) throws IOException { $F1764 ( writer , certFile ) writer . write ( BEGIN_CERT ) ; $F1769 ( writer ) writer . write ( certStr ) ; $F1769 ( writer ) writer . write ( END_CERT ) ; $F1769 ( writer ) $F59 ( writer ) }
public void clearOnCentralPositionChangedListener $F72 $F9096 ( mOnCentralPositionChangedListeners )
public static Object invokeStatic ( Class clazz , String methodName ) throws NoSuchMethodException { try { Method method = clazz . getMethod ( methodName , $F33934 ) ; Object result = $F48029 ( method ) ; return result ; } catch ( IllegalAccessException e ) { throw new NoSuchMethodException ( methodName + NUM00 ) ; } catch ( InvocationTargetException e ) { throw $F399670 ( e ) ; } }
$F1309 public boolean isFillBelowLine $F72 $F32878 ( mFillBelowLine )
public void onPatchServiceResult ( boolean isUpgradePatch ) { if ( ! isRetryEnable ) $F13518 ( TinkerLog , TAG ) if ( ! isUpgradePatch ) $F13518 ( TinkerLog , TAG ) if $F3428 ( retryInfoFile ) { SharePatchFileUtil . safeDeleteFile ( retryInfoFile ) ; } if $F3428 ( tempPatchFile ) { SharePatchFileUtil . safeDeleteFile ( tempPatchFile ) ; } }
$F183285 ( fieldId , NOTE_ID , CLASS_NAME , INTERPRETER_CONTEXT )
public static boolean isStanza ( Packet packet ) { if ( packet instanceof Message ) return _BOOL ; if ( packet instanceof IQ ) return _BOOL ; if ( packet instanceof Presence ) return _BOOL ; return _BOOL ; }
$F1 public int execute ( final FormObject form , final int type , final String code , final int eventType , final char keyPressed ) { int messageCode = ActionHandler . NOMESSAGE ; if ( code instanceof String ) { final String js = code ; final $F806 args = JSFunction . convertToArray ( js ) ; $F244765 ( command , args ) if $F3106 ( command ) { messageCode = handleAFCommands ( form , command , js , args , eventType , keyPressed ) ; } } return messageCode ; }
private boolean needsUpdate ( Long bundleVersion , String beanVersion ) { if $F3578 ( beanVersion ) { $F26334 ( Log , TAG , bundleVersion ) $F26334 ( Log , TAG , beanVersion ) return _BOOL ; } else { try { long parsedVersion = Long . parseLong ( $F43978 ( beanVersion ) ) ; $F26334 ( Log , TAG , bundleVersion ) $F26334 ( Log , TAG , parsedVersion ) if ( bundleVersion > parsedVersion ) { return _BOOL ; } else { $F1594 ( Log , TAG ) } } catch ( NumberFormatException e ) { $F110901 ( Log , TAG , beanVersion ) fail ( BeanError . UNPARSABLE_FW_VERSION ) ; } } return _BOOL ; }
public void clear ( FacesContext facesContext , $F2100 ( viewMap ) ) { if $F14148 ( LOGGER , Level ) { LOGGER . log ( Level . FINEST , NUM00 ) ; } Map < String , ViewScopeContextObject > contextMap = getContextMap ( facesContext , viewMap ) ; $F12099 ( contextMap , destroyBeans , viewMap ) }
public void loadLogicalTablesWithGranularities ( Map < String , TableGroup > nameGroupMap , Set < ? extends Granularity > validGrains , ResourceDictionaries dictionaries ) { for ( Map . Entry < String , TableGroup > entry : nameGroupMap . entrySet ( ) ) { $F3477 ( logicalTableName , entry ) TableGroup group = entry . getValue ( ) ; loadLogicalTableWithGranularities ( logicalTableName , group , validGrains , dictionaries ) ; } }
protected int readBlock $F72 { blockSize = read ( ) ; int n = NUM00 ; if ( blockSize > NUM00 ) { try { int count = NUM00 ; while ( n < blockSize ) { count = in . read ( block , n , blockSize - n ) ; $F167039 ( count ) n += count ; } } $F29052 if ( n < blockSize ) { status = STATUS_FORMAT_ERROR ; } } return n ; }
$F1 public void addNewSubscription ( final Subscription newSubscription ) { final String clientID = newSubscription . getClientId ( ) ; List < ClientTopicCouple > clientSubscriptions = subscriptions . get ( clientID ) ; $F64950 ( clientSubscriptions , subscriptions , clientID ) clientSubscriptions . add ( newSubscription . asClientTopicCouple ( ) ) ; }
public X509CertPathImpl ( List < ? extends $F132633 > certs ) throws CertificateException { super ( NUM00 ) ; $F11550 ( size , certs ) certificates = new $F92729 ( size ) ; for ( $F119 ( i , size ) ) { final $F132633 cert = certs . get ( i ) ; if ( ! ( cert instanceof X509Certificate ) ) { throw new CertificateException ( NUM00 + i + NUM00 ) ; } certificates . add ( ( X509Certificate ) cert ) ; } }
public Process ( final String xmlString ) throws IOException , XMLException { initContext ( ) ; $F161688 ( in , xmlString ) readProcess ( in ) ; $F59 ( in ) }
public ConsulTopologyFraction $F72 { this . url = DEFAULT_URL ; }
protected String buildQualifierRegex ( String qualifierValue ) { $F83 ( sb ) $F84 ( sb ) sb . append ( qualifierValue ) ; $F84 ( sb ) $F92 ( sb ) }
public String shortenName ( String name , int desiredLength ) { $F1749 ( originalLength , name ) if ( ( desiredLength <= NUM00 ) || ( originalLength <= desiredLength ) ) { return name ; } int delta = originalLength - desiredLength ; int startCut = desiredLength / NUM00 ; $F280 ( result ) $F6937 ( result , name , startCut ) if ( ( ( startCut == NUM00 ) || ( $F17486 ( name , startCut ) ) ) && ( ( startCut + delta + NUM00 == originalLength ) || ( name . charAt ( startCut + delta + NUM00 ) != NUM00 ) ) ) $F86 ( result ) result . append ( name . substring ( startCut + delta + NUM00 , originalLength ) ) ; $F92 ( result ) }
public static Color blend ( Color color1 , Color color2 , double weight ) { double w2 = MathUtils . limit ( weight , NUM00 , NUM00 ) ; double w1 = NUM00 - w2 ; int r = ( int ) Math . round ( w1 * color1 . getRed ( ) + w2 * color2 . getRed ( ) ) ; int g = ( int ) Math . round ( w1 * color1 . getGreen ( ) + w2 * color2 . getGreen ( ) ) ; int b = ( int ) Math . round ( w1 * color1 . getBlue ( ) + w2 * color2 . getBlue ( ) ) ; int a = ( int ) Math . round ( w1 * color1 . getAlpha ( ) + w2 * color2 . getAlpha ( ) ) ; return new Color ( r , g , b , a ) ; }
public long kstkeip $F72 $F12907 ( Long , fields )
private void decideUILookAndFeel ( MainOptions options ) { try { boolean systemPlaf = _BOOL ; systemPlaf = options . system_plaf ; String systemPlafReq = System . getenv ( NUM00 ) ; if $F153572 ( systemPlafReq ) systemPlaf = _BOOL ; if ( systemPlaf ) UIManager . setLookAndFeel ( UIManager . getSystemLookAndFeelClassName ( ) ) ; } $F1516 ( exc ) }
public static BufferedImage toBufferedImage ( Image img , int type ) { if ( img instanceof BufferedImage ) { return ( BufferedImage ) img ; } BufferedImage bimage = new BufferedImage ( img . getWidth ( null ) , img . getHeight ( null ) , type ) ; $F5115 ( bGr , bimage ) $F37616 ( bGr , img ) $F355 ( bGr ) return bimage ; }
private JSONArray readArray $F72 throws JSONException { $F19928 ( result ) boolean hasTrailingSeparator = _BOOL ; while ( _BOOL ) { switch ( nextCleanInternal ( ) ) { $F52533 throw syntaxError ( NUM00 ) ; $F1262 if ( hasTrailingSeparator ) { $F318227 ( result ) } return result ; $F1262 $F1262 $F318227 ( result ) hasTrailingSeparator = _BOOL ; $F598 $F1267 pos -- ; } $F318234 ( result , nextValue ) switch ( nextCleanInternal ( ) ) { $F1262 return result ; $F1262 $F1262 hasTrailingSeparator = _BOOL ; $F598 $F248192 ( syntaxError ) } } }
public static $F96 hexStringToByteArray ( String strA ) { $F1538 ( result ) byte sum = $F19905 ; boolean nextCharIsUpper = _BOOL ; for ( $F1088 ( i , strA ) ) { $F1280 ( c , strA , i ) switch ( Character . toUpperCase ( c ) ) { $F1262 if ( nextCharIsUpper ) { $F121208 ( sum ) nextCharIsUpper = _BOOL ; } else { sum |= $F19905 ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } $F597 $F1262 if ( nextCharIsUpper ) { $F121208 ( sum ) nextCharIsUpper = _BOOL ; } else { sum |= $F19905 ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } $F597 $F1262 if ( nextCharIsUpper ) { $F121208 ( sum ) nextCharIsUpper = _BOOL ; } else { sum |= $F19905 ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } $F597 $F1262 if ( nextCharIsUpper ) { $F121208 ( sum ) nextCharIsUpper = _BOOL ; } else { sum |= $F19905 ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } $F597 $F1262 if ( nextCharIsUpper ) { $F121208 ( sum ) nextCharIsUpper = _BOOL ; } else { sum |= $F19905 ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } $F597 $F1262 if ( nextCharIsUpper ) { $F121208 ( sum ) nextCharIsUpper = _BOOL ; } else { sum |= $F19905 ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } $F597 $F1262 if ( nextCharIsUpper ) { $F121208 ( sum ) nextCharIsUpper = _BOOL ; } else { sum |= $F19905 ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } $F597 $F1262 if ( nextCharIsUpper ) { $F121208 ( sum ) nextCharIsUpper = _BOOL ; } else { sum |= $F19905 ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } $F597 $F1262 if ( nextCharIsUpper ) { $F121208 ( sum ) nextCharIsUpper = _BOOL ; } else { sum |= $F19905 ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } $F597 $F1262 if ( nextCharIsUpper ) { $F121208 ( sum ) nextCharIsUpper = _BOOL ; } else { sum |= $F19905 ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } $F597 $F1262 if ( nextCharIsUpper ) { $F121208 ( sum ) nextCharIsUpper = _BOOL ; } else { sum |= $F19905 ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } $F597 $F1262 if ( nextCharIsUpper ) { $F121208 ( sum ) nextCharIsUpper = _BOOL ; } else { sum |= $F19905 ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } $F597 $F1262 if ( nextCharIsUpper ) { $F121208 ( sum ) nextCharIsUpper = _BOOL ; } else { sum |= $F19905 ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } $F597 $F1262 if ( nextCharIsUpper ) { $F121208 ( sum ) nextCharIsUpper = _BOOL ; } else { sum |= $F19905 ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } $F597 $F1262 if ( nextCharIsUpper ) { $F121208 ( sum ) nextCharIsUpper = _BOOL ; } else { sum |= $F19905 ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } $F597 $F1262 if ( nextCharIsUpper ) { $F121208 ( sum ) nextCharIsUpper = _BOOL ; } else { sum |= $F19905 ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } $F597 $F2448 } } if ( ! nextCharIsUpper ) $F11389 $F11316 ( result ) }
public $F27878 listAvailableTerminals $F60993 ( type ) { $F207421 ( result ) for ( Node node : availableNodes ) { if ( ( node . getNumberOfArguments ( ) == NUM00 ) && $F207424 ( type , node ) ) $F207 ( result , node ) } return result ; }
public void removeSensorSelectionListener ( SensorSelectionListener listener ) { listenerList . remove ( SensorSelectionListener . class , listener ) ; }
public void write ( int c ) throws IOException { $F3576 ( _output ) $F36813 ( _output , c ) }
private static void testDexClassLoader $F72 { ClassLoader dexClassLoader = getDexClassLoader ( ) ; Class anotherClass ; try { anotherClass = dexClassLoader . loadClass ( NUM00 ) ; } catch ( ClassNotFoundException cnfe ) $F11389 Object another ; try $F108917 ( another , anotherClass ) catch ( IllegalAccessException ie ) $F7077 ( ie ) catch ( InstantiationException ie ) $F7077 ( ie ) dexClassLoader . getResource ( NUM00 ) ; }
public void register ( GridCacheTtlManager mgr ) { synchronized ( mux ) { $F21009 ( cleanupWorker , startCleanupWorker ) mgrs . add ( mgr ) ; } }
public static $F80742 toSqlTime $F14337 ( hour , minute , second ) { $F22273 newDate = toDate ( NUM00 , NUM00 , NUM00 , hour , minute , second ) ; if ( newDate != null ) { return new $F80742 $F16810 ( newDate ) ; } else $F1337 }
public void initializeKeyStore $F72 { try { Logger logger = ( $F476277 ) Logger . getLogger ( logName ) ; resetCurrentFileList ( logName ) ; addToCurrentFileList ( logName , logName , logName ) ; String logPath = lmanager . getProperty ( LogConstants . LOG_LOCATION ) ; if $F2364 ( logPath ) logPath += NUM00 ; String fileName = logName ; String loggerFileName = logPath + PREFIX + NUM00 + fileName ; String verifierFileName = logPath + PREFIX + NUM00 + fileName ; $F69245 ( Debug , logName , loggerFileName ) $F69245 ( Debug , logName , verifierFileName ) helper . initializeSecureLogHelper ( loggerFileName , logPassword , verifierFileName , logPassword ) ; Debug . message ( logName + NUM00 ) ; helper . initializeVerifier ( verifierFileName , logPassword , verPassword ) ; Debug . message ( logName + NUM00 ) ; } catch ( Exception e ) $F69256 ( Debug , logName , e ) }
private native $F96 imageDataToPlatformImageBytes ( $F96 imageData , int width , int height , long format ) ;
public void writeExif ( Bitmap bmap , OutputStream exifOutStream ) throws IOException { $F26831 ( bmap , exifOutStream , NULL_ARGUMENT_ ) OutputStream s = getExifWriterStream ( exifOutStream ) ; $F26834 ( bmap , Bitmap , s ) $F1206 ( s ) }
public static String cleanFolderStackingMarkers ( String filename ) { if $F20899 ( StringUtils , filename ) { $F1150 ( m , folderStackingPattern , filename ) if $F24133 ( m ) { return m . group ( NUM00 ) + m . group ( NUM00 ) ; } } return filename ; }
public void discard ( ServiceRegistrar reg ) { synchronized ( registrars ) { $F4640 ( terminated ) $F8249 ( reg ) sendDiscarded ( reg , null ) ; } }
public boolean isFinalState ( int state ) { return ( state < NUM00 ) ? _BOOL : fFinalStateFlags [ state ] ; }
public static String generateScaleMarkers ( int proteinLength , int maxNumScaleMarkers ) { $F17370 ( maxNumScaleMarkers ) int scale = calcScale ( proteinLength , maxNumScaleMarkers ) ; $F4000 ( sb ) int index = NUM00 ; int numRemaining = proteinLength ; while ( index <= proteinLength ) { index += scale ; numRemaining -= scale ; $F84 ( sb ) if ( ( numRemaining > NUM00 ) && ( numRemaining < scale ) ) { if ( numRemaining < ( scale / NUM00 ) ) $F111804 ( sb , proteinLength ) } if ( index >= proteinLength ) $F288 ( sb , proteinLength ) else $F288 ( sb , index ) } $F92 ( sb ) }
public void writeFigTreeBlock $F4673 ( settings ) throws IOException { $F8438 ( writer ) for ( $F3465 ( key , settings ) ) { $F16628 ( value , settings , key ) writer . println ( NUM00 + key + NUM00 + createString ( value ) + NUM00 ) ; } $F8438 ( writer ) }
public int hashCode $F72 { return font . hashCode ( ) ^ glyphs . length ; }
public boolean equals ( Object obj ) { $F3627 ( obj , this , _BOOL ) if ( obj instanceof Map == _BOOL ) { return _BOOL ; } Map map = ( Map ) obj ; $F33517 ( map , size , _BOOL ) MapIterator it = mapIterator ( ) ; try { while $F2921 ( it ) { $F8877 ( key , it ) $F21137 ( value , it ) if ( value == null ) { if ( map . get ( key ) != null || map . containsKey ( key ) == _BOOL ) { return _BOOL ; } } else { if ( $F115302 ( value , map , key ) == _BOOL ) { return _BOOL ; } } } } catch ( ClassCastException ignored ) { return _BOOL ; } catch ( NullPointerException ignored ) { return _BOOL ; } return _BOOL ; }
$F1 public void doctypeDecl ( String rootElement , String publicId , String systemId , Augmentations augs ) throws XNIException { fInDTD = _BOOL ; try { if ( fLexicalHandler != null ) { fLexicalHandler . startDTD ( rootElement , publicId , systemId ) ; } } $F122277 ( e ) if ( fDeclHandler != null ) { fDeclaredAttrs = new SymbolHash $F72 ; } }
public void writeExif $F27539 ( jpeg , exifOutFileName ) throws $F27136 { $F26831 ( jpeg , exifOutFileName , NULL_ARGUMENT_ ) OutputStream s = null ; try { s = getExifWriterStream ( exifOutFileName ) ; $F17918 ( s , jpeg ) $F1206 ( s ) } $F27615 ( closeSilently , s , e ) $F59 ( s ) }
public void cleanStart $F72 { Connection conn = getConnection ( _BOOL , _BOOL ) ; if ( conn == null ) $F4638 dropDatabase ( conn ) ; createUser ( conn ) ; createDatabase ( conn ) ; try $F1823 ( conn ) catch ( SQLException e2 ) $F81306 ( log , Level , e2 ) conn = null ; }
static TemplateModelException newMethodArgInvalidValueException ( String methodName , int argIdx , Object ... details ) { return new _TemplateModelException ( methodName , NUM00 , Integer . valueOf ( argIdx + NUM00 ) , NUM00 , details ) ; }
public static $F96 compressForZlib ( String stringToCompress ) { $F5475 ( returnValues ) try { returnValues = compressForZlib ( stringToCompress . getBytes ( NUM00 ) ) ; } $F55768 ( uee ) return returnValues ; }
private void loadMap ( String extension , String mimeType ) { if $F15257 ( mimeTypeToExtensionMap , mimeType ) $F1717 ( mimeTypeToExtensionMap , mimeType , extension ) extensionToMimeTypeMap . put ( extension , mimeType ) ; $F192176 ( isImageType , mimeType , imageMimeTypeSet ) }
$F281033 ( name , publicId , systemId )
private String convertTimestamp $F72 { String result = timestampFormat . replaceAll ( VALID_DATEFORMAT_CHAR_PATTERN + NUM00 , NUM00 ) ; $F389236 ( result , Pattern ) return result ; }
public static String encode $F97 ( bytes ) { int len = bytes . length ; final StringBuffer encoded = new StringBuffer ( ( len + NUM00 ) / NUM00 * NUM00 ) ; int i = NUM00 ; int j = len ; while ( j >= NUM00 ) { encoded . append ( to64 ( ( $F528005 ( bytes , i ) | ( int ) $F38343 ( bytes , i ) | ( int ) $F21296 ( bytes , i ) ) , NUM00 ) ) ; i += NUM00 ; j -= NUM00 ; } if ( j == NUM00 ) { encoded . append ( to64 ( $F528005 ( bytes , i ) | ( $F21296 ( bytes , i ) ) , NUM00 ) ) ; } if ( j == NUM00 ) { encoded . append ( to64 ( ( ( bytes [ i ] & NUM00 ) ) , NUM00 ) ) ; } $F92 ( encoded ) }
final public void print ( double v ) { Writer out = this . out ; $F8249 ( out ) try { $F2544 ( s , String , v ) $F170077 ( out , s ) } $F53427 ( log , Level , e ) }
public String toString $F72 { StringBuffer result = $F80120 ( ipAddress ) ; $F84 ( result ) result . append ( extendedNetworkPrefix ) ; $F92 ( result ) }
private static boolean containsChroot ( String zkHost ) $F132975 ( zkHost )
public static void onDatabase ( MongoClient client , String dbName , Consumer < MongoDatabase > dbOperation ) { if ( contains ( client . listDatabaseNames ( ) , dbName ) ) { dbOperation . accept ( client . getDatabase ( dbName ) ) ; } }
protected int createHashCode $F72 { int result = uri . hashCode ( ) ^ prefix . hashCode ( ) ; $F85331 ( result ) return result ; }
$F30789 ( d , imageView , getImageView , viewWidth , viewHeight , drawableWidth , drawableHeight , mBaseMatrix , widthScale , heightScale , mScaleType , ScaleType , scale , Math , mTempSrc , mTempDst , FIT_CENTER , ScaleToFit , FIT_START , FIT_END , FIT_XY , resetMatrix )
public static PlaceholderFragment newInstance ( int sectionNumber ) { PlaceholderFragment fragment = new PlaceholderFragment $F72 ; $F53033 ( args ) args . putInt ( ARG_SECTION1BER , sectionNumber ) ; fragment . setArguments ( args ) ; return fragment ; }
public String importTrl ( String directory , int AD_Client_ID , String AD_Language , String Trl_Table ) { String fileName = directory + File . separator + Trl_Table + NUM00 + AD_Language + NUM00 ; log . info ( fileName ) ; $F1705 ( in , fileName ) if $F1906 ( in ) { String msg = NUM00 + fileName ; log . log ( Level . SEVERE , msg ) ; return msg ; } try { TranslationHandler handler = new TranslationHandler ( AD_Client_ID ) ; $F2218 ( factory , SAXParserFactory ) $F49819 ( parser , factory ) parser . parse ( in , handler ) ; log . info ( NUM00 + handler . getUpdateCount ( ) ) ; return Msg . getMsg ( m_ctx , NUM00 ) + NUM00 + handler . getUpdateCount ( ) ; } catch ( Exception e ) { $F65048 ( log , Level , e ) $F92 ( e ) } }
public ResultFileReader ( Problem problem , File file ) throws IOException { super ( ) ; this . problem = problem ; $F438 ( reader , file ) $F36243 ( line , reader ) }
$F1 public void onFailure ( IMqttToken asyncActionToken , Throwable exception ) { $F301 ( exception ) Log . e ( NUM00 , $F5351 ( exception ) ) ; onDisconnect ( _BOOL ) ; }
$F1 public boolean exclude ( String identifier ) $F298 ( blacklist , identifier )
public static boolean checkCommunicationError ( Exception exc ) { Throwable rootCause = SolrException . getRootCause ( exc ) ; boolean wasCommError = ( rootCause instanceof ConnectException || rootCause instanceof ConnectTimeoutException || rootCause instanceof NoHttpResponseException || rootCause instanceof SocketException ) ; return wasCommError ; }
public boolean isReliable $F72 { return _BOOL ; }
$F4486 ( type , outputStack , n , outputStackTop , t , Math , System , top , owner )
static private String SHORT_Max_Plus $F72 { long tempValue = Short . MAX_VALUE + NUM00 ; $F33236 ( String , tempValue ) }
public void firePropertyChange $F109214 ( name , oldValue , newValue ) { beanContextChildSupport . firePropertyChange ( name , oldValue , newValue ) ; }
public static String encode ( String value ) { $F2936 ( value ) $F2936 ( value ) $F2936 ( value ) $F2936 ( value ) $F2936 ( value ) $F2936 ( value ) return value ; }
public void createDatabaseEntitiesForStoragePolicyTesting $F72 { createDatabaseEntitiesForStoragePolicyTesting ( AbstractServiceTest . STORAGE_POLICY_NAMESPACE_CD , Arrays . asList ( AbstractServiceTest . STORAGE_POLICY_RULE_TYPE ) , AbstractServiceTest . BDEF_NAMESPACE , AbstractServiceTest . BDEF_NAME , Arrays . asList ( AbstractServiceTest . FORMAT_FILE_TYPE_CODE ) , Arrays . asList ( AbstractServiceTest . STORAGE_NAME ) , Arrays . asList ( AbstractServiceTest . STORAGE_NAME_2 ) ) ; }
private PDFPage createPage ( int pagenum , PDFObject pageObj ) throws IOException { int rotation = NUM00 ; RectF mediabox = null ; RectF cropbox = null ; PDFObject mediaboxObj = getInheritedValue ( pageObj , NUM00 ) ; if ( mediaboxObj != null ) { mediabox = parseRect ( mediaboxObj ) ; } PDFObject cropboxObj = getInheritedValue ( pageObj , NUM00 ) ; if ( cropboxObj != null ) { cropbox = parseRect ( cropboxObj ) ; } PDFObject rotateObj = getInheritedValue ( pageObj , NUM00 ) ; if ( rotateObj != null ) { rotation = rotateObj . getIntValue ( ) ; } RectF bbox = ( ( cropbox == null ) ? mediabox : cropbox ) ; return new PDFPage ( pagenum , bbox , rotation , cache ) ; }
static Map addElementToMap ( String key , Set values , Map toMap ) { if $F57241 ( key , toMap ) $F1717 ( toMap , key , values ) return toMap ; }
public void saveBootProp $F72 throws IOException { if $F2137 ( bootProp , bootPropOrg ) { final String propFile = jarFolder + NUM00 ; final OutputStream os = new FileOutputStream ( propFile ) ; try { bootProp . store ( os , NUM00 ) ; } $F3229 ( os ) } }
private int append ( FileSystem fs , Configuration conf , Path src , PrintWriter writer , int currentRecordNumber ) throws IOException { BufferedReader reader = new BufferedReader ( new InputStreamReader ( fs . open ( src ) ) ) ; try { $F27015 ( line , reader ) while ( line != null ) { if $F3106 ( line ) { line = NUM00 + currentRecordNumber ++ ; } writer . println ( line ) ; $F36243 ( line , reader ) } return currentRecordNumber ; } $F3229 ( reader ) }
public PacketOutputStream writeTimestampLength ( final Calendar calendar , Timestamp ts , boolean fractionalSeconds ) { assureBufferCapacity ( fractionalSeconds ? NUM00 : NUM00 ) ; buffer . put ( ( byte ) ( fractionalSeconds ? NUM00 : NUM00 ) ) ; buffer . putShort ( ( short ) $F21621 ( calendar , Calendar ) ) ; buffer . put ( ( byte ) ( ( $F21623 ( calendar , Calendar ) + NUM00 ) & NUM00 ) ) ; buffer . put ( ( byte ) ( $F21625 ( calendar , Calendar ) & NUM00 ) ) ; buffer . put ( $F34510 ( calendar , Calendar ) ) ; buffer . put ( ( byte ) $F21629 ( calendar , Calendar ) ) ; buffer . put ( ( byte ) $F21631 ( calendar , Calendar ) ) ; if ( fractionalSeconds ) { buffer . putInt ( ts . getNanos ( ) / NUM00 ) ; } return this ; }
public int difference ( String s1 , String s2 ) throws EncoderException { return SoundexUtils . difference ( this , s1 , s2 ) ; }
public static String morpha ( String text , boolean tags ) { if $F2979 ( text ) $F2455 $F35105 ( textParts , whitespace , text ) $F83 ( result ) try { for ( String textPart : textParts ) { Morpha morpha = new Morpha ( new StringReader ( textPart ) , tags ) ; if $F35625 ( result ) $F86 ( result ) $F45691 ( result , morpha ) } } catch ( Error e ) { return text ; } catch ( $F3258 e ) { return text ; } $F92 ( result ) }
public static void deleteFile ( File file ) throws AdeUsageException { if $F7119 ( file ) { throw new AdeUsageException ( FAILED_DELETING_FILE + file . getPath ( ) ) ; } }
public Shape createCheckMark ( final int x , final int y , final int w , final int h ) { double xf = w / NUM00 ; double hf = h / NUM00 ; $F2268 ( path ) path . moveTo ( x , y + NUM00 * hf ) ; path . lineTo ( x + NUM00 * xf , y + NUM00 * hf ) ; path . lineTo ( x + NUM00 * xf , y + NUM00 * hf ) ; path . lineTo ( x + NUM00 * xf , y ) ; path . lineTo ( x + NUM00 * xf , y ) ; path . lineTo ( x + NUM00 * xf , y + NUM00 * hf ) ; $F2272 ( path ) return path ; }
$F202347 ( mRootDirectory , VolleyLog , files , file , fis , entry , CacheHeader , putEntry )
public TCPChannelClient ( ExecutorService executor , TCPChannelEvents eventListener , String ip , int port ) { this . executor = executor ; executorThreadCheck = new ThreadUtils . ThreadChecker $F72 ; executorThreadCheck . detachThread ( ) ; this . eventListener = eventListener ; InetAddress address ; try { address = InetAddress . getByName ( ip ) ; } catch ( UnknownHostException e ) $F3602 ( reportError ) if ( address . isAnyLocalAddress ( ) ) { socket = new TCPSocketServer ( address , port ) ; } else { socket = new TCPSocketClient ( address , port ) ; } $F2346 ( socket ) }
protected void cutSelectedBean $F72 { if $F22503 ( Debug ) $F18535 ( Debug ) if ( selectedBean == null || selectedBeanLocation == null ) { if $F22503 ( Debug ) $F32925 ( Debug , selectedBean ) if $F22503 ( Debug ) $F32925 ( Debug , selectedBeanLocation ) clearSelection ( ) ; $F665 } try { $F1659 ( serBean ) $F7054 ( oos , serBean ) oos . writeObject ( selectedBean ) ; } catch ( Exception e ) { $F301 ( e ) clearSelection ( ) ; if $F22503 ( Debug ) $F18535 ( Debug ) $F665 } cutBean = selectedBean ; selectedBeanBox . showCut ( selectedBean ) ; if $F22503 ( Debug ) $F18535 ( Debug ) }
public RemoverManager track ( Remover remover ) $F17642 ( handlers , remover , this )
public void actionPerformed $F72385 ( e ) { $F35561 ( source , e ) if ( ! ( source instanceof JMenuItem ) ) $F665 JMenuItem mi = ( JMenuItem ) source ; $F45667 ( name , mi ) OMGraphicHandlerLayer targetLayer = ( OMGraphicHandlerLayer ) layers . get ( name ) ; if ( targetLayer == null ) { Debug . message ( NUM00 , NUM00 + NUM00 + name ) ; $F665 } targetLayer . doAction ( ( OMGraphic ) transferData , new OMAction ( OMAction . UPDATE_GRAPHIC_MASK ) ) ; }
private void addEntry $F72 { model . addNewEntry ( ) ; removeButton . setEnabled ( _BOOL ) ; }
private void ensureSize $F72 { if ( children == EMPTY_CHILDREN ) { children = new FPNode $F380 ; $F665 } int newsize = children . length == NUM00 ? INITIAL_SIZE : ( children . length < < NUM00 ) ; $F8003 ( children , Arrays , newsize ) }
public UUID ( long mostSigBits , long leastSigBits ) { this . mostSigBits = mostSigBits ; this . leastSigBits = leastSigBits ; init ( ) ; }
public static PrettyPrint indentWithSpaces ( int number ) { $F6853 ( number ) $F18064 ( chars , number ) $F21017 ( Arrays , chars ) return new PrettyPrint ( chars ) ; }
private static void renderHandler ( FacesContext context , UIComponent component , Collection < ClientBehaviorContext . Parameter > params , String handlerName , Object handlerValue , String behaviorEventName , String submitTarget , boolean needsSubmit , boolean includeExec ) throws IOException { ResponseWriter writer = context . getResponseWriter ( ) ; String userHandler = getNonEmptyUserHandler ( handlerValue ) ; List < ClientBehavior > behaviors = getClientBehaviors ( component , behaviorEventName ) ; if ( ( null != behaviors ) && $F3817 ( behaviors ) && Util . componentIsDisabled ( component ) ) { behaviors = null ; } if ( params == null ) $F254727 ( params , Collections ) String handler = null ; switch ( getHandlerType ( behaviors , params , userHandler , needsSubmit , includeExec ) ) { case USER_HANDLER_ONLY : handler = userHandler ; $F597 case SINGLE_BEHAVIOR_ONLY : handler = getSingleBehaviorHandler ( context , component , behaviors . get ( NUM00 ) , params , behaviorEventName , submitTarget , needsSubmit ) ; $F597 case SUBMIT_ONLY : handler = getSubmitHandler ( context , component , params , submitTarget , _BOOL ) ; $F597 case CHAIN : handler = getChainedHandler ( context , component , behaviors , params , behaviorEventName , userHandler , submitTarget , needsSubmit ) ; $F597 $F1267 assert ( _BOOL ) ; } writer . writeAttribute ( handlerName , handler , null ) ; }
public String constructTSDBMetricName $F72 { StringBuilder sb = new StringBuilder ( getScope ( ) ) ; if $F1032 ( _namespace ) $F39640 ( sb , getNamespace ) $F92 ( sb ) }
$F1 protected void registerNewSelector $F72 throws IOException { synchronized ( selector ) { $F16910 keys = selector . keys ( ) ; Selector newSelector = null ; if ( selectorProvider == null ) { $F81052 ( newSelector , Selector ) } else { newSelector = selectorProvider . openSelector ( ) ; } for ( SelectionKey key : keys ) { SelectableChannel ch = key . channel ( ) ; NioSession session = ( NioSession ) key . attachment ( ) ; SelectionKey newKey = ch . register ( newSelector , key . interestOps ( ) , session ) ; session . setSelectionKey ( newKey ) ; } $F59 ( selector ) selector = newSelector ; } }
public void testCase4 $F72 { $F7829 byte $F3014 = { NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ; int aSign = NUM00 ; int bSign = NUM00 ; byte $F3018 = { NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F7838 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
protected synchronized void received $F103468 ( responseCode , stream , json ) { FollowerInfo result = parseFollowers ( stream , json ) ; if ( result != null ) { noError ( stream ) ; cached . put ( stream , result ) ; if ( type == Follower . Type . FOLLOWER ) { listener . receivedFollowers ( result ) ; if ( hasNewFollowers ( result . followers ) ) { listener . newFollowers ( result ) ; } } else if ( type == Follower . Type . SUBSCRIBER ) { listener . receivedSubscribers ( result ) ; } requested . add ( stream ) ; } else { String errorMessage = NUM00 ; if ( responseCode == NUM00 ) { errorMessage = NUM00 ; error ( stream , NUM00 ) ; } else if ( responseCode == NUM00 ) { errorMessage = NUM00 ; error ( stream , NUM00 ) ; } else if $F2862 ( responseCode ) { errorMessage = NUM00 ; error ( stream , NUM00 ) ; } else if ( responseCode == NUM00 ) { errorMessage = NUM00 ; error ( stream , NUM00 ) ; } else { errorMessage = NUM00 ; error ( stream , NUM00 ) ; } FollowerInfo errorResult = new FollowerInfo ( type , stream , errorMessage ) ; cached . put ( stream , errorResult ) ; if ( type == Follower . Type . FOLLOWER ) { listener . receivedFollowers ( errorResult ) ; } else if ( type == Follower . Type . SUBSCRIBER ) { listener . receivedSubscribers ( errorResult ) ; } } }
public static $F4203 $F5675 select ( Connection connection , String rawSqlQuery , RowProcessor $F4203 rowProcessor , Object ... parameters ) throws IOException , SQLException { PreparedStatement stmt = null ; ResultSet rs = null ; try { stmt = connection . prepareStatement ( rawSqlQuery ) ; for ( $F1139 ( index , parameters ) ) { JdbcUtils . bindParameter ( stmt , index + NUM00 , parameters [ index ] ) ; } $F47578 ( rs , stmt ) $F5675 result = Lists . newLinkedList ( ) ; while $F1682 ( rs ) { result . add ( rowProcessor . process ( rs ) ) ; } return result ; } finally { JdbcUtils . closeResultSet ( rs ) ; JdbcUtils . closeStatement ( stmt ) ; } }
public static long nowInNanos $F72 { return System . nanoTime ( ) ; }
public void test_clone $F72 { Format fm = new MockFormat $F72 ; Format fmc = ( Format ) fm . clone ( ) ; assertEquals ( fm . getClass ( ) , fmc . getClass ( ) ) ; }
public Future < SyncReply > sendRequest ( int xid , SyncMessage request ) throws RemoteStoreException { ensureConnected ( ) ; RemoteSyncFuture future = new RemoteSyncFuture ( xid , connectionGeneration ) ; $F124940 ( futureMap , Integer , xid , future ) if $F60125 ( futureMap , MAX_PENDING_REQUESTS ) { synchronized ( futureNotify ) { while $F60125 ( futureMap , MAX_PENDING_REQUESTS ) { try $F28646 ( futureNotify ) catch ( InterruptedException e ) { throw new RemoteStoreException ( NUM00 , e ) ; } } } } channel . writeAndFlush ( request ) ; return future ; }
public static boolean isEmpty ( String str ) { return ( null == str || NUM00 == str . length ( ) ) ; }
private static final boolean compareAndSetWaitStatus ( Node node , int expect , int update ) { return unsafe . compareAndSwapInt ( node , waitStatusOffset , expect , update ) ; }
public void enableDependency ( Capability c ) { $F84963 ( doNotCheckCapabilities ) if ( c == Capability . NOMINAL_ATTRIBUTES ) { enableDependency ( Capability . BINARY_ATTRIBUTES ) ; } else if ( c == Capability . BINARY_ATTRIBUTES ) { enableDependency ( Capability . UNARY_ATTRIBUTES ) ; } else if ( c == Capability . UNARY_ATTRIBUTES ) { enableDependency ( Capability . EMPTY_NOMINAL_ATTRIBUTES ) ; } else if ( c == Capability . NOMINAL_CLASS ) { enableDependency ( Capability . BINARY_CLASS ) ; } m_Dependencies . add ( c ) ; }
public IVariable [ ] extractRobotDebugVariables ( final int stackTraceId , $F87266 ( newVariables ) ) { final RobotDebugVariablesContext currentVariablesContext = findCurrentVariablesContext ( stackTraceId ) ; Map < String , IVariable > previousVariablesMap = initPreviousVariablesState ( currentVariablesContext ) ; final Map < String , IVariable > $F161023 ( nonGlobalVariablesMap ) ; if ( previousVariablesMap == null ) { initNewNonGlobalVariables ( newVariables , nonGlobalVariablesMap ) ; } else { initVariablesComparingWithPreviousState ( newVariables , previousVariablesMap , nonGlobalVariablesMap ) ; } final LinkedList < IVariable > currentVariablesList = createCurrentVariablesList ( nonGlobalVariablesMap ) ; saveCurrentVariablesState ( stackTraceId , currentVariablesContext , nonGlobalVariablesMap ) ; return currentVariablesList . toArray ( new IVariable $F2313 ( currentVariablesList ) ) ; }
public ResourcesPoet addInteger ( String name , String value ) { $F8382 ( bool , document ) $F34765 ( bool , name ) bool . appendChild ( document . createTextNode ( String . valueOf ( value ) ) ) ; resourceElement . appendChild ( bool ) ; return this ; }
$F146919 ( s , length , _BOOL , sum , i , digit , FormatException )
public static String mapFullWidthLetterToHalfWidth ( String text ) $F845
private static $F4203 void assertCollectionEqualsNoOrder ( $F9884 expected , $F9884 actual ) { String msg = String . format ( $F168487 ( expected , actual ) ) ; assertEquals ( msg , expected . size ( ) , actual . size ( ) ) ; for ( T e : expected ) { if $F2200 ( actual , e ) { msg = String . format ( NUM00 + NUM00 , e , expected , actual ) ; fail ( msg ) ; } } }
$F26560 ( requestMethod , responseCode , Request , HttpStatus )
public int availableInProcess $F72 { return Math . max ( NUM00 , maxInProcess - pending . size ( ) ) ; }
public void add ( double x ) { $F198570 as ; long b , v ; int m ; Cell a ; if ( ( as = cells ) != null || ! casBase ( b = base , Double . doubleToRawLongBits ( Double . longBitsToDouble ( b ) + x ) ) ) { boolean uncontended = _BOOL ; if ( as == null || $F198579 ( m , as ) || ( a = as [ getProbe ( ) & m ] ) == null || ! ( uncontended = a . cas ( v = a . value , Double . doubleToRawLongBits ( Double . longBitsToDouble ( v ) + x ) ) ) ) doubleAccumulate ( x , null , uncontended ) ; } }
public boolean shouldExecuteAction $F72 { $F18806 ( delay , _BOOL ) $F5740 ( timePassed , System , lastActionExecuted ) if ( timePassed > delay * NUM00 ) { $F3224 ( lastActionExecuted , System ) return _BOOL ; } return _BOOL ; }
public static int moveByWord ( String text , int column , boolean forward , boolean returnCursorAtEnd ) { int curColumn = column ; $F115 ( length , text ) int direction = forward ? NUM00 : - NUM00 ; boolean farWordEnd = ( ( direction == NUM00 && returnCursorAtEnd ) || ( direction == - NUM00 && ! returnCursorAtEnd ) ) ; boolean foundEarlyMatch = _BOOL ; if $F11994 ( UnicodeUtils , text , curColumn ) { curColumn = skipNonwhitespaceSimilar ( text , curColumn , forward ) ; if ( farWordEnd && curColumn - direction != column ) { curColumn -= direction ; foundEarlyMatch = _BOOL ; } } if ( ! foundEarlyMatch && curColumn >= NUM00 && curColumn < length ) { curColumn = skipWhitespace ( text , curColumn , forward ) ; if ( farWordEnd && curColumn >= NUM00 && curColumn < length ) { curColumn = skipNonwhitespaceSimilar ( text , curColumn , forward ) - direction ; } } if ( curColumn < NUM00 || curColumn >= length ) $F7629 return curColumn ; }
protected void handleOrDeferMessage ( DistributionMessage msg ) { synchronized ( startupLock ) { if ( beingSick || playingDead ) { if ( msg . containsRegionContentChange ( ) || msg instanceof PartitionMessageWithDirectReply ) { startupMessages . add ( new StartupEvent ( msg ) ) ; $F665 } } if ( ! processingEvents ) { startupMessages . add ( new StartupEvent ( msg ) ) ; $F665 } } dispatchMessage ( msg ) ; }
public boolean zoneExportRemoveVolumes ( List < NetworkZoningParam > zoningParams , $F46217 volumeURIs , String stepId ) { NetworkZoningParam zoningParam = zoningParams . get ( NUM00 ) ; _log . info ( String . format ( NUM00 , zoningParam . getExportGroupDisplay ( ) , volumeURIs . toString ( ) ) ) ; return doZoneExportMasksDelete ( zoningParams , volumeURIs , stepId ) ; }
private void shutdown $F72 { if ( nbestListWriter != null ) { $F973 ( logger ) $F59 ( nbestListWriter ) } if ( alignmentWriter != null ) { $F973 ( logger ) $F59 ( alignmentWriter ) } }
$F1 public void paintIcon ( Component c , Graphics g , int x , int y ) { Painter painter = ( Painter ) UIManager . get ( prefix + NUM00 + key ) ; if ( painter != null ) { JComponent jc = ( c instanceof JComponent ) ? ( JComponent ) c : null ; $F20230 ( gfx , g ) gfx . translate ( x , y ) ; painter . paint ( gfx , jc , width , height ) ; $F86480 ( gfx , x , y ) } }
protected void zoomImageToPosition $F39758 ( scale , centerX , centerY , durationMs ) { if ( scale > getMaxScale ( ) ) $F20182 ( scale , getMaxScale ) $F39760 ( oldScale , getCurrentScale ) final float deltaScale = scale - oldScale ; post ( mZoomImageToPositionRunnable = new ZoomImageToPosition ( CropImageView . this , durationMs , oldScale , deltaScale , centerX , centerY ) ) ; }
public List $F158545 list ( Database conn ) throws SQLException { ResultSet rs = null ; $F11282 ( statement , conn ) List $F158545 shardToChannels = new ArrayList $F158545 $F72 ; try { rs = statement . executeQuery ( select ) ; while $F1682 ( rs ) { $F13404 ( shard ) shard . put ( ShardChannelTable . SHARD_ID_COL , rs . getString ( ShardChannelTable . SHARD_ID_COL ) ) ; shard . put ( ShardChannelTable . CHANNEL_COL , rs . getString ( ShardChannelTable . CHANNEL_COL ) ) ; shardToChannels . add ( shard ) ; } } $F15722 ( close , rs , statement ) return shardToChannels ; }
public Boolean isHidden ( File f ) { $F20605 ( name , f ) if ( ( name != null ) && $F1263 ( name ) && $F4432 ( name ) ) $F29943 ( Boolean ) else { return Boolean . FALSE ; } }
private boolean scrollViewCanScrollVertically ( ScrollView scrollView , int direction ) { final int offset = Math . max ( NUM00 , scrollView . getScrollY ( ) ) ; final int range = computeVerticalScrollRange ( scrollView ) - scrollView . getHeight ( ) ; $F116 ( range , _BOOL ) if ( direction < NUM00 ) { return offset > NUM00 ; } else { return offset < range - NUM00 ; } }
public JarInfo loadJar $F72 throws IOException { ZipInputStream zis = null ; Manifest mf = null ; boolean empty = _BOOL ; try { zis = new ZipInputStream ( jarStream ) ; ZipEntry ent = null ; while $F78823 ( ent , zis ) { empty = _BOOL ; $F20605 ( name , ent ) if ( Manifest . isManifestName ( name ) ) { $F1538 ( baos ) byte $F76061 = $F10314 ; for ( $F589 ) { $F83249 ( len , zis , buffer ) $F29432 ( len ) $F11584 ( baos , buffer , len ) } $F1208 ( buf , baos ) mf = new Manifest ( buf ) ; } } } $F8012 ( ex ) catch ( Throwable th ) { $F301 ( th ) $F3495 ( th ) } finally { if ( zis != null ) $F40297 ( zis ) } $F40600 ( empty ) JarInfo ji = createJarInfo ( mf ) ; return ji ; }
public void invalidateTitleSortable $F72 { for ( Movie movie : $F7044 ( movieList ) ) { movie . clearTitleSortable ( ) ; } }
public void addRow ( Assignment head , double prob ) { if $F19274 ( prob ) $F932 headVars . addAll ( head . getVariables ( ) ) ; table . put ( head , prob ) ; }
public $F96 createJarFromFileContent $F2236 ( fileName , content ) throws IOException { $F1538 ( byteArrayOutputStream ) JarOutputStream jarOutputStream = new JarOutputStream ( byteArrayOutputStream ) ; JarEntry entry = new JarEntry ( fileName ) ; $F13533 ( entry , System ) jarOutputStream . putNextEntry ( entry ) ; $F60813 ( jarOutputStream , content ) $F22108 ( jarOutputStream ) $F59 ( jarOutputStream ) $F11316 ( byteArrayOutputStream ) }
private boolean goTo ( long day , boolean animate , boolean setSelected , boolean forceScroll ) { if ( setSelected ) { mSelectedDay . setTimeInMillis ( day ) ; } mTempDay . setTimeInMillis ( day ) ; final int position = getPositionFromDay ( day ) ; View child ; int i = NUM00 ; int top = NUM00 ; do { child = getChildAt ( i ++ ) ; $F32472 ( child ) top = child . getTop ( ) ; } while ( top < NUM00 ) ; int selectedPosition ; if ( child != null ) { selectedPosition = getPositionForView ( child ) ; } else { selectedPosition = NUM00 ; } if ( setSelected ) { mAdapter . setSelectedDay ( mSelectedDay ) ; } if ( position != selectedPosition || forceScroll ) { setMonthDisplayed ( mTempDay ) ; mPreviousScrollState = OnScrollListener . SCROLL_STATE_FLING ; if ( animate ) $F135051 ( smoothScrollToPositionFromTop , position , LIST_TOP_OFFSET , GOTO_SCROLL_DURATION , _BOOL ) else { postSetSelection ( position ) ; } } else $F72524 ( setSelected , setMonthDisplayed , mSelectedDay ) return _BOOL ; }
public boolean search ( V v ) { int h = hashMethod . hash ( v ) ; LinkedList $F2193 list = ( LinkedList $F2193 ) table [ h ] ; $F1933 ( list , _BOOL ) $F297 ( list , v ) }
public void closeJDBCConnection ( Connection conn ) { try $F6399 ( conn ) $F47553 ( subclassLogWrapper ) }
$F1 public void messageItemDetails ( String strClass , String item , String description , $F806 msgOption , $F2027 msgNumber , int defaultOption ) { $F397346 options = new $F4188 ( msgOption . length ) ; for ( $F1139 ( i , msgOption ) ) { options . put ( msgNumber [ i ] , msgOption [ i ] ) ; } messageItemDetails ( strClass , description , item , options , defaultOption ) ; }
public void addListener ( ColorMapListener listener ) $F207 ( listeners , listener )
protected void computePDists ( $F65332 relation , $F95002 knn , WritableDoubleDataStore pdists ) { FiniteProgress $F192797 ( prdsProgress , LOG , relation ) ; for ( $F42632 ( iditer , relation ) ) { final KNNList neighbors = knn . getKNNForDBID ( iditer , kreach + NUM00 ) ; int ks = NUM00 ; double ssum = NUM00 ; for ( DoubleDBIDListIter neighbor = neighbors . iter ( ) ; neighbor . valid ( ) && ks < kreach ; neighbor . advance ( ) ) { $F95009 ( DBIDUtil , neighbor , iditer ) final double d = neighbor . doubleValue ( ) ; ssum += d * d ; ks ++ ; } double pdist = ks > NUM00 ? Math . sqrt ( ssum / ks ) : NUM00 ; pdists . putDouble ( iditer , pdist ) ; LOG . incrementProcessed ( prdsProgress ) ; } LOG . ensureCompleted ( prdsProgress ) ; }
private static String appendIfMissing ( final String str , final CharSequence suffix , final boolean ignoreCase , final CharSequence ... suffixes ) { if ( str == null || isEmpty ( suffix ) || endsWith ( str , suffix , ignoreCase ) ) { return str ; } if $F22195 ( suffixes ) { for ( final CharSequence s : suffixes ) { if ( endsWith ( str , s , ignoreCase ) ) { return str ; } } } return str + suffix . toString ( ) ; }
private JSONArray requestAllFileSystems $F72 throws IOException , JSONException { $F19928 ( ret ) for ( Filesystem fs : filesystems ) { ret . put ( fs . getRootEntry ( ) ) ; } return ret ; }
ExternalProblem ( Process process ) { this ( process . getInputStream ( ) , process . getOutputStream ( ) ) ; RedirectStream . redirect ( process . getErrorStream ( ) , System . err ) ; }
protected static boolean networkMonitorExist ( String nwMonName ) { String classMethod = NUM00 ; $F75014 ( debug , classMethod , nwMonName ) if $F38892 ( nwMonName ) { if $F12866 ( debug ) $F49159 ( debug , classMethod ) return _BOOL ; } $F2689 ntwStats = NetworkMonitor . getInstanceNames ( ) ; $F7876 ( ss , nwMonName ) if $F105 ( ntwStats , ss ) { return _BOOL ; } else { return _BOOL ; } }
protected boolean error_recovery ( boolean debug ) throws $F34430 { $F10954 ( debug , debug_message ) if ( ! find_recovery_config ( debug ) ) { $F10954 ( debug , debug_message ) return _BOOL ; } read_lookahead ( ) ; for ( $F589 ) { $F10954 ( debug , debug_message ) $F47216 ( try_parse_ahead , debug ) if ( lookahead [ NUM00 ] . sym == EOF_sym ( ) ) { $F10954 ( debug , debug_message ) return _BOOL ; } if ( debug ) debug_message ( NUM00 + lookahead [ NUM00 ] . sym ) ; restart_lookahead ( ) ; } $F10954 ( debug , debug_message ) parse_lookahead ( debug ) ; return _BOOL ; }
public void andWith ( List < QueryPredicate > predicates ) $F21926 ( children , predicates )
public void addRoll ( MMRandom rng ) { int result = rng . randomInt ( this . faces ) + this . min ; all . addElement ( new Integer ( result ) ) ; this . total += result ; if ( keep != - NUM00 && all . size ( ) >= keep ) { this . total = NUM00 ; Collections . sort ( all , Collections . reverseOrder ( ) ) ; for ( $F119 ( i , keep ) ) { this . total += all . get ( i ) ; } } }
public boolean checkCanonicalUserOptions $F72 { boolean result ; OptionHandler handler ; $F806 userOptions ; $F806 userOptionsCheck ; print ( NUM00 ) ; try { handler = getDefaultHandler ( ) ; handler . setOptions ( getUserOptions ( ) ) ; if ( getDebug ( ) ) $F1210 ( print ) userOptions = handler . getOptions ( ) ; if ( getDebug ( ) ) $F14373 ( println , printOptions , userOptions ) if ( getDebug ( ) ) $F1210 ( println ) handler . setOptions ( userOptions . clone ( ) ) ; if ( getDebug ( ) ) $F1210 ( println ) userOptionsCheck = handler . getOptions ( ) ; compareOptions ( userOptions , userOptionsCheck ) ; println ( NUM00 ) ; result = _BOOL ; } catch ( Exception e ) { println ( NUM00 ) ; result = _BOOL ; $F121010 ( getDebug , println , e ) } return result ; }
public static void closeQuietly ( final Closeable closeable ) { if ( closeable != null ) { try $F881 ( closeable ) catch ( final RuntimeException rethrown ) { throw rethrown ; } catch ( final Exception ignored ) $F845 } }
public static void pushEncryptedMessage ( final TextSecureEnvelope envelope ) { while ( _BOOL ) { try { queue . put ( envelope ) ; $F665 } catch ( final InterruptedException e ) $F845 } }
public static int randomRangeInt ( int min , int max ) { return ( int ) ( Math . random ( ) < NUM00 ? ( ( NUM00 - Math . random ( ) ) * ( max - min ) + min ) : ( Math . random ( ) * ( max - min ) + min ) ) ; }
public void test_simplePrematureClose $F72 { Striterator iter = new Striterator $F49666 ( m_data ) ; int i = NUM00 ; while $F2921 ( iter ) { $F24630 ( iter ) if ( ++ i == NUM00 ) { $F59 ( iter ) assertTrue ( $F41112 ( iter ) ) ; } } assertTrue ( ! iter . isOpen ( ) ) ; assertTrue ( i == NUM00 ) ; }
public void pushDrawList ( PspGeList list ) $F9232 ( drawListQueue , list )
private void populateTaskList ( Volume source , Map < BlockMirror , Volume > groupMirrorSourceMap , TaskList taskList , String taskId , ResourceOperationTypeEnum operationType ) { $F66346 ( groupSet ) addTask ( taskList , source , taskId , operationType ) ; for ( Entry < BlockMirror , Volume > entry : groupMirrorSourceMap . entrySet ( ) ) { BlockMirror mirror = entry . getKey ( ) ; Volume mirrorSource = entry . getValue ( ) ; if ( source . isInCG ( ) && null != taskList . getTaskList ( ) ) { groupSet . add ( mirrorSource . getConsistencyGroup ( ) ) ; } } List < BlockConsistencyGroup > groups = _dbClient . queryObject ( BlockConsistencyGroup . class , groupSet ) ; for ( BlockConsistencyGroup group : groups ) { addTask ( taskList , group , taskId , operationType ) ; } }
public static Tuple max ( Iterator tuples , String field , Comparator cmp ) { Tuple t = null , tmp ; Object min = null ; if $F2921 ( tuples ) { $F199603 ( t , tuples ) min = t . get ( field ) ; } while $F2921 ( tuples ) { $F199603 ( tmp , tuples ) $F16628 ( obj , tmp , field ) if $F230914 ( cmp , obj , min ) { t = tmp ; min = obj ; } } return t ; }
public String clusterDefinitionsTipText $F72 $F2455
public void testConstructorSignBytesPositive1 $F72 { $F103294 int aSign = NUM00 ; $F89724 $F3023 ( aNumber , aSign , aBytes ) $F3030 ( rBytes ) $F3031 ( resBytes , aNumber ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , aNumber ) }
public void fling ( int startX , int startY , int velocityX , int velocityY , int minX , int maxX , int minY , int maxY , int overX , int overY ) { if $F125676 ( mFlywheel , isFinished ) { float oldVelocityX = mScrollerX . mCurrVelocity ; float oldVelocityY = mScrollerY . mCurrVelocity ; $F118179 ( Math , velocityX , oldVelocityX , velocityY , oldVelocityY ) } mMode = FLING_MODE ; mScrollerX . fling ( startX , velocityX , minX , maxX , overX ) ; mScrollerY . fling ( startY , velocityY , minY , maxY , overY ) ; }
$F103859 ( data , results , key )
$F52843 ( packed , map , i , j , count , value )
public void addListener ( NavigatorListener listener ) $F207 ( listeners , listener )
public void closeStream $F72 { CarbonUtil . closeStreams ( stream ) ; $F733 ( executorService ) }
public double patience ( int k , F f , int N ) { double pf = p ( f ) ; BinomialDistribution dist = new BinomialDistribution ( null , N , pf ) ; double p0 = Math . pow ( NUM00 - pf , N ) ; return NUM00 - ( dist . cumulativeProbability ( k - NUM00 ) - p0 ) / ( NUM00 - p0 ) ; }
public static List seriesNameListFromDataArray ( $F29684 data ) { int seriesCount = data . length ; List seriesNameList = new $F59124 ( seriesCount ) ; for ( $F119 ( i , seriesCount ) ) { seriesNameList . add ( NUM00 + ( i + NUM00 ) ) ; } return seriesNameList ; }
$F1 public int read ( char $F1310 , int off , int len ) throws IOException { ensureOpen ( ) ; if ( ( off < NUM00 ) || ( off > b . length ) || ( len < NUM00 ) || ( ( off + len ) > b . length ) || ( ( off + len ) < NUM00 ) ) $F81129 else $F14826 ( len ) $F55825 ( pos , count ) if ( pos + len > count ) { len = count - pos ; } $F14825 ( len ) System . arraycopy ( buf , pos , b , off , len ) ; pos += len ; return len ; }
public static void CF6 $F50490 ( x , f , c , nx ) { double sum1 = NUM00 ; double sum2 = NUM00 ; double yj ; for ( $F9993 ( j , nx ) ) { if ( j % NUM00 == NUM00 ) { yj = x [ j - NUM00 ] - NUM00 * x [ NUM00 ] * Math . cos ( NUM00 * PI * x [ NUM00 ] + j * PI / nx ) ; sum1 += yj * yj ; } else { $F63531 ( yj , x , j , Math , PI , nx ) sum2 += yj * yj ; } } f [ NUM00 ] = x [ NUM00 ] + sum1 ; f [ NUM00 ] = $F247205 ( x ) * $F247205 ( x ) + sum2 ; c [ NUM00 ] = x [ NUM00 ] - NUM00 * x [ NUM00 ] * Math . sin ( NUM00 * x [ NUM00 ] * PI + NUM00 * PI / nx ) - MYSIGN ( ( x [ NUM00 ] - NUM00 ) * $F247205 ( x ) ) * Math . sqrt ( Math . abs ( ( x [ NUM00 ] - NUM00 ) * $F247205 ( x ) ) ) ; c [ NUM00 ] = x [ NUM00 ] - NUM00 * x [ NUM00 ] * Math . sin ( NUM00 * x [ NUM00 ] * PI + NUM00 * PI / nx ) - MYSIGN ( NUM00 * Math . sqrt ( NUM00 - x [ NUM00 ] ) - NUM00 * $F247205 ( x ) ) * Math . sqrt ( Math . abs ( NUM00 * Math . sqrt ( NUM00 - x [ NUM00 ] ) - NUM00 * $F247205 ( x ) ) ) ; }
$F37597 ( tag , msg , args , sLevel , LEVEL_FATAL , String , Log )
private static void expandNumberAt ( String numberString , int startIndex , WordRelation wordRelation ) { expandNumber ( $F83851 ( numberString , startIndex ) , wordRelation ) ; }
public static boolean nullEquals ( String s1 , String s2 ) $F66007 ( s1 , s2 )
$F1 public void run $F72 { MultipleObjectsBundle data = generator . loadData ( ) ; if ( LOG . isVerbose ( ) ) { LOG . verbose ( NUM00 ) ; } try { if ( outputFile . exists ( ) && LOG . isVerbose ( ) ) { LOG . verbose ( NUM00 + outputFile + NUM00 + NUM00 ) ; } try ( OutputStreamWriter outStream = new FileWriter ( outputFile , _BOOL ) ) { writeClusters ( outStream , data ) ; } } $F283758 ( e ) if ( LOG . isVerbose ( ) ) { LOG . verbose ( NUM00 ) ; } }
private boolean usedAllRule17Directors ( $F2689 allocatedDirectors , PortAllocationContext context ) { $F47059 ( rule17Directors , getRule17Directors , context ) $F96731 ( director , allocatedDirectors , rule17Directors ) $F18904 ( rule17Directors ) }
public void stop $F72 { synchronized ( privateInstanceLock ) { $F2329 ( connectionAcceptThread ) } isStopped . set ( _BOOL ) ; try { $F7589 ( connectionAcceptThread ) $F14454 ( connectionAcceptThread ) } $F887 $F29053 ( serverSocket ) }
private static String expandSystemIdStrictOn ( String systemId , String baseSystemId ) throws URI . MalformedURIException { URI systemURI = new URI ( systemId , _BOOL ) ; if ( systemURI . isAbsoluteURI ( ) ) { return systemId ; } URI baseURI = null ; if $F6036 ( baseSystemId ) $F20182 ( baseURI , getUserDir ) else { baseURI = new URI ( baseSystemId , _BOOL ) ; if ( ! baseURI . isAbsoluteURI ( ) ) { baseURI . absolutize ( getUserDir ( ) ) ; } } systemURI . absolutize ( baseURI ) ; $F92 ( systemURI ) }
public static void free ( DMessage msg ) { int index = size2Index ( msg . getSize ( ) ) ; $F725 ( msg ) if ( index < NUM00 ) ; else if ( m_cache [ index ] != null ) ; else m_cache [ index ] = msg ; }
public boolean equalsIgnoreCase ( final StrBuilder other ) { $F3627 ( this , other , _BOOL ) if ( this . size != other . size ) { return _BOOL ; } final char thisBuf [ ] = this . buffer ; final char otherBuf [ ] = other . buffer ; for ( $F18298 ( i , size ) ) { final char c1 = thisBuf [ i ] ; final char c2 = otherBuf [ i ] ; if ( c1 != c2 && Character . toUpperCase ( c1 ) != Character . toUpperCase ( c2 ) ) { return _BOOL ; } } return _BOOL ; }
protected static Long convertUuidToLong ( UUID uuid ) { $F1338 ( uuid ) Long convertedUuid ; if ( uuid . version ( ) == NUM00 ) { convertedUuid = uuid . timestamp ( ) ; } else { convertedUuid = uuid . getMostSignificantBits ( ) ; } return convertedUuid ; }
public void addVMArguments ( String vmArgumentName , String vmArgumentValue ) { VmArgumentData vmArg = new VmArgumentData ( vmArgumentName , vmArgumentValue ) ; vmSet . add ( vmArg ) ; }
private void applyTo ( ClassVisitor v , Field f ) { if $F187400 ( Log ) { Log . logLine ( String . format ( NUM00 , f . toGenericString ( ) ) ) ; } v . visit ( f ) ; }
public void testCompareToEqualNeg $F72 { $F67214 $F79258 int aSign = - NUM00 ; int bSign = - NUM00 ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F79260 ( assertEquals , aNumber , bNumber ) }
public void testScreenshot $F72 throws Exception { $F13527 ( Log , LOG_TAG ) ScreenshotStubActivity activity = getActivity ( ) ; assertNotNull ( activity ) ; File screenshotDir = getScreenshotDir ( ) ; NewScreenshotObserver observer = new NewScreenshotObserver $F89450 ( screenshotDir ) ; observer . startWatching ( ) ; takeScreenshot ( ) ; if ( observer . getCreatedPath ( ) == null ) { synchronized ( observer ) { observer . wait ( SCREEN_WAIT_TIME_SEC * NUM00 ) ; } } assertNotNull ( String . format ( NUM00 , SCREEN_WAIT_TIME_SEC ) , observer . getCreatedPath ( ) ) ; File screenshotFile = new File ( screenshotDir , observer . getCreatedPath ( ) ) ; try { assertTrue ( $F21900 ( String , screenshotFile ) , screenshotFile . isFile ( ) ) ; assertTrue ( $F21900 ( String , screenshotFile ) , isValidImage ( screenshotFile ) ) ; } $F105993 ( screenshotFile ) }
public TaskResourceRep unlinkTargetVolumesFromSnapshotSession ( URI snapSessionURI , SnapshotSessionUnlinkTargetsParam param ) { return unlinkTargetVolumesFromSnapshotSession ( snapSessionURI , param , OperationTypeEnum . UNLINK_SNAPSHOT_SESSION_TARGET ) ; }
private List reverse ( List seq ) { $F52981 ( newSeq ) for ( $F2774 ( i , seq ) ) { DirectedEdge de = ( DirectedEdge ) i . next ( ) ; newSeq . addFirst ( de . getSym ( ) ) ; } return newSeq ; }
protected LocPathIterator changePartToRef ( final QName uniquePseudoVarName , WalkingIterator wi , final int numSteps , final boolean isGlobal ) { Variable var = new Variable $F72 ; var . setQName ( uniquePseudoVarName ) ; var . setIsGlobal ( isGlobal ) ; if ( isGlobal ) { ElemTemplateElement elem = getElemFromExpression ( wi ) ; StylesheetRoot root = elem . getStylesheetRoot ( ) ; $F64276 ( vars , root ) var . setIndex ( $F2281 ( vars ) ) ; } AxesWalker walker = wi . getFirstWalker ( ) ; for ( $F119 ( i , numSteps ) ) { assertion ( null != walker , NUM00 ) ; walker = walker . getNextWalker ( ) ; } if ( null != walker ) { FilterExprWalker few = new FilterExprWalker ( wi ) ; few . setInnerExpression ( var ) ; few . exprSetParent ( wi ) ; few . setNextWalker ( walker ) ; walker . setPrevWalker ( few ) ; wi . setFirstWalker ( few ) ; return wi ; } else { FilterExprIteratorSimple feis = new FilterExprIteratorSimple ( var ) ; feis . exprSetParent ( wi . exprGetParent ( ) ) ; return feis ; } }
$F1309 $F1 public String readLine $F72 throws IOException { $F20818 ( b ) int chr ; while $F61411 ( chr , read ) { if ( chr != NUM00 ) $F46352 ( b , chr ) else $F2495 ( b ) } $F92 ( b ) }
private void addToScene ( final Node items ) $F207 ( collection , items )
public String documentationHomePageUrl $F72 $F16566 ( properties )
public static boolean hasTaxonomyInfo ( SequencesReader reader ) { final File taxonFile = new File ( reader . path ( ) , TAXONOMY_FILE ) ; final File mappingFile = new File ( reader . path ( ) , TAXONOMY_TO_SEQUENCE_FILE ) ; if ( taxonFile . exists ( ) && mappingFile . exists ( ) ) { return _BOOL ; } else if ( taxonFile . exists ( ) || mappingFile . exists ( ) ) { throw new NoTalkbackSlimException $F580 ; } else { return _BOOL ; } }
public void removeSelectionListener ( final SelectionListener listener ) { checkWidget ( ) ; $F234144 ( listener , SWT ) listOfSelectionListeners . remove ( listener ) ; }
public void replace ( ClassNode type , int n ) $F19517 ( remove , n , push , type )
public void handleButton1Request ( RequestInvocationEvent event ) throws ModelControlException { submitCycle = _BOOL ; EntitiesModel model = ( EntitiesModel ) getModel ( ) ; $F123284 ( prop , getChild , PROPERTY_ATTRIBUTE ) $F59547 ( universalId , getPageSessionAttribute , UNIVERSAL_ID ) try { Map oldValues = model . getAttributeValues ( universalId , _BOOL ) ; Map values = prop . getAttributeValues ( oldValues , _BOOL , model ) ; String curRealm = ( String ) getPageSessionAttribute ( AMAdminConstants . CURRENT_REALM ) ; model . modifyEntity ( curRealm , universalId , values ) ; $F252709 ( setInlineAlertMessage , CCAlert ) } $F50339 ( setInlineAlertMessage , CCAlert , e ) forwardTo ( ) ; }
private static Boolean isInsidePolygon ( final GeoPoint point , final List < GeoPoint > polyPoints ) { final double latitude = point . getLatitude ( ) ; final double longitude = point . getLongitude ( ) ; final double sinLatitude = Math . sin ( latitude ) ; final double cosLatitude = Math . cos ( latitude ) ; final double sinLongitude = Math . sin ( longitude ) ; final double cosLongitude = Math . cos ( longitude ) ; double arcDistance = NUM00 ; Double prevAngle = null ; for ( final GeoPoint polyPoint : polyPoints ) { final Double angle = computeAngle ( polyPoint , sinLatitude , cosLatitude , sinLongitude , cosLongitude ) ; $F1338 ( angle ) if ( prevAngle != null ) { double angleDelta = angle - prevAngle ; if ( angleDelta < - Math . PI ) { angleDelta += Math . PI * NUM00 ; } if ( angleDelta > Math . PI ) { angleDelta -= Math . PI * NUM00 ; } if ( Math . abs ( angleDelta - Math . PI ) < Vector . MINIMUM_RESOLUTION ) $F1337 arcDistance += angleDelta ; } prevAngle = angle ; } if ( prevAngle != null ) { final Double lastAngle = computeAngle ( polyPoints . get ( NUM00 ) , sinLatitude , cosLatitude , sinLongitude , cosLongitude ) ; $F1338 ( lastAngle ) double angleDelta = lastAngle - prevAngle ; if ( angleDelta < - Math . PI ) { angleDelta += Math . PI * NUM00 ; } if ( angleDelta > Math . PI ) { angleDelta -= Math . PI * NUM00 ; } if ( Math . abs ( angleDelta - Math . PI ) < Vector . MINIMUM_RESOLUTION ) $F1337 arcDistance += angleDelta ; } if ( Math . abs ( arcDistance ) < Vector . MINIMUM_RESOLUTION ) $F1337 return arcDistance > NUM00 ; }
private Node deleteMax ( Node x ) { if ( x . right == null ) return x . left ; x . right = deleteMax ( x . right ) ; x . size = NUM00 + size ( x . left ) + size ( x . right ) ; x . height = NUM00 + Math . max ( height ( x . left ) , height ( x . right ) ) ; return balance ( x ) ; }
$F84990 ( lock , this , f , first , n , last , count , notFull )
protected void onProgress ( int itemcount , int size ) $F845
private TreeNode ( long nodeValue , SnmpMibAgent agent , TreeNode sup ) { this . nodeValue = nodeValue ; this . parent = sup ; agents . addElement ( agent ) ; }
public Week ( Date time ) { $F139512 ( this , time , TimeZone , Locale ) ; }
public CodeAttribute createCode $F72 { CodeAttribute code = new CodeAttribute $F72 ; for ( $F2277 ( i , _attributes ) ) { Attribute attr = _attributes . get ( i ) ; if ( attr instanceof CodeAttribute ) return ( CodeAttribute ) attr ; } $F1274 }
public BinaryOut ( String filename ) { try { $F12015 ( os , filename ) out = new BufferedOutputStream ( os ) ; } $F12241 ( e ) }
protected ObjectStreamClass readClassDescriptor $F72 throws $F6427 { ObjectStreamClass newClassDesc = new ObjectStreamClass $F72 ; $F1540 ( name , input ) if $F1277 ( name ) $F14525 newClassDesc . setName ( name ) ; newClassDesc . setSerialVersionUID ( input . readLong ( ) ) ; newClassDesc . setFlags ( input . readByte ( ) ) ; if ( descriptorHandle == - NUM00 ) $F20182 ( descriptorHandle , nextHandle ) registerObjectRead ( newClassDesc , descriptorHandle , _BOOL ) ; readFieldDescriptors ( newClassDesc ) ; return newClassDesc ; }
public static boolean createNewFile ( File targetFile ) { $F81294 ( targetFile ) try { return targetFile . createNewFile ( ) ; } $F3092 ( _BOOL ) }
public void testZeroOne $F72 { $F45030 $F45033 int aSign = NUM00 ; int bSign = NUM00 ; $F15143 $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F45034 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
protected int executePrepareStatement ( $F100709 columns , PreparedStatement statement ) throws SQLException { int bindNo = NUM00 ; for ( Column c : columns ) { setColumnValue ( statement , bindNo , c ) ; bindNo ++ ; } return statement . executeUpdate ( ) ; }
public Config ( SamlAuthorityConfiguration samlAuthorityConfig , TokenRestrictions tokenRestrictions , Collection < List $F65938 > validCerts , long clockTolerance , Collection < IDPConfig > inExternalIdps ) { Validate . notNull ( samlAuthorityConfig ) ; Validate . notNull ( tokenRestrictions ) ; Validate . notEmpty ( validCerts ) ; List $F65938 authorityCert = samlAuthorityConfig . getSigningCertificateChain ( ) ; boolean authorityCertInValidCerts = _BOOL ; for ( List $F65938 currentChain : validCerts ) { Validate . notEmpty ( currentChain ) ; Validate . noNullElements ( currentChain ) ; if ( ! authorityCertInValidCerts && currentChain . equals ( authorityCert ) ) { authorityCertInValidCerts = _BOOL ; } } Validate . isTrue ( authorityCertInValidCerts , NUM00 ) ; Validate . isTrue ( clockTolerance >= NUM00 ) ; this . samlAuthorityConfig = samlAuthorityConfig ; this . validCerts = validCerts ; this . clockTolerance = clockTolerance ; this . tokenRestrictions = tokenRestrictions ; HashMap < String , IDPConfig > idpsSet = new HashMap < String , IDPConfig > $F72 ; if ( inExternalIdps != null ) { for ( IDPConfig conf : inExternalIdps ) { if ( conf != null ) { idpsSet . put ( conf . getEntityID ( ) , conf ) ; } } } this . externalIdps = Collections . unmodifiableMap ( idpsSet ) ; }
public static void checkNotEmpty ( String string ) { if $F2979 ( string ) $F18044 }
protected void addCommonComponent ( XMLComponent component ) $F42353 ( fCommonComponents , component , addRecognizedParamsAndSetDefaults )
public void cancelUnnamedTasks $F72 { $F79150 ( unnamedTaskExecutor ) }
public static $F1986 minmax $F44092 ( values ) { if $F10471 ( values ) { return $F1990 ; } double min = values . get ( NUM00 ) ; double max = min ; $F2199 ( length , values ) for ( $F119 ( i , length ) ) { $F28095 ( value , values , i ) $F46000 ( min , Math , value ) $F46000 ( max , Math , value ) } $F264542 ( min , max ) }
$F32632 ( criteria , createCriteriaInternal , oredCriteria )
private char readEscapeCharacter $F72 throws IOException { if ( pos == limit && ! fillBuffer ( NUM00 ) ) $F25983 ( syntaxError ) char escaped = buffer [ pos ++ ] ; switch ( escaped ) { $F1262 if ( pos + NUM00 > limit && ! fillBuffer ( NUM00 ) ) $F25983 ( syntaxError ) char result = NUM00 ; for ( int i = pos , end = i + NUM00 ; i < end ; i ++ ) { char c = buffer [ i ] ; result <<= NUM00 ; if $F19295 ( c ) { result += ( c - NUM00 ) ; } else if $F19295 ( c ) { result += ( c - NUM00 + NUM00 ) ; } else if $F19295 ( c ) { result += ( c - NUM00 + NUM00 ) ; } else { throw new NumberFormatException ( NUM00 + new String ( buffer , pos , NUM00 ) ) ; } } pos += NUM00 ; return result ; $F12596 $F12596 $F12596 $F12596 $F12596 $F1262 lineNumber ++ ; lineStart = pos ; $F1262 $F1262 $F1262 $F1262 return escaped ; $F248192 ( syntaxError ) } }
private void updateParamsForAuth ( $F806 authNames , List $F44885 queryParams , $F2540 ( headerParams ) ) { for ( String authName : authNames ) { Authentication auth = authentications . get ( authName ) ; if ( auth == null ) $F1665 ( authName ) auth . applyToParams ( queryParams , headerParams ) ; } }
private void fixSpannedWithSpaces ( SpannableStringBuilder builder , int widthMeasureSpec , int heightMeasureSpec ) { $F657 ( startFix , System ) FixingResult result = addSpacesAroundSpansUntilFixed ( builder , widthMeasureSpec , heightMeasureSpec ) ; if ( result . fixed ) { removeUnneededSpaces ( widthMeasureSpec , heightMeasureSpec , builder , result ) ; } else { fallbackToString ( widthMeasureSpec , heightMeasureSpec ) ; } $F5740 ( fixDuration , System , startFix ) $F12258 ( Logger , TAG , fixDuration ) }
public EventsIntegrationTest $F72 { setResponseLogLengthLimit ( NUM00 ) ; $F165755 ( dateFormat ) $F4377 ( cal , Calendar ) $F139114 ( cal , Calendar ) $F165757 ( yesterday , dateFormat , cal ) yesterday += NUM00 ; $F90333 ( cal , Calendar ) $F113057 ( cal , Calendar ) $F165757 ( today , dateFormat , cal ) today += NUM00 ; $F90333 ( cal , Calendar ) $F113057 ( cal , Calendar ) $F165757 ( tomorrow , dateFormat , cal ) tomorrow += NUM00 ; $F90333 ( cal , Calendar ) $F113057 ( cal , Calendar ) $F165757 ( tomorrowPlus3 , dateFormat , cal ) tomorrowPlus3 += NUM00 ; $F90333 ( cal , Calendar ) $F139114 ( cal , Calendar ) $F165757 ( yesterdayMinus3 , dateFormat , cal ) yesterdayMinus3 += NUM00 ; $F90333 ( cal , Calendar ) $F113057 ( cal , Calendar ) $F165757 ( tomorrowPlus5 , dateFormat , cal ) tomorrowPlus5 += NUM00 ; $F90333 ( cal , Calendar ) $F139114 ( cal , Calendar ) $F165757 ( yesterdayMinus5 , dateFormat , cal ) yesterdayMinus5 += NUM00 ; $F165758 ( experiment , ExperimentFactory ) experiment . startTime = yesterdayMinus3 ; experiment . endTime = tomorrowPlus3 ; experiment . samplingPercent = NUM00 ; experiment . label = NUM00 ; experiment . applicationName = QBO + UUID . randomUUID ( ) ; $F165765 ( experimentComparisonStrategy ) experiment . setSerializationStrategy ( experimentComparisonStrategy ) ; }
private void removeBookmarkTrackingIcons $F72 { if ( trackingIcons != null ) { for ( $F2774 ( i , trackingIcons ) ) { GutterIconImpl ti = ( GutterIconImpl ) i . next ( ) ; if ( ti . getIcon ( ) == bookmarkIcon ) $F38599 ( i ) } } }
public SimpleMetricGroup ( GroupName name , Stream < ? extends Metric > i ) { this ( name , i . collect ( Collectors . < Metric > toList $F72 ) ) ; }
public boolean isInside ( Point point ) $F298 ( bounds , point )
private void resolveProtocols ( ClassLoader loader ) { ServiceLoader < ProtocolManagerFactory > serviceLoader = ServiceLoader . load ( ProtocolManagerFactory . class , loader ) ; loadProtocolManagerFactories ( serviceLoader ) ; }
public static List < InetAddress > hostAddresses $F72 { List < InetAddress > $F204 ( addrList ) ; Enumeration $F149690 IFCs = null ; try { IFCs = NetworkInterface . getNetworkInterfaces ( ) ; } catch ( SocketException ex ) $F5198 ( log , ex ) if ( IFCs != null ) { while $F1444 ( IFCs ) { NetworkInterface IFC = IFCs . nextElement ( ) ; try { if ( IFC . isUp ( ) ) { Enumeration < InetAddress > addresses = IFC . getInetAddresses ( ) ; while $F1444 ( addresses ) { InetAddress address = addresses . nextElement ( ) ; if ( ! address . isLoopbackAddress ( ) && ! address . isLinkLocalAddress ( ) ) $F207 ( addrList , address ) } } } catch ( SocketException ex ) { log . error ( $F89018 ( IFC , ex ) ) ; } } } return addrList ; }
public final static int caculateInSampleSize ( $F56525 options , int rqsW , int rqsH ) { final int height = options . outHeight ; final int width = options . outWidth ; int inSampleSize = NUM00 ; if ( rqsW == NUM00 || rqsH == NUM00 ) $F1082 if ( height > rqsH || width > rqsW ) { final int heightRatio = Math . round ( $F65168 ( height , rqsH ) ) ; final int widthRatio = Math . round ( $F65168 ( width , rqsW ) ) ; inSampleSize = heightRatio < widthRatio ? heightRatio : widthRatio ; } return inSampleSize ; }
public boolean hasStatus ( final StatusID status ) $F298 ( statuses , status )
$F1 public String toString $F72 { return $F263731 ( instanceList , outcomeList , weightList ) + sequenceIds + NUM00 + sequencePositions + NUM00 + addingAnotherInstancesAllowed + NUM00 + totalNonNullFeaturesCount + NUM00 ; }
static synchronized void computePRF_SSLv3 $F55962 ( out , secret , seed ) { $F113304 ( sha , init ) int pos = NUM00 ; int iteration = NUM00 ; $F96 digest ; while ( pos < out . length ) { $F2175 ( pref , iteration ) Arrays . fill ( pref , ( byte ) ( NUM00 + iteration ++ ) ) ; sha . update ( pref ) ; sha . update ( secret ) ; sha . update ( seed ) ; md5 . update ( secret ) ; md5 . update ( sha . digest ( ) ) ; $F54171 ( digest , md5 ) if ( pos + NUM00 > out . length ) { System . arraycopy ( digest , NUM00 , out , pos , out . length - pos ) ; pos = out . length ; } else { $F66840 ( System , digest , out , pos ) pos += NUM00 ; } } }
public void addChannelMap ( ChannelMap channelMap ) { if $F2200 ( mChannelMaps , channelMap ) { mChannelMaps . add ( channelMap ) ; $F12747 ( index , mChannelMaps , channelMap ) fireIntervalAdded ( this , index , index ) ; broadcast ( new ChannelMapEvent ( channelMap , Event . ADD ) ) ; } }
$F1 public boolean add ( E o ) { $F160092 ( o ) $F46660 ( offer , o , _BOOL ) $F8675 }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
public Object putResource ( Object key , Object value ) { return ( objectCache . put ( key , value ) ) ; }
public UidRange [ ] parseUidRange $F72 throws DecodingException { CharacterValidator validator = new MessageSetCharValidator $F72 ; String nextWord = consumeWord ( validator , _BOOL ) ; $F1384 ( commaPos , nextWord ) if ( commaPos == - NUM00 ) { return new UidRange [ ] { parseUidRange ( nextWord ) } ; } ArrayList < UidRange > rangeList = new ArrayList < UidRange > $F72 ; int pos = NUM00 ; while ( commaPos != - NUM00 ) { $F12715 ( range , nextWord , pos , commaPos ) UidRange set = parseUidRange ( range ) ; rangeList . add ( set ) ; pos = commaPos + NUM00 ; $F61909 ( commaPos , nextWord , pos ) } $F12716 ( range , nextWord , pos ) $F3761 ( rangeList , parseUidRange , range ) List < UidRange > merged = UidRange . mergeRanges ( rangeList ) ; return merged . toArray ( new UidRange $F2313 ( merged ) ) ; }
private String replaceSuffix $F1947 ( value , toReplace , changeTo ) { String vvalue ; if ( $F51374 ( value , toReplace ) || ( changeTo == null ) ) { return value ; } vvalue = removeSuffix ( value , toReplace ) ; if $F1238 ( value , vvalue ) { return value ; } else { return vvalue + changeTo ; } }
private void executeClaimedTask ( ClaimedTask claimedTask ) { if ( ! claimedTask . setStartTime ( $F4094 ) ) { _log . info ( NUM00 , claimedTask . getTask ( ) ) ; $F665 } ScanRangeTask task = claimedTask . getTask ( ) ; boolean releaseTask = _BOOL ; try { _scanWorkflow . renewScanRangeTasks ( ImmutableList . of ( task ) , QUEUE_RENEW_TTL ) ; releaseTask = asyncRangeScan ( task ) ; } finally { unclaimTask ( claimedTask , releaseTask ) ; _backgroundService . submit ( _startScansIfAvailableRunnable ) ; } }
private static boolean createNaviDirectory $F72 { final File dir = new File ( ConfigHelper . getConfigurationDirectory ( Constants . COMPANY_NAME , Constants . PROJECT_NAME ) ) ; return dir . exists ( ) || dir . mkdir ( ) ; }
public void updateButtonActionPerformed $F72 { $F933 ( readReceiveDelay ) $F933 ( readPulseWidth ) $F933 ( checkConsistency ) if ( curNode . getNodeType ( ) != nodeType ) { curNode . setNodeType ( nodeType ) ; } setNodeParameters ( ) ; changedNode = _BOOL ; editMode = _BOOL ; curNode = null ; addButton . setVisible ( _BOOL ) ; editButton . setVisible ( _BOOL ) ; deleteButton . setVisible ( _BOOL ) ; doneButton . setVisible ( _BOOL ) ; updateButton . setVisible ( _BOOL ) ; cancelButton . setVisible ( _BOOL ) ; nodeAddrField . setVisible ( _BOOL ) ; nodeAddrStatic . setVisible ( _BOOL ) ; statusText2 . setText ( stdStatus2 ) ; statusText3 . setText ( stdStatus3 ) ; statusText1 . setText ( $F241237 ( rb ) + Integer . toString ( nodeAddress ) ) ; errorInStatus1 = _BOOL ; }
public static Class toClass ( ClassFile cf , ClassLoader loader , ProtectionDomain domain ) throws CannotCompileException { try { $F12490 ( b , toBytecode , cf ) Method method ; $F131 args ; if ( domain == null ) { method = defineClass1 ; args = new Object [ ] { cf . getName ( ) , b , $F13791 , $F59092 ( b ) } ; } else { method = defineClass2 ; args = new Object [ ] { cf . getName ( ) , b , $F13791 , $F59092 ( b ) , domain } ; } return toClass2 ( method , loader , args ) ; } $F41337 ( e ) catch ( java . lang . reflect . InvocationTargetException e ) { throw new CannotCompileException ( e . getTargetException ( ) ) ; } catch ( Exception e ) { throw new CannotCompileException ( e ) ; } }
public Iterator < Target > targetIterator $F72 $F16048 ( targetList )
private void fitSizeOfScrolledContent $F72 { Point p = scrollComposite . getSize ( ) ; main . setSize ( main . computeSize ( p . x , SWT . DEFAULT ) ) ; }
$F60268 ( name )
private static Map < String , SnmpOid > buildPoolIndexMap ( SnmpCachedData cached ) { if ( cached == null ) $F83144 ( Collections ) final SnmpOid [ ] indexes = cached . indexes ; $F48385 ( datas , cached ) $F18832 ( len , indexes ) final Map < String , SnmpOid > $F26694 ( m , len ) ; for ( $F119 ( i , len ) ) { final SnmpOid index = indexes [ i ] ; $F45557 ( index ) final MemoryPoolMXBean mpm = ( MemoryPoolMXBean ) datas [ i ] ; $F45557 ( mpm ) $F127007 ( name , mpm ) $F45557 ( name ) m . put ( name , index ) ; } return m ; }
public DCryptoStrength ( JFrame parent ) throws CryptoException { super ( parent , res . getString ( NUM00 ) , ModalityType . DOCUMENT_MODAL ) ; initComponents ( ) ; }
private Component createSeparator $F72 { JSeparator sep = new JSeparator ( SwingConstants . VERTICAL ) ; $F114439 ( sep ) $F167982 ( sep ) return sep ; }
public void add ( final T object ) $F250537 ( mLock , mList , object , notifyDataSetChanged )
public void build ( RealmResults $F4203 results ) { int xIndex = NUM00 ; for ( T object : results ) { mValues . add ( buildEntryFromResultObject ( object , xIndex ++ ) ) ; } }
public $F96 generateSignature $F72 throws CryptoException , DataLengthException { contentDigest . doFinal ( mDash , mDash . length - hLen - sLen ) ; if ( sLen != NUM00 ) { random . nextBytes ( salt ) ; System . arraycopy ( salt , NUM00 , mDash , mDash . length - sLen , sLen ) ; } $F2175 ( h , hLen ) $F6163 ( contentDigest , mDash ) $F137382 ( contentDigest , h ) block [ block . length - sLen - NUM00 - hLen - NUM00 ] = NUM00 ; System . arraycopy ( salt , NUM00 , block , block . length - sLen - hLen - NUM00 , sLen ) ; $F96 dbMask = maskGeneratorFunction1 ( h , NUM00 , h . length , block . length - hLen - NUM00 ) ; for ( $F15868 ( i , dbMask ) ) { block [ i ] ^= dbMask [ i ] ; } block [ NUM00 ] &= ( NUM00 > > ( $F28143 ( block ) - emBits ) ) ; System . arraycopy ( h , NUM00 , block , block . length - hLen - NUM00 , hLen ) ; $F41606 ( block , trailer ) $F96 b = cipher . processBlock ( block , NUM00 , block . length ) ; clearBlock ( block ) ; return b ; }
public static $F3789 computeWeightMatrix ( final int quanth , final int quants , final int quantb ) { final int dim = quanth * quants * quantb ; assert ( dim > NUM00 ) ; final $F3789 m = new double [ dim ] [ dim ] ; for ( $F119 ( x , dim ) ) { final int hx = x / ( quantb * quants ) ; final int sx = ( x / quantb ) % quants ; final int bx = x % quantb ; for ( int y = x ; y < dim ; y ++ ) { final int hy = y / ( quantb * quants ) ; final int sy = ( y / quantb ) % quants ; final int by = y % quantb ; final double chx = Math . cos ( ( hx + NUM00 ) / quanth * MathUtil . TWOPI ) ; final double chy = Math . cos ( ( hy + NUM00 ) / quanth * MathUtil . TWOPI ) ; final double shx = MathUtil . cosToSin ( ( hx + NUM00 ) / quanth * MathUtil . TWOPI , chx ) ; final double shy = MathUtil . cosToSin ( ( hy + NUM00 ) / quanth * MathUtil . TWOPI , chy ) ; final double cos = chx * ( sx + NUM00 ) / quants - chy * ( sy + NUM00 ) / quants ; final double sin = shx * ( sx + NUM00 ) / quants - shy * ( sy + NUM00 ) / quants ; final double db = ( bx - by ) / ( double ) quantb ; final double val = NUM00 - Math . sqrt ( ( db * db + sin * sin + cos * cos ) / NUM00 ) ; m [ x ] [ y ] = m [ y ] [ x ] = val ; } } return m ; }
public void testNegPosFirstLonger $F72 { $F37335 $F37339 int aSign = - NUM00 ; int bSign = NUM00 ; byte $F3018 = { NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F37344 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
$F92963 ( b , off , len , this , newcount , count , remaining , inBufferPos , filledBufferSum , part , Math , currentBuffer , System , needNewBuffer )
public static void openFileIntent ( Context context , File openFile ) { if ( context != null && openFile . exists ( ) ) { try { Intent intent = getFileIntent ( context , openFile ) ; context . startActivity ( intent ) ; } catch ( Exception e ) { GlobalUtils . logThis ( TAG , NUM00 , e ) ; } } }
public static $F212479 toSqlDate ( String date ) { $F22273 newDate = toDate ( date , NUM00 ) ; if ( newDate != null ) { return new $F212479 $F16810 ( newDate ) ; } else $F1337 }
$F3441 ( journalWriter , writer , journalFileTmp , Util , MAGIC , VERSION_1 , Integer , appVersion , valueCount , entry , lruEntries , DIRTY , CLEAN , journalFile , renameTo , journalFileBackup , _BOOL )
public static int round ( final float value ) { final int bits = Float . floatToRawIntBits ( value ) ; final int biasedExp = bits > > NUM00 & NUM00 ; final int shift = NUM00 - NUM00 + MAX_FLOAT_EXPONENT - biasedExp ; if ( ( shift & - NUM00 ) == NUM00 ) { int extendedMantissa = NUM00 | bits & NUM00 ; $F52811 ( bits , extendedMantissa ) return ( extendedMantissa > > shift ) + NUM00 > > NUM00 ; } else $F23220 ( value ) }
public static PlainText plain ( short text ) $F21034 ( plain , Integer , text )
public AttributeInfo copy ( ConstPool newCp , Map classnames ) { Copier copier = new Copier ( info , constPool , newCp , classnames ) ; try { copier . parameters ( ) ; return new ParameterAnnotationsAttribute ( newCp , getName ( ) , copier . close ( ) ) ; } catch ( Exception e ) { throw new RuntimeException $F3362 ( e ) ; } }
private String createComponentChanges $F72 { $F83 ( builder ) for ( ServiceCatalogDiff serviceCatalogDiff : diffList ) $F9821 ( builder , createApiChanges , serviceCatalogDiff ) $F92 ( builder ) }
public static synchronized void it ( String description , UnsafeBlock block ) { it ( description , identity ( ) , block ) ; }
public static boolean isWritable ( final File file , final boolean makeDirs ) { if ( file == null ) $F277465 ( Log , _BOOL ) final String fileParentDir = file . getParent ( ) ; if $F20899 ( TextUtils , fileParentDir ) { $F15885 ( fileDir , fileParentDir ) if $F1906 ( fileDir ) { if ( makeDirs ) return makeDirsForFile ( file ) ; else return _BOOL ; } } boolean isWritable = _BOOL ; if $F3428 ( file ) isWritable = file . canWrite ( ) ; else { try { isWritable = file . createNewFile ( ) ; } $F29052 if ( isWritable ) $F7111 ( isWritable , file ) } return isWritable ; }
$F112299 ( oid )
private static void createOrgAuthConfig ( String realmName ) throws Exception { String classMethod = NUM00 ; OrganizationConfigManager org = new OrganizationConfigManager ( ssoToken , realmName ) ; ServiceConfig orgConfig = org . getServiceConfig ( AUTH_SERVICE_NAME ) ; if ( orgConfig != null ) { Map aa = orgConfig . getAttributes ( ) ; if $F6299 ( debug ) { $F69245 ( debug , classMethod , realmName ) $F69245 ( debug , classMethod , aa ) } String orgName = realmName ; if ( LDAPUtils . isDN ( realmName ) ) { orgName = LDAPUtils . rdnValueFromDn ( realmName ) ; } String authConfigName = orgName + NUM00 ; String adminAuthConfigName = orgName + NUM00 ; $F125374 ( authConfigAttrValue , aa , ATTR_ORG_AUTH_MODULE ) $F75014 ( debug , classMethod , authConfigAttrValue ) $F19850 ( newVal ) if ( $F6886 ( authConfigAttrValue ) && ! authConfigAttrValue . contains ( authConfigName ) ) { newVal . add ( authConfigName ) ; orgConfig . replaceAttributeValues ( ATTR_ORG_AUTH_MODULE , authConfigAttrValue , newVal ) ; } $F125374 ( adminConfigAttrValue , aa , ATTR_ADMIN_AUTH_MODULE ) $F19232 ( debug , adminConfigAttrValue ) if ( $F6886 ( adminConfigAttrValue ) && ! adminConfigAttrValue . contains ( adminAuthConfigName ) ) { $F725 ( newVal ) newVal . add ( adminAuthConfigName ) ; orgConfig . replaceAttributeValues ( ATTR_ADMIN_AUTH_MODULE , adminConfigAttrValue , newVal ) ; } $F35323 ( aa , orgConfig ) ServiceConfig s = org . getServiceConfig ( AUTH_CONFIG_SERVICE ) ; $F105642 ( authConfig , s , NAMED_CONFIG ) if ( authConfig == null ) { s . addSubConfig ( NAMED_CONFIG , null , NUM00 , null ) ; authConfig = s . getSubConfig ( NAMED_CONFIG ) ; } $F28017 ( aMap ) aMap . put ( ATTR_AUTH_CONFIG , authConfigAttrValue ) ; authConfig . addSubConfig ( authConfigName , SUB_NAMED_CONFIG , NUM00 , aMap ) ; $F725 ( aMap ) aMap . put ( ATTR_AUTH_CONFIG , adminConfigAttrValue ) ; authConfig . addSubConfig ( adminAuthConfigName , SUB_NAMED_CONFIG , NUM00 , aMap ) ; } }
public void read ( ByteCodeParser in ) throws IOException { $F5952 ( length , in ) $F11214 ( _maxStack , in ) $F11214 ( _maxLocals , in ) $F5952 ( codeLength , in ) $F1325 ( _code , codeLength ) $F23504 ( in , _code , codeLength ) $F11213 ( exnCount , in ) for ( $F119 ( i , exnCount ) ) { ExceptionItem exn = new ExceptionItem $F72 ; exn . setStart ( in . readShort ( ) & NUM00 ) ; exn . setEnd ( in . readShort ( ) & NUM00 ) ; exn . setHandler ( in . readShort ( ) & NUM00 ) ; exn . setType ( in . readShort ( ) & NUM00 ) ; _exceptions . add ( exn ) ; } $F11213 ( attrCount , in ) for ( $F119 ( i , attrCount ) ) { Attribute attr = in . parseAttribute ( ) ; _attributes . add ( attr ) ; } }
public void testSkip $F72 throws Exception { $F1191 ( data ) $F45652 ( tis , data ) $F45657 ( cis , tis ) int expected = data . length ; $F2175 ( result , expected ) int skipped = ( int ) cis . skip ( NUM00 ) ; int ind = skipped ; int got = skipped + $F3259 ( cis , result ) ; while ( _BOOL ) { for ( $F8122 ( j , got , ind ) ) { if $F118498 ( result , j , data , ind ) { fail ( NUM00 + NUM00 + data [ ind + j ] + NUM00 + result [ j ] ) ; } } if ( got == expected ) $F5153 else if ( got > expected ) { fail ( $F38 ) ; } else { ind = got ; got += $F3259 ( cis , result ) ; } } if ( ( got = $F3259 ( cis , result ) ) != - NUM00 ) { fail ( NUM00 + NUM00 + got + NUM00 ) ; } }
void addString ( int c ) { if ( strpos == str . length ) { char newstr [ ] = new char $F22598 ( str ) ; $F7057 ( System , str , newstr ) str = newstr ; } $F1479 ( str , strpos , c ) }
$F16587 ( oid )
public CholeskyDecomposition ( Matrix Arg ) { $F3791 ( A , Arg ) $F323738 ( n , Arg ) $F10226 ( L , n ) isspd = ( Arg . getColumnDimension ( ) == n ) ; for ( $F119 ( j , n ) ) { $F42658 ( Lrowj , L , j ) double d = NUM00 ; for ( $F119 ( k , j ) ) { $F42658 ( Lrowk , L , k ) double s = NUM00 ; for ( $F119 ( i , k ) ) $F323742 ( s , Lrowk , i , Lrowj ) Lrowj [ k ] = s = ( A [ j ] [ k ] - s ) / L [ k ] [ k ] ; d = d + s * s ; isspd = isspd & ( A [ k ] [ j ] == A [ j ] [ k ] ) ; } d = A [ j ] [ j ] - d ; isspd = isspd & ( d > NUM00 ) ; L [ j ] [ j ] = Math . sqrt ( Math . max ( d , NUM00 ) ) ; for ( $F2634 ( k , j , n ) ) $F211213 ( L , j , k ) } }
protected void findCandidateCrossings ( S2Point a , S2Point b , $F3807 candidateCrossings ) { Preconditions . checkState ( indexComputed ) ; $F17427 cover = Lists . newArrayList ( ) ; getCovering ( a , b , _BOOL , cover ) ; $F87079 ( uniqueSet ) getEdgesInParentCells ( cover , uniqueSet ) ; getEdgesInChildrenCells ( a , b , cover , uniqueSet ) ; $F725 ( candidateCrossings ) candidateCrossings . addAll ( uniqueSet ) ; }
$F183285 ( fieldId , TRUE_AS_OF_SECS , SOURCE , SYSTEM )
public RepositoryLocation $F8306 ( repositoryName , pathComponents ) throws MalformedRepositoryLocationException { if $F4251 ( repositoryName ) { throw new MalformedRepositoryLocationException $F580 ; } if ( pathComponents == null ) { throw new MalformedRepositoryLocationException $F580 ; } for ( String pathComp : pathComponents ) { if $F4251 ( pathComp ) { throw new MalformedRepositoryLocationException $F580 ; } } this . repositoryName = repositoryName ; this . path = pathComponents ; }
public void addProperty ( String key , String value ) $F206184 ( carbonProperties , key , value )
protected JavaElementDelta createDeltaTree ( IJavaElement element , JavaElementDelta delta ) { JavaElementDelta childDelta = delta ; ArrayList ancestors = getAncestors ( element ) ; if ( ancestors == null ) { if ( equalsAndSameParent ( delta . getElement ( ) , getElement ( ) ) ) { this . kind = delta . kind ; this . changeFlags = delta . changeFlags ; this . movedToHandle = delta . movedToHandle ; this . movedFromHandle = delta . movedFromHandle ; } } else { for ( $F12534 ( i , size , ancestors ) ) { IJavaElement ancestor = ( IJavaElement ) ancestors . get ( i ) ; JavaElementDelta ancestorDelta = new JavaElementDelta ( ancestor ) ; ancestorDelta . addAffectedChild ( childDelta ) ; childDelta = ancestorDelta ; } } return childDelta ; }
$F1 public String toString $F72 $F2905 ( getTitle )
public int size $F72 { $F1084 ( hmap ) $F1651 ( hmap ) }
public static String replace $F1947 ( inString , oldPattern , newPattern ) { if ( ! hasLength ( inString ) || ! hasLength ( oldPattern ) || newPattern == null ) { return inString ; } $F83 ( sb ) int pos = NUM00 ; $F12747 ( index , inString , oldPattern ) $F1749 ( patLen , oldPattern ) while ( index >= NUM00 ) { $F13037 ( sb , inString , pos , index ) sb . append ( newPattern ) ; pos = index + patLen ; index = inString . indexOf ( oldPattern , pos ) ; } $F13047 ( sb , inString , pos ) $F92 ( sb ) }
public boolean coordinateInZone ( Id < ActivityFacility > zoneID , Coord coordinate ) { Point point = MGC . xy2Point ( $F5048 ( coordinate ) ) ; return pointInZone ( zoneID , point ) ; }
public String associatorTipText $F72 $F2455
public XwavesLabelfileReader ( Reader reader ) throws IOException { this . reader = new BufferedReader ( reader ) ; parseLabels ( ) ; $F59 ( reader ) }
public static double parseDoubleDefault ( String s , double def ) { $F1933 ( s , def ) try $F2404 ( Double , s ) $F8835 ( def ) }
public static void registerApp ( int application , String appName ) throws AppIDException { if ( ( application & APP_ID_MASK ) != application ) { throw new InvalidAppIDValueException ( application ) ; } String oldApp = appIdMap . putIfAbsent ( application , appName ) ; if $F10335 ( oldApp , appName ) { throw new AppIDInUseException ( application , oldApp , appName ) ; } }
public boolean putProfile ( Profile profile ) $F8587 ( putProfile , profile , _BOOL )
public void print ( char c ) $F91838 ( writer , c )
public void initBlockViews $F72 { if ( mWorkspaceView != null ) { $F40168 rootBlocks = mWorkspace . getRootBlocks ( ) ; ConnectionManager connManager = mWorkspace . getConnectionManager ( ) ; for ( $F2277 ( i , rootBlocks ) ) { BlockGroup bg = mViewFactory . buildBlockGroupTree ( rootBlocks . get ( i ) , connManager , mTouchHandler ) ; mWorkspaceView . addView ( bg ) ; } } }
protected void clearAllTrails ( SSOTokenID tokenID ) { boolean removed = _BOOL ; $F1822 ( key , tokenID ) synchronized ( mapTokenIDs ) { removed = ( mapTokenIDs . remove ( key ) != null ) ; } }
public DNetscapeCaRevocationUrl $F157465 ( parent , value ) throws IOException $F157466 ( super , parent , setTitle , res , initComponents , prepopulateWithValue , value )
$F13735 ( prefix , namespace , attName , attValue , xmlWriter )
public static $F2027 parseNumberList $F25022 ( listStr , minVal , maxVal , allowZero ) { $F2027 values ; if $F1731 ( listStr ) { $F4470 ( values ) values [ NUM00 ] = parseIntRange ( listStr , minVal , maxVal , allowZero ) ; } else { $F6542 ( valueStrs , listStr ) int len = valueStrs . length ; $F3936 ( values , len ) for ( $F119 ( i , len ) ) { values [ i ] = parseIntRange ( valueStrs [ i ] , minVal , maxVal , allowZero ) ; } } return values ; }
public DirectoryOrFileNotFoundException ( String entity , String name ) { super ( String . format ( _errorMessage , entity , name ) ) ; }
public void closeStream $F72 { CarbonUtil . closeStreams ( stream ) ; $F733 ( executorService ) }
void scramble $F72 { initialSize = getSize ( ) ; int $F26223 = new int [ initialSize . height / NUM00 ] ; double f = initialSize . width / $F111967 ( a ) ; for ( $F45516 ( i , a ) ) { a [ i ] = $F2354 ( i , f ) ; } for ( $F45516 ( i , a ) ) { int j = ( int ) ( i * Math . random ( ) ) ; int t = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = t ; } arr = a ; }
private int readAnnotationValue ( int v , final $F1469 buf , final String name , final AnnotationVisitor av ) { int i ; if ( av == null ) { switch ( b [ v ] & NUM00 ) { $F1262 return v + NUM00 ; $F1262 return readAnnotationValues ( v + NUM00 , buf , _BOOL , null ) ; $F1262 return readAnnotationValues ( v + NUM00 , buf , _BOOL , null ) ; $F1267 return v + NUM00 ; } } switch $F44579 ( b , v ) { $F1262 $F1262 $F1262 $F1262 av . visit ( name , readConst ( readUnsignedShort ( v ) , buf ) ) ; v += NUM00 ; $F597 $F1262 av . visit ( name , new Byte ( ( byte ) readInt ( items [ readUnsignedShort ( v ) ] ) ) ) ; v += NUM00 ; $F597 $F1262 av . visit ( name , readInt ( items [ readUnsignedShort ( v ) ] ) == NUM00 ? Boolean . FALSE : Boolean . TRUE ) ; v += NUM00 ; $F597 $F1262 av . visit ( name , new Short ( ( short ) readInt ( items [ readUnsignedShort ( v ) ] ) ) ) ; v += NUM00 ; $F597 $F1262 av . visit ( name , new Character ( ( char ) readInt ( items [ readUnsignedShort ( v ) ] ) ) ) ; v += NUM00 ; $F597 $F1262 av . visit ( name , readUTF8 ( v , buf ) ) ; v += NUM00 ; $F597 $F1262 av . visitEnum ( name , readUTF8 ( v , buf ) , readUTF8 ( v + NUM00 , buf ) ) ; v += NUM00 ; $F597 $F1262 av . visit ( name , Type . getType ( readUTF8 ( v , buf ) ) ) ; v += NUM00 ; $F597 $F1262 v = readAnnotationValues ( v + NUM00 , buf , _BOOL , av . visitAnnotation ( name , readUTF8 ( v , buf ) ) ) ; $F597 $F1262 int size = readUnsignedShort ( v ) ; v += NUM00 ; if ( size == NUM00 ) { return readAnnotationValues ( v - NUM00 , buf , _BOOL , av . visitArray ( name ) ) ; } switch ( this . b [ v ++ ] & NUM00 ) { $F1262 $F2175 ( bv , size ) for ( i = NUM00 ; i < size ; i ++ ) { bv [ i ] = ( byte ) readInt ( items [ readUnsignedShort ( v ) ] ) ; v += NUM00 ; } av . visit ( name , bv ) ; -- v ; $F597 $F1262 $F57515 ( zv , size ) for ( i = NUM00 ; i < size ; i ++ ) { zv [ i ] = readInt ( items [ readUnsignedShort ( v ) ] ) != NUM00 ; v += NUM00 ; } av . visit ( name , zv ) ; -- v ; $F597 $F1262 $F5099 ( sv , size ) for ( i = NUM00 ; i < size ; i ++ ) { sv [ i ] = ( short ) readInt ( items [ readUnsignedShort ( v ) ] ) ; v += NUM00 ; } av . visit ( name , sv ) ; -- v ; $F597 $F1262 $F18064 ( cv , size ) for ( i = NUM00 ; i < size ; i ++ ) { cv [ i ] = ( char ) readInt ( items [ readUnsignedShort ( v ) ] ) ; v += NUM00 ; } av . visit ( name , cv ) ; -- v ; $F597 $F1262 $F4120 ( iv , size ) for ( i = NUM00 ; i < size ; i ++ ) { iv [ i ] = readInt ( items [ readUnsignedShort ( v ) ] ) ; v += NUM00 ; } av . visit ( name , iv ) ; -- v ; $F597 $F1262 $F12300 ( lv , size ) for ( i = NUM00 ; i < size ; i ++ ) { lv [ i ] = readLong ( items [ readUnsignedShort ( v ) ] ) ; v += NUM00 ; } av . visit ( name , lv ) ; -- v ; $F597 $F1262 $F25850 ( fv , size ) for ( i = NUM00 ; i < size ; i ++ ) { fv [ i ] = Float . intBitsToFloat ( readInt ( items [ readUnsignedShort ( v ) ] ) ) ; v += NUM00 ; } av . visit ( name , fv ) ; -- v ; $F597 $F1262 $F9662 ( dv , size ) for ( i = NUM00 ; i < size ; i ++ ) { dv [ i ] = Double . longBitsToDouble ( readLong ( items [ readUnsignedShort ( v ) ] ) ) ; v += NUM00 ; } av . visit ( name , dv ) ; -- v ; $F597 $F1267 v = readAnnotationValues ( v - NUM00 , buf , _BOOL , av . visitArray ( name ) ) ; } } return v ; }
public static SIPHeader parseSIPHeader ( String header ) throws ParseException { int start = NUM00 ; $F22867 ( end , header ) try { while ( header . charAt ( start ) <= NUM00 ) start ++ ; while ( header . charAt ( end ) <= NUM00 ) end -- ; } catch ( ArrayIndexOutOfBoundsException e ) $F191935 StringBuilder buffer = new StringBuilder ( end + NUM00 ) ; int i = start ; int lineStart = start ; boolean endOfLine = _BOOL ; while ( i <= end ) { $F1280 ( c , header , i ) if $F37111 ( c ) { if ( ! endOfLine ) { $F13037 ( buffer , header , lineStart , i ) endOfLine = _BOOL ; } } else { if ( endOfLine ) { endOfLine = _BOOL ; if $F37111 ( c ) { $F84 ( buffer ) lineStart = i + NUM00 ; } else { lineStart = i ; } } } i ++ ; } $F13037 ( buffer , header , lineStart , i ) $F84 ( buffer ) HeaderParser hp = ParserFactory . createParser ( buffer . toString ( ) ) ; if ( hp == null ) throw new ParseException $F163565 ; return hp . parse ( ) ; }
private static int convertSRGBtoLinearRGB ( int color ) { float input , output ; input = color / NUM00 ; if ( input <= NUM00 ) { output = input / NUM00 ; } else { output = ( float ) Math . pow ( ( input + NUM00 ) / NUM00 , NUM00 ) ; } return Math . round ( output * NUM00 ) ; }
public void recordBeginning $F72 { final String msg = NUM00 + mModuleName + NUM00 + mRunId ; mUsageMessages . add ( msg ) ; Diagnostic . developerLog ( msg ) ; mClient . recordBeginning ( mModuleName , mRunId ) ; }
static float rotateY $F780 ( pX , pY , cX , cY , angleInDegrees ) { $F9291 ( angle , Math , angleInDegrees ) return ( float ) ( Math . sin ( angle ) * ( pX - cX ) + Math . cos ( angle ) * ( pY - cY ) + cY ) ; }
public boolean isPronounceable ( String word ) { $F7876 ( lowerCaseWord , word ) return ( prefixFSM . accept ( lowerCaseWord ) && suffixFSM . accept ( lowerCaseWord ) ) ; }
public void addSplitEdges ( List edgeList ) { addEndpoints ( ) ; Iterator it = iterator ( ) ; EdgeIntersection eiPrev = ( EdgeIntersection ) it . next ( ) ; while $F2921 ( it ) { EdgeIntersection ei = ( EdgeIntersection ) it . next ( ) ; Edge newEdge = createSplitEdge ( eiPrev , ei ) ; edgeList . add ( newEdge ) ; eiPrev = ei ; } }
public IOUtils $F72 $F5795 ( super )
public MemBasedCache ( int maxCacheSizeInBytes ) { mMaxCacheSizeInBytes = maxCacheSizeInBytes ; mDataEntries = new LinkedHashMap < String , CacheHeader > ( NUM00 , NUM00 , _BOOL ) ; }
public void updateMaxTextWidths ( float requiredWidth , float matchContentsWidth ) { $F19410 ( mMaxRequiredWidth , Math , requiredWidth ) $F19410 ( mMaxMatchContentsWidth , Math , matchContentsWidth ) }
public void enableOverview ( boolean b ) { if ( overviewItem != null ) $F7728 ( overviewItem , b ) }
public void mouseEntered ( MouseEvent e ) { if $F22503 ( Debug ) { Debug . output ( getID ( ) + NUM00 ) ; } super . mouseEntered ( e ) ; autoZoom = _BOOL ; }
public PageOfCollections fetchPage ( PageOfCollections page , SolrZkClient zkClient ) throws $F80658 { $F43655 ( children , getCollections , zkClient ) page . selected = children ; if ( page . start == NUM00 && page . rows == - NUM00 && page . filter == null && $F3816 ( children ) ) { page . rows = NUM00 ; page . start = NUM00 ; } if ( page . filterType == FilterType . name && page . filter != null ) children = page . applyNameFilter ( children ) ; if ( page . filterType != FilterType . status ) page . selectPage ( children ) ; return page ; }
public void accept ( final AnnotationVisitor av ) { if ( av != null ) { if ( values != null ) { for ( $F48125 ( i , values ) ) { $F123 ( name , values , i ) Object value = values . get ( i + NUM00 ) ; accept ( av , name , value ) ; } } $F110334 ( av ) } }
public IdsQueryBuilder addIds ( String ... ids ) $F73474 ( values , Arrays , ids , this )
private void stop ( HttpServletRequest request , HttpServletResponse response ) throws IOException { $F70095 ( out , response ) $F10362 ( label , request ) Monitor mon = removeMon ( label , null , DEFAULT_UNITS ) ; if ( mon == null ) $F122935 ( out , ERROR ) else { $F5191 ( mon ) out . println ( OK + NUM00 + mon ) ; } }
public static String normalizeUrl ( String requestUrl ) throws OAuthException { if $F38892 ( requestUrl ) { throw new OAuthException $F580 ; } URI uri ; try { uri = new URI ( requestUrl ) ; } catch ( URISyntaxException e ) { throw new OAuthException ( e ) ; } String authority = uri . getAuthority ( ) ; $F149248 ( scheme , uri ) if ( authority == null || scheme == null ) { throw new OAuthException $F580 ; } $F37156 ( authority ) $F37156 ( scheme ) if ( ( scheme . equals ( NUM00 ) && uri . getPort ( ) == NUM00 ) || ( scheme . equals ( NUM00 ) && uri . getPort ( ) == NUM00 ) ) { $F24867 ( index , authority ) $F384188 ( index , authority ) } return scheme + NUM00 + authority + uri . getRawPath ( ) ; }
public void invoke ( InputStream is , OutputStream os , SerializerFactory serializerFactory ) throws Exception { boolean isDebug = _BOOL ; if ( isDebugInvoke ( ) ) { isDebug = _BOOL ; PrintWriter dbg = createDebugPrintWriter ( ) ; HessianDebugInputStream dIs = new HessianDebugInputStream ( is , dbg ) ; dIs . startTop2 ( ) ; is = dIs ; HessianDebugOutputStream dOs = new HessianDebugOutputStream ( os , dbg ) ; dOs . startTop2 ( ) ; os = dOs ; } HessianInputFactory . HeaderType header = _inputFactory . readHeader ( is ) ; AbstractHessianInput in ; AbstractHessianOutput out ; switch ( header ) { case CALL_1_REPLY_1 : in = _hessianFactory . createHessianInput ( is ) ; out = _hessianFactory . createHessianOutput ( os ) ; $F597 case CALL_1_REPLY_2 : in = _hessianFactory . createHessianInput ( is ) ; out = _hessianFactory . createHessian2Output ( os ) ; $F597 case HESSIAN_2 : in = _hessianFactory . createHessian2Input ( is ) ; in . readCall ( ) ; out = _hessianFactory . createHessian2Output ( os ) ; $F597 $F1267 throw new IllegalStateException ( header + NUM00 ) ; } if ( serializerFactory != null ) { in . setSerializerFactory ( serializerFactory ) ; out . setSerializerFactory ( serializerFactory ) ; } try { invoke ( _service , in , out ) ; } finally { $F59 ( in ) $F59 ( out ) if ( isDebug ) $F59 ( os ) } }
private void commitLocalTransaction $F72 throws CommitFailedException { $F2329 ( _tx ) if $F14148 ( _logger , Level ) { _logger . log ( Level . FINEST , NUM00 + _tx ) ; } try $F19092 ( _tx ) catch ( Exception e ) { if $F68674 ( _logger , Level ) $F68681 ( _logger , Level , _tx , e ) throw new CommitFailedException ( e ) ; } }
public static Entry addObjectClass ( Entry entry ) { Attribute attribute = entry . getAttribute ( CoreTokenConstants . OBJECT_CLASS ) ; if ( attribute == null ) { entry . addAttribute ( CoreTokenConstants . OBJECT_CLASS , CoreTokenConstants . FR_CORE_TOKEN ) ; } return entry ; }
$F1431 public List < Boundary > populateArea ( final Long wardId ) { HierarchyType hType = heirarchyTypeService . getHierarchyTypeByName ( hierarchyTypeName ) ; ; List < Boundary > areaList = new LinkedList < Boundary > $F72 ; final BoundaryType childBoundaryType = boundaryTypeService . getBoundaryTypeByNameAndHierarchyType ( NUM00 , hType ) ; final Boundary parentBoundary = boundaryService . getBoundaryById ( wardId ) ; areaList = new LinkedList ( crossHeirarchyService . getCrossHierarchyChildrens ( parentBoundary , childBoundaryType ) ) ; $F209111 ( LOGGER , areaList ) return areaList ; }
private static String readName ( DataInputStream dis , $F97523 ) throws IOException { $F34181 ( c , dis ) if $F14827 ( c ) { c = $F74254 ( c ) + dis . readUnsignedByte ( ) ; $F87074 $F87077 ( jumps ) ; jumps . add ( c ) ; return readName ( data , c , jumps ) ; } $F40722 ( c ) byte $F1310 = new byte [ c ] ; dis . readFully ( b ) ; String s = IDN . toUnicode ( new String ( b ) ) ; String t = readName ( dis , data ) ; if $F4012 ( t ) $F15894 ( s , t ) return s ; }
public SimpleString concat ( final char c ) { $F64222 ( bytes , data ) $F7057 ( System , data , bytes ) bytes [ data . length ] = $F8046 ( c ) ; bytes [ data . length + NUM00 ] = ( byte ) ( c > > NUM00 & NUM00 ) ; return new SimpleString ( bytes ) ; }
public static double probToLogOdds ( double prob ) { if ( gr ( prob , NUM00 ) || ( sm ( prob , NUM00 ) ) ) $F275480 ( prob ) double p = SMALL + ( NUM00 - NUM00 * SMALL ) * prob ; return Math . log ( p / ( NUM00 - p ) ) ; }
$F9538 ( takeLock , this , notEmpty )
public void deepFill ( MaryNode specTree ) { tree = specTree ; numberOfLeaves = NUM00 ; sortNode ( NUM00 , tree ) ; }
public int nodeCount $F72 { return $F2908 ( nodes ) ; }
public void addToGlobalBlacklist ( String host ) { addToGlobalBlacklist ( host , System . currentTimeMillis ( ) + this . globalBlacklistTimeout ) ; }
public boolean addNode ( Lop node ) { $F12651 ( nodes , node , _BOOL ) nodes . add ( node ) ; return _BOOL ; }
private JSONArray requestAllFileSystems $F72 throws IOException , JSONException { $F19928 ( ret ) for ( Filesystem fs : filesystems ) { ret . put ( fs . getRootEntry ( ) ) ; } return ret ; }
private void writeObject $F9338 ( s ) throws $F3258 { $F9339 ( s ) for ( $F9341 n = findFirst ( ) ; n != null ; n = n . next ) { V v = n . getValidValue ( ) ; if ( v != null ) { s . writeObject ( n . key ) ; s . writeObject ( v ) ; } } $F9352 ( s ) }
public static final double sigma ( double a ) { return NUM00 / ( NUM00 + Math . exp ( - a ) ) ; }
public void insertOrRefresh ( final KBucketEntry newEntry ) { $F8249 ( newEntry ) List < KBucketEntry > entriesRef = entries ; for ( KBucketEntry existing : entriesRef ) { if $F1238 ( existing , newEntry ) { existing . mergeInTimestamps ( newEntry ) ; $F665 } if ( existing . matchIPorID ( newEntry ) ) { DHT . logInfo ( NUM00 + newEntry + NUM00 + existing + NUM00 ) ; $F665 } } if ( newEntry . verifiedReachable ( ) ) { if ( entriesRef . size ( ) < DHTConstants . MAX_ENTRIES_PER_BUCKET ) { modifyMainBucket ( null , newEntry ) ; $F665 } if ( replaceBadEntry ( newEntry ) ) $F665 KBucketEntry $F7662 ( youngest , entriesRef ) ; if ( youngest . getCreationTime ( ) > newEntry . getCreationTime ( ) || newEntry . getRTT ( ) * NUM00 < youngest . getRTT ( ) ) { modifyMainBucket ( youngest , newEntry ) ; insertInReplacementBucket ( youngest ) ; $F665 } } insertInReplacementBucket ( newEntry ) ; }
public void translate ( double x , double y ) { currentTransform . translate ( x , y ) ; try { writeTransform ( new AffineTransform ( NUM00 , NUM00 , NUM00 , NUM00 , x , y ) ) ; } $F52544 ( handleException , e ) }
public static boolean isSupportedAddRPProtectionVirtualPoolChange ( Volume volume , VirtualPool currentVpool , VirtualPool newVpool , DbClient dbClient , StringBuffer notSuppReasonBuff ) { s_logger . info ( String . format ( $F17177 ( currentVpool , newVpool ) ) ) ; $F24922 ( isSameVirtualPool , currentVpool , newVpool , notSuppReasonBuff , _BOOL ) if ( volume . checkForRp ( ) || VirtualPool . vPoolSpecifiesProtection ( currentVpool ) ) $F117250 ( notSuppReasonBuff , _BOOL ) if ( ! VirtualPool . vPoolSpecifiesHighAvailability ( currentVpool ) && VirtualPool . vPoolSpecifiesRPVPlex ( newVpool ) ) $F117250 ( notSuppReasonBuff , _BOOL ) if ( VirtualPool . vPoolSpecifiesHighAvailability ( currentVpool ) && ! VirtualPool . vPoolSpecifiesHighAvailabilityDistributed ( currentVpool ) && VirtualPool . vPoolSpecifiesMetroPoint ( newVpool ) ) { $F144868 ( notSuppReasonBuff ) return _BOOL ; } $F806 include = new String [ ] { TYPE , VARRAYS , REF_VPOOL , MIRROR_VPOOL , FAST_EXPANSION , ACLS , INACTIVE , PROTOCOLS , PROVISIONING_TYPE , USE_MATCHED_POOLS , ARRAY_INFO , DRIVE_TYPE , AUTO_TIER_POLICY_NAME , HOST_IO_LIMIT_IOPS , HOST_IO_LIMIT_BANDWIDTH , VMAX_COMPRESSION_ENABLED , IS_THIN_VOLUME_PRE_ALLOCATION_ENABLED , ASSIGNED_STORAGE_POOLS } ; Map $F17195 changes = analyzeChanges ( currentVpool , newVpool , include , null , null ) ; if $F5973 ( changes ) { $F84 ( notSuppReasonBuff ) fillInNotSupportedReasons ( changes , notSuppReasonBuff ) ; return _BOOL ; } include = $F8640 ( PROTECTION_VARRAY_SETTINGS ) ; changes = analyzeChanges ( currentVpool , newVpool , include , null , null ) ; if $F2979 ( changes ) { $F84 ( notSuppReasonBuff ) fillInNotSupportedReasons ( changes , notSuppReasonBuff ) ; return _BOOL ; } if ( VirtualPool . vPoolSpecifiesHighAvailability ( currentVpool ) && ( VirtualPool . vPoolSpecifiesRPVPlex ( newVpool ) || VirtualPool . vPoolSpecifiesMetroPoint ( newVpool ) ) ) { VirtualPoolChangeOperationEnum op = vplexCommonChecks ( volume , currentVpool , newVpool , dbClient , notSuppReasonBuff , include ) ; if ( op == null || ! op . equals ( VirtualPoolChangeOperationEnum . RP_PROTECTED ) ) { return _BOOL ; } } return _BOOL ; }
private void writeObject ( ObjectOutputStream oos ) throws IOException { $F9339 ( oos ) boolean writeFont = ( f != OMText . DEFAULT_FONT ) ; oos . writeBoolean ( writeFont ) ; if ( writeFont ) { oos . writeObject ( f . getName ( ) ) ; oos . writeInt ( f . getSize ( ) ) ; oos . writeInt ( f . getStyle ( ) ) ; } writeStroke ( oos , stroke , OMGraphic . BASIC_STROKE ) ; writeStroke ( oos , textMatteStroke , DEFAULT_TEXT_MATTE_STROKE ) ; }
private static void writeSpaces ( Writer out , int amt ) throws IOException { while ( amt > NUM00 ) { $F3410 ( out ) amt -- ; } }
public static double relativeOverlap ( SpatialComparable box1 , SpatialComparable box2 ) { final int dim = assertSameDimensionality ( box1 , box2 ) ; double overlap = NUM00 ; double vol1 = NUM00 ; double vol2 = NUM00 ; for ( $F119 ( i , dim ) ) { final double box1min = box1 . getMin ( i ) ; final double box1max = box1 . getMax ( i ) ; final double box2min = box2 . getMin ( i ) ; final double box2max = box2 . getMax ( i ) ; final double omax = Math . min ( box1max , box2max ) ; final double omin = Math . max ( box1min , box2min ) ; if ( omax <= omin ) $F1083 overlap *= omax - omin ; vol1 *= box1max - box1min ; vol2 *= box2max - box2min ; } return overlap / ( vol1 + vol2 ) ; }
protected void handleAutoDraw $F72 { if ( isToolItemSelected ( ToolBarItemKey . AUTO_DRAW ) ) $F5795 ( onAutoDraw ) }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
protected final void _loadToHaveAtLeast ( int minAvailable ) throws IOException { if ( _inputStream == null ) { throw _constructError ( NUM00 + minAvailable + NUM00 ) ; } int amount = _inputEnd - _inputPtr ; _currInputProcessed += _inputPtr ; if ( amount > NUM00 && _inputPtr > NUM00 ) { $F51886 ( System , _inputBuffer , _inputPtr , amount ) _inputEnd = amount ; } else { _inputEnd = NUM00 ; } _inputPtr = NUM00 ; while ( _inputEnd < minAvailable ) { $F7994 ( count , _inputStream , _inputBuffer , _inputEnd ) if ( count < NUM00 ) { _closeInput ( ) ; if ( count == NUM00 ) $F5244 ( amount ) throw _constructError ( NUM00 + minAvailable + NUM00 + minAvailable + NUM00 ) ; } _inputEnd += count ; } }
public Z21Message $F5474 ( a , l ) { $F31730 ( super , String , a ) setBinary ( _BOOL ) ; }
private MethodDescriptor [ ] sortMethodDescriptors ( MethodDescriptor [ ] methodDescriptors ) { return methodSorter != null ? methodSorter . sortMethodDescriptors ( methodDescriptors ) : methodDescriptors ; }
public static Properties parsePropertyList ( String list ) throws PropertyStringFormatException $F19580 ( parsePropertyList , list , propertySeparators , keyValueSeparators )
public boolean packageHasAnnotation ( Annotation annotation ) { try { Package pkg = type . getPackage ( ) ; $F1933 ( pkg , _BOOL ) String className = $F43113 ( pkg ) ; $F96883 ( packageType , Class , className ) AnnotationAccessor accessor = new AnnotationAccessor ( supportedAnnotations , packageType , ignoreAnnotationFailure ) ; return accessor . typeHas ( annotation ) ; } $F17063 ( _BOOL ) }
private String buildToolTip ( final CTaggedGraphNodesContainerNode node ) { $F64605 ( tooltip ) boolean first = _BOOL ; for ( final NaviNode graphnode : node . getGraphNodes ( ) ) { $F48750 ( first , tooltip ) tooltip . append ( CNodesDisplayString . getDisplayString ( graphnode ) ) ; first = _BOOL ; } return tooltip + NUM00 ; }
public void makeGraph ( File linkGraph ) throws Exception { String temp212 ; int rowNum = NUM00 ; BufferedReader $F60628 ( br , linkGraph ) ; while $F443 ( temp212 , br ) { $F6542 ( strs , temp212 ) for ( $F1139 ( i , strs ) ) { graph [ rowNum ] [ i ] = Double . parseDouble ( strs [ i ] ) ; } rowNum ++ ; } for ( $F119 ( i , dataNum ) ) { for ( $F119 ( j , dimension ) ) { W [ i ] [ j ] = r . nextDouble ( ) ; H [ j ] [ i ] = r . nextDouble ( ) ; } } for ( $F119 ( i , dataNum ) ) { double sumW = NUM00 ; double sumH = NUM00 ; for ( $F119 ( j , dimension ) ) { sumW += W [ i ] [ j ] * W [ i ] [ j ] ; sumH += H [ j ] [ i ] * H [ j ] [ i ] ; } $F84202 ( sumW , Math ) $F84202 ( sumH , Math ) for ( $F119 ( j , dimension ) ) { W [ i ] [ j ] /= sumW ; H [ j ] [ i ] /= sumH ; } } trainW ( ) ; init = _BOOL ; }
$F43277 ( listener , mListeners )
public boolean removeOnItemClickListener ( OnItemClickListener itemClickListener ) $F20067 ( clickListeners , itemClickListener )
$F1 protected int lookForSelectablePosition ( int position , boolean lookDown ) { final ListAdapter adapter = mAdapter ; if ( adapter == null || isInTouchMode ( ) ) { return INVALID_POSITION ; } final int count = adapter . getCount ( ) ; if ( ! mAreAllItemsSelectable ) { if ( lookDown ) { $F34970 ( position , Math ) while ( position < count && ! adapter . isEnabled ( position ) ) { position ++ ; } } else { $F72086 ( position , Math , count ) while ( position >= NUM00 && ! adapter . isEnabled ( position ) ) { position -- ; } } if ( position < NUM00 || position >= count ) { return INVALID_POSITION ; } return position ; } else { if ( position < NUM00 || position >= count ) { return INVALID_POSITION ; } return position ; } }
public static String padRight $F16495 ( s , length ) { final int pad = length - s . length ( ) ; return pad > NUM00 ? s + getSpaceString ( pad ) : s ; }
private static $F806 collationMatchingRuleNames ( $F20109 ( localeNames ) , final int numSuffix , final String symbolicSuffix ) { $F67013 ( names ) for ( String localeName : localeNames ) { if $F2979 ( symbolicSuffix ) $F207 ( names , localeName ) else { names . add ( localeName + NUM00 + numSuffix ) ; names . add ( localeName + NUM00 + symbolicSuffix ) ; } } $F14862 ( names ) }
public static boolean isCacheSafe ( $F6969 clazz , ClassLoader classLoader ) { $F18062 ( Assert , clazz ) ClassLoader target = clazz . getClassLoader ( ) ; $F1933 ( target , _BOOL ) ClassLoader cur = classLoader ; $F3627 ( cur , target , _BOOL ) while ( cur != null ) { $F10337 ( cur ) $F3627 ( cur , target , _BOOL ) } return _BOOL ; }
public void write ( PrintStream out ) { write ( out , table ) ; }
static Part from ( String encoded , String decoded ) { $F1933 ( encoded , NULL ) $F25111 ( encoded , EMPTY ) $F1933 ( decoded , NULL ) $F25111 ( decoded , EMPTY ) return new Part ( encoded , decoded ) ; }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
private $F2027 createEpochMonths ( int epochDay , int minYear , int maxYear , Map < Integer , $F2027 > years ) { int numMonths = ( maxYear - minYear + NUM00 ) * NUM00 + NUM00 ; int epochMonth = NUM00 ; $F4120 ( epochMonths , numMonths ) minMonthLength = Integer . MAX_VALUE ; maxMonthLength = Integer . MIN_VALUE ; for ( int year = minYear ; year <= maxYear ; year ++ ) { $F2027 months = years . get ( year ) ; for ( $F6268 ( month ) ) { int length = months [ month ] ; epochMonths [ epochMonth ++ ] = epochDay ; if $F19274 ( length ) $F18931 ( minYear ) epochDay += length ; $F16700 ( minMonthLength , Math , length ) $F19410 ( maxMonthLength , Math , length ) } } epochMonths [ epochMonth ++ ] = epochDay ; if ( epochMonth != epochMonths . length ) { throw new IllegalStateException ( NUM00 + epochMonth + NUM00 + epochMonths . length ) ; } return epochMonths ; }
private static String descriptorToInternalName ( String descriptor ) { switch $F49313 ( descriptor ) { $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 return descriptor ; $F1262 return classDescriptorToInternalName ( descriptor ) ; $F61916 ( descriptor ) } }
public Subscription register ( Object mBean , MBeanDescription description ) { return register ( mBean , description . getMBeanName ( getNextId ( ) ) ) ; }
void checkAfterUnmarshalled $F72 { assertEquals ( shortVal . shortValue ( ) , NUM00 ) ; assertEquals ( longVal , NUM00 ) ; assertNull ( aArr ) ; assertNull ( strVal ) ; assertEquals ( doubleVal , NUM00 ) ; }
public void put ( int key , E value ) { int i = ContainerHelpers . binarySearch ( mKeys , mSize , key ) ; if ( i >= NUM00 ) { mValues [ i ] = value ; } else { i = ~ i ; $F27086 ( i , mSize , mValues , DELETED , mKeys , key , value ) if ( mGarbage && mSize >= mKeys . length ) { gc ( ) ; i = ~ ContainerHelpers . binarySearch ( mKeys , mSize , key ) ; } if ( mSize >= mKeys . length ) { $F49493 ( n , ContainerHelpers , mSize ) $F4120 ( nkeys , n ) $F133 ( nvalues , n ) $F7057 ( System , mKeys , nkeys ) $F7057 ( System , mValues , nvalues ) mKeys = nkeys ; mValues = nvalues ; } $F27098 ( mSize , i , System , mKeys , mValues ) mKeys [ i ] = key ; mValues [ i ] = value ; mSize ++ ; } }
$F1 public $F23350 CompletableFuture $F23350 collect ( final Supplier $F23350 supplier , final BiConsumer < R , $F11631 > accumulator , final BiConsumer < R , R > combiner ) $F19292 ( CompletableFuture , exec )
$F1431 protected Object fromReflectionType ( final Object value ) { FieldDescriptor descriptor = getDescriptor ( ) ; if $F102310 ( descriptor ) { if ( descriptor . getJavaType ( ) == FieldDescriptor . JavaType . MESSAGE || descriptor . getJavaType ( ) == FieldDescriptor . JavaType . ENUM ) { $F102316 ( result ) for ( final Object element : ( List ) value ) $F3762 ( result , singularFromReflectionType , element ) return result ; } else { return value ; } } else $F4915 ( singularFromReflectionType , value ) }
public void registerManufacturerSpecificBuilder ( int companyId , ADManufacturerSpecificBuilder builder ) { if ( companyId < NUM00 || NUM00 < companyId ) { $F574 ( message , String , companyId ) $F29415 ( message ) } $F2329 ( builder ) $F2544 ( key , Integer , companyId ) List < ADManufacturerSpecificBuilder > builders = mMSBuilders . get ( key ) ; if ( builders == null ) { builders = new ArrayList < ADManufacturerSpecificBuilder > $F72 ; mMSBuilders . put ( key , builders ) ; } $F6965 ( builders , builder ) }
public static ReilGraph copyReilCode ( final Window parent , final INaviCodeNode node ) { final ReilTranslator $F44365 translator = new ReilTranslator $F44365 $F72 ; try { return translator . translate ( new StandardEnvironment $F72 , node ) ; } catch ( final InternalTranslationException e ) { CUtilityFunctions . logException ( e ) ; $F21899 ( message ) final String description = CUtilityFunctions . createDescription ( String . format ( NUM00 , node . getAddress ( ) ) , $F21904 , new String [ ] { NUM00 + NUM00 } ) ; NaviErrorDialog . show ( parent , message , description , e ) ; } $F1274 }
private static void applyOverrides $F72 { InputStream stream = getContentTypesPropertiesStream ( ) ; $F2329 ( stream ) try { try { $F2697 ( overrides ) overrides . load ( stream ) ; for ( $F261788 ( entry , overrides ) ) { String $F167509 ( extension , entry ) ; $F189249 ( mimeType , entry ) add ( mimeType , extension ) ; } } $F3229 ( stream ) } $F20287 }
public static String toString ( Reader reader , long timeout ) throws IOException { StringWriter sw = new StringWriter $F989 ; copy ( toBufferedReader ( reader ) , sw , timeout ) ; $F59 ( sw ) $F92 ( sw ) }
private static float computeSimilarity ( Lane a , Lane b ) { int same = NUM00 ; int diff = NUM00 ; int firstCoordinate = Math . max ( a . getFirstNonGapPosition ( ) , b . getFirstNonGapPosition ( ) ) ; int lastCoordinate = Math . min ( a . getLastNonGapPosition ( ) , b . getLastNonGapPosition ( ) ) ; for ( int i = firstCoordinate ; i <= lastCoordinate ; i ++ ) { $F1280 ( cha , a , i ) $F1280 ( chb , b , i ) if ( Character . isLetter ( cha ) && Character . isLetter ( chb ) ) { if ( Character . toLowerCase ( cha ) == Character . toLowerCase ( ( chb ) ) ) same ++ ; else diff ++ ; } } return Math . max ( same > NUM00 ? NUM00 : NUM00 , same - NUM00 * diff ) ; }
private void forceOverflow $F72 $F5795 ( forceOverflow )
public int find ( String string ) { $F14469 ( string ) for ( int i = NUM00 ; i != m_stringOffsets . length ; ++ i ) { int offset = m_stringOffsets [ i ] ; int length = getShort ( m_strings , offset ) ; if ( length != string . length ( ) ) $F1448 int j = NUM00 ; for ( ; j != length ; ++ j ) { offset += NUM00 ; if ( string . charAt ( j ) != getShort ( m_strings , offset ) ) $F5153 } $F3627 ( j , length , i ) } $F150 }
public String prepOperand ( String label , DataType dt , ValueType vt , boolean literal ) { $F83 ( sb ) sb . append ( label ) ; sb . append ( Lop . DATATYPE_PREFIX ) ; sb . append ( dt ) ; sb . append ( Lop . VALUETYPE_PREFIX ) ; sb . append ( vt ) ; sb . append ( Lop . LITERAL_PREFIX ) ; sb . append ( literal ) ; $F92 ( sb ) }
public static List < SpaceTime > divideConquerBrownianBridge ( MultivariateNormalDistribution normal , SpaceTime start , SpaceTime end , int depth , int maxTries , SpaceTimeRejector rejector ) { List < SpaceTime > points = new LinkedList < SpaceTime > $F72 ; points . add ( start ) ; points . add ( end ) ; stop = _BOOL ; if ( divideConquerBrownianBridge ( normal , NUM00 , points , depth , maxTries , rejector ) == ( NUM00 < < ( depth - NUM00 ) ) ) { return points ; } stop = _BOOL ; $F1274 }
public static EjbJarXmlVersion valueOf ( DocumentType docType ) throws NullPointerException { return valueOf ( docType . getPublicId ( ) ) ; }
private boolean matchStrings $F22381 ( pattern , str , caseSensitive ) { $F7782 ( patArr , pattern ) $F7782 ( strArr , str ) int patIdxStart = NUM00 ; $F40997 ( patIdxEnd , patArr ) int strIdxStart = NUM00 ; $F40997 ( strIdxEnd , strArr ) char ch ; boolean containsStar = _BOOL ; for ( char c : patArr ) { if ( c == NUM00 ) $F3468 ( containsStar , _BOOL ) } if ( ! containsStar ) { $F35938 ( patIdxEnd , strIdxEnd , _BOOL ) for ( $F9993 ( i , patIdxEnd ) ) { ch = patArr [ i ] ; $F233103 ( ch , different , caseSensitive , strArr , i , _BOOL ) } return _BOOL ; } $F6482 ( patIdxEnd , _BOOL ) while $F118980 ( ch , patArr , patIdxStart , strIdxStart , strIdxEnd ) { $F233103 ( ch , different , caseSensitive , strArr , strIdxStart , _BOOL ) patIdxStart ++ ; strIdxStart ++ ; } $F118987 ( strIdxStart , strIdxEnd , i , patIdxStart , patIdxEnd , patArr , _BOOL ) while $F118980 ( ch , patArr , patIdxEnd , strIdxStart , strIdxEnd ) { $F233103 ( ch , different , caseSensitive , strArr , strIdxEnd , _BOOL ) patIdxEnd -- ; strIdxEnd -- ; } $F118987 ( strIdxStart , strIdxEnd , i , patIdxStart , patIdxEnd , patArr , _BOOL ) while ( patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd ) { int patIdxTmp = - NUM00 ; for ( $F28096 ( i , patIdxStart , patIdxEnd ) ) $F118991 ( patArr , i , patIdxTmp ) if ( patIdxTmp == patIdxStart + NUM00 ) $F118993 ( patIdxStart ) int patLength = patIdxTmp - patIdxStart - NUM00 ; int strLength = strIdxEnd - strIdxStart + NUM00 ; int foundIdx = - NUM00 ; strLoop : for ( int i = NUM00 ; i <= strLength - patLength ; i ++ ) { for ( $F119 ( j , patLength ) ) { ch = patArr [ patIdxStart + j + NUM00 ] ; if ( ch != NUM00 ) { if ( different ( caseSensitive , ch , strArr [ strIdxStart + i + j ] ) ) { continue strLoop ; } } } foundIdx = strIdxStart + i ; $F597 } $F5881 ( foundIdx , _BOOL ) patIdxStart = patIdxTmp ; strIdxStart = foundIdx + patLength ; } for ( int i = patIdxStart ; i <= patIdxEnd ; i ++ ) { if ( patArr [ i ] != NUM00 ) { return _BOOL ; } } return _BOOL ; }
public static $F31488 mergeCoords ( $F31488 x , $F31488 y ) { if $F15256 ( x , y ) $F824 $F31488 $F204 ( ret ) ; for ( $F2277 ( i , x ) ) { $F18208 ( ret , x , i ) $F18208 ( ret , y , i ) } return ret ; }
public static void print ( int x ) $F7523 ( out , x )
public void copyText $F72 { int end , start ; end = selectedCharField . getSelectionEnd ( ) ; start = selectedCharField . getSelectionStart ( ) ; selectedCharField . selectAll ( ) ; selectedCharField . copy ( ) ; selectedCharField . select ( start , end ) ; }
public void handleButton1Request ( RequestInvocationEvent event ) throws ModelControlException { try { AuthPropertiesModel model = ( AuthPropertiesModel ) getModel ( ) ; Map original = model . getValues ( ) ; $F123284 ( ps , getChild , PROPERTY_ATTRIBUTE ) model . setValues ( ps . getAttributeValues ( original , _BOOL , model ) ) ; $F252709 ( setInlineAlertMessage , CCAlert ) } $F50339 ( setInlineAlertMessage , CCAlert , a ) forwardTo ( ) ; }
private void buildDescriptionPanel ( final Composite parent ) { descriptionLabel = new StyledText ( parent , SWT . READ_ONLY ) ; $F15121 ( descriptionLabel ) descriptionLabel . setLayoutData ( new GridData ( GridData . FILL , GridData . FILL , _BOOL , _BOOL , NUM00 , NUM00 ) ) ; }
public HttpMethodClient $F72 { this ( NUM00 , NUM00 , NUM00 * NUM00 ) ; }
public ISO9796d2PSSSigner ( AsymmetricBlockCipher cipher , Digest digest , int saltLength , boolean implicit ) { this . cipher = cipher ; this . digest = digest ; this . hLen = digest . getDigestSize ( ) ; this . saltLength = saltLength ; if ( implicit ) { trailer = TRAILER_IMPLICIT ; } else { Integer trailerObj = ( Integer ) trailerMap . get ( digest . getAlgorithmName ( ) ) ; if ( trailerObj != null ) $F276383 ( trailer , trailerObj ) else $F825 } }
String decodeTextValue $F97 ( data ) throws IOException { boolean isCompressed = ( $F3305 ( data ) && ( data [ NUM00 ] == TEXT_COMPRESSION_HEADER [ NUM00 ] ) && ( data [ NUM00 ] == TEXT_COMPRESSION_HEADER [ NUM00 ] ) ) ; if ( isCompressed ) { StringBuilder $F144303 ( textBuf , data ) ; int dataStart = TEXT_COMPRESSION_HEADER . length ; int dataEnd = dataStart ; boolean inCompressedMode = _BOOL ; while ( dataEnd < data . length ) { if ( data [ dataEnd ] == $F19905 ) { decodeTextSegment ( data , dataStart , dataEnd , inCompressedMode , textBuf ) ; inCompressedMode = ! inCompressedMode ; ++ dataEnd ; dataStart = dataEnd ; } else { ++ dataEnd ; } } decodeTextSegment ( data , dataStart , dataEnd , inCompressedMode , textBuf ) ; $F92 ( textBuf ) } return decodeUncompressedText ( data , getCharset ( ) ) ; }
private < S , T > $F28904 extract ( final Collection $F50398 collection , final Extractor < S , T > extractor ) { final $F28904 values = new $F48740 $F716 ( collection ) ; for ( final S instance : collection ) { values . add ( extractor . getValue ( instance ) ) ; } return values ; }
public static boolean isZTE $F72 $F75994 ( sBuildModel )
static public String normalizeToEncoding ( String origString_ , Charset encoding_ ) { String normString = origString_ ; CharsetEncoder encoder = encoding_ . newEncoder ( ) ; if ( ! encoder . canEncode ( origString_ ) ) { $F11550 ( length , origString_ ) $F1469 normSeq = new char [ $F45530 ( origString_ ) ] ; int charNum = NUM00 ; for ( int offset = NUM00 ; offset < length ; ) { Pair < Character , Integer > replacement = normalizeCodepoint ( origString_ , encoding_ , offset ) ; Character replacedChar = replacement . getFirst ( ) ; int codepoint = replacement . getSecond ( ) ; if ( null != replacedChar ) $F2319 ( normSeq , charNum , replacedChar ) offset += Character . charCount ( codepoint ) ; } $F84838 ( normString , normSeq ) } return normString ; }
private FastConcurrentSkipListMap . Node $F9340 loNode $F72 { if ( lo == null ) return m . findFirst ( ) ; else if ( loInclusive ) return m . findNear ( lo , m . GT | m . EQ ) ; else return m . findNear ( lo , m . GT ) ; }
$F1654 ( m_sets )
public Line3D ( Stack < Vector3 > points , float thickness , $F2027 colors , boolean createVBOs ) { super ( ) ; mPoints = points ; mLineThickness = thickness ; mColors = colors ; if ( colors != null && colors . length != points . size ( ) ) $F11388 init ( createVBOs ) ; }
public static $F96 asUnsignedByteArray ( BigInteger value ) { $F1208 ( bytes , value ) if $F41780 ( bytes ) $F41781 ( tmp , bytes , System ) return bytes ; }
public static float approximateLength ( float controlPoints [ ] [ ] ) { float length = NUM00 ; for ( $F21583 ( i , controlPoints ) ) { float xDif = controlPoints [ i + NUM00 ] [ NUM00 ] - controlPoints [ i ] [ NUM00 ] ; float yDif = controlPoints [ i + NUM00 ] [ NUM00 ] - controlPoints [ i ] [ NUM00 ] ; float zDif = controlPoints [ i + NUM00 ] [ NUM00 ] - controlPoints [ i ] [ NUM00 ] ; length += $F16206 ( Math , xDif , yDif , zDif ) ; } return length ; }
protected int mapDragOperationFromModifiers ( MouseEvent e ) { int mods = e . getModifiersEx ( ) ; int btns = mods & ButtonMask ; if ( ! ( btns == InputEvent . BUTTON1_DOWN_MASK || btns == InputEvent . BUTTON2_DOWN_MASK ) ) { return DnDConstants . ACTION_NONE ; } return SunDragSourceContextPeer . convertModifiersToDropAction ( mods , getSourceActions ( ) ) ; }
public UpdateClause addAssignment ( Expression expression ) { assignments . add ( new Assignment ( expression ) ) ; return this ; }
private boolean stepValue $F72 { while ( _BOOL ) { if ( iter != null && iter . hasNext ( ) ) { svcs = ( ArrayList ) iter . next ( ) ; $F8935 ( svcidx , svcs ) return _BOOL ; } $F18937 ( stepClass , _BOOL ) $F397 ( iter , _BOOL ) } }
private ArrayList < IconMarker > createIconMarkers $F72 { final ArrayList < IconMarker > $F2086 ( iconMarkers , LOCATIONS ) ; iconMarkers . add ( new IconMarker ( LOCATIONS [ NUM00 ] , R . drawable . bread , R . drawable . bread_c ) ) ; iconMarkers . add ( new IconMarker ( LOCATIONS [ NUM00 ] , R . drawable . butcher , R . drawable . butcher_c ) ) ; iconMarkers . add ( new IconMarker ( LOCATIONS [ NUM00 ] , R . drawable . fruits , R . drawable . fruits_c ) ) ; iconMarkers . add ( new IconMarker ( LOCATIONS [ NUM00 ] , R . drawable . grocery , R . drawable . grocery_c ) ) ; iconMarkers . add ( new IconMarker ( LOCATIONS [ NUM00 ] , R . drawable . patisserie , R . drawable . patisserie_c ) ) ; return iconMarkers ; }
public void hasNetworkConnection ( NetworkRequestCheckListener listener ) { if ( hasNetworkConnection ( ) ) { testNetworkRequest ( listener ) ; } else { listener . onNoResponse ( ) ; } }
public void assignThreadForSubscriber ( $F4170 Object subscriber ) { Looper looper = Looper . myLooper ( ) ; if ( looper != null ) { mSubscribersDefaultThreads . put ( new IdentityWeakReferenceKey $F200 ( subscriber ) , looper != Looper . getMainLooper ( ) ? new Handler ( looper ) : mUiThreadHandler ) ; } else { mSubscribersDefaultThreads . remove ( new IdentityWeakReferenceKey $F200 ( subscriber ) ) ; } }
private void validateDynamicAttribute ( Set dynamicSet ) throws PolicyException { $F36310 ( DEBUG , dynamicSet ) $F266988 ( responseAttrNames ) $F266988 ( repoAttrNames ) $F12775 ( responseAttrToRepoAttr ) $F36310 ( DEBUG , validDynamicAttrNames ) Set dynamicAttrs = ( ( Set ) properties . get ( DYNAMIC_ATTRIBUTE ) ) ; $F36310 ( DEBUG , dynamicAttrs ) $F10531 ( dynamicAttrsIter , dynamicAttrs ) while $F2921 ( dynamicAttrsIter ) { $F2778 ( attr , dynamicAttrsIter ) if $F2200 ( validDynamicAttrNames , attr ) { if $F12866 ( DEBUG ) { DEBUG . warning ( $F38 + attr ) ; } $F598 } $F91090 ( attrNames , parseDynamicAttrName , attr ) String responseAttrName = attrNames [ NUM00 ] ; String repoAttrName = attrNames [ NUM00 ] ; responseAttrNames . add ( responseAttrName ) ; repoAttrNames . add ( repoAttrName ) ; addToResponseAttrToRepoAttrMap ( responseAttrName , repoAttrName ) ; if $F6299 ( DEBUG ) { DEBUG . message ( $F38 + responseAttrName + NUM00 + repoAttrName ) ; } } if $F6299 ( DEBUG ) { DEBUG . message ( NUM00 + NUM00 + responseAttrToRepoAttr ) ; DEBUG . message ( NUM00 + NUM00 ) ; } }
public static boolean typeCheck ( Class type , Object instance ) { return $F39078 ( type , instance ) || isWrapperInstance ( type , instance ) ; }
public synchronized void init $F72 { ArrayList < Warrant > tempList = new ArrayList < Warrant > $F72 ; $F3803 systemNameList = _manager . getSystemNameList ( ) ; $F13712 ( iter , systemNameList ) while $F2921 ( iter ) { Warrant w = _manager . getBySystemName ( iter . next ( ) ) ; if $F2200 ( _warList , w ) { w . addPropertyChangeListener ( this ) ; } else $F106 ( _warList , w ) tempList . add ( w ) ; } for ( $F2277 ( i , _warList ) ) { Warrant w = _warList . get ( i ) ; if $F2200 ( _warNX , w ) $F9106 ( w , this ) } for ( $F2277 ( i , _warNX ) ) $F62006 ( tempList , _warNX , i ) _warList = tempList ; }
public void addCommand ( Command cmd , int offset ) { menuBar . addCommand ( cmd , offset ) ; }
public boolean connect ( final String address ) { if ( mBluetoothAdapter == null || address == null ) $F35336 ( Log , TAG , _BOOL ) if ( mBluetoothDeviceAddress != null && address . equals ( mBluetoothDeviceAddress ) && mBluetoothGatt != null ) { $F13527 ( Log , TAG ) if ( mBluetoothGatt . connect ( ) ) { mConnectionState = STATE_CONNECTING ; return _BOOL ; } else { return _BOOL ; } } final BluetoothDevice device = mBluetoothAdapter . getRemoteDevice ( address ) ; if ( device == null ) $F35336 ( Log , TAG , _BOOL ) mBluetoothGatt = device . connectGatt ( this , _BOOL , mGattCallback ) ; $F13527 ( Log , TAG ) mBluetoothDeviceAddress = address ; mConnectionState = STATE_CONNECTING ; return _BOOL ; }
private double normalDens $F7635 ( x , mean , stdDev ) { double diff = x - mean ; return ( NUM00 / ( m_normConst * stdDev ) ) * Math . exp ( - ( diff * diff / ( NUM00 * stdDev * stdDev ) ) ) ; }
private static void drawShape ( GL2 gl , Shape s ) { PathIterator it = s . getPathIterator ( new AffineTransform $F72 , shapeFlatness ) ; $F12457 ( lastMoveTo ) $F12457 ( f ) while $F38402 ( it ) { $F38403 ( res , it , f ) switch ( res ) { case PathIterator . SEG_CLOSE : GLPanel . V ( $F156480 ( gl , lastMoveTo ) ) ; $F597 case PathIterator . SEG_MOVETO : GLPanel . V ( $F156480 ( gl , f ) ) ; $F10319 ( System , f , lastMoveTo ) $F597 case PathIterator . SEG_LINETO : GLPanel . V ( $F156480 ( gl , f ) ) ; $F597 case PathIterator . SEG_CUBICTO : CubicCurve2D c = new CubicCurve2D . Float ( lastMoveTo [ NUM00 ] , lastMoveTo [ NUM00 ] , f [ NUM00 ] , f [ NUM00 ] , f [ NUM00 ] , f [ NUM00 ] , f [ NUM00 ] , f [ NUM00 ] ) ; drawShape ( gl , c ) ; $F597 $F1267 throw new Error ( NUM00 + NUM00 + res ) ; } $F24630 ( it ) } }
$F1 protected void tearDown $F72 throws NamingException , JMSException { NamingEnumeration < Binding > iter = context . listBindings ( NUM00 ) ; while ( iter . hasMore ( ) ) { Binding binding = iter . next ( ) ; Object connFactory = binding . getObject ( ) ; if ( connFactory instanceof ActiveMQConnectionFactory ) $F845 } }
protected $F28584 load ( final InputStream in ) throws $F55616 { SAXParser saxParser ; $F58203 ( factory , SAXParserFactory ) try { saxParser = factory . newSAXParser ( ) ; } catch ( final ParserConfigurationException ex ) { $F6287 ( ex ) } groups = new LinkedList < URI > $F72 ; saxParser . parse ( in , this ) ; return groups ; }
public final void lazySet ( long newValue ) $F171056 ( unsafe , this , valueOffset , newValue )
private static $F6689 createEqualityKey ( Node node ) { $F6691 ( values ) values . add ( node . getNodeType ( ) ) ; values . add ( node . getNodeName ( ) ) ; values . add ( node . getLocalName ( ) ) ; values . add ( node . getNamespaceURI ( ) ) ; values . add ( node . getPrefix ( ) ) ; values . add ( node . getNodeValue ( ) ) ; for ( Node child = node . getFirstChild ( ) ; child != null ; child = child . getNextSibling ( ) ) $F207 ( values , child ) switch $F6708 ( node ) { case DOCUMENT_TYPE_NODE : DocumentTypeImpl doctype = ( DocumentTypeImpl ) node ; values . add ( doctype . getPublicId ( ) ) ; values . add ( doctype . getSystemId ( ) ) ; values . add ( doctype . getInternalSubset ( ) ) ; values . add ( doctype . getEntities ( ) ) ; values . add ( doctype . getNotations ( ) ) ; $F597 case ELEMENT_NODE : $F6721 ( element , node ) values . add ( element . getAttributes ( ) ) ; $F597 } return values ; }
$F1309 public static String Collection2String ( $F7922 in , String separator ) { $F1338 ( in ) return Iterator2String ( in . iterator ( ) , separator ) ; }
public static $F96 decodeBase64 ( String base64Str ) { return DatatypeConverter . parseBase64Binary ( base64Str ) ; }
protected void removeAllPremoveDrops $F72 { for ( PremoveInfo info : premoves . toArray ( new PremoveInfo $F380 ) ) { if ( info . isPremoveDrop ) $F106 ( premoves , info ) } }
public void testClearBitZero $F72 { $F45030 int aSign = NUM00 ; int number = NUM00 ; $F15143 $F3023 ( aNumber , aSign , aBytes ) $F32957 ( result , aNumber , number ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public static String sayNumber ( StringBuffer appendTo , double number ) throws IllegalArgumentException { if ( number == Double . MIN_VALUE ) $F825 $F2854 ( number , appendTo ) $F55455 ( abs , Math , number ) if ( abs < POWER_THREE ) { saySimpleNumber ( appendTo , ( int ) abs ) ; } else if ( abs < NUM00 ) { int $F303969 ( thousand , abs , POWER_THREE ) ; $F84 ( appendTo ) saySimpleNumber ( appendTo , thousand ) ; } else if ( abs < POWER_SIX ) { int thousand = ( int ) ( abs % POWER_SIX / POWER_THREE ) ; saySimpleNumber ( appendTo , thousand ) ; $F84 ( appendTo ) double remainder = abs - thousand * POWER_THREE ; if ( remainder > NUM00 ) { $F84 ( appendTo ) sayNumber ( appendTo , remainder ) ; } } else if ( abs < POWER_NINE ) { int million = ( int ) ( abs % POWER_NINE / POWER_SIX ) ; saySimpleNumber ( appendTo , million ) ; $F84 ( appendTo ) double remainder = abs - million * POWER_SIX ; if ( remainder > NUM00 ) { $F84 ( appendTo ) sayNumber ( appendTo , remainder ) ; } } else if ( abs < POWER_TWELVE ) { int billion = ( int ) ( abs % POWER_TWELVE / POWER_NINE ) ; saySimpleNumber ( appendTo , billion ) ; $F84 ( appendTo ) double remainder = abs - billion * POWER_NINE ; if ( remainder > NUM00 ) { $F84 ( appendTo ) sayNumber ( appendTo , remainder ) ; } } else if ( abs < POWER_FIFTEEN ) { int trillion = ( int ) ( abs % POWER_FIFTEEN / POWER_TWELVE ) ; saySimpleNumber ( appendTo , trillion ) ; $F84 ( appendTo ) double remainder = abs - trillion * POWER_TWELVE ; if ( remainder > NUM00 ) { $F84 ( appendTo ) sayNumber ( appendTo , remainder ) ; } } else $F86 ( appendTo ) $F92 ( appendTo ) }
public void stop $F72 { _throttle . setSpeedSetting ( - NUM00 ) ; _throttle . setSpeedSetting ( NUM00 ) ; stopLabel . setIcon ( stopIcon ) ; stopLabel . setIconTextGap ( _gap ) ; pack ( ) ; }
public void encode ( OutputStream out ) throws IOException { $F19904 ( tmp ) dnName . encode ( tmp ) ; $F1569 ( out , tmp ) }
public void makeDirty $F72 { betaChanged = _BOOL ; newMode = _BOOL ; precisionChanged = _BOOL ; regressionInterface . makeDirty ( instance ) ; }
private $F84864 toArrayList $F72 { $F91915 ( list ) $F91919 ( p , first , succ , item , list ) return list ; }
public boolean remove ( HttpConnection connection ) { TimeValues times = connectionToTimes . remove ( connection ) ; if ( times == null ) $F95123 ( log , _BOOL ) else { return System . currentTimeMillis ( ) <= times . timeExpires ; } }
$F1 public $F987 listOptions $F72 { $F994 ( newVector ) $F1000 ( newVector ) $F9007 ( newVector ) $F1000 ( newVector ) $F1007 ( newVector ) }
private $F3803 split ( String prefix ) { $F10144 ( parts ) int bracketCount = NUM00 ; boolean inquotes = _BOOL ; int lastIndex = NUM00 ; for ( $F1088 ( i , prefix ) ) { $F1280 ( c , prefix , i ) if ( c == NUM00 ) $F118993 ( bracketCount ) else if ( c == NUM00 ) { inquotes = ! inquotes ; $F598 } else if ( c == NUM00 ) { bracketCount -- ; if ( bracketCount < NUM00 ) $F1666 ( prefix ) $F598 } if ( c == NUM00 && ! inquotes && bracketCount == NUM00 ) { $F56997 ( parts , prefix , lastIndex , i ) lastIndex = i + NUM00 ; } } if ( $F1093 ( lastIndex , prefix ) && ! inquotes && bracketCount == NUM00 ) { $F204948 ( parts , prefix , lastIndex ) } return parts ; }
public static long lowerHexToUnsignedLong ( String lowerHex ) { $F115 ( length , lowerHex ) if $F19274 ( length ) throw isntLowerHexLong ( lowerHex ) ; int i = length > NUM00 ? length - NUM00 : NUM00 ; long result = NUM00 ; for ( ; i < length ; i ++ ) { $F1280 ( c , lowerHex , i ) result <<= NUM00 ; if $F19295 ( c ) { result |= c - NUM00 ; } else if $F19295 ( c ) { result |= c - NUM00 + NUM00 ; } else $F34850 ( isntLowerHexLong , lowerHex ) } return result ; }
public static double sampleSkewStandardError ( int size ) { int n = size ; return Math . sqrt ( NUM00 * n * ( n - NUM00 ) / ( ( n - NUM00 ) * ( n + NUM00 ) * ( n + NUM00 ) ) ) ; }
public void load ( List < PolicyQualifierInfo > policyQualifierInfo ) { PolicyQualifierInfo [ ] policyQualifierInfoArray = policyQualifierInfo . toArray ( new PolicyQualifierInfo $F2313 ( policyQualifierInfo ) ) ; Arrays . sort ( policyQualifierInfoArray , new PolicyQualifierInfoComparator $F72 ) ; data = new Object [ policyQualifierInfoArray . length ] [ NUM00 ] ; int i = NUM00 ; for ( PolicyQualifierInfo policyQualInfo : policyQualifierInfoArray ) { data [ i ] [ NUM00 ] = policyQualInfo ; i ++ ; } fireTableDataChanged ( ) ; }
public void runScript ( Reader reader ) throws IOException , SQLException { try { boolean originalAutoCommit = connection . getAutoCommit ( ) ; try { if ( originalAutoCommit != this . autoCommit ) { connection . setAutoCommit ( this . autoCommit ) ; } runScript ( connection , reader ) ; } finally { connection . setAutoCommit ( originalAutoCommit ) ; } } catch ( IOException | SQLException e ) { throw e ; } catch ( Exception e ) { throw new RuntimeException ( NUM00 + e , e ) ; } }
public double doOperation $F72 throws OperatorFailedException { double logq ; final NodeRef root = tree . getRoot ( ) ; final double oldTreeHeight = tree . getNodeHeight ( root ) ; NodeRef i ; do { i = tree . getNode ( MathUtils . nextInt ( tree . getNodeCount ( ) ) ) ; } while ( root == i ) ; final NodeRef iP = tree . getParent ( i ) ; final NodeRef CiP = getOtherChild ( tree , iP , i ) ; final NodeRef PiP = tree . getParent ( iP ) ; $F59591 ( delta , getDelta ) final double oldHeight = tree . getNodeHeight ( iP ) ; final double newHeight = oldHeight + delta ; if ( delta > NUM00 ) { if ( PiP != null && tree . getNodeHeight ( PiP ) < newHeight ) { NodeRef newParent = PiP ; NodeRef newChild = iP ; while ( tree . getNodeHeight ( newParent ) < newHeight ) { newChild = newParent ; newParent = tree . getParent ( newParent ) ; $F12576 ( newParent ) } tree . beginTreeEdit ( ) ; if ( tree . isRoot ( newChild ) ) { tree . removeChild ( iP , CiP ) ; tree . removeChild ( PiP , iP ) ; tree . addChild ( iP , newChild ) ; tree . addChild ( PiP , CiP ) ; tree . setRoot ( iP ) ; if ( tree . hasNodeTraits ( ) ) { tree . swapAllTraits ( newChild , iP ) ; } if ( tree . hasRates ( ) ) { final double rootNodeRate = tree . getNodeRate ( newChild ) ; tree . setNodeRate ( newChild , tree . getNodeRate ( iP ) ) ; tree . setNodeRate ( iP , rootNodeRate ) ; } } else { tree . removeChild ( iP , CiP ) ; tree . removeChild ( PiP , iP ) ; tree . removeChild ( newParent , newChild ) ; tree . addChild ( iP , newChild ) ; tree . addChild ( PiP , CiP ) ; tree . addChild ( newParent , iP ) ; } tree . setNodeHeight ( iP , newHeight ) ; tree . endTreeEdit ( ) ; final int possibleSources = intersectingEdges ( tree , newChild , oldHeight , null ) ; logq = - Math . log ( possibleSources ) ; } else { tree . setNodeHeight ( iP , newHeight ) ; logq = NUM00 ; } } else { if ( tree . getNodeHeight ( i ) > newHeight ) $F86429 ( Double ) if ( tree . getNodeHeight ( CiP ) > newHeight ) { $F59606 newChildren = new ArrayList $F5905 $F72 ; final int possibleDestinations = intersectingEdges ( tree , CiP , newHeight , newChildren ) ; if $F10471 ( newChildren ) $F86429 ( Double ) final int childIndex = MathUtils . nextInt ( newChildren . size ( ) ) ; NodeRef newChild = newChildren . get ( childIndex ) ; $F59939 ( newParent , tree , newChild ) tree . beginTreeEdit ( ) ; if ( tree . isRoot ( iP ) ) { tree . removeChild ( iP , CiP ) ; tree . removeChild ( newParent , newChild ) ; tree . addChild ( iP , newChild ) ; tree . addChild ( newParent , iP ) ; tree . setRoot ( CiP ) ; if ( tree . hasNodeTraits ( ) ) { tree . swapAllTraits ( iP , CiP ) ; } if ( tree . hasRates ( ) ) { final double rootNodeRate = tree . getNodeRate ( iP ) ; tree . setNodeRate ( iP , tree . getNodeRate ( CiP ) ) ; tree . setNodeRate ( CiP , rootNodeRate ) ; } } else { tree . removeChild ( iP , CiP ) ; tree . removeChild ( PiP , iP ) ; tree . removeChild ( newParent , newChild ) ; tree . addChild ( iP , newChild ) ; tree . addChild ( PiP , CiP ) ; tree . addChild ( newParent , iP ) ; } tree . setNodeHeight ( iP , newHeight ) ; tree . endTreeEdit ( ) ; logq = Math . log ( possibleDestinations ) ; } else { tree . setNodeHeight ( iP , newHeight ) ; logq = NUM00 ; } } if ( swapInRandomRate ) { final NodeRef j = tree . getNode ( MathUtils . nextInt ( tree . getNodeCount ( ) ) ) ; if ( j != i ) { final double tmp = tree . getNodeRate ( i ) ; tree . setNodeRate ( i , tree . getNodeRate ( j ) ) ; tree . setNodeRate ( j , tmp ) ; } } if ( swapInRandomTrait ) { final NodeRef j = tree . getNode ( MathUtils . nextInt ( tree . getNodeCount ( ) ) ) ; if ( j != i ) { tree . swapAllTraits ( i , j ) ; } } if ( logq == Double . NEGATIVE_INFINITY ) throw new OperatorFailedException $F580 ; if ( scaledDirichletBranches ) { if ( oldTreeHeight != tree . getNodeHeight ( tree . getRoot ( ) ) ) throw new OperatorFailedException $F580 ; } return logq ; }
MarkerSegment findMarkerSegment ( Class cls , boolean first ) { if ( first ) { $F10531 ( iter , markerSequence ) while $F2921 ( iter ) { MarkerSegment seg = ( MarkerSegment ) iter . next ( ) ; if $F38790 ( cls , seg ) { return seg ; } } } else { ListIterator $F30104 ( iter , markerSequence ) ; while $F90239 ( iter ) { MarkerSegment seg = ( MarkerSegment ) iter . previous ( ) ; if $F38790 ( cls , seg ) { return seg ; } } } $F1274 }
default Filterable $F4203 removeAll ( final T ... values ) { return removeAll ( Stream . of ( values ) ) ; }
public static $F529 createContentAssocMethod $F71242 ( dctx , rcontext ) throws GenericServiceException , GenericEntityException { $F118334 ( context , UtilMisc , rcontext ) $F3803 targetOperationList = ContentWorker . prepTargetOperationList ( context , NUM00 ) ; $F3803 contentPurposeList = ContentWorker . prepContentPurposeList ( context ) ; $F545 ( context , targetOperationList ) $F545 ( context , contentPurposeList ) $F28491 ( locale , context ) $F6257 ( delegator , dctx ) $F28487 ( dispatcher , dctx ) $F34733 ( result , FastMap ) $F28495 ( contentIdFrom , context ) $F28495 ( contentIdTo , context ) $F28495 ( contentId , context ) int contentIdCount = NUM00 ; if $F35028 ( UtilValidate , contentIdFrom ) contentIdCount ++ ; if $F35028 ( UtilValidate , contentIdTo ) contentIdCount ++ ; if $F35028 ( UtilValidate , contentId ) contentIdCount ++ ; if ( contentIdCount < NUM00 ) { Debug . logError ( NUM00 , NUM00 ) ; $F34767 ( ServiceUtil , UtilProperties , resource , locale ) } if $F35028 ( UtilValidate , contentIdFrom ) { if $F4329 ( UtilValidate , contentIdTo ) contentIdTo = contentId ; } if $F35028 ( UtilValidate , contentIdTo ) { if $F4329 ( UtilValidate , contentIdFrom ) contentIdFrom = contentId ; } GenericValue contentAssoc = delegator . makeValue ( NUM00 , FastMap . newInstance ( ) ) ; $F545 ( contentAssoc , contentIdFrom ) $F545 ( contentAssoc , contentIdTo ) $F28502 ( contentAssoc , context ) $F28502 ( contentAssoc , context ) $F28502 ( contentAssoc , context ) Timestamp fromDate = ( Timestamp ) context . get ( NUM00 ) ; if ( fromDate == null ) { contentAssoc . put ( NUM00 , UtilDateTime . nowTimestamp ( ) ) ; } else $F70195 ( contentAssoc , fromDate ) Timestamp thruDate = ( Timestamp ) context . get ( NUM00 ) ; if ( thruDate == null ) { $F91191 ( contentAssoc ) } else $F70195 ( contentAssoc , thruDate ) $F28502 ( contentAssoc , context ) $F28502 ( contentAssoc , context ) $F28495 ( upperCoordinateStr , context ) if $F4329 ( UtilValidate , upperCoordinateStr ) { $F91191 ( contentAssoc ) } else $F70195 ( contentAssoc , upperCoordinateStr ) $F28495 ( leftCoordinateStr , context ) if $F4329 ( UtilValidate , leftCoordinateStr ) { $F91191 ( contentAssoc ) } else $F70195 ( contentAssoc , leftCoordinateStr ) $F108907 ( userLogin , context ) $F28495 ( userLoginId , userLogin ) String createdByUserLogin = userLoginId ; String lastModifiedByUserLogin = userLoginId ; Timestamp createdDate = UtilDateTime . nowTimestamp ( ) ; Timestamp lastModifiedDate = UtilDateTime . nowTimestamp ( ) ; $F545 ( contentAssoc , createdByUserLogin ) $F545 ( contentAssoc , lastModifiedByUserLogin ) $F545 ( contentAssoc , createdDate ) $F545 ( contentAssoc , lastModifiedDate ) $F34733 ( serviceInMap , FastMap ) String permissionStatus = null ; $F28502 ( serviceInMap , context ) $F545 ( serviceInMap , targetOperationList ) $F545 ( serviceInMap , contentPurposeList ) $F28502 ( serviceInMap , context ) $F28502 ( serviceInMap , context ) $F545 ( serviceInMap , contentIdTo ) $F545 ( serviceInMap , contentIdFrom ) $F28502 ( serviceInMap , context ) $F28502 ( serviceInMap , context ) $F28502 ( serviceInMap , context ) $F28502 ( serviceInMap , context ) $F67631 ( permResults ) permResults = dispatcher . runSync ( NUM00 , serviceInMap ) ; $F68570 ( permissionStatus , permResults ) if $F85112 ( permissionStatus ) { $F52723 ( contentAssoc ) } else { String errorMsg = ( String ) $F101497 ( permResults , ModelService ) ; result . put ( ModelService . ERROR_MESSAGE , errorMsg ) ; return ServiceUtil . returnFailure ( errorMsg ) ; } $F545 ( result , contentIdTo ) $F545 ( result , contentIdFrom ) $F28502 ( result , contentAssoc ) $F28502 ( result , contentAssoc ) return result ; }
public void reset ( boolean clear ) { gotVersion = _BOOL ; gotHeaderLength = _BOOL ; gotHeader = _BOOL ; gotBody = _BOOL ; gotBodyBoundary = _BOOL ; headerLength = NUM00 ; bodyLength = NUM00 ; bodyBytesReceived = NUM00 ; if ( clear ) { bufferOffset = NUM00 ; $F725 ( buffer ) bodyFile = null ; if ( bodyStream != null ) { $F88744 ( bodyStream , e ) bodyStream = null ; } } }
void removeAt ( final int removeIndex ) { $F48385 ( items , this ) if ( removeIndex == takeIndex ) { items [ takeIndex ] = null ; takeIndex = inc ( takeIndex ) ; count -- ; if ( itrs != null ) itrs . elementDequeued ( ) ; } else { $F4711 ( putIndex , this ) for ( int i = removeIndex ; ; ) { int next = inc ( i ) ; if ( next != putIndex ) { items [ i ] = items [ next ] ; i = next ; } else { items [ i ] = null ; this . putIndex = i ; $F597 } } count -- ; if ( itrs != null ) itrs . removedAt ( removeIndex ) ; } $F702 ( notFull ) }
private void saveAndClose ( boolean save ) { content . setEnabled ( _BOOL ) ; $F134511 ( timer ) $F134511 ( timerNextSync ) if ( save ) { $F13527 ( Log , LOG_TAG ) saveData ( null ) ; } else $F13573 ( Log , LOG_TAG ) Intent $F192736 ( data ) ; data . setAction ( Intent . ACTION_VIEW ) ; data . putExtra ( PARAM_NOTE , note ) ; data . putExtra ( PARAM_NOTE_POSITION , notePosition ) ; setResult ( RESULT_OK , data ) ; finish ( ) ; }
public static Uri addMessage ( ContentResolver resolver , String address , String body , String subject , Long date , boolean deliveryReport , long threadId ) { final Uri CONTENT_URI = Uri . parse ( NUM00 ) ; return addMessageToUri ( resolver , CONTENT_URI , address , body , subject , date , _BOOL , deliveryReport , threadId ) ; }
public static $F4203 void blockingSubscribePrint ( Observable $F4203 observable , String name ) { CountDownLatch latch = new CountDownLatch $F989 ; subscribePrint ( observable . finallyDo ( null ) , name ) ; try $F24081 ( latch ) $F887 }
public static final double calcNiceNumber ( final double RANGE , final boolean ROUND ) { double niceFraction ; double exponent = Math . floor ( Math . log10 ( RANGE ) ) ; double fraction = RANGE / Math . pow ( NUM00 , exponent ) ; if ( ROUND ) { if ( Double . compare ( fraction , NUM00 ) < NUM00 ) { niceFraction = NUM00 ; } else if ( Double . compare ( fraction , NUM00 ) < NUM00 ) { niceFraction = NUM00 ; } else if ( Double . compare ( fraction , NUM00 ) < NUM00 ) { niceFraction = NUM00 ; } else { niceFraction = NUM00 ; } } else { if ( Double . compare ( fraction , NUM00 ) <= NUM00 ) { niceFraction = NUM00 ; } else if ( Double . compare ( fraction , NUM00 ) <= NUM00 ) { niceFraction = NUM00 ; } else if ( Double . compare ( fraction , NUM00 ) <= NUM00 ) { niceFraction = NUM00 ; } else { niceFraction = NUM00 ; } } return niceFraction * Math . pow ( NUM00 , exponent ) ; }
private final Object internalReplace ( Object k , Object v , Object cv ) { $F35151 ( h , spread , k ) Object oldVal = null ; for ( $F46551 tab = table ; ; ) { Node f ; int i , fh ; Object fk ; if ( tab == null || ( f = tabAt ( tab , i = $F33765 ( tab ) & h ) ) == null ) $F597 else if $F35162 ( fh , f , MOVED ) { if ( ( fk = f . key ) instanceof TreeBin ) { TreeBin t = ( TreeBin ) fk ; boolean validated = _BOOL ; boolean deleted = _BOOL ; t . acquire ( NUM00 ) ; try { if ( tabAt ( tab , i ) == f ) { validated = _BOOL ; TreeNode p = t . getTreeNode ( h , k , t . root ) ; if ( p != null ) { Object pv = p . val ; if ( cv == null || cv == pv || cv . equals ( pv ) ) { oldVal = pv ; if ( ( p . val = v ) == null ) { deleted = _BOOL ; t . deleteTreeNode ( p ) ; } } } } } finally { t . release ( NUM00 ) ; } if ( validated ) { if ( deleted ) counter . add ( - NUM00 ) ; $F597 } } else tab = ( $F46551 ) fk ; } else if ( ( fh & HASH_BITS ) != h && f . next == null ) $F597 else if $F18594 ( fh , LOCKED ) { checkForResize ( ) ; f . tryAwaitLock ( tab , i ) ; } else if ( f . casHash ( fh , fh | LOCKED ) ) { boolean validated = _BOOL ; boolean deleted = _BOOL ; try { if ( tabAt ( tab , i ) == f ) { validated = _BOOL ; for ( Node e = f , pred = null ; ; ) { Object ek , ev ; if ( ( e . hash & HASH_BITS ) == h && ( ( ev = e . val ) != null ) && ( ( ek = e . key ) == k || k . equals ( ek ) ) ) { if ( cv == null || cv == ev || cv . equals ( ev ) ) { oldVal = ev ; if ( ( e . val = v ) == null ) { deleted = _BOOL ; Node en = e . next ; if ( pred != null ) pred . next = en ; else setTabAt ( tab , i , en ) ; } } $F597 } pred = e ; $F35184 ( e ) } } } finally { if ( ! f . casHash ( fh | LOCKED , fh ) ) { f . hash = fh ; $F30292 ( f ) ; } } if ( validated ) { if ( deleted ) counter . add ( - NUM00 ) ; $F597 } } } return oldVal ; }
private static final boolean copyHeader ( String name , String fromReq , StringBuffer buf ) { $F12747 ( start , fromReq , name ) if ( start != - NUM00 ) { $F12712 ( end , fromReq , start ) if ( end != - NUM00 ) { buf . append ( fromReq . subSequence ( start - NUM00 , end ) ) ; return _BOOL ; } } return _BOOL ; }
public void sendMetric ( final String name , final double value ) { logger . debug ( String . format ( NUM00 , name , value ) ) ; if ( telemetryClient != null ) { telemetryClient . trackMetric ( name , value ) ; } }
default Document putAll ( Iterable < Field > fields , Predicate $F11616 acceptableFieldNames ) { for ( Field field : fields ) { if ( acceptableFieldNames . test ( field . getName ( ) ) ) { setValue ( field . getName ( ) , field . getValue ( ) ) ; } } return this ; }
public static URL findResourceBase ( String baseResource , ClassLoader loader ) { URL url = loader . getResource ( baseResource ) ; return findResourceBase ( url , baseResource ) ; }
public String toEPL ( EPStatementFormatter formatter ) { $F29429 ( writer ) toEPL ( formatter , writer ) ; $F92 ( writer ) }
public boolean isSpecified ( int index ) { if ( ( index < NUM00 ) || ( index >= mLength ) ) $F8224 String str = $F107987 ( mItems , index ) ; return ( ( str != null ) ? $F4432 ( str ) : _BOOL ) ; }
public StatArchiveReader ( String archiveName ) throws IOException { this ( new File [ ] { new File ( archiveName ) } , null , _BOOL ) ; }
private static void initAdbSocketAddr $F72 { try { sAdbServerPort = getAdbServerPort ( ) ; $F123267 ( hostAddr , InetAddress , DEFAULT_ADB_HOST ) sSocketAddr = new InetSocketAddress ( hostAddr , sAdbServerPort ) ; } catch ( UnknownHostException e ) $F845 }
public int read $F139836 ( fileOffset , buffer , offset , length ) throws IOException { _file . seek ( fileOffset ) ; return _file . read ( buffer , offset , length ) ; }
private boolean matchesAnyTag ( String tagName ) $F298 ( tagNames , tagName )
default void shutdown $F72 { Platform . exit ( ) ; }
public boolean isExpanded ( int row ) { TreeUI tree = getUI ( ) ; if ( tree != null ) { TreePath path = tree . getPathForRow ( this , row ) ; if ( path != null ) { $F45979 ( value , expandedState , path ) return ( value != null && value . booleanValue ( ) ) ; } } return _BOOL ; }
private static int labelEnd ( String s ) { $F1384 ( colonIndex , s ) $F1384 ( semicolonIndex , s ) if ( ( semicolonIndex == - NUM00 ) || ( colonIndex < semicolonIndex ) ) { return colonIndex ; } else $F7629 }
$F120605 ( listener , mListeners )
public HttpMethodInfo ( Method method , Object handler , $F131 args , MultivaluedMap $F528 formParameters , Response responder ) { this . method = method ; this . handler = handler ; $F17879 ( this , Arrays , args ) this . formParameters = formParameters ; this . responder = responder ; }
public static boolean equals ( $F31427 ( field1 ) , $F31427 ( field2 ) ) { int index1 = NUM00 ; $F180531 ( length1 , field1 ) int index2 = NUM00 ; $F180531 ( length2 , field2 ) while ( _BOOL ) { while ( index1 < length1 && field1 [ index1 ] == null ) { index1 ++ ; } while ( index2 < length2 && field2 [ index2 ] == null ) { index2 ++ ; } boolean atEndOf1 = index1 >= length1 ; boolean atEndOf2 = index2 >= length2 ; if ( atEndOf1 && atEndOf2 ) { return _BOOL ; } else if ( atEndOf1 != atEndOf2 ) { return _BOOL ; } else if ( ! Arrays . equals ( field1 [ index1 ] , field2 [ index2 ] ) ) { return _BOOL ; } index1 ++ ; index2 ++ ; } }
private void drawText ( int x1 , int y1 , int s , boolean e_or_n , Graphics g ) { $F86453 ( oldColor , g ) $F58295 ( g ) if ( m_FontColor == null ) { $F129587 ( g , Color ) } else $F158293 ( g , m_FontColor ) String st ; if ( e_or_n ) { Edge e = m_edges [ s ] . m_edge ; for ( int noa = NUM00 ; ( st = e . getLine ( noa ) ) != null ; noa ++ ) { g . drawString ( st , ( m_edges [ s ] . m_width - m_fontSize . stringWidth ( st ) ) / NUM00 + x1 , y1 + ( noa + NUM00 ) * m_fontSize . getHeight ( ) ) ; } } else { Node e = m_nodes [ s ] . m_node ; for ( int noa = NUM00 ; ( st = e . getLine ( noa ) ) != null ; noa ++ ) { g . drawString ( st , ( m_nodes [ s ] . m_width - m_fontSize . stringWidth ( st ) ) / NUM00 + x1 , y1 + ( noa + NUM00 ) * m_fontSize . getHeight ( ) ) ; } } g . setColor ( oldColor ) ; }
public void update ( List < Race > races ) { $F2329 ( currentRace ) if $F105 ( races , currentRace ) { setRace ( races . get ( races . indexOf ( currentRace ) ) ) ; } }
public boolean required $F72 { return _parameterMetadata . contains ( Metadata . REQUIRED ) ; }
protected void sendDataToReceiver ( ResultReceiver receiver , Intent originalIntent , Serializable data ) { if ( receiver != null && data != null ) { $F53033 ( bundle ) bundle . putParcelable ( ServiceReceiver . EXTRA_ORIGINAL_INTENT , originalIntent ) ; bundle . putSerializable ( ServiceReceiver . EXTRA_DATA , data ) ; receiver . send ( ServiceReceiver . STATUS_DATA , bundle ) ; } }
private static Object matchOrReplace ( Context cx , Scriptable scope , Scriptable thisObj , $F131 args , RegExpImpl reImpl , GlobData data , boolean forceFlat ) { NativeRegExp re ; $F4074 ( str , ScriptRuntime , thisObj ) data . str = str ; Scriptable topScope = ScriptableObject . getTopLevelScope ( scope ) ; if $F9634 ( args ) { Object compiled = NativeRegExp . compileRE ( cx , NUM00 , NUM00 , _BOOL ) ; re = new NativeRegExp ( topScope , compiled ) ; } else if ( args [ NUM00 ] instanceof NativeRegExp ) { re = ( NativeRegExp ) args [ NUM00 ] ; } else { String src = ScriptRuntime . toString ( args [ NUM00 ] ) ; String opt ; if ( data . optarg < args . length ) { args [ NUM00 ] = src ; opt = ScriptRuntime . toString ( args [ data . optarg ] ) ; } else { opt = null ; } Object compiled = NativeRegExp . compileRE ( cx , src , opt , forceFlat ) ; re = new NativeRegExp ( topScope , compiled ) ; } data . global = ( re . getFlags ( ) & NativeRegExp . JSREG_GLOB ) != NUM00 ; $F2027 indexp = $F15140 ; Object result = null ; if ( data . mode == RA_SEARCH ) { result = re . executeRegExp ( cx , scope , reImpl , str , indexp , NativeRegExp . TEST ) ; if ( result != null && result . equals ( Boolean . TRUE ) ) result = Integer . valueOf ( reImpl . leftContext . length ) ; else result = $F43818 ( Integer ) ; } else if ( data . global ) { re . lastIndex = NUM00 ; for ( int count = NUM00 ; indexp [ NUM00 ] <= str . length ( ) ; count ++ ) { result = re . executeRegExp ( cx , scope , reImpl , str , indexp , NativeRegExp . TEST ) ; if ( result == null || ! result . equals ( Boolean . TRUE ) ) $F597 if ( data . mode == RA_MATCH ) { match_glob ( data , cx , scope , count , reImpl ) ; } else { if ( data . mode != RA_REPLACE ) Kit . codeBug ( ) ; SubString lastMatch = reImpl . lastMatch ; int leftIndex = data . leftIndex ; int leftlen = lastMatch . index - leftIndex ; data . leftIndex = lastMatch . index + lastMatch . length ; replace_glob ( data , cx , scope , reImpl , leftIndex , leftlen ) ; } if ( reImpl . lastMatch . length == NUM00 ) { if ( indexp [ NUM00 ] == str . length ( ) ) $F597 indexp [ NUM00 ] ++ ; } } } else { result = re . executeRegExp ( cx , scope , reImpl , str , indexp , ( ( data . mode == RA_REPLACE ) ? NativeRegExp . TEST : NativeRegExp . MATCH ) ) ; } return result ; }
public void tableSwitch ( final $F2027 keys , final TableSwitchGenerator generator , final boolean useTable ) { for ( $F9808 ( i , keys ) ) { if $F15531 ( keys , i ) $F825 } Label def = newLabel ( ) ; Label end = newLabel ( ) ; if $F3305 ( keys ) { int len = keys . length ; int min = keys [ NUM00 ] ; int max = keys [ len - NUM00 ] ; int range = max - min + NUM00 ; if ( useTable ) { $F15537 ( labels , range ) Arrays . fill ( labels , def ) ; for ( $F1316 ( i , len ) ) { labels [ keys [ i ] - min ] = newLabel ( ) ; } mv . visitTableSwitchInsn ( min , max , def , labels ) ; for ( $F1316 ( i , range ) ) { Label label = labels [ i ] ; if ( label != def ) { mark ( label ) ; generator . generateCase ( i + min , end ) ; } } } else { $F15537 ( labels , len ) for ( $F1316 ( i , len ) ) $F15546 ( labels , i , newLabel ) mv . visitLookupSwitchInsn ( def , keys , labels ) ; for ( $F1316 ( i , len ) ) { mark ( labels [ i ] ) ; generator . generateCase ( keys [ i ] , end ) ; } } } mark ( def ) ; generator . generateDefault ( ) ; mark ( end ) ; }
public void print ( PrintWriter output , int w , int d ) { $F125026 ( format ) $F196676 ( format , Locale ) $F196677 ( format ) format . setMaximumFractionDigits ( d ) ; format . setMinimumFractionDigits ( d ) ; format . setGroupingUsed ( _BOOL ) ; print ( output , format , w + NUM00 ) ; }
public static $F11685 $F144321 newSetFromMap ( Map < E , Boolean > map ) { if $F2979 ( map ) { return new SetFromMap $F11685 ( map ) ; } $F10056 }
public void removeBiomeType ( BiomeDictionary . Type type ) { ArrayList $F153543 entryList = new ArrayList $F153543 $F72 ; entryList . addAll ( Arrays . asList ( BiomeDictionary . getBiomesForType ( type ) ) ) ; for ( BiomeGenBase biome : entryList ) { Iterator < BiomeEntry > iterator = allowedBiomes . iterator ( ) ; while $F2921 ( iterator ) { if ( BiomeDictionary . areBiomesEquivalent ( iterator . next ( ) . biome , biome ) ) $F7042 ( iterator ) } } }
static SizeRequirements calculateTiledRequirements ( LayoutIterator iter , SizeRequirements r ) { long minimum = NUM00 ; long maximum = NUM00 ; long preferred = NUM00 ; int lastMargin = NUM00 ; int totalSpacing = NUM00 ; $F23386 ( n , iter ) for ( $F119 ( i , n ) ) { iter . setIndex ( i ) ; int margin0 = lastMargin ; int margin1 = ( int ) iter . getLeadingCollapseSpan ( ) ; totalSpacing += Math . max ( margin0 , margin1 ) ; preferred += ( int ) iter . getPreferredSpan ( NUM00 ) ; minimum += iter . getMinimumSpan ( NUM00 ) ; maximum += iter . getMaximumSpan ( NUM00 ) ; lastMargin = ( int ) iter . getTrailingCollapseSpan ( ) ; } totalSpacing += lastMargin ; totalSpacing += NUM00 * iter . getBorderWidth ( ) ; minimum += totalSpacing ; preferred += totalSpacing ; maximum += totalSpacing ; if ( r == null ) { r = new SizeRequirements $F72 ; } r . minimum = ( minimum > Integer . MAX_VALUE ) ? Integer . MAX_VALUE : ( int ) minimum ; r . preferred = ( preferred > Integer . MAX_VALUE ) ? Integer . MAX_VALUE : ( int ) preferred ; r . maximum = ( maximum > Integer . MAX_VALUE ) ? Integer . MAX_VALUE : ( int ) maximum ; return r ; }
public static void writePaddedInteger ( Writer out , long value , int size ) throws IOException { $F29204 ( intValue , value ) if ( intValue == value ) { writePaddedInteger ( out , intValue , size ) ; } else if ( size <= NUM00 ) { $F3412 ( out , Long , value ) } else { if ( value < NUM00 ) { $F3410 ( out ) if ( value != Long . MIN_VALUE ) $F52810 ( value ) else { for ( ; size > NUM00 ; size -- ) $F12032 ( out ) $F3410 ( out ) $F665 } } int digits = ( int ) $F159551 ( Math , value , LOG_10 ) + NUM00 ; for ( ; size > digits ; size -- ) $F12032 ( out ) $F3412 ( out , Long , value ) } }
private static LDAPFilter createORFilter ( FilterSet filterSet ) throws LDAPException , IOException { List < JAXBElement $F1011 > list = filterSet . getFilterGroup ( ) ; ArrayList < RawFilter > $F719 ( filters , list ) ; for ( JAXBElement $F1011 filter : list ) $F3762 ( filters , createFilter , filter ) return LDAPFilter . createORFilter ( filters ) ; }
private void sendBlob $F84589 ( index , blob ) { sendInstruction ( new GuacamoleInstruction ( NUM00 , index , DatatypeConverter . printBase64Binary ( blob ) ) ) ; }
protected void defineLabels $F72 { labelsValues = calcLabels ( ) ; if ( handleValues ) labels = getLabelsFromValues ( ) ; else labels = getLabelsFromData ( ) ; $F8935 ( nLabels , labels ) }
public static Set < Interval > mergeIntervalToSet ( Set < Interval > intervals , Interval intervalToMerge ) { LinkedHashSet < Interval > copyOfOriginalSet = new $F22301 ( intervals ) ; copyOfOriginalSet . add ( intervalToMerge ) ; return mergeIntervalSet ( copyOfOriginalSet ) ; }
public static String dropWhile ( GString self , @ ClosureParams ( $F158693 , conflictResolutionStrategy = PickFirstResolver . class , $F158694 ) Closure condition ) $F38748 ( dropWhile , self , condition )
public void addNode ( TopologicalNode node ) $F207 ( nodeList , node )
public void printText ( String text ) { view . print ( text , text . endsWith ( NUM00 ) ) ; for ( ActionDelegate actionDelegate : actionDelegates ) { actionDelegate . onConsoleOutput ( this ) ; } }
$F1 public void trim $F72 { if ( counter < x . length ) { $F4120 ( y , counter ) $F135 ( System , x , y , counter ) x = y ; resizeValues ( counter ) ; } }
private void divide ( $F2027 idx , $F1986 data , ArrayList $F9183 ret , int start , int end , int depth ) { if ( depth == NUM00 ) { $F2027 a = Arrays . copyOfRange ( idx , start , end ) ; Arrays . sort ( a ) ; ret . add ( a ) ; $F665 } final int count = end - start ; if ( count == NUM00 ) { for ( int j = NUM00 < < depth ; j > NUM00 ; -- j ) { ret . add ( $F4468 ) ; } $F665 } double m = NUM00 ; for ( int i = start ; i < end ; i ++ ) { m += data [ i ] ; } m /= count ; int pos = Arrays . binarySearch ( data , start , end , m ) ; if ( pos >= NUM00 ) { final int opt = ( start + end ) > > NUM00 ; while ( data [ pos ] == m ) { if ( pos < opt ) { pos ++ ; } else if ( pos > opt ) { pos -- ; } else $F5153 } } else { pos = ( - pos - NUM00 ) ; } divide ( idx , data , ret , start , pos , depth - NUM00 ) ; divide ( idx , data , ret , pos , end , depth - NUM00 ) ; }
void assertThreadsStayAlive ( long millis , Thread ... threads ) { try { delay ( millis ) ; for ( Thread thread : threads ) assertTrue ( thread . isAlive ( ) ) ; } catch ( InterruptedException fail ) $F1210 ( threadFail ) }
public AbstractWorkerManager ( String id ) { _id = id ; _status = new WorkerManagerStatus $F72 ; setExecutionMode ( EXECUTION_MODE . NON_SERIAL ) ; setupExecutor ( ) ; }
$F1 public void applyInline $F196672 ( data , pos , len ) { int i ; $F9662 ( dataOut , len ) if ( len > real . length ) $F825 int middle = len / NUM00 + len % NUM00 ; $F135 ( System , data , dataOut , len ) System . arraycopy ( dataOut , pos + middle , real , NUM00 , len - middle ) ; System . arraycopy ( dataOut , pos , real , real . length - middle , middle ) ; if ( real . length > len ) Arrays . fill ( real , len - middle , real . length - middle , NUM00 ) ; Arrays . fill ( imag , NUM00 , imag . length , NUM00 ) ; FFT . transform ( real , imag , _BOOL ) ; process ( real , imag ) ; FFT . transform ( real , imag , _BOOL ) ; System . arraycopy ( real , NUM00 , dataOut , pos + middle , len - middle ) ; System . arraycopy ( real , real . length - middle , dataOut , pos , middle ) ; double origAvgEnergy = SignalProcUtils . getAverageSampleEnergy ( data , len ) ; for ( i = NUM00 ; i < len ; i ++ ) data [ i ] = amount * dataOut [ i ] + oneMinusAmount * data [ i ] ; double newAvgEnergy = SignalProcUtils . getAverageSampleEnergy ( data , len ) ; double scale = origAvgEnergy / newAvgEnergy ; for ( i = NUM00 ; i < len ; i ++ ) data [ i ] *= NUM00 * scale ; }
@ OnMessage public void onMessage ( String message , Session session ) $F228450 ( callInternal , session , message )
public final boolean insert_via ( BrdViaInfo p_via_info , PlaPointInt p_location , NetNosList p_net_no_arr , int p_trace_clearance_class_no , $F2027 p_trace_pen_halfwidth_arr , int p_max_recursion_depth , int p_max_via_recursion_depth , int p_pull_tight_accuracy , int p_pull_tight_time_limit ) { shove_fail_clear ( ) ; changed_area_clear ( ) ; boolean r_ok = shove_via_algo . shove_via_insert ( p_via_info , p_location , p_net_no_arr , p_trace_clearance_class_no , p_trace_pen_halfwidth_arr , p_max_recursion_depth , p_max_via_recursion_depth ) ; $F25096 ( r_ok , _BOOL ) NetNosList opt_net_no_arr = p_max_recursion_depth <= NUM00 ? p_net_no_arr : NetNosList . EMPTY ; TimeLimitStoppable t_limit = new TimeLimitStoppable ( s_PREVENT_ENDLESS_LOOP ) ; changed_area_optimize ( opt_net_no_arr , p_pull_tight_accuracy , null , t_limit , null ) ; return _BOOL ; }
boolean thresholdExceeded ( final Set < IBindingSet > distinctProjectionBuffer , final int distinctProjectionBufferThreshold , final List < IBindingSet > incomingBindingsBuffer , final int incomingBindingsBufferThreshold ) { return distinctProjectionBuffer . size ( ) >= distinctProjectionBufferThreshold || incomingBindingsBuffer . size ( ) >= incomingBindingsBufferThreshold ; }
public static $F96 toByteArray ( String str ) { $F1749 ( len , str ) $F17727 ( st , str ) $F806 newStrArray = new String $F49889 ( st ) ; int j = NUM00 ; while $F14498 ( st ) { newStrArray [ j ] = st . nextToken ( ) ; j ++ ; } $F82619 ( ret , newStrArray ) int tmp ; for ( $F1139 ( i , newStrArray ) ) { tmp = Integer . parseInt ( newStrArray [ i ] , NUM00 ) ; ret [ i ] = ( byte ) ( tmp - NUM00 ) ; } return ret ; }
public static boolean nullEquals ( String s1 , String s2 ) $F66007 ( s1 , s2 )
private $F1469 fFormatDigits ( final double x ) { String sx ; int i , j , k ; final int n1In ; final int n2In ; int expon = NUM00 ; boolean minusSign = _BOOL ; if ( x > NUM00 ) $F216901 ( sx , Double , x ) else if ( x < NUM00 ) { sx = Double . toString ( - x ) ; minusSign = _BOOL ; } else { sx = Double . toString ( x ) ; if $F4432 ( sx ) { minusSign = _BOOL ; $F3108 ( sx ) } } $F46662 ( ePos , sx ) $F46662 ( rPos , sx ) if ( rPos != - NUM00 ) { n1In = rPos ; } else if ( ePos != - NUM00 ) { n1In = ePos ; } else $F12713 ( n1In , sx ) if ( rPos != - NUM00 ) { if ( ePos != - NUM00 ) { n2In = ePos - rPos - NUM00 ; } else { n2In = sx . length ( ) - rPos - NUM00 ; } } else { n2In = NUM00 ; } if ( ePos != - NUM00 ) { int ie = ePos + NUM00 ; expon = NUM00 ; if $F11983 ( sx , ie ) { for ( ++ ie ; ie < sx . length ( ) ; ie ++ ) { if $F20317 ( sx , ie ) $F5153 } if $F7007 ( ie , sx ) { expon = - Integer . parseInt ( sx . substring ( ie ) ) ; } } else { if $F11983 ( sx , ie ) { ++ ie ; } for ( $F93943 ( ie , sx ) ) { if $F20317 ( sx , ie ) $F5153 } if $F7007 ( ie , sx ) { expon = Integer . parseInt ( sx . substring ( ie ) ) ; } } } final int p ; if ( precisionSet ) { p = precision ; } else { p = defaultDigits - NUM00 ; } $F9609 ( ca1 , sx ) final $F1469 ca2 = new char [ n1In + n2In ] ; final $F1469 ca3 ; final $F1469 ca4 ; final $F1469 ca5 ; for ( j = NUM00 ; j < n1In ; j ++ ) $F15086 ( ca2 , j , ca1 ) i = j + NUM00 ; for ( k = NUM00 ; k < n2In ; j ++ , i ++ , k ++ ) $F20651 ( ca2 , j , ca1 , i ) if ( n1In + expon <= NUM00 ) { ca3 = new char [ - expon + n2In ] ; for ( j = NUM00 , k = NUM00 ; k < ( - n1In - expon ) ; k ++ , j ++ ) $F114344 ( ca3 , j ) for ( i = NUM00 ; i < ( n1In + n2In ) ; i ++ , j ++ ) $F20651 ( ca3 , j , ca2 , i ) } else { ca3 = ca2 ; } boolean carry = _BOOL ; if ( p < - expon + n2In ) { if ( expon < NUM00 ) { i = p ; } else { i = p + n1In ; } carry = checkForCarry ( ca3 , i ) ; if ( carry ) { carry = startSymbolicCarry ( ca3 , i - NUM00 , NUM00 ) ; } } if ( n1In + expon <= NUM00 ) { ca4 = new char [ NUM00 + p ] ; if ( ! carry ) { ca4 [ NUM00 ] = NUM00 ; } else { ca4 [ NUM00 ] = NUM00 ; } if ( alternateForm || ! precisionSet || precision != NUM00 ) { ca4 [ NUM00 ] = NUM00 ; for ( i = NUM00 , j = NUM00 ; i < $F56147 ( Math , p , ca3 ) ; i ++ , j ++ ) $F20651 ( ca4 , j , ca3 , i ) for ( $F255681 ( j , ca4 ) ) $F114344 ( ca4 , j ) } } else { if ( ! carry ) { if ( alternateForm || ! precisionSet || precision != NUM00 ) { ca4 = new char [ n1In + expon + p + NUM00 ] ; } else { ca4 = new char [ n1In + expon ] ; } j = NUM00 ; } else { if ( alternateForm || ! precisionSet || precision != NUM00 ) { ca4 = new char [ n1In + expon + p + NUM00 ] ; } else { ca4 = new char [ n1In + expon + NUM00 ] ; } ca4 [ NUM00 ] = NUM00 ; j = NUM00 ; } for ( i = NUM00 ; i < Math . min ( n1In + expon , ca3 . length ) ; i ++ , j ++ ) $F20651 ( ca4 , j , ca3 , i ) for ( ; i < n1In + expon ; i ++ , j ++ ) $F114344 ( ca4 , j ) if ( alternateForm || ! precisionSet || precision != NUM00 ) { ca4 [ j ] = NUM00 ; j ++ ; for ( k = NUM00 ; i < ca3 . length && k < p ; i ++ , j ++ , k ++ ) $F20651 ( ca4 , j , ca3 , i ) for ( $F255681 ( j , ca4 ) ) $F114344 ( ca4 , j ) } } int nZeros = NUM00 ; if ( ! leftJustify && leadingZeros ) { int xThousands = NUM00 ; if ( thousands ) { int xlead = NUM00 ; if ( ca4 [ NUM00 ] == NUM00 || ca4 [ NUM00 ] == NUM00 || ca4 [ NUM00 ] == NUM00 ) { xlead = NUM00 ; } int xdp = xlead ; for ( $F255681 ( xdp , ca4 ) ) { if ( ca4 [ xdp ] == NUM00 ) $F5153 } xThousands = ( xdp - xlead ) / NUM00 ; } if ( fieldWidthSet ) { nZeros = fieldWidth - ca4 . length ; } if ( ( ! minusSign && ( leadingSign || leadingSpace ) ) || minusSign ) { nZeros -- ; } nZeros -= xThousands ; $F17370 ( nZeros ) } j = NUM00 ; if ( ( ! minusSign && ( leadingSign || leadingSpace ) ) || minusSign ) { ca5 = new char [ ca4 . length + nZeros + NUM00 ] ; j ++ ; } else { ca5 = new char [ ca4 . length + nZeros ] ; } if ( ! minusSign ) { if ( leadingSign ) { ca5 [ NUM00 ] = NUM00 ; } if ( leadingSpace ) { ca5 [ NUM00 ] = NUM00 ; } } else { ca5 [ NUM00 ] = NUM00 ; } for ( i = NUM00 ; i < nZeros ; i ++ , j ++ ) $F114344 ( ca5 , j ) for ( i = NUM00 ; i < ca4 . length ; i ++ , j ++ ) $F20651 ( ca5 , j , ca4 , i ) int lead = NUM00 ; if ( ca5 [ NUM00 ] == NUM00 || ca5 [ NUM00 ] == NUM00 || ca5 [ NUM00 ] == NUM00 ) { lead = NUM00 ; } int dp = lead ; for ( $F255681 ( dp , ca5 ) ) { if ( ca5 [ dp ] == NUM00 ) $F5153 } final int nThousands = ( dp - lead ) / NUM00 ; if ( dp < ca5 . length ) { ca5 [ dp ] = dfs . getDecimalSeparator ( ) ; } $F1469 ca6 = ca5 ; if ( thousands && nThousands > NUM00 ) { ca6 = new char [ ca5 . length + nThousands + lead ] ; $F603 ( ca6 , ca5 ) for ( i = lead , k = lead ; i < dp ; i ++ ) { if ( i > NUM00 && ( dp - i ) % NUM00 == NUM00 ) { ca6 [ k ] = dfs . getGroupingSeparator ( ) ; ca6 [ k + NUM00 ] = ca5 [ i ] ; k += NUM00 ; } else $F169975 ( ca6 , k , ca5 , i ) } for ( ; i < ca5 . length ; i ++ , k ++ ) $F20651 ( ca6 , k , ca5 , i ) } return ca6 ; }
int maxLength $F72 { FontMetrics fm = getFontMetrics ( getFont ( ) ) ; int m = NUM00 ; $F2199 ( end , items ) for ( $F119 ( i , end ) ) { int l = fm . stringWidth ( ( $F1766 ( items , i ) ) ) ; $F19410 ( m , Math , l ) } return m ; }
public void write ( final char $F75414 , final int start , final int length ) throws $F3258 { if ( m_writer != null ) m_writer . write ( chars , start , length ) ; int lengthx3 = ( length < < NUM00 ) + length ; if ( lengthx3 >= buf_length ) { flushBuffer ( ) ; setBufferSize ( NUM00 * lengthx3 ) ; } if ( lengthx3 > buf_length - count ) $F5795 ( flushBuffer ) final int n = length + start ; for ( int i = start ; i < n ; i ++ ) { final char c = chars [ i ] ; if ( c < NUM00 ) $F260231 ( buf , count , c ) else if ( c < NUM00 ) { $F264145 ( buf , count , c ) $F264148 ( buf , count , c ) } else { $F264145 ( buf , count , c ) $F264152 ( buf , count , c ) $F264148 ( buf , count , c ) } } }
public PlaPointInt round_to_the_left ( PlaDirection p_dir ) { PlaPointFloat dir = p_dir . to_float ( ) ; double rounded_x ; if ( dir . v_y > NUM00 ) { rounded_x = Math . floor ( v_x ) ; } else if ( dir . v_y < NUM00 ) { rounded_x = Math . ceil ( v_x ) ; } else { rounded_x = Math . round ( v_x ) ; } double rounded_y ; if ( dir . v_x > NUM00 ) { rounded_y = Math . ceil ( v_y ) ; } else if ( dir . v_x < NUM00 ) { rounded_y = Math . floor ( v_y ) ; } else { rounded_y = Math . round ( v_y ) ; } return new PlaPointInt ( rounded_x , rounded_y ) ; }
protected HttpHost determineProxy ( HttpHost target , HttpRequest request , HttpContext context ) throws HttpException { ProxySelector psel = this . proxySelector ; if ( psel == null ) $F39044 ( psel , ProxySelector ) $F1275 ( psel ) URI targetURI = null ; try { targetURI = new URI $F119716 ( target ) ; } catch ( URISyntaxException usx ) { throw new HttpException ( NUM00 + target , usx ) ; } List $F134025 proxies = psel . select ( targetURI ) ; Proxy p = chooseProxy ( proxies , target , request , context ) ; HttpHost result = null ; if ( p . type ( ) == Proxy . Type . HTTP ) { if ( ! ( p . address ( ) instanceof InetSocketAddress ) ) { throw new HttpException ( NUM00 + p . address ( ) ) ; } final InetSocketAddress isa = ( InetSocketAddress ) p . address ( ) ; result = new HttpHost ( getHost ( isa ) , isa . getPort ( ) ) ; } return result ; }
$F32797 ( sourcePosition , referencePosition , srcAndRefPositions , referenceCount , a , System )
public $F131 toArray $F72 $F54348 ( Arrays , elementData , size )
$F49921 ( mThread )
public static $F96 unwrapVCF ( File sourceFile , File tmpFile ) throws $F27136 { ZipArchiveInputStream in = null ; FileOutputStream fos = null ; String hmacString = null ; try { in = new ZipArchiveInputStream $F18079 ( sourceFile ) ; ArchiveEntry entry ; in . getNextEntry ( ) ; $F10893 ( fos , tmpFile ) IOUtils . copy ( in , fos ) ; entry = in . getNextEntry ( ) ; $F32928 ( hmacString , entry ) return Utils . hexToBytes ( hmacString ) ; } catch ( StringIndexOutOfBoundsException e ) { $F186360 ( logger , hmacString , e ) throw e ; } catch ( Exception e ) $F526539 ( logger , e ) finally { $F12239 ( fos ) $F2727 ( in ) } }
public boolean registerUser $F1947 ( username , password , uri ) throws DataAccessException { $F46660 ( checkUsernameExists , username , _BOOL ) storeUser ( username , password , uri ) ; return _BOOL ; }
public SELECT ( $F4170 String ... columns ) { $F896 ( columns ) if $F9634 ( columns ) $F824 $F4000 ( builder ) for ( $F1139 ( i , columns ) ) { $F6939 ( builder , columns , i ) if ( i != $F33765 ( columns ) ) $F84 ( builder ) } $F6947 ( sql , builder ) }
public static synchronized MBeanInfo testCompliance ( $F6970 ( baseClass ) , $F6969 mbeanInterface ) throws NotCompliantMBeanException { $F192589 ( mbeanInterface , getStandardMBeanInterface , baseClass ) ReflectUtil . checkPackageAccess ( mbeanInterface ) ; MBeanIntrospector $F1011 introspector = StandardMBeanIntrospector . getInstance ( ) ; return getClassMBeanInfo ( introspector , baseClass , mbeanInterface ) ; }
public static $F2689 toStringSet ( TemplateSequenceModel seqModel ) throws TemplateModelException { $F2695 ( set ) for ( $F2277 ( i , seqModel ) ) { set . add ( getAsStringNonEscaping ( ( TemplateScalarModel ) seqModel . get ( i ) ) ) ; } return set ; }
public JKSSignatureToken ( InputStream ksStream , String ksPassword ) { try { keyStore = KeyStore . getInstance ( KeyStore . getDefaultType ( ) ) ; password = ( ksPassword == null ) ? null : ksPassword . toCharArray ( ) ; keyStore . load ( ksStream , password ) ; } catch ( Exception e ) $F36611 ( e ) finally { if ( ksStream != null ) { try $F881 ( ksStream ) catch ( IOException e ) $F14108 ( logger , e ) } } }
protected void writeLocation ( String loc ) throws IOException { hadAnnotations |= ( loc != null ) ; locOut . writeObject ( loc ) ; }
protected int __offset ( int vtable_offset ) { int vtable = bb_pos - bb . getInt ( bb_pos ) ; return vtable_offset < bb . getShort ( vtable ) ? bb . getShort ( vtable + vtable_offset ) : NUM00 ; }
public static String selectText ( XPathExpression expr , Node context ) { try { return ( String ) expr . evaluate ( context , XPathConstants <missing ')'> . <missing ';'> $F50952 } catch ( XPathExpressionException e ) { throw new XmlException ( e ) ; } }
public static HttpHeaders toArmeria ( io . netty . handler . codec . http . HttpHeaders inHeaders ) { if $F2979 ( inHeaders ) { return HttpHeaders . EMPTY_HEADERS ; } final HttpHeaders out = new DefaultHttpHeaders ( _BOOL , inHeaders . size ( ) ) ; toArmeria ( inHeaders , out ) ; return out ; }
public static int calculateRMSLevel ( $F5078 audioData , int numframes ) { long lSum = NUM00 ; int numread = NUM00 ; for ( short s : audioData ) { lSum = lSum + s ; numread ++ ; $F67767 ( numread , numframes ) } double dAvg = lSum / numframes ; double sumMeanSquare = NUM00 ; numread = NUM00 ; for ( short anAudioData : audioData ) { sumMeanSquare = sumMeanSquare + Math . pow ( anAudioData - dAvg , NUM00 ) ; numread ++ ; $F67767 ( numread , numframes ) } double averageMeanSquare = sumMeanSquare / numframes ; return ( int ) ( Math . pow ( averageMeanSquare , NUM00 ) + NUM00 ) ; }
private void initProgram $F72 { glUseProgram ( this . program ) ; vec3ArrayUniform = glGetUniformLocation ( this . program , NUM00 ) ; chosenUniform = glGetUniformLocation ( this . program , NUM00 ) ; glUseProgram ( NUM00 ) ; }
public boolean engineContainsAlias ( String alias ) { return entries . containsKey ( $F91593 ( alias , Locale ) ) ; }
public void invertSelectedRelations $F72 { $F359183 ( selection , viewer ) if ( ! ( selection instanceof IStructuredSelection ) ) $F932 IStructuredSelection structuredSelection = ( IStructuredSelection ) selection ; Collection < Relation > inverse = computeInverseRelations ( getTableRelations ( ) , structuredSelection ) ; StructuredSelection nextSelection = new StructuredSelection ( inverse . toArray ( ) ) ; viewer . setSelection ( nextSelection , _BOOL ) ; }
public void testFloatValueNeg $F72 { String a = NUM00 ; $F12208 ( aNumber , a ) float result = - NUM00 ; $F229387 ( assertTrue , aNumber , result ) }
public void bindKeyStore ( final KeyStoreService keyStoreService ) { this . keyStore = keyStoreService ; }
protected void drawConnectorCenters ( Canvas c ) { List $F238202 connections = mBlock . getAllConnections ( ) ; $F98511 ( paint ) $F22950 ( paint , Paint ) for ( $F2277 ( i , connections ) ) { Connection conn = connections . get ( i ) ; if ( conn . inDragMode ( ) ) { if $F104255 ( conn ) { $F348 ( paint , Color ) } else { paint . setColor ( Color . MAGENTA ) ; } } else { if $F104255 ( conn ) { paint . setColor ( Color . GREEN ) ; } else { paint . setColor ( Color . CYAN ) ; } } mTempWorkspacePoint . set ( conn . getPosition ( ) . x - mBlock . getPosition ( ) . x , conn . getPosition ( ) . y - mBlock . getPosition ( ) . y ) ; mHelper . workspaceToVirtualViewDelta ( mTempWorkspacePoint , mTempConnectionPosition ) ; if ( mHelper . useRtl ( ) ) { mTempConnectionPosition . x += mBlockViewSize . x ; } c . drawCircle ( mTempConnectionPosition . x , mTempConnectionPosition . y , NUM00 , paint ) ; } }
private static boolean isMerge ( InstructionHandle handle ) { if ( handle . hasTargeters ( ) ) { InstructionTargeter [ ] targeterList = handle . getTargeters ( ) ; for ( InstructionTargeter targeter : targeterList ) { if ( targeter instanceof BranchInstruction ) { return _BOOL ; } } } return _BOOL ; }
private synchronized void loadTrustManager $F72 { try { $F156 ( tmf , TrustManagerFactory , X509_ALGORITHM ) tmf . init ( keystore ) ; for ( TrustManager trustManager : tmf . getTrustManagers ( ) ) { if ( trustManager instanceof X509TrustManager ) { defaultViPRTrustManager = ( X509TrustManager ) trustManager ; $F980 ( log ) $F597 } } log . info ( NUM00 , defaultViPRTrustManager . getAcceptedIssuers ( ) . length ) ; } catch ( GeneralSecurityException e ) $F14108 ( log , e ) }
private boolean isOutsideDocElem $F72 { return ( null == m_docFrag ) && $F10470 ( m_elemStack ) && ( null == m_currentNode || m_currentNode . getNodeType ( ) == Node . DOCUMENT_NODE ) ; }
public ThreadPool ( String name , int poolSize ) { this . poolSize = poolSize ; this . poolName = name ; taskList = new LinkedList $F24548 $F72 ; threads = new WorkerThread [ poolSize ] ; createThreads ( ) ; }
private static Object invokeOrDie ( final Method method , final Object object , final Object ... params ) { try { $F89561 ( method , object , params ) } catch ( IllegalAccessException e ) { throw new RuntimeException ( NUM00 + NUM00 , e ) ; } catch ( InvocationTargetException e ) { final Throwable cause = e . getCause ( ) ; if ( cause instanceof RuntimeException ) $F220831 ( cause ) else if ( cause instanceof Error ) { $F106249 ( cause ) } else $F7077 ( cause ) } }
public void clear $F72 { this . normal = null ; this . depth = NUM00 ; }
public String name $F72 { return theName ; }
public final void addHelperTextColor ( @ ColorInt final int color ) { if $F2200 ( helperTextColors , color ) $F36131 ( helperTextColors , color , verifyPasswordStrength ) }
public void advanceToNextMinute $F72 $F845
ListBasedTokenStream ( AttributeSource attributeSource , List < AttributeSource > tokens ) { super ( attributeSource . getAttributeFactory ( ) ) ; this . tokens = tokens ; addAttributes ( attributeSource ) ; }
$F1431 protected Class resolveClass ( ObjectStreamClass classDesc ) throws $F6427 { $F20605 ( cname , classDesc ) return ClassFinder . resolveClass ( cname , this . loader ) ; }
public $F529 makeValid ( $F42010 ( source ) , String mode ) $F31637 ( makeValid , source , mode , _BOOL )
public static int find ( $F96 a , int fromIndex , int toIndex , $F96 key ) { int result = - NUM00 ; int sublen = key . length ; int maxpos , first , sp = NUM00 ; maxpos = $F56147 ( Math , toIndex , a ) - sublen ; for ( first = fromIndex ; sp != sublen && first <= maxpos ; first ++ ) { first = find ( a , first , maxpos , key [ NUM00 ] ) ; if $F74591 ( first , maxpos ) $F5153 for ( sp = NUM00 ; sp < sublen ; sp ++ ) { if $F219258 ( a , first , sp , key ) { sp = sublen ; } } } if ( sublen == NUM00 ) { result = NUM00 ; } else if ( sp == sublen ) { result = ( first - NUM00 ) ; } return result ; }
private void addSyntheticEdge ( Collection < GraphEdge > result , GraphEdge original , GraphNode head , GraphNode tail ) { result . add ( new GraphEdge ( head , tail , original . getRelation ( ) ) ) ; }
public void addStates ( State [ ] s ) { for ( $F1139 ( i , s ) ) $F15869 ( states , s , i ) }
private synchronized void readObject $F154558 ( s ) throws $F6427 { $F6428 ( s ) init ( getMask ( actions ) ) ; }
private static $F96 WindowsRegEnumKeyEx1 $F14337 ( hKey , subKeyIndex , maxKeyLength ) { $F7237 ( result , WindowsRegEnumKeyEx , hKey , subKeyIndex , maxKeyLength ) if ( result != null ) { return result ; } else { long sleepTime = INIT_SLEEP_TIME ; for ( $F119 ( i , MAX_ATTEMPTS ) ) { try $F7595 ( Thread , sleepTime ) $F42359 ( result ) sleepTime *= NUM00 ; result = WindowsRegEnumKeyEx ( hKey , subKeyIndex , maxKeyLength ) ; $F21525 ( result ) } } return result ; }
public Tasker addTask ( Task task ) { tasks . add ( task ) ; lastAddedTask = task ; return this ; }
private void initComputeProgram $F72 { glUseProgram ( computeProgram ) ; $F130812 ( workGroupSize , BufferUtils ) glGetProgramiv ( computeProgram , GL_COMPUTE_WORK_GROUP_SIZE , workGroupSize ) ; $F36986 ( workGroupSizeX , workGroupSize ) $F36986 ( workGroupSizeY , workGroupSize ) timeUniform = glGetUniformLocation ( computeProgram , NUM00 ) ; blendFactorUniform = glGetUniformLocation ( computeProgram , NUM00 ) ; bounceCountUniform = glGetUniformLocation ( computeProgram , NUM00 ) ; $F130812 ( params , BufferUtils ) int loc = glGetUniformLocation ( computeProgram , NUM00 ) ; glGetUniformiv ( computeProgram , loc , params ) ; $F36986 ( framebufferImageBinding , params ) loc = glGetUniformLocation ( computeProgram , NUM00 ) ; glGetUniformiv ( computeProgram , loc , params ) ; $F36986 ( worldPositionImageBinding , params ) loc = glGetUniformLocation ( computeProgram , NUM00 ) ; glGetUniformiv ( computeProgram , loc , params ) ; $F36986 ( worldNormalImageBinding , params ) glUseProgram ( NUM00 ) ; }
public void sort $F72 { throwIfImmutable ( ) ; if ( ! sorted ) { Arrays . sort ( values , NUM00 , size ) ; sorted = _BOOL ; } }
public static Object objectFromByteBuffer $F97 ( buffer ) throws Exception { $F1275 ( buffer ) $F5950 ( inStream , buffer ) ObjectInputStream in = new ObjectInputStreamExt ( inStream ) ; $F67404 ( retval , in ) $F59 ( in ) return retval ; }
public String generateGroupName ( String policyName , $F2689 existingGroupNames , String parentGroupName ) { int count = NUM00 ; String format = null ; while ( count <= existingGroupNames . size ( ) ) { if ( NUM00 == count ) { format = String . format ( NUM00 , policyName ) ; } else { format = String . format ( NUM00 , policyName , count ) ; } String generatedGroupName = generate ( parentGroupName , format , SmisConstants . MASK_NAME_DELIMITER , SmisConstants . MAX_STORAGE_GROUP_NAME_LENGTH ) ; if $F2200 ( existingGroupNames , generatedGroupName ) { return generatedGroupName ; } count ++ ; } return generate ( parentGroupName , String . format ( NUM00 , policyName ) , SmisConstants . MASK_NAME_DELIMITER , SmisConstants . MAX_STORAGE_GROUP_NAME_LENGTH ) ; }
public static void assertColumnTypes ( ResultSet rs , $F2027 expectedTypes ) throws SQLException { $F19097 ( rsmd , rs ) $F16742 ( actualCols , rsmd ) assertEquals ( NUM00 , expectedTypes . length , rsmd . getColumnCount ( ) ) ; for ( $F119 ( i , actualCols ) ) { assertEquals ( NUM00 + ( i + NUM00 ) , expectedTypes [ i ] , rsmd . getColumnType ( i + NUM00 ) ) ; } }
public DefaultActionGroup ( $F1113 AnAction ... actions ) $F81861 ( this , Arrays , actions )
public int add ( T dl , int row ) { _list . add ( row , dl ) ; fireTableRowsInserted ( row , row ) ; return row ; }
private void pushTerm ( BytesRef text ) throws IOException { int limit = Math . min ( lastTerm . length ( ) , text . length ) ; int pos = NUM00 ; while ( pos < limit && lastTerm . byteAt ( pos ) == text . bytes [ text . offset + pos ] ) { pos ++ ; } for ( $F22866 ( i , lastTerm ) ; i >= pos ; i -- ) { int prefixTopSize = pending . size ( ) - prefixStarts [ i ] ; if ( prefixTopSize >= minItemsInBlock ) { writeBlocks ( i + NUM00 , prefixTopSize ) ; prefixStarts [ i ] -= prefixTopSize - NUM00 ; } } if $F5624 ( prefixStarts , text ) { prefixStarts = ArrayUtil . grow ( prefixStarts , text . length ) ; } for ( $F9958 ( i , pos , text ) ) { prefixStarts [ i ] = pending . size ( ) ; } lastTerm . copyBytes ( text ) ; }
public NumericLiteral ( Object x ) { if ( x instanceof Number ) { m_number = ( Number ) x ; m_type = TypeLib . getPrimitiveType ( m_number . getClass ( ) ) ; } else $F825 }
$F32357 ( Class , _BOOL )
$F20664 $F1 protected void onMeasure ( int widthMeasureSpec , int heightMeasureSpec ) { $F20444 ( widthMode , MeasureSpec , widthMeasureSpec ) $F20444 ( heightMode , MeasureSpec , heightMeasureSpec ) $F23132 ( maxWidth , MeasureSpec , widthMeasureSpec ) $F23132 ( maxHeight , MeasureSpec , heightMeasureSpec ) if ( widthMode == MeasureSpec . UNSPECIFIED ) maxWidth = Integer . MAX_VALUE ; if ( heightMode == MeasureSpec . UNSPECIFIED ) maxHeight = Integer . MAX_VALUE ; int paddingLeft = getPaddingLeft ( ) ; int paddingTop = getPaddingTop ( ) ; int paddingRight = getPaddingRight ( ) ; int paddingBottom = getPaddingBottom ( ) ; int maxRightBound = maxWidth - paddingRight ; int maxBottomBound = maxHeight - paddingBottom ; int left ; int top ; int right ; int bottom ; int rightBound = paddingLeft ; int maxRightNoPadding = rightBound ; int bottomBound ; int lastMaxBottom = paddingTop ; int maxBottom = lastMaxBottom ; int childWidth ; int childHeight ; int lineStartIndex = NUM00 ; int lineEndIndex ; $F725 ( rectList ) int childCount = getChildCount ( ) ; for ( $F119 ( index , childCount ) ) { final View child = getChildAt ( index ) ; child . measure ( MeasureSpec . UNSPECIFIED , MeasureSpec . UNSPECIFIED ) ; if ( child . getVisibility ( ) == View . GONE ) $F598 $F3670 ( lp , child ) childWidth = child . getMeasuredWidth ( ) ; childHeight = child . getMeasuredHeight ( ) ; left = rightBound + lp . leftMargin ; right = left + childWidth ; rightBound = right + lp . rightMargin ; if ( rightBound > maxRightBound ) { lineEndIndex = index ; adjustBaseLine ( maxBottom - lastMaxBottom , lineStartIndex , lineEndIndex ) ; $F612 ( maxBottom , maxBottomBound ) if ( lineEndIndex == lineStartIndex ) { child . measure ( MeasureSpec . makeMeasureSpec ( maxWidth - paddingLeft - paddingRight - lp . leftMargin - lp . rightMargin , MeasureSpec . AT_MOST ) , MeasureSpec . UNSPECIFIED ) ; childWidth = child . getMeasuredWidth ( ) ; childHeight = child . getMeasuredHeight ( ) ; } left = paddingLeft + lp . leftMargin ; right = left + childWidth ; rightBound = right + lp . rightMargin ; lastMaxBottom = maxBottom ; top = lastMaxBottom + lp . topMargin ; bottom = top + childHeight ; bottomBound = bottom + lp . bottomMargin ; lineStartIndex = index ; } else { top = lastMaxBottom + lp . topMargin ; bottom = top + childHeight ; bottomBound = bottom + lp . bottomMargin ; } $F15468 ( rightBound , maxRightNoPadding ) $F15468 ( bottomBound , maxBottom ) $F28883 ( rect ) rect . left = left ; rect . top = top ; rect . right = right ; rect . bottom = bottom ; rectList . add ( rect ) ; } adjustBaseLine ( maxBottom - lastMaxBottom , lineStartIndex , rectList . size ( ) ) ; int measuredWidth ; int measuredHeight ; if ( widthMode == MeasureSpec . EXACTLY ) measuredWidth = maxWidth ; else measuredWidth = maxRightNoPadding + paddingRight ; if ( heightMode == MeasureSpec . EXACTLY ) measuredHeight = maxHeight ; else { measuredHeight = maxBottom + paddingBottom ; if ( heightMode == MeasureSpec . AT_MOST ) measuredHeight = measuredHeight > maxHeight ? maxHeight : measuredHeight ; } setMeasuredDimension ( measuredWidth , measuredHeight ) ; }
$F39742 ( update , unsafe , this , headOffset )
private void ensureBufferCapacity ( int desiredCapacity ) { int capacity = pixelBuffer . length ; while ( capacity < desiredCapacity ) { capacity *= NUM00 ; } if ( capacity > pixelBuffer . length ) $F75474 ( pixelBuffer , capacity ) }
protected Set < DependencyKind > removeDependency ( Node n ) { Set < DependencyKind > $F9626 ( removedKinds ) ; for ( $F40424 ( dk , DependencyKind ) ) { $F6870 depsByKind = deps . get ( dk ) ; $F45557 ( depsByKind ) if $F16914 ( depsByKind , n ) $F207 ( removedKinds , dk ) } return removedKinds ; }
public static $F9340 ConcurrentMap $F9340 newConcurrentMapWithAggressiveConcurrency $F72 { return new $F400431 ( NUM00 , NUM00 , aggressiveConcurrencyLevel ) ; }
$F1 public boolean connectionAllowed ( String eventName ) { if ( m_listenee != null || $F1263 ( eventName ) ) { return _BOOL ; } return _BOOL ; }
protected char skipAllWhitespace ( Reader r ) throws IOException { char c ; do { c = ( char ) r . read ( ) ; } while ( Character . isWhitespace ( c ) && c != $F117344 ) ; return c ; }
public Iterator enumerateLiteralResultAttributes $F72 { return ( null == m_avts ) ? null : m_avts . iterator ( ) ; }
public $F2539 parse ( final String str , char separator ) { if ( str == null ) { return $F4190 ; } return parse ( str . toCharArray ( ) , separator ) ; }
public PriorityQueue $F22451 ( c ) { if ( c instanceof PriorityQueue ) { getFromPriorityQueue ( ( PriorityQueue $F22448 ) c ) ; } else if ( c instanceof SortedSet ) { getFromSortedSet ( ( SortedSet $F22448 ) c ) ; } else $F86383 ( initSize , c , addAll ) }
private String resourceId $F72 { return subSchemaPath . isEmpty ( ) ? null : lastSchemaNodeName ( ) ; }
private long acquireWrite ( boolean interruptible , long deadline ) { WNode node = null , p ; for ( int spins = - NUM00 ; ; ) { long m , s , ns ; if ( ( m = ( s = state ) & ABITS ) == NUM00 ) { if ( U . compareAndSwapLong ( this , STATE , s , ns = s + WBIT ) ) return ns ; } else if ( spins < NUM00 ) spins = ( m == WBIT && wtail == whead ) ? SPINS : NUM00 ; else if ( spins > NUM00 ) { if ( LockSupport . nextSecondarySeed ( ) >= NUM00 ) -- spins ; } else if ( ( p = wtail ) == null ) { WNode hd = new WNode ( WMODE , null ) ; if $F200476 ( U , this , WHEAD , hd ) wtail = hd ; } else if ( node == null ) node = new WNode ( WMODE , p ) ; else if ( node . prev != p ) node . prev = p ; else if ( U . compareAndSwapObject ( this , WTAIL , p , node ) ) { p . next = node ; $F597 } } for ( int spins = - NUM00 ; ; ) { WNode h , np , pp ; int ps ; if ( ( h = whead ) == p ) { if ( spins < NUM00 ) spins = HEAD_SPINS ; else if ( spins < MAX_HEAD_SPINS ) spins <<= NUM00 ; for ( int k = spins ; ; ) { long s , ns ; if $F72344 ( s , state , ABITS ) { if ( U . compareAndSwapLong ( this , STATE , s , ns = s + WBIT ) ) { whead = node ; node . prev = null ; return ns ; } } else if ( LockSupport . nextSecondarySeed ( ) >= NUM00 && -- k <= NUM00 ) $F597 } } else if ( h != null ) { WNode c ; Thread w ; while ( ( c = h . cowait ) != null ) { if ( U . compareAndSwapObject ( h , WCOWAIT , c , c . cowait ) && $F43539 ( w , c ) ) U . unpark ( w ) ; } } if ( whead == h ) { if ( ( np = node . prev ) != p ) { if ( np != null ) ( p = np ) . next = node ; } else if ( ( ps = p . status ) == NUM00 ) U . compareAndSwapInt ( p , WSTATUS , NUM00 , WAITING ) ; else if ( ps == CANCELLED ) { if ( ( pp = p . prev ) != null ) { node . prev = pp ; pp . next = node ; } } else { long time ; if ( deadline == NUM00 ) time = NUM00 ; else if ( ( time = deadline - System . nanoTime ( ) ) <= NUM00 ) return cancelWaiter ( node , node , _BOOL ) ; $F686 ( wt , Thread ) U . putObject ( wt , PARKBLOCKER , this ) ; node . thread = wt ; if ( p . status < NUM00 && ( p != h || ( state & ABITS ) != NUM00 ) && whead == h && node . prev == p ) U . park ( _BOOL , time ) ; node . thread = null ; $F200511 ( U , wt , PARKBLOCKER ) if ( interruptible && Thread . interrupted ( ) ) return cancelWaiter ( node , node , _BOOL ) ; } } } }
$F1 public boolean isInitial $F72 { return init ; }
public static String denormalize ( final CharSequence self ) { if ( lineSeparator == null ) { final StringWriter sw = new StringWriter $F989 ; try { final BufferedWriter bw = new BufferedWriter ( sw ) ; $F1769 ( bw ) $F1206 ( bw ) $F6947 ( lineSeparator , sw ) } catch ( IOException ioe ) { lineSeparator = NUM00 ; } } $F22998 ( len , self ) if ( len < NUM00 ) $F2495 ( self ) final StringBuilder sb = new StringBuilder ( ( NUM00 * len ) / NUM00 ) ; int i = NUM00 ; CharSequence cs = ( self instanceof GString ) ? self . toString ( ) : self ; while ( i < len ) { final char ch = cs . charAt ( i ++ ) ; switch ( ch ) { $F1262 sb . append ( lineSeparator ) ; if ( ( i < len ) && $F11983 ( cs , i ) ) { ++ i ; } $F597 $F1262 sb . append ( lineSeparator ) ; $F597 $F3000 ( sb , ch ) } } $F92 ( sb ) }
public static void performSaveAs ( String schemaPrefixFileName , String selFilePath , ContainerConfig containerConfig ) { try { File fileWithDefaultConfiguration = createContainerSchemaFile ( schemaPrefixFileName , selFilePath ) ; updateFile ( containerConfig , fileWithDefaultConfiguration . getPath ( ) , schemaPrefixFileName ) ; } $F1516 ( e ) }
public boolean isAborted $F72 $F1522 ( isAborted )
public void append ( int key , E value ) { $F49491 ( mSize , key , mKeys , put , value ) $F143594 ( mGarbage , mSize , mKeys , gc ) int pos = mSize ; if ( pos >= mKeys . length ) { int n = idealIntArraySize ( pos + NUM00 ) ; $F4120 ( nkeys , n ) $F133 ( nvalues , n ) $F7057 ( System , mKeys , nkeys ) $F7057 ( System , mValues , nvalues ) mKeys = nkeys ; mValues = nvalues ; } mKeys [ pos ] = key ; mValues [ pos ] = value ; mSize = pos + NUM00 ; }
public void testSkip $F72 throws IOException { $F47960 ( data ) $F96 gzipped = GZIPOutputStreamTest . gzip ( data ) ; GZIPInputStream in = new GZIPInputStream $F24702 ( gzipped ) ; long totalSkipped = NUM00 ; long count ; do { count = in . skip ( Long . MAX_VALUE ) ; totalSkipped += count ; } while ( count > NUM00 ) ; assertEquals ( data . length , totalSkipped ) ; $F59 ( in ) }
private Support_TestWebData ( String path , String type ) { $F1705 ( file , path ) $F3935 ( testLength , file ) testLastModified = file . lastModified ( ) ; $F32928 ( testName , file ) testType = type ; testDir = file . isDirectory ( ) ; $F1538 ( out ) FileInputStream in = null ; try { $F5335 ( in , file ) while $F2892 ( in ) { out . write ( in . read ( ) ) ; } $F59 ( in ) $F1206 ( out ) $F3031 ( test0Data , out ) $F59 ( out ) test0DataAvailable = _BOOL ; $F665 } $F1516 ( e ) finally { try $F23818 ( in , out ) $F29052 } }
public static void print ( boolean x ) $F7523 ( out , x )
public IpcSharedMemorySpace ( String tokFileName , int writerPid , int readerPid , int size , boolean reader , IgniteLogger parent ) throws IgniteCheckedException { assert size > NUM00 : NUM00 ; log = parent . getLogger ( IpcSharedMemorySpace . class ) ; opSize = size ; shmemPtr = IpcSharedMemoryUtils . allocateSystemResources ( tokFileName , size , DEBUG && log . isDebugEnabled ( ) ) ; shmemId = IpcSharedMemoryUtils . sharedMemoryId ( shmemPtr ) ; semId = IpcSharedMemoryUtils . semaphoreId ( shmemPtr ) ; isReader = reader ; this . tokFileName = tokFileName ; this . readerPid = readerPid ; this . writerPid = writerPid ; if $F7383 ( DEBUG , log ) $F586 ( log , this ) }
$F1 public void close $F72 { try $F6399 ( connection ) catch ( SQLException e ) $F302 ( e ) }
public Version addQualifier ( String qualifier ) { $F3803 newQualifiers = new $F201 ( this . qualifiers ) ; newQualifiers . add ( qualifier ) ; return new Version ( major , minor , patch , $F10148 ( newQualifiers ) ) ; }
public int loadSigned16 ( int addr ) { return loadSigned16 ( addr , AccessSource . CODE ) ; }
public static String arrayToHexString $F97 ( array ) { return $F39529 ( arrayToHexString , array ) ; }
public static void unregisterBaggageHandler ( BaggageHandler handler ) $F106 ( handlers , handler )
public DefaultHeatMapDataset ( int xSamples , int ySamples , double minX , double maxX , double minY , double maxY ) { $F6853 ( xSamples ) $F6853 ( ySamples ) if ( Double . isInfinite ( minX ) || Double . isNaN ( minX ) ) $F825 if ( Double . isInfinite ( maxX ) || Double . isNaN ( maxX ) ) $F825 if ( Double . isInfinite ( minY ) || Double . isNaN ( minY ) ) $F825 if ( Double . isInfinite ( maxY ) || Double . isNaN ( maxY ) ) $F825 this . xSamples = xSamples ; this . ySamples = ySamples ; this . minX = minX ; this . maxX = maxX ; this . minY = minY ; this . maxY = maxY ; this . zValues = new double [ xSamples ] [ ] ; for ( $F119 ( x , xSamples ) ) { this . zValues [ x ] = new double [ ySamples ] ; } }
public static void assertEqualsAnyOrder ( EventBean [ ] [ ] expected , EventBean [ ] [ ] actual ) { $F153093 ( compareArraySize , expected , actual ) int numMatches = NUM00 ; $F24314 ( foundReceived , actual ) for ( $F80820 expectedObject : expected ) { boolean found = _BOOL ; for ( $F1139 ( i , actual ) ) { if ( foundReceived [ i ] ) $F1448 boolean match = compareEqualsExactOrder ( actual [ i ] , expectedObject ) ; if ( match ) { found = _BOOL ; numMatches ++ ; foundReceived [ i ] = _BOOL ; $F597 } } if ( ! found ) { log . error ( NUM00 + Arrays . toString ( expectedObject ) ) ; log . error ( NUM00 + Arrays . toString ( actual ) ) ; } ScopeTestHelper . assertTrue ( found ) ; } ScopeTestHelper . assertEquals ( numMatches , expected . length ) ; }
private void collectText $F72 { if ( textNodeCount > NUM00 ) { $F39858 ( firstTextNode , textBuffer ) } textNodeCount = NUM00 ; }
$F45923 public static < T extends Annotation > T unproxy ( T annotation ) { Function unproxyFunction = getUnproxyFunction ( annotation . annotationType ( ) ) ; return ( T ) unproxyFunction . apply ( annotation ) ; }
public static $F27878 parseExpression ( Context context , $F2690 configNamespaces , String text ) { return parseExpression ( context , configNamespaces , text , NUM00 , _BOOL ) ; }
public void addTickMarkSection ( final Section SECTION ) { $F77681 ( SECTION ) tickMarkSections . add ( SECTION ) ; Collections . sort ( tickMarkSections , new SectionComparator $F72 ) ; fireUpdateEvent ( REDRAW_EVENT ) ; }
protected static double calcQ_i ( double f , double lambda ) { return lambda * Math . exp ( - lambda * f ) ; }
void flush $F72 $F29882 ( printStream )
public CharBuffer delete ( int start , int end ) { $F29168 ( length ) if ( start < NUM00 || end < start || length < start ) $F232827 $F106734 ( end , Math , length ) int tail = length - end ; $F1469 buffer = buffer ( ) ; for ( $F119 ( i , tail ) ) { buffer [ start + i ] = buffer [ end + i ] ; } length ( length - ( end - start ) ) ; return this ; }
public void addPlotter ( final Plotter plotter ) $F207 ( plotters , plotter )
$F9341 findNear ( K kkey , int rel ) { $F45430 ( key , comparable , kkey ) for ( $F589 ) { $F45432 ( b , findPredecessor , key ) $F35175 ( n , b ) for ( $F589 ) { if ( n == null ) return ( ( rel & LT ) == NUM00 || b . isBaseHeader ( ) ) ? null : b ; $F35175 ( f , n ) $F45438 ( n , b ) Object v = n . value ; $F45440 ( v , n , b , f ) $F45442 ( v , n , b ) $F45446 ( c , key , n ) if ( ( c == NUM00 && ( rel & EQ ) != NUM00 ) || ( c < NUM00 && ( rel & LT ) == NUM00 ) ) return n ; if ( c <= NUM00 && ( rel & LT ) != NUM00 ) $F45454 ( b ) b = n ; n = f ; } } }
public void addListener ( SpeedrunsLiveListener listener ) $F207 ( listeners , listener )
public void writeExif ( Bitmap bmap , OutputStream exifOutStream ) throws IOException { $F26831 ( bmap , exifOutStream , NULL_ARGUMENT_ ) OutputStream s = getExifWriterStream ( exifOutStream ) ; $F26834 ( bmap , Bitmap , s ) $F1206 ( s ) }
public boolean find ( int start ) { if ( start < NUM00 || start > input . length ( ) ) { throw new IndexOutOfBoundsException ( NUM00 + start + NUM00 + input . length ( ) ) ; } synchronized ( this ) { matchFound = findImpl ( address , input , start , matchOffsets ) ; } return matchFound ; }
public int action ( String fault , String action ) { Integer current = get ( fault ) ; if ( current == null ) $F29415 ( fault ) boolean no = action . startsWith ( NUM00 ) ; if ( no ) $F3108 ( action ) Integer bit = getAction ( action ) ; if ( bit == null ) $F29415 ( action ) $F79839 ( old , current ) $F79839 ( mask , bit ) int n = ( old & ( ~ mask ) ) ; n = ( no ) ? n : ( n | mask ) ; put ( fault , new Integer ( n ) ) ; return n ; }
public static boolean containsWhitespace ( CharSequence str ) { $F38676 ( hasLength , str , _BOOL ) $F1749 ( strLen , str ) for ( $F119 ( i , strLen ) ) { if $F11974 ( Character , str , i ) { return _BOOL ; } } return _BOOL ; }
public boolean hasUnsupportedCriticalExtension $F72 { Set extns = getCriticalExtensionOIDs ( ) ; $F1933 ( extns , _BOOL ) extns . remove ( RFC3280CertPathUtilities . ISSUING_DISTRIBUTION_POINT ) ; extns . remove ( RFC3280CertPathUtilities . DELTA_CRL_INDICATOR ) ; $F3386 ( extns ) }
public static $F4203 T decodeFromBase64 ( Coder $F4203 coder , String encodedValue ) throws CoderException { return decodeFromSafeStream ( coder , new ByteArrayInputStream ( Base64 . decodeBase64 ( encodedValue ) ) , Coder . Context . OUTER ) ; }
public void validate ( Set setData ) throws ValidationException { for ( $F2774 ( iter , setData ) ) { performValidation ( $F2775 ( iter ) ) ; } }
public String add ( Object ... values ) { double result = NUM00 ; for ( $F1139 ( i , values ) ) { result += FunctionHandler . getDouble ( values [ i ] ) ; } $F23209 ( Double , result ) }
public $F3803 listMyDBs ( String owner , boolean restricted ) { Connection conn = null ; try { conn = getConnection ( ) ; return listMyDBs ( conn , owner , restricted ) ; } $F427956 ( logger , Level , ex ) $F19458 ( DBUtils , conn ) $F1274 }
protected void doFunction ( $F5415 inputs , int inputOffset , $F5415 outputs , int outputOffset ) { float input = inputs [ inputOffset ] ; for ( $F50810 ( i , getNumOutputs ) ) { outputs [ i + outputOffset ] = getC0 ( i ) + ( float ) ( Math . pow ( input , getN ( ) ) * ( getC1 ( i ) - getC0 ( i ) ) ) ; } }
public void put ( String key , long value ) $F233270 ( key , urlParams , String , value )
public int compare ( Object o1 , Object o2 ) { return comparator . compare ( o1 , o2 ) ; }
public void addCheckBoxActionListener ( ActionListener al ) $F42183 ( m_enableDistributedExperiment , al )
$F28896 ( index , paint , bounds , title , getTitle )
GF256Poly addOrSubtract ( GF256Poly other ) { if $F45204 ( field , other ) $F825 $F58185 ( isZero , other ) if ( other . isZero ( ) ) { return this ; } $F2027 smallerCoefficients = this . coefficients ; $F2027 largerCoefficients = other . coefficients ; if ( smallerCoefficients . length > largerCoefficients . length ) { $F2027 temp = smallerCoefficients ; smallerCoefficients = largerCoefficients ; largerCoefficients = temp ; } $F22974 ( sumDiff , largerCoefficients ) int lengthDiff = largerCoefficients . length - smallerCoefficients . length ; $F135 ( System , largerCoefficients , sumDiff , lengthDiff ) for ( $F9958 ( i , lengthDiff , largerCoefficients ) ) { sumDiff [ i ] = GF256 . addOrSubtract ( smallerCoefficients [ i - lengthDiff ] , largerCoefficients [ i ] ) ; } return new GF256Poly ( field , sumDiff ) ; }
$F1 public String toString $F72 { $F280 ( sb ) sb . append ( type ) ; $F84 ( sb ) sb . append ( subType ) ; for ( $F3465 ( name , attributes ) ) { if ( inferredCharset && ATTR_CHARSET . equals ( name ) ) $F1448 $F84 ( sb ) sb . append ( name ) ; $F84 ( sb ) $F1729 ( value , attributes , name ) $F1150 ( tokenMatcher , TOKEN_PATTERN , value ) if $F24133 ( tokenMatcher ) $F288 ( sb , value ) else $F287 ( sb , value ) } $F92 ( sb ) }
public static long firstFieldOffset ( Class clazz ) { long minSize = roundUpTo8 ( headerSize ( clazz ) ) ; while ( clazz != $F12222 ) { for ( $F128325 ( f , clazz ) ) { if ( ( f . getModifiers ( ) & Modifier . STATIC ) == NUM00 ) { long offset = unsafe . objectFieldOffset ( f ) ; $F45132 ( offset , minSize ) } } $F7852 ( clazz ) } return minSize ; }
$F5803 ( drawable , getDrawable , matrix , prevMatrix , drawableWidth , drawableHeight , scaleX , viewWidth , scaleY , viewHeight , mScaleType , CENTER , CENTER_CROP , Math , CENTER_INSIDE , FIT_CENTER , FIT_XY , redundantXSpace , redundantYSpace , matchViewWidth , matchViewHeight , isZoomed , imageRenderedAtLeastOnce , normalizedScale , prevMatchViewWidth , prevMatchViewHeight , savePreviousImageValues , m , Matrix , transX , transY , prevActualWidth , actualWidth , getImageWidth , translateMatrixAfterRotate , prevViewWidth , prevActualHeight , actualHeight , getImageHeight , prevViewHeight , fixTrans , setImageMatrix )
$F52428 ( tag , msg , args , sLevel , LEVEL_WARNING , String , Log )
private int processPollFds $F72 throws IOException { if ( pollFds . get ( NUM00 ) . revents == POLLIN ) { $F12496 ( buffer ) while ( IoBridge . read ( wakeupIn , buffer , NUM00 , NUM00 ) > NUM00 ) $F845 } int readyKeyCount = NUM00 ; for ( $F3836 ( i , pollFds ) ) { StructPollfd pollFd = pollFds . get ( i ) ; if ( pollFd . revents == NUM00 ) $F1448 if ( pollFd . fd == null ) $F5153 SelectionKeyImpl key = ( SelectionKeyImpl ) pollFd . userData ; pollFd . fd = null ; pollFd . userData = null ; int ops = key . interestOpsNoCheck ( ) ; int selectedOps = NUM00 ; if ( ( pollFd . revents & POLLHUP ) != NUM00 ) { selectedOps |= ops ; } if ( ( pollFd . revents & POLLIN ) != NUM00 ) { selectedOps |= ops & ( OP_ACCEPT | OP_READ ) ; } if ( ( pollFd . revents & POLLOUT ) != NUM00 ) { if $F104255 ( key ) { selectedOps |= ops & OP_WRITE ; } else { selectedOps |= ops & OP_CONNECT ; } } if ( selectedOps != NUM00 ) { boolean wasSelected = mutableSelectedKeys . contains ( key ) ; if ( wasSelected && key . readyOps ( ) != selectedOps ) { key . setReadyOps ( key . readyOps ( ) | selectedOps ) ; ++ readyKeyCount ; } else if ( ! wasSelected ) { key . setReadyOps ( selectedOps ) ; mutableSelectedKeys . add ( key ) ; ++ readyKeyCount ; } } } return readyKeyCount ; }
public final V extractFirst $F72 { if $F44803 ( size ) { if ( GWT . isScript ( ) ) { V ret = jsArray . get ( NUM00 ) ; $F86372 ( jsArray ) return ret ; } else { return javaArray . remove ( NUM00 ) ; } } $F1274 }
$F1 public void actionPerformed ( ActionEvent event ) { $F35563 ( command , event ) if $F3057 ( command ) $F5795 ( attemptLabelFontSelection ) else if $F3057 ( command ) $F5795 ( attemptModifyLabelPaint ) else if $F3057 ( command ) $F5795 ( attemptTickLabelFontSelection ) }
$F30902 public void test_unwrap_ByteBuffer$ByteBuffer_04 $F72 { String host = NUM00 ; int port = NUM00 ; $F30909 ( bbs , ByteBuffer ) $F30907 ( bbd , ByteBuffer ) SSLEngine sse = getEngine ( host , port ) ; try { sse . unwrap ( bbs , bbd ) ; fail ( NUM00 ) ; } $F30913 $F30915 ( fail , e ) }
public static void upgradeServerInstance ( SSOToken ssoToken , String instanceName , String instanceId , $F2540 ( upgradedValues ) ) throws SMSException , SSOException , ConfigurationException , IOException { ServiceConfig sc = getServerConfig ( ssoToken , instanceName ) ; if ( sc != null ) { Map map = sc . getAttributes ( ) ; map . remove ( ATTR_PARENT_SITE_ID ) ; Set newSet = getPropertiesSet ( upgradedValues ) ; map . put ( ATTR_SERVER_CONFIG , newSet ) ; sc . setAttributes ( map ) ; } else { throw new ConfigurationException $F3487 ; } }
public static $F4203 T instance $F38789 ( clazz ) { try $F171631 ( clazz ) catch ( InstantiationException | IllegalAccessException e ) $F48927 ( e ) }
$F73603 ( desc , c , pop , Type )
public GenericSipMsrpSession createMsrpSession ( ContactId contact , String featureTag , $F806 acceptTypes , $F806 acceptWrappedTypes ) { if $F1374 ( sLogger ) $F10090 ( sLogger , contact ) return new OriginatingSipMsrpSession ( this , contact , featureTag , mRcsSettings , System . currentTimeMillis ( ) , mContactManager , acceptTypes , acceptWrappedTypes ) ; }
public ForumPostConfig create ( ForumPostConfig config ) { config . addCredentials ( this ) ; $F77623 ( xml , POST , this , config ) Element root = parse ( xml ) ; $F1338 ( root ) try { ForumPostConfig $F98634 ( post ) ; post . parseXML ( root ) ; return post ; } $F77633 ( this , SDKException , exception ) }
protected void drawMark ( Graphics2D g2 , float x , float y , Color color ) { $F104030 ( bounds , mark ) float w = $F52896 ( bounds ) ; float h = $F52899 ( bounds ) ; x = x - ( w / NUM00 ) ; y = y - ( h / NUM00 ) ; g2 . translate ( x , y ) ; if ( color == null ) { if ( markFillPaint != null ) { g2 . setPaint ( markFillPaint ) ; g2 . fill ( mark ) ; } } else { g2 . setPaint ( color ) ; g2 . fill ( mark ) ; } g2 . setPaint ( markPaint ) ; g2 . setStroke ( markStroke ) ; g2 . draw ( mark ) ; $F86480 ( g2 , x , y ) Rectangle2D rect = new $F186398 ( x , y , w , h ) ; markBounds . add ( rect ) ; }
public void componentResized ( ComponentEvent e ) { if $F6456 ( logger , Level ) { logger . fine ( NUM00 + getWidth ( ) + NUM00 + getHeight ( ) ) ; } projection . setWidth ( getWidth ( ) ) ; projection . setHeight ( getHeight ( ) ) ; fireProjectionChanged ( ) ; }
public String toString $F72 { $F280 ( buf ) for ( StepPattern pat = this ; pat != null ; pat = pat . m_relativePathPattern ) { if ( pat != this ) $F84 ( buf ) buf . append ( Axis . getNames ( pat . m_axis ) ) ; $F84 ( buf ) if ( NUM00 == pat . m_whatToShow ) $F86 ( buf ) else if ( DTMFilter . SHOW_BYFUNCTION == pat . m_whatToShow ) $F86 ( buf ) else if ( DTMFilter . SHOW_ALL == pat . m_whatToShow ) $F86 ( buf ) else if ( DTMFilter . SHOW_TEXT == pat . m_whatToShow ) $F86 ( buf ) else if ( DTMFilter . SHOW_PROCESSING_INSTRUCTION == pat . m_whatToShow ) { $F84 ( buf ) if ( null != pat . m_name ) { buf . append ( pat . m_name ) ; } $F84 ( buf ) } else if ( DTMFilter . SHOW_COMMENT == pat . m_whatToShow ) $F86 ( buf ) else if ( null != pat . m_name ) { if ( DTMFilter . SHOW_ATTRIBUTE == pat . m_whatToShow ) $F86 ( buf ) if ( null != pat . m_namespace ) { $F84 ( buf ) buf . append ( pat . m_namespace ) ; $F84 ( buf ) } buf . append ( pat . m_name ) ; } else if ( DTMFilter . SHOW_ATTRIBUTE == pat . m_whatToShow ) $F86 ( buf ) else if ( ( DTMFilter . SHOW_DOCUMENT | DTMFilter . SHOW_DOCUMENT_FRAGMENT ) == pat . m_whatToShow ) $F86 ( buf ) else { buf . append ( NUM00 + Integer . toHexString ( pat . m_whatToShow ) ) ; } if ( null != pat . m_predicates ) { for ( int i = NUM00 ; i < pat . m_predicates . length ; i ++ ) { $F84 ( buf ) buf . append ( pat . m_predicates [ i ] ) ; $F84 ( buf ) } } } $F92 ( buf ) }
public static String byteArrayToHexString $F24576 ( block , offset , length ) { $F280 ( buf ) int len = block . length ; length = length + offset ; if ( ( len < length ) ) { length = len ; } for ( int i = NUM00 + offset ; i < length ; i ++ ) { byte2hex ( block [ i ] , buf ) ; $F24364 ( i , length , buf ) } $F92 ( buf ) }
private void changeValue ( AbstractStorageLabel $F1432 label , Object newValue ) { if ( ! Objects . equals ( label . getValue ( ) , newValue ) ) { synchronized ( labelEditListeners ) { for ( LabelEditListener listener : labelEditListeners ) { listener . preLabelValueChange ( label ) ; } } label . setValue ( newValue ) ; synchronized ( labelEditListeners ) { for ( LabelEditListener listener : labelEditListeners ) { listener . postLabelValueChange ( label ) ; } } } }
public void write $F24576 ( b , offset , length ) throws IOException { if ( entry . getMethod ( ) == DEFLATED ) { if ( length > NUM00 ) { if $F197883 ( def ) { def . setInput ( b , offset , length ) ; while ( ! def . needsInput ( ) ) $F5795 ( deflate ) } } } else { writeOut ( b , offset , length ) ; written += length ; } crc . update ( b , offset , length ) ; }
public void updatePoint ( float x , float y ) { if ( $F25556 ( Math , x , y ) > NUM00 ) if ( listener != null ) { listener . onAngleChangedListener ( getAngle ( x , - y ) ) ; } }
public final void quietlyJoin $F72 $F5795 ( doJoin )
$F1 public int clampViewPositionHorizontal $F2432 ( child , left , dx ) { $F1084 ( mDraggedView ) final int leftBound = NUM00 - MAX_OVERFLOW - ( mColumnSizeSide / NUM00 ) ; final int rightBound = getWidth ( ) + MAX_OVERFLOW + ( mColumnSizeSide / NUM00 ) ; return Math . min ( Math . max ( left , leftBound ) , rightBound ) ; }
HttpRequestWrapper ( HttpServletRequest request ) { super ( request ) ; }
private int convertToPanelX ( double xval ) { double temp = ( xval - m_minX ) / m_rangeX ; temp = temp * m_panelWidth ; $F23219 ( temp ) }
public void forward ( HttpServerRequest request ) $F11707 ( forward , request )
private $F2689 primaryKeys ( PreparedStatement stmt , String owner , String tbl ) throws SQLException { $F13750 ( pkCols ) $F3916 ( stmt , owner ) $F3916 ( stmt , tbl ) try ( ResultSet pkRs = stmt . executeQuery ( ) ) { while $F1682 ( pkRs ) pkCols . add ( pkRs . getString ( NUM00 ) ) ; } return pkCols ; }
public static long readUINT32 ( InputStream stream ) throws IOException { long result = NUM00 ; for ( int i = NUM00 ; i <= NUM00 ; i += NUM00 ) { result |= $F116968 ( stream ) < < i ; } return result ; }
private Token toPrefixToken ( ILeafNode leaf ) { Lexer lexer = new InternalN4JSLexer $F72 ; $F45667 ( text , leaf ) String prefix = text . substring ( NUM00 , endOffset - leaf . getTotalOffset ( ) ) ; ANTLRStringStream stream = new ANTLRStringStream ( prefix ) ; lexer . setCharStream ( stream ) ; Token nextToken = lexer . nextToken ( ) ; return new CommonToken ( nextToken . getType ( ) , nextToken . getText ( ) ) ; }
protected void add ( CSVRecord record ) { records . add ( Objects . requireNonNull ( record ) ) ; }
private void scheduledEnqueueSend $F72 { $F15856 ( schedulerQueueSize ) scheduled . set ( _BOOL ) ; enqueueSendWithErrorLogging ( ) ; }
private E awaitMatch ( Node s , Node pred , E e , boolean timed , long nanos ) { $F74107 ( deadline , timed , System , nanos ) $F686 ( w , Thread ) int spins = - NUM00 ; ThreadLocalRandom randomYields = null ; for ( $F589 ) { Object item = s . item ; if ( item != e ) { s . forgetContents ( ) ; $F74111 ( LinkedTransferQueue , item ) } if ( ( w . isInterrupted ( ) || ( timed && nanos <= NUM00 ) ) && s . casItem ( e , s ) ) $F74118 ( unsplice , pred , s , e ) if ( spins < NUM00 ) { if ( ( spins = spinsFor ( pred , s . isData ) ) > NUM00 ) randomYields = ThreadLocalRandom . current ( ) ; } else if ( spins > NUM00 ) { -- spins ; if ( randomYields . nextInt ( CHAINED_SPINS ) == NUM00 ) $F5756 ( Thread ) } else if $F74129 ( s ) { s . waiter = w ; } else if ( timed ) { $F27353 ( nanos , deadline , System ) if ( nanos > NUM00 ) LockSupport . parkNanos ( this , nanos ) ; } else $F74133 ( LockSupport , this ) } }
public static String join ( $F1469 self , String separator ) { $F83 ( buffer ) boolean first = _BOOL ; $F12553 ( separator ) for ( char next : self ) $F98972 ( first , _BOOL , buffer , separator , next ) $F92 ( buffer ) }
private $F4203 BindingAmp $F4203 findObjectBinding ( $F205906 key ) { Objects . requireNonNull ( key ) ; if ( key . qualifiers ( ) . length != NUM00 ) $F26853 return ( BindingAmp ) findBinding ( Key . of ( $F12222 , key . qualifiers ( ) [ NUM00 ] ) ) ; }
private void initComputeProgram $F72 { glUseProgram ( computeProgram ) ; $F130812 ( workGroupSize , BufferUtils ) glGetProgramiv ( computeProgram , GL_COMPUTE_WORK_GROUP_SIZE , workGroupSize ) ; $F36986 ( workGroupSizeX , workGroupSize ) $F36986 ( workGroupSizeY , workGroupSize ) timeUniform = glGetUniformLocation ( computeProgram , NUM00 ) ; blendFactorUniform = glGetUniformLocation ( computeProgram , NUM00 ) ; lightRadiusUniform = glGetUniformLocation ( computeProgram , NUM00 ) ; $F130812 ( props , BufferUtils ) $F130812 ( params , BufferUtils ) $F130813 ( props , GL_BUFFER_BINDING ) int objectsResourceIndex = glGetProgramResourceIndex ( computeProgram , GL_SHADER_STORAGE_BLOCK , NUM00 ) ; glGetProgramResourceiv ( computeProgram , GL_SHADER_STORAGE_BLOCK , objectsResourceIndex , props , null , params ) ; $F36986 ( objectsSsboBinding , params ) int trianglesResourceIndex = glGetProgramResourceIndex ( computeProgram , GL_SHADER_STORAGE_BLOCK , NUM00 ) ; glGetProgramResourceiv ( computeProgram , GL_SHADER_STORAGE_BLOCK , trianglesResourceIndex , props , null , params ) ; $F36986 ( trianglesSsboBinding , params ) int loc = glGetUniformLocation ( computeProgram , NUM00 ) ; glGetUniformiv ( computeProgram , loc , params ) ; $F36986 ( framebufferImageBinding , params ) loc = glGetUniformLocation ( computeProgram , NUM00 ) ; glGetUniformiv ( computeProgram , loc , params ) ; $F36986 ( worldPositionImageBinding , params ) loc = glGetUniformLocation ( computeProgram , NUM00 ) ; glGetUniformiv ( computeProgram , loc , params ) ; $F36986 ( worldNormalImageBinding , params ) glUseProgram ( NUM00 ) ; }
public boolean ifTaskCompletedSuccessOrFailureFromResponse ( ResponseOnSingeRequest myResponse ) { boolean isCompleted = _BOOL ; try { if ( myResponse == null || myResponse . isFailObtainResponse ( ) ) { return isCompleted ; } String responseBody = myResponse . getResponseBody ( ) ; if ( responseBody . matches ( successRegex ) || responseBody . matches ( failureRegex ) ) { isCompleted = _BOOL ; } } $F70676 ( logger , t ) return isCompleted ; }
public void centerHorizontal $F96672 ( nodes ) { if ( m_bNeedsUndoAction ) { addUndoAction ( new centerHorizontalAction ( nodes ) ) ; } int nMinY = - NUM00 ; int nMaxY = - NUM00 ; for ( $F2277 ( iNode , nodes ) ) { $F96678 ( nY , getPositionY , nodes , iNode ) if ( nY < nMinY || iNode == NUM00 ) { nMinY = nY ; } if ( nY > nMaxY || iNode == NUM00 ) { nMaxY = nY ; } } for ( $F2277 ( iNode , nodes ) ) { $F85651 ( nNode , nodes , iNode ) m_nPositionY . set ( nNode , ( nMinY + nMaxY ) / NUM00 ) ; } }
protected void appendText ( final String text ) { $F13324 ( text , textBody ) }
public void onRestoreInstanceState ( Bundle savedInstanceState ) { mSelectedPositions . addAll ( savedInstanceState . getIntegerArrayList ( TAG ) ) ; $F12258 ( Log , TAG , mSelectedPositions ) }
public Hour ( int hour , Day day ) { $F19400 ( ParamChecks , day ) this . hour = ( byte ) hour ; this . day = day ; $F53414 ( peg , Calendar ) }
public void undo $F72 { if ( -- m_tempUndoIndex < NUM00 ) $F65461 ( m_tempUndoIndex , m_tempUndoFiles ) if ( m_tempUndoFiles [ m_tempUndoIndex ] != null ) { AbstractFileLoader loader = ConverterUtils . getLoaderForFile ( m_tempUndoFiles [ m_tempUndoIndex ] ) ; try { loader . setFile ( m_tempUndoFiles [ m_tempUndoIndex ] ) ; setInstancesFromFile ( loader ) ; } catch ( Exception e ) { $F301 ( e ) m_Log . logMessage ( e . toString ( ) ) ; JOptionPane . showMessageDialog ( PreprocessPanel . this , $F368 ( e ) , NUM00 , JOptionPane . ERROR_MESSAGE ) ; } m_tempUndoFiles [ m_tempUndoIndex ] = null ; } int temp = m_tempUndoIndex - NUM00 ; if ( temp < NUM00 ) $F65461 ( temp , m_tempUndoFiles ) m_UndoBut . setEnabled ( m_tempUndoFiles [ temp ] != null ) ; }
public static boolean isConnectedUsingWifi $F72 { Context context = FeApp . getAppContext ( ) ; $F40395 ( cm , context , Context ) $F40397 ( ni , cm ) return ni != null && ni . isConnected ( ) == _BOOL && ni . getType ( ) == ConnectivityManager . TYPE_WIFI ; }
public void close $F72 throws IOException { if ( writer != null ) writer . flushBuffer ( ) ; }
$F18907 ( extOrdering )
public Process ( final File file , final ProgressListener progressListener ) throws IOException , XMLException { this . processLocation = new FileProcessLocation ( file ) ; initContext ( ) ; Reader in = null ; try { in = new InputStreamReader ( new FileInputStream ( file ) , NUM00 ) ; readProcess ( in , progressListener ) ; } $F8012 ( e ) $F14364 ( in ) }
public static String extractMusicIDFromMediaID $F20574 ( mediaID ) { $F12747 ( pos , mediaID , LEAF_SEPARATOR ) if ( pos >= NUM00 ) $F26088 ( mediaID , pos ) $F1274 }
public void testGetScope $F72 throws Exception { $F63182 ( i ) assertNull ( i . getScope ( ) ) ; IdentityScope s = IdentityScope . getSystemScope ( ) ; Identity i2 = new IdentityStub ( NUM00 , s ) ; assertSame ( s , i2 . getScope ( ) ) ; }
public $F131 buildParameters ( $F131 firstParameters , Method method , $F26426 ( annotationType ) ) { int parametersLength = $F36180 ( method ) ; if ( firstParameters . length > NUM00 && parametersLength < NUM00 ) { throw new RepositoryMethodException $F10797 ( String , annotationType ) ; } int parametersToResolve = parametersLength - firstParameters . length ; $F133 ( additionalParameters , parametersToResolve ) for ( int i = firstParameters . length ; i < parametersLength ; i ++ ) { additionalParameters [ i - firstParameters . length ] = parameterProvider . provide ( method , i ) ; } return concatenate ( firstParameters , additionalParameters ) ; }
$F1 public boolean contains ( S2Cell cell ) { return contains ( cell . id ( ) ) ; }
public SimplexNoiseGenerator ( Random rand ) { super ( rand ) ; offsetW = $F32605 ( rand ) ; }
public static $F2469 values ( Long [ ] array ) { $F19280 ( dest , array ) for ( $F1139 ( i , array ) ) { Long v = array [ i ] ; if ( v != null ) { dest [ i ] = v . longValue ( ) ; } } return dest ; }
$F1 public void processNewLines $F4374 ( lines ) { for ( String line : lines ) { if $F3106 ( line ) $F1448 if $F3578 ( line ) $F24818 ( myIsFileMissing , _BOOL ) $F35105 ( values , line , LINE_SPLIT_REGEX ) if ( values . length < INDEX_OF_TX_BYTES ) $F1448 try { int lineUid = Integer . parseInt ( values [ INDEX_OF_UID ] ) ; if ( myUid == lineUid ) { int tempRxBytes = Integer . parseInt ( values [ INDEX_OF_RX_BYTES ] ) ; int tempTxBytes = Integer . parseInt ( values [ INDEX_OF_TX_BYTES ] ) ; if ( tempRxBytes < NUM00 || tempTxBytes < NUM00 ) { LOG . warning ( String . format ( NUM00 , tempRxBytes , tempTxBytes , line ) ) ; $F598 } myRxBytes += tempRxBytes ; myTxBytes += tempTxBytes ; } } catch ( NumberFormatException e ) { LOG . warning ( String . format ( NUM00 , values [ INDEX_OF_UID ] , values [ INDEX_OF_RX_BYTES ] , values [ INDEX_OF_TX_BYTES ] , line ) ) ; } } }
protected void initLookup $F72 { $F12775 ( m_lookup ) for ( $F9808 ( i , m_names ) ) { m_lookup . put ( m_names [ i ] , new Integer ( i ) ) ; } }
public String toString $F72 { String str = NUM00 ; String followedBy = NUM00 ; int lastType = - NUM00 ; String lastString = NUM00 ; int singlesCount = NUM00 ; for ( $F44696 ( e , formatConstraints ) ) { FormatConstraint constraint = ( FormatConstraint ) e . nextElement ( ) ; if ( constraint . count == FormatConstraint . COUNT_EXACTLY_ONE ) { if ( lastType != - NUM00 ) { if ( lastType != constraint . type ) { str += followedBy + singlesCount + lastString ; followedBy = NUM00 ; singlesCount = NUM00 ; lastType = constraint . type ; $F6947 ( lastString , constraint ) } else { singlesCount ++ ; } } else { lastType = constraint . type ; $F6947 ( lastString , constraint ) singlesCount = NUM00 ; } } else { if ( lastType != - NUM00 ) { str += followedBy + singlesCount + lastString ; followedBy = NUM00 ; lastType = - NUM00 ; singlesCount = NUM00 ; lastString = NUM00 ; } str += followedBy + constraint . toString ( ) ; followedBy = NUM00 ; } } if ( lastType != - NUM00 ) { str += followedBy + singlesCount + lastString ; } return str ; }
public void readData ( DataInput din ) throws IOException { din . readShort ( ) ; $F89921 ( count , din ) registers = new InputRegister [ count ] ; for ( $F119 ( i , count ) ) { registers [ i ] = new SimpleInputRegister ( din . readShort ( ) ) ; } }
public void adjustIndentation ( int delta ) { if ( delta < NUM00 ) { indentationLevel = Math . max ( NUM00 , indentationLevel + delta ) ; } else { indentationLevel += delta ; } }
public int capacity $F72 $F1522 ( capacity )
protected static token do_code_string $F72 throws $F3258 { $F280 ( result ) advance ( ) ; advance ( ) ; while ( ! ( next_char == NUM00 && next_char2 == NUM00 ) ) { if ( next_char == EOF_CHAR ) { emit_error ( NUM00 ) ; $F597 } result . append ( new Character $F339155 ( next_char ) ) ; advance ( ) ; } advance ( ) ; advance ( ) ; return new str_token ( sym . CODE_ <missing ';'> NUM00 , result . toString ( ) ) ; }
public String random ( Object omin , Object omax ) { $F41834 ( min , FunctionHandler , omin ) $F41834 ( max , FunctionHandler , omax ) if ( max > min ) { return Integer . toString ( rnd . nextInt ( max - min ) + min ) ; } $F1278 }
public void test_reopen01 $F72 { final IRawStore store = $F137694 ; final BTree btree ; { $F87561 ( md , UUID ) md . setBranchingFactor ( NUM00 ) ; btree = BTree . create ( store , md ) ; } $F110726 ( assertTrue , btree ) $F59 ( btree ) $F110726 ( assertFalse , btree ) try { $F59 ( btree ) fail ( NUM00 + IllegalStateException . class ) ; } catch ( IllegalStateException ex ) { $F38209 ( log , ex ) } assertNotNull ( btree . getRoot ( ) ) ; $F110726 ( assertTrue , btree ) }
public static File searchPaths ( Iterable < ? extends File > paths , String relFile ) { for ( File path : paths ) { $F4453 ( f , path , relFile ) if $F3428 ( f ) { return path ; } } $F1274 }
public boolean hasUnsupportedCriticalExtension $F72 { Set extns = getCriticalExtensionOIDs ( ) ; $F6441 ( extns ) }
$F62319 ( filename , separator , keepSeparator , size , prefix , getPrefixLength , array , otherSeparator , SYSTEM_SEPARATOR , OTHER_SEPARATOR , i , lastIsDirectory , _BOOL , System , j )
$F1 public StringBuffer format ( double value , StringBuffer buffer , FieldPosition field ) { for ( $F26259 ( i , choiceLimits ) ) { if ( choiceLimits [ i ] <= value ) { return buffer . append ( choiceFormats [ i ] ) ; } } return choiceFormats . length == NUM00 ? buffer : buffer . append ( choiceFormats [ NUM00 ] ) ; }
private void loadConfigurationFromJvmParameters $F72 { $F7601 ( repositoryProperty , System , REPOSITORY_PROPERTY ) if ( null != repositoryProperty ) { $F6542 ( repositoryIpHost , repositoryProperty ) if $F9634 ( repositoryIpHost ) { String repositoryIp = repositoryIpHost [ NUM00 ] ; String repositoryPort = repositoryIpHost [ NUM00 ] ; if ( StringUtils . isNotBlank ( repositoryIp ) && StringUtils . isNotBlank ( repositoryPort ) ) { $F21448 ( log , repositoryIp , repositoryPort ) try { $F27213 ( port , Integer , repositoryPort ) setRepository ( repositoryIp , port ) ; } $F92403 ( log , e ) } } } $F7601 ( agentName , System , AGENT_NAME_PROPERTY ) if $F16093 ( StringUtils , agentName ) { try { $F556 ( log , agentName ) setAgentName ( agentName ) ; } $F92403 ( log , e ) } else { try { setAgentName ( DEFAULT_AGENT_NAME ) ; } catch ( StorageException e ) $F23016 ( log , e ) } }
public boolean softSignin $F72 throws IOException { $F77087 ( url ) checkResolveHost ( ) ; if ( sessionId != null ) { if ( checkAuthorized ( getAuthCheckUrl ( sessionId ) ) ) { $F35577 ( LOGGER , sessionId ) return _BOOL ; } else { sessionId = null ; } } long id = loadSessionId ( ) ; $F6482 ( id , _BOOL ) boolean authorized = checkAuthorized ( getAuthCheckUrl ( id ) ) ; if ( authorized ) { $F556 ( LOGGER , id ) this . sessionId = id ; } return authorized ; }
private void testViewAlterAndCommandCache $F72 throws SQLException { deleteDb ( NUM00 ) ; Connection conn = getConnection ( NUM00 ) ; $F11282 ( stat , conn ) $F131050 ( stat ) $F131050 ( stat ) $F131050 ( stat ) $F131050 ( stat ) $F131050 ( stat ) $F75096 ( rs , stat ) $F7683 ( assertTrue , rs ) assertEquals ( NUM00 , rs . getInt ( NUM00 ) ) ; $F131050 ( stat ) $F264240 ( rs , stat ) $F7683 ( assertTrue , rs ) assertEquals ( NUM00 , rs . getInt ( NUM00 ) ) ; $F59 ( conn ) deleteDb ( NUM00 ) ; }
protected static boolean approxUnit ( final StringBuilder sbuf , final int amount , final int size , final String name ) { int count = amount / size ; int remainder ; $F6482 ( count , _BOOL ) remainder = amount - ( count * size ) ; if ( remainder >= ( size * NUM00 / NUM00 ) ) { count ++ ; sbuf . append ( count ) ; } else if ( remainder >= ( size * NUM00 / NUM00 ) ) { count ++ ; $F84 ( sbuf ) sbuf . append ( count ) ; } else if ( remainder >= ( size * NUM00 / NUM00 ) ) { $F84 ( sbuf ) sbuf . append ( count ) ; $F84 ( sbuf ) count = NUM00 ; } else if ( remainder >= ( size * NUM00 / NUM00 ) ) $F20352 ( sbuf , count ) else $F288 ( sbuf , count ) $F84 ( sbuf ) sbuf . append ( Grammar . plnoun ( count , name ) ) ; return _BOOL ; }
public static Element createElement ( Document doc , String tag , String nsURI , String prefix ) { String qName = $F6036 ( prefix ) ? tag : prefix + NUM00 + tag ; return doc . createElementNS ( nsURI , qName ) ; }
public static void modifyFile ( File file , Function $F2538 modifier ) throws IOException { String content = new String ( Files . toByteArray ( file ) , StandardCharsets . UTF_8 ) ; String result = modifier . apply ( content ) ; Files . write ( $F43004 ( result , StandardCharsets ) , file ) ; }
private void state2 $F72 throws IOException { $F2027 selectionIds = readList ( $F33731 ( filePrefix ) ) ; $F2027 archivedIds = readList ( $F33731 ( filePrefix ) ) ; $F4120 ( variationIds , lambda ) if ( selectionIds . length != mu ) $F14525 updatePopulation ( archivedIds ) ; clearFile ( $F33731 ( filePrefix ) ) ; clearFile ( $F33731 ( filePrefix ) ) ; $F41144 ( offspring ) for ( int i = NUM00 ; i < mu ; i += variation . getArity ( ) ) { Solution [ ] parents = new Solution [ variation . getArity ( ) ] ; for ( int j = NUM00 ; j < variation . getArity ( ) ; j ++ ) { parents [ j ] = solutions . get ( selectionIds [ i + j ] ) ; } offspring . addAll ( Arrays . asList ( variation . evolve ( parents ) ) ) ; } if $F111943 ( offspring , lambda ) $F14525 evaluateAll ( offspring ) ; for ( $F119 ( i , lambda ) ) { variationIds [ i ] = addToPopulation ( offspring . get ( i ) ) ; } writePopulation ( $F33731 ( filePrefix ) , variationIds ) ; }
public void testListOptions $F72 { if ( m_OptionTester . getOptionHandler ( ) != null ) { if $F43642 ( m_OptionTester ) fail ( NUM00 ) ; } }
protected double LLToWorldReturningLon ( double lat , double lon , Point2D lp ) { double phi_deg = lat ; double phi = ProjMath . degToRad ( phi_deg ) ; double lamba_deg = lon ; double lamba = ProjMath . degToRad ( lamba_deg ) ; double dlamda = lamba - lamdaf ; if ( dlamda > Math . PI ) { dlamda -= MoreMath . TWO_PI_D ; } else if ( dlamda < - Math . PI ) { dlamda += MoreMath . TWO_PI_D ; } double e = ellps . ecc ; double r = NUM00 ; if ( ! MoreMath . approximately_equal ( Math . abs ( phi ) , MoreMath . HALF_PI , EPS10 ) ) { double t = lambTsfn ( phi , Math . sin ( phi ) , e ) ; r = ellps . radius * F * Math . pow ( t , n ) ; } double theta = n * dlamda ; double easting = falseEasting + r * Math . sin ( theta - alpha ) ; double northing = falseNorthing + rf - r * Math . cos ( theta - alpha ) ; lp . setLocation ( easting , northing ) ; return dlamda ; }
protected void notifySizeChanged ( float width , float height , int orientation ) $F845
protected boolean removeTurntable ( LayoutTurntable o ) { if ( ! noWarnTurntable ) { int selectedValue = JOptionPane . showOptionDialog ( this , rb . getString ( NUM00 ) , Bundle . getMessage ( NUM00 ) , JOptionPane . YES_NO_CANCEL_OPTION , JOptionPane . QUESTION_MESSAGE , null , new Object [ ] { Bundle . getMessage ( NUM00 ) , Bundle . getMessage ( NUM00 ) , rb . getString ( NUM00 ) } , Bundle . getMessage ( NUM00 ) ) ; if ( selectedValue == NUM00 ) $F3139 ( _BOOL ) $F126526 ( selectedValue , noWarnTurntable , _BOOL ) } $F99516 ( selectedObject , o ) $F99516 ( prevSelectedObject , o ) for ( int j = NUM00 ; j < o . getNumberRays ( ) ; j ++ ) { TrackSegment t = o . getRayConnectOrdered ( j ) ; if ( t != null ) { substituteAnchor ( o . getRayCoordsIndexed ( j ) , o , t ) ; } } for ( $F2277 ( i , turntableList ) ) { LayoutTurntable lx = turntableList . get ( i ) ; if ( lx == o ) { turntableList . remove ( i ) ; $F7042 ( o ) setDirty ( _BOOL ) ; repaint ( ) ; return ( _BOOL ) ; } } return ( _BOOL ) ; }
$F1 public final void endElement $F360 ( ns , lName , qName ) throws SAXException { $F89266 ( name , lName , qName ) $F89270 ( r , RULES , match ) if ( r != null ) { r . end ( name ) ; } $F24867 ( slash , match ) if ( slash >= NUM00 ) $F45800 ( match , slash ) else { match = NUM00 ; } }
public INDArray asMatrix ( BufferedImage image ) { if ( channels == NUM00 ) $F4915 ( toBgr , image ) else { image = scalingIfNeed ( image , _BOOL ) ; $F2049 ( w , image ) $F2047 ( h , image ) INDArray ret = Nd4j . create ( h , w ) ; for ( $F119 ( i , h ) ) { for ( $F119 ( j , w ) ) { ret . putScalar ( $F10511 ( i , j ) , image . getRGB ( i , j ) ) ; } } return ret ; } }
public FileSystemUtils $F72 $F5795 ( super )
public int scheduledQueueSize $F72 $F1522 ( schedulerQueueSize )
public DGeneralNameChooser ( JFrame parent , String title , GeneralName generalName ) $F313840 ( super , parent , title , ModalityType , initComponents , generalName )
public void destroyScene $F72 { clearAnimations ( ) ; clearCameras ( ) ; clearLights ( ) ; clearPlugins ( ) ; clearChildren ( ) ; clearFrameCallbacks ( ) ; }
private static Platform findPlatform $F72 { try { try { $F32352 ( Class ) } catch ( ClassNotFoundException e ) { $F32352 ( Class ) } OptionalMethod < Socket > setUseSessionTickets = new OptionalMethod $F200 ( null , NUM00 , $F41254 ) ; OptionalMethod < Socket > setHostname = new OptionalMethod $F200 ( null , NUM00 , $F10062 ) ; Method trafficStatsTagSocket = null ; Method trafficStatsUntagSocket = null ; OptionalMethod < Socket > getAlpnSelectedProtocol = null ; OptionalMethod < Socket > setAlpnProtocols = null ; try { $F109041 ( trafficStats , Class ) trafficStatsTagSocket = trafficStats . getMethod ( NUM00 , $F43259 ) ; trafficStatsUntagSocket = trafficStats . getMethod ( NUM00 , $F43259 ) ; try { $F32352 ( Class ) getAlpnSelectedProtocol = new OptionalMethod $F200 ( $F144055 , NUM00 ) ; setAlpnProtocols = new OptionalMethod $F200 ( null , NUM00 , $F144055 ) ; } catch ( ClassNotFoundException ignored ) $F845 } catch ( ClassNotFoundException | NoSuchMethodException ignored ) $F845 return new Android ( setUseSessionTickets , setHostname , trafficStatsTagSocket , trafficStatsUntagSocket , getAlpnSelectedProtocol , setAlpnProtocols ) ; } catch ( ClassNotFoundException ignored ) $F845 try { String negoClassName = NUM00 ; $F96883 ( negoClass , Class , negoClassName ) $F248719 ( providerClass , Class , negoClassName ) $F248719 ( clientProviderClass , Class , negoClassName ) $F248719 ( serverProviderClass , Class , negoClassName ) Method putMethod = negoClass . getMethod ( NUM00 , SSLSocket . class , providerClass ) ; Method getMethod = negoClass . getMethod ( NUM00 , SSLSocket . class ) ; Method removeMethod = negoClass . getMethod ( NUM00 , SSLSocket . class ) ; return new JdkWithJettyBootPlatform ( putMethod , getMethod , removeMethod , clientProviderClass , serverProviderClass ) ; } catch ( ClassNotFoundException | NoSuchMethodException ignored ) $F845 return new Platform $F72 ; }
private void addLimitedMitreJoin ( LineSegment offset0 , LineSegment offset1 , double distance , double mitreLimit ) { Coordinate basePt = seg0 . p1 ; double ang0 = Angle . angle ( basePt , seg0 . p0 ) ; double ang1 = Angle . angle ( basePt , seg1 . p1 ) ; double angDiff = Angle . angleBetweenOriented ( seg0 . p0 , basePt , seg1 . p1 ) ; double angDiffHalf = angDiff / NUM00 ; double midAng = Angle . normalize ( ang0 + angDiffHalf ) ; double mitreMidAng = Angle . normalize ( midAng + Math . PI ) ; double mitreDist = mitreLimit * distance ; double bevelDelta = mitreDist * Math . abs ( Math . sin ( angDiffHalf ) ) ; double bevelHalfLen = distance - bevelDelta ; double bevelMidX = basePt . x + mitreDist * Math . cos ( mitreMidAng ) ; double bevelMidY = basePt . y + mitreDist * Math . sin ( mitreMidAng ) ; Coordinate bevelMidPt = new Coordinate ( bevelMidX , bevelMidY ) ; LineSegment mitreMidLine = new LineSegment ( basePt , bevelMidPt ) ; Coordinate bevelEndLeft = mitreMidLine . pointAlongOffset ( NUM00 , bevelHalfLen ) ; Coordinate bevelEndRight = mitreMidLine . pointAlongOffset ( NUM00 , - bevelHalfLen ) ; if ( side == Position . LEFT ) { segList . addPt ( bevelEndLeft ) ; segList . addPt ( bevelEndRight ) ; } else { segList . addPt ( bevelEndRight ) ; segList . addPt ( bevelEndLeft ) ; } }
static $F49228 ( data , bytesCopied , i , isBase64 , groomedData , System , packedData )
public void testMultiplyDiffScalePosNeg $F72 { String a = NUM00 ; int aScale = NUM00 ; String b = NUM00 ; int bScale = - NUM00 ; String c = NUM00 ; int cScale = NUM00 ; $F1918 ( aNumber , a , aScale ) $F1918 ( bNumber , b , bScale ) $F168802 ( result , aNumber , bNumber ) $F1925 ( assertEquals , c , result ) $F1928 ( assertEquals , cScale , result ) }
private static long limitDuration ( long leaseDuration , long limit ) { if ( leaseDuration == Lease . ANY || leaseDuration > limit ) leaseDuration = limit ; else $F30465 ( leaseDuration ) return leaseDuration ; }
static String pathToCookiePath ( String path ) { $F4158 ( path ) $F24867 ( lastSlash , path ) return $F1399 ( path , lastSlash ) ; }
public static String formatSimpleDecimal ( double d ) $F35907 ( simpleFormat , d )
protected AbstractCategoryItemLabelGenerator ( String labelFormat , DateFormat formatter ) { $F19400 ( ParamChecks , labelFormat ) $F19400 ( ParamChecks , formatter ) this . labelFormat = labelFormat ; this . numberFormat = null ; this . percentFormat = NumberFormat . getPercentInstance ( ) ; this . dateFormat = formatter ; this . nullValueString = NUM00 ; }
public void delItems ( int s , int e ) { boolean hsbWasVisible = hsbVis ; boolean vsbWasVisible = vsbVis ; int oldLastDisplayed = lastItemDisplayed ( ) ; if $F58998 ( log , PlatformLogger ) { $F21516 ( log , s , e ) } if ( log . isLoggable ( PlatformLogger . Level . FINEST ) ) { log . finest ( $F90567 ( oldLastDisplayed , itemsInWindow ) + items . size ( ) ) ; } $F110977 ( items ) $F63332 ( s , e , tmp ) $F17370 ( s ) if $F6389 ( e , items ) $F114853 ( e , items ) boolean repaintNeeded = ( s >= getFirstVisibleItem ( ) && s <= getLastVisibleItem ( ) ) ; for ( int i = s ; i <= e ; i ++ ) { items . removeElementAt ( s ) ; int j = posInSel ( i ) ; if ( j != - NUM00 ) { int newsel [ ] = new int $F12500 ( selected ) ; $F135 ( System , selected , newsel , j ) System . arraycopy ( selected , j + NUM00 , newsel , j , selected . length - ( j + NUM00 ) ) ; selected = newsel ; } } int diff = ( e - s ) + NUM00 ; for ( $F1139 ( i , selected ) ) { if ( selected [ i ] > e ) { selected [ i ] -= diff ; } } int options = PAINT_VSCROLL ; if ( getFocusIndex ( ) > e ) { setFocusIndex ( getFocusIndex ( ) - ( e - s + NUM00 ) ) ; options |= PAINT_FOCUS ; } else if ( getFocusIndex ( ) >= s && getFocusIndex ( ) <= e ) { int focusBound = $F3817 ( items ) ? NUM00 : - NUM00 ; setFocusIndex ( Math . max ( s - NUM00 , focusBound ) ) ; options |= PAINT_FOCUS ; } if ( log . isLoggable ( PlatformLogger . Level . FINEST ) ) { $F150605 ( log , multipleSelections ) } if ( vsb . getValue ( ) >= s ) { if ( vsb . getValue ( ) <= e ) { vsb . setValue ( e + NUM00 - diff ) ; } else { vsb . setValue ( vsb . getValue ( ) - diff ) ; } } int oldMaxLength = maxLength ; maxLength = maxLength ( ) ; if ( maxLength != oldMaxLength ) { options |= PAINT_HSCROLL ; } layout ( ) ; repaintNeeded |= ( vsbWasVisible ^ vsbVis ) || ( hsbWasVisible ^ hsbVis ) ; $F576652 ( repaintNeeded , options , PAINT_ALL ) repaint ( s , oldLastDisplayed , options ) ; }
static long makeId ( SnmpOid oid ) { long id = NUM00 ; $F2469 arcs = oid . longValue ( _BOOL ) ; id |= arcs [ NUM00 ] < < NUM00 ; id |= arcs [ NUM00 ] < < NUM00 ; id |= arcs [ NUM00 ] < < NUM00 ; id |= arcs [ NUM00 ] < < NUM00 ; id |= arcs [ NUM00 ] < < NUM00 ; id |= arcs [ NUM00 ] < < NUM00 ; id |= arcs [ NUM00 ] < < NUM00 ; id |= arcs [ NUM00 ] ; return id ; }
private void cacheAttribute ( String attrId , $F31427 ( values ) ) { String cacheKey = name + NUM00 + attrId ; valueCache . put ( cacheKey , values ) ; }
void read ( Reader policy ) throws ParsingException , IOException { if ( ! ( policy instanceof BufferedReader ) ) { policy = new BufferedReader ( policy ) ; } st = new StreamTokenizer ( policy ) ; $F61733 ( st ) $F33902 ( st ) $F33902 ( st ) $F33902 ( st ) $F33902 ( st ) $F33902 ( st ) $F33902 ( st ) st . wordChars ( NUM00 + NUM00 , NUM00 ) ; st . whitespaceChars ( NUM00 , NUM00 ) ; st . commentChar ( NUM00 ) ; $F70966 ( st ) $F70966 ( st ) st . lowerCaseMode ( _BOOL ) ; $F33903 ( st ) st . slashSlashComments ( _BOOL ) ; st . slashStarComments ( _BOOL ) ; st . parseNumbers ( ) ; Hashtable < String , $F11968 > processedPermissions = null ; $F39710 ( lookahead , st ) while ( lookahead != StreamTokenizer . TT_EOF ) { if ( peek ( NUM00 ) ) { GrantEntry ge = parseGrantEntry ( processedPermissions ) ; if ( ge != null ) grantEntries . addElement ( ge ) ; } else { throw new ParsingException ( st . lineno ( ) , NUM00 + NUM00 ) ; } match ( NUM00 ) ; } }
protected void injectIntoVolumeInformationContainer ( Map < String , StringSet > volumeInformation , String infoKey , String altKey , CIMInstance volumeInstance ) { Object value = getCIMPropertyValue ( volumeInstance , infoKey ) ; if ( null == value ) { value = getCIMPropertyValue ( volumeInstance , altKey ) ; } String charactersticName = SupportedVolumeInformation . getVolumeInformation ( infoKey ) ; if ( null != value && null != charactersticName ) { $F69100 ( valueSet ) if ( value instanceof String ) $F40035 ( valueSet , value ) else if $F103253 ( value ) { valueSet . addAll ( Arrays . asList ( $F103254 ( value ) ) ) ; } volumeInformation . put ( charactersticName , valueSet ) ; } }
$F1 public void onDetachedFromRecyclerView ( RecyclerView recyclerView ) { super . onDetachedFromRecyclerView ( recyclerView ) ; mAttachedRecyclerViewPool . remove ( recyclerView ) ; }
private void loadFile ( String filename , AbstractFileLoader ... loaders ) { ArffSortedTableModel model ; this . m_Filename = filename ; createTitle ( ) ; if $F3057 ( filename ) { model = null ; } else { model = new ArffSortedTableModel ( filename , loaders ) ; model . setShowAttributeIndex ( getShowAttributeIndex ( ) ) ; } m_TableArff . setModel ( model ) ; setChanged ( _BOOL ) ; createName ( ) ; }
private void destinationTypeChanged $F72 { $F8249 ( m_Exp ) String str = NUM00 ; if ( m_ResultsDestinationCBox . getSelectedItem ( ) == DEST_DATABASE_TEXT ) { $F15121 ( m_ResultsDestinationPathLabel ) str = m_destinationDatabaseURL ; m_BrowseDestinationButton . setEnabled ( _BOOL ) ; $F15121 ( m_BrowseDestinationButton ) } else { $F15121 ( m_ResultsDestinationPathLabel ) if ( m_ResultsDestinationCBox . getSelectedItem ( ) == DEST_ARFF_TEXT ) { $F24867 ( ind , m_destinationFilename ) if ( ind > - NUM00 ) { m_destinationFilename = $F30497 ( m_destinationFilename , ind ) ; } } if ( m_ResultsDestinationCBox . getSelectedItem ( ) == DEST_CSV_TEXT ) { $F24867 ( ind , m_destinationFilename ) if ( ind > - NUM00 ) { m_destinationFilename = $F30497 ( m_destinationFilename , ind ) ; } } str = m_destinationFilename ; if ( m_ResultsDestinationCBox . getSelectedItem ( ) == DEST_ARFF_TEXT ) { $F24867 ( ind , str ) if ( ind > - NUM00 ) { str = $F30497 ( str , ind ) ; } } if ( m_ResultsDestinationCBox . getSelectedItem ( ) == DEST_CSV_TEXT ) { $F24867 ( ind , str ) if ( ind > - NUM00 ) { str = $F30497 ( str , ind ) ; } } m_BrowseDestinationButton . setEnabled ( _BOOL ) ; $F15121 ( m_BrowseDestinationButton ) } if ( m_ResultsDestinationCBox . getSelectedItem ( ) == DEST_DATABASE_TEXT ) { DatabaseResultListener drl = null ; try { drl = new DatabaseResultListener $F72 ; } $F1516 ( e ) drl . setDatabaseURL ( m_destinationDatabaseURL ) ; m_Exp . setResultListener ( drl ) ; } else { if ( m_ResultsDestinationCBox . getSelectedItem ( ) == DEST_ARFF_TEXT ) { InstancesResultListener irl = new InstancesResultListener $F72 ; if $F1264 ( m_destinationFilename ) { irl . setOutputFile ( new File ( m_destinationFilename ) ) ; } m_Exp . setResultListener ( irl ) ; } else if ( m_ResultsDestinationCBox . getSelectedItem ( ) == DEST_CSV_TEXT ) { CSVResultListener crl = new CSVResultListener $F72 ; if $F1264 ( m_destinationFilename ) { crl . setOutputFile ( new File ( m_destinationFilename ) ) ; } m_Exp . setResultListener ( crl ) ; } } m_ResultsDestinationPathTField . setText ( str ) ; m_Support . firePropertyChange ( $F244022 ) ; }
public static InputStream tryGzipInput ( InputStream in ) throws IOException { if $F71795 ( in ) { PushbackInputStream pb = new PushbackInputStream ( in , NUM00 ) ; in = pb ; $F96 magic = $F104535 ; pb . read ( magic ) ; pb . unread ( magic ) ; if ( magic [ NUM00 ] == NUM00 && magic [ NUM00 ] == - NUM00 ) { return new GZIPInputStream ( pb ) ; } return in ; } $F46282 ( in ) boolean isgzip = ( in . read ( ) == NUM00 && in . read ( ) == - NUM00 ) ; $F2268 ( in ) if ( isgzip ) { in = new GZIPInputStream ( in ) ; } return in ; }
$F1 public int hashCode $F72 { if ( location != null ) $F16584 ( location ) else $F1082 }
public static Query newPrefixQuery ( String field , InetAddress value , int prefixLength ) { $F826 ( value ) if ( prefixLength < NUM00 || prefixLength > NUM00 * value . getAddress ( ) . length ) $F29526 ( prefixLength ) byte lower [ ] = value . getAddress ( ) ; byte upper [ ] = value . getAddress ( ) ; for ( int i = prefixLength ; i < NUM00 * lower . length ; i ++ ) { int m = NUM00 < < ( NUM00 - ( i & NUM00 ) ) ; lower [ i > > NUM00 ] &= ~ m ; upper [ i > > NUM00 ] |= m ; } try { return newRangeQuery ( field , InetAddress . getByAddress ( lower ) , InetAddress . getByAddress ( upper ) ) ; } catch ( UnknownHostException e ) $F27253 ( e ) }
public static Subject createAMIdentitySubject ( PolicyManager pm , AMIdentity user ) throws PolicyException { SubjectTypeManager mgr = pm . getSubjectTypeManager ( ) ; Subject subject = mgr . getSubject ( NUM00 ) ; $F2695 ( set ) set . add ( user . getUniversalId ( ) ) ; subject . setValues ( set ) ; return subject ; }
protected void expandFor ( int index , double d ) { $F87249 ( index , size ) int oldSize = size , capacity = vector . length ; size = index + NUM00 ; if ( capacity >= size ) $F665 while ( capacity < size ) capacity *= NUM00 ; $F9662 ( t , capacity ) $F135 ( System , vector , t , oldSize ) if ( d != NUM00 ) Arrays . fill ( t , oldSize , size , d ) ; vector = t ; }
private void doNormalCommandLineList ( $F3803 commandLineList , $F3803 jointOptions , Path classpath ) { $F18793 ( commandLineList ) $F40018 ( commandLineList , classpath ) if ( jointCompilation ) { $F18793 ( commandLineList ) commandLineList . addAll ( jointOptions ) ; } if ( destDir != null ) { $F18793 ( commandLineList ) commandLineList . add ( destDir . getPath ( ) ) ; } if ( encoding != null ) { $F18793 ( commandLineList ) commandLineList . add ( encoding ) ; } if ( stacktrace ) $F71145 ( commandLineList ) if ( parameters ) $F71145 ( commandLineList ) if ( useIndy ) $F71145 ( commandLineList ) if ( scriptBaseClass != null ) { $F18793 ( commandLineList ) commandLineList . add ( scriptBaseClass ) ; } if ( configscript != null ) { $F18793 ( commandLineList ) commandLineList . add ( configscript ) ; } }
private synchronized void loadHexImage ( IHex hex ) { hexTileset . assignMatch ( hex , boardview ) ; hexTileset . trackHexImages ( hex , tracker ) ; }
public void triangulate ( PointSet ps ) { $F725 ( _triangulations ) _triangulations . add ( ps ) ; start ( ) ; }
public String base64UrlEncode $F97 ( data ) { String encodedData = new String ( Base64 . encode ( data , Base64 . URL_SAFE ) ) ; $F2936 ( encodedData ) $F2936 ( encodedData ) return encodedData ; }
private void writeJavaFieldSpec ( JavaFieldSpec spec , Document document , Element parentElement ) { $F8382 ( parameter , document ) parameter . appendChild ( parentElement ) ; parameter . setAttribute ( NUM00 , spec . getPackageName ( ) ) ; parameter . setAttribute ( NUM00 , spec . getClassName ( ) ) ; parameter . setAttribute ( NUM00 , spec . getFieldName ( ) ) ; }
private void readObject ( ObjectInputStream s ) throws $F6427 { $F6428 ( s ) init ( getMask ( actions ) ) ; }
$F1 public synchronized void parse ( Reader reader , String baseURI ) throws IOException , RDFParseException , RDFHandlerException { $F826 ( reader ) $F826 ( baseURI ) $F77995 ( inputSource , reader ) inputSource . setSystemId ( baseURI ) ; parse ( inputSource ) ; }
private String excludeDestinationStatement ( String text ) { int idx = - NUM00 ; if $F48458 ( idx , text ) $F45800 ( text , idx ) return text ; }
static $F49228 ( data , bytesCopied , i , isBase64 , groomedData , System , packedData )
protected static final String addEscapes ( String str ) { $F83 ( retval ) char ch ; for ( $F1088 ( i , str ) ) { switch $F31372 ( str , i ) { $F3366 $F598 $F31374 ( retval ) $F31374 ( retval ) $F31374 ( retval ) $F31374 ( retval ) $F31374 ( retval ) $F31374 ( retval ) $F31374 ( retval ) $F31374 ( retval ) $F1267 if ( $F31375 ( ch , str , i ) < NUM00 || ch > NUM00 ) { String s = NUM00 + Integer . toString ( ch , NUM00 ) ; retval . append ( NUM00 + s . substring ( $F1092 ( s ) , s . length ( ) ) ) ; } else $F288 ( retval , ch ) $F598 } } $F92 ( retval ) }
public static void addFile ( String s ) throws IOException { $F1705 ( f , s ) addFile ( f ) ; }
$F28183 public final void insert ( int rowIndex , T ... newItems ) $F254297 ( insert , rowIndex , Arrays , newItems )
$F1309 public void put ( $F2306 data ) { for ( Integer value : data ) { final int val = value . intValue ( ) ; min = val < min ? val : min ; max = val > max ? val : max ; } }
public IntBuffer majorVersionBuffer $F72 { $F11844 ( holder ) $F320194 ( holder , getMajorVersion ) $F23500 ( ib , IntBuffer , holder ) ib . limit ( NUM00 ) ; return ib ; }
public CreateIndexRequest source ( XContentBuilder source ) { return source ( source . bytes ( ) ) ; }
public static $F96 createDataToSign $F97 ( digest ) { $F12490 ( prefix , getDigestInfoPrefix , digest ) $F148496 ( digestInfo , prefix , digest ) $F7057 ( System , prefix , digestInfo ) $F11244 ( System , digest , digestInfo , prefix ) return digestInfo ; }
public HttpRequest ifModifiedSince ( final long value ) { connection . setIfModifiedSince ( value ) ; return this ; }
public static String tmpJournal $F72 { final File file = Code . wrapThrow ( null ) ; $F60829 ( file ) $F33744 ( file ) }
public void push ( final float value ) { $F31338 ( bits , Float , value ) if $F31340 ( bits ) { mv . visitInsn ( Opcodes . FCONST_0 + ( int ) value ) ; } else $F31345 ( mv , value ) }
public static Object newInstance ( $F6969 cl , $F2027 dims ) { if $F9634 ( dims ) { dims = $F96424 ; } $F29130 ( Array , cl , dims ) }
private static void decodeAnsiX12Segment ( BitSource bits , StringBuilder result ) throws FormatException { $F11844 ( cValues ) do { $F46340 ( bits ) $F2847 ( firstByte , bits ) $F32905 ( firstByte ) $F46342 ( parseTwoBytes , firstByte , bits , cValues ) for ( $F6268 ( i ) ) { int cValue = cValues [ i ] ; if ( cValue == NUM00 ) $F86 ( result ) else if ( cValue == NUM00 ) $F86 ( result ) else if ( cValue == NUM00 ) $F86 ( result ) else if ( cValue == NUM00 ) $F86 ( result ) else if ( cValue < NUM00 ) $F46359 ( result , cValue ) else if ( cValue < NUM00 ) $F46359 ( result , cValue ) else $F2172 ( FormatException ) } } while $F2892 ( bits ) ; }
public void playTogether ( Collection $F113170 items ) { if $F8841 ( items ) { mNeedsSort = _BOOL ; Builder builder = null ; for ( Animator anim : items ) { if ( builder == null ) { builder = play ( anim ) ; } else { builder . with ( anim ) ; } } } }
protected static void printErrorMessage ( Exception e ) { if ( e instanceof AbortException ) { LoggingConfiguration . setVerbose ( Level . VERBOSE ) ; LOG . verbose ( e . getMessage ( ) ) ; } else if ( e instanceof UnspecifiedParameterException ) $F27824 ( LOG , e ) else if ( e instanceof ParameterException ) $F27824 ( LOG , e ) else { LOG . exception ( e ) ; } }
public String requestStatistics $F72 { $F4910 ( sb ) makeStringBuffer ( sb ) ; $F92 ( sb ) }
private void applyL1Reg ( final double eta_t , Vec x ) { if ( lambda1 > NUM00 ) { l1U += eta_t * lambda1 ; for ( $F1139 ( k , ws ) ) { final Vec w_k = ws [ k ] ; $F10228 ( l1Q_k , l1Q , k ) for ( IndexValue iv : x ) { final int i = iv . getIndex ( ) ; final double z = w_k . get ( i ) ; double newW_i = NUM00 ; if ( z > NUM00 ) newW_i = Math . max ( NUM00 , z - ( l1U + l1Q_k [ i ] ) ) ; else if ( z < NUM00 ) newW_i = Math . min ( NUM00 , z + ( l1U - l1Q_k [ i ] ) ) ; l1Q_k [ i ] += ( newW_i - z ) ; w_k . set ( i , newW_i ) ; } } } }
$F1 public void keyPressed ( KeyEvent e ) { synchronized ( keyLock ) { keysDown . add ( e . getKeyCode ( ) ) ; } }
public static String slurpURLNoExceptions ( URL u , String encoding ) { try $F8587 ( slurpURL , u , encoding ) $F84580 ( e ) }
public static MoveParticipant [ ] loadMoveParticipants ( RefactoringStatus status , RefactoringProcessor processor , Object element , MoveArguments arguments , IParticipantDescriptorFilter filter , $F806 affectedNatures , SharableParticipants shared ) { RefactoringParticipant [ ] participants = fgMoveExtensions . getParticipants ( status , processor , element , arguments , filter , affectedNatures , shared ) ; MoveParticipant [ ] result = new MoveParticipant [ participants . length ] ; $F7057 ( System , participants , result ) return result ; }
private $F2469 determinePreferenceVector ( $F42616 relation , ModifiableDBIDs [ ] neighborIDs , StringBuilder msg ) { if ( strategy . equals ( Strategy . APRIORI ) ) $F19580 ( determinePreferenceVectorByApriori , relation , neighborIDs , msg ) else if ( strategy . equals ( Strategy . MAX_INTERSECTION ) ) $F8587 ( determinePreferenceVectorByMaxIntersection , neighborIDs , msg ) else $F4639 }
private void paintForegroundDisabled $F269611 ( g , width , height ) { Shape s = decodeArrowPath ( width , height ) ; g . setPaint ( disabledColor ) ; g . fill ( s ) ; }
public void testFlipBitNegativeInside1 $F72 { $F17888 int aSign = - NUM00 ; int number = NUM00 ; byte $F3018 = { - NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F103435 ( result , aNumber , number ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , result ) }
private void onUser ( $F1113 TLAbsUser absUser ) { User currentUser = null ; User user = null ; if ( absUser instanceof TLUser ) { final TLUser tlUser = ( TLUser ) absUser ; if ( tlUser . isMutualContact ( ) ) { currentUser = ( User ) databaseManager . getUserById ( tlUser . getId ( ) ) ; user = onUserContact ( currentUser , tlUser ) ; } else if ( tlUser . isDeleted ( ) ) { currentUser = ( User ) databaseManager . getUserById ( tlUser . getId ( ) ) ; user = onUserDelete ( currentUser , tlUser ) ; } else if ( tlUser . isContact ( ) ) { currentUser = ( User ) databaseManager . getUserById ( tlUser . getId ( ) ) ; user = onUserRequest ( currentUser , tlUser ) ; } else if ( tlUser . isSelf ( ) || ! tlUser . isBot ( ) ) { currentUser = ( User ) databaseManager . getUserById ( tlUser . getId ( ) ) ; user = onUserForeign ( currentUser , tlUser ) ; } else { BotLogger . info ( LOGTAG , NUM00 ) ; } } if ( ( currentUser == null ) && ( user != null ) ) { databaseManager . addUser ( user ) ; } else if ( user != null ) { databaseManager . updateUser ( user ) ; } }
$F1 public boolean hasNext $F72 { $F37599 ( log , Level ) boolean result = ( nextEvent != null ) ; log . log ( Level . FINE , NUM00 , result ) ; return result ; }
$F1 public void close $F72 { try $F6399 ( connection ) catch ( SQLException e ) $F302 ( e ) }
public static XMPMeta extractXMPMeta ( InputStream is ) { $F128075 sections = parse ( is , _BOOL ) ; $F1338 ( sections ) for ( Section section : sections ) { if ( hasXMPHeader ( section . data ) ) { int end = getXMPContentEnd ( section . data ) ; $F277754 ( buffer , end , XMP_HEADER_SIZE ) System . arraycopy ( section . data , XMP_HEADER_SIZE , buffer , NUM00 , buffer . length ) ; try { XMPMeta result = XMPMetaFactory . parseFromBuffer ( buffer ) ; return result ; } catch ( XMPException e ) { $F96563 ( Log , TAG , e ) $F1274 } } } $F1274 }
private void initialize ( ModelValidator validator , MClient client ) { if ( client == null ) m_globalValidators . add ( validator ) ; m_validators . add ( validator ) ; validator . initialize ( this , client ) ; }
void crossOver ( BayesNetRepresentation other ) { $F24314 ( bits , m_bits ) for ( $F1139 ( i , m_bits ) ) $F15086 ( bits , i , m_bits ) int iCrossOverPoint = m_bits . length ; do { for ( $F9958 ( i , iCrossOverPoint , m_bits ) ) $F15086 ( m_bits , i , bits ) iCrossOverPoint = m_random . nextInt ( m_bits . length ) ; for ( $F9958 ( i , iCrossOverPoint , m_bits ) ) { $F439467 ( m_bits , i , other ) } } while ( hasCycles ( ) ) ; calcGlobalScore ( ) ; }
public void reset $F72 $F62354 ( engineReset , state , INITIAL )
public Perspective createUserPerspective $F4708 ( name , show ) { Perspective perspective = model . addPerspective ( name , _BOOL ) ; perspective . store ( context ) ; $F72524 ( show , showPerspective , name ) return perspective ; }
public static double phred ( double error ) { return - NUM00 * Math . log10 ( error ) ; }
public static String of ( CtClass type ) { $F280 ( sbuf ) toDescriptor ( sbuf , type ) ; $F92 ( sbuf ) }
public abstract String encode $F72 ;
$F28183 public final Token < TokenType > expect ( TokenType ... expected ) throws SimpleParserException { $F7450 ( hasType , expected , this ) throw new SimpleParserException ( line , column , $F11846 ( Arrays , expected ) + toString ( ) ) ; }
public void testUpdate3 $F72 { int newValue1 = - NUM00 ; int newValue2 = - NUM00 ; String updateQuery = $F103214 ( DatabaseCreator , newValue1 ) + newValue2 ; try { $F32305 ( num , statement , updateQuery ) assertEquals ( NUM00 , numberOfRecords , num ) ; $F32306 ( selectQuery , DatabaseCreator ) $F15328 ( result , statement , selectQuery ) $F32307 ( result ) $F59 ( result ) } $F32310 ( fail , e ) }
public void testSetNull $F72 throws Exception { $F151311 ( stmt , connection ) try { $F270830 ( stmt ) stmt . setBytes ( NUM00 , null ) ; $F3917 ( stmt ) $F270830 ( stmt ) stmt . setBinaryStream ( NUM00 , null , NUM00 ) ; $F3917 ( stmt ) $F270830 ( stmt ) stmt . setString ( NUM00 , null ) ; $F3917 ( stmt ) } $F3229 ( stmt ) }
$F1309 public boolean isAssignableFrom ( Type from ) { $F1933 ( from , _BOOL ) $F12418 ( type , from , _BOOL ) if ( type instanceof $F6969 ) { return rawType . isAssignableFrom ( $Gson$Types . getRawType ( from ) ) ; } else if ( type instanceof ParameterizedType ) { return isAssignableFrom ( from , ( ParameterizedType ) type , new HashMap < String , Type > $F72 ) ; } else if ( type instanceof GenericArrayType ) { return rawType . isAssignableFrom ( $Gson$Types . getRawType ( from ) ) && isAssignableFrom ( from , ( GenericArrayType ) type ) ; } else { throw buildUnexpectedTypeError ( type , Class . class , ParameterizedType . class , GenericArrayType . class ) ; } }
EgDemandDetails insertPenalty ( final BigDecimal chqBouncePenalty , final Module module ) { EgDemandDetails demandDetail = null ; if ( chqBouncePenalty != null && $F17645 ( chqBouncePenalty , BigDecimal ) > NUM00 ) { final Installment currInstallment = getCurrentInstallment ( module ) ; final EgDemandReasonMaster egDemandReasonMaster = demandGenericDao . getDemandReasonMasterByCode ( DEMANDRSN_CODE_CHQ_BOUNCE_PENALTY , module ) ; if ( egDemandReasonMaster == null ) $F311734 final EgDemandReason egDemandReason = demandGenericDao . getDmdReasonByDmdReasonMsterInstallAndMod ( egDemandReasonMaster , currInstallment , module ) ; if ( egDemandReason == null ) $F311734 demandDetail = EgDemandDetails . fromReasonAndAmounts ( chqBouncePenalty , egDemandReason , BigDecimal . ZERO ) ; } return demandDetail ; }
public SampleInfo ( ByteBuffer bb ) throws IOException { $F128713 ( numberOfChannels , bb ) $F128713 ( sampleRate , bb ) coeffMin = bb . getFloat ( ) ; coeffRange = bb . getFloat ( ) ; postEmphasis = bb . getFloat ( ) ; $F128713 ( residualFold , bb ) }
public void handleMaintenance ( Operation maintOp ) { performPendingRequestMaintenance ( ) ; checkAndScheduleSynchronization ( this . cachedGroupState . membershipUpdateTimeMicros ) ; $F168274 ( maintOp ) }
$F3594 ( oredCriteria , orderByClause , distinct , _BOOL )
public $F4203 T time $F41334 ( event ) throws Exception { final long startTime = clock . tick ( ) ; try $F41336 ( event ) finally { update ( clock . tick ( ) - startTime ) ; } }
public static boolean isPostJDK7 ( String bytecodeVersion ) { $F273158 ( JDK7 , bytecodeVersion , JDK8 ) }
public PutIndexTemplateRequest mapping $F4353 ( type , source ) { mapping ( type , PutMappingRequest . buildFromSimplifiedDef ( type , source ) ) ; return this ; }
$F52843 ( packed , map , i , j , count , value )
private InputStream findTemplate ( String path , String template ) { try { $F4453 ( file , path , template ) if $F351048 ( file ) { return new BufferedInputStream ( new FileInputStream $F89450 ( file ) ) ; } else $F1337 } catch ( FileNotFoundException fnfe ) $F1337 }
$F20296 ( mRootDirectory , VolleyLog , files , file , fis , entry , CacheHeader , putEntry )
public void addListener ( CircularProgressViewListener listener ) { $F67023 ( listener , listeners ) }
public SiteStatusCheckThreadImpl $F72 { super ( ) ; $F12775 ( urlCheckers ) }
$F1 public void render ( final int type , final Graphics2D g2 , final float scaling , final boolean isFormGlyph ) { glyphDisplay . setScalingValues ( NUM00 , NUM00 , scaling ) ; final float OLDglyphScale = glyphScale ; if ( isFormGlyph ) { glyphScale = scaling * glyphScale ; } AffineTransform aff = null ; if ( glyphScale != NUM00 ) { aff = g2 . getTransform ( ) ; g2 . scale ( glyphScale , glyphScale ) ; } glyphDisplay . setG2 ( g2 ) ; glyphDisplay . paint ( $F32718 ) ; if ( aff != null ) { g2 . setTransform ( aff ) ; } glyphScale = OLDglyphScale ; }
$F166447 ( propertyName , in_vcl , beanContextChildSupport )
$F13735 ( prefix , namespace , attName , attValue , xmlWriter )
public $F3803 reset $F24643 ( replace ) { $F5 $F37973 ( copy , retainedVars ) ; copy . addAll ( retainedVars ) ; $F725 ( retainedVars ) $F36447 ( replace , retainedVars ) return copy ; }
protected void release $F72 { AppContext tempAppContext = null ; synchronized ( grabReleaseSynchronizer ) { if ( usageCount > NUM00 ) { -- usageCount ; } else { synchronized ( threadGroupSynchronizer ) $F20182 ( tempAppContext , resetAppContext ) } } if ( tempAppContext != null ) { try $F47532 ( tempAppContext ) catch ( IllegalThreadStateException e ) $F845 } }
public synchronized void deleteAllTables $F72 { $F3803 tableNames = new $F5 $F57797 ( tableLookup ) ; for ( String s : tableNames ) { deleteTable ( s ) ; } }
public PetCategory findOne ( String id ) { $F7028 ( log , id ) PetCategory petCategory = petCategoryRepository . findOne ( UUID . fromString ( id ) ) ; return petCategory ; }
private void markRemovedDefaultSessionToken ( String site , String token ) { if ( removedDefaultTokens == null ) removedDefaultTokens = new $F4188 $F989 ; $F2690 removedSet = removedDefaultTokens . get ( site ) ; if ( removedSet == null ) { removedSet = new $F9623 $F989 ; removedDefaultTokens . put ( site , removedSet ) ; } removedSet . add ( token ) ; }
private Map < URI , Map < URI , Map $F159997 > > createDeviceToCGMapFromDescriptors ( $F81867 addDescriptors , $F81867 removeDescriptors ) { Map < URI , Map < URI , Map $F159997 > > deviceToCGMap = new HashMap < URI , Map < URI , Map $F159997 > > $F72 ; for ( VolumeDescriptor descr : addDescriptors ) { URI deviceURI = descr . getDeviceURI ( ) ; Map < URI , Map $F159997 > volumesToUpdateByCG = deviceToCGMap . get ( deviceURI ) ; if ( volumesToUpdateByCG == null ) { volumesToUpdateByCG = new HashMap < URI , Map $F159997 > $F72 ; deviceToCGMap . put ( deviceURI , volumesToUpdateByCG ) ; } URI consistencyGroupURI = descr . getConsistencyGroupURI ( ) ; Map $F159997 volumesToUpdate = volumesToUpdateByCG . get ( consistencyGroupURI ) ; if ( volumesToUpdate == null ) { volumesToUpdate = new HashMap $F159997 $F72 ; volumesToUpdateByCG . put ( consistencyGroupURI , volumesToUpdate ) ; } $F28584 volumesToAdd = volumesToUpdate . get ( ADD_VOLUMES_TO_CG_KEY ) ; if ( volumesToAdd == null ) { volumesToAdd = new ArrayList < URI > $F72 ; volumesToUpdate . put ( ADD_VOLUMES_TO_CG_KEY , volumesToAdd ) ; } volumesToAdd . add ( descr . getVolumeURI ( ) ) ; } for ( VolumeDescriptor descr : removeDescriptors ) { URI deviceURI = descr . getDeviceURI ( ) ; Map < URI , Map $F159997 > volumesToUpdateByCG = deviceToCGMap . get ( deviceURI ) ; if ( volumesToUpdateByCG == null ) { volumesToUpdateByCG = new HashMap < URI , Map $F159997 > $F72 ; deviceToCGMap . put ( deviceURI , volumesToUpdateByCG ) ; } URI consistencyGroupURI = descr . getConsistencyGroupURI ( ) ; Map $F159997 volumesToUpdate = volumesToUpdateByCG . get ( consistencyGroupURI ) ; if ( volumesToUpdate == null ) { volumesToUpdate = new HashMap $F159997 $F72 ; volumesToUpdateByCG . put ( consistencyGroupURI , volumesToUpdate ) ; } $F28584 volumesToRemove = volumesToUpdate . get ( REMOVE_VOLUMES_FROM_CG_KEY ) ; if ( volumesToRemove == null ) { volumesToRemove = new ArrayList < URI > $F72 ; volumesToUpdate . put ( REMOVE_VOLUMES_FROM_CG_KEY , volumesToRemove ) ; } volumesToRemove . add ( descr . getVolumeURI ( ) ) ; } return deviceToCGMap ; }
public Exchange ( final Request request , final Origin origin ) { this . currentRequest = request ; this . origin = origin ; this . timestamp = System . currentTimeMillis ( ) ; }
public static float computeDiscardAlpha ( float amount , float range ) { if $F20932 ( Math , amount ) $F1082 float t = amount / range ; t = MathUtils . clamp ( t , - NUM00 , NUM00 ) ; return NUM00 - Math . abs ( t ) ; }
public static final FileTime unixTimeToFileTime ( long utime ) { return FileTime . from ( utime , TimeUnit . SECONDS ) ; }
public static CipherTextIvMac encrypt ( String plaintext , SecretKeys secretKeys , String encoding ) throws UnsupportedEncodingException , GeneralSecurityException { return encrypt ( plaintext . getBytes ( encoding ) , secretKeys ) ; }
public void removeAddress ( AddressEntity address ) $F106 ( addresses , address )
$F1 protected void onMeasure ( int widthMeasureSpec , int heightMeasureSpec ) { $F20444 ( widthSpecMode , MeasureSpec , widthMeasureSpec ) $F20444 ( heightSpecMode , MeasureSpec , heightMeasureSpec ) $F23132 ( parentWidth , MeasureSpec , widthMeasureSpec ) $F23132 ( parentHeight , MeasureSpec , heightMeasureSpec ) boolean resizeWidth = widthSpecMode != MeasureSpec . EXACTLY ; boolean resizeHeight = heightSpecMode != MeasureSpec . EXACTLY ; int width = parentWidth ; int height = parentHeight ; if ( sWidth > NUM00 && sHeight > NUM00 ) { if ( resizeWidth && resizeHeight ) { width = sWidth ( ) ; height = sHeight ( ) ; } else if ( resizeHeight ) { height = ( int ) ( ( ( $F69510 ( sHeight ) / $F69510 ( sWidth ) ) * width ) ) ; } else if ( resizeWidth ) { width = ( int ) ( ( ( $F69510 ( sWidth ) / $F69510 ( sHeight ) ) * height ) ) ; } } $F53909 ( width , Math , getSuggestedMinimumWidth ) $F53909 ( height , Math , getSuggestedMinimumHeight ) setMeasuredDimension ( width , height ) ; }
protected void fireEndElem ( String name ) throws $F2253 { if ( m_tracer != null ) { flushMyWriter ( ) ; m_tracer . fireGenerateEvent ( SerializerTrace . EVENTTYPE_ENDELEMENT , name , ( Attributes ) null ) ; } }
private boolean verifyMigrateFromProductHome ( String migrateFromProductHome ) throws InstallException { if $F6036 ( migrateFromProductHome ) { Debug . log ( NUM00 + NUM00 ) ; Console . println ( LocalizedMessage . get ( LOC_HR_MSG_MIGRATE_NONE_FOUND ) ) ; return _BOOL ; } if ( ! migrateFromProductHome . equals ( ConfigUtil . getHomePath ( ) ) ) { Debug . log ( NUM00 + NUM00 + migrateFromProductHome + NUM00 + ConfigUtil . getHomePath ( ) ) ; String translateFile = migrateFromProductHome + MigrateFromInstFinderStore . getRelativeTranslateFile ( ) ; if ( ! FileUtils . isFileValid ( translateFile ) ) { Console . println ( LocalizedMessage . get ( LOC_HR_MSG_MIGRATE_NONE_FOUND ) ) ; return _BOOL ; } } else { Debug . log ( NUM00 + NUM00 ) ; throw new InstallException $F73204 ( LocalizedMessage , LOC_DR_ERR_PRODUCT_ALREADY_MIGRATED ) ; } return _BOOL ; }
public Spanned [ ] history $F72 { int i = NUM00 ; Spanned [ ] array = new Spanned $F2313 ( history ) ; for ( String s : history ) { if ( s != null ) { array [ i ] = Html . fromHtml ( s ) ; i ++ ; } } return array ; }
public static String format $F13180 ( message , arguments ) { $F27028 ( MessageFormat , message , arguments ) }
private void insertProsodySettings ( Utterance utterance , Element element ) { Element prosody = ( Element ) DomUtils . getAncestor ( element , MaryXML . PROSODY ) ; $F2329 ( prosody ) Element voice = ( Element ) DomUtils . getAncestor ( element , MaryXML . VOICE ) ; if ( voice != null && DomUtils . isAncestor ( prosody , voice ) ) $F932 Element paragraph = ( Element ) DomUtils . getAncestor ( element , MaryXML . PARAGRAPH ) ; if ( paragraph != null && DomUtils . isAncestor ( prosody , paragraph ) ) $F932 for ( String att : PROSODY_ATTRIBUTES ) { $F57219 ( val , prosody , att ) if $F1264 ( val ) { utterance . setString ( att , val ) ; } } }
public static boolean createFolder ( $F1431 Context mContext , String path , String folderName ) { $F4453 ( SDCardRoot , path , folderName ) if $F1906 ( SDCardRoot ) { return SDCardRoot . mkdir ( ) ; } return _BOOL ; }
$F73303 ( axis , trans , prevImageSize , imageSize , prevViewSize , viewSize , drawableSize , m , Matrix , percentage , Math )
private CharSequence createTickerText ( String title , String body ) { SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder $F72 ; spannableStringBuilder . append ( title ) ; $F84 ( spannableStringBuilder ) spannableStringBuilder . append ( body ) ; spannableStringBuilder . setSpan ( new StyleSpan ( android . graphics . Typeface . BOLD ) , NUM00 , title . length ( ) , Spannable . SPAN_INCLUSIVE_INCLUSIVE ) ; return spannableStringBuilder ; }
private void addProtocolIfNotExists $F73675 ( protocols , protocolType ) $F2202 ( protocols , protocolType )
public String toString $F72 { $F83 ( result ) $F84 ( result ) $F167270 ( result , klazz ) $F84 ( result ) for ( $F9808 ( i , elements ) ) { $F63265 ( i , result ) $F6939 ( result , elements , i ) } $F84 ( result ) $F92 ( result ) }
void add ( Object key ) $F48801 ( table , key )
public Configuration loadConfigFromResource ( Resource resource ) { PropertiesConfiguration result = new PropertiesConfiguration $F72 ; try { result . load ( resource . getInputStream ( ) ) ; return result ; } catch ( ConfigurationException | IOException e ) { LOG . error ( CONFIGURATION_LOAD_ERROR . format ( resource . getFilename ( ) ) , e ) ; throw new SystemConfigException ( CONFIGURATION_LOAD_ERROR . format ( resource . getFilename ( ) ) , e ) ; } }
public final void log ( String filename , int lineNumber , String method , String tag , int level , String message ) { final LogMessage lm = new LogMessage ( LogMessage . LOGMSG_TYPE_LOG , nextSequenceNumber . getAndIncrement ( ) ) ; lm . addInt16 ( level , LogMessage . PART_KEY_LEVEL ) ; if ( filename != null ) { lm . addString ( filename , LogMessage . PART_KEY_FILENAME ) ; if ( lineNumber != NUM00 ) lm . addInt32 ( lineNumber , LogMessage . PART_KEY_LINENUMBER ) ; } if ( method != null ) lm . addString ( method , LogMessage . PART_KEY_FUNCTIONNAME ) ; if $F1032 ( tag ) lm . addString ( tag , LogMessage . PART_KEY_TAG ) ; lm . addString ( message , LogMessage . PART_KEY_MESSAGE ) ; log ( lm ) ; }
protected Size2D drawVertical ( Graphics2D g2 , Rectangle2D chartArea ) { double startX ; double topSpace = NUM00 ; double bottomSpace = NUM00 ; double leftSpace = NUM00 ; double rightSpace = NUM00 ; double w = getWidth ( ) ; double h = getHeight ( ) ; RectangleInsets padding = getPadding ( ) ; if ( padding != null ) { topSpace = padding . calculateTopOutset ( h ) ; bottomSpace = padding . calculateBottomOutset ( h ) ; leftSpace = padding . calculateLeftOutset ( w ) ; rightSpace = padding . calculateRightOutset ( w ) ; } if ( getPosition ( ) == RectangleEdge . LEFT ) { startX = chartArea . getX ( ) + leftSpace ; } else { startX = chartArea . getMaxX ( ) - rightSpace - w ; } VerticalAlignment alignment = getVerticalAlignment ( ) ; double startY = NUM00 ; if ( alignment == VerticalAlignment . CENTER ) { startY = chartArea . getMinY ( ) + topSpace + $F63370 ( chartArea ) - h / NUM00 ; } else if ( alignment == VerticalAlignment . TOP ) { startY = chartArea . getMinY ( ) + topSpace ; } else if ( alignment == VerticalAlignment . BOTTOM ) { startY = chartArea . getMaxY ( ) - bottomSpace - h ; } g2 . drawImage ( this . image , ( int ) startX , ( int ) startY , ( int ) w , ( int ) h , null ) ; return new Size2D ( chartArea . getWidth ( ) + leftSpace + rightSpace , h + topSpace + bottomSpace ) ; }
private static final PublicKey constructPublicKey $F27539 ( encodedKey , encodedKeyAlgorithm ) throws InvalidKeyException , NoSuchAlgorithmException { PublicKey key = null ; try { KeyFactory keyFactory = KeyFactory . getInstance ( encodedKeyAlgorithm , SunJCE . getInstance ( ) ) ; $F65117 ( keySpec , encodedKey ) key = keyFactory . generatePublic ( keySpec ) ; } catch ( NoSuchAlgorithmException nsae ) { try { $F156 ( keyFactory , KeyFactory , encodedKeyAlgorithm ) $F65117 ( keySpec , encodedKey ) key = keyFactory . generatePublic ( keySpec ) ; } catch ( NoSuchAlgorithmException nsae2 ) { throw new NoSuchAlgorithmException $F54019 ( encodedKeyAlgorithm ) ; } catch ( InvalidKeySpecException ikse2 ) { InvalidKeyException ike = new InvalidKeyException $F580 ; ike . initCause ( ikse2 ) ; throw ike ; } } catch ( InvalidKeySpecException ikse ) { InvalidKeyException ike = new InvalidKeyException $F580 ; ike . initCause ( ikse ) ; throw ike ; } return key ; }
public int numHits ( String query ) throws ParseException , IOException { Integer count ; if ( ( count = ( Integer ) m_hitCountCache . get ( query ) ) == null ) { Hits hits = search ( query ) ; count = new Integer $F45530 ( hits ) ; m_hitCountCache . put ( query , count ) ; } $F10182 ( count ) }
public static boolean expressionIsTrue ( double leftSide , Operator operator , double rightSide ) { final String expression = leftSide + operator . getMathematicalOperator ( ) + rightSide ; return expressionIsTrue ( expression ) ; }
public MockResponse addHeader ( String name , Object value ) { return addHeader ( name + NUM00 + String . valueOf ( value ) ) ; }
$F1 public $F19290 max ( final Comparator $F11632 comparator ) $F19292 ( CompletableFuture , exec )
final public void println ( char v ) { Writer out = this . out ; $F8249 ( out ) try { out . write ( v ) ; $F17918 ( out , _newline ) } $F53427 ( log , Level , e ) }
public void test_write_correctRejection_emptyRecord $F72 { $F75329 ( store , getStore ) try { try { store . write ( ByteBuffer . wrap ( $F68763 ) ) ; fail ( NUM00 + $F85137 ) ; } catch ( IllegalArgumentException ex ) { $F38209 ( log , ex ) } try { final ByteBuffer buf = ByteBuffer . wrap ( $F10314 ) ; $F45866 ( buf ) store . write ( buf ) ; fail ( NUM00 + $F85137 ) ; } catch ( IllegalArgumentException ex ) { $F38209 ( log , ex ) } } $F17625 ( store ) }
public synchronized void commit $F72 { synchronized ( mutex ) { Map < Column , Set < Interval > > temp = workingIntervals ; workingIntervals = Collections . synchronizedMap ( new LinkedHashMap $F200 $F72 ) ; availableIntervalsRef . set ( Collections . unmodifiableMap ( new LinkedHashMap $F200 ( temp ) ) ) ; super . columns = new $F22301 $F57797 ( temp ) ; } }
public void testUpdate7 $F72 { String updateQuery = NUM00 + DatabaseCreator . TEST_TABLE1 + NUM00 + DatabaseCreator . TEST_TABLE2 + NUM00 ; try { $F32305 ( num , statement , updateQuery ) int expectedUpdated = NUM00 ; assertEquals ( NUM00 , expectedUpdated , num ) ; $F32306 ( selectQuery , DatabaseCreator ) $F15328 ( result , statement , selectQuery ) $F32307 ( result ) $F59 ( result ) } $F32310 ( fail , e ) }
public static String extractIndentString $F36827 ( line , tabWidth , indentWidth ) { if ( tabWidth < NUM00 || indentWidth < NUM00 || line == null ) $F26853 $F1749 ( size , line ) int end = NUM00 ; int spaceEquivs = NUM00 ; int characters = NUM00 ; for ( $F119 ( i , size ) ) { $F1280 ( c , line , i ) if ( c == NUM00 ) { spaceEquivs = calculateSpaceEquivalents ( tabWidth , spaceEquivs ) ; characters ++ ; } else if ( isIndentChar ( c ) ) $F1097 ( spaceEquivs , characters ) else $F5153 if ( spaceEquivs >= indentWidth ) { end += characters ; characters = NUM00 ; if ( indentWidth == NUM00 ) { spaceEquivs = NUM00 ; } else { spaceEquivs = spaceEquivs % indentWidth ; } } } if ( end == NUM00 ) { return Util . EMPTY_ "STRING" ; } else if ( end == size ) { return line ; } else $F35299 ( line , end ) }
$F82361 ( filename , includeSeparator , prefix , getPrefixLength , getPrefix , index , indexOfLastSeparator , end )
private void preInsert ( MkMaxEntry q , MkMaxEntry nodeEntry , KNNHeap knns_q ) { if $F88618 ( LOG ) { LOG . debugFine ( NUM00 + q + NUM00 + nodeEntry + NUM00 ) ; } double knnDist_q = knns_q . getKNNDistance ( ) ; MkMaxTreeNode $F65331 node = getNode ( nodeEntry ) ; double knnDist_node = NUM00 ; if ( node . isLeaf ( ) ) { for ( $F258528 ( i , node ) ) { MkMaxEntry p = node . getEntry ( i ) ; double dist_pq = distance ( p . getRoutingObjectID ( ) , q . getRoutingObjectID ( ) ) ; if ( dist_pq <= knnDist_q ) { knns_q . insert ( dist_pq , p . getRoutingObjectID ( ) ) ; if ( knns_q . size ( ) >= getKmax ( ) ) { knnDist_q = knns_q . getKNNDistance ( ) ; q . setKnnDistance ( knnDist_q ) ; } } if ( dist_pq <= p . getKnnDistance ( ) ) { KNNList knns_p = knnq . getKNNForDBID ( p . getRoutingObjectID ( ) , getKmax ( ) - NUM00 ) ; if ( $F2958 ( knns_p ) < getKmax ( ) ) { p . setKnnDistance ( Double . NaN ) ; } else { double knnDist_p = Math . max ( dist_pq , knns_p . getKNNDistance ( ) ) ; p . setKnnDistance ( knnDist_p ) ; } } knnDist_node = Math . max ( knnDist_node , p . getKnnDistance ( ) ) ; } } else { List < DoubleIntPair > entries = getSortedEntries ( node , q . getRoutingObjectID ( ) ) ; for ( DoubleIntPair distEntry : entries ) { MkMaxEntry dirEntry = node . getEntry ( distEntry . second ) ; double entry_knnDist = dirEntry . getKnnDistance ( ) ; if ( distEntry . second < entry_knnDist || distEntry . second < knnDist_q ) { preInsert ( q , dirEntry , knns_q ) ; knnDist_q = knns_q . getKNNDistance ( ) ; } knnDist_node = Math . max ( knnDist_node , dirEntry . getKnnDistance ( ) ) ; } } if $F88618 ( LOG ) { LOG . debugFine ( nodeEntry + NUM00 + knnDist_node ) ; } nodeEntry . setKnnDistance ( knnDist_node ) ; }
private static boolean addIfMatches ( $F3803 container , String statusLine , char x , char y ) { if ( matches ( statusLine , x , y ) ) { final String filename = statusLine . substring ( NUM00 ) ; $F2201 ( container , filename ) return _BOOL ; } return _BOOL ; }
public void testDivideRoundHalfDownNeg2 $F72 { String a = NUM00 ; int aScale = NUM00 ; String b = NUM00 ; int bScale = NUM00 ; String c = NUM00 ; int resScale = - NUM00 ; $F1918 ( aNumber , a , aScale ) $F1918 ( bNumber , b , bScale ) BigDecimal result = aNumber . divide ( bNumber , resScale , BigDecimal . ROUND_HALF_DOWN ) ; $F1925 ( assertEquals , c , result ) $F1928 ( assertEquals , resScale , result ) }
public static String encodeFromString ( String plain , String charset ) throws CoderException , UnsupportedEncodingException { return encode ( plain . getBytes ( charset ) ) ; }
public void slide ( SLIDE slide ) { if ( slide == SLIDE . UP ) { if $F931 ( isPanelShown ) { int position = NUM00 ; if ( items != null ) { position = $F74216 ( items ) ; } slideUp ( position ) ; } } else $F5795 ( hidePanelPickerUI ) }
public DrawerBuilder addStickyDrawerItems ( $F4170 IDrawerItem ... stickyDrawerItems ) { if ( this . mStickyDrawerItems == null ) { this . mStickyDrawerItems = $F203 ; } Collections . addAll ( this . mStickyDrawerItems , IdDistributor . checkIds ( stickyDrawerItems ) ) ; return this ; }
public boolean isDebuggingFinest $F72 { return logger . isLoggable ( Level . FINEST ) ; }
private static void sort1 $F74721 ( x , off , len ) { $F189413 ( len , i , off , j , x , swap ) $F189415 ( m , off , len ) $F189419 ( len , l , off , n , s , med3 , x , m ) int v = x [ m ] ; $F93850 ( a , off , b , c , len , d ) $F189427 ( _BOOL , b , c , x , v , swap , a , d ) int s , n = off + len ; $F84682 ( s , Math , a , off , b ) vecswap ( x , off , b - s , s ) ; $F84685 ( s , Math , d , c , n ) vecswap ( x , b , n - s , s ) ; $F189428 ( s , b , a , sort1 , x , off ) $F189429 ( s , d , c , sort1 , x , n ) }
public void reset $F72 { $F6050 ( ns ) $F4910 ( ks ) cur = tt . root ; run ( ) ; }
$F160927 static float sin ( float angle ) { return $F148723 ( Math , angle ) ; }
public static void renderFlattenedAnnotation ( final PdfObject form , final DynamicVectorRenderer current , final int pageNumber , final int rotation ) { final BufferedImage image = AnnotationFactory . getIcon ( form ) ; if ( image != null ) { final GraphicsState gs = new GraphicsState $F72 ; $F43590 ( iconHeight , image ) $F43592 ( iconWidth , image ) final $F5415 rect = form . getFloatArray ( PdfDictionary . Rect ) ; if ( form . getParameterConstant ( PdfDictionary . Subtype ) == PdfDictionary . Text ) { rect [ NUM00 ] = rect [ NUM00 ] + iconWidth ; rect [ NUM00 ] = rect [ NUM00 ] - iconHeight ; form . setFloatArray ( PdfDictionary . Rect , rect ) ; } switch ( rotation % NUM00 ) { $F3366 gs . CTM = new float [ ] [ ] { { iconWidth , NUM00 , NUM00 } , { NUM00 , iconHeight , NUM00 } , $F79696 } ; gs . x = rect [ NUM00 ] ; gs . y = rect [ NUM00 ] - iconHeight ; gs . CTM [ NUM00 ] [ NUM00 ] = rect [ NUM00 ] ; gs . CTM [ NUM00 ] [ NUM00 ] = rect [ NUM00 ] - iconHeight ; $F597 $F3366 gs . CTM = new float [ ] [ ] { { NUM00 , iconWidth , NUM00 } , { - iconHeight , NUM00 , NUM00 } , $F79696 } ; gs . x = rect [ NUM00 ] + iconHeight ; gs . y = rect [ NUM00 ] ; gs . CTM [ NUM00 ] [ NUM00 ] = rect [ NUM00 ] + iconHeight ; gs . CTM [ NUM00 ] [ NUM00 ] = rect [ NUM00 ] ; $F597 $F3366 gs . CTM = new float [ ] [ ] { { - iconWidth , NUM00 , NUM00 } , { NUM00 , - iconHeight , NUM00 } , $F79696 } ; gs . x = rect [ NUM00 ] ; gs . y = rect [ NUM00 ] + iconHeight ; gs . CTM [ NUM00 ] [ NUM00 ] = rect [ NUM00 ] ; gs . CTM [ NUM00 ] [ NUM00 ] = rect [ NUM00 ] + iconHeight ; $F597 $F3366 gs . CTM = new float [ ] [ ] { { NUM00 , - iconWidth , NUM00 } , { iconHeight , NUM00 , NUM00 } , $F79696 } ; gs . x = rect [ NUM00 ] - iconHeight ; gs . y = rect [ NUM00 ] ; gs . CTM [ NUM00 ] [ NUM00 ] = rect [ NUM00 ] - iconHeight ; gs . CTM [ NUM00 ] [ NUM00 ] = rect [ NUM00 ] ; $F597 } if ( form . getParameterConstant ( PdfDictionary . Subtype ) == PdfDictionary . Highlight ) { current . setGraphicsState ( GraphicsState . STROKE , gs . getAlpha ( GraphicsState . STROKE ) , PdfDictionary . Darken ) ; current . setGraphicsState ( GraphicsState . FILL , gs . getAlpha ( GraphicsState . FILL ) , PdfDictionary . Darken ) ; } current . drawImage ( pageNumber , image , gs , _BOOL , form . getObjectRefAsString ( ) , - NUM00 ) ; if ( form . getParameterConstant ( PdfDictionary . Subtype ) == PdfDictionary . Highlight ) { current . setGraphicsState ( GraphicsState . STROKE , gs . getAlpha ( GraphicsState . STROKE ) , PdfDictionary . Normal ) ; current . setGraphicsState ( GraphicsState . FILL , gs . getAlpha ( GraphicsState . FILL ) , PdfDictionary . Normal ) ; } } }
public $F96 extractData ( $F96 stegoData , String stegoFileName , $F96 origSigData ) throws OpenStegoException $F1337
public static String makeRelatedSessionID ( String encryptedID , SessionID prototype ) throws SessionException { prototype . parseSessionString ( ) ; return makeSessionID ( encryptedID , prototype . getExtension ( ) , prototype . tail ) ; }
public static GeneralPath cardinalSpline ( $F8138 , int start , int npoints , float slack , boolean closed ) { $F13609 ( path ) path . moveTo ( $F149550 ( pts , start ) ) ; return cardinalSpline ( path , pts , start , npoints , slack , closed , NUM00 , NUM00 ) ; }
public static Automaton determinize ( Automaton a , int maxDeterminizedStates ) { if ( a . isDeterministic ( ) ) { return a ; } if ( a . getNumStates ( ) <= NUM00 ) { return a ; } Automaton . Builder b = new Automaton . Builder $F72 ; SortedIntSet . FrozenIntSet initialset = new SortedIntSet . FrozenIntSet $F32532 ; $F25451 ( b ) LinkedList < SortedIntSet . FrozenIntSet > $F19827 ( worklist ) ; Map < SortedIntSet . FrozenIntSet , Integer > $F8690 ( newstate ) ; worklist . add ( initialset ) ; b . setAccept ( NUM00 , a . isAccept ( NUM00 ) ) ; $F101820 ( newstate , initialset ) final PointTransitionSet points = new PointTransitionSet $F72 ; final SortedIntSet statesSet = new SortedIntSet $F989 ; Transition t = new Transition $F72 ; while $F3817 ( worklist ) { SortedIntSet . FrozenIntSet s = worklist . removeFirst ( ) ; for ( int i = NUM00 ; i < s . values . length ; i ++ ) { final int s0 = s . values [ i ] ; int numTransitions = a . getNumTransitions ( s0 ) ; a . initTransition ( s0 , t ) ; for ( $F119 ( j , numTransitions ) ) { a . getNextTransition ( t ) ; points . add ( t ) ; } } if $F69887 ( points ) $F1448 $F112999 ( points ) int lastPoint = - NUM00 ; int accCount = NUM00 ; final int r = s . state ; for ( int i = NUM00 ; i < points . count ; i ++ ) { final int point = points . points [ i ] . point ; if ( statesSet . upto > NUM00 ) { assert lastPoint != - NUM00 ; statesSet . computeHash ( ) ; $F99426 ( q , newstate , statesSet ) if ( q == null ) { q = b . createState ( ) ; if ( q >= maxDeterminizedStates ) { throw new TooComplexToDeterminizeException ( a , maxDeterminizedStates ) ; } final SortedIntSet . FrozenIntSet p = statesSet . freeze ( q ) ; worklist . add ( p ) ; b . setAccept ( q , accCount > NUM00 ) ; newstate . put ( p , q ) ; } else { assert ( accCount > NUM00 ? _BOOL : _BOOL ) == b . isAccept ( q ) : NUM00 + accCount + NUM00 + b . isAccept ( q ) + NUM00 + statesSet ; } b . addTransition ( r , q , lastPoint , point - NUM00 ) ; } $F2027 transitions = points . points [ i ] . ends . transitions ; int limit = points . points [ i ] . ends . next ; for ( $F6225 ( j , limit ) ) { int dest = transitions [ j ] ; statesSet . decr ( dest ) ; accCount -= a . isAccept ( dest ) ? NUM00 : NUM00 ; } points . points [ i ] . ends . next = NUM00 ; transitions = points . points [ i ] . starts . transitions ; limit = points . points [ i ] . starts . next ; for ( $F6225 ( j , limit ) ) { int dest = transitions [ j ] ; statesSet . incr ( dest ) ; accCount += a . isAccept ( dest ) ? NUM00 : NUM00 ; } lastPoint = point ; points . points [ i ] . starts . next = NUM00 ; } $F2268 ( points ) assert statesSet . upto == NUM00 : NUM00 + statesSet . upto ; } Automaton result = b . finish ( ) ; assert result . isDeterministic ( ) ; return result ; }
public boolean matches ( String seq ) { return queue . regionMatches ( _BOOL , pos , seq , NUM00 , seq . length ( ) ) ; }
private boolean findRoot ( final ODEStateInterpolator interpolator , final double ta , final double ga , final double tb , final double gb ) { check ( ga == NUM00 || gb == NUM00 || ( ga > NUM00 && gb < NUM00 ) || ( ga < NUM00 && gb > NUM00 ) ) ; final UnivariateFunction f = null ; double beforeRootT = Double . NaN , beforeRootG = Double . NaN ; double afterRootT = ta , afterRootG = NUM00 ; if ( ta == tb ) { beforeRootT = ta ; beforeRootG = ga ; afterRootT = shiftedBy ( beforeRootT , convergence ) ; afterRootG = f . value ( afterRootT ) ; } else if ( ga != NUM00 && gb == NUM00 ) { beforeRootT = tb ; beforeRootG = gb ; afterRootT = shiftedBy ( beforeRootT , convergence ) ; afterRootG = f . value ( afterRootT ) ; } else if ( ga != NUM00 ) { final double newGa = f . value ( ta ) ; if ( ga > NUM00 != newGa > NUM00 ) { beforeRootT = ta ; beforeRootG = newGa ; afterRootT = minTime ( shiftedBy ( beforeRootT , convergence ) , tb ) ; afterRootG = f . value ( afterRootT ) ; } } double loopT = ta , loopG = ga ; while ( ( afterRootG == NUM00 || afterRootG > NUM00 == g0Positive ) && strictlyAfter ( afterRootT , tb ) ) { if ( loopG == NUM00 ) { beforeRootT = loopT ; beforeRootG = loopG ; afterRootT = minTime ( shiftedBy ( beforeRootT , convergence ) , tb ) ; afterRootG = f . value ( afterRootT ) ; } else { if ( forward ) { final Interval interval = solver . solveInterval ( maxIterationCount , f , loopT , tb ) ; beforeRootT = interval . getLeftAbscissa ( ) ; beforeRootG = interval . getLeftValue ( ) ; afterRootT = interval . getRightAbscissa ( ) ; afterRootG = interval . getRightValue ( ) ; } else { final Interval interval = solver . solveInterval ( maxIterationCount , f , tb , loopT ) ; beforeRootT = interval . getRightAbscissa ( ) ; beforeRootG = interval . getRightValue ( ) ; afterRootT = interval . getLeftAbscissa ( ) ; afterRootG = interval . getLeftValue ( ) ; } } if ( beforeRootT == afterRootT ) { afterRootT = nextAfter ( afterRootT ) ; afterRootG = f . value ( afterRootT ) ; } check ( ( forward && afterRootT > beforeRootT ) || ( ! forward && afterRootT < beforeRootT ) ) ; loopT = afterRootT ; loopG = afterRootG ; } if ( afterRootG == NUM00 || afterRootG > NUM00 == g0Positive ) { return _BOOL ; } else { check ( ! Double . isNaN ( beforeRootT ) && ! Double . isNaN ( beforeRootG ) ) ; increasing = ! g0Positive ; pendingEventTime = beforeRootT ; stopTime = beforeRootG == NUM00 ? beforeRootT : afterRootT ; pendingEvent = _BOOL ; afterEvent = afterRootT ; afterG = afterRootG ; check ( afterG > NUM00 == increasing ) ; check ( increasing == gb >= ga ) ; return _BOOL ; } }
public static int compare ( Comparable c1 , Comparable c2 , boolean nullGreater ) { if ( c1 == c2 ) $F1083 else if ( c1 == null ) { return $F17979 ( nullGreater ) ; } else if ( c2 == null ) { return $F17973 ( nullGreater ) ; } $F12554 ( c1 , c2 ) }
public boolean checkRootBySuperUserApk $F72 { $F1705 ( suApk , SU_APK ) if $F102275 ( suApk ) { return _BOOL ; } return _BOOL ; }
int addExpression ( Expression expression ) ;
boolean trackMotionScroll ( int deltaY , int incrementalDeltaY ) { $F3666 ( childCount , getChildCount ) $F6482 ( childCount , _BOOL ) $F3666 ( firstTop , getScrollChildTop ) $F3666 ( lastBottom , getScrollChildBottom ) final Rect listPadding = mListPadding ; final int end = getHeight ( ) - listPadding . bottom ; final int spaceAbove = listPadding . top - getFillChildTop ( ) ; final int spaceBelow = getFillChildBottom ( ) - end ; final int $F125539 ( height , getHeight , getPaddingBottom , getPaddingTop ) ; if ( deltaY < NUM00 ) { deltaY = Math . max ( - ( height - NUM00 ) , deltaY ) ; } else { deltaY = Math . min ( height - NUM00 , deltaY ) ; } if ( incrementalDeltaY < NUM00 ) { incrementalDeltaY = Math . max ( - ( height - NUM00 ) , incrementalDeltaY ) ; } else { incrementalDeltaY = Math . min ( height - NUM00 , incrementalDeltaY ) ; } final int firstPosition = mFirstPosition ; if ( firstPosition == NUM00 && firstTop >= listPadding . top && deltaY >= NUM00 ) { return _BOOL ; } if ( firstPosition + childCount == mItemCount && lastBottom <= end && deltaY <= NUM00 ) { return _BOOL ; } final boolean down = incrementalDeltaY < NUM00 ; $F3666 ( headerViewsCount , getHeaderViewsCount ) final int footerViewsStart = mItemCount - getFooterViewsCount ( ) ; int start = NUM00 ; int count = NUM00 ; if ( down ) { final int top = listPadding . top - incrementalDeltaY ; for ( $F119 ( i , childCount ) ) { final View child = getChildAt ( i ) ; if $F309156 ( child , top ) $F5153 else { count ++ ; int position = firstPosition + i ; if ( position >= headerViewsCount && position < footerViewsStart ) { mRecycler . addScrapView ( child ) ; if ( ViewDebug . TRACE_RECYCLER ) { ViewDebug . trace ( child , ViewDebug . RecyclerTraceType . MOVE_TO_SCRAP_HEAP , firstPosition + i , - NUM00 ) ; } } } } } else { final int bottom = getHeight ( ) - listPadding . bottom - incrementalDeltaY ; for ( $F18298 ( i , childCount ) ) { final View child = getChildAt ( i ) ; if $F309171 ( child , bottom ) $F5153 else { start = i ; count ++ ; int position = firstPosition + i ; if ( position >= headerViewsCount && position < footerViewsStart ) { mRecycler . addScrapView ( child ) ; if ( ViewDebug . TRACE_RECYCLER ) { ViewDebug . trace ( child , ViewDebug . RecyclerTraceType . MOVE_TO_SCRAP_HEAP , firstPosition + i , - NUM00 ) ; } } } } } mMotionViewNewTop = mMotionViewOriginalTop + deltaY ; mBlockLayoutRequests = _BOOL ; if ( count > NUM00 ) { detachViewsFromParent ( start , count ) ; } tryOffsetChildrenTopAndBottom ( incrementalDeltaY ) ; $F309178 ( down , mFirstPosition , count ) invalidate ( ) ; $F49283 ( absIncrementalDeltaY , Math , incrementalDeltaY ) if ( spaceAbove < absIncrementalDeltaY || spaceBelow < absIncrementalDeltaY ) { fillGap ( down ) ; } mBlockLayoutRequests = _BOOL ; invokeOnItemScrollListener ( ) ; awakenScrollBars ( ) ; return _BOOL ; }
public static $F11685 E syncRest ( final Iterator $F4222 iterator , final Callable $F11685 task ) throws Exception { if $F2921 ( iterator ) { synchronized $F1682 ( iterator ) $F8587 ( syncRest , iterator , task ) } else $F41336 ( task ) }
private static Component findByName ( Container root , String componentName ) { if ( verbose ) { $F25590 ( log , root , componentName ) } $F60281 ( count , root ) for ( $F119 ( iter , count ) ) { Component c = root . getComponentAt ( iter ) ; $F20605 ( n , c ) if $F1256 ( n , componentName ) { return c ; } if ( c instanceof Container ) { c = findByName ( ( Container ) c , componentName ) ; $F21525 ( c ) } } $F1274 }
public boolean isFingerprint ( ClassTemplate classTemplate ) { return fingerprintClass . equals ( classTemplate . getImplementingClass ( ) ) ; }
public void writeField ( final String name , final float value ) throws $F3258 $F261761 ( writeField , name , Float , value )
private List extractColumnKeys ( String line ) { List keys = new $F59124 $F72 ; int fieldIndex = NUM00 ; int start = NUM00 ; for ( $F1088 ( i , line ) ) { if ( line . charAt ( i ) == this . fieldDelimiter ) { if ( fieldIndex > NUM00 ) { $F12715 ( key , line , start , i ) $F3761 ( keys , removeStringDelimiters , key ) } start = i + NUM00 ; fieldIndex ++ ; } } String $F465724 ( key , line , start ) ; $F3761 ( keys , removeStringDelimiters , key ) return keys ; }
protected void drawRhombus ( int x , int y , int w , int h , Color fillColor , Paint fillPaint , Color penColor , boolean shadow ) { int halfWidth = w / NUM00 ; int halfHeight = h / NUM00 ; $F157439 ( rhombus ) rhombus . addPoint ( x + halfWidth , y ) ; rhombus . addPoint ( x + w , y + halfHeight ) ; rhombus . addPoint ( x + halfWidth , y + h ) ; rhombus . addPoint ( x , y + halfHeight ) ; drawPolygon ( rhombus , fillColor , fillPaint , penColor , shadow ) ; }
private void convertAndFillByteBufferListToByteArrayList ( $F4358 ( dictionaryValues ) , List < ByteBuffer > dictionaryValueBufferList ) { for ( ByteBuffer buffer : dictionaryValueBufferList ) { $F29501 ( length , buffer ) $F2175 ( value , length ) buffer . get ( value , NUM00 , value . length ) ; dictionaryValues . add ( value ) ; } }
static Object instantiate $F17798 ( sibling , className ) throws InstantiationException , IllegalAccessException , ClassNotFoundException { ClassLoader cl = sibling . getClassLoader ( ) ; $F6969 cls = ClassFinder . findClass ( className , cl ) ; $F101944 ( cls ) }
private $F96 generateDerivedKey ( int bytesNeeded ) { $F216093 ( buf , digest ) $F2175 ( key , bytesNeeded ) int offset = NUM00 ; for ( $F589 ) { $F6163 ( digest , password ) $F6163 ( digest , salt ) $F137382 ( digest , buf ) int len = ( bytesNeeded > buf . length ) ? buf . length : bytesNeeded ; $F6483 ( System , buf , key , offset , len ) offset += len ; bytesNeeded -= len ; $F7256 ( bytesNeeded ) $F2268 ( digest ) $F6163 ( digest , buf ) } return key ; }
public void testSystemRunFinalizationReturnsEvenIfQueueIsNonEmpty $F72 throws Exception { AtomicInteger $F72840 ( count ) ; AtomicBoolean keepGoing = new AtomicBoolean ( _BOOL ) ; createChainedFinalizer ( count , keepGoing ) ; while $F76102 ( count ) { $F9470 ( Thread ) FinalizationTester . induceFinalization ( ) ; } keepGoing . set ( _BOOL ) ; assertTrue ( $F15854 ( count ) ) ; }
public synchronized void show ( Bundle options ) { $F12259 ( DEBUG , Log , TAG , mKeyguardView ) boolean enableScreenRotation = shouldEnableScreenRotation ( ) ; maybeCreateKeyguardLocked ( enableScreenRotation , _BOOL , options ) ; maybeEnableScreenRotation ( enableScreenRotation ) ; final int visFlags = View . STATUS_BAR_DISABLE_HOME ; if ( DEBUG ) Log . v ( TAG , $F36004 ( Integer , visFlags ) ) ; mKeyguardHost . setSystemUiVisibility ( visFlags ) ; mViewManager . updateViewLayout ( mKeyguardHost , mWindowLayoutParams ) ; $F29549 ( mKeyguardHost , View ) $F114746 ( mKeyguardView ) $F32277 ( mKeyguardView ) }
public static int computeStringWidth ( FontMetrics fm , String str ) { return SwingUtilities2 . stringWidth ( null , fm , str ) ; }
private boolean passesSanityCheck ( AccessibilityEvent event ) { final CharSequence afterText = getEventText ( event ) ; final CharSequence beforeText = event . getBeforeText ( ) ; if ( ( event . getAddedCount ( ) == NUM00 ) && ( event . getRemovedCount ( ) == beforeText . length ( ) ) ) { return _BOOL ; } $F6973 ( afterText , beforeText , _BOOL ) final int diff = ( event . getAddedCount ( ) - event . getRemovedCount ( ) ) ; return ( ( beforeText . length ( ) + diff ) == afterText . length ( ) ) ; }
public void actionPerformed ( ActionEvent ae ) { $F35563 ( command , ae ) if ( command == DisplayPaletteCmd ) { if $F22503 ( Debug ) { Debug . output ( getName ( ) + NUM00 ) ; } showPalette ( ) ; } else if ( command == HidePaletteCmd ) { if $F22503 ( Debug ) { Debug . output ( getName ( ) + NUM00 ) ; } hidePalette ( ) ; } else if ( command == DisplayPropertiesCmd ) { Inspector inspector = new Inspector $F72 ; inspector . inspectPropertyConsumer ( this ) ; } }
public static String toString ( LocalDate data ) { return data == null ? NUM00 : data . format ( formatter ( NUM00 ) ) ; }
@ JsonCreator public DataSourceMetadata ( $F26186 String name , $F26186 $F2539 properties , $F26186 List < DataSegment > segments ) { this . name = name ; this . properties = Collections . unmodifiableMap ( properties ) ; this . segments = Collections . unmodifiableList ( segments ) ; }
public EMail createEMail ( String value ) { EmailField emailImpl = new EmailField $F72 ; try $F18283 ( emailImpl , value ) $F18284 ( s ) return emailImpl ; }
public AddressLookup $F1947 ( serverUrl , serialNo , password ) { $F10588 ( this , serverUrl ) this . clientID = serialNo . trim ( ) ; this . accessCode = password . trim ( ) ; }
public void addChangeListener ( ChangeListener l ) $F207 ( m_ChangeListeners , l )
public Node ( String permission , boolean value , boolean override , long expireAt , String server , String world , ContextSet contexts ) { if $F3581 ( permission ) $F825 if ( server != null && $F265379 ( server ) ) { server = null ; } if $F85112 ( world ) { world = null ; } if ( world != null && server == null ) { server = NUM00 ; } this . permission = permission ; this . value = value ; this . override = override ; this . expireAt = expireAt ; this . server = server ; this . world = world ; this . contexts = contexts == null ? ContextSet . empty ( ) : contexts . makeImmutable ( ) ; }
public Cell ( int rowspan , int colspan ) { this . rowspan = Math . max ( rowspan , NUM00 ) ; this . colspan = Math . max ( colspan , NUM00 ) ; }
private void initializeLocalAndTargetInfo $F72 throws Exception { targetSiteInfo = coordinator . getTargetInfo ( SiteInfo . class ) ; if ( targetSiteInfo == null ) { targetSiteInfo = new SiteInfo $F72 ; try { coordinator . setTargetInfo ( targetSiteInfo , _BOOL ) ; $F10635 ( log , targetSiteInfo ) } catch ( CoordinatorClientException e ) { $F973 ( log ) retrySleep ( ) ; throw e ; } } localVdcPropInfo = localRepository . getVdcPropertyInfo ( ) ; String localConfigVersion = localVdcPropInfo . getProperty ( VdcConfigUtil . VDC_CONFIG_VERSION ) ; coordinator . setNodeSessionScopeInfo ( new VdcConfigVersion ( localConfigVersion ) ) ; targetVdcPropInfo = loadVdcConfig ( ) ; if ( isGeoUpgradeFromPreYoda ( ) ) { $F973 ( log ) localVdcPropInfo . addProperty ( VdcConfigUtil . VDC_CONFIG_VERSION , String . valueOf ( targetSiteInfo . getVdcConfigVersion ( ) ) ) ; localRepository . setVdcPropertyInfo ( localVdcPropInfo ) ; } else { if ( localVdcPropInfo . getProperty ( VdcConfigUtil . VDC_CONFIG_VERSION ) == null ) { localVdcPropInfo = new PropertyInfoExt ( targetVdcPropInfo . getAllProperties ( ) ) ; localVdcPropInfo . addProperty ( VdcConfigUtil . VDC_CONFIG_VERSION , String . valueOf ( targetSiteInfo . getVdcConfigVersion ( ) ) ) ; localRepository . setVdcPropertyInfo ( localVdcPropInfo ) ; String vdc_ids = targetVdcPropInfo . getProperty ( VdcConfigUtil . VDC_IDS ) ; $F6542 ( vdcIds , vdc_ids ) if $F3305 ( vdcIds ) { $F973 ( log ) reboot ( ) ; } } } targetPowerOffState = coordinator . getTargetInfo ( PowerOffState . class ) ; if ( targetPowerOffState == null ) { try { coordinator . setTargetInfo ( new PowerOffState ( PowerOffState . State . NONE ) ) ; targetPowerOffState = coordinator . getTargetInfo ( PowerOffState . class ) ; log . info ( NUM00 , PowerOffState . State . NONE ) ; } catch ( CoordinatorClientException e ) { $F973 ( log ) retrySleep ( ) ; throw e ; } } }
$F1 public void openElement ( String tagName ) { XMLElement newElement = new XMLElement $F72 ; newElement . setName ( tagName ) ; current . addChild ( newElement ) ; stack . push ( current ) ; current = newElement ; }
public Format ( String pFormatString ) { String formatVars [ ] = pFormatString . split ( NUM00 ) ; $F51416 ( mId , Integer , formatVars ) }
public boolean equals ( Object interval ) { $F1933 ( intervals , _BOOL ) $F297 ( intervals , interval ) }
public static String relativeToAbsolute ( String baseURL , String relativeURL ) { if $F3106 ( relativeURL ) { return getURLProtocol ( baseURL ) + NUM00 + getURLHost ( baseURL ) + relativeURL ; } else { return getURLProtocol ( baseURL ) + NUM00 + getURLHost ( baseURL ) + getURLBasePath ( baseURL ) + relativeURL ; } }
public void start $F72 { if ( setState ( EnumSet . of ( TaskState . INITIAL , TaskState . QUEUED ) , TaskState . RUNNING ) ) { DHT . logDebug ( NUM00 + toString ( ) ) ; $F3224 ( startTime , System ) try $F21688 ( serializedUpdate ) catch ( Exception e ) { DHT . log ( e , LogLevel . Error ) ; } } }
public JournalIndex ( final IRawStore store , final Checkpoint checkpoint , final IndexMetadata metadata , final boolean readOnly ) { super ( store , checkpoint , metadata , readOnly ) ; }
private void accesBreakpointInstruction ( $F241341 instructions , int lineNumber , int op , BPINSTRUCTION_STATUS status ) { for ( $F2277 ( i , instructions ) ) { Instruction currInst = instructions . get ( i ) ; if ( op == NUM00 ) { if ( currInst instanceof MRJobInstruction ) { MRJobInstruction currMRInst = ( MRJobInstruction ) currInst ; if ( currMRInst . findMRInstructions ( lineNumber ) ) { BreakPointInstruction breakpoint = new BreakPointInstruction $F72 ; breakpoint . setLocation ( currInst ) ; breakpoint . setInstID ( instID ++ ) ; breakpoint . setBPInstructionLocation ( location ) ; instructions . add ( i , breakpoint ) ; DMLBreakpointManager . insertBreakpoint ( breakpoint , lineNumber ) ; $F665 } } else if ( currInst instanceof CPInstruction || currInst instanceof SPInstruction ) { if ( currInst . getLineNum ( ) == lineNumber ) { BreakPointInstruction breakpoint = new BreakPointInstruction $F72 ; breakpoint . setLocation ( currInst ) ; breakpoint . setInstID ( instID ++ ) ; breakpoint . setBPInstructionLocation ( location ) ; instructions . add ( i , breakpoint ) ; DMLBreakpointManager . insertBreakpoint ( breakpoint , lineNumber ) ; $F665 } } else if ( currInst instanceof BreakPointInstruction && currInst . getLineNum ( ) == lineNumber ) { BreakPointInstruction breakpoint = ( BreakPointInstruction ) currInst ; breakpoint . setBPInstructionStatus ( BPINSTRUCTION_STATUS . ENABLED ) ; breakpoint . setBPInstructionLocation ( location ) ; instructions . set ( i , breakpoint ) ; DMLBreakpointManager . updateBreakpoint ( lineNumber , status ) ; $F665 } } else { if ( currInst instanceof BreakPointInstruction && currInst . getLineNum ( ) == lineNumber ) { if ( op == NUM00 ) { BreakPointInstruction breakpoint = ( BreakPointInstruction ) currInst ; breakpoint . setLocation ( currInst ) ; breakpoint . setInstID ( currInst . getInstID ( ) ) ; breakpoint . setBPInstructionStatus ( status ) ; breakpoint . setBPInstructionLocation ( location ) ; instructions . set ( i , breakpoint ) ; DMLBreakpointManager . updateBreakpoint ( lineNumber , status ) ; } else { instructions . remove ( i ) ; DMLBreakpointManager . removeBreakpoint ( lineNumber , status ) ; } $F665 } } } }
private void closeFile $F72 { if ( plogStream != null ) { try { $F59 ( plogStream ) $F9472 ( logger , plogFilename ) } catch ( IOException e ) $F34420 ( logger , plogFilename ) $F14110 ( plogStream ) } }
public void nextToken $F72 { previousLine = line ; previousColumn = column ; while ( pos < matcher . regionStart ( ) ) { if $F11983 ( text , pos ) { ++ line ; column = NUM00 ; } else { ++ column ; } ++ pos ; } if ( matcher . regionStart ( ) == matcher . regionEnd ( ) ) { currentToken = NUM00 ; } else { matcher . usePattern ( TOKEN ) ; if $F54321 ( matcher ) { currentToken = matcher . group ( ) ; matcher . region ( matcher . end ( ) , matcher . regionEnd ( ) ) ; } else { currentToken = $F54327 ( String , text , pos ) ; matcher . region ( pos + NUM00 , matcher . regionEnd ( ) ) ; } skipWhitespace ( ) ; } }
private void parseFirstConsonant $F72 { $F10531 ( iter , alFirstConsonants ) while $F2921 ( iter ) { $F2778 ( strFirstCon , iter ) if ( strSyllable . startsWith ( strFirstCon , iCurPos ) ) { strFirstConsonant = strFirstCon ; $F90433 ( iCurPos , strFirstCon ) $F665 } } strFirstConsonant = ZERO ; }
private BuddyPanelController $F72 { $F26681 ( buddyPanel ) buddyPanel . setLayout ( new SBoxLayout ( SBoxLayout . VERTICAL ) ) ; model = new BuddyListModel $F72 ; JList < Buddy > list = new BuddyPanel ( model ) ; buddyPanel . add ( list , SLayout . EXPAND_X ) ; }
private void removeGapsWithEdgeConcentration ( int nodesLevel [ ] ) { final int temp = m_nodes . size ( ) , temp2 = graphMatrix [ NUM00 ] . length ; int tempCnt = NUM00 ; for ( $F119 ( n , temp ) ) { for ( $F119 ( i , temp2 ) ) { if $F293661 ( graphMatrix , n , i ) { if ( nodesLevel [ i ] > nodesLevel [ n ] + NUM00 ) { int tempLevel = nodesLevel [ n ] ; boolean tempNodePresent = _BOOL ; int k = temp ; int tempnode = n ; while ( tempLevel < nodesLevel [ i ] - NUM00 ) { tempNodePresent = _BOOL ; for ( $F255681 ( k , graphMatrix ) ) { if $F293661 ( graphMatrix , tempnode , k ) $F3468 ( tempNodePresent , _BOOL ) } if ( tempNodePresent ) { tempnode = k ; k = k + NUM00 ; tempLevel ++ ; } else { if ( tempnode != n ) { tempnode = k - NUM00 ; } $F597 } } if ( m_nodes . get ( tempnode ) . nodeType == SINGULAR_DUMMY ) { m_nodes . get ( tempnode ) . nodeType = PLURAL_DUMMY ; } if ( tempNodePresent ) { graphMatrix [ tempnode ] [ i ] = graphMatrix [ n ] [ i ] ; graphMatrix [ i ] [ tempnode ] = - graphMatrix [ n ] [ i ] ; graphMatrix [ n ] [ i ] = NUM00 ; graphMatrix [ i ] [ n ] = NUM00 ; $F598 } int len = graphMatrix . length ; int tempMatrix [ ] [ ] = new int [ graphMatrix . length + ( nodesLevel [ i ] - nodesLevel [ tempnode ] - NUM00 ) ] [ graphMatrix . length + ( nodesLevel [ i ] - nodesLevel [ tempnode ] - NUM00 ) ] ; int level = nodesLevel [ tempnode ] + NUM00 ; copyMatrix ( graphMatrix , tempMatrix ) ; String s1 = new String ( NUM00 + tempCnt ++ ) ; m_nodes . add ( new GraphNode ( s1 , s1 , SINGULAR_DUMMY ) ) ; int temp3 [ ] = new int [ nodeLevels [ level ] . length + NUM00 ] ; $F250575 ( System , nodeLevels , level , temp3 ) $F8528 ( temp3 ) = $F2281 ( m_nodes ) ; nodeLevels [ level ] = temp3 ; temp3 = new int $F6504 ( m_nodes ) ; $F7057 ( System , nodesLevel , temp3 ) temp3 [ $F2281 ( m_nodes ) ] = level ; nodesLevel = temp3 ; level ++ ; int m ; for ( m = len ; m < len + nodesLevel [ i ] - nodesLevel [ tempnode ] - NUM00 - NUM00 ; m ++ ) { String s2 = new String ( NUM00 + tempCnt ++ ) ; m_nodes . add ( new GraphNode ( s2 , s2 , SINGULAR_DUMMY ) ) ; temp3 = new int [ nodeLevels [ level ] . length + NUM00 ] ; $F250575 ( System , nodeLevels , level , temp3 ) $F8528 ( temp3 ) = $F2281 ( m_nodes ) ; nodeLevels [ level ] = temp3 ; temp3 = new int $F6504 ( m_nodes ) ; $F7057 ( System , nodesLevel , temp3 ) temp3 [ $F2281 ( m_nodes ) ] = level ; nodesLevel = temp3 ; level ++ ; tempMatrix [ m ] [ m + NUM00 ] = tempMatrix [ n ] [ i ] ; if ( m > len ) { tempMatrix [ m ] [ m - NUM00 ] = - NUM00 * tempMatrix [ n ] [ i ] ; } } tempMatrix [ m ] [ i ] = tempMatrix [ n ] [ i ] ; tempMatrix [ tempnode ] [ len ] = tempMatrix [ n ] [ i ] ; tempMatrix [ len ] [ tempnode ] = - NUM00 * tempMatrix [ n ] [ i ] ; tempMatrix [ i ] [ m ] = - NUM00 * tempMatrix [ n ] [ i ] ; if ( m > len ) { tempMatrix [ m ] [ m - NUM00 ] = - NUM00 * tempMatrix [ n ] [ i ] ; } tempMatrix [ n ] [ i ] = NUM00 ; tempMatrix [ i ] [ n ] = NUM00 ; graphMatrix = tempMatrix ; } else { graphMatrix [ i ] [ n ] = - NUM00 * graphMatrix [ n ] [ i ] ; } } } } }
public static $F96 asUnsignedByteArray ( BigInteger value ) { $F1208 ( bytes , value ) if $F41780 ( bytes ) $F41781 ( tmp , bytes , System ) return bytes ; }
public static TestResult execJavac ( String toCompile , File dir , String jflexTestVersion ) { Project p = new Project $F72 ; Javac javac = new Javac $F72 ; Path path = new Path ( p , dir . toString ( ) ) ; javac . setProject ( p ) ; javac . setSrcdir ( path ) ; javac . setDestdir ( dir ) ; javac . setTarget ( javaVersion ) ; javac . setSource ( javaVersion ) ; javac . setSourcepath ( new Path ( p , NUM00 ) ) ; javac . setIncludes ( toCompile ) ; Path classPath = javac . createClasspath ( ) ; classPath . setPath ( $F79855 ( System ) + jflexTestVersion + NUM00 + jflexTestVersion + NUM00 ) ; $F1538 ( out ) PrintStream outSafe = System . err ; System . setErr ( new PrintStream ( out ) ) ; try { $F1699 ( javac ) return new TestResult ( out . toString ( ) , _BOOL ) ; } catch ( BuildException e ) { return new TestResult ( e + System . getProperty ( NUM00 ) + out . toString ( ) , _BOOL ) ; } finally { System . setErr ( outSafe ) ; } }
$F128244 ( LockSupport , this , Thread )
public static CLPlatform [ ] listGPUPoweredPlatforms $F72 { CLPlatform [ ] platforms = listPlatforms ( ) ; List < CLPlatform > out = new ArrayList < CLPlatform > ( platforms . length ) ; for ( CLPlatform platform : platforms ) { if ( platform . listGPUDevices ( _BOOL ) . length > NUM00 ) out . add ( platform ) ; } return out . toArray ( new CLPlatform $F2313 ( out ) ) ; }
public ActionRequestHelper dependsOn ( ActionRequestHelper dependency ) $F18637 ( mDependencies , dependency , this )
static boolean isDate ( Object obj ) { return obj instanceof Date && obj . getClass ( ) == $F271637 ; }
public static String toXml ( final Config toConvert , Boolean prettyXml ) throws JAXBException , IOException { String retVal = NUM00 ; try ( StringWriter writer = new StringWriter $F72 ) { toXml ( toConvert , writer , prettyXml ) ; $F6947 ( retVal , writer ) return retVal ; } }
private static List < Vector2D > buildQuadrilateral ( final Vector2D ... points ) { List < Vector2D > quadrilateral = new ArrayList < Vector2D > $F72 ; for ( Vector2D p : points ) $F2202 ( quadrilateral , p ) return quadrilateral ; }
private void heapifyUp ( int twopos , $F62936 cur ) { while ( twopos > NUM00 ) { final int parent = $F62939 ( twopos ) ; $F62936 par = twoheap [ parent ] ; if $F348512 ( cur , par ) $F5153 twoheap [ twopos ] = par ; twopos = parent ; } twoheap [ twopos ] = cur ; }
public void insert ( String key , char val ) { $F54852 ( len , key ) if ( freenode + len > eq . length ) { redimNodeArrays ( eq . length + BLOCK_SIZE ) ; } char strkey [ ] = new char [ len -- ] ; $F16116 ( key , len , strkey ) strkey [ len ] = NUM00 ; root = insert ( root , strkey , NUM00 , val ) ; }
$F75659 ( takeLock , putLock )
private static boolean isSubFormat ( String filename ) { for ( String ext : SUB_EXTENSIONS ) { if ( filename . contains ( NUM00 + ext ) ) { return _BOOL ; } } return _BOOL ; }
void write ( Environment env , DataOutputStream out , ConstantPool tab ) throws IOException { out . writeByte ( CONSTANT_NAMEANDTYPE ) ; out . writeShort ( tab . index ( name ) ) ; out . writeShort ( tab . index ( type ) ) ; }
public static void initializeProperties ( Properties properties , boolean reset , boolean withDefaults ) { Properties defaultProp = null ; if ( withDefaults ) { SSOToken $F155394 ( appToken , AccessController , AdminTokenAction ) ; defaultProp = ServerConfiguration . getDefaults ( appToken ) ; } PropertiesHolder oldProps ; PropertiesHolder newProps ; do { $F16478 ( oldProps , propertiesHolderRef ) $F859 ( combined ) if ( defaultProp != null ) $F96492 ( combined , defaultProp ) if ( ! reset ) { combined . putAll ( oldProps . properties ) ; } combined . putAll ( properties ) ; newProps = new PropertiesHolder ( Maps . fromProperties ( combined ) ) ; } while $F59753 ( propertiesHolderRef , oldProps , newProps ) ; }
public void addNetworkListener ( final NetworkListener listener ) $F207 ( networkListeners , listener )
public static void appendContentPrefix ( HttpServletRequest request , Appendable urlBuffer ) throws IOException $F16625 ( appendContentPrefix , request , urlBuffer )
public void addErrorListener ( final ErrorListener errorListener ) { if ( errorListeners == null ) { errorListeners = new ArrayList < ErrorListener > $F72 ; } errorListeners . add ( errorListener ) ; }
private void validateClassName ( String className ) { $F9652 ( nvalue , className ) if $F129995 ( nvalue , CLASS_RE ) { throw PropertyException . illegalPropertyValueException ( this , className ) ; } }
public static void importBaseTypes ( final CConnection connection , final int rawModuleId , final int moduleId ) throws SQLException { final String query = NUM00 + CTableNames . BASE_TYPES_TABLE + NUM00 + moduleId + NUM00 + NUM00 + String . format ( CTableNames . RAW_BASE_TYPES , rawModuleId ) ; connection . executeUpdate ( query , _BOOL ) ; final String updateSequence = String . format ( NUM00 + NUM00 , CTableNames . BASE_TYPES_TABLE , CTableNames . BASE_TYPES_TABLE ) ; connection . executeQuery ( updateSequence , _BOOL ) ; }
$F1431 public Object readMatrixOld ( Element node ) throws Exception { weka . core . Matrix matrix ; weka . core . matrix . Matrix matrixNew ; if ( DEBUG ) { trace ( $F219728 , node . getAttribute ( ATT_NAME ) ) ; } m_CurrentNode = node ; matrixNew = ( weka . core . matrix . Matrix ) readMatrix ( node ) ; matrix = new weka . core . Matrix ( matrixNew . getArrayCopy ( ) ) ; return matrix ; }
public void recordFileSystemOperation ( DbClient dbClient , OperationTypeEnum opType , Operation . Status status , Object ... extParam ) { try { boolean opStatus = ( Operation . Status . ready == status ) ? _BOOL : _BOOL ; String evType ; evType = opType . getEvType ( opStatus ) ; $F137633 ( evDesc , opType ) String opStage = AuditLogManager . AUDITOP_END ; _logger . info ( NUM00 , opType . toString ( ) , $F5528 ( evType ) + evDesc ) ; URI uri = ( URI ) extParam [ NUM00 ] ; recordBourneFileSystemEvent ( dbClient , evType , status , evDesc , uri ) ; auditFile ( dbClient , opType , opStatus , opStage , uri . toString ( ) ) ; } catch ( Exception e ) { _logger . error ( $F89018 ( opType , e ) ) ; } }
public CoreTokenException ( int errorCode ) { this . errorCode = errorCode ; $F152042 ( this , getLocalizedMessage , Locale ) }
public DExamineSsl ( JFrame parent , KseFrame kseFrame ) { super ( parent , res . getString ( NUM00 ) , Dialog . ModalityType . DOCUMENT_MODAL ) ; this . kseFrame = kseFrame ; initComponents ( ) ; }
private static $F3803 computeDynamicVMArgs ( IJavaProject javaProject ) { $F8728 ( out ) String devJarPath = maybeGetDevJarPath ( javaProject ) ; if $F4012 ( devJarPath ) { $F162500 ( out , devJarPath ) } return out ; }
static void normalize ( StringBuilder number ) { String $F57584 ( normalizedNumber , normalize , number ) ; number . replace ( NUM00 , number . length ( ) , normalizedNumber ) ; }
public $F1986 skipTo ( final int index ) throws MathIllegalArgumentException { if ( index == NUM00 ) { $F9952 ( Arrays , x ) } else { final int i = index - NUM00 ; final long grayCode = i ^ ( i > > NUM00 ) ; for ( $F119 ( j , dimension ) ) { long result = NUM00 ; for ( $F9993 ( k , BITS ) ) { final long shift = grayCode > > ( k - NUM00 ) ; $F7256 ( shift ) final long ik = shift & NUM00 ; result ^= ik * direction [ j ] [ k ] ; } x [ j ] = result ; } } count = index ; return nextVector ( ) ; }
public void removeOrganizationConfiguration $F22381 ( orgName , groupName , checkLegacyMode ) throws $F16995 { if ( ( groupName == null ) || $F1276 ( groupName ) ) { groupName = SMSUtils . DEFAULT ; } String orgdn = DNMapper . orgNameToDN ( orgName ) ; validateSCM ( ) ; String odn = scm . constructServiceConfigDN ( groupName , CreateServiceConfig . ORG_CONFIG_NODE , orgdn ) ; $F17013 ( cEntry , CachedSMSEntry , token , odn ) if ( cEntry . isNewEntry ( ) ) $F932 if ( checkLegacyMode && ServiceManager . isCoexistenceMode ( ) && groupName . equalsIgnoreCase ( SMSUtils . DEFAULT ) ) { OrgConfigViaAMSDK amsdk = new OrgConfigViaAMSDK ( token , DNMapper . realmNameToAMSDKName ( orgdn ) , orgdn ) ; amsdk . unassignService ( serviceName ) ; } if ( ! cEntry . isNewEntry ( ) ) { SMSEntry entry = cEntry . getClonedSMSEntry ( ) ; entry . delete ( token ) ; cEntry . refresh ( entry ) ; } }
public void removeGroupListener ( final GroupListener listener ) $F106 ( groupListeners , listener )
public SetChangelogMapping $F68141 ( source , taskName , changelogPartitionNumber ) { super ( source ) ; setType ( TYPE ) ; setKey ( taskName ) ; $F141086 ( putMessageValue , CHANGELOG_VALUE_KEY , String , changelogPartitionNumber ) }
$F1 protected String extractKey ( final String name ) { final String key = unescape ( $F4019 ( name ) ) ; return key . equals ( NUM00 ) ? null : key ; }
private static float spacing ( MotionEvent event ) { $F49063 ( x , event ) $F49067 ( y , event ) return ( float ) $F25556 ( Math , x , y ) ; }
$F1431 public static $F9340 void transformStringMap ( $F2540 ( original ) , $F15232 ( map ) , $F39075 keyClass , $F197000 valueClass ) throws PreferenceException { Method parseKeyMethod = findParseMethod ( keyClass ) ; Method parseValueMethod = findParseMethod ( valueClass ) ; if ( $F272757 ( parseKeyMethod , parseValueMethod ) ) { for ( $F19318 ( toTransformEntry , original ) ) { try { Object transformedKey = parseKeyMethod . invoke ( null , toTransformEntry . getKey ( ) ) ; Object transformedValue = parseValueMethod . invoke ( null , toTransformEntry . getValue ( ) ) ; if ( $F39078 ( keyClass , transformedKey ) && $F39078 ( valueClass , transformedValue ) ) { map . put ( ( K ) transformedKey , ( V ) transformedValue ) ; } } catch ( Exception e ) { throw new PreferenceException ( $F27322 ( keyClass , valueClass ) , e ) ; } } } else if ( null == parseKeyMethod ) { throw new PreferenceException ( $F27322 ( keyClass , valueClass ) + NUM00 + keyClass . getName ( ) + NUM00 ) ; } else { throw new PreferenceException ( $F27322 ( keyClass , valueClass ) + NUM00 + valueClass . getName ( ) + NUM00 ) ; } }
public boolean grabInput $F72 { if $F58998 ( grabLog , PlatformLogger ) { grabLog . fine ( NUM00 , this ) ; } XToolkit . awtLock ( ) ; try { if ( XAwtState . getGrabWindow ( ) == this && XAwtState . isManualGrab ( ) ) { $F22806 ( grabLog ) return _BOOL ; } XBaseWindow prevGrabWindow = XAwtState . getGrabWindow ( ) ; final int eventMask = ( int ) ( XConstants . ButtonPressMask | XConstants . ButtonReleaseMask | XConstants . EnterWindowMask | XConstants . LeaveWindowMask | XConstants . PointerMotionMask | XConstants . ButtonMotionMask ) ; final int ownerEvents = NUM00 ; if ( ! XToolkit . getSunAwtDisableGrab ( ) ) { int ptrGrab = XlibWrapper . XGrabPointer ( XToolkit . getDisplay ( ) , getContentWindow ( ) , ownerEvents , eventMask , XConstants . GrabModeAsync , XConstants . GrabModeAsync , XConstants . None , ( XWM . isMotif ( ) ? XToolkit . arrowCursor : XConstants . None ) , XConstants . CurrentTime ) ; if ( ptrGrab != XConstants . GrabSuccess ) { XlibWrapper . XUngrabPointer ( XToolkit . getDisplay ( ) , XConstants . CurrentTime ) ; XAwtState . setGrabWindow ( null ) ; $F22806 ( grabLog ) return _BOOL ; } int keyGrab = XlibWrapper . XGrabKeyboard ( XToolkit . getDisplay ( ) , getContentWindow ( ) , ownerEvents , XConstants . GrabModeAsync , XConstants . GrabModeAsync , XConstants . CurrentTime ) ; if ( keyGrab != XConstants . GrabSuccess ) { XlibWrapper . XUngrabPointer ( XToolkit . getDisplay ( ) , XConstants . CurrentTime ) ; XlibWrapper . XUngrabKeyboard ( XToolkit . getDisplay ( ) , XConstants . CurrentTime ) ; XAwtState . setGrabWindow ( null ) ; $F22806 ( grabLog ) return _BOOL ; } } if ( prevGrabWindow != null ) { prevGrabWindow . ungrabInputImpl ( ) ; } XAwtState . setGrabWindow ( this ) ; $F22806 ( grabLog ) return _BOOL ; } finally { XToolkit . awtUnlock ( ) ; } }
public ComponentManager ( Collection < Sequence > generalSeeds ) { Set < Sequence > seedSet = new $F22301 $F716 ( generalSeeds ) ; seedSet . addAll ( generalSeeds ) ; this . gralSeeds = Collections . unmodifiableSet ( seedSet ) ; gralComponents = new SequenceCollection ( seedSet ) ; }
public synchronized void deleteObservers $F72 $F9096 ( observers )
public static $F96 unsynchronize $F97 ( abySource ) { $F5950 ( input , abySource ) ByteArrayOutputStream $F59025 ( output , abySource ) ; int count = NUM00 ; while $F2892 ( input ) { $F7468 ( firstByte , input ) count ++ ; output . write ( firstByte ) ; if ( ( firstByte & MPEGFrameHeader . SYNC_BYTE1 ) == MPEGFrameHeader . SYNC_BYTE1 ) { if $F2892 ( input ) { $F46282 ( input ) $F7468 ( secondByte , input ) if ( ( secondByte & MPEGFrameHeader . SYNC_BYTE2 ) == MPEGFrameHeader . SYNC_BYTE2 ) { if $F14148 ( logger , Level ) { $F150605 ( logger , count ) } $F25097 ( output ) } else if ( secondByte == NUM00 ) { if $F14148 ( logger , Level ) { $F150605 ( logger , count ) } $F25097 ( output ) } $F2268 ( input ) } } } if ( ( $F8528 ( abySource ) & MPEGFrameHeader . SYNC_BYTE1 ) == MPEGFrameHeader . SYNC_BYTE1 ) { $F47560 ( logger ) $F25097 ( output ) } $F11316 ( output ) }
private $F96 calculateGeneralEncryptionKey ( $F96 userPassword , $F96 firstDocIdValue , int keyBitLength , int revision , $F96 oValue , int pValue , boolean encryptMetadata ) throws GeneralSecurityException { $F172325 ( paddedPassword , padPassword , userPassword ) MessageDigest md5 = createMD5Digest ( ) ; $F2268 ( md5 ) md5 . update ( paddedPassword ) ; md5 . update ( oValue ) ; md5 . update ( $F8046 ( pValue ) ) ; md5 . update ( $F11788 ( pValue ) ) ; md5 . update ( $F11788 ( pValue ) ) ; md5 . update ( $F8043 ( pValue ) ) ; if ( firstDocIdValue != null ) $F7469 ( md5 , firstDocIdValue ) if ( revision >= NUM00 && ! encryptMetadata ) { for ( $F809 ( i ) ) { md5 . update ( $F19905 ) ; } } $F294889 ( hash , md5 ) final int keyLen = revision == NUM00 ? NUM00 : ( keyBitLength / NUM00 ) ; $F4727 ( key , keyLen ) if ( revision >= NUM00 ) { for ( $F809 ( i ) ) { md5 . update ( hash , NUM00 , key . length ) ; digestTo ( md5 , hash ) ; } } $F5634 ( System , hash , key ) return key ; }
public MessageCapture ( final Logger logger , final boolean captureEntity ) { this ( logger , captureEntity , _BOOL ) ; }
public static final $F96 unzip $F97 ( in ) throws IOException { ByteArrayOutputStream outStream = new ByteArrayOutputStream ( EXPECTED_COMPRESSION_RATIO * in . length ) ; GZIPInputStream inStream = new GZIPInputStream $F24702 ( in ) ; $F2175 ( buf , BUF_SIZE ) while ( _BOOL ) { $F83249 ( size , inStream , buf ) $F137919 ( size ) $F11584 ( outStream , buf , size ) } $F59 ( outStream ) $F11316 ( outStream ) }
public static void insertIntoCombo ( JComboBox combo , Object item ) { MutableComboBoxModel model = ( MutableComboBoxModel ) combo . getModel ( ) ; if $F324566 ( model ) { model . insertElementAt ( item , NUM00 ) ; $F665 } Object o = model . getElementAt ( NUM00 ) ; $F7224 ( o , item ) model . removeElement ( item ) ; model . insertElementAt ( item , NUM00 ) ; $F53383 ( combo ) }
public synchronized Object co_entry_pause ( int thisCoroutine ) throws $F87317 { if $F87318 ( m_activeIDs , thisCoroutine ) throw new $F87317 $F72 ; while ( m_nextCoroutine != thisCoroutine ) { try $F5795 ( wait ) catch ( $F87326 e ) $F845 } return m_yield ; }
private boolean pythonErrorIn ( String output ) { boolean isError = _BOOL ; $F6542 ( outputMultiline , output ) Matcher errorMatcher ; for ( String row : outputMultiline ) { errorMatcher = errorInLastLine . matcher ( row ) ; if ( errorMatcher . find ( ) == _BOOL ) $F3468 ( isError , _BOOL ) } return isError ; }
public static String numberToString ( Number number ) throws JSONException { if ( number == null ) $F19954 $F23206 ( doubleValue , number ) JSON . checkDouble ( doubleValue ) ; if $F1238 ( number , NEGATIVE_ZERO ) $F2455 $F14662 ( longValue , number ) if $F23208 ( doubleValue , longValue ) $F23210 ( Long , longValue ) $F92 ( number ) }
public static $F2539 strToMap ( String str , String delim , boolean trim , String pairsSeparator ) { $F1275 ( str ) $F13404 ( decodedMap ) $F13406 ( elements , split , str , delim ) pairsSeparator = pairsSeparator == null ? NUM00 : pairsSeparator ; for ( String s : elements ) { $F13406 ( e , split , s , pairsSeparator ) if $F6887 ( e ) $F1448 $F13410 ( name , e ) $F13410 ( value , e ) if ( trim ) { $F13412 ( name ) $F13412 ( value ) } try { decodedMap . put ( URLDecoder . decode ( name , NUM00 ) , URLDecoder . decode ( value , NUM00 ) ) ; } catch ( UnsupportedEncodingException e1 ) $F13419 ( Debug , e1 , module ) } return decodedMap ; }
public void doStressTest ( TempTripleStore tmp , InferenceEngine inf , int ntrials , int D , int N ) { AbstractTripleStore store = inf . database ; assertSameGraphs ( tmp , store ) ; for ( $F119 ( trial , ntrials ) ) { MDC . put ( NUM00 , NUM00 + trial ) ; retractAndAssert ( inf , store , NUM00 , D , N ) ; assertSameGraphs ( tmp , store ) ; $F36382 ( MDC ) } }
public $F28904 keySet $F72 { return Collections . unmodifiableSet ( map . keySet ( ) ) ; }
public void onStart $F72 { if ( mAudioMirrorBuffer == null ) $F46946 ( mAudioMirrorBuffer ) if ( mStreamer != null ) $F28175 ( mStreamer ) if ( mInsecureStreamer != null ) $F28175 ( mInsecureStreamer ) }
$F1431 public PropagationImp ( $F138696 lineage , boolean serial , long timeout ) { serial_ = serial ; lineage_ = ( $F138696 ) lineage . clone ( ) ; timeout_ = timeout ; }
public NativeRunner ( File eclipsec ) $F36568 ( this , Objects , eclipsec )
private static String indent ( final int height ) { return CoreBaseBOp . indent ( height ) ; }
public static Calendar reduceCalendar ( Calendar calendar ) { $F104560 ( calendar , Calendar ) $F118884 ( calendar , Calendar ) $F118882 ( calendar , Calendar ) calendar . set ( Calendar . HOUR , NUM00 ) ; $F118880 ( calendar , Calendar ) return calendar ; }
public static String surround $F1947 ( string , prefix , suffix ) { if ( string . startsWith ( prefix ) == _BOOL ) { string = prefix + string ; } if ( string . endsWith ( suffix ) == _BOOL ) { string += suffix ; } return string ; }
public static Coordinate ptNotInList ( $F19578 testPts , $F19578 pts ) { for ( $F1139 ( i , testPts ) ) { Coordinate testPt = testPts [ i ] ; if ( ! isInList ( testPt , pts ) ) return testPt ; } $F1274 }
public static String trimOrPad $F41200 ( str , length , padChar ) { String result ; if ( str == null ) { result = NUM00 ; } else { result = str ; } if $F14791 ( result , length ) $F35299 ( result , length ) while $F62004 ( result , length ) { result += padChar ; } return result ; }
void scheduleToTimerPool $F72 { if ( sessionPollerPool . isPollingEnabled ( ) ) { long timeoutTime = ( session . getLatestRefreshTime ( ) + ( session . getMaxIdleTime ( ) * NUM00 ) ) * NUM00 ; if ( sessionPollerPool . getCacheBasedPolling ( ) ) { timeoutTime = Math . min ( ( session . getLatestRefreshTime ( ) + ( session . getMaxCachingTime ( ) * NUM00 ) ) * NUM00 , timeoutTime ) ; } rescheduleIfWillTimeOutBeforeExecution ( timeoutTime ) ; } else { if ( ( sessionPollerPool . isSessionCleanupEnabled ( ) ) && willExpire ( session . getMaxSessionTime ( ) ) ) { long timeoutTime = ( session . getLatestRefreshTime ( ) + ( session . getMaxSessionTime ( ) * NUM00 ) ) * NUM00 ; rescheduleIfWillTimeOutBeforeExecution ( timeoutTime ) ; } } }
public void resetPolicy $F72 { mPreferences . putString ( PREF_LAST_RESPONSE , Integer . toString ( Policy . RETRY ) ) ; setRetryUntil ( DEFAULT_RETRY_UNTIL ) ; setMaxRetries ( DEFAULT_MAX_RETRIES ) ; setRetryCount ( Long . parseLong ( DEFAULT_RETRY_COUNT ) ) ; setValidityTimestamp ( DEFAULT_VALIDITY_TIMESTAMP ) ; $F17621 ( mPreferences ) }
public CipherParameters decrypt $F5474 ( in , keyLen ) { return $F132139 ( decrypt , in , keyLen ) ; }
private static void logOsInfo $F72 { Logger . appendLog ( NUM00 + Cfg . getOs ( ) ) ; Logger . appendLog ( NUM00 + Os . getOsName ( ) ) ; Logger . appendLog ( NUM00 + Os . platform ( ) ) ; Logger . appendLog ( NUM00 + System . getProperty ( NUM00 ) ) ; Logger . appendLog ( NUM00 + HostInfo . availableCpus ( ) ) ; Logger . appendLog ( NUM00 + HostInfo . getMaxMemory ( ) + NUM00 ) ; }
private void beforeValue $F72 throws JSONException { $F19233 ( stack ) Scope context = peek ( ) ; if ( context == Scope . EMPTY_ARRAY ) { replaceTop ( Scope . NONEMPTY_ARRAY ) ; newline ( ) ; } else if ( context == Scope . NONEMPTY_ARRAY ) { $F84 ( out ) newline ( ) ; } else if ( context == Scope . DANGLING_KEY ) { out . append ( indent == null ? NUM00 : NUM00 ) ; replaceTop ( Scope . NONEMPTY_OBJECT ) ; } else if ( context != Scope . NULL ) $F19954 }
public static $F96 hash ( String input ) { if $F20899 ( TextUtils , input ) { try { $F151317 ( inputBytes , input ) return hash ( inputBytes ) ; } catch ( UnsupportedEncodingException e ) { Log . e ( TAG , $F6165 ( input , e ) , e ) ; } } $F1274 }
public static String generateTransportZoneNativeGuid $F1947 ( transportType , deviceType , fabricId ) { return String . format ( NUM00 , transportType , _deviceTypeMap . get ( deviceType ) , fabricId ) ; }
public void testAddServletWithNameAndJspFile $F72 throws Exception { String xml = WEBAPP_TEST_HEADER + NUM00 + NUM00 ; $F168856 ( webXml , WebXmlIo , xml , getEntityResolver ) WebXmlUtils . addJspFile ( webXml , NUM00 , NUM00 ) ; assertTrue ( WebXmlUtils . hasServlet ( webXml , NUM00 ) ) ; }
$F1 public boolean equalsValue ( final Object other ) { return Objects . equals ( this . value , other ) ; }
public static void error ( String msg , Throwable t ) { debugInst . debug ( IDebug . ERROR , msg , t ) ; }
public void removeEventListener ( SIPTransactionEventListener oldListener ) $F106 ( eventListeners , oldListener )
public static ExecutionSystem newExecutionSystem ( URI uri , $F6253 ( env ) ) throws IOException $F25228 ( newExecutionSystem , uri , env )
public static boolean isCommand ( IElementType type ) { return type == SQFTypes . COMMAND_TOKEN || type == SQFTypes . COMMAND || type == SQFTypes . CASE || type == SQFTypes . CASE_COMMAND ; }
public void send ( XTraceReport report ) $F1614 ( outgoing , report )
$F125711 ( _BOOL ) public static boolean startsWithConcatenation ( $F1113 String string , $F1113 String ... prefixes ) { int offset = NUM00 ; for ( String prefix : prefixes ) { $F1749 ( prefixLen , prefix ) if ( ! string . regionMatches ( offset , prefix , NUM00 , prefixLen ) ) { return _BOOL ; } offset += prefixLen ; } return _BOOL ; }
private static $F7465 ( msg , startpos , count , len , idx , ch , isDigit )
public void testOrderedByDatatype $F72 throws Exception { int lastType = Integer . MIN_VALUE ; while $F1682 ( typeInfoRs ) { $F21024 ( name , typeInfoRs ) $F15339 ( type , typeInfoRs ) assertTrue ( NUM00 + type + NUM00 + name + NUM00 + lastType , type >= lastType ) ; lastType = type ; } }
$F23145 ( measureSpec , result , specMode , MeasureSpec , specSize , mRadius , getPaddingTop , getPaddingBottom , Math )
public boolean fireMapMouseClicked ( MouseEvent evt ) { $F22808 ( DEBUG , logger ) clickHappened = _BOOL ; boolean consumed = _BOOL ; evt = new MapMouseEvent ( getParentMode ( ) , evt ) ; if ( priorityListener != null && evt . getClickCount ( ) > NUM00 ) { priorityListener . mouseClicked ( evt ) ; consumed = _BOOL ; } priorityListener = null ; if ( proxy == null || evt . isShiftDown ( ) || ( proxyDistributionMask & PROXY_DISTRIB_MOUSE_CLICKED ) > NUM00 ) { Iterator < MapMouseListener > it = iterator ( ) ; while ( it . hasNext ( ) && ! consumed ) { MapMouseListener target = it . next ( ) ; consumed = target . mouseClicked ( evt ) && consumeEvents ; $F65989 ( consumed , priorityListener , target ) } } boolean ignoreConsumed = ! consumed || ( consumed && $F84469 ( proxyDistributionMask , PROXY_ACK_CONSUMED_MOUSE_CLICKED ) ) ; if ( proxy != null && ignoreConsumed && $F136083 ( evt ) ) { proxy . mouseClicked ( evt ) ; consumed = _BOOL ; } return consumed ; }
public static String formatSqlValues ( String ... values ) { $F4000 ( builder ) for ( $F1139 ( i , values ) ) { $F34674 ( i , builder ) $F84 ( builder ) $F29840 ( builder , escapeSqlString , values , i ) $F84 ( builder ) } $F84 ( builder ) $F92 ( builder ) }
private void emitClass ( DocComment comment ) { String tagName = ( comment . getType ( ) == DocComment . CLASS ) ? NUM00 : NUM00 ; $F84 ( xml ) xml . append ( tagName ) ; $F84 ( xml ) $F167270 ( xml , comment ) $F84 ( xml ) xml . append ( comment . getFullname ( ) ) ; String sourcefile = comment . getSourceFile ( ) ; $F20974 ( sourcefile , xml ) $F84 ( xml ) xml . append ( comment . getNamespace ( ) ) ; $F84 ( xml ) xml . append ( comment . getAccess ( ) ) ; $F84 ( xml ) if ( comment . getType ( ) == DocComment . INTERFACE ) { $F806 baseClasses = comment . getBaseclasses ( ) ; if ( baseClasses != null ) { $F84 ( xml ) for ( $F1139 ( i , baseClasses ) ) { String baseclass = baseClasses [ i ] ; if ( baseclass != null ) { $F28333 ( i , xml ) xml . append ( baseclass ) ; } } $F84 ( xml ) } } else { $F84 ( xml ) xml . append ( comment . getBaseClass ( ) ) ; $F84 ( xml ) $F806 interfaces = comment . getInterfaces ( ) ; if ( interfaces != null ) { $F84 ( xml ) for ( $F1139 ( i , interfaces ) ) { String inter = interfaces [ i ] ; if ( inter != null ) { $F28333 ( i , xml ) xml . append ( inter ) ; } } $F84 ( xml ) } } $F84 ( xml ) xml . append ( comment . isFinal ( ) ) ; $F84 ( xml ) $F84 ( xml ) xml . append ( comment . isDynamic ( ) ) ; $F84 ( xml ) $F84 ( xml ) $F137633 ( desc , comment ) if ( desc != null ) appendTag ( NUM00 , comment . getDescription ( ) ) ; emitTags ( comment . getAllTags ( ) ) ; if ( comment . getMetadata ( ) != null ) emitMetadata ( comment . getMetadata ( ) ) ; $F84 ( xml ) xml . append ( tagName ) ; $F84 ( xml ) }
protected void paintContentBorderTopEdge ( Graphics g , int x , int y , int w , int h , boolean drawBroken , Rectangle selRect , boolean isContentBorderPainted ) { if ( isContentBorderPainted ) { g . setColor ( selectHighlight ) ; g . fillRect ( x , y , w - NUM00 , NUM00 ) ; } }
public void analyzeAllItAndWriteResults $F72 { RunResultsLoader runDir = new RunResultsLoader ( runDirectory , null ) ; PrintStream stream ; try { stream = new PrintStream ( $F33731 ( outputDir ) ) ; } catch ( FileNotFoundException e ) { $F301 ( e ) $F665 } String header = NUM00 ; stream . println ( header ) ; double totalTTIt ; $F1986 avgRouteTTsIt ; $F2027 routeUsersIt ; for ( $F9993 ( i , lastIteration ) ) { $F8817 ( log , i , lastIteration ) String eventsFilename = runDir . getEventsFilename ( i ) ; EventsManager eventsManager = new EventsManagerImpl $F72 ; TtAnalyzeBraess handler = new TtAnalyzeBraess $F72 ; eventsManager . addHandler ( handler ) ; MatsimEventsReader reader = new MatsimEventsReader ( eventsManager ) ; reader . readFile ( eventsFilename ) ; totalTTIt = handler . getTotalTT ( ) ; avgRouteTTsIt = handler . calculateAvgRouteTTs ( ) ; routeUsersIt = handler . getRouteUsers ( ) ; $F280 ( line ) line . append ( i + NUM00 + totalTTIt ) ; for ( $F6268 ( j ) ) { $F25648 ( line , routeUsersIt , j ) } for ( $F6268 ( j ) ) { $F25648 ( line , avgRouteTTsIt , j ) } $F144975 ( stream , line ) } $F59 ( stream ) $F60651 ( log , lastIteration ) }
public int executeUpdate ( String sql ) throws SQLException { return Util . truncateAndConvertToInt ( executeLargeUpdate ( sql ) ) ; }
$F160927 static long currentThreadTimeMillis $F72 { $F21879 ( System ) }
public static Entry makeEntry $F24643 ( ldifLines ) { return $F182030 ( makeEntry , ldifLines ) ; }
void clearParserHighlights $F72 { for ( $F2277 ( i , parserHighlights ) ) { $F16628 ( tag , parserHighlights , i ) if ( tag instanceof LayeredHighlightInfo ) { LayeredHighlightInfo lhi = ( LayeredHighlightInfo ) tag ; if ( lhi . width > NUM00 && lhi . height > NUM00 ) { textArea . repaint ( $F941 ( lhi ) ) ; } } else { HighlightInfo info = ( HighlightInfo ) tag ; TextUI ui = textArea . getUI ( ) ; ui . damageRange ( textArea , info . getStartOffset ( ) , info . getEndOffset ( ) ) ; } } $F725 ( parserHighlights ) }
$F1 public final short readShort $F72 throws IOException { $F52634 ( dis , work ) return ( short ) ( $F169749 ( work ) | $F18896 ( work ) ) ; }
public int format $F95906 ( val , buf , off , len ) { if ( val == Integer . MIN_VALUE ) { if ( len > ByteFormatter . NUMBER_BASE ) { return format ( NUM00 , buf , off , len ) ; } else { truncationFiller ( buf , off , len ) ; return off + len ; } } $F5422 ( pos , Math , val ) int ndig = NUM00 ; int dmax = ByteFormatter . NUMBER_BASE ; while ( ndig < ByteFormatter . NUMBER_BASE && pos >= dmax ) { ndig ++ ; dmax *= ByteFormatter . NUMBER_BASE ; } if ( val < NUM00 ) { ndig ++ ; } if ( ndig > len || ndig > buf . length - off ) { truncationFiller ( buf , off , len ) ; return off + len ; } off += ndig ; int xoff = off - NUM00 ; do { buf [ xoff ] = ByteFormatter . DIGITS [ pos % ByteFormatter . NUMBER_BASE ] ; xoff -- ; pos /= ByteFormatter . NUMBER_BASE ; } while ( pos > NUM00 ) ; if ( val < NUM00 ) { buf [ xoff ] = $F74671 ; } return off ; }
public void append ( char $F184368 ) { int maxlength = buffer . length - pos ; if ( c . length < maxlength ) $F181805 ( System , c , buffer , pos ) else { $F6483 ( System , c , buffer , pos , maxlength ) curr . next = new Entity ( buffer ) ; curr = curr . next ; length += buffer . length ; buffer = new char [ ( buffer . length > c . length - maxlength ) ? buffer . length : c . length - maxlength ] ; if ( c . length > maxlength ) { System . arraycopy ( c , maxlength , buffer , NUM00 , c . length - maxlength ) ; pos = c . length - maxlength ; } else { pos = NUM00 ; } } }
public static boolean hasPermission ( Security security , GenericValue userLogin , GenericValue orderHeader ) { $F133007 ( userLogin , orderHeader , _BOOL ) if ( security . hasEntityPermission ( NUM00 , NUM00 , userLogin ) ) { return _BOOL ; } else if ( security . hasEntityPermission ( NUM00 , NUM00 , userLogin ) ) { $F6261 orderRoles = null ; try { orderRoles = orderHeader . getRelated ( NUM00 , UtilMisc . toMap ( $F86073 ( userLogin ) ) , null , _BOOL ) ; } catch ( GenericEntityException e ) { $F48322 ( Debug , e , module ) } if $F35028 ( UtilValidate , orderRoles ) { return _BOOL ; } } return _BOOL ; }
private boolean isAnnotation $F72 $F132975 ( implInterfaces )
public final boolean isExceptionHandlerEquivalent ( BasicBlock other ) { if ( exceptionHandlers != other . exceptionHandlers ) { $F32409 e1 = getExceptionHandlers ( ) ; $F32409 e2 = other . getExceptionHandlers ( ) ; while $F1444 ( e1 ) { if ( ! e2 . hasMoreElements ( ) ) return _BOOL ; if ( e1 . nextElement ( ) != e2 . nextElement ( ) ) return _BOOL ; } if $F1444 ( e2 ) return _BOOL ; } return _BOOL ; }
$F60268 ( name )
public int checksum $F72 { $F17718 ( calculateChecksum , compile_checksum ) }
public boolean longLabel $F72 { return fState . longLabel ; }
public SecretBlock ( Mario player , Group parent , int stageZone , float xPos , float yPos , float yoloWidth , Image ... hitState ) { super ( BLOCK_COLLISION_DATA , xPos , yPos , NUM00 , NUM00 , ( Image ) null ) ; this . hitState = hitState [ NUM00 ] ; yoloView = new ImageView ( hitState [ NUM00 ] ) ; yoloView . setFitWidth ( yoloWidth ) ; this . parent = parent ; zone = stageZone ; }
private Socket openDataConnection ( String cmd ) throws sun . net . ftp . FtpProtocolException , IOException { Socket clientSocket ; if ( passiveMode ) { try $F4915 ( openPassiveDataConnection , cmd ) catch ( sun . net . ftp . FtpProtocolException e ) { $F105671 ( errmsg , e ) if ( $F132005 ( errmsg ) ) { throw e ; } } } ServerSocket portSocket ; InetAddress myAddress ; String portCmd ; if ( proxy != null && proxy . type ( ) == Proxy . Type . SOCKS ) { throw new sun . net . ftp . FtpProtocolException $F580 ; } portSocket = new ServerSocket ( NUM00 , NUM00 , server . getLocalAddress ( ) ) ; try { myAddress = portSocket . getInetAddress ( ) ; if ( myAddress . isAnyLocalAddress ( ) ) { myAddress = server . getLocalAddress ( ) ; } portCmd = NUM00 + ( ( myAddress instanceof Inet6Address ) ? NUM00 : NUM00 ) + NUM00 + myAddress . getHostAddress ( ) + NUM00 + portSocket . getLocalPort ( ) + NUM00 ; if $F85011 ( issueCommand , portCmd , cmd ) { portCmd = NUM00 ; $F104513 ( addr , myAddress ) for ( $F1139 ( i , addr ) ) { portCmd = portCmd + ( addr [ i ] & NUM00 ) + NUM00 ; } portCmd = portCmd + ( ( portSocket . getLocalPort ( ) > > > NUM00 ) & NUM00 ) + NUM00 + ( portSocket . getLocalPort ( ) & NUM00 ) ; issueCommandCheck ( portCmd ) ; issueCommandCheck ( cmd ) ; } if ( connectTimeout >= NUM00 ) { portSocket . setSoTimeout ( connectTimeout ) ; } else { if ( defaultConnectTimeout > NUM00 ) { portSocket . setSoTimeout ( defaultConnectTimeout ) ; } } clientSocket = portSocket . accept ( ) ; if ( readTimeout >= NUM00 ) { clientSocket . setSoTimeout ( readTimeout ) ; } else { if ( defaultSoTimeout > NUM00 ) { clientSocket . setSoTimeout ( defaultSoTimeout ) ; } } } $F3229 ( portSocket ) if ( useCrypto ) { try { clientSocket = sslFact . createSocket ( clientSocket , serverAddr . getHostName ( ) , serverAddr . getPort ( ) , _BOOL ) ; } catch ( Exception ex ) { throw new IOException $F181782 ( ex ) ; } } return clientSocket ; }
public static boolean installNormal ( Context context , String filePath ) { Intent i = new Intent ( Intent . ACTION_VIEW ) ; $F1705 ( file , filePath ) if ( $F1905 ( file ) || $F48789 ( file ) || $F41726 ( file ) ) { return _BOOL ; } i . setDataAndType ( Uri . parse ( NUM00 + filePath ) , NUM00 ) ; $F111932 ( i , Intent ) context . startActivity ( i ) ; return _BOOL ; }
private void createInsertList ( final IItem item , List $F202648 tempList , List $F202648 insertList , int depth , int removed ) { if $F2200 ( tempList , item ) { tempList . add ( item ) ; if ( depth == NUM00 ) $F207 ( insertList , item ) if ( item . getItems ( ) != null ) { depth ++ ; for ( IItem child : item . getItems ( ) ) { createInsertList ( child , tempList , insertList , depth , removed ) ; } } } else { insertList . remove ( item ) ; removed ++ ; } }
$F1431 public int readOutlineFileMetadata ( final PdfObject OutlinesObj , final PdfObjectReader currentPdfFile ) { final int count = OutlinesObj . getInt ( PdfDictionary . Count ) ; final PdfObject FirstObj = OutlinesObj . getDictionary ( PdfDictionary . First ) ; currentPdfFile . checkResolved ( FirstObj ) ; if ( FirstObj != null ) { final Element root = OutlineDataXML . createElement ( NUM00 ) ; OutlineDataXML . appendChild ( root ) ; final int level = NUM00 ; readOutlineLevel ( root , currentPdfFile , FirstObj , level , _BOOL ) ; } return count ; }
private int decodeRunLength ( int k ) { if $F14827 ( k ) { return $F97528 ( k ) ^ NUM00 ; } else { return Integer . numberOfLeadingZeros ( k < < p + ( NUM00 - sp ) ) + NUM00 ; } }
$F68161 ( in , length , bytes , count , pos )
private boolean decodeHandshake ( ByteBuffer socketBufferNew ) { ByteBuffer socketBuffer ; if ( tmpHandshakeBytes . capacity ( ) == NUM00 ) { socketBuffer = socketBufferNew ; } else { if ( tmpHandshakeBytes . remaining ( ) < socketBufferNew . remaining ( ) ) { ByteBuffer buf = ByteBuffer . allocate ( tmpHandshakeBytes . capacity ( ) + socketBufferNew . remaining ( ) ) ; $F14257 ( tmpHandshakeBytes ) buf . put ( tmpHandshakeBytes ) ; tmpHandshakeBytes = buf ; } tmpHandshakeBytes . put ( socketBufferNew ) ; $F14257 ( tmpHandshakeBytes ) socketBuffer = tmpHandshakeBytes ; } $F115573 ( socketBuffer ) try { if ( draft == null ) { HandshakeState isflashedgecase = isFlashEdgeCase ( socketBuffer ) ; if ( isflashedgecase == HandshakeState . MATCHED ) { try { write ( ByteBuffer . wrap ( Charsetfunctions . utf8Bytes ( wsl . getFlashPolicy ( this ) ) ) ) ; close ( CloseFrame . FLASHPOLICY , NUM00 ) ; } catch ( InvalidDataException e ) { close ( CloseFrame . ABNORMAL_CLOSE , NUM00 , _BOOL ) ; } return _BOOL ; } } HandshakeState handshakestate = null ; try { if ( role == Role . SERVER ) { if ( draft == null ) { for ( Draft d : knownDrafts ) { d = d . copyInstance ( ) ; try { d . setParseMode ( role ) ; $F2268 ( socketBuffer ) $F317789 ( tmphandshake , d , socketBuffer ) if ( tmphandshake instanceof ClientHandshake == _BOOL ) $F317791 ( flushAndClose , CloseFrame , _BOOL ) ClientHandshake handshake = ( ClientHandshake ) tmphandshake ; handshakestate = d . acceptHandshakeAsServer ( handshake ) ; if ( handshakestate == HandshakeState . MATCHED ) { resourceDescriptor = handshake . getResourceDescriptor ( ) ; ServerHandshakeBuilder response ; try { response = wsl . onWebsocketHandshakeReceivedAsServer ( this , d , handshake ) ; } catch ( InvalidDataException e ) { flushAndClose ( e . getCloseCode ( ) , e . getMessage ( ) , _BOOL ) ; return _BOOL ; } catch ( RuntimeException e ) { wsl . onWebsocketError ( this , e ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , e . getMessage ( ) , _BOOL ) ; return _BOOL ; } write ( d . createHandshake ( d . postProcessHandshakeResponseAsServer ( handshake , response ) , role ) ) ; draft = d ; open ( handshake ) ; return _BOOL ; } } catch ( InvalidHandshakeException e ) $F845 } if ( draft == null ) { close ( CloseFrame . PROTOCOL_ERROR , NUM00 ) ; } return _BOOL ; } else { $F317789 ( tmphandshake , draft , socketBuffer ) if ( tmphandshake instanceof ClientHandshake == _BOOL ) $F317791 ( flushAndClose , CloseFrame , _BOOL ) ClientHandshake handshake = ( ClientHandshake ) tmphandshake ; handshakestate = draft . acceptHandshakeAsServer ( handshake ) ; if ( handshakestate == HandshakeState . MATCHED ) $F9278 ( open , handshake , _BOOL ) else { close ( CloseFrame . PROTOCOL_ERROR , NUM00 ) ; } return _BOOL ; } } else if ( role == Role . CLIENT ) { draft . setParseMode ( role ) ; $F317789 ( tmphandshake , draft , socketBuffer ) if ( tmphandshake instanceof ServerHandshake == _BOOL ) $F317791 ( flushAndClose , CloseFrame , _BOOL ) ServerHandshake handshake = ( ServerHandshake ) tmphandshake ; handshakestate = draft . acceptHandshakeAsClient ( handshakerequest , handshake ) ; if ( handshakestate == HandshakeState . MATCHED ) { try { wsl . onWebsocketHandshakeReceivedAsClient ( this , handshakerequest , handshake ) ; } catch ( InvalidDataException e ) { flushAndClose ( e . getCloseCode ( ) , e . getMessage ( ) , _BOOL ) ; return _BOOL ; } catch ( RuntimeException e ) { wsl . onWebsocketError ( this , e ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , e . getMessage ( ) , _BOOL ) ; return _BOOL ; } open ( handshake ) ; return _BOOL ; } else { close ( CloseFrame . PROTOCOL_ERROR , NUM00 + draft + NUM00 ) ; } } } catch ( InvalidHandshakeException e ) { close ( e ) ; } } catch ( IncompleteHandshakeException e ) { if ( tmpHandshakeBytes . capacity ( ) == NUM00 ) { $F2268 ( socketBuffer ) int newsize = e . getPreferedSize ( ) ; if ( newsize == NUM00 ) { newsize = socketBuffer . capacity ( ) + NUM00 ; } else { assert ( e . getPreferedSize ( ) >= socketBuffer . remaining ( ) ) ; } tmpHandshakeBytes = ByteBuffer . allocate ( newsize ) ; tmpHandshakeBytes . put ( socketBufferNew ) ; } else { $F45866 ( tmpHandshakeBytes ) $F239000 ( tmpHandshakeBytes ) } } return _BOOL ; }
public NoDuplicateValueGlobalConstraint ( AbstractParameter $F5162 ... parameters ) { $F37437 ( this , Arrays , parameters ) }
$F1431 public RhythmOverlay inflateOverlay ( String configString ) { $F3803 configStrings = $F34166 ( Arrays , configString ) ; return inflateOverlayInternal ( configStrings , Collections . EMPTY_MAP , NUM00 ) ; }
public static RevocationHash bruteForceHash ( $F96 seed , $F96 target , int maxChildTries , int maxSiblingTries ) { for ( $F119 ( i , maxChildTries ) ) { for ( $F119 ( j , maxSiblingTries ) ) { RevocationHash test = HashDerivation . calculateRevocationHash ( seed , NUM00 , j ) ; if ( Arrays . equals ( test . getSecretHash ( ) , target ) ) { return new RevocationHash ( i , j , test . getSecret ( ) , test . getSecretHash ( ) ) ; } } seed = Tools . hashSecret ( seed ) ; } $F1274 }
public FancyLoader ( ClassLoader parent ) { super ( parent ) ; try { mDexClass = parent . loadClass ( NUM00 ) ; } catch ( ClassNotFoundException cnfe ) $F845 }
public boolean isSourceModified ( Resource resource ) { boolean modified = _BOOL ; $F20605 ( fileName , resource ) $F123 ( path , templatePaths , fileName ) File currentFile = null ; for ( int i = NUM00 ; currentFile == null && i < paths . size ( ) ; i ++ ) { $F123 ( testPath , paths , i ) $F4453 ( testFile , testPath , fileName ) if $F351048 ( testFile ) { currentFile = testFile ; } } $F4453 ( file , path , fileName ) if ( currentFile == null || $F1905 ( file ) ) $F845 else if ( currentFile . equals ( file ) && file . canRead ( ) ) { modified = ( file . lastModified ( ) != resource . getLastModified ( ) ) ; } return modified ; }
protected void flip ( BufferCapabilities . FlipContents flipAction ) { if ( peer != null ) { Image backBuffer = getBackBuffer ( ) ; if ( backBuffer != null ) { peer . flip ( NUM00 , NUM00 , backBuffer . getWidth ( null ) , backBuffer . getHeight ( null ) , flipAction ) ; } } else $F4639 }
protected void loadValue ( String sValue ) { try { value = Byte . parseByte ( sValue . trim ( ) ) ; } catch ( NumberFormatException nfe ) $F5795 ( revertToDefault ) }
public static $F2539 allNamespaces ( SOAPElement ele ) { $F2539 nsList = new $F345384 $F72 ; log . trace ( NUM00 + ele . getNodeName ( ) ) ; allNamespaces ( ele , nsList ) ; $F49408 ( log , nsList ) return nsList ; }
private void drawHook ( Canvas canvas ) { $F6212 ( hookPath ) double sweepAngle = Math . PI / NUM00 * NUM00 ; float y = $F148723 ( Math , sweepAngle ) * ( getBigCircleRadius ( ) ) + $F180726 ( rectF ) ; float x = $F148722 ( Math , sweepAngle ) * ( getBigCircleRadius ( ) ) + $F77595 ( rectF ) ; $F263821 ( i , getBigCircleRadius ) hookPath . addRoundRect ( new RectF ( i + i / NUM00 , i + i / NUM00 , i + i / NUM00 + NUM00 , i + i + i / NUM00 ) , NUM00 , NUM00 , Path . Direction . CCW ) ; hookPath . addRoundRect ( new RectF ( i + i / NUM00 , ( i + i + i / NUM00 ) - NUM00 , i + i / NUM00 + i + i , i + i + i / NUM00 + NUM00 ) , NUM00 , NUM00 , Path . Direction . CCW ) ; $F28837 ( matrix ) $F2268 ( matrix ) int restoreCount = canvas . getSaveCount ( ) ; $F59 ( hookPath ) canvas . rotate ( - NUM00 , rectF . centerX ( ) , rectF . centerY ( ) ) ; canvas . drawPath ( hookPath , mHookPaint ) ; canvas . restoreToCount ( restoreCount ) ; }
public static $F96 toByteArray ( Bitmap bitmap , Bitmap . CompressFormat format , int quality ) { ByteArrayOutputStream out = null ; try { $F1659 ( out ) bitmap . compress ( format , quality , out ) ; $F11316 ( out ) } $F19458 ( CloseableUtils , out ) }
public void continueButtonActionPerformed $F72385 ( e ) { if ( testRunning && testSuspended ) { testSuspended = _BOOL ; if ( wrapTest ) { $F15121 ( statusText1 ) statusText1 . setVisible ( _BOOL ) ; } } }
$F79740 public int sceNetAdhocPtpFlush ( @ CheckArgument ( NUM00 ) int id , int timeout , int nonblock ) $F1083
public void reset $F72 $F5122 ( displayCache , cachedID )
private void copyDirectory ( File source , File dest ) throws IOException { for ( $F3445 ( f , source ) ) { $F5259 ( sourceFile , source , f ) $F5259 ( destFile , dest , f ) if $F3444 ( f ) { $F1907 ( destFile ) copyDirectory ( sourceFile , destFile ) ; } else copyFile ( sourceFile , destFile ) ; } }
private synchronized void rebuildJournal $F72 throws IOException { $F2727 ( mJournalWriter ) Writer writer = new BufferedWriter ( new FileWriter ( mJournalFileTmp ) , IO_BUFFER_SIZE ) ; writer . write ( MAGIC ) ; $F3410 ( writer ) writer . write ( VERSION_1 ) ; $F3410 ( writer ) $F3412 ( writer , Integer , mAppVersion ) $F3410 ( writer ) $F3410 ( writer ) for ( CacheEntry cacheEntry : mLruEntries . values ( ) ) { if ( cacheEntry . isUnderEdit ( ) ) { writer . write ( sACTION_LIST [ ACTION_DIRTY ] + NUM00 + cacheEntry . getKey ( ) + NUM00 + cacheEntry . getSize ( ) + NUM00 ) ; } else { writer . write ( sACTION_LIST [ ACTION_CLEAN ] + NUM00 + cacheEntry . getKey ( ) + NUM00 + cacheEntry . getSize ( ) + NUM00 ) ; } } $F59 ( writer ) mJournalFileTmp . renameTo ( mJournalFile ) ; mJournalWriter = new BufferedWriter ( new FileWriter ( mJournalFile , _BOOL ) , IO_BUFFER_SIZE ) ; }
private void recordLogData $F72 { try { $F115 ( size , mRecordingData ) $F32905 ( size ) $F11968 recordingData = new Vector $F200 ( mRecordingData ) ; File logDir = Constants . getRecordDir ( this ) ; $F1907 ( logDir ) $F4453 ( logFile , logDir , mRecordingFilename ) FileWriter logFileWriter = new FileWriter ( logFile , _BOOL ) ; for ( $F119 ( i , size ) ) { logFileWriter . append ( recordingData . elementAt ( i ) + NUM00 ) ; mRecordingData . removeElementAt ( NUM00 ) ; } $F6050 ( recordingData ) $F59 ( logFileWriter ) } catch ( Exception e ) { $F222498 ( Log , LOG_TAG , e ) } }
private static List < Command > loadRewrites ( String str ) { assert str != null ; List < Command > $F204 ( commands ) ; for ( $F55140 ( line , str ) ) { addLine ( commands , line ) ; } return commands ; }
$F1 public $F987 listOptions $F72 { $F994 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F9010 ( newVector , Collections , super ) $F1007 ( newVector ) }
$F1 public StateConnection onCloseRead $F72 { ConnectionProtocol request = request ( ) ; if ( request != null ) { request . onCloseRead ( ) ; } _sequenceClose . set ( _sequenceRead . get ( ) ) ; if ( _sequenceFlush . get ( ) < _sequenceClose . get ( ) ) { _isClosePending . set ( _BOOL ) ; if ( _sequenceFlush . get ( ) < _sequenceClose . get ( ) ) { return StateConnection . CLOSE_READ_S ; } else { _isClosePending . set ( _BOOL ) ; return StateConnection . CLOSE ; } } else { return StateConnection . CLOSE ; } }
private Map < UUID , $F2027 > reducers ( $F33332 top , Map < UUID , Collection $F279097 > mappers , int reducerCnt ) { int totalWeight = NUM00 ; List < WeightedNode > $F719 ( nodes , top ) ; for ( ClusterNode node : top ) { Collection $F279097 split = mappers . get ( node . id ( ) ) ; int weight = reducerNodeWeight ( node , split != null ? split . size ( ) : NUM00 ) ; nodes . add ( new WeightedNode ( node . id ( ) , weight , weight ) ) ; totalWeight += weight ; } int totalAdjustedWeight = NUM00 ; for ( WeightedNode node : nodes ) { node . floatWeight = ( ( float ) node . weight * reducerCnt ) / totalWeight ; node . weight = Math . round ( node . floatWeight ) ; totalAdjustedWeight += node . weight ; } Collections . sort ( nodes ) ; if ( totalAdjustedWeight > reducerCnt ) { ListIterator < WeightedNode > iter = nodes . listIterator ( $F2281 ( nodes ) ) ; while ( totalAdjustedWeight != reducerCnt ) { if ( ! iter . hasPrevious ( ) ) iter = nodes . listIterator ( $F2281 ( nodes ) ) ; WeightedNode node = iter . previous ( ) ; if ( node . weight > NUM00 ) { node . weight -= NUM00 ; totalAdjustedWeight -- ; } } } else if ( totalAdjustedWeight < reducerCnt ) { ListIterator < WeightedNode > iter = nodes . listIterator ( NUM00 ) ; while ( totalAdjustedWeight != reducerCnt ) { if $F87568 ( iter ) iter = nodes . listIterator ( NUM00 ) ; WeightedNode node = iter . next ( ) ; if ( node . floatWeight > NUM00 ) { node . weight += NUM00 ; totalAdjustedWeight ++ ; } } } int idx = NUM00 ; Map < UUID , $F2027 > reducers = new $F4188 $F33339 ( nodes ) ; for ( WeightedNode node : nodes ) { if ( node . weight > NUM00 ) { $F2027 arr = new int [ node . weight ] ; for ( $F1139 ( i , arr ) ) arr [ i ] = idx ++ ; reducers . put ( node . nodeId , arr ) ; } } return reducers ; }
public void httpRequest ( HttpRequestEvent e ) throws $F3258 { String request = e . getRequest ( ) ; if $F22503 ( Debug ) { $F151102 ( Debug , request ) } if $F4432 ( request ) { $F131348 ( request ) } int index = NUM00 ; $F49897 ( index , request ) if ( index != - NUM00 ) { request = $F13885 ( request , index ) ; $F36253 ( Debug ) } else $F196736 ( Debug ) try { iServer . handleRequest ( request , e . getOutputStream ( ) ) ; } catch ( IOException ioe ) $F50614 ( Debug , ioe ) catch ( MapRequestFormatException exception ) { String message = $F5352 ( exception ) + ErrorMessage ; HttpConnection . writeHttpResponse ( e . getOutputStream ( ) , HttpConnection . CONTENT_PLAIN , message ) ; } }
public void testConstructorBytesNegative2 $F72 { byte $F3009 = $F101798 ; byte $F3018 = $F101798 ; $F9144 ( aNumber , aBytes ) $F3030 ( rBytes ) $F3031 ( resBytes , aNumber ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , aNumber ) }
public String format ( double val ) { DecimalFormat df = getDoubleFormat ( ) ; if ( df != null ) $F35907 ( df , val ) $F23209 ( Double , val ) }
public void removePositions ( $F2306 positions ) { $F15272 $F104289 ( positionsList , positions ) ; Collections . sort ( positionsList ) ; Collections . reverse ( positionsList ) ; for ( int position : positionsList ) $F106 ( mItems , position ) notifyDataSetChanged ( ) ; }
private void resetShapeBounds $F72 { RoundRectangle2D . Double rrect = ( RoundRectangle2D . Double ) shape ; rrect . setRoundRect ( NUM00 , NUM00 , getBounds ( ) . width - NUM00 , getBounds ( ) . height - NUM00 , NUM00 , NUM00 ) ; }
public static Colour attemptToGetAsColour ( String part ) { Colour col = null ; try { col = Colour . valueOf ( part . toUpperCase ( ) ) ; } $F3957 return col ; }
public final $F79542 removeNonOptimal ( Position pos , $F79542 moveList ) { $F79542 optimalMoves = new $F79542 $F72 ; $F79542 unknownMoves = new $F79542 $F72 ; final int MATE0 = NUM00 ; int bestScore = - NUM00 ; UndoInfo ui = new UndoInfo $F72 ; for ( Move m : moveList ) { pos . makeMove ( m , ui ) ; int pliesToDraw = Math . max ( NUM00 - pos . halfMoveClock , NUM00 ) ; GtbProbeResult res = gtbProbe ( pos ) ; pos . unMakeMove ( m , ui ) ; if ( res . result == GtbProbeResult . UNKNOWN ) $F207 ( unknownMoves , m ) else { int wScore ; if ( res . result == GtbProbeResult . WMATE ) { if ( res . pliesToMate <= pliesToDraw ) wScore = MATE0 - res . pliesToMate ; else wScore = NUM00 ; } else if ( res . result == GtbProbeResult . BMATE ) { if ( res . pliesToMate <= pliesToDraw ) wScore = - ( MATE0 - res . pliesToMate ) ; else wScore = - NUM00 ; } else { wScore = NUM00 ; } int score = pos . whiteMove ? wScore : - wScore ; if ( score > bestScore ) { $F725 ( optimalMoves ) optimalMoves . add ( m ) ; bestScore = score ; } else if ( score == bestScore ) $F207 ( optimalMoves , m ) else $F845 } } for ( Move m : unknownMoves ) optimalMoves . add ( m ) ; return $F45088 ( optimalMoves , moveList ) ? optimalMoves : null ; }
public int rank $F72 { $F29087 ( eps , Math ) double tol = Math . max ( m , n ) * s [ NUM00 ] * eps ; int r = NUM00 ; for ( $F1139 ( i , s ) ) { if ( s [ i ] > tol ) { r ++ ; } } return r ; }
$F31880 ( position , offset , offsetPixels , mDecorChildCount , scrollX , getScrollX , paddingLeft , getPaddingLeft , paddingRight , getPaddingRight , width , getWidth , childCount , getChildCount , i , child , getChildAt , lp , hgrav , Gravity , childLeft , Math , childOffset , mOnPageChangeListener , mInternalPageChangeListener , mPageTransformer , transformPos , getClientWidth , mCalledSuper , _BOOL )
public static void executeRandomModifiableVariableModification ( ModifiableVariableHolder object ) { Field field = object . getRandomModifiableVariableField ( ) ; executeModifiableVariableModification ( object , field ) ; }
public static boolean save ( File file , String content ) { boolean result ; BufferedWriter writer ; writer = null ; try { $F92873 ( writer , file ) writer . write ( content ) ; $F1206 ( writer ) result = _BOOL ; } $F25008 ( e , result , _BOOL ) finally { $F111205 ( writer ) } return result ; }
private void deleteOldTemp ( File fileCfg ) { BufferedReader reader = null ; try { int count = NUM00 ; $F438 ( reader , fileCfg ) String sLine ; while $F443 ( sLine , reader ) { $F1705 ( file , sLine ) if $F1906 ( file ) $F1448 if $F220007 ( file ) { count ++ ; } else $F207 ( hsDeleteOnExit , file ) } logDebug ( LogArea . CONFIG , NUM00 , count , fileCfg . getAbsolutePath ( ) ) ; } $F29052 $F34262 ( reader ) }
public void proposeTree $F72 throws OperatorFailedException { NodeRef i ; double oldMinAge , newMinAge , newRange , oldRange , newAge , q ; final int nodeCount = tree . getNodeCount ( ) ; do { i = tree . getNode ( MathUtils . nextInt ( nodeCount ) ) ; } while ( tree . getRoot ( ) == i ) ; final NodeRef iP = tree . getParent ( i ) ; NodeRef j = tree . getNode ( MathUtils . nextInt ( nodeCount ) ) ; $F59939 ( k , tree , j ) while ( ( k != null && tree . getNodeHeight ( k ) <= tree . getNodeHeight ( i ) ) || ( i == j ) ) { j = tree . getNode ( MathUtils . nextInt ( nodeCount ) ) ; k = tree . getParent ( j ) ; } if ( j == tree . getRoot ( ) || iP == tree . getRoot ( ) ) $F62102 if ( k == iP || j == iP || k == i ) throw new OperatorFailedException $F580 ; final NodeRef CiP = getOtherChild ( tree , iP , i ) ; $F59939 ( PiP , tree , iP ) newMinAge = Math . max ( tree . getNodeHeight ( i ) , tree . getNodeHeight ( j ) ) ; newRange = tree . getNodeHeight ( k ) - newMinAge ; newAge = newMinAge + ( MathUtils . nextDouble ( ) * newRange ) ; oldMinAge = Math . max ( tree . getNodeHeight ( i ) , tree . getNodeHeight ( CiP ) ) ; oldRange = tree . getNodeHeight ( PiP ) - oldMinAge ; q = newRange / Math . abs ( oldRange ) ; tree . beginTreeEdit ( ) ; if ( j == tree . getRoot ( ) ) { tree . removeChild ( iP , CiP ) ; tree . removeChild ( PiP , iP ) ; tree . addChild ( iP , j ) ; tree . addChild ( PiP , CiP ) ; tree . setRoot ( iP ) ; } else if ( iP == tree . getRoot ( ) ) { tree . removeChild ( k , j ) ; tree . removeChild ( iP , CiP ) ; tree . addChild ( iP , j ) ; tree . addChild ( k , iP ) ; tree . setRoot ( CiP ) ; } else { tree . removeChild ( k , j ) ; tree . removeChild ( iP , CiP ) ; tree . removeChild ( PiP , iP ) ; tree . addChild ( iP , j ) ; tree . addChild ( k , iP ) ; tree . addChild ( PiP , CiP ) ; } tree . setNodeHeight ( iP , newAge ) ; tree . endTreeEdit ( ) ; logq = Math . log ( q ) ; }
public void flush $F72 { final BigdataSailRepositoryConnection cxn = tlTx . get ( ) ; if ( cxn != null ) { Code . wrapThrow ( null ) ; } }
$F1 public BufferedImage JPEGToRGBImage ( final $F96 data , final int ww , final int hh , final int pX , final int pY ) { BufferedImage image = null ; Raster ras = JPEGDecoder . getRasterFromJPEG ( data , NUM00 ) ; if ( ras != null ) { ras = cleanupRaster ( ras , pX , pY , componentCount ) ; $F43592 ( w , ras ) $F43590 ( h , ras ) final DataBufferByte rgb = ( DataBufferByte ) ras . getDataBuffer ( ) ; image = createImage ( w , h , rgb . getData ( ) ) ; } return image ; }
public void despawn ( VisibleObject object ) { despawn ( object , _BOOL ) ; }
public String eventTopic ( String eventId ) { $F23170 ( eventId ) return evtTopic . replace ( NUM00 , eventId ) ; }
public MatchResult match $F72 { $F56572 ( matchSuccessful ) return matcher . toMatchResult ( ) ; }
$F1431 public static void createProjectConstraint ( ZipFile zip , Project aProject , RepositoryService aRepository ) throws IOException { for ( Enumeration zipEnumerate = zip . entries ( ) ; zipEnumerate . hasMoreElements ( ) ; ) { ZipEntry entry = ( ZipEntry ) zipEnumerate . nextElement ( ) ; String entryName = normalizeEntryName ( entry ) ; if $F7311 ( entryName , CONSTRAINTS ) { String filename = FilenameUtils . getName ( entry . getName ( ) ) ; ConstraintSet constraintSet = new ConstraintSet $F72 ; constraintSet . setProject ( aProject ) ; constraintSet . setName ( filename ) ; aRepository . createConstraintSet ( constraintSet ) ; aRepository . writeConstraintSet ( constraintSet , zip . getInputStream ( entry ) ) ; LOG . info ( $F106503 ( filename , aProject ) + aProject . getId ( ) + NUM00 ) ; } } }
static synchronized void computePRF_SSLv3 $F55962 ( out , secret , seed ) { $F113304 ( sha , init ) int pos = NUM00 ; int iteration = NUM00 ; $F96 digest ; while ( pos < out . length ) { $F2175 ( pref , iteration ) Arrays . fill ( pref , ( byte ) ( NUM00 + iteration ++ ) ) ; sha . update ( pref ) ; sha . update ( secret ) ; sha . update ( seed ) ; md5 . update ( secret ) ; md5 . update ( sha . digest ( ) ) ; $F54171 ( digest , md5 ) if ( pos + NUM00 > out . length ) { System . arraycopy ( digest , NUM00 , out , pos , out . length - pos ) ; pos = out . length ; } else { $F66840 ( System , digest , out , pos ) pos += NUM00 ; } } }
public String decode ( String pString ) throws DecoderException { $F1338 ( pString ) try $F23983 ( decode , pString , getDefaultCharset ) catch ( UnsupportedEncodingException e ) { throw new DecoderException $F1783 ( e ) ; } }
public Operation copyTo ( Extent target ) { BlockTransformExtent extent = new BlockTransformExtent ( original , transform , worldData . getBlockRegistry ( ) ) ; ForwardExtentCopy copy = new ForwardExtentCopy ( extent , original . getRegion ( ) , original . getOrigin ( ) , target , original . getOrigin ( ) ) ; copy . setTransform ( transform ) ; return copy ; }
@ CallerSensitive public $F6969 forClass $F72 { $F1338 ( cl ) requireInitialized ( ) ; if ( System . getSecurityManager ( ) != null ) { $F6969 caller = Reflection . getCallerClass ( ) ; if ( ReflectUtil . needsPackageAccessCheck ( caller . getClassLoader ( ) , cl . getClassLoader ( ) ) ) { ReflectUtil . checkPackageAccess ( cl ) ; } } return cl ; }
private void pathStyleHelper ( String style , String offset ) { $F2329 ( style ) if $F3057 ( style ) { strokePaint . setPathEffect ( null ) ; $F665 } $F17727 ( st , style ) $F17729 ( count , st ) $F5415 intervals = new float [ ( count & NUM00 ) == NUM00 ? count * NUM00 : count ] ; float max = NUM00 ; float current = NUM00 ; int i = NUM00 ; while $F14498 ( st ) { intervals [ i ++ ] = current = toFloat ( st . nextToken ( ) , current ) ; max += current ; } for ( int start = NUM00 ; i < intervals . length ; i ++ , start ++ ) { max += intervals [ i ] = intervals [ start ] ; } float off = NUM00 ; if ( offset != null ) { try { off = Float . parseFloat ( offset ) % max ; } $F32668 } strokePaint . setPathEffect ( new DashPathEffect ( intervals , off ) ) ; }
private float colorToAngle ( int color ) { $F12457 ( colors ) Color . colorToHSV ( color , colors ) ; return ( float ) Math . toRadians ( - colors [ NUM00 ] ) ; }
private Size parseOldBoundedSize ( String token , boolean setMax ) { $F1384 ( semicolonIndex , token ) $F11991 ( sizeToken1 , token , semicolonIndex ) String sizeToken2 = token . substring ( semicolonIndex + NUM00 , $F1092 ( token ) ) ; Size size1 = parseAtomicSize ( sizeToken1 ) ; Size size2 = parseAtomicSize ( sizeToken2 ) ; if ( isConstant ( size1 ) ) { if ( size2 instanceof Sizes . ComponentSize ) { return new BoundedSize ( size2 , setMax ? null : size1 , setMax ? size1 : null ) ; } $F824 } if ( isConstant ( size2 ) ) { return new BoundedSize ( size1 , setMax ? null : size2 , setMax ? size2 : null ) ; } $F824 }
Builder addEncodedQueryParameter ( String encodedName , String encodedValue ) { $F19273 ( encodedName ) $F21432 ( encodedQueryNamesAndValues ) encodedQueryNamesAndValues . add ( canonicalize ( encodedName , QUERY_COMPONENT_ENCODE_SET , _BOOL , _BOOL ) ) ; encodedQueryNamesAndValues . add ( encodedValue != null ? canonicalize ( encodedValue , QUERY_COMPONENT_ENCODE_SET , _BOOL , _BOOL ) : null ) ; return this ; }
private static a createImageLink ( String AD_Language , String name , String js_command , boolean enabled , boolean pressed ) { a img = new a ( NUM00 , createImage ( AD_Language , name ) ) ; if ( ! pressed || ! enabled ) $F243713 ( img ) else $F243713 ( img ) $F12553 ( js_command ) if ( $F20 ( js_command ) && enabled ) { if $F3106 ( js_command ) img . setOnClick ( js_command ) ; else img . setOnClick ( NUM00 + name + NUM00 + js_command + NUM00 ) ; } img . setClass ( NUM00 ) ; img . setOnMouseOver ( NUM00 + name + NUM00 ) ; img . setOnMouseOut ( NUM00 ) ; img . setOnBlur ( NUM00 ) ; return img ; }
public Namespace ( PrincipalUser creator , String qualifier , PrincipalUser owner , Set < PrincipalUser > users ) { super ( creator ) ; setQualifier ( qualifier ) ; setOwner ( owner ) ; if $F1032 ( users ) { setUsers ( users ) ; } addUser ( owner ) ; }
public final int decrementAndGet $F72 { return unsafe . getAndAddInt ( this , valueOffset , - NUM00 ) - NUM00 ; }
public void update ( long dt , float ratioY ) { double step = NUM00 * Math . PI / POINTS_PER_CIRCLE ; angle += dt * BUBBLE_D_ANGLE ; float fromX = startX + ( float ) ( NUM00 * Math . sin ( angle ) ) ; float toX = fromX + size ; float fromY = this . fromY + dt * speed ; float toY = fromY + size ; centerY += dt * virtualSpeed ; getColor ( ) [ NUM00 ] = ( TOP_Y - centerY / TOP_Y ) ; vertexBuffer . put ( NUM00 , Utils . normalizeGl ( NUM00 , fromX , toX ) ) ; vertexBuffer . put ( NUM00 , Utils . normalizeGl ( centerY * ratioY , fromY , toY ) ) ; for ( $F9993 ( i , POINTS_PER_CIRCLE ) ) { vertexBuffer . put ( COORDS_PER_VERTEX * i , Utils . normalizeGl ( ( float ) Math . sin ( - Math . PI + step * i ) , fromX , toX ) ) ; vertexBuffer . put ( COORDS_PER_VERTEX * i + NUM00 , Utils . normalizeGl ( ( float ) Math . cos ( - Math . PI + step * i ) * ratioY , fromY , toY ) ) ; } this . fromY = fromY ; }
public final void clear $F72 { if ( GWT . isScript ( ) ) $F9096 ( jsArray ) else $F9096 ( javaArray ) }
$F30954 ( putLock , takeLock )
$F1 public synchronized void clear $F72 { $F5459 ( files , mRootDirectory ) if ( files != null ) { for ( File file : files ) $F19636 ( file ) } $F725 ( mEntries ) VolleyLog . d ( NUM00 ) ; }
private void updatePodcastPublicationDateAndLastMediaUrl ( Episode episode , Podcast podcast ) { Date podcastPublicationDate = podcast . getPublicationDate ( ) ; boolean episodePubDateIsMoreRecent = episode . getPublicationDate ( ) != null && ( podcastPublicationDate == null || podcastPublicationDate . before ( episode . getPublicationDate ( ) ) ) ; if ( episodePubDateIsMoreRecent ) { podcast . setPublicationDate ( episode . getPublicationDate ( ) ) ; podcast . setLastEpisodeMediaUrl ( episode . getMediaUrl ( ) ) ; } }
private void removeOurUIs $F72 { for ( String uiName : UI_LIST ) { uiDefaults . remove ( uiName + NUM00 ) ; } }
public void makeImmutable $F72 $F845
public static $F65331 $F95002 precomputedKNNQuery ( Database database , $F65332 relation , DistanceQuery $F65331 dq , int k ) { $F95002 knnq = database . getKNNQuery ( dq , k , DatabaseQuery . HINT_HEAVY_USE , DatabaseQuery . HINT_OPTIMIZED_ONLY , DatabaseQuery . HINT_NO_CACHE ) ; if ( knnq instanceof PreprocessorKNNQuery ) { return knnq ; } MaterializeKNNPreprocessor $F65331 preproc = new MaterializeKNNPreprocessor $F200 ( relation , dq . getDistanceFunction ( ) , k ) ; $F21883 ( preproc ) return preproc . getKNNQuery ( dq , k ) ; }
public static SortedSet $F2305 adjustPosition ( $F11868 positions , int startPosition , int endPosition , int adjustBy ) { SortedSet $F2305 $F32033 ( newPositions ) ; for ( Integer entry : positions ) { int position = entry ; if ( position < startPosition || position > endPosition ) $F207 ( newPositions , position ) else if ( adjustBy > NUM00 ) $F128607 ( newPositions , position , adjustBy ) else if ( adjustBy < NUM00 ) { if ( position > startPosition + adjustBy && position <= startPosition ) $F12542 else $F128607 ( newPositions , position , adjustBy ) } } return newPositions ; }
private static void addId ( final StringBuilder buf , final $F96 id ) { $F84 ( buf ) boolean backslash = _BOOL ; for ( final byte b : id ) { $F27725 ( buf , b ) if ( b == NUM00 && backslash ) $F86 ( buf ) else { backslash = b == NUM00 ; } } $F84 ( buf ) }
private ResolvedMigration createAvailableMigration ( int version ) { ResolvedMigration migration = new ResolvedMigration $F72 ; migration . setVersion ( MigrationVersion . fromVersion ( Integer . toString ( version ) ) ) ; $F271284 ( migration ) migration . setScript ( NUM00 ) ; migration . setType ( MigrationType . CQL ) ; return migration ; }
public void comment ( String data ) throws SAXException { m_docIsEmpty = _BOOL ; $F11550 ( length , data ) $F180083 ( length , m_charsBuff ) $F16116 ( data , length , m_charsBuff ) comment ( m_charsBuff , NUM00 , length ) ; }
public boolean drawImage ( Image img , AffineTransform xform , ImageObserver observer ) { $F1933 ( img , _BOOL ) if ( xform == null || xform . isIdentity ( ) ) { return drawImage ( img , NUM00 , NUM00 , null , observer ) ; } if ( isHiDPIImage ( img ) ) { final int w = img . getWidth ( null ) ; final int h = img . getHeight ( null ) ; final AffineTransform tx = new AffineTransform ( transform ) ; transform ( xform ) ; boolean result = drawHiDPIImage ( img , NUM00 , NUM00 , w , h , NUM00 , NUM00 , w , h , null , observer ) ; transform . setTransform ( tx ) ; invalidateTransform ( ) ; return result ; } try { return imagepipe . transformImage ( this , img , xform , observer ) ; } catch ( InvalidPipeException e ) { try { revalidateAll ( ) ; return imagepipe . transformImage ( this , img , xform , observer ) ; } catch ( InvalidPipeException e2 ) { return _BOOL ; } } $F30852 ( surfaceData ) }
public void beginDisplay ( DisplayEvent event ) throws ModelControlException { super . beginDisplay ( event , _BOOL ) ; resetButtonState ( TBL_BUTTON_DELETE ) ; AgentsModel model = ( AgentsModel ) getModel ( ) ; String agentType = getDisplayIDType ( ) ; $F22031 ( param , agentType ) ptModel . setPageTitleText ( model . getLocalizedString ( NUM00 + agentType ) ) ; ptModel . setPageTitleHelpMessage ( model . getLocalizedString ( NUM00 + agentType + NUM00 ) ) ; tblModel . setTitle ( MessageFormat . format ( model . getLocalizedString ( NUM00 ) , param ) ) ; tblModel . setTitleLabel ( MessageFormat . format ( model . getLocalizedString ( NUM00 ) , param ) ) ; tblModel . setSummary ( MessageFormat . format ( model . getLocalizedString ( NUM00 ) , param ) ) ; tblGroupModel . setTitle ( MessageFormat . format ( model . getLocalizedString ( NUM00 ) , param ) ) ; tblGroupModel . setTitleLabel ( MessageFormat . format ( model . getLocalizedString ( NUM00 ) , param ) ) ; tblGroupModel . setSummary ( MessageFormat . format ( model . getLocalizedString ( NUM00 ) , param ) ) ; getAgentNames ( ) ; CCButton b = ( CCButton ) getChild ( TBL_BUTTON_DELETE ) ; b . setDisabled ( _BOOL ) ; b = ( CCButton ) getChild ( TBL_BUTTON_DELETE_GROUP ) ; b . setDisabled ( _BOOL ) ; }
public void select_all $F72 { Arrays . fill ( sel_array , _BOOL ) ; }
public NvpBuilder addRaw $F2236 ( name , value ) $F67896 ( npv , name , value , this )
$F1 public int length $F72 $F1652 ( set )
public final long readUnsignedInt $F72 throws IOException { mPosition += NUM00 ; $F52634 ( d , w ) return ( ( long ) ( w [ NUM00 ] ) < < NUM00 | $F169749 ( w ) | $F169749 ( w ) | $F18896 ( w ) ) & NUM00 ; }
public List < CountryRO > viewAddressCountryOptions ( final ShoppingCart cart , final Shop shop , final String addressType ) { final List < Country > countries = addressBookFacade . getAllCountries ( shop . getCode ( ) , addressType ) ; return map ( countries , CountryRO . class , Country . class ) ; }
public void addPauseListener ( AnimatorPauseListener listener ) { if ( mPauseListeners == null ) { mPauseListeners = new ArrayList < AnimatorPauseListener > $F72 ; } mPauseListeners . add ( listener ) ; }
$F1 public void makeImmutable $F72 { if ( mutable ) { if ( attrs != null ) { $F10531 ( iter , attrs ) while $F2921 ( iter ) { Attribute attr = ( Attribute ) iter . next ( ) ; $F118294 ( attr ) } $F5939 ( attrs , Collections ) } $F5941 ( encAttrs , Collections ) mutable = _BOOL ; } }
$F1 public boolean batchFinished $F72 throws Exception { $F161885 ( getInputFormat ) Instances toFilter = getInputFormat ( ) ; if $F931 ( isFirstBatchDone ) { Instances toFilterIgnoringAttributes = removeIgnored ( toFilter ) ; File file = getSerializedClustererFile ( ) ; if $F4926 ( file ) { ObjectInputStream ois = new ObjectInputStream $F18079 ( file ) ; m_ActualClusterer = ( Clusterer ) ois . readObject ( ) ; Instances header = null ; try { header = ( Instances ) ois . readObject ( ) ; } $F3957 $F59 ( ois ) if ( ( header != null ) && ( ! header . equalHeaders ( toFilterIgnoringAttributes ) ) ) { throw new WekaException ( NUM00 + header . equalHeadersMsg ( toFilterIgnoringAttributes ) ) ; } } else { m_ActualClusterer = AbstractClusterer . makeCopy ( m_Clusterer ) ; m_ActualClusterer . buildClusterer ( toFilterIgnoringAttributes ) ; } Instances $F66793 ( filtered , toFilter ) ; $F5 nominal_values = new $F5 ( m_ActualClusterer . numberOfClusters ( ) ) ; for ( int i = NUM00 ; i < m_ActualClusterer . numberOfClusters ( ) ; i ++ ) { nominal_values . add ( NUM00 + ( i + NUM00 ) ) ; } filtered . insertAttributeAt ( $F66780 ( nominal_values ) , filtered . numAttributes ( ) ) ; setOutputFormat ( filtered ) ; } for ( $F208679 ( i , toFilter ) ) { convertInstance ( toFilter . instance ( i ) ) ; } flushInput ( ) ; m_NewBatch = _BOOL ; m_FirstBatchDone = _BOOL ; return ( numPendingOutput ( ) != NUM00 ) ; }
public void addComponent ( T component ) $F207 ( components , component )
public static UiResult openUrl ( URI uri ) { $F17718 ( openUrl , uri ) }
public final void invalidateLine ( int line ) { repaint ( NUM00 , textArea . lineToY ( line ) + fm . getMaxDescent ( ) + fm . getLeading ( ) , getWidth ( ) , fm . getHeight ( ) ) ; }
public ByteBandedRaster ( SampleModel sampleModel , Point origin ) $F265387 ( this , sampleModel , origin )
private void initialize ( URI p_other ) { m_scheme = p_other . getScheme ( ) ; m_userinfo = p_other . getUserinfo ( ) ; m_host = p_other . getHost ( ) ; m_port = p_other . getPort ( ) ; m_path = p_other . getPath ( ) ; m_queryString = p_other . getQueryString ( ) ; m_fragment = p_other . getFragment ( ) ; }
public void playTogether ( Collection $F113170 items ) { if $F8841 ( items ) { mNeedsSort = _BOOL ; Builder builder = null ; for ( Animator anim : items ) { if ( builder == null ) { builder = play ( anim ) ; } else { builder . with ( anim ) ; } } } }
$F21351 ( l , last , p , item , first , count , notFull )
static boolean isRefreshNotificationRegistered ( NotificationListener client , RefreshNotificationType type ) { boolean isRegistered = _BOOL ; Map < RefreshNotificationType , Integer > notifications = null ; synchronized ( refreshClients ) { notifications = ( Map < RefreshNotificationType , Integer > ) refreshClients . get ( client ) ; } if ( notifications != null ) { $F99426 ( timerNotificationId , notifications , type ) if ( timerNotificationId != null ) { isRegistered = _BOOL ; } } return isRegistered ; }
private $F6877 readProcessOutput ( Process proc ) throws IOException { $F114263 ( rdr , proc ) ; $F6877 $F204 ( res ) ; String s ; while $F443 ( s , rdr ) res . add ( s ) ; return res ; }
public void fillHeaderAndFooter ( final HttpServletRequest request , final HttpServletResponse response , $F87266 ( dataModel ) ) throws Exception { fillHeader ( request , response , dataModel ) ; fillFooter ( dataModel ) ; }
public void addOperand ( ISpacePredicate operand ) { if ( _operandsList == null ) _operandsList = new ArrayList < ISpacePredicate > $F72 ; _operandsList . add ( operand ) ; }
public static String decode ( String s , Type t ) { $F99586 ( s ) $F22998 ( n , s ) $F6482 ( n , s ) if $F1731 ( s ) { if ( t == Type . QUERY_PARAM ) { if $F1731 ( s ) { return s ; } } else { return s ; } } else { $F6853 ( n ) if $F198486 ( s , n ) { throw new IllegalArgumentException ( NUM00 + ( n - NUM00 ) ) ; } } if ( t == null ) $F8587 ( decode , s , n ) switch ( t ) { case HOST : return decodeHost ( s , n ) ; case QUERY_PARAM : return decodeQueryParam ( s , n ) ; $F1267 return decode ( s , n ) ; } }
public BigDecimal calculateTotalCollectedAmt ( final BillReceiptInfo bri , final List < EgBillDetails > billDetList ) throws InvalidAccountHeadException { return bri . getTotalAmount ( ) ; }
public void skip ( int count ) throws IOException { $F55158 ( skipCount , Math , limit , position , count ) while ( _BOOL ) { position += skipCount ; count -= skipCount ; if ( count == NUM00 ) $F597 skipCount = Math . min ( count , capacity ) ; require ( skipCount ) ; } }
public void test_concurrent_modification_insert $F72 { final BTree btree ; { $F87561 ( md , UUID ) md . setBranchingFactor ( NUM00 ) ; btree = BTree . create ( $F137694 , md ) ; $F2864 ( btree ) $F2864 ( btree ) $F2864 ( btree ) } { ITupleCursor2 $F4 cursor = newCursor ( btree ) ; assertEquals ( $F355344 , cursor . seek ( NUM00 ) ) ; $F355356 ( assertEquals , cursor ) $F2864 ( btree ) $F355350 ( assertEquals , TestKeyBuilder , cursor ) $F355356 ( assertEquals , cursor ) assertEquals ( $F355344 , cursor . prior ( ) ) ; $F355356 ( assertEquals , cursor ) $F86372 ( btree ) assertEquals ( null , cursor . tuple ( ) ) ; $F355350 ( assertEquals , TestKeyBuilder , cursor ) assertEquals ( $F355344 , cursor . next ( ) ) ; $F86372 ( btree ) assertEquals ( null , cursor . tuple ( ) ) ; $F355350 ( assertEquals , TestKeyBuilder , cursor ) $F2864 ( btree ) $F355350 ( assertEquals , TestKeyBuilder , cursor ) assertEquals ( null , cursor . tuple ( ) ) ; assertEquals ( $F355344 , cursor . next ( ) ) ; $F355356 ( assertEquals , cursor ) } }
public void removeAllIms $F72 $F9096 ( ims )
static String escapeStringForASCII ( String s ) { String out = NUM00 ; $F7782 ( cArray , s ) for ( $F1139 ( i , cArray ) ) { char c = cArray [ i ] ; if ( c > NUM00 ) { out += NUM00 ; $F21991 ( hex , Integer , c ) while $F3599 ( hex ) hex = NUM00 + hex ; out += hex ; } else if ( c == NUM00 ) { out += NUM00 ; } else if ( c == NUM00 ) { out += NUM00 ; } else if ( c == NUM00 ) { out += NUM00 ; } else if ( c == NUM00 ) { out += NUM00 ; } else if ( c == NUM00 ) { out += NUM00 ; } else if ( c == NUM00 ) { out += NUM00 ; } else { out += c ; } } return out ; }
public void copyReader ( String encoding , Reader r ) throws IOException { super . setContentEncoding ( encoding ) ; String s = readString ( r ) ; content = s . getBytes ( encoding ) ; }
private void clearDictionaryCache $F72 { Map < String , Dictionary > dictionaryCaches = surrogateKeyGen . getDictionaryCaches ( ) ; List < Dictionary > $F159472 ( reverseDictionaries , dictionaryCaches ) ; for ( $F2277 ( i , reverseDictionaries ) ) { Dictionary dictionary = reverseDictionaries . get ( i ) ; $F725 ( dictionary ) } }
public static String toTypeString $F82140 ( arguments , maxSize ) { $F4158 ( arguments ) $F83 ( argBuf ) for ( $F1139 ( i , arguments ) ) { if ( maxSize != - NUM00 && argBuf . length ( ) > maxSize ) $F257374 ( argBuf ) else { $F34674 ( i , argBuf ) argBuf . append ( arguments [ i ] != null ? typeName ( arguments [ i ] ) : NUM00 ) ; } } $F92 ( argBuf ) }
public boolean renameFile ( File oldFile , File newFile ) { synchronized ( fileCache ) { if ( oldFile . renameTo ( newFile ) ) $F27427 ( validateFileCache , _BOOL ) return _BOOL ; } }
public $F44535 execute ( CameraCommand command ) { if ( mClosed ) { return Futures . immediateFuture ( null ) ; } synchronized ( mLock ) { if ( mExecutor == null ) $F16479 ( mExecutor , mExecutorProvider ) checkNotNull ( mExecutor ) ; return mExecutor . submit ( new CommandRunnable ( command ) ) ; } }
public static EnumSet < KindName > kindNames ( int kind ) { EnumSet < KindName > kinds = EnumSet . noneOf ( KindName . class ) ; if $F18594 ( kind , VAL ) kinds . add ( ( ( kind & VAL ) == VAR ) ? KindName . VAR : KindName . VAL ) ; if $F18594 ( kind , MTH ) kinds . add ( KindName . METHOD ) ; if $F18594 ( kind , TYP ) kinds . add ( KindName . CLASS ) ; if $F18594 ( kind , PCK ) kinds . add ( KindName . PACKAGE ) ; return kinds ; }
$F125945 ( text )
public static String serializeDigestResponse $F3501 ( paramMap ) { $F4000 ( sb ) boolean prefixComma = _BOOL ; for ( $F19318 ( entry , paramMap ) ) { if ( ! prefixComma ) { prefixComma = _BOOL ; } else $F86 ( sb ) $F79971 ( sb , entry ) $F84 ( sb ) $F79973 ( sb , entry ) } $F92 ( sb ) }
public void populateCombos ( Activity activity , final Listener listener ) { $F3803 services = getServices ( activity . getPackageManager ( ) ) ; populateCombos ( activity , services , listener ) ; }
protected JsonEncoding findEncoding ( MediaType mediaType , MultivaluedMap $F528 httpHeaders ) { return JsonEncoding . UTF8 ; }
static BufferedImage convertImage ( BufferedImage image ) { switch $F56007 ( image ) { case BufferedImage . TYPE_INT_ARGB_PRE : return image ; case BufferedImage . TYPE_4BYTE_ABGR : image . coerceData ( _BOOL ) ; return image ; } BufferedImage convertedImage = new BufferedImage ( image . getWidth ( ) , image . getHeight ( ) , BufferedImage . TYPE_INT_ARGB_PRE ) ; $F5115 ( g , convertedImage ) g . setColor ( new $F184129 $F13777 ) ; $F116732 ( g , image ) $F37616 ( g , image ) $F355 ( g ) return convertedImage ; }
public long start $F72 { $F3224 ( startTime , System ) return startTime ; }
public void next $F72 { if $F2921 ( iterator ) { View currentView = iterator . next ( ) ; if ( isUsingDefaultListener ( ) ) $F242205 ( currentView ) if ( iterator . nextIndex ( ) < mViews . size ( ) ) { View nextView = mViews . get ( iterator . nextIndex ( ) ) ; if ( isUsingDefaultListener ( ) ) nextView . setOnClickListener ( listener ) ; ControllerAnimator animator = getDefaultForwardAnimation ( ) ; animator . setOldView ( currentView ) ; animator . setNewView ( nextView ) ; currentView . startAnimation ( animator ) ; if ( iterator . nextIndex ( ) == $F2281 ( mViews ) ) if ( hasControllerListener ( ) ) mListener . onEndReached ( ) ; } else { if ( mLoop ) { $F106110 ( iterator , mViews ) View nextView = mViews . get ( NUM00 ) ; if ( mUseDefaultListener ) nextView . setOnClickListener ( listener ) ; ControllerAnimator animator = getDefaultForwardAnimation ( ) ; animator . setOldView ( currentView ) ; animator . setNewView ( nextView ) ; currentView . startAnimation ( animator ) ; } } } }
private boolean isHHSign ( String str ) { boolean sign = _BOOL ; try { char $F162463 ( r , Integer , str ) ; } $F43580 ( sign , _BOOL ) return sign ; }
public void simulateMethod $F5498 ( method , thisVar , returnVar ) { $F5500 ( subSignature , method ) if $F3057 ( subSignature ) $F5501 ( sun_misc_Unsafe_allocateInstance , method , thisVar , returnVar , params ) $F5501 ( defaultMethod , method , thisVar , returnVar , params ) }
public void cacheResolvedMethod ( Class clas , $F749 types , Method method ) { if ( Interpreter . DEBUG ) $F8922 ( Interpreter , clas , method ) SignatureKey sk = new SignatureKey ( clas , method . getName ( ) , types ) ; if $F181753 ( Modifier , method ) resolvedStaticMethods . put ( sk , method ) ; else resolvedObjectMethods . put ( sk , method ) ; }
public void testSetBitTopPositive $F72 { $F43457 int aSign = NUM00 ; int number = NUM00 ; byte $F3018 = { NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F43462 ( result , aNumber , number ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
private void destroyBeans ( $F2100 ( viewMap ) , Map < String , ViewScopeContextObject > contextMap ) { $F22547 ( removalNameList ) if ( contextMap != null ) { for ( Map . Entry < String , ViewScopeContextObject > entry : contextMap . entrySet ( ) ) { $F3477 ( passivationCapableId , entry ) Contextual contextual = beanManager . getPassivationCapableBean ( passivationCapableId ) ; ViewScopeContextObject contextObject = entry . getValue ( ) ; CreationalContext creationalContext = beanManager . createCreationalContext ( contextual ) ; contextual . destroy ( $F22754 ( viewMap , contextObject ) , creationalContext ) ; $F29790 ( removalNameList , contextObject ) } $F13712 ( removalNames , removalNameList ) while $F2921 ( removalNames ) { $F13714 ( name , removalNames ) viewMap . remove ( name ) ; } $F725 ( contextMap ) } }
public static void close ( $F147000 OutputStream outputStream ) { $F2329 ( outputStream ) $F29053 ( outputStream ) }
$F1 public Node item ( int index ) { return ( nodes != null && index < nodes . size ( ) ) ? ( Node ) ( nodes . get ( index ) ) : null ; }
private int charToVisibleWidth ( char c , @ JdkConstants . FontStyle int fontType , int currentX ) { if ( c == NUM00 ) $F1083 if ( c == NUM00 ) { return EditorUtil . nextTabStop ( currentX , this ) - currentX ; } return EditorUtil . charWidth ( c , fontType , this ) ; }
public static void createDir ( File target ) throws AdeUsageException { if ( $F1905 ( target ) && ! target . mkdir ( ) && $F1905 ( target ) ) $F40745 ( target ) }
public GTSEncoder ( long baseTimestamp ) { this . baseTimestamp = baseTimestamp ; this . stream = $F1535 ; this . wrappingKey = null ; }
public static String encode ( final $F19578 coords ) { long lastLat = NUM00 ; long lastLng = NUM00 ; $F3239 ( result ) for ( final Coordinate point : coords ) { long lat = Math . round ( point . y * NUM00 ) ; long lng = Math . round ( point . x * NUM00 ) ; long dLat = lat - lastLat ; long dLng = lng - lastLng ; encode ( dLat , result ) ; encode ( dLng , result ) ; lastLat = lat ; lastLng = lng ; } $F92 ( result ) }
private void extractWeightValues ( List $F99538 synapses ) { int exWeights = NUM00 ; int inWeights = NUM00 ; for ( Synapse s : synapses ) { double w = s . getStrength ( ) ; if ( w > NUM00 ) { exWeights ++ ; } else { inWeights ++ ; } } weights [ NUM00 ] = new double [ exWeights ] ; weights [ NUM00 ] = new double [ inWeights ] ; exWeights = NUM00 ; inWeights = NUM00 ; if ( weights [ NUM00 ] . length != NUM00 ) { for ( Synapse s : synapses ) { double w = s . getStrength ( ) ; if ( w > NUM00 ) { weights [ NUM00 ] [ exWeights ++ ] = w ; } else { weights [ NUM00 ] [ inWeights ++ ] = w ; } } } }
$F1 public void close $F72 { try $F5795 ( flush ) catch ( AMLogException ale ) { Debug . error ( $F244213 ( tableName , ale ) ) ; } if ( conn != null ) { try $F881 ( conn ) catch ( SQLException ce ) $F69256 ( Debug , tableName , ce ) } stopBufferTimer ( ) ; }
public boolean contains $F149310 ( hashes ) { $F116323 ( ni , hashes ) for ( $F1316 ( i , hashFunctions ) ) { if ( ! testBit ( ( int ) ( ( ni . next ( ) & NUM00 ) % $F28143 ( filter ) ) ) ) { return _BOOL ; } } return _BOOL ; }
private void ensureCapacity ( int additionalData ) { if ( ( this . position + additionalData ) > this . byteBuffer . length ) { int newLength = ( int ) ( this . byteBuffer . length * NUM00 ) ; if ( newLength < ( this . byteBuffer . length + additionalData ) ) { newLength = this . byteBuffer . length + $F35376 ( additionalData ) ; } if ( newLength < this . byteBuffer . length ) { newLength = this . byteBuffer . length + additionalData ; } $F2175 ( newBytes , newLength ) System . arraycopy ( this . byteBuffer , NUM00 , newBytes , NUM00 , this . byteBuffer . length ) ; this . byteBuffer = newBytes ; } }
public boolean isValidNumber ( PhoneNumber number ) { String regionCode = getRegionCodeForNumber ( number ) ; return isValidNumberForRegion ( number , regionCode ) ; }
private String trimUrl ( String uri ) { $F1747 ( uri ) $F212530 ( uri ) return uri ; }
public Pair < Integer , $F27145 > next $F72 { try { classesProcessed ++ ; Integer key = iterator . next ( ) ; long pos = classificationBlockRMA2 . getPos ( key ) ; int count = classificationBlockRMA2 . getSum ( key ) ; classDumpReader . seek ( pos ) ; $F27145 $F19827 ( list ) ; for ( $F119 ( i , count ) ) list . add ( classDumpReader . readLong ( ) ) ; $F83164 ( key , list ) } catch ( Exception e ) { Basic . caught ( e ) ; error = _BOOL ; $F1274 } }
public static String addAlpha ( String originalColor , double alpha ) { long alphaFixed = Math . round ( alpha * NUM00 ) ; $F21991 ( alphaHex , Long , alphaFixed ) $F21680 ( alphaHex ) originalColor = originalColor . replace ( NUM00 , NUM00 + alphaHex ) ; return originalColor ; }
public void stop $F72 { server . stop ( NUM00 ) ; }
protected DateTimeData parse ( String str , int durationType ) throws SchemaDateTimeException { $F1749 ( len , str ) DateTimeData date = new DateTimeData ( str , this ) ; int start = NUM00 ; $F52837 ( c , str , start ) if $F22868 ( c ) { throw new SchemaDateTimeException $F72 ; } else { date . utc = ( c == NUM00 ) ? NUM00 : NUM00 ; if ( c == NUM00 && $F30277 ( str , start ) ) { throw new SchemaDateTimeException $F72 ; } } int negate = NUM00 ; if ( date . utc == NUM00 ) $F44867 ( negate ) boolean designator = _BOOL ; int endDate = indexOf ( str , start , len , NUM00 ) ; if ( endDate == - NUM00 ) { endDate = len ; } else if ( durationType == YEARMONTHDURATION_TYPE ) { throw new SchemaDateTimeException $F72 ; } int end = indexOf ( str , start , endDate , NUM00 ) ; if ( end != - NUM00 ) { if ( durationType == DAYTIMEDURATION_TYPE ) { throw new SchemaDateTimeException $F72 ; } date . year = negate * parseInt ( str , start , end ) ; start = end + NUM00 ; designator = _BOOL ; } end = indexOf ( str , start , endDate , NUM00 ) ; if ( end != - NUM00 ) { if ( durationType == DAYTIMEDURATION_TYPE ) { throw new SchemaDateTimeException $F72 ; } date . month = negate * parseInt ( str , start , end ) ; start = end + NUM00 ; designator = _BOOL ; } end = indexOf ( str , start , endDate , NUM00 ) ; if ( end != - NUM00 ) { if ( durationType == YEARMONTHDURATION_TYPE ) { throw new SchemaDateTimeException $F72 ; } date . day = negate * parseInt ( str , start , end ) ; start = end + NUM00 ; designator = _BOOL ; } if ( len == endDate && start != len ) { throw new SchemaDateTimeException $F72 ; } if ( len != endDate ) { end = indexOf ( str , ++ start , len , NUM00 ) ; if ( end != - NUM00 ) { date . hour = negate * parseInt ( str , start , end ) ; start = end + NUM00 ; designator = _BOOL ; } end = indexOf ( str , start , len , NUM00 ) ; if ( end != - NUM00 ) { date . minute = negate * parseInt ( str , start , end ) ; start = end + NUM00 ; designator = _BOOL ; } end = indexOf ( str , start , len , NUM00 ) ; if ( end != - NUM00 ) { date . second = negate * parseSecond ( str , start , end ) ; start = end + NUM00 ; designator = _BOOL ; } if ( start != len || str . charAt ( -- start ) == NUM00 ) { throw new SchemaDateTimeException $F72 ; } } if ( ! designator ) { throw new SchemaDateTimeException $F72 ; } return date ; }
final void copyIntoLocalState ( Operand [ ] _localState ) { localState = new Operand [ _localState . length ] ; $F7057 ( System , _localState , localState ) setLocalKnown ( ) ; }
$F1431 private HashMap < String , DBObject > loadDBObjects ( Class objectClass ) { HashMap < String , DBObject > objectMap = new HashMap < String , DBObject > $F72 ; DBObject dbObject = new DBObject ( this , objectClass ) ; String objectToLoad = s_logger . localizeMessage ( NUM00 ) ; String objectsToLoad = s_logger . localizeMessage ( NUM00 ) ; String sqlLoadHeaders = null ; String sqlLoadContents = null ; if ( dbObject != null ) { objectToLoad = dbObject . getObjectType ( ) ; objectsToLoad = dbObject . getObjectTypes ( ) ; sqlLoadHeaders = dbObject . getLoadHeaderSQL ( ) ; sqlLoadContents = dbObject . getLoadContentSQL ( ) ; } s_logger . log ( Level . FINE , NUM00 , new Object [ ] { objectsToLoad , getDirection ( ) } ) ; PreparedStatementWrapper stmtLoadHeaders = setPreparedStatement ( sqlLoadHeaders ) ; PreparedStatementWrapper stmtLoadContents = setPreparedStatement ( sqlLoadContents ) ; int counter = NUM00 ; if ( dbObject != null ) { String sql = dbObject . getLoadObjectSQL ( ) ; Statement stmt = setStatement ( ) ; ResultSet rs = executeQuery ( stmt , sql ) ; while ( getResultSetNext ( rs ) ) { String s = getResultSetString ( rs , NUM00 ) ; if $F15257 ( objectMap , s ) { DBObject obj = new DBObject ( this , objectClass , s ) ; obj . populate ( stmtLoadHeaders , stmtLoadContents ) ; if ( obj . isPopulated ( ) ) { objectMap . put ( s . toUpperCase ( ) , obj ) ; counter ++ ; } } } releaseResultSet ( rs ) ; releaseStatement ( stmt ) ; } releasePreparedStatement ( stmtLoadHeaders ) ; releasePreparedStatement ( stmtLoadContents ) ; if ( counter == NUM00 ) s_logger . log ( Level . FINE , NUM00 , new Object [ ] { Integer . toString ( counter ) , objectToLoad } ) ; else s_logger . log ( Level . FINE , NUM00 , new Object [ ] { Integer . toString ( counter ) , objectsToLoad } ) ; $F1206 ( s_logger ) return objectMap ; }
protected Object attemptReadResponse ( Connection cnx ) throws Exception { Message msg = createResponseMessage ( ) ; if ( msg != null ) { msg . setComms ( cnx . getSocket ( ) , cnx . getInputStream ( ) , cnx . getOutputStream ( ) , cnx . getCommBuffer ( ) , cnx . getStats ( ) ) ; if ( msg instanceof ChunkedMessage ) { try $F8587 ( processResponse , msg , cnx ) finally { msg . unsetComms ( ) ; processSecureBytes ( cnx , msg ) ; } } else { try { msg . recv ( ) ; } finally { msg . unsetComms ( ) ; processSecureBytes ( cnx , msg ) ; } return processResponse ( msg , cnx ) ; } } else $F1337 }
public synchronized boolean add ( E e , boolean hasNext ) { while ( mInternalQueue . size ( ) >= mMaxSize && ! mClosed ) { notifyAll ( ) ; try { wait ( TIMEOUT ) ; } catch ( InterruptedException e1 ) { mClosed = _BOOL ; ProgramState . checkAbort ( ) ; throw new IllegalStateException ( NUM00 , e1 ) ; } ProgramState . checkAbort ( ) ; } $F9303 ( mClosed , _BOOL ) final boolean wasEmpty = mInternalQueue . isEmpty ( ) ; mHasNext = hasNext ; mInternalQueue . add ( e ) ; $F8801 ( wasEmpty , notifyAll ) return _BOOL ; }
public TranslatableComponent $F72 $F845
public void addPart ( int index , PduPart part ) { $F160092 ( part ) putPartToMaps ( part ) ; mParts . add ( index , part ) ; }
public StrBuilder insert ( int index , boolean value ) { validateIndex ( index ) ; if ( value ) { ensureCapacity ( size + NUM00 ) ; $F27096 ( System , buffer , index , size ) buffer [ index ++ ] = NUM00 ; buffer [ index ++ ] = NUM00 ; buffer [ index ++ ] = NUM00 ; buffer [ index ] = NUM00 ; size += NUM00 ; } else { ensureCapacity ( size + NUM00 ) ; $F27096 ( System , buffer , index , size ) buffer [ index ++ ] = NUM00 ; buffer [ index ++ ] = NUM00 ; buffer [ index ++ ] = NUM00 ; buffer [ index ++ ] = NUM00 ; buffer [ index ] = NUM00 ; size += NUM00 ; } return this ; }
public boolean hasNatureAndWeapon ( Nature nature , String weapon ) { return this . nature == nature && ( ( weapon == null && this . weapon == null ) || ( weapon != null && $F12737 ( weapon , this ) ) ) ; }
public void dump ( String infoMsg ) { storage . getOnlineMembers ( ) ; storage . getOfflineMembers ( ) ; storage . getOfflineAndEqualMembers ( ) ; storage . getMyInitializingID ( ) ; storage . getMyPersistentID ( ) ; $F123708 ( buf ) $F43191 ( infoMsg , buf ) $F84 ( buf ) buf . append ( storage . getMyPersistentID ( ) ) ; $F84 ( buf ) buf . append ( storage . getMyInitializingID ( ) ) ; $F84 ( buf ) for ( PersistentMemberID id : storage . getOnlineMembers ( ) ) $F7227 ( buf , id ) $F84 ( buf ) for ( PersistentMemberID id : storage . getOfflineMembers ( ) ) $F7227 ( buf , id ) $F84 ( buf ) for ( PersistentMemberID id : storage . getOfflineAndEqualMembers ( ) ) $F7227 ( buf , id ) $F62755 ( logger , buf ) }
private $F9341 findNode ( Object key ) { $F61745 ( key ) Comparator < $F35140 > cmp = comparator ; outer : for ( $F589 ) { for ( $F9341 b = findPredecessor ( key , cmp ) , n = b . next ; ; ) { Object v ; int c ; if ( n == null ) $F59811 $F35175 ( f , n ) $F45438 ( n , b ) if ( ( v = n . value ) == null ) { n . helpDelete ( b , f ) ; $F597 } if ( b . value == null || v == n ) $F597 if ( ( c = cpr ( cmp , key , n . key ) ) == NUM00 ) return n ; if ( c < NUM00 ) $F59811 b = n ; n = f ; } } $F1274 }
static Sort parseSort ( long timestampSec , IndexState state , $F6689 fields , $F3803 sortFieldNames , Map < String , FieldDef > dynamicFields ) { List < SortField > sortFields = new ArrayList < SortField > $F72 ; for ( Object _sub : fields ) { Request sub = ( Request ) _sub ; $F21024 ( fieldName , sub ) SortField sf ; $F73441 ( sortFieldNames , fieldName ) if $F3057 ( fieldName ) { sf = SortField . FIELD_DOC ; } else if $F3057 ( fieldName ) { sf = SortField . FIELD_SCORE ; } else { FieldDef fd ; if ( dynamicFields != null ) $F6045 ( fd , dynamicFields , fieldName ) else { fd = null ; } if ( fd == null ) { fd = state . getField ( fieldName ) ; } if ( fd == null ) { sub . fail ( NUM00 , NUM00 + fieldName + NUM00 ) ; fd = null ; } if ( fd . valueSource != null ) { sf = fd . valueSource . getSortField ( sub . getBoolean ( NUM00 ) ) ; } else if ( fd . valueType == FieldDef . FieldValueType . LAT_LON ) { if ( fd . fieldType . docValuesType ( ) == DocValuesType . NONE ) { sub . fail ( NUM00 , NUM00 + fieldName + NUM00 ) ; } Request sub2 = sub . getStruct ( NUM00 ) ; sf = LatLonDocValuesField . newDistanceSort ( fieldName , sub2 . getDouble ( NUM00 ) , sub2 . getDouble ( NUM00 ) ) ; } else { if ( ( fd . fieldType != null && fd . fieldType . docValuesType ( ) == DocValuesType . NONE ) || ( fd . fieldType == null && fd . valueSource == null ) ) { sub . fail ( NUM00 , NUM00 + fieldName + NUM00 ) ; } if ( fd . multiValued ) { String selectorString = sub . getEnum ( NUM00 ) ; if ( fd . valueType == FieldDef . FieldValueType . ATOM ) { SortedSetSelector . Type selector ; if $F3057 ( selectorString ) { selector = SortedSetSelector . Type . MIN ; } else if $F3057 ( selectorString ) { selector = SortedSetSelector . Type . MAX ; } else if $F3057 ( selectorString ) { selector = SortedSetSelector . Type . MIDDLE_MIN ; } else if $F3057 ( selectorString ) { selector = SortedSetSelector . Type . MIDDLE_MAX ; } else { assert _BOOL ; selector = null ; } sf = new SortedSetSortField ( fieldName , sub . getBoolean ( NUM00 ) , selector ) ; } else if ( fd . valueType == FieldDef . FieldValueType . INT ) { sf = new SortedNumericSortField ( fieldName , SortField . Type . INT , sub . getBoolean ( NUM00 ) , parseNumericSelector ( sub , selectorString ) ) ; } else if ( fd . valueType == FieldDef . FieldValueType . LONG ) { sf = new SortedNumericSortField ( fieldName , SortField . Type . LONG , sub . getBoolean ( NUM00 ) , parseNumericSelector ( sub , selectorString ) ) ; } else if ( fd . valueType == FieldDef . FieldValueType . FLOAT ) { sf = new SortedNumericSortField ( fieldName , SortField . Type . FLOAT , sub . getBoolean ( NUM00 ) , parseNumericSelector ( sub , selectorString ) ) ; } else if ( fd . valueType == FieldDef . FieldValueType . DOUBLE ) { sf = new SortedNumericSortField ( fieldName , SortField . Type . DOUBLE , sub . getBoolean ( NUM00 ) , parseNumericSelector ( sub , selectorString ) ) ; } else { sub . fail ( NUM00 , NUM00 + fieldName + NUM00 + fd . valueType ) ; assert _BOOL ; sf = null ; } } else { SortField . Type sortType ; if ( fd . valueType == FieldDef . FieldValueType . ATOM ) { sortType = SortField . Type . "STRING" ; } else if ( fd . valueType == FieldDef . FieldValueType . LONG || fd . valueType == FieldDef . FieldValueType . DATE_TIME ) { sortType = SortField . Type . LONG ; } else if ( fd . valueType == FieldDef . FieldValueType . INT ) { sortType = SortField . Type . INT ; } else if ( fd . valueType == FieldDef . FieldValueType . DOUBLE ) { sortType = SortField . Type . DOUBLE ; } else if ( fd . valueType == FieldDef . FieldValueType . FLOAT ) { sortType = SortField . Type . FLOAT ; } else { sub . fail ( NUM00 , NUM00 + fieldName + NUM00 + fd . valueType ) ; assert _BOOL ; sortType = null ; } sf = new SortField ( fieldName , sortType , sub . getBoolean ( NUM00 ) ) ; } } boolean hasMissingLast = sub . hasParam ( NUM00 ) ; boolean missingLast = sub . getBoolean ( NUM00 ) ; if ( fd . valueType == FieldDef . FieldValueType . ATOM ) { if ( missingLast ) { sf . setMissingValue ( SortField . <missing ';'> NUM00 <missing ';'> _LAST ) ; } else { sf . setMissingValue ( SortField . <missing ';'> NUM00 <missing ';'> _FIRST ) ; } } else if ( fd . valueType == FieldDef . FieldValueType . INT ) { sf . setMissingValue ( missingLast ? Integer . MAX_VALUE : Integer . MIN_VALUE ) ; } else if ( fd . valueType == FieldDef . FieldValueType . LONG ) { sf . setMissingValue ( missingLast ? Long . MAX_VALUE : Long . MIN_VALUE ) ; } else if ( fd . valueType == FieldDef . FieldValueType . FLOAT ) { sf . setMissingValue ( missingLast ? Float . POSITIVE_INFINITY : Float . NEGATIVE_INFINITY ) ; } else if ( fd . valueType == FieldDef . FieldValueType . DOUBLE ) { sf . setMissingValue ( missingLast ? Double . POSITIVE_INFINITY : Double . NEGATIVE_INFINITY ) ; } else if ( hasMissingLast ) { sub . fail ( NUM00 , NUM00 + fieldName + NUM00 + sf . getType ( ) ) ; } } sortFields . add ( sf ) ; } return new Sort ( sortFields . toArray ( new SortField $F2313 ( sortFields ) ) ) ; }
public synchronized void open $F72 $F845
$F1113 private Optional < TypeConversion > findConversionFromDbValue ( $F1113 Type source , $F1113 Type target ) { if ( isAssignable ( target , source ) ) return Optional . of ( TypeConversion . identity ( ) ) ; Optional < TypeConversion > directConversion = typeConversionRegistry . findConversionFromDbValue ( source , target ) ; if $F16464 ( directConversion ) return directConversion ; Optional < TypeConversion > arrayConversion = findArrayConversion ( source , target ) ; if $F16464 ( arrayConversion ) return arrayConversion ; Optional < TypeConversion > optionalConversion = findOptionalConversion ( source , target ) ; if $F16464 ( optionalConversion ) return optionalConversion ; Optional < TypeConversion > enumConversion = findEnumConversion ( target ) ; if $F16464 ( enumConversion ) return enumConversion ; $F21169 ( Optional ) }
private boolean advanceApiUpTo ( TreeSet < AreaPanelInfo > sortedApiTree , AreaPanelInfo api , int time ) { AreaPanel ap = api . ap ( ) ; TimeTree rootTt = ap . getTimeTree ( ) ; TimeTree tt = rootTt . getEncompassigTimeTreeOrMaxTimeTreeBeforeTime ( time , _BOOL ) ; if ( tt == null || tt . id == api . currTtId ) return _BOOL ; sortedApiTree . remove ( api ) ; if ( api . setTt ( tt , Integer . MAX_VALUE ) ) sortedApiTree . add ( api ) ; return _BOOL ; }
$F100301 ( RequestMethod ) $F4586 public RestWrapper update ( $F100302 $F100303 UserRoles userRoles , BindingResult bindingResult , Principal principal ) { RestWrapper restWrapper = null ; $F100315 ( bindingResult , bindingResultError ) try { com . wipro . ats . bdre . md . dao . jpa . UserRoles jpaUserRoles = new com . wipro . ats . bdre . md . dao . jpa . UserRoles $F72 ; jpaUserRoles . setUserRoleId ( userRoles . getUserRoleId ( ) ) ; jpaUserRoles . setRole ( userRoles . getRole ( ) ) ; Users users = new Users $F72 ; users . setUsername ( userRoles . getUsername ( ) ) ; jpaUserRoles . setUsers ( users ) ; userRolesDAO . update ( jpaUserRoles ) ; $F4608 ( restWrapper , userRoles , RestWrapper ) LOGGER . info ( NUM00 + userRoles . getUserRoleId ( ) + NUM00 + principal . getName ( ) + userRoles ) ; } $F20495 ( LOGGER , e , restWrapper , RestWrapper ) return restWrapper ; }
private void sendRequestOption $F72 throws IOException { String request = NUM00 + mParameters . host + NUM00 + mParameters . port + mParameters . path + NUM00 + addHeaders ( ) ; Log . i ( TAG , $F31599 ( request ) ) ; $F42213 ( mOutputStream , request ) Response . parseResponse ( mBufferedReader ) ; }
$F1 public Result doComparisonTest ( final Properties properties ) throws Exception { final long timeout = Long . parseLong ( properties . getProperty ( TestOptions . TIMEOUT ) ) ; final int nresources = Integer . parseInt ( properties . getProperty ( TestOptions . NRESOURCES ) ) ; final int minLocks = Integer . parseInt ( properties . getProperty ( TestOptions . MIN_LOCKS ) ) ; final int maxLocks = Integer . parseInt ( properties . getProperty ( TestOptions . MAX_LOCKS ) ) ; final int ntrials = Integer . parseInt ( properties . getProperty ( TestOptions . NTRIALS ) ) ; final int keyLen = Integer . parseInt ( properties . getProperty ( TestOptions . KEYLEN ) ) ; final int nops = Integer . parseInt ( properties . getProperty ( TestOptions . NOPS ) ) ; final double failureRate = Double . parseDouble ( properties . getProperty ( TestOptions . FAILURE_RATE ) ) ; Result result = doConcurrentClientTest ( journal , timeout , nresources , minLocks , maxLocks , ntrials , keyLen , nops , failureRate ) ; return result ; }
public static void printThreadInfo ( PrintWriter stream , String title ) { final int STACK_DEPTH = NUM00 ; boolean contention = threadBean . isThreadContentionMonitoringEnabled ( ) ; $F2469 threadIds = threadBean . getAllThreadIds ( ) ; $F7957 ( stream , title ) stream . println ( threadIds . length + NUM00 ) ; for ( long tid : threadIds ) { ThreadInfo info = threadBean . getThreadInfo ( tid , STACK_DEPTH ) ; if ( info == null ) { $F8438 ( stream ) $F598 } stream . println ( NUM00 + getTaskName ( info . getThreadId ( ) , info . getThreadName ( ) ) + NUM00 ) ; Thread . State state = info . getThreadState ( ) ; $F7957 ( stream , state ) stream . println ( NUM00 + info . getBlockedCount ( ) ) ; stream . println ( NUM00 + info . getWaitedCount ( ) ) ; if ( contention ) { stream . println ( NUM00 + info . getBlockedTime ( ) ) ; stream . println ( NUM00 + info . getWaitedTime ( ) ) ; } if ( state == Thread . State . WAITING ) { stream . println ( NUM00 + info . getLockName ( ) ) ; } else if ( state == Thread . State . BLOCKED ) { stream . println ( NUM00 + info . getLockName ( ) ) ; stream . println ( NUM00 + getTaskName ( info . getLockOwnerId ( ) , info . getLockOwnerName ( ) ) ) ; } $F8438 ( stream ) for ( StackTraceElement frame : info . getStackTrace ( ) ) { stream . println ( $F368 ( frame ) ) ; } } $F1206 ( stream ) }
public void addDelete ( IResource delete ) { if ( fDelete == null ) fDelete = new ArrayList $F24164 $F989 ; fDelete . add ( delete ) ; if ( fIgnoreCount == NUM00 ) { internalAdd ( new DeleteDescription ( delete ) ) ; } }
public static double max $F30455 ( a , b ) { if ( a > b ) { return a ; } if ( a < b ) { return b ; } if ( a != b ) $F6623 ( Double ) $F23078 ( bits , Double , a ) $F6482 ( bits , b ) return a ; }
$F26776 ( container , mContainers )
$F1 public void writeExternal ( ObjectOutput out ) throws IOException { super . writeExternal ( out ) ; out . writeObject ( approximation ) ; }
public void add ( String methodName , $F240647 parameters ) { chain . add ( new DotExpressionItem ( methodName , parameters , _BOOL ) ) ; }
public static Request request $F72 $F1522 ( threadLocal )
public static String createHash ( String password ) throws $F36681 $F36684 ( createHash , password )
private void scheduleCommercial ( int length ) { Long delay = commercialDelay . getSettingValue ( ) ; if ( delay == null ) { setCommercialResult ( NUM00 ) ; clearCommercialButtonsSelection ( ) ; } else { scheduledCommercialTime = System . currentTimeMillis ( ) + delay * NUM00 ; scheduledCommercialLength = length ; update ( ) ; } }
public int hashCode $F72 { $F39428 ( bits , Double , m00 ) bits = bits * NUM00 + Double . doubleToLongBits ( m01 ) ; bits = bits * NUM00 + Double . doubleToLongBits ( m02 ) ; bits = bits * NUM00 + Double . doubleToLongBits ( m10 ) ; bits = bits * NUM00 + Double . doubleToLongBits ( m11 ) ; bits = bits * NUM00 + Double . doubleToLongBits ( m12 ) ; return ( $F1047 ( bits ) ^ $F13507 ( bits ) ) ; }
public void unsubscribe ( AWSIotMessage message ) throws AWSIotException { try { unsubscribeTopic ( message ) ; } catch ( AwsIotRetryableException e ) { if ( client . getMaxOfflineQueueSize ( ) > NUM00 && unsubscribeQueue . size ( ) < client . getMaxOfflineQueueSize ( ) ) $F207 ( unsubscribeQueue , message ) else { LOGGER . info ( NUM00 + message . getTopic ( ) ) ; throw new AWSIotException ( e ) ; } } }
public static boolean isDigitalUnix $F72 $F144200 ( osName )
public void clientDisconnect $F72 { try { OutHttpApp responseStream = _responseStream ; $F2727 ( responseStream ) } catch ( Exception e ) $F24254 ( log , Level , e ) ConnectionTcp conn = connTcp ( ) ; if ( conn != null ) { conn . clientDisconnect ( ) ; } killKeepalive ( NUM00 ) ; }
public boolean endsWith ( Name n ) { if ( n instanceof CompoundName ) { return ( impl . endsWith ( n . size ( ) , n . getAll ( ) ) ) ; } else { return _BOOL ; } }
private int calculateTotalHeight ( float starSize , int numberOfStars , float starsSeparation , boolean padding ) { return Math . round ( starSize ) + ( padding ? getPaddingTop ( ) + getPaddingBottom ( ) : NUM00 ) ; }
$F1431 private static boolean isRegex ( String s ) { try { Pattern . compile ( s ) ; } catch ( PatternSyntaxException e ) { return _BOOL ; } return _BOOL ; }
$F45572 ( context , intent , pm , handlers , PackageManager , _BOOL , resolveInfo , filter , Log , TAG )
public static void flush $F72 { clearBuffer ( ) ; try $F29882 ( out ) $F12241 ( e ) }
private String attachFooterToText ( String content ) throws MessagingException , IOException { $F7542 ( builder , content ) ensureTrailingCarriageReturn ( content , builder ) ; $F16690 ( builder , getFooterText ) $F92 ( builder ) }
public static Sentence make ( final Connective connective , final Sentence ... children2 ) $F38616 ( make , connective , Arrays , children2 )
public final void testIsStatePreserved1 $F72 { $F65113 ( encodedKey ) EncodedKeySpec meks = new MyEncodedKeySpec ( encodedKey ) ; $F65119 ( encodedKey ) $F46943 ( ek , meks ) assertTrue ( ek [ NUM00 ] == $F19905 ) ; }
public synchronized void init $F72 { init = _BOOL ; for ( String mapName : store . getMapNames ( ) ) { if $F3106 ( mapName ) { MVMap < Object , Integer > temp = openTempMap ( mapName ) ; store . removeMap ( temp ) ; } } synchronized ( undoLog ) { if $F3817 ( undoLog ) { for ( Long key : undoLog . keySet ( ) ) { int transactionId = getTransactionId ( key ) ; openTransactions . set ( transactionId ) ; } } } }
public static TDoubleDoubleHashMap createCumulativeHistogram ( TDoubleDoubleHashMap histogram ) { $F1986 keys = histogram . keys ( ) ; Arrays . sort ( keys ) ; double sum = NUM00 ; for ( double key : keys ) { $F28095 ( val , histogram , key ) sum += val ; histogram . put ( key , sum ) ; } return histogram ; }
public synchronized void updateIconsForPkg ( String packageName , UserHandleCompat user ) { removeIconsForPkg ( packageName , user ) ; try { PackageInfo info = mPackageManager . getPackageInfo ( packageName , PackageManager . GET_UNINSTALLED_PACKAGES ) ; long userSerial = mUserManager . getSerialNumberForUser ( user ) ; for ( LauncherActivityInfoCompat app : mLauncherApps . getActivityList ( packageName , user ) ) { addIconToDBAndMemCache ( app , info , userSerial ) ; } } catch ( NameNotFoundException e ) { $F96563 ( Log , TAG , e ) $F665 } }
protected DateTimeData parse ( String str ) throws SchemaDateTimeException { DateTimeData date = new DateTimeData ( str , this ) ; $F1749 ( len , str ) int end = indexOf ( str , NUM00 , len , NUM00 ) ; int dateEnd = getDate ( str , NUM00 , end , date ) ; getTime ( str , end + NUM00 , len , date ) ; if ( dateEnd != end ) { throw new RuntimeException ( str + NUM00 + NUM00 ) ; } validateDateTime ( date ) ; saveUnnormalized ( date ) ; if ( date . utc != NUM00 && date . utc != NUM00 ) { normalize ( date ) ; } return date ; }
void addAttributeValues ( String attrName , Set values ) throws SMSException { if ( attrName != null && values != null && $F1030 ( values ) ) { Map attrs = getAttributes ( ) ; $F125374 ( origValues , attrs , attrName ) $F46709 ( newValues , values ) if $F1032 ( origValues ) $F21926 ( newValues , origValues ) $F28017 ( newAttrs ) newAttrs . put ( attrName , newValues ) ; setAttributes ( newAttrs ) ; } }
public void test_parkUntil_3 $F72 throws Exception { CyclicBarrier barrier = new CyclicBarrier $F989 ; Parker parker = new Parker ( barrier , _BOOL , NUM00 ) ; $F24440 ( parkerThread , parker ) UNSAFE . unpark ( parkerThread ) ; $F2346 ( parkerThread ) parker . assertDurationIsInRange ( NUM00 ) ; $F14454 ( parkerThread ) }
SegmentManager commitIndex ( long commitIndex ) { this . commitIndex = Math . max ( this . commitIndex , commitIndex ) ; return this ; }
public void finishFragments $F72 { for ( Fragment comment : closingFragments ) { finishFragment ( comment ) ; } $F725 ( closingFragments ) }
private final void _writeUTF8Segments $F24576 ( utf8 , offset , totalLen ) throws IOException , JsonGenerationException { do { $F17565 ( len , Math , _outputMaxContiguous , totalLen ) _writeUTF8Segment ( utf8 , offset , len ) ; offset += len ; totalLen -= len ; } while ( totalLen > NUM00 ) ; }
public static String hexToStringNoException ( final String data ) { try { return ConversionUtils . arrayToString ( $F142805 ( Hex , data ) ) ; } catch ( DecoderException e ) $F2455 }
public Collection $F6869 matchingScenariosAndExamples ( final Feature feature ) { final List < ScenarioDefinition > allScenarios = feature . getScenarioDefinitions ( ) ; final $F27878 matchingScenariosAndExamples = new LinkedList $F6869 $F72 ; for ( final ScenarioDefinition scenario : allScenarios ) { final Set < Tag > allTagsForScenario = new HashSet < Tag > ( scenario . getTags ( ) ) ; allTagsForScenario . addAll ( feature . getTags ( ) ) ; if ( scenario instanceof ScenarioOutline ) { matchingScenariosAndExamples . addAll ( matchingExamples ( ( ScenarioOutline ) scenario , allTagsForScenario ) ) ; } else { if ( matches ( allTagsForScenario ) ) $F207 ( matchingScenariosAndExamples , scenario ) } } return matchingScenariosAndExamples ; }
private boolean traverse ( Tree tree , NodeRef node , $F2027 operatorNumber , boolean flip ) { boolean update = _BOOL ; int nodeNum = node . getNumber ( ) ; $F59939 ( parent , tree , node ) if ( operatorNumber != null ) { $F83036 ( operatorNumber ) } if ( parent != null && updateNode [ nodeNum ] ) { final double branchRate = branchRateModel . getBranchRate ( tree , node ) ; final double branchTime = branchRate * ( tree . getNodeHeight ( parent ) - tree . getNodeHeight ( node ) ) ; if ( branchTime < NUM00 ) $F1666 ( branchTime ) if ( flip ) { matrixBufferHelper . flipOffset ( nodeNum ) ; } final int eigenIndex = NUM00 ; final int updateCount = branchUpdateCount [ eigenIndex ] ; matrixUpdateIndices [ eigenIndex ] [ updateCount ] = matrixBufferHelper . getOffsetIndex ( nodeNum ) ; branchLengths [ eigenIndex ] [ updateCount ] = branchTime ; branchUpdateCount [ eigenIndex ] ++ ; update = _BOOL ; } if ( ! tree . isExternal ( node ) ) { $F9666 ( child1 , tree , node ) final $F2027 op1 = { - NUM00 } ; final boolean update1 = traverse ( tree , child1 , op1 , flip ) ; $F9666 ( child2 , tree , node ) final $F2027 op2 = { - NUM00 } ; final boolean update2 = traverse ( tree , child2 , op2 , flip ) ; if ( update1 || update2 ) { int x = operationCount [ operationListCount ] * Beagle . OPERATION_TUPLE_SIZE ; if ( flip ) { partialBufferHelper . flipOffset ( nodeNum ) ; } final $F2027 operations = this . operations [ operationListCount ] ; operations [ x ] = partialBufferHelper . getOffsetIndex ( nodeNum ) ; if ( useScaleFactors ) { int n = nodeNum - tipCount ; if ( recomputeScaleFactors ) { scaleBufferHelper . flipOffset ( n ) ; scaleBufferIndices [ n ] = scaleBufferHelper . getOffsetIndex ( n ) ; operations [ x + NUM00 ] = scaleBufferIndices [ n ] ; operations [ x + NUM00 ] = Beagle . NONE ; } else { operations [ x + NUM00 ] = Beagle . NONE ; operations [ x + NUM00 ] = scaleBufferIndices [ n ] ; } } else { if ( useAutoScaling ) { scaleBufferIndices [ nodeNum - tipCount ] = partialBufferHelper . getOffsetIndex ( nodeNum ) ; } operations [ x + NUM00 ] = Beagle . NONE ; operations [ x + NUM00 ] = Beagle . NONE ; } operations [ x + NUM00 ] = partialBufferHelper . getOffsetIndex ( child1 . getNumber ( ) ) ; operations [ x + NUM00 ] = matrixBufferHelper . getOffsetIndex ( child1 . getNumber ( ) ) ; operations [ x + NUM00 ] = partialBufferHelper . getOffsetIndex ( child2 . getNumber ( ) ) ; operations [ x + NUM00 ] = matrixBufferHelper . getOffsetIndex ( child2 . getNumber ( ) ) ; operationCount [ operationListCount ] ++ ; update = _BOOL ; } } return update ; }
public static String rate2speed ( double rate ) { return NUMBER_FORMAT0 . format ( rate ) + NUM00 + GENERAL_UNIT_KBPSEC ; }
public long next $F72 { long result = - NUM00 ; if ( cache < NUM00 && bufferElements > NUM00 ) { result = getNextFromBuffer ( ) ; bufferElements -- ; } else { result = cache ; cache = - NUM00 ; } if $F5973 ( cs ) { $F14662 ( first , cs ) if ( result > first || result == - NUM00 ) { cs . remove ( first ) ; cache = result ; result = first ; } } if ( result == - NUM00 ) $F6747 Assert . check ( previous < result , EC . GENERAL ) ; previous = result ; readElements ++ ; return result ; }
public boolean isSetQueueSize $F72 $F8314 ( __isset_bit_vector , __QUEUESIZE_ISSET_ID )
public void requestContactCapabilities ( $F222029 contacts ) throws RcsServiceNotRegisteredException , RcsServiceNotAvailableException , RcsGenericException { $F161627 ( mApi ) if $F4251 ( contacts ) { throw new RcsIllegalArgumentException $F580 ; } try { mApi . requestContactCapabilities2 ( $F7044 ( contacts ) ) ; } catch ( Exception e ) { RcsIllegalArgumentException . assertException ( e ) ; RcsServiceNotRegisteredException . assertException ( e ) ; throw new RcsGenericException ( e ) ; } }
private static String toString ( double coeff ) { final String c = Double . toString ( coeff ) ; if $F8991 ( c ) $F16083 ( c ) else { return c ; } }
public static final IndexCreatedEvent createTestIndexCreationStatusWithBulkDataHit $F72 { IndexCreatedEvent toReturn = new IndexCreatedEvent ( UUID . randomUUID ( ) , $F4094 , $F4094 , createTestIndexWithBulkDataHit ( ) , NUM00 , NUM00 ) ; toReturn . calculateValues ( ) ; return toReturn ; }
public boolean validate ( String value , String rule ) { return $F8397 ( value , rule ) ; }
public String findURIFromDoc ( int owner ) { $F2199 ( n , m_sourceTree ) for ( $F119 ( i , n ) ) { SourceTree sTree = ( SourceTree ) m_sourceTree . elementAt ( i ) ; if ( owner == sTree . m_root ) return sTree . m_url ; } $F1274 }
static public final int random ( int start , int end ) { return start + random . nextInt ( end - start + NUM00 ) ; }
$F73603 ( desc , c , pop , Type )
public boolean offer ( E event , int taskId ) throws InterruptedException { assertNotDone ( ) ; if $F237308 ( predicate , event ) { this . matched [ taskId ] = _BOOL ; for ( boolean match : matched ) { $F25096 ( match , _BOOL ) } responseQueue . put ( new EventHolder ( event ) ) ; done = _BOOL ; return _BOOL ; } else return _BOOL ; }
$F4486 ( type , outputStack , n , outputStackTop , t , Math , System , top , owner )
private static AlgorithmParameterSpec algorithmParameterSpec $F72 { final SecureRandom random = $F5607 ; final $F96 bytes = new byte [ CcAes . BLOCK ] ; random . nextBytes ( bytes ) ; return new IvParameterSpec ( bytes ) ; }
static ZoneOffsetTransitionRule readExternal ( DataInput in ) throws IOException { $F5952 ( data , in ) Month month = Month . of ( data > > > NUM00 ) ; int dom = ( $F155120 ( data ) > > > NUM00 ) - NUM00 ; int dowByte = $F155120 ( data ) > > > NUM00 ; DayOfWeek dow = dowByte == NUM00 ? null : DayOfWeek . of ( dowByte ) ; int timeByte = $F155120 ( data ) > > > NUM00 ; TimeDefinition defn = TimeDefinition . values ( ) [ $F155120 ( data ) > > > NUM00 ] ; int stdByte = $F155120 ( data ) > > > NUM00 ; int beforeByte = $F155120 ( data ) > > > NUM00 ; $F74266 ( afterByte , data ) LocalTime time = ( timeByte == NUM00 ? LocalTime . ofSecondOfDay ( in . readInt ( ) ) : LocalTime . of ( timeByte % NUM00 , NUM00 ) ) ; ZoneOffset std = ( stdByte == NUM00 ? ZoneOffset . ofTotalSeconds ( in . readInt ( ) ) : ZoneOffset . ofTotalSeconds ( ( stdByte - NUM00 ) * NUM00 ) ) ; ZoneOffset before = ( beforeByte == NUM00 ? ZoneOffset . ofTotalSeconds ( in . readInt ( ) ) : ZoneOffset . ofTotalSeconds ( std . getTotalSeconds ( ) + beforeByte * NUM00 ) ) ; ZoneOffset after = ( afterByte == NUM00 ? ZoneOffset . ofTotalSeconds ( in . readInt ( ) ) : ZoneOffset . ofTotalSeconds ( std . getTotalSeconds ( ) + afterByte * NUM00 ) ) ; return ZoneOffsetTransitionRule . of ( month , dom , dow , time , timeByte == NUM00 , defn , std , before , after ) ; }
protected boolean isTokenChar ( char ch ) { if $F255966 ( Character , ch ) return _BOOL ; if ( Character . isISOControl ( ch ) ) return _BOOL ; $F7450 ( isHttpSeparator , ch , _BOOL ) return _BOOL ; }
public void drawLinesAndPoints ( Graphics2D g2d , ArrayList < ComparableLabel > orderedDateSet , HashMap < ComparableLabel , Integer > dataPoints , long yMaxMark ) { int sectionWidth = this . graphWidth / orderedDateSet . size ( ) ; int xOffset = sectionWidth / NUM00 ; int yPrevValue ; int yCurrentValue ; float prevOffsetPerc ; float currentOffsetPerc ; g2d . setColor ( this . lineColor ) ; for ( $F2277 ( i , orderedDateSet ) ) { if ( i != NUM00 ) { yPrevValue = dataPoints . get ( orderedDateSet . get ( i - NUM00 ) ) ; yCurrentValue = $F67701 ( dataPoints , orderedDateSet , i ) ; prevOffsetPerc = yPrevValue / ( float ) yMaxMark ; currentOffsetPerc = yCurrentValue / ( float ) yMaxMark ; g2d . drawLine ( this . graphLeft + ( i - NUM00 ) * sectionWidth + xOffset , this . graphBottom - Math . round ( prevOffsetPerc * this . graphHeight ) , this . graphLeft + i * sectionWidth + xOffset , Math . round ( this . graphBottom - currentOffsetPerc * this . graphHeight ) ) ; } else { yCurrentValue = $F67701 ( dataPoints , orderedDateSet , i ) ; currentOffsetPerc = yCurrentValue / ( float ) yMaxMark ; g2d . fillOval ( this . graphLeft + ( i ) * sectionWidth + xOffset - this . pointRadius , this . graphBottom - Math . round ( currentOffsetPerc * this . graphHeight ) - this . pointRadius , this . pointRadius * NUM00 , this . pointRadius * NUM00 ) ; } } }
$F20664 public void elementType $F21324 ( name , model , memberOf , flags ) { ElementType e = new ElementType ( name , model , memberOf , flags , this ) ; theElementTypes . put ( name . toLowerCase ( ) , e ) ; if ( memberOf == M_ROOT ) theRoot = e ; }
$F29442 ( cls , makeLogTag )
final public void println ( String s ) { Writer out = this . out ; $F8249 ( out ) try { if ( s == null ) $F17918 ( out , _nullChars ) else $F170077 ( out , s ) $F17918 ( out , _newline ) } $F53427 ( log , Level , e ) }
private static URI refragUri ( URI uri , String frag ) throws URISyntaxException { return new URI ( uri . getScheme ( ) , uri . getSchemeSpecificPart ( ) , frag ) ; }
$F1 public void paint ( final PPaintContext ppc ) { final Paint paint = getPaint ( ) ; if ( paint != null ) { final Graphics2D g2 = ppc . getGraphics ( ) ; final PBounds bounds = getUnionOfChildrenBounds ( null ) ; if ( fillBackground ) { g2 . setPaint ( backgroundColor ) ; g2 . fillRect ( $F52991 ( bounds ) - outlinePadding , $F52994 ( bounds ) - outlinePadding , $F63353 ( bounds ) + NUM00 * outlinePadding , $F63349 ( bounds ) + NUM00 * outlinePadding ) ; } if ( drawOutline ) { g2 . setPaint ( lineColor ) ; g2 . drawRoundRect ( $F52991 ( bounds ) - outlinePadding , $F52994 ( bounds ) - outlinePadding , $F63353 ( bounds ) + NUM00 * outlinePadding , $F63349 ( bounds ) + NUM00 * outlinePadding , ROUNDING_WIDTH_HEIGHT , ROUNDING_WIDTH_HEIGHT ) ; } } }
public final synchronized $F96 toByteArray $F72 { ByteArrayOutputStream baos = null ; DataOutputStream dos = null ; try { baos = new ByteArrayOutputStream $F989 ; dos = new DataOutputStream ( baos ) ; game . writeToStream ( dos ) ; $F1206 ( dos ) $F11316 ( baos ) } $F20154 finally { if ( dos != null ) $F18072 ( dos ) if ( baos != null ) $F18072 ( baos ) } }
public void addImport ( $F1113 PsiElement importable , $F1113 PsiFile file , $F5466 PyImportElement importElement ) { myImports . add ( new ImportCandidateHolder ( importable , file , importElement , null ) ) ; }
protected final void drawArrowHead ( Graphics2D g , int x , int y , int sgn ) { g . setStroke ( Strokes . getStroke ( StrokeType . SOLID , NUM00 ) ) ; int size = diagram ( ) . arrowSize ; switch ( headType ) { case CLOSED : Polygon p = new Polygon ( new int [ ] { x , x + sgn * size , x + sgn * size , x } , new int [ ] { y , y - size , y + size , y } , NUM00 ) ; g . fillPolygon ( p ) ; $F597 case OPEN : g . drawLine ( x , y , x + sgn * size , y - size ) ; g . drawLine ( x , y , x + sgn * size , y + size ) ; $F597 case ROUNDED : int left = sgn == - NUM00 ? x - NUM00 * size : x ; int top = y - size ; g . fillArc ( left , top , size * NUM00 , size * NUM00 , NUM00 , sgn * NUM00 ) ; } }
public void classLoaderInit ( DynamicClassLoader loader ) { EnvLoaderListener listener = _listenerRef . get ( ) ; if ( listener != null ) listener . classLoaderInit ( loader ) ; }
private $F131 unmarshalParametersChecked ( DeserializationChecker checker , Method method , MarshalInputStream in ) throws $F6427 { $F109722 ( callID , methodCallIDCount ) MyChecker myChecker = new MyChecker ( checker , method , callID ) ; in . setStreamChecker ( myChecker ) ; try { $F272051 ( types , method ) $F193824 ( values , types ) for ( $F1139 ( i , types ) ) { myChecker . setIndex ( i ) ; values [ i ] = unmarshalValue ( types [ i ] , in ) ; } myChecker . end ( callID ) ; return values ; } finally { in . setStreamChecker ( null ) ; } }
private void loadDataFromService $F72 { List < ExceptionSensorData > exData = null ; if ( $F272757 ( fromDate , toDate ) ) { exData = dataAccessService . getUngroupedExceptionOverview ( template , limit , fromDate , toDate , resultComparator ) ; } else { exData = dataAccessService . getUngroupedExceptionOverview ( template , limit , resultComparator ) ; } $F725 ( exceptionSensorData ) if ( null != exData ) $F21926 ( exceptionSensorData , exData ) }
public static String createResourceName ( String resource , Locale locale , boolean removeExtension ) { String resourceName = resource ; if ( removeExtension ) { if $F8991 ( resourceName ) $F14301 ( resourceName ) else if $F8991 ( resourceName ) $F14301 ( resourceName ) } if ( locale != null ) { if ( UtilValidate . isNotEmpty ( locale . toString ( ) ) ) $F15894 ( resourceName , locale ) } return resourceName ; }
public static String toString ( $F131 objects , Displayable renderer ) { $F1747 ( objects ) $F75240 ( buffer ) for ( $F1139 ( i , objects ) ) { $F96530 ( i , buffer ) buffer . append ( renderer . displayString ( objects [ i ] ) ) ; } $F92 ( buffer ) }
void drawIcon ( Graphics g , int ax , int ay , int aw , int ah , float align , Component c ) { int gap = isLeftToRight ? - ( img . getIconWidth ( ) + bulletgap ) : ( aw + bulletgap ) ; int x = ax + gap ; int y = Math . max ( ay , ay + $F2354 ( align , ah ) - img . getIconHeight ( ) ) ; img . paintIcon ( c , g , x , y ) ; }
public int syncQuery ( String query ) { $F657 ( start , System ) int modified = execute ( NUM00 , UPDATE_COUNT_RESPONSE , query ) ; log . debug ( NUM00 , System . currentTimeMillis ( ) - start , modified ) ; return modified ; }
public static void fullReset $F72 { resetRuntime ( ) ; $F54044 ( readProperties ) }
private BufferedImage toBufferedImage ( final Image image ) { if ( image instanceof BufferedImage ) { return ( BufferedImage ) image ; } if ( image instanceof VolatileImage ) { VolatileImage volatileImage = ( VolatileImage ) image ; return volatileImage . getSnapshot ( ) ; } GraphicsEnvironment graphicsEnvironment = GraphicsEnvironment . getLocalGraphicsEnvironment ( ) ; GraphicsDevice graphicsDevice = graphicsEnvironment . getDefaultScreenDevice ( ) ; GraphicsConfiguration graphicsConfiguration = graphicsDevice . getDefaultConfiguration ( ) ; BufferedImage bufferedImage = graphicsConfiguration . createCompatibleImage ( image . getWidth ( null ) , image . getHeight ( null ) ) ; $F5115 ( g , bufferedImage ) $F37616 ( g , image ) $F355 ( g ) return bufferedImage ; }
public static void writeByteArrayToFile ( File file , $F96 data , boolean append ) throws IOException { OutputStream out = null ; try { out = openOutputStream ( file , append ) ; out . write ( data ) ; $F59 ( out ) } $F18090 ( IOUtils , out ) }
public final boolean isCancelled $F72 { if ( cancelled ) $F1941 ( pass , cancelled ) else $F1210 ( fail ) return cancelled ; }
public void remove ( DirectedEdge de ) $F106 ( outEdges , de )
$F1 public boolean eventGeneratable ( String eventName ) { $F1933 ( m_listenee , _BOOL ) if $F78362 ( eventName ) { return _BOOL ; } if ( m_listenee instanceof DataSource ) { if ( m_listenee instanceof EventConstraints ) { EventConstraints ec = ( EventConstraints ) m_listenee ; return ec . eventGeneratable ( eventName ) ; } } if ( m_listenee instanceof TrainingSetProducer ) { if ( m_listenee instanceof EventConstraints ) { EventConstraints ec = ( EventConstraints ) m_listenee ; if $F1264 ( eventName ) { return _BOOL ; } if ( ! ec . eventGeneratable ( NUM00 ) ) { return _BOOL ; } } } if ( m_listenee instanceof TestSetProducer ) { if ( m_listenee instanceof EventConstraints ) { EventConstraints ec = ( EventConstraints ) m_listenee ; if $F1264 ( eventName ) { return _BOOL ; } if ( ! ec . eventGeneratable ( NUM00 ) ) { return _BOOL ; } } } return _BOOL ; }
$F1 protected void onMessageOnProducerThread ( T msg ) { $F8934 ( _lock ) try { if $F2979 ( _pending ) { _queue . schedule ( _flushRunnable , _interval , _timeUnit ) ; } _pending . add ( msg ) ; } $F796 ( _lock ) }
public Builder untilDate ( Date date ) { untilDate = QUERY_DATE . format ( date ) ; return this ; }
private boolean isInThumbRange ( float touchX , double normalizedThumbValue ) { return Math . abs ( touchX - normalizedToScreen ( normalizedThumbValue ) ) <= mThumbHalfWidth ; }
public static void cleanupAllFiles ( FileSystem fileSystem , String BaseUri ) throws IOException { try { if ( fileSystem != null ) { $F424 ( rootDir , BaseUri ) FileStatus [ ] files = fileSystem . listStatus ( rootDir ) ; for ( FileStatus file : files ) { fileSystem . delete ( file . getPath ( ) , _BOOL ) ; } } } catch ( Exception e ) $F21338 ( LOG ) }
$F1 public boolean canBeCollidedWith $F72 { return _BOOL ; }
public void update ( long duration , TimeUnit unit ) { update ( unit . toNanos ( duration ) ) ; }
public FileInputStream openRead $F72 throws FileNotFoundException { if $F3428 ( mBackupName ) { $F1900 ( mBaseName ) mBackupName . renameTo ( mBaseName ) ; } $F11000 ( mBaseName ) }
public void submit ( String queueName , DispatcherTask dispatcherTask ) { synchronized ( syncRoot ) { DispatcherTaskRunner currentTaskRunner = currentTasksMap . get ( queueName ) ; if ( currentTaskRunner == null ) { currentTaskRunner = new DispatcherTaskRunner ( queueName , dispatcherTask ) ; currentTasksMap . put ( queueName , currentTaskRunner ) ; executorService . execute ( currentTaskRunner ) ; } else { enqueueNextTask ( queueName , dispatcherTask ) ; } } }
public static Executor createTaskDistributor $F72 { return Executors . newCachedThreadPool ( createThreadFactory ( Thread . NORM_PRIORITY , NUM00 ) ) ; }
public void dump ( Writer writer ) { PrintWriter pw = new PrintWriter ( new BufferedWriter ( writer ) ) ; $F8438 ( pw ) $F8438 ( pw ) pw . println ( NUM00 + ( int ) audioFormat . getSampleRate ( ) ) ; pw . println ( NUM00 + samples . length / NUM00 ) ; pw . println ( NUM00 + audioFormat . getChannels ( ) ) ; if ( samples != null ) { for ( $F24429 ( i , samples ) ) { pw . println ( WaveUtils . bytesToShort ( $F149550 ( samples , i ) ) ) ; } } $F1206 ( pw ) }
public void addFieldBuffered ( VEditor editor , GridField mField ) { wrap = mField != null ? ! mField . isSameLine ( ) : _BOOL ; if ( prevEditor != null && prevField != null ) addField ( prevEditor , prevField ) ; prevEditor = editor ; prevField = mField ; }
public ExpandRoomFreespaceIncomplete add_incomplete_expansion_room ( ShapeTile p_shape , int p_layer , ShapeTile p_contained_shape ) { ExpandRoomFreespaceIncomplete new_room = new ExpandRoomFreespaceIncomplete ( p_shape , p_layer , p_contained_shape ) ; incomplete_expansion_rooms . add ( new_room ) ; return new_room ; }
static double computeDesiredEllipsoidMagnitude ( final PlanetModel planetModel , final double x , final double y , final double z ) { return NUM00 / Math . sqrt ( x * x * planetModel . inverseAbSquared + y * y * planetModel . inverseAbSquared + z * z * planetModel . inverseCSquared ) ; }
public static String trim ( CharSequence s ) { $F1338 ( s ) $F1150 ( m , sTrimPattern , s ) return m . replaceAll ( NUM00 ) ; }
private void validateVNXFileSMISProviderMandatoryDetails ( StorageSystemRequestParam param ) { ArgValidator . checkFieldValidIP ( param . getSmisProviderIP ( ) , NUM00 ) ; ArgValidator . checkFieldNotNull ( param . getSmisPortNumber ( ) , NUM00 ) ; ArgValidator . checkFieldRange ( param . getSmisPortNumber ( ) , NUM00 , NUM00 , NUM00 ) ; ArgValidator . checkFieldNotEmpty ( param . getSmisUserName ( ) , NUM00 ) ; ArgValidator . checkFieldNotEmpty ( param . getSmisPassword ( ) , NUM00 ) ; }
private static NSObject parseObject ( Node n ) throws ParseException , IOException { $F48115 ( type , n ) if $F3057 ( type ) { NSDictionary dict = new NSDictionary $F72 ; $F27878 children = filterElementNodes ( n . getChildNodes ( ) ) ; for ( $F48125 ( i , children ) ) { $F22142 ( key , children , i ) Node val = children . get ( i + NUM00 ) ; String keyString = getNodeTextContents ( key ) ; $F39715 ( dict , keyString , parseObject , val ) } return dict ; } else if $F3057 ( type ) { $F27878 children = filterElementNodes ( n . getChildNodes ( ) ) ; NSArray array = new NSArray $F716 ( children ) ; for ( $F2277 ( i , children ) ) { array . setValue ( i , parseObject ( children . get ( i ) ) ) ; } return array ; } else if $F3057 ( type ) { return new NSNumber ( _BOOL ) ; } else if $F3057 ( type ) { return new NSNumber ( _BOOL ) ; } else if $F3057 ( type ) { return new NSNumber ( getNodeTextContents ( n ) ) ; } else if $F3057 ( type ) { return new NSNumber ( getNodeTextContents ( n ) ) ; } else if $F3057 ( type ) { return new NSString ( getNodeTextContents ( n ) ) ; } else if $F3057 ( type ) { return new NSData ( getNodeTextContents ( n ) ) ; } else if $F3057 ( type ) { return new NSDate ( getNodeTextContents ( n ) ) ; } $F1274 }
public void createAccrualBasedJournalEntriesAndReversalsForLoanCharges ( final Office office , final String currencyCode , final Integer accountTypeToBeDebited , final Integer accountTypeToBeCredited , final Long loanProductId , final Long loanId , final String transactionId , final Date transactionDate , final BigDecimal totalAmount , final Boolean isReversal , final List < ChargePaymentDTO > chargePaymentDTOs ) { GLAccount receivableAccount = getLinkedGLAccountForLoanCharges ( loanProductId , accountTypeToBeDebited , null ) ; final Map < GLAccount , BigDecimal > $F161023 ( creditDetailsMap ) ; for ( final ChargePaymentDTO chargePaymentDTO : chargePaymentDTOs ) { final Long chargeId = chargePaymentDTO . getChargeId ( ) ; final GLAccount chargeSpecificAccount = getLinkedGLAccountForLoanCharges ( loanProductId , accountTypeToBeCredited , chargeId ) ; BigDecimal chargeSpecificAmount = chargePaymentDTO . getAmount ( ) ; if $F1710 ( creditDetailsMap , chargeSpecificAccount ) { final BigDecimal existingAmount = creditDetailsMap . get ( chargeSpecificAccount ) ; $F10950 ( chargeSpecificAmount , existingAmount ) } creditDetailsMap . put ( chargeSpecificAccount , chargeSpecificAmount ) ; } BigDecimal totalCreditedAmount = BigDecimal . ZERO ; for ( final Map . Entry < GLAccount , BigDecimal > entry : creditDetailsMap . entrySet ( ) ) { final GLAccount account = entry . getKey ( ) ; final BigDecimal amount = entry . getValue ( ) ; $F10950 ( totalCreditedAmount , amount ) if ( isReversal ) { createDebitJournalEntryForLoan ( office , currencyCode , account , loanId , transactionId , transactionDate , amount ) ; createCreditJournalEntryForLoan ( office , currencyCode , receivableAccount , loanId , transactionId , transactionDate , amount ) ; } else { createDebitJournalEntryForLoan ( office , currencyCode , receivableAccount , loanId , transactionId , transactionDate , amount ) ; createCreditJournalEntryForLoan ( office , currencyCode , account , loanId , transactionId , transactionDate , amount ) ; } } if ( totalAmount . compareTo ( totalCreditedAmount ) != NUM00 ) { throw new PlatformDataIntegrityException ( NUM00 , NUM00 , totalCreditedAmount , totalAmount ) ; } }
private ArtLocateResult calculate_next_trace ( boolean p_layer_changed , boolean p_at_fanout_end ) { Collection < PlaPointFloat > corner_list = new LinkedList < PlaPointFloat > $F72 ; corner_list . add ( current_from_point ) ; if ( ! p_at_fanout_end ) { PlaPointFloat adjusted_start_corner = adjust_start_corner ( ) ; if ( adjusted_start_corner != current_from_point ) { PlaPointFloat add_corner = calculate_additional_corner ( current_from_point , adjusted_start_corner , _BOOL , angle_restriction ) ; corner_list . add ( add_corner ) ; corner_list . add ( adjusted_start_corner ) ; previous_from_point = current_from_point ; current_from_point = adjusted_start_corner ; } } PlaPointFloat prev_corner = current_from_point ; for ( $F6268 ( c_limit ) ) { Collection < PlaPointFloat > next_corners = calculate_next_trace_corners ( ) ; if $F2979 ( next_corners ) $F597 for ( PlaPointFloat curr_next_corner : next_corners ) { $F73688 ( curr_next_corner , prev_corner ) corner_list . add ( curr_next_corner ) ; previous_from_point = current_from_point ; current_from_point = curr_next_corner ; prev_corner = curr_next_corner ; } } int next_layer = current_trace_layer ; if ( p_layer_changed ) { current_from_door_index = current_target_door_index + NUM00 ; ExpandRoomComplete next_room = backtrack_array [ current_from_door_index ] . next_room ; if ( next_room != null ) { next_layer = next_room . get_layer ( ) ; } } PlaPointIntAlist rounded_corner_list = new PlaPointIntAlist $F716 ( corner_list ) ; PlaPointInt prev_point = null ; for ( PlaPointFloat a_float : corner_list ) { PlaPointInt curr_point = a_float . round ( ) ; if $F1238 ( curr_point , prev_point ) $F598 rounded_corner_list . add ( curr_point ) ; prev_point = curr_point ; } ArtLocateResult result = new ArtLocateResult ( rounded_corner_list , current_trace_layer ) ; current_trace_layer = next_layer ; return result ; }
public static < ValueT > ByteBuffer toByteBuffer ( ValueT obj ) throws IOException { $F5475 ( bytes ) ByteArrayOutputStream bos = null ; ObjectOutputStream oos = null ; try { $F1659 ( bos ) $F111162 ( oos , bos ) oos . writeObject ( obj ) ; $F1206 ( oos ) $F3031 ( bytes , bos ) } $F85840 ( oos , bos ) return ByteBuffer . wrap ( bytes ) ; }
$F69111 ( ctx , bytes )
$F1 protected Sensor createNewSensor ( String systemName , String userName ) { $F197555 ( log , systemName , userName ) Sensor s ; String sName = SerialAddress . normalizeSystemName ( systemName ) ; if $F3057 ( sName ) $F337969 ( log , systemName ) s = getBySystemName ( sName ) ; if ( s != null ) $F337969 ( log , systemName ) String altName = SerialAddress . convertSystemNameToAlternate ( sName ) ; s = getBySystemName ( altName ) ; if ( s != null ) { log . error ( NUM00 + systemName + NUM00 + altName + NUM00 ) ; $F1274 } int bit = SerialAddress . getBitFromSystemName ( sName ) ; if ( ( bit <= NUM00 ) || ( bit >= SENSORSPERNODE ) ) { log . error ( $F11846 ( Integer , bit ) + Integer . toString ( SENSORSPERNODE - NUM00 ) ) ; $F1274 } if ( userName == null ) { s = new SerialSensor ( sName ) ; } else { s = new SerialSensor ( sName , userName ) ; } SerialNode node = SerialAddress . getNodeFromSystemName ( sName ) ; if ( node == null ) { $F28293 ( log , sName ) return s ; } node . registerSensor ( s , bit ) ; if $F585 ( log ) { log . debug ( NUM00 + s . getSystemName ( ) + NUM00 + node ) ; } return s ; }
private $F1986 max $F6762 ( distances1 , distances2 ) { if $F11279 ( distances1 , distances2 ) $F11389 $F40939 ( result , distances1 ) for ( $F1139 ( i , distances1 ) ) { result [ i ] = Math . max ( distances1 [ i ] , distances2 [ i ] ) ; } return result ; }
public void fill_shape ( PlaPointFloat [ ] p_points , Graphics p_g , Color p_color , double p_translucency_factor ) { $F8249 ( p_color ) $F20230 ( g2 , p_g ) $F157439 ( draw_polygon ) for ( $F1139 ( index , p_points ) ) { Point2D curr_corner = coordinate_transform . board_to_screen ( p_points [ index ] ) ; draw_polygon . addPoint ( $F70722 ( Math , curr_corner ) , $F70724 ( Math , curr_corner ) ) ; } g2 . setColor ( p_color ) ; set_translucency ( g2 , p_translucency_factor ) ; $F34716 ( g2 , RenderingHints ) g2 . fill ( draw_polygon ) ; }
public void writeExif ( InputStream jpegStream , OutputStream exifOutStream ) throws IOException { $F26831 ( jpegStream , exifOutStream , NULL_ARGUMENT_ ) OutputStream s = getExifWriterStream ( exifOutStream ) ; doExifStreamIO ( jpegStream , s ) ; $F1206 ( s ) }
$F2192 ( bits , result , byteSegments , codewordPosition , d1 , unrandomize255State , count , FormatException , bytes , i , uee )
public void goToCurrentDay $F72 { int monthDifference = FlexibleCalendarHelper . getMonthDifference ( displayYear , displayMonth ) ; $F4377 ( cal , Calendar ) selectedDateItem . setDay ( $F21625 ( cal , Calendar ) ) ; selectedDateItem . setMonth ( $F21623 ( cal , Calendar ) ) ; selectedDateItem . setYear ( $F21621 ( cal , Calendar ) ) ; if ( disableAutoDateSelection ) { this . userSelectedItem = selectedDateItem . clone ( ) ; } if ( monthDifference != NUM00 ) { resetAdapters = _BOOL ; if ( monthDifference < NUM00 ) { monthInfPagerAdapter . setFakeCount ( lastPosition ) ; $F4176 ( monthInfPagerAdapter ) } shouldOverrideComputedDate = _BOOL ; moveToPosition ( monthDifference ) ; } else { FlexibleCalendarGridAdapter currentlyVisibleAdapter = monthViewPagerAdapter . getMonthAdapterAtPosition ( lastPosition % MonthViewPagerAdapter . VIEWS_IN_PAGER ) ; $F4176 ( currentlyVisibleAdapter ) } }
public static $F96 toIPv4AddressBytes ( int ipAddress ) { return new byte [ ] { $F53722 ( ipAddress ) , $F53722 ( ipAddress ) , $F53722 ( ipAddress ) , ( byte ) ipAddress } ; }
$F38759 ( isValidTemplate , template )
public Object take $F72 throws InterruptedException , ForceReattemptException $F59421
$F22330 public static double normalCdf ( double y ) { double f , h ; int j ; double dcphi , x , z , f1 , f2 , f3 , f4 , f5 ; x = y ; if $F33322 ( Math , x ) { dcphi = NUM00 ; } else { j = ( int ) Math . floor ( Math . abs ( x ) * NUM00 + NUM00 ) ; z = j * NUM00 ; h = Math . abs ( x ) - z ; f = r [ j ] ; f1 = f * z - NUM00 ; f2 = f + z * f1 ; f3 = f1 * NUM00 + z * f2 ; f4 = f2 * NUM00 + z * f3 ; f5 = f3 * NUM00 + z * f4 ; dcphi = f + h * ( f1 * NUM00 + h * ( f2 * NUM00 + h * ( f3 * NUM00 + h * ( f4 * NUM00 + h * f5 ) ) ) ) / NUM00 ; dcphi = dcphi * NUM00 * Math . exp ( x * - NUM00 * x ) ; } if ( x < NUM00 ) { return dcphi ; } else { return ( NUM00 - dcphi ) ; } }
private void destroy $F72 { if $F14148 ( log , Level ) { log . finest ( this + NUM00 ) ; } try { _socket . forceShutdown ( ) ; } $F115820 try $F5795 ( closeConnection ) catch ( Throwable e ) $F24254 ( log , Level , e ) _port . removeConnection ( this ) ; }
int atom $F72 throws RESyntaxException { int ret = node ( RE . OP_ATOM , NUM00 ) ; int lenAtom = NUM00 ; atomLoop : while ( idx < len ) { if $F7526 ( idx , len ) { $F17494 ( c , pattern , idx ) if $F11983 ( pattern , idx ) { int idxEscape = idx ; escape ( ) ; if ( idx < len ) $F7458 ( c , pattern , idx ) idx = idxEscape ; } switch ( c ) { $F1262 $F1262 $F1262 $F1262 if ( lenAtom != NUM00 ) { break atomLoop ; } } } switch $F31372 ( pattern , idx ) { $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 break atomLoop ; $F1262 $F1262 $F1262 $F1262 if ( lenAtom == NUM00 ) $F1210 ( syntaxError ) break atomLoop ; $F1262 { int idxBeforeEscape = idx ; int c = escape ( ) ; if $F128757 ( c , ESC_MASK ) { idx = idxBeforeEscape ; break atomLoop ; } emit ( ( char ) c ) ; lenAtom ++ ; } $F597 $F1267 emit ( pattern . charAt ( idx ++ ) ) ; lenAtom ++ ; $F597 } } if ( lenAtom == NUM00 ) $F5795 ( internalError ) instruction [ ret + RE . offsetOpdata ] = ( char ) lenAtom ; return ret ; }
$F1 public void drawItem $F98560 ( g2 , state , dataArea , plot , domainAxis , rangeAxis , dataset , row , column , pass ) { int visibleRow = state . getVisibleSeriesIndex ( row ) ; $F44858 ( visibleRow ) $F98564 ( dataValue , dataset , row , column ) $F2329 ( dataValue ) $F50466 ( value , dataValue ) $F10709 ( orientation , plot ) double barW0 = calculateBarW0 ( plot , orientation , dataArea , domainAxis , state , visibleRow , column ) ; $F82906 ( edge , plot ) $F31931 ( barL , rangeAxis , value , dataArea , edge ) Line2D line ; double x , y ; if $F441256 ( orientation ) { x = barL ; y = barW0 + $F338541 ( state ) ; line = new $F69931 ( barL , barW0 , barL , barW0 + state . getBarWidth ( ) ) ; } else { x = barW0 + $F338541 ( state ) ; y = barL ; line = new $F69931 ( barW0 , barL , barW0 + state . getBarWidth ( ) , barL ) ; } if ( state . getElementHinting ( ) ) { beginElementGroup ( g2 , dataset . getRowKey ( row ) , dataset . getColumnKey ( column ) ) ; } Stroke itemStroke = getItemStroke ( row , column ) ; Paint itemPaint = getItemPaint ( row , column ) ; g2 . setStroke ( itemStroke ) ; g2 . setPaint ( itemPaint ) ; g2 . draw ( line ) ; if ( state . getElementHinting ( ) ) { endElementGroup ( g2 ) ; } CategoryItemLabelGenerator generator = getItemLabelGenerator ( row , column ) ; if ( generator != null && isItemLabelVisible ( row , column ) ) $F98616 ( drawItemLabel , g2 , orientation , dataset , row , column , x , y , value ) $F12747 ( datasetIndex , plot , dataset ) updateCrosshairValues ( state . getCrosshairState ( ) , dataset . getRowKey ( row ) , dataset . getColumnKey ( column ) , value , datasetIndex , barW0 , barL , orientation ) ; $F98625 ( entities , state ) if ( entities != null ) { addItemEntity ( entities , dataset , row , column , line . getBounds ( ) ) ; } }
public static $F4203 UnaryOperator < $F5675 > from ( $F6877 commandLineUdids , Function < T , ICloud . MBSBackup > mbsBackup , Function < ICloud . MBSBackup , String > formatter , Printer out , InputStream in ) { return commandLineUdids . isEmpty ( ) ? new User ( mbsBackup , out , in , formatter ) : new Udid ( mbsBackup , out , in , $F7044 ( commandLineUdids ) ) ; }
public boolean isNetworkConnected $F72 { ConnectivityManager connectivityManager = ( ConnectivityManager ) getSystemService ( CONNECTIVITY_SERVICE ) ; $F40397 ( networkInfo , connectivityManager ) return networkInfo != null && networkInfo . isConnectedOrConnecting ( ) ; }
$F1 public void onTabClosing ( long time , int id ) { reset ( ) ; forceAnimationToFinish ( ) ; TabModel model = mTabModelSelector . getModelForTabId ( id ) ; if ( model != null ) { mClosedTab = createLayoutTab ( id , model . isIncognito ( ) , NO_CLOSE_BUTTON , NO_TITLE ) ; mClosedTab . setBorderAlpha ( NUM00 ) ; mLayoutTabs = new LayoutTab [ ] { mClosedTab } ; updateCacheVisibleIds ( new $F114083 $F6 ( Arrays , id ) ) ; } else $F39233 ( mLayoutTabs , mClosedTab ) super . onTabClosing ( time , id ) ; }
public void put ( String name , String supported , String authScheme , String level , boolean isDefault ) { SAMLv2AuthContext c = new SAMLv2AuthContext $F72 ; c . name = name ; c . supported = supported ; if ( $F35624 ( authScheme ) && authScheme != null ) { $F24867 ( index , authScheme ) c . value = authScheme . substring ( index + NUM00 ) ; c . key = authScheme . substring ( NUM00 , index ) ; } else { c . value = NUM00 ; c . key = NUM00 ; } c . level = level ; c . isDefault = isDefault ; collections . put ( name , c ) ; }
public final void close ( LsServerPacket closePacket , boolean forced ) { synchronized ( guard ) { $F84963 ( isWriteDisabled ) $F630 ( log , closePacket ) pendingClose = _BOOL ; isForcedClosing = forced ; $F725 ( sendMsgQueue ) sendMsgQueue . addLast ( closePacket ) ; enableWriteInterest ( ) ; } }
private void replaceCollapsedEdges $F72 { $F19151 ( newEdges ) for ( $F2774 ( it , edgeList ) ) { $F17998 ( e , it ) if ( e . isCollapsed ( ) ) { $F7042 ( it ) newEdges . add ( e . getCollapsedEdge ( ) ) ; } } edgeList . addAll ( newEdges ) ; }
$F184647 ( v , buf , name , av , i , b , readAnnotationValues , _BOOL , readConst , readUnsignedShort , readInt , items , Boolean , readUTF8 , Type , size , this , bv , zv , sv , cv , iv , lv , readLong , fv , Float , dv , Double )
public void timingEvent ( float fraction ) { current . x = ( int ) ( start . x + $F27158 ( end , start ) * fraction ) ; current . y = ( int ) ( start . y + $F27159 ( end , start ) * fraction ) ; track . setCarPosition ( current ) ; }
public SeaGlassTitlePane ( JRootPane rootPane , SeaGlassRootPaneUI ui ) { this . rootPane = rootPane ; this . rootPaneUI = ui ; rootParent = ( RootPaneContainer ) rootPane . getParent ( ) ; installTitlePane ( ) ; }
public String toString $F72 { $F83 ( s ) for ( Item item : this ) $F86403 ( s , item ) $F92 ( s ) }
public void writeLong ( long value ) throws IOException { checkWritePrimitiveTypes ( ) ; primitiveTypes . writeLong ( value ) ; }
static public URL findContainerXML ( String _containerName ) { URL _containerNameURL = null ; String _containerNameFilePath = Constants . Container . CONTAINER_CONFIG_DIRECTORY + NUM00 + _containerName + NUM00 ; _containerNameURL = getResourceURL ( _containerNameFilePath ) ; if ( _containerNameURL != null ) { if $F78772 ( _logger , Level ) $F68974 ( _logger , _containerNameURL ) } return _containerNameURL ; }
public static $F3803 expandWildcards ( Iterable $F11299 dirs , $F3803 names , Backend forBackend ) { $F3803 $F37973 ( result , names ) ; for ( String name : names ) { expandWildcard ( result , dirs , name , forBackend ) ; } return result ; }
public static Charset forName ( String charsetName ) $F13736 ( forName , charsetName )
public NSNumber ( int i ) { doubleValue = longValue = i ; type = INTEGER ; }
public static void dump ( String message , $F11340 stackTrace ) $F254297 ( dump , message , Arrays , stackTrace )
public void execQuery ( String sql , ExecQueryCallbackFunctionIF aListener ) throws GenericEntityException { $F113304 ( _connection , getConnection ) try { $F37492 ( Debug , sql , module ) executeQuery ( sql ) ; boolean keepGoing = _BOOL ; while ( keepGoing && _rs . next ( ) ) { keepGoing = aListener . processNextRow ( _rs ) ; } if ( _manualTX ) $F19092 ( _connection ) } catch ( SQLException sqle ) { Debug . logWarning ( NUM00 + sql + NUM00 , module ) ; $F102466 ( Debug , sqle , module ) throw new GenericEntityException ( NUM00 + _sql , sqle ) ; } $F49978 ( close ) }
private Name cacheName ( String sig ) { $F83 ( buf ) if $F3106 ( sig ) { buf = buf . append ( NUM00 ) ; while $F3106 ( sig ) { buf = buf . append ( target . syntheticNameChar ( ) ) ; $F3108 ( sig ) } if $F3106 ( sig ) $F8994 ( sig ) } else { buf = buf . append ( NUM00 + target . syntheticNameChar ( ) ) ; } buf = buf . append ( sig . replace ( NUM00 , target . syntheticNameChar ( ) ) ) ; return names . fromString ( buf . toString ( ) ) ; }
$F1 public boolean eIsSet ( int featureID ) { switch ( featureID ) { case EipPackage . CONDITIONAL_ROUTE__CONDITION : $F6439 ( CONDITION_EDEFAULT , condition ) case EipPackage . CONDITIONAL_ROUTE__CHANNEL : return channel != null ; } $F6444 ( super , featureID ) }
public static native String mapLibraryName ( String libname ) ;
public Matcher next $F72 throws IOException { readahead ( ) ; if ( matches == null ) $F6747 Matcher matcher = matches . next ( ) ; if ( discard ) { Pattern pattern = matcher . pattern ( ) ; for ( $F1139 ( n , patterns ) ) { if ( patterns [ n ] == pattern ) { patterns [ n ] = null ; $F597 } } } return matcher ; }
@ CalledOnlyBy ( AmidstThread . FRAGMENT_LOADER ) public void processQueues $F72 { Dimension dimension = dimensionSetting . get ( ) ; updateLayerManager ( dimension ) ; processRecycleQueue ( ) ; Fragment fragment ; while $F22655 ( fragment , loadingQueue ) { loadFragment ( dimension , fragment ) ; $F16478 ( dimension , dimensionSetting ) updateLayerManager ( dimension ) ; processRecycleQueue ( ) ; } layerManager . clearInvalidatedLayers ( ) ; }
default FieldDeclaration addPrivateField $F17798 ( typeClass , name ) { return addField ( typeClass , name , Modifier . PRIVATE ) ; }
void ReconstructPrivateSubrs ( int Font , IndexBaseItem [ ] fdPrivateBase , OffsetItem [ ] fdSubrs ) { for ( int i = NUM00 ; i < fonts [ Font ] . fdprivateLengths . length ; i ++ ) { if ( fdSubrs [ i ] != null && fonts [ Font ] . PrivateSubrsOffset [ i ] >= NUM00 ) { OutputList . addLast ( new SubrMarkerItem ( fdSubrs [ i ] , fdPrivateBase [ i ] ) ) ; if ( NewLSubrsIndex [ i ] != null ) OutputList . addLast ( new RangeItem ( new RandomAccessFileOrArray ( rasFactory . createSource ( NewLSubrsIndex [ i ] ) ) , NUM00 , NewLSubrsIndex [ i ] . length ) ) ; } } }
public boolean matchChomp ( String seq ) { if ( matches ( seq ) ) { $F90433 ( pos , seq ) return _BOOL ; } else { return _BOOL ; } }
public void initGL $F72 { mEglCore = new EglCore ( null , EglCore . FLAG_RECORDABLE | EglCore . FLAG_TRY_GLES3 ) ; mWindowSurface = new WindowSurface ( mEglCore , mSurfaceTexture ) ; mWindowSurface . makeCurrent ( ) ; mRecordSurface = new WindowSurface ( mEglCore , mMediaRecorder . getSurface ( ) , _BOOL ) ; initGLComponents ( ) ; }
void clear $F72 { if ( mViewTypeCount == NUM00 ) { final $F30929 scrap = mCurrentScrap ; $F10162 ( scrapCount , scrap ) $F65530 ( i , scrapCount , removeDetachedView , scrap , _BOOL ) } else { final int typeCount = mViewTypeCount ; for ( $F119 ( i , typeCount ) ) { $F65533 ( scrap , mScrapViews , i ) $F10162 ( scrapCount , scrap ) $F65530 ( j , scrapCount , removeDetachedView , scrap , _BOOL ) } } $F44159 ( mTransientStateViews ) }
protected void contributeTokenRequestParameters ( final QueryString bodyParameters ) $F845
public int read $F233176 ( off , len ) { int k ; if ( position >= document . getLength ( ) ) $F7629 k = len ; if ( ( position + k ) >= document . getLength ( ) ) k = document . getLength ( ) - ( int ) position ; if ( off + k >= cbuf . length ) k = cbuf . length - off ; try { document . getText ( ( int ) position , k , segment ) ; position += k ; System . arraycopy ( segment . array , segment . offset , cbuf , off , k ) ; return k ; } catch ( BadLocationException ble ) $F7629 }
Builder addLenient ( String line ) { $F129840 ( index , line ) if ( index != - NUM00 ) { return addLenient ( line . substring ( NUM00 , index ) , line . substring ( index + NUM00 ) ) ; } else if $F3106 ( line ) { return addLenient ( NUM00 , line . substring ( NUM00 ) ) ; } else $F195829 ( addLenient , line ) }
public static void mergeNodeChildren ( TreeNode node ) { DefaultMutableTreeNode masterNode = ( DefaultMutableTreeNode ) node ; for ( $F140290 ( i , masterNode ) ) { DefaultMutableTreeNode child = ( DefaultMutableTreeNode ) masterNode . getChildAt ( i ) ; if ( $F24328 ( child ) ) { MergeHelpUtilities . mergeNodeChildren ( DEFAULT_MERGE_TYPE , child ) ; } } }
public void testNegateNegative $F72 { String a = NUM00 ; int aScale = NUM00 ; String c = NUM00 ; int cScale = NUM00 ; $F1918 ( aNumber , a , aScale ) $F1918 ( cNumber , c , cScale ) assertEquals ( NUM00 , cNumber , aNumber . negate ( ) ) ; }
private static Object createAndBindItem ( ParameterAccess parameters , $F6969 itemType ) { try { $F71976 ( value , itemType ) bind ( value , parameters ) ; return value ; } catch ( InstantiationException | IllegalAccessException e ) { throw new BindingException ( NUM00 + itemType , e ) ; } }
public SimpleSetupPanel ( Experiment exp ) $F19529 ( this , setExperiment , exp )
public static void addListener ( Listener listener ) $F137025 ( listeners , listener )
private static void processArgs $F4374 ( args ) { for ( $F1139 ( i , args ) ) { String arg = args [ i ] ; if $F3057 ( arg ) { outputDir = args [ ++ i ] ; } else if $F3057 ( arg ) { unicodeData = args [ ++ i ] ; } else if $F3057 ( arg ) { language = args [ ++ i ] ; } else if $F3057 ( arg ) { country = args [ ++ i ] ; } else if $F3057 ( arg ) { valiant = args [ ++ i ] ; } else $F5795 ( usage ) } localeName = getLocaleName ( ) ; }
public static boolean isZoningRequired ( DbClient dbClient , VirtualArray nh ) { if ( nh . getAutoSanZoning ( ) == _BOOL ) { _log . info ( NUM00 + nh . getLabel ( ) ) ; return _BOOL ; } return NetworkUtil . areNetworkSystemDiscovered ( dbClient ) ; }
private void initXMLTree $F72 throws Exception { updateFilteredTokens ( ) ; ArrayList elements = getElements ( getFilteredTokens ( ) ) ; if $F3817 ( elements ) $F9451 setRootElement ( ( XMLElement ) elements . get ( NUM00 ) ) ; }
public boolean hasNameValue ( String name ) { return $F241801 ( nameValueMap , name ) ; }
public boolean startsWith ( CharSeq prefix ) { return str . startsWith ( prefix . str ) ; }
public boolean containsWindow $F60993 ( windowClass ) { return ( getWindow ( windowClass ) != null ) ; }
protected final void firePropertyChange ( String propertyName , long oldValue , long newValue ) $F71527 ( firePropertyChange , propertyName , Long , oldValue , newValue )
public void fadeToLayer ( int index ) { mTransitionState = TRANSITION_STARTING ; Arrays . fill ( mIsLayerOn , _BOOL ) ; mIsLayerOn [ index ] = _BOOL ; invalidateSelf ( ) ; }
$F5803 ( drawable , getDrawable , matrix , prevMatrix , drawableWidth , drawableHeight , scaleX , viewWidth , scaleY , viewHeight , mScaleType , CENTER , CENTER_CROP , Math , CENTER_INSIDE , FIT_CENTER , FIT_XY , redundantXSpace , redundantYSpace , matchViewWidth , matchViewHeight , isZoomed , imageRenderedAtLeastOnce , normalizedScale , prevMatchViewWidth , prevMatchViewHeight , savePreviousImageValues , m , Matrix , transX , transY , prevActualWidth , actualWidth , getImageWidth , translateMatrixAfterRotate , prevViewWidth , prevActualHeight , actualHeight , getImageHeight , prevViewHeight , fixTrans , setImageMatrix )
public static int hashCode ( $F8748 field ) $F108933 ( field , Arrays )
public AbstractSurfaceObject ( AbstractSurfaceObject source ) { super ( source ) ; this . visible = source . visible ; this . uniqueId = nextUniqueId ( ) ; this . lastModifiedTime = System . currentTimeMillis ( ) ; this . enableBatchPicking = source . enableBatchPicking ; }
public SootMethodAndClass parseSootMethodString ( String parseString ) { if ( $F14942 ( parseString ) || $F2363 ( parseString ) ) $F29526 ( parseString ) String name = NUM00 ; String className = NUM00 ; String returnType = NUM00 ; $F26605 ( pattern , Pattern ) $F275 ( matcher , pattern , parseString ) if $F281 ( matcher ) $F1164 ( className , matcher ) pattern = Pattern . compile ( NUM00 ) ; matcher = pattern . matcher ( parseString ) ; if $F281 ( matcher ) { $F1157 ( returnType , matcher ) parseString = parseString . substring ( matcher . end ( NUM00 ) ) ; } pattern = Pattern . compile ( NUM00 ) ; matcher = pattern . matcher ( parseString ) ; if $F281 ( matcher ) $F1164 ( name , matcher ) $F10144 ( paramList ) pattern = Pattern . compile ( NUM00 ) ; matcher = pattern . matcher ( parseString ) ; if $F281 ( matcher ) { $F283 ( params , matcher ) for ( $F55140 ( param , params ) ) $F28871 ( paramList , param ) } return new SootMethodAndClass ( name , className , returnType , paramList ) ; }
private void createNewReviewTask ( TaskRepository repository , TaskData taskData ) throws CoreException { Repository repo = AppraisePluginUtils . getGitRepoForRepository ( repository ) ; AppraisePluginReviewClient client ; try { client = new AppraisePluginReviewClient ( repository ) ; } catch ( GitClientException e1 ) { throw new CoreException ( new Status ( IStatus . ERROR , AppraiseConnectorPlugin . PLUGIN_ID , NUM00 ) ) ; } String currentBranch ; try { currentBranch = repo . getFullBranch ( ) ; } catch ( IOException e ) { throw new CoreException ( new Status ( IStatus . ERROR , AppraiseConnectorPlugin . PLUGIN_ID , NUM00 , e ) ) ; } if $F1238 ( MASTER_REF , currentBranch ) { throw new CoreException ( new Status ( IStatus . ERROR , AppraiseConnectorPlugin . PLUGIN_ID , NUM00 ) ) ; } setAttributeValue ( taskData , schema . REQUESTER , repository . getUserName ( ) ) ; setAttributeValue ( taskData , schema . TARGET_REF , MASTER_REF ) ; setAttributeValue ( taskData , schema . REVIEW_REF , currentBranch ) ; RevCommit reviewCommit ; try { reviewCommit = client . getReviewCommit ( currentBranch , MASTER_REF ) ; } catch ( GitClientException e ) { throw new CoreException ( new Status ( IStatus . ERROR , AppraiseConnectorPlugin . PLUGIN_ID , NUM00 , e ) ) ; } if ( reviewCommit == null ) { throw new CoreException ( new Status ( IStatus . INFO , AppraiseConnectorPlugin . PLUGIN_ID , NUM00 + currentBranch ) ) ; } setAttributeValue ( taskData , schema . DESCRIPTION , reviewCommit . getFullMessage ( ) ) ; setAttributeValue ( taskData , schema . REVIEW_COMMIT , reviewCommit . getName ( ) ) ; try { List < DiffEntry > diffs = client . getReviewDiffs ( currentBranch , MASTER_REF ) ; populateDiffs ( repository , diffs , taskData ) ; } catch ( Exception e ) { throw new CoreException ( new Status ( IStatus . ERROR , AppraiseConnectorPlugin . PLUGIN_ID , NUM00 , e ) ) ; } }
$F38752 ( _BOOL )
$F1 public void startup $F72 throws Exception { $F100153 ( Log , Mary ) $F3803 voiceNames = MaryProperties . getList ( NUM00 ) ; for ( String voiceName : voiceNames ) { $F657 ( time , System ) Voice unitSelVoice = new UnitSelectionVoice ( voiceName , this ) ; Log . d ( Mary . LOG , NUM00 + unitSelVoice + NUM00 ) ; Voice . registerVoice ( unitSelVoice ) ; $F5740 ( newtime , System , time ) Log . i ( Mary . LOG , NUM00 + voiceName + NUM00 + newtime + NUM00 ) ; } $F100121 ( Log , Mary ) }
public int findStartOfColumn ( int column ) { if ( column == mColumns ) return getSpaceUsed ( ) ; int currentColumn = NUM00 ; int currentCharIndex = NUM00 ; while ( _BOOL ) { int newCharIndex = currentCharIndex ; char c = mText [ newCharIndex ++ ] ; boolean isHigh = Character . isHighSurrogate ( c ) ; int codePoint = isHigh ? Character . toCodePoint ( c , mText [ newCharIndex ++ ] ) : c ; int wcwidth = WcWidth . width ( codePoint ) ; if ( wcwidth > NUM00 ) { currentColumn += wcwidth ; if ( currentColumn == column ) { while ( newCharIndex < mSpaceUsed ) { if ( Character . isHighSurrogate ( mText [ newCharIndex ] ) ) { if ( WcWidth . width ( Character . toCodePoint ( $F149550 ( mText , newCharIndex ) ) ) <= NUM00 ) { newCharIndex += NUM00 ; } else $F5153 } else if ( WcWidth . width ( mText [ newCharIndex ] ) <= NUM00 ) { newCharIndex ++ ; } else $F5153 } return newCharIndex ; } else $F8670 ( currentColumn , column , currentCharIndex ) } currentCharIndex = newCharIndex ; } }
private TripSchedule rerouteTripSchedule ( TripSchedule originalSchedule ) { TripSchedule schedule = originalSchedule . clone ( ) ; schedule . arrivals = new int [ newPatternLength ] ; schedule . departures = new int [ newPatternLength ] ; int prevOutputDeparture = NUM00 ; for ( int ss = NUM00 , ts = NUM00 ; ts < newPatternLength ; ss ++ , ts ++ ) { if ( ( ss == insertBeginIndex - NUM00 ) || ( ss == NUM00 && insertBeginIndex == NUM00 ) ) { int hopTime = originalSchedule . arrivals [ ss ] ; if ( ss > NUM00 ) hopTime -= originalSchedule . departures [ ss - NUM00 ] ; schedule . arrivals [ ts ] = prevOutputDeparture + hopTime ; schedule . departures [ ts ] = schedule . arrivals [ ts ] + dwellTimes [ NUM00 ] ; prevOutputDeparture = schedule . departures [ ts ] ; ts ++ ; for ( int hop = NUM00 , dwell = NUM00 ; dwell < dwellTimes . length ; hop ++ , dwell ++ ) { schedule . arrivals [ ts ] = prevOutputDeparture + hopTimes [ hop ] ; schedule . departures [ ts ] = schedule . arrivals [ ts ] + dwellTimes [ dwell ] ; prevOutputDeparture = schedule . departures [ ts ] ; ts ++ ; } ss = insertEndIndex + NUM00 ; $F67767 ( ts , newPatternLength ) } int hopTime = originalSchedule . arrivals [ ss ] ; if ( ss > NUM00 ) hopTime -= originalSchedule . departures [ ss - NUM00 ] ; schedule . arrivals [ ts ] = prevOutputDeparture + hopTime ; int dwellTime = originalSchedule . departures [ ss ] - originalSchedule . arrivals [ ss ] ; schedule . departures [ ts ] = schedule . arrivals [ ts ] + dwellTime ; prevOutputDeparture = schedule . departures [ ts ] ; } int timeShift = originalSchedule . arrivals [ originalFixedPointStopIndex ] - schedule . arrivals [ newFixedPointStopIndex ] ; for ( $F119 ( i , newPatternLength ) ) { schedule . arrivals [ i ] += timeShift ; schedule . departures [ i ] += timeShift ; } if $F585 ( LOG ) { LOG . debug ( NUM00 , originalSchedule . arrivals ) ; LOG . debug ( NUM00 , originalSchedule . departures ) ; LOG . debug ( NUM00 , schedule . arrivals ) ; LOG . debug ( NUM00 , schedule . departures ) ; } return schedule ; }
public static Color decode ( String color , Color defaultColor ) { $F1933 ( color , defaultColor ) Color c = getNamedColor ( color ) ; if ( c == null ) { try { c = Color . decode ( color ) ; } catch ( NumberFormatException ex ) { return defaultColor ; } } return c ; }
public static LinkedList < MaryModule > modulesRequiredForProcessing ( MaryDataType sourceType , MaryDataType targetType , Locale locale , Voice voice ) { if ( ! registrationComplete ) $F4638 $F1149 ( sourceType ) $F1149 ( targetType ) LinkedList < MaryDataType > seenTypes = new LinkedList < MaryDataType > $F72 ; seenTypes . add ( sourceType ) ; return modulesRequiredForProcessing ( sourceType , targetType , locale , voice , seenTypes ) ; }
public double distance ( Vector o ) { return Math . sqrt ( NumberConversions . square ( x - o . x ) + NumberConversions . square ( y - o . y ) + NumberConversions . square ( z - o . z ) ) ; }
public static long calculateElapsedGC $F72 { long timeMillis = NUM00 ; for ( GarbageCollectorMXBean gcbean : gcbeans ) { timeMillis += gcbean . getCollectionTime ( ) ; } return timeMillis ; }
public void close $F72 $F845
$F2208 ( sourceList , entryList , isEmpty , sourceCount , entry )
public void startObject ( int numfields ) { notNested ( ) ; if $F28203 ( vtable , numfields ) $F3936 ( vtable , numfields ) vtable_in_use = numfields ; Arrays . fill ( vtable , NUM00 , vtable_in_use , NUM00 ) ; nested = _BOOL ; object_start = offset ( ) ; }
private $F2539 produceStream ( String topic ) { List < ProducerRecord $F2538 > $F10252 ( messages , EVENT_CNT ) ; $F35131 ( keyValMap ) for ( $F119 ( evt , EVENT_CNT ) ) { $F657 ( runtime , System ) String key = topic + NUM00 + String . valueOf ( evt ) ; String msg = runtime + String . valueOf ( evt ) ; messages . add ( new ProducerRecord $F200 ( topic , key , msg ) ) ; keyValMap . put ( key , msg ) ; } kafkaBroker . sendMessages ( messages ) ; return keyValMap ; }
public static String stringOfChar ( char ch , int count ) { $F280 ( buf ) $F48485 ( i , count , buf , ch ) $F92 ( buf ) }
private void addConnectionView ( Connection connection ) { PlatformImpl . runAndWait ( null ) ; }
public static void trim ( CharSequence aText , $F2027 aSpan ) { int begin = aSpan [ NUM00 ] ; int end = aSpan [ NUM00 ] - NUM00 ; CharSequence data = aText ; while ( ( begin < $F45793 ( data ) ) && trimChar ( data . charAt ( begin ) ) ) { begin ++ ; } while ( ( end > NUM00 ) && trimChar ( data . charAt ( end ) ) ) { end -- ; } end ++ ; aSpan [ NUM00 ] = begin ; aSpan [ NUM00 ] = end ; }
public void addScriptFinishedListener ( ScriptExecutionListener l ) $F207 ( m_FinishedListeners , l )
$F104170 ( purchase , result )
public void test_getPutByteArray $F72 { final int size = NUM00 ; final IDataRecord buf = new FixedByteArrayBuffer ( size ) ; assertEquals ( $F19905 , buf . getByte ( NUM00 ) ) ; assertEquals ( $F19905 , buf . getByte ( size - NUM00 ) ) ; final int pos = NUM00 ; for ( $F119 ( i , LIMIT ) ) { final $F96 expected = new byte [ r . nextInt ( size - NUM00 ) ] ; r . nextBytes ( expected ) ; buf . put ( pos , expected ) ; assertEquals ( NUM00 , BytesUtil . compareBytesWithLenAndOffset ( NUM00 , expected . length , expected , pos , expected . length , buf . array ( ) ) ) ; final $F96 $F14612 ( actual , expected ) ; buf . get ( pos , actual ) ; assertTrue ( BytesUtil . bytesEqual ( expected , actual ) ) ; } assertEquals ( $F19905 , buf . getByte ( NUM00 ) ) ; assertEquals ( $F19905 , buf . getByte ( pos + size - NUM00 ) ) ; }
public static $F1986 concatAllDouble ( $F1986 ... arrays ) { int totalLength = NUM00 ; $F18832 ( subArrayCount , arrays ) $F189285 ( i , subArrayCount , totalLength , arrays ) $F1986 $F189287 ( result , Arrays , arrays , totalLength ) ; $F26358 ( offset , arrays ) $F189290 ( i , subArrayCount , System , arrays , result , offset ) return result ; }
private $F10809 ensureCapacity ( int minCapacity ) { if ( tmp . length < minCapacity ) { int newSize = minCapacity ; newSize |= newSize > > NUM00 ; newSize |= newSize > > NUM00 ; newSize |= newSize > > NUM00 ; newSize |= newSize > > NUM00 ; newSize |= newSize > > NUM00 ; newSize ++ ; if ( newSize < NUM00 ) newSize = minCapacity ; else newSize = Math . min ( newSize , $F92855 ( a ) ) ; $F10809 newArray = ( $F10809 ) new Object [ newSize ] ; tmp = newArray ; } return tmp ; }
public synchronized void add $F21013 ( category , minValue , maxValue ) { super . add ( category , minValue ) ; mMaxValues . add ( maxValue ) ; }
public void CONT ( int sessionNumber ) throws Exception { this . maxSessionNumber = Math . max ( this . maxSessionNumber , sessionNumber ) ; testElements . add ( new ContinuationElement ( sessionNumber ) ) ; }
public static double calcRotationAngleInDegrees ( PointF centerPt , PointF targetPt ) { double theta = Math . atan2 ( targetPt . y - centerPt . y , targetPt . x - centerPt . x ) ; double angle = Math . toDegrees ( theta ) ; $F69446 ( angle ) return angle ; }
public int countIn ( CharSequence sequence ) { int count = NUM00 ; for ( $F1088 ( i , sequence ) ) { if $F166640 ( matches , sequence , i ) { count ++ ; } } return count ; }
public DeltaCRLIndicatorExtension ( int crlNum ) throws IOException { super ( PKIXExtensions . DeltaCRLIndicator_Id , _BOOL , BigInteger . valueOf ( crlNum ) , NAME , LABEL ) ; }
public static void v $F3867 ( tag , s , args ) { if ( LOG . VERBOSE >= LOGLEVEL ) Log . v ( tag , String . format ( s , args ) ) ; }
static private double calcLogProb ( int numAppear , double mu ) { final double sigma = calcSigmaFromMu ( mu ) ; final double logNumAppear = Math . log ( numAppear ) ; final double overMu = Math . max ( logNumAppear - mu , NUM00 ) ; final double res = - $F52906 * ( overMu * overMu ) / ( sigma * sigma ) - s_logSqrtTwoPi - Math . log ( sigma ) ; assert ( res <= NUM00 ) ; return res ; }
$F1 public SoftwarePIDController withTolerance ( double tolerance ) { target = target . withTolerance ( Math . abs ( tolerance ) ) ; return this ; }
protected final void dragDropFinished ( final boolean success , final int operations , final int x , final int y ) { DragSourceEvent event = new DragSourceDropEvent ( getDragSourceContext ( ) , operations & sourceActions , success , x , y ) ; EventDispatcher dispatcher = new EventDispatcher ( DISPATCH_FINISH , event ) ; SunToolkit . invokeLaterOnAppContext ( SunToolkit . targetToAppContext ( getComponent ( ) ) , dispatcher ) ; startSecondaryEventLoop ( ) ; setNativeContext ( NUM00 ) ; dragImage = null ; dragImageOffset = null ; }
$F1 public $F96 write ( InternalLog log ) throws IOException { final $F96 rowkey = RowkeyBuilder . buildRowkey ( log ) ; final Put p = new Put ( rowkey ) ; populateColumnValues ( p , log ) ; tbl . put ( p ) ; final $F3510 indexRowkeys = log . getIndexRowkeys ( ) ; $F12099 ( indexRowkeys , writeIndexes , rowkey ) return rowkey ; }
private void insertIntoDynamicTable ( int index , Header entry ) { headerList . add ( entry ) ; int delta = entry . hpackSize ; if ( index != - NUM00 ) { delta -= dynamicTable [ dynamicTableIndex ( index ) ] . hpackSize ; } if ( delta > maxDynamicTableByteCount ) $F10990 ( clearDynamicTable ) int bytesToRecover = ( dynamicTableByteCount + delta ) - maxDynamicTableByteCount ; int entriesEvicted = evictToRecoverBytes ( bytesToRecover ) ; if ( index == - NUM00 ) { if ( headerCount + NUM00 > dynamicTable . length ) { $F11061 doubled = new Header $F10562 ( dynamicTable ) ; System . arraycopy ( dynamicTable , NUM00 , doubled , dynamicTable . length , dynamicTable . length ) ; nextHeaderIndex = dynamicTable . length - NUM00 ; dynamicTable = doubled ; } index = nextHeaderIndex -- ; dynamicTable [ index ] = entry ; headerCount ++ ; } else { index += dynamicTableIndex ( index ) + entriesEvicted ; dynamicTable [ index ] = entry ; } dynamicTableByteCount += delta ; }
protected static String extractSecretAccessKey ( String s3uri ) { return s3uri . substring ( s3uri . indexOf ( NUM00 , $F12707 ( s3uri ) ) + NUM00 , s3uri . indexOf ( NUM00 ) ) ; }
private void dial $F71526 ( contactInformation , makeTheCall , usePhoneSpeaker ) { if $F3057 ( contactInformation ) { String lastRecipient = RecipientCmd . getLastRecipientNumber ( ) ; String lastRecipientName = RecipientCmd . getLastRecipientName ( ) ; if ( lastRecipient != null ) { doDial ( lastRecipientName , lastRecipient , makeTheCall , usePhoneSpeaker ) ; } else $F1210 ( send ) } else { ResolvedContact resolvedContact = mContactsResolver . resolveContact ( contactInformation , ContactsResolver . TYPE_ALL ) ; if ( resolvedContact == null ) { send ( R . string . chat_no_match_for , contactInformation ) ; } else if ( resolvedContact . isDistinct ( ) ) { doDial ( resolvedContact . getName ( ) , resolvedContact . getNumber ( ) , makeTheCall , usePhoneSpeaker ) ; } else { askForMoreDetails ( resolvedContact . getCandidates ( ) ) ; } } }
public void addSafeClass ( SootClass clz ) $F29791 ( safeClasses , clz )
private boolean activeListHasRoom $F72 { int maxDownloads = NUM00 ; return mActiveList . size ( ) < maxDownloads ; }
public static final double parseTime ( final String time , final char separator ) { if ( $F6035 ( time ) || time . equals ( NUM00 ) ) { return Time . UNDEFINED_TIME ; } boolean isNegative = $F4432 ( time ) ; $F806 strings = ( isNegative ? StringUtils . explode ( time . substring ( NUM00 ) , separator ) : StringUtils . explode ( time , separator ) ) ; double seconds = NUM00 ; if $F9634 ( strings ) { seconds = Math . abs ( $F51417 ( Double , strings ) ) ; } else if $F9634 ( strings ) { $F167151 ( h , Integer , strings ) $F167151 ( m , Integer , strings ) if $F61157 ( m ) $F18931 ( time ) seconds = Math . abs ( h ) * NUM00 + m * NUM00 ; } else if $F9634 ( strings ) { $F167151 ( h , Integer , strings ) $F167151 ( m , Integer , strings ) $F158402 ( s , Double , strings ) if $F61157 ( m ) $F18931 ( time ) if ( ( s < NUM00 ) || ( s >= NUM00 ) ) $F18931 ( time ) seconds = Math . abs ( h ) * NUM00 + m * NUM00 + s ; } else $F18931 ( time ) $F96183 ( isNegative , seconds ) return seconds ; }
public boolean isRunning $F72 { return this . running ; }
protected static Map < String , Step > parse ( Class < ? extends RSLPStemmerBase > clazz , String resource ) { try { InputStream is = clazz . getResourceAsStream ( resource ) ; LineNumberReader r = new LineNumberReader ( new InputStreamReader ( is , StandardCharsets . UTF_8 ) ) ; Map < String , Step > $F8690 ( steps ) ; String step ; while $F2108 ( step , readLine , r ) { Step s = parseStep ( r , step ) ; $F51860 ( steps , s ) } $F59 ( r ) return steps ; } $F12153 ( e ) }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
public String betToString $F72 { $F1121 ( sb ) sb . append ( amount ) ; $F84 ( sb ) sb . append ( itemName ) ; $F84 ( sb ) sb . append ( target ) ; $F92 ( sb ) }
public void test_nonEmptyJournal $F72 throws IOException , InterruptedException , ExecutionException { final File out = File . createTempFile ( getName ( ) , Options . JNL ) ; try { final Journal src = getStore ( getProperties ( ) ) ; try { if ( ! ( src . getBufferStrategy ( ) instanceof IHABufferStrategy ) ) $F932 src . write ( getRandomData ( NUM00 ) ) ; $F17621 ( src ) try { final ISnapshotFactory snapshotFactory = new MySnapshotFactory ( getName ( ) , _BOOL ) ; final Future < ISnapshotResult > f = src . snapshot ( snapshotFactory ) ; final ISnapshotResult snapshotResult = f . get ( ) ; final File snapshotFile = snapshotResult . getFile ( ) ; try { final Journal tmp = openSnapshot ( snapshotResult ) ; assertEquals ( src . getRootBlockView ( ) , tmp . getRootBlockView ( ) ) ; $F17623 ( tmp ) } finally { $F142821 ( snapshotFile ) } } catch ( IllegalArgumentException ex ) $F10090 ( log , ex ) } $F17625 ( src ) } $F105993 ( out ) }
private boolean checkMatchIp $F4673 ( rows ) { boolean matchEther = _BOOL ; String val = ( String ) rows . get ( StaticFlowEntryPusher . COLUMN_DL_TYPE ) ; if ( val != null ) { int type = NUM00 ; if $F3106 ( val ) { type = $F30886 ( Integer , val ) ; } else { try $F37473 ( type , Integer , val ) $F32668 } if ( type == NUM00 ) matchEther = _BOOL ; } if ( ( rows . containsKey ( StaticFlowEntryPusher . COLUMN_NW_DST ) || rows . containsKey ( StaticFlowEntryPusher . COLUMN_NW_SRC ) || rows . containsKey ( StaticFlowEntryPusher . COLUMN_NW_PROTO ) || rows . containsKey ( StaticFlowEntryPusher . COLUMN_NW_TOS ) ) && ( matchEther == _BOOL ) ) return _BOOL ; return _BOOL ; }
public static double powQuick ( double value , double power ) { if ( USE_JDK_MATH ) { return STRICT_MATH ? StrictMath . pow ( value , power ) : Math . pow ( value , power ) ; } return FastMath . exp ( power * FastMath . logQuick ( value ) ) ; }
private String classToEntryPath $F60993 ( clazz ) { String name = NUM00 ; $F33929 ( parent ) while ( ( parent = clazz . getEnclosingClass ( ) ) != null ) { name = $F266496 ( clazz ) + name ; clazz = parent ; } return classNameToEntryPath ( clazz . getCanonicalName ( ) + name ) ; }
public static String write ( POSMikheevCounter counter ) { return POSBaseLineCounter . write ( counter ) ; }
private Map < String , AnnotationMirror > annosInPackage ( PackageElement packageElement ) { return createImportedAnnotationsMap ( ElementFilter . typesIn ( packageElement . getEnclosedElements ( ) ) ) ; }
public OsmElement pasteFrom $F72 { List < Way > ways = storage . getWays ( ) ; $F27878 nodes = storage . getNodes ( ) ; if ( mode == Mode . CUT ) { reset ( ) ; if ( ways != null && $F10470 ( ways ) ) { Way w = ways . get ( NUM00 ) ; w . setState ( savedState ) ; for ( $F23283 ( nd , w ) ) { Log . d ( NUM00 , NUM00 + nd . getOsmId ( ) ) ; nd . setState ( savedNdState . get ( nd ) ) ; } return w ; } else if ( nodes != null && $F10470 ( nodes ) ) { Node n = nodes . get ( NUM00 ) ; n . setState ( savedState ) ; return n ; } } else { if ( ways != null && $F10470 ( ways ) ) $F38160 ( ways ) else if ( nodes != null && $F10470 ( nodes ) ) $F38160 ( nodes ) } $F1274 }
public final void updateCursor $F72 { updatePending . set ( _BOOL ) ; updateCursorImpl ( ) ; }
public static boolean isMiddleMouseButton ( MouseEvent anEvent ) { return ( ( anEvent . getModifiersEx ( ) & InputEvent . BUTTON2_DOWN_MASK ) != NUM00 || anEvent . getButton ( ) == MouseEvent . BUTTON2 ) ; }
public void addSuccessMessage ( final String successMessage ) $F207 ( successMessageList , successMessage )
private void startStoppedChanged $F72 { clock . setStartStopped ( startStoppedCheckBox . isSelected ( ) ) ; changed = _BOOL ; }
public void close $F72 throws IOException { try { $F36253 ( Debug ) if $F22503 ( Debug ) $F31130 ( Thread ) $F711 ( inputStream ) } $F1516 ( e ) inputStream = null ; }
public static Long nextLogSegmentSequenceNumber ( List < LogSegmentMetadata > segmentListDesc ) { int lastAssignedLogSegmentIdx = - NUM00 ; Long lastAssignedLogSegmentSeqNo = null ; Long nextLogSegmentSeqNo = null ; for ( $F2277 ( i , segmentListDesc ) ) { LogSegmentMetadata metadata = segmentListDesc . get ( i ) ; if ( LogSegmentMetadata . supportsLogSegmentSequenceNo ( metadata . getVersion ( ) ) ) { lastAssignedLogSegmentSeqNo = metadata . getLogSegmentSequenceNumber ( ) ; lastAssignedLogSegmentIdx = i ; $F597 } } if ( null != lastAssignedLogSegmentSeqNo ) { nextLogSegmentSeqNo = lastAssignedLogSegmentSeqNo + lastAssignedLogSegmentIdx + NUM00 ; } return nextLogSegmentSeqNo ; }
private void readBinary ( final LittleEndianDataInputStream dis ) throws IOException { $F2980 ( RajLog ) $F71184 ( dis ) $F5952 ( facetCount , dis ) $F5415 verticesArr = $F401614 ( facetCount ) ; $F5415 normalsArr = $F401614 ( facetCount ) ; $F69133 ( indicesArr , facetCount ) $F12457 ( tempNorms ) int vertPos = NUM00 , normPos = NUM00 ; for ( $F1139 ( i , indicesArr ) ) indicesArr [ i ] = i ; while $F2892 ( dis ) { for ( $F6268 ( j ) ) { tempNorms [ j ] = dis . readFloat ( ) ; if ( Float . isNaN ( tempNorms [ j ] ) || Float . isInfinite ( tempNorms [ j ] ) ) { RajLog . w ( NUM00 ) ; tempNorms [ NUM00 ] = NUM00 ; tempNorms [ NUM00 ] = NUM00 ; tempNorms [ NUM00 ] = NUM00 ; $F597 } } for ( $F6268 ( j ) ) { normalsArr [ normPos ++ ] = tempNorms [ NUM00 ] ; normalsArr [ normPos ++ ] = tempNorms [ NUM00 ] ; normalsArr [ normPos ++ ] = tempNorms [ NUM00 ] ; } for ( $F6268 ( j ) ) verticesArr [ vertPos ++ ] = dis . readFloat ( ) ; $F71184 ( dis ) } mRootObject . setData ( verticesArr , normalsArr , null , null , indicesArr , _BOOL ) ; }
public static void assertSpecificLang ( String specificLang ) throws XMPException { if $F6036 ( specificLang ) $F54091 ( XMPError ) }
public int onBlockExploded $F72 { return ( int ) ( fuseTime / NUM00 + Math . random ( ) * fuseTime / NUM00 ) ; }
$F1 public boolean hasQueuedReaderThreads $F72 { return readerLock . hasQueuedThreads ( ) ; }
public long inactiveTimeMillis $F72 { return System . currentTimeMillis ( ) - lastTimeMillis ; }
public static void check ( boolean cond , Object value ) { if ( ! cond ) $F31730 ( error , String , value ) }
public void addDefinition ( ICOSDefinition cosDef ) throws UMSException { if ( ! ( cosDef instanceof DirectCOSDefinition ) ) { String msg = i18n . getString ( IUMSConstants . INVALID_COSDEFINITION ) ; throw new UMSException ( msg ) ; } $F806 cosAttributes = cosDef . getCOSAttributes ( ) ; AbstractCollection aList = ( AbstractCollection ) Arrays . asList ( ICOSDefinition . qualifiers ) ; for ( $F1139 ( i , cosAttributes ) ) { String cosAttribute = null ; String qualifier = null ; StringTokenizer st = new StringTokenizer ( cosAttributes [ i ] ) ; if $F14498 ( st ) { $F39710 ( cosAttribute , st ) } if ( cosAttribute == null ) { String msg = i18n . getString ( IUMSConstants . INVALID_COS_ATTRIBUTE_QUALIFIER ) ; throw new UMSException ( msg ) ; } if $F14498 ( st ) $F39710 ( qualifier , st ) if ( qualifier == null ) { qualifier = ICOSDefinition . qualifiers [ ICOSDefinition . DEFAULT ] ; cosDef . removeCOSAttribute ( cosAttribute ) ; cosDef . addCOSAttribute ( cosAttribute , ICOSDefinition . DEFAULT ) ; } if $F2200 ( aList , qualifier ) { String msg = i18n . getString ( IUMSConstants . INVALID_COS_ATTRIBUTE_QUALIFIER ) ; throw new UMSException ( msg ) ; } } PersistentObject po = ( PersistentObject ) cosDef ; _parentObject . addChild ( po ) ; }
public static SourceDataQuality fromXML ( Element domElement ) { $F9040 ( fields , domElement ) $F19322 ( fieldsCount , fields ) String fieldName ; String fieldValueString ; Node fieldNode ; SourceDataQuality result = new SourceDataQuality $F72 ; for ( $F253816 ( i , fieldsCount ) ) { fieldNode = fields . item ( i ) ; if $F61358 ( fieldNode , Node ) { $F89257 ( fieldName , fieldNode ) $F15376 ( fieldValueNode , fieldNode ) if ( fieldValueNode != null ) { $F5900 ( fieldValueString , fieldValueNode ) } else { fieldValueString = NUM00 ; } if $F1238 ( fieldName , XML_ELEMENT_QUALITY_CODE ) { result . qualityCode = Short . parseShort ( fieldValueString ) ; } else if $F1238 ( fieldName , XML_ELEMENT_QUALITY_DESC ) { result . description = fieldValueString ; } } } return result ; }
QName toQName $F60993 ( outputClass ) { String localPart ; String namespaceUri ; if ( outputClass . isAnnotationPresent ( XmlRootElement . class ) ) { XmlRootElement annotation = outputClass . getAnnotation ( XmlRootElement . class ) ; localPart = annotation . name ( ) ; namespaceUri = annotation . namespace ( ) ; } else if ( outputClass . isAnnotationPresent ( XmlType . class ) ) { XmlType annotation = outputClass . getAnnotation ( XmlType . class ) ; localPart = annotation . name ( ) ; namespaceUri = annotation . namespace ( ) ; } else { throw new IllegalArgumentException $F70412 ( outputClass ) ; } if $F1238 ( JAXB_DEFAULT_ANNOTATION_VALUE , localPart ) { localPart = ClassUtils . getShortNameAsProperty ( outputClass ) ; } if $F1238 ( JAXB_DEFAULT_ANNOTATION_VALUE , namespaceUri ) { Package outputClassPackage = outputClass . getPackage ( ) ; if ( outputClassPackage != null && outputClassPackage . isAnnotationPresent ( XmlSchema . class ) ) { XmlSchema annotation = outputClassPackage . getAnnotation ( XmlSchema . class ) ; namespaceUri = annotation . namespace ( ) ; } else { namespaceUri = XMLConstants . NULL_NS_URI ; } } return new QName ( namespaceUri , localPart ) ; }
private void adjustBottom ( RectF rect , float bottom , RectF bounds , int viewHeight , float snapMargin , float aspectRatio , boolean leftMoves , boolean rightMoves ) { float newBottom = bottom ; if ( newBottom > viewHeight ) { newBottom = viewHeight + ( newBottom - viewHeight ) / NUM00 ; mTouchOffset . y -= ( newBottom - viewHeight ) / NUM00 ; } if ( newBottom > bounds . bottom ) { mTouchOffset . y -= ( newBottom - bounds . bottom ) / NUM00 ; } if ( bounds . bottom - newBottom < snapMargin ) { newBottom = bounds . bottom ; } if ( newBottom - rect . top < mMinCropHeight ) { newBottom = rect . top + mMinCropHeight ; } if ( newBottom - rect . top > mMaxCropHeight ) { newBottom = rect . top + mMaxCropHeight ; } if ( bounds . bottom - newBottom < snapMargin ) { newBottom = bounds . bottom ; } if ( aspectRatio > NUM00 ) { float newWidth = ( newBottom - rect . top ) * aspectRatio ; if ( newWidth < mMinCropWidth ) { newBottom = Math . min ( bounds . bottom , rect . top + mMinCropWidth / aspectRatio ) ; newWidth = ( newBottom - rect . top ) * aspectRatio ; } if ( newWidth > mMaxCropWidth ) { newBottom = Math . min ( bounds . bottom , rect . top + mMaxCropWidth / aspectRatio ) ; newWidth = ( newBottom - rect . top ) * aspectRatio ; } if ( leftMoves && rightMoves ) { newBottom = Math . min ( newBottom , Math . min ( bounds . bottom , rect . top + bounds . width ( ) / aspectRatio ) ) ; } else { if ( leftMoves && rect . right - newWidth < bounds . left ) { newBottom = Math . min ( bounds . bottom , rect . top + $F102615 ( rect , bounds , aspectRatio ) ) ; newWidth = ( newBottom - rect . top ) * aspectRatio ; } if ( rightMoves && rect . left + newWidth > bounds . right ) { newBottom = Math . min ( newBottom , Math . min ( bounds . bottom , rect . top + $F102615 ( bounds , rect , aspectRatio ) ) ) ; } } } rect . bottom = newBottom ; }
private static String generateJWT ( String secret , String jwtID , String iss , Integer ttl , $F2540 ( claims ) ) throws HmacException { try $F16525 ( signJWT , secret , jwtID , ttl , iss , claims ) catch ( JOSEException e ) { $F301 ( e ) throw new HmacException ( NUM00 , e ) ; } }
public void exportSymbols ( $F806 exportNames , Symbol [ ] symbols ) { if ( exportedSymbols == null ) $F13242 ( exportedSymbols ) for ( int i = NUM00 ; i < exportNames . length && i < symbols . length ; i ++ ) { exportedSymbols . add ( new ExportedSymbol ( symbols [ i ] , exportNames [ i ] ) ) ; } }
static boolean isFulfilling ( int m ) $F9734 ( m , FULFILLING )
$F1 public synchronized void addDataSourceListener ( DataSourceListener dsl ) { m_dataSourceListeners . addElement ( dsl ) ; if ( m_format != null ) { $F179981 ( e , this , m_format ) dsl . acceptDataSet ( e ) ; } }
public static AnnotationMirror findEffectiveAnnotationInHierarchy ( final QualifierHierarchy qualifierHierarchy , final AnnotatedTypeMirror toSearch , final AnnotationMirror top ) $F33971 ( findEffectiveAnnotationInHierarchy , qualifierHierarchy , toSearch , top , _BOOL )
public boolean toFail $F72 { LifecycleState state ; synchronized ( this ) { state = _state ; if ( state . isAfterDestroying ( ) ) { return _BOOL ; } _state = FAILED ; $F9171 ( _lastChangeTime , CurrentTime ) } if ( _log != null && _log . isLoggable ( _level ) ) _log . log ( _level , NUM00 + _name ) ; notifyListeners ( state , FAILED ) ; _failCount ++ ; return _BOOL ; }
private static void read ( InputStream in , $F96 buf , int pos , int n ) throws IOException { int read = NUM00 ; int res = NUM00 ; while ( read < n ) { res = in . read ( buf , read + pos , n - read ) ; if ( res > NUM00 ) { read += res ; } else { $F132377 ( read , n ) } } }
public double evaluate ( VectorInstance x , VectorInstance y ) throws Exception { VectorInstance diff = x . subtract ( y ) ; double result = - m_gamma * diff . dotProduct ( diff ) ; return Math . exp ( result ) ; }
void parseFinish $F72 { mChildren = mCurrentGroup . getChildren ( ) ; }
void cancelIncludedOnly $F72 { if ( ! _showAllInput ) $F284193 ( _inputAllButton ) if ( ! _showAllOutput ) $F284193 ( _outputAllButton ) if ( ! _showAllAlign ) $F284193 ( _alignAllButton ) }
$F14699 killAll ( boolean rootIncluded ) { $F14699 killed = new $F201 ( rootIncluded ? entries . size ( ) : $F2281 ( entries ) ) ; Entry entry ; for ( int i = $F2281 ( entries ) ; i > $F17973 ( rootIncluded ) ; i -- ) { entry = entries . get ( i ) ; if ( entry . dead ) $F598 entry . dead = _BOOL ; if ( i != NUM00 ) $F207 ( killed , entry ) } return killed ; }
public static void createErrorDialog $F2236 ( title , message ) { final Alert alert = new Alert ( AlertType . ERROR ) ; alert . setTitle ( title ) ; alert . setContentText ( message ) ; alert . setHeaderText ( null ) ; alert . showAndWait ( ) ; }
public static String checkIndexHeaderSuffix ( DataInput in , String expectedSuffix ) throws IOException { int suffixLength = $F186326 ( in ) ; byte suffixBytes [ ] = new byte [ suffixLength ] ; in . readBytes ( suffixBytes , NUM00 , suffixBytes . length ) ; String suffix = new String ( suffixBytes , NUM00 , suffixBytes . length , StandardCharsets . UTF_8 ) ; if $F2137 ( suffix , expectedSuffix ) { throw new CorruptIndexException ( NUM00 + expectedSuffix + NUM00 + suffix , in ) ; } return suffix ; }
protected void tag ( String tag , ArrayList names , ArrayList values , int nattr , boolean close ) { spacing ( ) ; $F21384 ( m_out ) m_out . print ( tag ) ; for ( $F1316 ( i , nattr ) ) { $F21384 ( m_out ) m_out . print ( $F120 ( names , i ) ) ; $F21384 ( m_out ) $F21384 ( m_out ) $F163674 ( escapeString , values , i ) ; $F21384 ( m_out ) } if ( close ) $F21384 ( m_out ) $F21384 ( m_out ) println ( ) ; $F45123 ( close , m_tagStack , tag ) }
public static String parseDiskString ( String input ) { String delims = NUM00 ; $F35105 ( tokens , input , delims ) return tokens [ NUM00 ] ; }
protected void drawCloud ( int x , int y , int w , int h , Color fillColor , Paint fillPaint , Color penColor , boolean shadow ) { $F13609 ( path ) path . moveTo ( ( float ) ( x + NUM00 * w ) , ( float ) ( y + NUM00 * h ) ) ; path . curveTo ( ( float ) ( x + NUM00 * w ) , ( float ) ( y + NUM00 * h ) , ( float ) x , ( float ) ( y + NUM00 * h ) , ( float ) ( x + NUM00 * w ) , ( float ) ( y + NUM00 * h ) ) ; path . curveTo ( ( float ) x , ( float ) ( y + NUM00 * h ) , ( float ) ( x + NUM00 * w ) , ( float ) ( y + NUM00 * h ) , ( float ) ( x + NUM00 * w ) , ( float ) ( y + NUM00 * h ) ) ; path . curveTo ( ( float ) ( x + NUM00 * w ) , ( float ) ( y + h ) , ( float ) ( x + NUM00 * w ) , ( float ) ( y + h ) , ( float ) ( x + NUM00 * w ) , ( float ) ( y + NUM00 * h ) ) ; path . curveTo ( ( float ) ( x + w ) , ( float ) ( y + NUM00 * h ) , ( float ) ( x + w ) , ( float ) ( y + NUM00 * h ) , ( float ) ( x + NUM00 * w ) , ( float ) ( y + NUM00 * h ) ) ; path . curveTo ( ( float ) ( x + w ) , ( float ) ( y + NUM00 * h ) , ( float ) ( x + NUM00 * w ) , ( float ) ( y + NUM00 * h ) , ( float ) ( x + NUM00 * w ) , ( float ) ( y + NUM00 * h ) ) ; path . curveTo ( ( float ) ( x + NUM00 * w ) , ( float ) ( y + NUM00 * h ) , ( float ) ( x + NUM00 * w ) , ( float ) ( y + NUM00 * h ) , ( float ) ( x + NUM00 * w ) , ( float ) ( y + NUM00 * h ) ) ; $F2272 ( path ) drawPath ( path , fillColor , fillPaint , penColor , shadow ) ; }
private static boolean isTrusted ( Object obj , TrustVerifier . Context ctx ) throws RemoteException { $F86788 ( saved , state ) try { state . set ( obj ) ; return ctx . isTrustedObject ( obj ) ; } finally $F24242 ( state , saved ) }
public static PersistentSearchRequestControl newControl ( final boolean isCritical , final boolean changesOnly , final boolean returnECs , final PersistentSearchChangeType ... changeTypes ) { Reject . ifNull ( ( Object ) changeTypes ) ; return newControl ( isCritical , changesOnly , returnECs , Arrays . asList ( changeTypes ) ) ; }
private void connectEqualized ( SynapseGroup synapseGroup ) { $F14244 ( currentOrderingIndices , sourceNeurons ) int numConnectsPerSrc ; int expectedNumSyns ; if ( synapseGroup . isRecurrent ( ) && ! selfConnectionAllowed ) { numConnectsPerSrc = ( int ) ( connectionDensity * $F33765 ( sourceNeurons ) ) ; } else { numConnectsPerSrc = ( int ) ( connectionDensity * targetNeurons . length ) ; } expectedNumSyns = numConnectsPerSrc * sourceNeurons . length ; synapseGroup . preAllocateSynapses ( expectedNumSyns ) ; for ( $F151668 ( i , n , sourceNeurons ) ) { currentOrderingIndices [ i ] = numConnectsPerSrc ; Neuron src = sourceNeurons [ i ] ; Neuron tar ; for ( $F119 ( j , numConnectsPerSrc ) ) { tar = targetNeurons [ sparseOrdering [ i ] [ j ] ] ; Synapse s = new Synapse ( src , tar ) ; synapseGroup . addNewSynapse ( s ) ; } } }
public static Number multiply ( Character left , Character right ) $F209729 ( multiply , Integer , left , right )
public static String normalize ( final CharSequence self ) { $F52199 ( s , self ) $F1384 ( nx , s ) $F7879 ( nx , s ) $F22998 ( len , s ) $F94214 ( sb , len ) int i = NUM00 ; do { sb . append ( s , i , nx ) ; $F84 ( sb ) if ( ( i = nx + NUM00 ) >= len ) $F597 if $F11983 ( s , i ) { if ( ++ i >= len ) $F597 } $F61909 ( nx , s , i ) } while ( nx > NUM00 ) ; sb . append ( s , i , len ) ; $F92 ( sb ) }
public void addZoneChangeListener ( ZoneChangeListener listener ) $F207 ( zoneChangeListeners , listener )
public void write ( final int b ) throws IOException { if ( m_store == null ) $F48927 ( ERR_NO_STORE ) if ( m_isSaved ) $F48927 ( ERR_ALREADY_SAVED ) if ( m_count == m_blobThreshold && ! m_writingHdr ) { if ( m_blobHeader == null ) { $F117818 ( m_blobHeader ) } final int curAddr = ( int ) m_store . alloc ( m_buf , m_count , m_context ) ; m_blobHeader . add ( curAddr ) ; m_count = NUM00 ; } $F11740 ( m_buf , m_count , b ) m_bytesWritten ++ ; }
public StartListener ( Object resource ) { _resource = resource ; }
public $F5675 asFlatList $F72 { $F237846 ( list ) for ( $F50810 ( i , getRowCount ) ) { for ( $F50810 ( j , getColumnCount ) ) $F18351 ( list , getLogicalValueAt , i , j ) } return list ; }
@ Beta public void reset $F72 $F70200 ( schedulersHook )
$F76441 ( key , cacheKey , mDigest , MessageDigest , bytesToHexString , String )
public void recordTimestamp $F72 { $F657 ( curTimestamp , System ) if ( usedFields > NUM00 ) { long diff = curTimestamp - lastValue ; if ( usedFields == diffs . length ) { long removedValue = diffs [ curPosition ] ; diffs [ curPosition ] = diff ; calculateNewAverage ( removedValue , diff , _BOOL ) ; shiftEnd ( ) ; } else { calculateNewAverage ( NUM00 , diff , _BOOL ) ; diffs [ curPosition ] = diff ; shiftEnd ( ) ; } } else if ( lastValue != - NUM00 ) { long diff = curTimestamp - lastValue ; currentAverage = NUM00 ; diffs [ curPosition ] = diff ; calculateNewAverage ( NUM00 , diff , _BOOL ) ; shiftEnd ( ) ; } lastValue = curTimestamp ; }
@ AfterMethod public void tearDown $F72 throws Exception { Throwable t = threadFailure . getAndSet ( null ) ; if ( t != null ) { if ( t instanceof Error ) $F106249 ( t ) else if ( t instanceof RuntimeException ) $F219952 ( t ) else if ( t instanceof Exception ) throw ( Exception ) t ; else { AssertionFailedError afe = new AssertionFailedError $F3362 ( t ) ; afe . initCause ( t ) ; throw afe ; } } if $F2754 ( Thread ) tearDownFail ( NUM00 ) ; checkForkJoinPoolThreadLeaks ( ) ; }
public void parse ( String string ) { $F896 ( string ) int bufferSize = Math . max ( MIN_BUFFER_SIZE , $F90553 ( Math , DEFAULT_BUFFER_SIZE , string ) ) ; try { parse ( new StringReader ( string ) , bufferSize ) ; } $F12153 ( exception ) }
protected double defaultMaxRadius $F72 { return Math . sqrt ( NUM00 ) ; }
public $F1469 toCharArray $F72 { $F18064 ( newValue , count ) $F135 ( System , buf , newValue , count ) return newValue ; }
$F1 protected int sizePendingWorkers $F72 $F1652 ( _pendingWorkers )
public void insert ( Component component , int index ) { $F6853 ( index ) int nitems = getComponentCount ( ) ; Vector $F44984 tempItems = new Vector $F44984 $F72 ; for ( int i = index ; i < nitems ; i ++ ) { $F78620 ( tempItems , getComponent , index ) remove ( index ) ; } add ( component ) ; for ( Component tempItem : tempItems ) { add ( tempItem ) ; } }
public static $F3803 unescape ( String source , char escapeChar , $F1469 specialCharacters , char splitCharacter , int splitLimit ) { $F89604 ( result ) $F83 ( b ) boolean readEscape = _BOOL ; int indexCount = - NUM00 ; for ( $F2998 ( c , source ) ) { indexCount ++ ; if ( readEscape ) { boolean found = _BOOL ; if ( c == splitCharacter ) $F40007 ( found , _BOOL , b , c ) else if ( c == escapeChar ) $F40007 ( found , _BOOL , b , c ) else { for ( char s : specialCharacters ) { if ( s == c ) { found = _BOOL ; b . append ( c ) ; $F597 } } } if ( ! found ) $F60154 ( source , c ) readEscape = _BOOL ; } else if ( c == escapeChar ) { readEscape = _BOOL ; } else if ( c == splitCharacter ) { readEscape = _BOOL ; $F40018 ( result , b ) if ( splitLimit != - NUM00 ) { if ( result . size ( ) == splitLimit - NUM00 ) { result . add ( source . substring ( indexCount + NUM00 ) ) ; return result ; } } $F6932 ( b ) } else $F40007 ( readEscape , _BOOL , b , c ) } $F40018 ( result , b ) return result ; }
protected int drawLegend ( Canvas canvas , DefaultRenderer renderer , $F806 titles , int left , int right , int y , int width , int height , int legendSize , Paint paint , boolean calculate ) { float size = NUM00 ; if ( renderer . isShowLegend ( ) ) { float currentX = left ; float currentY = y + height - legendSize + size ; $F175116 ( paint , Align ) paint . setTextSize ( renderer . getLegendTextSize ( ) ) ; int sLength = Math . min ( titles . length , renderer . getSeriesRendererCount ( ) ) ; for ( $F119 ( i , sLength ) ) { SimpleSeriesRenderer r = renderer . getSeriesRendererAt ( i ) ; final float lineSize = getLegendShapeWidth ( i ) ; if ( r . isShowLegendItem ( ) ) { String text = titles [ i ] ; if ( titles . length == renderer . getSeriesRendererCount ( ) ) { $F14782 ( paint , r ) } else { paint . setColor ( Color . LTGRAY ) ; } $F5415 widths = new float $F31781 ( text ) ; paint . getTextWidths ( text , widths ) ; float sum = NUM00 ; for ( float value : widths ) { sum += value ; } float extraSize = lineSize + NUM00 + sum ; float currentWidth = currentX + extraSize ; if ( i > NUM00 && getExceed ( currentWidth , renderer , right , width ) ) { currentX = left ; currentY += renderer . getLegendTextSize ( ) ; size += renderer . getLegendTextSize ( ) ; currentWidth = currentX + extraSize ; } if ( getExceed ( currentWidth , renderer , right , width ) ) { float maxWidth = right - currentX - lineSize - NUM00 ; if ( isVertical ( renderer ) ) { maxWidth = width - currentX - lineSize - NUM00 ; } int nr = paint . breakText ( text , _BOOL , maxWidth , widths ) ; text = $F30497 ( text , nr ) ; } if ( ! calculate ) { drawLegendShape ( canvas , r , currentX , currentY , i , paint ) ; drawString ( canvas , text , currentX + lineSize + NUM00 , currentY + NUM00 , paint ) ; } currentX += extraSize ; } } } return Math . round ( size + renderer . getLegendTextSize ( ) ) ; }
$F1 public String append ( String path , InputStream is ) throws MalformedURLException , IOException , AuthenticationException { String resp = null ; ensureValidToken ( ) ; String spec = MessageFormat . format ( NUM00 , URLUtil . encodePath ( path ) , this . principal ) ; String redirectUrl = null ; HttpURLConnection conn = authenticatedURL . openConnection ( new URL ( new URL ( httpfsUrl ) , spec ) , token ) ; $F2407 ( conn ) conn . setInstanceFollowRedirects ( _BOOL ) ; $F2410 ( conn ) logger . info ( NUM00 + conn . getHeaderField ( NUM00 ) ) ; resp = result ( conn , _BOOL ) ; if ( conn . getResponseCode ( ) == NUM00 ) redirectUrl = conn . getHeaderField ( NUM00 ) ; $F8074 ( conn ) if ( redirectUrl != null ) { conn = authenticatedURL . openConnection ( new URL ( redirectUrl ) , token ) ; $F2407 ( conn ) conn . setDoOutput ( _BOOL ) ; conn . setDoInput ( _BOOL ) ; conn . setUseCaches ( _BOOL ) ; $F7965 ( conn ) final int _SIZE = is . available ( ) ; conn . setRequestProperty ( NUM00 , NUM00 + _SIZE ) ; conn . setFixedLengthStreamingMode ( _SIZE ) ; $F2410 ( conn ) $F147972 ( os , conn ) copy ( is , os ) ; $F59 ( is ) $F59 ( os ) resp = result ( conn , _BOOL ) ; $F8074 ( conn ) } return resp ; }
public EconomyConcurrentHashMap ( Map < $F13144 , $F9061 > m , IHashEntryHandler $F9340 handler ) { this ( Math . max ( ( int ) ( m . size ( ) / DEFAULT_LOAD_FACTOR ) + NUM00 , DEFAULT_INITIAL_CAPACITY ) , DEFAULT_LOAD_FACTOR , DEFAULT_CONCURRENCY_LEVEL , handler ) ; putAll ( m ) ; }
void addRule ( $F806 selector , AttributeSet declaration , boolean isLinked ) { int n = selector . length ; $F83 ( sb ) $F13031 ( sb , selector ) for ( $F119 ( counter , n ) ) { $F84 ( sb ) $F6939 ( sb , selector , counter ) } $F1822 ( selectorName , sb ) Style rule = getStyle ( selectorName ) ; if ( rule == null ) { Style altRule = addStyle ( selectorName , null ) ; synchronized ( this ) { SelectorMapping mapping = getRootSelectorMapping ( ) ; for ( $F18298 ( i , n ) ) { mapping = mapping . getChildSelectorMapping ( selector [ i ] , _BOOL ) ; } rule = mapping . getStyle ( ) ; if ( rule == null ) { rule = altRule ; mapping . setStyle ( rule ) ; refreshResolvedRules ( selectorName , selector , rule , mapping . getSpecificity ( ) ) ; } } } $F8577 ( isLinked , rule , getLinkedStyle ) rule . addAttributes ( declaration ) ; }
public Builder appendReadData $F97 ( data ) { Assertions . checkState ( $F21052 ( data ) ) ; segments . add ( new Segment ( data , null ) ) ; return this ; }
private boolean isLatestDssKeystore ( TSLParserResult parseResult ) { $F3803 englishSchemeInformationURIs = parseResult . getEnglishSchemeInformationURIs ( ) ; $F297 ( englishSchemeInformationURIs , ojUrl ) }
private synchronized void initResourceBundle ( String resourceBundleName ) { String current = this . resourceBundleName ; if ( current != null ) { if $F1238 ( current , resourceBundleName ) $F932 else $F60154 ( resourceBundleName , current ) } if ( resourceBundleName != null ) { this . resourceBundle = loadResourceBundle ( resourceBundleName ) ; this . resourceBundleName = resourceBundleName ; } }
public LayerGraphicWarehouseSupport $F72 { initDrawingAttributes ( ) ; graphics = new OMGraphicList $F72 ; graphics . setTraverseMode ( OMGraphicList . LAST_ADDED_ON_TOP ) ; }
public boolean matchesNamingConvension $F72 { $F98869 ( packageName , JAVA_PACKAGE_CONVENSION ) }
void rememberFactory ( String host , RMISocketFactory factory ) { synchronized ( successTable ) { while $F29395 ( hostList , MaxRememberedHosts ) { successTable . remove ( hostList . elementAt ( NUM00 ) ) ; hostList . removeElementAt ( NUM00 ) ; } hostList . addElement ( host ) ; successTable . put ( host , factory ) ; } }
public void put ( String key , long value ) $F233270 ( key , urlParams , String , value )
public char next $F72 { return pos < in . length ( ) ? in . charAt ( pos ++ ) : NUM00 ; }
private $F15243 doRemoveFirstEntry $F72 { for ( $F9341 b , n ; ; ) { if ( ( n = ( b = head . node ) . next ) == null ) $F1274 $F35175 ( f , n ) if ( n != b . next ) $F598 Object v = n . value ; if ( v == null ) { n . helpDelete ( b , f ) ; $F598 } if ( ! n . casValue ( v , null ) ) $F598 if ( ! n . appendMarker ( f ) || ! b . casNext ( n , f ) ) findFirst ( ) ; clearIndexToFirst ( ) ; $F1431 V vv = ( V ) v ; return new $F189927 ( n . key , vv ) ; } }
public ComputeTaskCancelledException ( Throwable cause ) $F51022 ( this , cause )
public static int normalize ( $F1469 src , int srcStart , int srcLimit , $F1469 dest , int destStart , int destLimit , Mode mode , int options ) { int length = mode . normalize ( src , srcStart , srcLimit , dest , destStart , destLimit , options ) ; if ( length <= ( destLimit - destStart ) ) { return length ; } else { throw new IndexOutOfBoundsException $F59159 ( Integer , length ) ; } }
private void removeObsoleteElements ( $F3803 names , Map < String , View > sharedElements , $F3803 elementsToRemove ) { if $F3817 ( elementsToRemove ) { names . removeAll ( elementsToRemove ) ; $F96731 ( elementToRemove , elementsToRemove , sharedElements ) } }
public boolean isHighlightWithInvisibleEdge $F72 { return highlightWithInvisibleEdge ; }
public void removeAction ( NetworkUpdateAction action ) { actionList . remove ( action ) ; for ( UpdateManagerListener listener : listeners ) { listener . actionRemoved ( action ) ; } }
public static double bufferDistanceError ( int quadSegs ) { double alpha = Math . PI / NUM00 / quadSegs ; return NUM00 - Math . cos ( alpha / NUM00 ) ; }
public $F7329 next $F72 { try { currentHeaderPosition = nextHeaderPosition ; String readHeader = nextLine ; nextHeaderPosition += readHeader . length ( ) + endOfLineBytes ; readHeader = NUM00 + readHeader . substring ( NUM00 ) ; $F27015 ( readSequence , r ) nextHeaderPosition += readSequence . length ( ) + endOfLineBytes ; $F27015 ( comments , r ) nextHeaderPosition += comments . length ( ) + endOfLineBytes ; if $F3106 ( comments ) { $F27015 ( qualityValues , r ) nextHeaderPosition += qualityValues . length ( ) + endOfLineBytes ; } $F36243 ( nextLine , r ) $F83164 ( readHeader , readSequence ) } catch ( IOException e ) { Basic . caught ( e ) ; } $F1274 }
public void add ( Character character ) { elements . add ( character == null ? JsonNull . INSTANCE : new JsonPrimitive ( character ) ) ; }
public static boolean isValidIfd ( int ifdId ) { return ifdId == IfdId . TYPE_IFD_0 || ifdId == IfdId . TYPE_IFD_1 || ifdId == IfdId . TYPE_IFD_EXIF || ifdId == IfdId . TYPE_IFD_INTEROPERABILITY || ifdId == IfdId . TYPE_IFD_GPS ; }
public void removeChild ( Group theGroup ) $F106 ( mChildren , theGroup )
protected StoragePort checkPortExistsInDB ( String nativeGuid ) throws IOException { StoragePort port = null ; $F42521 portInDB = CustomQueryUtility . getActiveStoragePortByNativeGuid ( _dbClient , nativeGuid ) ; if $F1032 ( portInDB ) $F36987 ( port , portInDB ) return port ; }
public void appendSplitElement ( Fragment aSplit ) $F207 ( splits , aSplit )
public Iterator enumerateLiteralResultAttributes $F72 { return ( null == m_avts ) ? null : m_avts . iterator ( ) ; }
public OsmHandler ( MapBuilder meConsumer ) { osmElementProcessor = new OsmElementProcessor ( null , meConsumer ) ; }
public void close $F72 throws IOException { flushBits ( ) ; $F59 ( out ) }
public RespokeDirectConnection directConnection $F72 { if ( null != directConnectionReference ) $F1522 ( directConnectionReference ) else $F1337 }
private String appendNationalNumber ( String nationalNumber ) { $F1749 ( prefixBeforeNationalNumberLength , prefixBeforeNationalNumber ) if ( shouldAddSpaceAfterNationalPrefix && prefixBeforeNationalNumberLength > NUM00 && prefixBeforeNationalNumber . charAt ( prefixBeforeNationalNumberLength - NUM00 ) != SEPARATOR_BEFORE_NATIONAL1BER ) { return new String ( prefixBeforeNationalNumber ) + SEPARATOR_BEFORE_NATIONAL1BER + nationalNumber ; } else { return prefixBeforeNationalNumber + nationalNumber ; } }
public void cut $F72 $F9099 ( copy , deleteSelectedObjects )
public void stop $F72 { setLedOn ( _BOOL ) ; if ( null != blinkFuture ) $F11437 ( blinkFuture , _BOOL ) if ( null != blinkService ) $F79149 ( blinkService ) }
public synchronized void release $F72 $F9096 ( index )
public void configure $F72 { if ( cmdPrefix != null ) { $F10128 ( prefix , cmdPrefix ) } }
protected void writeTransform ( AffineTransform t ) throws IOException { pageStream . matrix ( t ) ; }
public void testSignumPositive $F72 { String a = NUM00 ; int aScale = NUM00 ; $F1918 ( aNumber , a , aScale ) $F3037 ( assertEquals , aNumber ) }
public PainterChain prependPainter ( Painter p ) { Painter [ ] newChain = new Painter $F22598 ( chain ) ; $F7057 ( System , chain , newChain ) newChain [ NUM00 ] = p ; return new PainterChain ( newChain ) ; }
$F5466 private Operator . Kind parseOperator ( TokenStream tokens ) { if $F16934 ( tokens ) { $F24630 ( tokens ) tokens . expect ( NUM00 ) ; return Operator . Kind . EQUALS ; } if $F16934 ( tokens ) { $F24630 ( tokens ) tokens . expect ( NUM00 ) ; return Operator . Kind . NOT_EQUALS ; } if $F16934 ( tokens ) { $F24630 ( tokens ) if $F16934 ( tokens ) { $F24630 ( tokens ) return Operator . Kind . LESS_EQUAL ; } return Operator . Kind . LESS ; } if $F16934 ( tokens ) { $F24630 ( tokens ) if $F16934 ( tokens ) { $F24630 ( tokens ) return Operator . Kind . GREATER_EQUAL ; } return Operator . Kind . GREATER ; } $F1274 }
$F1 public boolean dragTo ( Selector obj , Selector destObj , int steps ) throws UiObjectNotFoundException , NotImplementedException { return dragTo ( device . findObject ( obj . toUiSelector ( ) ) , destObj , steps ) ; }
private void queueUpSyncs ( final Cursor contactsCursor ) { ContactSyncEntry syncEntry = null ; while $F12260 ( contactsCursor ) { if ( syncEntry == null ) { syncEntry = new ContactSyncEntry ( UPLOAD_BATCH_SIZE ) ; } final String number = contactsCursor . getString ( contactsCursor . getColumnIndex ( ContactsContract . CommonDataKinds . Phone . NUMBER ) ) ; final String name = contactsCursor . getString ( contactsCursor . getColumnIndex ( ContactsContract . CommonDataKinds . Phone . DISPLAY_NAME ) ) ; if $F20899 ( TextUtils , number ) { syncEntry . addNumber ( numberToNational ( number ) ) ; syncEntry . addName ( name ) ; if ( syncEntry . isFull ( ) ) { $F13527 ( Logger , TAG ) mSyncQueue . add ( syncEntry ) ; syncEntry = null ; } } } }
public synchronized void removeSeries ( int index ) $F106 ( mSeries , index )
public static void addGlue ( JComponent b , int layout ) { b . add ( getAxis ( b , layout ) == BoxLayout . X_AXIS ? Box . createHorizontalGlue ( ) : Box . createVerticalGlue ( ) ) ; }
public static void writeResultToFile ( Result result , String fname ) throws Exception { PrintWriter outer = new PrintWriter ( new BufferedWriter ( new FileWriter ( fname ) ) ) ; $F9826 ( outer , result ) $F59 ( outer ) }
private JMXProvider $F72 $F845
protected void writeBlockletInfoToFile ( List < BlockletInfoColumnar > infoList , FileChannel channel , String filePath ) throws CarbonDataWriterException { try { long currentPosition = channel . size ( ) ; CarbonFooterWriter writer = new CarbonFooterWriter ( filePath ) ; FileFooter convertFileMeta = CarbonMetadataUtil . convertFileFooter ( infoList , localCardinality . length , localCardinality , thriftColumnSchemaList , segmentProperties ) ; fillBlockIndexInfoDetails ( infoList , convertFileMeta . getNum_rows ( ) , filePath , currentPosition ) ; writer . writeFooter ( convertFileMeta , currentPosition ) ; } catch ( IOException e ) $F85378 ( e ) }
private static void renderTree ( Tree tree , int indent , boolean parentLabelNull , boolean firstSibling , boolean leftSiblingPreTerminal , boolean topLevel , StringBuilder sb ) { boolean suppressIndent = ( parentLabelNull || ( firstSibling && tree . isPreTerminal ( ) ) || ( leftSiblingPreTerminal && tree . isPreTerminal ( ) ) ) ; if ( suppressIndent ) $F86 ( sb ) else { $F48750 ( topLevel , sb ) $F103815 ( i , indent , sb ) } if ( tree . isLeaf ( ) || tree . isPreTerminal ( ) ) $F47994 ( renderFlat , tree , sb ) $F84 ( sb ) sb . append ( tree . getLabel ( ) ) ; renderChildren ( tree . getChildren ( ) , indent + NUM00 , _BOOL , sb ) ; $F84 ( sb ) }
public static StringBuffer replaceRegex ( StringBuffer original , String regex , String replace , boolean CASE_INSENSITIVE ) { int flags = NUM00 ; if ( CASE_INSENSITIVE ) flags = Pattern . CASE_INSENSITIVE ; Pattern p = Pattern . compile ( regex , flags ) ; $F1150 ( m , p , original ) $F280 ( newSB ) boolean result = m . find ( ) ; while ( result ) { m . appendReplacement ( newSB , replace ) ; result = m . find ( ) ; } m . appendTail ( newSB ) ; return newSB ; }
public boolean equalsChars ( String a , int ai , String b , int bi , boolean ignoreCase ) { $F1280 ( ca , a , ai ) $F1280 ( cb , b , bi ) if ( ignoreCase ) { $F186161 ( ca , Character ) $F186161 ( cb , Character ) } return ca == cb ; }
private void adjustBackingFileLength $F31474 ( buffer , index ) throws IOException { if $F12414 ( buffer ) $F14525 long newsize = fHeader . headerSize ( ) + ( index * CHUNK_ENC_SIZE ) + CHUNK_IV_SIZE + buffer . length + CHUNK_TLEN ; if ( newsize > realLength ( ) ) { backingRandomAccessFile . setLength ( newsize ) ; } }
private static Collection < Collection < DsnNetPin > > create_ordered_subnets ( Collection < DsnNetPin > p_pin_list ) { Collection < Collection < DsnNetPin > > result = new LinkedList < Collection < DsnNetPin > > $F72 ; $F4975 ( p_pin_list , result ) Iterator < DsnNetPin > it = p_pin_list . iterator ( ) ; DsnNetPin prev_pin = it . next ( ) ; while $F2921 ( it ) { DsnNetPin next_pin = it . next ( ) ; Set < DsnNetPin > curr_subnet_pin_list = new java . util . TreeSet < DsnNetPin > $F72 ; curr_subnet_pin_list . add ( prev_pin ) ; curr_subnet_pin_list . add ( next_pin ) ; result . add ( curr_subnet_pin_list ) ; prev_pin = next_pin ; } return result ; }
$F1 public void run ( int connID , $F806 args ) { if $F9634 ( args ) { server . sendServerChat ( connID , NUM00 ) ; server . sendServerChat ( connID , NUM00 ) ; server . sendServerChat ( connID , NUM00 ) ; server . sendServerChat ( connID , NUM00 ) ; server . sendServerChat ( connID , NUM00 ) ; server . sendServerChat ( connID , NUM00 ) ; server . sendServerChat ( connID , NUM00 ) ; server . sendServerChat ( connID , NUM00 ) ; server . sendServerChat ( connID , NUM00 ) ; } try { if $F3305 ( args ) { String cmd = args [ NUM00 ] ; if $F21935 ( cmd ) { if $F3305 ( args ) { $F167151 ( id , Integer , args ) server . sendServerChat ( connID , strListNetwork ( connID , id , _BOOL ) ) ; } else { server . sendServerChat ( connID , strListNetworks ( connID , _BOOL ) ) ; } } else if $F21935 ( cmd ) { if $F3305 ( args ) { $F167151 ( id , Integer , args ) server . sendServerChat ( connID , strListNetwork ( connID , id , _BOOL ) ) ; } else { server . sendServerChat ( connID , strListNetworks ( connID , _BOOL ) ) ; } } else if $F21935 ( cmd ) { debug ( connID , server ) ; } else if $F21935 ( cmd ) { if $F3305 ( args ) { $F167151 ( id1 , Integer , args ) $F167151 ( id2 , Integer , args ) $F167151 ( id3 , Integer , args ) server . sendServerChat ( connID , strLink3 ( connID , id1 , id2 , id3 ) ) ; } else if $F3305 ( args ) { $F167151 ( id1 , Integer , args ) $F167151 ( id2 , Integer , args ) server . sendServerChat ( connID , strLink2 ( connID , id1 , id2 ) ) ; } } else if $F21935 ( cmd ) { if $F3305 ( args ) { $F167151 ( id , Integer , args ) server . sendServerChat ( connID , strUnlinkID ( connID , id ) ) ; } else { server . sendServerChat ( connID , strUnlinkAll ( connID ) ) ; } } else { String failstr = args [ NUM00 ] ; for ( $F1139 ( i , args ) ) { failstr += NUM00 + args [ i ] ; } server . sendServerChat ( connID , NUM00 + failstr + NUM00 ) ; } } } catch ( NumberFormatException nfe ) { server . sendServerChat ( connID , NUM00 ) ; } catch ( NullPointerException npe ) { server . sendServerChat ( connID , NUM00 ) ; } catch ( IndexOutOfBoundsException ioobe ) { server . sendServerChat ( connID , NUM00 ) ; } }
private $F1469 parseEntityReference $F72 throws IOException { int pos = strpos ; if ( $F52502 ( ch , readCh ) ) { int n = NUM00 ; ch = readCh ( ) ; if ( ( ch >= NUM00 ) && ( ch <= NUM00 ) || ch == NUM00 || ch == NUM00 ) { if $F220844 ( ch ) { while $F220844 ( ch ) { n = ( n * NUM00 ) + ch - NUM00 ; ch = readCh ( ) ; } } else { ch = readCh ( ) ; char lch = ( char ) Character . toLowerCase ( ch ) ; while ( ( lch >= NUM00 ) && ( lch <= NUM00 ) || ( lch >= NUM00 ) && ( lch <= NUM00 ) ) { if $F19295 ( lch ) { n = ( n * NUM00 ) + lch - NUM00 ; } else { n = ( n * NUM00 ) + lch - NUM00 + NUM00 ; } ch = readCh ( ) ; lch = ( char ) Character . toLowerCase ( ch ) ; } } switch ( ch ) { $F1262 ln ++ ; ch = readCh ( ) ; lfCount ++ ; $F597 $F1262 ln ++ ; if ( $F52502 ( ch , readCh ) ) { ch = readCh ( ) ; crlfCount ++ ; } else { crCount ++ ; } $F597 $F300320 ( ch , readCh ) } char $F19196 = mapNumericReference ( n ) ; return data ; } addString ( NUM00 ) ; if ( ! parseIdentifier ( _BOOL ) ) { error ( NUM00 ) ; strpos = pos ; char $F19196 = $F4582 ; return data ; } } else if ( ! parseIdentifier ( _BOOL ) ) { char $F19196 = $F21901 ; return data ; } boolean semicolon = _BOOL ; switch ( ch ) { $F1262 ln ++ ; ch = readCh ( ) ; lfCount ++ ; $F597 $F1262 ln ++ ; if ( $F52502 ( ch , readCh ) ) { ch = readCh ( ) ; crlfCount ++ ; } else { crCount ++ ; } $F597 $F1262 semicolon = _BOOL ; ch = readCh ( ) ; $F597 } String nm = getString ( pos ) ; Entity ent = dtd . getEntity ( nm ) ; if ( ! strict && ( ent == null ) ) { ent = dtd . getEntity ( nm . toLowerCase ( ) ) ; } if ( ( ent == null ) || ! ent . isGeneral ( ) ) { if $F1277 ( nm ) { error ( NUM00 , nm ) ; return $F11574 ; } String str = NUM00 + nm + ( semicolon ? NUM00 : NUM00 ) ; char $F1310 = new char $F31781 ( str ) ; str . getChars ( NUM00 , b . length , b , NUM00 ) ; return b ; } return ent . getData ( ) ; }
private static String createJsMethodInvocationExpression ( String methodName , boolean isStatic , String ... paramNames ) { $F83 ( sb ) sb . append ( isStatic ? WND : THIS ) ; $F84 ( sb ) sb . append ( methodName ) ; $F84 ( sb ) for ( $F1139 ( i , paramNames ) ) { $F63265 ( i , sb ) $F6939 ( sb , paramNames , i ) } $F84 ( sb ) $F92 ( sb ) }
public void doDoubleClickAction $F72 $F82623 ( doDoubleClickAction )
public static Node serializableInstance $F72 { return new GraphNode $F580 ; }
protected void dropTables ( $F3803 dropTableNames , SQLiteDatabase db ) { if $F1032 ( dropTableNames ) { $F5442 ( dropTableSQLS , dropTableNames ) for ( $F1139 ( i , dropTableSQLS ) ) { dropTableSQLS [ i ] = generateDropTableSQL ( dropTableNames . get ( i ) ) ; } execute ( dropTableSQLS , db ) ; } }
private Segment createDiskSegment ( SegmentDescriptor descriptor ) { File segmentFile = SegmentFile . createSegmentFile ( name , storage . directory ( ) , descriptor . id ( ) , descriptor . version ( ) ) ; Buffer buffer = FileBuffer . allocate ( segmentFile , Math . min ( DEFAULT_BUFFER_SIZE , descriptor . maxSegmentSize ( ) ) , Integer . MAX_VALUE ) ; descriptor . copyTo ( buffer ) ; Segment segment = new Segment ( new SegmentFile ( segmentFile ) , buffer . slice ( ) , descriptor , createIndex ( descriptor ) , new OffsetPredicate $F72 , serializer . clone ( ) , this ) ; $F7028 ( LOGGER , segment ) return segment ; }
public Boolean exists ( String email ) { for ( Person person : people ) { if ( email . equals ( person . getEmail ( ) ) ) { return _BOOL ; } } return _BOOL ; }
public synchronized boolean removeAll ( Collection c ) { $F8867 ( elements , getArray ) int len = elements . length ; if ( len != NUM00 ) { int newlen = NUM00 ; $F133 ( temp , len ) for ( $F1316 ( i , len ) ) { Object element = elements [ i ] ; if $F2200 ( c , element ) temp [ newlen ++ ] = element ; } if ( newlen != len ) { setArray ( copyOfRange ( temp , NUM00 , newlen , $F22453 ) ) ; return _BOOL ; } } return _BOOL ; }
public long convertPolarStereographicToGeodetic ( double Easting , double Northing ) { double dy = NUM00 , dx = NUM00 ; double rho = NUM00 ; double t ; double PHI , sin_PHI ; double tempPHI = NUM00 ; double essin ; double pow_es ; double delta_radius ; long Error_Code = POLAR_NO_ERROR ; double min_easting = Polar_False_Easting - Polar_Delta_Easting ; double max_easting = Polar_False_Easting + Polar_Delta_Easting ; double min_northing = Polar_False_Northing - Polar_Delta_Northing ; double max_northing = Polar_False_Northing + Polar_Delta_Northing ; if ( Easting > max_easting || Easting < min_easting ) { Error_Code |= POLAR_EASTING_ERROR ; } if ( Northing > max_northing || Northing < min_northing ) { Error_Code |= POLAR_NORTHING_ERROR ; } if ( Error_Code == POLAR_NO_ERROR ) { dy = Northing - Polar_False_Northing ; dx = Easting - Polar_False_Easting ; $F161998 ( rho , Math , dx , dy ) $F161998 ( delta_radius , Math , Polar_Delta_Easting , Polar_Delta_Northing ) if ( rho > delta_radius ) { Error_Code |= POLAR_RADIUS_ERROR ; } } if ( Error_Code == POLAR_NO_ERROR ) { if $F188191 ( dy , dx ) { Latitude = PI_OVER_2 ; Longitude = Polar_Origin_Long ; } else { if ( Southern_Hemisphere != NUM00 ) { dy *= - NUM00 ; dx *= - NUM00 ; } if ( Math . abs ( Math . abs ( Polar_Origin_Lat ) - PI_OVER_2 ) > NUM00 ) t = rho * tc / ( Polar_a_mc ) ; else t = rho * e4 / ( two_Polar_a ) ; PHI = PI_OVER_2 - NUM00 * Math . atan ( t ) ; while $F227658 ( Math , PHI , tempPHI ) { tempPHI = PHI ; sin_PHI = Math . sin ( PHI ) ; essin = es * sin_PHI ; pow_es = Math . pow ( ( NUM00 - essin ) / ( NUM00 + essin ) , es_OVER_2 ) ; PHI = PI_OVER_2 - NUM00 * Math . atan ( t * pow_es ) ; } Latitude = PHI ; Longitude = Polar_Origin_Long + Math . atan2 ( dx , - dy ) ; if ( Longitude > PI ) Longitude -= TWO_PI ; else if ( Longitude < - PI ) Longitude += TWO_PI ; if ( Latitude > PI_OVER_2 ) Latitude = PI_OVER_2 ; else if ( Latitude < - PI_OVER_2 ) Latitude = - PI_OVER_2 ; if ( Longitude > PI ) Longitude = PI ; else if ( Longitude < - PI ) Longitude = - PI ; } if ( Southern_Hemisphere != NUM00 ) { Latitude *= - NUM00 ; Longitude *= - NUM00 ; } } return ( Error_Code ) ; }
public void assertURIEquals ( String assertID , String scheme , String path , String host , String file , String name , String query , String fragment , Boolean isAbsolute , String actual ) { assertNotNull ( assertID , actual ) ; String uri = actual ; $F24867 ( lastPound , actual ) String actualFragment = NUM00 ; if ( lastPound != - NUM00 ) $F60269 ( uri , actual , lastPound , actualFragment ) $F189158 ( fragment , assertEquals , assertID , actualFragment ) $F24867 ( lastQuestion , uri ) String actualQuery = NUM00 ; if ( lastQuestion != - NUM00 ) $F60269 ( uri , actual , lastQuestion , actualQuery ) $F189158 ( query , assertEquals , assertID , actualQuery ) $F1384 ( firstColon , uri ) $F1384 ( firstSlash , uri ) String actualPath = uri ; String actualScheme = NUM00 ; if $F96100 ( firstColon , firstSlash ) $F60269 ( actualScheme , uri , firstColon , actualPath ) $F189158 ( scheme , assertEquals , assertID , actualScheme ) $F189158 ( path , assertEquals , assertID , actualPath ) if ( host != null ) { String actualHost = NUM00 ; if $F3106 ( actualPath ) { $F129840 ( termSlash , actualPath ) $F14493 ( actualHost , actualPath , termSlash ) } assertEquals ( assertID , host , actualHost ) ; } String actualFile = actualPath ; if ( file != null || name != null ) { $F24867 ( finalSlash , actualPath ) if ( finalSlash != - NUM00 ) $F78003 ( actualFile , actualPath , finalSlash ) $F189158 ( file , assertEquals , assertID , actualFile ) } if ( name != null ) { String actualName = actualFile ; $F24867 ( finalPeriod , actualFile ) if ( finalPeriod != - NUM00 ) $F14494 ( actualName , actualFile , finalPeriod ) assertEquals ( assertID , name , actualName ) ; } if ( isAbsolute != null ) { assertEquals ( assertID , isAbsolute . booleanValue ( ) , actualPath . startsWith ( NUM00 ) || actualPath . startsWith ( NUM00 ) ) ; } }
private double maxIgnoreNaN ( double a , double b ) { $F95699 ( Double , a , b ) if $F35707 ( Double , b ) { return a ; } else { $F85710 ( Math , a , b ) } }
public void crabDownDirBlockForModification ( BlockId blk ) { lockTbl . xLock ( blk , txNum ) ; writenIndexBlks . add ( blk ) ; }
private static void removeReferenceToConnection ( final HttpConnectionWithReference connection ) { synchronized ( REFERENCE_TO_CONNECTION_SOURCE ) { REFERENCE_TO_CONNECTION_SOURCE . remove ( connection . reference ) ; } }
public boolean matchesWord $F72 { return ! isEmpty ( ) && $F15875 ( Character , queue , pos ) ; }
public VacuumEnvironment $F72 { $F6822 ( r ) envState = new VacuumEnvironmentState ( NUM00 == r . nextInt ( NUM00 ) ? LocationState . Clean : LocationState . Dirty , NUM00 == r . nextInt ( NUM00 ) ? LocationState . Clean : LocationState . Dirty ) ; }
public void generate ( BatchEnvironment env , ClassDefinition cdef , File destDir ) { RemoteClass remoteClass = RemoteClass . forClass ( env , cdef ) ; $F8249 ( remoteClass ) RMIGenerator gen ; try { gen = new RMIGenerator ( env , cdef , destDir , remoteClass , version ) ; } catch ( ClassNotFound e ) { env . error ( NUM00 , NUM00 , e . name ) ; $F665 } gen . generate ( ) ; }
public BaseViewHolder addOnLongClickListener ( int viewId ) $F18637 ( itemChildLongClickViewIds , viewId , this )
public void remove ( final CreatureRespawnPoint point ) $F106 ( respawnPoints , point )
public Photo ( File d , File f ) throws IOException , NumberFormatException { ExtendedExifInterface exif = new ExtendedExifInterface $F3362 ( f ) ; String lonStr = exif . getAttribute ( ExifInterface . TAG_GPS_LONGITUDE ) ; $F31068 ( lonStr ) float lonf = convertToDegree ( lonStr ) ; String lonRef = exif . getAttribute ( ExifInterface . TAG_GPS_LONGITUDE_REF ) ; if $F77244 ( lonRef ) $F52810 ( lonf ) float latf = convertToDegree ( exif . getAttribute ( ExifInterface . TAG_GPS_LATITUDE ) ) ; String latRef = exif . getAttribute ( ExifInterface . TAG_GPS_LATITUDE_REF ) ; if $F77244 ( latRef ) $F52810 ( latf ) $F146568 ( lat , latf ) ; $F146568 ( lon , lonf ) ; Log . d ( NUM00 , NUM00 + lat + NUM00 + lon ) ; ref = $F3884 ( d ) + f . getName ( ) ; String dir = exif . getAttribute ( ExtendedExifInterface . TAG_GPS_IMG_DIRECTION ) ; if ( dir != null ) { direction = ( int ) Double . parseDouble ( dir ) ; directionRef = exif . getAttribute ( ExtendedExifInterface . TAG_GPS_IMG_DIRECTION_REF ) ; Log . d ( NUM00 , NUM00 + dir + NUM00 + direction + NUM00 + directionRef ) ; } }
public static long bytesToLong $F3295 ( bytes ) { $F120018 ( buffer , ByteBuffer ) buffer . put ( bytes , NUM00 , NUM00 ) ; $F14257 ( buffer ) return buffer . getLong ( ) ; }
protected int unicodeEscapeLexer ( int c ) throws IOException { int ret = NUM00 ; $F10201 ( c , in ) $F725 ( code ) try { for ( $F6268 ( i ) ) { $F10201 ( c , in ) if $F41536 ( isEndOfFile , c , isEndOfLine ) $F101477 $F36813 ( code , c ) } ret = Integer . parseInt ( $F89373 ( code ) ) ; } catch ( NumberFormatException e ) { throw new IOException ( NUM00 + getLineNumber ( ) + NUM00 + code . toString ( ) + NUM00 + e . toString ( ) ) ; } return ret ; }
$F1 public void mouseEntered ( MouseEvent evt ) { delegate . mouseMoved ( evt ) ; }
public static String removeFormatting ( String line ) { $F115 ( length , line ) $F83 ( buffer ) for ( $F119 ( i , length ) ) { $F1280 ( ch , line , i ) if ( ch != NUM00 && ch != NUM00 && ch != NUM00 && ch != NUM00 ) buffer . append ( ch ) ; } $F92 ( buffer ) }
public void testNegPosFirstShorter $F72 $F9149 ( numA , numB , res , aNumber , bNumber , result , assertTrue )
public void print $F72 { $F11326 ( iterChargingTimes , chargingTimes ) Arrays . sort ( iterChargingTimes ) ; for ( $F1139 ( i , iterChargingTimes ) ) { ChargeLog curItem = ( ChargeLog ) iterChargingTimes [ i ] ; curItem . print ( ) ; } }
$F18907 ( rdns )
private void writeLocalCSV ( MedtronicSensorRecord mostRecentData , Context context ) { try { if ( mostRecentData == null || mostRecentData . bGValue == null ) $F980 ( log ) else log . debug ( NUM00 + mostRecentData . bGValue ) ; ObjectOutputStream oos = new ObjectOutputStream ( new FileOutputStream ( new File ( context . getFilesDir ( ) , NUM00 ) ) ) ; oos . writeObject ( mostRecentData ) ; $F1206 ( oos ) $F59 ( oos ) } catch ( Exception e ) { $F13579 ( Log , TAG , e ) $F5197 ( log , e ) } }
public ServiceConfig createOrganizationConfig ( String orgName , Map attrs ) throws $F16995 { validateSSM ( ) ; ServiceSchemaImpl ss = ssm . getSchema ( SchemaType . ORGANIZATION ) ; if ( ss == null ) { $F78467 ( args , serviceName ) throw ( new SMSException $F181730 ( IUMSConstants , args ) ) ; } String orgdn = DNMapper . orgNameToDN ( orgName ) ; CreateServiceConfig . checkBaseNodesForOrg ( token , orgdn , serviceName , version ) ; String orgDN = scm . constructServiceConfigDN ( SMSUtils . DEFAULT , CreateServiceConfig . ORG_CONFIG_NODE , orgdn ) ; try { $F17013 ( cEntry , CachedSMSEntry , token , orgDN ) if ( cEntry . isDirty ( ) ) { $F17015 ( cEntry ) } if ( cEntry . isNewEntry ( ) ) { CreateServiceConfig . createSubConfigEntry ( token , orgDN , ss , null , null , attrs , orgName ) ; if ( ServiceManager . isCoexistenceMode ( ) ) { String smsDN = DNMapper . orgNameToDN ( orgName ) ; OrgConfigViaAMSDK amsdk = new OrgConfigViaAMSDK ( token , DNMapper . realmNameToAMSDKName ( smsDN ) , smsDN ) ; amsdk . assignService ( serviceName ) ; } } else if $F1032 ( attrs ) { ServiceConfig sc = getOrganizationConfig ( orgName , null ) ; sc . setAttributes ( attrs ) ; } } catch ( ServiceAlreadyExistsException slee ) $F845 return ( getOrganizationConfig ( orgName , null ) ) ; }
public void deleteAuthenticationDomain ( String realm , String cotName ) throws AMConsoleException { $F105633 ( param , realm , cotName ) logEvent ( NUM00 , param ) ; try { CircleOfTrustManager manager = getCircleOfTrustManager ( ) ; manager . deleteCircleOfTrust ( realm , cotName ) ; logEvent ( NUM00 , param ) ; } catch ( COTException e ) $F105644 ( strError , getErrorString , e , paramsEx , realm , cotName , logEvent ) }
protected void addSourceCodeRemark ( TestSolution testSolution , Element element , String messageCode , EvidenceElement evidenceElement ) { if ( evidenceElement != null ) { Collection < EvidenceElement > $F204 ( evidenceElementList ) ; evidenceElementList . add ( evidenceElement ) ; processRemarkService . addSourceCodeRemarkOnElement ( testSolution , element , messageCode , evidenceElementList ) ; } else { processRemarkService . addSourceCodeRemarkOnElement ( testSolution , element , messageCode ) ; } }
void eventPreModify ( ActionType type , long position , boolean isSingle ) { if ( type != currentActionType || ! isSingle || System . currentTimeMillis ( ) - previousTime > MERGE_TIME || ( type == ActionType . INSERT || type == ActionType . OVERWRITE ) && actionExclusiveEnd ( ) != position || type == ActionType . DELETE && actionPosition ( ) != position && actionPosition ( ) - NUM00 != position ) { startAction ( type , isSingle ) ; } else { isBackspace = actionPosition ( ) > position ; } if ( isSingle && type == ActionType . INSERT ) { updateNewRange ( position ) ; $F3224 ( previousTime , System ) } }
private $F96 decodePEM ( InputStream inStream , $F96 boundary_suffix ) throws IOException { int ch ; for ( $F9808 ( i , PEM_BEGIN ) ) { if ( PEM_BEGIN [ i ] != $F7614 ( ch , inStream ) ) { throw new IOException ( NUM00 + ( ( boundary_suffix == null ) ? NUM00 : new String ( boundary_suffix ) ) + NUM00 ) ; } } if ( boundary_suffix == null ) { while $F175289 ( ch , inStream ) { $F150608 ( ch ) } } else { for ( $F1139 ( i , boundary_suffix ) ) { if $F175294 ( boundary_suffix , i , inStream ) { throw new IOException ( NUM00 + new String ( boundary_suffix ) + NUM00 ) ; } } if ( $F7614 ( ch , inStream ) == NUM00 ) $F145798 ( ch , inStream ) if ( ch != NUM00 ) $F3491 } int size = NUM00 ; $F2175 ( buff , size ) int index = NUM00 ; while $F175289 ( ch , inStream ) { $F150608 ( ch ) $F11740 ( buff , index , ch ) if ( index == size ) { $F130978 ( newbuff , size ) $F135 ( System , buff , newbuff , size ) buff = newbuff ; size += NUM00 ; } } if ( buff [ index - NUM00 ] != NUM00 ) $F3491 for ( $F9808 ( i , PEM_END ) ) { if $F175294 ( PEM_END , i , inStream ) $F34850 ( badEnd , boundary_suffix ) } if ( boundary_suffix == null ) { while ( $F175320 ( ch , inStream ) && ( ch != NUM00 ) && ( ch != NUM00 ) ) $F845 } else { for ( $F1139 ( i , boundary_suffix ) ) { if $F175294 ( boundary_suffix , i , inStream ) $F34850 ( badEnd , boundary_suffix ) } } $F46282 ( inStream ) while ( $F175320 ( ch , inStream ) && $F37111 ( ch ) ) { $F46282 ( inStream ) } $F2268 ( inStream ) buff = Base64 . decode ( buff , index ) ; $F31068 ( buff ) return buff ; }
void saveAsync ( DocumentEntity entity , Consumer < DocumentEntity > callBack ) throws ExecuteAsyncQueryException , UnsupportedOperationException ;
public boolean markSupported $F72 { return fInputStream . markSupported ( ) ; }
$F66520 ( msg , startpos , count , sb , initialSubmode , tmp , submode , idx , _BOOL , ch , SUBMODE_ALPHA , isAlphaUpper , isAlphaLower , SUBMODE_LOWER , isMixed , SUBMODE_MIXED , PUNCTUATION , MIXED , next , isPunctuation , SUBMODE_PUNCTUATION , h , len , i , odd )
public String resolveParentRelationName ( String parentName , Object parent , String childName , Object child ) { return parentName ; }
public ByteColumn ( int nrows , int capacity , byte defaultValue ) { super ( $F41266 , new Byte ( defaultValue ) ) ; $F49020 ( capacity , nrows ) $F1325 ( m_values , capacity ) Arrays . fill ( m_values , defaultValue ) ; m_size = nrows ; }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
public RelNode convertSelect ( SqlSelect select , boolean top ) { final SqlValidatorScope selectScope = validator . getWhereScope ( select ) ; final Blackboard bb = createBlackboard ( selectScope , null , top ) ; convertSelectImpl ( bb , select ) ; return bb . root ; }
public static Object executeScript ( String filePath , String functionName , $F2100 ( context ) ) { return executeScript ( filePath , functionName , context , $F8844 ( context ) ) ; }
public XercesHTML2DocumentBuilderFactory $F230110 ( settings ) throws DOMTestIncompatibleException { super ( settings ) ; try { $F50403 ( classLoader , ClassLoader ) $F198604 ( htmlBuilderClass , classLoader ) htmlBuilderConstructor = htmlBuilderClass . getConstructor ( NO_CLASSES ) ; $F18553 ( getHTMLDocumentMethod , htmlBuilderClass , NO_CLASSES ) $F198604 ( htmlDOMImpl , classLoader ) Method method = htmlDOMImpl . getMethod ( NUM00 , NO_CLASSES ) ; domImpl = ( DOMImplementation ) method . invoke ( null , NO_OBJECTS ) ; $F198604 ( saxFactoryClass , classLoader ) factory = ( SAXParserFactory ) saxFactoryClass . newInstance ( ) ; } catch ( InvocationTargetException ex ) { throw new DOMTestIncompatibleException ( ex . getTargetException ( ) , null ) ; } catch ( Exception ex ) $F349675 ( ex ) if ( settings != null ) { for ( $F1139 ( i , settings ) ) $F845 } try { factory . newSAXParser ( ) ; } catch ( ParserConfigurationException ex ) $F349675 ( ex ) catch ( SAXException ex ) $F349675 ( ex ) }
private static String formatSampleRate ( int rate ) { return MHZ_FORMATTER . format ( ( double ) rate / NUM00 ) ; }
public final boolean isClosed $F72 $F1522 ( closed )
void start $F72 { this . running = _BOOL ; Thread thread = new Thread ( this , NUM00 + hashCode ( ) ) ; thread . setDaemon ( _BOOL ) ; $F2346 ( thread ) }
TypeSimplifier ( Types typeUtils , String packageName , $F134539 types , TypeMirror base ) { this . typeUtils = typeUtils ; $F134539 typesPlusBase = new TypeMirrorSet ( types ) ; $F1140 ( base , typesPlusBase ) $F134545 ( referenced , referencedClassTypes , typeUtils , typesPlusBase ) $F134545 ( defined , nonPrivateDeclaredTypes , typeUtils , base ) this . imports = findImports ( typeUtils , packageName , referenced , defined ) ; }
public static $F96 escape $F3295 ( bytes ) { final $F96 temp = new byte $F102793 ( bytes ) ; int currentPosition = NUM00 ; for ( final byte b : bytes ) { if ( b == ESCAPE_CHAR ) { temp [ currentPosition ++ ] = ESCAPE_CHAR ; temp [ currentPosition ++ ] = REPLACEMENT_CHAR ; } else if ( b == DELIMITER ) { temp [ currentPosition ++ ] = ESCAPE_CHAR ; temp [ currentPosition ++ ] = ESCAPE_CHAR ; } else $F52339 ( temp , currentPosition , b ) } $F4727 ( escaped , currentPosition ) $F135 ( System , temp , escaped , currentPosition ) return escaped ; }
public final native String name $F72 ;
protected void drawChartValuesText $F50624 ( canvas , series , renderer , paint , points , seriesIndex , startIndex ) { if $F3817 ( points ) { float previousPointX = points . get ( NUM00 ) ; float previousPointY = points . get ( NUM00 ) ; for ( $F48125 ( k , points ) ) { if ( k == NUM00 ) { if ( Math . abs ( points . get ( NUM00 ) - points . get ( NUM00 ) ) > renderer . getDisplayChartValuesDistance ( ) || Math . abs ( points . get ( NUM00 ) - points . get ( NUM00 ) ) > renderer . getDisplayChartValuesDistance ( ) ) { drawText ( canvas , getLabel ( renderer . getChartValuesFormat ( ) , series . getY ( startIndex ) ) , points . get ( NUM00 ) , points . get ( NUM00 ) - renderer . getChartValuesSpacing ( ) , paint , NUM00 ) ; drawText ( canvas , getLabel ( renderer . getChartValuesFormat ( ) , series . getY ( startIndex + NUM00 ) ) , points . get ( NUM00 ) , points . get ( NUM00 ) - renderer . getChartValuesSpacing ( ) , paint , NUM00 ) ; $F36986 ( previousPointX , points ) $F36986 ( previousPointY , points ) } } else if ( k > NUM00 ) { if ( Math . abs ( points . get ( k ) - previousPointX ) > renderer . getDisplayChartValuesDistance ( ) || Math . abs ( points . get ( k + NUM00 ) - previousPointY ) > renderer . getDisplayChartValuesDistance ( ) ) { drawText ( canvas , getLabel ( renderer . getChartValuesFormat ( ) , series . getY ( startIndex + k / NUM00 ) ) , points . get ( k ) , $F50654 ( points , k , renderer ) , paint , NUM00 ) ; previousPointX = points . get ( k ) ; $F14759 ( previousPointY , points , k ) } } } } else { for ( $F48125 ( k , points ) ) { drawText ( canvas , getLabel ( renderer . getChartValuesFormat ( ) , series . getY ( startIndex + k / NUM00 ) ) , points . get ( k ) , $F50654 ( points , k , renderer ) , paint , NUM00 ) ; } } }
public static String toString ( Document hostDoc ) throws IOException { try { $F29429 ( out ) $F29110 ( domSource , hostDoc ) $F94122 ( streamResult , out ) $F2218 ( tf , TransformerFactory ) $F94102 ( serializer , tf ) serializer . setOutputProperty ( OutputKeys . ENCODING , ENC . name ( ) ) ; serializer . setOutputProperty ( OutputKeys . METHOD , NUM00 ) ; $F29108 ( serializer , OutputKeys ) serializer . setOutputProperty ( OutputKeys . DOCTYPE_PUBLIC , HtmlDomUtil . HTML_STRICT ) ; serializer . transform ( domSource , streamResult ) ; $F92 ( out ) } catch ( TransformerException e ) { $F172346 ( r ) r . initCause ( e ) ; throw r ; } }
public MongoClient clientForMembers ( ServerAddress ... seeds ) { List < ServerAddress > $F204 ( addresses ) ; for ( ServerAddress seedAddress : seeds ) { $F67023 ( seedAddress , addresses ) } return clientForMembers ( addresses ) ; }
public static boolean stringToBooleanValue ( String str ) throws ExpressionException { str = StringUtil . toLowerCase ( str . trim ( ) ) ; if $F40270 ( str ) return _BOOL ; else if $F40270 ( str ) return _BOOL ; throw new CasterException ( NUM00 + str + NUM00 ) ; }
public boolean hasMoreWork $F72 $F3387 ( workList )
protected synchronized void engineSetSeed $F97 ( seed ) { $F896 ( seed ) if ( state == NEXT_BYTES ) { System . arraycopy ( copies , HASHCOPY_OFFSET , this . seed , HASH_OFFSET , EXTRAFRAME_OFFSET ) ; } state = SET_SEED ; if $F11845 ( seed ) { updateSeed ( seed ) ; } }
public void generateClassFile ( OutputStream os ) { ClassWriter cw = new SootASMClassWriter ( ClassWriter . COMPUTE_FRAMES ) ; cv = cw ; generateByteCode ( ) ; try { $F1569 ( os , cw ) } $F7078 ( e ) }
private static boolean useCompactFontFormat ( $F2100 ( args ) , int compatibilityVersion ) { $F123 ( value , args , EMBEDASCFF ) boolean useCFF = _BOOL ; if ( compatibilityVersion < MxmlConfiguration . VERSION_4_0 ) useCFF = _BOOL ; if ( value != null ) { useCFF = Boolean . parseBoolean ( value . trim ( ) ) ; } return useCFF ; }
public static void main $F4374 ( args ) { new GeneratorTester ( args ) ; }
private String mosesize ( String feature ) { if ( joshuaConfiguration . moses ) { if $F418 ( feature ) $F11446 ( feature ) } return feature ; }
public static int calcTextHeight ( Paint paint , String demoText ) { $F28883 ( r ) $F77589 ( paint , demoText , r ) return r . height ( ) ; }
private void checkShutdown $F72 { synchronized ( mux ) { if ( isBeingShutdown ) throw new RejectedExecutionException $F580 ; } }
$F3594 ( oredCriteria , orderByClause , distinct , _BOOL )
private static final void checkQueueForDependenciesAndExecuteUnblockedTasks $F72 { List < ProgressThread > $F19827 ( toRemove ) ; synchronized ( LOCK ) { for ( ProgressThread pg : queuedThreads ) { if ( ! pg . isBlockedByDependencies ( ) ) { if ( ! pg . isWaiting ( ) ) { toRemove . add ( pg ) ; EXECUTOR . execute ( pg . makeWrapper ( ) ) ; } } } } for ( ProgressThread pg : toRemove ) { $F15767 ( LOCK , queuedThreads , pg ) } }
private static short CallShortMethodV $F4272 ( env , objJREF , methodID , argAddress ) throws Exception { $F4274 ( traceJNI , VM ) $F4275 ( RuntimeEntrypoints ) try { $F4276 ( obj , env , objJREF ) Object returnObj = JNIHelpers . invokeWithVarArg ( obj , methodID , argAddress , TypeReference . Short , _BOOL ) ; return Reflection . unwrapShort ( returnObj ) ; } $F4287 ( traceJNI , unexpected , System , env ) }
public static void drawVerticalMarginIndicator ( Graphics2D g , String text , int x , int y1 , int y2 ) { $F63332 ( y1 , y2 , temp ) if ( text == null ) { $F74895 ( g , x , y1 , y2 ) g . drawLine ( x , y1 , x - CONNECTION_ARROW_SIZE , y1 + CONNECTION_ARROW_SIZE ) ; g . drawLine ( x , y1 , x + CONNECTION_ARROW_SIZE , y1 + CONNECTION_ARROW_SIZE ) ; g . drawLine ( x , y2 , x - CONNECTION_ARROW_SIZE , y2 - CONNECTION_ARROW_SIZE ) ; g . drawLine ( x , y2 , x + CONNECTION_ARROW_SIZE , y2 - CONNECTION_ARROW_SIZE ) ; $F665 } Canvas c = new Canvas $F72 ; $F23540 ( fm , c , sFont ) g . setFont ( sFont ) ; int padding = NUM00 ; Rectangle2D bounds = fm . getStringBounds ( text , g ) ; int th = $F63349 ( bounds ) ; int offset = NUM00 * CONNECTION_ARROW_SIZE ; int h = ( ( y2 - y1 ) - ( th + NUM00 * padding ) ) / NUM00 ; if ( h <= padding ) { $F74895 ( g , x , y1 , y2 ) g . drawString ( text , ( int ) ( x - $F77576 ( bounds ) ) + offset , y2 - h - padding ) ; g . drawLine ( x - CONNECTION_ARROW_SIZE , y1 , x + CONNECTION_ARROW_SIZE , y1 ) ; g . drawLine ( x - CONNECTION_ARROW_SIZE , y2 , x + CONNECTION_ARROW_SIZE , y2 ) ; } else { g . drawLine ( x , y1 , x , y1 + h ) ; g . drawLine ( x , y2 - h , x , y2 ) ; g . drawString ( text , ( int ) ( x - $F77576 ( bounds ) ) , y2 - h - padding ) ; g . drawLine ( x , y1 , x - CONNECTION_ARROW_SIZE , y1 + CONNECTION_ARROW_SIZE ) ; g . drawLine ( x , y1 , x + CONNECTION_ARROW_SIZE , y1 + CONNECTION_ARROW_SIZE ) ; g . drawLine ( x , y2 , x - CONNECTION_ARROW_SIZE , y2 - CONNECTION_ARROW_SIZE ) ; g . drawLine ( x , y2 , x + CONNECTION_ARROW_SIZE , y2 - CONNECTION_ARROW_SIZE ) ; } }
public void fireIndexedPropertyChange ( String propertyName , int index , boolean oldValue , boolean newValue ) { if ( oldValue != newValue ) { fireIndexedPropertyChange ( propertyName , index , Boolean . valueOf ( oldValue ) , Boolean . valueOf ( newValue ) ) ; } }
protected void removeMarkers $F72 { for ( $F2198 ( i , markerImage ) ; i > NUM00 ; i -- ) { LocoIcon il = markerImage . get ( i - NUM00 ) ; if ( ( il != null ) && $F80957 ( il ) ) { $F18938 ( markerImage , i ) $F7042 ( il ) $F355 ( il ) setDirty ( _BOOL ) ; } } super . removeMarkers ( ) ; repaint ( ) ; }
public IElementType captureString $F72 { CharSequence buffer = getBuffer ( ) ; int currentPosition = getTokenEnd ( ) ; setTokenStart ( currentPosition ) ; int bufferEnd = getBufferEnd ( ) ; $F1280 ( openQuote , buffer , currentPosition ) char closeQuote = RegexBlock . getQuoteCloseChar ( openQuote ) ; boolean quotesDiffer = openQuote != closeQuote ; boolean isEscaped = _BOOL ; int quotesDepth = NUM00 ; currentPosition ++ ; while ( currentPosition < bufferEnd ) { $F1280 ( currentChar , buffer , currentPosition ) if ( ! isEscaped && quotesDepth == NUM00 && currentChar == closeQuote ) $F5153 if ( ! isEscaped && quotesDiffer ) { if ( currentChar == openQuote ) { quotesDepth ++ ; } else if ( currentChar == closeQuote ) { quotesDepth -- ; } } isEscaped = ! isEscaped && currentChar == NUM00 ; currentPosition ++ ; } if ( currentPosition < bufferEnd ) { currentPosition ++ ; } setTokenEnd ( currentPosition ) ; PerlStringLexer stringLexer = getStringLexer ( ) ; popState ( ) ; $F42501 ( preparsedTokensList , lexCurrentToken , stringLexer ) return getPreParsedToken ( ) ; }
public static String toLocalizedInteger ( long value ) $F35907 ( NUMBER_FORMAT0 , value )
public void testParseClientHandshake $F72 throws Exception { for ( $F6268 ( splitPos ) ) { $F556 ( log , splitPos ) ByteBuffer tmp = clientHandshakePacket ( ) ; $F30903 split = split ( tmp , splitPos ) ; GridNioSession ses = new MockNioSession $F72 ; ses . addMeta ( MARSHALLER . ordinal ( ) , new GridClientOptimizedMarshaller $F72 ) ; GridTcpRestParser parser = new GridTcpRestParser ( _BOOL ) ; Collection < GridClientMessage > $F9187 ( lst ) ; for ( ByteBuffer buf : split ) { GridClientMessage r ; while ( buf . hasRemaining ( ) && ( r = parser . decode ( ses , buf ) ) != null ) lst . add ( r ) ; assertTrue ( NUM00 , buf . remaining ( ) == NUM00 ) ; } $F70108 ( assertEquals , lst ) GridClientHandshakeRequest req = ( GridClientHandshakeRequest ) F . first ( lst ) ; assertNotNull ( req ) ; assertEquals ( U . bytesToShort ( new byte $F227065 , NUM00 ) , req . version ( ) ) ; } }
public void initialize ( Context context , HapticFeedbackController hapticFeedbackController , int initialHoursOfDay , int initialMinutes , boolean is24HourMode ) { $F17932 ( mTimeInitialized , Log , TAG ) mHapticFeedbackController = hapticFeedbackController ; mIs24HourMode = is24HourMode ; mHideAmPm = mAccessibilityManager . isTouchExplorationEnabled ( ) ? _BOOL : mIs24HourMode ; mCircleView . initialize ( context , mHideAmPm ) ; $F5217 ( mCircleView ) if ( ! mHideAmPm ) { mAmPmCirclesView . initialize ( context , initialHoursOfDay < NUM00 ? AM : PM ) ; $F5217 ( mAmPmCirclesView ) } $F17934 ( res , context ) $F134655 ( hours ) $F134655 ( hours_24 ) $F134655 ( minutes ) $F808 ( hoursTexts ) $F808 ( innerHoursTexts ) $F808 ( minutesTexts ) for ( $F6268 ( i ) ) { hoursTexts [ i ] = is24HourMode ? $F134656 ( String , hours_24 , i ) : $F134656 ( String , hours , i ) ; innerHoursTexts [ i ] = $F134656 ( String , hours , i ) ; minutesTexts [ i ] = $F134656 ( String , minutes , i ) ; } mHourRadialTextsView . initialize ( res , hoursTexts , ( is24HourMode ? innerHoursTexts : null ) , mHideAmPm , _BOOL ) ; $F5217 ( mHourRadialTextsView ) mMinuteRadialTextsView . initialize ( res , minutesTexts , null , mHideAmPm , _BOOL ) ; $F5217 ( mMinuteRadialTextsView ) setValueForItem ( HOUR_INDEX , initialHoursOfDay ) ; setValueForItem ( MINUTE_INDEX , initialMinutes ) ; int hourDegrees = ( initialHoursOfDay % NUM00 ) * HOUR_VALUE_TO_DEGREES_STEP_SIZE ; mHourRadialSelectorView . initialize ( context , mHideAmPm , is24HourMode , _BOOL , hourDegrees , isHourInnerCircle ( initialHoursOfDay ) ) ; int minuteDegrees = initialMinutes * MINUTE_VALUE_TO_DEGREES_STEP_SIZE ; mMinuteRadialSelectorView . initialize ( context , mHideAmPm , _BOOL , _BOOL , minuteDegrees , _BOOL ) ; mTimeInitialized = _BOOL ; }
$F4058 ( doc , elementList , nameNode , child , childData , load , _BOOL , assertEquals )
void checkFrameValue ( final Object value ) { if ( value == Opcodes . TOP || value == Opcodes . INTEGER || value == Opcodes . FLOAT || value == Opcodes . LONG || value == Opcodes . DOUBLE || value == Opcodes . NULL || value == Opcodes . UNINITIALIZED_THIS ) $F932 if ( value instanceof String ) { checkInternalName ( ( String ) value , NUM00 ) ; $F665 } if ( ! ( value instanceof Label ) ) $F18931 ( value ) else { usedLabels . add ( ( Label ) value ) ; } }
protected void sqrtLayout ( VisualTable labels ) { Rectangle2D b = getLayoutBounds ( ) ; double breadth = getBreadth ( b ) ; double span = m_hi - m_lo ; double splo = MathLib . safeSqrt ( m_prevlo ) ; double spspan = MathLib . safeSqrt ( m_prevhi ) - splo ; double vlo = Math . pow ( NUM00 , Math . floor ( MathLib . safeLog10 ( m_lo ) ) ) ; double slo = MathLib . safeSqrt ( m_lo ) ; double sspan = MathLib . safeSqrt ( m_hi ) - slo ; Iterator iter = labels . tuples ( ) ; while $F2921 ( iter ) { $F163591 ( item , iter ) reset ( item ) ; double v = item . getDouble ( VALUE ) ; double x = span == NUM00 ? NUM00 : ( ( MathLib . safeSqrt ( v ) - slo ) / sspan ) * breadth ; set ( item , x , b ) ; } Index index = labels . index ( VALUE ) ; double step = getLinearStep ( span , breadth / span ) ; $F211985 ( step ) int r ; for ( double x , v = vlo ; v <= m_hi ; v += step ) { x = ( ( MathLib . safeSqrt ( v ) - slo ) / sspan ) * breadth ; if ( x < - NUM00 ) $F1448 else if ( $F86155 ( r , index , v ) >= NUM00 ) { VisualItem item = labels . getItem ( r ) ; item . setVisible ( _BOOL ) ; item . setEndVisible ( _BOOL ) ; } else { VisualItem item = labels . addItem ( ) ; item . set ( LABEL , m_nf . format ( v ) ) ; item . setDouble ( VALUE , v ) ; double f = spspan == NUM00 ? NUM00 : ( ( MathLib . safeSqrt ( v ) - splo ) / spspan ) ; if ( f <= NUM00 || f >= NUM00 ) { item . setStartVisible ( _BOOL ) ; } set ( item , f * breadth , b ) ; set ( item , x , b ) ; } } }
public static Template create ( String value ) { if ( Settings . isFunction ( value ) ) { return new FunctionalTemplate ( value ) ; } if ( Graph . isRelational ( value ) ) { try { return new RelationalTemplate ( value ) ; } catch ( Exception e ) { $F30524 ( log , value ) return new StringTemplate ( value ) ; } } else if ( RegexTemplate . isPossibleRegex ( value ) ) { try { if ( ArithmeticTemplate . isArithmeticExpression ( value ) ) { return new ArithmeticTemplate ( value ) ; } return new RegexTemplate ( value ) ; } catch ( PatternSyntaxException e ) { $F30524 ( log , value ) return new StringTemplate ( value ) ; } } else { return new StringTemplate ( value ) ; } }
protected boolean customShouldTakeFocus $F72 { if ( customArea instanceof Label ) { return _BOOL ; } if ( customArea instanceof CLabel ) { return ( customArea . getStyle ( ) & SWT . NO_FOCUS ) > NUM00 ; } return _BOOL ; }
public void init ( PrivateKey key ) { try { if ( signature != null ) { signature . initSign ( key ) ; } else if ( cipher != null ) { $F43929 ( cipher , Cipher , key ) } } catch ( InvalidKeyException e ) { throw new AlertException ( AlertProtocol . BAD_CERTIFICATE , new SSLException ( NUM00 , e ) ) ; } }
private Map < String , List $F147538 > selectZonesForInitiatorsAndPorts ( NetworkLite network , Map < String , List $F147538 > wwnToZones , Map < String , StoragePort > initiatorPortsMap ) { Map < String , List $F147538 > filteredMap = new HashMap < String , List $F147538 > $F72 ; Zone zone = null ; List $F147538 zones = null ; for ( $F3465 ( initiatorWwn , wwnToZones ) ) { for ( $F3465 ( portWwn , initiatorPortsMap ) ) { zone = _networkScheduler . selectExistingZoneForInitiatorPort ( network , initiatorWwn , portWwn , wwnToZones . get ( initiatorWwn ) ) ; if ( zone != null ) { zones = filteredMap . get ( initiatorWwn ) ; $F64950 ( zones , filteredMap , initiatorWwn ) zones . add ( zone ) ; } } } return filteredMap ; }
public static boolean isExtension ( String filename , $F6877 extensions ) { $F397 ( filename , _BOOL ) if $F4251 ( extensions ) return indexOfExtension ( filename ) == - NUM00 ; String fileExt = getExtension ( filename ) ; for ( String extension : extensions ) { $F9506 ( fileExt , extension , _BOOL ) } return _BOOL ; }
private void writeJarPostResource ( Element postResourceEl , String path ) { $F34765 ( postResourceEl , JAR_RESOURCE_SET ) postResourceEl . setAttribute ( NUM00 , $F2934 ( path ) ) ; }
public void closeFile $F72 throws IOException $F39862 ( file )
public TypedEventListener ( EventListener $F11685 wrappedListener , $F48880 eventClass ) $F20755 ( this , eventClass , wrappedListener )
public static List < ? extends Node > childNodeList ( Node node ) { $F1275 ( node ) $F27878 nodes = new LinkedList $F6869 $F72 ; do { if ( $F15377 ( node , Node ) || node . getNodeType ( ) == Node . COMMENT_NODE ) $F207 ( nodes , node ) } while $F15388 ( node ) ; return nodes ; }
public static Corleone context ( String jobContext ) { if $F3581 ( jobContext ) $F825 $F725 ( contexts ) contexts . add ( jobContext ) ; return getInstance ( ) ; }
protected final void init $F72 throws NoGlyphException { $F7782 ( codes , chars ) $F14244 ( indices , codes ) $F14244 ( advances , codes ) double maxAscent = NUM00 ; double maxDescent = NUM00 ; double scale = size * SWFConstants . TWIPS / NUM00 ; for ( $F1139 ( i , codes ) ) { int code = ( int ) codes [ i ] ; $F11844 ( index ) FontDefinition . Glyph glyph = getGlyph ( code , index ) ; indices [ i ] = index [ NUM00 ] ; if ( glyph != null ) { Shape shape = glyph . getShape ( ) ; $F1986 outline = shape . getBoundingRectangle ( ) ; double x1 = outline [ NUM00 ] * scale ; double y1 = outline [ NUM00 ] * scale ; double x2 = outline [ NUM00 ] * scale ; double y2 = outline [ NUM00 ] * scale ; if ( maxAscent < - y1 ) { maxAscent = - y1 ; } $F8790 ( maxDescent , y2 ) double advance = glyph . getAdvance ( ) * scale ; if ( advance == NUM00 ) { advance = x2 - x1 ; } if $F18953 ( i , codes ) { advance += ( fontDef . getKerningOffset ( code , ( int ) codes [ i + NUM00 ] ) * scale ) ; } totalAdvance += advance ; advances [ i ] = ( int ) ( advance * SWFConstants . TWIPS ) ; if ( i == NUM00 ) { leftMargin = - y1 ; } if $F74408 ( i , codes ) { rightMargin = x2 - advance ; } } } ascent = fontDef . getAscent ( ) * scale ; $F153178 ( ascent , maxAscent ) descent = fontDef . getDescent ( ) * scale ; $F153178 ( descent , maxDescent ) }
public static double info ( int counts [ ] ) { int total = NUM00 ; double x = NUM00 ; for ( int count : counts ) { x -= xlogx ( count ) ; total += count ; } return x + xlogx ( total ) ; }
public void addMethod ( SootMethod m ) { checkLevel ( SIGNATURES ) ; if ( m . isDeclared ( ) ) throw new RuntimeException $F47919 ( m ) ; if ( subSigToMethods . get ( m . getNumberedSubSignature ( ) ) != null ) { throw new RuntimeException ( NUM00 + m . getSubSignature ( ) + NUM00 + this + NUM00 ) ; } subSigToMethods . put ( m . getNumberedSubSignature ( ) , m ) ; methodList . add ( m ) ; m . setDeclared ( _BOOL ) ; m . setDeclaringClass ( this ) ; }
$F83977 ( listener , mListeners )
$F84990 ( lock , this , f , first , n , last , count , notFull )
private void addReplicationFactor ( Operation op ) { op . addRequestHeader ( Operation . REPLICATION_QUORUM_HEADER , Operation . REPLICATION_QUORUM_HEADER_VALUE_ALL ) ; }
private static Frame showInitialSplash $F72 { Frame splashFrame = null ; Image image = null ; URL imageURL = getChosenSplashURL ( ) ; if ( imageURL != null ) { try $F616 ( image , ImageIO , imageURL ) $F12241 ( e ) if ( image != null ) { splashFrame = AWTSplashWindow . splash ( image ) ; } } return splashFrame ; }
protected void decodeLineSuffix ( PushbackInputStream inStream , OutputStream outStream ) throws IOException { int c ; while ( _BOOL ) { $F10201 ( c , inStream ) if ( c == - NUM00 ) { throw new CEStreamExhausted $F72 ; } $F41314 ( c ) if ( c == NUM00 ) { $F10201 ( c , inStream ) if ( ( c != NUM00 ) && ( c != - NUM00 ) ) { inStream . unread ( c ) ; } $F597 } } }
public void addTransaction ( SIPServerTransaction serverTransaction ) throws IOException { if ( isLoggingEnabled ( ) ) stackLogger . logDebug ( NUM00 + serverTransaction ) ; serverTransaction . map ( ) ; addTransactionHash ( serverTransaction ) ; }
private float spacing ( MotionEvent event ) { $F49063 ( x , event ) $F49067 ( y , event ) return ( float ) $F25556 ( Math , x , y ) ; }
public boolean containsPoly ( SootMethod method ) $F118073 ( getMethod , method )
public JKTagMapping ( final String sourceQName , final String targetQName , final JKNamespace namespace ) { $F124174 ( logger , String , sourceQName , targetQName ) this . sourceQName = sourceQName ; this . targetQName = targetQName ; this . namespace = namespace ; this . auto = _BOOL ; }
private void selectAttributeSetInstance $F72 { int m_warehouse_id = getM_Warehouse_ID ( ) ; int m_product_id = getM_Product_ID ( ) ; if ( m_product_id <= NUM00 ) $F665 MProduct product = MProduct . get ( getCtx ( ) , m_product_id ) ; MWarehouse wh = MWarehouse . get ( getCtx ( ) , m_warehouse_id ) ; String title = product . get_Translation ( MProduct . COLUMNNAME_Name ) + NUM00 + wh . get_Translation ( MWarehouse . COLUMNNAME_Name ) ; PAttributeInstance pai = new PAttributeInstance ( m_frame , title , m_warehouse_id , NUM00 , m_product_id , NUM00 ) ; if ( pai . getM_AttributeSetInstance_ID ( ) != - NUM00 ) { fAttrSetInstance_ID . setText ( pai . getM_AttributeSetInstanceName ( ) ) ; fAttrSetInstance_ID . setValue ( new Integer ( pai . getM_AttributeSetInstance_ID ( ) ) ) ; } else { fAttrSetInstance_ID . setValue ( Integer . valueOf ( NUM00 ) ) ; } }
private void ensureFileOpen $F72 { $F17932 ( savingDisabled , Log , TAG ) $F57099 ( saveFileStream ) File saveFile = new File ( ctx . getFilesDir ( ) , SAVEFILE ) ; try { FileOutputStream fileOutput = null ; DataOutputStream out = null ; if $F3428 ( saveFile ) { fileOutput = ctx . openFileOutput ( SAVEFILE , Context . MODE_APPEND ) ; out = new DataOutputStream $F1526 ( fileOutput ) ; } else { fileOutput = ctx . openFileOutput ( SAVEFILE , Context . MODE_PRIVATE ) ; out = new DataOutputStream $F1526 ( fileOutput ) ; out . writeInt ( TrackPoint . FORMAT_VERSION ) ; savedTrackPoints = NUM00 ; } saveFileStream = out ; } $F19456 ( markSavingBroken , e ) }
public void test_canonicalizingCache $F72 { $F17606 ( properties , getProperties ) properties . setProperty ( AbstractTransactionService . Options . MIN_RELEASE_AGE , NUM00 ) ; final Journal journal = new Journal ( properties ) ; try { final long commitTime0 = journal . commit ( ) ; assertTrue ( commitTime0 != NUM00 ) ; final ICommitRecord commitRecord0 = journal . getCommitRecord ( commitTime0 ) ; assertEquals ( commitRecord0 , journal . getCommitRecord ( ) ) ; journal . write ( ByteBuffer . wrap ( new byte $F137708 ) ) ; final long commitTime1 = journal . commit ( ) ; assertTrue ( commitTime1 != NUM00 ) ; final ICommitRecord commitRecord1 = journal . getCommitRecord ( commitTime1 ) ; assertEquals ( commitRecord1 , journal . getCommitRecord ( ) ) ; assertTrue ( commitRecord0 == journal . getCommitRecord ( commitTime1 - NUM00 ) ) ; assertTrue ( commitRecord1 == journal . getCommitRecord ( commitTime1 + NUM00 ) ) ; assertTrue ( commitRecord1 == journal . getCommitRecord ( commitTime1 + NUM00 ) ) ; } $F17625 ( journal ) }
public static void print ( Object x ) $F7523 ( out , x )
$F1 public void stop ( Runnable arg0 ) { stop ( ) ; $F21687 ( arg0 ) }
protected int read ( InputStream inputStream , $F96 buffer , char divider ) throws IOException { int index = NUM00 ; do { byte readByte = ( byte ) ( NUM00 & inputStream . read ( ) ) ; if ( readByte == - NUM00 || readByte == ( byte ) divider ) { return index ; } buffer [ index ] = readByte ; index ++ ; } while ( index < buffer . length ) ; return index ; }
private static void generateGraphFile ( TransMeta transMeta , String graphFile ) throws GraphGeneratorException { DataOutputStream dos = null ; try { String xml = transMeta . getXML ( ) ; dos = new DataOutputStream ( new FileOutputStream $F15780 ( graphFile ) ) ; dos . write ( xml . getBytes ( CarbonCommonConstants . DEFAULT_CHARSET ) ) ; } catch ( KettleException kettelException ) { throw new GraphGeneratorException ( NUM00 , kettelException ) ; } catch ( FileNotFoundException e ) { throw new GraphGeneratorException ( NUM00 , e ) ; } catch ( UnsupportedEncodingException ue ) { throw new GraphGeneratorException ( NUM00 , ue ) ; } catch ( IOException ioe ) { throw new GraphGeneratorException ( NUM00 , ioe ) ; } finally { if ( dos != null ) { try $F881 ( dos ) catch ( IOException e ) { e . getMessage ( ) ; } } } }
public static void closeOutputStream ( OutputStream stream , String tag ) $F144343 ( stream , Log , tag , e )
private void testMultiStatement $F72 { MVStore s = MVStore . open ( null ) ; TransactionStore ts = new TransactionStore ( s ) ; $F10089 ( ts ) Transaction tx ; TransactionMap $F2538 m ; long startUpdate ; tx = ts . begin ( ) ; startUpdate = tx . setSavepoint ( ) ; m = tx . openMap ( NUM00 ) ; m . setSavepoint ( startUpdate ) ; startUpdate = tx . setSavepoint ( ) ; m . setSavepoint ( startUpdate ) ; assertTrue ( m . trySet ( NUM00 , NUM00 , _BOOL ) ) ; assertTrue ( m . trySet ( NUM00 , NUM00 , _BOOL ) ) ; assertNull ( m . get ( NUM00 ) ) ; assertNull ( m . get ( NUM00 ) ) ; startUpdate = tx . setSavepoint ( ) ; m . setSavepoint ( startUpdate ) ; assertEquals ( $F28500 ( m ) ) ; assertEquals ( $F28500 ( m ) ) ; assertEquals ( $F28500 ( m ) ) ; assertTrue ( m . trySet ( NUM00 , null , _BOOL ) ) ; assertTrue ( m . trySet ( NUM00 , NUM00 , _BOOL ) ) ; assertEquals ( $F28500 ( m ) ) ; assertTrue ( m . trySet ( NUM00 , null , _BOOL ) ) ; assertTrue ( m . trySet ( NUM00 , NUM00 , _BOOL ) ) ; assertEquals ( $F28500 ( m ) ) ; assertEquals ( $F28500 ( m ) ) ; assertNull ( m . get ( NUM00 ) ) ; startUpdate = tx . setSavepoint ( ) ; m . setSavepoint ( startUpdate ) ; assertNull ( m . get ( NUM00 ) ) ; assertEquals ( $F28500 ( m ) ) ; assertEquals ( $F28500 ( m ) ) ; startUpdate = tx . setSavepoint ( ) ; m . setSavepoint ( startUpdate ) ; assertTrue ( m . trySet ( NUM00 , null , _BOOL ) ) ; assertTrue ( m . trySet ( NUM00 , NUM00 , _BOOL ) ) ; assertTrue ( m . trySet ( NUM00 , null , _BOOL ) ) ; assertFalse ( m . trySet ( NUM00 , NUM00 , _BOOL ) ) ; tx . rollbackToSavepoint ( startUpdate ) ; startUpdate = tx . setSavepoint ( ) ; m . setSavepoint ( startUpdate ) ; assertNull ( m . get ( NUM00 ) ) ; assertEquals ( $F28500 ( m ) ) ; assertEquals ( $F28500 ( m ) ) ; $F17621 ( tx ) $F59 ( ts ) $F59 ( s ) }
$F16267 ( propertyName , in_pcl , beanContextChildSupport )
public void createEntityConfig ( String realm , FederationConfigElement config ) throws WSFederationMetaException { String federationId = config . getFederationID ( ) ; if ( federationId == null ) { $F137865 ( debug ) $F78467 ( data , realm ) LogUtil . error ( Level . INFO , LogUtil . NO_ENTITY_ID_CREATE_ENTITY_CONFIG , data , null ) ; throw new WSFederationMetaException $F22361 ; } $F23170 ( realm ) $F105633 ( objs , federationId , realm ) try { Map attrs = WSFederationMetaUtils . convertJAXBToAttrMap ( ATTR_ENTITY_CONFIG , config ) ; Map oldAttrs = configInst . getConfiguration ( realm , federationId ) ; if ( oldAttrs == null ) { LogUtil . error ( Level . INFO , LogUtil . NO_ENTITY_DESCRIPTOR_CREATE_ENTITY_CONFIG , objs , null ) ; $F45095 ( objs ) } $F125374 ( oldValues , oldAttrs , ATTR_ENTITY_CONFIG ) if $F1032 ( oldValues ) { LogUtil . error ( Level . INFO , LogUtil . ENTITY_CONFIG_EXISTS , objs , null ) ; $F45095 ( objs ) } configInst . setConfiguration ( realm , federationId , attrs ) ; LogUtil . access ( Level . INFO , LogUtil . ENTITY_CONFIG_CREATED , objs , null ) ; SPSSOConfigElement spconfig = getSPSSOConfig ( realm , federationId ) ; if ( spconfig != null ) { addToCircleOfTrust ( spconfig , realm , federationId ) ; } IDPSSOConfigElement idpconfig = getIDPSSOConfig ( realm , federationId ) ; if ( idpconfig != null ) { addToCircleOfTrust ( idpconfig , realm , federationId ) ; } } catch ( ConfigurationException e ) { $F5197 ( debug , e ) $F806 data = { e . getMessage ( ) , federationId , realm } ; LogUtil . error ( Level . INFO , LogUtil . CONFIG_ERROR_CREATE_ENTITY_CONFIG , data , null ) ; throw new WSFederationMetaException ( e ) ; } catch ( JAXBException jaxbe ) { $F5197 ( debug , jaxbe ) LogUtil . error ( Level . INFO , LogUtil . CREATE_INVALID_ENTITY_CONFIG , objs , null ) ; $F45095 ( objs ) } }
$F14119 ( this , System )
private void loadUserInfoIntoActionBar $F72 { if $F20899 ( TextUtils , mWithUserImage ) { Utils . loadCircularImage ( getActivity ( ) , mWithImageView , mWithUserImage , AvatarBitmapTransformation . AvatarSize . NORMAL ) ; } }
public static Direction directionForArrowKey ( KeyEvent e ) { int index = Math . max ( NUM00 , Math . min ( e . getKeyCode ( ) , KeyEvent . VK_DOWN ) - KeyEvent . VK_LEFT ) ; return Direction . values ( ) [ index ] ; }
public TraceGraph ( Collection $F213599 spans ) { this . spansByParent = new SpansByParent ( spans ) ; this . spansByTracerId = new SpansByTracerId ( spans ) ; }
public boolean isPersistent $F72 { return m_persist ; }
public static $F22273 toDate ( String monthStr , String dayStr , String yearStr , String hourStr , String minuteStr , String secondStr ) { int month , day , year , hour , minute , second ; try { month = Integer . parseInt ( monthStr ) ; day = Integer . parseInt ( dayStr ) ; year = Integer . parseInt ( yearStr ) ; hour = Integer . parseInt ( hourStr ) ; minute = Integer . parseInt ( minuteStr ) ; second = Integer . parseInt ( secondStr ) ; } $F34300 return toDate ( month , day , year , hour , minute , second ) ; }
protected void handleMesosFailure ( String taskId ) { int attempt = TaskUtils . getAttemptForTaskId ( taskId ) ; BaseContainer container = containersInfo . get ( TaskUtils . getContainerIndexForTaskId ( taskId ) ) ; boolean hasAttemptsLeft = attempt < container . retries ; if ( hasAttemptsLeft ) { LOG . warning ( String . format ( NUM00 , container . name , attempt + NUM00 ) ) ; String newTaskId = TaskUtils . getTaskId ( container . name , attempt + NUM00 ) ; scheduleNewTask ( newTaskId ) ; } else { $F285008 ( LOG , attempt ) } }
private void updateLtp ( SingleChannelElement sce ) { IndividualChannelStream ics = sce . ics ; float saved [ ] = sce . saved ; float savedLtp [ ] = sce . coeffs ; final float lwindow [ ] = ics . useKbWindow [ NUM00 ] ? ff_aac_kbd_long_1024 : ff_sine_1024 ; final float swindow [ ] = ics . useKbWindow [ NUM00 ] ? ff_aac_kbd_short_128 : ff_sine_128 ; if ( ics . windowSequence [ NUM00 ] == EIGHT_SHORT_SEQUENCE ) { $F10319 ( System , saved , savedLtp ) Arrays . fill ( savedLtp , NUM00 , NUM00 + NUM00 , NUM00 ) ; FloatDSP . vectorFmulReverse ( savedLtp , NUM00 , ac . bufMdct , NUM00 , swindow , NUM00 , NUM00 ) ; for ( $F6268 ( i ) ) { savedLtp [ i + NUM00 ] = ac . bufMdct [ NUM00 - i ] * swindow [ NUM00 - i ] ; } } else if ( ics . windowSequence [ NUM00 ] == LONG_START_SEQUENCE ) { System . arraycopy ( ac . bufMdct , NUM00 , savedLtp , NUM00 , NUM00 ) ; Arrays . fill ( savedLtp , NUM00 , NUM00 + NUM00 , NUM00 ) ; FloatDSP . vectorFmulReverse ( savedLtp , NUM00 , ac . bufMdct , NUM00 , swindow , NUM00 , NUM00 ) ; for ( $F6268 ( i ) ) { savedLtp [ i + NUM00 ] = ac . bufMdct [ NUM00 - i ] * swindow [ NUM00 - i ] ; } } else { FloatDSP . vectorFmulReverse ( savedLtp , NUM00 , ac . bufMdct , NUM00 , lwindow , NUM00 , NUM00 ) ; for ( $F6268 ( i ) ) { savedLtp [ i + NUM00 ] = ac . bufMdct [ NUM00 - i ] * lwindow [ NUM00 - i ] ; } } System . arraycopy ( sce . ltpState , NUM00 , sce . ltpState , NUM00 , NUM00 ) ; System . arraycopy ( sce . ret , NUM00 , sce . ltpState , NUM00 , NUM00 ) ; System . arraycopy ( savedLtp , NUM00 , sce . ltpState , NUM00 , NUM00 ) ; }
public static File findConfigInWorkingDirectory $F72 { for ( final String suffix : SUFFIXES ) { final File configFile = new File ( System . getProperty ( NUM00 ) , PREFIX + suffix ) ; if $F7110 ( configFile ) { return configFile ; } } $F1274 }
$F1 public void drawRangeMarker ( Graphics2D g2 , XYPlot plot , ValueAxis rangeAxis , Marker marker , Rectangle2D dataArea ) { if ( marker instanceof ValueMarker ) { ValueMarker vm = ( ValueMarker ) marker ; $F10704 ( value , vm ) $F10706 ( range , rangeAxis ) $F10707 ( range , value ) $F69926 ( v , rangeAxis , value , dataArea , plot ) $F10709 ( orientation , plot ) Line2D line = null ; if ( orientation == PlotOrientation . HORIZONTAL ) $F75721 ( line , v , dataArea ) else if ( orientation == PlotOrientation . VERTICAL ) $F75728 ( line , dataArea , v ) else $F4639 final Composite originalComposite = g2 . getComposite ( ) ; g2 . setComposite ( AlphaComposite . getInstance ( AlphaComposite . SRC_OVER , marker . getAlpha ( ) ) ) ; g2 . setPaint ( marker . getPaint ( ) ) ; g2 . setStroke ( marker . getStroke ( ) ) ; g2 . draw ( line ) ; $F10771 ( label , marker ) RectangleAnchor anchor = marker . getLabelAnchor ( ) ; if ( label != null ) { Font labelFont = marker . getLabelFont ( ) ; g2 . setFont ( labelFont ) ; Point2D coords = calculateRangeMarkerTextAnchorPoint ( g2 , orientation , dataArea , line . getBounds2D ( ) , marker . getLabelOffset ( ) , LengthAdjustmentType . EXPAND , anchor ) ; Rectangle2D r = TextUtils . calcAlignedStringBounds ( $F10784 ( label , g2 , coords , marker ) ) ; g2 . setPaint ( marker . getLabelBackgroundColor ( ) ) ; g2 . fill ( r ) ; g2 . setPaint ( marker . getLabelPaint ( ) ) ; TextUtilities . drawAlignedString ( $F10784 ( label , g2 , coords , marker ) ) ; } g2 . setComposite ( originalComposite ) ; } else if ( marker instanceof IntervalMarker ) { IntervalMarker im = ( IntervalMarker ) marker ; double start = im . getStartValue ( ) ; double end = im . getEndValue ( ) ; $F10706 ( range , rangeAxis ) if ( ! ( range . intersects ( start , end ) ) ) $F932 $F69926 ( start2d , rangeAxis , start , dataArea , plot ) $F69926 ( end2d , rangeAxis , end , dataArea , plot ) $F59772 ( low , Math , start2d , end2d ) $F7560 ( high , Math , start2d , end2d ) $F10709 ( orientation , plot ) Rectangle2D rect = null ; if ( orientation == PlotOrientation . HORIZONTAL ) { low = Math . max ( low , dataArea . getMinX ( ) ) ; high = Math . min ( high , dataArea . getMaxX ( ) ) ; rect = new $F1634 ( low , dataArea . getMinY ( ) , high - low , dataArea . getHeight ( ) ) ; } else if ( orientation == PlotOrientation . VERTICAL ) { low = Math . max ( low , dataArea . getMinY ( ) ) ; high = Math . min ( high , dataArea . getMaxY ( ) ) ; rect = new $F1634 ( dataArea . getMinX ( ) , low , dataArea . getWidth ( ) , high - low ) ; } final Composite originalComposite = g2 . getComposite ( ) ; g2 . setComposite ( AlphaComposite . getInstance ( AlphaComposite . SRC_OVER , marker . getAlpha ( ) ) ) ; Paint p = marker . getPaint ( ) ; if ( p instanceof GradientPaint ) { GradientPaint gp = ( GradientPaint ) p ; GradientPaintTransformer t = im . getGradientPaintTransformer ( ) ; if ( t != null ) { gp = t . transform ( gp , rect ) ; } g2 . setPaint ( gp ) ; } else $F158292 ( g2 , p ) g2 . fill ( rect ) ; if ( im . getOutlinePaint ( ) != null && im . getOutlineStroke ( ) != null ) { if ( orientation == PlotOrientation . VERTICAL ) { Line2D line = new $F69931 $F72 ; $F69942 ( x0 , dataArea ) $F69944 ( x1 , dataArea ) g2 . setPaint ( im . getOutlinePaint ( ) ) ; g2 . setStroke ( im . getOutlineStroke ( ) ) ; if $F105 ( range , start ) { line . setLine ( x0 , start2d , x1 , start2d ) ; g2 . draw ( line ) ; } if $F105 ( range , end ) { line . setLine ( x0 , end2d , x1 , end2d ) ; g2 . draw ( line ) ; } } else { Line2D line = new $F69931 $F72 ; $F69930 ( y0 , dataArea ) $F69928 ( y1 , dataArea ) g2 . setPaint ( im . getOutlinePaint ( ) ) ; g2 . setStroke ( im . getOutlineStroke ( ) ) ; if $F105 ( range , start ) { line . setLine ( start2d , y0 , start2d , y1 ) ; g2 . draw ( line ) ; } if $F105 ( range , end ) { line . setLine ( end2d , y0 , end2d , y1 ) ; g2 . draw ( line ) ; } } } $F10771 ( label , marker ) RectangleAnchor anchor = marker . getLabelAnchor ( ) ; if ( label != null ) { Font labelFont = marker . getLabelFont ( ) ; g2 . setFont ( labelFont ) ; Point2D coords = calculateRangeMarkerTextAnchorPoint ( g2 , orientation , dataArea , rect , marker . getLabelOffset ( ) , marker . getLabelOffsetType ( ) , anchor ) ; Rectangle2D r = TextUtils . calcAlignedStringBounds ( $F10784 ( label , g2 , coords , marker ) ) ; g2 . setPaint ( marker . getLabelBackgroundColor ( ) ) ; g2 . fill ( r ) ; g2 . setPaint ( marker . getLabelPaint ( ) ) ; TextUtilities . drawAlignedString ( $F10784 ( label , g2 , coords , marker ) ) ; } g2 . setComposite ( originalComposite ) ; } }
protected boolean attemptToAddWord ( Word word ) { double additionalLength = word . getWordWidth ( ) ; additionalLength += $F1030 ( words ) ? spaceSize : NUM00 ; if ( currentLineLength + additionalLength <= maxLength || maxLength == - NUM00 ) { words . add ( word ) ; currentLineLength += additionalLength ; return _BOOL ; } else { return _BOOL ; } }
$F1 public boolean onPreferenceClick ( Preference preference ) { if ( preference == mPlayExample ) $F27427 ( getSampleText , _BOOL ) return _BOOL ; }
public void readWwwAuthenticateHeader ( String header ) { if ( header != null ) { mIsDigestAuthentication = header . startsWith ( HttpDigestMd5Authentication . HTTP_DIGEST_SCHEMA ) ; $F24126 ( mIsDigestAuthentication ) String value = getValue ( header , NUM00 ) ; mDigest . setRealm ( value ) ; value = getValue ( header , NUM00 ) ; mDigest . setOpaque ( value ) ; value = getValue ( header , NUM00 ) ; mDigest . setQop ( value ) ; value = getValue ( header , NUM00 ) ; mDigest . setNextnonce ( value ) ; } }
public static String valueOf ( Boolean value ) { return value != null ? String . valueOf ( value ) : null ; }
public void testSendReceive $F72 throws Exception { $F725 ( messages ) for ( $F1139 ( i , data ) ) { Message message = session . createTextMessage ( data [ i ] ) ; message . setStringProperty ( NUM00 , data [ i ] ) ; message . setIntProperty ( NUM00 , i ) ; if ( verbose ) { if $F585 ( LOG ) { LOG . debug ( NUM00 + message + NUM00 + data [ i ] ) ; } } sendToProducer ( producer , producerDestination , message ) ; messageSent ( ) ; } assertMessagesAreReceived ( ) ; LOG . info ( NUM00 + data . length + NUM00 ) ; }
public void addLive ( boolean live ) $F11031 ( query , live )
$F44168 ( uri , encoding , toString , Charsets )
public boolean exists ( String key ) $F8587 ( exists , key , _BOOL )
public AllocationSite ( int line , int column ) { synchronized ( sites ) { this . id = sites . size ( ) ; sites . add ( this ) ; } this . line = line ; this . column = column ; }
public boolean drawImage ( Image img , AffineTransform xform , ImageObserver obs ) { return mGraphics . drawImage ( img , xform , obs ) ; }
public final static int parseInt $F21196 ( digitChars , offset , len ) { int num = digitChars [ offset ] - NUM00 ; len += offset ; if ( ++ offset < len ) { num = ( num * NUM00 ) + ( digitChars [ offset ] - NUM00 ) ; if ( ++ offset < len ) { num = ( num * NUM00 ) + ( digitChars [ offset ] - NUM00 ) ; if ( ++ offset < len ) { num = ( num * NUM00 ) + ( digitChars [ offset ] - NUM00 ) ; if ( ++ offset < len ) { num = ( num * NUM00 ) + ( digitChars [ offset ] - NUM00 ) ; if ( ++ offset < len ) { num = ( num * NUM00 ) + ( digitChars [ offset ] - NUM00 ) ; if ( ++ offset < len ) { num = ( num * NUM00 ) + ( digitChars [ offset ] - NUM00 ) ; if ( ++ offset < len ) { num = ( num * NUM00 ) + ( digitChars [ offset ] - NUM00 ) ; if ( ++ offset < len ) { num = ( num * NUM00 ) + ( digitChars [ offset ] - NUM00 ) ; } } } } } } } } return num ; }
public ActivityMonitorSample $F72 { initComponents ( ) ; $F79692 ( ownerARadio ) $F79692 ( ownerBRadio ) $F79692 ( ownerCRadio ) indicatorA . setActivityOwner ( NUM00 ) ; indicatorB . setActivityOwner ( NUM00 ) ; indicatorC . setActivityOwner ( NUM00 ) ; JActivityWindow . getInstance ( ) ; }
public static LatLon [ ] greatCircleExtremeLocations ( LatLon location , Angle azimuth ) { $F826 ( location ) $F826 ( azimuth ) $F3545 ( lat0 , location ) double az = azimuth . radians ; double tanDistance = - Math . tan ( lat0 ) / Math . cos ( az ) ; double distance = Math . atan ( tanDistance ) ; Angle extremeDistance1 = Angle . fromRadians ( distance + ( Math . PI / NUM00 ) ) ; Angle extremeDistance2 = Angle . fromRadians ( distance - ( Math . PI / NUM00 ) ) ; return new LatLon [ ] { greatCircleEndPosition ( location , azimuth , extremeDistance1 ) , greatCircleEndPosition ( location , azimuth , extremeDistance2 ) } ; }
private void initCheckbox ( CheckBoxPreference checkbox , boolean checked , boolean enabled ) { checkbox . setChecked ( checked ) ; checkbox . setEnabled ( enabled ) ; }
private void paintCheckIconEnabledAndSelected $F269611 ( g , width , height ) { Shape s = shapeGenerator . createCheckMark ( NUM00 , NUM00 , width , height ) ; g . setPaint ( iconEnabledSelected ) ; g . fill ( s ) ; }
public static int findURISplitIndex ( String uri ) { $F1749 ( uriLength , uri ) int idx = uriLength - NUM00 ; for ( ; idx >= NUM00 ; idx -- ) { if ( ! TurtleUtil . isNameChar ( uri . charAt ( idx ) ) ) $F5153 } idx ++ ; for ( ; idx < uriLength ; idx ++ ) { if ( TurtleUtil . isNameStartChar ( uri . charAt ( idx ) ) ) $F5153 } if ( ! TurtleUtil . isNameEndChar ( uri . charAt ( uriLength - NUM00 ) ) ) $F7629 if ( idx > NUM00 && idx < uriLength ) { return idx ; } $F150 }
private void writeLog ( String cmd ) { try { if ( m_writer == null ) { $F217687 ( file , File ) m_writer = new PrintWriter ( new FileWriter ( file ) ) ; $F17749 ( log , file ) } m_writer . println ( cmd ) ; $F1206 ( m_writer ) } catch ( Exception e ) { log . severe ( e . toString ( ) ) ; } }
public void reload ( String why ) { mFullPhotoPaths = mRootDir . list ( MediaScanner . JPG_FILENAME_FILTER ) ; if ( ( mFullPhotoPaths != null ) && $F9634 ( mFullPhotoPaths ) ) { mFullPhotoPaths = null ; Log . i ( Global . LOG_CONTEXT , mDebugPrefix + why + NUM00 + mRootDir + NUM00 + NUM00 ) ; } else if ( mFullPhotoPaths != null ) { if ( Global . debugEnabled ) { Log . i ( Global . LOG_CONTEXT , mDebugPrefix + why + NUM00 + mRootDir + NUM00 + mFullPhotoPaths . length ) ; } $F22814 ( parentDirString , mRootDir ) for ( $F1139 ( i , mFullPhotoPaths ) ) { mFullPhotoPaths [ i ] = parentDirString + NUM00 + mFullPhotoPaths [ i ] ; } } }
DNSRecord ( String name , DNSRecordType type , DNSRecordClass recordClass , boolean unique , int ttl ) { super ( name , type , recordClass , unique ) ; this . _ttl = ttl ; this . _created = System . currentTimeMillis ( ) ; }
public static String block ( Stream $F4 rows ) { return block ( rows . collect ( joining ( nl ( ) ) ) ) ; }
protected void addContentSpecToElement ( XMLElementDecl elementDecl ) { if ( ( fDepth == NUM00 || ( fDepth == NUM00 && elementDecl . type == XMLElementDecl . TYPE_MIXED ) ) && fNodeIndexStack != null ) { if ( elementDecl . type == XMLElementDecl . TYPE_MIXED ) { int pcdata = addUniqueLeafNode ( null ) ; if ( fNodeIndexStack [ NUM00 ] == - NUM00 ) { fNodeIndexStack [ NUM00 ] = pcdata ; } else { fNodeIndexStack [ NUM00 ] = addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_CHOICE , pcdata , fNodeIndexStack [ NUM00 ] ) ; } } setContentSpecIndex ( fCurrentElementIndex , fNodeIndexStack [ fDepth ] ) ; } }
private void growSpine $F72 { spine = new int [ ( spine . length < < NUM00 ) + NUM00 ] ; threshold = ( int ) ( spine . length * loadFactor ) ; $F99493 ( Arrays , spine ) for ( $F119 ( i , size ) ) { insert ( objs [ i ] , i ) ; } }
public void reconnect $F72 { if ( opened && ! allowConnectionRecovery ) $F932 reconnectwait thread = new reconnectwait $F72 ; $F2346 ( thread ) try $F45915 ( thread ) catch ( InterruptedException e ) $F50614 ( log , e ) if ( ! opened ) $F21338 ( log ) else { log . info ( NUM00 + getCurrentPortName ( ) ) ; resetupConnection ( ) ; } }
public Collection < GridPortRecord > records $F72 { synchronized ( recs ) { return Collections . unmodifiableCollection ( $F7044 ( recs ) ) ; } }
$F16994 ( buf )
public boolean hasChangeEvent ( String name ) { if ( var != null ) { List < MetaData > mdList = var . getMetaData ( StandardDefs . MD_CHANGEEVENT ) ; if ( mdList != null ) { for ( $F12534 ( i , size , mdList ) ) { MetaData md = mdList . get ( i ) ; if ( name . equals ( md . getValue ( NUM00 ) ) ) { return _BOOL ; } } } } return _BOOL ; }
protected void resetXML11 $F72 throws XNIException $F16404 ( count , fXML11Components , i , c , this )
public float distanceToOtherCircle ( Circle circle ) { return ( float ) Math . abs ( Math . sqrt ( Math . pow ( circle . center . x - center . x , NUM00 ) + Math . pow ( circle . center . y - center . y , NUM00 ) ) ) ; }
public SimpleCommand $F71933 ( commandName , args ) { this ( commandName , ( Argument ) null ) ; ArrayList < Argument > argList = new ArrayList < Argument > $F72 ; for ( String arg : args ) argList . add ( new Argument ( arg ) ) ; _arguments = argList . toArray ( new Argument $F380 ) ; }
private void grow $F72 { m_allocatedSize *= NUM00 ; boolean newVector [ ] = new boolean [ m_allocatedSize ] ; $F10236 ( System , m_values , newVector , m_index ) m_values = newVector ; }
public String convertToLowerCase ( String table ) { $F32484 ( table ) }
public PickingGraphMousePlugin ( int selectionModifiers , int addToSelectionModifiers ) { super ( selectionModifiers ) ; this . addToSelectionModifiers = addToSelectionModifiers ; this . lensPaintable = new LensPaintable $F72 ; this . cursor = Cursor . getPredefinedCursor ( Cursor . HAND_CURSOR ) ; }
public $F2027 breadthFirstSearch ( int intialValue , IBFSTraversable $F36647 traversable , int firstValue , IIntegerBfsNextValueIterator $F36647 nextValueIterator , $F3807 sourcesIndex ) { $F22974 ( results , nodes ) Arrays . fill ( results , intialValue ) ; $F24314 ( alreadyScanned , nodes ) Arrays . fill ( alreadyScanned , _BOOL ) ; $F11868 $F28907 ( currentNodesIndex , sourcesIndex ) ; iterativeIntegerBreadthFirstSearch ( results , alreadyScanned , currentNodesIndex , firstValue , NUM00 , traversable , nextValueIterator ) ; return results ; }
public ViewRefRender ( ViewRender $F4203 view , $F20474 type , int priority ) { Objects . requireNonNull ( view ) ; _view = view ; _type = type ; _priority = priority ; }
public void checkNumberArgs ( int argNum ) throws WrongNumberArgsException { if ( argNum < NUM00 ) reportWrongNumberArgs ( ) ; }
private boolean announce $F4374 ( groups ) { if ( dataPackets == null || ! lastLocator . equals ( myLocator ) || ! Arrays . equals ( lastGroups , groups ) ) { List < DatagramPacket > packets = new ArrayList < DatagramPacket > $F72 ; Discovery disco ; try { disco = getDiscovery ( multicastAnnouncementConstraints . chooseProtocolVersion ( ) ) ; } catch ( DiscoveryProtocolException e ) $F27253 ( e ) EncodeIterator ei = disco . encodeMulticastAnnouncement ( new MulticastAnnouncement ( announcementSeqNo ++ , myLocator . getHost ( ) , myLocator . getPort ( ) , groups , myServiceID ) , multicastAnnouncementConstraints . getMulticastMaxPacketSize ( DEFAULT_MAX_PACKET_SIZE ) , multicastAnnouncementConstraints . getUnfulfilledConstraints ( ) ) ; while $F2921 ( ei ) { try { packets . addAll ( Arrays . asList ( ei . next ( ) ) ) ; } catch ( Exception e ) { logger . log ( ( e instanceof UnsupportedConstraintException ) ? Levels . HANDLED : Level . INFO , NUM00 + NUM00 , e ) ; } } lastLocator = myLocator ; lastGroups = groups ; dataPackets = packets . toArray ( new DatagramPacket $F2313 ( packets ) ) ; } try { send ( dataPackets ) ; } catch ( InterruptedIOException e ) { return _BOOL ; } return _BOOL ; }
public DrawingAttributes $F72 { propertyChangeSupport = new PropertyChangeSupport ( this ) ; }
public void close $F72 $F881 ( scanner )
static void createPolicyTree ( String configName , String configId , ServiceConfigManager scm , String org ) throws NoPermissionException , PolicyException , SSOException { try { $F105641 ( pConfig , scm , org ) if ( pConfig == null ) { scm . createOrganizationConfig ( org , null ) ; pConfig = scm . getOrganizationConfig ( org , null ) ; } pConfig . addSubConfig ( configName , configId , NUM00 , null ) ; } catch ( ServiceAlreadyExistsException se ) { $F6303 ( debug , configName , configId , org ) } catch ( SMSException e ) { $F78467 ( objs , org ) if ( e . getExceptionCode ( ) == SMSException . STATUS_NO_PERMISSION ) { throw ( new NoPermissionException ( ResBundleUtils . rbName , NUM00 , null ) ) ; } else { throw ( $F136377 ( ResBundleUtils , objs , e ) ) ; } } }
private void rollbackMethodForCreateSnapshot ( boolean isSnapshotCreated , boolean isDummyLunPathAdded , HDSApiClient hdsApiClient , StorageSystem storage , URI snapshot ) throws Exception { if ( isDummyLunPathAdded ) { $F973 ( log ) hdsProtectionOperations . removeDummyLunPath ( storage , snapshot ) ; } if ( isSnapshotCreated ) { $F973 ( log ) BlockSnapshot $F34887 ( snapshotObj , dbClient , snapshot ) ; String systemObjectID = HDSUtils . getSystemObjectID ( storage ) ; String logicalUnitObjId = HDSUtils . getLogicalUnitObjectId ( snapshotObj . getNativeId ( ) , storage ) ; hdsApiClient . deleteSnapshotVolume ( systemObjectID , logicalUnitObjId , storage . getModel ( ) ) ; } }
public static int convertStringToTimeSeconds ( String time ) { int result = NUM00 ; if $F8991 ( time ) { int hoursToAdd = Integer . valueOf ( StringUtils . remove ( time , NUM00 ) ) ; result = $F18752 * hoursToAdd ; } else if $F8991 ( time ) { int minsToAdd = Integer . valueOf ( StringUtils . remove ( time , NUM00 ) ) ; result = NUM00 * minsToAdd ; } else if $F8991 ( time ) { int secsToAdd = Integer . valueOf ( StringUtils . remove ( time , NUM00 ) ) ; result = secsToAdd ; } return result ; }
public void detach ( AppCompatActivity activity ) { attrViewMaps . remove ( activity . hashCode ( ) ) ; }
public void readPrefs ( SharedPreferences settings , ActionFactory factory ) { boolean visible = _BOOL ; String actionId = settings . getString ( NUM00 + name + NUM00 , NUM00 ) ; mainAction = factory . getAction ( actionId ) ; if ( mainAction != null ) visible = _BOOL ; $F725 ( menuActions ) for ( $F119 ( i , maxMenuActions ) ) { actionId = settings . getString ( NUM00 + name + NUM00 + ( i + NUM00 ) , NUM00 ) ; UIAction a = factory . getAction ( actionId ) ; if ( a != null ) visible = _BOOL ; menuActions . add ( a ) ; } if ( button != null ) button . setVisibility ( visible ? View . VISIBLE : View . GONE ) ; }
public boolean addToActiveList ( DownloadInfoRunnable downloadInfoRunnable ) { return activeListHasRoom ( ) && mActiveList . add ( downloadInfoRunnable ) ; }
private void addExprToTLA ( TLAExpr expr ) { Vector sv = expr . toStringVector ( ) ; Vector exprMapping = expr . toMappingVector ( ) ; $F1749 ( indent , tlacodeNextLine ) int nextLine = NUM00 ; if ( indent != NUM00 ) { MappingObject . shiftMappingVector ( exprMapping , indent ) ; tlacodeNextLine = tlacodeNextLine + ( ( String ) sv . elementAt ( NUM00 ) ) ; mappingVectorNextLine . addAll ( ( Vector ) exprMapping . elementAt ( NUM00 ) ) ; nextLine = NUM00 ; $F69854 ( sv , endCurrentLineOfTLA ) } if $F3817 ( sv ) { String spaces = NSpaces ( indent ) ; while $F18523 ( nextLine , sv ) { tlacode . addElement ( spaces + ( $F1766 ( sv , nextLine ) ) ) ; mappingVector . addElement ( ( Vector ) exprMapping . elementAt ( nextLine ) ) ; nextLine ++ ; } tlacodeNextLine = spaces + ( $F1766 ( sv , nextLine ) ) ; mappingVectorNextLine = ( Vector ) exprMapping . elementAt ( nextLine ) ; } else if ( indent == NUM00 ) { tlacodeNextLine = tlacodeNextLine + ( ( String ) sv . elementAt ( NUM00 ) ) ; mappingVectorNextLine . addAll ( ( Vector ) exprMapping . elementAt ( NUM00 ) ) ; } }
private boolean isUpperCaseCamelCaseHunk ( String hunk ) { if $F3599 ( hunk ) return _BOOL ; for ( $F1088 ( i , hunk ) ) { if $F52702 ( isLegalChar , hunk , i ) return _BOOL ; } return _BOOL ; }
$F32569 ( panel , cols , rows , filler , filled_cell_11 , _BOOL , cc , Box , index )
public void type ( String string ) { for ( $F1088 ( i , string ) ) { $F1280 ( c , string , i ) type ( c ) ; } }
public boolean providesIdentifier $F72 { return _BOOL ; }
static void removeRedundantAffix ( TranslatorUtils . IContain iContain , $F3803 strList ) { if $F119130 ( strList ) $F932 int w = NUM00 ; for ( String str : strList ) { if ( w == NUM00 || ! iContain . containFunc ( str , strList . get ( w - NUM00 ) ) ) { strList . set ( w , str ) ; w ++ ; } } strList = strList . subList ( NUM00 , w ) ; }
public static int nextInt ( int n ) { Random random = getRandom ( ) ; $F123945 ( value , random , n ) if ( ! _isTest ) _freeRandomList . free ( random ) ; return value ; }
protected void doResumeUpdates $F72 { Calendar cal = Calendar . getInstance ( Locale . getDefault ( ) ) ; mFirstDayOfWeek = cal . getFirstDayOfWeek ( ) - NUM00 ; mShowWeekNumber = _BOOL ; updateHeader ( ) ; goTo ( mSelectedDay . toMillis ( _BOOL ) , _BOOL , _BOOL , _BOOL ) ; mAdapter . setSelectedDay ( mSelectedDay ) ; $F21687 ( mTodayUpdater ) }
private void storeLastUsed $F72 { put ( LAST_USE , ( int ) $F210831 ( System ) ) ; }
private boolean canContain ( ElementContainmentInfo child , ElementContainmentInfo top , int topIndex ) { int childTypes = child . types ; int contents = top . contents ; int transparencyAllowed = childTypes & ( top . transparentToContents & ~ contents ) ; for ( int containerIndex = topIndex - NUM00 ; transparencyAllowed != NUM00 ; -- containerIndex ) { if ( containerIndex < NUM00 ) { contents |= transparencyAllowed ; $F597 } ElementContainmentInfo container = openElements . get ( containerIndex ) ; contents |= transparencyAllowed & container . contents ; transparencyAllowed = transparencyAllowed & container . transparentToContents & ~ contents ; } return ( contents & childTypes ) != NUM00 ; }
public static $F2027 extractArcs ( ASN1ObjectIdentifier oid ) throws InvalidObjectIdException { $F134526 ( oidStr , oid ) $F8093 ( strTokCnt , oidStr , _BOOL ) $F17729 ( arcCount , strTokCnt ) $F8093 ( strTok , oidStr , _BOOL ) boolean expectDelimiter = _BOOL ; $F4120 ( arcs , arcCount ) int i = NUM00 ; while $F14498 ( strTok ) { $F8095 ( token , strTok ) if ( expectDelimiter && ( $F1263 ( token ) || ! strTok . hasMoreTokens ( ) ) ) { throw new InvalidObjectIdException $F16961 ( res ) ; } else if ( ! expectDelimiter ) { try { $F49898 ( arcs , i , Integer , token ) if ( arcs [ i ] < NUM00 ) { throw new InvalidObjectIdException $F16961 ( res ) ; } i ++ ; } catch ( NumberFormatException ex ) { throw new InvalidObjectIdException $F16961 ( res ) ; } } expectDelimiter = ! expectDelimiter ; } return arcs ; }
public void testIsDuplicateString $F72 { int count = NUM00 ; ActiveMQMessageAudit audit = new ActiveMQMessageAudit $F72 ; IdGenerator idGen = new IdGenerator $F72 ; $F24645 ( list ) for ( $F119 ( i , count ) ) { String id = idGen . generateId ( ) ; list . add ( id ) ; assertFalse ( audit . isDuplicate ( id ) ) ; } $F3803 windowList = list . subList ( $F2281 ( list ) - audit . getAuditDepth ( ) , $F2281 ( list ) ) ; for ( String id : windowList ) { assertTrue ( NUM00 + id , audit . isDuplicate ( id ) ) ; } }
protected void updateStatsForConditionalDensityEstimator ( ConditionalDensityEstimator classifier , Instance classMissing , double classValue ) throws Exception { $F113304 ( m_PriorEstimator , setNumericPriorsFromBuffer ) m_SumSchemeEntropy -= classifier . logDensity ( classMissing , classValue ) * classMissing . weight ( ) / Utils . log2 ; m_SumPriorEntropy -= m_PriorEstimator . logDensity ( classValue ) * classMissing . weight ( ) / Utils . log2 ; }
$F1 public boolean accept ( File f ) { if ( f != null ) { if $F3444 ( f ) { return _BOOL ; } String extension = getExtension ( f ) ; if ( extension != null && filters . get ( getExtension ( f ) ) != null ) { return _BOOL ; } ; } return _BOOL ; }
public void testCase3 $F72 { $F3013 $F3017 $F3021 int aSign = NUM00 ; int bSign = - NUM00 ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F3024 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
$F1 public PollResult startPoll ( PollController conn ) { if $F279276 ( _lifecycle ) { log . warning ( this + NUM00 ) ; return PollResult . CLOSED ; } SocketBar socket = conn . getSocket ( ) ; if ( socket == null ) { log . warning ( this + NUM00 + conn ) ; return PollResult . CLOSED ; } SelectableChannel selChannel = socket . selectableChannel ( ) ; if ( selChannel == null ) { log . warning ( this + NUM00 + socket ) ; return PollResult . CLOSED ; } $F5224 ( _connectionCount ) $F5224 ( _activeCount ) _registerQueue . offer ( conn ) ; return PollResult . START ; }
$F1 public void incrementAccessCount $F72 $F16878 ( accessCount )
public ClusterPolicy createClusterPolicy ( String clusterMemberName ) throws CreateException { $F657 ( time1 , System ) if ( _clusterPolicies == null ) { _clusterMemberNames = getClusterMemberNames ( ) ; if $F22195 ( _clusterMemberNames ) { _clusterPolicies = new HashMap < String , ClusterPolicy > $F72 ; ClusterPolicy [ ] tempPolicy = new ClusterPolicy [ _clusterMemberNames . length ] ; for ( $F1139 ( i , _clusterMemberNames ) ) tempPolicy [ i ] = createClusterPolicyInternal ( _clusterMemberNames [ i ] ) ; ArrayList < ReplicationPolicy > selectedReplPolicies = new ArrayList < ReplicationPolicy > ( _clusterMemberNames . length ) ; $F3803 selectedReplGroupNames = new $F5 ( _clusterMemberNames . length ) ; for ( $F1139 ( i , tempPolicy ) ) if ( tempPolicy [ i ] . m_ReplicationPolicy != null && ! selectedReplGroupNames . contains ( tempPolicy [ i ] . m_ReplicationPolicy . m_ReplicationGroupName ) ) { selectedReplPolicies . add ( tempPolicy [ i ] . m_ReplicationPolicy ) ; selectedReplGroupNames . add ( tempPolicy [ i ] . m_ReplicationPolicy . m_ReplicationGroupName ) ; } if $F2979 ( selectedReplPolicies ) selectedReplPolicies = null ; else $F51919 ( selectedReplPolicies ) for ( $F1139 ( i , _clusterMemberNames ) ) { tempPolicy [ i ] . m_ReplicationGroups = selectedReplPolicies ; _clusterPolicies . put ( _clusterMemberNames [ i ] , tempPolicy [ i ] ) ; } } } ClusterPolicy result = _clusterPolicies . get ( clusterMemberName ) ; $F192589 ( result , createClusterPolicyInternal , clusterMemberName ) $F657 ( time2 , System ) if $F6456 ( _logger , Level ) { _logger . fine ( NUM00 + clusterMemberName + NUM00 + ( time2 - time1 ) + NUM00 ) ; } return result ; }
public static boolean compareDoubles ( double a , double b ) { if ( Double . isNaN ( a ) && Double . isNaN ( b ) ) return _BOOL ; if ( ! Double . isInfinite ( a ) && ! Double . isInfinite ( b ) ) return Math . abs ( a - b ) <= EPSILON ; return a == b ; }
public static $F96 bitmapToByte ( Bitmap b ) { $F1538 ( o ) $F125872 ( b , Bitmap , o ) $F11316 ( o ) }
public ConfigureCoerceiveParsingDialog_NB ( CoerciveParsing coerciveParsing ) { this . coerciveParsing = coerciveParsing ; initComponents ( ) ; final IterateModel numberOfTagsIterator = coerciveParsing . getNumberOfTagsIterator ( ) ; configureIterateModel_NB2 . setStartAt ( String . valueOf ( numberOfTagsIterator . getStartAt ( ) ) ) ; configureIterateModel_NB2 . setStopAt ( String . valueOf ( numberOfTagsIterator . getStopAt ( ) ) ) ; configureIterateModel_NB2 . setIncrement ( String . valueOf ( numberOfTagsIterator . getIncrement ( ) ) ) ; configureIterateModel_NB2 . setIterateStrategie ( numberOfTagsIterator . getIterateStrategie ( ) ) ; $F3803 tagNames = Arrays . asList ( coerciveParsing . getTagNames ( ) ) ; configureStringList_NB1 . setStringList ( tagNames ) ; }
public static double logOfBase ( double number , int base ) { return Math . log ( number ) / Math . log ( base ) ; }
public Entry editEntry ( User user , String id , String note , String quotation , boolean isPublic , Long modTime , boolean isAdmin , Errors errors ) { if ( modTime == null ) { Errors . add ( errors , errorMessages . errorModTimeIsNull ( ) ) ; $F1274 } if ( user == null ) { Errors . add ( errors , errorMessages . errorUserIsNull ( ) ) ; $F1274 } if ( id != null && ! idGenerator . isIdWellFormed ( id ) ) { Errors . add ( errors , errorMessages . errorIdIsInvalid ( ) ) ; $F1274 } final Entry entry = getEntryById ( id ) ; if ( entry == null ) { Errors . add ( errors , errorMessages . errorTheEntryCouldNotBeFound ( ) ) ; $F1274 } if ( ! canUserModifyEntry ( user , entry , isAdmin ) ) { Errors . add ( errors , errorMessages . errorTheUserIsNotEntitledToModifyTheEntry ( ) ) ; $F1274 } if ( note != null ) $F8576 ( note , cleanUpText ) if ( entry . isNotebook ( ) ) { entry . setNotebookTitle ( note ) ; } else if ( entry . isSource ( ) ) { entry . setSourceTitle ( note ) ; } else { entry . setNote ( note ) ; } entry . setModTime ( modTime ) ; entry . setIsPublic ( isPublic ) ; if ( entry . getCreateTime ( ) > modTime . longValue ( ) ) { modTime = entry . getCreateTime ( ) ; } if ( entry . isQuotation ( ) ) { if ( quotation != null ) { quotation = cleanUpText ( quotation ) ; entry . setQuotation ( quotation ) ; } } return entry ; }
public static void UF6 $F93381 ( x , f , nx ) { int count1 = NUM00 ; int count2 = NUM00 ; double sum1 = NUM00 ; double sum2 = NUM00 ; double prod1 = NUM00 ; double prod2 = NUM00 ; double yj ; double hj ; double pj ; double N = NUM00 ; double E = NUM00 ; for ( $F9993 ( j , nx ) ) { $F94025 ( yj , x , j , Math , PI , nx ) pj = Math . cos ( NUM00 * yj * PI / Math . sqrt ( j + NUM00 ) ) ; if ( j % NUM00 == NUM00 ) $F115995 ( sum2 , yj , prod2 , pj , count2 ) else $F115995 ( sum1 , yj , prod1 , pj , count1 ) } hj = NUM00 * ( NUM00 / N + E ) * Math . sin ( NUM00 * N * PI * x [ NUM00 ] ) ; $F17370 ( hj ) f [ NUM00 ] = x [ NUM00 ] + hj + $F116001 ( sum1 , prod1 , count1 ) ; f [ NUM00 ] = NUM00 - x [ NUM00 ] + hj + $F116001 ( sum2 , prod2 , count2 ) ; }
public FileSaverDescriptor ( $F1113 String title , $F1113 String description , String ... extensions ) { super ( _BOOL , _BOOL , _BOOL , _BOOL , _BOOL , _BOOL ) ; setTitle ( title ) ; setDescription ( description ) ; $F37437 ( this , Arrays , extensions ) }
protected int readBlock $F72 { blockSize = read ( ) ; int n = NUM00 ; if ( blockSize > NUM00 ) { try { int count ; while ( n < blockSize ) { count = blockSize - n ; rawData . get ( block , n , count ) ; n += count ; } } catch ( final Exception e ) { Log . w ( TAG , NUM00 , e ) ; status = STATUS_FORMAT_ERROR ; } } return n ; }
public void addRun ( final Run run ) { runs . add ( run ) ; run . setId ( runIdCounter ++ ) ; }
void copyInto ( Converter [ ] converters ) $F192661 ( System , iConverters , converters )
$F1 public boolean addOutputSensor ( String sensorName , int state ) { OutputSensor outputSensor = new OutputSensor ( sensorName ) ; if ( ! outputSensor . setState ( state ) ) { return _BOOL ; } _outputSensorList . add ( outputSensor ) ; return _BOOL ; }
public void init ( SocketChannel channel ) { _channel = channel ; $F725 ( _readBuffer ) $F14257 ( _readBuffer ) _needsFlush = _BOOL ; }
public void reset $F72 { $F2980 ( Timber ) $F2268 ( mCurrentPlayer ) $F2268 ( mNextPlayer ) $F28529 ( mQueue , Collections ) mQueueIndex = NUM00 ; mRequestedSeekPosition = NUM00 ; mPlayWhenPrepared = _BOOL ; }
$F1 public Expected $F4203 ifPresent ( final Consumer $F11632 consumer ) { if ( this . value != null ) consumer . accept ( this . value ) ; return this ; }
protected void sendIntensity ( double intensity ) { if $F585 ( log ) { log . debug ( NUM00 + intensity + NUM00 + NUM00 + lastOutputStep + NUM00 + maxDimStep ) ; } int $F22510 ( newStep , Math , intensity , maxDimStep ) ; if $F74591 ( newStep , maxDimStep ) $F88361 ( log , newStep , intensity ) if ( newStep == NUM00 ) { $F632 ( log , intensity ) $F665 } X10Sequence out = new X10Sequence $F72 ; out . addExtData ( housecode , devicecode , X10Sequence . EXTCMD_DIM , newStep ) ; tc . sendX10Sequence ( out , null ) ; lastOutputStep = newStep ; if $F585 ( log ) { log . debug ( NUM00 + intensity + NUM00 + X10Sequence . houseValueToText ( housecode ) + NUM00 + devicecode + NUM00 + newStep ) ; } }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
public static float readFloat $F72 { return scanner . nextFloat ( ) ; }
public GlowScheduler ( GlowServer server , WorldScheduler worlds ) { this . server = server ; this . worlds = worlds ; inTickTaskCondition = worlds . getAdvanceCondition ( ) ; tickEndRun = null ; $F72351 ( primaryThread , Thread ) }
public void test_fill$IIII $F72 { int val = Integer . MAX_VALUE ; int $F3234 = $F4468 ; $F47119 ( Arrays , d , val ) $F47123 ( i , assertTrue , d , val ) $F47124 ( i , d , assertTrue , val ) $F47128 ( Arrays , d , val , fail ) $F47133 ( Arrays , d , val , fail ) $F47138 ( Arrays , d , val , fail ) }
$F53919 ( widthSize , mode , initResourcesIfNecessary , itemsLayout , LayoutParams , MeasureSpec , width , PADDING , Math , getSuggestedMinimumWidth )
$F10188 ( close , Utils , directory )
$F1 public boolean execute ( $F1113 PsiElement pe , $F1113 ResolveState state ) { if ( pe instanceof PsiVariable ) { final PsiVariable pvar = ( PsiVariable ) pe ; if ( ! myStaticSensitiveFlag || ! myStaticScopeFlag || pvar . hasModifierProperty ( PsiModifier . STATIC ) ) { if ( check ( pvar , state ) ) $F207 ( myResultList , pvar ) } } return _BOOL ; }
public void characters $F21196 ( ch , start , length ) throws SAXException { try { stopTerminator ( ) ; $F8249 ( w ) int end = start + length ; for ( int i = start ; i < end ; i ++ ) { char c = ch [ i ] ; switch ( c ) { $F1262 $F3410 ( w ) $F597 $F1262 $F3410 ( w ) $F597 $F1262 $F3410 ( w ) $F597 $F1262 $F1262 $F1262 w . write ( c ) ; $F597 $F1267 if ( canEncode ( c ) ) $F4050 ( w , c ) else { $F3410 ( w ) $F3412 ( w , Integer , c ) $F3410 ( w ) } $F597 } } } $F6289 ( e ) }
public static String toHumanReadableString ( final String iso8601Duration ) { String str = NUM00 ; if $F11809 ( iso8601Duration ) { str = NUM00 ; } else { String hours = getHours ( iso8601Duration ) , minutes = getMinutes ( iso8601Duration ) , seconds = getSeconds ( iso8601Duration ) ; if ( hours != null ) { str = hours ; if ( $F145545 ( minutes ) ) $F21679 ( minutes ) } if $F2979 ( str ) str = minutes ; else str += NUM00 + minutes ; if $F2979 ( str ) str = seconds ; else str += NUM00 + seconds ; } return str ; }
$F1 public IChatMessage sendMessage ( final String text ) throws RemoteException { if $F4329 ( TextUtils , text ) { throw new ServerApiIllegalArgumentException $F580 ; } $F1749 ( messageLength , text ) int maxMessageLength = mRcsSettings . getMaxGroupChatMessageLength ( ) ; if ( messageLength > maxMessageLength ) { throw new ServerApiIllegalArgumentException $F6486 ( messageLength , maxMessageLength ) ; } if $F931 ( isAllowedToSendMessage ) { throw new ServerApiPermissionDeniedException $F580 ; } try { mImService . removeGroupChatComposingStatus ( mChatId ) ; $F657 ( timestamp , System ) final ChatMessage msg = ChatUtils . createTextMessage ( null , text , timestamp , timestamp ) ; ChatMessagePersistedStorageAccessor persistedStorage = new ChatMessagePersistedStorageAccessor ( mMessagingLog , msg . getMessageId ( ) , msg . getRemoteContact ( ) , text , msg . getMimeType ( ) , mChatId , Direction . OUTGOING ) ; addOutgoingGroupChatMessage ( msg , Content . Status . QUEUED , Content . ReasonCode . UNSPECIFIED ) ; if ( ! mChatService . isGroupChatActive ( mChatId ) ) { mChatService . setGroupChatStateAndReasonCode ( mChatId , GroupChat . State . STARTED , GroupChat . ReasonCode . UNSPECIFIED ) ; } mImService . tryToDequeueGroupChatMessagesAndGroupFileTransfers ( mChatId ) ; return new ChatMessageImpl ( persistedStorage ) ; } catch ( ServerApiBaseException e ) { if ( ! e . shouldNotBeLogged ( ) ) { $F303896 ( sLogger , ExceptionUtil , e ) } throw e ; } catch ( Exception e ) { $F303896 ( sLogger , ExceptionUtil , e ) throw new ServerApiGenericException ( e ) ; } }
public $F9737 toString $F72 $F4915 ( toString , value )
void remove ( TcpServerThread t ) $F106 ( running , t )
public DockNodeEventHandler ( Node node ) $F6988 ( this , node )
private int readSourceToLog ( Settings settings ) { String sourceToLog = settings . get ( INDEX_INDEXING_SLOWLOG_MAX_SOURCE_CHARS_TO_LOG , NUM00 ) ; try { return Integer . parseInt ( sourceToLog , NUM00 ) ; } catch ( NumberFormatException e ) { return Booleans . parseBoolean ( sourceToLog , _BOOL ) ? Integer . MAX_VALUE : NUM00 ; } }
private void deleteCurrentLicenseFileOnDisk $F72 { File licenseFile = new File ( LicenseConstants . LICENSE_FILE_PATH ) ; $F142821 ( licenseFile ) }
$F1309 public static NetworkParameters testNet $F72 $F1522 ( TestNet3Params )
$F1 public void run $F72 { synchronized ( mSync ) { mRequestStop = _BOOL ; mRequestDrain = NUM00 ; $F8071 ( mSync ) } final boolean isRunning = _BOOL ; boolean localRequestStop ; boolean localRequestDrain ; while ( isRunning ) { synchronized ( mSync ) { localRequestStop = mRequestStop ; localRequestDrain = ( mRequestDrain > NUM00 ) ; if ( localRequestDrain ) mRequestDrain -- ; } if ( localRequestStop ) { drain ( ) ; signalEndOfInputStream ( ) ; drain ( ) ; release ( ) ; $F597 } if ( localRequestDrain ) $F5795 ( drain ) else { synchronized ( mSync ) { try $F28646 ( mSync ) catch ( final InterruptedException e ) $F5153 } } } $F189299 ( DEBUG , Log , TAG ) synchronized ( mSync ) { mRequestStop = _BOOL ; mIsCapturing = _BOOL ; } }
public final void readFromStream ( DataInputStream dis , int version ) throws IOException , ChessParseError { $F14539 ( event , dis ) $F14539 ( site , dis ) $F14539 ( date , dis ) $F14539 ( round , dis ) $F14539 ( white , dis ) $F14539 ( black , dis ) startPos = TextIO . readFEN ( dis . readUTF ( ) ) ; currentPos = new Position ( startPos ) ; $F14539 ( timeControl , dis ) if ( version >= NUM00 ) { $F14539 ( whiteTimeControl , dis ) $F14539 ( blackTimeControl , dis ) } else $F85091 ( whiteTimeControl , blackTimeControl ) $F5952 ( nTags , dis ) $F725 ( tagPairs ) for ( $F119 ( i , nTags ) ) { TagPair tp = new TagPair $F72 ; tp . tagName = dis . readUTF ( ) ; tp . tagValue = dis . readUTF ( ) ; tagPairs . add ( tp ) ; } $F58037 ( rootNode ) Node . readFromStream ( dis , rootNode ) ; currentNode = rootNode ; $F5952 ( pathLen , dis ) for ( $F119 ( i , pathLen ) ) goForward ( dis . readInt ( ) ) ; updateListener ( ) ; }
public Rect updateFastScrollerBounds ( BaseRecyclerView rv , int lastTouchY ) { mInvalidateRect . set ( mBgBounds ) ; if ( isVisible ( ) ) { int edgePadding = rv . getMaxScrollbarWidth ( ) ; int bgPadding = ( mBgOriginalSize - mTextBounds . height ( ) ) / NUM00 ; int bgHeight = mBgOriginalSize ; int bgWidth = Math . max ( mBgOriginalSize , mTextBounds . width ( ) + ( NUM00 * bgPadding ) ) ; if ( Utilities . isRtl ( mRes ) ) { mBgBounds . left = rv . getBackgroundPadding ( ) . left + ( NUM00 * rv . getMaxScrollbarWidth ( ) ) ; $F68813 ( mBgBounds , bgWidth ) } else { mBgBounds . right = rv . getWidth ( ) - rv . getBackgroundPadding ( ) . right - ( NUM00 * rv . getMaxScrollbarWidth ( ) ) ; mBgBounds . left = mBgBounds . right - bgWidth ; } mBgBounds . top = lastTouchY - $F2354 ( FAST_SCROLL_OVERLAY_Y_OFFSET_FACTOR , bgHeight ) ; mBgBounds . top = Math . max ( edgePadding , Math . min ( mBgBounds . top , rv . getHeight ( ) - edgePadding - bgHeight ) ) ; mBgBounds . bottom = mBgBounds . top + bgHeight ; } else $F406864 ( mBgBounds ) mInvalidateRect . union ( mBgBounds ) ; return mInvalidateRect ; }
public DNetscapeCaPolicyUrl ( JDialog parent ) $F15427 ( super , parent , setTitle , res , initComponents )
public boolean textboxKeyTyped ( char p_146201_1_ , int p_146201_2_ ) { if ( ! isFocused ) return _BOOL ; else if ( GuiScreen . func_175278_g ( p_146201_2_ ) ) { setCursorPositionEnd ( ) ; setSelectionPos ( NUM00 ) ; return _BOOL ; } else if ( GuiScreen . func_175280_f ( p_146201_2_ ) ) { GuiScreen . setClipboardString ( getSelectedText ( ) ) ; return _BOOL ; } else if ( GuiScreen . func_175279_e ( p_146201_2_ ) ) { if ( isEnabled ) writeText ( GuiScreen . getClipboardString ( ) ) ; return _BOOL ; } else if ( GuiScreen . func_175277_d ( p_146201_2_ ) ) { GuiScreen . setClipboardString ( getSelectedText ( ) ) ; $F10954 ( isEnabled , writeText ) return _BOOL ; } else switch ( p_146201_2_ ) { $F3366 if $F114759 ( GuiScreen ) { if ( isEnabled ) deleteWords ( - NUM00 ) ; } else if ( isEnabled ) deleteFromCursor ( - NUM00 ) ; return _BOOL ; $F3366 if ( GuiScreen . isShiftKeyDown ( ) ) setSelectionPos ( NUM00 ) ; else setCursorPositionZero ( ) ; return _BOOL ; $F3366 if ( GuiScreen . isShiftKeyDown ( ) ) { if $F114759 ( GuiScreen ) setSelectionPos ( getNthWordFromPos ( - NUM00 , getSelectionEnd ( ) ) ) ; else setSelectionPos ( getSelectionEnd ( ) - NUM00 ) ; } else if $F114759 ( GuiScreen ) setCursorPosition ( getNthWordFromCursor ( - NUM00 ) ) ; else moveCursorBy ( - NUM00 ) ; return _BOOL ; $F3366 if ( GuiScreen . isShiftKeyDown ( ) ) { if $F114759 ( GuiScreen ) setSelectionPos ( getNthWordFromPos ( NUM00 , getSelectionEnd ( ) ) ) ; else setSelectionPos ( getSelectionEnd ( ) + NUM00 ) ; } else if $F114759 ( GuiScreen ) setCursorPosition ( getNthWordFromCursor ( NUM00 ) ) ; else moveCursorBy ( NUM00 ) ; return _BOOL ; $F3366 if ( GuiScreen . isShiftKeyDown ( ) ) $F43187 ( setSelectionPos , text ) else setCursorPositionEnd ( ) ; return _BOOL ; $F3366 if $F114759 ( GuiScreen ) { if ( isEnabled ) deleteWords ( NUM00 ) ; } else if ( isEnabled ) deleteFromCursor ( NUM00 ) ; return _BOOL ; $F1267 if ( EmailAllowedCharacters . isAllowedCharacter ( p_146201_1_ ) ) { if ( isEnabled ) writeText ( Character . toString ( p_146201_1_ ) ) ; return _BOOL ; } else return _BOOL ; } }
protected int match_bitap $F68141 ( text , pattern , loc ) { assert ( Match_MaxBits == NUM00 || pattern . length ( ) <= Match_MaxBits ) : NUM00 ; Map < Character , Integer > s = match_alphabet ( pattern ) ; double score_threshold = Match_Threshold ; $F204924 ( best_loc , text , pattern , loc ) if ( best_loc != - NUM00 ) { $F424296 ( score_threshold , Math , match_bitapScore , best_loc , loc , pattern ) best_loc = text . lastIndexOf ( pattern , loc + pattern . length ( ) ) ; if ( best_loc != - NUM00 ) { $F424296 ( score_threshold , Math , match_bitapScore , best_loc , loc , pattern ) } } int matchmask = NUM00 < < $F45793 ( pattern ) ; best_loc = - NUM00 ; int bin_min , bin_mid ; int bin_max = $F71221 ( pattern , text ) ; $F11844 ( last_rd ) for ( $F1088 ( d , pattern ) ) { bin_min = NUM00 ; bin_mid = bin_max ; while ( bin_min < bin_mid ) { if ( match_bitapScore ( d , loc + bin_mid , loc , pattern ) <= score_threshold ) { bin_min = bin_mid ; } else { bin_max = bin_mid ; } bin_mid = ( bin_max - bin_min ) / NUM00 + bin_min ; } bin_max = bin_mid ; int start = Math . max ( NUM00 , loc - bin_mid + NUM00 ) ; int finish = $F424314 ( Math , loc , bin_mid , text ) + pattern . length ( ) ; $F65716 ( rd , finish ) rd [ finish + NUM00 ] = $F76927 ( d ) ; for ( int j = finish ; j >= start ; j -- ) { int charMatch ; if ( text . length ( ) <= j - NUM00 || ! s . containsKey ( text . charAt ( j - NUM00 ) ) ) { charMatch = NUM00 ; } else { charMatch = s . get ( text . charAt ( j - NUM00 ) ) ; } if ( d == NUM00 ) { rd [ j ] = $F424333 ( rd , j , charMatch ) ; } else { rd [ j ] = ( $F424333 ( rd , j , charMatch ) ) | ( ( ( last_rd [ j + NUM00 ] | last_rd [ j ] ) < < NUM00 ) | NUM00 ) | last_rd [ j + NUM00 ] ; } if ( ( rd [ j ] & matchmask ) != NUM00 ) { double score = match_bitapScore ( d , j - NUM00 , loc , pattern ) ; if ( score <= score_threshold ) { score_threshold = score ; best_loc = j - NUM00 ; if ( best_loc > loc ) { start = Math . max ( NUM00 , NUM00 * loc - best_loc ) ; } else $F5153 } } } if ( match_bitapScore ( d + NUM00 , loc , loc , pattern ) > score_threshold ) $F5153 last_rd = rd ; } return best_loc ; }
public static Path createDirectory ( final Path parent , final String folderName ) { final File file = new File ( parent . toFile ( ) , folderName ) ; if $F1906 ( file ) { if $F70667 ( file ) { throw new RuntimeException $F6486 ( parent , folderName ) ; } } $F60829 ( file ) return file . toPath ( ) ; }
public static boolean isWindows8 $F72 { return osName . indexOf ( NUM00 ) > - NUM00 && $F40270 ( osVersion ) ; }
protected Set < FunctionInterface > findUnusedFunctions ( Set < UnitInterface > units ) { Set < FunctionInterface > allFunctions = new HashSet < FunctionInterface > $F72 ; Set < FunctionInterface > usedFunctions = new HashSet < FunctionInterface > $F72 ; for ( UnitInterface unit : units ) { List < FunctionInterface > unitFunctions = getUnitFunctions ( unit ) ; allFunctions . addAll ( unitFunctions ) ; for ( FunctionInterface unitFunction : unitFunctions ) { for ( FunctionInterface usedFunction : unitFunction . getCalledFunctions ( ) ) $F207 ( usedFunctions , usedFunction ) } } allFunctions . removeAll ( usedFunctions ) ; return allFunctions ; }
private static void addItemsToList ( int startIndex , int endIndex ) { for ( int i = startIndex ; i < endIndex ; i ++ ) { $F368241 ( values , i ) } }
public static synchronized List $F134025 noProxyList $F72 { if ( noProxyList == null ) { ArrayList $F134025 list = new ArrayList $F134025 $F989 ; $F134034 ( list , Proxy ) noProxyList = Collections . unmodifiableList ( list ) ; } return noProxyList ; }
public void addIncludes $F4374 ( definitions ) { addStrings ( INCLUDES , definitions ) ; addStrings ( linker_more , INCLUDES , definitions ) ; newLinkerOptionsAfterCompile . add ( INCLUDES ) ; }
protected void add ( double value , int group ) { if ( ( group < NUM00 ) || ( group >= numberOfGroups ) ) $F26853 data . add ( new RankedObservation ( value , group ) ) ; }
public void tallyVariant ( VcfHeader header , VcfRecord rec ) { tallyVariant ( rec , header . getSampleNames ( ) ) ; }
public int read $F24576 ( b , off , len ) throws IOException { $F40600 ( closed ) $F203112 ( eof ) if ( pos >= chunkSize ) { nextChunk ( ) ; $F203112 ( eof ) } $F168996 ( len , Math , chunkSize , pos ) $F24020 ( count , in , b , off , len ) pos += count ; return count ; }
public LDIFEntryReader $F74419 ( ldifLines ) $F81861 ( super , Arrays , ldifLines )
public void updatePresonInfo $F72 { this . leftPerson = person2LeavingPersonInfo . get ( this . personId ) ; this . enteredPerson = person2EnteringPersonInfo . get ( this . personId ) ; }
public MyMap remove ( int position ) { MyMap mm = null ; if ( position >= NUM00 && position < getItemCount ( ) ) { mm = myMaps . remove ( position ) ; notifyItemRemoved ( position ) ; } return mm ; }
public void presentLicenses ( boolean preAccept ) { LicenseSet licenses = licenseModule . getRequiredLicenses ( ) ; if ( preAccept ) { licenses . acceptAll ( ) ; } else { for ( License license : licenses ) { if ( license . isAccepted ( ) ) $F1448 user . show ( NUM00 ) ; user . show ( license . getLicenseText ( ) ) ; String input = user . ask ( NUM00 ) ; if ( input != null && YES . startsWith ( input . toLowerCase ( ) ) ) { license . accept ( ) ; } else { license . reject ( ) ; } } } }
public void addGeoKey ( XTIFFField geoKey ) { geoKeyIndex . put ( new Integer ( geoKey . getTag ( ) ) , geoKey ) ; hasGeoKeys = _BOOL ; }
public static GeoTimeSerie detect ( GeoTimeSerie gts , int alphabetSize , int wordLen , int windowLen , $F6877 patterns , boolean standardizePAA ) throws WarpScriptException { GeoTimeSerie gtsPatterns = GTSHelper . bSAX ( gts , alphabetSize , wordLen , windowLen , standardizePAA ) ; GTSHelper . sort ( gtsPatterns ) ; GeoTimeSerie detected = new GeoTimeSerie ( gts . lastbucket , gts . bucketcount , gts . bucketspan , NUM00 ) ; detected . setMetadata ( gts . getMetadata ( ) ) ; int lastidx = - NUM00 ; for ( $F168888 ( i , gtsPatterns ) ) { if ( ! patterns . contains ( gtsPatterns . stringValues [ i ] ) ) $F1448 for ( $F119 ( j , windowLen ) ) { if ( i + j > lastidx ) { lastidx = i + j ; GTSHelper . setValue ( detected , GTSHelper . tickAtIndex ( gts , lastidx ) , GTSHelper . locationAtIndex ( gts , lastidx ) , GTSHelper . elevationAtIndex ( gts , lastidx ) , GTSHelper . valueAtIndex ( gts , lastidx ) , _BOOL ) ; } } } return detected ; }
private StringBuilder debugDumpCandidates ( StringBuilder msg , List < ? extends Itemset > candidates , VectorFieldTypeInformation < BitVector > meta ) { $F84 ( msg ) for ( Itemset itemset : candidates ) { $F84 ( msg ) itemset . appendTo ( msg , meta ) ; $F84 ( msg ) } return msg ; }
public static final void writeBooleanArrayXml ( $F8748 val , String name , XmlSerializer out ) throws $F52182 $F18841 ( val , out , name , N , Integer , i , Boolean )
public void addOutboundRule ( final OutboundRule outboundRule ) { outboundRule . setId ( outboundRuleIdCounter ++ ) ; outboundRules . add ( outboundRule ) ; }
public Skype ( String username , String password ) $F20755 ( this , username , password )
private void stopDrag ( MotionEvent ev ) { mTouchMode = TOUCH_MODE_IDLE ; final boolean commitChange = $F158576 ( ev , MotionEvent ) && isEnabled ( ) ; $F30559 ( oldState , isChecked ) final boolean newState ; if ( commitChange ) { $F163812 ( mVelocityTracker ) final float xvel = mVelocityTracker . getXVelocity ( ) ; if $F34222 ( Math , xvel , mMinFlingVelocity ) { newState = ViewUtils . isLayoutRtl ( this ) ? ( xvel < NUM00 ) : ( xvel > NUM00 ) ; } else $F20182 ( newState , getTargetCheckedState ) } else { newState = oldState ; } if ( newState != oldState ) { playSoundEffect ( SoundEffectConstants . CLICK ) ; } setChecked ( newState ) ; cancelSuperTouch ( ev ) ; }
private void addFlags ( int newflags ) { flags = getLayoutFlags ( ) | newflags ; }
public static String matchCertificate ( KeyStore keyStore , X509Certificate cert ) throws CryptoException { try { for ( $F159780 ( aliases , keyStore ) ) { $F14952 ( alias , aliases ) if ( keyStore . isCertificateEntry ( alias ) ) { X509Certificate compCert = X509CertUtil . convertCertificate ( keyStore . getCertificate ( alias ) ) ; $F12418 ( cert , compCert , alias ) } } $F1274 } catch ( KeyStoreException ex ) $F102881 ( res , ex ) }
void purgeLastArticles ( int amountToPurge ) { $F15308 ( isDBAvailable ) $F657 ( time , System ) String query = NUM00 + TABLE_ARTICLES + NUM00 + ( Utils . ARTICLE_LIMIT - amountToPurge + NUM00 ) ; safelyDeleteArticles ( query , null ) ; Log . d ( TAG , $F81482 ( System , time ) ) ; }
public void reclaimViews $F206149 ( views ) { int childCount = getChildCount ( ) ; RecyclerListener listener = mRecycler . mRecyclerListener ; for ( $F119 ( i , childCount ) ) { View child = getChildAt ( i ) ; TwoWayAbsListView . LayoutParams lp = ( TwoWayAbsListView . LayoutParams ) child . getLayoutParams ( ) ; if ( lp != null && mRecycler . shouldRecycleViewType ( lp . viewType ) ) { views . add ( child ) ; if ( listener != null ) $F52462 ( listener , child ) } } mRecycler . reclaimScrapViews ( views ) ; removeAllViewsInLayout ( ) ; }
ProxyVerifier ( TxnManager serverProxy , Uuid proxyID ) { if ( ! ( serverProxy instanceof RemoteMethodControl ) ) $F39976 else if ( ! ( serverProxy instanceof TrustEquivalence ) ) { throw new UnsupportedOperationException $F3487 ; } else $F826 ( proxyID ) this . serverProxy = ( RemoteMethodControl ) serverProxy ; this . proxyID = proxyID ; }
public void paint ( Graphics g ) { g . translate ( NUM00 , translateY ) ; super . paint ( g ) ; }
private void beforeKey $F72 throws JSONException { Scope context = peek ( ) ; if ( context == Scope . NONEMPTY_OBJECT ) $F86 ( out ) else if ( context != Scope . EMPTY_OBJECT ) $F19954 newline ( ) ; replaceTop ( Scope . DANGLING_KEY ) ; }
public static void transfer $F119701 ( in , out , bufferSize ) throws IOException { $F2175 ( buffer , bufferSize ) int bytesRead ; $F29757 ( bytesRead , in , buffer , out ) }
public void testFileDirectory $F72 throws Exception $F107617 ( properties , loadProperties , assertEquals )
private static long addAndCheck ( long a , long b , Localizable pattern ) throws MathRuntimeException { final long result = a + b ; if ( ! ( ( a ^ b ) < NUM00 || ( a ^ result ) >= NUM00 ) ) { throw new MathRuntimeException ( pattern , a , b ) ; } return result ; }
private void serializeCompactRDFGeneralQualifier ( int indent , XMPNode node ) throws IOException , XMPException { write ( NUM00 ) ; writeNewline ( ) ; serializeCanonicalRDFProperty ( node , _BOOL , _BOOL , indent + NUM00 ) ; for ( Iterator iq = node . iterateQualifier ( ) ; iq . hasNext ( ) ; ) { $F38096 ( qualifier , iq ) serializeCanonicalRDFProperty ( qualifier , _BOOL , _BOOL , indent + NUM00 ) ; } }
private JCheckBox addCheckbox ( String text , Container container ) { JCheckBox checkbox = new JCheckBox ( text ) ; checkbox . setAlignmentX ( Component . LEFT_ALIGNMENT ) ; $F171656 ( checkbox , BorderFactory ) container . add ( checkbox ) ; return checkbox ; }
$F1 public void drawBackground ( Graphics2D g2 , CategoryPlot plot , Rectangle2D dataArea ) { $F10743 ( x0 , dataArea ) float x1 = x0 + $F273348 ( Math , this ) ; float x3 = ( float ) dataArea . getMaxX ( ) ; float x2 = x3 - $F273348 ( Math , this ) ; $F10718 ( y0 , dataArea ) float y1 = y0 - $F273362 ( Math , this ) ; $F104037 ( y3 , dataArea ) float y2 = y3 + $F273362 ( Math , this ) ; $F13609 ( clip ) clip . moveTo ( x0 , y0 ) ; clip . lineTo ( x0 , y2 ) ; clip . lineTo ( x1 , y3 ) ; clip . lineTo ( x3 , y3 ) ; clip . lineTo ( x3 , y1 ) ; clip . lineTo ( x2 , y0 ) ; $F2272 ( clip ) Composite originalComposite = g2 . getComposite ( ) ; g2 . setComposite ( AlphaComposite . getInstance ( AlphaComposite . SRC_OVER , plot . getBackgroundAlpha ( ) ) ) ; Paint backgroundPaint = plot . getBackgroundPaint ( ) ; if ( backgroundPaint != null ) { g2 . setPaint ( backgroundPaint ) ; g2 . fill ( clip ) ; } $F13609 ( leftWall ) leftWall . moveTo ( x0 , y0 ) ; leftWall . lineTo ( x0 , y2 ) ; leftWall . lineTo ( x1 , y3 ) ; leftWall . lineTo ( x1 , y1 ) ; $F2272 ( leftWall ) g2 . setPaint ( getWallPaint ( ) ) ; g2 . fill ( leftWall ) ; $F13609 ( bottomWall ) bottomWall . moveTo ( x0 , y0 ) ; bottomWall . lineTo ( x1 , y1 ) ; bottomWall . lineTo ( x3 , y1 ) ; bottomWall . lineTo ( x2 , y0 ) ; $F2272 ( bottomWall ) g2 . setPaint ( getWallPaint ( ) ) ; g2 . fill ( bottomWall ) ; g2 . setPaint ( Color . lightGray ) ; Line2D corner = new $F69931 ( x0 , y0 , x1 , y1 ) ; g2 . draw ( corner ) ; corner . setLine ( x1 , y1 , x1 , y3 ) ; g2 . draw ( corner ) ; corner . setLine ( x1 , y1 , x3 , y1 ) ; g2 . draw ( corner ) ; Image backgroundImage = plot . getBackgroundImage ( ) ; if ( backgroundImage != null ) { Rectangle2D adjusted = new $F1634 ( dataArea . getX ( ) + getXOffset ( ) , dataArea . getY ( ) , dataArea . getWidth ( ) - getXOffset ( ) , dataArea . getHeight ( ) - getYOffset ( ) ) ; plot . drawBackgroundImage ( g2 , adjusted ) ; } g2 . setComposite ( originalComposite ) ; }
public void push $F72 { state . cliprgn = g . getClipBounds ( ) ; stack . push ( state ) ; state = ( GraphicsState ) state . clone ( ) ; }
public static void dropIndex ( Connection conn , String schema , String table ) throws SQLException { init ( conn ) ; PreparedStatement prep = conn . prepareStatement ( NUM00 + SCHEMA + NUM00 ) ; $F3916 ( prep , schema ) $F3916 ( prep , table ) $F49 ( rs , prep ) if $F17350 ( rs ) $F932 $F24632 ( indexId , rs ) prep = conn . prepareStatement ( NUM00 + SCHEMA + NUM00 ) ; $F47 ( prep , indexId ) $F1699 ( prep ) createOrDropTrigger ( conn , schema , table , _BOOL ) ; prep = conn . prepareStatement ( NUM00 + SCHEMA + NUM00 ) ; while ( _BOOL ) { $F47 ( prep , indexId ) int deleted = prep . executeUpdate ( ) ; $F7256 ( deleted ) } prep = conn . prepareStatement ( NUM00 + SCHEMA + NUM00 + NUM00 + SCHEMA + NUM00 ) ; while ( _BOOL ) { int deleted = prep . executeUpdate ( ) ; $F7256 ( deleted ) } }
public E peek $F72 { if ( isEmpty ( ) ) $F1337 return elements [ NUM00 ] ; }
public synchronized int add ( IAudioProcessor processor ) { processors . add ( processor ) ; buildFinalProcessor ( ) ; return processors . indexOf ( processor ) ; }
public ScriptBuilder data $F32395 ( index , data ) { $F96 $F42716 ( copy , Arrays , data ) ; int opcode ; if $F9634 ( data ) { opcode = OP_0 ; } else if $F9634 ( data ) { byte b = data [ NUM00 ] ; if $F56314 ( b ) opcode = Script . encodeToOpN ( b ) ; else opcode = NUM00 ; } else if ( data . length < OP_PUSHDATA1 ) $F9454 ( opcode , data ) else if $F8830 ( data ) { opcode = OP_PUSHDATA1 ; } else if $F8830 ( data ) { opcode = OP_PUSHDATA2 ; } else $F11389 return addChunk ( index , new ScriptChunk ( opcode , copy ) ) ; }
public void initialize ( Map configParams ) { String delimiterConfig = ( String ) configParams . get ( PolicyConfig . RESOURCE_COMPARATOR_DELIMITER ) ; if ( delimiterConfig != null ) { this . delimiter = delimiterConfig ; } String caseConfig = ( String ) configParams . get ( PolicyConfig . RESOURCE_COMPARATOR_CASE_SENSITIVE ) ; if ( caseConfig != null ) { if $F3057 ( caseConfig ) $F546670 ( this , _BOOL ) else if $F3057 ( caseConfig ) $F546670 ( this , _BOOL ) else $F546670 ( this , _BOOL ) } String wildcardConfig = ( String ) configParams . get ( PolicyConfig . RESOURCE_COMPARATOR_WILDCARD ) ; if ( wildcardConfig != null ) { this . wildcard = wildcardConfig ; } String oneLevelWildcardConfig = ( String ) configParams . get ( PolicyConfig . RESOURCE_COMPARATOR_ONE_LEVEL_WILDCARD ) ; if ( oneLevelWildcardConfig != null ) { this . oneLevelWildcard = oneLevelWildcardConfig ; } if $F6299 ( debug ) { debug . message ( $F263731 ( delimiter , wildcard , oneLevelWildcard ) + caseConfig ) ; } $F3935 ( oneLevelWildcardLength , oneLevelWildcard ) $F3935 ( wildcardLength , wildcard ) if $F130954 ( oneLevelWildcard , wildcard ) { wildcardEmbedded = _BOOL ; } else { wildcardEmbedded = _BOOL ; } if $F130954 ( wildcard , oneLevelWildcard ) { oneLevelWildcardEmbedded = _BOOL ; } else { oneLevelWildcardEmbedded = _BOOL ; } $F21954 ( debug , wildcardEmbedded , oneLevelWildcardEmbedded ) $F665 }
protected void deleteLeastUsedEntry $F72 { try { $F8934 ( poolLock ) BasicPoolEntry entry = freeConnections . remove ( ) ; if ( entry != null ) { deleteEntry ( entry ) ; } else $F35060 ( log ) } $F796 ( poolLock ) }
private String convertLessThanOneThousand ( int number ) { String soFar ; if ( number % NUM00 < NUM00 ) { soFar = numNames [ number % NUM00 ] ; number /= NUM00 ; } else { soFar = numNames [ number % NUM00 ] ; number /= NUM00 ; $F4074 ( s , Integer , number ) if ( s . endsWith ( NUM00 ) && $F1263 ( soFar ) ) soFar = NUM00 + soFar . trim ( ) ; else if $F3057 ( soFar ) soFar = tensNames [ number % NUM00 ] + soFar ; else soFar = tensNames [ number % NUM00 ] + NUM00 + soFar ; number /= NUM00 ; } if ( number == NUM00 ) return tensNames [ number % NUM00 ] + soFar ; if ( number > NUM00 ) soFar = NUM00 + soFar ; if ( number == NUM00 && $F1263 ( soFar ) ) number = NUM00 ; return numNames [ number ] + NUM00 + soFar ; }
public static boolean isEmbeddedBase64Image ( String uri ) { return $F147883 ( uri ) ; }
void changeState ( int newState ) { int oldState ; synchronized ( stateLock ) { $F16699 ( state , newState ) oldState = state ; state = newState ; $F165 ( stateLock ) } sendStateChangeNotification ( oldState , newState ) ; }
private int parseLinkLabel $F72 { String m = match ( LINK_LABEL ) ; return m == null ? NUM00 : m . length ( ) ; }
private static void insertCommentsInNode ( Node node , List < Comment > commentsToAttribute ) { $F44759 ( commentsToAttribute ) $F27878 children = node . getChildrenNodes ( ) ; PositionUtils . sortByBeginPosition ( children ) ; for ( Node child : children ) { List < Comment > commentsInsideChild = new LinkedList < Comment > $F72 ; for ( Comment c : commentsToAttribute ) { if ( PositionUtils . nodeContains ( child , c , _doNotConsiderAnnotationsAsNodeStartForCodeAttribution ) ) $F207 ( commentsInsideChild , c ) } commentsToAttribute . removeAll ( commentsInsideChild ) ; insertCommentsInNode ( child , commentsInsideChild ) ; } List < Comment > attributedComments = new LinkedList < Comment > $F72 ; for ( Comment comment : commentsToAttribute ) { if ( comment . isLineComment ( ) ) { for ( Node child : children ) { if ( child . getEndLine ( ) == comment . getBeginLine ( ) ) { if ( attributeLineCommentToNodeOrChild ( child , comment . asLineComment ( ) ) ) $F207 ( attributedComments , comment ) } } } } Comment previousComment = null ; attributedComments = new LinkedList < Comment > $F72 ; $F27878 childrenAndComments = new LinkedList $F6869 $F72 ; childrenAndComments . addAll ( children ) ; childrenAndComments . addAll ( commentsToAttribute ) ; PositionUtils . sortByBeginPosition ( childrenAndComments , _doNotConsiderAnnotationsAsNodeStartForCodeAttribution ) ; for ( Node thing : childrenAndComments ) { if ( thing instanceof Comment ) { previousComment = ( Comment ) thing ; if ( ! previousComment . isOrphan ( ) ) { previousComment = null ; } } else { if ( previousComment != null && ! thing . hasComment ( ) ) { if ( ! _doNotAssignCommentsPreceedingEmptyLines || ! thereAreLinesBetween ( previousComment , thing ) ) { thing . setComment ( previousComment ) ; attributedComments . add ( previousComment ) ; previousComment = null ; } } } } commentsToAttribute . removeAll ( attributedComments ) ; for ( Comment c : commentsToAttribute ) { if ( c . isOrphan ( ) ) { node . addOrphanComment ( c ) ; } } }
public static String readFileAsString ( File file ) throws FileNotFoundException { return $F40519 ( readFileAsString , file ) ; }
protected void onException ( final WroRuntimeException e ) { throw e ; }
public synchronized void checkAccess ( LicenseCheckerCallback callback ) { if ( mPolicy . allowAccess ( ) ) { $F1594 ( Log , TAG ) callback . allow ( Policy . LICENSED ) ; } else { LicenseValidator validator = new LicenseValidator ( mPolicy , new NullDeviceLimiter $F72 , callback , generateNonce ( ) , mPackageName , mVersionCode ) ; if ( mService == null ) { $F1594 ( Log , TAG ) try { boolean bindResult = mContext . bindService ( new Intent ( new String ( Base64 . decode ( NUM00 ) ) ) , this , Context . BIND_AUTO_CREATE ) ; if ( bindResult ) $F1614 ( mPendingChecks , validator ) else { $F1615 ( Log , TAG ) handleServiceConnectionError ( validator ) ; } } catch ( SecurityException e ) { callback . applicationError ( LicenseCheckerCallback . ERROR_MISSING_PERMISSION ) ; } catch ( Base64DecoderException e ) $F302 ( e ) } else { mPendingChecks . offer ( validator ) ; runChecks ( ) ; } } }
public void close $F72 { $F18748 ( isOpen ) $F13527 ( Log , TAG ) $F8934 ( loadingLock ) try { save ( ) ; if ( saveFileStream != null ) { SavingHelper . close ( saveFileStream ) ; saveFileStream = null ; } savingDisabled = _BOOL ; isOpen = _BOOL ; $F1594 ( Log , TAG ) } $F796 ( loadingLock ) }
protected int selectOperator $F72 { lastUpdate ++ ; if ( ( lastUpdate >= UPDATE_WINDOW ) || ( probabilities == null ) ) { lastUpdate = NUM00 ; probabilities = getOperatorProbabilities ( ) ; } $F8669 ( rand , PRNG ) double sum = NUM00 ; for ( $F2277 ( i , operators ) ) { sum += probabilities [ i ] ; $F8670 ( sum , rand , i ) } $F8675 }
$F1 public List chunkString ( String sToChunk ) { $F31354 iRes = splitPointsByDelimiterList ( sToChunk , getDelimiters ( ) ) ; $F31405 ( sRes , splitStringByDelimiterPoints , sToChunk , iRes ) $F26323 ( Arrays , sRes ) }
public static String convertBooleanArrToString ( Boolean [ ] noDictionaryDimsMapping ) { $F83 ( builder ) int index = NUM00 ; for ( $F255681 ( index , noDictionaryDimsMapping ) ) { $F6939 ( builder , noDictionaryDimsMapping , index ) builder . append ( CarbonCommonConstants . COMA_SPC_CHARACTER ) ; } int lastIndex = builder . lastIndexOf ( CarbonCommonConstants . COMA_SPC_CHARACTER ) ; String str = - NUM00 != lastIndex ? builder . substring ( NUM00 , lastIndex ) : builder . toString ( ) ; return str ; }
public ByteBuffer decodeBufferToByteBuffer ( String inputString ) throws IOException { return ByteBuffer . wrap ( decodeBuffer ( inputString ) ) ; }
public void clear $F72 { $F725 ( m_Model ) setButtons ( null ) ; }
public static int brighter ( int c ) { int r = red ( c ) , g = green ( c ) , b = blue ( c ) ; int i = ( int ) ( NUM00 / ( NUM00 - scale ) ) ; if ( r == NUM00 && g == NUM00 && b == NUM00 ) { return rgba ( i , i , i , alpha ( c ) ) ; } if ( r > NUM00 && r < i ) r = i ; if ( g > NUM00 && g < i ) g = i ; if ( b > NUM00 && b < i ) b = i ; return rgba ( Math . min ( NUM00 , $F2116 ( r , scale ) ) , Math . min ( NUM00 , $F2116 ( g , scale ) ) , Math . min ( NUM00 , $F2116 ( b , scale ) ) , alpha ( c ) ) ; }
public void shutdown $F72 { running = _BOOL ; if ( networkThreads != null ) { for ( NetworkThread n : networkThreads ) { n . stopped = _BOOL ; } } networkThreads = null ; $F30292 ( LOCK ) }
public SerialMessage $F97 ( a ) { $F31730 ( super , String , a ) setBinary ( _BOOL ) ; }
$F1 $F1431 public void completed ( int bytesTransferred , boolean canInvokeDirect ) { if ( bytesTransferred == NUM00 ) $F44867 ( bytesTransferred ) else { updateBuffers ( bytesTransferred ) ; } releaseBuffers ( ) ; synchronized ( result ) { if $F38577 ( result ) $F665 enableReading ( ) ; if ( scatteringRead ) { result . setResult ( ( V ) Long . valueOf ( bytesTransferred ) ) ; } else { result . setResult ( ( V ) Integer . valueOf ( bytesTransferred ) ) ; } } if ( canInvokeDirect ) { Invoker . invokeUnchecked ( result ) ; } else $F173188 ( Invoker , result ) }
public void writeGolomb ( int divisor , int value ) { int q = value / divisor ; for ( $F119 ( i , q ) ) $F73598 ( writeBit ) writeBit ( NUM00 ) ; int r = value - q * divisor ; int bit = $F177988 ( Integer , divisor ) ; if ( r < ( ( NUM00 < < bit ) - divisor ) ) { bit -- ; } else { r += ( NUM00 < < bit ) - divisor ; } for ( ; bit >= NUM00 ; bit -- ) { writeBit ( ( r > > > bit ) & NUM00 ) ; } }
public void addForce ( Force f ) { if ( f . isItemForce ( ) ) { if ( iforces . length == iflen ) { Force [ ] newf = new Force [ iflen + NUM00 ] ; $F7057 ( System , iforces , newf ) iforces = newf ; } iforces [ iflen ++ ] = f ; } if ( f . isSpringForce ( ) ) { if ( sforces . length == sflen ) { Force [ ] newf = new Force [ sflen + NUM00 ] ; $F7057 ( System , sforces , newf ) sforces = newf ; } sforces [ sflen ++ ] = f ; } }
private static MetricValue number_to_metric_value_ ( Number elem ) { if ( elem == null ) return MetricValue . EMPTY ; $F52199 ( num , elem ) try { return MetricValue . fromIntValue ( Long . parseLong ( num ) ) ; } $F846 try { return MetricValue . fromDblValue ( Double . parseDouble ( num ) ) ; } $F846 return MetricValue . fromStrValue ( num ) ; }
public boolean overlaps $F36827 ( sequence , start , end ) { if ( start == MISSING || end == MISSING || end < start ) $F26853 $F3067 ( mSequence , sequence , _BOOL ) if ( ( mEnd != MISSING && start >= mEnd ) || ( end <= mStart ) ) { return _BOOL ; } return _BOOL ; }
public OkapiBM25 ( double k1 , double b ) { if ( Double . isNaN ( k1 ) || Double . isInfinite ( k1 ) || k1 < NUM00 ) $F11416 ( k1 ) this . k1 = k1 ; if ( Double . isNaN ( b ) || b < NUM00 || b > NUM00 ) $F11416 ( b ) this . b = b ; }
protected void prepare $F72 { for ( ProcessInfoParameter para : getParameter ( ) ) { $F145714 ( name , para ) if $F145716 ( para ) ; else if $F1238 ( name , PARAM_M_Warehouse_ID ) $F145719 ( p_M_Warehouse_ID , para ) else $F142840 ( log , Level , name ) } p_C_Invoice_ID = getRecord_ID ( ) ; }
public boolean isConfigured $F72 { $F586 ( LOG , url ) $F6441 ( url ) }
public static $F806 commaDelimitedListToStringArray ( String str ) $F73165 ( delimitedListToStringArray , str )
$F1 public $F96 readByteArray ( String filePath , long offset , int length ) { FileChannel fileChannel = updateCache ( filePath ) ; ByteBuffer byteBffer = read ( fileChannel , length , offset ) ; $F31057 ( byteBffer ) }
private static void FatalError ( JNIEnvironment env , Address messageAddress ) { $F4274 ( traceJNI , VM ) $F4275 ( RuntimeEntrypoints ) try { VM . sysWrite ( JNIGenericHelpers . createStringFromC ( messageAddress ) ) ; System . exit ( EXIT_STATUS_JNI_TROUBLE ) ; } catch ( Throwable unexpected ) { $F4285 ( traceJNI , unexpected , System ) System . exit ( EXIT_STATUS_RECURSIVELY_SHUTTING_DOWN ) ; } }
public boolean makeBackupFile ( String directory , File file ) { if ( file == null ) $F22715 ( log ) else if ( file . canWrite ( ) ) { String backupFullName = directory + File . separator + $F6798 ( createFileNameWithDate , file ) ; $F15998 ( log , backupFullName ) File backupFile = findFile ( backupFullName ) ; if ( backupFile != null ) { if $F220007 ( backupFile ) { $F15998 ( log , backupFullName ) } } else $F94463 ( backupFile , backupFullName ) $F4924 ( parentDir , backupFile ) if $F1906 ( parentDir ) { if $F585 ( log ) { $F74568 ( log , parentDir ) } if $F4928 ( parentDir ) $F24275 ( log , _BOOL ) } if ( file . renameTo ( new File ( backupFullName ) ) ) { $F15998 ( log , backupFullName ) } else { $F15998 ( log , backupFullName ) return _BOOL ; } } return _BOOL ; }
public final void pushPair ( int v1 , int v2 ) { if ( null == m_map ) $F74814 ( m_map , m_blocksize , m_mapSize ) else { if $F11078 ( m_firstFree , m_mapSize ) { m_mapSize += m_blocksize ; int newMap [ ] = new int [ m_mapSize ] ; $F135 ( System , m_map , newMap , m_firstFree ) m_map = newMap ; } } m_map [ m_firstFree ] = v1 ; m_map [ m_firstFree + NUM00 ] = v2 ; m_firstFree += NUM00 ; }
public void removeStorage $F72 throws BackupException { $F34412 ( logger , dataDirSpec ) processHelper . exec ( NUM00 , rmCmd ) ; }
private void appendContainerConfig ( DockerSlaveTemplate slaveTemplate , CreateContainerCmd containerConfig ) { $F2539 labels = containerConfig . getLabels ( ) ; if ( labels == null ) { $F23429 ( labels ) } labels . put ( DOCKER_CLOUD_LABEL , getDisplayName ( ) ) ; labels . put ( DOCKER_TEMPLATE_LABEL , slaveTemplate . getId ( ) ) ; containerConfig . withLabels ( labels ) ; }
ReadOnlyGameSettings $F72 $F845
public void deleteUsers ( Set users ) throws $F52710 { $F10531 ( iter , users ) while $F2921 ( iter ) { $F2778 ( userDN , iter ) AMUser user = new AMUserImpl ( super . token , userDN ) ; $F1900 ( user ) } }
$F1 public boolean accept ( File file ) { $F20605 ( name , file ) for ( String wildcard : wildcards ) { if ( FilenameUtils . wildcardMatch ( name , wildcard , caseSensitivity ) ) { return _BOOL ; } } return _BOOL ; }
public void removeRegion ( Region r ) $F106 ( regions , r )
public static void silentCloseInputStream ( InputStream is ) { try $F6399 ( is ) $F122999 ( log , LOG_TAG , e ) }
$F1 public void startElement $F42838 ( uri , localName , qName , attributes ) throws SAXException { if ( requestID == null && localName . equals ( NUM00 ) ) { $F163383 ( requestID , attributes ) } super . startElement ( uri , localName , qName , attributes ) ; }
public void stop ( int timeout ) throws InterruptedException { if $F151263 ( isclosed , _BOOL ) $F932 List < WebSocket > socketsToClose = null ; synchronized ( connections ) { socketsToClose = new ArrayList < WebSocket > ( connections ) ; } for ( WebSocket ws : socketsToClose ) { ws . close ( CloseFrame . GOING_AWAY ) ; } synchronized ( this ) { if ( selectorthread != null ) { if ( Thread . currentThread ( ) != selectorthread ) $F845 if ( selectorthread != Thread . currentThread ( ) ) { if $F3817 ( socketsToClose ) selectorthread . join ( timeout ) ; $F7589 ( selectorthread ) $F14454 ( selectorthread ) } } } }
public Storage $F72 { this ( new File ( getTemporaryStorageDirectoryString ( ) ) ) ; }
protected void calculateItemWidth ( CategoryPlot plot , Rectangle2D dataArea , int rendererIndex , CategoryItemRendererState state ) { CategoryAxis domainAxis = getDomainAxis ( plot , rendererIndex ) ; CategoryDataset dataset = plot . getDataset ( rendererIndex ) ; if ( dataset != null ) { $F16742 ( columns , dataset ) int rows = state . getVisibleSeriesCount ( ) >= NUM00 ? state . getVisibleSeriesCount ( ) : dataset . getRowCount ( ) ; double space = NUM00 ; $F10709 ( orientation , plot ) if ( orientation == PlotOrientation . HORIZONTAL ) $F32511 ( space , dataArea ) else if ( orientation == PlotOrientation . VERTICAL ) $F32508 ( space , dataArea ) double maxWidth = space * getMaximumItemWidth ( ) ; double categoryMargin = NUM00 ; double currentItemMargin = NUM00 ; if ( columns > NUM00 ) { categoryMargin = domainAxis . getCategoryMargin ( ) ; } if ( rows > NUM00 ) $F20182 ( currentItemMargin , getItemMargin ) double used = space * ( NUM00 - domainAxis . getLowerMargin ( ) - domainAxis . getUpperMargin ( ) - categoryMargin - currentItemMargin ) ; if ( ( rows * columns ) > NUM00 ) { state . setBarWidth ( Math . min ( used / ( rows * columns ) , maxWidth ) ) ; } else { state . setBarWidth ( Math . min ( used , maxWidth ) ) ; } } }
@ RequiresPermission ( Manifest . permission . CAMERA ) public CameraSource start $F72 throws IOException { synchronized ( mCameraLock ) { $F20092 ( mCamera , this ) mCamera = createCamera ( ) ; if ( $F20093 ( Build ) ) { mDummySurfaceTexture = new SurfaceTexture ( DUMMY_TEXTURE_NAME ) ; mCamera . setPreviewTexture ( mDummySurfaceTexture ) ; } else { mDummySurfaceView = new SurfaceView ( mContext ) ; mCamera . setPreviewDisplay ( mDummySurfaceView . getHolder ( ) ) ; } mCamera . startPreview ( ) ; isSafeToTakePicture = _BOOL ; $F20103 ( mProcessingThread , mFrameProcessor ) mFrameProcessor . setActive ( _BOOL ) ; $F2346 ( mProcessingThread ) } return this ; }
public void addBreakpointListener ( final BreakpointListener listener ) $F207 ( breakpointListeners , listener )
public void update ( Graphics g ) { if ( isShowing ( ) ) { if ( ! ( peer instanceof LightweightPeer ) ) { g . clearRect ( NUM00 , NUM00 , width , height ) ; } paint ( g ) ; } }
private void releaseWaiters ( int phase ) { QNode q ; Thread t ; AtomicReference < QNode > head = ( phase & NUM00 ) == NUM00 ? evenQ : oddQ ; while ( $F17863 ( q , head ) && q . phase != ( int ) ( root . state > > > PHASE_SHIFT ) ) { if ( head . compareAndSet ( q , q . next ) && $F43539 ( t , q ) ) $F43542 ( q , LockSupport , t ) } }
public static DateFormat toDateTimeFormat ( String dateTimeFormat , TimeZone tz , Locale locale ) { DateFormat df = null ; if $F4329 ( UtilValidate , dateTimeFormat ) { df = DateFormat . getDateTimeInstance ( DateFormat . SHORT , DateFormat . MEDIUM , locale ) ; } else { df = new SimpleDateFormat ( dateTimeFormat , locale == null ? Locale . getDefault ( ) : locale ) ; } df . setTimeZone ( tz ) ; return df ; }
public static void printStackTrace ( Throwable e ) { try $F20878 ( Debug , e ) catch ( Throwable f ) $F302 ( e ) }
$F1 public Void visitType ( TypeElement e , Void p ) { scan ( e . getTypeParameters ( ) , p ) ; checkCamelCase ( e , _BOOL ) ; super . visitType ( e , p ) ; $F1274 }
public Block ( boolean multiPush ) { this ( multiPush , NUM00 , null , $F161002 ( Arrays ) ) ; }
private double Poisson ( double x ) { return Math . exp ( - m_Lambda + ( x * Math . log ( m_Lambda ) ) - logFac ( x ) ) ; }
protected Expression findExpression ( String source ) { if $F22 ( source ) { $F1382 ( source ) if $F1277 ( source ) $F1337 String leftSide = source ; String rightSide = null ; Connector op = findOp ( leftSide ) ; if ( op != null ) { rightSide = op . getRightSide ( leftSide ) ; leftSide = leftSide . substring ( NUM00 , op . sourceLoc ) ; Expression leftExpression = findExpression ( leftSide ) ; Expression rightExpression = findExpression ( rightSide ) ; if ( leftExpression != null ) { op . addExpr ( leftExpression ) ; } if ( rightExpression != null ) { op . addExpr ( rightExpression ) ; } return op ; } op = findMiniOp ( leftSide ) ; if ( op != null ) { rightSide = op . getRightSide ( leftSide ) ; leftSide = leftSide . substring ( NUM00 , op . sourceLoc ) ; Expression leftExpression = findExpression ( leftSide ) ; Expression rightExpression = findExpression ( rightSide ) ; if ( leftExpression != null ) { op . addExpr ( leftExpression ) ; } if ( rightExpression != null ) { op . addExpr ( rightExpression ) ; } return op ; } if $F70311 ( logger , Level ) $F18853 ( logger , source ) return findMathOp ( source ) ; } $F1274 }
void putChannel ( final StoredClientChannel channel ) { putChannel ( channel , _BOOL ) ; }
private void deleteFilesInDir ( File dir ) { for ( $F3445 ( child , dir ) ) $F19636 ( child ) }
$F1431 public static void pipeInputToOutputStream ( InputStream in , File fileOut , boolean ignoreErrors ) throws IOException { if ( fileOut == null ) { $F9464 ( logger ) if ( ! ignoreErrors ) $F14525 } else { $F4924 ( parent , fileOut ) if $F271542 ( parent ) $F1908 ( parent ) OutputStream fileStream = null ; try { $F10893 ( fileStream , fileOut ) pipeInputToOutputStream ( in , fileStream , _BOOL , ignoreErrors ) ; } catch ( IOException e ) { if ( fileStream != null ) { try $F881 ( fileStream ) catch ( IOException ex ) $F28660 ( logger , ex ) } $F24387 ( ignoreErrors , e ) } } }
$F81108 ( mProcessingThread , State , mDetector )
public static String trimLeadingCharacter ( String str , char leadingCharacter ) { $F74602 ( hasLength , str ) $F7542 ( sb , str ) while ( $F20 ( sb ) && sb . charAt ( NUM00 ) == leadingCharacter ) $F74607 ( sb ) $F92 ( sb ) }
public E take $F72 throws InterruptedException { $F677 ( lock , this ) $F678 ( lock ) long t = now ( ) ; TenantQueue . Item item = null ; try { for ( $F589 ) { TenantQueue q = nextQueue ( t ) ; if ( q == null ) $F681 ( available ) else { long delay = q . next - t ; if ( delay <= NUM00 ) { item = q . poll ( t ) ; return item == null ? null : item . element ; } else if ( leader != null ) $F681 ( available ) else { $F686 ( thisThread , Thread ) leader = thisThread ; try { available . awaitNanos ( delay ) ; } $F690 ( leader , thisThread ) } } $F101251 ( t , System ) } } finally { if ( leader == null && hasNext ( ) ) $F702 ( available ) $F704 ( lock ) done ( item , t ) ; } }
public boolean threadSafeTimeout ( long delayTime , TimeUnit unit , Action0 action ) { boolean scheduled = _BOOL ; $F168669 ( currentThread , Thread ) if $F1238 ( currentThread , dutyThread ) { timerWheel . newTimeout ( delayTime , unit , null ) ; } else { scheduled = actions . offer ( null ) ; } return scheduled ; }
$F46189 ( task , initExecutorsIfNeed , taskExecutorForCachedImages )
void addAttributeSelection ( String exp ) { $F1384 ( index , exp ) String value = null ; int constraint = AttString . EQUALS ; if ( index != - NUM00 ) { if ( index == NUM00 ) $F14411 ( setTagId , TAG_CSS_ILLEGAL_SELECTOR ) int opIndex = index ; char c = exp . charAt ( index - NUM00 ) ; if ( c == NUM00 ) { constraint = AttString . CONTAINS_WORD ; opIndex -- ; } else if ( c == NUM00 ) { constraint = AttString . BEGINS_WITH ; opIndex -- ; } $F4571 ( value , exp , index ) if ( ( $F3106 ( value ) && $F8991 ( value ) ) || ( $F3106 ( value ) && $F8991 ( value ) ) ) $F8994 ( value ) $F45799 ( exp , opIndex ) } if ( attributeSelections == null ) { $F20637 ( attributeSelections ) } attributeSelections . addElement ( new AttString ( exp , constraint , value ) ) ; }
private void createLeftOver $F72 { int lineLengthBytes = currentLastBytePos + NUM00 ; if ( lineLengthBytes > NUM00 ) { $F1325 ( leftOver , lineLengthBytes ) $F135 ( System , data , leftOver , lineLengthBytes ) } else { leftOver = null ; } currentLastBytePos = - NUM00 ; }
public Value sample $F72 { $F59615 ( index , sampler , actionValues ) if ( actionValuesAsArray == null ) { actionValuesAsArray = actionValues . toArray ( new Value $F2313 ( actionValues ) ) ; } return actionValuesAsArray [ index ] ; }
$F1 public void channelClosed ( ChannelHandlerContext channelHandlerContext , ChannelStateEvent channelStateEvent ) throws Exception { $F15856 ( curr_conns ) channelGroup . remove ( channelHandlerContext . getChannel ( ) ) ; }
private static void configureHeadLessSimulation $F72 { $F2699 ( System ) GAMA . setHeadLessMode ( ) ; }
public static boolean isNextWindow ( URI id ) { return id == null || NEXT . equals ( id ) ; }
public static boolean isVisible ( $F6969 clazz , ClassLoader classLoader ) { $F1933 ( classLoader , _BOOL ) try { $F6969 actualClass = classLoader . loadClass ( clazz . getName ( ) ) ; return ( clazz == actualClass ) ; } catch ( ClassNotFoundException ex ) { return _BOOL ; } }
public $F96 remove ( QueueEvent event ) throws $F80658 { TimerContext time = stats . time ( dir + NUM00 ) ; try { $F134526 ( path , event ) String responsePath = dir + NUM00 + response_prefix + $F31604 ( path ) ; if ( zookeeper . exists ( responsePath , _BOOL ) ) { zookeeper . setData ( responsePath , event . getBytes ( ) , _BOOL ) ; } $F96 data = zookeeper . getData ( path , null , null , _BOOL ) ; zookeeper . delete ( path , - NUM00 , _BOOL ) ; return data ; } finally $F5196 ( time ) }
public PropertyXMLBuilder ( ServiceSchema serviceSchema , AMModel model , Set attributeSchemas ) throws $F16995 { this . model = model ; this . serviceName = serviceSchema . getServiceName ( ) ; getServiceResourceBundle ( serviceSchema ) ; if ( serviceBundle != null ) { mapTypeToAttributeSchema = new HashMap $F98338 ( attributeSchemas ) ; mapTypeToAttributeSchema . put ( NULL_TYPE , attributeSchemas ) ; } }
public boolean is ( String arg , boolean allowAbbr ) { $F72433 ( name , arg , _BOOL ) if ( allowAbbr && $F1276 ( arg ) ) { if $F30883 ( arg , c ) { return _BOOL ; } } return _BOOL ; }
static public void addAll ( $F3803 list , $F806 array ) { for ( String item : array ) list . add ( item ) ; }
void remove ( SuperCardToast superCardToast ) $F106 ( mList , superCardToast )
public void test_vmstat_header_and_data_parse $F72 { final Pattern pattern = VMStatCollector . pattern ; final String header = NUM00 ; final String data = NUM00 ; { final $F806 fields = pattern . split ( header . trim ( ) , NUM00 ) ; for ( $F1139 ( i , fields ) ) { if $F17747 ( log ) log . info ( $F262304 ( i , fields ) ) ; } assertField ( header , fields , NUM00 , NUM00 ) ; assertField ( header , fields , NUM00 , NUM00 ) ; assertField ( header , fields , NUM00 , NUM00 ) ; assertField ( header , fields , NUM00 , NUM00 ) ; assertField ( header , fields , NUM00 , NUM00 ) ; assertField ( header , fields , NUM00 , NUM00 ) ; assertField ( header , fields , NUM00 , NUM00 ) ; assertField ( header , fields , NUM00 , NUM00 ) ; } { final $F806 fields = pattern . split ( data . trim ( ) , NUM00 ) ; assertField ( data , fields , NUM00 , NUM00 ) ; assertField ( data , fields , NUM00 , NUM00 ) ; assertField ( data , fields , NUM00 , NUM00 ) ; assertField ( data , fields , NUM00 , NUM00 ) ; assertField ( data , fields , NUM00 , NUM00 ) ; assertField ( data , fields , NUM00 , NUM00 ) ; assertField ( data , fields , NUM00 , NUM00 ) ; assertField ( data , fields , NUM00 , NUM00 ) ; } }
public static SecretKeys generateKeyFromPassword ( String password , String salt ) throws GeneralSecurityException { return generateKeyFromPassword ( password , Base64 . decode ( salt , BASE64_FLAGS ) ) ; }
private String partiallyEscapeAssertionValue ( String assertionValue ) { $F80469 ( sb , assertionValue ) for ( $F1088 ( j , assertionValue ) ) { $F1280 ( c , assertionValue , j ) if ( c == NUM00 ) $F288 ( sb , c ) else { sb . append ( Filter . escapeAssertionValue ( String . valueOf ( c ) ) ) ; } } $F92 ( sb ) }
protected boolean filterLeftoverView ( ViewGroup parent , int childIndex ) { parent . removeViewAt ( childIndex ) ; return _BOOL ; }
protected boolean declAlreadyDeclared ( String prefix ) { int startDecls = m_contextIndexes . peek ( ) ; $F11420 prefixMappings = m_prefixMappings ; $F2199 ( nDecls , prefixMappings ) for ( int i = startDecls ; i < nDecls ; i += NUM00 ) { $F124180 ( prefixDecl , prefixMappings , i ) $F45557 ( prefixDecl ) $F9506 ( prefixDecl , prefix , _BOOL ) } return _BOOL ; }
$F1 public void step ( MessageLogger logger ) { try { addAgent ( ) ; env . step ( ) ; } $F1516 ( e ) }
public static AttackStatus calculatePhysicalStatus ( Creature attacker , Creature attacked , boolean isMainHand ) { return calculatePhysicalStatus ( attacker , attacked , isMainHand , NUM00 , NUM00 , _BOOL , _BOOL ) ; }
public T vertexProcessor ( final BiConsumer < Vertex , $F529 > vertexProcessor ) { this . vertexProcessor = Optional . ofNullable ( vertexProcessor ) ; $F123138 ( extendingClass , this ) }
synchronized boolean release $F72 { d ( NUM00 ) ; if ( state == BUSY ) { state = IDLE ; $F3224 ( idleSince , System ) return _BOOL ; } else { return _BOOL ; } }
private void validateReplicaAvailability ( Slice slice , String shard , String collectionName , int count ) { if ( slice != null ) { Collection < Replica > allReplicasForShard = slice . getReplicas ( ) ; if ( allReplicasForShard == null ) { throw new SolrException ( SolrException . ErrorCode . BAD_REQUEST , NUM00 + shard + NUM00 + collectionName ) ; } if $F10471 ( allReplicasForShard ) { throw new SolrException ( SolrException . ErrorCode . BAD_REQUEST , NUM00 + shard + NUM00 + collectionName + NUM00 ) ; } if $F58405 ( allReplicasForShard , count ) { throw new SolrException ( SolrException . ErrorCode . BAD_REQUEST , NUM00 + shard + NUM00 + collectionName + NUM00 + count + NUM00 + allReplicasForShard . size ( ) + NUM00 ) ; } } }
default ClassDeclaration asClass $F72 { throw new UnsupportedOperationException $F10797 ( String , this ) ; }
private static String partitionSpecToName $F3501 ( spec ) { $F83 ( sb ) for ( $F19318 ( entry , spec ) ) { if $F35625 ( sb ) $F86 ( sb ) sb . append ( entry . getKey ( ) + NUM00 + entry . getValue ( ) ) ; } $F92 ( sb ) }
$F38750 ( input , encoding , toInputStream )
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
public void testHitEndAfterFind $F72 { $F515008 ( hitEndTest , _BOOL ) $F515008 ( hitEndTest , _BOOL ) $F515008 ( hitEndTest , _BOOL ) $F515008 ( hitEndTest , _BOOL ) $F515008 ( hitEndTest , _BOOL ) $F515008 ( hitEndTest , _BOOL ) String floatRegex = getHexFloatRegex ( ) ; hitEndTest ( _BOOL , NUM00 , floatRegex , Double . toHexString ( - NUM00 ) , _BOOL ) ; hitEndTest ( _BOOL , NUM00 , floatRegex , NUM00 + Double . toHexString ( Double . NaN ) + NUM00 , _BOOL ) ; hitEndTest ( _BOOL , NUM00 , floatRegex , Double . toHexString ( - NUM00 ) + NUM00 , _BOOL ) ; hitEndTest ( _BOOL , NUM00 , floatRegex , NUM00 + Double . toHexString ( Double . MIN_VALUE ) + NUM00 , _BOOL ) ; $F515008 ( hitEndTest , _BOOL ) $F515008 ( hitEndTest , _BOOL ) }
@ Modifying $F1230 public void deleteCheque ( $F35231 Long chequeID ) { chequeRepository . delete ( chequeID ) ; photoRepository . deleteByChequeId ( chequeID . toString ( ) ) ; }
public static synchronized double partialCorrelation ( TetradMatrix submatrix ) { try { TetradMatrix inverse = submatrix . inverse ( ) ; double a = - NUM00 * $F214756 ( inverse ) ; double v0 = $F214756 ( inverse ) ; double v1 = $F214756 ( inverse ) ; double b = Math . sqrt ( v0 * v1 ) ; return a / b ; } catch ( Exception e ) { $F301 ( e ) return Double . NaN ; } }
public void addColumn ( String name , String expr ) { Expression ex = ExpressionParser . parse ( expr ) ; Throwable t = ExpressionParser . getError ( ) ; if ( t != null ) $F9491 ( t ) else { addColumn ( name , ex ) ; } }
public void addPutAndGetTimeNanos ( long duration ) { putTimeNanos . addAndGet ( duration ) ; getTimeNanos . addAndGet ( duration ) ; if ( delegate != null ) delegate . addPutAndGetTimeNanos ( duration ) ; }
private float checkSaturationValid ( final float val ) { float tempval = val ; $F36952 ( val , tempval ) if ( val < NUM00 ) { tempval = NUM00 ; } return tempval ; }
String parse ( String cellStr , int layoutConstant ) { return cellStr . split ( LayoutConstants . CELL_PTRN ) [ layoutConstant ] ; }
public void pseudoPropertyChange $F109214 ( propName , old , n ) { if $F585 ( log ) { log . debug ( $F80356 ( getSystemName , propName ) + n . toString ( ) ) ; } firePropertyChange ( propName , old , n ) ; }
public static String runCmd ( File directory , $F3803 cmd , String errorMessage ) throws Exception { $F157869 ( pb , cmd ) pb . directory ( directory ) ; pb . redirectErrorStream ( _BOOL ) ; $F111135 ( p , pb ) String s ; $F83 ( sb ) $F114263 ( stdout , p ) ; while $F443 ( s , stdout ) { logger . info ( s ) ; sb . append ( s ) ; $F84 ( sb ) } $F1822 ( sbs , sb ) int exitValue = p . waitFor ( ) ; if ( exitValue != NUM00 ) throw new Exception ( errorMessage + NUM00 + exitValue + NUM00 + sbs ) ; return sbs ; }
$F1 public SelectableChannel selectableChannel $F72 { return socketChannel ; }
public void test_ConstructorIIIIII $F72 { Date d1 = new Date ( $F55072 ) ; Date d2 = new Date ( NUM00 + d1 . getTimezoneOffset ( ) * NUM00 * NUM00 + $F264 + NUM00 * NUM00 + NUM00 ) ; $F114430 ( assertTrue , d1 , d2 ) }
public static String fromTag ( ByteArrayTag tag ) { $F83 ( builder ) builder . append ( ARRAY_START ) ; boolean start = _BOOL ; for ( byte value : tag . getValue ( ) ) { ByteTag b = new ByteTag ( value ) ; $F11657 ( start , _BOOL , builder , ELEMENT_SEPERATOR ) $F6407 ( builder , fromTag , b ) } builder . append ( ARRAY_END ) ; $F92 ( builder ) }
$F1 protected void addChooserFilters ( JFileChooser chooser ) { javax . swing . filechooser . FileNameExtensionFilter filter = new javax . swing . filechooser . FileNameExtensionFilter ( Bundle . getMessage ( NUM00 , NUM00 ) , NUM00 , NUM00 ) ; chooser . addChoosableFileFilter ( new javax . swing . filechooser . FileNameExtensionFilter $F6600 ) ; chooser . addChoosableFileFilter ( new javax . swing . filechooser . FileNameExtensionFilter $F6600 ) ; chooser . addChoosableFileFilter ( filter ) ; chooser . setFileFilter ( filter ) ; }
private static $F96 WindowsRegEnumValue1 $F14337 ( hKey , valueIndex , maxValueNameLength ) { $F7237 ( result , WindowsRegEnumValue , hKey , valueIndex , maxValueNameLength ) if ( result != null ) { return result ; } else { long sleepTime = INIT_SLEEP_TIME ; for ( $F119 ( i , MAX_ATTEMPTS ) ) { try $F7595 ( Thread , sleepTime ) $F42359 ( result ) sleepTime *= NUM00 ; result = WindowsRegEnumValue ( hKey , valueIndex , maxValueNameLength ) ; $F21525 ( result ) } } return result ; }
public static DateTime parseRfc822 ( String str ) throws ParseException { Date date ; synchronized ( dateTimeFormat822 ) { try $F49239 ( date , dateTimeFormat822 , str ) catch ( $F105392 e ) { throw new ParseException ( e ) ; } } return new DateTime ( date ) ; }
public void testEmptyIndex $F72 throws Exception { IndexSearcher empty = newSearcher ( new MultiReader $F72 ) ; Query query = new TermQuery ( new Term $F6600 ) ; Sort sort = new Sort $F72 ; TopDocs td = empty . search ( query , NUM00 , sort , _BOOL , _BOOL ) ; assertEquals ( NUM00 , td . totalHits ) ; sort . setSort ( SortField . FIELD_DOC ) ; td = empty . search ( query , NUM00 , sort , _BOOL , _BOOL ) ; assertEquals ( NUM00 , td . totalHits ) ; sort . setSort ( new SortField ( NUM00 , SortField . Type . INT ) , SortField . FIELD_DOC ) ; td = empty . search ( query , NUM00 , sort , _BOOL , _BOOL ) ; assertEquals ( NUM00 , td . totalHits ) ; sort . setSort ( new SortField ( NUM00 , SortField . Type <missing ')'> . <missing ';'> NUM00 , _BOOL ) , SortField . FIELD_DOC ) ; td = empty . search ( query , NUM00 , sort , _BOOL , _BOOL ) ; assertEquals ( NUM00 , td . totalHits ) ; sort . setSort ( new SortField ( NUM00 , SortField . Type <missing ')'> . <missing ';'> NUM00 <missing ';'> _VAL , _BOOL ) , SortField . FIELD_DOC ) ; td = empty . search ( query , NUM00 , sort , _BOOL , _BOOL ) ; assertEquals ( NUM00 , td . totalHits ) ; sort . setSort ( new SortField ( NUM00 , SortField . Type . FLOAT ) , new SortField ( NUM00 , SortField . Type <missing ')'> . "STRING" ) ) ; td = empty . search ( query , NUM00 , sort , _BOOL , _BOOL ) ; assertEquals ( NUM00 , td . totalHits ) ; }
public Model validateModel ( Dataset dataset , URI shapesGraphURI , Resource minSeverity , boolean validateShapes , Function < RDFNode , String > labelFunction , ProgressMonitor monitor ) throws InterruptedException { if ( dataset . getDefaultModel ( ) == null ) $F825 Model shapesModel = dataset . getNamedModel ( shapesGraphURI . toString ( ) ) ; if ( monitor != null ) { monitor . subTask ( NUM00 ) ; } List $F43833 constraintProperties = SHACLUtil . getAllConstraintProperties ( validateShapes ) ; Map < Resource , List < SHConstraint > > map = buildShape2ConstraintsMap ( shapesModel , dataset . getDefaultModel ( ) , constraintProperties , validateShapes ) ; if ( monitor != null ) { monitor . subTask ( NUM00 ) ; } if ( monitor != null ) { monitor . beginTask ( $F10533 ( map ) , map . size ( ) ) ; } Model results = JenaUtil . createMemoryModel ( ) ; results . setNsPrefixes ( dataset . getDefaultModel ( ) ) ; for ( Resource shape : map . keySet ( ) ) { for ( SHConstraint constraint : map . get ( shape ) ) { validateConstraintForShape ( dataset , shapesGraphURI , minSeverity , constraint , shape , results , labelFunction , monitor ) ; if ( monitor != null ) { monitor . worked ( NUM00 ) ; if ( monitor . isCanceled ( ) ) { $F2757 } } } } return results ; }
public PdfPage addAnnotation ( PdfAnnotation annotation ) { return addAnnotation ( - NUM00 , annotation , _BOOL ) ; }
public static String findPreferredIDP ( String realm , HttpServletRequest request ) { $F1338 ( request ) String succinctID = request . getParameter ( IFSConstants . PROVIDER_ID_KEY ) ; if ( ( succinctID == null ) || $F1276 ( succinctID ) ) { $F18126 ( debug ) $F1274 } $F1382 ( succinctID ) String preferredSuccinctId = null ; $F17727 ( st , succinctID ) while $F14498 ( st ) { $F39710 ( preferredSuccinctId , st ) if ( $F3599 ( preferredSuccinctId ) && st . hasMoreTokens ( ) ) { preferredSuccinctId = preferredSuccinctId + NUM00 + st . nextToken ( ) ; } } preferredSuccinctId = SAMLUtils . byteArrayToString ( Base64 . decode ( preferredSuccinctId ) ) ; return getProviderIDFromSuccinctID ( realm , preferredSuccinctId ) ; }
private void checkAndCreateDirectory ( final String directoryName ) { try { $F15885 ( dir , directoryName ) if ( $F1905 ( dir ) && dir . mkdirs ( ) ) $F981 ( _logger ) } catch ( Exception ex ) $F28660 ( _logger , ex ) }
$F28183 public final $F22358 assertValuesWith ( $F39462 ... expectations ) { $F34216 ( valuesStorage ) $F18832 ( expectedValueCount , expectations ) if $F39465 ( expectedValueCount , values ) { throw new AssertionError ( NUM00 + expectedValueCount + NUM00 + valueCount , null ) ; } for ( $F119 ( i , expectedValueCount ) ) { $F39462 consumer = expectations [ i ] ; $F6391 ( actualValue , values , i ) consumer . accept ( actualValue ) ; } return this ; }
$F25527 ( REDUNDANT_OP_COMPACT_THRESHOLD , redundantOpCount , lruEntries )
public int findEventPositionNearestTime ( Time time , long id ) { $F1084 ( mRowInfo ) long millis = time . toMillis ( _BOOL ) ; long minDistance = Integer . MAX_VALUE ; long idFoundMinDistance = Integer . MAX_VALUE ; int minIndex = NUM00 ; int idFoundMinIndex = NUM00 ; int eventInTimeIndex = - NUM00 ; int allDayEventInTimeIndex = - NUM00 ; int allDayEventDay = NUM00 ; int minDay = NUM00 ; boolean idFound = _BOOL ; $F2199 ( len , mRowInfo ) for ( $F119 ( index , len ) ) { RowInfo row = mRowInfo . get ( index ) ; if ( row . mType == TYPE_DAY ) $F1448 if ( row . mEventId == id ) { if ( row . mEventStartTimeMilli == millis ) { return index ; } long distance = Math . abs ( millis - row . mEventStartTimeMilli ) ; $F5322 ( distance , idFoundMinDistance , idFoundMinIndex , index ) idFound = _BOOL ; } if ( ! idFound ) { if ( millis >= row . mEventStartTimeMilli && millis <= row . mEventEndTimeMilli ) { if ( row . mAllDay ) { if ( allDayEventInTimeIndex == - NUM00 ) { allDayEventInTimeIndex = index ; allDayEventDay = row . mDay ; } } else if ( eventInTimeIndex == - NUM00 ) { eventInTimeIndex = index ; } } else if ( eventInTimeIndex == - NUM00 ) { long distance = Math . abs ( millis - row . mEventStartTimeMilli ) ; if ( distance < minDistance ) { minDistance = distance ; minIndex = index ; minDay = row . mDay ; } } } } $F9303 ( idFound , idFoundMinIndex ) if ( eventInTimeIndex != - NUM00 ) { return eventInTimeIndex ; } else if ( allDayEventInTimeIndex != - NUM00 && minDay != allDayEventDay ) { return allDayEventInTimeIndex ; } return minIndex ; }
final public void println ( float v ) { $F2544 ( s , String , v ) write ( s , NUM00 , s . length ( ) ) ; println ( ) ; }
private static TranslationResult extractRegister ( final ITranslationEnvironment environment , final long offset , final String subRegister ) throws InternalTranslationException { final ArrayList < ReilInstruction > instructions = new ArrayList < ReilInstruction > $F72 ; final String parentRegister = getParentRegister ( subRegister ) ; $F157629 ( archSize , environment ) if ( isHigher8BitRegister ( subRegister ) ) { $F7336 ( maskResult , environment ) $F7336 ( shiftResult , environment ) instructions . add ( ReilHelpers . createAnd ( offset , archSize , parentRegister , OperandSize . WORD , NUM00 , OperandSize . WORD , maskResult ) ) ; instructions . add ( ReilHelpers . createBsh ( offset + NUM00 , OperandSize . WORD , maskResult , OperandSize . WORD , NUM00 , OperandSize . BYTE , shiftResult ) ) ; return new TranslationResult ( shiftResult , OperandSize . BYTE , TranslationResultType . REGISTER , null , instructions , offset ) ; } else { final OperandSize subRegisterSize = getRegisterSize ( subRegister ) ; final String mask = String . valueOf ( TranslationHelpers . getAllBitsMask ( subRegisterSize ) ) ; $F7336 ( result , environment ) instructions . add ( ReilHelpers . createAnd ( offset , archSize , parentRegister , subRegisterSize , mask , subRegisterSize , result ) ) ; return new TranslationResult ( result , subRegisterSize , TranslationResultType . REGISTER , null , instructions , offset ) ; } }
public void onLoginFailure ( Map requestParamsMap , HttpServletRequest req , HttpServletResponse res ) throws AuthenticationException { $F18126 ( debug ) }
public Interceptor [ ] buildMethodInterceptors ( Method method ) { Interceptors before = method . getAnnotation ( Interceptors . class ) ; return before != null ? createInterceptors ( before ) : NULL_INTERCEPTOR_ARRAY ; }
protected String buildQualifierRegex ( String qualifierValue ) { $F83 ( sb ) $F84 ( sb ) sb . append ( qualifierValue ) ; $F84 ( sb ) $F92 ( sb ) }
private static void lookForChanges ( DataObject left , DataObject right , HashMap $F17195 changes , $F2689 included , $F2689 excluded , $F2689 contained ) { $F121108 ( refClass , left ) $F23596 methods = refClass . getMethods ( ) ; for ( Method method : methods ) { boolean contain = _BOOL ; Name nameAnn = method . getAnnotation ( Name . class ) ; $F4322 ( nameAnn ) String key = nameAnn . value ( ) ; if $F5914 ( contained , key ) { contain = _BOOL ; } else if ( included != null && ! included . contains ( key ) ) $F1448 $F36399 ( excluded , key ) Class type = method . getReturnType ( ) ; try { Object obja = method . invoke ( left ) ; Object objb = method . invoke ( right ) ; if ( type == StringSet . class ) { if ( contain ) { analyzeNewStringSetContainsOldStringSetValues ( ( StringSet ) obja , ( StringSet ) objb , key , changes ) ; } else { analyzeStringSets ( ( StringSet ) obja , ( StringSet ) objb , key , changes ) ; } } else if ( type == StringMap . class ) { analyzeStringMaps ( ( StringMap ) obja , ( StringMap ) objb , key , changes ) ; } else if ( type == StringSetMap . class ) { analyzeStringSetMaps ( ( StringSetMap ) obja , ( StringSetMap ) objb , key , changes ) ; } else { if ( ! isEqual ( obja , objb ) ) { Change change = new Change ( key , obja , objb , nameAnn . value ( ) ) ; changes . put ( key , change ) ; } } } catch ( IllegalAccessException ex ) { throw new ServiceCodeException ( ServiceCode . UNFORSEEN_ERROR , ex , ex . getMessage ( ) , $F58906 ) ; } catch ( InvocationTargetException ex ) { throw new ServiceCodeException ( ServiceCode . UNFORSEEN_ERROR , ex , ex . getMessage ( ) , $F58906 ) ; } } }
static void removeAllPhis ( IR ir ) { for ( Instruction s = ir . firstInstructionInCodeOrder ( ) , sentinel = ir . lastInstructionInCodeOrder ( ) , nextInstr = null ; s != sentinel ; s = nextInstr ) { nextInstr = s . nextInstructionInCodeOrder ( ) ; if $F86920 ( Phi , s ) $F7042 ( s ) } }
protected int countToken ( String token , String target ) { int tokenIndex = NUM00 ; int count = NUM00 ; while ( tokenIndex != - NUM00 ) { $F147058 ( tokenIndex , target , token ) if ( tokenIndex > - NUM00 ) $F1097 ( tokenIndex , count ) } return count ; }
private Map < TestCase , Set < TestFitnessFunction > > initializeCoverageMapFromTests ( List < TestCase > tests ) { Map < TestCase , Set < TestFitnessFunction > > $F161023 ( testToGoals ) ; for ( TestCase test : tests ) { testToGoals . put ( test , filterSupportedGoals ( new $F22301 ( test . getCoveredGoals ( ) ) ) ) ; } return testToGoals ; }
public Interceptor [ ] buildRouteInterceptors ( Interceptor [ ] defaultInters , Interceptor [ ] resourceInters , Class < ? extends Resource > resourceClass , Interceptor [ ] methodInters , Method method ) { List < Interceptor > allInters = new ArrayList < Interceptor > $F72 ; for ( Interceptor defaultInter : defaultInters ) $F207 ( allInters , defaultInter ) for ( Interceptor resourceInter : resourceInters ) $F207 ( allInters , resourceInter ) for ( Interceptor methodInter : methodInters ) $F207 ( allInters , methodInter ) Class < ? extends Interceptor > [ ] resourceClears = getResourceClears ( resourceClass ) ; Class < ? extends Interceptor > [ ] methodClears = getMethodClears ( method ) ; if ( $F22195 ( resourceClears ) || $F22195 ( methodClears ) ) { for ( $F2277 ( i , allInters ) ) { i = clearInterceptor ( allInters , resourceClears , i ) ; i = clearInterceptor ( allInters , methodClears , i ) ; } } return allInters . toArray ( new Interceptor $F2313 ( allInters ) ) ; }
public static boolean checkGMLFootprint ( String footprint ) { try { Configuration configuration = new GMLConfiguration $F72 ; Parser parser = new Parser ( configuration ) ; Geometry geom = ( Geometry ) parser . parse ( $F265821 ( footprint ) ) ; if ( $F1030 ( geom ) && ! geom . isValid ( ) ) $F24275 ( logger , _BOOL ) } catch ( Exception e ) { $F45904 ( logger , e ) return _BOOL ; } return _BOOL ; }
public static void main $F4374 ( args ) { $F158402 ( preBuffer , Double , args ) $F158402 ( postBuffer , Double , args ) run ( args [ NUM00 ] , args [ NUM00 ] , args [ NUM00 ] , args [ NUM00 ] , preBuffer , postBuffer ) ; }
public static double quantile $F12359 ( p , k , theta , shift ) { return Math . exp ( GammaDistribution . quantile ( p , k , theta ) ) + shift ; }
public static CipherParameters makePBEMacParameters ( BCPBEKey pbeKey , AlgorithmParameterSpec spec ) { if ( ( spec == null ) || ! ( spec instanceof PBEParameterSpec ) ) $F825 PBEParameterSpec pbeParam = ( PBEParameterSpec ) spec ; PBEParametersGenerator generator = makePBEGenerator ( pbeKey . getType ( ) , pbeKey . getDigest ( ) ) ; $F46943 ( key , pbeKey ) CipherParameters param ; if ( pbeKey . shouldTryWrongPKCS12 ( ) ) $F46946 ( key ) generator . init ( key , pbeParam . getSalt ( ) , pbeParam . getIterationCount ( ) ) ; param = generator . generateDerivedMacParameters ( pbeKey . getKeySize ( ) ) ; for ( $F15868 ( i , key ) ) $F5629 ( key , i ) return param ; }
public OrionEditorInit ( final TextEditorConfiguration configuration , final CodeAssistantFactory codeAssistantFactory , final QuickAssistAssistant quickAssist , final OrionEditorPresenter textEditor ) $F90398 ( this , configuration , codeAssistantFactory , quickAssist , textEditor )
final void putByte ( int offset , byte value ) { unsafe . putByte ( offset + address , value ) ; }
public final void addValidationError ( String error ) $F207 ( validationErrors , error )
public static void parseOptionSettingTo $F5805 ( optionSetting , dst ) { $F1384 ( eqIndex , optionSetting ) if ( eqIndex == - NUM00 ) { throw new InternalError ( NUM00 + optionSetting ) ; } dst . put ( optionSetting . substring ( NUM00 , eqIndex ) , optionSetting . substring ( eqIndex + NUM00 ) ) ; }
public BigInteger generateClientCredentials $F55962 ( salt , identity , password ) { this . x = SRP6Util . calculateX ( digest , N , salt , identity , password ) ; this . a = selectPrivateValue ( ) ; this . A = g . modPow ( a , N ) ; return A ; }
public void build ( SolrCore core , SolrIndexSearcher searcher ) throws IOException { $F9472 ( LOG , name ) dictionary = dictionaryFactory . create ( core , searcher ) ; lookup . build ( dictionary ) ; if ( storeDir != null ) { File target = getStoreFile ( ) ; if ( ! lookup . store ( new FileOutputStream ( target ) ) ) $F21338 ( LOG ) else { $F36580 ( LOG , target ) } } }
public void start ( String json ) { $F725 ( guidedTourSteps ) GuidedTourConfiguration configuration = dtoFactory . createDtoFromJson ( json , GuidedTourConfiguration . class ) ; log . setDebugMode ( configuration . getDebugMode ( ) ) ; this . guidedTourSteps = configuration . getSteps ( ) ; this . tourName = configuration . getName ( ) ; if ( this . tourName == null || tourName . isEmpty ( ) ) { tourName = NUM00 ; } this . hasWelcomeStep = configuration . getHasWelcomeStep ( ) ; startTour ( ) ; }
private void connect $F72 throws IOException { JMXServiceURL jmxUrl = new JMXServiceURL ( String . format ( fmtUrl , host , port ) ) ; $F535 ( env ) if ( username != null ) { $F105633 ( creds , username , password ) env . put ( JMXConnector . CREDENTIALS , creds ) ; } $F199288 ( env , getRMIClientSocketFactory ) jmxc = JMXConnectorFactory . connect ( jmxUrl , env ) ; mbeanServerConn = jmxc . getMBeanServerConnection ( ) ; try { ObjectName name = new ObjectName ( ssObjName ) ; ssProxy = JMX . newMBeanProxy ( mbeanServerConn , name , StorageServiceMBean . class ) ; name = new ObjectName ( MessagingService . MBEAN_NAME ) ; msProxy = JMX . newMBeanProxy ( mbeanServerConn , name , MessagingServiceMBean . class ) ; name = new ObjectName ( StreamManagerMBean . OBJECT_NAME ) ; streamProxy = JMX . newMBeanProxy ( mbeanServerConn , name , StreamManagerMBean . class ) ; name = new ObjectName ( CompactionManager . MBEAN_OBJECT_NAME ) ; compactionProxy = JMX . newMBeanProxy ( mbeanServerConn , name , CompactionManagerMBean . class ) ; name = new ObjectName ( FailureDetector . MBEAN_NAME ) ; fdProxy = JMX . newMBeanProxy ( mbeanServerConn , name , FailureDetectorMBean . class ) ; name = new ObjectName ( CacheService . MBEAN_NAME ) ; cacheService = JMX . newMBeanProxy ( mbeanServerConn , name , CacheServiceMBean . class ) ; name = new ObjectName ( StorageProxy . MBEAN_NAME ) ; spProxy = JMX . newMBeanProxy ( mbeanServerConn , name , StorageProxyMBean . class ) ; name = new ObjectName ( HintedHandOffManager . MBEAN_NAME ) ; hhProxy = JMX . newMBeanProxy ( mbeanServerConn , name , HintedHandOffManagerMBean . class ) ; name = new ObjectName ( GCInspector . MBEAN_NAME ) ; gcProxy = JMX . newMBeanProxy ( mbeanServerConn , name , GCInspectorMXBean . class ) ; name = new ObjectName ( Gossiper . MBEAN_NAME ) ; gossProxy = JMX . newMBeanProxy ( mbeanServerConn , name , GossiperMBean . class ) ; } catch ( MalformedObjectNameException e ) $F7077 ( e ) memProxy = ManagementFactory . newPlatformMXBeanProxy ( mbeanServerConn , ManagementFactory . MEMORY_MXBEAN_NAME , MemoryMXBean . class ) ; runtimeProxy = ManagementFactory . newPlatformMXBeanProxy ( mbeanServerConn , ManagementFactory . RUNTIME_MXBEAN_NAME , RuntimeMXBean . class ) ; }
private static void runRandomTest ( final int wordLength , final int bytePadding , final int wordCount ) { final long seed = randomLong ( ) ; final Random random = new Random ( seed ) ; final Random verificationRandom = new Random ( seed ) ; final long wordMask ; if ( wordLength == NUM00 ) { wordMask = ~ NUM00 ; } else { $F143890 ( wordMask , wordLength ) ; } final BigEndianAscendingWordSerializer serializer = new BigEndianAscendingWordSerializer ( wordLength , wordCount , bytePadding ) ; for ( $F119 ( i , wordCount ) ) { final long value = random . nextLong ( ) & wordMask ; serializer . writeWord ( value ) ; } $F173719 ( bytes , serializer ) final BigEndianAscendingWordDeserializer deserializer = new BigEndianAscendingWordDeserializer ( wordLength , bytePadding , bytes ) ; assertEquals ( deserializer . totalWordCount ( ) , wordCount ) ; for ( $F119 ( i , wordCount ) ) { assertEquals ( deserializer . readWord ( ) , ( verificationRandom . nextLong ( ) & wordMask ) ) ; } }
public void addListener ( T listener ) { $F18045 ( listener ) listeners . add ( listener ) ; }
public static MaildirMessageName createUniqueName ( MaildirFolder parentFolder , long size ) { String timestamp = $F258568 ( String , System ) ; $F8993 ( timestamp ) $F83 ( uniquePart ) uniquePart . append ( Integer . toHexString ( random . nextInt ( ) ) ) ; uniquePart . append ( $F39706 ( timestamp ) ) ; uniquePart . append ( processName ) ; $F16690 ( uniquePart , getNextDeliveryNumber ) String sizeString = NUM00 + String . valueOf ( size ) ; String fullName = $F31144 ( timestamp , uniquePart ) + NUM00 + currentHostname + sizeString ; MaildirMessageName uniqueName = new MaildirMessageName ( parentFolder , fullName ) ; uniqueName . timestamp = timestamp ; uniqueName . uniqueString = uniquePart . toString ( ) ; uniqueName . hostname = currentHostname ; uniqueName . sizeString = sizeString ; uniqueName . isSplit = _BOOL ; uniqueName . size = size ; return uniqueName ; }
$F41720 ( value , absMin , absMax , absValue , Math )
$F1 public void handleClick ( int x , int y , PlotRenderingInfo info ) $F845
private void adjustBCIndex ( Instruction barrier ) { NormalMethod source = barrier . position ( ) . method ; if ( source . isForOsrSpecialization ( ) ) { barrier . adjustBytecodeIndex ( - source . getOsrPrologueLength ( ) ) ; } }
$F1 public String toString $F72 { $F20818 ( risul ) $F84 ( risul ) $F84 ( risul ) $F92 ( risul ) }
public static $F2469 interpose ( $F2469 vector , int vectorLen , int offset , int len ) { $F2469 updated = create ( vectorLen + len ) ; int idx = offset > > NUM00 ; $F135 ( System , vector , updated , idx ) if ( idx < vector . length ) { int delta = offset & NUM00 ; updated [ idx ] |= vector [ idx ] & maskBelow ( delta ) ; } copy ( vector , offset , updated , offset + len , vectorLen - offset ) ; return updated ; }
public static File createTemporaryDirectory ( String prefix ) { while ( _BOOL ) { String candidateName = prefix + TEMPORARY_DIRECTORY_PRNG . nextInt ( ) ; File $F79849 ( result , System , candidateName ) ; if ( result . mkdir ( ) ) { return result ; } } }
$F106393 synchronizeAllAuthDataAsync $F72 { Map < String , $F2539 > authData ; synchronized ( mutex ) { if $F931 ( isCurrentUser ) { return Task . forResult ( null ) ; } authData = getAuthData ( ) ; } List < $F106393 > $F719 ( tasks , authData ) ; for ( $F3465 ( authType , authData ) ) $F3762 ( tasks , synchronizeAuthDataAsync , authType ) return Task . whenAll ( tasks ) ; }
public static Element createElementInEncryptionSpace ( Document doc , String elementName ) { $F28724 ( doc ) if $F38892 ( xencPrefix ) { return doc . createElementNS ( EncryptionConstants . EncryptionSpecNS , elementName ) ; } return doc . createElementNS ( EncryptionConstants . EncryptionSpecNS , xencPrefix + NUM00 + elementName ) ; }
void scrapActiveViews $F72 { $F52430 ( activeViews , mActiveViews ) final boolean multipleScraps = mViewTypeCount > NUM00 ; $F30929 scrapViews = mCurrentScrap ; $F18832 ( count , activeViews ) for ( $F18298 ( i , count ) ) { final View victim = activeViews [ i ] ; if ( victim != null ) { $F3670 ( lp , victim ) activeViews [ i ] = null ; final boolean scrapHasTransientState = ViewCompat . hasTransientState ( victim ) ; int viewType = lp . viewType ; if ( ! shouldRecycleViewType ( viewType ) || scrapHasTransientState ) { if ( viewType != ITEM_VIEW_TYPE_HEADER_OR_FOOTER || scrapHasTransientState ) { removeDetachedView ( victim , _BOOL ) ; } if ( scrapHasTransientState ) { if ( mTransientStateViews == null ) { mTransientStateViews = new SparseArrayCompat < View > $F72 ; } mTransientStateViews . put ( mFirstActivePosition + i , victim ) ; } $F598 } $F52456 ( multipleScraps , scrapViews , mScrapViews , viewType ) lp . position = mFirstActivePosition + i ; scrapViews . add ( victim ) ; } } pruneScrapViews ( ) ; }
private void drawWind ( Canvas canvas , float y , float xOffset ) { float cof = ( mScreenWidth + xOffset ) / ( LOADING_ANIMATION_COEFFICIENT / SLOW_DOWN_ANIMATION_COEFFICIENT ) ; float time = mLoadingAnimationTime ; if ( mLastAnimationTime - mLoadingAnimationTime > NUM00 ) { mInverseDirection = _BOOL ; time = ( LOADING_ANIMATION_COEFFICIENT / SLOW_DOWN_ANIMATION_COEFFICIENT ) - mLoadingAnimationTime ; } else { mNewWindSet = _BOOL ; mInverseDirection = _BOOL ; } float x = ( mScreenWidth - ( time * cof ) ) + xOffset - mWindLineWidth ; float xEnd = x + mWindLineWidth ; $F41674 ( canvas , x , y , xEnd , mWindPaint ) }
private boolean hasProxySettings ( Properties settings ) { String proxyHost = settings . getProperty ( NUM00 , null ) ; $F179974 ( proxyHost ) }
public boolean equalsDefault $F72 { return ( Double . doubleToLongBits ( value ) == NUM00 ) ; }
public static $F2539 parseKeyAndValueToMap ( String source , boolean ignoreSpace ) $F33971 ( parseKeyAndValueToMap , source , DEFAULT_KEY_AND_VALUE_SEPARATOR , DEFAULT_KEY_AND_VALUE_PAIR_SEPARATOR , ignoreSpace )
$F26827 ( w , h , oldw , oldh , super , setupBounds , setupPaints , invalidate )
$F18534 ( newcount , currentBufferIndex , buffers , filledBufferSum , currentBuffer , newBufferSize , Math )
$F5466 public static WebsiteAddress create ( String originOrHostOrPattern ) { $F25770 ( originOrHostOrPattern ) if $F7311 ( originOrHostOrPattern , ANY_SUBDOMAIN_PATTERN ) { String origin = null ; String scheme = null ; $F130950 ( host , originOrHostOrPattern , ANY_SUBDOMAIN_PATTERN ) boolean omitProtocolAndPort = _BOOL ; return new WebsiteAddress ( originOrHostOrPattern , origin , scheme , host , omitProtocolAndPort ) ; } if $F130954 ( originOrHostOrPattern , SCHEME_SUFFIX ) { $F23375 ( uri , Uri , originOrHostOrPattern ) String origin = trimTrailingBackslash ( originOrHostOrPattern ) ; boolean omitProtocolAndPort = HTTP_SCHEME . equals ( uri . getScheme ( ) ) && ( uri . getPort ( ) == - NUM00 || uri . getPort ( ) == NUM00 ) ; return new WebsiteAddress ( originOrHostOrPattern , origin , uri . getScheme ( ) , uri . getHost ( ) , omitProtocolAndPort ) ; } String origin = null ; String scheme = null ; boolean omitProtocolAndPort = _BOOL ; return new WebsiteAddress ( originOrHostOrPattern , origin , scheme , originOrHostOrPattern , omitProtocolAndPort ) ; }
public void test_filter_001 $F72 throws IOException { final File basefile = File . createTempFile ( getName ( ) , NUM00 ) ; try { $F52199 ( basename , basefile ) final NameAndExtensionFilter logFilter = new NameAndExtensionFilter ( basename , NUM00 ) ; assertSameFiles ( new File $F10277 , logFilter . getFiles ( ) ) ; } $F105993 ( basefile ) }
public void resetTeleMissileAttacks $F72 $F6051 ( pendingTeleMissileAttacks )
public int addPadding $F5474 ( in , inOff ) { $F18952 ( code , in , inOff ) while ( inOff < $F33765 ( in ) ) { in [ inOff ] = ( byte ) random . nextInt ( ) ; inOff ++ ; } in [ inOff ] = code ; return code ; }
public void addCommands ( PDFPage page , Matrix extra ) { synchronized ( commands ) { addPush ( ) ; $F25302 ( extra , addXform ) commands . addAll ( page . getCommands ( ) ) ; addPop ( ) ; } updateImages ( ) ; }
public String toString $F72 { $F280 ( sb ) $F1469 separator = $F4582 ; int n = rows . length ; for ( $F119 ( i , n ) ) { separator [ NUM00 ] = NUM00 ; for ( $F9993 ( j , i ) ) { sb . append ( separator ) ; $F53015 ( sb , rows , i , j ) separator [ NUM00 ] = NUM00 ; } $F84 ( sb ) $F84 ( sb ) } $F92 ( sb ) }
public void addLast ( StatementSequence statements ) { if ( statements != null ) { $F27392 ( sequence , statements ) } }
private void notifyActivityStateChanged ( Bundle bundle ) { if $F5973 ( mRecords ) { $F73829 ( Log , TAG , mRecords ) synchronized ( mRecords ) { Iterator < Record > iterator = mRecords . iterator ( ) ; while $F2921 ( iterator ) { Record record = ( Record ) iterator . next ( ) ; FmRadioListener listener = record . mCallback ; if ( listener == null ) { $F7042 ( iterator ) $F665 } listener . onCallBack ( bundle ) ; } } } }
public double elasticity ( final double spot ) { $F59591 ( val , value ) final double del = delta ( spot ) ; if ( val > Constants . QL_EPSILON ) return del / val * spot ; else if ( Math . abs ( del ) < Constants . QL_EPSILON ) $F1082 else if ( del > NUM00 ) return Double . MAX_VALUE ; else return Double . MIN_VALUE ; }
private $F96 entityToBytes ( HttpEntity entity , Request request ) throws IOException , ServerError { PoolingByteArrayOutputStream bytes = new PoolingByteArrayOutputStream ( mPool , ( int ) entity . getContentLength ( ) ) ; $F5475 ( buffer ) try { InputStream in = entity . getContent ( ) ; if ( in == null ) { throw new ServerError $F72 ; } buffer = mPool . getBuf ( NUM00 ) ; int progress = NUM00 ; int count ; while $F18067 ( count , in , buffer ) { $F11584 ( bytes , buffer , count ) progress += count ; request . progressUpdate ( progress ) ; } $F11316 ( bytes ) } finally { try { entity . consumeContent ( ) ; } catch ( IOException e ) $F100676 ( VinciLog ) mPool . returnBuf ( buffer ) ; $F59 ( bytes ) } }
$F1 public Foo fetchByUuid_First $F127587 ( uuid , orderByComparator ) $F127590 ( list , findByUuid , uuid , orderByComparator )
public static float roundDecimal ( float value ) { return roundDecimal ( value , Math . log10 ( INT_PRECISION ) ) ; }
@ AssistedInject public RunnerImpl ( $F1113 RunnerLocalizationConstant locale , $F1113 RunnerCounter runnerCounter , $F1113 GetEnvironmentsUtil util , $F1113 @ Assisted RunOptions runOptions , $F1113 @ Assisted Scope environmentScope , $F5466 @ Assisted String environmentName ) { this . runOptions = runOptions ; this . ram = runOptions . getMemorySize ( ) ; this . title = RUNNER_NAME + runnerCounter . getRunnerNumber ( ) + ( environmentName == null ? NUM00 : NUM00 + getCorrectName ( environmentName ) ) ; this . activeTab = locale . runnerTabConsole ( ) ; this . status = IN_QUEUE ; this . scope = environmentScope ; $F3224 ( creationTime , System ) String environmentId = runOptions . getEnvironmentId ( ) ; if ( environmentId == null || environmentId . startsWith ( NUM00 ) ) { this . type = util . getType ( ) ; } else { this . type = util . getCorrectCategoryName ( runOptions . getEnvironmentId ( ) ) ; } if ( environmentId != null ) { runOptions . setEnvironmentId ( environmentId ) ; } }
public String globalInfo $F72 $F11287
public static boolean isWindowsMe $F72 $F98764 ( osName , osVersion )
private String dateToString ( Date input ) { if ( input == null ) $F1337 else $F2495 ( input ) }
private static int componentSize ( Component component , FormSpec formSpec , int cellSize , FormLayout . Measure minMeasure , FormLayout . Measure prefMeasure ) { if ( formSpec == null ) { return prefMeasure . sizeOf ( component ) ; } else if ( formSpec . getSize ( ) == Sizes . MINIMUM ) { return minMeasure . sizeOf ( component ) ; } else if ( formSpec . getSize ( ) == Sizes . PREFERRED ) { return prefMeasure . sizeOf ( component ) ; } else { return Math . min ( cellSize , prefMeasure . sizeOf ( component ) ) ; } }
protected synchronized void start ( long curPrimaryGen ) throws IOException { if ( state . equals ( NUM00 ) == _BOOL ) $F4639 message ( NUM00 ) ; try { String segmentsFileName = SegmentInfos . getLastCommitSegmentsFileName ( dir ) ; long maxPendingGen = - NUM00 ; for ( String fileName : dir . listAll ( ) ) { if ( fileName . startsWith ( IndexFileNames . PENDING_SEGMENTS ) ) { long gen = Long . parseLong ( fileName . substring ( IndexFileNames . PENDING_SEGMENTS . length ( ) + NUM00 ) , Character . MAX_RADIX ) ; $F12283 ( gen , maxPendingGen ) } } SegmentInfos infos ; if ( segmentsFileName == null ) { infos = new SegmentInfos $F72 ; message ( NUM00 ) ; } else { message ( NUM00 + segmentsFileName ) ; infos = SegmentInfos . readCommit ( dir , segmentsFileName ) ; message ( $F369 ( infos ) + infos . getVersion ( ) ) ; $F6877 indexFiles = infos . files ( _BOOL ) ; lastCommitFiles . add ( segmentsFileName ) ; lastCommitFiles . addAll ( indexFiles ) ; deleter . incRef ( lastCommitFiles ) ; lastNRTFiles . addAll ( indexFiles ) ; deleter . incRef ( lastNRTFiles ) ; message ( NUM00 + lastCommitFiles ) ; message ( NUM00 + lastNRTFiles ) ; } message ( NUM00 + Arrays . toString ( dir . listAll ( ) ) ) ; deleter . deleteUnknownFiles ( segmentsFileName ) ; message ( NUM00 + Arrays . toString ( dir . listAll ( ) ) ) ; String s = infos . getUserData ( ) . get ( PRIMARY_GEN_KEY ) ; long myPrimaryGen ; if ( s == null ) { assert $F10470 ( infos ) ; myPrimaryGen = - NUM00 ; } else $F174805 ( myPrimaryGen , Long , s ) message ( NUM00 + myPrimaryGen ) ; boolean doCommit ; if ( $F3816 ( infos ) && myPrimaryGen != - NUM00 && myPrimaryGen != curPrimaryGen ) { assert myPrimaryGen < curPrimaryGen ; $F132947 ( initSyncStartNS , System ) $F25590 ( message , myPrimaryGen , curPrimaryGen ) CopyJob job = null ; message ( NUM00 + segmentsFileName ) ; assert deleter . getRefCount ( segmentsFileName ) == NUM00 ; deleter . decRef ( Collections . singleton ( segmentsFileName ) ) ; if ( dir instanceof FSDirectory && ( ( FSDirectory ) dir ) . checkPendingDeletions ( ) ) $F5754 ( segmentsFileName ) $F12396 ( didRemove , lastCommitFiles , segmentsFileName ) assert didRemove ; while ( _BOOL ) { job = newCopyJob ( NUM00 + name ( ) + NUM00 + infos . getVersion ( ) , null , null , _BOOL , null ) ; $F2346 ( job ) message ( NUM00 + job . getCopyState ( ) . version ) ; try { job . runBlocking ( ) ; $F1571 ( job ) $F597 } catch ( IOException ioe ) { job . cancel ( NUM00 , ioe ) ; if ( ioe . getMessage ( ) . contains ( NUM00 ) ) $F47196 ( message , ioe ) else { throw ioe ; } } } lastPrimaryGen = job . getCopyState ( ) . primaryGen ; $F96 infosBytes = job . getCopyState ( ) . infosBytes ; SegmentInfos syncInfos = SegmentInfos . readCommit ( dir , new BufferedChecksumIndexInput ( new ByteArrayIndexInput ( NUM00 , job . getCopyState ( ) . infosBytes ) ) , job . getCopyState ( ) . gen ) ; syncInfos . updateGeneration ( infos ) ; infos = syncInfos ; assert infos . getVersion ( ) == job . getCopyState ( ) . version ; message ( NUM00 + infos . getVersion ( ) + NUM00 + infos . toString ( ) ) ; message ( NUM00 + job . getFileNames ( ) ) ; deleter . incRef ( job . getFileNames ( ) ) ; message ( NUM00 + lastNRTFiles ) ; deleter . decRef ( lastNRTFiles ) ; $F725 ( lastNRTFiles ) lastNRTFiles . addAll ( job . getFileNames ( ) ) ; message ( NUM00 + lastNRTFiles ) ; lastFileMetaData = job . getCopyState ( ) . files ; message ( String . format ( Locale . ROOT , NUM00 , id , $F171135 ( System , initSyncStartNS ) , bytesToString ( job . getTotalBytesCopied ( ) ) , job . getCopyState ( ) . version ) ) ; doCommit = _BOOL ; } else { doCommit = _BOOL ; lastPrimaryGen = curPrimaryGen ; message ( NUM00 ) ; } if ( infos . getGeneration ( ) < maxPendingGen ) { message ( NUM00 + infos . getGeneration ( ) + NUM00 + maxPendingGen ) ; infos . setNextWriteGeneration ( maxPendingGen ) ; } sendNewReplica ( ) ; mgr = new SegmentInfosSearcherManager ( dir , this , infos , searcherFactory ) ; IndexSearcher searcher = mgr . acquire ( ) ; try { int hitCount = searcher . count ( new TermQuery ( new Term $F6600 ) ) ; message ( NUM00 + hitCount + NUM00 + ( ( DirectoryReader ) searcher . getIndexReader ( ) ) . getVersion ( ) ) ; } finally { mgr . release ( searcher ) ; } $F8801 ( doCommit , commit ) message ( NUM00 ) ; state = NUM00 ; } catch ( Throwable t ) { if ( t . getMessage ( ) . startsWith ( NUM00 ) == _BOOL ) { message ( NUM00 ) ; t . printStackTrace ( printStream ) ; } else $F881 ( dir ) IOUtils . reThrow ( t ) ; } }
public static boolean isSameElementType ( ASTNode node1 , ASTNode node2 ) { return node1 != null && node2 != null && node1 . getElementType ( ) == node1 . getElementType ( ) ; }
$F1 public LogMessage readNextLogMessage $F72 { try { $F1338 ( reader ) while ( _BOOL ) { $F27015 ( line , reader ) if ( line == null ) { close ( ) ; if ( currentLog != null && matchRegex ( currentLog ) ) { incrementLogCount ( currentLog ) ; return currentLog ; } $F1274 } fileLineNumber ++ ; LogMessage nextLog = null ; if ( parser != null ) { nextLog = parser . parseLine ( line , request ) ; } else { for ( LogParser parser : parserTable ) { nextLog = parser . parseLine ( line , request ) ; if ( ! nextLog . isContinuation ( ) ) { this . parser = parser ; $F597 } } if ( nextLog == null || nextLog . isContinuation ( ) ) { status . appendInfo ( this . filePath , fileLineNumber ) ; $F598 } } if ( nextLog . isContinuation ( ) ) { if ( currentLog != null ) { currentLog . appendMessage ( LogUtil . stringToBytes ( line ) ) ; } } else if ( nextLog . isRejected ( ) ) { if ( currentLog != null ) { LogMessage returnedLog = currentLog ; currentLog = null ; if ( matchRegex ( returnedLog ) ) { incrementLogCount ( returnedLog ) ; return returnedLog ; } } } else if ( nextLog . isRejectedLast ( ) ) { if ( currentLog != null ) { LogMessage returnedLog = currentLog ; currentLog = null ; if ( matchRegex ( returnedLog ) ) { incrementLogCount ( returnedLog ) ; return returnedLog ; } } $F597 } else { if ( currentLog != null ) { LogMessage returnedLog = currentLog ; currentLog = nextLog ; if ( returnedLog . isHeader ( ) && currentLog . isHeader ( ) ) $F1448 if ( matchRegex ( returnedLog ) ) { incrementLogCount ( returnedLog ) ; return returnedLog ; } } else { currentLog = nextLog ; } } } } catch ( IOException e ) { status . appendErrFileName ( filePath ) ; } $F1274 }
public void appendDataTo ( StringBuilder stringBuilder ) $F288 ( stringBuilder , buffer )
$F26560 ( requestMethod , responseCode , Request , HttpStatus )
private void loadBinary ( DataInputStream is ) throws IOException { $F480223 ( is , MAGIC ) $F480223 ( is , VERSION ) $F5961 ( continuityWeight , is ) $F5961 ( optimalCoupling , is ) $F5961 ( extendSelections , is ) $F5961 ( joinMethod , is ) $F5961 ( joinWeightShift , is ) $F5952 ( weightLength , is ) $F3936 ( joinWeights , weightLength ) for ( $F1139 ( i , joinWeights ) ) { $F114160 ( joinWeights , i , is ) } $F5952 ( unitsLength , is ) units = new DatabaseClusterUnit [ unitsLength ] ; for ( $F1139 ( i , units ) ) { units [ i ] = new DatabaseClusterUnit ( is ) ; } $F5952 ( unitTypesLength , is ) unitTypes = new UnitType [ unitTypesLength ] ; for ( $F1139 ( i , unitTypes ) ) { unitTypes [ i ] = new UnitType ( is ) ; } sts = new SampleSet ( is ) ; mcep = new SampleSet ( is ) ; $F5952 ( numCarts , is ) $F12775 ( cartMap ) for ( $F119 ( i , numCarts ) ) { $F19101 ( name , Utilities , is ) CART cart = CARTImpl . loadBinary ( is ) ; cartMap . put ( name , cart ) ; $F13265 ( defaultCart , cart ) } }
public static String toString ( long l ) { if ( l < NUMBERS_MIN || l > NUMBERS_MAX ) { return Long . toString ( l , NUM00 ) ; } return NUMBERS [ ( int ) l ] ; }
$F1 public synchronized void reset $F72 { pos = NUM00 ; }
$F52843 ( packed , map , i , j , count , value )
$F27671 ( in , buffer , result )
$F144297 ( file , data , write , Charset , _BOOL )
protected boolean isIDPProxyEnabled ( FSAuthnRequest authnRequest ) throws FSException { if ( authnRequest . getMinorVersion ( ) != IFSConstants . FF_12_PROTOCOL_MINOR_VERSION ) { return _BOOL ; } FSScoping scoping = authnRequest . getScoping ( ) ; if ( scoping != null && scoping . getProxyCount ( ) == NUM00 ) { return _BOOL ; } String enabledString = IDFFMetaUtils . getFirstAttributeValueFromConfig ( spConfig , IFSConstants . ENABLE_IDP_PROXY ) ; if $F153572 ( enabledString ) { return _BOOL ; } else { return _BOOL ; } }
private void compileProlog ( ObjectId prolog , File tempDir ) throws IOException , CompileException { File tempRules = copyToTempFile ( prolog , tempDir ) ; try { Compiler comp = new Compiler $F72 ; comp . prologToJavaSource ( tempRules . getPath ( ) , tempDir . getPath ( ) ) ; } $F105993 ( tempRules ) }
public Spring removeAllListeners $F72 $F68437 ( mListeners , this )
public SelectionInputDialog ( Window owner , String key , boolean editable , $F10809 selectionValues , T initialSelectionValue , InputValidator $F4203 inputValidator , Object ... keyArguments ) { this ( owner , key , selectionValues , initialSelectionValue , inputValidator , keyArguments ) ; comboBox . setEditable ( editable ) ; }
public void build ( SolrCore core , SolrIndexSearcher searcher ) throws IOException { $F973 ( LOG ) dictionary = dictionaryFactory . create ( core , searcher ) ; lookup . build ( dictionary ) ; if ( storeDir != null ) { File target = new File ( storeDir , factory . storeFileName ( ) ) ; if ( ! lookup . store ( new FileOutputStream ( target ) ) ) $F21338 ( LOG ) else { $F36580 ( LOG , target ) } } }
public static String convertClassNameToResourcePath ( String className ) { $F18062 ( Assert , className ) $F11446 ( className ) }
public URI $F1947 ( scheme , schemeSpecificPart , fragment ) throws URISyntaxException { $F83 ( uri ) $F43191 ( scheme , uri ) $F189367 ( schemeSpecificPart , ALL_LEGAL_ENCODER , uri ) $F189369 ( fragment , uri , ALL_LEGAL_ENCODER ) $F25731 ( parseURI , uri , _BOOL ) }
private int addToPopulation ( Solution solution ) { int id = nextFreeId ( ) ; solutions . put ( id , solution ) ; return id ; }
public $F96 toByteArray $F72 $F54348 ( Arrays , buf , cnt )
public void createDiskAsync ( final String projectId , final DiskCreateSpec diskCreateSpec , $F67201 ( responseCallback ) ) throws IOException { final String path = String . format ( NUM00 , getBasePath ( ) , projectId ) ; createObjectAsync ( path , serializeObjectAsJson ( diskCreateSpec ) , responseCallback ) ; }
$F1 public boolean domainMatch $F2236 ( host , domain ) { return host . endsWith ( domain ) ; }
public synchronized void disableAttribute ( String name ) $F130709 ( enabledAttributes , name )
$F32632 ( criteria , createCriteriaInternal , oredCriteria )
public void push ( final Handle handle ) $F31345 ( mv , handle )
$F1309 public static String encodePostBody ( Bundle parameters , String boundary ) { $F1747 ( parameters ) $F83 ( sb ) for ( $F3465 ( key , parameters ) ) { $F16628 ( parameter , parameters , key ) if $F223789 ( parameter ) $F1448 sb . append ( NUM00 + key + NUM00 + ( String ) parameter ) ; sb . append ( NUM00 + NUM00 + boundary + NUM00 ) ; } $F92 ( sb ) }
public static IFitsHeader lookup ( String key ) { $F1749 ( keyLength , key ) if ( keyLength > NUM00 && Character . isDigit ( key . charAt ( keyLength - NUM00 ) ) ) { $F83 ( builder ) for ( $F119 ( index , keyLength ) ) { $F1280 ( character , key , index ) if $F119844 ( Character , character ) { if ( $F43582 ( builder ) ) $F86 ( builder ) } else $F288 ( builder , character ) } return $F5173 ( STANDARD_KEYS , builder ) ; } $F8313 ( STANDARD_KEYS , key ) }
private static void assertChangeEvents ( $F101180 earlyEvents , $F101180 lateEvents , $F101180 anytimeEvents , $F101180 actualEvents ) { String inputDesc = String . format ( NUM00 + NUM00 , earlyEvents , lateEvents , anytimeEvents , actualEvents ) ; $F101193 ( early , earlyEvents ) $F101193 ( late , lateEvents ) $F101193 ( any , anytimeEvents ) $F101197 ( ev , early , assertFalse , late , any ) $F101197 ( ev , late , assertFalse , early , any ) $F101197 ( ev , any , assertFalse , early , late ) for ( PortChangeEvent a : actualEvents ) { if $F16914 ( early , a ) $F1448 if $F16914 ( any , a ) $F1448 if $F16914 ( late , a ) { if $F5973 ( early ) { fail ( a + NUM00 + NUM00 + inputDesc ) ; } else $F1448 } fail ( a + NUM00 + inputDesc ) ; } $F101205 ( early , fail , inputDesc ) $F101205 ( late , fail , inputDesc ) $F101205 ( any , fail , inputDesc ) }
$F1 public void write ( Kryo kryo , Output output ) { $F115 ( size , index ) output . writeInt ( size + NUM00 , _BOOL ) ; for ( $F1316 ( i , size ) ) { $F1729 ( s , index , i ) if ( s == null ) { throw new RuntimeException $F96141 ( Integer , i ) ; } output . writeString ( s ) ; } }
public final ObjectProperty < Control > toggleNodeProperty $F72 { return this . toggleNode ; }
private static int decodeOctets ( int i , ByteBuffer bb , StringBuilder sb ) { if ( bb . limit ( ) == NUM00 && ( bb . get ( NUM00 ) & NUM00 ) < NUM00 ) { sb . append ( ( char ) bb . get ( NUM00 ) ) ; return i + NUM00 ; } else { CharBuffer cb = UTF_8_CHARSET . decode ( bb ) ; $F11659 ( sb , cb ) return i + bb . limit ( ) * NUM00 - NUM00 ; } }
public ArrayFieldVector ( FieldVector $F4203 v1 , $F10809 v2 ) throws NullArgumentException { MathUtils . checkNotNull ( v1 ) ; MathUtils . checkNotNull ( v2 ) ; field = v1 . getField ( ) ; final $F10809 v1Data = ( v1 instanceof ArrayFieldVector ) ? ( ( ArrayFieldVector $F4203 ) v1 ) . data : v1 . toArray ( ) ; data = MathArrays . buildArray ( field , v1Data . length + v2 . length ) ; $F7057 ( System , v1Data , data ) $F11244 ( System , v2 , data , v1Data ) }
public void reverse $F72 { final $F113171 animators = mAnimatedVectorState . mAnimators ; $F11550 ( size , animators ) for ( $F119 ( i , size ) ) { final Animator animator = animators . get ( i ) ; if ( canReverse ( animator ) ) { reverse ( animator ) ; } else $F6174 ( Log , LOG_TAG ) } }
public void start $F72 { $F135851 ( sLogger ) mCleanupExecutor = Executors . newSingleThreadExecutor ( ) ; if ( ! mObserverIsRegistered ) { mContactsContractObserver = new ContactsContractObserver ( new Handler $F72 ) ; mContactsContractCursor = mContentResolver . query ( Phone . CONTENT_URI , null , null , null , null ) ; CursorUtil . assertCursorIsNotNull ( mContactsContractCursor , Phone . CONTENT_URI ) ; mContactsContractCursor . registerContentObserver ( mContactsContractObserver ) ; mObserverIsRegistered = _BOOL ; } }
protected final void fireVetoableChange $F21013 ( propertyName , oldValue , newValue ) throws PropertyVetoException $F71527 ( fireVetoableChange , propertyName , Double , oldValue , newValue )
public void testLMDirichlet $F72 throws IOException { float p = ( FREQ + NUM00 * ( TOTAL_TERM_FREQ + NUM00 ) / ( NUMBER_OF_FIELD_TOKENS + NUM00 ) ) / ( DOC_LEN + NUM00 ) ; float a = NUM00 / ( DOC_LEN + NUM00 ) ; float gold = ( float ) ( Math . log ( p / ( a * ( TOTAL_TERM_FREQ + NUM00 ) / ( NUMBER_OF_FIELD_TOKENS + NUM00 ) ) ) + Math . log ( a ) ) ; correctnessTestCore ( new LMDirichletSimilarity $F72 , gold ) ; }
public void onSinksReceived ( String sourceUrn , List < MediaSink > sinks ) { mSinks . put ( sourceUrn , sinks ) ; nativeOnSinksReceived ( mNativeMediaRouterAndroid , sourceUrn , sinks . size ( ) ) ; }
public User toEntity ( UserDTO dto ) $F41330 ( toEntity , dto )
protected void writeExternalForeignKeyDropStmt ( Table table , ForeignKey foreignKey , StringBuilder ddl ) { writeTableAlterStmt ( table , ddl ) ; $F84 ( ddl ) printIdentifier ( getForeignKeyName ( table , foreignKey ) , ddl ) ; printEndOfStatement ( ddl ) ; }
public void obtain ( long timeout_ms ) throws IOException , InterruptedException , TimeoutException { Long quit_time = System . currentTimeMillis ( ) + timeout_ms ; if ( fileLock != null && fileLock . isValid ( ) ) $F932 do { try { fileLock = fileToLock . tryLock ( ) ; $F665 } catch ( OverlappingFileLockException e ) $F31130 ( Thread ) } while $F139818 ( System , quit_time ) ; $F175728 }
$F1309 public void pointToData ( Data o ) throws FitsException { o . fillHeader ( this ) ; }
$F1113 protected VirtualFile [ ] collectAffectedFiles ( $F1113 Project project , $F1113 VirtualFile [ ] files ) { List $F85423 affectedFiles = new ArrayList $F85423 ( files . length ) ; $F156 ( projectLevelVcsManager , ProjectLevelVcsManager , project ) for ( VirtualFile file : files ) { if ( $F4925 ( file ) && projectLevelVcsManager . getVcsFor ( file ) instanceof GitVcs ) $F207 ( affectedFiles , file ) else if ( file . isDirectory ( ) && isRecursive ( ) ) { addChildren ( project , affectedFiles , file ) ; } } return VfsUtilCore . toVirtualFileArray ( affectedFiles ) ; }
public void updatePosition ( Particle particle , long elapsedTime ) { Vector3f speed = particle . getSpeed ( ) ; float delta = elapsedTime / NUM00 ; float dx = speed . x * delta ; float dy = speed . y * delta ; float dz = speed . z * delta ; Vector3f pos = particle . getPosition ( ) ; particle . setPosition ( pos . x + dx , pos . y + dy , pos . z + dz ) ; }
protected void update ( int length ) { $F725 ( tickLabelValues ) $F725 ( tickLabels ) $F725 ( tickLabelPositions ) if ( scale . isLogScaleEnabled ( ) ) { updateTickLabelForLogScale ( length ) ; } else { updateTickLabelForLinearScale ( length ) ; } updateTickVisibility ( ) ; updateTickLabelMaxLengthAndHeight ( ) ; }
private static boolean isWithinBounds ( VisualPosition targetPosition , VisualPosition startPosition , VisualPosition endPosition ) { return targetPosition . line >= startPosition . line && targetPosition . line <= endPosition . line && targetPosition . column >= startPosition . column && targetPosition . column <= endPosition . column ; }
static public void assertStatementIndicesConsistent ( final AbstractTripleStore db , final int maxerrors ) { $F140706 ( log ) $F127413 ( nerrs ) final int from , to ; if ( db . getSPOKeyArity ( ) == NUM00 ) { from = SPOKeyOrder . FIRST_TRIPLE_INDEX ; to = SPOKeyOrder . LAST_TRIPLE_INDEX ; } else { from = SPOKeyOrder . FIRST_QUAD_INDEX ; to = SPOKeyOrder . LAST_QUAD_INDEX ; } for ( int i = from ; i <= to ; i ++ ) { for ( int j = from ; j <= to ; j ++ ) { if ( i <= j ) $F1448 assertSameStatements ( db , SPOKeyOrder . valueOf ( i ) , SPOKeyOrder . valueOf ( j ) , nerrs , maxerrors ) ; } } $F127421 ( assertEquals , nerrs ) }
public void show ( $F37019 final int itemId ) { map . add ( itemId ) ; navigation . invalidateBadge ( itemId ) ; }
public Options put ( String option , Integer value ) { if ( value == null ) $F4915 ( remove , option ) $F186791 ( options , option , value ) return this ; }
private int determineTargetPage ( int currentPage , float pageOffset , int velocity , int deltaX ) { int targetPage ; if ( Math . abs ( deltaX ) > flingDistance && Math . abs ( velocity ) > minimumVelocity ) { if ( virtualPos < NUM00 ) { targetPage = velocity > NUM00 ? currentPage : currentPage + NUM00 ; } else { targetPage = velocity > NUM00 ? currentPage + NUM00 : currentPage ; } } else { final float truncator = currentPage >= currentItem ? NUM00 : NUM00 ; targetPage = ( int ) ( currentPage + pageOffset + truncator ) ; } if $F3817 ( items ) { final ItemInfo firstItem = items . get ( NUM00 ) ; final ItemInfo $F7662 ( lastItem , items ) ; targetPage = Math . max ( firstItem . position , Math . min ( targetPage , lastItem . position ) ) ; } if ( targetPage > currentPage && onCardChangeListener != null ) { onCardChangeListener . onCardDismissed ( currentPage , virtualPos > NUM00 ) ; } return targetPage ; }
protected String form ( ObjectMatrix1D matrix , int index , Former formatter ) { $F16628 ( value , matrix , index ) $F1747 ( value ) $F33236 ( String , value ) }
public void clone ( Vector3f source ) { System . arraycopy ( source . points , NUM00 , points , NUM00 , NUM00 ) ; }
public void disable ( BluetoothAdapter adapter ) { int mask = ( BluetoothReceiver . STATE_TURNING_OFF_FLAG | BluetoothReceiver . STATE_OFF_FLAG | BluetoothReceiver . SCAN_MODE_NONE_FLAG ) ; long start = - NUM00 ; BluetoothReceiver receiver = getBluetoothReceiver ( mask ) ; int state = adapter . getState ( ) ; switch ( state ) { case BluetoothAdapter . STATE_OFF : assertFalse ( adapter . isEnabled ( ) ) ; removeReceiver ( receiver ) ; $F665 case BluetoothAdapter . STATE_TURNING_ON : assertFalse ( adapter . isEnabled ( ) ) ; $F3224 ( start , System ) $F597 case BluetoothAdapter . STATE_ON : assertTrue ( adapter . isEnabled ( ) ) ; $F3224 ( start , System ) assertTrue ( adapter . disable ( ) ) ; $F597 case BluetoothAdapter . STATE_TURNING_OFF : assertFalse ( adapter . isEnabled ( ) ) ; mask = NUM00 ; $F597 $F1267 removeReceiver ( receiver ) ; $F14354 ( fail , String , state ) } $F657 ( s , System ) while $F164541 ( System , s , ENABLE_DISABLE_TIMEOUT ) { state = adapter . getState ( ) ; if ( state == BluetoothAdapter . STATE_OFF && ( receiver . getFiredFlags ( ) & mask ) == mask ) { assertFalse ( adapter . isEnabled ( ) ) ; long finish = receiver . getCompletedTime ( ) ; if $F6099 ( start , finish ) { writeOutput ( String . format ( NUM00 , ( finish - start ) ) ) ; } else $F1210 ( writeOutput ) removeReceiver ( receiver ) ; $F665 } sleep ( POLL_TIME ) ; } int firedFlags = receiver . getFiredFlags ( ) ; removeReceiver ( receiver ) ; fail ( String . format ( NUM00 , state , BluetoothAdapter . STATE_OFF , firedFlags , mask ) ) ; }
public static String toRegex ( String glob , String separator ) { checkNotNull ( separator , NUM00 ) ; checkArgument ( $F1276 ( separator ) , NUM00 , separator ) ; return toRegex ( glob , separator . charAt ( NUM00 ) ) ; }
protected void forceNoLoss ( boolean value ) $F845
public static $F806 splitWithoutEscaped ( String str , char separatorChar , boolean retainEmpty ) { $F1749 ( len , str ) if ( len == NUM00 ) { return $F382 ; } $F10144 ( list ) int i = NUM00 ; int start = NUM00 ; boolean match = _BOOL ; while ( i < len ) { if $F11983 ( str , i ) { match = _BOOL ; i += NUM00 ; } else if $F44927 ( str , i , separatorChar ) { if ( retainEmpty || match ) { $F56997 ( list , str , start , i ) match = _BOOL ; } start = ++ i ; } else { match = _BOOL ; i ++ ; } } if ( retainEmpty || match ) { $F56997 ( list , str , start , i ) } $F14862 ( list ) }
private static HashMap < BasicBlockPair , $F92979 > findSplitPoints ( IR ir , LiveAnalysis live , LSTGraph lst ) { HashMap < BasicBlockPair , $F92979 > result = new HashMap < BasicBlockPair , $F92979 > $F989 ; for ( $F245865 e = lst . enumerateNodes ( ) ; e . hasMoreElements ( ) ; ) { LSTNode node = ( LSTNode ) e . nextElement ( ) ; BasicBlock header = node . getHeader ( ) ; BitVector loop = node . getLoop ( ) ; $F45557 ( loop ) for ( $F32409 in = header . getIn ( ) ; in . hasMoreElements ( ) ; ) { $F32413 ( bb , in ) if ( loop . get ( bb . getNumber ( ) ) ) $F598 $F92979 liveRegisters = live . getLiveRegistersOnEdge ( bb , header ) ; for ( Register r : liveRegisters ) { if ( r . isSymbolic ( ) ) { $F92979 s = findOrCreateSplitSet ( result , bb , header ) ; s . add ( r ) ; } } } for ( $F1088 ( i , loop ) ) { if $F73204 ( loop , i ) { BasicBlock bb = ir . getBasicBlock ( i ) ; for ( $F32409 out = bb . getNormalOut ( ) ; out . hasMoreElements ( ) ; ) { $F32413 ( dest , out ) if ( loop . get ( dest . getNumber ( ) ) ) $F598 $F92979 liveRegisters = live . getLiveRegistersOnEdge ( bb , dest ) ; for ( Register r : liveRegisters ) { if ( r . isSymbolic ( ) ) { $F92979 s = findOrCreateSplitSet ( result , bb , dest ) ; s . add ( r ) ; } } } } } } addEntriesForInfrequentBlocks ( ir , live , result ) ; return result ; }
public void testSplitEscapedSemicolons $F72 { Properties inner = PropertyUtils . splitPropertiesOnSemicolon ( PropertyUtils . escapeBackSlashesIfNotNull ( NUM00 ) ) ; $F70108 ( assertEquals , inner ) $F107616 ( assertEquals , inner ) $F107616 ( assertEquals , inner ) $F107616 ( assertEquals , inner ) $F107616 ( assertEquals , inner ) }
public static void removeObjectAtOffset ( $F131 sourceArray , $F131 destinationArray , int offset ) { $F135 ( System , sourceArray , destinationArray , offset ) $F86533 ( System , sourceArray , offset , destinationArray ) }
$F1431 public DictionaryAdapter ( Context context , File dbPath , String dbName , String defaultTable ) { mContext = context ; mDbName = dbName ; mDefaultTable = defaultTable ; mDbPath = dbPath ; $F63508 ( mDbFile , dbPath , mDbName ) if $F3428 ( mDbFile ) $F5795 ( open ) }
public boolean isTabAssociatedWithNonDestroyedActivity ( boolean isIncognito , int tabId ) { List < WeakReference $F43793 > activities = ApplicationStatus . getRunningActivities ( ) ; for ( WeakReference $F43793 ref : activities ) { Activity activity = ref . get ( ) ; if ( activity != null && isValidActivity ( isIncognito , activity . getIntent ( ) ) && getTabIdFromIntent ( activity . getIntent ( ) ) == tabId && ! isActivityDestroyed ( activity ) ) { return _BOOL ; } } return _BOOL ; }
HttpStreamWrapper ( HttpStream stream ) throws IOException { _stream = stream ; }
public boolean handleFile ( File file ) { if ( DEBUG ) { logger . fine ( $F4929 ( file ) ) ; } filenames . add ( file ) ; return _BOOL ; }
public boolean looksLikeNumberComing $F72 { if $F11984 ( n , s ) return _BOOL ; return $F69553 ( Character , s , n ) ; }
public PartialHull ( IPoint first , IPoint second ) $F23287 ( points , first , second )
$F83977 ( listener , mListeners )
public short readShort $F72 throws IOException { return primitiveTypes . readShort ( ) ; }
public void print ( int inum ) $F45719 ( print , String , inum )
public static < NodeType extends IViewNode $F1011 > ZyProximityNode $F1011 createProximityNode ( final Graph2D graph , final ZyGraphNode $F1011 attachedNode , final int degree , final boolean isIncoming ) { $F1832 ( Preconditions , graph ) $F1832 ( Preconditions , attachedNode ) final ZyLabelContent labelcontent = new ZyLabelContent $F8320 ; labelcontent . addLineContent ( new ZyLineContent ( String . valueOf ( degree ) , new Font $F13847 ( Font ) , null ) ) ; final ZyProximityNodeRealizer $F177081 r = new ZyProximityNodeRealizer $F177081 ( labelcontent ) ; final Node node = graph . createNode ( r ) ; $F1431 final ZyProximityNode $F177081 infoNode = new ZyProximityNode $F177081 ( node , r , ( ZyGraphNode $F177081 ) attachedNode , isIncoming ) ; final ZyNodeData < ZyProximityNode $F177081 > data = new ZyNodeData < ZyProximityNode $F177081 > ( infoNode ) ; r . setUserData ( data ) ; return infoNode ; }
public static boolean isZoningRequired ( DbClient dbClient , URI varrayUri ) { if ( varrayUri != null ) { VirtualArray nh = dbClient . queryObject ( VirtualArray . class , varrayUri ) ; if ( nh != null ) $F8587 ( isZoningRequired , dbClient , nh ) } return _BOOL ; }
public void reply ( $F3803 responseHeaders , boolean out ) throws IOException { assert ( ! Thread . holdsLock ( SpdyStream . this ) ) ; boolean outFinished = _BOOL ; synchronized ( this ) { $F896 ( responseHeaders ) if ( isLocallyInitiated ( ) ) $F4639 if ( this . responseHeaders != null ) $F4639 this . responseHeaders = responseHeaders ; if ( ! out ) { this . out . finished = _BOOL ; outFinished = _BOOL ; } } connection . writeSynReply ( id , outFinished , responseHeaders ) ; }
protected CCAnimation ( String name , float delay , ArrayList < CCSpriteFrame > frames ) { delay_ = delay ; name_ = name ; frames_ = new ArrayList < CCSpriteFrame > $F72 ; $F97792 ( frames , frames_ ) }
private void navigateToDump $F72 { TreePath currentPath = tree . getSelectionPath ( ) ; tree . setSelectionPath ( currentPath . getParentPath ( ) ) ; tree . scrollPathToVisible ( currentPath . getParentPath ( ) ) ; }
public synchronized void addMessages ( ArrayList < SmsMmsMessage > newMessages ) { if ( newMessages != null ) { $F177656 ( messages , newMessages ) UpdateMessageCount ( ) ; } }
public static $F13096 makeRandomCacheEntry ( $F96 data , boolean isExpired , boolean needsRefresh ) { $F6822 ( random ) $F13096 entry = new $F13096 $F72 ; if ( data != null ) $F6988 ( entry , data ) else { entry . data = $F13106 ( random ) ; } entry . etag = $F13111 ( String , random ) ; entry . serverDate = random . nextLong ( ) ; entry . ttl = isExpired ? NUM00 : Long . MAX_VALUE ; entry . softTtl = needsRefresh ? NUM00 : Long . MAX_VALUE ; return entry ; }
public int swap $F72 { if ( ! egl . eglSwapBuffers ( eglDisplay , eglSurface ) ) { return egl . eglGetError ( ) ; } return EGL10 . EGL_SUCCESS ; }
public static List $F349233 windows ( String words , int windowSize ) { $F70316 ( tokenizer , words ) $F10144 ( list ) $F226965 ( tokenizer , list ) return windows ( list , windowSize ) ; }
protected void drawCenterText ( Canvas c ) { CharSequence centerText = mChart . getCenterText ( ) ; if ( mChart . isDrawCenterTextEnabled ( ) && centerText != null ) { MPPointF center = mChart . getCenterCircleBox ( ) ; MPPointF offset = mChart . getCenterTextOffset ( ) ; float x = center . x + offset . x ; float y = center . y + offset . y ; float innerRadius = mChart . isDrawHoleEnabled ( ) && ! mChart . isDrawSlicesUnderHoleEnabled ( ) ? mChart . getRadius ( ) * ( mChart . getHoleRadius ( ) / NUM00 ) : mChart . getRadius ( ) ; RectF holeRect = mRectBuffer [ NUM00 ] ; holeRect . left = x - innerRadius ; holeRect . top = y - innerRadius ; holeRect . right = x + innerRadius ; holeRect . bottom = y + innerRadius ; RectF boundingRect = mRectBuffer [ NUM00 ] ; boundingRect . set ( holeRect ) ; float radiusPercent = mChart . getCenterTextRadiusPercent ( ) / NUM00 ; if ( radiusPercent > NUM00 ) { boundingRect . inset ( ( boundingRect . width ( ) - boundingRect . width ( ) * radiusPercent ) / NUM00 , ( boundingRect . height ( ) - boundingRect . height ( ) * radiusPercent ) / NUM00 ) ; } if ( ! centerText . equals ( mCenterTextLastValue ) || ! boundingRect . equals ( mCenterTextLastBounds ) ) { mCenterTextLastBounds . set ( boundingRect ) ; mCenterTextLastValue = centerText ; float width = mCenterTextLastBounds . width ( ) ; mCenterTextLayout = new StaticLayout ( centerText , NUM00 , centerText . length ( ) , mCenterTextPaint , ( int ) Math . max ( Math . ceil ( width ) , NUM00 ) , Layout . Alignment . ALIGN_CENTER , NUM00 , NUM00 , _BOOL ) ; } float layoutHeight = mCenterTextLayout . getHeight ( ) ; $F72208 ( c ) if ( $F215008 ( Build ) ) { Path path = mDrawCenterTextPathBuffer ; $F2268 ( path ) path . addOval ( holeRect , Path . Direction . CW ) ; c . clipPath ( path ) ; } c . translate ( boundingRect . left , boundingRect . top + ( boundingRect . height ( ) - layoutHeight ) / NUM00 ) ; mCenterTextLayout . draw ( c ) ; $F72213 ( c ) MPPointF . recycleInstance ( center ) ; MPPointF . recycleInstance ( offset ) ; } }
public static String buildPath ( JsonPath jsonPath ) { $F89604 ( urlParts ) JsonPath currentJsonPath = jsonPath ; String pathPart ; do { if ( currentJsonPath instanceof RelationshipsPath ) { pathPart = RELATIONSHIP_MARK + SEPARATOR + currentJsonPath . getElementName ( ) ; } else if ( currentJsonPath instanceof FieldPath ) { pathPart = currentJsonPath . getElementName ( ) ; } else { pathPart = currentJsonPath . getElementName ( ) ; if ( currentJsonPath . getIds ( ) != null ) { pathPart += SEPARATOR + mergeIds ( currentJsonPath . getIds ( ) ) ; } } urlParts . add ( pathPart ) ; currentJsonPath = currentJsonPath . getParentResource ( ) ; } while ( currentJsonPath != null ) ; Collections . reverse ( urlParts ) ; return SEPARATOR + StringUtils . join ( SEPARATOR , urlParts ) + SEPARATOR ; }
protected void groupFrames ( Vector < Frame > frames , Vector < Group > groups , boolean isDchum ) throws MakeTocException { Frame frame ; Group group ; int groupCount ; $F2199 ( nFrames , frames ) $F36253 ( Debug ) for ( $F119 ( i , nFrames ) ) { $F36253 ( Debug ) frame = ( Frame ) frames . elementAt ( i ) ; if ( ! frame . marked ) { $F8935 ( groupCount , groups ) group = new Group $F72 ; group . left = maxSide / NUM00 ; group . right = group . left + NUM00 ; group . top = maxSide / NUM00 ; group . bottom = group . top + NUM00 ; group . horiz_pos [ group . top ] = frame . top ; group . horiz_pos [ group . bottom ] = frame . bottom ; group . vert_pos [ group . left ] = frame . left ; group . vert_pos [ group . right ] = frame . right ; group . h_interval = frame . h_interval ; group . v_interval = frame . v_interval ; group . h_resolution = frame . h_resolution ; group . v_resolution = frame . v_resolution ; group . scale = frame . scale ; group . zone = frame . zone ; group . cib = frame . cib ; group . cdted = frame . cdted ; frame . x = group . left ; frame . y = group . top ; frame . group = groupCount ; frame . marked = _BOOL ; Debug . message ( NUM00 , NUM00 + groupCount + NUM00 + i + NUM00 + frame . filename + NUM00 ) ; if ( ! isDchum ) { for ( $F119 ( j , nFrames ) ) { if ( i == j ) { Debug . message ( NUM00 , NUM00 + i + NUM00 ) ; $F598 } Frame f = ( Frame ) frames . elementAt ( j ) ; if ( addFrameToGroup ( group , f , groupCount ) ) { Debug . message ( NUM00 , NUM00 + j + NUM00 + groupCount ) ; $F598 } } } Debug . message ( NUM00 , NUM00 + groupCount + NUM00 ) ; groups . add ( group ) ; } fireProgressUpdate ( ProgressEvent . UPDATE , NUM00 , i , nFrames ) ; } if $F22503 ( Debug ) { Debug . output ( $F10532 ( groups ) ) ; } }
private static Object add ( final Object array , final int index , final Object element , $F6970 ( clss ) ) { if ( array == null ) { if ( index != NUM00 ) { throw new IndexOutOfBoundsException ( NUM00 + index + NUM00 ) ; } Object joinedArray = Array . newInstance ( clss , NUM00 ) ; Array . set ( joinedArray , NUM00 , element ) ; return joinedArray ; } $F73736 ( length , Array , array ) if ( index > length || index < NUM00 ) $F73737 ( index , length ) Object result = Array . newInstance ( clss , length + NUM00 ) ; $F135 ( System , array , result , index ) Array . set ( result , index , element ) ; if ( index < length ) { System . arraycopy ( array , index , result , index + NUM00 , length - index ) ; } return result ; }
public double doubleValue $F72 { $F12165 ( d ) }
public String toMatlab $F72 { StringBuffer result ; int i ; int n ; $F7398 ( result ) $F84 ( result ) for ( $F95978 ( i , getRowDimension ) ) { $F34674 ( i , result ) for ( $F95978 ( n , getColumnDimension ) ) { $F34674 ( n , result ) result . append ( Double . toString ( get ( i , n ) ) ) ; } } $F84 ( result ) $F92 ( result ) }
public FileInputReader ( File f ) throws IOException { if $F22503 ( Debug ) { Debug . output ( $F4929 ( f ) ) ; } $F32928 ( name , f ) $F24536 ( absolutePath , f ) inputFile = init ( f ) ; }
public static ObjectOutputStream newObjectOutputStream ( Path self ) throws IOException { return new ObjectOutputStream ( Files . newOutputStream ( self ) ) ; }
$F1 public $F182484 keySet $F72 { HashSet $F22664 set = new HashSet $F22664 $F72 ; for ( $F108030 s : segments ) { $F70469 ( set , s ) } return set ; }
$F30789 ( d , imageView , getImageView , viewWidth , viewHeight , drawableWidth , drawableHeight , mBaseMatrix , widthScale , heightScale , mScaleType , ScaleType , scale , Math , mTempSrc , mTempDst , FIT_CENTER , ScaleToFit , FIT_START , FIT_END , FIT_XY , resetMatrix )
public void add ( final CertificateValidity certificateValidity ) $F207 ( certificateValidityList , certificateValidity )
public void addPolicyListener ( PolicyListener policyListener ) { policyCache . addPolicyListener ( policyListener ) ; }
public static Result verify ( String sid , String code ) { String id = NUM00 + sid ; Code c = ( Code ) Cache . get ( id ) ; if ( c == null ) { $F34419 ( log , sid ) return Result . badcode ; } else if ( ! X . isSame ( code , c . code ) ) { log . warn ( NUM00 + c . code + NUM00 + code ) ; return Result . badcode ; } else if ( c . expired < System . currentTimeMillis ( ) ) { log . warn ( NUM00 + c . expired ) ; return Result . expired ; } return Result . ok ; }
private ScriptEngine newScriptEngine ( File file ) throws ScriptException { $F20605 ( filename , file ) $F24867 ( index , filename ) if ( ( index < NUM00 ) || ( index >= $F1092 ( filename ) ) ) { throw new ScriptException $F580 ; } $F36289 ( extension , filename , index ) ScriptEngineManager manager = new ScriptEngineManager $F72 ; ScriptEngine engine = manager . getEngineByExtension ( extension ) ; if ( engine == null ) { throw new ScriptException ( NUM00 + extension ) ; } return engine ; }
protected static INaviRawModule findRawModule ( final int rawModuleId , final List < INaviRawModule > rawModules ) { Preconditions . checkArgument ( rawModuleId > NUM00 , NUM00 , rawModuleId ) ; $F1832 ( Preconditions , rawModules ) for ( final INaviRawModule rawModule : rawModules ) { if ( rawModule . getId ( ) == rawModuleId ) { return rawModule ; } } $F4638 }
public static Object extractTypeChecked ( $F6689 args , int i , Class clazz , Function < $F6689 , Object > extractFunc ) { if ( args . size ( ) < i + NUM00 ) $F1337 else if ( clazz . isInstance ( args . get ( i ) ) ) { return extractFunc . apply ( args ) ; } else $F1337 }
$F1 public JapaneseDate dateYearDay ( int prolepticYear , int dayOfYear ) { return new JapaneseDate ( LocalDate . ofYearDay ( prolepticYear , dayOfYear ) ) ; }
private Pair < Entry , $F1469 > recoverEntry ( KeyStore ks , String alias , $F1469 pstore , $F1469 pkey ) throws Exception { if ( ks . containsAlias ( alias ) == _BOOL ) { $F22029 ( form , rb ) $F22031 ( source , alias ) throw new Exception $F22032 ( form , source ) ; } PasswordProtection pp = null ; Entry entry ; try { entry = ks . getEntry ( alias , pp ) ; pkey = null ; } catch ( UnrecoverableEntryException une ) { if ( P11KEYSTORE . equalsIgnoreCase ( ks . getType ( ) ) || KeyStoreUtil . isWindowsKeyStore ( ks . getType ( ) ) ) { throw une ; } if ( pkey != null ) { pp = new PasswordProtection ( pkey ) ; entry = ks . getEntry ( alias , pp ) ; } else { try { pp = new PasswordProtection ( pstore ) ; entry = ks . getEntry ( alias , pp ) ; pkey = pstore ; } catch ( UnrecoverableEntryException une2 ) { if ( P12KEYSTORE . equalsIgnoreCase ( ks . getType ( ) ) ) { throw une2 ; } else { pkey = getKeyPasswd ( alias , null , null ) ; pp = new PasswordProtection ( pkey ) ; entry = ks . getEntry ( alias , pp ) ; } } } } return Pair . of ( entry , pkey ) ; }
URLClassLoader newLoader ( URL base ) { return new URLClassLoader ( new URL [ ] { base } ) ; }
public void testMinUnequal1 $F72 { String a = NUM00 ; int aScale = NUM00 ; String b = NUM00 ; int bScale = NUM00 ; String c = NUM00 ; int cScale = NUM00 ; $F1918 ( aNumber , a , aScale ) $F1918 ( bNumber , b , bScale ) $F1918 ( cNumber , c , cScale ) assertEquals ( NUM00 , cNumber , aNumber . min ( bNumber ) ) ; }
public Wiser $F72 { this . server = new SMTPServer ( new SimpleMessageListenerAdapter ( this ) ) ; }
protected static $F2027 concat ( $F5466 $F2027 arr , int ... obj ) { $F2027 newArr ; if $F12414 ( arr ) newArr = obj ; else { newArr = Arrays . copyOf ( arr , arr . length + obj . length ) ; $F11244 ( System , obj , newArr , arr ) } return newArr ; }
public void truckCamera ( float size ) { moveToPosition ( - ( float ) ( targetXoff + ( size * Math . sin ( Math . toRadians ( zrot - NUM00 ) ) ) ) , - ( float ) ( targetYoff + ( size * Math . cos ( Math . toRadians ( zrot - NUM00 ) ) ) ) ) ; }
public static $F96 decode2 ( String encoded ) { $F1338 ( encoded ) $F7782 ( base64Data , encoded ) int len = removeWhiteSpace ( base64Data ) ; if ( len % FOURBYTE != NUM00 ) $F1337 int numberQuadruple = ( len / FOURBYTE ) ; if ( numberQuadruple == NUM00 ) $F42429 byte decodedData [ ] = null ; byte b1 = NUM00 , b2 = NUM00 , b3 = NUM00 , b4 = NUM00 ; char d1 = NUM00 , d2 = NUM00 , d3 = NUM00 , d4 = NUM00 ; int i = NUM00 ; int encodedIndex = NUM00 ; int dataIndex = NUM00 ; decodedData = new byte [ ( numberQuadruple ) * NUM00 ] ; for ( ; i < numberQuadruple - NUM00 ; i ++ ) { if ( ! isData ( ( d1 = base64Data [ dataIndex ++ ] ) ) || ! isData ( ( d2 = base64Data [ dataIndex ++ ] ) ) || ! isData ( ( d3 = base64Data [ dataIndex ++ ] ) ) || ! isData ( ( d4 = base64Data [ dataIndex ++ ] ) ) ) $F1337 b1 = base64Alphabet [ d1 ] ; b2 = base64Alphabet [ d2 ] ; b3 = base64Alphabet [ d3 ] ; b4 = base64Alphabet [ d4 ] ; $F112574 ( decodedData , encodedIndex , b1 , b2 ) decodedData [ encodedIndex ++ ] = ( byte ) ( $F74254 ( b2 ) | $F11787 ( b3 ) ) ; decodedData [ encodedIndex ++ ] = $F112580 ( b3 , b4 ) ; } if ( ! isData ( ( d1 = base64Data [ dataIndex ++ ] ) ) || ! isData ( ( d2 = base64Data [ dataIndex ++ ] ) ) ) $F1337 b1 = base64Alphabet [ d1 ] ; b2 = base64Alphabet [ d2 ] ; d3 = base64Data [ dataIndex ++ ] ; d4 = base64Data [ dataIndex ++ ] ; if ( ! isData ( ( d3 ) ) || ! isData ( ( d4 ) ) ) { if $F95788 ( isPad , d3 , d4 ) { if $F69047 ( b2 ) $F1337 $F112594 ( tmp , i ) $F112596 ( System , decodedData , tmp , i ) tmp [ encodedIndex ] = ( byte ) ( b1 < < NUM00 | b2 > > NUM00 ) ; return tmp ; } else if ( ! isPad ( d3 ) && isPad ( d4 ) ) { b3 = base64Alphabet [ d3 ] ; if $F69047 ( b3 ) $F1337 $F112594 ( tmp , i ) $F112596 ( System , decodedData , tmp , i ) $F112574 ( tmp , encodedIndex , b1 , b2 ) tmp [ encodedIndex ] = ( byte ) ( $F74254 ( b2 ) | $F11787 ( b3 ) ) ; return tmp ; } else $F1337 } else { b3 = base64Alphabet [ d3 ] ; b4 = base64Alphabet [ d4 ] ; $F112574 ( decodedData , encodedIndex , b1 , b2 ) decodedData [ encodedIndex ++ ] = ( byte ) ( $F74254 ( b2 ) | $F11787 ( b3 ) ) ; decodedData [ encodedIndex ++ ] = $F112580 ( b3 , b4 ) ; } return decodedData ; }
public void shutdown $F72 $F79149 ( scheduledExecutorService )
public Builder clear $F72 $F68437 ( localeBuilder , this )
public static String deflate ( String previous , String current ) { $F397 ( previous , current ) $F83 ( buf ) int start1 = NUM00 ; int start2 = NUM00 ; while ( start1 < previous . length ( ) && start2 < current . length ( ) ) { int end1 = start1 ; int end2 = start2 ; while ( end1 <= previous . length ( ) && end2 <= current . length ( ) ) { int c1 = ( end1 < previous . length ( ) ? previous . charAt ( end1 ) : NUM00 ) ; int c2 = ( end2 < current . length ( ) ? current . charAt ( end2 ) : NUM00 ) ; if ( c1 == c2 ) { if ( c1 == NUM00 ) $F257374 ( buf ) else $F1097 ( end1 , end2 ) } else { while ( end1 < previous . length ( ) && previous . charAt ( end1 ) != NUM00 ) { end1 ++ ; } while ( end2 < current . length ( ) && current . charAt ( end2 ) != NUM00 ) { end2 ++ ; } for ( int i = start2 ; i < end2 ; i ++ ) $F4137 ( buf , current , i ) $F597 } } start1 = end1 + NUM00 ; start2 = end2 + NUM00 ; if $F7007 ( start2 , current ) $F84 ( buf ) } $F92 ( buf ) }
protected int splitListIndex ( List < Pair $F434536 > S ) { return $F74216 ( S ) ; }
$F36345 ( tag , msg , args , sLevel , LEVEL_ERROR , String , Log )
public static synchronized void addPropertyChangeListener ( PropertyChangeListener l ) $F2202 ( listeners , l )
private static void cleanDirectory ( File path ) { $F8249 ( path ) if $F3428 ( path ) { for ( $F3445 ( f , path ) ) { if $F3444 ( f ) cleanDirectory ( f ) ; $F1900 ( f ) } } }
private GridCacheVersion minVersion ( Iterable < IgniteTxEntry > entries , GridCacheVersion min , IgniteInternalTx tx ) { for ( IgniteTxEntry txEntry : entries ) { GridCacheEntryEx cached = txEntry . cached ( ) ; assert txEntry . isRead ( ) || ! cached . obsolete ( tx . xidVersion ( ) ) : NUM00 + cached + NUM00 + tx + NUM00 ; for ( GridCacheMvccCandidate cand : cached . remoteMvccSnapshot ( ) ) if ( min == null || cand . version ( ) . isLess ( min ) ) min = cand . version ( ) ; } return min ; }
public DimensionedScalar ( String fieldValue ) throws IllegalArgumentException { super ( NUM00 , NUM00 ) ; $F275 ( matcher , PATTERN , fieldValue ) if $F281 ( matcher ) { $F283 ( name , matcher ) $F283 ( dimensions , matcher ) $F283 ( value , matcher ) setName ( name ) ; setValue ( value ) ; this . dimensions = new Dimensions ( dimensions ) ; } else { throw new DictionaryException ( NUM00 + fieldValue + NUM00 ) ; } }
public void characters $F62353 ( start , length ) throws SAXException $F92922 ( m_valueBuffer , ch , start , length )
protected double computeStdDev ( Instance inst , Matrix k ) throws Exception { double kappa = m_kernel . eval ( - NUM00 , - NUM00 , inst ) + m_deltaSquared ; double s = NUM00 ; int n = m_L . length ; for ( $F119 ( i , n ) ) { double t = NUM00 ; for ( $F119 ( j , n ) ) { t -= k . get ( j , NUM00 ) * ( i > j ? m_L [ i ] [ j ] : m_L [ j ] [ i ] ) ; } s += t * k . get ( i , NUM00 ) ; } double sigma = m_delta ; if ( kappa > s ) { sigma = Math . sqrt ( kappa - s ) ; } return sigma ; }
protected void initialize ( Properties p ) $F845
public void add ( int index , int element ) { checkRangeIncludingEndpoint ( index ) ; ensureCapacity ( size + NUM00 ) ; int numtomove = size - index ; $F63676 ( System , array , index , numtomove ) array [ index ] = element ; size ++ ; }
public MultiplexManager ( DataStore ... dataStores ) { $F37437 ( this , Arrays , dataStores ) }
public boolean matchesRawNamePattern ( Object item ) { String prefix = patternMatcher . getPattern ( ) ; String text = getElementName ( item ) ; $F397 ( text , _BOOL ) $F1749 ( textLength , text ) $F1749 ( prefixLength , prefix ) $F88060 ( textLength , prefixLength , _BOOL ) for ( $F18298 ( i , prefixLength ) ) { if ( $F954 ( Character , prefix , i ) != $F954 ( Character , text , i ) ) return _BOOL ; } return _BOOL ; }
public static $F2304 $F4203 T valueOrDefault ( $F5466 T value , $F2304 T defaultValue ) { return value == null ? defaultValue : value ; }
protected abstract int compareToLastMsg ( Pair $F9340 tupleKeyValue , Pair < $F96 , $F96 > lastReceivedKeyValue ) ;
public void paintComponent ( Graphics g ) { $F37616 ( g , track ) $F317 ( g2d , g ) $F26898 ( g2d , carPosition ) g2d . rotate ( Math . toRadians ( carRotation ) ) ; g2d . translate ( - ( carPosition . x ) , - ( carPosition . y ) ) ; g2d . drawImage ( car , carPosition . x - carWHalf , carPosition . y - carHHalf , null ) ; }
public static $F80742 toSqlTime ( String time ) { $F22273 newDate = toDate ( NUM00 , time ) ; if ( newDate != null ) { return new $F80742 $F16810 ( newDate ) ; } else $F1337 }
private void parseMenu ( XmlPullParser parser , AttributeSet attrs , SublimeMenu menu ) throws $F18821 { MenuState menuState = new MenuState ( menu ) ; int eventType = parser . getEventType ( ) ; String tagName ; boolean lookingForEndOfUnknownTag = _BOOL ; String unknownTagName = null ; do { if ( eventType == XmlPullParser . START_TAG ) { $F32928 ( tagName , parser ) if $F1238 ( tagName , XML_MENU ) { $F45366 ( eventType , parser ) $F597 } $F1665 ( tagName ) } $F45366 ( eventType , parser ) } while ( eventType != XmlPullParser . END_DOCUMENT ) ; boolean reachedEndOfMenu = _BOOL ; while ( ! reachedEndOfMenu ) { switch ( eventType ) { case XmlPullParser . START_TAG : $F30711 ( lookingForEndOfUnknownTag ) $F32928 ( tagName , parser ) if $F1238 ( tagName , XML_GROUP ) { if ( menuState . groupId != MenuState . defaultGroupId ) $F202944 menuState . readGroup ( attrs ) ; menuState . addGroup ( ) ; } else if ( $F133966 ( tagName , XML_TEXT , XML_TEXT_WITH_BADGE , XML_CHECKBOX ) || tagName . equals ( XML_SWITCH ) ) { menuState . readMenuItem ( attrs , tagName ) ; } else if $F1238 ( tagName , XML_SEPARATOR ) { menuState . readMenuItem ( attrs , tagName ) ; } else if $F1238 ( tagName , XML_GROUP_HEADER ) { if ( menuState . groupId == MenuState . defaultGroupId ) $F202944 menuState . readMenuItem ( attrs , tagName ) ; } else if $F1238 ( tagName , XML_MENU ) { throw new RuntimeException $F76899 ; } else { lookingForEndOfUnknownTag = _BOOL ; unknownTagName = tagName ; } $F597 case XmlPullParser . END_TAG : $F32928 ( tagName , parser ) if ( lookingForEndOfUnknownTag && tagName . equals ( unknownTagName ) ) { lookingForEndOfUnknownTag = _BOOL ; unknownTagName = null ; } else if $F1238 ( tagName , XML_GROUP ) { if ( menuState . isGroupCollapsible ( ) && menuState . groupHeadersAdded != NUM00 ) { if ( menuState . groupHeadersAdded < NUM00 ) $F202944 else { throw new RuntimeException ( NUM00 + NUM00 + menuState . groupHeadersAdded + NUM00 ) ; } } menuState . resetGroup ( ) ; } else if ( $F133966 ( tagName , XML_TEXT , XML_TEXT_WITH_BADGE , XML_CHECKBOX ) || tagName . equals ( XML_SWITCH ) || tagName . equals ( XML_GROUP_HEADER ) || tagName . equals ( XML_SEPARATOR ) ) { if ( ! menuState . hasAddedItem ( ) ) { menuState . addItem ( ) ; } } else $F67935 ( tagName , XML_MENU , reachedEndOfMenu , _BOOL ) $F597 case XmlPullParser . END_DOCUMENT : $F11388 } $F45366 ( eventType , parser ) } }
public static double crossTrackDistanceRad $F130908 ( lat1 , lon1 , lat2 , lon2 , latQ , lonQ ) { final double dlon12 = lon2 - lon1 ; final double dlon1Q = lonQ - lon1 ; final double dlat1Q = latQ - lat1 ; final double clat1 = Math . cos ( lat1 ) , slat1 = MathUtil . cosToSin ( lat1 , clat1 ) ; final double clatQ = Math . cos ( latQ ) , slatQ = MathUtil . cosToSin ( latQ , clatQ ) ; final double clat2 = Math . cos ( lat2 ) , slat2 = MathUtil . cosToSin ( lat2 , clat2 ) ; final double slat = Math . sin ( dlat1Q * NUM00 ) ; final double slon = Math . sin ( dlon1Q * NUM00 ) ; final double a = slat * slat + slon * slon * clat1 * clatQ ; final double angDist1Q = $F46328 ( Math , a ) ; final double sdlon12 = Math . sin ( dlon12 ) , cdlon12 = MathUtil . sinToCos ( dlon12 , sdlon12 ) ; final double sdlon1Q = Math . sin ( dlon1Q ) , cdlon1Q = MathUtil . sinToCos ( dlon1Q , sdlon1Q ) ; final double yE = sdlon12 * clat2 ; final double yQ = sdlon1Q * clatQ ; final double xE = clat1 * slat2 - slat1 * clat2 * cdlon12 ; final double xQ = clat1 * slatQ - slat1 * clatQ * cdlon1Q ; final double crs12 = Math . atan2 ( yE , xE ) ; final double crs1Q = Math . atan2 ( yQ , xQ ) ; return Math . asin ( Math . sin ( angDist1Q ) * Math . sin ( crs1Q - crs12 ) ) ; }
public String chooseServerAlias ( String keyType , Principal [ ] issuers , Socket socket ) { return defaultX509KM . chooseServerAlias ( keyType , issuers , socket ) ; }
public static double pdf $F12359 ( x , shape , scale , factor ) { if ( x <= NUM00 ) $F1082 final double a = Math . exp ( shape * Math . log ( scale ) - ( shape + NUM00 ) * Math . log ( x ) - ( scale / x ) - GammaFunction . lnGamma ( shape ) ) ; return factor * a ; }
public String charge $F83882 ( ctx , WindowNo , mTab , mField , value ) { $F179073 ( C_Charge_ID , value ) if ( C_Charge_ID == null || $F179074 ( C_Charge_ID ) ) $F1278 String sql = NUM00 ; PreparedStatement pstmt = null ; ResultSet rs = null ; try { $F47577 ( pstmt , DB , sql ) $F179090 ( pstmt , C_Charge_ID ) $F47578 ( rs , pstmt ) if $F1682 ( rs ) { mTab . setValue ( NUM00 , rs . getBigDecimal ( NUM00 ) ) ; } } catch ( SQLException e ) { $F62 ( log , Level , sql , e ) $F179099 ( e ) } $F47585 ( DB , rs , pstmt ) return tax ( ctx , WindowNo , mTab , mField , value ) ; }
protected Array < Actor > parse $F72 { actors = GdxArrays . newArray ( Actor . class ) ; invokePreListeners ( actors ) ; $F1121 ( builder ) while ( templateReader . hasNextCharacter ( ) ) { final char character = templateReader . nextCharacter ( ) ; if ( character == syntax . getArgumentOpening ( ) ) $F5795 ( processArgument ) else if ( character == syntax . getTagOpening ( ) ) { if ( isNextCharacterCommentOpening ( ) ) { processComment ( ) ; $F598 } if ( currentParentTag != null ) { currentParentTag . handleDataBetweenTags ( builder ) ; } Strings . clearBuilder ( builder ) ; processTag ( builder ) ; } else $F288 ( builder , character ) } if ( currentParentTag != null ) { throwError ( NUM00 + currentParentTag . getTagName ( ) + NUM00 ) ; } invokePortListeners ( actors ) ; return actors ; }
public void testABandCBbrokerNetwork $F72 throws Exception { bridgeBrokers ( NUM00 , NUM00 ) ; bridgeBrokers ( NUM00 , NUM00 ) ; startAllBrokers ( ) ; Destination dest = createDestination ( NUM00 , _BOOL ) ; MessageConsumer clientA = createConsumer ( NUM00 , dest ) ; MessageConsumer clientB = createConsumer ( NUM00 , dest ) ; MessageConsumer clientC = createConsumer ( NUM00 , dest ) ; $F9470 ( Thread ) sendMessages ( NUM00 , dest , MESSAGE_COUNT ) ; sendMessages ( NUM00 , dest , MESSAGE_COUNT ) ; sendMessages ( NUM00 , dest , MESSAGE_COUNT ) ; MessageIdList msgsA = getConsumerMessages ( NUM00 , clientA ) ; MessageIdList msgsB = getConsumerMessages ( NUM00 , clientB ) ; MessageIdList msgsC = getConsumerMessages ( NUM00 , clientC ) ; msgsA . waitForMessagesToArrive ( MESSAGE_COUNT ) ; $F394993 ( msgsB , MESSAGE_COUNT ) msgsC . waitForMessagesToArrive ( MESSAGE_COUNT ) ; $F165310 ( assertEquals , MESSAGE_COUNT , msgsA ) $F394996 ( assertEquals , MESSAGE_COUNT , msgsB ) $F165310 ( assertEquals , MESSAGE_COUNT , msgsC ) }
public void flush $F72 throws IOException { WspUtil . writeUint8 ( os_ , NUM00 ) ; writePublicIdentifier ( os_ , publicID_ ) ; WspUtil . writeUintvar ( os_ , WapConstants . MIB_ENUM_UTF_8 ) ; writeStringTable ( os_ ) ; $F59 ( wbxmlBody_ ) wbxmlBody_ . writeTo ( os_ ) ; $F1206 ( os_ ) }
public static void discard $F72 $F38599 ( current )
private Token toASIToken ( ILeafNode leaf ) { if ( leaf . isHidden ( ) ) $F4915 ( newSemicolonToken , leaf ) else { if $F87568 ( leafNodes ) { int tokenType = tokenTypeMapper . getInternalTokenType ( leaf ) ; int semicolonTokenType = tokenTypeMapper . getInternalTokenType ( semicolon ) ; if ( tokenType == semicolonTokenType ) { return new CommonToken ( semicolonTokenType , leaf . getText ( ) ) ; } if ( leaf . getTotalEndOffset ( ) == endOffset ) { leafNodes = Iterators . emptyIterator ( ) ; return new CommonToken ( tokenType , leaf . getText ( ) ) ; } next = new CommonToken ( semicolonTokenType , leaf . getText ( ) ) ; return new CommonToken ( tokenType , leaf . getText ( ) ) ; } else if ( leaf . getGrammarElement ( ) == rightCurlyInBlock || leaf . getGrammarElement ( ) == rightCurlyInArrowExpression ) { int tokenType = tokenTypeMapper . getInternalTokenType ( leaf ) ; next = new CommonToken ( tokenType ) ; return new CommonToken ( tokenTypeMapper . getInternalTokenType ( semicolon ) , leaf . getText ( ) ) ; } else $F4915 ( newSemicolonToken , leaf ) } }
$F1 public PacketBuffer write ( PacketBuffer buf ) { $F22620 ( values ) return buf ; }
public final void registerFileType ( $F1113 FileType type , $F157772 $F5466 String ... defaultAssociatedExtensions ) { List < FileNameMatcher > matchers = new ArrayList < FileNameMatcher > $F72 ; if ( defaultAssociatedExtensions != null ) { for ( String extension : defaultAssociatedExtensions ) { matchers . add ( new ExtensionFileNameMatcher ( extension ) ) ; } } registerFileType ( type , matchers ) ; }
public int parseInt ( String localeFormattedInteger ) $F75349 ( Integer , localeFormattedInteger )
public static RequestSecurityTokenResponse parseXML ( String xml ) throws WSFederationException { Document doc = XMLUtils . toDOMDocument ( xml , debug ) ; $F9029 ( root , doc ) return new RequestSecurityTokenResponse ( root ) ; }
$F1 public void requestResources ( SamzaResourceRequest resourceRequest ) { final int DEFAULT_PRIORITY = NUM00 ; log . info ( NUM00 + resourceRequest . getPreferredHost ( ) + NUM00 + resourceRequest . getContainerID ( ) ) ; int memoryMb = resourceRequest . getMemoryMB ( ) ; int cpuCores = resourceRequest . getNumCores ( ) ; String containerLabel = yarnConfig . getContainerLabel ( ) ; String preferredHost = resourceRequest . getPreferredHost ( ) ; Resource capability = Resource . newInstance ( memoryMb , cpuCores ) ; $F2237 ( priority , Priority , DEFAULT_PRIORITY ) AMRMClient . ContainerRequest issuedRequest ; if $F3057 ( preferredHost ) { $F556 ( log , preferredHost ) issuedRequest = new AMRMClient . ContainerRequest ( capability , null , null , priority , _BOOL , containerLabel ) ; } else { $F556 ( log , preferredHost ) issuedRequest = new AMRMClient . ContainerRequest ( capability , $F8640 ( preferredHost ) , null , priority , _BOOL , containerLabel ) ; } synchronized ( lock ) { requestsMap . put ( resourceRequest , issuedRequest ) ; amClient . addContainerRequest ( issuedRequest ) ; } }
private Collection < ExtractedItemsCollection > filterItemsByLevel ( Player player , List < ExtractedItemsCollection > itemsCollections ) { int playerLevel = player . getLevel ( ) ; Collection < ExtractedItemsCollection > result = new ArrayList < ExtractedItemsCollection > $F72 ; for ( ExtractedItemsCollection collection : itemsCollections ) { if ( collection . getMinLevel ( ) > playerLevel ) $F1448 if ( collection . getMaxLevel ( ) > NUM00 && collection . getMaxLevel ( ) < playerLevel ) $F1448 result . add ( collection ) ; } return result ; }
private String printDFormat ( String sx ) { int nLeadingZeros = NUM00 ; int nBlanks = NUM00 , n = NUM00 ; int i = NUM00 ; final int jFirst ; final boolean neg = $F4431 ( sx ) ; if ( sx . equals ( NUM00 ) && precisionSet && precision == NUM00 ) { sx = NUM00 ; } if ( ! neg ) { if ( precisionSet && sx . length ( ) < precision ) { nLeadingZeros = precision - sx . length ( ) ; } } else { if ( precisionSet && $F45793 ( sx ) < precision ) { nLeadingZeros = precision - sx . length ( ) + NUM00 ; } } $F17370 ( nLeadingZeros ) if ( fieldWidthSet ) { nBlanks = fieldWidth - nLeadingZeros - sx . length ( ) ; if ( ! neg && ( leadingSign || leadingSpace ) ) { nBlanks -- ; } } $F17370 ( nBlanks ) if ( leadingSign ) { n ++ ; } else $F19814 ( leadingSpace , n ) n += nBlanks ; n += nLeadingZeros ; $F90433 ( n , sx ) final $F1469 ca = new char [ n ] ; if ( leftJustify ) { if ( neg ) { ca [ i ++ ] = NUM00 ; } else if ( leadingSign ) { ca [ i ++ ] = NUM00 ; } else if ( leadingSpace ) { ca [ i ++ ] = NUM00 ; } $F9609 ( csx , sx ) jFirst = neg ? NUM00 : NUM00 ; for ( $F259650 ( j , nLeadingZeros , i ) ) $F114344 ( ca , i ) for ( int j = jFirst ; j < csx . length ; j ++ , i ++ ) $F20651 ( ca , i , csx , j ) for ( $F259650 ( j , nBlanks , i ) ) $F114344 ( ca , i ) } else { if ( ! leadingZeros ) { for ( i = NUM00 ; i < nBlanks ; i ++ ) $F114344 ( ca , i ) if ( neg ) { ca [ i ++ ] = NUM00 ; } else if ( leadingSign ) { ca [ i ++ ] = NUM00 ; } else if ( leadingSpace ) { ca [ i ++ ] = NUM00 ; } } else { if ( neg ) { ca [ i ++ ] = NUM00 ; } else if ( leadingSign ) { ca [ i ++ ] = NUM00 ; } else if ( leadingSpace ) { ca [ i ++ ] = NUM00 ; } $F398596 ( j , nBlanks , i , ca ) } $F398596 ( j , nLeadingZeros , i , ca ) $F9609 ( csx , sx ) jFirst = neg ? NUM00 : NUM00 ; for ( int j = jFirst ; j < csx . length ; j ++ , i ++ ) $F20651 ( ca , i , csx , j ) } $F22269 ( ca ) }
private void drawHost ( Graphics2D g2 ) { Coord loc = node . getLocation ( ) ; if ( drawCoverage && node . isRadioActive ( ) ) { ArrayList $F149690 interfaces = new ArrayList $F149690 $F72 ; interfaces . addAll ( node . getInterfaces ( ) ) ; for ( NetworkInterface ni : interfaces ) { double range = ni . getTransmitRange ( ) ; $F35359 coverage ; coverage = new $F35359 ( scale ( loc . getX ( ) - range ) , scale ( loc . getY ( ) - range ) , scale ( range * NUM00 ) , scale ( range * NUM00 ) ) ; g2 . setColor ( rangeColor ) ; g2 . draw ( coverage ) ; } } if ( drawConnections ) { g2 . setColor ( conColor ) ; Coord c1 = node . getLocation ( ) ; $F279444 conList = new $F279444 $F72 ; conList . addAll ( node . getConnections ( ) ) ; for ( Connection c : conList ) { DTNHost otherNode = c . getOtherNode ( node ) ; Coord c2 ; $F4322 ( otherNode ) c2 = otherNode . getLocation ( ) ; g2 . drawLine ( $F59993 ( scale , c1 ) , $F177702 ( scale , c1 ) , $F59993 ( scale , c2 ) , $F177702 ( scale , c2 ) ) ; } } g2 . setColor ( hostColor ) ; g2 . drawRect ( scale ( loc . getX ( ) - NUM00 ) , scale ( loc . getY ( ) - NUM00 ) , scale ( NUM00 ) , scale ( NUM00 ) ) ; if ( isHighlighted ( ) ) { g2 . setColor ( highlightedNodeColor ) ; g2 . fillRect ( $F59993 ( scale , loc ) - NUM00 , $F177702 ( scale , loc ) - NUM00 , NUM00 , NUM00 ) ; } if ( drawNodeName ) { g2 . setColor ( hostNameColor ) ; g2 . drawString ( node . toString ( ) , $F59993 ( scale , loc ) , $F177702 ( scale , loc ) ) ; } }
public static int binarySearchFloor ( $F2469 a , long key , boolean inclusive , boolean stayInBounds ) { $F8533 ( index , Arrays , a , key ) index = index < NUM00 ? - ( index + NUM00 ) : ( inclusive ? index : ( index - NUM00 ) ) ; return stayInBounds ? Math . max ( NUM00 , index ) : index ; }
public boolean add ( symbol sym ) throws internal_error { Object previous ; not_null ( sym ) ; previous = _all . put ( sym . name ( ) , sym ) ; return previous == null ; }
$F31396 ( str , retval , ch , i , s , Integer )
public final int size $F72 { if ( GWT . isScript ( ) ) $F1652 ( jsArray ) else $F1652 ( javaArray ) }
public boolean intersects ( final PlanetModel planetModel , final Plane q , final $F316817 notablePoints , final $F316817 moreNotablePoints , final Membership [ ] bounds , final Membership ... moreBounds ) { if ( isNumericallyIdentical ( q ) ) { for ( GeoPoint p : notablePoints ) { $F24922 ( meetsAllBounds , p , bounds , moreBounds , _BOOL ) } for ( GeoPoint p : moreNotablePoints ) { $F24922 ( meetsAllBounds , p , bounds , moreBounds , _BOOL ) } return _BOOL ; } $F140850 ( lineVectorX , y , q , z ) $F140850 ( lineVectorY , z , q , x ) $F140850 ( lineVectorZ , x , q , y ) if ( $F140851 ( Math , lineVectorX , MINIMUM_RESOLUTION , lineVectorY ) && Math . abs ( lineVectorZ ) < MINIMUM_RESOLUTION ) { return _BOOL ; } double x0 ; double y0 ; double z0 ; final double denomYZ = this . y * q . z - this . z * q . y ; final double denomXZ = this . x * q . z - this . z * q . x ; final double denomXY = this . x * q . y - this . y * q . x ; if ( $F140867 ( Math , denomYZ , denomXZ ) && $F140867 ( Math , denomYZ , denomXY ) ) { if $F7637 ( Math , denomYZ , MINIMUM_RESOLUTION_SQUARED ) { return _BOOL ; } final double denom = NUM00 / denomYZ ; x0 = NUM00 ; y0 = ( - this . D * q . z - this . z * - q . D ) * denom ; z0 = ( this . y * - q . D + this . D * q . y ) * denom ; } else if ( $F140867 ( Math , denomXZ , denomXY ) && $F140867 ( Math , denomXZ , denomYZ ) ) { if $F7637 ( Math , denomXZ , MINIMUM_RESOLUTION_SQUARED ) { return _BOOL ; } final double denom = NUM00 / denomXZ ; x0 = ( - this . D * q . z - this . z * - q . D ) * denom ; y0 = NUM00 ; z0 = ( this . x * - q . D + this . D * q . x ) * denom ; } else { if $F7637 ( Math , denomXY , MINIMUM_RESOLUTION_SQUARED ) { return _BOOL ; } final double denom = NUM00 / denomXY ; x0 = ( - this . D * q . y - this . y * - q . D ) * denom ; y0 = ( this . x * - q . D + this . D * q . x ) * denom ; z0 = NUM00 ; } final double A = lineVectorX * lineVectorX * planetModel . inverseAbSquared + lineVectorY * lineVectorY * planetModel . inverseAbSquared + lineVectorZ * lineVectorZ * planetModel . inverseCSquared ; final double B = NUM00 * ( lineVectorX * x0 * planetModel . inverseAbSquared + lineVectorY * y0 * planetModel . inverseAbSquared + lineVectorZ * z0 * planetModel . inverseCSquared ) ; final double C = x0 * x0 * planetModel . inverseAbSquared + y0 * y0 * planetModel . inverseAbSquared + z0 * z0 * planetModel . inverseCSquared - NUM00 ; final double BsquaredMinus = B * B - NUM00 * A * C ; if $F7637 ( Math , BsquaredMinus , MINIMUM_RESOLUTION_SQUARED ) { final double inverse2A = NUM00 / ( NUM00 * A ) ; final double t = - B * inverse2A ; final double pointX = lineVectorX * t + x0 ; final double pointY = lineVectorY * t + y0 ; final double pointZ = lineVectorZ * t + z0 ; for ( final Membership bound : bounds ) { if $F416704 ( bound , pointX , pointY , pointZ ) { return _BOOL ; } } for ( final Membership bound : moreBounds ) { if $F416704 ( bound , pointX , pointY , pointZ ) { return _BOOL ; } } return _BOOL ; } else if ( BsquaredMinus > NUM00 ) { final double inverse2A = NUM00 / ( NUM00 * A ) ; final double sqrtTerm = Math . sqrt ( BsquaredMinus ) ; final double t1 = ( - B + sqrtTerm ) * inverse2A ; final double t2 = ( - B - sqrtTerm ) * inverse2A ; final double point1X = lineVectorX * t1 + x0 ; final double point1Y = lineVectorY * t1 + y0 ; final double point1Z = lineVectorZ * t1 + z0 ; boolean point1Valid = _BOOL ; for ( final Membership bound : bounds ) { if $F416704 ( bound , point1X , point1Y , point1Z ) $F3468 ( point1Valid , _BOOL ) } if ( point1Valid ) { for ( final Membership bound : moreBounds ) { if $F416704 ( bound , point1X , point1Y , point1Z ) $F3468 ( point1Valid , _BOOL ) } } $F9303 ( point1Valid , _BOOL ) final double point2X = lineVectorX * t2 + x0 ; final double point2Y = lineVectorY * t2 + y0 ; final double point2Z = lineVectorZ * t2 + z0 ; for ( final Membership bound : bounds ) { if $F416704 ( bound , point2X , point2Y , point2Z ) { return _BOOL ; } } for ( final Membership bound : moreBounds ) { if $F416704 ( bound , point2X , point2Y , point2Z ) { return _BOOL ; } } return _BOOL ; } else { return _BOOL ; } }
public static long longFromBase64 ( String value ) { int pos = NUM00 ; long longVal = base64Values [ value . charAt ( pos ++ ) ] ; $F1749 ( len , value ) while ( pos < len ) { longVal <<= NUM00 ; longVal |= base64Values [ value . charAt ( pos ++ ) ] ; } return longVal ; }
public List $F136545 bottom ( int n ) { List $F136545 $F204 ( bottom ) ; $F2027 values = data . toIntArray ( ) ; IntArrays . parallelQuickSort ( values ) ; for ( int i = NUM00 ; i < n && i < values . length ; i ++ ) { bottom . add ( PackedLocalTime . asLocalTime ( values [ i ] ) ) ; } return bottom ; }
public double SumOutlinkAuthorityScore ( Page page ) { $F3803 outLinks = page . getOutlinks ( ) ; double authScore = NUM00 ; for ( $F2277 ( i , outLinks ) ) { Page outLink = $F67701 ( pTable , outLinks , i ) ; if ( outLink != null ) { authScore += outLink . authority ; } } return authScore ; }
public synchronized void end $F72 { $F59 ( graphicsToBeDrawn ) $F13324 ( currentGraphics , graphicsDrawn ) graphicsDrawn . closeWhenEmpty ( ) ; if $F34687 ( printerJobThread ) { try $F45915 ( printerJobThread ) $F887 } }
public List < FileStatus > browse ( String filePath ) throws Exception { $F21448 ( LOG , filePath , hdfsEndPoint ) FileSystem hdfsFileSystem = null ; FileStatus [ ] listStatus ; try { Configuration config = createConfig ( ) ; hdfsFileSystem = getFileSystem ( config ) ; $F424 ( path , filePath ) listStatus = hdfsFileSystem . listStatus ( path ) ; } catch ( Exception ex ) { LOG . error ( NUM00 + filePath , ex . getMessage ( ) ) ; throw new Exception $F16296 ( ex ) ; } $F48674 ( hdfsFileSystem ) $F26323 ( Arrays , listStatus ) }
public void append ( CharSequence s ) $F288 ( text , s )
public EipModelWizardInitialObjectCreationPage ( String pageId ) { super ( pageId ) ; }
private void unwrapData $F72 throws $F5690 { $F51622 ( log ) $F14257 ( inNetBuf ) SSLEngineResult res = unwrap0 ( ) ; $F116630 ( inNetBuf ) checkStatus ( res ) ; renegotiateIfNeeded ( res ) ; }
public boolean isAttributeSpecified ( int attributeHandle ) { int type = getNodeType ( attributeHandle ) ; if ( DTM . ATTRIBUTE_NODE == type ) { Attr attr = ( Attr ) getNode ( attributeHandle ) ; return attr . getSpecified ( ) ; } return _BOOL ; }
private static void checkPermission $F72 throws SecurityException { $F8108 ( sm , System ) if ( sm != null ) { sm . checkPermission ( new JodaTimePermission $F580 ) ; } }
private void storePassword ( String password ) { if ( isStore && sharedState != null ) { sharedState . put ( getPwdKey ( ) , password ) ; } }
$F1322 ( criteria , oredCriteria )
void deleteChild ( PolicyNode childNode ) { $F4640 ( isImmutable ) mChildren . remove ( childNode ) ; }
$F32569 ( panel , cols , rows , filler , filled_cell_11 , _BOOL , cc , Box , index )
public void testFloatValuePlusZero $F72 { String a = NUM00 ; $F12208 ( aNumber , a ) int zero = NUM00 ; float result = aNumber . floatValue ( ) ; assertTrue ( NUM00 , Float . floatToIntBits ( result ) == zero ) ; }
public ExternalProcessResult awaitTerminationAndResult ( int timeoutMs , boolean destroyOnError ) throws InterruptedException , TimeoutException , OperationCancellation , IOException { awaitTermination ( timeoutMs , destroyOnError ) ; return new ExternalProcessResult ( process . exitValue ( ) , getStdOutBytes ( ) , getStdErrBytes ( ) ) ; }
public void refreshInheritedMethods ( Set modifiedSuperExpandos ) { for ( $F2774 ( i , modifiedSuperExpandos ) ) { ExpandoMetaClass superExpando = ( ExpandoMetaClass ) i . next ( ) ; if ( superExpando != this ) { refreshInheritedMethods ( superExpando ) ; } } }
public static List < Fragment > parsePlaceholder ( String parseString ) throws PlaceholderParseException { List < Fragment > result = new ArrayList < Fragment > $F72 ; int currOutputIndex = NUM00 ; int currSearchIndex = NUM00 ; while ( _BOOL ) { if $F9615 ( currSearchIndex , parseString ) $F5153 $F12712 ( startIndex , parseString , currSearchIndex ) if ( startIndex == - NUM00 ) { if $F7007 ( currOutputIndex , parseString ) { String $F465724 ( endString , parseString , currOutputIndex ) ; TextFragment textFragment = new TextFragment ( endString ) ; result . add ( textFragment ) ; } $F597 } if ( startIndex > NUM00 ) { $F12715 ( textSoFar , parseString , currOutputIndex , startIndex ) if $F35625 ( textSoFar ) { result . add ( new TextFragment ( textSoFar ) ) ; } } if ( ( startIndex > NUM00 ) && $F198486 ( parseString , startIndex ) ) { currOutputIndex = startIndex + NUM00 ; currSearchIndex = startIndex + NUM00 ; $F598 } $F12712 ( endIndex , parseString , startIndex ) if ( endIndex == - NUM00 ) { throw new PlaceholderParseException ( NUM00 + $F83851 ( parseString , startIndex ) + NUM00 ) ; } $F129846 ( between , parseString , startIndex , endIndex ) ParameterFragment parameterFragment = new ParameterFragment ( between ) ; result . add ( parameterFragment ) ; currOutputIndex = endIndex + NUM00 ; currSearchIndex = endIndex ; } LinkedList < Fragment > fragments = new LinkedList < Fragment > $F72 ; $F56021 ( fragments , result ) for ( $F2277 ( i , result ) ) { Fragment fragment = result . get ( i ) ; if ( ! ( result . get ( i ) instanceof TextFragment ) ) $F196951 ( fragments , fragment ) if ( ! ( fragments . getLast ( ) instanceof TextFragment ) ) $F196951 ( fragments , fragment ) TextFragment textFragment = ( TextFragment ) fragments . getLast ( ) ; fragments . removeLast ( ) ; fragments . add ( new TextFragment ( textFragment . getValue ( ) + fragment . getValue ( ) ) ) ; } return fragments ; }
$F1 protected void failed $F72 { relation . setCanceled ( _BOOL ) ; super . failed ( ) ; }
private void routeSingleGetRequest ( RequestAndResponse requestAndResponse , String uri ) throws $F47978 { if $F3106 ( uri ) { handleHtmlShowNotebooks ( requestAndResponse ) ; } else if $F3106 ( uri ) { handleHtmlShowQuotations ( requestAndResponse ) ; } else if $F3106 ( uri ) { handleHtmlShowSources ( requestAndResponse ) ; } else if $F3106 ( uri ) { handleHtmlShowSource ( requestAndResponse ) ; } else if $F3106 ( uri ) { handleHtmlShowNotebook ( requestAndResponse ) ; } else if $F3106 ( uri ) { handleHtmlSearch ( requestAndResponse ) ; } else if $F3057 ( uri ) { handleHtmlBasicHelp ( requestAndResponse ) ; } else if $F3057 ( uri ) { handleHtmlAdvancedHelp ( requestAndResponse ) ; } else if $F3106 ( uri ) { handleHtmlHelp ( requestAndResponse ) ; } else if $F3057 ( uri ) { handleHtmlUserBackupForm ( requestAndResponse ) ; } else if $F3057 ( uri ) { handleHtmlUserRestoreForm ( requestAndResponse ) ; } else if $F3106 ( uri ) { handleHtmlShowAccount ( requestAndResponse ) ; } else if $F3106 ( uri ) { handleHtmlShowAccounts ( requestAndResponse ) ; } else if $F3057 ( uri ) { handleHtmlShutdownForm ( requestAndResponse ) ; } else if $F3057 ( uri ) { handleHtmlClearForm ( requestAndResponse ) ; } else if $F3057 ( uri ) { handleHtmlOnlineBackupForm ( requestAndResponse ) ; } else if $F3057 ( uri ) { handleHtmlCheckForErrorsForm ( requestAndResponse ) ; } else if $F3057 ( uri ) { handleHtmlShowDBBackups ( requestAndResponse ) ; } else if $F3057 ( uri ) { handleHtmlOfflineDbBackupForm ( requestAndResponse ) ; } else if $F3057 ( uri ) { handleJsonShowEntry ( requestAndResponse ) ; } else if $F3057 ( uri ) { handleJsonShowEntryParent ( requestAndResponse ) ; } else if $F3057 ( uri ) { handleJsonShowEntryChildren ( requestAndResponse ) ; } else if $F3057 ( uri ) { handleJsonSearchNotes ( requestAndResponse ) ; } else if $F3057 ( uri ) { handleHtmlNewNotebookForm ( requestAndResponse ) ; } else if $F3057 ( uri ) { handleHtmlNothing ( requestAndResponse ) ; } else if $F3057 ( uri ) { handleHtmlCouldNotCreateNote ( requestAndResponse ) ; } else if $F3057 ( uri ) { handleHtmlShowRestoreDbBackupCommand ( requestAndResponse ) ; } else if $F3057 ( uri ) { handleHtmlShowSignedOut ( requestAndResponse ) ; } else if $F3106 ( uri ) { handleHtmlChangePassword ( requestAndResponse ) ; } else if $F3106 ( uri ) { handleHtmlChangeAccount ( requestAndResponse ) ; } else if $F3106 ( uri ) { handleHtmlCloseAccount ( requestAndResponse ) ; } else if $F3057 ( uri ) { handleJsonIsSignedIn ( requestAndResponse ) ; } else if $F3057 ( uri ) { handleHtmlUserRestoreFrame ( requestAndResponse ) ; } else { returnHtml404 ( requestAndResponse ) ; } }
private void changeAnnotationDocumentState ( SourceDocument aSourceDocument , User aUser , AnnotationDocumentStateTransition aAnnotationDocumentStateTransition ) { AnnotationDocument annotationDocument = repository . getAnnotationDocument ( aSourceDocument , aUser ) ; annotationDocument . setState ( AnnotationDocumentStateTransition . transition ( aAnnotationDocumentStateTransition ) ) ; try { repository . createAnnotationDocument ( annotationDocument ) ; } catch ( IOException e ) $F22715 ( LOG ) }
boolean removeEdge ( SparseEdge e ) { $F12396 ( removedEdge , edges , e ) boolean removedNeighbour = neighbours . remove ( e . getOpposite ( this ) ) ; if ( removedEdge && removedNeighbour ) return _BOOL ; else if ( ! removedEdge && ! removedNeighbour ) return _BOOL ; else $F11388 }
protected void longKeyPress ( int keyCode ) $F845
public boolean hasDescendant ( Pattern pattern ) { Queue $F280831 nodesToProcess = new LinkedList $F280831 $F72 ; nodesToProcess . add ( this ) ; while $F5973 ( nodesToProcess ) { BNode currentNode = nodesToProcess . poll ( ) ; for ( BNode descendantNode : currentNode . getOutputNodes ( ) ) { Matcher matcher = pattern . matcher ( descendantNode . getId ( ) ) ; $F266906 ( matcher , _BOOL ) $F2201 ( nodesToProcess , descendantNode ) } } return _BOOL ; }
public int fileWrite $F139836 ( handle , buffer , offset , count ) { if ( ( offset | count ) < NUM00 || offset > buffer . length || buffer . length - offset < count ) { throw new ArrayIndexOutOfBoundsException ( $F130320 ( buffer , offset ) + count ) ; } $F14826 ( count ) $F96 data = buffer ; if ( offset > NUM00 ) $F65231 ( data , count , System , buffer , offset ) IntOut bytesWrittenOut = new IntOut $F72 ; try { checkResult ( LibIMobileDevice . afc_file_write ( getRef ( ) , handle , data , count , bytesWrittenOut ) ) ; $F129070 ( bytesWritten , bytesWrittenOut ) return bytesWritten ; } $F105993 ( bytesWrittenOut ) }
private static void generateFiles $F72 { $F806 classNames ; ResourceBundle rules , info ; info = ResourceBundle . getBundle ( NUM00 , new Locale ( language , country , valiant ) , BreakIteratorRBControl . INSTANCE ) ; classNames = info . getStringArray ( NUM00 ) ; rules = ResourceBundle . getBundle ( NUM00 , new Locale ( language , country , valiant ) , BreakIteratorRBControl . INSTANCE ) ; if $F106053 ( info ) { generateDataFile ( info . getString ( NUM00 ) , rules . getString ( NUM00 ) , classNames [ NUM00 ] ) ; } if $F106053 ( info ) { generateDataFile ( info . getString ( NUM00 ) , rules . getString ( NUM00 ) , classNames [ NUM00 ] ) ; } if $F106053 ( info ) { generateDataFile ( info . getString ( NUM00 ) , rules . getString ( NUM00 ) , classNames [ NUM00 ] ) ; } if $F106053 ( info ) { generateDataFile ( info . getString ( NUM00 ) , rules . getString ( NUM00 ) , classNames [ NUM00 ] ) ; } }
public static boolean isCglibProxy ( Object object ) { return ClassUtils . isCglibProxyClass ( object . getClass ( ) ) ; }
private $F5415 calculateImageIndents $F72 { $F2268 ( mTempMatrix ) mTempMatrix . setRotate ( - getCurrentAngle ( ) ) ; $F5415 $F42716 ( unrotatedImageCorners , Arrays , mCurrentImageCorners ) ; $F282780 ( unrotatedCropBoundsCorners , RectUtils , mCropRect ) mTempMatrix . mapPoints ( unrotatedImageCorners ) ; mTempMatrix . mapPoints ( unrotatedCropBoundsCorners ) ; $F85496 ( unrotatedImageRect , RectUtils , unrotatedImageCorners ) $F85496 ( unrotatedCropRect , RectUtils , unrotatedCropBoundsCorners ) float deltaLeft = unrotatedImageRect . left - unrotatedCropRect . left ; float deltaTop = unrotatedImageRect . top - unrotatedCropRect . top ; float deltaRight = unrotatedImageRect . right - unrotatedCropRect . right ; float deltaBottom = unrotatedImageRect . bottom - unrotatedCropRect . bottom ; float indents [ ] = $F12454 ; $F282795 ( indents , deltaLeft ) $F282795 ( indents , deltaTop ) $F282797 ( indents , deltaRight ) $F282797 ( indents , deltaBottom ) $F2268 ( mTempMatrix ) mTempMatrix . setRotate ( getCurrentAngle ( ) ) ; mTempMatrix . mapPoints ( indents ) ; return indents ; }
public void testBug10630 $F72 throws Exception { Connection conn2 = null ; Statement stmt2 = null ; try { conn2 = getConnectionWithProps ( ( Properties ) null ) ; $F2715 ( stmt2 , conn2 ) $F59 ( conn2 ) stmt2 . getWarnings ( ) ; fail ( NUM00 ) ; } catch ( SQLException sqlEx ) { assertEquals ( SQLError . SQL_STATE_ILLEGAL_ARGUMENT , sqlEx . getSQLState ( ) ) ; } $F85840 ( stmt2 , conn2 ) }
public static boolean equals ( $F8748 field1 , $F8748 field2 ) $F17603 ( field1 , field2 , Arrays )
public void toFront ( final WorkflowAnnotation anno ) { $F826 ( anno ) synchronized ( lock ) { if $F16914 ( annotationsDrawOrder , anno ) $F207 ( annotationsDrawOrder , anno ) if $F16914 ( annotationsEventOrder , anno ) $F6966 ( annotationsEventOrder , anno ) } }
public synchronized void addFrame ( final Image image , final long frameDuration ) { totalDuration += frameDuration ; frames . add ( new AnimFrame ( image , totalDuration ) ) ; }
public static String printCodePointAsString ( int codePoint ) { $F20818 ( builder ) $F84 ( builder ) try { printStringCodePoint ( builder , codePoint ) ; } catch ( IOException e ) $F62406 ( e ) $F84 ( builder ) $F92 ( builder ) }
private void cleanupMinidumpFile $F72 { if ( ! CrashFileManager . tryMarkAsUploaded ( mFileToUpload ) ) { Log . w ( TAG , NUM00 + mFileToUpload + NUM00 ) ; if $F7119 ( mFileToUpload ) { $F248237 ( Log , TAG , mFileToUpload ) } } }
boolean closeOutbound $F72 throws SSLException { if ( sslEngine == null || sslEngine . isOutboundDone ( ) ) { return _BOOL ; } sslEngine . closeOutbound ( ) ; createOutNetBuffer ( NUM00 ) ; SSLEngineResult result ; for ( $F589 ) { result = sslEngine . wrap ( emptyBuffer . buf ( ) , outNetBuffer . buf ( ) ) ; if ( result . getStatus ( ) == SSLEngineResult . Status . BUFFER_OVERFLOW ) { outNetBuffer . capacity ( $F238996 ( outNetBuffer ) ) ; $F239000 ( outNetBuffer ) } else $F5153 } if ( result . getStatus ( ) != SSLEngineResult . Status . CLOSED ) { throw new SSLException ( NUM00 + result ) ; } $F14257 ( outNetBuffer ) return _BOOL ; }
$F5466 private static Bitmap extractThumbnail ( Bitmap source , int width , int height ) $F33971 ( extractThumbnail , source , width , height , OPTIONS_NONE )
private void writePkgInfo $F72 throws BuildException { $F109797 ( pkgInfo , mContentsDir ) PrintWriter writer = null ; try { writer = new PrintWriter ( new BufferedWriter ( new FileWriter ( pkgInfo ) ) ) ; writer . print ( bundleProperties . getCFBundlePackageType ( ) ) ; writer . println ( bundleProperties . getCFBundleSignature ( ) ) ; $F1206 ( writer ) } catch ( IOException ex ) { throw new BuildException ( NUM00 + ex ) ; } $F19458 ( mFileUtils , writer ) }
public $F80820 toArray $F72 { if ( firstEvent == null ) { return new EventBean $F380 ; } if ( additionalEvents == null ) { return new EventBean [ ] { firstEvent } ; } $F80820 events = new EventBean [ NUM00 + additionalEvents . size ( ) ] ; events [ NUM00 ] = firstEvent ; int count = NUM00 ; for ( EventBean theEvent : additionalEvents ) $F2319 ( events , count , theEvent ) return events ; }
private $F96 decode ( DerInputStream in ) throws IOException { DerValue val = in . getDerValue ( ) ; $F1208 ( derEncoding , val ) derEncoding [ NUM00 ] = DerValue . tag_SetOf ; DerInputStream derIn = new DerInputStream ( derEncoding ) ; DerValue [ ] derVals = derIn . getSet ( NUM00 , _BOOL ) ; PKCS9Attribute attrib ; ObjectIdentifier oid ; boolean reuseEncoding = _BOOL ; for ( $F1139 ( i , derVals ) ) { try { attrib = new PKCS9Attribute ( derVals [ i ] ) ; } catch ( ParsingException e ) { if ( ignoreUnsupportedAttributes ) $F34544 ( reuseEncoding , _BOOL ) else { throw e ; } } oid = attrib . getOID ( ) ; if $F26935 ( attributes , oid ) $F3495 ( oid ) if ( permittedAttributes != null && ! permittedAttributes . containsKey ( oid ) ) $F3587 ( oid ) attributes . put ( oid , attrib ) ; } return reuseEncoding ? derEncoding : generateDerEncoding ( ) ; }
StringVector processPREFIX_LIST $F17723 ( handler , uri , name , rawName , value ) throws $F2253 { $F17727 ( tokenizer , value ) $F17729 ( nStrings , tokenizer ) $F17731 ( strings , nStrings ) for ( $F119 ( i , nStrings ) ) { $F8095 ( prefix , tokenizer ) String url = handler . getNamespaceForPrefix ( prefix ) ; if ( prefix . equals ( Constants . ATTRVAL_DEFAULT_PREFIX ) || url != null ) strings . addElement ( prefix ) ; else throw new $F2253 ( XSLMessages . createMessage ( XSLTErrorResources . ER_CANT_RESOLVE_NSPREFIX , $F8844 ( prefix ) ) ) ; } return strings ; }
$F1 public CategoricalResults clone $F72 { CategoricalResults copy = new CategoricalResults ( n ) ; $F17879 ( copy , Arrays , probabilities ) return copy ; }
private static StringBuilder dump ( StringBuilder _lbuffer , long value ) { for ( $F6268 ( j ) ) { _lbuffer . append ( _hexcodes [ ( int ) ( value > > _shifts [ j ] ) & NUM00 ] ) ; } return _lbuffer ; }
private boolean typeSpecialChar ( char c ) { switch ( c ) { $F1262 controller . keyPress ( KeyEvent . VK_TAB ) ; controller . keyRelease ( KeyEvent . VK_TAB ) ; return _BOOL ; $F1262 controller . keyPress ( KeyEvent . VK_ENTER ) ; controller . keyRelease ( KeyEvent . VK_ENTER ) ; return _BOOL ; $F1267 return _BOOL ; } }
protected static boolean eq ( Object o1 , Object o2 ) $F64386 ( o1 , o2 )
public static boolean hasMimeType ( String mimeType ) $F123773 ( mimeType , _BOOL , mimeTypeToExtensionMap )
public Iterable < Notification > skip ( $F2304 final Iterable < Notification > notifications , final long startId , final boolean inclusive , final int limitSize ) { Objects . requireNonNull ( notifications ) ; final int position = indexOf ( notifications , startId ) ; if ( position == - NUM00 ) { return Iterables . limit ( notifications , limitSize ) ; } if ( inclusive ) { return Iterables . limit ( Iterables . skip ( notifications , position ) , limitSize ) ; } return Iterables . limit ( Iterables . skip ( notifications , position + NUM00 ) , limitSize ) ; }
public boolean writeData ( PdxWriter writer , Object obj ) { if ( isRelevant ( obj . getClass ( ) ) ) { writeData ( writer , obj , getClassInfo ( obj . getClass ( ) ) ) ; return _BOOL ; } return _BOOL ; }
protected final void writeC ( ByteBuffer buf , int value ) $F180946 ( buf , value )
$F4562 ( view , deltaX , scrollX , deltaY , scrollY , scrollRange , fuzzyThreshold , scaleFactor , isTouchEvent , deltaValue , currentScrollValue , scrollValue , HORIZONTAL , VERTICAL , mode , newScrollValue , PullToRefreshBase , Log , LOG_TAG , State , Math )
$F18907 ( priorityQueue )
public ViterbiPoint ( Item item ) $F6988 ( this , item )
protected void paintContentBorderBottomEdge ( Graphics g , int x , int y , int w , int h , boolean drawBroken , Rectangle selRect , boolean isContentBorderPainted ) { if ( isContentBorderPainted ) { g . setColor ( darkShadow ) ; g . fillRect ( x , y + h - NUM00 , w - NUM00 , NUM00 ) ; } }
private void emitListAdd $F6406 ( method , fieldName , builder ) { $F84 ( builder ) $F6407 ( builder , getListAdderName , fieldName ) $F84 ( builder ) builder . append ( getTypeArgumentImplName ( ( ParameterizedType ) method . getGenericReturnType ( ) , NUM00 ) ) ; $F84 ( builder ) $F6407 ( builder , getEnsureName , fieldName ) $F84 ( builder ) builder . append ( fieldName ) ; $F84 ( builder ) $F84 ( builder ) }
public RSAPublicKey parsePEMPublicKey ( String pem ) throws GeneralSecurityException { try { $F12490 ( bs , decodeAsciiArmoredPEM , pem ) $F23500 ( data , ByteBuffer , bs ) final ASN1Object ob = asn1Parser . parseASN1 ( data ) ; final List < ASN1Object > seq = asn1ObjectToSequence ( ob , NUM00 ) ; final BigInteger $F245221 ( modulus , asn1ObjectToBigInt , seq ) ; final BigInteger $F245221 ( exponent , asn1ObjectToBigInt , seq ) ; return createKeyFromModulusAndExponent ( modulus , exponent ) ; } catch ( IllegalArgumentException e ) { throw new InvalidKeyException $F72 ; } }
public static $F4203 ParallelPublisher $F4203 from ( $F40799 ( source ) , boolean ordered , int parallelism ) { return from ( source , ordered , parallelism , Px . bufferSize ( ) , Px . defaultQueueSupplier ( Px . bufferSize ( ) ) ) ; }
public long next $F46828 ( startTime , fromTime , currentCount ) { if ( startTime == NUM00 ) startTime = RecurrenceUtil . now ( ) ; if ( fromTime == NUM00 ) fromTime = startTime ; if ( getEndTime ( ) != NUM00 && getEndTime ( ) <= RecurrenceUtil . now ( ) ) $F1082 Debug . logVerbose ( NUM00 , module ) ; if ( getCount ( ) != - NUM00 && currentCount >= getCount ( ) ) $F1082 Debug . logVerbose ( NUM00 , module ) ; boolean isSeeking = _BOOL ; long nextRuntime = NUM00 ; long seekTime = fromTime ; int loopProtection = NUM00 ; int maxLoop = ( $F138998 * NUM00 ) ; while ( isSeeking && loopProtection < maxLoop ) { Date nextRun = getNextFreq ( startTime , seekTime ) ; $F36868 ( seekTime , nextRun ) if ( validByRule ( nextRun ) ) { isSeeking = _BOOL ; $F36868 ( nextRuntime , nextRun ) } loopProtection ++ ; } return nextRuntime ; }
public void addToQueue ( Var var ) { $F12632 ( addToQueue , Collections , var ) }
public String canonicalize ( String simpleURL ) { String resultURL = simpleURL ; if $F3106 ( simpleURL ) { resultURL = NUM00 + simpleURL ; } else if $F3106 ( simpleURL ) { resultURL = NUM00 + simpleURL ; } else if $F3106 ( simpleURL ) { resultURL = NUM00 + simpleURL ; } else if ( ! hasProtocolName ( simpleURL ) ) { if ( isSimpleHostName ( simpleURL ) ) $F253145 ( simpleURL ) resultURL = NUM00 + simpleURL ; } return resultURL ; }
public String read ( String filename ) throws IOException { return ProcFile . readFile ( String . format ( NUM00 , pid , filename ) ) ; }
private long calculateAnimationDuration ( float initialVelocity , float displacement ) { return MathUtils . clamp ( Math . round ( Math . abs ( NUM00 * displacement / initialVelocity ) ) , MINIMUM_ANIMATION_DURATION_MS , MAXIMUM_ANIMATION_DURATION_MS ) ; }
$F10344 ( HTTPRequestMethod ) @ Before ( adviceClass = { $F10345 , AnonymousViewCheck . class , UserBlockCheck . class } ) $F10353 public void showHomePoints $F10355 ( context , request , response , userName ) throws Exception { $F10360 ( user , request , User ) request . setAttribute ( Keys . TEMAPLTE_DIR_NAME , Symphonys . get ( NUM00 ) ) ; $F10375 ( renderer ) context . setRenderer ( renderer ) ; $F10384 ( renderer ) $F10377 ( dataModel , renderer ) filler . fillHeaderAndFooter ( request , response , dataModel ) ; $F10362 ( pageNumStr , request ) $F10365 ( Strings , pageNumStr ) $F10367 ( pageNum , Integer , pageNumStr ) $F10411 ( pageSize , Symphonys ) $F10411 ( windowSize , Symphonys ) fillHomeUser ( dataModel , user ) ; avatarQueryService . fillUserAvatarURL ( user ) ; $F10381 ( followingId , user , Keys ) dataModel . put ( Follow . FOLLOWING_ID , followingId ) ; final JSONObject userPointsResult = pointtransferQueryService . getUserPoints ( $F10378 ( user , Keys ) , pageNum , pageSize ) ; final $F10413 userPoints = CollectionUtils . < JSONObject > jsonArrayToList ( userPointsResult . optJSONArray ( Keys . RESULTS ) ) ; dataModel . put ( Common . USER_HOME_POINTS , userPoints ) ; final boolean isLoggedIn = ( Boolean ) dataModel . get ( Common . IS_LOGGED_IN ) ; if ( isLoggedIn ) { final JSONObject currentUser = ( JSONObject ) dataModel . get ( Common . CURRENT_USER ) ; $F10381 ( followerId , currentUser , Keys ) final boolean isFollowing = followQueryService . isFollowing ( followerId , $F10378 ( user , Keys ) ) ; dataModel . put ( Common . IS_FOLLOWING , isFollowing ) ; } user . put ( UserExt . USER_T_CREATE_TIME , new Date ( user . getLong ( Keys . OBJECT_ID ) ) ) ; final int pointsCnt = userPointsResult . optInt ( Pagination . PAGINATION_RECORD_COUNT ) ; final int $F10428 ( pageCount , Math , pointsCnt , pageSize ) ; final $F3807 pageNums = Paginator . paginate ( pageNum , pageSize , pageCount , windowSize ) ; if $F5973 ( pageNums ) { dataModel . put ( Pagination . PAGINATION_FIRST_PAGE1 , pageNums . get ( NUM00 ) ) ; dataModel . put ( Pagination . PAGINATION_LAST_PAGE1 , $F7661 ( pageNums ) ) ; } $F10442 ( dataModel , Pagination , pageNum ) $F10444 ( dataModel , Pagination , pageCount ) dataModel . put ( Pagination . PAGINATION_PAGE1S , pageNums ) ; }
private static double norm $F10212 ( v ) { double agg = NUM00 ; for ( $F1139 ( i , v ) ) { agg += ( v [ i ] * v [ i ] ) ; } $F41531 ( Math , agg ) }
private int measureHeight ( int measureSpec ) { float result ; $F20444 ( specMode , MeasureSpec , measureSpec ) $F23132 ( specSize , MeasureSpec , measureSpec ) if ( specMode == MeasureSpec . EXACTLY ) { result = specSize ; } else { result = mPaintSelected . getStrokeWidth ( ) + getPaddingTop ( ) + getPaddingBottom ( ) ; $F23140 ( specMode , MeasureSpec , result , Math , specSize ) } return ( int ) ( ( float ) Math . ceil ( result ) ) ; }
public void layout ( Container container ) { Map < Location , Drawable > comps = getComponentsByLocation ( container ) ; Drawable north = comps . get ( Location . NORTH ) ; Drawable northEast = comps . get ( Location . NORTH_EAST ) ; Drawable east = comps . get ( Location . EAST ) ; Drawable southEast = comps . get ( Location . SOUTH_EAST ) ; Drawable south = comps . get ( Location . SOUTH ) ; Drawable southWest = comps . get ( Location . SOUTH_WEST ) ; Drawable west = comps . get ( Location . WEST ) ; Drawable northWest = comps . get ( Location . NORTH_WEST ) ; Drawable center = comps . get ( Location . CENTER ) ; double widthWest = getMaxWidth ( northWest , west , southWest ) ; double widthEast = getMaxWidth ( northEast , east , southEast ) ; double heightNorth = getMaxHeight ( northWest , north , northEast ) ; double heightSouth = getMaxHeight ( southWest , south , southEast ) ; double gapEast = ( widthEast > NUM00 ) ? getGapX ( ) : NUM00 ; double gapWest = ( widthWest > NUM00 ) ? getGapX ( ) : NUM00 ; double gapNorth = ( heightNorth > NUM00 ) ? getGapY ( ) : NUM00 ; double gapSouth = ( heightSouth > NUM00 ) ? getGapY ( ) : NUM00 ; $F162508 ( bounds , container ) Insets2D insets = container . getInsets ( ) ; if ( insets == null ) { insets = new Insets2D . Double $F72 ; } double xWest = bounds . getMinX ( ) + insets . getLeft ( ) - gapWest - widthWest ; double xCenter = bounds . getMinX ( ) + insets . getLeft ( ) ; double xEast = bounds . getMaxX ( ) - insets . getRight ( ) + gapEast ; double yNorth = bounds . getMinY ( ) + insets . getTop ( ) - gapNorth - heightNorth ; double yCenter = bounds . getMinY ( ) + insets . getTop ( ) ; double ySouth = bounds . getMaxY ( ) - insets . getBottom ( ) + gapSouth ; layoutComponent ( northWest , xWest , yNorth , widthWest , heightNorth ) ; layoutComponent ( north , xCenter , yNorth , bounds . getWidth ( ) - insets . getHorizontal ( ) , heightNorth ) ; layoutComponent ( northEast , xEast , yNorth , widthEast , heightNorth ) ; layoutComponent ( east , xEast , yCenter , widthEast , bounds . getHeight ( ) - insets . getVertical ( ) ) ; layoutComponent ( southEast , xEast , ySouth , widthEast , heightSouth ) ; layoutComponent ( south , xCenter , ySouth , bounds . getWidth ( ) - insets . getHorizontal ( ) , heightSouth ) ; layoutComponent ( southWest , xWest , ySouth , widthWest , heightSouth ) ; layoutComponent ( west , xWest , yCenter , widthWest , bounds . getHeight ( ) - insets . getVertical ( ) ) ; layoutComponent ( center , xCenter + getGapX ( ) , yCenter + getGapY ( ) , bounds . getWidth ( ) - insets . getHorizontal ( ) - NUM00 * getGapX ( ) , bounds . getHeight ( ) - insets . getVertical ( ) - NUM00 * getGapY ( ) ) ; }
$F75659 ( takeLock , putLock )
public void add ( int i , int data ) { if ( _length + NUM00 > _capacity ) ensureCapacity ( _length + NUM00 ) ; $F27096 ( System , _buffer , i , _length ) $F8214 ( _buffer , i , data ) _length += NUM00 ; }
private double mean $F9830 ( vec ) { double result = NUM00 ; for ( $F1139 ( i , vec ) ) result += vec [ i ] ; return result / vec . length ; }
private Sprite ( float xPos , float yPos , float xVel , float yVel , Image ... sprites ) { if ( sprites != null ) spriteFrame = new ImageView ( sprites [ NUM00 ] ) ; $F9629 ( playerStates , Arrays , sprites ) spriteFrame . setTranslateX ( xPos ) ; spriteFrame . setTranslateY ( yPos ) ; this . xPos = xPos ; this . yPos = yPos ; this . xVel = xVel ; this . yVel = yVel ; }
public void close $F72 $F881 ( out )
protected static SyncToken createSyncToken ( String dateString , $F5466 String uuid ) { try { return new SyncToken ( DB_DATE_FORMAT . parse ( dateString ) , uuid ) ; } catch ( ParseException e ) $F9491 ( e ) }
private static boolean equalsHandlesNulls ( Object a , Object b ) { return a == b || $F1256 ( a , b ) ; }
public void init ( String flagzDirectory ) throws FlagException , EtcdFlagFieldUpdaterException { this . directoryPrefix = MoreObjects . firstNonNull ( flagzDirectory , directoryFlag . get ( ) ) ; client = new EtcdClient ( uris . toArray ( new URI $F2313 ( uris ) ) ) ; client . setRetryHandler ( retryPolicy ) ; initialSetAllFlagz ( ) ; }
public static void closeEL ( InputStream is ) { try $F1823 ( is ) $F58785 }
public void testRandom $F72 { ExtremityMonitor monitor = new ExtremityMonitor $F72 ; $F24605 ( random ) for ( $F6268 ( i ) ) { monitor . update ( random . nextDouble ( ) ) ; } assertTrue ( monitor . getMin ( ) < NUM00 ) ; assertTrue ( monitor . getMax ( ) < NUM00 ) ; assertTrue ( monitor . getMin ( ) >= NUM00 ) ; assertTrue ( monitor . getMax ( ) > NUM00 ) ; }
public static String replace ( String str , char oldChar , String newStr ) { $F280 ( buf ) for ( $F1088 ( i , str ) ) { $F1280 ( ch , str , i ) if ( ch == oldChar ) $F288 ( buf , newStr ) else $F288 ( buf , ch ) } $F92 ( buf ) }
@ Action ( $F3144 ) @ ValidationErrorPage ( value = ERROR ) @ SkipValidation public String newform $F72 { setLoginDept ( ) ; $F108456 ( sdf ) try { cutOffDate = sdf . parse ( collectionsUtil . getAppConfigValue ( CollectionConstants . MODULE_NAME_COLLECTIONS_CONFIG , CollectionConstants . APPCONFIG_VALUE_COLLECTIONDATAENTRYCUTOFFDATE ) ) ; } catch ( ParseException e ) { LOGGER . error ( getText ( NUM00 ) + e . getMessage ( ) ) ; } return NEW ; }
public TypeDeclaration canonicalize $F72 { $F17124 sts = getSatisfiedTypes ( ) ; if $F2979 ( sts ) { return unit . getAnythingDeclaration ( ) ; } else if $F10471 ( sts ) { Type st = sts . get ( NUM00 ) ; if ( st . isExactlyNothing ( ) ) { return unit . getNothingDeclaration ( ) ; } } for ( Type st : sts ) { if ( st . isUnion ( ) ) { $F17124 caseTypes = st . getCaseTypes ( ) ; $F17124 ulist = new $F22982 $F716 ( caseTypes ) ; for ( Type ct : caseTypes ) { $F17124 ilist = new $F22982 $F716 ( sts ) ; for ( Type pt : sts ) { if ( pt == st ) { addToIntersection ( ilist , ct , unit ) ; } else { addToIntersection ( ilist , pt , unit ) ; } } Type it = canonicalIntersection ( ilist , unit ) ; addToUnion ( ulist , it ) ; } TypeDeclaration result = new UnionType ( unit ) ; result . setCaseTypes ( ulist ) ; return result ; } } return this ; }
public static void openOtherUri ( final String url , final Activity activity ) { Intent intent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( url ) ) ; activity . startActivity ( intent ) ; }
public static boolean waitForAllActiveAndLiveReplicas ( ZkStateReader zkStateReader , int timeoutInMs ) $F6001 ( waitForAllActiveAndLiveReplicas , zkStateReader , timeoutInMs )
public synchronized void addElement ( E object ) { if ( elementCount == elementData . length ) $F5795 ( growByOne ) elementData [ elementCount ++ ] = object ; modCount ++ ; }
private $F97251 ( d , imageView , getImageView , viewWidth , getImageViewWidth , viewHeight , getImageViewHeight , drawableWidth , drawableHeight , mBaseMatrix , widthScale , heightScale , mScaleType , ScaleType , scale , Math , mTempSrc , mTempDst , mBaseRotation , FIT_CENTER , ScaleToFit , FIT_START , FIT_END , FIT_XY , resetMatrix )
public boolean checkForRp $F72 { return NullColumnValueGetter . isNotNullValue ( getRpCopyName ( ) ) ; }
ExternalProblem ( Process process ) { this ( process . getInputStream ( ) , process . getOutputStream ( ) ) ; RedirectStream . redirect ( process . getErrorStream ( ) , System . err ) ; }
public static $F3803 splitPath ( File file ) { $F24645 ( output ) File current = file ; while ( current != null ) { $F29790 ( output , current ) $F122621 ( current ) } Collections . reverse ( output ) ; return output ; }
private static StsdData parseStsd ( ParsableByteArray stsd , int trackId , long durationUs , int rotationDegrees , String language , boolean isQuickTime ) { stsd . setPosition ( Atom . FULL_HEADER_SIZE ) ; $F5952 ( numberOfEntries , stsd ) StsdData out = new StsdData ( numberOfEntries ) ; for ( $F119 ( i , numberOfEntries ) ) { int childStartPosition = stsd . getPosition ( ) ; $F5952 ( childAtomSize , stsd ) $F46509 ( Assertions , childAtomSize ) $F5952 ( childAtomType , stsd ) if ( childAtomType == Atom . TYPE_avc1 || childAtomType == Atom . TYPE_avc3 || childAtomType == Atom . TYPE_encv || childAtomType == Atom . TYPE_mp4v || childAtomType == Atom . TYPE_hvc1 || childAtomType == Atom . TYPE_hev1 || childAtomType == Atom . TYPE_s263 || childAtomType == Atom . TYPE_vp08 || childAtomType == Atom . TYPE_vp09 ) { parseVideoSampleEntry ( stsd , childAtomType , childStartPosition , childAtomSize , trackId , durationUs , rotationDegrees , out , i ) ; } else if ( childAtomType == Atom . TYPE_mp4a || childAtomType == Atom . TYPE_enca || childAtomType == Atom . TYPE_ac_3 || childAtomType == Atom . TYPE_ec_3 || childAtomType == Atom . TYPE_dtsc || childAtomType == Atom . TYPE_dtse || childAtomType == Atom . TYPE_dtsh || childAtomType == Atom . TYPE_dtsl || childAtomType == Atom . TYPE_samr || childAtomType == Atom . TYPE_sawb || childAtomType == Atom . TYPE_lpcm || childAtomType == Atom . TYPE_sowt ) { parseAudioSampleEntry ( stsd , childAtomType , childStartPosition , childAtomSize , trackId , durationUs , language , isQuickTime , out , i ) ; } else if ( childAtomType == Atom . TYPE_TTML ) { out . mediaFormat = MediaFormat . createTextFormat ( Integer . toString ( trackId ) , MimeTypes . APPLICATION_TTML , MediaFormat . NO_VALUE , durationUs , language ) ; } else if ( childAtomType == Atom . TYPE_tx3g ) { out . mediaFormat = MediaFormat . createTextFormat ( Integer . toString ( trackId ) , MimeTypes . APPLICATION_TX3G , MediaFormat . NO_VALUE , durationUs , language ) ; } else if ( childAtomType == Atom . TYPE_wvtt ) { out . mediaFormat = MediaFormat . createTextFormat ( Integer . toString ( trackId ) , MimeTypes . APPLICATION_MP4VTT , MediaFormat . NO_VALUE , durationUs , language ) ; } else if ( childAtomType == Atom . TYPE_stpp ) { out . mediaFormat = MediaFormat . createTextFormat ( Integer . toString ( trackId ) , MimeTypes . APPLICATION_TTML , MediaFormat . NO_VALUE , durationUs , language , NUM00 ) ; } stsd . setPosition ( childStartPosition + childAtomSize ) ; } return out ; }
protected boolean isCompatible ( Taxa taxa , List < Taxon > availableTaxa ) { for ( int i = NUM00 ; i < taxa . getTaxonCount ( ) ; i ++ ) { Taxon taxon = taxa . getTaxon ( i ) ; $F92359 ( availableTaxa , taxon , _BOOL ) } return _BOOL ; }
protected int drawLabelText ( Object nativeGraphics , int textDecoration , boolean rtl , boolean isTickerRunning , boolean endsWith3Points , Object nativeFont , int txtW , int textSpaceW , int shiftText , String text , int x , int y , int fontHeight ) { if ( ( ! isTickerRunning ) || rtl ) { if ( txtW > textSpaceW && textSpaceW > NUM00 ) { if ( rtl ) { if ( ( ! isTickerRunning ) && endsWith3Points ) { String points = NUM00 ; int pointsW = stringWidth ( nativeFont , points ) ; drawString ( nativeGraphics , nativeFont , points , shiftText + x , y , textDecoration , fontHeight ) ; clipRect ( nativeGraphics , pointsW + shiftText + x , y , textSpaceW - pointsW , fontHeight ) ; } x = x - txtW + textSpaceW ; } else if ( endsWith3Points ) { String points = NUM00 ; int index = NUM00 ; int widest = charWidth ( nativeFont , NUM00 ) ; int pointsW = stringWidth ( nativeFont , points ) ; $F1749 ( textLen , text ) while ( fastCharWidthCheck ( text , index , textSpaceW - pointsW , widest , nativeFont ) && index < textLen ) { index ++ ; } text = text . substring ( NUM00 , Math . min ( textLen , $F24349 ( Math , index ) ) ) + points ; txtW = stringWidth ( nativeFont , text ) ; } } } drawString ( nativeGraphics , nativeFont , text , shiftText + x , y , textDecoration , fontHeight ) ; $F95700 ( Math , txtW , textSpaceW ) }
public boolean hasMapObjects $F72 $F51935 ( mapObjects )
public void performActions $F72 throws Throwable { for ( Throwing . Runnable action : actions ) $F21688 ( action ) }
public java . util . Collection < ObjectReference > dumpThreadRoots ( int width ) $F12523 ( Collections )
protected void addFieldNameTranslation ( EmbeddableMapping embeddableMapping , String overrideName , DatabaseField overrideField , MappingAccessor aggregatesAccessor ) { DatabaseMapping aggregatesMapping = aggregatesAccessor . getMapping ( ) ; DatabaseField aggregatesMappingField = aggregatesMapping . getField ( ) ; if ( aggregatesAccessor . isId ( ) ) { updatePrimaryKeyField ( aggregatesAccessor , overrideField ) ; } if $F3578 ( overrideName ) { embeddableMapping . addNestedFieldTranslation ( overrideName , overrideField , aggregatesMappingField . getName ( ) ) ; } else { embeddableMapping . addFieldTranslation ( overrideField , aggregatesMappingField . getName ( ) ) ; } }
public Dimension minimumLayoutSize ( Container target ) { synchronized $F201886 ( target ) { $F32537 ( dim ) if ( ( chart != null ) && chart . isVisible ( ) ) { Dimension d = chart . getMinimumSize ( ) ; dim . width = d . width ; dim . height = d . height ; } if ( ( xLabel != null ) && xLabel . isVisible ( ) ) { Dimension d = xLabel . getMinimumSize ( ) ; dim . width = $F241074 ( Math , d , dim ) ; dim . height += d . height + vgap ; } if ( ( yLabel != null ) && yLabel . isVisible ( ) ) { Dimension d = yLabel . getMinimumSize ( ) ; dim . width += d . width + hgap ; dim . height = Math . max ( d . height , dim . height ) ; } if ( ( title != null ) && title . isVisible ( ) ) { Dimension d = title . getMinimumSize ( ) ; dim . width = $F241074 ( Math , d , dim ) ; dim . height += d . height + vgap ; } $F3970 ( insets , target ) dim . width += $F30395 ( insets ) ; dim . height += $F30391 ( insets ) ; return dim ; } }
private void checkResourceChange ( final Resource resource , final Group group , final Callback callback , final AtomicBoolean isChanged ) throws Exception { if ( $F142678 ( isChanged , resource , group ) ) { isChanged . compareAndSet ( _BOOL , _BOOL ) ; callback . onResourceChanged ( resource ) ; lifecycleCallback . onResourceChanged ( resource ) ; } }
public javax2 . sip . address . TelURL createTelURL ( String uri ) throws ParseException { $F1149 ( uri ) String telUrl = NUM00 + uri ; try { StringMsgParser smp = new StringMsgParser $F72 ; TelURLImpl timp = ( TelURLImpl ) smp . parseUrl ( telUrl ) ; return ( TelURL ) timp ; } catch ( ParseException ex ) { throw new ParseException ( ex . getMessage ( ) , NUM00 ) ; } }
public EvoSVMModel ( ExampleSet exampleSet , List < SupportVector > supportVectors , Kernel kernel , double bias ) { super ( exampleSet , ExampleSetUtilities . SetsCompareOption . ALLOW_SUPERSET , ExampleSetUtilities . TypesCompareOption . ALLOW_SAME_PARENTS ) ; this . supportVectors = supportVectors ; if $F45555 ( supportVectors ) $F825 this . kernel = kernel ; this . bias = bias ; if ( this . kernel instanceof DotKernel ) { this . weights = new double [ getNumberOfAttributes ( ) ] ; for ( $F50810 ( i , getNumberOfSupportVectors ) ) { SupportVector sv = getSupportVector ( i ) ; if ( sv != null ) { $F1986 x = sv . getX ( ) ; double alpha = sv . getAlpha ( ) ; $F82240 ( y , sv ) for ( $F1139 ( j , weights ) ) { weights [ j ] += y * alpha * x [ j ] ; } } else { this . weights = null ; $F597 } } } }
private synchronized boolean _restart $F72 throws ServletException { if ( singelton != null ) $F2268 ( singelton ) initEngine ( ) ; $F58463 ( System ) return _BOOL ; }
public Sorter $F72 { useDefaultVisual ( ) ; $F9898 ( setLayout ) add ( m_visual , BorderLayout . CENTER ) ; m_env = Environment . getSystemWide ( ) ; m_stopRequested = new AtomicBoolean ( _BOOL ) ; }
$F198049 ( Character , getValue )
public static double logpdf $F7635 ( x , mu , shape ) { if ( ! ( x > NUM00 ) || x == Double . POSITIVE_INFINITY ) $F86429 ( Double ) final double v = ( x - mu ) / mu ; return v < Double . MAX_VALUE ? NUM00 * Math . log ( shape / ( MathUtil . TWOPI * x * x * x ) ) - shape * v * v / ( NUM00 * x ) : Double . NEGATIVE_INFINITY ; }
$F1 public final short readShort $F72 throws IOException { $F52634 ( dis , work ) return ( short ) ( $F169749 ( work ) | $F18896 ( work ) ) ; }
public static Format generateFormat ( String codec ) { return ( Format ) SUPPORTED_CODECS . get ( codec . toLowerCase ( ) ) ; }
public void comment $F62353 ( start , length ) throws $F2253 { int start_old = start ; $F5453 ( m_inEntityRef ) if ( m_elemContext . m_startTagOpen ) $F42845 ( closeStartTag , m_elemContext , _BOOL ) else $F62355 ( m_needToCallStartDocument , startDocumentInternal , _BOOL ) try { final int limit = start + length ; boolean wasDash = _BOOL ; $F32367 ( m_cdataTagOpen , closeCDATA ) $F62357 ( shouldIndent , indent ) $F42851 ( writer , m_writer ) writer . write ( COMMENT_BEGIN ) ; for ( int i = start ; i < limit ; i ++ ) { if ( wasDash && ch [ i ] == NUM00 ) { $F62358 ( writer , ch , start , i ) $F3410 ( writer ) start = i + NUM00 ; } wasDash = ( ch [ i ] == NUM00 ) ; } if ( length > NUM00 ) { final int remainingChars = ( limit - start ) ; if ( remainingChars > NUM00 ) writer . write ( ch , start , remainingChars ) ; if ( ch [ limit - NUM00 ] == NUM00 ) $F3410 ( writer ) } writer . write ( COMMENT_END ) ; } $F6289 ( e ) m_startNewLine = _BOOL ; if ( m_tracer != null ) super . fireCommentEvent ( ch , start_old , length ) ; }
public OptionalInt maxByInt ( IntUnaryOperator keyExtractor ) { $F2027 result = collect ( $F32718 ) ; return result [ NUM00 ] == NUM00 ? OptionalInt . of ( result [ NUM00 ] ) : OptionalInt . empty ( ) ; }
public T findByCommitCounter ( final long commitCounter ) { $F84760 ( commitCounter ) final Lock lock = readLock ( ) ; $F790 ( lock ) try { $F1431 final ITupleIterator $F4203 itr = rangeIterator ( null , null , NUM00 , IRangeQuery . DEFAULT | IRangeQuery . REVERSE , null ) ; while $F2921 ( itr ) { final ITuple $F4203 t = itr . next ( ) ; final T r = t . getObject ( ) ; final IRootBlockView rb = r . getRootBlock ( ) ; if ( rb . getCommitCounter ( ) <= commitCounter ) { return r ; } } $F1274 } $F796 ( lock ) }
$F43398 ( animator , ValueAnimator , nameValueList , mPendingAnimations , propertyMask , propertyCount , i , nameValuesHolder , mAnimatorMap , mAnimatorEventListener , mStartDelaySet , mStartDelay , mDurationSet , mDuration , mInterpolatorSet , mInterpolator )
public static String traceExcetion ( Throwable ex ) { final Writer $F24473 ( result ) ; final PrintWriter printWriter = new PrintWriter ( result ) ; ex . printStackTrace ( printWriter ) ; $F1822 ( stacktrace , result ) $F110901 ( Log , TAG , stacktrace ) return stacktrace ; }
public static $F7329 split ( String varName ) { $F1384 ( splitIndex , varName ) $F6664 ( splitIndex ) $F11991 ( left , varName , splitIndex ) $F36289 ( right , varName , splitIndex ) if ( $F383070 ( left , right ) || $F1276 ( right ) ) $F1337 return Pair . of ( left , right ) ; }
public void onChildThreadResumeEnd $F72 { _threadCount . getAndDecrement ( ) ; wake ( ) ; }
public static void registerTransportMBean ( String containerName ) { MBeanServer mBeanServer = getMBeanServer ( containerName ) ; $F8249 ( mBeanServer ) TransportProtocolMonitorMBean transportConnectionsInfoMBean = new TransportProtocolMonitor $F72 ; ObjectName objName = TransportConstants . createTransportMBeanObjectName ( containerName ) ; if ( ! mBeanServer . isRegistered ( objName ) ) { try { mBeanServer . registerMBean ( transportConnectionsInfoMBean , objName ) ; } catch ( InstanceAlreadyExistsException e ) { if $F176449 ( _logger , Level ) { _logger . config ( alreadyRegistredTransportMBeanMessage + containerName + NUM00 ) ; } } catch ( NotCompliantMBeanException e ) { if $F89967 ( _logger , Level ) { _logger . log ( Level . SEVERE , failedTransportMBeanRegistrationMessagePrefix + containerName + NUM00 , e ) ; } } catch ( MBeanRegistrationException e ) { if $F68674 ( _logger , Level ) { _logger . log ( Level . SEVERE , failedTransportMBeanRegistrationMessagePrefix + containerName + NUM00 , e ) ; } } if $F176449 ( _logger , Level ) { _logger . config ( successfulTransportMBeanRegistrationMessage + containerName + NUM00 ) ; } } else { if $F176449 ( _logger , Level ) { _logger . config ( alreadyRegistredTransportMBeanMessage ) ; } } }
public static int update ( String where , $F131 args , V sets , Class < ? extends Bean > t ) { Table mapping = ( Table ) t . getAnnotation ( Table . class ) ; if ( mapping == null ) { if $F6002 ( log ) $F19652 ( log , t ) $F150 } if ( ! X . isEmpty ( mapping . name ( ) ) ) { return updateTable ( mapping . name ( ) , where , args , sets ) ; } $F150 }
private void stopVideoFadingEdgesScreenTimer $F72 { if ( null != mVideoFadingEdgesTimer ) { $F65148 ( mVideoFadingEdgesTimer ) mVideoFadingEdgesTimer = null ; mVideoFadingEdgesTimerTask = null ; } }
public void removeListener ( final TimeoutEventListener listener ) $F106 ( listeners , listener )
protected static void processGenericPropertiesCreatorProps ( File propsFile ) { try { $F2697 ( expProps ) BufferedInputStream $F20277 ( bi , propsFile ) ; expProps . load ( bi ) ; $F59 ( bi ) bi = null ; Properties GPCInputProps = GenericPropertiesCreator . getGlobalInputProperties ( ) ; $F113927 keys = expProps . keySet ( ) ; $F91960 keysI = keys . iterator ( ) ; while $F2921 ( keysI ) { $F2778 ( key , keysI ) String existingVal = GPCInputProps . getProperty ( key , NUM00 ) ; if $F4012 ( existingVal ) { $F7601 ( newVal , expProps , key ) if $F283026 ( existingVal , newVal ) { newVal = existingVal + NUM00 + newVal ; GPCInputProps . put ( key , newVal ) ; } } else { $F7601 ( newVal , expProps , key ) GPCInputProps . put ( key , newVal ) ; } } } $F15720 }
private synchronized void addTableLockObject ( AbsoluteTableIdentifier absoluteTableIdentifier ) { if ( null == tableLockMap . get ( absoluteTableIdentifier ) ) { tableLockMap . put ( absoluteTableIdentifier , $F38005 ) ; } }
private static String randomElement $F39268 ( list ) { $F59615 ( index , random , list ) $F8313 ( list , index ) }
public static $F4203 void updateMappingToImmutableSet ( Map < T , $F77231 > map , T key , $F77231 newQual ) { $F200702 ( result , AnnotationUtils ) if $F15257 ( map , key ) $F21926 ( result , newQual ) else { $F103980 ( result , map , key ) result . addAll ( newQual ) ; } map . put ( key , Collections . unmodifiableSet ( result ) ) ; }
public static void join ( final AsyncInvocation $F1011 async , final long timeoutMilliseconds ) { join ( async . getThread ( ) , timeoutMilliseconds ) ; }
void define ( MemberDefinition field , int slot , int from , int to ) { if ( from >= to ) $F932 for ( $F119 ( i , len ) ) { if ( ( locals [ i ] . field == field ) && ( locals [ i ] . slot == slot ) && ( from <= locals [ i ] . to ) && ( to >= locals [ i ] . from ) ) { locals [ i ] . from = Math . min ( locals [ i ] . from , from ) ; locals [ i ] . to = Math . max ( locals [ i ] . to , to ) ; $F665 } } if ( len == locals . length ) { LocalVariable newlocals [ ] = new LocalVariable [ len * NUM00 ] ; $F135 ( System , locals , newlocals , len ) locals = newlocals ; } locals [ len ++ ] = new LocalVariable ( field , slot , from , to ) ; }
protected Connection openConnection ( boolean autocommit ) throws SQLException { $F133134 ( conn , dataSrc ) ; conn . setAutoCommit ( autocommit ) ; return conn ; }
public void error ( XPathContext xctxt , String msg , $F131 args ) throws $F1872 { $F9737 fmsg = XSLMessages . createXPATHMessage ( msg , args ) ; if ( null != xctxt ) { $F1875 ( eh , xctxt ) TransformerException te = new TransformerException ( fmsg , this ) ; eh . fatalError ( te ) ; } }
public void mousePressed ( MouseEvent e ) { int nclicks = SwingUtilities2 . getAdjustedClickCount ( getComponent ( ) , e ) ; if ( SwingUtilities . isLeftMouseButton ( e ) ) { if ( e . isConsumed ( ) ) { shouldHandleRelease = _BOOL ; } else { shouldHandleRelease = _BOOL ; adjustCaretAndFocus ( e ) ; if ( nclicks == NUM00 && SwingUtilities2 . canEventAccessSystemClipboard ( e ) ) { selectWord ( e ) ; } } } }
$F13591 ( str , flags , decode )
public Object apply ( String source , int lineNo , int columnNo , Object funcBody , Vector paramNames , Vector arguments ) throws BSFException { Object object = eval ( source , lineNo , columnNo , funcBody ) ; if ( object instanceof Closure ) { Closure closure = ( Closure ) object ; return closure . call ( arguments . toArray ( ) ) ; } return object ; }
public Set keySet $F72 $F2905 ( totalKeySet )
public void output ( List list , Writer out ) throws IOException { printContentRange ( out , list , NUM00 , list . size ( ) , NUM00 , createNamespaceStack ( ) ) ; $F1206 ( out ) }
public boolean consumeEncumbranceBudget ( $F87266 ( detailsMap ) ) { if ( detailsMap == null ) throw new ValidationException ( Arrays . asList ( new ValidationError $F6600 ) ) ; detailsMap . put ( Constants . CONSUMEORRELEASE , _BOOL ) ; final BigDecimal bd = getDetails ( detailsMap ) ; return $F179074 ( bd ) ; }
private $F2027 mod $F22564 ( a , f ) { int df = computeDegree ( f ) ; if ( df == - NUM00 ) $F290806 $F22974 ( result , a ) int hc = headCoefficient ( f ) ; hc = field . inverse ( hc ) ; $F5634 ( System , a , result ) while ( df <= computeDegree ( result ) ) { $F2027 q ; int coeff = field . mult ( headCoefficient ( result ) , hc ) ; q = multWithMonomial ( f , computeDegree ( result ) - df ) ; q = multWithElement ( q , coeff ) ; result = add ( q , result ) ; } return result ; }
$F1 public $F987 listOptions $F72 { $F46582 ( result , enumToVector , super ) $F46588 ( result , defaultNumClusters ) $F1006 ( result ) $F1006 ( result ) result . addElement ( new Option ( NUM00 + defaultMinInstNum ( ) + NUM00 + defaultMaxInstNum ( ) + NUM00 + NUM00 + NUM00 , NUM00 , NUM00 , NUM00 ) ) ; result . addElement ( new Option ( NUM00 + defaultMinRadius ( ) + NUM00 + defaultMaxRadius ( ) + NUM00 + NUM00 + NUM00 , NUM00 , NUM00 , NUM00 ) ) ; $F46588 ( result , defaultDistMult ) $F46588 ( result , defaultNumCycles ) $F1006 ( result ) result . addElement ( new Option ( $F36190 ( defaultNoiseRate ) + NUM00 , NUM00 , NUM00 , NUM00 ) ) ; $F1007 ( result ) }
public static void appendHexJavaScriptRepresentation ( StringBuilder sb , char c ) { $F84 ( sb ) $F21991 ( val , Integer , c ) for ( $F1748 ( j , val ) ; j < NUM00 ; j ++ ) $F86 ( sb ) sb . append ( val ) ; }
private void printBootstrapMap $F72 { $F973 ( LOG ) for ( $F61448 ( i , chainMap ) ) { LOG . info ( String . format ( $F321479 ( i , chainMap ) ) ) ; } }
public Vector $F986 enumToVector ( $F987 enu ) { $F20795 ( options ) options . addAll ( Collections . list ( enu ) ) ; return options ; }
private void addToken ( int token ) { try { fTokens [ fTokenCount ] = token ; } catch ( ArrayIndexOutOfBoundsException ex ) { $F2027 oldList = fTokens ; fTokens = new int [ fTokenCount < < NUM00 ] ; $F135 ( System , oldList , fTokens , fTokenCount ) fTokens [ fTokenCount ] = token ; } fTokenCount ++ ; }
private P filterLargeValueSets ( FilterSpec fs , MetaDataObject rootMeta , F root , boolean forceEntityBased , JoinType defaultPredicateJoinType ) { ArrayList < FilterSpec > $F204 ( specs ) ; $F11654 list = new $F201 ( ( $F7922 ) fs . getValue ( ) ) ; for ( int i = NUM00 ; i < list . size ( ) ; i += ORACLE_PARAM_LIMIT ) { int nextOffset = i + Math . min ( list . size ( ) - i , ORACLE_PARAM_LIMIT ) ; $F11654 batchList = list . subList ( i , nextOffset ) ; specs . add ( new FilterSpec ( fs . getAttributePath ( ) , fs . getOperator ( ) , batchList ) ) ; } FilterSpec orSpec = FilterSpec . or ( specs ) ; return filterSpecListToPredicate ( rootMeta , root , orSpec , forceEntityBased , defaultPredicateJoinType ) ; }
protected void addTags ( E data , Builder builder ) { PlatformIdent platformIdent = cachedDataService . getPlatformIdentForId ( data . getPlatformIdent ( ) ) ; builder . tag ( Series . TAG_AGENT_ID , String . valueOf ( data . getPlatformIdent ( ) ) ) ; if ( null != platformIdent ) { builder . tag ( Series . TAG_AGENT_NAME , platformIdent . getAgentName ( ) ) ; } }
public int compare ( String s1 , String s2 ) { $F66059 ( match1 , MATCH_ID_PATTERN , s1 ) $F66059 ( match2 , MATCH_ID_PATTERN , s2 ) final boolean match1matches = match1 . matches ( ) ; final boolean match2matches = match2 . matches ( ) ; if ( match1matches ^ match2matches ) { return ( match1matches ) ? NUM00 : - NUM00 ; } else if ( match1matches && match2matches ) { $F24135 ( signature1 , Integer , match1 ) $F24135 ( signature2 , Integer , match2 ) int comparison = ( signature1 < signature2 ) ? - NUM00 : ( signature1 > signature2 ) ? NUM00 : NUM00 ; if ( comparison == NUM00 ) { $F24135 ( start1 , Integer , match1 ) $F24135 ( start2 , Integer , match2 ) comparison = ( start1 < start2 ) ? - NUM00 : ( start1 > start2 ) ? NUM00 : NUM00 ; } if ( comparison == NUM00 ) { $F24135 ( end1 , Integer , match1 ) $F24135 ( end2 , Integer , match2 ) comparison = ( end1 < end2 ) ? - NUM00 : ( end1 > end2 ) ? NUM00 : NUM00 ; } return comparison ; } else { int seqLength1 = s1 . length ( ) , n2 = s2 . length ( ) ; for ( int i1 = NUM00 , i2 = NUM00 ; i1 < seqLength1 && i2 < n2 ; i1 ++ , i2 ++ ) { $F1280 ( c1 , s1 , i1 ) $F1280 ( c2 , s2 , i2 ) if ( c1 != c2 ) { $F186161 ( c1 , Character ) $F186161 ( c2 , Character ) if ( c1 != c2 ) { $F33289 ( c1 , Character ) $F33289 ( c2 , Character ) $F17566 ( c1 , c2 ) } } } return seqLength1 - n2 ; } }
private static int loadBuildNumber ( Context context , PackageManager packageManager ) { try { ApplicationInfo appInfo = packageManager . getApplicationInfo ( context . getPackageName ( ) , PackageManager . GET_META_DATA ) ; Bundle metaData = appInfo . metaData ; if ( metaData != null ) { return metaData . getInt ( BUNDLE_BUILD1BER , NUM00 ) ; } } catch ( PackageManager . NameNotFoundException e ) { $F294495 ( L ) $F301 ( e ) } $F1082 }
public static LeftRegularBipartiteGraphSegment buildRandomLeftRegularBipartiteGraph ( int leftSize , int rightSize , int leftDegree , Random random ) { LeftRegularBipartiteGraphSegment leftRegularBipartiteGraphSegment = new LeftRegularBipartiteGraphSegment ( leftSize / NUM00 , leftDegree , rightSize / NUM00 , leftSize / NUM00 , NUM00 , Integer . MAX_VALUE , new IdentityEdgeTypeMask $F72 , new NullStatsReceiver $F72 ) ; LongSet addedIds = new LongOpenHashSet ( leftDegree ) ; for ( $F119 ( i , leftSize ) ) { $F725 ( addedIds ) for ( $F119 ( j , leftDegree ) ) { long idToAdd ; do { idToAdd = random . nextInt ( rightSize ) ; } while $F105 ( addedIds , idToAdd ) ; addedIds . add ( idToAdd ) ; leftRegularBipartiteGraphSegment . addEdge ( i , idToAdd , $F19905 ) ; } } return leftRegularBipartiteGraphSegment ; }
$F129060 ( views , direction , focusableMode , focusableCount , descendantFocusability , getDescendantFocusability , FOCUS_BLOCK_DESCENDANTS , i , getChildCount , child , getChildAt , VISIBLE , ii , infoForChild , mCurItem , FOCUS_AFTER_DESCENDANTS , isFocusable , FOCUSABLES_TOUCH_MODE , isInTouchMode , isFocusableInTouchMode , this )
protected HttpURLConnection configureRequest ( final HttpURLConnection request ) { if ( credentials != null ) request . setRequestProperty ( HEADER_AUTHORIZATION , credentials ) ; request . setRequestProperty ( HEADER_USER_AGENT , userAgent ) ; request . setRequestProperty ( HEADER_ACCEPT , getHeaderAccept ( ) ) ; return request ; }
public static String convertToTitle ( int n ) { if ( n <= NUM00 ) $F1278 $F83 ( title ) while ( n > NUM00 ) { n -- ; int r = n % NUM00 ; title . insert ( NUM00 , ( char ) ( NUM00 + r ) ) ; n = n / NUM00 ; } $F92 ( title ) }
private char readEscapeCharacter $F72 throws JSONException { $F52837 ( escaped , in , pos ) switch ( escaped ) { $F1262 if ( pos + NUM00 > in . length ( ) ) $F25983 ( syntaxError ) $F10821 ( hex , in , pos ) pos += NUM00 ; $F121531 ( Integer , hex ) $F12596 $F12596 $F12596 $F12596 $F12596 $F1262 $F1262 $F1262 $F1267 return escaped ; } }
static public void process $F1947 ( input , output , packFileName ) { process ( new Settings $F72 , input , output , packFileName ) ; }
private ReplicatorRuntimeConf ( String serviceName ) { replicatorHomeDir = locateReplicatorHomeDir ( ) ; replicatorLogDir = locateReplicatorLogDir ( ) ; replicatorConfDir = locateReplicatorConfDir ( ) ; replicatorProperties = new File ( locateReplicatorConfDir ( ) , NUM00 + serviceName + NUM00 ) ; if ( $F48789 ( replicatorProperties ) || $F15586 ( replicatorProperties ) ) { throw new ServerRuntimeException ( NUM00 + replicatorProperties ) ; } replicatorDynamicProperties = new File ( replicatorConfDir , NUM00 + serviceName + NUM00 ) ; replicatorDynamicRole = new File ( replicatorConfDir , NUM00 + serviceName + NUM00 ) ; this . clearDynamicProperties = Boolean . parseBoolean ( System . getProperty ( CLEAR_DYNAMIC_PROPERTIES ) ) ; }
private String toLocalNumber ( double n ) $F35907 ( mDecimalFormat , n )
public void simulateMethod $F5498 ( method , thisVar , returnVar ) { $F5500 ( subSignature , method ) if $F3057 ( subSignature ) $F5501 ( java_security_AccessController_doPrivileged , method , thisVar , returnVar , params ) else if $F3057 ( subSignature ) $F5501 ( java_security_AccessController_doPrivileged , method , thisVar , returnVar , params ) else if $F3057 ( subSignature ) $F5501 ( java_security_AccessController_doPrivileged , method , thisVar , returnVar , params ) else if $F3057 ( subSignature ) $F5501 ( java_security_AccessController_doPrivileged , method , thisVar , returnVar , params ) else if $F3057 ( subSignature ) $F5501 ( java_security_AccessController_getStackAccessControlContext , method , thisVar , returnVar , params ) else if $F3057 ( subSignature ) $F5501 ( java_security_AccessController_getInheritedAccessControlContext , method , thisVar , returnVar , params ) else $F5501 ( defaultMethod , method , thisVar , returnVar , params ) }
$F120210 ( maximumPullScroll , getMaximumPullScroll , pLeft , getPaddingLeft , pTop , getPaddingTop , pRight , getPaddingRight , pBottom , getPaddingBottom , getPullToRefreshScrollDirection , HORIZONTAL , mMode , mHeaderLayout , mFooterLayout , VERTICAL , DEBUG , Log , LOG_TAG , String , setPadding )
public static $F2469 asLongArray ( final $F27145 l ) { final $F2469 a = new long $F2313 ( l ) ; $F25191 ( i , a , l ) return a ; }
private void updateMenuState $F72 { m_appendAnd . setEnabled ( m_criteriumNode . allowAppend ( CAndCriterium . class ) ) ; m_appendOr . setEnabled ( m_criteriumNode . allowAppend ( COrCriterium . class ) ) ; m_appendNot . setEnabled ( m_criteriumNode . allowAppend ( CNotCriterium . class ) ) ; m_insertAnd . setEnabled ( m_criteriumNode . allowInsert ( CAndCriterium . class ) ) ; m_insertOr . setEnabled ( m_criteriumNode . allowInsert ( COrCriterium . class ) ) ; m_insertNot . setEnabled ( m_criteriumNode . allowInsert ( CNotCriterium . class ) ) ; m_conditionSubmenu . setEnabled ( m_criteriumNode . allowAppend ( CConditionCriterium . class ) ) ; m_remove . setEnabled ( ! m_criteriumNode . isRoot ( ) ) ; m_removeAll . setEnabled ( m_criteriumNode . getChildCount ( ) != NUM00 ) ; }
public void testPutGetRemove $F72 throws Exception { initStore ( NUM00 ) ; $F11868 exp ; try { exp = runPutGetRemoveMultithreaded ( NUM00 , NUM00 ) ; } $F49978 ( shutdownStore ) $F20666 map = delegate . getMap ( ) ; $F2306 extra = new $F9623 $F57797 ( map ) ; extra . removeAll ( exp ) ; assertTrue ( NUM00 + extra , extra . isEmpty ( ) ) ; $F2306 $F28907 ( missing , exp ) ; missing . removeAll ( map . keySet ( ) ) ; assertTrue ( NUM00 + missing , missing . isEmpty ( ) ) ; for ( Integer key : exp ) assertEquals ( NUM00 + key , NUM00 + key , map . get ( key ) ) ; }
public static String formatListToString $F24643 ( list ) { String result = NUM00 ; for ( String s : list ) result += s + NUM00 ; $F1382 ( result ) return result . toUpperCase ( ) ; }
$F1 public void removeNotificationListener ( NotificationListener listener ) throws ListenerNotFoundException { if $F14148 ( SNMP_ADAPTOR_LOGGER , Level ) { SNMP_ADAPTOR_LOGGER . logp ( Level . FINEST , dbgTag , NUM00 , NUM00 + listener ) ; } notifBroadcaster . removeNotificationListener ( listener ) ; }
public static boolean isNewer ( long ts1 , long size1 , long ts2 , long size2 ) { return ts1 > ts2 || ( ts1 == ts2 && size1 < size2 ) ; }
private static void d_ucumm ( $F1986 a , $F1986 agg , $F1986 c , int m , int n , int rl , int ru ) { $F1986 cprods = ( agg != null ) ? agg : new double [ n ] ; if ( agg == null ) $F9952 ( Arrays , cprods ) for ( $F305651 ( i , rl , aix , n , ru ) ) { productAgg ( a , cprods , aix , NUM00 , n ) ; $F6483 ( System , cprods , c , aix , n ) } }
public static List < ModuleSpec > expandSpecWildcards ( File dir , List < ModuleSpec > modules , Backend forBackend ) { $F14391 ( dirs ) dirs . add ( dir ) ; return expandSpecWildcards ( dirs , modules , forBackend ) ; }
private void $$$setupUI$$$ $F72 { $F26681 ( myContentPanel ) $F165873 ( myContentPanel ) myYoursRadioButton = new JRadioButton $F72 ; myYoursRadioButton . setSelected ( _BOOL ) ; $F15121 ( myYoursRadioButton ) $F208200 ( myYoursRadioButton ) $F208201 ( myYoursRadioButton ) myContentPanel . add ( myYoursRadioButton , new GridConstraints ( NUM00 , NUM00 , NUM00 , NUM00 , GridConstraints . ANCHOR_WEST , GridConstraints . FILL_NONE , $F165874 ( GridConstraints ) , GridConstraints . SIZEPOLICY_FIXED , null , null , null , NUM00 , _BOOL ) ) ; myTheirsRadioButton = new JRadioButton $F72 ; $F15121 ( myTheirsRadioButton ) $F208200 ( myTheirsRadioButton ) $F208201 ( myTheirsRadioButton ) myContentPanel . add ( myTheirsRadioButton , new GridConstraints ( NUM00 , NUM00 , NUM00 , NUM00 , GridConstraints . ANCHOR_WEST , GridConstraints . FILL_NONE , $F165874 ( GridConstraints ) , GridConstraints . SIZEPOLICY_FIXED , null , null , null , NUM00 , _BOOL ) ) ; myUseCustomRadioButton = new JRadioButton $F72 ; $F15121 ( myUseCustomRadioButton ) $F208200 ( myUseCustomRadioButton ) $F208201 ( myUseCustomRadioButton ) myContentPanel . add ( myUseCustomRadioButton , new GridConstraints ( NUM00 , NUM00 , NUM00 , NUM00 , GridConstraints . ANCHOR_WEST , GridConstraints . FILL_NONE , $F165874 ( GridConstraints ) , GridConstraints . SIZEPOLICY_FIXED , null , null , null , NUM00 , _BOOL ) ) ; $F55354 ( myCustomPathTextField ) myCustomPathTextField . setEnabled ( _BOOL ) ; myContentPanel . add ( myCustomPathTextField , new GridConstraints ( NUM00 , NUM00 , NUM00 , NUM00 , GridConstraints . ANCHOR_WEST , GridConstraints . FILL_BOTH , GridConstraints . SIZEPOLICY_WANT_GROW , GridConstraints . SIZEPOLICY_FIXED , null , new Dimension $F261843 , null , NUM00 , _BOOL ) ) ; final Spacer spacer1 = new Spacer $F72 ; myContentPanel . add ( spacer1 , new GridConstraints ( NUM00 , NUM00 , NUM00 , NUM00 , GridConstraints . ANCHOR_CENTER , GridConstraints . FILL_VERTICAL , NUM00 , GridConstraints . SIZEPOLICY_WANT_GROW , null , null , null , NUM00 , _BOOL ) ) ; $F171121 ( myErrorLabel ) myErrorLabel . setForeground ( new Color $F81964 ) ; $F15121 ( myErrorLabel ) myContentPanel . add ( myErrorLabel , new GridConstraints ( NUM00 , NUM00 , NUM00 , NUM00 , GridConstraints . ANCHOR_WEST , GridConstraints . FILL_NONE , GridConstraints . SIZEPOLICY_CAN_GROW , GridConstraints . SIZEPOLICY_FIXED , null , null , null , NUM00 , _BOOL ) ) ; ButtonGroup buttonGroup ; $F59507 ( buttonGroup ) ; buttonGroup . add ( myYoursRadioButton ) ; buttonGroup . add ( myTheirsRadioButton ) ; buttonGroup . add ( myUseCustomRadioButton ) ; }
private static String reportListContents ( Collection < ProcessErrorStateInfo > errList ) { $F1275 ( errList ) $F83 ( builder ) Iterator < ProcessErrorStateInfo > iter = errList . iterator ( ) ; while $F2921 ( iter ) { ProcessErrorStateInfo entry = iter . next ( ) ; String condition ; switch ( entry . condition ) { case ActivityManager . ProcessErrorStateInfo . CRASHED : condition = NUM00 ; $F597 case ActivityManager . ProcessErrorStateInfo . NOT_RESPONDING : condition = NUM00 ; $F597 $F1267 condition = NUM00 ; $F597 } builder . append ( String . format ( NUM00 , entry . processName , condition , entry . shortMsg ) ) ; if ( entry . condition == ActivityManager . ProcessErrorStateInfo . CRASHED ) { builder . append ( String . format ( NUM00 , entry . stackTrace ) ) ; } $F84 ( builder ) } $F92 ( builder ) }
public void parseArguments ( final $F806 rawArguments , Properties argumentProperties ) throws ArgumentException { boolean inTrailingArgs = _BOOL ; $F18832 ( numArguments , rawArguments ) for ( $F119 ( i , numArguments ) ) { final String arg = rawArguments [ i ] ; if ( inTrailingArgs ) { trailingArguments . add ( arg ) ; if ( maxTrailingArguments > NUM00 && trailingArguments . size ( ) > maxTrailingArguments ) { $F206930 ( message , ERR_ARGPARSER_TOO_MANY_TRAILING_ARGS , maxTrailingArguments ) throw new ArgumentException ( message ) ; } $F598 } if $F3057 ( arg ) { inTrailingArgs = _BOOL ; } else if $F3106 ( arg ) { $F28924 ( argName , arg ) String argValue = null ; $F46662 ( equalPos , argName ) if ( equalPos == NUM00 ) { throw new ArgumentException $F73204 ( ERR_ARGPARSER_LONG_ARG_WITHOUT_NAME , arg ) ; } else if ( equalPos > NUM00 ) { $F4571 ( argValue , argName , equalPos ) $F45799 ( argName , equalPos ) } final String origArgName = argName ; argName = formatLongIdentifier ( argName ) ; final Argument a = longIDMap . get ( argName ) ; if ( a == null ) { if $F1238 ( OPTION_LONG_HELP , argName ) { writeToUsageOutputStream ( getUsage ( ) ) ; $F665 } else if $F1238 ( OPTION_LONG_PRODUCT_VERSION , argName ) $F10990 ( printVersion ) else { throw new ArgumentException $F73204 ( ERR_ARGPARSER_NO_ARGUMENT_WITH_LONG_ID , origArgName ) ; } } else { a . setPresent ( _BOOL ) ; if ( isUsageArgument ( a ) ) { writeToUsageOutputStream ( getUsage ( ) ) ; $F665 } } if ( a . needsValue ( ) ) { if ( argValue == null ) { if ( ( i + NUM00 ) == numArguments ) { throw new ArgumentException $F73204 ( ERR_ARGPARSER_NO_VALUE_FOR_ARGUMENT_WITH_LONG_ID , origArgName ) ; } argValue = rawArguments [ ++ i ] ; } final LocalizableMessageBuilder invalidReason = new LocalizableMessageBuilder $F72 ; if ( ! a . valueIsAcceptable ( argValue , invalidReason ) ) { throw new ArgumentException ( ERR_ARGPARSER_VALUE_UNACCEPTABLE_FOR_LONG_ID . get ( argValue , origArgName , invalidReason ) ) ; } if ( a . hasValue ( ) && ! a . isMultiValued ( ) ) { throw new ArgumentException $F73204 ( ERR_ARGPARSER_NOT_MULTIVALUED_FOR_LONG_ID , origArgName ) ; } a . addValue ( argValue ) ; } else if ( argValue != null ) { throw new ArgumentException $F73204 ( ERR_ARGPARSER_ARG_FOR_LONG_ID_DOESNT_TAKE_VALUE , origArgName ) ; } } else if $F3106 ( arg ) { if $F3057 ( arg ) { throw new ArgumentException $F27748 ( ERR_ARGPARSER_INVALID_DASH_AS_ARGUMENT ) ; } $F93766 ( argCharacter , arg ) String argValue ; if $F4012 ( arg ) { $F64779 ( argValue , arg ) } else { argValue = null ; } final Argument a = shortIDMap . get ( argCharacter ) ; if ( a == null ) { if ( argCharacter == NUM00 ) { writeToUsageOutputStream ( getUsage ( ) ) ; $F665 } else if ( versionHandler != null && argCharacter == OPTION_SHORT_PRODUCT_VERSION && ! shortIDMap . containsKey ( OPTION_SHORT_PRODUCT_VERSION ) ) $F10990 ( printVersion ) else { throw new ArgumentException $F73204 ( ERR_ARGPARSER_NO_ARGUMENT_WITH_SHORT_ID , argCharacter ) ; } } else { a . setPresent ( _BOOL ) ; if ( isUsageArgument ( a ) ) { writeToUsageOutputStream ( getUsage ( ) ) ; $F665 } } if ( a . needsValue ( ) ) { if ( argValue == null ) { if ( ( i + NUM00 ) == numArguments ) { throw new ArgumentException $F73204 ( ERR_ARGPARSER_NO_VALUE_FOR_ARGUMENT_WITH_SHORT_ID , argCharacter ) ; } argValue = rawArguments [ ++ i ] ; } final LocalizableMessageBuilder invalidReason = new LocalizableMessageBuilder $F72 ; if ( ! a . valueIsAcceptable ( argValue , invalidReason ) ) { throw new ArgumentException ( ERR_ARGPARSER_VALUE_UNACCEPTABLE_FOR_SHORT_ID . get ( argValue , argCharacter , invalidReason ) ) ; } if ( a . hasValue ( ) && ! a . isMultiValued ( ) ) { throw new ArgumentException $F73204 ( ERR_ARGPARSER_NOT_MULTIVALUED_FOR_SHORT_ID , argCharacter ) ; } a . addValue ( argValue ) ; } else if ( argValue != null ) { $F22998 ( valueLength , argValue ) for ( $F119 ( j , valueLength ) ) { $F1090 ( c , argValue , j ) final Argument b = shortIDMap . get ( c ) ; if ( b == null ) { throw new ArgumentException $F73204 ( ERR_ARGPARSER_NO_ARGUMENT_WITH_SHORT_ID , argCharacter ) ; } else if ( b . needsValue ( ) ) { throw new ArgumentException ( ERR_ARGPARSER_CANT_MIX_ARGS_WITH_VALUES . get ( argCharacter , argValue , c ) ) ; } else { b . setPresent ( _BOOL ) ; if ( isUsageArgument ( b ) ) { writeToUsageOutputStream ( getUsage ( ) ) ; $F665 } } } } } else if ( allowsTrailingArguments ) { inTrailingArgs = _BOOL ; trailingArguments . add ( arg ) ; } else { throw new ArgumentException $F73204 ( ERR_ARGPARSER_DISALLOWED_TRAILING_ARGUMENT , arg ) ; } } if ( allowsTrailingArguments && minTrailingArguments > NUM00 && trailingArguments . size ( ) < minTrailingArguments ) { throw new ArgumentException $F73204 ( ERR_ARGPARSER_TOO_FEW_TRAILING_ARGUMENTS , minTrailingArguments ) ; } $F22771 ( argumentProperties , checkExternalProperties ) normalizeArguments ( argumentProperties , argumentList ) ; }
public void testGetIssuerNames $F72 { $F40920 ( selector ) $F96 iss1 = new byte [ ] { NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ; $F96 iss2 = new byte [ ] $F32330 ; assertNull ( NUM00 , selector . getIssuerNames ( ) ) ; try { selector . addIssuerName ( iss1 ) ; selector . addIssuerName ( iss2 ) ; } $F97591 ( e , fail ) $F5363 result = selector . getIssuerNames ( ) ; $F153255 ( assertEquals , result ) }
$F1 public boolean start $F72 throws IOException { $F10635 ( LOG , initialCheckpointGenerator ) try { KinesisReaderCheckpoint initialCheckpoint = initialCheckpointGenerator . generate ( kinesis ) ; List < ShardRecordsIterator > iterators = newArrayList ( ) ; for ( ShardCheckpoint checkpoint : initialCheckpoint ) { iterators . add ( checkpoint . getShardRecordsIterator ( kinesis ) ) ; } shardIterators = new RoundRobin $F200 ( iterators ) ; } catch ( TransientKinesisException e ) $F5615 ( e ) return advance ( ) ; }
$F1 public XADataSource createXADataSource ( Properties properties ) throws SQLException { $F2697 ( propertiesCopy ) if ( properties != null ) $F96492 ( propertiesCopy , properties ) rejectUnsupportedOptions ( propertiesCopy ) ; rejectPoolingOptions ( propertiesCopy ) ; JdbcDataSource dataSource = new JdbcDataSource $F72 ; setupH2DataSource ( dataSource , propertiesCopy ) ; return dataSource ; }
public static double toDegrees ( double x ) { if ( Double . isInfinite ( x ) || x == NUM00 ) { return x ; } final double facta = NUM00 ; final double factb = NUM00 ; double xa = doubleHighPart ( x ) ; double xb = x - xa ; return xb * factb + xb * facta + xa * factb + xa * facta ; }
public void addHeaderView ( View v ) $F1861 ( addHeaderView , v , _BOOL )
public static boolean isAbsolutePath ( String systemId ) { $F397 ( systemId , _BOOL ) $F15885 ( file , systemId ) return file . isAbsolute ( ) ; }
void initDemandAndCollectionMap ( $F20109 ( prepareFieldNames ) , final Map $F419985 demand , final Map $F419985 collection , final Map $F419985 rebates ) { if $F1032 ( prepareFieldNames ) for ( final String fieldName : prepareFieldNames ) { $F419990 ( demand , fieldName , BigDecimal ) $F419990 ( collection , fieldName , BigDecimal ) $F419990 ( rebates , fieldName , BigDecimal ) } }
protected Instance specifier ( int i ) $F8314 ( m_Specifiers , i )
public ShapedCraftingRecipe ( Item nominalOutput , RecipeFunction recipeFunction , String format , boolean mirrored , ItemIngredient ... ingredients ) { this . nominalOutput = nominalOutput ; $F6542 ( formatLines , format ) int numIngredients = NUM00 ; int width = NUM00 ; for ( String formatLine : formatLines ) { width = Math . max ( width , formatLine . length ( ) ) ; for ( $F2998 ( c , formatLine ) ) { if ( c == NUM00 ) $F1448 else if $F19295 ( c ) { numIngredients ++ ; } else $F20855 ( format , c ) } } this . width = width ; this . height = formatLines . length ; this . posx = new int [ numIngredients ] ; this . posy = new int [ numIngredients ] ; this . ingredients = new ItemIngredient [ numIngredients ] ; this . mirrored = mirrored ; int ingredientIndex = NUM00 ; for ( int y = NUM00 ; y < this . height ; y ++ ) { String formatLine = formatLines [ y ] ; for ( $F1088 ( x , formatLine ) ) { $F1280 ( c , formatLine , x ) $F92331 ( c ) this . posx [ ingredientIndex ] = x ; this . posy [ ingredientIndex ] = y ; this . ingredients [ ingredientIndex ] = ingredients [ c - NUM00 ] ; ingredientIndex ++ ; } } this . recipeFunction = recipeFunction ; this . lastIngredientIndexOnFirstLine = getLastIngredientIndexOnFirstLine ( ) ; }
public void writeTag ( String tag , Font value ) { startTag ( tag ) ; $F64976 ( writeTag , value ) int style = value . getStyle ( ) ; if ( ( style & Font . BOLD ) != NUM00 && ( style & Font . ITALIC ) != NUM00 ) $F28986 ( writeTag , STYLE ) else if ( ( style & Font . BOLD ) != NUM00 ) $F28986 ( writeTag , STYLE ) else if ( ( style & Font . ITALIC ) != NUM00 ) $F28986 ( writeTag , STYLE ) else $F28986 ( writeTag , STYLE ) writeTag ( NUM00 , value . getSize ( ) ) ; closeTag ( ) ; }
private void internalWrite $F169066 ( b , off , len , finish ) throws IOException { coder . output = embiggen ( coder . output , coder . maxOutputSize ( len ) ) ; if ( ! coder . process ( b , off , len , finish ) ) { throw new Base64DataException $F580 ; } out . write ( coder . output , NUM00 , coder . op ) ; }
private Socket connect ( String host , String portString ) throws IOException { int port = NUM00 ; Socket sock = null ; boolean DEBUG = Debug . debugging ( NUM00 ) ; try $F123126 ( port , Integer , portString ) catch ( NumberFormatException e ) { if ( DEBUG ) Debug . output ( NUM00 + host + NUM00 + portString ) ; $F3495 ( portString ) } if ( DEBUG ) Debug . output ( NUM00 + host + NUM00 + port ) ; try { sock = new Socket ( host , port ) ; } catch ( IOException e ) { $F711 ( sock ) if ( DEBUG ) { Debug . output ( NUM00 + host + NUM00 + port + NUM00 + e ) ; } throw e ; } return sock ; }
$F1 public boolean batchFinished $F72 { $F161885 ( getInputFormat ) Instances toFilter = getInputFormat ( ) ; int cutOff = ( int ) Math . round ( toFilter . numInstances ( ) * m_Percentage / NUM00 ) ; if ( m_Inverse ) { for ( $F119 ( i , cutOff ) ) { push ( toFilter . instance ( i ) ) ; } } else { for ( int i = cutOff ; i < toFilter . numInstances ( ) ; i ++ ) { push ( toFilter . instance ( i ) ) ; } } flushInput ( ) ; m_NewBatch = _BOOL ; m_FirstBatchDone = _BOOL ; return ( numPendingOutput ( ) != NUM00 ) ; }
public void computeParameters $F72 { if ( ellps == null ) { ellps = Ellipsoid . WGS_84 ; } if ( mode == MODE_BELGIUM ) { alpha = NUM00 ; } else { alpha = NUM00 ; } double phi1 = ProjMath . degToRad ( lambert_sp_one ) ; double phi2 = ProjMath . degToRad ( lambert_sp_two ) ; double phif = ProjMath . degToRad ( referenceLatitude ) ; double e = ellps . ecc ; double sinphi ; sinphi = Math . sin ( phi1 ) ; double m1 = lambMsfn ( sinphi , Math . cos ( phi1 ) , e ) ; double t1 = lambTsfn ( phi1 , sinphi , e ) ; if ( MoreMath . approximately_equal ( phi1 , phi2 , EPS10 ) ) { n = sinphi ; } else { sinphi = Math . sin ( phi2 ) ; double m2 = lambMsfn ( sinphi , Math . cos ( phi2 ) , e ) ; double t2 = lambTsfn ( phi2 , sinphi , e ) ; n = Math . log ( m1 / m2 ) / Math . log ( t1 / t2 ) ; } F = m1 / ( n * Math . pow ( t1 , n ) ) ; if ( MoreMath . approximately_equal ( phi1 , phi2 , EPS10 ) ) { rf = NUM00 ; } else { rf = ellps . radius * F * Math . pow ( lambTsfn ( phif , Math . sin ( phif ) , e ) , n ) ; } lamdaf = ProjMath . degToRad ( centralMeridian ) ; locationCenterXPixel = ( $F69510 ( getWidth ) / NUM00 ) ; locationCenterYPixel = ( $F69510 ( getHeight ) / NUM00 ) ; locationPixelsPerLambert = $F69510 ( getPPM ) / getScale ( ) ; LatLonPoint origin = new $F54838 ( referenceLatitude , centralMeridian ) ; Point2D lp = LLToWorld ( origin . getY ( ) , origin . getX ( ) , new $F5047 $F72 ) ; $F25145 ( locationOriginX , lp ) $F130222 ( locationOriginY , lp ) LatLonPoint center = getCenter ( ) ; lp = LLToWorld ( center . getY ( ) , center . getX ( ) , lp ) ; $F25145 ( locationCenterXLambert , lp ) $F130222 ( locationCenterYLambert , lp ) locationOriginXfPixel = locationCenterXPixel + ( locationOriginX - locationCenterXLambert ) * locationPixelsPerLambert ; locationOriginYfPixel = locationCenterYPixel - ( locationOriginY - locationCenterYLambert ) * locationPixelsPerLambert ; if $F22503 ( Debug ) { Debug . output ( NUM00 + locationCenterXLambert + NUM00 + locationCenterYLambert ) ; Debug . output ( NUM00 + locationOriginX + NUM00 + locationOriginY ) ; } }
protected OkHttpClient configureHttpClient $F72 { final OkHttpClient . Builder builder = new OkHttpClient . Builder $F72 ; final CookieManager cookieManager = new CookieManager $F72 ; cookieManager . setCookiePolicy ( CookiePolicy . ACCEPT_ALL ) ; builder . cookieJar ( new JavaNetCookieJar ( cookieManager ) ) ; builder . connectTimeout ( NUM00 , TimeUnit . SECONDS ) ; builder . writeTimeout ( NUM00 , TimeUnit . SECONDS ) ; builder . readTimeout ( NUM00 , TimeUnit . SECONDS ) ; $F17464 ( builder ) }
public String parseFile ( File file ) { log . config ( file . getAbsolutePath ( ) ) ; String line = null ; try { BufferedReader in = new BufferedReader ( new InputStreamReader ( new FileInputStream ( file ) , Ini . getCharset ( ) ) , NUM00 ) ; String errMsg = NUM00 ; int lineNo = NUM00 ; while ( ( line = in . readLine ( ) ) != null && $F1276 ( errMsg ) ) { errMsg = parseLine ( line , lineNo ) ; lineNo ++ ; } line = null ; $F59 ( in ) if $F35625 ( errMsg ) return errMsg ; } catch ( Exception ioe ) { String s = ioe . getLocalizedMessage ( ) ; if $F6036 ( s ) $F6947 ( s , ioe ) return NUM00 + line + NUM00 + s ; } $F1278 }
public static Test suite $F72 throws Exception $F4915 ( suite , _BOOL )
public void load ( Element element , Object o ) $F21338 ( log )
public OMRaster ( double lt , double ln , int offset_x1 , int offset_y1 , ImageIcon ii ) { this ( lt , ln , offset_x1 , offset_y1 , ii . getImage ( ) ) ; }
private synchronized boolean startDequeue $F72 { int threads = $F150109 ( Math , queue , maxThreads ) ; for ( $F119 ( i , threads ) ) { ResourceThread t = ( ResourceThread ) queue . firstElement ( ) ; queue . removeElementAt ( NUM00 ) ; running . addElement ( t ) ; threadCount ++ ; } for ( $F44696 ( e , running ) ) { ResourceThread t = ( ResourceThread ) e . nextElement ( ) ; t . go ( ) ; } return ( threads > NUM00 ) ; }
public void propertyChange ( PropertyChangeEvent evt ) { String name = evt . getPropertyName ( ) ; if $F37111 ( name ) $F9099 ( invalidateWidthCache , fireColumnMarginChanged ) }
static WorkQueue commonSubmitterQueue $F72 { ForkJoinPool p ; $F17861 ws ; int m ; Submitter z ; return ( $F17863 ( z , submitters ) && ( p = commonPool ) != null && $F17865 ( ws , p ) && $F17868 ( m , ws ) ) ? ws [ m & z . seed & SQMASK ] : null ; }
public static void assertEquals ( Object object1 , Object object2 ) { checkAssertion ( object1 . equals ( object2 ) , null ) ; }
$F120210 ( maximumPullScroll , getMaximumPullScroll , pLeft , getPaddingLeft , pTop , getPaddingTop , pRight , getPaddingRight , pBottom , getPaddingBottom , getPullToRefreshScrollDirection , HORIZONTAL , mMode , mHeaderLayout , mFooterLayout , VERTICAL , DEBUG , Log , LOG_TAG , String , setPadding )
public static String flagNames ( long flags ) { $F83 ( sbuf ) int i = NUM00 ; long f = flags & StandardFlags ; while ( f != NUM00 ) { if $F69047 ( f ) { $F84 ( sbuf ) $F6939 ( sbuf , flagName , i ) } f = f > > NUM00 ; i ++ ; } $F92 ( sbuf ) }
public String formatSQL ( Object obj , Object expr ) { String sql = null ; if ( expr instanceof String ) { sql = ( String ) expr ; if $F14148 ( log , Level ) { $F150605 ( log , sql ) } } else if ( obj != null ) { sql = toString ( obj ) ; if ( sql != null ) { if $F3106 ( sql ) { $F56558 ( sql ) } sql = sql . replaceAll ( NUM00 , BINARY_SQL_MARKER ) ; } if $F14148 ( log , Level ) { $F150605 ( log , sql ) } } return sql ; }
public void indent $F72 $F86 ( indent )
public void addFakeView ( View childView ) { childView . layout ( NUM00 , NUM00 , getWidth ( ) , childView . getMeasuredHeight ( ) ) ; views . add ( childView ) ; }
public void compileProjects ( $F11300 projects , IssueAcceptor issueAcceptor ) throws N4JSCompileException { compileProjects ( Arrays . asList ( $F8806 ) , projects , Collections . emptyList ( ) , issueAcceptor ) ; }
protected final void print_contact_info ( ObjectInfoPanel p_window , $F18122 p_locale ) { $F129519 contacts = get_normal_contacts ( ) ; $F8504 ( contacts ) GuiResources resources = r_board . newGuiResources ( NUM00 ) ; p_window . append ( $F34152 ( resources ) + NUM00 ) ; Integer contact_count = contacts . size ( ) ; p_window . append_items ( contact_count . toString ( ) , resources . getString ( NUM00 ) , contacts ) ; }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
$F1431 public $F55892 resolve ( Result result ) { List < DoneCallback $F89732 > doneCallbacks ; List < AlwaysCallback > alwaysCallbacks ; synchronized ( this ) { validateInPendingState ( ) ; mState = STATE_RESOLVED ; printStateChanged ( NUM00 ) ; mResult = result ; doneCallbacks = mCallbacks . cloneDoneCallbacks ( ) ; alwaysCallbacks = mCallbacks . cloneAlwaysCallbacks ( ) ; clearCallbacks ( ) ; } if ( $F3816 ( doneCallbacks ) || $F3816 ( alwaysCallbacks ) ) $F19517 ( triggerAllDones , doneCallbacks , triggerAllAlways , alwaysCallbacks ) return this ; }
private void adjustNameAndPosition ( Node node , int deltaX , int deltaY ) { $F20605 ( originalName , node ) String uniqueName = nextUniqueName ( originalName ) ; if $F2137 ( uniqueName , originalName ) { node . setName ( uniqueName ) ; node . setCenterX ( node . getCenterX ( ) + deltaX ) ; node . setCenterY ( node . getCenterY ( ) + deltaY ) ; } }
private void createSnapshot ( BlockSnapshot snapshot , Snap unitySnap , StorageSystem storage , DbClient dbClient ) { snapshot . setNativeId ( unitySnap . getId ( ) ) ; snapshot . setNativeGuid ( NativeGUIDGenerator . generateNativeGuid ( storage , snapshot ) ) ; snapshot . setDeviceLabel ( unitySnap . getName ( ) ) ; snapshot . setIsSyncActive ( _BOOL ) ; snapshot . setInactive ( _BOOL ) ; snapshot . setCreationTime ( Calendar . getInstance ( ) ) ; snapshot . setWWN ( unitySnap . getAttachedWWN ( ) ) ; snapshot . setAllocatedCapacity ( unitySnap . getSize ( ) ) ; snapshot . setProvisionedCapacity ( unitySnap . getSize ( ) ) ; dbClient . createObject ( snapshot ) ; }
public void save $F72 throws IOException { if $F5973 ( props ) { ConfigurationUtil . saveConfigurationProperties ( props , propsFile , _BOOL ) ; } ConfigurationUtil . saveConfigurationProperties ( props , new File ( propsFile . getParentFile ( ) , $F43113 ( propsFile ) ) , _BOOL ) ; }
public static int len $F22381 ( list , delimiter , ignoreEmpty ) { if $F1277 ( delimiter ) return len ( list , delimiter . charAt ( NUM00 ) , ignoreEmpty ) ; $F7782 ( del , delimiter ) int len = StringUtil . length ( list ) ; $F94561 ( len ) int count = NUM00 ; int last = NUM00 ; char c ; for ( $F119 ( i , len ) ) { c = list . charAt ( i ) ; for ( $F1139 ( y , del ) ) { if ( c == del [ y ] ) { if ( ! ignoreEmpty || last < i ) count ++ ; last = i + NUM00 ; $F597 } } } if ( ! ignoreEmpty || last < len ) count ++ ; return count ; }
$F46593 ( checkNotClosed , trimToSize , journalWriter )
public String buildUri ( String representationId , int segmentNumber , int bandwidth , long time ) { $F83 ( builder ) for ( $F119 ( i , identifierCount ) ) { $F6939 ( builder , urlPieces , i ) if ( identifiers [ i ] == REPRESENTATION_ID ) $F288 ( builder , representationId ) else if ( identifiers [ i ] == NUMBER_ID ) { builder . append ( String . format ( Locale . US , identifierFormatTags [ i ] , segmentNumber ) ) ; } else if ( identifiers [ i ] == BANDWIDTH_ID ) { builder . append ( String . format ( Locale . US , identifierFormatTags [ i ] , bandwidth ) ) ; } else if ( identifiers [ i ] == TIME_ID ) { builder . append ( String . format ( Locale . US , identifierFormatTags [ i ] , time ) ) ; } } $F6939 ( builder , urlPieces , identifierCount ) $F92 ( builder ) }
static void dispose ( long pData , long pConfigInfo ) { $F4377 ( rq , OGLRenderQueue ) $F8934 ( rq ) try { OGLContext . setScratchSurface ( pConfigInfo ) ; RenderBuffer buf = rq . getBuffer ( ) ; rq . ensureCapacityAndAlignment ( NUM00 , NUM00 ) ; buf . putInt ( DISPOSE_SURFACE ) ; buf . putLong ( pData ) ; rq . flushNow ( ) ; } $F796 ( rq ) }
private void writeKanjiResourceFile ( File file ) throws IOException { FileOutputStream output = null ; KanjiEscapeOutputStream kanji = null ; OutputStreamWriter writer = null ; BufferedWriter w = null ; try { $F10893 ( output , file ) kanji = new KanjiEscapeOutputStream ( output ) ; writer = new OutputStreamWriter ( kanji ) ; $F35877 ( w , writer ) $F9826 ( w , _sb ) } finally { Util . close ( w ) ; Util . close ( writer ) ; Util . close ( kanji ) ; Util . close ( output ) ; } }
public ScannerException ( File file , ErrorMessages message ) { this ( file , ErrorMessages . get ( message ) , message , - NUM00 , - NUM00 ) ; }
void renderNormal $F72 { glEnable ( GL_DEPTH_TEST ) ; glUseProgram ( this . normalProgram ) ; $F124892 ( glUniformMatrix4fv , viewMatrixUniform , _BOOL , viewMatrix , matrixBuffer ) $F124892 ( glUniformMatrix4fv , projMatrixUniform , _BOOL , projMatrix , matrixBuffer ) $F124892 ( glUniformMatrix3fv , normalMatrixUniform , _BOOL , normalMatrix , matrixBuffer ) glBindFramebufferEXT ( GL_FRAMEBUFFER_EXT , fbo ) ; glClear ( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT ) ; glBindBuffer ( GL_ARRAY_BUFFER , this . cubeVbo ) ; glEnableVertexAttribArray ( NUM00 ) ; glVertexAttribPointer ( NUM00 , NUM00 , GL_FLOAT , _BOOL , NUM00 , NUM00 ) ; glEnableVertexAttribArray ( NUM00 ) ; glVertexAttribPointer ( NUM00 , NUM00 , GL_FLOAT , _BOOL , NUM00 , normalsOffset ) ; glDrawArrays ( GL_TRIANGLES , NUM00 , numVertices ) ; glDisableVertexAttribArray ( NUM00 ) ; glDisableVertexAttribArray ( NUM00 ) ; glBindBuffer ( GL_ARRAY_BUFFER , NUM00 ) ; glBindFramebufferEXT ( GL_FRAMEBUFFER_EXT , NUM00 ) ; glUseProgram ( NUM00 ) ; }
private < T extends CWLResource > $F5675 lookForResources ( CWLResourceType type , $F20474 clazz ) { $F5675 resources = getRequirements ( type , clazz ) ; if $F45555 ( resources ) { resources = getHints ( type , clazz ) ; } return resources ; }
private void calcYValueSum $F72 { mYValueSum = NUM00 ; for ( $F2277 ( i , mYVals ) ) { $F14726 ( e , mYVals , i ) if ( e != null ) mYValueSum += Math . abs ( e . getVal ( ) ) ; } }
$F1 public boolean release ( int decrement ) { $F9303 ( isEmpty , _BOOL ) if ( decrement < NUM00 ) { throw new IllegalStateException ( String . format ( NUM00 , decrement , toVerboseString ( ) ) ) ; } final int refCnt = ledger . decrement ( decrement ) ; if ( BaseAllocator . DEBUG ) { historicalLog . recordEvent ( NUM00 , decrement , refCnt + decrement ) ; } if ( refCnt < NUM00 ) { throw new IllegalStateException ( String . format ( NUM00 , id , toVerboseString ( ) ) ) ; } return refCnt == NUM00 ; }
$F82267 ( expression , errorMessage , String )
int listSize $F72 { int result = memSize ( ) ; for ( Iterator it = iterator ( ) ; it . hasNext ( ) ; ) { ASTNode child = ( ASTNode ) it . next ( ) ; result += child . treeSize ( ) ; } return result ; }
public ConnectionTcp findConnectionByThreadId ( long threadId ) { for ( PortTcp listener : getPorts ( ) ) { ConnectionTcp conn = listener . findConnectionByThreadId ( threadId ) ; $F60730 ( conn ) } $F1274 }
public UniformDistribution estimate ( double min , double max , final int count ) { double grow = ( count > NUM00 ) ? NUM00 * ( max - min ) / ( count - NUM00 ) : NUM00 ; return new UniformDistribution ( Math . max ( min - grow , - Double . MAX_VALUE ) , Math . min ( max + grow , Double . MAX_VALUE ) ) ; }
public static RepositoryMetaData readFrom ( StreamInput in ) throws IOException { String name = in . readString ( ) ; String type = in . readString ( ) ; Settings settings = Settings . readSettingsFromStream ( in ) ; return new RepositoryMetaData ( name , type , settings ) ; }
public static boolean isPrimitiveDatatype ( IRI datatype ) { return datatype . equals ( XMLSchema . DURATION ) || datatype . equals ( XMLSchema . DATETIME ) || datatype . equals ( XMLSchema . TIME ) || datatype . equals ( XMLSchema . DATE ) || datatype . equals ( XMLSchema . GYEARMONTH ) || datatype . equals ( XMLSchema . GYEAR ) || datatype . equals ( XMLSchema . GMONTHDAY ) || datatype . equals ( XMLSchema . GDAY ) || datatype . equals ( XMLSchema . GMONTH ) || datatype . equals ( XMLSchema <missing ')'> . <missing ';'> NUM00 ) || datatype . equals ( XMLSchema . BOOLEAN ) || datatype . equals ( XMLSchema . BASE64BINARY ) || datatype . equals ( XMLSchema . HEXBINARY ) || datatype . equals ( XMLSchema . FLOAT ) || datatype . equals ( XMLSchema . DECIMAL ) || datatype . equals ( XMLSchema . DOUBLE ) || datatype . equals ( XMLSchema . ANYURI ) || datatype . equals ( XMLSchema . QNAME ) || datatype . equals ( XMLSchema . NOTATION ) ; }
protected void appendLine ( JComponent c ) { c . setAlignmentX ( NUM00 ) ; contents . add ( c ) ; }
private void addLinks ( final SpannableString string , final long accountId , final long extraId , final int type , final boolean sensitive , final OnLinkClickListener listener , final int highlightOption ) { switch ( type ) { case LINK_TYPE_MENTION : { addMentionOrListLinks ( string , accountId , extraId , highlightOption , listener ) ; $F597 } case LINK_TYPE_HASHTAG : { addHashtagLinks ( string , accountId , extraId , listener , highlightOption ) ; $F597 } case LINK_TYPE_LINK : { final URLSpan [ ] spans = string . getSpans ( NUM00 , string . length ( ) , $F541677 ) ; for ( final URLSpan span : spans ) { final int start = string . getSpanStart ( span ) ; final int end = string . getSpanEnd ( span ) ; if ( $F128898 ( start , end , string ) || start > end ) $F1448 string . removeSpan ( span ) ; applyLink ( span . getURL ( ) , start , end , string , accountId , extraId , LINK_TYPE_LINK , sensitive , highlightOption , listener ) ; } final List < Extractor . Entity > urls = mExtractor . extractURLsWithIndices ( ParseUtils . parseString ( string ) ) ; for ( final Extractor . Entity entity : urls ) { final int start = entity . getStart ( ) , end = entity . getEnd ( ) ; if ( entity . getType ( ) != Extractor . Entity . Type . URL || string . getSpans ( start , end , $F541677 ) . length > NUM00 ) $F1448 applyLink ( entity . getValue ( ) , start , end , string , accountId , extraId , LINK_TYPE_LINK , sensitive , highlightOption , listener ) ; } $F597 } case LINK_TYPE_STATUS : { final URLSpan [ ] spans = string . getSpans ( NUM00 , string . length ( ) , $F541677 ) ; for ( final URLSpan span : spans ) { final Matcher matcher = PATTERN_TWITTER_STATUS . matcher ( span . getURL ( ) ) ; if $F24133 ( matcher ) { final int start = string . getSpanStart ( span ) ; final int end = string . getSpanEnd ( span ) ; final String url = matcherGroup ( matcher , GROUP_ID_TWITTER_STATUS_STATUS_ID ) ; string . removeSpan ( span ) ; applyLink ( url , start , end , string , accountId , extraId , LINK_TYPE_STATUS , sensitive , highlightOption , listener ) ; } } $F597 } case LINK_TYPE_CASHTAG : { addCashtagLinks ( string , accountId , extraId , listener , highlightOption ) ; $F597 } $F1267 $F932 } }
public void postProcess $F72 { if ( foreignColumnName != null ) { foreignAutoRefresh = _BOOL ; } if ( foreignAutoRefresh && maxForeignAutoRefreshLevel == DatabaseField . NO_MAX_FOREIGN_AUTO_REFRESH_LEVEL_SPECIFIED ) { maxForeignAutoRefreshLevel = DatabaseField . DEFAULT_MAX_FOREIGN_AUTO_REFRESH_LEVEL ; } }
public boolean contains ( Node s ) { runTo ( - NUM00 ) ; $F161848 ( m_map , _BOOL ) for ( $F119 ( i , m_firstFree ) ) { Node node = m_map [ i ] ; if ( ( null != node ) && node . equals ( s ) ) return _BOOL ; } return _BOOL ; }
private void persistNewTemp ( File fileCfg ) { if $F10471 ( hsDeleteOnExit ) { logDebug ( LogArea . CONFIG , NUM00 ) ; $F1900 ( fileCfg ) $F665 } logDebug ( LogArea . CONFIG , NUM00 , hsDeleteOnExit . size ( ) , fileCfg . getAbsolutePath ( ) ) ; BufferedWriter writer = null ; try { $F92873 ( writer , fileCfg ) for ( File file : hsDeleteOnExit ) { if $F7119 ( file ) { $F8811 ( f , file ) writer . write ( f ) ; $F1769 ( writer ) logWarn ( LogArea . JAR , NUM00 , f ) ; } } } $F29052 $F34262 ( writer ) }
public static double clamp $F7635 ( value , low , high ) { return Math . min ( Math . max ( value , low ) , high ) ; }
public void addWritten $F97 ( value ) { $F8934 ( writeSetLock ) writeSet . add ( new TimestampValuePair ( ets , value ) ) ; $F704 ( writeSetLock ) }
public void load ( Entity unit ) throws IllegalArgumentException { if ( ! canLoad ( unit ) ) { throw new IllegalArgumentException ( NUM00 + unit . getShortName ( ) + NUM00 ) ; } currentSpace -= NUM00 ; troops . addElement ( unit . getId ( ) ) ; }
private void processWorkerExit ( Worker w , boolean completedAbruptly ) { $F32367 ( completedAbruptly , decrementWorkerCount ) $F677 ( mainLock , this ) $F8934 ( mainLock ) try { completedTaskCount += w . completedTasks ; workers . remove ( w ) ; } $F796 ( mainLock ) tryTerminate ( ) ; $F8943 ( c , ctl ) if ( runStateLessThan ( c , STOP ) ) { if ( ! completedAbruptly ) { int min = allowCoreThreadTimeOut ? NUM00 : corePoolSize ; if ( min == NUM00 && $F1030 ( workQueue ) ) min = NUM00 ; if ( workerCountOf ( c ) >= min ) $F665 } addWorker ( null , _BOOL ) ; } }
public void finish $F72 throws IOException { if $F197883 ( def ) { $F1571 ( def ) while $F197883 ( def ) { int len = def . deflate ( buf , NUM00 , buf . length ) ; if ( def . finished ( ) && len <= buf . length - TRAILER_SIZE ) { writeTrailer ( buf , len ) ; len = len + TRAILER_SIZE ; $F11584 ( out , buf , len ) $F665 } if ( len > NUM00 ) $F11584 ( out , buf , len ) } $F2175 ( trailer , TRAILER_SIZE ) writeTrailer ( trailer , NUM00 ) ; out . write ( trailer ) ; } }
public boolean free ( T obj ) { AtomicInteger topRef = _top ; while ( _BOOL ) { $F87905 ( top , topRef ) $F24599 ( _capacity , top , _BOOL ) boolean isFree = _freeStack . compareAndSet ( top , null , obj ) ; $F26080 ( topRef , top ) ; $F9303 ( isFree , _BOOL ) } }
public static boolean hasBinding ( Injector injector , Key $F1011 key ) { Binding $F1011 binding = getBinding ( injector , key ) ; return binding != null ; }
private OpenReplicatorManagerMBean createInternalService ( String serviceName ) throws ReplicatorException { $F556 ( logger , serviceName ) try { OpenReplicatorManager orm = new OpenReplicatorManager ( serviceName ) ; orm . setRmiHost ( managerRMIHost ) ; orm . setRmiPort ( managerRMIPort ) ; orm . setHostTimeZone ( hostTimeZone ) ; orm . setReplicatorTimeZone ( replicatorTimeZone ) ; orm . advertiseInternal ( ) ; orm . setSecurityInfo ( this . securityInfo ) ; return ( OpenReplicatorManagerMBean ) orm ; } catch ( Exception e ) { throw new ReplicatorException $F152836 ( String , serviceName , e ) ; } }
public static CheckIndex . Status checkIndex ( Directory dir ) throws IOException $F8587 ( checkIndex , dir , _BOOL )
static void policyChanged ( String serviceTypeName , PolicyEvent pe ) { $F19232 ( DEBUG , serviceTypeName ) resourceNamesMap . remove ( serviceTypeName ) ; Cache resourceNamesCache = ( Cache ) resourceNamesMap . get ( serviceTypeName ) ; if $F10122 ( resourceNamesCache ) $F932 try { $F9464 ( DEBUG ) ServiceTypeManager stm = ServiceTypeManager . getServiceTypeManager ( ) ; ServiceType serviceType = stm . getServiceType ( serviceTypeName ) ; $F19850 ( resourceNamesToRemove ) synchronized ( resourceNamesCache ) { $F10529 ( resourceNames , resourceNamesCache ) while $F1444 ( resourceNames ) { $F14952 ( resourceName , resourceNames ) $F36399 ( resourceNamesToRemove , resourceName ) Set affectedResourceNames = pe . getResourceNames ( ) ; $F10531 ( iter , affectedResourceNames ) while $F2921 ( iter ) { $F2778 ( affectedResourceName , iter ) if ( serviceType . compare ( resourceName , affectedResourceName ) != ResourceMatch . NO_MATCH ) $F207 ( resourceNamesToRemove , resourceName ) } } $F10531 ( iter1 , resourceNamesToRemove ) while $F2921 ( iter1 ) { $F2778 ( resourceNameToRemove , iter1 ) resourceNamesCache . remove ( resourceNameToRemove ) ; } } } catch ( SSOException e ) $F5198 ( DEBUG , e ) catch ( PolicyException pex ) $F5198 ( DEBUG , pex ) if $F6299 ( DEBUG ) { DEBUG . message ( NUM00 + serviceTypeName + NUM00 + resourceNamesMap . get ( serviceTypeName ) ) ; } }
private void startHideAnimations $F72 { animationPlaying = _BOOL ; lightAnimationLayout ( ) ; if ( buttonType . equals ( ButtonType . CIRCLE ) ) { if ( hideOrderType . equals ( OrderType . DEFAULT ) ) { for ( $F119 ( i , buttonNum ) ) { setHideAnimation ( dots [ i ] , circleButtons [ i ] , endLocations [ i ] , startLocations [ i ] , i ) ; } } else if ( hideOrderType . equals ( OrderType . REVERSE ) ) { for ( $F119 ( i , buttonNum ) ) { setHideAnimation ( dots [ i ] , circleButtons [ i ] , endLocations [ i ] , startLocations [ i ] , buttonNum - i - NUM00 ) ; } } else if ( hideOrderType . equals ( OrderType . RANDOM ) ) { $F6822 ( random ) $F57515 ( used , buttonNum ) for ( $F119 ( i , buttonNum ) ) used [ i ] = _BOOL ; int count = NUM00 ; while ( _BOOL ) { $F123945 ( i , random , buttonNum ) if ( ! used [ i ] ) { used [ i ] = _BOOL ; setHideAnimation ( dots [ count ] , circleButtons [ count ] , endLocations [ count ] , startLocations [ count ] , i ) ; count ++ ; $F67767 ( count , buttonNum ) } } } } else if ( buttonType . equals ( ButtonType . HAM ) ) { if ( hideOrderType . equals ( OrderType . DEFAULT ) ) { for ( $F119 ( i , buttonNum ) ) { setHideAnimation ( bars [ i ] , hamButtons [ i ] , endLocations [ i ] , startLocations [ i ] , i ) ; } } else if ( hideOrderType . equals ( OrderType . REVERSE ) ) { for ( $F119 ( i , buttonNum ) ) { setHideAnimation ( bars [ i ] , hamButtons [ i ] , endLocations [ i ] , startLocations [ i ] , buttonNum - i - NUM00 ) ; } } else if ( hideOrderType . equals ( OrderType . RANDOM ) ) { $F6822 ( random ) $F57515 ( used , buttonNum ) for ( $F119 ( i , buttonNum ) ) used [ i ] = _BOOL ; int count = NUM00 ; while ( _BOOL ) { $F123945 ( i , random , buttonNum ) if ( ! used [ i ] ) { used [ i ] = _BOOL ; setHideAnimation ( bars [ count ] , hamButtons [ count ] , endLocations [ count ] , startLocations [ count ] , i ) ; count ++ ; $F67767 ( count , buttonNum ) } } } } }
public TaggedOutputStream ( OutputStream proxy ) { super ( proxy ) ; }
public List < MType > build $F72 { isClean = _BOOL ; if ( ! isMessagesListMutable && builders == null ) { return messages ; } boolean allMessagesInSync = _BOOL ; if ( ! isMessagesListMutable ) { for ( $F2277 ( i , messages ) ) { Message message = messages . get ( i ) ; $F20980 builder = builders . get ( i ) ; if ( builder != null ) { if ( builder . build ( ) != message ) $F3468 ( allMessagesInSync , _BOOL ) } } $F9303 ( allMessagesInSync , messages ) } ensureMutableMessageList ( ) ; for ( $F2277 ( i , messages ) ) { messages . set ( i , getMessage ( i , _BOOL ) ) ; } $F5939 ( messages , Collections ) isMessagesListMutable = _BOOL ; return messages ; }
public static void putShort ( long addr , short val ) { if ( UNALIGNED ) UNSAFE . putShort ( addr , val ) ; else putShortByByte ( addr , val , BIG_ENDIAN ) ; }
public static $F96 hashTwice $F24576 ( input , offset , length ) { MessageDigest digest = newDigest ( ) ; digest . update ( input , offset , length ) ; return digest . digest ( digest . digest ( ) ) ; }
public PronounceableFSM ( URL url , boolean scanFromFront ) throws IOException { this . scanFromFront = scanFromFront ; $F83713 ( is , Utilities , url ) loadText ( is ) ; $F59 ( is ) }
private $F1469 applyFloatPadding ( final $F1469 ca4 , final boolean noDigits ) { $F1469 ca5 = ca4 ; if ( fieldWidthSet ) { int i ; int j ; final int nBlanks ; if ( leftJustify ) { nBlanks = fieldWidth - ca4 . length ; if ( nBlanks > NUM00 ) { ca5 = new char [ ca4 . length + nBlanks ] ; for ( $F6929 ( i , ca4 ) ) $F15086 ( ca5 , i , ca4 ) for ( j = NUM00 ; j < nBlanks ; j ++ , i ++ ) $F114344 ( ca5 , i ) } } else if ( ! leadingZeros || noDigits ) { nBlanks = fieldWidth - ca4 . length ; if ( nBlanks > NUM00 ) { ca5 = new char [ ca4 . length + nBlanks ] ; for ( i = NUM00 ; i < nBlanks ; i ++ ) $F114344 ( ca5 , i ) for ( j = NUM00 ; j < ca4 . length ; i ++ , j ++ ) $F20651 ( ca5 , i , ca4 , j ) } } else if ( leadingZeros ) { nBlanks = fieldWidth - ca4 . length ; if ( nBlanks > NUM00 ) { ca5 = new char [ ca4 . length + nBlanks ] ; i = NUM00 ; j = NUM00 ; if ( ca4 [ NUM00 ] == NUM00 ) { ca5 [ NUM00 ] = NUM00 ; i ++ ; j ++ ; } for ( $F259650 ( k , nBlanks , i ) ) $F114344 ( ca5 , i ) for ( ; j < ca4 . length ; i ++ , j ++ ) $F20651 ( ca5 , i , ca4 , j ) } } } return ca5 ; }
public Object put ( String key , Object value ) { $F22998 ( len , key ) if ( len > m_charBuffer . length ) { $F104602 ( m_charBuffer , len ) } Node node = m_Root ; for ( $F119 ( i , len ) ) { Node nextNode = $F432461 ( node , Character , key , i ) ; if ( nextNode != null ) { node = nextNode ; } else { for ( ; i < len ; i ++ ) { Node newNode = new Node $F72 ; if ( m_lowerCaseOnly ) { $F432461 ( node , Character , key , i ) = newNode ; } else { node . m_nextChar [ $F29169 ( Character , key , i ) ] = newNode ; $F432461 ( node , Character , key , i ) = newNode ; } node = newNode ; } $F597 } } Object ret = node . m_Value ; node . m_Value = value ; return ret ; }
$F1 public void makeImmutable $F72 { if ( isMutable ) { if ( authnStatements != null ) { $F2199 ( length , authnStatements ) for ( $F119 ( i , length ) ) { AuthnStatement authn = ( AuthnStatement ) authnStatements . get ( i ) ; $F118294 ( authn ) } $F5939 ( authnStatements , Collections ) } if ( authzDecisionStatements != null ) { $F2199 ( length , authzDecisionStatements ) for ( $F119 ( i , length ) ) { AuthzDecisionStatement authz = ( AuthzDecisionStatement ) authzDecisionStatements . get ( i ) ; $F118294 ( authz ) } $F5939 ( authzDecisionStatements , Collections ) } if ( attributeStatements != null ) { $F2199 ( length , attributeStatements ) for ( $F119 ( i , length ) ) { AttributeStatement attr = ( AttributeStatement ) attributeStatements . get ( i ) ; $F118294 ( attr ) } $F5939 ( attributeStatements , Collections ) } $F5941 ( statements , Collections ) $F303803 ( conditions ) $F303803 ( issuer ) $F303803 ( subject ) $F303803 ( advice ) isMutable = _BOOL ; } }
$F1 public String findLibrary ( String name ) { String systemName = System . mapLibraryName ( name ) ; ArrayList < Loader > loaders = getLoaders ( ) ; for ( $F2277 ( i , loaders ) ) { Loader loader = loaders . get ( i ) ; Path path = loader . getPath ( systemName ) ; if ( path != null && path . canRead ( ) ) { return path . getNativePath ( ) ; } path = loader . getPath ( NUM00 + systemName ) ; if ( path != null && path . canRead ( ) ) { return path . getNativePath ( ) ; } } for ( $F2277 ( i , _nativePath ) ) { $F77510 ( path , _nativePath , i ) if $F351048 ( path ) return path . getNativePath ( ) ; } return super . findLibrary ( name ) ; }
public void removeComponentListener ( final ComponentUpdateListener listener ) $F106 ( componentListeners , listener )
public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { $F3366 return APPKEY ; $F3366 return SEND_TIME ; $F3366 return LOAD_INFO ; $F3366 return STATUS ; $F20809 } }
public static boolean isEmpty ( CharSequence text ) $F215747 ( text )
protected $F96 assertEncodeDecode ( final IGangliaMetadataMessage decl , final IGangliaMessage expected ) { $F10057 ( expected ) final XDROutputBuffer xdr = new XDROutputBuffer ( IGangliaDefaults . BUFFER_SIZE ) ; final GangliaMessageEncoder31 messageEncoder = new GangliaMessageEncoder31 $F72 ; final GangliaMessageDecoder31 messageDecoder = new GangliaMessageDecoder31 $F72 ; if ( expected . isMetricRequest ( ) ) { messageEncoder . writeRequest ( xdr , ( IGangliaRequestMessage ) expected ) ; } else if ( expected . isMetricMetadata ( ) ) { messageEncoder . writeMetadata ( xdr , ( IGangliaMetadataMessage ) expected ) ; } else if ( expected . isMetricValue ( ) ) { $F19273 ( decl ) messageEncoder . writeMetric ( xdr , decl , ( IGangliaMetricMessage ) expected ) ; } else $F10176 final IGangliaMessage actual = messageDecoder . decode ( xdr . getBuffer ( ) , NUM00 , xdr . getLength ( ) ) ; assertEquals ( NUM00 , expected , actual ) ; final $F96 actualData = new byte [ xdr . getLength ( ) ] ; System . arraycopy ( xdr . getBuffer ( ) , NUM00 , actualData , NUM00 , actualData . length ) ; return actualData ; }
private boolean isIndexable ( String term ) { return $F3599 ( term ) && $F4012 ( term ) ; }
private void sendResponse ( String status , String mime , Properties header , InputStream data ) { try { if ( status == null ) $F9283 $F147972 ( out , mySocket ) $F80496 ( pw , out ) $F147974 ( pw , status ) if ( mime != null ) $F147974 ( pw , mime ) if ( header == null || header . getProperty ( NUM00 ) == null ) pw . print ( $F52171 ( gmtFrmt ) + NUM00 ) ; if ( header != null ) { $F10529 ( e , header ) while $F1444 ( e ) { $F14952 ( key , e ) $F7601 ( value , header , key ) pw . print ( key + NUM00 + value + NUM00 ) ; } } $F21384 ( pw ) $F1206 ( pw ) if ( data != null ) { $F12496 ( buff ) while ( _BOOL ) { int read = $F3259 ( data , buff ) ; $F137919 ( read ) $F11584 ( out , buff , read ) } } $F1206 ( out ) $F59 ( out ) $F711 ( data ) } catch ( IOException ioe ) { try $F881 ( mySocket ) $F58785 } }
public static String decode ( String encoded , AMEncryption encr ) { if ( checkCaller ( ) ) { try { ISSecurityPermission isp = new ISSecurityPermission $F6600 ; if ( securityManager != null ) { securityManager . checkPermission ( isp ) ; } } catch ( SecurityException e ) { $F5348 ( debug , Debug ) $F66414 ( debug , e ) $F1274 } } if $F6036 ( encoded ) $F119112 $F5475 ( encData ) encData = Base64 . decode ( encoded . trim ( ) ) ; $F1338 ( encData ) $F96 rawData = encr . decrypt ( encData ) ; if ( rawData == null ) $F119112 String answer = null ; try { $F116025 ( answer , rawData ) ; } catch ( UnsupportedEncodingException uue ) { $F5348 ( debug , Debug ) $F5197 ( debug , uue ) $F84838 ( answer , rawData ) } return ( answer ) ; }
protected void waitForShutdownSignal $F72 throws InterruptedException { if ( mutexWaiting == null ) $F60848 ( mutexWaiting ) try { synchronized ( mutexWaiting ) $F28646 ( mutexWaiting ) } catch ( InterruptedException e ) { if ( ! shutdown ) throw e ; } }
public void addConnection ( Connection connection ) { $F19273 ( connection ) synchronized ( connectionsLock ) { Connection [ ] newConnections = new Connection $F22598 ( connections ) ; newConnections [ NUM00 ] = connection ; $F7057 ( System , connections , newConnections ) connections = newConnections ; } connection . addListener ( invokeListener ) ; if ( TRACE ) trace ( NUM00 , NUM00 + connection ) ; }
public double distance ( Point2D pt ) { final double x_distance = ( pt . getX ( ) - x ) * ( pt . getX ( ) - x ) ; final double y_distance = ( pt . getY ( ) - y ) * ( pt . getY ( ) - y ) ; return Math . sqrt ( x_distance + y_distance ) ; }
$F9749 ( namespace , attName , attValue , xmlWriter , registerPrefix )
private static int convertToInt ( String value , int defaultValue ) { String trim = value . trim ( ) ; $F25111 ( trim , defaultValue ) $F15516 ( Integer , trim ) }
public ChainIterable $F4203 addItem ( $F1113 T item ) { return ( ChainIterable $F4203 ) super . add ( Collections . $F4203 singleton ( item ) ) ; }
private void updateStateView ( int itCount , Collection < Individual $F12404 > gen ) { $F5454 ( Platform ) simPaneCtrl . waitAfterStep ( ) ; }
$F1 public void run $F72 { try { for ( $F589 ) { int n = portGetn ( port , bufferAddress , MAX_EVENT_COUNT ) ; assert n > NUM00 ; long address = bufferAddress ; for ( $F119 ( i , n ) ) { boolean shutdown = processEvent ( address ) ; $F5453 ( shutdown ) address += SIZEOF_PORT_EVENT ; } } } catch ( UnixException x ) $F302 ( x ) }
$F1 public $F3803 allKeys $F72 { $F24645 ( nameFiles ) $F5459 ( files , cacheDirectory ) $F397 ( files , nameFiles ) for ( File file : files ) { if $F7110 ( file ) $F29791 ( nameFiles , file ) } return nameFiles ; }
public DialogueRecorder ( DialogueSystem system ) { this . settings = system . getSettings ( ) ; }
private String generateUniqueFutureId $F72 { return String . valueOf ( mIdCounter . getAndIncrement ( ) ) ; }
private static final void rescheduleMissedAlarms ( ContentResolver cr , Context context , AlarmManagerInterface manager ) { $F657 ( now , System ) long ancient = now - DateUtils . DAY_IN_MILLIS ; $F806 projection = new String [ ] { CalendarContract . CalendarAlerts . ALARM_TIME } ; if ( $F215008 ( Build ) && ContextCompat . checkSelfPermission ( context , Manifest . permission . READ_CALENDAR ) != PackageManager . PERMISSION_GRANTED ) $F13528 ( Log , TAG ) Cursor cursor = cr . query ( CalendarAlerts . CONTENT_URI , projection , WHERE_RESCHEDULE_MISSED_ALARMS , ( new String [ ] { Long . toString ( now ) , Long . toString ( ancient ) , Long . toString ( now ) } ) , SORT_ORDER_ALARMTIME_ASC ) ; $F2329 ( cursor ) if ( DEBUG ) { Log . d ( TAG , NUM00 + cursor . getCount ( ) ) ; } try { long alarmTime = - NUM00 ; while $F12260 ( cursor ) { long newAlarmTime = cursor . getLong ( NUM00 ) ; if ( alarmTime != newAlarmTime ) { if ( DEBUG ) { $F248237 ( Log , TAG , newAlarmTime ) } AlertUtils . scheduleAlarm ( context , manager , newAlarmTime ) ; alarmTime = newAlarmTime ; } } } $F3229 ( cursor ) }
public void addName ( String name ) $F207 ( m_names , name )
$F1 default CompletableFuture < OptionalDouble > minDouble ( final ToDoubleFunction $F11632 fn ) $F257945 ( CompletableFuture , getExec )
private boolean toState ( LifecycleState newState ) { LifecycleState state ; synchronized ( this ) { state = _state ; _state = newState ; $F9171 ( _lastChangeTime , CurrentTime ) } if ( _log != null && _log . isLoggable ( _lowLevel ) ) { _log . log ( _lowLevel , newState + NUM00 + _name ) ; } notifyListeners ( state , newState ) ; return _BOOL ; }
public boolean initDialog $F72 { $F156357 ( log ) $F475957 ( gbc , GridBagConstraints ) gbc . weightx = NUM00 ; gbc . weighty = NUM00 ; gbc . gridy = m_line ++ ; gbc . gridx = NUM00 ; gbc . gridwidth = NUM00 ; gbc . insets = nullInset ; $F45961 ( gbc , GridBagConstraints ) centerPanel . add ( Box . createVerticalStrut ( NUM00 ) , gbc ) ; MClient client = MClient . get ( Env . getCtx ( ) ) ; String ASPFilter = NUM00 ; if ( client . isUseASP ( ) ) ASPFilter = $F40 + client . getAD_Client_ID ( ) + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + client . getAD_Client_ID ( ) + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + client . getAD_Client_ID ( ) + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 ; String sql = null ; if ( Env . isBaseLanguage ( $F9205 ( Env ) ) ) sql = $F34354 + NUM00 + NUM00 + ASPFilter + NUM00 ; else sql = $F34354 + NUM00 + NUM00 + NUM00 + Env . getAD_Language ( Env . getCtx ( ) ) + NUM00 + NUM00 + ASPFilter + NUM00 ; boolean hasFields = _BOOL ; try { $F46 ( pstmt , DB , sql ) pstmt . setInt ( NUM00 , m_processInfo . getAD_Process_ID ( ) ) ; $F49 ( rs , pstmt ) while $F1682 ( rs ) { hasFields = _BOOL ; createField ( rs ) ; } $F59 ( rs ) $F59 ( pstmt ) } $F64 ( log , Level , sql , e ) if ( $F15255 ( m_mFields , m_mFields2 ) || $F15255 ( m_mFields , m_vEditors ) || $F15255 ( m_mFields2 , m_vEditors2 ) ) $F81302 ( log , Level ) if ( hasFields ) { gbc . gridy = m_line ++ ; centerPanel . add ( Box . createVerticalStrut ( NUM00 ) , gbc ) ; gbc . gridx = NUM00 ; centerPanel . add ( Box . createHorizontalStrut ( NUM00 ) , gbc ) ; AEnv . positionCenterWindow ( m_frame , this ) ; } else dispose ( ) ; return hasFields ; }
$F1 protected String dateToString ( DateTimeData date ) { $F75240 ( message ) $F84 ( message ) $F84 ( message ) append ( message , date . month , NUM00 ) ; append ( message , ( char ) date . utc , NUM00 ) ; $F92 ( message ) }
private void addTest ( Test newTest ) { if ( m_RuleList == null ) { m_RuleList = new ArrayList $F129241 $F72 ; } m_RuleList . add ( newTest ) ; }
public double nextDouble ( double alpha , double lambda ) { double a = alpha ; double aa = - NUM00 , aaa = - NUM00 , b = NUM00 , c = NUM00 , d = NUM00 , e , r , s = NUM00 , si = NUM00 , ss = NUM00 , q0 = NUM00 , q1 = NUM00 , q2 = NUM00 , q3 = NUM00 , q4 = NUM00 , q5 = - NUM00 , q6 = NUM00 , q7 = NUM00 , q8 = - NUM00 , q9 = NUM00 , a1 = NUM00 , a2 = - NUM00 , a3 = NUM00 , a4 = - NUM00 , a5 = NUM00 , a6 = - NUM00 , a7 = NUM00 , a8 = - NUM00 , a9 = NUM00 , e1 = NUM00 , e2 = NUM00 , e3 = NUM00 , e4 = NUM00 , e5 = NUM00 , e6 = NUM00 , e7 = NUM00 ; double gds , p , q , t , sign_u , u , v , w , x ; double v1 , v2 , v12 ; $F61934 ( a ) if ( lambda <= NUM00 ) new IllegalArgumentException $F72 ; if ( a < NUM00 ) { b = NUM00 + NUM00 * a ; for ( $F589 ) { p = b * randomGenerator . raw ( ) ; if ( p <= NUM00 ) { gds = Math . exp ( Math . log ( p ) / a ) ; if ( Math . log ( randomGenerator . raw ( ) ) <= - gds ) return ( gds / lambda ) ; } else { gds = - Math . log ( ( b - p ) / a ) ; if ( Math . log ( randomGenerator . raw ( ) ) <= ( $F207655 ( a , Math , gds ) ) ) return ( gds / lambda ) ; } } } else { if ( a != aa ) { aa = a ; ss = a - NUM00 ; s = Math . sqrt ( ss ) ; d = NUM00 - NUM00 * s ; } do { $F217616 ( v1 , randomGenerator ) $F217616 ( v2 , randomGenerator ) v12 = v1 * v1 + v2 * v2 ; } while ( v12 > NUM00 ) ; t = v1 * Math . sqrt ( $F130364 ( Math , v12 ) / v12 ) ; x = s + NUM00 * t ; gds = x * x ; if ( t >= NUM00 ) return ( gds / lambda ) ; $F76340 ( u , randomGenerator ) if ( d * u <= t * t * t ) return ( gds / lambda ) ; if ( a != aaa ) { aaa = a ; r = NUM00 / a ; q0 = ( ( ( ( ( $F146438 ( q9 , r , q8 , q7 , q6 ) * r + q5 ) * r + q4 ) * r + q3 ) * r + q2 ) * r + q1 ) * r ; if ( a > NUM00 ) { if ( a > NUM00 ) { b = NUM00 ; si = NUM00 ; c = NUM00 / s ; } else { b = NUM00 + NUM00 * ss ; si = NUM00 / s + NUM00 ; c = NUM00 / s + NUM00 ; } } else { b = NUM00 + s - NUM00 * ss ; si = NUM00 ; c = NUM00 / s - NUM00 + NUM00 * s ; } } if ( x > NUM00 ) { v = t / ( s + s ) ; if $F33322 ( Math , v ) { q = q0 - s * t + NUM00 * t * t + ( ss + ss ) * Math . log ( NUM00 + v ) ; } else { q = q0 + NUM00 * t * t * ( ( ( ( ( $F146438 ( a9 , v , a8 , a7 , a6 ) * v + a5 ) * v + a4 ) * v + a3 ) * v + a2 ) * v + a1 ) * v ; } if ( Math . log ( NUM00 - u ) <= q ) return ( gds / lambda ) ; } for ( $F589 ) { do { e = - Math . log ( randomGenerator . raw ( ) ) ; $F76340 ( u , randomGenerator ) u = u + u - NUM00 ; sign_u = $F215903 ( u ) ; t = b + ( e * si ) * sign_u ; } while ( t <= - NUM00 ) ; v = t / ( s + s ) ; if $F33322 ( Math , v ) { q = q0 - s * t + NUM00 * t * t + ( ss + ss ) * Math . log ( NUM00 + v ) ; } else { q = q0 + NUM00 * t * t * ( ( ( ( ( $F146438 ( a9 , v , a8 , a7 , a6 ) * v + a5 ) * v + a4 ) * v + a3 ) * v + a2 ) * v + a1 ) * v ; } if ( q <= NUM00 ) $F598 if ( q > NUM00 ) { w = Math . exp ( q ) - NUM00 ; } else { w = ( ( ( $F146438 ( e7 , q , e6 , e5 , e4 ) * q + e3 ) * q + e2 ) * q + e1 ) * q ; } if ( c * u * sign_u <= w * Math . exp ( e - NUM00 * t * t ) ) { x = s + NUM00 * t ; return ( x * x / lambda ) ; } } } }
public void swap ( int i , int j ) { x . assertTrue ( i < list . size ( ) ) ; x . assertTrue ( j < list . size ( ) ) ; list . set ( i , list . set ( j , list . get ( i ) ) ) ; }
private $F131866 buildIPTParameters ( Ipt ipt , String organisationKey ) { $F203157 ( data ) if ( ipt != null && organisationKey != null ) { data . add ( new BasicNameValuePair ( NUM00 , StringUtils . trimToEmpty ( organisationKey ) ) ) ; data . add ( new BasicNameValuePair ( NUM00 , StringUtils . trimToEmpty ( ipt . getName ( ) ) ) ) ; data . add ( new BasicNameValuePair ( NUM00 , StringUtils . trimToEmpty ( ipt . getDescription ( ) ) ) ) ; data . add ( new BasicNameValuePair ( NUM00 , StringUtils . trimToEmpty ( ipt . getPrimaryContactType ( ) ) ) ) ; data . add ( new BasicNameValuePair ( NUM00 , StringUtils . trimToEmpty ( ipt . getPrimaryContactName ( ) ) ) ) ; data . add ( new BasicNameValuePair ( NUM00 , StringUtils . trimToEmpty ( ipt . getPrimaryContactEmail ( ) ) ) ) ; $F50132 ( data , SERVICE_TYPE_RSS ) data . add ( new BasicNameValuePair $F59470 ( getRssFeedURL ) ) ; } else $F981 ( log ) return data ; }
public static < T , U extends Closeable > T withCloseable ( U self , @ ClosureParams ( value = FirstParam . class ) $F158697 action ) throws IOException { try { T result = action . call ( self ) ; Closeable temp = self ; self = null ; $F59 ( temp ) return result ; } finally { DefaultGroovyMethodsSupport . closeWithWarning ( self ) ; } }
public static boolean isMatch ( String actualString , LinkedList patterns , char wildCard ) { boolean matched = _BOOL ; for ( ListIterator iter = patterns . listIterator ( NUM00 ) ; iter . hasNext ( ) ; ) { if ( isMatch ( actualString , $F2775 ( iter ) , wildCard ) ) $F3468 ( matched , _BOOL ) } return matched ; }
public synchronized void addServer ( ServerLocation location , $F806 groups , ServerLoad initialLoad , long loadPollInterval ) { serverGroupMap . put ( location , groups ) ; LoadHolder connectionLoad = new LoadHolder ( location , initialLoad . getConnectionLoad ( ) , initialLoad . getLoadPerConnection ( ) , loadPollInterval ) ; addGroups ( connectionLoadMap , groups , connectionLoad ) ; LoadHolder queueLoad = new LoadHolder ( location , initialLoad . getSubscriptionConnectionLoad ( ) , initialLoad . getLoadPerSubscriptionConnection ( ) , loadPollInterval ) ; addGroups ( queueLoadMap , groups , queueLoad ) ; updateLoad ( location , initialLoad ) ; }
public void addLeaf ( CatalogTreeLeaf leaf ) $F207 ( _leaves , leaf )
private static String stampToString ( long tstamp , String formatMask ) { $F20818 ( sb ) Formatter fmt = new Formatter ( sb , Locale . US ) ; $F4120 ( pieces , NUMIDX ) ComponentTime . unpackBits ( tstamp , pieces ) ; fmt . format ( formatMask , pieces [ YIDX ] , pieces [ MIDX ] , pieces [ DIDX ] , pieces [ HIDX ] , pieces [ IIDX ] , pieces [ SIDX ] , pieces [ UIDX ] ) ; $F59 ( fmt ) $F27059 ( sb ) }
public HttpRequest contentLength ( final String value ) { return contentLength ( Integer . parseInt ( value ) ) ; }
public boolean draw ( Canvas canvas ) { update ( ) ; final float centerX = mBounds . centerX ( ) ; final float centerY = mBounds . height ( ) - mRadius ; canvas . scale ( NUM00 , Math . min ( mGlowScaleY , NUM00 ) * mBaseGlowScale , centerX , NUM00 ) ; final float displacement = Math . max ( $F150757 ( Math , mDisplacement ) ) - NUM00 ; float translateX = mBounds . width ( ) * displacement / NUM00 ; mPaint . setAlpha ( $F11263 ( mGlowAlpha ) ) ; canvas . drawCircle ( centerX + translateX , centerY , mRadius , mPaint ) ; boolean oneLastFrame = _BOOL ; if ( mState == STATE_RECEDE && mGlowScaleY == NUM00 ) { mState = STATE_IDLE ; oneLastFrame = _BOOL ; } return mState != STATE_IDLE || oneLastFrame ; }
public VNXeCommandJob modifyLunAsync ( LunModifyParam param , String resourceId ) { $F7542 ( urlBld , URL_RESOURCE ) urlBld . append ( resourceId ) ; urlBld . append ( URL_LUN_MODIFY_ACTION ) ; $F6947 ( _url , urlBld ) return postRequestAsync ( param ) ; }
public String replace ( CharSequence target , CharSequence replacement ) { $F896 ( target ) $F896 ( replacement ) $F1822 ( ts , target ) int index = indexOf ( ts , NUM00 ) ; $F101463 ( index , this ) $F1822 ( rs , replacement ) $F7542 ( buffer , count ) $F1749 ( tl , target ) int tail = NUM00 ; do { buffer . append ( value , offset + tail , index - tail ) ; buffer . append ( rs ) ; tail = index + tl ; } while ( ( index = indexOf ( ts , tail ) ) != - NUM00 ) ; buffer . append ( value , offset + tail , count - tail ) ; $F92 ( buffer ) }
$F137271 ( close , deleteContents , directory )
public boolean similarTo ( Object o ) { $F1933 ( o , _BOOL ) if ( ! ( o instanceof SemanticConcept ) ) { return _BOOL ; } SemanticConcept otherConcept = ( SemanticConcept ) o ; $F87074 synset_intersection = new $F87074 ( this . synsets ) ; synset_intersection . retainAll ( otherConcept . synsets ) ; $F77773 ( synset_intersection , _BOOL ) $F2690 concept_intersection = new $F2690 ( this . concepts ) ; concept_intersection . retainAll ( otherConcept . concepts ) ; $F3386 ( concept_intersection ) }
public void jGoogleAnalyticsTracker $F360 ( eventType , version , trackerId ) { final JGoogleAnalyticsTracker tracker = new JGoogleAnalyticsTracker ( NUM00 , version , trackerId ) ; final FocusPoint focusPoint = new FocusPoint ( eventType . toLowerCase ( ) ) ; tracker . trackAsynchronously ( focusPoint ) ; }
protected final Tuple addInternal ( Tuple t ) { if $F9793 ( m_tuples , t ) { return t ; } else $F1337 }
public void put ( Song song ) $F2202 ( mSongs , song )
$F1113 public PsiQuery childrenNamed ( $F1113 final Class < ? extends PsiNamedElement > clazz , $F1113 final String name ) { final List $F265759 result = new ArrayList $F265759 $F72 ; for ( final PsiElement element : myPsiElements ) { for ( final PsiNamedElement child : PsiTreeUtil . findChildrenOfType ( element , clazz ) ) { if $F3175 ( name , child ) $F207 ( result , child ) } } return new PsiQuery ( result . toArray ( new PsiElement $F2313 ( result ) ) ) ; }
private void emitMapPut $F6406 ( method , fieldName , builder ) { $F84 ( builder ) $F6407 ( builder , getMapPutterName , fieldName ) $F84 ( builder ) builder . append ( getTypeArgumentImplName ( ( ParameterizedType ) method . getGenericReturnType ( ) , NUM00 ) ) ; $F84 ( builder ) $F6407 ( builder , getEnsureName , fieldName ) $F84 ( builder ) builder . append ( fieldName ) ; $F84 ( builder ) $F84 ( builder ) }
$F1 public boolean equals ( Object o ) { return $F168407 ( o , hashCode ) ; }
$F1 public String toString $F72 { if ( getUserObject ( ) instanceof TvShow ) { TvShow tvShow = ( TvShow ) getUserObject ( ) ; return tvShow . getTitle ( ) ; } $F92 ( super ) }
private $F5 parseJson ( String text ) { text = text . substring ( text . indexOf ( NUM00 ) + SIZE_OF_EVENTS , text . indexOf ( NUM00 ) ) ; $F8728 ( events ) $F4975 ( text , events ) int startIndex = NUM00 , endIndex = NUM00 ; while ( endIndex != - NUM00 ) { endIndex = text . indexOf ( NUM00 , startIndex + DELIMITER_SIZE ) ; String eventText = ( endIndex == - NUM00 ? text . substring ( startIndex ) : text . substring ( startIndex , endIndex ) ) ; $F26605 ( pattern , Pattern ) $F275 ( matcher , pattern , eventText ) eventText = matcher . replaceAll ( NUM00 ) ; pattern = Pattern . compile ( NUM00 ) ; matcher = pattern . matcher ( eventText ) ; if $F281 ( matcher ) { eventText = matcher . replaceFirst ( matcher . group ( NUM00 ) + NUM00 ) ; } eventText = NUM00 + eventText ; startIndex = endIndex + NUM00 ; events . add ( eventText ) ; } Collections . reverse ( events ) ; return events ; }
$F1 public void removeTableModelListener ( TableModelListener l ) $F106 ( m_Listeners , l )
public StrBuilder replace $F120580 ( startIndex , endIndex , replaceStr ) { endIndex = validateRange ( startIndex , endIndex ) ; $F63276 ( insertLen , replaceStr ) replaceImpl ( startIndex , endIndex , endIndex - startIndex , replaceStr , insertLen ) ; return this ; }
public static void addPermissionRecursive ( Path path , PosixFilePermission permission ) throws IOException { changePermissionsRecursive ( path , PermissionChange . ADD , Collections . singleton ( permission ) ) ; }
private void runTimeoutTask $F72 { while ( isActive ( ) ) { reapTimeouts ( ) ; try $F7595 ( Thread , _timeoutReapInterval ) $F3957 } }
public IDevice learnEntity ( long macAddress , Short vlan , Integer ipv4Address , Long switchDPID , Integer switchPort , boolean processUpdates ) { List < IDeviceListener > listeners = deviceListeners . getOrderedListeners ( ) ; if ( ! processUpdates ) { deviceListeners . clearListeners ( ) ; } VlanVid v ; IPv4Address i ; DatapathId d ; OFPort p ; if ( vlan != null && vlan . shortValue ( ) <= NUM00 ) vlan = null ; if ( ipv4Address != null && ipv4Address == NUM00 ) ipv4Address = null ; if ( vlan == null ) { v = VlanVid . ofVlan ( - NUM00 ) ; } else { v = VlanVid . ofVlan ( vlan ) ; } if ( ipv4Address == null ) { i = IPv4Address . NONE ; } else { i = IPv4Address . of ( ipv4Address ) ; } if ( switchDPID == null ) { d = DatapathId . of ( NUM00 ) ; } else { d = DatapathId . of ( switchDPID . longValue ( ) ) ; } if ( switchPort == null ) $F429599 ( p , OFPort ) else { p = OFPort . of ( switchPort ) ; } IDevice res = learnDeviceByEntity ( new Entity ( MacAddress . of ( macAddress ) , v , i , d , p , $F4094 ) ) ; if ( listeners != null ) { for ( IDeviceListener listener : listeners ) { deviceListeners . addListener ( NUM00 , listener ) ; } } return res ; }
public static boolean isValidTypeSignature ( String sig , boolean allowVoid ) { $F1749 ( len , sig ) return checkTypeSignature ( sig , NUM00 , len , allowVoid ) == len ; }
public void testCase19 $F72 { $F221347 $F221350 int aSign = NUM00 ; int bSign = - NUM00 ; byte $F3018 = { NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F221355 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public static boolean hasVisibleChildren ( ActionGroup group , PresentationFactory factory , ActionManager actionManager , PerspectiveManager perspectiveManager ) { ActionEvent event = new ActionEvent ( factory . getPresentation ( group ) , actionManager , perspectiveManager ) ; for ( Action anAction : group . getChildren ( event ) ) { if ( anAction == null ) { Log . error ( Utils . class , NUM00 + group + NUM00 + factory . getPresentation ( group ) ) ; $F598 } if ( anAction instanceof Separator ) $F1448 final Presentation presentation = factory . getPresentation ( anAction ) ; anAction . update ( new ActionEvent ( presentation , actionManager , perspectiveManager ) ) ; if ( anAction instanceof ActionGroup ) { ActionGroup childGroup = ( ActionGroup ) anAction ; if ( childGroup . isPopup ( ) ) { if ( $F181253 ( presentation ) ) $F1448 } if ( hasVisibleChildren ( childGroup , factory , actionManager , perspectiveManager ) ) { return _BOOL ; } } else if $F201893 ( presentation ) { return _BOOL ; } } return _BOOL ; }
private static void checkArgReferences ( String typeSnippet , int numberOfArgs ) { $F1150 ( argRefMatcher , ARG_REF_PATTERN , typeSnippet ) while $F281 ( argRefMatcher ) { int index = Integer . parseInt ( argRefMatcher . group ( NUM00 ) , NUM00 ) - NUM00 ; Preconditions . checkArgument ( index >= NUM00 , NUM00 , argRefMatcher . group ( NUM00 ) ) ; Preconditions . checkArgument ( index < numberOfArgs , NUM00 , argRefMatcher . group ( NUM00 ) ) ; } }
public void randomize $F72 $F9099 ( randomizeIncomingWeights , normalizeIncomingWeights )
public static void saveAsImage ( int x , int y , int width , int height , String path , CompressFormat compressFormat , int quality ) throws FileNotFoundException { Bitmap bmp = getPixelsFromBuffer ( x , y , width , height ) ; try { $F1705 ( file , path ) try $F88728 ( file ) $F12241 ( e1 ) $F4649 ( fos , file ) bmp . compress ( compressFormat , quality , fos ) ; try $F29882 ( fos ) $F12241 ( e ) $F88744 ( fos , e ) } catch ( FileNotFoundException e ) { throw ( e ) ; } }
private boolean isFileValid ( File file , String methodName ) { if ( file == null ) { Log . printConcatLine ( name , NUM00 , methodName , NUM00 ) ; return _BOOL ; } $F20605 ( fileName , file ) if $F6036 ( fileName ) { Log . printConcatLine ( name , NUM00 + methodName , NUM00 ) ; return _BOOL ; } return _BOOL ; }
public void removeSrcClass ( SootClass clz ) { $F139889 ( srcClasses , clz ) }
private void updateRange ( double value ) $F19411 ( mMinValue , Math , value , mMaxValue )
JSONStringer close ( Scope empty , Scope nonempty , String closeBracket ) throws JSONException { Scope context = peek ( ) ; if ( context != nonempty && context != empty ) $F19954 $F30606 ( stack ) $F83461 ( context , nonempty , newline ) out . append ( closeBracket ) ; return this ; }
public void append $F97 ( bytes ) { $F46502 ( append , bytes ) }
public static boolean enoughSpaceOnPhone ( long updateSize ) { return getRealSizeOnPhone ( ) > updateSize ; }
public void cancelButtonActionPerformed $F72 { editMode = _BOOL ; curNode = null ; addButton . setVisible ( _BOOL ) ; editButton . setVisible ( _BOOL ) ; deleteButton . setVisible ( _BOOL ) ; doneButton . setVisible ( _BOOL ) ; updateButton . setVisible ( _BOOL ) ; cancelButton . setVisible ( _BOOL ) ; nodeAddrField . setVisible ( _BOOL ) ; nodeAddrStatic . setVisible ( _BOOL ) ; statusText1 . setText ( stdStatus1 ) ; statusText2 . setText ( stdStatus2 ) ; statusText3 . setText ( stdStatus3 ) ; }
public void addAttribute ( $F128895 attribute , Object value ) { $F896 ( attribute ) $F27731 ( text ) $F128903 ranges = attributeMap . get ( attribute ) ; if ( ranges == null ) { ranges = new ArrayList $F128902 $F989 ; attributeMap . put ( attribute , ranges ) ; } else $F9096 ( ranges ) ranges . add ( new Range ( NUM00 , text . length ( ) , value ) ) ; }
private Object stringToValue ( Object oldValue , String newValue ) throws ReplicatorException { if ( oldValue instanceof String ) { return newValue ; } else if ( oldValue instanceof Integer ) $F62107 ( Integer , newValue ) else if ( oldValue instanceof SerialBlob ) { try { return DatabaseHelper . getSafeBlob ( newValue . getBytes ( ) ) ; } catch ( SQLException e ) { throw new ReplicatorException ( NUM00 + e , e ) ; } } else { return newValue ; } }
public void addNodesInDocOrder ( DTMIterator iterator , XPathContext support ) { if ( ! m_mutable ) throw new RuntimeException ( XSLMessages . createXPATHMessage ( XPATHErrorResources . ER_NODESETDTM_NOT_MUTABLE , null ) ) ; int node ; while ( DTM . NULL != $F161934 ( node , iterator ) ) { addNodeInDocOrder ( node , support ) ; } }
public String toZString $F72 { $F20818 ( buffer ) try { printZ ( buffer ) ; } $F7078 ( e ) $F92 ( buffer ) }
public TrieDictionary $F4203 build ( int baseId ) { $F12490 ( trieBytes , buildTrieBytes , baseId ) TrieDictionary $F4203 r = new TrieDictionary $F4203 ( trieBytes ) ; return r ; }
public void recordState ( DialogueState state , String name ) { states . put ( name , state ) ; if $F2200 ( listModel , name ) { int position = name . contains ( CURRENT ) ? NUM00 : Math . min ( $F31806 ( listModel ) ) ; listModel . add ( position , name ) ; } }
public int writeUTF8 ( final CharSequence chars , int off , int len ) { if ( len > remaining ( ) ) $F19580 ( writeUTF8Slow , chars , off , len ) final Block block = current ; int limit = block . limit ; char ch = NUM00 ; int octets = NUM00 ; while ( len > NUM00 ) { ch = chars . charAt ( off ) ; $F66497 ( ch , UTF8_2_OCTET_MIN_VALUE ) block . data [ limit ++ ] = ( byte ) ch ; octets ++ ; off ++ ; len -- ; } block . limit = limit ; if ( len > NUM00 ) { if ( ch < UTF8_3_OCTET_MIN_VALUE ) { return octets + writeUTF8UpTo2Byte ( chars , off , len ) ; } if ( ch >= LOW_SURROGATE_FIRST && ch <= LOW_SURROGATE_LAST ) $F18931 ( ch ) if ( ch >= HIGH_SURROGATE_FIRST && ch <= HIGH_SURROGATE_LAST ) { return octets + writeUTF8Slow ( chars , off , len ) ; } return octets + writeUTF8UpTo3Byte ( chars , off , len ) ; } return octets ; }
public GeoServerWPSClient ( GeoServerConnection connection ) $F6988 ( this , connection )
protected ConnectionStateSSLv3 ( SSLSessionImpl session ) { try { CipherSuite cipherSuite = session . cipherSuite ; boolean is_exportabe = cipherSuite . isExportable ( ) ; hash_size = cipherSuite . getMACLength ( ) ; int key_size = ( is_exportabe ) ? cipherSuite . keyMaterial : cipherSuite . expandedKeyMaterial ; int iv_size = cipherSuite . ivSize ; block_size = cipherSuite . getBlockSize ( ) ; String algName = cipherSuite . getBulkEncryptionAlgorithm ( ) ; String hashName = cipherSuite . getHashName ( ) ; if ( logger != null ) { $F8438 ( logger ) logger . println ( NUM00 + session . getCipherSuite ( ) ) ; $F7957 ( logger , algName ) $F7957 ( logger , hashName ) $F7957 ( logger , hash_size ) $F7957 ( logger , block_size ) $F7957 ( logger , iv_size ) $F7957 ( logger , key_size ) } $F56524 ( clientRandom , session ) $F56524 ( serverRandom , session ) $F96 key_block = new byte [ NUM00 * hash_size + NUM00 * key_size + NUM00 * iv_size ] ; $F148496 ( seed , clientRandom , serverRandom ) $F7057 ( System , serverRandom , seed ) $F11244 ( System , clientRandom , seed , serverRandom ) PRF . computePRF_SSLv3 ( key_block , session . master_secret , seed ) ; $F2175 ( client_mac_secret , hash_size ) $F2175 ( server_mac_secret , hash_size ) $F2175 ( client_key , key_size ) $F2175 ( server_key , key_size ) boolean is_client = ! session . isServer ; $F135 ( System , key_block , client_mac_secret , hash_size ) $F30985 ( System , key_block , hash_size , server_mac_secret ) System . arraycopy ( key_block , NUM00 * hash_size , client_key , NUM00 , key_size ) ; System . arraycopy ( key_block , NUM00 * hash_size + key_size , server_key , NUM00 , key_size ) ; IvParameterSpec clientIV = null ; IvParameterSpec serverIV = null ; if ( is_exportabe ) { if ( logger != null ) $F12204 ( logger ) $F5348 ( md5 , MessageDigest ) md5 . update ( client_key ) ; md5 . update ( clientRandom ) ; md5 . update ( serverRandom ) ; $F14611 ( client_key , md5 ) md5 . update ( server_key ) ; md5 . update ( serverRandom ) ; md5 . update ( clientRandom ) ; $F14611 ( server_key , md5 ) key_size = cipherSuite . expandedKeyMaterial ; if ( block_size != NUM00 ) { md5 . update ( clientRandom ) ; md5 . update ( serverRandom ) ; clientIV = new IvParameterSpec ( md5 . digest ( ) , NUM00 , iv_size ) ; md5 . update ( serverRandom ) ; md5 . update ( clientRandom ) ; serverIV = new IvParameterSpec ( md5 . digest ( ) , NUM00 , iv_size ) ; } } else if ( block_size != NUM00 ) { clientIV = new IvParameterSpec ( key_block , NUM00 * hash_size + NUM00 * key_size , iv_size ) ; serverIV = new IvParameterSpec ( key_block , NUM00 * hash_size + NUM00 * key_size + iv_size , iv_size ) ; } if ( logger != null ) { $F7957 ( logger , is_exportabe ) $F8438 ( logger ) logger . print ( session . master_secret ) ; $F8438 ( logger ) logger . print ( clientRandom ) ; $F8438 ( logger ) logger . print ( serverRandom ) ; $F8438 ( logger ) logger . print ( client_mac_secret ) ; $F8438 ( logger ) logger . print ( server_mac_secret ) ; $F8438 ( logger ) logger . print ( client_key , NUM00 , key_size ) ; $F8438 ( logger ) logger . print ( server_key , NUM00 , key_size ) ; if ( clientIV != null ) { $F8438 ( logger ) logger . print ( clientIV . getIV ( ) ) ; $F8438 ( logger ) logger . print ( serverIV . getIV ( ) ) ; } else $F12204 ( logger ) } if ( algName == null ) { $F83645 ( encCipher ) ; $F83645 ( decCipher ) ; } else { encCipher = Cipher . getInstance ( algName ) ; decCipher = Cipher . getInstance ( algName ) ; if ( is_client ) { encCipher . init ( Cipher . ENCRYPT_MODE , new SecretKeySpec ( client_key , NUM00 , key_size , algName ) , clientIV ) ; decCipher . init ( Cipher . DECRYPT_MODE , new SecretKeySpec ( server_key , NUM00 , key_size , algName ) , serverIV ) ; } else { encCipher . init ( Cipher . ENCRYPT_MODE , new SecretKeySpec ( server_key , NUM00 , key_size , algName ) , serverIV ) ; decCipher . init ( Cipher . DECRYPT_MODE , new SecretKeySpec ( client_key , NUM00 , key_size , algName ) , clientIV ) ; } } messageDigest = MessageDigest . getInstance ( hashName ) ; if ( is_client ) { mac_write_secret = client_mac_secret ; mac_read_secret = server_mac_secret ; } else { mac_write_secret = server_mac_secret ; mac_read_secret = client_mac_secret ; } if $F3057 ( hashName ) { pad_1 = SSLv3Constants . MD5pad1 ; pad_2 = SSLv3Constants . MD5pad2 ; } else { pad_1 = SSLv3Constants . SHApad1 ; pad_2 = SSLv3Constants . SHApad2 ; } } catch ( Exception e ) { $F301 ( e ) throw new AlertException ( AlertProtocol . INTERNAL_ERROR , new SSLProtocolException $F580 ) ; } }
static boolean verifyZipFile ( File file ) { try { $F170751 ( zipFile , file ) try $F172023 ( zipFile , _BOOL ) catch ( IOException e ) { Log . w ( $F71440 ( TAG , file ) ) ; } } catch ( ZipException ex ) { Log . w ( TAG , $F62869 ( file ) , ex ) ; } catch ( IOException ex ) { Log . w ( TAG , $F4929 ( file ) , ex ) ; } return _BOOL ; }
long cleanup ( long now ) { int inUseConnectionCount = NUM00 ; int idleConnectionCount = NUM00 ; RealConnection longestIdleConnection = null ; long longestIdleDurationNs = Long . MIN_VALUE ; synchronized ( this ) { for ( Iterator < RealConnection > i = connections . iterator ( ) ; i . hasNext ( ) ; ) { RealConnection connection = i . next ( ) ; if ( pruneAndGetAllocationCount ( connection , now ) > NUM00 ) $F118993 ( inUseConnectionCount ) idleConnectionCount ++ ; long idleDurationNs = now - connection . idleAtNanos ; $F8399 ( idleDurationNs , longestIdleDurationNs , longestIdleConnection , connection ) } if ( longestIdleDurationNs >= this . keepAliveDurationNs || idleConnectionCount > this . maxIdleConnections ) $F106 ( connections , longestIdleConnection ) else if ( idleConnectionCount > NUM00 ) { return keepAliveDurationNs - longestIdleDurationNs ; } else if ( inUseConnectionCount > NUM00 ) { return keepAliveDurationNs ; } else $F340596 ( cleanupRunning , _BOOL ) } closeQuietly ( longestIdleConnection . socket ( ) ) ; $F1082 }
public StateInfo $F72 $F845
public boolean compare ( Object expected , Object current ) { if ( current != null ) { equal = current . equals ( expected ) ; } else if ( expected != null ) { equal = expected . equals ( NUM00 ) ; } return equal ; }
$F33495 ( seedBuffer , seedBufferOut , System , Process , BUILD_FINGERPRINT_AND_DEVICE_SERIAL , e )
boolean needToCheckExclude $F72 { return _BOOL ; }
public static $F96 decode ( String hexa ) throws CoderException { if ( hexa == null ) { throw new CoderException $F580 ; } if ( ( $F47012 ( hexa ) ) != NUM00 ) { throw new CoderException $F580 ; } $F203657 ( tamArray , hexa ) $F2175 ( retorno , tamArray ) for ( $F119 ( i , tamArray ) ) { retorno [ i ] = hexToByte ( hexa . substring ( i * NUM00 , i * NUM00 + NUM00 ) ) ; } return retorno ; }
private List < UserNamespaceAuthorization > createUserNamespaceAuthorizationsFromEntities ( List < UserNamespaceAuthorizationEntity > userNamespaceAuthorizationEntities ) { List < UserNamespaceAuthorization > $F204 ( userNamespaceAuthorizations ) ; for ( UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity : userNamespaceAuthorizationEntities ) $F3762 ( userNamespaceAuthorizations , createUserNamespaceAuthorizationFromEntity , userNamespaceAuthorizationEntity ) return userNamespaceAuthorizations ; }
private void readHeader $F72 throws OpenStegoException { this . dataHeader = new DCTDataHeader ( this , this . config ) ; }
$F1 public synchronized void reset $F72 { pos = NUM00 ; }
protected < T extends KeySpec > T engineGetKeySpec ( Key key , $F20474 keySpec ) throws InvalidKeySpecException { BigInteger p , q , g , x , y ; if ( key != null ) { $F896 ( keySpec ) if ( key instanceof DSAPrivateKey ) { DSAPrivateKey privateKey = ( DSAPrivateKey ) key ; if ( keySpec . equals ( DSAPrivateKeySpec . class ) ) { $F25145 ( x , privateKey ) DSAParams params = privateKey . getParams ( ) ; p = params . getP ( ) ; q = params . getQ ( ) ; g = params . getG ( ) ; return ( T ) ( new DSAPrivateKeySpec ( x , p , q , g ) ) ; } if ( keySpec . equals ( PKCS8EncodedKeySpec . class ) ) { return ( T ) ( new PKCS8EncodedKeySpec $F4697 ( key ) ) ; } $F109061 } if ( key instanceof DSAPublicKey ) { DSAPublicKey publicKey = ( DSAPublicKey ) key ; if ( keySpec . equals ( DSAPublicKeySpec . class ) ) { $F130222 ( y , publicKey ) DSAParams params = publicKey . getParams ( ) ; p = params . getP ( ) ; q = params . getQ ( ) ; g = params . getG ( ) ; return ( T ) ( new DSAPublicKeySpec ( y , p , q , g ) ) ; } if ( keySpec . equals ( X509EncodedKeySpec . class ) ) { return ( T ) ( new X509EncodedKeySpec $F4697 ( key ) ) ; } $F109061 } } $F109061 }
protected void drawText ( String text1 , String text2 , int x , int y , Canvas c ) { if ( textPaint == null ) { $F98511 ( p ) p . setTypeface ( RobotoLightTypeface . getInstance ( context ) ) ; p . setColor ( textColor ) ; p . setTextSize ( NUM00 * pixelDensity ) ; this . textPaint = p ; } float w = textPaint . measureText ( text1 , NUM00 , text1 . length ( ) ) ; int offset = ( int ) w / NUM00 ; c . drawText ( text1 , x - offset , y + ( NUM00 * pixelDensity ) , textPaint ) ; w = textPaint . measureText ( text2 , NUM00 , text2 . length ( ) ) ; offset = ( int ) w / NUM00 ; c . drawText ( text2 , x - offset , y + ( NUM00 * pixelDensity ) , textPaint ) ; }
public boolean isLessThenOrEqualTo ( Percent Percent ) { assertDefined ( ) ; BigDecimal thisValue = notNull ( this ) ; BigDecimal parameter = notNull ( Percent ) ; return $F348512 ( thisValue , parameter ) ; }
public Object clone $F72 throws CloneNotSupportedException { PredicatedNodeTest clone = ( PredicatedNodeTest ) super . clone ( ) ; if ( ( null != this . m_proximityPositions ) && ( this . m_proximityPositions == clone . m_proximityPositions ) ) { clone . m_proximityPositions = new int [ this . m_proximityPositions . length ] ; System . arraycopy ( this . m_proximityPositions , NUM00 , clone . m_proximityPositions , NUM00 , this . m_proximityPositions . length ) ; } if ( clone . m_lpi == this ) clone . m_lpi = ( LocPathIterator ) clone ; return clone ; }
public static boolean pointOutsidePrefSize ( JTable table , int row , int column , Point p ) { if ( table . convertColumnIndexToModel ( column ) != NUM00 || row == - NUM00 ) { return _BOOL ; } TableCellRenderer tcr = table . getCellRenderer ( row , column ) ; Object value = table . getValueAt ( row , column ) ; Component cell = tcr . getTableCellRendererComponent ( table , value , _BOOL , _BOOL , row , column ) ; $F86864 ( itemSize , cell ) Rectangle cellBounds = table . getCellRect ( row , column , _BOOL ) ; cellBounds . width = itemSize . width ; cellBounds . height = itemSize . height ; assert ( p . x >= cellBounds . x && p . y >= cellBounds . y ) ; return p . x > $F6108 ( cellBounds ) || p . y > $F6118 ( cellBounds ) ; }
public Builder addSourceFolder ( $F4170 File folder ) $F18637 ( foldersToScan , folder , this )
public Method suspendSRDFGroupMethod ( final URI systemURI , final RemoteDirectorGroup group , final $F28584 sourceVolumes , final $F28584 targetVolumes ) { return $F81871 ( SUSPEND_SRDF_GROUP_METHOD , systemURI , group , sourceVolumes , targetVolumes ) ; }
private void fieldGoalAtt ( Team offense , Team defense ) { double fgDistRatio = Math . pow ( ( NUM00 - gameYardLine ) / NUM00 , NUM00 ) ; double fgAccRatio = Math . pow ( ( NUM00 - gameYardLine ) / NUM00 , NUM00 ) ; double fgDistChance = ( getHFadv ( ) + offense . getK ( NUM00 ) . ratKickPow - fgDistRatio * NUM00 ) ; double fgAccChance = ( getHFadv ( ) + offense . getK ( NUM00 ) . ratKickAcc - fgAccRatio * NUM00 ) ; if ( fgDistChance > NUM00 && fgAccChance * Math . random ( ) > NUM00 ) { if ( gamePoss ) { homeScore += NUM00 ; HomeKStats [ NUM00 ] ++ ; HomeKStats [ NUM00 ] ++ ; } else { awayScore += NUM00 ; AwayKStats [ NUM00 ] ++ ; AwayKStats [ NUM00 ] ++ ; } gameEventLog += getEventPrefix ( ) + offense . abbr + NUM00 + offense . getK ( NUM00 ) . name + NUM00 + ( NUM00 - gameYardLine ) + NUM00 ; addPointsQuarter ( NUM00 ) ; offense . getK ( NUM00 ) . statsFGMade ++ ; offense . getK ( NUM00 ) . statsFGAtt ++ ; if ( ! playingOT ) kickOff ( offense ) ; else resetForOT ( ) ; } else { gameEventLog += getEventPrefix ( ) + offense . abbr + NUM00 + offense . getK ( NUM00 ) . name + NUM00 + ( NUM00 - gameYardLine ) + NUM00 ; offense . getK ( NUM00 ) . statsFGAtt ++ ; if ( ! playingOT ) { gameYardLine = Math . max ( NUM00 - gameYardLine , NUM00 ) ; gameDown = NUM00 ; gameYardsNeed = NUM00 ; if ( gamePoss ) $F41850 ( HomeKStats ) else $F41850 ( AwayKStats ) gamePoss = ! gamePoss ; } else resetForOT ( ) ; } gameTime -= NUM00 ; }
public static final $F96 unzip $F97 ( in ) throws IOException { ByteArrayOutputStream outStream = new ByteArrayOutputStream ( EXPECTED_COMPRESSION_RATIO * in . length ) ; GZIPInputStream inStream = new GZIPInputStream $F24702 ( in ) ; $F2175 ( buf , BUF_SIZE ) while ( _BOOL ) { $F83249 ( size , inStream , buf ) $F137919 ( size ) $F11584 ( outStream , buf , size ) } $F59 ( outStream ) $F11316 ( outStream ) }
$F1 public double calculateM ( double delta , double epsilon ) { double i = NUM00 ; while ( conf ( i , delta ) > epsilon / NUM00 ) $F51403 ( i ) if ( i > NUM00 ) $F218903 ( i ) while ( conf ( i , delta ) > ( epsilon / NUM00 ) ) { i ++ ; } return Math . ceil ( i ) ; }
public static ServerSocket createServerSocket ( int port , InetAddress bindAddress ) throws IOException { ServerSocket socket = null ; if ( SysProperties . ENABLE_ANONYMOUS_TLS ) $F5795 ( removeAnonFromLegacyAlgorithms ) setKeystore ( ) ; ServerSocketFactory f = SSLServerSocketFactory . getDefault ( ) ; SSLServerSocket secureSocket ; if ( bindAddress == null ) { secureSocket = ( SSLServerSocket ) f . createServerSocket ( port ) ; } else { secureSocket = ( SSLServerSocket ) f . createServerSocket ( port , NUM00 , bindAddress ) ; } secureSocket . setEnabledProtocols ( disableSSL ( secureSocket . getEnabledProtocols ( ) ) ) ; if ( SysProperties . ENABLE_ANONYMOUS_TLS ) { $F806 list = enableAnonymous ( secureSocket . getEnabledCipherSuites ( ) , secureSocket . getSupportedCipherSuites ( ) ) ; secureSocket . setEnabledCipherSuites ( list ) ; } socket = secureSocket ; return socket ; }
public void printBytes $F24576 ( data , offset , length ) throws IOException { int i ; for ( ; length >= NUM00 ; length -= NUM00 ) { int chunk = ( $F528005 ( data , offset ) + $F38343 ( data , offset ) + $F21296 ( data , offset ) ) ; os . write ( base64encode ( chunk > > NUM00 ) ) ; os . write ( base64encode ( chunk > > NUM00 ) ) ; os . write ( base64encode ( chunk > > NUM00 ) ) ; $F160532 ( os , base64encode , chunk ) offset += NUM00 ; } if ( length == NUM00 ) { int chunk = $F528005 ( data , offset ) + $F21296 ( data , offset ) ; os . write ( base64encode ( chunk > > NUM00 ) ) ; os . write ( base64encode ( chunk > > NUM00 ) ) ; $F160532 ( os , base64encode , chunk ) $F3410 ( os ) } else if ( length == NUM00 ) { int chunk = data [ offset ] & NUM00 ; os . write ( base64encode ( chunk > > NUM00 ) ) ; $F160532 ( os , base64encode , chunk ) $F3410 ( os ) $F3410 ( os ) } }
public void deleteVVset ( String nativeId ) throws Exception { $F973 ( _log ) ClientResponse clientResp = null ; final String path = MessageFormat . format ( URI_DELETE_CG , nativeId ) ; $F556 ( _log , path ) try { clientResp = delete ( path ) ; if ( clientResp == null ) { $F9464 ( _log ) throw new HP3PARException $F580 ; } else if ( clientResp . getStatus ( ) != NUM00 ) { String errResp = getResponseDetails ( clientResp ) ; throw new HP3PARException ( errResp ) ; } else $F22715 ( _log ) } $F91522 ( e ) finally { $F2727 ( clientResp ) $F973 ( _log ) } }
public void accept ( final AnnotationVisitor av ) { if ( av != null ) { if ( values != null ) { for ( $F48125 ( i , values ) ) { $F123 ( name , values , i ) Object value = values . get ( i + NUM00 ) ; accept ( av , name , value ) ; } } $F110334 ( av ) } }
private int findKeyCommentIndex ( String keyName ) { for ( $F2277 ( i , keyValComments ) ) { $F1729 ( t , keyValComments , i ) String targetedKey = NUM00 + keyName + NUM00 ; $F72106 ( t , targetedKey , i ) } $F15998 ( log , keyName ) $F150 }
public boolean isExpired $F72 { return ( cookieExpiryDate != null && cookieExpiryDate . getTime ( ) <= System . currentTimeMillis ( ) ) ; }
$F141880 ( closeable , rethrown )
public static boolean isAddToHomeIntentSupported ( Context context ) { $F45547 ( pm , context ) Intent i = new Intent ( INSTALL_SHORTCUT ) ; $F45549 receivers = pm . queryBroadcastReceivers ( i , PackageManager . GET_INTENT_FILTERS ) ; $F3386 ( receivers ) }
public RoundedIconGenerator ( int iconWidthPx , int iconHeightPx , int cornerRadiusPx , int backgroundColor , float textSizePx ) { mIconWidthPx = iconWidthPx ; mIconHeightPx = iconHeightPx ; mCornerRadiusPx = cornerRadiusPx ; mBackgroundRect = new RectF ( NUM00 , NUM00 , mIconWidthPx , mIconHeightPx ) ; mBackgroundPaint = new Paint ( Paint . ANTI_ALIAS_FLAG ) ; mBackgroundPaint . setColor ( backgroundColor ) ; mTextPaint = new TextPaint ( Paint . ANTI_ALIAS_FLAG ) ; mTextPaint . setColor ( Color . WHITE ) ; mTextPaint . setFakeBoldText ( _BOOL ) ; mTextPaint . setTextSize ( textSizePx ) ; $F319 ( textFontMetrics , mTextPaint ) mTextHeight = ( float ) Math . ceil ( textFontMetrics . bottom - textFontMetrics . top ) ; mTextYOffset = - textFontMetrics . top ; }
InMemoryEntryStore $F72 { entries = Maps . newHashMap ( ) ; topLevelEntries = Sets . newHashSet ( ) ; $F44889 ( children , HashMultimap ) }
public void persistConnection ( Connection connection ) throws PersistenceException { MqttConnectOptions conOpts = connection . getConnectionOptions ( ) ; MqttMessage lastWill = conOpts . getWillMessage ( ) ; SQLiteDatabase db = getWritableDatabase ( ) ; $F20904 ( values ) values . put ( COLUMN_HOST , connection . getHostName ( ) ) ; values . put ( COLUMN_port , connection . getPort ( ) ) ; values . put ( COLUMN_client_ID , connection . getId ( ) ) ; values . put ( COLUMN_ssl , connection . isSSL ( ) ) ; values . put ( COLUMN_KEEP_ALIVE , conOpts . getKeepAliveInterval ( ) ) ; values . put ( COLUMN_TIME_OUT , conOpts . getConnectionTimeout ( ) ) ; values . put ( COLUMN_USER_NAME , conOpts . getUserName ( ) ) ; values . put ( COLUMN_TOPIC , conOpts . getWillDestination ( ) ) ; $F1469 password = conOpts . getPassword ( ) ; values . put ( COLUMN_CLEAN_SESSION , conOpts . isCleanSession ( ) ? NUM00 : NUM00 ) ; values . put ( COLUMN_PASSWORD , password != null ? String . valueOf ( password ) : null ) ; values . put ( COLUMN_MESSAGE , lastWill != null ? new String ( lastWill . getPayload ( ) ) : null ) ; values . put ( COLUMN_QOS , lastWill != null ? lastWill . getQos ( ) : NUM00 ) ; if ( lastWill == null ) $F248856 ( values , COLUMN_RETAINED ) else { values . put ( COLUMN_RETAINED , lastWill . isRetained ( ) ? NUM00 : NUM00 ) ; } long newRowId = db . insert ( TABLE_CONNECTIONS , null , values ) ; $F59 ( db ) if ( newRowId == - NUM00 ) { throw new PersistenceException ( NUM00 + connection . handle ( ) ) ; } else { connection . assignPersistenceId ( newRowId ) ; } }
public ClassAnnotator ( $F52326 codebase , Properties props ) { if ( props != null ) properties . putAll ( props ) ; setAnnotationURLs ( codebase ) ; }
public int next $F72 { return mix ( gen . getAndIncrement ( ) ) ; }
public CholeskyDecomposition ( Matrix Arg ) { $F3791 ( A , Arg ) $F323738 ( n , Arg ) $F10226 ( L , n ) isspd = ( Arg . getColumnDimension ( ) == n ) ; for ( $F119 ( j , n ) ) { $F42658 ( Lrowj , L , j ) double d = NUM00 ; for ( $F119 ( k , j ) ) { $F42658 ( Lrowk , L , k ) double s = NUM00 ; for ( $F119 ( i , k ) ) $F323742 ( s , Lrowk , i , Lrowj ) Lrowj [ k ] = s = ( A [ j ] [ k ] - s ) / L [ k ] [ k ] ; d = d + s * s ; isspd = isspd & ( A [ k ] [ j ] == A [ j ] [ k ] ) ; } d = A [ j ] [ j ] - d ; isspd = isspd & ( d > NUM00 ) ; L [ j ] [ j ] = Math . sqrt ( Math . max ( d , NUM00 ) ) ; for ( $F2634 ( k , j , n ) ) $F211213 ( L , j , k ) } }
public InputStream put ( final URLConnection connection , final boolean flushCacheOnClose ) { final String key = getKey ( connection ) ; $F1275 ( key ) if ( ! isCacheable ( ( HttpURLConnection ) connection ) ) try { cache . remove ( key ) ; $F1274 } $F20154 String etag = connection . getHeaderField ( HEADER_ETAG ) ; if $F6036 ( etag ) $F1274 Editor editor ; try { editor = cache . edit ( key ) ; } $F20154 $F1275 ( editor ) try $F65992 ( editor , ETAG , etag ) catch ( IOException e ) { try { $F29036 ( editor ) } $F20287 $F1274 } InputStream input ; try { $F7981 ( input , connection ) if ( ! ( input instanceof InflaterInputStream ) && ENCODING_GZIP . equals ( connection . getHeaderField ( HEADER_CONTENT_ENCODING ) ) ) input = new GZIPInputStream ( input ) ; } $F20154 OutputStream output ; try { output = editor . newOutputStream ( BODY ) ; } $F20154 if ( output != null ) return new CacheStream ( input , output , editor , this , flushCacheOnClose ) ; else $F1274 }
public static $F806 parseTitle ( String title ) { String $F44675 = $F4582 ; $F397 ( title , v ) Pattern p = Pattern . compile ( NUM00 , Pattern . CASE_INSENSITIVE ) ; $F1150 ( m , p , title ) if $F281 ( m ) { v [ NUM00 ] = m . group ( NUM00 ) ; v [ NUM00 ] = m . group ( NUM00 ) ; } else { v [ NUM00 ] = title ; } return v ; }
public String sel $F72 $F2495 ( mSelection )
public double calculateExcitatoryRatio $F72 { excitatoryRatio = exSynapseSet . size ( ) / $F69510 ( size ) ; if $F35707 ( Double , excitatoryRatio ) $F1083 return excitatoryRatio ; }
public void rootRemoved ( ISVNRepositoryLocation root ) { $F10531 ( it , listeners ) while $F2921 ( it ) { $F210422 ( listener , it ) listener . repositoryRemoved ( root ) ; } }
public synchronized void insert ( double _priority , Object _data ) { numElements ++ ; if ( numElements == queue . length ) { PriorityQueueNode [ ] tmp = new PriorityQueueNode [ ( int ) $F28143 ( queue ) ] ; $F7057 ( System , queue , tmp ) for ( int i = queue . length ; i < tmp . length ; i ++ ) { tmp [ i ] = new PriorityQueueNode $F72 ; } queue = tmp ; } queue [ numElements ] . data = _data ; queue [ numElements ] . priority = _priority ; reheapify ( numElements ) ; }
protected Message $F72 $F845
protected String wrapLinuxCommand ( String command ) throws $F3 { String setGroup = NUM00 + getGid ( ) + NUM00 + getGid ( ) + NUM00 + getGid ( ) + NUM00 ; String setUser = NUM00 + getUid ( ) + NUM00 + getUid ( ) + NUM00 + getGid ( ) + NUM00 ; String chownCommand = NUM00 ; return setGroup + NUM00 + setUser + NUM00 + chownCommand + NUM00 + command + NUM00 + chownCommand ; }
public AbstractDMLQuery parseSqlQuery ( SQLQuery sqlQuery , ISpaceProxy space ) throws SQLException { AbstractDMLQuery query = ( AbstractDMLQuery ) getQueryFromCache ( getUniqueKey ( sqlQuery ) ) ; try { if ( query == null ) { $F432107 ( _logger , Level ) SqlParser parser = initParser ( sqlQuery . getQuery ( ) ) ; query = parse ( parser ) ; query . setTableName ( sqlQuery . getTypeName ( ) ) ; query . validateQuery ( space ) ; if ( ! query . isPrepared ( ) && ! query . containsSubQueries ( ) ) query . build ( ) ; addQueryToCache ( getUniqueKey ( sqlQuery ) , query ) ; if ( ! query . isPrepared ( ) ) return query ; } query = query . clone ( ) ; return query ; } catch ( SQLException sqlEx ) { if $F6456 ( _logger , Level ) { _logger . log ( Level . FINE , NUM00 + sqlQuery . getQuery ( ) + NUM00 , sqlEx ) ; } throw sqlEx ; } catch ( Throwable t ) { if $F6456 ( _logger , Level ) { _logger . log ( Level . FINE , NUM00 + sqlQuery . getQuery ( ) + NUM00 , t ) ; } SQLException sqlEx = new SQLException ( NUM00 + sqlQuery . getQuery ( ) + NUM00 + t , NUM00 , - NUM00 ) ; sqlEx . initCause ( t ) ; throw sqlEx ; } }
private int indexOfElementInLevel ( int element , int level [ ] ) throws Exception { for ( $F1139 ( i , level ) ) { if ( level [ i ] == element ) { return i ; } } throw new Exception ( NUM00 + m_nodes . get ( element ) . ID + NUM00 + NUM00 ) ; }
$F1654 ( _attrs )
public String consumeTagName $F72 { int start = pos ; while ( ! isEmpty ( ) && ( matchesWord ( ) || matchesAny ( $F7288 ) ) ) pos ++ ; $F6669 ( queue , start , pos ) }
public void deepSort $F23416 ( setFeatureSequence ) { featureSequence = setFeatureSequence ; numberOfLeaves = NUM00 ; tree = new MaryNode ( NUM00 , featureVectors . length ) ; sortNode ( NUM00 , tree ) ; }
public void removeListeners $F72 $F9096 ( listeners )
public String decrypt ( String sCipherText ) { int nLen = ( sCipherText . length ( ) > > NUM00 ) & ~ NUM00 ; if ( nLen < BlowfishECB . BLOCKSIZE ) $F1274 $F96 cbciv = new byte [ BlowfishECB . BLOCKSIZE ] ; int nNumOfBytes = BinConverter . binHexToBytes ( sCipherText , cbciv , NUM00 , NUM00 , BlowfishECB . BLOCKSIZE ) ; if ( nNumOfBytes < BlowfishECB . BLOCKSIZE ) $F1274 m_bfish . setCBCIV ( cbciv ) ; nLen -= BlowfishECB . BLOCKSIZE ; if ( nLen == NUM00 ) $F1278 $F2175 ( buf , nLen ) nNumOfBytes = BinConverter . binHexToBytes ( sCipherText , buf , BlowfishECB . BLOCKSIZE * NUM00 , NUM00 , nLen ) ; if ( nNumOfBytes < nLen ) $F1274 m_bfish . decrypt ( buf ) ; int nPadByte = $F154004 ( buf ) ; if ( ( nPadByte > NUM00 ) || ( nPadByte < NUM00 ) ) nPadByte = NUM00 ; nNumOfBytes -= nPadByte ; if ( nNumOfBytes < NUM00 ) $F1278 return BinConverter . byteArrayToUNCString ( buf , NUM00 , nNumOfBytes ) ; }
public static double L_RankLoss ( int y [ ] , int r [ ] ) { int L = y . length ; $F15277 ( tI ) $F15277 ( fI ) for ( $F119 ( j , L ) ) { if ( y [ j ] == NUM00 ) $F207 ( tI , j ) else $F207 ( fI , j ) } if $F133343 ( tI , fI ) { int c = NUM00 ; for ( int k : tI ) { for ( int l : fI ) { if ( position ( k , r ) < position ( l , r ) ) { c ++ ; } } } return ( double ) c / ( double ) ( tI . size ( ) * fI . size ( ) ) ; } else $F1083 }
private double addRecursively ( $F302683 hull , Hierarchy < Cluster < Model > > hier , Cluster < Model > clus ) { final DBIDs ids = clus . getIDs ( ) ; double weight = ids . size ( ) ; for ( $F134224 ( iter , ids ) ) { $F1986 projP = proj . fastProjectDataToRenderSpace ( rel . get ( iter ) ) ; if ( projP [ NUM00 ] != projP [ NUM00 ] || projP [ NUM00 ] != projP [ NUM00 ] ) $F1448 hull . add ( projP ) ; } for ( Iter < Cluster < Model > > iter = hier . iterChildren ( clus ) ; iter . valid ( ) ; iter . advance ( ) ) { weight += NUM00 * addRecursively ( hull , hier , iter . get ( ) ) ; } return weight ; }
public void attributeUpdate ( PrintServiceAttributeEvent psae ) $F35578 ( log , psae )
public static boolean decodeToFile ( String dataToDecode , String filename ) { boolean success = _BOOL ; $F87751 bos = null ; try { bos = new $F87751 ( new java . io . FileOutputStream ( filename ) , Base64 . DECODE ) ; bos . write ( dataToDecode . getBytes ( PREFERRED_ENCODING ) ) ; success = _BOOL ; } catch ( $F3258 e ) { success = _BOOL ; } finally $F87767 ( bos ) return success ; }
public void evict $F72 throws Exception { assertOpen ( ) ; boolean isEmpty ; synchronized ( this ) $F57332 ( isEmpty , pool ) if ( ! isEmpty ) { if ( softMinEvictableIdleTimeMillis > NUM00 ) { int numToEvict = getNumIdle ( ) - getMinIdle ( ) ; evict ( System . currentTimeMillis ( ) - softMinEvictableIdleTimeMillis , numToEvict ) ; } if ( minEvictableIdleTimeMillis > NUM00 ) { int numToEvict = getNumIdle ( ) ; evict ( System . currentTimeMillis ( ) - minEvictableIdleTimeMillis , numToEvict ) ; } } }
protected void generateRandomPopulation ( int population_size ) { $F980 ( logger ) for ( $F119 ( i , population_size ) ) { T individual = chromosomeFactory . getChromosome ( ) ; for ( FitnessFunction $F1011 fitnessFunction : this . fitnessFunctions ) { individual . addFitness ( fitnessFunction ) ; } population . add ( individual ) ; if ( isFinished ( ) ) $F597 } $F25390 ( logger , population ) }
public Session $F72 { $F657 ( uptime , System ) mMainHandler = new Handler ( Looper . getMainLooper ( ) ) ; mTimestamp = ( uptime / NUM00 ) < < NUM00 & ( ( ( uptime - ( ( uptime / NUM00 ) * NUM00 ) ) > > NUM00 ) / NUM00 ) ; mOrigin = NUM00 ; try $F24081 ( sSignal ) $F887 }
public List < Visitante > listar $F72 { List < Visitante > $F204 ( dados ) ; try { String sql = NUM00 ; stm = conector . prepareStatement ( sql ) ; rs = stm . executeQuery ( sql ) ; while $F1682 ( rs ) { dados . add ( new Visitante ( rs . getInt ( NUM00 ) , rs . getString ( NUM00 ) , rs . getString ( NUM00 ) , rs . getString ( NUM00 ) , rs . getString ( NUM00 ) , rs . getString ( NUM00 ) , Tempo . toDate ( rs . getTimestamp ( NUM00 ) ) , rs . getString ( NUM00 ) , rs . getString ( NUM00 ) ) ) ; } $F59 ( stm ) $F59 ( rs ) } catch ( SQLException ex ) { Mensagem . erro ( NUM00 + ex ) ; } return dados ; }
private void assertAllFromTbl1 ( Statement stmt , $F806 ones , $F5078 twos ) throws SQLException { $F75096 ( rs , stmt ) int i = NUM00 ; for ( ; rs . next ( ) ; i ++ ) { assertTrue ( i < ones . length ) ; assertEquals ( ones [ i ] , rs . getString ( NUM00 ) ) ; assertEquals ( twos [ i ] , rs . getShort ( NUM00 ) ) ; } assertTrue ( i == ones . length ) ; }
$F46605 ( value , builder , this )
private void insertBefore ( Instruction [ ] list , Instruction s ) { for ( Instruction x : list ) { s . insertBefore ( x ) ; } }
public static Builder newBuilder $F72 { return new Builder $F72 ; }
public int countArray $F4374 ( array ) { return array . length ; }
private void processUnprocessed $F72 { boolean clean_processings = Boolean . getBoolean ( NUM00 ) ; logger . info ( NUM00 + NUM00 + clean_processings + NUM00 ) ; productService . processUnprocessed ( ! clean_processings ) ; }
public $F1986 popy ( double x_ [ ] ) { return popY ( new double [ ] [ ] { x_ } ) [ NUM00 ] ; }
public void gotoFrame ( int frameNumber ) throws IOException { print ( NUM00 , new String [ ] { Integer . toString ( frameNumber ) } ) ; }
$F73603 ( desc , c , pop , Type )
public void delete ( String name ) throws IOException { $F219378 ( name , SUBJECT_NAME , names ) encodeThis ( ) ; }
public void pushElemAttributeSet ( ElemAttributeSet attrSet ) $F31742 ( m_attrSetStack , attrSet )
private void finishScrollStacks $F72 { cancelAnimation ( this , Property . STACK_SNAP ) ; $F3666 ( currentModelIndex , getTabStackIndex ) float delta = Math . abs ( currentModelIndex + mRenderedScrollOffset ) ; float target = - currentModelIndex ; if ( delta != NUM00 ) { long duration = FLING_MIN_DURATION + ( long ) Math . abs ( delta * getFullScrollDistance ( ) / mFlingSpeed ) ; addToAnimation ( this , Property . STACK_SNAP , mRenderedScrollOffset , target , duration , NUM00 ) ; } else { setProperty ( Property . STACK_SNAP , target ) ; if ( mTemporarySelectedStack != null ) { mTabModelSelector . selectModel ( mTemporarySelectedStack ) ; mTemporarySelectedStack = null ; } } }
public GeoDistanceBuilder addUnboundedFrom ( String key , double from ) { ranges . add ( new Range ( key , from , null ) ) ; return this ; }
private void sendResponse ( Document doc , MessageFactory messageFactory , String contentType , HttpServletResponse res ) throws IOException , SOAPException { SOAPMessage reply = messageFactory . createMessage ( ) ; SOAPHeader header = reply . getSOAPHeader ( ) ; header . detachNode ( ) ; SOAPBody replyBody = reply . getSOAPBody ( ) ; res . setHeader ( NUM00 , contentType ) ; replyBody . addDocument ( doc ) ; reply . saveChanges ( ) ; $F147972 ( os , res ) reply . writeTo ( os ) ; $F1206 ( os ) }
public static String replaceChars ( String str , String oldchars , char newchar ) { int pos = indexOfChars ( str , oldchars ) ; $F5881 ( pos , str ) $F7542 ( buf , str ) do { buf . setCharAt ( pos , newchar ) ; pos = indexOfChars ( str , oldchars , pos + NUM00 ) ; } while ( pos != - NUM00 ) ; $F92 ( buf ) }
$F146067 ( zzBuffer , zzStartRead , zzMarkedPos )
public static String canonicalizePath ( String path , boolean discardRelativePrefix ) { int segmentStart = NUM00 ; int deletableSegments = NUM00 ; for ( int i = NUM00 ; i <= path . length ( ) ; ) { int nextSegmentStart ; if $F9615 ( i , path ) { nextSegmentStart = i ; } else if $F11983 ( path , i ) { nextSegmentStart = i + NUM00 ; } else $F118993 ( i ) if $F122896 ( i , segmentStart , path ) { $F122899 ( path , segmentStart , nextSegmentStart ) i = segmentStart ; } else if $F122896 ( i , segmentStart , path ) { if ( deletableSegments > NUM00 || discardRelativePrefix ) { deletableSegments -- ; int prevSegmentStart = path . lastIndexOf ( NUM00 , segmentStart - NUM00 ) + NUM00 ; $F122899 ( path , prevSegmentStart , nextSegmentStart ) i = segmentStart = prevSegmentStart ; } else { i ++ ; segmentStart = i ; } } else { if ( i > NUM00 ) { deletableSegments ++ ; } i ++ ; segmentStart = i ; } } return path ; }
public InMemoryMessageExchangeStore ( final NetworkConfig config , TokenProvider tokenProvider ) { $F896 ( config ) $F896 ( tokenProvider ) this . tokenProvider = tokenProvider ; this . config = config ; }
public static void next $F72 { try { if ( musicPlaybackService != null ) $F106111 ( musicPlaybackService ) } catch ( final RemoteException ignored ) $F845 }
public long startstack $F72 $F12907 ( Long , fields )
private void drawBitmapWithStroke ( Canvas canvas , Bitmap bitmap , int centerX , int centerY , float radius , Paint drawPaint ) { $F22950 ( drawPaint , Paint ) float strokeRadius = radius + mRadiusStrokeWidth ; drawPaint . setXfermode ( new PorterDuffXfermode ( PorterDuff . Mode . CLEAR ) ) ; canvas . drawCircle ( centerX , centerY , strokeRadius , drawPaint ) ; drawPaint . setXfermode ( null ) ; final int $F192701 ( halfBitmapWidth , bitmap ) ; final int halfBitmapHeight = $F63370 ( bitmap ) ; BitmapShader bitmapShader = new BitmapShader ( bitmap , Shader . TileMode . REPEAT , Shader . TileMode . REPEAT ) ; $F28837 ( shaderMatrix ) float minSize = bitmap . getWidth ( ) > bitmap . getHeight ( ) ? bitmap . getHeight ( ) : bitmap . getWidth ( ) ; float scale = radius * NUM00 / minSize ; shaderMatrix . setScale ( scale , scale ) ; shaderMatrix . postTranslate ( centerX - ( halfBitmapWidth * scale ) , centerY - ( halfBitmapHeight * scale ) ) ; bitmapShader . setLocalMatrix ( shaderMatrix ) ; drawPaint . setShader ( bitmapShader ) ; canvas . drawCircle ( centerX , centerY , radius , drawPaint ) ; drawPaint . setShader ( null ) ; }
SNode awaitFulfill ( SNode s , boolean timed , long nanos ) { $F74107 ( deadline , timed , System , nanos ) $F686 ( w , Thread ) int spins = ( shouldSpin ( s ) ? ( timed ? maxTimedSpins : maxUntimedSpins ) : NUM00 ) ; for ( $F589 ) { if $F84922 ( w ) s . tryCancel ( ) ; SNode m = s . match ; $F60730 ( m ) if ( timed ) { $F27353 ( nanos , deadline , System ) if ( nanos <= NUM00 ) { s . tryCancel ( ) ; $F598 } } if ( spins > NUM00 ) spins = shouldSpin ( s ) ? ( spins - NUM00 ) : NUM00 ; else if $F74129 ( s ) s . waiter = w ; else if ( ! timed ) LockSupport . park ( this ) ; else if ( nanos > spinForTimeoutThreshold ) LockSupport . parkNanos ( this , nanos ) ; } }
public MqttDevice mqttDevice $F72 { return mqttDevice ; }
public AbbaLockingDetector startCollecting $F72 { $F40963 ( thread , this ) ; thread . setDaemon ( _BOOL ) ; $F2346 ( thread ) return this ; }
$F83977 ( listener , mListeners )
protected Object readObjectOverride $F72 throws $F90681 { $F1338 ( input ) throw new IOException $F72 ; }
public float toMeters ( double pixels ) { return ( float ) ( pixels * METERS_PER_PIXELS ) ; }
public static String searchRemoveFromCategory ( HttpServletRequest request , HttpServletResponse response ) { $F15914 ( delegator , request ) $F10362 ( productCategoryId , request ) String errMsg = null ; try { $F78679 ( beganTransaction , TransactionUtil , DEFAULT_TX_TIMEOUT ) try { EntityListIterator eli = getProductSearchResults ( request ) ; if ( eli == null ) { $F78681 ( errMsg , UtilProperties , resource , UtilHttp , request ) ; $F34765 ( request , errMsg ) $F1278 } int numRemoved = NUM00 ; GenericValue searchResultView = null ; while $F76177 ( searchResultView , eli ) { $F21024 ( productId , searchResultView ) numRemoved += delegator . removeByAnd ( NUM00 , $F78686 ( UtilMisc , productCategoryId , productId ) ) ; } $F59 ( eli ) $F2539 messageMap = UtilMisc . toMap ( NUM00 , Integer . toString ( numRemoved ) ) ; $F210959 ( errMsg , UtilProperties , resource , messageMap , UtilHttp , request ) $F34765 ( request , errMsg ) } catch ( GenericEntityException e ) { $F210956 ( messageMap , UtilMisc , e ) $F210959 ( errMsg , UtilProperties , resource , messageMap , UtilHttp , request ) Debug . logError ( e , errMsg , module ) ; $F34765 ( request , errMsg ) TransactionUtil . rollback ( beganTransaction , errMsg , e ) ; $F1278 } $F78711 ( TransactionUtil , beganTransaction ) } catch ( GenericTransactionException e ) { $F210956 ( messageMap , UtilMisc , e ) $F210959 ( errMsg , UtilProperties , resource , messageMap , UtilHttp , request ) Debug . logError ( e , errMsg , module ) ; $F34765 ( request , errMsg ) $F1278 } $F1278 }
boolean addToBuffer ( char c ) throws IOException { $F1749 ( len , sb ) if ( len == NUM00 && c != CHAR_LT ) return _BOOL ; sb . append ( c ) ; if ( ++ len >= minTagLen ) { boolean isClosingTag = ( len >= NUM00 && sb . charAt ( NUM00 ) == CHAR_SL ) ; String substr ; if ( isClosingTag ) $F64779 ( substr , sb ) else $F64779 ( substr , sb ) for ( $F1139 ( i , EXCLUDE_TAGS ) ) { if $F11411 ( substr , EXCLUDE_TAGS , i ) { if ( isClosingTag ) { depthDec ( i ) ; printBuffer ( ) ; lastChar = NUM00 ; } else { depthInc ( i ) ; } } } } return _BOOL ; }
public static double length $F7635 ( x , y , z ) { $F100238 ( Math , x , y , z ) }
public static $F4203 T jsonToObject $F92641 ( jsonString , klass ) { T objectFromJson = null ; try { GfJsonObject jsonObject = new GfJsonObject ( jsonString ) ; $F33943 ( objectFromJson , klass ) $F23598 ( declaredMethods , klass ) Map < String , Method > methodsMap = new HashMap < String , Method > $F72 ; for ( Method method : declaredMethods ) $F64959 ( methodsMap , method ) $F2199 ( noOfFields , jsonObject ) $F50737 ( keys , jsonObject ) while $F2921 ( keys ) { $F13714 ( key , keys ) Method method = methodsMap . get ( NUM00 + capitalize ( key ) ) ; if ( method != null ) { $F272051 ( parameterTypes , method ) if $F9634 ( parameterTypes ) { $F6969 parameterType = parameterTypes [ NUM00 ] ; $F16628 ( value , jsonObject , key ) if ( isPrimitiveOrWrapper ( parameterType ) ) $F199548 ( value , getPrimitiveOrWrapperValue , parameterType ) else if ( isArray ( parameterType ) ) $F176272 ( value , toArray , parameterType ) else if ( isList ( parameterType ) ) $F176272 ( value , toList , parameterType ) else if ( isMap ( parameterType ) ) $F176272 ( value , toMap , parameterType ) else if ( isSet ( parameterType ) ) $F176272 ( value , toSet , parameterType ) else { value = $F25730 ( jsonToObject , value , parameterType ) ; } $F226025 ( method , objectFromJson , value ) noOfFields -- ; } } } if ( noOfFields != NUM00 ) $F20855 ( jsonString , klass ) } catch ( InstantiationException e ) $F12615 ( klass , e ) catch ( IllegalAccessException e ) $F12615 ( klass , e ) catch ( GfJsonException e ) $F12615 ( klass , e ) $F137279 ( klass , e ) catch ( InvocationTargetException e ) $F12615 ( klass , e ) return objectFromJson ; }
private Cache createCache $F72 throws CacheException { $F859 ( props ) $F9266 ( props , LOCATORS ) $F9266 ( props , MCAST_PORT ) return CacheFactory . create ( DistributedSystem . connect ( props ) ) ; }
public AttributeListPanel $F72 { m_Table . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; m_Table . setColumnSelectionAllowed ( _BOOL ) ; m_Table . setPreferredScrollableViewportSize ( $F32534 ) ; $F9898 ( setLayout ) add ( new JScrollPane ( m_Table ) , BorderLayout . CENTER ) ; }
protected $F20724 toArray $F72 { int i ; int n ; int ii ; int nn ; int x ; int y ; $F20725 ( result ) ; $F20725 ( tmpResult ) ; int cols ; int rows ; boolean valueExists ; rows = getVisibleRowCount ( ) ; if ( getShowAverage ( ) ) { rows ++ ; } cols = getVisibleColCount ( ) ; if ( getShowStdDev ( ) ) $F121129 ( cols ) else $F121129 ( cols ) result = new String [ rows + NUM00 ] [ cols + NUM00 ] ; result [ NUM00 ] [ NUM00 ] = trimString ( NUM00 , getRowNameWidth ( ) ) ; x = NUM00 ; for ( $F95978 ( ii , getColCount ) ) { i = getDisplayCol ( ii ) ; $F18649 ( getColHidden , i ) result [ NUM00 ] [ x ] = trimString ( removeFilterName ( getColName ( i ) ) , getColNameWidth ( ) ) ; x ++ ; if ( getShowStdDev ( ) ) { result [ NUM00 ] [ x ] = NUM00 ; x ++ ; } result [ NUM00 ] [ x ] = NUM00 ; x ++ ; } y = NUM00 ; for ( $F95978 ( ii , getRowCount ) ) { i = getDisplayRow ( ii ) ; if ( ! getRowHidden ( i ) ) { result [ y ] [ NUM00 ] = trimString ( removeFilterName ( getRowName ( i ) ) , getRowNameWidth ( ) ) ; y ++ ; } } y = NUM00 ; for ( $F95978 ( ii , getRowCount ) ) { i = getDisplayRow ( ii ) ; $F18649 ( getRowHidden , i ) x = NUM00 ; for ( $F95978 ( nn , getColCount ) ) { n = getDisplayCol ( nn ) ; $F18649 ( getColHidden , n ) valueExists = ( ! Double . isNaN ( getMean ( n , i ) ) ) ; if ( ! valueExists ) { result [ y ] [ x ] = NUM00 ; } else { result [ y ] [ x ] = doubleToString ( getMean ( n , i ) , getMeanPrec ( ) ) ; } x ++ ; if ( getShowStdDev ( ) ) { if ( ! valueExists ) { result [ y ] [ x ] = NUM00 ; } else if ( Double . isInfinite ( getStdDev ( n , i ) ) ) { result [ y ] [ x ] = NUM00 ; } else { result [ y ] [ x ] = doubleToString ( getStdDev ( n , i ) , getStdDevPrec ( ) ) ; } x ++ ; } if ( ! valueExists ) { result [ y ] [ x ] = NUM00 ; } else { switch ( getSignificance ( n , i ) ) { case SIGNIFICANCE_TIE : result [ y ] [ x ] = TIE_ "STRING" ; $F597 case SIGNIFICANCE_WIN : result [ y ] [ x ] = WIN_ "STRING" ; $F597 case SIGNIFICANCE_LOSS : result [ y ] [ x ] = LOSS_ "STRING" ; $F597 } } x ++ ; } y ++ ; } if ( getShowAverage ( ) ) { y = result . length - NUM00 ; x = NUM00 ; result [ y ] [ NUM00 ] = NUM00 ; x ++ ; for ( $F95978 ( ii , getColCount ) ) { i = getDisplayCol ( ii ) ; $F18649 ( getColHidden , i ) result [ y ] [ x ] = doubleToString ( getAverage ( i ) , getMeanPrec ( ) ) ; x ++ ; if ( getShowStdDev ( ) ) { result [ y ] [ x ] = NUM00 ; x ++ ; } result [ y ] [ x ] = NUM00 ; x ++ ; } } y = result . length - NUM00 ; x = NUM00 ; result [ y ] [ NUM00 ] = LEFT_PARENTHESES + WIN_ <missing ';'> NUM00 + NUM00 + TIE_ <missing ';'> NUM00 + NUM00 + LOSS_ <missing ';'> NUM00 + RIGHT_PARENTHESES ; x ++ ; for ( $F95978 ( ii , getColCount ) ) { i = getDisplayCol ( ii ) ; $F18649 ( getColHidden , i ) result [ y ] [ x ] = NUM00 ; x ++ ; if ( getShowStdDev ( ) ) { result [ y ] [ x ] = NUM00 ; x ++ ; } result [ y ] [ x ] = LEFT_PARENTHESES + getSignificanceCount ( i , SIGNIFICANCE_WIN ) + NUM00 + getSignificanceCount ( i , SIGNIFICANCE_TIE ) + NUM00 + getSignificanceCount ( i , SIGNIFICANCE_LOSS ) + RIGHT_PARENTHESES ; x ++ ; } tmpResult = new String [ result . length ] [ result [ NUM00 ] . length - NUM00 ] ; x = NUM00 ; for ( i = NUM00 ; i < result [ NUM00 ] . length ; i ++ ) { if ( ( ( i == NUM00 ) && ( getShowStdDev ( ) ) ) || ( ( i == NUM00 ) && $F931 ( getShowStdDev ) ) ) $F1448 for ( $F6929 ( n , result ) ) { tmpResult [ n ] [ x ] = result [ n ] [ i ] ; } x ++ ; } result = tmpResult ; return result ; }
private Environment $F72 { throw ContractUtils . unreachable ( ) ; }
public void removePhoto ( PhotoEntity photo ) $F106 ( photos , photo )
public static int binarySearch ( $F1986 array , int startIndex , int endIndex , double value ) { checkIndexForBinarySearch ( array . length , startIndex , endIndex ) ; $F39428 ( longBits , Double , value ) int low = startIndex , mid = - NUM00 , high = endIndex - NUM00 ; while ( low <= high ) { $F62498 ( mid , low , high ) if ( lessThan ( array [ mid ] , value ) ) { low = mid + NUM00 ; } else if ( longBits == Double . doubleToLongBits ( array [ mid ] ) ) { return mid ; } else { high = mid - NUM00 ; } } if ( mid < NUM00 ) { int insertPoint = endIndex ; for ( int index = startIndex ; index < endIndex ; index ++ ) { if ( value < array [ index ] ) { insertPoint = index ; } } return - insertPoint - NUM00 ; } return - mid - ( lessThan ( value , array [ mid ] ) ? NUM00 : NUM00 ) ; }
public static void compute ( double minScore , double topPercent , double maxExpected , float minPercentIdentity , IReadBlock readBlock , String classificationName , BitSet activeMatchesForClassification ) { $F725 ( activeMatchesForClassification ) for ( int i = NUM00 ; i < readBlock . getNumberOfAvailableMatchBlocks ( ) ; i ++ ) { final IMatchBlock matchBlock = readBlock . getMatchBlock ( i ) ; if ( ! matchBlock . isIgnore ( ) && matchBlock . getBitScore ( ) >= minScore && matchBlock . getExpected ( ) <= maxExpected && matchBlock . getPercentIdentity ( ) >= minPercentIdentity ) { if ( matchBlock . getId ( classificationName ) > NUM00 ) activeMatchesForClassification . set ( i ) ; } } float bestScore = NUM00 ; for ( $F304395 ( i , activeMatchesForClassification ) ; i != - NUM00 ; $F304396 ( i , activeMatchesForClassification ) ) { final IMatchBlock matchBlock = readBlock . getMatchBlock ( i ) ; float score = matchBlock . getBitScore ( ) ; $F15468 ( score , bestScore ) } applyTopPercentFilter ( topPercent , bestScore , minPercentIdentity , readBlock , activeMatchesForClassification ) ; }
public $F38234 toArray $F102871 ( a ) { if ( a . length != array . length ( ) ) { throw new ElasticsearchGenerationException $F580 ; } for ( $F1088 ( i , array ) ) $F15303 ( a , i , array ) return a ; }
synchronized public void failOn ( Failure fail ) $F23232 ( failures , fail )
public void dump_stack $F72 { $F25700 ( stack , debug_message ) debug_message ( NUM00 ) ; for ( $F2277 ( i , stack ) ) { debug_message ( NUM00 + ( ( symbol ) stack . elementAt ( i ) ) . sym + NUM00 + ( ( symbol ) stack . elementAt ( i ) ) . parse_state ) ; } debug_message ( NUM00 ) ; }
private static $F2689 createCategoriesSet $F32029 ( categories ) { $F13750 ( result ) for ( String cat : categories ) { result . add ( StringUtil . toLowerCase ( cat ) ) ; } return result ; }
public void loadListener ( String serverKey ) throws GenericServiceException { Server server = servers . get ( serverKey ) ; if ( server == null ) throw new GenericServiceException $F580 ; loadListener ( serverKey , server ) ; }
public void upload ( File file , long restartAt , FTPDataTransferListener listener ) throws IllegalStateException , FileNotFoundException , IOException , FTPIllegalReplyException , FTPException , FTPDataTransferException , FTPAbortedException { if $F1906 ( file ) { throw new FileNotFoundException $F89450 ( file ) ; } InputStream inputStream = null ; try { $F5335 ( inputStream , file ) } catch ( IOException e ) { throw new FTPDataTransferException ( e ) ; } try { upload ( file . getName ( ) , inputStream , restartAt , restartAt , listener ) ; } catch ( IllegalStateException e ) { throw e ; } $F8012 ( e ) catch ( FTPIllegalReplyException e ) { throw e ; } catch ( FTPException e ) { throw e ; } catch ( FTPDataTransferException e ) { throw e ; } catch ( FTPAbortedException e ) { throw e ; } finally { $F73912 ( inputStream ) } }
public SSLSocket createSSLSocket ( Socket socket ) throws IOException { SSLSocketFactory sf = ( ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ) ; InetSocketAddress remoteAddress = ( InetSocketAddress ) socket . getRemoteSocketAddress ( ) ; SSLSocket s = ( SSLSocket ) ( sf . createSocket ( socket , remoteAddress . getHostName ( ) , socket . getPort ( ) , _BOOL ) ) ; s . setUseClientMode ( _BOOL ) ; s . setEnabledCipherSuites ( s . getSupportedCipherSuites ( ) ) ; return s ; }
private String formatNode ( RightThreadedBinaryNode $F4203 node ) { RightThreadedBinaryNode $F4203 n ; $F4000 ( response ) if ( ( n = node . getLeftSon ( ) ) != null ) $F9821 ( response , formatNode , n ) $F11659 ( response , node ) if ( ( n = node . getRightSon ( ) ) != null ) $F9821 ( response , formatNode , n ) $F84 ( response ) $F92 ( response ) }
public static void unregisterMBean $F60993 ( mbeanInterface ) { $F21354 ( mbs , ManagementFactory ) try { ObjectName name = generateMBeanObjectName ( mbeanInterface ) ; if ( mbs . isRegistered ( name ) ) { $F209111 ( logger , name ) mbs . unregisterMBean ( name ) ; } else { logger . warn ( $F368 ( name ) ) ; } } catch ( Exception e ) { throw new ServerRuntimeException ( NUM00 + mbeanInterface , e ) ; } }
public void writeExif ( InputStream jpegStream , String exifOutFileName ) throws $F27136 { $F26831 ( jpegStream , exifOutFileName , NULL_ARGUMENT_ ) OutputStream s = null ; try { s = getExifWriterStream ( exifOutFileName ) ; doExifStreamIO ( jpegStream , s ) ; $F1206 ( s ) } $F27615 ( closeSilently , s , e ) $F59 ( s ) }
public void sort $F134589 ( comparator ) { synchronized ( mLock ) { if ( mOriginalValues != null ) $F57005 ( Collections , mOriginalValues , comparator ) else $F57005 ( Collections , mObjects , comparator ) } $F32367 ( mNotifyOnChange , notifyDataSetChanged ) }
static boolean causedByRDE ( DiskAccessException dae ) { boolean result = _BOOL ; if ( dae != null ) { $F31570 ( cause , dae ) while ( cause != null ) { if ( cause instanceof RegionDestroyedException ) $F3468 ( result , _BOOL ) $F131447 ( cause ) } } return result ; }
public JsonArray add ( String value ) { values . add ( Json . value ( value ) ) ; return this ; }
public MagicVariablesArgumentsBundle ( $F4170 $F2539 arguments , $F4170 $F2539 variables , String layerName , $F4170 DisplayMetrics metrics ) { super ( arguments , metrics ) ; mVariables = variables ; mLayerNamePrefix = $F139654 ( layerName ) ; }
@ HLEUnimplemented $F79740 public int sceUsbCamSetupVideoEx ( pspUsbCamSetupVideoExParam usbCamSetupVideoExParam , TPointer workArea , int workAreaSize ) { this . workArea = workArea . getAddress ( ) ; this . workAreaSize = workAreaSize ; resolution = convertResolutionExToResolution ( usbCamSetupVideoExParam . resolution ) ; frameRate = usbCamSetupVideoExParam . framerate ; whiteBalance = usbCamSetupVideoExParam . wb ; saturation = usbCamSetupVideoExParam . saturation ; brightness = usbCamSetupVideoExParam . brightness ; contrast = usbCamSetupVideoExParam . contrast ; sharpness = usbCamSetupVideoExParam . sharpness ; imageEffectMode = usbCamSetupVideoExParam . effectmode ; frameSize = usbCamSetupVideoExParam . framesize ; evLevel = usbCamSetupVideoExParam . evlevel ; if $F931 ( setupVideo ) { log . warn ( String . format ( NUM00 ) ) ; return SceKernelErrors . ERROR_USBCAM_NOT_READY ; } $F1082 }
public List $F284080 loadAllDeepFromCursor ( Cursor cursor ) { $F23386 ( count , cursor ) List $F284080 list = new ArrayList $F284080 ( count ) ; $F23402 ( cursor , identityScope , count , list , loadCurrentDeep , _BOOL ) return list ; }
public static Date convertISO8601toDate ( String dateString ) throws ParseException { $F121432 ( dateFormat ) $F126579 ( date , dateFormat , dateString ) return date ; }
public static Document createDOM ( InputStream is ) throws ParserConfigurationException , SAXException , IOException { $F2218 ( dbf , DocumentBuilderFactory ) dbf . setValidating ( _BOOL ) ; dbf . setIgnoringComments ( _BOOL ) ; dbf . setIgnoringElementContentWhitespace ( _BOOL ) ; dbf . setNamespaceAware ( _BOOL ) ; dbf . setFeature ( XMLConstants . FEATURE_SECURE_PROCESSING , _BOOL ) ; dbf . setFeature ( DISALLOW_DOCTYPE_DECL , _BOOL ) ; dbf . setFeature ( EXTERNAL_GENERAL_ENTITIES , _BOOL ) ; dbf . setFeature ( EXTERNAL_PARAMETER_ENTITIES , _BOOL ) ; dbf . setFeature ( LOAD_EXTERNAL_DTD , _BOOL ) ; DocumentBuilder db = null ; $F6281 ( db , dbf ) db . setEntityResolver ( new NullResolver $F72 ) ; db . setErrorHandler ( new SamlParserErrorHandler $F72 ) ; $F5651 ( db , is ) }
$F198049 ( Double , getValue )
public void resetCount $F72 $F21827 ( msgCnt )
public void scheduleAtFixedRate $F61001 ( task , when , period ) { $F61005 ( period , when ) $F61009 ( delay , when , System ) scheduleImpl ( task , delay , period , _BOOL ) ; }
void decodeAttributeBody $F65230 ( attributeValue , offset , length ) throws StunException $F65231 ( realm , length , System , attributeValue , offset )
public static void copyAssets ( Context context , String assetsFilename , File file , String mode ) throws $F3 { String abi = Build . CPU_ABI ; String libraryName ; if $F21935 ( abi ) { libraryName = NUM00 ; } else if $F21935 ( abi ) { libraryName = NUM00 ; } else if $F3578 ( abi ) { libraryName = NUM00 ; } else $F932 AssetManager manager = context . getAssets ( ) ; final InputStream is = manager . open ( libraryName + NUM00 + assetsFilename ) ; copyFile ( file , is , mode ) ; }
public boolean is_same ( Object obj ) { if ( this == obj ) return _BOOL ; $F397 ( obj , _BOOL ) $F9904 ( getClass , obj , _BOOL ) HouseNumber other = ( HouseNumber ) obj ; if ( number == null ) { $F45206 ( name , other , _BOOL ) } else if $F45204 ( number , other ) return _BOOL ; $F45206 ( street , other , _BOOL ) return _BOOL ; }
public static double nextUp ( double d ) { if ( d == Double . POSITIVE_INFINITY ) return d ; else { d += NUM00 ; return Double . longBitsToDouble ( Double . doubleToRawLongBits ( d ) + ( ( d >= NUM00 ) ? + NUM00 : - NUM00 ) ) ; } }
public int threeWayDistance ( Key k1 , Key k2 ) { $F96 h0 = hash ; $F96 h1 = k1 . hash ; $F96 h2 = k2 . hash ; int mmi = mismatch ( h1 , h2 ) ; if ( mmi == - NUM00 ) $F1082 int h = Byte . toUnsignedInt ( h0 [ mmi ] ) ; int a = Byte . toUnsignedInt ( h1 [ mmi ] ) ; int b = Byte . toUnsignedInt ( h2 [ mmi ] ) ; return Integer . compareUnsigned ( a ^ h , b ^ h ) ; }
static $F96 discardWhitespace $F97 ( data ) { byte groomedData [ ] = $F3027 ( data ) ; int bytesCopied = NUM00 ; for ( $F1139 ( i , data ) ) { switch ( data [ i ] ) { $F271981 $F271981 $F271981 $F271981 $F597 $F1267 groomedData [ bytesCopied ++ ] = data [ i ] ; } } byte packedData [ ] = new byte [ bytesCopied ] ; $F135 ( System , groomedData , packedData , bytesCopied ) return packedData ; }
public AsyncSelector $F72 throws IOException { this ( Selector . open ( ) ) ; }
public void removeChildAt ( int index ) { if ( ( index < NUM00 ) || ( children == null ) || $F6389 ( index , children ) ) { $F38324 } Element child = ( Element ) children . get ( index ) ; child . setParent ( null ) ; children . remove ( index ) ; }
private $F16501 diff_bisectSplit ( String text1 , String text2 , int x , int y , long deadline ) { $F11991 ( text1a , text1 , x ) $F11991 ( text2a , text2 , y ) $F12716 ( text1b , text1 , x ) $F12716 ( text2b , text2 , y ) $F40337 ( diffs , diff_main , text1a , text2a , _BOOL , deadline ) $F40337 ( diffsb , diff_main , text1b , text2b , _BOOL , deadline ) diffs . addAll ( diffsb ) ; return diffs ; }
private void paint ( Painter p , SynthContext ctx , Graphics g , int x , int y , int w , int h , AffineTransform transform ) { if ( p != null ) { if ( g instanceof Graphics2D ) { $F20230 ( gfx , g ) if ( transform != null ) $F25910 ( gfx , transform ) gfx . translate ( x , y ) ; p . paint ( gfx , ctx . getComponent ( ) , w , h ) ; $F86480 ( gfx , x , y ) if ( transform != null ) { try { gfx . transform ( transform . createInverse ( ) ) ; } catch ( NoninvertibleTransformException e ) $F302 ( e ) } } else { $F214300 ( img , w , h , BufferedImage ) $F5115 ( gfx , img ) if ( transform != null ) $F25910 ( gfx , transform ) p . paint ( gfx , ctx . getComponent ( ) , w , h ) ; $F355 ( gfx ) $F108383 ( g , img , x , y ) img = null ; } } }
static void loadDirectory ( File file , ModuleCandidate candidate ) throws IOException { $F5459 ( files , file ) if ( files != null ) for ( File f : files ) loadSubDirectory ( file , f , candidate ) ; }
public static boolean hasSuppressed ( $F5466 Throwable t , $F5466 $F78637 cls ) { $F133007 ( t , cls , _BOOL ) if ( t . getSuppressed ( ) != null ) { for ( Throwable th : t . getSuppressed ( ) ) { if $F178804 ( cls , th ) return _BOOL ; $F19670 ( hasSuppressed , th , cls , _BOOL ) } } return _BOOL ; }
static int writeVarLong ( OutputStream out , long x ) throws IOException { int len = NUM00 ; while $F220175 ( x ) { out . write ( ( byte ) ( NUM00 | ( x & NUM00 ) ) ) ; x >>>= NUM00 ; len ++ ; } $F220182 ( out , x ) return ++ len ; }
protected void engineUpdate ( byte b ) throws SignatureException { messageDigest . update ( b ) ; needsReset = _BOOL ; }
$F92274 ( s , lock , this , p , first )
private boolean checkIfInitiatorForRPBeforeMigration ( Initiator initiator ) { $F1933 ( initiator , _BOOL ) boolean isRP = _BOOL ; if ( NullColumnValueGetter . isNullValue ( initiator . getHostName ( ) ) || ! NullColumnValueGetter . isNullURI ( initiator . getHost ( ) ) ) { isRP = _BOOL ; } log . debug ( $F89332 ( isRP ) ) ; return isRP ; }
$F1 public Collection < SerialMessage > initialize ( boolean refresh ) { ArrayList < SerialMessage > result = new ArrayList < SerialMessage > $F72 ; if ( isSupportRequestSupported == _BOOL && ( refresh == _BOOL || initialiseDone == _BOOL ) && getVersion ( ) > NUM00 ) $F33452 ( result , getSupportedMessage ) return result ; }
public static $F131 sortCopy ( $F131 objects , Comparer comparer ) { int len = objects . length ; $F133 ( copy , len ) $F135 ( System , objects , copy , len ) sort ( copy , comparer ) ; return copy ; }
public static DMLConfig readConfigurationFile ( String configPath ) throws ParseException , FileNotFoundException { DMLConfig config = new DMLConfig $F72 ; if ( configPath != null ) { try { config = new DMLConfig ( configPath , _BOOL ) ; } catch ( FileNotFoundException fnfe ) { $F19652 ( LOG , configPath ) throw fnfe ; } catch ( ParseException e ) { throw e ; } } else { try { config = new DMLConfig ( DEFAULT_SYSTEMML_CONFIG_FILEPATH , _BOOL ) ; } catch ( FileNotFoundException fnfe ) { LOG . info ( NUM00 + NUM00 ) ; config = new DMLConfig $F72 ; } catch ( ParseException e ) { throw e ; } } return config ; }
default B withDefault ( String key , int value ) $F65298 ( withDefault , key , Integer , value )
private $F806 combineResultsFromMultipleReads $F159246 ( buffer , lastRead ) { $F806 t = new String $F12348 ( buffer , lastRead ) ; $F7057 ( System , buffer , t ) $F11244 ( System , lastRead , t , buffer ) return t ; }
private static boolean isRetina $F72 { if ( SystemInfo . isAppleJvm ) $F2905 ( hasAppleRetinaDevice ) if ( SystemInfo . isMac ) { GraphicsEnvironment e = GraphicsEnvironment . getLocalGraphicsEnvironment ( ) ; GraphicsDevice [ ] devices = e . getScreenDevices ( ) ; for ( GraphicsDevice device : devices ) $F283363 ( isOracleMacRetinaDevice , device , _BOOL ) } return _BOOL ; }
protected void scanCompilationUnits ( final List < ICompilationUnit > us ) throws IllegalArgumentException , CoreException { progressMonitor . beginTask ( $F2310 ( us ) ) ; for ( final ICompilationUnit : us ) scanCompilationUnit ( , newSubMonitor ( progressMonitor ) ) ; $F87122 ( progressMonitor ) }
public void pOln ( Object o ) throws IOException { $F31458 ( pO , o ) pln ( ) ; }
private void drawCombat ( final Graphics2D g2d , final int x , final int y , final int width , final int height ) { Rectangle2D wrect = entity . getArea ( ) ; final Rectangle srect = new Rectangle ( ( int ) ( wrect . getX ( ) * IGameScreen . SIZE_UNIT_PIXELS ) , ( int ) ( wrect . getY ( ) * IGameScreen . SIZE_UNIT_PIXELS ) , ( int ) ( wrect . getWidth ( ) * IGameScreen . SIZE_UNIT_PIXELS ) , ( int ) ( wrect . getHeight ( ) * IGameScreen . SIZE_UNIT_PIXELS ) ) ; int circleHeight = ( int ) ( ( srect . height - NUM00 ) / SQRT2 ) ; circleHeight = Math . max ( circleHeight , srect . height - IGameScreen . SIZE_UNIT_PIXELS / NUM00 ) ; if ( entity . isAttacking ( User . get ( ) ) ) { g2d . setColor ( RING_COLOR_ORANGE ) ; g2d . drawOval ( srect . x - NUM00 , $F6118 ( srect ) - circleHeight , srect . width , circleHeight ) ; g2d . drawOval ( srect . x , $F6118 ( srect ) - circleHeight , srect . width , circleHeight ) ; g2d . drawOval ( srect . x + NUM00 , $F6118 ( srect ) - circleHeight , srect . width , circleHeight ) ; drawShadedOval ( g2d , srect . x + NUM00 , $F6118 ( srect ) - circleHeight + NUM00 , srect . width - NUM00 , circleHeight - NUM00 , RING_COLOR_ORANGE , _BOOL , _BOOL ) ; } if ( entity . isBeingAttacked ( ) ) { Color lineColor ; g2d . setColor ( RING_COLOR_RED ) ; if ( entity . isAttacking ( User . get ( ) ) ) { lineColor = RING_COLOR_RED ; drawShadedOval ( g2d , srect . x - NUM00 , $F6118 ( srect ) - circleHeight - NUM00 , srect . width + NUM00 , circleHeight + NUM00 , RING_COLOR_RED , _BOOL , _BOOL ) ; } else { lineColor = RING_COLOR_DARK_RED ; g2d . drawOval ( srect . x - NUM00 , $F6118 ( srect ) - circleHeight , srect . width , circleHeight ) ; g2d . drawOval ( srect . x , $F6118 ( srect ) - circleHeight , srect . width , circleHeight ) ; g2d . drawOval ( srect . x + NUM00 , $F6118 ( srect ) - circleHeight , srect . width , circleHeight ) ; drawShadedOval ( g2d , srect . x + NUM00 , $F6118 ( srect ) - circleHeight + NUM00 , srect . width - NUM00 , circleHeight - NUM00 , RING_COLOR_RED , _BOOL , _BOOL ) ; drawShadedOval ( g2d , srect . x - NUM00 , $F6118 ( srect ) - circleHeight - NUM00 , srect . width + NUM00 , circleHeight + NUM00 , RING_COLOR_ORANGE , _BOOL , _BOOL ) ; } EnumSet < Direction > directions = EnumSet . noneOf ( Direction . class ) ; for ( Entity attacker : entity . getAttackers ( ) ) { directions . add ( Direction . getAreaDirectionTowardsArea ( entity . getArea ( ) , attacker . getArea ( ) ) ) ; } drawArrows ( g2d , srect . x - NUM00 , $F6118 ( srect ) - circleHeight - NUM00 , srect . width + NUM00 , circleHeight + NUM00 , directions , lineColor ) ; } else if ( entity . isAttacking ( User . get ( ) ) ) { drawShadedOval ( g2d , srect . x - NUM00 , $F6118 ( srect ) - circleHeight - NUM00 , srect . width + NUM00 , circleHeight + NUM00 , RING_COLOR_ORANGE , _BOOL , _BOOL ) ; } drawAttack ( g2d , x , y , width , height ) ; if ( entity . isDefending ( ) ) { final int sx = $F6108 ( srect ) - ICON_OFFSET ; final int sy = y + height - NUM00 * ICON_OFFSET ; switch ( entity . getResolution ( ) ) { case BLOCKED : blockedSprite . draw ( g2d , sx , sy ) ; $F597 case MISSED : missedSprite . draw ( g2d , sx , sy ) ; $F597 case HIT : hitSprite . draw ( g2d , sx , sy ) ; $F597 $F1267 } } }
public ActivityResolveInfo ( ResolveInfo resolveInfo ) $F6988 ( this , resolveInfo )
private static $F7329 postIndexedLSR $F68514 ( offset , environment , instructions , registerNodeValue1 , registerNodeValue2 , immediateNodeValue ) { $F7336 ( address , environment ) $F7336 ( tmpVar1 , environment ) $F7336 ( tmpVar2 , environment ) $F7336 ( index , environment ) long baseOffset = offset ; $F43813 ( instructions , ReilHelpers , baseOffset , dw , registerNodeValue1 , address ) instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dw , registerNodeValue2 , dw , NUM00 + immediateNodeValue , qw , tmpVar1 ) ) ; $F7364 ( instructions , ReilHelpers , baseOffset , qw , tmpVar1 , dw , dWordBitMask , index ) $F43828 ( instructions , ReilHelpers , baseOffset , dw , registerNodeValue1 , index , tmpVar2 ) $F7341 ( instructions , ReilHelpers , baseOffset , dw , tmpVar2 , dWordBitMask , registerNodeValue1 ) $F7348 ( address , registerNodeValue1 ) }
private void endFormals $F72 { $F430955 ( hasFormals , _BOOL , buf ) }
public boolean nextIsSep $F72 { if ( $F15875 ( Character , str , currentPosition ) ) return _BOOL ; else return _BOOL ; }
private String extractProjectNameFromUri $F116884 ( uri ) { $F24867 ( indexFinishProjectName , uri ) int indexStartProjectName = uri . lastIndexOf ( NUM00 ) != - NUM00 ? $F31603 ( uri ) : ( $F31603 ( uri ) ) ; if ( indexStartProjectName != NUM00 && indexStartProjectName < indexFinishProjectName ) $F102712 ( uri , indexStartProjectName , indexFinishProjectName ) if ( indexStartProjectName != NUM00 ) $F61217 ( uri , indexStartProjectName ) $F1278 }
public final void addReference ( Object ref ) $F207 ( refSet , ref )
private void resetNotes2 $F72 { if ( errorInStatus2 ) { if ( editMode ) $F59925 ( statusText1 , editStatus2 ) else $F59925 ( statusText2 , stdStatus2 ) errorInStatus2 = _BOOL ; } }
public RequirementsBuilder addRequireProperty ( String name , RequirementsBuilder builder ) { addProperty ( name , builder ) ; requiredProperties . add ( name ) ; return this ; }
private Cell detectAndAddHit ( float x , float y ) { final Cell cell = checkForNewHit ( x , y ) ; if ( cell != null ) { Cell fillInGapCell = null ; $F462837 ( pattern , mPattern ) $F462857 ( pattern , lastCell , dRow , cell , dColumn , fillInRow , fillInColumn , Math , fillInGapCell , Cell ) $F462862 ( fillInGapCell , mPatternDrawLookup , addCellToPattern ) addCellToPattern ( cell ) ; if ( mEnableHapticFeedback ) { $F462866 ( performHapticFeedback , HapticFeedbackConstants ) } return cell ; } $F1274 }
public HeadRule ( String dir , String rule ) { $F35105 ( tmp , P_TAGSETS , rule ) int i , size = tmp . length ; b_r2l = dir . equals ( DIR_RIGHT_TO_LEFT ) ; a_tagSets = new HeadTagSet [ size ] ; for ( i = NUM00 ; i < size ; i ++ ) a_tagSets [ i ] = new HeadTagSet ( tmp [ i ] ) ; }
public void testNegPosFirstShorter $F72 { $F50446 $F92469 int aSign = - NUM00 ; int bSign = NUM00 ; byte $F3018 = { - NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F45034 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , result ) }
$F1 public $F4203 Future $F4203 submit $F41334 ( task ) { synchronized ( this ) { $F5224 ( active ) long timeout = NUM00 ; while ( queue . remainingCapacity ( ) == NUM00 ) { try { if ( timeout <= giveupTime ) { Thread . sleep ( DEFAULT_SLEEP ) ; timeout += DEFAULT_SLEEP ; } else $F11389 } $F73196 ( e ) } return super . submit ( task ) ; } }
public void testSubtractMathContextDiffScalePosNeg $F72 { String a = NUM00 ; int aScale = NUM00 ; String b = NUM00 ; int bScale = - NUM00 ; String c = NUM00 ; int cScale = - NUM00 ; $F1918 ( aNumber , a , aScale ) $F1918 ( bNumber , b , bScale ) MathContext mc = new MathContext ( NUM00 , RoundingMode . DOWN ) ; BigDecimal result = aNumber . subtract ( bNumber , mc ) ; $F1925 ( assertEquals , c , result ) $F1928 ( assertEquals , cScale , result ) }
protected XSQLDA allocateXSqlDa ( RowDescriptor rowDescriptor ) { if ( rowDescriptor == null || rowDescriptor . getCount ( ) == NUM00 ) { final XSQLDA xSqlDa = new XSQLDA $F989 ; xSqlDa . sqld = xSqlDa . sqln = NUM00 ; return xSqlDa ; } final XSQLDA xSqlDa = new XSQLDA $F90762 ( rowDescriptor ) ; for ( $F90748 ( idx , rowDescriptor ) ) { final FieldDescriptor fieldDescriptor = rowDescriptor . getFieldDescriptor ( idx ) ; final XSQLVAR xSqlVar = xSqlDa . sqlvar [ idx ] ; xSqlVar . sqltype = ( short ) ( fieldDescriptor . getType ( ) | NUM00 ) ; xSqlVar . sqlsubtype = ( short ) fieldDescriptor . getSubType ( ) ; xSqlVar . sqlscale = ( short ) fieldDescriptor . getScale ( ) ; xSqlVar . sqllen = ( short ) fieldDescriptor . getLength ( ) ; xSqlVar . sqlind = new ShortByReference $F72 ; final int requiredDataSize = fieldDescriptor . isVarying ( ) ? fieldDescriptor . getLength ( ) + NUM00 : fieldDescriptor . getLength ( ) + NUM00 ; xSqlVar . sqldata = new Memory ( requiredDataSize ) ; } return xSqlDa ; }
public static void overwrite ( $F2469 vector , long val , int offset , int len ) { int idx = offset > > NUM00 ; int bitIdx = offset & NUM00 ; int truncatedValLen = Math . min ( len , NUM00 - bitIdx ) ; vector [ idx ] &= ~ ( maskBelow ( truncatedValLen ) < < bitIdx ) ; vector [ idx ] |= val < < bitIdx ; if ( len != truncatedValLen ) { long mask = maskBelow ( len - truncatedValLen ) ; vector [ idx + NUM00 ] &= ~ mask ; vector [ idx + NUM00 ] |= ( val > > > truncatedValLen ) ; } }
public static boolean isEmpty ( String string ) { $F161848 ( string , _BOOL ) $F1964 ( string , EMPTY ) }
public void addScrollViewListener ( WXScrollViewListener scrollViewListener ) $F2202 ( mScrollViewListeners , scrollViewListener )
$F146919 ( s , length , _BOOL , sum , i , digit , FormatException )
Callbacks tryGetCallbacks ( Callbacks oldCallbacks ) { synchronized ( mLock ) { $F5972 ( mStopped ) $F1338 ( mCallbacks ) final Callbacks callbacks = mCallbacks . get ( ) ; if ( callbacks != oldCallbacks ) $F1337 if ( callbacks == null ) $F108257 ( Log , TAG ) return callbacks ; } }
public void beginUpdateMemoryUsed ( long bytesUsed , boolean willSendEvent ) ;
$F1 public Point translateJava2DToScreen ( Point2D java2DPoint ) { Insets insets = getInsets ( ) ; int x = ( int ) ( java2DPoint . getX ( ) * this . scaleX + insets . left ) ; int y = ( int ) ( java2DPoint . getY ( ) * this . scaleY + insets . top ) ; return new Point ( x , y ) ; }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
protected FastMap $F4 readDeclaredProperties ( WidgetCreatorContext context ) { FastMap $F4 declaredProperties = new FastMap $F4 $F72 ; String backColor = context . readWidgetProperty ( NUM00 ) ; if $F22 ( backColor ) $F70195 ( declaredProperties , backColor ) String fontName = context . readWidgetProperty ( NUM00 ) ; if $F22 ( fontName ) $F70195 ( declaredProperties , fontName ) String fontSize = context . readWidgetProperty ( NUM00 ) ; if $F22 ( fontSize ) $F70195 ( declaredProperties , fontSize ) String foreColor = context . readWidgetProperty ( NUM00 ) ; if $F22 ( foreColor ) $F70195 ( declaredProperties , foreColor ) String justification = context . readWidgetProperty ( NUM00 ) ; if $F22 ( justification ) $F70195 ( declaredProperties , justification ) String bold = context . readWidgetProperty ( NUM00 ) ; if $F22 ( bold ) $F70195 ( declaredProperties , bold ) String italic = context . readWidgetProperty ( NUM00 ) ; if $F22 ( italic ) $F70195 ( declaredProperties , italic ) String subscript = context . readWidgetProperty ( NUM00 ) ; if $F22 ( subscript ) $F70195 ( declaredProperties , subscript ) String superscript = context . readWidgetProperty ( NUM00 ) ; if $F22 ( superscript ) $F70195 ( declaredProperties , superscript ) String underline = context . readWidgetProperty ( NUM00 ) ; if $F22 ( underline ) $F70195 ( declaredProperties , underline ) String strikethrough = context . readWidgetProperty ( NUM00 ) ; if $F22 ( strikethrough ) $F70195 ( declaredProperties , strikethrough ) return declaredProperties ; }
private void updateTrafficProjections $F72 { List < AirMapTraffic > $F204 ( updated ) ; for ( AirMapTraffic traffic : allTraffic ) { if ( traffic . getGroundSpeedKt ( ) > - NUM00 && traffic . getTrueHeading ( ) > - NUM00 ) { allTraffic . remove ( traffic ) ; Coordinate projected = projectedCoordinate ( traffic ) ; traffic . setCoordinate ( projected ) ; traffic . setShowAlert ( _BOOL ) ; allTraffic . add ( traffic ) ; updated . add ( traffic ) ; } } notifyUpdated ( updated ) ; }
public static void logStackTrace ( Level level , Throwable throwable ) $F16625 ( logStackTrace , level , throwable )
public static float computeContrastBetweenColors ( int bg , int fg ) { float bgR = Color . red ( bg ) / NUM00 ; float bgG = Color . green ( bg ) / NUM00 ; float bgB = Color . blue ( bg ) / NUM00 ; $F121666 ( bgR , Math ) $F121666 ( bgG , Math ) $F121666 ( bgB , Math ) float bgL = NUM00 * bgR + NUM00 * bgG + NUM00 * bgB ; float fgR = Color . red ( fg ) / NUM00 ; float fgG = Color . green ( fg ) / NUM00 ; float fgB = Color . blue ( fg ) / NUM00 ; $F121666 ( fgR , Math ) $F121666 ( fgG , Math ) $F121666 ( fgB , Math ) float fgL = NUM00 * fgR + NUM00 * fgG + NUM00 * fgB ; return Math . abs ( ( fgL + NUM00 ) / ( bgL + NUM00 ) ) ; }
$F1 public int read $F72 throws IOException { $F7468 ( ch , super ) if ( ch != - NUM00 ) $F4050 ( branch , ch ) return ch ; }
private SublimeBaseMenuItem addInternal ( int group , int id , CharSequence title , CharSequence hint , SublimeBaseMenuItem . ItemType itemType , boolean valueProvidedAsync , CharSequence badgeText , boolean showsIconSpace , boolean addedByUser ) { SublimeBaseMenuItem item ; boolean isGroupHeader = _BOOL ; switch ( itemType ) { case SEPARATOR : item = new SublimeSeparatorMenuItem ( this , group , id ) ; $F597 case BADGE : item = new SublimeTextWithBadgeMenuItem ( this , group , id , title , hint , valueProvidedAsync , badgeText , showsIconSpace ) ; $F597 case SWITCH : item = new SublimeSwitchMenuItem ( this , group , id , title , hint , valueProvidedAsync , showsIconSpace ) ; $F597 case CHECKBOX : item = new SublimeCheckboxMenuItem ( this , group , id , title , hint , valueProvidedAsync , showsIconSpace ) ; $F597 case GROUP_HEADER : isGroupHeader = _BOOL ; item = new SublimeGroupHeaderMenuItem ( this , group , id , title , hint , valueProvidedAsync , showsIconSpace ) ; $F597 $F1267 item = new SublimeTextMenuItem ( this , group , id , title , hint , valueProvidedAsync , showsIconSpace ) ; $F597 } checkExistenceOfGroup ( group ) ; if ( isGroupHeader ) { checkIfGroupHeaderAlreadyExistsForGroup ( group ) ; int index = findGroupIndex ( group ) ; if ( index >= NUM00 ) $F42308 ( mItems , index , item ) else $F207 ( mItems , item ) } else if ( addedByUser ) { if ( group != NO_GROUP_ID ) { int lastGroupIndex = findLastGroupIndex ( group ) ; mItems . add ( lastGroupIndex == mItems . size ( ) ? lastGroupIndex : lastGroupIndex + NUM00 , item ) ; } else $F207 ( mItems , item ) } else $F207 ( mItems , item ) onItemsChanged ( ) ; return item ; }
public static String decodeBCD ( final short bcd ) { return String . format ( NUM00 , $F84701 ( bcd ) , bcd & NUM00 ) ; }
public void drawBackground ( Graphics g ) { g . fillRect ( $F73489 ( getWidth , getHeight ) ) ; }
public void put ( int key , int value ) { int i = binarySearch ( mKeys , NUM00 , mSize , key ) ; if ( i >= NUM00 ) { mValues [ i ] = value ; } else { i = ~ i ; if ( mSize >= mKeys . length ) { $F27092 ( n , Math , mSize , mKeys ) $F4120 ( nkeys , n ) $F4120 ( nvalues , n ) $F7057 ( System , mKeys , nkeys ) $F7057 ( System , mValues , nvalues ) mKeys = nkeys ; mValues = nvalues ; } $F27098 ( mSize , i , System , mKeys , mValues ) mKeys [ i ] = key ; mValues [ i ] = value ; mSize ++ ; } }
public void addLayoutEditor ( LayoutEditor panel ) { if $F3817 ( panels ) { for ( $F2277 ( i , panels ) ) { LayoutEditor ed = panels . get ( i ) ; $F19899 ( ed , panel ) } } panels . add ( panel ) ; }
void triggerWildcardExpander ( final $F92258 allFiles , final WildcardContext wildcardContext ) throws IOException { $F7028 ( LOG , allFiles ) if $F2979 ( allFiles ) { final String message = String . format ( NUM00 , wildcardContext . getWildcard ( ) ) ; LOG . warn ( message ) ; $F5614 ( message ) } if ( wildcardExpanderHandler != null ) { try { wildcardExpanderHandler . apply ( allFiles ) ; } catch ( final IOException e ) { throw e ; } catch ( final Exception e ) { $F7028 ( LOG , e ) throw new IOException $F16296 ( e ) ; } } }
$F45332 $F21697 ( MediaType ) $F2512 ( MediaType ) @ CheckPermission ( roles = { Role . TENANT_ADMIN } ) $F2513 public IpInterfaceRestRep createIpInterface ( $F2515 ( id ) , IpInterfaceCreateParam createParam ) throws DatabaseException { Host host = queryObject ( $F2522 , id , _BOOL ) ; validateIpInterfaceData ( createParam , null ) ; IpInterface ipInterface = new IpInterface $F72 ; ipInterface . setHost ( host . getId ( ) ) ; ipInterface . setId ( URIUtil . createId ( IpInterface . class ) ) ; populateIpInterface ( createParam , ipInterface ) ; _dbClient . createObject ( ipInterface ) ; auditOp ( OperationTypeEnum . CREATE_HOST_IPINTERFACE , _BOOL , null , ipInterface . auditParameters ( ) ) ; return map ( ipInterface ) ; }
protected List < IEditProposal > collectEditProposals $F72 { List < IEditProposal > proposals = new ArrayList < IEditProposal > $F72 ; View selectedView = getSelectedView ( ) ; if ( selectedView != null ) { if ( proposalProviders != null ) { for ( IEditProposalProvider provider : proposalProviders ) { for ( IEditProposal editProposal : provider . getProposals ( selectedView ) ) { if ( editProposal . isApplicable ( ) ) proposals . add ( editProposal ) ; } } } } return proposals ; }
public ExtensionQuery $F1947 ( pluginId , extensionPointName , attributeName ) { this . pluginId = extensionPointName . contains ( NUM00 ) ? null : pluginId ; this . extensionPointName = extensionPointName ; this . attributeName = attributeName ; }
private void ensureNamespaceExists ( Result result ) { DockerImage image = DockerImage . fromImageName ( result . name ) ; if ( image . getNamespace ( ) == null ) { result . name = String . format ( NUM00 , DEFAULT_NAMESPACE , image . getRepository ( ) ) ; } }
public static $F9340 $F15228 of ( K k1 , V v1 , K k2 , V v2 , K k3 , V v3 , K k4 , V v4 , K k5 , V v5 ) { Map map = of ( ) ; map . put ( k1 , v1 ) ; map . put ( k2 , v2 ) ; map . put ( k3 , v3 ) ; map . put ( k4 , v4 ) ; map . put ( k5 , v5 ) ; return map ; }
public void testFilteredClassifier $F72 { Instances data ; int i ; $F2329 ( m_FilteredClassifier ) try { data = getFilteredClassifierData ( ) ; m_FilteredClassifier . buildClassifier ( data ) ; for ( i = NUM00 ; i < data . numInstances ( ) ; i ++ ) { m_FilteredClassifier . classifyInstance ( data . instance ( i ) ) ; } } $F53525 ( fail , e ) }
public static String upperFirstChar ( String string ) { $F1275 ( string ) if $F71860 ( string ) $F32484 ( string ) $F7542 ( sb , string ) sb . setCharAt ( NUM00 , Character . toUpperCase ( sb . charAt ( NUM00 ) ) ) ; $F92 ( sb ) }
protected int chooseRandomIndexBasedOnProportions ( $F1986 proportionArray , Random random ) { double probSum ; double val ; int index ; double sum ; probSum = Utils . sum ( proportionArray ) ; val = random . nextDouble ( ) * probSum ; index = NUM00 ; sum = NUM00 ; while ( ( sum <= val ) && ( index < proportionArray . length ) ) { sum += proportionArray [ index ++ ] ; } return index - NUM00 ; }
private void checkWidth ( final $F2027 rect ) { $F178172 ( x1 , rect ) $F178172 ( y2 , rect ) final int y1 = y2 + rect [ NUM00 ] ; final int x2 = x1 + rect [ NUM00 ] ; $F45132 ( x1 , pageX1 ) $F12283 ( x2 , pageX2 ) $F12283 ( y1 , pageY1 ) $F45132 ( y2 , pageY2 ) }
$F1113 public static Map < RadComponent , List < RadComponent > > groupSiblings ( $F1113 List < ? extends RadComponent > components ) { Map < RadComponent , List < RadComponent > > siblingLists = new HashMap < RadComponent , List < RadComponent > > $F72 ; $F4975 ( components , siblingLists ) if $F10471 ( components ) { RadComponent component = components . get ( NUM00 ) ; siblingLists . put ( component . getParent ( ) , Collections . singletonList ( component ) ) ; return siblingLists ; } for ( RadComponent component : components ) { RadComponent parent = component . getParent ( ) ; List < RadComponent > children = siblingLists . get ( parent ) ; if ( children == null ) { children = new ArrayList < RadComponent > $F72 ; siblingLists . put ( parent , children ) ; } children . add ( component ) ; } return siblingLists ; }
private int countNonNewline $F36827 ( str , off , len ) { for ( $F119 ( cnt , len ) ) { final int pos = off + cnt ; if $F44927 ( str , pos , UNIX_NEWLINE ) { return cnt ; } if $F44927 ( str , pos , CARRIAGE_RETURN ) { return cnt ; } } return len ; }
private static int convertSpanToSparseGrid ( int curIx , int span , $F128157 indexes ) { int lastIx = curIx + span ; int retSpan = NUM00 ; for ( Integer ix : indexes ) { if ( ix <= curIx ) $F598 $F612 ( ix , lastIx ) retSpan ++ ; } return retSpan ; }
$F1 public boolean equals ( Object otherRules ) { $F3627 ( this , otherRules , _BOOL ) if ( otherRules instanceof ZoneRules ) { ZoneRules other = ( ZoneRules ) otherRules ; return $F3629 ( Arrays , standardTransitions , other ) && $F3629 ( Arrays , standardOffsets , other ) && $F3629 ( Arrays , savingsInstantTransitions , other ) && $F3629 ( Arrays , wallOffsets , other ) && $F3629 ( Arrays , lastRules , other ) ; } return _BOOL ; }
public String description $F72 { $F83 ( sb ) if ( isCombo ( ) ) { int i = NUM00 ; for ( NewComboLeg leg : m_comboLegs ) { if ( i ++ > NUM00 ) $F86 ( sb ) $F11659 ( sb , leg ) } } else { sb . append ( m_symbol ) ; app ( sb , m_secType ) ; app ( sb , m_exchange ) ; if ( m_exchange != null && m_exchange . equals ( NUM00 ) && m_primaryExch != null ) { app ( sb , m_primaryExch ) ; } app ( sb , m_expiry ) ; if ( m_strike != NUM00 ) { app ( sb , m_strike ) ; } if ( m_right != Right . None ) { app ( sb , m_right ) ; } } $F92 ( sb ) }
public void addClaimedSignerRole ( final String claimedSignerRole ) { if $F38892 ( claimedSignerRole ) $F895 $F30647 ( claimedSignerRoles ) claimedSignerRoles . add ( claimedSignerRole ) ; }
$F1431 @ GwtIncompatible ( NUM00 ) public static < K extends Object , V extends Object > void writeMap ( $F15232 ( map ) , ObjectOutputStream stream ) throws IOException { $F27636 ( stream , map ) for ( $F15243 entry : map . entrySet ( ) ) { stream . writeObject ( entry . getKey ( ) ) ; stream . writeObject ( entry . getValue ( ) ) ; } }
protected void sleep ( int sleepMillis , int sleepNanos ) throws InterruptedException { Thread . sleep ( sleepMillis , sleepNanos ) ; }
public static void restorePreviousOutAndErrStream $F72 { $F24126 ( alreadyMuted ) System . setOut ( latestOut ) ; System . setErr ( latestErr ) ; alreadyMuted = _BOOL ; }
public static BigInteger CRT ( $F114477 congs , $F114477 moduli ) { $F81942 cs = ArrayConverter . convertListToArray ( congs ) ; $F81942 ms = ArrayConverter . convertListToArray ( moduli ) ; return CRT ( cs , ms ) ; }
private int measureHeight ( int measureSpec ) { int result = NUM00 ; $F20444 ( specMode , MeasureSpec , measureSpec ) $F23132 ( specSize , MeasureSpec , measureSpec ) mAscent = ( int ) mTextPaint . ascent ( ) ; if ( specMode == MeasureSpec . EXACTLY ) { result = specSize ; } else { result = ( int ) ( - mAscent + mTextPaint . descent ( ) ) + getPaddingTop ( ) + getPaddingBottom ( ) ; $F23140 ( specMode , MeasureSpec , result , Math , specSize ) } return result ; }
$F69921 ( b , off , len , length , data , enlarge , System , this )
public void testCase17 $F72 { $F221347 $F221350 int aSign = NUM00 ; int bSign = NUM00 ; byte $F3018 = { NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F221355 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
protected < T extends TaskServiceDocument $F11685 , E extends Enum $F11685 > T waitForTaskCompletion $F92641 ( documentSelfLink , type ) throws Throwable { return waitForPropertyValue ( documentSelfLink , type , TaskServiceDocument . FIELD_NAME_TASK_STAGE , Arrays . asList ( TaskStage . FINISHED , TaskStage . FAILED , TaskStage . CANCELLED ) , _BOOL , waitForStageChangeCountLonger ( ) ) ; }
public Action ( String content , int priority ) { $F10588 ( this , content ) this . priority = priority ; }
private List < EndIsland > findSurroundingIslands $F2026 ( chunkX , chunkY , chunksPerFragmentX , chunksPerFragmentY ) { List < EndIsland > result = new LinkedList < EndIsland > $F72 ; for ( int y = - SURROUNDING_CHUNKS ; y <= chunksPerFragmentY + SURROUNDING_CHUNKS ; y ++ ) { for ( int x = - SURROUNDING_CHUNKS ; x <= chunksPerFragmentX + SURROUNDING_CHUNKS ; x ++ ) { EndIsland island = tryCreateEndIsland ( chunkX + x , chunkY + y ) ; $F1140 ( island , result ) } } return result ; }
void insertFunction2 ( ByteBuffer bb ) { $F31263 ( baseSec , windowId ) bb . putInt ( baseSec ) ; Integer operId = operatorId ; for ( $F6268 ( i ) ) { byte num = ( byte ) ( operId > > NUM00 * ( NUM00 - i ) ) ; bb . put ( num ) ; } bb . putShort ( ( short ) ( windowId & NUM00 ) ) ; for ( $F6268 ( i ) ) { byte num = ( byte ) ( tupleId > > NUM00 * ( NUM00 - i ) ) ; bb . put ( num ) ; } }
private static boolean calculateGap ( Rectangle a , Rectangle b , Rectangle gap ) { if $F82382 ( a , b ) { gap . width = NUM00 ; return _BOOL ; } int ax1 = a . x ; int ax2 = $F6108 ( a ) ; int ay1 = a . y ; int ay2 = $F6118 ( a ) ; int bx1 = b . x ; int bx2 = $F6108 ( b ) ; int by1 = b . y ; int by2 = $F6118 ( b ) ; int xOverlap = Math . min ( ax2 , bx2 ) - Math . max ( ax1 , bx1 ) ; int yOverlap = Math . min ( ay2 , by2 ) - Math . max ( ay1 , by1 ) ; if ( xOverlap <= NUM00 && yOverlap <= NUM00 ) { gap . width = NUM00 ; return _BOOL ; } if ( xOverlap > NUM00 ) { gap . x = Math . max ( ax1 , bx1 ) ; gap . y = ( ay1 > by1 ) ? by2 : ay2 ; gap . width = xOverlap ; gap . height = - yOverlap ; } if ( yOverlap > NUM00 ) { gap . x = ( ax1 > bx1 ) ? bx2 : ax2 ; gap . y = Math . max ( ay1 , by1 ) ; gap . width = - xOverlap ; gap . height = yOverlap ; } return _BOOL ; }
public boolean nextTile $F72 throws ModelControlException { boolean movedToRow = super . nextTile ( ) ; if ( movedToRow ) { curTile = getTileIndex ( ) ; setDisplayFieldValue ( TXT_PARENT_INDEX , parentIdx ) ; setDisplayFieldValue ( TXT_CHOICE , choices [ curTile ] ) ; setDisplayFieldValue ( TXT_INDEX , Integer . toString ( curTile ) ) ; } return movedToRow ; }
$F25527 ( REDUNDANT_OP_COMPACT_THRESHOLD , redundantOpCount , lruEntries )
public boolean hasMyomerBooster $F72 { for ( Mounted mEquip : getMisc ( ) ) { MiscType mtype = ( MiscType ) mEquip . getType ( ) ; if ( mtype . hasFlag ( MiscType . F_MASC ) && ! mEquip . isInoperable ( ) ) { return _BOOL ; } } return _BOOL ; }
public static boolean isIntentAvailable ( Context context , String action ) { final PackageManager packageManager = context . getPackageManager ( ) ; final Intent intent = new Intent ( action ) ; $F12258 ( Log , MP_TAG , action ) $F45549 list = packageManager . queryIntentServices ( intent , PackageManager . MATCH_DEFAULT_ONLY ) ; return $F3816 ( list ) ; }
$F61852 public void test_wrap_02 $F72 throws SSLException { String host = NUM00 ; int port = NUM00 ; $F30909 ( bb , ByteBuffer ) $F30907 ( bbA , ByteBuffer ) SSLEngine sse = getEngine ( host , port ) ; sse . setUseClientMode ( _BOOL ) ; try { sse . wrap ( bbA , - NUM00 , NUM00 , bb ) ; fail ( NUM00 ) ; } $F191186 try { sse . wrap ( bbA , NUM00 , - NUM00 , bb ) ; fail ( NUM00 ) ; } $F191186 try { sse . wrap ( bbA , bbA . length + NUM00 , bbA . length , bb ) ; fail ( NUM00 ) ; } $F191186 try { sse . wrap ( bbA , NUM00 , bbA . length + NUM00 , bb ) ; fail ( NUM00 ) ; } $F191186 }
private void sendCONNECTRequest $F72 throws IOException { $F287270 ( port , url ) requests . set ( NUM00 , HTTP_CONNECT + NUM00 + connectRequestURI ( url ) + NUM00 + httpVersion , null ) ; requests . setIfNotSet ( NUM00 , userAgent ) ; $F107310 ( host , url ) if ( port != - NUM00 && port != url . getDefaultPort ( ) ) { host += NUM00 + String . valueOf ( port ) ; } requests . setIfNotSet ( NUM00 , host ) ; requests . setIfNotSet ( NUM00 , acceptString ) ; if ( http . getHttpKeepAliveSet ( ) ) { requests . setIfNotSet ( NUM00 , NUM00 ) ; } setPreemptiveProxyAuthentication ( requests ) ; if $F58998 ( logger , PlatformLogger ) { $F7404 ( logger , requests ) } http . writeRequests ( requests , null ) ; }
private boolean isSelfSigned ( X509Certificate cert ) { return signedBy ( cert , cert ) ; }
$F133772 ( RequestMethod ) $F4586 public RestWrapper insert ( $F100302 $F100303 UserRoles userRoles , BindingResult bindingResult , Principal principal ) { RestWrapper restWrapper = null ; $F100315 ( bindingResult , bindingResultError ) try { com . wipro . ats . bdre . md . dao . jpa . UserRoles jpaUserRoles = new com . wipro . ats . bdre . md . dao . jpa . UserRoles $F72 ; jpaUserRoles . setUserRoleId ( userRoles . getUserRoleId ( ) ) ; jpaUserRoles . setRole ( userRoles . getRole ( ) ) ; Users users = new Users $F72 ; users . setUsername ( userRoles . getUsername ( ) ) ; jpaUserRoles . setUsers ( users ) ; Integer userRolesId = userRolesDAO . insert ( jpaUserRoles ) ; userRoles . setUserRoleId ( userRolesId ) ; $F4608 ( restWrapper , userRoles , RestWrapper ) LOGGER . info ( NUM00 + userRoles . getUserRoleId ( ) + NUM00 + principal . getName ( ) + userRoles ) ; } $F20495 ( LOGGER , e , restWrapper , RestWrapper ) return restWrapper ; }
public Set $F29999 nearestWords ( final int distance , final WordToken ... start ) { return nearestWords ( distance , null , Arrays . asList ( start ) ) ; }
public DERUTCTime ( Date time ) { $F108456 ( dateF ) dateF . setTimeZone ( new SimpleTimeZone ( NUM00 , NUM00 ) ) ; this . time = Strings . toByteArray ( dateF . format ( time ) ) ; }
public void add ( String category , $F806 titles , $F1986 values ) $F148024 ( mCategories , category , mTitles , titles , mValues , values )
public void rewind $F72 { synchronized ( used ) { for ( ParameterPair pair : used ) { current . addParameter ( pair . option , pair . value ) ; } $F725 ( used ) } }
public $F536600 merge ( $F536600 intervals ) { $F536600 $F204 ( res ) ; $F45556 ( intervals , res ) $F84242 ( Collections , intervals ) Interval prev = null ; for ( Interval i : intervals ) { if ( prev == null || prev . end < i . start ) { res . add ( i ) ; prev = i ; } else if ( i . end > prev . end ) { prev . end = i . end ; } } return res ; }
private String formatType ( Object typeRep ) { StringTokenizer tokenizer = new StringTokenizer ( typeRep . toString ( ) , NUM00 , _BOOL ) ; $F83 ( sb ) while $F14498 ( tokenizer ) { $F8095 ( token , tokenizer ) if ( $F1276 ( token ) || token . lastIndexOf ( NUM00 ) == - NUM00 ) sb . append ( token ) ; else { $F24867 ( index , token ) sb . append ( token . substring ( index + NUM00 ) ) ; } } $F92 ( sb ) }
$F1113 public static String sha1 ( $F1113 File keyStoreFile ) throws Exception $F59662 ( sha1 , keyStoreFile )
$F26827 ( w , h , oldw , oldh , super , setupBounds , setupPaints , invalidate )
$F1 public void panDomainAxes ( double panRange , PlotRenderingInfo info , Point2D source ) { XYPlot subplot = findSubplot ( info , source ) ; $F2329 ( subplot ) if ( ! subplot . isDomainPannable ( ) ) $F932 PlotRenderingInfo subplotInfo = info . getSubplotInfo ( info . getSubplotIndex ( source ) ) ; $F2329 ( subplotInfo ) for ( int i = NUM00 ; i < subplot . getDomainAxisCount ( ) ; i ++ ) { ValueAxis domainAxis = subplot . getDomainAxis ( i ) ; if ( domainAxis != null ) { domainAxis . pan ( panRange ) ; } } }
private void init $F72 { startController = new PourStartController $F72 ; startController . setCheckView ( this ) ; waveController = new WaveController $F72 ; waveController . setCheckView ( this ) ; PourFinishController finishController = new PourFinishController $F72 ; finishController . setCheckView ( this ) ; TickController tickController = new TickController $F72 ; tickController . setCheckView ( this ) ; List < BaseController > $F204 ( finishControllers ) ; finishControllers . add ( finishController ) ; finishControllers . add ( tickController ) ; this . finishControllers = finishControllers ; }
private JLabel createIconLabel ( JCheckBox checkBox ) { checkBox . setOpaque ( _BOOL ) ; checkBox . setSize ( checkBox . getMinimumSize ( ) ) ; Image image = new BufferedImage ( checkBox . getWidth ( ) , checkBox . getHeight ( ) , Transparency . TRANSLUCENT ) ; $F27516 ( g , image ) checkBox . paint ( g ) ; $F355 ( g ) return new JLabel ( new ImageIcon ( image ) ) ; }
public void closeWindow $F72 { WindowEvent ev = new WindowEvent ( frame , WindowEvent . WINDOW_CLOSING ) ; frame . dispatchEvent ( ev ) ; }
private void populateHostData ( Host host , HostParam param ) { if $F425662 ( param ) { host . setLabel ( param . getName ( ) ) ; } if ( param . getHostName ( ) != null ) { host . setHostName ( param . getHostName ( ) ) ; } if ( param . getCluster ( ) != null ) { host . setCluster ( param . getCluster ( ) ) ; } if ( param . getOsVersion ( ) != null ) { host . setOsVersion ( param . getOsVersion ( ) ) ; } if ( param . getUserName ( ) != null ) { host . setUsername ( param . getUserName ( ) ) ; } if ( param . getPassword ( ) != null ) { $F27486 ( host , param ) } if ( param . getPortNumber ( ) != null ) { host . setPortNumber ( param . getPortNumber ( ) ) ; } if ( param . getUseSsl ( ) != null ) { host . setUseSSL ( param . getUseSsl ( ) ) ; } if ( param . getType ( ) != null ) { host . setType ( param . getType ( ) ) ; } if ( param . getDiscoverable ( ) != null ) { host . setDiscoverable ( param . getDiscoverable ( ) ) ; } if ( param . getVcenterDataCenter ( ) != null ) { host . setVcenterDataCenter ( NullColumnValueGetter . isNullURI ( param . getVcenterDataCenter ( ) ) ? NullColumnValueGetter . getNullURI ( ) : param . getVcenterDataCenter ( ) ) ; } Cluster cluster = null ; if ( ! NullColumnValueGetter . isNullURI ( param . getCluster ( ) ) ) { cluster = queryObject ( Cluster . class , param . getCluster ( ) , _BOOL ) ; if ( ! NullColumnValueGetter . isNullURI ( cluster . getVcenterDataCenter ( ) ) ) { host . setVcenterDataCenter ( cluster . getVcenterDataCenter ( ) ) ; } if ( ! NullColumnValueGetter . isNullURI ( cluster . getProject ( ) ) ) { host . setProject ( cluster . getProject ( ) ) ; } } if ( param . getBootVolume ( ) != null ) { host . setBootVolumeId ( NullColumnValueGetter . isNullURI ( param . getBootVolume ( ) ) ? NullColumnValueGetter . getNullURI ( ) : param . getBootVolume ( ) ) ; } }
$F5466 public AvdInfo createOrUpdateAvd ( $F5466 AvdInfo currentInfo , $F1113 String avdName , $F1113 Device device , $F1113 SystemImageDescription systemImageDescription , $F1113 ScreenOrientation orientation , boolean isCircular , $F5466 String sdCard , $F5466 File skinFolder , $F1113 $F2539 hardwareProperties , boolean createSnapshot ) { if $F931 ( initIfNecessary ) $F1337 File avdFolder ; try { if ( currentInfo != null ) { avdFolder = new File ( currentInfo . getDataFolderPath ( ) ) ; } else { avdFolder = AvdInfo . getDefaultAvdFolder ( myAvdManager , avdName , myFileOp , _BOOL ) ; } } catch ( AndroidLocation . AndroidLocationException e ) { $F30202 ( IJ_LOG , avdName , e ) $F1274 } Dimension resolution = device . getScreenSize ( orientation ) ; assert resolution != null ; String skinName = null ; if ( skinFolder == null && isCircular ) { skinFolder = getRoundSkin ( systemImageDescription ) ; } if ( FileUtil . filesEqual ( skinFolder , AvdWizardUtils . NO_SKIN ) ) { skinFolder = null ; } if ( skinFolder == null ) { skinName = String . format ( NUM00 , Math . round ( resolution . getWidth ( ) ) , Math . round ( resolution . getHeight ( ) ) ) ; } if ( orientation == ScreenOrientation . LANDSCAPE ) { hardwareProperties . put ( HardwareProperties . HW_INITIAL_ORIENTATION , ScreenOrientation . LANDSCAPE . getShortDisplayValue ( ) . toLowerCase ( Locale . ROOT ) ) ; } if ( currentInfo != null && ! $F3174 ( avdName , currentInfo ) ) { boolean success = myAvdManager . moveAvd ( currentInfo , avdName , currentInfo . getDataFolderPath ( ) , SDK_LOG ) ; $F81346 ( success ) } return myAvdManager . createAvd ( avdFolder , avdName , systemImageDescription . getSystemImage ( ) , skinFolder , skinName , sdCard , hardwareProperties , device . getBootProps ( ) , createSnapshot , _BOOL , currentInfo != null , SDK_LOG ) ; }
public void engineDeleteEntry ( String alias ) throws KeyStoreException { synchronized ( entries ) { entries . remove ( $F91593 ( alias , Locale ) ) ; } }
public DisjointSets ( int numElements ) { $F3936 ( array , numElements ) $F99493 ( Arrays , array ) }
public final void printClusters ( PrintWriter out , List < ClusterData > clusterData , $F2027 matIndexToMsgInternalId ) throws AdeException { $F179708 ( m_finalClusters , updateClusters , clusterData , matIndexToMsgInternalId ) for ( Map . Entry < String , $F2306 > entry : m_finalClusters . entrySet ( ) ) { $F71216 ( n , entry ) final $F2306 c = entry . getValue ( ) ; $F70096 ( out , n ) for ( int m : c ) { out . printf ( NUM00 , matIndexToMsgInternalId [ m ] ) ; } $F21416 ( out ) } }
protected void addToGUI ( JPanel gui , JTextField b , String cmd ) { b . setActionCommand ( cmd ) ; b . addActionListener ( this ) ; gui . add ( b ) ; }
$F233307 ( index , mCategories , mValues )
static TokenStream wrap ( String fieldName , Analyzer indexAnalyzer , String content , char splitChar ) throws IOException { if ( indexAnalyzer . getOffsetGap ( fieldName ) != NUM00 ) $F29526 ( fieldName ) $F12747 ( splitCharIdx , content , splitChar ) if ( splitCharIdx == - NUM00 ) { return indexAnalyzer . tokenStream ( fieldName , content ) ; } TokenStream subTokenStream = indexAnalyzer . tokenStream ( fieldName , content . substring ( NUM00 , splitCharIdx ) ) ; return new MultiValueTokenStream ( subTokenStream , fieldName , indexAnalyzer , content , splitChar , splitCharIdx ) ; }
public final boolean check_trace ( Polyline p_polyline , int p_half_width , int p_layer , NetNosList p_net_no_arr , int p_clearance_class_no , int p_max_recursion_depth , int p_max_via_recursion_depth , int p_max_spring_over_recursion_depth ) { AwtreeShapeSearch search_tree = search_tree_manager . get_default_tree ( ) ; int compensated_half_width = p_half_width + search_tree . get_clearance_compensation ( p_clearance_class_no , p_layer ) ; ArrayList < ShapeTile > trace_shapes = p_polyline . offset_shapes ( compensated_half_width , NUM00 , p_polyline . corner_count ( ) ) ; for ( $F3836 ( index , trace_shapes ) ) { ShapeTile curr_trace_shape = trace_shapes . get ( index ) ; BrdFromSide from_side = new BrdFromSide ( p_polyline , index + NUM00 , curr_trace_shape ) ; boolean check_shove_ok = shove_trace_algo . shove_trace_check ( curr_trace_shape , from_side , null , p_layer , p_net_no_arr , p_clearance_class_no , p_max_recursion_depth , p_max_via_recursion_depth , p_max_spring_over_recursion_depth , null ) ; $F25096 ( check_shove_ok , _BOOL ) } return _BOOL ; }
public static void delete ( File fileOrFolder ) throws IOException { if ( fileOrFolder != null ) delete ( fileOrFolder . toPath ( ) ) ; }
public static $F1986 expandArrayD ( int bufferSize , $F1986 currentArray ) { if ( currentArray == null ) { return new double [ bufferSize * NUM00 ] ; } int length = currentArray . length ; $F1986 ret = new double [ length + bufferSize * NUM00 ] ; $F135 ( System , currentArray , ret , length ) return ret ; }
$F1431 public void postProcessBeanFactory ( ConfigurableListableBeanFactory configurableListableBeanFactory ) { if ( configurableListableBeanFactory . containsBean ( sessionFactoryBeanName ) ) { BeanDefinition sessionFactoryBeanDefinition = configurableListableBeanFactory . getBeanDefinition ( sessionFactoryBeanName ) ; MutablePropertyValues propertyValues = sessionFactoryBeanDefinition . getPropertyValues ( ) ; if ( mappingResources != null ) { PropertyValue propertyValue = propertyValues . getPropertyValue ( NUM00 ) ; if ( propertyValue == null ) { propertyValue = new PropertyValue ( NUM00 , new ArrayList $F72 ) ; propertyValues . addPropertyValue ( propertyValue ) ; } List existingMappingResources = ( List ) propertyValue . getValue ( ) ; existingMappingResources . addAll ( mappingResources ) ; } if ( annotatedClasses != null ) { PropertyValue propertyValue = propertyValues . getPropertyValue ( NUM00 ) ; if ( propertyValue == null ) { propertyValue = new PropertyValue ( NUM00 , new ArrayList $F72 ) ; propertyValues . addPropertyValue ( propertyValue ) ; } List existingMappingResources = ( List ) propertyValue . getValue ( ) ; existingMappingResources . addAll ( annotatedClasses ) ; } if ( configLocations != null ) { PropertyValue propertyValue = propertyValues . getPropertyValue ( NUM00 ) ; if ( propertyValue == null ) { propertyValue = new PropertyValue ( NUM00 , new ArrayList $F72 ) ; propertyValues . addPropertyValue ( propertyValue ) ; } List existingConfigLocations = ( List ) propertyValue . getValue ( ) ; existingConfigLocations . addAll ( configLocations ) ; } if ( hibernateProperties != null ) { PropertyValue propertyValue = propertyValues . getPropertyValue ( NUM00 ) ; if ( propertyValue == null ) { propertyValue = new PropertyValue ( NUM00 , $F856 ) ; propertyValues . addPropertyValue ( propertyValue ) ; } Properties existingHibernateProperties = ( Properties ) propertyValue . getValue ( ) ; existingHibernateProperties . putAll ( hibernateProperties ) ; } } else { throw new NoSuchBeanDefinitionException $F70412 ( sessionFactoryBeanName ) ; } }
protected int encode ( double value , double lower , double upper , int nbits ) { if ( value < lower ) $F1082 int maxval = ( int ) ( Math . pow ( NUM00 , nbits ) - NUM00 ) ; if ( value >= upper ) return maxval ; return ( int ) ( ( value - lower ) * ( ( maxval - NUM00 ) / ( upper - lower ) ) ) ; }
public long skipBytes ( long n ) throws IOException { long count = NUM00 ; long gotsofar = NUM00 ; if ( inputStream == null ) { reopen ( ) ; if ( inputStream == null ) { reopen ( ) ; $F3575 } } while ( count < n ) { gotsofar = inputStream . skip ( n - count ) ; if ( gotsofar == NUM00 ) { $F19652 ( Debug , n ) $F597 } count += gotsofar ; } count ( ( int ) count ) ; return count ; }
private void createLock $F72 throws IOException { synchronized ( LockableFileWriter . class ) { if $F380343 ( lockFile ) $F152083 ( lockFile ) $F60829 ( lockFile ) } }
public void handleTblDSAttributeMapListHrefActionRequest ( RequestInvocationEvent event ) throws ModelControlException { try { Map values = getValues ( ) ; onBeforeSaveProfile ( values ) ; $F50322 ( setPageSessionAttribute , PROPERTY_ATTRIBUTE , values ) WSPPServiceDSAttributeMapListEditViewBean vb = ( WSPPServiceDSAttributeMapListEditViewBean ) getViewBean ( WSPPServiceDSAttributeMapListEditViewBean . class ) ; unlockPageTrail ( ) ; passPgSessionMap ( vb ) ; vb . populateValues ( ( String ) getDisplayFieldValue ( NUM00 ) ) ; $F50333 ( vb , getRequestContext ) } $F123309 ( setInlineAlertMessage , CCAlert , e , forwardTo ) }
private V doGet ( Object key ) { $F61745 ( key ) Comparator < $F35140 > cmp = comparator ; outer : for ( $F589 ) { for ( $F9341 b = findPredecessor ( key , cmp ) , n = b . next ; ; ) { Object v ; int c ; if ( n == null ) $F59811 $F35175 ( f , n ) $F45438 ( n , b ) if ( ( v = n . value ) == null ) { n . helpDelete ( b , f ) ; $F597 } if ( b . value == null || v == n ) $F597 if ( ( c = cpr ( cmp , key , n . key ) ) == NUM00 ) { $F1431 V vv = ( V ) v ; return vv ; } if ( c < NUM00 ) $F59811 b = n ; n = f ; } } $F1274 }
void handleSwfLoadedEvent ( SwfLoadedEvent e ) { dumpSwfLoadedLine ( e ) ; }
private void quickReply $F72 { quickReplySmsMessage = smsPopupPager . getActiveMessage ( ) ; quickReply ( quickReplySmsMessage . getReplyText ( ) ) ; }
$F1 protected synchronized void write ( long offset , $F96 b ) throws IOException { if ( byteBuffer != null ) { byteBuffer . position ( ( int ) offset ) ; byteBuffer . put ( b ) ; } else { throw new IOException $F29591 ( getPath ) ; } }
public boolean hasChanged $F72 { return System . identityHashCode ( config ) != initialHash ; }
void fixCompatibility ( View root ) { Queue < View > queue = new LinkedList < View > $F72 ; queue . add ( root ) ; View view = null ; while $F22655 ( view , queue ) { if ( view instanceof ViewGroup ) { ViewGroup group = ( ViewGroup ) view ; for ( $F140290 ( i , group ) ) { queue . add ( group . getChildAt ( i ) ) ; } } } }
protected abstract Set < SocketAddress > bindInternal ( List < ? extends SocketAddress > localAddresses ) throws Exception ;
public void substituteHeader ( int state , String header ) throws AuthLoginException { $F21954 ( debug , state , header ) if ( state > stateLength ) { throw new AuthLoginException ( bundleName , NUM00 , $F327671 ( state ) ) ; } $F12090 ext = getCallback ( state ) ; if $F51363 ( ext ) { $F12117 ( bundleName ) } if ( ( header != null ) && $F35625 ( header ) ) { PagePropertiesCallback pc = ( PagePropertiesCallback ) ( ( $F12090 ) internal . get ( state - NUM00 ) ) [ NUM00 ] ; pc . setHeader ( header ) ; } }
public static Service createService ( PatternTimetable timetable ) { Calendar calendar = new Calendar $F72 ; calendar . monday = timetable . monday ? NUM00 : NUM00 ; calendar . tuesday = timetable . tuesday ? NUM00 : NUM00 ; calendar . wednesday = timetable . wednesday ? NUM00 : NUM00 ; calendar . thursday = timetable . thursday ? NUM00 : NUM00 ; calendar . friday = timetable . friday ? NUM00 : NUM00 ; calendar . saturday = timetable . saturday ? NUM00 : NUM00 ; calendar . sunday = timetable . sunday ? NUM00 : NUM00 ; $F4000 ( nameBuilder ) nameBuilder . append ( timetable . monday ? NUM00 : NUM00 ) ; nameBuilder . append ( timetable . monday ? NUM00 : NUM00 ) ; nameBuilder . append ( timetable . monday ? NUM00 : NUM00 ) ; nameBuilder . append ( timetable . monday ? NUM00 : NUM00 ) ; nameBuilder . append ( timetable . monday ? NUM00 : NUM00 ) ; nameBuilder . append ( timetable . monday ? NUM00 : NUM00 ) ; nameBuilder . append ( timetable . monday ? NUM00 : NUM00 ) ; Service service = new Service $F3362 ( nameBuilder ) ; calendar . start_date = NUM00 ; calendar . end_date = NUM00 ; service . calendar = calendar ; return service ; }
public boolean remove ( ImageInfo object ) { final int location = getLocation ( object ) ; final boolean removed = data . remove ( object ) ; notifyItemRemoved ( location ) ; return removed ; }
public T allowedUsers ( User ... users ) { List $F284080 usersList = Arrays . asList ( users ) ; this . userPredicate = null ; return instance ( ) ; }
VPlexDistributedDeviceInfo findDistributedDevice ( String deviceName ) throws VPlexApiException $F8587 ( findDistributedDevice , deviceName , _BOOL )
$F1431 public static < T extends Packet > void registerOutListener ( $F98259 ( type ) , Player player , $F54596 listener ) { NetworkManagerWrapper wrapper = wrapNetworkManager ( player ) ; wrapper . registerOutgoingListener ( type , listener ) ; }
static CopyState readCopyState ( DataInput in ) throws IOException { $F96 infosBytes = new byte [ in . readVInt ( ) ] ; in . readBytes ( infosBytes , NUM00 , infosBytes . length ) ; long gen = in . readVLong ( ) ; long version = in . readVLong ( ) ; Map < String , FileMetaData > files = readFilesMetaData ( in ) ; int count = in . readVInt ( ) ; $F13750 ( completedMergeFiles ) for ( $F119 ( i , count ) ) { completedMergeFiles . add ( in . readString ( ) ) ; } long primaryGen = in . readVLong ( ) ; return new CopyState ( files , version , gen , infosBytes , completedMergeFiles , primaryGen , null ) ; }
public void notifyTasks $F72 { if ( tracker . shouldInterruptTask ( ) ) { for ( Thread t : threadMap . values ( ) ) $F36257 ( t ) } }
public RequestParams ( Object ... keysAndValues ) { int len = keysAndValues . length ; $F32249 ( len ) $F32257 ( i , len , key , String , keysAndValues , val , put ) }
public boolean confirmOverwrite ( final File file ) { String message = $F2990 ( file ) ; $F131 options = $F4582 ; return JOptionPane . YES_OPTION == JOptionPane . showOptionDialog ( null , message , NUM00 , JOptionPane . DEFAULT_OPTION , JOptionPane . WARNING_MESSAGE , null , options , options [ NUM00 ] ) ; }
public TvShowUpdateDatasourceTask ( String datasource ) { super ( $F241237 ( BUNDLE ) + datasource + NUM00 ) ; $F90333 ( tvShowList , TvShowList ) $F216947 ( dataSources ) dataSources . add ( datasource ) ; }
public int findLine ( int offset ) { $F40997 ( line , lineStarts ) while ( ( lineStarts [ line ] > offset ) && ( line > NUM00 ) ) { line -- ; } return line ; }
public void clear $F72 { Set $F310647 oldSelection = new HashSet $F310647 ( selection ) ; $F725 ( selection ) if $F5973 ( oldSelection ) { fireSelectionChanged ( oldSelection , selection ) ; } }
public Object newNonMovableArray ( $F6969 componentType , int length ) { $F29130 ( Array , componentType , length ) }
private void loadFileRecursively ( String path , Map < String , ThriftFileElement > loadedFiles ) throws IOException { ThriftFileElement element = null ; File dir = null ; File file = findFirstExisting ( path , null ) ; if ( file != null ) { file = file . getCanonicalFile ( ) ; if ( loadedFiles . containsKey ( file . getAbsolutePath ( ) ) ) $F932 dir = file . getParentFile ( ) ; element = loadSingleFile ( file . getParentFile ( ) , file . getName ( ) ) ; } if ( element == null ) { throw new FileNotFoundException ( NUM00 + path + NUM00 + includePaths ) ; } loadedFiles . put ( file . getAbsolutePath ( ) , element ) ; ImmutableList < IncludeElement > includes = element . includes ( ) ; if $F3817 ( includes ) { includePaths . addFirst ( dir ) ; for ( IncludeElement include : includes ) { if ( ! include . isCpp ( ) ) { loadFileRecursively ( include . path ( ) , loadedFiles ) ; } } $F60607 ( includePaths ) } }
public void assureProxyOk $F72 { if $F43263 ( socket ) $F5795 ( restart ) }
$F1 public boolean add ( IMessage message ) $F8587 ( add , message , _BOOL )
public Key $F97 ( hash ) { if ( hash . length != SHA1_HASH_LENGTH ) { throw new IllegalArgumentException $F75477 ( hash ) ; } $F5735 ( System , hash , this , SHA1_HASH_LENGTH ) }
public static $F2027 concatAllInt ( $F2027 ... arrays ) { int totalLength = NUM00 ; $F18832 ( subArrayCount , arrays ) $F189285 ( i , subArrayCount , totalLength , arrays ) $F2027 $F189287 ( result , Arrays , arrays , totalLength ) ; $F26358 ( offset , arrays ) $F189290 ( i , subArrayCount , System , arrays , result , offset ) return result ; }
private static RoadPermission roadFlagComparision ( Way iosmWay , String newTag , String newValue , EnumSet < EdgeStore . EdgeFlag > forwardExpected , EnumSet < EdgeStore . EdgeFlag > backwardExpected ) { Way osmWay = new Way $F72 ; StringJoiner stringJoiner = new StringJoiner $F580 ; for ( OSMEntity . Tag tag : iosmWay . tags ) { osmWay . addTag ( tag . key , tag . value ) ; stringJoiner . add ( tag . key + NUM00 + tag . value ) ; } if ( newTag != null && newValue != null ) { osmWay . addTag ( newTag , newValue ) ; stringJoiner . add ( newTag + NUM00 + newValue ) ; } Set < EdgeStore . EdgeFlag > forwardFiltered ; Set < EdgeStore . EdgeFlag > backwardFiltered ; RoadPermission roadPermission = traversalPermissionLabeler . getPermissions ( osmWay ) ; forwardFiltered = filterFlags ( roadPermission . forward ) ; backwardFiltered = filterFlags ( roadPermission . backward ) ; String tags = $F368 ( stringJoiner ) ; assertEquals ( tags , forwardExpected , forwardFiltered ) ; assertEquals ( tags , backwardExpected , backwardFiltered ) ; return roadPermission ; }
public void beginDisplay ( DisplayEvent event ) throws ModelControlException { IdentitySubjectModel subjectModel = getSubjectModel ( ) ; PolicyModel model = ( PolicyModel ) getModel ( ) ; super . beginDisplay ( event ) ; if ( ! canModify ) { Map mapValues = getDefaultValues ( ) ; if $F2772 ( mapValues ) { Set values = ( Set ) mapValues . get ( AMIdentityMembershipCondition . AM_IDENTITY_NAME ) ; Set identityNames = helper . getAMIdentityNames ( model . getUserSSOToken ( ) , values ) ; propertySheetModel . setValue ( VALUES_MULTIPLE_CHOICE_VALUE , AMAdminUtils . getString ( identityNames , NUM00 , _BOOL ) ) ; } } else { CCDropDownMenu menu = ( CCDropDownMenu ) getChild ( FILTER_TYPE ) ; Map supportedEntityTypes = model . getSupportedEntityTypes ( realmName ) ; OptionList entityTypes = createOptionList ( supportedEntityTypes ) ; entityTypes . add ( NUM00 , NUM00 , NUM00 ) ; menu . setOptions ( entityTypes ) ; $F187587 ( menu ) CCAddRemove child = ( CCAddRemove ) getChild ( VALUES_MULTIPLE_CHOICE_VALUE ) ; child . restoreStateData ( ) ; if ( ! submitCycle ) { helper . setSelectedIdentities ( child , model . getUserSSOToken ( ) , model . getUserLocale ( ) , this , getDefaultValues ( ) ) ; } else { OptionList possible = helper . createOptionList ( model . getUserSSOToken ( ) , model . getUserLocale ( ) , this , getPossibleValues ( subjectModel , realmName ) ) ; OptionList selected = addRemoveModel . getSelectedOptionList ( ) ; List selectedIds = AMAdminUtils . toList ( selected ) ; child . resetStateData ( ) ; addRemoveModel . setAvailableOptionList ( possible ) ; addRemoveModel . setSelectedOptionList ( helper . createOptionList ( model . getUserSSOToken ( ) , model . getUserLocale ( ) , this , selectedIds ) ) ; } } }
public $F96 readBytes $F72 throws IOException { int len = readInt ( ) ; $F132643 ( len ) $F96 b = DataUtils . newBytes ( len ) ; in . readFully ( b ) ; return b ; }
protected int chunkSize ( int n ) { int power = $F2862 ( n ) ? initialChunkPower : Math . min ( initialChunkPower + n - NUM00 , AbstractSpinedBuffer . MAX_CHUNK_POWER ) ; return NUM00 < < power ; }
public String useRelativePathTipText $F72 $F2455
public Joiner join ( Class < ? extends DataObject > clazz , String alias , URI ... ids ) { return join ( clazz , alias , new ArrayList < URI > $F6 ( Arrays , ids ) ) ; }
$F172853 ( closeFile , _BOOL )
public List < Interface > showInterface $F72 throws NetworkDeviceControllerException { List < Interface > interfaces = new ArrayList < Interface > $F72 ; SSHPrompt [ ] prompts = { SSHPrompt . POUND , SSHPrompt . GREATER_THAN } ; $F83 ( buf ) SSHPrompt prompt = sendWaitFor ( MDSDialogProperties . getString ( NUM00 ) , NUM00 , prompts , buf ) ; $F91090 ( lines , getLines , buf ) $F806 regex = { MDSDialogProperties . getString ( NUM00 ) , MDSDialogProperties . getString ( NUM00 ) , MDSDialogProperties . getString ( NUM00 ) , MDSDialogProperties . getString ( NUM00 ) , MDSDialogProperties . getString ( NUM00 ) , MDSDialogProperties . getString ( NUM00 ) } ; $F808 ( groups ) Interface intf = null ; for ( String line : lines ) { int index = match ( line , regex , groups ) ; switch ( index ) { $F3366 intf = new Interface ( groups [ NUM00 ] ) ; intf . setStatus ( groups [ NUM00 ] ) ; interfaces . add ( intf ) ; $F597 $F3366 intf . setDescription ( groups [ NUM00 ] ) ; $F597 $F3366 intf . setWwpn ( groups [ NUM00 ] ) ; $F597 $F3366 intf . setMode ( groups [ NUM00 ] ) ; intf . setFcid ( groups [ NUM00 ] ) ; $F597 $F3366 intf . setVsan ( groups [ NUM00 ] ) ; $F597 $F3366 intf . setMode ( groups [ NUM00 ] ) ; $F597 } } return interfaces ; }
protected void clearDataLists ( int obdService ) { switch ( obdService ) { case OBD_SVC_DATA : case OBD_SVC_FREEZEFRAME : $F725 ( pidSupported ) $F725 ( PidPvs ) $F597 case OBD_SVC_READ_CODES : case OBD_SVC_PENDINGCODES : case OBD_SVC_PERMACODES : $F725 ( tCodes ) $F597 case OBD_SVC_VEH_INFO : $F725 ( pidSupported ) $F725 ( VidPvs ) $F597 } }
public QuadEdge makeEdge ( Vertex o , Vertex d ) { QuadEdge q = QuadEdge . makeEdge ( o , d ) ; quadEdges . add ( q ) ; return q ; }
public static void sortSeqs $F24643 ( seqs ) { $F84242 ( Collections , seqs ) }
default B with ( String key , long value ) $F65298 ( with , key , Long , value )
private void listDirectory ( File directory , RelativeDirectory subdirectory , Set < JavaFileObject . Kind > fileKinds , boolean recurse , ListBuffer $F69718 resultList ) { File d = subdirectory . getFile ( directory ) ; if ( ! caseMapCheck ( d , subdirectory ) ) $F665 $F5459 ( files , d ) $F8249 ( files ) if ( sortFiles != null ) Arrays . sort ( files , sortFiles ) ; for ( File f : files ) { $F20605 ( fname , f ) if $F3444 ( f ) { if ( recurse && SourceVersion . isIdentifier ( fname ) ) { listDirectory ( directory , new RelativeDirectory ( subdirectory , fname ) , fileKinds , recurse , resultList ) ; } } else { if ( isValidFile ( fname , fileKinds ) ) { JavaFileObject fe = new RegularFileObject ( this , fname , new File ( d , fname ) ) ; resultList . append ( fe ) ; } } } }
private Shape decodeEdge ( int width , int height ) { $F2268 ( path ) path . moveTo ( width - NUM00 , NUM00 ) ; path . lineTo ( width - NUM00 , height - NUM00 ) ; path . lineTo ( width - NUM00 , height - NUM00 ) ; path . lineTo ( NUM00 , height - NUM00 ) ; return path ; }
public void dispose $F72 throws IabAsyncInProgressException { synchronized ( mAsyncInProgressLock ) { if ( mAsyncInProgress ) { throw new IabAsyncInProgressException $F54019 ( mAsyncOperation ) ; } } logDebug ( NUM00 ) ; mSetupDone = _BOOL ; if ( mServiceConn != null ) { logDebug ( NUM00 ) ; if ( mContext != null ) mContext . unbindService ( mServiceConn ) ; } mDisposed = _BOOL ; mContext = null ; mServiceConn = null ; mService = null ; mPurchaseListener = null ; }
private void testScenario ( String aConfiguration , boolean anExpectingAnException , $F107547 aMethodsToCall ) throws Exception { if $F2979 ( aMethodsToCall ) { testScenario ( aConfiguration , anExpectingAnException , ( Method ) null ) ; } else { for ( Method myMethod : aMethodsToCall ) { testScenario ( aConfiguration , anExpectingAnException , myMethod ) ; } } }
private static File createReserveDiskCacheDir ( Context context ) { File cacheDir = StorageUtils . getCacheDirectory ( context , _BOOL ) ; $F109797 ( individualDir , cacheDir ) $F202511 ( individualDir , cacheDir ) return cacheDir ; }
public boolean hasBeenCalled ( String resourceName ) $F298 ( uris , resourceName )
$F1 public void readExternal ( ObjectInput in ) throws $F6427 { super . readExternal ( in ) ; $F29712 ( isLeaf , in ) $F5961 ( numEntries , in ) }
public ObjIdMap $F72 $F176695 ( this )
$F13429 ( criteria , createCriteriaInternal , oredCriteria )
public static ConnectionFactory newFailoverConnectionPool ( Set < LDAPURL > servers , String username , $F1469 password , int maxSize , int heartBeatInterval , String heartBeatTimeUnit , Options ldapOptions ) { List < ConnectionFactory > factories = new ArrayList < ConnectionFactory > $F716 ( servers ) ; for ( LDAPURL ldapurl : servers ) { ConnectionFactory cf = Connections . newFixedConnectionPool ( newConnectionFactory ( ldapurl , username , password , heartBeatInterval , heartBeatTimeUnit , ldapOptions ) , maxSize ) ; factories . add ( cf ) ; } return loadBalanceFactories ( factories ) ; }
$F38752 ( _BOOL )
public PrintfFormat ( final String fmtArg ) throws IllegalArgumentException { this ( Locale . getDefault ( ) , fmtArg ) ; }
public static void initCause ( Throwable throwable , Throwable cause ) { if ( INIT_CAUSE_METHOD != null ) { try { $F226025 ( INIT_CAUSE_METHOD , throwable , cause ) } $F3957 } }
public MessagePropertyKey ( String description , Integer ordinal ) $F20755 ( this , description , ordinal )
$F173033 ( mode , node , Thread , pred , tail , compareAndSetTail , enq )
private void assertBounded ( $F44293 deserialized , boolean bounded ) { if ( bounded ) { try { $F18793 ( deserialized ) fail ( ) ; } $F28069 } else { assertTrue ( deserialized . add ( NUM00 ) ) ; assertTrue ( deserialized . remove ( NUM00 ) ) ; } }
public void paintBorder $F6065 ( c , g , x , y , width , height ) { JComponent comp = ( c instanceof JComponent ) ? ( JComponent ) c : null ; if ( g instanceof Graphics2D ) { $F20230 ( g2 , g ) g2 . translate ( x , y ) ; paint ( g2 , comp , width , height ) ; $F86480 ( g2 , x , y ) } else { BufferedImage img = new BufferedImage ( IMG_SIZE , IMG_SIZE , BufferedImage . TYPE_INT_ARGB ) ; $F23475 ( g2 , img ) paint ( g2 , comp , width , height ) ; $F355 ( g2 ) ImageScalingHelper . paint ( g , x , y , width , height , img , INSETS , INSETS , ImageScalingHelper . PaintType . PAINT9_STRETCH , ImageScalingHelper . PAINT_ALL ) ; } }
$F45923 public static LineByLineFileInputOperator restoreCheckPoint ( LineByLineFileInputOperator checkPointOper , ByteArrayOutputStream bos ) throws Exception { Kryo kryo = new Kryo $F72 ; Input lInput = new Input $F87573 ( bos ) ; LineByLineFileInputOperator oper = kryo . readObject ( lInput , checkPointOper . getClass ( ) ) ; $F59 ( lInput ) return oper ; }
$F192509 ( is , close , b , len , _BOOL , n , c , System , last )
private static synchronized boolean isSupportedImpl ( HttpCallerInfo hci ) { if ( supported == null ) { supported = new HashMap $F91737 $F72 ; cache = new HashMap < String , Negotiator > $F72 ; } String hostname = hci . host ; $F37156 ( hostname ) $F65325 ( supported , hostname ) Negotiator neg = Negotiator . getNegotiator ( hci ) ; if ( neg != null ) { supported . put ( hostname , _BOOL ) ; cache . put ( hostname , neg ) ; return _BOOL ; } else { supported . put ( hostname , _BOOL ) ; return _BOOL ; } }
public CProjectConfiguration ( final INaviProject project , final ListenerProvider < IProjectListener > listeners , final SQLProvider provider , final int projectId , final String name , final String description , final Date creationDate , final Date modificationDate , final List < DebuggerTemplate > assignedDebuggers ) { m_project = project ; m_listeners = listeners ; m_provider = provider ; m_id = projectId ; m_name = name ; m_description = description ; m_creationDate = $F207437 ( creationDate ) ; m_modificationDate = $F207437 ( modificationDate ) ; m_assignedDebuggers = new ArrayList < DebuggerTemplate > ( assignedDebuggers ) ; }
public Shape chartToScreenShape ( Shape s ) { $F13609 ( p ) Transform inverse = Transform . makeTranslation ( getAbsoluteX ( ) , getAbsoluteY ( ) ) ; if ( currentTransform != null ) { inverse . concatenate ( currentTransform ) ; } p . append ( s . getPathIterator ( inverse ) , _BOOL ) ; return p ; }
$F1 public void addShutdownWindow ( final Window window ) { $F14412 ( m_isShutDown , closeWindow , window ) synchronized ( this ) { $F14412 ( m_isShutDown , closeWindow , window ) m_windowsToCloseOnShutdown . add ( window ) ; } }
public PerformanceLogger $F72 $F22067 ( time1 , System )
public AuthRequest authenticate ( List discoveries , String returnToUrl ) throws ConsumerException , MessageException $F32246 ( authenticate , discoveries , returnToUrl )
public Hash ( String hex ) { if $F35625 ( hex ) $F825 this . bytes = ByteUtils . reverse ( ByteUtils . fromHex ( hex ) ) ; }
private $F806 diff_halfMatchI $F68141 ( longtext , shorttext , i ) { String seed = longtext . substring ( i , i + $F8196 ( longtext ) ) ; int j = - NUM00 ; String best_common = NUM00 ; String best_longtext_a = NUM00 , best_longtext_b = NUM00 ; String best_shorttext_a = NUM00 , best_shorttext_b = NUM00 ; while $F96196 ( j , shorttext , seed ) { int prefixLength = diff_commonPrefix ( longtext . substring ( i ) , shorttext . substring ( j ) ) ; int suffixLength = diff_commonSuffix ( longtext . substring ( NUM00 , i ) , shorttext . substring ( NUM00 , j ) ) ; if $F143803 ( best_common , suffixLength , prefixLength ) { best_common = shorttext . substring ( j - suffixLength , j ) + shorttext . substring ( j , j + prefixLength ) ; $F550209 ( best_longtext_a , longtext , i , suffixLength ) best_longtext_b = longtext . substring ( i + prefixLength ) ; $F550209 ( best_shorttext_a , shorttext , j , suffixLength ) best_shorttext_b = shorttext . substring ( j + prefixLength ) ; } } if ( $F9483 ( best_common ) >= longtext . length ( ) ) { return new String [ ] { best_longtext_a , best_longtext_b , best_shorttext_a , best_shorttext_b , best_common } ; } else $F1337 }
public boolean isNumericalRun ( String pin ) { $F22998 ( len , pin ) int prevDigit = Character . digit ( pin . charAt ( NUM00 ) , NUM00 ) ; int prevDiff = Integer . MAX_VALUE ; boolean isRun = _BOOL ; for ( int i = NUM00 ; isRun && i < len ; i ++ ) { final int digit = Character . digit ( pin . charAt ( i ) , NUM00 ) ; final int diff = digit - prevDigit ; if ( prevDiff != Integer . MAX_VALUE && diff != prevDiff ) { isRun = _BOOL ; } prevDiff = diff ; prevDigit = digit ; } return isRun ; }
$F26827 ( w , h , oldw , oldh , super , setupBounds , setupPaints , invalidate )
public static int uriType ( String uri ) { if $F12703 ( uri ) { return ABS_URI ; } else if $F3106 ( uri ) { return ROOT_REL_URI ; } else { return NOROOT_REL_URI ; } }
$F103859 ( data , results , key )
public static void addGlue ( JComponent b , boolean horiz ) { b . add ( horiz ? Box . createHorizontalGlue ( ) : Box . createVerticalGlue ( ) ) ; }
public static boolean isResourceReference ( String str ) { return str . startsWith ( BIG_QUOTE_LEFT ) && str . endsWith ( BIG_QUOTE_RIGHT ) && str . charAt ( NUM00 ) == AT . charAt ( NUM00 ) ; }
public boolean leave $F72 throws $F80658 { zooKeeper . delete ( rootPath + NUM00 + name , NUM00 ) ; while ( _BOOL ) { synchronized ( mutex ) { $F3803 list = zooKeeper . getChildren ( rootPath , _BOOL ) ; if $F3817 ( list ) $F28646 ( mutex ) else { return _BOOL ; } } } }
public Enumeration < ? extends Principal > members $F72 { Vector $F35948 v = new Vector $F35948 $F989 ; v . addElement ( this ) ; $F1007 ( v ) }
public SelectClause addWithAsProvidedName ( String propertyName , String asName ) { selectList . add ( new SelectClauseExpression ( new PropertyValueExpression ( propertyName ) , asName ) ) ; return this ; }
public void addInterface ( String interfaceName ) { short interfaceIndex = itsConstantPool . addClass ( interfaceName ) ; $F269561 ( itsInterfaces , Short , interfaceIndex ) }
public static String cutFromIndexOf ( String string , String substring ) { $F12747 ( i , string , substring ) if ( i != - NUM00 ) { $F11978 ( string , i ) } return string ; }
private Response requestHttpGetFromRegistry ( String url ) throws RegistryException { try { Response resp = http . get ( url ) ; if ( resp != null && resp . content != null ) { return resp ; } else { throw new RegistryException ( TYPE . BAD_RESPONSE , NUM00 ) ; } } catch ( ClassCastException e ) { throw new RegistryException ( TYPE . BAD_RESPONSE , e ) ; } catch ( ConnectException e ) { throw new RegistryException ( TYPE . PROXY , e ) ; } catch ( UnknownHostException e ) { try { http . get ( NUM00 ) ; } catch ( Exception e1 ) { throw new RegistryException ( TYPE . NO_INTERNET , e1 ) ; } throw new RegistryException ( TYPE . SITE_DOWN , e ) ; } catch ( IOException e ) { throw new RegistryException ( TYPE . IO_ERROR , e ) ; } catch ( URISyntaxException e ) { throw new RegistryException ( TYPE . BAD_REQUEST , NUM00 + ( ( url != null ) ? url : NUM00 ) ) ; } }
public void testIterator $F72 throws InterruptedException { LinkedBlockingQueue q = populatedQueue ( SIZE ) ; $F10531 ( it , q ) while $F2921 ( it ) { assertEquals ( it . next ( ) , q . take ( ) ) ; } }
public static Builder newBuilder $F72 { return new Builder $F72 ; }
public void init ( RemoteAuthenticatedUser currentUser ) $F6988 ( this , currentUser )
public static void invokeFinalize ( Object o ) throws Throwable { o . finalize ( ) ; }
private void removeTvShow ( TvShow tvShow ) { synchronized ( root ) { TvShowTreeNode child = ( TvShowTreeNode ) nodeMap . get ( tvShow ) ; DefaultMutableTreeNode parent = root ; if ( child != null ) { int index = getIndexOfChild ( parent , child ) ; nodeMap . remove ( tvShow ) ; for ( TvShowEpisode episode : new $F201 ( tvShow . getEpisodes ( ) ) ) { nodeMap . remove ( episode ) ; episode . removePropertyChangeListener ( propertyChangeListener ) ; } tvShow . removePropertyChangeListener ( propertyChangeListener ) ; child . removeAllChildren ( ) ; $F212163 ( child ) if ( index > - NUM00 ) { $F108352 ( event , this , parent , index , child ) for ( TreeModelListener listener : listeners ) { try { listener . treeNodesRemoved ( event ) ; } catch ( NullPointerException | ArrayIndexOutOfBoundsException npe ) $F845 } } } } }
private ComplianceFeature checkEncryptPolicy ( org . wso2 . emm . agent . beans . Operation operation ) { boolean encryptStatus = ( devicePolicyManager . getStorageEncryptionStatus ( ) != devicePolicyManager . ENCRYPTION_STATUS_UNSUPPORTED && devicePolicyManager . getStorageEncryptionStatus ( ) != devicePolicyManager . ENCRYPTION_STATUS_INACTIVE ) ; if ( ( operation . isEnabled ( ) && encryptStatus ) || ( ! operation . isEnabled ( ) && ! encryptStatus ) ) { policy . setCompliance ( _BOOL ) ; } else { policy . setCompliance ( _BOOL ) ; policy . setMessage ( resources . getString ( R . string . error_encrypt_policy ) ) ; } return policy ; }
public static int instanceOf $F32751 ( o , c ) { $F397 ( o , FALSE ) return $F39078 ( c , o ) ? TRUE : FALSE ; }
$F1 public void add ( int location , E object ) { insertElementAt ( object , location ) ; }
private long cacheResponseAge $F72 { long apparentReceivedAge = servedDate != null ? Math . max ( NUM00 , receivedResponseMillis - servedDate . getTime ( ) ) : NUM00 ; long receivedAge = ageSeconds != - NUM00 ? Math . max ( apparentReceivedAge , SECONDS . toMillis ( ageSeconds ) ) : apparentReceivedAge ; long responseDuration = receivedResponseMillis - sentRequestMillis ; long residentDuration = nowMillis - receivedResponseMillis ; return receivedAge + responseDuration + residentDuration ; }
$F1 public Void call $F72 throws Exception { MulticastSocket datagramSocket = null ; ExecutorService service = null ; try { datagramSocket = new MulticastSocket ( port ) ; datagramSocket . joinGroup ( group ) ; service = Executors . newSingleThreadScheduledExecutor ( new DaemonThreadFactory $F580 ) ; $F4727 ( buffer , BUFFER_SIZE ) final DatagramPacket packet = new DatagramPacket ( buffer , NUM00 , buffer . length ) ; listening = _BOOL ; while ( _BOOL ) { try { datagramSocket . receive ( packet ) ; if $F2754 ( Thread ) $F5153 final IGangliaMessage msg = decodeRecord ( packet . getData ( ) , packet . getOffset ( ) , packet . getLength ( ) ) ; if ( msg != null ) { service . submit ( new DispatchTask ( handler , msg ) ) ; } } catch ( Throwable t ) { log . warn ( t , t ) ; } } return ( Void ) null ; } finally { $F21333 ( service ) $F2727 ( datagramSocket ) listening = _BOOL ; } }
private static int arrayIndex ( int i ) { return ( i > > SHIFT_PER_WORD ) ; }
protected static void invalidateSwitchPoints $F72 { if ( LOG_ENABLED ) $F22715 ( LOG ) synchronized ( IndyInterface . class ) { SwitchPoint old = switchPoint ; switchPoint = new SwitchPoint $F72 ; SwitchPoint . invalidateAll ( new SwitchPoint [ ] { old } ) ; } }
public VdcConfig toConfigParam ( Properties vdcInfo ) { log . info ( NUM00 , vdcInfo . getProperty ( GeoServiceJob . VDC_SHORT_ID ) ) ; VdcConfig vdcConfig = new VdcConfig $F72 ; vdcConfig . setId ( URIUtil . uri ( vdcInfo . getProperty ( GeoServiceJob . OPERATED_VDC_ID ) ) ) ; vdcConfig . setShortId ( vdcInfo . getProperty ( GeoServiceJob . VDC_SHORT_ID ) ) ; vdcConfig . setSecretKey ( vdcInfo . getProperty ( GeoServiceJob . VDC_SECRETE_KEY ) ) ; String name = vdcInfo . getProperty ( GeoServiceJob . VDC_NAME ) ; if $F13709 ( name ) { vdcConfig . setName ( name ) ; } String description = vdcInfo . getProperty ( GeoServiceJob . VDC_DESCRIPTION ) ; if $F13709 ( description ) { vdcConfig . setDescription ( description ) ; } String endPnt = vdcInfo . getProperty ( GeoServiceJob . VDC_API_ENDPOINT ) ; if ( endPnt != null ) { vdcConfig . setApiEndpoint ( endPnt ) ; } vdcConfig . setGeoCommandEndpoint ( vdcInfo . getProperty ( GeoServiceJob . VDC_GEOCOMMAND_ENDPOINT ) ) ; vdcConfig . setGeoDataEndpoint ( vdcInfo . getProperty ( GeoServiceJob . VDC_GEODATA_ENDPOINT ) ) ; return vdcConfig ; }
protected OSXAdapter ( String proxySignature , Object target , Method handler ) { this . proxySignature = proxySignature ; this . targetObject = target ; this . targetMethod = handler ; }
private double prediction ( Instance inst ) { $F1986 normalizedInstance = normalizedInstance ( inst ) ; double normalizedPrediction = prediction ( normalizedInstance ) ; return denormalizedPrediction ( normalizedPrediction ) ; }
protected Object finish ( Map settings ) throws WizardException { return provider . finish ( settings ) ; }
public boolean isValidAttachmentPoint ( DatapathId switchDPID , OFPort switchPort ) { if ( topology . isAttachmentPointPort ( switchDPID , switchPort ) == _BOOL ) return _BOOL ; if ( suppressAPs . contains ( new SwitchPort ( switchDPID , switchPort ) ) ) return _BOOL ; return _BOOL ; }
protected void fireClusterChange ( long timestamp , String type , String message ) { if $F1032 ( listeners ) { ClusterEvent event = new ClusterEvent ( this , timestamp , type , message ) ; Vector targets ; synchronized ( this ) { targets = ( Vector ) listeners . clone ( ) ; } $F8484 ( e , targets ) while $F1444 ( e ) { ClusterEventListener l = ( ClusterEventListener ) e . nextElement ( ) ; l . changeCluster ( event ) ; } } }
$F1017 ( request , container , mRequest , mContainers )
$F137271 ( close , deleteContents , directory )
public int rgbFor ( int pixel ) { return surfaceType . rgbFor ( pixel , colorModel ) ; }
private boolean checkForCarry ( final $F1469 ca1 , final int icarry ) { boolean carry = _BOOL ; if ( icarry < ca1 . length ) { if ( ca1 [ icarry ] == NUM00 || ca1 [ icarry ] == NUM00 || ca1 [ icarry ] == NUM00 || ca1 [ icarry ] == NUM00 ) { carry = _BOOL ; } else if ( ca1 [ icarry ] == NUM00 ) { int ii = icarry + NUM00 ; for ( $F255681 ( ii , ca1 ) ) { if ( ca1 [ ii ] != NUM00 ) $F5153 } carry = ii < ca1 . length ; if ( ! carry && icarry > NUM00 ) { carry = ( ca1 [ icarry - NUM00 ] == NUM00 || ca1 [ icarry - NUM00 ] == NUM00 || ca1 [ icarry - NUM00 ] == NUM00 || ca1 [ icarry - NUM00 ] == NUM00 || ca1 [ icarry - NUM00 ] == NUM00 ) ; } } } return carry ; }
protected void addBottomComponent ( Component bottomComponent ) { c . weighty = NUM00 ; layout . setConstraints ( bottomComponent , c ) ; contentPanel . add ( bottomComponent ) ; }
public static boolean deleteDirectoryFiles $F32029 ( inputFilePathsAndNames ) { if ( ( inputFilePathsAndNames == null ) ) { return _BOOL ; } boolean didSuccessfullyDeleteAllFiles = _BOOL ; try { for ( String filePathAndName : inputFilePathsAndNames ) { $F1705 ( file , filePathAndName ) if $F4926 ( file ) { boolean deleteSuccess = deleteFile ( filePathAndName ) ; if ( ! deleteSuccess ) { $F630 ( logger , filePathAndName ) didSuccessfullyDeleteAllFiles = _BOOL ; } } } } catch ( Exception e ) { $F246959 ( logger , e , System , StackTrace ) return _BOOL ; } return didSuccessfullyDeleteAllFiles ; }
public static File createTempDir ( File dir , boolean cleanup ) throws IOException { if ( $F4927 ( dir ) && $F1905 ( dir ) ) { throw new IOException ( $F44379 ( String , dir ) ) ; } if ( cleanup ) { addCleanupHook ( dir . toPath ( ) ) ; } return dir ; }
public void emitInit $F72 { $F84 ( out ) $F16690 ( out , constName ) $F84 ( out ) out . append ( name ) ; $F84 ( out ) nl ( ) ; nextChunk ( ) ; }
public static String readCookieIgnoreSpecialCharacters ( HttpServletRequest request , String cookieName ) { String cs = request . getHeader ( NUM00 ) ; $F1275 ( cs ) $F12747 ( start , cs , cookieName ) $F94834 ( start ) cs = cs . substring ( start + NUM00 + cookieName . length ( ) ) ; $F1384 ( end , cs ) $F45801 ( end , cs ) return cs ; }
protected final void merge ( $F1113 Set < LocalResourceRepository > visited , $F1113 ResourceType type , $F1113 SetMultimap $F2538 seenQualifiers , $F1113 ListMultimap < String , ResourceItem > result ) { $F13678 ( visited , this ) visited . add ( this ) ; doMerge ( visited , type , seenQualifiers , result ) ; }
private $F96 translateTransferableString ( String str , long format ) throws IOException { $F2544 ( lFormat , Long , format ) String charset = getBestCharsetForTextFormat ( lFormat , null ) ; $F123 ( eoln , nativeEOLNs , lFormat ) if ( eoln != null ) { $F115 ( length , str ) StringBuffer buffer = new StringBuffer ( length * NUM00 ) ; for ( $F119 ( i , length ) ) { if ( str . startsWith ( eoln , i ) ) { buffer . append ( eoln ) ; i += $F1092 ( eoln ) ; $F598 } $F1280 ( c , str , i ) if ( c == NUM00 ) $F288 ( buffer , eoln ) else $F288 ( buffer , c ) } $F6947 ( str , buffer ) } $F45669 ( bytes , str , charset ) $F10158 ( terminators , nativeTerminators , lFormat ) if ( terminators != null ) { $F79839 ( numTerminators , terminators ) $F96 terminatedBytes = new byte [ bytes . length + numTerminators ] ; $F7057 ( System , bytes , terminatedBytes ) for ( int i = bytes . length ; i < terminatedBytes . length ; i ++ ) $F5629 ( terminatedBytes , i ) bytes = terminatedBytes ; } return bytes ; }
private $F96 createPreviewBuffer ( Size previewSize ) { int bitsPerPixel = ImageFormat . getBitsPerPixel ( ImageFormat . NV21 ) ; long sizeInBits = previewSize . getHeight ( ) * previewSize . getWidth ( ) * bitsPerPixel ; int bufferSize = $F96308 ( Math , sizeInBits ) + NUM00 ; $F2175 ( byteArray , bufferSize ) $F23500 ( buffer , ByteBuffer , byteArray ) if ( ! buffer . hasArray ( ) || ( buffer . array ( ) != byteArray ) ) $F4639 mBytesToByteBuffer . put ( byteArray , buffer ) ; return byteArray ; }
public void add ( int pos , Box b ) { children . add ( pos , b ) ; b . parent = this ; b . elderParent = elderParent ; }
public Position createPosition ( int offset ) throws BadLocationException { while ( queue . poll ( ) != null ) { unusedMarks ++ ; } if ( unusedMarks > Math . max ( NUM00 , ( $F74216 ( marks ) ) ) ) $F5795 ( removeUnusedMarks ) int g0 = getGapStart ( ) ; int g1 = getGapEnd ( ) ; int index = ( offset < g0 ) ? offset : offset + ( g1 - g0 ) ; search . index = index ; int sortIndex = findSortIndex ( search ) ; MarkData m ; StickyPosition position ; if ( sortIndex < marks . size ( ) && ( m = marks . elementAt ( sortIndex ) ) . index == index && ( position = m . getPosition ( ) ) != null ) $F845 else { position = new StickyPosition $F72 ; m = new MarkData ( index , position , queue ) ; position . setMark ( m ) ; marks . insertElementAt ( m , sortIndex ) ; } return position ; }
public static String pad ( String string , int n , String padding , boolean right ) { $F17370 ( n ) if $F7007 ( n , string ) $F35299 ( string , n ) else if $F9615 ( n , string ) { return string ; } char paddingChar ; if $F6036 ( padding ) { paddingChar = NUM00 ; } else { $F7783 ( paddingChar , padding ) } $F7542 ( buff , n ) n -= string . length ( ) ; if ( right ) $F288 ( buff , string ) $F48485 ( i , n , buff , paddingChar ) $F135212 ( right , buff , string ) $F92 ( buff ) }
private final void resetDTX ( AffineTransform at ) { fsref = null ; dtx = at ; invdtx = null ; if ( ! dtx . isIdentity ( ) ) { try { invdtx = dtx . createInverse ( ) ; } catch ( NoninvertibleTransformException e ) $F845 } if ( gti != null ) { gti . strikesRef = null ; } }
public static void addActivityListener ( ActivityListener listener ) { if ( listener != null ) { startTracking ( ) ; listeners . add ( listener ) ; } }
public void addMutedUsername ( final String username , final Date muteTill ) { if ( isUsernameMuted ( username ) ) { removeMutedUsername ( username ) ; } Timestamp muteTillTs = null ; if ( muteTill != null ) { muteTillTs = $F16812 ( muteTill ) ; } $F35577 ( s_logger , username ) final Connection con = Database . getConnection ( ) ; try { $F500803 ( ps , con ) $F3916 ( ps , username ) ps . setTimestamp ( NUM00 , muteTillTs ) ; $F1699 ( ps ) $F59 ( ps ) $F17621 ( con ) } catch ( final SQLException sqle ) { if ( sqle . getErrorCode ( ) == NUM00 ) { s_logger . info ( $F6165 ( username , sqle ) ) ; $F665 } s_logger . log ( Level . SEVERE , NUM00 + username , sqle ) ; throw new IllegalStateException $F1783 ( sqle ) ; } finally { DbUtil . closeConnection ( con ) ; } }
private $F56522 doParse ( NetworkResponse response ) { $F56524 ( data , response ) $F280821 ( Log ) $F56530 ( decodeOptions ) Bitmap bitmap = null ; $F280821 ( Log ) decodeOptions . inJustDecodeBounds = _BOOL ; BitmapFactory . decodeByteArray ( data , NUM00 , data . length , decodeOptions ) ; int actualWidth = decodeOptions . outWidth ; int actualHeight = decodeOptions . outHeight ; int desiredWidth = getResizedDimension ( mMaxWidth , mMaxHeight , actualWidth , actualHeight , mScaleType ) ; int desiredHeight = getResizedDimension ( mMaxHeight , mMaxWidth , actualHeight , actualWidth , mScaleType ) ; decodeOptions . inJustDecodeBounds = _BOOL ; decodeOptions . inSampleSize = findBestSampleSize ( actualWidth , actualHeight , desiredWidth , desiredHeight ) ; Bitmap tempBitmap = BitmapFactory . decodeByteArray ( data , NUM00 , data . length , decodeOptions ) ; if ( tempBitmap != null && ( tempBitmap . getWidth ( ) > desiredWidth || tempBitmap . getHeight ( ) > desiredHeight ) ) { bitmap = Bitmap . createScaledBitmap ( tempBitmap , desiredWidth , desiredHeight , _BOOL ) ; $F17551 ( tempBitmap ) } else { bitmap = tempBitmap ; } if ( bitmap == null ) { return Response . error ( new ParseError ( response ) ) ; } else { return Response . success ( bitmap , HttpHeaderParser . parseCacheHeaders ( response ) ) ; } }
public void applyComponentOrientation ( ComponentOrientation o ) { possiblyFixCursor ( o . isLeftToRight ( ) ) ; super . applyComponentOrientation ( o ) ; }
$F18907 ( mSelectedWidgets )
public void close $F72 throws IOException { if ( ! closed ) { try $F5795 ( finish ) finally { $F59 ( out ) closed = _BOOL ; } } }
protected abstract C newParcelableAdapterInstance $F11546 ( items ) ;
public static void nextBytes $F97 ( bytes ) { wasAccessed = _BOOL ; for ( int i = NUM00 ; i < bytes . length ; ) for ( int rnd = nextInt ( ) , n = Math . min ( bytes . length - i , NUM00 ) ; n -- > NUM00 ; rnd >>= NUM00 ) $F11740 ( bytes , i , rnd ) }
protected void drawLowFarOut ( double aRadius , Graphics2D g2 , double xx , double m ) { double side = aRadius * NUM00 ; g2 . draw ( new $F69931 ( xx - side , m - side , xx + side , m - side ) ) ; g2 . draw ( new $F69931 ( xx - side , m - side , xx , m ) ) ; g2 . draw ( new $F69931 ( xx + side , m - side , xx , m ) ) ; }
public boolean isJavaLibraryClass $F72 { if ( $F132105 ( name ) || name . startsWith ( NUM00 ) || name . startsWith ( NUM00 ) ) return _BOOL ; return _BOOL ; }
private Set $F50005 objectNamesFromFilteredNamedObjects ( Set < NamedObject > list , QueryExp query ) { Set $F50005 result = new HashSet $F50005 $F72 ; if ( query == null ) { for ( NamedObject no : list ) $F29791 ( result , no ) } else { final MBeanServer oldServer = QueryEval . getMBeanServer ( ) ; query . setMBeanServer ( server ) ; try { for ( NamedObject no : list ) { boolean res ; try { res = query . apply ( no . getName ( ) ) ; } $F28453 ( res , _BOOL ) if ( res ) $F29791 ( result , no ) } } finally { query . setMBeanServer ( oldServer ) ; } } return result ; }
$F9863 ( child , dx , dy , _BOOL , checkHorizontal , mCallback , checkVertical , mTouchSlop , Math )
private Element createEndPoint $F19845 ( name , attrBinding , attrLocation , attrResponseLocation ) throws DOMException { $F826 ( name ) $F826 ( attrBinding ) $F826 ( attrLocation ) $F16570 ( endPt , doc , name ) endPt . setAttribute ( SAMLNames . BINDING , attrBinding ) ; endPt . setAttribute ( SAMLNames . LOCATION , attrLocation ) ; if ( attrResponseLocation != null ) { endPt . setAttribute ( SAMLNames . RESPLOC , attrResponseLocation ) ; } return endPt ; }
void putFile ( String relativePath , Codebase codebase ) { try { File dest = new File ( rootDirectory . getAbsolutePath ( ) , relativePath ) ; File src = codebase . getFile ( relativePath ) ; boolean srcExists = filesystem . exists ( src ) ; boolean destExists = filesystem . exists ( dest ) ; boolean srcExecutable = filesystem . isExecutable ( src ) ; boolean destExecutable = filesystem . isExecutable ( dest ) ; if ( ! srcExists && ! destExists ) { throw new MoeProblem ( NUM00 , relativePath , src , dest ) ; } if ( ! srcExists ) { util . runSvnCommandWithWorkingDirectory ( rootDirectory . getAbsolutePath ( ) , NUM00 , relativePath ) ; $F665 } try { filesystem . makeDirsForFile ( dest ) ; filesystem . copyFile ( src , dest ) ; } catch ( IOException e ) { throw new MoeProblem $F1783 ( e ) ; } if ( ! destExists ) { util . runSvnCommandWithWorkingDirectory ( rootDirectory . getAbsolutePath ( ) , NUM00 , NUM00 , relativePath ) ; } String mimeType = guessMimeType ( relativePath ) ; if ( mimeType != null ) { try { util . runSvnCommandWithWorkingDirectory ( rootDirectory . getAbsolutePath ( ) , NUM00 , NUM00 , mimeType , relativePath ) ; } catch ( CommandRunner . CommandException e ) $F218635 ( ui , relativePath ) } if ( destExecutable != srcExecutable ) { if ( srcExecutable ) { util . runSvnCommandWithWorkingDirectory ( rootDirectory . getAbsolutePath ( ) , NUM00 , NUM00 , NUM00 , relativePath ) ; } else { util . runSvnCommandWithWorkingDirectory ( rootDirectory . getAbsolutePath ( ) , NUM00 , NUM00 , relativePath ) ; } } } catch ( CommandRunner . CommandException e ) { throw new MoeProblem ( NUM00 + e . stderr ) ; } }
public String toString $F72 { $F280 ( buffer ) buffer . append ( toString ( getClass ( ) ) ) ; $F84 ( buffer ) $F16690 ( buffer , isUseDefault ) $F84 ( buffer ) buffer . append ( useLocaleFormat ) ; $F20974 ( pattern , buffer ) $F20974 ( locale , buffer ) $F84 ( buffer ) $F92 ( buffer ) }
public void test_multipleResourceLocking_resources10_locktries10 $F72 throws Exception { $F859 ( properties ) $F154944 ( properties , TestOptions ) $F154946 ( properties , TestOptions ) $F130263 ( properties , TestOptions ) $F130265 ( properties , TestOptions ) $F130267 ( properties , TestOptions ) properties . setProperty ( TestOptions . MAX_LOCK_TRIES , NUM00 ) ; $F130271 ( properties , TestOptions ) $F130273 ( properties , TestOptions ) properties . setProperty ( TestOptions . TIMEOUT , Long . toString ( NUM00 * NUM00 ) ) ; doComparisonTest ( properties ) ; }
public void startElement $F42838 ( namespaceURI , localName , qName , atts ) throws $F2253 { throw new StopParseException $F72 ; }
public synchronized $F165983 ( newArray , count , System , buf )
$F97565 ( value , pattern , locale , calendar , format , _BOOL , fail , e )
private $F96 convertBitmapToBytes ( final Bitmap bitmap ) { int size = bitmap . getRowBytes ( ) * bitmap . getHeight ( ) ; $F39018 ( out , size ) try { if ( bitmap . compress ( Bitmap . CompressFormat . PNG , NUM00 , out ) ) $F234865 ( out ) $F1375 ( sLogger ) $F1274 } finally { CloseableUtils . tryToClose ( out ) ; } }
private static void saveTemplate ( File parentDir , FileTemplateBase template , final String lineSeparator ) throws IOException { final File templateFile = new File ( parentDir , encodeFileName ( template . getName ( ) , template . getExtension ( ) ) ) ; FileOutputStream fileOutputStream ; try $F209257 ( fileOutputStream , templateFile ) catch ( FileNotFoundException e ) { FileUtil . delete ( templateFile ) ; $F10893 ( fileOutputStream , templateFile ) } OutputStreamWriter outputStreamWriter = new OutputStreamWriter ( fileOutputStream , CharsetToolkit . UTF8_CHARSET ) ; $F45667 ( content , template ) if $F1264 ( lineSeparator ) { content = StringUtil . convertLineSeparators ( content , lineSeparator ) ; } outputStreamWriter . write ( content ) ; $F59 ( outputStreamWriter ) $F59 ( fileOutputStream ) }
$F1 public $F987 listOptions $F72 { $F994 ( newVector ) $F9007 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F9010 ( newVector , Collections , super ) $F1007 ( newVector ) }
public void addComposite ( TransformTreeNode node ) $F207 ( parts , node )
protected static void postProcessFlood ( IHex [ ] hexSet , int modifier ) { int n ; IHex field ; ITerrainFactory f = Terrains . getTerrainFactory ( ) ; for ( $F6929 ( n , hexSet ) ) { field = hexSet [ n ] ; int elev = field . getLevel ( ) - modifier ; if ( ( elev == NUM00 ) && ! ( field . containsTerrain ( Terrains . WATER ) ) && ! ( field . containsTerrain ( Terrains . PAVEMENT ) ) ) { field . addTerrain ( f . createTerrain ( Terrains . SWAMP , NUM00 ) ) ; } else if ( elev < NUM00 ) { if ( elev < - NUM00 ) $F44867 ( elev ) field . removeAllTerrains ( ) ; field . addTerrain ( f . createTerrain ( Terrains . WATER , - elev ) ) ; field . setLevel ( modifier ) ; } } }
public ModuleHandle addModule ( String moduleName , String sessionKey ) { String sanitizedModuleName = generateUniqueNameIfNullOrEmpty ( moduleName , NUM00 ) ; ModuleHandle moduleHandle = new ModuleHandle ( sanitizedModuleName , sessionKey ) ; synchronized ( privateInstanceLock ) $F207 ( modules , moduleHandle ) setTerminated ( _BOOL ) ; return moduleHandle ; }
private static void expand2DigitNumber ( String numberString , WordRelation wordRelation , Item tokenItem ) { if $F4432 ( numberString ) { if $F4432 ( numberString ) $F845 else { $F63127 ( number , digit2num , numberString ) wordRelation . addWord ( tokenItem , number ) ; } } else if $F4432 ( numberString ) { $F63127 ( number , digit2enty , numberString ) wordRelation . addWord ( tokenItem , number ) ; } else if $F4432 ( numberString ) { $F63127 ( number , digit2teen , numberString ) wordRelation . addWord ( tokenItem , number ) ; } else { $F63127 ( enty , digit2enty , numberString ) wordRelation . addWord ( tokenItem , enty ) ; expandDigits ( $F47252 ( numberString ) , wordRelation , tokenItem ) ; } }
protected int indexOf ( String buffer , int start , int end , char ch ) { for ( int i = start ; i < end ; i ++ ) { if $F44927 ( buffer , i , ch ) { return i ; } } $F150 }
public Factory ( JavacMessages messages , String prefix ) { this . prefix = prefix ; this . formatter = new BasicDiagnosticFormatter ( messages ) ; defaultErrorFlags = $F157944 ( EnumSet , DiagnosticFlag ) ; }
$F1 protected boolean isFrontierEmpty $F72 { cleanUpFrontier ( ) ; $F4173 ( updateMetrics , frontier ) $F18904 ( frontier ) }
public void testSetObject_int_Object_int_int $F72 throws SQLException { PreparedStatement ps = null ; try { String query = NUM00 ; ps = conn . prepareStatement ( query ) ; Statement st = null ; try { ps . setObject ( NUM00 , Integer . MAX_VALUE , Types . INTEGER , Integer . MAX_VALUE ) ; $F1699 ( ps ) $F2715 ( st , conn ) st . execute ( NUM00 + Integer . MAX_VALUE ) ; $F19095 ( rs , st ) assertEquals ( NUM00 , getCount ( rs ) ) ; } $F137812 ( st ) query = NUM00 ; ps = conn . prepareStatement ( query ) ; try { ps . setObject ( NUM00 , NUM00 , Types . CHAR , Integer . MIN_VALUE ) ; $F1699 ( ps ) $F2715 ( st , conn ) $F131050 ( st ) $F19095 ( rs , st ) assertEquals ( NUM00 , getCount ( rs ) ) ; } $F137812 ( st ) query = NUM00 ; ps = conn . prepareStatement ( query ) ; BigDecimal bd2 = $F185880 ; ps . setObject ( NUM00 , bd2 , Types . DECIMAL , NUM00 ) ; $F1699 ( ps ) query = NUM00 ; ps = conn . prepareStatement ( query ) ; Date $F40924 ( d ) ; try { ps . setObject ( NUM00 , d , Types . DATE , - NUM00 ) ; $F1699 ( ps ) $F2715 ( st , conn ) st . execute ( NUM00 + d . getTime ( ) + NUM00 ) ; $F19095 ( rs , st ) assertEquals ( NUM00 , getCount ( rs ) ) ; } $F137812 ( st ) query = NUM00 ; ps = conn . prepareStatement ( query ) ; try { ps . setObject ( NUM00 , NUM00 , Types . BLOB , NUM00 ) ; $F1699 ( ps ) } $F137812 ( st ) } $F137812 ( ps ) try { ps . setObject ( NUM00 , NUM00 , Types . CHAR , Integer . MIN_VALUE ) ; fail ( NUM00 ) ; } $F31184 }
$F1 public boolean isEnabled $F72 { if ( ( attributeSelectionPanel != null ) && ! isValueOnly ( ) ) $F68134 ( attributeSelectionPanel ) else { if ( this . crsComboBox != null ) $F68134 ( crsComboBox ) } return _BOOL ; }
$F20296 ( mRootDirectory , VolleyLog , files , file , fis , entry , CacheHeader , putEntry )
public static double variance $F280936 ( x , mean ) { double var = NUM00 ; int count = x . length ; for ( double aX : x ) { if $F35707 ( Double , aX ) { count -- ; } else { double diff = aX - mean ; var += diff * diff ; } } if ( count < NUM00 ) { count = NUM00 ; } else $F218903 ( count ) return var / ( double ) count ; }
private void stashRequestUser ( RequestAndResponse requestAndResponse ) { if ( requestAndResponse . wasUserAlreadyStashed ) $F932 requestAndResponse . wasUserAlreadyStashed = _BOOL ; final User user = dbLogic . getUserById ( getEffectiveUserId ( requestAndResponse ) ) ; if ( user != null ) { requestAndResponse . userIsAdmin = user . getIsAdmin ( ) ; requestAndResponse . userIsAccountClosed = user . getIsAccountClosed ( ) ; requestAndResponse . userOptions = user . getOptions ( ) ; } else { requestAndResponse . userOptions = NUM00 ; } }
$F1 public void sendLocationList $F72 { List $F80423 locationList = lm . getLocationsByNameList ( ) ; $F95963 ( location ) for ( Location loc : locationList ) { location = new $F53625 $F989 ; location . add ( new Attribute ( LOCATIONS , loc ) ) ; try { sendMessage ( location ) ; } catch ( IOException ioe ) { $F74568 ( log , loc ) } } }
protected void serializeText ( Text node ) throws SAXException { if ( fNextIsRaw ) { fNextIsRaw = _BOOL ; fSerializer . processingInstruction ( javax . xml . transform . Result . PI_DISABLE_OUTPUT_ESCAPING , NUM00 ) ; dispatachChars ( node ) ; fSerializer . processingInstruction ( javax . xml . transform . Result . PI_ENABLE_OUTPUT_ESCAPING , NUM00 ) ; } else { boolean bDispatch = _BOOL ; $F53987 ( fFeatures , WELLFORMED , isTextWellFormed , node ) boolean isElementContentWhitespace = _BOOL ; if ( fIsLevel3DOM ) $F57332 ( isElementContentWhitespace , node ) if ( isElementContentWhitespace ) { if $F18594 ( fFeatures , ELEM_CONTENT_WHITESPACE ) { bDispatch = _BOOL ; } } else { bDispatch = _BOOL ; } if ( ! applyFilter ( node , NodeFilter . SHOW_TEXT ) ) $F932 $F72524 ( bDispatch , dispatachChars , node ) } }
$F1 public boolean isInsideSoftWrap ( $F1113 VisualPosition visual ) $F8587 ( isInsideSoftWrap , visual , _BOOL )
static public InputStream findClusterXML ( String _clusterXML ) { String schemaNameToBeUsed = _clusterXML ; InputStream schemaInputStream ; String schemaFilePath = Constants . Container . CONTAINER_CONFIG_DIRECTORY + NUM00 + schemaNameToBeUsed + ClusterXML . CLUSTER_XML_FILE_SUFFIX ; schemaInputStream = getResourceStream ( schemaFilePath ) ; if ( schemaInputStream != null ) { if $F78772 ( _logger , Level ) { $F115765 ( _logger , getResourceURL , schemaNameToBeUsed ) } return schemaInputStream ; } else { String defaultSchemaFileName = Constants . Container . CONTAINER_CONFIG_DIRECTORY + NUM00 + Constants . Schemas . DEFAULT_SCHEMA + ClusterXML . CLUSTER_XML_FILE_SUFFIX ; schemaInputStream = getResourceStream ( defaultSchemaFileName ) ; if ( schemaInputStream != null ) { if $F89967 ( _logger , Level ) { _logger . warning ( NUM00 + schemaFilePath + NUM00 + getResourceURL ( defaultSchemaFileName ) + NUM00 ) ; } return schemaInputStream ; } else { if $F89967 ( _logger , Level ) $F37856 ( _logger , defaultSchemaFileName ) } } return schemaInputStream ; }
public boolean isValid ( World world ) { return _BOOL ; }
public void clear $F72 { $F114494 ( Arrays , ritems , rsize ) $F114494 ( Arrays , pitems , psize ) rsize = NUM00 ; psize = NUM00 ; }
private ParsePosition next ( final ParsePosition pos ) { pos . setIndex ( pos . getIndex ( ) + NUM00 ) ; return pos ; }
public final AC growPrio ( int p ) $F8587 ( growPrio , p , curIx )
private int flush ( int offset ) { try { $F11584 ( _os , _buffer , offset ) _offset = NUM00 ; $F1082 } catch ( IOException e ) { throw new H3ExceptionOut ( e ) ; } }
protected String generateSectionLabel ( PieDataset dataset , Comparable key ) { String result = null ; if ( dataset != null ) { $F131 items = createItemArray ( dataset , key ) ; result = MessageFormat . format ( this . labelFormat , items ) ; } return result ; }
public synchronized void removeGraphListener ( GraphListener cl ) $F106 ( m_graphListeners , cl )
abstract protected void doFadeIn $F72 ;
public void exec $F8306 ( description , baseCommand ) throws BackupException { exec ( description , baseCommand , null , null , null , _BOOL , _BOOL ) ; }
$F71540 ( offset , txt , getText , i , Integer , setText , String )
public static ServiceConfiguration create ( InputStream inStream ) throws $F248925 { try { checkNotNull ( inStream ) ; $F2697 ( properties ) properties . load ( inStream ) ; return ( create ( properties ) ) ; } $F14364 ( inStream ) }
$F25545 ( i , count , buf , newbuf , mPool , System )
protected $F2027 splitSentence ( String sentence ) { $F6542 ( w , sentence ) $F22974 ( words , w ) for ( $F1139 ( i , w ) ) words [ i ] = Vocabulary . id ( w [ i ] ) ; return words ; }
public static boolean isFailure ( List < Action > actions ) $F18905 ( actions )
public void addToDictionary ( String s ) { $F15308 ( getAutoComplete ) if ( dict == null ) { setUp ( ) ; this . dict = createDefaultDictionary ( ) ; } dict . addEntry ( s . trim ( ) ) ; }
public static $F26352 deep_copy ( int M [ ] [ ] ) { $F26352 C = new int [ M . length ] [ ] ; for ( $F1139 ( i , C ) ) { C [ i ] = Arrays . copyOf ( M [ i ] , M [ i ] . length ) ; } return C ; }
public final boolean checkTag ( int identifier ) { return Arrays . binarySearch ( identifiers [ NUM00 ] , identifier ) >= NUM00 ; }
public void waitForMessageToArrive $F72 { $F973 ( LOG ) $F657 ( start , System ) synchronized ( messages ) { try { while ( hasReceivedMessage ( ) ) $F34522 ( messages ) } catch ( InterruptedException e ) $F10090 ( LOG , e ) } $F5740 ( end , System , start ) $F9472 ( LOG , end ) }
public Date ( String date ) { $F6542 ( fields , date ) $F231344 ( fields ) $F51416 ( month , Integer , fields ) $F51416 ( day , Integer , fields ) $F51416 ( year , Integer , fields ) if ( ! isValid ( month , day , year ) ) $F824 }
public static void copy ( File src , File dst ) throws IOException { if $F3444 ( src ) { ensureDirectoryExists ( dst ) ; $F1894 ( filesList , src ) for ( String file : filesList ) { $F4453 ( srcFile , src , file ) $F4453 ( destFile , dst , file ) copy ( srcFile , destFile ) ; } } else { copyFile ( src , dst ) ; } }
public MapObjects ( PokemonGo api ) $F6988 ( this , api )
$F1 public $F96 read ( int length ) throws IOException { if ( length > available ( ) ) { throw new EndOfBufferException $F72 ; } $F2175 ( res , length ) $F21535 ( System , buffer , read_pos , res , length ) read_pos = read_pos + length ; return res ; }
public String encode ( String pString ) throws EncoderException { $F1338 ( pString ) try $F23983 ( encode , pString , getDefaultCharset ) $F265978 ( e ) }
public void testSortsAccordingNumberOfAttributes $F72 throws Exception $F234199 ( dom1 , XppFactory , dom2 , assertEquals , comparator , xpath )
static void incrementKeepAliveCount $F72 { synchronized ( keepAliveLock ) { keepAliveCount ++ ; if ( reaper == null ) { reaper = AccessController . doPrivileged ( new NewThreadAction ( new Reaper $F72 , NUM00 , _BOOL ) ) ; $F2346 ( reaper ) } if ( gcLatencyRequest == null ) { gcLatencyRequest = GC . requestLatency ( gcInterval ) ; } } }
static MethodHandle makeCollectArguments ( MethodHandle target , MethodHandle collector , int collectArgPos , boolean retainOriginalArgs ) { MethodType targetType = target . type ( ) ; MethodType collectorType = collector . type ( ) ; int collectArgCount = collectorType . parameterCount ( ) ; $F6969 collectValType = collectorType . returnType ( ) ; int collectValCount = ( collectValType == $F78753 ? NUM00 : NUM00 ) ; MethodType srcType = targetType . dropParameterTypes ( collectArgPos , collectArgPos + collectValCount ) ; if ( ! retainOriginalArgs ) { srcType = srcType . insertParameterTypes ( collectArgPos , collectorType . parameterList ( ) ) ; } MethodType lambdaType = srcType . invokerType ( ) ; Name [ ] names = arguments ( NUM00 , lambdaType ) ; final int collectNamePos = names . length - NUM00 ; final int targetNamePos = names . length - NUM00 ; Name [ ] collectorArgs = Arrays . copyOfRange ( names , NUM00 + collectArgPos , NUM00 + collectArgPos + collectArgCount ) ; names [ collectNamePos ] = new Name ( collector , $F2486 ( collectorArgs ) ) ; Name [ ] targetArgs = new Name [ targetType . parameterCount ( ) ] ; int inputArgPos = NUM00 ; int targetArgPos = NUM00 ; int chunk = collectArgPos ; System . arraycopy ( names , inputArgPos , targetArgs , targetArgPos , chunk ) ; inputArgPos += chunk ; targetArgPos += chunk ; if ( collectValType != $F78753 ) $F49219 ( targetArgs , targetArgPos , names , collectNamePos ) chunk = collectArgCount ; if ( retainOriginalArgs ) $F21534 ( System , names , inputArgPos , targetArgs , targetArgPos , chunk ) inputArgPos += chunk ; chunk = targetArgs . length - targetArgPos ; System . arraycopy ( names , inputArgPos , targetArgs , targetArgPos , chunk ) ; assert ( inputArgPos + chunk == collectNamePos ) ; names [ targetNamePos ] = new Name ( target , $F2486 ( targetArgs ) ) ; LambdaForm form = new LambdaForm ( NUM00 , lambdaType . parameterCount ( ) , names ) ; return SimpleMethodHandle . make ( srcType , form ) ; }
public InSpacePredicate ( Object ... values ) { _inValues = $F22202 ; for ( Object value : values ) $F207 ( _inValues , value ) }
private static void delete ( File f ) { if $F3444 ( f ) { for ( $F3445 ( c , f ) ) { delete ( c ) ; } } if $F7119 ( f ) { PrintStream err = System . err ; $F7957 ( err , f ) } }
protected $F3803 prepareSortKeyStatements ( List < SortKey > sortKeys ) { $F10144 ( keys ) for ( $F2277 ( i , sortKeys ) ) { SortKey sortKey = sortKeys . get ( i ) ; keys . add ( explicitMapping . getDbColumnName ( sortKey . getField ( ) ) + ( sortKey . isAscendingOrder ( ) ? NUM00 : NUM00 ) ) ; } return keys ; }
public static String experimenterToString ( OFInstructionExperimenter inst , Logger log ) { return Long . toString ( inst . getExperimenter ( ) ) ; }
$F20664 public void elementType $F21324 ( name , model , memberOf , flags ) { ElementType e = new ElementType ( name , model , memberOf , flags , this ) ; theElementTypes . put ( name . toLowerCase ( ) , e ) ; if ( memberOf == M_ROOT ) theRoot = e ; }
public static void printMagnitudes $F72 { printMagnitudes ( System . out ) ; }
private Optional < CuratorFramework > createClient ( String zookeeperUrl ) { if $F16093 ( StringUtils , zookeeperUrl ) { CuratorFramework client = ConfigurationsUtils . getClient ( zookeeperUrl ) ; $F2346 ( client ) $F122628 ( Optional , client ) } else $F21170 ( Optional ) }
public static String addCvDescription $F1947 ( toolTip , cvDescription , mask ) { String descString = cvDescription ; String temp = getMaskDescription ( mask ) ; if $F4012 ( temp ) $F15894 ( descString , temp ) if ( PaneProgFrame . getShowCvNumbers ( ) && ( descString != null ) ) { if ( toolTip == null ) { toolTip = descString ; } else { toolTip = addTextHTMLaware ( toolTip , NUM00 + descString + NUM00 ) ; } } else $F23170 ( toolTip ) return toolTip ; }
public final static int readRawUntil ( final StringBuilder out , final String in , final int start , final char end ) { int pos = start ; while $F7007 ( pos , in ) { $F1090 ( ch , in , pos ) $F15290 ( ch , end ) out . append ( ch ) ; pos ++ ; } return $F9615 ( pos , in ) ? - NUM00 : pos ; }
private static void convertToHTML40 ( AttributeSet from , MutableAttributeSet to ) { $F252639 ( keys , from ) String value = NUM00 ; while $F1444 ( keys ) { $F20039 ( key , keys ) if ( key instanceof CSS . Attribute ) { value = value + NUM00 + key + NUM00 + from . getAttribute ( key ) + NUM00 ; } else { to . addAttribute ( key , from . getAttribute ( key ) ) ; } } if $F4012 ( value ) { to . addAttribute ( HTML . Attribute . STYLE , value ) ; } }
public synchronized void close $F72 throws IOException { $F8249 ( in ) $F59 ( in ) in = null ; buf = null ; }
$F65857 ( connection , oldFactory , sc , SSLContext , trustAllCerts , newFactory , LOG , LOG_TAG , e )
public void updateAmount $F72 $F7429 ( setAmt , getTotalAmount )
public void testCreationUnique $F72 { Instances data ; $F95963 ( atts ) String relName ; relName = NUM00 ; $F53628 ( atts ) ; atts . add ( $F84263 ) ; atts . add ( $F84263 ) ; atts . add ( new Attribute $F6600 ) ; atts . add ( new Attribute ( NUM00 , new $F5 ( $F196441 ( Arrays ) ) ) ) ; atts . add ( new Attribute ( NUM00 , new $F5 ( Arrays . asList ( $F78037 ) ) ) ) ; atts . add ( new Attribute ( NUM00 , ( $F5 ) null ) ) ; data = new Instances ( relName , atts , NUM00 ) ; assertEquals ( NUM00 , relName , data . relationName ( ) ) ; assertEquals ( NUM00 , atts . size ( ) , data . numAttributes ( ) ) ; }
private void updateLegends $F72 { if ( m_span == null ) { $F26681 ( m_span ) } $F58099 ( padder ) $F58099 ( padd2 ) m_span . setPreferredSize ( new Dimension ( $F29854 ( m_span ) , ( $F2958 ( m_plots ) ) * NUM00 ) ) ; m_span . setMaximumSize ( new Dimension ( $F29854 ( m_span ) , ( $F2958 ( m_plots ) ) * NUM00 ) ) ; LegendEntry tmp ; $F78338 ( gb ) $F78338 ( gb2 ) $F45960 ( constraints ) $F7600 ( m_span ) padder . setLayout ( gb ) ; m_span . setLayout ( gb2 ) ; $F76547 ( constraints , GridBagConstraints ) constraints . gridx = NUM00 ; constraints . gridy = NUM00 ; constraints . weightx = NUM00 ; $F45961 ( constraints , GridBagConstraints ) constraints . gridwidth = NUM00 ; constraints . gridheight = NUM00 ; $F184708 ( constraints ) padder . add ( m_span , constraints ) ; constraints . gridx = NUM00 ; constraints . gridy = NUM00 ; constraints . weightx = NUM00 ; $F45970 ( constraints , GridBagConstraints ) constraints . gridwidth = NUM00 ; constraints . gridheight = NUM00 ; constraints . weighty = NUM00 ; $F184708 ( constraints ) padder . add ( padd2 , constraints ) ; constraints . weighty = NUM00 ; setViewportView ( padder ) ; $F76547 ( constraints , GridBagConstraints ) constraints . gridx = NUM00 ; constraints . gridy = NUM00 ; constraints . weightx = NUM00 ; $F45961 ( constraints , GridBagConstraints ) constraints . gridwidth = NUM00 ; constraints . gridheight = NUM00 ; constraints . weighty = NUM00 ; $F184708 ( constraints ) for ( $F2277 ( i , m_plots ) ) { tmp = new LegendEntry ( m_plots . get ( i ) , i ) ; constraints . gridy = i ; m_span . add ( tmp , constraints ) ; } }
public String evaluate ( XPathContext xctxt , int context , org . apache . xml . utils . PrefixResolver nsNode ) throws $F1872 { if ( null != m_simpleString ) { return m_simpleString ; } else if ( null != m_parts ) { final FastStringBuffer buf = getBuffer ( ) ; String out = null ; $F2199 ( n , m_parts ) try { for ( $F119 ( i , n ) ) { $F97670 ( part , m_parts , i ) part . evaluate ( xctxt , buf , context , nsNode ) ; } $F6947 ( out , buf ) } finally { if ( USE_OBJECT_POOL ) { StringBufferPool . free ( buf ) ; } else $F357905 ( buf ) } return out ; } else $F2455 }
public static $F96 readDex ( File file ) throws IOException { return readDex ( file . toPath ( ) ) ; }
public void addUpdateListener ( AnimatorUpdateListener listener ) { if ( mUpdateListeners == null ) { mUpdateListeners = new ArrayList < AnimatorUpdateListener > $F72 ; } mUpdateListeners . add ( listener ) ; }
public void runCommercial ( String stream , int length ) { if $F4251 ( stream ) { commercialResult ( stream , NUM00 , TwitchApi . RequestResult . FAILED ) ; } else { String channel = NUM00 + stream ; if ( isChannelOpen ( channel ) ) { g . printLine ( channel , NUM00 + length + NUM00 ) ; } else { g . printLine ( NUM00 + length + NUM00 + stream + NUM00 ) ; } api . runCommercial ( stream , settings . getString ( NUM00 ) , length ) ; } }
public void addSubTree ( int index , $F27878 children ) { List < NodeDescriptor > nodeDescriptors = convertTreeNodesHelper ( children ) ; roots . addChildren ( index , nodeDescriptors ) ; $F245843 ( nodes ) for ( NodeDescriptor child : nodeDescriptors ) { nodes . add ( child . getNode ( ) ) ; } if $F5973 ( nodes ) { fireEvent ( new StoreAddEvent ( index , nodes ) ) ; } }
void generateWhile ( Tree . WhileStatement that ) { Tree . WhileClause whileClause = that . getWhileClause ( ) ; List < VarHolder > vars = specialConditionsAndBlock ( whileClause . getConditionList ( ) , whileClause . getBlock ( ) , NUM00 , _BOOL ) ; for ( VarHolder v : vars ) { v . forget ( ) ; } }
public static double igamma ( double a , double x ) { double coef = ( Math . exp ( - x ) * Math . pow ( x , a ) ) / gamma ( a ) ; double sum = NUM00 ; for ( $F6268 ( i ) ) { sum += ( gamma ( a ) / gamma ( a + NUM00 + ( double ) i ) ) * Math . pow ( x , ( double ) i ) ; } return ( coef * sum ) ; }
public void initializeActiveSlotsList ( String slots ) { $F30647 ( activeSlotsList ) for ( $F55140 ( s , slots ) ) $F207 ( activeSlotsList , s ) }
private static String convertActionTypeToIntent ( RamlActionType actionType , boolean isTargetCollection ) { switch ( actionType ) { case DELETE : $F1278 case GET : $F1278 case POST : if ( isTargetCollection ) $F2455 case PUT : $F1278 case PATCH : $F1278 $F1267 $F1278 } }
public static String hide ( final String key ) { return isHidden ( key ) ? key : HIDDEN_PREFIX . concat ( key ) ; }
private synchronized IMqttToken removeMqttToken ( Bundle data ) { String activityToken = data . getString ( MqttServiceConstants . CALLBACK_ACTIVITY_TOKEN ) ; if ( activityToken != null ) { $F27213 ( tokenNumber , Integer , activityToken ) IMqttToken token = tokenMap . get ( tokenNumber ) ; tokenMap . delete ( tokenNumber ) ; return token ; } $F1274 }
public static boolean isExplicitAllType $F4374 ( types ) { return types != null && types . length == NUM00 && ALL . equals ( types [ NUM00 ] ) ; }
public static double incompleteBetaFraction2 $F7635 ( a , b , x ) { double xk , pk , pkm1 , pkm2 , qk , qkm1 , qkm2 ; double k1 , k2 , k3 , k4 , k5 , k6 , k7 , k8 ; double r , t , ans , z , thresh ; int n ; k1 = a ; k2 = b - NUM00 ; k3 = a ; k4 = a + NUM00 ; k5 = NUM00 ; k6 = a + b ; k7 = a + NUM00 ; ; k8 = a + NUM00 ; pkm2 = NUM00 ; qkm2 = NUM00 ; pkm1 = NUM00 ; qkm1 = NUM00 ; z = x / ( NUM00 - x ) ; ans = NUM00 ; r = NUM00 ; n = NUM00 ; thresh = NUM00 * MACHEP ; do { xk = - ( z * k1 * k2 ) / ( k3 * k4 ) ; pk = pkm1 + pkm2 * xk ; qk = qkm1 + qkm2 * xk ; pkm2 = pkm1 ; pkm1 = pk ; qkm2 = qkm1 ; qkm1 = qk ; xk = ( z * k5 * k6 ) / ( k7 * k8 ) ; pk = pkm1 + pkm2 * xk ; qk = qkm1 + qkm2 * xk ; pkm2 = pkm1 ; pkm1 = pk ; qkm2 = qkm1 ; qkm1 = qk ; if ( qk != NUM00 ) { r = pk / qk ; } if ( r != NUM00 ) { t = Math . abs ( ( ans - r ) / r ) ; ans = r ; } else { t = NUM00 ; } $F88060 ( t , thresh , ans ) k1 += NUM00 ; k2 -= NUM00 ; k3 += NUM00 ; k4 += NUM00 ; k5 += NUM00 ; k6 += NUM00 ; k7 += NUM00 ; k8 += NUM00 ; if ( $F149599 ( Math , qk , pk ) > big ) $F149602 ( pkm2 , biginv , pkm1 , qkm2 , qkm1 ) if ( $F7637 ( Math , qk , biginv ) || $F7637 ( Math , pk , biginv ) ) $F149602 ( pkm2 , big , pkm1 , qkm2 , qkm1 ) } while ( ++ n < NUM00 ) ; return ans ; }
private String readUntil ( $F1469 delimiter , boolean returnText ) throws $F139192 { int start = position ; StringBuilder result = null ; if ( returnText && text != null ) { $F6932 ( result ) result . append ( text ) ; } search : while ( _BOOL ) { if ( position + delimiter . length > limit ) { if ( start < position && returnText ) { $F39896 ( result ) $F14090 ( result , buffer , start , position ) } if ( ! fillBuffer ( delimiter . length ) ) { checkRelaxed ( UNEXPECTED_EOF ) ; type = COMMENT ; $F1274 } start = position ; } for ( $F1139 ( i , delimiter ) ) { if $F219258 ( buffer , position , i , delimiter ) { position ++ ; continue search ; } } $F597 } int end = position ; position += delimiter . length ; if ( ! returnText ) $F1337 else $F139251 ( result , stringPool , buffer , start , end ) }
public boolean exists ( String key ) $F8587 ( exists , key , _BOOL )
private Config $F72 $F184395
public boolean isLeaf $F72 $F52232 ( children )
public static void drawShadow ( final Rectangle2D rect , final Graphics2D g2 ) { $F317 ( g2S , g2 ) Rectangle2D shadow = new $F1634 ( rect . getX ( ) + NUM00 , rect . getY ( ) + ProcessDrawer . HEADER_HEIGHT + NUM00 , rect . getWidth ( ) , rect . getHeight ( ) - ProcessDrawer . HEADER_HEIGHT ) ; $F13609 ( bottom ) bottom . moveTo ( shadow . getX ( ) , rect . getMaxY ( ) ) ; bottom . lineTo ( rect . getMaxX ( ) , rect . getMaxY ( ) ) ; bottom . lineTo ( shadow . getMaxX ( ) , shadow . getMaxY ( ) ) ; bottom . lineTo ( shadow . getMinX ( ) , shadow . getMaxY ( ) ) ; $F2272 ( bottom ) g2S . setPaint ( new GradientPaint ( $F10740 ( rect ) , ( float ) rect . getMaxY ( ) , Color . gray , $F10740 ( rect ) , ( float ) shadow . getMaxY ( ) , TRANSPARENT_GRAY ) ) ; g2S . fill ( bottom ) ; $F13609 ( right ) right . moveTo ( rect . getMaxX ( ) , shadow . getMinY ( ) ) ; right . lineTo ( shadow . getMaxX ( ) , shadow . getMinY ( ) ) ; right . lineTo ( shadow . getMaxX ( ) , shadow . getMaxY ( ) ) ; right . lineTo ( rect . getMaxX ( ) , rect . getMaxY ( ) ) ; $F2272 ( right ) g2S . setPaint ( new GradientPaint ( ( float ) rect . getMaxX ( ) , $F10783 ( shadow ) , Color . gray , ( float ) shadow . getMaxX ( ) , $F10783 ( shadow ) , TRANSPARENT_GRAY ) ) ; g2S . fill ( right ) ; $F355 ( g2S ) }
$F129060 ( views , direction , focusableMode , focusableCount , descendantFocusability , getDescendantFocusability , FOCUS_BLOCK_DESCENDANTS , i , getChildCount , child , getChildAt , VISIBLE , ii , infoForChild , mCurItem , FOCUS_AFTER_DESCENDANTS , isFocusable , FOCUSABLES_TOUCH_MODE , isInTouchMode , isFocusableInTouchMode , this )
private boolean isValid ( CharSequence text ) { for ( $F1088 ( i , text ) ) { $F1280 ( c , text , i ) boolean valid = $F31339 ( c ) || $F56314 ( c ) || $F56314 ( c ) ; $F42316 ( valid , _BOOL ) } return _BOOL ; }
public static void interrupt ( final Thread thread ) { $F36258 ( thread ) }
private void writeObject $F9338 ( s ) throws $F3258 { $F9339 ( s ) $F27636 ( s , attrs ) Enumeration $F8625 attrEnum = attrs . elements ( ) ; while $F1444 ( attrEnum ) { s . writeObject ( attrEnum . nextElement ( ) ) ; } }
public static Container east ( Component east ) { return Container . encloseIn ( new BorderLayout $F72 , east , BorderLayout . EAST ) ; }
public static $F131 putAll $F72 { Region region = cache . getRegion ( Region . SEPARATOR + REGION_NAME ) ; assertNotNull ( region ) ; try { Map map = new LinkedHashMap $F72 ; map . put ( PUTALL_KEY1 , PUTALL_VALUE1 ) ; map . put ( PUTALL_KEY2 , PUTALL_VALUE2 ) ; map . put ( PUTALL_KEY3 , PUTALL_VALUE3 ) ; map . put ( PUTALL_KEY4 , PUTALL_VALUE4 ) ; map . put ( PUTALL_KEY5 , PUTALL_VALUE5 ) ; region . putAll ( map , NUM00 ) ; EventID [ ] evids = new EventID $F380 ; evids [ NUM00 ] = putAlleventId1 ; evids [ NUM00 ] = putAlleventId2 ; evids [ NUM00 ] = putAlleventId3 ; evids [ NUM00 ] = putAlleventId4 ; evids [ NUM00 ] = putAlleventId5 ; assertNotNull ( evids [ NUM00 ] ) ; assertNotNull ( evids [ NUM00 ] ) ; assertNotNull ( evids [ NUM00 ] ) ; assertNotNull ( evids [ NUM00 ] ) ; assertNotNull ( evids [ NUM00 ] ) ; return evids ; } $F17395 ( fail , e ) $F1274 }
public void loadLayout ( File oFile , boolean newTab ) { loadLayout ( oFile , newTab , _BOOL ) ; }
public void track ( File file , Object marker , FileDeleteStrategy deleteStrategy ) { $F896 ( file ) addTracker ( file . getPath ( ) , marker , deleteStrategy ) ; }
public static void CF5 $F50490 ( x , f , c , nx ) { double sum1 = NUM00 ; double sum2 = NUM00 ; double yj ; for ( $F9993 ( j , nx ) ) { if ( j % NUM00 == NUM00 ) { yj = x [ j - NUM00 ] - NUM00 * x [ NUM00 ] * Math . cos ( NUM00 * PI * x [ NUM00 ] + j * PI / nx ) ; sum1 += $F63533 ( yj , Math , PI ) ; } else { $F63531 ( yj , x , j , Math , PI , nx ) if ( j == NUM00 ) { sum2 += yj < NUM00 - NUM00 * Math . sqrt ( NUM00 ) ? Math . abs ( yj ) : ( NUM00 + $F94029 ( yj ) ) ; } else { sum2 += $F63533 ( yj , Math , PI ) ; } } } f [ NUM00 ] = x [ NUM00 ] + sum1 ; f [ NUM00 ] = NUM00 - x [ NUM00 ] + sum2 ; c [ NUM00 ] = x [ NUM00 ] - NUM00 * x [ NUM00 ] * Math . sin ( NUM00 * x [ NUM00 ] * PI + NUM00 * PI / nx ) - NUM00 * x [ NUM00 ] + NUM00 ; }
$F42603 ( path , WINDOWS_SEPARATOR , UNIX_SEPARATOR )
public boolean hasParameter ( String name ) { return _parameters . hasParameter ( name ) ; }
$F1 public long freeMemory ( long windowId ) throws IOException { long size = keyStream . dataSizeUpToWindow ( windowId ) + valueStream . dataSizeUpToWindow ( windowId ) ; windowsForFreeMemory . add ( windowId ) ; return size ; }
public static boolean isSQL99NonReservedKeyword ( String identifier ) { $F896 ( identifier ) return Arrays . binarySearch ( SQL99_NON_RESERVED , identifier . toUpperCase ( ) ) >= NUM00 ; }
$F1431 public static $F4203 void sort ( $F5675 list , $F38875 ( comparator ) ) { $F10809 array = list . toArray ( ( $F10809 ) $F103414 ( list ) ) ; Arrays . sort ( array , comparator ) ; int i = NUM00 ; $F55529 it = list . listIterator ( ) ; while $F2921 ( it ) { $F24630 ( it ) it . set ( array [ i ++ ] ) ; } }
$F1 public long handleCommit ( final long commitTime ) { if ( error != null ) throw new IndexInconsistentError ( error ) ; final IRootBlockView view = journal . getRootBlockView ( ) ; final ByteBuffer rbv = view . asReadOnlyBuffer ( ) ; final ByteBuffer bb = ByteBuffer . allocate ( rbv . capacity ( ) ) ; for ( int i = NUM00 ; i < rbv . capacity ( ) ; i ++ ) { bb . put ( rbv . get ( ) ) ; } $F14257 ( bb ) return journal . write ( bb ) ; }
public boolean isAppendTaskName $F72 { return appendTaskName ; }
public static final String toString ( String str ) { $F1747 ( str ) $F1538 ( buffer ) toByteArray ( buffer , str ) ; $F92 ( buffer ) }
public static $F13096 makeRandomCacheEntry ( $F96 data , boolean isExpired , boolean needsRefresh ) { $F6822 ( random ) $F13096 entry = new $F13096 $F72 ; if ( data != null ) $F6988 ( entry , data ) else { entry . data = $F13106 ( random ) ; } entry . etag = $F13111 ( String , random ) ; entry . lastModified = random . nextLong ( ) ; entry . ttl = isExpired ? NUM00 : Long . MAX_VALUE ; entry . softTtl = needsRefresh ? NUM00 : Long . MAX_VALUE ; return entry ; }
public static double max $F9830 ( data ) { double max = Double . NaN ; for ( $F1139 ( i , data ) ) { $F155599 ( Double , data , i ) if ( Double . isNaN ( max ) || data [ i ] > max ) max = data [ i ] ; } return max ; }
private static boolean isStartElement ( String line ) { $F24867 ( first , line ) $F24867 ( last , line ) if ( last < first ) { return _BOOL ; } else { $F24867 ( firstEnd , line ) $F24867 ( lastEnd , line ) if ( ( firstEnd != first ) && ( ( lastEnd + NUM00 ) != last ) ) { return _BOOL ; } } return _BOOL ; }
long readLong $F72 throws IOException { return ( ( $F116968 ( _is ) < < NUM00 ) | ( $F116968 ( _is ) < < NUM00 ) | ( $F116968 ( _is ) < < NUM00 ) | ( $F116968 ( _is ) < < NUM00 ) | ( $F116968 ( _is ) < < NUM00 ) | ( $F116968 ( _is ) < < NUM00 ) | ( $F116968 ( _is ) < < NUM00 ) | ( $F116968 ( _is ) ) ) ; }
$F1 public Instance remove ( int index ) $F20067 ( m_Instances , index )
protected static String extractAccessKey ( String s3uri ) { return s3uri . substring ( $F12707 ( s3uri ) , s3uri . indexOf ( NUM00 , $F12707 ( s3uri ) ) ) ; }
public boolean doTransaction ( DB db , Object threadstate ) throws WorkloadException { boolean ret = _BOOL ; $F25238 ( st , System ) String op = operationchooser . nextString ( ) ; if $F87842 ( op ) { ret = doTransactionRead ( db ) ; } else if $F87842 ( op ) { ret = doTransactionUpdate ( db ) ; } else if $F87842 ( op ) { ret = doTransactionInsert ( db ) ; } else if $F87842 ( op ) { ret = doTransactionScan ( db ) ; } else { ret = doTransactionReadModifyWrite ( db ) ; } $F25238 ( en , System ) _measurements . measure ( _operations . get ( op ) , $F90472 ( en , st ) ) ; if ( ret ) _measurements . reportReturnCode ( _operations . get ( op ) , - NUM00 ) ; else { _measurements . reportReturnCode ( _operations . get ( op ) , NUM00 ) ; } actualopcount . addAndGet ( NUM00 ) ; return ret ; }
public ToStringHelper addValue ( boolean value ) $F35308 ( addHolder , String , value )
public static void copyExcept ( Object src , Object dst , int oldSize , int removeIndex ) { if ( removeIndex > NUM00 && oldSize > NUM00 ) $F138343 ( System , src , dst , removeIndex ) if ( removeIndex < oldSize ) { System . arraycopy ( src , removeIndex + NUM00 , dst , removeIndex , oldSize - removeIndex - NUM00 ) ; } }
public SiteMonitor $F4374 ( urlList ) { siteUrlList = urlList ; }
private Set unionIPRange $F7233 ( ipWithSubmask1 , ipWithSubmask2 ) { $F19850 ( set ) if ( Arrays . areEqual ( ipWithSubmask1 , ipWithSubmask2 ) ) $F207 ( set , ipWithSubmask1 ) else $F23287 ( set , ipWithSubmask1 , ipWithSubmask2 ) return set ; }
public Optional < BlazeVertex > vertex ( final String vertexId ) { try ( final CloseableIterator $F130408 it = vertices ( vertexId ) ) { final Optional < BlazeVertex > v = it . hasNext ( ) ? Optional . of ( ( BlazeVertex ) it . next ( ) ) : Optional . empty ( ) ; if $F2921 ( it ) $F1155 ( vertexId ) return v ; } }
public static long addAndGet ( AtomicLong current , long toAdd ) { long u , r ; do { $F16478 ( r , current ) if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } u = addCap ( r , toAdd ) ; } while $F59753 ( current , r , u ) ; return u ; }
private void start ( HttpServletRequest request , HttpServletResponse response ) throws IOException { $F10362 ( label , request ) $F10362 ( detail , request ) MonKey key = getMonKey ( label , detail , DEFAULT_UNITS ) ; startMon ( key ) ; $F70095 ( out , response ) out . println ( OK + NUM00 + label ) ; }
public double norm $F72 { double sum = NUM00 ; for ( $F1139 ( i , components ) ) $F60596 ( sum , components , i ) $F41531 ( Math , sum ) }
public static double P_Harmonic ( int $F129596 , int Ypred [ ] [ ] ) { int allMissings = NUM00 ; int N = Y . length ; double loss = NUM00 ; for ( $F119 ( i , N ) ) { if ( allMissing ( Y [ i ] ) ) $F118993 ( allMissings ) double curLoss = P_Harmonic ( Y [ i ] , Ypred [ i ] ) ; if $F35707 ( Double , curLoss ) $F118993 ( allMissings ) loss += curLoss ; } return loss / $F250385 ( N , allMissings ) ; }
public void writeEntry ( CCacheOutputStream cos ) throws IOException { cos . write16 ( adType ) ; cos . write32 ( adData . length ) ; $F17918 ( cos , adData ) }
public CloseableAnimatedBitmap ( List < Bitmap > bitmaps , $F3807 durations , ResourceReleaser < Bitmap > resourceReleaser ) { Preconditions . checkNotNull ( bitmaps ) ; Preconditions . checkState ( $F14764 ( bitmaps ) , NUM00 ) ; $F9404 ( mBitmaps ) $F9404 ( mBitmapReferences ) for ( Bitmap bitmap : bitmaps ) { mBitmapReferences . add ( CloseableReference . of ( bitmap , resourceReleaser ) ) ; mBitmaps . add ( bitmap ) ; } mDurations = Preconditions . checkNotNull ( durations ) ; Preconditions . checkState ( $F56339 ( mDurations , mBitmaps ) , NUM00 ) ; }
public static String readLabelFile $F7613 ( entrySeparator , ensureInitialBoundary , trfname ) throws IOException { $F51387 ( lab , trfname ) try { XwavesLabelfileReader xlds = new XwavesLabelfileReader ( trfname ) ; String result = StringUtils . join ( entrySeparator , xlds . getLabelSymbols ( ) ) ; if ( ensureInitialBoundary && $F4434 ( result ) ) { result = NUM00 + entrySeparator + result ; } return result ; } $F3229 ( lab ) }
ConverterSet add ( Converter converter , Converter [ ] removed ) { Converter [ ] converters = iConverters ; int length = converters . length ; for ( $F119 ( i , length ) ) { Converter existing = converters [ i ] ; if $F1238 ( converter , existing ) { if ( removed != null ) { removed [ NUM00 ] = null ; } return this ; } if ( converter . getSupportedType ( ) == existing . getSupportedType ( ) ) { Converter [ ] copy = new Converter [ length ] ; for ( $F119 ( j , length ) ) { if ( j != i ) $F15086 ( copy , j , converters ) else { copy [ j ] = converter ; } } if ( removed != null ) { removed [ NUM00 ] = existing ; } return new ConverterSet ( copy ) ; } } Converter [ ] copy = new Converter [ length + NUM00 ] ; $F135 ( System , converters , copy , length ) copy [ length ] = converter ; if ( removed != null ) { removed [ NUM00 ] = null ; } return new ConverterSet ( copy ) ; }
private void parse $F72 throws SAXException { XStream xstream = ( XStream ) properties . get ( CONFIGURED_XSTREAM_PROPERTY ) ; if ( xstream == null ) { xstream = new XStream $F72 ; } final $F11654 source = ( $F11654 ) properties . get ( SOURCE_OBJECT_LIST_PROPERTY ) ; if $F4251 ( source ) { throw new SAXException ( NUM00 + SOURCE_OBJECT_LIST_PROPERTY + NUM00 ) ; } try { startDocument ( _BOOL ) ; for ( final Object name : source ) { xstream . marshal ( name , this ) ; } endDocument ( _BOOL ) ; } catch ( final StreamException e ) { if ( e . getCause ( ) instanceof SAXException ) { throw ( SAXException ) e . getCause ( ) ; } else { $F6287 ( e ) } } }
private SortedMap < MessageUid , MaildirMessageName > truncateMap ( Map < MessageUid , MaildirMessageName > map , MessageUid from , MessageUid to ) { TreeMap < MessageUid , MaildirMessageName > sortedMap ; if ( map instanceof TreeMap $F5162 ) sortedMap = ( TreeMap < MessageUid , MaildirMessageName > ) map ; else sortedMap = new TreeMap < MessageUid , MaildirMessageName > ( map ) ; if ( to != null ) return sortedMap . subMap ( from , to . next ( ) ) ; return sortedMap . tailMap ( from ) ; }
public void dumpIndex ( boolean showBounds ) throws IOException { byte ixRecord [ ] = new byte [ SPATIAL_INDEX_RECORD_LENGTH ] ; int recNum = NUM00 ; $F2329 ( shpFileName ) BinaryBufferedFile ssx = new BinaryBufferedFile ( ssx ( shpFileName ) ) ; $F927 ( ssx ) while ( _BOOL ) { $F65003 ( result , ssx , ixRecord , SPATIAL_INDEX_RECORD_LENGTH ) if ( result <= NUM00 ) { $F9472 ( logger , recNum ) $F597 } else { recNum ++ ; int offset = readBEInt ( ixRecord , NUM00 ) ; int length = readBEInt ( ixRecord , NUM00 ) ; logger . info ( NUM00 + recNum + NUM00 + offset + NUM00 + length + ( showBounds ? ( NUM00 + readLEDouble ( ixRecord , NUM00 ) + NUM00 + readLEDouble ( ixRecord , NUM00 ) + NUM00 + readLEDouble ( ixRecord , NUM00 ) + NUM00 + readLEDouble ( ixRecord , NUM00 ) ) : NUM00 ) ) ; } } $F59 ( ssx ) }
private static boolean compareParam ( String jdiffParam , Type reflectionParamType ) { $F1933 ( jdiffParam , _BOOL ) String reflectionParam = typeToString ( reflectionParamType ) ; $F12418 ( jdiffParam , reflectionParam , _BOOL ) $F1384 ( jdiffParamEndOffset , jdiffParam ) $F1384 ( reflectionParamEndOffset , reflectionParam ) if $F6099 ( jdiffParamEndOffset , reflectionParamEndOffset ) { $F45799 ( jdiffParam , jdiffParamEndOffset ) $F45799 ( reflectionParam , reflectionParamEndOffset ) $F1964 ( jdiffParam , reflectionParam ) } return _BOOL ; }
public static void randomNumber $F11072 ( num , n ) { for ( $F119 ( j , n ) ) { num [ j ] = $F34940 ( Math ) ; } }
$F119089 ( text , builder , index , chr , t , Integer )
public void writeTo ( OutputStream out ) throws IOException { ByteString [ ] cachedFlushBuffers ; $F96 cachedBuffer ; int cachedBufferPos ; synchronized ( this ) { cachedFlushBuffers = flushedBuffers . toArray ( new ByteString $F2313 ( flushedBuffers ) ) ; cachedBuffer = buffer ; cachedBufferPos = bufferPos ; } for ( ByteString byteString : cachedFlushBuffers ) $F356076 ( byteString , out ) out . write ( copyArray ( cachedBuffer , cachedBufferPos ) ) ; }
private void checkHeadingsHierarchy ( Elements elements , TestSolutionHandler testSolutionHandler ) { if $F2979 ( elements ) { testSolutionHandler . addTestSolution ( TestSolution . NOT_APPLICABLE ) ; $F665 } TestSolution checkResult = TestSolution . PASSED ; $F335184 iter = elements . iterator ( ) ; $F84573 ( element , iter ) int indexOfReference = getHeaderIndex ( element ) ; int currentIndex ; int previousIndex = indexOfReference ; Element elementOfReference = element ; Element previousElement = element ; while $F2921 ( iter ) { $F45366 ( element , iter ) currentIndex = getHeaderIndex ( element ) ; if ( currentIndex != - NUM00 ) { if ( currentIndex - previousIndex >= NUM00 ) { checkResult = TestSolution . FAILED ; addSourceCodeRemark ( TestSolution . FAILED , element , HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG , getEvidenceElement ( PREVIOUS_H_TAG_INDEX_EE , getEvidenceElementMsg ( previousIndex , previousElement ) ) ) ; } else if ( currentIndex < indexOfReference ) { checkResult = TestSolution . FAILED ; addSourceCodeRemark ( TestSolution . FAILED , element , HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG , getEvidenceElement ( FIRST_H_TAG_INDEX_EE , getEvidenceElementMsg ( indexOfReference , elementOfReference ) ) ) ; } previousIndex = currentIndex ; previousElement = element ; } } testSolutionHandler . addTestSolution ( checkResult ) ; }
public Iterator $F115413 iterator $F72 $F16048 ( elements )
public void mouseWheelMoved ( MouseWheelEvent e ) { boolean accepted = checkModifiers ( e ) ; if ( accepted == _BOOL ) { $F128225 vv = ( $F128225 ) e . getSource ( ) ; Point2D mouse = e . getPoint ( ) ; Point2D center = vv . getCenter ( ) ; int amount = e . getWheelRotation ( ) ; if ( zoomAtMouse ) { if ( amount > NUM00 ) { scaler . scale ( vv , in , mouse ) ; } else if ( amount < NUM00 ) { scaler . scale ( vv , out , mouse ) ; } } else { if ( amount > NUM00 ) { scaler . scale ( vv , in , center ) ; } else if ( amount < NUM00 ) { scaler . scale ( vv , out , center ) ; } } $F60335 ( e ) $F8798 ( vv ) } }
public File createNewFolder ( File containingDir ) throws IOException { $F31068 ( containingDir ) File newFolder = createFileObject ( containingDir , newFolderString ) ; int i = NUM00 ; while ( newFolder . exists ( ) && i < NUM00 ) { newFolder = createFileObject ( containingDir , MessageFormat . format ( newFolderNextString , new Integer ( i ) ) ) ; i ++ ; } if $F3428 ( newFolder ) $F144276 ( newFolder ) else $F1908 ( newFolder ) return newFolder ; }
protected void assertFuncEquals $F74419 ( inputs ) throws Exception { SolrQueryRequest req = req ( ) ; try { assertFuncEquals ( req , inputs ) ; } $F3229 ( req ) }
private void handleStartElement ( XMLStreamReader parser , $F6870 childrenFound , Handler handler , $F2100 ( values ) , Stack < $F2689 > stack , boolean recordStarted ) throws IOException , XMLStreamException { Node n = getMatchingNode ( parser , childNodes ) ; $F20530 ( decends ) if ( n != null ) { childrenFound . add ( n ) ; n . parse ( parser , handler , values , stack , recordStarted ) ; $F665 } Node dn = this ; do { if ( dn . wildCardNodes != null ) { n = getMatchingNode ( parser , dn . wildCardNodes ) ; if ( n != null ) { childrenFound . add ( n ) ; n . parse ( parser , handler , values , stack , recordStarted ) ; $F597 } for ( Node nn : dn . wildCardNodes ) $F51860 ( decends , nn ) } dn = dn . wildAncestor ; } while ( dn != null ) ; if ( n == null ) { int count = NUM00 ; while ( count != NUM00 ) { $F128162 ( token , parser ) if ( token == START_ELEMENT ) { Node nn = ( Node ) decends . get ( parser . getLocalName ( ) ) ; if ( nn != null ) { childrenFound . add ( nn ) ; nn . parse ( parser , handler , values , stack , recordStarted ) ; } else count ++ ; } else if ( token == END_ELEMENT ) count -- ; } } }
public boolean equivalent ( IMFMarkerType other ) { $F1933 ( other , _BOOL ) boolean result = _BOOL ; result &= offset . equals ( other . getOffset ( ) ) ; result &= label . equivalent ( other . getLabel ( ) ) ; return result ; }
public static Discretization discretize ( $F1986 _data , $F1986 cutoffs , String variableName , $F3803 categories ) { $F18045 ( cutoffs ) for ( $F21583 ( i , cutoffs ) ) { if ( ! ( cutoffs [ i ] <= cutoffs [ i + NUM00 ] ) ) $F895 } $F18045 ( variableName ) int numCategories = cutoffs . length + NUM00 ; if ( categories != null && categories . size ( ) != numCategories ) { throw new IllegalArgumentException $F76899 ; } DiscreteVariable variable ; if ( categories == null ) { variable = new DiscreteVariable ( variableName , numCategories ) ; } else { variable = new DiscreteVariable ( variableName , categories ) ; } $F22974 ( discreteData , _data ) loop : for ( $F1139 ( i , _data ) ) { if $F1998 ( Double , _data , i ) { discreteData [ i ] = DiscreteVariable . MISSING_VALUE ; $F598 } for ( $F1139 ( j , cutoffs ) ) { if ( _data [ i ] > Double . NEGATIVE_INFINITY && _data [ i ] < Double . POSITIVE_INFINITY && _data [ i ] < cutoffs [ j ] ) { discreteData [ i ] = j ; continue loop ; } } discreteData [ i ] = cutoffs . length ; } return new Discretization ( variable , discreteData ) ; }
public static $F17804 loadWorkspaceScreensDb ( Context context ) { final ContentResolver contentResolver = context . getContentResolver ( ) ; final Uri screensUri = LauncherSettings . WorkspaceScreens . CONTENT_URI ; final Cursor sc = contentResolver . query ( screensUri , null , null , null , LauncherSettings . WorkspaceScreens . SCREEN_RANK ) ; $F17809 ( screenIds ) try { final int idIndex = sc . getColumnIndexOrThrow ( LauncherSettings . WorkspaceScreens . _ID ) ; while $F12260 ( sc ) { try { screenIds . add ( sc . getLong ( idIndex ) ) ; } catch ( Exception e ) { Launcher . addDumpLog ( TAG , NUM00 + NUM00 + e , _BOOL ) ; } } } $F14364 ( sc ) return screenIds ; }
private boolean renderOutput ( Node node , InternalContextAdapter context , Writer writer ) throws IOException , MethodInvocationException , ResourceNotFoundException { String arg = NUM00 ; $F24276 ( node , rsvc , _BOOL ) Object value = node . value ( context ) ; $F24276 ( value , rsvc , _BOOL ) $F6947 ( arg , value ) Resource resource = null ; try { resource = rsvc . getContent ( arg , getInputEncoding ( context ) ) ; } catch ( ResourceNotFoundException rnfe ) { rsvc . error ( NUM00 + arg + NUM00 + context . getCurrentTemplateName ( ) + NUM00 + getLine ( ) + NUM00 + getColumn ( ) + NUM00 ) ; throw rnfe ; } catch ( Exception e ) { rsvc . error ( NUM00 + arg + NUM00 + context . getCurrentTemplateName ( ) + NUM00 + getLine ( ) + NUM00 + getColumn ( ) + NUM00 + e ) ; } $F397 ( resource , _BOOL ) writer . write ( ( String ) resource . getData ( ) ) ; return _BOOL ; }
protected String e ( String s ) throws Exception { return fmt . format ( parser . parse ( s , null ) ) ; }
public static boolean equals ( $F8748 field1 , $F8748 field2 ) $F17603 ( field1 , field2 , Arrays )
public Matrix4 multiplyByScale $F7635 ( xScale , yScale , zScale ) { $F1986 m = this . m ; m [ NUM00 ] *= xScale ; m [ NUM00 ] *= xScale ; m [ NUM00 ] *= xScale ; m [ NUM00 ] *= xScale ; m [ NUM00 ] *= yScale ; m [ NUM00 ] *= yScale ; m [ NUM00 ] *= yScale ; m [ NUM00 ] *= yScale ; m [ NUM00 ] *= zScale ; m [ NUM00 ] *= zScale ; m [ NUM00 ] *= zScale ; m [ NUM00 ] *= zScale ; return this ; }
public void changeState $F72 { linked = ! linked ; link = linked ? linkedImIc . getImage ( ) : unlinkedImIc . getImage ( ) ; repaint ( ) ; }
public static Geometry bufferBySegments ( Geometry g , double distance ) { Geometry segs = LineHandlingFunctions . extractSegments ( g ) ; $F95016 ( posDist , Math , distance ) Geometry segBuf = bufferByComponents ( segs , posDist ) ; if ( distance < NUM00 ) return g . difference ( segBuf ) ; return g . union ( segBuf ) ; }
public void recordEndTime $F72 { int msDiff = ( int ) ( System . currentTimeMillis ( ) - _currentRequestStartTime . get ( ) ) ; $F10635 ( _log , msDiff ) updateOrResetReqRspAvgLstHr ( updateOrResetReqRspAvgLstMin ( msDiff , _BOOL ) , _BOOL ) ; updateMinMaxReqRspMs ( msDiff ) ; if ( msDiff >= SUSPISCIOUS_RSP_TIME_MS ) { $F18177 ( _alertLog , MessageFormat , msDiff ) } $F7042 ( _currentRequestStartTime ) }
private boolean isAccessibleUserToKibana $F32029 ( filters ) { if $F3578 ( filters ) { return _BOOL ; } return _BOOL ; }
public boolean clear $F72 { try $F13478 ( list , fireTableDataChanged ) $F7474 ( _BOOL ) return _BOOL ; }
public static final int typeIndex ( Class type ) { $F749 list = primitiveTypes ; int n = list . length ; for ( $F119 ( i , n ) ) if ( list [ i ] == type ) return i ; throw new RuntimeException $F47919 ( type ) ; }
public boolean load ( File fi ) throws JmriConfigureXmlException $F8587 ( load , fi , _BOOL )
public String parameterToString ( Object param ) { if ( param == null ) $F2455 else if ( param instanceof Date ) { return formatDate ( ( Date ) param ) ; } else if ( param instanceof Collection ) { $F83 ( b ) for ( Object o : ( Collection ) param ) { $F47101 ( b ) $F111183 ( b , String , o ) } $F92 ( b ) } else $F62107 ( String , param ) }
public void testBug66947 $F72 throws Exception { Connection con = null ; try { $F2697 ( props ) $F2699 ( props ) $F2699 ( props ) $F2699 ( props ) con = getConnectionWithProps ( props ) ; PreparedStatement ps1_1 ; PreparedStatement ps1_2 ; String query = NUM00 ; ps1_1 = con . prepareStatement ( query ) ; $F1699 ( ps1_1 ) $F59 ( ps1_1 ) ps1_2 = con . prepareStatement ( query ) ; assertSame ( NUM00 , ps1_1 , ps1_2 ) ; $F1699 ( ps1_2 ) $F59 ( ps1_2 ) $F59 ( ps1_2 ) ps1_1 = con . prepareStatement ( query ) ; assertNotSame ( NUM00 , ps1_2 , ps1_1 ) ; $F1699 ( ps1_1 ) $F59 ( ps1_1 ) $F59 ( ps1_1 ) PreparedStatement ps2_1 ; PreparedStatement ps2_2 ; PreparedStatement ps3_1 ; PreparedStatement ps3_2 ; $F57556 ( ps1_1 , con ) $F1699 ( ps1_1 ) $F59 ( ps1_1 ) $F57556 ( ps2_1 , con ) $F1699 ( ps2_1 ) $F59 ( ps2_1 ) $F57556 ( ps3_1 , con ) $F1699 ( ps3_1 ) $F59 ( ps3_1 ) $F57556 ( ps1_2 , con ) assertNotSame ( NUM00 , ps1_1 , ps1_2 ) ; $F57556 ( ps2_2 , con ) assertSame ( NUM00 , ps2_1 , ps2_2 ) ; $F57556 ( ps3_2 , con ) assertSame ( NUM00 , ps3_1 , ps3_2 ) ; } $F14364 ( con ) }
private void calculateGridSizes ( float numbersRadius , float xCenter , float yCenter , float textSize , $F5415 textGridHeights , $F5415 textGridWidths ) { float offset1 = numbersRadius ; float offset2 = numbersRadius * ( ( float ) Math . sqrt ( NUM00 ) ) / NUM00 ; float offset3 = numbersRadius / NUM00 ; mPaint . setTextSize ( textSize ) ; yCenter -= $F143339 ( mPaint ) ; textGridHeights [ NUM00 ] = yCenter - offset1 ; textGridWidths [ NUM00 ] = xCenter - offset1 ; textGridHeights [ NUM00 ] = yCenter - offset2 ; textGridWidths [ NUM00 ] = xCenter - offset2 ; textGridHeights [ NUM00 ] = yCenter - offset3 ; textGridWidths [ NUM00 ] = xCenter - offset3 ; textGridHeights [ NUM00 ] = yCenter ; textGridWidths [ NUM00 ] = xCenter ; textGridHeights [ NUM00 ] = yCenter + offset3 ; textGridWidths [ NUM00 ] = xCenter + offset3 ; textGridHeights [ NUM00 ] = yCenter + offset2 ; textGridWidths [ NUM00 ] = xCenter + offset2 ; textGridHeights [ NUM00 ] = yCenter + offset1 ; textGridWidths [ NUM00 ] = xCenter + offset1 ; }
$F148243 ( checkNotClosed , trimToSize , trimToFileCount , journalWriter )
private final $F806 _expandSeenNames $F4374 ( oldShared ) { int len = oldShared . length ; $F806 newShared ; if ( len == NUM00 ) { newShared = _smileBufferRecycler . allocSeenNamesBuffer ( ) ; if ( newShared == null ) { newShared = new String [ SmileBufferRecycler . DEFAULT_NAME_BUFFER_LENGTH ] ; } } else if ( len == SmileConstants . MAX_SHARED_NAMES ) { newShared = oldShared ; _seenNameCount = NUM00 ; } else { int newSize = ( len == SmileBufferRecycler . DEFAULT_ <missing ';'> NUM00 <missing ';'> _VALUE_BUFFER_LENGTH ) ? NUM00 : SmileConstants . MAX_SHARED_NAMES ; $F58180 ( newShared , newSize ) $F7057 ( System , oldShared , newShared ) } return newShared ; }
public void addRequestProperty ( String key , String value ) { $F57478 ( connected ) $F1149 ( key ) if ( requests == null ) requests = new MessageHeader $F72 ; requests . add ( key , value ) ; }
ServerMember update ( Address clientAddress , Instant time ) { if ( clientAddress != null ) { this . clientAddress = clientAddress ; if ( time . isAfter ( updated ) ) { this . updated = Assert . notNull ( time , NUM00 ) ; } } return this ; }
public static boolean isOrgLevelOnly ( int AD_Client_ID , int AD_Table_ID ) { Boolean share = isShared ( AD_Client_ID , AD_Table_ID ) ; if ( share != null ) return $F84104 ( share ) ; return _BOOL ; }
public Runnable decrementAsRunnable $F72 { return mDecrementRunnable ; }
$F1 public void actionPerformed ( ActionEvent event ) { $F35563 ( command , event ) if $F3057 ( command ) $F5795 ( attemptModifyBackgroundPaint ) }
public $F96 serializeToBuffer ( Object o ) throws IOException { $F1538 ( bufOut ) try { serialize ( bufOut , o ) ; $F1206 ( bufOut ) $F11316 ( bufOut ) } $F3229 ( bufOut ) }
ModulePointer resolve ( String modName ) { return ( ModulePointer ) context . get ( modName ) ; }
protected ConnectionStateTLS ( SSLSessionImpl session ) { try { CipherSuite cipherSuite = session . cipherSuite ; hash_size = cipherSuite . getMACLength ( ) ; boolean is_exportabe = cipherSuite . isExportable ( ) ; int key_size = ( is_exportabe ) ? cipherSuite . keyMaterial : cipherSuite . expandedKeyMaterial ; int iv_size = cipherSuite . ivSize ; block_size = cipherSuite . getBlockSize ( ) ; String algName = cipherSuite . getBulkEncryptionAlgorithm ( ) ; String macName = cipherSuite . getHmacName ( ) ; if ( logger != null ) { $F8438 ( logger ) logger . println ( $F2989 ( cipherSuite ) ) ; $F7957 ( logger , algName ) $F7957 ( logger , macName ) $F7957 ( logger , hash_size ) $F7957 ( logger , block_size ) $F7957 ( logger , iv_size ) $F7957 ( logger , key_size ) } $F56524 ( clientRandom , session ) $F56524 ( serverRandom , session ) $F96 key_block = new byte [ NUM00 * hash_size + NUM00 * key_size + NUM00 * iv_size ] ; $F148496 ( seed , clientRandom , serverRandom ) $F7057 ( System , serverRandom , seed ) $F11244 ( System , clientRandom , seed , serverRandom ) PRF . computePRF ( key_block , session . master_secret , KEY_EXPANSION_LABEL , seed ) ; $F2175 ( client_mac_secret , hash_size ) $F2175 ( server_mac_secret , hash_size ) $F2175 ( client_key , key_size ) $F2175 ( server_key , key_size ) boolean is_client = ! session . isServer ; $F135 ( System , key_block , client_mac_secret , hash_size ) $F30985 ( System , key_block , hash_size , server_mac_secret ) System . arraycopy ( key_block , NUM00 * hash_size , client_key , NUM00 , key_size ) ; System . arraycopy ( key_block , NUM00 * hash_size + key_size , server_key , NUM00 , key_size ) ; IvParameterSpec clientIV = null ; IvParameterSpec serverIV = null ; if ( is_exportabe ) { $F7057 ( System , clientRandom , seed ) $F11244 ( System , serverRandom , seed , clientRandom ) $F96 final_client_key = new byte [ cipherSuite . expandedKeyMaterial ] ; $F96 final_server_key = new byte [ cipherSuite . expandedKeyMaterial ] ; PRF . computePRF ( final_client_key , client_key , CLIENT_WRITE_KEY_LABEL , seed ) ; PRF . computePRF ( final_server_key , server_key , SERVER_WRITE_KEY_LABEL , seed ) ; client_key = final_client_key ; server_key = final_server_key ; if ( block_size != NUM00 ) { $F11778 ( iv_block , iv_size ) PRF . computePRF ( iv_block , null , IV_BLOCK_LABEL , seed ) ; clientIV = new IvParameterSpec ( iv_block , NUM00 , iv_size ) ; serverIV = new IvParameterSpec ( iv_block , iv_size , iv_size ) ; } } else if ( block_size != NUM00 ) { clientIV = new IvParameterSpec ( key_block , NUM00 * ( hash_size + key_size ) , iv_size ) ; serverIV = new IvParameterSpec ( key_block , NUM00 * ( hash_size + key_size ) + iv_size , iv_size ) ; } if ( logger != null ) { $F7957 ( logger , is_exportabe ) $F8438 ( logger ) logger . print ( session . master_secret ) ; $F8438 ( logger ) logger . print ( clientRandom ) ; $F8438 ( logger ) logger . print ( serverRandom ) ; $F8438 ( logger ) logger . print ( client_mac_secret ) ; $F8438 ( logger ) logger . print ( server_mac_secret ) ; $F8438 ( logger ) logger . print ( client_key ) ; $F8438 ( logger ) logger . print ( server_key ) ; if ( clientIV == null ) $F12204 ( logger ) else { $F8438 ( logger ) logger . print ( clientIV . getIV ( ) ) ; $F8438 ( logger ) logger . print ( serverIV . getIV ( ) ) ; } } if ( algName == null ) { $F83645 ( encCipher ) ; $F83645 ( decCipher ) ; } else { encCipher = Cipher . getInstance ( algName ) ; decCipher = Cipher . getInstance ( algName ) ; if ( is_client ) { $F222121 ( encCipher , Cipher , client_key , algName , clientIV ) $F94768 ( decCipher , Cipher , server_key , algName , serverIV ) } else { $F222121 ( encCipher , Cipher , server_key , algName , serverIV ) $F94768 ( decCipher , Cipher , client_key , algName , clientIV ) } } encMac = Mac . getInstance ( macName ) ; decMac = Mac . getInstance ( macName ) ; if ( is_client ) { $F222127 ( encMac , client_mac_secret , macName ) $F222127 ( decMac , server_mac_secret , macName ) } else { $F222127 ( encMac , server_mac_secret , macName ) $F222127 ( decMac , client_mac_secret , macName ) } } catch ( Exception e ) { $F301 ( e ) throw new AlertException ( AlertProtocol . INTERNAL_ERROR , new SSLProtocolException $F580 ) ; } }
public void startElement $F42838 ( namespaceURI , localName , name , atts ) throws $F2253 { ElemContext elemContext = m_elemContext ; if ( elemContext . m_startTagOpen ) $F42845 ( closeStartTag , elemContext , _BOOL ) else if ( m_cdataTagOpen ) $F62354 ( closeCDATA , m_cdataTagOpen , _BOOL ) else $F62355 ( m_needToCallStartDocument , startDocumentInternal , _BOOL ) if ( m_needToOutputDocTypeDecl ) { String n = name ; if $F6036 ( n ) { n = localName ; } outputDocTypeDecl ( n ) ; } if $F49270 ( namespaceURI ) { super . startElement ( namespaceURI , localName , name , atts ) ; $F665 } try { ElemDesc elemDesc = getElemDesc2 ( name ) ; int elemFlags = elemDesc . getFlags ( ) ; if ( m_doIndent ) { boolean isBlockElement = ( elemFlags & ElemDesc . BLOCK ) != NUM00 ; if ( m_ispreserve ) m_ispreserve = _BOOL ; else if ( ( null != elemContext . m_elementName ) && ( ! m_inBlockElem || isBlockElement ) ) $F21847 ( m_startNewLine , _BOOL , indent ) m_inBlockElem = ! isBlockElement ; } $F27424 ( atts , addAttributes ) m_isprevtext = _BOOL ; $F42851 ( writer , m_writer ) $F3410 ( writer ) writer . write ( name ) ; $F42855 ( m_tracer , firePseudoAttributes ) if ( ( elemFlags & ElemDesc . EMPTY ) != NUM00 ) { m_elemContext = elemContext . push ( ) ; m_elemContext . m_elementName = name ; m_elemContext . m_elementDesc = elemDesc ; $F665 } else { elemContext = elemContext . push ( namespaceURI , localName , name ) ; m_elemContext = elemContext ; elemContext . m_elementDesc = elemDesc ; elemContext . m_isRaw = ( elemFlags & ElemDesc . RAW ) != NUM00 ; } if ( ( elemFlags & ElemDesc . HEADELEM ) != NUM00 ) { closeStartTag ( ) ; elemContext . m_startTagOpen = _BOOL ; if ( ! m_omitMetaTag ) { $F32367 ( m_doIndent , indent ) $F3410 ( writer ) String encoding = getEncoding ( ) ; String encode = Encodings . getMimeEncoding ( encoding ) ; writer . write ( encode ) ; $F3410 ( writer ) } } } $F6289 ( e ) }
public void addCertStore ( CertStore store ) { $F2329 ( store ) if ( certStores == null ) { certStores = new ArrayList < CertStore > $F72 ; } certStores . add ( store ) ; }
public NarClassLoader ( final File narWorkingDirectory ) throws $F125668 { super ( new URL $F380 ) ; this . narWorkingDirectory = narWorkingDirectory ; updateClasspath ( narWorkingDirectory ) ; }
public Block block $F72 { return block ; }
public static TypeBinding [ ] substitute ( Substitution substitution , TypeBinding [ ] originalTypes ) { $F1275 ( originalTypes ) TypeBinding [ ] substitutedTypes = originalTypes ; for ( $F21059 ( i , length , originalTypes ) ) { TypeBinding originalType = originalTypes [ i ] ; TypeBinding substitutedParameter = substitute ( substitution , originalType ) ; if ( substitutedParameter != originalType ) { if ( substitutedTypes == originalTypes ) { System . arraycopy ( originalTypes , NUM00 , substitutedTypes = new TypeBinding [ length ] , NUM00 , i ) ; } substitutedTypes [ i ] = substitutedParameter ; } else if ( substitutedTypes != originalTypes ) { substitutedTypes [ i ] = originalType ; } } return substitutedTypes ; }
private boolean checkIfScrolling ( $F5415 lastPoints , MotionEvent ev ) { $F12457 ( point ) point [ NUM00 ] = ev . getRawX ( ) ; point [ NUM00 ] = ev . getRawY ( ) ; float delta = getDistance ( lastPoints , point ) ; return Math . abs ( delta ) > mSlop ; }
public void testMergeOneFilterIntoDocumentWithSameFilter $F72 throws Exception { $F44 ( srcXml ) $F34646 ( srcWebXml , WebXmlIo , srcXml ) $F34646 ( mergeWebXml , WebXmlIo , srcXml ) $F34648 ( merger , srcWebXml ) merger . mergeFilters ( mergeWebXml ) ; $F100788 ( assertTrue , WebXmlUtils , srcWebXml ) }
public Edge ( S src , Symbol symbol , S dest ) { this . src = src ; this . symbol = symbol ; this . dest = dest ; this . srcItem = src . getFirstItem ( ) ; this . hashCache = calcHashCode ( ) ; }
public void push ( final Type value ) { if ( value == null ) { mv . visitInsn ( Opcodes . ACONST_NULL ) ; } else { switch ( value . getSort ( ) ) { case Type . BOOLEAN : mv . visitFieldInsn ( Opcodes . GETSTATIC , NUM00 , NUM00 , CLDESC ) ; $F597 case Type . CHAR : mv . visitFieldInsn ( Opcodes . GETSTATIC , NUM00 , NUM00 , CLDESC ) ; $F597 case Type . BYTE : mv . visitFieldInsn ( Opcodes . GETSTATIC , NUM00 , NUM00 , CLDESC ) ; $F597 case Type . SHORT : mv . visitFieldInsn ( Opcodes . GETSTATIC , NUM00 , NUM00 , CLDESC ) ; $F597 case Type . INT : mv . visitFieldInsn ( Opcodes . GETSTATIC , NUM00 , NUM00 , CLDESC ) ; $F597 case Type . FLOAT : mv . visitFieldInsn ( Opcodes . GETSTATIC , NUM00 , NUM00 , CLDESC ) ; $F597 case Type . LONG : mv . visitFieldInsn ( Opcodes . GETSTATIC , NUM00 , NUM00 , CLDESC ) ; $F597 case Type . DOUBLE : mv . visitFieldInsn ( Opcodes . GETSTATIC , NUM00 , NUM00 , CLDESC ) ; $F597 $F1267 mv . visitLdcInsn ( value ) ; } } }
$F4562 ( view , deltaX , scrollX , deltaY , scrollY , scrollRange , fuzzyThreshold , scaleFactor , isTouchEvent , deltaValue , currentScrollValue , scrollValue , HORIZONTAL , VERTICAL , mode , newScrollValue , PullToRefreshBase , Log , LOG_TAG , State , Math )
public ExtendedTextLabel createExtended ( Font font , CoreMetrics lm , Decoration decorator , int start , int limit ) { if ( start >= limit || start < lineStart || limit > lineLimit ) $F20855 ( start , limit ) int level = lineBidi == null ? NUM00 : lineBidi . getLevelAt ( start - lineStart ) ; int linedir = ( lineBidi == null || lineBidi . baseIsLeftToRight ( ) ) ? NUM00 : NUM00 ; int layoutFlags = flags & ~ NUM00 ; if $F69047 ( level ) layoutFlags |= NUM00 ; if $F69047 ( linedir ) layoutFlags |= NUM00 ; TextSource source = new StandardTextSource ( text , start , limit - start , lineStart , lineLimit - lineStart , level , layoutFlags , font , frc , lm ) ; return new ExtendedTextSourceLabel ( source , decorator ) ; }
public static String rightPad $F41200 ( s , minLength , filling ) { $F1749 ( ln , s ) $F24599 ( minLength , ln , s ) $F7542 ( res , minLength ) res . append ( s ) ; int dif = minLength - ln ; $F48485 ( i , dif , res , filling ) $F92 ( res ) }
public final boolean isSupported ( String feature , String version ) { return implementation . hasFeature ( feature , version ) ; }
public void clear $F72 { fullyLock ( ) ; try { for ( $F13430 p , h = head ; $F53563 ( p , h ) ; h = p ) { h . next = h ; p . item = null ; } head = last ; if ( count . getAndSet ( NUM00 ) == capacity ) $F702 ( notFull ) } $F49978 ( fullyUnlock ) }
private static String readQuotedDescriptor ( final SubstringReader reader , final boolean allowCompatChars ) throws DecodeException { int length = NUM00 ; reader . skipWhitespaces ( ) ; try { $F277866 ( c , reader ) if ( c != NUM00 ) { throw DecodeException . error ( ERR_ATTR_SYNTAX_EXPECTED_QUOTE_AT_POS1 . get ( reader . pos ( ) - NUM00 , c ) ) ; } $F115573 ( reader ) while $F175289 ( c , reader ) { if ( length == NUM00 && ! isAlpha ( c ) ) { throw DecodeException . error ( ERR_ATTR_SYNTAX_ILLEGAL_CHAR_IN_ <missing ';'> NUM00 <missing ';'> _OID1 . get ( c , reader . pos ( ) - NUM00 ) ) ; } if ( ! isKeyChar ( c , allowCompatChars ) ) { throw DecodeException . error ( ERR_ATTR_SYNTAX_ILLEGAL_CHAR_IN_ <missing ';'> NUM00 <missing ';'> _OID1 . get ( c , reader . pos ( ) - NUM00 ) ) ; } length ++ ; } $F2268 ( reader ) final String descr = reader . read ( length ) ; $F61262 ( reader ) return descr ; } catch ( final StringIndexOutOfBoundsException e ) { throw DecodeException . error ( ERR_ATTR_SYNTAX_TRUNCATED_VALUE1 . get ( ) ) ; } }
public String toCSV $F72 { $F83 ( builder ) $F84 ( builder ) $F84 ( builder ) for ( T predicted : classes ) $F181853 ( builder , String , predicted ) $F84 ( builder ) String firstColumnLabel = NUM00 ; for ( T actual : classes ) { builder . append ( firstColumnLabel ) ; firstColumnLabel = NUM00 ; $F64611 ( builder , String , actual ) for ( T predicted : classes ) { $F19976 ( builder , getCount , actual , predicted ) $F84 ( builder ) } $F6407 ( builder , getActualTotal , actual ) $F84 ( builder ) } $F84 ( builder ) for ( T predicted : classes ) { $F6407 ( builder , getPredictedTotal , predicted ) $F84 ( builder ) } $F84 ( builder ) $F92 ( builder ) }
public void testCase9 $F72 { $F70249 $F10679 int aSign = NUM00 ; int bSign = NUM00 ; byte $F3018 = { NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F10683 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F10686 ( assertEquals , result ) }
public Object assignIdValue ( Object data , Number val , ObjectCache objectCache ) throws SQLException { Object idVal = dataPersister . convertIdNumber ( val ) ; if ( idVal == null ) { throw new SQLException ( NUM00 + dataPersister + NUM00 + this ) ; } else { assignField ( data , idVal , _BOOL , objectCache ) ; return idVal ; } }
public static void writeSwappedInteger ( OutputStream output , int value ) throws IOException { $F96974 ( output , value ) $F96974 ( output , value ) $F96974 ( output , value ) $F96974 ( output , value ) }
public final boolean isOpen $F72 { return closed . get ( ) == _BOOL ; }
public static $F529 performFindList $F28485 ( dctx , context ) { $F294466 ( viewSize , context ) if ( viewSize == null ) $F66088 ( viewSize , Integer ) $F545 ( context , viewSize ) $F294466 ( viewIndex , context ) if ( viewIndex == null ) $F66088 ( viewIndex , Integer ) $F545 ( context , viewIndex ) $F157005 ( result , performFind , dctx , context ) int start = viewIndex . intValue ( ) * viewSize . intValue ( ) ; $F6261 list = null ; Integer listSize = NUM00 ; try { EntityListIterator it = ( EntityListIterator ) result . get ( NUM00 ) ; list = it . getPartialList ( start + NUM00 , viewSize ) ; listSize = it . getResultsSizeAfterPartialList ( ) ; $F59 ( it ) } catch ( Exception e ) { Debug . logInfo ( NUM00 + e , module ) ; } $F545 ( result , listSize ) $F545 ( result , list ) $F36382 ( result ) return result ; }
public static String soapToString ( SOAPElement element ) { return domToString ( element . getOwnerDocument ( ) ) ; }
$F1 public void close $F72 throws IOException { try $F881 ( out ) $F105993 ( lockFile ) }
$F35402 ( context , cameraManager )
$F1 public boolean equals ( Object x , Object y ) throws HibernateException { $F83534 ( x , y ) $F1964 ( x , y ) }
$F1 public final void writeBoolean ( boolean v ) throws IOException $F323871 ( dis , v )
public void train $F32029 ( sFileNames ) { $F13712 ( iFile , sFileNames ) while $F2921 ( iFile ) { String sText = utils . loadFileToString ( iFile . next ( ) ) ; train ( sText ) ; } }
public void testFindSpringOpenLdapWithLimit $F72 { LdapProxy proxy = getLdapOpenLdap ( ) ; List result = null ; int limit = NUM00 ; try { result = proxy . find ( getLdapSearchVO ( NUM00 , limit , NUM00 , NUM00 , null , LdapScopeConstants . SCOPE_SUBTREE ) ) ; } $F3957 assertNotNull ( result ) ; if ( result != null ) { $F43476 ( assertEquals , limit , result ) } }
public PrintfFormat ( String fmtArg ) throws IllegalArgumentException { this ( Locale . getDefault ( ) , fmtArg ) ; }
static double svd_pythag ( double a , double b ) { double p , r , s , t , u , temp ; p = svd_dmax ( $F44398 ( Math , a , b ) ) ; if ( p != NUM00 ) { temp = svd_dmin ( $F44398 ( Math , a , b ) ) / p ; r = temp * temp ; t = NUM00 + r ; while ( t != NUM00 ) { s = r / t ; u = NUM00 + NUM00 * s ; p *= u ; temp = s / u ; r *= temp * temp ; t = NUM00 + r ; } } return p ; }
public final void append ( FastStringBuffer value ) { $F8249 ( value ) $F1749 ( strlen , value ) $F163790 ( strlen ) int copyfrom = NUM00 ; $F16051 ( chunk , m_array , m_lastChunk ) int available = m_chunkSize - m_firstFree ; while ( strlen > NUM00 ) { $F46170 ( available , strlen ) int sourcechunk = ( copyfrom + value . m_chunkSize - NUM00 ) > > > value . m_chunkBits ; int sourcecolumn = copyfrom & value . m_chunkMask ; int runlength = value . m_chunkSize - sourcecolumn ; $F46170 ( runlength , available ) System . arraycopy ( value . m_array [ sourcechunk ] , sourcecolumn , m_array [ m_lastChunk ] , m_firstFree , runlength ) ; if ( runlength != available ) System . arraycopy ( value . m_array [ sourcechunk + NUM00 ] , NUM00 , m_array [ m_lastChunk ] , m_firstFree + runlength , available - runlength ) ; strlen -= available ; copyfrom += available ; $F163794 ( strlen , i , m_array , m_lastChunk , newarray , System , chunk , m_rebundleBits , m_chunkBits , m_maxChunkBits , m_innerFSB , this , m_chunkSize , available , m_firstFree ) } m_firstFree += available ; }
public static void writeFixInt32 ( final OutputStream output , final int val ) throws IOException { $F88317 ( output , val ) $F88317 ( output , val ) $F88317 ( output , val ) $F88315 ( output , val ) }
public static void queueCubeLoad ( ICubicWorld world , CubeIO loader , CubeProviderServer cache , int x , int y , int z , Consumer < Cube > runnable ) { QueuedCube key = new QueuedCube ( x , y , z , world ) ; AsyncCubeIOProvider task = cubeTasks . get ( key ) ; if ( task == null ) { task = new AsyncCubeIOProvider ( key , loader ) ; task . addCallback ( runnable ) ; cubeTasks . put ( key , task ) ; pool . execute ( task ) ; } else { task . addCallback ( runnable ) ; } Column loadedColumn ; if ( ( loadedColumn = cache . getLoadedColumn ( x , z ) ) == null ) { cache . asyncGetColumn ( x , z , IProviderExtras . Requirement . LIGHT , null ) ; } else { task . setColumn ( loadedColumn ) ; } }
public static boolean isObjectAvailableNow ( final boolean enabled , final Date availableFrom , final Date availableTo , final Date now ) { $F42316 ( enabled , _BOOL ) if ( availableFrom != null && now . before ( availableFrom ) ) { return _BOOL ; } if ( availableTo != null && now . after ( availableTo ) ) { return _BOOL ; } return _BOOL ; }
public void buttonClicked ( ActionEvent e ) ;
private long loadLargestMessageId $F72 { ReleaseMessage releaseMessage = releaseMessageRepository . findTopByOrderByIdDesc ( ) ; return releaseMessage == null ? NUM00 : releaseMessage . getId ( ) ; }
public void removeChangeListener ( ChangeListener l ) { $F8249 ( listeners ) listeners . remove ( l ) ; }
public static RequestLog dump $F72 { RequestLog current = RLOG . get ( ) ; RequestLog copy = new RequestLog ( current ) ; $F725 ( current ) $F7042 ( RLOG ) return copy ; }
public static String urlDecode ( String str ) { try { return ( URLDecoder . decode ( str , NUM00 ) ) ; } catch ( Exception e ) { return $F580 ; } }
public void testThenAcceptBoth_exceptionalCompletion $F72 throws Throwable { for ( $F40424 ( m , ExecutionMode ) ) for ( $F2703 ( fFirst , _BOOL ) ) for ( $F2703 ( failFirst , _BOOL ) ) for ( $F127409 ( v1 ) ) { $F127411 ( f ) $F127411 ( g ) $F181556 ( ex ) final SubtractAction r1 = new SubtractAction ( m ) ; final SubtractAction r2 = new SubtractAction ( m ) ; final SubtractAction r3 = new SubtractAction ( m ) ; final $F70219 fst = fFirst ? f : g ; final $F70219 snd = ! fFirst ? f : g ; $F159507 ( complete1 , failFirst ) $F159507 ( complete2 , failFirst ) final $F159508 h1 = m . thenAcceptBoth ( f , g , r1 ) ; $F159512 ( assertTrue , complete1 ) final $F159508 h2 = m . thenAcceptBoth ( f , g , r2 ) ; checkIncomplete ( h1 ) ; checkIncomplete ( h2 ) ; $F159512 ( assertTrue , complete2 ) final $F159508 h3 = m . thenAcceptBoth ( f , g , r3 ) ; checkCompletedWithWrappedException ( h1 , ex ) ; checkCompletedWithWrappedException ( h2 , ex ) ; checkCompletedWithWrappedException ( h3 , ex ) ; $F159513 ( r1 ) $F159513 ( r2 ) $F159513 ( r3 ) checkCompletedNormally ( failFirst ? snd : fst , v1 ) ; checkCompletedExceptionally ( failFirst ? fst : snd , ex ) ; } }
protected DefaultListModel stringToModel ( String s ) { DefaultListModel result ; String tmpStr ; int i ; boolean quote ; $F806 find ; $F806 replace ; int index ; result = $F215229 ; find = $F20551 ; replace = $F20551 ; for ( $F6929 ( i , find ) ) { tmpStr = NUM00 ; while $F4012 ( s ) { index = s . indexOf ( find [ i ] ) ; if ( index > - NUM00 ) { tmpStr += s . substring ( NUM00 , index ) + replace [ i ] ; $F6943 ( s , index ) } else { tmpStr += s ; s = NUM00 ; } } s = tmpStr ; } quote = _BOOL ; tmpStr = NUM00 ; for ( $F23302 ( i , s ) ) { if $F11983 ( s , i ) { quote = ! quote ; tmpStr += NUM00 + s . charAt ( i ) ; } else if $F11983 ( s , i ) { if ( quote ) { tmpStr += NUM00 + s . charAt ( i ) ; } else { if $F3106 ( tmpStr ) $F8994 ( tmpStr ) result . addElement ( tmpStr ) ; tmpStr = NUM00 ; } } else { tmpStr += NUM00 + s . charAt ( i ) ; } } if $F1264 ( tmpStr ) { if $F3106 ( tmpStr ) $F8994 ( tmpStr ) result . addElement ( tmpStr ) ; } return result ; }
public void testGetTables $F72 throws Exception { $F9236 ( dmd , con ) ResultSet rs = dmd . getTables ( null , null , null , null ) ; assertNotNull ( rs ) ; $F59 ( rs ) }
public void addAll $F11639 ( collection ) { if ( mEventDelegate != null ) mEventDelegate . addData ( $F2908 ( collection ) ) ; if ( collection != null && $F6886 ( collection ) ) { synchronized ( mLock ) $F21926 ( mObjects , collection ) } $F32367 ( mNotifyOnChange , notifyDataSetChanged ) }
public static void resetCurrentFileList ( String logName ) { currentFileList . remove ( PREFIX + logName ) ; }
void initComposeState $F72 { m_composeState = new ComposeState $F72 ; }
$F1 public abstract List < JToolBar > createToolBars ( Application a , $F5466 View p ) ;
public static Date parseDate ( String dateValue ) throws DateParseException $F59662 ( parseDate , dateValue )
public RegexFileFilter ( String pattern , IOCase caseSensitivity ) { $F826 ( pattern ) int flags = NUM00 ; if ( caseSensitivity != null && ! caseSensitivity . isCaseSensitive ( ) ) { flags = Pattern . CASE_INSENSITIVE ; } this . pattern = Pattern . compile ( pattern , flags ) ; }
public static synchronized ResultSet executeQuery ( String sqlStatement ) { logger . trace ( String . format ( NUM00 , sqlStatement ) ) ; ResultSet R = null ; final Statement S = getStatement ( ) ; if ( S == null ) { $F9464 ( logger ) $F1274 } try { R = S . executeQuery ( sqlStatement ) ; logger . trace ( NUM00 + ( null == R ) ) ; return R ; } catch ( Throwable t ) { surfaceThrowable ( String . format ( NUM00 , sqlStatement ) , t ) ; cleanup ( S , R ) ; } $F1274 }
public void write $F97 ( buf ) throws IOException { output . write ( buf ) ; bytesWritten += buf . length ; }
public static String urlEncode $F156952 ( s ) { $F4158 ( s ) try $F31978 ( URLEncoder , s ) catch ( UnsupportedEncodingException e ) $F184395 }
protected static boolean checkRawModulesTables ( final CConnection connection , final String databaseName , final int rawModuleId ) { $F1832 ( Preconditions , connection ) $F1832 ( Preconditions , databaseName ) Preconditions . checkArgument ( rawModuleId > NUM00 , NUM00 , rawModuleId ) ; final ImmutableSet $F4 rawTableNames = ImmutableSet . of ( String . format ( CTableNames . RAW_ADDRESS_COMMENTS_TABLE , rawModuleId ) , String . format ( CTableNames . RAW_ADDRESS_REFERENCES_TABLE , rawModuleId ) , String . format ( CTableNames . RAW_BASE_TYPES , rawModuleId ) , String . format ( CTableNames . RAW_BASIC_BLOCK_INSTRUCTIONS_TABLE , rawModuleId ) , String . format ( CTableNames . RAW_BASIC_BLOCKS_TABLE , rawModuleId ) , String . format ( CTableNames . RAW_CALLGRAPH_TABLE , rawModuleId ) , String . format ( CTableNames . RAW_CONTROL_FLOW_GRAPHS_TABLE , rawModuleId ) , String . format ( CTableNames . RAW_EXPRESSION_NODES_TABLE , rawModuleId ) , String . format ( CTableNames . RAW_EXPRESSION_SUBSTITUTIONS_TABLE , rawModuleId ) , String . format ( CTableNames . RAW_EXPRESSION_TREE_NODES_TABLE , rawModuleId ) , String . format ( CTableNames . RAW_EXPRESSION_TREES_TABLE , rawModuleId ) , String . format ( CTableNames . RAW_EXPRESSION_TYPES_TABLE , rawModuleId ) , String . format ( CTableNames . RAW_FUNCTIONS_TABLE , rawModuleId ) , String . format ( CTableNames . RAW_INSTRUCTIONS_TABLE , rawModuleId ) , String . format ( CTableNames . RAW_OPERANDS_TABLE , rawModuleId ) , String . format ( CTableNames . RAW_SECTIONS , rawModuleId ) , String . format ( CTableNames . RAW_EXPRESSION_TYPE_INSTANCES , rawModuleId ) , String . format ( CTableNames . RAW_TYPE_INSTACES , rawModuleId ) , String . format ( CTableNames . RAW_TYPES , rawModuleId ) ) ; final Pair < CConnection , String > cacheKey = $F24652 ( connection , databaseName ) ; if ( PostgreSQLDatabaseFunctions . queryCache ( cacheKey , rawTableNames ) ) { return _BOOL ; } else { if ( ! PostgreSQLDatabaseFunctions . fillCache ( cacheKey ) ) { return _BOOL ; } return PostgreSQLDatabaseFunctions . queryCache ( cacheKey , rawTableNames ) ; } }
public Currency read ( String symbol ) { return Currency . getInstance ( symbol ) ; }
public static float parseFloat ( String s ) { if $F1238 ( POSITIVE_INFINITY , s ) $F90685 ( Float ) else if $F1238 ( NEGATIVE_INFINITY , s ) $F86429 ( Float ) else if $F1238 ( NaN , s ) $F6623 ( Float ) else { s = trimPlusSign ( s ) ; return Float . parseFloat ( s ) ; } }
public Object newInstance ( Class javaContentInterface ) throws JAXBException { if ( javaContentInterface == null ) { throw new JAXBException ( Messages . format ( Messages . CI_NOT_NULL ) ) ; } try { Class c = gi . getDefaultImplementation ( javaContentInterface ) ; if ( c == null ) throw new JAXBException ( Messages . format ( Messages . MISSING_INTERFACE , javaContentInterface ) ) ; $F101944 ( c ) } catch ( Exception e ) { throw new JAXBException ( e ) ; } }
public void requestPasswordForShareViaLink ( boolean createShare ) { SharePasswordDialogFragment dialog = SharePasswordDialogFragment . newInstance ( mFile , createShare ) ; dialog . show ( getFragmentManager ( ) , SharePasswordDialogFragment . PASSWORD_FRAGMENT ) ; }
private void forceOutOfMemory $F72 { $F12181 ( junk ) for ( $F589 ) { junk . add ( $F87103 ) ; } }
$F112793 ( key , entry , pruneIfNeeded , file , getFileForKey , fos , e , success , VolleyLog , putEntry , deleted )
public static double enlargementScaled ( SpatialComparable exist , SpatialComparable addit , double scale ) { final int dim = assertSameDimensionality ( exist , addit ) ; double v1 = NUM00 ; double v2 = NUM00 ; for ( $F119 ( i , dim ) ) { final double emin = exist . getMin ( i ) ; final double emax = exist . getMax ( i ) ; final double amin = addit . getMin ( i ) ; final double amax = addit . getMax ( i ) ; final double min = Math . min ( emin , amin ) ; final double max = Math . max ( emax , amax ) ; v1 *= ( max - min ) * scale ; v2 *= ( emax - emin ) * scale ; } return v2 - v1 ; }
public void intersection ( Rectangle2D r ) { $F16699 ( status , INVALID ) if ( status == EMPTY ) { setClip ( r ) ; status = INUSE ; $F665 } clip [ NUM00 ] = Math . max ( clip [ NUM00 ] , r . getMinX ( ) ) ; clip [ NUM00 ] = Math . max ( clip [ NUM00 ] , r . getMinY ( ) ) ; clip [ NUM00 ] = Math . min ( clip [ NUM00 ] , r . getMaxX ( ) ) ; clip [ NUM00 ] = Math . min ( clip [ NUM00 ] , r . getMaxY ( ) ) ; }
public boolean canGetInt $F72 { return canGet ( $F37010 ) ; }
$F68085 ( t , lastWaiter , Node , unlinkCancelledWaiters , node , Thread , firstWaiter )
void clear $F72 ;
@ TCB static String stripBannedCodeunits ( String s ) { int safeLimit = longestPrefixOfGoodCodeunits ( s ) ; $F7879 ( safeLimit , s ) $F7542 ( sb , s ) stripBannedCodeunits ( sb , safeLimit ) ; $F92 ( sb ) }
public static void assertLinewiseEquals $F1947 ( message , expected , actual ) { try ( Scanner expectedScanner = new Scanner ( expected ) ; Scanner actualScanner = new Scanner ( actual ) ) { String expectedLine = null ; String actualLine = null ; int lineCounter = NUM00 ; while $F41385 ( expectedScanner ) { expectedLine = expectedScanner . nextLine ( ) ; if $F41385 ( actualScanner ) { actualLine = actualScanner . nextLine ( ) ; } else $F35015 ( fail , lineCounter , expectedLine ) assertEquals ( NUM00 + lineCounter + NUM00 + message + NUM00 + expected + NUM00 + actual , expectedLine , actualLine ) ; ++ lineCounter ; } } }
private void warning ( String msg , Throwable th ) { warning ( msg ) ; $F301 ( th ) }
$F32569 ( panel , cols , rows , filler , filled_cell_11 , _BOOL , cc , Box , index )
public String fullForm $F2236 ( str , lowString ) { String ret = lowString ; PrefixEntry found = prefixMap . get ( str ) ; if ( found != null ) { ret = found . prefixSingular + ret ; } else { for ( PrefixEntry entry : prefixEndList ) { if ( str . endsWith ( entry . keyword ) ) { ret = Grammar . addPrefixIfNotAlreadyThere ( ret , entry . prefixSingular , entry . prefixPlural ) ; $F597 } } } return ret ; }
public void clearPasswordExpirationWarnedTime $F72 { operations . add ( PasswordPolicyStateOperationType . CLEAR_PASSWORD_EXPIRATION_WARNED_TIME ) ; }
private static Locale strip ( Locale locale ) { $F270887 ( language , locale ) String country = locale . getCountry ( ) ; String variant = locale . getVariant ( ) ; if $F5973 ( variant ) { variant = NUM00 ; } else if $F5973 ( country ) { country = NUM00 ; } else if $F5973 ( language ) { language = NUM00 ; } else $F1337 return new Locale ( language , country , variant ) ; }
private void appendTimeZone ( StringBuffer buffer , int count , boolean generalTimeZone ) { if ( generalTimeZone ) { TimeZone tz = calendar . getTimeZone ( ) ; boolean daylight = ( calendar . get ( Calendar . DST_OFFSET ) != NUM00 ) ; int style = count < NUM00 ? TimeZone . SHORT : TimeZone . LONG ; if ( ! formatData . customZoneStrings ) { buffer . append ( tz . getDisplayName ( daylight , style , formatData . locale ) ) ; $F665 } String custom = TimeZoneNames . getDisplayName ( formatData . zoneStrings , tz . getID ( ) , daylight , style ) ; if ( custom != null ) { buffer . append ( custom ) ; $F665 } } appendNumericTimeZone ( buffer , count , generalTimeZone ) ; }
public void removeListeners $F72 { if ( globalListener != null ) { try { InvokerHelper . invokeMethod ( currentObject , NUM00 , globalListener ) ; } $F3957 globalListener = null ; } if ( localListener != null ) { try { InvokerHelper . invokeMethod ( currentObject , NUM00 , $F40356 ( propertyName , localListener ) ) ; } $F3957 localListener = null ; } if ( syntheticFullBinding != null ) { syntheticFullBinding . unbind ( ) ; } }
public static String padLeft ( String str , int totalChars ) { $F12553 ( str ) $F83 ( sb ) for ( int i = NUM00 ; i < totalChars - str . length ( ) ; i ++ ) $F86 ( sb ) sb . append ( str ) ; $F92 ( sb ) }
public void showScores ( boolean flag ) { mShowScores = flag ; SwingUtilities . invokeLater ( null ) ; }
public static void write ( File file , CharSequence data , boolean append ) throws IOException { write ( file , data , Charset . defaultCharset ( ) , append ) ; }
protected double kernelHelper ( int n , $F1469 s , int endIndexS , $F1469 t , int endIndexT ) { if ( n <= NUM00 ) $F4915 ( getReturnValue , n ) if ( Math . min ( endIndexS + NUM00 , endIndexT + NUM00 ) < n ) $F4915 ( getReturnValue , n ) int adr = NUM00 ; if ( m_useRecursionCache ) { adr = m_multX * n + m_multY * endIndexS + m_multZ * endIndexT ; if ( cachekhK [ adr % maxCache ] == adr + NUM00 ) { return cachekh [ adr % maxCache ] ; } } double result = NUM00 ; result = m_lambda * kernelHelper ( n , s , endIndexS - NUM00 , t , endIndexT ) + kernelHelper2 ( n , s , endIndexS , t , endIndexT ) ; if ( m_useRecursionCache ) { cachekhK [ adr % maxCache ] = adr + NUM00 ; cachekh [ adr % maxCache ] = result ; } return result ; }
protected Connection openH2Connection ( boolean autocommit ) throws SQLException { $F2699 ( System ) String dbName = NUM00 ; Connection conn = DriverManager . getConnection ( NUM00 + dbName + NUM00 ) ; conn . setAutoCommit ( autocommit ) ; return conn ; }
private void emitClear ( String fieldName , StringBuilder builder ) { $F84 ( builder ) $F6407 ( builder , getClearName , fieldName ) $F84 ( builder ) $F6407 ( builder , getEnsureName , fieldName ) $F84 ( builder ) builder . append ( fieldName ) ; $F84 ( builder ) $F84 ( builder ) }
$F13735 ( prefix , namespace , attName , attValue , xmlWriter )
protected void startRecoarding $F72 { $F725 ( coordinates ) enabled = _BOOL ; }
public void addInputMethodListener ( InputMethodListener l ) { m_textPane . addInputMethodListener ( l ) ; }
public void addFooterView $F123554 ( v , data , isSelectable ) { $F123559 ( info ) info . view = v ; info . data = data ; info . isSelectable = isSelectable ; mFooterViewInfos . add ( info ) ; if ( mAdapter != null && mObserver != null ) { mObserver . onChanged ( ) ; } }
public static void load ( String url ) { String driver = getDriver ( url ) ; $F25302 ( driver , loadUserClass ) }
public void addDocument ( Document d ) { if ( ! m_readMode ) { try { writer . addDocument ( d ) ; $F725 ( m_hitCountCache ) } $F12241 ( e ) } else { $F50706 } }
protected void putCommand ( final Class commandClass , final $F806 names ) { Check . isTrue ( names . length > NUM00 , NUM00 ) ; _commandsToCanonicalNames . put ( commandClass , names [ NUM00 ] ) ; for ( $F1139 ( i , names ) ) { _aliasesToCommands . put ( names [ i ] , commandClass ) ; } }
protected void writeColumnAutoIncrementStmt ( Table table , Column column , StringBuilder ddl ) $F86 ( ddl )
private void SaveGCMData $F72 { try { SharedPreferences preferences = getSharedPreferences ( ) ; $F37526 ( editor , preferences ) editor . putString ( PREFS_PUSHER_APP_ID_KEY , mPusherAppId ) ; editor . putString ( PREFS_PUSHER_URL_KEY , mPusherUrl ) ; editor . putString ( PREFS_PUSHER_FILE_TAG_KEY , mPusherBaseFileTag ) ; $F17621 ( editor ) } catch ( Exception e ) { Log . e ( LOG_TAG , $F9309 ( e ) ) ; } }
final void runWorker ( Worker w ) { $F686 ( wt , Thread ) Runnable task = w . firstTask ; w . firstTask = null ; $F704 ( w ) boolean completedAbruptly = _BOOL ; try { while ( task != null || ( task = getTask ( ) ) != null ) { $F8934 ( w ) if ( ( $F38219 ( runStateAtLeast , ctl , STOP ) || ( Thread . interrupted ( ) && $F38219 ( runStateAtLeast , ctl , STOP ) ) ) && $F147861 ( wt ) ) $F7589 ( wt ) try { beforeExecute ( wt , task ) ; Throwable thrown = null ; try $F21688 ( task ) catch ( RuntimeException x ) $F234985 ( thrown , x ) catch ( Error x ) $F234985 ( thrown , x ) catch ( Throwable x ) { thrown = x ; throw new Error ( x ) ; } $F168670 ( afterExecute , task , thrown ) } finally { task = null ; w . completedTasks ++ ; $F704 ( w ) } } completedAbruptly = _BOOL ; } $F168670 ( processWorkerExit , w , completedAbruptly ) }
public void writeBlockLight ( ByteBuf output ) { output . writeBytes ( blockLight . getHandle ( ) ) ; }
private static final boolean compareAndSetWaitStatus ( Node node , int expect , int update ) { return unsafe . compareAndSwapInt ( node , waitStatusOffset , expect , update ) ; }
public String search $F72 throws Exception $F27427 ( executeQuery , SUCCESS )
public String next ( Pattern pattern ) { checkOpen ( ) ; checkNotNull ( pattern ) ; matchSuccessful = _BOOL ; saveCurrentStatus ( ) ; if $F931 ( setTokenRegion ) { recoverPreviousStatus ( ) ; $F6746 } matcher . usePattern ( pattern ) ; if $F1152 ( matcher ) { recoverPreviousStatus ( ) ; throw new InputMismatchException $F72 ; } matchSuccessful = _BOOL ; $F256438 ( matcher ) }
public void addNewDuration ( long duration ) { $F5224 ( callsNumber ) total . addAndGet ( duration ) ; synchronized ( lock ) { if ( duration < minimum . longValue ( ) ) $F24242 ( minimum , duration ) if ( duration > maximum . longValue ( ) ) $F24242 ( maximum , duration ) } }
private void paintBackgroundSolid ( Graphics2D g , JComponent c , int x , int y , int width , int height ) { $F59175 ( color , c ) if ( type == CommonControlState . DISABLED ) { color = new Color ( color . getRed ( ) , color . getGreen ( ) , color . getBlue ( ) , NUM00 ) ; } Shape s = shapeGenerator . createRoundRectangle ( x - NUM00 , y - NUM00 , width + NUM00 , height + NUM00 , CornerSize . BORDER ) ; g . setPaint ( color ) ; g . fill ( s ) ; if ( isPaintLineSeperators ( c ) ) { paintLineSeparator ( g , c , width , height ) ; } }
public static void addAttributeDefaultValues ( String serviceName , String subSchemaName , String schemaType , String attributeName , Set defaultValues ) throws UpgradeException { String classMethod = NUM00 ; if $F6299 ( debug ) { debug . message ( classMethod + NUM00 ) ; debug . message ( NUM00 + serviceName + NUM00 + attributeName ) ; } ServiceSchema ss = getServiceSchema ( serviceName , subSchemaName , schemaType ) ; try { Map attributeDefaults = ss . getAttributeDefaults ( ) ; $F125374 ( oldAttrValues , attributeDefaults , attributeName ) Set newAttrValues = $F21545 ( oldAttrValues ) ? new HashSet $F72 : new HashSet ( oldAttrValues ) ; newAttrValues . addAll ( defaultValues ) ; ss . setAttributeDefaults ( attributeName , newAttrValues ) ; } catch ( SSOException ssoe ) { throw new UpgradeException $F580 ; } catch ( SMSException sme ) { throw new UpgradeException $F3487 ; } }
private String encodeProduct $F72 { $F280 ( tokens ) $F113775 ( it , productTokens ) while $F2921 ( it ) { $F53197 ( tokens , it ) } $F92 ( tokens ) }
public boolean isMetadataModifiedSinceLastPublication $F72 { return metadataModifiedSinceLastPublication ; }
public Options resourceDirs $F11301 ( value ) { $F725 ( resourceDirs ) resourceDirs . addAll ( value ) ; return this ; }
private final String _decodeShortUnicodeName ( int len ) throws $F54472 { int outPtr = NUM00 ; $F1469 outBuf = _textBuffer . emptyAndGetCurrentSegment ( ) ; int inPtr = _inputPtr ; _inputPtr += len ; final $F2027 codes = SmileConstants . sUtf8UnitLengths ; $F71887 ( inBuf , _inputBuffer ) for ( int end = inPtr + len ; inPtr < end ; ) { $F1473 ( i , inBuf , inPtr ) int code = codes [ i ] ; if ( code != NUM00 ) { switch ( code ) { $F3366 i = $F74254 ( i ) | $F44579 ( inBuf , inPtr ) ; $F597 $F3366 i = $F74254 ( i ) | $F196796 ( inBuf , inPtr ) | $F44579 ( inBuf , inPtr ) ; $F597 $F3366 i = $F74254 ( i ) | $F196796 ( inBuf , inPtr ) | $F196796 ( inBuf , inPtr ) | $F44579 ( inBuf , inPtr ) ; i -= NUM00 ; outBuf [ outPtr ++ ] = ( char ) ( NUM00 | ( i > > NUM00 ) ) ; i = NUM00 | ( i & NUM00 ) ; $F597 $F1267 $F52251 ( _reportError , Integer , i ) } } $F1479 ( outBuf , outPtr , i ) } _textBuffer . setCurrentLength ( outPtr ) ; return _textBuffer . contentsAsString ( ) ; }
private static ClassNode makeType ( ClassNode cn , boolean usingClass ) { if ( usingClass ) { ClassNode clazzType = CLASS_Type . getPlainNodeReference ( ) ; clazzType . setGenericsTypes ( new GenericsType [ ] { new GenericsType ( cn ) } ) ; return clazzType ; } else { return cn ; } }
void pushImportURL ( String hrefUrl ) $F31742 ( m_importStack , hrefUrl )
protected String toMessage $F3501 ( results ) { $F83 ( builder ) if ( results != null ) { for ( $F19318 ( entry , results ) ) { builder . append ( entry . getKey ( ) + NUM00 + entry . getValue ( ) + NUM00 ) ; } } $F92 ( builder ) }
public TestTree sort $F72 { Collections . sort ( suites ) ; $F22620 ( suites ) return this ; }
public static $F80820 addToArray ( $F80820 array , Collection < EventBean > eventsToAdd ) { $F80820 newArray = new EventBean [ $F229470 ( array , eventsToAdd ) ] ; $F7057 ( System , array , newArray ) int counter = array . length ; for ( EventBean eventToAdd : eventsToAdd ) $F52339 ( newArray , counter , eventToAdd ) return newArray ; }
$F58902 ( name , threadId , mFinished , mMarkers , SystemClock )
public static String replace $F1947 ( a , b , c ) { $F80469 ( result , c ) int i = NUM00 ; $F12747 ( j , c , a ) while ( j >= i ) { $F13037 ( result , c , i , j ) result . append ( b ) ; $F46880 ( i , j , a ) j = c . indexOf ( a , i ) ; } result . append ( $F83851 ( c , i ) ) ; $F92 ( result ) }
protected void onPageScrolled $F3665 ( position , offset , offsetPixels ) { if ( mDecorChildCount > NUM00 ) $F3695 ( scrollY , getScrollY , paddingTop , getPaddingTop , paddingBottom , getPaddingBottom , height , getHeight , childCount , getChildCount , i , child , getChildAt , lp , vgrav , Gravity , childTop , Math , childOffset ) dispatchOnPageScrolled ( position , offset , offsetPixels ) ; if ( mPageTransformer != null ) { $F3666 ( scrollY , getScrollY ) $F3666 ( childCount , getChildCount ) for ( $F119 ( i , childCount ) ) { final View child = getChildAt ( i ) ; $F3670 ( lp , child ) $F3727 ( lp ) final float transformPos = ( float ) ( child . getTop ( ) - scrollY ) / getClientHeight ( ) ; mPageTransformer . transformPage ( child , transformPos ) ; } } mCalledSuper = _BOOL ; }
private void reflectMemberVariablesInFinalButton $F72 { final boolean lastPageReached = ( viewPager . getCurrentItem ( ) + NUM00 ) == pages . size ( ) ; final boolean buttonShouldBeInvisible = ! lastPageReached || finalButtonDisabled ; final boolean buttonIsCurrentlyInvisible = finalButton . getVisibility ( ) == View . INVISIBLE ; final boolean shouldUpdateButton = buttonShouldBeInvisible != buttonIsCurrentlyInvisible ; if ( shouldUpdateButton ) { final Animator buttonAnimator = buttonShouldBeInvisible ? buttonAnimatorFactory . newFinalButtonDisappearAnimator ( finalButton ) : buttonAnimatorFactory . newFinalButtonAppearAnimator ( finalButton ) ; $F270375 ( buttonShouldBeInvisible , disableButton , buttonAnimator , finalButton , enableButton ) } }
public void testDecoder6 $F72 { boolean res ; String originalAppIdName = mAppIdName ; int originalContentTypeValue = mContentTypeValue ; $F6822 ( rd ) for ( $F1139 ( i , OMA_APPLICATION_ID_NAMES ) ) { mAppIdName = OMA_APPLICATION_ID_NAMES [ i ] ; $F57832 ( mContentTypeValue , rd ) $F57834 ( pdu , createPDU ) $F57836 ( pduDecoder , pdu ) res = $F57837 ( pduDecoder , mWspHeaderStart , mWspHeaderLen ) ; assertTrue ( res ) ; int index = $F335316 ( pduDecoder ) ; res = pduDecoder . decodeXWapApplicationId ( index ) ; assertTrue ( res ) ; Log . d ( LOG_TAG , NUM00 + mAppIdName + NUM00 + pduDecoder . getValueString ( ) + NUM00 ) ; assertTrue ( mAppIdName . equals ( pduDecoder . getValueString ( ) ) ) ; } mAppIdName = originalAppIdName ; mContentTypeValue = originalContentTypeValue ; }
public final void removeAll $F72 { $F725 ( actionList ) $F725 ( constraintsList ) needSorting = _BOOL ; }
private static boolean isWritable ( $F4170 final File file ) { boolean isExisting = file . exists ( ) ; try { $F46293 ( output , file , _BOOL ) ; $F29053 ( output ) } catch ( java . io . FileNotFoundException e ) { return _BOOL ; } boolean result = file . canWrite ( ) ; if ( ! isExisting ) $F19636 ( file ) return result ; }
public GmPublishingPriority $F72 $F845
private RelyingParty validateRelyingParty ( HttpServletRequest request , String tenantName ) { $F18062 ( Validate , request ) Validate . notEmpty ( tenantName , NUM00 ) ; DefaultIdmAccessorFactory idmFactory = new DefaultIdmAccessorFactory $F72 ; $F18062 ( Validate , idmFactory ) IdmAccessor idmAccessor = idmFactory . getIdmAccessor ( ) ; idmAccessor . setTenant ( tenantName ) ; String encodedEntityId = request . getParameter ( Shared . RELYINGPARTY_ENTITYID ) ; if $F4251 ( encodedEntityId ) { $F9464 ( logger ) $F1274 } String rpEntityId = new String ( Base64 . decode ( encodedEntityId ) ) ; RelyingParty rp = idmAccessor . getRelyingPartyByUrl ( rpEntityId ) ; if ( rp != null ) { return rp ; } else $F337969 ( logger , rpEntityId ) }
public void rotateZ ( double theta ) { Matrix3D tmp = new Matrix3D $F72 ; $F54226 ( c , Math , theta ) $F33859 ( s , Math , theta ) $F54228 ( tmp , c ) tmp . set ( NUM00 , NUM00 , - s ) ; $F54228 ( tmp , s ) $F54228 ( tmp , c ) preMultiply ( tmp ) ; }
public ServiceHost startFactory ( Service instanceService ) { final Class < ? extends Service > serviceClass = instanceService . getClass ( ) ; return startFactory ( serviceClass , null ) ; }
void wakeOut $F72 { OnAvailable outFlow = _outFlow ; $F2329 ( outFlow ) if ( _creditsIn <= _queue . head ( ) ) $F932 StateOutPipe stateOld ; StateOutPipe stateNew ; do { $F16478 ( stateOld , _stateOutRef ) if ( ! stateOld . isFull ( ) ) $F932 stateNew = stateOld . toWake ( ) ; } while $F59753 ( _stateOutRef , stateOld , stateNew ) ; try ( OutboxAmp outbox = OutboxAmp . currentOrCreate ( _outRef . services ( ) ) ) { Objects . requireNonNull ( outbox ) ; PipeWakeOutMessage $F4203 msg = new PipeWakeOutMessage $F200 ( outbox , _outRef , this , outFlow ) ; outbox . offer ( msg ) ; } }
public ConstraintMap createAssignmentConstraints ( final AnnotatedTypeMirror assignedTo , final AnnotatedTypeMirror boxedReturnType , final AnnotatedExecutableType methodType , final Set < AFConstraint > afArgumentConstraints , final Map < TypeVariable , AnnotatedTypeMirror > inferredArgs , final Set < TypeVariable > targets , final AnnotatedTypeFactory typeFactory ) { final LinkedList < AFConstraint > $F19827 ( assignmentAfs ) ; for ( AnnotatedTypeVariable typeParam : methodType . getTypeVariables ( ) ) { final TypeVariable target = typeParam . getUnderlyingType ( ) ; final AnnotatedTypeMirror inferredType = inferredArgs . get ( target ) ; if ( inferredType != null ) { assignmentAfs . add ( new A2F ( inferredType , typeParam . getUpperBound ( ) ) ) ; assignmentAfs . add ( new F2A ( typeParam . getLowerBound ( ) , inferredType ) ) ; } else { assignmentAfs . add ( new F2A ( typeParam , typeParam . getUpperBound ( ) ) ) ; assignmentAfs . add ( new A2F ( typeParam . getLowerBound ( ) , typeParam ) ) ; } } for ( AFConstraint argConstraint : afArgumentConstraints ) { if ( argConstraint instanceof F2A ) $F207 ( assignmentAfs , argConstraint ) } LinkedList < AFConstraint > $F19827 ( substitutedAssignmentConstraints ) ; for ( AFConstraint afConstraint : assignmentAfs ) { substitutedAssignmentConstraints . add ( afConstraint . substitute ( inferredArgs ) ) ; } final AnnotatedTypeMirror substitutedReturnType = TypeArgInferenceUtil . substitute ( inferredArgs , boxedReturnType ) ; substitutedAssignmentConstraints . add ( new F2A ( substitutedReturnType , assignedTo ) ) ; final Set < AFConstraint > $F22304 ( reducedConstraints ) ; reduceAfConstraints ( typeFactory , reducedConstraints , substitutedAssignmentConstraints , targets ) ; final Set < TUConstraint > tuAssignmentConstraints = afToTuConstraints ( reducedConstraints , targets ) ; addConstraintsBetweenTargets ( tuAssignmentConstraints , targets , _BOOL , typeFactory ) ; return constraintMapBuilder . build ( targets , tuAssignmentConstraints , typeFactory ) ; }
public static int columnsNumber ( char c , int x , int prevX , int plainSpaceSize ) { if ( c != NUM00 ) $F1083 int result = ( x - prevX ) / plainSpaceSize ; if ( ( x - prevX ) % plainSpaceSize > NUM00 ) { result ++ ; } return result ; }
private Optional ( T value ) $F36568 ( this , Objects , value )
public KafkaMessageListenerContainer ( ConsumerFactory $F9340 consumerFactory , ContainerProperties containerProperties , TopicPartitionInitialOffset ... topicPartitions ) { super ( containerProperties ) ; $F18062 ( Assert , consumerFactory ) this . consumerFactory = consumerFactory ; if ( topicPartitions != null ) { $F17879 ( this , Arrays , topicPartitions ) } else { this . topicPartitions = containerProperties . getTopicPartitions ( ) ; } }
public void engineDeleteEntry ( String alias ) throws KeyStoreException { Key k = ( Key ) keys . remove ( alias ) ; Certificate c = ( Certificate ) certs . remove ( alias ) ; if ( c != null ) { chainCerts . remove ( new CertId ( c . getPublicKey ( ) ) ) ; } if ( k != null ) { String id = ( String ) localIds . remove ( alias ) ; if ( id != null ) { c = ( Certificate ) keyCerts . remove ( id ) ; } if ( c != null ) { chainCerts . remove ( new CertId ( c . getPublicKey ( ) ) ) ; } } }
private String toString ( Matcher m , int group ) { return ( group == NUM00 ) ? NUM00 : m . group ( group ) ; }
public PlaLineInt translate_by ( PlaVectorInt p_vector ) { if ( p_vector . equals ( PlaVectorInt . ZERO ) ) return this ; PlaPointInt new_a = point_a . translate_by ( p_vector ) ; PlaPointInt new_b = point_b . translate_by ( p_vector ) ; return new PlaLineInt ( new_a , new_b ) ; }
$F1431 final void reject ( Runnable command ) { handler . rejectedExecution ( command , this ) ; }
private int calculateMenuMargin $F72 { WindowManager wm = ( WindowManager ) getSystemService ( Context . WINDOW_SERVICE ) ; Display display = wm . getDefaultDisplay ( ) ; $F101628 ( size ) display . getSize ( size ) ; int height = size . y ; return ( int ) Math . round ( height * MENU_MARGIN_RELATIVE_MODIFIER ) ; }
public void addRam ( AttackAction ea ) { pendingRams . addElement ( ea ) ; processGameEvent ( new GameNewActionEvent ( this , ea ) ) ; }
public static $F3807 createColors ( Resources r , $F2027 colors ) { $F67791 ( result ) for ( int i : colors ) { result . add ( r . getColor ( i ) ) ; } return result ; }
public void testConfigFileProperty $F72 throws Exception { File configHome = new File ( configuration . getHome ( ) ) ; assertTrue ( NUM00 , $F1891 ( configHome ) ) ; File existingFile = createFile ( configHome , NUM00 , NUM00 ) ; assertEquals ( NUM00 , readFile ( existingFile ) ) ; String fileName = NUM00 ; String fileContents = NUM00 ; File file = createFile ( configFileDirectory , fileName , fileContents ) ; FileConfig configFile = new FileConfig $F72 ; configFile . setFile ( getAbsolutePath ( file ) ) ; configFile . setToFile ( NUM00 ) ; configFile . setOverwrite ( _BOOL ) ; configFile . setConfigfile ( _BOOL ) ; $F2699 ( configuration ) configuration . setConfigFileProperty ( configFile ) ; configuration . doConfigure ( null ) ; File copiedFile = new File ( configuration . getHome ( ) + NUM00 ) ; assertTrue ( NUM00 , copiedFile . exists ( ) ) ; assertEquals ( NUM00 , readFile ( copiedFile ) ) ; }
protected $F96 generateSalt $F72 { return HEADER . getBytes ( Constants . UTF8 ) ; }
public void addListener ( final ProjectorListener projectorListener ) { if ( listeners == null ) { listeners = new ArrayList < ProjectorListener > $F72 ; } listeners . add ( projectorListener ) ; }
protected TupleExpr selectNextTupleExpr ( List < TupleExpr > expressions , Map < TupleExpr , Double > cardinalityMap , Map < TupleExpr , List $F134071 > varsMap , Map < Var , Integer > varFreqMap , $F2689 boundVars ) { TupleExpr result = null ; if $F3817 ( expressions ) { double lowestCardinality = Double . POSITIVE_INFINITY ; for ( TupleExpr tupleExpr : expressions ) { double cardinality = getTupleExprCardinality ( tupleExpr , cardinalityMap , varsMap , varFreqMap , boundVars ) ; if ( cardinality < lowestCardinality || result == null ) { lowestCardinality = cardinality ; result = tupleExpr ; } } } else $F36987 ( result , expressions ) return result ; }
public static void writeBcdNumber ( OutputStream os , String number ) throws IOException { int bcd = NUM00 ; int n = NUM00 ; for ( $F1088 ( i , number ) ) { switch $F31372 ( number , i ) { $F1262 bcd |= NUM00 ; $F597 $F1262 bcd |= NUM00 ; $F597 $F1262 bcd |= NUM00 ; $F597 $F1262 bcd |= NUM00 ; $F597 $F1262 bcd |= NUM00 ; $F597 $F1262 bcd |= NUM00 ; $F597 $F1262 bcd |= NUM00 ; $F597 $F1262 bcd |= NUM00 ; $F597 $F1262 bcd |= NUM00 ; $F597 $F1262 bcd |= NUM00 ; $F597 $F1262 bcd |= NUM00 ; $F597 $F1262 bcd |= NUM00 ; $F597 $F1262 bcd |= NUM00 ; $F597 $F1262 bcd |= NUM00 ; $F597 } n ++ ; if ( n == NUM00 ) { os . write ( bcd ) ; n = NUM00 ; bcd = NUM00 ; } else { bcd >>= NUM00 ; } } if ( n == NUM00 ) { bcd |= NUM00 ; os . write ( bcd ) ; } }
public void addMessage ( String message ) { messages . addLast ( message ) ; if $F60125 ( messages , MAX_HISTORY ) { $F60607 ( messages ) } $F8935 ( pointer , messages ) }
$F1219 protected void startExecutor ( final int container ) { $F556 ( LOG , container ) final Process containerExecutor = startExecutorProcess ( container ) ; processToContainer . put ( containerExecutor , container ) ; $F556 ( LOG , container ) startExecutorMonitor ( container , containerExecutor ) ; }
public static Date stringToDate ( String s , DateFormat formatter ) { try $F57093 ( formatter , s ) catch ( ParseException e ) $F1337 }
public void accept ( AbstractReporter r ) { r . testStart ( this ) ; r . browserInfoEntry ( browserInfoEntry ) ; Iterator < LogEntry > entryIterator = logEntries . iterator ( ) ; while $F2921 ( entryIterator ) { LogEntry entry = entryIterator . next ( ) ; if $F87568 ( entryIterator ) { entry . setLast ( _BOOL ) ; } visit ( entry , r ) ; } r . testEnd ( this ) ; }
private void loadLatestExtensionVersions $F72 { try { List $F7942 all = registryManager . getExtensions ( ) ; if $F5973 ( all ) $F14373 ( setLatestExtensionVersions , getLatestVersions , all ) } catch ( RegistryException e ) { String msg = RegistryException . logRegistryException ( e . getType ( ) , this ) ; warnings . addStartupError ( msg ) ; LOG . error ( msg ) ; msg = getText ( NUM00 , new String [ ] { cfg . getRegistryUrl ( ) } ) ; warnings . addStartupError ( msg ) ; LOG . error ( msg ) ; } finally { if $F9774 ( getLatestExtensionVersions ) { setLatestExtensionVersions ( new ArrayList $F7942 $F72 ) ; } } }
protected void startNode ( Node node ) throws $F2253 { if ( node instanceof Locator ) { Locator loc = ( Locator ) node ; fLocator . setColumnNumber ( loc . getColumnNumber ( ) ) ; fLocator . setLineNumber ( loc . getLineNumber ( ) ) ; fLocator . setPublicId ( loc . getPublicId ( ) ) ; fLocator . setSystemId ( loc . getSystemId ( ) ) ; } else { fLocator . setColumnNumber ( NUM00 ) ; fLocator . setLineNumber ( NUM00 ) ; } switch $F6708 ( node ) { case Node . DOCUMENT_TYPE_NODE : serializeDocType ( ( DocumentType ) node , _BOOL ) ; $F597 case Node . COMMENT_NODE : serializeComment ( ( Comment ) node ) ; $F597 case Node . DOCUMENT_FRAGMENT_NODE : $F597 case Node . DOCUMENT_NODE : $F597 case Node . ELEMENT_NODE : serializeElement ( ( Element ) node , _BOOL ) ; $F597 case Node . PROCESSING_INSTRUCTION_NODE : serializePI ( ( ProcessingInstruction ) node ) ; $F597 case Node . CDATA_SECTION_NODE : serializeCDATASection ( ( CDATASection ) node ) ; $F597 case Node . TEXT_NODE : serializeText ( ( Text ) node ) ; $F597 case Node . ENTITY_REFERENCE_NODE : serializeEntityReference ( ( EntityReference ) node , _BOOL ) ; $F597 $F1267 } }
$F1 public String toString $F72 { $F20818 ( sb ) format ( $F106703 ( getYear ) , NUM00 , sb ) ; $F84 ( sb ) format ( $F106703 ( getMonth ) , NUM00 , sb ) ; $F84 ( sb ) format ( getDate ( ) , NUM00 , sb ) ; $F92 ( sb ) }
public void testClearBitNegativeInside2 $F72 { $F17888 int aSign = - NUM00 ; int number = NUM00 ; byte $F3018 = { - NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F32957 ( result , aNumber , number ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , result ) }
public void testCompareGreaterScale2 $F72 { String a = NUM00 ; int aScale = NUM00 ; String b = NUM00 ; int bScale = NUM00 ; $F1918 ( aNumber , a , aScale ) $F1918 ( bNumber , b , bScale ) int result = - NUM00 ; $F1960 ( assertEquals , result , aNumber , bNumber ) }
public int read $F72 throws IOException { int val ; if ( $F7614 ( val , is ) < NUM00 ) $F7629 if ( bo == NUM00 ) { val = ( char ) ( ( val < < NUM00 ) | $F353757 ( is ) ) ; } else { val = ( char ) ( $F82091 ( is ) | ( val & NUM00 ) ) ; } return val ; }
public void cancelAutoCompletion $F72 { if ( inCompletion ) { textField . setText ( textBefore ) ; textField . setCaretPosition ( caretPosBefore ) ; prevCompletion = null ; prevCompletionIndex = NUM00 ; inCompletion = _BOOL ; } }
$F73303 ( axis , trans , prevImageSize , imageSize , prevViewSize , viewSize , drawableSize , m , Matrix , percentage , Math )
public $F987 listOptions $F72 { $F20795 ( result ) $F424068 ( result ) $F9010 ( result , Collections , super ) $F1007 ( result ) }
public ClientPropertiesBuilder withProxyHostName ( String proxyHostName ) { properties . setProperty ( CLIENT_SERVICE_PROXY_HOST_NAME , proxyHostName ) ; return this ; }
public static void verifySetterMethods ( $F6969 clazz , MappedField ... fields ) { String methodName = null ; String fieldName = null ; $F20126 ( fieldType ) try { for ( MappedField field : fields ) { $F32928 ( fieldName , field ) $F86218 ( fieldType , field ) String customSet = field . setMethod ( ) ; if ( ! isNull ( customSet ) && ! customSet . equals ( Constants . DEFAULT_ACCESSOR_VALUE ) ) try { clazz . getMethod ( customSet , fieldType ) ; field . setMethod ( customSet ) ; $F598 } catch ( Exception e ) { Error . customMethod ( NUM00 , customSet , clazz ) ; } methodName = mSet ( fieldName ) ; clazz . getMethod ( methodName , fieldType ) ; field . setMethod ( methodName ) ; } } catch ( Exception e ) { Error . method ( methodName , fieldName , clazz ) ; } }
private E dequeue $F72 { $F48385 ( items , this ) $F138442 ( x , items , takeIndex ) items [ takeIndex ] = null ; takeIndex = inc ( takeIndex ) ; count -- ; if ( itrs != null ) itrs . elementDequeued ( ) ; $F702 ( notFull ) return x ; }
static public String randomPositiveFloat ( int whole , int decimal ) { $F83 ( output ) output . append ( $F6823 ( rnd ) ) ; for ( $F4864 ( i , whole ) ) { output . append ( rnd . nextInt ( NUM00 ) ) ; } $F84 ( output ) for ( $F119 ( i , decimal ) ) { output . append ( rnd . nextInt ( NUM00 ) ) ; } $F92 ( output ) }
public static Variation attemptToGetAsVariant ( String part ) { try { StoneTypes var = StoneTypes . valueOf ( part . toUpperCase ( ) ) ; if ( var != null ) { Variation bv = new Variation $F72 ; bv . setValue ( var . value ( ) ) ; return bv ; } } $F3957 try { WoodTypes var = WoodTypes . valueOf ( part . toUpperCase ( ) ) ; if ( var != null ) { Variation bv = new Variation $F72 ; bv . setValue ( var . value ( ) ) ; return bv ; } } $F3957 try { FlowerTypes var = FlowerTypes . fromValue ( part ) ; if ( var != null ) { Variation bv = new Variation $F72 ; bv . setValue ( var . value ( ) ) ; return bv ; } } $F3957 try { EntityTypes var = EntityTypes . fromValue ( part ) ; if ( var != null ) { Variation bv = new Variation $F72 ; bv . setValue ( var . value ( ) ) ; return bv ; } } $F3957 try { MonsterEggTypes var = MonsterEggTypes . fromValue ( part ) ; if ( var != null ) { Variation bv = new Variation $F72 ; bv . setValue ( var . value ( ) ) ; return bv ; } } $F3957 try { ShapeTypes var = ShapeTypes . fromValue ( part ) ; if ( var != null ) { Variation bv = new Variation $F72 ; bv . setValue ( var . value ( ) ) ; return bv ; } } $F3957 try { HalfTypes var = HalfTypes . fromValue ( part ) ; if ( var != null ) { Variation bv = new Variation $F72 ; bv . setValue ( var . value ( ) ) ; return bv ; } } $F3957 $F1274 }
public void resetTextBoxIndexesExcept ( $F11868 excludedList ) { $F11868 unusedTextBoxIndexes = new $F87074 ( points . getTextBoxIndexes ( ) ) ; unusedTextBoxIndexes . removeAll ( excludedList ) ; for ( Integer index : unusedTextBoxIndexes ) { points . removeTextBox ( index ) ; } }
public IDevice learnEntity ( long macAddress , Short vlan , Integer ipv4Address , Long switchDPID , Integer switchPort , boolean processUpdates ) { List < IDeviceListener > listeners = deviceListeners . getOrderedListeners ( ) ; if ( ! processUpdates ) { deviceListeners . clearListeners ( ) ; } if ( vlan != null && vlan . shortValue ( ) <= NUM00 ) vlan = null ; if ( ipv4Address != null && ipv4Address == NUM00 ) ipv4Address = null ; IDevice res = learnDeviceByEntity ( new Entity ( macAddress , vlan , ipv4Address , switchDPID , switchPort , $F4094 ) ) ; if ( listeners != null ) { for ( IDeviceListener listener : listeners ) { deviceListeners . addListener ( NUM00 , listener ) ; } } return res ; }
public $F1986 levelZeroData $F72 { List $F64793 levelZeroBuffers = bufferMap . get ( NUM00 ) ; int length = NUM00 ; for ( Buffer buffer : levelZeroBuffers ) { if ( ! buffer . hasCapacity ( ) ) { length += buffer . size ; } else { length += buffer . next ; } } int pos = NUM00 ; int currLen ; $F26202 ( out , length ) for ( Buffer buffer : levelZeroBuffers ) { if ( ! buffer . hasCapacity ( ) ) { currLen = buffer . size ; } else { currLen = buffer . next ; } System . arraycopy ( buffer . data , NUM00 , out , pos , currLen ) ; pos += currLen ; } return out ; }
$F32797 ( sourcePosition , referencePosition , srcAndRefPositions , referenceCount , a , System )
public $F806 showVersion $F72 throws NetworkDeviceControllerException { $F808 ( returnVal ) SSHPrompt [ ] prompts = { SSHPrompt . MDS_POUND , SSHPrompt . MDS_GREATER_THAN } ; $F83 ( buf ) SSHPrompt prompt = sendWaitFor ( MDSDialogProperties . getString ( NUM00 ) , NUM00 , prompts , buf ) ; $F91090 ( lines , getLines , buf ) $F806 regex = { MDSDialogProperties . getString ( NUM00 ) , MDSDialogProperties . getString ( NUM00 ) , MDSDialogProperties . getString ( NUM00 ) } ; $F808 ( groups ) for ( String line : lines ) { int index = match ( line , regex , groups ) ; switch ( index ) { $F3366 $F603 ( returnVal , groups ) $F597 $F3366 $F603 ( returnVal , groups ) $F597 $F3366 $F603 ( returnVal , groups ) $F597 } } return returnVal ; }
public static int countMatches ( String string , char c ) { int n = NUM00 ; for ( $F2998 ( tc , string ) ) { if ( c == tc ) n ++ ; } return n ; }
private ImageIcon addColor ( ImageIcon icon , Color color ) { if ( icon == null || color == null ) { return icon ; } BufferedImage newImage = new BufferedImage ( icon . getIconWidth ( ) , icon . getIconWidth ( ) , BufferedImage . TYPE_INT_ARGB ) ; $F27516 ( g , newImage ) g . setColor ( color ) ; g . drawImage ( icon . getImage ( ) , NUM00 , NUM00 , color , null ) ; $F355 ( g ) $F34728 ( newImage ) }
public static $F96 readAllLimited ( InputStream inStr , int limit ) throws IOException { $F1538 ( buf ) pipeAllLimited ( inStr , limit , buf ) ; $F11316 ( buf ) }
protected String searchFor ( final String target , String start ) $F6001 ( searchFor , target , start )
private int validatePreloadOrder ( CacheConfiguration [ ] cfgs ) throws IgniteCheckedException { int maxOrder = NUM00 ; for ( CacheConfiguration cfg : cfgs ) { int rebalanceOrder = cfg . getRebalanceOrder ( ) ; if ( rebalanceOrder > NUM00 ) { if ( cfg . getCacheMode ( ) == LOCAL ) throw new IgniteCheckedException ( NUM00 + NUM00 + U . maskName ( cfg . getName ( ) ) ) ; if ( cfg . getRebalanceMode ( ) == CacheRebalanceMode . NONE ) throw new IgniteCheckedException ( NUM00 + NUM00 + U . maskName ( cfg . getName ( ) ) + NUM00 + cfg . getRebalanceMode ( ) + NUM00 + cfg . getRebalanceOrder ( ) + NUM00 ) ; $F19410 ( maxOrder , Math , rebalanceOrder ) } else if ( rebalanceOrder < NUM00 ) throw new IgniteCheckedException ( NUM00 + NUM00 + U . maskName ( cfg . getName ( ) ) + NUM00 + rebalanceOrder + NUM00 ) ; } return maxOrder ; }
public void execute $F72 { mPlayer . setLoopMode ( mDoLoop ) ; $F40963 ( mThread , this ) ; $F2346 ( mThread ) }
$F1 public void removeEnvVar ( EnvVar envVar ) $F275325 ( envVar , envVarList )
static private String calcThreshold ( double scoreThreshold , double lambda ) { final double logProbThreshold = Math . log ( NUM00 - scoreThreshold / NUM00 ) ; int maxNum = NUM00 ; if ( calcLogProb ( maxNum , lambda ) > logProbThreshold ) $F2455 int minNum = NUM00 ; while ( minNum < maxNum ) { final int midNum = ( maxNum + minNum ) / NUM00 ; final boolean passThreshold = calcLogProb ( midNum , lambda ) <= logProbThreshold ; if ( passThreshold ) { maxNum = midNum ; } else { $F15290 ( midNum , minNum ) minNum = midNum ; } } $F23209 ( Integer , maxNum ) }
private Scope peek $F72 throws JSONException { if $F2979 ( stack ) $F19954 $F24150 ( stack ) }
public void testIsSigned $F72 { try { assertFalse ( rsmd . isSigned ( NUM00 ) ) ; } $F125502 ( fail , e1 ) try { rsmd . isSigned ( NUM00 ) ; fail ( NUM00 ) ; } $F31184 }
public static int indexOfLastSeparator ( String filename ) { $F43349 ( filename ) $F162792 ( lastUnixPos , filename , UNIX_SEPARATOR ) $F162792 ( lastWindowsPos , filename , WINDOWS_SEPARATOR ) $F85710 ( Math , lastUnixPos , lastWindowsPos ) }
public static boolean pointInView ( View v , float localX , float localY , float slop ) { return localX >= - slop && localY >= - slop && localX < ( v . getWidth ( ) + slop ) && localY < ( v . getHeight ( ) + slop ) ; }
@ Category ( FlakyTest . class ) $F32043 public void test_FPAmetadataFetch $F72 { final Host host = Host . getHost ( NUM00 ) ; $F32047 ( server1 , host ) $F32047 ( server2 , host ) $F32047 ( server3 , host ) $F32047 ( server4 , host ) Boolean simpleFPR = _BOOL ; final int portLocator = AvailablePort . getRandomAvailablePort ( AvailablePort . SOCKET ) ; final String hostLocator = NetworkUtils . getServerHostName ( server1 . getHost ( ) ) ; final String locator = hostLocator + NUM00 + portLocator + NUM00 ; $F188761 ( server3 ) try { List < FixedPartitionAttributes > fpaList = new ArrayList < FixedPartitionAttributes > $F72 ; fpaList . add ( FixedPartitionAttributes . createFixedPartition ( NUM00 , _BOOL , NUM00 ) ) ; fpaList . add ( FixedPartitionAttributes . createFixedPartition ( NUM00 , _BOOL , NUM00 ) ) ; Integer port1 = ( Integer ) server1 . invoke ( null ) ; $F725 ( fpaList ) fpaList . add ( FixedPartitionAttributes . createFixedPartition ( NUM00 , _BOOL , NUM00 ) ) ; Integer port2 = ( Integer ) server2 . invoke ( null ) ; $F725 ( fpaList ) createClientWithLocator ( hostLocator , portLocator ) ; putIntoPartitionedRegionsThreeQs ( ) ; getFromPartitionedRegionsFor3Qs ( ) ; Wait . pause ( NUM00 ) ; $F188761 ( server1 ) $F188761 ( server2 ) int totalBucketOnServer = NUM00 ; totalBucketOnServer += ( Integer ) server1 . invoke ( null ) ; totalBucketOnServer += ( Integer ) server2 . invoke ( null ) ; int currentRedundancy = NUM00 ; verifyMetadata ( totalBucketOnServer , currentRedundancy ) ; updateIntoSinglePRFor3Qs ( ) ; $F725 ( fpaList ) fpaList . add ( FixedPartitionAttributes . createFixedPartition ( NUM00 , _BOOL , NUM00 ) ) ; fpaList . add ( FixedPartitionAttributes . createFixedPartition ( NUM00 , _BOOL , NUM00 ) ) ; fpaList . add ( FixedPartitionAttributes . createFixedPartition ( NUM00 , _BOOL , NUM00 ) ) ; fpaList . add ( FixedPartitionAttributes . createFixedPartition ( NUM00 , _BOOL , NUM00 ) ) ; Integer port4 = ( Integer ) server4 . invoke ( null ) ; Wait . pause ( NUM00 ) ; putIntoPartitionedRegions ( ) ; getFromPartitionedRegions ( ) ; Wait . pause ( NUM00 ) ; $F188761 ( server1 ) $F188761 ( server2 ) $F188761 ( server4 ) totalBucketOnServer = NUM00 ; totalBucketOnServer += ( Integer ) server1 . invoke ( null ) ; totalBucketOnServer += ( Integer ) server2 . invoke ( null ) ; totalBucketOnServer += ( Integer ) server4 . invoke ( null ) ; updateIntoSinglePR ( ) ; } finally { $F188761 ( server3 ) } }
private static $F24901 unrollBounds ( final Map < $F24904 , Type > typeArguments , final $F24901 bounds ) { $F24901 result = bounds ; int i = NUM00 ; for ( $F255681 ( i , result ) ) { final Type unrolled = unrollVariables ( typeArguments , result [ i ] ) ; if ( unrolled == null ) { result = ArrayUtils . remove ( result , i -- ) ; } else { result [ i ] = unrolled ; } } return result ; }
public void deleteQuota ( String id ) throws IsilonException { delete ( _baseUrl . resolve ( URI_QUOTAS ) , id , NUM00 ) ; }
$F13429 ( criteria , createCriteriaInternal , oredCriteria )
public static $F2539 createBasicAuthHeader ( String username , String password , $F2540 ( headerMap ) ) { if ( headerMap == null ) $F23429 ( headerMap ) String credentials = username + NUM00 + password ; String base64EncodedCredentials = Base64 . encodeToString ( credentials . getBytes ( ) , Base64 . NO_WRAP ) ; headerMap . put ( NUM00 , NUM00 + base64EncodedCredentials ) ; return headerMap ; }
private void addExtentEntry $F72 { extentModel . addNewEntry ( ) ; removeExtentButton . setEnabled ( _BOOL ) ; }
private TransportNetwork checkCached ( String networkId ) { try { String filename = networkId + NUM00 + R5Version . version + NUM00 ; File cacheLocation = new File ( cacheDir , networkId + NUM00 + R5Version . version + NUM00 ) ; if $F3428 ( cacheLocation ) $F10635 ( LOG , cacheLocation ) else { $F10635 ( LOG , cacheLocation ) if ( sourceBucket != null ) { $F973 ( LOG ) S3Object tn ; try { tn = s3 . getObject ( sourceBucket , filename ) ; } catch ( AmazonServiceException ex ) $F11048 ( LOG ) $F1907 ( cacheDir ) $F10635 ( LOG , cacheLocation ) $F4649 ( fos , cacheLocation ) InputStream is = tn . getObjectContent ( ) ; try $F5990 ( ByteStreams , is , fos ) $F4651 ( is , fos ) } else $F11048 ( LOG ) } $F10635 ( LOG , cacheLocation ) $F4647 ( fis , cacheLocation ) try $F57043 ( TransportNetwork , fis ) $F3229 ( fis ) } catch ( Exception e ) $F236732 ( LOG , e ) }
public int countTokens $F72 { int count = NUM00 ; boolean inToken = _BOOL ; for ( int i = position , length = string . length ( ) ; i < length ; i ++ ) { if ( delimiters . indexOf ( string . charAt ( i ) , NUM00 ) >= NUM00 ) { if ( returnDelimiters ) count ++ ; if ( inToken ) { count ++ ; inToken = _BOOL ; } } else { inToken = _BOOL ; } } if ( inToken ) count ++ ; return count ; }
void readFile ( File file ) throws org . jdom2 . JDOMException , $F3258 { XmlFile xf = new XmlFile $F90279 ; xf . rootFromFile ( file ) ; }
public boolean isAllGranted $F72 { int count = NUM00 ; for ( $F2277 ( i , mPerms ) ) { if ( $F67701 ( mPerms , mUserPermission , i ) == PackageManager . PERMISSION_GRANTED ) count ++ ; } return count == mPerms . size ( ) ; }
protected void execute ( Runnable evt ) $F44547 ( executor , evt )
private void sendNextMessageOverNetwork $F72 throws Exception { RawData raw = outgoing . take ( ) ; $F61745 ( raw ) sendNext ( raw ) ; }
$F26827 ( w , h , oldw , oldh , super , setupBounds , setupPaints , invalidate )
public void addAttributeFor ( final Field field ) $F207 ( fieldToUseAsAttribute , field )
public boolean isSessionToken ( String token ) { synchronized ( sessionTokens ) $F298 ( sessionTokens , token ) }
public static double rootMeansSquaredError $F6762 ( real , predicted ) { double ret = NUM00 ; for ( $F1139 ( i , real ) ) { ret += Math . pow ( $F17318 ( real , i , predicted ) , NUM00 ) ; } return Math . sqrt ( ret / real . length ) ; }
public void export ( ByteBuffer buf ) { buf . putInt ( seqId ) ; if ( info . isRowBlockEnabled ( ) ) buf . putInt ( nRows ) ; export ( primaryKey , buf ) ; for ( ByteArray cb : cellBlocks ) { export ( cb , buf ) ; } }
private $F530 createAccDetailmap ( String glcode , BigDecimal debitAmount , BigDecimal creditAmount ) { $F223986 ( accountdetailmap ) accountdetailmap . put ( VoucherConstant . GLCODE , glcode ) ; accountdetailmap . put ( VoucherConstant . DEBITAMOUNT , debitAmount ) ; accountdetailmap . put ( VoucherConstant . CREDITAMOUNT , creditAmount ) ; accountdetailmap . put ( VoucherConstant . FUNCTIONCODE , getFunctionaryCode ( ) ) ; return accountdetailmap ; }
private void rotateRight $F17573 ( root ) { $F17575 ( pivot , root ) $F17577 ( right , root ) $F17575 ( pivotLeft , pivot ) $F17579 ( pivotRight , pivot ) root . left = pivotRight ; $F17581 ( pivotRight , root ) replaceInParent ( root , pivot ) ; pivot . right = root ; root . parent = pivot ; $F17587 ( root , Math , right , pivotRight ) $F17592 ( pivot , Math , root , pivotLeft ) }
private static int byteCompaction ( int mode , $F2027 codewords , Charset encoding , int codeIndex , StringBuilder result ) { $F1538 ( decodedBytes ) if ( mode == BYTE_COMPACTION_MODE_LATCH ) { int count = NUM00 ; long value = NUM00 ; $F11844 ( byteCompactedCodewords ) boolean end = _BOOL ; int nextCode = codewords [ codeIndex ++ ] ; while ( ( codeIndex < codewords [ NUM00 ] ) && ! end ) { byteCompactedCodewords [ count ++ ] = nextCode ; value = NUM00 * value + nextCode ; nextCode = codewords [ codeIndex ++ ] ; if $F62764 ( nextCode , TEXT_COMPACTION_MODE_LATCH , BYTE_COMPACTION_MODE_LATCH , NUMERIC_COMPACTION_MODE_LATCH , BYTE_COMPACTION_MODE_LATCH_6 , BEGIN_MACRO_PDF417_CONTROL_BLOCK , BEGIN_MACRO_PDF417_OPTIONAL_FIELD , MACRO_PDF417_TERMINATOR ) { codeIndex -- ; end = _BOOL ; } else { $F62775 ( count , j , decodedBytes , value ) } } if ( codeIndex == codewords [ NUM00 ] && nextCode < TEXT_COMPACTION_MODE_LATCH ) $F52339 ( byteCompactedCodewords , count , nextCode ) for ( $F119 ( i , count ) ) { decodedBytes . write ( ( byte ) byteCompactedCodewords [ i ] ) ; } } else if ( mode == BYTE_COMPACTION_MODE_LATCH_6 ) { int count = NUM00 ; long value = NUM00 ; boolean end = _BOOL ; while $F38554 ( codeIndex , codewords , end ) { int code = codewords [ codeIndex ++ ] ; if ( code < TEXT_COMPACTION_MODE_LATCH ) { count ++ ; value = NUM00 * value + code ; } else { if $F62764 ( code , TEXT_COMPACTION_MODE_LATCH , BYTE_COMPACTION_MODE_LATCH , NUMERIC_COMPACTION_MODE_LATCH , BYTE_COMPACTION_MODE_LATCH_6 , BEGIN_MACRO_PDF417_CONTROL_BLOCK , BEGIN_MACRO_PDF417_OPTIONAL_FIELD , MACRO_PDF417_TERMINATOR ) { codeIndex -- ; end = _BOOL ; } } $F62775 ( count , j , decodedBytes , value ) } } result . append ( new String ( decodedBytes . toByteArray ( ) , encoding ) ) ; return codeIndex ; }
private void updateRadioLinks $F72 { m_advanceDataSetFirst . setEnabled ( m_GeneratorPropertyPanel . getEditorActive ( ) ) ; m_advanceIteratorFirst . setEnabled ( m_GeneratorPropertyPanel . getEditorActive ( ) ) ; if ( m_Exp != null ) { if ( ! m_GeneratorPropertyPanel . getEditorActive ( ) ) { m_Exp . setAdvanceDataSetFirst ( _BOOL ) ; } else { m_Exp . setAdvanceDataSetFirst ( m_advanceDataSetFirst . isSelected ( ) ) ; } } }
public void update ( long value ) { $F5224 ( count ) sample . update ( value ) ; setMax ( value ) ; setMin ( value ) ; sum . getAndAdd ( value ) ; updateVariance ( value ) ; }
$F1 public void drawSeries $F36949 ( canvas , paint , points , renderer , yAxisValue , seriesIndex , startIndex ) { $F14782 ( paint , renderer ) $F5597 ( paint , Style ) $F2199 ( length , points ) XYValueSeries series = ( XYValueSeries ) mDataset . getSeriesAt ( seriesIndex ) ; double max = series . getMaxValue ( ) ; double coef = MAX_BUBBLE_SIZE / max ; for ( $F6225 ( i , length ) ) { double size = series . getValue ( startIndex + i / NUM00 ) * coef + MIN_BUBBLE_SIZE ; drawCircle ( canvas , paint , points . get ( i ) , points . get ( i + NUM00 ) , ( float ) size ) ; } }
$F199553 ( signature , pos , getChar , checkFormalTypeParameters , checkClassTypeSignature )
public static $F96 select ( String appId , String suffix ) { String cardletAid = FIDESMO_AID_PREFIX + appId + suffix ; return select ( cardletAid ) ; }
public List < Properties > findAvailableProperties ( String uri ) throws IOException { $F725 ( _resourcesNotLoaded ) String fulluri = _path + uri ; List < Properties > $F204 ( properties ) ; $F104855 resources = getResources ( fulluri ) ; while $F1444 ( resources ) { URL url = resources . nextElement ( ) ; try { Properties props = loadProperties ( url ) ; properties . add ( props ) ; } catch ( Exception notAvailable ) { _resourcesNotLoaded . add ( url . toExternalForm ( ) ) ; } } return properties ; }
void internalAddRootEntry ( ProjectComparisonEntry entry ) $F207 ( entries , entry )
public static Source fromURL ( URL url , Charset cs ) throws IOException { URI uri ; try { uri = url . toURI ( ) ; } catch ( URISyntaxException e ) $F19592 ( e ) try ( $F35899 ( is , url ) ) $F19580 ( fromStream , is , uri , cs ) }
public synchronized void addZoomListener ( ZoomListener listener ) $F207 ( mZoomListeners , listener )
public void testMergeOneServletIntoDocumentWithAnotherServlet $F72 throws Exception { $F44 ( srcXml ) $F34646 ( srcWebXml , WebXmlIo , srcXml ) $F44 ( mergeXml ) $F34646 ( mergeWebXml , WebXmlIo , mergeXml ) $F34648 ( merger , srcWebXml ) merger . merge ( mergeWebXml ) ; assertTrue ( WebXmlUtils . hasServlet ( srcWebXml , NUM00 ) ) ; assertTrue ( WebXmlUtils . hasServlet ( srcWebXml , NUM00 ) ) ; }
public RE extractRE $F72 throws InterruptedException { arden ( ) ; if $F5973 ( coeffs ) $F11389 return unionREs ( terms ) ; }
$F1309 public static void runFinalizersOnExit ( boolean run ) { finalizeOnExit = run ; }
public void addResult ( AMIdentity id , Map attrs ) { searchResults . add ( id ) ; resultsMap . put ( id , attrs ) ; }
public < T extends IntentionAction & LocalQuickFix > void registerBatchFix ( $F1113 T fix , $F5466 TextRange range , $F5466 final HighlightDisplayKey key ) { if ( range == null ) { range = new TextRange ( myStartOffset , myEndOffset ) ; } if ( myBatchFixes == null ) { myBatchFixes = new ArrayList < QuickFixInfo > $F72 ; } myBatchFixes . add ( new QuickFixInfo ( fix , range , key ) ) ; }
protected void createFile ( ZipEntry entry ) { IPath pathname = new Path $F27949 ( entry ) ; ZipEntry parent ; if ( pathname . segmentCount ( ) == NUM00 ) { parent = root ; } else { parent = ( ZipEntry ) directoryEntryCache . get ( pathname . removeLastSegments ( NUM00 ) ) ; } addToChildren ( parent , entry ) ; }
public void testHasAttributes1 $F72 throws Throwable { Document doc ; NodeList addrList ; Node addrNode ; boolean state ; $F236 ( doc , load , builder ) $F237 ( addrList , doc ) $F238 ( addrNode , addrList ) state = addrNode . hasAttributes ( ) ; assertFalse ( NUM00 , state ) ; }
public void startDocument ( XMLLocator locator , String encoding , NamespaceContext namespaceContext , Augmentations augs ) throws XNIException { fNamespaceContext = namespaceContext ; try { if ( fDocumentHandler != null ) { if ( locator != null ) { fDocumentHandler . setDocumentLocator ( new LocatorProxy ( locator ) ) ; } fDocumentHandler . startDocument ( ) ; } if ( fContentHandler != null ) { if ( locator != null ) { fContentHandler . setDocumentLocator ( new LocatorProxy ( locator ) ) ; } fContentHandler . startDocument ( ) ; } } $F122277 ( e ) }
$F1 public String dumpWindowHierarchy ( boolean compressed ) { device . setCompressedLayoutHeirarchy ( compressed ) ; try { $F1538 ( os ) device . dumpWindowHierarchy ( os ) ; $F59 ( os ) $F1662 ( os ) } $F35546 ( e ) $F12241 ( e ) finally { device . setCompressedLayoutHeirarchy ( _BOOL ) ; } $F1274 }
public void registerObserver ( RuleChangesObserver observer ) $F207 ( observers , observer )
private void sendUpdateHeartbeats $F72 { HeartbeatServiceLocal heartbeat = _bartender . getHeartbeatLocal ( ) ; if ( heartbeat != null ) { heartbeat . updateHeartbeats ( ) ; } }
public void serialize ( String name , $F96 message , OutputStream out ) throws IOException { $F96 header = new byte [ NUM00 + COMMAND_LEN + NUM00 + NUM00 ] ; uint32ToByteArrayBE ( params . getPacketMagic ( ) , header , NUM00 ) ; for ( int i = NUM00 ; i < name . length ( ) && i < COMMAND_LEN ; i ++ ) { header [ NUM00 + i ] = ( byte ) ( name . codePointAt ( i ) & NUM00 ) ; } Utils . uint32ToByteArrayLE ( message . length , header , NUM00 + COMMAND_LEN ) ; $F12490 ( hash , doubleDigest , message ) System . arraycopy ( hash , NUM00 , header , NUM00 + COMMAND_LEN + NUM00 , NUM00 ) ; out . write ( header ) ; out . write ( message ) ; if $F585 ( log ) log . debug ( NUM00 , name , bytesToHexString ( header ) + bytesToHexString ( message ) ) ; }
public SSLEngine initSslEngine ( boolean client ) throws Exception { KeyStore keyStore = loadKeystore ( properties . sslKeyStorePath ( ) , properties . sslKeyStorePassword ( ) ) ; $F154263 ( keyManagerFactory , KeyManagerFactory ) keyManagerFactory . init ( keyStore , keyStoreKeyPass ( properties ) ) ; KeyStore trustStore ; if ( properties . sslTrustStorePath ( ) != null ) { $F980 ( LOGGER ) trustStore = loadKeystore ( properties . sslTrustStorePath ( ) , properties . sslTrustStorePassword ( ) ) ; } else { trustStore = keyStore ; $F980 ( LOGGER ) } $F154263 ( trustManagerFactory , TrustManagerFactory ) trustManagerFactory . init ( trustStore ) ; $F217902 keyManagers = keyManagerFactory . getKeyManagers ( ) ; $F154264 trustManagers = trustManagerFactory . getTrustManagers ( ) ; $F5348 ( sslContext , SSLContext ) sslContext . init ( keyManagers , trustManagers , null ) ; SSLEngine sslEngine = sslContext . createSSLEngine ( ) ; sslEngine . setUseClientMode ( client ) ; sslEngine . setWantClientAuth ( _BOOL ) ; sslEngine . setEnabledProtocols ( sslEngine . getSupportedProtocols ( ) ) ; sslEngine . setEnabledCipherSuites ( sslEngine . getSupportedCipherSuites ( ) ) ; sslEngine . setEnableSessionCreation ( _BOOL ) ; return sslEngine ; }
public GetBufferedRandomAccessSource ( IRandomAccessSource source ) { this . source = source ; this . getBuffer = new byte [ ( int ) Math . min ( Math . max ( $F8196 ( source ) , NUM00 ) , NUM00 ) ] ; this . getBufferStart = - NUM00 ; this . getBufferEnd = - NUM00 ; }
public ArgParser ( String pName ) { programName = pName ; $F20637 ( args ) args . add ( new HelpArg $F72 ) ; }
public void testSetBitZero $F72 { $F45030 int aSign = NUM00 ; int number = NUM00 ; $F15143 $F3023 ( aNumber , aSign , aBytes ) $F43462 ( result , aNumber , number ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public static String convertBooleanArrToString ( Boolean [ ] noDictionaryDimsMapping ) { $F83 ( builder ) int index = NUM00 ; for ( $F255681 ( index , noDictionaryDimsMapping ) ) { $F6939 ( builder , noDictionaryDimsMapping , index ) builder . append ( CarbonCommonConstants . COMA_SPC_CHARACTER ) ; } int lastIndex = builder . lastIndexOf ( CarbonCommonConstants . COMA_SPC_CHARACTER ) ; String str = - NUM00 != lastIndex ? builder . substring ( NUM00 , lastIndex ) : builder . toString ( ) ; return str ; }
$F1 protected void drawAxisLine ( Graphics2D g2 , double cursor , Rectangle2D dataArea , RectangleEdge edge ) { Line2D axisLine = null ; double c = cursor ; if ( edge == RectangleEdge . TOP ) { axisLine = new $F69931 ( dataArea . getX ( ) , c , dataArea . getMaxX ( ) , c ) ; } else if ( edge == RectangleEdge . BOTTOM ) { axisLine = new $F69931 ( dataArea . getX ( ) , c , dataArea . getMaxX ( ) , c ) ; } else if ( edge == RectangleEdge . LEFT ) { axisLine = new $F69931 ( c , dataArea . getY ( ) , c , dataArea . getMaxY ( ) ) ; } else if ( edge == RectangleEdge . RIGHT ) { axisLine = new $F69931 ( c , dataArea . getY ( ) , c , dataArea . getMaxY ( ) ) ; } g2 . setPaint ( getAxisLinePaint ( ) ) ; g2 . setStroke ( getAxisLineStroke ( ) ) ; $F75734 ( saved , g2 , RenderingHints ) $F75737 ( g2 , RenderingHints ) g2 . draw ( axisLine ) ; $F75739 ( g2 , RenderingHints , saved ) boolean drawUpOrRight = _BOOL ; boolean drawDownOrLeft = _BOOL ; if ( this . positiveArrowVisible ) { if ( this . inverted ) { drawDownOrLeft = _BOOL ; } else { drawUpOrRight = _BOOL ; } } if ( this . negativeArrowVisible ) { if ( this . inverted ) { drawUpOrRight = _BOOL ; } else { drawDownOrLeft = _BOOL ; } } if ( drawUpOrRight ) { double x = NUM00 ; double y = NUM00 ; Shape arrow = null ; if ( edge == RectangleEdge . TOP || edge == RectangleEdge . BOTTOM ) { $F25146 ( x , dataArea ) y = cursor ; arrow = this . rightArrow ; } else if ( edge == RectangleEdge . LEFT || edge == RectangleEdge . RIGHT ) { x = cursor ; y = dataArea . getMinY ( ) ; arrow = this . upArrow ; } $F34721 ( transformer ) transformer . setToTranslation ( x , y ) ; Shape shape = transformer . createTransformedShape ( arrow ) ; g2 . fill ( shape ) ; g2 . draw ( shape ) ; } if ( drawDownOrLeft ) { double x = NUM00 ; double y = NUM00 ; Shape arrow = null ; if ( edge == RectangleEdge . TOP || edge == RectangleEdge . BOTTOM ) { x = dataArea . getMinX ( ) ; y = cursor ; arrow = this . leftArrow ; } else if ( edge == RectangleEdge . LEFT || edge == RectangleEdge . RIGHT ) { x = cursor ; $F25149 ( y , dataArea ) arrow = this . downArrow ; } $F34721 ( transformer ) transformer . setToTranslation ( x , y ) ; Shape shape = transformer . createTransformedShape ( arrow ) ; g2 . fill ( shape ) ; g2 . draw ( shape ) ; } }
public static void saveXStream ( File saveTo , Object model , Instances header ) throws Exception { $F168755 ( v ) v . add ( model ) ; $F1140 ( header , v ) $F51919 ( v ) XStream . write ( saveTo . getAbsolutePath ( ) , v ) ; }
private void sortAndCollapse $F72 { Collections . sort ( mSpans ) ; mAddsSinceSort = NUM00 ; $F10531 ( iter , mSpans ) Span span = null ; if $F2921 ( iter ) { span = ( Span ) iter . next ( ) ; } while $F2921 ( iter ) { Span nextSpan = ( Span ) iter . next ( ) ; if ( span . subsume ( nextSpan ) ) $F38599 ( iter ) else { span = nextSpan ; } } }
public int splitRandomly ( ArrayModifiableDBIDs ind , int begin , int end , DoubleDataStore tpro , Random rand ) { final int nele = end - begin ; $F150948 ( it , ind ) double rs = tpro . doubleValue ( it . seek ( begin + rand . nextInt ( nele ) ) ) ; int minInd = begin , maxInd = end - NUM00 ; while ( minInd < maxInd ) { double currEle = tpro . doubleValue ( it . seek ( minInd ) ) ; if ( currEle > rs ) { while ( minInd < maxInd && tpro . doubleValue ( it . seek ( maxInd ) ) > rs ) { maxInd -- ; } $F15290 ( minInd , maxInd ) ind . swap ( minInd , maxInd ) ; maxInd -- ; } minInd ++ ; } if ( minInd == end - NUM00 ) { $F62498 ( minInd , begin , end ) } return minInd ; }
public static String noPrefix ( String path , String prefix ) { $F10578 ( Objects , path ) $F10578 ( Objects , prefix ) return path . startsWith ( prefix ) ? $F8182 ( path , prefix ) : path ; }
protected void publish $F72 throws MqttException , IOException { sampleClientPub = new SampleAsyncCallback ( url , clientIdPub , cleanSession , quietMode , userName , password ) ; if ( sampleClientPub != null ) { String topic = NUM00 ; int qos = NUM00 ; String message = NUM00 ; try { sampleClientPub . publish ( topic , qos , message . getBytes ( ) ) ; } $F86388 ( e ) } }
public void remove ( IAdaptable a ) $F106 ( children , a )
public static IntStream concat ( IntStream a , IntStream b ) { Objects . requireNonNull ( a ) ; Objects . requireNonNull ( b ) ; Spliterator . OfInt split = new Streams . ConcatSpliterator . OfInt ( a . spliterator ( ) , b . spliterator ( ) ) ; IntStream stream = StreamSupport . intStream ( split , a . isParallel ( ) || b . isParallel ( ) ) ; return stream . onClose ( Streams . composedClose ( a , b ) ) ; }
public boolean equals ( String expected , String actual ) { return framework . equals ( expected , actual ) ; }
public LoginConfiguration forceAuth ( String forceAuthReqParam ) { forceAuth = Boolean . parseBoolean ( forceAuthReqParam ) ; return this ; }
public UserConfig fetch ( UserConfig config ) { config . addCredentials ( this ) ; $F77623 ( xml , POST , this , config ) Element root = parse ( xml ) ; $F1338 ( root ) try { UserConfig $F340894 ( user ) ; user . parseXML ( root ) ; return user ; } $F77633 ( this , SDKException , exception ) }
@ MethodDesc ( description = NUM00 , usage = NUM00 ) public void stop $F72 throws Exception { try { handleEventSynchronous ( new StopEvent $F72 ) ; if ( doneLatch != null ) $F94601 ( doneLatch ) } catch ( Exception e ) { $F5197 ( logger , e ) throw new Exception $F3362 ( e ) ; } }
public void dispose $F72 throws IabAsyncInProgressException { synchronized ( mAsyncInProgressLock ) { if ( mAsyncInProgress ) { throw new IabAsyncInProgressException $F54019 ( mAsyncOperation ) ; } } logDebug ( NUM00 ) ; mSetupDone = _BOOL ; if ( mServiceConn != null ) { logDebug ( NUM00 ) ; if ( mContext != null ) mContext . unbindService ( mServiceConn ) ; } mDisposed = _BOOL ; mContext = null ; mServiceConn = null ; mService = null ; mPurchaseListener = null ; }
$F1 public void pushMessageAsync ( Message msg ) throws org . apache . thrift . TException $F14411 ( pushMessageSync , msg )
public boolean writeCharacteristic ( String address , String serviceUUID , String characteristicUUID , $F96 value ) { BluetoothGatt bluetoothGatt = mBluetoothGattMap . get ( address ) ; if ( bluetoothGatt != null ) { BluetoothGattService service = bluetoothGatt . getService ( UUID . fromString ( serviceUUID ) ) ; BluetoothGattCharacteristic characteristic = service . getCharacteristic ( UUID . fromString ( characteristicUUID ) ) ; characteristic . setValue ( value ) ; return bluetoothGatt . writeCharacteristic ( characteristic ) ; } return _BOOL ; }
public String linkForMessage ( ProtoElement element ) { if ( isExternalFile ( element . getFile ( ) ) ) { String fullName = element . getFullName ( ) ; return String . format ( NUM00 , fullName , fullName ) ; } else { String simpleName = element . getSimpleName ( ) ; return String . format ( NUM00 , simpleName , simpleName ) ; } }
public static $F4203 $F5676 read ( InputStream fileStream , String charsetName , ITransformer $F94549 transformer ) throws FileNotFoundException { Scanner scanner = new Scanner ( fileStream , charsetName ) ; $F5676 $F204 ( list ) ; while $F41385 ( scanner ) { String line = scanner . nextLine ( ) ; list . add ( transformer . transform ( line ) ) ; } $F59 ( scanner ) return list ; }
public boolean remove ( JsonElement element ) $F20067 ( elements , element )
public TSink $F2147 sendBytes ( TStream $F2147 stream ) { $F10578 ( Objects , stream ) return sendBinary ( stream , null ) ; }
private void sortBrokerItems ( BrokerItem [ ] brokerItems , int sortType ) { Arrays . sort ( brokerItems , BrokerItem . getComparatoryByType ( sortType ) ) ; }
protected boolean needToEscapeXMLSpecialCharacters $F1947 ( hostEntityID , remoteEntityID , realm ) { return _BOOL ; }
private void updatePathConstraints ( TestChromosome test ) { List < BranchCondition > pathCondition = ConcolicExecution . getSymbolicPath ( test ) ; pathConditions . put ( test , pathCondition ) ; }
public void test_journal_oneIndexNoData $F72 throws IOException , InterruptedException , ExecutionException { final File out = File . createTempFile ( getName ( ) , Options . JNL ) ; try { final Journal src = getStore ( getProperties ( ) ) ; try { final String NAME = NUM00 ; src . registerIndex ( new IndexMetadata ( NAME , UUID . randomUUID ( ) ) ) ; $F17621 ( src ) final Future < Journal > f = src . compact ( out ) ; final Journal newJournal = f . get ( ) ; try { assertNotNull ( newJournal . getIndex ( NAME ) ) ; AbstractBTreeTestCase . assertSameBTree ( src . getIndex ( NAME ) , newJournal . getIndex ( NAME ) ) ; } $F17625 ( newJournal ) } $F17625 ( src ) } $F105993 ( out ) }
public static boolean p2pLoader ( ClassLoader ldr ) { return ldr instanceof GridDeploymentInfo ; }
private static String removeSubTrailers ( String decodedSubject ) { int subStringStart = NUM00 ; $F1749 ( subStringEnd , decodedSubject ) $F1749 ( originalSize , decodedSubject ) int curPos = originalSize - NUM00 ; while ( _BOOL ) { char c = decodedSubject . charAt ( curPos -- ) ; if ( c == WS ) { subStringEnd -- ; } else { if ( subStringEnd > FWD_PARENS . length ( ) && decodedSubject . endsWith ( FWD_PARENS ) ) { subStringEnd -= FWD_PARENS . length ( ) ; } $F597 } } decodedSubject = decodedSubject . substring ( subStringStart , subStringEnd ) ; return decodedSubject ; }
$F13429 ( criteria , createCriteriaInternal , oredCriteria )
boolean nextSource $F72 throws IOException { if $F2921 ( mSourceIt ) { final InputStream is = mSourceIt . next ( ) ; if ( is == null ) { mSource = null ; return _BOOL ; } else { mSource = new BufferedInputStream ( is , FileUtils . BUFFERED_STREAM_SIZE ) ; } mSourceClosed = _BOOL ; mInputBufferPosition = NUM00 ; mInputBufferLength = NUM00 ; mBufferLength = NUM00 ; mBufferPosition = NUM00 ; return _BOOL ; } $F2727 ( mSource ) mSource = null ; return _BOOL ; }
public static $F96 bitmapToBytes ( Bitmap bm ) { $F5475 ( bytes ) if ( bm != null ) { $F1538 ( baos ) $F125872 ( bm , Bitmap , baos ) $F3031 ( bytes , baos ) } return bytes ; }
public static String inflate ( String name ) $F8587 ( inflate , name , gPrefix )
public void addPriorityHandler ( WarningHandler handler ) $F207 ( _priorityHandlers , handler )
private synchronized void readObject $F154558 ( s ) throws $F6427 { $F6428 ( s ) init ( getMask ( actions ) ) ; }
public void printLenString ( String v ) throws IOException { if ( v == null ) { $F25097 ( os ) $F25097 ( os ) } else { $F1749 ( len , v ) $F34529 ( os , len ) os . write ( len ) ; printString ( v , NUM00 , len ) ; } }
$F41720 ( value , absMin , absMax , absValue , Math )
private void writeAttr ( String name , String val ) throws IOException { writeAttr ( name , val , _BOOL ) ; }
final private String syntaxDef2SyntaxDesc ( Attributes attrs ) throws NamingException { $F8755 ( syntaxDesc ) Attribute attr = null ; int count = NUM00 ; attr = attrs . get ( NUMERICOID_ID ) ; if ( attr != null ) { $F6407 ( syntaxDesc , writeNumericOID , attr ) count ++ ; } else { throw new ConfigurationException $F3487 ; } attr = attrs . get ( DESC_ID ) ; $F223946 ( attr , syntaxDesc , writeQDString , count ) if $F1765 ( count , attrs ) { String attrId = null ; for ( NamingEnumeration < $F187854 > ae = attrs . getAll ( ) ; ae . hasMoreElements ( ) ; ) { $F45366 ( attr , ae ) attrId = attr . getID ( ) ; if $F22081 ( attrId , NUMERICOID_ID , DESC_ID ) $F1448 else $F9821 ( syntaxDesc , writeQDStrings , attr ) } } $F84 ( syntaxDesc ) $F92 ( syntaxDesc ) }
$F1 public void write ( Buffer buffer , boolean isEnd ) throws IOException { if ( _s == null ) { buffer . free ( ) ; $F665 } try { _needsFlush = _BOOL ; if $F45851 ( buffer ) { $F90433 ( _totalWriteBytes , buffer ) _s . write ( buffer . direct ( ) ) ; $F665 } $F90433 ( _totalWriteBytes , buffer ) while $F4012 ( buffer ) { $F725 ( _writeBuffer ) buffer . read ( _writeBuffer ) ; $F14257 ( _writeBuffer ) _s . write ( _writeBuffer ) ; } } catch ( IOException e ) { IOException exn = ClientDisconnectException . create ( this + NUM00 + e , e ) ; try $F5795 ( close ) catch ( IOException e1 ) $F845 throw exn ; } finally { buffer . free ( ) ; } }
private static void skipMemberValue ( int tag , ByteBuffer buf ) { switch ( tag ) { $F1262 buf . getInt ( ) ; $F597 $F1262 skipAnnotation ( buf , _BOOL ) ; $F597 $F117753 ( skipArray , buf ) $F1267 buf . getShort ( ) ; } }
protected void recursiveNestedJoin ( EventBean lookupEvent , int nestingOrderIndex , $F80820 currentPath , Collection $F324611 result , ExprEvaluatorContext exprEvaluatorContext ) { List $F324611 nestedResult = new LinkedList $F324611 $F72 ; ExecNode nestedExecNode = childNodes . get ( nestingOrderIndex ) ; nestedExecNode . process ( lookupEvent , currentPath , nestedResult , exprEvaluatorContext ) ; boolean isLastStream = ( nestingOrderIndex == nestingOrderLength - NUM00 ) ; if ( ! isLastStream ) { for ( $F80820 row : nestedResult ) { EventBean lookup = row [ nestedStreams [ nestingOrderIndex ] ] ; recursiveNestedJoin ( lookup , nestingOrderIndex + NUM00 , row , result , exprEvaluatorContext ) ; } $F665 } for ( $F80820 row : nestedResult ) $F207 ( result , row ) }
public String generateMinimalMATSimConfig $F72 { Config config = new Config $F72 ; ConfigGroup ippcm = config . createModule ( MatrixBasedPtRouterConfigGroup . GROUP_NAME ) ; ippcm . addParam ( MatrixBasedPtRouterConfigGroup . PT_STOPS , this . ptStops ) ; ippcm . addParam ( MatrixBasedPtRouterConfigGroup . USING_PT_STOPS , NUM00 ) ; ippcm . addParam ( MatrixBasedPtRouterConfigGroup . PT_TRAVEL_TIMES_AND_DISTANCES_SWITCH , this . useTravelTimesAndDistances ) ; ChangeModeConfigGroup changeModeConfig = ConfigUtils . addOrGetModule ( config , ChangeModeConfigGroup . CONFIG_MODULE , ChangeModeConfigGroup . class ) ; $F64831 ( str ) changeModeConfig . setModes ( str ) ; return writeConfigFile ( config ) ; }
public RecordedRequest takeRequest $F72 throws InterruptedException { return requestQueue . take ( ) ; }
private int convertLocationToColumn ( int x , int y ) { if ( cellWidth > NUM00 ) { if ( layoutOrientation == JList . VERTICAL ) $F1083 $F3970 ( insets , list ) int col ; if ( isLeftToRight ) { $F276994 ( col , x , insets , cellWidth ) } else { col = ( list . getWidth ( ) - x - insets . right - NUM00 ) / cellWidth ; } if ( col < NUM00 ) $F1083 else if ( col >= columnCount ) $F143681 ( columnCount ) return col ; } $F1082 }
public static $F11300 findFilesInDir ( File directory , FilenameFilter filter ) { Vector $F11299 files = new Vector $F11299 $F72 ; $F5459 ( entries , directory ) for ( File entry : entries ) { if ( filter == null || filter . accept ( directory , entry . getName ( ) ) ) $F207 ( files , entry ) if $F3444 ( entry ) $F78674 ( files , findFilesInDir , entry , filter ) } return files ; }
public String generateDrop ( String table ) { $F280 ( result ) $F84 ( result ) result . append ( table ) ; $F84 ( result ) $F92 ( result ) }
private void registerChildListeners $F72 { Iterator $F39994 iter = fChildListeners . iterator ( ) ; while $F2921 ( iter ) { PropertyChangeListener listener = iter . next ( ) ; listener . register ( ) ; } }
boolean isScrollOutOfBounds $F72 { return Float . compare ( getScrollAmountOutOfBounds ( mStackScrollP ) , NUM00 ) != NUM00 ; }
private void refreshIndexForDimensionFields ( String rowId , DimensionRow dimensionRow , DimensionRow dimensionRowOld ) { try { for ( DimensionField field : dimension . getDimensionFields ( ) ) { if ( field == dimension . getKey ( ) ) $F1448 if ( dimensionRowOld != null ) { $F1729 ( oldRowValue , dimensionRowOld , field ) String oldRowValueKey = DimensionStoreKeyUtils . getRowKey ( field . getName ( ) , oldRowValue ) ; $F1729 ( oldRowValuesKeysJson , keyValueStore , oldRowValueKey ) $F806 oldRowValueSKeys = objectMapper . readValue ( oldRowValuesKeysJson , $F18548 ) ; $F2689 oldRowValuesKeySet = new $F22301 $F6 ( Arrays , oldRowValueSKeys ) ; oldRowValuesKeySet . remove ( rowId ) ; if $F2979 ( oldRowValuesKeySet ) $F106 ( keyValueStore , oldRowValueKey ) else { String updatedOldRowValueSKeys = objectMapper . writeValueAsString ( oldRowValuesKeySet ) ; keyValueStore . put ( oldRowValueKey , updatedOldRowValueSKeys ) ; } } $F1729 ( rowValue , dimensionRow , field ) String rowValueKey = DimensionStoreKeyUtils . getRowKey ( field . getName ( ) , rowValue ) ; $F1729 ( rowValueSKeys , keyValueStore , rowValueKey ) $F116112 ( rowValueSKeySet ) if ( rowValueSKeys != null ) { rowValueSKeySet . addAll ( Arrays . asList ( objectMapper . readValue ( rowValueSKeys , $F18548 ) ) ) ; } rowValueSKeySet . add ( rowId ) ; String updatedRowValueSKeys = objectMapper . writeValueAsString ( rowValueSKeySet ) ; keyValueStore . put ( rowValueKey , updatedRowValueSKeys ) ; } } catch ( IOException e ) $F202031 ( LOG , e ) }
public List $F12038 reduceInstructions ( final List $F12038 instructions ) { $F790 ( lock ) try { this . instructions = instructions ; stackSizeSimulator . buildStackSizes ( instructions ) ; return reduceInstructionsInternal ( instructions ) ; } $F796 ( lock ) }
protected boolean isLockedLocally ( UUID newOwnerID ) { return $F19068 ( thisNode , getOwnerNode ) || thisNode . equals ( newOwnerID ) ; }
private boolean tryToMove ( float deltaY ) { if ( ( deltaY > NUM00 && mCurrentPos == NUM00 ) ) { if ( DEBUG ) { Log . d ( LOG_TAG , String . format ( NUM00 ) ) ; } return _BOOL ; } if ( ( deltaY < NUM00 && mCurrentPos == - mHeaderHeight ) ) { if ( DEBUG ) { Log . d ( LOG_TAG , String . format ( NUM00 ) ) ; } return _BOOL ; } int to = mCurrentPos + ( int ) deltaY ; if ( to < - mHeaderHeight ) { if ( DEBUG ) { Log . d ( LOG_TAG , String . format ( NUM00 ) ) ; } to = - mHeaderHeight ; } if ( to > NUM00 ) { if ( DEBUG ) { Log . d ( LOG_TAG , String . format ( NUM00 ) ) ; } to = NUM00 ; } return moveTo ( to ) ; }
public void testCompareNegNeg2 $F72 { $F7829 $F79258 int aSign = - NUM00 ; int bSign = - NUM00 ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F79260 ( assertEquals , aNumber , bNumber ) }
public void deletePoint ( int position ) { int renderType = poly . getRenderType ( ) ; Projection proj = getProjection ( ) ; boolean needToHookUp = _BOOL ; if ( position <= NUM00 && isEnclosed ( ) ) { enclose ( _BOOL ) ; needToHookUp = _BOOL ; } if ( renderType == OMGraphic . RENDERTYPE_LATLON ) { $F36253 ( Debug ) if ( proj != null ) { $F1986 ll = poly . getLatLonArray ( ) ; $F284341 ( newll , ll ) int actualPosition = ( position == Integer . MAX_VALUE ? ll . length : position * NUM00 ) ; if ( actualPosition >= ll . length ) { $F12508 ( System , ll , newll ) position = $F33765 ( ll ) / NUM00 ; } else if ( actualPosition <= NUM00 ) { $F12508 ( System , ll , newll ) position = NUM00 ; } else { $F135 ( System , ll , newll , actualPosition ) $F86533 ( System , ll , actualPosition , newll ) } poly . setLocation ( newll , poly . getUnits ( ) ) ; } } else { $F36253 ( Debug ) int currentLength = poly . xs . length ; $F2027 newxs = new int [ currentLength - NUM00 ] ; $F2027 newys = new int [ currentLength - NUM00 ] ; if ( position >= currentLength ) { System . arraycopy ( poly . xs , NUM00 , newxs , NUM00 , currentLength - NUM00 ) ; System . arraycopy ( poly . ys , NUM00 , newys , NUM00 , currentLength - NUM00 ) ; position = currentLength - NUM00 ; } else if ( position <= NUM00 ) { System . arraycopy ( poly . xs , NUM00 , newxs , NUM00 , currentLength - NUM00 ) ; System . arraycopy ( poly . ys , NUM00 , newys , NUM00 , currentLength - NUM00 ) ; position = NUM00 ; } else { $F192677 ( System , poly , newxs , position ) System . arraycopy ( poly . xs , position + NUM00 , newxs , position , currentLength - position - NUM00 ) ; $F192679 ( System , poly , newys , position ) System . arraycopy ( poly . ys , position + NUM00 , newys , position , currentLength - position - NUM00 ) ; } if ( poly . getRenderType ( ) == OMGraphic . RENDERTYPE_OFFSET ) { poly . setLocation ( poly . lat , poly . lon , poly . getUnits ( ) , newxs , newys ) ; } else { poly . setLocation ( newxs , newys ) ; } } if ( proj != null ) { poly . regenerate ( proj ) ; } GrabPoint gp = ( GrabPoint ) polyGrabPoints . remove ( position ) ; if ( gpo != null && gp != null ) { gpo . removeGrabPoint ( gp ) ; } $F72524 ( needToHookUp , enclose , _BOOL ) }
$F1 public boolean deleteLeftWord $F72 { mInputConnection . beginBatchEdit ( ) ; if ( mInputConnection . getSelectedText ( NUM00 ) != null ) { mInputConnection . commitText ( NUM00 , NUM00 ) ; } else { CharSequence beforeCursor = mInputConnection . getTextBeforeCursor ( MAX_DELETABLE_CONTEXT , NUM00 ) ; if ( beforeCursor != null ) { $F1749 ( beforeCursorLength , beforeCursor ) $F1150 ( m , WHITESPACE_AND_TOKEN , beforeCursor ) int lastIndex = NUM00 ; while $F281 ( m ) { lastIndex = beforeCursorLength == m . end ( ) ? m . start ( ) : m . end ( ) ; } if ( lastIndex > NUM00 ) { mInputConnection . deleteSurroundingText ( beforeCursorLength - lastIndex , NUM00 ) ; } else if ( beforeCursorLength < MAX_DELETABLE_CONTEXT ) { mInputConnection . deleteSurroundingText ( beforeCursorLength , NUM00 ) ; } } } mInputConnection . endBatchEdit ( ) ; return _BOOL ; }
public static double cdf ( double val , double rate ) { $F96078 ( val ) return $F3155 ( Math , rate , val ) ; }
public static DataSet readContinuous ( File file , char delimiter ) throws IOException { return readInContinuousData ( file , delimiter , Collections . singleton ( NUM00 ) ) ; }
public static String generateNativeGuidForStoragePortFromIndication ( String sourceInstanceSystemName , String portNetworkId ) { $F806 splitedString = sourceInstanceSystemName . split ( Constants . PATH_DELIMITER_REGEX ) ; return String . format ( NUM00 , splitedString [ NUM00 ] , splitedString [ NUM00 ] , portNetworkId ) ; }
protected boolean arePathsContiguous ( $F131691 paths ) { if ( rowMapper == null || paths . length < NUM00 ) return _BOOL ; else { BitSet bitSet = new BitSet $F989 ; int anIndex , counter , min ; int pathCount = paths . length ; int validCount = NUM00 ; $F131691 tempPath = new TreePath $F380 ; $F603 ( tempPath , paths ) min = rowMapper . getRowsForPaths ( tempPath ) [ NUM00 ] ; for ( counter = NUM00 ; counter < pathCount ; counter ++ ) { if ( paths [ counter ] != null ) { tempPath [ NUM00 ] = paths [ counter ] ; $F2027 rows = rowMapper . getRowsForPaths ( tempPath ) ; $F1933 ( rows , _BOOL ) anIndex = rows [ NUM00 ] ; if ( anIndex == - NUM00 || anIndex < ( min - pathCount ) || anIndex > ( min + pathCount ) ) return _BOOL ; $F7547 ( anIndex , min ) if $F87318 ( bitSet , anIndex ) { bitSet . set ( anIndex ) ; validCount ++ ; } } } int maxCounter = validCount + min ; for ( counter = min ; counter < maxCounter ; counter ++ ) if $F87318 ( bitSet , counter ) return _BOOL ; } return _BOOL ; }
public FastStringReader ( String s ) { this . str = s ; this . length = s . length ( ) ; }
private static int arrayIndex ( int i ) { return ( i > > SHIFT_PER_WORD ) ; }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
static void updateStyle ( JTextComponent c , SeaGlassContext context , String prefix ) { SeaGlassStyle style = ( SeaGlassStyle ) context . getStyle ( ) ; Color color = c . getCaretColor ( ) ; if ( color == null || color instanceof UIResource ) { c . setCaretColor ( ( Color ) style . get ( context , prefix + NUM00 ) ) ; } Color fg = c . getForeground ( ) ; if ( fg == null || fg instanceof UIResource ) { fg = style . getColorForState ( context , ColorType . TEXT_FOREGROUND ) ; if ( fg != null ) { c . setForeground ( fg ) ; } } Object ar = style . get ( context , prefix + NUM00 ) ; if ( ar instanceof Number ) { c . putClientProperty ( NUM00 , ar ) ; } context . setComponentState ( SELECTED | FOCUSED ) ; Color s = c . getSelectionColor ( ) ; if ( s == null || s instanceof UIResource ) { c . setSelectionColor ( style . getColor ( context , ColorType . TEXT_BACKGROUND ) ) ; } Color sfg = c . getSelectedTextColor ( ) ; if ( sfg == null || sfg instanceof UIResource ) { c . setSelectedTextColor ( style . getColor ( context , ColorType . TEXT_FOREGROUND ) ) ; } context . setComponentState ( DISABLED ) ; Color dfg = c . getDisabledTextColor ( ) ; if ( dfg == null || dfg instanceof UIResource ) { c . setDisabledTextColor ( style . getColor ( context , ColorType . TEXT_FOREGROUND ) ) ; } Insets margin = c . getMargin ( ) ; if ( margin == null || margin instanceof UIResource ) { margin = ( Insets ) style . get ( context , prefix + NUM00 ) ; if ( margin == null ) { margin = SeaGlassLookAndFeel . EMPTY_UIRESOURCE_INSETS ; } c . setMargin ( margin ) ; } $F185684 ( caret , c ) if ( caret instanceof UIResource ) { Object o = style . get ( context , prefix + NUM00 ) ; if ( o != null && o instanceof Integer ) { $F179073 ( rate , o ) caret . setBlinkRate ( rate . intValue ( ) ) ; } } }
$F20664 $F1 protected void onMeasure ( int widthMeasureSpec , int heightMeasureSpec ) { $F20444 ( widthMode , MeasureSpec , widthMeasureSpec ) $F20444 ( heightMode , MeasureSpec , heightMeasureSpec ) $F23132 ( maxWidth , MeasureSpec , widthMeasureSpec ) $F23132 ( maxHeight , MeasureSpec , heightMeasureSpec ) if ( widthMode == MeasureSpec . UNSPECIFIED ) maxWidth = Integer . MAX_VALUE ; if ( heightMode == MeasureSpec . UNSPECIFIED ) maxHeight = Integer . MAX_VALUE ; int paddingLeft = getPaddingLeft ( ) ; int paddingTop = getPaddingTop ( ) ; int paddingRight = getPaddingRight ( ) ; int paddingBottom = getPaddingBottom ( ) ; int maxRightBound = maxWidth - paddingRight ; int maxBottomBound = maxHeight - paddingBottom ; int left ; int top ; int right ; int bottom ; int rightBound = paddingLeft ; int maxRightNoPadding = rightBound ; int bottomBound ; int lastMaxBottom = paddingTop ; int maxBottom = lastMaxBottom ; int childWidth ; int childHeight ; int lineStartIndex = NUM00 ; int lineEndIndex = NUM00 ; $F725 ( rectList ) int childCount = getChildCount ( ) ; for ( $F119 ( index , childCount ) ) { final View child = getChildAt ( index ) ; child . measure ( MeasureSpec . UNSPECIFIED , MeasureSpec . UNSPECIFIED ) ; if ( child . getVisibility ( ) == View . GONE ) $F598 final AutoWrapLayout . LayoutParams lp = ( AutoWrapLayout . LayoutParams ) child . getLayoutParams ( ) ; childWidth = child . getMeasuredWidth ( ) ; childHeight = child . getMeasuredHeight ( ) ; left = rightBound + lp . leftMargin ; right = left + childWidth ; rightBound = right + lp . rightMargin ; if ( rightBound > maxRightBound ) { lineEndIndex = index ; adjustBaseLine ( maxBottom - lastMaxBottom , lineStartIndex , lineEndIndex ) ; $F612 ( maxBottom , maxBottomBound ) if ( lineEndIndex == lineStartIndex ) { child . measure ( MeasureSpec . makeMeasureSpec ( maxWidth - paddingLeft - paddingRight - lp . leftMargin - lp . rightMargin , MeasureSpec . AT_MOST ) , MeasureSpec . UNSPECIFIED ) ; childWidth = child . getMeasuredWidth ( ) ; childHeight = child . getMeasuredHeight ( ) ; } left = paddingLeft + lp . leftMargin ; right = left + childWidth ; rightBound = right + lp . rightMargin ; lastMaxBottom = maxBottom ; top = lastMaxBottom + lp . topMargin ; bottom = top + childHeight ; bottomBound = bottom + lp . bottomMargin ; lineStartIndex = index ; } else { top = lastMaxBottom + lp . topMargin ; bottom = top + childHeight ; bottomBound = bottom + lp . bottomMargin ; } $F15468 ( rightBound , maxRightNoPadding ) $F15468 ( bottomBound , maxBottom ) $F28883 ( rect ) rect . left = left ; rect . top = top ; rect . right = right ; rect . bottom = bottom ; rectList . add ( rect ) ; } adjustBaseLine ( maxBottom - lastMaxBottom , lineStartIndex , rectList . size ( ) ) ; int measuredWidth ; int measuredHeight ; if ( widthMode == MeasureSpec . EXACTLY ) measuredWidth = maxWidth ; else measuredWidth = maxRightNoPadding + paddingRight ; if ( heightMode == MeasureSpec . EXACTLY ) measuredHeight = maxHeight ; else { measuredHeight = maxBottom + paddingBottom ; if ( heightMode == MeasureSpec . AT_MOST ) measuredHeight = measuredHeight > maxHeight ? maxHeight : measuredHeight ; } setMeasuredDimension ( measuredWidth , measuredHeight ) ; }
public final void wait $F72 throws $F87326 $F73598 ( wait )
public QueryStringQueryBuilder field ( String field , float boost ) { $F9406 ( fields ) fields . add ( field ) ; if ( fieldsBoosts == null ) { fieldsBoosts = new ObjectFloatHashMap $F200 $F72 ; } fieldsBoosts . put ( field , boost ) ; return this ; }
public static String nowDateString ( String format ) { $F13438 ( df , format ) return $F52170 ( df ) ; }
protected void initStreamBufferSize $F72 { String streamBufferSizeParam = getInitParameter ( NUM00 ) ; setStreamBufferSize ( ( streamBufferSizeParam == null ) ? DEFAULT_STREAM_BUFFER_SIZE : Integer . parseInt ( streamBufferSizeParam ) ) ; if ( isDebug ( ) ) { log ( NUM00 + getStreamBufferSize ( ) ) ; } }
public void registerSensor ( Sensor s , int i ) { if ( ( i < NUM00 ) || ( i > ( ( numInputCards ( ) * bitsPerCard ) - NUM00 ) ) || ( i > MAXSENSORS ) ) { log . error ( NUM00 + Integer . toString ( i + NUM00 ) ) ; $F665 } hasActiveSensors = _BOOL ; if ( sensorArray [ i ] == null ) { sensorArray [ i ] = s ; $F8790 ( lastUsedSensor , i ) } else { log . warn ( NUM00 + Integer . toString ( ( getNodeAddress ( ) * SerialSensorManager . SENSORSPERUA ) + i + NUM00 ) ) ; } }
public static Number asNumber ( String value , Supplier $F7482 defaultValueProvider ) { if ( value != null ) { try $F62107 ( Short , value ) catch ( NumberFormatException e1 ) { try $F62107 ( Integer , value ) catch ( NumberFormatException e2 ) { try $F62107 ( Long , value ) catch ( NumberFormatException e3 ) { try $F62107 ( Float , value ) catch ( NumberFormatException e4 ) { try $F62107 ( Double , value ) catch ( NumberFormatException e5 ) { try { return new BigInteger ( value ) ; } catch ( NumberFormatException e6 ) { try { return new BigDecimal ( value ) ; } catch ( NumberFormatException e7 ) $F845 } } } } } } } return defaultValueProvider != null ? defaultValueProvider . get ( ) : null ; }
public final void sample $F72 { long sum = _sum . getAndSet ( NUM00 ) ; int count = _count . getAndSet ( NUM00 ) ; if ( count != NUM00 ) _value = sum / ( double ) count ; else _value = NUM00 ; }
private String applyReplacement ( final BidiMap replacement , String contents ) { for ( $F85 ( key , replacement ) ) { $F71197 ( attributeName , key ) $F123 ( attributeInitials , replacement , key ) contents = contents . replaceAll ( JSONSerialisation . jsonAttributeName ( attributeName ) , JSONSerialisation . jsonAttributeName ( attributeInitials ) ) ; } return contents ; }
public KeyImpl ( KerberosPrincipal principal , $F1469 password , String algorithm ) { try { PrincipalName princ = new PrincipalName $F27949 ( principal ) ; EncryptionKey key = new EncryptionKey ( password , princ . getSalt ( ) , algorithm ) ; this . keyBytes = key . getBytes ( ) ; this . keyType = key . getEType ( ) ; } catch ( KrbException e ) $F1787 ( e ) }
public static AnnotationBinding [ ] addStandardAnnotations ( AnnotationBinding [ ] recordedAnnotations , long annotationTagBits , LookupEnvironment env ) { int count = NUM00 ; if ( ( annotationTagBits & TagBits . AnnotationTargetMASK ) != NUM00 ) count ++ ; if ( ( annotationTagBits & TagBits . AnnotationRetentionMASK ) != NUM00 ) count ++ ; if ( ( annotationTagBits & TagBits . AnnotationDeprecated ) != NUM00 ) count ++ ; if ( ( annotationTagBits & TagBits . AnnotationDocumented ) != NUM00 ) count ++ ; if ( ( annotationTagBits & TagBits . AnnotationInherited ) != NUM00 ) count ++ ; if ( ( annotationTagBits & TagBits . AnnotationOverride ) != NUM00 ) count ++ ; if ( ( annotationTagBits & TagBits . AnnotationSuppressWarnings ) != NUM00 ) count ++ ; if ( ( annotationTagBits & TagBits . AnnotationPolymorphicSignature ) != NUM00 ) count ++ ; if ( ( annotationTagBits & TagBits . AnnotationSafeVarargs ) != NUM00 ) count ++ ; $F116 ( count , recordedAnnotations ) int index = recordedAnnotations . length ; AnnotationBinding [ ] result = new AnnotationBinding [ index + count ] ; $F135 ( System , recordedAnnotations , result , index ) if ( ( annotationTagBits & TagBits . AnnotationTargetMASK ) != NUM00 ) result [ index ++ ] = buildTargetAnnotation ( annotationTagBits , env ) ; if ( ( annotationTagBits & TagBits . AnnotationRetentionMASK ) != NUM00 ) result [ index ++ ] = buildRetentionAnnotation ( annotationTagBits , env ) ; if ( ( annotationTagBits & TagBits . AnnotationDeprecated ) != NUM00 ) result [ index ++ ] = buildMarkerAnnotation ( TypeConstants . JAVA_LANG_DEPRECATED , env ) ; if ( ( annotationTagBits & TagBits . AnnotationDocumented ) != NUM00 ) result [ index ++ ] = buildMarkerAnnotation ( TypeConstants . JAVA_LANG_ANNOTATION_DOCUMENTED , env ) ; if ( ( annotationTagBits & TagBits . AnnotationInherited ) != NUM00 ) result [ index ++ ] = buildMarkerAnnotation ( TypeConstants . JAVA_LANG_ANNOTATION_INHERITED , env ) ; if ( ( annotationTagBits & TagBits . AnnotationOverride ) != NUM00 ) result [ index ++ ] = buildMarkerAnnotation ( TypeConstants . JAVA_LANG_OVERRIDE , env ) ; if ( ( annotationTagBits & TagBits . AnnotationSuppressWarnings ) != NUM00 ) result [ index ++ ] = buildMarkerAnnotation ( TypeConstants . JAVA_LANG_SUPPRESSWARNINGS , env ) ; if ( ( annotationTagBits & TagBits . AnnotationPolymorphicSignature ) != NUM00 ) result [ index ++ ] = buildMarkerAnnotationForMemberType ( TypeConstants . JAVA_LANG_INVOKE_METHODHANDLE_$_POLYMORPHICSIGNATURE , env ) ; if ( ( annotationTagBits & TagBits . AnnotationSafeVarargs ) != NUM00 ) result [ index ++ ] = buildMarkerAnnotation ( TypeConstants . JAVA_LANG_SAFEVARARGS , env ) ; return result ; }
$F1 public String toString $F72 { String result = NUM00 ; result += getCompatibilityState ( ) ; if ( m_Instances == null ) { result += NUM00 ; } else { result += NUM00 + $F224768 ( Utils , m_Instances ) ; } return result ; }
public static void process ( List < Packages > pkgList ) throws Exception { init ( ) ; $F6542 ( temps , templates ) $F112797 ( vmFiles , temps ) for ( $F1139 ( i , temps ) ) { vmFiles [ i ] = temps [ i ] + NUM00 ; } for ( Packages pkg : pkgList ) { for ( String vmFile : vmFiles ) { generator ( vmFile , pkg ) ; } } }
public boolean check ( final Direction dir , final boolean facing ) { if ( this . dir != dir ) { return _BOOL ; } if ( this . facing != facing ) { return _BOOL ; } $F42358 ( now , System ) $F232230 ( now , expiration , _BOOL ) expiration = now + DELAY ; return _BOOL ; }
private void parse ( String path ) throws Exception { if ( path != null ) { $F3935 ( count , path ) $F104602 ( data , count ) $F16116 ( path , count , data ) } path ( ) ; }
public void recordVariable ( String typeDesc , String varName , int varNo , SymbolTable tbl ) throws CompileError { char c ; int dim = NUM00 ; while ( $F31375 ( c , typeDesc , dim ) == NUM00 ) ++ dim ; int type = MemberResolver . descToType ( c ) ; String cname = null ; if ( type == CLASS ) { if ( dim == NUM00 ) $F238294 ( cname , typeDesc ) else cname = typeDesc . substring ( dim + NUM00 , $F1092 ( typeDesc ) ) ; } Declarator decl = new Declarator ( type , cname , dim , varNo , new Symbol ( varName ) ) ; tbl . append ( varName , decl ) ; }
protected synchronized void readDontVerify $F72 throws IOException , FileEncryptionException { if ( backingRandomAccessFile . length ( ) < headerSize ( ) ) $F112401 long oldpos = backingRandomAccessFile . getFilePointer ( ) ; $F927 ( backingRandomAccessFile ) $F96 header_data = new byte [ headerSize ( ) - FileHeader . AUTH_TAG_SIZE ] ; backingRandomAccessFile . read ( header_data ) ; backingRandomAccessFile . seek ( oldpos ) ; DataInputStream istream = new DataInputStream $F24702 ( header_data ) ; $F82619 ( tmpmagic , PANBOX_FILE_MAGIC ) istream . read ( tmpmagic ) ; if $F1209 ( Arrays , tmpmagic , PANBOX_FILE_MAGIC ) $F112401 $F82619 ( tmpversion , PANBOX_FILE_VERSION ) istream . read ( tmpversion ) ; if $F1209 ( Arrays , tmpversion , PANBOX_FILE_VERSION ) { throw new FileEncryptionException $F3943 ( PANBOX_FILE_VERSION ) ; } this . shareKeyVersion = istream . readInt ( ) ; $F59 ( istream ) }
$F13735 ( prefix , namespace , attName , attValue , xmlWriter )
private boolean isMediaTypeSupported ( String media ) { for ( $F1139 ( i , SUPPORTED_MEDIA_TYPES ) ) { if $F11411 ( media , SUPPORTED_MEDIA_TYPES , i ) { return _BOOL ; } } return _BOOL ; }
private void export_dependencies ( JCas jcas ) { dependencies = new LinkedHashMap < Token , List < Dependency > > $F72 ; $F40119 nonGoverned = new ArrayList $F40118 $F57797 ( nodes ) ; for ( Dependency dependency : select ( jcas , Dependency . class ) ) { Token governor = dependency . getGovernor ( ) ; Token dependent = dependency . getDependent ( ) ; List < Dependency > l = dependencies . get ( governor ) ; if ( l == null ) { dependencies . put ( governor , new ArrayList < Dependency > $F72 ) ; l = dependencies . get ( governor ) ; } l . add ( dependency ) ; nonGoverned . remove ( dependent ) ; } for ( Token t : nonGoverned ) { traverseDependents ( t , NUM00 , - NUM00 ) ; writeToFile ( NUM00 , componentId , NUM00 , NUM00 , NUM00 ) ; componentId ++ ; } }
public static $F1469 fix83600 $F53421 ( signature ) { if ( signature == null || signature . length < NUM00 ) return signature ; return Signature . removeCapture ( signature ) ; }
public static boolean isNetworkAvailable ( Context context ) { $F40395 ( connectivityManager , context , Context ) $F40397 ( info , connectivityManager ) return $F93520 ( info ) ; }
public static String randomRegexpishString ( Random r ) $F41330 ( randomRegexpishString , r )
public List < ExpectedPartitionValueEntity > createExpectedPartitionValueEntities $F13322 ( partitionKeyGroupName , expectedPartitionValues ) { PartitionKeyGroupEntity partitionKeyGroupEntity = partitionKeyGroupDao . getPartitionKeyGroupByName ( partitionKeyGroupName ) ; if ( partitionKeyGroupEntity == null ) { partitionKeyGroupEntity = partitionKeyGroupDaoTestHelper . createPartitionKeyGroupEntity ( partitionKeyGroupName ) ; } List < ExpectedPartitionValueEntity > $F204 ( expectedPartitionValueEntities ) ; for ( String expectedPartitionValue : expectedPartitionValues ) { ExpectedPartitionValueEntity expectedPartitionValueEntity = new ExpectedPartitionValueEntity $F72 ; expectedPartitionValueEntity . setPartitionKeyGroup ( partitionKeyGroupEntity ) ; expectedPartitionValueEntity . setPartitionValue ( expectedPartitionValue ) ; expectedPartitionValueEntities . add ( expectedPartitionValueDao . saveAndRefresh ( expectedPartitionValueEntity ) ) ; } return expectedPartitionValueEntities ; }
public String toString $F72 $F2905 ( text )
public static LowMemoryWatcher register ( $F1113 Runnable runnable ) { return new LowMemoryWatcher ( runnable ) ; }
$F82890 ( dout , getMessage )
public Object extractHardRef ( Object o ) { SoftReference w = ( SoftReference ) o ; if ( w != null ) $F1522 ( w ) $F1274 }
public static String formatLong ( long number ) $F35907 ( intFormat , number )
public static void uncontribute ( ComponentAddon component ) { contributedComponents . remove ( component ) ; if ( currentAddon != null ) { component . uninitialize ( currentAddon ) ; } }
public synchronized int copyDirect ( int pageId , OutputStream out ) throws IOException { $F2175 ( buffer , pageSize ) $F55825 ( pageId , pageCount ) file . seek ( ( long ) pageId < < pageSizeShift ) ; file . readFullyDirect ( buffer , NUM00 , pageSize ) ; readCount ++ ; $F11584 ( out , buffer , pageSize ) return pageId + NUM00 ; }
public void writeRawBytes ( final $F96 value , int offset , int length ) throws IOException { if ( limit - position >= length ) $F21534 ( System , value , offset , buffer , position , length ) else { throw new OutOfSpaceException ( position , limit ) ; } }
private void assertBackupStatus ( final BackupStatus backupStatus ) { Map < DistributedMember , Set < PersistentID > > backupMap = backupStatus . getBackedUpDiskStores ( ) ; assertFalse ( backupMap . isEmpty ( ) ) ; for ( DistributedMember member : backupMap . keySet ( ) ) { for ( PersistentID id : backupMap . get ( member ) ) { assertNotNull ( id . getHost ( ) ) ; assertNotNull ( id . getUUID ( ) ) ; assertNotNull ( id . getDirectory ( ) ) ; } } }
@ RequestMapping ( $F3144 ) public void metadataError ( Locale locale , @ PathVariable ( $F3144 ) String tenant , HttpServletResponse response ) throws IOException { logger . info ( $F89018 ( locale , tenant ) ) ; metadataDefaultTenantBindingError ( locale , response ) ; }
public synchronized void checkState ( State ... requiredStates ) throws IllegalStateException { for ( State requiredState : requiredStates ) { $F7224 ( requiredState , currentState ) } throw new IllegalStateException ( String . format ( Locale . US , NUM00 , Lists . newArrayList ( requiredStates ) , currentState ) ) ; }
public void sortMovies $F72 { synchronized ( movies ) { Utils . sortList ( movies , MOVIE_SET_COMPARATOR ) ; $F725 ( movieIds ) for ( Movie movie : movies ) { movieIds . add ( movie . getDbId ( ) ) ; } } firePropertyChange ( NUM00 , null , movies ) ; }
public KeyValueListParser ( String pairDelimiterRegex , String keyValDelimiterRegex ) { pairDelimiter = Pattern . compile ( pairDelimiterRegex ) ; keyValDelimiter = Pattern . compile ( keyValDelimiterRegex ) ; }
private synchronized boolean pollStatsBroker ( Destination queue ) { statsMessageListener . setDestination ( queue ) ; Timestamp timestamp = $F32 ( System ) ; LOGGER . debug ( NUM00 + getQueueName ( queue ) + NUM00 + timestamp ) ; jmsTemplate . execute ( STATS_BROKER_DESTINATION + getQueueName ( queue ) , new ProducerCallbackImpl ( statsQueue ) ) ; try { $F165308 ( Thread ) } $F3101 ( e ) return statsMessageListener . getStats ( ) != null ; }
public File makeAcceptable ( File pathname ) { if ( accept ( pathname ) ) { return pathname ; } else { return new File ( pathname . getPath ( ) + NUM00 + defaultExtension ) ; } }
private static int handleDpadVertical ( int iconIndex , int cntX , int cntY , $F26353 ( matrix ) , int increment ) { int newIconIndex = NOOP ; $F77087 ( matrix ) int xPos = - NUM00 ; int yPos = - NUM00 ; for ( $F119 ( i , cntX ) ) { for ( $F119 ( j , cntY ) ) { if ( matrix [ i ] [ j ] == iconIndex ) { xPos = i ; yPos = j ; } } } if ( DEBUG ) { Log . v ( TAG , String . format ( NUM00 , xPos , yPos , iconIndex ) ) ; } for ( int y = yPos + increment ; NUM00 <= y && y < cntY && NUM00 <= y ; y += increment ) { if ( ( newIconIndex = inspectMatrix ( xPos , y , cntX , cntY , matrix ) ) != NOOP && newIconIndex != ALL_APPS_COLUMN ) { return newIconIndex ; } } int nextXPos1 ; int nextXPos2 ; boolean haveCrossedAllAppsColumn1 = _BOOL ; boolean haveCrossedAllAppsColumn2 = _BOOL ; int y = - NUM00 ; for ( $F119 ( coeff , cntX ) ) { nextXPos1 = xPos + coeff * increment ; nextXPos2 = xPos - coeff * increment ; y = yPos + increment * coeff ; $F77102 ( inspectMatrix , nextXPos1 , y , cntX , cntY , matrix , ALL_APPS_COLUMN , haveCrossedAllAppsColumn1 , _BOOL ) $F77102 ( inspectMatrix , nextXPos2 , y , cntX , cntY , matrix , ALL_APPS_COLUMN , haveCrossedAllAppsColumn2 , _BOOL ) for ( ; NUM00 <= y && y < cntY ; y = y + increment ) { int offset1 = haveCrossedAllAppsColumn1 && y < cntY - NUM00 ? increment : NUM00 ; newIconIndex = inspectMatrix ( nextXPos1 + offset1 , y , cntX , cntY , matrix ) ; $F77104 ( newIconIndex , NOOP ) int offset2 = haveCrossedAllAppsColumn2 && y < cntY - NUM00 ? - increment : NUM00 ; newIconIndex = inspectMatrix ( nextXPos2 + offset2 , y , cntX , cntY , matrix ) ; $F77104 ( newIconIndex , NOOP ) } } return newIconIndex ; }
private static boolean edgeIntersectsCellBoundary ( S2Point a , S2Point b , S2Cell cell ) { S2Point [ ] vertices = new S2Point $F380 ; for ( $F809 ( i ) ) { vertices [ i ] = cell . getVertex ( i ) ; } for ( $F809 ( i ) ) { S2Point fromPoint = vertices [ i ] ; S2Point toPoint = vertices [ ( i + NUM00 ) % NUM00 ] ; if ( lenientCrossing ( a , b , fromPoint , toPoint ) ) { return _BOOL ; } } return _BOOL ; }
private void generateLegalTimesTree $F72 { int k0 = KeyEvent . KEYCODE_0 ; int k1 = KeyEvent . KEYCODE_1 ; int k2 = KeyEvent . KEYCODE_2 ; int k3 = KeyEvent . KEYCODE_3 ; int k4 = KeyEvent . KEYCODE_4 ; int k5 = KeyEvent . KEYCODE_5 ; int k6 = KeyEvent . KEYCODE_6 ; int k7 = KeyEvent . KEYCODE_7 ; int k8 = KeyEvent . KEYCODE_8 ; int k9 = KeyEvent . KEYCODE_9 ; $F58037 ( mLegalTimesTree ) $F58066 ( mIs24HourMode , minuteFirstDigit , k0 , k1 , k2 , k3 , k4 , k5 , minuteSecondDigit , k6 , k7 , k8 , k9 , firstDigit , mLegalTimesTree , secondDigit , thirdDigit , ampm , getAmOrPmKeyCode , AM , PM , fourthDigit ) }
protected void updateOverlayContents ( LookAt lookAt , Camera camera ) { latView . setText ( formatLatitude ( lookAt . latitude ) ) ; lonView . setText ( formatLongitude ( lookAt . longitude ) ) ; altView . setText ( formatAltitude ( camera . altitude ) ) ; }
public String jsTypeName ( TypeRef typeRef ) { switch $F48178 ( typeRef ) { case TYPE_MESSAGE : $F1278 case TYPE_ENUM : $F1278 $F1267 { String name = PRIMITIVE_TYPE_NAMES . get ( typeRef . getKind ( ) ) ; if $F48189 ( Strings , name ) { return name ; } throw new IllegalArgumentException ( NUM00 + typeRef . getKind ( ) ) ; } } }
$F112793 ( key , entry , pruneIfNeeded , file , getFileForKey , fos , e , success , VolleyLog , putEntry , deleted )
public StateMachine createStateMachine ( StateMachineDefinition stateMachineDefinition ) { final Map < EventDefinition , EventData > eventDataMap = stateMachineDefinition . getEventDataMap ( ) ; Set $F137768 allEvents = createAllEvents ( eventDataMap ) ; Set < StateDefinition > stateDefinitions = stateMachineDefinition . getStates ( ) ; $F7433 $F9626 ( states ) ; for ( StateDefinition stateDefinition : stateDefinitions ) { State state = convertStateDefinitionToState ( stateDefinition ) ; states . add ( state ) ; } StateMachine stateMachine = new StateMachine ( stateMachineDefinition . getVersion ( ) , stateMachineDefinition . getName ( ) , stateMachineDefinition . getDescription ( ) , states , stateMachineDefinition . getCorrelationId ( ) ) ; stateMachinesDAO . create ( stateMachine ) ; for ( Event event : allEvents ) { event . setStateMachineInstanceId ( stateMachine . getId ( ) ) ; eventPersistenceService . persistEvent ( event ) ; } for ( State state : stateMachine . getStates ( ) ) { auditDAO . create ( new AuditRecord ( stateMachine . getId ( ) , state . getId ( ) , NUM00 , Status . initialized , null , null ) ) ; } return stateMachine ; }
protected void sqrtLayout ( VisualTable labels ) { Rectangle2D b = getLayoutBounds ( ) ; double breadth = getBreadth ( b ) ; double span = m_hi - m_lo ; double splo = MathLib . safeSqrt ( m_prevlo ) ; double spspan = MathLib . safeSqrt ( m_prevhi ) - splo ; double vlo = Math . pow ( NUM00 , Math . floor ( MathLib . safeLog10 ( m_lo ) ) ) ; double slo = MathLib . safeSqrt ( m_lo ) ; double sspan = MathLib . safeSqrt ( m_hi ) - slo ; Iterator iter = labels . tuples ( ) ; while $F2921 ( iter ) { $F163591 ( item , iter ) reset ( item ) ; double v = item . getDouble ( VALUE ) ; double x = span == NUM00 ? NUM00 : ( ( MathLib . safeSqrt ( v ) - slo ) / sspan ) * breadth ; set ( item , x , b ) ; } Index index = labels . index ( VALUE ) ; double step = getLinearStep ( span , breadth / span ) ; $F211985 ( step ) int r ; for ( double x , v = vlo ; v <= m_hi ; v += step ) { x = ( ( MathLib . safeSqrt ( v ) - slo ) / sspan ) * breadth ; if ( x < - NUM00 ) $F1448 else if ( $F86155 ( r , index , v ) >= NUM00 ) { VisualItem item = labels . getItem ( r ) ; item . setVisible ( _BOOL ) ; item . setEndVisible ( _BOOL ) ; } else { VisualItem item = labels . addItem ( ) ; item . set ( LABEL , m_nf . format ( v ) ) ; item . setDouble ( VALUE , v ) ; double f = spspan == NUM00 ? NUM00 : ( ( MathLib . safeSqrt ( v ) - splo ) / spspan ) ; if ( f <= NUM00 || f >= NUM00 ) { item . setStartVisible ( _BOOL ) ; } set ( item , f * breadth , b ) ; set ( item , x , b ) ; } } }
public void dispose $F72 { clearListeners ( ) ; $F44159 ( attributes ) removed ( null ) ; }
private void readObject ( ObjectInputStream in ) throws $F6427 { $F6428 ( in ) registrarID = new ServiceID ( in ) ; $F6434 ( server ) }
public Shape triangle_right $F2267 ( x , y , height ) { $F2268 ( m_path ) m_path . moveTo ( x , y + height ) ; m_path . lineTo ( x + height , y + height / NUM00 ) ; m_path . lineTo ( x , y ) ; $F2272 ( m_path ) return m_path ; }
public static terminal find ( String with_name ) { if ( with_name == null ) $F1274 else return ( terminal ) _all . get ( with_name ) ; }
public LayoutBlock createNewLayoutBlock ( String systemName , String userName ) { LayoutBlock block = null ; if $F3581 ( userName ) { $F9464 ( log ) $F1274 } block = getByUserName ( userName ) ; $F115475 ( block ) String sName = NUM00 ; if ( systemName == null ) { boolean found = _BOOL ; while ( found ) { sName = NUM00 + blkNum ; blkNum ++ ; block = getBySystemName ( sName ) ; $F20614 ( block , found , _BOOL ) } } else { block = getBySystemName ( ( systemName . toUpperCase ( ) ) ) ; $F115475 ( block ) sName = systemName . toUpperCase ( ) ; } block = new LayoutBlock ( sName , userName ) ; register ( block ) ; return block ; }
$F1 public void modifyNonstaticJPedalParameters ( final Map values ) throws PdfException { options . set ( values ) ; if ( values . containsKey ( JPedalSettings . DISPLAY_BACKGROUND ) ) $F845 }
public static String escapeRegex ( final String regex ) { $F1150 ( match , REGEX_CHARS , regex ) return match . replaceAll ( NUM00 ) ; }
public CharBuffer ( String string ) { $F115 ( length , string ) int capacity = length + MIN_CAPACITY ; init ( new char [ capacity ] , NUM00 , length ) ; string . getChars ( NUM00 , length , buffer ( ) , NUM00 ) ; }
private void updatePromoVisibility ( float percentage ) { if ( isPromoAvailable ( ) ) { mPromoVisible = _BOOL ; mPromoHeightPx = Math . round ( MathUtils . clamp ( percentage * mPromoContentHeightPx , NUM00 , mPromoContentHeightPx ) ) ; mPromoOpacity = percentage ; } else { mPromoVisible = _BOOL ; mPromoHeightPx = NUM00 ; mPromoOpacity = NUM00 ; } }
private ValueGeometry ( $F96 bytes , Geometry geometry ) { this . bytes = bytes ; this . geometry = geometry ; this . hashCode = Arrays . hashCode ( bytes ) ; }
$F1 public void do_after_propagation $F72 { for ( HeapInsIntervalManager im : new_pts . values ( ) ) $F29882 ( im ) new_pts = new HashMap < AllocNode , HeapInsIntervalManager > $F72 ; }
static boolean isExist ( String libName , int version ) { String file = _targetSoFile ( libName , version ) ; $F1705 ( a , file ) $F2948 ( a ) }
private void finishCommon $F72 { if $F5973 ( unknownSubjects ) { if $F86322 ( statements , restoredStatements ) { throw new BadSubjectException ( unknownSubjects . keySet ( ) , uris ) ; } else { log . info ( NUM00 , unknownSubjects . keySet ( ) , uris . entityData ( ) , uris . entity ( ) ) ; } } if ( revisionId == null ) { throw new ContainedException ( NUM00 + statements ) ; } if ( lastModified == null ) { throw new ContainedException ( NUM00 + statements ) ; } for ( Pair < URI , Literal > dataStatement : dataStatements ) { statements . add ( new StatementImpl ( entityUriImpl , dataStatement . getLeft ( ) , dataStatement . getRight ( ) ) ) ; } statements . addAll ( restoredStatements ) ; }
public static final void showGUIMessage ( final String user_message , final BufferedImage image , final String title ) { $F2329 ( image ) final ImagePanel display = new ImagePanel ( image ) ; $F30057 ( display ) if ( user_message != null ) { display . add ( new JLabel ( user_message ) , BorderLayout . SOUTH ) ; } $F43592 ( width , image ) $F43590 ( height , image ) display . setSize ( new Dimension ( width + NUM00 , height + NUM00 ) ) ; JOptionPane . showConfirmDialog ( contentPane , display , title , JOptionPane . DEFAULT_OPTION , JOptionPane . PLAIN_MESSAGE ) ; }
private void dynInit $F72 $F845
$F1 public Path call $F72 throws Exception { final Set < FileVisitOption > options ; if ( followLinks ) { options = EnumSet . of ( FileVisitOption . FOLLOW_LINKS ) ; } else { options = EnumSet . noneOf ( FileVisitOption . class ) ; } $F102990 ( logger , String , path ) try { Files . walkFileTree ( path , options , maxDepth , this ) ; } catch ( IOException e ) { logger . log ( Level . SEVERE , String . format ( NUM00 , path ) , e ) ; throw e ; } $F102990 ( logger , String , path ) return path ; }
private void baselineLayout ( int origin , int size ) { int ascent ; int descent ; if ( baselineAnchoredToTop ) { ascent = prefAscent ; descent = size - ascent ; } else { ascent = size - prefDescent ; descent = prefDescent ; } for ( Spring spring : springs ) { Alignment alignment = spring . getAlignment ( ) ; if ( alignment == null || alignment == Alignment . BASELINE ) { int baseline = spring . getBaseline ( ) ; if ( baseline >= NUM00 ) { int springMax = spring . getMaximumSize ( VERTICAL ) ; int springPref = spring . getPreferredSize ( VERTICAL ) ; int height = springPref ; int y ; switch ( spring . getBaselineResizeBehavior ( ) ) { case CONSTANT_ASCENT : y = origin + ascent - baseline ; height = Math . min ( descent , springMax - baseline ) + baseline ; $F597 case CONSTANT_DESCENT : height = Math . min ( ascent , springMax - springPref + baseline ) + ( springPref - baseline ) ; y = origin + ascent + ( springPref - baseline ) - height ; $F597 $F1267 y = origin + ascent - baseline ; $F597 } spring . setSize ( VERTICAL , y , height ) ; } else { setChildSize ( spring , VERTICAL , origin , size ) ; } } else { setChildSize ( spring , VERTICAL , origin , size ) ; } } }
public static int readInt ( final JSONArray jsonArray , final int index , final boolean required , final boolean notNull ) throws JSONException { if ( required ) { return jsonArray . getInt ( index ) ; } $F3652 ( notNull , jsonArray , index , String , Locale , NULL_VALUE_FORMAT_ARRAY ) int value = NUM00 ; if $F3653 ( jsonArray , index ) { value = jsonArray . getInt ( index ) ; } return value ; }
$F5105 ( pcl , m_pcSupport )
private void unregisterDependent ( Preference dependent ) $F4579 ( mDependents , dependent )
private void validateStoragePolicySelection ( StoragePolicySelection storagePolicySelection ) { $F18062 ( Assert , storagePolicySelection ) businessObjectDataHelper . validateBusinessObjectDataKey ( storagePolicySelection . getBusinessObjectDataKey ( ) , _BOOL , _BOOL ) ; storagePolicyHelper . validateStoragePolicyKey ( storagePolicySelection . getStoragePolicyKey ( ) ) ; Assert . notNull ( storagePolicySelection . getStoragePolicyVersion ( ) , NUM00 ) ; }
$F1 public String toString $F72 { $F280 ( text ) if ( m_cobwebTree == null ) $F2455 else { m_cobwebTree . dumpTree ( NUM00 , text ) ; return NUM00 + m_numberMerges + NUM00 + m_numberSplits + NUM00 + numberOfClusters ( ) + NUM00 + text . toString ( ) + NUM00 ; } }
public static Object toArray ( $F7922 collection , $F6969 componentType ) { if $F24204 ( componentType ) { Object array = Array . newInstance ( componentType , collection . size ( ) ) ; int index = NUM00 ; for ( Object value : collection ) { Array . set ( array , index ++ , value ) ; } return array ; } return collection . toArray ( ( $F131 ) Array . newInstance ( componentType , collection . size ( ) ) ) ; }
GradleException formatViolationsFor ( Formatter formatter , $F11300 problemFiles ) throws IOException { return new GradleException ( DiffMessageFormatter . messageFor ( this , formatter , problemFiles ) ) ; }
public void labelDistances ( Hypergraph $F27593 graph , V root ) { labelDistances ( graph , Collections . singleton ( root ) ) ; }
public static $F9737 toString ( float d ) { float m = Math . abs ( d ) ; if ( d == POSITIVE_INFINITY ) $F2455 else if ( d == NEGATIVE_INFINITY ) $F2455 else if ( d == NUM00 ) $F2455 else if $F152867 ( m ) { String str = toStringImpl ( d , _BOOL ) ; $F7782 ( chars , str ) $F40997 ( i , chars ) char c ; while ( i >= NUM00 && ( c = chars [ i ] ) == NUM00 ) { i -- ; } if ( i < NUM00 || $F8907 ( str ) ) { return str ; } else if ( chars [ i ] == NUM00 || chars [ i ] == NUM00 ) { i ++ ; } return $F1399 ( str , i ) ; } else $F8587 ( toStringImpl , d , _BOOL ) }
public int position $F72 { return lineBuffer == null ? NUM00 : lineBuffer . length ( ) ; }
$F1017 ( request , container , mRequest , mContainers )
public void addFrequency ( Frequency frequency ) $F207 ( frequencies , frequency )
public final static HeaderElement parseHeaderElement $F45528 ( value , parser ) throws ParseException { $F826 ( value ) $F45529 ( parser , SaveHeaderValueParser ) $F45535 ( buffer , value ) buffer . append ( value ) ; SaveParserCursor cursor = new SaveParserCursor ( $F34024 ( value ) ) ; return parser . parseHeaderElement ( buffer , cursor ) ; }
public static $F536600 sliceIntervals ( Interval interval , TimeGrain timeGrain ) { DateTime intervalEnd = interval . getEnd ( ) ; DateTime sliceStart = interval . getStart ( ) ; DateTime periodStart = timeGrain . roundFloor ( sliceStart ) ; if $F2137 ( sliceStart , periodStart ) { LOG . info ( NUM00 , interval , timeGrain , periodStart ) ; $F11416 ( periodStart ) } $F536600 $F204 ( intervalSlices ) ; while ( sliceStart . isBefore ( intervalEnd ) ) { DateTime sliceEnd = DateTimeUtils . addTimeGrain ( sliceStart , timeGrain ) ; Interval slicedInterval = new Interval ( sliceStart , sliceEnd ) ; if $F2200 ( interval , slicedInterval ) { $F21153 ( LOG , interval , timeGrain ) $F824 } intervalSlices . add ( slicedInterval ) ; sliceStart = sliceEnd ; } LOG . debug ( NUM00 , interval , intervalSlices . size ( ) , timeGrain ) ; return intervalSlices ; }
$F13735 ( prefix , namespace , attName , attValue , xmlWriter )
public void testHasAttributes1 $F72 throws Throwable { Document doc ; NodeList addrList ; Node addrNode ; boolean state ; $F236 ( doc , load , builder ) $F237 ( addrList , doc ) $F238 ( addrNode , addrList ) state = addrNode . hasAttributes ( ) ; assertFalse ( NUM00 , state ) ; }
public boolean isGerund $F72 $F121470 ( typeString , VERB_GERUND )
protected void error ( String msg , Exception e ) throws $F2253 { SAXSourceLocator locator = getLocator ( ) ; $F1875 ( handler , m_stylesheetProcessor ) TransformerException pe ; if ( ! ( e instanceof TransformerException ) ) { pe = ( null == e ) ? new TransformerException ( msg , locator ) : new TransformerException ( msg , locator , e ) ; } else pe = ( TransformerException ) e ; if ( null != handler ) { try $F16034 ( handler , pe ) $F2262 ( te ) } else throw new $F2253 ( pe ) ; }
private JsonObject createRequest ( $F2100 ( headers ) , String uri , HttpMethod method , JsonObject payload ) { $F364018 ( request ) $F466990 ( jsonHeaders ) $F22620 ( headers ) $F545 ( request , jsonHeaders ) $F545 ( request , uri ) $F108920 ( request , method ) $F545 ( request , payload ) return request ; }
public void runTest $F72 throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; $F236 ( doc , load , _BOOL ) $F237 ( elementList , doc ) $F238 ( nameNode , elementList ) $F241 ( child , nameNode ) { boolean success = _BOOL ; try { child . replaceData ( - NUM00 , NUM00 , NUM00 ) ; } $F250 ( success , ex , DOMException ) assertTrue ( NUM00 , success ) ; } }
private long downloadTlogFiles ( File tmpTlogDir , long latestGeneration ) throws Exception { $F556 ( LOG , tlogFilesToDownload ) tlogFilesDownloaded = Collections . synchronizedList ( $F203 ) ; long bytesDownloaded = NUM00 ; $F152093 ( status , tmpTlogDir ) if ( ! status ) { throw new SolrException ( SolrException . ErrorCode . SERVER_ERROR , $F2989 ( tmpTlogDir ) ) ; } for ( $F46397 ( file , tlogFilesToDownload ) ) { String saveAs = ( String ) ( file . get ( ALIAS ) == null ? file . get ( NAME ) : file . get ( ALIAS ) ) ; localFileFetcher = new LocalFsFileFetcher ( tmpTlogDir , file , saveAs , TLOG_FILE , latestGeneration ) ; currentFile = file ; localFileFetcher . fetchFile ( ) ; bytesDownloaded += localFileFetcher . getBytesDownloaded ( ) ; tlogFilesDownloaded . add ( new $F4188 ( file ) ) ; } return bytesDownloaded ; }
static WindowsFileAttributes readAttributes ( long handle ) throws WindowsException { NativeBuffer buffer = NativeBuffers . getNativeBuffer ( SIZEOF_FILE_INFORMATION ) ; try { $F14662 ( address , buffer ) GetFileInformationByHandle ( handle , address ) ; int reparseTag = NUM00 ; $F149755 ( fileAttrs , unsafe , address , OFFSETOF_FILE_INFORMATION_ATTRIBUTES ) if ( isReparsePoint ( fileAttrs ) ) { int size = MAXIMUM_REPARSE_DATA_BUFFER_SIZE ; NativeBuffer reparseBuffer = NativeBuffers . getNativeBuffer ( size ) ; try { DeviceIoControlGetReparsePoint ( handle , reparseBuffer . address ( ) , size ) ; reparseTag = ( int ) unsafe . getLong ( reparseBuffer . address ( ) ) ; } $F33835 ( reparseBuffer ) } return fromFileInformation ( address , reparseTag ) ; } $F33835 ( buffer ) }
protected void addAllForReplay ( Collection $F447507 participants ) { Iterator $F447507 it = participants . iterator ( ) ; while $F2921 ( it ) { Participant p = it . next ( ) ; replayCompletion ( p ) ; } }
public static JPanel createCheckbox ( String boxlabel , $F806 buttons , $F8748 checked , ActionListener al ) { JPanel jp = createPaletteJPanel ( boxlabel ) ; for ( $F1139 ( j , buttons ) ) { JCheckBox jcb = new JCheckBox ( buttons [ j ] ) ; jcb . setActionCommand ( Integer . toString ( j ) ) ; if ( al != null ) jcb . addActionListener ( al ) ; jcb . setSelected ( checked [ j ] ) ; jp . add ( jcb ) ; } return jp ; }
public static void copy ( DimensionsEvent aeDest , DimensionsEvent aeSrc ) { GPOMutable destAggs = aeDest . getAggregates ( ) ; GPOMutable srcAggs = aeSrc . getAggregates ( ) ; if ( srcAggs . getFieldsBoolean ( ) != null ) { System . arraycopy ( srcAggs . getFieldsBoolean ( ) , NUM00 , destAggs . getFieldsBoolean ( ) , NUM00 , srcAggs . getFieldsBoolean ( ) . length ) ; } if ( srcAggs . getFieldsCharacter ( ) != null ) { System . arraycopy ( srcAggs . getFieldsCharacter ( ) , NUM00 , destAggs . getFieldsCharacter ( ) , NUM00 , srcAggs . getFieldsCharacter ( ) . length ) ; } if ( srcAggs . getFieldsString ( ) != null ) { System . arraycopy ( srcAggs . getFieldsString ( ) , NUM00 , destAggs . getFieldsString ( ) , NUM00 , srcAggs . getFieldsString ( ) . length ) ; } if ( srcAggs . getFieldsShort ( ) != null ) { System . arraycopy ( srcAggs . getFieldsShort ( ) , NUM00 , destAggs . getFieldsShort ( ) , NUM00 , srcAggs . getFieldsShort ( ) . length ) ; } if ( srcAggs . getFieldsInteger ( ) != null ) { System . arraycopy ( srcAggs . getFieldsInteger ( ) , NUM00 , destAggs . getFieldsInteger ( ) , NUM00 , srcAggs . getFieldsInteger ( ) . length ) ; } if ( srcAggs . getFieldsLong ( ) != null ) { System . arraycopy ( srcAggs . getFieldsLong ( ) , NUM00 , destAggs . getFieldsLong ( ) , NUM00 , srcAggs . getFieldsLong ( ) . length ) ; } if ( srcAggs . getFieldsFloat ( ) != null ) { System . arraycopy ( srcAggs . getFieldsFloat ( ) , NUM00 , destAggs . getFieldsFloat ( ) , NUM00 , srcAggs . getFieldsFloat ( ) . length ) ; } if ( srcAggs . getFieldsDouble ( ) != null ) { System . arraycopy ( srcAggs . getFieldsDouble ( ) , NUM00 , destAggs . getFieldsDouble ( ) , NUM00 , srcAggs . getFieldsDouble ( ) . length ) ; } }
public static double assignProbabilitiesToInstances ( Relation < ? extends NumberVector > relation , List < ? extends EMClusterModel $F1011 > models , WritableDataStore $F42619 probClusterIGivenX ) { $F10162 ( k , models ) double emSum = NUM00 ; for ( $F42632 ( iditer , relation ) ) { $F69812 ( vec , relation , iditer ) $F9662 ( probabilities , k ) { int i = NUM00 ; for ( EMClusterModel $F1011 m : models ) { probabilities [ i ] = m . estimateDensity ( vec ) ; ++ i ; } } double priorProbability = NUM00 ; for ( $F119 ( i , k ) ) { priorProbability += probabilities [ i ] ; } double logP = Math . max ( Math . log ( priorProbability ) , MIN_LOGLIKELIHOOD ) ; emSum += ( logP == logP ) ? logP : NUM00 ; $F9662 ( clusterProbabilities , k ) if ( priorProbability > NUM00 ) { for ( $F119 ( i , k ) ) { clusterProbabilities [ i ] = probabilities [ i ] / priorProbability ; } } probClusterIGivenX . put ( iditer , clusterProbabilities ) ; } return emSum / relation . size ( ) ; }
$F42603 ( path , WINDOWS_SEPARATOR , UNIX_SEPARATOR )
public static String asString ( URI value ) { return $F65975 ( value ) ; }
public Kernel ( int offset , $F1986 values ) { $F17879 ( this , Arrays , values ) this . offset = offset ; }
private void initializeWorkList $F72 { for ( GVCongruenceClass c : B ) { if $F10471 ( c ) $F1448 Iterator < ValueGraphVertex > i = c . iterator ( ) ; ValueGraphVertex first = i . next ( ) ; while $F2921 ( i ) { ValueGraphVertex v = i . next ( ) ; if ( ! checkCongruence ( first , v ) ) { workList . push ( c ) ; $F597 } } } }
$F1 protected void beforeModelLinked ( EObject model , IDiagnosticConsumer diagnosticsConsumer ) { ImportedNamesAdapter adapter = ImportedNamesAdapter . find ( model . eResource ( ) ) ; $F10834 ( adapter ) UnionMemberScope . clearCachedComposedMembers ( model ) ; }
protected abstract void addFile ( String relativeFilename ) throws CommandException ;
public void treeExpanded ( TreeExpansionEvent event ) { inspectorWindow . updateView ( Director . ALL ) ; }
public void convertInfixToPostfix ( String infixExp ) throws Exception { m_originalInfix = infixExp ; infixExp = Utils . removeSubstring ( infixExp , NUM00 ) ; infixExp = Utils . replaceSubstring ( infixExp , NUM00 , NUM00 ) ; infixExp = Utils . replaceSubstring ( infixExp , NUM00 , NUM00 ) ; infixExp = Utils . replaceSubstring ( infixExp , NUM00 , NUM00 ) ; infixExp = Utils . replaceSubstring ( infixExp , NUM00 , NUM00 ) ; infixExp = Utils . replaceSubstring ( infixExp , NUM00 , NUM00 ) ; infixExp = Utils . replaceSubstring ( infixExp , NUM00 , NUM00 ) ; infixExp = Utils . replaceSubstring ( infixExp , NUM00 , NUM00 ) ; infixExp = Utils . replaceSubstring ( infixExp , NUM00 , NUM00 ) ; infixExp = Utils . replaceSubstring ( infixExp , NUM00 , NUM00 ) ; infixExp = Utils . replaceSubstring ( infixExp , NUM00 , NUM00 ) ; StringTokenizer tokenizer = new StringTokenizer ( infixExp , OPERATORS , _BOOL ) ; m_postFixExpVector = new Vector < ExpressionComponent > $F72 ; while $F14498 ( tokenizer ) { $F8095 ( tok , tokenizer ) if $F4012 ( tok ) { handleOperand ( tok ) ; } else { if ( $F95813 ( isOperator , tok ) ) { handleOperator ( tok ) ; } else { handleOperand ( tok ) ; } } m_previousTok = tok ; } while $F84882 ( m_operatorStack ) { String popop = ( String ) ( m_operatorStack . pop ( ) ) ; if $F66132 ( popop ) $F9451 m_postFixExpVector . addElement ( new Operator $F49313 ( popop ) ) ; } }
public boolean hasItem ( T object ) { synchronized ( mLock ) $F298 ( source , object ) }
private static boolean versionMatches ( Integer v1 , int v2 ) { if ( v1 == null || v1 == NUM00 || v2 == NUM00 ) { return _BOOL ; } $F1964 ( v1 , v2 ) }
protected void onFailedClosingUrlConnection ( URLConnection urlConnection , IOException cause ) $F845
private void onSchemaComplexType ( Element schemaComplexType , DatatypeElementFactory elementFactory ) { $F335184 iter = schemaComplexType . elementIterator ( XSD_ATTRIBUTE ) ; while $F2921 ( iter ) { $F84573 ( xsdAttribute , iter ) String name = xsdAttribute . attributeValue ( NUM00 ) ; QName qname = getQName ( name ) ; XSDatatype dataType = dataTypeForXsdAttribute ( xsdAttribute ) ; if ( dataType != null ) { elementFactory . setAttributeXSDatatype ( qname , dataType ) ; } } Element schemaSequence = schemaComplexType . element ( XSD_SEQUENCE ) ; $F38251 ( schemaSequence , onChildElements , elementFactory ) Element schemaChoice = schemaComplexType . element ( XSD_CHOICE ) ; $F38251 ( schemaChoice , onChildElements , elementFactory ) Element schemaAll = schemaComplexType . element ( XSD_ALL ) ; $F38251 ( schemaAll , onChildElements , elementFactory ) }
private void pushAnnotatorsRef ( String values ) { annotatorsRef . push ( annotatorsRef . peek ( ) ) ; setAnnotatorsRef ( values ) ; }
public String versionCompact $F72 $F16566 ( properties )
private void sequenceQuery ( QueryEntry entry , ServerSessionContext session , CompletableFuture < QueryResponse > future ) { if ( entry . getSequence ( ) > session . getCommandSequence ( ) ) { session . registerSequenceQuery ( entry . getSequence ( ) , null ) ; } else { indexQuery ( entry , future ) ; } }
private boolean expungeStaleEntries $F72 { $F116 ( size , _BOOL ) Object r ; boolean result = _BOOL ; while $F22655 ( r , queue ) { result = _BOOL ; $F68169 ( e , r ) int h = e . hash ; $F44136 ( i , indexFor , h , table ) Entry prev = table [ i ] ; Entry p = prev ; while ( p != null ) { Entry next = p . next ; if ( p == e ) { if ( prev == e ) table [ i ] = next ; else prev . next = next ; e . next = null ; size -- ; $F597 } prev = p ; p = next ; } } return result ; }
public static $F4203 $F5675 rest $F18644 ( l ) { return $F31807 ( l ) ; }
public static $F3807 createRanges ( int ... startEnds ) { assert startEnds . length % NUM00 == NUM00 ; $F15277 ( ret ) for ( $F1139 ( si , startEnds ) ) { final int start = startEnds [ si ++ ] ; final int end = startEnds [ si ] ; assert end >= start ; ret . ensureCapacity ( ret . size ( ) + ( ( end - start ) + NUM00 ) ) ; for ( int i = start ; i <= end ; i ++ ) { $F368241 ( ret , i ) } } return ret ; }
$F234188 ( webClient )
public void findAndUndo ( Object someObj ) { if ( someObj instanceof com . bbn . openmap . MapBean ) { $F22806 ( logger ) MapBean map = getMapBean ( ) ; if ( map != null && map == ( MapBean ) someObj ) $F82623 ( setMapBean ) } }
public Timestamp recalculateEstimatedCompletionDate ( Long priority , Timestamp startDate ) { if ( exist ( ) ) { getProductionRunRoutingTasks ( ) ; $F21009 ( quantity , getQuantity ) Timestamp endDate = null ; for ( Iterator $F6260 iter = productionRunRoutingTasks . iterator ( ) ; iter . hasNext ( ) ; ) { GenericValue routingTask = iter . next ( ) ; if ( priority . compareTo ( routingTask . getLong ( NUM00 ) ) <= NUM00 ) { long totalTime = ProductionRun . getEstimatedTaskTime ( routingTask , quantity , dispatcher ) ; endDate = TechDataServices . addForward ( TechDataServices . getTechDataCalendar ( routingTask ) , startDate , totalTime ) ; $F113827 ( routingTask , startDate ) $F113827 ( routingTask , endDate ) startDate = endDate ; } } return endDate ; } else $F1337 }
public void addDocumentType ( DocumentType documentType ) $F207 ( mDocumentTypes , documentType )
public boolean tableExists ( DatabaseMetaData dbMetaData , String tableName ) throws SQLException { return ( tableExistsCaseSensitive ( dbMetaData , tableName ) || tableExistsCaseSensitive ( dbMetaData , $F184776 ( tableName , Locale ) ) || tableExistsCaseSensitive ( dbMetaData , $F137650 ( tableName , Locale ) ) ) ; }
public void testHasAttributes1 $F72 throws Throwable { Document doc ; Element element ; NodeList elementList ; boolean hasAttributes ; $F236 ( doc , load , builder ) $F237 ( elementList , doc ) $F90846 ( element , elementList ) $F54171 ( hasAttributes , element ) assertFalse ( NUM00 , hasAttributes ) ; $F237 ( elementList , doc ) $F90846 ( element , elementList ) $F54171 ( hasAttributes , element ) assertTrue ( NUM00 , hasAttributes ) ; }
private static Position nextTokenPos ( Position pos , Token [ ] [ ] spec ) { $F1338 ( pos ) int nextItem = pos . item + NUM00 ; if ( ( nextItem < spec [ pos . line ] . length ) && ( ( pos . line < pcalEnd . line ) || ( nextItem < pcalEnd . item ) ) ) { return new Position ( pos . line , nextItem ) ; } int nextLine = pos . line + NUM00 ; while ( ( nextLine < spec . length ) && ( spec [ nextLine ] . length == NUM00 ) ) { nextLine ++ ; } if ( ( nextLine < spec . length ) && ( ( nextLine < pcalEnd . line ) || ( ( nextLine == pcalEnd . line ) && ( NUM00 < pcalEnd . item ) ) ) ) { return new Position ( nextLine , NUM00 ) ; } $F1274 }
public void update ( GL10 gl ) { if $F3817 ( taskQueue ) { GLResorceTask res ; while $F22655 ( res , taskQueue ) { res . perform ( gl ) ; } } }
public static $F1986 HPDInterval ( double proportion , $F1986 x , $F2027 indices ) { double minRange = Double . MAX_VALUE ; int hpdIndex = NUM00 ; final int diff = ( int ) Math . round ( proportion * $F111967 ( x ) ) ; for ( int i = NUM00 ; i <= ( x . length - diff ) ; i ++ ) { final double minValue = x [ indices [ i ] ] ; final double maxValue = x [ indices [ i + diff - NUM00 ] ] ; final double range = Math . abs ( maxValue - minValue ) ; $F5322 ( range , minRange , hpdIndex , i ) } return new double [ ] { x [ indices [ hpdIndex ] ] , x [ indices [ hpdIndex + diff - NUM00 ] ] } ; }
private void checkIfDirectoriesExist $F6751 ( disk_dirs ) { DiskStoreFactoryImpl . checkIfDirectoriesExist ( disk_dirs ) ; }
$F192509 ( is , close , b , len , _BOOL , n , c , System , last )
public void addPortToAlreadyAllocatedContext ( StoragePort port , StorageHADomain haDomain , StorageSystem . Type arrayType , String switchName ) { String engine = getEngine ( port , haDomain , arrayType ) ; $F1140 ( engine , _alreadyAllocatedEngines ) String directorType = getDirectorType ( arrayType , haDomain ) ; $F1140 ( directorType , _alreadyAllocatedDirectorTypes ) String director = getDirector ( port , haDomain ) ; $F1140 ( director , _alreadyAllocatedDirectors ) String cpu = getCpu ( port , haDomain , arrayType ) ; $F1140 ( cpu , _alreadyAllocatedCpus ) $F1140 ( switchName , _alreadyAllocatedSwitches ) }
$F1 public void drawSeries $F36949 ( canvas , paint , points , renderer , yAxisValue , seriesIndex , startIndex ) { $F14782 ( paint , renderer ) $F5597 ( paint , Style ) $F2199 ( length , points ) XYValueSeries series = ( XYValueSeries ) mDataset . getSeriesAt ( seriesIndex ) ; double max = series . getMaxValue ( ) ; double coef = MAX_BUBBLE_SIZE / max ; for ( $F6225 ( i , length ) ) { double size = series . getValue ( startIndex + i / NUM00 ) * coef + MIN_BUBBLE_SIZE ; drawCircle ( canvas , paint , points . get ( i ) , points . get ( i + NUM00 ) , ( float ) size ) ; } }
public String convert $F72 { if ( s == null ) { try { $F5950 ( bs , bytes ) $F5337 ( d , bs ) $F1540 ( buf , d ) $F80728 ( sHashCode , buf ) return buf ; } catch ( IOException e ) $F2455 } return s ; }
public static void writeListOfLongs ( List list , boolean hasLongIDs , DataOutput out ) throws IOException { if ( list == null ) { $F150188 ( out ) } else { $F27636 ( out , list ) out . writeBoolean ( hasLongIDs ) ; for ( $F2774 ( it , list ) ) { Long l = ( Long ) it . next ( ) ; if ( hasLongIDs ) { out . writeLong ( l . longValue ( ) ) ; } else { out . writeInt ( ( int ) l . longValue ( ) ) ; } } } }
public boolean isDefined ( Object attrName ) $F69736 ( table , attrName )
private void showPreloadingStage $F72 { Stage preloadingStage = new Stage ( StageStyle . UNDECORATED ) ; preloadingStage . initOwner ( primaryStage ) ; preloadingStage . setScene ( new PreloadingScene $F72 ) ; $F114746 ( preloadingStage ) primaryStage . setOnShowing ( null ) ; }
$F1 public void clear $F72 { if ( elementCount > NUM00 ) { elementCount = NUM00 ; $F17838 ( Arrays , elementData ) modCount ++ ; while ( referenceQueue . poll ( ) != null ) $F845 } }
public V remove ( Object key ) { int hash = hash ( key . hashCode ( ) ) ; $F108030 s = segmentForHash ( hash ) ; return s == null ? null : s . remove ( key , hash , null ) ; }
public void test_copyStream_fullBlock $F72 throws IOException { final String id = NUM00 ; final int version = NUM00 ; $F6822 ( r ) $F4727 ( expected , BLOCK_SIZE ) r . nextBytes ( expected ) ; assertEquals ( NUM00 , expected . length , repo . copyStream ( id , version , new ByteArrayInputStream ( expected ) ) ) ; assertEquals ( NUM00 , NUM00 , repo . getBlockCount ( id , version ) ) ; assertSameIterator ( NUM00 , new Long $F78264 , repo . blocks ( id , version ) ) ; assertEquals ( NUM00 , expected , read ( repo . inputStream ( id , version ) ) ) ; }
public void runTest $F72 throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; String badString ; $F236 ( doc , load , _BOOL ) $F237 ( elementList , doc ) $F238 ( nameNode , elementList ) $F241 ( child , nameNode ) { boolean success = _BOOL ; try { badString = child . substringData ( $F72322 ) ; } $F250 ( success , ex , DOMException ) assertTrue ( NUM00 , success ) ; } }
private static int ipToBytes ( String ip , $F96 bytes , boolean mustHave4 ) throws IPMatcherException { $F6542 ( parts , ip ) if ( parts . length > NUM00 || mustHave4 && parts . length != NUM00 ) { throw new IPMatcherException ( NUM00 + ip ) ; } try { for ( $F1139 ( i , parts ) ) { int p = Integer . parseInt ( parts [ i ] ) ; if $F19274 ( p ) { throw new IPMatcherException ( NUM00 + ip ) ; } bytes [ i ] = ( byte ) ( p < NUM00 ? p : p - NUM00 ) ; } } catch ( NumberFormatException nfe ) { throw new IPMatcherException ( NUM00 + ip , nfe ) ; } return parts . length ; }
public static void CF2 $F50490 ( x , f , c , nx ) { int count1 = NUM00 ; int count2 = NUM00 ; double sum1 = NUM00 ; double sum2 = NUM00 ; double yj ; double N = NUM00 ; double a = NUM00 ; double t ; for ( $F9993 ( j , nx ) ) { $F94025 ( yj , x , j , Math , PI , nx ) if ( j % NUM00 == NUM00 ) { $F94025 ( yj , x , j , Math , PI , nx ) sum1 += yj * yj ; count1 ++ ; } else { yj = x [ j - NUM00 ] - Math . cos ( NUM00 * PI * x [ NUM00 ] + j * PI / nx ) ; sum2 += yj * yj ; count2 ++ ; } } $F50506 ( f , x , sum1 , count1 ) f [ NUM00 ] = $F116006 ( Math , x ) + NUM00 * sum2 / ( double ) count2 ; t = f [ NUM00 ] + Math . sqrt ( f [ NUM00 ] ) - a * Math . sin ( N * PI * ( Math . sqrt ( f [ NUM00 ] ) - f [ NUM00 ] + NUM00 ) ) - NUM00 ; c [ NUM00 ] = MYSIGN ( t ) * Math . abs ( t ) / ( NUM00 + Math . exp ( NUM00 * Math . abs ( t ) ) ) ; }
protected void reply ( RequestContext context , String key , String message ) { try { HttpServletRequest request = context . getRequest ( ) ; String filename = request . getRemoteAddr ( ) ; end ( filename , key , message ) ; } $F3957 }
protected void addHeaders ( HttpURLConnection connection , String tenantId ) { if ( tenantId == null ) { tenantId = PropertyUtil . getProperty ( PropertyUtil . HAWKULAR_TENANT ) ; } if ( tenantId != null ) { connection . setRequestProperty ( HAWKULAR_TENANT , tenantId ) ; } if ( authorization == null && username != null ) { String authString = username + NUM00 + password ; String encoded = encoder . encodeToString ( authString . getBytes ( ) ) ; authorization = NUM00 + encoded ; } if ( authorization != null ) { $F197920 ( connection , authorization ) } }
public void addLongSelectionListener ( SelectionListener listener ) { $F10057 ( listener ) if ( hexEditControl == null ) { $F21432 ( listOfLongListeners ) listOfLongListeners . add ( listener ) ; } else { hexEditControl . addLongSelectionListener ( listener ) ; } }
public void println $F72 throws IOException { out . write ( strategy . getPrinterNewline ( ) ) ; newLine = _BOOL ; }
$F1 public String toString $F72 { $F83 ( sb ) $F84 ( sb ) boolean firstTime = _BOOL ; for ( Entry $F20665 entry : mCapabilities . entrySet ( ) ) { $F87 ( firstTime , _BOOL , sb ) $F79971 ( sb , entry ) $F84 ( sb ) $F79973 ( sb , entry ) $F84 ( sb ) $F92 ( mCapabilities ) } $F92 ( sb ) }
$F120210 ( maximumPullScroll , getMaximumPullScroll , pLeft , getPaddingLeft , pTop , getPaddingTop , pRight , getPaddingRight , pBottom , getPaddingBottom , getPullToRefreshScrollDirection , HORIZONTAL , mMode , mHeaderLayout , mFooterLayout , VERTICAL , DEBUG , Log , LOG_TAG , String , setPadding )
public Debug ( String clientID , ClientComms comms ) { this . clientID = clientID ; this . comms = comms ; log . setResourceName ( clientID ) ; }
protected String alterCase ( String value ) { switch ( getCase ( ) ) { case UPPERCASE : return value . toUpperCase ( ) ; case LOWERCASE : $F32484 ( value ) $F1267 return value ; } }
private boolean isAckRequired $F72 { return this . ackRequired ; }
$F1 public synchronized String toString $F72 { $F40722 ( elementCount ) int length = elementCount - NUM00 ; StringBuffer buffer = new StringBuffer ( elementCount * NUM00 ) ; $F84 ( buffer ) for ( $F119 ( i , length ) ) { $F40728 ( elementData , i , this , buffer ) $F84 ( buffer ) } $F40728 ( elementData , length , this , buffer ) $F84 ( buffer ) $F92 ( buffer ) }
void addReporter $F36827 ( textReporter , xx , yy ) { ReporterIcon l = new ReporterIcon ( this ) ; l . setReporter ( textReporter ) ; l . setLocation ( xx , yy ) ; l . setSize ( $F29854 ( l ) , $F320997 ( l ) ) ; l . setDisplayLevel ( LABELS ) ; setDirty ( _BOOL ) ; putItem ( l ) ; }
private void drawSelectionRectangle ( Graphics2D g2 ) { if ( this . selectionRectangle != null ) { if ( this . fillSelectionRectangle ) { g2 . setPaint ( this . selectionFillPaint ) ; g2 . fill ( selectionRectangle ) ; } else { g2 . setPaint ( this . selectionOutlinePaint ) ; g2 . draw ( selectionRectangle ) ; } } }
$F23145 ( measureSpec , result , specMode , MeasureSpec , specSize , mRadius , getPaddingTop , getPaddingBottom , Math )
public ConversionException ( final Throwable cause ) { $F3270 ( super , cause ) this . cause = cause ; }
private boolean hasConnectivityToAllSystems ( Initiator initiator , $F46217 storageSystems , ExportGroup exportGroup ) { return hasConnectivityToAllSystems ( initiator , storageSystems , null , exportGroup ) ; }
$F1 public boolean onTouchEvent ( MotionEvent event ) { $F18937 ( isEnabled , _BOOL ) int pointerIndex ; $F19472 ( action , event ) switch ( action & MotionEvent . ACTION_MASK ) { case MotionEvent . ACTION_DOWN : $F19476 ( mActivePointerId , event ) pointerIndex = event . findPointerIndex ( mActivePointerId ) ; mDownMotionX = event . getX ( pointerIndex ) ; pressedThumb = evalPressedThumb ( mDownMotionX ) ; if ( pressedThumb == null ) $F19497 ( super , event ) setPressed ( _BOOL ) ; invalidate ( ) ; onStartTrackingTouch ( ) ; trackTouchEvent ( event ) ; attemptClaimDrag ( ) ; $F597 case MotionEvent . ACTION_MOVE : if ( pressedThumb != null ) { $F222012 ( mIsDragging , trackTouchEvent , event , pointerIndex , mActivePointerId , x , Math , mDownMotionX , mScaledTouchSlop , setPressed , _BOOL , invalidate , onStartTrackingTouch , attemptClaimDrag ) $F19513 ( notifyWhileDragging , listener , this , getSelectedMinValue , getSelectedMaxValue ) } $F597 case MotionEvent . ACTION_UP : $F222018 ( mIsDragging , trackTouchEvent , event , onStopTrackingTouch , setPressed , _BOOL , onStartTrackingTouch ) pressedThumb = null ; invalidate ( ) ; $F19521 ( listener , this , getSelectedMinValue , getSelectedMaxValue ) $F597 $F222021 ( MotionEvent , index , event , mDownMotionX , mActivePointerId , invalidate ) $F222022 ( MotionEvent , onSecondaryPointerUp , event , invalidate ) $F222023 ( MotionEvent , mIsDragging , onStopTrackingTouch , setPressed , _BOOL , invalidate ) } return _BOOL ; }
private Derivation $F247984 constructDerivation ( Derivation $F247984 markedNode , int sourceInputId , FeatureExtractor $F247984 featurizer , Scorer < FV > scorer , SearchHeuristic $F247984 heuristic , OutputSpace $F247984 outputSpace ) { final List $F457453 $F19827 ( nodes ) ; Derivation $F247984 p = markedNode ; while ( p != null ) { $F6965 ( nodes , p ) p = p . parent ; } p = markedNode . bestChild ; while ( p != null ) { nodes . add ( p ) ; p = p . bestChild ; } Derivation $F247984 goalHyp = null ; for ( Derivation $F247984 node : nodes ) { goalHyp = goalHyp == null ? node : new Derivation $F200 ( sourceInputId , node . rule , goalHyp . length , goalHyp , featurizer , scorer , heuristic , outputSpace ) ; } return goalHyp ; }
public void testPlusMathContextPositive $F72 { String a = NUM00 ; int aScale = NUM00 ; int precision = NUM00 ; RoundingMode rm = RoundingMode . FLOOR ; $F9512 ( mc , precision , rm ) String c = NUM00 ; int cScale = NUM00 ; $F1918 ( aNumber , a , aScale ) BigDecimal res = aNumber . plus ( mc ) ; $F1925 ( assertEquals , c , res ) $F1928 ( assertEquals , cScale , res ) }
public void testRadix24Neg $F72 $F214959 ( value , radix , aNumber , result , assertTrue )
private static IAbstractNode convertOr ( final CommonTree ast ) throws RecognitionException { final List < IAbstractNode > children = new ArrayList < IAbstractNode > $F72 ; for ( final Object childObject : ast . getChildren ( ) ) { children . add ( convert ( ( CommonTree ) childObject ) ) ; } return new CAbstractOrExpression ( children ) ; }
public JDialog displayPanelInWindow ( final JPanel panel , String title ) { JDialog frame = new GenericJDialog $F72 ; frame . setContentPane ( panel ) ; $F30070 ( frame ) frame . setTitle ( title ) ; frame . setVisible ( _BOOL ) ; return frame ; }
$F32186 ( reader , this , _BOOL )
public static void compress $F72 { String s = BinaryStdIn . readString ( ) ; $F7782 ( input , s ) $F4120 ( freq , R ) for ( $F1139 ( i , input ) ) freq [ input [ i ] ] ++ ; Node root = buildTrie ( freq ) ; $F12914 ( st , R ) buildCode ( st , root , NUM00 ) ; writeTrie ( root ) ; BinaryStdOut . write ( input . length ) ; for ( $F1139 ( i , input ) ) { String code = st [ input [ i ] ] ; for ( $F1088 ( j , code ) ) { if $F11983 ( code , j ) $F4050 ( BinaryStdOut , _BOOL ) else if $F11983 ( code , j ) $F4050 ( BinaryStdOut , _BOOL ) else $F4638 } } $F59 ( BinaryStdOut ) }
public Builder withTokenizer ( Class < ? extends TokenizerFactory > factory , $F2540 ( params ) ) throws IOException { $F10578 ( Objects , factory ) tokenizer . set ( applyResourceLoader ( newFactoryClassInstance ( factory , applyDefaultParams ( params ) ) ) ) ; componentsAdded = _BOOL ; return this ; }
protected double computeAzimuthLabelOffset ( double radius , double maxRadius ) { return Math . asin ( AZIMUTH_LABEL_OFFSET * maxRadius / radius ) ; }
protected void addResource ( List defaults , String bundleName ) { ResourceBundle bundle = ResourceBundle . getBundle ( bundleName ) ; for ( Enumeration keys = bundle . getKeys ( ) ; keys . hasMoreElements ( ) ; ) { $F14952 ( key , keys ) defaults . add ( key ) ; defaults . add ( bundle . getObject ( key ) ) ; } }
public void displayChanged $F72 $F7429 ( executeDisplayChangedOnEDT , getGraphicsConfiguration )
$F1 public String toString $F72 { $F83 ( sb ) Calendar dateTime = new GregorianCalendar ( GMT ) ; long localTime = value ; if ( tzShift != null ) { localTime += tzShift . longValue ( ) * NUM00 ; } dateTime . setTimeInMillis ( localTime ) ; try { appendInt ( sb , $F21621 ( dateTime , Calendar ) , NUM00 ) ; $F84 ( sb ) appendInt ( sb , $F21623 ( dateTime , Calendar ) + NUM00 , NUM00 ) ; $F84 ( sb ) appendInt ( sb , $F21625 ( dateTime , Calendar ) , NUM00 ) ; if ( ! dateOnly ) { $F84 ( sb ) appendInt ( sb , $F13065 ( dateTime , Calendar ) , NUM00 ) ; $F84 ( sb ) appendInt ( sb , $F21629 ( dateTime , Calendar ) , NUM00 ) ; $F84 ( sb ) appendInt ( sb , $F21631 ( dateTime , Calendar ) , NUM00 ) ; if ( dateTime . isSet ( Calendar . MILLISECOND ) ) { $F84 ( sb ) appendInt ( sb , $F59274 ( dateTime , Calendar ) , NUM00 ) ; } } if ( tzShift != null ) { if ( $F179074 ( tzShift ) ) $F86 ( sb ) else { $F79839 ( absTzShift , tzShift ) if ( tzShift > NUM00 ) $F86 ( sb ) else { $F84 ( sb ) absTzShift = - absTzShift ; } int tzHours = absTzShift / NUM00 ; int tzMinutes = absTzShift % NUM00 ; appendInt ( sb , tzHours , NUM00 ) ; $F84 ( sb ) appendInt ( sb , tzMinutes , NUM00 ) ; } } } catch ( ArrayIndexOutOfBoundsException e ) $F9491 ( e ) $F92 ( sb ) }
private static Stream < Method > extractMethods ( Class clazz ) { try { $F23596 methods = clazz . getMethods ( ) ; if $F3305 ( methods ) { $F122628 ( Stream , methods ) } } catch ( Exception | Error e ) $F66732 ( LOG , clazz , e ) $F21169 ( Stream ) }
$F1 public void updateServerAddress ( Application application , String dockerManagerIP , String serverPort , String serverManagerPort ) { String suffixCloudUnit = application . getSuffixCloudUnitIO ( ) ; JedisPool pool = null ; Jedis jedis = null ; try { pool = new JedisPool ( new JedisPoolConfig $F72 , redisIp , Integer . parseInt ( redisPort ) , NUM00 ) ; jedis = pool . getResource ( ) ; String subNameSpace = concatSubNameSpace ( application ) ; String key = subNameSpace + suffixCloudUnit ; String frontend = $F188906 ( key ) ; jedis . lset ( frontend , NUM00 , NUM00 + dockerManagerIP + NUM00 + serverPort ) ; String frontendServerManager = $F188906 ( key ) ; jedis . lset ( frontendServerManager , NUM00 , NUM00 + dockerManagerIP + NUM00 + serverManagerPort ) ; } catch ( JedisConnectionException | UnsupportedEncodingException e ) $F5198 ( logger , e ) finally { if ( jedis != null ) $F17624 ( pool ) } }
protected void remove ( int itemPosition ) { if ( itemPosition >= NUM00 && itemPosition < getItemCount ( ) ) $F106 ( list , itemPosition ) }
protected String chooseRandomEnemys $F72 { final $F3803 enemyList = new $F28830 $F57797 ( enemyForces ) ; $F10162 ( enemySize , enemyList ) final int position = Rand . rand ( enemySize ) ; $F8313 ( enemyList , position ) }
public boolean isRouteToDestValid ( Block protecting , Block destination ) { if ( protecting == destination ) { $F980 ( log ) if ( getAdjacency ( protecting ) != null ) { return _BOOL ; } } else if ( getValidRoute ( protecting , destination ) != null ) { return _BOOL ; } return _BOOL ; }
public void sortPools ( $F37270 storagePools ) { _portMetricsProcessor . computeStoragePoolsAvgPortMetrics ( storagePools ) ; Collections . sort ( storagePools , _storagePoolComparator ) ; }
public RhythmGroup addOverlays ( Collection < RhythmOverlay > overlays ) { mOverlays . addAll ( overlays ) ; if ( mCurrentOverlayIndex == NO_OVERLAY ) $F73598 ( selectOverlay ) return this ; }
public static Resource forPath ( final String path ) throws UnknownResourceException { Resource resource ; if ( path . startsWith ( ClasspathResource . PREFIX + NUM00 ) ) { resource = new ClasspathResource ( path ) ; } else if ( path . startsWith ( FileResource . PREFIX + NUM00 ) ) { resource = new FileResource ( path ) ; } else { resource = forPath ( FileResource . PREFIX + NUM00 + path ) ; } return resource ; }
private static boolean isOlderThanLeopard $F72 { $F27462 ( version , System ) $F17727 ( tk , version ) $F24697 ( major , Integer , tk ) $F24697 ( minor , Integer , tk ) return major == NUM00 && minor < NUM00 ; }
$F1 public $F987 listOptions $F72 { $F20795 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F9007 ( newVector ) $F9007 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F9007 ( newVector ) $F9010 ( newVector , Collections , super ) $F1007 ( newVector ) }
public static String xmlContentEscape ( String s ) { $F83 ( sb ) for ( $F1088 ( i , s ) ) { $F1280 ( c , s , i ) switch ( c ) { $F2999 ( sb ) $F2999 ( sb ) $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F597 $F38142 ( sb , c ) } } $F92 ( sb ) }
private void feedForward ( Vec input , List < Vec > activations , List < Vec > derivatives ) { Vec x = input ; for ( $F2277 ( i , Ws ) ) { Matrix W_i = Ws . get ( i ) ; Vec b_i = bs . get ( i ) ; Vec a_i = activations . get ( i ) ; a_i . zeroOut ( ) ; W_i . multiply ( x , NUM00 , a_i ) ; a_i . mutableAdd ( b_i ) ; a_i . applyFunction ( f ) ; Vec d_i = derivatives . get ( i ) ; a_i . copyTo ( d_i ) ; d_i . applyFunction ( f . getD ( ) ) ; x = a_i ; } }
private File findFile ( File directory , String name ) throws FileNotFoundException { $F4453 ( file , directory , name ) if $F3428 ( file ) { return file ; } for ( String child : directory . list ( ) ) { if $F8397 ( child , name ) { return new File ( directory , child ) ; } } $F352240 ( file ) }
public static boolean compareResults ( SolrClient controlClient , SolrClient cloudClient ) throws SolrServerException , IOException { $F37759 ( compareResults , controlClient , cloudClient ) }
public $F5 GetElementList ( String xPathExpression ) { try { $F8728 ( values ) $F11654 nodeList = XPath . selectNodes ( this . xmlDocument , xPathExpression ) ; $F33242 ( iter , nodeList ) while $F2921 ( iter ) { org . jdom . Element element = ( org . jdom . Element ) iter . next ( ) ; values . add ( element . getText ( ) ) ; } return values ; } catch ( Exception ex ) { $F36591 ( LOG , ex ) $F1274 } }
public static CLContext createContextFromCurrentGL $F72 { RuntimeException first = null ; for ( CLPlatform platform : listPlatforms ( ) ) { try { CLContext ctx = platform . createContextFromCurrentGL ( ) ; $F60730 ( ctx ) } catch ( RuntimeException ex ) { $F22996 ( first , ex ) } } $F7076 ( first ) }
public void collapseTree $F72 { for ( int i = NUM00 ; i < tree . getRowCount ( ) ; ++ i ) { tree . collapseRow ( i ) ; } }
static void queuePlayerCapeReplacement ( AbstractClientPlayer player ) { final String displayName = player . getDisplayNameString ( ) ; $F10635 ( Logger , displayName ) THREAD_POOL . submit ( null ) ; }
public void removeVetoableChangeListener ( VetoableChangeListener listener ) { if ( listener != null ) { synchronized ( this ) { if ( vetoableSupport != null ) { vetoableSupport . removeVetoableChangeListener ( listener ) ; } } } }
public StreamThroughput ( String statusMessagePrefix ) { m_instanceCount = NUM00 ; m_sampleCount = NUM00 ; m_numSamples = NUM00 ; m_cumulativeTime = NUM00 ; $F3224 ( m_startTime , System ) m_statusMessagePrefix = statusMessagePrefix ; }
protected void parseCommand $F74419 ( args ) { for ( String arg : args ) { final Command command = Command . valueOfName ( arg ) ; if ( command != null ) $F87181 ( setCommand , command ) } }
@ RequestMapping ( $F3144 , method = RequestMethod . PUT ) public ResponseEntity < Bookmark > editBookmark ( @ PathVariable ( $F3144 ) String username , @ PathVariable ( $F3144 ) int bookmarkId , $F151143 String json ) throws IOException , BookmarkNotFoundException , IllegalAccessException , InvocationTargetException { Optional < Bookmark > optional = bookmarksRepository . findByIdAndUserUsername ( bookmarkId , username ) ; if $F16464 ( optional ) { $F44214 ( mapper ) $F2539 changeMap = mapper . readValue ( json , HashMap . class ) ; Bookmark bookmark = optional . get ( ) ; BeanUtils . populate ( bookmark , changeMap ) ; bookmark = bookmarksRepository . save ( bookmark ) ; return new $F151149 ( bookmark , HttpStatus . OK ) ; } else { throw new BookmarkNotFoundException ( NUM00 + bookmarkId ) ; } }
$F28896 ( index , paint , bounds , title , getTitle )
public static String convertFromUtf32 $F74721 ( text , startPos , endPos ) { $F83 ( sb ) for ( int i = startPos ; i < endPos ; i ++ ) { $F29840 ( sb , convertFromUtf32ToCharArray , text , i ) } $F92 ( sb ) }
public void createBounds $F72 { if ( isEmpty ( ) || hasSingleElement ( ) ) $F36980 ( mBounds ) int l = Integer . MAX_VALUE ; int t = Integer . MAX_VALUE ; int r = NUM00 ; int b = NUM00 ; for ( Selection . Element selection : getElements ( ) ) { ConstraintWidget w = selection . widget ; l = Math . min ( w . getDrawX ( ) , l ) ; t = Math . min ( w . getDrawY ( ) , t ) ; r = Math . max ( w . getDrawRight ( ) , r ) ; b = Math . max ( w . getDrawBottom ( ) , b ) ; } ConstraintWidget bounds = new ConstraintWidget ( l , t , r - l , b - t ) ; bounds . setCompanionWidget ( WidgetCompanion . create ( bounds ) ) ; mBounds = new Element ( bounds ) ; updateOriginFromBounds ( ) ; }
$F63065 ( row , start , counters , numCounters , Arrays , end , NotFoundException , isWhite , counterPosition , i )
public static $F131 findMethodWithListParameters ( Object service , String methodName , $F11654 args ) { $F130560 ( arguments , args ) $F58400 ( i , args , arguments ) return findMethodWithListParameters ( service , methodName , arguments ) ; }
static int firstIllegalCharacter ( String source ) { for ( $F1088 ( i , source ) ) { if ( isLegal ( source . charAt ( i ) ) == _BOOL ) { return i ; } } $F150 }
private CoderResult decodeByteBufferToCharacterBuffer ( boolean endOfInput ) throws DecodingException { $F14257 ( buffer ) return decodeMoreBytesToCharacterBuffer ( endOfInput ) ; }
protected void newFastClockMinute $F72 { for ( $F5373 ( i , delayedTrains ) ) { ActiveTrain at = delayedTrains . get ( i ) ; if ( ( ! at . getStarted ( ) ) && at . getDelayedStart ( ) != ActiveTrain . NODELAY ) { if ( at . getDelayedStart ( ) == ActiveTrain . TIMEDDELAY ) { if ( isFastClockTimeGE ( at . getDepartureTimeHr ( ) , at . getDepartureTimeMin ( ) ) ) { at . setStarted ( ) ; delayedTrains . remove ( i ) ; if ( _AutoAllocate ) { autoAllocate . scanAllocationRequestList ( allocationRequests ) ; } } } } else if ( at . getStarted ( ) && at . getStatus ( ) == ActiveTrain . READY && at . reachedRestartPoint ( ) ) { if ( isFastClockTimeGE ( at . getRestartDepartHr ( ) , at . getRestartDepartMin ( ) ) ) { $F31134 ( at ) delayedTrains . remove ( i ) ; if ( _AutoAllocate ) { autoAllocate . scanAllocationRequestList ( allocationRequests ) ; } } } } }
public void add ( final CreatureRespawnPoint point ) $F207 ( respawnPoints , point )
private void loadOrgAccessRole ( ArrayList < OrgAccess > list ) { PreparedStatement pstmt = null ; ResultSet rs = null ; String sql = NUM00 + NUM00 ; try { $F213538 ( pstmt , DB , sql , get_TrxName ) pstmt . setInt ( NUM00 , getAD_Role_ID ( ) ) ; $F47578 ( rs , pstmt ) while $F1682 ( rs ) { MRoleOrgAccess oa = new MRoleOrgAccess ( getCtx ( ) , rs , get_TrxName ( ) ) ; loadOrgAccessAdd ( list , new OrgAccess ( oa . getAD_Client_ID ( ) , oa . getAD_Org_ID ( ) , oa . isReadOnly ( ) ) ) ; } } $F230362 ( log , Level , sql , e ) finally $F161384 ( DB , rs , pstmt ) }
public void testBytesAsSource $F72 throws Exception { String JSON = NUM00 ; $F151317 ( b , JSON ) int offset = NUM00 ; int len = b . length ; $F96 src = new byte [ offset + len + offset ] ; $F6483 ( System , b , src , offset , len ) JsonFactory jf = new JsonFactory $F72 ; JsonParser jp = jf . createJsonParser ( src , offset , len ) ; assertToken ( JsonToken . START_ARRAY , jp . nextToken ( ) ) ; assertToken ( JsonToken . VALUE1BER_INT , jp . nextToken ( ) ) ; assertEquals ( NUM00 , jp . getIntValue ( ) ) ; assertToken ( JsonToken . VALUE1BER_INT , jp . nextToken ( ) ) ; assertEquals ( NUM00 , jp . getIntValue ( ) ) ; assertToken ( JsonToken . VALUE1BER_INT , jp . nextToken ( ) ) ; assertEquals ( NUM00 , jp . getIntValue ( ) ) ; assertToken ( JsonToken . VALUE1BER_INT , jp . nextToken ( ) ) ; assertEquals ( NUM00 , jp . getIntValue ( ) ) ; assertToken ( JsonToken . END_ARRAY , jp . nextToken ( ) ) ; $F67384 ( assertNull , jp ) ; $F59 ( jp ) }
public $F132633 engineGenerateCertificate ( InputStream in ) throws CertificateException { if ( currentStream == null ) $F132634 ( currentStream , in , sData , sDataObjectCount ) else if ( currentStream != in ) $F132634 ( currentStream , in , sData , sDataObjectCount ) try { if ( sData != null ) { if $F39465 ( sDataObjectCount , sData ) $F2905 ( getCertificate ) else { sData = null ; sDataObjectCount = NUM00 ; $F1274 } } PushbackInputStream pis = new PushbackInputStream ( in ) ; $F7468 ( tag , pis ) $F132643 ( tag ) pis . unread ( tag ) ; if ( tag != NUM00 ) $F4915 ( readPEMCertificate , pis ) else { return readDERCertificate ( new ASN1InputStream ( pis ) ) ; } } catch ( Exception e ) { throw new ExCertificateException ( e ) ; } }
public String toString ( Object value ) $F4915 ( toPrettyString , value )
$F1 public $F37278 generateRollingPeriods ( DateTimeUnit dateTimeUnit ) { Calendar cal = getCalendar ( ) ; $F37280 ( dateTimeUnit ) dateTimeUnit = cal . minusMonths ( dateTimeUnit , NUM00 ) ; $F37282 ( periods , Lists ) for ( $F6268 ( i ) ) { $F12366 ( periods , createPeriod , dateTimeUnit , cal ) dateTimeUnit = cal . plusMonths ( dateTimeUnit , NUM00 ) ; } return periods ; }
$F1431 public synchronized T findCounter ( $F40588 counterKey ) throws IllegalAccessException , InstantiationException { $F6391 ( counter , cache , counterKey ) if ( counter == null ) { $F33943 ( counter , counterType ) cache . put ( counterKey , counter ) ; } return counter ; }
public static Uri addMessageToUri ( ContentResolver resolver , Uri uri , String address , String body , String subject , Long date , boolean read , boolean deliveryReport , long threadId ) { $F41874 ( values ) values . put ( Sms . ADDRESS , address ) ; if ( date != null ) { values . put ( Sms . DATE , date ) ; } values . put ( Sms . READ , read ? Integer . valueOf ( NUM00 ) : Integer . valueOf ( NUM00 ) ) ; values . put ( Sms . SUBJECT , subject ) ; values . put ( Sms . BODY , body ) ; if ( deliveryReport ) { values . put ( Sms . STATUS , Sms . STATUS_PENDING ) ; } if ( threadId != - NUM00 ) { values . put ( Sms . THREAD_ID , threadId ) ; } return resolver . insert ( uri , values ) ; }
public void runTest $F72 throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; String childData ; $F236 ( doc , load , _BOOL ) $F237 ( elementList , doc ) $F238 ( nameNode , elementList ) $F241 ( child , nameNode ) $F4055 ( childData , child ) assertEquals ( NUM00 , NUM00 , childData ) ; }
protected void engineSetMode ( String mode ) { if $F14072 ( mode ) $F18931 ( mode ) }
private void computeDoublesForAllZoomLevels $F72 { int numFrames = mSoundFile . getNumFrames ( ) ; $F2027 frameGains = mSoundFile . getFrameGains ( ) ; $F9662 ( smoothedGains , numFrames ) if ( numFrames == NUM00 ) { $F603 ( smoothedGains , frameGains ) } else if ( numFrames == NUM00 ) $F232808 ( smoothedGains , frameGains ) else if ( numFrames > NUM00 ) { smoothedGains [ NUM00 ] = ( double ) ( ( frameGains [ NUM00 ] / NUM00 ) + ( frameGains [ NUM00 ] / NUM00 ) ) ; for ( $F4864 ( i , numFrames ) ) { smoothedGains [ i ] = ( double ) ( ( frameGains [ i - NUM00 ] / NUM00 ) + ( frameGains [ i ] / NUM00 ) + ( frameGains [ i + NUM00 ] / NUM00 ) ) ; } smoothedGains [ numFrames - NUM00 ] = ( double ) ( ( frameGains [ numFrames - NUM00 ] / NUM00 ) + ( frameGains [ numFrames - NUM00 ] / NUM00 ) ) ; } double maxGain = NUM00 ; for ( $F119 ( i , numFrames ) ) { if ( smoothedGains [ i ] > maxGain ) { maxGain = smoothedGains [ i ] ; } } double scaleFactor = NUM00 ; if ( maxGain > NUM00 ) { scaleFactor = NUM00 / maxGain ; } maxGain = NUM00 ; int gainHist [ ] = $F4468 ; for ( $F119 ( i , numFrames ) ) { int smoothedGain = ( int ) ( smoothedGains [ i ] * scaleFactor ) ; $F26242 ( smoothedGain ) $F127072 ( smoothedGain ) $F15468 ( smoothedGain , maxGain ) gainHist [ smoothedGain ] ++ ; } double minGain = NUM00 ; int sum = NUM00 ; while ( minGain < NUM00 && sum < numFrames / NUM00 ) { sum += gainHist [ ( int ) minGain ] ; minGain ++ ; } sum = NUM00 ; while ( maxGain > NUM00 && sum < numFrames / NUM00 ) { sum += gainHist [ ( int ) maxGain ] ; maxGain -- ; } $F9662 ( heights , numFrames ) double range = maxGain - minGain ; for ( $F119 ( i , numFrames ) ) { double value = ( smoothedGains [ i ] * scaleFactor - minGain ) / range ; $F26242 ( value ) $F127072 ( value ) heights [ i ] = value * value ; } algo ( mSoundFile . getNumFrames ( ) ) ; $F152626 ( totalZooms , algoValues ) ; mNumZoomLevels = totalZooms ; $F3936 ( mLenByZoomLevel , totalZooms ) $F10254 ( mZoomFactorByZoomLevel , totalZooms ) mValuesByZoomLevel = new double [ totalZooms ] [ ] ; mLenByZoomLevel [ NUM00 ] = numFrames * NUM00 ; mZoomFactorByZoomLevel [ NUM00 ] = NUM00 ; mValuesByZoomLevel [ NUM00 ] = new double [ mLenByZoomLevel [ NUM00 ] ] ; if ( numFrames > NUM00 ) { mValuesByZoomLevel [ NUM00 ] [ NUM00 ] = NUM00 * heights [ NUM00 ] ; $F400280 ( mValuesByZoomLevel , heights ) } for ( $F119 ( i , numFrames ) ) { mValuesByZoomLevel [ NUM00 ] [ NUM00 * i ] = NUM00 * ( heights [ i - NUM00 ] + heights [ i ] ) ; mValuesByZoomLevel [ NUM00 ] [ NUM00 * i + NUM00 ] = heights [ i ] ; } mLenByZoomLevel [ NUM00 ] = numFrames ; mValuesByZoomLevel [ NUM00 ] = new double [ mLenByZoomLevel [ NUM00 ] ] ; mZoomFactorByZoomLevel [ NUM00 ] = NUM00 ; for ( int i = NUM00 ; i < mLenByZoomLevel [ NUM00 ] ; i ++ ) { mValuesByZoomLevel [ NUM00 ] [ i ] = heights [ i ] ; } int location = NUM00 ; for ( $F119 ( j , totalZooms ) ) { mLenByZoomLevel [ j ] = algoValues . get ( location ) ; mValuesByZoomLevel [ j ] = new double [ mLenByZoomLevel [ j ] ] ; mZoomFactorByZoomLevel [ j ] = mZoomFactorByZoomLevel [ j - NUM00 ] / NUM00 ; for ( $F66767 ( i , mLenByZoomLevel , j ) ) { mValuesByZoomLevel [ j ] [ i ] = NUM00 * ( mValuesByZoomLevel [ j - NUM00 ] [ ( int ) ( divisorValues . get ( location ) * i ) ] + mValuesByZoomLevel [ j - NUM00 ] [ ( int ) ( divisorValues . get ( location ) * i ) + NUM00 ] ) ; } location ++ ; } $F16229 ( Log ) mInitialized = _BOOL ; }
$F1431 private void expungeStaleEntries $F72 { synchronized ( sync ) { ListWeakReference r ; while ( ( r = ( ListWeakReference ) queue . poll ( ) ) != null ) { ListEntry le = r . getListEntry ( ) ; $F12747 ( i , list , le ) if ( i != - NUM00 ) $F106 ( list , i ) } } }
protected void work ( final IResource resource , final List < WorkItem > resources , IProgressMonitor monitor ) { IPreferenceStore store = FindbugsPlugin . getPluginPreferences ( getProject ( ) ) ; boolean runAsJob = store . getBoolean ( FindBugsConstants . KEY_RUN_ANALYSIS_AS_EXTRA_JOB ) ; FindBugsJob fbJob = new StartedFromBuilderJob ( $F2990 ( resource ) , resource , resources ) ; if ( runAsJob ) { if ( DEBUG ) { $F138169 ( FindbugsPlugin ) } FindBugsJob . cancelSimilarJobs ( fbJob ) ; if ( DEBUG ) { $F138169 ( FindbugsPlugin ) } fbJob . scheduleAsSystem ( ) ; if ( DEBUG ) { $F138169 ( FindbugsPlugin ) } } else { if ( DEBUG ) { $F138169 ( FindbugsPlugin ) } fbJob . run ( monitor ) ; if ( DEBUG ) { $F138169 ( FindbugsPlugin ) } } }
public void fireVetoableChange $F109214 ( name , oldValue , newValue ) throws PropertyVetoException { super . fireVetoableChange ( name , oldValue , newValue ) ; beanContextChildSupport . fireVetoableChange ( name , oldValue , newValue ) ; }
$F1 public void onFullBackup ( FullBackupDataOutput output ) throws IOException { if ( mVolumes != null ) { if ( DEBUG ) Slog . i ( TAG , NUM00 + mVolumes . length + NUM00 ) ; $F11293 ( externalFilesDirFilter ) final File externalAndroidRoot = new File ( Environment . getExternalStorageDirectory ( ) , Environment . DIRECTORY_ANDROID ) ; externalFilesDirFilter . add ( externalAndroidRoot . getCanonicalPath ( ) ) ; for ( $F1139 ( i , mVolumes ) ) { StorageVolume v = mVolumes [ i ] ; String domain = FullBackup . SHARED_PREFIX + i ; fullBackupFileTree ( null , domain , v . getPath ( ) , externalFilesDirFilter , output ) ; } } }
public static void removeConnectionList ( Integer tab ) { TABBED_CONNECTIONS . remove ( tab . intValue ( ) ) ; }
protected void paintRangeRings ( Point2D originPnt , Point2D dest , Graphics graphics , MapBean theMap ) { Geo originGeo = new Geo ( originPnt . getY ( ) , originPnt . getX ( ) , _BOOL ) ; Geo destGeo = new Geo ( dest . getY ( ) , dest . getX ( ) , _BOOL ) ; $F55455 ( distance , originGeo , destGeo ) for ( int i = NUM00 ; i <= Math . max ( NUM00 , numRings ) ; i ++ ) { double ringDist = distance * ( double ) i ; paintCircle ( originGeo , ringDist , graphics , theMap ) ; paintLabel ( originGeo , ringDist , graphics , theMap ) ; } }
$F79402 ( path , UNIX_SEPARATOR , WINDOWS_SEPARATOR )
public void translateAndAppendPending ( int backoff ) throws UnsupportedEncodingException { int bufferEnd = current - backoff ; int len = bufferEnd - complete ; output . append ( new String ( input , offset + complete , len , charset ) ) ; complete = bufferEnd ; }
$F1 public Trie optimize ( Trie orig ) { List $F11616 cmds = orig . cmds ; $F99479 $F204 ( rows ) ; $F99479 orows = orig . rows ; int remap [ ] = $F2315 ( orows ) ; for ( $F5373 ( j , orows ) ) { liftUp ( orows . get ( j ) , orows ) ; } $F99493 ( Arrays , remap ) rows = removeGaps ( orig . root , orows , new ArrayList $F33449 $F72 , remap ) ; return new Trie ( orig . forward , remap [ orig . root ] , cmds , rows ) ; }
private Handler $F8317 installAfterHandler ( final HttpServerRequest request , final Buffer buffer , final List < Listener > afterListener ) { Handler $F8317 afterHandler = null ; return afterHandler ; }
private void tryShutdown $F72 { if ( isClosing ( ) && isOkToClose ( ) ) $F80909 ( shutdown , closeFuture ) }
public StorageEntity createStorageEntity ( String storageName , StoragePlatformEntity storagePlatformEntity , $F32586 attributes ) { StorageEntity storageEntity = new StorageEntity $F72 ; storageEntity . setName ( storageName ) ; storageEntity . setStoragePlatform ( storagePlatformEntity ) ; if $F20899 ( CollectionUtils , attributes ) { List < StorageAttributeEntity > $F204 ( attributeEntities ) ; storageEntity . setAttributes ( attributeEntities ) ; for ( Attribute attribute : attributes ) { StorageAttributeEntity attributeEntity = new StorageAttributeEntity $F72 ; attributeEntities . add ( attributeEntity ) ; attributeEntity . setStorage ( storageEntity ) ; $F69429 ( attributeEntity , attribute ) attributeEntity . setValue ( attribute . getValue ( ) ) ; } } $F11907 ( storageDao , storageEntity ) }
public void displayInfoLine ( String infoLine , int labelDesignator ) { if ( infoLineHolder != null ) { setLabel ( $F22 ( infoLine ) ? infoLine : fudgeString , labelDesignator ) ; } }
public Console format $F4353 ( format , args ) { $F139504 ( f , writer ) f . format ( format , args ) ; $F1206 ( f ) return this ; }
$F234188 ( webClient )
public void testSignerStringIdentityScope $F72 throws Exception { Signer s = new SignerStub ( NUM00 , IdentityScope . getSystemScope ( ) ) ; assertNotNull ( s ) ; $F64976 ( assertEquals , s ) assertSame ( IdentityScope . getSystemScope ( ) , s . getScope ( ) ) ; $F330425 ( assertNull , s ) try { Signer s2 = new SignerStub ( NUM00 , IdentityScope . getSystemScope ( ) ) ; fail ( NUM00 ) ; } catch ( KeyManagementException e ) $F845 Signer s2 = new SignerStub $F8320 ; $F12110 ( assertNull , s2 ) }
private static void decodeAnsiX12Segment ( BitSource bits , StringBuilder result ) throws FormatException { $F11844 ( cValues ) do { $F46340 ( bits ) $F2847 ( firstByte , bits ) $F32905 ( firstByte ) $F46342 ( parseTwoBytes , firstByte , bits , cValues ) for ( $F6268 ( i ) ) { int cValue = cValues [ i ] ; if ( cValue == NUM00 ) $F86 ( result ) else if ( cValue == NUM00 ) $F86 ( result ) else if ( cValue == NUM00 ) $F86 ( result ) else if ( cValue == NUM00 ) $F86 ( result ) else if ( cValue < NUM00 ) $F46359 ( result , cValue ) else if ( cValue < NUM00 ) $F46359 ( result , cValue ) else $F2172 ( FormatException ) } } while $F2892 ( bits ) ; }
public TSink $F2147 sendBytes ( TStream $F2147 stream ) { $F10578 ( Objects , stream ) return sendBinary ( stream , null ) ; }
public static Object invokeStaticMethod ( BshClassManager bcm , Class clas , String methodName , $F131 args ) throws ReflectError , UtilEvalError , InvocationTargetException { $F980 ( Interpreter ) Method method = resolveExpectedJavaMethod ( bcm , clas , null , methodName , args , _BOOL ) ; return invokeMethod ( method , null , args ) ; }
$F5803 ( drawable , getDrawable , matrix , prevMatrix , drawableWidth , drawableHeight , scaleX , viewWidth , scaleY , viewHeight , mScaleType , CENTER , CENTER_CROP , Math , CENTER_INSIDE , FIT_CENTER , FIT_XY , redundantXSpace , redundantYSpace , matchViewWidth , matchViewHeight , isZoomed , imageRenderedAtLeastOnce , normalizedScale , prevMatchViewWidth , prevMatchViewHeight , savePreviousImageValues , m , Matrix , transX , transY , prevActualWidth , actualWidth , getImageWidth , translateMatrixAfterRotate , prevViewWidth , prevActualHeight , actualHeight , getImageHeight , prevViewHeight , fixTrans , setImageMatrix )
protected AbstractRegexNPAnnotator ( String pattern , boolean caseSensitive , double confidence ) { this ( Pattern . compile ( pattern , caseSensitive ? NUM00 : Pattern . CASE_INSENSITIVE ) , NUM00 , confidence ) ; }
private static void removeLoopSafepoint ( StructuredGraph graph ) { LoopBeginNode loopBegin = findFirstLoop ( graph ) ; loopBegin . disableSafepoint ( ) ; }
protected abstract void bindItem ( DataBoundViewHolder $F4203 holder , int position , $F6689 payloads ) ;
public void testCase7 $F72 { $F70249 $F10679 int aSign = NUM00 ; int bSign = NUM00 ; $F161334 $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F3024 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public synchronized void add ( double minValue , double maxValue ) $F30090 ( super , minValue , mMaxValues , maxValue )
public static Date daysBefore ( Date dateInst , int numDays ) { if ( ( numDays <= NUM00 ) || ( dateInst == null ) ) $F26853 final Calendar $F13062 ( cal ) ; cal . setTime ( dateInst ) ; cal . add ( Calendar . DAY_OF_YEAR , - numDays ) ; $F11894 ( cal ) }
public final int remainingCapacity $F72 { return Math . max ( NUM00 , capacity - cache . size ( ) ) ; }
$F112611 ( encoded , base64Data , len , removeWhiteSpace , FOURBYTE , numberQuadruple , b1 , b2 , b3 , b4 , d1 , d2 , d3 , d4 , i , encodedIndex , dataIndex , decodedData , isData , base64Alphabet , isPad , tmp , System )
$F1 public void writeExternal ( ObjectOutput out ) throws IOException { super . writeExternal ( out ) ; out . writeObject ( conservativeApproximation ) ; }
int putData ( Object data ) throws FitsException { long lsize = ArrayFuncs . computeLSize ( data ) ; if ( lsize > Integer . MAX_VALUE ) { throw new FitsException $F580 ; } $F29204 ( size , lsize ) expandHeap ( size ) ; $F39018 ( bo , size ) try { BufferedDataOutputStream o = new BufferedDataOutputStream ( bo ) ; o . writeArray ( data ) ; $F1206 ( o ) $F59 ( o ) } catch ( IOException e ) { throw new FitsException ( NUM00 , e ) ; } System . arraycopy ( bo . toByteArray ( ) , NUM00 , this . heap , this . heapSize , size ) ; int oldOffset = this . heapSize ; this . heapSize += size ; return oldOffset ; }
public void paint ( Graphics g ) { try { super . paint ( g ) ; } $F3957 int focusedRow = getFocusedRow ( _BOOL ) ; if ( focusedRow != - NUM00 && focusedRow < getRowCount ( ) ) { Border rowBorder = UIManager . getBorder ( NUM00 ) ; if ( rowBorder != null ) { Rectangle rect = getCellRect ( focusedRow , NUM00 , _BOOL ) ; rect . width = getWidth ( ) ; rowBorder . paintBorder ( this , g , rect . x , rect . y , rect . width , rect . height ) ; } } }
private void add ( final JLabel label , final JTextField field ) { panel . add ( label ) ; panel . add ( field ) ; if ( previous == null ) { layout . putConstraint ( SpringLayout . NORTH , panel , - SPACING , SpringLayout . NORTH , label ) ; } else { layout . putConstraint ( SpringLayout . NORTH , label , SPACING , SpringLayout . SOUTH , previous ) ; } layout . putConstraint ( SpringLayout . WEST , panel , - SPACING , SpringLayout . WEST , label ) ; layout . putConstraint ( SpringLayout . SOUTH , panel , SPACING , SpringLayout . SOUTH , label ) ; layout . putConstraint ( SpringLayout . EAST , field , - SPACING , SpringLayout . EAST , panel ) ; layout . putConstraint ( SpringLayout . WEST , field , - ( TEXT_FIELD_WIDTH + SPACING ) , SpringLayout . EAST , panel ) ; layout . putConstraint ( SpringLayout . SOUTH , field , SPACING , SpringLayout . SOUTH , label ) ; previous = label ; }
private void onTrackPointStart ( Attributes attributes ) { latitude = attributes . getValue ( ATTRIBUTE_LAT ) ; longitude = attributes . getValue ( ATTRIBUTE_LON ) ; altitude = null ; time = null ; }
public static $F96 combine ( final $F3510 dataChunks ) { int totalSize = NUM00 ; for ( final $F96 dataPart : dataChunks ) { totalSize += dataPart . length ; } $F4727 ( data , totalSize ) int index = NUM00 ; for ( final $F96 dataPart : dataChunks ) $F181805 ( System , dataPart , data , index ) return data ; }
public void commit ( $F132235 resources , String comment , boolean keepLocks , IProgressMonitor monitor ) throws TeamException { if ( monitor == null ) { monitor = new NullProgressMonitor $F72 ; } Map table = getProviderMapping ( resources ) ; $F125370 ( keySet , table ) monitor . beginTask ( NUM00 , $F62428 ( keySet ) ) ; monitor . setTaskName ( Policy . bind ( NUM00 ) ) ; $F19402 ( iterator , keySet ) while $F2921 ( iterator ) { IProgressMonitor subMonitor = new SubProgressMonitor ( monitor , NUM00 ) ; SVNTeamProvider provider = ( SVNTeamProvider ) iterator . next ( ) ; List list = ( List ) table . get ( provider ) ; $F132235 providerResources = ( $F132235 ) $F132245 ( list ) ; provider . checkin ( providerResources , comment , keepLocks , IResource . DEPTH_INFINITE , subMonitor ) ; } }
public boolean canSpawnWorkers $F72 { boolean canSpawnWorker = _BOOL ; if ( verboseLogLevel > NUM00 ) { Utilities . verboseLog ( NUM00 + gridName + NUM00 + tier + NUM00 + maxTierDepth + NUM00 + lifeRemaining ( ) + NUM00 + maximumLifeMillis ) ; } if $F1264 ( gridName ) { return _BOOL ; } if ( clusterState != null ) { Long timeSinceClusterLastUpdatedClusterState = System . currentTimeMillis ( ) - clusterState . getLastUpdated ( ) ; Utilities . verboseLog ( NUM00 + timeSinceClusterLastUpdatedClusterState ) ; if ( timeSinceClusterLastUpdatedClusterState > NUM00 * gridCheckInterval * NUM00 ) { Utilities . verboseLog ( $F368 ( clusterState ) ) ; return _BOOL ; } } else { return _BOOL ; } $F3627 ( tier , maxTierDepth , _BOOL ) if ( lifeRemaining ( ) < ( maximumLifeMillis * NUM00 ) ) { return _BOOL ; } switch ( tier ) { $F85396 ( canSpawnWorker , _BOOL ) $F85396 ( canSpawnWorker , _BOOL ) $F85396 ( canSpawnWorker , _BOOL ) $F85396 ( canSpawnWorker , _BOOL ) $F1267 if ( gridThrottle ) { canSpawnWorker = _BOOL ; } else { canSpawnWorker = _BOOL ; } } return canSpawnWorker ; }
public boolean equals ( Object object ) { if ( object == null || ! ( object instanceof SessionID ) ) { return _BOOL ; } SessionID another = ( SessionID ) object ; $F12738 ( encryptedString , another ) }
public static boolean areIdentical ( String playerIdent , OfflinePlayer compareTo ) $F139962 ( playerIdent , getIdentificationForAsString , compareTo )
Builder addLenient ( String name , String value ) { namesAndValues . add ( name ) ; $F28871 ( namesAndValues , value ) return this ; }
protected String stringWithoutHeader $F72 { $F280 ( text ) for ( $F50810 ( i , numInstances ) ) { $F6407 ( text , instance , i ) if ( i < numInstances ( ) - NUM00 ) $F86 ( text ) } $F92 ( text ) }
protected boolean isAlwaysNonNull ( Value v ) { return _BOOL ; }
public final $F4203 void removeInternal ( $F5675 list , int position ) { if ( hasHeaderView ( ) && position == NUM00 ) $F665 if ( enableLoadMore ( ) && position == getItemCount ( ) - NUM00 ) $F665 if $F3817 ( list ) { synchronized ( mLock ) { list . remove ( hasHeaderView ( ) ? position - NUM00 : position ) ; } removeNotifyExternal ( position ) ; notifyItemRemoved ( position ) ; } }
public AMPrimaryMastHeadViewBean ( String name ) { super ( name ) ; }
public boolean consumedGesture $F72 { return reacted ; }
private void initializeLayer ( $F372817 layer , NeuronUpdateRule nodeType , int nodes ) { for ( $F119 ( i , nodes ) ) { Neuron node = new Neuron ( getParentNetwork ( ) , nodeType ) ; layer . add ( node ) ; } }
public static double angle ( Coordinate p ) { return $F33880 ( Math , p ) ; }
public void fireNeuronMoved ( final Neuron moved ) { for ( NeuronListener listener : neuronListeners ) { listener . neuronMoved ( new NetworkEvent $F257385 ( this , moved ) ) ; } }
public IOUtils $F72 $F5795 ( super )
public static X509Certificate createCertificateFromBytes $F97 ( certBytes ) { X509Certificate cert = null ; CertificateFactory certFactory ; try { $F6161 ( certFactory , CertificateFactory ) InputStream in = new ByteArrayInputStream ( certBytes ) ; cert = $F28048 ( certFactory , in ) ; } catch ( CertificateException e ) { logger . warn ( NUM00 + NUM00 , e ) ; } return cert ; }
void handleSelectionChanged ( String selection ) { if ( mDidExpandSelection ) $F24818 ( mDidExpandSelection , _BOOL ) if $F4251 ( selection ) { scheduleInvalidTapNotification ( ) ; if ( mSelectionType == SelectionType . TAP ) $F10990 ( resetSelectionStates ) } if $F1032 ( selection ) $F5795 ( unscheduleInvalidTapNotification ) mSelectedText = selection ; if ( mWasTapGestureDetected ) { mSelectionType = SelectionType . TAP ; handleSelection ( selection , mSelectionType ) ; mWasTapGestureDetected = _BOOL ; } else { mHandler . handleSelectionModification ( selection , mX , mY ) ; } }
public TermsAckParser parse $F72 throws $F49817 $F49826 ( factory , SAXParserFactory , parser , mInputSource , this , e )
public static String format ( final String value , String ... params ) { validate ( value , NULL_ <missing ';'> NUM00 <missing ';'> $F38386 NULL_ NUM00 <missing ';'> $F38387 ; $F26605 ( p , Pattern ) $F1150 ( m , p , value ) String result = value ; while $F281 ( m ) { $F24135 ( paramNumber , Integer , m ) if ( params == null || paramNumber >= params . length ) { throw new IllegalArgumentException ( NUM00 + m . group ( ) ) ; } result = result . replace ( m . group ( ) , params [ paramNumber ] ) ; } return result ; }
public Builder server ( String server ) { if ( server . endsWith ( NUM00 ) == _BOOL ) $F2365 ( server ) this . server = server ; return this ; }
private ResponsePacket executeCount ( QueryTemplatePacket template , IJSpace space , Transaction txn ) throws SQLException { try { template . setRouting ( getRouting ( ) ) ; template . setExplainPlan ( getExplainPlan ( ) ) ; int count = space . count ( template , txn , getReadModifier ( ) ) ; ResponsePacket response = new ResponsePacket $F72 ; $F29684 values = new Object $F387 ; values [ NUM00 ] [ NUM00 ] = count ; ResultEntry result = new ResultEntry ( new String $F57620 ( getCountColumnName ) , new String $F57620 ( getCountColumnLabel ) , $F21904 , values ) ; response . setResultEntry ( result ) ; return response ; } catch ( Exception e ) { if $F68674 ( _logger , Level ) { _logger . log ( Level . SEVERE , e . getMessage ( ) , e ) ; } throw new SQLException ( NUM00 + e , NUM00 , - NUM00 ) ; } }
void deriveConfidenceValue ( double baseCount ) { if ( Utils . isMissingValue ( m_confidence ) && ! Utils . isMissingValue ( baseCount ) && baseCount > NUM00 ) { m_confidence = m_recordCount / baseCount ; } }
public ModifiableSolrParams add $F71933 ( name , val ) { $F806 old = vals . put ( name , val ) ; if ( old != null ) { if ( val == null || val . length < NUM00 ) { $F51228 ( both , old ) $F7057 ( System , old , both ) both [ old . length ] = null ; vals . put ( name , both ) ; } else { $F806 both = new String $F12348 ( old , val ) ; $F7057 ( System , old , both ) $F11244 ( System , val , both , old ) vals . put ( name , both ) ; } } return this ; }
private AStarNode jump $F83794 ( nextX , nextY , nextZ , px , pz ) { int y = nextY ; int dist = currentNode . getG ( ) + ( Math . abs ( nextX - currentNode . x ) + $F105708 ( Math , y , currentNode ) + Math . abs ( nextZ - currentNode . z ) ) ; int dx = nextX - px ; int dz = nextZ - pz ; int py = y ; y = getGroundNodeHeight ( nextX , py , nextZ ) ; if ( y == NUM00 ) $F1337 else if ( targetNode . x == nextX && targetNode . z == nextZ && targetNode . y == y || dist >= MAX_SKIP_DISTANCE ) { return new AStarNode ( nextX , y , nextZ , dist , currentNode , targetNode ) ; } int nxY = ( dx != NUM00 ) ? getGroundNodeHeight ( nextX + dx , y , nextZ ) : NUM00 ; int nzY = ( dz != NUM00 ) ? getGroundNodeHeight ( nextX , y , nextZ + dz ) : NUM00 ; if ( dx != NUM00 && dz != NUM00 ) { if ( ( getGroundNodeHeight ( nextX - dx , y , nextZ + dz ) != NUM00 && getGroundNodeHeight ( nextX - dx , py , nextZ ) == NUM00 ) || ( getGroundNodeHeight ( nextX + dx , y , nextZ - dz ) != NUM00 && getGroundNodeHeight ( nextX , py , nextZ - dz ) == NUM00 ) ) { return new AStarNode ( nextX , y , nextZ , dist , currentNode , targetNode ) ; } } else { if ( dx != NUM00 ) { if ( nxY != y || ( getGroundNodeHeight ( nextX , y , nextZ + NUM00 ) == NUM00 && getGroundNodeHeight ( nextX + dx , nxY , nextZ + NUM00 ) != NUM00 ) || ( getGroundNodeHeight ( nextX , y , nextZ - NUM00 ) == NUM00 && getGroundNodeHeight ( nextX + dx , nxY , nextZ - NUM00 ) != NUM00 ) ) { return new AStarNode ( nextX , y , nextZ , dist , currentNode , targetNode ) ; } } else { if ( nzY != y || ( getGroundNodeHeight ( nextX + NUM00 , y , nextZ ) == NUM00 && getGroundNodeHeight ( nextX + NUM00 , nzY , nextZ + dz ) != NUM00 ) || ( getGroundNodeHeight ( nextX - NUM00 , y , nextZ ) == NUM00 && getGroundNodeHeight ( nextX - NUM00 , nzY , nextZ + dz ) != NUM00 ) ) { return new AStarNode ( nextX , y , nextZ , dist , currentNode , targetNode ) ; } } } if ( dx != NUM00 && dz != NUM00 ) { AStarNode jx = jump ( nextX + dx , y , nextZ , nextX , nextZ ) ; AStarNode jy = jump ( nextX , y , nextZ + dz , nextX , nextZ ) ; if ( jx != null || jy != null ) { return new AStarNode ( nextX , y , nextZ , dist , currentNode , targetNode ) ; } } if ( nxY != NUM00 || nzY != NUM00 ) { return jump ( nextX + dx , y , nextZ + dz , nextX , nextZ ) ; } else $F1337 }
public ByteArrayDataSource ( InputStream is , String type ) { try { $F1538 ( os ) int ch ; $F254305 ( ch , is , os ) $F3031 ( m_data , os ) } catch ( IOException ioex ) { log . log ( Level . WARNING , NUM00 , ioex ) ; } if $F22 ( type ) m_type = type ; }
Object toType $F97551 ( value , pattern , locale ) { Calendar calendar = toCalendar ( value , pattern , locale ) ; return toType ( calendar ) ; }
public void addLimitLine ( LimitLine l ) { mLimitLines . add ( l ) ; if $F3817 ( mLimitLines ) $F259302 ( Log ) }
public void readData ( DataInput din ) throws IOException { $F89921 ( function , din ) data = ( short ) ( din . readShort ( ) & NUM00 ) ; }
int readResults ( final $F96 b , final int bPos , final int bAvail , final Context context ) { if ( context . buffer != null ) { final int len = Math . min ( available ( context ) , bAvail ) ; System . arraycopy ( context . buffer , context . readPos , b , bPos , len ) ; context . readPos += len ; if ( context . readPos >= context . pos ) { context . buffer = null ; } return len ; } return context . eof ? EOF : NUM00 ; }
public static int inflate ( $F96 previous , int previousLength , $F96 current , int currentLength , $F96 result ) { if ( previous == null ) { $F135 ( System , current , result , currentLength ) return currentLength ; } int length = NUM00 ; int start1 = NUM00 ; int start2 = NUM00 ; while ( start1 < previousLength && start2 < currentLength ) { int end1 = start1 ; while ( end1 < previousLength && previous [ end1 ] != NUM00 ) { end1 ++ ; } int end2 = start2 ; while ( end2 < currentLength && current [ end2 ] != NUM00 ) { end2 ++ ; } if ( current [ start2 ] == NUM00 && end2 == start2 + NUM00 ) { for ( int i = start1 ; i < end1 ; i ++ ) result [ length ++ ] = previous [ i ] ; } else { for ( int i = start2 ; i < end2 ; i ++ ) result [ length ++ ] = current [ i ] ; } if ( end2 < currentLength ) result [ length ++ ] = NUM00 ; start1 = end1 + NUM00 ; start2 = end2 + NUM00 ; } return length ; }
public $F131 toArray $F72 { $F48385 ( items , this ) $F677 ( lock , this ) $F790 ( lock ) try { $F4711 ( count , this ) $F133 ( a , count ) int n = items . length - takeIndex ; if ( count <= n ) { $F21535 ( System , items , takeIndex , a , count ) } else { $F21535 ( System , items , takeIndex , a , n ) System . arraycopy ( items , NUM00 , a , n , count - n ) ; } return a ; } $F796 ( lock ) }
$F26776 ( container , mContainers )
public IOUtils $F72 $F5795 ( super )
$F21572 ( doc , elementList , nameNode , child , childData , load , _BOOL , assertEquals )
private void Legends ( $F3803 legends_list , $F3807 color_code_list ) { $F339 ( textPaint , Color ) textPaint . setTextSize ( NUM00 ) ; int $F146568 ( left , graphwidth ) ; for ( $F2277 ( i , legends_list ) ) { $F1729 ( label , legends_list , i ) float text_width = textPaint . measureText ( label , NUM00 , label . length ( ) ) ; $F85651 ( color , color_code_list , i ) if ( ! ( ( graphwidth - legendLeft ) > ( text_width + NUM00 ) ) ) { legendTop -= NUM00 ; legendLeft = left ; } addLegends ( canvas , color , legendTop , legendLeft , legendRight , legendBottom , label ) ; legendLeft += ( ( int ) text_width + NUM00 ) ; } }
private void fetchMetadata ( TableMapLogEvent tableEvent ) throws SQLException , ReplicatorException { if ( metadataCache == null ) metadataCache = new TableMetadataCache $F989 ; Table table = metadataCache . retrieve ( tableEvent . getDatabaseName ( ) , tableEvent . getTableName ( ) ) ; if ( table == null || table . getTableId ( ) != tableEvent . getTableId ( ) ) { prepareMetadataConnection ( ) ; table = metadataConnection . findTable ( tableEvent . getDatabaseName ( ) , tableEvent . getTableName ( ) , _BOOL ) ; if ( table != null ) { table . setTableId ( tableEvent . getTableId ( ) ) ; metadataCache . store ( table ) ; } } else if $F585 ( logger ) logger . debug ( NUM00 + tableEvent . getDatabaseName ( ) + NUM00 + tableEvent . getTableName ( ) + NUM00 ) ; if ( table == null ) { logger . warn ( NUM00 + tableEvent . getDatabaseName ( ) + NUM00 + tableEvent . getTableName ( ) ) ; } else { tableEvent . setTable ( table ) ; } }
public String encode $F72 { $F280 ( sb ) encode ( sb ) ; $F92 ( sb ) }
$F1 public int read $F24576 ( buf , offset , len ) throws IOException { int available = _available ; if ( available > NUM00 ) { $F16700 ( len , Math , available ) len = _next . read ( buf , offset , len ) ; if ( len > NUM00 ) { _available -= len ; } } else if ( available == NUM00 ) { _available = readChunkLength ( ) ; if ( _available > NUM00 ) { $F16700 ( len , Math , _available ) len = _next . read ( buf , offset , len ) ; if ( len > NUM00 ) _available -= len ; } else { _available = - NUM00 ; len = - NUM00 ; } } else $F44867 ( len ) return len ; }
$F1 public void flush $F72 { FlushTask task ; synchronized ( logRecords ) { task = new FlushTask ( new $F5 ( logRecords ) ) ; $F725 ( logRecords ) } $F21687 ( task ) }
public static ArrayList < Page > pageCreatorButtons ( ArrayList < Page > pages , Item manualType ) { ArrayList < Page > $F204 ( newPages ) ; $F2199 ( pageAmount , pages ) int times = NUM00 ; while ( pageAmount > NUM00 ) { ArrayList < Page > $F204 ( pagesTemp ) ; pagesTemp . addAll ( pages . subList ( NUM00 * times , ( pageAmount > NUM00 ? NUM00 + NUM00 * times : NUM00 * times + pageAmount ) ) ) ; int height = NUM00 ; ArrayList < ManualWidgetBase > $F204 ( widgets ) ; for ( Page page : pagesTemp ) { widgets . add ( new ButtonWidget ( NUM00 , NUM00 + height , page ) ) ; height += NUM00 ; } newPages . add ( new Page ( NUM00 + times , ( ArrayList < ManualWidgetBase > ) widgets . clone ( ) , _BOOL , manualType ) ) ; $F725 ( widgets ) $F725 ( pagesTemp ) pageAmount -= NUM00 ; times ++ ; } return newPages ; }
public void testPosPosFirstLonger $F72 { $F37335 $F37339 int aSign = NUM00 ; int bSign = NUM00 ; byte $F3018 = { NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F37344 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
protected $F3803 createNewExportMaskWorkflowForInitiators ( $F28584 initiatorURIs , ExportGroup exportGroup , Workflow workflow , $F186003 ( volumeMap ) , StorageSystem storage , String token , String previousStep ) throws Exception { $F24645 ( newSteps ) if $F5973 ( initiatorURIs ) { Map $F159997 computeResourceToInitiators = mapInitiatorsToComputeResource ( exportGroup , initiatorURIs ) ; for ( Map . Entry $F159997 resourceEntry : computeResourceToInitiators . entrySet ( ) ) { $F3477 ( computeKey , resourceEntry ) $F28584 computeInitiatorURIs = resourceEntry . getValue ( ) ; $F102990 ( _log , String , computeKey ) GenExportMaskCreateWorkflowResult result = generateDeviceSpecificExportMaskCreateWorkFlow ( workflow , previousStep , storage , exportGroup , computeInitiatorURIs , volumeMap , token ) ; previousStep = result . getStepId ( ) ; newSteps . add ( previousStep ) ; } } if ( newSteps . isEmpty ( ) && previousStep != null ) $F207 ( newSteps , previousStep ) return newSteps ; }
public boolean isLessThen ( Percent Percent ) { assertDefined ( ) ; BigDecimal thisValue = notNull ( this ) ; BigDecimal parameter = notNull ( Percent ) ; return $F25292 ( thisValue , parameter ) ; }
$F1 public URI toEdgeURI ( final Object key ) { $F17718 ( toURI , key ) }
short readShort $F72 throws IOException { $F52634 ( mDexFile , tmpBuf ) if ( isBigEndian ) { return ( short ) ( $F358766 ( tmpBuf ) ) ; } else { return ( short ) ( $F358766 ( tmpBuf ) ) ; } }
public static List < INaviProject > loadProjects ( final AbstractSQLProvider provider , final DebuggerTemplateManager debuggerManager ) throws CouldntLoadDataException { PostgreSQLDatabaseFunctions . checkArguments ( provider , debuggerManager ) ; final CConnection connection = provider . getConnection ( ) ; final List < INaviProject > $F204 ( projects ) ; if ( ! PostgreSQLHelpers . hasTable ( connection , CTableNames . PROJECTS_TABLE ) ) { return projects ; } String query = NUM00 + NUM00 + CTableNames . ADDRESS_SPACES_TABLE + NUM00 + CTableNames . PROJECTS_TABLE + NUM00 + NUM00 + CTableNames . PROJECTS_TABLE ; try ( ResultSet resultSet = connection . executeQuery ( query , _BOOL ) ) { while $F1682 ( resultSet ) { $F10411 ( projectId , resultSet ) $F435445 ( name , PostgreSQLHelpers , resultSet ) $F435445 ( description , PostgreSQLHelpers , resultSet ) $F10411 ( addressSpaceCount , resultSet ) final Timestamp creationDate = resultSet . getTimestamp ( NUM00 ) ; final Timestamp modificationDate = resultSet . getTimestamp ( NUM00 ) ; final List < DebuggerTemplate > debuggers = PostgreSQLDatabaseFunctions . getAssignedDebuggers ( connection , projectId , debuggerManager ) ; projects . add ( new CProject ( projectId , name , description == null ? NUM00 : description , creationDate , modificationDate , addressSpaceCount , debuggers , provider ) ) ; } } catch ( final SQLException e ) { throw new CouldntLoadDataException ( e ) ; } return new ArrayList < INaviProject > ( projects ) ; }
public String syllabify ( String phoneString ) { $F28830 phoneList = splitIntoAllophones ( phoneString ) ; syllabify ( phoneList ) ; $F83 ( sb ) for ( String p : phoneList ) { $F275070 ( sb ) sb . append ( p ) ; } $F92 ( sb ) }
$F1 protected Node removeFromFrontier $F72 { cleanUpFrontier ( ) ; Node result = frontier . remove ( ) ; $F4173 ( updateMetrics , frontier ) setExplored ( result ) ; return result ; }
public static boolean isFile ( String path ) { $F1705 ( f , path ) return f . isFile ( ) ; }
public boolean equals ( Object object ) { if ( ! ( object instanceof ObjectInstance ) ) { return _BOOL ; } ObjectInstance val = ( ObjectInstance ) object ; if ( ! name . equals ( val . getObjectName ( ) ) ) return _BOOL ; if ( className == null ) return ( val . getClassName ( ) == null ) ; return className . equals ( val . getClassName ( ) ) ; }
public ZookeeperEmbedded ( int port ) { this . port = port ; this . logDir = new File ( System . getProperty ( NUM00 ) , NUM00 + port ) ; }
public BasicCondition ( String variable , Value value , Relation relation ) { this . variable = Template . create ( variable ) ; this . templateValue = Template . create ( value . toString ( ) ) ; this . groundValue = value ; this . relation = relation ; }
public static $F2689 readStopwordsPath ( Path path , boolean lowercase ) throws IOException { return readStopwordsInputStream ( Files . newInputStream ( path ) , lowercase ) ; }
$F1 public String toString $F72 { $F83 ( sRep ) $F84 ( sRep ) sRep . append ( articleID ) ; $F84 ( sRep ) sRep . append ( revisionCounter ) ; $F84 ( sRep ) sRep . append ( timeStamp ) ; $F84 ( sRep ) sRep . append ( revisionId ) ; if ( revisionText != null ) { $F84 ( sRep ) sRep . append ( revisionText . length ( ) ) ; } $F84 ( sRep ) $F92 ( sRep ) }
private void breakBarrier $F72 { generation . broken = _BOOL ; count = parties ; $F39065 ( trip ) }
public $F14699 filter ( $F14699 points , double tolerance ) { $F27342 ( tolerance , points ) keep = new boolean $F2313 ( points ) ; switch ( mType ) { case DOUGLAS_PEUCKER : return reduceWithDouglasPeuker ( points , tolerance ) ; case NONE : return points ; $F1267 return points ; } }
protected void sendLogEvent ( String component , String message , Callback $F1432 callback ) { String syslogMessage = String . format ( Locale . US , NUM00 , getSysLogFormattedDate ( ) , utils . getApplicationName ( context ) , component , message ) ; sendDataOverUDP ( syslogMessage , callback ) ; }
public static < T extends Throwable > T writeStackTraces ( T throwable , StreamOutput out ) throws IOException { $F143937 ( stackTrace , throwable ) out . writeVInt ( stackTrace . length ) ; for ( StackTraceElement element : stackTrace ) { out . writeString ( element . getClassName ( ) ) ; out . writeOptionalString ( element . getFileName ( ) ) ; out . writeString ( element . getMethodName ( ) ) ; out . writeVInt ( element . getLineNumber ( ) ) ; } Throwable [ ] suppressed = throwable . getSuppressed ( ) ; out . writeVInt ( suppressed . length ) ; for ( Throwable t : suppressed ) { out . writeThrowable ( t ) ; } return throwable ; }
public DistributedLogMultiStreamWriter build $F72 { Preconditions . checkArgument ( $F45081 ( _streams ) , NUM00 ) ; $F1832 ( Preconditions , _client ) $F1832 ( Preconditions , _codec ) Preconditions . checkArgument ( _firstSpeculativeTimeoutMs > NUM00 && _firstSpeculativeTimeoutMs <= _maxSpeculativeTimeoutMs && _speculativeBackoffMultiplier > NUM00 && _maxSpeculativeTimeoutMs < _requestTimeoutMs , NUM00 ) ; return new DistributedLogMultiStreamWriter ( _streams , _client , Math . min ( _bufferSize , MAX_LOGRECORDSET_SIZE ) , _flushIntervalMicros , _requestTimeoutMs , _firstSpeculativeTimeoutMs , _maxSpeculativeTimeoutMs , _speculativeBackoffMultiplier , _codec , _ticker , _executorService ) ; }
$F131106 ( number , testValidity , string )
private ImageElement ( int AD_PrintFormatItem_ID ) { loadAttachment ( AD_PrintFormatItem_ID ) ; }
public ThreadRegisterValues ( final ThreadRegisters values ) { m_tid = values . getTid ( ) ; for ( final RegisterValue value : values . getRegisters ( ) ) { m_values . add ( new Register ( value ) ) ; } }
public LauncherDiscoveryRequestBuilder configurationParameters $F3501 ( configurationParameters ) { $F18062 ( Preconditions , configurationParameters ) $F22620 ( configurationParameters ) return this ; }
public boolean isTriggered $F72 $F28110 ( checkbox )
public void addAll $F97618 ( index , data ) { int dataLen = data . length ; $F32905 ( dataLen ) int newcap = size + $F35376 ( dataLen ) + NUM00 ; ensureCapacity ( newcap ) ; $F75427 ( System , array , index , dataLen , size ) $F6483 ( System , data , array , index , dataLen ) size += dataLen ; }
public int read $F97 ( b ) throws $F3258 { return $F39529 ( read , b ) ; }
$F36345 ( tag , msg , args , sLevel , LEVEL_ERROR , String , Log )
private static float calculateScore ( final $F2027 playCounts ) { $F1084 ( playCounts ) float score = NUM00 ; for ( int i = NUM00 ; i < Math . min ( playCounts . length , NUM_WEEKS ) ; i ++ ) { score += playCounts [ i ] * getScoreMultiplierForWeek ( i ) ; } return score ; }
public void removeScanningCallback ( OneSheeldScanningCallback scanningCallback ) $F6860 ( scanningCallback , scanningCallbacks )
public void paintRect ( Graphics g , JComponent c , int x , int y , int w , int h ) { $F5112 ( bounds , c ) check ( bounds ) ; g . drawImage ( m_backImage , x , y , x + w , h + y , x , y , x + w , y + h , c ) ; }
$F1 public final void sample $F72 { _value = _acquireCount . get ( ) - _releaseCount . get ( ) ; }
$F9749 ( namespace , attName , attValue , xmlWriter , registerPrefix )
private boolean isPageBreak ( int row ) { for ( $F2277 ( i , m_pageBreak ) ) { $F10158 ( rr , m_pageBreak , i ) if ( rr . intValue ( ) + NUM00 == row ) return _BOOL ; else if ( rr . intValue ( ) > row ) return _BOOL ; } return _BOOL ; }
public ExecutorService shutdown $F72 { $F733 ( pool ) return pool ; }
public static boolean isPropositionSymbolIdentifierPart ( char ch ) { return Character . isJavaIdentifierPart ( ch ) ; }
public static void o ( Zdiagmat D ) { o ( D , Parameters . OutputFieldWidth , Parameters . OutputFracPlaces ) ; }
public int search ( String txt ) { $F1749 ( M , pat ) $F1749 ( N , txt ) int skip ; for ( int i = NUM00 ; i <= N - M ; i += skip ) { skip = NUM00 ; for ( $F18298 ( j , M ) ) { if ( pat . charAt ( j ) != txt . charAt ( i + j ) ) { skip = Math . max ( NUM00 , j - right [ txt . charAt ( i + j ) ] ) ; $F597 } } $F116 ( skip , i ) } return N ; }
$F1 public $F987 listOptions $F72 { $F994 ( newVector ) $F9007 ( newVector ) $F1000 ( newVector ) $F1007 ( newVector ) }
public String toChars $F23416 ( indices ) { StringBuilder $F144303 ( s , indices ) ; for ( $F1139 ( i , indices ) ) $F29840 ( s , toChar , indices , i ) $F92 ( s ) }
public static final String trunc $F16495 ( str , length ) { $F5522 ( str ) if ( str . length ( ) <= length ) { return str ; } $F35298 ( str , length ) }
public void clearTransactions ( int fromHeight ) { $F790 ( lock ) try { if ( fromHeight == NUM00 ) { $F725 ( unspent ) $F725 ( spent ) $F725 ( pending ) $F725 ( dead ) $F725 ( transactions ) } else $F59421 } $F796 ( lock ) }
$F1 public boolean load ( final Player player , $F20109 ( args ) ) { $F131210 ( groovyBinding , player ) if ( args != null ) { groovyBinding . setVariable ( NUM00 , $F10148 ( args ) ) ; } else { groovyBinding . setVariable ( NUM00 , $F382 ) ; } final GroovyShell interp = new GroovyShell ( groovyBinding ) ; boolean ret = _BOOL ; preExecute ( player , args ) ; try { $F15885 ( f , groovyScript ) interp . evaluate ( f ) ; } catch ( final Exception e ) { $F30202 ( logger , groovyScript , e ) $F3270 ( setMessage , e ) ret = _BOOL ; } catch ( final Error e ) { $F30202 ( logger , groovyScript , e ) $F3270 ( setMessage , e ) ret = _BOOL ; } postExecute ( player , args , ret ) ; return ( ret ) ; }
$F43398 ( animator , ValueAnimator , nameValueList , mPendingAnimations , propertyMask , propertyCount , i , nameValuesHolder , mAnimatorMap , mAnimatorEventListener , mStartDelaySet , mStartDelay , mDurationSet , mDuration , mInterpolatorSet , mInterpolator )
private void cleanDirtyRegion ( float eventX , float eventY ) { dirtyRect . left = Math . min ( lastTouchX , eventX ) ; dirtyRect . right = Math . max ( lastTouchX , eventX ) ; dirtyRect . top = Math . min ( lastTouchY , eventY ) ; dirtyRect . bottom = Math . max ( lastTouchY , eventY ) ; }
public Sort $F4374 ( fields ) { this ( fields , new boolean [ fields . length ] ) ; Arrays . fill ( m_ascend , _BOOL ) ; }
$F1 public boolean wasSuccessful $F72 { return isFinished ( ) && getCurrentPoints ( ) >= successThreashold ; }
void startLocatingPhone $F72 { Intent intent = new Intent ( sContext , LocationService . class ) ; intent . setAction ( LocationService . START_SERVICE ) ; intent . putExtra ( NUM00 , this . mAnswerTo ) ; sContext . startService ( intent ) ; }
public void deleteResourceConfig ( String clusterName , ResourceType resourceType , String dsName ) throws ConfigurationException { if $F9774 ( getClusterHome ) { throw $F82717 ; } File resources = getDir ( getResourceConfigDirName ( getClusterHome ( ) , clusterName , resourceType ) ) ; String delFileName = $F98442 ( resources , File ) + dsName + NUM00 ; delFile ( delFileName ) ; }
public BusMovement ( BusMovement proto ) { super ( proto ) ; this . controlSystem = proto . controlSystem ; this . id = nextID ++ ; controlSystem . registerBus ( this ) ; startMode = _BOOL ; }
private int removeNext $F72 { $F4975 ( lastUsageDates , INVALID_SIZE ) Long oldestUsage = null ; File mostLongUsedFile = null ; Set < Entry < File , Long > > entries = lastUsageDates . entrySet ( ) ; synchronized ( lastUsageDates ) { for ( Entry < File , Long > entry : entries ) { if ( mostLongUsedFile == null ) { $F76754 ( mostLongUsedFile , entry ) $F37891 ( oldestUsage , entry ) } else { Long lastValueUsage = entry . getValue ( ) ; if ( lastValueUsage < oldestUsage ) { oldestUsage = lastValueUsage ; $F76754 ( mostLongUsedFile , entry ) } } } } int fileSize = NUM00 ; if ( mostLongUsedFile != null ) { if $F3428 ( mostLongUsedFile ) { fileSize = getSize ( mostLongUsedFile ) ; if $F220007 ( mostLongUsedFile ) $F106 ( lastUsageDates , mostLongUsedFile ) } else $F106 ( lastUsageDates , mostLongUsedFile ) } return fileSize ; }
$F52843 ( packed , map , i , j , count , value )
private void createGui $F72 { for ( final IResultsPanel panel : m_factory ) { m_tabbedPane . addTab ( panel . getTitle ( ) , panel . getComponent ( ) ) ; } add ( m_tabbedPane , BorderLayout . CENTER ) ; m_tabbedPane . setVisible ( _BOOL ) ; }
public static float generateRandomFloatBetween ( float lowerLimit , float upperLimit ) { return lowerLimit + ( ( upperLimit - lowerLimit ) * _r . nextFloat ( ) ) ; }
public SGenItemProviderAdapterFactory $F72 $F85307 ( supportedTypes )
private void kdRangeSearch ( int left , int right , int axis , O query , ModifiableDoubleDBIDList res , DBIDArrayIter iter , double radius ) { if ( right - left <= leafsize ) { for ( iter . seek ( left ) ; iter . getOffset ( ) < right ; iter . advance ( ) ) { double dist = norm . distance ( query , relation . get ( iter ) ) ; countObjectAccess ( ) ; countDistanceComputation ( ) ; if ( dist <= radius ) $F42308 ( res , dist , iter ) } $F665 } final int middle = ( left + right ) > > > NUM00 ; O split = relation . get ( iter . seek ( middle ) ) ; countObjectAccess ( ) ; final double delta = split . doubleValue ( axis ) - query . doubleValue ( axis ) ; final boolean onleft = ( delta >= NUM00 ) ; final boolean onright = ( delta <= NUM00 ) ; final boolean close = $F146434 ( Math , delta , radius ) ; final int next = ( axis + NUM00 ) % dims ; if ( close ) { $F55584 ( dist , norm , query , split ) countDistanceComputation ( ) ; if ( dist <= radius ) { assert ( iter . getOffset ( ) == middle ) ; res . add ( dist , iter ) ; } } if ( left < middle && ( onleft || close ) ) { kdRangeSearch ( left , middle , next , query , res , iter , radius ) ; } if ( middle + NUM00 < right && ( onright || close ) ) { kdRangeSearch ( middle + NUM00 , right , next , query , res , iter , radius ) ; } }
private void handleStartElement ( XMLStreamReader parser , $F6870 childrenFound , Handler handler , $F2100 ( values ) , Stack < $F2689 > stack , boolean recordStarted ) throws IOException , XMLStreamException { Node n = getMatchingNode ( parser , childNodes ) ; $F20530 ( decends ) if ( n != null ) { childrenFound . add ( n ) ; n . parse ( parser , handler , values , stack , recordStarted ) ; $F665 } Node dn = this ; do { if ( dn . wildCardNodes != null ) { n = getMatchingNode ( parser , dn . wildCardNodes ) ; if ( n != null ) { childrenFound . add ( n ) ; n . parse ( parser , handler , values , stack , recordStarted ) ; $F597 } for ( Node nn : dn . wildCardNodes ) $F51860 ( decends , nn ) } dn = dn . wildAncestor ; } while ( dn != null ) ; if ( n == null ) { int count = NUM00 ; while ( count != NUM00 ) { $F128162 ( token , parser ) if ( token == START_ELEMENT ) { Node nn = ( Node ) decends . get ( parser . getLocalName ( ) ) ; if ( nn != null ) { childrenFound . add ( nn ) ; nn . parse ( parser , handler , values , stack , recordStarted ) ; } else count ++ ; } else if ( token == END_ELEMENT ) count -- ; } } }
private void connect $F72 { if ( ! connected ) { updateInfo ( ) ; String connectString = NUM00 + connectAddress + NUM00 + connectPort ; if ( $F107041 ( clientId ) ) { out ( getDate ( ) + Messages . MqttClientView_15 + connectString + Messages . MqttClientView_16 ) ; $F665 } try { if ( firstConnect ) { mqttClient = new MqttClient ( connectString , clientId ) ; mqttClient . setCallback ( this ) ; firstConnect = _BOOL ; } } catch ( MqttException e ) { out ( getDate ( ) + Messages . MqttClientView_17 + e . getMessage ( ) ) ; $F301 ( e ) } connOpts = new MqttConnectOptions $F72 ; connOpts . setCleanSession ( cleanStart ) ; connOpts . setConnectionTimeout ( NUM00 ) ; connOpts . setKeepAliveInterval ( keepAlive ) ; if ( $F20 ( username ) && $F20 ( password ) ) { connOpts . setPassword ( password . toCharArray ( ) ) ; connOpts . setUserName ( username ) ; } if ( useWill ) { if $F3581 ( willTopic ) { out ( Messages . MqttClientView_19 ) ; $F665 } connOpts . setWill ( mqttClient . getTopic ( willTopic ) , willMessage . getBytes ( ) , willQos , willRetain ) ; } try { out ( getDate ( ) + Messages . MqttClientView_20 + connectString ) ; mqttClient . connect ( connOpts ) ; connected = _BOOL ; out ( getDate ( ) + Messages . MqttClientView_21 + clientId ) ; } catch ( MqttException e ) { out ( getDate ( ) + Messages . MqttClientView_22 + e . getMessage ( ) ) ; $F301 ( e ) } } else { out ( Messages . MqttClientView_23 ) ; } }
static void checkTypeRefAndPath ( int typeRef , TypePath typePath ) { int mask = NUM00 ; switch $F14870 ( typeRef ) { case TypeReference . CLASS_TYPE_PARAMETER : case TypeReference . METHOD_TYPE_PARAMETER : case TypeReference . METHOD_FORMAL_PARAMETER : mask = NUM00 ; $F597 case TypeReference . FIELD : case TypeReference . METHOD_RETURN : case TypeReference . METHOD_RECEIVER : case TypeReference . LOCAL_VARIABLE : case TypeReference . RESOURCE_VARIABLE : case TypeReference . INSTANCEOF : case TypeReference . NEW : case TypeReference . CONSTRUCTOR_REFERENCE : case TypeReference . METHOD_REFERENCE : mask = NUM00 ; $F597 case TypeReference . CLASS_EXTENDS : case TypeReference . CLASS_TYPE_PARAMETER_BOUND : case TypeReference . METHOD_TYPE_PARAMETER_BOUND : case TypeReference . THROWS : case TypeReference . EXCEPTION_PARAMETER : mask = NUM00 ; $F597 case TypeReference . CAST : case TypeReference . CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT : case TypeReference . METHOD_INVOCATION_TYPE_ARGUMENT : case TypeReference . CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT : case TypeReference . METHOD_REFERENCE_TYPE_ARGUMENT : mask = NUM00 ; $F597 $F1267 throw new IllegalArgumentException ( NUM00 + Integer . toHexString ( typeRef > > > NUM00 ) ) ; } if ( ( typeRef & ~ mask ) != NUM00 ) { throw new IllegalArgumentException $F184522 ( Integer , typeRef ) ; } if ( typePath != null ) { for ( $F184528 ( i , typePath ) ) { int step = typePath . getStep ( i ) ; if ( step != TypePath . ARRAY_ELEMENT && step != TypePath . INNER_TYPE && step != TypePath . TYPE_ARGUMENT && step != TypePath . WILDCARD_BOUND ) $F20855 ( i , typePath ) if ( step != TypePath . TYPE_ARGUMENT && typePath . getStepArgument ( i ) != NUM00 ) $F20855 ( i , typePath ) } } }
synchronized void addTracer ( Tracer tracer ) { if $F9793 ( curTracers , tracer ) { LOG . trace ( $F293537 ( toString , tracer ) ) ; } }
private void grow $F72 { int newCap = ( entries . length < < NUM00 ) + NUM00 ; $F133 ( newEntries , newCap ) $F135 ( System , entries , newEntries , size ) entries = newEntries ; }
public void damage ( double value ) { setValue ( Math . max ( NUM00 , getValue ( ) - value ) ) ; }
@ Ignore ( NUM00 ) $F32043 public void testConcurrentEventsOnEmptyRegion $F72 $F5795 ( versionTestConcurrentEventsOnEmptyRegion )
public Graph $F72 { $F93427 ( roots ) ; $F93427 ( nodes ) ; string = NUM00 ; }
private static String trimVersion ( String apiVersion ) { if ( apiVersion == null ) $F1337 else { $F6542 ( versionParts , apiVersion ) return $F8528 ( versionParts ) ; } }
private Inventory queryInventory ( boolean querySkuDetails , $F3803 moreItemSkus ) throws IabException { checkNotDisposed ( ) ; checkSetupDone ( NUM00 ) ; try { Inventory inv = new Inventory $F72 ; int r = queryPurchases ( inv , ITEM_TYPE_INAPP ) ; if ( r != BILLING_RESPONSE_RESULT_OK ) { throw new IabException ( r , NUM00 ) ; } if ( querySkuDetails ) { r = querySkuDetails ( ITEM_TYPE_INAPP , inv , moreItemSkus ) ; if ( r != BILLING_RESPONSE_RESULT_OK ) { throw new IabException ( r , NUM00 ) ; } } if ( mSubscriptionsSupported ) { r = queryPurchases ( inv , ITEM_TYPE_SUBS ) ; if ( r != BILLING_RESPONSE_RESULT_OK ) { throw new IabException ( r , NUM00 ) ; } if ( querySkuDetails ) { r = querySkuDetails ( ITEM_TYPE_SUBS , inv , moreItemSkus ) ; if ( r != BILLING_RESPONSE_RESULT_OK ) { throw new IabException ( r , NUM00 ) ; } } } return inv ; } catch ( RemoteException e ) { throw new IabException ( IABHELPER_REMOTE_EXCEPTION , NUM00 , e ) ; } catch ( JSONException e ) { throw new IabException ( IABHELPER_BAD_RESPONSE , NUM00 , e ) ; } }
$F1 public void incomingObject ( IAnalyzedInterval analyzedInterval ) throws AdeException { if ( ! m_percentilesWithEmptyIntervals && analyzedInterval . getNumUniqueMessageIds ( ) == NUM00 ) $F932 final double rawScore = calcRawScore ( analyzedInterval ) ; if ( ! SeenHugeLogProb ( analyzedInterval ) ) { m_rawScores . add ( rawScore ) ; ++ m_intervalCount ; } }
public static String readFileAsString ( File file , String encoding ) throws IOException { ByteBuffer buffer = readFile ( file ) ; if ( null == encoding ) { encoding = NUM00 ; } String converted = new String ( buffer . array ( ) , encoding ) ; return converted ; }
public EmBayesEstimatorEditor ( EmBayesEstimatorWrapper emBayesEstWrapper ) { this ( emBayesEstWrapper . getEstimateBayesIm ( ) , emBayesEstWrapper . getDataSet ( ) ) ; }
private boolean saveDataToDisk ( boolean exit , boolean complete , String updatedSaveName ) $F33971 ( saveDataToDisk , exit , complete , updatedSaveName , _BOOL )
public static final void writeMapXml ( Map val , String name , XmlSerializer out , WriteMapCallback callback ) throws $F52182 { $F18827 ( val , out ) $F18823 ( out ) $F18831 ( name , out ) writeMapXml ( val , out , callback ) ; $F18825 ( out ) }
public boolean needPreloadKey ( int idx ) { return preloadKeys != null && preloadKeys . get ( idx ) ; }
public int generateChallengeToken ( InetSocketAddress address ) { $F8254 ( token , random ) challengeTokens . put ( address , token ) ; return token ; }
$F1 public void perform ( IR ir ) { for ( $F32409 e = ir . getBasicBlocks ( ) ; e . hasMoreElements ( ) ; ) { $F32413 ( bb , e ) if $F2979 ( bb ) $F598 container . counter2 ++ ; if ( bb . getInfrequent ( ) ) { container . counter1 ++ ; if ( ir . options . FREQ_FOCUS_EFFORT ) $F598 } for ( $F12039 ie = bb . forwardInstrEnumerator ( ) ; ie . hasMoreElements ( ) ; ) { $F12043 ( s , ie ) if ( TypeCheck . conforms ( s ) && ( invertNullAndTypeChecks ( s ) || pushTypeCheckBelowIf ( s , ir ) ) ) { ie = bb . forwardInstrEnumerator ( ) ; } } } }
$F32569 ( panel , cols , rows , filler , filled_cell_11 , _BOOL , cc , Box , index )
public void runWithRetries ( RetryableTask task ) throws Exception { boolean maxSleepIntervalHit = _BOOL ; for ( $F119 ( i , numAttempts ) ) { try { $F21687 ( task ) $F665 } catch ( Exception e ) { if ( i == numAttempts - NUM00 ) { throw e ; } int sleepTime ; if ( maxSleepIntervalHit ) { sleepTime = maxSleepInterval ; } else { sleepTime = baseSleepInterval * $F59200 ( Math , i ) ; } $F186360 ( LOG , sleepTime , e ) try { $F28300 ( Thread , sleepTime ) } catch ( InterruptedException ie ) $F526539 ( LOG , ie ) } } }
public Object pack $F72 { if ( collection ) { List l = ( List ) value ; if ( Types . isArray ( type ) ) { $F131 o = ( $F131 ) Array . newInstance ( itemType , l . size ( ) ) ; l . toArray ( o ) ; return o ; } } return value ; }
public void removeRequest ( InterruptRequest interruptRequest ) $F23075 ( interruptRequestQueue , interruptRequest )
$F1 public final void onHeatmapFailed $F72 { updatePending = _BOOL ; }
$F20664 $F5466 public static Drawable inflate ( boolean forceSystemHandlingWhenPossible , $F4170 Resources resources , @ DrawableRes int id ) { boolean systemHandling = isSystemHandling ( forceSystemHandlingWhenPossible ) ; Log . d ( LOG_TAG , String . format ( NUM00 , Integer . toHexString ( id ) , systemHandling ) ) ; if ( systemHandling ) { return resources . getDrawable ( id , null ) ; } try { $F8187 ( VectorDrawable , resources , id ) } catch ( Resources . NotFoundException e ) $F1337 }
public static long objectFieldOffset ( Field field ) { return UNSAFE . objectFieldOffset ( field ) ; }
public void addAnnotation $F21013 ( annotation , x , y ) { mAnnotations . add ( annotation ) ; mStringXY . put ( x , y ) ; }
protected synchronized void write ( long offset , $F96 b ) throws IOException { if ( byteBuffer != null ) { byteBuffer . position ( ( int ) offset ) ; byteBuffer . put ( b ) ; } else { throw new IOException $F29591 ( getPath ) ; } }
public static $F96 ivCipherConcat $F7233 ( iv , cipherText ) { $F148496 ( combined , iv , cipherText ) $F7057 ( System , iv , combined ) $F11244 ( System , cipherText , combined , iv ) return combined ; }
long timestamp ( long timestamp ) { this . timestamp = Math . max ( this . timestamp , timestamp ) ; return this . timestamp ; }
public MaterialPackage ( MaterialPackageBO materialPackageBO , List < GenericTrack > genericTracks ) { super ( materialPackageBO ) ; this . materialPackageBO = materialPackageBO ; this . genericTracks = Collections . unmodifiableList ( genericTracks ) ; }
public Edge findEdgeInSameDirection ( Coordinate p0 , Coordinate p1 ) { for ( $F2277 ( i , edges ) ) { Edge e = ( Edge ) edges . get ( i ) ; $F237836 ( eCoord , e ) if ( matchInSameDirection ( p0 , p1 , eCoord [ NUM00 ] , eCoord [ NUM00 ] ) ) return e ; if ( matchInSameDirection ( p0 , p1 , $F8528 ( eCoord ) , $F8528 ( eCoord ) ) ) return e ; } $F1274 }
public void acquireProbabilities ( final String string ) { if $F3599 ( string ) $F932 for ( $F38840 ( i , string ) ) { final char previousChar = string . charAt ( i - NUM00 ) ; final char currentChar = string . charAt ( i - NUM00 ) ; $F1090 ( nextChar , string , i ) final String key = previousChar + NUM00 + currentChar ; $F2201 ( sequences , key ) HashMap < Character , Integer > probabilities = sequenceProbabilities . get ( key ) ; if ( probabilities == null ) { $F23429 ( probabilities ) sequenceProbabilities . put ( key , probabilities ) ; } int existingValue = probabilities . getOrDefault ( nextChar , NUM00 ) ; ++ existingValue ; probabilities . put ( nextChar , existingValue ) ; } }
protected final void resolveIssue ( HealthIssue healthIssue ) { EventBus eventBus ; boolean wasIssueActive ; synchronized ( mLock ) { if ( mHealthEventBus == null ) { LOG . w ( NUM00 + NUM00 , healthIssue . toString ( ) ) ; $F665 } eventBus = mHealthEventBus ; wasIssueActive = mActiveIssues . remove ( healthIssue ) ; } if ( wasIssueActive ) { eventBus . post ( healthIssue . resolved ) ; } }
public static $F96 decode ( String s ) $F8587 ( decode , s , NO_OPTIONS )
private static boolean test ( ODatabaseDocumentPool pool , String dbURL , String user , String password , boolean finalTry ) { ODatabaseDocumentTx db = null ; try { $F973 ( logger ) db = pool . acquire ( dbURL , user , password ) ; Iterator < ODocument > iter = db . browseClass ( NUM00 ) ; if $F2921 ( iter ) $F106111 ( iter ) } catch ( OException ex ) { if ( finalTry ) $F58539 ( logger , ex ) else $F11589 ( logger , ex ) return _BOOL ; } $F14364 ( db ) return _BOOL ; }
$F1 public void agg ( Object newVal ) { if $F2456 ( newVal ) { $F114166 ( values , newVal ) $F23500 ( buffer , ByteBuffer , values ) $F23501 ( buffer ) while $F5720 ( buffer ) { valueSet . add ( buffer . getInt ( ) ) ; } $F665 } else { double value = new Double $F3362 ( newVal ) ; agg ( value ) ; } }
private void displayEasterEgg ( CommandSender sender ) { sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( NUM00 ) ) ; }
public boolean isUnparsedEntity ( String entityName ) { Entity entity = ( Entity ) fEntities . get ( entityName ) ; $F1933 ( entity , _BOOL ) return entity . isUnparsed ( ) ; }
$F122160 ( out )
$F31980 ( text , URLEncoder )
protected void processFocusEvent ( FocusEvent evt ) { super . processFocusEvent ( evt ) ; if ( evt . getID ( ) == FocusEvent . FOCUS_LOST ) { $F42855 ( popup , hidePopup ) } }
$F1 public synchronized void addRequestProperty ( String key , String value ) { if ( connected || connecting ) $F4638 $F1149 ( key ) if ( isExternalMessageHeaderAllowed ( key , value ) ) { requests . add ( key , value ) ; if $F14072 ( key ) $F42308 ( userHeaders , key , value ) } }
public void execute ( AbortableTask task ) { AbortingRunnable ar = new AbortingRunnable ( task ) ; tasks . add ( ar ) ; try $F44547 ( exec , ar ) catch ( RejectedExecutionException e ) { tasks . remove ( ar ) ; throw e ; } }
default ByteBuffer serialize ( T value ) { ByteBuffer buffer = ByteBuffer . allocate ( size ( value ) ) ; serialize ( value , buffer ) ; return buffer ; }
private void loadSubmissions $F72 { $F725 ( submissions ) $F806 users = JPlagCentral . usersList ( ) ; for ( $F1139 ( i , users ) ) { AccessStructure [ ] subm = JPlagCentral . listAccessStructures ( users [ i ] ) ; if $F180527 ( subm ) { $F68861 ( j , subm , submissions ) } } }
private void subFormat ( int patternCharIndex , int count , FieldDelegate delegate , StringBuffer buffer , boolean useDateFormatSymbols ) { int maxIntCount = Integer . MAX_VALUE ; String current = null ; $F1749 ( beginOffset , buffer ) int field = PATTERN_INDEX_TO_CALENDAR_FIELD [ patternCharIndex ] ; int value ; if ( field == CalendarBuilder . WEEK_YEAR ) { if ( calendar . isWeekDateSupported ( ) ) { value = calendar . getWeekYear ( ) ; } else { patternCharIndex = PATTERN_YEAR ; field = PATTERN_INDEX_TO_CALENDAR_FIELD [ patternCharIndex ] ; value = calendar . get ( field ) ; } } else if ( field == CalendarBuilder . ISO_DAY_OF_WEEK ) { value = CalendarBuilder . toISODayOfWeek ( calendar . get ( Calendar . DAY_OF_WEEK ) ) ; } else $F6045 ( value , calendar , field ) int style = ( count >= NUM00 ) ? Calendar . LONG : Calendar . SHORT ; if ( ! useDateFormatSymbols && field < Calendar . ZONE_OFFSET && patternCharIndex != PATTERN_MONTH_STANDALONE ) { current = calendar . getDisplayName ( field , style , locale ) ; } switch ( patternCharIndex ) { case PATTERN_ERA : if ( useDateFormatSymbols ) { $F806 eras = formatData . getEras ( ) ; if ( value < eras . length ) { current = eras [ value ] ; } } $F23170 ( current ) $F597 case PATTERN_WEEK_YEAR : case PATTERN_YEAR : if ( calendar instanceof GregorianCalendar ) { if ( count != NUM00 ) { zeroPaddingNumber ( value , count , maxIntCount , buffer ) ; } else { zeroPaddingNumber ( value , NUM00 , NUM00 , buffer ) ; } } else { if ( current == null ) { zeroPaddingNumber ( value , style == Calendar . LONG ? NUM00 : count , maxIntCount , buffer ) ; } } $F597 case PATTERN_MONTH : if ( useDateFormatSymbols ) { $F806 months ; if ( count >= NUM00 ) { months = formatData . getMonths ( ) ; current = months [ value ] ; } else if ( count == NUM00 ) { months = formatData . getShortMonths ( ) ; current = months [ value ] ; } } else { if ( count < NUM00 ) { current = null ; } else if ( forceStandaloneForm ) { current = calendar . getDisplayName ( field , style | NUM00 , locale ) ; if ( current == null ) { current = calendar . getDisplayName ( field , style , locale ) ; } } } if ( current == null ) { zeroPaddingNumber ( value + NUM00 , count , maxIntCount , buffer ) ; } $F597 case PATTERN_MONTH_STANDALONE : assert current == null ; if ( locale == null ) { $F806 months ; if ( count >= NUM00 ) { months = formatData . getMonths ( ) ; current = months [ value ] ; } else if ( count == NUM00 ) { months = formatData . getShortMonths ( ) ; current = months [ value ] ; } } else { if ( count >= NUM00 ) { current = calendar . getDisplayName ( field , style | NUM00 , locale ) ; } } if ( current == null ) { zeroPaddingNumber ( value + NUM00 , count , maxIntCount , buffer ) ; } $F597 case PATTERN_HOUR_OF_DAY1 : if ( current == null ) { if ( value == NUM00 ) { zeroPaddingNumber ( calendar . getMaximum ( Calendar . HOUR_OF_DAY ) + NUM00 , count , maxIntCount , buffer ) ; } else { zeroPaddingNumber ( value , count , maxIntCount , buffer ) ; } } $F597 case PATTERN_DAY_OF_WEEK : if ( useDateFormatSymbols ) { $F806 weekdays ; if ( count >= NUM00 ) { weekdays = formatData . getWeekdays ( ) ; current = weekdays [ value ] ; } else { weekdays = formatData . getShortWeekdays ( ) ; current = weekdays [ value ] ; } } $F597 case PATTERN_AM_PM : if ( useDateFormatSymbols ) { $F806 ampm = formatData . getAmPmStrings ( ) ; current = ampm [ value ] ; } $F597 case PATTERN_HOUR1 : if ( current == null ) { if ( value == NUM00 ) { zeroPaddingNumber ( calendar . getLeastMaximum ( Calendar . HOUR ) + NUM00 , count , maxIntCount , buffer ) ; } else { zeroPaddingNumber ( value , count , maxIntCount , buffer ) ; } } $F597 case PATTERN_ZONE_NAME : if ( current == null ) { if ( formatData . locale == null || formatData . isZoneStringsSet ) { int zoneIndex = formatData . getZoneIndex ( calendar . getTimeZone ( ) . getID ( ) ) ; if ( zoneIndex == - NUM00 ) { value = calendar . get ( Calendar . ZONE_OFFSET ) + calendar . get ( Calendar . DST_OFFSET ) ; buffer . append ( ZoneInfoFile . toCustomID ( value ) ) ; } else { int index = ( calendar . get ( Calendar . DST_OFFSET ) == NUM00 ) ? NUM00 : NUM00 ; if ( count < NUM00 ) { index ++ ; } $F20724 zoneStrings = formatData . getZoneStringsWrapper ( ) ; $F53015 ( buffer , zoneStrings , zoneIndex , index ) } } else { TimeZone tz = calendar . getTimeZone ( ) ; boolean daylight = ( calendar . get ( Calendar . DST_OFFSET ) != NUM00 ) ; int tzstyle = ( count < NUM00 ? TimeZone . SHORT : TimeZone . LONG ) ; buffer . append ( tz . getDisplayName ( daylight , tzstyle , formatData . locale ) ) ; } } $F597 case PATTERN_ZONE_VALUE : value = ( calendar . get ( Calendar . ZONE_OFFSET ) + calendar . get ( Calendar . DST_OFFSET ) ) / NUM00 ; int width = NUM00 ; if ( value >= NUM00 ) $F86 ( buffer ) else { width ++ ; } int num = ( value / NUM00 ) * NUM00 + ( value % NUM00 ) ; CalendarUtils . sprintf0d ( buffer , num , width ) ; $F597 case PATTERN_ISO_ZONE : value = calendar . get ( Calendar . ZONE_OFFSET ) + calendar . get ( Calendar . DST_OFFSET ) ; if ( value == NUM00 ) $F257374 ( buffer ) value /= NUM00 ; if ( value >= NUM00 ) $F86 ( buffer ) else { $F84 ( buffer ) value = - value ; } CalendarUtils . sprintf0d ( buffer , value / NUM00 , NUM00 ) ; $F7256 ( count ) if ( count == NUM00 ) $F86 ( buffer ) CalendarUtils . sprintf0d ( buffer , value % NUM00 , NUM00 ) ; $F597 $F1267 if ( current == null ) { zeroPaddingNumber ( value , count , maxIntCount , buffer ) ; } $F597 } $F13324 ( current , buffer ) int fieldID = PATTERN_INDEX_TO_DATE_FORMAT_FIELD [ patternCharIndex ] ; Field f = PATTERN_INDEX_TO_DATE_FORMAT_FIELD_ID [ patternCharIndex ] ; delegate . formatted ( fieldID , f , f , beginOffset , buffer . length ( ) , buffer ) ; }
$F1431 public boolean onTouchEvent ( MotionEvent event ) { try { int pointerCount = multiTouchSupported ? ( Integer ) m_getPointerCount . invoke ( event ) : NUM00 ; if ( DEBUG ) Log . i ( NUM00 , NUM00 + multiTouchSupported + NUM00 + mMode + NUM00 + handleSingleTouchEvents + NUM00 + pointerCount ) ; if ( mMode == MODE_NOTHING && ! handleSingleTouchEvents && pointerCount == NUM00 ) return _BOOL ; if ( DEBUG ) $F16229 ( Log ) int action = event . getAction ( ) ; int histLen = event . getHistorySize ( ) / pointerCount ; for ( $F9993 ( histIdx , histLen ) ) { boolean processingHist = histIdx < histLen ; if ( ! multiTouchSupported || pointerCount == NUM00 ) { if ( DEBUG ) $F16229 ( Log ) xVals [ NUM00 ] = processingHist ? event . getHistoricalX ( histIdx ) : event . getX ( ) ; yVals [ NUM00 ] = processingHist ? event . getHistoricalY ( histIdx ) : event . getY ( ) ; pressureVals [ NUM00 ] = processingHist ? event . getHistoricalPressure ( histIdx ) : event . getPressure ( ) ; } else { if ( DEBUG ) $F16229 ( Log ) $F17565 ( numPointers , Math , pointerCount , MAX_TOUCH_POINTS ) if ( DEBUG && pointerCount > MAX_TOUCH_POINTS ) $F16229 ( Log ) for ( $F119 ( ptrIdx , numPointers ) ) { int ptrId = ( Integer ) m_getPointerId . invoke ( event , ptrIdx ) ; pointerIds [ ptrIdx ] = ptrId ; xVals [ ptrIdx ] = ( Float ) ( processingHist ? m_getHistoricalX . invoke ( event , ptrIdx , histIdx ) : m_getX . invoke ( event , ptrIdx ) ) ; yVals [ ptrIdx ] = ( Float ) ( processingHist ? m_getHistoricalY . invoke ( event , ptrIdx , histIdx ) : m_getY . invoke ( event , ptrIdx ) ) ; pressureVals [ ptrIdx ] = ( Float ) ( processingHist ? m_getHistoricalPressure . invoke ( event , ptrIdx , histIdx ) : m_getPressure . invoke ( event , ptrIdx ) ) ; } } decodeTouchEvent ( pointerCount , xVals , yVals , pressureVals , pointerIds , processingHist ? MotionEvent . ACTION_MOVE : action , processingHist ? _BOOL : action != MotionEvent . ACTION_UP && ( action & ( $F76927 ( ACTION_POINTER_INDEX_SHIFT ) ) ) != ACTION_POINTER_UP && action != MotionEvent . ACTION_CANCEL , processingHist ? event . getHistoricalEventTime ( histIdx ) : event . getEventTime ( ) ) ; } return _BOOL ; } catch ( Exception e ) { Log . e ( NUM00 , NUM00 , e ) ; return _BOOL ; } }
public static Bit valueOf ( String bit ) throws NumberFormatException { final int i = Integer . parseInt ( bit ) ; if ( i != NUM00 && i != NUM00 ) { $F58968 ( bit ) } return ( i > NUM00 ) ? TRUE : FALSE ; }
public boolean next $F72 throws EOFException { if ( limit >= fileSize ) { throw new EOFException $F580 ; } if ( mem . getLongVolatile ( Structure . Limit ) <= limit ) { return _BOOL ; } byte commit = mem . getByteVolatile ( limit ) ; byte rollback = mem . getByteVolatile ( limit + Length . Commit ) ; if ( rollback == Rollback . Set ) { limit += Length . RecordHeader + recordSize ; timeoutCounter = NUM00 ; timerStart = NUM00 ; return _BOOL ; } if ( commit == Commit . Set ) { timeoutCounter = NUM00 ; timerStart = NUM00 ; return _BOOL ; } timeoutCounter ++ ; if ( timeoutCounter >= MAX_TIMEOUT_COUNT ) { if ( timerStart == NUM00 ) $F22067 ( timerStart , System ) else { if ( System . currentTimeMillis ( ) - timerStart >= maxTimeout ) { mem . putByteVolatile ( limit + Length . Commit , Rollback . Set ) ; limit += Length . RecordHeader + recordSize ; timeoutCounter = NUM00 ; timerStart = NUM00 ; return _BOOL ; } } } return _BOOL ; }
private int composeComponent ( int a , int b ) { return Math . min ( b + b * a / DIMMING_FACTOR , NUM00 ) ; }
$F95779 ( out , remaining , count , buf , buffers , c , Math )
public void removeTreeModelListener ( TreeModelListener l ) $F130709 ( treeModelListeners , l )
public URIName ( String name ) throws IOException { try { uri = new URI ( name ) ; } catch ( URISyntaxException use ) $F19606 ( name , use ) if ( uri . getScheme ( ) == null ) $F3496 ( name ) host = uri . getHost ( ) ; if ( host != null ) { if $F4432 ( host ) { $F13881 ( ipV6Host , host ) try { hostIP = new IPAddressName ( ipV6Host ) ; } catch ( IOException ioe ) { throw new IOException ( NUM00 + NUM00 + name ) ; } } else { try { hostDNS = new DNSName ( host ) ; } catch ( IOException ioe ) { try { hostIP = new IPAddressName ( host ) ; } catch ( Exception ioe2 ) { throw new IOException ( $F38 + name ) ; } } } } }
public ProjectedStream addView ( String namespace , String name , $F240647 parameters ) { views . add ( View . create ( namespace , name , parameters ) ) ; return this ; }
protected int read ( SpeechRecord recorder , $F96 buffer ) { int len = buffer . length ; $F65003 ( numOfBytes , recorder , buffer , len ) int status = getStatus ( numOfBytes , len ) ; if ( status == NUM00 ) { $F6483 ( System , buffer , mRecording , mRecordedLength , numOfBytes ) mRecordedLength += len ; } return status ; }
public void touch $F72 { candiesStore = null ; }
public ZoneRules toRules ( String zoneId ) { $F10578 ( Objects , zoneId ) if $F2979 ( windowList ) $F4639 final List < ZoneOffsetTransition > $F9187 ( standardTransitionList ) ; final List < ZoneOffsetTransition > $F9187 ( transitionList ) ; final List < ZoneOffsetTransitionRule > $F9187 ( lastTransitionRuleList ) ; final TZWindow firstWindow = windowList . get ( NUM00 ) ; ZoneOffset loopStandardOffset = firstWindow . standardOffset ; int loopSavings = NUM00 ; if ( firstWindow . fixedSavingAmountSecs != null ) { loopSavings = firstWindow . fixedSavingAmountSecs ; } final ZoneOffset firstWallOffset = ZoneOffset . ofTotalSeconds ( loopStandardOffset . getTotalSeconds ( ) + loopSavings ) ; LocalDateTime loopWindowStart = LocalDateTime . of ( YEAR_MIN_VALUE , NUM00 , NUM00 , NUM00 , NUM00 ) ; ZoneOffset loopWindowOffset = firstWallOffset ; for ( TZWindow window : windowList ) { window . tidy ( loopWindowStart . getYear ( ) ) ; Integer effectiveSavings = window . fixedSavingAmountSecs ; if ( effectiveSavings == null ) { effectiveSavings = NUM00 ; for ( TZRule rule : window . ruleList ) { if ( rule . toEpochSecond ( loopStandardOffset , loopSavings ) > loopWindowStart . toEpochSecond ( loopWindowOffset ) ) $F5153 effectiveSavings = rule . savingAmountSecs ; } } if ( loopStandardOffset . equals ( window . standardOffset ) == _BOOL ) { standardTransitionList . add ( new ZoneOffsetTransition ( LocalDateTime . ofEpochSecond ( loopWindowStart . toEpochSecond ( loopWindowOffset ) , NUM00 , loopStandardOffset ) , loopStandardOffset , window . standardOffset ) ) ; loopStandardOffset = window . standardOffset ; } ZoneOffset effectiveWallOffset = ZoneOffset . ofTotalSeconds ( loopStandardOffset . getTotalSeconds ( ) + effectiveSavings ) ; if ( loopWindowOffset . equals ( effectiveWallOffset ) == _BOOL ) { transitionList . add ( new ZoneOffsetTransition ( loopWindowStart , loopWindowOffset , effectiveWallOffset ) ) ; } loopSavings = effectiveSavings ; for ( TZRule rule : window . ruleList ) { if ( rule . isTransition ( loopSavings ) ) { ZoneOffsetTransition trans = rule . toTransition ( loopStandardOffset , loopSavings ) ; if ( trans . toEpochSecond ( ) < loopWindowStart . toEpochSecond ( loopWindowOffset ) == _BOOL && trans . toEpochSecond ( ) < window . createDateTimeEpochSecond ( loopSavings ) ) { transitionList . add ( trans ) ; loopSavings = rule . savingAmountSecs ; } } } for ( TZRule lastRule : window . lastRuleList ) { lastTransitionRuleList . add ( lastRule . toTransitionRule ( loopStandardOffset , loopSavings ) ) ; loopSavings = lastRule . savingAmountSecs ; } loopWindowOffset = window . createWallOffset ( loopSavings ) ; loopWindowStart = LocalDateTime . ofEpochSecond ( window . createDateTimeEpochSecond ( loopSavings ) , NUM00 , loopWindowOffset ) ; } return new ZoneRules ( firstWindow . standardOffset , firstWallOffset , standardTransitionList , transitionList , lastTransitionRuleList ) ; }
public static int hash ( Object o ) { int h = o == null ? NUM00 : o instanceof $F96 ? Arrays . hashCode ( $F2457 ( o ) ) : o . hashCode ( ) ; h += ( h < < NUM00 ) ^ NUM00 ; $F159351 ( h ) $F159353 ( h ) $F159351 ( h ) h += ( h < < NUM00 ) + ( h < < NUM00 ) ; return h ^ $F14870 ( h ) ; }
public void addParseTemplate ( String parseTemplate ) $F207 ( parseTemplates , parseTemplate )
private void attachImageFromCamera $F72 { try { if ( null != mShootedPicturePath ) { Uri uri = Uri . fromFile ( new File ( mShootedPicturePath ) ) ; try { Bitmap previewBitmap = VectorApp . getSavedPickerImagePreview ( ) ; String thumbnailPath = getThumbnailPath ( mShootedPicturePath ) ; int rotationAngle = ImageUtils . getRotationAngleForBitmap ( VectorMediasPickerActivity . this , uri ) ; if ( NUM00 != rotationAngle ) { android . graphics . Matrix bitmapMatrix = new android . graphics . Matrix $F72 ; bitmapMatrix . postRotate ( NUM00 - rotationAngle ) ; previewBitmap = Bitmap . createBitmap ( previewBitmap , NUM00 , NUM00 , previewBitmap . getWidth ( ) , previewBitmap . getHeight ( ) , bitmapMatrix , _BOOL ) ; } $F1705 ( file , thumbnailPath ) $F4649 ( outStream , file ) $F26834 ( previewBitmap , Bitmap , outStream ) $F1206 ( outStream ) $F59 ( outStream ) } catch ( Exception e ) $F13955 ( Log , LOG_TAG ) $F53033 ( conData ) Intent $F192736 ( intent ) ; intent . setData ( uri ) ; intent . putExtras ( conData ) ; setResult ( RESULT_OK , intent ) ; } } catch ( Exception e ) $F11707 ( setResult , RESULT_CANCELED ) finally { VectorApp . setSavedCameraImagePreview ( null ) ; finish ( ) ; } }
private double minIgnoreNaN ( double a , double b ) { $F95699 ( Double , a , b ) $F95699 ( Double , b , a ) $F95700 ( Math , a , b ) }
public ObjectName preRegister ( MBeanServer server , ObjectName name ) throws Exception { setMBeanServer ( server ) ; if ( name == null ) { name = new ObjectName ( server . getDefaultDomain ( ) + NUM00 + ServiceName . MLET ) ; } this . mletObjectName = name ; return this . mletObjectName ; }
static String matchStringOrThrow ( Pattern p , ToDateParser params , $F40588 aEnum ) { String s = params . getInputStr ( ) ; $F275 ( matcher , p , s ) if $F55142 ( matcher ) { throwException ( params , format ( NUM00 , aEnum . name ( ) ) ) ; } return matcher . group ( NUM00 ) ; }
String sourceFormForInitializer ( AnnotationValue annotationValue , ProcessingEnvironment processingEnv , String memberName , Element context ) { SourceFormVisitor visitor = new InitializerSourceFormVisitor ( processingEnv , memberName , context ) ; $F83 ( sb ) visitor . visit ( annotationValue , sb ) ; $F92 ( sb ) }
static ByteBuffer newByteBuffer ( int capacity ) { $F87627 ( newbb , ByteBuffer , capacity ) $F31290 ( newbb , ByteOrder ) return newbb ; }
public synchronized void add $F7635 ( x , y , value ) { super . add ( x , y ) ; mValue . add ( value ) ; updateRange ( value ) ; }
private void validateCollectionAttribute ( CollectionAttribute collection , $F2689 allCollections ) { $F5768 ( collection , allCollections ) for ( RestMethod restMethod : collection . getMethods ( ) ) { if ( allCollections . contains ( restMethod . getRestFullMethodName ( ) ) ) { aspect . warning ( SimpleLocation . TOPLEVEL , $F39 , collection . getFullName ( ) , restMethod . getRestMethodName ( ) ) ; } } }
$F13735 ( prefix , namespace , attName , attValue , xmlWriter )
public void putStringNoNull ( String s ) { ensureCapacity ( $F9483 ( s ) ) ; System . arraycopy ( s . getBytes ( ) , NUM00 , this . byteBuffer , this . position , s . length ( ) ) ; this . position += s . length ( ) ; }
public void externalEntityDecl ( String name , XMLResourceIdentifier identifier , Augmentations augs ) throws XNIException { try { if ( fDeclHandler != null ) { String publicId = identifier . getPublicId ( ) ; String systemId = fResolveDTDURIs ? identifier . getExpandedSystemId ( ) : identifier . getLiteralSystemId ( ) ; fDeclHandler . externalEntityDecl ( name , publicId , systemId ) ; } } $F122277 ( e ) }
public HoltWintersModelBuilder alpha ( double alpha ) $F5584 ( this , alpha )
public static $F147000 ClassDescriptor createClassDescriptorFromFieldSignature ( String signature ) { $F1384 ( start , signature ) $F6664 ( start ) $F12712 ( end , signature , start ) $F6664 ( end ) return $F97645 ( createClassDescriptor , signature , start , end ) ; }
private static ServiceTicketResponse checkGetNfcServiceTicketResponse ( ServiceTicketResponse serviceTicketResponse ) throws RpcException { $F10635 ( logger , serviceTicketResponse ) switch $F52729 ( serviceTicketResponse ) { case OK : $F597 $F52738 ( SYSTEM_ERROR , serviceTicketResponse ) case NOT_FOUND : throw new DatastoreNotFoundException $F52730 ( serviceTicketResponse ) ; $F1267 throw new RpcException ( String . format ( NUM00 , serviceTicketResponse . getError ( ) ) ) ; } return serviceTicketResponse ; }
public void schedule ( TimerTask task , long delay ) { $F30465 ( delay ) sched ( task , System . currentTimeMillis ( ) + delay , NUM00 ) ; }
public void filledEllipse $F12359 ( x , y , semiMajorAxis , semiMinorAxis ) { $F30465 ( semiMajorAxis ) $F30465 ( semiMinorAxis ) double xs = scaleX ( x ) ; double ys = scaleY ( y ) ; double ws = factorX ( NUM00 * semiMajorAxis ) ; double hs = factorY ( NUM00 * semiMinorAxis ) ; if ( ws <= NUM00 && hs <= NUM00 ) pixel ( x , y ) ; else offscreen . fill ( new $F35359 ( xs - ws / NUM00 , ys - hs / NUM00 , ws , hs ) ) ; draw ( ) ; }
static $F96 discardWhitespace $F97 ( data ) { byte groomedData [ ] = $F3027 ( data ) ; int bytesCopied = NUM00 ; for ( $F1139 ( i , data ) ) { switch ( data [ i ] ) { $F271981 $F271981 $F271981 $F271981 $F597 $F1267 groomedData [ bytesCopied ++ ] = data [ i ] ; } } byte packedData [ ] = new byte [ bytesCopied ] ; $F135 ( System , groomedData , packedData , bytesCopied ) return packedData ; }
$F1 public Cursor swapCursor ( Cursor newCursor ) { mAlphabetIndexer . setCursor ( newCursor ) ; return super . swapCursor ( newCursor ) ; }
public void lockFlushing $F72 { $F8934 ( flushLock ) }
public static boolean canBeRandomized ( Class clazz ) { return ClassUtils . isPrimitiveOrWrapper ( clazz ) || clazz . equals ( $F10062 ) || clazz . equals ( IDiscordClient . class ) ; }
public static String generateNativeGuid ( String deviceType , String serialNumber ) { return String . format ( NUM00 , _deviceTypeMap . get ( deviceType ) , serialNumber ) ; }
public static SecretKeys keys ( String keysStr ) throws InvalidKeyException { $F6542 ( keysArr , keysStr ) if $F11845 ( keysArr ) $F825 else { $F134490 ( confidentialityKey , Base64 , keysArr , BASE64_FLAGS ) $F134496 ( confidentialityKey , AES_KEY_LENGTH_BITS ) $F134490 ( integrityKey , Base64 , keysArr , BASE64_FLAGS ) $F134496 ( integrityKey , HMAC_KEY_LENGTH_BITS ) return new SecretKeys ( new SecretKeySpec ( confidentialityKey , NUM00 , confidentialityKey . length , CIPHER ) , new SecretKeySpec ( integrityKey , HMAC_ALGORITHM ) ) ; } }
public WritableRaster createWritableChild ( int x , int y , int width , int height , int x0 , int y0 , int bandList [ ] ) { $F238725 ( x , this ) $F238726 ( y , this ) $F238732 ( x , width , this ) $F238738 ( y , height , this ) SampleModel sm ; $F238739 ( bandList , sm , sampleModel ) int deltaX = x0 - x ; int deltaY = y0 - y ; return new ShortBandedRaster $F238741 ( sm , dataBuffer , x0 , y0 , width , height , sampleModelTranslateX , deltaX , sampleModelTranslateY , deltaY , this ) ; }
private void sortChildren ( final JCriteriumTreeNode parentNode ) { final List < JCriteriumTreeNode > operators = new ArrayList < JCriteriumTreeNode > $F72 ; final List < JCriteriumTreeNode > conditions = new ArrayList < JCriteriumTreeNode > $F72 ; final List < JCriteriumTreeNode > minus = new ArrayList < JCriteriumTreeNode > $F72 ; final $F58020 children = parentNode . children ( ) ; while $F1444 ( children ) { final JCriteriumTreeNode child = ( JCriteriumTreeNode ) children . nextElement ( ) ; final ICriterium type = child . getCriterium ( ) ; if ( type instanceof CConditionCriterium ) $F207 ( conditions , child ) else $F207 ( operators , child ) } parentNode . removeAllChildren ( ) ; for ( final JCriteriumTreeNode child : operators ) { parentNode . add ( child ) ; child . setParent ( parentNode ) ; } for ( final JCriteriumTreeNode child : conditions ) { parentNode . add ( child ) ; child . setParent ( parentNode ) ; } for ( final JCriteriumTreeNode child : minus ) { parentNode . add ( child ) ; child . setParent ( parentNode ) ; } }
public static int poisson ( double lambda ) { int k = NUM00 ; double p = NUM00 ; $F23792 ( L , Math , lambda ) do { k ++ ; p *= uniform ( ) ; } while ( p >= L ) ; return k - NUM00 ; }
public String build ( String input ) { inputString = input ; inputIndex = NUM00 ; $F3935 ( inputLength , input ) $F7398 ( outputString ) char nextChar ; while ( ( nextChar = get ( ) ) != NUM00 && outputString . length ( ) < maxOutputLength ) { if ( nextChar == NUM00 ) { if ( inputStartsWith ( NUM00 ) ) { String nextChars = peek ( NUM00 ) ; boolean haveBangComment = _BOOL ; if ( $F145545 ( nextChars ) ) { haveBangComment = _BOOL ; for ( $F1088 ( i , nextChars ) ) { if $F118383 ( Character , nextChars , i ) $F3468 ( haveBangComment , _BOOL ) } } if ( haveBangComment ) { skip ( NUM00 ) ; String contents = getToDelimiter ( NUM00 ) ; if ( contents != null ) { put ( contents ) ; skip ( NUM00 ) ; } } else { put ( nextChar ) ; } } else if ( inputStartsWith ( NUM00 ) ) { if ( getToDelimiter ( NUM00 ) != null ) skip ( NUM00 ) ; } else { put ( nextChar ) ; } } else if ( nextChar == NUM00 ) { if ( inputStartsWith ( NUM00 ) ) { String tail = peek ( NUM00 ) ; if ( tail == null ) $F5153 else { if ( $F74603 ( Character , tail ) ) { String buf = getToEndOfLine ( ) ; $F43187 ( skip , buf ) put ( NUM00 ) ; } else put ( nextChar ) ; } } else { put ( nextChar ) ; } } else if ( nextChar == NUM00 ) $F1210 ( put ) else { put ( nextChar ) ; } } $F92 ( outputString ) }
public boolean isBuiltinSoundAvailable ( String soundIdentifier ) $F69736 ( builtinSounds , soundIdentifier )
public $F13710 iterateSerializers $F72 $F16048 ( serializers )
private static void checkKey ( String key ) throws MalformedObjectNameException { $F1149 ( key ) $F22998 ( len , key ) if ( len == NUM00 ) throw new MalformedObjectNameException $F580 ; $F9609 ( k , key ) final int endKey = parseKey ( k , NUM00 ) ; if ( endKey < len ) throw new MalformedObjectNameException ( NUM00 + k [ endKey ] + NUM00 ) ; }
public abstract boolean isShutdown $F72 ;
protected abstract void init $F72 ;
private void drawArc ( Canvas canvas ) { if ( mCurrentDashMode . equals ( DASH_MODE . DOWNLOAD ) ) { mnIndeterminateStartPosition += ( NUM00 - mnProgress ) * mnStartSpeed ; if ( ( mnIndeterminateStartPosition > CIRCULAR_FACTOR ) || ( mnIndeterminateStartPosition < NUM00 ) ) { mnIndeterminateStartPosition = NUM00 ; } $F28883 ( currRect ) getLocalVisibleRect ( currRect ) ; float nRingBoundaryInner = mnRingRadius - ( mnRingWidth / NUM00 ) - ( mnArcWidth / NUM00 ) ; mArcRect . set ( mnViewCenter - nRingBoundaryInner , mnViewCenter - nRingBoundaryInner , mnViewCenter + nRingBoundaryInner , mnViewCenter + nRingBoundaryInner ) ; mPaint . setColor ( mArcColor ) ; mPaint . setStyle ( Paint . Style . STROKE ) ; mPaint . setStrokeWidth ( mnArcWidth ) ; mPaint . setStrokeCap ( Paint . Cap . ROUND ) ; canvas . drawArc ( mArcRect , mnIndeterminateStartPosition , mnArcLength , _BOOL , mPaint ) ; } }
public static String formatDateTime ( $F22273 date , String format , String locale , String timeZone ) { SimpleDateFormat dateFormat = getDateFormat ( format , locale , timeZone ) ; synchronized ( dateFormat ) $F35907 ( dateFormat , date ) }
$F48363 ( input , offset , len , flags , decoder , _BOOL , temp , System )
$F107211 ( md5Model , animModel , defaultColour , invJointMatrices , calcInJointMatrices , animatedFrames , processAnimationFrames , list , md5Mesh , mesh , generateMesh , handleTexture , meshes , result )
protected MessageDigest ( String algorithm ) $F6988 ( this , algorithm )
private void createGui $F72 { $F40881 ( topPanel ) $F40881 ( innerTopPanel ) innerTopPanel . add ( m_stdEditPanel ) ; topPanel . add ( innerTopPanel ) ; $F40881 ( debuggerChooserPanel ) $F40871 ( debuggerChooserPanel ) m_checkedList = new JCheckedListbox $F200 ( new Vector < DebuggerTemplate > $F72 , _BOOL ) ; updateCheckedListPanel ( ) ; final JScrollPane debuggerScrollPane = new JScrollPane ( m_checkedList ) ; m_checkedListPanel . add ( debuggerScrollPane ) ; $F30063 ( debuggerChooserPanel , m_checkedListPanel , BorderLayout ) $F167982 ( debuggerChooserPanel ) $F114439 ( debuggerChooserPanel ) $F30069 ( innerTopPanel , debuggerChooserPanel , BorderLayout ) $F40901 ( buttonPanel ) $F40867 ( buttonPanel ) buttonPanel . add ( $F26679 ) ; buttonPanel . add ( m_saveButton ) ; $F30069 ( topPanel , buttonPanel , BorderLayout ) final JPanel bottomPanel = new CAddressSpacesTablePanel ( m_table ) ; final JScrollPane scrollPane = new JScrollPane ( m_table ) ; bottomPanel . setBorder ( m_titledBorder ) ; setBorder ( new EmptyBorder $F13777 ) ; bottomPanel . add ( scrollPane ) ; final JSplitPane splitPane = new JSplitPane ( JSplitPane . VERTICAL_SPLIT , _BOOL , topPanel , bottomPanel ) ; splitPane . setOneTouchExpandable ( _BOOL ) ; splitPane . setDividerLocation ( splitPane . getMinimumDividerLocation ( ) ) ; $F242063 ( splitPane ) add ( splitPane ) ; }
public static $F2027 mergeSort $F23416 ( a ) { if $F9634 ( a ) return a ; $F2027 x = mergeSort ( Arrays . copyOfRange ( a , NUM00 , a . length / NUM00 ) ) ; $F2027 y = mergeSort ( Arrays . copyOfRange ( a , a . length / NUM00 , a . length ) ) ; return merge ( x , y ) ; }
private void copyACls ( final List < AccessControlLevel > accessControlLevels2 ) { for ( AccessControlLevel acl : this . accessControlLevels ) { accessControlLevels2 . add ( new AccessControlLevel ( acl ) ) ; } }
public void put ( ByteBuffer byteBuffer , int contentLength ) { if ( contentLength > ( bytes . length - this . contentLength ) ) $F825 byteBuffer . get ( bytes , this . contentLength , contentLength ) ; this . contentLength += contentLength ; }
private void handleResponse ( AvsResponse response ) { boolean checkAfter = $F10471 ( avsQueue ) ; if ( response != null ) { for ( $F5373 ( i , response ) ) { if ( response . get ( i ) instanceof AvsReplaceAllItem || response . get ( i ) instanceof AvsReplaceEnqueuedItem ) { $F725 ( avsQueue ) response . remove ( i ) ; } } Log . i ( $F46477 ( TAG , response ) ) ; avsQueue . addAll ( response ) ; } $F8801 ( checkAfter , checkQueue ) }
protected synchronized void request ( String stream ) { $F48075 ( stream ) stream = $F91593 ( stream , Locale ) ; FollowerInfo cachedInfo = cached . get ( stream ) ; if ( cachedInfo == null || checkTimePassed ( cachedInfo ) ) { if ( type == Follower . Type . FOLLOWER ) { api . requestFollowers ( stream ) ; } else if ( type == Follower . Type . SUBSCRIBER ) { api . requestSubscribers ( stream ) ; } } else { if ( type == Follower . Type . FOLLOWER ) { listener . receivedFollowers ( cachedInfo ) ; } else if ( type == Follower . Type . SUBSCRIBER ) { listener . receivedSubscribers ( cachedInfo ) ; } } }
boolean removeViewIfHidden ( View view ) { $F228646 ( index , mCallback , view ) if ( index == - NUM00 ) { if ( mHiddenViews . remove ( view ) && DEBUG ) $F4639 return _BOOL ; } if $F73204 ( mBucket , index ) { mBucket . remove ( index ) ; mCallback . removeViewAt ( index ) ; if ( ! mHiddenViews . remove ( view ) && DEBUG ) $F4639 return _BOOL ; } return _BOOL ; }
public String consumeCssIdentifier $F72 { int start = pos ; while ( ! isEmpty ( ) && ( matchesWord ( ) || matchesAny ( NUM00 , NUM00 ) ) ) pos ++ ; $F6669 ( queue , start , pos ) }
@ Ignore ( NUM00 ) $F32043 public void testPopulate1kbwrites $F72 { $F4727 ( value , ENTRY_SIZE ) $F26770 ( Arrays , value ) for ( $F119 ( i , OP_COUNT ) ) { $F8500 ( region , i , value ) } closeDown ( ) ; }
public void serialize ( KXmlSerializer serializer ) throws IOException { serializer . startTag ( ns , TAG ) ; serializeAttribute ( serializer , NAME_ATTR , mName ) ; serializeAttribute ( serializer , APP_PACKAGE_NAME_ATTR , mAppPackageName ) ; serializeAttribute ( serializer , DIGEST_ATTR , getDigest ( ) ) ; if $F1238 ( SIGNATURE_TEST_PKG , mName ) { serializer . attribute ( ns , NUM00 , NUM00 ) ; } mSuiteRoot . serialize ( serializer ) ; serializer . endTag ( ns , TAG ) ; }
public ActivityResolveInfo ( ResolveInfo resolveInfo ) $F6988 ( this , resolveInfo )
public void rollback ( Throwable t ) { $F8922 ( log , tempFile , t ) try { fileContentStore . delete ( tempFile , node ) ; } catch ( Exception e ) $F47950 ( t , e ) }
protected void parseGeometryString $F72 { int i = NUM00 ; $F39526 ( bytes , geometryString ) xgrav = new String ( bytes , NUM00 , NUM00 ) ; for ( $F6929 ( i , bytes ) ) { if ( ( bytes [ i ] == NUM00 ) || ( bytes [ i ] == NUM00 ) ) $F597 } if ( i == bytes . length ) $F665 ygrav = ( bytes [ i ] == NUM00 ) ? NUM00 : NUM00 ; xpos = Integer . parseInt ( new String ( bytes , NUM00 , i - NUM00 ) ) ; ++ i ; ypos = Integer . parseInt ( new String $F218 ( bytes , i ) ) ; }
$F1 protected final synchronized boolean writeData ( ByteBuffer data ) { AionServerPacket packet = sendMsgQueue . pollFirst ( ) ; $F1933 ( packet , _BOOL ) packet . setBuf ( data ) ; packet . write ( this ) ; return _BOOL ; }
protected boolean position ( Projection proj ) { if ( proj == null ) { $F22806 ( logger ) return _BOOL ; } $F23468 ( projWidth , proj ) $F23469 ( projHeight , proj ) switch ( renderType ) { case RENDERTYPE_LATLON : if ( ! proj . isPlotable ( lat , lon ) ) { $F22808 ( DEBUG , logger ) setNeedToReposition ( _BOOL ) ; return _BOOL ; } point1 = ( Point ) proj . forward ( lat , lon , $F22495 ) ; $F597 case RENDERTYPE_XY : point1 = new Point ( x , y ) ; $F597 case RENDERTYPE_OFFSET : if ( ! proj . isPlotable ( lat , lon ) ) { $F22808 ( DEBUG , logger ) setNeedToReposition ( _BOOL ) ; return _BOOL ; } point1 = ( Point ) proj . forward ( lat , lon , $F22495 ) ; point1 . x += x ; point1 . y += y ; $F597 case RENDERTYPE_UNKNOWN : $F22808 ( DEBUG , logger ) if ( lat == NUM00 && lon == NUM00 ) { if ( x == NUM00 && y == NUM00 ) { $F22808 ( DEBUG , logger ) point1 = new Point ( - width , - height ) ; $F99935 ( point2 ) ; return _BOOL ; } else { point1 = new Point ( x , y ) ; } } else { if ( ! proj . isPlotable ( lat , lon ) ) { $F22806 ( logger ) return _BOOL ; } point1 = ( Point ) proj . forward ( lat , lon , $F22495 ) ; } $F597 } $F99935 ( point2 ) ; point2 . x = point1 . x + width ; point2 . y = point1 . y + height ; setNeedToReposition ( _BOOL ) ; return _BOOL ; }
public synchronized int lastIndexOf ( Object object , int location ) { if ( location < elementCount ) { if ( object != null ) { for ( $F141 ( i , location ) ) { if $F145 ( object , elementData , i ) { return i ; } } } else { for ( $F141 ( i , location ) ) { if ( elementData [ i ] == null ) { return i ; } } } $F150 } throw arrayIndexOutOfBoundsException ( location , elementCount ) ; }
$F1 public boolean canUndo $F72 $F3387 ( m_UndoList )
public $F21637 insert ( int offset , char c ) { internal . insert ( offset , c ) ; return this ; }
public static boolean isAbsolutePath ( String systemId ) { $F397 ( systemId , _BOOL ) $F15885 ( file , systemId ) return file . isAbsolute ( ) ; }
protected void calculateDestination ( IFile uxf , ICompilationUnit referencingCompilationUnit , Destination dest ) throws CoreException { IFile uxfDest = calculateImgDestination ( uxf , referencingCompilationUnit ) ; if ( uxfDest != null ) { dest . imgFileDestination = uxfDest ; } }
$F1 public void onEvent ( ProjectEvent event ) { if ( event . getType ( ) == ProjectEvent . EventType . UPDATED || event . getType ( ) == ProjectEvent . EventType . CREATED ) { update ( event ) ; } }
protected abstract boolean onMouseClick ( Point point ) ;
private void remeasure ( int width , int height ) { $F146568 ( MAX_UNEXPANDED_ALLDAY_HEIGHT , MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT ) ; MAX_UNEXPANDED_ALLDAY_HEIGHT = Math . min ( MAX_UNEXPANDED_ALLDAY_HEIGHT , height / NUM00 ) ; MAX_UNEXPANDED_ALLDAY_HEIGHT = Math . max ( MAX_UNEXPANDED_ALLDAY_HEIGHT , ( int ) MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT * NUM00 ) ; $F2118 ( mMaxUnexpandedAlldayEventCount , MAX_UNEXPANDED_ALLDAY_HEIGHT , MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT ) for ( $F119 ( day , mNumDays ) ) { mEarliestStartHour [ day ] = NUM00 ; mHasAllDayEvent [ day ] = _BOOL ; } int maxAllDayEvents = mMaxAlldayEvents ; mMinCellHeight = Math . max ( ( height - DAY_HEADER_HEIGHT ) / NUM00 , ( int ) MIN_EVENT_HEIGHT ) ; $F8790 ( mCellHeight , mMinCellHeight ) mFirstCell = DAY_HEADER_HEIGHT ; int allDayHeight = NUM00 ; if ( maxAllDayEvents > NUM00 ) { int maxAllAllDayHeight = height - DAY_HEADER_HEIGHT - MIN_HOURS_HEIGHT ; if ( maxAllDayEvents == NUM00 ) { allDayHeight = SINGLE_ALLDAY_HEIGHT ; } else if ( maxAllDayEvents <= mMaxUnexpandedAlldayEventCount ) { allDayHeight = maxAllDayEvents * MAX_HEIGHT_OF_ONE_ALLDAY_EVENT ; $F8789 ( allDayHeight , MAX_UNEXPANDED_ALLDAY_HEIGHT ) } else { if ( mAnimateDayHeight != NUM00 ) { allDayHeight = Math . max ( mAnimateDayHeight , MAX_UNEXPANDED_ALLDAY_HEIGHT ) ; } else { $F53239 ( allDayHeight , maxAllDayEvents , MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT ) if ( ! mShowAllAllDayEvents && allDayHeight > MAX_UNEXPANDED_ALLDAY_HEIGHT ) { $F53239 ( allDayHeight , mMaxUnexpandedAlldayEventCount , MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT ) } else $F8789 ( allDayHeight , maxAllAllDayHeight ) } } mFirstCell = DAY_HEADER_HEIGHT + allDayHeight + ALLDAY_TOP_MARGIN ; } else { mSelectionAllday = _BOOL ; } mAlldayHeight = allDayHeight ; mGridAreaHeight = height - mFirstCell ; int allDayIconWidth = mExpandAlldayDrawable . getIntrinsicWidth ( ) ; mExpandAllDayRect . left = Math . max ( ( mHoursWidth - allDayIconWidth ) / NUM00 , EVENT_ALL_DAY_TEXT_LEFT_MARGIN ) ; mExpandAllDayRect . right = Math . min ( mExpandAllDayRect . left + allDayIconWidth , mHoursWidth - EVENT_ALL_DAY_TEXT_RIGHT_MARGIN ) ; mExpandAllDayRect . bottom = mFirstCell - EXPAND_ALL_DAY_BOTTOM_MARGIN ; mExpandAllDayRect . top = mExpandAllDayRect . bottom - mExpandAlldayDrawable . getIntrinsicHeight ( ) ; mNumHours = mGridAreaHeight / ( mCellHeight + HOUR_GAP ) ; mEventGeometry . setHourHeight ( mCellHeight ) ; final long minimumDurationMillis = ( long ) ( MIN_EVENT_HEIGHT * DateUtils . MINUTE_IN_MILLIS / ( mCellHeight / NUM00 ) ) ; Event . computePositions ( mEvents , minimumDurationMillis ) ; mMaxViewStartY = HOUR_GAP + NUM00 * ( mCellHeight + HOUR_GAP ) - mGridAreaHeight ; if ( DEBUG ) { $F110901 ( Log , TAG , mViewStartY ) $F110901 ( Log , TAG , mMaxViewStartY ) } if ( mViewStartY > mMaxViewStartY ) $F21847 ( mViewStartY , mMaxViewStartY , computeFirstHour ) if ( mFirstHour == - NUM00 ) { initFirstHour ( ) ; mFirstHourOffset = NUM00 ; } if ( mFirstHourOffset >= mCellHeight + HOUR_GAP ) { mFirstHourOffset = mCellHeight + HOUR_GAP - NUM00 ; } mViewStartY = mFirstHour * ( mCellHeight + HOUR_GAP ) - mFirstHourOffset ; final int eventAreaWidth = mNumDays * ( mCellWidth + DAY_GAP ) ; if ( mSelectedEvent != null && mLastPopupEventID != mSelectedEvent . id ) { mPopup . dismiss ( ) ; } mPopup . setWidth ( eventAreaWidth - NUM00 ) ; mPopup . setHeight ( WindowManager . LayoutParams . WRAP_CONTENT ) ; }
public void updateVisibleIds $F149310 ( priority ) { if ( mNativeTabContentManager != NUM00 ) { int $F156906 ( idsSize , Math , mFullResThumbnailsMaxSize , priority ) ; if ( idsSize != mPriorityTabIds . length ) $F200542 ( mPriorityTabIds , idsSize ) $F149311 ( i , idsSize , mPriorityTabIds , priority ) nativeUpdateVisibleIds ( mNativeTabContentManager , mPriorityTabIds ) ; } }
public final void walkGraph ( Hashtable semNodesTable ) { $F16747 ( uid , myUID ) $F36819 ( semNodesTable , uid ) $F8500 ( semNodesTable , myUID , this ) }
private void requestFragmenting ( IgfsEntryInfo fileInfo ) { IgfsFileMap map = fileInfo . fileMap ( ) ; assert map != null && ! map . ranges ( ) . isEmpty ( ) ; Map < UUID , Collection < IgfsFileAffinityRange > > grpMap = U . newHashMap ( map . ranges ( ) . size ( ) ) ; for ( IgfsFileAffinityRange range : map . ranges ( ) ) { UUID nodeId = igfsCtx . data ( ) . affinityNode ( range . affinityKey ( ) ) . id ( ) ; Collection < IgfsFileAffinityRange > nodeRanges = grpMap . get ( nodeId ) ; if ( nodeRanges == null ) { $F19919 ( nodeRanges ) grpMap . put ( nodeId , nodeRanges ) ; } nodeRanges . addAll ( range . split ( igfsCtx . data ( ) . groupBlockSize ( ) ) ) ; } $F252768 nodeIds = new IdentityHashSet $F57797 ( grpMap ) ; $F50717 ( log , fileInfo , nodeIds ) Object old = fragmentingFiles . putIfAbsent ( fileInfo . id ( ) , nodeIds ) ; assert old == null ; for ( Map . Entry < UUID , Collection < IgfsFileAffinityRange > > entry : grpMap . entrySet ( ) ) { UUID nodeId = entry . getKey ( ) ; IgfsFragmentizerRequest msg = new IgfsFragmentizerRequest ( fileInfo . id ( ) , entry . getValue ( ) ) ; try { if $F585 ( log ) log . debug ( NUM00 + nodeId + NUM00 + fileInfo . id ( ) + NUM00 + msg + NUM00 ) ; sendWithRetries ( nodeId , msg ) ; } catch ( IgniteCheckedException e ) { if ( e . hasCause ( ClusterTopologyCheckedException . class ) ) { $F51620 ( log , nodeId ) } else U . error ( log , NUM00 + nodeId + NUM00 + msg + NUM00 , e ) ; nodeIds . remove ( nodeId ) ; } } if $F2979 ( nodeIds ) { $F51620 ( log , fileInfo ) fragmentingFiles . remove ( fileInfo . id ( ) , nodeIds ) ; } }
public boolean showPreviousNotification $F72 { int i = getSelectedIndex ( ) ; if ( i != - NUM00 && i > NUM00 ) { model . setSelectedItem ( model . getElementAt ( i - NUM00 ) ) ; return _BOOL ; } return _BOOL ; }
$F1 public void writeExternal ( ObjectOutput out ) throws IOException { super . writeExternal ( out ) ; out . writeBoolean ( isLeaf ) ; out . writeInt ( numEntries ) ; }
protected void addInputNode_internal ( BNode inputNode ) { if $F102751 ( inputNodes , inputNode ) { log . warning ( $F145106 ( inputNode , nodeId ) ) ; } $F33163 ( inputNodes , inputNode ) }
public static void initialize ( final CDatabaseConfiguration configuration ) throws CouldntLoadDriverException , CouldntConnectException , SQLException { checkDriver ( configuration ) ; final String url = POSTGRES_DRIVER + NUM00 + configuration . getHost ( ) + NUM00 + POSTGRES_DEFAULT_DB ; Connection connection = null ; try { connection = DriverManager . getConnection ( url , configuration . getUser ( ) , configuration . getPassword ( ) ) ; } catch ( final SQLException exception ) { CUtilityFunctions . logException ( exception ) ; throw new CouldntConnectException ( exception , exception . getErrorCode ( ) , exception . getSQLState ( ) ) ; } final String statement = $F2990 ( configuration ) ; final PreparedStatement preparedStatement = connection . prepareStatement ( statement ) ; try { $F1699 ( preparedStatement ) } $F4651 ( preparedStatement , connection ) }
public List < FCEndpoint > showFcnsDatabase ( Integer vsanId ) throws NetworkDeviceControllerException { $F20666 vsanToWwns = getVsanWwns ( vsanId ) ; List < FCEndpoint > connections = new ArrayList < FCEndpoint > $F72 ; SSHPrompt [ ] prompts = { SSHPrompt . MDS_POUND , SSHPrompt . MDS_GREATER_THAN } ; $F83 ( buf ) $F21024 ( cmd , MDSDialogProperties ) if ( vsanId != null ) { cmd = cmd + MDSDialogProperties . getString ( NUM00 ) + vsanId . toString ( ) + NUM00 ; } else $F2365 ( cmd ) SSHPrompt prompt = sendWaitFor ( cmd , defaultTimeout , prompts , buf ) ; $F91090 ( lines , getLines , buf ) $F806 regex = { MDSDialogProperties . getString ( NUM00 ) , MDSDialogProperties . getString ( NUM00 ) , MDSDialogProperties . getString ( NUM00 ) , MDSDialogProperties . getString ( NUM00 ) , MDSDialogProperties . getString ( NUM00 ) , MDSDialogProperties . getString ( NUM00 ) , MDSDialogProperties . getString ( NUM00 ) } ; $F808 ( groups ) FCEndpoint conn = null ; for ( String line : lines ) { int index = match ( line , regex , groups , Pattern . CASE_INSENSITIVE ) ; switch ( index ) { $F3366 conn = new FCEndpoint $F72 ; conn . setFabricId ( groups [ NUM00 ] ) ; conn . setFcid ( groups [ NUM00 ] ) ; String fabricWwn = vsanToWwns . get ( $F141195 ( groups ) ) ; if ( fabricWwn != null ) { conn . setFabricWwn ( fabricWwn ) ; } connections . add ( conn ) ; $F597 $F3366 conn . setRemotePortName ( groups [ NUM00 ] ) ; $F597 $F3366 conn . setRemoteNodeName ( groups [ NUM00 ] ) ; $F597 $F3366 conn . setSwitchPortName ( groups [ NUM00 ] ) ; $F597 $F3366 conn . setSwitchInterface ( groups [ NUM00 ] ) ; $F597 $F3366 conn . setSwitchName ( groups [ NUM00 ] ) ; $F597 $F3366 conn . setRemotePortAlias ( groups [ NUM00 ] ) ; } } return connections ; }
private void registerObjectRead ( Object obj , int handle , boolean unshared ) throws IOException { $F65989 ( unshared , obj , UNSHARED_OBJ ) int index = handle - ObjectStreamConstants . baseWireHandle ; $F115 ( size , objectsRead ) while ( index > size ) { $F722 ( objectsRead ) ++ size ; } if ( index == size ) $F207 ( objectsRead , obj ) else $F65992 ( objectsRead , index , obj ) }
public static void addExtensionHeader ( String headerName , String className ) $F19138 ( nameMap , headerName , className )
$F9088 ( frame , interpreter , top , changes , _BOOL , i , locals , v , values )
public static void keytool ( String cmd ) { $F556 ( log , cmd ) $F8728 ( list ) $F17727 ( st , cmd ) String quoteBuffer = null ; while $F14498 ( st ) { $F8095 ( token , st ) if ( quoteBuffer == null ) { if $F3106 ( token ) $F64779 ( quoteBuffer , token ) else list . add ( token ) ; } else quoteBuffer += NUM00 + token ; if $F8991 ( token ) { $F13881 ( str , quoteBuffer ) list . add ( str ) ; quoteBuffer = null ; } } $F5442 ( args , list ) list . toArray ( args ) ; try { KeyTool . main ( args ) ; } $F3957 }
private void smoothSnapToPosition ( int scrollY , int availableScrollHeight , AlphabeticalAppsList . FastScrollSectionInfo info ) { mRv . removeCallbacks ( mSmoothSnapNextFrameRunnable ) ; mRv . removeCallbacks ( mFastScrollToTargetSectionRunnable ) ; trackAllChildViews ( ) ; if ( mHasFastScrollTouchSettled ) { mCurrentFastScrollSection = info . sectionName ; mTargetFastScrollSection = null ; updateTrackedViewsFastScrollFocusState ( ) ; } else { mCurrentFastScrollSection = null ; mTargetFastScrollSection = info . sectionName ; mHasFastScrollTouchSettled = _BOOL ; updateTrackedViewsFastScrollFocusState ( ) ; mRv . postDelayed ( mFastScrollToTargetSectionRunnable , mHasFastScrollTouchSettledAtLeastOnce ? REPEAT_TOUCH_SETTLING_DURATION : INITIAL_TOUCH_SETTLING_DURATION ) ; } int newScrollY = Math . min ( availableScrollHeight , mRv . getPaddingTop ( ) + mRv . getTop ( info . fastScrollToItem . rowIndex ) ) ; int numFrames = mFastScrollFrames . length ; for ( $F119 ( i , numFrames ) ) { mFastScrollFrames [ i ] = ( newScrollY - scrollY ) / numFrames ; } mFastScrollFrameIndex = NUM00 ; mRv . postOnAnimation ( mSmoothSnapNextFrameRunnable ) ; }
private void updatePropertyToValue2 $F72 throws Exception { properties . put ( TEST_KEY , TEST_VALUE_2 ) ; updatePropertiesFile ( ) ; }
public void unassignServices ( String universalId , Set serviceNames ) throws AMConsoleException { if $F2772 ( serviceNames ) { $F808 ( params ) params [ NUM00 ] = universalId ; String currentSvc = NUM00 ; try { AMIdentity amid = IdUtils . getIdentity ( getUserSSOToken ( ) , universalId ) ; for ( $F2774 ( iter , serviceNames ) ) { $F103384 ( currentSvc , iter ) params [ NUM00 ] = currentSvc ; logEvent ( NUM00 , params ) ; amid . unassignService ( currentSvc ) ; logEvent ( NUM00 , params ) ; } } catch ( SSOException e ) $F21560 ( paramsEx , universalId , currentSvc , getErrorString , e , logEvent , debug ) catch ( IdRepoException e ) $F21560 ( paramsEx , universalId , currentSvc , getErrorString , e , logEvent , debug ) } }
private $F81733 expandCluster ( final $F81733 cluster , final T point , $F95121 ( neighbors ) , $F60962 ( points ) , final Map < Clusterable , PointStatus > visited ) { cluster . addPoint ( point ) ; visited . put ( point , PointStatus . PART_OF_CLUSTER ) ; $F5675 seeds = new $F5676 ( neighbors ) ; int index = NUM00 ; while $F1765 ( index , seeds ) { final T current = seeds . get ( index ) ; PointStatus pStatus = visited . get ( current ) ; if ( pStatus == null ) { final $F5675 currentNeighbors = getNeighbors ( current , points ) ; if $F29395 ( currentNeighbors , minPts ) $F176272 ( seeds , merge , currentNeighbors ) } if ( pStatus != PointStatus . PART_OF_CLUSTER ) { visited . put ( current , PointStatus . PART_OF_CLUSTER ) ; cluster . addPoint ( current ) ; } index ++ ; } return cluster ; }
private static Address GetFloatArrayElements $F61479 ( env , arrayJREF , isCopyAddress ) { $F4274 ( traceJNI , VM ) $F4275 ( RuntimeEntrypoints ) try { $F5415 sourceArray = ( $F5415 ) env . getJNIRef ( arrayJREF ) ; int size = sourceArray . length ; if $F131563 ( MemoryManager , sourceArray ) $F131565 ( JNIGenericHelpers , isCopyAddress , _BOOL , Magic , sourceArray ) else { Address copyBuffer = sysCall . sysMalloc ( size < < LOG_BYTES_IN_FLOAT ) ; $F131575 ( copyBuffer , env , Address ) Memory . memcopy ( copyBuffer , Magic . objectAsAddress ( sourceArray ) , size < < LOG_BYTES_IN_FLOAT ) ; JNIGenericHelpers . setBoolStar ( isCopyAddress , _BOOL ) ; return copyBuffer ; } } $F131582 ( traceJNI , unexpected , System , env , Address ) }
$F1 public int parse ( DateTimeParseContext context , CharSequence text , int position ) { $F115 ( length , text ) if ( position > length ) $F81129 if ( position == length ) { return ~ position ; } $F1280 ( nextChar , text , position ) if $F37111 ( nextChar ) { return parseOffsetBased ( context , text , position , position , OffsetIdPrinterParser . INSTANCE_ID_Z ) ; } else if ( length >= position + NUM00 ) { $F17494 ( nextNextChar , text , position ) if ( context . charEquals ( nextChar , NUM00 ) && context . charEquals ( nextNextChar , NUM00 ) ) { if ( length >= position + NUM00 && context . charEquals ( text . charAt ( position + NUM00 ) , NUM00 ) ) { return parseOffsetBased ( context , text , position , position + NUM00 , OffsetIdPrinterParser . INSTANCE_ID_ZERO ) ; } return parseOffsetBased ( context , text , position , position + NUM00 , OffsetIdPrinterParser . INSTANCE_ID_ZERO ) ; } else if ( context . charEquals ( nextChar , NUM00 ) && length >= position + NUM00 && context . charEquals ( nextNextChar , NUM00 ) && context . charEquals ( text . charAt ( position + NUM00 ) , NUM00 ) ) { return parseOffsetBased ( context , text , position , position + NUM00 , OffsetIdPrinterParser . INSTANCE_ID_ZERO ) ; } } PrefixTree tree = getTree ( context ) ; ParsePosition ppos = new ParsePosition ( position ) ; String parsedZoneId = tree . match ( text , ppos ) ; if ( parsedZoneId == null ) { if ( context . charEquals ( nextChar , NUM00 ) ) { context . setParsed ( ZoneOffset . UTC ) ; return position + NUM00 ; } return ~ position ; } context . setParsed ( ZoneId . of ( parsedZoneId ) ) ; return ppos . getIndex ( ) ; }
private void prepareTransfers $F72 throws LibUsbException { if ( mAvailableTransfers == null ) { mAvailableTransfers = new LinkedTransferQueue $F200 $F72 ; for ( $F119 ( x , TRANSFER_BUFFER_POOL_SIZE ) ) { Transfer transfer = LibUsb . allocTransfer ( ) ; if ( transfer == null ) { throw new LibUsbException ( NUM00 , LibUsb . ERROR_NO_MEM ) ; } final ByteBuffer buffer = ByteBuffer . allocateDirect ( mBufferSize ) ; LibUsb . fillBulkTransfer ( transfer , mDeviceHandle , USB_ENDPOINT , buffer , BufferProcessor . this , NUM00 , USB_TIMEOUT_US ) ; mAvailableTransfers . add ( transfer ) ; } } }
private void outputFullLines $F72 throws IOException { for ( $F589 ) { $F1384 ( leftLen , leftBuf ) $F44858 ( leftLen ) $F1384 ( rightLen , rightBuf ) $F44858 ( rightLen ) if ( leftLen != NUM00 ) { out . write ( leftBuf . substring ( NUM00 , leftLen ) ) ; } if ( rightLen != NUM00 ) { writeSpaces ( out , leftWidth - leftLen ) ; out . write ( rightBuf . substring ( NUM00 , rightLen ) ) ; } $F3410 ( out ) leftBuf . delete ( NUM00 , leftLen + NUM00 ) ; rightBuf . delete ( NUM00 , rightLen + NUM00 ) ; } }
@ Secured public void addPay_Simple ( long userId , BigDecimal amount , Date created , PaymentType payType , String details , boolean updateCache ) throws ConcurrentUpdateSqlException , Exception { checkAccessFor_ADMIN ( ) ; amount = amount . abs ( ) ; long id = universal . nextSeqFor ( payments ) ; PaymentExt payment = PaymentExt . createSystemPayment ( id , userId , amount , created , payType , details ) ; BigDecimal newVal = doPayment ( userId , payment , updateCache ) ; log . info ( NUM00 + userId + ( newVal != null ? NUM00 + newVal : NUM00 ) + NUM00 + getReqInfoStr ( ) ) ; }
public void registerUnregisteredNamespaces $F72 { for ( $F2277 ( i , m_unregisteredExtensions ) ) { $F123 ( ns , m_unregisteredExtensions , i ) ExtensionNamespaceSupport extNsSpt = defineJavaNamespace ( ns ) ; $F67023 ( extNsSpt , m_extensions ) } }
private void removeAllObjects $F72 { $F980 ( logger ) $F725 ( texts ) }
public Builder deleteDisplayName $F72 $F18794 ( deleteFields , this )
public static Type newType ( AST ast , VariableDeclaration declaration ) { $F37759 ( newType , ast , declaration ) }
$F10188 ( close , Util , directory )
private void waitForIteratorsCleared ( IgniteCache $F8434 cache , int secs ) throws InterruptedException { for ( $F119 ( i , secs ) ) { try { cache . size ( ) ; checkIteratorsCleared ( ) ; } catch ( AssertionFailedError e ) { if ( i == NUM00 ) { for ( $F50810 ( j , gridCount ) ) executeOnLocalOrRemoteJvm ( j , new PrintIteratorStateTask $F72 ) ; throw e ; } $F973 ( log ) $F9470 ( Thread ) } } }
public void addLifecycleListener ( LifecycleListener lifecycleListener ) $F2202 ( lifecycleListeners , lifecycleListener )
private int indexOf ( String fullPath ) { for ( int i = NUM00 , length = this . relativePaths . length ; i < length ; i ++ ) { String currentRelativePath = this . relativePaths [ i ] ; $F45557 ( currentRelativePath ) String currentContainerPath = this . containerPaths [ i ] ; String currentFullPath = $F1276 ( currentRelativePath ) ? currentContainerPath : ( currentContainerPath + NUM00 + currentRelativePath ) ; $F158832 ( encloses , currentFullPath , fullPath , i ) } $F150 }
boolean destroyVolume ( boolean force ) { NaElement $F89079 ( elem ) ; $F89083 ( elem , Boolean , force ) $F89084 ( elem , name ) try { server . invokeElem ( elem ) ; return _BOOL ; } catch ( Exception e ) { String msg = NUM00 + name ; log . error ( msg , e ) ; throw new NetAppException ( msg , e ) ; } }
public static GeneralPath stackSpline ( GeneralPath p , $F5415 pts , float epsilon , float slack , boolean closed , float tx , float ty ) { int npoints = NUM00 ; for ( ; npoints < pts . length ; ++ npoints ) if $F1998 ( Float , pts , npoints ) $F597 return stackSpline ( p , pts , NUM00 , npoints / NUM00 , epsilon , slack , closed , tx , ty ) ; }
private boolean validateCooldownSetting ( String appId , AutoScalerPolicyTrigger policyTrigger , String triggerId ) { AutoScalingDataStore stateStore = AutoScalingDataStoreFactory . getAutoScalingDataStore ( ) ; AppAutoScaleState appState = null ; appState = stateStore . getScalingState ( appId ) ; if ( appState == null ) { return _BOOL ; } else if ( ( appState . getInstanceCountState ( ) != ScalingStateManager . SCALING_STATE_COMPLETED ) && ( appState . getInstanceCountState ( ) != ScalingStateManager . SCALING_STATE_FAILED ) ) { long lastStartTime = appState . getLastActionStartTime ( ) ; $F657 ( currentTime , System ) boolean timeExpired = ( currentTime - lastStartTime ) > this . eventTimeout ; if ( timeExpired ) { $F630 ( logger , appId ) return _BOOL ; } $F630 ( logger , appId ) return _BOOL ; } else { long cooldownEndtime = appState . getLastActionEndTime ( ) + NUM00 * getCooldownSecs ( policyTrigger , triggerId ) ; if $F139818 ( System , cooldownEndtime ) { $F630 ( logger , appId ) return _BOOL ; } } return _BOOL ; }
private long convertToBytes ( int megaBytes ) { long bytes = megaBytes ; bytes = bytes * NUM00 * NUM00 ; return bytes ; }
public static int calcTextHeight ( Paint paint , String demoText ) { $F28883 ( r ) $F77589 ( paint , demoText , r ) return r . height ( ) ; }
private String generateZonesetCloneName ( String zonesetToClone ) { try $F31130 ( Thread ) catch ( InterruptedException ex ) { _log . warn ( ex . getLocalizedMessage ( ) ) ; } $F4377 ( cal , Calendar ) $F121432 ( dateFormat ) String dateString = dateFormat . format ( cal . getTime ( ) ) ; $F21024 ( longName , MDSDialogProperties ) if $F94439 ( longName ) { return longName ; } return NUM00 + zonesetToClone + NUM00 + dateString ; }
protected abstract void writeSignatureBlock $F251959 ( signature , out ) throws IOException ;
private static Object invokeOrDie ( final Method method , final Object object , final Object ... params ) { try { $F89561 ( method , object , params ) } catch ( IllegalAccessException e ) { throw new RuntimeException ( NUM00 + NUM00 , e ) ; } catch ( InvocationTargetException e ) { final Throwable cause = e . getCause ( ) ; if ( cause instanceof RuntimeException ) $F220831 ( cause ) else if ( cause instanceof Error ) { $F106249 ( cause ) } else $F7077 ( cause ) } }
private StringBuffer buildSelectQuery ( String schemaName , String tableName , $F62907 keys , $F62914 keyValues ) { $F280 ( stmt ) $F84 ( stmt ) stmt . append ( conn . getDatabaseObjectName ( schemaName ) + NUM00 + conn . getDatabaseObjectName ( tableName ) ) ; $F84 ( stmt ) printColumnSpec ( stmt , keys , keyValues , PrintMode . ASSIGNMENT , NUM00 ) ; return stmt ; }
public void show ( Animation anim ) $F21847 ( mAnim , anim , show )
public static boolean isUriKey ( String key ) { return key . endsWith ( NUM00 ) || key . endsWith ( NUM00 ) ; }
public int receive $F7159 ( buffer , offset , count , timeout ) { checkArrayBounds ( buffer , offset , count ) ; $F14826 ( count ) $F96 data = buffer ; if ( offset > NUM00 ) $F75474 ( data , count ) IntOut bytesReceivedOut = new IntOut $F72 ; try { IDevice . checkResult ( LibIMobileDevice . idevice_connection_receive_timeout ( getRef ( ) , data , count , bytesReceivedOut , timeout ) ) ; $F129070 ( bytesRead , bytesReceivedOut ) if ( bytesRead > NUM00 && data != buffer ) $F112231 ( System , data , buffer , offset , bytesRead ) return bytesRead ; } $F105993 ( bytesReceivedOut ) }
public synchronized void addOFChannelHandlerAndSendRole ( OFChannelHandler h ) { connectedChannelHandlers . add ( h ) ; h . sendRoleRequest ( this . role ) ; }
$F4058 ( doc , elementList , nameNode , child , childData , load , _BOOL , assertEquals )
public boolean send $F97 ( bytes ) { $F25096 ( connected , _BOOL ) try { outputStream . write ( bytes ) ; $F1206 ( outputStream ) return _BOOL ; } catch ( IOException e ) { connected = _BOOL ; $F1615 ( Log , TAG ) return _BOOL ; } finally { $F14406 ( connected , closeConnection ) } }
$F10929 ( buf , mSizeLimit , mBuffersByLastUse , pos , Collections , mBuffersBySize , BUF_COMPARATOR , mCurrentSize , trim )
public CopyOnWriteArrayList ( Collection c ) { $F130560 ( elements , c ) int size = NUM00 ; for ( $F2774 ( itr , c ) ) { $F8877 ( e , itr ) elements [ size ++ ] = e ; } setArray ( elements ) ; }
$F29770 ( entity , bytes , mPool , buffer , in , count , VolleyLog )
public void addTailArg ( String arg ) $F207 ( _tailArgs , arg )
private String translateBytesToString ( $F96 bytes , long format , Transferable localeTransferable ) throws IOException { $F2544 ( lFormat , Long , format ) String charset = getBestCharsetForTextFormat ( lFormat , localeTransferable ) ; $F123 ( eoln , nativeEOLNs , lFormat ) $F10158 ( terminators , nativeTerminators , lFormat ) int count ; if ( terminators != null ) { $F79839 ( numTerminators , terminators ) search : for ( count = NUM00 ; count < ( bytes . length - numTerminators + NUM00 ) ; count += numTerminators ) { for ( $F5883 ( i , count , numTerminators ) ) { if ( bytes [ i ] != NUM00 ) { continue search ; } } break search ; } } else $F9454 ( count , bytes ) String converted = new String ( bytes , NUM00 , count , charset ) ; if ( eoln != null ) { $F7782 ( buf , converted ) $F7782 ( eoln_arr , eoln ) converted = null ; int j = NUM00 ; boolean match ; for ( int i = NUM00 ; i < buf . length ; ) { if ( i + eoln_arr . length > buf . length ) { $F69279 ( buf , j , i ) $F598 } match = _BOOL ; for ( int k = NUM00 , l = i ; k < eoln_arr . length ; k ++ , l ++ ) { if ( eoln_arr [ k ] != buf [ l ] ) $F3468 ( match , _BOOL ) } if ( match ) { buf [ j ++ ] = NUM00 ; i += eoln_arr . length ; } else { $F69279 ( buf , j , i ) } } converted = $F626 ( buf , j ) ; } return converted ; }
public InlineURIHandler ( final String namespace ) { this . namespace = namespace ; this . len = namespace . length ( ) ; }
private $F1986 CalcVariableCoef ( Variogram variogram , KrigingPoint p , $F104431 NNPoints ) { $F2199 ( n , NNPoints ) $F107812 ( mat , n ) double dist = NUM00 ; for ( $F119 ( i , n ) ) { dist = Math . sqrt ( Math . abs ( Math . pow ( $F43419 ( NNPoints , i ) - p . x , NUM00 ) ) + Math . abs ( Math . pow ( $F43425 ( NNPoints , i ) - p . y , NUM00 ) ) ) ; mat [ i ] = getTheoreticalSVValue ( dist , variogram ) ; } mat [ n ] = NUM00 ; return mat ; }
public static Object deserialization ( String filePath ) { ObjectInputStream in = null ; try { in = new ObjectInputStream $F18079 ( filePath ) ; $F67404 ( o , in ) $F59 ( in ) return o ; } catch ( FileNotFoundException e ) $F7077 ( e ) catch ( ClassNotFoundException e ) $F7077 ( e ) $F7078 ( e ) $F19458 ( IOUtils , in ) }
private static boolean isMergedSegment ( String segName ) { if $F3578 ( segName ) { return _BOOL ; } return _BOOL ; }
public static CipherParameters makePBEMacParameters ( PBEKeySpec keySpec , int type , int hash , int keySize ) { PBEParametersGenerator generator = makePBEGenerator ( type , hash ) ; $F96 key ; CipherParameters param ; key = convertPassword ( type , keySpec ) ; generator . init ( key , keySpec . getSalt ( ) , keySpec . getIterationCount ( ) ) ; param = generator . generateDerivedMacParameters ( keySize ) ; for ( $F15868 ( i , key ) ) $F5629 ( key , i ) return param ; }
public void addEmojiconGroup ( List < EaseEmojiconGroupEntity > groupEntitieList ) { for ( $F2277 ( i , groupEntitieList ) ) { EaseEmojiconGroupEntity groupEntity = groupEntitieList . get ( i ) ; emojiconGroupList . add ( groupEntity ) ; pagerView . addEmojiconGroup ( groupEntity , $F2282 ( i , groupEntitieList ) ? _BOOL : _BOOL ) ; tabBar . addTab ( groupEntity . getIcon ( ) ) ; } }
public void updateEnd ( Logger log ) { m_instanceCount ++ ; m_sampleCount ++ ; double end = System . currentTimeMillis ( ) ; double temp = end - m_updateStart ; m_cumulativeTime += temp ; boolean toFastToMeasure = _BOOL ; if ( ( end - m_startTime ) >= m_sampleTime ) { computeUpdate ( end ) ; if ( log != null ) { log . statusMessage ( m_statusMessagePrefix + NUM00 + m_instanceCount + NUM00 + m_avInstsPerSec / m_numSamples + NUM00 + ( toFastToMeasure ? NUM00 : NUM00 ) ) ; } m_sampleCount = NUM00 ; m_cumulativeTime = NUM00 ; $F3224 ( m_startTime , System ) } }
public boolean shouldInclude ( final Path path ) { return $F10470 ( includeMatchers ) || matches ( path , includeMatchers ) ; }
$F183298 ( view , cache )
public ArrayList < MechSummary > generateUnits ( int num , UnitFilter filter ) { ArrayList < MechSummary > $F204 ( retVal ) ; for ( $F119 ( i , num ) ) { MechSummary ms = generateUnit ( filter ) ; $F1140 ( ms , retVal ) } return retVal ; }
static public Automaton concatenate ( Automaton a1 , Automaton a2 ) { return concatenate ( Arrays . asList ( a1 , a2 ) ) ; }
public void contentsChanged ( ListDataEvent e ) { Object oldSelection = selectedItemReminder ; Object newSelection = dataModel . getSelectedItem ( ) ; if $F87129 ( oldSelection , newSelection ) { selectedItemChanged ( ) ; $F14406 ( selectingItem , fireActionEvent ) } }
protected void adjustCanopies $F9830 ( densities ) { if ( m_numClustersRequested < NUM00 ) { assignCanopiesToCanopyCenters ( ) ; $F66793 ( m_trainingData , m_canopies ) ; $F665 } if ( m_canopies . numInstances ( ) > m_numClustersRequested ) { $F2027 sortedIndexes = Utils . stableSort ( densities ) ; Instances $F66793 ( finalCanopies , m_canopies ) ; int count = NUM00 ; for ( int i = sortedIndexes . length - NUM00 ; count < m_numClustersRequested ; i -- ) { finalCanopies . add ( m_canopies . instance ( sortedIndexes [ i ] ) ) ; count ++ ; } m_canopies = finalCanopies ; List < $F3789 > tempCanopyCenters = new ArrayList < $F3789 > $F72 ; List $F42619 tempT2Dists = new $F302683 $F72 ; List $F42619 tempMissings = new $F302683 $F72 ; count = NUM00 ; for ( int i = sortedIndexes . length - NUM00 ; count < finalCanopies . numInstances ( ) ; i -- ) { tempCanopyCenters . add ( m_canopyCenters . get ( sortedIndexes [ i ] ) ) ; tempT2Dists . add ( m_canopyT2Density . get ( sortedIndexes [ i ] ) ) ; tempMissings . add ( m_canopyNumMissingForNumerics . get ( sortedIndexes [ i ] ) ) ; count ++ ; } m_canopyCenters = tempCanopyCenters ; m_canopyT2Density = tempT2Dists ; m_canopyNumMissingForNumerics = tempMissings ; } else if ( m_canopies . numInstances ( ) < m_numClustersRequested && m_trainingData != null && m_trainingData . numInstances ( ) > NUM00 ) { Random $F23765 ( r , getSeed ) ; for ( $F6268 ( i ) ) { r . nextInt ( ) ; } HashMap < DecisionTableHashKey , Integer > initC = new HashMap < DecisionTableHashKey , Integer > $F72 ; DecisionTableHashKey hk = null ; for ( $F208679 ( i , m_canopies ) ) { try { hk = new DecisionTableHashKey ( m_canopies . instance ( i ) , m_canopies . numAttributes ( ) , _BOOL ) ; $F16843 ( initC , hk ) } $F1516 ( e ) } for ( int j = m_trainingData . numInstances ( ) - NUM00 ; j >= NUM00 ; j -- ) { $F146502 ( instIndex , r , j ) try { hk = new DecisionTableHashKey ( m_trainingData . instance ( instIndex ) , m_trainingData . numAttributes ( ) , _BOOL ) ; } $F1516 ( e ) if $F15257 ( initC , hk ) { $F338882 ( newInstance , m_trainingData , instIndex ) m_canopies . add ( newInstance ) ; $F1993 ( density ) density [ NUM00 ] = NUM00 ; m_canopyT2Density . add ( density ) ; $F3789 center = new double [ newInstance . numAttributes ( ) ] [ NUM00 ] ; $F1986 numMissingNumerics = new double [ newInstance . numAttributes ( ) ] ; updateCanopyCenter ( newInstance , center , numMissingNumerics ) ; m_canopyCenters . add ( center ) ; m_canopyNumMissingForNumerics . add ( numMissingNumerics ) ; $F16843 ( initC , hk ) } m_trainingData . swap ( j , instIndex ) ; if ( m_canopies . numInstances ( ) == m_numClustersRequested ) $F5153 } } assignCanopiesToCanopyCenters ( ) ; $F66793 ( m_trainingData , m_canopies ) ; }
protected void createFromHValues $F11072 ( hValues , partitions ) { Arrays . sort ( hValues ) ; this . splits = new int [ partitions ] ; int maxH = NUM00 ; for ( $F1139 ( i , splits ) ) { int quantile = ( int ) ( ( long ) ( i + NUM00 ) * hValues . length / partitions ) ; this . splits [ i ] = quantile == hValues . length ? maxH : hValues [ quantile ] ; } }
private void readObject ( ObjectInputStream oos ) throws $F6427 { iInstant = ( LocalDateTime ) oos . readObject ( ) ; DateTimeFieldType type = ( DateTimeFieldType ) oos . readObject ( ) ; iField = type . getField ( iInstant . getChronology ( ) ) ; }
public void testConstructor_InetAddressIInetAddressI $F72 throws Exception { int sport = startServer ( NUM00 ) ; SSLSocket ssl = getSSLSocket ( InetAddress . getLocalHost ( ) , sport , InetAddress . getLocalHost ( ) , NUM00 ) ; assertNotNull ( ssl ) ; assertEquals ( sport , ssl . getPort ( ) ) ; $F59 ( ssl ) try { getSSLSocket ( InetAddress . getLocalHost ( ) , NUM00 , InetAddress . getLocalHost ( ) , NUM00 ) ; fail ( ) ; } catch ( IOException expected ) $F845 try { getSSLSocket ( InetAddress . getLocalHost ( ) , - NUM00 , InetAddress . getLocalHost ( ) , sport + NUM00 ) ; fail ( ) ; } $F28069 try { getSSLSocket ( InetAddress . getLocalHost ( ) , sport , InetAddress . getLocalHost ( ) , - NUM00 ) ; fail ( ) ; } $F28069 try { getSSLSocket ( InetAddress . getLocalHost ( ) , Integer . MIN_VALUE , InetAddress . getLocalHost ( ) , sport + NUM00 ) ; fail ( ) ; } catch ( IOException expectedOnRI ) { assertTrue ( StandardNames . IS_RI ) ; } catch ( IllegalArgumentException expectedOnAndroid ) { assertFalse ( StandardNames . IS_RI ) ; } try { getSSLSocket ( InetAddress . getLocalHost ( ) , sport , InetAddress . getLocalHost ( ) , Integer . MAX_VALUE ) ; fail ( ) ; } catch ( IllegalArgumentException expectedOnAndroid ) { assertFalse ( StandardNames . IS_RI ) ; } }
private String convertUserInputIntoAFullyQualifiedPath ( final String userInput ) { if ( FileUtils . denotesAbsolutePath ( userInput ) ) { return userInput ; } if $F7311 ( userInput , HOME_DIRECTORY_SYMBOL ) { $F18062 ( Assert , home ) if $F4012 ( userInput ) { return home + userInput . substring ( NUM00 ) ; } } String fullPath = getWorkingDirectoryAsString ( ) + userInput ; return fullPath ; }
static final int resizeStamp ( int n ) { return Integer . numberOfLeadingZeros ( n ) | ( NUM00 < < ( RESIZE_STAMP_BITS - NUM00 ) ) ; }
public byte readByte $F72 throws IOException { return dis . readByte ( ) ; }
protected static $F96 hkdfExpand ( $F96 ikm , $F96 salt , $F96 info , int length ) throws InvalidKeyException , NoSuchAlgorithmException { HKDFBytesGenerator hkdf = new HKDFBytesGenerator ( new SHA256Digest $F72 ) ; hkdf . init ( new HKDFParameters ( ikm , salt , info ) ) ; $F2175 ( okm , length ) hkdf . generateBytes ( okm , NUM00 , length ) ; return okm ; }
public boolean isEmoteIgnored ( Emoticon emote ) { return ignoredEmotes . contains ( emote . code ) ; }
public boolean isPropertyAllowed ( Name name ) $F298 ( propertiesAllowed , name )
$F1431 public void readFile ( String fileName ) throws JDOMException , IOException { if ( checkFile ( fileName ) ) { Element root = rootFromName ( fileName ) ; Element roster ; if ( root == null ) $F100849 ( log ) roster = root . getChild ( NUM00 ) ; if ( roster == null ) $F3472 ( log ) $F335184 consistIterator = root . getDescendants ( new ElementFilter $F580 ) ; try { Element consist ; do { $F45366 ( consist , consistIterator ) consistFromXml ( consist ) ; } while $F2921 ( consistIterator ) ; } catch ( NoSuchElementException nde ) $F981 ( log ) } else $F22715 ( log ) }
public void testConstructorSignBytesZeroNull2 $F72 { byte $F3009 = $F845 ; int aSign = NUM00 ; $F15143 $F3023 ( aNumber , aSign , aBytes ) $F3030 ( rBytes ) $F3031 ( resBytes , aNumber ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , aNumber ) }
private int accept ( FileDescriptor ssfd , FileDescriptor newfd , InetSocketAddress [ ] isaa ) throws IOException $F19580 ( accept0 , ssfd , newfd , isaa )
protected void transcode ( File file , Transcoder transcoder ) throws IOException , TranscoderException { transcoder . addTranscodingHint ( XMLAbstractTranscoder . KEY_XML_PARSER_VALIDATING , Boolean . FALSE ) ; SVGDocument doc = cloneDocument ( ) ; TranscoderInput input = new TranscoderInput ( doc ) ; OutputStream $F112784 ( out , file ) ; TranscoderOutput output = new TranscoderOutput ( out ) ; transcoder . transcode ( input , output ) ; $F1206 ( out ) $F59 ( out ) }
$F37597 ( tag , msg , args , sLevel , LEVEL_FATAL , String , Log )
private void reportProgress ( State state , InnerState innerState ) { $F657 ( now , System ) if ( innerState . mBytesSoFar - innerState . mBytesNotified > Constants . MIN_PROGRESS_STEP && now - innerState . mTimeLastNotification > Constants . MIN_PROGRESS_TIME ) { $F57044 ( mInfo , innerState ) mDB . updateDownloadCurrentBytes ( mInfo ) ; innerState . mBytesNotified = innerState . mBytesSoFar ; innerState . mTimeLastNotification = now ; long totalBytesSoFar = innerState . mBytesThisSession + mService . mBytesSoFar ; if ( Constants . LOGVV ) { Log . v ( Constants . TAG , NUM00 + mInfo . mCurrentBytes + NUM00 + mInfo . mTotalBytes ) ; Log . v ( Constants . TAG , NUM00 + totalBytesSoFar + NUM00 + mService . mTotalLength ) ; } mService . notifyUpdateBytes ( totalBytesSoFar ) ; } }
$F1 public Document newDocument $F72 { return new mf . org . apache . xerces . dom . DocumentImpl $F72 ; }
@ HLEFunction ( nid = NUM00 , version = NUM00 , checkInsideInterrupt = _BOOL ) public int __sceSasSetGrain ( int sasCore , int grain ) { checkSasHandleGood ( sasCore ) ; grainSamples = grain ; $F1082 }
public void handleTblRequestHandlerListButtonAddRequest ( RequestInvocationEvent event ) throws ModelControlException { try { Map values = getValues ( ) ; onBeforeSaveProfile ( values ) ; $F50322 ( setPageSessionAttribute , PROPERTY_ATTRIBUTE , values ) SCSAML2SOAPBindingRequestHandlerListAddViewBean vb = ( SCSAML2SOAPBindingRequestHandlerListAddViewBean ) getViewBean ( SCSAML2SOAPBindingRequestHandlerListAddViewBean . class ) ; unlockPageTrail ( ) ; passPgSessionMap ( vb ) ; $F50333 ( vb , getRequestContext ) } $F50339 ( setInlineAlertMessage , CCAlert , e ) }
protected static void drawDataPoint ( double x , double y , double xprev , double yprev , int size , int shape , Graphics gx ) { drawDataPoint ( x , y , size , shape , gx ) ; gx . drawLine ( ( int ) x , ( int ) y , ( int ) xprev , ( int ) yprev ) ; }
public void tableSwitch ( final $F2027 keys , final TableSwitchGenerator generator , final boolean useTable ) { for ( $F9808 ( i , keys ) ) { if $F15531 ( keys , i ) $F825 } Label def = newLabel ( ) ; Label end = newLabel ( ) ; if $F3305 ( keys ) { int len = keys . length ; int min = keys [ NUM00 ] ; int max = keys [ len - NUM00 ] ; int range = max - min + NUM00 ; if ( useTable ) { $F15537 ( labels , range ) Arrays . fill ( labels , def ) ; for ( $F1316 ( i , len ) ) { labels [ keys [ i ] - min ] = newLabel ( ) ; } mv . visitTableSwitchInsn ( min , max , def , labels ) ; for ( $F1316 ( i , range ) ) { Label label = labels [ i ] ; if ( label != def ) { mark ( label ) ; generator . generateCase ( i + min , end ) ; } } } else { $F15537 ( labels , len ) for ( $F1316 ( i , len ) ) $F15546 ( labels , i , newLabel ) mv . visitLookupSwitchInsn ( def , keys , labels ) ; for ( $F1316 ( i , len ) ) { mark ( labels [ i ] ) ; generator . generateCase ( keys [ i ] , end ) ; } } } mark ( def ) ; generator . generateDefault ( ) ; mark ( end ) ; }
static boolean chunkSet ( InternalDistributedMember recipient , Set set , int CHUNK_SIZE_IN_BYTES , boolean includeValues , ObjectIntProcedure proc ) throws IOException { $F10531 ( it , set ) boolean keepGoing = _BOOL ; boolean sentLastChunk = _BOOL ; final HeapDataOutputStream mos = new HeapDataOutputStream ( InitialImageOperation . CHUNK_SIZE_IN_BYTES + NUM00 , recipient . getVersionObject ( ) ) ; do { $F2268 ( mos ) int avgItemSize = NUM00 ; int itemCount = NUM00 ; while ( ( mos . size ( ) + avgItemSize ) < InitialImageOperation . CHUNK_SIZE_IN_BYTES && it . hasNext ( ) ) { $F8877 ( key , it ) DataSerializer . writeObject ( key , mos ) ; itemCount ++ ; avgItemSize = mos . size ( ) / itemCount ; } DataSerializer . writeObject ( ( Object ) null , mos ) ; int lastMsg = it . hasNext ( ) ? NUM00 : NUM00 ; keepGoing = proc . executeWith ( mos , lastMsg ) ; sentLastChunk = lastMsg == NUM00 && keepGoing ; } while ( keepGoing && it . hasNext ( ) ) ; return sentLastChunk ; }
private $F2027 parseMetaDataInformation $F72 throws UserError { $F15300 ( selectedColumns , metaData ) $F13750 ( usedColumnNames ) int columnIndex = NUM00 ; int usedColumnIndex = NUM00 ; for ( ColumnMetaData column : metaData ) { if ( ! column . isRemoved ( ) ) { selectedColumns [ usedColumnIndex ] = columnIndex ; usedColumnIndex ++ ; $F20605 ( columnName , column ) if $F2200 ( usedColumnNames , columnName ) $F207 ( usedColumnNames , columnName ) else { throw new UserError ( null , NUM00 , columnName ) ; } } columnIndex ++ ; } $F2027 attributeColumns = Arrays . copyOf ( selectedColumns , usedColumnIndex ) ; return attributeColumns ; }
static Field findField ( Object instance , String name ) throws NoSuchFieldException { for ( $F6969 clazz = instance . getClass ( ) ; clazz != null ; clazz = clazz . getSuperclass ( ) ) { try { $F111040 ( field , clazz , name ) $F41506 ( field , _BOOL ) return field ; } $F7847 } throw new NoSuchFieldException ( $F148645 ( name , instance ) ) ; }
SSLSession toSession ( $F96 data , String host , int port ) { $F5950 ( bais , data ) $F5337 ( dais , bais ) try { $F5952 ( type , dais ) if ( type != OPEN_SSL ) { log ( new AssertionError ( NUM00 + type ) ) ; $F1274 } $F5952 ( length , dais ) $F2175 ( sessionData , length ) dais . readFully ( sessionData ) ; $F5952 ( count , dais ) $F5958 certs = new X509Certificate [ count ] ; for ( $F119 ( i , count ) ) { $F5961 ( length , dais ) $F2175 ( certData , length ) dais . readFully ( certData ) ; certs [ i ] = OpenSSLX509Certificate . fromX509Der ( certData ) ; } return new OpenSSLSessionImpl ( sessionData , host , port , certs , this ) ; } catch ( IOException e ) { log ( e ) ; $F1274 } }
private $F117572 ( addDumpFile , dumpFile )
private static boolean dateByOrdinal ( DateTimeFormatterBuilder bld , Collection < DateTimeFieldType > fields , boolean extended , boolean strictISO ) { boolean reducedPrec = _BOOL ; if ( fields . remove ( DateTimeFieldType . year ( ) ) ) { $F16690 ( bld , yearElement ) if ( fields . remove ( DateTimeFieldType . dayOfYear ( ) ) ) { appendSeparator ( bld , extended ) ; bld . appendDayOfYear ( NUM00 ) ; } else { reducedPrec = _BOOL ; } } else if ( fields . remove ( DateTimeFieldType . dayOfYear ( ) ) ) { $F188366 ( bld ) bld . appendDayOfYear ( NUM00 ) ; } return reducedPrec ; }
private void writeAttr ( String name , String val ) throws IOException { writeAttr ( name , val , _BOOL ) ; }
public boolean isPageInRange ( int pageNumber ) { for ( $F2277 ( ind , sequenceStarts ) ) { if ( sequenceStarts . get ( ind ) <= pageNumber && pageNumber <= sequenceEnds . get ( ind ) ) return _BOOL ; } return _BOOL ; }
$F9159 ( logDebug , mSetupDone , _BOOL , mServiceConn , mContext , mDisposed , mService , mPurchaseListener )
$F1431 public static < T extends DimensionalItemObject > $F5675 asTypedList ( Collection < DimensionalItemObject > collection ) { $F98037 ( list ) if ( collection != null ) { for ( DimensionalItemObject object : collection ) { $F51668 ( list , object ) } } return list ; }
$F13735 ( prefix , namespace , attName , attValue , xmlWriter )
$F41720 ( value , absMin , absMax , absValue , Math )
public PutIndexTemplateRequest aliases ( XContentBuilder source ) { return aliases ( source . bytes ( ) ) ; }
void addNewTable ( String name , int tdefPageNumber , Short type , String linkedDbName , String linkedTableName ) throws IOException { addTable ( name , Integer . valueOf ( tdefPageNumber ) , type , linkedDbName , linkedTableName ) ; addToSystemCatalog ( name , tdefPageNumber , type , linkedDbName , linkedTableName , _tableParentId ) ; addToAccessControlEntries ( tdefPageNumber , _tableParentId , _newTableSIDs ) ; }
public static String hashpw ( $F96 password0 , final String salt ) { BCrypt B ; String real_salt ; byte passwordb [ ] = null , saltb [ ] , hashed [ ] ; char minor = $F2858 ; int rounds , off = NUM00 ; $F3239 ( rs ) if ( $F4434 ( salt ) || $F4434 ( salt ) ) $F825 if $F4432 ( salt ) { off = NUM00 ; } else { $F7783 ( minor , salt ) if ( minor != NUM00 || $F4434 ( salt ) ) $F825 off = NUM00 ; } if ( salt . charAt ( off + NUM00 ) > NUM00 ) $F825 rounds = Integer . parseInt ( $F10818 ( salt , off ) ) ; real_salt = salt . substring ( off + NUM00 , off + NUM00 ) ; try { if ( minor >= $F74671 ) { passwordb = $F30258 ( Arrays , password0 ) ; $F8528 ( passwordb ) = $F19905 ; } else { $F42716 ( passwordb , Arrays , password0 ) ; } saltb = decode_base64 ( real_salt , BCRYPT_SALT_LEN ) ; B = new BCrypt $F72 ; hashed = B . crypt_raw ( passwordb , saltb , rounds , bf_crypt_ciphertext . clone ( ) ) ; } finally { if ( password0 != null ) { Arrays . fill ( password0 , $F74671 ) ; password0 = null ; } if ( passwordb != null ) { Arrays . fill ( passwordb , $F74671 ) ; passwordb = null ; } } $F84 ( rs ) if ( minor >= NUM00 ) $F288 ( rs , minor ) $F84 ( rs ) $F2854 ( rounds , rs ) if ( rounds > NUM00 ) $F825 $F42779 ( rs , Integer , rounds ) $F84 ( rs ) rs . append ( encode_base64 ( saltb , saltb . length ) ) ; rs . append ( encode_base64 ( hashed , bf_crypt_ciphertext . length * NUM00 - NUM00 ) ) ; $F92 ( rs ) }
public void removeListener ( $F1113 ConfigurationListener listener ) { if ( myListeners != null ) { myListeners . remove ( listener ) ; if $F2979 ( myListeners ) { myListeners = null ; } } }
void reclaimScrapViews $F206149 ( views ) { if ( mViewTypeCount == NUM00 ) $F21926 ( views , mCurrentScrap ) else { final int viewTypeCount = mViewTypeCount ; $F158084 ( scrapViews , mScrapViews ) for ( $F1316 ( i , viewTypeCount ) ) { $F65533 ( scrapPile , scrapViews , i ) views . addAll ( scrapPile ) ; } } }
public void doWindowOpen $F72 $F5795 ( doConnect )
public boolean schedule ( Runnable task , ClassLoader loader ) { boolean isPriority = _BOOL ; boolean isQueue = _BOOL ; boolean isWake = _BOOL ; return scheduleImpl ( task , loader , MAX_EXPIRE , isPriority , isQueue , isWake ) ; }
public static int hash2 ( int hash , Object x , Object y ) { return NUM00 | ( hash + NUM00 * System . identityHashCode ( x ) + NUM00 * System . identityHashCode ( y ) ) ; }
public static $F1986 parseVectorString ( String vectorString ) { $F6542 ( parsedString , vectorString ) $F40939 ( vector , parsedString ) for ( $F1139 ( j , parsedString ) ) { double val = Utils . doubleParsable ( parsedString [ j ] ) ; vector [ j ] = Double . isNaN ( val ) ? NUM00 : val ; } return vector ; }
public String globalInfo $F72 { return $F41 ; }
public static $F4203 $F51719 concat ( Stream $F10049 a , Stream $F10049 b ) { Objects . requireNonNull ( a ) ; Objects . requireNonNull ( b ) ; $F1431 Spliterator $F4203 split = new Streams . ConcatSpliterator . OfRef $F200 ( ( Spliterator $F4203 ) a . spliterator ( ) , ( Spliterator $F4203 ) b . spliterator ( ) ) ; $F51719 stream = StreamSupport . stream ( split , a . isParallel ( ) || b . isParallel ( ) ) ; return stream . onClose ( Streams . composedClose ( a , b ) ) ; }
$F122843 $F32043 public void test_DR_PGS_4NODES_2NODESDOWN_Validate_Receiver $F72 throws Exception { Integer lnPort = ( Integer ) vm0 . invoke ( null ) ; Integer nyPort = ( Integer ) vm1 . invoke ( null ) ; createCacheInVMs ( nyPort , vm2 , vm3 ) ; createReceiverInVMs ( vm2 , vm3 ) ; createCacheInVMs ( lnPort , vm4 , vm5 , vm6 , vm7 ) ; $F188761 ( vm4 ) $F188761 ( vm5 ) $F188761 ( vm6 ) $F188761 ( vm7 ) $F188761 ( vm4 ) $F188761 ( vm5 ) $F188761 ( vm6 ) $F188761 ( vm7 ) startSenderInVMs ( NUM00 , vm4 , vm5 , vm6 , vm7 ) ; $F188761 ( vm2 ) $F188761 ( vm3 ) $F188761 ( vm4 ) $F188761 ( vm5 ) $F188761 ( vm6 ) $F188761 ( vm7 ) $F9470 ( Thread ) { AsyncInvocation inv1 = vm7 . invokeAsync ( null ) ; $F9470 ( Thread ) AsyncInvocation inv2 = vm4 . invokeAsync ( null ) ; $F9470 ( Thread ) AsyncInvocation inv3 = vm6 . invokeAsync ( null ) ; $F9470 ( Thread ) AsyncInvocation inv4 = vm5 . invokeAsync ( null ) ; try { $F14454 ( inv1 ) $F14454 ( inv2 ) $F14454 ( inv3 ) $F14454 ( inv4 ) } catch ( Exception e ) { Assert . fail ( NUM00 , e ) ; } } $F188761 ( vm6 ) $F188761 ( vm7 ) $F188761 ( vm2 ) }
public void findAndInit ( Iterator it ) $F7686 ( it , findAndInit )
public static DataSourcePropertiesInterface decodeXML ( Document document , String elementName ) { if $F54923 ( document , elementName ) $F1337 $F2539 map = new LinkedHashMap $F2538 $F72 ; NodeList nodeList = document . getElementsByTagName ( elementName ) ; if ( $F72501 ( nodeList ) ) { Node node = nodeList . item ( NUM00 ) ; $F15376 ( child , node ) while ( child != null ) { if $F61358 ( child , Node ) { map . put ( child . getNodeName ( ) , child . getTextContent ( ) ) ; } $F21003 ( child ) } return DataSourceConnectorFactory . getDataSourceProperties ( map ) ; } else { return DataSourceConnectorFactory . getNoDataSource ( ) ; } }
$F1 public char next $F72 { ++ docPos ; if ( docPos < segmentEnd || segmentEnd >= doc . getLength ( ) ) $F43105 ( text ) try { doc . getText ( segmentEnd , doc . getLength ( ) - segmentEnd , text ) ; } catch ( BadLocationException e ) $F9491 ( e ) segmentEnd += text . count ; return text . current ( ) ; }
private void adjustRowHeights ( JTable table ) { for ( $F84968 ( row , table ) ) { int rowHeight = table . getRowHeight ( ) ; for ( $F90183 ( column , table ) ) { Component comp = table . prepareRenderer ( table . getCellRenderer ( row , column ) , row , column ) ; rowHeight = Math . max ( rowHeight , $F320997 ( comp ) ) ; } table . setRowHeight ( row , rowHeight ) ; } }
public $F28584 volumeURIs ( $F28584 uris , boolean delete , boolean remediate , ValCk ... checks ) { $F114980 ( remediatedURIs ) $F47942 volumes = dbClient . queryObject ( $F8540 , uris ) ; $F47942 remediatedVolumes = volumes ( volumes , delete , remediate , checks ) ; for ( Volume volume : remediatedVolumes ) $F42097 ( remediatedURIs , volume ) return remediatedURIs ; }
private FormatString [ ] parse ( String s ) { ArrayList < FormatString > $F204 ( al ) ; $F1150 ( m , fsPattern , s ) for ( $F51283 ( i , len , s ) ; i < len ; ) { if $F36147 ( m , i ) { if ( m . start ( ) != i ) { checkText ( s , i , m . start ( ) ) ; al . add ( new FixedString ( s . substring ( i , m . start ( ) ) ) ) ; } al . add ( new FormatSpecifier ( m ) ) ; $F204945 ( i , m ) } else { checkText ( s , i , len ) ; al . add ( new FixedString ( s . substring ( i ) ) ) ; $F597 } } return al . toArray ( new FormatString $F2313 ( al ) ) ; }
$F73823 ( lock , this , count )
private void updateIndexColumnButtons $F72 { indexRemoveButton . setEnabled ( _BOOL ) ; indexUpButton . setEnabled ( _BOOL ) ; indexDownButton . setEnabled ( _BOOL ) ; int index = selectedColumns . getSelectionIndex ( ) ; if ( index >= NUM00 ) { indexRemoveButton . setEnabled ( _BOOL ) ; if ( index > NUM00 ) $F7728 ( indexUpButton , _BOOL ) else if ( index < selectedColumns . getItemCount ( ) - NUM00 ) $F7728 ( indexDownButton , _BOOL ) } }
public String urlForPOISearch ( String tag , BoundingBox bb , int limit , int timeout ) { $F83 ( s ) $F86403 ( s , mService ) String sBB = NUM00 + bb . getLatSouth ( ) + NUM00 + bb . getLonWest ( ) + NUM00 + bb . getLatNorth ( ) + NUM00 + bb . getLonEast ( ) + NUM00 ; String data = NUM00 + timeout + NUM00 + NUM00 + tag + NUM00 + sBB + NUM00 + NUM00 + tag + NUM00 + sBB + NUM00 + NUM00 + tag + NUM00 + sBB + NUM00 + NUM00 + limit + NUM00 ; Log . d ( BonusPackHelper . LOG_TAG , NUM00 + data ) ; s . append ( URLEncoder . encode ( data ) ) ; $F92 ( s ) }
public void waitForDecodingToFinish $F72 { while ( isDecoding ) { try $F31130 ( Thread ) catch ( final InterruptedException e ) { LogWriter . writeLog ( $F5351 ( e ) ) ; isDecoding = _BOOL ; } } }
private static String wikiToPlainText ( String content ) { $F2899 ( content ) $F2899 ( content ) $F2899 ( content ) $F2899 ( content ) $F2899 ( content ) $F2899 ( content ) $F2899 ( content ) $F2899 ( content ) $F2899 ( content ) $F2899 ( content ) $F1382 ( content ) $F22998 ( size , content ) $F129840 ( endOfFirstParagraph , content ) if ( endOfFirstParagraph < NUM00 ) { endOfFirstParagraph = size ; } content = content . substring ( $F150757 ( Math , endOfFirstParagraph ) ) ; return content ; }
public final $F96 update $F97 ( input ) { if ( mode != ENCRYPT_MODE && mode != DECRYPT_MODE ) $F10763 $F826 ( input ) $F118899 ( input ) return spiImpl . engineUpdate ( input , NUM00 , input . length ) ; }
$F36345 ( tag , msg , args , sLevel , LEVEL_ERROR , String , Log )
private static int createPackedParams ( SunGraphics2D sg2d , GlyphList gl ) { return ( ( ( gl . usePositions ( ) ? NUM00 : NUM00 ) < < OFFSET_POSITIONS ) | ( ( gl . isSubPixPos ( ) ? NUM00 : NUM00 ) < < OFFSET_SUBPIXPOS ) | ( ( gl . isRGBOrder ( ) ? NUM00 : NUM00 ) < < OFFSET_RGBORDER ) | ( ( sg2d . lcdTextContrast & NUM00 ) < < OFFSET_CONTRAST ) ) ; }
public static int update $F13180 ( sql , args ) { Connection c = null ; PreparedStatement p = null ; try { c = getConnection ( ) ; $F43349 ( c ) p = c . prepareStatement ( sql ) ; int order = NUM00 ; if ( args != null ) { for ( $F1139 ( i , args ) ) { Object o = args [ i ] ; setParameter ( p , order ++ , o ) ; } } return p . executeUpdate ( ) ; } catch ( Exception e ) { if $F6002 ( log ) log . error ( sql + toString ( args ) , e ) ; } $F168670 ( close , p , c ) $F1082 }
public boolean isLockSubject $F72 { return _BOOL ; }
public void runTest $F72 throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; $F236 ( doc , load , _BOOL ) $F237 ( elementList , doc ) $F238 ( nameNode , elementList ) $F241 ( child , nameNode ) { boolean success = _BOOL ; try { $F4054 ( child ) } $F250 ( success , ex , DOMException ) assertTrue ( NUM00 , success ) ; } }
$F1 public int hashCode $F72 { int code = NUM00 ; $F156574 ( fPublicId , code ) $F156574 ( fLiteralSystemId , code ) $F156574 ( fBaseSystemId , code ) $F156574 ( fExpandedSystemId , code ) $F156574 ( fNamespace , code ) return code ; }
public QuickActionView addAction ( Action action ) { checkShown ( ) ; mActions . add ( action ) ; return this ; }
$F188545 ( sourceList , entry , _BOOL )
protected boolean display ( File helpFile ) throws HelpException { if $F3428 ( helpFile ) $F9278 ( loadAndWrite , helpFile , _BOOL ) else { $F4453 ( notFound , helpDir , NOT_FOUND ) if $F3428 ( notFound ) loadAndWrite ( notFound ) ; else throw new HelpException $F580 ; return _BOOL ; } }
public static void storeLocation ( Context context , LatLng location ) { $F111887 ( prefs , PreferenceManager , context ) $F37526 ( editor , prefs ) editor . putLong ( PREFERENCES_LAT , Double . doubleToRawLongBits ( location . latitude ) ) ; editor . putLong ( PREFERENCES_LNG , Double . doubleToRawLongBits ( location . longitude ) ) ; $F37527 ( editor ) }
public Point2D either $F72 { return best1 ; }
$F1 public boolean equals ( Object object ) { $F3627 ( this , object , _BOOL ) if ( object instanceof List ) { $F33514 ( list , object ) $F33517 ( list , size , _BOOL ) $F33240 it1 = iterator ( ) , it2 = list . iterator ( ) ; while $F2921 ( it1 ) { Object e1 = it1 . next ( ) , e2 = it2 . next ( ) ; $F33528 ( e1 , e2 , _BOOL ) } return _BOOL ; } return _BOOL ; }
public static String rowToString ( JSONArray ja ) { $F280 ( sb ) for ( $F146321 ( i , ja ) ) { $F34674 ( i , sb ) Object object = ja . opt ( i ) ; if ( object != null ) { $F1822 ( string , object ) if ( $F20 ( string ) && ( $F116993 ( string ) || $F48845 ( string ) || string . indexOf ( NUM00 ) >= NUM00 || $F4431 ( string ) ) ) { $F84 ( sb ) $F115 ( length , string ) for ( $F6225 ( j , length ) ) { $F1280 ( c , string , j ) if ( c >= NUM00 && c != NUM00 ) $F288 ( sb , c ) } $F84 ( sb ) } else $F288 ( sb , string ) } } $F84 ( sb ) $F92 ( sb ) }
private static void removeTable ( Connection conn , String name ) throws SQLException { $F2936 ( name ) $F11282 ( stat , conn ) $F81111 ( stat , name ) DBUtil . commitEL ( conn ) ; }
public boolean containsCategory ( String category ) { $F78369 ( hiddenBugCategorySet , category ) }
public static boolean isVolumeFullCopySource ( Volume volume , DbClient dbClient ) { boolean isFullCopySource = _BOOL ; StringSet fullCopyIds = volume . getFullCopies ( ) ; if $F13709 ( fullCopyIds ) { $F13712 ( fullCopyIdsIter , fullCopyIds ) while $F2921 ( fullCopyIdsIter ) { URI fullCopyURI = URI . create ( fullCopyIdsIter . next ( ) ) ; $F8544 ( fullCopyVolume , dbClient , fullCopyURI ) if ( ( fullCopyVolume != null ) && ( ! fullCopyVolume . getInactive ( ) ) ) { isFullCopySource = _BOOL ; } } } return isFullCopySource ; }
$F1 public void assertEquals $F109214 ( message , expectedObj , actualObj ) { LinearRegressionModel expected = ( LinearRegressionModel ) expectedObj ; LinearRegressionModel actual = ( LinearRegressionModel ) actualObj ; message = message + NUM00 + actual . getSource ( ) + NUM00 ; Assert . assertArrayEquals ( message + NUM00 , expected . getCoefficients ( ) , actual . getCoefficients ( ) , NUM00 ) ; Assert . assertArrayEquals ( message + NUM00 , expected . getProbabilities ( ) , actual . getProbabilities ( ) , NUM00 ) ; Assert . assertArrayEquals ( message + NUM00 , expected . getSelectedAttributeNames ( ) , actual . getSelectedAttributeNames ( ) ) ; Assert . assertArrayEquals ( message + NUM00 , expected . getSelectedAttributes ( ) , actual . getSelectedAttributes ( ) ) ; Assert . assertArrayEquals ( message + NUM00 , expected . getStandardErrors ( ) , actual . getStandardErrors ( ) , NUM00 ) ; Assert . assertArrayEquals ( message + NUM00 , expected . getStandardizedCoefficients ( ) , actual . getStandardizedCoefficients ( ) , NUM00 ) ; Assert . assertArrayEquals ( message + NUM00 , expected . getTolerances ( ) , actual . getTolerances ( ) , NUM00 ) ; Assert . assertArrayEquals ( message + NUM00 , expected . getTStats ( ) , actual . getTStats ( ) , NUM00 ) ; }
$F21572 ( doc , elementList , nameNode , child , childData , load , _BOOL , assertEquals )
public static $F529 entityMaintPermCheck $F71242 ( dctx , context ) { $F108907 ( userLogin , context ) $F28491 ( locale , context ) Security security = dctx . getSecurity ( ) ; $F67631 ( resultMap ) if ( security . hasPermission ( NUM00 , userLogin ) ) { resultMap = ServiceUtil . returnSuccess ( ) ; $F545 ( resultMap , _BOOL ) } else { resultMap = ServiceUtil . returnFailure ( UtilProperties . getMessage ( resource , NUM00 , locale ) ) ; $F545 ( resultMap , _BOOL ) } return resultMap ; }
public void testQuorumSucceed $F72 { quorum . succeed ( ) ; quorum . fail ( ) ; assertEquals ( callbackResult . get ( ) , NUM00 ) ; quorum . fail ( ) ; quorum . succeed ( ) ; assertEquals ( callbackResult . get ( ) , NUM00 ) ; }
public void requestAfterExplanation ( $F4170 $F806 permissions ) { $F22547 ( permissionsToRequest ) for ( String permissionName : permissions ) { if ( isPermissionDeclined ( permissionName ) ) $F207 ( permissionsToRequest , permissionName ) else { permissionCallback . onPermissionPreGranted ( permissionName ) ; } } $F8504 ( permissionsToRequest ) $F85163 ( permissions , permissionsToRequest ) context . requestPermissions ( permissions , REQUEST_PERMISSIONS ) ; }
static void pauseThread ( long duration ) { try $F7595 ( Thread , duration ) $F92403 ( s_logger , e ) }
final public void println ( String v ) $F87800 ( _out , v , log , Level , e )
public int read $F233176 ( offset , length ) throws IOException $F48842 ( sd , cbuf , offset , length )
public int read $F72 throws IOException { int val ; if ( $F7614 ( val , is ) < NUM00 ) $F7629 switch ( val & NUM00 ) { $F3366 $F3366 val = $F74254 ( val ) | $F353757 ( is ) ; $F597 $F3366 val = $F74254 ( val ) | ( $F353757 ( is ) < < NUM00 ) | $F353757 ( is ) ; $F597 $F3366 throw new UnsupportedEncodingException $F72 ; $F2448 } return val ; }
private static boolean CallNonvirtualBooleanMethodV $F128351 ( env , objJREF , classJREF , methodID , argAddress ) throws Exception { $F4274 ( traceJNI , VM ) $F4275 ( RuntimeEntrypoints ) try { $F4276 ( obj , env , objJREF ) Object returnObj = JNIHelpers . invokeWithVarArg ( obj , methodID , argAddress , TypeReference . Boolean , _BOOL ) ; return Reflection . unwrapBoolean ( returnObj ) ; } catch ( Throwable unexpected ) { $F4285 ( traceJNI , unexpected , System ) env . recordException ( unexpected ) ; return _BOOL ; } }
private boolean rContainsRMInstruction ( ProgramBlock pb , String varName ) { if ( pb instanceof WhileProgramBlock ) { WhileProgramBlock tmp = ( WhileProgramBlock ) pb ; for ( ProgramBlock c : tmp . getChildBlocks ( ) ) $F19670 ( rContainsRMInstruction , c , varName , _BOOL ) } else if ( pb instanceof IfProgramBlock ) { IfProgramBlock tmp = ( IfProgramBlock ) pb ; for ( ProgramBlock c : tmp . getChildBlocksIfBody ( ) ) $F19670 ( rContainsRMInstruction , c , varName , _BOOL ) for ( ProgramBlock c : tmp . getChildBlocksElseBody ( ) ) $F19670 ( rContainsRMInstruction , c , varName , _BOOL ) } else if ( pb instanceof ForProgramBlock ) { ForProgramBlock tmp = ( ForProgramBlock ) pb ; for ( ProgramBlock c : tmp . getChildBlocks ( ) ) $F19670 ( rContainsRMInstruction , c , varName , _BOOL ) } else if ( pb instanceof FunctionProgramBlock ) $F845 else { for ( Instruction inst : pb . getInstructions ( ) ) { $F1822 ( instStr , inst ) if ( instStr . contains ( NUM00 + Lop . OPERAND_DELIMITOR + varName ) || instStr . contains ( NUM00 + Lop . OPERAND_DELIMITOR + varName ) ) { return _BOOL ; } } } return _BOOL ; }
public ProjectImporter ( final File rootFolder ) { assertNotNull ( NUM00 , rootFolder ) ; assertTrue ( NUM00 + rootFolder , rootFolder . exists ( ) ) ; assertTrue ( NUM00 + rootFolder , rootFolder . isDirectory ( ) ) ; assertTrue ( NUM00 + rootFolder , rootFolder . canRead ( ) ) ; assertTrue ( NUM00 + rootFolder , null != rootFolder . listFiles ( ) ) ; this . rootFolder = rootFolder ; }
public void testDoubles $F72 throws Exception { $F1986 values = new double [ ] { Double . NEGATIVE_INFINITY , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , + NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , Double . POSITIVE_INFINITY , Double . NaN } ; $F19280 ( encoded , values ) for ( $F1139 ( i , values ) ) { encoded [ i ] = NumericUtils . doubleToSortableLong ( values [ i ] ) ; assertTrue ( NUM00 , Double . compare ( values [ i ] , NumericUtils . sortableLongToDouble ( encoded [ i ] ) ) == NUM00 ) ; } for ( $F1139 ( i , encoded ) ) { assertTrue ( NUM00 , encoded [ i - NUM00 ] < encoded [ i ] ) ; } }
public static boolean isRegistered $F60993 ( clazz ) { return $F20053 ( regModules , clazz ) ; }
private static $F7329 offsetASR $F68514 ( offset , environment , instructions , registerNodeValue1 , registerNodeValue2 , immediateNodeValue ) { $F7336 ( address , environment ) $F7336 ( index , environment ) $F7336 ( tmpVar , environment ) long baseOffset = offset ; if $F3057 ( immediateNodeValue ) { $F7336 ( isZeroCondition , environment ) $F7336 ( tmpVar1 , environment ) instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dw , registerNodeValue2 , wd , $F43818 ( String ) , dw , tmpVar1 ) ) ; $F453896 ( instructions , ReilHelpers , baseOffset , dw , tmpVar1 , bt , isZeroCondition ) instructions . add ( ReilHelpers . createSub ( baseOffset ++ , dw , String . valueOf ( NUM00 ) , bt , isZeroCondition , dw , index ) ) ; } else { $F7336 ( tmpVar1 , environment ) $F7336 ( tmpVar2 , environment ) $F7336 ( tmpVar3 , environment ) $F7336 ( tmpVar4 , environment ) instructions . add ( ReilHelpers . createAdd ( baseOffset ++ , dw , registerNodeValue2 , dw , String . valueOf ( NUM00 ) , dw , tmpVar1 ) ) ; instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dw , tmpVar1 , dw , NUM00 + immediateNodeValue , dw , tmpVar2 ) ) ; instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dw , String . valueOf ( NUM00 ) , dw , NUM00 + immediateNodeValue , dw , tmpVar3 ) ) ; instructions . add ( ReilHelpers . createSub ( baseOffset ++ , dw , tmpVar2 , dw , tmpVar3 , qw , tmpVar4 ) ) ; $F7364 ( instructions , ReilHelpers , baseOffset , qw , tmpVar4 , dw , dWordBitMask , index ) } $F43828 ( instructions , ReilHelpers , baseOffset , dw , registerNodeValue1 , index , tmpVar ) $F7341 ( instructions , ReilHelpers , baseOffset , dw , tmpVar , dWordBitMask , address ) $F7348 ( address , registerNodeValue1 ) }
public $F6969 loadClass ( String name ) throws ClassNotFoundException $F107831 ( Class , name )
public void waitForOperations $F72 { operator . waitForOperations ( ) ; }
private static int byteCompaction ( int mode , $F2027 codewords , int codeIndex , StringBuilder result ) { if ( mode == BYTE_COMPACTION_MODE_LATCH ) { int count = NUM00 ; long value = NUM00 ; $F11577 ( decodedData ) $F11844 ( byteCompactedCodewords ) boolean end = _BOOL ; int nextCode = codewords [ codeIndex ++ ] ; while ( ( codeIndex < codewords [ NUM00 ] ) && ! end ) { byteCompactedCodewords [ count ++ ] = nextCode ; value = NUM00 * value + nextCode ; nextCode = codewords [ codeIndex ++ ] ; if $F62764 ( nextCode , TEXT_COMPACTION_MODE_LATCH , BYTE_COMPACTION_MODE_LATCH , NUMERIC_COMPACTION_MODE_LATCH , BYTE_COMPACTION_MODE_LATCH_6 , BEGIN_MACRO_PDF417_CONTROL_BLOCK , BEGIN_MACRO_PDF417_OPTIONAL_FIELD , MACRO_PDF417_TERMINATOR ) { codeIndex -- ; end = _BOOL ; } else { if ( ( count % NUM00 == NUM00 ) && ( count > NUM00 ) ) { for ( $F809 ( j ) ) { decodedData [ NUM00 - j ] = ( char ) ( value % NUM00 ) ; value >>= NUM00 ; } result . append ( decodedData ) ; count = NUM00 ; } } } if ( codeIndex == codewords [ NUM00 ] && nextCode < TEXT_COMPACTION_MODE_LATCH ) $F52339 ( byteCompactedCodewords , count , nextCode ) for ( $F119 ( i , count ) ) { $F3356 ( result , byteCompactedCodewords , i ) } } else if ( mode == BYTE_COMPACTION_MODE_LATCH_6 ) { int count = NUM00 ; long value = NUM00 ; boolean end = _BOOL ; while $F38554 ( codeIndex , codewords , end ) { int code = codewords [ codeIndex ++ ] ; if ( code < TEXT_COMPACTION_MODE_LATCH ) { count ++ ; value = NUM00 * value + code ; } else { if $F62764 ( code , TEXT_COMPACTION_MODE_LATCH , BYTE_COMPACTION_MODE_LATCH , NUMERIC_COMPACTION_MODE_LATCH , BYTE_COMPACTION_MODE_LATCH_6 , BEGIN_MACRO_PDF417_CONTROL_BLOCK , BEGIN_MACRO_PDF417_OPTIONAL_FIELD , MACRO_PDF417_TERMINATOR ) { codeIndex -- ; end = _BOOL ; } } if ( ( count % NUM00 == NUM00 ) && ( count > NUM00 ) ) { $F11577 ( decodedData ) for ( $F809 ( j ) ) { decodedData [ NUM00 - j ] = $F27723 ( value ) ; value >>= NUM00 ; } result . append ( decodedData ) ; count = NUM00 ; } } } return codeIndex ; }
protected boolean isAllTestComponentsInTarget ( Geometry testGeom ) { List coords = ComponentCoordinateExtracter . getCoordinates ( testGeom ) ; for ( $F2774 ( i , coords ) ) { Coordinate p = $F131847 ( i ) ; int loc = targetPointLocator . locate ( p ) ; if ( loc == Location . EXTERIOR ) return _BOOL ; } return _BOOL ; }
private Object createInner ( SimpleObject post , RequestContext context ) throws ResponseException { try { String xml = completeXform ( convertUuidsToIds ( post ) ) ; File file = File . createTempFile ( NUM00 , null ) ; processor . processXForm ( xml , file . getAbsolutePath ( ) , _BOOL , context . getRequest ( ) ) ; } catch ( IOException e ) { throw new GenericRestException ( NUM00 , e ) ; } catch ( ResponseException e ) { throw e ; } catch ( Exception e ) { throw new ConversionException ( NUM00 , e ) ; } Encounter encounter = guessEncounterFromXformSubmission ( post ) ; $F1933 ( encounter , post ) SimpleObject returnJson = new SimpleObject $F72 ; EncounterResource . populateJsonProperties ( encounter , returnJson ) ; return returnJson ; }
public Endpoint ( URI endpointUrl , SecurityMode ... modes ) { if ( modes == null || endpointUrl == null ) $F824 for ( SecurityMode m : modes ) { $F19273 ( m ) $F26525 ( hash , m ) } $F182783 ( this , endpointUrl ) this . modes = modes ; this . endpointConfiguration = EndpointConfiguration . defaults ( ) ; $F26525 ( hash , endpointUrl ) }
protected Value parseValue $F72 throws IOException , RDFParseException , RDFHandlerException { int c = peekCodePoint ( ) ; if ( c == NUM00 ) $F2905 ( parseURI ) else if ( c == NUM00 || TurtleUtil . isPrefixStartChar ( c ) ) $F2905 ( parseQNameOrBoolean ) else if ( c == NUM00 ) $F2905 ( parseNodeID ) else if $F37111 ( c ) $F2905 ( parseQuotedLiteral ) else if ( ASCIIUtil . isNumber ( c ) || c == NUM00 || c == NUM00 || c == NUM00 ) $F2905 ( parseNumber ) else if ( c == - NUM00 ) { throwEOFException ( ) ; $F1274 } else { reportFatalError ( NUM00 + new String ( Character . toChars ( c ) ) + NUM00 ) ; $F1274 } }
public TimeSeriesCollection $F72 { this ( null , TimeZone . getDefault ( ) ) ; }
private static boolean isOptimizableForDescendantIterator ( Compiler compiler , int stepOpCodePos , int stepIndex ) throws $F1872 { int stepType ; int stepCount = NUM00 ; boolean foundDorDS = _BOOL ; boolean foundSelf = _BOOL ; boolean foundDS = _BOOL ; int nodeTestType = OpCodes . NODETYPE_NODE ; while ( OpCodes . ENDOP != ( stepType = compiler . getOp ( stepOpCodePos ) ) ) { if ( nodeTestType != OpCodes . NODETYPE_NODE && nodeTestType != OpCodes . NODETYPE_ROOT ) return _BOOL ; stepCount ++ ; $F19679 ( stepCount , _BOOL ) boolean mightBeProximate = mightBeProximate ( compiler , stepOpCodePos , stepType ) ; if ( mightBeProximate ) return _BOOL ; switch ( stepType ) { case OpCodes . FROM_FOLLOWING : case OpCodes . FROM_FOLLOWING_SIBLINGS : case OpCodes . FROM_PRECEDING : case OpCodes . FROM_PRECEDING_SIBLINGS : case OpCodes . FROM_PARENT : case OpCodes . OP_VARIABLE : case OpCodes . OP_EXTFUNCTION : case OpCodes . OP_FUNCTION : case OpCodes . OP_GROUP : case OpCodes . FROM_NAMESPACE : case OpCodes . FROM_ANCESTORS : case OpCodes . FROM_ANCESTORS_OR_SELF : case OpCodes . FROM_ATTRIBUTES : case OpCodes . MATCH_ATTRIBUTE : case OpCodes . MATCH_ANY_ANCESTOR : case OpCodes . MATCH_IMMEDIATE_ANCESTOR : return _BOOL ; case OpCodes . FROM_ROOT : if ( NUM00 != stepCount ) return _BOOL ; $F597 case OpCodes . FROM_CHILDREN : if ( ! foundDS && ! ( foundDorDS && foundSelf ) ) return _BOOL ; $F597 case OpCodes . FROM_DESCENDANTS_OR_SELF : foundDS = _BOOL ; case OpCodes . FROM_DESCENDANTS : if ( NUM00 == stepCount ) return _BOOL ; foundDorDS = _BOOL ; $F597 case OpCodes . FROM_SELF : if ( NUM00 != stepCount ) return _BOOL ; foundSelf = _BOOL ; $F597 $F1267 throw new RuntimeException ( XSLMessages . createXPATHMessage ( XPATHErrorResources . ER_NULL_ERROR_HANDLER , $F19685 ( Integer , stepType ) ) ) ; } nodeTestType = compiler . getStepTestType ( stepOpCodePos ) ; int nextStepOpCodePos = compiler . getNextStepPos ( stepOpCodePos ) ; $F7995 ( nextStepOpCodePos ) if ( OpCodes . ENDOP != compiler . getOp ( nextStepOpCodePos ) ) { if ( compiler . countPredicates ( stepOpCodePos ) > NUM00 ) { return _BOOL ; } } stepOpCodePos = nextStepOpCodePos ; } return _BOOL ; }
public static $F11685 $F57915 of ( E e1 , E e2 , E e3 ) { $F57915 $F204 ( list ) ; list . add ( e1 ) ; list . add ( e2 ) ; list . add ( e3 ) ; return list ; }
public int alloc ( int size ) { int index = n ; int len = array . length ; if ( n + size >= len ) { $F112445 ( aux , len , blockSize ) $F135 ( System , array , aux , len ) array = aux ; } n += size ; return index ; }
$F1 public void addAttribute ( String name , float value ) { $F4074 ( str , Float , value ) $F212530 ( str ) current . setAttribute ( name , str ) ; }
@ RequestMapping ( $F7426 ( RequestMethod ) ) $F4586 public JsonResponse createDirectory ( $F35231 final String containerId , $F35231 final String applicationName , @ RequestParam ( NUM00 ) String path ) throws ServiceException , CheckException , IOException { if $F585 ( logger ) { $F586 ( logger , containerId ) $F586 ( logger , applicationName ) $F586 ( logger , path ) } fileService . createDirectory ( applicationName , containerId , path ) ; return new HttpOk $F72 ; }
public void fill_ellipse_arr ( PlaEllipse [ ] p_ellipse_arr , Graphics p_g , Color p_color , double p_translucency_factor ) { $F8249 ( p_color ) if $F51363 ( p_ellipse_arr ) $F665 GeneralPath draw_path = new GeneralPath ( GeneralPath . WIND_EVEN_ODD ) ; for ( PlaEllipse curr_ellipse : p_ellipse_arr ) { Point2D center = coordinate_transform . board_to_screen ( curr_ellipse . center ) ; double bigger_radius = coordinate_transform . board_to_screen ( curr_ellipse . bigger_radius ) ; if ( ! point_near_rectangle ( center . getX ( ) , center . getY ( ) , ( Rectangle ) p_g . getClip ( ) , bigger_radius ) ) $F1448 double smaller_radius = coordinate_transform . board_to_screen ( curr_ellipse . smaller_radius ) ; Ellipse2D draw_ellipse = new $F35359 ( center . getX ( ) - bigger_radius , center . getY ( ) - smaller_radius , NUM00 * bigger_radius , NUM00 * smaller_radius ) ; double rotation = coordinate_transform . board_to_screen_angle ( curr_ellipse . rotation ) ; $F34721 ( affine_transform ) affine_transform . rotate ( $F175257 ( rotation , center ) ) ; Shape rotated_ellipse = affine_transform . createTransformedShape ( draw_ellipse ) ; draw_path . append ( rotated_ellipse , _BOOL ) ; } $F20230 ( g2 , p_g ) g2 . setColor ( p_color ) ; set_translucency ( g2 , p_translucency_factor ) ; $F34716 ( g2 , RenderingHints ) g2 . fill ( draw_path ) ; }
$F1 public void zoomDomainAxes ( double factor , PlotRenderingInfo state , Point2D source ) $F845
private void refreshChallengeCounts $F72 { mDueChallengeCounts = mDueChallengeLogic . getDueChallengeCounts ( mCategories ) ; }
public Identity ( final int dim ) { this ( dim , EnumSet . noneOf ( Address . Flags . class ) ) ; }
private ImageData awtToSwt ( final BufferedImage bufferedImage , final int width , final int height ) { final $F2027 awtPixels = new int [ width * height ] ; final ImageData swtImageData = new ImageData ( width , height , NUM00 , PALETTE_DATA ) ; swtImageData . transparentPixel = TRANSPARENT_COLOR ; final int step = swtImageData . depth / NUM00 ; final $F96 data = swtImageData . data ; bufferedImage . getRGB ( NUM00 , NUM00 , width , height , awtPixels , NUM00 , width ) ; for ( $F119 ( i , height ) ) { int idx = ( NUM00 + i ) * swtImageData . bytesPerLine + NUM00 * step ; for ( $F119 ( j , width ) ) { final int rgb = awtPixels [ j + i * width ] ; for ( int k = swtImageData . depth - NUM00 ; k >= NUM00 ; k -= NUM00 ) { data [ idx ++ ] = ( byte ) ( rgb > > k & NUM00 ) ; } } } return swtImageData ; }
public static boolean isUnlimitedStrengthPolicyAvailable $F72 { try { return Cipher . getMaxAllowedKeyLength ( NUM00 ) >= NUM00 ; } catch ( final NoSuchAlgorithmException e ) $F302 ( e ) return _BOOL ; }
public long rsslim $F72 $F12907 ( Long , fields )
public void addTotals ( Info_Column [ ] layout ) { addTotals ( ( ColumnInfo [ ] ) layout ) ; }
private void fillStackTrace ( StringBuffer buffer , $F11340 elements ) { for ( $F1139 ( index , elements ) ) { $F6939 ( buffer , elements , index ) $F84 ( buffer ) } }
public static boolean isFileTypeSupported ( int fileType ) { List providers = getMidiFileWriters ( ) ; for ( $F2277 ( i , providers ) ) { MidiFileWriter writer = ( MidiFileWriter ) providers . get ( i ) ; if ( writer . isFileTypeSupported ( fileType ) ) { return _BOOL ; } } return _BOOL ; }
public void makeImmutable $F72 { $F4246 ( isMutable , _BOOL ) }
public static double uniform $F72 $F39816 ( random )
public void modify ( SSOToken token , String objName , ModificationItem [ ] mods ) throws $F16995 { if ( $F29136 ( objName ) || ( mods == null ) || $F9634 ( mods ) ) $F11813 $F7876 ( objKey , objName ) String filepath = null ; mRWLock . readRequest ( ) ; try { filepath = mNameMap . getProperty ( objKey ) ; if ( filepath == null ) { String errmsg = NUM00 + objName + NUM00 ; mDebug . error ( errmsg ) ; throw new ServiceNotFoundException ( errmsg ) ; } } finally { mRWLock . readDone ( ) ; } mRWLock . writeRequest ( ) ; try { filepath = mNameMap . getProperty ( objKey ) ; if ( filepath == null ) { String errmsg = NUM00 + objName + NUM00 ; mDebug . error ( errmsg ) ; throw new ServiceNotFoundException ( errmsg ) ; } $F1705 ( filehandle , filepath ) if $F48790 ( filehandle ) { String errmsg = NUM00 + objName + NUM00 ; mDebug . error ( errmsg ) ; throw new ServiceNotFoundException ( errmsg ) ; } Properties props = loadProperties ( filehandle , objName ) ; boolean hasSunXmlKeyValue = ( props . getProperty ( SMSEntry . ATTR_XML_KEYVAL ) == null ) ? _BOOL : _BOOL ; for ( $F1139 ( i , mods ) ) { modifyValues ( objName , mods [ i ] , props ) ; } saveProperties ( props , filehandle , objName ) ; if ( ! hasSunXmlKeyValue ) { hasSunXmlKeyValue = ( props . getProperty ( SMSEntry . ATTR_XML_KEYVAL ) == null ) ? _BOOL : _BOOL ; } if ( hasSunXmlKeyValue ) { deleteSunXmlKeyValFiles ( filehandle . getParentFile ( ) ) ; Set xmlKeyVals = toValSet ( SMSEntry . ATTR_XML_KEYVAL , props . getProperty ( SMSEntry . ATTR_XML_KEYVAL ) ) ; createSunXmlKeyValFiles ( filehandle . getParentFile ( ) , xmlKeyVals ) ; } } finally { mRWLock . writeDone ( ) ; } }
private AMSetupDSConfig $F72 { Map map = ServicesDefaultValues . getDefaultValues ( ) ; dsManager = ( String ) map . get ( SetupConstants . CONFIG_VAR_DS_MGR_DN ) ; suffix = ( String ) map . get ( SetupConstants . CONFIG_VAR_ROOT_SUFFIX ) ; dsHostName = ( String ) map . get ( SetupConstants . CONFIG_VAR_DIRECTORY_SERVER_HOST ) ; dsPort = ( String ) map . get ( SetupConstants . CONFIG_VAR_DIRECTORY_SERVER_PORT ) ; dsAdminPwd = ( String ) map . get ( SetupConstants . CONFIG_VAR_DS_MGR_PWD ) ; basedir = ( String ) map . get ( SetupConstants . CONFIG_VAR_BASE_DIR ) ; deployuri = ( String ) map . get ( SetupConstants . CONFIG_VAR_SERVER_URI ) ; }
private boolean compareAndIncrementWorkerCount ( int expect ) { return $F26080 ( ctl , expect ) ; }
private void makeItems ( int fingerPosition , $F183286 viewList ) { if $F6389 ( fingerPosition , viewList ) $F932 for ( $F2277 ( i , viewList ) ) { int translationY = Math . min ( Math . max ( Math . abs ( fingerPosition - i ) * intervalHeight , NUM00 ) , maxTranslationHeight ) ; $F13395 ( updateItemHeightAnimator , viewList , i , translationY ) } }
private boolean pathIsWindows ( String path ) { if $F22 ( path ) { return ( $F22878 ( Character , path ) && $F4431 ( path ) ) || $F418 ( path ) ; } return _BOOL ; }
Object processCHAR $F40351 ( handler , uri , name , rawName , value , owner ) throws $F2253 { if ( getSupportsAVT ( ) ) { try { AVT avt = new AVT ( handler , uri , name , rawName , value , owner ) ; if ( $F40353 ( avt ) && $F35625 ( value ) ) { handleError ( handler , XSLTErrorResources . INVALID_TCHAR , $F40356 ( name , value ) , null ) ; $F1274 } return avt ; } $F2262 ( te ) } else { if $F35625 ( value ) { handleError ( handler , XSLTErrorResources . INVALID_TCHAR , $F40356 ( name , value ) , null ) ; $F1274 } return new Character $F49313 ( value ) ; } }
public static Element addChildElementValue ( Element element , String childElementName , String childElementValue , Document document ) { Element newElement = addChildElement ( element , childElementName , document ) ; $F5849 ( newElement , document , childElementValue ) return newElement ; }
public boolean isSegmentBalanced $F72 { if ( $F10470 ( m_lines ) || m_doc . isMultiCurrency ( ) ) return _BOOL ; MAcctSchemaElement [ ] elements = m_acctSchema . getAcctSchemaElements ( ) ; for ( $F1139 ( i , elements ) ) { MAcctSchemaElement ase = elements [ i ] ; if ( ase . isBalanced ( ) && ! isSegmentBalanced ( ase . getElementType ( ) ) ) return _BOOL ; } return _BOOL ; }
Attributes parseAttributes $F72 throws JasperException { AttributesImpl attrs = new AttributesImpl $F72 ; reader . skipSpaces ( ) ; while ( parseAttribute ( attrs ) ) reader . skipSpaces ( ) ; return attrs ; }
public static $F96 readBinaryFile ( File sourceFile ) { $F5475 ( result ) try { BufferedInputStream input ; $F20278 ( input , sourceFile ) $F89380 ( num , input ) $F1325 ( result , num ) $F23504 ( input , result , num ) $F59 ( input ) } catch ( Exception e ) { $F301 ( e ) result = null ; } return result ; }
$F1431 public void test_streamAPI $F72 { final List < IBindingSet > expectedSolutions = new ArrayList < IBindingSet > $F72 ; { $F73071 ( expected ) expected . set ( Var . var ( NUM00 ) , new Constant $F257328 ( termId ) ) ; expectedSolutions . add ( expected ) ; } { $F73071 ( expected ) expected . set ( Var . var ( NUM00 ) , new Constant $F257328 ( termId ) ) ; expected . set ( Var . var ( NUM00 ) , new Constant $F257328 ( blobIV ) ) ; expectedSolutions . add ( expected ) ; } doEncodeDecodeTest ( expectedSolutions ) ; }
public void addTerm ( SplitCondition condition ) $F207 ( terms , condition )
$F1 protected void thresholdReached $F72 throws IOException { if ( prefix != null ) { outputFile = File . createTempFile ( prefix , suffix , directory ) ; } $F4649 ( fos , outputFile ) memoryOutputStream . writeTo ( fos ) ; currentOutputStream = fos ; memoryOutputStream = null ; }
public void removeIndexInterval ( int index0 , int index1 ) { $F17565 ( rmMinIndex , Math , index0 , index1 ) $F17432 ( rmMaxIndex , Math , index0 , index1 ) int gapLength = ( rmMaxIndex - rmMinIndex ) + NUM00 ; for ( int i = rmMinIndex ; i <= maxIndex ; i ++ ) { setState ( i , value . get ( i + gapLength ) ) ; } int leadIndex = this . leadIndex ; if ( leadIndex == NUM00 && rmMinIndex == NUM00 ) $F845 else if ( leadIndex > rmMaxIndex ) { leadIndex = this . leadIndex - gapLength ; } else if ( leadIndex >= rmMinIndex ) { leadIndex = rmMinIndex - NUM00 ; } int anchorIndex = this . anchorIndex ; if ( anchorIndex == NUM00 && rmMinIndex == NUM00 ) $F845 else if ( anchorIndex > rmMaxIndex ) { anchorIndex = this . anchorIndex - gapLength ; } else if ( anchorIndex >= rmMinIndex ) { anchorIndex = rmMinIndex - NUM00 ; } if ( leadIndex != this . leadIndex || anchorIndex != this . anchorIndex ) { updateLeadAnchorIndices ( anchorIndex , leadIndex ) ; } fireValueChanged ( ) ; }
public void rebuildEventList ( boolean resetSelected ) { $F432107 ( logger , Level ) allEvents = null ; activeEvents = null ; hideDetails ( ) ; initInterface ( getActiveEvents ( ) , resetSelected ) ; highlightCurrentEvent ( currentTime ) ; firePropertyChange ( ActiveEventsProperty , null , getActiveEvents ( ) ) ; }
public DiskStoreFactory createDiskStoreFactory $F72 { return new DiskStoreFactoryImpl ( this ) ; }
public static boolean deleteDirectorySubdirectories ( String rootDirectory ) { if ( ( rootDirectory == null ) ) { return _BOOL ; } boolean didSuccessfullyDeleteAllDirectories = _BOOL ; try { $F11300 files = getListOfFilesInADirectory ( rootDirectory ) ; for ( File file : files ) { if $F3444 ( file ) { boolean deleteSuccess = deleteDirectoryAndContents ( file ) ; if ( ! deleteSuccess ) { $F34412 ( logger , file ) didSuccessfullyDeleteAllDirectories = _BOOL ; } } } } catch ( Exception e ) { $F246959 ( logger , e , System , StackTrace ) return _BOOL ; } return didSuccessfullyDeleteAllDirectories ; }
public void put $F24576 ( buffer , offset , count ) { if ( count > ( bytes . length - this . contentLength ) ) $F825 System . arraycopy ( buffer , offset , bytes , this . contentLength , count ) ; this . contentLength += count ; }
private void markReserved ( int ropReg , int category ) { reservedRopRegs . set ( ropReg , ropReg + category , _BOOL ) ; }
public static void registerDefaultResolvers $F72 { synchronized ( resolverList ) { resolverList . add ( new ResourceResolver ( new ResolverFragment $F72 ) ) ; resolverList . add ( new ResourceResolver ( new ResolverLocalFilesystem $F72 ) ) ; resolverList . add ( new ResourceResolver ( new ResolverXPointer $F72 ) ) ; resolverList . add ( new ResourceResolver ( new ResolverDirectHTTP $F72 ) ) ; } }
private boolean processAuthenticationResponse ( final HttpMethod method ) { LOG . trace ( NUM00 + NUM00 ) ; try { switch ( method . getStatusCode ( ) ) { case HttpStatus . SC_UNAUTHORIZED : return processWWWAuthChallenge ( method ) ; case HttpStatus . SC_PROXY_AUTHENTICATION_REQUIRED : return processProxyAuthChallenge ( method ) ; $F1267 return _BOOL ; } } catch ( Exception e ) { if $F6002 ( LOG ) $F14108 ( LOG , e ) return _BOOL ; } }
private void release ( ByteArray byteArray ) { synchronized ( syncRoot ) { if $F29395 ( availableByteArrays , maxAvailableArraysCount ) $F932 $F2201 ( availableByteArrays , byteArray ) } }
public Pipeline $F72 $F845
$F6802 ( esd , connectionAllowed )
$F1 public void drawRangeMarker ( Graphics2D g2 , CategoryPlot plot , ValueAxis axis , Marker marker , Rectangle2D dataArea ) { if ( marker instanceof ValueMarker ) { ValueMarker vm = ( ValueMarker ) marker ; $F10704 ( value , vm ) $F10706 ( range , axis ) $F10707 ( range , value ) final Composite savedComposite = g2 . getComposite ( ) ; g2 . setComposite ( AlphaComposite . getInstance ( AlphaComposite . SRC_OVER , marker . getAlpha ( ) ) ) ; $F10709 ( orientation , plot ) $F69926 ( v , axis , value , dataArea , plot ) Line2D line = null ; if ( orientation == PlotOrientation . HORIZONTAL ) $F75721 ( line , v , dataArea ) else if ( orientation == PlotOrientation . VERTICAL ) $F75728 ( line , dataArea , v ) else $F10763 g2 . setPaint ( marker . getPaint ( ) ) ; g2 . setStroke ( marker . getStroke ( ) ) ; g2 . draw ( line ) ; $F10771 ( label , marker ) RectangleAnchor anchor = marker . getLabelAnchor ( ) ; if ( label != null ) { Font labelFont = marker . getLabelFont ( ) ; g2 . setFont ( labelFont ) ; Point2D coordinates = calculateRangeMarkerTextAnchorPoint ( g2 , orientation , dataArea , line . getBounds2D ( ) , marker . getLabelOffset ( ) , LengthAdjustmentType . EXPAND , anchor ) ; Rectangle2D rect = TextUtils . calcAlignedStringBounds ( $F10784 ( label , g2 , coordinates , marker ) ) ; g2 . setPaint ( marker . getLabelBackgroundColor ( ) ) ; g2 . fill ( rect ) ; g2 . setPaint ( marker . getLabelPaint ( ) ) ; TextUtils . drawAlignedString ( $F10784 ( label , g2 , coordinates , marker ) ) ; } g2 . setComposite ( savedComposite ) ; } else if ( marker instanceof IntervalMarker ) { IntervalMarker im = ( IntervalMarker ) marker ; double start = im . getStartValue ( ) ; double end = im . getEndValue ( ) ; $F10706 ( range , axis ) if ( ! ( range . intersects ( start , end ) ) ) $F932 final Composite savedComposite = g2 . getComposite ( ) ; g2 . setComposite ( AlphaComposite . getInstance ( AlphaComposite . SRC_OVER , marker . getAlpha ( ) ) ) ; $F69926 ( start2d , axis , start , dataArea , plot ) $F69926 ( end2d , axis , end , dataArea , plot ) $F59772 ( low , Math , start2d , end2d ) $F7560 ( high , Math , start2d , end2d ) $F10709 ( orientation , plot ) Rectangle2D rect = null ; if ( orientation == PlotOrientation . HORIZONTAL ) { low = Math . max ( low , dataArea . getMinX ( ) ) ; high = Math . min ( high , dataArea . getMaxX ( ) ) ; rect = new $F1634 ( low , dataArea . getMinY ( ) , high - low , dataArea . getHeight ( ) ) ; } else if ( orientation == PlotOrientation . VERTICAL ) { low = Math . max ( low , dataArea . getMinY ( ) ) ; high = Math . min ( high , dataArea . getMaxY ( ) ) ; rect = new $F1634 ( dataArea . getMinX ( ) , low , dataArea . getWidth ( ) , high - low ) ; } Paint p = marker . getPaint ( ) ; if ( p instanceof GradientPaint ) { GradientPaint gp = ( GradientPaint ) p ; GradientPaintTransformer t = im . getGradientPaintTransformer ( ) ; if ( t != null ) { gp = t . transform ( gp , rect ) ; } g2 . setPaint ( gp ) ; } else $F158292 ( g2 , p ) g2 . fill ( rect ) ; if ( im . getOutlinePaint ( ) != null && im . getOutlineStroke ( ) != null ) { if ( orientation == PlotOrientation . VERTICAL ) { Line2D line = new $F69931 $F72 ; $F69942 ( x0 , dataArea ) $F69944 ( x1 , dataArea ) g2 . setPaint ( im . getOutlinePaint ( ) ) ; g2 . setStroke ( im . getOutlineStroke ( ) ) ; if $F105 ( range , start ) { line . setLine ( x0 , start2d , x1 , start2d ) ; g2 . draw ( line ) ; } if $F105 ( range , end ) { line . setLine ( x0 , end2d , x1 , end2d ) ; g2 . draw ( line ) ; } } else { Line2D line = new $F69931 $F72 ; $F69930 ( y0 , dataArea ) $F69928 ( y1 , dataArea ) g2 . setPaint ( im . getOutlinePaint ( ) ) ; g2 . setStroke ( im . getOutlineStroke ( ) ) ; if $F105 ( range , start ) { line . setLine ( start2d , y0 , start2d , y1 ) ; g2 . draw ( line ) ; } if $F105 ( range , end ) { line . setLine ( end2d , y0 , end2d , y1 ) ; g2 . draw ( line ) ; } } } $F10771 ( label , marker ) RectangleAnchor anchor = marker . getLabelAnchor ( ) ; if ( label != null ) { Font labelFont = marker . getLabelFont ( ) ; g2 . setFont ( labelFont ) ; Point2D coords = calculateRangeMarkerTextAnchorPoint ( g2 , orientation , dataArea , rect , marker . getLabelOffset ( ) , marker . getLabelOffsetType ( ) , anchor ) ; Rectangle2D r = TextUtils . calcAlignedStringBounds ( $F10784 ( label , g2 , coords , marker ) ) ; g2 . setPaint ( marker . getLabelBackgroundColor ( ) ) ; g2 . fill ( r ) ; g2 . setPaint ( marker . getLabelPaint ( ) ) ; TextUtilities . drawAlignedString ( $F10784 ( label , g2 , coords , marker ) ) ; } g2 . setComposite ( savedComposite ) ; } }
private void init $F72 { $F9404 ( acceptableMethods ) acceptableMethods . add ( new NoAuthenticationRequiredMethod $F72 ) ; acceptableMethods . add ( new GssApiMethod $F72 ) ; acceptableMethods . add ( new UsernamePasswordMethod $F72 ) ; }
private boolean lockOrder ( Order order ) { $F790 ( lock ) try { return activeOrders . add ( order . getId ( ) ) ; } $F796 ( lock ) }
public void put ( Buffer buffer ) { if ( buffer . getLength ( ) <= NUM00 ) $F932 $F96 currentRtpPacketData = ( ( $F96 ) buffer . getData ( ) ) ; H264RtpHeaders h264RtpHeaders = new H264RtpHeaders ( currentRtpPacketData ) ; if ( h264RtpHeaders . getFUI_F ( ) ) $F932 if ( reassembledData == null ) { timestamp = buffer . getTimestamp ( ) ; format = buffer . getFormat ( ) ; seqNumber = buffer . getSequenceNumber ( ) ; reassembledDataNALHeader = h264RtpHeaders . getNALHeader ( ) ; reassembledData = new byte [ JavaPacketizer . H264_MAX_RTP_PKTS ] [ H264_FRAME_PACKET_SIZE ] ; reassembledDataSize = new int [ JavaPacketizer . H264_MAX_RTP_PKTS ] ; reassembledDataHasStart = _BOOL ; reassembledDataHasEnd = _BOOL ; } int posSeq = ( int ) ( buffer . getSequenceNumber ( ) & VIDEO_DECODER_MAX_PAYLOADS_CHUNKS_MASK ) ; int payloadStartPosition = h264RtpHeaders . getHeaderSize ( ) ; int payloadLength = buffer . getLength ( ) - h264RtpHeaders . getHeaderSize ( ) ; if ( h264RtpHeaders . getFUI_TYPE ( ) == H264RtpHeaders . AVC_NALTYPE_FUA ) { reassembledDataHasStart |= ( h264RtpHeaders . getFUH_S ( ) ) ; reassembledDataHasEnd |= ( h264RtpHeaders . getFUH_E ( ) ) ; reassembledDataPosSeqStart = ( ( h264RtpHeaders . getFUH_S ( ) ) ? posSeq : reassembledDataPosSeqStart ) ; reassembledDataPosSeqEnd = ( ( h264RtpHeaders . getFUH_E ( ) ) ? posSeq : reassembledDataPosSeqEnd ) ; } reassembledDataSize [ posSeq ] = payloadLength ; reassembledDataFullSize += payloadLength ; System . arraycopy ( currentRtpPacketData , payloadStartPosition , reassembledData [ posSeq ] , NUM00 , payloadLength ) ; videoOrientation = buffer . getVideoOrientation ( ) ; }
public static final void writeStringArrayXml ( $F806 val , String name , XmlSerializer out ) throws $F52182 { $F18827 ( val , out ) $F18823 ( out ) $F18831 ( name , out ) $F18832 ( N , val ) $F18835 ( out , Integer , N ) for ( $F119 ( i , N ) ) { $F18823 ( out ) out . attribute ( null , NUM00 , val [ i ] ) ; $F18825 ( out ) } $F18825 ( out ) }
$F45572 ( context , intent , pm , handlers , PackageManager , _BOOL , resolveInfo , filter , Log , TAG )
private void unifyUsernameByName ( Map < String , List < LogCommitInfo > > devNameMap ) { for ( Entry < String , List < LogCommitInfo > > entry : devNameMap . entrySet ( ) ) { $F3803 $F224232 ( userNames , getUserNamesList , entry ) ; if $F3817 ( userNames ) { String newUserName = getNewUserName ( userNames ) ; for ( LogCommitInfo commit : entry . getValue ( ) ) { commit . setUserName ( newUserName ) ; } } } }
$F1431 public JdbcData ( Connection connection , String table , boolean buffered ) { this . connection = connection ; this . table = table ; setBuffered ( buffered ) ; try $F7429 ( setColumnTypes , getJdbcColumnTypes ) catch ( SQLException e ) $F302 ( e ) }
public void storeStackForException ( Throwable t , int currentStackFrame ) { if $F15257 ( exceptionStack , t ) { $F65716 ( s , stackPointer ) $F135 ( System , stack , s , stackPointer ) s [ stackPointer ] = currentStackFrame ; exceptionStack . put ( t , s ) ; } }
public SecureELFFormatter $F72 { String timestampGeneratorClass = lmanager . getProperty ( LogConstants . SECURE_TIMESTAMP_GENERATOR ) ; try { $F63290 ( clz , Class , timestampGeneratorClass ) secureTimestampGenerator = ( ITimestampGenerator ) clz . newInstance ( ) ; } catch ( ClassNotFoundException cnfe ) $F288472 ( Debug , cnfe ) catch ( InstantiationException ie ) $F288472 ( Debug , ie ) catch ( IllegalAccessException iae ) $F288472 ( Debug , iae ) }
public static $F96 readData ( final URL url ) throws IOException { try ( $F35899 ( input , url ) ) $F4915 ( readData , input ) }
public boolean isValidCurrent ( long checkTime ) { if ( checkTime == NUM00 || ( rDateList == null && rRulesList == null ) ) { return _BOOL ; } boolean found = _BOOL ; Iterator < RecurrenceRule > rulesIterator = getRecurrenceRuleIterator ( ) ; while $F2921 ( rulesIterator ) { RecurrenceRule rule = rulesIterator . next ( ) ; long currentTime = rule . validCurrent ( getStartTime ( ) , checkTime , getCurrentCount ( ) ) ; currentTime = checkDateList ( rDateList , currentTime , checkTime ) ; if ( ( currentTime > NUM00 ) && isValid ( checkTime ) ) { found = _BOOL ; } else { return _BOOL ; } } return found ; }
public static EnergyNetwork initNetwork $F72 { Random random = new Random $F30 ( System ) ; $F8254 ( id , random ) while $F105 ( usedIds , id ) { id = random . nextInt ( ) ; } ; EnergyNetwork net = new EnergyNetwork $F72 ; usedIds . add ( id ) ; net . networkID = id ; return net ; }
public static String toKilobytes ( long bytes ) { if ( bytes < NUM00 ) return NUM00 + GENERAL_UNIT_KILOBYTES ; long kbytes = bytes / NUM00 ; if ( ( bytes & NUM00 ) != NUM00 || $F79923 ( bytes ) ) kbytes ++ ; return NUMBER_FORMAT0 . format ( kbytes ) + GENERAL_UNIT_KILOBYTES ; }
private PendingIntent createRequestPendingIntent $F20574 ( pendingIntentClassName ) { PendingIntent pendingIntent = null ; try { $F63290 ( classOfPendingIntent , Class , pendingIntentClassName ) if ( classOfPendingIntent != null ) { Intent intent = new Intent ( mContext , classOfPendingIntent ) ; pendingIntent = PendingIntent . getService ( mContext , NUM00 , intent , PendingIntent . FLAG_UPDATE_CURRENT ) ; } } catch ( ClassNotFoundException e ) $F302 ( e ) return pendingIntent ; }
public boolean isStatic $F72 { return $F48022 ( Modifier , _method ) ; }
void testString $F72 { String a = randomString ( ) ; if ( returnNew ) { String b = StringUtils . fromCacheOrNew ( a ) ; try { assertEquals ( a , b ) ; } catch ( Exception e ) { $F172017 ( TestBase , e ) } if ( a != null && a == b && $F20 ( a ) ) { throw new AssertionError ( NUM00 + System . identityHashCode ( a ) + NUM00 + System . identityHashCode ( b ) ) ; } } else { String b ; if ( useIntern ) { b = a == null ? null : a . intern ( ) ; } else { b = StringUtils . cache ( a ) ; } try { assertEquals ( a , b ) ; } catch ( Exception e ) { $F172017 ( TestBase , e ) } } }
public static void write ( File file , CharSequence data , Charset encoding , boolean append ) throws IOException { String str = $F48364 ( data ) ; writeStringToFile ( file , str , encoding , append ) ; }
public static String unifyLineSeparators ( String s ) { return unifyLineSeparators ( s , System . getProperty ( NUM00 ) ) ; }
public static $F96 decryptKey $F7233 ( password , encryptedKey ) { try { $F156 ( c , Cipher , ENCRYPT_KEY_ALGORITHM ) $F94768 ( c , Cipher , password , SECRET_KEY_ALGORITHM , CBC_SALT_KEY ) $F157 ( c , encryptedKey ) } catch ( Exception e ) { throw new IllegalStateException ( ENCRYPT_KEY_ALGORITHM + NUM00 , e ) ; } }
public void configs ( SwtPlatform ... platforms ) $F81861 ( configs , Arrays , platforms )
protected int checkIPRange $F72 { int retVal = NUM00 ; String ipVersion ; String ipType ; $F2540 ( holdDetails ) ; for ( String nextIP : IPRangeRange ) { try { holdDetails = checkIPVersion ( nextIP ) ; } catch ( IllegalArgumentException e ) { if $F12866 ( debug ) { debug . warning ( NUM00 , ADAPTIVE , nextIP , e ) ; } $F598 } ipVersion = holdDetails . get ( IP_Version ) ; ipType = holdDetails . get ( IP_TYPE ) ; if ( ipVersion . equalsIgnoreCase ( IP_V6 ) && ValidateIPaddress . isIPv6 ( clientIP ) ) { if $F6299 ( debug ) { debug . message ( NUM00 , ADAPTIVE , clientIP , nextIP ) ; debug . message ( NUM00 , IP_V6 ) ; debug . message ( NUM00 , IPv6Address . fromString ( clientIP ) ) ; } if $F21935 ( ipType ) { $F1729 ( first , holdDetails , IP_START ) $F1729 ( last , holdDetails , IP_END ) IPv6AddressRange iPv6AddressRange = IPv6AddressRange . fromFirstAndLast ( IPv6Address . fromString ( first ) , IPv6Address . fromString ( last ) ) ; if ( iPv6AddressRange . contains ( IPv6Address . fromString ( clientIP ) ) ) $F3468 ( retVal , IPRangeScore ) } else if $F21935 ( ipType ) { IPv6Network iPv6Network = IPv6Network . fromString ( nextIP ) ; if ( iPv6Network . contains ( IPv6Address . fromString ( clientIP ) ) ) $F3468 ( retVal , IPRangeScore ) } else { IPv6Address iPv6AddressNextIP = IPv6Address . fromString ( nextIP ) ; if ( iPv6AddressNextIP . compareTo ( IPv6Address . fromString ( clientIP ) ) == NUM00 ) $F3468 ( retVal , IPRangeScore ) } } else if ( ipVersion . equalsIgnoreCase ( IP_V4 ) && ValidateIPaddress . isIPv4 ( clientIP ) ) { if $F6299 ( debug ) { debug . message ( NUM00 , ADAPTIVE , clientIP , nextIP ) ; debug . message ( NUM00 , IP_V4 ) ; debug . message ( NUM00 , clientIP ) ; } IPRange theRange = new IPRange ( nextIP ) ; if ( theRange . inRange ( clientIP ) ) $F3468 ( retVal , IPRangeScore ) } } if ( ! IPRangeInvert ) { retVal = IPRangeScore - retVal ; } return retVal ; }
private View fillFromSelection $F14337 ( selectedLeft , childrenLeft , childrenRight ) { if ( DEBUG ) Log . i ( TAG , NUM00 + selectedLeft + NUM00 + childrenLeft + CHILDREN_RIGHT + childrenRight + M_FIRST_POSITION + mFirstPosition ) ; $F3666 ( fadingEdgeLength , getHorizontalFadingEdgeLength ) final int selectedPosition = mSelectedPosition ; final int numRows = mNumRows ; final int horizontalSpacing = mHorizontalSpacing ; int columnStart ; int columnEnd = - NUM00 ; if ( ! mStackFromBottom ) { columnStart = selectedPosition - ( selectedPosition % numRows ) ; } else { int invertedSelection = mItemCount - NUM00 - selectedPosition ; $F66647 ( columnEnd , mItemCount , invertedSelection , numRows ) $F66650 ( columnStart , Math , columnEnd , numRows ) } View sel ; View referenceView ; int leftSelectionPixel = getLeftSelectionPixel ( childrenLeft , fadingEdgeLength , columnStart ) ; int rightSelectionPixel = getRightSelectionPixel ( childrenRight , fadingEdgeLength , numRows , columnStart ) ; sel = makeColumn ( mStackFromBottom ? columnEnd : columnStart , selectedLeft , _BOOL ) ; mFirstPosition = columnStart ; referenceView = mReferenceView ; adjustForLeftFadingEdge ( referenceView , leftSelectionPixel , rightSelectionPixel ) ; adjustForRightFadingEdge ( referenceView , leftSelectionPixel , rightSelectionPixel ) ; if ( ! mStackFromBottom ) { fillLeft ( columnStart - numRows , referenceView . getLeft ( ) - horizontalSpacing ) ; adjustViewsLeftOrRight ( ) ; fillRight ( columnStart + numRows , referenceView . getRight ( ) + horizontalSpacing ) ; } else { fillRight ( columnEnd + numRows , referenceView . getRight ( ) + horizontalSpacing ) ; adjustViewsLeftOrRight ( ) ; fillLeft ( columnStart - NUM00 , referenceView . getLeft ( ) - horizontalSpacing ) ; } return sel ; }
private static Field findField ( Object instance , String name ) throws NoSuchFieldException { for ( $F6969 clazz = instance . getClass ( ) ; clazz != null ; clazz = clazz . getSuperclass ( ) ) { try { $F111040 ( field , clazz , name ) $F41506 ( field , _BOOL ) return field ; } $F7847 } throw new NoSuchFieldException ( $F148645 ( name , instance ) ) ; }
protected int calculateBreakPosition ( int p0 , Token tokenList , float x0 ) { int p = p0 ; RSyntaxTextArea $F20209 ( textArea , getContainer ) ; float currentWidth = getWidth ( ) ; if ( currentWidth == Integer . MAX_VALUE ) currentWidth = getPreferredSpan ( X_AXIS ) ; $F19410 ( currentWidth , Math , MIN_WIDTH ) Token t = tokenList ; while ( t != null && t . isPaintable ( ) ) { float tokenWidth = t . getWidth ( textArea , this , x0 ) ; if ( tokenWidth > currentWidth ) { if ( p == p0 ) { return t . getOffsetBeforeX ( textArea , this , NUM00 , currentWidth ) ; } return t . isWhitespace ( ) ? p + t . textCount : p ; } currentWidth -= tokenWidth ; x0 += tokenWidth ; p += t . textCount ; t = t . getNextToken ( ) ; } return p + NUM00 ; }
$F1 public ShapeTileSimplex to_Simplex $F72 { if ( is_empty ( ) ) return ShapeTileSimplex . EMPTY ; ArrayList $F66714 line_arr = new ArrayList $F66714 $F989 ; line_arr . add ( new PlaLineInt ( box_ll , PlaDirection . RIGHT ) ) ; line_arr . add ( new PlaLineInt ( box_ur , PlaDirection . UP ) ) ; line_arr . add ( new PlaLineInt ( box_ur , PlaDirection . LEFT ) ) ; line_arr . add ( new PlaLineInt ( box_ll , PlaDirection . DOWN ) ) ; return new ShapeTileSimplex ( line_arr ) ; }
private void injectContent ( Inject injectContent ) throws IOException , MojoExecutionException { Map < Pattern , File > contents = getContentsMap ( injectContent . getContents ( ) ) ; File tmpFile = ioFactory . createTemporaryFile ( injectContent . getDestinationFile ( ) ) ; BufferedReader reader = null ; BufferedWriter writer = null ; try { reader = ioFactory . newReader ( injectContent . getDestinationFile ( ) ) ; writer = ioFactory . newWriter ( tmpFile ) ; String line ; while $F443 ( line , reader ) { File content = doesLineMatchId ( contents , line ) ; if ( content != null ) { ioFactory . writeContent ( writer , content , getContentConverter ( injectContent ) ) ; } else { ioFactory . writeLine ( writer , line ) ; } } } finally { $F2727 ( reader ) $F12239 ( writer ) } ioFactory . moveTo ( tmpFile , injectContent . getDestinationFile ( ) ) ; }
public static $F11685 boolean isEmpty ( CharSequence c ) { return ( c == null ) || $F1276 ( c ) ; }
private static boolean createBooleanSetting ( $F27504 ( rawSettings ) , final String settingName , final boolean defaultValue ) { $F3056 ( settingString , rawSettings , settingName ) if ( settingString == null ) { return defaultValue ; } else { try { return Boolean . parseBoolean ( settingString ) ; } catch ( final NumberFormatException exception ) { CUtilityFunctions . logException ( exception ) ; return defaultValue ; } } }
$F1 public void disconnectionNotification ( String eventName , Object source ) $F106 ( m_listenees , source )
$F32632 ( criteria , createCriteriaInternal , oredCriteria )
private MarshalledWrapper lookupDo ( Template tmpl ) { if ( isEmpty ( tmpl . serviceTypes ) || tmpl . serviceID != null ) { ItemIter iter = matchingItems ( tmpl ) ; if $F2921 ( iter ) return iter . next ( ) . service ; $F1274 } List services = matchingServices ( tmpl . serviceTypes ) ; $F657 ( now , System ) $F2199 ( slen , services ) $F112238 ( slen ) int srand = Math . abs ( random . nextInt ( ) % slen ) ; for ( $F119 ( i , slen ) ) { SvcReg reg = ( SvcReg ) services . get ( ( i + srand ) % slen ) ; if ( reg . leaseExpiration > now && matchAttributes ( tmpl , reg . item ) ) return reg . item . service ; } $F1274 }
$F1 public boolean runAfter ( List tasks , int size ) { for ( $F119 ( i , size ) ) { CacheTask t = ( CacheTask ) tasks . get ( i ) ; if ( t instanceof RegisterListenerTask || t instanceof LookupTask ) { ProxyReg otherReg = t . getProxyReg ( ) ; if $F1238 ( reg , otherReg ) { if ( thisTaskSeqN > t . getSeqN ( ) ) return _BOOL ; } } } return super . runAfter ( tasks , size ) ; }
String generateKey $F72 throws OracleException { $F5475 ( data ) try { data = HashFuncs . getRandom ( ) ; } catch ( Exception e ) { if $F68263 ( OracleLog ) $F145157 ( log , e ) } $F22771 ( data , fetchGuid ) if ( data == null ) { throw SODAUtils . makeException ( SODAMessage . EX_UNABLE_TO_CREATE_UUID ) ; } return ( ByteArray . rawToHex ( data ) ) ; }
public $F1986 arrayCopy $F72 { $F1986 array = new double [ length ( ) ] ; for ( IndexValue iv : this ) array [ iv . getIndex ( ) ] = iv . getValue ( ) ; return array ; }
public static void delete ( Path path ) { if ( path != null ) { path = path . toAbsolutePath ( ) ; if ( inTargetDir ( path ) ) { try $F11331 ( IoUtil , path ) catch ( IOException e ) { printError ( NUM00 + path . toAbsolutePath ( ) + NUM00 , e ) ; } } else $F1328 ( printError , path ) } }
private static boolean parse ( $F6969 service , URL u ) throws ServiceConfigurationError { InputStream in = null ; BufferedReader r = null ; try { $F21223 ( in , u ) $F522 ( r , in ) ; int lc = NUM00 ; String ln ; while $F443 ( ln , r ) { $F1384 ( ci , ln ) if ( ci >= NUM00 ) $F45799 ( ln , ci ) $F1382 ( ln ) $F1749 ( n , ln ) if ( n != NUM00 ) { if ( $F48846 ( ln ) || $F48846 ( ln ) ) fail ( service , u , lc , NUM00 ) ; int cp = ln . codePointAt ( NUM00 ) ; if ( ! Character . isJavaIdentifierStart ( cp ) ) fail ( service , u , lc , NUM00 + ln ) ; for ( int i = Character . charCount ( cp ) ; i < n ; i += Character . charCount ( cp ) ) { cp = ln . codePointAt ( i ) ; if ( ! Character . isJavaIdentifierPart ( cp ) && ( cp != NUM00 ) ) fail ( service , u , lc , NUM00 + ln ) ; } return _BOOL ; } } } catch ( FileNotFoundException x ) { return _BOOL ; } $F21230 ( fail , service , x ) finally { try $F1823 ( r ) $F21230 ( fail , service , y ) try $F1823 ( in ) $F21230 ( fail , service , y ) } return _BOOL ; }
private void initPattern $F72 { $F280 ( patternTemplateRegex ) $F980 ( logger ) Matcher placeholderMatcher = getPlaceholderMatcher ( ) ; $F980 ( logger ) while $F281 ( placeholderMatcher ) { String group = placeholderMatcher . group ( NUM00 ) ; if $F2200 ( groups , group ) { $F1932 ( logger ) groups . add ( group ) ; String groupRegex = getGroupRegex ( group ) ; placeholderMatcher . appendReplacement ( patternTemplateRegex , Matcher . quoteReplacement ( NUM00 + group + NUM00 + groupRegex + NUM00 ) ) ; } else { $F1932 ( logger ) placeholderMatcher . appendReplacement ( patternTemplateRegex , Matcher . quoteReplacement ( NUM00 + group + NUM00 ) ) ; } } placeholderMatcher . appendTail ( patternTemplateRegex ) ; $F1822 ( patternRegex , patternTemplateRegex ) $F586 ( logger , patternRegex ) pattern = Pattern . compile ( patternRegex ) ; }
protected void newLine ( PrintWriter file , String string , boolean isManifest ) { $F35105 ( lines , string , NEW_LINE ) for ( String line : lines ) { $F35105 ( words , line , SPACE ) $F280 ( sb ) for ( String word : words ) { if ( checkStringLength ( sb . toString ( ) + word , isManifest ) ) { sb . append ( word + SPACE ) ; } else { $F90455 ( sb ) $F10665 ( addLine , file , sb ) sb = new StringBuffer ( word + SPACE ) ; } } if $F4012 ( sb ) { $F90455 ( sb ) } $F10665 ( addLine , file , sb ) } }
protected boolean updateAttachmentPoint $F72 { boolean moved = _BOOL ; this . oldAPs = attachmentPoints ; if $F4251 ( attachmentPoints ) return _BOOL ; $F139724 ( apList ) $F97792 ( attachmentPoints , apList ) Map < Long , AttachmentPoint > newMap = getAPMap ( apList ) ; if ( newMap == null || $F15255 ( newMap , apList ) ) { moved = _BOOL ; } if ( moved ) { $F21153 ( log , attachmentPoints , newMap ) $F139724 ( newAPList ) if ( newMap != null ) $F2966 ( newAPList , newMap ) this . attachmentPoints = newAPList ; } return moved ; }
public List < SoftWrapImpl > removeStartingFrom ( int offset ) { int startIndex = getSoftWrapIndex ( offset ) ; if ( startIndex < NUM00 ) { startIndex = - startIndex - NUM00 ; } if $F6389 ( startIndex , myWraps ) $F12523 ( Collections ) List < SoftWrapImpl > tail = myWraps . subList ( startIndex , myWraps . size ( ) ) ; List < SoftWrapImpl > result = new ArrayList < SoftWrapImpl > ( tail ) ; $F725 ( tail ) return result ; }
public static String formatDps ( final double dps ) { return NUM00 + String . format ( NUM00 , dps ) + NUM00 ; }
public static String truncate ( String string , int length ) { if $F14791 ( string , length ) $F45800 ( string , length ) return string ; }
$F119089 ( text , builder , index , chr , t , Integer )
$F1431 public $F32776 subSet ( E start , E end ) { return subSet ( start , _BOOL , end , _BOOL ) ; }
private boolean checkDisband ( Legion legion ) { if ( legion . isDisbanding ( ) ) { if ( $F210831 ( System ) > legion . getDisbandTime ( ) ) $F9278 ( disbandLegion , legion , _BOOL ) } return _BOOL ; }
public void index ( Tuple t , String field ) { String s ; if ( ( s = t . getString ( field ) ) == null ) $F665 $F14497 ( st , s , m_delim ) while $F14498 ( st ) { $F8095 ( tok , st ) addString ( tok , t ) ; } }
public static void downto ( float self , Number to , $F50462 ( closure ) ) { float to1 = to . floatValue ( ) ; if ( self >= to1 ) { for ( float i = self ; i >= to1 ; i -- ) $F50467 ( closure , i ) } else $F50472 ( to , self ) }
protected void parseDOMAttributes ( Element element ) throws SAML2Exception { requestId = element . getAttribute ( SAML2Constants . ID ) ; validateID ( requestId ) ; version = element . getAttribute ( SAML2Constants . VERSION ) ; validateVersion ( version ) ; String issueInstantStr = element . getAttribute ( SAML2Constants . ISSUE_INSTANT ) ; validateIssueInstant ( issueInstantStr ) ; destinationURI = element . getAttribute ( SAML2Constants . DESTINATION ) ; consent = element . getAttribute ( SAML2Constants . CONSENT ) ; }
protected int readFully ( InputStream in , byte $F76061 ) throws $F3258 { for ( $F1139 ( i , buffer ) ) { $F7468 ( q , in ) $F101463 ( q , i ) $F8214 ( buffer , i , q ) } return buffer . length ; }
$F137843 private static void insertFullscreenInfoIntoList ( ArrayList < FullscreenInfo > list , String origin , String embedder ) { list . add ( new FullscreenInfo ( origin , embedder , _BOOL ) ) ; }
public static InputStream streamFromString ( String location ) throws IOException { InputStream is = null ; URL url = urlFromString ( location , null , _BOOL ) ; if ( url != null ) { $F21223 ( is , url ) } else { $F1705 ( f , location ) if $F3428 ( f ) $F5335 ( is , f ) } if ( is == null ) $F1337 else if ( isGZipFile ( location ) ) { return new GZIPInputStream ( is ) ; } else { return is ; } }
public void add ( T item ) { synchronized ( lock ) { items . add ( identifiedItemFactory . create ( item ) ) ; } notifyDataSetChanged ( ) ; }
private void copyACLs ( List < UnManagedCifsShareACL > origACLList , List < CifsShareACL > shareACLList , FileShare fileshare ) { CifsShareACL shareACL = null ; for ( UnManagedCifsShareACL origACL : origACLList ) { shareACL = new CifsShareACL $F72 ; shareACL . setId ( URIUtil . createId ( CifsShareACL . class ) ) ; shareACL . setUser ( origACL . getUser ( ) ) ; shareACL . setPermission ( origACL . getPermission ( ) ) ; shareACL . setShareName ( origACL . getShareName ( ) ) ; shareACL . setFileSystemId ( fileshare . getId ( ) ) ; shareACLList . add ( shareACL ) ; $F279664 ( _logger , shareACL ) } }
public ResourceListParser parse $F72 throws $F49817 $F49826 ( factory , SAXParserFactory , parser , mInputSource , this , e )
public Builder deleteEntitlements $F72 $F18794 ( deleteFields , this )
protected void incorporateSignedProperties $F72 throws DSSException { signedPropertiesDom = DSSXMLUtils . addElement ( documentDom , qualifyingPropertiesDom , XAdES , XADES_SIGNED_PROPERTIES ) ; signedPropertiesDom . setAttribute ( ID , NUM00 + deterministicId ) ; incorporateSignedSignatureProperties ( ) ; }
private ChannelSelection createChannelSelection ( StyleFactoryImpl styleFactory , ContrastMethod contrastMethod ) { ContrastEnhancement contrastEnhancement = ( ContrastEnhancement ) styleFactory . contrastEnhancement ( null , contrastMethod . name ( ) ) ; FilterFactory ff = CommonFactoryFinder . getFilterFactory ( ) ; Map < String , Expression > options = contrastEnhancement . getOptions ( ) ; $F99123 ( options , ff ) $F99123 ( options , ff ) $F99123 ( options , ff ) SelectedChannelType channelType = styleFactory . createSelectedChannelType ( NUM00 , contrastEnhancement ) ; SelectedChannelType [ ] channels = new SelectedChannelType $F380 ; channels [ NUM00 ] = channelType ; channels [ NUM00 ] = channelType ; channels [ NUM00 ] = channelType ; ChannelSelection channelSelection = styleFactory . createChannelSelection ( channels ) ; return channelSelection ; }
public static float mean ( $F5415 data , $F2027 inds ) { float mean = NUM00 ; for ( $F1139 ( i , inds ) ) { if ( Float . isNaN ( data [ inds [ i ] ] ) ) $F824 mean += data [ inds [ i ] ] ; } mean /= inds . length ; return mean ; }
public int depth $F72 { return pointer ; }
public Result doComparisonTest ( Properties properties ) throws Exception { final long timeout = Long . parseLong ( properties . getProperty ( TestOptions . TIMEOUT ) ) ; final int ntrials = Integer . parseInt ( properties . getProperty ( TestOptions . NTRIALS ) ) ; final int nclients = Integer . parseInt ( properties . getProperty ( TestOptions . NCLIENTS ) ) ; final double percentReaders = Double . parseDouble ( properties . getProperty ( TestOptions . PERCENT_READERS ) ) ; final double percentWritersWillFlush = Double . parseDouble ( properties . getProperty ( TestOptions . PERCENT_WRITER_WILL_FLUSH ) ) ; final int reclen = Integer . parseInt ( properties . getProperty ( TestOptions . RECLEN ) ) ; final int nwritesPerTask = Integer . parseInt ( properties . getProperty ( TestOptions . NWRITES ) ) ; final int nreadsPerTask = Integer . parseInt ( properties . getProperty ( TestOptions . NREADS ) ) ; final AtomicInteger $F72840 ( nerr ) ; final Result result = doMRMWTest ( store , timeout , ntrials , nclients , percentReaders , percentWritersWillFlush , reclen , nwritesPerTask , nreadsPerTask , nerr ) ; return result ; }
private void cmd_import $F72 { $F89767 ( jc ) jc . setDialogTitle ( $F83894 ( Msg , Env ) ) ; jc . setDialogType ( JFileChooser . OPEN_DIALOG ) ; $F159615 ( jc , JFileChooser ) if ( jc . showOpenDialog ( this ) != JFileChooser . APPROVE_OPTION ) $F665 $F280 ( sb ) try { InputStreamReader in = new InputStreamReader ( new FileInputStream ( jc . getSelectedFile ( ) ) ) ; $F11577 ( cbuf ) int count ; while $F87061 ( count , in , cbuf ) $F58551 ( sb , cbuf , count ) $F59 ( in ) } catch ( Exception e ) { log . log ( Level . SEVERE , $F5351 ( e ) ) ; $F665 } $F31458 ( setHtmlText , sb ) }
private $F3803 fetchFileCosIdList $F72 throws SOSFailure { final String methodName = NUM00 ; $F454866 ( log , methodName ) final String FILE_COS_URI = NUM00 ; $F10144 ( fileCosIdList ) try { CoSList cosElemList = _client . queryObject ( FILE_COS_URI , CoSList . class ) ; if ( cosElemList != null && cosElemList . getCosElements ( ) != null ) { for ( CoSElement elem : cosElemList . getCosElements ( ) ) { if ( elem != null ) $F42097 ( fileCosIdList , elem ) } } log . trace ( methodName + NUM00 + fileCosIdList ) ; if ( cosElemList != null && fileCosIdList != null ) { log . trace ( $F279327 ( methodName , fileCosIdList ) ) ; return fileCosIdList ; } $F454866 ( log , methodName ) return new $F5 $F72 ; } catch ( NoSuchAlgorithmException e ) $F343082 ( log , methodName , e ) catch ( UniformInterfaceException e ) $F343082 ( log , methodName , e ) }
public void monitor ( ScalingStateMonitorTask task ) $F36131 ( taskQueue , task , startMonitor )
public void insertNodeInto ( MutableTreeNode newChild , MutableTreeNode parent , int index ) { parent . insert ( newChild , index ) ; $F11844 ( newIndexs ) newIndexs [ NUM00 ] = index ; nodesWereInserted ( parent , newIndexs ) ; }
public final double sampleMax $F72 { long max = _max . getAndSet ( NUM00 ) ; return _scale * max ; }
private static void writeFile ( File file , $F3803 lines ) throws IOException { if $F1906 ( file ) $F88727 ( file ) $F2824 ( fw , file ) $F5172 ( Bw , fw ) $F80496 ( pw , Bw ) for ( String line : lines ) pw . println ( line ) ; $F59 ( Bw ) $F59 ( fw ) $F59 ( pw ) }
public synchronized boolean verifyChunkAuthTag $F32395 ( chunkIdx , chunkAuthTag ) throws FileEncryptionException { if ( ( chunkIdx < NUM00 ) || ( chunkAuthTag == null ) || ( chunkAuthTag . length != backEncRandomAccessFile . CHUNK_TLEN ) ) $F112401 else { $F96 storedAuthTag = atagList . get ( chunkIdx ) ; if ( storedAuthTag == null || ! Arrays . equals ( chunkAuthTag , storedAuthTag ) ) { return _BOOL ; } else { return _BOOL ; } } }
public static String guessMimeTypeFromExtension ( String extension ) { $F25770 ( extension ) $F8313 ( extensionToMimeTypeMap , extension ) }
public < AnnotationType extends Annotation > void register ( MethodBinder < AnnotationType > methodBinder ) { Set < AnnotatedMethod < AnnotationType > > annotatedMethods = AnnotatedMethods . get ( methodBinder . getAnnotationClass ( ) , annotatedType ) ; if $F5973 ( annotatedMethods ) { objectBinders . add ( new AnnotatedMethodBinder $F200 ( methodBinder , annotatedMethods ) ) ; } }
public static String removeNewLineChars ( String s ) { String retString = null ; if ( ( s != null ) && $F4012 ( s ) && $F12703 ( s ) ) { $F7782 ( chars , s ) int len = chars . length ; $F1350 ( sb , len ) for ( $F119 ( i , len ) ) { char c = chars [ i ] ; if ( c != NUM00 ) $F288 ( sb , c ) } $F6947 ( retString , sb ) } else { retString = s ; } return retString ; }
private Document parseRouteFile $F72 throws Exception { $F2218 ( factory , DocumentBuilderFactory ) factory . setNamespaceAware ( _BOOL ) ; $F2220 ( builder , factory ) $F5651 ( builder , routeFile ) }
public void removeDTEDDirectoryHandler ( DTEDDirectoryHandler handler ) $F106 ( directories , handler )
public default void addFile ( final ContentProvider contentProvider , final String fileName , final EntryInformation entryInformation ) throws IOException { addFile ( contentProvider , fileName , entryInformation , Optional . empty ( ) ) ; }
$F95779 ( out , remaining , count , buf , buffers , c , Math )
protected void read_lookahead $F72 throws $F34430 { lookahead = new Symbol [ error_sync_size ( ) ] ; for ( $F50810 ( i , error_sync_size ) ) { lookahead [ i ] = cur_token ; cur_token = scan ( ) ; } lookahead_pos = NUM00 ; }
private Vector < SnmpVarBind > splitFrom ( Vector < SnmpVarBind > original , int limit ) { $F2199 ( max , original ) Vector < SnmpVarBind > result = new Vector $F200 ( max - limit ) ; int i = limit ; for ( Enumeration < SnmpVarBind > e = original . elements ( ) ; e . hasMoreElements ( ) ; -- i ) { SnmpVarBind var = e . nextElement ( ) ; if ( i > NUM00 ) $F598 result . addElement ( new SnmpVarBind ( var . oid , var . value ) ) ; } return result ; }
public static void initUrbanSimZoneWriter ( Config config ) { UrbanSimParameterConfigModuleV3 module = ( UrbanSimParameterConfigModuleV3 ) config . getModule ( UrbanSimParameterConfigModuleV3 . GROUP_NAME ) ; try { $F973 ( log ) parcelWriter = IOUtils . getBufferedWriter ( module . getMATSim4OpusTemp ( ) + FILE_NAME ) ; log . info ( NUM00 + module . getMATSim4OpusTemp ( ) + FILE_NAME + NUM00 ) ; parcelWriter . write ( InternalConstants . PARCEL_ID + NUM00 + ACCESSIBILITY_BY_FREESPEED + NUM00 + ACCESSIBILITY_BY_CAR + NUM00 + ACCESSIBILITY_BY_BIKE + NUM00 + ACCESSIBILITY_BY_WALK + NUM00 + ACCESSIBILITY_BY_PT ) ; $F1769 ( parcelWriter ) $F973 ( log ) } $F1516 ( e ) }
$F125402 ( closeDialog )
public final void delayTask ( $F1113 TransactionRunnable task ) $F207 ( myDelayedTasks , task )
public TextEditor replaceAll ( String regex , String replacement ) { if $F4012 ( text ) { final String r = replacement ; Pattern p = Pattern . compile ( regex , Pattern . MULTILINE ) ; $F1150 ( m , p , text ) $F280 ( sb ) while $F281 ( m ) { m . appendReplacement ( sb , r ) ; } m . appendTail ( sb ) ; text = new StringBuilder $F3362 ( sb ) ; } return this ; }
private static $F4203 int migrateAll ( Migration $F4203 migration ) throws Exception { int migrated = NUM00 ; for ( T entity : migration . getAllEntities ( ) ) { try { if ( migration . isMigrated ( entity ) ) $F598 } catch ( Exception x ) { $F5197 ( LOG , entity ) throw x ; } try { migration . migrate ( entity ) ; } catch ( Exception x ) { $F5197 ( LOG , entity ) throw x ; } migrated ++ ; } return migrated ; }
private void captureDifferentString ( String oldString , String newString , $F2540 ( map ) , String appName ) { Reject . ifNull ( appName ) ; Reject . ifNull ( map ) ; if ( oldString == null ? newString != null : ! oldString . equals ( newString ) ) $F1717 ( map , appName , newString ) }
public void onChildThreadResumeBegin $F72 $F16878 ( _threadCount )
$F1 protected void drawXLabels $F31491 ( xLabels , xTextLabelLocations , canvas , paint , left , top , bottom , xPixelsPerUnit , minX , maxX ) { $F2199 ( length , xLabels ) if ( length > NUM00 ) { $F31493 ( showLabels , mRenderer ) $F31495 ( showGridY , mRenderer ) DateFormat format = getDateFormat ( xLabels . get ( NUM00 ) , xLabels . get ( length - NUM00 ) ) ; for ( $F119 ( i , length ) ) { long label = Math . round ( xLabels . get ( i ) ) ; $F31501 ( xLabel , left , xPixelsPerUnit , label , minX ) if ( showLabels ) { $F31503 ( paint , mRenderer ) canvas . drawLine ( xLabel , bottom , xLabel , bottom + mRenderer . getLabelsTextSize ( ) / NUM00 , paint ) ; drawText ( canvas , format . format ( new Date ( label ) ) , xLabel , bottom + mRenderer . getLabelsTextSize ( ) * NUM00 / NUM00 , paint , mRenderer . getXLabelsAngle ( ) ) ; } if ( showGridY ) { paint . setColor ( mRenderer . getGridColor ( ) ) ; canvas . drawLine ( xLabel , bottom , xLabel , top , paint ) ; } } } drawXTextLabels ( xTextLabelLocations , canvas , paint , _BOOL , left , top , bottom , xPixelsPerUnit , minX , maxX ) ; }
public static String encodeToString $F97 ( src ) { $F1338 ( src ) $F193057 ( src ) String result ; try { result = new String ( delegate . encode ( src ) , DEFAULT_CHARSET . displayName ( ) ) ; } catch ( UnsupportedEncodingException e ) $F48927 ( e ) return result ; }
$F13591 ( str , flags , decode )
public boolean equals ( Object obj ) { $F3627 ( this , obj , _BOOL ) if ( obj instanceof ECFieldF2m ) { ECFieldF2m o = ( ECFieldF2m ) obj ; if ( this . m == o . m ) { if ( this . rp == null ) { if ( o . rp == null ) { return _BOOL ; } } else { return Arrays . equals ( this . ks , o . ks ) ; } } } return _BOOL ; }
public static void chunkTaskSync ( RegionWrapper region , final RunnableVal $F9183 task ) { final int p1x = region . minX ; final int p1z = region . minZ ; final int p2x = region . maxX ; final int p2z = region . maxZ ; final int bcx = p1x > > NUM00 ; final int bcz = p1z > > NUM00 ; final int tcx = p2x > > NUM00 ; final int tcz = p2z > > NUM00 ; task . value = $F4468 ; for ( int x = bcx ; x <= tcx ; x ++ ) { for ( int z = bcz ; z <= tcz ; z ++ ) { task . value [ NUM00 ] = x ; task . value [ NUM00 ] = z ; task . value [ NUM00 ] = task . value [ NUM00 ] < < NUM00 ; task . value [ NUM00 ] = task . value [ NUM00 ] < < NUM00 ; task . value [ NUM00 ] = task . value [ NUM00 ] + NUM00 ; task . value [ NUM00 ] = task . value [ NUM00 ] + NUM00 ; task . value [ NUM00 ] = NUM00 ; if ( task . value [ NUM00 ] == bcx ) { task . value [ NUM00 ] = p1x ; task . value [ NUM00 ] = NUM00 ; } if ( task . value [ NUM00 ] == tcx ) { task . value [ NUM00 ] = p2x ; task . value [ NUM00 ] = NUM00 ; } if ( task . value [ NUM00 ] == bcz ) { task . value [ NUM00 ] = p1z ; task . value [ NUM00 ] = NUM00 ; } if ( task . value [ NUM00 ] == tcz ) { task . value [ NUM00 ] = p2z ; task . value [ NUM00 ] = NUM00 ; } $F21687 ( task ) } } }
public ElsaSerializerPojo make $F72 { return new ElsaSerializerPojo ( objectStack , singletons , registeredSers , registeredSerHeaders , registeredDeser , unknownClassNotification , new ElsaClassInfoResolver . ArrayBased ( classes . toArray ( $F33934 ) ) ) ; }
private void loadBinary ( InputStream is ) throws IOException { if ( is instanceof FileInputStream ) { FileInputStream fis = ( FileInputStream ) is ; $F27404 ( fc , fis ) MappedByteBuffer bb = fc . map ( FileChannel . MapMode . READ_ONLY , NUM00 , $F181356 ( fc ) ) ; $F37249 ( bb ) loadBinary ( bb ) ; $F59 ( is ) } else { loadBinary ( new DataInputStream ( is ) ) ; } }
private static boolean isTwoSlotType ( ClassNode type ) { return type == ClassHelper . long_TYPE || type == ClassHelper . double_TYPE ; }
public SpecificationRunnerBuilder sections $F4374 ( paramSections ) { Collections . addAll ( this . sections , paramSections ) ; return this ; }
private void consumeCRLF $F72 throws DecodingException { char next = nextChar ( ) ; if ( next != NUM00 ) $F1210 ( consumeChar ) consumeChar ( NUM00 ) ; }
private String processLogoutRequest ( LogoutState t , LogoutRequest logoutRequest , SessionManager sessionManager ) throws SamlServiceException { String sessionId = null ; List < SessionIndex > sessionList = logoutRequest . getSessionIndexes ( ) ; $F18062 ( Validate , sessionList ) Validate . isTrue ( $F3816 ( sessionList ) ) ; for ( SessionIndex sessionIndex : sessionList ) { Validate . notNull ( sessionIndex ) ; String participantSession = sessionIndex . getSessionIndex ( ) ; $F18062 ( Validate , participantSession ) Session session = sessionManager . getByParticipant ( participantSession ) ; if ( session == null ) { throw new SamlServiceException $F580 ; } if ( ! session . containsSessionParticipantUrl ( t . getIssuerValue ( ) ) ) { throw new SamlServiceException $F580 ; } if ( sessionId == null ) { $F126817 ( sessionId , session ) } else { if ( ! $F140091 ( sessionId , session ) ) { throw new SamlServiceException $F580 ; } } } return sessionId ; }
public boolean equals ( Object o ) { if ( o instanceof CoverageIntVdt ) { CoverageIntVdt civ = ( CoverageIntVdt ) o ; return ( ( attribute == civ . attribute ) && ( value == civ . value ) ) ; } else { return _BOOL ; } }
public void accept ( final Path file ) throws InterruptedException { $F102990 ( logger , String , file ) $F90610 ( permits ) executor . execute ( new ConsumerTask ( file ) ) ; }
private void addOptionList ( $F20109 ( args ) , final String optName , $F20109 ( values ) ) { for ( final String value : values ) { if $F1032 ( value ) $F23287 ( args , optName , value ) } }
public void testNegPosFirstShorter $F72 { $F50446 $F92469 int aSign = - NUM00 ; int bSign = NUM00 ; byte $F3018 = { - NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F45034 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , result ) }
private Activity checkActivity $F72 { Activity activity = mActivity . get ( ) ; $F77087 ( activity ) return activity ; }
$F1 public synchronized void start $F72 { $F973 ( LOGGER ) timer = new Timer $F580 ; timer . schedule ( this , INITIAL_SCAN_DELAY , SCAN_INTERVAL ) ; running = _BOOL ; }
public boolean isLandingPage ( URL url ) { if ( url . getQuery ( ) != null ) { return _BOOL ; } else { return landingPageSuffix ( url ) != NUM00 ; } }
protected static void writeRowCountDefinitions ( TableCreator creator , ByteBuffer buffer ) { writeRowCountDefinitions ( creator , buffer , creator . getIndexCount ( ) ) ; }
public void send ( String theString ) $F137731 ( send , theString )
public void init $F72 { _tokenMgmtExecutor . scheduleWithFixedDelay ( new ExpiredTokenCleaner $F72 , NUM00 , _maxLifeValuesHolder . getMaxTokenIdleTimeInMins ( ) , TimeUnit . MINUTES ) ; _tokenMgmtExecutor . scheduleWithFixedDelay ( new TokenKeysUpdater $F72 , NUM00 , FOREIGN_TOKEN_KEYS_BUNDLE_REFRESH_RATE_IN_MINS , TimeUnit . MINUTES ) ; }
$F20813 ( fieldId , PATH , OFFSET_LBA )
public String toString $F72 { return $F55902 ( String , bean ) ; }
$F6672 ( filename , separatorAdd , prefix , getPrefixLength , index , indexOfLastSeparator , endIndex )
public Spanned [ ] history $F72 { int i = NUM00 ; Spanned [ ] array = new Spanned $F2313 ( history ) ; for ( String s : history ) { if ( s != null ) { array [ i ] = Html . fromHtml ( s ) ; i ++ ; } } return array ; }
private void sign ( final $F96 contentBytes , final ByteArrayOutputStream mimeContent ) throws Exception { String algId = conf . getSignatureAlgorithmId ( ) ; String keyId = conf . getActiveSigningKey ( ) ; log . debug ( NUM00 + NUM00 , keyId , algId ) ; String signature = signHelper ( keyId , algId , contentBytes ) ; $F60813 ( mimeContent , envelopeHeader ) try ( MultipartEncoder encoder = new MultipartEncoder ( mimeContent , envelopeBoundary ) ) { encoder . startPart ( mpMixedContentType ( dataBoundary ) ) ; encoder . write ( contentBytes ) ; String algURI = CryptoUtils . getSignatureAlgorithmURI ( algId ) ; String hashURI = hashCalculator . getAlgoURI ( ) ; Path verificatioCertPath = conf . getCertPath ( keyId ) ; encoder . startPart ( MimeTypes . BINARY , new String [ ] { HEADER_CONTENT_TRANSFER_ENCODING + NUM00 , HEADER_SIG_ALGO_ID + NUM00 + algURI , HEADER_VERIFICATION_CERT_HASH + NUM00 + getVerificationCertHash ( verificatioCertPath ) + NUM00 + HEADER_HASH_ALGORITHM_ID + NUM00 + hashURI } ) ; $F60813 ( encoder , signature ) } $F71660 ( log , mimeContent ) Files . write ( tempConfPath , mimeContent . toByteArray ( ) ) ; $F7028 ( log , tempConfPath ) }
private boolean nextItemIs ( String match ) throws IOException { int c ; while ( isWhiteSpace ( c = buf . get ( ) ) ) $F845 for ( $F1088 ( i , match ) ) { if ( i > NUM00 ) $F16479 ( c , buf ) if $F94215 ( c , match , i ) { return _BOOL ; } } return _BOOL ; }
public static Object deserializeObject ( final $F96 objBytes , final ClassLoader loader ) throws $F6427 { ObjectInputStream objIn = null ; try { objIn = new ClassLoaderObjectInputStream ( new ByteArrayInputStream ( objBytes ) , loader ) ; $F287819 ( objIn ) } $F18632 ( close , objIn ) }
public IntervalImpl ( int serialNum , long startIntervalDateTime , double coverageFactor , FramingFlowType intervalDataType , ISource source , IIntervalClassification intervalClassification , Version adeVersion ) throws AdeInternalException { a_adeVersion = adeVersion ; if ( startIntervalDateTime < NUM00 ) { throw new IllegalArgumentException ( String . format ( $F39 , serialNum , startIntervalDateTime , coverageFactor , intervalDataType , source , intervalClassification , adeVersion ) ) ; } m_startIntervalTime = startIntervalDateTime ; m_framingFlowType = intervalDataType ; m_serialNum = serialNum ; m_intervalClassification = intervalClassification ; if ( m_intervalClassification == null ) { m_intervalClassification = IntervalClassificationEnum . REGULAR ; } m_messageSummaryMap = new TreeMap < Integer , IMessageSummary > $F72 ; m_endIntervalTime = m_startIntervalTime + m_framingFlowType . getDuration ( ) ; m_source = source ; if ( coverageFactor <= NUM00 || coverageFactor > NUM00 ) { throw new AdeInternalException ( NUM00 + coverageFactor ) ; } m_coverageFactor = coverageFactor ; }
public static boolean isTrue ( $F2100 ( dict ) , String key ) $F19580 ( isTrue , dict , key , _BOOL )
protected ShoppingCartItem $F72 $F845
public OutputStream bindStream ( OutputStream output ) { OutputStream stream = m_streams . get ( ) ; m_streams . set ( output ) ; return stream ; }
private void initMapLayer $F72 { float zoom = getInitZoom ( mapView . getWidth ( ) , mapView . getHeight ( ) , image . getWidth ( ) , image . getHeight ( ) ) ; Log . i ( TAG , Float . toString ( zoom ) ) ; mapView . setCurrentZoom ( zoom , NUM00 , NUM00 ) ; float width = mapView . getWidth ( ) - zoom * image . getWidth ( ) ; float height = mapView . getHeight ( ) - zoom * image . getHeight ( ) ; mapView . translate ( width / NUM00 , height / NUM00 ) ; }
public static double sampleSkew ( int size , double moment3 , double sampleVariance ) { int n = size ; $F96817 ( s , Math , sampleVariance ) double m3 = moment3 * n ; return n * m3 / ( $F94029 ( n ) * s * s * s ) ; }
public static void evolve ( Permutation p1 , Permutation p2 ) { $F2199 ( n , p1 ) if $F39465 ( n , p2 ) { throw new FrameworkException $F580 ; } $F123945 ( cuttingPoint1 , PRNG , n ) int cuttingPoint2 = PRNG . nextInt ( n - NUM00 ) ; if ( cuttingPoint1 == cuttingPoint2 ) { cuttingPoint2 = n - NUM00 ; } else $F63332 ( cuttingPoint1 , cuttingPoint2 , swap ) $F2027 parent1 = p1 . toArray ( ) ; $F2027 parent2 = p2 . toArray ( ) ; $F4120 ( offspring1 , n ) $F4120 ( offspring2 , n ) $F4120 ( replacement1 , n ) $F4120 ( replacement2 , n ) $F99493 ( Arrays , replacement1 ) $F99493 ( Arrays , replacement2 ) for ( int i = cuttingPoint1 ; i <= cuttingPoint2 ; i ++ ) { offspring1 [ i ] = parent2 [ i ] ; offspring2 [ i ] = parent1 [ i ] ; replacement1 [ parent2 [ i ] ] = parent1 [ i ] ; replacement2 [ parent1 [ i ] ] = parent2 [ i ] ; } for ( $F119 ( i , n ) ) { if $F61167 ( i , cuttingPoint1 , cuttingPoint2 ) { int n1 = parent1 [ i ] ; int m1 = replacement1 [ n1 ] ; int n2 = parent2 [ i ] ; int m2 = replacement2 [ n2 ] ; while ( m1 != - NUM00 ) { n1 = m1 ; m1 = replacement1 [ m1 ] ; } while ( m2 != - NUM00 ) { n2 = m2 ; m2 = replacement2 [ m2 ] ; } offspring1 [ i ] = n1 ; offspring2 [ i ] = n2 ; } } p1 . fromArray ( offspring1 ) ; p2 . fromArray ( offspring2 ) ; }
private String extractSpan $F36827 ( spans , start , end ) throws IndexOutOfBoundsException { int offset = getFirstSpanOffset ( spans ) ; assert ( start >= offset ) ; assert ( end >= offset ) ; spans += HTML_OPEN_SPAN ; int substart = getSpanPos ( spans , start - offset ) ; int subend = getSpanPos ( spans , end - offset + NUM00 ) ; $F6669 ( spans , substart , subend ) }
public void finished ( long chainLength ) { currentState = chainLength ; if ( loggers != null ) { for ( Logger logger : loggers ) { logger . log ( currentState ) ; logger . stopLogging ( ) ; } } if ( showOperatorAnalysis ) { showOperatorAnalysis ( System . out ) ; } if ( operatorAnalysisFile != null ) { try { PrintStream out = new PrintStream $F4443 ( operatorAnalysisFile ) ; showOperatorAnalysis ( out ) ; $F1206 ( out ) $F59 ( out ) } $F12241 ( e ) } }
public boolean hasDelay $F72 { return delay != - NUM00 ; }
void pushSpaceHandling ( Attributes attrs ) throws org . xml . sax . SAXParseException { $F163382 ( value , attrs ) if ( null == value ) { m_spacePreserveStack . push ( m_spacePreserveStack . peekOrFalse ( ) ) ; } else if $F3057 ( value ) $F31742 ( m_spacePreserveStack , _BOOL ) else if $F3057 ( value ) $F31742 ( m_spacePreserveStack , _BOOL ) else { SAXSourceLocator locator = getLocator ( ) ; $F1875 ( handler , m_stylesheetProcessor ) try { handler . error ( new TransformerException ( XSLMessages . createMessage ( XSLTErrorResources . ER_ILLEGAL_XMLSPACE_VALUE , null ) , locator ) ) ; } catch ( TransformerException te ) { throw new org . xml . sax . SAXParseException ( te . getMessage ( ) , locator , te ) ; } m_spacePreserveStack . push ( m_spacePreserveStack . peek ( ) ) ; } }
$F1431 public void registerDefaultDeviceTypes $F72 { final $F12078 devicesList = DefaultPlatform . getDeviceServiceMap ( ) ; for ( HashMap . Entry $F2538 entry : devicesList . entrySet ( ) ) { $F3477 ( key , entry ) $F840 ( value , entry ) try { registerDeviceService ( ( Class < DeviceService > ) Class . forName ( key ) , ( Class < DiscoveryProvider > ) Class . forName ( value ) ) ; } catch ( ClassNotFoundException e ) $F302 ( e ) } }
protected void positiveClose $F72 $F5795 ( freeContent )
public InputStreamReader ( java . io . InputStream is , $F9738 ( enc ) ) throws $F42439 { internal = is ; this . enc = enc . intern ( ) ; }
public int serverDelivery ( Object message , Object consumer , int deliveryCount ) throws Exception { ProtonServerSenderContext protonSender = serverSenders . get ( consumer ) ; if ( protonSender != null ) { return protonSender . deliverMessage ( message , deliveryCount ) ; } $F1082 }
public static String decode ( AbstractMessage msg , Boolean ext , int header ) { if ( ext == _BOOL ) $F4915 ( decode , msg ) return NUM00 + header ; }
private Instance votedReclassifyExample ( Instance example ) throws Exception { int classVotes [ ] = new int [ getNumClasses ( ) ] ; $F169226 ( i , classVotes ) for ( Enumeration < RuleList > e = new WekaEnumeration < RuleList > ( m_DecisionList ) ; e . hasMoreElements ( ) ; ) { RuleList rl = e . nextElement ( ) ; int classValue = ( int ) rl . classifyInstance ( example ) ; if ( classValue >= NUM00 ) { classVotes [ classValue ] ++ ; } } int maxVote = NUM00 ; int vote = - NUM00 ; for ( $F1139 ( i , classVotes ) ) { $F43613 ( classVotes , i , maxVote , vote ) } if ( vote >= NUM00 ) { example . setClassValue ( vote ) ; } else $F9451 return example ; }
$F25527 ( redundantOpCompactThreshold , redundantOpCount , lruEntries )
public final int hashCode $F72 { return System . identityHashCode ( this ) ; }
public DTMAxisIterator cloneIterator $F72 { _isRestartable = _BOOL ; try { final PrecedingIterator clone = ( PrecedingIterator ) super . clone ( ) ; $F49896 ( stackCopy , _stack ) $F7057 ( System , _stack , stackCopy ) clone . _stack = stackCopy ; return clone ; } catch ( CloneNotSupportedException e ) { throw new DTMException ( XMLMessages . createXMLMessage ( XMLErrorResources . ER_ITERATOR_CLONE_NOT_SUPPORTED , null ) ) ; } }
private BigQueryIO $F72 $F845
private boolean keyChainContainsPrivateKey ( Collection $F197968 keyChain , ECKey keyToAdd ) { if ( keyChain == null || keyToAdd == null ) { return _BOOL ; } else { for ( ECKey loopKey : keyChain ) { if ( Arrays . equals ( keyToAdd . getPrivKeyBytes ( ) , loopKey . getPrivKeyBytes ( ) ) ) { return _BOOL ; } } return _BOOL ; } }
public ScriptBuilder data $F97 ( data ) { if $F9634 ( data ) return smallNum ( NUM00 ) ; else return data ( chunks . size ( ) , data ) ; }
public RotationMatrixBuilder withThetas ( double theta ) { for ( Plane plane : planes ) { plane . setTheta ( theta ) ; } return this ; }
private void writeUserRegistry ( LocalContainer container , File configDir , $F2540 ( users ) , $F224310 ( groups ) ) throws IOException { $F109797 ( usersXML , configDir ) PrintStream writer = ServerConfigUtils . open ( usersXML ) ; $F8438 ( writer ) for ( $F19318 ( user , users ) ) { $F21384 ( writer ) writer . print ( user . getKey ( ) ) ; $F21384 ( writer ) writer . print ( user . getValue ( ) ) ; $F8438 ( writer ) } for ( Map . Entry $F14854 group : groups . entrySet ( ) ) { $F21384 ( writer ) writer . print ( group . getKey ( ) ) ; $F8438 ( writer ) for ( String member : group . getValue ( ) ) { $F21384 ( writer ) writer . print ( member ) ; $F8438 ( writer ) } $F8438 ( writer ) } $F8438 ( writer ) ServerConfigUtils . close ( writer ) ; }
public static String valueOf ( double value ) $F23210 ( Double , value )
private static void decodeHanziSegment $F11771 ( bits , result , count ) throws FormatException { $F11774 ( count , bits , FormatException ) $F11778 ( buffer , count ) int offset = NUM00 ; $F11794 ( count , twoBytes , bits , assembledTwoBytes , buffer , offset ) try $F11799 ( result , buffer , StringUtils ) catch ( UnsupportedEncodingException ignored ) $F2172 ( FormatException ) }
@ GenIgnore static Record createRecord ( String name , String address , Class itf , JsonObject metadata ) { return createRecord ( name , address , itf . getName ( ) , metadata ) ; }
public StopwatchCPU $F72 { threadTimer = ManagementFactory . getThreadMXBean ( ) ; start = threadTimer . getCurrentThreadCpuTime ( ) ; }
public synchronized $F96 lookupAudio ( String inputtype , String locale , String voice , String outputparams , String style , String effects , String inputtext ) throws SQLException { if ( inputtype == null || locale == null || voice == null || inputtext == null ) $F895 $F5475 ( audio ) String query = $F3906 ( inputtype , locale , voice , outputparams , style ) + NUM00 + effects + NUM00 ; $F3915 ( st , connection , query ) $F3916 ( st , inputtext ) $F49 ( results , st ) if $F1682 ( results ) { audio = results . getBytes ( NUM00 ) ; } return audio ; }
public void addCondition ( final Condition condition ) { conditions . add ( condition ) ; condition . setId ( conditionIdCounter ++ ) ; }
public static $F96 readBytesFromByteBuffer ( ByteBuffer byteBuffer ) { $F159436 ( buffer , byteBuffer ) byteBuffer . get ( buffer ) ; return buffer ; }
public void findPackageAndClass $F72 throws IOException { packageName = null ; className = null ; LineNumberReader reader = new LineNumberReader $F434 ( inputFile ) ; try { while ( className == null || packageName == null ) { $F27015 ( line , reader ) $F12576 ( line ) if ( packageName == null ) { $F275 ( matcher , PACKAGE_PATTERN , line ) if $F281 ( matcher ) $F1164 ( packageName , matcher ) } if ( className == null ) { $F275 ( matcher , CLASS_PATTERN , line ) if $F281 ( matcher ) $F1164 ( className , matcher ) } } $F23170 ( className ) } $F3229 ( reader ) }
public static void log ( final String msg , final Throwable t ) { if ( DEBUG ) { log ( msg ) ; $F156149 ( t , System ) } }
public static $F4324 fetchRPTargetVirtualPools ( DbClient dbClient ) { $F66346 ( rpProtectedTargetVPools ) try { $F28584 vpoolProtectionSettingsURIs = dbClient . queryByType ( VpoolProtectionVarraySettings . class , _BOOL ) ; Iterator < VpoolProtectionVarraySettings > vPoolProtectionSettingsItr = dbClient . queryIterativeObjects ( VpoolProtectionVarraySettings . class , vpoolProtectionSettingsURIs , _BOOL ) ; while $F2921 ( vPoolProtectionSettingsItr ) { VpoolProtectionVarraySettings rSetting = vPoolProtectionSettingsItr . next ( ) ; if ( null != rSetting && ! NullColumnValueGetter . isNullURI ( rSetting . getVirtualPool ( ) ) ) { rpProtectedTargetVPools . add ( rSetting . getVirtualPool ( ) ) ; } } } $F9877 ( _log , ex ) return rpProtectedTargetVPools ; }
public NSData ( File file ) throws IOException { bytes = new byte [ $F5338 ( file ) ] ; $F18800 ( raf , file ) raf . read ( bytes ) ; $F59 ( raf ) }
public int cardinality $F72 { int sum = NUM00 ; for ( long l : this . data ) sum += Long . bitCount ( l ) ; return sum ; }
private String deEscapeLiteral ( String lit ) $F8480 ( lit )
private static URI cookieUri ( URI uri , HttpCookie cookie ) { URI cookieUri = uri ; if ( cookie . getDomain ( ) != null ) { String domain = cookie . getDomain ( ) ; if $F4432 ( domain ) $F3109 ( domain ) try { cookieUri = new URI ( uri . getScheme ( ) == null ? NUM00 : uri . getScheme ( ) , domain , $F101354 ( cookie ) ? NUM00 : cookie . getPath ( ) , null ) ; } catch ( URISyntaxException e ) { Log . w ( TAG , e ) ; } } return cookieUri ; }
public static void i $F4353 ( msg , args ) { $F18748 ( allowI ) StackTraceElement caller = getCallerStackTraceElement ( ) ; String tag = generateTag ( caller ) ; if ( sLevel > LEVEL_INFO ) $F932 if $F3305 ( args ) { $F3869 ( msg , String , args ) } Log . i ( tag , msg ) ; }
$F173551 ( sourceList , value , _BOOL )
public DNewKeyStoreType ( JFrame parent ) { $F36748 ( super , parent , Dialog ) $F15426 ( setTitle , res ) initComponents ( ) ; }
protected void sprint ( long longField ) $F45719 ( sprint , String , longField )
private String substituteSubString $F1947 ( input , find , replace ) { $F1749 ( find_length , find ) $F1749 ( replace_length , replace ) $F7542 ( output , input ) $F12747 ( index , input , find ) int outputOffset = NUM00 ; while ( index > - NUM00 ) { output . replace ( index + outputOffset , index + outputOffset + find_length , replace ) ; outputOffset = outputOffset + ( replace_length - find_length ) ; index = input . indexOf ( find , index + find_length ) ; } $F92 ( output ) }
private int insertTestDataLocalDTTypes ( PreparedStatement pstmt ) throws Exception { $F270830 ( pstmt ) pstmt . setDate ( NUM00 , testSqlDate ) ; pstmt . setTime ( NUM00 , testSqlTime ) ; pstmt . setTimestamp ( NUM00 , testSqlTimeStamp ) ; pstmt . setTimestamp ( NUM00 , testSqlTimeStamp ) ; assertEquals ( NUM00 , pstmt . executeUpdate ( ) ) ; $F270830 ( pstmt ) pstmt . setObject ( NUM00 , testLocalDate ) ; pstmt . setObject ( NUM00 , testLocalTime ) ; pstmt . setObject ( NUM00 , testLocalDateTime ) ; pstmt . setObject ( NUM00 , testLocalDateTime ) ; assertEquals ( NUM00 , pstmt . executeUpdate ( ) ) ; $F270830 ( pstmt ) pstmt . setObject ( NUM00 , testLocalDate , JDBCType . DATE ) ; pstmt . setObject ( NUM00 , testLocalTime , JDBCType . TIME ) ; pstmt . setObject ( NUM00 , testLocalDateTime , JDBCType . TIMESTAMP ) ; pstmt . setObject ( NUM00 , testLocalDateTime , JDBCType . TIMESTAMP ) ; assertEquals ( NUM00 , pstmt . executeUpdate ( ) ) ; $F270830 ( pstmt ) pstmt . setObject ( NUM00 , testLocalDate , JDBCType . DATE , NUM00 ) ; pstmt . setObject ( NUM00 , testLocalTime , JDBCType . TIME , NUM00 ) ; pstmt . setObject ( NUM00 , testLocalDateTime , JDBCType . TIMESTAMP , NUM00 ) ; pstmt . setObject ( NUM00 , testLocalDateTime , JDBCType . TIMESTAMP , NUM00 ) ; assertEquals ( NUM00 , pstmt . executeUpdate ( ) ) ; $F270830 ( pstmt ) pstmt . setObject ( NUM00 , testLocalDate , JDBCType . VARCHAR ) ; pstmt . setObject ( NUM00 , testLocalTime , JDBCType . VARCHAR ) ; pstmt . setObject ( NUM00 , testLocalDateTime , JDBCType . VARCHAR ) ; pstmt . setObject ( NUM00 , testLocalDateTime , JDBCType . VARCHAR ) ; assertEquals ( NUM00 , pstmt . executeUpdate ( ) ) ; $F270830 ( pstmt ) pstmt . setObject ( NUM00 , testLocalDate , JDBCType . VARCHAR , NUM00 ) ; pstmt . setObject ( NUM00 , testLocalTime , JDBCType . VARCHAR , NUM00 ) ; pstmt . setObject ( NUM00 , testLocalDateTime , JDBCType . VARCHAR , NUM00 ) ; pstmt . setObject ( NUM00 , testLocalDateTime , JDBCType . VARCHAR , NUM00 ) ; assertEquals ( NUM00 , pstmt . executeUpdate ( ) ) ; if ( pstmt instanceof CallableStatement ) { CallableStatement cstmt = ( CallableStatement ) pstmt ; cstmt . setInt ( NUM00 , NUM00 ) ; cstmt . setDate ( NUM00 , testSqlDate ) ; cstmt . setTime ( NUM00 , testSqlTime ) ; cstmt . setTimestamp ( NUM00 , testSqlTimeStamp ) ; cstmt . setTimestamp ( NUM00 , testSqlTimeStamp ) ; assertEquals ( NUM00 , cstmt . executeUpdate ( ) ) ; cstmt . setInt ( NUM00 , NUM00 ) ; cstmt . setObject ( NUM00 , testLocalDate ) ; cstmt . setObject ( NUM00 , testLocalTime ) ; cstmt . setObject ( NUM00 , testLocalDateTime ) ; cstmt . setObject ( NUM00 , testLocalDateTime ) ; assertEquals ( NUM00 , cstmt . executeUpdate ( ) ) ; cstmt . setInt ( NUM00 , NUM00 ) ; cstmt . setObject ( NUM00 , testLocalDate , JDBCType . DATE ) ; cstmt . setObject ( NUM00 , testLocalTime , JDBCType . TIME ) ; cstmt . setObject ( NUM00 , testLocalDateTime , JDBCType . TIMESTAMP ) ; cstmt . setObject ( NUM00 , testLocalDateTime , JDBCType . TIMESTAMP ) ; assertEquals ( NUM00 , cstmt . executeUpdate ( ) ) ; cstmt . setInt ( NUM00 , NUM00 ) ; cstmt . setObject ( NUM00 , testLocalDate , JDBCType . DATE , NUM00 ) ; cstmt . setObject ( NUM00 , testLocalTime , JDBCType . TIME , NUM00 ) ; cstmt . setObject ( NUM00 , testLocalDateTime , JDBCType . TIMESTAMP , NUM00 ) ; cstmt . setObject ( NUM00 , testLocalDateTime , JDBCType . TIMESTAMP , NUM00 ) ; assertEquals ( NUM00 , cstmt . executeUpdate ( ) ) ; cstmt . setInt ( NUM00 , NUM00 ) ; cstmt . setObject ( NUM00 , testLocalDate , JDBCType . VARCHAR ) ; cstmt . setObject ( NUM00 , testLocalTime , JDBCType . VARCHAR ) ; cstmt . setObject ( NUM00 , testLocalDateTime , JDBCType . VARCHAR ) ; cstmt . setObject ( NUM00 , testLocalDateTime , JDBCType . VARCHAR ) ; assertEquals ( NUM00 , cstmt . executeUpdate ( ) ) ; cstmt . setInt ( NUM00 , NUM00 ) ; cstmt . setObject ( NUM00 , testLocalDate , JDBCType . VARCHAR , NUM00 ) ; cstmt . setObject ( NUM00 , testLocalTime , JDBCType . VARCHAR , NUM00 ) ; cstmt . setObject ( NUM00 , testLocalDateTime , JDBCType . VARCHAR , NUM00 ) ; cstmt . setObject ( NUM00 , testLocalDateTime , JDBCType . VARCHAR , NUM00 ) ; assertEquals ( NUM00 , cstmt . executeUpdate ( ) ) ; $F1082 } $F1082 }
public void removeListener ( final L listener ) { $F18062 ( Validate , listener ) listeners . remove ( listener ) ; }
public void run $F72 { start ( ) ; try { while ( _BOOL ) { Thread . sleep ( interval ) ; processConfigMessages ( ) ; } } catch ( InterruptedException e ) { $F301 ( e ) $F10910 ( log ) } finally { $F973 ( log ) stop ( ) ; } }
$F49286 ( value , absMin , absMax , absValue , Math )
private static DecoderResult createDecoderResultFromAmbiguousValues ( int ecLevel , $F2027 codewords , $F2027 erasureArray , $F2027 ambiguousIndexes , $F26353 ( ambiguousIndexValues ) ) throws FormatException , ChecksumException { $F22974 ( ambiguousIndexCount , ambiguousIndexes ) int tries = NUM00 ; while ( tries -- > NUM00 ) { for ( $F1139 ( i , ambiguousIndexCount ) ) { codewords [ ambiguousIndexes [ i ] ] = ambiguousIndexValues [ i ] [ ambiguousIndexCount [ i ] ] ; } try $F19580 ( decodeCodewords , codewords , ecLevel , erasureArray ) catch ( ChecksumException ignored ) $F845 if $F9634 ( ambiguousIndexCount ) $F159373 ( ChecksumException ) for ( $F1139 ( i , ambiguousIndexCount ) ) { if ( ambiguousIndexCount [ i ] < ambiguousIndexValues [ i ] . length - NUM00 ) { ambiguousIndexCount [ i ] ++ ; $F597 } else { ambiguousIndexCount [ i ] = NUM00 ; if $F74408 ( i , ambiguousIndexCount ) $F159373 ( ChecksumException ) } } } throw ChecksumException . getChecksumInstance ( ) ; }
private void readObject $F154558 ( s ) throws $F6427 { $F6428 ( s ) init ( getName ( ) , getMask ( actions ) ) ; }
public int predBlockIndexForSourcesIndex ( int sourcesIndex ) { return operands . get ( sourcesIndex ) . blockIndex ; }
public LockableFileWriter ( File file , Charset encoding , boolean append , String lockDir ) throws IOException { super ( ) ; file = file . getAbsoluteFile ( ) ; if ( file . getParentFile ( ) != null ) { FileUtils . forceMkdir ( file . getParentFile ( ) ) ; } if $F3444 ( file ) $F14525 if ( lockDir == null ) $F185872 ( lockDir , System ) $F1705 ( lockDirFile , lockDir ) FileUtils . forceMkdir ( lockDirFile ) ; testLockDir ( lockDirFile ) ; lockFile = new File ( lockDirFile , file . getName ( ) + LCK ) ; createLock ( ) ; out = initWriter ( file , encoding , append ) ; }
void appendProgramDescription ( final WrappingStringBuilder wb ) { if $F1264 ( mProgramDescription ) { wb . append ( LS ) ; wb . setWrapIndent ( NUM00 ) ; wb . wrapTextWithNewLines ( mProgramDescription ) ; } }
public static $F96 decode ( String s ) throws $F3258 $F8587 ( decode , s , NO_OPTIONS )
$F1431 private static final URL toURL ( String location , boolean file ) { if ( file ) { $F1705 ( f , location ) if $F3428 ( f ) { try { return f . toURL ( ) ; } catch ( MalformedURLException murl ) $F1337 } else $F1337 } else $F4915 ( getURL , location ) }
protected Object parseValue ( String string ) { $F1384 ( openParen , string ) $F11991 ( type , string , openParen ) String value = string . substring ( openParen + NUM00 , $F1092 ( string ) ) ; if $F3057 ( type ) { return value ; } else if $F3057 ( type ) { return new Float ( Float . parseFloat ( value ) ) ; } else if $F3057 ( type ) { return new Integer ( Integer . parseInt ( value ) ) ; } else if $F3057 ( type ) { $F17727 ( tok , value ) $F17729 ( size , tok ) $F4120 ( values , size ) for ( $F119 ( i , size ) ) { $F220101 ( fval , Float , tok ) values [ i ] = Math . round ( fval ) ; } return values ; } else $F35098 ( type ) }
public static String toUpperCase ( String string ) $F45889 ( changed , _BOOL , chars , string , i , ch )
$F82890 ( dout , getMessage )
$F1 public void update ( List < EnvVar > dataList ) { $F725 ( envVarList ) if ( dataList == null ) { for ( EnvVar envVar : builtInEnvVarMap . values ( ) ) $F207 ( envVarList , envVar ) } else { for ( EnvVar envVar : dataList ) { if $F20054 ( builtInEnvVarMap , envVar ) { envVarList . add ( new EnvVar ( envVar , _BOOL ) ) ; } else { envVarList . add ( new EnvVar ( envVar , _BOOL ) ) ; } } } setEnvironmentVariableValues ( ) ; }
public void makeClass ( String str , boolean caseless ) { for ( $F1088 ( i , str ) ) makeClass ( str . charAt ( i ) , caseless ) ; }
protected void notifyTimestampsToGateways ( EntryEventImpl event ) { VersionTagHolder updateTimeStampEvent = new VersionTagHolder ( event . getVersionTag ( ) ) ; updateTimeStampEvent . setOperation ( Operation . UPDATE_VERSION_STAMP ) ; updateTimeStampEvent . setKeyInfo ( event . getKeyInfo ( ) ) ; updateTimeStampEvent . setGenerateCallbacks ( _BOOL ) ; updateTimeStampEvent . distributedMember = event . getDistributedMember ( ) ; updateTimeStampEvent . setNewEventId ( getSystem ( ) ) ; if ( event . getRegion ( ) instanceof BucketRegion ) { BucketRegion br = ( BucketRegion ) event . getRegion ( ) ; PartitionedRegion pr = br . getPartitionedRegion ( ) ; updateTimeStampEvent . setRegion ( pr ) ; if ( pr . isParallelWanEnabled ( ) ) { br . handleWANEvent ( updateTimeStampEvent ) ; } if ( pr . isInitialized ( ) ) { pr . notifyGatewaySender ( EnumListenerEvent . TIMESTAMP_UPDATE , updateTimeStampEvent ) ; } } else { updateTimeStampEvent . setRegion ( event . getRegion ( ) ) ; notifyGatewaySender ( EnumListenerEvent . TIMESTAMP_UPDATE , updateTimeStampEvent ) ; } }
public Token nextRegex ( Pattern pattern ) { if ( ! hasNextRegex ( pattern ) ) $F4638 $F275 ( matcher , anyMentionPattern , remaining ) if $F55142 ( matcher ) $F4638 final int start = currentPosition + matcher . start ( ) ; final int end = currentPosition + matcher . end ( ) ; stepTo ( end ) ; return new Token ( this , start , end ) ; }
public boolean removeNode ( ServiceNode node ) { try $F20067 ( nodes , node ) $F7474 ( _BOOL ) }
public String asString $F72 throws IOException { long len = getContentLength ( ) ; ByteArrayOutputStream buf ; if ( NUM00 < len ) { buf = new ByteArrayOutputStream $F1047 ( len ) ; } else { $F1659 ( buf ) } writeTo ( buf ) ; return decode ( buf . toByteArray ( ) , getCharacterEncoding ( ) ) ; }
$F35402 ( context , cameraManager )
public void addContentItem ( ContentItem contentItem ) { if ( contentItems == null ) { contentItems = new ArrayList < ContentItem > $F72 ; } contentItems . add ( contentItem ) ; }
public void execute $F72 throws IOException { String key = NUM00 + $F210831 ( System ) ; $F102426 ( b64Key , Base64 , key ) sendHandshakeRequest ( b64Key ) ; receiveHandshakeResponse ( b64Key ) ; }
public void calculateMin ( double min ) { if ( this . min == - NUM00 ) $F6988 ( this , min ) else { this . min = Math . min ( this . min , min ) ; } }
private void emitUntil ( @ Nonnegative int taskCountAllowed ) throws IOException { try { while $F60125 ( emitQueue , taskCountAllowed ) { Future $F2147 future = emitQueue . remove ( ) ; $F96 toWrite = future . get ( ) ; blockSizes . add ( toWrite . length ) ; out . write ( toWrite ) ; } tryEmit ( ) ; } catch ( ExecutionException e ) $F5615 ( e ) catch ( InterruptedException e ) { throw new InterruptedIOException $F72 ; } }
void xrot ( double theta ) { theta *= ( pi / NUM00 ) ; $F54226 ( ct , Math , theta ) $F33859 ( st , Math , theta ) $F193831 ( Nyx , yx , ct , zx , st ) $F193831 ( Nyy , yy , ct , zy , st ) $F193831 ( Nyz , yz , ct , zz , st ) $F193831 ( Nyo , yo , ct , zo , st ) $F193835 ( Nzx , zx , ct , yx , st ) $F193835 ( Nzy , zy , ct , yy , st ) $F193835 ( Nzz , zz , ct , yz , st ) $F193835 ( Nzo , zo , ct , yo , st ) yo = Nyo ; yx = Nyx ; yy = Nyy ; yz = Nyz ; zo = Nzo ; zx = Nzx ; zy = Nzy ; zz = Nzz ; }
public void testAuditCompleted $F72 $F845
public static void scaleRectAboutCenter ( Rect r , float scale ) { if ( scale != NUM00 ) { int cx = r . centerX ( ) ; int cy = r . centerY ( ) ; r . offset ( - cx , - cy ) ; r . left = ( int ) ( r . left * scale + NUM00 ) ; r . top = ( int ) ( r . top * scale + NUM00 ) ; r . right = ( int ) ( r . right * scale + NUM00 ) ; r . bottom = ( int ) ( r . bottom * scale + NUM00 ) ; r . offset ( cx , cy ) ; } }
private static CharHandler parseUnprintableExtCodes $F4374 ( codeStrings ) { if $F11845 ( codeStrings ) { throw new IllegalStateException ( NUM00 + Arrays . asList ( codeStrings ) ) ; } $F96 bytes = codesToBytes ( codeStrings [ NUM00 ] , _BOOL ) ; if $F11845 ( bytes ) { throw new IllegalStateException ( NUM00 + Arrays . asList ( codeStrings ) ) ; } return new UnprintableExtCharHandler ( bytes [ NUM00 ] ) ; }
$F183755 ( measureSpec , result , specMode , MeasureSpec , specSize , mPaintSelected , getPaddingTop , getPaddingBottom , Math )
public static boolean isNull ( URI id ) { return ( id == null ) || NULL_URI . equals ( id ) ; }
public void updatePendingList $F72 { while ( $F3816 ( mPendingList ) && activeListHasRoom ( ) ) { DownloadInfoRunnable pending = mPendingList . get ( NUM00 ) ; pending . changeStatusState ( new ActiveState ( pending ) ) ; } }
$F1431 public static float valueRangeLimit $F2267 ( value , startValue , endValue ) { if ( value < Math . min ( startValue , endValue ) ) $F95700 ( Math , startValue , endValue ) if ( value > Math . max ( startValue , endValue ) ) $F85710 ( Math , startValue , endValue ) return value ; }
protected void createTitle ( String title ) { String newTitle ; newTitle = NUM00 + new Version $F72 ; if $F35625 ( title ) { newTitle += NUM00 + title ; } setTitle ( newTitle ) ; }
public static boolean isConnected ( NetType netType , NetworkInfo networkInfo ) { if ( netType == NetType . Any && networkInfo != null && isConnected ( networkInfo ) ) return _BOOL ; else if ( netType == NetType . Wifi && networkInfo != null && networkInfo . getType ( ) == ConnectivityManager . TYPE_WIFI && isConnected ( networkInfo ) ) return _BOOL ; else if ( netType == NetType . Mobile && networkInfo != null && networkInfo . getType ( ) == ConnectivityManager . TYPE_MOBILE && isConnected ( networkInfo ) ) return _BOOL ; return _BOOL ; }
public void deleteItem ( int position ) { if ( ! isDataListEmpty ( ) && position >= NUM00 && position < mDataList . size ( ) ) { mDataList . remove ( position ) ; notifyItemRemoved ( position ) ; } }
private int calculateGraidentChannel $F2026 ( sourceChannel , destChannel , distance , offset ) { $F25439 ( sourceChannel , destChannel ) float ratio = $F61779 ( offset ) / $F61779 ( distance ) ; int pos = ( int ) ( Math . abs ( sourceChannel - destChannel ) * ratio ) ; if ( sourceChannel > destChannel ) { return sourceChannel - pos ; } else { return sourceChannel + pos ; } }
private void applyImageMatrix ( float width , float height , boolean center , boolean animate ) { if ( mBitmap != null && width > NUM00 && height > NUM00 ) { $F2268 ( mImageMatrix ) mImageMatrix . postTranslate ( ( width - mBitmap . getWidth ( ) ) / NUM00 , ( height - mBitmap . getHeight ( ) ) / NUM00 ) ; mapImagePointsByImageMatrix ( ) ; if ( mDegreesRotated > NUM00 ) { mImageMatrix . postRotate ( mDegreesRotated , BitmapUtils . getRectCenterX ( mImagePoints ) , BitmapUtils . getRectCenterY ( mImagePoints ) ) ; mapImagePointsByImageMatrix ( ) ; } float scale = Math . min ( width / BitmapUtils . getRectWidth ( mImagePoints ) , height / BitmapUtils . getRectHeight ( mImagePoints ) ) ; if ( mScaleType == ScaleType . FIT_CENTER || ( mScaleType == ScaleType . CENTER_INSIDE && scale < NUM00 ) || ( scale > NUM00 && mAutoZoomEnabled ) ) { mImageMatrix . postScale ( scale , scale , BitmapUtils . getRectCenterX ( mImagePoints ) , BitmapUtils . getRectCenterY ( mImagePoints ) ) ; mapImagePointsByImageMatrix ( ) ; } mImageMatrix . postScale ( mZoom , mZoom , BitmapUtils . getRectCenterX ( mImagePoints ) , BitmapUtils . getRectCenterY ( mImagePoints ) ) ; mapImagePointsByImageMatrix ( ) ; RectF cropRect = mCropOverlayView . getCropWindowRect ( ) ; cropRect . offset ( - mZoomOffsetX * mZoom , - mZoomOffsetY * mZoom ) ; if ( center ) { mZoomOffsetX = width > BitmapUtils . getRectWidth ( mImagePoints ) ? NUM00 : Math . max ( Math . min ( width / NUM00 - cropRect . centerX ( ) , - BitmapUtils . getRectLeft ( mImagePoints ) ) , getWidth ( ) - BitmapUtils . getRectRight ( mImagePoints ) ) / mZoom ; mZoomOffsetY = height > BitmapUtils . getRectHeight ( mImagePoints ) ? NUM00 : Math . max ( Math . min ( height / NUM00 - cropRect . centerY ( ) , - BitmapUtils . getRectTop ( mImagePoints ) ) , getHeight ( ) - BitmapUtils . getRectBottom ( mImagePoints ) ) / mZoom ; } else { mZoomOffsetX = Math . min ( Math . max ( mZoomOffsetX * mZoom , - cropRect . left ) , - cropRect . right + width ) / mZoom ; mZoomOffsetY = Math . min ( Math . max ( mZoomOffsetY * mZoom , - cropRect . top ) , - cropRect . bottom + height ) / mZoom ; } mImageMatrix . postTranslate ( mZoomOffsetX * mZoom , mZoomOffsetY * mZoom ) ; cropRect . offset ( mZoomOffsetX * mZoom , mZoomOffsetY * mZoom ) ; mCropOverlayView . setCropWindowRect ( cropRect ) ; mapImagePointsByImageMatrix ( ) ; if ( animate ) { mAnimation . setEndState ( mImagePoints , mImageMatrix ) ; mImageView . startAnimation ( mAnimation ) ; } else { mImageView . setImageMatrix ( mImageMatrix ) ; } updateImageBounds ( _BOOL ) ; } }
public static void addStartupListener ( StartUpListener s ) $F207 ( m_StartupListeners , s )
public static void closeQuiet ( $F5466 SelectionKey rsrc ) { if ( rsrc != null ) closeQuiet ( rsrc . channel ( ) ) ; }
public CompletableFuture < NewFile > run $F72 { LOG . log ( Level . FINE , NUM00 , files . size ( ) ) ; CompletableFuture < NewFile > $F70223 ( fileCreation ) ; final List < TSData > fjpFiles = this . files ; $F62331 ( TASK_POOL ) $F9231 ( OUTSTANDING , fileCreation ) this . files = new LinkedList $F200 $F72 ; return fileCreation ; }
private static Key createDESKey $F5474 ( bytes , offset ) { $F12496 ( keyBytes ) $F154757 ( System , bytes , offset , keyBytes ) $F12496 ( material ) $F603 ( material , keyBytes ) $F154763 ( material , keyBytes ) $F154763 ( material , keyBytes ) $F154763 ( material , keyBytes ) $F154763 ( material , keyBytes ) $F154763 ( material , keyBytes ) $F154763 ( material , keyBytes ) material [ NUM00 ] = ( byte ) $F42449 ( keyBytes ) ; oddParity ( material ) ; return new SecretKeySpec ( material , NUM00 ) ; }
$F2192 ( bits , result , byteSegments , codewordPosition , d1 , unrandomize255State , count , FormatException , bytes , i , uee )
static void checkDesc $F4708 ( desc , canBeVoid ) { int end = checkDesc ( desc , NUM00 , canBeVoid ) ; if $F20325 ( end , desc ) $F18931 ( desc ) }
protected JsOutput newJsOutput ( Module m ) throws IOException { return new JsOutput ( m , isCompilingLanguageModule ( ) ) ; }
public String text $F72 { $F83 ( sb ) for ( Node node : nodes ) { sb . append ( node . getTextContent ( ) ) ; } $F92 ( sb ) }
private boolean scanExpr ( SymbolTable symbolTable , Tokens tokens , String data , int currentOffset , int endOffset ) throws XNIException { int ch ; int openParen = NUM00 ; int closeParen = NUM00 ; int nameOffset , dataOffset ; boolean isQName = _BOOL ; String name = null ; String prefix = null ; String schemeData = null ; $F280 ( schemeDataBuff ) while ( _BOOL ) { $F15290 ( currentOffset , endOffset ) ch = data . charAt ( currentOffset ) ; while ( ch == NUM00 || ch == NUM00 || ch == NUM00 || ch == NUM00 ) { if ( ++ currentOffset == endOffset ) $F5153 ch = data . charAt ( currentOffset ) ; } $F15290 ( currentOffset , endOffset ) byte chartype = ( ch >= NUM00 ) ? CHARTYPE_NONASCII : fASCIICharMap [ ch ] ; switch ( chartype ) { case CHARTYPE_OPEN_PAREN : addToken ( tokens , Tokens . XPTRTOKEN_OPEN_PAREN ) ; openParen ++ ; ++ currentOffset ; $F597 case CHARTYPE_CLOSE_PAREN : addToken ( tokens , Tokens . XPTRTOKEN_CLOSE_PAREN ) ; closeParen ++ ; ++ currentOffset ; $F597 case CHARTYPE_CARRET : case CHARTYPE_COLON : case CHARTYPE_DIGIT : case CHARTYPE_EQUAL : case CHARTYPE_LETTER : case CHARTYPE_MINUS : case CHARTYPE_NONASCII : case CHARTYPE_OTHER : case CHARTYPE_PERIOD : case CHARTYPE_SLASH : case CHARTYPE_UNDERSCORE : case CHARTYPE_WHITESPACE : if ( openParen == NUM00 ) { nameOffset = currentOffset ; currentOffset = scanNCName ( data , endOffset , currentOffset ) ; if ( currentOffset == nameOffset ) { $F54429 ( reportError , data ) return _BOOL ; } if ( currentOffset < endOffset ) $F7458 ( ch , data , currentOffset ) else $F44867 ( ch ) name = symbolTable . addSymbol ( data . substring ( nameOffset , currentOffset ) ) ; prefix = XMLSymbols . EMPTY_ "STRING" ; if ( ch == NUM00 ) { if ( ++ currentOffset == endOffset ) { return _BOOL ; } ch = data . charAt ( currentOffset ) ; prefix = name ; nameOffset = currentOffset ; currentOffset = scanNCName ( data , endOffset , currentOffset ) ; $F3627 ( currentOffset , nameOffset , _BOOL ) if ( currentOffset < endOffset ) $F7458 ( ch , data , currentOffset ) else $F44867 ( ch ) isQName = _BOOL ; name = symbolTable . addSymbol ( data . substring ( nameOffset , currentOffset ) ) ; } if ( currentOffset != endOffset ) { addToken ( tokens , Tokens . XPTRTOKEN_SCHEMENAME ) ; tokens . addToken ( prefix ) ; tokens . addToken ( name ) ; isQName = _BOOL ; } else if ( currentOffset == endOffset ) { addToken ( tokens , Tokens . XPTRTOKEN_SHORTHAND ) ; tokens . addToken ( name ) ; isQName = _BOOL ; } closeParen = NUM00 ; $F597 } else if ( openParen > NUM00 && closeParen == NUM00 && name != null ) { dataOffset = currentOffset ; currentOffset = scanData ( data , schemeDataBuff , endOffset , currentOffset ) ; if ( currentOffset == dataOffset ) { $F54429 ( reportError , data ) return _BOOL ; } if ( currentOffset < endOffset ) $F7458 ( ch , data , currentOffset ) else $F44867 ( ch ) schemeData = symbolTable . addSymbol ( schemeDataBuff . toString ( ) ) ; addToken ( tokens , Tokens . XPTRTOKEN_SCHEMEDATA ) ; tokens . addToken ( schemeData ) ; openParen = NUM00 ; $F97841 ( schemeDataBuff ) } else { return _BOOL ; } } } return _BOOL ; }
public void addLine ( int startLine , String sourceFile , int repeatCount , int outputLine , int outputIncrement ) { _lines . add ( new Line ( startLine , sourceFile , repeatCount , outputLine , outputIncrement ) ) ; }
public String ( StringBuffer stringbuffer ) { offset = NUM00 ; synchronized ( stringbuffer ) { value = stringbuffer . shareValue ( ) ; $F3935 ( count , stringbuffer ) } }
$F1654 ( all )
$F13735 ( prefix , namespace , attName , attValue , xmlWriter )
public Process executeAsync ( final CommandLine command , $F27504 ( environment ) , final ExecuteResultHandler handler ) throws IOException { if $F271542 ( workingDirectory ) $F124393 ( workingDirectory ) return executeInternal ( command , environment , workingDirectory , streamHandler , handler ) ; }
public static Range iterateToFindDomainBounds ( XYDataset dataset , List visibleSeriesKeys , boolean includeInterval ) { $F19400 ( ParamChecks , dataset ) $F19400 ( ParamChecks , visibleSeriesKeys ) double minimum = Double . POSITIVE_INFINITY ; double maximum = Double . NEGATIVE_INFINITY ; if ( includeInterval && dataset instanceof IntervalXYDataset ) { IntervalXYDataset ixyd = ( IntervalXYDataset ) dataset ; $F19402 ( iterator , visibleSeriesKeys ) while $F2921 ( iterator ) { $F19406 ( seriesKey , iterator ) $F12747 ( series , dataset , seriesKey ) $F19407 ( itemCount , dataset , series ) for ( $F119 ( item , itemCount ) ) { $F19408 ( xvalue , ixyd , series , item ) double lvalue = ixyd . getStartXValue ( series , item ) ; double uvalue = ixyd . getEndXValue ( series , item ) ; $F19412 ( Double , xvalue , minimum , Math , maximum ) if $F2292 ( Double , lvalue ) $F23139 ( minimum , Math , lvalue ) if $F2292 ( Double , uvalue ) $F252908 ( maximum , Math , uvalue ) } } } else { $F19402 ( iterator , visibleSeriesKeys ) while $F2921 ( iterator ) { $F19406 ( seriesKey , iterator ) $F12747 ( series , dataset , seriesKey ) $F19407 ( itemCount , dataset , series ) for ( $F119 ( item , itemCount ) ) { $F19408 ( x , dataset , series , item ) $F19412 ( Double , x , minimum , Math , maximum ) } } } if ( minimum == Double . POSITIVE_INFINITY ) $F1337 else $F19420 ( minimum , maximum ) }
public LibertyManagerClient $F72 $F845
private void checkComplianceAttributes ( AttrSet attrSet , boolean ignoreCompliance ) throws AMException { if ( ! ignoreCompliance && ComplianceServicesImpl . isComplianceUserDeletionEnabled ( ) ) { complianceImpl . verifyAttributes ( attrSet ) ; } }
private void updateZoningMap ( UnManagedExportMask mask , $F15661 initiators , $F42521 storagePorts ) { ZoneInfoMap zoningMap = networkDeviceController . getInitiatorsZoneInfoMap ( initiators , storagePorts ) ; for ( ZoneInfo zoneInfo : zoningMap . values ( ) ) { log . info ( NUM00 , new Object [ ] { zoneInfo . getZoneName ( ) , zoneInfo . getInitiatorWwn ( ) , zoneInfo . getPortWwn ( ) } ) ; } mask . setZoningMap ( zoningMap ) ; }
public InvitationStatus waitInvitationAnswer $F72 $F4915 ( waitInvitationAnswer , mRingingPeriod )
private boolean moveWithinSelectedRange ( JTable table , int dx , int dy , ListSelectionModel rsm , ListSelectionModel csm ) { int totalCount ; int minX , maxX , minY , maxY ; boolean rs = table . getRowSelectionAllowed ( ) ; boolean cs = table . getColumnSelectionAllowed ( ) ; if ( rs && cs ) { totalCount = table . getSelectedRowCount ( ) * table . getSelectedColumnCount ( ) ; minX = csm . getMinSelectionIndex ( ) ; maxX = csm . getMaxSelectionIndex ( ) ; minY = rsm . getMinSelectionIndex ( ) ; maxY = rsm . getMaxSelectionIndex ( ) ; } else if ( rs ) { totalCount = table . getSelectedRowCount ( ) ; minX = NUM00 ; maxX = table . getColumnCount ( ) - NUM00 ; minY = rsm . getMinSelectionIndex ( ) ; maxY = rsm . getMaxSelectionIndex ( ) ; } else if ( cs ) { totalCount = table . getSelectedColumnCount ( ) ; minX = csm . getMinSelectionIndex ( ) ; maxX = csm . getMaxSelectionIndex ( ) ; minY = NUM00 ; maxY = table . getRowCount ( ) - NUM00 ; } else { totalCount = NUM00 ; minX = maxX = minY = maxY = NUM00 ; } boolean stayInSelection ; if ( totalCount == NUM00 || ( totalCount == NUM00 && table . isCellSelected ( leadRow , leadColumn ) ) ) { stayInSelection = _BOOL ; maxX = table . getColumnCount ( ) - NUM00 ; maxY = table . getRowCount ( ) - NUM00 ; minX = Math . min ( NUM00 , maxX ) ; minY = Math . min ( NUM00 , maxY ) ; } else { stayInSelection = _BOOL ; } if ( dy == NUM00 && leadColumn == - NUM00 ) { leadColumn = minX ; leadRow = - NUM00 ; } else if ( dx == NUM00 && leadRow == - NUM00 ) { leadRow = minY ; leadColumn = - NUM00 ; } else if $F96093 ( dy , leadColumn ) { leadColumn = maxX ; leadRow = maxY + NUM00 ; } else if $F96093 ( dx , leadRow ) { leadRow = maxY ; leadColumn = maxX + NUM00 ; } leadRow = Math . min ( Math . max ( leadRow , minY - NUM00 ) , maxY + NUM00 ) ; leadColumn = Math . min ( Math . max ( leadColumn , minX - NUM00 ) , maxX + NUM00 ) ; do { calcNextPos ( dx , minX , maxX , dy , minY , maxY ) ; } while ( stayInSelection && ! table . isCellSelected ( leadRow , leadColumn ) ) ; return stayInSelection ; }
private $F3789 xPrime ( int t ) { $F3789 x = new double [ NUM00 ] [ getNumLags ( ) * numVars ] ; for ( $F50810 ( i , getNumLags ) ) { $F3789 yPrime = yPrime ( t - i - NUM00 ) ; System . arraycopy ( yPrime [ NUM00 ] , NUM00 , x [ NUM00 ] , i * numVars , numVars ) ; } return x ; }
private void readBinary ( final LittleEndianDataInputStream dis ) throws IOException { $F2980 ( RajLog ) $F71184 ( dis ) $F5952 ( facetCount , dis ) $F5415 verticesArr = $F401614 ( facetCount ) ; $F5415 normalsArr = $F401614 ( facetCount ) ; $F69133 ( indicesArr , facetCount ) $F12457 ( tempNorms ) int vertPos = NUM00 , normPos = NUM00 ; for ( $F1139 ( i , indicesArr ) ) indicesArr [ i ] = i ; while $F2892 ( dis ) { for ( $F6268 ( j ) ) { tempNorms [ j ] = dis . readFloat ( ) ; if ( Float . isNaN ( tempNorms [ j ] ) || Float . isInfinite ( tempNorms [ j ] ) ) { RajLog . w ( NUM00 ) ; tempNorms [ NUM00 ] = NUM00 ; tempNorms [ NUM00 ] = NUM00 ; tempNorms [ NUM00 ] = NUM00 ; $F597 } } for ( $F6268 ( j ) ) { normalsArr [ normPos ++ ] = tempNorms [ NUM00 ] ; normalsArr [ normPos ++ ] = tempNorms [ NUM00 ] ; normalsArr [ normPos ++ ] = tempNorms [ NUM00 ] ; } for ( $F6268 ( j ) ) verticesArr [ vertPos ++ ] = dis . readFloat ( ) ; $F71184 ( dis ) } mRootObject . setData ( verticesArr , normalsArr , null , null , indicesArr , _BOOL ) ; }
$F1654 ( components )
public void testRoundMathContextPrecision0 $F72 { String a = NUM00 ; int aScale = NUM00 ; int precision = NUM00 ; RoundingMode rm = RoundingMode . HALF_UP ; $F9512 ( mc , precision , rm ) String res = NUM00 ; $F1918 ( aNumber , a , aScale ) BigDecimal result = aNumber . round ( mc ) ; $F1925 ( assertEquals , res , result ) $F1928 ( assertEquals , aScale , result ) }
public void omitLessFreq $F72 { $F8249 ( name ) int threshold = n_words [ NUM00 ] / LESS_FREQ_RATIO ; $F46169 ( threshold , MINIMUM_FREQ ) $F23720 ( keys , freq ) int roman = NUM00 ; for ( $F43656 ( i , keys ) ) { $F13714 ( key , i ) $F85651 ( count , freq , key ) if ( count <= threshold ) { n_words [ $F1092 ( key ) ] -= count ; $F7042 ( i ) } else { if $F11809 ( key ) { roman += count ; } } } if ( roman < n_words [ NUM00 ] / NUM00 ) { $F23720 ( keys2 , freq ) for ( $F43656 ( i , keys2 ) ) { $F13714 ( key , i ) if $F11809 ( key ) { n_words [ $F1092 ( key ) ] -= freq . get ( key ) ; $F7042 ( i ) } } } }
$F1 public synchronized String toString $F72 { $F40722 ( elementCount ) int length = elementCount - NUM00 ; StringBuffer buffer = new StringBuffer ( elementCount * NUM00 ) ; $F84 ( buffer ) for ( $F119 ( i , length ) ) { $F40728 ( elementData , i , this , buffer ) $F84 ( buffer ) } $F40728 ( elementData , length , this , buffer ) $F84 ( buffer ) $F92 ( buffer ) }
public static PublicKeySelector fromString ( String type ) { if ( type != null ) { for ( $F40424 ( keySelector , PublicKeySelector ) ) { if ( $F206388 ( type , keySelector ) ) { return keySelector ; } } } $F1274 }
public static SortedMap $F15329 generateSortedTagMap ( $F806 partitions , $F2540 ( tags ) ) { final SortedMap $F15329 tagHashMap = new TreeMap $F15329 $F72 ; for ( $F19318 ( entry , tags ) ) { $F71216 ( tagName , entry ) final String tagValue = entry . getValue ( ) ; if ( tagValue == null || isPartitionTag ( partitions , tagName ) ) $F598 tagHashMap . put ( tagName . hashCode ( ) , tagValue . hashCode ( ) ) ; } return tagHashMap ; }
public static void describeShapeDetail ( Shape shape , double flattening ) { $F38394 ( pi2 , shape ) ; FlatteningPathIterator pi = new FlatteningPathIterator ( pi2 , flattening ) ; $F1993 ( coords ) int pointCount = NUM00 ; $F151102 ( Debug , flattening ) while $F38402 ( pi ) { $F38403 ( type , pi , coords ) Debug . output ( NUM00 + type + NUM00 + ( pointCount ++ ) + NUM00 + coords [ NUM00 ] + NUM00 + coords [ NUM00 ] ) ; $F24630 ( pi ) } $F151102 ( Debug , pointCount ) }
protected static String shortenClassname ( String nam , char c ) { final int lastdot = nam . lastIndexOf ( c ) ; if ( lastdot >= NUM00 ) $F31399 ( nam , lastdot ) return nam ; }
public void add ( T graphic ) $F250537 ( mLock , mGraphics , graphic , postInvalidate )
public String toString $F72 { $F280 ( sbuf ) TypeParameter . toString ( sbuf , typeParams ) ; $F84 ( sbuf ) Type . toString ( sbuf , params ) ; $F84 ( sbuf ) sbuf . append ( retType ) ; if $F3305 ( exceptions ) { $F84 ( sbuf ) Type . toString ( sbuf , exceptions ) ; } $F92 ( sbuf ) }
$F1 public void flip ( X11ComponentPeer peer , Component target , VolatileImage xBackBuffer , int x1 , int y1 , int x2 , int y2 , BufferCapabilities . FlipContents flipAction ) { if ( flipAction == BufferCapabilities . FlipContents . COPIED ) { SurfaceManager vsm = SurfaceManager . getManager ( xBackBuffer ) ; SurfaceData sd = vsm . getPrimarySurfaceData ( ) ; if ( sd instanceof GLXVSyncOffScreenSurfaceData ) { GLXVSyncOffScreenSurfaceData vsd = ( GLXVSyncOffScreenSurfaceData ) sd ; SurfaceData bbsd = vsd . getFlipSurface ( ) ; Graphics2D bbg = new SunGraphics2D ( bbsd , Color . black , Color . white , null ) ; try $F116712 ( bbg , xBackBuffer ) $F47533 ( bbg ) } else { $F27516 ( g , peer ) try { g . drawImage ( xBackBuffer , x1 , y1 , x2 , y2 , x1 , y1 , x2 , y2 , null ) ; } $F47533 ( g ) $F665 } } else if ( flipAction == BufferCapabilities . FlipContents . PRIOR ) $F932 OGLSurfaceData . swapBuffers ( peer . getContentWindow ( ) ) ; if ( flipAction == BufferCapabilities . FlipContents . BACKGROUND ) { $F27516 ( g , xBackBuffer ) try { g . setColor ( target . getBackground ( ) ) ; $F116732 ( g , xBackBuffer ) } $F47533 ( g ) } }
public boolean addProperty ( OwlProperty property ) { property . addRestriction ( this ) ; $F20805 ( properties , property ) }
public static GoogleAnalytics initialiseGoogleAnalytics ( Context context , String trackerId , final ExceptionParser callback ) { mAnalytics = GoogleAnalytics . getInstance ( context ) ; mAnalytics . setLocalDispatchPeriod ( NUM00 ) ; mTracker = mAnalytics . newTracker ( trackerId ) ; mTracker . enableExceptionReporting ( _BOOL ) ; mTracker . enableAutoActivityTracking ( _BOOL ) ; Thread . UncaughtExceptionHandler handler = Thread . getDefaultUncaughtExceptionHandler ( ) ; if ( handler != null && handler instanceof ExceptionReporter ) { ExceptionReporter exceptionReporter = ( ExceptionReporter ) handler ; exceptionReporter . setExceptionParser ( callback ) ; Thread . setDefaultUncaughtExceptionHandler ( exceptionReporter ) ; $F13527 ( Log , LOG_TAG ) } else $F13955 ( Log , LOG_TAG ) return mAnalytics ; }
void onMoved $F72 { double diff = System . currentTimeMillis ( ) - timeStamp ; timeStamp = NUM00 ; if ( diff > DISCARD_THRESHOLD ) $F932 double recentJitter = NUM00 ; double sum = NUM00 ; for ( $F119 ( i , VECTOR_LENGTH ) ) { double old = times [ i ] ; $F181889 ( avg , diff , old ) recentJitter += Math . abs ( old - diff ) ; times [ i ] = avg ; diff = old ; sum += avg ; } recentJitter /= NUM00 ; jitter = ( jitter + NUM00 * Math . max ( jitter , recentJitter ) + recentJitter ) / NUM00 ; prediction = TURN_LENGTH / ( sum / VECTOR_LENGTH + jitter ) ; $F4377 ( wm , WtWindowManager ) wm . setProperty ( SPEED_PROPERTY , Double . toString ( prediction ) ) ; wm . setProperty ( JITTER_PROPERTY , Double . toString ( jitter ) ) ; }
public ServiceID ( DataInput in ) throws IOException { this . mostSig = in . readLong ( ) ; this . leastSig = in . readLong ( ) ; }
public void onEnterElementConsumed $F42838 ( uri , localName , qname , atts ) throws SAXException { attStack . push ( currentAtts = new AttributesImpl ( atts ) ) ; nsEffectiveStack . push ( new Integer ( nsEffectivePtr ) ) ; $F8935 ( nsEffectivePtr , namespaces ) }
private void addFinally ( ArrayList returnList , Stmnt finallyBlock ) throws CompileError { Bytecode bc = bytecode ; $F2199 ( n , returnList ) for ( $F1316 ( i , n ) ) { final $F2027 ret = ( $F2027 ) returnList . get ( i ) ; int pc = ret [ NUM00 ] ; bc . write16bit ( pc , bc . currentPc ( ) - pc + NUM00 ) ; ReturnHook hook = new JsrHook2 ( this , ret ) ; finallyBlock . accept ( this ) ; hook . remove ( this ) ; if ( ! hasReturned ) { bc . addOpcode ( Opcode . GOTO ) ; bc . addIndex ( pc + NUM00 - bc . currentPc ( ) ) ; } } }
public Object nextMeta $F72 throws JSONException { char c ; char q ; do $F20182 ( c , next ) while $F104645 ( Character , c ) ; switch ( c ) { $F3366 throw syntaxError ( NUM00 ) ; $F1262 return XML . LT ; $F1262 return XML . GT ; $F1262 return XML . SLASH ; $F136822 ( XML ) $F1262 return XML . BANG ; $F1262 return XML . QUEST ; $F1262 $F1262 q = c ; for ( $F589 ) { c = next ( ) ; if ( c == NUM00 ) $F25983 ( syntaxError ) if ( c == q ) $F29943 ( Boolean ) } $F1267 for ( $F589 ) { c = next ( ) ; if $F104645 ( Character , c ) $F29943 ( Boolean ) switch ( c ) { $F3366 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 back ( ) ; return Boolean . TRUE ; } } } }
$F9863 ( child , dx , dy , _BOOL , checkHorizontal , mCallback , checkVertical , mTouchSlop , Math )
public static void writeJSONString ( Collection collection , Writer out ) throws IOException $F50078 ( collection , out , first , _BOOL , iter , value , JSONValue )
protected $F2027 readColorTable ( final int ncolors ) { final int nbytes = NUM00 * ncolors ; $F10498 ( tab ) $F4727 ( c , nbytes ) try { rawData . get ( c ) ; $F4470 ( tab ) int i = NUM00 ; int j = NUM00 ; while ( i < ncolors ) { final int r = ( c [ j ++ ] ) & NUM00 ; final int g = ( c [ j ++ ] ) & NUM00 ; final int b = ( c [ j ++ ] ) & NUM00 ; tab [ i ++ ] = NUM00 | ( r < < NUM00 ) | ( g < < NUM00 ) | b ; } } catch ( final BufferUnderflowException e ) { Log . w ( TAG , NUM00 , e ) ; status = STATUS_FORMAT_ERROR ; } return tab ; }
void touch ( boolean openReadOnly ) throws IOException { if ( isReadOnly || openReadOnly ) $F14525 $F3224 ( lastModified , System ) }
void pushImportURL ( String hrefUrl ) $F31742 ( m_importStack , hrefUrl )
@ SneakyThrows public void addKeyToKeystore ( KeyStore keyStore , X509Certificate cert , RSAPrivateKey privateKey , String alias , String password ) { KeyStore . PasswordProtection pass = new KeyStore . PasswordProtection $F81517 ( password ) ; $F65927 certificateChain = { cert } ; keyStore . setEntry ( alias , new KeyStore . PrivateKeyEntry ( privateKey , certificateChain ) , pass ) ; }
public boolean needsReload ( File file ) $F298 ( fFilesToReoad , file )
protected int drawLegend ( Canvas canvas , DefaultRenderer renderer , $F806 titles , int left , int right , int y , int width , int height , int legendSize , Paint paint , boolean calculate ) { float size = NUM00 ; if ( renderer . isShowLegend ( ) ) { float currentX = left ; float currentY = y + height - legendSize + size ; $F175116 ( paint , Component ) paint . setTextSize ( renderer . getLegendTextSize ( ) ) ; int sLength = Math . min ( titles . length , renderer . getSeriesRendererCount ( ) ) ; for ( $F119 ( i , sLength ) ) { SimpleSeriesRenderer r = renderer . getSeriesRendererAt ( i ) ; final float lineSize = getLegendShapeWidth ( i ) ; if ( r . isShowLegendItem ( ) ) { String text = titles [ i ] ; if ( titles . length == renderer . getSeriesRendererCount ( ) ) { $F14782 ( paint , r ) } else { paint . setColor ( ColorUtil . LTGRAY ) ; } $F5415 widths = new float $F31781 ( text ) ; paint . getTextWidths ( text , widths ) ; float sum = NUM00 ; for ( float value : widths ) { sum += value ; } float extraSize = lineSize + NUM00 + sum ; float currentWidth = currentX + extraSize ; if ( i > NUM00 && getExceed ( currentWidth , renderer , right , width ) ) { currentX = left ; currentY += renderer . getLegendTextSize ( ) ; size += renderer . getLegendTextSize ( ) ; currentWidth = currentX + extraSize ; } if ( getExceed ( currentWidth , renderer , right , width ) ) { float maxWidth = right - currentX - lineSize - NUM00 ; if ( isVertical ( renderer ) ) { maxWidth = width - currentX - lineSize - NUM00 ; } int nr = paint . breakText ( text , _BOOL , maxWidth , widths ) ; text = $F30497 ( text , nr ) ; } if ( ! calculate ) { drawLegendShape ( canvas , r , currentX , currentY , i , paint ) ; drawString ( canvas , text , currentX + lineSize + NUM00 , currentY + NUM00 , paint ) ; } currentX += extraSize ; } } } return Math . round ( size + renderer . getLegendTextSize ( ) ) ; }
public PutRepositoryRequest source $F97 ( repositoryDefinition ) { return $F39529 ( source , repositoryDefinition ) ; }
private void disableButtons $F72 { setFireEnabled ( _BOOL ) ; setSkipEnabled ( _BOOL ) ; setTwistEnabled ( _BOOL ) ; setNextEnabled ( _BOOL ) ; butDone . setEnabled ( _BOOL ) ; setFlipArmsEnabled ( _BOOL ) ; setFireModeEnabled ( _BOOL ) ; setNextTargetEnabled ( _BOOL ) ; }
public boolean isAdditiveNumber ( String num ) { $F1749 ( n , num ) for ( int i = NUM00 ; i <= n / NUM00 ; i ++ ) { if ( $F4431 ( num ) && i > NUM00 ) { return _BOOL ; } BigInteger num1 = new BigInteger ( num . substring ( NUM00 , i ) ) ; for ( int j = NUM00 ; Math . max ( i , j ) <= n - i - j ; j ++ ) { if ( num . charAt ( i ) == NUM00 && j > NUM00 ) $F5153 BigInteger num2 = new BigInteger ( num . substring ( i , i + j ) ) ; if ( isAdditiveNumber ( num1 , num2 , i + j , num ) ) { return _BOOL ; } } } return _BOOL ; }
$F1 public void write ( String str ) { int start = NUM00 ; while $F7007 ( start , str ) { int end = $F424314 ( Math , start , MAX_MESSAGE_LENGTH , str ) ; Log . i ( TAG , str . substring ( start , end ) ) ; start = end ; } }
protected void addToQuarantineQueue ( NodePortTuple npt ) $F116364 ( quarantineQueue , npt , _BOOL )
private CarbonDictionarySortInfo createColumnSortInfo ( CarbonDictionarySortModel [ ] dictionarySortModels ) { $F2027 sortIndex ; $F2027 sortIndexInverted ; Arrays . sort ( dictionarySortModels ) ; $F14244 ( sortIndex , dictionarySortModels ) $F14244 ( sortIndexInverted , dictionarySortModels ) for ( $F1139 ( i , dictionarySortModels ) ) { CarbonDictionarySortModel dictionarySortModel = dictionarySortModels [ i ] ; sortIndex [ i ] = dictionarySortModel . getKey ( ) ; sortIndexInverted [ dictionarySortModel . getKey ( ) - NUM00 ] = i + NUM00 ; } dictionarySortModels = null ; $F3807 sortIndexList = convertToList ( sortIndex ) ; $F3807 sortIndexInvertedList = convertToList ( sortIndexInverted ) ; return new CarbonDictionarySortInfo ( sortIndexList , sortIndexInvertedList ) ; }
private void addFeature ( JsonNode feature , int index ) { PointFeature feat = null ; try { feat = PointFeature . fromJsonNode ( feature ) ; } catch ( EmptyPolygonException e ) $F100849 ( LOG ) catch ( UnsupportedGeometryException e ) { LOG . warn ( e . message ) ; $F665 } $F2329 ( feat ) addFeature ( feat , index ) ; }
public BitString ( final String value ) { $F43187 ( this , value ) for ( $F1088 ( i , value ) ) { if $F11983 ( value , i ) { setBit ( value . length ( ) - ( i + NUM00 ) , _BOOL ) ; } else if $F20317 ( value , i ) $F18931 ( i ) } }
public void sort ( Comparator $F7504 comparator ) $F57005 ( Collections , individuals , comparator )
public void write ( Writer writer ) throws Exception { writer . write ( toString ( ) ) ; $F1206 ( writer ) }
public SafeAsyncTask $F72 { this . executor = DEFAULT_EXECUTOR ; }
public static boolean isCglibRenamedMethod ( Method renamedMethod ) { $F20605 ( name , renamedMethod ) if $F7311 ( name , CGLIB_RENAMED_METHOD_PREFIX ) { $F22867 ( i , name ) while ( i >= NUM00 && $F69553 ( Character , name , i ) ) { i -- ; } return ( $F9605 ( i , CGLIB_RENAMED_METHOD_PREFIX ) && $F46112 ( i , name ) && $F11983 ( name , i ) ) ; } return _BOOL ; }
public PWResetException ( String bundleName , String errCode , $F131 args ) { super ( bundleName , errCode , args ) ; $F136190 ( errList ) $F3876 ( errList , getMessage ) }
public static $F806 unionArrays $F159246 ( array1 , array2 ) { $F1933 ( array1 , array2 ) $F1933 ( array2 , array1 ) $F116112 ( set ) $F9629 ( set , Arrays , array1 ) $F9629 ( set , Arrays , array2 ) $F14862 ( set ) }
boolean isStateChange ( XDecoratedPeer window , XPropertyEvent e ) { if ( ! window . isShowing ( ) ) { stateLog . finer ( NUM00 ) ; return _BOOL ; } int wm_state = window . getWMState ( ) ; if ( wm_state == XUtilConstants . WithdrawnState ) { stateLog . finer ( NUM00 ) ; return _BOOL ; } else { if $F935 ( stateLog , PlatformLogger ) $F18853 ( stateLog , wm_state ) } boolean is_state_change = _BOOL ; if ( e . get_atom ( ) == XA_WM_STATE . getAtom ( ) ) { is_state_change = _BOOL ; } for ( XStateProtocol proto : getProtocols ( XStateProtocol . class ) ) { is_state_change |= proto . isStateChange ( e ) ; if ( stateLog . isLoggable ( PlatformLogger . Level . FINEST ) ) { stateLog . finest ( proto + NUM00 + is_state_change ) ; } } return is_state_change ; }
$F1 public XObject execute ( XPathContext xctxt ) throws $F1872 { Node xpathOwnerNode = ( Node ) xctxt . getOwnerObject ( ) ; $F1338 ( xpathOwnerNode ) int xpathOwnerNodeDTM = xctxt . getDTMHandleFromNode ( xpathOwnerNode ) ; int currentNode = xctxt . getCurrentNode ( ) ; DTM dtm = xctxt . getDTM ( currentNode ) ; int docContext = dtm . getDocument ( ) ; if ( DTM . NULL == docContext ) { error ( xctxt , XPATHErrorResources . ER_CONTEXT_HAS_NO_OWNERDOC , null ) ; } { Document currentDoc = XMLUtils . getOwnerDocument ( dtm . getNode ( currentNode ) ) ; Document xpathOwnerDoc = XMLUtils . getOwnerDocument ( xpathOwnerNode ) ; if ( currentDoc != xpathOwnerDoc ) { throw new TransformerException ( I18n . translate ( NUM00 ) ) ; } } XNodeSet nodes = new XNodeSet ( xctxt . getDTMManager ( ) ) ; NodeSetDTM nodeSet = nodes . mutableNodeset ( ) ; { int hereNode = DTM . NULL ; switch ( dtm . getNodeType ( xpathOwnerNodeDTM ) ) { case Node . ATTRIBUTE_NODE : case Node . PROCESSING_INSTRUCTION_NODE : { hereNode = xpathOwnerNodeDTM ; nodeSet . addNode ( hereNode ) ; $F597 } case Node . TEXT_NODE : { hereNode = dtm . getParent ( xpathOwnerNodeDTM ) ; nodeSet . addNode ( hereNode ) ; $F597 } $F2448 } } nodeSet . detach ( ) ; return nodes ; }
public List $F136545 top ( int n ) { List $F136545 $F204 ( top ) ; $F2027 values = data . toIntArray ( ) ; IntArrays . parallelQuickSort ( values , ReverseIntComparator . instance ( ) ) ; for ( int i = NUM00 ; i < n && i < values . length ; i ++ ) { top . add ( PackedLocalTime . asLocalTime ( values [ i ] ) ) ; } return top ; }
public static String grabClass ( String signature ) { $F275 ( matcher , sigRE , signature ) boolean b = matcher . matches ( ) ; if ( ! b && matcher . groupCount ( ) != NUM00 ) $F5197 ( logger , signature ) return matcher . group ( NUM00 ) ; }
public TimeSeriesMetricDeltaSet ( Stream < Entry < Tags , MetricValue > > td ) { values_ = Any2 . right ( td . collect ( Collectors . toMap ( null , null , null , null ) ) ) ; }
$F1654 ( nodes )
$F1 public final E nextElement $F72 { E result = m_Vector . get ( m_Counter ) ; m_Counter ++ ; if ( m_Counter == m_SpecialElement ) { m_Counter ++ ; } return result ; }
private ByteString escapeBytes ( final ByteString value ) { $F74602 ( needEscaping , value ) final ByteStringBuilder builder = new ByteStringBuilder $F72 ; for ( $F1088 ( i , value ) ) { final byte b = value . byteAt ( i ) ; if ( isByteToEscape ( b ) ) { builder . appendByte ( DN . NORMALIZED_ESC_BYTE ) ; } builder . appendByte ( b ) ; } return builder . toByteString ( ) ; }
public InputBuilder $F4203 repeatAll ( int times ) { $F98037 ( toAppend ) for ( $F119 ( i , times ) ) $F21926 ( toAppend , input ) input . addAll ( toAppend ) ; return this ; }
public final void renameClass ( Map classnames ) { String jvmNewThisName = ( String ) classnames . get ( Descriptor . toJvmName ( thisclassname ) ) ; if ( jvmNewThisName != null ) thisclassname = Descriptor . toJavaName ( jvmNewThisName ) ; constPool . renameClass ( classnames ) ; AttributeInfo . renameClass ( attributes , classnames ) ; ArrayList list = methods ; $F2199 ( n , list ) for ( $F1316 ( i , n ) ) { $F12192 ( minfo , list , i ) $F461592 ( desc , minfo ) minfo . setDescriptor ( Descriptor . rename ( desc , classnames ) ) ; AttributeInfo . renameClass ( minfo . getAttributes ( ) , classnames ) ; } list = fields ; $F8935 ( n , list ) for ( $F1316 ( i , n ) ) { $F12198 ( finfo , list , i ) $F461592 ( desc , finfo ) finfo . setDescriptor ( Descriptor . rename ( desc , classnames ) ) ; AttributeInfo . renameClass ( finfo . getAttributes ( ) , classnames ) ; } }
$F1431 public void handleButton3Request ( RequestInvocationEvent event ) { backTrail ( ) ; try { $F59547 ( name , getPageSessionAttribute , SAVE_VB_NAME ) ViewBean vb = getViewBean ( Class . forName ( name ) ) ; passPgSessionMap ( vb ) ; $F50333 ( vb , getRequestContext ) } catch ( ClassNotFoundException e ) $F36502 ( debug , e ) }
public IonException ( Throwable cause ) $F51022 ( super , cause )
public final double distance $F72 { return $F86242 ( Math , distance_square ) ; }
$F1 public void done $F72 { $F87122 ( super ) if ( mNumTestsExpected > mNumTestsRun ) $F299008 ( handleTestRunFailed , String , mNumTestsExpected , mNumTestsRun ) else $F29727 ( mTestRunInProgress , handleTestRunFailed ) }
public List < Challenge > challenges $F72 { String responseField ; if ( code == HTTP_UNAUTHORIZED ) { responseField = NUM00 ; } else if ( code == HTTP_PROXY_AUTH ) { responseField = NUM00 ; } else $F12523 ( Collections ) return OkHeaders . parseChallenges ( headers ( ) , responseField ) ; }
$F96 toBytes ( SSLSession session ) { if ( ! ( session instanceof OpenSSLSessionImpl ) ) $F1337 OpenSSLSessionImpl sslSession = ( OpenSSLSessionImpl ) session ; try { $F1538 ( baos ) $F1533 ( daos , baos ) daos . writeInt ( OPEN_SSL ) ; $F46943 ( data , sslSession ) $F17916 ( daos , data ) daos . write ( data ) ; $F65927 certs = session . getPeerCertificates ( ) ; $F17916 ( daos , certs ) for ( Certificate cert : certs ) { data = cert . getEncoded ( ) ; $F17916 ( daos , data ) daos . write ( data ) ; } $F11316 ( baos ) } catch ( IOException e ) { log ( e ) ; $F1274 } catch ( CertificateEncodingException e ) { log ( e ) ; $F1274 } }
public MersenneTwister $F72 { $F3936 ( mt , N ) setSeed ( System . currentTimeMillis ( ) + System . identityHashCode ( this ) ) ; }
private void verifyTimestamp ( X509Certificate cert ) throws CertPathValidatorException { String msg = NUM00 ; if ( debug != null ) debug . println ( $F28567 ( msg , date ) + NUM00 ) ; try { cert . checkValidity ( date ) ; } catch ( CertificateExpiredException e ) { throw new CertPathValidatorException ( msg + NUM00 , e , null , - NUM00 , BasicReason . EXPIRED ) ; } catch ( CertificateNotYetValidException e ) { throw new CertPathValidatorException ( msg + NUM00 , e , null , - NUM00 , BasicReason . NOT_YET_VALID ) ; } if ( debug != null ) $F35498 ( debug , msg ) }
public static $F96 encryptPassword ( final String password , final $F96 seed ) throws NoSuchAlgorithmException { if $F3581 ( password ) $F42429 $F10310 ( messageDigest , MessageDigest ) final $F96 stage1 = messageDigest . digest ( password . getBytes ( ) ) ; $F2268 ( messageDigest ) final $F96 stage2 = messageDigest . digest ( stage1 ) ; $F2268 ( messageDigest ) messageDigest . update ( seed ) ; messageDigest . update ( stage2 ) ; final $F96 digest = messageDigest . digest ( ) ; final $F96 $F14612 ( returnBytes , digest ) ; for ( $F1139 ( i , digest ) ) { returnBytes [ i ] = ( byte ) ( stage1 [ i ] ^ digest [ i ] ) ; } return returnBytes ; }
public int rows $F72 { return rows ; }
$F68161 ( in , length , bytes , count , pos )
public static String array2hex $F3295 ( array ) { return byteArray2String ( array , NUM00 , NUM00 , _BOOL , NUM00 ) ; }
private $F96 writeCheckedBytes ( MessageNano proto ) { BackupProtos . CheckedMessage wrapper = new BackupProtos . CheckedMessage $F72 ; wrapper . payload = MessageNano . toByteArray ( proto ) ; $F64750 ( checksum ) $F64752 ( checksum , wrapper ) wrapper . checksum = checksum . getValue ( ) ; return MessageNano . toByteArray ( wrapper ) ; }
public double reduceTo $F20449 ( width , height , limit ) { int w = getIconWidth ( ) ; int h = getIconHeight ( ) ; double scale = NUM00 ; if ( w > width ) { scale = $F51635 ( width ) / w ; } if ( h > height ) { scale = Math . min ( scale , $F51635 ( height ) / h ) ; } if ( scale < NUM00 ) { if ( limit > NUM00 ) $F252908 ( scale , Math , limit ) AffineTransform t = AffineTransform . getScaleInstance ( scale , scale ) ; transformImage ( $F29907 ( Math , scale , w ) , $F29907 ( Math , scale , h ) , t , null ) ; } return scale ; }
public void installBuiltinSound ( String soundIdentifier , InputStream data ) throws IOException { $F39715 ( builtinSounds , soundIdentifier , convertBuiltinSound , data ) }
private Integer countFragmentFilteredPages ( $F3803 templateFragments , boolean whitelist ) throws WikiApiException { try { int count = NUM00 ; PreparedStatement statement = null ; ResultSet result = null ; try { $F280 ( sqlString ) $F280 ( subconditions ) sqlString . append ( NUM00 + GeneratorConstants . TABLE_TPLID_TPLNAME + NUM00 + GeneratorConstants . TABLE_TPLID_PAGEID + NUM00 + ( whitelist ? NUM00 : NUM00 ) + NUM00 ) ; for ( $F1431 String fragment : templateFragments ) { if $F35625 ( subconditions ) $F86 ( subconditions ) $F84 ( subconditions ) } sqlString . append ( subconditions ) ; $F84 ( sqlString ) statement = connection . prepareStatement ( sqlString . toString ( ) ) ; int curIdx = NUM00 ; for ( String fragment : templateFragments ) { $F37156 ( fragment ) $F1382 ( fragment ) $F2899 ( fragment ) statement . setString ( curIdx ++ , fragment + NUM00 ) ; } result = execute ( statement ) ; $F1084 ( result ) if $F1682 ( result ) { $F55 ( count , result ) } } $F85840 ( statement , result ) return count ; } catch ( Exception e ) { throw new WikiApiException ( e ) ; } }
public static int findName ( String name , $F2027 table ) { for ( $F1139 ( i , table ) ) { if ( name . equals ( getName ( table [ i ] ) ) ) { return i ; } } $F150 }
private static Bitmap transform ( Matrix scaler , Bitmap source , int targetWidth , int targetHeight , int options ) { $F1594 ( Log , TAG ) boolean scaleUp = ( options & NUM00 ) != NUM00 ; boolean recycle = ( options & NUM00 ) != NUM00 ; int deltaX = source . getWidth ( ) - targetWidth ; int deltaY = source . getHeight ( ) - targetHeight ; if ( ! scaleUp && ( deltaX < NUM00 || deltaY < NUM00 ) ) { $F1594 ( Log , TAG ) Bitmap b2 = Bitmap . createBitmap ( targetWidth , targetHeight , Bitmap . Config . ARGB_8888 ) ; $F107516 ( c , b2 ) int deltaXHalf = Math . max ( NUM00 , deltaX / NUM00 ) ; int deltaYHalf = Math . max ( NUM00 , deltaY / NUM00 ) ; Rect src = new Rect ( deltaXHalf , deltaYHalf , deltaXHalf + Math . min ( targetWidth , source . getWidth ( ) ) , deltaYHalf + Math . min ( targetHeight , source . getHeight ( ) ) ) ; int dstX = ( targetWidth - src . width ( ) ) / NUM00 ; int dstY = ( targetHeight - src . height ( ) ) / NUM00 ; Rect dst = new Rect ( dstX , dstY , targetWidth - dstX , targetHeight - dstY ) ; c . drawBitmap ( source , src , dst , null ) ; $F177970 ( recycle , source ) c . setBitmap ( null ) ; $F1594 ( Log , TAG ) return b2 ; } float bitmapWidthF = source . getWidth ( ) ; float bitmapHeightF = source . getHeight ( ) ; $F6848 ( Log , TAG , bitmapWidthF , bitmapHeightF ) float bitmapAspect = bitmapWidthF / bitmapHeightF ; $F5773 ( viewAspect , targetWidth , targetHeight ) $F6848 ( Log , TAG , targetWidth , targetHeight ) if ( bitmapAspect > viewAspect ) { float scale = targetHeight / bitmapHeightF ; if $F19274 ( scale ) { scaler . setScale ( scale , scale ) ; } else { scaler = null ; } } else { float scale = targetWidth / bitmapWidthF ; if $F19274 ( scale ) { scaler . setScale ( scale , scale ) ; } else { scaler = null ; } } Bitmap b1 ; if ( scaler != null ) { $F1594 ( Log , TAG ) $F74324 ( b1 , Bitmap , source , scaler , _BOOL ) ; } else { $F1594 ( Log , TAG ) b1 = source ; } if ( recycle && b1 != source ) { $F1594 ( Log , TAG ) $F17551 ( source ) } int dx1 = Math . max ( NUM00 , b1 . getWidth ( ) - targetWidth ) ; int dy1 = Math . max ( NUM00 , b1 . getHeight ( ) - targetHeight ) ; Bitmap b2 = Bitmap . createBitmap ( b1 , dx1 / NUM00 , dy1 / NUM00 , targetWidth , targetHeight ) ; if ( b2 != b1 ) { if ( recycle || b1 != source ) { $F1594 ( Log , TAG ) $F17551 ( b1 ) } } $F1594 ( Log , TAG ) if ( b2 == null ) { $F1594 ( Log , TAG ) } return b2 ; }
private void scoreTrackResults ( Collection < Track > tracks , SearchQuery query , Collection < ScoredResult > output ) { for ( Track track : tracks ) { double score = scoreTrackResult ( query , track ) ; output . add ( new ScoredResult ( track , score ) ) ; } }
private Long currentTime $F72 { return $F165576 ( System ) ; }
$F47011 ( tag , msg , args , sLevel , LEVEL_VERBOSE , String , Log )
private static $F96 encode ( double latitude , double longitude ) { $F96 bytes = new byte [ NUM00 * Integer . BYTES ] ; NumericUtils . intToSortableBytes ( encodeLatitude ( latitude ) , bytes , NUM00 ) ; NumericUtils . intToSortableBytes ( encodeLongitude ( longitude ) , bytes , Integer . BYTES ) ; return bytes ; }
public static void putLongVolatile ( Object obj , long off , long val ) { UNSAFE . putLongVolatile ( obj , off , val ) ; }
public static $F3803 run $F24643 ( commands ) { return Shell . run ( NUM00 , $F10148 ( commands ) , null , _BOOL ) ; }
public void circle $F7635 ( x , y , r ) { $F30465 ( r ) double xs = scaleX ( x ) ; double ys = scaleY ( y ) ; double ws = factorX ( NUM00 * r ) ; double hs = factorY ( NUM00 * r ) ; if ( ws <= NUM00 && hs <= NUM00 ) pixel ( x , y ) ; else offscreen . draw ( new $F35359 ( xs - ws / NUM00 , ys - hs / NUM00 , ws , hs ) ) ; draw ( ) ; }
final public void println ( double v ) { Writer out = this . out ; $F8249 ( out ) print ( v ) ; try $F53422 ( out , _newline ) $F53427 ( log , Level , e ) }
public void writeSI32 ( int value ) throws IOException { flushBits ( ) ; $F88315 ( out , value ) $F34529 ( out , value ) $F34529 ( out , value ) $F34529 ( out , value ) bytesWritten += NUM00 ; }
private static void map ( final StringBuilder buffer , final ByteSequence sequence , final boolean trim , final boolean foldCase ) { $F52199 ( value , sequence ) for ( $F1088 ( i , value ) ) { $F1090 ( c , value , i ) $F36399 ( MAP_2_NULL , c ) if $F105 ( MAP_2_SPACE , c ) { if ( canMapToSpace ( buffer , trim ) ) $F288 ( buffer , SPACE_CHAR ) $F598 } if ( foldCase ) { $F3056 ( mapping , CASE_MAP_TABLE , c ) if ( mapping != null ) $F80470 ( buffer , mapping ) } buffer . append ( c ) ; } }
public void addButtonPressedListener ( FieldConfigStringButtonInterface listener ) { if ( buttonPressedListenerList == null ) { buttonPressedListenerList = new ArrayList < FieldConfigStringButtonInterface > $F72 ; } buttonPressedListenerList . add ( listener ) ; }
public void dispose $F72 { logDebug ( NUM00 ) ; mSetupDone = _BOOL ; if ( mServiceConn != null ) { logDebug ( NUM00 ) ; if ( mContext != null ) mContext . unbindService ( mServiceConn ) ; mServiceConn = null ; mService = null ; mPurchaseListener = null ; } }
private void fillXMLAttribute ( Attributes att , int index ) { fillQName ( fAttributeQName , att . getURI ( index ) , att . getLocalName ( index ) , att . getQName ( index ) ) ; String type = att . getType ( index ) ; fAttributes . addAttributeNS ( fAttributeQName , ( type != null ) ? type : XMLSymbols . fCDATASymbol , att . getValue ( index ) ) ; }
public JComponent createPropertyGUI ( PropertyConsumer pc ) { this . propertyConsumer = pc ; $F2697 ( props ) props = pc . getProperties ( props ) ; $F2697 ( info ) info = pc . getPropertyInfo ( info ) ; String prefix = pc . getPropertyPrefix ( ) ; return createPropertyGUI ( prefix , props , info ) ; }
public long copy ( String filename , OutputStream out , long offset , long size ) throws $F3 { $F96078 ( size ) BufferedInputStream is = new BufferedInputStream ( getFileInputStream ( filename ) ) ; $F47960 ( buf ) int bytesRead ; long pos = NUM00 ; long remaining = size ; try { if ( offset != NUM00 ) { is . skip ( offset ) ; pos += offset ; } while ( remaining != NUM00 ) { int max = buf . length ; if ( max > remaining ) $F110965 ( max , remaining ) $F61539 ( bytesRead , is , buf , max ) $F76065 ( bytesRead ) $F11584 ( out , buf , bytesRead ) pos += bytesRead ; remaining -= bytesRead ; } $F1206 ( out ) } catch ( Exception e ) $F29882 ( out ) finally $F87767 ( is ) return pos ; }
private static void deserializeHeader ( KdbHeader kdbHeader , DataInput dataInput ) throws IOException { kdbHeader . setFlags ( dataInput . readInt ( ) ) ; kdbHeader . setVersion ( dataInput . readInt ( ) ) ; $F12496 ( buffer ) dataInput . readFully ( buffer ) ; kdbHeader . setMasterSeed ( buffer ) ; $F46945 ( buffer ) dataInput . readFully ( buffer ) ; kdbHeader . setEncryptionIv ( buffer ) ; kdbHeader . setGroupCount ( dataInput . readInt ( ) ) ; kdbHeader . setEntryCount ( dataInput . readInt ( ) ) ; $F12496 ( buffer32 ) dataInput . readFully ( buffer32 ) ; kdbHeader . setContentHash ( buffer32 ) ; $F46945 ( buffer32 ) dataInput . readFully ( buffer32 ) ; kdbHeader . setTransformSeed ( buffer32 ) ; kdbHeader . setTransformRounds ( dataInput . readInt ( ) ) ; }
public List < JCAnnotation > transformAnnotations ( OutputElement target , Tree . Declaration annotated ) { EnumSet < OutputElement > outputs ; if ( annotated instanceof Tree . AnyClass ) { outputs = AnnotationUtil . outputs ( ( Tree . AnyClass ) annotated ) ; } else if ( annotated instanceof Tree . AnyInterface ) { outputs = AnnotationUtil . outputs ( ( Tree . AnyInterface ) annotated ) ; } else if ( annotated instanceof Tree . TypeAliasDeclaration ) { outputs = AnnotationUtil . outputs ( ( Tree . TypeAliasDeclaration ) annotated ) ; } else if ( annotated instanceof Tree . Constructor ) { outputs = AnnotationUtil . outputs ( ( Tree . Constructor ) annotated ) ; } else if ( annotated instanceof Tree . Enumerated ) { outputs = AnnotationUtil . outputs ( ( Tree . Enumerated ) annotated ) ; } else if ( annotated instanceof Tree . AnyMethod ) { outputs = AnnotationUtil . outputs ( ( Tree . AnyMethod ) annotated ) ; } else if ( annotated instanceof Tree . AttributeDeclaration ) { outputs = AnnotationUtil . outputs ( ( Tree . AttributeDeclaration ) annotated ) ; } else if ( annotated instanceof Tree . AttributeGetterDefinition ) { outputs = AnnotationUtil . outputs ( ( Tree . AttributeGetterDefinition ) annotated ) ; } else if ( annotated instanceof Tree . AttributeSetterDefinition ) { outputs = AnnotationUtil . outputs ( ( Tree . AttributeSetterDefinition ) annotated ) ; } else if ( annotated instanceof Tree . ObjectDefinition ) { outputs = AnnotationUtil . outputs ( ( Tree . ObjectDefinition ) annotated ) ; } else { throw BugException . unhandledNodeCase ( annotated ) ; } return transform ( annotated . getDeclarationModel ( ) , target , annotated . getAnnotationList ( ) , outputs ) ; }
$F163365 ( doc , elementList , nameNode , child , childData , load , _BOOL , assertEquals )
public boolean areAllPermissionsGranted $F72 $F18905 ( deniedPermissionResponses )
private String fetchCharsetFromCache ( Client client , Locale loc ) { Map cCache = ( Map ) charsetCache . get ( client . getClientType ( ) ) ; String val = null ; if ( cCache != null ) { $F18988 ( val , cCache , loc ) } return val ; }
public Shape paintLayer ( Graphics g , int offs0 , int offs1 , Shape bounds , JTextComponent c , View view ) { $F109754 ( g , getColor ) if ( offs0 == view . getStartOffset ( ) && offs1 == view . getEndOffset ( ) ) { Rectangle alloc ; if ( bounds instanceof Rectangle ) alloc = ( Rectangle ) bounds ; else alloc = bounds . getBounds ( ) ; paintSquiggle ( g , alloc ) ; return alloc ; } try { Shape shape = view . modelToView ( offs0 , Position . Bias . Forward , offs1 , Position . Bias . Backward , bounds ) ; Rectangle r = ( shape instanceof Rectangle ) ? ( Rectangle ) shape : shape . getBounds ( ) ; paintSquiggle ( g , r ) ; return r ; } $F203264 ( e ) $F1274 }
public void addControlRoll ( PilotingRollData control ) $F6659 ( controlRolls , control )
void processAddOnChanges ( Window caller , AddOnDependencyChecker . AddOnChangesResult changes ) { if ( addonsDialog != null ) { addonsDialog . setDownloadingUpdates ( ) ; } if $F89491 ( getView ) { Set < AddOn > addOns = new $F9623 ( changes . getUninstalls ( ) ) ; addOns . addAll ( changes . getOldVersions ( ) ) ; Set $F7942 $F9626 ( extensions ) ; extensions . addAll ( changes . getUnloadExtensions ( ) ) ; extensions . addAll ( changes . getSoftUnloadExtensions ( ) ) ; if ( ! warnUnsavedResourcesOrActiveActions ( caller , addOns , extensions , _BOOL ) ) $F932 } uninstallAddOns ( caller , changes . getUninstalls ( ) , _BOOL ) ; Set < AddOn > allAddons = new $F9623 ( changes . getNewVersions ( ) ) ; allAddons . addAll ( changes . getInstalls ( ) ) ; for ( AddOn addOn : allAddons ) { if ( addonsDialog != null ) { addonsDialog . notifyAddOnDownloading ( addOn ) ; } downloadAddOn ( addOn ) ; } }
public void rederiveColor $F72 { Color src = UIManager . getColor ( uiDefaultParentName ) ; if ( src != null ) { $F222769 ( tmp , Color , src ) $F222771 ( tmp , clamp , hOffset ) $F222771 ( tmp , clamp , sOffset ) $F222771 ( tmp , clamp , bOffset ) int alpha = clamp ( src . getAlpha ( ) + aOffset ) ; argbValue = ( Color . HSBtoRGB ( $F26406 ( tmp ) ) & NUM00 ) | ( alpha < < NUM00 ) ; } else { $F12457 ( tmp ) tmp [ NUM00 ] = clamp ( hOffset ) ; tmp [ NUM00 ] = clamp ( sOffset ) ; tmp [ NUM00 ] = clamp ( bOffset ) ; int alpha = clamp ( aOffset ) ; argbValue = ( Color . HSBtoRGB ( $F26406 ( tmp ) ) & NUM00 ) | ( alpha < < NUM00 ) ; } }
public static String toString $F23416 ( oid ) { StringBuilder sb = new StringBuilder $F113948 ( oid ) ; for ( int i = NUM00 ; i < oid . length - NUM00 ; ++ i ) { $F6939 ( sb , oid , i ) $F84 ( sb ) } sb . append ( $F8528 ( oid ) ) ; $F92 ( sb ) }
private void grow $F72 { m_allocatedSize *= NUM00 ; boolean newVector [ ] = new boolean [ m_allocatedSize ] ; $F10236 ( System , m_values , newVector , m_index ) m_values = newVector ; }
public void onIdleBegin $F72 $F16878 ( _idleCount )
private void addSpan ( CacheSpan span ) { TreeSet < CacheSpan > spansForKey = cachedSpans . get ( span . key ) ; if ( spansForKey == null ) { spansForKey = new TreeSet < CacheSpan > $F72 ; cachedSpans . put ( span . key , spansForKey ) ; } spansForKey . add ( span ) ; totalSpace += span . length ; notifySpanAdded ( span ) ; }
public boolean equals ( Object obj ) { $F3627 ( this , obj , _BOOL ) if ( ! ( obj instanceof URIName ) ) { return _BOOL ; } URIName other = ( URIName ) obj ; return uri . equals ( other . getURI ( ) ) ; }
void repaintChildren $F72 { for ( $F139348 ( child , panel ) ) $F18540 ( child ) }
private void validateDnsName ( String dnsName ) throws PolicyException { $F1384 ( starIndex , dnsName ) if ( ( starIndex >= NUM00 ) && $F1263 ( dnsName ) ) { if ( ( starIndex > NUM00 ) || ( ( starIndex == NUM00 ) && ( ( dnsName . indexOf ( NUM00 , NUM00 ) != - NUM00 ) || $F4435 ( dnsName ) ) ) ) { String $F1868 = { DNS_NAME , dnsName } ; $F136371 ( ResBundleUtils , args ) } } }
private static String readComment ( String input , int index ) { String comment = null ; Matcher matcher = COMMENT_PATTERN . matcher ( input . substring ( index ) ) ; if $F281 ( matcher ) { $F1157 ( comment , matcher ) $F3108 ( comment ) } return comment ; }
public static int findNext ( String str , char separator , char escapeChar , int start , StringBuilder split ) { int numPreEscapes = NUM00 ; for ( $F68483 ( i , start , str ) ) { $F1280 ( curChar , str , i ) if ( numPreEscapes == NUM00 && curChar == separator ) { return i ; } else { split . append ( curChar ) ; numPreEscapes = ( curChar == escapeChar ) ? ( ++ numPreEscapes ) % NUM00 : NUM00 ; } } $F150 }
private static String guessContentType ( String url ) { $F37156 ( url ) if $F8991 ( url ) $F2455 else if $F8991 ( url ) $F2455 else if $F11809 ( url ) $F2455 else if $F8991 ( url ) $F2455 else if $F8991 ( url ) $F2455 else $F2455 }
public static String extractCSVOutputLineDomain ( String csvOut ) { String tokens [ ] = csvOut . split ( $F33983 ) ; return tokens [ NUM00 ] ; }
public void connect $F72 { connect ( this . logWriter ) ; }
public static boolean doCacheHeaderValidation ( final SolrQueryRequest solrReq , final HttpServletRequest req , final Method reqMethod , final HttpServletResponse resp ) { if ( Method . POST == reqMethod || Method . OTHER == reqMethod ) { return _BOOL ; } final long lastMod = HttpCacheHeaderUtil . calcLastModified ( solrReq ) ; final String etag = HttpCacheHeaderUtil . calcEtag ( solrReq ) ; resp . setDateHeader ( NUM00 , lastMod ) ; resp . setHeader ( NUM00 , etag ) ; if ( checkETagValidators ( req , resp , reqMethod , etag ) ) { return _BOOL ; } $F24922 ( checkLastModValidators , req , resp , lastMod , _BOOL ) return _BOOL ; }
public IvrZoneset showActiveIvrZoneset $F72 throws NetworkDeviceControllerException { List < IvrZoneset > zonesets = showIvrZonesets ( _BOOL ) ; return zonesets . isEmpty ( ) ? null : zonesets . get ( NUM00 ) ; }
$F1431 public static $F22664 ImmutableArray $F22664 empty $F72 { return ( ImmutableArray $F22664 ) EMPTY ; }
public void replaceNonOptionalNonMinusNodesWith ( final List < IGroupMemberNode > ordered , final boolean recomputeDefinitelyProduced ) { $F725 ( nonOptionalNonMinusNodes ) nonOptionalNonMinusNodes . addAll ( ordered ) ; $F245298 ( recomputeDefinitelyProduced ) }
public static String toString ( Accountable a ) { $F83 ( sb ) toString ( sb , a , NUM00 ) ; $F92 ( sb ) }
$F1 public int hashCode $F72 { return type < < NUM00 | value . hashCode ( ) < < NUM00 | otherValue . hashCode ( ) ; }
protected void deleteTypeVertex ( AtlasVertex instanceVertex , DataTypes . TypeCategory typeCategory , boolean force ) throws AtlasException { switch ( typeCategory ) { case STRUCT : case TRAIT : deleteTypeVertex ( instanceVertex , force ) ; $F597 case CLASS : deleteEntities ( Collections . singletonList ( instanceVertex ) ) ; $F597 $F1267 $F40027 ( typeCategory ) } }
public static $F3803 readToList ( Reader r ) throws IOException { try ( BufferedReader in = new BufferedReader ( r ) ) { $F24645 ( l ) String line = null ; while $F443 ( line , in ) l . add ( line ) ; $F26666 ( Collections , l ) } }
$F1431 public void addCacheContext ( GridCacheContext cacheCtx ) throws IgniteCheckedException { if ( ctxMap . containsKey ( cacheCtx . cacheId ( ) ) ) { GridCacheContext $F9340 existing = ctxMap . get ( cacheCtx . cacheId ( ) ) ; throw new IgniteCheckedException ( NUM00 + NUM00 + cacheCtx . name ( ) + NUM00 + existing . name ( ) + NUM00 ) ; } CacheStoreManager mgr = cacheCtx . store ( ) ; if ( mgr . configured ( ) && mgr . isLocal ( ) ) $F5224 ( locStoreCnt ) ctxMap . put ( cacheCtx . cacheId ( ) , cacheCtx ) ; }
protected static boolean isCglibGetCallbacks ( AnnotatedMethod am ) { $F6969 rt = am . getRawType ( ) ; if ( rt == null || ! rt . isArray ( ) ) { return _BOOL ; } $F114155 ( compType , rt ) Package pkg = compType . getPackage ( ) ; if ( pkg != null ) { $F20605 ( pname , pkg ) if $F418 ( pname ) { return _BOOL ; } } return _BOOL ; }
public int compareTo ( NamedMediaType other ) $F372532 ( _name , other )
public boolean isModified $F72 { synchronized ( this ) { if ( _isChecking || _isModified ) { return _isModified ; } _isChecking = _BOOL ; } try { long now ; $F9171 ( now , CurrentTime ) if ( now < _lastCheckTime + _checkInterval ) return _isModified ; _lastCheckTime = now ; for ( $F5373 ( i , _dependencyList ) ) { Dependency dependency = _dependencyList . get ( i ) ; if ( dependency . isModified ( ) ) { dependency . logModified ( log ( ) ) ; _isModified = _BOOL ; return _isModified ; } } return _isModified ; } finally { _isChecking = _BOOL ; } }
protected ReplacedElement newIrreplaceableImageElement ( int cssWidth , int cssHeight ) { BufferedImage missingImage ; ReplacedElement mre ; try { missingImage = ImageUtil . createCompatibleBufferedImage ( cssWidth , cssHeight , BufferedImage . TYPE_INT_RGB ) ; $F5115 ( g , missingImage ) $F339 ( g , Color ) $F301047 ( g , Color ) g . setFont ( new Font $F13847 ( Font ) ) ; g . drawString ( $F109655 ) ; $F355 ( g ) mre = new ImageReplacedElement ( missingImage , cssWidth , cssHeight ) ; } catch ( Exception e ) { mre = new EmptyReplacedElement ( cssWidth < NUM00 ? NUM00 : cssWidth , cssHeight < NUM00 ? NUM00 : cssHeight ) ; } return mre ; }
public boolean greaterThan ( FXGVersion version ) { return ( compareTo ( version ) > NUM00 ) ; }
$F1 public DataSource createDataSource ( Properties properties ) throws SQLException { $F2697 ( propertiesCopy ) if ( properties != null ) $F96492 ( propertiesCopy , properties ) rejectUnsupportedOptions ( propertiesCopy ) ; rejectPoolingOptions ( propertiesCopy ) ; JdbcDataSource dataSource = new JdbcDataSource $F72 ; setupH2DataSource ( dataSource , propertiesCopy ) ; return dataSource ; }
public $F2689 find ( T object ) { if $F15257 ( locations , object ) { locations . put ( object , new $F9623 $F72 ) ; } return Collections . unmodifiableSet ( locations . get ( object ) ) ; }
private void scrollCurrentItemToCenter $F72 { final ViewItem currItem = mViewItems [ BUFFER_CENTER ] ; $F2329 ( currItem ) final int currentViewCenter = currItem . getCenterX ( ) ; if ( mController . isScrolling ( ) || mIsUserScrolling || isCurrentItemCentered ( ) ) { Log . d ( TAG , NUM00 + mController . isScrolling ( ) ) ; $F665 } int snapInTime = ( int ) ( SNAP_IN_CENTER_TIME_MS * ( ( float ) Math . abs ( mCenterX - currentViewCenter ) ) / mDrawArea . width ( ) ) ; $F13527 ( Log , TAG ) mController . scrollToPosition ( currentViewCenter , snapInTime , _BOOL ) ; }
public void addMetaObject ( MetaObject object ) { for ( $F3836 ( k , MetaObjects ) ) { if $F4257 ( MetaObjects , k ) { MetaObjects . set ( k , object ) ; $F665 } } MetaObjects . add ( object ) ; }
public boolean remove ( String word ) $F20067 ( m_Words , word )
public void testCase12 $F72 { $F7829 $F161331 int aSign = NUM00 ; int bSign = - NUM00 ; $F113721 $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F3024 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , result ) }
public synchronized void addRecentItem ( T item ) { item = fromString ( toString ( item ) ) ; if $F3817 ( m_RecentItems ) { if ( item . equals ( m_RecentItems . get ( NUM00 ) ) ) $F665 } m_RecentItems . remove ( item ) ; $F6965 ( m_RecentItems , item ) while $F60125 ( m_RecentItems , m_MaxCount ) $F30606 ( m_RecentItems ) $F5453 ( m_IgnoreChanges ) writeProps ( ) ; updateMenu ( ) ; notifyRecentItemListenersOfAdd ( item ) ; }
$F28896 ( index , paint , bounds , title , getTitle )
public void testInvokeAll2 $F72 throws InterruptedException { $F25236 ( e ) PoolCleaner cleaner = null ; try { cleaner = cleaner ( e ) ; List < $F171452 > r = e . invokeAll ( new ArrayList < Callable $F4 > $F72 ) ; assertTrue ( r . isEmpty ( ) ) ; } $F14364 ( cleaner ) }
public void cfgPackage ( ConfigurationValue cfgval , String name , String desc ) { packages . add ( new PackageInfo ( name , desc ) ) ; packageNames . add ( name ) ; }
$F883 ( input )
private void createBlockMirrorData ( String name , int numBlockMirrors ) throws Exception { Volume volume = new Volume $F72 ; $F132261 ( volumeURI , URIUtil ) testVolumeURIs . add ( volumeURI ) ; volume . setId ( volumeURI ) ; volume . setLabel ( NUM00 ) ; URI cgUri = createBlockConsistencyGroup ( NUM00 ) ; volume . setConsistencyGroup ( cgUri ) ; _dbClient . createObject ( volume ) ; for ( $F9993 ( i , numBlockMirrors ) ) { BlockMirror blockMirror = new BlockMirror $F72 ; URI blockMirrorURI = URIUtil . createId ( $F30624 ) ; testBlockMirrorURIs . add ( blockMirrorURI ) ; blockMirror . setId ( blockMirrorURI ) ; blockMirror . setLabel ( name + i ) ; blockMirror . setConsistencyGroup ( cgUri ) ; _dbClient . createObject ( blockMirror ) ; } }
$F1 public synchronized void start $F72 { $F7254 ( running ) $F973 ( LOGGER ) if $F2979 ( endpoints ) { int port = config . getInt ( NetworkConfig . Keys . COAP_PORT ) ; LOGGER . log ( Level . INFO , NUM00 , port ) ; addEndpoint ( new CoapEndpoint ( port , this . config ) ) ; } int started = NUM00 ; for ( Endpoint ep : endpoints ) { try { $F2346 ( ep ) ++ started ; } catch ( IOException e ) { LOGGER . log ( Level . SEVERE , NUM00 + ep . getAddress ( ) + NUM00 , e ) ; } } if ( started == NUM00 ) $F4639 else { running = _BOOL ; } }
public JsonArray add ( String value ) { values . add ( Json . value ( value ) ) ; return this ; }
public boolean retainAll ( AbstractFloatList other ) $F205711 ( other , size , _BOOL , setSize , limit , j , i , getQuick , setQuick , modified )
$F1 public void exceptionCaught ( IoSession session , Throwable cause ) { final IoSessionInputStream in = ( IoSessionInputStream ) session . getAttribute ( KEY_IN ) ; IOException e = null ; if ( cause instanceof StreamIoException ) { e = ( IOException ) cause . getCause ( ) ; } else if ( cause instanceof IOException ) { e = ( IOException ) cause ; } if ( e != null && in != null ) { in . throwException ( e ) ; } else { $F18942 ( LOGGER , cause ) session . close ( _BOOL ) ; } }
protected void clearResult $F72 { md . clearResult ( ) ; $F15121 ( localizationResult ) }
public static $F4203 String toString $F50316 ( collection ) { $F4158 ( collection ) if $F2979 ( collection ) $F2455 $F83 ( buf ) String delimiter = NUM00 ; for ( T t : collection ) { $F4322 ( t ) buf . append ( delimiter ) ; buf . append ( t ) ; delimiter = NUM00 ; } $F92 ( buf ) }
public static float between $F2267 ( val , min , max ) { return Math . max ( Math . min ( val , max ) , min ) ; }
public static StringBuffer replaceString ( StringBuffer buffer , $F806 parameters ) { int placeHolderPosition = - NUM00 ; String placeHolder = null ; for ( $F1139 ( i , parameters ) ) { if ( parameters [ i ] == null ) $F5153 placeHolder = $F37978 ( i ) ; placeHolderPosition = buffer . indexOf ( placeHolder ) ; if ( placeHolderPosition != - NUM00 ) { buffer . replace ( placeHolderPosition , placeHolderPosition + placeHolder . length ( ) , parameters [ i ] ) ; } else $F5153 } return buffer ; }
private static int lookupQualSelector ( XMPNode arrayNode , String qualName , String qualValue , int aliasForm ) throws XMPException { if $F1238 ( XML_LANG , qualName ) { qualValue = Utils . normalizeLangValue ( qualValue ) ; int index = XMPNodeUtils . lookupLanguageItem ( arrayNode , qualValue ) ; if ( index < NUM00 && ( aliasForm & AliasOptions . PROP_ARRAY_ALT_TEXT ) > NUM00 ) { XMPNode langNode = new XMPNode ( ARRAY_ITEM_NAME , null ) ; XMPNode xdefault = new XMPNode ( XML_LANG , X_DEFAULT , null ) ; langNode . addQualifier ( xdefault ) ; arrayNode . addChild ( NUM00 , langNode ) ; $F1082 } else { return index ; } } else { for ( int index = NUM00 ; index < arrayNode . getChildrenLength ( ) ; index ++ ) { XMPNode currItem = arrayNode . getChild ( index ) ; for ( Iterator it = currItem . iterateQualifier ( ) ; it . hasNext ( ) ; ) { $F38096 ( qualifier , it ) if ( $F3174 ( qualName , qualifier ) && $F14681 ( qualValue , qualifier ) ) { return index ; } } } $F150 } }
public boolean isMultipleAllowed ( String frameID ) $F298 ( multipleFrames , frameID )
public $F806 parseConfiguration ( File xmlFile ) throws $F55616 { $F2221 ( document , builder , xmlFile ) return ( parseConfiguration ( document ) ) ; }
private double empiricalHSIC ( TetradMatrix Ky , TetradMatrix Kx , TetradMatrix Kz , int m ) { TetradMatrix Kyx = Ky . times ( Kx ) ; TetradMatrix Kyz = Ky . times ( Kz ) ; TetradMatrix Kzx = Kz . times ( Kx ) ; TetradMatrix Kzreg = Kz . copy ( ) ; for ( $F119 ( i , m ) ) { double ent = ( Kzreg . get ( i , i ) + this . regularizer ) ; Kzreg . set ( i , i , ent ) ; } TetradMatrix A = Kzreg . inverse ( ) ; Kzreg = A . times ( A ) ; TetradMatrix Kyzzregzx = new TetradMatrix ( m , m ) ; A = Kyz . times ( Kzreg ) ; Kyzzregzx = A . times ( Kzx ) ; TetradMatrix Kyzzregzxzzregz = Kyzzregzx . copy ( ) ; Kyzzregzxzzregz = Kyzzregzx . times ( Kz ) ; A = Kyzzregzxzzregz . times ( Kzreg ) ; Kyzzregzxzzregz = A . times ( Kz ) ; double empHSIC = NUM00 ; for ( $F119 ( i , m ) ) { empHSIC += Kyx . get ( i , i ) ; empHSIC += ( - NUM00 * Kyzzregzx . get ( i , i ) ) ; empHSIC += Kyzzregzxzzregz . get ( i , i ) ; } empHSIC /= Math . pow ( m - NUM00 , NUM00 ) ; double Bz = NUM00 ; for ( int i = NUM00 ; i < ( m - NUM00 ) ; i ++ ) { for ( int j = ( i + NUM00 ) ; j < m ; j ++ ) { Bz += Math . pow ( Kz . get ( i , j ) , NUM00 ) ; Bz += Math . pow ( Kz . get ( j , i ) , NUM00 ) ; } } Bz = ( m * ( m - NUM00 ) ) / Bz ; empHSIC *= Bz ; return empHSIC ; }
public void create $F28786 ( rpfFilePaths , outputFile ) throws MakeTocException { create ( rpfFilePaths , outputFile , _BOOL ) ; }
private synchronized void postEvent ( EventInfo eventInfo ) $F36131 ( eventQueue , eventInfo , notifyAll )
public String chooseServerAlias ( String keyType , Principal [ ] issuers , Socket sock ) { return sunX509KeyManager . chooseServerAlias ( keyType , issuers , sock ) ; }
private void processBmpImage ( BufferedImage image ) { if ( ! isError ) { File outputFile = new File ( path , prefix + ( numPage + NUM00 ) + NUM00 ) ; try { $F107416 ( ImageIO , image , outputFile ) addTempFile ( outputFile ) ; addScanFile ( outputFile ) ; numPage ++ ; } catch ( IOException e ) { $F301 ( e ) endProcess ( _BOOL , _BOOL ) ; } } }
public PathHandler ( String path ) $F80218 ( this , Paths , path )
public boolean loadLines $F72 { boolean result = _BOOL ; try { m_parser . parse ( new InputSource ( m_reader ) , this ) ; result = _BOOL ; m_success = _BOOL ; } catch ( SAXException e ) { m_errorMessage = NUM00 ; $F5976 ( m_errorDescription , e ) } catch ( IOException e ) { m_errorMessage = NUM00 ; $F5976 ( m_errorDescription , e ) } return result ; }
private void loadIgnoreFile ( final String srcFolder ) { ignoreFile = IgnoreFile . load ( srcFolder ) ; if ( ignoreFile == null ) { loadDefaultExcludePattern ( srcFolder ) ; } }
public boolean removeArg ( final BOp arg ) { $F10057 ( arg ) if ( arg == this ) $F10056 if $F16914 ( args , arg ) $F27427 ( mutation , _BOOL ) return _BOOL ; }
public static boolean looksLikeAListStyleType ( String val ) { return LIST_TYPES . indexOf ( val ) >= NUM00 ; }
public PKCS10Attribute ( PKCS9Attribute attr ) { this . attributeId = attr . getOID ( ) ; this . attributeValue = attr . getValue ( ) ; }
public void createNote ( Note note ) { SQLiteDatabase db = getWritableDatabase ( ) ; String spannableAsHtml = Html . toHtml ( note . getSpannable ( ) ) ; String $F391645 ( date , dt ) ; $F20904 ( values ) values . put ( KEY_SPANNABLE_NOTE , spannableAsHtml ) ; values . put ( KEY_NOTE_TITLE , note . getTitle ( ) ) ; values . put ( KEY_IMAGE , BitmapConverter . getBytes ( note . getImage ( ) ) ) ; values . put ( KEY_DATE_UPDATED , date ) ; db . insert ( TABLE_NOTES , null , values ) ; $F59 ( db ) }
$F18164 ( msgs , seenXids , m , xid , assertTrue , assertFalse )
void addNext ( Node $F4203 n ) { nextNodes . add ( n ) ; Collections . sort ( nextNodes , isVertical ? verticalComparator : horizontalComparator ) ; }
protected void configDialogPropertyChange ( PropertyChangeEvent event ) { $F980 ( log ) firePropertyChange ( PropertyChangeID . CONFIG_CHANGE , event . getOldValue ( ) , event . getNewValue ( ) ) ; }
public final String readUTF $F72 throws IOException { return decodeUTF ( readUnsignedShort ( ) ) ; }
private void myAdd ( $F114083 l , int i ) $F207 ( l , i )
private void resetStateForGridTop $F72 { final int colCount = mColCount ; if $F36221 ( mItemTops , colCount ) { $F3936 ( mItemTops , colCount ) $F3936 ( mItemBottoms , colCount ) } $F3666 ( top , getPaddingTop ) Arrays . fill ( mItemTops , top ) ; Arrays . fill ( mItemBottoms , top ) ; mFirstPosition = NUM00 ; if ( mRestoreOffsets != null ) $F9952 ( Arrays , mRestoreOffsets ) }
public String testNextToken $F72 throws IOException { Token t = super . nextToken ( ) ; return Integer . toString ( t . type ) + NUM00 + t . content + NUM00 ; }
public static RepaintManager currentManager ( Component c ) { return currentManager ( AppContext . getAppContext ( ) ) ; }
private boolean isRecoverPointInitiator ( String portWWN ) $F298 ( portWWN , RECOVERPOINT_INITIATOR_PREFIX )
protected boolean isWFXMLChar ( String chardata , Character refInvalidChar ) { if ( chardata == null || $F1277 ( chardata ) ) { return _BOOL ; } $F7782 ( dataarray , chardata ) int datalength = dataarray . length ; if ( fIsXMLVersion11 ) { int i = NUM00 ; while ( i < datalength ) { if ( XML11Char . isXML11Invalid ( dataarray [ i ++ ] ) ) { char ch = dataarray [ i - NUM00 ] ; $F121844 ( XMLChar , ch , i , datalength , ch2 , dataarray ) refInvalidChar = new Character ( ch ) ; return _BOOL ; } } } else { int i = NUM00 ; while ( i < datalength ) { if ( XMLChar . isInvalid ( dataarray [ i ++ ] ) ) { char ch = dataarray [ i - NUM00 ] ; $F121844 ( XMLChar , ch , i , datalength , ch2 , dataarray ) refInvalidChar = new Character ( ch ) ; return _BOOL ; } } } return _BOOL ; }
$F1 public void send ( Buffer buffer ) $F21537 ( _outProxy , _outWriter , buffer , _BOOL )
$F1 public boolean eIsSet ( int featureID ) { switch ( featureID ) { case EipPackage . ROUTE__OWNED_ENDPOINTS : $F6441 ( ownedEndpoints ) case EipPackage . ROUTE__OWNED_CHANNELS : $F6441 ( ownedChannels ) case EipPackage . ROUTE__NAME : $F6439 ( NAME_EDEFAULT , name ) case EipPackage . ROUTE__EXCHANGE_TYPE : return exchangeType != EXCHANGE_TYPE_EDEFAULT ; } $F6444 ( super , featureID ) }
$F11763 ( listener , clickingListeners )
public void addSection ( final Section SECTION ) { $F77681 ( SECTION ) sections . add ( SECTION ) ; Collections . sort ( sections , new SectionComparator $F72 ) ; fireUpdateEvent ( SECTION_EVENT ) ; }
private int calculatePreferredWrapPosition ( $F1113 Editor editor , $F1113 CharSequence text , int tabSize , int spaceSize , int startLineOffset , int endLineOffset , int targetRangeEndOffset ) { boolean hasTabs = _BOOL ; boolean canOptimize = _BOOL ; boolean hasNonSpaceSymbols = _BOOL ; loop : for ( int i = startLineOffset ; i < Math . min ( endLineOffset , targetRangeEndOffset ) ; i ++ ) { $F1280 ( c , text , i ) switch ( c ) { $F1262 { hasTabs = _BOOL ; if ( hasNonSpaceSymbols ) { canOptimize = _BOOL ; $F217121 } } $F151814 $F1267 hasNonSpaceSymbols = _BOOL ; } } if ( ! hasTabs ) $F19580 ( wrapPositionForTextWithoutTabs , startLineOffset , endLineOffset , targetRangeEndOffset ) else if ( canOptimize ) $F16525 ( wrapPositionForTabbedTextWithOptimization , text , tabSize , startLineOffset , endLineOffset , targetRangeEndOffset ) else $F12218 ( wrapPositionForTabbedTextWithoutOptimization , editor , text , spaceSize , startLineOffset , endLineOffset , targetRangeEndOffset ) }
public void addAll ( OVector v ) { expandFor ( size + v . size - NUM00 , null ) ; System . arraycopy ( v . vector , NUM00 , vector , size - v . size , v . size ) ; }
private static boolean isOptimizableForDescendantIterator ( Compiler compiler , int stepOpCodePos , int stepIndex ) throws $F1872 { int stepType ; int stepCount = NUM00 ; boolean foundDorDS = _BOOL ; boolean foundSelf = _BOOL ; boolean foundDS = _BOOL ; int nodeTestType = OpCodes . NODETYPE_NODE ; while ( OpCodes . ENDOP != ( stepType = compiler . getOp ( stepOpCodePos ) ) ) { if ( nodeTestType != OpCodes . NODETYPE_NODE && nodeTestType != OpCodes . NODETYPE_ROOT ) return _BOOL ; stepCount ++ ; $F19679 ( stepCount , _BOOL ) boolean mightBeProximate = mightBeProximate ( compiler , stepOpCodePos , stepType ) ; if ( mightBeProximate ) return _BOOL ; switch ( stepType ) { case OpCodes . FROM_FOLLOWING : case OpCodes . FROM_FOLLOWING_SIBLINGS : case OpCodes . FROM_PRECEDING : case OpCodes . FROM_PRECEDING_SIBLINGS : case OpCodes . FROM_PARENT : case OpCodes . OP_VARIABLE : case OpCodes . OP_EXTFUNCTION : case OpCodes . OP_FUNCTION : case OpCodes . OP_GROUP : case OpCodes . FROM_NAMESPACE : case OpCodes . FROM_ANCESTORS : case OpCodes . FROM_ANCESTORS_OR_SELF : case OpCodes . FROM_ATTRIBUTES : case OpCodes . MATCH_ATTRIBUTE : case OpCodes . MATCH_ANY_ANCESTOR : case OpCodes . MATCH_IMMEDIATE_ANCESTOR : return _BOOL ; case OpCodes . FROM_ROOT : if ( NUM00 != stepCount ) return _BOOL ; $F597 case OpCodes . FROM_CHILDREN : if ( ! foundDS && ! ( foundDorDS && foundSelf ) ) return _BOOL ; $F597 case OpCodes . FROM_DESCENDANTS_OR_SELF : foundDS = _BOOL ; case OpCodes . FROM_DESCENDANTS : if ( NUM00 == stepCount ) return _BOOL ; foundDorDS = _BOOL ; $F597 case OpCodes . FROM_SELF : if ( NUM00 != stepCount ) return _BOOL ; foundSelf = _BOOL ; $F597 $F1267 throw new RuntimeException ( XSLMessages . createXPATHMessage ( XPATHErrorResources . ER_NULL_ERROR_HANDLER , $F19685 ( Integer , stepType ) ) ) ; } nodeTestType = compiler . getStepTestType ( stepOpCodePos ) ; int nextStepOpCodePos = compiler . getNextStepPos ( stepOpCodePos ) ; $F7995 ( nextStepOpCodePos ) if ( OpCodes . ENDOP != compiler . getOp ( nextStepOpCodePos ) ) { if ( compiler . countPredicates ( stepOpCodePos ) > NUM00 ) { return _BOOL ; } } stepOpCodePos = nextStepOpCodePos ; } return _BOOL ; }
public static void pipeAll ( InputStream inStr , OutputStream outStr ) throws IOException { $F2175 ( bs , BUFFER_SIZE ) int numRead ; while ( ( $F18803 ( numRead , inStr , bs ) ) >= NUM00 ) $F29756 ( outStr , bs , numRead ) }
public void addRule ( String ruleExpression , T resultIfMatched ) { mRuleMap . add ( new MimeMatcherRule ( ruleExpression , resultIfMatched ) ) ; }
protected abstract boolean validateNumber ( ConversationContext context , Number input ) ;
public void sendMessageUntilStopCount ( int stopCount ) { for ( int i = processedWorkerCount ; i < workers . size ( ) ; ++ i ) { ActorRef worker = workers . get ( i ) ; try $F31130 ( Thread ) catch ( InterruptedException e ) { logger . error ( NUM00 + e + NUM00 , e ) ; } worker . tell ( OperationWorkerMsgType . PROCESS_REQUEST , originalManager ) ; processedWorkerCount ++ ; if ( processedWorkerCount > stopCount ) $F932 $F97362 ( logger , processedWorkerCount , requestTotalCount , taskIdTrim ) } }
$F156045 ( msg , x , super , this )
public static $F5 stringToArrayList ( String string ) { return new $F201 ( $F34166 ( Arrays , string ) ) ; }
private String pickCharset $F72 { if ( charset != null ) { return charset ; } else if ( utf8Supported ) $F2455 else $F16566 ( System ) }
public void testToEngineeringStringPos $F72 $F12820 ( a , aNumber , result , assertEquals )
$F1 public void clear $F72 { if ( elementCount > NUM00 ) { elementCount = NUM00 ; $F17838 ( Arrays , elementData ) modCount ++ ; } }
public void addLayer ( final LayerDefinition layer ) { layer . setMap ( this ) ; layers . add ( layer ) ; }
private $F38669 readRules ( Reader reader ) throws $F248925 { $F20481 ( in , reader ) $F38669 rules = new $F255887 $F72 ; String line ; while $F443 ( line , in ) { $F63872 ( line ) $F1382 ( line ) $F12685 ( first , line ) boolean sign = _BOOL ; switch ( first ) { $F32808 ( sign , _BOOL ) $F32808 ( sign , _BOOL ) $F1262 $F1262 $F1262 $F598 $F248933 ( line ) } $F28924 ( regex , line ) if $F8415 ( LOG ) { $F248936 ( LOG , regex ) } Rule rule = createRule ( sign , regex ) ; rules . add ( rule ) ; } return rules ; }
$F1431 $F1 protected Object applyUpdatesToManagedData ( Object updates ) { boolean madeChanges = _BOOL ; $F3803 words = ( $F3803 ) updates ; $F556 ( log , words ) boolean ignoreCase = getIgnoreCase ( ) ; for ( String word : words ) { if ( ignoreCase ) word = $F131081 ( word , Locale ) ; if $F9793 ( managedWords , word ) { madeChanges = _BOOL ; $F10635 ( log , word ) } } return madeChanges ? managedWords : null ; }
protected void drawLabel ( Canvas canvas , String labelText , DefaultRenderer renderer , $F141966 prevLabelsBounds , int centerX , int centerY , float shortRadius , float longRadius , float currentAngle , float angle , int left , int right , int color , Paint paint , boolean line , boolean display ) { if ( renderer . isShowLabels ( ) || display ) { paint . setColor ( color ) ; double rAngle = Math . toRadians ( NUM00 - ( currentAngle + angle / NUM00 ) ) ; $F33859 ( sinValue , Math , rAngle ) $F54226 ( cosValue , Math , rAngle ) $F175108 ( x1 , Math , centerX , shortRadius , sinValue ) $F175108 ( y1 , Math , centerY , shortRadius , cosValue ) $F175108 ( x2 , Math , centerX , longRadius , sinValue ) $F175108 ( y2 , Math , centerY , longRadius , cosValue ) float size = renderer . getLabelsTextSize ( ) ; float extra = Math . max ( size / NUM00 , NUM00 ) ; $F175116 ( paint , Align ) if ( x1 > x2 ) { extra = - extra ; paint . setTextAlign ( Align . RIGHT ) ; } float xLabel = x2 + extra ; float yLabel = y2 ; float width = right - xLabel ; if ( x1 > x2 ) { width = xLabel - left ; } labelText = getFitText ( labelText , width , paint ) ; float widthLabel = paint . measureText ( labelText ) ; boolean okBounds = _BOOL ; while ( ! okBounds && line ) { boolean intersects = _BOOL ; $F2199 ( length , prevLabelsBounds ) for ( int j = NUM00 ; j < length && ! intersects ; j ++ ) { RectF prevLabelBounds = prevLabelsBounds . get ( j ) ; if ( prevLabelBounds . intersects ( xLabel , yLabel , xLabel + widthLabel , yLabel + size ) ) { intersects = _BOOL ; yLabel = Math . max ( yLabel , prevLabelBounds . bottom ) ; } } okBounds = ! intersects ; } if ( line ) { y2 = ( int ) ( yLabel - size / NUM00 ) ; canvas . drawLine ( x1 , y1 , x2 , y2 , paint ) ; canvas . drawLine ( x2 , y2 , x2 + extra , y2 , paint ) ; } else { $F5595 ( paint , Align ) } canvas . drawText ( labelText , xLabel , yLabel , paint ) ; if ( line ) { prevLabelsBounds . add ( new RectF ( xLabel , yLabel , xLabel + widthLabel , yLabel + size ) ) ; } } }
$F1 public void write ( char $F184368 , int off , int len ) { if ( ( off < NUM00 ) || ( off > c . length ) || ( len < NUM00 ) || ( ( off + len ) > c . length ) || ( ( off + len ) < NUM00 ) ) $F81129 else $F32905 ( len ) int newcount = count + len ; $F90660 ( newcount , buf , Arrays , Math ) System . arraycopy ( c , off , buf , count , len ) ; count = newcount ; }
$F1309 public static EpisodeMatchingResult detectEpisodeFromFilename ( File file ) { $F74568 ( LOGGER , file ) EpisodeMatchingResult result = new EpisodeMatchingResult $F72 ; $F20605 ( fileName , file ) result = parseString ( fileName ) ; Collections . sort ( result . episodes ) ; Matcher matcher = stackingMarkerPattern . matcher ( result . name ) ; result . stackingMarkerFound = matcher . matches ( ) ; $F586 ( LOGGER , result ) return result ; }
public static TypedOperation createArrayCreation ( ArrayType arrayType ) { $F17124 $F204 ( typeList ) ; typeList . add ( JavaTypes . INT_TYPE ) ; TypeTuple inputTypes = new TypeTuple ( typeList ) ; return new TypedTermOperation ( new ArrayCreation ( arrayType ) , inputTypes , arrayType ) ; }
public void fireEvent ( final SPARQLUpdateEvent e ) { if ( isReadOnly ( ) ) $F53552 $F10057 ( e ) $F19233 ( listeners ) final ISPARQLUpdateListener [ ] a = listeners . toArray ( new ISPARQLUpdateListener $F380 ) ; for ( ISPARQLUpdateListener l : a ) { final ISPARQLUpdateListener listener = l ; try { listener . updateEvent ( e ) ; } catch ( Throwable t ) { if ( InnerCause . isInnerCause ( t , InterruptedException . class ) ) $F9491 ( t ) log . error ( t , t ) ; } } }
public PreferenceBuilder < PreferenceClass > prefType ( Class < PreferenceClass > prefType ) { if $F2200 ( VALID_TYPES , prefType ) $F29526 ( prefType ) this . prefType = prefType ; return this ; }
private void expungeStaleEntries $F72 { for ( Object x ; ( x = queue . poll ( ) ) != null ; ) { synchronized ( queue ) { $F1431 $F44137 e = ( $F44137 ) x ; int i = indexFor ( e . hash , table . length ) ; $F44137 prev = table [ i ] ; $F44137 p = prev ; while ( p != null ) { $F44137 next = p . next ; if ( p == e ) { if ( prev == e ) table [ i ] = next ; else prev . next = next ; e . value = null ; size -- ; $F597 } prev = p ; p = next ; } } } }
protected boolean isNumeric ( String text ) { $F1382 ( text ) $F1749 ( tlen , text ) for ( $F119 ( i , tlen ) ) { if ( $F69553 ( Character , text , i ) == _BOOL ) { return _BOOL ; } } return _BOOL ; }
public static boolean isChar ( String desc ) $F74727 ( desc )
public RSAPublicKeyImpl $F97 ( encoded ) throws InvalidKeyException { decode ( encoded ) ; RSAKeyFactory . checkRSAProviderKeyLengths ( n . bitLength ( ) , e ) ; }
$F14370 ( calendar )
public boolean isClientAuthentication $F72 { return clientAuthentication ; }
private JPanel createImageFilePanel $F72 { $F58099 ( panel ) $F58103 ( panel , BoxLayout ) panel . add ( imageFileName ) ; $F154814 ( panel , Box ) panel . add ( new JButton ( openImageFile ) ) ; return panel ; }
void writeLine ( BufferedWriter writer , String line ) throws IOException $F64858 ( writer , line )
public Layer childAt ( int index ) $F8314 ( children , index )
private static void checkPermission $F72 { $F8108 ( security , System ) $F69732 ( security , modifyThreadPermission ) }
public static Function < Value , Value > ofValue $F72 { return VALUE ; }
public static String removeQuotes ( String s ) { $F1338 ( s ) $F9652 ( trimmed , s ) $F83314 ( trimmed ) int i = nextNonQuoteIndex ( trimmed , NUM00 , _BOOL ) ; int j = nextNonQuoteIndex ( trimmed , $F1092 ( trimmed ) , _BOOL ) ; return trimmed . substring ( i , j + NUM00 ) ; }
public static boolean isDefinedNSDecl ( SerializationHandler serializer , int attr , DTM dtm ) { if ( DTM . NAMESPACE_NODE == dtm . getNodeType ( attr ) ) { String prefix = dtm . getNodeNameX ( attr ) ; String uri = serializer . getNamespaceURIFromPrefix ( prefix ) ; if ( ( null != uri ) && uri . equals ( dtm . getStringValue ( attr ) ) ) return _BOOL ; } return _BOOL ; }
public void testUserDataHandlerNotifiedOfShallowClones $F72 { RecordingHandler handler = new RecordingHandler $F72 ; $F104177 ( name , handler ) $F104177 ( name , handler ) $F104177 ( standard , handler ) $F104177 ( waffles , handler ) Element clonedName = ( Element ) name . cloneNode ( _BOOL ) ; Attr clonedStandard = clonedName . getAttributeNode ( NUM00 ) ; $F2695 ( expected ) $F104187 ( expected , notification , NODE_CLONED , name , clonedName ) $F104187 ( expected , notification , NODE_CLONED , name , clonedName ) $F104187 ( expected , notification , NODE_CLONED , standard , clonedStandard ) assertEquals ( expected , handler . calls ) ; }
public DBasicConstraints $F157465 ( parent , value ) throws IOException $F157466 ( super , parent , setTitle , res , initComponents , prepopulateWithValue , value )
private static int lastIndexOf ( Object o , $F131 elements , int index ) { if ( o == null ) { for ( $F141 ( i , index ) ) if ( elements [ i ] == null ) return i ; } else { for ( $F141 ( i , index ) ) if $F145 ( o , elements , i ) return i ; } $F150 }
public FloatColumn ( int nrows , int capacity , float defaultValue ) { super ( $F41248 , new Float ( defaultValue ) ) ; $F49020 ( capacity , nrows ) $F189191 ( m_values , capacity ) Arrays . fill ( m_values , defaultValue ) ; m_size = nrows ; }
void readPRJ $F72 throws IOException { while ( _BOOL ) { $F27015 ( S , isr ) $F8249 ( S ) if $F3106 ( S ) $F665 } }
private void purgeOne $F72 { synchronized ( queue ) { WeakKey key = ( WeakKey ) queue . poll ( ) ; if ( key != null ) { super . remove ( key . getReferenced ( ) ) ; } } }
private void checkAlterPeriodConverters $F72 throws SecurityException { $F8108 ( sm , System ) if ( sm != null ) { sm . checkPermission ( new JodaTimePermission $F580 ) ; } }
public boolean equals ( final ArtifactCoordinates obj ) { return this == obj || obj != null && $F12737 ( groupId , obj ) && $F12737 ( artifactId , obj ) && $F12737 ( version , obj ) && $F12737 ( classifier , obj ) ; }
public synchronized void add $F7635 ( x , y , value ) { super . add ( x , y ) ; mValue . add ( value ) ; updateRange ( value ) ; }
private void checkMatrixDimensions ( Matrix B ) { if ( B . m != m || B . n != n ) $F825 }
public void importFromChange ( Change sourceChange ) { if ( sourceChange . revision ( ) > NUM00 ) { this . revisionId = new NumericLiteralImpl ( sourceChange . revision ( ) ) ; } if ( sourceChange . timestamp ( ) != null ) { Date date = sourceChange . timestamp ( ) ; Calendar c = Calendar . getInstance ( TimeZone . getTimeZone ( NUM00 ) , Locale . ROOT ) ; c . setTime ( date ) ; this . lastModified = new LiteralImpl ( DatatypeConverter . printDate ( c ) , XMLSchema . DATETIME ) ; } }
protected PrintWriter lineFileOut ( Document doc ) { return lineFileOut ; }
$F1 public Query newFuzzyQuery ( String text , int fuzziness ) { if ( settings . lowercaseExpandedTerms ( ) ) { text = text . toLowerCase ( settings . locale ( ) ) ; } $F220945 $F234234 ( bq ) ; bq . setDisableCoord ( _BOOL ) ; for ( Map . Entry < String , Float > entry : weights . entrySet ( ) ) { try { Query q = new FuzzyQuery ( new Term ( entry . getKey ( ) , text ) , fuzziness ) ; q . setBoost ( entry . getValue ( ) ) ; bq . add ( q , BooleanClause . Occur . SHOULD ) ; } catch ( RuntimeException e ) { rethrowUnlessLenient ( e ) ; } } return super . simplify ( bq . build ( ) ) ; }
public CallChainInfo ( SootMethod m , Stmt s , String type ) { this . type = type ; this . link = NUM00 ; this . method = m ; this . stmt = s ; calls = NUM00 ; if $F3057 ( type ) syscalls = NUM00 ; }
public void startPlayback $F72 { $F13527 ( Log , TAG ) if ( null == mRecordFile ) $F17931 ( Log , TAG ) mPlayer = new MediaPlayer $F72 ; try { mPlayer . setDataSource ( mRecordFile . getAbsolutePath ( ) ) ; Log . d ( TAG , $F62869 ( mRecordFile ) ) ; mPlayer . setOnCompletionListener ( this ) ; mPlayer . setOnErrorListener ( this ) ; $F97691 ( mPlayer ) $F13527 ( Log , TAG ) $F2346 ( mPlayer ) } catch ( IOException e ) { $F23815 ( Log , TAG , e ) setError ( ERROR_PLAYER_INTERNAL ) ; $F665 } catch ( IllegalArgumentException e ) { $F23815 ( Log , TAG , e ) setError ( ERROR_PLAYER_INTERNAL ) ; $F665 } catch ( SecurityException e ) { $F23815 ( Log , TAG , e ) setError ( ERROR_PLAYER_INTERNAL ) ; $F665 } catch ( IllegalStateException e ) { $F23815 ( Log , TAG , e ) setError ( ERROR_PLAYER_INTERNAL ) ; $F665 } setState ( STATE_PLAYBACK ) ; $F13527 ( Log , TAG ) }
public static final double sigma ( double a ) { return NUM00 / ( NUM00 + Math . exp ( - a ) ) ; }
private void deleteFilesInDir ( File dir ) { for ( $F3445 ( child , dir ) ) $F19636 ( child ) }
public static void notEmpty ( String string , String msg ) { if $F6036 ( string ) $F29415 ( msg ) }
public static void resetContext $F72 $F70200 ( contexts )
public static Object convertToParameterValues ( Object object ) { $F5363 collection ; if $F2485 ( object ) { collection = Arrays . asList ( $F2486 ( object ) ) ; } else if ( object instanceof Collection ) { collection = ( $F5363 ) object ; } else { $F10910 ( LOGGER ) return $F10279 ; } $F6689 s = new LinkedList $F1432 $F72 ; for ( Object o : collection ) { Object converted = convertToParameterValue ( o ) ; if $F2485 ( converted ) { s . addAll ( Arrays . asList ( $F2486 ( converted ) ) ) ; } else $F207 ( s , converted ) } return s . toArray ( $F103414 ( s ) ) ; }
public boolean logoutUser ( String username , HttpServletRequest req ) { return logoutUser ( username , req , _BOOL , _BOOL ) ; }
public static Operation createOperationToUpdateOrCreateNetworkInterface ( ComputeState existingComputeState , NetworkInterfaceState networkInterface , $F3803 tenantLinks , StatelessService service , boolean isPublic ) { String existingInterfaceLink = getExistingNetworkInterfaceLink ( existingComputeState , isPublic ) ; Operation networkInterfaceOperation = null ; if ( existingInterfaceLink == null ) { networkInterfaceOperation = createPostOperation ( service , networkInterface , NetworkInterfaceService . FACTORY_LINK ) ; } else { networkInterfaceOperation = createPatchOperation ( service , networkInterface , existingInterfaceLink ) ; } return networkInterfaceOperation ; }
public CodeSourceFacade ( final CodeSource codeSource ) { this . location = codeSource . getLocation ( ) ; final $F65927 certificates = codeSource . getCertificates ( ) ; if ( null == certificates || NUM00 == certificates . length ) { LOGGER . warning ( String . format ( NUM00 , codeSource ) ) ; this . firstCertificate = null ; $F665 } this . firstCertificate = ( X509Certificate ) certificates [ NUM00 ] ; }
$F112611 ( encoded , base64Data , len , removeWhiteSpace , FOURBYTE , numberQuadruple , b1 , b2 , b3 , b4 , d1 , d2 , d3 , d4 , i , encodedIndex , dataIndex , decodedData , isData , base64Alphabet , isPad , tmp , System )
public JdpBroadcaster ( InetAddress address , InetAddress srcAddress , int port , int ttl ) throws IOException , JdpException { this . addr = address ; this . port = port ; ProtocolFamily family = ( address instanceof Inet6Address ) ? StandardProtocolFamily . INET6 : StandardProtocolFamily . INET ; channel = DatagramChannel . open ( family ) ; channel . setOption ( StandardSocketOptions . SO_REUSEADDR , _BOOL ) ; channel . setOption ( StandardSocketOptions . IP_MULTICAST_TTL , ttl ) ; if ( srcAddress != null ) { NetworkInterface interf = NetworkInterface . getByInetAddress ( srcAddress ) ; try { channel . bind ( new InetSocketAddress ( srcAddress , NUM00 ) ) ; } catch ( UnsupportedAddressTypeException ex ) { throw new JdpException $F580 ; } channel . setOption ( StandardSocketOptions . IP_MULTICAST_IF , interf ) ; } }
$F136015 ( rrdFile )
public Vector rotateInDegree ( double degree ) { return rotateInRadian ( Math . toRadians ( degree ) ) ; }
$F13429 ( criteria , createCriteriaInternal , oredCriteria )
public static String toString ( final URI uri , final Charset encoding ) throws IOException { return IOUtils . toString ( uri . toURL ( ) , Charsets . toCharset ( encoding ) ) ; }
public void put ( int fieldNumber , FieldData data ) { int i = binarySearch ( fieldNumber ) ; if ( i >= NUM00 ) { mData [ i ] = data ; } else { i = ~ i ; $F27086 ( i , mSize , mData , DELETED , mFieldNumbers , fieldNumber , data ) if ( mGarbage && mSize >= mFieldNumbers . length ) { gc ( ) ; i = ~ binarySearch ( fieldNumber ) ; } if ( mSize >= mFieldNumbers . length ) { int n = idealIntArraySize ( mSize + NUM00 ) ; $F4120 ( nkeys , n ) FieldData [ ] nvalues = new FieldData [ n ] ; $F7057 ( System , mFieldNumbers , nkeys ) $F7057 ( System , mData , nvalues ) mFieldNumbers = nkeys ; mData = nvalues ; } $F27098 ( mSize , i , System , mFieldNumbers , mData ) mFieldNumbers [ i ] = fieldNumber ; mData [ i ] = data ; mSize ++ ; } }
void hideBorder $F72 { Insets insets = getInsets ( ) ; setBorder ( BorderFactory . createEmptyBorder ( insets . top , insets . left , insets . bottom , insets . right ) ) ; }
public void remove ( String btxn ) { synchronized ( filterMap ) { FilterProcessor oldfp = filterMap . get ( btxn ) ; if ( oldfp != null ) $F76730 ( globalExclusionFilters , oldfp , btxnFilters ) } }
public void add $F7635 ( weight , x , y ) { observations . add ( new WeightedObservedPoint ( weight , x , y ) ) ; }
public boolean addTagId ( final Long tagId ) { if ( tagId != null && tagId > NUM00 ) $F31974 ( tagIds , tagId ) return _BOOL ; }
public void supportTlsIntolerantServer ( SSLSocket socket ) { socket . setEnabledProtocols ( $F21904 ) ; }
$F20664 @ TargetApi ( Build . VERSION_CODES . KITKAT ) private static Platform findPlatform $F72 { try { try { $F32352 ( Class ) } catch ( ClassNotFoundException e ) { $F32352 ( Class ) } OptionalMethod < Socket > setUseSessionTickets = new OptionalMethod $F200 ( null , NUM00 , $F41254 ) ; OptionalMethod < Socket > setHostname = new OptionalMethod $F200 ( null , NUM00 , $F10062 ) ; Method trafficStatsTagSocket = null ; Method trafficStatsUntagSocket = null ; OptionalMethod < Socket > getAlpnSelectedProtocol = null ; OptionalMethod < Socket > setAlpnProtocols = null ; try { $F109041 ( trafficStats , Class ) trafficStatsTagSocket = trafficStats . getMethod ( NUM00 , $F43259 ) ; trafficStatsUntagSocket = trafficStats . getMethod ( NUM00 , $F43259 ) ; try { $F32352 ( Class ) getAlpnSelectedProtocol = new OptionalMethod $F200 ( $F144055 , NUM00 ) ; setAlpnProtocols = new OptionalMethod $F200 ( null , NUM00 , $F144055 ) ; } catch ( ClassNotFoundException ignored ) $F845 } catch ( ClassNotFoundException | NoSuchMethodException ignored ) $F845 return new Android ( setUseSessionTickets , setHostname , trafficStatsTagSocket , trafficStatsUntagSocket , getAlpnSelectedProtocol , setAlpnProtocols ) ; } catch ( ClassNotFoundException ignored ) $F845 try { String negoClassName = NUM00 ; $F96883 ( negoClass , Class , negoClassName ) $F248719 ( providerClass , Class , negoClassName ) $F248719 ( clientProviderClass , Class , negoClassName ) $F248719 ( serverProviderClass , Class , negoClassName ) Method putMethod = negoClass . getMethod ( NUM00 , SSLSocket . class , providerClass ) ; Method getMethod = negoClass . getMethod ( NUM00 , SSLSocket . class ) ; Method removeMethod = negoClass . getMethod ( NUM00 , SSLSocket . class ) ; return new JdkWithJettyBootPlatform ( putMethod , getMethod , removeMethod , clientProviderClass , serverProviderClass ) ; } catch ( ClassNotFoundException | NoSuchMethodException ignored ) $F845 return new Platform $F72 ; }
public static List < ExecutionEntity > orderFromRootToLeaf ( Collection < ExecutionEntity > executions ) { List < ExecutionEntity > orderedList = new ArrayList < ExecutionEntity > $F716 ( executions ) ; $F11293 ( previousIds ) for ( ExecutionEntity execution : executions ) { if ( execution . getParentId ( ) == null ) { orderedList . add ( execution ) ; $F42096 ( previousIds , execution ) } } while $F45088 ( orderedList , executions ) { for ( ExecutionEntity execution : executions ) { if ( ! $F60437 ( previousIds , execution ) && previousIds . contains ( execution . getParentId ( ) ) ) { orderedList . add ( execution ) ; $F42096 ( previousIds , execution ) } } } return orderedList ; }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
public void initTKF91 $F72 { int iNumNodes = iParent . length ; double iBeta [ ] = new double [ iNumNodes ] ; $F10254 ( iB , iNumNodes ) $F10254 ( iE , iNumNodes ) $F10254 ( iH , iNumNodes ) $F10254 ( iN , iNumNodes ) iInitial = NUM00 ; for ( $F119 ( i , iNumNodes ) ) { if ( i == iNumNodes - NUM00 ) { iBeta [ i ] = NUM00 / iMu ; iH [ i ] = NUM00 ; } else { iBeta [ i ] = Math . exp ( ( iLambda - iMu ) * iTau [ i ] ) ; iBeta [ i ] = ( NUM00 - iBeta [ i ] ) / ( iMu - iLambda * iBeta [ i ] ) ; iH [ i ] = Math . exp ( - iMu * iTau [ i ] ) * ( NUM00 - iLambda * iBeta [ i ] ) ; } iB [ i ] = iLambda * iBeta [ i ] ; iE [ i ] = iMu * iBeta [ i ] ; iN [ i ] = ( NUM00 - iMu * iBeta [ i ] ) * ( NUM00 - iB [ i ] ) - iH [ i ] ; iInitial *= ( NUM00 - iB [ i ] ) ; } }
public static String serializeExpression ( Node s ) { if ( s instanceof ASTTerm ) { ASTTerm a = ( ASTTerm ) s ; return ( a . isNotFlag ( ) ? NUM00 : NUM00 ) + NUM00 + a . getTerm ( ) ; } String prefix = NUM00 ; String suffix = NUM00 ; String join = NUM00 ; if ( s instanceof ASTExpression ) { ASTExpression a = ( ASTExpression ) s ; prefix = ( a . isNotFlag ( ) ? NUM00 : NUM00 ) + NUM00 ; suffix = NUM00 ; join = $F373138 ( a ) + NUM00 ; } $F10144 ( children ) for ( int i = NUM00 ; i < s . jjtGetNumChildren ( ) ; i ++ ) { children . add ( serializeExpression ( s . jjtGetChild ( i ) ) ) ; } return prefix + StringUtils . join ( children , join ) + suffix ; }
private void defineInternalFrameMenuButtons ( UIDefaults d ) { String p = NUM00 ; String c = PAINTER_PREFIX + NUM00 ; d . put ( p + NUM00 , new TitlePaneMenuButtonWindowNotFocusedState $F72 ) ; $F13782 ( d , p ) d . put ( p + NUM00 , new LazyPainter ( c , TitlePaneMenuButtonPainter . Which . ICON_ENABLED ) ) ; d . put ( p + NUM00 , new LazyPainter ( c , TitlePaneMenuButtonPainter . Which . ICON_DISABLED ) ) ; d . put ( p + NUM00 , new LazyPainter ( c , TitlePaneMenuButtonPainter . Which . ICON_MOUSEOVER ) ) ; d . put ( p + NUM00 , new LazyPainter ( c , TitlePaneMenuButtonPainter . Which . ICON_PRESSED ) ) ; d . put ( p + NUM00 , new LazyPainter ( c , TitlePaneMenuButtonPainter . Which . ICON_ENABLED_WINDOWNOTFOCUSED ) ) ; d . put ( p + NUM00 , new LazyPainter ( c , TitlePaneMenuButtonPainter . Which . ICON_MOUSEOVER_WINDOWNOTFOCUSED ) ) ; d . put ( p + NUM00 , new LazyPainter ( c , TitlePaneMenuButtonPainter . Which . ICON_PRESSED_WINDOWNOTFOCUSED ) ) ; $F13824 ( d , p ) }
public static $F28319 restoreFromCloneMethod ( URI storage , $F28584 clone , Boolean updateOpStatus , boolean isCG ) { return new $F28319 ( NUM00 , storage , clone , updateOpStatus , isCG ) ; }
$F1 public synchronized void removeDataSourceListener ( DataSourceListener dsl ) $F106 ( m_dataSourceListeners , dsl )
public String rightStr ( String str , int length ) { return str . substring ( Math . max ( NUM00 , str . length ( ) - length ) ) ; }
public void clearNameInUnoccupiedBlocks $F72 { for ( $F2277 ( i , mBlockEntries ) ) { Block b = mBlockEntries . get ( i ) ; if ( b . getState ( ) == Block . UNOCCUPIED ) { $F187587 ( b ) } } }
public static Object unserialize ( Data data ) { try { Class clazz = ( Class ) Class . forName ( $F28492 ( data ) ) ; if ( clazz . isEnum ( ) ) { return Enum . valueOf ( clazz , data . get ( NUM00 ) ) ; } else if ( clazz == Vector3D . class ) { return new Vector3D ( data . get ( NUM00 ) , data . get ( NUM00 ) , data . get ( NUM00 ) ) ; } else if ( clazz == Vector2D . class ) { return new Vector2D ( data . get ( NUM00 ) , ( double ) data . get ( NUM00 ) ) ; } else $F8587 ( unserialize , clazz , data ) } catch ( Exception e ) { throw new DataException ( e ) ; } }
public static void onGridStop $F72 throws InterruptedException { synchronized ( mux ) { $F7546 ( gridCnt ) -- gridCnt ; Thread timer0 = timer ; if ( gridCnt == NUM00 && timer0 != null ) { timer = null ; $F7589 ( timer0 ) $F14454 ( timer0 ) } } }
public void pushTemplateFolder $F116884 ( folderName ) throws IOException { myLastTemplateFolders . push ( resolveName ( folderName ) ) ; }
public void printDepthFirst $F72 { print ( new DepthFirstEnumerator ( _firstNode ) ) ; }
protected void drawHorizontalBezier ( Canvas c , ILineDataSet dataSet ) { Transformer trans = mChart . getTransformer ( dataSet . getAxisDependency ( ) ) ; int entryCount = dataSet . getEntryCount ( ) ; Entry entryFrom = dataSet . getEntryForXIndex ( ( mMinX < NUM00 ) ? NUM00 : mMinX , DataSet . Rounding . DOWN ) ; Entry entryTo = dataSet . getEntryForXIndex ( mMaxX , DataSet . Rounding . UP ) ; int diff = ( entryFrom == entryTo ) ? NUM00 : NUM00 ; int minx = Math . max ( dataSet . getEntryIndex ( entryFrom ) - diff , NUM00 ) ; int maxx = Math . min ( Math . max ( minx + NUM00 , dataSet . getEntryIndex ( entryTo ) + NUM00 ) , entryCount ) ; float phaseX = Math . max ( NUM00 , Math . min ( NUM00 , mAnimator . getPhaseX ( ) ) ) ; float phaseY = mAnimator . getPhaseY ( ) ; $F2268 ( cubicPath ) int size = ( int ) Math . ceil ( ( maxx - minx ) * phaseX + minx ) ; if ( size - minx >= NUM00 ) { Entry prev = dataSet . getEntryForIndex ( minx ) ; Entry cur = prev ; cubicPath . moveTo ( cur . getXIndex ( ) , cur . getVal ( ) * phaseY ) ; for ( int j = minx + NUM00 , count = Math . min ( size , entryCount ) ; j < count ; j ++ ) { prev = dataSet . getEntryForIndex ( j - NUM00 ) ; cur = dataSet . getEntryForIndex ( j ) ; final float cpx = ( float ) ( prev . getXIndex ( ) ) + ( float ) ( cur . getXIndex ( ) - prev . getXIndex ( ) ) / NUM00 ; cubicPath . cubicTo ( cpx , prev . getVal ( ) * phaseY , cpx , cur . getVal ( ) * phaseY , cur . getXIndex ( ) , cur . getVal ( ) * phaseY ) ; } } if ( dataSet . isDrawFilledEnabled ( ) ) { $F2268 ( cubicFillPath ) cubicFillPath . addPath ( cubicPath ) ; drawCubicFill ( mBitmapCanvas , dataSet , cubicFillPath , trans , minx , size ) ; } $F14782 ( mRenderPaint , dataSet ) mRenderPaint . setStyle ( Paint . Style . STROKE ) ; trans . pathValueToPixel ( cubicPath ) ; mBitmapCanvas . drawPath ( cubicPath , mRenderPaint ) ; mRenderPaint . setPathEffect ( null ) ; }
public void addEvent ( SimEvent newEvent ) { $F23206 ( eventTime , newEvent ) if ( eventTime >= maxTime ) { list . add ( newEvent ) ; maxTime = eventTime ; $F665 } ListIterator < SimEvent > iterator = list . listIterator ( ) ; SimEvent event ; while $F2921 ( iterator ) { $F45366 ( event , iterator ) if $F14791 ( event , eventTime ) { $F45359 ( iterator ) iterator . add ( newEvent ) ; $F665 } } list . add ( newEvent ) ; }
public DbSchemaEjbGenerator ( GeneratedTables genTables , SchemaElement schemaElement ) { this ( genTables , schemaElement , CollectionType . COLLECTION , _BOOL , _BOOL , _BOOL ) ; }
$F1 public void initialize $F72 { board = null ; switch ( simPaneCtrl . getParamValueIndex ( PARAM_INIT_CONF ) ) { $F3366 board = new EightPuzzleBoard ( new int [ ] { NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ) ; $F597 $F3366 board = new EightPuzzleBoard ( new int [ ] { NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ) ; $F597 $F3366 board = new EightPuzzleBoard ( new int [ ] { NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ) ; $F597 $F3366 board = new EightPuzzleBoard ( new int [ ] { NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ) ; Random r = new Random $F30 ( System ) ; for ( $F6268 ( i ) ) { switch ( r . nextInt ( NUM00 ) ) { $F3366 board . moveGapUp ( ) ; $F597 $F3366 board . moveGapDown ( ) ; $F597 $F3366 board . moveGapLeft ( ) ; $F597 $F3366 board . moveGapRight ( ) ; $F597 } } } stateViewCtrl . initialize ( board ) ; }
protected abstract void onOpen ( HTableInterface tbl , Scan scan ) throws IOException ;
private static void addAbbreviation ( String primitive , String abbreviation ) { abbreviationMap . put ( primitive , abbreviation ) ; reverseAbbreviationMap . put ( abbreviation , primitive ) ; }
private void initTreeMap $F72 { $F23170 ( entityType ) if $F21935 ( entityType ) { imageMap = RotatingEntityManager . getCircle ( ) ; } if $F21935 ( entityType ) { imageMap = RotatingEntityManager . getMouse ( ) ; } else if $F21935 ( entityType ) { imageMap = RotatingEntityManager . getRotatingTileset ( NUM00 , NUM00 ) ; } else if $F21935 ( entityType ) { imageMap = RotatingEntityManager . getRotatingTileset ( NUM00 , NUM00 ) ; } else if $F21935 ( entityType ) { imageMap = RotatingEntityManager . getRotatingTileset ( NUM00 , NUM00 ) ; } else if $F21935 ( entityType ) { imageMap = RotatingEntityManager . getRotatingTileset ( NUM00 , NUM00 ) ; } else if $F21935 ( entityType ) { imageMap = RotatingEntityManager . getRotatingTileset ( NUM00 , NUM00 ) ; } else if $F21935 ( entityType ) { imageMap = RotatingEntityManager . getRotatingTileset ( NUM00 , NUM00 ) ; } else if $F21935 ( entityType ) { imageMap = RotatingEntityManager . getRotatingTileset ( NUM00 , NUM00 ) ; } else if $F21935 ( entityType ) { imageMap = RotatingEntityManager . getRotatingTileset ( NUM00 , NUM00 ) ; } else if $F21935 ( entityType ) { imageMap = RotatingEntityManager . getRotatingTileset ( NUM00 , NUM00 ) ; } update ( ) ; }
public static File locateReplicatorHomeDir $F72 { if ( replicatorHomeDir == null ) { $F7601 ( replicatorHome , System , HOME_DIR ) if ( replicatorHome == null ) $F109927 ( replicatorHome , System ) $F24661 ( replicatorHomeDir , replicatorHome ) if $F4926 ( replicatorHomeDir ) { throw new ServerRuntimeException ( NUM00 + replicatorHomeDir ) ; } } return replicatorHomeDir ; }
public StringData ( String data ) { m_data = data ; }
void writeRepeatedSqr ( DD xdd ) { if ( xdd . ge ( DD . valueOf ( NUM00 ) ) ) $F824 int count = NUM00 ; while ( xdd . doubleValue ( ) > NUM00 ) { count ++ ; if ( count == NUM00 ) count = count ; $F50466 ( x , xdd ) DD xSqr = xdd . sqr ( ) ; $F1822 ( s , xSqr ) $F23375 ( xSqr2 , DD , s ) xdd = xSqr ; } }
public $F21637 append ( float f ) $F21638 ( internal , f , this )
public static final void open ( File file ) throws NoSuchMethodException { if ( Platform . isMacOSX ( ) ) { execArgs ( $F20268 ( file ) ) ; } else if ( Platform . isWindows ( ) ) { if $F3444 ( file ) { execArgs ( $F20268 ( file ) ) ; } else { execArgs ( $F20268 ( file ) ) ; } } else if ( Platform . isUnix ( ) && hasUnixCommand ( NUM00 ) ) { $F31227 ( execArgs , file ) } else if ( Platform . isUnix ( ) && hasUnixCommand ( NUM00 ) ) { $F31227 ( execArgs , file ) } else if ( Platform . isSolaris ( ) && file . isDirectory ( ) ) { execArgs ( NUM00 , NUM00 , file . getAbsolutePath ( ) ) ; } else { throw new NoSuchMethodException $F580 ; } }
$F1 public String testDestination ( Location destination , Track track ) { String status = super . testDestination ( destination , track ) ; if ( ! status . equals ( Track . OKAY ) ) { return status ; } $F1933 ( track , status ) return track . checkSchedule ( this ) ; }
public void close $F72 throws $F3258 { flushBuffer ( ) ; $F59 ( m_os ) }
private static $F806 norm ( String path ) { $F6542 ( elements , path ) $F8728 ( stack ) for ( String e : elements ) { if ( e . isEmpty ( ) || e . equals ( NUM00 ) ) $F598 if $F3057 ( e ) { if $F5973 ( stack ) $F30606 ( stack ) else $F1274 $F598 } stack . add ( e ) ; } $F14862 ( stack ) }
static Random random $F72 { if ( null == LUCENE_TEST_CASE ) $F1337 else { try { $F193147 ( randomMethod , LUCENE_TEST_CASE ) return ( Random ) randomMethod . invoke ( null ) ; } $F54147 ( e ) } }
protected String record ( String deployment ) { deployments . add ( deployment ) ; return deployment ; }
protected void onBeforeStart ( BundleContext ctx ) $F845
$F1 public void onSuccess ( DLSN value ) { if ( value . getLogSegmentSequenceNo ( ) != currentLogSegmentSeqNo ) { LOG . error ( NUM00 , value . getLogSegmentSequenceNo ( ) , currentLogSegmentSeqNo ) ; errorsFound . set ( _BOOL ) ; } if ( verifyEntryId && value . getEntryId ( ) != currentEntryId ) { LOG . error ( NUM00 , value . getEntryId ( ) , currentEntryId ) ; errorsFound . set ( _BOOL ) ; } $F38783 ( syncLatch ) }
private static void shutDownMySQLAbandonedConnectionCleanupThread ( ClassLoader classLoader ) { try { $F33929 ( mysqlCleanupThreadClass ) try { mysqlCleanupThreadClass = classLoader . loadClass ( NUM00 ) ; } catch ( ClassNotFoundException e ) { LOG . trace ( NUM00 + NUM00 , e ) ; $F665 } $F193147 ( shutdownMethod , mysqlCleanupThreadClass ) $F188761 ( shutdownMethod ) $F980 ( LOG ) } catch ( Throwable e ) $F23016 ( LOG , e ) }
public void write $F97 ( buffer ) { if ( isFinal ) { $F18143 ( log ) $F665 } $F148496 ( newData , data , buffer ) $F7057 ( System , data , newData ) $F11244 ( System , buffer , newData , data ) data = newData ; }
public String parse ( String controlTemplate , Context controlContext ) throws Exception { this . controlContext = controlContext ; fillContextDefaults ( this . controlContext ) ; fillContextProperties ( this . controlContext ) ; Template template = getTemplate ( controlTemplate , inputEncoding ) ; $F29429 ( sw ) template . merge ( controlContext , sw ) ; $F92 ( sw ) }
$F9749 ( namespace , attName , attValue , xmlWriter , registerPrefix )
protected boolean onCreateCustomFromTag ( XmlPullParser parser , T parent , final AttributeSet attrs ) throws XmlPullParserException { return _BOOL ; }
public static long writeFile ( String path , $F96 jpeg , ExifInterface exif ) throws IOException { if ( ! createDirectoryIfNeeded ( path ) ) { $F110901 ( Log , TAG , path ) $F150 } if ( exif != null ) { exif . writeExif ( jpeg , path ) ; $F1705 ( f , path ) $F55826 ( f ) } else $F8587 ( writeFile , path , jpeg ) }
private boolean checkForImageServers $F72 { boolean imageServerExists = _BOOL ; $F28584 imageServerURIList = _dbClient . queryByType ( ComputeImageServer . class , _BOOL ) ; ArrayList < URI > tempList = Lists . newArrayList ( imageServerURIList . iterator ( ) ) ; $F159338 ( tempList , imageServerExists , _BOOL ) return imageServerExists ; }
final long now $F72 { return System . nanoTime ( ) ; }
public void removeExtension ( String ext ) { synchronized ( exts ) { $F37156 ( ext ) exts . remove ( ext ) ; } }
protected SuballocatedIntVector findNamespaceContext ( int elementNodeIndex ) { if ( null != m_namespaceDeclSetElements ) { int wouldBeAt = findInSortedSuballocatedIntVector ( m_namespaceDeclSetElements , elementNodeIndex ) ; if ( wouldBeAt >= NUM00 ) return $F28383 ( m_namespaceDeclSets , wouldBeAt ) ; $F28386 ( wouldBeAt ) wouldBeAt = - NUM00 - wouldBeAt ; int candidate = m_namespaceDeclSetElements . elementAt ( -- wouldBeAt ) ; int ancestor = _parent ( elementNodeIndex ) ; if ( wouldBeAt == NUM00 && candidate < ancestor ) { int rootHandle = getDocumentRoot ( makeNodeHandle ( elementNodeIndex ) ) ; int rootID = makeNodeIdentity ( rootHandle ) ; int uppermostNSCandidateID ; if ( getNodeType ( rootHandle ) == DTM . DOCUMENT_NODE ) { int ch = _firstch ( rootID ) ; uppermostNSCandidateID = ( ch != DTM . NULL ) ? ch : rootID ; } else { uppermostNSCandidateID = rootID ; } if ( candidate == uppermostNSCandidateID ) { return $F28383 ( m_namespaceDeclSets , wouldBeAt ) ; } } while ( wouldBeAt >= NUM00 && ancestor > NUM00 ) { if ( candidate == ancestor ) { return $F28383 ( m_namespaceDeclSets , wouldBeAt ) ; } else if ( candidate < ancestor ) { do $F8576 ( ancestor , _parent ) while ( candidate < ancestor ) ; } else if ( wouldBeAt > NUM00 ) { candidate = m_namespaceDeclSetElements . elementAt ( -- wouldBeAt ) ; } else $F597 } } $F1274 }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
public void addObserver ( Observer observer ) { $F896 ( observer ) synchronized ( this ) $F24128 ( observers , observer ) }
public static void closeOutputStream ( OutputStream stream , String tag ) $F144343 ( stream , Log , tag , e )
protected double distance ( int i , int k , $F2027 designations ) { return Math . sqrt ( Math . max ( selfK [ i ] - NUM00 / ownes [ k ] * evalSumK ( i , k , designations ) + meanSqrdNorms [ k ] * normConsts [ k ] , NUM00 ) ) ; }
public StringBuffer format ( Object pat , StringBuffer result , FieldPosition fpos ) { String pattern = processPattern ( ( String ) pat ) ; int lastOffset = NUM00 ; for ( $F50176 ( i , maxOffset ) ) { int offidx = offsets [ i ] ; result . append ( pattern . substring ( lastOffset , offsets [ i ] ) ) ; lastOffset = offidx ; String key = arguments [ i ] ; String obj ; if $F4012 ( key ) { obj = formatObject ( processKey ( key ) ) ; } else { result . append ( this . ldel ) ; result . append ( this . rdel ) ; $F598 } if ( obj == null ) { String lessgreedy = ldel + key ; $F162792 ( fromright , lessgreedy , ldel ) if ( fromright > NUM00 ) { String $F162564 ( newkey , lessgreedy , fromright , ldel ) ; String newsubst = formatObject ( processKey ( newkey ) ) ; if ( newsubst != null ) { obj = lessgreedy . substring ( NUM00 , fromright ) + newsubst ; } } } if ( obj == null ) { if ( throwex ) $F825 else { obj = ldel + key + rdel ; } } result . append ( obj ) ; } result . append ( $F83851 ( pattern , lastOffset ) ) ; return result ; }
public void add ( String keyword , byte id ) { int key = getStringMapKey ( keyword ) ; map [ key ] = new Keyword ( keyword . toCharArray ( ) , id , map [ key ] ) ; }
void release ( Object owner , Field field ) { $F8435 fields = owners . get ( owner ) ; if ( fields != null ) { release ( ) ; Integer count = fields . get ( field . toGenericString ( ) ) ; if ( -- count > NUM00 ) { fields . put ( field . toGenericString ( ) , count ) ; } else { fields . remove ( field . toGenericString ( ) ) ; } } if $F171402 ( fields ) $F106 ( owners , owner ) }
public static List < DashboardDto > transformToDto ( List < Dashboard > dashboards ) { $F3758 ( dashboards , Status ) List < DashboardDto > result = new ArrayList < DashboardDto > $F72 ; for ( Dashboard dashboard : dashboards ) $F3762 ( result , transformToDto , dashboard ) return result ; }
static Executor screenExecutor ( Executor e ) { if ( ! useCommonPool && e == ForkJoinPool . commonPool ( ) ) return asyncPool ; $F61745 ( e ) return e ; }
public void addGroupPropertiesListener ( GroupPropertiesListener groupPropertiesListener ) $F207 ( groupPropertiesListeners , groupPropertiesListener )
public static void editGlobalFunctionComment ( final AbstractSQLProvider provider , final INaviFunction function , final Integer commentId , final Integer userId , final String newComment ) throws CouldntSaveDataException { PostgreSQLCommentFunctions . editComment ( provider , commentId , userId , newComment ) ; }
public void load ( Element element , Object o ) $F21338 ( log )
public synchronized void clearSessions ( Context context , Boolean clearCredentials ) { synchronized ( instance ) { while $F3817 ( mMXSessions ) { clearSession ( context , mMXSessions . get ( NUM00 ) , clearCredentials ) ; } } }
public boolean doesEntryExists ( SSOToken token , String entryDN ) { try { PersistentObject po = UMSObject . getObject ( internalToken , new Guid ( entryDN ) ) ; } catch ( UMSException ue ) { if $F1731 ( entryDN ) { if $F6299 ( debug ) { debug . message ( NUM00 + NUM00 , ue ) ; } } return _BOOL ; } return _BOOL ; }
private static $F1469 yy_unpack_cmap ( String packed ) { $F11577 ( map ) int i = NUM00 ; int j = NUM00 ; while ( i < NUM00 ) { $F52835 ( count , packed , i ) $F52837 ( value , packed , i ) do map [ j ++ ] = value ; while ( -- count > NUM00 ) ; } return map ; }
$F91084
private static int hashWrapperName ( String xn ) { if $F3599 ( xn ) $F1083 return ( NUM00 * xn . charAt ( NUM00 ) + xn . charAt ( NUM00 ) ) % NUM00 ; }
$F1 public final void startElement ( final String ns , final String lName , final String qName , final Attributes list ) throws SAXException { $F89266 ( name , lName , qName ) $F1350 ( sb , match ) if $F4012 ( match ) $F86 ( sb ) sb . append ( name ) ; $F6947 ( match , sb ) $F89270 ( r , RULES , match ) if ( r != null ) { r . begin ( name , list ) ; } }
public boolean isString ( String key ) { Object val = get ( key ) ; return val instanceof String ; }
private void createPRWithTotalNumPropSetList ( List vmList , int startIndexForRegion , int endIndexForRegion , int localMaxMemory , int redundancy ) { $F10531 ( nodeIterator , vmList ) while $F2921 ( nodeIterator ) { $F90160 ( vm , nodeIterator ) vm . invoke ( createMultiplePRWithTotalNumBucketPropSet ( prPrefix , startIndexForRegion , endIndexForRegion , redundancy , localMaxMemory , NUM00 ) ) ; } }
public Zdiagmat ( Zmat A , int k ) throws JampackException { Parameters . BaseIndexNotChangeable = _BOOL ; basex = Parameters . BaseIndex ; if ( k >= NUM00 ) { if ( k >= A . ncol ) { throw new JampackException $F580 ; } order = Math . min ( A . nrow , A . ncol - k ) ; $F10254 ( re , order ) $F10254 ( im , order ) for ( $F119 ( i , order ) ) { re [ i ] = A . re [ i ] [ i + k ] ; im [ i ] = A . im [ i ] [ i + k ] ; } } else { k = - k ; if ( k >= A . nrow ) { throw new JampackException $F580 ; } order = Math . min ( A . nrow - k , A . ncol ) ; $F10254 ( re , order ) $F10254 ( im , order ) for ( $F119 ( i , order ) ) { re [ i ] = A . re [ i + k ] [ i ] ; im [ i ] = A . im [ i + k ] [ i ] ; } } getProperties ( ) ; }
protected void checkAntVersion ( Hashtable h ) { $F59851 ( h ) try { final String ANT_VERSION_CLASS = NUM00 ; final String ANT_VERSION_METHOD = NUM00 ; $F59875 $F59855 ( clazz , ObjectFactory , ANT_VERSION_CLASS , _BOOL ) $F59876 ( method , clazz , ANT_VERSION_METHOD , noArgs ) Object returnValue = $F48029 ( method ) ; h . put ( VERSION + NUM00 , ( String ) returnValue ) ; } catch ( Exception e ) { h . put ( VERSION + NUM00 , CLASS_NOTPRESENT ) ; } }
public void buildNetwork $F72 { Neuron firstNeuron = new Neuron ( network , DEFAULT_NEURON_TYPE ) ; $F372817 currentLayer = new ArrayList $F257385 $F72 ; firstNeuron . setPosition ( initialPosition ) ; currentLayer . add ( firstNeuron ) ; int numNeuronsLastLayer = ( int ) Math . pow ( numBrachesPerNeuron , numLayers ) ; double totalSpace = numNeuronsLastLayer * horizontalSpacing ; for ( $F9993 ( layerIndex , numLayers ) ) { $F372817 tempList = new ArrayList $F257385 $F72 ; double layerSpacing = totalSpace / ( int ) Math . pow ( numBrachesPerNeuron , layerIndex ) ; double branchWidth = layerSpacing * ( numBrachesPerNeuron - NUM00 ) ; for ( Neuron baseNeuron : currentLayer ) { network . addNeuron ( baseNeuron ) ; double initialXOffset = branchWidth / NUM00 ; for ( $F119 ( j , numBrachesPerNeuron ) ) { Neuron targetNeuron = new Neuron ( network , new LinearRule $F72 ) ; targetNeuron . setLocation ( baseNeuron . getX ( ) - initialXOffset + ( j * layerSpacing ) , initialPosition . y - ( layerIndex * verticalSpacing ) ) ; tempList . add ( targetNeuron ) ; network . addNeuron ( targetNeuron ) ; targetNeuron . setUpdatePriority ( layerIndex ) ; Synapse synapse = new Synapse ( network , baseNeuron , targetNeuron , new StaticSynapseRule $F72 ) ; network . addSynapse ( synapse ) ; } } currentLayer = tempList ; } }
private static boolean areEqual ( int fromIndex , CharSequence left , CharSequence right ) { if ( left == right ) return _BOOL ; if $F54923 ( left , right ) return _BOOL ; $F1749 ( n , left ) if $F8732 ( right , n ) return _BOOL ; for ( int i = n ; i > fromIndex ; ) { if ( Character . toUpperCase ( left . charAt ( -- i ) ) != $F29169 ( Character , right , i ) ) return _BOOL ; } return _BOOL ; }
public void testCase12 $F72 { $F202702 int bSign = - NUM00 ; $F15143 BigInteger aNumber = BigInteger . ZERO ; $F3023 ( bNumber , bSign , bBytes ) $F88893 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public Enumeration productions $F72 $F10806 ( _productions )
public void addTightSourceNode ( ASTNode reference ) { fTightSourceRangeNodes . add ( reference ) ; List $F223737 properties = reference . structuralPropertiesForType ( ) ; for ( Iterator $F223737 iterator = properties . iterator ( ) ; iterator . hasNext ( ) ; ) { StructuralPropertyDescriptor descriptor = iterator . next ( ) ; if ( descriptor . isChildProperty ( ) ) { ASTNode child = ( ASTNode ) reference . getStructuralProperty ( descriptor ) ; if ( child != null && isExtending ( child , reference ) ) { addTightSourceNode ( child ) ; } } else if ( descriptor . isChildListProperty ( ) ) { List < ? extends ASTNode > children = ( List < ? extends ASTNode > ) reference . getStructuralProperty ( descriptor ) ; for ( Iterator < ? extends ASTNode > iterator2 = children . iterator ( ) ; iterator2 . hasNext ( ) ; ) { ASTNode child = iterator2 . next ( ) ; if ( isExtending ( child , reference ) ) { addTightSourceNode ( child ) ; } } } } }
protected boolean isEventDisabled ( XEvent e ) { switch ( e . get_type ( ) ) { case XConstants . ConfigureNotify : return _BOOL ; case XConstants . EnterNotify : case XConstants . LeaveNotify : return _BOOL ; $F1267 return super . isEventDisabled ( e ) ; } }
public DJarInfo ( JFrame parent ) throws IOException { this ( parent , res . getString ( NUM00 ) , ModalityType . DOCUMENT_MODAL ) ; }
protected void transformPointArrayNoTouch $F74143 ( pts ) { mMatrixValueToPx . mapPoints ( pts ) ; mMatrixOffset . mapPoints ( pts ) ; }
private void convertEscapedFunction ( final StringBuilder target , final CharSequence escapedFunction ) throws FBSQLParseException { final String templateResult = FBEscapedFunctionHelper . convertTemplate ( escapedFunction . toString ( ) , mode ) ; target . append ( templateResult != null ? templateResult : escapedFunction ) ; }
$F1 public final String toString $F72 { if ( stringRep == null ) { $F83 ( buffer ) buffer . append ( this . name ) ; $F84 ( buffer ) buffer . append ( Integer . toString ( this . defaultPort ) ) ; $F6947 ( stringRep , buffer ) } return stringRep ; }
public void addListener ( ImsSessionListener listener ) $F207 ( mListeners , listener )
public int checkBookiesUp ( int count , int timeout ) throws Exception { ZooKeeper zkc = connectZooKeeper ( zkHost , zkPort , zkTimeoutSec ) ; try { int mostRecentSize = NUM00 ; for ( $F119 ( i , timeout ) ) { try { $F3803 children = zkc . getChildren ( NUM00 , _BOOL ) ; $F36382 ( children ) $F8935 ( mostRecentSize , children ) if ( ( mostRecentSize > count ) || LOG . isDebugEnabled ( ) ) { LOG . info ( NUM00 + mostRecentSize + NUM00 + NUM00 + count ) ; if ( ( mostRecentSize > count ) || LOG . isTraceEnabled ( ) ) { for ( String child : children ) $F10090 ( LOG , child ) } } $F15290 ( mostRecentSize , count ) } catch ( KeeperException e ) $F845 $F9470 ( Thread ) } return mostRecentSize ; } $F3229 ( zkc ) }
public static IPath stampToPath ( final long stamp ) { fgCalendar . setTimeInMillis ( stamp ) ; final StringBuffer buffer = new StringBuffer $F989 ; buffer . append ( $F21621 ( fgCalendar , Calendar ) ) ; buffer . append ( IPath . SEPARATOR ) ; buffer . append ( $F21623 ( fgCalendar , Calendar ) + NUM00 ) ; buffer . append ( IPath . SEPARATOR ) ; buffer . append ( fgCalendar . get ( Calendar . WEEK_OF_YEAR ) ) ; return new Path $F3362 ( buffer ) ; }
private void addPingTimeData ( long sample ) { $F8934 ( lastPingTimesLock ) try { if ( lastPingTimes == null ) { $F11125 ( lastPingTimes , PING_MOVING_AVERAGE_WINDOW ) Arrays . fill ( lastPingTimes , sample ) ; } else { System . arraycopy ( lastPingTimes , NUM00 , lastPingTimes , NUM00 , lastPingTimes . length - NUM00 ) ; $F41606 ( lastPingTimes , sample ) } } $F796 ( lastPingTimesLock ) }
public void printUserMessage ( UserMessage message ) { User user = message . user ; boolean ignored = message . ignored_compact ; if ( ignored ) { printCompact ( NUM00 , user ) ; $F665 } Color color = message . color ; boolean action = message . action ; String text = message . text ; TagEmotes emotes = message . emotes ; boolean highlighted = message . highlighted ; if ( message . whisper && message . action ) { color = StyleConstants . getForeground ( styles . info ( ) ) ; highlighted = _BOOL ; } closeCompactMode ( ) ; MutableAttributeSet style ; if ( highlighted ) { style = styles . highlight ( color ) ; } else { style = styles . standard ( ) ; } print ( getTimePrefix ( ) , style ) ; printUser ( user , action , message . whisper , message . id ) ; if ( ! highlighted && action && styles . actionColored ( ) ) { style = styles . standard ( user . getDisplayColor ( ) ) ; } printSpecials ( text , user , style , emotes , _BOOL , message . bits > NUM00 ) ; printNewline ( ) ; }
public boolean connectImpl ( String address , int port ) throws IOException { _socketTimeout = NUM00 ; _nativeFd = - NUM00 ; _isClosed . set ( _BOOL ) ; synchronized ( _writeLock ) { boolean isConnect = nativeConnect ( _socketFd , address , port ) ; return isConnect ; } }
public static boolean isAccessModifier ( String str ) { return $F5129 ( str ) || str . equals ( NUM00 ) || str . equals ( NUM00 ) ; }
protected void handleAppendRequestFailure ( MemberState member , AppendRequest request , Throwable error ) { failAttempt ( member , error ) ; }
private static SizePair selectSizePair ( Camera camera , int desiredWidth , int desiredHeight ) { $F39277 validPreviewSizes = generateValidPreviewSizeList ( camera ) ; SizePair selectedPair = null ; int minDiff = Integer . MAX_VALUE ; for ( SizePair sizePair : validPreviewSizes ) { Size size = sizePair . previewSize ( ) ; int diff = Math . abs ( size . getWidth ( ) - desiredWidth ) + Math . abs ( size . getHeight ( ) - desiredHeight ) ; $F40430 ( diff , minDiff , selectedPair , sizePair ) } return selectedPair ; }
public List < AddressItem > loadAllDeepFromCursor ( Cursor cursor ) { $F23386 ( count , cursor ) List < AddressItem > list = new ArrayList < AddressItem > ( count ) ; $F23402 ( cursor , identityScope , count , list , loadCurrentDeep , _BOOL ) return list ; }
public static String decode $F97 ( utf8 ) throws CharacterCodingException { return decode ( ByteBuffer . wrap ( utf8 ) , _BOOL ) ; }
private $F2539 attributesToLowerCase $F72 { $F2539 lowerCaseAttributes = new LinkedHashMap $F2538 $F72 ; for ( $F3465 ( key , attributes ) ) { lowerCaseAttributes . put ( key . toLowerCase ( ) , attributes . get ( key ) ) ; } return lowerCaseAttributes ; }
$F169786 ( mv , n , visibleTypeAnnotations , i , an , _BOOL , invisibleTypeAnnotations )
public static $F4203 $F5675 toList ( T obj1 , T obj2 ) { $F11916 ( list ) list . add ( obj1 ) ; list . add ( obj2 ) ; return list ; }
public $F96 readNextPart $F72 throws JPlagException { if ( remainingBytes == NUM00 ) { throw new JPlagException ( $F7288 ) ; } try { $F4647 ( in , file ) in . skip ( filesize - remainingBytes ) ; int partsize = remainingBytes ; $F127072 ( partsize ) $F2175 ( data , partsize ) in . read ( data ) ; $F59 ( in ) remainingBytes -= partsize ; return data ; } catch ( IOException e ) { $F301 ( e ) throw new JPlagException ( NUM00 , NUM00 + NUM00 , NUM00 ) ; } }
public boolean isMultiLineTabbed $F72 { return multiLineTab ; }
protected void computeParameters $F72 { if ( m_SumOfWeights > NUM00 ) { m_Mean = m_SumOfValues / m_SumOfWeights ; double stdDev = Math . sqrt ( Math . abs ( m_SumOfValuesSq - m_Mean * m_SumOfValues ) / m_SumOfWeights ) ; if ( stdDev > NUM00 ) { m_StandardDev = Math . max ( m_Precision / $F18752 , stdDev ) ; } } }
public String translateDataType ( String sourceVendorName , String targetVendorName , String dataType , int size , int scale ) { return getDataType ( targetVendorName , getDataTypeID ( sourceVendorName , dataType ) , size , scale ) ; }
public static $F12358 rectangle ( double startx , double starty , double width , double height , double radiusX , double radiusY , double topLeftRadiusX , double topLeftRadiusY , double topRightRadiusX , double topRightRadiusY , double bottomLeftRadiusX , double bottomLeftRadiusY , double bottomRightRadiusX , double bottomRightRadiusY ) { $F12358 shapeRecords = new ArrayList < ShapeRecord > $F72 ; if ( radiusX == NUM00 ) { radiusY = radiusX = NUM00 ; } else $F153178 ( radiusY , radiusX ) if ( radiusX > width / NUM00 ) radiusX = width / NUM00 ; if ( radiusY > height / NUM00 ) radiusY = height / NUM00 ; $F1986 topLeftRadius = getCornerRadius ( topLeftRadiusX , topLeftRadiusY , radiusX , radiusY , width , height ) ; topLeftRadiusX = topLeftRadius [ NUM00 ] ; topLeftRadiusY = topLeftRadius [ NUM00 ] ; $F1986 topRightRadius = getCornerRadius ( topRightRadiusX , topRightRadiusY , radiusX , radiusY , width , height ) ; topRightRadiusX = topRightRadius [ NUM00 ] ; topRightRadiusY = topRightRadius [ NUM00 ] ; $F1986 bottomLeftRadius = getCornerRadius ( bottomLeftRadiusX , bottomLeftRadiusY , radiusX , radiusY , width , height ) ; bottomLeftRadiusX = bottomLeftRadius [ NUM00 ] ; bottomLeftRadiusY = bottomLeftRadius [ NUM00 ] ; $F1986 bottomRightRadius = getCornerRadius ( bottomRightRadiusX , bottomRightRadiusY , radiusX , radiusY , width , height ) ; bottomRightRadiusX = bottomRightRadius [ NUM00 ] ; bottomRightRadiusY = bottomRightRadius [ NUM00 ] ; double c0 = NUM00 ; double c1 = NUM00 ; double c3 = NUM00 ; double rx = bottomRightRadiusX ; double ry = bottomRightRadiusY ; double tx = rx / NUM00 ; double ty = ry / NUM00 ; double dx , currentx ; double dy , currenty ; dx = startx + width - rx ; dy = starty + height - ry ; shapeRecords . add ( move ( ( dx + rx ) , dy ) ) ; currentx = ( dx + rx ) ; currenty = dy ; if ( bottomRightRadiusX != NUM00 ) { shapeRecords . add ( curvedEdge ( currentx , currenty , ( dx + c0 * tx ) , ( dy + c1 * ty ) , ( dx + c3 * rx ) , ( dy + c3 * ry ) ) ) ; shapeRecords . add ( curvedEdge ( ( dx + c3 * rx ) , ( dy + c3 * ry ) , ( dx + c1 * tx ) , ( dy + c0 * ty ) , dx , ( dy + ry ) ) ) ; currentx = dx ; currenty = dy + ry ; } rx = bottomLeftRadiusX ; ry = bottomLeftRadiusY ; tx = rx / NUM00 ; ty = ry / NUM00 ; dx = startx + rx ; dy = starty + height - ry ; shapeRecords . addAll ( straightEdge ( currentx , currenty , dx , ( dy + ry ) ) ) ; currentx = dx ; currenty = dy + ry ; if ( bottomLeftRadiusX != NUM00 ) { shapeRecords . add ( curvedEdge ( currentx , currenty , ( dx - c1 * tx ) , ( dy + c0 * ty ) , ( dx - c3 * rx ) , ( dy + c3 * ry ) ) ) ; shapeRecords . add ( curvedEdge ( ( dx - c3 * rx ) , ( dy + c3 * ry ) , ( dx - c0 * tx ) , ( dy + c1 * ty ) , ( dx - rx ) , dy ) ) ; currentx = dx - rx ; currenty = dy ; } rx = topLeftRadiusX ; ry = topLeftRadiusY ; tx = rx / NUM00 ; ty = ry / NUM00 ; dx = startx + rx ; dy = starty + ry ; shapeRecords . addAll ( straightEdge ( currentx , currenty , ( dx - rx ) , dy ) ) ; currentx = dx - rx ; currenty = dy ; if ( topLeftRadiusX != NUM00 ) { shapeRecords . add ( curvedEdge ( currentx , currenty , ( dx - c0 * tx ) , ( dy - c1 * ty ) , ( dx - c3 * rx ) , ( dy - c3 * ry ) ) ) ; shapeRecords . add ( curvedEdge ( ( dx - c3 * rx ) , ( dy - c3 * ry ) , ( dx - c1 * tx ) , ( dy - c0 * ty ) , dx , ( dy - ry ) ) ) ; currentx = dx ; currenty = dy - ry ; } rx = topRightRadiusX ; ry = topRightRadiusY ; tx = rx / NUM00 ; ty = ry / NUM00 ; dx = startx + width - rx ; dy = starty + ry ; shapeRecords . addAll ( straightEdge ( currentx , currenty , dx , ( dy - ry ) ) ) ; currentx = dx ; currenty = dy - ry ; if ( topRightRadiusX != NUM00 ) { shapeRecords . add ( curvedEdge ( currentx , currenty , ( dx + c1 * tx ) , ( dy - c0 * ty ) , ( dx + c3 * rx ) , ( dy - c3 * ry ) ) ) ; shapeRecords . add ( curvedEdge ( ( dx + c3 * rx ) , ( dy - c3 * ry ) , ( dx + c0 * tx ) , ( dy - c1 * ty ) , ( dx + rx ) , dy ) ) ; currentx = ( dx + rx ) ; currenty = dy ; } rx = bottomRightRadiusX ; ry = bottomRightRadiusY ; tx = rx / NUM00 ; ty = ry / NUM00 ; dx = startx + width - rx ; dy = starty + height - ry ; shapeRecords . addAll ( straightEdge ( currentx , currenty , ( dx + rx ) , dy ) ) ; return shapeRecords ; }
public static int findGlobalValleyLocation $F9830 ( data ) { double min = Double . NaN ; int imin = - NUM00 ; for ( $F1139 ( i , data ) ) { $F155599 ( Double , data , i ) if ( Double . isNaN ( min ) || data [ i ] < min ) { min = data [ i ] ; imin = i ; } } return imin ; }
$F137271 ( close , deleteContents , directory )
protected void moveDownSelected $F72 { $F3768 ( selectedIndex , table ) if ( selectedIndex > - NUM00 ) { int index = data . moveDown ( indexToModel ( selectedIndex ) ) ; setRowSelected ( indexToView ( index ) ) ; } }
JarWithFile ( PathImpl backing ) { super ( backing ) ; }
public List $F24548 shutdownNow $F72 { $F973 ( logger ) return executor . shutdownNow ( ) ; }
public static $F3803 toRelativePaths ( $F1113 VirtualFile root , $F1113 final Collection $F337766 filePaths ) { $F5 $F37973 ( rc , filePaths ) ; for ( FilePath path : filePaths ) $F18351 ( rc , relativePath , root , path ) return rc ; }
private void handleUnlockOrInstall $F72 { $F84963 ( isFinishing ) switch ( mKeyStore . state ( ) ) { case UNINITIALIZED : $F10990 ( ensureKeyGuard ) case LOCKED : { new UnlockDialog $F72 ; $F665 } case UNLOCKED : { if $F931 ( checkKeyGuardQuality ) { new ConfigureKeyGuardDialog $F72 ; $F665 } installIfAvailable ( ) ; finish ( ) ; $F665 } } }
private void stopDrag ( MotionEvent ev ) { mTouchMode = TOUCH_MODE_IDLE ; final boolean commitChange = $F158576 ( ev , MotionEvent ) && isEnabled ( ) ; $F30559 ( oldState , isChecked ) final boolean newState ; if ( commitChange ) { $F163812 ( mVelocityTracker ) final float xvel = mVelocityTracker . getXVelocity ( ) ; if $F34222 ( Math , xvel , mMinFlingVelocity ) { newState = ViewUtils . isLayoutRtl ( this ) ? ( xvel < NUM00 ) : ( xvel > NUM00 ) ; } else $F20182 ( newState , getTargetCheckedState ) } else { newState = oldState ; } if ( newState != oldState ) { playSoundEffect ( SoundEffectConstants . CLICK ) ; } setChecked ( newState ) ; cancelSuperTouch ( ev ) ; }
private void offsetStartTimeIfNecessary ( Time startTime , Time endTime , String rrule , CalendarEventModel model ) { $F48075 ( rrule ) mEventRecurrence . parse ( rrule ) ; if ( mEventRecurrence . freq != EventRecurrence . WEEKLY ) $F932 if ( mEventRecurrence . byday . length > mEventRecurrence . bydayCount ) $F932 int closestWeekday = Integer . MAX_VALUE ; int weekstart = EventRecurrence . day2TimeDay ( mEventRecurrence . wkst ) ; int startDay = startTime . weekDay ; for ( int i = NUM00 ; i < mEventRecurrence . bydayCount ; i ++ ) { int day = EventRecurrence . day2TimeDay ( mEventRecurrence . byday [ i ] ) ; $F19899 ( day , startDay ) if ( day < weekstart ) { day += NUM00 ; } if ( day > startDay && ( day < closestWeekday || closestWeekday < startDay ) ) { closestWeekday = day ; } if ( closestWeekday == Integer . MAX_VALUE || closestWeekday < startDay ) { $F45132 ( day , closestWeekday ) } } if ( closestWeekday < startDay ) { closestWeekday += NUM00 ; } int daysOffset = closestWeekday - startDay ; startTime . monthDay += daysOffset ; endTime . monthDay += daysOffset ; long newStartTime = startTime . normalize ( _BOOL ) ; long newEndTime = endTime . normalize ( _BOOL ) ; model . mStart = newStartTime ; model . mEnd = newEndTime ; }
public Vector3 ceil $F72 { return new Vector3 ( Math . ceil ( x ) , Math . ceil ( y ) , Math . ceil ( z ) ) ; }
$F5505 ( method , thisVar , returnVar , subSignature , java_lang_Throwable_fillInStackTrace , params , defaultMethod )
private void cleanUpFrontier $F72 { while ( $F1030 ( frontier ) && isExplored ( frontier . element ( ) ) ) $F7042 ( frontier ) }
$F34537 ( listener , changingListeners )
private void parseAttributes ( TypedArray a ) { barWidth = ( int ) a . getDimension ( R . styleable . ProgressWheel_pwBarWidth , barWidth ) ; rimWidth = ( int ) a . getDimension ( R . styleable . ProgressWheel_pwRimWidth , rimWidth ) ; spinSpeed = ( int ) a . getDimension ( R . styleable . ProgressWheel_pwSpinSpeed , spinSpeed ) ; barLength = ( int ) a . getDimension ( R . styleable . ProgressWheel_pwBarLength , barLength ) ; delayMillis = a . getInteger ( R . styleable . ProgressWheel_pwDelayMillis , delayMillis ) ; $F17370 ( delayMillis ) if ( a . hasValue ( R . styleable . ProgressWheel_pwText ) ) { setText ( a . getString ( R . styleable . ProgressWheel_pwText ) ) ; } barColor = a . getColor ( R . styleable . ProgressWheel_pwBarColor , barColor ) ; textColor = a . getColor ( R . styleable . ProgressWheel_pwTextColor , textColor ) ; rimColor = a . getColor ( R . styleable . ProgressWheel_pwRimColor , rimColor ) ; circleColor = a . getColor ( R . styleable . ProgressWheel_pwCircleColor , circleColor ) ; contourColor = a . getColor ( R . styleable . ProgressWheel_pwContourColor , contourColor ) ; textSize = ( int ) a . getDimension ( R . styleable . ProgressWheel_pwTextSize , textSize ) ; contourSize = a . getDimension ( R . styleable . ProgressWheel_pwContourSize , contourSize ) ; $F17551 ( a ) }
public static $F96 concatenate $F7233 ( a , b ) { $F148496 ( output , a , b ) $F7057 ( System , a , output ) $F11244 ( System , b , output , a ) return output ; }
public final $F22358 assertTerminated $F72 { if ( cdl . getCount ( ) != NUM00 ) { throw new AssertionError $F22361 ; } return this ; }
protected static void assertArgument ( final boolean validArg , final String message , final Object ... args ) { if ( ! validArg ) { throw new IllegalArgumentException $F73462 ( String , message , args ) ; } }
public static boolean isBeforeToday ( Calendar _calendar ) { return _calendar . before ( Calendar . getInstance ( ) ) ; }
public static ViewItemGroup buildLoginUI ( ModelApplication modelApp , Activity activity ) { ViewItemGroup viewItems = new ViewItemGroup ( activity ) ; TextView usernameText = new TextView ( activity ) ; usernameText . setText ( R . string . username ) ; viewItems . addView ( usernameText ) ; ViewItemFactory viewItemFactory = ViewItemFactory . instance ( ) ; ViewItem usernameItem = viewItemFactory . create ( LoginViewID . USERNAME , viewItemFactory . TEXT_DATATYPE_DB_ID , activity ) ; viewItems . addViewItem ( usernameItem , new OmniText ( modelApp . getUsername ( ) ) ) ; TextView passwordText = new TextView ( activity ) ; passwordText . setText ( R . string . password ) ; viewItems . addView ( passwordText ) ; ViewItem passwordItem = viewItemFactory . create ( LoginViewID . PASSWORD , viewItemFactory . PASSWORD_INPUT_DATATYPE_DB_ID , activity ) ; viewItems . addViewItem ( passwordItem , new OmniPasswordInput ( modelApp . getPassword ( ) ) ) ; return viewItems ; }
public void unMapVolumeFromSCSIInitiator ( String volumeId , String initiatorId ) throws Exception { String uri = ScaleIOConstants . getUnmapVolumeToScsiInitiatorURI ( volumeId ) ; ScaleIOUnmapVolumeToScsiInitiator unmapParm = new ScaleIOUnmapVolumeToScsiInitiator $F72 ; unmapParm . setScsiInitiatorId ( initiatorId ) ; post ( URI . create ( uri ) , getJsonForEntity ( unmapParm ) ) ; }
public $F9884 asCollection $F72 { return this . list ; }
private static void addQuarterArc ( Path2D . Float path , float x1 , float y1 , float x2 , float y2 , float curvature , boolean verticalStart ) { boolean down = y1 < y2 ; boolean left = x1 > x2 ; float cx1 = NUM00 ; float cy1 = NUM00 ; float cx2 = NUM00 ; float cy2 = NUM00 ; if ( verticalStart ) { cx1 = x1 ; cy2 = y2 ; if ( left ) { cx2 = x1 - curvature ; } else { cx2 = x1 + curvature ; } if ( down ) { cy1 = y2 - curvature ; } else { cy1 = y2 + curvature ; } } else { cx2 = x2 ; cy1 = y1 ; if ( left ) { cx1 = x2 + curvature ; } else { cx1 = x2 - curvature ; } if ( down ) { cy2 = y1 + curvature ; } else { cy2 = y1 - curvature ; } } path . curveTo ( cx1 , cy1 , cx2 , cy2 , x2 , y2 ) ; }
$F1 public void parse ( String content , Node block ) { this . block = block ; this . input = content . trim ( ) ; this . index = NUM00 ; this . lastDelimiter = null ; this . lastBracket = null ; boolean moreToParse ; do $F20182 ( moreToParse , parseInline ) while ( moreToParse ) ; processDelimiters ( null ) ; mergeTextNodes ( block . getFirstChild ( ) , block . getLastChild ( ) ) ; }
public static void random $F24576 ( b , offset , length ) { checkPositionIndex ( offset , b . length , NUM00 ) ; checkArgument ( length > NUM00 , NUM00 ) ; checkPositionIndex ( offset + length , b . length , NUM00 ) ; $F2175 ( buf , length ) RNG . nextBytes ( buf ) ; $F6483 ( System , buf , b , offset , length ) }
public void removeAllScanningCallbacks $F72 $F9096 ( scanningCallbacks )
public int read $F24576 ( buf , off , len ) throws TTransportException { if ( inputStream_ == null ) { throw new TTransportException ( TTransportException . NOT_OPEN , NUM00 ) ; } int bytesRead ; try { bytesRead = inputStream_ . read ( buf , off , len ) ; } catch ( IOException iox ) { throw new TTransportException ( TTransportException . UNKNOWN , iox ) ; } if ( bytesRead < NUM00 ) { throw new TTransportException ( TTransportException . END_OF_FILE ) ; } return bytesRead ; }
public void handleManagerCreation $F72 throws ManagementException { $F60256 ( isServiceInitialised ) ObjectName managerMBeanName = MBeanJMXAdapter . getManagerName ( ) ; ManagerMBeanBridge bridge = new ManagerMBeanBridge ( service ) ; ManagerMXBean bean = new ManagerMBean ( bridge ) ; service . registerInternalMBean ( bean , managerMBeanName ) ; }
$F1431 private boolean checkSetShape ( Shape oldShape , Shape newShape ) { Shape currentShape = getShape ( ) ; assert oldShape != newShape : NUM00 ; assert newShape != currentShape : NUM00 + currentShape ; assert oldShape == currentShape || oldShape . getParent ( ) == currentShape : NUM00 + NUM00 + currentShape + NUM00 + oldShape + NUM00 + newShape ; return _BOOL ; }
protected boolean isFileVisible ( File file ) { if ( $F7107 ( file ) || $F15586 ( file ) || file . isHidden ( ) ) { return _BOOL ; } return _BOOL ; }
public static $F806 append ( final $F806 a , final String ... b ) { $F18832 ( alen , a ) $F18832 ( blen , b ) final $F806 res = Arrays . copyOf ( a , alen + blen ) ; $F6483 ( System , b , res , alen , blen ) return res ; }
public void delete $F72 throws $F52710 { delete ( _BOOL ) ; }
public String ( $F96 bytes , int off , int len , $F9738 ( enc ) ) throws $F42439 { this ( bytesToChars ( bytes , off , len , enc ) ) ; }
private boolean initializeSearchItemset ( BitVector bv , $F2027 scratchi , $F2027 iters ) { for ( $F1139 ( i , scratchi ) ) { iters [ i ] = ( i == NUM00 ) ? bv . iter ( ) : bv . iterAdvance ( iters [ i - NUM00 ] ) ; if ( iters [ i ] < NUM00 ) { return _BOOL ; } scratchi [ i ] = bv . iterDim ( iters [ i ] ) ; } return _BOOL ; }
private Rectangle computeEditorBounds $F72 { if $F44600 ( row , column ) return new Rectangle $F13777 ; Rectangle cell = grid . getCellBounds ( column , row ) ; Rectangle area = grid . getClientArea ( ) ; if ( cell . x < $F6108 ( area ) ) { if ( $F6108 ( cell ) > $F6108 ( area ) ) { cell . width = $F6108 ( area ) - cell . x ; } } Rectangle editorRect = new Rectangle ( cell . x , cell . y , minimumWidth , minimumHeight ) ; if ( grabHorizontal ) { editorRect . width = Math . max ( cell . width , minimumWidth ) ; } if ( grabVertical ) { editorRect . height = Math . max ( cell . height , minimumHeight ) ; } if ( horizontalAlignment == SWT . RIGHT ) { editorRect . x += cell . width - editorRect . width ; } else if ( horizontalAlignment == SWT . LEFT ) $F845 else { editorRect . x += ( cell . width - editorRect . width ) / NUM00 ; } if ( verticalAlignment == SWT . BOTTOM ) { editorRect . y += cell . height - editorRect . height ; } else if ( verticalAlignment == SWT . TOP ) $F845 else { editorRect . y += ( cell . height - editorRect . height ) / NUM00 ; } return editorRect ; }
public int read $F24576 ( buffer , offset , length ) throws IOException { throw new UnsupportedOperationException $F45942 ( String , this ) ; }
public Cuboid ( World world , int x1 , int y1 , int z1 , int x2 , int y2 , int z2 ) { this . worldName = world . getName ( ) ; this . x1 = Math . min ( x1 , x2 ) ; this . x2 = Math . max ( x1 , x2 ) ; this . y1 = Math . min ( y1 , y2 ) ; this . y2 = Math . max ( y1 , y2 ) ; this . z1 = Math . min ( z1 , z2 ) ; this . z2 = Math . max ( z1 , z2 ) ; }
$F22330 public double logMarginalLikelihoodSmoothed ( $F31488 v , double delta , double Pdata ) { final double logDelta = StrictMath . log ( delta ) ; final double logInvDelta = StrictMath . log ( NUM00 - delta ) ; $F10162 ( n , v ) final double logN = StrictMath . log ( n ) ; final double offset = logInvDelta - Pdata ; double bottom = logN + logDelta - logInvDelta ; double top = bottom + Pdata ; for ( $F119 ( i , n ) ) { double weight = - LogTricks . logSum ( logDelta , offset + v . get ( i ) ) ; top = LogTricks . logSum ( top , weight + v . get ( i ) ) ; bottom = LogTricks . logSum ( bottom , weight ) ; } return top - bottom ; }
public boolean isNewMessage $F72 { $F77087 ( message ) return message . startsWith ( NUM00 ) || message . equals ( NUM00 ) ; }
private void installProperties $F72 { System . setProperty ( NUM00 , UserAgentGenerator . getUserAgent ( ) ) ; if ( OSUtils . isMacOSX ( ) ) { $F2699 ( System ) } }
public DoubleBuffer put $F196672 ( src , srcOffset , doubleCount ) $F11682 ( Arrays , src , srcOffset , doubleCount , remaining , i , put , this )
private void loadRecipients ( int addressType , $F2690 recipients , HashMap < Integer , EncodedStringValue [ ] > addressMap , boolean excludeMyNumber ) { EncodedStringValue [ ] array = addressMap . get ( addressType ) ; $F2329 ( array ) if ( excludeMyNumber && array . length == NUM00 ) $F932 String myNumber = excludeMyNumber ? mTelephonyManager . getLine1Number ( ) : null ; for ( EncodedStringValue v : array ) { if ( v != null ) { String number = v . getString ( ) ; if ( ( myNumber == null || ! PhoneNumberUtils . compare ( number , myNumber ) ) && ! recipients . contains ( number ) ) $F207 ( recipients , number ) } } }
$F45263 ( filename , extension , _BOOL , indexOfExtension , fileExt , getExtension )
private String scriptFromDisk ( String name ) { $F2936 ( name ) final char SEP = NUM00 ; String pkgPart = NUM00 ; String pathPart = NUM00 ; String namePart = NUM00 ; $F12747 ( at , name , SEP ) if ( at > - NUM00 ) { int nextAt = name . indexOf ( SEP , at + NUM00 ) ; if ( nextAt > - NUM00 ) { $F14493 ( pathPart , name , at ) $F99150 ( pkgPart , name , at , nextAt ) $F4571 ( namePart , name , nextAt ) } else $F60269 ( pathPart , name , at , namePart ) } else { $F96095 ( at , name ) if ( at > - NUM00 ) { $F24867 ( mx , name ) if ( mx > - NUM00 ) { $F14493 ( pathPart , name , mx ) $F99150 ( pkgPart , name , mx , at ) } else $F14494 ( pathPart , name , at ) $F4571 ( namePart , name , at ) } else { pathPart = NUM00 ; namePart = name ; } } String script = null ; try { Charset realEncoding = null ; Charset bomEncoding = null ; InputStream in = locateScriptFile ( pathPart , pkgPart , namePart ) ; if ( in != null ) { try { $F31064 ( bis , in ) bomEncoding = getEncodingFromBOM ( bis ) ; script = pullInSource ( bis , bomEncoding ) ; realEncoding = getEncodingFromXMLDirective ( script ) ; } $F53155 ( in ) } if $F10335 ( realEncoding , bomEncoding ) { in = locateScriptFile ( pathPart , pkgPart , namePart ) ; if ( in != null ) { try { $F31064 ( bis , in ) getEncodingFromBOM ( bis ) ; script = pullInSource ( bis , realEncoding ) ; } $F53155 ( in ) } } } $F35546 ( fnf ) return script ; }
@ PrePersist public void prePersist $F72 $F22067 ( lockTime , System )
public LibPadstack add ( String p_name , ShapeConvex [ ] p_shapes , boolean p_attach_allowed , boolean p_placed_absolute ) { int pad_no = count ( ) + NUM00 ; LibPadstack new_padstack = new LibPadstack ( p_name , pad_no , p_shapes , p_attach_allowed , p_placed_absolute ) ; padstack_list . add ( new_padstack ) ; return new_padstack ; }
$F28896 ( index , paint , bounds , title , getTitle )
protected ArgsBase $F72 $F39233 ( _argv , _env )
$F1 public void startContentModel ( String elementName , Augmentations augs ) throws XNIException { if ( fValidation ) { fDTDElementDeclName = elementName ; $F725 ( fMixedElementTypes ) } if ( fDTDGrammar != null ) fDTDGrammar . startContentModel ( elementName , augs ) ; if ( fDTDContentModelHandler != null ) { fDTDContentModelHandler . startContentModel ( elementName , augs ) ; } }
public OMRangeRings ( LatLonPoint center , double radius , Length units , int nverts ) { super ( center , radius , units , nverts ) ; centerPoint = createCenterPoint ( ) ; $F34862 ( form ) }
public static InputSource createInputSource ( String s ) { try { return new InputSource ( $F18490 ( s ) ) ; } $F91725 ( e ) }
public static void write ( File file , CharSequence data , boolean append ) throws IOException { write ( file , data , Charset . defaultCharset ( ) , append ) ; }
public static Preferences userRoot $F72 { return factory . userRoot ( ) ; }
public static String toDebugString ( final long socketIdentifier ) { final int ipBits = ( int ) socketIdentifier ; final int port = extractPortNumber ( socketIdentifier ) ; final int inode = $F13506 ( socketIdentifier ) ; return Integer . toHexString ( ipBits ) + NUM00 + port + NUM00 + inode ; }
$F1 public void onAlbumUpdate ( ProviderIdentifier provider , final Album a ) throws RemoteException { if ( a == null ) $F13518 ( Log , TAG ) Album cached = mCache . getAlbum ( a . getRef ( ) ) ; boolean modified = _BOOL ; if ( cached == null ) { mCache . putAlbum ( provider , a ) ; cached = a ; modified = _BOOL ; } else if ( ! cached . isLoaded ( ) || ! cached . isIdentical ( a ) ) { $F69429 ( cached , a ) cached . setYear ( a . getYear ( ) ) ; cached . setIsLoaded ( a . isLoaded ( ) ) ; cached . setProvider ( a . getProvider ( ) ) ; if ( cached . getSongsCount ( ) != a . getSongsCount ( ) ) { $F13710 songsIt = a . songs ( ) ; while $F2921 ( songsIt ) { $F13714 ( songRef , songsIt ) cached . addSong ( songRef ) ; } } modified = _BOOL ; } if ( cached . getProvider ( ) == null ) { Log . e ( TAG , NUM00 + cached . getRef ( ) + NUM00 ) ; } if ( modified ) { $F50737 ( songs , a ) while $F2921 ( songs ) { $F13714 ( songRef , songs ) Song song = retrieveSong ( songRef , a . getProvider ( ) ) ; if ( song != null && song . isLoaded ( ) ) { String artistRef = song . getArtist ( ) ; if ( artistRef != null ) { Artist artist = retrieveArtist ( artistRef , song . getProvider ( ) ) ; if ( artist != null ) { artist . addAlbum ( a . getRef ( ) ) ; } else { if ( DEBUG ) $F1615 ( Log , TAG ) } } } else { if ( DEBUG ) $F1615 ( Log , TAG ) } } postAlbumForUpdate ( cached ) ; } }
public final void push ( String s ) { if $F11078 ( m_firstFree , m_mapSize ) { m_mapSize += m_blocksize ; $F140073 ( m_mapSize ) $F10236 ( System , m_map , newMap , m_firstFree ) m_map = newMap ; } m_map [ m_firstFree ] = s ; m_firstFree ++ ; }
public static String readFromFile ( final File path ) throws IOException { FileInputStream fis = null ; try { $F5335 ( fis , path ) return readFromFile ( fis ) ; } $F14364 ( fis ) }
public static int XToTileX $F14337 ( x , tileGridXOffset , tileWidth ) { x -= tileGridXOffset ; if ( x < NUM00 ) { x += NUM00 - tileWidth ; } return x / tileWidth ; }
$F9863 ( child , dx , dy , _BOOL , checkHorizontal , mCallback , checkVertical , mTouchSlop , Math )
public Input ( String name , @ InputType int type , @ Alignment int align , Connection connection ) { mName = name ; mType = type ; mAlign = align ; mConnection = connection ; if ( mConnection != null ) { mConnection . setInput ( this ) ; } }
public static BshClassManager createClassManager ( Interpreter interpreter ) { BshClassManager manager ; if ( Capabilities . classExists ( NUM00 ) && Capabilities . classExists ( NUM00 ) && Capabilities . classExists ( NUM00 ) ) try { Class clas = Class . forName ( NUM00 ) ; manager = ( BshClassManager ) clas . newInstance ( ) ; } catch ( Exception e ) { throw new InterpreterError ( NUM00 + e ) ; } else manager = new BshClassManager $F72 ; if ( interpreter == null ) interpreter = new Interpreter $F72 ; manager . declaringInterpreter = interpreter ; return manager ; }
public int swap $F72 { if ( ! mEgl . eglSwapBuffers ( mEglDisplay , mEglSurface ) ) { return mEgl . eglGetError ( ) ; } return EGL10 . EGL_SUCCESS ; }
public void requestLastLoginTime $F72 { operations . add ( PasswordPolicyStateOperationType . GET_LAST_LOGIN_TIME ) ; }
public static Stream $F4 wordsOf ( String text ) { requireNonNull ( text ) ; return WORDS . splitAsStream ( text ) ; }
public void add ( AppInfo info ) { if ( mAppFilter != null && ! mAppFilter . shouldShowApp ( info . componentName ) ) $F932 if ( findActivity ( data , info . componentName , info . user ) ) $F932 data . add ( info ) ; added . add ( info ) ; }
public Joiner match $F4353 ( field , value ) $F38616 ( match , field , Arrays , value )
private String removeYouTubeMarkup ( String plot ) { $F1275 ( plot ) $F8479 ( plot ) }
private String createDashArrayString ( $F6205 dashesArray ) { $F83 ( sb ) if ( dashesArray != null ) { int index = NUM00 ; for ( Float value : dashesArray ) { $F4074 ( str , Float , value ) if $F8991 ( str ) { sb . append ( value . intValue ( ) ) ; } else $F288 ( sb , value ) if $F18523 ( index , dashesArray ) $F86 ( sb ) index ++ ; } } $F92 ( sb ) }
$F39742 ( update , unsafe , this , headOffset )
public long position ( java . sql . Blob pattern , long start ) throws SQLException { return position ( pattern . getBytes ( NUM00 , $F5338 ( pattern ) ) , start ) ; }
protected synchronized T load $F72 throws IOException { long genLoaded = - NUM00 ; IOException ioe = null ; $F10144 ( genFiles ) $F806 files ; try { files = dir . listAll ( ) ; } catch ( IOException ioe2 ) $F1337 T loaded = null ; for ( String file : files ) { if $F7311 ( file , prefix ) { long gen = Long . parseLong ( $F8182 ( file , prefix ) ) ; if ( genLoaded == - NUM00 || gen > genLoaded ) { genFiles . add ( file ) ; IndexInput in = dir . openInput ( file , IOContext . DEFAULT ) ; try { loaded = loadOne ( in ) ; } catch ( IOException ioe2 ) { $F13265 ( ioe , ioe2 ) } $F3229 ( in ) genLoaded = gen ; } } } if ( genLoaded == - NUM00 ) { $F731 ( ioe ) } else { if $F3817 ( genFiles ) { String curFileName = prefix + genLoaded ; for ( String file : genFiles ) { long gen = Long . parseLong ( $F8182 ( file , prefix ) ) ; if ( canDelete ( gen ) && ! curFileName . equals ( file ) ) $F229844 ( dir , file ) } } nextWriteGen = NUM00 + genLoaded ; } return loaded ; }
public static String readLine ( InputStream in , String charset ) throws IOException { $F1538 ( baos ) while ( _BOOL ) { $F7468 ( b , in ) if ( b == - NUM00 ) { if $F10471 ( baos ) $F1337 else $F5153 } $F41314 ( b ) if ( b != NUM00 ) { baos . write ( b ) ; $F598 } $F7468 ( b2 , in ) if ( b2 == - NUM00 ) { baos . write ( b ) ; $F597 } $F41314 ( b2 ) baos . write ( b ) ; baos . write ( b2 ) ; } $F23209 ( baos , charset ) }
$F31396 ( str , retval , ch , i , s , Integer )
public boolean checkTableExists ( TableDefinition table ) { String column = null ; for ( FieldDefinition field : table . getFields ( ) ) { if ( column == null ) $F128776 ( column , field ) else if ( field . isPrimaryKey ( ) ) { $F32928 ( column , field ) $F597 } } String sql = NUM00 + column + NUM00 + table . getFullName ( ) + NUM00 + column + NUM00 + column ; DataReadQuery query = new DataReadQuery ( sql ) ; query . setMaxRows ( NUM00 ) ; try { session . executeQuery ( query ) ; return _BOOL ; } catch ( Exception notFound ) { return _BOOL ; } $F4231 }
private int processColon ( int length ) { if ( _hasScheme ) { if ( ! readUserPass ( length ) && $F20 ( _buffer ) ) { _reader . goBack ( ) ; _buffer . delete ( $F1092 ( _buffer ) , _buffer . length ( ) ) ; int backtrackOnFail = _reader . getPosition ( ) - _buffer . length ( ) + length ; if ( ! readDomainName ( _buffer . substring ( length ) ) ) { _reader . seek ( backtrackOnFail ) ; readEnd ( ReadEndState . InvalidUrl ) ; } length = NUM00 ; } } else if ( readScheme ( ) && $F20 ( _buffer ) ) { _hasScheme = _BOOL ; $F54171 ( length , _buffer ) } else if ( $F20 ( _buffer ) && _options . hasFlag ( UrlDetectorOptions . ALLOW_SINGLE_LEVEL_DOMAIN ) && _reader . canReadChars ( NUM00 ) ) { _reader . goBack ( ) ; _buffer . delete ( $F1092 ( _buffer ) , _buffer . length ( ) ) ; $F31458 ( readDomainName , _buffer ) } else { readEnd ( ReadEndState . InvalidUrl ) ; length = NUM00 ; } return length ; }
public static boolean containsSqlScriptDelimiters ( String script , String delim ) { boolean inLiteral = _BOOL ; $F7782 ( content , script ) for ( $F1088 ( i , script ) ) { if ( content [ i ] == NUM00 ) $F1091 ( inLiteral ) if ( ! inLiteral && script . startsWith ( delim , i ) ) { return _BOOL ; } } return _BOOL ; }
public void compress $F56810 ( bytes , off , len , os ) { try $F21537 ( os , bytes , off , len ) $F12153 ( e ) }
public void assertNotJoined ( final UUID serviceId ) { m_triggers . add ( new QuorumEventInvariant ( QuorumEventEnum . SERVICE_JOIN , serviceId ) ) ; if ( isMember ( m_quorum . getJoined ( ) , serviceId ) ) broken ( ) ; }
$F5803 ( drawable , getDrawable , matrix , prevMatrix , drawableWidth , drawableHeight , scaleX , viewWidth , scaleY , viewHeight , mScaleType , CENTER , CENTER_CROP , Math , CENTER_INSIDE , FIT_CENTER , FIT_XY , redundantXSpace , redundantYSpace , matchViewWidth , matchViewHeight , isZoomed , imageRenderedAtLeastOnce , normalizedScale , prevMatchViewWidth , prevMatchViewHeight , savePreviousImageValues , m , Matrix , transX , transY , prevActualWidth , actualWidth , getImageWidth , translateMatrixAfterRotate , prevViewWidth , prevActualHeight , actualHeight , getImageHeight , prevViewHeight , fixTrans , setImageMatrix )
public int encryptBlock $F59451 ( in , inOff , out , outOff ) throws $F5278 { $F59453 ( inOff , blockSize , in ) $F59453 ( outOff , blockSize , out ) $F59455 ( cipher , cfbV , cfbOutV ) $F59461 ( i , blockSize , out , outOff , cfbOutV , in , inOff ) $F59464 ( System , cfbV , blockSize ) System . arraycopy ( out , outOff , cfbV , cfbV . length - blockSize , blockSize ) ; return blockSize ; }
public final void print ( String value ) { try { $F48972 ( rootElement , workDoc ) int deleteLines = rootElement . getElementCount ( ) - linesMax ; for ( $F119 ( index , deleteLines ) ) { Element elem = rootElement . getElement ( NUM00 ) ; workDoc . remove ( elem . getStartOffset ( ) , elem . getEndOffset ( ) ) ; } workDoc . insertString ( workDoc . getLength ( ) , value , null ) ; textArea . setCaretPosition ( workDoc . getLength ( ) ) ; } $F1516 ( exc ) }
private void addConnectionGroups ( Collection < ConnectionGroup > connectionGroups ) { for ( ConnectionGroup connectionGroup : connectionGroups ) { APIConnectionGroup parent = retrievedGroups . get ( connectionGroup . getParentIdentifier ( ) ) ; if ( parent != null ) { Collection < APIConnectionGroup > children = parent . getChildConnectionGroups ( ) ; if ( children == null ) { children = new ArrayList < APIConnectionGroup > $F72 ; parent . setChildConnectionGroups ( children ) ; } APIConnectionGroup apiConnectionGroup = new APIConnectionGroup ( connectionGroup ) ; retrievedGroups . put ( connectionGroup . getIdentifier ( ) , apiConnectionGroup ) ; children . add ( apiConnectionGroup ) ; } else logger . debug ( NUM00 , connectionGroup . getIdentifier ( ) , connectionGroup . getParentIdentifier ( ) ) ; } }
public void loadMap ( InputStream input , String groupID ) throws Exception { shapes = parser . parse ( input , groupID ) ; boundaries = new ArrayList < Rect2D > $F716 ( shapes ) ; for ( IGeometric2D shape : shapes ) { boundaries . add ( shape . getBounds ( ) ) ; } }
public void addDecoration ( LineDecoration decoration ) $F17651 ( decoration , decorations )
private String parseLinkTitle $F72 { String title = match ( LINK_TITLE ) ; if ( title != null ) { return Escaping . unescapeString ( $F4019 ( title ) ) ; } else $F1337 }
public void recordSRDFOperation ( DbClient dbClient , OperationTypeEnum opType , Operation . Status status , Object ... extParam ) { try { boolean opStatus = ( Operation . Status . ready == status ) ? _BOOL : _BOOL ; String evType ; evType = opType . getEvType ( opStatus ) ; $F137633 ( evDesc , opType ) String opStage = AuditLogManager . AUDITOP_END ; _logger . info ( NUM00 , opType . toString ( ) , $F5528 ( evType ) + evDesc ) ; recordBourneSRDFEvent ( dbClient , getId ( ) , evType , status , evDesc ) ; $F216664 ( id , extParam ) switch ( opType ) { case CREATE_SRDF_LINK : AuditBlockUtil . auditBlock ( dbClient , opType , opStatus , opStage , extParam ) ; $F597 case SUSPEND_SRDF_LINK : AuditBlockUtil . auditBlock ( dbClient , opType , opStatus , opStage , extParam ) ; $F597 case DETACH_SRDF_LINK : AuditBlockUtil . auditBlock ( dbClient , opType , opStatus , opStage , extParam ) ; $F597 case PAUSE_SRDF_LINK : AuditBlockUtil . auditBlock ( dbClient , opType , opStatus , opStage , extParam ) ; $F597 case RESUME_SRDF_LINK : AuditBlockUtil . auditBlock ( dbClient , opType , opStatus , opStage , extParam ) ; $F597 case FAILOVER_SRDF_LINK : AuditBlockUtil . auditBlock ( dbClient , opType , opStatus , opStage , extParam ) ; $F597 case SWAP_SRDF_VOLUME : AuditBlockUtil . auditBlock ( dbClient , opType , opStatus , opStage , extParam ) ; $F597 case STOP_SRDF_LINK : AuditBlockUtil . auditBlock ( dbClient , opType , opStatus , opStage , extParam ) ; $F597 case SYNC_SRDF_LINK : AuditBlockUtil . auditBlock ( dbClient , opType , opStatus , opStage , extParam ) ; $F597 $F37651 ( _logger ) } } catch ( Exception e ) { _logger . error ( $F89018 ( opType , e ) ) ; } }
$F1 public void put ( double val ) { final double nn = this . n + NUM00 ; final double delta = val - m1 ; final double delta_nn = delta / nn ; final double delta_nn2 = delta_nn * delta_nn ; final double inc = delta * delta_nn * this . n ; m4 += inc * delta_nn2 * ( nn * nn - NUM00 * nn + NUM00 ) + NUM00 * delta_nn2 * m2 - NUM00 * delta_nn * m3 ; m3 += inc * delta_nn * ( nn - NUM00 ) - NUM00 * delta_nn * m2 ; m2 += inc ; m1 += delta_nn ; n = nn ; $F46000 ( min , Math , val ) $F46000 ( max , Math , val ) }
public void close $F72 { this . closed = _BOOL ; }
$F1654 ( m_RecentItems )
public JCDiagnostic warning ( LintCategory lc , String key , Object ... args ) { return create ( WARNING , lc , $F8427 ( EnumSet ) , null , null , key , args ) ; }
public Destructurer ( final Tree . Pattern that , final GenerateJsVisitor gen , final Set < Declaration > directAccess , final String expvar , boolean first , final boolean forAssert ) { this . gen = gen ; jsw = gen == null ? null : gen . out ; names = gen == null ? null : gen . getNames ( ) ; this . directAccess = directAccess ; this . expvar = expvar ; this . first = first ; this . forAssert = forAssert ; that . visit ( this ) ; if $F31724 ( jsw , attribs ) { for ( Value attr : attribs ) { jsw . write ( NUM00 , names . self ( ( TypeDeclaration ) attr . getContainer ( ) ) , NUM00 , names . name ( attr ) , NUM00 , names . name ( attr ) ) ; } } }
$F1431 public void handleTblSubConfigButtonDeleteRequest ( RequestInvocationEvent event ) throws ModelControlException { submitCycle = _BOOL ; CCActionTable tbl = ( CCActionTable ) getChild ( TBL_SUB_CONFIG ) ; tbl . restoreStateData ( ) ; CCActionTableModel tblModel = ( CCActionTableModel ) tbl . getModel ( ) ; $F31354 selected = tblModel . getSelectedRows ( ) ; SerializedField szCache = ( SerializedField ) getChild ( SZ_CACHE ) ; List list = szCache . getSerializedObj ( ) ; $F2689 names = new $F9623 $F28143 ( selected ) ; for ( Integer index : selected ) { SMSubConfig sc = ( SMSubConfig ) list . get ( index ) ; $F29790 ( names , sc ) } try { AbstractAuditModel model = ( AbstractAuditModel ) getModel ( ) ; model . deleteEventHandles ( names ) ; if $F9634 ( selected ) { setInlineAlertMessage ( TYPE_INFO , INFORMATION_MESSAGE , NUM00 ) ; } else { setInlineAlertMessage ( TYPE_INFO , INFORMATION_MESSAGE , NUM00 ) ; } } catch ( AMConsoleException e ) { $F196466 ( setInlineAlertMessage , TYPE_ERROR , ERROR_MESSAGE , e ) ; } submitCycle = _BOOL ; forwardTo ( ) ; }
public synchronized void removeGraphListener ( GraphListener cl ) $F106 ( m_graphListeners , cl )
public boolean isHealthy ( boolean doExtensiveChecks ) { if ( socket . isClosed ( ) || socket . isInputShutdown ( ) || socket . isOutputShutdown ( ) ) { return _BOOL ; } $F20092 ( framedConnection , _BOOL ) if ( doExtensiveChecks ) { try { $F231990 ( readTimeout , socket ) try { $F241590 ( socket ) if ( source . exhausted ( ) ) { return _BOOL ; } return _BOOL ; } $F231993 ( socket , readTimeout ) } catch ( SocketTimeoutException ignored ) $F845 $F3092 ( _BOOL ) } return _BOOL ; }
public void addColumn ( int index , Column column ) { validateColumn ( column ) ; columnList . add ( index , column ) ; }
$F41720 ( value , absMin , absMax , absValue , Math )
private void init $F72 { setTitle ( NUM00 ) ; hopPropertiesPanel = new HopfieldPropertiesPanel ( networkPanel ) ; hopPropertiesPanel . fillFieldValues ( ) ; tabLogic . setLayout ( new FlowLayout $F72 ) ; tabLogic . add ( hopPropertiesPanel ) ; tabLayout . add ( layoutPanel ) ; layoutPanel = new MainLayoutPanel ( _BOOL , this ) ; $F36210 ( tabbedPane , tabLogic ) $F36210 ( tabbedPane , layoutPanel ) setContentPane ( tabbedPane ) ; Action helpAction = new ShowHelpAction ( hopPropertiesPanel . getHelpPath ( ) ) ; addButton ( new JButton ( helpAction ) ) ; }
$F1017 ( request , container , mRequest , mContainers )
private double normVector $F9830 ( z ) { double sum = NUM00 ; for ( $F61686 ( i , problem ) ) { $F60596 ( sum , z , i ) } $F41531 ( Math , sum ) }
$F2509 ( mValue , mDataType , TYPE_ASCII , US_ASCII , Arrays , String , val )
public int hashCode $F72 { return NUM00 * factor . hashCode ( ) + lag ; }
public void deserializeArchivedVersions $F72 throws RuntimeException { System . out . println ( NUM00 + getArchiveDirectory ( ) + NUM00 ) ; $F1890 ( archive , getArchiveDirectory ) if $F224313 ( archive ) $F932 $F1894 ( listing , archive ) for ( String archiveName : listing ) { if ( ! $F8991 ( archiveName ) ) $F1448 try { File $F1897 ( file , getArchiveDirectory , archiveName ) ; $F170751 ( zipFile , file ) ZipEntry entry = zipFile . getEntry ( NUM00 ) ; $F83713 ( inputStream , zipFile , entry ) $F67402 ( objectIn , inputStream ) $F14855 classFields = ( $F14855 ) objectIn . readObject ( ) ; $F59 ( zipFile ) for ( $F3465 ( className , classFields ) ) { $F64948 ( fieldNames , classFields , className ) $F96883 ( clazz , Class , className ) ObjectStreamClass streamClass = ObjectStreamClass . lookup ( clazz ) ; if ( streamClass == null ) { System . out . println ( ) ; } for ( String fieldName : fieldNames ) { assert streamClass != null ; ObjectStreamField field = streamClass . getField ( fieldName ) ; if ( field == null ) { throw new RuntimeException ( NUM00 + fieldName + NUM00 + className + NUM00 + NUM00 + NUM00 + className + NUM00 + archiveName + NUM00 ) ; } } } } catch ( ClassNotFoundException e ) { throw new RuntimeException ( NUM00 + archiveName + NUM00 , e ) ; } catch ( IOException e ) { throw new RuntimeException ( NUM00 + archiveName + NUM00 , e ) ; } System . out . println ( NUM00 + archiveName + NUM00 ) ; ZipEntry zipEntry = null ; try { File $F1897 ( file , getArchiveDirectory , archiveName ) ; $F4647 ( in , file ) $F78817 ( zipinputstream , in ) ; while $F78823 ( zipEntry , zipinputstream ) { if ( ! zipEntry . getName ( ) . endsWith ( NUM00 ) ) $F1448 $F67402 ( objectIn , zipinputstream ) objectIn . readObject ( ) ; $F22108 ( zipinputstream ) } $F59 ( zipinputstream ) } catch ( ClassNotFoundException e ) { throw new RuntimeException ( $F31996 ( zipEntry , archiveName ) + NUM00 + NUM00 , e ) ; } catch ( IOException e ) { throw new RuntimeException ( NUM00 + archiveName + NUM00 , e ) ; } } System . out . println ( NUM00 ) ; }
private void convertMaximalToMinimalEdgeRings ( List ringEdges ) { for ( $F2774 ( i , ringEdges ) ) { PolygonizeDirectedEdge de = ( PolygonizeDirectedEdge ) i . next ( ) ; long label = de . getLabel ( ) ; List intNodes = findIntersectionNodes ( de , label ) ; $F45557 ( intNodes ) for ( $F2774 ( iNode , intNodes ) ) { $F67766 ( node , iNode ) computeNextCCWEdges ( node , label ) ; } } }
public $F96 generateMAC ( byte commandClass , $F96 ciphertext , byte sendingNode , byte receivingNode , $F96 iv ) throws GeneralSecurityException { traceHex ( NUM00 , ciphertext ) ; traceHex ( NUM00 , iv ) ; int bufferSize = ciphertext . length + NUM00 ; $F2175 ( buffer , bufferSize ) $F12496 ( tempAuth ) buffer [ NUM00 ] = commandClass ; buffer [ NUM00 ] = sendingNode ; buffer [ NUM00 ] = receivingNode ; buffer [ NUM00 ] = ( byte ) ciphertext . length ; $F7057 ( System , ciphertext , buffer ) traceHex ( NUM00 , networkKey . getEncoded ( ) ) ; traceHex ( NUM00 , buffer ) ; $F5348 ( encryptCipher , Cipher ) $F43929 ( encryptCipher , Cipher , authKey ) tempAuth = encryptCipher . doFinal ( iv ) ; traceHex ( NUM00 , tempAuth ) ; $F12496 ( encpck ) int block = NUM00 ; for ( $F119 ( i , bufferSize ) ) { encpck [ block ] = buffer [ i ] ; block ++ ; if ( block == NUM00 ) { for ( $F6268 ( j ) ) { tempAuth [ j ] = ( byte ) ( encpck [ j ] ^ tempAuth [ j ] ) ; encpck [ j ] = NUM00 ; } $F26770 ( Arrays , encpck ) block = NUM00 ; $F43929 ( encryptCipher , Cipher , authKey ) tempAuth = encryptCipher . doFinal ( tempAuth ) ; } } if ( block > NUM00 ) { for ( $F6268 ( i ) ) { tempAuth [ i ] = ( byte ) ( encpck [ i ] ^ tempAuth [ i ] ) ; } $F43929 ( encryptCipher , Cipher , authKey ) tempAuth = encryptCipher . doFinal ( tempAuth ) ; } traceHex ( NUM00 , tempAuth ) ; $F12496 ( mac ) $F10319 ( System , tempAuth , mac ) return mac ; }
public void removeEventListener ( ImageSharingListener listener ) throws $F161622 { $F161627 ( mApi ) try { WeakReference < IImageSharingListener > weakRef = mImageSharingListeners . remove ( listener ) ; $F2329 ( weakRef ) IImageSharingListener rcsListener = weakRef . get ( ) ; if ( rcsListener != null ) { mApi . removeEventListener2 ( rcsListener ) ; } } $F228550 ( RcsIllegalArgumentException , e ) }
private void updateWaveFileSize $F72 throws IOException { ByteBuffer buffer = getUnsignedIntegerBuffer ( $F2281 ( mFileChannel ) ) ; mFileChannel . write ( buffer , NUM00 ) ; ByteBuffer buffer2 = getUnsignedIntegerBuffer ( $F2281 ( mFileChannel ) ) ; mFileChannel . write ( buffer2 , NUM00 ) ; }
private void writeJournal ( ParcelFileDescriptor newState , Journal journal ) { try { FileOutputStream outStream = new FileOutputStream $F122976 ( newState ) ; $F172325 ( journalBytes , writeCheckedBytes , journal ) outStream . write ( journalBytes ) ; if ( VERBOSE ) Log . v ( TAG , NUM00 + journalBytes . length + NUM00 ) ; } $F122999 ( Log , TAG , e ) }
public boolean matches ( String sa ) { if $F20325 ( _length , sa ) return _BOOL ; $F1469 buffer = _buffer ; int offset = _offset ; for ( $F18298 ( i , _length ) ) if ( _buffer [ _offset + i ] != sa . charAt ( i ) ) return _BOOL ; return _BOOL ; }
$F1 public void mouseReleased ( MouseEvent event ) { if ( event . getSource ( ) == getComponentDecreaseSpinnerButton ( ) ) $F5196 ( decreaseTimer ) else $F5196 ( increaseTimer ) }
public double computeMaxClassValueUsingPercentFactorPerSeries ( DefaultChartData chartData , $F806 series , $F1986 percentFactorPerSeries ) { double maxValue = NUM00 ; for ( String className : chartData . getClassNamesIncludingDisabled ( ) ) { double total = NUM00 ; for ( $F1139 ( i , series ) ) { String seriesName = series [ i ] ; if ( transposedHeightsAdditive ) total += percentFactorPerSeries [ i ] * chartData . getValueAsDouble ( seriesName , className ) ; else total = Math . max ( total , percentFactorPerSeries [ i ] * chartData . getValueAsDouble ( seriesName , className ) ) ; } $F12283 ( total , maxValue ) } return NUM00 * maxValue ; }
public int addChannel ( Channel channel ) { int index = - NUM00 ; switch ( channel . getChannelType ( ) ) { case STANDARD : mChannels . add ( channel ) ; $F63959 ( index , mChannels ) fireTableRowsInserted ( index , index ) ; $F597 case TRAFFIC : mTrafficChannels . add ( channel ) ; $F63959 ( index , mChannels ) $F597 $F2448 } broadcast ( new ChannelEvent ( channel , Event . NOTIFICATION_ADD ) ) ; if ( channel . getEnabled ( ) ) { broadcast ( new ChannelEvent ( channel , Event . REQUEST_ENABLE ) ) ; } return index ; }
public static String join ( Object ... array ) { $F1338 ( array ) if $F9634 ( array ) $F74420 ( StringPool ) if $F9634 ( array ) { return $F63082 ( String , array ) ; } final StringBuilder sb = new StringBuilder $F28143 ( array ) ; for ( $F1139 ( i , array ) ) $F40727 ( sb , array , i ) $F92 ( sb ) }
public boolean hasTrait ( final StoreTrait storeTrait ) { final Set < StoreTrait > traits = getTraits ( ) ; return null != traits && traits . contains ( storeTrait ) ; }
public void createSupply ( MWMInOutBoundLine boundline , BigDecimal qtySupply ) { MProduct product = MProduct . get ( boundline . getCtx ( ) , boundline . getM_Product_ID ( ) ) ; if ( product . isBOM ( ) ) { createMO ( boundline , product , qtySupply ) ; } else if ( product . isPurchased ( ) ) { createRequisition ( boundline , product , qtySupply ) ; } }
$F1654 ( parameters )
public List $F136545 top ( int n ) { List $F136545 $F204 ( top ) ; $F2027 values = data . toIntArray ( ) ; IntArrays . parallelQuickSort ( values , ReverseIntComparator . instance ( ) ) ; for ( int i = NUM00 ; i < n && i < values . length ; i ++ ) { top . add ( PackedLocalTime . asLocalTime ( values [ i ] ) ) ; } return top ; }
$F1 public void loadXML ( Node stepnode , List < DatabaseMeta > databases , Map < String , Counter > counters ) throws KettleXMLException { try { $F526345 ( schemaName , XMLHandler , stepnode ) $F526345 ( tabelName , XMLHandler , stepnode ) $F526345 ( mdkeySize , XMLHandler , stepnode ) $F526345 ( measureCount , XMLHandler , stepnode ) $F526345 ( heirAndKeySize , XMLHandler , stepnode ) $F526345 ( cubeName , XMLHandler , stepnode ) $F526345 ( groupByEnabled , XMLHandler , stepnode ) $F526345 ( aggregatorClassString , XMLHandler , stepnode ) $F526345 ( aggregatorString , XMLHandler , stepnode ) $F526345 ( factDimLensString , XMLHandler , stepnode ) $F526345 ( levelAnddataTypeString , XMLHandler , stepnode ) currentRestructNumber = Integer . parseInt ( XMLHandler . getTagValue ( stepnode , NUM00 ) ) ; $F526345 ( partitionID , XMLHandler , stepnode ) $F526345 ( segmentId , XMLHandler , stepnode ) $F526345 ( taskNo , XMLHandler , stepnode ) } catch ( Exception e ) { throw new KettleXMLException ( NUM00 , e ) ; } }
public void put ( int key , E value ) { int i = binarySearch ( mKeys , NUM00 , mSize , key ) ; if ( i >= NUM00 ) { mValues [ i ] = value ; } else { i = ~ i ; $F27086 ( i , mSize , mValues , DELETED , mKeys , key , value ) $F27088 ( mGarbage , mSize , mKeys , gc , i , binarySearch , key ) if ( mSize >= mKeys . length ) { $F27092 ( n , Math , mSize , mKeys ) $F4120 ( nkeys , n ) $F133 ( nvalues , n ) $F7057 ( System , mKeys , nkeys ) $F7057 ( System , mValues , nvalues ) mKeys = nkeys ; mValues = nvalues ; } $F27098 ( mSize , i , System , mKeys , mValues ) mKeys [ i ] = key ; mValues [ i ] = value ; mSize ++ ; } }
public void readData ( DataInput din ) throws IOException { $F89921 ( reference , din ) }
public float dotProduct ( DenseVector df ) { float res = NUM00 ; for ( int i = NUM00 ; i < Math . min ( size , df . getLength ( ) ) ; i ++ ) { res += u [ i ] * df . u [ i ] ; } return res ; }
private void emitCode $F72 { $F23313 worklist = new $F23313 $F72 ; worklist . add ( new Instantiation ( null , mainSubroutine ) ) ; InsnList newInstructions = new InsnList $F72 ; $F23328 newTryCatchBlocks = new ArrayList < TryCatchBlockNode > $F72 ; List $F23335 newLocalVariables = new ArrayList $F23335 $F72 ; while $F5973 ( worklist ) { Instantiation inst = worklist . removeFirst ( ) ; emitSubroutine ( inst , worklist , newInstructions , newTryCatchBlocks , newLocalVariables ) ; } instructions = newInstructions ; tryCatchBlocks = newTryCatchBlocks ; localVariables = newLocalVariables ; }
public static double stDev ( final $F31488 list ) $F148602 ( Math , variance , list )
public void trimToSize $F72 { if ( size < array . length ) { $F2027 olddata = array ; $F3936 ( array , size ) $F135 ( System , olddata , array , size ) } }
public void testSetBitZeroOutside1 $F72 { $F45030 int aSign = NUM00 ; int number = NUM00 ; byte $F3018 = { NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F43462 ( result , aNumber , number ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public static int compare ( Date left , boolean right ) { return compare ( left , right ? NUM00 : NUM00 ) ; }
private IBindingSet [ ] decodeNextChunk $F72 throws IOException { if ( nsolutions == solutionSetCount ) { if $F585 ( log ) $F8922 ( log , name , nsolutions ) $F1274 } in . readInt ( ) ; final int chunkSize = in . readInt ( ) ; final int byteLength = in . readInt ( ) ; $F4727 ( a , byteLength ) in . readFully ( a ) ; final DataInputBuffer buf = new DataInputBuffer ( a ) ; final IBindingSet [ ] t = new IBindingSet [ chunkSize ] ; for ( $F119 ( i , chunkSize ) ) { t [ i ] = decoder . decodeSolution ( buf , _BOOL ) ; if $F8415 ( log ) log . trace ( NUM00 + name + NUM00 + t [ i ] ) ; } nsolutions += chunkSize ; if $F8415 ( log ) log . trace ( NUM00 + name + NUM00 + chunkSize + NUM00 + ( SolutionSetStreamEncoder . CHUNK_HEADER_SIZE + byteLength ) + NUM00 + nsolutions ) ; return t ; }
public UDPClientSocket ( Logger logger ) { this . logger = logger ; try { $F125428 ( socket ) socket . setBroadcast ( _BOOL ) ; socket . setSendBufferSize ( $F264 ) ; socket . setReceiveBufferSize ( $F264 ) ; $F241590 ( socket ) } catch ( SocketException e ) { logger . severe ( NUM00 ) ; logger . severe ( $F5351 ( e ) ) ; $F5194 ( System ) } }
public void multiplyAllValuesBy ( final double multiplyBy , final int RoundType ) { for ( final T t : keySet ( ) ) { $F28095 ( val , mapValues , t ) switch ( RoundType ) { $F3366 val = Math . floor ( val * multiplyBy ) ; $F597 $F3366 val = Math . round ( val * multiplyBy ) ; $F597 $F3366 val = Math . ceil ( val * multiplyBy ) ; $F597 $F1267 val = val * multiplyBy ; $F597 } put ( t , ( int ) val ) ; } }
public static boolean isLevel ( Level level ) { $F397 ( level , _BOOL ) return level . intValue ( ) >= s_currentLevel . intValue ( ) ; }
protected void computeFolderChildren ( File folder , boolean isIncluded , $F806 pkgName , ArrayList vChildren , $F28330 ( inclusionPatterns ) , $F28330 ( exclusionPatterns ) ) throws JavaModelException { if ( isIncluded ) { IPackageFragment pkg = getPackageFragment ( pkgName ) ; vChildren . add ( pkg ) ; } try { $F5459 ( members , folder ) boolean hasIncluded = isIncluded ; int length = members . length ; if ( length > NUM00 ) { JavaProject javaProject = ( JavaProject ) getJavaProject ( ) ; String sourceLevel = javaProject . getOption ( JavaCore . COMPILER_SOURCE , _BOOL ) ; String complianceLevel = javaProject . getOption ( JavaCore . COMPILER_COMPLIANCE , _BOOL ) ; for ( $F119 ( i , length ) ) { File member = members [ i ] ; $F20605 ( memberName , member ) if $F3444 ( member ) { if ( Util . isValidFolderNameForPackage ( memberName , sourceLevel , complianceLevel ) ) { $F806 newNames = Util . arrayConcat ( pkgName , manager . intern ( memberName ) ) ; boolean isMemberIncluded = _BOOL ; computeFolderChildren ( member , isMemberIncluded , newNames , vChildren , inclusionPatterns , exclusionPatterns ) ; } } else { if ( ! hasIncluded && Util . isValidCompilationUnitName ( memberName , sourceLevel , complianceLevel ) ) { hasIncluded = _BOOL ; IPackageFragment pkg = getPackageFragment ( pkgName ) ; vChildren . add ( pkg ) ; } } } } } catch ( IllegalArgumentException e ) { throw new JavaModelException ( e , IJavaModelStatusConstants . ELEMENT_DOES_NOT_EXIST ) ; } catch ( CoreException e ) { throw new JavaModelException ( e ) ; } }
public static String quote ( File input ) { return $F40519 ( quote , input ) ; }
private void readFromNet $F72 throws IgniteCheckedException { try { $F725 ( inNetBuf ) $F59912 ( read , ch , inNetBuf ) if ( read == - NUM00 ) throw new IgniteCheckedException $F580 ; } catch ( IOException e ) { throw new IgniteCheckedException ( NUM00 , e ) ; } }
synchronized void clear $F72 { maps = new Maps $F72 ; $F725 ( tombstones ) $F3223 ( ramBytesUsedCurrent ) if ( mgr != null ) { mgr . removeListener ( this ) ; mgr = null ; } }
public synchronized void removeConsumer ( ImageConsumer ic ) $F130709 ( ics , ic )
$F60342 ( mSmallestWidthDp , mInPortrait )
private void updateAperture ( int newValue , long now ) { int previous = targetAperture ; targetAperture = newValue ; $F28619 ( targetAperture , Math , minAperture ) int maxAperture = Math . min ( this . maxAperture , $F11365 ( activeSockets , activeFactories ) ) ; $F106734 ( targetAperture , Math , maxAperture ) lastApertureRefresh = now ; pendings . reset ( ( minPendings + maxPendings ) / NUM00 ) ; if ( targetAperture != previous ) { logger . debug ( NUM00 , pendings . value ( ) , targetAperture , previous ) ; } }
public I buildInvocation ( Object protocolKey , I invocation ) throws ConfigException { Objects . requireNonNull ( invocation ) ; invocation = buildInvocation ( invocation ) ; LruCache < Object , I > invocationCache = _invocationCache ; if ( invocationCache != null ) { I oldInvocation ; oldInvocation = invocationCache . get ( protocolKey ) ; if ( oldInvocation != null && ! oldInvocation . isModified ( ) ) { return oldInvocation ; } if ( invocation . getURLLength ( ) < _maxURLLength ) $F1717 ( invocationCache , protocolKey , invocation ) } return invocation ; }
public WebResourceStatistics computeMark ( WebResourceStatistics wrStatistics ) { float passed = wrStatistics . getNbOfPassed ( ) ; if ( passed == - NUM00 ) { wrStatistics . setRawMark ( $F43818 ( Float ) ) ; return wrStatistics ; } float failed = wrStatistics . getNbOfFailed ( ) ; float needMoreInfo = wrStatistics . getNbOfNmi ( ) ; if ( failed == NUM00 && passed == NUM00 ) { wrStatistics . setMark ( Float . valueOf ( NUM00 ) ) ; return wrStatistics ; } float ratioNMI = needMoreInfo / ( passed + failed + needMoreInfo ) ; float result = ( ( NUM00 - ratioNMI ) * passed / ( passed + failed ) + ratioNMI * needMoreInfo / ( passed + failed + needMoreInfo ) ) * NUM00 ; wrStatistics . setMark ( result ) ; return wrStatistics ; }
public void testGcdFirstZero $F72 { $F45030 byte $F3014 = $F141109 ; int aSign = NUM00 ; int bSign = NUM00 ; byte $F3018 = $F141109 ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F141116 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public void testKingCapture $F72 throws ChessParseError { Position pos = TextIO . readFEN ( NUM00 ) ; pos . setWhiteMove ( _BOOL ) ; $F13406 ( strMoves , getMoveList , pos , _BOOL ) $F70108 ( assertEquals , strMoves ) $F100793 ( assertEquals , strMoves ) pos . setPiece ( Position . getSquare ( NUM00 , NUM00 ) , Piece . WBISHOP ) ; pos . setPiece ( Position . getSquare ( NUM00 , NUM00 ) , Piece . WPAWN ) ; strMoves = getMoveList ( pos , _BOOL ) ; $F70108 ( assertEquals , strMoves ) $F100793 ( assertEquals , strMoves ) pos . setPiece ( Position . getSquare ( NUM00 , NUM00 ) , Piece . WPAWN ) ; pos . setPiece ( Position . getSquare ( NUM00 , NUM00 ) , Piece . WPAWN ) ; strMoves = getMoveList ( pos , _BOOL ) ; $F70108 ( assertEquals , strMoves ) $F100793 ( assertEquals , strMoves ) }
public static BinaryMessage checkAndCorrect ( BinaryMessage message , int startIndex ) { boolean parityError = message . cardinality ( ) % NUM00 != NUM00 ; int syndrome = getSyndrome ( message , startIndex ) ; if ( syndrome == NUM00 ) { if ( parityError ) { message . flip ( startIndex + NUM00 ) ; } message . setCRC ( CRC . PASSED ) ; return message ; } int original = message . getInt ( NUM00 , NUM00 ) ; int index = - NUM00 ; int syndromeWeight = NUM00 ; int errors = NUM00 ; while ( index < NUM00 ) { if ( index != - NUM00 ) { if ( index > NUM00 ) { message . flip ( index - NUM00 ) ; } message . flip ( index ) ; syndromeWeight = NUM00 ; } syndrome = getSyndrome ( message , startIndex ) ; if ( syndrome > NUM00 ) { for ( $F6268 ( i ) ) { errors = Integer . bitCount ( syndrome ) ; if ( errors <= syndromeWeight ) { message . xor ( NUM00 , NUM00 , syndrome ) ; message . rotateRight ( i , startIndex , startIndex + NUM00 ) ; if ( index >= NUM00 ) { errors ++ ; } int corrected = message . getInt ( NUM00 , NUM00 ) ; if ( Integer . bitCount ( original ^ corrected ) > NUM00 ) { message . setCRC ( CRC . FAILED_CRC ) ; return message ; } message . setCRC ( CRC . PASSED ) ; return message ; } else { message . rotateLeft ( startIndex , startIndex + NUM00 ) ; syndrome = getSyndrome ( message , startIndex ) ; } } index ++ ; } } message . setCRC ( CRC . FAILED_CRC ) ; return message ; }
public static $F6689 validateAndEvaluate ( String viewName , StatementContext statementContext , List < ExprNode > expressions ) throws ViewParameterException { $F6691 ( results ) int expressionNumber = NUM00 ; StreamTypeService streamTypeService = new StreamTypeServiceImpl ( statementContext . getEngineURI ( ) , _BOOL ) ; for ( ExprNode expr : expressions ) { Object result = validateAndEvaluateExpr ( viewName , statementContext , expr , streamTypeService , expressionNumber ) ; results . add ( result ) ; expressionNumber ++ ; } return results ; }
$F1113 public static String parseRelativeDirectory $F116884 ( s ) throws SvnBindException { $F1382 ( s ) $F115 ( length , s ) String result ; if ( isUnescapedQuote ( s , length - NUM00 ) ) { int index = lastUnescapedIndexOf ( s , length - NUM00 , NUM00 ) ; assertIndex ( s , index , NUM00 ) ; result = s . substring ( index + NUM00 , length - NUM00 ) ; } else { int index = lastUnescapedIndexOf ( s , length , NUM00 ) ; assertIndex ( s , index , NUM00 ) ; $F4571 ( result , s , index ) } return unescape ( result ) ; }
private String pickEncoding ( InputSource inputSource ) { Reader reader = inputSource . getCharacterStream ( ) ; $F20092 ( reader , CHARACTER_ENCODING ) String encoding = inputSource . getEncoding ( ) ; return encoding == null ? DEFAULT_ENCODING : encoding ; }
$F1 public String generateURL ( CategoryDataset dataset , int series , int category ) { String url = this . prefix ; Comparable seriesKey = dataset . getRowKey ( series ) ; Comparable categoryKey = dataset . getColumnKey ( category ) ; boolean firstParameter = $F49413 ( url ) ; url += firstParameter ? NUM00 : NUM00 ; try { url += this . seriesParameterName + NUM00 + URLEncoder . encode ( seriesKey . toString ( ) , NUM00 ) ; url += NUM00 + this . categoryParameterName + NUM00 + URLEncoder . encode ( categoryKey . toString ( ) , NUM00 ) ; } $F91725 ( ex ) return url ; }
public boolean isIdleExpire $F72 { if $F279276 ( _lifecycle ) return _BOOL ; long now = currentTimeActual ( ) ; $F106670 ( idleExpire , _threadIdleExpireTime ) $F8943 ( idleCount , _idleCount ) if ( _idleMin < idleCount ) { long nextIdleExpire = now + _idleTimeout ; if ( _idleMax < idleCount && _idleMin < _idleMax ) { _threadIdleExpireTime . compareAndSet ( idleExpire , nextIdleExpire ) ; return _BOOL ; } else if ( idleExpire < now && _threadIdleExpireTime . compareAndSet ( idleExpire , nextIdleExpire ) ) { return _BOOL ; } } return _BOOL ; }
public void beginDisplay ( DisplayEvent event ) throws ModelControlException { IdentitySubjectModel subjectModel = getSubjectModel ( ) ; PolicyModel model = ( PolicyModel ) getModel ( ) ; super . beginDisplay ( event ) ; CCDropDownMenu menu = ( CCDropDownMenu ) getChild ( FILTER_TYPE ) ; Map supportedEntityTypes = model . getSupportedEntityTypes ( realmName ) ; OptionList entityTypes = createOptionList ( supportedEntityTypes ) ; entityTypes . add ( NUM00 , NUM00 , NUM00 ) ; menu . setOptions ( entityTypes ) ; $F187587 ( menu ) CCAddRemove child = ( CCAddRemove ) getChild ( VALUES_MULTIPLE_CHOICE_VALUE ) ; child . restoreStateData ( ) ; OptionList selected = addRemoveModel . getSelectedOptionList ( ) ; OptionList possible = helper . createOptionList ( model . getUserSSOToken ( ) , model . getUserLocale ( ) , this , getPossibleValues ( subjectModel , realmName ) ) ; child . resetStateData ( ) ; addRemoveModel . setAvailableOptionList ( possible ) ; }
private void decode64 ( ByteBuffer infile , LongArrayPointer a ) { $F2175 ( nbitplanes , N03 ) $F12496 ( tmagic ) infile . get ( tmagic ) ; if ( tmagic [ NUM00 ] != CODE_MAGIC [ NUM00 ] || tmagic [ NUM00 ] != CODE_MAGIC [ NUM00 ] ) $F11389 this . nx = infile . getInt ( ) ; this . ny = infile . getInt ( ) ; this . scale = infile . getInt ( ) ; $F219374 ( sumall , infile ) infile . get ( nbitplanes ) ; dodecode64 ( infile , a , nbitplanes ) ; a . set ( NUM00 , sumall ) ; }
private static void createScript $F72 throws Exception { $F32352 ( Class ) Connection conn = DriverManager . getConnection ( NUM00 ) ; $F11282 ( stat , conn ) $F131050 ( stat ) $F131050 ( stat ) $F131050 ( stat ) $F59 ( stat ) $F59 ( conn ) }
public static double cauchy $F72 { return Math . tan ( Math . PI * $F79524 ( uniform ) ) ; }
public void addJobGroupToNeverDelete ( String group ) { $F67023 ( group , jobGroupsToNeverDelete ) }
private WebDoc createLayout ( WebDoc doc , MWorkflow wf , int activeNode , MWFNode [ ] nodes , ArrayList nodes_ID , $F26353 ( imageMap ) ) { body b = doc . getBody ( ) ; b . addElement ( printWorkflow ( activeNode , wf , nodes , nodes_ID , imageMap ) ) ; b . addElement ( new hr $F72 ) ; b . addElement ( printDescription ( activeNode , wf , nodes , nodes_ID ) ) ; b . addElement ( new br $F72 ) ; b . addElement ( printControlPanel ( activeNode , wf , nodes , nodes_ID ) ) ; return doc ; }
$F1 public void requestPollRead $F72 { try $F5795 ( requestLoop ) catch ( Exception e ) $F173189 ( log , Level , e ) }
public MultiMatchQueryBuilder field ( String field ) $F18637 ( fields , field , this )
void encode ( OutputStream os , boolean include_h ) throws IOException { int q = params . q ; $F160532 ( os , getEncoded , f ) if ( params . basisType == NTRUSigningKeyGenerationParameters . BASIS_TYPE_STANDARD ) { IntegerPolynomial fPrimeInt = fPrime . toIntegerPolynomial ( ) ; for ( int i = NUM00 ; i < fPrimeInt . coeffs . length ; i ++ ) { fPrimeInt . coeffs [ i ] += q / NUM00 ; } os . write ( fPrimeInt . toBinary ( q ) ) ; } else { $F160532 ( os , getEncoded , fPrime ) } if ( include_h ) { os . write ( h . toBinary ( q ) ) ; } }
private void signalNoAcks $F72 { $F790 ( lock ) try $F227783 ( allAcksRcvCond ) $F796 ( lock ) }
private static String arrayToString $F23416 ( array ) { $F83 ( sb ) boolean first = _BOOL ; for ( int i : array ) { $F87 ( first , _BOOL , sb ) sb . append ( i ) ; } $F92 ( sb ) }
public static $F96 copy $F7233 ( source , target ) { int len = source . length ; if ( len > target . length ) $F75474 ( target , len ) $F135 ( System , source , target , len ) return target ; }
public double greatCircleDistance ( Location location ) { $F89853 ( location , Logger ) $F46307 ( lat1Radians , Math , this ) $F89861 ( lon1Radians , Math , this ) $F46307 ( lat2Radians , Math , location ) $F89861 ( lon2Radians , Math , location ) if ( lat1Radians == lat2Radians && lon1Radians == lon2Radians ) $F1083 double a = Math . sin ( ( lat2Radians - lat1Radians ) / NUM00 ) ; double b = Math . sin ( ( lon2Radians - lon1Radians ) / NUM00 ) ; double c = a * a + Math . cos ( lat1Radians ) * Math . cos ( lat2Radians ) * b * b ; double distanceRadians = NUM00 * Math . asin ( Math . sqrt ( c ) ) ; return Double . isNaN ( distanceRadians ) ? NUM00 : distanceRadians ; }
private List < InputSplit > parseManifest ( FileSystem fs , Path manifestPath , JobConf job ) throws IOException { List < InputSplit > splits = null ; FSDataInputStream fp = fs . open ( manifestPath ) ; JsonReader reader = new JsonReader ( new InputStreamReader ( fp , Charsets . UTF_8 ) ) ; reader . beginObject ( ) ; while $F2921 ( reader ) { String name = reader . nextName ( ) ; switch ( name ) { case VERSION_JSON_KEY : job . set ( DynamoDBConstants . EXPORT_FORMAT_VERSION , String . valueOf ( reader . nextInt ( ) ) ) ; $F597 case ENTRIES_JSON_KEY : splits = readEntries ( reader , job ) ; $F597 $F1267 $F556 ( log , name ) reader . skipValue ( ) ; $F597 } } reader . endObject ( ) ; $F79983 ( splits , Collections ) return splits ; }
$F1 public final void readFully ( $F68528 , int off , int len ) throws IOException { dis . readFully ( ba , off , len ) ; }
public void fireOperatorMoved ( Operator operator ) { List < Operator > $F19827 ( list ) ; list . add ( operator ) ; fireOperatorsMoved ( list ) ; }
public void remove ( int i ) $F106 ( individuals , i )
$F1 public void modifyVariableId ( String oldId , String newId ) { if $F1238 ( baseVar , oldId ) { baseVar = $F2934 ( newId ) ; } }
public static String repeat ( String str , int count ) { final StringBuilder result = new StringBuilder ( str . length ( ) * count ) ; $F48485 ( i , count , result , str ) $F92 ( result ) }
private void waitForStateChange ( int maxTTW ) throws MqttException { synchronized ( waiter ) { if ( ! donext ) { try $F47074 ( waiter , maxTTW ) catch ( InterruptedException e ) { log ( NUM00 ) ; $F301 ( e ) } if ( ex != null ) { throw ( MqttException ) ex ; } } donext = _BOOL ; } }
$F1 public Node pickNode ( final InferenceGraph g ) { $F725 ( treeCache ) Pair < $F27878 , Integer > bestPath = noPath ; for ( Node n : g . nodes ) { if ( ! Collections . disjoint ( n . data , varsToSolve ) ) { Pair < $F27878 , Integer > path = computeTreeToLeafs ( n ) ; if ( path . snd < bestPath . snd ) { bestPath = path ; } } } if ( bestPath == noPath ) { throw new NodeNotFoundException ( g ) ; } return bestPath . fst . head ; }
public AddUserFields $F72 { m_attributeSpecs = new ArrayList < AttributeSpec > $F72 ; }
private Integer parseInt ( String s , int flags ) { if ( convertColorNames ( flags ) ) { String c = Descriptor . convertColorName ( s ) ; $F57733 ( c , s ) } try { if ( hasLeadingZeros ( s ) ) $F1337 else { $F46721 ( Integer , s ) } } $F62108 }
private Rectangle findBounds ( int AD_WF_Node_ID ) { for ( $F2277 ( i , m_nodes ) ) { WFNode node = ( WFNode ) m_nodes . get ( i ) ; if ( node . getAD_WF_Node_ID ( ) == AD_WF_Node_ID ) return node . getBounds ( ) ; } $F1274 }
protected void stopWorkers ( Collection < WorkerThread > workers ) { if ( workers == null ) $F145688 ( workers , this ) final Iterator < WorkerThread > iter = workers . iterator ( ) ; while $F2921 ( iter ) { final WorkerThread worker = iter . next ( ) ; if ( ( worker . getStatus ( ) & ( WorkerThread . sENDED | WorkerThread . sENDING ) ) == NUM00 ) { worker . signalShutdown ( ) ; runningWorkers -- ; } } }
public ArrayList < Mapping > cloneFrame $F72 { if ( stack [ top ] == null ) $F1274 ArrayList < Mapping > clone = new ArrayList < Mapping > $F72 ; for ( Mapping map = topOfFrame ( ) ; map != null ; map = next ( ) ) $F207 ( clone , map ) return clone ; }
private static int computeHashCode ( int seed , Object ... objects ) { if $F12414 ( objects ) { return seed * HashCode . PRIME ; } int hc = seed ; for ( Object object : objects ) { hc = HashCode . PRIME * hc ; if $F2456 ( object ) { hc += Arrays . hashCode ( $F2457 ( object ) ) ; } else if ( object instanceof $F8748 ) { hc += Arrays . hashCode ( $F41256 ( object ) ) ; } else if ( object instanceof $F5078 ) { hc += Arrays . hashCode ( $F41262 ( object ) ) ; } else if $F25705 ( object ) { hc += Arrays . hashCode ( $F25706 ( object ) ) ; } else if ( object instanceof $F2469 ) { hc += Arrays . hashCode ( $F2471 ( object ) ) ; } else if ( object instanceof $F5415 ) { hc += Arrays . hashCode ( $F41250 ( object ) ) ; } else if ( object instanceof $F1986 ) { hc += Arrays . hashCode ( $F41244 ( object ) ) ; } else if ( object instanceof $F1469 ) { hc += Arrays . hashCode ( $F114168 ( object ) ) ; } else if $F2485 ( object ) { hc += Arrays . hashCode ( $F2486 ( object ) ) ; } else $F156574 ( object , hc ) } return hc ; }
protected float calculateStateTransitionPercentage ( String name , boolean flapping ) { int flapInterval = getFlapInterval ( name ) ; LinkedList $F19437 list = getFlaps ( name ) ; float lowWeight = getFlapLowWeight ( name ) ; float highWeight = getFlapHighWeight ( name ) ; float weightRange = highWeight - lowWeight ; float result = NUM00 ; for ( $F5373 ( i , list ) ) { boolean thisFlap = list . get ( i ) ; if ( flapping != thisFlap ) { float weight = lowWeight + ( weightRange * i / ( flapInterval - NUM00 ) ) ; result += weight ; } } return result / flapInterval ; }
public static String mangleName ( Method method , boolean isFull ) { $F280 ( sb ) $F167270 ( sb , method ) $F749 params = method . getParameterTypes ( ) ; for ( $F1139 ( i , params ) ) { $F84 ( sb ) sb . append ( mangleClass ( params [ i ] , isFull ) ) ; } $F92 ( sb ) }
private void saveState $F72 { savedStartOffset = offsetAttribute . startOffset ( ) ; savedEndOffset = offsetAttribute . endOffset ( ) ; hasIllegalOffsets = ( savedEndOffset - savedStartOffset != termAttribute . length ( ) ) ; savedType = typeAttribute . type ( ) ; if ( savedBuffer . length < termAttribute . length ( ) ) { savedBuffer = new char [ ArrayUtil . oversize ( termAttribute . length ( ) , Character . BYTES ) ] ; } System . arraycopy ( termAttribute . buffer ( ) , NUM00 , savedBuffer , NUM00 , termAttribute . length ( ) ) ; iterator . text = savedBuffer ; hasSavedState = _BOOL ; }
public String consumeTo ( String seq ) { $F204924 ( offset , queue , seq , pos ) if ( offset != - NUM00 ) { $F12715 ( consumed , queue , pos , offset ) $F90433 ( pos , consumed ) return consumed ; } else $F2905 ( remainder ) }
private void printOutDefinedIPs $F24643 ( definedIPs ) { $F24645 ( ipList ) for ( String ip : definedIPs ) { if $F12703 ( ip ) $F34171 ( ipList , ip ) else $F34171 ( ipList , ip ) } Collections . sort ( ipList ) ; for ( String ip : ipList ) { log . info ( ip ) ; } }
private void disposeCodec ( IoSession session ) { disposeEncoder ( session ) ; disposeDecoder ( session ) ; disposeDecoderOut ( session ) ; }
private static int transpositions ( final CharSequence first , final CharSequence second ) { int transpositions = NUM00 ; for ( $F1088 ( i , first ) ) { if $F104625 ( first , i , second ) { transpositions ++ ; } } return transpositions / NUM00 ; }
$F1 public Object parseObject ( final String source , final ParsePosition pos ) { return parser . parseObject ( source , pos ) ; }
$F1 public default Stream < TimeSeriesCollection > stream $F72 { return StreamSupport . stream ( spliterator ( ) , _BOOL ) ; }
$F13735 ( prefix , namespace , attName , attValue , xmlWriter )
private ManifestModInfo registerMod ( File file , Manifest manifest ) { ManifestModInfo mod = loadMod ( file , manifest ) ; if ( mod != null ) { if ( idMap . containsKey ( mod . getModID ( ) ) ) { ModInfo mod2 = idMap . get ( mod . getModID ( ) ) ; duplicates . put ( mod . getModID ( ) , mod ) ; duplicates . put ( mod . getModID ( ) , mod2 ) ; log . error ( NUM00 , mod . getModFile ( ) , mod2 . getModFile ( ) ) ; } else { modList . add ( mod ) ; idMap . put ( mod . getModID ( ) , mod ) ; } } return mod ; }
protected Size2D arrangeNN ( BlockContainer container , Graphics2D g2 ) { $F150084 ( blocks , container ) Block b = ( Block ) blocks . get ( NUM00 ) ; Size2D s = b . arrange ( g2 , RectangleConstraint . NONE ) ; b . setBounds ( new $F1634 ( NUM00 , NUM00 , s . width , s . height ) ) ; return new Size2D ( $F44316 ( s ) ) ; }
public static boolean isContentType ( String contentType , Message message ) { if ( contentType == null ) { return message . getContentType ( ) == null ; } else { return contentType . equals ( message . getContentType ( ) ) ; } }
private static X509Certificate generateCertificate ( String dn , int days , String applicationUri , KeyPair keys , org . opcfoundation . ua . transport . security . KeyPair issuerKeys , String ... hostNames ) throws GeneralSecurityException , IOException { PrivateKey privkey = keys . getPrivate ( ) ; PublicKey publicKey = keys . getPublic ( ) ; return generateCertificate ( dn , days , applicationUri , publicKey , privkey , issuerKeys , hostNames ) ; }
$F1431 public void handleButton1Request ( RequestInvocationEvent event ) throws ModelControlException { submitCycle = _BOOL ; AbstractAuditModel model = ( AbstractAuditModel ) getModel ( ) ; $F123284 ( ps , getChild , PROPERTY_ATTRIBUTE ) $F59547 ( subConfigName , getPageSessionAttribute , AUDIT_HANDLER_NAME ) try { Map orig = model . getEventHandlerAttributeValues ( subConfigName ) ; Map values = ps . getAttributeValues ( orig , _BOOL , _BOOL , model ) ; model . setEventHandlerAttributeValues ( subConfigName , values ) ; backToProfileViewBean ( ) ; } catch ( AMConsoleException e ) { $F196466 ( setInlineAlertMessage , TYPE_ERROR , ERROR_MESSAGE , e ) ; forwardTo ( ) ; } }
private String checkAllDependencies ( HashMap < String , ModuleDescriptor > modlist ) { for ( ModuleDescriptor md : modlist . values ( ) ) { String res = checkDependencies ( md , modlist ) ; if $F5973 ( res ) { return res ; } } $F1278 }
public void childrenRemoved ( BeanContextMembershipEvent bcme ) { for ( $F2774 ( it , bcme ) ) { $F7683 ( findAndUndo , it ) } }
public static void checkDirectoryIsWriteable ( $F1113 File directory ) throws IOException { while $F224313 ( directory ) { $F122621 ( directory ) } if $F14326 ( directory ) $F144276 ( directory ) }
public String toString $F72 { $F83 ( s ) boolean appended = _BOOL ; if ( this . weeks != NUM00 || appended ) { appended = _BOOL ; s . append ( this . weeks + NUM00 ) ; } if ( this . days != NUM00 || appended ) { appended = _BOOL ; s . append ( this . days + NUM00 ) ; } if ( this . hours != NUM00 || appended ) { appended = _BOOL ; s . append ( this . hours + NUM00 ) ; } if ( this . minutes != NUM00 || appended ) { appended = _BOOL ; s . append ( this . minutes + NUM00 ) ; } if ( this . seconds != NUM00 || appended ) { appended = _BOOL ; s . append ( this . seconds + NUM00 ) ; } if ( this . milliseconds != NUM00 || appended ) { appended = _BOOL ; s . append ( this . milliseconds + NUM00 ) ; } $F92 ( s ) }
private synchronized void writeObject $F9338 ( s ) throws IOException $F113012 ( s )
public void startEntity ( String name ) throws $F2253 $F845
public static boolean isJavaKeyword ( String name ) $F298 ( tokens , name )
protected String extractImportUrl ( final Matcher matcher ) { return matcher . group ( INDEX_URL ) ; }
$F1 public boolean equals ( Object that ) { $F3627 ( this , that , _BOOL ) $F1933 ( that , _BOOL ) $F34838 ( getClass , that , _BOOL ) Collator other = ( Collator ) that ; return ( ( strength == other . strength ) && ( decmp == other . decmp ) ) ; }
public void runTest $F72 throws Throwable { Document doc ; NodeList emList ; Node emNode ; CharacterData emText ; Node nullChild ; $F236 ( doc , load , _BOOL ) $F237 ( emList , doc ) $F238 ( emNode , emList ) $F241 ( emText , emNode ) nullChild = emText . getFirstChild ( ) ; assertNull ( NUM00 , nullChild ) ; }
Type renameTypeAsType ( Type type ) { $F1338 ( type ) if ( type . getSort ( ) == Type . OBJECT ) { String in = type . getInternalName ( ) ; String newIn = renameInternalType ( in ) ; if ( newIn != in ) { return Type . getType ( NUM00 + newIn + NUM00 ) ; } } else if ( type . getSort ( ) == Type . ARRAY ) { $F83 ( sb ) for ( int n = type . getDimensions ( ) ; n > NUM00 ; n -- ) $F86 ( sb ) sb . append ( renameType ( type . getElementType ( ) ) ) ; return Type . getType ( sb . toString ( ) ) ; } return type ; }
public static void writeFileList ( XMLOutput xmlOutput , String tagName , Iterable $F11299 listValues ) throws IOException { if ( listValues != null ) { writeFileList ( xmlOutput , tagName , listValues . iterator ( ) ) ; } }
public DPolicyConstraints ( JDialog parent ) $F15427 ( super , parent , setTitle , res , initComponents )
@ PreAuthorize ( SpringEvalExpressions . HAS_AUTH_SYSTEM_ADMIN ) $F1 public ResponseEntity < $F6877 > invalidateCaches $F72 { final $F6877 cacheNames = cacheManager . getCacheNames ( ) ; $F10635 ( LOGGER , cacheNames ) $F22620 ( cacheNames ) return ResponseEntity . ok ( cacheNames ) ; }
public static final void writeByteArrayXml ( $F96 val , String name , XmlSerializer out ) throws $F52182 { $F18827 ( val , out ) $F18823 ( out ) $F18831 ( name , out ) $F18832 ( N , val ) $F18835 ( out , Integer , N ) $F28148 ( sb , val ) for ( $F119 ( i , N ) ) { int b = val [ i ] ; int h = b > > NUM00 ; $F28151 ( sb , h ) h = b & NUM00 ; $F28151 ( sb , h ) } out . text ( sb . toString ( ) ) ; $F18825 ( out ) }
public static void writeFile ( final File destination , $F20109 ( contents ) ) throws IOException { final BufferedWriter bw = new BufferedWriter ( new FileWriter ( destination ) ) ; try { for ( String line : contents ) $F64858 ( bw , line ) $F1206 ( bw ) } $F3229 ( bw ) }
public void cancelRequestsByTAG ( Object TAG , boolean mayInterruptIfRunning ) { $F2329 ( TAG ) for ( List < RequestHandle > requestList : requestMap . values ( ) ) { if ( requestList != null ) { for ( RequestHandle requestHandle : requestList ) { if ( TAG . equals ( requestHandle . getTag ( ) ) ) requestHandle . cancel ( mayInterruptIfRunning ) ; } } } }
public static void drawSnapHorizontalMargin ( ViewTransform transform , Graphics2D g , int x1 , int x2 , int y1 , String text , boolean textOver ) { Canvas c = new Canvas $F72 ; $F23540 ( fm , c , sFont ) g . setFont ( sFont ) ; int padding = transform . getSwingDimension ( NUM00 ) ; Rectangle2D bounds = fm . getStringBounds ( text , g ) ; int tw = $F63353 ( bounds ) ; int offset = NUM00 * CONNECTION_ARROW_SIZE ; $F63332 ( x1 , x2 , temp ) int w = ( ( x2 - x1 ) - ( tw + NUM00 * padding ) ) / NUM00 ; if ( w <= padding ) { $F63333 ( g , x1 , y1 , x2 ) if ( textOver ) { offset = - NUM00 * offset / NUM00 ; } g . drawString ( text , x1 + w + padding , y1 + offset ) ; } else { g . drawLine ( x1 , y1 , x1 + w , y1 ) ; g . drawLine ( x2 - w , y1 , x2 , y1 ) ; g . drawString ( text , x1 + w + padding , ( int ) ( y1 + $F63371 ( bounds ) ) ) ; } g . drawLine ( x1 , y1 - CONNECTION_ARROW_SIZE , x1 , y1 + CONNECTION_ARROW_SIZE ) ; g . drawLine ( x2 , y1 - CONNECTION_ARROW_SIZE , x2 , y1 + CONNECTION_ARROW_SIZE ) ; }
public static GenericRecord subsetRecord ( GenericRecord record , Schema subsetSchema ) $F25228 ( subsetRecord , record , subsetSchema )
static public void queueOperation ( Context context , OperationInfo args ) { args . calculateScheduledTime ( ) ; synchronized ( sWorkQueue ) { sWorkQueue . add ( args ) ; $F8071 ( sWorkQueue ) } context . startService ( new Intent ( context , AsyncQueryServiceHelper . class ) ) ; }
private static $F198570 interpret ( String string ) { $F198570 cells = new Cell $F380 ; for ( $F1088 ( i , string ) ) { int dig = string . charAt ( i ) - NUM00 ; int col = dig % NUM00 ; int row = dig / NUM00 ; cells [ i ] = new Cell ( col , row ) ; } return cells ; }
public Shape transform ( Shape shape ) { $F104030 ( bounds , shape ) Point2D center = new $F5047 ( bounds . getCenterX ( ) , bounds . getCenterY ( ) ) ; Point2D newCenter = transform ( center ) ; $F152048 ( dx , newCenter , center ) $F152051 ( dy , newCenter , center ) AffineTransform at = AffineTransform . getTranslateInstance ( dx , dy ) ; return at . createTransformedShape ( shape ) ; }
public void list ( PrintWriter out , int indent ) { for ( $F119 ( i , indent ) ) $F21410 ( out ) out . println ( this ) ; }
private void init $F72 { setTitle ( NUM00 ) ; compPropertiesPanel = CompetitivePropertiesPanel . createCompetitivePropertiesPanel ( networkPanel , CompetitivePropsPanelType . CREATE_GROUP ) ; tabLogic . add ( compPropertiesPanel ) ; layoutPanel = new MainLayoutPanel ( _BOOL , this ) ; layoutPanel . setCurrentLayout ( CompetitiveGroup . DEFAULT_LAYOUT ) ; tabLayout . add ( layoutPanel ) ; $F36210 ( tabbedPane , tabLogic ) $F36210 ( tabbedPane , layoutPanel ) setContentPane ( tabbedPane ) ; Action helpAction = new ShowHelpAction ( compPropertiesPanel . getHelpPath ( ) ) ; addButton ( new JButton ( helpAction ) ) ; }
public static RevocationStatus check ( X509Certificate cert , X509Certificate issuerCert ) throws IOException , CertPathValidatorException { CertId certId = null ; URI responderURI = null ; try { X509CertImpl certImpl = X509CertImpl . toImpl ( cert ) ; responderURI = getResponderURI ( certImpl ) ; if ( responderURI == null ) { throw new CertPathValidatorException $F580 ; } certId = new CertId ( issuerCert , certImpl . getSerialNumberObject ( ) ) ; } catch ( CertificateException | IOException e ) { throw new CertPathValidatorException ( NUM00 , e ) ; } OCSPResponse ocspResponse = check ( Collections . singletonList ( certId ) , responderURI , issuerCert , null , null , Collections . $F7942 $F9639 ) ; return ( RevocationStatus ) ocspResponse . getSingleResponse ( certId ) ; }
public static CompositeType forAlphaComposite ( AlphaComposite ac ) { switch ( ac . getRule ( ) ) { case AlphaComposite . CLEAR : return Clear ; case AlphaComposite . SRC : if ( ac . getAlpha ( ) >= NUM00 ) { return SrcNoEa ; } else { return Src ; } case AlphaComposite . DST : return Dst ; case AlphaComposite . SRC_OVER : if ( ac . getAlpha ( ) >= NUM00 ) { return SrcOverNoEa ; } else { return SrcOver ; } case AlphaComposite . DST_OVER : return DstOver ; case AlphaComposite . SRC_IN : return SrcIn ; case AlphaComposite . DST_IN : return DstIn ; case AlphaComposite . SRC_OUT : return SrcOut ; case AlphaComposite . DST_OUT : return DstOut ; case AlphaComposite . SRC_ATOP : return SrcAtop ; case AlphaComposite . DST_ATOP : return DstAtop ; case AlphaComposite . XOR : return AlphaXor ; $F1267 throw $F86636 ; } }
public void removeTrackingIcon ( Object tag ) { if ( trackingIcons != null && trackingIcons . remove ( tag ) ) $F5795 ( repaint ) }
private List findPhonemes $F72 { $F19850 ( set ) for ( $F1139 ( i , stateMachine ) ) { if ( stateMachine [ i ] instanceof FinalState ) { FinalState fstate = ( FinalState ) stateMachine [ i ] ; if ( fstate . phoneList != null ) { for ( int j = NUM00 ; j < fstate . phoneList . length ; j ++ ) { set . add ( fstate . phoneList [ j ] ) ; } } } } return new ArrayList ( set ) ; }
public static File removeParent ( File parent , File file ) { $F22814 ( absolutePath , file ) $F22814 ( parentAbsolutePath , parent ) String newPath = absolutePath . replace ( parentAbsolutePath + NUM00 , NUM00 ) ; return new File ( newPath ) ; }
public static boolean almostEqual $F7635 ( a , b , delta ) { return Math . abs ( a - b ) <= delta ; }
public void endElement $F72 { nss . popContext ( ) ; }
public void test_fill$BIIB $F72 { byte val = Byte . MAX_VALUE ; byte $F3234 = $F10314 ; $F47119 ( Arrays , d , val ) $F47123 ( i , assertTrue , d , val ) $F47124 ( i , d , assertTrue , val ) int result ; try { Arrays . fill ( $F10314 , NUM00 , NUM00 , $F19905 ) ; result = NUM00 ; } catch ( ArrayIndexOutOfBoundsException e ) { result = NUM00 ; } catch ( IllegalArgumentException e ) { result = NUM00 ; } assertEquals ( NUM00 , NUM00 , result ) ; try { Arrays . fill ( $F10314 , - NUM00 , NUM00 , $F19905 ) ; result = NUM00 ; } catch ( ArrayIndexOutOfBoundsException e ) { result = NUM00 ; } catch ( IllegalArgumentException e ) { result = NUM00 ; } assertEquals ( NUM00 , NUM00 , result ) ; try { Arrays . fill ( $F10314 , NUM00 , NUM00 , $F19905 ) ; result = NUM00 ; } catch ( ArrayIndexOutOfBoundsException e ) { result = NUM00 ; } catch ( IllegalArgumentException e ) { result = NUM00 ; } assertEquals ( NUM00 , NUM00 , result ) ; }
private JsonWriter open ( int empty , String openBracket ) throws IOException { beforeValue ( ) ; push ( empty ) ; out . write ( openBracket ) ; return this ; }
private double calculateLog ( double value ) { return Math . log ( value ) / this . baseLog ; }
$F1 public boolean uploadFile ( String source , String dest ) { FileInputStream fis ; try { $F1705 ( file , source ) $F5335 ( fis , file ) mDBApi . putFileOverwrite ( dest , fis , file . length ( ) , null ) ; $F59 ( fis ) return _BOOL ; } catch ( DropboxUnlinkedException e ) { Log . d ( String . valueOf ( R . string . app_name ) , NUM00 , e ) ; return _BOOL ; } catch ( DropboxException e ) { Log . d ( String . valueOf ( R . string . app_name ) , NUM00 , e ) ; return _BOOL ; } catch ( FileNotFoundException e ) { Log . d ( String . valueOf ( R . string . app_name ) , NUM00 , e ) ; return _BOOL ; } $F132878 ( e , _BOOL ) }
private File createZipFileHandle $F72 throws IOException { File zipFile = File . createTempFile ( NUM00 , NUM00 , tmpOutputFolder . getRoot ( ) ) ; assertTrue ( zipFile . delete ( ) ) ; return zipFile ; }
public boolean removeHandler ( String columnName ) { if ( m_overrides == null ) return _BOOL ; else return m_overrides . remove ( columnName ) != null ; }
public boolean isEmpty $F72 { return $F4251 ( tag ) && $F10470 ( images ) ; }
$F1431 private void restoreBadges $F72 { Bundle restoredBundle = savedInstanceState ; if ( restoredBundle != null ) { if $F1710 ( restoredBundle , BADGE_FULL_TEXT_KEY ) { shouldShowBadgeWithNinePlus = restoredBundle . getBoolean ( BADGE_FULL_TEXT_KEY ) ; } if $F1710 ( restoredBundle , BUDGES_ITEM_BUNDLE_KEY ) { badgeSaveInstanceHashMap = ( HashMap < Integer , Object > ) savedInstanceState . getSerializable ( BUDGES_ITEM_BUNDLE_KEY ) ; if ( badgeSaveInstanceHashMap != null ) { for ( $F61448 ( integer , badgeSaveInstanceHashMap ) ) { BadgeHelper . forceShowBadge ( badgeList . get ( integer ) , ( BadgeItem ) badgeSaveInstanceHashMap . get ( integer ) , shouldShowBadgeWithNinePlus ) ; } } } } }
public void touch $F72 { $F3224 ( touch , System ) if ( worker != null ) { worker . touch ( ) ; } }
public CatalogEntry ( String name , Vector args ) throws CatalogException { $F10158 ( iType , entryTypes , name ) if ( iType == null ) { throw new CatalogException ( CatalogException . INVALID_ENTRY_TYPE ) ; } $F79839 ( type , iType ) try { $F10158 ( iArgs , entryArgs , type ) if ( iArgs . intValue ( ) != args . size ( ) ) { throw new CatalogException ( CatalogException . INVALID_ENTRY ) ; } } catch ( ArrayIndexOutOfBoundsException e ) { throw new CatalogException ( CatalogException . INVALID_ENTRY_TYPE ) ; } entryType = type ; this . args = args ; }
public void addMsgWaiting ( MwiType type , int count , MwiProfile profile , boolean storeMessage ) { $F127479 ( count ) messages_ . add ( new MsgWaiting ( type , count , profile , storeMessage ) ) ; }
private void pushStack ( int newTop ) { if ( stackSize == stack . length ) { $F69133 ( newStack , stackSize ) $F69133 ( newPathIndices , stackSize ) $F806 newPathNames = new String [ stackSize * NUM00 ] ; $F135 ( System , stack , newStack , stackSize ) $F135 ( System , pathIndices , newPathIndices , stackSize ) $F135 ( System , pathNames , newPathNames , stackSize ) stack = newStack ; pathIndices = newPathIndices ; pathNames = newPathNames ; } stack [ stackSize ++ ] = newTop ; }
private static void logHierarchy ( String prefix , ClassLoader classLoader ) { $F933 ( isDiagnosticsEnabled ) ClassLoader systemClassLoader ; if ( classLoader != null ) { $F52199 ( classLoaderString , classLoader ) logDiagnostic ( prefix + objectId ( classLoader ) + NUM00 + classLoaderString + NUM00 ) ; } try { systemClassLoader = ClassLoader . getSystemClassLoader ( ) ; } catch ( SecurityException ex ) { logDiagnostic ( prefix + NUM00 ) ; $F665 } if ( classLoader != null ) { StringBuffer buf = new StringBuffer ( prefix + NUM00 ) ; for ( $F589 ) { $F6407 ( buf , objectId , classLoader ) if ( classLoader == systemClassLoader ) $F86 ( buf ) try $F10338 ( classLoader ) catch ( SecurityException ex ) $F257374 ( buf ) $F84 ( buf ) if ( classLoader == null ) $F257374 ( buf ) } $F31458 ( logDiagnostic , buf ) } }
public void addGossipMember ( GossipMember member ) $F207 ( gossipMembers , member )
public static $F6877 logFiles $F72 { $F6877 $F719 ( res , fileAppenders ) ; for ( FileAppender a : fileAppenders ) res . add ( a . getFile ( ) ) ; return res ; }
public boolean isCaseSensitive $F72 $F28110 ( m_caseSensitiveBox )
public boolean isNamespaceNode ( Node n ) { if ( Node . ATTRIBUTE_NODE == n . getNodeType ( ) ) { $F48115 ( attrName , n ) return $F26612 ( attrName ) ; } return _BOOL ; }
$F1 public int hashCode $F72 { $F17043 ( hash , type ) $F252039 ( name , hash ) $F252039 ( actions , hash ) return hash ; }
public SubConfigModelImpl ( HttpServletRequest req , String serviceName , String parentId , Map map ) throws AMConsoleException { super ( req , map ) ; this . serviceName = serviceName ; this . parentId = parentId ; subConfigMeta = new SubConfigMeta ( serviceName , this ) ; subConfigMeta . setParentId ( parentId ) ; displayName = subConfigMeta . getParentDisplayName ( ) ; }
$F1 public boolean equals ( Object obj ) { if ( ! ( obj instanceof PolynomialFunction2D ) ) { return _BOOL ; } PolynomialFunction2D that = ( PolynomialFunction2D ) obj ; return Arrays . equals ( this . coefficients , that . coefficients ) ; }
public static int convertToColorInt ( String a , String r , String g , String b , boolean useAlpha ) { int alpha = useAlpha ? Integer . parseInt ( a , NUM00 ) : NUM00 ; $F241425 ( red , Integer , r ) $F241425 ( green , Integer , g ) $F241425 ( blue , Integer , b ) return Color . argb ( useAlpha ? alpha : - NUM00 , red , green , blue ) ; }
$F1 public void onAction $F72 { onAction ( ActionType . PICK ) ; }
public AbstractBinaryTraversal ( IBinaryTreeNode $F4203 node ) { $F896 ( node ) stack . add ( new Moment ( node , initialPhase ( ) ) ) ; advance ( ) ; }
$F1 public void endElement $F1947 ( uri , localName , qName ) throws SAXException { if $F1238 ( qName , TAG_ROOT ) $F845 else if $F22081 ( qName , TAG_GROUP , TAG_PROPERTY ) { SettingsItem item = $F30605 ( itemStack ) ; settingsItems . put ( item . getKey ( ) , item ) ; } else { throw new SAXException ( NUM00 + localName ) ; } }
public void cancelAll $F72 { endpoint . cancelAll ( ) ; }
$F1 public double value ( int attIndex ) { int index = locateIndex ( attIndex ) ; if ( ( index >= NUM00 ) && ( m_Indices [ index ] == attIndex ) ) $F269670 ( m_AttValues , index ) else $F1083 }
public void initialize ( Context context , TimePickerDialog timePickerDialog , int initialHoursOfDay , int initialMinutes , boolean is24HourMode ) { $F17932 ( mTimeInitialized , Log , TAG ) mTimePickerDialog = timePickerDialog ; mIs24HourMode = is24HourMode ; mHideAmPm = mAccessibilityManager . isTouchExplorationEnabled ( ) || mIs24HourMode ; mCircleView . initialize ( context , mHideAmPm ) ; $F5217 ( mCircleView ) if ( ! mHideAmPm ) { mAmPmCirclesView . initialize ( context , initialHoursOfDay < NUM00 ? AM : PM ) ; $F5217 ( mAmPmCirclesView ) } $F17934 ( res , context ) $F134655 ( hours ) $F134655 ( hours_24 ) $F134655 ( minutes ) $F808 ( hoursTexts ) $F808 ( innerHoursTexts ) $F808 ( minutesTexts ) for ( $F6268 ( i ) ) { hoursTexts [ i ] = is24HourMode ? $F134656 ( String , hours_24 , i ) : $F134656 ( String , hours , i ) ; innerHoursTexts [ i ] = $F134656 ( String , hours , i ) ; minutesTexts [ i ] = $F134656 ( String , minutes , i ) ; } mHourRadialTextsView . initialize ( res , hoursTexts , ( is24HourMode ? innerHoursTexts : null ) , mHideAmPm , _BOOL ) ; mHourRadialTextsView . setSelection ( is24HourMode ? initialHoursOfDay : hours [ initialHoursOfDay % NUM00 ] ) ; $F5217 ( mHourRadialTextsView ) mMinuteRadialTextsView . initialize ( res , minutesTexts , null , mHideAmPm , _BOOL ) ; mMinuteRadialTextsView . setSelection ( initialMinutes ) ; $F5217 ( mMinuteRadialTextsView ) setValueForItem ( HOUR_INDEX , initialHoursOfDay ) ; setValueForItem ( MINUTE_INDEX , initialMinutes ) ; int hourDegrees = ( initialHoursOfDay % NUM00 ) * HOUR_VALUE_TO_DEGREES_STEP_SIZE ; mHourRadialSelectorView . initialize ( context , mHideAmPm , is24HourMode , _BOOL , hourDegrees , isHourInnerCircle ( initialHoursOfDay ) ) ; int minuteDegrees = initialMinutes * MINUTE_VALUE_TO_DEGREES_STEP_SIZE ; mMinuteRadialSelectorView . initialize ( context , mHideAmPm , _BOOL , _BOOL , minuteDegrees , _BOOL ) ; mTimeInitialized = _BOOL ; }
protected void decodeBitmapData ( final GifFrame frame , $F96 dstPixels ) { if ( frame != null ) { rawData . position ( frame . bufferFrameStart ) ; } final int nullCode = - NUM00 ; final int npix = ( frame == null ) ? width * height : frame . iw * frame . ih ; int available , clear , code_mask , code_size , end_of_information , in_code , old_code , bits , code , count , i , datum , data_size , first , top , bi , pi ; if $F28203 ( dstPixels , npix ) $F75474 ( dstPixels , npix ) if ( prefix == null ) { $F69027 ( prefix , MAX_STACK_SIZE ) } if ( suffix == null ) $F75474 ( suffix , MAX_STACK_SIZE ) if ( pixelStack == null ) { $F83281 ( pixelStack , MAX_STACK_SIZE ) ; } data_size = read ( ) ; clear = NUM00 < < data_size ; end_of_information = clear + NUM00 ; available = clear + NUM00 ; old_code = nullCode ; code_size = data_size + NUM00 ; $F143890 ( code_mask , code_size ) ; for ( code = NUM00 ; code < clear ; code ++ ) { prefix [ code ] = NUM00 ; $F78924 ( suffix , code ) } datum = bits = count = first = top = pi = bi = NUM00 ; for ( i = NUM00 ; i < npix ; ) { if ( top == NUM00 ) { if ( bits < code_size ) { if ( count == NUM00 ) { count = readBlock ( ) ; $F65649 ( count ) bi = NUM00 ; } datum += ( ( block [ bi ] ) & NUM00 ) < < bits ; bits += NUM00 ; bi ++ ; count -- ; $F598 } code = datum & code_mask ; datum >>= code_size ; bits -= code_size ; if ( ( code > available ) || ( code == end_of_information ) ) $F5153 if ( code == clear ) { code_size = data_size + NUM00 ; $F143890 ( code_mask , code_size ) ; available = clear + NUM00 ; old_code = nullCode ; $F598 } if ( old_code == nullCode ) { pixelStack [ top ++ ] = suffix [ code ] ; old_code = code ; first = code ; $F598 } in_code = code ; if ( code == available ) { $F11740 ( pixelStack , top , first ) code = old_code ; } while ( code > clear ) { pixelStack [ top ++ ] = suffix [ code ] ; code = prefix [ code ] ; } first = ( suffix [ code ] ) & NUM00 ; $F66497 ( available , MAX_STACK_SIZE ) $F11740 ( pixelStack , top , first ) prefix [ available ] = ( short ) old_code ; $F8214 ( suffix , available , first ) available ++ ; if ( $F84469 ( available , code_mask ) && ( available < MAX_STACK_SIZE ) ) { code_size ++ ; code_mask += available ; } old_code = in_code ; } top -- ; dstPixels [ pi ++ ] = pixelStack [ top ] ; i ++ ; } for ( i = pi ; i < npix ; i ++ ) $F5629 ( dstPixels , i ) }
public synchronized String findValue ( String k ) { if ( k == null ) { for ( $F212286 ( i , nkeys ) ) if ( keys [ i ] == null ) return values [ i ] ; } else for ( $F212286 ( i , nkeys ) ) { if $F11411 ( k , keys , i ) return values [ i ] ; } $F1274 }
public static $F96 decode ( String input ) throws ParseException { if $F1277 ( input ) $F42429 $F107762 ( input58 , input ) for ( $F38840 ( i , input ) ) { $F1280 ( c , input , i ) int digit = c < NUM00 ? INDEXES [ c ] : - NUM00 ; if ( digit < NUM00 ) { throw new ParseException ( NUM00 + c + NUM00 + i , i ) ; } $F8214 ( input58 , i , digit ) } int zeros = NUM00 ; $F107776 ( zeros , input58 ) $F107762 ( decoded , input ) int outputStart = decoded . length ; for ( $F107777 ( inputStart , zeros , input58 ) ) { decoded [ -- outputStart ] = divmod ( input58 , inputStart , NUM00 , NUM00 ) ; $F107780 ( input58 , inputStart ) } $F107776 ( outputStart , decoded ) return Arrays . copyOfRange ( decoded , outputStart - zeros , decoded . length ) ; }
TemplateSubPatternAssociation ( ElemTemplate template , StepPattern pattern , String pat ) { m_pattern = pat ; m_template = template ; m_stepPattern = pattern ; m_targetString = m_stepPattern . getTargetString ( ) ; m_wild = m_targetString . equals ( NUM00 ) ; }
public boolean delete $F72 throws IOException { if $F48405 ( closed , _BOOL ) { close ( _BOOL ) ; $F3452 ( success , allocatedNodesList ) success &= nioFile . delete ( ) ; return success ; } return _BOOL ; }
public static boolean hasNoPrefix ( final AnnotatedTypeMirror annoType ) { $F1933 ( annoType , _BOOL ) for ( AnnotationMirror mirror : annoType . getAnnotations ( ) ) { $F38676 ( hasNoPrefix , mirror , _BOOL ) } return _BOOL ; }
public static void tryFormatSatisfiability ( String format ) throws IllegalFormatException { $F1431 String unused = String . format ( format , ( $F131 ) null ) ; }
public static IgniteLogger logger ( GridKernalContext ctx , AtomicReference < IgniteLogger > logRef , $F6969 cls ) { IgniteLogger log = logRef . get ( ) ; if ( log == null ) { logRef . compareAndSet ( null , ctx . log ( cls ) ) ; $F16478 ( log , logRef ) } return log ; }
public byte receiveOneByte $F72 { $F13527 ( Log , TAG ) try { acquireLock ( ) ; mServerSocket . receive ( mReceivePacket ) ; Log . d ( TAG , NUM00 + ( NUM00 + $F94795 ( mReceivePacket ) ) ) ; return $F94795 ( mReceivePacket ) ; } $F12241 ( e ) return Byte . MIN_VALUE ; }
public static List < ConstraintViolation > check ( Resource resource , ProgressMonitor monitor ) { return check ( resource , SPIN . constraint , null , monitor ) ; }
public static boolean isValidImdbId ( String imdbId ) { $F46019 ( StringUtils , imdbId , _BOOL ) return imdbId . matches ( NUM00 ) ; }
protected void showRecordedVideo $F72 { $F22814 ( absPath , mCurrentVideoFile ) Intent intent = new Intent ( this , PlayerActivity . class ) ; intent . putExtra ( PlayerActivity . EXTRA_VIDEO_PATH , absPath ) ; startActivity ( intent ) ; mCurrentVideoFile = null ; }
private void write ( $F19578 coords , int level , StringBuffer buf ) { startLine ( NUM00 , level , buf ) ; boolean isNewLine = _BOOL ; for ( $F1139 ( i , coords ) ) { $F234280 ( i , buf , TUPLE_SEPARATOR ) if ( isNewLine ) { startLine ( NUM00 , level , buf ) ; isNewLine = _BOOL ; } write ( coords [ i ] , buf ) ; if ( ( i + NUM00 ) % maxCoordinatesPerLine == NUM00 && i < coords . length - NUM00 ) $F19003 ( buf , isNewLine , _BOOL ) } $F84 ( buf ) }
protected static boolean isIntendedException ( Exception e , $F6969 clazz ) { final String message = e . getMessage ( ) ; return ( ! TextUtils . isEmpty ( message ) && message . startsWith ( clazz . getName ( ) ) ) ; }
public static void swapPivot ( DenseDoubleMatrix2D source , long diag , DenseDoubleMatrix2D s , DenseDoubleMatrix2D t ) { long swapRow = diag ; long swapCol = diag ; double maxValue = Math . abs ( source . getDouble ( diag , diag ) ) ; long rows = source . getRowCount ( ) ; long cols = source . getColumnCount ( ) ; double abs = NUM00 ; for ( long row = diag ; row < rows ; row ++ ) { for ( long col = diag ; col < cols ; col ++ ) { abs = Math . abs ( source . getDouble ( row , col ) ) ; if ( abs > maxValue ) { maxValue = abs ; swapRow = row ; swapCol = col ; } } } if ( swapRow != diag ) { swapRows ( source , swapRow , diag ) ; swapRows ( t , swapRow , diag ) ; } if ( swapCol != diag ) { swapCols ( source , swapCol , diag ) ; swapCols ( s , swapCol , diag ) ; } }
public boolean canPopupOverlapTaskBar $F72 { boolean result = _BOOL ; try { $F8108 ( sm , System ) if ( sm != null ) { sm . checkPermission ( SecurityConstants . AWT . SET_WINDOW_ALWAYS_ON_TOP_PERMISSION ) ; } } catch ( SecurityException se ) { result = _BOOL ; } return result ; }
public Job createJobForCreateCluster ( String activitiXmlClasspathResourceName , $F292037 parameters ) throws Exception $F25228 ( createJobForCreateCluster , activitiXmlClasspathResourceName , parameters )
public static $F3803 findMainClasses ( File rootDir ) throws IOException { $F24645 ( ret ) if $F1906 ( rootDir ) { return ret ; } if $F4926 ( rootDir ) { throw new IllegalArgumentException ( String . format ( $F53299 ( rootDir ) ) ) ; } findClasses ( ret , rootDir , $F3884 ( rootDir ) ) ; return ret ; }
private static String validateXML ( String string ) throws IOException { for ( $F1088 ( i , string ) ) { $F1280 ( ch , string , i ) if ( ! ( $F31339 ( ch ) || ch >= NUM00 ) ) throw new IOException ( $F11846 ( Integer , ch ) ) ; } return string ; }
public void writeToFile ( String filename ) { GridUtils . writeSpatialGridTable ( this , filename ) ; }
$F172853 ( readValues , _BOOL )
protected static boolean isAccessCompatibleWithInstantRun ( int access ) { return ( ( access & Opcodes . ACC_ABSTRACT ) == NUM00 ) && ( ( access & Opcodes . ACC_BRIDGE ) == NUM00 ) ; }
protected ASN1Sequence ( ASN1Encodable [ ] array ) { for ( $F15868 ( i , array ) ) { $F15869 ( seq , array , i ) } }
public ThreadedListenerManager ( ExecutorService pool ) { $F201038 ( managerNumber , MANAGER_COUNT ) this . pool = pool ; }
private void readObject ( ObjectInputStream in ) throws $F6427 { $F6428 ( in ) if $F11279 ( choiceLimits , choiceFormats ) $F6433 }
private void computeOffsetSegment ( LineSegment seg , int side , double distance , LineSegment offset ) { int sideSign = side == Position . LEFT ? NUM00 : - NUM00 ; double dx = seg . p1 . x - seg . p0 . x ; double dy = seg . p1 . y - seg . p0 . y ; $F25559 ( len , Math , dx , dy ) double ux = sideSign * distance * dx / len ; double uy = sideSign * distance * dy / len ; offset . p0 . x = seg . p0 . x - uy ; offset . p0 . y = seg . p0 . y + ux ; offset . p1 . x = seg . p1 . x - uy ; offset . p1 . y = seg . p1 . y + ux ; }
$F1431 public synchronized E elementAt ( int location ) { if ( location < elementCount ) { return ( E ) elementData [ location ] ; } throw arrayIndexOutOfBoundsException ( location , elementCount ) ; }
private List < QoSRule > createQoSRules ( JsonObject qosSettings ) { List < QoSRule > $F204 ( rules ) ; if $F1710 ( qosSettings , JSON_FIELD_RULES ) { JsonObject jsonRules = qosSettings . getJsonObject ( JSON_FIELD_RULES ) ; for ( String urlPatternRegExp : jsonRules . fieldNames ( ) ) { $F586 ( log , urlPatternRegExp ) JsonObject jsonRule = jsonRules . getJsonObject ( urlPatternRegExp ) ; $F55449 ( urlPattern , Pattern , urlPatternRegExp ) QoSRule rule = new QoSRule ( urlPattern ) ; boolean addRule = _BOOL ; if $F106053 ( jsonRule ) { addRule = _BOOL ; rule . setReject ( jsonRule . getDouble ( NUM00 ) ) ; } if $F106053 ( jsonRule ) { addRule = _BOOL ; rule . setWarn ( jsonRule . getDouble ( NUM00 ) ) ; } if ( addRule ) $F207 ( rules , rule ) else $F23016 ( log , urlPatternRegExp ) } } return rules ; }
private static final $F96 toOctets ( int identifier , String text ) { $F96 s = $F43004 ( text , StandardCharsets ) ; $F96 base = OctetUtils . toOctets ( AttributeType . VENDOR_SPECIFIC , identifier ) ; int maxTextSpace = Attribute . MAX_ATTRIBUTE_LENGTH - base . length ; $F96 octets ; if ( s . length > maxTextSpace ) { octets = new byte [ Attribute . MAX_ATTRIBUTE_LENGTH ] ; System . arraycopy ( s , NUM00 , octets , base . length , Attribute . MAX_ATTRIBUTE_LENGTH - base . length ) ; } else { octets = new byte $F12348 ( base , s ) ; $F11244 ( System , s , octets , base ) } $F7057 ( System , base , octets ) octets [ NUM00 ] = ( byte ) octets . length ; return octets ; }
private Double formatDoubleValue ( Double value , int places ) { $F12208 ( bd , value ) bd = bd . setScale ( places , RoundingMode . HALF_UP ) ; $F12165 ( bd ) }
$F1 public void flush $F72 throws IOException $F29882 ( out )
protected int moveOrCopyFiles ( boolean move , String what , $F5237 destFiles , $F5237 sourceFiles ) { int opCode = ( move ) ? OP_MOVE : OP_COPY ; mModifiedSrcFiles = ( move ) ? new $F5 $F72 : null ; $F30598 ( mModifiedDestFiles ) openLogfile ( ) ; onPreProcess ( what , null , null , opCode ) ; int itemCount = NUM00 ; int pos = NUM00 ; int fileCount = destFiles . length ; while ( pos < fileCount ) { File sourceFile = sourceFiles [ pos ] ; File destFile = destFiles [ pos ] ; File destRenamed = renameDuplicate ( destFile ) ; if ( osFileMoveOrCopy ( move , destRenamed , sourceFile ) ) itemCount ++ ; log ( ( ( move ) ? NUM00 : NUM00 ) , getFilenameForLog ( sourceFile ) , NUM00 , getFilenameForLog ( destRenamed ) ) ; File sourceSidecar = getSidecar ( sourceFile ) ; if ( osFileExists ( sourceSidecar ) ) { File destSidecar = getSidecar ( destRenamed ) ; if ( osFileMoveOrCopy ( move , destSidecar , sourceSidecar ) ) itemCount ++ ; log ( ( ( move ) ? NUM00 : NUM00 ) , getFilenameForLog ( sourceSidecar ) , NUM00 , getFilenameForLog ( destSidecar ) ) ; } pos ++ ; } $F2199 ( modifyCount , mModifiedDestFiles ) $F806 modifiedSourceFiles = $F20074 ( mModifiedSrcFiles ) ? mModifiedSrcFiles . toArray ( new String [ modifyCount ] ) : null ; onPostProcess ( what , modifiedSourceFiles , ( modifyCount > NUM00 ) ? mModifiedDestFiles . toArray ( new String [ modifyCount ] ) : null , itemCount , sourceFiles . length , opCode ) ; closeLogFile ( ) ; return itemCount ; }
static boolean isCOctetStringValid ( String value , int maxLength ) { $F397 ( value , _BOOL ) if $F85574 ( value , maxLength ) return _BOOL ; return _BOOL ; }
public Rectangle2D createProperBounds $F12359 ( x1 , y1 , x2 , y2 ) { $F59772 ( x , Math , x1 , x2 ) $F59772 ( y , Math , y1 , y2 ) $F14050 ( w , Math , x1 , x2 ) $F14050 ( h , Math , y1 , y2 ) return $F152596 ( x , y , w , h ) ; }
public void addClearGraphDataButton $F72 { $F79691 ( clearButton ) clearButton . setAction ( RasterPlotActions . getClearGraphAction ( this ) ) ; buttonPanel . add ( clearButton ) ; }
public static float normalizedLevenshteinDistance ( String s , String t ) { float d = levenshteinDistance ( s , t ) ; int max = Math . max ( s . length ( ) , t . length ( ) ) ; return d / ( float ) max ; }
private void createFile ( int number , String extention ) { for ( $F119 ( i , number ) ) { try { BufferedWriter output = new BufferedWriter ( new FileWriter ( new File ( textInputFolder + NUM00 + String . valueOf ( i ) + extention ) ) ) ; try { $F3410 ( output ) $F406601 ( output , String , i ) } $F3229 ( output ) } $F12241 ( e ) } }
public boolean isAnimal $F72 $F298 ( typeString , SUFFIX_ANIMAL )
public static String unifyLineSeparators ( String s , String ls ) { $F1338 ( s ) if ( ls == null ) $F185872 ( ls , System ) if ( ! $F141960 ( ls ) ) $F825 $F115 ( length , s ) $F7542 ( buffer , length ) for ( $F119 ( i , length ) ) { if $F11983 ( s , i ) { if ( ( i + NUM00 ) < length && $F10825 ( s , i ) ) { i ++ ; } buffer . append ( ls ) ; } else if $F11983 ( s , i ) $F288 ( buffer , ls ) else $F4138 ( buffer , s , i ) } $F92 ( buffer ) }
private void adjustNameAndPosition ( Node node , int deltaX , int deltaY ) { $F20605 ( originalName , node ) String uniqueName = nextUniqueName ( originalName ) ; if $F2137 ( uniqueName , originalName ) { node . setName ( uniqueName ) ; node . setCenterX ( node . getCenterX ( ) + deltaX ) ; node . setCenterY ( node . getCenterY ( ) + deltaY ) ; } }
public void addNotification ( PingNotification notification ) $F207 ( notifications , notification )
public List < Datastore > createNfsDatastore ( ClusterComputeResource cluster , FileShareRestRep fileSystem , FileSystemExportParam export , URI datacenterId , String datastoreName ) { addNfsDatastoreTag ( fileSystem , export , datacenterId , datastoreName ) ; List < Datastore > datastores = Lists . newArrayList ( ) ; String fileServer = StringUtils . substringBefore ( export . getMountPoint ( ) , NUM00 ) ; String mountPath = StringUtils . substringAfter ( export . getMountPoint ( ) , NUM00 ) ; for ( HostSystem host : cluster . getHosts ( ) ) { datastores . add ( execute ( new CreateNfsDatastore ( host , fileServer , mountPath , datastoreName ) ) ) ; addAffectedResource ( fileSystem ) ; ExecutionUtils . clearRollback ( ) ; } return datastores ; }
private void checkSize ( final int i ) { if ( i >= max_size ) { final int old_size = max_size ; max_size += increment_size ; if ( max_size <= i ) { max_size = i + increment_size + NUM00 ; } final $F806 temp = items ; $F58180 ( items , max_size ) $F135 ( System , temp , items , old_size ) increment_size = incrementSize ( increment_size ) ; } }
public Album ( Context context , Uri mediaUri ) { super ( ) ; media . add ( NUM00 , new Media ( context , mediaUri ) ) ; setCurrentPhotoIndex ( NUM00 ) ; }
$F27283 ( name , start , end , msg , max , begin , slash , checkIdentifier )
protected void initializeTaskDone ( Set < TaskImageContainer > tasks , Optional $F24548 runnableWhenDone ) { Set < CaptureSession > $F9626 ( sessionSet ) ; Map < CaptureSession , Integer > $F8690 ( sessionTaskCount ) ; for ( TaskImageContainer task : tasks ) { sessionSet . add ( task . mSession ) ; Integer currentCount = sessionTaskCount . get ( task . mSession ) ; if ( currentCount == null ) { sessionTaskCount . put ( task . mSession , NUM00 ) ; } else { sessionTaskCount . put ( task . mSession , currentCount + NUM00 ) ; } } synchronized ( mShadowTaskMap ) { for ( CaptureSession captureSession : sessionSet ) { BlockSignalProtocol protocol = new BlockSignalProtocol $F72 ; protocol . setCount ( sessionTaskCount . get ( captureSession ) ) ; final ImageShadowTask shadowTask ; shadowTask = new ImageShadowTask ( protocol , captureSession , runnableWhenDone ) ; mShadowTaskMap . put ( captureSession , shadowTask ) ; mProcessingTaskConsumer . enqueueTask ( shadowTask ) ; } } }
public void createCalibrationCharts ( String colorScheme , SortedMap $F61444 distanceTripMap , SortedMap $F61444 travelTimeTripMap , SortedMap $F61444 numberTripsPerMode , String path , String surveyName ) throws IOException { path = $F129389 ( path ) + NUM00 + path . substring ( path . lastIndexOf ( NUM00 ) , path . length ( ) ) ; getSimulationData ( distanceTripMap , travelTimeTripMap , numberTripsPerMode ) ; simulationDistDataset . calculateSharesAndTotals ( ) ; simulationTTDataset . calculateSharesAndTotals ( ) ; commonColorScheme = colorScheme ; createModeShareStackedBarChart ( surveyName + NUM00 , path + fileTripDistanceByModeBenchmark , surveyDistDataset , NUM00 , NUM00 ) ; createModeShareStackedBarChart ( NUM00 , path + fileTripDistanceByModeSimulation , simulationDistDataset , NUM00 , NUM00 ) ; createModeShareComparisonChart ( NUM00 + surveyName + NUM00 , path + fileTripDistanceByModeComparison , simulationDistDataset , surveyDistDataset , NUM00 , NUM00 ) ; createCummulativeModeShareChart ( surveyName + NUM00 , path + fileCumulativeTripDistanceByModeBenchmark , surveyDistDataset , NUM00 , NUM00 ) ; createCummulativeModeShareChart ( NUM00 , path + fileCumulativeTripDistanceByModeSimulation , simulationDistDataset , NUM00 , NUM00 ) ; createCummulativeModeShareComparisonChart ( NUM00 + surveyName + NUM00 , path + fileCumulativeTripDistanceByModeComparison , simulationDistDataset , surveyDistDataset , NUM00 , NUM00 ) ; createModeShareStackedBarChart ( surveyName + NUM00 , path + fileTripTTByModeBenchmark , surveyTTDataset , NUM00 , NUM00 ) ; createModeShareStackedBarChart ( NUM00 , path + fileTripTTByModeSimulation , simulationTTDataset , NUM00 , NUM00 ) ; createModeShareComparisonChart ( NUM00 + surveyName + NUM00 , path + fileTripTTByModeComparison , simulationTTDataset , surveyTTDataset , NUM00 , NUM00 ) ; createCummulativeModeShareChart ( surveyName + NUM00 , path + fileCumulativeTripTTByModeBenchmark , surveyTTDataset , NUM00 , NUM00 ) ; createCummulativeModeShareChart ( NUM00 , path + fileCumModeshareTTSimulation , simulationTTDataset , NUM00 , NUM00 ) ; createCummulativeModeShareComparisonChart ( NUM00 + surveyName + NUM00 , path + fileCumModeshareTTComparison , simulationTTDataset , surveyTTDataset , NUM00 , NUM00 ) ; createModeShareHistoryChart ( NUM00 , $F31599 ( path ) + fileModeshareHistory , modeShareHistoryDataset , NUM00 , NUM00 , surveyTTDataset ) ; }
public static String unquote ( String name ) { return isQuoted ( name ) ? $F4019 ( name ) : name ; }
public boolean hasLeader ( String playerName ) { return ( leader != null ) && leader . equals ( playerName ) ; }
synchronized void redo ( RTEditText editor ) { $F78304 ( redoStack , getRedoStack , editor ) if $F84882 ( redoStack ) { $F78304 ( undoStack , getUndoStack , editor ) $F232572 ( op , redoStack ) push ( op , undoStack ) ; op . redo ( editor ) ; while $F232570 ( redoStack , op ) { $F72676 ( op , redoStack ) push ( op , undoStack ) ; op . redo ( editor ) ; } } }
private static $F4203 T reportJoin ( Object r ) { if ( r instanceof AltResult ) { Throwable x ; if ( ( x = ( ( AltResult ) r ) . ex ) == null ) $F1274 if ( x instanceof CancellationException ) throw ( CancellationException ) x ; if ( x instanceof CompletionException ) throw ( CompletionException ) x ; throw new CompletionException ( x ) ; } $F1431 T t = ( T ) r ; return t ; }
public int write ( final Protein protein ) throws IOException { checkEntryHierarchy ( ) ; if ( entryHierarchy != null ) { for ( ProteinXref xref : protein . getCrossReferences ( ) ) { final SimpleProtein simpleProtein = SimpleProtein . valueOf ( protein , xref , entryHierarchy ) ; if ( simpleProtein != null ) { final SimpleHash model = buildModelMap ( simpleProtein , entryHierarchy ) ; Writer writer = null ; try { final Template temp = freeMarkerConfig . getTemplate ( freeMarkerTemplate ) ; checkTempDirectory ( tempDirectory ) ; if ( ! $F22072 ( tempDirectory , File ) ) { tempDirectory = tempDirectory + File . separator ; } $F4377 ( gen , UrlFriendlyIdGenerator ) String urlFriendlyId = gen . generate ( xref . getIdentifier ( ) ) ; final Path newResultFile = Paths . get ( tempDirectory + urlFriendlyId + NUM00 ) ; resultFiles . add ( newResultFile ) ; writer = Files . newBufferedWriter ( newResultFile , characterSet ) ; temp . process ( model , writer ) ; $F1206 ( writer ) } catch ( TemplateException e ) $F302 ( e ) $F12241 ( e ) $F14364 ( writer ) } } } $F1082 }
public void testCasts $F72 { String sql_begin = NUM00 ; $F20724 sql_tests = new String [ ] [ ] { $F4582 , $F4582 , $F4582 , $F4582 , $F4582 , $F4582 , $F4582 } ; String sql_end = NUM00 ; $F1350 ( sql , sql_begin ) $F1350 ( sqle , sql_begin ) for ( $F1139 ( i , sql_tests ) ) { if ( i > NUM00 ) { $F84 ( sql ) $F84 ( sqle ) } sql . append ( sql_tests [ i ] [ NUM00 ] ) ; sqle . append ( sql_tests [ i ] [ NUM00 ] ) ; } sql . append ( sql_end ) ; sqle . append ( sql_end ) ; $F806 r = convert . convert ( sql . toString ( ) ) ; assertEquals ( sqle . toString ( ) , r [ NUM00 ] ) ; }
private boolean saveMacro $F72 { if ( firstTime ) { try $F7595 ( Thread , firstTimeSleep ) $F3101 ( e ) } firstTime = _BOOL ; $F2175 ( macroAccy , macroSize ) int index = NUM00 ; int accyNum = NUM00 ; accyNum = getAccyRow ( macroAccy , index , textAccy1 , accyTextField1 , cmdButton1 ) ; $F7879 ( accyNum , _BOOL ) if ( accyNum > NUM00 ) { index += NUM00 ; } accyNum = getAccyRow ( macroAccy , index , textAccy2 , accyTextField2 , cmdButton2 ) ; $F7879 ( accyNum , _BOOL ) if ( accyNum > NUM00 ) { index += NUM00 ; } accyNum = getAccyRow ( macroAccy , index , textAccy3 , accyTextField3 , cmdButton3 ) ; $F7879 ( accyNum , _BOOL ) if ( accyNum > NUM00 ) { index += NUM00 ; } accyNum = getAccyRow ( macroAccy , index , textAccy4 , accyTextField4 , cmdButton4 ) ; $F7879 ( accyNum , _BOOL ) if ( accyNum > NUM00 ) { index += NUM00 ; } accyNum = getAccyRow ( macroAccy , index , textAccy5 , accyTextField5 , cmdButton5 ) ; $F7879 ( accyNum , _BOOL ) if ( accyNum > NUM00 ) { index += NUM00 ; } accyNum = getAccyRow ( macroAccy , index , textAccy6 , accyTextField6 , cmdButton6 ) ; $F7879 ( accyNum , _BOOL ) if ( accyNum > NUM00 ) { index += NUM00 ; } accyNum = getAccyRow ( macroAccy , index , textAccy7 , accyTextField7 , cmdButton7 ) ; $F7879 ( accyNum , _BOOL ) if ( accyNum > NUM00 ) { index += NUM00 ; } if ( ! isUsb ) { accyNum = getAccyRow ( macroAccy , index , textAccy8 , accyTextField8 , cmdButton8 ) ; $F7879 ( accyNum , _BOOL ) if ( accyNum > NUM00 ) { index += NUM00 ; } accyNum = getAccyRow ( macroAccy , index , textAccy9 , accyTextField9 , cmdButton9 ) ; $F7879 ( accyNum , _BOOL ) if ( accyNum > NUM00 ) { index += NUM00 ; } } accyNum = getAccyRow ( macroAccy , index , textAccy10 , accyTextField10 , cmdButton10 ) ; if ( accyNum < NUM00 ) { JOptionPane . showMessageDialog ( this , rb . getString ( NUM00 ) , rb . getString ( NUM00 ) , JOptionPane . ERROR_MESSAGE ) ; return _BOOL ; } processMemory ( _BOOL , _BOOL , macroNum , macroAccy ) ; return _BOOL ; }
public void writeIntoSPTKLF0File ( String sptkFileName ) throws IOException { LEDataOutputStream lf0Data = new LEDataOutputStream ( new BufferedOutputStream $F4443 ( sptkFileName ) ) ; for ( int i = NUM00 ; i < this . contour . length ; i ++ ) { double f0Val = contour [ i ] ; if ( contour [ i ] == NUM00 ) { lf0Data . writeFloat ( NEGATIVE_MAXIMUM ) ; } else { lf0Data . writeFloat ( ( float ) Math . log ( contour [ i ] ) ) ; } } $F1206 ( lf0Data ) $F59 ( lf0Data ) }
public static Thread start ( long timeout ) { return start ( Thread . currentThread ( ) , timeout ) ; }
public static Element find ( Node parent , String name ) { $F9040 ( list , parent ) for ( $F85554 ( i , list ) ) { $F61359 ( n , list , i ) if ( n instanceof Element ) { $F6721 ( e , n ) if ( name . equals ( e . getAttribute ( NUM00 ) ) ) { return e ; } } Element r = find ( n , name ) ; $F21525 ( r ) } $F1274 }
final boolean transferAfterCancelledWait ( Node node ) { if ( compareAndSetWaitStatus ( node , Node . CONDITION , NUM00 ) ) $F9278 ( enq , node , _BOOL ) while ( ! isOnSyncQueue ( node ) ) $F5756 ( Thread ) return _BOOL ; }
public static RE mkStar ( RE x ) { if $F22081 ( x , epsilon , empty ) { return epsilon ; } RE res = new RE ( ReOp . STAR ) ; res . unaryArg = x ; return res ; }
public void remove ( final Object element ) { $F46709 ( oldSelection , selection ) $F12396 ( rv , selection , element ) $F308 ( rv , fireSelectionChanged , oldSelection , selection ) oldSelection = null ; }
$F1 public void mouseClicked ( MouseEvent evt ) { delegate . mouseMoved ( evt ) ; }
public void printf ( Locale locale , String format , Object ... args ) $F103860 ( out , locale , format , args )
public void transform ( Source xmlSource , Result outputTarget ) throws TransformerException { transform ( xmlSource , outputTarget , _BOOL ) ; }
public void testSortsAttributesBeforeElements $F72 throws Exception $F234199 ( dom1 , XppFactory , dom2 , assertEquals , comparator , xpath )
public void addSuffix ( DalvInsn insn ) $F207 ( suffix , insn )
$F1 public $F987 listOptions $F72 { $F994 ( newVector ) $F9007 ( newVector ) $F1007 ( newVector ) }
private void closeSelector $F72 { if $F23014 ( selector ) { $F51622 ( log ) for ( SelectionKey key : selector . keys ( ) ) U . close ( key . channel ( ) , log ) ; $F51622 ( log ) U . close ( selector , log ) ; } }
public static Number sub ( Number a , Number b ) { if $F71585 ( isFloatingPoint , a , b ) { return a . doubleValue ( ) - b . doubleValue ( ) ; } else { return a . longValue ( ) - b . longValue ( ) ; } }
public Builder requiredAttributes $F74419 ( nameOrOIDs ) $F28185 ( requiredAttributes , Arrays , nameOrOIDs )
private void showHistoryDialog $F72 { JBList commandsList = new JBList ( HistoryUtils . getCommandsFromHistory ( ) ) ; commandsList . setCellRenderer ( new HistoryListCellRenderer $F72 ) ; commandsList . setEmptyText ( NUM00 ) ; commandsList . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; $F64831 ( buttons ) int result = JOptionPane . showOptionDialog ( toolWindowContent , commandsList , NUM00 , JOptionPane . YES_NO_CANCEL_OPTION , JOptionPane . PLAIN_MESSAGE , null , buttons , buttons [ NUM00 ] ) ; if ( result == NUM00 ) { updateUiFromCommand ( ( Command ) commandsList . getSelectedValue ( ) ) ; } }
public $F24291 ( count )
protected static $F96 read ( InputStream is ) throws IOException { final boolean close = _BOOL ; $F1538 ( baos ) try { int i ; $F254305 ( i , is , baos ) } finally { try { $F177970 ( close , is ) $F59 ( baos ) } catch ( Exception ex ) { log . warn ( NUM00 + ex , ex ) ; } } $F11316 ( baos ) }
public static $F4203 Streamable $F4203 fromPublisher ( final $F40798 publisher ) { Objects . requireNonNull ( publisher ) ; final SeqSubscriber $F4203 sub = SeqSubscriber . subscriber ( ) ; publisher . subscribe ( sub ) ; return fromStream ( sub . stream ( ) ) ; }
public ProtobufConnection ( Listener $F17453 handler , MessageType prototype , int maxMessageSize , int timeoutMillis ) { this . handler = handler ; this . prototype = prototype ; this . maxMessageSize = Math . min ( maxMessageSize , Integer . MAX_VALUE - NUM00 ) ; setTimeoutEnabled ( _BOOL ) ; setSocketTimeout ( timeoutMillis ) ; }
$F98646 ( response , data , decodeOptions , bitmap , mMaxWidth , mMaxHeight , mDecodeConfig , BitmapFactory , _BOOL , actualWidth , actualHeight , desiredWidth , getResizedDimension , mScaleType , desiredHeight , findBestSampleSize , tempBitmap , Bitmap , Response , HttpHeaderParser )
public Notification find ( Integer notificationID ) { Notification notification = new Notification ( context , notificationID , null ) ; if ( notification . getAttributes ( ) == null ) notification . loadAttributesFromPreferences ( ) ; return notification ; }
public GreenGradient ( int maxCount ) { this . maxCount = maxCount ; factor = maxCount / Math . log ( maxCount ) ; }
public static void writeHistogram ( TDoubleDoubleHashMap distr , String filename ) throws $F27136 { $F142425 ( aWriter , IOUtils , filename ) $F3410 ( aWriter ) $F1769 ( aWriter ) $F1986 keys = distr . keys ( ) ; Arrays . sort ( keys ) ; for ( double key : keys ) { $F406601 ( aWriter , String , key ) $F3410 ( aWriter ) aWriter . write ( String . valueOf ( distr . get ( key ) ) ) ; $F1769 ( aWriter ) } $F59 ( aWriter ) }
public static $F4203 CompletionStage $F4203 dereference ( CompletionStage < ? extends CompletionStage $F4203 > stage ) { return stage . thenCompose ( Identity . INSTANCE ) ; }
public static Number plus ( Character left , Number right ) { return NumberNumberPlus . plus ( Integer . valueOf ( left ) , right ) ; }
public static String clipStringIfNecessary ( JComponent c , FontMetrics fm , String string , int availTextWidth ) { if ( $F158251 ( string ) ) $F2455 int textWidth = SwingUtilities2 . stringWidth ( c , fm , string ) ; if ( textWidth > availTextWidth ) { return SwingUtilities2 . clipString ( c , fm , string , availTextWidth ) ; } return string ; }
public boolean removeElement ( Object obj ) { synchronized ( actions ) { if ( allowToChange ) { $F12396 ( result , actions , obj ) if $F2979 ( actions ) { $F60488 ( headTask , cancel ) } return result ; } } return _BOOL ; }
public static boolean isCglibProxy ( Object object ) { return ClassUtils . isCglibProxyClass ( object . getClass ( ) ) ; }
public void resetReferences $F72 { $F10834 ( _refs ) }
public void addSlide ( $F4170 Fragment fragment ) { fragments . add ( fragment ) ; addBackgroundColor ( Color . TRANSPARENT ) ; $F4176 ( pagerAdapter ) }
public static $F806 wrapString ( $F2304 String str , int maxWidth , $F5466 $F806 output ) { if ( output == null ) { output = new String [ ( int ) ( ( str . length ( ) / maxWidth ) * NUM00 + NUM00 ) ] ; } int lineStart = NUM00 ; int arrayIndex = NUM00 ; int i ; for ( $F23302 ( i , str ) ) { $F1280 ( c , str , i ) if ( c == NUM00 ) { output = addString ( output , str . substring ( lineStart , i ) , arrayIndex ++ ) ; lineStart = i + NUM00 ; } else if ( i - lineStart == maxWidth ) { output = addString ( output , str . substring ( lineStart , i ) , arrayIndex ++ ) ; lineStart = i ; } } if ( lineStart != i || i == NUM00 ) { output = addString ( output , str . substring ( lineStart ) , arrayIndex ++ , output . length + NUM00 ) ; } if ( arrayIndex < output . length ) $F10812 ( output , arrayIndex ) return output ; }
$F15683 ( listener , changingListeners )
private static FloatBuffer createVertexArray $F74143 ( coords ) { $F29774 ( bb , ByteBuffer , coords ) $F16706 ( bb , ByteOrder ) $F16708 ( fb , bb ) fb . put ( coords ) ; $F16709 ( fb ) return fb ; }
protected void publish $F72 throws MqttException , IOException { sampleClientPub = new SampleAsyncWait ( url , clientIdPub , cleanSession , quietMode , userName , password ) ; if ( sampleClientPub != null ) { String topic = NUM00 ; int qos = NUM00 ; String message = NUM00 ; try { sampleClientPub . publish ( topic , qos , message . getBytes ( ) ) ; } $F86388 ( e ) } }
public static void cleanDirectory ( File directory ) throws IOException $F189472 ( directory , message , files , exception , file , forceDelete , ioe )
private $F131 invWmSubBand ( Image img , $F1986 wm , int n , double threshold ) { int m = NUM00 ; double z = NUM00 ; double v = NUM00 ; for ( int i = NUM00 ; i < img . getWidth ( ) * img . getHeight ( ) ; i ++ ) { if ( img . getData ( ) [ i ] > threshold ) { z += ( img . getData ( ) [ i ] * wm [ i % n ] ) ; v += Math . abs ( img . getData ( ) [ i ] ) ; m ++ ; } } return $F42238 ( m , z , v ) ; }
public static void moveToDirectory $F42859 ( src , destDir , createDestDir ) throws IOException { $F896 ( src ) $F896 ( destDir ) $F130782 ( src ) if $F3444 ( src ) { moveDirectoryToDirectory ( src , destDir , createDestDir ) ; } else { moveFileToDirectory ( src , destDir , createDestDir ) ; } }
private static TungstenProperties loadSecurityPropertiesFromFile ( String propertiesFileLocation ) throws ConfigurationException { TungstenProperties securityProps = null ; FileInputStream securityConfigurationFileInputStream = null ; if ( propertiesFileLocation == null && ClusterConfiguration . getClusterHome ( ) == null ) { throw $F82717 ; } File securityPropertiesFile ; if ( propertiesFileLocation == null ) { File clusterConfDirectory = ClusterConfiguration . getDir ( ClusterConfiguration . getGlobalConfigDirName ( ClusterConfiguration . getClusterHome ( ) ) ) ; securityPropertiesFile = new File ( clusterConfDirectory . getPath ( ) , SecurityConf . SECURITY_PROPERTIES_FILE_NAME ) ; } else $F94463 ( securityPropertiesFile , propertiesFileLocation ) try { securityProps = new TungstenProperties $F72 ; $F5335 ( securityConfigurationFileInputStream , securityPropertiesFile ) securityProps . load ( securityConfigurationFileInputStream , _BOOL ) ; closeSecurityConfigurationFileInputStream ( securityConfigurationFileInputStream ) ; } catch ( FileNotFoundException e ) { String msg = MessageFormat . format ( $F53299 ( securityPropertiesFile ) ) ; logger . debug ( msg , e ) ; throw new ConfigurationException ( msg ) ; } catch ( IOException e ) { String msg = MessageFormat . format ( NUM00 , securityPropertiesFile . getPath ( ) , e . getMessage ( ) ) ; logger . debug ( msg , e ) ; throw new ConfigurationException ( msg ) ; } $F18632 ( closeSecurityConfigurationFileInputStream , securityConfigurationFileInputStream ) if $F585 ( logger ) { logger . debug ( MessageFormat . format ( $F53299 ( securityPropertiesFile ) ) ) ; } securityProps . put ( SecurityConf . SECURITY_PROPERTIES_PARENT_FILE_LOCATION , securityPropertiesFile . getAbsolutePath ( ) ) ; return securityProps ; }
public static void close ( InputStream in ) { try $F6399 ( in ) catch ( IOException ioE ) $F845 }
private synchronized void clearScanFiles $F72 { if $F20074 ( allFiles ) { $F10531 ( it , allFiles ) File file = null ; while $F2921 ( it ) { file = ( File ) it . next ( ) ; $F1900 ( file ) } $F725 ( allFiles ) } }
private static boolean intersectsLatEdge ( S2Point a , S2Point b , double lat , S1Interval lng ) { S2Point z = S2Point . normalize ( S2 . robustCrossProd ( a , b ) ) ; if ( z . z < NUM00 ) { z = S2Point . neg ( z ) ; } S2Point y = S2Point . normalize ( S2 . robustCrossProd ( z , new S2Point $F25461 ) ) ; $F23238 ( x , S2Point , y , z ) $F33859 ( sinLat , Math , lat ) if ( Math . abs ( sinLat ) >= x . z ) { return _BOOL ; } double cosTheta = sinLat / x . z ; double sinTheta = $F33863 ( Math , cosTheta ) ; $F3567 ( theta , Math , sinTheta , cosTheta ) S1Interval abTheta = S1Interval . fromPointPair ( Math . atan2 ( a . dotProd ( y ) , a . dotProd ( x ) ) , Math . atan2 ( b . dotProd ( y ) , b . dotProd ( x ) ) ) ; if $F105 ( abTheta , theta ) { S2Point isect = S2Point . add ( S2Point . mul ( x , cosTheta ) , S2Point . mul ( y , sinTheta ) ) ; if ( lng . contains ( $F33880 ( Math , isect ) ) ) { return _BOOL ; } } if ( abTheta . contains ( - theta ) ) { S2Point intersection = S2Point . sub ( S2Point . mul ( x , cosTheta ) , S2Point . mul ( y , sinTheta ) ) ; if ( lng . contains ( $F33880 ( Math , intersection ) ) ) { return _BOOL ; } } return _BOOL ; }
public static void execAndCheckOutput ( ProcessBuilder builder , String expectedOut , String expectedErr ) throws Exception { $F111135 ( process , builder ) $F171451 ( executorService , Executors ) try { $F171452 errFuture = executorService . submit ( $F171453 ( streamToStringCallable , process ) ) ; $F171452 outFuture = executorService . submit ( $F171458 ( streamToStringCallable , process ) ) ; assertEquals ( expectedOut , $F171463 ( outFuture , TimeUnit ) ) ; assertEquals ( expectedErr , $F171463 ( errFuture , TimeUnit ) ) ; } finally { $F733 ( executorService ) $F84402 ( process ) } }
private void startFileBasedMerge $F72 throws CarbonSortKeyAndGroupByException { try { $F733 ( executorService ) executorService . awaitTermination ( NUM00 , TimeUnit . DAYS ) ; $F733 ( dataSorterAndWriterExecutorService ) dataSorterAndWriterExecutorService . awaitTermination ( NUM00 , TimeUnit . DAYS ) ; } catch ( InterruptedException e ) { throw new CarbonSortKeyAndGroupByException ( NUM00 , e ) ; } }
public void insertUpdate ( DocumentEvent e ) { $F42258 ( dirty , setDirty , _BOOL ) }
public DateTimeParseException ( String message , CharSequence parsedData , int errorIndex ) { super ( message ) ; this . parsedString = parsedData . toString ( ) ; this . errorIndex = errorIndex ; }
private boolean areParallelSiblings ( Component source , Component target , int axis ) { ComponentInfo sourceInfo = getComponentInfo ( source ) ; ComponentInfo targetInfo = getComponentInfo ( target ) ; Spring sourceSpring ; Spring targetSpring ; if ( axis == HORIZONTAL ) { sourceSpring = sourceInfo . horizontalSpring ; targetSpring = targetInfo . horizontalSpring ; } else { sourceSpring = sourceInfo . verticalSpring ; targetSpring = targetInfo . verticalSpring ; } ArrayList sourcePath = tmpParallelSet ; $F725 ( sourcePath ) Spring spring = sourceSpring . getParent ( ) ; while ( spring != null ) { sourcePath . add ( spring ) ; $F10337 ( spring ) } spring = targetSpring . getParent ( ) ; while ( spring != null ) { if $F105 ( sourcePath , spring ) { $F725 ( sourcePath ) while ( spring != null ) { if ( spring instanceof ParallelGroup ) { return _BOOL ; } $F10337 ( spring ) } return _BOOL ; } $F10337 ( spring ) } $F725 ( sourcePath ) return _BOOL ; }
protected Object readObjectImpl ( Class cl ) throws IOException { try { $F71976 ( obj , cl ) $F92209 ( _refs ) _refs . add ( obj ) ; HashMap fieldMap = getFieldMap ( cl ) ; int code = read ( ) ; for ( ; code >= NUM00 && code != NUM00 ; code = read ( ) ) { unread ( ) ; Object key = readObject ( ) ; Field field = ( Field ) fieldMap . get ( key ) ; if ( field != null ) { Object value = $F49341 ( readObject , field ) ; field . set ( obj , value ) ; } else { Object value = readObject ( ) ; } } $F191237 ( code , expect ) try { Method method = cl . getMethod ( NUM00 , $F33934 ) ; return method . invoke ( obj , $F3297 ) ; } $F3957 return obj ; } $F8012 ( e ) catch ( Exception e ) { throw new IOExceptionWrapper ( e ) ; } }
public void testCase18 $F72 { $F103294 $F45033 $F89724 int aSign = NUM00 ; int bSign = NUM00 ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F10683 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F10686 ( assertEquals , result ) }
protected static $F7329 lsrImmediate $F7334 ( offset , environment , instructions , registerNodeValue , immediateNodeValue ) { $F7336 ( shifterOperand , environment ) $F7336 ( shifterCarryOut , environment ) long baseOffset = offset ; if $F3057 ( immediateNodeValue ) { $F7336 ( tmpVar1 , environment ) instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dWordSize , registerNodeValue , wordSize , minusThirtyOneSet , wordSize , tmpVar1 ) ) ; $F7364 ( instructions , ReilHelpers , baseOffset , wordSize , tmpVar1 , byteSize , oneSet , shifterCarryOut ) return new $F7329 ( String . valueOf ( NUM00 ) , shifterCarryOut ) ; } else { $F7336 ( tmpVar1 , environment ) $F7336 ( tmpVar2 , environment ) instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dWordSize , registerNodeValue , wordSize , NUM00 + immediateNodeValue , qWordSize , tmpVar1 ) ) ; $F7364 ( instructions , ReilHelpers , baseOffset , qWordSize , tmpVar1 , dWordSize , bitMaskAllBitsSet , shifterOperand ) instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dWordSize , registerNodeValue , wordSize , String . valueOf ( - ( Integer . decode ( immediateNodeValue ) - NUM00 ) ) , dWordSize , tmpVar2 ) ) ; $F7364 ( instructions , ReilHelpers , baseOffset , dWordSize , tmpVar2 , byteSize , oneSet , shifterCarryOut ) $F7348 ( shifterOperand , shifterCarryOut ) } }
public static PlainText plain ( int text ) $F21034 ( plain , Integer , text )
$F41720 ( value , absMin , absMax , absValue , Math )
public static boolean isToday ( Calendar _calendar ) { $F4377 ( now , Calendar ) if ( $F21625 ( now , Calendar ) == $F21625 ( _calendar , Calendar ) ) { if ( $F21623 ( now , Calendar ) == $F21623 ( _calendar , Calendar ) ) { if ( $F183169 ( now , Calendar , _calendar ) ) { return _BOOL ; } } } return _BOOL ; }
public void start $F72 { $F3876 ( managedPairs , createPort ) fixNames ( ) ; singlePorts . addObserver ( observer , _BOOL ) ; for ( Ports $F6574 ports : multiPortsList ) { ports . addObserver ( observer , _BOOL ) ; } }
protected void sprint ( double doubleField ) $F45719 ( sprint , String , doubleField )
public static Bitmap convertYuvImageToBitmap ( $F4170 final YuvImage yuvImage ) { $F1538 ( out ) yuvImage . compressToJpeg ( new Rect $F28468 ( yuvImage ) , NUM00 , out ) ; $F1208 ( imageBytes , out ) try $F881 ( out ) $F17556 ( Log , LOG_TAG , e ) return BitmapFactory . decodeByteArray ( imageBytes , NUM00 , imageBytes . length ) ; }
$F118841 ( value , Double )
public boolean hasFeature ( String feature , String version ) { if $F3057 ( feature ) { return $F3580 ( version ) || version . equals ( NUM00 ) ; } return _BOOL ; }
private StoragePort assignPortBasedOnUsage ( $F42521 matchingTargetPorts , Map < StoragePort , Integer > portUsage ) { StoragePort foundPort = null ; for ( StoragePort matchedPort : matchingTargetPorts ) { if $F4257 ( portUsage , matchedPort ) $F248856 ( portUsage , matchedPort ) if ( foundPort == null ) { foundPort = matchedPort ; } else { if ( portUsage . get ( matchedPort ) < portUsage . get ( foundPort ) ) { foundPort = matchedPort ; } } } if ( foundPort != null ) { portUsage . put ( foundPort , portUsage . get ( foundPort ) + NUM00 ) ; } return foundPort ; }
public ExternalEvent nextEvent $F72 { if $F10471 ( queue ) { return new ExternalEvent ( Double . MAX_VALUE ) ; } ExternalEvent ee = queue . get ( nextEventIndex ) ; nextEventIndex ++ ; if $F6389 ( nextEventIndex , queue ) { queue = readEvents ( nrofPreload ) ; nextEventIndex = NUM00 ; } return ee ; }
public void appendToBuffer ( StringBuilder buf ) { Iterator $F42619 iter = points . iterator ( ) ; while $F2921 ( iter ) { $F1986 data = iter . next ( ) ; for ( $F1139 ( i , data ) ) $F70285 ( i , buf , data ) if $F2921 ( iter ) $F86 ( buf ) } }
public void updateComboBox ( JComboBox < Track > box ) { $F213890 ( box ) box . addItem ( null ) ; List < Track > tracks = getTrackByNameList ( null ) ; for ( Track track : tracks ) $F86251 ( box , track ) }
public RefactoringSessionTransformer ( final boolean projects ) { fProjects = projects ; }
$F1 public $F987 listOptions $F72 { $F994 ( newVector ) $F9007 ( newVector ) $F9007 ( newVector ) $F1007 ( newVector ) }
public CompareResult open $F72 { final ContentComparator [ ] comparatorArray = comparators . toArray ( new ContentComparator $F2313 ( comparators ) ) ; final CustomCompareEditorInput input = new CustomCompareEditorInput ( modified , original , ancestor , comparatorArray , compareConfiguration , externalCompareHandler ) ; if ( compareConfiguration . isLeftEditable ( ) || compareConfiguration . isRightEditable ( ) ) { compareConfiguration . setProperty ( NUM00 , Boolean . FALSE ) ; input . setAlwaysDirty ( alwaysDirty ) ; } input . addSaveListener ( new ProxyCompareSaveListener $F72 ) ; log . info ( MessageFormat . format ( NUM00 , getLabelNOLOC ( modified ) , getLabelNOLOC ( original ) ) ) ; compareUIType . openCompareUI ( input ) ; final boolean contentsIdentical = ( input . getCompareResult ( ) == null ) ; final boolean contentsSaved = ( input . getSavedContents ( ) . length > NUM00 ) ; return new CompareResult ( contentsIdentical , input . wasOKPressed ( ) , contentsSaved ) ; }
protected void engineSetMode ( String mode ) { if $F14072 ( mode ) $F18931 ( mode ) }
protected void addResource ( String resource ) { if $F20899 ( StringUtils , resource ) $F207 ( resources , resource ) }
public static boolean isNumeric ( String maybeNumeric ) { return maybeNumeric != null && maybeNumeric . matches ( NUM00 ) ; }
public void openKeyStore ( File keyStoreFile , String defaultPassword ) { try { if $F48790 ( keyStoreFile ) { JOptionPane . showMessageDialog ( frame , $F36702 ( MessageFormat , res , keyStoreFile ) , res . getString ( NUM00 ) , JOptionPane . WARNING_MESSAGE ) ; $F665 } if ( isKeyStoreFileOpen ( keyStoreFile ) ) { JOptionPane . showMessageDialog ( frame , $F36702 ( MessageFormat , res , keyStoreFile ) , res . getString ( NUM00 ) , JOptionPane . WARNING_MESSAGE ) ; $F665 } Password password = ( defaultPassword != null ) ? new Password $F81517 ( defaultPassword ) : null ; KeyStore openedKeyStore = null ; boolean firstTry = _BOOL ; while ( _BOOL ) { $F5178 ( password , showPasswordDialog , keyStoreFile ) $F2329 ( password ) try { openedKeyStore = KeyStoreUtil . load ( keyStoreFile , password ) ; $F597 } catch ( KeyStoreLoadException klex ) { if ( defaultPassword == null || ! firstTry ) { int tryAgainChoice = showErrorMessage ( keyStoreFile , klex ) ; if ( tryAgainChoice == JOptionPane . NO_OPTION ) $F932 } } password . nullPassword ( ) ; password = null ; firstTry = _BOOL ; } if ( openedKeyStore == null ) { JOptionPane . showMessageDialog ( frame , MessageFormat . format ( res . getString ( NUM00 ) , keyStoreFile . getName ( ) ) , res . getString ( NUM00 ) , JOptionPane . WARNING_MESSAGE ) ; $F665 } kseFrame . addKeyStore ( openedKeyStore , keyStoreFile , password ) ; } catch ( FileNotFoundException ex ) { JOptionPane . showMessageDialog ( frame , $F36702 ( MessageFormat , res , keyStoreFile ) , res . getString ( NUM00 ) , JOptionPane . WARNING_MESSAGE ) ; } catch ( Exception ex ) { DError . displayError ( frame , ex ) ; } }
public static String encode ( String string ) { $F96 bytes ; try $F12169 ( bytes , string , PREFERRED_ENCODING ) catch ( UnsupportedEncodingException e ) $F12171 ( bytes , string ) return encodeBytes ( bytes ) ; }
public final long addAndGet ( long delta ) { for ( $F589 ) { long current = get ( ) ; long next = current + delta ; if ( compareAndSet ( current , next ) ) return next ; } }
default long now ( TimeUnit unit ) { return unit . convert ( System . currentTimeMillis ( ) , TimeUnit . MILLISECONDS ) ; }
private final void append ( List < ? super NameValuePair > l , final String k , final String v ) { if ( v != null ) l . add ( new NameValuePair ( k , v ) ) ; }
protected Properties createProperties ( URL location ) throws IOException { InputStream is = null ; if ( location != null ) { $F21223 ( is , location ) } $F2697 ( tmpProperties ) if ( is != null ) $F46567 ( tmpProperties , is ) return tmpProperties ; }
protected double calcPlanWeight ( final T plan , final double maxScore ) { if ( plan . getScore ( ) == null ) $F6623 ( Double ) double weight = Math . exp ( this . beta * ( plan . getScore ( ) - maxScore ) ) ; $F46169 ( weight , MIN_WEIGHT ) return weight ; }
$F227258 ( filename , extensions , _BOOL , indexOfExtension , fileExt , getExtension , extension )
void findValue $F72 { if $F585 ( log ) { log . debug ( NUM00 + label ( ) ) ; } for ( int i = NUM00 ; i < _value . getItemCount ( ) ; i ++ ) { String choice = _value . getItemAt ( i ) ; SettingList sl = choiceHash . get ( choice ) ; if ( sl . match ( ) ) { $F15998 ( log , i ) _value . setSelectedItem ( choice ) ; $F665 } } $F35060 ( log ) }
public $F14638 insert ( int index , $F9738 ( string ) ) { $F23170 ( string ) $F1749 ( min , string ) if ( min != NUM00 ) { move ( min , index ) ; $F234786 ( string , min , value , index ) count += min ; } return this ; }
public void mkdir ( String key ) throws IOException { $F2936 ( key ) if ( key . endsWith ( NUM00 ) && $F1263 ( key ) ) { throw new InvalidParameterException $F580 ; } $F83044 ( split , key ) $F83 ( builder ) for ( String s : split ) { builder . append ( s ) ; if ( $F1030 ( s ) && ! $F17717 ( exists , builder ) ) { zkState . set ( builder . toString ( ) , null ) ; } $F84 ( builder ) } }
public double calculateLog ( double value ) { return Math . log ( value ) / this . baseLog ; }
public static Vector3 pow ( Vector3 o , double power ) { return new Vector3 ( Math . pow ( o . x , power ) , Math . pow ( o . y , power ) , Math . pow ( o . z , power ) ) ; }
public DatagramPacket responseReceive $F72 throws IOException { $F12496 ( buf ) $F135794 ( dp , buf ) datagramSocket . receive ( dp ) ; return dp ; }
$F234188 ( webClient )
$F1 public $F117572 ( flush , _BOOL )
public static $F5415 temperatureToRGB ( int degreesK ) { int k = MathUtils . constrain ( degreesK , NUM00 , NUM00 ) ; float a = ( k % NUM00 ) / NUM00 ; int i = ( ( k - NUM00 ) / NUM00 ) * NUM00 ; return new float [ ] { interp ( i , a ) , interp ( i + NUM00 , a ) , interp ( i + NUM00 , a ) } ; }
public AdvancedStateMap . Builder withName ( Function < PropertiesMap , String > mapper ) { this . nameMapper = mapper ; return this ; }
public synchronized void message ( LocoNetMessage m ) { int opCode = m . getOpCode ( ) ; switch ( opCode ) { case LnConstants . OPC_PEER_XFER : int src = m . getElement ( NUM00 ) ; int dst = m . getElement ( NUM00 ) + m . getElement ( NUM00 ) * NUM00 ; $F2027 packet = m . getPeerXfrData ( ) ; if ( src == lowPart ( LocoBufferAddress ) ) { String lbv = ( ( packet [ NUM00 ] != NUM00 ) ? dotme ( packet [ NUM00 ] ) : NUM00 ) ; setLBVersion ( lbv ) ; } if ( dst == LocoBufferAddress && src == lowPart ( unitAddress ) && ( packet [ NUM00 ] == unitSubAddress ) ) { stopTimer ( ) ; replyReceived ( ) ; String fw = ( ( packet [ NUM00 ] != NUM00 ) ? dotme ( packet [ NUM00 ] ) : NUM00 ) ; setLIOVersion ( fw ) ; if ( packet [ NUM00 ] == LocoIO . LOCOIO_SV_READ || reading ) { if $F56314 ( lastOpCv ) { int data = ( packet [ NUM00 ] != NUM00 ) ? packet [ NUM00 ] : packet [ NUM00 ] ; int channel = ( lastOpCv / NUM00 ) - NUM00 ; if ( channel < NUM00 ) { $F10910 ( log ) channel = NUM00 ; } int type = lastOpCv - ( channel * NUM00 + NUM00 ) ; log . debug ( NUM00 + channel + NUM00 + type + NUM00 + ( type == NUM00 ? NUM00 : type == NUM00 ? NUM00 : type == NUM00 ? NUM00 : NUM00 ) + NUM00 + Integer . toHexString ( data ) ) ; if ( type == NUM00 ) { setV2 ( channel , data ) ; setMode ( channel , NUM00 ) ; } else if ( type == NUM00 ) { setV1 ( channel , data ) ; setMode ( channel , NUM00 ) ; } else if ( type == NUM00 ) { setSV ( channel , data ) ; LocoIOMode lim = validmodes . getLocoIOModeFor ( getSV ( channel ) , getV1 ( channel ) , getV2 ( channel ) ) ; if ( lim == null ) { setMode ( channel , NUM00 ) ; setAddr ( channel , NUM00 ) ; $F980 ( log ) } else { setMode ( channel , lim . getFullMode ( ) ) ; setAddr ( channel , validmodes . valuesToAddress ( lim . getOpcode ( ) , getSV ( channel ) , getV1 ( channel ) , getV2 ( channel ) ) ) ; } log . debug ( NUM00 + NUM00 + Integer . toHexString ( getSV ( channel ) ) + NUM00 + NUM00 + Integer . toHexString ( getV1 ( channel ) ) + NUM00 + NUM00 + Integer . toHexString ( getV2 ( channel ) ) + NUM00 + NUM00 + getAddr ( channel ) + NUM00 + Integer . toHexString ( getAddr ( channel ) ) + NUM00 ) ; } else $F63252 ( log , type , channel ) } else $F845 } issueNextOperation ( ) ; $F665 } else $F932 case LnConstants . OPC_INPUT_REP : if $F585 ( log ) { log . debug ( LnConstants . OPC_NAME ( opCode ) + NUM00 ) ; } for ( $F119 ( i , _numRows ) ) { if ( capture [ i ] ) { $F15998 ( log , i ) int val1 = m . getElement ( NUM00 ) ; int val2 = m . getElement ( NUM00 ) ; setAddr ( i , $F74254 ( val2 ) * NUM00 + $F74254 ( val1 ) | ( ( ( val2 & LnConstants . OPC_SW_REQ_DIR ) == LnConstants . OPC_SW_REQ_DIR ) ? NUM00 : NUM00 ) ) ; capture [ i ] = _BOOL ; } } $F665 case LnConstants . OPC_SW_REQ : if $F585 ( log ) { log . debug ( LnConstants . OPC_NAME ( opCode ) + NUM00 ) ; } for ( $F119 ( i , _numRows ) ) { if ( capture [ i ] ) { $F15998 ( log , i ) int val1 = m . getElement ( NUM00 ) ; int val2 = m . getElement ( NUM00 ) ; int addr = LocoIO . SENSOR_ADR ( val1 , val2 ) ; setAddr ( i , addr ) ; capture [ i ] = _BOOL ; } } $F665 $F1267 } }
$F16994 ( buf )
public void test_fill$ZIIZ $F72 { boolean val = _BOOL ; boolean $F3234 = new boolean $F380 ; $F47119 ( Arrays , d , val ) $F47123 ( i , assertTrue , d , val ) $F47124 ( i , d , assertTrue , val ) $F47128 ( Arrays , d , val , fail ) $F47133 ( Arrays , d , val , fail ) $F47138 ( Arrays , d , val , fail ) }
protected void linearLayout ( VisualTable labels ) { Rectangle2D b = getLayoutBounds ( ) ; double breadth = getBreadth ( b ) ; double span = m_hi - m_lo ; double pspan = m_prevhi - m_prevlo ; double vlo = NUM00 ; if ( m_lo >= NUM00 ) { vlo = Math . pow ( NUM00 , Math . floor ( MathLib . log10 ( m_lo ) ) ) ; } else { vlo = - Math . pow ( NUM00 , NUM00 + Math . floor ( MathLib . log10 ( - m_lo ) ) ) ; } Iterator iter = labels . tuples ( ) ; while $F2921 ( iter ) { $F163591 ( item , iter ) reset ( item ) ; double v = item . getDouble ( VALUE ) ; double x = span == NUM00 ? NUM00 : ( ( v - m_lo ) / span ) * breadth ; set ( item , x , b ) ; } Index index = labels . index ( VALUE ) ; double step = getLinearStep ( span , span == NUM00 ? NUM00 : breadth / span ) ; $F211985 ( step ) int r ; for ( double x , v = vlo ; v <= m_hi ; v += step ) { x = ( ( v - m_lo ) / span ) * breadth ; if ( x < - NUM00 ) $F1448 else if ( $F86155 ( r , index , v ) >= NUM00 ) { VisualItem item = labels . getItem ( r ) ; item . setVisible ( _BOOL ) ; item . setEndVisible ( _BOOL ) ; } else { VisualItem item = labels . addItem ( ) ; item . set ( LABEL , m_nf . format ( v ) ) ; item . setDouble ( VALUE , v ) ; double f = pspan == NUM00 ? NUM00 : ( ( v - m_prevlo ) / pspan ) ; if ( f <= NUM00 || f >= NUM00 ) item . setStartVisible ( _BOOL ) ; set ( item , f * breadth , b ) ; set ( item , x , b ) ; } } }
$F1 public synchronized boolean addAll $F22451 ( collection ) $F8587 ( addAll , elementCount , collection )
public boolean handleExceptionFromServer ( Writer writer , Reader reader , Throwable ex ) { if ( ex instanceof ClosedChannelException ) { if $F6456 ( _logger , Level ) _logger . log ( Level . FINE , NUM00 + writer . getEndPointAddress ( ) + NUM00 ) ; return _BOOL ; } if ( ex instanceof MarshalContextClearedException ) { if $F6456 ( _logger , Level ) _logger . log ( Level . FINE , NUM00 + writer . getEndPointAddress ( ) + NUM00 ) ; return _BOOL ; } try { String msg = NUM00 + writer . getEndPointAddress ( ) + NUM00 ; if ( ex instanceof LRMIUnhandledException ) { if $F6456 ( _logger , Level ) _logger . log ( Level . FINE , msg , ex ) ; LRMIUnhandledException lrmiue = ( LRMIUnhandledException ) ex ; if ( lrmiue . getStage ( ) == Stage . DESERIALIZATION ) { reader . resetContext ( ) ; } if $F23014 ( writer ) writer . writeReply ( new ReplyPacket ( null , lrmiue ) ) ; return _BOOL ; } else if ( ex instanceof RuntimeException || ex instanceof InvalidClassException ) { if $F68674 ( _logger , Level ) _logger . log ( Level . SEVERE , msg , ex ) ; } else if ( ex instanceof UnmarshalException ) { if $F89967 ( _logger , Level ) _logger . log ( Level . WARNING , msg , ex ) ; } else { if $F6456 ( _logger , Level ) _logger . log ( Level . FINE , msg , ex ) ; } if $F23014 ( writer ) writer . writeReply ( new ReplyPacket ( null , new ProtocolException ( msg , ex ) ) ) ; return _BOOL ; } catch ( Exception ex2 ) { if $F6456 ( _logger , Level ) _logger . log ( Level . FINE , NUM00 + writer . getEndPointAddress ( ) + NUM00 , ex ) ; return _BOOL ; } }
public String sprintf $F72 { final Iterator < ConversionSpecification > e = vFmt . iterator ( ) ; ConversionSpecification cs ; char c ; $F1121 ( sb ) while $F2921 ( e ) { $F45366 ( cs , e ) c = cs . getConversionCharacter ( ) ; if ( c == NUM00 ) { sb . append ( cs . getLiteral ( ) ) ; } else if ( c == NUM00 ) $F86 ( sb ) } $F92 ( sb ) }
default String resourceName ( String tableName , String type ) { return String . format ( RESOURCE_NAME , tableName , type ) ; }
protected void updateComboBoxesLoadChange $F72 { if $F31483 ( autoTrackCheckBox ) $F5795 ( updateLocationTrackComboBox ) if $F31483 ( autoDestinationTrackCheckBox ) $F5795 ( updateDestinationTrackComboBox ) if $F31483 ( autoFinalDestTrackCheckBox ) $F5795 ( updateFinalDestination ) }
public String removeClassColumnTipText $F72 $F2455
public static String join ( NamedValue [ ] values , String separator ) { $F83 ( buff ) for ( $F1139 ( i , values ) ) { $F6939 ( buff , values , i ) if $F18953 ( i , values ) buff . append ( separator ) ; } $F92 ( buff ) }
private int currentDepth $F72 { try { Integer oneBased = ( ( Integer ) DEPTH_FIELD . get ( this ) ) ; return oneBased - NUM00 ; } $F180169 ( e ) }
protected LocPathIterator changePartToRef ( final QName uniquePseudoVarName , WalkingIterator wi , final int numSteps , final boolean isGlobal ) { Variable var = new Variable $F72 ; var . setQName ( uniquePseudoVarName ) ; var . setIsGlobal ( isGlobal ) ; if ( isGlobal ) { ElemTemplateElement elem = getElemFromExpression ( wi ) ; StylesheetRoot root = elem . getStylesheetRoot ( ) ; $F64276 ( vars , root ) var . setIndex ( $F2281 ( vars ) ) ; } AxesWalker walker = wi . getFirstWalker ( ) ; for ( $F119 ( i , numSteps ) ) { assertion ( null != walker , NUM00 ) ; walker = walker . getNextWalker ( ) ; } if ( null != walker ) { FilterExprWalker few = new FilterExprWalker ( wi ) ; few . setInnerExpression ( var ) ; few . exprSetParent ( wi ) ; few . setNextWalker ( walker ) ; walker . setPrevWalker ( few ) ; wi . setFirstWalker ( few ) ; return wi ; } else { FilterExprIteratorSimple feis = new FilterExprIteratorSimple ( var ) ; feis . exprSetParent ( wi . exprGetParent ( ) ) ; return feis ; } }
protected String sourceClass ( Attribute c , $F1986 dist ) { if ( c . isNominal ( ) ) { return Integer . toString ( Utils . maxIndex ( dist ) ) ; } else { return Double . toString ( dist [ NUM00 ] ) ; } }
public void done $F72 throws IOException $F29882 ( printer )
int requestGroupData ( char groupNum ) { setCurrDataGroup ( groupNum ) ; currGrpItems = knownGrpItems . get ( $F130521 ( Integer , getCurrDataGroup ) ) ; $F1469 payLoad = { groupNum } ; return ( writeTelegram ( payLoad , CMD_GROUP_READ , null ) ) ; }
protected String computeFullUrl ( URL baseUrl , String link ) { $F26918 ( link ) if $F14943 ( link ) { if $F3106 ( link ) { link = baseUrl . getProtocol ( ) + NUM00 + baseUrl . getAuthority ( ) + link ; } else { if $F3578 ( link ) $F1337 $F14393 ( path , baseUrl ) if $F2364 ( path ) { $F24867 ( sep , path ) $F36289 ( file , path , sep ) if $F80721 ( file ) $F45799 ( path , sep ) } link = baseUrl . getProtocol ( ) + NUM00 + baseUrl . getAuthority ( ) + path + NUM00 + link ; } } link = normalizeUrlEnding ( link ) ; String l = $F131081 ( link , Locale ) ; if ( $F65411 ( l ) ) $F1337 return link ; }
protected String encodeCookie ( SerializableHttpCookie cookie ) $F99221 ( cookie , os , outputStream , Log , LOG_TAG , e , byteArrayToHexString )
public long skip ( long bytes ) throws IOException { $F40600 ( closed ) int av = available ( ) ; if ( av == NUM00 ) { av = makeAvailable ( ) ; $F14826 ( av ) } $F121098 ( res , Math , av , bytes ) head += res ; return res ; }
public void resume $F72 { mPaused = _BOOL ; $F3224 ( mLastFrameTime , System ) invalidate ( ) ; }
protected void drawCenterText ( Canvas c ) { CharSequence centerText = mChart . getCenterText ( ) ; if ( mChart . isDrawCenterTextEnabled ( ) && centerText != null ) { PointF center = mChart . getCenterCircleBox ( ) ; float innerRadius = mChart . isDrawHoleEnabled ( ) && ! mChart . isDrawSlicesUnderHoleEnabled ( ) ? mChart . getRadius ( ) * ( mChart . getHoleRadius ( ) / NUM00 ) : mChart . getRadius ( ) ; RectF holeRect = mRectBuffer [ NUM00 ] ; holeRect . left = center . x - innerRadius ; holeRect . top = center . y - innerRadius ; holeRect . right = center . x + innerRadius ; holeRect . bottom = center . y + innerRadius ; RectF boundingRect = mRectBuffer [ NUM00 ] ; boundingRect . set ( holeRect ) ; float radiusPercent = mChart . getCenterTextRadiusPercent ( ) / NUM00 ; if ( radiusPercent > NUM00 ) { boundingRect . inset ( ( boundingRect . width ( ) - boundingRect . width ( ) * radiusPercent ) / NUM00 , ( boundingRect . height ( ) - boundingRect . height ( ) * radiusPercent ) / NUM00 ) ; } if ( ! centerText . equals ( mCenterTextLastValue ) || ! boundingRect . equals ( mCenterTextLastBounds ) ) { mCenterTextLastBounds . set ( boundingRect ) ; mCenterTextLastValue = centerText ; float width = mCenterTextLastBounds . width ( ) ; mCenterTextLayout = new StaticLayout ( centerText , NUM00 , centerText . length ( ) , mCenterTextPaint , ( int ) Math . max ( Math . ceil ( width ) , NUM00 ) , Layout . Alignment . ALIGN_CENTER , NUM00 , NUM00 , _BOOL ) ; } float layoutHeight = mCenterTextLayout . getHeight ( ) ; $F72208 ( c ) if ( $F215008 ( Build ) ) { $F6212 ( path ) path . addOval ( holeRect , Path . Direction . CW ) ; c . clipPath ( path ) ; } c . translate ( boundingRect . left , boundingRect . top + ( boundingRect . height ( ) - layoutHeight ) / NUM00 ) ; mCenterTextLayout . draw ( c ) ; $F72213 ( c ) } }
public void testSubtractDiffScaleNegPos $F72 { String a = NUM00 ; int aScale = - NUM00 ; String b = NUM00 ; int bScale = NUM00 ; String c = NUM00 ; int cScale = NUM00 ; $F1918 ( aNumber , a , aScale ) $F1918 ( bNumber , b , bScale ) $F173389 ( result , aNumber , bNumber ) $F1925 ( assertEquals , c , result ) $F1928 ( assertEquals , cScale , result ) }
void addToPrototypeCallback $F72 ;
public AllToAllPanel ( AllToAll connector , NetworkPanel networkPanel ) { super ( ) ; this . connection = connector ; allowSelfConnectPanel = new JPanel ( new FlowLayout ( FlowLayout . LEFT ) ) ; $F58105 ( allowSelfConnectPanel ) allowSelfConnectPanel . add ( allowSelfConnectChkBx ) ; fillFieldValues ( ) ; add ( allowSelfConnectPanel ) ; }
$F5105 ( pcl , m_pcSupport )
public boolean functionAvailable ( String ns , String funcName ) throws $F1872 { try { if ( funcName == null ) { String fmsg = XSLMessages . createXPATHMessage ( XPATHErrorResources . ER_ARG_CANNOT_BE_NULL , new Object $F21902 ) ; throw new NullPointerException ( fmsg ) ; } javax . xml . namespace . QName myQName = new QName ( ns , funcName ) ; javax . xml . xpath . XPathFunction xpathFunction = resolver . resolveFunction ( myQName , NUM00 ) ; $F1933 ( xpathFunction , _BOOL ) return _BOOL ; } $F7474 ( _BOOL ) }
private void allocate_sections ( int p_section_count ) { section_list . ensureCapacity ( p_section_count ) ; while $F10255 ( section_list , p_section_count ) { section_list . add ( new MazeSearchElement $F72 ) ; } }
public boolean refreshNeeded $F72 { return this . softTtl < System . currentTimeMillis ( ) ; }
public static $F96 randomBytes ( int length ) { $F2175 ( bytes , length ) SEEDED_RANDOM . nextBytes ( bytes ) ; return bytes ; }
public WeightDistribution ( ColumnExampleTable columnTable , $F2027 selection , int attributeNumber ) { calculateLabelWeights ( columnTable , selection , attributeNumber ) ; $F14238 ( leftLabelWeights , totalLabelWeights ) leftWeight = NUM00 ; totalWeight = getTotalWeight ( totalLabelWeights ) ; if ( hasMissings ) { missingsWeight = getTotalWeight ( missingsLabelWeights ) ; rightWeight = totalWeight - missingsWeight ; rightLabelWeights = arrayDifference ( totalLabelWeights , missingsLabelWeights ) ; } else { missingsWeight = NUM00 ; rightWeight = totalWeight ; $F14238 ( rightLabelWeights , totalLabelWeights ) $F7057 ( System , totalLabelWeights , rightLabelWeights ) } }
public static String removeExtension ( String fileName ) { $F24867 ( index , fileName ) if ( index == - NUM00 ) { return fileName ; } else $F35299 ( fileName , index ) }
public void delete ( String name ) throws IOException { $F219378 ( name , KEY_ID , id ) encodeThis ( ) ; }
public static DataFrame normalize ( DataFrame dataFrame , double min , double max ) { return normalize ( dataFrame , min , max , $F70465 ( Collections ) ) ; }
boolean isSocketScheme ( String scheme ) { for ( String p : URIHelper . SOCKET_SCHEMES ) $F12419 ( p , scheme , _BOOL ) return _BOOL ; }
private static void addLeafWithNonExistingParents ( Spatial root , Spatial leaf ) { if ( ! ( root instanceof Node ) ) { logger . log ( Level . WARNING , NUM00 , new Object [ ] { leaf . getName ( ) , root . getName ( ) } ) ; $F665 } for ( Spatial s = leaf ; s . getParent ( ) != null ; $F10336 ( s ) ) { Spatial parent = s . getParent ( ) ; Spatial other = findTaggedSpatial ( root , parent ) ; $F4322 ( other ) if ( other instanceof Node ) { logger . log ( Level . INFO , NUM00 , new Object [ ] { s , other , root , leaf } ) ; for ( Spatial spt = leaf ; spt != parent ; $F10336 ( spt ) ) { spt . setUserData ( ORIGINAL_NAME , spt . getName ( ) ) ; spt . setUserData ( ORIGINAL_PATH , getSpatialPath ( spt ) ) ; $F10337 ( spt ) } $F125481 ( otherNode , other ) otherNode . attachChild ( s ) ; logger . log ( LogLevel . USERINFO , NUM00 , new Object [ ] { other . getName ( ) , leaf . getName ( ) } ) ; $F665 } else { logger . log ( Level . WARNING , NUM00 , $F42238 ( leaf , other , root ) ) ; } } logger . log ( Level . WARNING , NUM00 , leaf . getName ( ) ) ; }
private void adjustBlockListeners ( List < OBlock > oldRange , List < OBlock > newRange , Tracker tracker ) { Iterator < OBlock > iter = newRange . iterator ( ) ; while $F2921 ( iter ) { OBlock b = iter . next ( ) ; if $F105 ( oldRange , b ) $F122863 ( oldRange , b ) addBlockListener ( b , tracker ) ; } $F18058 ( iter , oldRange ) while $F2921 ( iter ) { $F47912 ( removeBlockListener , iter , tracker ) } }
public static String dbNameToVarName ( String columnName ) { $F1275 ( columnName ) $F80469 ( fieldName , columnName ) boolean toUpper = _BOOL ; for ( $F1088 ( i , columnName ) ) { $F1280 ( ch , columnName , i ) if ( ch == NUM00 ) { toUpper = _BOOL ; } else if ( toUpper ) { $F91408 ( fieldName , Character , ch ) toUpper = _BOOL ; } else { $F59257 ( fieldName , Character , ch ) } } $F92 ( fieldName ) }
static public String hexEncode $F97 ( aInput ) { $F280 ( result ) final $F1469 digits = $F32662 ; for ( $F9808 ( idx , aInput ) ) { byte b = aInput [ idx ] ; result . append ( digits [ $F84701 ( b ) ] ) ; $F3248 ( result , digits , b ) } $F92 ( result ) }
private static Size clampSize ( Size original , double maxArea , Size maxSize ) { if ( original . getWidth ( ) * original . getHeight ( ) < maxArea && original . getWidth ( ) < maxSize . getWidth ( ) && original . getHeight ( ) < maxSize . getHeight ( ) ) { return original ; } double ratio = Math . min ( Math . sqrt ( maxArea / original . area ( ) ) , NUM00 ) ; int width = ( int ) Math . round ( original . width ( ) * ratio ) ; int height = ( int ) Math . round ( original . height ( ) * ratio ) ; if ( width > maxSize . width ( ) || height > maxSize . height ( ) ) $F8587 ( computeFitWithinSize , original , maxSize ) return new Size ( width , height ) ; }
TCPChannel ( TCPTransport tr , TCPEndpoint ep ) $F20755 ( this , tr , ep )
$F1 public final String toString $F72 { $F83 ( buffer ) $F84 ( buffer ) for ( $F2277 ( i , fields ) ) { IndexableField field = fields . get ( i ) ; $F11659 ( buffer , field ) if ( i != $F2281 ( fields ) ) $F86 ( buffer ) } $F84 ( buffer ) $F92 ( buffer ) }
public static $F96 encode $F97 ( data ) { $F1538 ( bOut ) try { encoder . encode ( data , NUM00 , data . length , bOut ) ; } catch ( IOException e ) $F1666 ( e ) $F11316 ( bOut ) }
public static Face drawDir ( Direction dir , MeshModel model , double minX , double minY , double minZ , double maxX , double maxY , double maxZ , CubeTextureCoordinates textureCoordinates ) { switch ( dir ) { case DOWN : return drawDown ( model , minX , minY , minZ , maxX , maxY , maxZ , textureCoordinates ) ; case UP : return drawUp ( model , minX , minY , minZ , maxX , maxY , maxZ , textureCoordinates ) ; case NORTH : return drawNorth ( model , minX , minY , minZ , maxX , maxY , maxZ , textureCoordinates ) ; case SOUTH : return drawSouth ( model , minX , minY , minZ , maxX , maxY , maxZ , textureCoordinates ) ; case EAST : return drawEast ( model , minX , minY , minZ , maxX , maxY , maxZ , textureCoordinates ) ; case WEST : return drawWest ( model , minX , minY , minZ , maxX , maxY , maxZ , textureCoordinates ) ; } throw new RenderException $F580 ; }
public void addObserver ( final FileAlterationObserver observer ) $F17651 ( observer , observers )
public MAVLinkMessage ( MAVLinkSchema schema , ByteBuffer buffer ) throws MAVLinkProtocolException , MAVLinkUnknownMessage , BufferUnderflowException { if ( buffer . remaining ( ) < NON_PAYLOAD_LENGTH ) { throw new BufferUnderflowException $F72 ; } $F35972 ( startPos , buffer ) $F46702 ( startSign , buffer ) if ( startSign != START_OF_FRAME ) { throw new MAVLinkProtocolException $F4456 ( String , startSign , START_OF_FRAME ) ; } $F183760 ( payloadLen , buffer ) if ( buffer . remaining ( ) < payloadLen + NON_PAYLOAD_LENGTH - NUM00 ) { buffer . position ( startPos ) ; throw new BufferUnderflowException $F72 ; } $F16478 ( sequence , buffer ) systemID = buffer . get ( ) & NUM00 ; componentID = buffer . get ( ) & NUM00 ; msgID = buffer . get ( ) & NUM00 ; this . schema = schema ; this . definition = schema . getMessageDefinition ( msgID ) ; if ( definition == null ) { buffer . position ( buffer . position ( ) + payloadLen + CRC_LENGTH ) ; throw new MAVLinkUnknownMessage $F10797 ( String , msgID ) ; } if ( payloadLen != definition . payloadLength ) { buffer . position ( buffer . position ( ) + payloadLen + CRC_LENGTH ) ; throw new MAVLinkUnknownMessage ( String . format ( NUM00 , definition . name , msgID , payloadLen , definition . payloadLength ) ) ; } this . payload = new byte [ definition . payloadLength ] ; buffer . get ( payload ) ; crc = Short . reverseBytes ( buffer . getShort ( ) ) & NUM00 ; $F35972 ( endPos , buffer ) buffer . position ( startPos ) ; int crcCalc = calculateCRC ( buffer ) ; buffer . position ( endPos ) ; if ( crc != crcCalc ) { throw new MAVLinkUnknownMessage ( String . format ( NUM00 , definition . name , msgID , crc , crcCalc ) ) ; } this . payloadBB = ByteBuffer . wrap ( payload ) ; payloadBB . order ( schema . getByteOrder ( ) ) ; }
public static double log1p ( final double x ) { if ( x == - NUM00 ) $F86429 ( Double ) if ( x == Double . POSITIVE_INFINITY ) $F90685 ( Double ) if ( x > NUM00 || x < - NUM00 ) { final double xpa = NUM00 + x ; final double xpb = - ( xpa - NUM00 - x ) ; final $F1986 hiPrec = $F1990 ; final double lores = log ( xpa , hiPrec ) ; if $F28102 ( Double , lores ) { return lores ; } final double fx1 = xpb / xpa ; final double epsilon = NUM00 * fx1 + NUM00 ; return epsilon * fx1 + hiPrec [ NUM00 ] + hiPrec [ NUM00 ] ; } else { final double y = ( x * F_1_3 - F_1_2 ) * x + NUM00 ; return y * x ; } }
protected ScriptBuilder bigNum ( long num ) { return $F28711 ( bigNum , chunks , num ) ; }
Callbacks tryGetCallbacks ( Callbacks oldCallbacks ) { synchronized ( mLock ) { $F5972 ( mStopped ) $F1338 ( mCallbacks ) final Callbacks callbacks = mCallbacks . get ( ) ; if ( callbacks != oldCallbacks ) $F1337 if ( callbacks == null ) $F108257 ( Log , TAG ) return callbacks ; } }
public final void change_entries ( BrdTracep p_obj , Polyline p_new_polyline , int p_keep_at_start_count , int p_keep_at_end_count ) { int compensated_half_width = p_obj . get_half_width ( ) + get_clearance_compensation ( p_obj . clearance_idx ( ) , p_obj . get_layer ( ) ) ; ArrayList < ShapeTile > changed_shapes = offset_shapes ( p_new_polyline , compensated_half_width , p_keep_at_start_count , p_new_polyline . plaline_len ( - NUM00 ) - p_keep_at_end_count ) ; int old_shape_count = p_obj . tree_shape_count ( this ) ; int new_shape_count = changed_shapes . size ( ) + p_keep_at_start_count + p_keep_at_end_count ; AwtreeNodeLeaf [ ] new_leaf_arr = new AwtreeNodeLeaf [ new_shape_count ] ; ShapeTile [ ] new_precalculated_tree_shapes = new ShapeTile [ new_shape_count ] ; AwtreeNodeLeaf [ ] old_entries = p_obj . get_search_tree_entries ( this ) ; for ( $F1316 ( index , p_keep_at_start_count ) ) { new_leaf_arr [ index ] = old_entries [ index ] ; new_precalculated_tree_shapes [ index ] = p_obj . get_tree_shape ( this , index ) ; } for ( int index = p_keep_at_start_count ; index < old_shape_count - p_keep_at_end_count ; ++ index ) $F11680 ( remove_leaf , old_entries , index ) for ( $F1316 ( i , p_keep_at_end_count ) ) { int new_index = new_shape_count - p_keep_at_end_count + i ; int old_index = old_shape_count - p_keep_at_end_count + i ; new_leaf_arr [ new_index ] = old_entries [ old_index ] ; new_leaf_arr [ new_index ] . shape_index_in_object = new_index ; new_precalculated_tree_shapes [ new_index ] = p_obj . get_tree_shape ( this , old_index ) ; } for ( int index = p_keep_at_start_count ; index < new_shape_count - p_keep_at_end_count ; ++ index ) { new_precalculated_tree_shapes [ index ] = changed_shapes . get ( index - p_keep_at_start_count ) ; } p_obj . set_precalculated_tree_shapes ( new_precalculated_tree_shapes , this ) ; for ( int index = p_keep_at_start_count ; index < new_shape_count - p_keep_at_end_count ; ++ index ) { new_leaf_arr [ index ] = insert ( p_obj , index ) ; } p_obj . set_search_tree_entries ( this , new_leaf_arr ) ; }
static Object newInstance ( String className , ClassLoader cl , boolean doFallback ) throws ConfigurationError { try { Class providerClass = findProviderClass ( className , cl , doFallback ) ; $F71976 ( instance , providerClass ) $F60246 ( DEBUG , debugPrintln , providerClass , cl ) return instance ; } catch ( ClassNotFoundException x ) { throw new ConfigurationError ( NUM00 + className + NUM00 , x ) ; } catch ( Exception x ) { throw new ConfigurationError ( NUM00 + className + NUM00 + x , x ) ; } }
public void paintComponentBackground ( Graphics g ) { super . paintComponentBackground ( g ) ; int clipX = g . getClipX ( ) ; int clipY = g . getClipY ( ) ; int clipW = g . getClipWidth ( ) ; int clipH = g . getClipHeight ( ) ; int width = getWidth ( ) ; int height = getHeight ( ) ; int y = getY ( ) ; if ( infinite ) { $F23200 ( blockSize , getWidth ) int x = getX ( ) + ( int ) ( ( $F61779 ( value ) / ( ( float ) maxValue - minValue ) ) * ( getWidth ( ) - blockSize ) ) ; g . clipRect ( x , y , blockSize , height - NUM00 ) ; } else { if ( vertical ) { int actualHeight = ( int ) ( ( $F61779 ( value ) / ( ( float ) maxValue - minValue ) ) * getHeight ( ) ) ; y += height - actualHeight ; } else { width = ( int ) ( ( $F61779 ( value ) / ( ( float ) maxValue - minValue ) ) * getWidth ( ) ) ; } g . clipRect ( getX ( ) , y , width , height ) ; } paintingFull = _BOOL ; super . paintComponentBackground ( g ) ; paintingFull = _BOOL ; g . setClip ( clipX , clipY , clipW , clipH ) ; if ( thumbImage != null && ! infinite ) { if ( ! vertical ) { int xPos = getX ( ) + width - $F77576 ( thumbImage ) ; xPos = Math . max ( getX ( ) , xPos ) ; xPos = Math . min ( getX ( ) + getWidth ( ) - thumbImage . getWidth ( ) , xPos ) ; g . drawImage ( thumbImage , xPos , y + height / NUM00 - $F63370 ( thumbImage ) ) ; } else { int yPos = y ; g . drawImage ( thumbImage , getX ( ) + width / NUM00 - $F77576 ( thumbImage ) , yPos ) ; } } }
public void addAction ( EntityAction ea ) { actions . addElement ( ea ) ; processGameEvent ( new GameNewActionEvent ( this , ea ) ) ; }
public Polygon ( PolygonPoint p1 , PolygonPoint p2 , PolygonPoint p3 ) { p1 . _next = p2 ; p2 . _next = p3 ; p3 . _next = p1 ; p1 . _previous = p3 ; p2 . _previous = p1 ; p3 . _previous = p2 ; _points . add ( p1 ) ; _points . add ( p2 ) ; _points . add ( p3 ) ; }
public static JSONObject readJSONObject ( final JSONArray jsonArray , final int index , final boolean required , final boolean notNull ) throws JSONException { if ( required ) { return jsonArray . getJSONObject ( index ) ; } $F3652 ( notNull , jsonArray , index , String , Locale , NULL_VALUE_FORMAT_ARRAY ) JSONObject value = null ; if $F3653 ( jsonArray , index ) { value = jsonArray . getJSONObject ( index ) ; } return value ; }
public static void waitElementToNotBePresent ( SearchContext parent , By by , int waitInSeconds ) { Preconditions . checkNotNull ( parent ) ; Preconditions . checkNotNull ( by ) ; try { WebElementWait wait = new WebElementWait ( parent , waitInSeconds ) ; wait . until ( null ) ; } catch ( TimeoutException e ) { throw new TimeoutException ( String . format ( NUM00 , by , waitInSeconds ) , e ) ; } }
public final TestSubscriber assertTerminated $F72 { if ( done . getCount ( ) != NUM00 ) { fail ( NUM00 , NUM00 , errors ) ; } long c = completions ; if ( c > NUM00 ) { fail ( NUM00 , NUM00 + c , errors ) ; } $F2199 ( s , errors ) if ( s > NUM00 ) { fail ( NUM00 , NUM00 + s , errors ) ; } if ( c != NUM00 && s != NUM00 ) { fail ( NUM00 , NUM00 + c , errors ) ; } return this ; }
public boolean isVimeoURLValid $F72 { String videoID = getExtractedIdentifier ( ) ; return $F20 ( videoID ) && TextUtils . isDigitsOnly ( videoID ) ; }
public boolean isCancelled $F72 { return mState . get ( ) == STATE_CANCELLED ; }
public final void pushSubContextList ( SubContextList iter ) $F31742 ( m_axesIteratorStack , iter )
static void checkDesc $F4708 ( desc , canBeVoid ) { int end = checkDesc ( desc , NUM00 , canBeVoid ) ; if $F20325 ( end , desc ) $F18931 ( desc ) }
private void updateDownloadedFiles ( SQLiteDatabase db , String newAccountName , String oldAccountName ) { String whereClause = ProviderTableMeta . FILE_ACCOUNT_OWNER + NUM00 + ProviderTableMeta . FILE_STORAGE_PATH + NUM00 ; Cursor c = db . query ( ProviderTableMeta . FILE_TABLE_NAME , null , whereClause , $F8640 ( newAccountName ) , null , null , null ) ; try { if $F17816 ( c ) { String oldAccountPath = FileStorageUtils . getSavePath ( oldAccountName ) ; String newAccountPath = FileStorageUtils . getSavePath ( newAccountName ) ; $F1705 ( oldAccountFolder , oldAccountPath ) $F1705 ( newAccountFolder , newAccountPath ) oldAccountFolder . renameTo ( newAccountFolder ) ; do { String oldPath = c . getString ( c . getColumnIndex ( ProviderTableMeta . FILE_STORAGE_PATH ) ) ; OCFile file = new OCFile ( c . getString ( c . getColumnIndex ( ProviderTableMeta . FILE_PATH ) ) ) ; String newPath = FileStorageUtils . getDefaultSavePathFor ( newAccountName , file ) ; $F20904 ( cv ) cv . put ( ProviderTableMeta . FILE_STORAGE_PATH , newPath ) ; db . update ( ProviderTableMeta . FILE_TABLE_NAME , cv , ProviderTableMeta . FILE_STORAGE_PATH + NUM00 , $F8640 ( oldPath ) ) ; Log_OC . v ( NUM00 , NUM00 + oldPath + NUM00 + newPath ) ; } while $F12260 ( c ) ; } } $F3229 ( c ) }
public void dumpOptions $F72 { $F973 ( logger ) for ( Method getter : GetConfigurationInterface . class . getMethods ( ) ) { $F20605 ( getterName , getter ) try { Object result = getter . invoke ( ConfigurationManager . getCurrentProfile ( ) ) ; if ( result instanceof Boolean ) { result = LocalizationHelper . getYesOrNo ( ( Boolean ) result ) ; } if ( result instanceof List ) { for ( int i = NUM00 ; i < ( ( List ) result ) . size ( ) ; i ++ ) { assert ( ( List ) result ) . get ( i ) instanceof CustomCatalogEntry ; CustomCatalogEntry c = ( ( List < CustomCatalogEntry > ) result ) . get ( i ) ; String OptionName = Helper . pad ( Localization . Main . getText ( NUM00 ) + NUM00 + ( i + NUM00 ) + NUM00 + c . getAtTop ( ) . toString ( ) , NUM00 , NUM00 ) + NUM00 ; logger . info ( OptionName + c . getLabel ( ) + NUM00 + c . getValue ( ) . toString ( ) + NUM00 + c . getAtTop ( ) . toString ( ) ) ; } } else { $F28924 ( optionName , getterName ) dumpOption ( optionName , result ) ; } } catch ( IllegalAccessException e ) $F23016 ( logger , e ) catch ( InvocationTargetException e ) $F23016 ( logger , e ) } $F973 ( logger ) }
private JsonNode parseLanguageResource ( Resource resource ) throws IOException { InputStream stream = resource . asStream ( ) ; $F1275 ( stream ) try { JsonNode tree = mapper . readTree ( stream ) ; return tree ; } $F3229 ( stream ) }
public Collection < Tuple2 < TransitionState , Double > > startStates $F72 { List < Tuple2 < TransitionState , Double > > result = new ArrayList < Tuple2 < TransitionState , Double > > $F72 ; { double score = Math . log ( LINE_MRGN_PROB ) ; addNoSubGlyphStartState ( result , $F4468 , TransitionStateType . LMRGN , - NUM00 , score ) ; } for ( $F1316 ( destLanguage , numLanguages ) ) { SingleLanguageModel destLM = lm . get ( destLanguage ) ; double destLanguagePrior = lm . languagePrior ( destLanguage ) ; for ( int c : destLM . getActiveCharacters ( ) ) { if ( c != spaceCharIndex ) { double score = Math . log ( NUM00 - LINE_MRGN_PROB ) + Math . log ( getNgramProb ( destLM , $F4468 , c ) ) + Math . log ( destLanguagePrior ) ; addGlyphStartStates ( result , c , $F108345 ( c ) , TransitionStateType . TMPL , destLanguage , score ) ; } } } { double totalSpaceProb = NUM00 ; for ( $F1316 ( language , numLanguages ) ) totalSpaceProb += getNgramProb ( lm . get ( language ) , $F4468 , spaceCharIndex ) * lm . languagePrior ( language ) ; double score = Math . log ( NUM00 - LINE_MRGN_PROB ) + Math . log ( totalSpaceProb ) ; addNoSubGlyphStartState ( result , $F108345 ( spaceCharIndex ) , TransitionStateType . TMPL , - NUM00 , score ) ; } return result ; }
public boolean removeContainerAndCancelIfNecessary ( ImageContainer container ) { mContainers . remove ( container ) ; if $F2979 ( mContainers ) { $F65148 ( mRequest ) return _BOOL ; } return _BOOL ; }
public KernelDensityFunction ( Collection $F42619 points ) { this ( points . toArray ( new double $F42549 ( points ) ) ) ; }
private static Object cloneSerializableObject ( Object o ) throws $F6427 { $F1538 ( b ) $F7054 ( out , b ) out . writeObject ( o ) ; $F1206 ( out ) $F59 ( out ) $F153946 ( bi , b ) $F67402 ( in , bi ) $F287819 ( in ) }
public boolean hasThree $F72 $F32878 ( points )
public ZipEntry ( String name ) { $F10578 ( Objects , name ) if $F4012 ( name ) $F825 this . name = name ; }
public void _testStatements $F72 throws Exception { Connection connection = getConnectionViaDriverManager ( ) ; connection . setAutoCommit ( _BOOL ) ; try { $F11282 ( stmt , connection ) $F75096 ( rs , stmt ) $F59 ( rs ) RandomSelector selector1 = new RandomSelector ( stmt , SELECT_TABLE_1 , RECORD_COUNT ) ; RandomSelector selector2 = new RandomSelector ( stmt , SELECT_TABLE_2 , RECORD_COUNT ) ; Thread $F40963 ( thread1 , selector1 ) ; Thread $F40963 ( thread2 , selector2 ) ; $F2346 ( thread1 ) $F2346 ( thread2 ) $F28300 ( Thread , TEST_TIME_SECONDS ) $F5191 ( selector1 ) $F5191 ( selector2 ) $F14454 ( thread1 ) $F14454 ( thread2 ) $F59 ( stmt ) } $F3229 ( connection ) }
void readDictionary $F63851 ( filename , suffix , res ) throws IOException { DictionaryNames nms = new DictionaryNames ( filename , suffix ) ; $F58550 ( in , res ) String line ; while $F443 ( line , in ) { $F35105 ( terms , splitter , line ) if ( terms . length > maxPhraseLength ) $F598 if $F9634 ( terms ) $F598 GazEntry $F212710 ( ge , gaz , terms ) ; if ( ge == null ) { gaz . put ( terms [ NUM00 ] , new GazEntry ( terms , NUM00 , nms ) ) ; } else { ge . addChild ( terms , NUM00 , nms ) ; } } $F59 ( in ) }
private T matchTokens ( String targetToken , String requestToken ) { int wildcardIndex = NUM00 ; if ( targetToken == null && requestToken == null ) { return exactMatch ; } $F6973 ( targetToken , requestToken , noMatch ) int beginTargetIndex = NUM00 ; int beginRequestIndex = NUM00 ; String substr = null ; $F1749 ( targetTokenLength , targetToken ) $F1749 ( requestTokenLength , requestToken ) if ( targetToken . indexOf ( oneLevelWildcard , beginTargetIndex ) != - NUM00 ) { while $F8283 ( wildcardIndex , targetToken , oneLevelWildcard , beginTargetIndex ) { if ( wildcardIndex > beginTargetIndex ) { substr = targetToken . substring ( beginTargetIndex , wildcardIndex ) ; if ( $F150770 ( beginRequestIndex , requestToken , substr ) == - NUM00 ) { return noMatch ; } beginTargetIndex = beginTargetIndex + substr . length ( ) + oneLevelWildcardLength ; beginRequestIndex = beginRequestIndex + substr . length ( ) ; } else { if ( wildcardIndex == beginTargetIndex ) { if ( targetTokenLength == oneLevelWildcardLength ) { return wildcardMatch ; } else { beginTargetIndex = beginTargetIndex + oneLevelWildcardLength ; $F598 } } } } $F232230 ( beginTargetIndex , targetTokenLength , wildcardMatch ) $F12715 ( targetStr , targetToken , beginTargetIndex , targetTokenLength ) $F12715 ( remRequest , requestToken , beginRequestIndex , requestTokenLength ) int remRequestIndex = - NUM00 ; if ( ( remRequestIndex = remRequest . lastIndexOf ( targetStr , $F1092 ( remRequest ) ) ) == - NUM00 ) { return noMatch ; } else { beginRequestIndex = beginRequestIndex + remRequestIndex ; if ( beginRequestIndex + targetStr . length ( ) >= requestTokenLength ) { return wildcardMatch ; } else { return noMatch ; } } } else $F12419 ( targetToken , requestToken , exactMatch ) return noMatch ; }
public void addVertex ( ValueGraphVertex v ) { if $F9793 ( vertices , v ) { if ( v . representsParameter ( ) ) { nParameter ++ ; } $F13265 ( representativeV , v ) } }
private void createViewToModel ( int rowCount ) { int recreateFrom = NUM00 ; if ( viewToModel != null ) { $F56148 ( recreateFrom , Math , rowCount , viewToModel ) ; if ( viewToModel . length != rowCount ) { Row [ ] oldViewToModel = viewToModel ; viewToModel = new Row [ rowCount ] ; $F135 ( System , oldViewToModel , viewToModel , recreateFrom ) } } else { viewToModel = new Row [ rowCount ] ; } int i ; for ( i = NUM00 ; i < recreateFrom ; i ++ ) { viewToModel [ i ] . modelIndex = i ; } for ( i = recreateFrom ; i < rowCount ; i ++ ) { viewToModel [ i ] = new Row ( this , i ) ; } }
public $F2689 files $F72 { $F77087 ( setFiles ) $F161321 ( Collections , setFiles ) }
public static boolean isMac $F72 { $F27462 ( osName , System ) $F37156 ( osName ) return $F412 ( osName ) ; }
private boolean isAssignableFrom ( Throwable concreteThrowable , Set < $F78637 > throwableClasses ) { for ( $F78637 t : throwableClasses ) { if $F178804 ( t , concreteThrowable ) { return _BOOL ; } } return _BOOL ; }
public String popAndEncode ( boolean fromOnlineEvent ) { synchronized ( this ) { $F1338 ( activeBridgeMode ) activeBridgeMode . notifyOfFlush ( this , fromOnlineEvent ) ; $F4892 ( queue ) int totalPayloadLen = NUM00 ; int numMessagesToSend = NUM00 ; for ( JsMessage message : queue ) { int messageSize = calculatePackedMessageLength ( message ) ; $F129691 ( numMessagesToSend , totalPayloadLen , messageSize , MAX_PAYLOAD_SIZE ) totalPayloadLen += messageSize ; numMessagesToSend += NUM00 ; } $F7542 ( sb , totalPayloadLen ) for ( $F1316 ( i , numMessagesToSend ) ) { $F129703 ( message , queue ) packMessage ( message , sb ) ; } if $F5973 ( queue ) $F86 ( sb ) $F1822 ( ret , sb ) return ret ; } }
protected void print ( int v ) throws IOException $F45719 ( print , String , v )
public Object2DoubleOpenHashMap < IntRBTreeSet > confidenceMap $F72 { List < ItemSet > itemSets = learn ( ) ; Object2DoubleOpenHashMap < IntRBTreeSet > confidenceMap = new Object2DoubleOpenHashMap $F200 $F716 ( itemSets ) ; for ( ItemSet itemSet : itemSets ) { IntRBTreeSet itemSetCopy = new IntRBTreeSet ( itemSet . items ) ; confidenceMap . put ( itemSetCopy , itemSet . support / ( double ) setCount ) ; } return confidenceMap ; }
public static boolean isAllAlpha ( String str ) { $F397 ( str , _BOOL ) for ( $F186068 ( i , str ) ) { if ( ! $F154919 ( Character , str , i ) ) return _BOOL ; } return _BOOL ; }
private void extract ( int minsupp , int minlength , int maxlength , int item , $F2027 postfix , int plen , $F2027 buf2 , $F2027 buf3 , boolean destruct , Collector col ) { if ( header [ item ] == null ) $F932 if ( header [ item ] . sibling == null ) { if ( header [ item ] . count < minsupp ) $F932 extractLinear ( header [ item ] . count , minsupp , minlength , maxlength , item , postfix , plen , buf2 , col ) ; if ( destruct ) { $F17838 ( Arrays , header ) } $F665 } int support = NUM00 ; for ( FPNode cur = header [ item ] ; cur != null ; cur = cur . sibling ) { support += cur . count ; } if ( support < minsupp ) $F932 $F9952 ( Arrays , buf3 ) for ( FPNode cur = header [ item ] ; cur != null ; cur = cur . sibling ) { for ( FPNode parent = cur . parent ; parent . key >= NUM00 ; parent = parent . parent ) { buf3 [ parent . key ] += cur . count ; } } final int mminlength = minlength - ( plen + NUM00 ) ; if ( mminlength > NUM00 ) { int fparents = NUM00 ; for ( $F119 ( i , item ) ) { if ( buf3 [ i ] >= minsupp ) { fparents += NUM00 ; } } if ( fparents < mminlength ) $F932 } final int last = item - NUM00 ; FPTree proj = new FPTree ( item ) ; for ( FPNode cur = header [ item ] ; cur != null ; cur = cur . sibling ) { int j = buf2 . length ; for ( FPNode parent = cur . parent ; parent . key >= NUM00 ; parent = parent . parent ) { if ( buf3 [ parent . key ] >= minsupp ) { buf2 [ -- j ] = parent . key ; } } if ( buf2 . length - j >= mminlength ) { proj . insert ( proj , buf2 , j , buf2 . length , cur . count ) ; } } proj . reduceMemory ( ) ; postfix [ plen ++ ] = item ; if ( plen >= minlength && plen <= maxlength ) { col . collect ( support , postfix , NUM00 , plen ) ; } for ( $F141 ( j , last ) ) { proj . extract ( minsupp , minlength , maxlength , j , postfix , plen , buf2 , buf3 , destruct , col ) ; } if ( destruct ) $F10812 ( header , item ) }
public void updatePosition ( Particle particle , long elapsedTime ) { Vector3f speed = particle . getSpeed ( ) ; float delta = elapsedTime / NUM00 ; float dx = speed . x * delta ; float dy = speed . y * delta ; float dz = speed . z * delta ; Vector3f pos = particle . getPosition ( ) ; particle . setPosition ( pos . x + dx , pos . y + dy , pos . z + dz ) ; }
protected static int toDigit ( char ch , int index ) throws DSSException { $F338099 ( digit , Character , ch ) if ( digit == - NUM00 ) { throw new DSSException ( NUM00 + ch + NUM00 + index ) ; } return digit ; }
static void loadLibraryWithPath ( String libName , ClassLoader loader , String libraryPath ) $F78453
public Enumeration listOptions $F72 { $F6518 ( newVector ) $F9007 ( newVector ) $F1007 ( newVector ) }
public void testConstructorSignBytesPositive7 $F72 { byte $F3009 = { - NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 } ; int aSign = NUM00 ; byte $F3018 = { NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3030 ( rBytes ) $F3031 ( resBytes , aNumber ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , aNumber ) }
public void save ( File keyStore , String type , $F1469 password , $F1469 keyPassword , String caAlias ) throws GeneralSecurityException , IOException { $F156 ( store , KeyStore , type ) store . load ( null , password ) ; store . setKeyEntry ( caAlias , caKey , keyPassword , caCerts ) ; $F12015 ( out , keyStore ) try { store . store ( out , password ) ; } $F12241 ( ioe ) $F3229 ( out ) }
$F4562 ( view , deltaX , scrollX , deltaY , scrollY , scrollRange , fuzzyThreshold , scaleFactor , isTouchEvent , deltaValue , currentScrollValue , scrollValue , HORIZONTAL , VERTICAL , mode , newScrollValue , PullToRefreshBase , Log , LOG_TAG , State , Math )
public OrQueryBuilder add ( QueryBuilder filterBuilder ) $F18637 ( filters , filterBuilder , this )
$F3874 ( tag , msg , args , sLevel , LEVEL_DEBUG , String , Log )
public static $F96 randomBytes ( int length ) { $F2175 ( bytes , length ) SEEDED_RANDOM . nextBytes ( bytes ) ; return bytes ; }
void update ( long timeNanos , int rows ) { count ++ ; $F106734 ( executionTimeMinNanos , Math , timeNanos ) $F28619 ( executionTimeMaxNanos , Math , timeNanos ) $F106734 ( rowCountMin , Math , rows ) $F28619 ( rowCountMax , Math , rows ) double rowDelta = rows - rowCountMean ; rowCountMean += rowDelta / count ; rowCountM2 += rowDelta * ( rows - rowCountMean ) ; double timeDelta = timeNanos - executionTimeMeanNanos ; executionTimeMeanNanos += timeDelta / count ; executionTimeM2Nanos += timeDelta * ( timeNanos - executionTimeMeanNanos ) ; executionTimeCumulativeNanos += timeNanos ; rowCountCumulative += rows ; $F3224 ( lastUpdateTime , System ) }
public void test_ctor_2 $F72 throws SailException { final File file = new File ( getName ( ) + Options . JNL ) ; if $F3428 ( file ) { if $F7119 ( file ) $F1328 ( fail , file ) } $F859 ( properties ) properties . setProperty ( Options . FILE , file . toString ( ) ) ; final BigdataSail sail = new BigdataSail ( properties ) ; try { $F21883 ( sail ) sail . shutDown ( ) ; } finally { if $F1906 ( file ) { fail ( NUM00 + file ) ; if $F7119 ( file ) $F1328 ( fail , file ) } } }
$F1 public String toString $F72 { String result ; result = null ; if ( isObject ( ) ) { if ( isRoot ( ) ) { result = NUM00 ; } else if ( m_Name == null ) { result = NUM00 ; } else { result = escape ( m_Name ) + NUM00 ; } } else if ( isArray ( ) ) { if ( m_Name == null ) { result = NUM00 ; } else { result = escape ( m_Name ) + NUM00 ; } } else { if ( m_Name != null ) { result = escape ( m_Name ) + NUM00 + escape ( m_Value ) ; } else { result = NUM00 + m_Value ; } } return result ; }
public final boolean split_traces_keep_point $F72 { $F397 ( keep_point , _BOOL ) ItemSelectionFilter filter = new ItemSelectionFilter ( ItemSelectionChoice . TRACES ) ; $F129519 picked_items = r_board . pick_items ( keep_point . keep_point , keep_point . on_layer , filter ) ; for ( BrdItem curr_item : picked_items ) { BrdTracep a_trace = ( BrdTracep ) curr_item ; int line_idx = a_trace . polyline_find_line_idx ( keep_point . keep_point ) ; $F166042 ( line_idx ) $F102811 clean_list = a_trace . split_with_end_point ( line_idx , keep_point . keep_point ) ; return $F3816 ( clean_list ) ; } return _BOOL ; }
public static $F96 flipAllBitsInPlace $F24576 ( bytes , index , length ) { int endIndex = Math . min ( bytes . length , index + length ) ; for ( int i = index ; i < endIndex ; i ++ ) { bytes [ i ] = ( byte ) ( bytes [ i ] ^ NUM00 ) ; } return bytes ; }
public CreateIndexRequest source ( String source ) { return source ( $F43004 ( source , Charsets ) ) ; }
private void addUsers ( User [ ] users , LocalConfiguration configuration ) { for ( User user : users ) { configuration . addUser ( user . createUser ( ) ) ; } }
void tryToDrainBuffers $F72 { if $F39091 ( evictionLock ) { try { drainStatus . lazySet ( PROCESSING ) ; drainBuffers ( ) ; } finally { drainStatus . compareAndSet ( PROCESSING , IDLE ) ; $F704 ( evictionLock ) } } }
public void remove ( int i ) $F106 ( individuals , i )
public static boolean copyFile ( File source , File dest ) { $F4924 ( parentDest , dest ) if $F1906 ( parentDest ) { if ( ! $F40519 ( createDirectory , parentDest ) ) { return _BOOL ; } } try { Files . copy ( source . toPath ( ) , dest . toPath ( ) ) ; return _BOOL ; } $F132878 ( e , _BOOL ) }
public static String propertiesEncode ( Properties pp ) { $F1538 ( bos ) try { pp . store ( bos , NUM00 ) ; } $F272343 ( log , Level , e ) String result = new String $F87573 ( bos ) ; try { result = URLEncoder . encode ( result , MobileEnv . ENCODING ) ; } catch ( UnsupportedEncodingException e ) { log . log ( Level . SEVERE , NUM00 + MobileEnv . ENCODING , e ) ; $F27462 ( enc , System ) try { result = URLEncoder . encode ( result , enc ) ; $F556 ( log , enc ) } $F209655 ( log , Level , ex ) } return result ; }
$F1 public void generateRss ( XmlWriter w , ExtensionProfile extProfile ) throws IOException { ArrayList $F128418 attrs = new ArrayList $F128418 $F989 ; if ( mimeType != null ) { attrs . add ( new $F128417 ( NUM00 , mimeType . getMediaType ( ) ) ) ; } $F128437 ( uri , attrs ) if ( length != - NUM00 ) { attrs . add ( new $F128417 ( NUM00 , Long . toString ( length ) ) ) ; } w . simpleElement ( Namespaces . rssNs , NUM00 , attrs , null ) ; }
public void testSortsElementsByName $F72 throws Exception $F234199 ( dom1 , XppFactory , dom2 , assertEquals , comparator , xpath )
public static boolean deleteDirectory ( final File path ) { if $F3428 ( path ) { $F5459 ( files , path ) for ( File file : files ) { if $F3444 ( file ) { deleteDirectory ( file ) ; } else $F19636 ( file ) } } $F16252 ( path ) }
public void morph ( Component source , Component destination , int duration , Runnable onCompletion ) { morph ( source , destination , duration , _BOOL , onCompletion ) ; }
public static Timestamp stringToTimeStamp ( String dateTimeString , String dateTimeFormat , TimeZone tz , Locale locale ) throws ParseException { DateFormat dateFormat = toDateTimeFormat ( dateTimeFormat , tz , locale ) ; $F126579 ( parsedDate , dateFormat , dateTimeString ) return $F16812 ( parsedDate ) ; }
private boolean startsNewHunk ( String string ) { $F49299 ( string , _BOOL ) return $F95813 ( isLegalChar , string ) ; }
public void clearValues $F72 $F9096 ( valueMap )
$F32569 ( panel , cols , rows , filler , filled_cell_11 , _BOOL , cc , Box , index )
private HashMap $F3068 readChars $F97 ( d ) { HashMap $F3068 hm = new HashMap $F3068 $F72 ; int i = findSlashName ( d , NUM00 ) ; $F7879 ( i , hm ) PSParser psp = new PSParser ( d , i ) ; while ( _BOOL ) { String s = psp . readThing ( ) ; $F12685 ( c , s ) if ( c == NUM00 ) { int len = Integer . parseInt ( psp . readThing ( ) ) ; String go = psp . readThing ( ) ; if $F40270 ( go ) { psp . setLoc ( psp . getLoc ( ) + NUM00 ) ; $F96 line = psp . getNEncodedBytes ( len , password , lenIV ) ; hm . put ( s . substring ( NUM00 ) , line ) ; } } else if $F3057 ( s ) $F5153 } return hm ; }
public static $F96 stringToByteArray ( String input ) { char $F75414 = input . toCharArray ( ) ; byte $F75368 = $F3027 ( chars ) ; for ( $F1139 ( i , chars ) ) { bytes [ i ] = ( byte ) chars [ i ] ; } return bytes ; }
public void playFileForUser ( String fileName , String userName ) throws SoundPlaybackException { if $F4251 ( userName ) $F185872 ( userName , appProperties ) try { Guild guild = getUsersGuild ( userName ) ; joinUsersCurrentChannel ( userName ) ; playFile ( fileName , guild ) ; } $F1516 ( e ) }
$F1309 public static void runFinalizersOnExit ( boolean run ) { $F8108 ( sm , System ) if ( sm != null ) { sm . checkExit ( NUM00 ) ; } $F37039 ( hooksList , finalizeOnExit , run ) }
public $F3789 predictIntervals ( double conf ) { updateMeanAndVariance ( ) ; double val = Statistics . normalInverse ( NUM00 - ( NUM00 - conf ) / NUM00 ) ; $F3789 $F90858 ( arr ) ; arr [ NUM00 ] [ NUM00 ] = m_Mean + val * Math . sqrt ( m_Variance ) ; arr [ NUM00 ] [ NUM00 ] = m_Mean - val * Math . sqrt ( m_Variance ) ; return arr ; }
public static $F4203 T min ( $F11638 ( collection ) , $F38875 ( comparator ) ) { if ( comparator == null ) { $F1431 T result = ( T ) min ( ( Collection < java . lang . Comparable > ) collection ) ; return result ; } $F11642 ( it , collection ) $F11644 ( min , it ) while $F2921 ( it ) { $F11646 ( next , it ) if $F230914 ( comparator , min , next ) { min = next ; } } return min ; }
public static boolean checkSHA $F158766 ( shaHash , file ) { if ( TextUtils . isEmpty ( shaHash ) || file == null || ! FileUtils . isReadable ( file ) ) { $F294495 ( Log ) return _BOOL ; } final String hash = getSHA ( file ) ; if ( hash == null ) { $F294495 ( Log ) return _BOOL ; } $F84030 ( hash , shaHash ) }
public void addValueKeyName ( String key ) $F207 ( valueKeyNames , key )
public Assignment update ( Border border ) { Arrays . sort ( cs ) ; int j = NUM00 ; boolean found = ( cs [ NUM00 ] . core == border . core ) ; for ( $F1139 ( i , cs ) ) { if ( cs [ i ] . core != cs [ i - NUM00 ] . core ) { cs [ j ++ ] = cs [ i ] ; } found |= ( cs [ i ] . core == border . core ) ; } if ( found ) { if ( j == NUM00 ) { Border r = cs [ NUM00 ] ; cs = null ; return r ; } if ( j < cs . length ) { $F8003 ( cs , Arrays , j ) } return this ; } if ( j + NUM00 != cs . length ) { cs = Arrays . copyOf ( cs , j + NUM00 ) ; } cs [ j ] = border ; return this ; }
public static String fromChar ( int value ) { if ( value > NUM00 ) $F1274 String name ; initialize ( ) ; name = ( String ) _byChar . get ( new Integer ( value ) ) ; return name ; }
public static $F3803 splitLines ( final String content ) { if $F6036 ( content ) $F12522 ( Collections ) $F6542 ( lines , content ) $F26323 ( Arrays , lines ) }
$F1 public void draw ( Graphics2D g2 , Rectangle2D area , Point2D anchor , PlotState state , PlotRenderingInfo info ) { boolean b1 = ( area . getWidth ( ) <= MINIMUM_WIDTH_TO_DRAW ) ; boolean b2 = ( area . getHeight ( ) <= MINIMUM_HEIGHT_TO_DRAW ) ; if ( b1 || b2 ) $F932 if ( info != null ) { info . setPlotArea ( area ) ; } RectangleInsets insets = getInsets ( ) ; insets . trim ( area ) ; drawChipGrid ( g2 , area ) ; drawWaferEdge ( g2 , area ) ; }
public void addHole ( EdgeRing holeER ) { holeER . setShell ( this ) ; LinearRing hole = holeER . getRing ( ) ; $F92209 ( holes ) holes . add ( hole ) ; }
private static void registerComponents $F72 { registerComponent ( BarChartComponent . class , BarChartGui . class ) ; registerComponent ( DocViewerComponent . class , DocViewerDesktopComponent . class ) ; registerComponent ( ConsoleComponent . class , ConsoleDesktopComponent . class ) ; registerComponent ( DisplayComponent . class , DisplayComponentDesktopGui . class ) ; registerComponent ( DataWorldComponent . class , DataWorldDesktopComponent . class ) ; registerComponent ( HistogramComponent . class , HistogramGui . class ) ; registerComponent ( NetworkComponent . class , NetworkDesktopComponent . class ) ; registerComponent ( OdorWorldComponent . class , OdorWorldDesktopComponent . class ) ; registerComponent ( PieChartComponent . class , PieChartGui . class ) ; registerComponent ( ProjectionComponent . class , ProjectionGui . class ) ; registerComponent ( ReaderComponent . class , ReaderComponentDesktopGui . class ) ; registerComponent ( ScatterPlotComponent . class , ScatterPlotGui . class ) ; registerComponent ( TimeSeriesPlotComponent . class , TimeSeriesPlotGui . class ) ; registerComponent ( RasterPlotComponent . class , RasterPlotGui . class ) ; registerComponent ( VisionWorldComponent . class , VisionWorldDesktopComponent . class ) ; registerComponent ( GameComponent . class , GameDesktopComponent . class ) ; registerComponent ( DeviceInteractionComponent . class , DeviceInteractionDesktopComponent . class ) ; }
$F26776 ( container , mContainers )
private void initialize ( $F66526 opsType , Interface instance ) throws $F6730 $F245977 ( mOpsInstance , opsType , mRetainedFragmentManager , instance , _BOOL )
private long skipInputBytes ( long n ) throws IOException { $F8934 ( cbLock ) try { return iis . skipBytes ( n ) ; } $F796 ( cbLock ) }
public $F96 generate64BitHashId $F72 throws CryptoException { try { DERBitString publicKeyBitString = encodePublicKeyAsBitString ( publicKey ) ; $F96 hash = DigestUtil . getMessageDigest ( publicKeyBitString . getBytes ( ) , DigestType . SHA1 ) ; $F96 subHash = Arrays . copyOfRange ( hash , NUM00 , NUM00 ) ; subHash [ NUM00 ] &= NUM00 ; subHash [ NUM00 ] |= NUM00 ; return subHash ; } catch ( IOException ex ) $F102881 ( res , ex ) }
public static < C extends ConfigurationClient , S extends Configuration > CreateSubCommandHandler $F437105 create ( SubCommandArgumentParser parser , $F303831 ( p ) , OptionalRelationDefinition $F437105 r ) throws ArgumentException { return new CreateSubCommandHandler $F200 ( parser , p , r , null , p . child ( r ) ) ; }
public DSubjectInformationAccess $F157465 ( parent , value ) throws IOException $F157466 ( super , parent , setTitle , res , initComponents , prepopulateWithValue , value )
public void testSignerStringIdentityScope $F72 throws Exception { Signer s = new SignerStub ( NUM00 , IdentityScope . getSystemScope ( ) ) ; assertNotNull ( s ) ; $F64976 ( assertEquals , s ) assertSame ( IdentityScope . getSystemScope ( ) , s . getScope ( ) ) ; $F330425 ( assertNull , s ) try { Signer s2 = new SignerStub ( NUM00 , IdentityScope . getSystemScope ( ) ) ; fail ( NUM00 ) ; } catch ( KeyManagementException e ) $F845 Signer s2 = new SignerStub $F8320 ; $F12110 ( assertNull , s2 ) }
private Figure readLineElement ( IXMLElement elem ) throws IOException { HashMap < AttributeKey , Object > a = new HashMap < AttributeKey , Object > $F72 ; readCoreAttributes ( elem , a ) ; readTransformAttribute ( elem , a ) ; readOpacityAttribute ( elem , a ) ; readLineAttributes ( elem , a ) ; if ( FILL_COLOR . get ( a ) != null && STROKE_COLOR . get ( a ) == null ) $F103853 ( STROKE_COLOR , a , FILL_COLOR ) if ( FILL_GRADIENT . get ( a ) != null && STROKE_GRADIENT . get ( a ) == null ) $F103853 ( STROKE_GRADIENT , a , FILL_GRADIENT ) $F16843 ( FILL_COLOR , a ) $F16843 ( FILL_GRADIENT , a ) double x1 = toNumber ( elem , readAttribute ( elem , NUM00 , NUM00 ) ) ; double y1 = toNumber ( elem , readAttribute ( elem , NUM00 , NUM00 ) ) ; double x2 = toNumber ( elem , readAttribute ( elem , NUM00 , NUM00 ) ) ; double y2 = toNumber ( elem , readAttribute ( elem , NUM00 , NUM00 ) ) ; Figure figure = factory . createLine ( x1 , y1 , x2 , y2 , a ) ; elementObjects . put ( elem , figure ) ; return figure ; }
public ListModel ( final $F131 items ) { for ( $F9808 ( i , items ) ) $F24616 ( m_items , items , i ) }
public boolean isSetCallType $F72 $F8314 ( __isset_bit_vector , __CALLTYPE_ISSET_ID )
private IBuffer mapSource ( SourceMapper mapper , IBinaryType info , IClassFile bufferOwner ) { $F1469 contents = mapper . findSource ( getType ( ) , info ) ; if ( contents != null ) { IBuffer buffer = BufferManager . createBuffer ( bufferOwner ) ; $F1275 ( buffer ) BufferManager bufManager = getBufferManager ( ) ; bufManager . addBuffer ( buffer ) ; if ( buffer . getCharacters ( ) == null ) { buffer . setContents ( contents ) ; } buffer . addBufferChangedListener ( this ) ; mapper . mapSource ( getOuterMostEnclosingType ( ) , contents , info ) ; return buffer ; } else { IBuffer buffer = BufferManager . createNullBuffer ( bufferOwner ) ; $F1275 ( buffer ) BufferManager bufManager = getBufferManager ( ) ; bufManager . addBuffer ( buffer ) ; buffer . addBufferChangedListener ( this ) ; return buffer ; } }
public JFileDataStoreChooser ( Shell parent , int style , $F20109 ( extensions ) ) { this ( parent , style , associations ( extensions ) ) ; }
private void computeStaticLoadMetrics ( AccessProfile accessProfile ) throws BaseCollectionException { URI storageSystemId = accessProfile . getSystemId ( ) ; StorageSystem storageSystem = null ; try { storageSystem = _dbClient . queryObject ( $F41797 , storageSystemId ) ; _logger . info ( $F158210 ( storageSystem ) ) ; VNXeApiClient client = getVnxUnityClient ( accessProfile ) ; List < VNXeNasServer > nasServers = client . getNasServers ( ) ; for ( VNXeNasServer nasServer : nasServers ) { if ( ( nasServer . getMode ( ) == VNXeNasServer . NasServerModeEnum . DESTINATION ) || nasServer . getIsReplicationDestination ( ) ) { $F980 ( _logger ) $F598 } if ( nasServer . getIsSystem ( ) ) $F1448 VirtualNAS virtualNAS = findvNasByNativeId ( storageSystem , nasServer . getId ( ) ) ; if ( virtualNAS != null ) { _logger . info ( $F20534 ( nasServer ) ) ; StringMap dbMetrics = virtualNAS . getMetrics ( ) ; if ( dbMetrics == null ) { dbMetrics = new StringMap $F72 ; } StringMap tmpDbMetrics = populateDbMetrics ( nasServer , client ) ; dbMetrics . putAll ( tmpDbMetrics ) ; virtualNAS . setMetrics ( dbMetrics ) ; _dbClient . updateObject ( virtualNAS ) ; } } } catch ( Exception e ) $F73607 ( _logger , storageSystemId , e ) }
public final short readShort $F72 throws $F3258 { readFully ( scratch , NUM00 , NUM00 ) ; return ( short ) ( $F42449 ( scratch ) | $F18896 ( scratch ) ) ; }
public ReplicationJob createJobForCopyPartition ( long auditLogId , long auditLogEntryCreateTime , HiveObjectSpec spec ) throws StateUpdateException { $F35131 ( extras ) extras . put ( PersistedJobInfo . AUDIT_LOG_ID_EXTRAS_KEY , Long . toString ( auditLogId ) ) ; extras . put ( PersistedJobInfo . AUDIT_LOG_ENTRY_CREATE_TIME_KEY , Long . toString ( auditLogEntryCreateTime ) ) ; $F24645 ( partitionNames ) partitionNames . add ( spec . getPartitionName ( ) ) ; ReplicationOperation replicationOperation = ReplicationOperation . COPY_PARTITION ; PersistedJobInfo persistedJobInfo = jobInfoStore . resilientCreate ( replicationOperation , ReplicationStatus . PENDING , Optional . empty ( ) , srcCluster . getName ( ) , spec , partitionNames , Optional . empty ( ) , Optional . empty ( ) , Optional . empty ( ) , extras ) ; ReplicationTask replicationTask = new CopyPartitionTask ( conf , destinationObjectFactory , objectConflictHandler , srcCluster , destCluster , spec , Optional . $F72371 empty $F72 , Optional . $F72371 empty $F72 , directoryCopier , _BOOL ) ; return new ReplicationJob ( conf , replicationTask , onStateChangeHandler , persistedJobInfo ) ; }
$F9749 ( namespace , attName , attValue , xmlWriter , registerPrefix )
public static void main ( String ... args ) throws Exception { $F806 pages = { NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ; $F83 ( buff ) for ( String fileName : pages ) { String text = getContent ( fileName ) ; for ( String page : pages ) { text = StringUtils . replaceAll ( text , page + NUM00 , NUM00 ) ; } text = disableRailroads ( text ) ; text = removeHeaderFooter ( fileName , text ) ; buff . append ( text ) ; } $F1822 ( finalText , buff ) $F109797 ( output , BASE_DIR ) PrintWriter writer = new PrintWriter ( new FileWriter ( output ) ) ; writer . println ( NUM00 + NUM00 ) ; $F8438 ( writer ) writer . println ( NUM00 + NUM00 ) ; $F8438 ( writer ) writer . println ( NUM00 + Constants . getFullVersion ( ) + NUM00 ) ; writer . println ( finalText ) ; $F8438 ( writer ) $F59 ( writer ) }
public static $F529 findOrders $F71242 ( dctx , context ) $F19580 ( findOrders , dctx , context , _BOOL )
public static boolean isFileExist ( String filePath ) { if $F7283 ( StringUtils , filePath ) { return _BOOL ; } $F1705 ( file , filePath ) return $F60822 ( file ) ; }
public static PronghornStage findStageByPath ( GraphManager m , int ... path ) { int ordinal = path [ NUM00 ] ; int i = NUM00 ; int limit = m . stageIdToStage . length ; while ( i < limit ) { if ( null != m . stageIdToStage [ i ] ) { if ( - NUM00 == m . multInputIds [ m . stageIdToInputsBeginIdx [ m . stageIdToStage [ i ] . stageId ] ] ) { if ( -- ordinal <= NUM00 ) { return findStageByPath ( m , m . stageIdToStage [ i ] , NUM00 , path ) ; } } } i ++ ; } throw new UnsupportedOperationException ( NUM00 + path [ NUM00 ] ) ; }
public static $F1986 calculateTStats $F93381 ( coef , stderror , k ) { $F9662 ( result , k ) for ( $F119 ( i , k ) ) { result [ i ] = coef [ i ] / stderror [ i ] ; } return result ; }
static void runBootstrappers ( final CoreEarlyComponent early , final List < HeroicBootstrap > bootstrappers ) throws Exception { for ( final HeroicBootstrap bootstrap : bootstrappers ) { try { bootstrap . run ( early ) ; } catch ( Exception e ) { throw new Exception ( NUM00 + bootstrap , e ) ; } } }
public static $F96 checkIndexHeaderID ( DataInput in , $F96 expectedID ) throws IOException { byte id [ ] = new byte [ StringHelper . ID_LENGTH ] ; in . readBytes ( id , NUM00 , id . length ) ; if $F1209 ( Arrays , id , expectedID ) { throw new CorruptIndexException ( NUM00 + StringHelper . idToString ( expectedID ) + NUM00 + StringHelper . idToString ( id ) , in ) ; } return id ; }
public $F96 toByteArray $F72 { $F1208 ( b , output ) ByteArray . write16bit ( numOfEntries , b , NUM00 ) ; return b ; }
protected void saveBuffer ( String name ) { StringBuffer sb = m_History . getNamedBuffer ( name ) ; if ( sb != null ) { if ( m_SaveOut . save ( sb ) ) { m_Log . logMessage ( NUM00 ) ; } } }
public $F46031 scheduleStorage ( VirtualArray srcVarray , $F4324 requestedVPlexSystems , URI srcStorageSystem , VirtualPool srcVpool , boolean isHARequest , VirtualArray requestedHaVarray , VirtualPool haVpool , VirtualPoolCapabilityValuesWrapper capabilities , Project project , VpoolUse vpoolUse , Map < VpoolUse , $F46031 > currentRecommendations ) { $F973 ( _log ) if ( ! isHARequest ) { return scheduleStorageForLocalVPLEXVolume ( srcVarray , requestedVPlexSystems , srcStorageSystem , srcVpool , capabilities , project , vpoolUse , currentRecommendations ) ; } else { return scheduleStorageForDistributedVPLEXVolume ( srcVarray , requestedVPlexSystems , srcStorageSystem , srcVpool , requestedHaVarray , haVpool , capabilities , project , vpoolUse , currentRecommendations ) ; } }
$F1113 public static $F3803 completeRelativePath ( $F1113 String baseDir , $F1113 String shownBaseDir , $F1113 String relativePath ) { $F3803 result = Lists . newLinkedList ( ) ; String bashBaseDir = OSUtil . toBashCompatible ( baseDir ) ; for ( String path : completeAbsolutePath ( baseDir + File . separator + relativePath , Predicates . $F11299 alwaysTrue $F72 ) ) { if $F7311 ( path , bashBaseDir ) { result . add ( shownBaseDir + $F8182 ( path , bashBaseDir ) ) ; } } return result ; }
protected boolean isFileSpecifyingModuleSpecifier ( String specifier ) { return $F20 ( specifier ) && $F7792 ( specifier ) != IPath . SEPARATOR ; }
private void insertExpectedPoolSettingsPerTier ( CIMObjectPath capabilitiesPath , $F2100 ( keyMap ) ) { $F3803 expectedPoolSettingsTier = ( $F3803 ) keyMap . get ( Constants . VNXPOOLCAPABILITIES_TIER ) ; expectedPoolSettingsTier . add ( capabilitiesPath . toString ( ) + Constants . HYPHEN + Constants . NO_DATA_MOVEMENT ) ; expectedPoolSettingsTier . add ( capabilitiesPath . toString ( ) + Constants . HYPHEN + Constants . AUTO_TIER ) ; expectedPoolSettingsTier . add ( capabilitiesPath . toString ( ) + Constants . HYPHEN + Constants . HIGH_AVAILABLE_TIER ) ; expectedPoolSettingsTier . add ( capabilitiesPath . toString ( ) + Constants . HYPHEN + Constants . LOW_AVAILABLE_TIER ) ; expectedPoolSettingsTier . add ( capabilitiesPath . toString ( ) + Constants . HYPHEN + Constants . START_HIGH_THEN_AUTO_TIER ) ; }
private static final void transferStreams ( InputStream source , OutputStream destination , String path , IProgressMonitor monitor ) throws CoreException { monitor = Policy . monitorFor ( monitor ) ; try { synchronized ( buffer ) { while ( _BOOL ) { int bytesRead = - NUM00 ; try $F616 ( bytesRead , source , buffer ) catch ( IOException e ) { String msg = NLS . bind ( Messages . failedReadDuringWrite , path ) ; Policy . error ( EFS . ERROR_READ , msg , e ) ; } try { if ( bytesRead == - NUM00 ) { $F59 ( destination ) $F597 } $F11584 ( destination , buffer , bytesRead ) } catch ( IOException e ) { String msg = NLS . bind ( Messages . couldNotWrite , path ) ; Policy . error ( EFS . ERROR_WRITE , msg , e ) ; } monitor . worked ( NUM00 ) ; } } } finally { Policy . safeClose ( source ) ; Policy . safeClose ( destination ) ; } }
private int pathPositionAtLevel ( int orgUnitLevel ) { return ( orgUnitLevel - NUM00 ) * NUM00 + NUM00 ; }
private int makeAvailable $F72 { if ( pos != - NUM00 ) $F1083 total += tail - head - pad ; System . arraycopy ( buffer , tail - pad , buffer , NUM00 , pad ) ; head = NUM00 ; tail = pad ; for ( $F589 ) { int bytesRead = NUM00 ; try { bytesRead = input . read ( buffer , tail , bufSize - tail ) ; } catch ( IOException e ) $F11389 if ( bytesRead == - NUM00 ) { final String msg = NUM00 ; throw new MalformedStreamException ( msg ) ; } tail += bytesRead ; findSeparator ( ) ; int av = available ( ) ; if ( av > NUM00 || pos != - NUM00 ) { return av ; } } }
protected void addNumericTrainClass ( double classValue , double weight ) { $F12283 ( classValue , m_MaxTarget ) $F45132 ( classValue , m_MinTarget ) if ( m_TrainClassVals == null ) { $F90860 ( m_TrainClassVals ) $F90860 ( m_TrainClassWeights ) } if ( m_NumTrainClassVals == m_TrainClassVals . length ) { $F1986 temp = new double $F10562 ( m_TrainClassVals ) ; $F7057 ( System , m_TrainClassVals , temp ) m_TrainClassVals = temp ; temp = new double $F10562 ( m_TrainClassWeights ) ; $F7057 ( System , m_TrainClassWeights , temp ) m_TrainClassWeights = temp ; } m_TrainClassVals [ m_NumTrainClassVals ] = classValue ; m_TrainClassWeights [ m_NumTrainClassVals ] = weight ; m_NumTrainClassVals ++ ; }
private List < Group > parseGroups ( JSONArray groups , String groupType ) throws JSONException , AdeUsageException { if $F1277 ( groups ) throw new AdeUsageException ( NUM00 + groupType ) ; List < Group > currentGroups = new ArrayList < Group > $F72 ; for ( $F1088 ( i , groups ) ) { JSONObject group = groups . getJSONObject ( i ) ; $F21024 ( name , group ) $F21024 ( dataType , group ) short evalOrder = group . getShort ( NUM00 ) ; $F21024 ( ruleName , group ) if ( ! verifyStringParam ( name , NUM00 , NUM00 ) || name . equalsIgnoreCase ( NUM00 ) || ! validateDataType ( dataType ) || evalOrder < NUM00 || ! verifyStringParam ( ruleName , NUM00 , NUM00 ) ) { throw new AdeUsageException ( NUM00 + groupType + NUM00 ) ; } currentGroups . add ( new Group ( name , GroupType . valueOf ( groupType ) , DataType . valueOf ( dataType . toUpperCase ( ) ) , evalOrder , ruleName ) ) ; } validateEvaluationOrderAndName ( currentGroups ) ; return currentGroups ; }
$F73303 ( axis , trans , prevImageSize , imageSize , prevViewSize , viewSize , drawableSize , m , Matrix , percentage , Math )
public DoubleFft1d ( int n ) { $F6853 ( n ) this . n = n ; if ( ! ConcurrencyUtils . isPowerOf2 ( n ) ) { if ( getReminder ( n , factors ) >= NUM00 ) { plan = Plans . BLUESTEIN ; nBluestein = ConcurrencyUtils . nextPow2 ( n * NUM00 - NUM00 ) ; bk1 = new double [ NUM00 * nBluestein ] ; bk2 = new double [ NUM00 * nBluestein ] ; this . ip = new int [ NUM00 + ( int ) Math . ceil ( NUM00 + ( NUM00 < < ( int ) ( Math . log ( nBluestein + NUM00 ) / Math . log ( NUM00 ) ) / NUM00 ) ) ] ; this . w = new double [ nBluestein ] ; int twon = NUM00 * nBluestein ; nw = ip [ NUM00 ] ; if ( twon > ( nw < < NUM00 ) ) { nw = twon > > NUM00 ; makewt ( nw ) ; } nc = ip [ NUM00 ] ; if ( nBluestein > ( nc < < NUM00 ) ) { nc = nBluestein > > NUM00 ; makect ( nc , w , nw ) ; } bluesteini ( ) ; } else { plan = Plans . MIXED_RADIX ; wtable = new double [ NUM00 * n + NUM00 ] ; wtable_r = new double [ NUM00 * n + NUM00 ] ; cffti ( ) ; rffti ( ) ; } } else { plan = Plans . SPLIT_RADIX ; this . ip = new int [ NUM00 + ( int ) Math . ceil ( NUM00 + ( NUM00 < < ( int ) ( Math . log ( n + NUM00 ) / Math . log ( NUM00 ) ) / NUM00 ) ) ] ; this . w = new double [ n ] ; int twon = NUM00 * n ; nw = ip [ NUM00 ] ; if ( twon > ( nw < < NUM00 ) ) { nw = twon > > NUM00 ; makewt ( nw ) ; } nc = ip [ NUM00 ] ; if ( n > ( nc < < NUM00 ) ) { nc = n > > NUM00 ; makect ( nc , w , nw ) ; } } }
$F1 public void dragGestureRecognized ( DragGestureEvent evt ) { DragEntry dragEntry = kseFrame . dragSelectedEntry ( ) ; $F2329 ( dragEntry ) ImageIcon icon = dragEntry . getImage ( ) ; $F170001 ( toolkit , Toolkit ) Dimension dim = toolkit . getBestCursorSize ( icon . getIconWidth ( ) , icon . getIconHeight ( ) ) ; BufferedImage buffImage = new BufferedImage ( dim . width , dim . height , BufferedImage . TYPE_INT_ARGB_PRE ) ; icon . paintIcon ( evt . getComponent ( ) , buffImage . getGraphics ( ) , NUM00 , NUM00 ) ; cursor = toolkit . createCustomCursor ( buffImage , $F69159 , NUM00 ) ; evt . startDrag ( cursor , new KeyStoreEntryTransferable ( dragEntry ) , this ) ; }
public static boolean isIdentifierHelperChar ( char ch ) { return NUM00 == ch || NUM00 == ch || NUM00 == ch || NUM00 == ch ; }
public void addHeader ( String line ) $F207 ( header , line )
public static IAddress loadAddress ( final ResultSet resultSet , final String columnName ) throws SQLException { $F1832 ( Preconditions , resultSet ) $F1832 ( Preconditions , columnName ) final String addressString = readString ( resultSet , columnName ) ; return resultSet . wasNull ( ) ? null : new CAddress ( new BigInteger ( addressString ) ) ; }
private static String encode ( String stringToEncode ) { String encoded ; try { encoded = URLEncoder . encode ( stringToEncode , UTF_8 ) ; } catch ( UnsupportedEncodingException e ) $F235380 ( e ) $F2936 ( encoded ) $F2936 ( encoded ) $F2936 ( encoded ) return encoded ; }
public static String toGetUrl ( String url , Bundle params ) { if ( params != null ) { $F2366 ( url ) for ( $F3465 ( key , params ) ) { url = url + key + NUM00 + params . getString ( key ) + NUM00 ; } } return url ; }
public void namespaceAfterStartElement ( String prefix , String uri ) throws SAXException { if ( m_firstTagNotEmitted && m_firstElementURI == null && m_firstElementName != null ) { String prefix1 = getPrefixPart ( m_firstElementName ) ; if ( prefix1 == null && EMPTY <missing ')'> $F94540 ( prefix ) ) { m_firstElementURI = uri ; } } startPrefixMapping ( prefix , uri , _BOOL ) ; }
protected static String guessType ( File file ) { $F20605 ( name , file ) $F37864 ( suffix , name ) return mimeMap . get ( $F131081 ( suffix , Locale ) ) ; }
public void testAdvanceAllTerms $F72 throws Exception { $F24645 ( termsList ) $F9629 ( termsList , Arrays , commonTerms ) $F9629 ( termsList , Arrays , mediumTerms ) $F9629 ( termsList , Arrays , rareTerms ) String terms [ ] = $F16104 ( termsList ) ; for ( $F5151 ( amount ) ) { for ( $F33988 ( minNrShouldMatch , terms ) ) { Scorer expected = scorer ( terms , minNrShouldMatch , Mode . DOC_VALUES ) ; Scorer actual = scorer ( terms , minNrShouldMatch , Mode . SCORER ) ; assertAdvance ( expected , actual , amount ) ; expected = scorer ( terms , minNrShouldMatch , Mode . DOC_VALUES ) ; actual = scorer ( terms , minNrShouldMatch , Mode . BULK_SCORER ) ; assertAdvance ( expected , actual , amount ) ; } } }
public boolean isPublic $F72 { return Modifier . isPublic ( getAccessFlags ( ) ) ; }
public boolean releaseEncumbranceBudget ( $F87266 ( detailsMap ) ) { if ( detailsMap == null ) throw new ValidationException ( Arrays . asList ( new ValidationError $F6600 ) ) ; detailsMap . put ( Constants . CONSUMEORRELEASE , _BOOL ) ; final BigDecimal bd = getDetails ( detailsMap ) ; return $F179074 ( bd ) ; }
protected Transferable createLocaleTransferable $F101011 ( formats ) throws IOException $F1337
public void putLength ( int len ) throws IOException { if ( len < NUM00 ) { write ( ( byte ) len ) ; } else if ( len < $F152872 ) { write ( $F19905 ) ; write ( ( byte ) len ) ; } else if ( len < $F152872 ) { write ( $F19905 ) ; write ( $F8043 ( len ) ) ; write ( ( byte ) len ) ; } else if ( len < $F152872 ) { write ( $F19905 ) ; write ( $F8043 ( len ) ) ; write ( $F8043 ( len ) ) ; write ( ( byte ) len ) ; } else { write ( $F19905 ) ; write ( $F8043 ( len ) ) ; write ( $F8043 ( len ) ) ; write ( $F8043 ( len ) ) ; write ( ( byte ) len ) ; } }
public void putGenericFontFamily ( String familyName , Font font ) $F19138 ( genericFontFamilies , familyName , font )
private boolean writeReference ( Object value , NodeMap node ) { String name = get ( value ) ; $F29168 ( size ) if ( name != null ) $F67896 ( node , refer , name , _BOOL ) $F2544 ( unique , String , size ) node . put ( mark , unique ) ; put ( value , unique ) ; return _BOOL ; }
private NSObject parseData $F72 throws ParseException { NSObject obj = null ; skip ( ) ; if ( accept ( DATA_GSOBJECT_BEGIN_TOKEN ) ) { skip ( ) ; expect ( DATA_GSBOOL_BEGIN_TOKEN , DATA_GSDATE_BEGIN_TOKEN , DATA_GSINT_BEGIN_TOKEN , DATA_GSREAL_BEGIN_TOKEN ) ; if ( accept ( DATA_GSBOOL_BEGIN_TOKEN ) ) { skip ( ) ; expect ( DATA_GSBOOL_TRUE_TOKEN , DATA_GSBOOL_FALSE_TOKEN ) ; if ( accept ( DATA_GSBOOL_TRUE_TOKEN ) ) { $F256895 ( obj , _BOOL ) } else { $F256895 ( obj , _BOOL ) } skip ( ) ; } else if ( accept ( DATA_GSDATE_BEGIN_TOKEN ) ) { skip ( ) ; String dateString = readInputUntil ( DATA_END_TOKEN ) ; obj = new NSDate ( dateString ) ; } else if ( accept ( DATA_GSINT_BEGIN_TOKEN , DATA_GSREAL_BEGIN_TOKEN ) ) { skip ( ) ; String numberString = readInputUntil ( DATA_END_TOKEN ) ; $F256895 ( obj , numberString ) } read ( DATA_END_TOKEN ) ; } else { String dataString = readInputUntil ( DATA_END_TOKEN ) ; $F2899 ( dataString ) $F203657 ( numBytes , dataString ) $F2175 ( bytes , numBytes ) for ( $F1139 ( i , bytes ) ) { String byteString = dataString . substring ( i * NUM00 , i * NUM00 + NUM00 ) ; $F241425 ( byteValue , Integer , byteString ) $F8214 ( bytes , i , byteValue ) } obj = new NSData ( bytes ) ; skip ( ) ; } return obj ; }
public boolean empty $F72 { $F214965 ( individuals ) }
$F1 public String format ( DateTimeFormatter formatter ) { $F10578 ( Objects , formatter ) $F5330 ( formatter , this ) }
public $F40687 String toDottedClassName $F72 { return ClassName . toDottedClassName ( className ) ; }
public DAddExtensions ( JFrame parent , String title , X509ExtensionSet extensions , PublicKey authorityPublicKey , X500Name authorityCertName , BigInteger authorityCertSerialNumber , PublicKey subjectPublicKey ) { $F36748 ( super , parent , Dialog ) $F15426 ( setTitle , res ) this . extensions = extensions ; this . authorityPublicKey = authorityPublicKey ; this . authorityCertName = authorityCertName ; this . authorityCertSerialNumber = authorityCertSerialNumber ; this . subjectPublicKey = subjectPublicKey ; initComponents ( ) ; }
private void playNext $F72 { if ( mediaType == Config . YOUTUBE_MEDIA_TYPE_VIDEO ) { seekVideo ( NUM00 ) ; restartVideo ( ) ; $F665 } if ( previousWasCalled ) { previousWasCalled = _BOOL ; $F24630 ( iterator ) } if $F87568 ( iterator ) { $F106110 ( iterator , youTubeVideos ) } $F45366 ( videoItem , iterator ) nextWasCalled = _BOOL ; playVideo ( ) ; }
public static $F4203 T invokeMethod ( Object obj , String name , Object ... params ) throws NoSuchMethodException { $F749 paramTypes = getParamTypes ( params ) ; final $F6969 aClass = obj . getClass ( ) ; Method method ; try { method = aClass . getDeclaredMethod ( name , paramTypes ) ; } catch ( NoSuchMethodException e ) { method = aClass . getMethod ( name , paramTypes ) ; } method . setAccessible ( _BOOL ) ; try { return ( T ) method . invoke ( obj , params ) ; } catch ( IllegalAccessException | InvocationTargetException e ) $F9491 ( e ) }
public void addNodes ( NodeIterator iterator ) { $F132452 ( m_mutable , XSLMessages , XPATHErrorResources ) if ( null != iterator ) { Node obj ; while ( null != $F161934 ( obj , iterator ) ) { addElement ( obj ) ; } } }
public static RotateStream create ( Path path ) { synchronized ( _streams ) { WeakReference < RotateStream > ref = _streams . get ( path ) ; RotateStream $F189308 ( stream , ref ) ; if ( stream == null ) { stream = new RotateStream ( path ) ; _streams . put ( path , $F164361 ( stream ) ) ; } return stream ; } }
private void cleanUpHistory $F72 { if ( $F1030 ( mHistoryOfNumbers ) && mHistoryOfNumbers . size ( ) >= MAX_HISTORY_SIZE ) { for ( int i = NUM00 ; i < Math . max ( NUM00 , MAX_HISTORY_SIZE / NUM00 ) ; i ++ ) { mPreviousNumbers . remove ( mHistoryOfNumbers . removeFirst ( ) ) ; } } }
$F1431 protected void processStyledAttributes ( $F4170 TypedArray a ) { float targetAspectRatioX = Math . abs ( a . getFloat ( R . styleable . ucrop_UCropView_ucrop_aspect_ratio_x , DEFAULT_ASPECT_RATIO ) ) ; float targetAspectRatioY = Math . abs ( a . getFloat ( R . styleable . ucrop_UCropView_ucrop_aspect_ratio_y , DEFAULT_ASPECT_RATIO ) ) ; if ( targetAspectRatioX == SOURCE_IMAGE_ASPECT_RATIO || targetAspectRatioY == SOURCE_IMAGE_ASPECT_RATIO ) { mTargetAspectRatio = SOURCE_IMAGE_ASPECT_RATIO ; } else { mTargetAspectRatio = targetAspectRatioX / targetAspectRatioY ; } }
public LogMessage ( String template , int code ) { this ( template , null , EMPTY_ <missing ';'> NUM00 <missing ';'> _ARRAY , code , Optional . empty ( ) ) ; }
protected String action_translate ( String act_string , int act_pos , Hashtable label_map , Hashtable label_types ) { int id_start ; int pos ; int len ; String id_str ; boolean in_id ; StringBuffer result ; char $F76061 ; if $F6036 ( act_string ) return act_string ; $F3935 ( len , act_string ) $F16053 ( result , len ) ; buffer = new char [ len + NUM00 ] ; $F16116 ( act_string , len , buffer ) buffer [ len ] = NUM00 ; in_id = _BOOL ; for ( pos = id_start = NUM00 ; pos <= len ; pos ++ ) { if ( in_id ) { if ( ! is_id_char ( buffer [ pos ] ) ) { id_str = new String ( buffer , id_start , pos - id_start ) ; result . append ( label_translate ( id_str , act_pos , label_map , label_types ) ) ; if ( buffer [ pos ] != NUM00 ) result . append ( buffer , pos , NUM00 ) ; in_id = _BOOL ; } else $F845 } else { if ( is_id_start ( buffer [ pos ] ) ) { in_id = _BOOL ; id_start = pos ; } else { if ( buffer [ pos ] != NUM00 ) result . append ( buffer , pos , NUM00 ) ; } } } $F92 ( result ) }
public boolean canLoad $F72 { return _BOOL ; }
public boolean bool $F72 { return ( Double . isNaN ( m_val ) || ( m_val == NUM00 ) ) ? _BOOL : _BOOL ; }
public String generateXML ( String sessionID , String versionName , long installAge , RequestData data ) throws RequestFailureException { XmlSerializer serializer = Xml . newSerializer ( ) ; $F29429 ( writer ) try { serializer . setOutput ( writer ) ; serializer . startDocument ( NUM00 , _BOOL ) ; $F18823 ( serializer ) $F49456 ( serializer ) $F49456 ( serializer ) $F49456 ( serializer ) serializer . attribute ( null , NUM00 , NUM00 + data . getRequestID ( ) + NUM00 ) ; serializer . attribute ( null , NUM00 , NUM00 + sessionID + NUM00 ) ; serializer . attribute ( null , NUM00 , data . getInstallSource ( ) ) ; appendExtraAttributes ( NUM00 , serializer ) ; $F18823 ( serializer ) $F49456 ( serializer ) serializer . attribute ( null , NUM00 , Build . VERSION . RELEASE ) ; $F49456 ( serializer ) $F18825 ( serializer ) $F18823 ( serializer ) serializer . attribute ( null , NUM00 , getBrand ( ) ) ; serializer . attribute ( null , NUM00 , getClient ( ) ) ; serializer . attribute ( null , NUM00 , getAppId ( ) ) ; serializer . attribute ( null , NUM00 , versionName ) ; $F49456 ( serializer ) serializer . attribute ( null , NUM00 , getLanguage ( ) ) ; serializer . attribute ( null , NUM00 , String . valueOf ( installAge ) ) ; serializer . attribute ( null , NUM00 , getAdditionalParameters ( ) ) ; appendExtraAttributes ( NUM00 , serializer ) ; if ( data . isSendInstallEvent ( ) ) { $F18823 ( serializer ) $F49456 ( serializer ) $F49456 ( serializer ) $F18825 ( serializer ) } else { $F18823 ( serializer ) $F18825 ( serializer ) $F18823 ( serializer ) $F49456 ( serializer ) $F18825 ( serializer ) } $F18825 ( serializer ) $F18825 ( serializer ) $F45698 ( serializer ) } catch ( IOException e ) $F49482 ( e ) catch ( IllegalArgumentException e ) $F49482 ( e ) catch ( IllegalStateException e ) $F49482 ( e ) $F92 ( writer ) }
protected boolean strictParseBoolean ( String s ) { $F50542 ( s ) if $F21935 ( s ) { return _BOOL ; } if $F21935 ( s ) { return _BOOL ; } $F11416 ( s ) }
$F1 public boolean eIsSet ( int featureID ) { switch ( featureID ) { case FunctionblockPackage . EVENT__NAME : $F6439 ( NAME_EDEFAULT , name ) case FunctionblockPackage . EVENT__PROPERTIES : $F6441 ( properties ) } $F6444 ( super , featureID ) }
public String format ( DateTimeFormatter formatter ) { $F10578 ( Objects , formatter ) $F5330 ( formatter , this ) }
private void initializeSourceCodeMap ( String adaptedContent ) { $F161023 ( sourceCodeWithLine ) ; int lineNumber = NUM00 ; $F161688 ( sr , adaptedContent ) $F20481 ( br , sr ) String line ; try { while $F443 ( line , br ) { sourceCodeWithLine . put ( lineNumber , line ) ; lineNumber ++ ; } } catch ( IOException ex ) $F50614 ( LOGGER , ex ) }
$F1 public void onUpgrade ( SQLiteDatabase db , int oldVersion , int newVersion ) { if ( oldVersion != newVersion ) { if ( newVersion == NUM00 && oldVersion == NUM00 ) { $F17544 ( WXLogUtils , TAG_STORAGE , oldVersion , newVersion ) boolean updateResult = _BOOL ; try { $F657 ( start , System ) $F41822 ( db ) $F35113 ( SQL_ADD_COLUMN_TIMESTAMP , TABLE_STORAGE , COLUMN_TIMESTAMP ) $F12258 ( WXLogUtils , TAG_STORAGE , SQL_ADD_COLUMN_TIMESTAMP ) db . execSQL ( SQL_ADD_COLUMN_TIMESTAMP ) ; $F35113 ( SQL_ADD_COLUMN_PERSISTENT , TABLE_STORAGE , COLUMN_PERSISTENT ) $F12258 ( WXLogUtils , TAG_STORAGE , SQL_ADD_COLUMN_PERSISTENT ) db . execSQL ( SQL_ADD_COLUMN_PERSISTENT ) ; String SQL_UPDATE_TABLE = NUM00 + TABLE_STORAGE + NUM00 + COLUMN_TIMESTAMP + NUM00 + $F52170 ( sDateFormatter ) + NUM00 + COLUMN_PERSISTENT + NUM00 ; $F12258 ( WXLogUtils , TAG_STORAGE , SQL_UPDATE_TABLE ) db . execSQL ( SQL_UPDATE_TABLE ) ; $F41894 ( db ) $F5740 ( time , System , start ) $F63425 ( WXLogUtils , TAG_STORAGE , time ) } catch ( Exception e ) { WXLogUtils . d ( TAG_STORAGE , $F141088 ( oldVersion , newVersion , e ) ) ; updateResult = _BOOL ; } finally { $F41895 ( db ) } if ( ! updateResult ) { $F13527 ( WXLogUtils , TAG_STORAGE ) deleteDB ( ) ; onCreate ( db ) ; } } else $F19529 ( deleteDB , onCreate , db ) } }
public Matrix U $F72 { $F51685 ( U ) }
protected $F2689 allowedDuplicateErrorCodes $F72 $F29020 ( Collections )
private boolean isFieldVisited ( Object object , Field objectField , Field field ) { $F10651 bag = visitedFields . get ( object ) ; $F1933 ( bag , _BOOL ) String objectFiledKey = objectField == null ? NUM00 : objectField . toGenericString ( ) ; $F48768 ( fields , bag , objectFiledKey ) $F28807 ( fields , field ) }
public void removeFromCompletedList ( DownloadInfoRunnable downloadInfoRunnable ) $F106 ( mCompletedList , downloadInfoRunnable )
protected void addShingledPhraseQueries ( final BooleanQuery mainQuery , final List $F304761 clauses , final Collection < FieldParams > fields , int shingleSize , final float tiebreaker , final int slop ) throws SyntaxError { if ( $F255654 ( fields ) || null == clauses || clauses . size ( ) < shingleSize ) $F665 if ( NUM00 == shingleSize ) $F8935 ( shingleSize , clauses ) final int lastClauseIndex = shingleSize - NUM00 ; $F83 ( userPhraseQuery ) for ( int i = NUM00 ; i < clauses . size ( ) - lastClauseIndex ; i ++ ) { $F84 ( userPhraseQuery ) for ( $F9993 ( j , lastClauseIndex ) ) { userPhraseQuery . append ( clauses . get ( i + j ) . val ) ; $F84 ( userPhraseQuery ) } $F84 ( userPhraseQuery ) $F84 ( userPhraseQuery ) } ExtendedSolrQueryParser pp = createEdismaxQueryParser ( this , IMPOSSIBLE_FIELD_NAME ) ; pp . addAlias ( IMPOSSIBLE_FIELD_NAME , tiebreaker , getFieldBoosts ( fields ) ) ; pp . setPhraseSlop ( slop ) ; pp . setRemoveStopFilter ( _BOOL ) ; pp . makeDismax = _BOOL ; pp . minClauseSize = NUM00 ; Query phrase = $F118108 ( pp , userPhraseQuery ) ; if ( phrase != null ) { mainQuery . add ( phrase , BooleanClause . Occur . SHOULD ) ; } }
public String asXmlId $F72 { return DatatypeConverter . printHexBinary ( tokenDigest . getValue ( ) ) ; }
private void updateInfo $F72 { m_updating = _BOOL ; $F18684 ( nameField , m_cc ) appsHostField . setText ( m_cc . getAppsHost ( ) ) ; appsPortField . setText ( String . valueOf ( m_cc . getAppsPort ( ) ) ) ; bTestApps . setIcon ( getStatusIcon ( m_cc . isAppsServerOK ( _BOOL ) ) ) ; boolean rw = CConnection . isServerEmbedded ( ) ? _BOOL : ! m_cc . isAppsServerOK ( _BOOL ) ; dbTypeLabel . setReadWrite ( rw ) ; dbTypeField . setReadWrite ( rw ) ; dbTypeField . setSelectedItem ( m_cc . getType ( ) ) ; hostLabel . setReadWrite ( rw ) ; hostField . setReadWrite ( rw ) ; hostField . setText ( m_cc . getDbHost ( ) ) ; portLabel . setReadWrite ( rw ) ; dbPortField . setReadWrite ( rw ) ; dbPortField . setText ( String . valueOf ( m_cc . getDbPort ( ) ) ) ; sidLabel . setReadWrite ( rw ) ; sidField . setReadWrite ( rw ) ; sidField . setText ( m_cc . getDbName ( ) ) ; dbUidLabel . setReadWrite ( rw ) ; dbUidField . setReadWrite ( rw ) ; dbUidField . setText ( m_cc . getDbUid ( ) ) ; dbPwdField . setEditable ( rw ) ; dbPwdField . setText ( m_cc . getDbPwd ( ) ) ; cbBequeath . setReadWrite ( rw ) ; cbBequeath . setEnabled ( m_cc . isOracle ( ) ) ; cbBequeath . setSelected ( m_cc . isBequeath ( ) ) ; boolean fwEnabled = rw && m_cc . isViaFirewall ( ) && m_cc . isOracle ( ) ; cbFirewall . setReadWrite ( rw && m_cc . isOracle ( ) ) ; cbFirewall . setSelected ( m_cc . isViaFirewall ( ) ) ; fwHostLabel . setReadWrite ( fwEnabled ) ; fwHostField . setReadWrite ( fwEnabled ) ; fwHostField . setText ( m_cc . getFwHost ( ) ) ; fwPortLabel . setReadWrite ( fwEnabled ) ; fwPortField . setReadWrite ( fwEnabled ) ; fwPortField . setText ( String . valueOf ( m_cc . getFwPort ( ) ) ) ; bTestDB . setToolTipText ( m_cc . getConnectionURL ( ) ) ; bTestDB . setIcon ( getStatusIcon ( m_cc . isDatabaseOK ( ) ) ) ; m_updating = _BOOL ; }
public void createSnapshot $F72 throws BackupException { logger . debug ( NUM00 + this . snapshotName ) ; processHelper . exec ( NUM00 , lvcreateCmd ) ; }
public final Uri storeLogFile ( final LogFile logFile , final int sessionId ) { $F248400 ( values ) values . put ( Schema . COL_MANUFACTURER , logFile . getManufacturer ( ) ) ; values . put ( Schema . COL_MODEL , logFile . getModel ( ) ) ; values . put ( Schema . COL_REVISION , logFile . getRevision ( ) ) ; values . put ( Schema . COL_SWID , logFile . getSwid ( ) ) ; values . put ( Schema . COL_SWVER , logFile . getSwVersion ( ) ) ; values . put ( Schema . COL_TIMESTAMP , System . currentTimeMillis ( ) ) ; values . put ( Schema . COL_SESSION_ID , sessionId ) ; return contentResolver . insert ( ContentProvider . CONTENT_URI_LOGFILE , values ) ; }
public $F2539 merge ( $F2540 ( curProps ) , $F2540 ( newProps ) ) throws IOException { $F2539 $F26694 ( props , newProps ) ; for ( $F19318 ( e , curProps ) ) { $F3477 ( name , e ) $F840 ( curValue , e ) if $F1710 ( props , name ) $F1717 ( props , name , curValue ) } return props ; }
$F129060 ( views , direction , focusableMode , focusableCount , descendantFocusability , getDescendantFocusability , FOCUS_BLOCK_DESCENDANTS , i , getChildCount , child , getChildAt , VISIBLE , ii , infoForChild , mCurItem , FOCUS_AFTER_DESCENDANTS , isFocusable , FOCUSABLES_TOUCH_MODE , isInTouchMode , isFocusableInTouchMode , this )
public Builder deletePreferredLanguage $F72 $F18794 ( deleteFields , this )
public void onPrepared ( MediaPlayer player ) { mState = State . PLAYING ; updateNotification ( String . format ( getString ( R . string . media_state_playing ) , mFile . getFileName ( ) ) ) ; if ( mMediaController != null ) $F7728 ( mMediaController , _BOOL ) player . seekTo ( mStartPosition ) ; configAndStartMediaPlayer ( ) ; $F14406 ( mPlayOnPrepared , processPauseRequest ) if ( mMediaController != null ) { mMediaController . updatePausePlay ( ) ; } }
private void parseParameter ( String token , String value ) { if ( token != null && value != null ) { if $F8397 ( token , NONCE_TOKEN ) $F24818 ( mNonce , value ) if $F8397 ( token , STALE_TOKEN ) $F14411 ( parseStale , value ) if $F8397 ( token , OPAQUE_TOKEN ) $F24818 ( mOpaque , value ) if $F8397 ( token , QOP_TOKEN ) { $F21936 ( mQop , value ) $F665 } if $F8397 ( token , ALGORITHM_TOKEN ) { $F21936 ( mAlgorithm , value ) $F665 } } }
public $F3803 makeURLList ( String shard ) { $F3803 urls = StrUtils . splitSmart ( shard , NUM00 , _BOOL ) ; for ( $F2277 ( i , urls ) ) { urls . set ( i , buildUrl ( urls . get ( i ) ) ) ; } if $F3817 ( urls ) Collections . shuffle ( urls , r ) ; return urls ; }
public void skip ( int n ) throws IOException { dis . skip ( n ) ; }
$F26776 ( container , mContainers )
public void toAllInRadius ( WorldServer world , Vec3d pos , double radius ) { double maxDistance = radius * radius + radius * radius + radius * radius ; toAll ( world . getPlayers ( EntityPlayerMP . class , null ) ) ; }
public static ECDHECryptography fromNamedCurveId ( int supportedGroupId ) { SupportedGroup group = SupportedGroup . fromId ( supportedGroupId ) ; if ( group == null ) $F1337 else { try { return new ECDHECryptography ( group . name ( ) ) ; } catch ( GeneralSecurityException e ) { LOGGER . log ( Level . WARNING , NUM00 , new Object [ ] { group . name ( ) , e . getMessage ( ) } ) ; $F1274 } } }
$F25527 ( redundantOpCompactThreshold , redundantOpCount , lruEntries )
private static void addHeader ( Message message , String name , String value ) { $F14855 protocolHeaders = CastUtils . cast ( ( $F22331 ) message . get ( Message . PROTOCOL_HEADERS ) ) ; if ( protocolHeaders == null ) { protocolHeaders = new TreeMap $F14854 ( String . CASE_INSENSITIVE_ORDER ) ; message . put ( Message . PROTOCOL_HEADERS , protocolHeaders ) ; } $F3803 header = CastUtils . cast ( ( $F11654 ) protocolHeaders . get ( name ) ) ; if ( header == null ) { $F30598 ( header ) protocolHeaders . put ( name , header ) ; } if $F10471 ( header ) $F207 ( header , value ) else { header . set ( NUM00 , header . get ( NUM00 ) + NUM00 + value ) ; } }
private static void swilk ( $F8748 init , $F1986 x , int n , int n1 , int n2 , $F1986 a , $F1986 w , $F1986 pw , $F2027 ifault ) { pw [ NUM00 ] = NUM00 ; if $F104544 ( w ) { w [ NUM00 ] = NUM00 ; } double an = n ; ifault [ NUM00 ] = NUM00 ; int nn2 = n / NUM00 ; if ( n2 < nn2 ) $F932 ifault [ NUM00 ] = NUM00 ; $F44858 ( n ) if ( ! init [ NUM00 ] ) { if ( n == NUM00 ) { a [ NUM00 ] = SQRTH ; } else { double an25 = an + NUM00 ; double summ2 = NUM00 ; for ( $F50176 ( i , n2 ) ) { a [ i ] = ppnd ( ( i - TH ) / an25 ) ; $F60596 ( summ2 , a , i ) } summ2 *= NUM00 ; $F96817 ( ssumm2 , Math , summ2 ) double rsn = NUM00 / Math . sqrt ( an ) ; double a1 = poly ( C1 , NUM00 , rsn ) - a [ NUM00 ] / ssumm2 ; int i1 ; double fac ; if ( n > NUM00 ) { i1 = NUM00 ; double a2 = - a [ NUM00 ] / ssumm2 + poly ( C2 , NUM00 , rsn ) ; fac = Math . sqrt ( ( summ2 - $F247147 ( a ) - $F247147 ( a ) ) / ( NUM00 - NUM00 * a1 * a1 - NUM00 * a2 * a2 ) ) ; a [ NUM00 ] = a1 ; a [ NUM00 ] = a2 ; } else { i1 = NUM00 ; fac = Math . sqrt ( ( summ2 - $F247147 ( a ) ) / ( NUM00 - NUM00 * a1 * a1 ) ) ; a [ NUM00 ] = a1 ; } for ( int i = i1 ; i <= nn2 ; ++ i ) { a [ i ] = - a [ i ] / fac ; } } init [ NUM00 ] = _BOOL ; } $F44858 ( n1 ) int ncens = n - n1 ; ifault [ NUM00 ] = NUM00 ; if ( ncens < NUM00 || ( ncens > NUM00 && n < NUM00 ) ) $F932 ifault [ NUM00 ] = NUM00 ; double delta = ncens / an ; if ( delta > NUM00 ) $F932 double w1 , xx ; if $F75466 ( w ) { w1 = NUM00 + w [ NUM00 ] ; ifault [ NUM00 ] = NUM00 ; } else { ifault [ NUM00 ] = NUM00 ; double range = x [ n1 ] - x [ NUM00 ] ; if ( range < SMALL ) $F932 ifault [ NUM00 ] = NUM00 ; xx = x [ NUM00 ] / range ; double sx = xx ; double sa = - a [ NUM00 ] ; int j = n - NUM00 ; for ( $F50176 ( i , n1 ) ) { double xi = x [ i ] / range ; sx += xi ; if ( i != j ) { sa += sign ( NUM00 , i - j ) * a [ Math . min ( i , j ) ] ; } xx = xi ; -- j ; } ifault [ NUM00 ] = NUM00 ; if ( n > NUM00 ) { ifault [ NUM00 ] = NUM00 ; } sa /= n1 ; sx /= n1 ; double ssa = NUM00 ; double ssx = NUM00 ; double sax = NUM00 ; j = n ; double asa ; for ( $F50176 ( i , n1 ) ) { if ( i != j ) { asa = sign ( NUM00 , i - j ) * a [ Math . min ( i , j ) ] - sa ; } else { asa = - sa ; } double xsx = x [ i ] / range - sx ; ssa += asa * asa ; ssx += xsx * xsx ; sax += asa * xsx ; -- j ; } double ssassx = Math . sqrt ( ssa * ssx ) ; w1 = ( ssassx - sax ) * ( ssassx + sax ) / ( ssa * ssx ) ; } w [ NUM00 ] = NUM00 - w1 ; if ( n == NUM00 ) { pw [ NUM00 ] = PI6 * ( Math . asin ( Math . sqrt ( w [ NUM00 ] ) ) - STQR ) ; $F665 } double y = Math . log ( w1 ) ; xx = Math . log ( an ) ; double m = NUM00 ; double s = NUM00 ; if ( n <= NUM00 ) { double gamma = poly ( G , NUM00 , an ) ; if ( y >= gamma ) { pw [ NUM00 ] = SMALL ; $F665 } y = - Math . log ( gamma - y ) ; m = poly ( C3 , NUM00 , an ) ; s = Math . exp ( poly ( C4 , NUM00 , an ) ) ; } else { m = poly ( C5 , NUM00 , xx ) ; s = Math . exp ( poly ( C6 , NUM00 , xx ) ) ; } if ( ncens > NUM00 ) { double ld = - Math . log ( delta ) ; double bf = NUM00 + xx * BF1 ; double z90f = Z90 + bf * Math . pow ( poly ( C7 , NUM00 , Math . pow ( XX90 , xx ) ) , ld ) ; double z95f = Z95 + bf * Math . pow ( poly ( C8 , NUM00 , Math . pow ( XX95 , xx ) ) , ld ) ; double z99f = Z99 + bf * Math . pow ( poly ( C9 , NUM00 , xx ) , ld ) ; double zfm = ( z90f + z95f + z99f ) / NUM00 ; double zsd = ( Z90 * ( z90f - zfm ) + Z95 * ( z95f - zfm ) + Z99 * ( z99f - zfm ) ) / ZSS ; double zbar = zfm - zsd * ZM ; m += zbar * s ; s *= zsd ; } pw [ NUM00 ] = alnorm ( ( y - m ) / s , UPPER ) ; }
public String asString $F72 { $F83 ( buff ) for ( $F119 ( i , arrayLevel ) ) { $F12290 ( refCount , buff ) $F84 ( buff ) } if ( refCount ) { if ( ! classObj . isPrimitive ) $F86 ( buff ) } $F11659 ( buff , classObj ) if ( refCount ) { if ( ! classObj . isPrimitive ) $F86 ( buff ) } for ( $F119 ( i , arrayLevel ) ) { if ( refCount ) $F86 ( buff ) else { if ( ! classObj . isPrimitive ) $F86 ( buff ) } $F84 ( buff ) } if ( ! refCount ) { $F181852 ( isObject , buff ) } $F92 ( buff ) }
public boolean recreateWorkspaceTable ( SQLiteDatabase db ) { $F41822 ( db ) try { Cursor c = db . query ( TABLE_WORKSPACE_SCREENS , new String [ ] { LauncherSettings . WorkspaceScreens . _ID } , null , null , null , null , LauncherSettings . WorkspaceScreens . SCREEN_RANK ) ; $F17809 ( sortedIDs ) long maxId = NUM00 ; try { while $F12260 ( c ) { Long id = c . getLong ( NUM00 ) ; if $F2200 ( sortedIDs , id ) { sortedIDs . add ( id ) ; $F19410 ( maxId , Math , id ) } } } $F3229 ( c ) db . execSQL ( NUM00 + TABLE_WORKSPACE_SCREENS ) ; addWorkspacesTable ( db , _BOOL ) ; $F2199 ( total , sortedIDs ) for ( $F119 ( i , total ) ) { $F20904 ( values ) values . put ( LauncherSettings . WorkspaceScreens . _ID , sortedIDs . get ( i ) ) ; values . put ( LauncherSettings . WorkspaceScreens . SCREEN_RANK , i ) ; addModifiedTime ( values ) ; db . insertOrThrow ( TABLE_WORKSPACE_SCREENS , null , values ) ; } $F41894 ( db ) mMaxScreenId = maxId ; } catch ( SQLException ex ) { Log . e ( $F65849 ( TAG , ex ) ) ; return _BOOL ; } finally { $F41895 ( db ) } return _BOOL ; }
public List < JsonObject > executeParametrizedStatement ( String statement , $F3803 parameterNames , $F6689 parameterValues ) { $F44898 ( namedParams , JsonObject ) for ( $F2277 ( param , parameterNames ) ) $F62899 ( namedParams , parameterNames , param , parameterValues ) ParameterizedN1qlQuery query = N1qlQuery . parameterized ( statement , namedParams ) ; return executeQuery ( query ) ; }
public final T endAll $F72 { while $F5973 ( tagStack ) $F5795 ( end ) return getSelf ( ) ; }
$F203214 ( name , append , m_doc )
public static Table createPartitionedTable ( Configuration conf , HiveMetastoreClient ms , HiveObjectSpec tableSpec , TableType tableType , Path warehouseRoot ) throws IOException , HiveMetastoreException { Path tableLocation = getPathForHiveObject ( warehouseRoot , tableSpec ) ; Table table = new Table $F72 ; table . setDbName ( tableSpec . getDbName ( ) ) ; table . setTableName ( tableSpec . getTableName ( ) ) ; $F35131 ( parameters ) parameters . put ( HiveParameterKeys . TLDT , $F172781 ( Long , System ) ) ; table . setParameters ( parameters ) ; table . setTableType ( tableType . toString ( ) ) ; List < FieldSchema > $F204 ( partitionCols ) ; partitionCols . add ( new FieldSchema ( $F7288 ) ) ; partitionCols . add ( new FieldSchema ( $F7288 ) ) ; table . setPartitionKeys ( partitionCols ) ; StorageDescriptor sd = new StorageDescriptor $F72 ; List < FieldSchema > $F204 ( columns ) ; columns . add ( new FieldSchema ( $F7288 ) ) ; sd . setCols ( columns ) ; if ( tableType == TableType . MANAGED_TABLE || tableType == TableType . EXTERNAL_TABLE ) { sd . setLocation ( tableLocation . toString ( ) ) ; } sd . setSerdeInfo ( new SerDeInfo ( NUM00 , NUM00 , $F4190 ) ) ; table . setSd ( sd ) ; if ( ! ms . existsDb ( table . getDbName ( ) ) ) { ms . createDatabase ( new Database ( table . getDbName ( ) , null , null , null ) ) ; } ms . createTable ( table ) ; return table ; }
$F13436 ( node , count , capacity , _BOOL , l , last , first , notEmpty )
void drawDivider ( Canvas canvas , Rect bounds , int childIndex ) { final Drawable divider = mDivider ; final boolean clipDivider = mClipDivider ; if ( ! clipDivider ) { divider . setBounds ( bounds ) ; } else { $F72208 ( canvas ) canvas . clipRect ( bounds ) ; } divider . draw ( canvas ) ; if ( clipDivider ) { $F72213 ( canvas ) } }
protected FormSpec ( DefaultAlignment defaultAlignment , String encodedDescription ) { this ( defaultAlignment , Sizes . DEFAULT , NO_GROW ) ; parseAndInitValues ( $F91593 ( encodedDescription , Locale ) ) ; }
public static $F4203 $F5675 decode ( InputStream data , Parser $F4203 parser ) throws IOException { $F2237 ( stream , CodedInputStream , data ) $F98037 ( list ) while ( ! stream . isAtEnd ( ) ) { int size = stream . readRawVarint32 ( ) ; $F96 element = stream . readRawBytes ( size ) ; T decoded = parser . parseFrom ( element ) ; list . add ( decoded ) ; } return list ; }
$F1 public void drawItem ( Graphics2D g2 , XYItemRendererState state , Rectangle2D dataArea , PlotRenderingInfo info , XYPlot plot , ValueAxis domainAxis , ValueAxis rangeAxis , XYDataset dataset , int series , int item , CrosshairState crosshairState , int pass ) { if ( $F931 ( getPlotLines ) || ( ( ! ( domainAxis instanceof CyclicNumberAxis ) ) && ( ! ( rangeAxis instanceof CyclicNumberAxis ) ) ) || ( item <= NUM00 ) ) { super . drawItem ( g2 , state , dataArea , info , plot , domainAxis , rangeAxis , dataset , series , item , crosshairState , pass ) ; $F665 } double xn = dataset . getXValue ( series , item - NUM00 ) ; double yn = dataset . getYValue ( series , item - NUM00 ) ; if $F35707 ( Double , yn ) { super . drawItem ( g2 , state , dataArea , info , plot , domainAxis , rangeAxis , dataset , series , item , crosshairState , pass ) ; $F665 } $F1993 ( x ) $F1993 ( y ) x [ NUM00 ] = xn ; y [ NUM00 ] = yn ; xn = dataset . getXValue ( series , item ) ; yn = dataset . getYValue ( series , item ) ; if $F35707 ( Double , yn ) $F932 x [ NUM00 ] = xn ; y [ NUM00 ] = yn ; double xcycleBound = Double . NaN ; double ycycleBound = Double . NaN ; boolean xBoundMapping = _BOOL , yBoundMapping = _BOOL ; CyclicNumberAxis cnax = null , cnay = null ; if ( domainAxis instanceof CyclicNumberAxis ) { cnax = ( CyclicNumberAxis ) domainAxis ; xcycleBound = cnax . getCycleBound ( ) ; xBoundMapping = cnax . isBoundMappedToLastCycle ( ) ; if ( ( x [ NUM00 ] != x [ NUM00 ] ) && ( ( xcycleBound >= x [ NUM00 ] ) && ( xcycleBound <= x [ NUM00 ] ) || ( xcycleBound >= x [ NUM00 ] ) && ( xcycleBound <= x [ NUM00 ] ) ) ) { $F1993 ( nx ) $F1993 ( ny ) $F603 ( nx , x ) $F603 ( nx , x ) $F603 ( ny , y ) $F603 ( ny , y ) nx [ NUM00 ] = xcycleBound ; ny [ NUM00 ] = ( $F50510 ( y ) ) * ( xcycleBound - x [ NUM00 ] ) / ( $F50510 ( x ) ) + y [ NUM00 ] ; x = nx ; y = ny ; } } if ( rangeAxis instanceof CyclicNumberAxis ) { cnay = ( CyclicNumberAxis ) rangeAxis ; ycycleBound = cnay . getCycleBound ( ) ; yBoundMapping = cnay . isBoundMappedToLastCycle ( ) ; if ( ( y [ NUM00 ] != y [ NUM00 ] ) && ( ( ycycleBound >= y [ NUM00 ] ) && ( ycycleBound <= y [ NUM00 ] ) || ( ycycleBound >= y [ NUM00 ] ) && ( ycycleBound <= y [ NUM00 ] ) ) ) { $F160815 ( nx , x ) $F160815 ( ny , y ) $F603 ( nx , x ) $F603 ( nx , x ) $F603 ( ny , y ) $F603 ( ny , y ) ny [ NUM00 ] = ycycleBound ; nx [ NUM00 ] = ( $F50510 ( x ) ) * ( ycycleBound - y [ NUM00 ] ) / ( $F50510 ( y ) ) + x [ NUM00 ] ; if $F9634 ( x ) { $F603 ( nx , x ) $F603 ( ny , y ) } x = nx ; y = ny ; } else if ( $F9634 ( x ) && ( y [ NUM00 ] != y [ NUM00 ] ) && ( ( ycycleBound >= y [ NUM00 ] ) && ( ycycleBound <= y [ NUM00 ] ) || ( ycycleBound >= y [ NUM00 ] ) && ( ycycleBound <= y [ NUM00 ] ) ) ) { $F1993 ( nx ) $F1993 ( ny ) $F603 ( nx , x ) $F603 ( nx , x ) $F603 ( nx , x ) $F603 ( ny , y ) $F603 ( ny , y ) $F603 ( ny , y ) ny [ NUM00 ] = ycycleBound ; nx [ NUM00 ] = ( $F50510 ( x ) ) * ( ycycleBound - y [ NUM00 ] ) / ( $F50510 ( y ) ) + x [ NUM00 ] ; x = nx ; y = ny ; } } if $F9634 ( x ) { super . drawItem ( g2 , state , dataArea , info , plot , domainAxis , rangeAxis , dataset , series , item , crosshairState , pass ) ; $F665 } OverwriteDataSet newset = new OverwriteDataSet ( x , y , dataset ) ; if ( cnax != null ) { if ( xcycleBound == x [ NUM00 ] ) { cnax . setBoundMappedToLastCycle ( x [ NUM00 ] <= xcycleBound ) ; } if ( xcycleBound == x [ NUM00 ] ) { cnax . setBoundMappedToLastCycle ( x [ NUM00 ] <= xcycleBound ) ; } } if ( cnay != null ) { if ( ycycleBound == y [ NUM00 ] ) { cnay . setBoundMappedToLastCycle ( y [ NUM00 ] <= ycycleBound ) ; } if ( ycycleBound == y [ NUM00 ] ) { cnay . setBoundMappedToLastCycle ( y [ NUM00 ] <= ycycleBound ) ; } } super . drawItem ( g2 , state , dataArea , info , plot , domainAxis , rangeAxis , newset , series , NUM00 , crosshairState , pass ) ; if ( cnax != null ) { if ( xcycleBound == x [ NUM00 ] ) { cnax . setBoundMappedToLastCycle ( x [ NUM00 ] <= xcycleBound ) ; } if ( xcycleBound == x [ NUM00 ] ) { cnax . setBoundMappedToLastCycle ( x [ NUM00 ] <= xcycleBound ) ; } } if ( cnay != null ) { if ( ycycleBound == y [ NUM00 ] ) { cnay . setBoundMappedToLastCycle ( y [ NUM00 ] <= ycycleBound ) ; } if ( ycycleBound == y [ NUM00 ] ) { cnay . setBoundMappedToLastCycle ( y [ NUM00 ] <= ycycleBound ) ; } } super . drawItem ( g2 , state , dataArea , info , plot , domainAxis , rangeAxis , newset , series , NUM00 , crosshairState , pass ) ; if $F9634 ( x ) { if ( cnax != null ) { if ( xcycleBound == x [ NUM00 ] ) { cnax . setBoundMappedToLastCycle ( x [ NUM00 ] <= xcycleBound ) ; } if ( xcycleBound == x [ NUM00 ] ) { cnax . setBoundMappedToLastCycle ( x [ NUM00 ] <= xcycleBound ) ; } } if ( cnay != null ) { if ( ycycleBound == y [ NUM00 ] ) { cnay . setBoundMappedToLastCycle ( y [ NUM00 ] <= ycycleBound ) ; } if ( ycycleBound == y [ NUM00 ] ) { cnay . setBoundMappedToLastCycle ( y [ NUM00 ] <= ycycleBound ) ; } } super . drawItem ( g2 , state , dataArea , info , plot , domainAxis , rangeAxis , newset , series , NUM00 , crosshairState , pass ) ; } if ( cnax != null ) { cnax . setBoundMappedToLastCycle ( xBoundMapping ) ; } if ( cnay != null ) { cnay . setBoundMappedToLastCycle ( yBoundMapping ) ; } }
public static void writeInt ( DataOutput out , int v ) throws IOException { out . writeByte ( NUM00 & v ) ; out . writeByte ( $F223664 ( v ) ) ; out . writeByte ( $F223664 ( v ) ) ; out . writeByte ( $F223664 ( v ) ) ; }
public void writeField ( final String name , final double value ) throws $F3258 $F261761 ( writeField , name , Double , value )
public Creature calculateNextCreature ( final int questLevel ) { final List < Creature > possibleCreaturesToSpawn = new ArrayList < Creature > $F72 ; int lastLevel = NUM00 ; for ( final Creature creature : sortedCreatures ) { if ( creature . getLevel ( ) > questLevel ) $F5153 if ( creature . getLevel ( ) > lastLevel ) { $F725 ( possibleCreaturesToSpawn ) lastLevel = creature . getLevel ( ) ; } possibleCreaturesToSpawn . add ( creature ) ; } Creature creatureToSpawn = null ; if $F10471 ( possibleCreaturesToSpawn ) { $F14770 ( creatureToSpawn , sortedCreatures ) } else { Collections . shuffle ( possibleCreaturesToSpawn ) ; $F36986 ( creatureToSpawn , possibleCreaturesToSpawn ) } return creatureToSpawn ; }
$F1 public void before ( PropertyInfoRestRep oldProps , PropertyInfoRestRep newProps ) { String newIntervalStr = newProps . getProperty ( BackupConstants . SCHEDULE_INTERVAL ) ; String newStartTimeStr = newProps . getProperty ( BackupConstants . SCHEDULE_TIME ) ; if ( $F4251 ( newIntervalStr ) && $F4251 ( newStartTimeStr ) ) $F23406 ( _log ) String intervalStr = $F4251 ( newIntervalStr ) ? oldProps . getProperty ( BackupConstants . SCHEDULE_INTERVAL ) : newIntervalStr ; String startTimeStr = $F4251 ( newStartTimeStr ) ? oldProps . getProperty ( BackupConstants . SCHEDULE_TIME ) : newStartTimeStr ; $F21153 ( _log , intervalStr , startTimeStr ) validateBackupIntervalAndStartTime ( intervalStr , startTimeStr ) ; }
$F1 public void deleteTrait ( String guid , String traitNameToBeDeleted ) throws AtlasException { guid = ParamChecker . notEmpty ( guid , NUM00 ) ; traitNameToBeDeleted = ParamChecker . notEmpty ( traitNameToBeDeleted , NUM00 ) ; if ( ! typeSystem . isRegistered ( traitNameToBeDeleted ) ) { $F424057 ( msg , String , traitNameToBeDeleted ) LOG . error ( msg ) ; throw new TypeNotFoundException ( msg ) ; } repository . deleteTrait ( guid , traitNameToBeDeleted ) ; onTraitDeletedFromEntity ( repository . getEntityDefinition ( guid ) , traitNameToBeDeleted ) ; }
public void addTables ( Collection < Table > tables ) { for ( Iterator < Table > it = tables . iterator ( ) ; it . hasNext ( ) ; ) { addTable ( ( Table ) it . next ( ) ) ; } }
protected void writeFile ( String template , Writer writer ) { $F826 ( template ) $F5172 ( bufferedWriter , writer ) String output = replace ( template , null ) ; try $F288 ( bufferedWriter , output ) catch ( IOException e ) { logger . log ( Diagnostic . Kind . ERROR , NUM00 ) ; $F301 ( e ) } finally $F236461 ( bufferedWriter , e ) }
public static String slurpURLNoExceptions ( URL u , String encoding ) { try $F8587 ( slurpURL , u , encoding ) $F84580 ( e ) }
public synchronized boolean clear $F72 { $F58185 ( isLoading , _BOOL ) loader = new Thread $F8320 ; $F2346 ( loader ) return _BOOL ; }
public int indexOf ( final RoundedToolItem item ) { checkWidget ( ) ; return items . indexOf ( item ) ; }
public void addAttribute ( String alias , String typeUri , boolean required , int count ) throws MessageException { if ( alias . indexOf ( NUM00 ) > - NUM00 || alias . indexOf ( NUM00 ) > - NUM00 || alias . indexOf ( NUM00 ) > - NUM00 || alias . indexOf ( NUM00 ) > - NUM00 ) throw new MessageException ( NUM00 + alias ) ; _parameters . set ( new Parameter ( NUM00 + alias , typeUri ) ) ; String level = required ? NUM00 : NUM00 ; Parameter levelParam = _parameters . getParameter ( level ) ; Parameter newParam ; if ( levelParam == null ) { newParam = new Parameter ( level , alias ) ; } else { newParam = new Parameter ( level , levelParam . getValue ( ) + NUM00 + alias ) ; _parameters . removeParameters ( level ) ; } _parameters . set ( newParam ) ; setCount ( alias , count ) ; if ( DEBUG ) _log . debug ( NUM00 + typeUri + NUM00 + alias + NUM00 + count + NUM00 + required ) ; }
public Void call $F72 throws Exception { final List < $F8318 > tasks = new LinkedList < $F8318 > $F72 ; try { for ( IV $F5162 termId : graphs ) { final $F300911 ft = new $F300911 ( new DrainIteratorTask ( termId ) ) ; tasks . add ( ft ) ; executor . execute ( ft ) ; } for ( $F8318 f : tasks ) $F217730 ( f ) } catch ( Throwable ex ) { for ( $F8318 f : tasks ) f . cancel ( _BOOL ) ; $F5301 ( ex ) } $F3229 ( buffer ) $F1274 }
protected void runFullImport $F5805 ( dataConfig , extraParams ) throws Exception { $F274034 ( params ) $F16824 ( params ) $F16824 ( params ) $F545 ( params , dataConfig ) $F16824 ( params ) $F16824 ( params ) params . putAll ( extraParams ) ; NamedList l = new NamedList $F72 ; for ( $F19318 ( e , params ) ) { l . add ( $F15245 ( e ) ) ; } LocalSolrQueryRequest request = new LocalSolrQueryRequest ( h . getCore ( ) , l ) ; h . query ( NUM00 , request ) ; }
public String userIdFromRange ( Object ominId , Object omaxId ) { $F41834 ( minId , FunctionHandler , ominId ) $F41834 ( maxId , FunctionHandler , omaxId ) Stack $F2305 stack = getStack ( minId , maxId ) ; if $F3817 ( stack ) { return Integer . toString ( stack . pop ( ) ) ; } $F824 }
public void start $F72 { if ( isStarted ) $F23406 ( log ) $F973 ( log ) $F2346 ( systemConsumer ) isStarted = _BOOL ; }
public static void generateBinaryOperationFlags $F124432 ( environment , nextOffset , result , resultSize , instructions ) throws IllegalArgumentException { $F1832 ( Preconditions , environment ) $F1832 ( Preconditions , result ) $F1832 ( Preconditions , resultSize ) $F1832 ( Preconditions , instructions ) final long baseOffset = nextOffset - instructions . size ( ) ; long offset = nextOffset ; generateSignFlagCode ( environment , offset , result , resultSize , instructions ) ; offset = ( baseOffset + instructions . size ( ) ) - NUM00 ; instructions . add ( ReilHelpers . createBisz ( offset + NUM00 , resultSize , result , OperandSize . BYTE , Helpers . ZERO_FLAG ) ) ; instructions . add ( ReilHelpers . createStr ( offset + NUM00 , OperandSize . BYTE , NUM00 , OperandSize . BYTE , Helpers . CARRY_FLAG ) ) ; instructions . add ( ReilHelpers . createStr ( offset + NUM00 , OperandSize . BYTE , NUM00 , OperandSize . BYTE , Helpers . OVERFLOW_FLAG ) ) ; }
public boolean isLabelMovable $F72 { mxGraph graph = graphComponent . getGraph ( ) ; String label = graph . getLabel ( state . getCell ( ) ) ; return graph . isLabelMovable ( state . getCell ( ) ) && label != null && $F20 ( label ) ; }
public int writeTypeList ( TypeList typeList ) { $F35972 ( off , data ) $F5078 types = typeList . types ; writeInt ( types . length ) ; for ( short type : types ) { writeShort ( type ) ; } return off ; }
public static void loadConfigResource ( String resourceName ) throws IOException { $F725 ( config ) config . putAll ( loadPropertiesFromResource ( resourceName ) ) ; }
public static void safeCloseStream ( InputStream in ) { if ( in != null ) { try $F881 ( in ) $F36160 ( log , e ) } }
private Transaction createTransaction $F72 throws LeaseDeniedException , RemoteException , TransactionException { ITransactionManagerProvider transactionManagerProvider = getTransactionManagerProvider ( ) ; return ( TransactionFactory . create ( transactionManagerProvider . getTransactionManager ( ) , _config . getTransactionTimeout ( ) ) ) . transaction ; }
public void skipWhile ( String skip ) throws IOException { char ch ; do $F20182 ( ch , read ) while ( $F136643 ( skip , ch ) ) ; unreadCharacter ( ch ) ; }
public static String packageToPath ( String packageName ) { return $F79251 ( packageName , File ) ; }
$F1 public boolean containsKey ( Object key ) { if ( key == null ) $F40347 ( entryForNullKey ) $F17043 ( hash , key ) hash ^= $F14870 ( hash ) ^ $F14870 ( hash ) ; hash ^= $F14870 ( hash ) ^ $F14870 ( hash ) ; $F152989 ( tab , table ) for ( $F152986 e = tab [ hash & $F33765 ( tab ) ] ; e != null ; e = e . next ) { K eKey = e . key ; if ( eKey == key || ( e . hash == hash && key . equals ( eKey ) ) ) { return _BOOL ; } } return _BOOL ; }
protected boolean isValidFragment ( String fragment ) { $F1933 ( fragment , _BOOL ) return isOff ( NO_FRAGMENTS ) ; }
private void rehash $F72 { int oldCapacity = m_capacity ; HashEntry [ ] oldTable = m_table ; int newCapacity = NUM00 * oldCapacity + NUM00 ; m_capacity = newCapacity ; $F53239 ( m_threshold , newCapacity , m_loadFactor ) m_table = new HashEntry [ newCapacity ] ; for ( $F18298 ( i , oldCapacity ) ) { for ( HashEntry old = oldTable [ i ] ; old != null ; ) { HashEntry e = old ; old = old . next ; int newIndex = e . hash % newCapacity ; if ( newIndex < NUM00 ) newIndex = - newIndex ; e . next = m_table [ newIndex ] ; m_table [ newIndex ] = e ; } } }
public void savePoisFromAssets $F72 { List < Poi > pois = poiAssetLoader . loadPoisFromAssets ( ) ; Timber . d ( $F2310 ( pois ) ) ; for ( Poi poi : pois ) { Timber . d ( NUM00 , poi ) ; savePoi ( poi ) ; Timber . d ( NUM00 ) ; } }
private void createElement ( Document doc , Element parentElement , String elementName , Color value ) { $F16570 ( element , doc , elementName ) element . appendChild ( doc . createTextNode ( ColourUtils . fromColour ( value ) ) ) ; parentElement . appendChild ( element ) ; }
public static boolean beenDone ( @ Scope int scope , String tag , CountChecker numberOfTimes ) { $F27145 tagSeenDates = tagLastSeenMap . get ( tag ) ; $F4975 ( tagSeenDates , _BOOL ) if ( scope == THIS_APP_INSTALL ) { return numberOfTimes . check ( tagSeenDates . size ( ) ) ; } else if ( scope == THIS_APP_SESSION ) { int counter = NUM00 ; for ( String tagFromList : sessionList ) { if $F1238 ( tagFromList , tag ) { counter ++ ; } } return numberOfTimes . check ( counter ) ; } else { int counter = NUM00 ; for ( Long seenDate : tagSeenDates ) { if ( seenDate > lastAppUpdatedTime ) { counter ++ ; } } return numberOfTimes . check ( counter ) ; } }
void variableOperatorChanged ( int row , String oper ) { ConditionalVariable variable = _variableList . get ( row ) ; int oldOper = variable . getOpern ( ) ; if ( row > NUM00 ) { if $F115488 ( oper , Bundle ) { variable . setOpern ( Conditional . OPERATOR_OR ) ; } else { variable . setOpern ( Conditional . OPERATOR_AND ) ; } } else { variable . setOpern ( Conditional . OPERATOR_NONE ) ; } if ( variable . getOpern ( ) != oldOper ) $F5795 ( makeAntecedent ) }
public void addHeader ( String name , String val ) { mMsgHeader = mMsgHeader + name + NUM00 + val + mLineDelimiter ; addInternalHeaderFields ( name , val ) ; }
public static void checkDuplicateRequest ( RedisClient redisClient , String uri , Buffer buffer , String ttl , Handler $F19437 callback ) { Integer timeToLive = parseTimeToLive ( ttl ) ; String redisKey = getRedisKey ( uri , HashCodeGenerator . createHashCode ( uri , buffer . toString ( ) ) ) ; handleStorage ( redisClient , redisKey , timeToLive , callback ) ; }
boolean isHidden ( View view ) $F298 ( mHiddenViews , view )
public void writeExif ( InputStream jpegStream , OutputStream exifOutStream ) throws IOException { $F26831 ( jpegStream , exifOutStream , NULL_ARGUMENT_ ) OutputStream s = getExifWriterStream ( exifOutStream ) ; doExifStreamIO ( jpegStream , s ) ; $F1206 ( s ) }
public static void deleteRecursive ( $F4170 File fileOrDirectory ) { deleteRecursive ( fileOrDirectory , Collections . EMPTY_LIST ) ; }
static boolean doesMenuBarBorderToolBar ( JMenuBar c ) { JToolBar tb = ( JToolBar ) MetalToolBarUI . findRegisteredComponentOfType ( c , JToolBar . class ) ; if ( tb != null && tb . getOrientation ( ) == JToolBar . HORIZONTAL ) { JRootPane rp = SwingUtilities . getRootPane ( c ) ; Point $F99935 ( point ) ; point = SwingUtilities . convertPoint ( c , point , rp ) ; int menuX = point . x ; int menuY = point . y ; point . x = point . y = NUM00 ; point = SwingUtilities . convertPoint ( tb , point , rp ) ; return ( point . x == menuX && menuY + c . getHeight ( ) == point . y && c . getWidth ( ) == tb . getWidth ( ) ) ; } return _BOOL ; }
void constructNode ( String nodeName , String prefix , String nodeNamespace , TransformerImpl transformer ) throws TransformerException { boolean shouldAddAttrs ; try { SerializationHandler rhandler = transformer . getResultTreeHandler ( ) ; if ( null == nodeName ) { shouldAddAttrs = _BOOL ; } else { if ( null != prefix ) { rhandler . startPrefixMapping ( prefix , nodeNamespace , _BOOL ) ; } rhandler . startElement ( nodeNamespace , QName . getLocalPart ( nodeName ) , nodeName ) ; super . execute ( transformer ) ; shouldAddAttrs = _BOOL ; } transformer . executeChildTemplates ( this , shouldAddAttrs ) ; if ( null != nodeName ) { rhandler . endElement ( nodeNamespace , QName . getLocalPart ( nodeName ) , nodeName ) ; if ( null != prefix ) { rhandler . endPrefixMapping ( prefix ) ; } } } $F237369 ( se ) }
private PriorityQueue < USField > createQueue ( String fieldName , Map < String , Flt > words ) throws IOException { $F115 ( numDocs , ir ) FreqQ res = new FreqQ $F716 ( words ) ; for ( $F3465 ( word , words ) ) { float tf = $F43419 ( words , word ) ; if ( minTermFreq > NUM00 && tf < minTermFreq ) $F1448 int docFreq = ir . docFreq ( new Term ( fieldName , word ) ) ; if ( minDocFreq > NUM00 && docFreq < minDocFreq ) $F1448 if ( docFreq == NUM00 || docFreq > maxDocFreq ) $F1448 float idf = similarity . idf ( docFreq , numDocs ) ; float score = NUM00 ; if ( isLogTf ( ) ) { score = ( float ) ( Math . log ( tf + NUM00 ) * idf ) ; } else { score = tf * idf ; } USField mltField ; if ( isPayloadField ( fieldName ) ) { mltField = new USField ( word , fieldName , score , tf , idf , docFreq , NUM00 ) ; } else { mltField = new USField ( word , fieldName , score , tf , idf , docFreq ) ; } res . insertWithOverflow ( mltField ) ; } return res ; }
$F3441 ( journalWriter , writer , journalFileTmp , Util , MAGIC , VERSION_1 , Integer , appVersion , valueCount , entry , lruEntries , DIRTY , CLEAN , journalFile , renameTo , journalFileBackup , _BOOL )
public static void eachObject ( ObjectInputStream ois , Closure closure ) throws $F6427 { try { while ( _BOOL ) { try { $F67404 ( obj , ois ) closure . call ( obj ) ; } catch ( EOFException e ) $F5153 } InputStream temp = ois ; ois = null ; $F59 ( temp ) } $F18632 ( closeWithWarning , ois ) }
private static int exitWithStatus ( int status ) { if ( ToolIO . getMode ( ) == ToolIO . SYSTEM ) $F211576 ( System , status ) return status ; }
public static double distanceInMeters $F22855 ( latP1 , latP2 , lonP1 , lonP2 ) { double distRad = Math . acos ( Math . sin ( toRadians ( latP1 ) ) * Math . sin ( toRadians ( latP2 ) ) + Math . cos ( toRadians ( latP1 ) ) * Math . cos ( toRadians ( latP2 ) ) * Math . cos ( toRadians ( lonP1 - lonP2 ) ) ) ; final double distAsDegree = toDegrees ( distRad ) ; return distAsDegree * NUM00 * NUM00 * NUM00 ; }
public void processChallenge ( final String challenge ) throws MalformedChallengeException { String s = AuthChallengeParser . extractScheme ( challenge ) ; if ( ! s . equalsIgnoreCase ( getSchemeName ( ) ) ) { throw new MalformedChallengeException ( NUM00 + challenge ) ; } $F1384 ( i , challenge ) if ( i != - NUM00 ) { $F465724 ( s , challenge , i ) ; this . ntlmchallenge = s . trim ( ) ; this . state = TYPE2_MSG_RECEIVED ; } else { this . ntlmchallenge = NUM00 ; if ( this . state == UNINITIATED ) { this . state = INITIATED ; } else { this . state = FAILED ; } } }
public static BigInteger calculateA ( BigInteger p , BigInteger q , BigInteger gA , BigInteger x2s ) { return gA . modPow ( x2s , p ) ; }
public static MCostQueue add ( MProduct product , int M_AttributeSetInstance_ID , MAcctSchema as , int AD_Org_ID , int M_CostElement_ID , BigDecimal amt , BigDecimal qty , int precision , MCostDetail cd , String trxName ) { if ( CLogMgt . isLevelFine ( ) ) s_log . fine ( NUM00 + AD_Org_ID + NUM00 + product . get_ID ( ) + NUM00 + M_AttributeSetInstance_ID + NUM00 + amt + NUM00 + qty + NUM00 + precision ) ; MCostQueue cq = new MCostQueue ( product , M_AttributeSetInstance_ID , as , AD_Org_ID , M_CostElement_ID , trxName ) ; cq . setCosts ( amt , qty , precision ) ; cq . setDateAcct ( cd . getDateAcct ( ) ) ; $F45240 ( cq ) if ( CLogMgt . isLevelFine ( ) ) $F35577 ( s_log , cq ) return cq ; }
public void addUndoEvent ( UndoInterface event ) { if ( shouldProcessUndoRedoAction ( ) ) { boolean atEndOfList = $F6389 ( currentIndex , undoList ) ; if ( ! atEndOfList ) { while $F60125 ( undoList , currentIndex ) { $F40484 ( lastIndex , undoList ) undoList . remove ( lastIndex ) ; } } undoList . add ( event ) ; $F8935 ( currentIndex , undoList ) updateMenuItems ( ) ; logger . debug ( event . getStringRepresentation ( ) ) ; } }
public static Exception establishCacheIfNeeded ( PrintStream ... progress ) { $F5972 ( m_offline ) $F113304 ( REP_MIRROR , establishMirror ) Exception problem = null ; if ( INITIAL_CACHE_BUILD_NEEDED ) { for ( PrintStream p : progress ) $F12204 ( p ) problem = refreshCache ( progress ) ; INITIAL_CACHE_BUILD_NEEDED = _BOOL ; } return problem ; }
public Spanny append ( CharSequence text , ImageSpan imageSpan ) { text = NUM00 + text ; append ( text ) ; setSpan ( imageSpan , $F33381 ( length , text ) , $F33381 ( length , text ) + NUM00 ) ; return this ; }
public static boolean validatePassword ( String password , String correctHash ) throws $F36681 { return validatePassword ( password . toCharArray ( ) , correctHash ) ; }
public List < Snapshot > currentSnapshots ( String repositoryName ) { List < Snapshot > $F204 ( snapshotList ) ; List < SnapshotsInProgress . Entry > entries = currentSnapshots ( repositoryName , null ) ; for ( SnapshotsInProgress . Entry entry : entries ) $F3762 ( snapshotList , inProgressSnapshot , entry ) CollectionUtil . timSort ( snapshotList ) ; $F26666 ( Collections , snapshotList ) }
public void addCertificate ( X509CertificateHolder certificate ) throws CMSException { certs . add ( certificate . toASN1Structure ( ) ) ; }
public void testCase8 $F72 { $F15139 int aSign = NUM00 ; $F15143 $F3023 ( aNumber , aSign , aBytes ) BigInteger bNumber = BigInteger . ZERO ; $F7838 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
private void cleanStatic ( MethodNode method ) $F845
$F1 protected void paintTabBackground ( Graphics g , int tabPlacement , int tabIndex , int x , int y , int w , int h , boolean isSelected ) { if ( isSelected ) { if ( tabPlacement == TOP ) { $F202051 ( g , Color ) g . fillRoundRect ( x , y , w , h + R + R , R , R ) ; } } else $F845 }
public void push ( final float value ) { $F31338 ( bits , Float , value ) if $F31340 ( bits ) { mv . visitInsn ( Opcodes . FCONST_0 + ( int ) value ) ; } else $F31345 ( mv , value ) }
private Automaton buildAutomaton ( BytesRefHash termBytesHash ) { final TreeSet $F123079 terms = new TreeSet $F123079 $F72 ; for ( $F2277 ( i , termBytesHash ) ) { BytesRef ref = new BytesRef $F72 ; termBytesHash . get ( i , ref ) ; terms . add ( ref ) ; } final Automaton a = DaciukMihovAutomatonBuilder . build ( terms ) ; return a ; }
protected Range findRangeBounds ( CategoryDataset dataset , boolean includeInterval ) { $F1338 ( dataset ) if ( getDataBoundsIncludesVisibleSeriesOnly ( ) ) { $F19151 ( visibleSeriesKeys ) $F160876 ( seriesCount , dataset ) for ( $F119 ( s , seriesCount ) ) { if ( isSeriesVisible ( s ) ) { visibleSeriesKeys . add ( dataset . getRowKey ( s ) ) ; } } return DatasetUtilities . findRangeBounds ( dataset , visibleSeriesKeys , includeInterval ) ; } else { return DatasetUtilities . findRangeBounds ( dataset , includeInterval ) ; } }
protected String adminShutdown $F72 { $F733 ( server ) $F1278 }
public long num_threads $F72 $F12907 ( Long , fields )
public void assignRole ( AMRole role ) throws $F52710 { assignRole ( role . getDN ( ) ) ; }
public OrderedThreadPoolExecutor ( int corePoolSize , int maximumPoolSize ) { this ( corePoolSize , maximumPoolSize , DEFAULT_KEEP_ALIVE , TimeUnit . SECONDS , Executors . defaultThreadFactory ( ) , null ) ; }
protected void writeInitialStyles $F72 throws IOException { out . flushBits ( ) ; fillBits = OutStream . determineUnsignedBitSize ( fillStyles . size ( ) ) ; lineBits = OutStream . determineUnsignedBitSize ( lineStyles . size ( ) ) ; if ( ! hasStyle ) { fillBits = NUM00 ; } else { writeStyles ( fillStyles ) ; writeStyles ( lineStyles ) ; out . flushBits ( ) ; } out . writeUBits ( NUM00 , fillBits ) ; out . writeUBits ( NUM00 , lineBits ) ; }
public static < T extends $F19317 > String formEncode $F50316 ( parameters ) throws IOException { $F1538 ( b ) formEncode ( parameters , b ) ; return new String $F87573 ( b ) ; }
public void test_singleResourceLocking_serialized_lowConcurrency2 $F72 throws Exception { $F2697 ( properties ) $F154944 ( properties , TestOptions ) $F154946 ( properties , TestOptions ) $F130263 ( properties , TestOptions ) $F130265 ( properties , TestOptions ) $F130267 ( properties , TestOptions ) $F130271 ( properties , TestOptions ) $F130273 ( properties , TestOptions ) doComparisonTest ( properties ) ; }
public void runNextPendingCommand $F72 { Runnable runnable = deltaQueue . pop ( ) ; $F21687 ( runnable ) }
public void stop ( int timeout ) throws InterruptedException { if $F151263 ( isclosed , _BOOL ) $F932 List < WebSocket > socketsToClose = null ; synchronized ( connections ) { socketsToClose = new ArrayList < WebSocket > ( connections ) ; } for ( WebSocket ws : socketsToClose ) { ws . close ( CloseFrame . GOING_AWAY ) ; } synchronized ( this ) { if ( selectorthread != null && selectorthread != Thread . currentThread ( ) ) { $F164395 ( selector ) $F7589 ( selectorthread ) selectorthread . join ( timeout ) ; } } }
private static Document loadDocument ( Resource xmlFile ) throws $F55616 { DOMParser parser = new DOMParser $F72 ; InputStream is = null ; try { is = IOUtil . toBufferedInputStream ( xmlFile . getInputStream ( ) ) ; $F77995 ( source , is ) parser . parse ( source ) ; } finally { IOUtil . closeEL ( is ) ; } return parser . getDocument ( ) ; }
public void test_DivideBigDecimalRoundingModeDOWN $F72 { String a = NUM00 ; String b = NUM00 ; RoundingMode rm = RoundingMode . DOWN ; String c = NUM00 ; $F29821 ( aNumber , a ) $F29821 ( bNumber , b ) $F29822 ( result , aNumber , bNumber , rm ) $F1925 ( assertEquals , c , result ) }
public void removeAnnotation ( int index ) { mAnnotations . remove ( index ) ; mStringXY . removeByIndex ( index ) ; }
public String replace ( char oldChar , char newChar ) { $F1469 buffer = value ; int _offset = offset ; int _count = count ; int idx = _offset ; int last = _offset + _count ; boolean copied = _BOOL ; while ( idx < last ) { if ( buffer [ idx ] == oldChar ) { if ( ! copied ) { $F18064 ( newBuffer , _count ) $F21535 ( System , buffer , _offset , newBuffer , _count ) buffer = newBuffer ; idx -= _offset ; last -= _offset ; copied = _BOOL ; } buffer [ idx ] = newChar ; } idx ++ ; } return copied ? new String ( NUM00 , count , buffer ) : this ; }
public static void touch ( File file ) throws IOException { if $F1906 ( file ) { OutputStream out = openOutputStream ( file ) ; IOUtils . closeQuietly ( out ) ; } boolean success = $F266936 ( file , System ) ; $F252414 ( success , file ) }
private < Type extends Message > RpcCallback $F12993 wrapsCallback ( MockCallback $F1011 callback ) { EasyMock . reportMatcher ( new WrapsCallback ( callback ) ) ; $F1274 }
public boolean shouldSelectCell ( EventObject e ) { log . finest ( m_mField . getColumnName ( ) ) ; return _BOOL ; }
public static void prepareUnicode ( final StringBuilder buffer , final ByteSequence sequence , final boolean trim , final boolean foldCase ) { Reject . ifNull ( buffer , sequence ) ; $F11550 ( length , sequence ) for ( $F119 ( i , length ) ) { final byte b = sequence . byteAt ( i ) ; if ( ( b & NUM00 ) != b ) { MappingTable . map ( buffer , sequence . subSequence ( i , length ) , trim , foldCase ) ; String normalizedForm = Normalizer . normalize ( buffer , Form . NFKD ) ; $F4910 ( buffer ) buffer . append ( normalizedForm ) ; $F597 } switch ( b ) { $F1262 if ( canMapToSpace ( buffer , trim ) ) $F86 ( buffer ) $F597 $F1267 if ( b >= NUM00 && b < NUM00 ) { if ( canMapToSpace ( buffer , trim ) ) $F288 ( buffer , SPACE_CHAR ) } else if ( $F19295 ( b ) || $F19295 ( b ) || b == NUM00 ) $F5153 else if ( foldCase && b >= NUM00 && b <= NUM00 ) $F46359 ( buffer , b ) else $F46352 ( buffer , b ) $F597 } } if ( trim ) { for ( $F22866 ( i , buffer ) ; i > NUM00 ; i -- ) { if $F44927 ( buffer , i , SPACE_CHAR ) { buffer . delete ( i , i + NUM00 ) ; } else $F5153 } } }
public void testCase18 $F72 { $F45030 $F45033 $F15143 int aSign = NUM00 ; int bSign = NUM00 ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F3024 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
$F2304 public BugInstance addClass ( ClassNode classNode ) { String dottedClassName = ClassName . toDottedClassName ( classNode . name ) ; ClassAnnotation classAnnotation = new ClassAnnotation ( dottedClassName ) ; add ( classAnnotation ) ; return this ; }
public static void tryFormatSatisfiability ( String format ) throws IllegalFormatException { MessageFormat . format ( format , ( $F131 ) null ) ; }
public static int parseUpperMap ( String s ) throws NumberFormatException { int upperCase = MAP_UNDEFINED ; $F115 ( length , s ) if $F56314 ( length ) $F123126 ( upperCase , Integer , s ) else if $F35625 ( s ) { $F21291 } return upperCase ; }
$F1 public void run $F72 { while $F931 ( isInterrupted ) { try { Reference ref = _queue . remove ( ) ; _entryInfos . remove ( ref ) ; } catch ( InterruptedException e ) $F151805 ( interrupt ) } }
private File createZipFile ( int entryCount , int entrySize ) throws IOException { File result = createTemporaryZipFile ( ) ; $F12496 ( writeBuffer ) $F6822 ( random ) ZipOutputStream out = new ZipOutputStream ( new BufferedOutputStream $F4443 ( result ) ) ; for ( $F1316 ( entry , entryCount ) ) { ZipEntry ze = new ZipEntry ( Integer . toHexString ( entry ) ) ; out . putNextEntry ( ze ) ; for ( int i = NUM00 ; i < entrySize ; i += writeBuffer . length ) { random . nextBytes ( writeBuffer ) ; int byteCount = Math . min ( writeBuffer . length , entrySize - i ) ; $F11584 ( out , writeBuffer , byteCount ) } $F22108 ( out ) } $F59 ( out ) return result ; }
private boolean isValidPlaylistName ( String newName ) { Playlist blankPlaylist = new Playlist ( newName , _BOOL ) ; return $F1030 ( newName ) && ! musicLibrary . containsPlaylist ( blankPlaylist ) ; }
public String importXML ( String fileName , Properties ctx , String trxName ) throws Exception { $F556 ( log , fileName ) $F1705 ( in , fileName ) if $F1906 ( in ) { String msg = NUM00 + fileName ; $F556 ( log , msg ) return msg ; } try { $F973 ( log ) $F2699 ( System ) PackInHandler handler = new PackInHandler $F72 ; handler . set_TrxName ( trxName ) ; handler . setCtx ( ctx ) ; handler . setProcess ( this ) ; $F2218 ( factory , SAXParserFactory ) $F49819 ( parser , factory ) String msg = NUM00 ; log . info ( msg ) ; parser . parse ( in , handler ) ; msg = NUM00 ; log . info ( msg ) ; $F1278 } catch ( Exception e ) { $F65048 ( log , Level , e ) throw e ; } }
public synchronized void logAddOrRemoveRow ( Session session , int tableId , Row row , boolean add ) { if ( logMode != LOG_MODE_OFF ) { if ( ! recoveryRunning ) { log . logAddOrRemoveRow ( session , tableId , row , add ) ; } } }
public org . smpte_ra . schemas . st2067_2_2016 . DigestMethodType buildDefaultDigestMethodType $F72 { org . smpte_ra . schemas . st2067_2_2016 . DigestMethodType digestMethodType = new org . smpte_ra . schemas . st2067_2_2016 . DigestMethodType $F72 ; digestMethodType . setAlgorithm ( CompositionPlaylistBuilder_2016 . defaultHashAlgorithm ) ; return digestMethodType ; }
public static < V extends SampledVertex > $F25669 createSampledPartition ( $F147152 vertices ) { $F25669 partition = new HashSet $F2193 $F72 ; for ( V vertex : vertices ) { if ( vertex . isSampled ( ) ) partition . add ( vertex ) ; } return partition ; }
public GremlinTransactionManager ( GremlinGraphFactory graphFactory ) { super ( ) ; this . graphFactory = graphFactory ; }
public void shiftBeans ( BeanInstance toShiftTo , boolean save ) { if ( save ) { m_originalCoords = new Vector $F67121 $F72 ; } $F121945 ( targetX , toShiftTo ) $F55855 ( targetY , toShiftTo ) for ( $F2277 ( i , m_subFlow ) ) { BeanInstance temp = ( BeanInstance ) m_subFlow . elementAt ( i ) ; if ( save ) { Point p = new Point ( temp . getX ( ) - targetX , temp . getY ( ) - targetY ) ; m_originalCoords . add ( p ) ; } temp . setX ( targetX ) ; temp . setY ( targetY ) ; } }
$F1 protected final List < LatLong > doInBackground ( final Object ... args ) { List < LatLong > $F204 ( points ) ; DataHelper dbHelper = new DataHelper ( mContext ) ; final ArrayList < PositionRecord > positions = dbHelper . loadPositions ( ( Integer ) args [ SESSION_ID ] , ( Double ) args [ MIN_LAT_COL ] , ( Double ) args [ MAX_LAT_COL ] , ( Double ) args [ MIN_LON_COL ] , ( Double ) args [ MAX_LON_COL ] ) ; for ( PositionRecord position : positions ) { points . add ( new LatLong ( position . getLatitude ( ) , position . getLongitude ( ) ) ) ; } return points ; }
public void make $F72 throws Exception { for ( $F2277 ( i , _makeList ) ) { Make make = _makeList . get ( i ) ; $F790 ( make ) } }
$F1 void deletedText ( CharacterDataImpl node , int offset , int count ) { if ( ranges != null ) { notifyRangesDeletedText ( node , offset , count ) ; } }
$F49286 ( value , absMin , absMax , absValue , Math )
private ApplicationEnvironment $F72 { try { if ( System . getProperty ( BootstrapProperties . IS_UBERJAR ) != null ) { this . mode = Mode . UBERJAR ; $F21685 ( loadWildFlySwarmApplicationManifestFromClasspath , loadWildFlySwarmApplicationManifestFromTCCL ) } else { this . mode = Mode . CLASSPATH ; loadFractionManifestsFromClasspath ( ) ; } } $F12153 ( e ) }
public ProducerWorker ( String topic , String message ) { this . _topic = topic ; this . _message = message ; }
private void tabCreatedInForeground ( int id , int sourceId , boolean newIsIncognito , float originX , float originY ) { LayoutTab newLayoutTab = createLayoutTab ( id , newIsIncognito , NO_CLOSE_BUTTON , NO_TITLE ) ; if $F12414 ( mLayoutTabs ) { mLayoutTabs = new LayoutTab [ ] { newLayoutTab } ; } else { mLayoutTabs = new LayoutTab [ ] { mLayoutTabs [ NUM00 ] , newLayoutTab } ; } updateCacheVisibleIds ( new $F114083 ( Arrays . asList ( id , sourceId ) ) ) ; newLayoutTab . setBorderAlpha ( NUM00 ) ; newLayoutTab . setStaticToViewBlend ( NUM00 ) ; forceAnimationToFinish ( ) ; Interpolator interpolator = BakedBezierInterpolator . TRANSFORM_CURVE ; addToAnimation ( newLayoutTab , LayoutTab . Property . SCALE , NUM00 , NUM00 , FOREGROUND_ANIMATION_DURATION , NUM00 , _BOOL , interpolator ) ; addToAnimation ( newLayoutTab , LayoutTab . Property . ALPHA , NUM00 , NUM00 , FOREGROUND_ANIMATION_DURATION , NUM00 , _BOOL , interpolator ) ; addToAnimation ( newLayoutTab , LayoutTab . Property . X , originX , NUM00 , FOREGROUND_ANIMATION_DURATION , NUM00 , _BOOL , interpolator ) ; addToAnimation ( newLayoutTab , LayoutTab . Property . Y , originY , NUM00 , FOREGROUND_ANIMATION_DURATION , NUM00 , _BOOL , interpolator ) ; mTabModelSelector . selectModel ( newIsIncognito ) ; startHiding ( id , _BOOL ) ; }
private static boolean functionsAreAllowed ( boolean isAddAllFunction , boolean isPutAllFunction , $F6969 classD , $F6969 classS ) { if ( isAddAllFunction ) return collectionIsAssignableFrom ( classD ) && collectionIsAssignableFrom ( classS ) ; if ( isPutAllFunction ) return mapIsAssignableFrom ( classD ) && mapIsAssignableFrom ( classS ) ; return isAssignableFrom ( classD , classS ) ; }
private void loadOrgAccessUser ( ArrayList < OrgAccess > list ) { PreparedStatement pstmt = null ; ResultSet rs = null ; String sql = NUM00 + NUM00 ; try { $F213538 ( pstmt , DB , sql , get_TrxName ) pstmt . setInt ( NUM00 , getAD_User_ID ( ) ) ; $F47578 ( rs , pstmt ) while $F1682 ( rs ) { MUserOrgAccess oa = new MUserOrgAccess ( getCtx ( ) , rs , get_TrxName ( ) ) ; loadOrgAccessAdd ( list , new OrgAccess ( oa . getAD_Client_ID ( ) , oa . getAD_Org_ID ( ) , oa . isReadOnly ( ) ) ) ; } } $F230362 ( log , Level , sql , e ) finally $F161384 ( DB , rs , pstmt ) }
public void close $F72 { synchronized ( mDiskCacheLock ) { if ( mDiskLruCache != null ) { try { $F232047 ( mDiskLruCache ) } catch ( Throwable e ) { LogUtils . e ( $F1573 ( e ) ) ; } mDiskLruCache = null ; } } }
private $F155279 createVolumeMapForExportMask ( ExportMask exportMask ) { $F155279 $F8690 ( map ) ; for ( URI uri : ExportMaskUtils . getVolumeURIs ( exportMask ) ) { map . put ( uri , ExportGroup . LUN_UNASSIGNED ) ; } return map ; }
$F1 public void close $F72 throws IOException { SocketChannel s = _channel ; _channel = null ; SSLSocket sslSocket = _sslSocket ; _sslSocket = null ; $F111205 ( sslSocket ) $F111205 ( s ) }
public static Vector3D max ( Vector3D a , Vector3D b ) { return new Vector3D ( FastMath . max ( a . getX ( ) , b . getX ( ) ) , FastMath . max ( a . getY ( ) , b . getY ( ) ) , FastMath . max ( a . getZ ( ) , b . getZ ( ) ) ) ; }
public static void waitForProcessOutput ( Process self , OutputStream output , OutputStream error ) { Thread tout = consumeProcessOutputStream ( self , output ) ; Thread terr = consumeProcessErrorStream ( self , error ) ; try $F45915 ( tout ) $F36781 try $F45915 ( terr ) $F36781 try { $F84402 ( self ) } $F36781 closeStreams ( self ) ; }
$F49286 ( value , absMin , absMax , absValue , Math )
$F1322 ( criteria , oredCriteria )
public CommandLine add ( String ... args ) { if $F22195 ( args ) $F122380 ( Collections , line , args ) return this ; }
$F1 final $F75433 find ( int h , long k ) { for ( $F75433 e = first ; e != null ; ) { int s ; if ( ( ( s = lockState ) & ( WAITER | WRITER ) ) != NUM00 ) { if ( ( e . key == k ) ) { return e ; } e = e . next ; } else if ( U . compareAndSwapInt ( this , LOCKSTATE , s , s + READER ) ) { TreeNode $F2193 r ; TreeNode $F2193 p ; try { p = ( ( r = root ) == null ? null : r . findTreeNode ( h , k ) ) ; } finally { Thread w ; if ( getAndAddInt ( this , LOCKSTATE , - READER ) == ( READER | WAITER ) && ( w = waiter ) != null ) { LockSupport . unpark ( w ) ; } } return p ; } } $F1274 }
$F1 public AxisState draw ( Graphics2D g2 , double cursor , Rectangle2D plotArea , Rectangle2D dataArea , RectangleEdge edge , PlotRenderingInfo plotState ) { AxisState axisState = new AxisState ( cursor ) ; if ( isAxisLineVisible ( ) ) { drawAxisLine ( g2 , cursor , dataArea , edge ) ; } if ( isTickMarksVisible ( ) ) { drawTickMarks ( g2 , axisState , dataArea , edge ) ; } if ( isTickLabelsVisible ( ) ) { for ( int band = NUM00 ; band < this . labelInfo . length ; band ++ ) $F29639 ( axisState , drawTickLabels , band , g2 , dataArea , edge ) } if $F89491 ( getAttributedLabel ) $F197485 ( axisState , drawAttributedLabel , getAttributedLabel , g2 , plotArea , dataArea , edge ) else $F197485 ( axisState , drawLabel , getLabel , g2 , plotArea , dataArea , edge ) return axisState ; }
private $F109649 readContents ( Path fetchlist ) throws IOException { SequenceFile . Reader reader = new SequenceFile . Reader ( fs , fetchlist , conf ) ; $F109649 l = new $F109649 $F72 ; READ : do { Text key = new Text $F72 ; CrawlDatum value = new CrawlDatum $F72 ; if ( ! reader . next ( key , value ) ) { break READ ; } l . add ( new URLCrawlDatum ( key , value ) ) ; } while ( _BOOL ) ; $F59 ( reader ) return l ; }
public void playTogether ( Collection $F113170 items ) { if $F8841 ( items ) { mNeedsSort = _BOOL ; Builder builder = null ; for ( Animator anim : items ) { if ( builder == null ) { builder = play ( anim ) ; } else { builder . with ( anim ) ; } } } }
public static Color createRandomColour $F72 { float r = rand . nextFloat ( ) ; float g = rand . nextFloat ( ) ; float b = rand . nextFloat ( ) ; Color randomColor = new Color ( r , g , b ) ; return randomColor ; }
private static Pair < DiagnosticKind , Boolean > parseCategoryString ( String category ) { final String fixable = NUM00 ; final boolean isFixable = category . startsWith ( fixable ) ; if ( isFixable ) $F262837 ( category , fixable ) DiagnosticKind categoryEnum = DiagnosticKind . fromParseString ( category ) ; return Pair . of ( categoryEnum , isFixable ) ; }
public void legacyProcess ( Class clazz , Method m , MethodAppearanceDecision decision ) { if ( m . getDeclaringClass ( ) != $F12222 && m . getReturnType ( ) != $F78753 && $F36180 ( m ) == NUM00 ) { $F20605 ( mName , m ) if ( ! looksLikePropertyReadMethod ( mName ) ) { decision . setExposeMethodAs ( null ) ; try { decision . setExposeAsProperty ( new PropertyDescriptor ( mName , clazz , mName , null ) ) ; } catch ( IntrospectionException e ) $F9491 ( e ) } } }
public SPTKPitchReaderWriter ( String lf0SPTKFile , float windowSizeInSeconds , float skipSizeInSeconds , int samplingRate ) { contour = null ; header = new PitchFileHeader $F72 ; header . windowSizeInSeconds = windowSizeInSeconds ; header . skipSizeInSeconds = skipSizeInSeconds ; header . fs = samplingRate ; try { contour = readSPTKF0Data ( lf0SPTKFile ) ; } $F12241 ( e ) }
public void abort $F72 { cleanUp ( ) ; if ( mFuture != null ) { mFuture . cancel ( _BOOL ) ; mFuture = null ; } if ( mExecutorService != null ) { $F5832 ( mExecutorService ) mExecutorService = null ; } mListener = null ; }
public void addCSPStateListener ( CSPStateListener listener ) $F207 ( listeners , listener )
public static void printWrappedText ( final PrintStream stream , final String message ) { if ( stream != null && message != null && $F1030 ( message ) ) { stream . println ( wrapText ( message , MAX_LINE_WIDTH ) ) ; } }
public void removeAtRange ( int index , int size ) { final int end = Math . min ( mSize , index + size ) ; for ( int i = index ; i < end ; i ++ ) { removeAt ( i ) ; } }
public static void assertNullability ( ResultSet rs , $F8748 nullability ) throws SQLException { $F19097 ( rsmd , rs ) $F16742 ( actualCols , rsmd ) assertEquals ( NUM00 , nullability . length , rsmd . getColumnCount ( ) ) ; for ( $F119 ( i , actualCols ) ) { int expected = nullability [ i ] ? ResultSetMetaData . columnNullable : ResultSetMetaData . columnNoNulls ; assertEquals ( NUM00 + ( i + NUM00 ) , expected , rsmd . isNullable ( i + NUM00 ) ) ; } }
private synchronized Rect [ ] computeBoundingBoxes $F72 { if $F16476 ( boundingBoxes ) { Rect [ ] bb = new Rect [ $F181356 ( contours ) ] ; for ( $F2277 ( i , contours ) ) { bb [ i ] = boundingRect ( contours . get ( i ) ) ; } boundingBoxes = Optional . of ( bb ) ; } $F1521 ( boundingBoxes ) }
public void addTimeline ( final JSONObject timeline ) { TimelineChannel . notifyTimeline ( timeline ) ; timelines . addFirst ( timeline ) ; $F10411 ( maxCnt , Symphonys ) if $F60125 ( timelines , maxCnt ) $F106 ( timelines , maxCnt ) }
private boolean loadLOBData $F72 { if ( isStoreAttachmentsOnFileSystem ) $F2905 ( loadLOBDataFromFileSystem ) return loadLOBDataFromDB ( ) ; }
protected void paintComponent ( Graphics g ) { backgroundPainter . paint ( g , getVisibleRect ( ) ) ; TextUI ui = getUI ( ) ; if ( ui != null ) { Graphics scratchGraphics = g . create ( ) ; try { ui . update ( scratchGraphics , this ) ; } $F47533 ( scratchGraphics ) } }
public static $F4203 $F5675 copyToArrayListWithExtraCapacity ( $F10809 elements , int extraCapacity ) { $F5675 asList ; if ( elements != null ) { asList = new $F5676 ( elements . length + extraCapacity ) ; asList . addAll ( Arrays . asList ( elements ) ) ; } else { asList = new $F5676 ( extraCapacity ) ; } return asList ; }
private boolean sendEventToListeners ( ClusterEvent event ) { boolean success = _BOOL ; for ( String listenerId : Collections . unmodifiableSet ( listeners . keySet ( ) ) ) { logger . debug ( NUM00 , listenerId , event . getType ( ) , instanceId ) ; ClusterEventListener listener = listeners . get ( listenerId ) ; if ( listener != null && ! listener . handleEvent ( event ) ) { success = _BOOL ; } } return success ; }
@ RequestMapping ( method = RequestMethod . PUT , $F3144 , consumes = { MediaType . APPLICATION_JSON_VALUE } , produces = { MediaType . APPLICATION_JSON_VALUE } ) @ ApiOperation ( $F3144 , notes = $F38 , response = $F78753 ) @ ApiResponses ( { @ ApiResponse ( code = NUM00 , $F100217 ) , @ ApiResponse ( code = NUM00 , $F100217 ) , @ ApiResponse ( code = NUM00 , $F100217 ) , @ ApiResponse ( code = NUM00 , $F100217 ) , @ ApiResponse ( code = NUM00 , $F100217 ) , @ ApiResponse ( code = NUM00 , $F100217 ) , @ ApiResponse ( code = NUM00 , $F100217 ) } ) @ PreAuthorize ( NUM00 ) public ResponseEntity $F1011 update ( $F4588 ( region ) , @ PathVariable ( NUM00 ) final $F806 keys , @ RequestParam ( $F3144 , defaultValue = NUM00 ) final String opValue , $F151143 final String json ) { $F7028 ( logger , region ) region = decode ( region ) ; if $F3305 ( keys ) $F19580 ( updateMultipleKeys , region , keys , json ) else { return updateSingleKey ( region , keys [ NUM00 ] , json , opValue ) ; } }
public void load ( X509Extension extensions ) { $F2689 critExts = extensions . getCriticalExtensionOIDs ( ) ; $F2689 nonCritExts = extensions . getNonCriticalExtensionOIDs ( ) ; List < X509Ext > sortedExts = new ArrayList < X509Ext > $F72 ; for ( $F43656 ( itr , critExts ) ) { $F13714 ( extOid , itr ) $F96 value = extensions . getExtensionValue ( extOid ) ; X509Ext ext = new X509Ext ( new ASN1ObjectIdentifier ( extOid ) , value , _BOOL ) ; sortedExts . add ( ext ) ; } for ( $F43656 ( itr , nonCritExts ) ) { $F13714 ( extOid , itr ) $F96 value = extensions . getExtensionValue ( extOid ) ; X509Ext ext = new X509Ext ( new ASN1ObjectIdentifier ( extOid ) , value , _BOOL ) ; sortedExts . add ( ext ) ; } Collections . sort ( sortedExts , new ExtensionNameComparator $F72 ) ; data = new Object [ sortedExts . size ( ) ] [ NUM00 ] ; int i = NUM00 ; for ( Iterator < X509Ext > itrSortedExts = sortedExts . iterator ( ) ; itrSortedExts . hasNext ( ) ; ) { X509Ext ext = itrSortedExts . next ( ) ; loadRow ( ext , i ) ; i ++ ; } fireTableDataChanged ( ) ; }
public Builder deleteAddresses $F72 $F18794 ( deleteFields , this )
public static void write ( File file , CharSequence data , Charset encoding , boolean append ) throws IOException { String str = $F48364 ( data ) ; writeStringToFile ( file , str , encoding , append ) ; }
public Query limit ( int limit ) { return limit ( limit < NUM00 ? NO_LIMIT : Field . $F2305 field $F59159 ( Integer , limit ) ) ; }
public static boolean fileExists ( String fName ) { boolean result = _BOOL ; $F1705 ( file , fName ) if ( file != null ) { result = $F2945 ( file ) ; } return result ; }
$F92963 ( b , off , len , this , newcount , count , remaining , inBufferPos , filledBufferSum , part , Math , currentBuffer , System , needNewBuffer )
public long skip ( long n ) { if ( position + n <= document . getLength ( ) ) { position += n ; return n ; } long temp = position ; $F249676 ( position , document ) return document . getLength ( ) - temp ; }
private static void _init $F72 { addMethod ( NUM00 , new com . earth2me . essentials . register . payment . methods . iCo6 $F72 ) ; addMethod ( NUM00 , new com . earth2me . essentials . register . payment . methods . iCo5 $F72 ) ; addMethod ( NUM00 , new com . earth2me . essentials . register . payment . methods . BOSE7 $F72 ) ; addMethod ( NUM00 , new com . earth2me . essentials . register . payment . methods . MCUR $F72 ) ; $F18793 ( Dependencies ) addMethod ( NUM00 , new com . earth2me . essentials . register . payment . methods . VaultEco $F72 ) ; }
public static String convertFileName ( String name , int maxBytes ) { try { return convertFileName ( name , maxBytes , Charset . defaultCharset ( ) ) ; } catch ( CharacterCodingException cce ) { try { return convertFileName ( name , maxBytes , Charset . forName ( NUM00 ) ) ; } catch ( CharacterCodingException e ) $F72290 ( name , e ) } }
public static void copy ( URL url , File file ) throws IOException { $F35900 ( is , url ) try { $F12015 ( os , file ) try { $F12496 ( buffer ) int read ; while ( $F29984 ( read , is , buffer ) > NUM00 ) $F29756 ( os , buffer , read ) } $F3229 ( os ) } $F3229 ( is ) }
public void updateDeltas ( int deltaX , int deltaY ) { if ( mLeftBorderActive ) $F185739 ( mDeltaX , Math , mBaselineX , deltaX , mBaselineWidth , mTouchTargetWidth ) else if ( mRightBorderActive ) { mDeltaX = Math . min ( mDragLayer . getWidth ( ) - ( mBaselineX + mBaselineWidth ) , deltaX ) ; $F185747 ( mDeltaX , Math , mBaselineWidth , mTouchTargetWidth ) } if ( mTopBorderActive ) $F185739 ( mDeltaY , Math , mBaselineY , deltaY , mBaselineHeight , mTouchTargetWidth ) else if ( mBottomBorderActive ) { mDeltaY = Math . min ( mDragLayer . getHeight ( ) - ( mBaselineY + mBaselineHeight ) , deltaY ) ; $F185747 ( mDeltaY , Math , mBaselineHeight , mTouchTargetWidth ) } }
public void createAuthConfiguration ( String name ) throws AMConsoleException { if $F38892 ( name ) { throw new AMConsoleException ( getLocalizedString ( NUM00 ) ) ; } $F105633 ( params , currentRealm , name ) logEvent ( NUM00 , params ) ; String errorMsg = null ; try { AMAuthConfigUtils . createNamedConfig ( name , NUM00 , new HashMap $F72 , currentRealm , getUserSSOToken ( ) ) ; logEvent ( NUM00 , params ) ; } catch ( SMSException e ) { errorMsg = getErrorString ( e ) ; $F28010 ( paramsEx , currentRealm , name , errorMsg ) logEvent ( NUM00 , paramsEx ) ; $F21557 ( debug , e ) } catch ( SSOException e ) { errorMsg = getErrorString ( e ) ; $F28010 ( paramsEx , currentRealm , name , errorMsg ) logEvent ( NUM00 , paramsEx ) ; $F21557 ( debug , e ) } catch ( AMConfigurationException e ) { errorMsg = getErrorString ( e ) ; $F28010 ( paramsEx , currentRealm , name , errorMsg ) logEvent ( NUM00 , paramsEx ) ; $F21557 ( debug , e ) } if ( errorMsg != null ) { $F84191 ( errorMsg ) } }
$F9749 ( namespace , attName , attValue , xmlWriter , registerPrefix )
public void trim ( String aText , $F2027 aSpan ) { int begin = aSpan [ NUM00 ] ; int end = aSpan [ NUM00 ] - NUM00 ; String data = aText ; while ( ( begin < $F45793 ( data ) ) && trimChar ( data . charAt ( begin ) ) ) { begin ++ ; } while ( ( end > NUM00 ) && trimChar ( data . charAt ( end ) ) ) { end -- ; } end ++ ; aSpan [ NUM00 ] = begin ; aSpan [ NUM00 ] = end ; }
public String classifierTipText $F72 $F2455
public WritableRaster createWritableChild ( int x , int y , int width , int height , int x0 , int y0 , $F2027 bandList ) { $F238725 ( x , this ) $F238726 ( y , this ) $F238732 ( x , width , this ) $F238738 ( y , height , this ) SampleModel sm ; if ( bandList != null ) { sm = sampleModel . createSubsetSampleModel ( bandList ) ; } else { sm = sampleModel ; } int deltaX = x0 - x ; int deltaY = y0 - y ; return new BytePackedRaster $F238741 ( sm , dataBuffer , x0 , y0 , width , height , sampleModelTranslateX , deltaX , sampleModelTranslateY , deltaY , this ) ; }
private void sendBuffer $F72 throws IOException { $F14257 ( buf ) send ( buf , buf . remaining ( ) ) ; buf = null ; }
$F326023 ( n , max , data , length , System , newData )
public void callEvent ( Event event ) { if ( event . isAsynchronous ( ) ) { if ( Thread . holdsLock ( this ) ) { throw new IllegalStateException ( event . getEventName ( ) + NUM00 ) ; } if ( server . isPrimaryThread ( ) ) { throw new IllegalStateException ( event . getEventName ( ) + NUM00 ) ; } fireEvent ( event ) ; } else { synchronized ( this ) { fireEvent ( event ) ; } } }
$F5466 private static PsiFile findFileToOpen ( $F1113 List < PsiFile > files ) { PsiFile bestFile = null ; FolderConfiguration bestConfig = null ; for ( PsiFile file : files ) { PsiDirectory qualifiedDirectory = file . getParent ( ) ; assert qualifiedDirectory != null : NUM00 ; FolderConfiguration config = FolderConfiguration . getConfigForFolder ( qualifiedDirectory . getName ( ) ) ; if ( bestConfig == null || config == null || config . compareTo ( bestConfig ) < NUM00 ) { bestConfig = config ; bestFile = file ; } } return bestFile ; }
protected boolean areEqual $F22381 ( string1 , string2 , caseMatters ) { return ( caseMatters && string1 . equals ( string2 ) ) || ( ! caseMatters && string1 . equalsIgnoreCase ( string2 ) ) ; }
$F58914 ( commands , isRoot , execCommand , _BOOL )
protected void populateBlob ( int id , $F96 baseContent , int requiredSize ) throws SQLException { Connection con = getConnectionViaDriverManager ( ) ; CallableStatement cstmt = null ; try { cstmt = con . prepareCall ( EXECUTE_FILL_BINARY_BLOB ) ; $F47 ( cstmt , id ) cstmt . setBytes ( NUM00 , baseContent ) ; $F47 ( cstmt , requiredSize ) $F1699 ( cstmt ) } $F15722 ( closeQuietly , cstmt , con ) }
private void removeObservedFile ( String localPath ) { $F1705 ( file , localPath ) $F239608 ( parentPath , file ) FolderObserver observer = mFolderObserversMap . get ( parentPath ) ; if ( observer != null ) { observer . stopWatching ( file . getName ( ) ) ; if $F2979 ( observer ) { mFolderObserversMap . remove ( parentPath ) ; $F63425 ( Log_OC , TAG , parentPath ) } } else $F29023 ( Log_OC , TAG , localPath ) }
public void makeImmutable $F72 { if ( mutable ) { if ( results != null ) { $F2199 ( length , results ) for ( $F119 ( i , length ) ) { Result result = ( Result ) results . get ( i ) ; $F118294 ( result ) } $F5939 ( results , Collections ) } mutable = _BOOL ; } }
public Statement isNull $F72 $F117250 ( statement , this )
public void clear $F72 { processQueue ( ) ; $F725 ( hash ) }
private void updateFavoriteStation $F72 { String showString = null ; if ( FmRadioStation . isFavoriteStation ( mContext , mCurrentStation ) ) { String stationName = FmRadioStation . getStationName ( mContext , mCurrentStation , FmRadioStation . STATION_TYPE_FAVORITE ) ; FmRadioStation . updateStationToDb ( mContext , stationName , FmRadioStation . STATION_TYPE_SEARCHED , mCurrentStation ) ; mButtonAddToFavorite . setImageResource ( R . drawable . btn_fm_favorite_off_selector ) ; $F15121 ( mTextStationName ) showString = mProjectStringExt . getProjectString ( mContext , R . string . toast_channel_deleted , R . string . toast_channel_deleted1 ) ; } else { String stationName = FmRadioStation . getStationName ( mContext , mCurrentStation , FmRadioStation . STATION_TYPE_SEARCHED ) ; if ( FmRadioStation . isStationExist ( mContext , mCurrentStation , FmRadioStation . STATION_TYPE_SEARCHED ) ) { FmRadioStation . updateStationToDb ( mContext , stationName , FmRadioStation . STATION_TYPE_FAVORITE , mCurrentStation ) ; } else { FmRadioStation . insertStationToDb ( mContext , stationName , mCurrentStation , FmRadioStation . STATION_TYPE_FAVORITE ) ; } mButtonAddToFavorite . setImageResource ( R . drawable . btn_fm_favorite_on_selector ) ; mTextStationName . setText ( stationName ) ; showString = mProjectStringExt . getProjectString ( mContext , R . string . toast_channel_added , R . string . toast_channel_added1 ) ; } showToast ( showString ) ; }
public int addAllAbsent $F22451 ( c ) { $F11326 ( cs , c ) if $F9634 ( cs ) $F1082 $F677 ( lock , this ) $F790 ( lock ) try { $F8867 ( elements , getArray ) int len = elements . length ; int added = NUM00 ; for ( $F9808 ( i , cs ) ) { Object e = cs [ i ] ; if ( indexOf ( e , elements , NUM00 , len ) < NUM00 && indexOf ( e , cs , NUM00 , added ) < NUM00 ) cs [ added ++ ] = e ; } if ( added > NUM00 ) { $F131 newElements = Arrays . copyOf ( elements , len + added ) ; $F6483 ( System , cs , newElements , len , added ) setArray ( newElements ) ; } return added ; } $F796 ( lock ) }
public Analyzer saveAnalysis ( File file ) throws IOException { PrintStream ps = null ; try { ps = new PrintStream ( new BufferedOutputStream $F4443 ( file ) ) ; printAnalysis ( ps ) ; } $F14364 ( ps ) return this ; }
public Iterator $F408319 dependencies $F72 $F16048 ( m_Dependencies )
public static void notifyTicket ( Context c , $F4170 Ticket t , boolean keepNotification ) { String text ; String ticker ; int smallIcon ; int largeIcon ; int status ; switch ( TicketsAdapter . getValidityStatus ( t . getStatus ( ) , t . getValidTo ( ) ) ) { case TicketProvider . Tickets . STATUS_VALID : case TicketProvider . Tickets . STATUS_VALID_EXPIRING : text = c . getString ( R . string . notif_valid_text , FormatUtil . formatDateTimeDifference ( t . getValidTo ( ) ) ) ; ticker = c . getString ( R . string . notif_valid_ticker ) ; smallIcon = R . drawable . notification_small_ready ; largeIcon = R . drawable . notification_big_ready ; status = TicketProvider . Tickets . STATUS_VALID_EXPIRING ; $F597 case TicketProvider . Tickets . STATUS_EXPIRING : case TicketProvider . Tickets . STATUS_EXPIRING_EXPIRED : text = c . getString ( R . string . notif_expiring_text , FormatUtil . formatTime ( t . getValidTo ( ) ) ) ; ticker = c . getString ( R . string . notif_expiring_ticker ) ; smallIcon = R . drawable . notification_small_warning ; largeIcon = R . drawable . notification_big_warning ; status = TicketProvider . Tickets . STATUS_EXPIRING_EXPIRED ; $F597 case TicketProvider . Tickets . STATUS_EXPIRED : text = c . getString ( R . string . notif_expired_text , FormatUtil . formatTime ( t . getValidTo ( ) ) ) ; ticker = c . getString ( R . string . notif_expired_ticker ) ; smallIcon = R . drawable . notification_small_expired ; largeIcon = R . drawable . notification_big_expired ; status = TicketProvider . Tickets . STATUS_EXPIRED ; $F597 $F1267 $F665 } Intent intent = new Intent ( c , WearableService . class ) ; intent . setAction ( NUM00 ) ; $F107076 ( intent , t ) $F107076 ( intent , status ) c . startService ( intent ) ; Intent i = new Intent ( c , MainActivity . class ) ; i . addFlags ( Intent . FLAG_ACTIVITY_SINGLE_TOP | Intent . FLAG_ACTIVITY_CLEAR_TOP ) ; i . putExtra ( MainActivity . EXTRA_TICKET_ID , t . getId ( ) ) ; PendingIntent openIntent = PendingIntent . getActivity ( c , t . getNotificationId ( ) , i , PendingIntent . FLAG_CANCEL_CURRENT ) ; Intent i2 = new Intent ( c , MainActivity . class ) ; i2 . addFlags ( Intent . FLAG_ACTIVITY_SINGLE_TOP | Intent . FLAG_ACTIVITY_CLEAR_TOP ) ; i2 . putExtra ( MainActivity . EXTRA_TICKET_ID , t . getId ( ) ) ; i2 . putExtra ( MainActivity . EXTRA_SHOW_SMS , _BOOL ) ; PendingIntent showSmsIntent = PendingIntent . getActivity ( c , t . getNotificationId ( ) + NUM00 , i2 , PendingIntent . FLAG_CANCEL_CURRENT ) ; List < Action > actions = new ArrayList < Action > $F72 ; actions . add ( new Action ( R . drawable . notification_show_sms , R . string . notif_show_sms , showSmsIntent ) ) ; $F10144 ( rows ) rows . add ( text ) ; rows . add ( c . getString ( R . string . tickets_valid_from ) + NUM00 + FormatUtil . formatDateTime ( t . getValidFrom ( ) ) ) ; rows . add ( c . getString ( R . string . tickets_code ) + NUM00 + t . getHash ( ) ) ; fireNotification ( c , t . getNotificationId ( ) , openIntent , c . getString ( R . string . application_name ) , text , rows , t . getCity ( ) , ticker , smallIcon , largeIcon , actions , keepNotification ) ; }
public final static int parseInt ( String str ) { $F12685 ( c , str ) $F115 ( length , str ) boolean negative = ( c == NUM00 ) ; int offset = NUM00 ; if ( negative ) { if ( length == NUM00 || length > NUM00 ) $F75349 ( Integer , str ) $F47698 ( c , str , offset ) } else { if ( length > NUM00 ) $F75349 ( Integer , str ) } if ( c > NUM00 || c < NUM00 ) $F75349 ( Integer , str ) int num = c - NUM00 ; if ( offset < length ) { $F47698 ( c , str , offset ) if ( c > NUM00 || c < NUM00 ) $F75349 ( Integer , str ) num = ( num * NUM00 ) + ( c - NUM00 ) ; if ( offset < length ) { $F47698 ( c , str , offset ) if ( c > NUM00 || c < NUM00 ) $F75349 ( Integer , str ) num = ( num * NUM00 ) + ( c - NUM00 ) ; if ( offset < length ) { do { $F47698 ( c , str , offset ) if ( c > NUM00 || c < NUM00 ) $F75349 ( Integer , str ) num = ( num * NUM00 ) + ( c - NUM00 ) ; } while ( offset < length ) ; } } } return negative ? - num : num ; }
public BufferedHeader ( final CharArrayBuffer buffer ) throws ParseException { super ( ) ; $F826 ( buffer ) $F1384 ( colon , buffer ) if ( colon == - NUM00 ) { throw new ParseException $F3943 ( buffer ) ; } String s = buffer . substringTrimmed ( NUM00 , colon ) ; if $F1277 ( s ) { throw new ParseException $F3943 ( buffer ) ; } this . buffer = buffer ; this . name = s ; this . valuePos = colon + NUM00 ; }
$F10929 ( buf , mSizeLimit , mBuffersByLastUse , pos , Collections , mBuffersBySize , BUF_COMPARATOR , mCurrentSize , trim )
public static String toDateString ( $F22273 date , String format ) { $F1747 ( date ) SimpleDateFormat dateFormat = null ; if ( format != null ) { dateFormat = new SimpleDateFormat ( format ) ; } else { dateFormat = new SimpleDateFormat $F72 ; } $F4377 ( calendar , Calendar ) calendar . setTime ( date ) ; $F5330 ( dateFormat , date ) }
$F1309 public static $F4203 T executeWithBackOff ( AbstractGoogleClientRequest $F4203 client , String error , Object ... errorArgs ) throws $F3 { return executeWithBackOff ( client , String . format ( error , errorArgs ) ) ; }
private void checkServerResponseCode ( HttpURLConnection urlConnection ) throws RequestFailureException { try { if ( urlConnection . getResponseCode ( ) != NUM00 ) { throw new RequestFailureException ( $F7974 ( urlConnection ) + NUM00 ) ; } } catch ( IOException e ) $F49482 ( e ) }
public static void addResourceSource ( ResourceSource source ) $F207 ( ALL_RESOURCE_SOURCES , source )
private void commitChanges $F72 { hopfieldPropsPanel . commitChanges ( ) ; inputPanel . commitChanges ( ) ; }
private boolean connect_to_target ( PlaPointInt p_from_point ) { if ( nearest_target_item != null && target_set != null && ! target_set . contains ( nearest_target_item ) ) { nearest_target_item = null ; } if ( nearest_target_item == null || ! nearest_target_item . shares_net_no ( net_nos ) ) { return _BOOL ; } boolean route_completed = _BOOL ; PlaPointInt connection_point = null ; if ( nearest_target_item instanceof BrdAbit ) { BrdAbit target = ( BrdAbit ) nearest_target_item ; connection_point = target . center_get ( ) ; } else if ( nearest_target_item instanceof BrdTracep ) { return r_board . connect_to_trace ( p_from_point , ( BrdTracep ) nearest_target_item , pen_half_width_arr [ layer_active_no ] , clearance_class ) ; } else if ( nearest_target_item instanceof BrdAreaConduction ) { connection_point = p_from_point ; } if ( connection_point != null ) { route_completed = itera_connect ( p_from_point , connection_point ) ; } return route_completed ; }
public boolean onGenericMotionEvent ( MotionEvent ev ) { if ( ( ev . getSource ( ) & InputDevice . SOURCE_CLASS_POINTER ) == InputDevice . SOURCE_CLASS_POINTER ) { int action = ev . getAction ( ) ; switch ( action & MotionEvent . ACTION_MASK ) { case MotionEvent . ACTION_SCROLL : float vScroll = ev . getAxisValue ( MotionEvent . AXIS_VSCROLL ) ; if ( vScroll > NUM00 ) { if ( mDeckView . ensureFocusedTask ( ) ) { mDeckView . focusNextTask ( _BOOL , _BOOL ) ; } } else { if ( mDeckView . ensureFocusedTask ( ) ) { mDeckView . focusNextTask ( _BOOL , _BOOL ) ; } } return _BOOL ; } } return _BOOL ; }
public boolean addClass ( OwlClass targetClass ) { targetClass . addQCRestriction ( this ) ; $F20805 ( qcClasses , targetClass ) }
public void editElement ( final Object element , final String columnPropertyName ) { final int columnIndex = TableViewerUtils . columnPropertyNameToColumnIndex ( columnPropertyName , _BOOL , viewer ) ; viewer . editElement ( element , columnIndex ) ; }
public Fp ( ECCurve curve , ECFieldElement x , ECFieldElement y ) { this ( curve , x , y , _BOOL ) ; }
private static String serializeDocumentInt ( Document doc ) throws TransformerException , IOException { $F1538 ( s ) $F2218 ( factory , TransformerFactory ) $F94102 ( transformer , factory ) transformer . setOutputProperty ( OutputKeys . METHOD , NUM00 ) ; $F29108 ( transformer , OutputKeys ) $F29110 ( source , doc ) $F94122 ( outputTarget , s ) transformer . transform ( source , outputTarget ) ; $F1662 ( s ) }
$F32569 ( panel , cols , rows , filler , filled_cell_11 , _BOOL , cc , Box , index )
$F1 public boolean useBufferPerWindow $F72 { return ! Win32GraphicsEnvironment . isDWMCompositionEnabled ( ) ; }
static double area ( S2Point a , S2Point b , S2Point c ) { final double sa = b . angle ( c ) ; final double sb = c . angle ( a ) ; final double sc = a . angle ( b ) ; final double s = NUM00 * ( sa + sb + sc ) ; if ( s >= NUM00 ) { double s2 = s * s ; double dmin = s - Math . max ( sa , Math . max ( sb , sc ) ) ; if ( dmin < NUM00 * s * s2 * s2 ) { double area = girardArea ( a , b , c ) ; if ( dmin < s * ( NUM00 * area ) ) { return area ; } } } return NUM00 * Math . atan ( Math . sqrt ( Math . max ( NUM00 , Math . tan ( NUM00 * s ) * Math . tan ( NUM00 * ( s - sa ) ) * Math . tan ( NUM00 * ( s - sb ) ) * Math . tan ( NUM00 * ( s - sc ) ) ) ) ) ; }
private void hqr2 $F72 { int nn = this . n ; int n = nn - NUM00 ; int low = NUM00 ; int high = nn - NUM00 ; $F29087 ( eps , Math ) double exshift = NUM00 ; double p = NUM00 , q = NUM00 , r = NUM00 , s = NUM00 , z = NUM00 , t , w , x , y ; double norm = NUM00 ; for ( $F119 ( i , nn ) ) { if ( i < low | i > high ) { d [ i ] = H [ i ] [ i ] ; e [ i ] = NUM00 ; } for ( int j = $F23196 ( Math , i ) ; j < nn ; j ++ ) { norm = norm + $F93143 ( Math , H , i , j ) ; } } int iter = NUM00 ; while ( n >= low ) { int l = n ; while ( l > low ) { s = $F161966 ( Math , H , l ) + $F93149 ( Math , H , l ) ; $F153178 ( s , norm ) if ( $F161970 ( Math , H , l ) < eps * s ) $F5153 l -- ; } if ( l == n ) { H [ n ] [ n ] = H [ n ] [ n ] + exshift ; d [ n ] = H [ n ] [ n ] ; e [ n ] = NUM00 ; n -- ; iter = NUM00 ; } else if ( l == n - NUM00 ) { w = H [ n ] [ n - NUM00 ] * H [ n - NUM00 ] [ n ] ; p = ( $F161965 ( H , n ) - H [ n ] [ n ] ) / NUM00 ; q = p * p + w ; z = Math . sqrt ( Math . abs ( q ) ) ; H [ n ] [ n ] = H [ n ] [ n ] + exshift ; $F161965 ( H , n ) = $F161965 ( H , n ) + exshift ; x = H [ n ] [ n ] ; if ( q >= NUM00 ) { if ( p >= NUM00 ) { z = p + z ; } else { z = p - z ; } d [ n - NUM00 ] = x + z ; $F130980 ( d , n ) if ( z != NUM00 ) { d [ n ] = x - w / z ; } e [ n - NUM00 ] = NUM00 ; e [ n ] = NUM00 ; x = H [ n ] [ n - NUM00 ] ; s = Math . abs ( x ) + Math . abs ( z ) ; p = x / s ; q = z / s ; $F161998 ( r , Math , p , q ) p = p / r ; q = q / r ; for ( int j = n - NUM00 ; j < nn ; j ++ ) { z = H [ n - NUM00 ] [ j ] ; H [ n - NUM00 ] [ j ] = q * z + p * H [ n ] [ j ] ; $F162003 ( H , n , j , q , p , z ) } for ( $F9993 ( i , n ) ) { z = H [ i ] [ n - NUM00 ] ; H [ i ] [ n - NUM00 ] = q * z + p * H [ i ] [ n ] ; $F162003 ( H , i , n , q , p , z ) } for ( int i = low ; i <= high ; i ++ ) { z = V [ i ] [ n - NUM00 ] ; V [ i ] [ n - NUM00 ] = q * z + p * V [ i ] [ n ] ; $F162003 ( V , i , n , q , p , z ) } } else { d [ n - NUM00 ] = x + p ; d [ n ] = x + p ; e [ n - NUM00 ] = z ; e [ n ] = - z ; } n = n - NUM00 ; iter = NUM00 ; } else { x = H [ n ] [ n ] ; y = NUM00 ; w = NUM00 ; if ( l < n ) { y = $F161965 ( H , n ) ; w = H [ n ] [ n - NUM00 ] * H [ n - NUM00 ] [ n ] ; } if ( iter == NUM00 ) { exshift += x ; for ( int i = low ; i <= n ; i ++ ) { H [ i ] [ i ] -= x ; } s = $F161970 ( Math , H , n ) + $F161966 ( Math , H , n ) ; x = y = NUM00 * s ; w = - NUM00 * s * s ; } if ( iter == NUM00 ) { s = ( y - x ) / NUM00 ; s = s * s + w ; if ( s > NUM00 ) { $F84202 ( s , Math ) if ( y < x ) $F52810 ( s ) s = x - w / ( ( y - x ) / NUM00 + s ) ; for ( int i = low ; i <= n ; i ++ ) { H [ i ] [ i ] -= s ; } exshift += s ; x = y = w = NUM00 ; } } iter = iter + NUM00 ; int m = n - NUM00 ; while ( m >= l ) { z = H [ m ] [ m ] ; r = x - z ; s = y - z ; p = ( r * s - w ) / H [ m + NUM00 ] [ m ] + H [ m ] [ m + NUM00 ] ; q = $F162040 ( H , m ) - z - r - s ; r = $F162040 ( H , m ) ; s = $F162048 ( Math , p , q , r ) ; p = p / s ; q = q / s ; r = r / s ; $F15290 ( m , l ) if ( $F161970 ( Math , H , m ) * $F149599 ( Math , q , r ) < eps * ( Math . abs ( p ) * ( $F161966 ( Math , H , m ) + Math . abs ( z ) + Math . abs ( $F162040 ( H , m ) ) ) ) ) $F5153 m -- ; } for ( $F28096 ( i , m , n ) ) { $F162065 ( H , i ) if ( i > m + NUM00 ) { $F162065 ( H , i ) } } for ( $F162070 ( k , m , n ) ) { boolean notlast = ( k != n - NUM00 ) ; if ( k != m ) { p = H [ k ] [ k - NUM00 ] ; q = H [ k + NUM00 ] [ k - NUM00 ] ; r = ( notlast ? H [ k + NUM00 ] [ k - NUM00 ] : NUM00 ) ; x = $F162048 ( Math , p , q , r ) ; if ( x != NUM00 ) { p = p / x ; q = q / x ; r = r / x ; } } $F7256 ( x ) s = $F16206 ( Math , p , q , r ) ; $F52811 ( p , s ) if ( s != NUM00 ) { if ( k != m ) { H [ k ] [ k - NUM00 ] = - s * x ; } else if ( l != m ) { H [ k ] [ k - NUM00 ] = - H [ k ] [ k - NUM00 ] ; } p = p + s ; x = p / s ; y = q / s ; z = r / s ; q = q / p ; r = r / p ; for ( int j = k ; j < nn ; j ++ ) { p = H [ k ] [ j ] + q * H [ k + NUM00 ] [ j ] ; if ( notlast ) { p = p + r * H [ k + NUM00 ] [ j ] ; H [ k + NUM00 ] [ j ] = H [ k + NUM00 ] [ j ] - p * z ; } H [ k ] [ j ] = H [ k ] [ j ] - p * x ; H [ k + NUM00 ] [ j ] = H [ k + NUM00 ] [ j ] - p * y ; } for ( int i = NUM00 ; i <= Math . min ( n , k + NUM00 ) ; i ++ ) { p = x * H [ i ] [ k ] + y * H [ i ] [ k + NUM00 ] ; if ( notlast ) { p = p + z * H [ i ] [ k + NUM00 ] ; $F162112 ( H , i , k , p , r ) } H [ i ] [ k ] = H [ i ] [ k ] - p ; $F162112 ( H , i , k , p , q ) } for ( int i = low ; i <= high ; i ++ ) { p = x * V [ i ] [ k ] + y * V [ i ] [ k + NUM00 ] ; if ( notlast ) { p = p + z * V [ i ] [ k + NUM00 ] ; $F162112 ( V , i , k , p , r ) } V [ i ] [ k ] = V [ i ] [ k ] - p ; $F162112 ( V , i , k , p , q ) } } } } } $F32905 ( norm ) for ( $F157662 ( n , nn ) ) { p = d [ n ] ; q = e [ n ] ; if ( q == NUM00 ) { int l = n ; $F162129 ( H , n ) for ( $F18298 ( i , n ) ) { w = H [ i ] [ i ] - p ; r = NUM00 ; for ( int j = l ; j <= n ; j ++ ) { r = r + $F162130 ( H , i , j , n ) ; } if ( e [ i ] < NUM00 ) { z = w ; s = r ; } else { l = i ; if ( e [ i ] == NUM00 ) { if ( w != NUM00 ) { H [ i ] [ n ] = - r / w ; } else { H [ i ] [ n ] = - r / ( eps * norm ) ; } } else { x = H [ i ] [ i + NUM00 ] ; y = H [ i + NUM00 ] [ i ] ; q = $F162144 ( d , i , p ) + e [ i ] * e [ i ] ; t = ( x * s - z * r ) / q ; H [ i ] [ n ] = t ; if $F45017 ( Math , x , z ) { H [ i + NUM00 ] [ n ] = ( - r - w * t ) / x ; } else { H [ i + NUM00 ] [ n ] = ( - s - y * t ) / z ; } } t = $F93143 ( Math , H , i , n ) ; if ( ( eps * t ) * t > NUM00 ) { for ( int j = i ; j <= n ; j ++ ) { H [ j ] [ n ] = H [ j ] [ n ] / t ; } } } } } else if ( q < NUM00 ) { int l = n - NUM00 ; if ( $F161970 ( Math , H , n ) > Math . abs ( H [ n - NUM00 ] [ n ] ) ) { $F161965 ( H , n ) = q / H [ n ] [ n - NUM00 ] ; H [ n - NUM00 ] [ n ] = - ( H [ n ] [ n ] - p ) / H [ n ] [ n - NUM00 ] ; } else { cdiv ( NUM00 , - H [ n - NUM00 ] [ n ] , $F161965 ( H , n ) - p , q ) ; $F161965 ( H , n ) = cdivr ; H [ n - NUM00 ] [ n ] = cdivi ; } $F162065 ( H , n ) $F162129 ( H , n ) for ( $F18298 ( i , n ) ) { double ra , sa , vr , vi ; ra = NUM00 ; sa = NUM00 ; for ( int j = l ; j <= n ; j ++ ) { ra = ra + H [ i ] [ j ] * H [ j ] [ n - NUM00 ] ; sa = sa + $F162130 ( H , i , j , n ) ; } w = H [ i ] [ i ] - p ; if ( e [ i ] < NUM00 ) { z = w ; r = ra ; s = sa ; } else { l = i ; if ( e [ i ] == NUM00 ) { cdiv ( - ra , - sa , w , q ) ; H [ i ] [ n - NUM00 ] = cdivr ; H [ i ] [ n ] = cdivi ; } else { x = H [ i ] [ i + NUM00 ] ; y = H [ i + NUM00 ] [ i ] ; vr = $F162144 ( d , i , p ) + e [ i ] * e [ i ] - q * q ; vi = ( d [ i ] - p ) * NUM00 * q ; if ( vr == NUM00 & vi == NUM00 ) { vr = eps * norm * ( $F162048 ( Math , w , q , x ) + Math . abs ( y ) + Math . abs ( z ) ) ; } cdiv ( x * r - z * ra + q * sa , x * s - z * sa - q * ra , vr , vi ) ; H [ i ] [ n - NUM00 ] = cdivr ; H [ i ] [ n ] = cdivi ; if ( Math . abs ( x ) > $F149599 ( Math , z , q ) ) { H [ i + NUM00 ] [ n - NUM00 ] = ( - ra - w * H [ i ] [ n - NUM00 ] + q * H [ i ] [ n ] ) / x ; H [ i + NUM00 ] [ n ] = ( - sa - w * H [ i ] [ n ] - q * H [ i ] [ n - NUM00 ] ) / x ; } else { cdiv ( - r - y * H [ i ] [ n - NUM00 ] , - s - y * H [ i ] [ n ] , z , q ) ; H [ i + NUM00 ] [ n - NUM00 ] = cdivr ; H [ i + NUM00 ] [ n ] = cdivi ; } } t = Math . max ( Math . abs ( H [ i ] [ n - NUM00 ] ) , $F93143 ( Math , H , i , n ) ) ; if ( ( eps * t ) * t > NUM00 ) { for ( int j = i ; j <= n ; j ++ ) { H [ j ] [ n - NUM00 ] = H [ j ] [ n - NUM00 ] / t ; H [ j ] [ n ] = H [ j ] [ n ] / t ; } } } } } } for ( $F119 ( i , nn ) ) { if ( i < low | i > high ) { for ( int j = i ; j < nn ; j ++ ) { V [ i ] [ j ] = H [ i ] [ j ] ; } } } for ( $F151882 ( j , nn , low ) ) { for ( int i = low ; i <= high ; i ++ ) { z = NUM00 ; for ( int k = low ; k <= Math . min ( j , high ) ; k ++ ) { z = z + V [ i ] [ k ] * H [ k ] [ j ] ; } V [ i ] [ j ] = z ; } } }
private void serializable ( final IsolationLevels level ) throws Exception { clear ( store ) ; final ValueFactory vf = store . getValueFactory ( ) ; final IRI subj = vf . createIRI ( NUM00 ) ; final IRI pred = vf . createIRI ( NUM00 ) ; RepositoryConnection prep = store . getConnection ( ) ; try { prep . begin ( level ) ; prep . add ( subj , pred , vf . createLiteral ( NUM00 ) ) ; $F17621 ( prep ) } $F3229 ( prep ) $F123679 ( start ) $F123679 ( observed ) Thread t1 = incrementBy ( start , observed , level , vf , subj , pred , NUM00 ) ; Thread t2 = incrementBy ( start , observed , level , vf , subj , pred , NUM00 ) ; $F2346 ( t2 ) $F2346 ( t1 ) $F14454 ( t2 ) $F14454 ( t1 ) assertNotFailed ( ) ; RepositoryConnection check = store . getConnection ( ) ; try { check . begin ( level ) ; Literal lit = readLiteral ( check , subj , pred ) ; $F79839 ( val , lit ) if ( val != NUM00 && val != NUM00 ) $F268701 ( assertEquals , val ) $F17621 ( check ) } $F3229 ( check ) }
public static Array listToArrayRemoveEmpty ( String list , char delimiter ) { $F1749 ( len , list ) ArrayImpl array = new ArrayImpl $F72 ; $F116 ( len , array ) int last = NUM00 ; for ( $F119 ( i , len ) ) { if $F44927 ( list , i , delimiter ) { if ( last < i ) array . _append ( list . substring ( last , i ) ) ; last = i + NUM00 ; } } if ( last < len ) array . _append ( list . substring ( last ) ) ; return array ; }
$F49286 ( value , absMin , absMax , absValue , Math )
public static < T extends Object & $F25280 > T min $F11639 ( collection ) { $F11642 ( it , collection ) $F11644 ( min , it ) while $F2921 ( it ) { $F11646 ( next , it ) if $F9032 ( min , next ) { min = next ; } } return min ; }
$F1 public ServerHeartbeat server ( String address , int port , boolean isSSL , String clusterId , String displayName , boolean isDynamic ) { Objects . requireNonNull ( address ) ; Objects . requireNonNull ( clusterId ) ; if $F2979 ( address ) { address = NUM00 ; } ClusterHeartbeat cluster = createCluster ( clusterId ) ; ServerHeartbeat server ; if ( isDynamic ) { server = cluster . createDynamicServer ( address , port , isSSL ) ; } else { server = cluster . createServer ( address , port , isSSL ) ; } if ( displayName != null ) { server . setDisplayName ( displayName ) ; } if ( ! isDynamic ) { cluster . addSeedServer ( server ) ; } return server ; }
public void testToString $F72 { LinkedBlockingQueue q = populatedQueue ( SIZE ) ; $F1822 ( s , q ) for ( $F1316 ( i , SIZE ) ) { assertTrue ( s . indexOf ( String . valueOf ( i ) ) >= NUM00 ) ; } }
private void findClub $F72 { if $F9774 ( ce ) $F932 $F21024 ( title , Messages ) $F21024 ( body , Messages ) if ( ! clientgui . doYesNoDialog ( title , body ) ) $F932 $F6050 ( attacks ) attacks . addElement ( new FindClubAction ( cen ) ) ; ready ( ) ; }
public void test_allocationContexts $F72 throws IOException { final Journal store = ( Journal ) getStore ( ) ; try { $F205089 ( bs , store ) $F205091 ( rw , bs ) final IAllocationContext allocContext1 = rw . newAllocationContext ( _BOOL ) ; final IAllocationContext allocContext2 = rw . newAllocationContext ( _BOOL ) ; final int sze = NUM00 ; final $F96 $F83281 ( buf , sze ) ; r . nextBytes ( buf ) ; final long addr1a = bs . write ( ByteBuffer . wrap ( buf ) , allocContext1 ) ; final long addr1b = bs . write ( ByteBuffer . wrap ( buf ) , allocContext1 ) ; rw . detachContext ( allocContext1 ) ; final long addr2a = bs . write ( ByteBuffer . wrap ( buf ) , allocContext2 ) ; final long addr2b = bs . write ( ByteBuffer . wrap ( buf ) , allocContext2 ) ; rw . detachContext ( allocContext2 ) ; try { bs . write ( ByteBuffer . wrap ( buf ) , allocContext1 ) ; fail ( NUM00 ) ; } catch ( IllegalStateException ise ) $F845 final IAllocationContext allocContext3 = rw . newAllocationContext ( _BOOL ) ; final long addr1c = bs . write ( ByteBuffer . wrap ( buf ) , allocContext3 ) ; assertTrue ( NUM00 , bs . getPhysicalAddress ( addr1c ) > bs . getPhysicalAddress ( addr2b ) ) ; bs . delete ( addr1c , allocContext3 ) ; final long addr1d = bs . write ( ByteBuffer . wrap ( buf ) , allocContext3 ) ; assertTrue ( NUM00 , addr1c == addr1d ) ; rw . detachContext ( allocContext3 ) ; $F17621 ( store ) bs . delete ( addr1d ) ; final long addr1e = bs . write ( ByteBuffer . wrap ( buf ) ) ; assertTrue ( NUM00 , addr1e != addr1d ) ; $F17621 ( store ) } $F17625 ( store ) }
public PDFXref $F97 ( line ) { if ( line == null ) { id = - NUM00 ; generation = - NUM00 ; } else { $F254518 ( id , Integer , line ) $F254518 ( generation , Integer , line ) } compressed = _BOOL ; }
public static $F806 makeStrings ( Collection < InetAddress > addrs ) { $F5442 ( result , addrs ) int i = NUM00 ; for ( InetAddress addr : addrs ) { result [ i ++ ] = addr . getHostAddress ( ) ; } return result ; }
public static void showProfile ( Activity activity , String pilotId , $F5466 $F12078 extras ) { if ( $F4251 ( pilotId ) && AirMap . hasValidAuthenticatedUser ( ) ) { pilotId = AirMap . getUserId ( ) ; } Intent intent = new Intent ( activity , ProfileActivity . class ) ; intent . putExtra ( ProfileActivity . ARG_PILOT_ID , pilotId ) ; if ( extras != null ) { intent . putExtra ( CreateFlightActivity . KEY_VALUE_EXTRAS , extras ) ; } activity . startActivity ( intent ) ; }
public SmoothMoves $F72 { $F11380 ( cycleStart , System ) ; startTimer ( currentResolution ) ; }
public static void updatePriceLists ( Properties ctx , ProductBean productBean , String trxName ) throws OperationException { ArrayList < ProductBean > list = productBean . getProductBeanList ( ) ; if ( list != null ) { int productId = productBean . getProductId ( ) ; Iterator < ProductBean > iter = list . iterator ( ) ; while $F2921 ( iter ) { ProductBean bean = iter . next ( ) ; int priceListId = bean . getPriceListId ( ) ; BigDecimal stdPrice = bean . getStdPrice ( ) ; BigDecimal listPrice = bean . getListPrice ( ) ; BigDecimal limitPrice = bean . getLimitPrice ( ) ; MPriceList priceList = MPriceList . get ( ctx , priceListId , trxName ) ; if ( priceList . isTaxIncluded ( ) ) { stdPrice = bean . getStdPriceIncl ( ) ; listPrice = bean . getListPriceIncl ( ) ; limitPrice = bean . getLimitPriceIncl ( ) ; } updatePriceLists ( ctx , productId , priceListId , stdPrice , listPrice , limitPrice , trxName ) ; } } }
private String checkDependencies ( ModuleDescriptor md , HashMap < String , ModuleDescriptor > modlist ) { logger . debug ( $F73839 ( md ) ) ; ModuleInterface [ ] requires = md . getRequires ( ) ; if ( requires != null ) { for ( ModuleInterface req : requires ) { String res = checkOneDependency ( md , req , modlist ) ; if $F5973 ( res ) { return res ; } } } $F1278 }
public void testClearBitPositiveInside1 $F72 $F37104 ( aSign , number , aNumber , aBytes , result , rBytes , resBytes , i , assertTrue , assertEquals )
public void deserializeFunnel $F11546 ( serializedFunnel ) { $F113927 $F9626 ( funnelStepAccumulator ) ; for ( Object e : serializedFunnel ) { if ( e != null ) $F207 ( funnelStepAccumulator , e ) else { funnelSteps . add ( $F28906 ( funnelStepAccumulator ) ) ; $F725 ( funnelStepAccumulator ) } } }
public static String appendParameter ( CtClass type , String descriptor ) { $F1384 ( i , descriptor ) if ( i < NUM00 ) return descriptor ; else { $F280 ( newdesc ) $F6937 ( newdesc , descriptor , i ) toDescriptor ( newdesc , type ) ; $F13047 ( newdesc , descriptor , i ) $F92 ( newdesc ) } }
public void addCatchClause ( CatchClause clause ) { assertNotNull ( clause ) ; if ( catchClauses == null ) { catchClauses = new ArrayList < CatchClause > $F72 ; } catchClauses . add ( clause ) ; clause . setParent ( this ) ; }
public static void streamContentToBrowser ( HttpServletResponse response , $F96 bytes , String contentType , String fileName ) throws IOException { setResponseBrowserProxyNoCache ( response ) ; response . setContentLength ( bytes . length ) ; if ( contentType != null ) { response . setContentType ( contentType ) ; } if ( fileName != null ) { response . setHeader ( NUM00 , NUM00 + fileName + NUM00 ) ; } $F147972 ( out , response ) InputStream in = new ByteArrayInputStream ( bytes ) ; try { streamContent ( out , in , bytes . length ) ; } catch ( IOException e ) { $F59 ( in ) $F59 ( out ) throw e ; } $F59 ( in ) $F1206 ( out ) $F59 ( out ) }
public void unlock ( Object key ) { $F2544 ( uid , String , key ) Transaction tr = lockedUIDHashMap . get ( uid ) ; $F2329 ( tr ) try $F19092 ( tr ) $F92403 ( logger , e ) finally $F106 ( lockedUIDHashMap , uid ) }
public List < Order > fetchOrders ( int startIndex , int num ) { int endIndex = startIndex + num > orders . size ( ) ? orders . size ( ) : startIndex + num ; return orders . subList ( startIndex , endIndex ) ; }
public boolean ensureSchemaAgreement $F72 { $F657 ( start , System ) $F14855 schemas = null ; while ( System . currentTimeMillis ( ) - start < DbClientContext . MAX_SCHEMA_WAIT_MS ) { try { log . info ( NUM00 , DbClientContext . SCHEMA_RETRY_SLEEP_MILLIS / NUM00 ) ; Thread . sleep ( DbClientContext . SCHEMA_RETRY_SLEEP_MILLIS ) ; } catch ( InterruptedException ex ) $F10911 ( log ) schemas = getSchemaVersions ( ) ; if $F3817 ( schemas ) $F1448 if $F10471 ( schemas ) { if ( ! schemas . containsKey ( StorageProxy . UNREACHABLE ) ) { return _BOOL ; } else $F1448 } if ( schemas . containsKey ( StorageProxy . UNREACHABLE ) ) { return _BOOL ; } } $F5197 ( log , schemas ) $F4638 }
$F40512 ( stack )
private TileStore ( final SpriteStore store ) { this . store = store ; tiles = new ArrayList < Sprite > $F72 ; tiles . add ( store . getEmptySprite ( ) ) ; }
public static String comparableQualifier ( String qualifier ) { $F12747 ( i , _QUALIFIERS , qualifier ) return i == - NUM00 ? $F37513 ( _QUALIFIERS ) + qualifier : String . valueOf ( i ) ; }
public boolean moreWorkThan ( StoredBlock other ) { return chainWork . compareTo ( other . chainWork ) > NUM00 ; }
public static Object evaluate ( Object context , Object self , String expr , $F3803 engineConfigs ) throws CWLExpressionException { String trimmedExpr = StringUtils . trim ( expr ) ; $F3110 ( trimmedExpr ) String function = trimmedExpr ; if $F3106 ( trimmedExpr ) { function = NUM00 ; $F4969 ( function , trimmedExpr ) } Context cx = Context . enter ( ) ; cx . setOptimizationLevel ( OPTIMIZATION_LEVEL ) ; cx . setMaximumInterpreterStackDepth ( MAX_STACK_DEPTH ) ; cx . setClassShutter ( new CWLExpressionDenyAllClassShutter $F72 ) ; try { Scriptable globalScope = cx . initStandardObjects ( ) ; if ( engineConfigs != null ) { for ( $F2277 ( i , engineConfigs ) ) { Reader engineConfigReader = new StringReader $F73204 ( engineConfigs , i ) ; cx . evaluateReader ( globalScope , engineConfigReader , NUM00 + i + NUM00 , NUM00 , null ) ; } } putToScope ( EXPR_CONTEXT_NAME , context , cx , globalScope ) ; putToScope ( EXPR_SELF_NAME , self , cx , globalScope ) ; Scriptable resultScope = cx . newObject ( globalScope ) ; resultScope . setPrototype ( globalScope ) ; resultScope . setParentScope ( globalScope ) ; Object result = cx . evaluateString ( resultScope , function , NUM00 , NUM00 , null ) ; if ( result == null || result instanceof Undefined ) $F1337 Object wrappedResult = Context . javaToJS ( result , globalScope ) ; putToScope ( NUM00 , wrappedResult , cx , globalScope ) ; ScriptableObject . putProperty ( globalScope , NUM00 , wrappedResult ) ; $F180114 ( finalFunction ) Scriptable wrapScope = cx . newObject ( globalScope ) ; wrapScope . setPrototype ( globalScope ) ; wrapScope . setParentScope ( globalScope ) ; result = cx . evaluateString ( wrapScope , finalFunction , NUM00 , NUM00 , null ) ; return castResult ( result ) ; } catch ( Exception e ) { $F574 ( msg , String , expr ) throw new CWLExpressionException ( msg , e ) ; } finally { Context . exit ( ) ; } }
private void token ( char c ) throws ConfigurationException , IOException { int t = st . nextToken ( ) ; if ( t != c ) { if ( c == NUM00 ) $F1210 ( syntax ) else { syntax ( new String ( new char [ ] { NUM00 , c , + NUM00 } ) ) ; } } }
public static boolean isJarURL ( URL url ) { $F5524 ( protocol , url ) return ( $F86439 ( URL_PROTOCOL_JAR , protocol , URL_PROTOCOL_ZIP , URL_PROTOCOL_VFSZIP ) || URL_PROTOCOL_WSJAR . equals ( protocol ) ) ; }
public boolean equals ( Object o ) { if ( o instanceof LDAPUsers ) { LDAPUsers g = ( LDAPUsers ) o ; if ( ( selectedUserDNs != null ) && ( g . selectedUserDNs != null ) && $F52920 ( selectedUserDNs , g ) ) { return _BOOL ; } } return _BOOL ; }
protected void applySetTimestamp ( Long timestamp ) throws SQLException { if ( timestamp != null && conn . supportsControlTimestamp ( ) ) { if ( timestamp . longValue ( ) != currentTimestamp ) { currentTimestamp = timestamp . longValue ( ) ; statement . addBatch ( conn . getControlTimestampQuery ( timestamp ) ) ; } } }
$F32797 ( sourcePosition , referencePosition , srcAndRefPositions , referenceCount , a , System )
public Accessor ( String className , ClassLoader classLoader , $F749 constructorTypes , $F131 constructorArgs ) { try { fClass = Class . forName ( className , _BOOL , classLoader ) ; } catch ( ClassNotFoundException e ) $F5795 ( fail ) catch ( ExceptionInInitializerError e ) $F5795 ( fail ) Constructor constructor = null ; try { constructor = fClass . getDeclaredConstructor ( constructorTypes ) ; } catch ( SecurityException e2 ) $F5795 ( fail ) catch ( NoSuchMethodException e2 ) $F5795 ( fail ) Assert . isNotNull ( constructor ) ; constructor . setAccessible ( _BOOL ) ; try { fInstance = constructor . newInstance ( constructorArgs ) ; } catch ( IllegalArgumentException e ) $F5795 ( fail ) catch ( InvocationTargetException e ) $F5795 ( fail ) catch ( InstantiationException e ) $F5795 ( fail ) catch ( IllegalAccessException e ) $F5795 ( fail ) }
public static List < LoggedMqttMessage > parseMessageLog ( $F20109 ( messages ) , final ProgressUpdater progress , final long current , final long max ) throws SpyException { try { final long startTime = TimeUtils . getMonotonicTime ( ) ; $F10162 ( items , messages ) final long chunkSize = items / NUM00 ; final MqttMessageLogParser parser = new MqttMessageLogParser $F72 ; final List < LoggedMqttMessage > list = new ArrayList < LoggedMqttMessage > $F72 ; long item = NUM00 ; long reportAt = NUM00 ; for ( $F119 ( i , items ) ) { $F3056 ( message , messages , i ) if ( progress != null ) { if ( progress . isCancelled ( ) ) $F11048 ( logger ) item ++ ; if ( item % NUM00 == NUM00 ) { progress . update ( current + item , max ) ; } } if ( ( i > NUM00 ) && ( i == ( chunkSize * reportAt ) ) ) { final long currentTime = TimeUtils . getMonotonicTime ( ) ; final long timeTaken = currentTime - startTime ; final long totalTimeExpected = timeTaken * items / i ; if ( timeTaken > NUM00 ) { logger . info ( NUM00 , reportAt * NUM00 , ( totalTimeExpected - timeTaken ) / NUM00 ) ; } reportAt ++ ; } try { list . add ( parser . parse ( message ) ) ; } catch ( XMLException e ) $F30203 ( logger , message , e ) } $F11057 ( logger , list ) return list ; } catch ( XMLException e ) { throw new SpyException ( NUM00 , e ) ; } }
public void stop $F72 { duration += System . currentTimeMillis ( ) - start ; }
public void addRow $F22194 ( row ) throws CarbonSortKeyAndGroupByException { int currentSize = entryCount ; if ( sortBufferSize == currentSize ) { $F980 ( LOGGER ) $F5237 fileList ; if $F29395 ( procFiles , numberOfIntermediateFileToBeMerged ) { synchronized ( lockObject ) { fileList = procFiles . toArray ( $F92261 ( procFiles ) ) ; this . procFiles = new $F14386 $F989 ; } LOGGER . debug ( NUM00 + fileList . length ) ; startIntermediateMerging ( fileList ) ; } $F29684 recordHolderListLocal = recordHolderList ; try { $F90610 ( semaphore ) dataSorterAndWriterExecutorService . submit ( new DataSorterAndWriter ( recordHolderListLocal ) ) ; } catch ( InterruptedException e ) { $F45904 ( LOGGER , e ) throw new CarbonSortKeyAndGroupByException $F1783 ( e ) ; } this . recordHolderList = new Object [ this . sortBufferSize ] [ ] ; this . entryCount = NUM00 ; } recordHolderList [ entryCount ++ ] = row ; }
public static $F96 decode ( String data ) { int len = $F8196 ( data ) * NUM00 ; $F39018 ( bOut , len ) try { encoder . decode ( data , bOut ) ; } catch ( Exception e ) { throw new DecoderException $F11592 ( e ) ; } $F11316 ( bOut ) }
@ Uninterruptible public static Address unwindNativeStackFrame ( Address currfp ) { if ( VM . BuildForIA32 ) { return currfp ; } Address callee_fp ; Address fp = Magic . getCallerFramePointer ( currfp ) ; Address ip ; do { callee_fp = fp ; ip = Magic . getReturnAddressUnchecked ( fp ) ; fp = Magic . getCallerFramePointer ( fp ) ; } while ( ! MemoryManager . addressInVM ( ip ) && fp . NE ( StackFrameLayout . getStackFrameSentinelFP ( ) ) ) ; if ( VM . BuildForPowerPC ) { return fp ; } else { return callee_fp ; } }
$F1 public PathImpl schemeWalk ( String userPath , $F2100 ( attributes ) , String filePath , int offset ) { String canonicalPath ; if ( offset < filePath . length ( ) && ( filePath . charAt ( offset ) == NUM00 || filePath . charAt ( offset ) == _separatorChar ) ) canonicalPath = normalizePath ( NUM00 , filePath , offset , _separatorChar ) ; else canonicalPath = normalizePath ( _pathname , filePath , offset , _separatorChar ) ; return fsWalk ( userPath , attributes , canonicalPath ) ; }
public static boolean isMimeTypeImage ( String mimeType ) { return mimeType != null && mimeType . startsWith ( NUM00 ) ; }
public FXMessageDialog ( final Stage parent , final Parent group ) { this ( parent ) ; content . setCenter ( group ) ; }
$F30491 ( key , value , bitmapSize , getBitmapSize )
public Matrix abs $F72 { $F3788 ( result , m , n ) for ( int i = NUM00 ; i < result . A . length ; i ++ ) { for ( int j = NUM00 ; j < result . A [ i ] . length ; j ++ ) result . A [ i ] [ j ] = $F93143 ( Math , A , i , j ) ; } return result ; }
public void removeAttribute ( String attrName ) throws SMSException { $F125374 ( attribute , attrSet , attrName ) if ( attribute == null ) { throw ( new SMSException ( LdapException . newLdapException ( ResultCode . ATTRIBUTE_OR_VALUE_EXISTS , getBundleString ( IUMSConstants . SMS_ATTR_OR_VAL_EXISTS ) ) , NUM00 ) ) ; } attrSet . remove ( attrName ) ; if ( modSet == null ) { $F266988 ( modSet ) } BasicAttribute ba = new BasicAttribute ( attrName , attribute ) ; for ( $F2774 ( items , attribute ) ) ba . add ( items . next ( ) ) ; modSet . add ( new ModificationItem ( DirContext . REMOVE_ATTRIBUTE , ba ) ) ; }
@ TargetApi ( Build . VERSION_CODES . HONEYCOMB ) public void snapshot ( int cameraId ) { final int encWidth = NUM00 ; final int encHeight = NUM00 ; if ( enable . containsKey ( cameraId ) && ! enable . get ( cameraId ) ) $F932 Camera camera = null ; synchronized ( cameraLock ) { try { camera = prepareCamera ( cameraId , encWidth , encHeight ) ; $F2329 ( camera ) $F44970 ( Cfg , Check , TAG , cameraId ) if ( this . surface == null ) { $F11844 ( surfaceparams ) GLES20 . glGenTextures ( NUM00 , surfaceparams , NUM00 ) ; GLES20 . glBindTexture ( GLES20 . GL_TEXTURE_2D , surfaceparams [ NUM00 ] ) ; GLES20 . glTexParameteri ( GLES20 . GL_TEXTURE_2D , GLES20 . GL_TEXTURE_WRAP_S , GLES20 . GL_CLAMP_TO_EDGE ) ; GLES20 . glTexParameteri ( GLES20 . GL_TEXTURE_2D , GLES20 . GL_TEXTURE_WRAP_T , GLES20 . GL_CLAMP_TO_EDGE ) ; this . surface = new SurfaceTexture ( surfaceparams [ NUM00 ] ) ; } camera . setPreviewTexture ( surface ) ; camera . startPreview ( ) ; camera . setOneShotPreviewCallback ( previewCallback ) ; $F18604 ( cameraLock ) } catch ( Exception e ) { $F44970 ( Cfg , Check , TAG , e ) } } }
private static DebuggerException parseExceptionOption ( Node node ) { return new DebuggerException ( parseStringOption ( node , NUM00 ) , parseLongOption ( node , NUM00 ) , DebuggerExceptionHandlingAction . convertToHandlingAction ( parseIntOption ( node , NUM00 ) ) ) ; }
public Image rotate180Degrees ( Image image , boolean maintainOpacity ) { $F2027 rgb = image . getRGB ( ) ; $F22974 ( newRGB , rgb ) $F2049 ( width , image ) $F2047 ( height , image ) for ( $F119 ( y , height ) ) { for ( $F119 ( x , width ) ) { int destX = width - x - NUM00 ; newRGB [ destX + ( height - y - NUM00 ) * width ] = rgb [ x + y * width ] ; } } return EncodedImage . createFromRGB ( newRGB , width , height , ! maintainOpacity ) ; }
public static void updateFinantare ( SetGetModel m , String changedColumnName ) { BigDecimal valCofinantare = SetGetUtil . get_AttrValueAsBigDecimal ( m , COLUMNNAME_A_Valoare_Cofinantare ) ; BigDecimal assetCost = SetGetUtil . get_AttrValueAsBigDecimal ( m , COLUMNNAME_A_Asset_Cost ) ; BigDecimal valTert = SetGetUtil . get_AttrValueAsBigDecimal ( m , COLUMNNAME_A_Valoare_Tert ) ; if ( $F67525 ( valCofinantare ) && $F67525 ( valTert ) ) { valCofinantare = assetCost ; valTert = Env . ZERO ; } else if $F1238 ( COLUMNNAME_A_Asset_Cost , changedColumnName ) { valCofinantare = assetCost . subtract ( valTert ) ; } else if $F1238 ( COLUMNNAME_A_Valoare_Cofinantare , changedColumnName ) { valTert = assetCost . subtract ( valCofinantare ) ; } else if $F1238 ( COLUMNNAME_A_Valoare_Tert , changedColumnName ) { valCofinantare = assetCost . subtract ( valTert ) ; } else { valTert = assetCost . subtract ( valCofinantare ) ; } String tipFinantare = A_TIP_FINANTARE_Cofinantare ; if ( $F67525 ( valTert ) ) { tipFinantare = A_TIP_FINANTARE_Proprie ; } else if ( $F67525 ( valCofinantare ) ) { tipFinantare = A_TIP_FINANTARE_Terti ; } m . set_AttrValue ( COLUMNNAME_A_Tip_Finantare , tipFinantare ) ; m . set_AttrValue ( COLUMNNAME_A_Valoare_Cofinantare , valCofinantare ) ; m . set_AttrValue ( COLUMNNAME_A_Valoare_Tert , valTert ) ; if ( A_TIP_FINANTARE_Proprie . equals ( tipFinantare ) && SetGetUtil . isPersistent ( m ) ) { m . set_AttrValue ( COLUMNNAME_A_FundingMode_ID , null ) ; } }
private void parseStartTag ( boolean xmldecl , boolean throwOnResolveFailure ) throws $F139192 { if ( ! xmldecl ) $F1210 ( read ) name = readName ( ) ; attributeCount = NUM00 ; while ( _BOOL ) { skip ( ) ; $F336033 ( position , limit , fillBuffer , checkRelaxed , UNEXPECTED_EOF ) int c = buffer [ position ] ; if ( xmldecl ) { if ( c == NUM00 ) { position ++ ; read ( NUM00 ) ; $F665 } } else { if ( c == NUM00 ) { degenerated = _BOOL ; position ++ ; skip ( ) ; read ( NUM00 ) ; $F597 } else if ( c == NUM00 ) $F56675 ( position ) } String attrName = readName ( ) ; int i = ( attributeCount ++ ) * NUM00 ; attributes = ensureCapacity ( attributes , i + NUM00 ) ; attributes [ i ] = NUM00 ; attributes [ i + NUM00 ] = null ; attributes [ i + NUM00 ] = attrName ; skip ( ) ; $F336033 ( position , limit , fillBuffer , checkRelaxed , UNEXPECTED_EOF ) if ( buffer [ position ] == NUM00 ) { position ++ ; skip ( ) ; $F336033 ( position , limit , fillBuffer , checkRelaxed , UNEXPECTED_EOF ) char delimiter = buffer [ position ] ; if $F37111 ( delimiter ) { position ++ ; } else if ( relaxed ) { delimiter = NUM00 ; } else $F139239 ( this ) attributes [ i + NUM00 ] = readValue ( delimiter , _BOOL , throwOnResolveFailure , ValueContext . ATTRIBUTE ) ; if ( delimiter != NUM00 && peekCharacter ( ) == delimiter ) { position ++ ; } } else if ( relaxed ) { attributes [ i + NUM00 ] = attrName ; } else { checkRelaxed ( NUM00 + attrName ) ; attributes [ i + NUM00 ] = attrName ; } } int sp = depth ++ * NUM00 ; elementStack = ensureCapacity ( elementStack , sp + NUM00 ) ; elementStack [ sp + NUM00 ] = name ; if ( depth >= nspCounts . length ) { $F65716 ( bigger , depth ) $F7057 ( System , nspCounts , bigger ) nspCounts = bigger ; } $F130980 ( nspCounts , depth ) if ( processNsp ) $F5795 ( adjustNsp ) else { namespace = NUM00 ; } if ( defaultAttributes != null ) { $F2539 elementDefaultAttributes = defaultAttributes . get ( name ) ; if ( elementDefaultAttributes != null ) { for ( $F19318 ( entry , elementDefaultAttributes ) ) { if ( getAttributeValue ( null , entry . getKey ( ) ) != null ) $F1448 int i = ( attributeCount ++ ) * NUM00 ; attributes = ensureCapacity ( attributes , i + NUM00 ) ; attributes [ i ] = NUM00 ; attributes [ i + NUM00 ] = null ; attributes [ i + NUM00 ] = entry . getKey ( ) ; attributes [ i + NUM00 ] = entry . getValue ( ) ; } } } elementStack [ sp ] = namespace ; elementStack [ sp + NUM00 ] = prefix ; elementStack [ sp + NUM00 ] = name ; }
private void displayCalendar $F72 { ListItem listItem = fieldResource . getSelectedItem ( ) ; $F8249 ( listItem ) KeyNamePair pp = new KeyNamePair ( ( Integer ) listItem . getValue ( ) , listItem . getLabel ( ) ) ; int S_Resource_ID = pp . getKey ( ) ; m_mAssignment . setS_Resource_ID ( S_Resource_ID ) ; Date date = fieldDate . getValue ( ) ; $F35 ( date , System ) m_loading = _BOOL ; schedulePane . recreate ( S_Resource_ID , date ) ; m_loading = _BOOL ; invalidate ( ) ; }
public LineString createLineString ( CoordinateSequence coordinates ) { return new LineString ( coordinates , this ) ; }
public static final $F5415 trim ( $F5415 a , int size ) { if ( a . length == size ) { return a ; } else { $F25850 ( b , size ) $F135 ( System , a , b , size ) return b ; } }
public void close $F72 { if $F48405 ( closed , _BOOL ) $F5795 ( doClose ) }
$F1 public boolean connectionAllowed ( String eventName ) { if $F1264 ( eventName ) { return _BOOL ; } $F20092 ( m_listenee , _BOOL ) return _BOOL ; }
void subtractFlakes ( int quantity ) { for ( $F1316 ( i , quantity ) ) { int index = numFlakes - i - NUM00 ; flakes . remove ( index ) ; } setNumFlakes ( numFlakes - quantity ) ; }
public int processBytes $F107623 ( in , inOff , len , out , outOff ) throws $F5278 { $F6853 ( len ) int blockSize = getBlockSize ( ) ; int length = getUpdateOutputSize ( len ) ; $F139178 ( length , outOff , out ) int resultLen = NUM00 ; int gapLen = buf . length - bufOff ; $F139183 ( len , gapLen , System , in , inOff , buf , bufOff , resultLen , cipher , out , outOff , blockSize ) System . arraycopy ( in , inOff , buf , bufOff , len ) ; bufOff += len ; return resultLen ; }
public boolean requiredResourceName ( Policy policy , String realmName , String name ) { getSvcTypeNameToActionsMap ( policy , realmName ) ; $F297 ( requiredResourceNameService , name ) }
public static void main $F39524 { boolean ok = parseOptions ( args ) ; if ( ! ok || ! stripFiles ( infiles , outfiles ) ) $F63967 ( System ) }
protected String a $F18289 ( s , v , u ) throws Exception { char sign = v >= NUM00 ? NUM00 : NUM00 ; Date dt = DateMathParser . parseMath ( null , s + NUM00 + sign + Math . abs ( v ) + u ) ; return fmt . format ( dt . toInstant ( ) ) ; }
public AuthorityKeyIdentifierStructure ( X509Certificate certificate ) throws CertificateParsingException $F14373 ( super , fromCertificate , certificate )
JarFile open ( final File jarFile ) throws IOException { isTrue ( jarFile . exists ( ) , NUM00 ) ; return new JarFile ( jarFile ) ; }
public void removeAllEmails $F72 $F9096 ( emails )
$F20296 ( mRootDirectory , VolleyLog , files , file , fis , entry , CacheHeader , putEntry )
protected void drawPath ( Canvas canvas , $F6205 points , Paint paint , boolean circular ) { $F6212 ( path ) $F2047 ( height , canvas ) $F2049 ( width , canvas ) $F5415 tempDrawPoints ; $F6215 ( points ) tempDrawPoints = calculateDrawPoints ( points . get ( NUM00 ) , points . get ( NUM00 ) , points . get ( NUM00 ) , points . get ( NUM00 ) , height , width ) ; $F6222 ( path , tempDrawPoints ) $F6224 ( path , tempDrawPoints ) $F2199 ( length , points ) for ( $F6225 ( i , length ) ) { if ( ( points . get ( i - NUM00 ) < NUM00 && $F6227 ( points , i ) ) || ( points . get ( i - NUM00 ) > height && points . get ( i + NUM00 ) > height ) ) $F1448 tempDrawPoints = calculateDrawPoints ( points . get ( i - NUM00 ) , points . get ( i - NUM00 ) , points . get ( i ) , points . get ( i + NUM00 ) , height , width ) ; if ( ! circular ) { $F6222 ( path , tempDrawPoints ) } $F6224 ( path , tempDrawPoints ) } if ( circular ) { path . lineTo ( $F6243 ( points ) ) ; } canvas . drawPath ( path , paint ) ; }
$F61852 public void test_unwrap_02 $F72 throws SSLException { String host = NUM00 ; int port = NUM00 ; $F30907 ( bbA , ByteBuffer ) $F30909 ( bb , ByteBuffer ) SSLEngine sse = getEngine ( host , port ) ; sse . setUseClientMode ( _BOOL ) ; try { sse . unwrap ( bb , bbA , - NUM00 , NUM00 ) ; fail ( NUM00 ) ; } $F191186 try { sse . unwrap ( bb , bbA , NUM00 , - NUM00 ) ; fail ( NUM00 ) ; } $F191186 try { sse . unwrap ( bb , bbA , bbA . length + NUM00 , bbA . length ) ; fail ( NUM00 ) ; } $F191186 try { sse . unwrap ( bb , bbA , NUM00 , bbA . length + NUM00 ) ; fail ( NUM00 ) ; } $F191186 }
public PWResetAdminLog ( SSOToken token ) { this . token = token ; if ( logStatus ) { logger = ( $F476277 ) Logger . getLogger ( logFile ) ; } String lstr = SystemProperties . get ( Constants . AM_LOCALE ) ; init ( lstr ) ; }
public static boolean isLetter ( Character self ) { return Character . isLetter ( self ) ; }
public void callArgVisitors ( XPathVisitor visitor ) { for ( $F2277 ( i , m_argVec ) ) { $F11427 ( exp , m_argVec , i ) exp . callVisitors ( new ArgExtOwner ( exp ) , visitor ) ; } }
public static String createLink ( String uri , String label ) { $F150391 ( uri , label ) }
public static boolean isExpression ( String token , boolean isXml ) { String openExpr ; String closeExpr ; if ( isXml ) { openExpr = OPEN_EXPR_XML ; closeExpr = CLOSE_EXPR_XML ; } else { openExpr = OPEN_EXPR ; closeExpr = CLOSE_EXPR ; } if ( token . startsWith ( openExpr ) && token . endsWith ( closeExpr ) ) { return _BOOL ; } else { return _BOOL ; } }
public void destroy $F72 { this . isInitialized = _BOOL ; this . isFinished = _BOOL ; this . firstNode = null ; this . tailLength = NUM00 ; this . firstNodeHeight = - NUM00 ; }
public static Uri fromFile ( File file ) { $F896 ( file ) PathPart path = PathPart . fromDecoded ( file . getAbsolutePath ( ) ) ; return new HierarchicalUri ( NUM00 , Part . EMPTY , path , Part . NULL , Part . NULL ) ; }
protected Object readFixedType ( BinaryReaderExImpl reader ) throws BinaryObjectException { Object val = null ; switch ( mode ) { case BYTE : val = reader . readByteNullable ( id ) ; $F597 case SHORT : val = reader . readShortNullable ( id ) ; $F597 case INT : val = reader . readIntNullable ( id ) ; $F597 case LONG : val = reader . readLongNullable ( id ) ; $F597 case FLOAT : val = reader . readFloatNullable ( id ) ; $F597 case DOUBLE : val = reader . readDoubleNullable ( id ) ; $F597 case CHAR : val = reader . readCharNullable ( id ) ; $F597 case BOOLEAN : val = reader . readBooleanNullable ( id ) ; $F597 case DECIMAL : val = reader . readDecimal ( id ) ; $F597 $F1262 val = reader . readString ( id ) ; $F597 case UUID : val = reader . readUuid ( id ) ; $F597 case DATE : val = reader . readDate ( id ) ; $F597 case TIMESTAMP : val = reader . readTimestamp ( id ) ; $F597 case BYTE_ARR : val = reader . readByteArray ( id ) ; $F597 case SHORT_ARR : val = reader . readShortArray ( id ) ; $F597 case INT_ARR : val = reader . readIntArray ( id ) ; $F597 case LONG_ARR : val = reader . readLongArray ( id ) ; $F597 case FLOAT_ARR : val = reader . readFloatArray ( id ) ; $F597 case DOUBLE_ARR : val = reader . readDoubleArray ( id ) ; $F597 case CHAR_ARR : val = reader . readCharArray ( id ) ; $F597 case BOOLEAN_ARR : val = reader . readBooleanArray ( id ) ; $F597 case DECIMAL_ARR : val = reader . readDecimalArray ( id ) ; $F597 case NUM00 <missing ';'> _ARR : val = reader . readStringArray ( id ) ; $F597 case UUID_ARR : val = reader . readUuidArray ( id ) ; $F597 case DATE_ARR : val = reader . readDateArray ( id ) ; $F597 case TIMESTAMP_ARR : val = reader . readTimestampArray ( id ) ; $F597 case OBJECT_ARR : val = reader . readObjectArray ( id ) ; $F597 case COL : val = reader . readCollection ( id , null ) ; $F597 case MAP : val = reader . readMap ( id , null ) ; $F597 case BINARY_OBJ : val = reader . readBinaryObject ( id ) ; $F597 case ENUM : val = reader . readEnum ( id , field . getType ( ) ) ; $F597 case ENUM_ARR : val = reader . readEnumArray ( id , field . getType ( ) . getComponentType ( ) ) ; $F597 case BINARY : case OBJECT : val = reader . readObject ( id ) ; $F597 case CLASS : val = reader . readClass ( id ) ; $F597 default : assert _BOOL : NUM00 + mode ; } return val ;
protected void processPlayRequest $F72 { tryToGetAudioFocus ( ) ; if ( mState == State . STOPPED ) $F5795 ( playMedia ) else if ( mState == State . PAUSED ) { mState = State . PLAYING ; setUpAsForeground ( String . format ( getString ( R . string . media_state_playing ) , mFile . getFileName ( ) ) ) ; configAndStartMediaPlayer ( ) ; } }
$F1431 public static $F4203 int binarySearch ( List $F10049 list , T object , $F38875 ( comparator ) ) { if ( comparator == null ) { return Collections . binarySearch ( ( List < ? extends $F25280 > ) list , object ) ; } if ( ! ( list instanceof RandomAccess ) ) { ListIterator $F10049 it = list . listIterator ( ) ; while $F2921 ( it ) { int result ; if ( ( result = - comparator . compare ( it . next ( ) , object ) ) <= NUM00 ) { if ( result == NUM00 ) { return it . previousIndex ( ) ; } return - it . previousIndex ( ) - NUM00 ; } } return - list . size ( ) - NUM00 ; } int low = NUM00 , mid = list . size ( ) , high = mid - NUM00 , result = - NUM00 ; while ( low <= high ) { mid = ( low + high ) > > NUM00 ; if ( ( result = - comparator . compare ( list . get ( mid ) , object ) ) > NUM00 ) { low = mid + NUM00 ; } else if ( result == NUM00 ) { return mid ; } else { high = mid - NUM00 ; } } return - mid - ( result < NUM00 ? NUM00 : NUM00 ) ; }
public void finish $F72 { m_bias = NUM00 ; $F1206 ( m_out ) }
$F1 public Vector whatCanGoHere $F23416 ( state ) { $F6518 ( ret ) for ( $F119 ( i , fNumElements ) ) { if ( state [ i + NUM00 ] == STATE_START ) $F15869 ( ret , fAllElements , i ) } return ret ; }
public void remove ( RegionEntry entry , Object value ) { $F16628 ( object , map , entry ) $F8249 ( object ) if ( object instanceof Collection ) { Collection coll = ( Collection ) object ; boolean removed = _BOOL ; if ( useList ) { synchronized ( coll ) { removed = coll . remove ( value ) ; } } else { removed = coll . remove ( value ) ; } if ( removed ) { if $F10471 ( coll ) $F106 ( map , entry ) atomicUpdater . decrementAndGet ( this ) ; } } else { if $F1238 ( object , value ) $F106 ( map , entry ) atomicUpdater . decrementAndGet ( this ) ; } }
private HashDataCache ( DataCache < Pair $F94549 > cache , String algorithm ) { this . cache = cache ; this . algorithm = algorithm ; try { MessageDigest . getInstance ( algorithm ) ; } catch ( NoSuchAlgorithmException e ) { String msg = NUM00 + algorithm ; LOG . warn ( msg , e ) ; throw new SystemConfigException ( e ) ; } }
private void marshallEnum ( Object value , EnumType enumType ) throws IOException { $F39971 ( LOG , value , enumType ) jsonGenerator . writeString ( value . toString ( ) ) ; }
public CholeskyDecomposition ( Matrix Arg ) { $F3791 ( A , Arg ) $F323738 ( n , Arg ) $F10226 ( L , n ) isspd = ( Arg . getColumnDimension ( ) == n ) ; for ( $F119 ( j , n ) ) { $F42658 ( Lrowj , L , j ) double d = NUM00 ; for ( $F119 ( k , j ) ) { $F42658 ( Lrowk , L , k ) double s = NUM00 ; for ( $F119 ( i , k ) ) $F323742 ( s , Lrowk , i , Lrowj ) Lrowj [ k ] = s = ( A [ j ] [ k ] - s ) / L [ k ] [ k ] ; d = d + s * s ; isspd = isspd & ( A [ k ] [ j ] == A [ j ] [ k ] ) ; } d = A [ j ] [ j ] - d ; isspd = isspd & ( d > NUM00 ) ; L [ j ] [ j ] = Math . sqrt ( Math . max ( d , NUM00 ) ) ; for ( $F2634 ( k , j , n ) ) $F211213 ( L , j , k ) } }
private void initEvents $F72 { setSelectionSounds ( play , hScore , credits , quit , quitY , quitN ) ; play . setOnAction ( null ) ; hScore . setOnAction ( null ) ; credits . setOnAction ( null ) ; quit . setOnAction ( null ) ; quitY . setOnAction ( null ) ; quitN . setOnAction ( null ) ; scene . setOnKeyPressed ( null ) ; scene . setOnKeyReleased ( null ) ; }
public static boolean isFileTypeSupported ( int fileType , Sequence sequence ) { List providers = getMidiFileWriters ( ) ; for ( $F2277 ( i , providers ) ) { MidiFileWriter writer = ( MidiFileWriter ) providers . get ( i ) ; if $F317110 ( writer , fileType , sequence ) { return _BOOL ; } } return _BOOL ; }
public $F96 windowNaf ( byte width , BigInteger k ) { $F96 wnaf = new byte [ $F75212 ( k ) ] ; short pow2wB = ( short ) ( NUM00 < < width ) ; $F2544 ( pow2wBI , BigInteger , pow2wB ) int i = NUM00 ; int length = NUM00 ; while ( k . signum ( ) > NUM00 ) { if $F310329 ( k ) { BigInteger remainder = k . mod ( pow2wBI ) ; if ( remainder . testBit ( width - NUM00 ) ) { wnaf [ i ] = ( byte ) ( remainder . intValue ( ) - pow2wB ) ; } else { wnaf [ i ] = ( byte ) remainder . intValue ( ) ; } k = k . subtract ( BigInteger . valueOf ( wnaf [ i ] ) ) ; length = i ; } else $F5629 ( wnaf , i ) k = k . shiftRight ( NUM00 ) ; i ++ ; } length ++ ; $F2175 ( wnafShort , length ) $F135 ( System , wnaf , wnafShort , length ) return wnafShort ; }
private String mapCollectionName ( String collectionName , boolean dest ) { if ( $F10471 ( collectionRules ) && $F7283 ( StringUtils , defaultCollectionAppend ) ) { return collectionName ; } for ( $F806 rule : collectionRules ) { String match = ( dest ) ? rule [ NUM00 ] : rule [ NUM00 ] ; String replace = ( dest ) ? rule [ NUM00 ] : rule [ NUM00 ] ; if $F105 ( collectionName , match ) { return collectionName . replace ( match , replace ) ; } } if ( dest ) { return collectionName + defaultCollectionAppend ; } else { return collectionName . replace ( defaultCollectionAppend , NUM00 ) ; } }
$F30954 ( putLock , takeLock )
static public void fillRandomIntegerUniform ( IDoubleVector vec , Random rand , int min , int max ) { final int delta = max - min ; for ( $F184528 ( i , vec ) ) { vec . set ( i , min + rand . nextInt ( delta ) ) ; } }
$F243654 ( Arrays , data )
private static void stoppingAnimation ( Thread me ) { final FetcherInfo info = FetcherInfo . getFetcherInfo ( ) ; synchronized ( info . waitList ) { int index = - NUM00 ; for ( int i = NUM00 ; i < info . fetchers . length ; i ++ ) { if ( info . fetchers [ i ] == me ) $F932 if ( info . fetchers [ i ] == null ) { index = i ; } } if ( index >= NUM00 ) { info . fetchers [ index ] = me ; info . numFetchers ++ ; $F145048 ( me , index ) $F665 } } }
public boolean name_is_equal ( String p_name ) { $F397 ( p_name , _BOOL ) $F84030 ( p_name , pkg_name ) }
protected void drawRangeMarkers ( Graphics2D g2 , Rectangle2D dataArea , int index , Layer layer ) { XYItemRenderer r = getRenderer ( index ) ; $F2329 ( r ) if ( index >= getDatasetCount ( ) ) $F932 Collection markers = getRangeMarkers ( index , layer ) ; ValueAxis axis = getRangeAxisForDataset ( index ) ; if ( markers != null && axis != null ) { $F19402 ( iterator , markers ) while $F2921 ( iterator ) { Marker marker = ( Marker ) iterator . next ( ) ; r . drawRangeMarker ( g2 , this , axis , marker , dataArea ) ; } } }
static $F96 decryptData $F7233 ( password , encryptedData ) { try { $F156 ( c , Cipher , ENCRYPT_DATA_ALGORITHM ) $F94768 ( c , Cipher , password , SECRET_KEY_ALGORITHM , CBC_SALT_DATA ) $F157 ( c , encryptedData ) } catch ( Exception e ) { throw new IllegalStateException ( ENCRYPT_DATA_ALGORITHM + NUM00 , e ) ; } }
public VPFLayer $F72 { setProjectionChangePolicy ( new com . bbn . openmap . layer . policy . ListResetPCPolicy ( this ) ) ; setMouseModeIDsForEvents ( $F21904 ) ; }
private void emitCode $F72 { $F23313 worklist = new $F23313 $F72 ; worklist . add ( new Instantiation ( null , mainSubroutine ) ) ; InsnList newInstructions = new InsnList $F72 ; $F23328 newTryCatchBlocks = new ArrayList < TryCatchBlockNode > $F72 ; List $F23335 newLocalVariables = new ArrayList $F23335 $F72 ; while $F5973 ( worklist ) { Instantiation inst = worklist . removeFirst ( ) ; emitSubroutine ( inst , worklist , newInstructions , newTryCatchBlocks , newLocalVariables ) ; } instructions = newInstructions ; tryCatchBlocks = newTryCatchBlocks ; localVariables = newLocalVariables ; }
protected boolean shouldClose ( PooledConnection con , int action ) { if ( con . getConnectionVersion ( ) < getPoolVersion ( ) ) return _BOOL ; if ( con . isDiscarded ( ) ) return _BOOL ; if ( isClosed ( ) ) return _BOOL ; if ( ! con . validate ( action ) ) return _BOOL ; $F2014 ( terminateTransaction , con , _BOOL ) if ( con . isMaxAgeExpired ( ) ) return _BOOL ; else return _BOOL ; }
public Vector3D hsl $F72 { float r = redf ( ) ; float g = greenf ( ) ; float b = bluef ( ) ; float min = Math . min ( Math . min ( r , g ) , b ) ; float max = Math . max ( Math . max ( r , g ) , b ) ; float l = lighting ( min , max ) ; float s = saturation ( min , max , l ) ; float h = hue ( r , g , b , min , max ) ; return new Vector3D ( h , s , l ) ; }
public Future $F19437 shutdownAwaiting ( long timeoutForEach ) { ExecutorService executor = Executors . newScheduledThreadPool ( NUM00 ) ; return executor . submit ( createShutdown ( timeoutForEach ) ) ; }
public boolean isUnused $F72 { return ( numEntries < NUM00 ) && waitingThreads . isEmpty ( ) ; }
public void changeDirectory ( String path ) throws IllegalStateException , IOException , FTPIllegalReplyException , FTPException { synchronized ( lock ) { $F34216 ( connected ) $F34216 ( authenticated ) $F158032 ( communication , path ) $F73871 ( r , communication ) touchAutoNoopTimer ( ) ; $F73876 ( r ) } }
private String removeQuote ( String column ) { return column != null ? column . replaceAll ( statementBuilder . getColumnQuote ( ) , StringUtils . EMPTY ) : null ; }
private boolean scrolledUpTimeout $F72 { if ( fixedChat || pauseKeyPressed ) { return _BOOL ; } if ( ! styles . autoScroll ( ) ) { return _BOOL ; } $F5740 ( timePassed , System , lastChanged ) if ( timePassed > NUM00 * styles . autoScrollTimeout ( ) ) { $F9472 ( LOGGER , timePassed ) return _BOOL ; } return _BOOL ; }
$F100892 ( zzStartRead , System , zzBuffer , zzEndRead , zzCurrentPos , zzMarkedPos , newBuffer , numRead , zzReader , _BOOL , c )
public List < Document > search ( Query query , boolean prefixWildCard ) { List < Document > documents = new ArrayList < Document > $F72 ; try { IndexSearcher searcher = getSearcher ( ) ; TopDocs search = searcher . search ( query , NUM00 ) ; for ( ScoreDoc scoreDoc : search . scoreDocs ) { Document doc = searcher . doc ( scoreDoc . doc ) ; documents . add ( doc ) ; } } catch ( Exception e ) { $F301 ( e ) $F5301 ( e ) } return documents ; }
public void writeListEnd $F72 throws IOException $F12032 ( os )
public static $F15367 childElementList ( Element element , $F2689 childElementNames ) { $F1275 ( element ) $F15375 ( elements ) $F397 ( childElementNames , elements ) $F15376 ( node , element ) if ( node != null ) { do { if ( $F15377 ( node , Node ) && childElementNames . contains ( node . getNodeName ( ) ) ) $F15383 ( childElement , node , elements ) } while $F15388 ( node ) ; } return elements ; }
protected synchronized $F96 engineGenerateSeed ( int numBytes ) { $F96 myBytes ; if ( numBytes < NUM00 ) { throw new NegativeArraySizeException $F59159 ( Integer , numBytes ) ; } if ( numBytes == NUM00 ) { return EmptyArray . BYTE ; } if ( myRandom == null ) { myRandom = new SHA1PRNG_SecureRandomImpl $F72 ; myRandom . engineSetSeed ( getRandomBytes ( DIGEST_LENGTH ) ) ; } $F1325 ( myBytes , numBytes ) myRandom . engineNextBytes ( myBytes ) ; return myBytes ; }
public String numArcsTipText $F72 $F2455
$F52843 ( packed , map , i , j , count , value )
@ RequestMapping ( $F3144 , method = { RequestMethod . GET } ) $F4586 public List < JobInstance > list ( JobListRequest jobRequest ) { List < JobInstance > jobInstanceList = Collections . emptyList ( ) ; List < JobStatusEnum > statusList = new ArrayList < JobStatusEnum > $F72 ; if ( null != jobRequest . getStatus ( ) ) { for ( int status : jobRequest . getStatus ( ) ) { statusList . add ( JobStatusEnum . getByCode ( status ) ) ; } } JobTimeFilterEnum timeFilter = JobTimeFilterEnum . getByCode ( jobRequest . getTimeFilter ( ) ) ; try { jobInstanceList = jobService . listAllJobs ( jobRequest . getCubeName ( ) , jobRequest . getProjectName ( ) , statusList , jobRequest . getLimit ( ) , jobRequest . getOffset ( ) , timeFilter ) ; } catch ( Exception e ) { logger . error ( $F108155 ( e ) ) ; throw new InternalErrorException ( e ) ; } return jobInstanceList ; }
public $F96 toBinary ( int q ) { return ArrayEncoder . encodeModQ ( coeffs , q ) ; }
$F13429 ( criteria , createCriteriaInternal , oredCriteria )
public final void openFallbackInputStream $F72 throws DataFallbackException { if ( inputBuf == null ) { if $F585 ( LOG ) LOG . debug ( $F2990 ( dataFile ) ) ; try { setInput ( new BufferedReader $F434 ( dataFile ) ) ; } catch ( IOException e ) { throw new DataFallbackException $F1783 ( e ) ; } } }
public void addCaretListener ( final ICaretListener listener ) { $F1832 ( Preconditions , listener ) $F2201 ( m_listeners , listener ) }
$F1309 static public SerialSensorManager instance $F72 $F1337
public void testIsCurrency $F72 { try { assertFalse ( rsmd . isCurrency ( NUM00 ) ) ; } $F125502 ( fail , e1 ) try { rsmd . isCurrency ( NUM00 ) ; fail ( NUM00 ) ; } $F31184 try { rsmd . isCurrency ( NUM00 ) ; fail ( NUM00 ) ; } $F31184 try { $F59 ( rs ) rsmd . isCurrency ( NUM00 ) ; fail ( NUM00 ) ; } $F31184 }
public String encodeBuffer $F183442 { $F1538 ( outStream ) $F5950 ( inStream , aBuffer ) try { encodeBuffer ( inStream , outStream ) ; } $F183443 $F27059 ( outStream ) }
void checkFrameValue ( final Object value ) { if ( value == Opcodes . TOP || value == Opcodes . INTEGER || value == Opcodes . FLOAT || value == Opcodes . LONG || value == Opcodes . DOUBLE || value == Opcodes . NULL || value == Opcodes . UNINITIALIZED_THIS ) $F932 if ( value instanceof String ) { checkInternalName ( ( String ) value , NUM00 ) ; $F665 } if ( ! ( value instanceof Label ) ) $F18931 ( value ) else { usedLabels . add ( ( Label ) value ) ; } }
public void test_ConstructorIIIII $F72 { Date d1 = new Date ( NUM00 , NUM00 , NUM00 , NUM00 , NUM00 ) ; Date d2 = new Date ( NUM00 + d1 . getTimezoneOffset ( ) * NUM00 * NUM00 + $F264 + NUM00 * NUM00 ) ; $F114430 ( assertTrue , d1 , d2 ) }
protected void pushBidirectionalVipRoutes ( IOFSwitch sw , OFPacketIn pi , FloodlightContext cntx , IPClient client , LBMember member ) { IDevice srcDevice = null ; IDevice dstDevice = null ; Collection < ? extends IDevice > allDevices = deviceManager . getAllDevices ( ) ; for ( IDevice d : allDevices ) { for ( int j = NUM00 ; j < d . getIPv4Addresses ( ) . length ; j ++ ) { if ( srcDevice == null && client . ipAddress == d . getIPv4Addresses ( ) [ j ] ) srcDevice = d ; if ( dstDevice == null && member . address == d . getIPv4Addresses ( ) [ j ] ) { dstDevice = d ; member . macString = dstDevice . getMACAddressString ( ) ; } if ( srcDevice != null && dstDevice != null ) $F597 } } $F57400 ( srcDevice , dstDevice ) Long srcIsland = topology . getL2DomainId ( sw . getId ( ) ) ; if ( srcIsland == null ) { log . debug ( NUM00 , sw . getStringId ( ) , pi . getInPort ( ) ) ; $F665 } boolean on_same_island = _BOOL ; boolean on_same_if = _BOOL ; for ( SwitchPort dstDap : dstDevice . getAttachmentPoints ( ) ) { long dstSwDpid = dstDap . getSwitchDPID ( ) ; Long dstIsland = topology . getL2DomainId ( dstSwDpid ) ; if $F16836 ( dstIsland , srcIsland ) { on_same_island = _BOOL ; if ( ( sw . getId ( ) == dstSwDpid ) && ( pi . getInPort ( ) == dstDap . getPort ( ) ) ) { on_same_if = _BOOL ; } $F597 } } if ( ! on_same_island ) { if $F8415 ( log ) { log . trace ( NUM00 + NUM00 , dstDevice ) ; } $F665 } if ( on_same_if ) { if $F8415 ( log ) { log . trace ( NUM00 + NUM00 , sw . toString ( ) , pi . getInPort ( ) ) ; } $F665 } SwitchPort [ ] srcDaps = srcDevice . getAttachmentPoints ( ) ; Arrays . sort ( srcDaps , clusterIdComparator ) ; SwitchPort [ ] dstDaps = dstDevice . getAttachmentPoints ( ) ; Arrays . sort ( dstDaps , clusterIdComparator ) ; int iSrcDaps = NUM00 , iDstDaps = NUM00 ; while ( ( iSrcDaps < srcDaps . length ) && ( iDstDaps < dstDaps . length ) ) { SwitchPort srcDap = srcDaps [ iSrcDaps ] ; SwitchPort dstDap = dstDaps [ iDstDaps ] ; Long srcCluster = topology . getL2DomainId ( srcDap . getSwitchDPID ( ) ) ; Long dstCluster = topology . getL2DomainId ( dstDap . getSwitchDPID ( ) ) ; $F58436 ( srcVsDest , srcCluster , dstCluster ) if ( srcVsDest == NUM00 ) { if ( ! srcDap . equals ( dstDap ) && ( srcCluster != null ) && ( dstCluster != null ) ) { Route routeIn = routingEngine . getRoute ( srcDap . getSwitchDPID ( ) , ( short ) srcDap . getPort ( ) , dstDap . getSwitchDPID ( ) , ( short ) dstDap . getPort ( ) , NUM00 ) ; Route routeOut = routingEngine . getRoute ( dstDap . getSwitchDPID ( ) , ( short ) dstDap . getPort ( ) , srcDap . getSwitchDPID ( ) , ( short ) srcDap . getPort ( ) , NUM00 ) ; if ( routeIn != null ) { pushStaticVipRoute ( _BOOL , routeIn , client , member , sw . getId ( ) ) ; } if ( routeOut != null ) { pushStaticVipRoute ( _BOOL , routeOut , client , member , sw . getId ( ) ) ; } } iSrcDaps ++ ; iDstDaps ++ ; } else if ( srcVsDest < NUM00 ) { iSrcDaps ++ ; } else { iDstDaps ++ ; } } $F665 }
public static String parseIdFromSameDocumentURI ( String uri ) { if $F1277 ( uri ) $F1337 $F28924 ( id , uri ) if $F147883 ( id ) { $F1384 ( i1 , id ) $F50298 ( i2 , id , i1 ) id = id . substring ( i1 + NUM00 , i2 ) ; } return id ; }
public void markUsed ( long pos , int length ) { int start = getBlock ( pos ) ; int blocks = getBlockCount ( length ) ; set . set ( start , start + blocks ) ; }
public CholMatrix ( Matrix Arg ) { final $F3789 A = Arg . toDoubleArray ( ) ; n = ( int ) Arg . getRowCount ( ) ; $F10226 ( L , n ) isspd = ( Arg . getColumnCount ( ) == n ) ; $F69807 ( Lrowj ) $F69807 ( Lrowk ) $F69807 ( Aj ) for ( $F119 ( j , n ) ) { Lrowj = L [ j ] ; Aj = A [ j ] ; double d = NUM00 ; for ( $F119 ( k , j ) ) { Lrowk = L [ k ] ; double s = NUM00 ; for ( $F119 ( i , k ) ) $F323742 ( s , Lrowk , i , Lrowj ) Lrowj [ k ] = s = ( Aj [ k ] - s ) / Lrowk [ k ] ; d = d + s * s ; isspd = isspd & ( A [ k ] [ j ] == Aj [ k ] ) ; } d = Aj [ j ] - d ; isspd = isspd & ( d > NUM00 ) ; Lrowj [ j ] = Math . sqrt ( Math . max ( d , NUM00 ) ) ; for ( $F2634 ( k , j , n ) ) $F5629 ( Lrowj , k ) } }
public static String readStringNZ ( Memory mem , int address , int n ) { address &= Memory . addressMask ; if ( address + n > MemoryMap . END_RAM ) { n = MemoryMap . END_RAM - address + NUM00 ; $F17370 ( n ) } $F96 bytes = new byte [ Math . min ( n , NUM00 ) ] ; int length = NUM00 ; IMemoryReader memoryReader = MemoryReader . getMemoryReader ( address , n , NUM00 ) ; for ( ; n > NUM00 ; n -- ) { int b = memoryReader . readNext ( ) ; $F7256 ( b ) if ( length >= bytes . length ) { $F64222 ( newBytes , bytes ) $F7057 ( System , bytes , newBytes ) bytes = newBytes ; } $F8214 ( bytes , length , b ) length ++ ; } return new String ( bytes , NUM00 , length , Constants . charset ) ; }
static boolean shiftRight ( $F2027 result , int resultLen , $F2027 source , int intCount , int count ) { int i ; boolean allZero = _BOOL ; for ( i = NUM00 ; i < intCount ; i ++ ) allZero &= source [ i ] == NUM00 ; if ( count == NUM00 ) $F21536 ( System , source , intCount , result , resultLen , i ) else { int leftShiftCount = NUM00 - count ; allZero &= ( source [ i ] < < leftShiftCount ) == NUM00 ; for ( $F35846 ( i , resultLen ) ) { result [ i ] = $F35847 ( source , i , intCount , count ) | ( source [ i + intCount + NUM00 ] < < leftShiftCount ) ; } result [ i ] = $F35847 ( source , i , intCount , count ) ; i ++ ; } return allZero ; }
$F1 public void agg ( Object newVal ) { valueSet . add ( newVal instanceof Long ? ( Long ) newVal : $F173338 ( Long , newVal ) ) ; firstTime = _BOOL ; }
private boolean removeLegionMember $F7613 ( charName , kick , playerName ) { LegionMemberEx legionMember = getLegionMemberEx ( charName ) ; if ( legionMember == null ) $F124420 ( log , charName , _BOOL ) deleteLegionMemberFromDB ( legionMember ) ; Player player = world . findPlayer ( charName ) ; if ( player != null ) { PacketSendUtility . broadcastPacket ( player , new SM_LEGION_UPDATE_TITLE ( player . getObjectId ( ) , NUM00 , NUM00 , NUM00 ) , _BOOL ) ; } if ( kick ) { PacketSendUtility . broadcastPacketToLegion ( legionMember . getLegion ( ) , new SM_LEGION_LEAVE_MEMBER ( NUM00 , legionMember . getObjectId ( ) , playerName , legionMember . getName ( ) ) ) ; } else { PacketSendUtility . broadcastPacketToLegion ( legionMember . getLegion ( ) , new SM_LEGION_LEAVE_MEMBER ( NUM00 , legionMember . getObjectId ( ) , charName ) ) ; } return _BOOL ; }
synchronized void printBuffer $F72 throws IOException { $F1749 ( len , sb ) if ( len > NUM00 ) { $F18064 ( chars , len ) $F16116 ( sb , len , chars ) $F4910 ( sb ) $F17918 ( super , chars ) } }
$F97565 ( value , pattern , locale , calendar , format , _BOOL , fail , e )
public boolean containsBafBody $F72 { Iterator $F69372 methodIt = methodIterator ( ) ; while $F2921 ( methodIt ) { SootMethod m = methodIt . next ( ) ; if ( m . hasActiveBody ( ) && m . getActiveBody ( ) instanceof soot . baf . BafBody ) { return _BOOL ; } } return _BOOL ; }
public static String retainAllChars ( String str , String retainChars ) { int pos = indexOfChars ( str , retainChars ) ; if ( pos == - NUM00 ) $F2455 $F83 ( buf ) do { $F4137 ( buf , str , pos ) pos = indexOfChars ( str , retainChars , pos + NUM00 ) ; } while ( pos != - NUM00 ) ; $F92 ( buf ) }
public synchronized void deleteLeastUsedConnection $F72 { final HttpConnection connection = ( HttpConnection ) freeConnections . removeFirst ( ) ; if ( connection != null ) { deleteConnection ( connection ) ; } else $F35060 ( LOG ) }
private int binarySearch ( T x , int from , int to ) { while ( from <= to ) { $F41176 ( m , from , to ) if ( comp . compare ( x , data [ m ] ) >= NUM00 ) { from = m + NUM00 ; } else { to = m - NUM00 ; } } return from ; }
private TransitSchedule cleanUpSchedule ( TransitSchedule newTransitSchedule ) { newTransitSchedule = TransitScheduleCleaner . removeRoutesWithoutDepartures ( newTransitSchedule ) ; newTransitSchedule = TransitScheduleCleaner . removeEmptyLines ( newTransitSchedule ) ; newTransitSchedule = TransitScheduleCleaner . removeStopsNotUsed ( newTransitSchedule ) ; return newTransitSchedule ; }
protected static boolean match ( Object ref , Object test ) { $F1933 ( ref , _BOOL ) $F3627 ( ref , test , _BOOL ) if ( ref instanceof LabelList && test instanceof LabelList ) { final LabelList lref = ( LabelList ) ref ; final LabelList ltest = ( LabelList ) test ; final int s1 = lref . size ( ) , s2 = ltest . size ( ) ; if ( s1 == NUM00 || s2 == NUM00 ) { return _BOOL ; } for ( $F119 ( i , s1 ) ) { $F1729 ( l1 , lref , i ) $F4322 ( l1 ) for ( $F119 ( j , s2 ) ) { if ( $F115302 ( l1 , ltest , j ) ) { return _BOOL ; } } } } $F1964 ( ref , test ) }
private boolean step1 $F72 { $F397 ( CT , _BOOL ) if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { $F373826 ( CT , replaceSuffix ) return _BOOL ; } if $F45145 ( CT ) { if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { replaceSuffix ( CT , NUM00 , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { $F373826 ( CT , replaceSuffix ) return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R1 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } } if $F45145 ( CT ) { if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { $F373826 ( CT , replaceSuffix ) return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { $F373826 ( CT , replaceSuffix ) return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { $F373826 ( CT , replaceSuffix ) return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } } if $F45145 ( CT ) { if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( RV , NUM00 ) && suffixPreceded ( CT , NUM00 , NUM00 ) ) { $F373826 ( CT , replaceSuffix ) return _BOOL ; } } if $F45145 ( CT ) { if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( R2 , NUM00 ) ) { CT = removeSuffix ( CT , NUM00 ) ; return _BOOL ; } if ( suffix ( CT , NUM00 ) && suffix ( RV , NUM00 ) && suffixPreceded ( CT , NUM00 , NUM00 ) ) { $F373826 ( CT , replaceSuffix ) return _BOOL ; } } return _BOOL ; }
$F146067 ( zzBuffer , zzStartRead , zzMarkedPos )
public String patch_toText ( List $F89473 patches ) { $F83 ( text ) for ( Patch aPatch : patches ) $F288 ( text , aPatch ) $F92 ( text ) }
void close ( int contextPrec , int ownPrec ) throws IOException { if ( ownPrec < contextPrec ) $F3410 ( out ) }
private void validateSortSize $F72 { String sortSizeStr = carbonProperties . getProperty ( CarbonCommonConstants . SORT_SIZE , CarbonCommonConstants . SORT_SIZE_DEFAULT_VAL ) ; try { $F27213 ( sortSize , Integer , sortSizeStr ) if ( sortSize < CarbonCommonConstants . SORT_SIZE_MIN_VAL ) { LOGGER . info ( NUM00 + sortSizeStr + NUM00 + CarbonCommonConstants . SORT_SIZE_DEFAULT_VAL ) ; carbonProperties . setProperty ( CarbonCommonConstants . SORT_SIZE , CarbonCommonConstants . SORT_SIZE_DEFAULT_VAL ) ; } } catch ( NumberFormatException e ) { LOGGER . info ( NUM00 + sortSizeStr + NUM00 + CarbonCommonConstants . SORT_SIZE_DEFAULT_VAL ) ; carbonProperties . setProperty ( CarbonCommonConstants . SORT_SIZE , CarbonCommonConstants . SORT_SIZE_DEFAULT_VAL ) ; } }
public void finishPainting ( boolean useCache ) { DataBufferInt dataBuffer = new DataBufferInt ( w0 * h0 ) ; int transparency = nativeFinishPainting ( SunWritableRaster . stealData ( dataBuffer , NUM00 ) , w0 , h0 ) ; SunWritableRaster . markDirty ( dataBuffer ) ; $F2027 bands = BAND_OFFSETS [ transparency - NUM00 ] ; WritableRaster raster = Raster . createPackedRaster ( dataBuffer , w0 , h0 , w0 , bands , null ) ; ColorModel cm = COLOR_MODELS [ transparency - NUM00 ] ; Image img = new BufferedImage ( cm , raster , _BOOL , null ) ; if ( useCache ) { cache . setImage ( getClass ( ) , null , w0 , h0 , cacheArgs , img ) ; } $F108383 ( graphics , img , x0 , y0 ) }
public boolean deletePanel $F72 { if ( ! super . deletePanel ( ) ) { return _BOOL ; } $F725 ( turnoutList ) $F725 ( trackList ) $F725 ( pointList ) $F725 ( xingList ) $F725 ( slipList ) $F725 ( turntableList ) return _BOOL ; }
$F1 default CompletableFuture < OptionalDouble > averageDouble ( final ToDoubleFunction $F11632 fn ) $F257945 ( CompletableFuture , getExec )
public String next $F72 $F4915 ( next , ANY_PATTERN )
public XercesHTMLDocumentBuilderFactory $F230110 ( settings ) throws DOMTestIncompatibleException { super ( settings ) ; try { $F50403 ( classLoader , ClassLoader ) $F198604 ( htmlBuilderClass , classLoader ) htmlBuilderConstructor = htmlBuilderClass . getConstructor ( NO_CLASSES ) ; $F18553 ( getHTMLDocumentMethod , htmlBuilderClass , NO_CLASSES ) $F198604 ( htmlDOMImpl , classLoader ) Method method = htmlDOMImpl . getMethod ( NUM00 , NO_CLASSES ) ; domImpl = ( DOMImplementation ) method . invoke ( null , NO_OBJECTS ) ; $F198604 ( saxFactoryClass , classLoader ) factory = ( SAXParserFactory ) saxFactoryClass . newInstance ( ) ; } catch ( InvocationTargetException ex ) { throw new DOMTestIncompatibleException ( ex . getTargetException ( ) , null ) ; } catch ( Exception ex ) $F349675 ( ex ) if ( settings != null ) { for ( $F1139 ( i , settings ) ) $F845 } try { factory . newSAXParser ( ) ; } catch ( ParserConfigurationException ex ) $F349675 ( ex ) catch ( SAXException ex ) $F349675 ( ex ) }
$F1 public final String toString $F72 { StringBuilder cab = new StringBuilder ( NUM00 + getHopCount ( ) * NUM00 ) ; $F84 ( cab ) if ( this . localAddress != null ) { cab . append ( this . localAddress ) ; $F84 ( cab ) } $F84 ( cab ) if ( this . tunnelled == TunnelType . TUNNELLED ) $F84 ( cab ) if ( this . layered == LayerType . LAYERED ) $F84 ( cab ) if ( this . secure ) $F84 ( cab ) $F84 ( cab ) if ( this . proxyChain != null ) { for ( HttpHost aProxyChain : this . proxyChain ) $F444 ( cab , aProxyChain ) } cab . append ( this . targetHost ) ; $F84 ( cab ) $F92 ( cab ) }
$F4486 ( type , outputStack , n , outputStackTop , t , Math , System , top , owner )
public Macro ( File file ) throws EOFException , FileNotFoundException , IOException { $F2218 ( dbf , DocumentBuilderFactory ) DocumentBuilder db = null ; Document doc = null ; try { $F6281 ( db , dbf ) InputSource is = new InputSource ( new UnicodeReader $F113801 ( file , FILE_ENCODING ) ) ; is . setEncoding ( FILE_ENCODING ) ; doc = db . parse ( is ) ; } catch ( Exception e ) { $F301 ( e ) $F105671 ( desc , e ) if ( desc == null ) $F84156 ( desc , e ) $F3495 ( desc ) } $F13241 ( macroRecords ) boolean parsedOK = initializeFromXMLFile ( doc . getDocumentElement ( ) ) ; if ( parsedOK == _BOOL ) { name = null ; $F725 ( macroRecords ) macroRecords = null ; $F3575 } }
public static void deleteESInput $F72 { String esPIRIndex = SystemConfiguration . getProperty ( DistributedTestDriver . ES_INPUT_NODES_PROPERTY ) + NUM00 + SystemConfiguration . getProperty ( DistributedTestDriver . ES_INPUT_PORT_PROPERTY ) + NUM00 + SystemConfiguration . getProperty ( DistributedTestDriver . ES_INPUT_INDEX_PROPERTY ) ; $F556 ( logger , esPIRIndex ) ProcessBuilder pDeletePIR = new ProcessBuilder ( NUM00 , NUM00 , esPIRIndex ) ; try { TestUtils . executeCommand ( pDeletePIR ) ; $F973 ( logger ) } $F12241 ( e ) }
private boolean add ( int part ) { if $F2200 ( parts , part ) $F18637 ( parts , part , _BOOL ) return _BOOL ; }
private void terminateAndWaitFsyncService $F72 throws Exception { if ( fsyncService . isTerminated ( ) ) $F665 $F733 ( fsyncService ) $F735 ( fsyncService , TimeUnit ) Exception fsyncExceptionCopy = fsyncException ; $F84834 ( fsyncExceptionCopy ) }
private Location findFarthestLocation ( Location location , Direction direction ) { Location farthest ; do { farthest = location ; location = farthest . offset ( direction ) ; } while ( gridOperator . isValidLocation ( location ) && gameGrid . get ( location ) == null ) ; return farthest ; }
public static int computeMinImageSampleSize ( ImageSize srcSize ) { $F2049 ( srcWidth , srcSize ) $F2047 ( srcHeight , srcSize ) $F2049 ( targetWidth , maxBitmapSize ) $F2047 ( targetHeight , maxBitmapSize ) int widthScale = ( int ) Math . ceil ( ( float ) srcWidth / targetWidth ) ; int heightScale = ( int ) Math . ceil ( ( float ) srcHeight / targetHeight ) ; $F85710 ( Math , widthScale , heightScale ) }
private JSplitPane createMainSplitPane $F72 { final JSplitPane mainSplitPane = new JSplitPane $F72 ; mainSplitPane . setOneTouchExpandable ( _BOOL ) ; mainSplitPane . setDividerLocation ( NUM00 ) ; $F242063 ( mainSplitPane ) mainSplitPane . setOrientation ( JSplitPane . HORIZONTAL_SPLIT ) ; $F301047 ( m_componentPanel , Color ) mainSplitPane . setLeftComponent ( createProjectTreePanel ( ) ) ; mainSplitPane . setRightComponent ( m_componentPanel ) ; mainSplitPane . setBorder ( new LineBorder ( Color . GRAY ) ) ; return mainSplitPane ; }
private DigicoreChain cleanChain ( DigicoreChain chain ) { return chain ; }
private boolean checkSetup $F72 { this . txmgr = TransactionManagerImp . getTransactionManager ( ) ; if ( this . txmgr == null ) { try { Hashtable $F2538 env = new Hashtable $F2538 $F72 ; env . put ( Context . INITIAL_CONTEXT_FACTORY , this . initialContextFactory ) ; env . put ( Context . PROVIDER_URL , this . providerUrl ) ; Context ctx = new InitialContext ( env ) ; this . txmgrServer = ( UserTransactionServer ) PortableRemoteObject . narrow ( ctx . lookup ( this . userTransactionServerLookupName ) , UserTransactionServer . class ) ; } catch ( Exception e ) { $F301 ( e ) throw new RuntimeException ( getNotFoundMessage ( ) ) ; } if ( this . txmgrServer == null ) throw new RuntimeException ( getNotFoundMessage ( ) ) ; } return this . txmgr != null ; }
public static final boolean givesCheck ( Position pos , Move m ) { boolean wtm = pos . whiteMove ; int oKingSq = pos . getKingSq ( ! wtm ) ; int oKing = wtm ? Piece . BKING : Piece . WKING ; int p = Piece . makeWhite ( m . promoteTo == Piece . EMPTY ? pos . getPiece ( m . from ) : m . promoteTo ) ; int d1 = BitBoard . getDirection ( m . to , oKingSq ) ; switch ( d1 ) { $F3366 $F52533 $F3366 $F52533 if ( ( p == Piece . WQUEEN ) || ( p == Piece . WROOK ) ) if ( ( d1 != NUM00 ) && ( MoveGen . nextPiece ( pos , m . to , d1 ) == oKing ) ) return _BOOL ; $F597 $F3366 $F3366 $F52533 $F52533 if ( ( p == Piece . WQUEEN ) || ( p == Piece . WBISHOP ) ) { if ( ( d1 != NUM00 ) && ( MoveGen . nextPiece ( pos , m . to , d1 ) == oKing ) ) return _BOOL ; } else if ( p == Piece . WPAWN ) { if ( ( ( d1 > NUM00 ) == wtm ) && ( pos . getPiece ( m . to + d1 ) == oKing ) ) return _BOOL ; } $F597 $F1267 if ( d1 != NUM00 ) { if ( p == Piece . WKNIGHT ) return _BOOL ; } } int d2 = BitBoard . getDirection ( m . from , oKingSq ) ; if ( ( d2 != NUM00 ) && ( d2 != d1 ) && ( MoveGen . nextPiece ( pos , m . from , d2 ) == oKing ) ) { int p2 = MoveGen . nextPieceSafe ( pos , m . from , - d2 ) ; switch ( d2 ) { $F3366 $F52533 $F3366 $F52533 if ( ( p2 == ( wtm ? Piece . WQUEEN : Piece . BQUEEN ) ) || ( p2 == ( wtm ? Piece . WROOK : Piece . BROOK ) ) ) return _BOOL ; $F597 $F3366 $F3366 $F52533 $F52533 if ( ( p2 == ( wtm ? Piece . WQUEEN : Piece . BQUEEN ) ) || ( p2 == ( wtm ? Piece . WBISHOP : Piece . BBISHOP ) ) ) return _BOOL ; $F597 } } if ( ( m . promoteTo != Piece . EMPTY ) && ( d1 != NUM00 ) && ( d1 == d2 ) ) { switch ( d1 ) { $F3366 $F52533 $F3366 $F52533 if ( ( p == Piece . WQUEEN ) || ( p == Piece . WROOK ) ) if ( ( d1 != NUM00 ) && ( MoveGen . nextPiece ( pos , m . from , d1 ) == oKing ) ) return _BOOL ; $F597 $F3366 $F3366 $F52533 $F52533 if ( ( p == Piece . WQUEEN ) || ( p == Piece . WBISHOP ) ) { if ( ( d1 != NUM00 ) && ( MoveGen . nextPiece ( pos , m . from , d1 ) == oKing ) ) return _BOOL ; } $F597 } } if ( p == Piece . WKING ) { if ( m . to - m . from == NUM00 ) { if ( MoveGen . nextPieceSafe ( pos , m . from , - NUM00 ) == oKing ) return _BOOL ; if ( MoveGen . nextPieceSafe ( pos , m . from + NUM00 , wtm ? NUM00 : - NUM00 ) == oKing ) return _BOOL ; } else if ( m . to - m . from == - NUM00 ) { if ( MoveGen . nextPieceSafe ( pos , m . from , NUM00 ) == oKing ) return _BOOL ; if ( MoveGen . nextPieceSafe ( pos , m . from - NUM00 , wtm ? NUM00 : - NUM00 ) == oKing ) return _BOOL ; } } else if ( p == Piece . WPAWN ) { if ( pos . getPiece ( m . to ) == Piece . EMPTY ) { int dx = Position . getX ( m . to ) - Position . getX ( m . from ) ; if ( dx != NUM00 ) { int epSq = m . from + dx ; int d3 = BitBoard . getDirection ( epSq , oKingSq ) ; switch ( d3 ) { $F3366 $F3366 $F52533 $F52533 if ( MoveGen . nextPiece ( pos , epSq , d3 ) == oKing ) { int p2 = MoveGen . nextPieceSafe ( pos , epSq , - d3 ) ; if ( ( p2 == ( wtm ? Piece . WQUEEN : Piece . BQUEEN ) ) || ( p2 == ( wtm ? Piece . WBISHOP : Piece . BBISHOP ) ) ) return _BOOL ; } $F597 $F3366 if ( MoveGen . nextPiece ( pos , Math . max ( epSq , m . from ) , d3 ) == oKing ) { int p2 = MoveGen . nextPieceSafe ( pos , Math . min ( epSq , m . from ) , - d3 ) ; if ( ( p2 == ( wtm ? Piece . WQUEEN : Piece . BQUEEN ) ) || ( p2 == ( wtm ? Piece . WROOK : Piece . BROOK ) ) ) return _BOOL ; } $F597 $F52533 if ( MoveGen . nextPiece ( pos , Math . min ( epSq , m . from ) , d3 ) == oKing ) { int p2 = MoveGen . nextPieceSafe ( pos , Math . max ( epSq , m . from ) , - d3 ) ; if ( ( p2 == ( wtm ? Piece . WQUEEN : Piece . BQUEEN ) ) || ( p2 == ( wtm ? Piece . WROOK : Piece . BROOK ) ) ) return _BOOL ; } $F597 } } } } return _BOOL ; }
public static FSDirectory newFSDirectory ( Class < ? extends FSDirectory > clazz , Path path ) throws ReflectiveOperationException { return newFSDirectory ( clazz , path , FSLockFactory . getDefault ( ) ) ; }
private static Element addElement ( Document doc , Node parent , String tagName , String attr1 , String val1 , String attr2 , String val2 ) { $F16570 ( elem , doc , tagName ) if ( attr1 != null ) elem . setAttribute ( attr1 , val1 ) ; if ( attr2 != null ) elem . setAttribute ( attr2 , val2 ) ; parent . appendChild ( elem ) ; return elem ; }
public static String stream2String ( InputStream is , int maxLength ) throws IOException { $F12496 ( buffer ) $F29429 ( sw ) int totalRead = NUM00 ; int read = NUM00 ; do { sw . write ( $F626 ( buffer , read ) ) ; totalRead += read ; $F142376 ( read , is , buffer ) ; } while ( ( ( - NUM00 == maxLength ) || ( totalRead < maxLength ) ) && ( read != - NUM00 ) ) ; $F92 ( sw ) }
private static Couple $F4 splitNameOfRemoteBranch ( String branchName ) { $F1384 ( firstSlash , branchName ) String remoteName = firstSlash > - NUM00 ? branchName . substring ( NUM00 , firstSlash ) : branchName ; $F36289 ( remoteBranchName , branchName , firstSlash ) return Couple . of ( remoteName , remoteBranchName ) ; }
private static void decodeAnsiX12Segment ( BitSource bits , StringBuilder result ) throws FormatException { $F11844 ( cValues ) do { $F46340 ( bits ) $F2847 ( firstByte , bits ) $F32905 ( firstByte ) $F46342 ( parseTwoBytes , firstByte , bits , cValues ) for ( $F6268 ( i ) ) { int cValue = cValues [ i ] ; if ( cValue == NUM00 ) $F86 ( result ) else if ( cValue == NUM00 ) $F86 ( result ) else if ( cValue == NUM00 ) $F86 ( result ) else if ( cValue == NUM00 ) $F86 ( result ) else if ( cValue < NUM00 ) $F46359 ( result , cValue ) else if ( cValue < NUM00 ) $F46359 ( result , cValue ) else $F2172 ( FormatException ) } } while $F2892 ( bits ) ; }
public static OutputStream encrypt ( OutputStream unencryptedOutputStream , $F1469 password ) throws EncryptionException , IOException { OutputStream encryptedOutputStream = null ; PBEKeySpec pbeKeySpec = new PBEKeySpec ( password ) ; PBEParameterSpec pbeParameterSpec = new PBEParameterSpec ( SALT , ITERATION_COUNT ) ; try { $F17013 ( secretKeyFactory , SecretKeyFactory , ENCRYPTION_ALGORITHM , CRYPTOPROVIDER ) SecretKey pbeKey = secretKeyFactory . generateSecret ( pbeKeySpec ) ; $F17013 ( cipher , Cipher , ENCRYPTION_ALGORITHM , CRYPTOPROVIDER ) $F20431 ( cipher , Cipher , pbeKey , pbeParameterSpec ) encryptedOutputStream = new CipherOutputStream ( unencryptedOutputStream , cipher ) ; } catch ( GeneralSecurityException e ) { throw new EncryptionException ( NUM00 , e ) ; } return encryptedOutputStream ; }
public static String rightPad $F41200 ( original , length , padChar ) { if ( original . length ( ) >= length ) { return original ; } return original + stringOfChar ( padChar , length - original . length ( ) ) ; }
private boolean checkSelectForSwipe ( int action , MotionEvent motionEvent , int pointerIndex ) { if ( mSelected != null || action != MotionEvent . ACTION_MOVE || mActionState == ACTION_STATE_DRAG || ! mCallback . isItemViewSwipeEnabled ( ) ) { return _BOOL ; } if ( mRecyclerView . getScrollState ( ) == RecyclerView . SCROLL_STATE_DRAGGING ) { return _BOOL ; } final ViewHolder vh = findSwipedView ( motionEvent ) ; $F1933 ( vh , _BOOL ) final int movementFlags = mCallback . getAbsoluteMovementFlags ( mRecyclerView , vh ) ; final int swipeFlags = ( movementFlags & ACTION_MODE_SWIPE_MASK ) > > ( DIRECTION_FLAG_COUNT * ACTION_STATE_SWIPE ) ; $F6482 ( swipeFlags , _BOOL ) $F105903 ( x , MotionEventCompat , motionEvent , pointerIndex ) $F105905 ( y , MotionEventCompat , motionEvent , pointerIndex ) final float dx = x - mInitialTouchX ; final float dy = y - mInitialTouchY ; $F41714 ( absDx , Math , dx ) $F41714 ( absDy , Math , dy ) if ( absDx < mSlop && absDy < mSlop ) { return _BOOL ; } if ( absDx > absDy ) $F105910 ( dx , swipeFlags , LEFT , _BOOL , RIGHT ) else $F105910 ( dy , swipeFlags , UP , _BOOL , DOWN ) mDx = mDy = NUM00 ; mActivePointerId = MotionEventCompat . getPointerId ( motionEvent , NUM00 ) ; select ( vh , ACTION_STATE_SWIPE ) ; if ( mPreOpened != null && mPreOpened != vh && vh != null ) $F5795 ( closeOpenedPreItem ) return _BOOL ; }
protected void reloadSwipeStateInView ( View frontView , int position ) { if $F87318 ( opened , position ) { ViewCompat . setTranslationX ( frontView , NUM00 ) ; } else { if $F73204 ( openedRight , position ) { ViewCompat . setTranslationX ( frontView , swipeListView . getWidth ( ) ) ; } else { ViewCompat . setTranslationX ( frontView , $F115951 ( swipeListView ) ) ; } } }
public final void pushPair ( int v1 , int v2 ) { if ( null == m_map ) $F74814 ( m_map , m_blocksize , m_mapSize ) else { if $F11078 ( m_firstFree , m_mapSize ) { m_mapSize += m_blocksize ; int newMap [ ] = new int [ m_mapSize ] ; $F135 ( System , m_map , newMap , m_firstFree ) m_map = newMap ; } } m_map [ m_firstFree ] = v1 ; m_map [ m_firstFree + NUM00 ] = v2 ; m_firstFree += NUM00 ; }
void reset $F72 $F138343 ( System , iv , k , blockSize )
public Matrix3 multiplyByVerticalFlip $F72 { $F1986 m = this . m ; m [ NUM00 ] += m [ NUM00 ] ; m [ NUM00 ] += m [ NUM00 ] ; m [ NUM00 ] += m [ NUM00 ] ; m [ NUM00 ] = - m [ NUM00 ] ; m [ NUM00 ] = - m [ NUM00 ] ; m [ NUM00 ] = - m [ NUM00 ] ; return this ; }
public void shutdown $F72 throws DataSourceException { if ( createdSessionFactory ) { if ( $F31240 ( sessionFactory ) ) { try $F881 ( sessionFactory ) $F14110 ( sessionFactory ) } } }
private String stringifyIP $F97 ( ip ) { String temp = NUM00 ; for ( $F89941 ( i , ip ) ) { temp += Integer . toString ( ip [ i ] & NUM00 ) + NUM00 ; } $F8993 ( temp ) temp += NUM00 ; for ( int i = ip . length / NUM00 ; i < ip . length ; i ++ ) { temp += Integer . toString ( ip [ i ] & NUM00 ) + NUM00 ; } $F8993 ( temp ) return temp ; }
public COpenFunctionAction ( final CGraphWindow parent , final IViewContainer container , final INaviFunction function ) { super ( $F21900 ( String , function ) ) ; $F1832 ( Preconditions , parent ) $F1832 ( Preconditions , container ) m_parent = parent ; m_container = container ; m_function = function ; }
public static $F96 hexStringToBytes ( String hexString ) { if $F3581 ( hexString ) $F1337 $F47567 ( hexString ) int length = $F8196 ( hexString ) ; $F7782 ( hexChars , hexString ) $F2175 ( d , length ) for ( $F119 ( i , length ) ) { int pos = i * NUM00 ; d [ i ] = ( byte ) ( charToByte ( hexChars [ pos ] ) < < NUM00 | charToByte ( hexChars [ pos + NUM00 ] ) ) ; } return d ; }
public void writeString ( final String s ) { $F173719 ( bytes , s ) $F18832 ( len , bytes ) writeInt ( len ) ; $F6483 ( System , bytes , buffer , offset , len ) offset += len ; pad ( ) ; }
private static PermissionCollection createAllPermissions $F72 { Permissions permissions = new Permissions $F72 ; permissions . add ( new AllPermission $F72 ) ; return permissions ; }
private void mergeNetworks ( Network tzone , Network sZone ) { $F3803 addedEndPoints = new $F5 ( sZone . retrieveEndpoints ( ) ) ; StringSet newEndPoints = sZone . retrieveEndpoints ( ) ; for ( String endpoint : tzone . retrieveEndpoints ( ) ) { if $F105 ( newEndPoints , endpoint ) $F106 ( addedEndPoints , endpoint ) } if $F5973 ( addedEndPoints ) { tzone . addEndpoints ( addedEndPoints , _BOOL ) ; } tzone . setNativeGuid ( sZone . getNativeGuid ( ) ) ; }
static public void println ( String msg ) { println ( msg , CLLogLevel . normal ) ; }
private static ByteString readChunk ( InputStream in , final int chunkSize ) throws IOException { $F4727 ( buf , chunkSize ) int bytesRead = NUM00 ; while ( bytesRead < chunkSize ) { final int count = in . read ( buf , bytesRead , chunkSize - bytesRead ) ; $F76065 ( count ) bytesRead += count ; } if ( bytesRead == NUM00 ) $F1337 else { return ByteString . copyFrom ( buf , NUM00 , bytesRead ) ; } }
private $F422085 sumAssociations $F72 throws IOException { DirectoryReader indexReader = DirectoryReader . open ( indexDir ) ; IndexSearcher searcher = new IndexSearcher ( indexReader ) ; TaxonomyReader taxoReader = new DirectoryTaxonomyReader ( taxoDir ) ; FacetsCollector fc = new FacetsCollector $F72 ; FacetsCollector . search ( searcher , new MatchAllDocsQuery $F72 , NUM00 , fc ) ; Facets tags = new TaxonomyFacetSumIntAssociations ( NUM00 , taxoReader , config , fc ) ; Facets genre = new TaxonomyFacetSumFloatAssociations ( NUM00 , taxoReader , config , fc ) ; $F422085 $F204 ( results ) ; $F422106 ( results , tags ) $F422106 ( results , genre ) $F59 ( indexReader ) $F59 ( taxoReader ) return results ; }
public ReverseGeoCode ( InputStream placenames , boolean majorOnly ) throws IOException { createKdTree ( placenames , majorOnly ) ; }
protected String patchName ( String qname ) { $F55879 ( lastColon , qname ) if ( lastColon > NUM00 ) { $F46662 ( firstColon , qname ) $F66071 ( prefix , qname , firstColon ) $F49882 ( localName , qname , lastColon ) final String uri = m_prefixMap . lookupNamespace ( prefix ) ; if ( $F145545 ( uri ) ) { return localName ; } else if ( firstColon != lastColon ) $F1949 ( prefix , localName ) } return qname ; }
public static String fromTag ( ListTag < Tag > tag ) { $F83 ( builder ) builder . append ( ARRAY_START ) ; boolean start = _BOOL ; for ( Tag value : tag . getValue ( ) ) { $F11657 ( start , _BOOL , builder , ELEMENT_SEPERATOR ) $F6407 ( builder , fromGenericTag , value ) } builder . append ( ARRAY_END ) ; $F92 ( builder ) }
private XMLElement2 createAnotherElement $F72 { return new XMLElement2 ( this . entities , this . ignoreWhitespace , _BOOL , this . ignoreCase ) ; }
public synchronized void reset $F72 { $F725 ( labels ) labels . put ( SensisionConstants . SENSISION_LABEL_TOPIC , this . topic ) ; labels . put ( SensisionConstants . SENSISION_LABEL_GROUPID , this . groupid ) ; for ( int i = NUM00 ; i < this . counters . length ; i ++ ) { if ( null == this . counters [ i ] ) $F1448 labels . put ( SensisionConstants . SENSISION_LABEL_PARTITION , Integer . toString ( i ) ) ; Sensision . clear ( SensisionConstants . SENSISION_CLASS_WARP_KAFKA_CONSUMER_OFFSET , labels ) ; this . counters [ i ] = null ; } }
public Vector rotateInRadian ( double radians ) { final double length = length ( ) ; double angle = angleInRadian ( ) ; angle += radians ; final Vector result = new Vector ( Math . cos ( angle ) , Math . sin ( angle ) ) ; return result . multiply ( length ) ; }
public void connectionLost ( java . lang . Throwable cause ) { int rc = - NUM00 ; led . setAmber ( ) ; led . setFlash ( ) ; setTitleText ( NUM00 ) ; synchronized ( this ) { writeLogln ( NUM00 + mqtt . getServerURI ( ) ) ; } try { while ( ( rc == - NUM00 ) && connected ) { try { synchronized ( connLostWait ) $F34522 ( connLostWait ) } catch ( InterruptedException iex ) $F845 synchronized ( this ) { if ( connected ) { writeLog ( NUM00 ) ; try { connect ( mqtt . getServerURI ( ) , optionsComp . isPersistenceSelected ( ) ) ; rc = NUM00 ; } catch ( MqttException mqte ) $F44867 ( rc ) if ( rc == - NUM00 ) $F1210 ( writeLogln ) else $F1210 ( writeLogln ) } } } setTitleText ( NUM00 ) ; } catch ( Exception ex ) { setTitleText ( NUM00 ) ; $F301 ( ex ) disconnect ( ) ; } finally { if ( led . isFlashing ( ) ) { led . setFlash ( ) ; } } if ( connected ) { led . setGreen ( ) ; setConnected ( _BOOL ) ; } else { led . setRed ( ) ; setConnected ( _BOOL ) ; } }
$F28896 ( index , paint , bounds , title , getTitle )
public String headerOut ( String name ) { $F5 keys = _headerKeysOut ; $F2199 ( headerSize , keys ) for ( $F119 ( i , headerSize ) ) { $F1729 ( oldKey , keys , i ) if $F8397 ( oldKey , name ) { return $F120 ( _headerValuesOut , i ) ; } } if $F21935 ( name ) { return _contentLengthOut >= NUM00 ? String . valueOf ( _contentLengthOut ) : null ; } if $F21935 ( name ) { return _contentTypeOut ; } $F1274 }
private static $F10651 parseSparseFields ( $F223369 queryParams ) { $F10651 $F8690 ( result ) ; for ( Map . Entry $F14854 kv : queryParams . entrySet ( ) ) { $F3477 ( key , kv ) if $F40448 ( key ) { $F13881 ( type , key ) LinkedHashSet $F4 $F22304 ( filters ) ; for ( String filterParams : kv . getValue ( ) ) { Collections . addAll ( filters , filterParams . split ( NUM00 ) ) ; } if $F5973 ( filters ) $F1717 ( result , type , filters ) } } return result ; }
public Element signWithWSSSAMLTokenProfile ( Document doc , $F132633 cert , String assertionID , String algorithm , List ids ) throws XMLSignatureException { return signWithWSSSAMLTokenProfile ( doc , cert , assertionID , algorithm , ids , SOAPBindingConstants . WSF_10_VERSION ) ; }
$F1 public void stateChanged ( ChangeEvent e ) { updateFrameTitle ( ) ; updateMenu ( ) ; if ( e . getSource ( ) instanceof JComponent ) { setTabTitle ( ( JComponent ) e . getSource ( ) ) ; } }
$F1 public void addURL ( URL url , boolean isScanned ) { $F47073 ( containsURL , url ) super . addURL ( url , isScanned ) ; if ( isScanned ) _pendingScanRoots . add ( new ScanRoot ( url , null ) ) ; }
public void add ( final int start , final int end , final byte status ) { final int s = start - mStart ; if ( s < mInterval . length && end > mStart ) { Arrays . fill ( mInterval , Math . max ( s , NUM00 ) , Math . min ( end - mStart , mInterval . length ) , status ) ; } }
public void reset $F72 { alpha = initAlpha ; neighborhoodSize = initNeighborhoodSize ; }
private void reload $F72 { $F47177 ( doc , textPane ) doc . putProperty ( Document . StreamDescriptionProperty , null ) ; reference = currentReference ; loadPage ( currentPage ) ; }
protected void drawHexagon ( int x , int y , int w , int h , Color fillColor , Paint fillPaint , Color penColor , boolean shadow , String direction ) { $F157439 ( hexagon ) if ( direction . equals ( mxConstants . DIRECTION_NORTH ) || direction . equals ( mxConstants . DIRECTION_SOUTH ) ) { hexagon . addPoint ( x + $F11263 ( w ) , y ) ; hexagon . addPoint ( x + w , y + $F11263 ( h ) ) ; hexagon . addPoint ( x + w , y + $F11263 ( h ) ) ; hexagon . addPoint ( x + $F11263 ( w ) , y + h ) ; hexagon . addPoint ( x , y + $F11263 ( h ) ) ; hexagon . addPoint ( x , y + $F11263 ( h ) ) ; } else { hexagon . addPoint ( x + $F11263 ( w ) , y ) ; hexagon . addPoint ( x + $F11263 ( w ) , y ) ; hexagon . addPoint ( x + w , y + $F11263 ( h ) ) ; hexagon . addPoint ( x + $F11263 ( w ) , y + h ) ; hexagon . addPoint ( x + $F11263 ( w ) , y + h ) ; hexagon . addPoint ( x , y + $F11263 ( h ) ) ; } drawPolygon ( hexagon , fillColor , fillPaint , penColor , shadow ) ; }
private boolean isStatic ( Field field ) { $F23165 ( modifier , field ) if ( Modifier . isStatic ( modifier ) ) { return _BOOL ; } return _BOOL ; }
public int outstandingRequests $F72 $F1522 ( outstanding )
final public static String toString $F41456 ( key , off , len ) { $F397 ( key , NULL ) final StringBuilder sb = new StringBuilder ( len * NUM00 + NUM00 ) ; $F84 ( sb ) for ( $F5883 ( i , off , len ) ) { $F96530 ( i , sb ) sb . append ( Integer . toString ( key [ i ] & NUM00 ) ) ; } $F84 ( sb ) $F92 ( sb ) }
public void init ( String componentName ) throws LogException { accessLogger = Logger . getLogger ( componentName + NUM00 ) ; errorLogger = Logger . getLogger ( componentName + NUM00 ) ; }
private View fillLeft ( int pos , int nextRight ) { if ( DEBUG ) Log . i ( TAG , NUM00 + pos + NUM00 + nextRight + M_FIRST_POSITION + mFirstPosition ) ; View selectedView = null ; $F280696 ( end , mListPadding ) while ( nextRight > end && pos >= NUM00 ) { View temp = makeColumn ( pos , nextRight , _BOOL ) ; $F57733 ( temp , selectedView ) nextRight = mReferenceView . getLeft ( ) - mHorizontalSpacing ; mFirstPosition = pos ; pos -= mNumRows ; } if ( mStackFromBottom ) { mFirstPosition = Math . max ( NUM00 , pos + NUM00 ) ; } return selectedView ; }
public void removeDefaultValue ( String value ) throws $F16995 { Set defaultValues = getDefaultValues ( ) ; if ( defaultValues != Collections . EMPTY_SET ) { defaultValues . remove ( value ) ; updateDefaultValues ( defaultValues ) ; } }
public static int keyBindingDescriptionToKeyCode ( String keyBindingDescription ) { if $F7283 ( StringUtils , keyBindingDescription ) $F1083 else if $F3057 ( keyBindingDescription ) { return SWT . ESC ; } else if $F3057 ( keyBindingDescription ) { return SWT . F1 ; } else if $F3057 ( keyBindingDescription ) { return SWT . F2 ; } else if $F3057 ( keyBindingDescription ) { return SWT . F3 ; } else if $F3057 ( keyBindingDescription ) { return SWT . F4 ; } else if $F3057 ( keyBindingDescription ) { return SWT . F5 ; } else if $F3057 ( keyBindingDescription ) { return SWT . F6 ; } else if $F3057 ( keyBindingDescription ) { return SWT . F7 ; } else if $F3057 ( keyBindingDescription ) { return SWT . F8 ; } else if $F3057 ( keyBindingDescription ) { return SWT . F9 ; } else if $F3057 ( keyBindingDescription ) { return SWT . F10 ; } else if $F3057 ( keyBindingDescription ) { return SWT . F11 ; } else if $F3057 ( keyBindingDescription ) { return SWT . F12 ; } else if $F3057 ( keyBindingDescription ) { return SWT . SCROLL_LOCK ; } else if ( VALID_ACTION_KEY_CODES . indexOf ( $F7792 ( keyBindingDescription ) ) != - NUM00 ) { return $F7792 ( keyBindingDescription ) ; } else $F1083 }
public void testPutCauseEviction $F72 { $F10144 ( log ) LruCache $F2538 cache = newRemovalLogCache ( log ) ; $F16824 ( cache ) $F16824 ( cache ) $F16824 ( cache ) $F16824 ( cache ) assertEquals ( Arrays . asList ( NUM00 ) , log ) ; $F471147 ( assertSnapshot , cache ) }
protected Signature mergeSignatures ( Signature first , Signature second , int numBins ) { int d2 = - NUM00 ; for ( int i = NUM00 ; i < second . spec . length ; i += NUM00 ) { if ( second . spec [ i ] >= NUM00 ) { assert ( d2 == - NUM00 ) : NUM00 ; d2 = i ; } } assert ( d2 >= NUM00 ) : NUM00 ; if ( first . spec [ d2 ] >= NUM00 ) $F1337 final ModifiableDBIDs intersection = DBIDUtil . intersection ( first . ids , second . ids ) ; $F10162 ( support , intersection ) double width = ( second . spec [ d2 + NUM00 ] - second . spec [ d2 ] + NUM00 ) / ( double ) numBins ; double expect = first . ids . size ( ) * width ; if ( support <= expect || support < minClusterSize ) $F1337 final double test = PoissonDistribution . rawProbability ( support , expect ) ; if ( ( poissonThreshold ) <= test ) $F1337 $F2027 spec = first . spec . clone ( ) ; $F439467 ( spec , d2 , second ) spec [ d2 + NUM00 ] = second . spec [ d2 ] ; final Signature newsig = new Signature ( spec , intersection ) ; if $F88618 ( LOG ) { $F62755 ( LOG , newsig ) } return newsig ; }
$F16587 ( super )
public IgniteDeploymentException ( Throwable cause ) $F51022 ( this , cause )
public synchronized boolean enter ( CnATreeElement obj ) throws TransactionAbortedException { if ( aborted ) { throw new TransactionAbortedException $F72 ; } visited . add ( obj ) ; if ( this . initiator != null ) { return _BOOL ; } this . initiator = obj ; aborted = _BOOL ; return _BOOL ; }
public Options addOption ( Option opt ) { $F3477 ( key , opt ) if ( opt . hasLongOpt ( ) ) { longOpts . put ( opt . getLongOpt ( ) , opt ) ; } if ( opt . isRequired ( ) ) { if $F105 ( requiredOpts , key ) { requiredOpts . remove ( requiredOpts . indexOf ( key ) ) ; } requiredOpts . add ( key ) ; } shortOpts . put ( key , opt ) ; return this ; }
private void pauseForClientToJoin $F72 { Wait . pause ( NUM00 ) ; }
public void propertyChange ( PropertyChangeEvent pce ) { if ( pce . getPropertyName ( ) == MapBean . BackgroundProperty && backgroundSlave ) { map . setBckgrnd ( ( Paint ) pce . getNewValue ( ) ) ; } }
public TransitionBuilder addFrame ( int imageResource ) $F18637 ( mFrames , imageResource , this )
public $F18547 scanForClasses ( String location , $F6969 implementedInterface ) throws Exception { LOG . debug ( $F106503 ( location , implementedInterface ) ) ; $F69670 classes = new ArrayList $F69669 $F72 ; $F2689 resourceNames = findResourceNames ( location , NUM00 , NUM00 ) ; for ( String resourceName : resourceNames ) { String className = toClassName ( resourceName ) ; $F6969 clazz = classLoader . loadClass ( className ) ; if ( $F79998 ( Modifier , clazz ) || clazz . isEnum ( ) || clazz . isAnonymousClass ( ) ) { $F586 ( LOG , className ) $F598 } if $F80006 ( implementedInterface , clazz ) $F1448 try { ClassUtils . instantiate ( className , classLoader ) ; } catch ( Exception e ) { throw new CassandraMigrationException ( NUM00 + className , e ) ; } classes . add ( clazz ) ; $F586 ( LOG , className ) } return classes . toArray ( new $F6969 $F2313 ( classes ) ) ; }
public String nextCDATA $F72 throws JSONException { char c ; int i ; $F280 ( sb ) for ( $F589 ) { c = next ( ) ; if ( end ( ) ) $F25983 ( syntaxError ) sb . append ( c ) ; $F25985 ( i , sb ) if ( $F25986 ( i , sb ) && $F10825 ( sb , i ) && $F10825 ( sb , i ) ) { sb . setLength ( i ) ; $F92 ( sb ) } } }
private static boolean needsSkylightUpdate ( FastCubeBlockAccess access , MutableBlockPos pos ) { if ( access . getBlockLightOpacity ( pos ) >= NUM00 ) { return _BOOL ; } int computedLight = access . computeLightValue ( pos ) ; for ( $F40424 ( facing , EnumFacing ) ) { pos . move ( facing ) ; int currentLight = access . getLightFor ( EnumSkyBlock . SKY , pos ) ; int currentOpacity = Math . max ( NUM00 , access . getBlockLightOpacity ( pos ) ) ; pos . move ( facing . getOpposite ( ) ) ; if ( computedLight == currentLight - currentOpacity ) { return _BOOL ; } } return _BOOL ; }
public static void expand ( Rectangle2D r , double amount ) { r . setRect ( r . getX ( ) - amount , r . getY ( ) - amount , r . getWidth ( ) + NUM00 * amount , r . getHeight ( ) + NUM00 * amount ) ; }
static void stringToPacket ( String s , DatagramPacket packet ) { $F39526 ( bytes , s ) System . arraycopy ( bytes , NUM00 , packet . getData ( ) , NUM00 , bytes . length ) ; $F5660 ( packet , bytes ) }
$F1 public String toString $F72 { $F8755 ( buffer ) $F84 ( buffer ) buffer . append ( gridX ) ; $F84 ( buffer ) buffer . append ( gridY ) ; $F84 ( buffer ) buffer . append ( gridWidth ) ; $F84 ( buffer ) buffer . append ( gridHeight ) ; $F84 ( buffer ) buffer . append ( hAlign ) ; $F84 ( buffer ) buffer . append ( vAlign ) ; if $F2137 ( EMPTY_INSETS , insets ) $F20352 ( buffer , insets ) $F84 ( buffer ) buffer . append ( honorsVisibility ) ; $F84 ( buffer ) $F92 ( buffer ) }
private ArrayList < PROCLUSCluster > assignPoints ( ArrayDBIDs m_current , long [ ] [ ] dimensions , $F42616 database ) { ModifiableDBIDs [ ] clusterIDs = new ModifiableDBIDs [ dimensions . length ] ; for ( $F2277 ( i , m_current ) ) { clusterIDs [ i ] = DBIDUtil . newHashSet ( ) ; } $F150948 ( m_i , m_current ) for ( $F42632 ( it , database ) ) { $F42637 ( p , database , it ) double minDist = Double . NaN ; int best = - NUM00 , i = NUM00 ; for ( m_i . seek ( NUM00 ) ; m_i . valid ( ) ; $F102236 ( m_i , i ) ) { $F42637 ( m , database , m_i ) double currentDist = manhattanSegmentalDistance ( p , m , dimensions [ i ] ) ; if ( ! ( minDist <= currentDist ) ) { minDist = currentDist ; best = i ; } } assert best >= NUM00 ; ModifiableDBIDs ids = clusterIDs [ best ] ; ids . add ( it ) ; } ArrayList < PROCLUSCluster > $F719 ( clusters , m_current ) ; for ( $F1139 ( i , dimensions ) ) { ModifiableDBIDs objectIDs = clusterIDs [ i ] ; if $F5973 ( objectIDs ) { $F2469 clusterDimensions = dimensions [ i ] ; $F1986 centroid = Centroid . make ( database , objectIDs ) . getArrayRef ( ) ; clusters . add ( new PROCLUSCluster ( objectIDs , clusterDimensions , centroid ) ) ; } else $F723 ( clusters ) } if $F88618 ( LOG ) { $F83 ( msg ) $F84 ( msg ) msg . append ( NUM00 ) . append ( clusters ) . append ( NUM00 ) ; LOG . debugFine ( msg . toString ( ) ) ; } return clusters ; }
public double slideSubtree ( MutableTree tree ) { double logHastingsRatio ; NodeRef i , newParent , newChild ; do { i = tree . getNode ( MathUtils . nextInt ( tree . getNodeCount ( ) ) ) ; } while ( tree . getRoot ( ) == i ) ; $F59939 ( iP , tree , i ) NodeRef CiP = getOtherChild ( tree , iP , i ) ; $F59939 ( PiP , tree , iP ) double delta = getDelta ( ) ; $F9667 ( oldHeight , tree , iP ) double newHeight = oldHeight + delta ; if ( delta > NUM00 ) { if ( PiP != null && tree . getNodeHeight ( PiP ) < newHeight ) { newParent = PiP ; newChild = iP ; while ( tree . getNodeHeight ( newParent ) < newHeight ) { newChild = newParent ; newParent = tree . getParent ( newParent ) ; $F12576 ( newParent ) } tree . beginTreeEdit ( ) ; if ( tree . isRoot ( newChild ) ) { tree . removeChild ( iP , CiP ) ; tree . removeChild ( PiP , iP ) ; tree . addChild ( iP , newChild ) ; tree . addChild ( PiP , CiP ) ; tree . setRoot ( iP ) ; } else { tree . removeChild ( iP , CiP ) ; tree . removeChild ( PiP , iP ) ; tree . removeChild ( newParent , newChild ) ; tree . addChild ( iP , newChild ) ; tree . addChild ( PiP , CiP ) ; tree . addChild ( newParent , iP ) ; } tree . setNodeHeight ( iP , newHeight ) ; tree . endTreeEdit ( ) ; int possibleSources = intersectingEdges ( tree , newChild , oldHeight , null ) ; logHastingsRatio = Math . log ( NUM00 / ( double ) possibleSources ) ; } else { tree . setNodeHeight ( iP , newHeight ) ; logHastingsRatio = NUM00 ; } } else { if ( tree . getNodeHeight ( i ) > newHeight ) $F86429 ( Double ) if ( tree . getNodeHeight ( CiP ) > newHeight ) { $F12181 ( newChildren ) int possibleDestinations = intersectingEdges ( tree , CiP , newHeight , newChildren ) ; if $F10471 ( newChildren ) $F86429 ( Double ) $F59615 ( childIndex , MathUtils , newChildren ) newChild = ( NodeRef ) newChildren . get ( childIndex ) ; newParent = tree . getParent ( newChild ) ; tree . beginTreeEdit ( ) ; if ( tree . isRoot ( iP ) ) { tree . removeChild ( iP , CiP ) ; tree . removeChild ( newParent , newChild ) ; tree . addChild ( iP , newChild ) ; tree . addChild ( newParent , iP ) ; tree . setRoot ( CiP ) ; } else { tree . removeChild ( iP , CiP ) ; tree . removeChild ( PiP , iP ) ; tree . removeChild ( newParent , newChild ) ; tree . addChild ( iP , newChild ) ; tree . addChild ( PiP , CiP ) ; tree . addChild ( newParent , iP ) ; } tree . setNodeHeight ( iP , newHeight ) ; tree . endTreeEdit ( ) ; logHastingsRatio = Math . log ( ( double ) possibleDestinations ) ; } else { tree . setNodeHeight ( iP , newHeight ) ; logHastingsRatio = NUM00 ; } } return logHastingsRatio ; }
public boolean isInitialized $F72 { return _initialized ; }
public boolean removeShutdownHook ( Thread hook ) { $F896 ( hook ) $F4640 ( shuttingDown ) synchronized ( shutdownHooks ) $F20067 ( shutdownHooks , hook ) }
private ResultPointsAndTransitions transitionsBetween ( ResultPoint from , ResultPoint to ) { $F166720 ( fromX , from ) $F166722 ( fromY , from ) $F166720 ( toX , to ) $F166722 ( toY , to ) $F226920 ( steep , Math , toY , fromY , toX , fromX ) $F226922 ( steep , temp , fromX , fromY , toX , toY ) $F11871 ( dx , Math , toX , fromX ) $F11871 ( dy , Math , toY , fromY ) int error = - dx / NUM00 ; $F211050 ( ystep , fromY , toY ) $F211050 ( xstep , fromX , toX ) int transitions = NUM00 ; $F226926 ( inBlack , image , steep , fromY , fromX ) $F226931 ( x , fromX , y , fromY , toX , xstep , isBlack , image , steep , inBlack , transitions , error , dy , toY , ystep , dx ) $F226932 ( from , to , transitions ) }
$F198049 ( Double , get )
boolean checkCameraSize ( CameraOptions cameraId ) { boolean sizeAvailable = _BOOL ; Camera camera = null ; Method method = getCameraOpenMethod ( ) ; if ( method != null ) { try { camera = ( Camera ) method . invoke ( camera , new Object [ ] { cameraId . getValue ( ) } ) ; } catch ( Exception e ) { $F81052 ( camera , Camera ) } } else { $F81052 ( camera , Camera ) } $F1933 ( camera , _BOOL ) Parameters param = camera . getParameters ( ) ; List < Camera . Size > sizes = param . getSupportedPreviewSizes ( ) ; for ( Camera . Size size : sizes ) { if ( ( size . width == H264Config . QVGA_WIDTH && size . height == H264Config . QVGA_HEIGHT ) || ( size . width == H264Config . CIF_WIDTH && size . height == H264Config . CIF_HEIGHT ) || ( size . width == H264Config . VGA_WIDTH && size . height == H264Config . VGA_HEIGHT ) ) $F3468 ( sizeAvailable , _BOOL ) } $F33833 ( camera ) return sizeAvailable ; }
$F156045 ( msg , x , super , this )
public void append ( final String s ) $F98972 ( first , _BOOL , builder , space , s )
public static ByteArrayOutputStream encode ( String plaintext ) throws IOException , MessagingException { $F1538 ( out ) $F39526 ( in , plaintext ) $F1538 ( inStream ) $F17918 ( inStream , in ) if ( ( in . length % NUM00 ) == NUM00 ) { $F25097 ( inStream ) $F25097 ( inStream ) } else if ( ( in . length % NUM00 ) == NUM00 ) { $F25097 ( inStream ) } inStream . writeTo ( MimeUtility . encode ( out , NUM00 ) ) ; return out ; }
public LookupListTable lookupList $F72 { if $F61923 ( lookupListTable ) { lookupListTable . compareAndSet ( null , gsub . createLookupList ( ) ) ; } $F1521 ( lookupListTable ) }
public long sum $F72 $F1522 ( deltaSum )
$F120210 ( maximumPullScroll , getMaximumPullScroll , pLeft , getPaddingLeft , pTop , getPaddingTop , pRight , getPaddingRight , pBottom , getPaddingBottom , getPullToRefreshScrollDirection , HORIZONTAL , mMode , mHeaderLayout , mFooterLayout , VERTICAL , DEBUG , Log , LOG_TAG , String , setPadding )
private static boolean isWordBoundary ( CharSequence singleChar , String wordSeparators ) { return TextUtils . isEmpty ( singleChar ) || wordSeparators . contains ( singleChar ) ; }
public void executeBlocking ( String desc , BlockingConsumer < MongoClient > operation ) throws InterruptedException { while ( _BOOL ) { MongoClient primary = primaryConnectionSupplier . get ( ) ; try { operation . accept ( primary ) ; $F665 } catch ( Throwable t ) { errorHandler . accept ( desc , t ) ; } } }
public void write $F53421 ( cbuf ) throws $F3258 { $F46502 ( write , cbuf ) }
protected TableViewer createTable ( Composite parent , int span ) { Table table = new Table ( parent , SWT . H_SCROLL | SWT . V_SCROLL | SWT . BORDER | SWT . SINGLE | SWT . FULL_SELECTION ) ; GridData data = new GridData ( GridData . FILL_BOTH | GridData . GRAB_HORIZONTAL ) ; data . horizontalSpan = span ; table . setLayoutData ( data ) ; TableLayout layout = new TableLayout $F72 ; layout . addColumnData ( new ColumnWeightData ( NUM00 , _BOOL ) ) ; table . setLayout ( layout ) ; TableColumn col = new TableColumn ( table , SWT . NONE ) ; col . setResizable ( _BOOL ) ; return new TableViewer ( table ) ; }
public String typeAsString $F72 { String typeStr = NUM00 ; String subtypeStr = NUM00 ; switch ( this . type ) { case ETYPE_CONTROL : typeStr = NUM00 ; switch ( this . subtype ) { $F7242 ( ESTYPE_HEADER , subtypeStr ) $F7242 ( ESTYPE_FOOTER , subtypeStr ) } $F597 case ETYPE_TRANSACTIONS : typeStr = NUM00 ; switch ( this . subtype ) { $F7242 ( ESTYPE_TRAN_START , subtypeStr ) $F7242 ( ESTYPE_TRAN_COMMIT , subtypeStr ) $F7242 ( ESTYPE_TRAN_ROLLBACK , subtypeStr ) $F7242 ( ESTYPE_TRAN_ROLLBACK_TO_SAVEPOINT , subtypeStr ) $F7242 ( ESTYPE_TRAN_AUDIT , subtypeStr ) } $F597 case ETYPE_LCR_DATA : typeStr = NUM00 ; switch ( this . subtype ) { $F7242 ( ESTYPE_LCR_INSERT , subtypeStr ) $F7242 ( ESTYPE_LCR_DELETE , subtypeStr ) $F7242 ( ESTYPE_LCR_UPDATE , subtypeStr ) $F7242 ( ESTYPE_LCR_LOB_WRITE , subtypeStr ) $F7242 ( ESTYPE_LCR_LOB_TRIM , subtypeStr ) $F7242 ( ESTYPE_LCR_LOB_ERASE , subtypeStr ) $F7242 ( ESTYPE_LCR_DDL , subtypeStr ) } $F597 case ETYPE_LCR_PLOG : typeStr = NUM00 ; switch ( this . subtype ) { $F7242 ( ESTYPE_LCR_PLOG_IFILE , subtypeStr ) $F7242 ( ESTYPE_LCR_PLOG_IFILE_STATS , subtypeStr ) } $F597 $F1267 typeStr = NUM00 + this . type + NUM00 ; subtypeStr = NUM00 + this . subtype ; } return typeStr + subtypeStr ; }
public void lineTo ( float x , float y ) { mPoints . add ( PathPoint . lineTo ( x , y ) ) ; }
public void flagActionItems $F72 { $F24126 ( mIsActionItemsStale ) boolean flagged = _BOOL ; for ( $F232606 ref : mPresenters ) { $F232608 ( presenter , ref ) if ( presenter == null ) $F106 ( mPresenters , ref ) else { flagged |= presenter . flagActionItems ( ) ; } } if ( flagged ) { $F725 ( mActionItems ) $F725 ( mNonActionItems ) ArrayList < MenuItemImpl > visibleItems = getVisibleItems ( ) ; $F10162 ( itemsSize , visibleItems ) for ( $F119 ( i , itemsSize ) ) { MenuItemImpl item = visibleItems . get ( i ) ; if ( item . isActionButton ( ) ) $F207 ( mActionItems , item ) else $F207 ( mNonActionItems , item ) } } else { $F725 ( mActionItems ) $F725 ( mNonActionItems ) $F138067 ( mNonActionItems , getVisibleItems ) } mIsActionItemsStale = _BOOL ; }
protected $F8748 canHandleMissing ( boolean nominalPredictor , boolean numericPredictor , boolean stringPredictor , boolean datePredictor , boolean relationalPredictor , boolean multiInstance , int classType , boolean predictorMissing , boolean classMissing , int missingLevel ) { if ( missingLevel == NUM00 ) $F1210 ( print ) print ( NUM00 ) ; if ( predictorMissing ) { print ( NUM00 ) ; $F29727 ( classMissing , print ) } $F29727 ( classMissing , print ) print ( NUM00 ) ; printAttributeSummary ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType ) ; print ( NUM00 ) ; $F8728 ( accepts ) $F18793 ( accepts ) $F18793 ( accepts ) $F18793 ( accepts ) int numTrain = getNumInstances ( ) , numTest = getNumInstances ( ) , numClasses = NUM00 ; return runBasicTest ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType , missingLevel , predictorMissing , classMissing , numTrain , numTest , numClasses , accepts ) ; }
private void disableButtons $F72 { for ( $F40424 ( cmd , DeployCommand ) ) { setButtonEnabled ( cmd , _BOOL ) ; } butDone . setEnabled ( _BOOL ) ; setLoadEnabled ( _BOOL ) ; setUnloadEnabled ( _BOOL ) ; setAssaultDropEnabled ( _BOOL ) ; }
public Artifact load ( File path ) throws IOException { return load ( new ArtifactName $F27949 ( path ) , path ) ; }
protected final boolean tryAcquire ( int acquires ) { $F9275 ( current , Thread ) int c = getState ( ) ; if ( c == NUM00 ) { if ( ! hasQueuedPredecessors ( ) && compareAndSetState ( NUM00 , acquires ) ) $F9278 ( setExclusiveOwnerThread , current , _BOOL ) } else $F9286 ( current , getExclusiveOwnerThread , nextc , c , acquires , setState , _BOOL ) return _BOOL ; }
private static final boolean isHeaderEnd ( StringBuilder sb ) { $F1749 ( len , sb ) if ( len > NUM00 ) { if ( LF2 . equals ( sb . substring ( len - NUM00 ) ) ) { return _BOOL ; } } if ( len > NUM00 ) { if ( CRLF2 . equals ( sb . substring ( len - NUM00 ) ) ) { return _BOOL ; } } return _BOOL ; }
$F1 public $F987 listOptions $F72 { $F20795 ( result ) $F1000 ( result ) $F1000 ( result ) $F1000 ( result ) $F1000 ( result ) $F77735 ( result ) $F1000 ( result ) $F1007 ( result ) }
public TSActionDelay ( TransitSectionAction tsa , int delay ) { _tsa = tsa ; _delay = delay ; }
public DAddExtensions ( JDialog parent , X509ExtensionSet extensions , PublicKey authorityPublicKey , X500Name authorityCertName , BigInteger authorityCertSerialNumber , PublicKey subjectPublicKey ) { $F36748 ( super , parent , Dialog ) $F15426 ( setTitle , res ) this . extensions = ( X509ExtensionSet ) extensions . clone ( ) ; this . authorityPublicKey = authorityPublicKey ; this . authorityCertName = authorityCertName ; this . authorityCertSerialNumber = authorityCertSerialNumber ; this . subjectPublicKey = subjectPublicKey ; initComponents ( ) ; }
public void add ( IMultiPoint pt ) { if ( inProgress ) { throw new ConcurrentModificationException $F580 ; } points . add ( pt ) ; }
public static boolean isCglibProxyClass $F60993 ( clazz ) { return ( clazz != null && $F6798 ( isCglibProxyClassName , clazz ) ) ; }
private DiscoveryInformation verifyDiscovered ( AuthSuccess authResp , DiscoveryInformation discovered ) throws DiscoveryException { if ( authResp == null || authResp . getIdentity ( ) == null ) $F11048 ( _log ) if ( authResp . isVersion2 ( ) ) return verifyDiscovered2 ( authResp , discovered ) ; else return verifyDiscovered1 ( authResp , discovered ) ; }
public boolean generate ( ReportDescription description , Date date ) { try { Integer targetDateInt = Integer . parseInt ( format . format ( date ) ) ; AnalysisResultSet logAggregation = makeLogAnal ( description , targetDateInt ) ; Report report = new Report $F72 ; report . setSendTime ( $F4094 ) ; report . setTargetDate ( date ) ; report . setLogReport ( logAggregation ) ; report . setTargets ( description . getTargets ( ) ) ; $F586 ( logger , report ) reportRepository . save ( report ) ; return _BOOL ; } catch ( Exception e ) { $F1575 ( logger , e ) return _BOOL ; } }
$F1 public void updateTextViews ( Recharge recharge ) { unitTypeTextView . setText ( recharge . getUnits ( ) ) ; unitValueTextView . setText ( String . valueOf ( recharge . getCurrentAmount ( ) ) ) ; costTextView . setText ( Currency . localize ( recharge . getCurrentCost ( ) , _BOOL ) ) ; rechargeName . setText ( recharge . getTitle ( ) ) ; confirmationTextView . setText ( NUM00 + recharge . getCurrentAmount ( ) + NUM00 + recharge . getUnits ( ) + NUM00 ) ; if ( recharge . getCurrentAmount ( ) == recharge . getInitialAmount ( ) ) { $F185816 ( downArrow , View ) } else $F29550 ( downArrow , View ) }
private ConcurrentMap < GridCacheVersion , IgniteInternalTx > transactionMap ( IgniteInternalTx tx ) { return ( tx . near ( ) && ! tx . local ( ) ) ? nearIdMap : idMap ; }
public void stop $F72 { synchronized ( this ) { mStopped = _BOOL ; $F2329 ( mListenerThread ) } $F7589 ( mListenerThread ) try $F6399 ( mServerSocket ) $F29052 }
public static $F96 decode $F27539 ( data , pri_key ) { try { $F5348 ( cipher , Cipher ) java . security . Key k = getPrivateKey ( pri_key ) ; $F116470 ( cipher , Cipher , k ) $F81525 ( deBytes , cipher , data ) return deBytes ; } catch ( Exception e ) $F102355 ( log , pri_key , e ) $F1274 }
public static int deriveARGB ( Color color1 , Color color2 , float midPoint ) { int r = color1 . getRed ( ) + ( int ) ( ( color2 . getRed ( ) - color1 . getRed ( ) ) * midPoint + NUM00 ) ; int g = color1 . getGreen ( ) + ( int ) ( ( color2 . getGreen ( ) - color1 . getGreen ( ) ) * midPoint + NUM00 ) ; int b = color1 . getBlue ( ) + ( int ) ( ( color2 . getBlue ( ) - color1 . getBlue ( ) ) * midPoint + NUM00 ) ; int a = color1 . getAlpha ( ) + ( int ) ( ( color2 . getAlpha ( ) - color1 . getAlpha ( ) ) * midPoint + NUM00 ) ; return $F201782 ( a , r ) | $F74254 ( g ) | ( b & NUM00 ) ; }
public void addLandingPad ( int x , int z ) { BlockPosition pos = new BlockPosition ( x , NUM00 , z ) ; if $F2200 ( spawnLocations , pos ) { spawnLocations . add ( pos ) ; occupiedLandingPads . put ( pos , _BOOL ) ; } }
static AttackStrategy create ( String params ) { $F806 $F33985 ( arg , params ) ; if $F11845 ( arg ) $F29526 ( params ) $F7329 desc = parseStrategy ( arg [ NUM00 ] ) ; TargetSelectionStrategy targeter = TargetSelectionStrategyFactory . get ( desc . first ( ) , desc . second ( ) ) ; desc = parseStrategy ( arg [ NUM00 ] ) ; PositioningStrategy positioner = PositioningStrategyFactory . get ( desc . first ( ) , desc . second ( ) ) ; return new CompoundAttackStrategy ( getSubStrategy ( arg [ NUM00 ] ) , targeter , positioner ) ; }
public OrderedThreadPoolExecutor $F72 { this ( DEFAULT_INITIAL_THREAD_POOL_SIZE , DEFAULT_MAX_THREAD_POOL , DEFAULT_KEEP_ALIVE , TimeUnit . SECONDS , Executors . defaultThreadFactory ( ) , null ) ; }
$F5105 ( pcl , m_pcSupport )
final public void writeChunk ( L locator , KVO $F65331 [ ] chunk ) throws MockStaleLocatorException { synchronized ( this ) { if ( staleLocators . contains ( locator . getPartitionId ( ) ) ) { throw new MockStaleLocatorException ( locator ) ; } if ( ! knownLocators . contains ( locator . getPartitionId ( ) ) ) $F1666 ( locator ) } acceptWrite ( locator , chunk ) ; }
public Event event ( int id ) { if ( ! host ) { return ( Event ) events . get ( new Integer ( id ) ) ; } $F1274 }
private void initValues $F72 { IPreferenceStore store = doGetPreferenceStore ( ) ; final String storedItems = store . getString ( CheckerPreferences . PREF_CHECKER_CUSTOM_CLASSES ) ; if $F1264 ( storedItems ) { customCheckers . setItems ( storedItems . split ( NUM00 ) ) ; } }
private void loadProperties $F72 { $F27462 ( property , System ) if ( null == property ) { property = CarbonCommonConstants . CARBON_PROPERTIES_FILE_PATH ; } $F1705 ( file , property ) $F36580 ( LOGGER , file ) FileInputStream fis = null ; try { if $F3428 ( file ) $F175470 ( fis , file , carbonProperties ) } catch ( FileNotFoundException e ) { LOGGER . error ( NUM00 + CarbonCommonConstants . CARBON_PROPERTIES_FILE_PATH + NUM00 ) ; } catch ( IOException e ) { LOGGER . error ( NUM00 + CarbonCommonConstants . CARBON_PROPERTIES_FILE_PATH ) ; } finally { if ( null != fis ) { try $F881 ( fis ) catch ( IOException e ) { LOGGER . error ( NUM00 + CarbonCommonConstants . CARBON_PROPERTIES_FILE_PATH ) ; } } } print ( ) ; }
void sync ( int sourceRepoIndex , int destRepoIndex , AuthenticationInfo subject ) throws IOException { $F973 ( LOG ) $F4377 ( auth , NotebookAuthorization ) NotebookRepo srcRepo = getRepo ( sourceRepoIndex ) ; NotebookRepo dstRepo = getRepo ( destRepoIndex ) ; List < NoteInfo > allSrcNotes = srcRepo . list ( subject ) ; List < NoteInfo > srcNotes = auth . filterByUser ( allSrcNotes , subject ) ; List < NoteInfo > dstNotes = dstRepo . list ( subject ) ; $F14855 noteIds = notesCheckDiff ( srcNotes , srcRepo , dstNotes , dstRepo , subject ) ; $F64948 ( pushNoteIds , noteIds , pushKey ) $F64948 ( pullNoteIds , noteIds , pullKey ) $F64948 ( delDstNoteIds , noteIds , delDstKey ) if $F5973 ( pushNoteIds ) { $F973 ( LOG ) for ( String id : pushNoteIds ) $F10090 ( LOG , id ) pushNotes ( subject , pushNoteIds , srcRepo , dstRepo , _BOOL ) ; } else $F22715 ( LOG ) if $F5973 ( pullNoteIds ) { $F973 ( LOG ) for ( String id : pullNoteIds ) $F10090 ( LOG , id ) pushNotes ( subject , pullNoteIds , dstRepo , srcRepo , _BOOL ) ; } else $F22715 ( LOG ) if $F5973 ( delDstNoteIds ) { $F973 ( LOG ) for ( String id : delDstNoteIds ) $F10090 ( LOG , id ) deleteNotes ( subject , delDstNoteIds , dstRepo ) ; } else $F22715 ( LOG ) $F973 ( LOG ) }
public void list ( PrintStream out ) { $F8438 ( out ) $F240196 h = new Hashtable $F200 $F72 ; enumerate ( h ) ; for ( $F14937 e = h . keys ( ) ; e . hasMoreElements ( ) ; ) { $F14941 ( key , e ) $F123 ( val , h , key ) if $F4012 ( val ) { val = $F22881 ( val ) ; } out . println ( key + NUM00 + val ) ; } }
public static Date stringToDate ( String strdate , $F1431 String format ) { Date date = null ; $F13438 ( formatter , format ) try $F49239 ( date , formatter , strdate ) catch ( ParseException e ) $F302 ( e ) return date ; }
$F5466 public static String md5 ( $F5466 File file , $F5466 IgniteLogger log ) { if ( file != null ) return file . isFile ( ) ? fileMd5 ( file , log ) : directoryMd5 ( file , log ) ; $F1274 }
public void init $F340693 ( size , certainty , random ) $F9180 ( this , size , certainty , random )
$F1 public boolean hasNext $F72 { $F19795 ( allRowsResult , _BOOL ) totalRecordCounter ++ ; listRecordCounter ++ ; if ( listRecordCounter == NUM00 || ( listRecordCounter >= currentRowPointer . size ( ) && currentListCounter < allRowsResult . size ( ) ) ) { listRecordCounter = NUM00 ; currentRowPointer = allRowsResult . get ( currentListCounter ) ; currentListCounter ++ ; } return totalRecordCounter < totalNumberOfRecords ; }
public void trimToSize $F72 $F51922 ( delegate )
JSONStringer open ( Scope empty , String openBracket ) throws JSONException { if ( stack . isEmpty ( ) && $F20 ( out ) ) $F19954 beforeValue ( ) ; stack . add ( empty ) ; out . append ( openBracket ) ; return this ; }
public static final String asciiBoard ( Position pos ) { $F20818 ( ret ) String nl = String . format ( Locale . US , NUM00 ) ; $F84 ( ret ) ret . append ( nl ) ; for ( $F183017 ( y ) ) { $F84 ( ret ) for ( $F6268 ( x ) ) { $F84 ( ret ) int p = pos . getPiece ( Position . getSquare ( x , y ) ) ; if ( p == Piece . EMPTY ) { boolean dark = Position . darkSquare ( x , y ) ; $F97889 ( ret , dark ) } else { ret . append ( Piece . isWhite ( p ) ? NUM00 : NUM00 ) ; String pieceName = pieceToChar ( p ) ; if $F1277 ( pieceName ) pieceName = NUM00 ; ret . append ( pieceName ) ; $F84 ( ret ) } } ret . append ( nl ) ; $F84 ( ret ) ret . append ( nl ) ; } $F92 ( ret ) }
public final void clear $F72 $F5122 ( caches , sections )
static $F6870 toNodeSet ( $F27882 i ) { $F6870 nodeSet = new $F6871 $F72 ; while $F2921 ( i ) { $F27886 ( n , i ) nodeSet . add ( n ) ; if $F61358 ( n , Node ) { $F32683 ( nnm , n ) for ( int j = NUM00 , length = nnm . getLength ( ) ; j < length ; j ++ ) { nodeSet . add ( nnm . item ( j ) ) ; } } } return nodeSet ; }
public static void runConcurrently ( final Callable $F8317 task , final int times ) throws Exception { final ExecutorService service = Executors . newFixedThreadPool ( NUM00 ) ; final List < $F44535 > futures = new ArrayList < $F44535 > $F72 ; for ( $F119 ( i , times ) ) { futures . add ( service . submit ( task ) ) ; } for ( final $F44535 future : futures ) $F217730 ( future ) }
private static ArrayList < ContainerVm > createVmList ( int brokerId , int containerVmsNumber ) { ArrayList < ContainerVm > containerVms = new ArrayList < ContainerVm > $F72 ; for ( $F1316 ( i , containerVmsNumber ) ) { ArrayList < ContainerPe > peList = new ArrayList < ContainerPe > $F72 ; int vmType = i / ( int ) Math . ceil ( ( double ) containerVmsNumber / NUM00 ) ; for ( int j = NUM00 ; j < ConstantsExamples . VM_PES [ vmType ] ; ++ j ) { peList . add ( new ContainerPe ( j , new CotainerPeProvisionerSimple ( ( double ) ConstantsExamples . VM_MIPS [ vmType ] ) ) ) ; } containerVms . add ( new PowerContainerVm ( IDs . pollId ( ContainerVm . class ) , brokerId , ( double ) ConstantsExamples . VM_MIPS [ vmType ] , ( float ) ConstantsExamples . VM_RAM [ vmType ] , ConstantsExamples . VM_BW , ConstantsExamples . VM_SIZE , NUM00 , new ContainerSchedulerTimeSharedOverSubscription ( peList ) , new ContainerRamProvisionerSimple ( ConstantsExamples . VM_RAM [ vmType ] ) , new ContainerBwProvisionerSimple ( ConstantsExamples . VM_BW ) , peList , ConstantsExamples . SCHEDULING_INTERVAL ) ) ; } return containerVms ; }
public static void addPortUse ( Map < StoragePort , Integer > portUseCounts , StoragePort port ) { if $F15257 ( portUseCounts , port ) $F248856 ( portUseCounts , port ) else { Integer newCount = portUseCounts . get ( port ) + NUM00 ; portUseCounts . put ( port , newCount ) ; } }
public void popElemAttributeSet $F72 $F89427 ( m_attrSetStack )
private $F96 createPreviewBuffer ( Size previewSize ) { int bitsPerPixel = ImageFormat . getBitsPerPixel ( ImageFormat . NV21 ) ; long sizeInBits = previewSize . getHeight ( ) * previewSize . getWidth ( ) * bitsPerPixel ; int bufferSize = $F96308 ( Math , sizeInBits ) + NUM00 ; $F2175 ( byteArray , bufferSize ) $F23500 ( buffer , ByteBuffer , byteArray ) if ( ! buffer . hasArray ( ) || ( buffer . array ( ) != byteArray ) ) $F4639 mBytesToByteBuffer . put ( byteArray , buffer ) ; return byteArray ; }
$F1 public synchronized CacheObject $F2193 put ( K key , CacheObject $F2193 value ) { if $F29395 ( cache , maxSize ) { if ( removeExpired ( ) <= NUM00 ) { if ( cacheFullRemoveType instanceof RemoveTypeNotRemove ) $F1337 if $F9774 ( fullRemoveOne ) $F1337 } } value . setEnterTime ( System . currentTimeMillis ( ) ) ; cache . put ( key , value ) ; return value ; }
$F32632 ( criteria , createCriteriaInternal , oredCriteria )
public void removeModelChange ( String tableName , ModelValidator listener ) { $F57400 ( tableName , listener ) String propertyName = m_globalValidators . contains ( listener ) ? tableName + NUM00 : tableName + listener . getAD_Client_ID ( ) ; $F105617 list = m_modelChangeListeners . get ( propertyName ) ; $F8249 ( list ) list . remove ( listener ) ; if $F10471 ( list ) m_modelChangeListeners . remove ( propertyName ) ; }
protected void fireChangeEvent $F72 { $F10531 ( iter , m_listeners ) ChangeEvent evt = new ChangeEvent ( this ) ; while $F2921 ( iter ) { ChangeListener cl = ( ChangeListener ) iter . next ( ) ; cl . stateChanged ( evt ) ; } }
private String createConnectionName $F72 { $F83 ( nameBuffer ) $F16690 ( nameBuffer , getConnectionType ) $F84 ( nameBuffer ) nameBuffer . append ( _host ) ; $F84 ( nameBuffer ) nameBuffer . append ( _port ) ; $F92 ( nameBuffer ) }
public Query execute ( PageContext pc , SQL sql , int maxrows , int fetchsize , TimeSpan timeout ) throws PageException { Stopwatch stopwatch = new Stopwatch ( Stopwatch . UNIT_NANO ) ; $F2346 ( stopwatch ) String prettySQL = null ; Selects selects = null ; try { SelectParser parser = new SelectParser $F72 ; selects = parser . parse ( sql . getSQLString ( ) ) ; Query q = qoq . execute ( pc , sql , selects , maxrows ) ; q . setExecutionTime ( stopwatch . time ( ) ) ; return q ; } catch ( SQLParserException spe ) { prettySQL = SQLPrettyfier . prettyfie ( sql . getSQLString ( ) ) ; try { Query query = executer . execute ( pc , sql , prettySQL , maxrows ) ; query . setExecutionTime ( stopwatch . time ( ) ) ; return query ; } catch ( PageException ex ) $F845 } catch ( PageException e ) $F845 try { boolean isUnion = _BOOL ; $F29150 ( tables ) if ( selects != null ) { HSQLUtil2 hsql2 = new HSQLUtil2 ( selects ) ; $F54171 ( isUnion , hsql2 ) tables = hsql2 . getInvokedTables ( ) ; } else { if ( prettySQL == null ) prettySQL = SQLPrettyfier . prettyfie ( sql . getSQLString ( ) ) ; HSQLUtil hsql = new HSQLUtil ( prettySQL ) ; tables = hsql . getInvokedTables ( ) ; $F54171 ( isUnion , hsql ) } String strSQL = StringUtil . replace ( sql . getSQLString ( ) , NUM00 , NUM00 , _BOOL ) ; strSQL = StringUtil . replace ( strSQL , NUM00 , NUM00 , _BOOL ) ; sql . setSQLString ( strSQL ) ; return _execute ( pc , sql , maxrows , fetchsize , timeout , stopwatch , tables , isUnion ) ; } catch ( ParseException e ) { throw new DatabaseException ( e . getMessage ( ) , null , sql , null ) ; } }
$F45332 $F2512 ( MediaType ) $F2513 @ CheckPermission ( roles = { Role . TENANT_ADMIN } ) public TaskResourceRep discoverHost ( $F2515 ( id ) ) { ArgValidator . checkFieldUriType ( id , $F2522 , NUM00 ) ; Host host = queryObject ( $F2522 , id , _BOOL ) ; return doDiscoverHost ( host ) ; }
public static final void readFully ( InputStream i , byte $F1310 , int off , int len ) throws IOException { if ( len < NUM00 ) $F81129 int n = NUM00 ; while ( n < len ) { $F113519 ( count , i , b , off , n , len ) $F5148 ( count ) n += count ; } }
private void drawLines ( Canvas canvas ) { for ( $F2665 ( i , connectionOrder ) ) { drawLine ( canvas , circles [ connectionOrder . get ( i ) ] , circles [ connectionOrder . get ( i + NUM00 ) ] ) ; } }
private void addOrUpdateNode ( AStarNode newNode ) { boolean found = _BOOL ; for ( AStarNode toUpdate : closedNodes ) { if $F1238 ( newNode , toUpdate ) { toUpdate . updateDistance ( newNode . getG ( ) , newNode . parent ) ; found = _BOOL ; $F597 } } if ( ! found ) $F1614 ( openQueue , newNode ) }
public static File toFile ( JavaFileObject javaFileObject ) { return new File $F27949 ( javaFileObject ) ; }
$F9538 ( takeLock , this , notEmpty )
public WritableRaster createCompatibleWritableRaster ( int w , int h ) { $F2027 bOffs = $F79696 ; return Raster . createInterleavedRaster ( DataBuffer . TYPE_BYTE , w , h , w * NUM00 , NUM00 , bOffs , null ) ; }
public static MultiSegmentPowerLawBipartiteGraph buildRandomMultiSegmentBipartiteGraph ( int maxNumSegments , int maxNumEdgesPerSegment , int leftSize , int rightSize , double edgeProbability , Random random ) { MultiSegmentPowerLawBipartiteGraph multiSegmentPowerLawBipartiteGraph = new MultiSegmentPowerLawBipartiteGraph ( maxNumSegments , maxNumEdgesPerSegment , leftSize / NUM00 , ( int ) ( rightSize * edgeProbability / NUM00 ) , NUM00 , rightSize / NUM00 , ( int ) ( leftSize * edgeProbability / NUM00 ) , NUM00 , new IdentityEdgeTypeMask $F72 , new NullStatsReceiver $F72 ) ; for ( $F119 ( i , leftSize ) ) { for ( $F119 ( j , rightSize ) ) { if ( random . nextDouble ( ) < edgeProbability ) { multiSegmentPowerLawBipartiteGraph . addEdge ( i , j , $F19905 ) ; } } } return multiSegmentPowerLawBipartiteGraph ; }
public static String execute ( String command ) { $F298538 ( SubprocessUttility , command ) }
public synchronized void updateProgress ( final int value ) { $F9275 ( t , Thread ) final MyInteger v = mIndividualThreadProgress . get ( t ) ; if ( v == null ) { mIndividualThreadProgress . put ( t , new MyInteger ( value ) ) ; } else $F18283 ( v , value ) if ( value > mLastReportedProgress ) { int min = Integer . MAX_VALUE ; for ( final MyInteger m : mIndividualThreadProgress . values ( ) ) { if ( m . getValue ( ) < min ) $F37892 ( min , m ) } if ( min > mLastReportedProgress ) { mLastReportedProgress = min ; Diagnostic . progress ( NUM00 + min + NUM00 + mName ) ; } } }
private ContextHandler createContextHandler ( String directory , boolean isInJar , File installRootDirectory , int expiresInSeconds ) { final ContextHandler contextHandler = new ContextHandler $F72 ; final ResourceHandler resourceHandler = new ExpiresResourceHandler ( expiresInSeconds ) ; final String directoryWithSlash = NUM00 + directory ; contextHandler . setContextPath ( directoryWithSlash ) ; Resource directoryResource = getDirectoryResource ( directory , isInJar , installRootDirectory ) ; directoryResource = new JsMinifyingResource ( directoryResource ) ; if ( isInJar ) { directoryResource = new CachingResource ( directoryResource , directoryWithSlash ) ; } resourceHandler . setBaseResource ( directoryResource ) ; if ( ! isInJar ) { resourceHandler . setMinMemoryMappedContentLength ( NUM00 ) ; } contextHandler . setHandler ( resourceHandler ) ; return contextHandler ; }
public boolean startsWith ( java . lang . CharSequence prefix ) $F41330 ( startsWith , prefix )
private List < ContainerInitializer > jspInitializers $F72 { JettyJasperInitializer sci = new JettyJasperInitializer $F72 ; ContainerInitializer initializer = new ContainerInitializer ( sci , null ) ; List < ContainerInitializer > initializers = new ArrayList < ContainerInitializer > $F72 ; initializers . add ( initializer ) ; return initializers ; }
public static TempPath createDirectory $F72 throws IOException { return wrap ( Files . createTempDirectory ( PREFIX ) ) ; }
public static String toString ( int partition [ ] [ ] ) { $F83 ( sb ) $F84 ( sb ) for ( $F1139 ( i , partition ) ) { sb . append ( NUM00 + Arrays . toString ( partition [ i ] ) ) ; } $F84 ( sb ) $F92 ( sb ) }
public static boolean isCategoryChildOf ( ServletRequest request , String parentProductCategoryId , String productCategoryId ) { return isCategoryChildOf ( ( Delegator ) request . getAttribute ( NUM00 ) , ( LocalDispatcher ) request . getAttribute ( NUM00 ) , parentProductCategoryId , productCategoryId ) ; }
$F1 public boolean input ( Instance instance ) { $F161885 ( getInputFormat ) $F62355 ( m_NewBatch , resetQueue , _BOOL ) push ( $F69871 ( instance ) ) ; return _BOOL ; }
public $F6877 listColumns ( String table ) throws DatabaseException { $F31169 ( result ) ResultSet rs = null ; try { $F9236 ( dbm , connection ) rs = dbm . getColumns ( null , null , table , null ) ; while $F1682 ( rs ) { result . add ( rs . getString ( NUM00 ) ) ; } } catch ( SQLException e ) { throw new DatabaseException ( e ) ; } finally $F31188 ( rs ) return result ; }
public void addCreatedResource ( Location location , Resource resource ) { resourceList . add ( resource ) ; locationToResourceMap . put ( location , resource ) ; }
public void signalEvent $F72 { Collection < Semaphore > semaphores = _semaphores . values ( ) ; for ( Semaphore semaphore : semaphores ) { $F33833 ( semaphore ) semaphores . remove ( semaphore ) ; } }
$F1 public boolean equals ( Object obj ) { $F3627 ( obj , this , _BOOL ) if ( ! ( obj instanceof KeyedObjects ) ) { return _BOOL ; } KeyedObjects that = ( KeyedObjects ) obj ; int count = getItemCount ( ) ; if ( count != that . getItemCount ( ) ) { return _BOOL ; } for ( $F119 ( i , count ) ) { Comparable k1 = getKey ( i ) ; Comparable k2 = that . getKey ( i ) ; $F3067 ( k1 , k2 , _BOOL ) Object o1 = getObject ( i ) ; Object o2 = that . getObject ( i ) ; if ( o1 == null ) $F181246 ( o2 , _BOOL ) else { $F3067 ( o1 , o2 , _BOOL ) } } return _BOOL ; }
protected boolean isQuorumMaintained $F72 { if ( nodeCount == NUM00 ) $F53787 ( log , _BOOL ) int quorumNodeCnt = nodeCount / NUM00 + NUM00 ; CoordinatorClient coordinatorClient = coordinator . getCoordinatorClient ( ) ; List < Service > allActiveDbsvcs = coordinatorClient . locateAllSvcsAllVers ( Constants . DBSVC_NAME ) ; $F24645 ( otherActiveDbsvcIds ) String mySvcId = coordinator . getMySvcId ( ) ; String localDbSvcId = NUM00 + mySvcId . substring ( mySvcId . lastIndexOf ( NUM00 ) ) ; for ( Service activeDbsvc : allActiveDbsvcs ) { if ( ! $F140091 ( localDbSvcId , activeDbsvc ) ) $F42097 ( otherActiveDbsvcIds , activeDbsvc ) } $F21153 ( log , otherActiveDbsvcIds , quorumNodeCnt ) boolean isMaintained = otherActiveDbsvcIds . size ( ) >= quorumNodeCnt ; if ( ! isMaintained ) $F22715 ( log ) return isMaintained ; }
public static void scheduleNextAlarm ( Context context ) { scheduleNextAlarm ( context , AlertUtils . createAlarmManager ( context ) , REMINDER_QUERY_BATCH_SIZE , System . currentTimeMillis ( ) ) ; }
public void requestStop $F72 $F24242 ( stopRequested , _BOOL )
public void test_engineCreateSSLEngine_02 $F72 { $F2027 invalid_port = { Integer . MIN_VALUE , - NUM00 , - NUM00 , NUM00 , Integer . MAX_VALUE } ; SSLContextSpiImpl ssl = new SSLContextSpiImpl $F72 ; try { SSLEngine sleng = ssl . engineCreateSSLEngine ( NUM00 , NUM00 ) ; fail ( NUM00 ) ; } $F132298 ( str , re , fail ) $F132299 ( fail , e ) for ( $F1139 ( i , invalid_port ) ) { try { SSLEngine sleng = ssl . engineCreateSSLEngine ( NUM00 , invalid_port [ i ] ) ; fail ( NUM00 ) ; } $F72499 } }
$F28183 public static $F4203 $F10809 join ( IntFunction < $F10809 > arrayFunction , $F10809 ... arrays ) { if $F9634 ( arrays ) { return arrayFunction . apply ( NUM00 ) ; } if $F9634 ( arrays ) $F3262 ( arrays ) if $F9634 ( arrays ) { return join ( $F156480 ( arrayFunction , arrays ) ) ; } $F10809 notNull = null ; int finalSize = NUM00 ; int nullArrays = NUM00 ; $F5675 list = new $F201 $F28143 ( arrays ) ; for ( $F10809 array : arrays ) { if ( ( array == null ) || $F9634 ( array ) ) { nullArrays ++ ; } else { notNull = array ; finalSize += array . length ; Collections . addAll ( list , array ) ; } } if ( nullArrays == arrays . length ) { return arrayFunction . apply ( NUM00 ) ; } if ( nullArrays == $F33765 ( arrays ) ) { return notNull ; } return list . toArray ( arrayFunction . apply ( list . size ( ) ) ) ; }
private static $F2689 splitPath ( RelaxedURL url ) { $F2695 ( results ) $F2689 queries = normalizeQuery ( url . getQuery ( ) ) ; $F18793 ( results ) for ( String q : queries ) $F34171 ( results , q ) $F2689 paths = $F158868 ( splitPath , url ) ; results . addAll ( paths ) ; for ( String p : paths ) { for ( String q : queries ) { results . add ( p + NUM00 + q ) ; } } return results ; }
public ActionForward initBestSellingReport ( ActionMapping mapping , ActionForm form , HttpServletRequest request , HttpServletResponse response ) throws ApplicationException , OperationException { ActionForward fwd = init ( mapping , form , request , response ) ; $F60730 ( fwd ) SellingItemForm reportForm = ( SellingItemForm ) form ; String timePeriod = ReportDateManager . TODAY ; String dateRange = Constants . FIXED_DATE_RANGE ; reportForm . setTimePeriod ( timePeriod ) ; reportForm . setDateRange ( dateRange ) ; reportForm . setFromDate ( NUM00 ) ; reportForm . setToDate ( NUM00 ) ; reportForm . validate ( mapping , request ) ; return mapping . findForward ( INIT_BEST_SELLING_REPORT ) ; }
$F1 public void transactionBegin $F72 { for ( BigdataGraphListener listener : listeners ) { listener . transactionBegin ( ) ; } }
public synchronized void add ( Job job ) { boolean canRunImmediately = dagManager . addJob ( job ) ; if ( canRunImmediately ) { $F630 ( LOG , job ) jobsToRun . add ( job ) ; } incrementSubmittedJobCount ( ) ; }
public void reset ( String latex ) { $F4734 ( parseString , latex ) $F3935 ( len , parseString ) formula . root = null ; pos = NUM00 ; spos = NUM00 ; line = NUM00 ; col = NUM00 ; group = NUM00 ; insertion = _BOOL ; atIsLetter = NUM00 ; arrayMode = _BOOL ; ignoreWhiteSpace = _BOOL ; firstpass ( ) ; }
public void addConstant ( ConstantPoolEntry entry ) { if ( entry instanceof Utf8Constant ) { Utf8Constant utf8 = ( Utf8Constant ) entry ; _utf8Map . put ( utf8 . getValue ( ) , utf8 ) ; } _entries . add ( entry ) ; }
public void addData ( $F130209 data ) $F6988 ( this , data )
public final double infoGain $F72 { return m_infoGain ; }
static void writeRule ( ZoneOffsetTransitionRule rule , DataOutput out ) throws IOException { int month = rule . month ; byte dom = rule . dom ; int dow = rule . dow ; LocalTime time = rule . time ; boolean timeEndOfDay = rule . timeEndOfDay ; TimeDefinition timeDefinition = rule . timeDefinition ; ZoneOffset standardOffset = rule . standardOffset ; ZoneOffset offsetBefore = rule . offsetBefore ; ZoneOffset offsetAfter = rule . offsetAfter ; int timeSecs = ( timeEndOfDay ? NUM00 : time . toSecondOfDay ( ) ) ; int stdOffset = standardOffset . getTotalSeconds ( ) ; int beforeDiff = offsetBefore . getTotalSeconds ( ) - stdOffset ; int afterDiff = offsetAfter . getTotalSeconds ( ) - stdOffset ; int timeByte = ( timeSecs % NUM00 == NUM00 ? ( timeEndOfDay ? NUM00 : time . getHour ( ) ) : NUM00 ) ; int stdOffsetByte = ( stdOffset % NUM00 == NUM00 ? stdOffset / NUM00 + NUM00 : NUM00 ) ; int beforeByte = ( $F31339 ( beforeDiff ) ? beforeDiff / NUM00 : NUM00 ) ; int afterByte = ( $F31339 ( afterDiff ) ? afterDiff / NUM00 : NUM00 ) ; int dowByte = ( dow == - NUM00 ? NUM00 : dow ) ; int b = ( month < < NUM00 ) + ( $F33569 ( dom ) ) + ( dowByte < < NUM00 ) + ( timeByte < < NUM00 ) + ( timeDefinition . ordinal ( ) < < NUM00 ) + ( stdOffsetByte < < NUM00 ) + ( beforeByte < < NUM00 ) + afterByte ; out . writeInt ( b ) ; if ( timeByte == NUM00 ) $F33583 ( out , timeSecs ) if ( stdOffsetByte == NUM00 ) $F33583 ( out , stdOffset ) if ( beforeByte == NUM00 ) { out . writeInt ( offsetBefore . getTotalSeconds ( ) ) ; } if ( afterByte == NUM00 ) { out . writeInt ( offsetAfter . getTotalSeconds ( ) ) ; } }
$F66297 ( propertyConstant , mPropertyMask , mNameValuesHolder , count , i , nameValuesHolder , _BOOL )
$F1431 public static $F4203 TypeSerializer $F4203 deserialize $F97 ( bytes ) throws IOException { $F5950 ( bis , bytes ) ObjectInput in = null ; try { $F14589 ( in , bis ) return ( TypeSerializer $F4203 ) in . readObject ( ) ; } catch ( ClassNotFoundException e ) $F14525 finally { $F18072 ( bis ) try $F6399 ( in ) $F18071 } }
public void testRemainderKnuthMultiDigitsByOneDigit $F72 { byte $F3009 = { NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 } ; $F88888 int aSign = NUM00 ; int bSign = - NUM00 ; byte $F3018 = { NUM00 , - NUM00 , - NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F221355 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public void showSelectedNeuronProperties $F72 { NeuronDialog dialog = NeuronDialog . createNeuronDialog ( getSelectedNeurons ( ) ) ; dialog . setModalityType ( Dialog . ModalityType . MODELESS ) ; $F30070 ( dialog ) $F267779 ( dialog ) dialog . setVisible ( _BOOL ) ; }
public void encrypt $F5474 ( in , length ) { int pos = NUM00 ; while ( pos < in . length && pos < length ) { encryptBlock ( in , pos , length ) ; pos += blockSize ; } }
private static boolean hasChangesOfChildren ( long last , PageContext pc , Class clazz ) { java . lang . reflect . Method [ ] methods = clazz . getMethods ( ) ; $F33940 ( method ) $F749 params ; for ( $F1139 ( i , methods ) ) { method = methods [ i ] ; if ( method . getDeclaringClass ( ) == clazz ) { if ( _hasChangesOfChildren ( pc , last , method . getReturnType ( ) ) ) return _BOOL ; params = method . getParameterTypes ( ) ; for ( $F1139 ( y , params ) ) { if ( _hasChangesOfChildren ( pc , last , params [ y ] ) ) return _BOOL ; } } } return _BOOL ; }
private WindowStuffHelper $F72 $F845
public static String removeSpecialChar ( String tempStr ) { if ( tempStr != null ) { tempStr = replace ( tempStr , NUM00 , NUM00 , _BOOL , _BOOL ) ; tempStr = replace ( tempStr , NUM00 , NUM00 , _BOOL , _BOOL ) ; tempStr = replace ( tempStr , NUM00 , NUM00 , _BOOL , _BOOL ) ; tempStr = replace ( tempStr , NUM00 , NUM00 , _BOOL , _BOOL ) ; tempStr = replace ( tempStr , NUM00 , NUM00 , _BOOL , _BOOL ) ; tempStr = replace ( tempStr , NUM00 , NUM00 , _BOOL , _BOOL ) ; tempStr = replace ( tempStr , NUM00 , NUM00 , _BOOL , _BOOL ) ; tempStr = replace ( tempStr , NUM00 , NUM00 , _BOOL , _BOOL ) ; tempStr = replace ( tempStr , NUM00 , NUM00 , _BOOL , _BOOL ) ; tempStr = replace ( tempStr , NUM00 , NUM00 , _BOOL , _BOOL ) ; tempStr = replace ( tempStr , NUM00 , NUM00 , _BOOL , _BOOL ) ; tempStr = replace ( tempStr , NUM00 , NUM00 , _BOOL , _BOOL ) ; tempStr = replace ( tempStr , NUM00 , NUM00 , _BOOL , _BOOL ) ; while $F56559 ( tempStr ) { tempStr = replace ( tempStr , NUM00 , NUM00 , _BOOL , _BOOL ) ; } tempStr = replace ( tempStr , NUM00 , NUM00 , _BOOL , _BOOL ) ; } return tempStr ; }
public RunScriptAction ( NetworkPanel networkPanel ) { super ( NUM00 ) ; putValue ( SMALL_ICON , ResourceManager . getImageIcon ( NUM00 ) ) ; putValue ( SHORT_DESCRIPTION , NUM00 ) ; this . networkPanel = networkPanel ; }
public T webImage ( String url ) { return webImage ( url , _BOOL , _BOOL , NUM00 ) ; }
private Map < Installment , List < Receipt > > consolidateTuplesInstallmentWise ( final List < InstallmentReceiptTuple > tuples ) { final Map < Installment , List < Receipt > > consolidated = new HashMap < Installment , List < Receipt > > $F72 ; for ( final InstallmentReceiptTuple t : tuples ) { List < Receipt > receiptsForInstallment = consolidated . get ( t . installment ) ; if ( receiptsForInstallment == null ) { receiptsForInstallment = new ArrayList < Receipt > $F72 ; consolidated . put ( t . installment , receiptsForInstallment ) ; } if ( ! receiptsForInstallment . contains ( t . receipt ) ) receiptsForInstallment . add ( t . receipt ) ; } $F556 ( LOGGER , consolidated ) return consolidated ; }
public static boolean isValidEmail ( String email ) { final String emailPattern = NUM00 ; Matcher matcher ; $F55449 ( pattern , Pattern , emailPattern ) matcher = pattern . matcher ( email ) ; if ( matcher != null ) $F36689 ( matcher ) else return _BOOL ; }
public void add ( LineMergeDirectedEdge directedEdge ) $F207 ( directedEdges , directedEdge )
public static ApplicationXml parseApplicationXmlFromFile ( File file , EntityResolver entityResolver ) throws IOException , JDOMException { InputStream in = null ; try { $F5335 ( in , file ) return parseApplicationXml ( in , entityResolver ) ; } finally { $F141989 ( in ) } }
public ChannelEntry newConnection ( ReadSelectorThread readHandler , SelectionKey key ) { SocketChannel channel = ( SocketChannel ) key . channel ( ) ; WriteSelectorThread writeHandler = _selectorManager . getWriteHandler ( key . channel ( ) ) ; Socket socket = channel . socket ( ) ; InetSocketAddress socketAddress = ( InetSocketAddress ) ( socket == null ? null : socket . getRemoteSocketAddress ( ) ) ; ChannelEntry channelEntry = new ChannelEntry ( writeHandler , readHandler , key , socketAddress , this ) ; m_Channels . put ( channel , channelEntry ) ; if ( socketAddress != null ) $F1717 ( _clientToChannel , socketAddress , channelEntry ) if $F6456 ( _logger , Level ) _logger . log ( Level . FINE , NUM00 + channelEntry . getClientEndPointAddress ( ) + NUM00 ) ; return channelEntry ; }
$F45263 ( filename , extension , _BOOL , indexOfExtension , fileExt , getExtension )
public String report $F72 { $F280 ( report ) intHashTable = new int [ table . tableSize ] ; calculateSlotUsage ( ) ; int max = maxCollisions ( ) ; $F65716 ( slotUsageCount , max ) for ( int i : intHashTable ) { slotUsageCount [ i ] ++ ; } $F286 ( report , numEntries ) report . append ( NUM00 + ( numEntries / ( NUM00 * table . tableSize ) + NUM00 ) ) ; float weightedAvg = NUM00 ; int numNonEmpty = NUM00 ; $F84 ( report ) for ( $F9993 ( j , max ) ) { if ( slotUsageCount [ j ] != NUM00 ) { report . append ( j + NUM00 + slotUsageCount [ j ] + NUM00 ) ; if ( j != NUM00 ) { weightedAvg += slotUsageCount [ j ] * j ; numNonEmpty += slotUsageCount [ j ] ; } } } weightedAvg /= numNonEmpty ; report . append ( $F80356 ( minCollisions , max ) + weightedAvg ) ; $F92 ( report ) }
public void addSubscriptionToStore $F2236 ( topic , clientId ) { final ClientTopicCouple subscription = new ClientTopicCouple ( clientId , topic ) ; if $F2200 ( topics , subscription ) { logger . debug ( NUM00 + topic + NUM00 + clientId + NUM00 ) ; subscriptionsStore . add ( subscription ) ; topics . add ( topic ) ; } }
public boolean zip ( String zipLocation , String toBeZippedName ) { boolean ret = _BOOL ; if ( verbose ) Debug . put ( NUM00 ) ; $F1705 ( toBeZipped , toBeZippedName ) if $F3428 ( toBeZipped ) { try { FileUtils . saveZipFile ( zipLocation , toBeZipped ) ; ret = _BOOL ; } $F35546 ( e ) $F12241 ( e ) } return ret ; }
private HashMap < Integer , Boolean > generateExpandedStateMap $F72 { HashMap < Integer , Boolean > $F8690 ( parentListItemHashMap ) ; int childCount = NUM00 ; Object listItem ; ParentWrapper parentWrapper ; $F2199 ( listItemCount , mItemList ) for ( $F119 ( i , listItemCount ) ) { if $F26935 ( mItemList , i ) { listItem = getListItem ( i ) ; if ( listItem instanceof ParentWrapper ) { parentWrapper = ( ParentWrapper ) listItem ; parentListItemHashMap . put ( i - childCount , parentWrapper . isExpanded ( ) ) ; } else { childCount ++ ; } } } return parentListItemHashMap ; }
public void addAudioPacketListener ( Listener < AudioPacket > listener ) $F232044 ( mAudioPacketBroadcaster , listener )
public static boolean decodeToFile ( String dataToDecode , String filename ) { boolean success = _BOOL ; $F87751 bos = null ; try { bos = new $F87751 ( new java . io . FileOutputStream ( filename ) , Base64 . DECODE ) ; bos . write ( dataToDecode . getBytes ( PREFERRED_ENCODING ) ) ; success = _BOOL ; } catch ( $F3258 e ) { success = _BOOL ; } finally $F87767 ( bos ) return success ; }
public DeltaCRLIndicatorExtension ( Boolean critical , Object value ) throws IOException { super ( PKIXExtensions . DeltaCRLIndicator_Id , critical . booleanValue ( ) , value , NAME , LABEL ) ; }
public JavaEnvironment ( File javaPath ) { Objects . requireNonNull ( javaPath ) ; this . javaPath = javaPath ; }
private String printOFormat ( final long x ) { String sx = null ; if ( x == Long . MIN_VALUE ) { sx = NUM00 ; } else if ( x < NUM00 ) { final String $F161512 ( t , Long , x ) ; switch $F45530 ( t ) { $F21995 ( sx , t ) $F21995 ( sx , t ) $F21995 ( sx , t ) $F21995 ( sx , t ) $F21995 ( sx , t ) $F21995 ( sx , t ) $F21995 ( sx , t ) $F21995 ( sx , t ) $F21995 ( sx , t ) $F21995 ( sx , t ) $F21995 ( sx , t ) $F21995 ( sx , t ) $F21995 ( sx , t ) $F21995 ( sx , t ) $F21995 ( sx , t ) $F21995 ( sx , t ) $F21995 ( sx , t ) $F21995 ( sx , t ) $F21995 ( sx , t ) $F21995 ( sx , t ) $F21995 ( sx , t ) } } else { $F161523 ( sx , Long , x ) } return printOFormat ( sx ) ; }
void addCallback ( JSObject source , String method , JSFunction callback , boolean async ) { String key = source . toJSPointer ( ) + NUM00 + method ; callbacks . put ( key , callback ) ; String id = JSObject . ID_KEY ; String self = source . toJSPointer ( ) ; String js = self + NUM00 + method + NUM00 + NUM00 + self + NUM00 + method + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + id + NUM00 + NUM00 + jsLookupTable + NUM00 + jsLookupTable + NUM00 + id + NUM00 + jsLookupTable + NUM00 + jsLookupTable + NUM00 + id + NUM00 + NUM00 + NUM00 + jsLookupTable + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 ; exec ( js , async ) ; }
public void removeAllBlocksFromSection $F72 { for ( $F2198 ( i , mBlockEntries ) ; i > NUM00 ; i -- ) { Block b = mBlockEntries . get ( i - NUM00 ) ; if ( b != null ) { b . removePropertyChangeListener ( mBlockListeners . get ( i - NUM00 ) ) ; } $F18938 ( mBlockListeners , i ) $F18938 ( mBlockEntries , i ) } for ( $F2198 ( i , mForwardEntryPoints ) ; i > NUM00 ; i -- ) { $F18938 ( mForwardEntryPoints , i ) } for ( $F2198 ( i , mReverseEntryPoints ) ; i > NUM00 ; i -- ) { $F18938 ( mReverseEntryPoints , i ) } initializationNeeded = _BOOL ; }
public static void writeStringToFile ( Path file , String text ) throws IOException { $F96 buf = $F43004 ( text , StandardCharsets ) ; Files . write ( file , buf ) ; }
private static boolean isOperatorVariableAccess ( final INaviOperandTreeNode node ) { final List < INaviOperandTreeNode > children = node . getChildren ( ) ; if $F10471 ( children ) { final INaviOperandTreeNode child0 = children . get ( NUM00 ) ; final INaviOperandTreeNode child1 = children . get ( NUM00 ) ; return isVariable ( child0 ) ^ isVariable ( child1 ) ; } else { return _BOOL ; } }
$F1 public void onValueSelected $F39830 ( pickerIndex , newValue , autoAdvance ) { if ( pickerIndex == HOUR_INDEX ) { setHour ( newValue , _BOOL ) ; $F574 ( announcement , String , newValue ) if ( mAllowAutoAdvance && autoAdvance ) { setCurrentItemShowing ( MINUTE_INDEX , _BOOL , _BOOL , _BOOL ) ; announcement += NUM00 + mSelectMinutes ; } else { $F152671 ( mTimePicker , mHourPickerDescription , newValue ) } Utils . tryAccessibilityAnnounce ( mTimePicker , announcement ) ; } else if ( pickerIndex == MINUTE_INDEX ) { setMinute ( newValue ) ; $F152671 ( mTimePicker , mMinutePickerDescription , newValue ) } else if ( pickerIndex == HALF_DAY_INDEX ) { updateHalfDay ( newValue ) ; } else if ( pickerIndex == ENABLE_PICKER_INDEX ) { $F152676 ( isTypedTimeFullyLegal , mTypedTimes ) finishKbMode ( _BOOL ) ; } }
public static final List < Geo > segmentNearPoly ( Geo s1 , Geo s2 , GeoArray r , double near ) { $F17900 ( rlen , r ) Geo pl0 = r . get ( rlen - NUM00 , new Geo $F72 ) ; Geo pl1 = new Geo $F72 ; List < Geo > list = null ; Geo check = new Geo $F72 ; for ( $F119 ( j , rlen ) ) { r . get ( j , pl1 ) ; Geo ret = segmentsIntersectOrNear ( s1 , s2 , pl0 , pl1 , near , check ) ; if ( ret != null ) { if ( list == null ) { list = new LinkedList < Geo > $F72 ; } list . add ( ret ) ; check = new Geo $F72 ; } pl0 . initialize ( pl1 ) ; } return list ; }
public void addAction ( UpdateAction action ) { actionList . add ( action ) ; for ( UpdateManagerListener listener : listeners ) { listener . actionAdded ( action ) ; } }
public void load ( DataInput rafIn ) throws $F120868 { $F5952 ( numIdx , rafIn ) $F5961 ( idxInterval , rafIn ) if ( idxInterval <= NUM00 ) { throw new MaryConfigurationException $F580 ; } $F11125 ( bytePtrs , numIdx ) $F11125 ( timePtrs , numIdx ) int numBytesToRead = NUM00 * numIdx + NUM00 ; $F2175 ( data , numBytesToRead ) rafIn . readFully ( data ) ; DataInput bufIn = new DataInputStream $F24702 ( data ) ; for ( $F119 ( i , numIdx ) ) { bytePtrs [ i ] = bufIn . readLong ( ) ; timePtrs [ i ] = bufIn . readLong ( ) ; if ( i > NUM00 ) { if ( bytePtrs [ i ] < bytePtrs [ i - NUM00 ] || timePtrs [ i ] < timePtrs [ i - NUM00 ] ) { throw new MaryConfigurationException $F580 ; } } } bufIn . readLong ( ) ; bufIn . readLong ( ) ; }
public URL find ( String classname ) { String jarname = $F139654 ( classname ) ; return thisClass . getResource ( jarname ) ; }
public void signoff ( String uniqueID ) { Debug . message ( NUM00 , NUM00 + uniqueID + NUM00 ) ; caches . remove ( uniqueID ) ; viewAttributeLists . remove ( uniqueID ) ; timestamps . remove ( uniqueID ) ; }
private String createNonCGSrdfPairStepsOnEmptyGroup ( $F81867 sourceDescriptors , $F81867 targetDescriptors , RemoteDirectorGroup group , $F33156 uriVolumeMap , String waitFor , Workflow workflow ) { StorageSystem system = dbClient . queryObject ( $F41797 , group . getSourceStorageSystemUri ( ) ) ; URI vpoolChangeUri = getVirtualPoolChangeVolume ( sourceDescriptors ) ; $F10635 ( log , vpoolChangeUri ) $F28584 sourceURIs = VolumeDescriptor . getVolumeURIs ( sourceDescriptors ) ; $F42093 ( targetURIs ) for ( URI sourceURI : sourceURIs ) { Volume source = uriVolumeMap . get ( sourceURI ) ; StringSet srdfTargets = source . getSrdfTargets ( ) ; for ( String targetStr : srdfTargets ) { $F43989 ( targetURI , URI , targetStr ) targetURIs . add ( targetURI ) ; } } Method createListMethod = createListReplicasMethod ( system . getId ( ) , sourceURIs , targetURIs , vpoolChangeUri , _BOOL ) ; Method rollbackMethod = rollbackSRDFLinksMethod ( system . getId ( ) , sourceURIs , targetURIs , _BOOL ) ; String stepId = workflow . createStep ( CREATE_SRDF_ACTIVE_VOLUME_PAIR_STEP_GROUP , CREATE_SRDF_ACTIVE_VOLUME_PAIR_STEP_DESC , waitFor , system . getId ( ) , system . getSystemType ( ) , getClass ( ) , createListMethod , rollbackMethod , null ) ; return stepId ; }
public static Long downsamplerTimestamp ( Long millitimestamp , long windowSize ) { return millitimestamp - ( millitimestamp % windowSize ) ; }
$F60342 ( mSmallestWidthDp , mInPortrait )
$F1 public String toString $F72 { if $F6036 ( points ) $F70142 ( idx ) $F280 ( bf ) try { $F86403 ( bf , idx ) ListNode temp ; for ( $F2277 ( i , points ) ) { temp = points . get ( i ) ; if ( i == NUM00 ) { bf . append ( NUM00 + temp . idx ) ; } else { bf . append ( NUM00 + temp . idx ) ; } } } $F1516 ( ex ) $F92 ( bf ) }
public void error $F146212 ( e ) throws $F2253 { $F105671 ( formattedMsg , e ) SAXSourceLocator locator = getLocator ( ) ; $F1875 ( handler , m_stylesheetProcessor ) try { handler . error ( new TransformerException ( formattedMsg , locator ) ) ; } $F2262 ( te ) }
private void putHead ( String key , TemplateSubPatternAssociation assoc ) { if ( key . equals ( PsuedoNames . PSEUDONAME_TEXT ) ) m_textPatterns = assoc ; else if ( key . equals ( PsuedoNames . PSEUDONAME_ROOT ) ) m_docPatterns = assoc ; else if ( key . equals ( PsuedoNames . PSEUDONAME_COMMENT ) ) m_commentPatterns = assoc ; m_patternTable . put ( key , assoc ) ; }
public UnionPathIterator ( Compiler compiler , int opPos ) throws $F1872 { super ( ) ; opPos = OpMap . getFirstChildPos ( opPos ) ; loadLocationPaths ( compiler , opPos , NUM00 ) ; }
public IStatus run ( IProgressMonitor monitor ) throws InvocationTargetException { ZipFile zipFile = null ; FileOutputStream fos = null ; BufferedOutputStream dest = null ; BufferedInputStream is = null ; jobStatus = Status . OK_STATUS ; try { zipFile = new ZipFile ( archive ) ; monitor . beginTask ( $F2989 ( archive ) , zipFile . size ( ) ) ; Enumeration < ? extends ZipEntry > entries = zipFile . entries ( ) ; while $F1444 ( entries ) { $F223881 ( zipEntry , entries ) $F20605 ( currentEntry , zipEntry ) $F4453 ( destFile , targetDir , currentEntry ) $F4924 ( destinationParent , destFile ) if $F4926 ( zipEntry ) { $F1907 ( destinationParent ) is = new BufferedInputStream ( zipFile . getInputStream ( zipEntry ) ) ; int numBytesRead ; byte $F75368 = new byte [ BUFSIZE ] ; $F10893 ( fos , destFile ) dest = new BufferedOutputStream ( fos , BUFSIZE ) ; while ( ( numBytesRead = is . read ( bytes , NUM00 , BUFSIZE ) ) != - NUM00 ) $F29756 ( dest , bytes , numBytesRead ) $F1206 ( dest ) } else $F1908 ( destFile ) monitor . worked ( NUM00 ) ; if ( monitor . isCanceled ( ) ) { jobStatus = Status . CANCEL_STATUS ; $F597 } } if ( ! monitor . isCanceled ( ) ) { jobStatus = Status . OK_STATUS ; } } catch ( ZipException ze ) { String errormsg = errorMessage ( NUM00 ) ; jobStatus = new Status ( Status . ERROR , CorePlugin . PLUGIN_ID , errormsg ) ; CorePluginLog . logError ( ze , errormsg ) ; } catch ( IOException ioe ) { String errormsg = errorMessage ( ) ; jobStatus = new Status ( Status . ERROR , CorePlugin . PLUGIN_ID , errormsg ) ; CorePluginLog . logError ( ioe , errormsg ) ; } finally { try $F2728 ( zipFile , is , dest ) catch ( IOException ioe ) { String errormsg = errorMessage ( ) ; jobStatus = new Status ( Status . ERROR , CorePlugin . PLUGIN_ID , errormsg ) ; CorePluginLog . logError ( ioe , errormsg ) ; } } return jobStatus ; }
public int read ( String table , String key , $F2689 fields , HashMap < String , ByteIterator > result ) { $F25238 ( st , System ) int res = _db . read ( table , key , fields , result ) ; $F25238 ( en , System ) _measurements . measure ( NUM00 , $F90472 ( en , st ) ) ; _measurements . reportReturnCode ( NUM00 , res ) ; return res ; }
protected void errorMessage ( String msg ) throws IOException { String str = $F31144 ( msg , m_Tokenizer ) ; if ( m_Lines > NUM00 ) { int line = Integer . parseInt ( $F2897 ( str ) ) ; str = str . replaceAll ( NUM00 , NUM00 + ( m_Lines + line - NUM00 ) ) ; } $F5614 ( str ) }
public static void spooky4 ( final BitVector bv , final long prefixLength , final long seed , final $F2469 state , final $F2469 tuple ) { long h0 , h1 , h2 , h3 ; h0 = seed ; h1 = seed ; h2 = ARBITRARY_BITS ; h3 = ARBITRARY_BITS ; long pos ; if ( prefixLength >= NUM00 * Long . SIZE ) { final int p = NUM00 * ( int ) ( ( prefixLength - NUM00 * Long . SIZE ) / ( NUM00 * Long . SIZE ) ) ; h0 = state [ p + NUM00 ] ; h1 = state [ p + NUM00 ] ; h2 = state [ p + NUM00 ] ; h3 = state [ p + NUM00 ] ; pos = p * Long . SIZE + NUM00 * Long . SIZE ; } else pos = NUM00 ; long remaining = prefixLength - pos ; if $F538437 ( remaining , Long ) { $F538441 ( h0 , bv , pos , Long ) $F538441 ( h1 , bv , pos , Long ) remaining -= NUM00 * Long . SIZE ; pos += NUM00 * Long . SIZE ; } if ( remaining > Long . SIZE ) { $F538441 ( h2 , bv , pos , Long ) h3 += bv . getLong ( pos + NUM00 * Long . SIZE , prefixLength ) ; } else if ( remaining > NUM00 ) { h2 += bv . getLong ( pos , prefixLength ) ; } else { h2 += ARBITRARY_BITS ; h3 += ARBITRARY_BITS ; } h0 += prefixLength ; h3 ^= h2 ; $F100868 ( h2 , Long ) h3 += h2 ; h0 ^= h3 ; $F100868 ( h3 , Long ) h0 += h3 ; h1 ^= h0 ; $F100868 ( h0 , Long ) h1 += h0 ; h2 ^= h1 ; $F100868 ( h1 , Long ) h2 += h1 ; h3 ^= h2 ; $F100868 ( h2 , Long ) h3 += h2 ; h0 ^= h3 ; $F100868 ( h3 , Long ) h0 += h3 ; h1 ^= h0 ; $F100868 ( h0 , Long ) h1 += h0 ; h2 ^= h1 ; $F100868 ( h1 , Long ) h2 += h1 ; h3 ^= h2 ; $F100868 ( h2 , Long ) h3 += h2 ; h0 ^= h3 ; $F100868 ( h3 , Long ) h0 += h3 ; h1 ^= h0 ; $F100868 ( h0 , Long ) h1 += h0 ; switch ( tuple . length ) { $F447859 ( tuple , h3 ) $F447859 ( tuple , h2 ) $F447859 ( tuple , h1 ) $F447859 ( tuple , h0 ) } }
public boolean hasNext $F72 { if ( deal > NUM00 ) $F881 ( sc ) return ( deal <= NUM00 ) ; }
public void addIssuer ( X500Principal issuer ) { $F896 ( issuer ) $F30647 ( issuerNames ) String name = issuer . getName ( X500Principal . CANONICAL ) ; $F2201 ( issuerNames , name ) if ( issuerPrincipals == null ) { issuerPrincipals = new $F262894 $F716 ( issuerNames ) ; } int size = $F2281 ( issuerNames ) ; for ( $F2198 ( i , issuerPrincipals ) ; i < size ; i ++ ) { issuerPrincipals . add ( new X500Principal $F73204 ( issuerNames , i ) ) ; } issuerPrincipals . add ( issuer ) ; }
static String buildKeySelection ( int selectionCount ) { $F12914 ( list , selectionCount ) $F21017 ( Arrays , list ) return KEY_COLUMN + NUM00 + TextUtils . join ( NUM00 , list ) + NUM00 ; }
private void filterNodeMap ( ConcurrentMap < String , $F33332 > map , final ClusterNode exclNode ) { for ( $F3465 ( cacheName , registeredCaches ) ) { String maskedName = maskNull ( cacheName ) ; while ( _BOOL ) { $F33332 oldNodes = map . get ( maskedName ) ; if $F4251 ( oldNodes ) $F597 $F33332 $F10252 ( newNodes , oldNodes ) ; if $F40971 ( newNodes , exclNode ) $F597 if ( map . replace ( maskedName , oldNodes , newNodes ) ) $F597 } } }
public void storeDevice ( Device d ) { $F18748 ( isMaster ) $F8249 ( d ) $F25238 ( now , System ) writeUpdatedDeviceToStorage ( d ) ; $F198326 ( lastWriteTimes , d , now ) }
public void testCreateElementNS1 $F72 throws Throwable { String namespaceURI = NUM00 ; String malformedName = NUM00 ; Document doc ; $F236 ( doc , load , builder ) { boolean success = _BOOL ; try { doc . createElementNS ( namespaceURI , malformedName ) ; } $F28595 ( success , ex , DOMException ) assertTrue ( NUM00 , success ) ; } }
private static void adjustAbs $F196672 ( array , lower , upper ) { int j , k ; double temp ; j = lower ; k = lower * NUM00 ; while ( k <= upper ) { if ( ( k < upper ) && ( Math . abs ( array [ k - NUM00 ] ) < Math . abs ( array [ k ] ) ) ) { k += NUM00 ; } if ( Math . abs ( array [ j - NUM00 ] ) < Math . abs ( array [ k - NUM00 ] ) ) { temp = array [ j - NUM00 ] ; array [ j - NUM00 ] = array [ k - NUM00 ] ; array [ k - NUM00 ] = temp ; } j = k ; k *= NUM00 ; } }
public synchronized IAudioProcessor remove ( int index ) { IAudioProcessor processor = processors . remove ( index ) ; buildFinalProcessor ( ) ; return processor ; }
LinkedList < TrieNode $F4203 > makeSuffixChain ( TrieNode $F4203 root , String suffix , T value ) { LinkedList < TrieNode $F4203 > $F19827 ( result ) ; String rootPrefix = root . getPrefix ( ) ; for ( $F51283 ( i , suffixSize , suffix ) ; i <= suffixSize ; i ++ ) { String newPrefix = rootPrefix + suffix . substring ( NUM00 , i ) ; TrieNode $F4203 newNode = TrieNode . makeNode ( newPrefix ) ; result . add ( newNode ) ; root . addChild ( newNode ) ; root = newNode ; } root . setValue ( value ) ; return result ; }
private static By byFromLocator ( String locator ) { if $F3106 ( locator ) { return By . xpath ( locator ) ; } if $F3106 ( locator ) { return By . id ( locator . replaceFirst ( NUM00 , NUM00 ) ) ; } if $F3106 ( locator ) { return By . cssSelector ( locator . replaceFirst ( NUM00 , NUM00 ) ) ; } if $F3106 ( locator ) { return By . xpath ( locator . replaceFirst ( NUM00 , NUM00 ) ) ; } if $F3106 ( locator ) { return By . name ( locator . replaceFirst ( NUM00 , NUM00 ) ) ; } if $F3106 ( locator ) { return By . linkText ( locator . replaceFirst ( NUM00 , NUM00 ) ) ; } if $F3106 ( locator ) { return By . partialLinkText ( locator . replaceFirst ( NUM00 , NUM00 ) ) ; } $F11416 ( locator ) }
private static void taskStarted ( ProgressThread task ) { for ( ProgressThreadStateListener l : listener . getListeners ( ProgressThreadStateListener . class ) ) { l . progressThreadStarted ( task ) ; } }
public static final void isCommentWF ( DOMErrorHandler errorHandler , DOMErrorImpl error , DOMLocatorImpl locator , String datavalue , boolean isXML11Version ) { if ( datavalue == null || $F1277 ( datavalue ) ) $F932 $F7782 ( dataarray , datavalue ) int datalength = dataarray . length ; if ( isXML11Version ) { int i = NUM00 ; while ( i < datalength ) { char c = dataarray [ i ++ ] ; if ( XML11Char . isXML11Invalid ( c ) ) { $F121844 ( XMLChar , c , i , datalength , c2 , dataarray ) String msg = DOMMessageFormatter . formatMessage ( DOMMessageFormatter . XML_DOMAIN , NUM00 , new Object [ ] { Integer . toString ( dataarray [ i - NUM00 ] , NUM00 ) } ) ; reportDOMError ( errorHandler , error , locator , msg , DOMError . SEVERITY_ERROR , NUM00 ) ; } else if ( c == NUM00 && i < datalength && dataarray [ i ] == NUM00 ) { String msg = DOMMessageFormatter . formatMessage ( DOMMessageFormatter . XML_DOMAIN , NUM00 , null ) ; reportDOMError ( errorHandler , error , locator , msg , DOMError . SEVERITY_ERROR , NUM00 ) ; } } } else { int i = NUM00 ; while ( i < datalength ) { char c = dataarray [ i ++ ] ; if ( XMLChar . isInvalid ( c ) ) { $F121844 ( XMLChar , c , i , datalength , c2 , dataarray ) String msg = DOMMessageFormatter . formatMessage ( DOMMessageFormatter . XML_DOMAIN , NUM00 , new Object [ ] { Integer . toString ( dataarray [ i - NUM00 ] , NUM00 ) } ) ; reportDOMError ( errorHandler , error , locator , msg , DOMError . SEVERITY_ERROR , NUM00 ) ; } else if ( c == NUM00 && i < datalength && dataarray [ i ] == NUM00 ) { String msg = DOMMessageFormatter . formatMessage ( DOMMessageFormatter . XML_DOMAIN , NUM00 , null ) ; reportDOMError ( errorHandler , error , locator , msg , DOMError . SEVERITY_ERROR , NUM00 ) ; } } } }
private void throwExceptionIfDestroyed ( String method ) throws DeepstreamRecordDestroyedException { if ( this . isDestroyed ) { throw new DeepstreamRecordDestroyedException ( method ) ; } }
public void upload ( final InputStream in , String artifact , String version , String fileName , Properties props ) throws IOException { props . put ( FILE_NAME_PROPERTY , fileName ) ; props . put ( VERSION_PROPERTY , version ) ; props . put ( ARTIFACT_PROPERTY , artifact ) ; storeProperties ( artifact , version , props ) ; try ( OutputStream out = newOutputStream ( getArtifact ( artifact , version , fileName ) ) ) { IOUtils . copyLarge ( in , out ) ; } $F3229 ( in ) }
static String escapeBytes ( final ByteString input ) { final StringBuilder $F133525 ( builder , input ) ; for ( $F2277 ( i , input ) ) { final byte b = input . byteAt ( i ) ; switch ( b ) { $F167274 ( builder ) $F2999 ( builder ) $F2999 ( builder ) $F2999 ( builder ) $F2999 ( builder ) $F2999 ( builder ) $F167274 ( builder ) $F2999 ( builder ) $F2999 ( builder ) $F2999 ( builder ) $F1267 if ( b >= NUM00 ) $F46352 ( builder , b ) else { $F84 ( builder ) builder . append ( ( char ) ( NUM00 + $F97528 ( b ) ) ) ; builder . append ( ( char ) ( NUM00 + $F97528 ( b ) ) ) ; builder . append ( ( char ) ( NUM00 + ( b & NUM00 ) ) ) ; } $F597 } } $F92 ( builder ) }
public void load $F72 throws IOException { if ( magicNumber == NUM00 ) { try ( InputReaderLittleEndian ins = new InputReaderLittleEndian ( new FileInputStreamAdapter ( fileName ) ) ) { $F33039 ( magicNumber , ins ) if ( magicNumber != MAGIC1BER ) $F3575 $F33039 ( version , ins ) if ( version > DAA_VERSION ) $F3575 $F33039 ( diamondBuild , ins ) $F33039 ( dbSeqs , ins ) $F33039 ( dbSeqsUsed , ins ) $F33039 ( dbLetters , ins ) $F33039 ( flags , ins ) $F33039 ( queryRecords , ins ) $F5961 ( modeRank , ins ) $F5961 ( gapOpen , ins ) $F5961 ( gapExtend , ins ) $F5961 ( reward , ins ) $F5961 ( penalty , ins ) $F5961 ( reserved1 , ins ) $F5961 ( reserved2 , ins ) $F5961 ( reserved3 , ins ) $F216839 ( k , ins ) $F216839 ( lambda , ins ) $F216839 ( reserved4 , ins ) $F216839 ( reserved5 , ins ) for ( $F1139 ( i , scoreMatrix ) ) { scoreMatrix [ i ] = ( byte ) ins . read ( ) ; } scoreMatrixName = Basic . toString ( scoreMatrix ) ; for ( $F1139 ( i , blockSize ) ) blockSize [ i ] = ins . readLong ( ) ; if $F41780 ( blockSize ) $F3575 for ( $F1139 ( i , blockTypeRank ) ) { blockTypeRank [ i ] = ( byte ) ins . read ( ) ; switch ( BlockType . value ( blockTypeRank [ i ] ) ) { case ref_names : if ( refNamesBlockIndex != - NUM00 ) $F3575 refNamesBlockIndex = i ; $F597 case ref_lengths : if ( refLengthsBlockIndex != - NUM00 ) $F3575 refLengthsBlockIndex = i ; $F597 case alignments : if ( alignmentsBlockIndex != - NUM00 ) $F3575 alignmentsBlockIndex = i ; $F597 } } if ( refNamesBlockIndex == - NUM00 ) $F3575 if ( refLengthsBlockIndex == - NUM00 ) $F3575 if ( alignmentsBlockIndex == - NUM00 ) $F3575 if ( refLengthsBlockIndex < refNamesBlockIndex ) $F3575 headerSize = ins . getPosition ( ) ; lnK = Math . log ( k ) ; } } }
private static $F18547 types ( Object ... values ) { if ( values == null ) { return $F33934 ; } $F65070 ( result , values ) for ( $F1139 ( i , values ) ) { Object value = values [ i ] ; result [ i ] = value == null ? NULL . class : value . getClass ( ) ; } return result ; }
private final void countAll $F72 throws IOException { MultiDocValues . OrdinalMap ordinalMap ; if ( dv instanceof MultiDocValues . MultiSortedSetDocValues ) { ordinalMap = ( ( MultiSortedSetDocValues ) dv ) . mapping ; } else { ordinalMap = null ; } IndexReader origReader = state . getOrigReader ( ) ; for ( LeafReaderContext context : origReader . leaves ( ) ) { LeafReader reader = context . reader ( ) ; SortedSetDocValues segValues = reader . getSortedSetDocValues ( field ) ; $F4322 ( segValues ) Bits liveDocs = reader . getLiveDocs ( ) ; if ( ordinalMap != null ) { final LongValues ordMap = ordinalMap . getGlobalOrds ( context . ord ) ; int numSegOrds = ( int ) segValues . getValueCount ( ) ; $F64664 ( segCounts , numSegOrds ) int docID ; while ( ( docID = segValues . nextDoc ( ) ) != DocIdSetIterator . NO_MORE_DOCS ) { if ( liveDocs == null || liveDocs . get ( docID ) ) { int term = ( int ) segValues . nextOrd ( ) ; while ( term != SortedSetDocValues . NO_MORE_ORDS ) { segCounts [ term ] ++ ; term = ( int ) segValues . nextOrd ( ) ; } } } for ( $F119 ( ord , numSegOrds ) ) { int count = segCounts [ ord ] ; if ( count != NUM00 ) { counts [ $F113095 ( ordMap , ord ) ] += count ; } } } else { int docID ; while ( ( docID = segValues . nextDoc ( ) ) != DocIdSetIterator . NO_MORE_DOCS ) { if ( liveDocs == null || liveDocs . get ( docID ) ) { int term = ( int ) segValues . nextOrd ( ) ; while ( term != SortedSetDocValues . NO_MORE_ORDS ) { counts [ term ] ++ ; term = ( int ) segValues . nextOrd ( ) ; } } } } } }
public void addToParent ( Element headerE ) throws Exception { $F48047 ( doc , headerE ) Element securityE = doc . createElementNS ( wsseNS , WSSEConstants . TAG_WSSE + NUM00 + WSSEConstants . TAG_SECURITYT ) ; securityE . setAttributeNS ( SOAPBindingConstants . NS_XML , WSSEConstants . TAG_XML_WSSE , wsseNS ) ; headerE . appendChild ( securityE ) ; Document binaryTokenD = XMLUtils . toDOMDocument ( toString ( ) , debug ) ; $F9029 ( binaryTokenE , binaryTokenD ) securityE . appendChild ( doc . importNode ( binaryTokenE , _BOOL ) ) ; }
public final static int skipSpaces $F16495 ( in , start ) { int pos = start ; while ( pos < in . length ( ) && $F64107 ( in , pos ) ) { pos ++ ; } return pos < in . length ( ) ? pos : - NUM00 ; }
public void update $F72 { if ( amplitude > NUM00 ) { $F5740 ( elapsed , System , timestamp ) double delta = amplitude * Math . exp ( - elapsed / timeConstant ) ; if $F33322 ( Math , delta ) { viewpointNode . drag ( lastDx * delta , lastDy * delta ) ; } else { amplitude = NUM00 ; updateLookAt ( ) ; } } }
$F1 public Assignment sample $F72 { if $F5973 ( samples ) { $F59615 ( selection , sampler , samples ) Assignment selected = samples . get ( selection ) ; return selected ; } else { $F18143 ( log ) return new Assignment $F72 ; } }
@ SneakyThrows public static X509Certificate readCertificate ( InputStream is ) { return $F28048 ( CERT_FACTORY , is ) ; }
public GuacamoleHTTPTunnelMap $F72 { executor . scheduleAtFixedRate ( new TunnelTimeoutTask ( TUNNEL_TIMEOUT * NUM00 ) , TUNNEL_TIMEOUT , TUNNEL_TIMEOUT , TimeUnit . SECONDS ) ; }
default B with ( String key , $F6969 value ) { return with ( key , $F155021 ( value ) ) ; }
private void rename ( Table table ) { if ( renameDefinitions != null ) { for ( Column col : table . getAllColumns ( ) ) { String newColName = renameDefinitions . getNewColumnName ( table . getSchema ( ) , table . getName ( ) , col . getName ( ) ) ; if ( newColName != null ) col . setName ( newColName ) ; } String newTableName = renameDefinitions . getNewTableName ( table . getSchema ( ) , table . getName ( ) ) ; String newSchemaName = renameDefinitions . getNewSchemaName ( table . getSchema ( ) , table . getName ( ) ) ; if ( newTableName != null ) table . setTable ( newTableName ) ; if ( newSchemaName != null ) table . setSchema ( newSchemaName ) ; } }
private void handleReadLastConfirmedError ( int rc ) { if ( BKException . Code . NoSuchLedgerExistsException == rc ) { if ( bkcNoLedgerExceptionsOnReadLAC . incrementAndGet ( ) > noLedgerExceptionOnReadLACThreshold ) { LOG . info ( NUM00 , new Object [ ] { fullyQualifiedName , currentLH , conf . getReadAheadNoSuchLedgerExceptionOnReadLACErrorThresholdMillis ( ) } ) ; $F3223 ( bkcNoLedgerExceptionsOnReadLAC ) if ( closeCurrentLedgerHandle ( ) ) { next . process ( BKException . Code . OK ) ; } $F665 } else { if $F8415 ( LOG ) { LOG . info ( NUM00 , new Object [ ] { fullyQualifiedName , currentLH , conf . getReadAheadWaitTime ( ) } ) ; } schedule ( ReadAheadWorker . this , conf . getReadAheadWaitTime ( ) ) ; $F665 } } else if ( BKException . Code . OK != rc ) { handleException ( ReadAheadPhase . READ_LAST_CONFIRMED , rc ) ; $F665 } }
public synchronized boolean put ( long fp ) { int index = ( int ) ( fp & this . mask ) ; $F2469 list = this . table [ index ] ; if ( list != null ) { int listlen = list . length ; for ( $F119 ( i , listlen ) ) { if ( list [ i ] == fp ) return _BOOL ; } } if ( count >= threshold ) { rehash ( ) ; index = ( int ) ( fp & this . mask ) ; list = this . table [ index ] ; } int len = $F60632 ( list ) ; $F2469 $F284494 ( newList , len ) ; if ( list != null ) $F135 ( System , list , newList , len ) newList [ len ] = fp ; this . table [ index ] = newList ; this . count ++ ; return _BOOL ; }
$F18907 ( extOrdering )
public void applyLayout $F72 { layout . setInitialLocation ( getPosition ( ) ) ; layout . layoutNeurons ( getNeuronList ( ) ) ; }
$F4562 ( view , deltaX , scrollX , deltaY , scrollY , scrollRange , fuzzyThreshold , scaleFactor , isTouchEvent , deltaValue , currentScrollValue , scrollValue , HORIZONTAL , VERTICAL , mode , newScrollValue , PullToRefreshBase , Log , LOG_TAG , State , Math )
public int nice $F72 $F22645 ( Integer , fields )
float layerSize ( int p_76490_1_ ) { if ( ( float ) p_76490_1_ < ( float ) this . heightLimit * NUM00 ) $F7629 else { float f = ( float ) this . heightLimit / NUM00 ; float f1 = f - ( float ) p_76490_1_ ; float f2 = MathHelper . sqrt_float ( f * f - f1 * f1 ) ; if ( f1 == NUM00 ) { f2 = f ; } else if ( Math . abs ( f1 ) >= f ) $F1083 return f2 * NUM00 ; } }
public static Method findStaticMethod ( $F6969 type , String name , $F41498 ( args ) ) throws NoSuchMethodException { Method method = findMethod ( type , name , args ) ; if $F48024 ( Modifier , method ) { throw new NoSuchMethodException ( NUM00 + name + NUM00 ) ; } return method ; }
private void fetchSearchServiceCardsFromServer ( String keyword , String categoryId ) { final $F2539 $F143413 ( params ) ; params . put ( HttpConstants . LATITUDE , SharedPreferenceHelper . getString ( R . string . pref_latitude ) ) ; params . put ( HttpConstants . LONGITUDE , SharedPreferenceHelper . getString ( R . string . pref_longitude ) ) ; params . put ( HttpConstants . TYPE , HttpConstants . SearchType . SERVICE_CARD ) ; params . put ( HttpConstants . GROUP_ID , categoryId ) ; params . put ( HttpConstants . PER , NUM00 ) ; params . put ( HttpConstants . RADIUS , NUM00 ) ; params . put ( HttpConstants . TITLE , keyword ) ; RetroCallback retroCallback ; retroCallback = new RetroCallback ( this ) ; retroCallback . setRequestId ( HttpConstants . ApiResponseCodes . SEARCH_SERVICES ) ; retroCallbackList . add ( retroCallback ) ; params . put ( HttpConstants . PAGE , NUM00 ) ; mYeloApi . getServiceCards ( params , retroCallback ) ; mSwipeRefreshLayout . setRefreshing ( _BOOL ) ; }
public void addPhonenumber ( String aPhonenumber ) { if $F283026 ( mPhoneNumbers , aPhonenumber ) $F207 ( mPhoneNumbers , aPhonenumber ) }
public static final String digitsAndPlusOnly ( Matcher matcher ) { $F83 ( buffer ) $F45144 ( matchingRegion , matcher ) for ( $F51284 ( i , size , matchingRegion ) ) { $F1280 ( character , matchingRegion , i ) if ( character == NUM00 || Character . isDigit ( character ) ) $F288 ( buffer , character ) } $F92 ( buffer ) }
boolean compareMethods ( Method a , Method b ) { if ( ( a == null ) != ( b == null ) ) { return _BOOL ; } if ( a != null && b != null ) { $F3067 ( a , b , _BOOL ) } return _BOOL ; }
MarkerSegment findMarkerSegment ( int tag ) { $F10531 ( iter , markerSequence ) while $F2921 ( iter ) { MarkerSegment seg = ( MarkerSegment ) iter . next ( ) ; if ( seg . tag == tag ) { return seg ; } } $F1274 }
private static Reader openInput ( String from ) { try { return CliUtils . reader ( from ) ; } catch ( IOException e ) { $F5197 ( log , e ) $F5194 ( System ) $F1274 } }
public PublisherConcatArray $F4203 concatAdditionalSourceFirst ( $F40799 ( source ) ) { int n = array . length ; $F1431 $F40798 [ ] $F48543 ( newArray , n ) ; $F135 ( System , array , newArray , n ) newArray [ NUM00 ] = source ; return new PublisherConcatArray $F200 ( delayError , newArray ) ; }
protected void doPublish ( String tenantId , $F5675 items , String subscriber , int retryCount , long delay ) throws Exception { String data = mapper . writeValueAsString ( items ) ; TextMessage tm = session . createTextMessage ( data ) ; if ( tenantId != null ) { tm . setStringProperty ( NUM00 , tenantId ) ; } if ( subscriber != null ) { tm . setStringProperty ( NUM00 , subscriber ) ; } tm . setIntProperty ( NUM00 , retryCount ) ; if ( delay > NUM00 ) { tm . setLongProperty ( NUM00 , System . currentTimeMillis ( ) + delay ) ; } if $F14148 ( log , Level ) { $F150605 ( log , tm ) } producer . send ( tm ) ; }
$F1 public boolean eIsSet ( int featureID ) { switch ( featureID ) { case MappingPackage . ATTRIBUTE__NAME : $F6439 ( NAME_EDEFAULT , name ) case MappingPackage . ATTRIBUTE__VALUE : $F6439 ( VALUE_EDEFAULT , value ) } $F6444 ( super , featureID ) }
protected void checkValid $F72 throws URIException { if ( ! ( equals ( _scheme , DEFAULT_SCHEME ) || _scheme == null ) ) { throw new URIException ( URIException . PARSING , NUM00 ) ; } }
public PrivateKeyUsageExtension ( Boolean critical , Object value ) throws CertificateException , IOException { this . extensionId = PKIXExtensions . PrivateKeyUsage_Id ; $F77551 ( this , critical ) $F149380 ( this , value ) DerInputStream str = new DerInputStream ( this . extensionValue ) ; DerValue [ ] seq = str . getSequence ( NUM00 ) ; for ( $F1139 ( i , seq ) ) { DerValue opt = seq [ i ] ; if ( opt . isContextSpecific ( TAG_BEFORE ) && ! opt . isConstructed ( ) ) { if ( notBefore != null ) { throw new CertificateParsingException $F580 ; } opt . resetTag ( DerValue . tag_GeneralizedTime ) ; str = new DerInputStream $F87573 ( opt ) ; notBefore = str . getGeneralizedTime ( ) ; } else if ( opt . isContextSpecific ( TAG_AFTER ) && ! opt . isConstructed ( ) ) { if ( notAfter != null ) { throw new CertificateParsingException $F580 ; } opt . resetTag ( DerValue . tag_GeneralizedTime ) ; str = new DerInputStream $F87573 ( opt ) ; notAfter = str . getGeneralizedTime ( ) ; } else $F3490 } }
$F1 public $F37278 generatePeriods ( DateTimeUnit dateTimeUnit ) { Calendar cal = getCalendar ( ) ; dateTimeUnit . setMonth ( NUM00 ) ; $F37280 ( dateTimeUnit ) $F37282 ( periods , Lists ) $F10485 ( year , dateTimeUnit ) while ( dateTimeUnit . getYear ( ) == year ) { $F12366 ( periods , createPeriod , dateTimeUnit , cal ) dateTimeUnit = cal . plusMonths ( dateTimeUnit , NUM00 ) ; } return periods ; }
public static SecretKey createAESKey $F72 { try { $F10310 ( kgen , KeyGenerator ) final int keySize = NUM00 ; kgen . init ( keySize ) ; return kgen . generateKey ( ) ; } catch ( final NoSuchAlgorithmException e ) $F302 ( e ) $F1274 }
$F1 public void valueChange ( ValueChangeEvent e ) { String name = e . getPropertyName ( ) ; Object value = e . getNewValue ( ) ; log . config ( name + NUM00 + value ) ; $F8249 ( value ) }
$F1309 public static JSONObject parseJson ( String response ) throws JSONException , FacebookError { if $F3057 ( response ) { throw new FacebookError $F580 ; } $F16931 ( response ) $F16933 ( json , response ) if $F16934 ( json ) { JSONObject error = json . getJSONObject ( NUM00 ) ; throw new FacebookError ( error . getString ( NUM00 ) , error . getString ( NUM00 ) , NUM00 ) ; } if ( json . has ( NUM00 ) && json . has ( NUM00 ) ) { throw new FacebookError ( json . getString ( NUM00 ) , NUM00 , Integer . parseInt ( json . getString ( NUM00 ) ) ) ; } if $F16934 ( json ) { throw new FacebookError ( NUM00 , NUM00 , Integer . parseInt ( json . getString ( NUM00 ) ) ) ; } if $F16934 ( json ) { throw new FacebookError $F16961 ( json ) ; } if $F16934 ( json ) { throw new FacebookError $F16961 ( json ) ; } return json ; }
public SpyVersions loadVersions $F72 throws XMLException { setLoading ( _BOOL ) ; final String urlString = propertyLoader . getProperty ( BasePropertyNames . VERSION_INFO_URL ) + NUM00 + currentRelease ; try { $F23801 ( url , urlString ) final String xml = IOUtils . toString ( url . openStream ( ) ) ; versions = ( SpyVersions ) loadFromString ( xml ) ; } catch ( IOException | NullPointerException e ) { throw new XMLException ( NUM00 + urlString , e ) ; } setLoading ( _BOOL ) ; return versions ; }
@ RequestMapping ( $F3144 , method = POST , produces = APPLICATION_JSON_VALUE ) public ResponseEntity < PageResponse < UserDTO > > findAll ( $F151143 PageRequestByExample < UserDTO > prbe ) throws URISyntaxException { PageResponse < UserDTO > pageResponse = userDTOService . findAll ( prbe ) ; return new $F151149 ( pageResponse , new HttpHeaders $F72 , HttpStatus . OK ) ; }
public void addFooterView ( View view ) $F36131 ( mFooterViews , view , notifyDataSetChanged )
public void addFirst ( String seq ) { queue = seq + queue . substring ( pos ) ; pos = NUM00 ; }
public boolean isReadOnly ( boolean useSessionStatus ) throws SQLException { if ( useSessionStatus && ! this . isClosed && versionMeetsMinimum ( $F25460 ) && ! getUseLocalSessionState ( ) && getReadOnlyPropagatesToServer ( ) ) { java . sql . Statement stmt = null ; java . sql . ResultSet rs = null ; try { try { stmt = getMetadataSafeStatement ( ) ; $F264240 ( rs , stmt ) if $F1682 ( rs ) { return rs . getInt ( NUM00 ) != NUM00 ; } } catch ( SQLException ex1 ) { if ( ex1 . getErrorCode ( ) != MysqlErrorNumbers . ER_MUST_CHANGE_PASSWORD || getDisconnectOnExpiredPasswords ( ) ) { throw SQLError . createSQLException ( NUM00 , SQLError . SQL_STATE_GENERAL_ERROR , ex1 , getExceptionInterceptor ( ) ) ; } } } finally { if ( rs != null ) { try $F881 ( rs ) $F15720 rs = null ; } if ( stmt != null ) { try $F881 ( stmt ) $F15720 stmt = null ; } } } return this . readOnly ; }
public void testConsume $F72 { AtomicInteger $F72840 ( sum ) ; $F408697 p = basicPublisher ( ) ; $F159508 f = p . consume ( null ) ; int n = NUM00 ; for ( $F50176 ( i , n ) ) p . submit ( i ) ; $F59 ( p ) $F14454 ( f ) assertEquals ( ( n * ( n + NUM00 ) ) / NUM00 , sum . get ( ) ) ; }
public void exprSetParent ( ExpressionNode n ) { super . exprSetParent ( n ) ; $F2199 ( nArgs , m_argVec ) for ( $F119 ( i , nArgs ) ) { $F11427 ( arg , m_argVec , i ) arg . exprSetParent ( n ) ; } }
public static void cleanDirectory ( File directory ) throws IOException $F189472 ( directory , message , files , exception , file , forceDelete , ioe )
public final boolean isRegistered $F72 { return $F132005 ( canonicalName ) ; }
private static DownscaleQuality addConstant ( String type ) { init ( ) ; if $F1710 ( constList , type ) $F5754 ( type ) DownscaleQuality q = new DownscaleQuality ( type ) ; constList . put ( type , q ) ; return q ; }
public void bail ( String message , boolean printUsageStatement ) { Debug . output ( message ) ; $F32367 ( printUsageStatement , printUsage ) $F5194 ( System ) }
private void assertTimestampsEqualWithEpsilon ( long expected , long actual , int epsilon , String desc ) { assertTrue ( NUM00 + desc + NUM00 + epsilon + NUM00 + expected + NUM00 + actual , Math . abs ( actual - expected ) < epsilon ) ; }
public SpiderSitemapXMLParser ( SpiderParam params ) { super ( ) ; $F826 ( params ) this . params = params ; }
public boolean flush ( boolean deaccelerated ) ;
public void addHop ( int id ) { $F2329 ( entities ) hopsNumber ++ ; $F269561 ( entities , Integer , id ) }
protected $F8748 datasetIntegrity ( boolean nominalPredictor , boolean numericPredictor , boolean stringPredictor , boolean datePredictor , boolean relationalPredictor , boolean multiInstance , int classType , boolean predictorMissing , boolean classMissing ) { print ( NUM00 ) ; printAttributeSummary ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType ) ; print ( NUM00 ) ; int numTrain = getNumInstances ( ) , numClasses = NUM00 , missingLevel = NUM00 ; $F125783 ( result ) Instances train = null ; Associator associator = null ; try { train = makeTestDataset ( NUM00 , numTrain , nominalPredictor ? getNumNominal ( ) : NUM00 , numericPredictor ? getNumNumeric ( ) : NUM00 , stringPredictor ? getNumString ( ) : NUM00 , datePredictor ? getNumDate ( ) : NUM00 , relationalPredictor ? getNumRelational ( ) : NUM00 , numClasses , classType , multiInstance ) ; if ( missingLevel > NUM00 ) { addMissing ( train , missingLevel , predictorMissing , classMissing ) ; } associator = AbstractAssociator . makeCopies ( getAssociator ( ) , NUM00 ) [ NUM00 ] ; } catch ( Exception ex ) $F220112 ( ex ) try { Instances trainCopy = new Instances ( train ) ; associator . buildAssociations ( trainCopy ) ; compareDatasets ( train , trainCopy ) ; println ( NUM00 ) ; result [ NUM00 ] = _BOOL ; } catch ( Exception ex ) { println ( NUM00 ) ; result [ NUM00 ] = _BOOL ; if ( m_Debug ) { println ( NUM00 ) ; print ( NUM00 ) ; $F5354 ( println , ex ) println ( NUM00 ) ; println ( $F369 ( train ) ) ; } } return result ; }
$F18907 ( mEventQueue )
public static $F117572 ( testPrimitiveInstantiation , _BOOL )
public void readEntries ( TableKelp table , InSegment reader , SegmentEntryCallback cb ) { TempBuffer tBuf = TempBuffer . createLarge ( ) ; $F160054 ( buffer , tBuf ) InStore sIn = reader . getStoreRead ( ) ; $F96 tableKey = new byte [ TableKelp . TABLE_KEY_SIZE ] ; for ( int ptr = length ( ) - BLOCK_SIZE ; ptr > NUM00 ; ptr -= BLOCK_SIZE ) { sIn . read ( getAddress ( ) + ptr , buffer , NUM00 , buffer . length ) ; int index = NUM00 ; long seq = BitsUtil . readLong ( buffer , index ) ; index += NUM00 ; if ( seq != getSequence ( ) ) { log . warning ( L . l ( NUM00 , seq , getSequence ( ) , Long . toHexString ( getAddress ( ) + ptr ) ) ) ; $F597 } $F198866 ( System , buffer , index , tableKey ) index += tableKey . length ; if $F1209 ( Arrays , tableKey , _tableKey ) { log . warning ( L . l ( NUM00 , Hex . toShortHex ( tableKey ) , Hex . toShortHex ( _tableKey ) , Long . toHexString ( getAddress ( ) + ptr ) ) ) ; $F597 } int head = index ; while ( head < BLOCK_SIZE && buffer [ head ] != NUM00 ) { head = readEntry ( table , buffer , head , cb , getAddress ( ) ) ; } boolean isCont = buffer [ head + NUM00 ] != NUM00 ; $F30724 ( isCont ) } tBuf . free ( ) ; }
static int numberOfHosts ( $F305017 net2InitiatorsMap ) { $F66346 ( hostSet ) for ( $F15661 initiators : net2InitiatorsMap . values ( ) ) { for ( Initiator init : initiators ) { hostSet . add ( init . getHost ( ) ) ; } } $F1651 ( hostSet ) }
public void addCertificates ( Store certStore ) throws CMSException { certs . addAll ( CMSUtils . getCertificatesFromStore ( certStore ) ) ; }
protected void processLob ( LobMetadata lob , DatabaseMapping mapping , MetadataClass referenceClass , boolean isForMapKey ) { lob . process ( mapping , this , referenceClass , isForMapKey ) ; }
protected AttributesImpl startPrefixMapping ( Element element , NamespaceStack namespaceStack ) throws SAXException { AttributesImpl namespaceAttributes = null ; Namespace elementNamespace = element . getNamespace ( ) ; if ( ( elementNamespace != null ) && ! isIgnoreableNamespace ( elementNamespace , namespaceStack ) ) { namespaceStack . push ( elementNamespace ) ; contentHandler . startPrefixMapping ( elementNamespace . getPrefix ( ) , elementNamespace . getURI ( ) ) ; namespaceAttributes = addNamespaceAttribute ( namespaceAttributes , elementNamespace ) ; } List < Namespace > declaredNamespaces = element . declaredNamespaces ( ) ; for ( Namespace namespace : declaredNamespaces ) { if ( ! isIgnoreableNamespace ( namespace , namespaceStack ) ) { namespaceStack . push ( namespace ) ; contentHandler . startPrefixMapping ( namespace . getPrefix ( ) , namespace . getURI ( ) ) ; namespaceAttributes = addNamespaceAttribute ( namespaceAttributes , namespace ) ; } } return namespaceAttributes ; }
$F41720 ( value , absMin , absMax , absValue , Math )
public void printStackTrace ( java . io . PrintWriter pw ) $F31329 ( rootCause , superString , super , pw )
private static DataFlavor [ ] convertToArray ( List < DataFlavor > dataFlavourList ) { DataFlavor [ ] array = new DataFlavor $F2313 ( dataFlavourList ) ; dataFlavourList . toArray ( array ) ; return array ; }
public void testChoiceEmptyIconErrorHandling $F72 { String xml = NUM00 ; xml += createStartMissionXml ( NUM00 , NUM00 ) ; xml += createStartChoiceMomentXml ( NUM00 , NUM00 , NUM00 , NUM00 ) ; xml += createChoiceXml ( NUM00 , NUM00 , NUM00 , _BOOL , _BOOL , NUM00 ) ; xml += createChoiceXml ( NUM00 , NUM00 , NUM00 , _BOOL , _BOOL , NUM00 ) ; xml += createEndChoiceMomentXml ( ) ; xml += createEndChoiceMomentXml ( ) ; xml += createEndMissionXml ( ) ; Utils . logDebug ( TAG , xml ) ; $F217487 ( momentInputStream , xml ) mMission = new Mission ( mMissionData ) ; boolean didMissionParseFail = _BOOL ; try { mMission . readMoments ( momentInputStream ) ; } catch ( MissionParseException e ) $F25007 ( e , didMissionParseFail , _BOOL ) Assert . assertEquals ( _BOOL , didMissionParseFail ) ; }
public static String translateAttribute ( String attributes ) throws IOException { $F5078 flags = strAttrToBooleanFlags ( attributes ) ; $F83 ( sb ) if ( flags [ READ_ONLY ] == YES ) $F84 ( sb ) else if ( flags [ READ_ONLY ] == NO ) $F84 ( sb ) if ( flags [ HIDDEN ] == YES ) $F84 ( sb ) else if ( flags [ HIDDEN ] == NO ) $F84 ( sb ) if ( flags [ SYSTEM ] == YES ) $F84 ( sb ) else if ( flags [ SYSTEM ] == NO ) $F84 ( sb ) if ( flags [ ARCHIVE ] == YES ) $F84 ( sb ) else if ( flags [ ARCHIVE ] == NO ) $F84 ( sb ) $F92 ( sb ) }
public static int nextIndexId $F72 { return msgIdx . getAndIncrement ( ) ; }
private void fillFieldValues $F72 { if ( isCreationPanel ) { phrase . setText ( NUM00 + Hearing . DEFAULT_PHRASE ) ; outputAmount . setText ( NUM00 + Hearing . DEFAULT_OUTPUT_AMOUNT ) ; } else { phrase . setText ( NUM00 + hearingSensor . getPhrase ( ) ) ; outputAmount . setText ( NUM00 + hearingSensor . getOutputAmount ( ) ) ; } }
public static boolean checkSecurityInfos ( String endpoint , Identity clientIdentity , List < SecurityInfo > securityInfos ) { if ( clientIdentity . isSecure ( ) ) { if $F4251 ( securityInfos ) { $F18942 ( LOG , endpoint ) return _BOOL ; } else { for ( SecurityInfo securityInfo : securityInfos ) { $F24922 ( checkSecurityInfo , endpoint , clientIdentity , securityInfo , _BOOL ) } return _BOOL ; } } else if $F1032 ( securityInfos ) { $F18942 ( LOG , endpoint ) return _BOOL ; } return _BOOL ; }
public boolean retainAll ( AbstractIntList other ) $F205711 ( other , size , _BOOL , setSize , limit , j , i , getQuick , setQuick , modified )
public static ArrayList < ByteString > byteArraysToStrings ( $F3511 byteArrays ) { $F1338 ( byteArrays ) ArrayList < ByteString > byteStrings = new ArrayList < ByteString > $F72 ; for ( $F96 bytes : byteArrays ) { byteStrings . add ( ByteString . of ( bytes ) ) ; } return byteStrings ; }
void addIndex ( IndexType type , $F3803 columnNames ) { IndexDefinition index = new IndexDefinition $F72 ; index . indexName = tableName + NUM00 + indexes . size ( ) ; index . columnNames = New . arrayList ( columnNames ) ; index . type = type ; indexes . add ( index ) ; }
public Builder withKeyStoreKeyPassword ( String keyStoreKeyPassword ) { properties . setProperty ( NettyOptions . SSL_KEY_STORE_KEY_PASSWORD , Assert . notNull ( keyStoreKeyPassword , NUM00 ) ) ; return this ; }
public ZookeeperStateMachineEnsemble ( CuratorFramework curatorClient , String basePath ) { this ( curatorClient , basePath , _BOOL , DEFAULT_LOGSIZE ) ; }
public static CustomShortcutSet createShortcut ( char ch ) { $F2544 ( mnemonic , Character , ch ) String shortcut = SystemInfo . isMac && SystemInfo . isJavaVersionAtLeast ( NUM00 ) ? NUM00 + mnemonic : NUM00 + mnemonic ; $F32358 ( CustomShortcutSet , shortcut ) }
public void gc $F72 { $F58463 ( System ) }
private Node deleteMin ( Node x ) { if ( x . left == null ) return x . right ; x . left = deleteMin ( x . left ) ; x . size = NUM00 + size ( x . left ) + size ( x . right ) ; x . height = NUM00 + Math . max ( height ( x . left ) , height ( x . right ) ) ; return balance ( x ) ; }
public static void resetCounters $F72 $F18712 ( errors , warnings )
public void write ( CeylonConfig config , File source , OutputStream out ) throws IOException { if $F7110 ( source ) { InputStream in = null ; try { $F5335 ( in , source ) write ( config , in , out ) ; } $F34262 ( in ) } else { throw new FileNotFoundException $F580 ; } }
protected Map < TargetClass , List < Attribute . TypeCompound > > sift ( final Iterable < Attribute . TypeCompound > typeCompounds ) { final Map < TargetClass , List < Attribute . TypeCompound > > targetClassToCompound = new EnumMap $F200 ( TargetClass . class ) ; for ( $F40424 ( targetClass , TargetClass ) ) { targetClassToCompound . put ( targetClass , new ArrayList < TypeCompound > $F72 ) ; } for ( final Attribute . TypeCompound typeCompound : typeCompounds ) { final TargetType typeCompoundTarget = typeCompound . position . type ; final List < Attribute . TypeCompound > destList ; if ( ElementAnnotationUtil . contains ( typeCompoundTarget , annotatedTargets ( ) ) ) { destList = targetClassToCompound . get ( TargetClass . TARGETED ) ; } else if ( ElementAnnotationUtil . contains ( typeCompoundTarget , validTargets ( ) ) ) { destList = targetClassToCompound . get ( TargetClass . VALID ) ; } else { destList = targetClassToCompound . get ( TargetClass . INVALID ) ; } destList . add ( typeCompound ) ; } return targetClassToCompound ; }
protected synchronized void updateLocation ( Point newLocn ) { prev = locn ; locn = newLocn ; if ( Math . abs ( locn . x - prev . x ) > hysteresis || Math . abs ( locn . y - prev . y ) > hysteresis ) { if ( timer . isRunning ( ) ) $F5191 ( timer ) } else { if $F28174 ( timer ) $F2346 ( timer ) } }
$F1 public int compareTo ( Value o ) { if ( o instanceof StringVal ) { return str . compareTo ( ( ( StringVal ) o ) . str ) ; } else $F1083 }
public void bind ( IntegerProperty property , int value ) { $F140642 ( isAchieved ) bind ( property . greaterThanOrEqualTo ( value ) ) ; BooleanBinding bb = property . greaterThanOrEqualTo ( value / NUM00 ) ; progressListener = null ; bb . addListener ( progressListener ) ; }
public void removeColumn ( Column c ) { $F12747 ( idx , m_columns , c ) $F6853 ( idx ) removeColumn ( idx ) ; }
public synchronized void write ( String logData ) { if ( logEnabled ) { histData . append ( logData ) ; $F8797 ( histData ) $F8073 ( histData ) } }
public void closeConnection $F72 { try $F6399 ( m_connection ) catch ( final SQLException exception ) { NaviLogger . severe ( NUM00 , exception ) ; } m_connection = null ; }
public StructEmBayesSearchEditor ( StructEmBayesSearchRunner semBayesEstWrapper ) { this ( semBayesEstWrapper . getEstimatedBayesIm ( ) , semBayesEstWrapper . getDataSet ( ) ) ; }
public void removeActionListener ( ActionListener listener ) { forwardProjectionButton . addActionListener ( listener ) ; backProjectionButton . addActionListener ( listener ) ; }
$F37597 ( tag , msg , args , sLevel , LEVEL_FATAL , String , Log )
boolean isLiteral ( int index ) { if ( isValidMask ( ) && index < string . length ( ) ) $F8314 ( literalMask , index ) return _BOOL ; }
protected Granularity generateGranularity ( String granularity , GranularityParser granularityParser ) throws BadApiRequestException { try { return granularityParser . parseGranularity ( granularity ) ; } catch ( GranularityParseException e ) { LOG . error ( UNKNOWN_GRANULARITY . logFormat ( granularity ) , granularity ) ; throw new BadApiRequestException $F1783 ( e ) ; } }
public WordIterator $F72 { $F90366 ( this , Locale ) }
$F1 public void close $F72 { $F39863 ( leaf ) ccMgr . releaseIndexLocks ( ) ; dirsMayBeUpdated = null ; }
public void pushFile ( String local , String remote , ISyncProgressMonitor monitor ) throws SyncException , IOException , TimeoutException { $F1705 ( f , local ) if $F1906 ( f ) { throw new SyncException ( SyncError . NO_LOCAL_FILE ) ; } if $F3444 ( f ) { throw new SyncException ( SyncError . LOCAL_IS_DIRECTORY ) ; } monitor . start ( $F5338 ( f ) ) ; doPushFile ( local , remote , monitor ) ; $F5191 ( monitor ) }
public String process ( Item seg ) throws ProcessException $F73165 ( segCodaCtype , seg )
public void resize ( int size ) { if ( buffer != null ) { if ( size >= NUM00 && size < buffer . size ( ) ) { $F40484 ( oldLastIndex , buffer ) int newLastIndex = size - NUM00 ; for ( int i = oldLastIndex ; i > newLastIndex ; i -- ) $F106 ( buffer , i ) } } else { if ( size >= NUM00 && size < offsets . size ( ) ) { $F249632 ( offset , offsets , size ) byteCache . resize ( key , offset ) ; $F17804 newOffsets = new $F17804 ( size ) ; for ( $F119 ( i , size ) ) $F62006 ( newOffsets , offsets , i ) offsets = newOffsets ; } } }
$F195241 ( uint8 , hexString , Integer , low , high , result )
protected void sprint ( short shortField ) $F45719 ( sprint , String , shortField )
protected void initFromDir ( String prefix , File dir ) { $F5237 files ; files = dir . listFiles ( new ClassFileFilter $F72 ) ; for ( File file : files ) { if ( prefix == null ) { $F12110 ( add , file ) } else { add ( $F44940 ( prefix , file ) ) ; } } files = dir . listFiles ( new DirectoryFilter $F72 ) ; for ( File file : files ) { if ( prefix == null ) { initFromDir ( file . getName ( ) , file ) ; } else { initFromDir ( $F44940 ( prefix , file ) , file ) ; } } }
public void removeBandwidth ( String name ) { if ( name != null ) if ( bandwidthList != null ) { for ( $F2277 ( i , bandwidthList ) ) { Object o = bandwidthList . elementAt ( i ) ; if ( o instanceof BandwidthField ) { BandwidthField b = ( BandwidthField ) o ; try { $F14181 ( type , b ) if ( type != null ) { if $F1238 ( name , type ) $F106 ( bandwidthList , b ) } } catch ( SdpParseException e ) $F845 } } } }
protected static void succeed $F72 $F63967 ( System )
public static long now $F72 { $F21879 ( System ) }
public static String collapseNewlines ( String argStr ) { $F12685 ( last , argStr ) $F280 ( argBuf ) for ( $F1088 ( cIdx , argStr ) ) { $F1280 ( ch , argStr , cIdx ) if ( ch != NUM00 || last != NUM00 ) { argBuf . append ( ch ) ; last = ch ; } } $F92 ( argBuf ) }
LinkedList < TrieNode $F4203 > makeSuffixChain ( TrieNode $F4203 root , String suffix , T value ) { LinkedList < TrieNode $F4203 > $F19827 ( result ) ; String rootPrefix = root . getPrefix ( ) ; for ( $F51283 ( i , suffixSize , suffix ) ; i <= suffixSize ; i ++ ) { String newPrefix = rootPrefix + suffix . substring ( NUM00 , i ) ; TrieNode $F4203 newNode = TrieNode . makeNode ( newPrefix ) ; result . add ( newNode ) ; root . addChild ( newNode ) ; root = newNode ; } root . setValue ( value ) ; return result ; }
$F1 protected String generateJavadoc ( int index ) throws Exception $F9451
public Properties extractProperties ( Iterable < $F19317 > propSrc ) { $F2697 ( result ) for ( $F19317 entry : propSrc ) { $F3477 ( name , entry ) if ( isNamespacedProperty ( name ) ) { $F840 ( val , entry ) result . setProperty ( name , val ) ; } } return result ; }
public T removeLast $F72 { if $F6887 ( rows ) $F30606 ( rows ) return instance ( ) ; }
public static void ensureVisible ( String componentName ) { if ( verbose ) $F47196 ( log , componentName ) ensureVisible ( findByName ( componentName ) ) ; }
public char next $F72 { return pos < in . length ( ) ? in . charAt ( pos ++ ) : NUM00 ; }
public void endRepresentation $F72 { if ( ! representationProtectionsSet ) { if ( currentRepresentationProtections != null ) $F57005 ( Collections , currentRepresentationProtections , this ) representationProtections = currentRepresentationProtections ; representationProtectionsSet = _BOOL ; } else { if ( currentRepresentationProtections == null ) { Assertions . checkState ( representationProtections == null ) ; } else { Collections . sort ( currentRepresentationProtections , this ) ; Assertions . checkState ( currentRepresentationProtections . equals ( representationProtections ) ) ; } } currentRepresentationProtections = null ; }
public StandardPieSectionLabelGenerator ( String labelFormat ) { this ( labelFormat , NumberFormat . getNumberInstance ( ) , NumberFormat . getPercentInstance ( ) ) ; }
public static CharSequence [ ] split ( CharSequence line , int delimiter ) { CharSequence [ ] tokens0 = split ( line , delimiter , N ) ; if ( tokens0 . length < N ) { return tokens0 ; } else { CharSequence [ ] tokens1 = split ( tokens0 [ N - NUM00 ] , delimiter ) ; CharSequence [ ] tokens2 = new CharSequence $F102045 ( tokens0 , tokens1 ) ; $F12508 ( System , tokens0 , tokens2 ) System . arraycopy ( tokens1 , NUM00 , tokens2 , tokens0 . length - NUM00 , tokens1 . length ) ; return tokens2 ; } }
public CCTimer ( Object t , String s , float seconds ) { target = t ; selector = s ; interval = seconds ; elapsed = - NUM00 ; try { $F20850 ( cls , target ) invocation = cls . getMethod ( s , Float . TYPE ) ; } catch ( NoSuchMethodException e ) $F302 ( e ) }
public Tuple read $F72 throws IOException { try { Map fields = jsonTupleStream . next ( ) ; if ( fields == null ) { $F28017 ( m ) $F545 ( m , _BOOL ) return new Tuple ( m ) ; } else { $F28495 ( msg , fields ) if ( msg != null ) { HandledException ioException = new HandledException ( msg ) ; throw ioException ; } if ( trace ) { fields . put ( NUM00 , this . baseUrl ) ; $F70196 ( slice , fields ) } if ( fieldMappings != null ) $F176272 ( fields , mapFields , fieldMappings ) return new Tuple ( fields ) ; } } catch ( HandledException e ) { throw new IOException ( NUM00 + this . baseUrl + NUM00 + e . getMessage ( ) ) ; } catch ( Exception e ) { throw new IOException ( NUM00 + this . baseUrl + NUM00 , e ) ; } }
private String compute ( String left , double right , boolean isInteger ) { if ( left == null && Double . isNaN ( right ) ) $F1337 if ( isInteger && right == ( int ) right ) { return $F81465 ( left ) + ( int ) right ; } else if $F28102 ( Double , right ) { return $F81465 ( left ) + Tools . formatNumber ( right ) ; } else { return $F81465 ( left ) + ( Double . isNaN ( right ) ? NUM00 : right ) ; } }
public void removePropertyChangeListener ( final PropertyChangeListener listener ) $F9106 ( propertyChangeSupport , listener )
public void loadXML ( Node stepnode , List < DatabaseMeta > databases , Map < String , Counter > counters ) throws KettleXMLException { try { this . tabelName = XMLHandler . getTagValue ( stepnode , NUM00 ) ; this . outputRowSize = XMLHandler . getTagValue ( stepnode , NUM00 ) ; this . factDimLensString = XMLHandler . getTagValue ( stepnode , NUM00 ) ; this . tableName = XMLHandler . getTagValue ( stepnode , NUM00 ) ; this . databaseName = XMLHandler . getTagValue ( stepnode , NUM00 ) ; this . dimensionCount = XMLHandler . getTagValue ( stepnode , NUM00 ) ; this . noDictionaryDims = XMLHandler . getTagValue ( stepnode , NUM00 ) ; this . noDictionaryDimsMapping = XMLHandler . getTagValue ( stepnode , NUM00 ) ; this . complexDimensionCount = XMLHandler . getTagValue ( stepnode , NUM00 ) ; this . measureCount = XMLHandler . getTagValue ( stepnode , NUM00 ) ; this . updateMemberRequest = XMLHandler . getTagValue ( stepnode , NUM00 ) ; this . measureDataType = XMLHandler . getTagValue ( stepnode , NUM00 ) ; this . partitionID = XMLHandler . getTagValue ( stepnode , NUM00 ) ; this . segmentId = XMLHandler . getTagValue ( stepnode , NUM00 ) ; this . taskNo = XMLHandler . getTagValue ( stepnode , NUM00 ) ; } catch ( Exception e ) { throw new KettleXMLException ( NUM00 , e ) ; } }
public final $F2027 hashSignature ( final $F2027 signature ) { $F4120 ( hash , stages ) int rows = signature . length / stages ; for ( $F1139 ( i , signature ) ) { int stage = Math . min ( i / rows , stages - NUM00 ) ; hash [ stage ] = ( int ) ( ( hash [ stage ] + ( long ) signature [ i ] * LARGE_PRIME ) % buckets ) ; } return hash ; }
void onConsumeFinished ( Purchase purchase , IabResult result ) ;
public void cast ( final Type from , final Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Opcodes . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Opcodes . D2L ) ; } else { mv . visitInsn ( Opcodes . D2I ) ; cast ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Opcodes . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Opcodes . F2L ) ; } else { mv . visitInsn ( Opcodes . F2I ) ; cast ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Opcodes . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Opcodes . L2F ) ; } else { mv . visitInsn ( Opcodes . L2I ) ; cast ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Opcodes . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Opcodes . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Opcodes . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Opcodes . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Opcodes . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Opcodes . I2S ) ; } } } }
private void addTriggerGroupName ( String groupName ) throws JobPersistenceException , ResourceException { addRepoListName ( groupName , TRIGGER_GROUP_NAMES_RESOURCE_PATH , NUM00 ) ; }
public String readString $F72 throws IOException { int firstByte = readByte ( ) ; int length = readInt ( firstByte , PREFIX_8_BITS ) ; $F2175 ( encoded , length ) bytesLeft -= length ; in . readFully ( encoded ) ; $F34259 ( encoded ) }
private synchronized void clearTempFiles $F72 { if $F20074 ( tempFiles ) { $F10531 ( it , tempFiles ) File file = null ; while $F2921 ( it ) { file = ( File ) it . next ( ) ; $F1900 ( file ) } $F725 ( tempFiles ) } }
private Bitmap readAndDecompressThumbnail ( File file ) { try { if $F4012 ( file ) { $F4647 ( instream , file ) ReadableByteChannel bytechan = Channels . newChannel ( instream ) ; ByteBuffer buff = ByteBuffer . allocateDirect ( $F5338 ( file ) ) ; if ( buff != null ) { bytechan . read ( buff ) ; $F59 ( instream ) $F23501 ( buff ) PDQImage pthumb = DecompressionService . decompressThumbnailImage ( buff ) ; if ( pthumb != null ) { Bitmap bm = ConversionService . convertPDQImageToBitmap ( pthumb , _BOOL ) ; $F59 ( pthumb ) return bm ; } } } } $F12241 ( ex ) $F1274 }
public void testSubmitRunnable $F72 throws Throwable { $F25236 ( e ) PoolCleaner cleaner = null ; try { cleaner = cleaner ( e ) ; $F44535 future = e . submit ( new NoOpRunnable $F72 ) ; $F80909 ( assertNull , future ) $F123690 ( assertTrue , future ) assertFalse ( future . isCancelled ( ) ) ; } $F14364 ( cleaner ) }
public Rectangle2D shrink ( Rectangle2D area , Rectangle2D result ) { if ( result == null ) { $F1637 ( result ) ; } result . setRect ( area . getX ( ) + this . left , area . getY ( ) + this . top , area . getWidth ( ) - this . left - this . right , area . getHeight ( ) - this . top - this . bottom ) ; return result ; }
public static String assertJQ ( SolrQueryRequest req , String ... tests ) throws Exception { return assertJQ ( req , JSONTestUtil . DEFAULT_DELTA , tests ) ; }
protected void buildAbsoluteStats ( String name , long value , long time ) throws InterruptedException { List < XYDataItem > stats = statsCollection . getStats ( name ) ; if ( stats == null ) { stats = statsCollection . newStats ( name , maxSeries ) ; } else { XYDataItem data = new XYDataItem ( time , value ) ; statsCollection . lockForUpdate ( ) ; try { stats . add ( data ) ; houseKeepStats ( stats ) ; } finally { statsCollection . releaseLock ( ) ; } if ( listeners != null ) { StatsCollectionEvent event = new StatsCollectionEvent ( name , data ) ; for ( StatsCollectionListener listener : listeners ) { if $F34496 ( listener ) { listener . statsCollected ( event ) ; } } } } }
$F1 public void run $F72 { amIActive = _BOOL ; String demHeader = null ; String streamHeadsHeader = null ; String elevationModifiedHeader = null ; String correctedDemHeader = null ; List < StreamHead > $F204 ( streamHeadList ) ; int counter = NUM00 ; float progress = NUM00 ; $F51364 ( args , showFeedback ) for ( $F1139 ( i , args ) ) { if ( i == NUM00 ) { demHeader = args [ i ] ; } else if ( i == NUM00 ) { streamHeadsHeader = args [ i ] ; } else if ( i == NUM00 ) { elevationModifiedHeader = args [ i ] ; } else if ( i == NUM00 ) { correctedDemHeader = args [ i ] ; } else if ( i == NUM00 ) { maxRadius = Double . parseDouble ( args [ i ] ) ; } } if ( $F51374 ( demHeader , streamHeadsHeader ) || ( elevationModifiedHeader == null ) || ( correctedDemHeader == null ) ) $F3602 ( showFeedback ) try { $F90048 ( dem , demHeader ) $F90048 ( streamHeads , streamHeadsHeader ) numRows = dem . getNumberRows ( ) ; numCols = dem . getNumberColumns ( ) ; $F51458 ( noData , dem ) gridRes = dem . getCellSizeX ( ) ; elevationModified = new WhiteboxRaster ( elevationModifiedHeader , NUM00 , demHeader , WhiteboxRaster . DataType . FLOAT , NUM00 ) ; elevationModified . setPreferredPalette ( NUM00 ) ; elevationModified . setDataScale ( WhiteboxRasterBase . DataScale . CONTINUOUS ) ; elevationModified . setZUnits ( NUM00 ) ; correctedDEM = new WhiteboxRaster ( correctedDemHeader , NUM00 , demHeader , WhiteboxRaster . DataType . FLOAT , NUM00 ) ; correctedDEM . setPreferredPalette ( NUM00 ) ; correctedDEM . setDataScale ( WhiteboxRasterBase . DataScale . CONTINUOUS ) ; correctedDEM . setZUnits ( NUM00 ) ; if ( streamHeads . getNumberColumns ( ) != numCols || streamHeads . getNumberRows ( ) != numRows ) $F3602 ( showFeedback ) updateProgress ( NUM00 , NUM00 ) ; for ( $F119 ( row , numRows ) ) { for ( $F119 ( col , numCols ) ) { if ( dem . getValue ( row , col ) != noData ) { elevationModified . setValue ( row , col , NUM00 ) ; } else { elevationModified . setValue ( row , col , noData ) ; } } $F51521 ( cancelOp , cancelOperation ) $F90104 ( progress , row , numRows ) $F51526 ( updateProgress , progress ) } updateProgress ( NUM00 , NUM00 ) ; for ( $F119 ( row , numRows ) ) { for ( $F119 ( col , numCols ) ) { if ( streamHeads . getValue ( row , col ) == NUM00 ) { streamHeadList . add ( new StreamHead ( col , row , dem . getValue ( row , col ) ) ) ; } } $F51521 ( cancelOp , cancelOperation ) $F90104 ( progress , row , numRows ) $F51526 ( updateProgress , progress ) } streamHeadList = OrderStreamHeads ( streamHeadList ) ; updateProgress ( NUM00 , NUM00 ) ; for ( StreamHead streamHead : streamHeadList ) { CheckFlowPath ( streamHead . GetXCoord ( ) , streamHead . GetYCoord ( ) ) ; counter = counter + NUM00 ; $F51521 ( cancelOp , cancelOperation ) progress = ( float ) ( NUM00 * counter / streamHeadList . size ( ) ) ; $F51526 ( updateProgress , progress ) } updateProgress ( NUM00 , NUM00 ) ; for ( $F119 ( row , numRows ) ) { for ( $F119 ( col , numCols ) ) { if ( elevationModified . getValue ( row , col ) != noData ) { correctedDEM . setValue ( row , col , dem . getValue ( row , col ) - elevationModified . getValue ( row , col ) ) ; } else { correctedDEM . setValue ( row , col , noData ) ; } } $F51521 ( cancelOp , cancelOperation ) $F90104 ( progress , row , numRows ) $F51526 ( updateProgress , progress ) } $F90114 ( elevationModified , getDescriptiveName ) $F90117 ( elevationModified ) $F90114 ( correctedDEM , getDescriptiveName ) $F90117 ( correctedDEM ) $F59 ( dem ) $F59 ( streamHeads ) $F59 ( elevationModified ) $F59 ( correctedDEM ) returnData ( correctedDemHeader ) ; } catch ( Exception e ) $F51532 ( showFeedback , e ) $F51536 ( updateProgress , amIActive , _BOOL , myHost ) }
protected void serialize ( String filename ) { classifier . serializeClassifier ( filename ) ; }
public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { $F3366 return BEGIN_IN_BOTH ; $F3366 return NEWINT ; $F3366 return NEWBYTE ; $F3366 return NEWSHORT ; $F3366 return NEWLONG ; $F3366 return NEWDOUBLE ; $F3366 return NEWSTRUCT ; $F3366 return NEWLIST ; $F3366 return NEWSET ; $F3366 return NEWMAP ; $F3366 return NEW "STRING" ; $F3366 return END_IN_BOTH ; $F20809 } }
public boolean isPartitionTag ( String field ) { if ( partitions == null || ( ! isTag ( field ) ) ) { return _BOOL ; } $F28787 ( partition , partitions , field , _BOOL ) return _BOOL ; }
protected Size2D arrangeFN ( BlockContainer container , Graphics2D g2 , RectangleConstraint constraint ) { $F150084 ( blocks , container ) Block b = ( Block ) blocks . get ( NUM00 ) ; Size2D s = b . arrange ( g2 , RectangleConstraint . NONE ) ; $F324 ( width , constraint ) Rectangle2D bounds = new $F1634 ( ( width - s . width ) / NUM00 , NUM00 , s . width , s . height ) ; b . setBounds ( bounds ) ; return new Size2D ( ( width - s . width ) / NUM00 , s . height ) ; }
private Object processExecute ( Statement proxy , Method method , $F131 args ) throws Throwable { long startTime = logSlowQuery ? System . currentTimeMillis ( ) : NUM00 ; try { if ( method . getName ( ) == NUM00 ) return newProxiedResultSet ( proxy , method , args ) ; return targetInvoke ( method , args ) ; } finally { if ( logSlowQuery ) logQuery ( proxy , args , startTime ) ; } }
int boundedIndexOf ( String string , char search , int start , int end ) { $F204924 ( retValue , string , search , start ) $F55825 ( retValue , end ) return retValue ; }
public int incr ( T k , int delta ) { $F99426 ( i , counts , k ) if ( i == null ) { i = NUM00 ; } int next = i . intValue ( ) + delta ; if ( next < NUM00 ) { throw new java . lang . ArithmeticException $F72 ; } if ( next == NUM00 ) $F106 ( counts , k ) else { counts . put ( k , i + delta ) ; } return i ; }
public void send ( final OscPacket thePacket , final TcpClient theClient ) { theClient . send ( thePacket . getBytes ( ) ) ; }
$F1 $F1431 public void keyTyped ( KeyEvent evt ) { $F23165 ( modifiers , evt ) char c = evt . getKeyChar ( ) ; if ( c != KeyEvent . CHAR_UNDEFINED && ( modifiers & InputEvent . ALT_MASK ) == NUM00 ) { if ( c >= NUM00 && c != NUM00 ) { KeyStroke keyStroke = KeyStroke . getKeyStroke ( Character . toUpperCase ( c ) ) ; $F16628 ( o , currentBindings , keyStroke ) if ( o instanceof Hashtable ) { currentBindings = ( Hashtable ) o ; $F665 } else if ( o instanceof ActionListener ) { currentBindings = bindings ; executeAction ( ( ActionListener ) o , evt . getSource ( ) , String . valueOf ( c ) ) ; $F665 } currentBindings = bindings ; if ( grabAction != null ) $F14411 ( handleGrabAction , evt ) if ( repeat && Character . isDigit ( c ) ) { repeatCount *= NUM00 ; repeatCount += ( c - NUM00 ) ; $F665 } executeAction ( INSERT_CHAR , evt . getSource ( ) , String . valueOf ( evt . getKeyChar ( ) ) ) ; repeatCount = NUM00 ; repeat = _BOOL ; } } }
public static $F215161 fillInTheGaps ( $F215161 mappedClasses , MappingMode mode ) { for ( $F3465 ( originalName , mappedClasses ) ) { mappedClasses = fillGap ( mappedClasses . get ( originalName ) , mappedClasses , mode ) ; } return mappedClasses ; }
private void readObject ( ObjectInputStream s ) throws $F6427 { $F6428 ( s ) if ( name == null ) { if ( types != null ) $F6433 } else { try $F5795 ( check ) catch ( RuntimeException e ) { rethrow ( e ) ; } } if $F171402 ( constraints ) $F6433 }
public static Script createMultiSigInputScriptBytes ( $F4358 ( signatures ) ) { checkArgument ( $F119129 ( signatures ) ) ; ScriptBuilder builder = new ScriptBuilder $F72 ; builder . smallNum ( NUM00 ) ; for ( $F96 signature : signatures ) builder . data ( signature ) ; $F17464 ( builder ) }
public void deleteInstances $F23416 ( rowIndices ) { int i ; Arrays . sort ( rowIndices ) ; addUndoPoint ( ) ; m_IgnoreChanges = _BOOL ; for ( $F121270 ( i , rowIndices ) ) $F218373 ( deleteInstanceAt , rowIndices , i , _BOOL ) m_IgnoreChanges = _BOOL ; notifyListener ( new TableModelEvent ( this , rowIndices [ NUM00 ] , $F8528 ( rowIndices ) , TableModelEvent . ALL_COLUMNS , TableModelEvent . DELETE ) ) ; }
public synchronized < T extends EventListener > void add ( $F20474 t , T l ) { $F2329 ( l ) if $F78643 ( t , l ) $F20855 ( l , t ) if ( listenerList == NULL_ARRAY ) { listenerList = $F40356 ( t , l ) ; } else { int i = listenerList . length ; $F131 $F133947 ( tmp , i ) ; $F135 ( System , listenerList , tmp , i ) tmp [ i ] = t ; tmp [ i + NUM00 ] = l ; listenerList = tmp ; } }
public static void gc2gc ( double c1 [ ] , int m1 , double g1 , double c2 [ ] , int m2 , double g2 ) { $F1986 gc2gc_buff = Arrays . copyOf ( c1 , m1 + NUM00 ) ; $F603 ( c2 , gc2gc_buff ) for ( $F9993 ( i , m2 ) ) { double ss1 = NUM00 ; double ss2 = NUM00 ; int min = m1 < i ? m1 : i - NUM00 ; for ( $F9993 ( k , min ) ) { int mk = i - k ; double cc = gc2gc_buff [ k ] * c2 [ mk ] ; ss2 += k * cc ; ss1 += mk * cc ; } if ( i <= m1 ) c2 [ i ] = gc2gc_buff [ i ] + ( g2 * ss2 - g1 * ss1 ) / i ; else c2 [ i ] = ( g2 * ss2 - g1 * ss1 ) / i ; } }
public static boolean between ( Date baseDate , Date startDate , Date endDate ) { if ( startDate . equals ( endDate ) || endDate . before ( startDate ) ) { return _BOOL ; } if ( ( startDate . before ( baseDate ) || startDate . equals ( baseDate ) ) && ( endDate . after ( baseDate ) || endDate . equals ( baseDate ) ) ) { return _BOOL ; } return _BOOL ; }
public void addListener ( final TimeoutEventListener listener ) { final long timeout = listener . getTimeout ( ) ; if ( timeout > NUM00 ) { listeners . add ( listener ) ; synchronized ( stateLock ) { $F16700 ( pendingListenerMinDelay , Math , timeout ) $F165 ( stateLock ) } } }
public static $F806 convertStrings $F24643 ( strings ) { $F5442 ( ret , strings ) $F25191 ( i , ret , strings ) return ret ; }
public static String transformToolTipText ( final String description , final boolean addHTMLTags , final int lineLength , final boolean escapeSlashes , final boolean escapeHTML ) { $F9652 ( completeText , description ) if ( escapeHTML ) { completeText = Tools . escapeHTML ( completeText ) ; } if ( escapeSlashes ) { $F2899 ( completeText ) } $F280 ( result ) $F12290 ( addHTMLTags , result ) completeText = Tools . transformAllLineSeparators ( completeText ) ; $F6542 ( lines , completeText ) for ( String text : lines ) { boolean first = _BOOL ; while $F62924 ( text , lineLength ) { $F12712 ( spaceIndex , text , lineLength ) $F48750 ( first , result ) first = _BOOL ; if ( spaceIndex >= NUM00 ) { $F6937 ( result , text , spaceIndex ) $F6943 ( text , spaceIndex ) } else { result . append ( text ) ; text = NUM00 ; } } if $F185156 ( first , text ) $F86 ( result ) result . append ( text ) ; $F84 ( result ) } $F12290 ( addHTMLTags , result ) $F92 ( result ) }
$F1 public void write $F24576 ( buffer , offset , length ) { if ( isClosed ( ) || isHead ( ) ) $F932 int byteLength = _offset ; while ( _BOOL ) { $F1472 ( sublen , Math , length , SIZE , byteLength ) System . arraycopy ( buffer , offset , _buffer , byteLength , sublen ) ; offset += sublen ; length -= sublen ; byteLength += sublen ; $F65649 ( length ) _offset = byteLength ; flushByteBuffer ( ) ; byteLength = _offset ; } _offset = byteLength ; }
public ClientHttpRequest ( URLConnection connection ) throws IOException { this . connection = connection ; connection . setDoOutput ( _BOOL ) ; connection . setDoInput ( _BOOL ) ; connection . setRequestProperty ( NUM00 , NUM00 + boundary ) ; }
public void characters ( String characters ) throws SAXException { $F22998 ( len , characters ) if ( len > m_charsBuff . length ) { m_charsBuff = new char [ len * NUM00 + NUM00 ] ; } $F16116 ( characters , len , m_charsBuff ) characters ( m_charsBuff , NUM00 , len ) ; }
private void appendTag ( String tagName , String value ) { $F84 ( xml ) xml . append ( tagName ) ; $F84 ( xml ) xml . append ( value ) ; $F84 ( xml ) xml . append ( tagName ) ; $F84 ( xml ) }
$F1 public CertificateTokenValidationExtraInfo extraInfo $F72 { return extraInfo ; }
public void addTopLevelContents ( Collection < ContentElement > contents ) $F21926 ( topLevelContents , contents )
public static void withInstance ( $F2100 ( args ) , Closure c ) throws SQLException , ClassNotFoundException { Sql sql = null ; try { sql = newInstance ( args ) ; c . call ( sql ) ; } $F48674 ( sql ) }
public void write $F169066 ( buffer , offset , length , isEnd ) throws IOException { throw new UnsupportedOperationException $F45942 ( String , this ) ; }
private boolean addIndexEntry ( ServiceType resourceType , String resourceName , String policyName ) throws PolicyException { ResourceIndex resourceIndex = ( ResourceIndex ) $F22754 ( resourceIndices , resourceType ) ; $F5178 ( resourceIndex , refreshResourceIndexFromDataStore , resourceType ) return resourceIndex . addIndexEntry ( resourceName , policyName ) ; }
public void ddSolve ( $F6870 qryNodes ) { long solve_time = NUM00 , prepare_time = NUM00 ; if ( hasExecuted == _BOOL ) solve ( ) ; if ( ddPrepared == _BOOL || offlineProcessor == null ) { offlineProcessor = new OfflineProcessor ( this ) ; IFigureManager . cleanCache ( ) ; ddPrepared = _BOOL ; $F21416 ( ps ) $F8438 ( ps ) } $F2199 ( init_size , qryNodes ) if ( init_size == NUM00 ) { $F8438 ( ps ) $F665 } $F6357 ( prepare_begin ) $F10089 ( offlineProcessor ) offlineProcessor . addUserDefPts ( qryNodes ) ; offlineProcessor . runOptimizations ( ) ; $F6357 ( prepare_end ) prepare_time += $F265 ( prepare_end , prepare_begin ) ; $F6357 ( begin ) prepareNextRun ( ) ; nodeGenerator . initFlowGraph ( this ) ; solveConstraints ( ) ; $F6357 ( end ) solve_time += $F265 ( end , begin ) ; $F21416 ( ps ) ps . printf ( NUM00 , ( double ) prepare_time / NUM00 ) ; ps . printf ( NUM00 , ( double ) solve_time / NUM00 ) ; }
private static void deleteFrom ( int deleteAt , $F2027 starts , int numStarts ) { while ( starts [ -- numStarts ] > deleteAt ) { starts [ numStarts ] -= NUM00 ; } }
public static EventTypeMetadata createBeanType ( String name , Class clazz , boolean isPreConfiguredStatic , boolean isPreConfigured , boolean isConfigured , TypeClass typeClass ) { $F29150 ( secondaryNames ) if ( name == null ) $F128776 ( name , clazz ) else { if ( ! $F3174 ( name , clazz ) ) { secondaryNames = new LinkedHashSet $F4 $F72 ; $F29790 ( secondaryNames , clazz ) } } return new EventTypeMetadata ( name , secondaryNames , typeClass , isPreConfiguredStatic , isPreConfigured , isConfigured , ApplicationType . CLASS , _BOOL ) ; }
private boolean reverseIt $F72 { if $F931 ( isActive ) $F4638 MPeriod . testPeriodOpen ( getCtx ( ) , getDateTrx ( ) , MPeriodControl . DOCBASETYPE_PaymentAllocation , getAD_Org_ID ( ) ) ; setIsActive ( _BOOL ) ; if $F931 ( isPosted ) setPosted ( _BOOL ) ; setDocumentNo ( getDocumentNo ( ) + NUM00 ) ; setDocStatus ( DOCSTATUS_Reversed ) ; if ( ! save ( ) || isActive ( ) ) $F4638 MFactAcct . deleteEx ( MAllocationHdr . Table_ID , getC_AllocationHdr_ID ( ) , get_TrxName ( ) ) ; getLines ( _BOOL ) ; $F87074 $F87077 ( bps ) ; for ( $F1139 ( i , m_lines ) ) { MAllocationLine line = m_lines [ i ] ; line . setIsActive ( _BOOL ) ; $F45240 ( line ) bps . add ( new Integer ( line . processIt ( _BOOL ) ) ) ; } updateBP ( bps ) ; return _BOOL ; }
public static boolean useSubjectCredsOnly ( GSSCaller caller ) { if ( caller instanceof HttpCaller ) { return _BOOL ; } String propValue = AccessController . doPrivileged ( new GetPropertyAction $F6600 ) ; return $F14072 ( propValue ) ; }
private void readEntityDeclaration $F72 throws $F139192 { read ( START_ENTITY ) ; boolean generalEntity = _BOOL ; skip ( ) ; if $F249882 ( peekCharacter ) { generalEntity = _BOOL ; position ++ ; skip ( ) ; } String name = readName ( ) ; skip ( ) ; int quote = peekCharacter ( ) ; String entityValue ; if $F37111 ( quote ) { position ++ ; entityValue = readValue ( ( char ) quote , _BOOL , _BOOL , ValueContext . ENTITY_DECLARATION ) ; if ( peekCharacter ( ) == quote ) { position ++ ; } } else if ( readExternalId ( _BOOL , _BOOL ) ) { entityValue = NUM00 ; skip ( ) ; if ( peekCharacter ( ) == NDATA [ NUM00 ] ) { read ( NDATA ) ; skip ( ) ; readName ( ) ; } } else $F139239 ( this ) if ( generalEntity && processDocDecl ) { if ( documentEntities == null ) { documentEntities = new HashMap < String , $F1469 > $F72 ; } documentEntities . put ( name , entityValue . toCharArray ( ) ) ; } skip ( ) ; read ( NUM00 ) ; }
public void add ( String fieldName , String value ) { $F19273 ( fieldName ) $F19273 ( value ) if ( $F1276 ( fieldName ) || $F412 ( fieldName ) || $F412 ( value ) ) $F20855 ( fieldName , value ) addLenient ( fieldName , value ) ; }
public void deleteStorage ( StorageData storageData ) throws BusinessException , IOException { StorageData local = getLocalStorageDataObject ( storageData ) ; synchronized ( local ) { if ( ( storageRecorder . isRecordingOn ( ) || storageRecorder . isRecordingScheduled ( ) ) && Objects . equals ( local , recorderStorageData ) ) { throw new BusinessException ( NUM00 + local + NUM00 , StorageErrorCodeEnum . STORAGE_ALREADY_CLOSED ) ; } if ( local . isStorageOpened ( ) ) { StorageWriter writer = openedStoragesMap . get ( local ) ; $F65150 ( writer ) openedStoragesMap . remove ( local ) ; } deleteCompleteStorageDataFromDisk ( local ) ; existingStoragesSet . remove ( local ) ; } }
public CoapResponse advanced ( Request request ) { assignClientUriIfEmpty ( request ) ; return synchronous ( request ) ; }
public void visitErrorNode ( ErrorNode node ) { ProgressIndicatorProvider . checkCanceled ( ) ; Token badToken = node . getSymbol ( ) ; boolean isConjuredToken = badToken . getTokenIndex ( ) < NUM00 ; int nodeStartIndex = badToken . getStartIndex ( ) ; SyntaxError error = tokenToErrorMap . get ( nodeStartIndex ) ; if ( error != null ) { PsiBuilder . Marker errorMarker = builder . mark ( ) ; if ( badToken . getStartIndex ( ) >= NUM00 && badToken . getType ( ) != Token . EOF && ! isConjuredToken ) { builder . advanceLexer ( ) ; } String message = String . format ( $F10629 ( error ) ) ; errorMarker . error ( message ) ; } else { if ( isConjuredToken ) { PsiBuilder . Marker errorMarker = builder . mark ( ) ; errorMarker . error ( badToken . getText ( ) ) ; } else { builder . advanceLexer ( ) ; } } }
$F4562 ( view , deltaX , scrollX , deltaY , scrollY , scrollRange , fuzzyThreshold , scaleFactor , isTouchEvent , deltaValue , currentScrollValue , scrollValue , HORIZONTAL , VERTICAL , mode , newScrollValue , PullToRefreshBase , Log , LOG_TAG , State , Math )
$F1 public boolean conditionOk ( Example example ) { boolean isOk = _BOOL ; for ( Attribute attribute : checkedAttributes ) { isOk &= ! Double . isNaN ( example . getValue ( attribute ) ) ; } return isOk ; }
private void loadBinary ( InputStream is ) throws IOException { if ( useNewIO && is instanceof FileInputStream ) { FileInputStream fis = ( FileInputStream ) is ; if ( useIndexing ) { loadBinaryIndex ( new URL ( indexName ) ) ; mapDatabase ( fis ) ; } else { loadMappedBinary ( fis ) ; } } else { DataInputStream dis = new DataInputStream $F209243 ( is ) ; loadBinary ( dis ) ; } }
public VNXeCommandJob deleteLunsFromLunGroup $F13322 ( lunGroupId , luns ) { LunGroupModifyParam param = new LunGroupModifyParam $F72 ; List $F42136 lunDelete = new ArrayList $F42136 $F72 ; for ( String lunId : luns ) { VNXeBase lun = new VNXeBase ( lunId ) ; LunAddParam lunAdd = new LunAddParam $F72 ; lunAdd . setLun ( lun ) ; lunDelete . add ( lunAdd ) ; } param . setLunDelete ( lunDelete ) ; LunGroupRequests req = new LunGroupRequests ( _khClient ) ; return req . modifyLunGroupAsync ( lunGroupId , param ) ; }
public void removeLocators ( LookupLocator [ ] locators ) { testSetForNull ( locators ) ; synchronized ( this ) { $F4640 ( terminated ) HashMap $F6450 ( groupsMap ) ; for ( $F1139 ( i , locators ) ) { LocatorReg reg = removeDiscoveredLocator ( locators [ i ] ) ; if ( reg != null ) { groupsMap . put ( reg . proxy , reg . memberGroups ) ; $F598 } reg = findReg ( locators [ i ] ) ; $F231860 ( reg , undiscoveredLocators ) } if $F133343 ( groupsMap , listeners ) { addNotify ( ( ArrayList ) listeners . clone ( ) , groupsMap , _BOOL ) ; } } }
public boolean is_selected ( ItemSelectionChoice p_choice ) { return sel_array [ p_choice . ordinal ( ) ] ; }
private void add ( final IProgressOperation operation ) { final GridBagConstraints constraints = new GridBagConstraints $F72 ; $F45961 ( constraints , GridBagConstraints ) constraints . gridy = counter ++ ; constraints . gridx = NUM00 ; constraints . weightx = NUM00 ; constraints . weighty = NUM00 ; m_progressPanel . add ( operation . getProgressPanel ( ) , constraints ) ; }
public KeyStoreBuilder withProvider ( final String providerName ) { Provider provider = Security . getProvider ( providerName ) ; $F26344 ( provider , providerName ) return withProvider ( provider ) ; }
private boolean compareAndDecrementWorkerCount ( int expect ) { return ctl . compareAndSet ( expect , expect - NUM00 ) ; }
public static HttpURLConnection toHttpConnection ( Request ... requests ) $F28185 ( toHttpConnection , Arrays , requests )
$F52843 ( packed , map , i , j , count , value )
public CompositeRouteFinder ( final GameMap map , final HashMap < Match < Territory > , Integer > matches ) { m_map = map ; m_matches = matches ; s_logger . finer ( NUM00 ) ; }
public TCPEndpoint ( String host , int port ) { this ( host , port , null , null ) ; }
public void testBug22613 $F72 throws Exception { createTable ( NUM00 , NUM00 ) ; checkMetadataForBug22613 ( this . conn ) ; if $F57555 ( versionMeetsMinimum ) { Connection infoSchemConn = null ; try { $F2697 ( props ) $F2699 ( props ) infoSchemConn = getConnectionWithProps ( props ) ; checkMetadataForBug22613 ( infoSchemConn ) ; } $F14364 ( infoSchemConn ) } }
public long stime $F72 $F12907 ( Long , fields )
public ProgramRewriter ( ArrayList < HopRewriteRule > hRewrites , ArrayList < StatementBlockRewriteRule > sbRewrites ) { _dagRuleSet = new ArrayList < HopRewriteRule > $F72 ; _dagRuleSet . addAll ( hRewrites ) ; _sbRuleSet = new ArrayList < StatementBlockRewriteRule > $F72 ; _sbRuleSet . addAll ( sbRewrites ) ; }
private JMenu createSettingsMenu $F72 { final JMenu menu = new JMenu $F580 ; $F208200 ( menu ) menu . add ( new CActionShowSettingsDialog ( getParent ( ) ) ) ; $F100282 ( menu ) menu . add ( new CActionInitialCallgraphSettings ( getParent ( ) ) ) ; menu . add ( new CActionInitialFlowgraphSettings ( getParent ( ) ) ) ; return menu ; }
public static void writeString ( DataOutputStream os , String s ) throws IOException { if ( s == null ) { $F150188 ( os ) } else { byte $F44671 = s . getBytes ( ) ; $F17916 ( os , array ) os . write ( array ) ; } }
public static boolean isJavaValidName ( String str ) { $F69790 ( str , _BOOL ) $F12651 ( javaKeys , str , _BOOL ) $F12685 ( first , str ) if ( isValidNameStartChar ( first ) ) { for ( $F38840 ( i , str ) ) { $F1280 ( c , str , i ) $F2014 ( isValidNameChar , c , _BOOL ) } return _BOOL ; } else { return _BOOL ; } }
private $F3803 createCommands $F72 { $F13406 ( commands , createNodeCommands , nodejsFile , tsFile ) $F53443 ( args , createNodeArgs ) $F36447 ( args , commands ) return commands ; }
private void parsePackages ( SensorContext sensorContext ) { for ( Directory directory : packageList ) { sensorContext . saveMeasure ( directory , CoreMetrics . DIRECTORIES , NUM00 ) ; sensorContext . saveMeasure ( directory , CoreMetrics . FILES , ( double ) filesCount . get ( directory ) ) ; } }
public static Thread consumeProcessErrorStream ( Process self , Appendable error ) { Thread thread = new Thread ( new TextDumper ( self . getErrorStream ( ) , error ) ) ; $F2346 ( thread ) return thread ; }
public StrBuilder deleteFirst ( final String str ) { final int len = ( str == null ? NUM00 : str . length ( ) ) ; if ( len > NUM00 ) { final int index = indexOf ( str , NUM00 ) ; if ( index >= NUM00 ) { deleteImpl ( index , index + len , len ) ; } } return this ; }
@ Reference ( authors = NUM00 , booktitle = NUM00 , title = NUM00 , url = NUM00 ) public static < V extends NumberVector > double logLikelihood ( $F42616 relation , Clustering < ? extends MeanModel > clustering , NumberVectorDistanceFunction $F42625 distanceFunction ) { List < ? extends Cluster < ? extends MeanModel > > clusters = clustering . getAllClusters ( ) ; $F2601 ( dim , RelationUtil , relation ) $F10162 ( m , clusters ) int n = NUM00 ; $F4120 ( n_i , m ) double d = NUM00 ; $F9662 ( d_i , m ) Iterator < ? extends Cluster < ? extends MeanModel > > it = clusters . iterator ( ) ; for ( int i = NUM00 ; it . hasNext ( ) ; ++ i ) { Cluster < ? extends MeanModel > cluster = it . next ( ) ; n += n_i [ i ] = cluster . size ( ) ; d += d_i [ i ] = varianceOfCluster ( cluster , distanceFunction , relation ) ; } if ( n <= m ) $F86429 ( Double ) final double v = d / ( n - m ) , logv = Math . log ( v ) ; double logLikelihood = NUM00 ; for ( $F119 ( i , m ) ) { logLikelihood += n_i [ i ] * Math . log ( n_i [ i ] ) - n_i [ i ] * NUM00 * MathUtil . LOGTWOPI - n_i [ i ] * dim * NUM00 * logv - ( d_i [ i ] - m ) * NUM00 ; } logLikelihood -= n * Math . log ( n ) ; return logLikelihood ; }
private static $F18547 classesForParams $F24643 ( params ) { $F18547 result = new $F6969 $F2313 ( params ) ; for ( $F2277 ( i , params ) ) { result [ i ] = classForParam ( params . get ( i ) ) ; } return result ; }
private boolean announce $F4374 ( groups ) { if ( dataPackets == null || ! lastLocator . equals ( myLocator ) || ! Arrays . equals ( lastGroups , groups ) ) { List < DatagramPacket > packets = new ArrayList < DatagramPacket > $F72 ; Discovery disco ; try { disco = getDiscovery ( multicastAnnouncementConstraints . chooseProtocolVersion ( ) ) ; } catch ( DiscoveryProtocolException e ) $F27253 ( e ) EncodeIterator ei = disco . encodeMulticastAnnouncement ( new MulticastAnnouncement ( announcementSeqNo ++ , myLocator . getHost ( ) , myLocator . getPort ( ) , groups , myServiceID ) , multicastAnnouncementConstraints . getMulticastMaxPacketSize ( DEFAULT_MAX_PACKET_SIZE ) , multicastAnnouncementConstraints . getUnfulfilledConstraints ( ) ) ; while $F2921 ( ei ) { try { packets . addAll ( Arrays . asList ( ei . next ( ) ) ) ; } catch ( Exception e ) { logger . log ( ( e instanceof UnsupportedConstraintException ) ? Levels . HANDLED : Level . INFO , NUM00 + NUM00 , e ) ; } } lastLocator = myLocator ; lastGroups = groups ; dataPackets = packets . toArray ( new DatagramPacket $F2313 ( packets ) ) ; } try { send ( dataPackets ) ; } catch ( InterruptedIOException e ) { return _BOOL ; } return _BOOL ; }
public static String encodeLines ( $F96 in , int iOff , int iLen , int lineLen , String lineSeparator ) { int blockLen = ( lineLen * NUM00 ) / NUM00 ; $F61934 ( blockLen ) $F61936 ( lines , iLen , blockLen ) int bufLen = $F61937 ( iLen ) * NUM00 + lines * lineSeparator . length ( ) ; $F7542 ( buf , bufLen ) int ip = NUM00 ; while ( ip < iLen ) { $F55158 ( l , Math , iLen , ip , blockLen ) buf . append ( encode ( in , iOff + ip , l ) ) ; buf . append ( lineSeparator ) ; ip += l ; } $F92 ( buf ) }
final public void trimToSize $F72 { for ( GazEntry ge : gaz . values ( ) ) $F51922 ( ge ) }
public boolean containsSelectAccount $F72 $F298 ( prompts , PROMPT_SELECT_ACCOUNT )
protected static void quickSort ( Instances insts , $F2027 indices , int attidx , int left , int right ) { if ( left < right ) { int middle = partition ( insts , indices , attidx , left , right ) ; quickSort ( insts , indices , attidx , left , middle ) ; quickSort ( insts , indices , attidx , middle + NUM00 , right ) ; } }
public Image flipImageHorizontally ( Image image , boolean maintainOpacity ) { $F2027 rgb = image . getRGB ( ) ; $F22974 ( newRGB , rgb ) $F2049 ( width , image ) $F2047 ( height , image ) for ( $F119 ( y , height ) ) { for ( $F119 ( x , width ) ) { newRGB [ ( width - x - NUM00 ) + y * width ] = rgb [ x + y * width ] ; } } return EncodedImage . createFromRGB ( newRGB , width , height , ! maintainOpacity ) ; }
public static boolean audit $F72 { return $F61922 ( audit ) ? _BOOL : audit . get ( ) ; }
public static boolean isTermsRequest ( SipRequest request ) { String contentType = request . getContentType ( ) ; return $F147883 ( contentType ) ; }
private void readSegments $F72 throws IOException { for ( SegmentExtent10 extent : _segmentExtents ) { try ( ReadStream is = openRead ( extent . address ( ) , extent . length ( ) ) ) { is . skip ( extent . length ( ) - BLOCK_SIZE ) ; long sequence = BitsUtil . readLong ( is ) ; $F2175 ( tableKey , TABLE_KEY_SIZE ) is . readAll ( tableKey , NUM00 , tableKey . length ) ; if ( sequence > NUM00 ) { Segment10 segment = new Segment10 ( sequence , tableKey , extent ) ; _segments . add ( segment ) ; } } } }
public static double projectTimeWithin24Hours ( double time ) { double secondsInOneDay = $F264 ; if ( time == Double . NEGATIVE_INFINITY || time == Double . POSITIVE_INFINITY ) { DebugLib . stopSystemAndReportInconsistency ( NUM00 ) ; } while ( time < NUM00 ) { time += secondsInOneDay ; } if ( time < secondsInOneDay ) { return time ; } else { return ( ( time / secondsInOneDay ) - ( Math . floor ( time / secondsInOneDay ) ) ) * secondsInOneDay ; } }
private $F96 updateMinMaxForNoDictionary $F97 ( valueWithLength ) { $F23500 ( buffer , ByteBuffer , valueWithLength ) $F96 actualValue = new byte [ buffer . getShort ( ) ] ; buffer . get ( actualValue ) ; return actualValue ; }
void constructNode ( String nodeName , String prefix , String nodeNamespace , TransformerImpl transformer ) throws TransformerException { boolean shouldAddAttrs ; try { SerializationHandler rhandler = transformer . getResultTreeHandler ( ) ; if ( null == nodeName ) { shouldAddAttrs = _BOOL ; } else { if ( null != prefix ) { rhandler . startPrefixMapping ( prefix , nodeNamespace , _BOOL ) ; } rhandler . startElement ( nodeNamespace , QName . getLocalPart ( nodeName ) , nodeName ) ; super . execute ( transformer ) ; shouldAddAttrs = _BOOL ; } transformer . executeChildTemplates ( this , shouldAddAttrs ) ; if ( null != nodeName ) { rhandler . endElement ( nodeNamespace , QName . getLocalPart ( nodeName ) , nodeName ) ; if ( null != prefix ) { rhandler . endPrefixMapping ( prefix ) ; } } } $F237369 ( se ) }
$F1431 public static void checkType ( $F2100 ( map ) , String name ) { $F15921 ( tmap ) if ( map . get ( MetamodelGenerator . KEY_TYPE ) instanceof Map ) { tmap = ( $F529 ) map . get ( MetamodelGenerator . KEY_TYPE ) ; } else if ( map . get ( MetamodelGenerator . KEY_TYPE ) instanceof String ) { tmap = $F532 ; tmap . put ( MetamodelGenerator . KEY_NAME , map . get ( MetamodelGenerator . KEY_TYPE ) ) ; } else { tmap = map ; } $F1384 ( join , name ) if ( join > NUM00 ) { while ( join > NUM00 && ! $F12723 ( pointyBracketsEven , name , join ) ) { $F101462 ( join , name ) } if ( join > NUM00 ) { Assert . assertEquals ( NUM00 , NUM00 , tmap . get ( NUM00 ) ) ; checkTypeParameters ( - NUM00 , ( $F20526 ) tmap . get ( MetamodelGenerator . KEY_TYPES ) , name . substring ( NUM00 , join ) ) ; checkTypeParameters ( - NUM00 , ( $F20526 ) tmap . get ( MetamodelGenerator . KEY_TYPES ) , name . substring ( join + NUM00 ) ) ; $F665 } } $F49897 ( join , name ) if ( join > NUM00 ) { while ( join > NUM00 && ! $F12723 ( pointyBracketsEven , name , join ) ) { $F101462 ( join , name ) } if ( join > NUM00 ) { Assert . assertEquals ( NUM00 , NUM00 , tmap . get ( NUM00 ) ) ; checkTypeParameters ( - NUM00 , ( $F20526 ) tmap . get ( MetamodelGenerator . KEY_TYPES ) , name . substring ( NUM00 , join ) ) ; checkTypeParameters ( - NUM00 , ( $F20526 ) tmap . get ( MetamodelGenerator . KEY_TYPES ) , name . substring ( join + NUM00 ) ) ; $F665 } } $F1384 ( sep , name ) String typeParams = null ; if ( sep > NUM00 ) { typeParams = name . substring ( sep + NUM00 , $F1092 ( name ) ) ; $F45799 ( name , sep ) } if ( tmap . containsKey ( MetamodelGenerator . KEY_PACKAGE ) ) { Assert . assertEquals ( name , String . format ( NUM00 , packageName ( tmap ) , tmap . get ( MetamodelGenerator . KEY_NAME ) ) ) ; } else { Assert . assertEquals ( name , tmap . get ( MetamodelGenerator . KEY_NAME ) ) ; } if ( typeParams != null ) { $F20526 tparms = ( $F20526 ) tmap . get ( MetamodelGenerator . KEY_TYPE_PARAMS ) ; Assert . assertFalse ( NUM00 , tparms . isEmpty ( ) ) ; checkTypeParameters ( NUM00 , tparms , typeParams ) ; } }
private Object _deserializeStruct ( Element elStruct ) throws ConverterException { $F9031 ( type , elStruct ) Struct struct = new StructImpl $F72 ; $F9040 ( list , elStruct ) $F19322 ( len , list ) for ( $F119 ( i , len ) ) { $F61359 ( node , list , i ) if ( node instanceof Element ) { $F6721 ( var , node ) Element value = getChildElement ( ( Element ) node ) ; if ( value != null ) { struct . setEL ( var . getAttribute ( NUM00 ) , _deserialize ( value ) ) ; } } } if ( $F10470 ( struct ) && type != null && $F20 ( type ) ) $F2455 return struct ; }
public QuerierCLI $F4374 ( args ) { cliOptions = createOptions ( ) ; try { CommandLineParser parser = new GnuParser $F72 ; commandLine = parser . parse ( cliOptions , args , _BOOL ) ; if ( hasOption ( NUM00 ) ) { printHelp ( ) ; $F5194 ( System ) } if $F931 ( parseOptions ) { $F973 ( logger ) printHelp ( ) ; $F5194 ( System ) } } $F38136 ( e , System ) }
private static $F96 concatBytes $F7233 ( array1 , array2 ) { $F148496 ( cBytes , array1 , array2 ) try { $F7057 ( System , array1 , cBytes ) $F11244 ( System , array2 , cBytes , array1 ) } $F12237 ( e ) return cBytes ; }
public In ( File file ) { $F1149 ( file ) try { $F4647 ( fis , file ) scanner = new Scanner ( new BufferedInputStream ( fis ) , CHARSET_NAME ) ; scanner . useLocale ( LOCALE ) ; } catch ( IOException ioe ) $F18931 ( file ) }
protected ExtendedDismaxConfiguration createConfiguration ( String qstr , SolrParams localParams , SolrParams params , SolrQueryRequest req ) { return new ExtendedDismaxConfiguration ( localParams , params , req ) ; }
void writeValueProperties ( String fullId , long dbId , String localId , JsonValue value , Connection connection ) throws SQLException { if ( cfg . hasPossibleSearchableProperties ( ) ) { Integer batchingCount = NUM00 ; PreparedStatement propCreateStatement = getPreparedStatement ( connection , QueryDefinition . PROPCREATEQUERYSTR ) ; try { batchingCount = writeValueProperties ( fullId , dbId , localId , value , connection , propCreateStatement , batchingCount ) ; if ( enableBatching && batchingCount > NUM00 ) { $F2027 numUpdates = propCreateStatement . executeBatch ( ) ; $F7028 ( logger , numUpdates ) if $F585 ( logger ) { logger . debug ( NUM00 , Arrays . asList ( numUpdates ) ) ; } propCreateStatement . clearBatch ( ) ; } } finally { CleanupHelper . loggedClose ( propCreateStatement ) ; } } }
protected double computeMaxYAxisValueLogScale ( double maxValue ) { double v = NUM00 ; int mantisse = NUM00 ; int exponent = NUM00 ; while ( v < maxValue ) { if ( mantisse < NUM00 ) mantisse ++ ; else $F88253 ( mantisse , exponent ) v = mantisse * Math . pow ( NUM00 , exponent ) ; } return Math . log10 ( v ) ; }
public void addFocusClearedListener ( FocusClearedListener focusClearedListener ) $F207 ( mFocusClearedListeners , focusClearedListener )
public void addItemListener ( ItemListener aListener ) { listenerList . add ( ItemListener . class , aListener ) ; }
$F1 public $F987 listOptions $F72 { Vector $F986 result ; result = new Vector $F986 $F72 ; $F9007 ( result ) $F1006 ( result ) $F83529 ( result , getDefaultNumDecimals ) $F1006 ( result ) $F1006 ( result ) $F1007 ( result ) }
public static MosaicLevy createMosaicLevy ( final MosaicId mosaicId ) { return new MosaicLevy ( MosaicTransferFeeType . Absolute , generateRandomAccount ( ) , mosaicId , Quantity . fromValue ( NUM00 ) ) ; }
public int rankOf ( double value ) { int ret = NUM00 ; if $F931 ( hasCapacity ) { ret = Arrays . binarySearch ( data , value ) ; if ( ret < NUM00 ) { return - ret - NUM00 ; } else { return ret ; } } else { for ( $F119 ( i , next ) ) { if ( data [ i ] < value ) { ret ++ ; } } return ret ; } }
$F30491 ( key , value , bitmapSize , getBitmapSize )
public static $F4203 $F54596 not ( $F54596 predicate ) { return predicate . negate ( ) ; }
private static void addMarginTopToContentChild ( View mContentChild , int statusBarHeight ) { $F2329 ( mContentChild ) if ( ! TAG_MARGIN_ADDED . equals ( mContentChild . getTag ( ) ) ) { FrameLayout . LayoutParams lp = ( FrameLayout . LayoutParams ) mContentChild . getLayoutParams ( ) ; lp . topMargin += statusBarHeight ; mContentChild . setLayoutParams ( lp ) ; mContentChild . setTag ( TAG_MARGIN_ADDED ) ; } }
static $F96 hexStringToByteArray ( String hexString ) { String s = hexString ; $F1749 ( len , s ) if ( len % NUM00 == NUM00 ) { s = NUM00 + s ; len ++ ; } $F96 data = new byte [ len / NUM00 ] ; for ( $F6225 ( i , len ) ) { data [ i / NUM00 ] = ( byte ) ( ( Character . digit ( s . charAt ( i ) , NUM00 ) < < NUM00 ) + Character . digit ( s . charAt ( i + NUM00 ) , NUM00 ) ) ; } return data ; }
public int send $F24576 ( buffer , offset , count ) { checkArrayBounds ( buffer , offset , count ) ; $F14826 ( count ) $F96 data = buffer ; if ( offset > NUM00 ) $F65231 ( data , count , System , buffer , offset ) IntOut bytesSentOut = new IntOut $F72 ; try { IDevice . checkResult ( LibIMobileDevice . idevice_connection_send ( getRef ( ) , data , count , bytesSentOut ) ) ; $F233317 ( bytesSentOut ) } $F105993 ( bytesSentOut ) }
private void fetchSchema $F72 throws ExecutionException , RpcException , TimeoutException { Message schema = Rpc . get ( myClient . getSchema ( ) , FETCH_SCHEMA_TIMEOUT_MS , TimeUnit . MILLISECONDS ) ; LOG . info ( NUM00 + schema . entities . length + NUM00 + schema . constants . length + NUM00 ) ; int atoms = NUM00 ; for ( Entity type : schema . entities ) { if ( AtomMetadata . find ( type ) != null ) { atoms ++ ; } Dynamic . register ( type ) ; } $F9472 ( LOG , atoms ) for ( ConstantSet set : schema . constants ) { ConstantSet . register ( set ) ; } }
private void append ( StringBuilder buffer , $F1986 data , String prefix , String separator , String suffix ) { buffer . append ( prefix ) ; for ( $F9808 ( i , data ) ) { $F234280 ( i , buffer , separator ) $F6939 ( buffer , data , i ) } buffer . append ( suffix ) ; }
public T toRealArray $F72 { return _outputArrayType . cast ( ArrayMultidimensionalizer . multidimensionalize ( _real , _dimensions ) ) ; }
private ArrayList < WritableComparable > readPartitions ( FileSystem fs , Path p , JobConf job ) throws IOException { SequenceFile . Reader reader = new SequenceFile . Reader ( fs , p , job ) ; ArrayList < WritableComparable > parts = new ArrayList < WritableComparable > $F72 ; try { DoubleWritable key = new DoubleWritable $F72 ; $F53800 ( value , NullWritable ) while ( reader . next ( key , value ) ) { parts . add ( key ) ; key = new DoubleWritable $F72 ; } } $F12237 ( e ) $F448 ( IOUtilFunctions , reader ) $F59 ( reader ) return parts ; }
public boolean pollSeqno ( long seqno ) { return seqno <= diskLog . getMaxSeqno ( ) ; }
public void addSlide ( $F4170 Fragment fragment ) { fragments . add ( fragment ) ; addBackgroundColor ( Color . TRANSPARENT ) ; $F4176 ( pagerAdapter ) }
private static void drawLine ( int x0 , int y0 , int x1 , int y1 , $F189761 ( pic ) ) { final int xres = pic . length , yres = pic [ NUM00 ] . length ; y0 = ( y0 < NUM00 ) ? NUM00 : ( y0 >= yres ) ? ( yres - NUM00 ) : y0 ; y1 = ( y1 < NUM00 ) ? NUM00 : ( y1 >= yres ) ? ( yres - NUM00 ) : y1 ; x0 = ( x0 < NUM00 ) ? NUM00 : ( x0 >= xres ) ? ( xres - NUM00 ) : x0 ; x1 = ( x1 < NUM00 ) ? NUM00 : ( x1 >= xres ) ? ( xres - NUM00 ) : x1 ; final int dx = + Math . abs ( x1 - x0 ) , sx = x0 < x1 ? NUM00 : - NUM00 ; final int dy = - Math . abs ( y1 - y0 ) , sy = y0 < y1 ? NUM00 : - NUM00 ; int err = dx + dy ; for ( $F589 ) { pic [ x0 ] [ y0 ] = _BOOL ; if ( x0 == x1 && y0 == y1 ) $F5153 final int e2 = err < < NUM00 ; if ( e2 > dy ) { err += dy ; x0 += sx ; } if ( e2 < dx ) { err += dx ; y0 += sy ; } } }
public String process ( Item item ) throws ProcessException { int count = NUM00 ; Item inPhrase = SUB_PHRASE_PATH . findItem ( item ) ; for ( Item p = inPhrase ; p != null ; p = p . getPrevious ( ) ) { count ++ ; } $F100077 ( Integer , rail , count ) }
$F4562 ( view , deltaX , scrollX , deltaY , scrollY , scrollRange , fuzzyThreshold , scaleFactor , isTouchEvent , deltaValue , currentScrollValue , scrollValue , HORIZONTAL , VERTICAL , mode , newScrollValue , PullToRefreshBase , Log , LOG_TAG , State , Math )
public E push ( E value ) { elements . add ( value ) ; return value ; }
public long cardinality ( final int tailIndex ) $F4915 ( rangeCount , tailIndex )
public static void createResponse ( HttpServletRequest request , HttpServletResponse response , HttpServlet servlet , Properties cookieProperties , WebDoc doc , boolean debug ) throws IOException { $F11562 ( response ) $F11560 ( response ) if ( cookieProperties != null ) { Cookie cookie = new Cookie ( WebEnv . COOKIE_INFO , propertiesEncode ( cookieProperties ) ) ; cookie . setComment ( NUM00 ) ; cookie . setSecure ( _BOOL ) ; $F244296 ( cookie ) if $F10471 ( cookieProperties ) $F137579 ( cookie ) else $F137579 ( cookie ) response . addCookie ( cookie ) ; } if ( debug && WebEnv . DEBUG ) { WebEnv . addFooter ( request , response , servlet , doc . getBody ( ) ) ; } $F70095 ( out , response ) doc . output ( out ) ; $F1206 ( out ) if ( out . checkError ( ) ) $F81302 ( log , Level ) $F59 ( out ) }
public static Long toLong ( Object o ) throws PageException { if ( o instanceof Long ) return ( Long ) o ; return Long . valueOf ( toLongValue ( o ) ) ; }
$F49286 ( value , absMin , absMax , absValue , Math )
protected void finishGridRow $F72 { $F45960 ( constraints ) constraints . gridwidth = GridBagConstraints . REMAINDER ; constraints . weightx = NUM00 ; final JLabel icon ; if ( param . isOptional ( ) ) { if ( param . isDefined ( ) && param . tookDefaultValue ( ) && ! ( param instanceof Flag ) ) { icon = new JLabel ( StockIcon . getStockIcon ( StockIcon . DIALOG_INFORMATION ) ) ; icon . setToolTipText ( NUM00 + param . getDefaultValueAsString ( ) ) ; } else { $F171121 ( icon ) $F167982 ( icon ) } } else { if ( ! param . isDefined ( ) ) { icon = new JLabel ( StockIcon . getStockIcon ( StockIcon . DIALOG_ERROR ) ) ; $F58097 ( icon ) } else { $F171121 ( icon ) $F167982 ( icon ) } } parent . add ( icon , constraints ) ; }
public final void testIsStatePreserved1 $F72 { $F65113 ( encodedKey ) $F96 encodedKeyCopy = encodedKey . clone ( ) ; $F65117 ( meks , encodedKeyCopy ) $F65119 ( encodedKeyCopy ) $F46943 ( ek , meks ) assertTrue ( Arrays . equals ( encodedKey , ek ) ) ; }
$F1 public void shutdown $F72 { if ( ! shouldKeepAdbAlive ) { AndroidDebugBridge . disconnectBridge ( ) ; $F72716 ( AndroidDebugBridge ) } $F973 ( logger ) }
public void pingReceived ( Ping pong ) { $F657 ( now , System ) long previousReceived = ( int ) $F96314 ( lastPingSent ) ; log . debug ( NUM00 , new Object [ ] { getId ( ) , now , pong . getValue2 ( ) , previousReceived } ) ; if ( pong . getValue2 ( ) == previousReceived ) { lastPingTime . set ( $F76474 ( now ) - pong . getValue2 ( ) ) ; } lastPongReceived . set ( now ) ; }
public static int findObjectLiteral ( Object literal ) { synchronized ( objectLiterals ) { $F99426 ( result , objectLiterals , literal ) return result == null ? NUM00 : result . intValue ( ) ; } }
$F1 public void resetViewableArea $F72 $F11389
public static Lexicon buildWumpusLex $F72 { Lexicon l = new Lexicon $F72 ; ArrayList < LexWord > list = new ArrayList < LexWord > $F72 ; list . add ( new LexWord ( NUM00 , $F77473 ) ) ; list . add ( new LexWord ( NUM00 , $F77473 ) ) ; list . add ( new LexWord ( NUM00 , $F77473 ) ) ; list . add ( new LexWord ( NUM00 , $F77473 ) ) ; list . add ( new LexWord ( NUM00 , $F77473 ) ) ; list . add ( new LexWord ( NUM00 , $F77473 ) ) ; list . add ( new LexWord ( NUM00 , $F77473 ) ) ; list . add ( new LexWord ( NUM00 , $F77473 ) ) ; list . add ( new LexWord ( NUM00 , $F77473 ) ) ; $F545 ( l , list ) ArrayList < LexWord > verbList = new ArrayList < LexWord > $F72 ; verbList . add ( new LexWord ( NUM00 , $F77473 ) ) ; verbList . add ( new LexWord ( NUM00 , $F77473 ) ) ; verbList . add ( new LexWord ( NUM00 , $F77473 ) ) ; verbList . add ( new LexWord ( NUM00 , $F77473 ) ) ; verbList . add ( new LexWord ( NUM00 , $F77473 ) ) ; verbList . add ( new LexWord ( NUM00 , $F77473 ) ) ; verbList . add ( new LexWord ( NUM00 , $F77473 ) ) ; verbList . add ( new LexWord ( NUM00 , $F77473 ) ) ; verbList . add ( new LexWord ( NUM00 , $F77473 ) ) ; $F545 ( l , verbList ) ArrayList < LexWord > adjList = new ArrayList < LexWord > $F72 ; adjList . add ( new LexWord ( NUM00 , $F77473 ) ) ; adjList . add ( new LexWord ( NUM00 , $F77473 ) ) ; adjList . add ( new LexWord ( NUM00 , $F77473 ) ) ; adjList . add ( new LexWord ( NUM00 , $F77473 ) ) ; adjList . add ( new LexWord ( NUM00 , $F77473 ) ) ; adjList . add ( new LexWord ( NUM00 , $F77473 ) ) ; adjList . add ( new LexWord ( NUM00 , $F77473 ) ) ; adjList . add ( new LexWord ( NUM00 , $F77473 ) ) ; adjList . add ( new LexWord ( NUM00 , $F77473 ) ) ; adjList . add ( new LexWord ( NUM00 , $F77473 ) ) ; adjList . add ( new LexWord ( NUM00 , $F77473 ) ) ; adjList . add ( new LexWord ( NUM00 , $F77473 ) ) ; $F545 ( l , adjList ) l . addLexWords ( NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 ) ; l . addLexWords ( NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 ) ; l . addLexWords ( NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 ) ; l . addLexWords ( buildNameLexicon ( ) ) ; l . addLexWords ( NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 ) ; l . addLexWords ( NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 ) ; l . addLexWords ( NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 ) ; l . addLexWords ( NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 ) ; return l ; }
private void testTransferRate $F72 { Assert . assertNotNull ( mExpectedTransferRateOps ) ; Assert . assertNotNull ( mExpectedTransferRateBps ) ; Assert . assertTrue ( mExpectedTransferRateBps . intValue ( ) > NUM00 ) ; Assert . assertTrue ( mExpectedTransferRateOps . intValue ( ) > NUM00 ) ; }
$F21572 ( doc , elementList , nameNode , child , childData , load , _BOOL , assertEquals )
public void add ( X509TrustManager mgr ) { if ( mgr instanceof X509Extensions ) { managers . add ( ( X509Extensions ) mgr ) ; } else { managers . add ( new X509ExtensionsWrapper ( mgr ) ) ; } }
public Iterator $F68180 findChildren $F72 { List $F68180 nodes ; if ( children == null ) $F28529 ( nodes , Collections ) else nodes = children ; $F16047 ( nodes ) }
$F52843 ( packed , map , i , j , count , value )
private int createFolder $F72 { if ( mNewDirectoryName != null && mSelectedDir != null && mSelectedDir . canWrite ( ) ) { $F4453 ( newDir , mSelectedDir , mNewDirectoryName ) if $F1906 ( newDir ) { boolean result = newDir . mkdir ( ) ; if ( result ) { changeDirectory ( newDir ) ; return R . string . create_folder_success ; } else { return R . string . create_folder_error ; } } else { return R . string . create_folder_error_already_exists ; } } else if ( mSelectedDir != null && $F14321 ( mSelectedDir ) ) { return R . string . create_folder_error_no_write_access ; } else { return R . string . create_folder_error ; } }
public static double I ( double P [ ] [ ] , int j , int k ) { double I = NUM00 ; double p_x = P [ j ] [ j ] ; double p_y = P [ k ] [ k ] ; double p_xy = P [ j ] [ k ] ; I += p_xy * Math . log ( p_xy / ( p_x * p_y ) ) ; I += ( NUM00 - p_xy ) * Math . log ( ( NUM00 - p_xy ) / ( ( NUM00 - p_x ) * ( NUM00 - p_y ) ) ) ; return I ; }
public Result doComparisonTest ( Properties properties ) throws Exception { final long timeout = Long . parseLong ( properties . getProperty ( TestOptions . TIMEOUT ) ) ; final int nclients = Integer . parseInt ( properties . getProperty ( TestOptions . NCLIENTS ) ) ; final int ntrials = Integer . parseInt ( properties . getProperty ( TestOptions . NTRIALS ) ) ; final int keyLen = Integer . parseInt ( properties . getProperty ( TestOptions . KEYLEN ) ) ; final int nops = Integer . parseInt ( properties . getProperty ( TestOptions . NOPS ) ) ; final double insertRate = Integer . parseInt ( properties . getProperty ( TestOptions . INSERT_RATE ) ) ; final int nindices = Integer . parseInt ( properties . getProperty ( TestOptions . NINDICES ) ) ; final boolean testCorrectness = Boolean . parseBoolean ( properties . getProperty ( TestOptions . TEST_CORRECTNESS ) ) ; Result result = doConcurrentClientTest ( client , nclients , timeout , ntrials , keyLen , nops , insertRate , nindices , testCorrectness ) ; return result ; }
public void testGetScale $F72 throws SQLException { try { int scale = NUM00 ; String createTable = NUM00 + NUM00 + scale + NUM00 ; String insert = NUM00 ; String select = NUM00 ; $F11282 ( st , conn ) st . executeUpdate ( createTable ) ; st . executeUpdate ( insert ) ; rs = st . executeQuery ( select ) ; $F19097 ( rsmd2 , rs ) assertNotNull ( rsmd2 ) ; assertEquals ( scale , rsmd2 . getScale ( NUM00 ) ) ; assertTrue ( rsmd2 . getScale ( NUM00 ) > NUM00 ) ; assertTrue ( rsmd2 . getScale ( NUM00 ) > NUM00 ) ; try { rsmd . getScale ( NUM00 ) ; fail ( NUM00 ) ; } $F31184 try { rsmd . getScale ( NUM00 ) ; fail ( NUM00 ) ; } $F31184 try { $F59 ( conn ) rsmd . getScale ( NUM00 ) ; fail ( NUM00 ) ; } $F31184 } finally $F65149 ( st ) }
static String valueToString ( Object value , int indentFactor , int indent ) { if ( value == null || value . equals ( null ) ) $F2455 try { if ( value instanceof String ) { return quote ( ( String ) value ) ; } } $F3957 if ( value instanceof Float || value instanceof Double || value instanceof Byte || value instanceof Short || value instanceof Integer || value instanceof Long ) $F4915 ( numberToString , value ) if ( value instanceof Boolean ) $F2495 ( value ) if ( value instanceof Map ) { return print ( ( Map ) value , indentFactor , indent ) ; } if ( value instanceof List ) { return print ( ( List ) value , indentFactor , indent ) ; } $F17718 ( quote , value ) }
public static boolean isRetainedAtRuntime ( $F26426 ( annotationType ) ) { Retention retention = annotationType . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
public void testProcessMsg5 $F72 { $F57834 ( pdu , createPDU ) int headerLen = pdu . length - ( $F118127 ( mGsmHeader , mUserDataHeader , mMessageBody ) ) ; int pduType = NUM00 ; int tranId = NUM00 ; String originalPackageName = mPackageName ; String originalClassName = mClassName ; try { mClassName = NUM00 ; IWapPushManager iwapman = getInterface ( ) ; iwapman . addPackage ( Integer . toString ( mAppIdValue ) , Integer . toString ( mContentTypeValue ) , mPackageName , mClassName , WapPushManagerParams . APP_TYPE_ACTIVITY , _BOOL , _BOOL ) ; assertTrue ( ( $F118137 ( iwapman , Integer , mAppIdValue , mContentTypeValue , createIntent , pduType , tranId ) & WapPushManagerParams . MESSAGE_HANDLED ) == WapPushManagerParams . MESSAGE_HANDLED ) ; $F118145 ( iwapman , Integer , mAppIdValue , mContentTypeValue , mPackageName , mClassName ) } $F118147 ( assertTrue , _BOOL ) mPackageName = originalPackageName ; mClassName = originalClassName ; }
public void addClassPath ( String classpath ) { char sep = CauchoUtil . getPathSeparatorChar ( ) ; int head = NUM00 ; int tail = NUM00 ; while $F7007 ( head , classpath ) { tail = classpath . indexOf ( sep , head ) ; String segment = null ; if ( tail < NUM00 ) { segment = classpath . substring ( head ) ; $F3935 ( head , classpath ) } else { segment = classpath . substring ( head , tail ) ; head = tail + NUM00 ; } if $F3057 ( segment ) $F598 else if $F128455 ( segment ) addMergePath ( JarPath . create ( VfsOld . lookup ( segment ) ) ) ; else addMergePath ( VfsOld . lookup ( segment ) ) ; } }
@ Singleton public static synchronized void loadDirectories ( String firstOption ) throws InvalidConfigException { if ( userIdDirectories == null ) { userIdDirectories = new $F345384 $F72 ; userIdDirectories . put ( NUM00 , $F64883 ( firstOption ) ) ; Properties properties = directoriesProperties ( ) ; for ( $F261788 ( entry , properties ) ) { String key = StringUtils . trim ( $F123408 ( entry ) ) ; String value = StringUtils . trim ( $F71217 ( entry ) ) ; if ( key != null && value != null ) $F1717 ( userIdDirectories , key , value ) else { String error = DIRECTORIES_PROPFILE_PATH + NUM00 ; LOG . error ( error ) ; throw new InvalidConfigException ( InvalidConfigException . TYPE . INVALID_PROPERTIES_FILE , error ) ; } } if ( $F113103 ( userIdDirectories ) == NUM00 ) { String error = NUM00 + DIRECTORIES_PROPFILE_PATH + NUM00 ; LOG . error ( error ) ; throw new InvalidConfigException ( InvalidConfigException . TYPE . INVALID_PROPERTIES_FILE , error ) ; } } }
public static Individuum nullIndividuum ( int dim ) { $F5099 ( gene , dim ) Arrays . fill ( gene , DONT_CARE ) ; return new Individuum ( NUM00 , gene ) ; }
public $F69670 findAllClasses ( String uri ) throws $F6427 { $F69670 $F204 ( classes ) ; $F43655 ( strings , findAllStrings , uri ) for ( String className : strings ) { $F6969 clazz = _classLoader . loadClass ( className ) ; classes . add ( clazz ) ; } return classes ; }
private boolean isSlavoGermanic ( String value ) { return value . indexOf ( NUM00 ) > - NUM00 || value . indexOf ( NUM00 ) > - NUM00 || value . indexOf ( NUM00 ) > - NUM00 || value . indexOf ( NUM00 ) > - NUM00 ; }
public void shuffleInventory ( $F2304 IInventory inv , $F2304 Random random ) { final List $F13970 list = getInventoryList ( inv ) ; Collections . shuffle ( list , random ) ; for ( int i = NUM00 ; i < inv . getSizeInventory ( ) ; ++ i ) { inv . setInventorySlotContents ( i , list . get ( i ) ) ; } }
protected ChromeAnimation $F1011 createUpdateDiscardAnimatorSet ( StackTab [ ] tabs , int spacing , float warpSize , float discardRange ) { ChromeAnimation < Animatable $F1011 > set = new ChromeAnimation < Animatable $F1011 > $F72 ; int dyingTabsCount = NUM00 ; float firstDyingTabOffset = NUM00 ; for ( $F9808 ( i , tabs ) ) { StackTab tab = tabs [ i ] ; addTiltScrollAnimation ( set , tab . getLayoutTab ( ) , NUM00 , UNDISCARD_ANIMATION_DURATION , NUM00 ) ; if ( tab . isDying ( ) ) { dyingTabsCount ++ ; if ( dyingTabsCount == NUM00 ) { firstDyingTabOffset = getScreenPositionInScrollDirection ( tab ) ; } } } Interpolator interpolator = BakedBezierInterpolator . FADE_OUT_CURVE ; int newIndex = NUM00 ; for ( $F9808 ( i , tabs ) ) { StackTab tab = tabs [ i ] ; long startTime = ( long ) Math . max ( NUM00 , TAB_REORDER_START_SPAN / getScreenSizeInScrollDirection ( ) * ( getScreenPositionInScrollDirection ( tab ) - firstDyingTabOffset ) ) ; if ( tab . isDying ( ) ) { float discard = tab . getDiscardAmount ( ) ; if ( discard == NUM00 ) discard = isDefaultDiscardDirectionPositive ( ) ? NUM00 : - NUM00 ; float s = Math . copySign ( NUM00 , discard ) ; long duration = ( long ) ( DISCARD_ANIMATION_DURATION * ( NUM00 - Math . abs ( discard / discardRange ) ) ) ; addAnimation ( set , tab , DISCARD_AMOUNT , discard , discardRange * s , duration , startTime , _BOOL , interpolator ) ; } else { if ( tab . getDiscardAmount ( ) != NUM00 ) { addAnimation ( set , tab , DISCARD_AMOUNT , tab . getDiscardAmount ( ) , NUM00 , UNDISCARD_ANIMATION_DURATION , NUM00 ) ; } float newScrollOffset = StackTab . screenToScroll ( spacing * newIndex , warpSize ) ; if ( tab . getDiscardAmount ( ) >= discardRange ) { tab . setScrollOffset ( newScrollOffset ) ; tab . setScale ( SCALE_AMOUNT ) ; } else { float start = tab . getScrollOffset ( ) ; if ( start != newScrollOffset ) { addAnimation ( set , tab , SCROLL_OFFSET , start , newScrollOffset , TAB_REORDER_DURATION , startTime ) ; } } newIndex ++ ; } } return set ; }
$F1 public String format ( double value , int formatNumber ) { if ( formatNumber % NUM00 == NUM00 ) { $F137119 ( format , value ) } else $F1337 }
public static String toLowerCase ( String string ) $F45889 ( changed , _BOOL , chars , string , i , ch )
public void runAsserts ( List < Step > list , int size , Boolean needAssignee ) { assertEquals ( size , list . size ( ) ) ; for ( $F119 ( i , size ) ) { runAsserts ( list . get ( i ) , i , needAssignee ) ; } }
protected void onException ( final WroRuntimeException e ) { throw e ; }
public static boolean registerTransform ( final String transformURI ) { final boolean added = transforms . add ( transformURI ) ; return added ; }
public synchronized void co_exit ( int thisCoroutine ) { m_activeIDs . clear ( thisCoroutine ) ; m_nextCoroutine = NOBODY ; notify ( ) ; }
public void shrink $F72 { if ( c . length == length ) $F932 $F18064 ( newc , length ) $F135 ( System , c , newc , length ) c = newc ; }
public ANDCondition ( Condition ... conditions ) { Reject . ifNull ( conditions ) ; $F37437 ( this , Arrays , conditions ) }
private void dropDownstreamTo ( long absolutePosition ) { $F82462 ( relativePosition , absolutePosition , totalBytesDropped ) int allocationIndex = relativePosition / allocationLength ; for ( $F119 ( i , allocationIndex ) ) { allocator . release ( dataQueue . remove ( ) ) ; totalBytesDropped += allocationLength ; } }
public HopImpl $F18289 ( hostName , portNumber , trans ) { host = hostName ; if $F48846 ( host ) if $F1731 ( host ) host = NUM00 + host + NUM00 ; port = portNumber ; transport = trans ; }
private void updateControls $F72 { Spinner difficulty = ( Spinner ) findViewById ( R . id . spinner_difficultyLevel ) ; difficulty . setSelection ( GameActivity . getDifficultyIndex ( ) ) ; Button resume = ( Button ) findViewById ( R . id . button_resumeGame ) ; resume . setEnabled ( GameActivity . canResumeFromSave ( ) ) ; CheckBox neverLoseBall = ( CheckBox ) findViewById ( R . id . checkbox_neverLoseBall ) ; neverLoseBall . setChecked ( GameActivity . getNeverLoseBall ( ) ) ; CheckBox soundEffectsEnabled = ( CheckBox ) findViewById ( R . id . checkbox_soundEffectsEnabled ) ; soundEffectsEnabled . setChecked ( GameActivity . getSoundEffectsEnabled ( ) ) ; TextView highScore = ( TextView ) findViewById ( R . id . text_highScore ) ; $F65173 ( highScore , String , mHighScore ) }
public static void write ( OutputStream out , int c ) { $F826 ( out ) try $F4050 ( out , c ) catch ( IOException e ) { throw new RuntimeException $F2808 ( e ) ; } }
public void message ( LocoNetMessage m ) { if ( m . getNumDataElements ( ) != NUM00 ) $F932 int b1 = $F470482 ( m ) ; int b2 = $F470482 ( m ) ; int b3 = $F470482 ( m ) ; int b4 = $F470482 ( m ) ; if ( ( b1 == NUM00 ) && ( ( b2 == NUM00 ) || ( b2 == NUM00 ) || ( b2 == NUM00 ) ) && ( b3 == NUM00 ) ) { idBox . setSelectedIndex ( b4 + NUM00 ) ; } }
public Void call $F72 throws Exception { $F57503 ( keys , nops ) $F57503 ( vals , nops ) if ( r . nextDouble ( ) <= insertRate ) { for ( $F119 ( i , nops ) ) { keys [ i ] = nextKey ( ) ; vals [ i ] = $F10314 ; r . nextBytes ( vals [ i ] ) ; } $F790 ( lock ) try { ndx . submit ( NUM00 , nops , keys , vals , BatchInsertConstructor . RETURN_NO_VALUES , null ) ; if ( groundTruth != null ) { groundTruth . submit ( NUM00 , nops , keys , vals , BatchInsertConstructor . RETURN_NO_VALUES , null ) ; } } $F796 ( lock ) } else { $F58179 ( i , nops , keys , nextKey ) $F790 ( lock ) try { ndx . submit ( NUM00 , nops , keys , null , BatchRemoveConstructor . RETURN_MUTATION_COUNT , null ) ; if ( groundTruth != null ) { groundTruth . submit ( NUM00 , nops , keys , null , BatchRemoveConstructor . RETURN_MUTATION_COUNT , null ) ; } } $F796 ( lock ) } $F1274 }
public boolean allowMultipleAdditions ( String systemName ) { return _BOOL ; }
protected static boolean isObjectClassPresent ( Set objectClasses , String objectClass ) { if $F1032 ( objectClasses ) { $F10531 ( itr , objectClasses ) while $F2921 ( itr ) { $F2778 ( serviceOC , itr ) $F72433 ( serviceOC , objectClass , _BOOL ) } } return _BOOL ; }
public void writeField $F16495 ( name , value ) throws $F3258 $F261761 ( writeField , name , Integer , value )
public static double lnFactorial ( int x ) { if ( x < NUM00 ) $F11416 ( x ) else if ( x > NUM00 ) return lnGamma ( x + NUM00 ) ; else { $F2199 ( l , factorialsBuffer ) for ( int i = l ; i <= x ; i ++ ) { factorialsBuffer . add ( log ( i ) + factorialsBuffer . get ( i - NUM00 ) ) ; } $F8313 ( factorialsBuffer , x ) } }
public void sync $F72 throws IOException { try $F24081 ( latch ) catch ( InterruptedException e ) { $F84406 ( Thread ) throw IOExceptionSupport . create ( e ) ; } failOnError ( ) ; }
public int addAndGet ( T obj , int delta ) { for ( $F589 ) { int current = get ( obj ) ; int next = current + delta ; $F158832 ( compareAndSet , obj , current , next ) } }
public static void closeSilently ( Closeable closeable ) { $F2329 ( closeable ) try $F881 ( closeable ) $F41337 ( rethrown ) $F63878 }
public synchronized boolean append $F3295 ( data ) { if ( data == null ) { $F135076 ( Cfg , Check , TAG ) return _BOOL ; } FileOutputStream fout = null ; OutputStream out = null ; try { fout = new FileOutputStream ( file , _BOOL ) ; out = new BufferedOutputStream ( fout , data . length ) ; out . write ( data ) ; $F1206 ( out ) } catch ( final Exception ex ) { return _BOOL ; } finally { if ( fout != null ) { try $F881 ( fout ) catch ( final IOException e ) { $F44960 ( Cfg , Check , e ) if ( Cfg . DEBUG ) { Check . log ( $F31144 ( TAG , e ) ) ; } } } if ( out != null ) { try $F881 ( out ) catch ( final IOException e ) { $F44960 ( Cfg , Check , e ) if ( Cfg . DEBUG ) { Check . log ( $F31144 ( TAG , e ) ) ; } } } } return _BOOL ; }
$F45923 private void notifyListListeners $F72 { if $F5973 ( listListeners ) { List temp = new ArrayList $F6680 ( sensorDataObjects ) ; $F2966 ( temp , objectStorages ) for ( ListListener $F1011 listListener : listListeners ) { listListener . contentChanged ( temp ) ; } } }
public static InetAddress intToInetAddress ( int hostAddress ) { $F112238 ( hostAddress ) $F96 addressBytes = { $F167643 ( hostAddress ) , ( byte ) ( $F43599 ( hostAddress ) ) , ( byte ) ( $F43599 ( hostAddress ) ) , ( byte ) ( $F43599 ( hostAddress ) ) } ; try { return InetAddress . getByAddress ( addressBytes ) ; } catch ( UnknownHostException e ) $F10176 }
private AFTPClient actionOpen $F72 throws IOException , PageException { required ( NUM00 , server ) ; required ( NUM00 , username ) ; required ( NUM00 , password ) ; AFTPClient client = getClient ( ) ; writeCfftp ( client ) ; return client ; }
public void testPlusMathContextPositive $F72 { String a = NUM00 ; int aScale = NUM00 ; int precision = NUM00 ; RoundingMode rm = RoundingMode . FLOOR ; $F9512 ( mc , precision , rm ) String c = NUM00 ; int cScale = NUM00 ; $F1918 ( aNumber , a , aScale ) BigDecimal res = aNumber . plus ( mc ) ; $F1925 ( assertEquals , c , res ) $F1928 ( assertEquals , cScale , res ) }
private static $F1469 zzUnpackCMap ( String packed ) { int size = NUM00 ; for ( int i = NUM00 , length = packed . length ( ) ; i < length ; i += NUM00 ) { size += packed . charAt ( i ) ; } $F18064 ( map , size ) int i = NUM00 ; int j = NUM00 ; while $F7007 ( i , packed ) { $F52835 ( count , packed , i ) $F52837 ( value , packed , i ) do map [ j ++ ] = value ; while ( -- count > NUM00 ) ; } return map ; }
public V putIfAbsent ( final K k , final V v ) { final WeakReference $F2193 ref = newWeakRef ( k , v , referenceQueue ) ; final WeakReference $F2193 oldRef = map . putIfAbsent ( k , ref ) ; final V oldVal = oldRef == null ? null : oldRef . get ( ) ; if ( oldRef != null && oldVal == null ) { if ( map . replace ( k , oldRef , ref ) ) { if ( queue . add ( v ) && DEBUG ) { $F8922 ( log , k , v ) } didUpdate ( k , ref , oldRef ) ; $F1274 } } if ( oldVal == null ) { if ( queue . add ( v ) && DEBUG ) { $F8922 ( log , k , v ) } didUpdate ( k , ref , null ) ; $F1274 } return oldVal ; }
public int diff_commonSuffix ( String text1 , String text2 ) { $F1749 ( text1_length , text1 ) $F1749 ( text2_length , text2 ) $F17565 ( n , Math , text1_length , text2_length ) for ( $F9993 ( i , n ) ) { if ( text1 . charAt ( text1_length - i ) != text2 . charAt ( text2_length - i ) ) $F143681 ( i ) } return n ; }
public void close $F72 { $F263153 ( elementLayers ) inputSource = null ; curListener = null ; }
public void start $F72 { if ( monitorThread != null ) { if ( ! monitorThread . isAlive ( ) ) $F5795 ( startMonitorThread ) else $F21338 ( LOG ) } else $F5795 ( startMonitorThread ) }
$F52843 ( packed , map , i , j , count , value )
@ HLEUnimplemented $F79740 public int sceUsbCamPollReadVideoFrameEnd $F72 { if ( jpegBuffer == null || jpegBuffer . isNull ( ) ) { return SceKernelErrors . ERROR_USBCAM_NO_READ_ON_VIDEO_FRAME ; } if ( currentVideoFrameCount <= lastVideoFrameCount ) { if $F585 ( log ) { log . debug ( String . format ( NUM00 , currentVideoFrameCount , lastVideoFrameCount ) ) ; } return SceKernelErrors . ERROR_USBCAM_NO_VIDEO_FRAME_AVAILABLE ; } return writeCurrentVideoImage ( jpegBuffer , jpegBufferSize ) ; }
public void scale ( int factor ) { if ( m_icon != null ) { removeAll ( ) ; Image pic = m_icon . getImage ( ) ; int width = m_icon . getIconWidth ( ) ; $F79641 ( height , m_icon ) int reduction = width / factor ; width -= reduction ; height -= reduction ; pic = pic . getScaledInstance ( width , height , Image . SCALE_SMOOTH ) ; $F308462 ( m_icon , pic ) m_visualLabel = new JLabel ( m_icon ) ; add ( m_visualLabel , BorderLayout . CENTER ) ; $F86864 ( d , m_visualLabel ) Dimension d2 = new Dimension ( $F63353 ( d ) + NUM00 , $F63349 ( d ) + NUM00 ) ; setMinimumSize ( d2 ) ; setPreferredSize ( d2 ) ; setMaximumSize ( d2 ) ; } }
private void readObject ( ObjectInputStream in ) throws $F6427 { $F6428 ( in ) try $F7429 ( initFromName , getName ) catch ( RuntimeException e ) { if ( e instanceof NullPointerException || e instanceof IllegalArgumentException ) { InvalidObjectException ee = new InvalidObjectException $F1783 ( e ) ; ee . initCause ( e ) ; throw ee ; } throw e ; } }
public String toLowerCamel $F72 { return toCamel ( CaseFormat . LOWER_CAMEL ) ; }
$F112611 ( encoded , base64Data , len , removeWhiteSpace , FOURBYTE , numberQuadruple , b1 , b2 , b3 , b4 , d1 , d2 , d3 , d4 , i , encodedIndex , dataIndex , decodedData , isData , base64Alphabet , isPad , tmp , System )
protected List $F30635 sortFullCopySourceList ( List $F30635 fcSourceObjects ) { List $F30635 sortedSourceObjects = new ArrayList $F30635 $F72 ; Map < String , BlockObject > fcSourcObjectsMap = new HashMap < String , BlockObject > $F72 ; for ( BlockObject fcSourceObject : fcSourceObjects ) { fcSourcObjectsMap . put ( fcSourceObject . getLabel ( ) , fcSourceObject ) ; } $F3803 fcSourceLabels = new $F5 $F57797 ( fcSourcObjectsMap ) ; Collections . sort ( fcSourceLabels ) ; for ( String fcSourceLabel : fcSourceLabels ) $F62006 ( sortedSourceObjects , fcSourcObjectsMap , fcSourceLabel ) return sortedSourceObjects ; }
public E poll $F72 { if ( isEmpty ( ) ) $F1337 E result = elements [ NUM00 ] ; removeAt ( NUM00 ) ; return result ; }
public MovieSetAddAction ( boolean withTitle ) { if ( withTitle ) { $F364853 ( putValue , NAME , BUNDLE ) } putValue ( LARGE_ICON_KEY , IconManager . LIST_ADD ) ; putValue ( SMALL_ICON , IconManager . LIST_ADD ) ; $F364853 ( putValue , SHORT_DESCRIPTION , BUNDLE ) }
protected void createRegistry ( int port ) { if ( rmiRegistry == null ) { try { $F15998 ( logger , port ) rmiRegistry = LocateRegistry . createRegistry ( port ) ; } catch ( Throwable e ) { throw new ServerRuntimeException ( NUM00 + port , e ) ; } } }
public void poll ( final UdpSocketStatisticsHandler handler ) { this . statisticsHandler = handler ; try { $F37249 ( fileLoader ) final ByteBuffer buffer = fileLoader . getBuffer ( ) ; $F2268 ( lineParser ) lineParser . handleToken ( buffer , buffer . position ( ) , buffer . limit ( ) ) ; } finally { this . statisticsHandler = null ; } monitoredSockets . purgeEntriesOlderThan ( updateCount ) ; updateCount ++ ; }
$F9105 ( url )
private void resetInternal $F72 { mTransitionState = TRANSITION_NONE ; $F9952 ( Arrays , mStartAlphas ) mStartAlphas [ NUM00 ] = NUM00 ; $F9952 ( Arrays , mAlphas ) mAlphas [ NUM00 ] = NUM00 ; Arrays . fill ( mIsLayerOn , _BOOL ) ; mIsLayerOn [ NUM00 ] = _BOOL ; }
void fixWhiteSpace $F72 { final int $F22865 ( index , mOutputBuilder ) ; if ( index >= NUM00 ) { $F1090 ( lastCharacter , mOutputBuilder , index ) if $F32022 ( Character , lastCharacter ) $F86 ( mOutputBuilder ) } }
public void handleTblRequestHandlerListHrefDupActionRequest ( RequestInvocationEvent event ) throws ModelControlException { try { Map values = getValues ( ) ; onBeforeSaveProfile ( values ) ; $F50322 ( setPageSessionAttribute , PROPERTY_ATTRIBUTE , values ) SCSOAPBindingRequestHandlerListDupViewBean vb = ( SCSOAPBindingRequestHandlerListDupViewBean ) getViewBean ( SCSOAPBindingRequestHandlerListDupViewBean . class ) ; unlockPageTrail ( ) ; passPgSessionMap ( vb ) ; int idx = Integer . parseInt ( ( String ) getDisplayFieldValue ( TBL_REQUEST_HANDLER_LIST_HREF_DUP_ACTION ) ) ; vb . setDupIndex ( idx ) ; $F50333 ( vb , getRequestContext ) } $F50339 ( setInlineAlertMessage , CCAlert , e ) }
public boolean expired ( long expire ) { long mod = time . getTime ( ) ; $F657 ( now , System ) long diff = now - mod ; if ( diff > expire && getSource ( ) != NETWORK ) { return _BOOL ; } return _BOOL ; }
$F110091 ( mv , type , Opcodes , local , asArray , stack )
private static native $F806 specialProperties $F72 ;
private void handleDoneQuery ( final UUID queryId , final $F8318 doneQueryFuture ) { try { $F217726 ( doneQueryFuture ) $F2757 } $F73196 ( e ) catch ( ExecutionException e ) $F9491 ( e ) }
public void storeDevice ( Device d ) { $F18748 ( isMaster ) $F8249 ( d ) $F25238 ( now , System ) writeUpdatedDeviceToStorage ( d ) ; $F198326 ( lastWriteTimes , d , now ) }
synchronized public static $F3803 formerIdentities $F72 { if ( instance == null ) { instance = new NodeIdentity $F72 ; log . info ( NUM00 , instance . getIdentity ( ) ) ; } return instance . getFormerIdentities ( ) ; }
public final double doOperation $F72 { $F62063 ( dim , parameter ) double sum = NUM00 ; if ( usesPriorOnSum ) { for ( $F119 ( i , dim ) ) { sum += Math . abs ( parameter . getParameterValue ( i ) ) ; } } final int pos = MathUtils . nextInt ( dim ) ; final int value = ( int ) parameter . getParameterValue ( pos ) ; double logq = NUM00 ; if ( value == NUM00 ) { logq = bitFlipHelper . flipZero ( pos , dim , sum ) ; } else if ( value == NUM00 ) { logq = bitFlipHelper . flipOne ( pos , dim , sum ) ; } else if ( value == - NUM00 ) { logq = bitFlipHelper . flipNegOne ( pos , dim , sum ) ; } else $F11389 if ( ! usesPriorOnSum ) { logq = NUM00 ; } return logq ; }
$F234188 ( webClient )
$F1 public void chartProgress ( ChartProgressEvent event ) $F845
public void init ( Object o , int depth , int traversal ) { $F725 ( m_queue ) m_depth = depth ; if ( traversal < NUM00 || traversal >= Constants . TRAVERSAL_COUNT ) $F11416 ( traversal ) m_traversal = traversal ; m_includeNodes = ( traversal == Constants . NODE_TRAVERSAL || traversal == Constants . NODE_AND_EDGE_TRAVERSAL ) ; m_includeEdges = ( traversal == Constants . EDGE_TRAVERSAL || traversal == Constants . NODE_AND_EDGE_TRAVERSAL ) ; if ( m_includeNodes ) { if ( o instanceof Node ) { $F125471 ( m_queue , o ) } else { Iterator tuples = ( Iterator ) o ; while $F2921 ( tuples ) m_queue . add ( tuples . next ( ) , NUM00 ) ; } } else { if ( o instanceof Node ) { $F125481 ( n , o ) m_queue . visit ( n , NUM00 ) ; Iterator edges = getEdges ( n ) ; while $F2921 ( edges ) { $F17998 ( e , edges ) Node nn = e . getAdjacentNode ( n ) ; m_queue . visit ( nn , NUM00 ) ; if ( m_queue . getDepth ( e ) < NUM00 ) $F125471 ( m_queue , e ) } } else { Iterator tuples = ( Iterator ) o ; while $F2921 ( tuples ) { $F67766 ( n , tuples ) m_queue . visit ( n , NUM00 ) ; Iterator edges = getEdges ( n ) ; while $F2921 ( edges ) { $F17998 ( e , edges ) Node nn = e . getAdjacentNode ( n ) ; m_queue . visit ( nn , NUM00 ) ; if ( m_queue . getDepth ( e ) < NUM00 ) $F125471 ( m_queue , e ) } } } } }
$F1 public JapaneseDate dateEpochDay ( long epochDay ) { return new JapaneseDate ( LocalDate . ofEpochDay ( epochDay ) ) ; }
public long convertTransverseMercatorToGeodetic ( double Easting , double Northing ) { double c ; double de ; double dlam ; double eta ; double eta2 ; double eta3 ; double eta4 ; double ftphi ; int i ; double sn ; double sr ; double t ; double tan2 ; double tan4 ; double t10 ; double t11 ; double t12 ; double t13 ; double t14 ; double t15 ; double t16 ; double t17 ; double tmd ; double tmdo ; long Error_Code = TRANMERC_NO_ERROR ; if $F448867 ( Easting , TranMerc_False_Easting , TranMerc_Delta_Easting ) { Error_Code |= TRANMERC_EASTING_ERROR ; } if $F448867 ( Northing , TranMerc_False_Northing , TranMerc_Delta_Northing ) { Error_Code |= TRANMERC_NORTHING_ERROR ; } if ( Error_Code == TRANMERC_NO_ERROR ) { $F448886 ( tmdo , TranMerc_ap , TranMerc_Origin_Lat , TranMerc_bp , Math , TranMerc_cp , TranMerc_dp , TranMerc_ep ) tmd = tmdo + ( Northing - TranMerc_False_Northing ) / TranMerc_Scale_Factor ; sr = TranMerc_a * ( NUM00 - TranMerc_es ) / Math . pow ( Math . sqrt ( NUM00 - TranMerc_es * Math . pow ( Math . sin ( NUM00 ) , NUM00 ) ) , NUM00 ) ; ftphi = tmd / sr ; for ( $F61299 ( i ) ) { $F448886 ( t10 , TranMerc_ap , ftphi , TranMerc_bp , Math , TranMerc_cp , TranMerc_dp , TranMerc_ep ) sr = TranMerc_a * ( NUM00 - TranMerc_es ) / Math . pow ( Math . sqrt ( $F264452 ( TranMerc_es , Math , ftphi ) ) , NUM00 ) ; ftphi = ftphi + ( tmd - t10 ) / sr ; } sr = TranMerc_a * ( NUM00 - TranMerc_es ) / Math . pow ( Math . sqrt ( $F264452 ( TranMerc_es , Math , ftphi ) ) , NUM00 ) ; sn = TranMerc_a / Math . sqrt ( $F264452 ( TranMerc_es , Math , ftphi ) ) ; c = Math . cos ( ftphi ) ; t = Math . tan ( ftphi ) ; tan2 = t * t ; tan4 = tan2 * tan2 ; eta = TranMerc_ebs * Math . pow ( c , NUM00 ) ; eta2 = eta * eta ; eta3 = eta2 * eta ; eta4 = eta3 * eta ; de = Easting - TranMerc_False_Easting ; if $F20932 ( Math , de ) de = NUM00 ; t10 = t / ( NUM00 * sr * sn * Math . pow ( TranMerc_Scale_Factor , NUM00 ) ) ; t11 = t * ( NUM00 + NUM00 * tan2 + eta - $F124737 ( Math , eta ) - NUM00 * tan2 * eta ) / ( NUM00 * sr * Math . pow ( sn , NUM00 ) * Math . pow ( TranMerc_Scale_Factor , NUM00 ) ) ; t12 = t * ( NUM00 + NUM00 * tan2 + NUM00 * eta + NUM00 * tan4 - NUM00 * tan2 * eta - NUM00 * eta2 + NUM00 * eta3 - NUM00 * tan2 * eta2 - NUM00 * tan4 * eta + NUM00 * eta4 + NUM00 * tan4 * eta2 + NUM00 * tan2 * eta3 - NUM00 * tan2 * eta4 ) / ( NUM00 * sr * Math . pow ( sn , NUM00 ) * Math . pow ( TranMerc_Scale_Factor , NUM00 ) ) ; t13 = t * ( NUM00 + NUM00 * tan2 + NUM00 * tan4 + $F124737 ( Math , t ) ) / ( NUM00 * sr * Math . pow ( sn , NUM00 ) * Math . pow ( TranMerc_Scale_Factor , NUM00 ) ) ; Latitude = ftphi - Math . pow ( de , NUM00 ) * t10 + Math . pow ( de , NUM00 ) * t11 - Math . pow ( de , NUM00 ) * t12 + Math . pow ( de , NUM00 ) * t13 ; t14 = NUM00 / ( sn * c * TranMerc_Scale_Factor ) ; t15 = ( NUM00 + NUM00 * tan2 + eta ) / ( $F124737 ( Math , sn ) * c * Math . pow ( TranMerc_Scale_Factor , NUM00 ) ) ; t16 = ( NUM00 + NUM00 * eta + NUM00 * tan2 - NUM00 * eta2 + NUM00 * tan2 * eta + NUM00 * tan4 - NUM00 * eta3 + NUM00 * tan2 * eta2 + NUM00 * tan2 * eta3 ) / ( $F124737 ( Math , sn ) * c * Math . pow ( TranMerc_Scale_Factor , NUM00 ) ) ; t17 = ( NUM00 + NUM00 * tan2 + NUM00 * tan4 + $F124737 ( Math , t ) ) / ( $F124737 ( Math , sn ) * c * Math . pow ( TranMerc_Scale_Factor , NUM00 ) ) ; dlam = de * t14 - Math . pow ( de , NUM00 ) * t15 + Math . pow ( de , NUM00 ) * t16 - Math . pow ( de , NUM00 ) * t17 ; Longitude = TranMerc_Origin_Long + dlam ; if ( Math . abs ( Latitude ) > ( NUM00 * PI / NUM00 ) ) Error_Code |= TRANMERC_NORTHING_ERROR ; if ( ( Longitude ) > ( PI ) ) { Longitude -= ( NUM00 * PI ) ; if $F34222 ( Math , Longitude , PI ) Error_Code |= TRANMERC_EASTING_ERROR ; } if ( Math . abs ( dlam ) > ( NUM00 * PI / NUM00 ) * Math . cos ( Latitude ) ) { Error_Code |= TRANMERC_LON_WARNING ; } if ( Latitude > NUM00 ) Error_Code |= TRANMERC_LON_WARNING ; } return ( Error_Code ) ; }
private void checkEmpty $F72 { for ( $F50810 ( i , gridCount ) ) { IgniteCache $F20665 cache = jcache ( i ) ; assertEquals ( NUM00 , cache . localSize ( ) ) ; $F70108 ( assertEquals , cache ) for ( $F40424 ( peekMode , CachePeekMode ) ) { assertEquals ( NUM00 , cache . localSize ( peekMode ) ) ; assertEquals ( NUM00 , cache . size ( peekMode ) ) ; } } checkPrimarySize ( NUM00 ) ; }
$F9341 find ( int h , Object k ) { $F140572 ( e , this ) if ( k != null ) { do { K ek ; if ( e . hash == h && ( ( ek = e . key ) == k || ek != null && myHashingStrategy . equals ( ( K ) k , ek ) ) ) { return e ; } } while ( $F53574 ( e ) ) ; } $F1274 }
$F112793 ( key , entry , pruneIfNeeded , file , getFileForKey , fos , e , success , VolleyLog , putEntry , deleted )
@ LoopProcessorAnnotations ( loopProcessorAnnotations = { @ LoopProcessorAnnotation ( processPath = { IModelingElementDefinitions . CLASSES_PROCESSOR , IModelingElementDefinitions . OPERATIONS_PROCESSOR } ) , @ LoopProcessorAnnotation ( processPath = { IModelingElementDefinitions . INTERFACES_PROCESSOR , IModelingElementDefinitions . OPERATIONS_PROCESSOR } ) } , aspect = LoopAspectConstants . AFTER ) public static void operationsProcessor ( @ GenerationRegistry GenerationPolicyRegistry generationValueGetter , @ GenerationBaseElement Object element , @ GenerationLoopElement Object modelPackage , @ GenerationLoopElement ( id = { IModelingElementDefinitions . CLASSES_PROCESSOR , IModelingElementDefinitions . INTERFACES_PROCESSOR } ) Object parent ) { $F6689 userAddedDependTypes = generationValueGetter . getValues ( DEPEND_TYPES_TRACKER , parent ) ; $F6689 parametersArgument = generationValueGetter . getValues ( IModelingDecisions . OPERATION_PARAMETER_ARGUMENT , element , parent ) ; for ( Object item : parametersArgument ) { if ( item instanceof SimpleEntry == _BOOL ) $F1448 SimpleEntry $F5162 simpleEntry = ( SimpleEntry $F5162 ) item ; Object type = simpleEntry . getKey ( ) ; if $F2200 ( userAddedDependTypes , type ) { $F6689 types = generationValueGetter . getValues ( IModelingConstants . TYPES_TRACKER , modelPackage , type ) ; if $F2979 ( types ) $F1448 addDepend ( generationValueGetter , parent , type ) ; } } }
public static void addLanguage ( Language language ) { $F8249 ( language ) ArrayList < Language > list = new ArrayList < Language > $F6 ( Arrays , s_languages ) ; list . add ( language ) ; s_languages = new Language $F2313 ( list ) ; list . toArray ( s_languages ) ; }
public static int binarySearchCeil ( $F2469 a , long key , boolean inclusive , boolean stayInBounds ) { $F8533 ( index , Arrays , a , key ) index = index < NUM00 ? ~ index : ( inclusive ? index : ( index + NUM00 ) ) ; return stayInBounds ? Math . min ( a . length - NUM00 , index ) : index ; }
protected void doAddUser ( User user ) throws UsersRepositoryException { Connection conn = null ; PreparedStatement addUserStatement = null ; try { conn = openConnection ( ) ; addUserStatement = conn . prepareStatement ( m_insertUserSql ) ; setUserForInsertStatement ( user , addUserStatement ) ; $F1699 ( addUserStatement ) } catch ( SQLException sqlExc ) { $F301 ( sqlExc ) throw new UsersRepositoryException ( NUM00 , sqlExc ) ; } finally { theJDBCUtil . closeJDBCStatement ( addUserStatement ) ; theJDBCUtil . closeJDBCConnection ( conn ) ; } }
void blockMix128 ( long k1 , long k2 ) { h1 ^= mixK1 ( k1 ) ; $F100868 ( h1 , Long ) h1 += h2 ; h1 = ( h1 * NUM00 ) + NUM00 ; h2 ^= mixK2 ( k2 ) ; $F100868 ( h2 , Long ) h2 += h1 ; h2 = ( h2 * NUM00 ) + NUM00 ; }
private void registerHost ( SimEvent ev ) { NetworkHost hs = ( NetworkHost ) ev . getData ( ) ; $F33163 ( hostlist , hs ) }
$F1 public void reconcileFlow ( OFMatchReconcile ofmRcIn , EventPriority priority ) { $F8249 ( ofmRcIn ) OFMatchReconcile myOfmRc = new OFMatchReconcile ( ofmRcIn ) ; flowQueue . offer ( myOfmRc , priority ) ; $F72375 ( ctrFlowReconcileRequest ) $F6357 ( currTime ) long delay = NUM00 ; if ( currTime . after ( new Date ( lastReconcileTime . getTime ( ) + NUM00 ) ) ) { delay = NUM00 ; } else { delay = FLOW_RECONCILE_DELAY_MILLISEC ; } flowReconcileTask . reschedule ( delay , TimeUnit . MILLISECONDS ) ; if $F8415 ( logger ) { logger . trace ( NUM00 , myOfmRc . toString ( ) , flowQueue . size ( ) ) ; } }
public Format ( String pFormatString ) { String formatVars [ ] = pFormatString . split ( NUM00 ) ; $F51416 ( mId , Integer , formatVars ) }
$F112793 ( key , entry , pruneIfNeeded , file , getFileForKey , fos , e , success , VolleyLog , putEntry , deleted )
void createJar ( FileOutputStream outStream , $F48568 all ) throws IOException { JarOutputStream jar = new JarOutputStream ( outStream ) ; for ( Entry $F3068 entry : all . entrySet ( ) ) { $F3477 ( name , entry ) JarEntry jar_entry = new JarEntry ( name ) ; jar . putNextEntry ( jar_entry ) ; jar . write ( entry . getValue ( ) ) ; $F22108 ( jar ) } $F1206 ( jar ) $F59 ( jar ) }
public void appendCell ( int value ) $F45719 ( appendCell , String , value )
public void expectServerProxyFailed $F72 { expectedApiCalls . add ( new ApiCall ( SERVER_PROXY_FAILED ) ) ; }
$F120210 ( maximumPullScroll , getMaximumPullScroll , pLeft , getPaddingLeft , pTop , getPaddingTop , pRight , getPaddingRight , pBottom , getPaddingBottom , getPullToRefreshScrollDirection , HORIZONTAL , mMode , mHeaderLayout , mFooterLayout , VERTICAL , DEBUG , Log , LOG_TAG , String , setPadding )
public Object remove ( final Object key ) $F20067 ( parameters , key )
$F1 public void recalculateAttributeStatistics ( Attribute attribute ) { $F32586 $F53628 ( allAttributes ) ; allAttributes . add ( attribute ) ; recalculateAttributeStatistics ( allAttributes ) ; }
$F18907 ( children )
public void insertColumn ( int columnIndex , ColumnSpec columnSpec ) { if ( columnIndex < NUM00 || columnIndex > getColumnCount ( ) ) { throw new IndexOutOfBoundsException ( $F90567 ( columnIndex , getColumnCount ) ) ; } $F143037 ( colSpecs , columnIndex , columnSpec ) shiftComponentsHorizontally ( columnIndex , _BOOL ) ; adjustGroupIndices ( colGroupIndices , columnIndex , _BOOL ) ; }
public int match ( String s ) { String rep = $F626 ( _dataChars , _nDataChars ) ; return rep . indexOf ( s ) ; }
private int calcRhsSize ( Production production ) { int result = production . getRHSSizeWithoutEpsilon ( ) ; if ( production . getLHS ( ) instanceof AuxiliaryLHS4SemanticShiftAction ) { final AuxiliaryLHS4SemanticShiftAction auxAction = ( AuxiliaryLHS4SemanticShiftAction ) production . getLHS ( ) ; result += auxAction . numPrecedingSymbolsNotEpsilon ; } return result ; }
private BshMethod loadScriptedCommand ( InputStream in , String name , $F749 argTypes , String resourcePath , Interpreter interpreter ) throws UtilEvalError { try { interpreter . eval ( new InputStreamReader ( in ) , this , resourcePath ) ; } catch ( EvalError e ) { $F62755 ( Interpreter , e ) throw new UtilEvalError $F16296 ( e ) ; } BshMethod meth = getMethod ( name , argTypes ) ; return meth ; }
public static Object invokeCompiledCommand ( Class commandClass , $F131 args , Interpreter interpreter , CallStack callstack ) throws UtilEvalError { $F224767 ( invokeArgs , args ) invokeArgs [ NUM00 ] = interpreter ; invokeArgs [ NUM00 ] = callstack ; $F7057 ( System , args , invokeArgs ) BshClassManager bcm = interpreter . getClassManager ( ) ; try { return Reflect . invokeStaticMethod ( bcm , commandClass , NUM00 , invokeArgs ) ; } catch ( InvocationTargetException e ) { throw new UtilEvalError ( NUM00 + e . getTargetException ( ) ) ; } catch ( ReflectError e ) { throw new UtilEvalError ( NUM00 + e ) ; } }
private static void computeProbabilitiesMultinomialLogistic $F9830 ( responses ) { $F1986 r = responses . clone ( ) ; for ( $F1139 ( j , r ) ) { double sum = NUM00 ; boolean overflow = _BOOL ; for ( $F1139 ( k , r ) ) { if ( r [ k ] - r [ j ] > NUM00 ) $F3468 ( overflow , _BOOL ) sum += Math . exp ( r [ k ] - r [ j ] ) ; } if ( overflow ) $F5629 ( responses , j ) else { responses [ j ] = NUM00 / sum ; } } }
public int addClientExternal ( SSOToken token , Map props ) throws AMClientCapException { synchronized ( externalClientData ) { extCapInstance . addClient ( token , props ) ; String ct = getClientType ( props ) ; Map eMap = mergeWithParent ( props ) ; externalClientData . put ( ct , eMap ) ; addToIndexes ( ct , eMap ) ; } $F1082 }
public static void delete ( File resourceToDelete ) throws IOException { if $F3428 ( resourceToDelete ) { delete ( resourceToDelete . toPath ( ) ) ; } }
private void addExportRemoveVolumeSteps ( Workflow workflow , ProtectionSystem rpSystem , URI exportGroupID , $F28584 boIDs ) throws InternalException { ExportGroup exportGroup = _dbClient . queryObject ( ExportGroup . class , exportGroupID ) ; String exportStep = workflow . createStepId ( ) ; initTaskStatus ( exportGroup , exportStep , Operation . Status . pending , NUM00 ) ; $F42106 deviceToBlockObjects = new HashMap < URI , $F28584 > $F72 ; for ( URI snapshotID : boIDs ) { BlockSnapshot $F34887 ( snapshot , _dbClient , snapshotID ) ; List $F30635 objectsToRemove = getExportObjectsForBookmark ( snapshot ) ; for ( BlockObject blockObject : objectsToRemove ) { $F28584 blockObjects = deviceToBlockObjects . get ( blockObject . getStorageController ( ) ) ; if ( blockObjects == null ) { blockObjects = new ArrayList < URI > $F72 ; deviceToBlockObjects . put ( blockObject . getStorageController ( ) , blockObjects ) ; } $F42096 ( blockObjects , blockObject ) } } for ( Map . Entry < URI , $F28584 > deviceEntry : deviceToBlockObjects . entrySet ( ) ) { _log . info ( String . format ( NUM00 , exportGroup . getId ( ) , deviceEntry . getKey ( ) , deviceEntry . getValue ( ) ) ) ; _exportWfUtils . generateExportGroupRemoveVolumes ( workflow , STEP_EXPORT_REMOVE_SNAPSHOT , STEP_EXPORT_GROUP_DISABLE , deviceEntry . getKey ( ) , exportGroupID , deviceEntry . getValue ( ) ) ; } _log . info ( String . format ( $F181627 ( exportGroup ) ) ) ; }
public double inferenceByGibbsSampling ( Document d , $F1986 pzd , int numBurnIn , int numSampling ) { $F9952 ( Arrays , pzd ) double loglikelihood = NUM00 ; for ( $F41842 ( i , numBurnIn , numSampling ) ) { loglikelihood += gibbsSampling ( d ) ; if ( i >= numBurnIn ) { for ( int topic : d . topics ) { if ( topic != NO_TOPIC ) pzd [ topic ] ++ ; } } else { loglikelihood = NUM00 ; } } normalize ( pzd , alpha ) ; return loglikelihood / numSampling ; }
public static void remove ( String dbgToken ) $F106 ( dbgTable , dbgToken )
protected void checkSAXVersion ( Hashtable h ) { $F59851 ( h ) final String SAX_VERSION1_CLASS = NUM00 ; final String SAX_VERSION1_METHOD = NUM00 ; final String SAX_VERSION2_CLASS = NUM00 ; final String SAX_VERSION2_METHOD = NUM00 ; final String SAX_VERSION2BETA_CLASSNF = NUM00 ; final String SAX_VERSION2BETA_METHODNF = NUM00 ; final Class oneStringArg [ ] = { $F70518 } ; final Class attributesArg [ ] = { org . xml . sax . Attributes . class } ; try $F70532 ( clazz , ObjectFactory , SAX_VERSION2BETA_CLASSNF , _BOOL , method , SAX_VERSION2BETA_METHODNF , attributesArg , h , VERSION ) catch ( Exception e ) { $F70535 ( h , ERROR , VERSION , e ) h . put ( ERROR , ERROR_FOUND ) ; try $F70532 ( clazz , ObjectFactory , SAX_VERSION2_CLASS , _BOOL , method , SAX_VERSION2_METHOD , oneStringArg , h , VERSION ) catch ( Exception e2 ) { $F70535 ( h , ERROR , VERSION , e ) h . put ( ERROR , ERROR_FOUND ) ; try $F70532 ( clazz , ObjectFactory , SAX_VERSION1_CLASS , _BOOL , method , SAX_VERSION1_METHOD , oneStringArg , h , VERSION ) catch ( Exception e3 ) { $F70535 ( h , ERROR , VERSION , e3 ) } } } }
protected boolean isRecompilationNeeded $F23416 ( loadedChecksums ) { this . checksums [ NUM00 ] = calculateChecksum ( ) ; if ( this . checksums [ NUM00 ] != loadedChecksums [ NUM00 ] ) { if ( Trace . swcChecksum ) $F111759 ( Trace ) return _BOOL ; } if ( ! isSwcChecksumEnabled ) { if ( Trace . swcChecksum ) $F111759 ( Trace ) return _BOOL ; } Map < QName , Long > signatureChecksums = swcDefSignatureChecksums ; if ( signatureChecksums == null ) { if ( Trace . swcChecksum ) $F111759 ( Trace ) } else { for ( Map . Entry < QName , Long > entry : signatureChecksums . entrySet ( ) ) { QName qName = ( QName ) entry . getKey ( ) ; Long dataSignatureChecksum = ( Long ) entry . getValue ( ) ; Long swcSignatureChecksum = swcContext . getChecksum ( qName ) ; if ( swcSignatureChecksum == null && qName != null ) { Source source = swcContext . getSource ( qName . getNamespace ( ) , qName . getLocalPart ( ) ) ; if ( source != null ) { swcSignatureChecksum = new Long ( source . getLastModified ( ) ) ; } } if ( Trace . swcChecksum ) { $F77087 ( dataSignatureChecksum ) } if ( dataSignatureChecksum != null && swcSignatureChecksum == null ) { if ( Trace . swcChecksum ) { $F1932 ( Trace ) Trace . trace ( NUM00 + entry . getKey ( ) ) ; $F49408 ( Trace , dataSignatureChecksum ) $F49408 ( Trace , swcSignatureChecksum ) } return _BOOL ; } if ( dataSignatureChecksum != null ) { if ( dataSignatureChecksum . longValue ( ) != swcSignatureChecksum . longValue ( ) ) { if ( Trace . swcChecksum ) { $F1932 ( Trace ) Trace . trace ( NUM00 + entry . getKey ( ) ) ; $F49408 ( Trace , dataSignatureChecksum ) $F49408 ( Trace , swcSignatureChecksum ) } return _BOOL ; } } else { return _BOOL ; } } } boolean result = ! areSwcFileChecksumsEqual ( ) ; if ( Trace . swcChecksum ) { Trace . trace ( $F89332 ( result ) ) ; } return result ; }
private void adjustMinPrefForSpanningComps ( DimConstraint [ ] specs , Float [ ] defPush , FlowSizeSpec fss , ArrayList < LinkedDimGroup > [ ] groupsLists ) { for ( $F26259 ( r , groupsLists ) ) { ArrayList < LinkedDimGroup > groups = groupsLists [ r ] ; for ( LinkedDimGroup group : groups ) { if ( group . span == NUM00 ) $F1448 $F2027 sizes = group . getMinPrefMax ( ) ; for ( int s = LayoutUtil . MIN ; s <= LayoutUtil . PREF ; s ++ ) { int cSize = sizes [ s ] ; if ( cSize == LayoutUtil . NOT_SET ) $F1448 int rowSize = NUM00 ; int $F76469 ( sIx , r ) ; int len = Math . min ( ( group . span < < NUM00 ) , fss . sizes . length - sIx ) - NUM00 ; for ( $F5883 ( j , sIx , len ) ) { int sz = fss . sizes [ j ] [ s ] ; if ( sz != LayoutUtil . NOT_SET ) { rowSize += sz ; } } if ( rowSize < cSize && len > NUM00 ) { for ( int eagerness = NUM00 , newRowSize = NUM00 ; eagerness < NUM00 && newRowSize < cSize ; eagerness ++ ) { newRowSize = fss . expandSizes ( specs , defPush , cSize , sIx , len , s , eagerness ) ; } } } } } }
public static String dumpAsHex $F5474 ( byteBuffer , length ) { $F40726 ( outputBuilder , length ) int p = NUM00 ; int rows = length / NUM00 ; for ( int i = NUM00 ; ( i < rows ) && ( p < length ) ; i ++ ) { int ptemp = p ; for ( $F6268 ( j ) ) { String hexVal = Integer . toHexString ( byteBuffer [ ptemp ] & NUM00 ) ; $F21680 ( hexVal ) $F86403 ( outputBuilder , hexVal ) ptemp ++ ; } $F84 ( outputBuilder ) for ( $F6268 ( j ) ) { int b = NUM00 & byteBuffer [ p ] ; if $F79923 ( b ) { outputBuilder . append ( ( char ) b + NUM00 ) ; } else $F86 ( outputBuilder ) p ++ ; } $F84 ( outputBuilder ) } int n = NUM00 ; for ( int i = p ; i < length ; i ++ ) { String hexVal = Integer . toHexString ( byteBuffer [ i ] & NUM00 ) ; $F21680 ( hexVal ) $F86403 ( outputBuilder , hexVal ) n ++ ; } for ( int i = n ; i < NUM00 ; i ++ ) $F86 ( outputBuilder ) $F84 ( outputBuilder ) for ( int i = p ; i < length ; i ++ ) { int b = NUM00 & byteBuffer [ i ] ; if $F79923 ( b ) { outputBuilder . append ( ( char ) b + NUM00 ) ; } else $F86 ( outputBuilder ) } $F84 ( outputBuilder ) $F92 ( outputBuilder ) }
public void parseFile ( ChatEventParseListener listener ) { synchronized ( this ) { $F1431 long startTime = System . currentTimeMillis ( ) ; BufferedReader reader = null ; try { $F438 ( reader , pathToFile ) $F27015 ( currentLine , reader ) while ( currentLine != null ) { try { ChatEvent event = ChatEventUtils . deserializeChatEvent ( currentLine ) ; if ( ! listener . onNewEventParsed ( event ) ) $F5153 } catch ( Throwable t ) { LOG . warn ( NUM00 + currentLine + NUM00 , t ) ; } $F36243 ( currentLine , reader ) } listener . onParseCompleted ( ) ; } $F12153 ( ioe ) finally { if ( reader != null ) { try $F881 ( reader ) $F58785 } } } }
private CoderResult escapeSequenceOther ( short newByte ) { if $F56314 ( newByte ) { state = ESCAPE_SEQUENCE_OTHER ; versionSequenceAllowed = _BOOL ; queue . write ( newByte ) ; } else if $F56314 ( newByte ) { state = NORMAL_BYTES ; versionSequenceAllowed = _BOOL ; $F2268 ( queue ) } else $F4915 ( malformedInput , ERR_ESCBYTE ) return CoderResult . UNDERFLOW ; }
$F5466 public static NetworkParameters fromID ( String id ) { if $F1238 ( id , ID_MAINNET ) $F1522 ( MainNetParams ) else if $F1238 ( id , ID_TESTNET ) $F1522 ( TestNet3Params ) else if $F1238 ( id , ID_UNITTESTNET ) $F1522 ( UnitTestParams ) else if $F1238 ( id , ID_REGTEST ) $F1522 ( RegTestParams ) else if $F1238 ( id , ID_ALPHANET ) $F1522 ( AlphaNetParams ) else $F1337 }
public void addCertificatesAndCRLs ( CertStore certStore ) throws CertStoreException , CMSException { certs . addAll ( CMSUtils . getCertificatesFromStore ( certStore ) ) ; crls . addAll ( CMSUtils . getCRLsFromStore ( certStore ) ) ; }
protected abstract void storeBody ( DataOutputStream dos ) throws IOException ;
private double findAngle ( Point originPoint , Point targetPoint ) { int x1 = originPoint . x ; int y1 = originPoint . y ; int x2 = targetPoint . x ; int y2 = targetPoint . y ; double angle = NUM00 ; double offset = NUM00 ; double sideA = x2 - x1 ; double sideB = NUM00 ; if ( y1 >= y2 ) { sideB = y1 - y2 ; offset = Math . toRadians ( - NUM00 ) ; } else { sideB = - ( y2 - y1 ) ; offset = Math . toRadians ( NUM00 ) ; } $F6482 ( sideB , angle ) angle = Math . atan ( sideA / sideB ) ; return angle + offset ; }
public void appendWhitespace ( Appendable writer ) throws IOException $F288 ( writer , whiteSpace )
void clearResourceIndex ( String resourceTypeName ) { $F19850 ( resourceTypes ) $F70469 ( resourceTypes , resourceIndices ) $F10531 ( iter , resourceTypes ) while $F2921 ( iter ) { $F2778 ( resourceType , iter ) if $F8397 ( resourceType , resourceTypeName ) $F2676 ( resourceIndices , resourceType ) } }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
$F1 public $F96 bitcoinSerialize $F72 { if ( headerBytesValid && transactionBytesValid ) { $F1832 ( Preconditions , payload ) if ( length == payload . length ) { return payload ; } else { $F2175 ( buf , length ) $F21535 ( System , payload , offset , buf , length ) return buf ; } } ByteArrayOutputStream stream = new UnsafeByteArrayOutputStream ( length == UNKNOWN_LENGTH ? HEADER_SIZE + guessTransactionsLength ( ) : length ) ; try $F86383 ( writeHeader , stream , writeTransactions ) $F29052 $F11316 ( stream ) }
$F1 public $F37278 generateRollingPeriods ( DateTimeUnit dateTimeUnit ) { Calendar calendar = getCalendar ( ) ; $F37282 ( periods , Lists ) dateTimeUnit = calendar . minusDays ( dateTimeUnit , calendar . weekday ( dateTimeUnit ) - NUM00 ) ; dateTimeUnit = calendar . minusDays ( dateTimeUnit , NUM00 ) ; for ( $F6268 ( i ) ) { $F12366 ( periods , createPeriod , dateTimeUnit , calendar ) dateTimeUnit = calendar . plusWeeks ( dateTimeUnit , NUM00 ) ; } return periods ; }
$F1 public $F2689 vertexMatchPatternLabels $F72 $F29020 ( Collections )
public boolean resetUnreadCounts ( int aSection ) { boolean retCode = _BOOL ; ArrayList < RoomSummary > summariesList = mSummaryListByGroupPosition . get ( aSection ) ; if ( null != summariesList ) { for ( $F2277 ( summaryIdx , summariesList ) ) { retCode |= resetUnreadCount ( aSection , summaryIdx ) ; } } else { Log . w ( DBG_CLASS_NAME , NUM00 + aSection + NUM00 ) ; } return retCode ; }
public static void addCategory ( LexiconCategory category ) $F207 ( categories , category )
private static int CallNonvirtualObjectMethodV $F128351 ( env , objJREF , classJREF , methodID , argAddress ) throws Exception { $F4274 ( traceJNI , VM ) $F4275 ( RuntimeEntrypoints ) try { $F4276 ( obj , env , objJREF ) Object returnObj = JNIHelpers . invokeWithVarArg ( obj , methodID , argAddress , null , _BOOL ) ; $F79069 ( env , returnObj ) } $F4287 ( traceJNI , unexpected , System , env ) }
private $F46051 tryOtherMessages $F72 { List < $F46051 > messages = new ArrayList < $F46051 > $F72 ; Collection $F46060 msgCollection = getMessageCollection ( ) ; for ( Connection con : getConnections ( ) ) { DTNHost other = con . getOtherNode ( getHost ( ) ) ; ProphetV2Router othRouter = ( ProphetV2Router ) other . getRouter ( ) ; if ( othRouter . isTransferring ( ) ) $F1448 for ( Message m : msgCollection ) { if ( othRouter . hasMessage ( m . getId ( ) ) ) $F1448 if ( ( othRouter . getPredFor ( m . getTo ( ) ) >= getPredFor ( m . getTo ( ) ) ) ) { messages . add ( new $F46051 ( m , con ) ) ; } } } if $F10471 ( messages ) $F1337 Collections . sort ( messages , new TupleComparator $F72 ) ; return tryMessagesForConnected ( messages ) ; }
protected int makePressColor $F72 { $F69461 ( r , this ) $F69461 ( g , this ) $F69461 ( b , this ) $F69464 ( r ) $F69464 ( g ) $F69464 ( b ) $F69465 ( Color , r , g , b ) }
private void testStreamsFromValues $F72 { Stream $F4 movieNames = Stream . of ( $F7288 ) ; $F22620 ( movieNames ) $F64831 ( movieNames2 ) Stream $F4 mNames2 = Stream . of ( movieNames2 ) ; $F22620 ( mNames2 ) $F24645 ( moviesList ) $F18793 ( moviesList ) $F18793 ( moviesList ) Stream < $F3803 > fromList = Stream . of ( moviesList ) ; $F22620 ( fromList ) }
public static void cacheClientUserId ( ConsumerBean consumerBean , Long internalId , String clientId ) { cacheClientUserId ( consumerBean . getShort_name ( ) , internalId , clientId ) ; }
protected void processEntity ( IXMLReader reader , IXMLEntityResolver entityResolver ) throws Exception { if ( ! XMLUtil . checkLiteral ( reader , NUM00 ) ) { XMLUtil . skipTag ( reader ) ; $F665 } XMLUtil . skipWhitespace ( reader , null ) ; char ch = XMLUtil . readChar ( reader , NUM00 ) ; if ( ch == NUM00 ) { XMLUtil . skipWhitespace ( reader , null ) ; entityResolver = this . parameterEntityResolver ; } else { reader . unread ( ch ) ; } String key = XMLUtil . scanIdentifier ( reader ) ; XMLUtil . skipWhitespace ( reader , null ) ; ch = XMLUtil . readChar ( reader , NUM00 ) ; String systemID = null ; String publicID = null ; switch ( ch ) { $F1262 if ( ! XMLUtil . checkLiteral ( reader , NUM00 ) ) { XMLUtil . skipTag ( reader ) ; $F665 } XMLUtil . skipWhitespace ( reader , null ) ; publicID = XMLUtil . scanString ( reader , NUM00 , this . parameterEntityResolver ) ; XMLUtil . skipWhitespace ( reader , null ) ; systemID = XMLUtil . scanString ( reader , NUM00 , this . parameterEntityResolver ) ; XMLUtil . skipWhitespace ( reader , null ) ; XMLUtil . readChar ( reader , NUM00 ) ; $F597 $F1262 if ( ! XMLUtil . checkLiteral ( reader , NUM00 ) ) { XMLUtil . skipTag ( reader ) ; $F665 } XMLUtil . skipWhitespace ( reader , null ) ; systemID = XMLUtil . scanString ( reader , NUM00 , this . parameterEntityResolver ) ; XMLUtil . skipWhitespace ( reader , null ) ; XMLUtil . readChar ( reader , NUM00 ) ; $F597 $F1262 $F1262 reader . unread ( ch ) ; String value = XMLUtil . scanString ( reader , NUM00 , this . parameterEntityResolver ) ; entityResolver . addInternalEntity ( key , value ) ; XMLUtil . skipWhitespace ( reader , null ) ; XMLUtil . readChar ( reader , NUM00 ) ; $F597 $F1267 XMLUtil . skipTag ( reader ) ; } if ( systemID != null ) { entityResolver . addExternalEntity ( key , publicID , systemID ) ; } }
$F1 final $F75433 find ( int h , int k ) { for ( $F75433 e = first ; e != null ; ) { int s ; if ( ( ( s = lockState ) & ( WAITER | WRITER ) ) != NUM00 ) { if ( ( e . key == k ) ) { return e ; } e = e . next ; } else if ( U . compareAndSwapInt ( this , LOCKSTATE , s , s + READER ) ) { TreeNode $F2193 r ; TreeNode $F2193 p ; try { p = ( ( r = root ) == null ? null : r . findTreeNode ( h , k ) ) ; } finally { Thread w ; if ( getAndAddInt ( this , LOCKSTATE , - READER ) == ( READER | WAITER ) && ( w = waiter ) != null ) { LockSupport . unpark ( w ) ; } } return p ; } } $F1274 }
public boolean isPublic $F72 { return Modifier . isPublic ( flags ) ; }
$F1 public boolean receiveImage ( ImageToProcess img , TaskImageContainer task , boolean blockUntilImageRelease , boolean closeOnImageRelease , Optional $F24548 runnableWhenDone ) throws InterruptedException { Set < TaskImageContainer > passTasks = new HashSet < TaskImageContainer > $F989 ; passTasks . add ( task ) ; return receiveImage ( img , passTasks , blockUntilImageRelease , closeOnImageRelease , runnableWhenDone ) ; }
protected String doIt $F72 throws Exception { log . info ( $F3906 ( p_Selection , p_DateInvoiced , p_AD_Org_ID , p_C_BPartner_ID , p_M_InOut_ID ) + NUM00 + p_docAction + NUM00 + p_ConsolidateDocument ) ; String sql = null ; if ( p_Selection ) { sql = $F40 ; } else { sql = NUM00 + NUM00 ; if ( p_AD_Org_ID != NUM00 ) sql += NUM00 ; if ( p_C_BPartner_ID != NUM00 ) sql += NUM00 ; if ( p_M_InOut_ID != NUM00 ) sql += NUM00 ; sql += $F38 ; } PreparedStatement pstmt = null ; try { $F213538 ( pstmt , DB , sql , get_TrxName ) int index = NUM00 ; if ( p_Selection ) { pstmt . setInt ( index , getAD_PInstance_ID ( ) ) ; } else { if ( p_AD_Org_ID != NUM00 ) pstmt . setInt ( index ++ , p_AD_Org_ID ) ; if ( p_C_BPartner_ID != NUM00 ) pstmt . setInt ( index ++ , p_C_BPartner_ID ) ; if ( p_M_InOut_ID != NUM00 ) pstmt . setInt ( index ++ , p_M_InOut_ID ) ; } } $F230362 ( log , Level , sql , e ) return generate ( pstmt ) ; }
protected int match_bitap $F68141 ( text , pattern , loc ) { assert ( Match_MaxBits == NUM00 || pattern . length ( ) <= Match_MaxBits ) : NUM00 ; Map < Character , Integer > s = match_alphabet ( pattern ) ; double score_threshold = Match_Threshold ; $F204924 ( best_loc , text , pattern , loc ) if ( best_loc != - NUM00 ) { $F424296 ( score_threshold , Math , match_bitapScore , best_loc , loc , pattern ) best_loc = text . lastIndexOf ( pattern , loc + pattern . length ( ) ) ; if ( best_loc != - NUM00 ) { $F424296 ( score_threshold , Math , match_bitapScore , best_loc , loc , pattern ) } } int matchmask = NUM00 < < $F45793 ( pattern ) ; best_loc = - NUM00 ; int bin_min , bin_mid ; int bin_max = $F71221 ( pattern , text ) ; $F11844 ( last_rd ) for ( $F1088 ( d , pattern ) ) { bin_min = NUM00 ; bin_mid = bin_max ; while ( bin_min < bin_mid ) { if ( match_bitapScore ( d , loc + bin_mid , loc , pattern ) <= score_threshold ) { bin_min = bin_mid ; } else { bin_max = bin_mid ; } bin_mid = ( bin_max - bin_min ) / NUM00 + bin_min ; } bin_max = bin_mid ; int start = Math . max ( NUM00 , loc - bin_mid + NUM00 ) ; int finish = $F424314 ( Math , loc , bin_mid , text ) + pattern . length ( ) ; $F65716 ( rd , finish ) rd [ finish + NUM00 ] = $F76927 ( d ) ; for ( int j = finish ; j >= start ; j -- ) { int charMatch ; if ( text . length ( ) <= j - NUM00 || ! s . containsKey ( text . charAt ( j - NUM00 ) ) ) { charMatch = NUM00 ; } else { charMatch = s . get ( text . charAt ( j - NUM00 ) ) ; } if ( d == NUM00 ) { rd [ j ] = $F424333 ( rd , j , charMatch ) ; } else { rd [ j ] = ( $F424333 ( rd , j , charMatch ) ) | ( ( ( last_rd [ j + NUM00 ] | last_rd [ j ] ) < < NUM00 ) | NUM00 ) | last_rd [ j + NUM00 ] ; } if ( ( rd [ j ] & matchmask ) != NUM00 ) { double score = match_bitapScore ( d , j - NUM00 , loc , pattern ) ; if ( score <= score_threshold ) { score_threshold = score ; best_loc = j - NUM00 ; if ( best_loc > loc ) { start = Math . max ( NUM00 , NUM00 * loc - best_loc ) ; } else $F5153 } } } if ( match_bitapScore ( d + NUM00 , loc , loc , pattern ) > score_threshold ) $F5153 last_rd = rd ; } return best_loc ; }
public static S2CellId fromFaceIJ $F14337 ( face , i , j ) { long n [ ] = { NUM00 , face < < ( POS_BITS - NUM00 ) } ; int bits = ( face & SWAP_MASK ) ; for ( int k = NUM00 ; k >= NUM00 ; -- k ) { bits = getBits ( n , i , j , k , bits ) ; } S2CellId s = new S2CellId ( ( ( $F42449 ( n ) + n [ NUM00 ] ) < < NUM00 ) + NUM00 ) ; return s ; }
$F26560 ( requestMethod , responseCode , Request , HttpStatus )
private void updateActions ( final INaviProject project ) { m_loadProjectAction . setEnabled ( ! project . isLoaded ( ) ) ; if ( m_addAddressSpaceAction != null ) { m_addAddressSpaceAction . setEnabled ( project . isLoaded ( ) ) ; } m_searchViewAction . setEnabled ( project . isLoaded ( ) ) ; m_forwardAction . setEnabled ( project . isLoaded ( ) ) ; }
void close $F72 throws IOException $F881 ( stream )
public boolean truncateTooLongNumber ( PhoneNumber number ) { $F46660 ( isValidNumber , number , _BOOL ) PhoneNumber numberCopy = new PhoneNumber $F72 ; numberCopy . mergeFrom ( number ) ; long nationalNumber = number . getNationalNumber ( ) ; do { nationalNumber /= NUM00 ; numberCopy . setNationalNumber ( nationalNumber ) ; if ( isPossibleNumberWithReason ( numberCopy ) == ValidationResult . TOO_SHORT || nationalNumber == NUM00 ) { return _BOOL ; } } while ( ! isValidNumber ( numberCopy ) ) ; number . setNationalNumber ( nationalNumber ) ; return _BOOL ; }
public static boolean isWithinTimeComparisonEpsilon ( long timeMicros ) { long now = Utils . getSystemNowMicrosUtc ( ) ; return Math . abs ( timeMicros - now ) < timeComparisonEpsilon ; }
public Optional < Histogram > histogram $F72 $F21170 ( Optional )
private JLabel createWeekday ( String title ) { $F78356 ( label , title ) label . setHorizontalAlignment ( SwingConstants . CENTER ) ; label . setHorizontalTextPosition ( SwingConstants . CENTER ) ; label . setRequestFocusEnabled ( _BOOL ) ; label . setBackground ( AdempierePLAF . getPrimary1 ( ) ) ; label . setForeground ( Color . white ) ; label . setOpaque ( _BOOL ) ; return label ; }
default Path append ( String relPath ) { return append ( Path . parse ( relPath ) ) ; }
public static int indexOf ( String value , String substring ) { return value != null && substring != null ? value . indexOf ( substring ) : - NUM00 ; }
public void testSubmitNullCallable $F72 { $F25236 ( e ) PoolCleaner cleaner = null ; try { cleaner = cleaner ( e ) ; try { $F1431 $F171452 future = e . submit ( ( Callable $F4 ) null ) ; shouldThrow ( ) ; } $F83403 } $F14364 ( cleaner ) }
public int readSI32 $F72 throws IOException { synchBits ( ) ; $F7468 ( b0 , in ) $F28956 ( b0 ) $F7468 ( b1 , in ) $F28956 ( b1 ) $F7468 ( b2 , in ) $F28956 ( b2 ) $F12496 ( aByte ) $F83249 ( count , in , aByte ) $F28956 ( count ) bytesRead += NUM00 ; return ( int ) ( ( aByte [ NUM00 ] * NUM00 * NUM00 * NUM00 ) + ( b2 * NUM00 * NUM00 ) + ( b1 * NUM00 ) + b0 ) ; }
public boolean isLocked $F72 $F3387 ( queue )
public void addPreprocessorDirective ( String directive ) { $F185359 ( mPreprocessorDirectives ) mPreprocessorDirectives . add ( directive ) ; }
public void format ( long inDate , StringBuilder buffer ) $F9821 ( buffer , format , inDate )
public Profiler clearResults $F72 $F68437 ( lapped , this )
$F1 public GraphQuery has ( final String key , final Object value ) { criteria . add ( new Has ( key , value ) ) ; return this ; }
public void addAttributeValue ( Principal principal , Guid guid , String name , String value ) throws UMSException { modifyAttributeValue ( ModificationType . ADD , principal , guid , name , value ) ; }
public static void copyStream ( InputStream inputStream , OutputStream outputStream ) { if ( inputStream != null && outputStream != null ) { try { int length = - NUM00 ; $F96 buffer = new byte [ Constant . Capacity . BYTES_PER_MB ] ; while ( ( length = $F11578 ( inputStream , buffer ) ) != - NUM00 ) { $F11584 ( outputStream , buffer , length ) $F1206 ( outputStream ) } } catch ( Exception e ) { throw new FileUtilException ( e ) ; } } }
private void printTypeMembers ( $F15367 members , List < TypeElement > innerClass ) { for ( Element element : members ) { if ( isPublicOrProtected ( element ) ) { printMember ( element , innerClass ) ; } } }
private void initializeBasicVariables ( final int startColumn ) { basicVariables = new int [ getWidth ( ) - NUM00 ] ; basicRows = new int [ getHeight ( ) ] ; $F99493 ( Arrays , basicVariables ) for ( int i = startColumn ; i < getWidth ( ) - NUM00 ; i ++ ) { Integer row = findBasicRow ( i ) ; if ( row != null ) { basicVariables [ i ] = row ; basicRows [ row ] = i ; } } }
public void mouseReleased ( MouseEvent e ) $F845
long freeSpaceWindows ( String path , long timeout ) throws IOException { path = FilenameUtils . normalize ( path , _BOOL ) ; if ( $F20 ( path ) && $F4434 ( path ) ) $F253145 ( path ) $F806 cmdAttribs = new String [ ] { NUM00 , NUM00 , NUM00 + path } ; $F3803 lines = performCommand ( cmdAttribs , Integer . MAX_VALUE , timeout ) ; for ( $F5373 ( i , lines ) ) { $F1729 ( line , lines , i ) if $F4012 ( line ) $F8587 ( parseDir , line , path ) } throw new IOException $F54019 ( path ) ; }
private void attachHeader ( SIPHeader h ) { $F19273 ( h ) try { if ( h instanceof SIPHeaderList ) { SIPHeaderList $F1011 hl = ( SIPHeaderList $F1011 ) h ; $F19233 ( hl ) } attachHeader ( h , _BOOL , _BOOL ) ; } catch ( SIPDuplicateHeaderException ex ) $F845 }
public String phonemise ( String text , String pos , StringBuilder g2pMethod ) { String result = userdictLookup ( text , pos ) ; if ( result != null ) $F117250 ( g2pMethod , result ) result = lexiconLookup ( text , pos ) ; if ( result != null ) $F117250 ( g2pMethod , result ) String normalised = MaryUtils . normaliseUnicodeLetters ( text , getLocale ( ) ) ; if $F2137 ( normalised , text ) { result = userdictLookup ( normalised , pos ) ; if ( result != null ) $F117250 ( g2pMethod , result ) result = lexiconLookup ( normalised , pos ) ; if ( result != null ) $F117250 ( g2pMethod , result ) } String phones = lts . predictPronunciation ( text ) ; result = lts . syllabify ( phones ) ; if ( result != null ) $F117250 ( g2pMethod , result ) $F1274 }
public static void stop ( int exit_code ) $F211576 ( System , exit_code )
private FieldODEStateAndDerivative < Decimal64 > state ( double t ) { return new FieldODEStateAndDerivative $F200 ( zero . add ( t ) , new Decimal64 $F380 , new Decimal64 $F380 ) ; }
public static int hash ( Object object ) { return $F1587 ( object ) ; }
public void putAll $F15182 ( m ) { for ( $F15184 ( e , m ) ) $F151386 ( put , e ) }
private void assertPivot ( String field , Object value , int count , PivotField actual ) { assertEquals ( $F368 ( actual ) , field , actual . getField ( ) ) ; assertEquals ( $F368 ( actual ) , value , actual . getValue ( ) ) ; assertEquals ( $F368 ( actual ) , count , actual . getCount ( ) ) ; }
$F286835 ( toXMLString , _BOOL )
public static final void writeStringArrayXml ( $F806 val , String name , XmlSerializer out ) throws $F52182 { $F18827 ( val , out ) $F18823 ( out ) $F18831 ( name , out ) $F18832 ( n , val ) $F18835 ( out , Integer , n ) for ( $F119 ( i , n ) ) { if ( val [ i ] == null ) { $F18823 ( out ) $F18825 ( out ) } else { $F18823 ( out ) out . attribute ( null , NUM00 , val [ i ] ) ; $F18825 ( out ) } } $F18825 ( out ) }
public static void walkFileTree ( File directory , FileTreeVisitor visitor ) { visitor . preVisitDirectory ( directory ) ; $F5459 ( files , directory ) if ( files != null ) { for ( File file : files ) { if $F3444 ( file ) { walkFileTree ( file , visitor ) ; } else { visitor . visitFile ( file ) ; } } } visitor . postVisitDirectory ( directory ) ; }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
private Spannable highlightHashtags ( Spannable text ) { $F1338 ( text ) $F37142 ( matcher , PATTERN_HASHTAGS , text ) while $F281 ( matcher ) { final int start = matcher . start ( NUM00 ) ; final int end = matcher . end ( NUM00 ) ; text . setSpan ( new ForegroundColorSpan ( mHighlightColor ) , start , end , Spanned . SPAN_EXCLUSIVE_EXCLUSIVE ) ; text . setSpan ( new StyleSpan ( android . graphics . Typeface . BOLD ) , start , end , Spanned . SPAN_EXCLUSIVE_EXCLUSIVE ) ; } return text ; }
protected int readBlock $F72 { blockSize = read ( ) ; int n = NUM00 ; if ( blockSize > NUM00 ) { try { int count ; while ( n < blockSize ) { count = blockSize - n ; rawData . get ( block , n , count ) ; n += count ; } } catch ( final Exception e ) { Log . w ( TAG , NUM00 , e ) ; status = STATUS_FORMAT_ERROR ; } } return n ; }
public int processBlock $F59451 ( in , inOff , out , outOff ) throws $F5278 { $F59453 ( inOff , blockSize , in ) $F59453 ( outOff , blockSize , out ) $F59455 ( cipher , ofbV , ofbOutV ) $F59461 ( i , blockSize , out , outOff , ofbOutV , in , inOff ) $F59464 ( System , ofbV , blockSize ) System . arraycopy ( ofbOutV , NUM00 , ofbV , ofbV . length - blockSize , blockSize ) ; return blockSize ; }
public String commandTopic ( String command ) { $F23170 ( command ) return cmdTopic . replace ( NUM00 , command ) ; }
private static void checkForNullElement ( $F131 arg , String argName ) { if ( ( arg == null ) || $F9634 ( arg ) ) $F29526 ( argName ) for ( $F1139 ( i , arg ) ) { if ( arg [ i ] == null ) $F60154 ( argName , i ) } }
public InputStream executeDownload ( String url , String cookie ) throws IOException { $F20724 headerParams = new String [ ] [ ] { { NUM00 , cookie } , $F4582 } ; HttpEntity httpEntity = executeGet ( url , null , headerParams ) ; return httpEntity . getContent ( ) ; }
public final void testSetSeedbyteArray02 $F72 throws NoSuchFieldException , SecurityException , IllegalAccessException { $F2175 ( seed , LENGTH ) $F2175 ( bytes1 , LENGTH ) $F2175 ( bytes2 , LENGTH ) boolean b ; for ( $F1139 ( i , seed ) ) { $F78924 ( seed , i ) } sr . setSeed ( seed ) ; sr . setSeed ( seed ) ; sr2 . setSeed ( seed ) ; sr . nextBytes ( bytes1 ) ; sr2 . nextBytes ( bytes2 ) ; b = _BOOL ; for ( $F1139 ( j , bytes1 ) ) { b &= bytes1 [ j ] == bytes2 [ j ] ; } assertFalse ( NUM00 , b ) ; }
public Image flipImageVertically ( Image image , boolean maintainOpacity ) { $F2027 rgb = image . getRGB ( ) ; $F22974 ( newRGB , rgb ) $F2049 ( width , image ) $F2047 ( height , image ) for ( $F119 ( y , height ) ) { for ( $F119 ( x , width ) ) { newRGB [ x + ( height - y - NUM00 ) * width ] = rgb [ x + y * width ] ; } } return EncodedImage . createFromRGB ( newRGB , width , height , ! maintainOpacity ) ; }
public MorfologikFilterFactory $F3501 ( args ) { super ( args ) ; final String DICTIONARY_RESOURCE_ATTRIBUTE = NUM00 ; String dictionaryResource = get ( args , DICTIONARY_RESOURCE_ATTRIBUTE ) ; if $F1032 ( dictionaryResource ) { throw new IllegalArgumentException ( NUM00 + DICTIONARY_RESOURCE_ATTRIBUTE + NUM00 + NUM00 + DICTIONARY_ATTRIBUTE + NUM00 ) ; } resourceName = get ( args , DICTIONARY_ATTRIBUTE ) ; if $F5973 ( args ) $F18931 ( args ) }
public static $F4203 T wrapThrow ( $F41333 callable , Code _finally ) { try $F41336 ( callable ) $F41337 ( e ) $F12237 ( e ) $F18632 ( wrapThrow , _finally ) }
public static String padLeft ( String str , int totalChars ) { $F12553 ( str ) $F280 ( sb ) for ( int i = NUM00 ; i < totalChars - str . length ( ) ; i ++ ) $F86 ( sb ) sb . append ( str ) ; $F92 ( sb ) }
protected void decodeImageData $F72 { int NullCode = - NUM00 ; int npix = iw * ih ; int available , clear , code_mask , code_size , end_of_information , in_code , old_code , bits , code , count , i , datum , data_size , first , top , bi , pi ; if ( ( pixels == null ) || ( pixels . length < npix ) ) $F75474 ( pixels , npix ) if ( prefix == null ) $F69027 ( prefix , MaxStackSize ) if ( suffix == null ) $F1325 ( suffix , MaxStackSize ) if ( pixelStack == null ) $F83281 ( pixelStack , MaxStackSize ) ; data_size = read ( ) ; clear = NUM00 < < data_size ; end_of_information = clear + NUM00 ; available = clear + NUM00 ; old_code = NullCode ; code_size = data_size + NUM00 ; $F143890 ( code_mask , code_size ) ; for ( code = NUM00 ; code < clear ; code ++ ) { prefix [ code ] = NUM00 ; $F78924 ( suffix , code ) } datum = bits = count = first = top = pi = bi = NUM00 ; for ( i = NUM00 ; i < npix ; ) { if ( top == NUM00 ) { if ( bits < code_size ) { if ( count == NUM00 ) { count = readBlock ( ) ; $F137919 ( count ) bi = NUM00 ; } datum += ( ( ( int ) block [ bi ] ) & NUM00 ) < < bits ; bits += NUM00 ; bi ++ ; count -- ; $F598 } code = datum & code_mask ; datum >>= code_size ; bits -= code_size ; if ( ( code > available ) || ( code == end_of_information ) ) $F597 if ( code == clear ) { code_size = data_size + NUM00 ; $F143890 ( code_mask , code_size ) ; available = clear + NUM00 ; old_code = NullCode ; $F598 } if ( old_code == NullCode ) { pixelStack [ top ++ ] = suffix [ code ] ; old_code = code ; first = code ; $F598 } in_code = code ; if ( code == available ) { $F11740 ( pixelStack , top , first ) code = old_code ; } while ( code > clear ) { pixelStack [ top ++ ] = suffix [ code ] ; code = prefix [ code ] ; } first = ( ( int ) suffix [ code ] ) & NUM00 ; $F612 ( available , MaxStackSize ) $F11740 ( pixelStack , top , first ) prefix [ available ] = ( short ) old_code ; $F8214 ( suffix , available , first ) available ++ ; if ( $F84469 ( available , code_mask ) && ( available < MaxStackSize ) ) { code_size ++ ; code_mask += available ; } old_code = in_code ; } top -- ; pixels [ pi ++ ] = pixelStack [ top ] ; i ++ ; } for ( i = pi ; i < npix ; i ++ ) $F5629 ( pixels , i ) }
public int hashCode $F72 { int myhash = NUM00 + policyIdentifier . hashCode ( ) ; $F26525 ( myhash , policyQualifiers ) return myhash ; }
public UnixTerminal $F72 throws IOException { this ( System . in , System . out , Charset . defaultCharset ( ) ) ; }
public static void v $F3867 ( tag , s , args ) { if ( LOG . VERBOSE >= LOGLEVEL ) Log . v ( tag , String . format ( s , args ) ) ; }
$F1 public boolean isCellEditable ( int rowIndex , int columnIndex ) { ProcessFunctionParameterValue value = valueList . get ( rowIndex ) ; switch ( columnIndex ) { case COL_OPTIONAL : return value . optional ; case COL_VALUE : if ( value . optional ) { return value . included ; } else { return _BOOL ; } case COL_PARAMETER : case COL_TYPE : $F1267 return _BOOL ; } }
private void checkStreams $F72 { if ( $F32708 ( System , lastChecked ) < CHECK_DELAY ) $F932 $F3224 ( lastChecked , System ) Set < StreamInfo > $F9626 ( remove ) ; for ( StreamInfo info : data ) { if ( ! info . isValid ( ) || ! info . getOnline ( ) ) $F207 ( remove , info ) } for ( StreamInfo info : remove ) { data . remove ( info ) ; itemRemoved ( info ) ; } if $F2979 ( remove ) $F5795 ( listDataChanged ) }
$F129060 ( views , direction , focusableMode , focusableCount , descendantFocusability , getDescendantFocusability , FOCUS_BLOCK_DESCENDANTS , i , getChildCount , child , getChildAt , VISIBLE , ii , infoForChild , mCurItem , FOCUS_AFTER_DESCENDANTS , isFocusable , FOCUSABLES_TOUCH_MODE , isInTouchMode , isFocusableInTouchMode , this )
public void addPriorityPackage ( String pkg ) { if ( _priorityPackages == null ) $F384 ( _priorityPackages ) int oldLength = _priorityPackages . length ; $F806 newPkgs = $F113629 ( oldLength ) ; $F135 ( System , _priorityPackages , newPkgs , oldLength ) if $F2364 ( pkg ) pkg = pkg + NUM00 ; newPkgs [ oldLength ] = pkg ; _priorityPackages = newPkgs ; }
$F1 public void actionPerformed ( ActionEvent ev ) { final megan . remote . RemoteServiceBrowser remoteServiceBrowser = ( megan . remote . RemoteServiceBrowser ) getViewer ( ) ; if ( remoteServiceBrowser != null ) { String url = remoteServiceBrowser . getURL ( ) ; String user = remoteServiceBrowser . getUser ( ) ; String password = remoteServiceBrowser . getPasswd ( ) ; String command = NUM00 + url + NUM00 ; if $F4012 ( user ) command += NUM00 + user + NUM00 ; if $F4012 ( password ) { synchronized ( syncObject ) { OpenRemoteServerCommand . hiddenPassword = password ; } command += NUM00 + HIDDEN_PASSWORD + NUM00 ; } command += NUM00 ; if $F4012 ( url ) { execute ( command ) ; } } }
public static String verifyCertificate ( X509Certificate cert , Collection < CRL > crls , Calendar calendar ) { if ( SignUtils . hasUnsupportedCriticalExtension ( cert ) ) $F1278 try { cert . checkValidity ( calendar . getTime ( ) ) ; } catch ( Exception e ) { return e . getMessage ( ) ; } if ( crls != null ) { for ( CRL crl : crls ) { if ( crl . isRevoked ( cert ) ) $F1278 } } $F1274 }
public static void expand $F72 { $F12914 ( st , L ) int i ; for ( i = NUM00 ; i < R ; i ++ ) st [ i ] = NUM00 + ( char ) i ; st [ i ++ ] = NUM00 ; int codeword = BinaryStdIn . readInt ( W ) ; $F16699 ( codeword , R ) String val = st [ codeword ] ; while ( _BOOL ) { BinaryStdOut . write ( val ) ; codeword = BinaryStdIn . readInt ( W ) ; $F67767 ( codeword , R ) String s = st [ codeword ] ; if ( i == codeword ) s = val + val . charAt ( NUM00 ) ; if ( i < L ) st [ i ++ ] = val + s . charAt ( NUM00 ) ; val = s ; } $F59 ( BinaryStdOut ) }
AudioCapabilities $F11072 ( supportedEncodings , maxChannelCount ) { if ( supportedEncodings != null ) { $F17879 ( this , Arrays , supportedEncodings ) Arrays . sort ( this . supportedEncodings ) ; } else { this . supportedEncodings = $F4468 ; } this . maxChannelCount = maxChannelCount ; }
$F1 public boolean isRotateEdgeLabels $F72 { return graphCreator . isRotatingEdgeLabels ( ) ; }
public static ResponseCode createExtension ( String name ) { StringBuffer $F1289 ( buffer , name ) ; if $F14943 ( name ) $F86 ( buffer ) buffer . append ( name ) ; return new ResponseCode $F3362 ( buffer ) ; }
$F1 public $F1986 makeInverseCumulativeTestValues $F72 { $F33257 ( points , makeCumulativeTestPoints ) $F284341 ( points2 , points ) $F5634 ( System , points , points2 ) return points2 ; }
public $F14638 append ( boolean b ) { if ( b ) $F148106 ( append ) return append ( NUM00 ) ; }
public void deleteServers ( Set servers ) throws AMConsoleException { if ( servers . contains ( SystemProperties . getServerInstanceName ( ) ) ) { throw new AMConsoleException ( getLocalizedString ( NUM00 ) ) ; } String serverName = null ; try { if $F2772 ( servers ) { SSOToken token = getUserSSOToken ( ) ; for ( $F2774 ( i , servers ) ) { $F103384 ( serverName , i ) $F78467 ( param , serverName ) logEvent ( NUM00 , param ) ; ServerConfiguration . deleteServerInstance ( token , serverName ) ; logEvent ( NUM00 , param ) ; } } } catch ( SMSException e ) $F566144 ( params , serverName , e , logEvent , getErrorString ) catch ( SSOException e ) $F566144 ( params , serverName , e , logEvent , getErrorString ) }
protected void arraycopy $F24576 ( buf , pos , length ) { mMessage . write ( buf , pos , length ) ; mPosition = mPosition + length ; }
static void sort ( $F5415 a , int left , int right , $F5415 work , int workBase , int workLen ) { while ( left <= right && Float . isNaN ( a [ right ] ) ) { -- right ; } for ( int k = right ; -- k >= left ; ) { float ak = a [ k ] ; if ( ak != ak ) { a [ k ] = a [ right ] ; a [ right ] = ak ; -- right ; } } doSort ( a , left , right , work , workBase , workLen ) ; int hi = right ; while ( left < hi ) { $F41176 ( middle , left , hi ) float middleValue = a [ middle ] ; if ( middleValue < NUM00 ) { left = middle + NUM00 ; } else { hi = middle ; } } while ( left <= right && Float . floatToRawIntBits ( a [ left ] ) < NUM00 ) { ++ left ; } for ( int k = left , p = left - NUM00 ; ++ k <= right ; ) { float ak = a [ k ] ; if ( ak != NUM00 ) $F5153 if ( Float . floatToRawIntBits ( ak ) < NUM00 ) { a [ k ] = NUM00 ; a [ ++ p ] = - NUM00 ; } } }
public void fatalError $F146212 ( e ) throws $F2253 { $F105671 ( formattedMsg , e ) SAXSourceLocator locator = getLocator ( ) ; $F1875 ( handler , m_stylesheetProcessor ) try { handler . fatalError ( new TransformerException ( formattedMsg , locator ) ) ; } $F2262 ( te ) }
public boolean add ( terminal sym ) throws internal_error { boolean result ; not_null ( sym ) ; result = _elements . get ( sym . index ( ) ) ; if ( ! result ) _elements . set ( sym . index ( ) ) ; return result ; }
private void createRecursivly ( String path ) throws $F80658 { try { if ( zk . exists ( path , _BOOL ) == null && $F20 ( path ) ) { String temp = path . substring ( NUM00 , $F23703 ( path , File ) ) ; createRecursivly ( temp ) ; zk . create ( path , null , Ids . OPEN_ACL_UNSAFE , CreateMode . PERSISTENT ) ; } else $F932 } catch ( KeeperException e ) { throw e ; } catch ( InterruptedException e ) { throw e ; } }
public void stopRecording $F72 { mHandler . sendMessage ( mHandler . obtainMessage ( MSG_STOP_RECORDING ) ) ; mHandler . sendMessage ( mHandler . obtainMessage ( MSG_QUIT ) ) ; }
private void writeTag ( String name , Tag tag ) throws IOException { TagType type = tag . getType ( ) ; $F96 nameBytes = $F43004 ( name , StandardCharsets ) ; if ( type == TagType . END ) $F14525 os . writeByte ( type . getId ( ) ) ; os . writeShort ( nameBytes . length ) ; os . write ( nameBytes ) ; writeTagPayload ( tag ) ; }
public int hashCode $F72 { if ( myhash == - NUM00 ) { if ( timestamp == null ) { $F80728 ( myhash , signerCertPath ) } else { myhash = signerCertPath . hashCode ( ) + timestamp . hashCode ( ) ; } } return myhash ; }
public TypeVariableBV typeVariable $F72 { $F2199 ( id , typeVariableList ) $F722 ( typeVariableList ) TypeVariableBV result = new TypeVariableBV ( id , this ) ; typeVariableList . set ( id , result ) ; return result ; }
public int process ( $F12090 callbacks , int state ) throws AuthLoginException { initAuthConfig ( ) ; $F5958 allCerts = null ; try { HttpServletRequest servletRequest = getHttpServletRequest ( ) ; if ( servletRequest != null ) { allCerts = ( $F5958 ) servletRequest . getAttribute ( NUM00 ) ; if $F12414 ( allCerts ) { $F18126 ( debug ) if ( ! portal_gw_cert_auth_enabled ) { $F137865 ( debug ) $F12117 ( amAuthCert ) } thecert = getPortalStyleCert ( servletRequest ) ; allCerts = new X509Certificate [ ] { thecert } ; } else { if ( portal_gw_cert_auth_enabled && portal_gw_cert_preferred ) { thecert = getPortalStyleCert ( servletRequest ) ; allCerts = new X509Certificate [ ] { thecert } ; } else { if $F6299 ( debug ) { debug . message ( NUM00 + NUM00 , allCerts . length ) ; } thecert = allCerts [ NUM00 ] ; } } } else $F20182 ( thecert , sendCallback ) if ( thecert == null ) { $F18126 ( debug ) $F12117 ( amAuthCert ) } getTokenFromCert ( thecert ) ; storeUsernamePasswd ( userTokenId , null ) ; if $F6299 ( debug ) $F235771 ( debug , userTokenId ) } catch ( AuthLoginException e ) { setFailureID ( userTokenId ) ; $F5197 ( debug , e ) $F12117 ( amAuthCert ) } if $F6299 ( debug ) { $F18129 ( debug , thecert ) } if ( amAuthCert_chkCertInLDAP . equalsIgnoreCase ( NUM00 ) && amAuthCert_chkCRL . equalsIgnoreCase ( NUM00 ) && ! ocspEnabled ) { return ISAuthConstants . LOGIN_SUCCEED ; } $F113304 ( ldapParam , setLdapStoreParam ) if $F21935 ( amAuthCert_chkCertInLDAP ) { X509Certificate ldapcert = AMCertStore . getRegisteredCertificate ( ldapParam , thecert , amAuthCert_chkAttrCertInLDAP ) ; if ( ldapcert == null ) { $F9464 ( debug ) setFailureID ( userTokenId ) ; $F12117 ( amAuthCert ) } } int ret = doJCERevocationValidation ( allCerts ) ; if ( ret != ISAuthConstants . LOGIN_SUCCEED ) { $F9464 ( debug ) setFailureID ( userTokenId ) ; $F12117 ( amAuthCert ) } return ISAuthConstants . LOGIN_SUCCEED ; }
public static void downto ( Number self , Number to , $F50462 ( closure ) ) { $F79839 ( self1 , self ) $F79839 ( to1 , to ) if ( self1 >= to1 ) { for ( int i = self1 ; i >= to1 ; i -- ) $F50467 ( closure , i ) } else $F50472 ( to , self ) }
public void add ( SelectClauseElementRaw element ) $F207 ( selectClauseElements , element )
public synchronized void removePvChangeListener ( PvChangeListener l ) { log . debug ( $F55902 ( String , this ) + String . valueOf ( l ) ) ; PvChangeListeners . remove ( l ) ; }
public static boolean isNormal ( GeoTimeSerie gts , int buckets , double pcterror , boolean bessel ) { if ( NUM00 == gts . values ) { return _BOOL ; } if ( TYPE . DOUBLE != gts . type && TYPE . LONG != gts . type ) { return _BOOL ; } $F1986 musigma = musigma ( gts , bessel ) ; double mu = musigma [ NUM00 ] ; double sigma = musigma [ NUM00 ] ; if ( NUM00 == sigma ) { return _BOOL ; } $F1986 bounds = SAXUtils . getBounds ( buckets ) ; $F32792 ( counts , bounds ) for ( $F168888 ( i , gts ) ) { double v = ( ( double ) GTSHelper . valueAtIndex ( gts , i ) - mu ) / sigma ; $F8533 ( insertion , Arrays , bounds , v ) if ( insertion >= NUM00 ) { counts [ insertion ] ++ ; } else { counts [ - ( NUM00 + insertion ) ] ++ ; } } double mean = gts . values / counts . length ; for ( $F1139 ( i , counts ) ) { if ( Math . abs ( NUM00 - ( counts [ i ] / mean ) ) > pcterror ) { return _BOOL ; } } return _BOOL ; }
public void loadFromProperties ( Properties properties ) { projected = StringUtil . getBooleanValue ( properties , NUM00 , _BOOL , _BOOL ) ; tiePoint = StringUtil . getDoubleArray ( properties , NUM00 , null , _BOOL ) ; scale = StringUtil . getDoubleArray ( properties , NUM00 , null , _BOOL ) ; globe = StringUtil . getStringValue ( properties , NUM00 , null , _BOOL ) ; rasterWidth = StringUtil . getIntegerValue ( properties , NUM00 , _BOOL , NUM00 , _BOOL ) ; rasterLength = StringUtil . getIntegerValue ( properties , NUM00 , _BOOL , NUM00 , _BOOL ) ; datumCode = StringUtil . getIntegerValue ( properties , NUM00 , _BOOL , NUM00 , _BOOL ) ; ellipsoidCode = StringUtil . getIntegerValue ( properties , NUM00 , _BOOL , NUM00 , _BOOL ) ; semiMajorAxis = StringUtil . getDoubleValue ( properties , NUM00 , _BOOL , Double . NaN , _BOOL ) ; semiMinorAxis = StringUtil . getDoubleValue ( properties , NUM00 , _BOOL , Double . NaN , _BOOL ) ; inverseFlattening = StringUtil . getDoubleValue ( properties , NUM00 , _BOOL , Double . NaN , _BOOL ) ; gcsPrimeMeridianLon = StringUtil . getDoubleValue ( properties , NUM00 , _BOOL , Double . NaN , _BOOL ) ; projCode = StringUtil . getIntegerValue ( properties , NUM00 , _BOOL , NUM00 , _BOOL ) ; pcsCode = StringUtil . getIntegerValue ( properties , NUM00 , _BOOL , NUM00 , _BOOL ) ; coordTransformCode = StringUtil . getIntegerValue ( properties , NUM00 , _BOOL , NUM00 , _BOOL ) ; stdParallel1 = StringUtil . getDoubleValue ( properties , NUM00 , _BOOL , Double . NaN , _BOOL ) ; poleLat = ( int ) ( Math . signum ( stdParallel1 ) * NUM00 ) ; stdParallel2 = StringUtil . getDoubleValue ( properties , NUM00 , _BOOL , Double . NaN , _BOOL ) ; naturalOriginLon = StringUtil . getDoubleValue ( properties , NUM00 , _BOOL , Double . NaN , _BOOL ) ; naturalOriginLat = StringUtil . getDoubleValue ( properties , NUM00 , _BOOL , Double . NaN , _BOOL ) ; falseOriginLon = StringUtil . getDoubleValue ( properties , NUM00 , _BOOL , Double . NaN , _BOOL ) ; falseOriginLat = StringUtil . getDoubleValue ( properties , NUM00 , _BOOL , Double . NaN , _BOOL ) ; falseEasting = StringUtil . getDoubleValue ( properties , NUM00 , _BOOL , Double . NaN , _BOOL ) ; falseNorthing = StringUtil . getDoubleValue ( properties , NUM00 , _BOOL , Double . NaN , _BOOL ) ; centerEasting = StringUtil . getDoubleValue ( properties , NUM00 , _BOOL , Double . NaN , _BOOL ) ; centerNorthing = StringUtil . getDoubleValue ( properties , NUM00 , _BOOL , Double . NaN , _BOOL ) ; centerLon = StringUtil . getDoubleValue ( properties , NUM00 , _BOOL , Double . NaN , _BOOL ) ; centerLat = StringUtil . getDoubleValue ( properties , NUM00 , _BOOL , Double . NaN , _BOOL ) ; scaleAtNaturalOrigin = StringUtil . getDoubleValue ( properties , NUM00 , _BOOL , Double . NaN , _BOOL ) ; scaleAtCenter = StringUtil . getDoubleValue ( properties , NUM00 , _BOOL , Double . NaN , _BOOL ) ; azimuth = StringUtil . getDoubleValue ( properties , NUM00 , _BOOL , Double . NaN , _BOOL ) ; straightVertPoleLon = StringUtil . getDoubleValue ( properties , NUM00 , _BOOL , Double . NaN , _BOOL ) ; gcsCitation = StringUtil . getStringValue ( properties , NUM00 , null , _BOOL ) ; pcsCitation = StringUtil . getStringValue ( properties , NUM00 , null , _BOOL ) ; projLinearUnits = StringUtil . getStringValue ( properties , NUM00 , NUM00 , _BOOL ) ; if ( coordTransformCode == GeoKey . Code_Undefined ) { String citation = ( pcsCitation == null ? NUM00 : pcsCitation . toLowerCase ( ) ) ; if ( citation . contains ( NUM00 ) && $F100843 ( citation ) ) { coordTransformCode = GeoKey . Code_CT_Mercator ; if $F35707 ( Double , naturalOriginLon ) naturalOriginLon = NUM00 ; if $F35707 ( Double , falseEasting ) falseEasting = NUM00 ; if $F35707 ( Double , falseNorthing ) falseNorthing = NUM00 ; if ( $F63172 ( citation ) ) { if $F2292 ( Double , semiMajorAxis ) semiMinorAxis = semiMajorAxis ; else { semiMajorAxis = SEMI_MAJOR_AXIS [ NUM00 ] ; semiMinorAxis = SEMI_MINOR_AXIS [ NUM00 ] ; } } } } }
public static double gamma ( double x ) { double P [ ] = { NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ; double Q [ ] = { - NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 } ; double p , z ; $F95016 ( q , Math , x ) if ( q > NUM00 ) { if ( x < NUM00 ) { p = Math . floor ( q ) ; if ( p == q ) $F290806 z = q - p ; if ( z > NUM00 ) { p += NUM00 ; z = q - p ; } z = q * Math . sin ( Math . PI * z ) ; if ( z == NUM00 ) $F290806 $F15467 ( z , Math ) z = Math . PI / ( z * stirlingFormula ( q ) ) ; return - z ; } else $F4915 ( stirlingFormula , x ) } z = NUM00 ; while ( x >= NUM00 ) { x -= NUM00 ; z *= x ; } while ( x < NUM00 ) { if ( x == NUM00 ) $F290806 else if ( x > - NUM00 ) { return ( z / ( ( NUM00 + NUM00 * x ) * x ) ) ; } z /= x ; x += NUM00 ; } while ( x < NUM00 ) { if ( x == NUM00 ) $F290806 else if ( x < NUM00 ) { return ( z / ( ( NUM00 + NUM00 * x ) * x ) ) ; } z /= x ; x += NUM00 ; } if $F61413 ( x ) { return z ; } x -= NUM00 ; p = polevl ( x , P , NUM00 ) ; q = polevl ( x , Q , NUM00 ) ; return z * p / q ; }
public ShowProgress $F72 { start = last = System . currentTimeMillis ( ) ; }
public static RepositoryExpression parseRepositoryExpression ( String toParse ) throws ParseError { StreamTokenizer t = Parser . tokenize ( toParse ) ; Term creator = Parser . parseTerm ( t ) ; List < Operation > operations = Parser . parseOperationList ( t ) ; RepositoryExpression ex = new RepositoryExpression ( creator ) ; if $F5973 ( operations ) { throw new ParseError $F580 ; } return ex ; }
$F1 public synchronized void close $F72 throws IOException { buffer = null ; notifyAll ( ) ; }
public void addSection ( SourceSection section ) $F207 ( sections , section )
public static GenomeRelationships load ( BufferedReader reader ) throws IOException { final GenomeRelationships ped = new GenomeRelationships $F72 ; String line ; while $F443 ( line , reader ) { $F1382 ( line ) if ( line . startsWith ( NUM00 ) || line . matches ( NUM00 ) ) $F1448 if $F11809 ( line ) $F171537 ( parseGenomeLine , ped , line ) if $F11809 ( line ) $F171537 ( parseRelationshipLine , ped , line ) throw new NoTalkbackSlimException ( NUM00 + line + NUM00 ) ; } return ped ; }
private $F2027 versionParts ( String version ) { $F6542 ( parts , version ) $F11844 ( p ) for ( $F6268 ( i ) ) { int pi ; if ( i < parts . length ) { $F191709 ( p , i , Integer , parts ) } else { p [ i ] = - NUM00 ; } } return p ; }
private FgsRunner . Type computeType $F72 { Object model = getDataModel ( ) ; if ( model == null && getSourceGraph ( ) != null ) $F20182 ( model , getSourceGraph ) if ( model == null ) { throw new RuntimeException ( $F39 ) ; } if ( model instanceof Graph ) { type = FgsRunner . Type . GRAPH ; } else if ( model instanceof DataSet ) { DataSet dataSet = ( DataSet ) model ; if ( dataSet . isContinuous ( ) ) { type = FgsRunner . Type . CONTINUOUS ; } else if ( dataSet . isDiscrete ( ) ) { type = FgsRunner . Type . DISCRETE ; } else $F4639 } else if ( model instanceof ICovarianceMatrix ) { type = FgsRunner . Type . CONTINUOUS ; } else if ( model instanceof DataModelList ) { DataModelList list = ( DataModelList ) model ; if ( allContinuous ( list ) ) { type = FgsRunner . Type . CONTINUOUS ; } else if ( allDiscrete ( list ) ) { type = FgsRunner . Type . DISCRETE ; } else $F825 } return type ; }
public static boolean approxEquals $F46897 ( a , b , tolerance ) { if $F89880 ( Double , a , b ) { return _BOOL ; } $F3627 ( a , b , _BOOL ) if ( Double . isInfinite ( a ) || Double . isInfinite ( b ) ) { return _BOOL ; } if ( a >= ( b - tolerance ) && a <= ( b + tolerance ) ) { return _BOOL ; } return _BOOL ; }
public static $F529 loadJsonModel ( File jsFile ) { try { $F529 model = JavaScriptResolver . readJsonModel ( jsFile ) ; if ( model == null ) { throw new CompilerErrorException $F27407 ( jsFile ) ; } if $F154125 ( model ) { throw new CeylonRunJsException ( NUM00 + jsFile + NUM00 ) ; } return model ; } catch ( IOException ex ) { throw new CompilerErrorException ( NUM00 + jsFile ) ; } }
static $F806 splitLine ( final String line ) { $F46662 ( ix0 , line ) final int ix = ix0 == - NUM00 ? line . length ( ) : ix0 ; $F66071 ( lessComment , line , ix ) if $F11809 ( lessComment ) $F1337 return lessComment . split ( NUM00 ) ; }
private $F47942 createVolumeData ( String name , int numVolumes ) { $F47942 $F110578 ( volumes ) ; URI cgUri = createBlockConsistencyGroup ( name + NUM00 ) ; for ( $F9993 ( i , numVolumes ) ) { Volume volume = new Volume $F72 ; $F132261 ( volumeURI , URIUtil ) testVolumeURIs . add ( volumeURI ) ; volume . setId ( volumeURI ) ; volume . setLabel ( name + i ) ; volume . setConsistencyGroup ( cgUri ) ; _dbClient . createObject ( volume ) ; } return volumes ; }
private static $F4203 T hashMapToObject ( LinkedHashMap map , $F20474 type ) { try { return stringToObject ( mapper . writeValueAsString ( map ) , type ) ; } catch ( IOException e ) { log . warn ( $F2990 ( type ) + map . toString ( ) + NUM00 + e . getMessage ( ) ) ; $F1274 } }
$F37100 ( fieldId , SUCCESS )
private void deleteSMS ( String cmd , String search ) { int nbDeleted = - NUM00 ; if $F3057 ( cmd ) { nbDeleted = mSmsManager . deleteAllSms ( ) ; } else if $F3057 ( cmd ) { nbDeleted = mSmsManager . deleteSentSms ( ) ; } else if $F3106 ( cmd ) { Integer number = Tools . parseInt ( search ) ; if ( number == null ) { number = NUM00 ; } if $F3057 ( cmd ) { nbDeleted = mSmsManager . deleteLastSms ( number ) ; } else if $F3057 ( cmd ) { nbDeleted = mSmsManager . deleteLastInSms ( number ) ; } else if $F3057 ( cmd ) { nbDeleted = mSmsManager . deleteLastOutSms ( number ) ; } else { send ( R . string . chat_del_sms_error ) ; } } else if ( cmd . equals ( NUM00 ) && search != null ) { ArrayList $F249696 contacts = ContactsManager . getMatchingContacts ( sContext , search ) ; if $F3817 ( contacts ) { StringBuilder sb = new StringBuilder ( getString ( R . string . chat_specify_details ) ) ; sb . append ( Tools . LineSep ) ; for ( Contact contact : contacts ) { sb . append ( contact . name ) ; sb . append ( Tools . LineSep ) ; } $F31458 ( send , sb ) } else if $F10471 ( contacts ) { Contact contact = contacts . get ( NUM00 ) ; send ( R . string . chat_del_sms_from , contact . name ) ; nbDeleted = mSmsManager . deleteSmsByContact ( contact . rawIds ) ; } else { send ( R . string . chat_no_match_for , search ) ; } } else if ( cmd . equals ( NUM00 ) && search != null ) { send ( R . string . chat_del_sms_from , search ) ; nbDeleted = mSmsManager . deleteSmsByNumber ( search ) ; if ( nbDeleted <= NUM00 ) { send ( R . string . chat_no_match_for , search ) ; } } else { send ( R . string . chat_del_sms_syntax ) ; } if ( nbDeleted >= NUM00 ) { send ( R . string . chat_del_sms_nb , nbDeleted ) ; } else if ( nbDeleted == - NUM00 ) { send ( R . string . chat_del_sms_error ) ; } }
private static BlocksRemoveInfo isStartBlock ( BlockNode remBlock , BlockNode startBlock ) { List < InsnNode > remInsns = remBlock . getInstructions ( ) ; List < InsnNode > startInsns = startBlock . getInstructions ( ) ; if $F45088 ( remInsns , startInsns ) $F1337 int startPos = remInsns . size ( ) - startInsns . size ( ) ; int endPos = NUM00 ; if ( ! checkInsns ( remInsns , startInsns , startPos , null ) ) { if ( checkInsns ( remInsns , startInsns , NUM00 , null ) ) { startPos = NUM00 ; $F8935 ( endPos , startInsns ) } else { boolean found = _BOOL ; for ( $F119 ( i , startPos ) ) { if ( checkInsns ( remInsns , startInsns , i , null ) ) { startPos = i ; endPos = startInsns . size ( ) + i ; found = _BOOL ; $F597 } } $F81346 ( found ) } } BlocksPair startPair = new BlocksPair ( remBlock , startBlock ) ; BlocksRemoveInfo removeInfo = new BlocksRemoveInfo ( startPair ) ; removeInfo . setStartSplitIndex ( startPos ) ; removeInfo . setEndSplitIndex ( endPos ) ; if ( endPos != NUM00 ) { removeInfo . setEnd ( startPair ) ; } if ( ! checkInsns ( remInsns , startInsns , startPos , removeInfo ) ) $F1337 return removeInfo ; }
public boolean checkError $F72 { return pw . checkError ( ) ; }
public List < PdfDocument > splitBySize ( long size ) { List < PageRange > $F204 ( splitRanges ) ; int currentPage = NUM00 ; int numOfPages = pdfDocument . getNumberOfPages ( ) ; while ( currentPage <= numOfPages ) { PageRange nextRange = getNextRange ( currentPage , numOfPages , size ) ; splitRanges . add ( nextRange ) ; $F3807 allPages = nextRange . getAllPages ( ) ; currentPage = ( int ) $F7661 ( allPages ) + NUM00 ; } return extractPageRanges ( splitRanges ) ; }
private boolean validateAuthSchemes ( Set authSchemeSet ) throws PolicyException { if $F2979 ( authSchemeSet ) $F136372 ( AUTH_SCHEME , ResBundleUtils , args ) $F10531 ( authSchemeSetIter , authSchemeSet ) $F725 ( authSchemes ) while $F2921 ( authSchemeSetIter ) { try { $F2778 ( authScheme , authSchemeSetIter ) authSchemes . add ( authScheme ) ; } catch ( ClassCastException e ) $F136372 ( AUTH_SCHEME , ResBundleUtils , args ) } return _BOOL ; }
public static UUID fromUUIDAsURNStringToUUID ( String UUIDasURN ) { if ( ! UUIDasURN . startsWith ( UUIDHelper . UUID_as_a_URN_PREFIX ) ) { IMFErrorLogger imfErrorLogger = new IMFErrorLoggerImpl $F72 ; imfErrorLogger . addError ( IMFErrorLogger . IMFErrors . ErrorCodes . UUID_ERROR , IMFErrorLogger . IMFErrors . ErrorLevels . FATAL , String . format ( NUM00 + NUM00 , UUIDasURN , UUIDHelper . UUID_as_a_URN_PREFIX ) ) ; throw new IMFException ( String . format ( NUM00 , UUIDasURN , UUIDHelper . UUID_as_a_URN_PREFIX ) , imfErrorLogger ) ; } return UUID . fromString ( UUIDasURN . split ( UUIDHelper . UUID_as_a_URN_PREFIX ) [ NUM00 ] ) ; }
public String readLine $F72 { String line ; try { line = scanner . nextLine ( ) ; } catch ( NoSuchElementException e ) { line = null ; } return line ; }
public static $F96 decode ( final String s ) { return Base64 . decode ( s , Base64 . NO_OPTIONS ) ; }
public static GradientPaint makeRedPaint $F30455 ( width , height ) { return new GradientPaint ( NUM00 , NUM00 , $F89156 , ( float ) width / NUM00 , ( float ) height / NUM00 , $F89156 , _BOOL ) ; }
public static $F3803 matchNumbers ( String text ) { String pattern = NUM00 ; $F55449 ( pat , Pattern , pattern ) $F1150 ( m , pat , text ) $F10144 ( matches ) while $F281 ( m ) { matches . add ( m . group ( ) ) ; } return matches ; }
private boolean deleteStorage ( TrackerServer trackerServer , String groupName , String storageIpAddr ) throws IOException { $F96 header ; $F96 bGroupName ; $F96 bs ; int len ; Socket trackerSocket ; trackerSocket = trackerServer . getSocket ( ) ; $F147972 ( out , trackerSocket ) bs = groupName . getBytes ( ClientGlobal . g_charset ) ; bGroupName = new byte [ ProtoCommon . FDFS_GROUP_NAME_MAX_LEN ] ; if ( bs . length <= ProtoCommon . FDFS_GROUP_NAME_MAX_LEN ) $F9454 ( len , bs ) else { len = ProtoCommon . FDFS_GROUP_NAME_MAX_LEN ; } $F26770 ( Arrays , bGroupName ) $F135 ( System , bs , bGroupName , len ) int ipAddrLen ; $F96 bIpAddr = storageIpAddr . getBytes ( ClientGlobal . g_charset ) ; if ( bIpAddr . length < ProtoCommon . FDFS_IPADDR_SIZE ) $F9454 ( ipAddrLen , bIpAddr ) else { ipAddrLen = ProtoCommon . FDFS_IPADDR_SIZE - NUM00 ; } header = ProtoCommon . packHeader ( ProtoCommon . TRACKER_PROTO_CMD_SERVER_DELETE_STORAGE , ProtoCommon . FDFS_GROUP_NAME_MAX_LEN + ipAddrLen , $F19905 ) ; $F96 wholePkg = new byte [ header . length + bGroupName . length + ipAddrLen ] ; $F7057 ( System , header , wholePkg ) $F11244 ( System , bGroupName , wholePkg , header ) System . arraycopy ( bIpAddr , NUM00 , wholePkg , header . length + bGroupName . length , ipAddrLen ) ; out . write ( wholePkg ) ; ProtoCommon . RecvPackageInfo pkgInfo = ProtoCommon . recvPackage ( trackerSocket . getInputStream ( ) , ProtoCommon . TRACKER_PROTO_CMD_RESP , NUM00 ) ; this . errno = pkgInfo . errno ; return pkgInfo . errno == NUM00 ; }
$F1 public UUID createEntryNode ( UUID parentNode ) { $F116795 ( uuid , UUID ) graphServer . addVertex ( uuid ) ; graphServer . addEdge ( uuid , parentNode ) ; return uuid ; }
protected void assertDeliveryStates ( final Collection < CustomerOrderDelivery > deliveries , $F27504 ( expectedState ) ) { for ( CustomerOrderDelivery delivery : deliveries ) { assertEquals ( NUM00 + delivery . getDeliveryGroup ( ) + NUM00 + delivery . getDeliveryNum ( ) , expectedState . get ( delivery . getDeliveryGroup ( ) ) , delivery . getDeliveryStatus ( ) ) ; } }
$F5466 private CompileScope createFacetsCompileScope ( $F1113 final CompilerManager compilerManager , $F1113 final VirtualFile [ ] files ) { final Set $F122212 modules = New . set ( ) ; boolean facetsFound = _BOOL ; for ( final VirtualFile file : files ) { final Module module = ModuleUtilCore . findModuleForFile ( file , project ) ; if ( module != null ) { modules . add ( module ) ; if ( ! facetsFound ) { facetsFound = hasFacets ( module ) ; } } } if ( facetsFound ) { return compilerManager . createModulesCompileScope ( modules . toArray ( Module . EMPTY_ARRAY ) , _BOOL , _BOOL ) ; } $F1274 }
$F5466 @ WorkerThread static File writeBitmapToFile ( $F4170 Bitmap bitmap , $F4170 File file ) { FileOutputStream fileStream = null ; try { $F1538 ( byteStream ) $F125872 ( bitmap , Bitmap , byteStream ) $F10893 ( fileStream , file ) $F1569 ( fileStream , byteStream ) return file ; } catch ( IOException e ) { Log . e ( $F65849 ( TAG , e ) ) ; } finally { if ( fileStream != null ) { try $F881 ( fileStream ) catch ( IOException e ) { Log . e ( $F65849 ( TAG , e ) ) ; } } } $F1274 }
public static Sentence parse ( final String text , final ConversationContext ctx ) { String txt ; if ( text == null ) { txt = NUM00 ; } else { if ( ( ctx != null ) && ctx . isForMatching ( ) ) { final ExpressionMatcher matcher = new ExpressionMatcher $F72 ; txt = matcher . readMatchingFlags ( text ) ; if ( matcher . isAnyFlagSet ( ) ) { return matcher . parseSentence ( txt , ctx ) ; } } else { txt = text ; } } $F1382 ( txt ) final SentenceImplementation sentence = new SentenceImplementation ( ctx , txt ) ; try { final ConversationParser parser = new ConversationParser ( sentence ) ; sentence . parse ( parser ) ; sentence . classifyWords ( parser ) ; if ( ( ctx != null ) && ctx . getMergeExpressions ( ) ) { sentence . evaluateSentenceType ( ) ; sentence . mergeWords ( ) ; if ( ! ctx . isForMatching ( ) ) { sentence . standardizeSentenceType ( ) ; sentence . performaAliasing ( ) ; } } sentence . setError ( parser . getErrorString ( ) ) ; } catch ( final Exception e ) { $F19652 ( LOGGER , text ) sentence . setError ( e . getMessage ( ) ) ; $F301 ( e ) } return sentence ; }
public ElemTemplateElement replaceChild ( ElemTemplateElement newChildElem , ElemTemplateElement oldChildElem ) { if ( oldChildElem == null || oldChildElem . getParentElem ( ) != this ) $F1274 ElemTemplateElement prev = oldChildElem . getPreviousSiblingElem ( ) ; if ( null != prev ) prev . m_nextSibling = newChildElem ; if ( m_firstChild == oldChildElem ) m_firstChild = newChildElem ; newChildElem . m_parentNode = this ; oldChildElem . m_parentNode = null ; newChildElem . m_nextSibling = oldChildElem . m_nextSibling ; oldChildElem . m_nextSibling = null ; return newChildElem ; }
protected int hash ( Object key1 , Object key2 , Object key3 ) { int h = NUM00 ; $F104661 ( key1 , h ) $F104661 ( key2 , h ) $F104661 ( key3 , h ) $F159349 ( h ) $F159351 ( h ) $F159353 ( h ) $F159351 ( h ) return h ; }
public void flush $F72 throws IOException { flushBuffer ( ) ; $F1206 ( _outputStream ) }
$F9749 ( namespace , attName , attValue , xmlWriter , registerPrefix )
private void addEntryToInfoList ( Entry entry , List < EntryInfo > entryInfoList ) { if ( entryInfoList != null ) { $F14181 ( typeToAdd , entry ) if ( typeToAdd . equals ( DbLogic . Constants . quotation ) ) { typeToAdd = DbLogic . Constants . note ; } entryInfoList . add ( new EntryInfo ( entry . getId ( ) , entry . getNoteOrTitle ( NUM00 ) , entry . getQuotation ( NUM00 ) , entry . getIsPublic ( ) , entry . hasFirstChildId ( ) , entry . hasParentId ( ) , typeToAdd ) ) ; } }
private void updateSliding ( float newPositionNormalized ) { currentSlide = newPositionNormalized ; state = currentSlide == NUM00 ? EXPANDED : currentSlide == NUM00 ? COLLAPSED : SLIDING ; float slideY = Math . abs ( ( currentSlide * maxSlide ) - maxSlide ) ; slidableView . setY ( slideY ) ; invalidate ( ) ; notifyListeners ( currentSlide ) ; }
void flush ( VcfWriter writer ) throws IOException { if ( mPrevRecord != null ) { if ( ! mPrevDense ) { writeCount ( writer , mPrevRecord ) ; } else { mVcfFilterStatistics . increment ( Stat . DENSITY_WINDOW_COUNT ) ; } } mPrevRecord = null ; mPrevDense = _BOOL ; }
public VideoStream ( String streamStr ) { $F6542 ( args , streamStr ) $F13404 ( argMap ) for ( String arg : args ) { $F6542 ( argsValues , arg ) if ( argsValues != null ) { if $F106758 ( argsValues ) { $F266434 ( argMap , argsValues ) } } } $F178035 ( mUrl , argMap ) }
public boolean equals ( String str ) { $F397 ( str , _BOOL ) if $F20325 ( _length , str ) return _BOOL ; for ( int i = _length , j = _offset + _length ; -- i >= NUM00 ; ) { if ( _array [ -- j ] != str . charAt ( i ) ) return _BOOL ; } return _BOOL ; }
protected void flush $F72 $F29882 ( stream )
private ServerStarter startServers $F72 throws Exception { ServerStarter srvStarter = new ServerStarter $F72 ; $F24440 ( t , srvStarter ) t . setDaemon ( _BOOL ) ; $F87453 ( t ) $F2346 ( t ) srvStarter . waitForServerStart ( ) ; return srvStarter ; }
public Pagination evaluate ( final Class entityClass ) { Paginate paginate = entityClass != null ? ( Paginate ) entityClass . getAnnotation ( Paginate . class ) : null ; int defaultLimit = paginate != null ? paginate . defaultLimit ( ) : DEFAULT_PAGE_LIMIT ; int maxLimit = paginate != null ? paginate . maxLimit ( ) : MAX_PAGE_LIMIT ; evaluate ( defaultLimit , maxLimit ) ; generateTotals = generateTotals && ( paginate == null || paginate . countable ( ) ) ; return this ; }
public RuntimeCollector ( Algorithm algorithm , int frequency , ResultFileWriter writer ) { super ( algorithm , frequency , FrequencyType . EVALUATIONS ) ; this . writer = writer ; $F101251 ( startTime , System ) }
public boolean deregisterServiceProvider ( Object provider ) { Object oprovider = map . get ( provider . getClass ( ) ) ; if ( provider == oprovider ) { map . remove ( provider . getClass ( ) ) ; poset . remove ( provider ) ; if ( provider instanceof RegisterableService ) { RegisterableService rs = ( RegisterableService ) provider ; rs . onDeregistration ( registry , category ) ; } return _BOOL ; } return _BOOL ; }
public NewestFirstComparator ( Date now ) { Preconditions . checkNotNull ( now ) ; mNow = new Date ( now . getTime ( ) + MILLIS_IN_DAY ) ; }
protected void update ( Comparable x , Object y ) { int index = indexOf ( x ) ; if ( index < NUM00 ) { throw new SeriesException ( NUM00 + x ) ; } else { ComparableObjectItem item = getDataItem ( index ) ; item . setObject ( y ) ; fireSeriesChanged ( ) ; } }
public void writeField ( String name , float value ) throws $F3258 $F261761 ( writeField , name , Float , value )
public $F96 decodeData $F5474 ( data , numErrorCorrectionBytes ) throws ReedSolomonException , DataTooLargeException { if $F12414 ( data ) $F1337 if $F3305 ( data ) { throw new DataTooLargeException $F580 ; } $F22974 ( dataInts , data ) for ( $F1139 ( i , data ) ) { dataInts [ i ] = data [ i ] & NUM00 ; } int totalBytes = data . length - numErrorCorrectionBytes ; decoder . decode ( dataInts , numErrorCorrectionBytes ) ; $F1538 ( bos ) for ( int i = NUM00 ; i < totalBytes && i < dataInts . length ; i ++ ) $F31431 ( bos , dataInts , i ) $F11316 ( bos ) }
public static $F5 stringToArrayList ( String string ) { return new $F201 ( $F34166 ( Arrays , string ) ) ; }
public Shape createScrollButtonApart $F2026 ( x , y , w , h ) { $F2268 ( path ) path . moveTo ( x , y ) ; path . lineTo ( x , y + h ) ; path . lineTo ( x + w , y + h ) ; addScrollGapPath ( x , y , w , h , _BOOL ) ; $F2272 ( path ) return path ; }
void removeAllViewsFromAdapter ( ViewPager pager ) { $F725 ( mViews ) $F66394 ( pager ) mIsViewPagerInIntentionallyInconsistentState = _BOOL ; }
public static boolean isValidMobile $F20574 ( mobile ) { if ( ! TextUtils . isEmpty ( mobile ) && $F1276 ( mobile ) ) { if ( $F132104 ( mobile ) ) { return _BOOL ; } } return _BOOL ; }
public String convertError ( String filename , int line , int column , String message ) { String srcFilename = null ; int destLine = NUM00 ; int srcLine = NUM00 ; for ( $F2277 ( i , _lines ) ) { Line map = _lines . get ( i ) ; if ( filename != null && ! filename . endsWith ( _dstFilename ) ) $F845 else if ( map . _dstLine <= line && line <= map . getLastDestinationLine ( ) ) { srcFilename = map . _srcFilename ; srcLine = map . getSourceLine ( line ) ; } } if ( srcFilename != null ) return srcFilename + NUM00 + srcLine + NUM00 + message ; else return filename + NUM00 + line + NUM00 + message ; }
public static Number sinh ( Number a ) { return Math . sinh ( a . doubleValue ( ) ) ; }
public void addNotification ( $F1113 Notification notification ) { NotificationItem item = new NotificationItem ( resources , notification , delegate , panel ) ; notificationWidget . add ( notification ) ; }
protected boolean isAttributesModified $F72 { if ( attributes != null ) { return $F2979 ( attributes ) ? _BOOL : _BOOL ; } return _BOOL ; }
public IOUtils $F72 $F5795 ( super )
$F5466 public static IgnoreDescriptor forMethod ( Class cls , Method mthd ) { if ( mthd . isAnnotationPresent ( IgniteIgnore . class ) ) { IgniteIgnore ignore = mthd . getAnnotation ( IgniteIgnore . class ) ; String reason = ignore . value ( ) ; if $F4329 ( F , reason ) throw new IllegalArgumentException ( $F27322 ( cls , mthd ) ) ; return new IgnoreDescriptor ( reason , ignore . forceFailure ( ) ) ; } else $F1274 }
protected void runFullImport $F5805 ( dataConfig , extraParams ) throws Exception { $F274034 ( params ) $F16824 ( params ) $F16824 ( params ) $F545 ( params , dataConfig ) $F16824 ( params ) $F16824 ( params ) params . putAll ( extraParams ) ; NamedList l = new NamedList $F72 ; for ( $F19318 ( e , params ) ) { l . add ( $F15245 ( e ) ) ; } LocalSolrQueryRequest request = new LocalSolrQueryRequest ( h . getCore ( ) , l ) ; h . query ( NUM00 , request ) ; }
public static ModifiableDBIDs randomSample ( DBIDs source , int k , Random random ) { if ( k < NUM00 || k > source . size ( ) ) { throw new IllegalArgumentException ( $F57676 ( k , source ) ) ; } if ( random == null ) { random = new FastNonThreadsafeRandom $F72 ; } if ( k < source . size ( ) > > NUM00 ) { ArrayDBIDs aids = DBIDUtil . ensureArray ( source ) ; DBIDArrayIter iter = aids . iter ( ) ; HashSetModifiableDBIDs sample = DBIDUtil . newHashSet ( k ) ; while $F10255 ( sample , k ) { iter . seek ( random . nextInt ( aids . size ( ) ) ) ; sample . add ( iter ) ; } return sample ; } else { ArrayModifiableDBIDs sample = DBIDUtil . newArray ( source ) ; randomShuffle ( sample , random , k ) ; for ( int i = $F2281 ( sample ) ; i >= k ; i -- ) $F106 ( sample , i ) return sample ; } }
protected int drawMessageSize $F72 { int sizeDiff = sizeRange [ NUM00 ] == sizeRange [ NUM00 ] ? NUM00 : rng . nextInt ( $F50510 ( sizeRange ) ) ; return sizeRange [ NUM00 ] + sizeDiff ; }
public static $F806 grabArgs ( String signature ) { $F275 ( matcher , sigRE , signature ) boolean b = matcher . matches ( ) ; if ( ! b && matcher . groupCount ( ) != NUM00 ) $F5197 ( logger , signature ) $F283 ( args , matcher ) if $F2979 ( args ) return $F382 ; return args . split ( NUM00 ) ; }
$F43277 ( listener , mListeners )
public void test_engineCreateSSLEngine_01 $F72 { SSLContextSpiImpl ssl = new SSLContextSpiImpl $F72 ; try { SSLEngine sleng = ssl . engineCreateSSLEngine ( ) ; fail ( NUM00 ) ; } $F132298 ( str , re , fail ) $F132299 ( fail , e ) }
public void processDispatch ( UniformPair $F324611 events ) { if ( ! forClauseDelivery ) $F14411 ( dispatchInternal , events ) if ( ( groupDeliveryExpressions == null ) || $F9634 ( groupDeliveryExpressions ) ) { UniformPair $F324611 todeliver = new UniformPair $F324611 $F73801 ; if ( events != null ) { if ( events . getFirst ( ) != null ) { for ( EventBean theEvent : events . getFirst ( ) ) { todeliver . setFirst ( new EventBean [ ] { theEvent } ) ; dispatchInternal ( todeliver ) ; } todeliver . setFirst ( null ) ; } if ( events . getSecond ( ) != null ) { for ( EventBean theEvent : events . getSecond ( ) ) { todeliver . setSecond ( new EventBean [ ] { theEvent } ) ; dispatchInternal ( todeliver ) ; } todeliver . setSecond ( null ) ; } } $F665 } Map < Object , UniformPair $F324611 > groups ; try { groups = getGroupedResults ( events ) ; } catch ( RuntimeException ex ) { log . error ( $F5352 ( ex ) , ex ) ; dispatchInternal ( events ) ; $F665 } for ( Map . Entry < Object , UniformPair $F324611 > group : groups . entrySet ( ) ) { $F25313 ( dispatchInternal , group ) } }
public V put ( K key , V value ) { final int hash ; int index ; if ( key == null ) { hash = NUM00 ; index = indexOfNull ( ) ; } else { $F80728 ( hash , key ) index = indexOf ( key , hash ) ; } if ( index >= NUM00 ) { index = $F50054 ( index ) ; final V old = ( V ) mArray [ index ] ; mArray [ index ] = value ; return old ; } index = ~ index ; if ( mSize >= mHashes . length ) { final int n = mSize >= ( BASE_SIZE * NUM00 ) ? $F107995 ( mSize ) : ( mSize >= BASE_SIZE ? ( BASE_SIZE * NUM00 ) : BASE_SIZE ) ; $F92861 ( ohashes , mHashes ) $F108000 ( oarray , mArray ) allocArrays ( n ) ; if $F3305 ( mHashes ) { $F7057 ( System , ohashes , mHashes ) $F7057 ( System , oarray , mArray ) } freeArrays ( ohashes , oarray , mSize ) ; } if ( index < mSize ) { $F27096 ( System , mHashes , index , mSize ) System . arraycopy ( mArray , index < < NUM00 , mArray , $F33569 ( index ) , ( mSize - index ) < < NUM00 ) ; } mHashes [ index ] = hash ; mArray [ index < < NUM00 ] = key ; $F107987 ( mArray , index ) = value ; mSize ++ ; $F1274 }
protected void reset $F72 { Arrays . fill ( m_isCandidate , _BOOL ) ; }
protected void redefine $F103468 ( nodetype , namespace , localName ) { this . nodetype = nodetype ; this . namespace = namespace ; this . localName = localName ; this . hash = nodetype + namespace . hashCode ( ) + localName . hashCode ( ) ; }
public void putLong ( long pos , long val ) { unsafe . putLong ( pos + addr , val ) ; }
public void lineTo ( float x , float y ) { mPoints . add ( PathPoint . lineTo ( x , y ) ) ; }
public boolean deleteRSetStep ( URI rpSystemId , $F28584 volumeIds , String token ) throws InternalException { $F10144 ( replicationSetNames ) try { List < RecoverPointVolumeProtectionInfo > volumeProtectionInfoList = new ArrayList < RecoverPointVolumeProtectionInfo > $F72 ; ProtectionSystem rpSystem = _dbClient . queryObject ( ProtectionSystem . class , rpSystemId ) ; RecoverPointClient rp = RPHelper . getRecoverPointClient ( rpSystem ) ; for ( URI volumeId : volumeIds ) { $F8544 ( volume , _dbClient , volumeId ) RecoverPointVolumeProtectionInfo volumeProtectionInfo = rp . getProtectionInfoForVolume ( RPHelper . getRPWWn ( volume . getId ( ) , _dbClient ) ) ; Volume sourceVolume = RPHelper . getRPSourceVolume ( _dbClient , volume ) ; VirtualPool virtualPool = _dbClient . queryObject ( $F81883 , sourceVolume . getVirtualPool ( ) ) ; volumeProtectionInfo . setMetroPoint ( VirtualPool . vPoolSpecifiesMetroPoint ( virtualPool ) ) ; volumeProtectionInfoList . add ( volumeProtectionInfo ) ; replicationSetNames . add ( volume . getRSetName ( ) ) ; } if $F5973 ( volumeProtectionInfoList ) { rp . deleteReplicationSets ( volumeProtectionInfoList ) ; } WorkflowStepCompleter . stepSucceded ( token ) ; } catch ( Exception e ) { _log . error ( $F44379 ( String , replicationSetNames ) ) ; return stepFailed ( token , e , NUM00 ) ; } return _BOOL ; }
private void moveToNext $F72 { checkMainThread ( ) ; scheduled . set ( _BOOL ) ; Bitmap next = pending . poll ( ) ; if ( next != null ) { if ( current != null && ! finished . offer ( current ) ) $F11388 current = next ; invalidateSelf ( ) ; ensureScheduled ( ) ; frameAvailableSubject . onNext ( null ) ; $F92039 ( fpsCounter ) } }
$F34537 ( listener , changingListeners )
public String rma $F83882 ( ctx , WindowNo , mTab , mField , value ) { $F179073 ( M_RMA_ID , value ) if ( M_RMA_ID == null || $F179074 ( M_RMA_ID ) ) $F1278 if ( isCalloutActive ( ) ) $F1278 MRMA rma = new MRMA ( ctx , M_RMA_ID . intValue ( ) , null ) ; MInOut originalReceipt = rma . getShipment ( ) ; if ( rma . get_ID ( ) != NUM00 ) { mTab . setValue ( NUM00 , originalReceipt . getDateOrdered ( ) ) ; mTab . setValue ( NUM00 , originalReceipt . getPOReference ( ) ) ; mTab . setValue ( NUM00 , new Integer ( originalReceipt . getAD_Org_ID ( ) ) ) ; mTab . setValue ( NUM00 , new Integer ( originalReceipt . getAD_OrgTrx_ID ( ) ) ) ; mTab . setValue ( NUM00 , new Integer ( originalReceipt . getC_Activity_ID ( ) ) ) ; mTab . setValue ( NUM00 , new Integer ( originalReceipt . getC_Campaign_ID ( ) ) ) ; mTab . setValue ( NUM00 , new Integer ( originalReceipt . getC_Project_ID ( ) ) ) ; mTab . setValue ( NUM00 , new Integer ( originalReceipt . getUser1_ID ( ) ) ) ; mTab . setValue ( NUM00 , new Integer ( originalReceipt . getUser2_ID ( ) ) ) ; mTab . setValue ( NUM00 , new Integer ( originalReceipt . getM_Warehouse_ID ( ) ) ) ; mTab . setValue ( NUM00 , originalReceipt . getDeliveryRule ( ) ) ; mTab . setValue ( NUM00 , originalReceipt . getDeliveryViaRule ( ) ) ; mTab . setValue ( NUM00 , new Integer ( originalReceipt . getM_Shipper_ID ( ) ) ) ; mTab . setValue ( NUM00 , originalReceipt . getFreightCostRule ( ) ) ; mTab . setValue ( NUM00 , originalReceipt . getFreightAmt ( ) ) ; mTab . setValue ( NUM00 , new Integer ( originalReceipt . getC_BPartner_ID ( ) ) ) ; mTab . setValue ( NUM00 , new Integer ( originalReceipt . getC_BPartner_Location_ID ( ) ) ) ; if ( originalReceipt . getAD_User_ID ( ) > NUM00 ) mTab . setValue ( NUM00 , new Integer ( originalReceipt . getAD_User_ID ( ) ) ) ; else $F179081 ( mTab ) } $F1278 }
public final long readLong $F72 throws $F3258 { readFully ( scratch , NUM00 , NUM00 ) ; int h = $F257717 ( scratch ) | $F257715 ( scratch ) ; int l = $F257717 ( scratch ) | $F257715 ( scratch ) ; return $F81616 ( h ) | ( ( long ) l ) & NUM00 ; }
public void testGetColumnsMetaData $F72 throws Exception { $F9236 ( dmd , con ) ResultSet rs = dmd . getColumns ( null , null , NUM00 , null ) ; assertNotNull ( rs ) ; $F19097 ( rsmd , rs ) assertNotNull ( rsmd . getCatalogName ( NUM00 ) ) ; assertNotNull ( rsmd . getColumnClassName ( NUM00 ) ) ; rsmd . getColumnCount ( ) ; assertTrue ( NUM00 != rsmd . getColumnDisplaySize ( NUM00 ) ) ; assertNotNull ( rsmd . getColumnLabel ( NUM00 ) ) ; assertNotNull ( rsmd . getColumnName ( NUM00 ) ) ; rsmd . getColumnType ( NUM00 ) ; assertNotNull ( rsmd . getColumnTypeName ( NUM00 ) ) ; rsmd . getPrecision ( NUM00 ) ; rsmd . getScale ( NUM00 ) ; assertNotNull ( rsmd . getSchemaName ( NUM00 ) ) ; assertNotNull ( rsmd . getTableName ( NUM00 ) ) ; rsmd . isAutoIncrement ( NUM00 ) ; rsmd . isCaseSensitive ( NUM00 ) ; rsmd . isCurrency ( NUM00 ) ; rsmd . isDefinitelyWritable ( NUM00 ) ; rsmd . isNullable ( NUM00 ) ; rsmd . isReadOnly ( NUM00 ) ; rsmd . isSearchable ( NUM00 ) ; rsmd . isSigned ( NUM00 ) ; rsmd . isWritable ( NUM00 ) ; $F59 ( rs ) }
private Log discoverLogImplementation ( String logCategory ) throws LogConfigurationException { if ( isDiagnosticsEnabled ( ) ) $F1210 ( logDiagnostic ) initConfiguration ( ) ; Log result = null ; String specifiedLogClassName = findUserSpecifiedLogClassName ( ) ; if ( specifiedLogClassName != null ) { if ( isDiagnosticsEnabled ( ) ) $F47196 ( logDiagnostic , specifiedLogClassName ) result = createLogFromClass ( specifiedLogClassName , logCategory , _BOOL ) ; if ( result == null ) { $F8755 ( messageBuffer ) messageBuffer . append ( specifiedLogClassName ) ; $F84 ( messageBuffer ) if ( specifiedLogClassName != null ) { informUponSimilarName ( messageBuffer , specifiedLogClassName , LOGGING_IMPL_LOG4J_LOGGER ) ; informUponSimilarName ( messageBuffer , specifiedLogClassName , LOGGING_IMPL_JDK14_LOGGER ) ; informUponSimilarName ( messageBuffer , specifiedLogClassName , LOGGING_IMPL_LUMBERJACK_LOGGER ) ; informUponSimilarName ( messageBuffer , specifiedLogClassName , LOGGING_IMPL_SIMPLE_LOGGER ) ; } throw new LogConfigurationException $F3362 ( messageBuffer ) ; } return result ; } if ( isDiagnosticsEnabled ( ) ) $F32318 ( logDiagnostic ) for ( int i = NUM00 ; ( i < classesToDiscover . length ) && ( result == null ) ; ++ i ) { result = createLogFromClass ( classesToDiscover [ i ] , logCategory , _BOOL ) ; } if ( result == null ) { throw new LogConfigurationException $F580 ; } return result ; }
public NSData ( File file ) throws IOException { bytes = new byte [ $F5338 ( file ) ] ; $F18800 ( raf , file ) raf . read ( bytes ) ; $F59 ( raf ) }
public ViaHeader createViaHeader ( String host , int port , String transport , String branch ) throws ParseException , InvalidArgumentException { if ( host == null || transport == null ) $F894 Via via = new Via $F72 ; if ( branch != null ) via . setBranch ( branch ) ; if ( $F48845 ( host ) && $F1730 ( host ) ) { if ( stripAddressScopeZones ) { $F1384 ( zoneStart , host ) if ( zoneStart != - NUM00 ) $F45799 ( host , zoneStart ) } host = NUM00 + host + NUM00 ; } via . setHost ( host ) ; via . setPort ( port ) ; via . setTransport ( transport ) ; return via ; }
public String toString $F72 { return $F5528 ( super ) + recordMap . size ( ) + NUM00 + firstOffset + NUM00 + releaseBuffer + NUM00 + prefixWrites + NUM00 + useChecksum + NUM00 + bytesWritten ( ) + NUM00 + remaining ( ) + NUM00 + m_removed + NUM00 ; }
$F9159 ( logDebug , mSetupDone , _BOOL , mServiceConn , mContext , mDisposed , mService , mPurchaseListener )
public int find ( String string ) { $F14469 ( string ) for ( int i = NUM00 ; i != m_stringOffsets . length ; ++ i ) { int offset = m_stringOffsets [ i ] ; int length = getShort ( m_strings , offset ) ; if ( length != string . length ( ) ) $F1448 int j = NUM00 ; for ( ; j != length ; ++ j ) { offset += NUM00 ; if ( string . charAt ( j ) != getShort ( m_strings , offset ) ) $F5153 } $F3627 ( j , length , i ) } $F150 }
private void handleJsonCreateAccount ( RequestAndResponse requestAndResponse ) throws $F47978 { requestAndResponse . setResponseContentTypeJson ( ) ; String userName , password , password2 , email ; boolean mayContact = _BOOL ; String csrft ; try { final JsonNodeHelper json = getJsonNode ( requestAndResponse ) ; $F35515 ( userName , json ) $F35515 ( password , json ) $F35515 ( password2 , json ) $F35515 ( email , json ) mayContact = json . getBoolean ( NUM00 ) ; $F35515 ( csrft , json ) } catch ( final IOException e ) { returnJson400 ( requestAndResponse , servletText . errorJson ( ) ) ; $F665 } if ( userName != null ) { $F37156 ( userName ) } if ( isTheCsrftWrong ( requestAndResponse , csrft ) ) { returnJson400 ( requestAndResponse , servletText . errorWrongCsrft ( ) ) ; $F665 } if ( ! allowSelfSignUp ) { returnJson400 ( requestAndResponse , servletText . errorSelfSignUpNotAllowed ( ) ) ; $F665 } if $F4251 ( userName ) { returnJson400 ( requestAndResponse , servletText . errorUsernameMustNotBeBlank ( ) ) ; $F665 } if $F4251 ( password ) { returnJson400 ( requestAndResponse , servletText . errorFirstPasswordMustBeSet ( _BOOL , null ) ) ; $F665 } if ( password == null || password2 . isEmpty ( ) ) { returnJson400 ( requestAndResponse , servletText . errorSecondPasswordMustBeSet ( _BOOL , null ) ) ; $F665 } if $F2137 ( password2 , password ) { returnJson400 ( requestAndResponse , servletText . errorPasswordsMustMatch ( ) ) ; $F665 } if ( ! AccountAttributeValidator . isUserNameValid ( userName ) ) { returnJson400 ( requestAndResponse , servletText . errorUserNameIsNotValid ( ) ) ; $F665 } if ( ! AccountAttributeValidator . isPasswordValid ( password ) ) { returnJson400 ( requestAndResponse , servletText . errorPasswordIsNotValid ( ) ) ; $F665 } if $F171402 ( email ) { email = null ; } if ( email != null && ! AccountAttributeValidator . isEmailValid ( email ) ) { returnJson400 ( requestAndResponse , servletText . errorEmailIsNotValid ( ) ) ; $F665 } try { User user = dbLogic . getUserByUserName ( userName ) ; if ( user != null ) { returnJson400 ( requestAndResponse , servletText . errorUserNameIsAlreadyTaken ( ) ) ; $F665 } user = dbLogic . createUser ( userName ) ; if ( user == null ) { returnJson400 ( requestAndResponse , servletText . errorCouldNotCreateAccount ( ) ) ; $F665 } user . setPassword ( DigestUtils . sha1Hex ( password ) ) ; user . setEmail ( email ) ; user . setMayContact ( mayContact ) ; mapSessionToUser ( requestAndResponse , user . getId ( ) ) ; $F17621 ( dbLogic ) returnJson200 ( requestAndResponse ) ; } catch ( final PersistenceException e ) { logger . log ( Level . INFO , NUM00 , e ) ; returnJson500 ( requestAndResponse , servletText . errorInternalDatabase ( ) ) ; } }
private $F131 resolveParameters ( Executable executable , Optional $F1432 target , Object outerInstance , ExtensionContext extensionContext , ExtensionRegistry extensionRegistry ) { $F18062 ( Preconditions , target ) Parameter [ ] parameters = executable . getParameters ( ) ; $F193824 ( values , parameters ) int start = NUM00 ; if ( outerInstance != null ) { values [ NUM00 ] = outerInstance ; start = NUM00 ; } for ( $F9958 ( i , start , parameters ) ) { ParameterContext parameterContext = new DefaultParameterContext ( parameters [ i ] , i , target ) ; values [ i ] = resolveParameter ( parameterContext , executable , extensionContext , extensionRegistry ) ; } return values ; }
public static boolean isValidNameChar ( char c ) { return isValidNameStartChar ( c ) || $F19295 ( c ) ; }
public void supportTlsIntolerantServer ( SSLSocket socket ) { socket . setEnabledProtocols ( $F21904 ) ; }
protected static boolean id_start_char ( int ch ) { return $F19295 ( ch ) || $F19295 ( ch ) || ( ch == NUM00 ) ; }
public int hashCode $F72 { int fhash = ( family != null ) ? family . hashCode ( ) : NUM00 ; return fhash ^ style ^ size ; }
private CommandHandlerEnum ( final Command command1 ) { this . command = command1 ; }
public static boolean isFloat ( String desc ) $F74727 ( desc )
public void componentResized ( ComponentEvent e ) { JScrollBar bar = getVerticalScrollBar ( ) ; int incr = ( int ) ( getSize ( ) . getHeight ( ) - ( bar . getUnitIncrement ( NUM00 ) * NUM00 ) ) ; getVerticalScrollBar ( ) . setBlockIncrement ( incr ) ; }
public Arg $F118231 ( aName , desc , expectedNumberOfArguments , expectDashedArguments ) { name = aName ; description = desc ; numExpectedValues = expectedNumberOfArguments ; $F7783 ( c , name ) dashedArguments = expectDashedArguments ; }
private boolean remove ( Object o , $F131 snapshot , int index ) { $F677 ( lock , this ) $F790 ( lock ) try { $F8867 ( current , getArray ) int len = current . length ; if ( snapshot != current ) findIndex : { $F17565 ( prefix , Math , index , len ) for ( $F119 ( i , prefix ) ) { if ( current [ i ] != snapshot [ i ] && eq ( o , current [ i ] ) ) { index = i ; break findIndex ; } } if ( index >= len ) return _BOOL ; if ( current [ index ] == o ) break findIndex ; index = indexOf ( o , current , index , len ) ; $F12655 ( index , _BOOL ) } $F131 newElements = new Object [ len - NUM00 ] ; $F135 ( System , current , newElements , index ) System . arraycopy ( current , index + NUM00 , newElements , index , len - index - NUM00 ) ; setArray ( newElements ) ; return _BOOL ; } $F796 ( lock ) }
public void removeModel ( Model model ) $F106 ( models , model )
public void readMap ( int map_Number ) { InputStream map_file ; try { map_file = new FileInputStream ( NUM00 + map_Number + NUM00 ) ; try { $F143466 ( data , map_file ) map_file . read ( data ) ; $F59 ( map_file ) String $F116025 ( load_data , data ) ; makeMap ( load_data ) ; } $F12241 ( e ) } $F35546 ( e1 ) }
public static double hoeffdingLn $F7635 ( trials , observed , prob ) { return - NUM00 * Math . pow ( trials * prob - observed , NUM00 ) / trials ; }
$F73303 ( axis , trans , prevImageSize , imageSize , prevViewSize , viewSize , drawableSize , m , Matrix , percentage , Math )
public void run $F72 { RandomAccessFile reader = null ; try { long last = NUM00 ; long position = NUM00 ; while ( run && reader == null ) { try { reader = new RandomAccessFile ( file , RAF_MODE ) ; } catch ( FileNotFoundException e ) { listener . fileNotFound ( ) ; } if ( reader == null ) $F7597 ( Thread , delayMillis ) else { position = end ? file . length ( ) : NUM00 ; $F3224 ( last , System ) reader . seek ( position ) ; } } while ( run ) { boolean newer = FileUtils . isFileNewer ( file , last ) ; $F14662 ( length , file ) if ( length < position ) { listener . fileRotated ( ) ; try { RandomAccessFile save = reader ; reader = new RandomAccessFile ( file , RAF_MODE ) ; position = NUM00 ; IOUtils . closeQuietly ( save ) ; } catch ( FileNotFoundException e ) { listener . fileNotFound ( ) ; } $F598 } else { if ( length > position ) { position = readLines ( reader ) ; $F3224 ( last , System ) } else if ( newer ) { position = NUM00 ; reader . seek ( position ) ; position = readLines ( reader ) ; $F3224 ( last , System ) } } if ( reOpen ) { IOUtils . closeQuietly ( reader ) ; } try $F7595 ( Thread , delayMillis ) $F887 if ( run && reOpen ) { reader = new RandomAccessFile ( file , RAF_MODE ) ; reader . seek ( position ) ; } } } catch ( Exception e ) { listener . handle ( e ) ; } $F18090 ( IOUtils , reader ) }
$F1 public void onNestedPreScroll ( View target , int dx , int dy , $F2027 consumed ) { if ( ( ! mPullRefreshEnable && ! mPullLoadEnable ) ) $F932 if $F33322 ( Math , dy ) $F932 if ( ! isConfirm ) { if ( dy < NUM00 && ! canChildScrollUp ( ) ) { mCurrentAction = PULL_REFRESH ; isConfirm = _BOOL ; } else if ( dy > NUM00 && ! canChildScrollDown ( ) ) { mCurrentAction = LOAD_MORE ; isConfirm = _BOOL ; } } if ( moveSpinner ( - dy ) ) { consumed [ NUM00 ] += dy ; } }
public void testLocalInstances_deterministic $F72 { $F2268 ( MatsimRandom ) Random local1a = MatsimRandom . getLocalInstance ( ) ; Random local1b = MatsimRandom . getLocalInstance ( ) ; $F2268 ( MatsimRandom ) Random local2a = MatsimRandom . getLocalInstance ( ) ; Random local2b = MatsimRandom . getLocalInstance ( ) ; assertEqualRandomNumberGenerators ( local1a , local2a ) ; assertEqualRandomNumberGenerators ( local1b , local2b ) ; }
public void add ( Match match , AppliedRegion appliedRegion ) { add ( match , appliedRegion , _BOOL ) ; }
public void reset $F72 { techTree . checkSubTree ( techTree . getPathForRow ( NUM00 ) , _BOOL ) ; }
$F1431 private static $F4203 void assertThrows ( final Consumer $F8317 consumer , $F98259 ( exceptionClass ) , final $F39462 assertExceptionProperties , final String message ) { final String normalizedMessage = null == message ? NUM00 : String . format ( NUM00 , message ) ; try { consumer . accept ( null ) ; } catch ( final Exception ex ) { if $F178804 ( exceptionClass , ex ) { assertExceptionProperties . accept ( ( T ) ex ) ; $F665 } Assert . fail ( String . format ( NUM00 , normalizedMessage , ex . getClass ( ) , ex . getMessage ( ) ) ) ; } Assert . fail ( String . format ( NUM00 , normalizedMessage , exceptionClass ) ) ; }
public boolean isEmpty $F72 { return $F38237 ( nodes , ways , relations ) ; }
public static void assertBool ( boolean b ) { if ( verbose ) $F47196 ( log , b ) if ( ! b ) $F65782 }
$F13429 ( criteria , createCriteriaInternal , oredCriteria )
public TagKeyValueMapConverter ( boolean nullIfEmpty , String idKey ) { Objects . requireNonNull ( idKey ) ; this . nullIfEmpty = nullIfEmpty ; this . addId = _BOOL ; this . idKey = idKey ; }
private static void postInit $F72 { debugAll = dbgTable . containsKey ( debugAllToken ) ; }
$F11730 ( logPrefix , request , exception , retryPolicy , oldTimeout , String , e )
public static $F11300 sortInBatch ( File file , Comparator $F4 cmp ) throws IOException $F19580 ( sortInBatch , file , cmp , DEFAULTMAXTEMPFILES )
public void addDirectorySet ( Context context , String path ) { TinyDB tinydb = new TinyDB ( context ) ; $F5 file = tinydb . getListString ( NUM00 ) ; file . add ( path ) ; tinydb . putListString ( NUM00 , file ) ; }
private FastConcurrentSkipListMap . Node $F9340 hiNode $F72 { if ( hi == null ) return m . findLast ( ) ; else if ( hiInclusive ) return m . findNear ( hi , m . LT | m . EQ ) ; else return m . findNear ( hi , m . LT ) ; }
protected void processEventProperties ( Properties eventProps ) { int status ; Node node ; Line line ; $F7601 ( cmd , eventProps , COMMAND_FIELD ) int index = PropUtils . intFromProperties ( eventProps , INDEX_FIELD , ERROR_VALUE_INT ) ; if $F1238 ( cmd , NODE_OBJECT ) { int shape = PropUtils . intFromProperties ( eventProps , SHAPE_FIELD , ERROR_VALUE_INT ) ; if ( index == ERROR_VALUE_INT ) $F9465 ( Debug ) node = nodeList . get ( index ) ; if ( shape == NUM00 ) { $F7601 ( icon , eventProps , ICON_FIELD ) if ( DEBUG ) $F32925 ( Debug , icon ) } if ( shape == NODE_DELETE ) { if ( node != null ) { lineList . del ( node ) ; nodeList . del ( node ) ; } } else if ( shape == NODE_MOVE && node != null ) { setNodePositionFromEventProps ( node , eventProps ) ; lineList . move ( node ) ; node . setTime ( Double . parseDouble ( eventProps . getProperty ( TIME_FIELD , NUM00 ) ) ) ; } else { status = PropUtils . intFromProperties ( eventProps , STATUS_FIELD , NUM00 ) ; int menu = PropUtils . intFromProperties ( eventProps , MENU_FIELD , NUM00 ) ; $F7601 ( label , eventProps , LABEL_FIELD ) if ( label == null ) $F10616 ( label , eventProps , INDEX_FIELD ) $F7601 ( ip , eventProps , IP_FIELD ) boolean isLocalhost = _BOOL ; if ( ip != null && localhostIP != null ) { isLocalhost = localhostIP . equals ( ip ) ; $F45900 ( DEBUG , Debug , localhostIP ) } if ( DEBUG ) { $F151102 ( Debug , label ) } try { if ( shape != ERROR_VALUE_INT ) { node = nodeList . add ( label , index , shape , menu , status ) ; node . setLocalhost ( isLocalhost ) ; } } catch ( Exception e ) $F21338 ( Debug ) setNodePositionFromEventProps ( node , eventProps ) ; } } else if $F1238 ( cmd , NODE_OBJECT_STATUS ) { if ( index == ERROR_VALUE_INT ) $F9465 ( Debug ) node = nodeList . get ( index ) ; if ( node != null ) { status = PropUtils . intFromProperties ( eventProps , STATUS_FIELD , ERROR_VALUE_INT ) ; if ( status != ERROR_VALUE_INT ) { node . setStatus ( status ) ; } } } else if $F1238 ( cmd , LINK_OBJECT_STATUS ) { if ( index == ERROR_VALUE_INT ) $F9465 ( Debug ) line = lineList . get ( index ) ; if ( line != null ) { status = PropUtils . intFromProperties ( eventProps , STATUS_FIELD , ERROR_VALUE_INT ) ; if ( status != ERROR_VALUE_INT ) { line . setStatus ( status ) ; } } } else if $F1238 ( cmd , LINK_OBJECT ) { if ( index == ERROR_VALUE_INT ) $F9465 ( Debug ) line = lineList . get ( index ) ; int shape = PropUtils . intFromProperties ( eventProps , SHAPE_FIELD , ERROR_VALUE_INT ) ; if ( shape == NODE_DELETE ) { lineList . del ( index ) ; } else { status = PropUtils . intFromProperties ( eventProps , STATUS_FIELD , NUM00 ) ; int node1 = PropUtils . intFromProperties ( eventProps , LINK_NODE1_FIELD , ERROR_VALUE_INT ) ; int node2 = PropUtils . intFromProperties ( eventProps , LINK_NODE2_FIELD , ERROR_VALUE_INT ) ; if ( node1 == ERROR_VALUE_INT || node2 == ERROR_VALUE_INT ) $F9465 ( Debug ) $F22142 ( n1 , nodeList , node1 ) $F22142 ( n2 , nodeList , node2 ) if ( n1 != null && n2 != null ) { lineList . add ( String . valueOf ( index ) , index , shape , status , n1 , n2 ) ; } else { $F18537 ( DEBUG , Debug ) } } } else if $F22081 ( cmd , REFRESH , UPDATE ) $F845 else if $F1238 ( cmd , CLEAR ) { $F165012 ( nodeList ) $F165012 ( lineList ) } else { if ( DEBUG ) { Debug . output ( $F368 ( eventProps ) ) ; } } manageGraphics ( ) ; }
protected static void addIdRepoAMSDKPlugin ( SSOToken token , String orgName ) throws $F16995 { ServiceConfigManager scm = new ServiceConfigManager ( ServiceManager . REALM_SERVICE , token ) ; $F105641 ( sc , scm , orgName ) $F28017 ( attributes ) $F19850 ( values ) $F18793 ( values ) $F545 ( attributes , values ) $F266988 ( values ) values . add ( DNMapper . realmNameToAMSDKName ( DNMapper . orgNameToDN ( orgName ) ) ) ; $F545 ( attributes , values ) sc . addSubConfig ( NUM00 , NUM00 , NUM00 , attributes ) ; }
$F202347 ( mRootDirectory , VolleyLog , files , file , fis , entry , CacheHeader , putEntry )
public static String onKeyPress ( String key ) { pin = pin . concat ( key ) ; return pin ; }
public boolean isHierachic ( String string ) { $F12747 ( index , string , m_Seperator ) if ( ( index == $F45793 ( string ) ) || ( index == - NUM00 ) ) { return _BOOL ; } return _BOOL ; }
public Shape paintLayer ( Graphics g , int offs0 , int offs1 , Shape bounds , JTextComponent c , View view ) { Color base = getColor ( ) ; Color color = base != null ? new Color ( base . getRed ( ) , base . getGreen ( ) , base . getBlue ( ) , NUM00 ) : null ; if ( color == null ) { g . setColor ( c . getSelectionColor ( ) ) ; } else $F158293 ( g , color ) if ( offs0 == view . getStartOffset ( ) && offs1 == view . getEndOffset ( ) ) { Rectangle alloc ; if ( bounds instanceof Rectangle ) { alloc = ( Rectangle ) bounds ; } else { alloc = bounds . getBounds ( ) ; } g . fillRect ( alloc . x , alloc . y , c . getWidth ( ) - alloc . x , alloc . height ) ; } else { try { Shape shape = view . modelToView ( offs0 , Position . Bias . Forward , offs1 , Position . Bias . Backward , bounds ) ; Rectangle r = ( shape instanceof Rectangle ) ? ( Rectangle ) shape : shape . getBounds ( ) ; g . fillRect ( NUM00 , r . y , c . getWidth ( ) , r . height ) ; return r ; } $F258112 } $F1274 }
synchronized void receive ( char oneChar ) throws IOException { $F31068 ( buffer ) $F187220 ( lastReader ) $F72351 ( lastWriter , Thread ) try { while ( buffer != null && out == in ) { notifyAll ( ) ; wait ( NUM00 ) ; $F187220 ( lastReader ) } } catch ( InterruptedException e ) { throw new InterruptedIOException $F72 ; } $F31068 ( buffer ) $F166242 ( in ) buffer [ in ++ ] = oneChar ; $F15430 ( in , buffer ) }
public static final ByteBuffer bufferToByteBuffer ( final $F96 buffer , final ByteOrder order ) { $F17615 ( retBuff , ByteBuffer , buffer ) retBuff . order ( order ) ; return retBuff ; }
$F49924 ( out , b , buffer )
private URI processLocalFiles ( URI uri ) { $F1822 ( uriStr , uri ) if $F3106 ( uriStr ) { uriStr = NUM00 + System . getProperty ( NUM00 ) + NUM00 + uriStr . substring ( NUM00 ) ; URL url ; try { $F105456 ( url , uriStr ) return url . toURI ( ) ; } $F1516 ( e ) } return uri ; }
private String generateScreenOnOrOffUtternace ( int feedbackIndex ) { int resourceId = ( feedbackIndex == INDEX_SCREEN_ON ) ? R . string . template_screen_on : R . string . template_screen_off ; $F19101 ( template , mContext , resourceId ) int currentRingerVolume = mAudioManager . getStreamVolume ( AudioManager . STREAM_RING ) ; int maxRingerVolume = mAudioManager . getStreamMaxVolume ( AudioManager . STREAM_RING ) ; int volumePercent = ( NUM00 / maxRingerVolume ) * currentRingerVolume ; int adjustment = volumePercent % NUM00 ; if ( adjustment < NUM00 ) { volumePercent -= adjustment ; } else if ( adjustment > NUM00 ) { volumePercent += ( NUM00 - adjustment ) ; } $F27028 ( String , template , volumePercent ) }
$F30789 ( d , imageView , getImageView , viewWidth , viewHeight , drawableWidth , drawableHeight , mBaseMatrix , widthScale , heightScale , mScaleType , ScaleType , scale , Math , mTempSrc , mTempDst , FIT_CENTER , ScaleToFit , FIT_START , FIT_END , FIT_XY , resetMatrix )
public void reset $F72 { count = NUM00 ; $F3224 ( startTime , System ) }
public int readInt $F72 throws IOException { length += NUM00 ; $F7468 ( k1 , in ) if ( k1 < NUM00 ) $F1082 int k2 = in . read ( ) < < NUM00 ; int k3 = in . read ( ) < < NUM00 ; return k1 + k2 + k3 + $F82091 ( in ) ; }
$F163365 ( doc , elementList , nameNode , child , childData , load , _BOOL , assertEquals )
public Enumeration listOptions $F72 { $F153203 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F1007 ( newVector ) }
public void testAddIssuerLjavax_security_auth_x500_X500Principal02 $F72 { $F40920 ( selector ) $F221540 ( iss1 ) $F221540 ( iss2 ) CRL crl1 = new TestCRL ( iss1 ) ; CRL crl2 = new TestCRL ( iss2 ) ; selector . addIssuer ( iss1 ) ; $F97594 ( assertTrue , selector , crl1 ) $F97594 ( assertFalse , selector , crl2 ) selector . addIssuer ( iss2 ) ; $F97594 ( assertTrue , selector , crl2 ) }
public void addTransformation ( TagTransformation tagTransformation ) { if ( tagTransformation != null ) { mappings . put ( tagTransformation . getSourceTag ( ) , tagTransformation ) ; } }
$F1 public boolean isFileModified ( long fileTimeStamp , long endOffset ) { boolean isFileModified = _BOOL ; if ( getLastModifiedTime ( ) > fileTimeStamp || getSize ( ) > endOffset ) { isFileModified = _BOOL ; } return isFileModified ; }
public String nextString $F72 { nextClean ( NUM00 ) ; $F83 ( sb ) for ( $F589 ) { char c = next ( ) ; switch ( c ) { $F3366 $F1262 $F1262 throw syntaxError ( NUM00 ) ; $F1262 c = next ( ) ; switch ( c ) { $F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F1262 sb . append ( ( char ) Integer . parseInt ( next ( NUM00 ) , NUM00 ) ) ; $F597 $F38142 ( sb , c ) } $F597 $F1262 $F92 ( sb ) $F1267 if ( c < NUM00 ) { throw syntaxError ( NUM00 + $F1047 ( c ) + NUM00 ) ; } sb . append ( c ) ; $F597 } } }
private void readLyrics3Tag ( File file , RandomAccessFile newFile , int loadOptions ) throws IOException $F845
public double evaluate ( VectorInstance x , VectorInstance y ) throws Exception { double dotProd = x . dotProduct ( y ) ; return Math . pow ( m_gamma * dotProd + m_coef0 , m_degree ) ; }
private boolean isDbConfigurationPresent $F72 { return StringUtils . isNotBlank ( selectColumn ) && StringUtils . isNotBlank ( tableName ) ; }
public boolean isIncompleteNumericalRun ( String pin ) { $F22998 ( len , pin ) int consecutive = NUM00 ; $F12685 ( last , pin ) for ( $F119 ( i , len ) ) { $F1090 ( c , pin , i ) if ( last == c ) { consecutive ++ ; } else { consecutive = NUM00 ; } last = c ; $F324226 ( consecutive , _BOOL ) } return _BOOL ; }
private static void generateJavaScriptLogAlertCloseWindow ( Writer writer , String message ) throws IOException { $F64181 ( writer , message ) $F3410 ( writer ) $F3410 ( writer ) }
$F52843 ( packed , map , i , j , count , value )
public Tree $F4 extractBestMaxRuleParse1 ( int start , int end , int state , $F3803 sentence ) { int cState = maxcChild [ start ] [ end ] [ state ] ; if ( cState == - NUM00 ) $F33971 ( extractBestMaxRuleParse2 , start , end , state , sentence ) else { $F5081 child = new ArrayList < Tree $F4 > $F72 ; $F108108 ( child , extractBestMaxRuleParse2 , start , end , cState , sentence ) String stateStr = $F595865 ( tagNumberer , state ) ; $F212530 ( stateStr ) int intermediateNode = grammar . getUnaryIntermediate ( ( short ) state , ( short ) cState ) ; if ( intermediateNode == NUM00 ) $F845 if ( intermediateNode > NUM00 ) { $F5081 restoredChild = new ArrayList < Tree $F4 > $F72 ; String stateStr2 = $F595865 ( tagNumberer , intermediateNode ) ; $F212530 ( stateStr2 ) restoredChild . add ( $F605438 ( stateStr2 , child ) ) ; return $F605438 ( stateStr , restoredChild ) ; } return $F605438 ( stateStr , child ) ; } }
protected void parseDOMAttributes ( Element element ) throws SAML2Exception { super . parseDOMAttributes ( element ) ; }
private static double distance $F12359 ( x1 , y1 , x2 , y2 ) { return $F127640 ( Math , y2 , y1 , x2 , x1 ) ; }
protected void drawCenterText ( Canvas c ) { SpannableString centerText = mChart . getCenterText ( ) ; if ( mChart . isDrawCenterTextEnabled ( ) && centerText != null ) { PointF center = mChart . getCenterCircleBox ( ) ; float innerRadius = mChart . isDrawHoleEnabled ( ) && mChart . isHoleTransparent ( ) ? mChart . getRadius ( ) * ( mChart . getHoleRadius ( ) / NUM00 ) : mChart . getRadius ( ) ; RectF holeRect = mRectBuffer [ NUM00 ] ; holeRect . left = center . x - innerRadius ; holeRect . top = center . y - innerRadius ; holeRect . right = center . x + innerRadius ; holeRect . bottom = center . y + innerRadius ; RectF boundingRect = mRectBuffer [ NUM00 ] ; boundingRect . set ( holeRect ) ; float radiusPercent = mChart . getCenterTextRadiusPercent ( ) ; if ( radiusPercent > NUM00 ) { boundingRect . inset ( ( boundingRect . width ( ) - boundingRect . width ( ) * radiusPercent ) / NUM00 , ( boundingRect . height ( ) - boundingRect . height ( ) * radiusPercent ) / NUM00 ) ; } if ( ! centerText . equals ( mCenterTextLastValue ) || ! boundingRect . equals ( mCenterTextLastBounds ) ) { mCenterTextLastBounds . set ( boundingRect ) ; mCenterTextLastValue = centerText ; float width = mCenterTextLastBounds . width ( ) ; mCenterTextLayout = new StaticLayout ( centerText , NUM00 , centerText . length ( ) , mCenterTextPaint , ( int ) Math . max ( Math . ceil ( width ) , NUM00 ) , Layout . Alignment . ALIGN_CENTER , NUM00 , NUM00 , _BOOL ) ; } float layoutHeight = mCenterTextLayout . getHeight ( ) ; $F72208 ( c ) c . translate ( boundingRect . left , boundingRect . top + ( boundingRect . height ( ) - layoutHeight ) / NUM00 ) ; mCenterTextLayout . draw ( c ) ; $F72213 ( c ) } }
public void start ( int conditions ) throws IOException { print ( NUM00 , new String [ ] { Integer . toBinaryString ( conditions ) } ) ; $F1206 ( printer ) }
$F167254 ( value , places , padCharacter , sb )
private static ResultCode registerErrorResultCode ( final int intValue , final LocalizableMessage name , final Enum resultCodeEnum ) { final ResultCode t = new ResultCode ( intValue , name , _BOOL , resultCodeEnum ) ; ELEMENTS . put ( intValue , t ) ; return t ; }
public void addAll ( ExceptionSet other ) { exceptionSet . or ( other . exceptionSet ) ; explicitSet . or ( other . explicitSet ) ; size = countBits ( exceptionSet ) ; commonSupertype = null ; }
@ HLEUnimplemented $F79740 public int sceUsbCamStartVideo $F72 { if $F931 ( setupVideo ) { log . warn ( String . format ( NUM00 ) ) ; } $F1082 }
protected ResourceLoaderLicenseLocator ( final Charset charset , final String ... licenseFiles ) { $F37435 ( licenseFiles ) $F896 ( charset ) this . licenseFiles = $F8 ( Arrays , licenseFiles ) ; this . charset = charset ; }
private static boolean isIntendedException ( Exception e , $F6969 clazz ) { final String message = e . getMessage ( ) ; return ( ! TextUtils . isEmpty ( message ) && message . startsWith ( clazz . getName ( ) ) ) ; }
$F14125 public ProjectTypeRegistry ( Set < ProjectTypeDef > types ) { $F23429 ( projectTypes ) $F23429 ( validatedData ) validate ( types ) ; for ( ProjectTypeDef type : validatedData . values ( ) ) { try { init ( type ) ; } catch ( ProjectTypeConstraintException e ) $F27824 ( LOG , e ) } }
static public void addNotificationListener ( JMXConnector jmxConnector , $F6969 mbeanInterface , String mbeanName , NotificationListener notificationListener , boolean ignored ) throws InstanceNotFoundException , Exception { MBeanServerConnection mbsc = jmxConnector . getMBeanServerConnection ( ) ; ObjectName $F98155 ( objectName , generateMBeanObjectName , mbeanInterface , mbeanName ) ; mbsc . addNotificationListener ( objectName , notificationListener , null , null ) ; }
public void testCase16 $F72 { $F7829 $F161331 int aSign = - NUM00 ; int bSign = - NUM00 ; byte $F3018 = { NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F10683 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F10686 ( assertEquals , result ) }
private void consume $F72 { consumer . subscribe ( topics ) ; while $F27748 ( running ) { try { ConsumerRecords records = consumer . poll ( pollIntervalMs ) ; $F4322 ( records ) Iterator < ConsumerRecord $F2538 > iterator = records . iterator ( ) ; $F7685 ( iterator , sendMessage ) } catch ( Exception ex ) { String error = NUM00 ; logger . error ( error , ex ) ; bus . send ( ConfigConstants . CONSUMER_ERROR_TOPIC , getErrorString ( error , ex . getMessage ( ) ) ) ; } } }
private $F96 readRawBytesSlowPath ( final int size ) throws IOException { if ( size <= NUM00 ) { if ( size == NUM00 ) { return Internal . EMPTY_BYTE_ARRAY ; } else { throw InvalidProtocolBufferException . negativeSize ( ) ; } } if ( totalBytesRetired + bufferPos + size > currentLimit ) { skipRawBytes ( currentLimit - totalBytesRetired - bufferPos ) ; throw InvalidProtocolBufferException . truncatedMessage ( ) ; } if ( size < BUFFER_SIZE ) { $F4727 ( bytes , size ) int pos = bufferSize - bufferPos ; $F21535 ( System , buffer , bufferPos , bytes , pos ) bufferPos = bufferSize ; ensureAvailable ( size - pos ) ; System . arraycopy ( buffer , NUM00 , bytes , pos , size - pos ) ; bufferPos = size - pos ; return bytes ; } else { final int originalBufferPos = bufferPos ; final int originalBufferSize = bufferSize ; totalBytesRetired += bufferSize ; bufferPos = NUM00 ; bufferSize = NUM00 ; int sizeLeft = size - ( originalBufferSize - originalBufferPos ) ; final $F3510 $F96301 ( chunks ) ; while ( sizeLeft > NUM00 ) { final $F96 chunk = new byte [ Math . min ( sizeLeft , BUFFER_SIZE ) ] ; int pos = NUM00 ; while ( pos < chunk . length ) { final int n = ( input == null ) ? - NUM00 : input . read ( chunk , pos , chunk . length - pos ) ; if ( n == - NUM00 ) { throw InvalidProtocolBufferException . truncatedMessage ( ) ; } totalBytesRetired += n ; pos += n ; } sizeLeft -= chunk . length ; chunks . add ( chunk ) ; } $F4727 ( bytes , size ) int pos = originalBufferSize - originalBufferPos ; $F21535 ( System , buffer , originalBufferPos , bytes , pos ) for ( final $F96 chunk : chunks ) $F181805 ( System , chunk , bytes , pos ) return bytes ; } }
private void deleteAttrs ( SvcReg reg , EntryRep entry , boolean checkDups ) { EntryClass eclass = entry . eclass ; deleteInstance ( eclass ) ; $F59796 ( fields , entry ) if $F9634 ( fields ) { ArrayList regs = serviceByEmptyAttr . get ( eclass ) ; if ( regs == null || ( checkDups && hasEmptyAttr ( reg , eclass ) ) ) $F665 $F12747 ( idx , regs , reg ) if ( idx >= NUM00 ) { regs . remove ( idx ) ; if $F2979 ( regs ) serviceByEmptyAttr . remove ( eclass ) ; } $F665 } for ( $F45516 ( fldidx , fields ) ) { eclass = getDefiningClass ( eclass , fldidx ) ; HashMap [ ] attrMaps = serviceByAttr . get ( eclass ) ; if ( attrMaps == null || attrMaps [ fldidx ] == null || ( checkDups && hasAttr ( reg , eclass , fldidx , fields [ fldidx ] ) ) ) $F598 HashMap map = attrMaps [ fldidx ] ; Object value = fields [ fldidx ] ; $F73534 ( regs , map , value ) $F45557 ( regs ) $F12747 ( idx , regs , reg ) $F166042 ( idx ) regs . remove ( idx ) ; if $F5973 ( regs ) $F598 map . remove ( value ) ; if $F5973 ( map ) $F598 attrMaps [ fldidx ] = null ; if ( allNull ( attrMaps ) ) serviceByAttr . remove ( eclass ) ; } }
public void testDSAProvider $F72 throws Exception { $F5348 ( params , AlgorithmParameters ) assertEquals ( NUM00 , NUM00 , params . getAlgorithm ( ) ) ; BigInteger p = BigInteger . ONE ; BigInteger q = BigInteger . TEN ; BigInteger g = BigInteger . ZERO ; params . init ( new DSAParameterSpec ( p , q , g ) ) ; $F46943 ( enc , params ) assertNotNull ( enc ) ; assertNotNull ( params . getEncoded ( NUM00 ) ) ; DSAParameterSpec spec = params . getParameterSpec ( DSAParameterSpec . class ) ; assertEquals ( NUM00 , p , spec . getP ( ) ) ; assertEquals ( NUM00 , q , spec . getQ ( ) ) ; assertEquals ( NUM00 , g , spec . getG ( ) ) ; $F6161 ( params , AlgorithmParameters ) params . init ( enc ) ; assertTrue ( NUM00 , $F75165 ( Arrays , enc , params ) ) ; $F6161 ( params , AlgorithmParameters ) params . init ( enc , NUM00 ) ; assertTrue ( NUM00 , $F75165 ( Arrays , enc , params ) ) ; $F6161 ( params , AlgorithmParameters ) try { params . init ( enc , NUM00 ) ; fail ( NUM00 ) ; } $F29052 }
public static boolean isClassLiteralPossible ( ClassNode classNode ) { return $F57120 ( Modifier , classNode ) ; }
private Properties loadLogFile ( License license , boolean create ) { $F2697 ( log ) File logFile = getLogFile ( license ) ; try { if ( create && logFile . createNewFile ( ) ) { logger . fine ( $F4929 ( logFile ) ) ; } final InputStream in = new FileInputStream ( logFile ) ; try $F46567 ( log , in ) $F3229 ( in ) } catch ( FileNotFoundException ex ) { if ( create ) { logger . log ( Level . SEVERE , $F4929 ( logFile ) , ex ) ; } else $F22807 ( logger ) } catch ( IOException ex ) { logger . log ( Level . WARNING , $F4929 ( logFile ) , ex ) ; } return log ; }
public HTMLStripCharFilterFactory $F3501 ( args ) { super ( args ) ; escapedTags = getSet ( args , NUM00 ) ; if $F5973 ( args ) $F18931 ( args ) }
public static int update ( long id , V v ) { String passwd = ( String ) v . value ( NUM00 ) ; if $F20899 ( X , passwd ) { passwd = encrypt ( passwd ) ; v . set ( NUM00 , passwd , _BOOL ) ; } else { $F36382 ( v ) } return Helper . update ( id , v . set ( $F132682 ( System ) ) , User . class ) ; }
public double likelihood $F28786 ( doc , tag ) { double likelihood = NUM00 ; if ( ntw . rowSum ( tag ) == NUM00 ) { return likelihood ; } $F57783 nwd = new $F57783 $F72 ; for ( String w : doc ) { nwd . inc ( w , NUM00 ) ; } double norm = NUM00 ; $F2536 prwd = new Hashtable $F2535 $F72 ; for ( Entry $F12294 e : nwd ) { double prw = prw ( e . getKey ( ) ) ; norm += prw ; $F15251 ( prwd , e , prw ) } for ( Entry $F2535 e : prwd . entrySet ( ) ) { double prw = e . getValue ( ) / norm ; likelihood += ptr ( tag , e . getKey ( ) ) * prw * ( NUM00 - pcm ( ) ) ; } likelihood += ptr ( tag , NOISE ) * pcm ( ) ; return likelihood ; }
$F1 public String toString $F72 { $F280 ( text ) text . append ( NUM00 + attributesToString ( ) + NUM00 ) ; text . append ( NUM00 + getInstNums ( ) ) ; $F92 ( text ) }
public boolean isSafeMode $F72 { return this . safeMode ; }
public void test_getPutByteArrayWithOffsetAndLength $F72 { final int size = NUM00 ; final IDataRecord buf = new FixedByteArrayBuffer ( size ) ; assertEquals ( $F19905 , buf . getByte ( NUM00 ) ) ; assertEquals ( $F19905 , buf . getByte ( size - NUM00 ) ) ; final int pos = NUM00 ; for ( $F119 ( i , LIMIT ) ) { final $F96 expected = new byte [ r . nextInt ( size - NUM00 ) ] ; final int off = ( expected . length / NUM00 == NUM00 ? NUM00 : r . nextInt ( expected . length / NUM00 ) ) ; final int len = ( expected . length == NUM00 ? NUM00 : r . nextInt ( expected . length - off ) ) ; r . nextBytes ( expected ) ; buf . put ( pos , expected , off , len ) ; assertEquals ( NUM00 , BytesUtil . compareBytesWithLenAndOffset ( off , len , expected , pos , len , buf . array ( ) ) ) ; $F221031 ( dstoff , r ) final $F96 actual = new byte [ expected . length + dstoff ] ; buf . get ( pos , actual , dstoff , expected . length ) ; assertEquals ( NUM00 , BytesUtil . compareBytesWithLenAndOffset ( off , len , expected , dstoff , len , actual ) ) ; } assertEquals ( $F19905 , buf . getByte ( NUM00 ) ) ; assertEquals ( $F19905 , buf . getByte ( pos + size - NUM00 ) ) ; }
public void addLastItem ( M model ) { $F28711 ( addItem , mDatas , model ) ; }
static boolean hasLocalizedMessages $F72 { return GUIMediator . isEnglishLocale ( ) || ! FIRST_MESSAGE . equals ( I18n . tr ( FIRST_MESSAGE ) ) ; }
public boolean textboxKeyTyped ( char p_146201_1_ , int p_146201_2_ ) { if ( ! field_146213_o ) return _BOOL ; else switch ( p_146201_1_ ) { $F3366 func_146202_e ( ) ; func_146199_i ( NUM00 ) ; return _BOOL ; $F3366 GuiScreen . setClipboardString ( func_146207_c ( ) ) ; return _BOOL ; $F3366 if ( field_146226_p ) func_146191_b ( GuiScreen . getClipboardString ( ) ) ; return _BOOL ; $F3366 GuiScreen . setClipboardString ( func_146207_c ( ) ) ; $F10954 ( field_146226_p , func_146191_b ) return _BOOL ; $F1267 switch ( p_146201_2_ ) { $F3366 if $F114759 ( GuiScreen ) { if ( field_146226_p ) func_146177_a ( - NUM00 ) ; } else if ( field_146226_p ) func_146175_b ( - NUM00 ) ; return _BOOL ; $F3366 if ( GuiScreen . isShiftKeyDown ( ) ) func_146199_i ( NUM00 ) ; else func_146196_d ( ) ; return _BOOL ; $F3366 if ( GuiScreen . isShiftKeyDown ( ) ) { if $F114759 ( GuiScreen ) func_146199_i ( func_146183_a ( - NUM00 , func_146186_n ( ) ) ) ; else func_146199_i ( func_146186_n ( ) - NUM00 ) ; } else if $F114759 ( GuiScreen ) func_146190_e ( func_146187_c ( - NUM00 ) ) ; else func_146182_d ( - NUM00 ) ; return _BOOL ; $F3366 if ( GuiScreen . isShiftKeyDown ( ) ) { if $F114759 ( GuiScreen ) func_146199_i ( func_146183_a ( NUM00 , func_146186_n ( ) ) ) ; else func_146199_i ( func_146186_n ( ) + NUM00 ) ; } else if $F114759 ( GuiScreen ) func_146190_e ( func_146187_c ( NUM00 ) ) ; else func_146182_d ( NUM00 ) ; return _BOOL ; $F3366 if ( GuiScreen . isShiftKeyDown ( ) ) $F43187 ( func_146199_i , field_146216_j ) else func_146202_e ( ) ; return _BOOL ; $F3366 if $F114759 ( GuiScreen ) { if ( field_146226_p ) func_146177_a ( NUM00 ) ; } else if ( field_146226_p ) func_146175_b ( NUM00 ) ; return _BOOL ; $F1267 if ( ChatAllowedCharacters . isAllowedCharacter ( p_146201_1_ ) ) { if ( field_146226_p ) func_146191_b ( Character . toString ( p_146201_1_ ) ) ; return _BOOL ; } else return _BOOL ; } } }
public static DockerImage fromImageName ( String imageName ) { imageName = prepare ( imageName ) ; $F35105 ( parts , imageName , SECTION_SEPARATOR ) switch ( parts . length ) { $F3366 return fromParts ( null , null , parts [ NUM00 ] ) ; $F3366 if ( isValidNamespace ( parts [ NUM00 ] ) ) { return fromParts ( null , parts [ NUM00 ] , parts [ NUM00 ] ) ; } else { return fromParts ( parts [ NUM00 ] , null , parts [ NUM00 ] ) ; } $F3366 return fromParts ( $F26406 ( parts ) ) ; $F61916 ( imageName ) } }
public synchronized void listen ( final Set < NotificationChannel > channelNames ) $F21926 ( m_channels , channelNames )
public static void deleteDirectory ( File directory ) throws IOException { $F201570 ( directory ) $F201571 ( isSymlink , directory , cleanDirectory ) $F281715 ( directory , message ) }
private void displayNonVerbose ( ConsoleApplication app , String categoryName , String typeName , Tag tag , $F2689 propertyNames ) { if ( ! app . isScriptFriendly ( ) ) { displayPropertyOptionKey ( app ) ; $F21416 ( app ) $F21416 ( app ) } TableBuilder builder = new TableBuilder $F72 ; builder . appendHeading ( INFO_DSCFG_HEADING_COMPONENT_NAME . get ( ) ) ; builder . appendHeading ( INFO_DSCFG_HEADING_COMPONENT_TYPE . get ( ) ) ; builder . appendHeading ( INFO_DSCFG_HEADING_PROPERTY_NAME . get ( ) ) ; builder . appendHeading ( INFO_DSCFG_HEADING_PROPERTY_OPTIONS . get ( ) ) ; builder . appendHeading ( INFO_DSCFG_HEADING_PROPERTY_SYNTAX . get ( ) ) ; builder . addSortKey ( NUM00 ) ; builder . addSortKey ( NUM00 ) ; builder . addSortKey ( NUM00 ) ; for ( $F3465 ( category , categoryMap ) ) { if $F10335 ( categoryName , category ) $F1448 Map < String , AbstractManagedObjectDefinition $F5162 > subTypes = categoryMap . get ( category ) ; for ( $F3465 ( type , subTypes ) ) { if $F10335 ( typeName , type ) $F1448 AbstractManagedObjectDefinition $F5162 mod = subTypes . get ( type ) ; if ( cannotDisplay ( app , mod , tag ) ) $F1448 Set < PropertyDefinition $F1011 > pds = getPropertyDefinitions ( mod ) ; for ( PropertyDefinition $F1011 pd : pds ) { if ( cannotDisplay ( app , pd , propertyNames ) ) $F1448 builder . startRow ( ) ; builder . appendCell ( category ) ; builder . appendCell ( type ) ; builder . appendCell ( pd . getName ( ) ) ; builder . appendCell ( getPropertyOptionSummary ( pd ) ) ; PropertyDefinitionUsageBuilder v = new PropertyDefinitionUsageBuilder ( _BOOL ) ; builder . appendCell ( v . getUsage ( pd ) ) ; } } } TablePrinter printer ; if ( app . isScriptFriendly ( ) ) { printer = createScriptFriendlyTablePrinter ( app . getOutputStream ( ) ) ; } else { printer = new TextTablePrinter ( app . getOutputStream ( ) ) ; } builder . print ( printer ) ; }
public $F27145 deleteEmptyFolders $F72 { $F17809 ( folderIds ) SQLiteDatabase db = mOpenHelper . getWritableDatabase ( ) ; $F41822 ( db ) try { String selection = LauncherSettings . Favorites . ITEM_TYPE + NUM00 + LauncherSettings . Favorites . ITEM_TYPE_FOLDER + NUM00 + LauncherSettings . Favorites . _ID + NUM00 + LauncherSettings . Favorites . CONTAINER + NUM00 + TABLE_FAVORITES + NUM00 ; Cursor c = db . query ( TABLE_FAVORITES , new String [ ] { LauncherSettings . Favorites . _ID } , selection , null , null , null , null ) ; while $F12260 ( c ) { folderIds . add ( c . getLong ( NUM00 ) ) ; } $F59 ( c ) if $F3817 ( folderIds ) { db . delete ( TABLE_FAVORITES , Utilities . createDbSelectionQuery ( LauncherSettings . Favorites . _ID , folderIds ) , null ) ; } $F41894 ( db ) } catch ( SQLException ex ) { Log . e ( $F65849 ( TAG , ex ) ) ; $F725 ( folderIds ) } finally { $F41895 ( db ) } return folderIds ; }
$F1 default $F70219 sumInt ( final ToIntFunction $F11632 fn ) $F257945 ( CompletableFuture , getExec )
public void testWrite3 $F72 throws Exception { $F1191 ( data ) $F1196 ( tos ) CipherOutputStream cos = new CipherOutputStream $F1200 ( tos ) ; for ( $F1139 ( i , data ) ) { cos . write ( data , i , NUM00 ) ; } $F1206 ( cos ) $F1208 ( result , tos ) $F1211 ( Arrays , result , data , fail ) }
private Document parse ( final String data ) { $F13264 ( docBuilder , data ) Document document = null ; try { String buf = BEGINPART + data + ENDPART ; InputSource inputSource = $F265821 ( buf ) ; document = docBuilder . parse ( inputSource ) ; } $F1516 ( e ) return document ; }
public boolean isProductionJournal ( $F2689 productionCopies , Volume volume ) { for ( String productionCopy : productionCopies ) { if ( productionCopy . equalsIgnoreCase ( volume . getRpCopyName ( ) ) ) { return _BOOL ; } } return _BOOL ; }
private void testPoundSymbolInColumnName $F72 throws SQLException { deleteDb ( NUM00 ) ; Connection conn = getConnection ( NUM00 ) ; $F11282 ( stat , conn ) $F131050 ( stat ) $F131050 ( stat ) assertResult ( NUM00 , stat , NUM00 ) ; $F59 ( conn ) }
public static String decode ( final String escaped ) throws URIException { try { final $F96 rawdata = URLCodec . decodeUrl ( EncodingUtil . getAsciiBytes ( escaped ) ) ; return EncodingUtil . getString ( rawdata , URI . getDefaultProtocolCharset ( ) ) ; } catch ( final DecoderException e ) { throw new URIException $F1783 ( e ) ; } }
void waitBeforeNextPoll ( int pollingInterval ) throws InterruptedException { synchronized ( this ) { wait ( pollingInterval ) ; } $F24126 ( pollOutstanding ) $F980 ( log ) for ( $F6268 ( i ) ) { synchronized ( this ) { wait ( pollingInterval / NUM00 ) ; } $F980 ( log ) $F24126 ( pollOutstanding ) } }
private void shiftMappingVectorTokensLeft $F14337 ( lineNum , startCol , shift ) { boolean lastWasBeginTLAToken = _BOOL ; int lastBeginTLATokCol = - NUM00 ; Vector line = ( Vector ) mappingVector . elementAt ( lineNum ) ; for ( $F2277 ( i , line ) ) { MappingObject obj = ( MappingObject ) line . elementAt ( i ) ; if ( obj . getType ( ) == MappingObject . BEGIN_TLATOKEN ) { MappingObject . BeginTLAToken tobj = ( MappingObject . BeginTLAToken ) obj ; int col = tobj . getColumn ( ) ; if ( col >= startCol ) { tobj . setColumn ( col - shift ) ; } lastWasBeginTLAToken = _BOOL ; lastBeginTLATokCol = tobj . getColumn ( ) ; } else { if ( obj . getType ( ) == MappingObject . END_TLATOKEN ) { MappingObject . EndTLAToken tobj = ( MappingObject . EndTLAToken ) obj ; int col = tobj . getColumn ( ) ; if ( col >= startCol ) { tobj . setColumn ( col - shift ) ; } if ( lastWasBeginTLAToken && tobj . getColumn ( ) <= lastBeginTLATokCol ) { PcalDebug . ReportBug ( NUM00 ) ; } } else if ( obj . getType ( ) == MappingObject . SOURCE_TOKEN ) { MappingObject . SourceToken tobj = ( MappingObject . SourceToken ) obj ; int col = tobj . getBeginColumn ( ) ; if ( col >= startCol ) { tobj . setBeginColumn ( col - shift ) ; } col = tobj . getEndColumn ( ) ; if ( col >= startCol ) { tobj . setEndColumn ( col - shift ) ; } lastWasBeginTLAToken = _BOOL ; } } } }
protected Dimension computeLengths ( String annoText ) { $F806 lines = Util . splitLines ( annoText ) ; int lineLength = NUM00 ; for ( String line : lines ) { if $F62924 ( line , lineLength ) $F3935 ( lineLength , line ) } return new Dimension ( lineLength + NUM00 , lines . length + NUM00 ) ; }
public static void writeImageMap ( PrintWriter writer , String name , ChartRenderingInfo info , ToolTipTagFragmentGenerator toolTipTagFragmentGenerator , URLTagFragmentGenerator urlTagFragmentGenerator ) throws IOException { writer . println ( ImageMapUtilities . getImageMap ( name , info , toolTipTagFragmentGenerator , urlTagFragmentGenerator ) ) ; }
ImportNoteBuilder addMessage ( ImportNoteMessage . Type type , String message ) { if $F48189 ( Strings , message ) { messages . add ( new ImportNoteMessage ( type , message ) ) ; } return this ; }
public String toXMLString ( boolean includeNS , boolean declareNS ) throws FSMsgException $F19580 ( toXMLString , includeNS , declareNS , _BOOL )
public static $F3803 asStringList ( Collection $F4222 objects ) { $F24645 ( list ) for ( Object object : objects ) { $F269561 ( list , String , object ) } return list ; }
public < E extends T > E min ( Iterable $F11685 iterable ) { $F11686 iterator = iterable . iterator ( ) ; $F378645 ( minSoFar , iterator ) while $F2921 ( iterator ) { minSoFar = $F11626 ( min , minSoFar , iterator ) ; } return minSoFar ; }
public synchronized int read $F1313 ( off , len ) throws IOException { if ( len <= NUM00 ) $F1082 int moreSpace ; synchronized ( lock ) { if ( pos >= present ) pos = present = NUM00 ; else if ( pos >= waterMark ) { System . arraycopy ( buffer , pos , buffer , NUM00 , present - pos ) ; present -= pos ; pos = NUM00 ; } int freeSpace = buffer . length - present ; moreSpace = Math . max ( freeSpace - requested , NUM00 ) ; } if ( moreSpace > NUM00 ) manager . sendRequest ( info , moreSpace ) ; synchronized ( lock ) { requested += moreSpace ; while ( ( pos >= present ) && ! disconnected ) { $F29028 ( lock ) } if ( disconnected && pos >= present ) $F150 int available = present - pos ; if ( len < available ) { System . arraycopy ( buffer , pos , b , off , len ) ; pos += len ; return len ; } else { System . arraycopy ( buffer , pos , b , off , available ) ; pos = present = NUM00 ; return available ; } } }
public final void put ( String key , int value ) { if $F11078 ( m_firstFree , m_mapSize ) { m_mapSize += m_blocksize ; $F140073 ( m_mapSize ) $F10236 ( System , m_map , newMap , m_firstFree ) m_map = newMap ; int newValues [ ] = new int [ m_mapSize ] ; $F10236 ( System , m_values , newValues , m_firstFree ) m_values = newValues ; } m_map [ m_firstFree ] = key ; m_values [ m_firstFree ] = value ; m_firstFree ++ ; }
public static List $F13970 consolidateItemStacks ( List $F13970 inputStacks ) { List $F13970 outputStacks = new ArrayList $F13970 $F72 ; for ( ItemStack sourceIS : inputStacks ) { boolean bFound = _BOOL ; for ( ItemStack destIS : outputStacks ) { if ( destIS != null && sourceIS != null && itemStackIngredientsMatch ( destIS , sourceIS ) ) { bFound = _BOOL ; destIS . stackSize += sourceIS . stackSize ; } } if ( ! bFound ) outputStacks . add ( sourceIS . copy ( ) ) ; } return outputStacks ; }
public static int howManyDaysOld ( long time ) { return ( int ) ( $F32707 ( System , time ) / DateUtils . DAY_IN_MILLIS ) ; }
protected Character isWFXMLChar ( String chardata ) { Character refInvalidChar ; if ( chardata == null || $F1277 ( chardata ) ) $F1337 $F7782 ( dataarray , chardata ) int datalength = dataarray . length ; if ( fIsXMLVersion11 ) { int i = NUM00 ; while ( i < datalength ) { if ( XML11Char . isXML11Invalid ( dataarray [ i ++ ] ) ) { char ch = dataarray [ i - NUM00 ] ; $F121844 ( XMLChar , ch , i , datalength , ch2 , dataarray ) refInvalidChar = new Character ( ch ) ; return refInvalidChar ; } } } else { int i = NUM00 ; while ( i < datalength ) { if ( XMLChar . isInvalid ( dataarray [ i ++ ] ) ) { char ch = dataarray [ i - NUM00 ] ; $F121844 ( XMLChar , ch , i , datalength , ch2 , dataarray ) refInvalidChar = new Character ( ch ) ; return refInvalidChar ; } } } $F1274 }
public void testZeroZero $F72 $F9149 ( numA , numB , res , aNumber , bNumber , result , assertTrue )
public final $F69963 doOnNext ( Consumer $F11632 onNext ) { $F10578 ( Objects , onNext ) return doOnSignal ( this , onNext , null , null , null , null , null , null , null ) ; }
public void test_fill$CIIC $F72 { char val = NUM00 ; char $F3234 = $F11574 ; $F47119 ( Arrays , d , val ) $F47123 ( i , assertTrue , d , val ) $F47124 ( i , d , assertTrue , val ) $F47128 ( Arrays , d , val , fail ) $F47133 ( Arrays , d , val , fail ) $F47138 ( Arrays , d , val , fail ) }
protected void addMissing ( Instances data , int level , boolean predictorMissing , boolean classMissing ) { $F115 ( classIndex , data ) $F24605 ( random ) for ( $F208679 ( i , data ) ) { $F338882 ( current , data , i ) for ( $F180066 ( j , data ) ) { if ( ( ( j == classIndex ) && classMissing ) || ( ( j != classIndex ) && predictorMissing ) ) { if ( $F23772 ( Math , random ) % NUM00 < level ) current . setMissing ( j ) ; } } } }
public $F9883 void insertInBatches ( $F5675 records , int partitionSize , DbClient dbClient , String type ) { $F98026 volume_partitions = Lists . partition ( records , partitionSize ) ; for ( $F5675 partition : volume_partitions ) { try { dbClient . createObject ( partition ) ; _log . info ( $F2580 ( partition , type ) ) ; } catch ( DatabaseException e ) $F73607 ( _log , type , e ) } }
public void modify ( SSOToken token , String objName , ModificationItem [ ] mods ) throws $F16995 { if ( $F29136 ( objName ) || ( mods == null ) || $F9634 ( mods ) ) $F11813 mRWLock . readRequest ( ) ; try { if ( ! root . isExists ( mRootDir , objName ) ) { String errmsg = NUM00 + objName + NUM00 ; mDebug . error ( errmsg ) ; throw new ServiceNotFoundException ( errmsg ) ; } } finally { mRWLock . readDone ( ) ; } mRWLock . writeRequest ( ) ; try { SMSFlatFileTreeNode node = root . getChild ( objName ) ; if ( node == null ) { String errmsg = NUM00 + objName + NUM00 ; mDebug . error ( errmsg ) ; throw new ServiceNotFoundException ( errmsg ) ; } String filepath = node . getAttributeFilename ( mRootDir ) ; if ( filepath == null ) { String errmsg = NUM00 + objName + NUM00 ; mDebug . error ( errmsg ) ; throw new ServiceNotFoundException ( errmsg ) ; } $F1705 ( filehandle , filepath ) if $F48790 ( filehandle ) { String errmsg = NUM00 + NUM00 + objName + NUM00 ; mDebug . error ( errmsg ) ; throw new ServiceNotFoundException ( errmsg ) ; } Properties props = loadProperties ( filehandle , objName ) ; boolean hasSunXmlKeyValue = props . getProperty ( SMSEntry . ATTR_XML_KEYVAL ) != null ; for ( $F1139 ( i , mods ) ) { modifyValues ( objName , mods [ i ] , props ) ; } saveProperties ( props , filehandle , objName ) ; String newSunXMLKeyValue = props . getProperty ( SMSEntry . ATTR_XML_KEYVAL ) ; if ( newSunXMLKeyValue != null ) { Set xmlKeyVals = toValSet ( SMSEntry . ATTR_XML_KEYVAL , newSunXMLKeyValue ) ; $F42258 ( hasSunXmlKeyValue , deleteSunXmlKeyValFiles , node ) createSunXmlKeyValFiles ( node , xmlKeyVals ) ; saveDirectoryTree ( ) ; } } finally { mRWLock . writeDone ( ) ; } }
public void removeOnTabSelectedListener ( OnTabSelectedListener listener ) $F275325 ( listener , mListeners )
public ConnectUriManager $F24643 ( connectUri ) throws THLException { this . uriList = connectUri ; if $F10471 ( connectUri ) { throw new THLException $F580 ; } }
private void addVolumesToParkingStorageGroup ( StorageSystem storage , String policyName , $F2689 volumeDeviceIds ) throws Exception { $F806 tokens = policyName . split ( Constants . SMIS_PLUS_REGEX ) ; CIMObjectPath groupPath = _helper . getVolumeGroupBasedOnSLO ( storage , storage , tokens [ NUM00 ] , tokens [ NUM00 ] , tokens [ NUM00 ] ) ; if ( groupPath == null ) { groupPath = _helper . createVolumeGroupBasedOnSLO ( storage , storage , tokens [ NUM00 ] , tokens [ NUM00 ] , tokens [ NUM00 ] ) ; } $F50603 inArgs = _helper . getAddVolumesToMaskingGroupInputArguments ( storage , groupPath , volumeDeviceIds ) ; $F50610 ( outArgs ) SmisJob addVolumesToSGJob = new SmisSynchSubTaskJob ( null , storage . getId ( ) , SmisConstants . ADD_MEMBERS ) ; _helper . invokeMethodSynchronously ( storage , _cimPath . getControllerConfigSvcPath ( storage ) , NUM00 , inArgs , outArgs , addVolumesToSGJob ) ; }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
$F37331 ( input , encoding , Charsets )
public boolean exportPkcs8 $F72 $F28110 ( jrbPkcs8 )
$F29422 ( encodedPublicKey , decodedKey , Base64 , keyFactory , KeyFactory , KEY_FACTORY_ALGORITHM , e , Log , TAG )
public NumberTick ( Number number , String label , TextAnchor textAnchor , TextAnchor rotationAnchor , double angle ) { super ( number . doubleValue ( ) , label , textAnchor , rotationAnchor , angle ) ; this . number = number ; }
private boolean isStoppable $F72 { return ( isRunning ( ) && getCache ( ) != null ) ; }
private void log ( String message , String level , String levelColor , PrintStream ps ) { $F83 ( builder ) if $F1264 ( level ) $F19976 ( builder , getPrefix , level , levelColor ) builder . append ( message ) ; $F1822 ( ts , builder ) ps . println ( ts ) ; for ( LogHandler hand : handlers ) hand . onLog ( level , message , ts , this ) ; }
public void addGossipMember ( GossipMember member ) $F207 ( gossipMembers , member )
public static boolean isPublic ( int mod ) { return Modifier . isPublic ( mod ) ; }
$F29422 ( encodedPublicKey , decodedKey , Base64 , keyFactory , KeyFactory , KEY_FACTORY_ALGORITHM , e , Log , TAG )
public static $F529 createUserPrefMap ( GenericValue rec ) throws GeneralException { return addPrefToMap ( rec , $F67652 ) ; }
$F49286 ( value , absMin , absMax , absValue , Math )
public JSONBuffer appendString ( Object cont ) { if ( stack . empty ( ) || stack . peek ( ) != Operand . ARRAY ) $F19954 addQuotedString ( cont ) ; addSeparator ( ) ; return this ; }
public static void deleteUserFromAuthenticationInfo ( AuthenticationInfo authenticationInfo ) throws ServerRuntimeException { String username = authenticationInfo . getUsername ( ) ; String passwordFileLocation = authenticationInfo . getPasswordFileLocation ( ) ; try { PropertiesConfiguration props = new PropertiesConfiguration ( passwordFileLocation ) ; $F19101 ( usernameInFile , props , username ) if ( usernameInFile == null ) { throw new ServerRuntimeException $F10797 ( MessageFormat , username ) ; } props . clearProperty ( username ) ; $F72208 ( props ) } catch ( org . apache . commons . configuration . ConfigurationException ce ) { logger . error ( NUM00 + authenticationInfo . getPasswordFileLocation ( ) , ce ) ; throw new ServerRuntimeException $F16296 ( ce ) ; } }
public void error ( Level level , String messageId , String $F19196 , Object session ) throws LogException { error ( level , messageId , data , session , null ) ; }
public synchronized void remove ( IAudioProcessor processor ) $F15777 ( processors , processor , buildFinalProcessor )
$F41720 ( value , absMin , absMax , absValue , Math )
private int endRecoverAnimation ( ViewHolder viewHolder , boolean override ) { $F10162 ( recoverAnimSize , mRecoverAnimations ) for ( $F18298 ( i , recoverAnimSize ) ) { final RecoverAnimation anim = mRecoverAnimations . get ( i ) ; if ( anim . mViewHolder == viewHolder ) { anim . mOverridden |= override ; if ( ! anim . mEnded ) $F65149 ( anim ) mRecoverAnimations . remove ( i ) ; return anim . mAnimationType ; } } $F1082 }
public final void addElement ( String value ) { if $F11078 ( m_firstFree , m_mapSize ) { m_mapSize += m_blocksize ; $F140073 ( m_mapSize ) $F10236 ( System , m_map , newMap , m_firstFree ) m_map = newMap ; } m_map [ m_firstFree ] = value ; m_firstFree ++ ; }
private boolean isMethodContained ( Method m , $F107547 wrapperMethods ) { $F20605 ( name , m ) $F272051 ( paramTypes , m ) $F135977 ( returnType , m ) for ( Method wm : wrapperMethods ) { if ( $F3174 ( name , wm ) && Arrays . equals ( paramTypes , wm . getParameterTypes ( ) ) && returnType == wm . getReturnType ( ) ) { return _BOOL ; } } return _BOOL ; }
public void deleteNode ( Node n ) { Assert . check ( nodes . contains ( n ) ) ; nodes . remove ( n ) ; notifyUpdate ( n , null ) ; }
void updatePressed ( ActionEvent e , boolean newRoute ) { $F45667 ( uName , _userName ) Route g = checkNamesOK ( ) ; $F2329 ( g ) g . setUserName ( uName ) ; g . clearOutputTurnouts ( ) ; g . clearOutputSensors ( ) ; g . clearRouteSensors ( ) ; initializeIncludedList ( ) ; setTurnoutInformation ( g ) ; setSensorInformation ( g ) ; g . setOutputScriptName ( scriptFile . getText ( ) ) ; g . setOutputSoundName ( soundFile . getText ( ) ) ; setControlInformation ( g ) ; curRoute = g ; finishUpdate ( ) ; status1 . setText ( ( newRoute ? Bundle . getMessage ( NUM00 ) : Bundle . getMessage ( NUM00 ) ) + NUM00 + uName + NUM00 + _includedTurnoutList . size ( ) + NUM00 + Bundle . getMessage ( NUM00 ) + NUM00 + _includedSensorList . size ( ) + NUM00 + Bundle . getMessage ( NUM00 ) + NUM00 ) ; }
$F112299 ( m_Attributes )
private static void checkForXStream $F72 { try { $F32352 ( Class ) m_Present = _BOOL ; } $F28453 ( m_Present , _BOOL ) }
@ TargetApi ( Build . VERSION_CODES . GINGERBREAD_MR1 ) private Response < BitmapDrawable > doParse ( NetworkResponse response ) { $F56524 ( data , response ) $F56530 ( decodeOptions ) decodeOptions . inInputShareable = _BOOL ; decodeOptions . inPurgeable = _BOOL ; decodeOptions . inPreferredConfig = mDecodeConfig ; Bitmap bitmap ; if ( mMaxWidth == NUM00 && mMaxHeight == NUM00 ) { bitmap = BitmapFactory . decodeByteArray ( data , NUM00 , data . length , decodeOptions ) ; } else { decodeOptions . inJustDecodeBounds = _BOOL ; BitmapFactory . decodeByteArray ( data , NUM00 , data . length , decodeOptions ) ; int actualWidth = decodeOptions . outWidth ; int actualHeight = decodeOptions . outHeight ; int desiredWidth = getResizedDimension ( mMaxWidth , mMaxHeight , actualWidth , actualHeight ) ; int desiredHeight = getResizedDimension ( mMaxHeight , mMaxWidth , actualHeight , actualWidth ) ; decodeOptions . inJustDecodeBounds = _BOOL ; if ( Utils . hasGingerbreadMR1 ( ) ) { decodeOptions . inPreferQualityOverSpeed = PREFER_QUALITY_OVER_SPEED ; } $F61110 ( decodeOptions , ImageUtils , actualWidth , actualHeight , desiredWidth , desiredHeight ) Bitmap tempBitmap = BitmapFactory . decodeByteArray ( data , NUM00 , data . length , decodeOptions ) ; if ( tempBitmap != null && ( tempBitmap . getWidth ( ) > desiredWidth || tempBitmap . getHeight ( ) > desiredHeight ) ) { bitmap = Bitmap . createScaledBitmap ( tempBitmap , desiredWidth , desiredHeight , _BOOL ) ; $F17551 ( tempBitmap ) } else { bitmap = tempBitmap ; } } if ( bitmap == null ) { return Response . error ( new ParseError ( response ) ) ; } else { BitmapDrawable drawable ; if ( Utils . hasHoneycomb ( ) ) { drawable = new BitmapDrawable ( mResources , bitmap ) ; } else { drawable = new RecyclingBitmapDrawable ( mResources , bitmap ) ; } return Response . success ( drawable , HttpHeaderParser . parseCacheHeaders ( response ) ) ; } }
public double evaluate ( VectorInstance x , $F1986 y ) throws Exception { VectorInstance diff = x . subtract ( y ) ; double result = - m_gamma * diff . dotProduct ( diff ) ; return Math . exp ( result ) ; }
$F1 public int batchSize $F72 { return batchSize ; }
public static final $F96 decodeUrl $F97 ( bytes ) throws DecoderException { $F1338 ( bytes ) $F1538 ( buffer ) for ( $F1139 ( i , bytes ) ) { int b = bytes [ i ] ; if ( b == NUM00 ) $F12032 ( buffer ) else if ( b == NUM00 ) { try { int u = Character . digit ( ( char ) bytes [ ++ i ] , NUM00 ) ; int l = Character . digit ( ( char ) bytes [ ++ i ] , NUM00 ) ; if $F44600 ( u , l ) { throw new DecoderException $F580 ; } buffer . write ( $F313438 ( u , l ) ) ; } catch ( ArrayIndexOutOfBoundsException e ) { throw new DecoderException $F580 ; } } else $F4050 ( buffer , b ) } $F11316 ( buffer ) }
public void clear $F72 $F13478 ( mAttachedScrap , recycleAndClearCachedViews )
public void addDataSet ( T d ) { $F8249 ( d ) mYValCount += d . getEntryCount ( ) ; mYValueSum += d . getYValueSum ( ) ; if $F119130 ( mDataSets ) { $F546052 ( mYMax , d ) $F546053 ( mYMin , d ) if $F259981 ( d , AxisDependency ) { $F546052 ( mLeftAxisMax , d ) $F546053 ( mLeftAxisMin , d ) } else { $F546052 ( mRightAxisMax , d ) $F546053 ( mRightAxisMin , d ) } } else { $F546058 ( mYMax , d ) $F546060 ( mYMin , d ) if $F259981 ( d , AxisDependency ) { $F546058 ( mLeftAxisMax , d ) $F546060 ( mLeftAxisMin , d ) } else { $F546058 ( mRightAxisMax , d ) $F546060 ( mRightAxisMin , d ) } } mDataSets . add ( d ) ; $F256591 ( handleEmptyAxis , getFirstLeft , getFirstRight ) }
public void endElement ( String elementName ) throws SAXException { $F8801 ( m_firstTagNotEmitted , flush ) m_handler . endElement ( elementName ) ; }
public LibVLC $F39268 ( options ) { boolean setAout = _BOOL , setChroma = _BOOL ; if ( options != null ) { for ( String option : options ) { $F252743 ( option , setAout , _BOOL ) $F252743 ( option , setChroma , _BOOL ) if ( ! setAout && ! setChroma ) $F597 } } if ( setAout || setChroma ) { $F185359 ( options ) if ( setAout ) { final HWDecoderUtil . AudioOutput hwAout = HWDecoderUtil . getAudioOutputFromDevice ( ) ; if ( hwAout == HWDecoderUtil . AudioOutput . OPENSLES ) $F18793 ( options ) else $F18793 ( options ) } if ( setChroma ) { $F18793 ( options ) $F18793 ( options ) } } $F182030 ( nativeNew , options ) ; }
public FPSTextureView addChildAt ( int location , $F4170 DisplayBase displayBase ) { displayBase . setUp ( mFps ) ; mDisplayList . add ( location , displayBase ) ; return this ; }
private $F1986 pruneEM ( Tree tree , NodeRef node , ColourChangeMatrix mm , MetaPopulation mp ) { $F9662 ( p , colourCount ) if ( tree . isExternal ( node ) ) { p [ getColour ( node ) ] = NUM00 ; } else { $F9666 ( leftChild , tree , node ) $F9666 ( rightChild , tree , node ) $F1986 left = pruneEM ( tree , leftChild , mm , mp ) ; $F1986 right = pruneEM ( tree , rightChild , mm , mp ) ; $F1986 leftBranchPartials = pruneBranchEM ( mm , left , node , leftChild , tree , mp ) ; $F1986 rightBranchPartials = pruneBranchEM ( mm , right , node , rightChild , tree , mp ) ; double maxp = NUM00 ; for ( $F119 ( i , colourCount ) ) { p [ i ] = leftBranchPartials [ i ] * rightBranchPartials [ i ] ; if ( useNodeBias ) { p [ i ] *= mm . getEquilibrium ( i ) / mp . getDemographic ( tree . getNodeHeight ( node ) - tinyTime , i ) ; } if ( p [ i ] > maxp ) { maxp = p [ i ] ; } } if ( maxp < NUM00 ) { for ( $F119 ( i , colourCount ) ) { p [ i ] *= NUM00 ; } logNodePartialsRescaling -= Math . log ( NUM00 ) ; } } $F9688 ( nodePartials , node ) = p ; if ( debugNodePartials ) { prettyPrint ( NUM00 + node . getNumber ( ) + NUM00 , p ) ; } return p ; }
public static int minPathSum $F53007 ( grid ) { if $F12414 ( grid ) $F1082 int m = grid . length ; $F26358 ( n , grid ) $F4120 ( rowSum , n ) $F400289 ( rowSum , grid ) for ( $F119 ( col , n ) ) rowSum [ col ] = rowSum [ col - NUM00 ] + grid [ NUM00 ] [ col ] ; for ( $F119 ( row , m ) ) { rowSum [ NUM00 ] += grid [ row ] [ NUM00 ] ; for ( $F119 ( col , n ) ) { rowSum [ col ] = Math . min ( rowSum [ col - NUM00 ] , rowSum [ col ] ) + grid [ row ] [ col ] ; } } return rowSum [ n - NUM00 ] ; }
$F43588 ( json , key , value , isValueNumeric , _BOOL , Double , escapeJSON )
public Time ( Date time ) { SimpleTimeZone tz = new SimpleTimeZone ( NUM00 , NUM00 ) ; $F108456 ( dateF ) dateF . setTimeZone ( tz ) ; String d = dateF . format ( time ) + NUM00 ; $F215024 ( year , Integer , d ) if $F19274 ( year ) { this . time = new DERGeneralizedTime ( d ) ; } else { this . time = new DERUTCTime ( d . substring ( NUM00 ) ) ; } }
public DCheckUpdate ( JFrame parent ) { $F36748 ( super , parent , Dialog ) initComponents ( ) ; }
public static Automaton minimizeSimple ( Automaton a ) { $F87079 ( initialSet ) a = determinizeSimple ( Operations . reverse ( a , initialSet ) , initialSet ) ; $F725 ( initialSet ) a = determinizeSimple ( Operations . reverse ( a , initialSet ) , initialSet ) ; return a ; }
$F1 public boolean equals ( Object o ) { if ( this == o ) return _BOOL ; $F82512 ( o , getClass , _BOOL ) AbstractItem $F5162 that = ( AbstractItem $F5162 ) o ; return mIdentifier == that . mIdentifier ; }
public void addColumn ( Column column ) $F17651 ( column , columns )
$F13591 ( str , flags , decode )
private boolean checkForNaNs ( NumberVector vec ) { for ( int i = NUM00 , d = vec . getDimensionality ( ) ; i < d ; i ++ ) { $F42635 ( v , vec , i ) if ( v != v ) { return _BOOL ; } } return _BOOL ; }
public static void fill ( StringBuilder strb , int offset ) { while $F80353 ( strb , offset ) $F84 ( strb ) }
public void openForWrite $F72 throws EventException { File f = new File ( ConfigUtils . getInitialPropertyExpanded ( m_address . getPathname ( ) ) ) ; try { if $F1906 ( f ) $F88728 ( f ) else { LOGGER . info ( NUM00 + m_address . getPathname ( ) ) ; } } catch ( IOException ioe ) { throw new EventException ( NUM00 + m_address . getPathname ( ) + NUM00 + ioe ) ; } try { m_fos = new FileOutputStream ( f , _BOOL ) ; } catch ( FileNotFoundException fnfe ) { throw new EventException ( NUM00 + m_address . getPathname ( ) + NUM00 + fnfe ) ; } }
$F1 public double calculate_K ( $F2027 x_index , $F1986 x_att , $F2027 y_index , $F1986 y_att ) { return ( Math . exp ( gamma * norm2 ( x_index , x_att , y_index , y_att ) ) ) ; }
$F1 public void close $F72 throws IOException { Throwable thrown = null ; try $F5795 ( flush ) $F268630 ( thrown , e ) try $F881 ( out ) catch ( Throwable e ) { $F13265 ( thrown , e ) } }
public static void writeFofn ( final File destination , $F40514 ( files ) ) throws IOException { final BufferedWriter bw = new BufferedWriter ( new FileWriter ( destination ) ) ; try { for ( final File file : files ) { bw . write ( $F40519 ( wrapArg , file ) ) ; $F1769 ( bw ) } $F1206 ( bw ) } $F3229 ( bw ) }
void markInternalClasses $F72 { for ( $F26259 ( i , mClassDefs ) ) { mTypeIds [ mClassDefs [ i ] . classIdx ] . internal = _BOOL ; } for ( $F1139 ( i , mTypeIds ) ) { String className = mStrings [ mTypeIds [ i ] . descriptorIdx ] ; if $F1277 ( className ) { mTypeIds [ i ] . internal = _BOOL ; } else if $F4432 ( className ) { mTypeIds [ i ] . internal = _BOOL ; } } }
public final double cos $F72 { return Math . cos ( this . radians ) ; }
public static double ssError $F6762 ( predictedValues , targetAttribute ) { double ret = NUM00 ; for ( $F1139 ( i , predictedValues ) ) { ret += Math . pow ( targetAttribute [ i ] - predictedValues [ i ] , NUM00 ) ; } return ret ; }
$F1654 ( prefixes )
$F31780 ( value , builder , this )
public static String timestamp ( DateTime ts ) { return Long . toString ( ts . getMillis ( ) / NUM00 ) ; }
public String consume ( String name , boolean required ) throws ParseException { if ( name == null ) { if ( content == null && required ) { throw new ParseException ( CoreErrorDomain . ERR . missingRequiredContent ) ; } contentConsumed = _BOOL ; return content ; } $F1729 ( value , attrs , name ) if ( value == null ) { if ( required ) { ParseException pe = new ParseException ( CoreErrorDomain . ERR . missingAttribute ) ; pe . setInternalReason ( NUM00 + name + NUM00 ) ; throw pe ; } $F1274 } attrs . remove ( name ) ; return value ; }
public int copy $F5474 ( bytes , at ) { System . arraycopy ( this . bytes , NUM00 , bytes , at , this . length ) ; return at + this . length ; }
public void importKey ( ECKey key ) { $F790 ( lock ) try { checkKeyEncryptionStateMatches ( key ) ; if ( hasKey ( key ) ) $F665 importKeyLocked ( key ) ; queueOnKeysAdded ( ImmutableList . of ( key ) ) ; } $F796 ( lock ) }
public ConnectionGroupTree ( UserContext userContext , ConnectionGroup root , List < ObjectPermission . Type > permissions ) throws GuacamoleException { this . rootAPIGroup = new APIConnectionGroup ( root ) ; retrievedGroups . put ( root . getIdentifier ( ) , this . rootAPIGroup ) ; User self = userContext . self ( ) ; this . connectionPermissions = self . getConnectionPermissions ( ) ; this . sharingProfilePermissions = self . getSharingProfilePermissions ( ) ; this . connectionDirectory = userContext . getConnectionDirectory ( ) ; this . connectionGroupDirectory = userContext . getConnectionGroupDirectory ( ) ; this . sharingProfileDirectory = userContext . getSharingProfileDirectory ( ) ; addConnectionGroupDescendants ( Collections . singleton ( root ) , permissions ) ; }
private boolean containsSingleMetric ( BufferedReader reader ) throws FormatParseException { try { $F46282 ( reader ) char firstChar = ( char ) reader . read ( ) ; $F2268 ( reader ) return firstChar == NUM00 ; } catch ( IOException e ) { throw new FormatParseException ( NUM00 , e ) ; } }
public void addButtonPressedListener ( FieldConfigStringButtonInterface listener ) { if ( buttonPressedListenerList == null ) { buttonPressedListenerList = new ArrayList < FieldConfigStringButtonInterface > $F72 ; } buttonPressedListenerList . add ( listener ) ; }
private String separeMetaTagsContent ( String content ) { String result = Utils . pregMatch ( content , Constants . METATAG_CONTENT_PATTERN , NUM00 ) ; return htmlDecode ( result ) ; }
$F1 public void removeColumns ( Column ... columns ) { for ( Column c : columns ) $F106 ( columnList , c ) }
private void readServiceConfig $F72 throws $F10643 { $F144577 ( debug ) $F19771 ( internalToken , AccessController , AdminTokenAction ) serviceSchemaManager = new ServiceSchemaManager ( G11N_SETTINGS_SERVICE_NAME , internalToken ) ; ServiceSchema gsc = serviceSchemaManager . getGlobalSchema ( ) ; rawServiceData = gsc . getAttributeDefaults ( ) ; }
public void refreshPreferences ( Context context ) { if ( mEnabledResId != NUM00 ) { final SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( context ) ; if ( ! prefs . getBoolean ( context . getString ( mEnabledResId ) , mEnabledDefault ) ) { setTriggerKeys ( Collections . $F17803 $F35890 ) ; $F665 } } setTriggerKeys ( KeyComboPreference . getKeyCodesForPreference ( context , mAssignedKeysResId ) ) ; }
void addInheritedTypes ( TypeMirror typeMirror , Types typesUtils ) { if ( ! CompilerUtils . typeMirrorInCollection ( inheritedTypes , typeMirror , typesUtils ) ) $F207 ( inheritedTypes , typeMirror ) }
public static Histogram multiply ( Histogram x , double y ) { return x . modifyEventCounters ( null ) ; }
public void paint ( Graphics g ) { $F57400 ( m_from , m_to ) $F157439 ( arrow ) Point from = null ; Point to = null ; if ( isRightTop ( ) ) { from = addPoint ( arrow , m_from , SwingConstants . RIGHT , _BOOL ) ; to = addPoint ( arrow , m_to , SwingConstants . TOP , _BOOL ) ; } else if ( isBottomTop ( ) ) { from = addPoint ( arrow , m_from , SwingConstants . BOTTOM , _BOOL ) ; to = addPoint ( arrow , m_to , SwingConstants . TOP , _BOOL ) ; } else if ( isTopBottom ( ) ) { from = addPoint ( arrow , m_from , SwingConstants . TOP , _BOOL ) ; to = addPoint ( arrow , m_to , SwingConstants . BOTTOM , _BOOL ) ; } else if ( isLeftRight ( ) ) { from = addPoint ( arrow , m_from , SwingConstants . LEFT , _BOOL ) ; to = addPoint ( arrow , m_to , SwingConstants . RIGHT , _BOOL ) ; } else { from = addPoint ( arrow , m_from , SwingConstants . RIGHT , _BOOL ) ; to = addPoint ( arrow , m_to , SwingConstants . LEFT , _BOOL ) ; } if ( ! m_next . isUnconditional ( ) ) { g . setColor ( Color . red ) ; g . fillPolygon ( arrow ) ; } if ( m_visited ) g . setColor ( Color . green ) ; else $F129587 ( g , Color ) g . drawPolygon ( arrow ) ; if ( m_next . isFromSplitAnd ( ) ) { g . setColor ( Color . magenta ) ; g . fillOval ( from . x - NUM00 , from . y - NUM00 , NUM00 , NUM00 ) ; } if ( m_next . isToJoinAnd ( ) ) { g . setColor ( Color . magenta ) ; g . fillOval ( to . x - NUM00 , to . y - NUM00 , NUM00 , NUM00 ) ; } if ( m_description != null ) { $F20230 ( g2D , g ) Font font = new Font $F13847 ( Font ) ; if ( m_next . isUnconditional ( ) ) $F129587 ( g2D , Color ) else g2D . setColor ( Color . red ) ; TextLayout layout = new TextLayout ( m_description , font , g2D . getFontRenderContext ( ) ) ; int x = NUM00 ; if ( from . x < to . x ) x = from . x + ( $F27158 ( to , from ) / NUM00 ) ; else x = to . x + ( $F27158 ( from , to ) / NUM00 ) ; int y = NUM00 ; if ( from . y < to . y ) y = from . y + ( $F27159 ( to , from ) / NUM00 ) ; else y = to . y + ( $F27159 ( from , to ) / NUM00 ) ; y -= ( layout . getAscent ( ) - NUM00 ) ; x -= ( layout . getAdvance ( ) / NUM00 ) ; $F26242 ( x ) layout . draw ( g2D , x , y ) ; } }
public void addCacheParticipants ( Map < UUID , IgniteUuid > allParticipants , Map < UUID , IgniteUuid > addedParticipants ) { verStore . addParticipants ( allParticipants , addedParticipants ) ; }
public static String toJSONString ( Map map ) $F82771 ( writer , writeJSONString , map , e )
public void printContext ( PrintStream out ) { $F143477 ( out , getMessage ) out . print ( context ) ; }
$F1654 ( methods )
private void storeRequestId ( String requestId , String key ) $F1717 ( requestIds , requestId , key )
private void savepostMni ( String mnipostLocation , String mnipostRespLocation , List manageNameIdList , $F82550 ( objFact ) ) throws JAXBException { if $F22 ( mnipostLocation ) { ManageNameIDServiceElement slsElemPost = objFact . createManageNameIDServiceElement ( ) ; slsElemPost . setBinding ( httpPostBinding ) ; slsElemPost . setLocation ( mnipostLocation ) ; slsElemPost . setResponseLocation ( mnipostRespLocation ) ; manageNameIdList . add ( slsElemPost ) ; } }
public static boolean goToUpdatePage ( Context context ) { final Uri playStoreUri = Uri . parse ( NUM00 + context . getPackageName ( ) ) ; FreshAirLog . i ( $F368 ( playStoreUri ) ) ; final Intent playStoreIntent = new Intent ( Intent . ACTION_VIEW , playStoreUri ) ; final PackageManager packageManager = context . getPackageManager ( ) ; for ( ResolveInfo resolveInfo : packageManager . queryIntentActivities ( playStoreIntent , NUM00 ) ) { final ActivityInfo resolveActivity = resolveInfo . activityInfo ; final String resolvePackageName = resolveActivity . packageName ; if $F3057 ( resolvePackageName ) { $F2980 ( FreshAirLog ) playStoreIntent . setComponent ( new ComponentName ( resolvePackageName , resolveActivity . name ) ) ; context . startActivity ( playStoreIntent ) ; return _BOOL ; } } FreshAirLog . e ( $F368 ( playStoreUri ) ) ; return _BOOL ; }
public IJavaElement createElement ( ClassScope scope , ICompilationUnit unit , HashSet existingElements , HashMap knownScopes ) { return createElement ( scope , scope . referenceContext . sourceStart , unit , existingElements , knownScopes ) ; }
public static $F3803 toRelativeFiles ( $F1113 VirtualFile root , $F1113 final Collection $F85423 files ) { $F5 $F37973 ( rc , files ) ; for ( VirtualFile file : files ) $F18351 ( rc , relativePath , root , file ) return rc ; }
synchronized static void ensureSecurityManager $F72 { if ( System . getSecurityManager ( ) == null ) { System . setSecurityManager ( new RMISecurityManager $F72 ) ; } }
public static BigDecimal rate ( int p_C_CurrencyFrom_ID , int p_C_CurrencyTo_ID , Timestamp p_ConversionDate , int p_C_ConversionType_ID , int p_AD_Client_ID , int p_AD_Org_ID ) throws SQLException { if ( p_C_CurrencyFrom_ID == p_C_CurrencyTo_ID ) return Adempiere . ONE ; Timestamp ConversionDate = p_ConversionDate ; $F35 ( ConversionDate , System ) ConversionDate = Adempiere . trunc ( ConversionDate ) ; int C_ConversionType_ID = p_C_ConversionType_ID ; if ( C_ConversionType_ID == NUM00 ) { $F180114 ( sql ) C_ConversionType_ID = Adempiere . getSQLValue ( sql , p_AD_Client_ID ) ; } BigDecimal rate = null ; String sql = $F34354 + NUM00 ; $F3915 ( pstmt , Adempiere , sql ) $F47 ( pstmt , p_C_CurrencyFrom_ID ) $F47 ( pstmt , p_C_CurrencyTo_ID ) $F47 ( pstmt , C_ConversionType_ID ) pstmt . setTimestamp ( NUM00 , ConversionDate ) ; pstmt . setTimestamp ( NUM00 , ConversionDate ) ; $F47 ( pstmt , p_AD_Client_ID ) $F47 ( pstmt , p_AD_Org_ID ) $F49 ( rs , pstmt ) if $F1682 ( rs ) { rate = rs . getBigDecimal ( NUM00 ) ; } $F59 ( rs ) $F59 ( pstmt ) $F1275 ( rate ) return rate ; }
public static Socket doInteraction ( final HttpsURLConnection clientConnection , final ServerSocket serverSocket , final int responseCode , final boolean doAuthentication ) throws Throwable { clientConnection . setDoInput ( _BOOL ) ; clientConnection . setConnectTimeout ( TIMEOUT ) ; clientConnection . setReadTimeout ( TIMEOUT ) ; ServerWork server = new ServerWork ( serverSocket , responseCode , doAuthentication ) ; ClientConnectionWork client = new ClientConnectionWork ( clientConnection ) ; $F171451 ( executorService , Executors ) try { $F8318 serverFuture = executorService . submit ( server ) ; $F8318 clientFuture = executorService . submit ( client ) ; Throwable t = null ; try { $F171463 ( serverFuture , TimeUnit ) ; } catch ( ExecutionException e ) { t = e . getCause ( ) ; } try { $F171463 ( clientFuture , TimeUnit ) ; } catch ( ExecutionException e ) { if ( t != null ) $F302 ( t ) t = e . getCause ( ) ; } $F731 ( t ) } catch ( ExecutionException e ) { throw e . getCause ( ) ; } finally $F736 ( executorService ) return server . peerSocket ; }
public static SnmpEngineId createEngineId ( int port ) throws UnknownHostException { int suniana = NUM00 ; InetAddress address = null ; address = InetAddress . getLocalHost ( ) ; return createEngineId ( address , port , suniana ) ; }
public static $F38669 parseReferential ( String path ) { Ruleset ruleset = DelphiRulesUtils . buildRuleSetFromXml ( DelphiRulesUtils . getConfigurationFromFile ( path ) ) ; $F38669 rulesRepository = new $F255887 $F72 ; for ( DelphiRule fRule : ruleset . getRules ( ) ) $F3762 ( rulesRepository , createRepositoryRule , fRule ) return rulesRepository ; }
$F9159 ( logDebug , mSetupDone , _BOOL , mServiceConn , mContext , mDisposed , mService , mPurchaseListener )
public org . w3c . dom . Document encryptAndReplaceWSSElements ( org . w3c . dom . Document doc , java . util . Map elmMap , $F9738 ( encDataEncAlg ) , int encDataEncAlgStrength , String certAlias , int kekStrength , $F9738 ( tokenType ) , $F9738 ( providerID ) ) throws EncryptionException $F1337
public void addIssue ( int reason , EObject obj , int featureId ) { issues . add ( new TransformationIssue ( reason , obj , featureId , null ) ) ; }
public void insertChild ( Node node , int index ) { node . detachFromParent ( ) ; node . parentNode = this ; try { initChildNodes ( node ) ; childNodes . add ( index , node ) ; } catch ( IndexOutOfBoundsException ignore ) { throw new LagartoDOMException ( NUM00 + index ) ; } reindexChildren ( ) ; }
private static $F96 ntlmHash ( final String password ) throws AuthenticationException { try { final $F96 unicodePassword = password . getBytes ( NUM00 ) ; final MD4 md4 = new MD4 $F72 ; md4 . update ( unicodePassword ) ; return md4 . getOutput ( ) ; } catch ( UnsupportedEncodingException e ) { throw new AuthenticationException $F11592 ( e ) ; } }
private boolean betweenZeroAndOne ( final String paramName , final double val ) { if $F61157 ( val ) { JOptionPane . showMessageDialog ( null , paramName + NUM00 , NUM00 , JOptionPane . WARNING_MESSAGE ) ; return _BOOL ; } return _BOOL ; }
public abstract String substituteMacros ( String parameterValue , MacroHandler mh ) throws UndefinedParameterError ;
public void powEquals ( double exp ) { for ( $F1139 ( i , A ) ) for ( $F179379 ( j , A , i ) ) A [ i ] [ j ] = Math . pow ( A [ i ] [ j ] , exp ) ; }
private static $F3803 splitCamelCase ( String className ) { String remaining = className ; $F10144 ( result ) while $F5973 ( remaining ) { boolean found = _BOOL ; for ( $F1088 ( i , remaining ) ) { if ( $F952 ( Character , remaining , i ) ) { result . add ( remaining . substring ( NUM00 , i ) ) ; $F11978 ( remaining , i ) found = _BOOL ; $F597 } } if ( ! found ) { result . add ( remaining ) ; remaining = NUM00 ; } } return result ; }
public static NodeList selectNodeList ( Node doc , String str , NamespaceContext nsctx ) throws XPathException { XPathFactory xpf = xpathFactoryCache . getInstanceForCurrentThread ( ) ; XPath xpath = xpf . newXPath ( ) ; xpath . setNamespaceContext ( nsctx ) ; XPathExpression expr = xpath . compile ( str ) ; return $F99893 ( expr , doc , XPathConstants ) ; }
public ResultEntry ( NondominatedPopulation population , TypedProperties properties ) { this ( population , properties == null ? null : properties . getProperties ( ) ) ; }
private void generateDiscovery $F72 throws SAXException { $F153269 ( handler , LOCATORS , EMPTY ) generateLocators ( ) ; $F153271 ( handler , LOCATORS ) }
protected BasicType ( $F20474 type , int sqlType ) { super ( type , sqlType ) ; checkNull = ! type . isPrimitive ( ) ; }
$F1 public void actionPerformed ( ActionEvent e ) $F845
public void applyProperties $F72 { for ( ParameterType type : allParameterTypes ) { String value = allParameterValues . getProperty ( type . getKey ( ) ) ; ParameterService . setParameterValue ( type , value ) ; } }
private void rotateLeft $F17573 ( root ) { $F17577 ( left , root ) $F17579 ( pivot , root ) $F17575 ( pivotLeft , pivot ) $F17579 ( pivotRight , pivot ) root . right = pivotLeft ; $F17581 ( pivotLeft , root ) replaceInParent ( root , pivot ) ; pivot . left = root ; root . parent = pivot ; $F17587 ( root , Math , left , pivotLeft ) $F17592 ( pivot , Math , root , pivotRight ) }
public void add ( ClusterNode newNode ) { if ( node != null ) { $F216947 ( nodes ) nodes . add ( node ) ; node = null ; } nodes . add ( newNode ) ; }
public boolean checkIfBackupSetExists ( String setName ) { validateNotNullOrEmpty ( setName ) ; try { File $F1897 ( file , getBackupRoot , setName ) ; if $F3428 ( file ) { return _BOOL ; } } catch ( Exception e ) $F21338 ( log ) return _BOOL ; }
public static $F806 toQuotedAndCommaSeparatedArray ( String str ) throws IOException { $F28830 $F31408 ( values ) ; StreamTokenizer tt = new StreamTokenizer $F33896 ( str ) ; $F33902 ( tt ) $F33902 ( tt ) tt . wordChars ( NUM00 + NUM00 , NUM00 ) ; tt . whitespaceChars ( NUM00 , NUM00 ) ; $F70966 ( tt ) $F70966 ( tt ) while ( tt . nextToken ( ) != StreamTokenizer . TT_EOF ) { switch ( tt . ttype ) { case StreamTokenizer . TT_WORD : $F1262 $F1262 values . add ( tt . sval ) ; $F597 } } $F14862 ( values ) }
public void writeStringNoCompression ( String str ) throws IOException { if ( str == null ) $F73598 ( writeInt ) else { $F43187 ( writeInt , str ) for ( $F1088 ( i , str ) ) io . write ( ( byte ) str . charAt ( i ) ) ; } }
public SmartThresholds parse ( final Resource thresholdFileResource ) throws IOException { final SmartThresholds holder = new SmartThresholds $F72 ; BufferedReader reader = null ; try { $F306749 ( reader , thresholdFileResource ) String line ; while $F443 ( line , reader ) { if $F3106 ( line ) { $F6542 ( lineInput , line ) holder . addThreshold ( new SmartThreshold ( lineInput ) ) ; } } } $F14364 ( reader ) return holder ; }
public void shutdown $F72 { ExecutorService executor = Executors . newScheduledThreadPool ( NUM00 ) ; executor . submit ( createShutdown ( NUM00 ) ) ; }
$F1 public Point drawingToView $F85239 ( p ) { return new Point ( ( int ) ( p . x * scaleFactor ) - translation . x , ( int ) ( p . y * scaleFactor ) - translation . y ) ; }
protected void onConnect $F72 $F845
public void addDescriptor ( final SetupDescriptor desc ) $F207 ( descriptors , desc )
public static boolean containIP $F14337 ( cidrPrefix , cidrMaskBits , ip ) { boolean matched = _BOOL ; int bitsToShift = NUM00 - cidrMaskBits ; if ( bitsToShift > NUM00 ) { cidrPrefix = cidrPrefix > > bitsToShift ; ip = ip > > bitsToShift ; cidrPrefix = cidrPrefix < < bitsToShift ; ip = ip < < bitsToShift ; } if ( cidrPrefix != ip ) { matched = _BOOL ; } return matched ; }
public static String compileProgressSuccessAction ( String progressSuccessAction ) throws TemplateModelException { Environment env = CommonFtlUtil . getCurrentEnvironment ( ) ; return compileProgressSuccessAction ( progressSuccessAction , ContextFtlUtil . getRequest ( env ) , ContextFtlUtil . getResponse ( env ) ) ; }
public static String join ( String separator , float ... elements ) { $F13363 ( elements ) List $F7482 list = new ArrayList $F7482 ( elements . length ) ; for ( Float elem : elements ) $F207 ( list , elem ) return join ( separator , list ) ; }
public static void putUnsignedByte ( ByteBuffer bb , short v ) { $F42832 ( bb , v ) }
public static int numOfParameters ( String desc ) { int n = NUM00 ; int i = NUM00 ; for ( $F589 ) { $F1280 ( c , desc , i ) if ( c == NUM00 ) $F597 while ( c == NUM00 ) $F373845 ( c , desc , i ) if ( c == NUM00 ) { i = desc . indexOf ( NUM00 , i ) + NUM00 ; if ( i <= NUM00 ) throw new IndexOutOfBoundsException $F580 ; } else ++ i ; ++ n ; } return n ; }
$F1 public Trie optimize ( Trie orig ) { List $F11616 cmds = orig . cmds ; $F99479 $F204 ( rows ) ; $F99479 orows = orig . rows ; int remap [ ] = $F2315 ( orows ) ; for ( $F5373 ( j , orows ) ) { Row now = new Remap ( orows . get ( j ) , remap ) ; boolean merged = _BOOL ; for ( $F2277 ( i , rows ) ) { Row q = merge ( now , rows . get ( i ) ) ; if ( q != null ) { rows . set ( i , q ) ; merged = _BOOL ; remap [ j ] = i ; $F597 } } if ( merged == _BOOL ) { remap [ j ] = rows . size ( ) ; rows . add ( now ) ; } } int root = remap [ orig . root ] ; $F99493 ( Arrays , remap ) rows = removeGaps ( root , rows , new ArrayList $F33449 $F72 , remap ) ; return new Trie ( orig . forward , remap [ root ] , cmds , rows ) ; }
public boolean isAllDenied $F72 { int count = NUM00 ; for ( $F2277 ( i , mPerms ) ) { if ( $F67701 ( mPerms , mUserPermission , i ) == PackageManager . PERMISSION_DENIED ) count ++ ; } return count == mPerms . size ( ) ; }
public String toStringKey $F72 { String result ; int i ; result = NUM00 + NUM00 ; for ( $F95978 ( i , getColCount ) ) { $F324879 ( getColHidden , i ) result += NUM00 + NUM00 + ( i + NUM00 ) + NUM00 + NUM00 + removeFilterName ( m_ColNames [ i ] ) + NUM00 + NUM00 ; } result += NUM00 ; return result ; }
private DateTimeFormatter toFormatter ( Locale locale , ResolverStyle resolverStyle , Chronology chrono ) { $F10578 ( Objects , locale ) while ( active . parent != null ) $F5795 ( optionalEnd ) CompositePrinterParser pp = new CompositePrinterParser ( printerParsers , _BOOL ) ; return new DateTimeFormatter ( pp , locale , DecimalStyle . STANDARD , resolverStyle , null , chrono , null ) ; }
protected void waitForExternalStoreMount $F72 throws Exception { $F139156 ( extStorageState , Environment ) int currentWaitTime = NUM00 ; while ( ! extStorageState . equals ( Environment . MEDIA_MOUNTED ) ) { $F1594 ( Log , LOG_TAG ) currentWaitTime = timeoutWait ( currentWaitTime , DEFAULT_WAIT_POLL_TIME , DEFAULT_MAX_WAIT_TIME , NUM00 ) ; extStorageState = Environment . getExternalStorageState ( ) ; } }
public final void push ( Node value ) { int ff = m_firstFree ; if $F11078 ( ff , m_mapSize ) { if ( null == m_map ) $F132454 ( m_map , m_blocksize , m_mapSize ) else $F132458 ( m_mapSize , m_blocksize , System , m_map , newMap , ff ) } m_map [ ff ] = value ; ff ++ ; m_firstFree = ff ; }
public boolean uploadAndInstallApk ( $F1113 IDevice device , $F1113 String packageName , $F1113 File localFile , $F1113 LaunchStatus launchStatus ) { if ( ! needsInstall ( device , localFile , packageName ) ) { return _BOOL ; } String remotePath = NUM00 + packageName ; myPrinter . stdout ( NUM00 + localFile + NUM00 + remotePath ) ; try { device . pushFile ( localFile . getPath ( ) , remotePath ) ; boolean installed = installApp ( device , remotePath , packageName , launchStatus ) ; if ( installed ) { myInstalledApkCache . setInstalled ( device , localFile , packageName ) ; } return installed ; } catch ( Exception e ) { myPrinter . stderr ( e . toString ( ) ) ; return _BOOL ; } }
public static ByteArrayList readAsBytes ( InputStream is ) throws IOException { ByteArrayList buf = new ByteArrayList $F72 ; $F12496 ( b ) int nread = - NUM00 ; while $F42482 ( nread , is , b ) { buf . add ( b , NUM00 , nread ) ; } return buf ; }
public static int uninstallSilent ( Context context , String packageName ) $F19580 ( uninstallSilent , context , packageName , _BOOL )
public void open ( final $F2469 list , final int position ) { launchPlayerActivity = _BOOL ; synchronized ( this ) { if ( mShuffleMode == SHUFFLE_AUTO ) { mShuffleMode = SHUFFLE_NORMAL ; } final long oldId = getAudioId ( ) ; $F18832 ( listlength , list ) boolean newlist = _BOOL ; if ( mPlayListLen == listlength ) { newlist = _BOOL ; for ( $F119 ( i , listlength ) ) { if $F14614 ( list , i , mPlayList ) $F3468 ( newlist , _BOOL ) } } if ( newlist ) { addToPlayList ( list , - NUM00 ) ; notifyChange ( QUEUE_CHANGED ) ; } if ( position >= NUM00 ) { mPlayPos = position ; } else { mPlayPos = mShuffler . nextInt ( mPlayListLen ) ; } $F725 ( mHistory ) openCurrentAndNext ( ) ; if ( oldId != getAudioId ( ) ) { notifyChange ( META_CHANGED ) ; } } }
public Builder names $F74419 ( names ) { return names ( Arrays . asList ( names ) ) ; }
public void scheduleAtFixedRate $F61001 ( task , when , period ) { $F61005 ( period , when ) $F61009 ( delay , when , System ) scheduleImpl ( task , delay , period , _BOOL ) ; }
public void testNegativeReverseStepByOneWithClosure $F72 { $F102316 ( callLog ) $F305363 ( closure , callLog ) $F271415 ( range , createRange ) range . step ( - NUM00 , closure ) ; $F153255 ( assertEquals , callLog ) $F242733 ( iter , callLog ) for ( $F34659 ( i ) ) $F271421 ( assertEquals , createValue , i , iter ) }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
public static BigDecimal normalizeDecimalValue ( BigDecimal bigDecimal , int allowedPrecision ) { if ( bigDecimal . precision ( ) > allowedPrecision ) $F1337 return bigDecimal ; }
protected static Node deserializeString ( String doc ) { try { $F161688 ( reader , doc ) StreamSource source = new StreamSource ( reader ) ; DOMResult result = new DOMResult $F72 ; $F2218 ( tf , TransformerFactory ) $F94102 ( transformer , tf ) transformer . setOutputProperty ( OutputKeys . ENCODING , DEFAULT_ENCODING ) ; transformer . setOutputProperty ( OutputKeys . INDENT , DEFAULT_INDENT ) ; transformer . transform ( source , result ) ; return result . getNode ( ) ; } catch ( Throwable e ) $F81306 ( log , Level , e ) $F1274 }
public static String append ( final CharSequence url , final Object ... params ) { $F52199 ( baseUrl , url ) $F44432 ( params , baseUrl ) if $F132130 ( params ) $F824 $F94214 ( result , baseUrl ) addPathSeparator ( baseUrl , result ) ; addParamPrefix ( baseUrl , result ) ; Object value ; $F13031 ( result , params ) $F84 ( result ) value = params [ NUM00 ] ; $F208830 ( value , result ) for ( $F24429 ( i , params ) ) { $F84 ( result ) $F6939 ( result , params , i ) $F84 ( result ) value = params [ i + NUM00 ] ; $F208830 ( value , result ) } $F92 ( result ) }
public void sendEventToAgent ( final String event ) { synchronized ( eventSocket ) $F7523 ( eventWriter , event ) }
private void applyJMSObjects ( $F140617 ( filters ) ) { $F29429 ( writer ) $F80496 ( printWriter , writer ) $F21416 ( printWriter ) for ( String str : getQueueList ( ) ) $F101061 ( printWriter , str ) for ( String str : getTopicList ( ) ) $F101061 ( printWriter , str ) $F108920 ( filters , writer ) }
$F1 public Revision next $F72 { try { int revCount , articleID ; $F55 ( revCount , result ) $F55 ( articleID , result ) if ( articleID != this . currentArticleID ) { this . currentRevCounter = NUM00 ; this . currentArticleID = articleID ; } if ( revCount - NUM00 != this . currentRevCounter ) { logger . error ( NUM00 + NUM00 + articleID + NUM00 + result . getInt ( NUM00 ) + NUM00 + result . getInt ( NUM00 ) + NUM00 + ( this . currentRevCounter + NUM00 ) ) ; this . currentRevCounter = revCount ; this . previousRevision = null ; $F1274 } this . currentRevCounter = revCount ; this . primaryKey = result . getInt ( NUM00 ) ; Revision revision = new Revision ( revCount ) ; revision . setPrimaryKey ( this . primaryKey ) ; if ( ! shouldLoadRevisionText ) { String currentRevision ; Diff diff ; RevisionDecoder decoder = new RevisionDecoder ( config . getCharacterSet ( ) ) ; if ( binaryData ) { decoder . setInput ( result . getBinaryStream ( NUM00 ) , _BOOL ) ; } else { decoder . setInput ( result . getString ( NUM00 ) ) ; } diff = decoder . decode ( ) ; try { currentRevision = diff . buildRevision ( previousRevision ) ; } catch ( Exception e ) { this . previousRevision = null ; logger . error ( NUM00 + NUM00 + result . getInt ( NUM00 ) + NUM00 + result . getInt ( NUM00 ) + NUM00 + result . getInt ( NUM00 ) + NUM00 ) ; $F1274 } previousRevision = currentRevision ; revision . setRevisionText ( currentRevision ) ; } else { if ( revApi == null ) { revApi = new RevisionApi ( config ) ; } revision . setRevisionApi ( revApi ) ; } revision . setRevisionID ( result . getInt ( NUM00 ) ) ; revision . setArticleID ( articleID ) ; revision . setTimeStamp ( new Timestamp ( result . getLong ( NUM00 ) ) ) ; revision . setFullRevisionID ( result . getInt ( NUM00 ) ) ; revision . setContributorName ( result . getString ( NUM00 ) ) ; revision . setContributorId ( result . getInt ( NUM00 ) ) ; revision . setComment ( result . getString ( NUM00 ) ) ; revision . setMinor ( result . getBoolean ( NUM00 ) ) ; revision . setContributorIsRegistered ( result . getBoolean ( NUM00 ) ) ; return revision ; } catch ( DecodingException e ) $F9491 ( e ) catch ( SQLException e ) $F9491 ( e ) $F12153 ( e ) catch ( WikiApiException e ) $F9491 ( e ) }
public void addSelectionColumn ( GridField mField ) { log . config ( mField . getHeader ( ) ) ; int displayLength = mField . getDisplayLength ( ) ; if ( displayLength <= NUM00 || displayLength > FIELDLENGTH ) mField . setDisplayLength ( FIELDLENGTH ) ; else displayLength = NUM00 ; WEditor editor = null ; Label label = null ; Row panel = new Row $F72 ; contentSimpleRows . appendChild ( panel ) ; if ( mField . isRange ( ) ) { Hbox box = new Hbox $F72 ; editor = WebEditorFactory . getEditor ( mField , _BOOL ) ; label = editor . getLabel ( ) ; editor . setMandatory ( _BOOL ) ; editor . setReadWrite ( _BOOL ) ; editor . dynamicDisplay ( ) ; Component fieldLabel = editor . getComponent ( ) ; box . appendChild ( editor . getComponent ( ) ) ; rangeFirstEditor . add ( mField . getColumnName ( ) ) ; WEditor toRangeEditor = WebEditorFactory . getEditor ( mField , _BOOL ) ; toRangeEditor . setMandatory ( _BOOL ) ; toRangeEditor . setReadWrite ( _BOOL ) ; toRangeEditor . dynamicDisplay ( ) ; m_sEditors2 . add ( toRangeEditor ) ; Label separator = new Label $F580 ; box . appendChild ( separator ) ; Component fieldLabel1 = toRangeEditor . getComponent ( ) ; box . appendChild ( toRangeEditor . getComponent ( ) ) ; if ( displayLength > NUM00 ) mField . setDisplayLength ( displayLength ) ; if ( isTwoColumns ) { if ( ! isPair ) panel = new Row $F72 ; } else panel = new Row $F72 ; panel . appendChild ( LayoutUtils . makeRightAlign ( label ) ) ; panel . appendChild ( box ) ; fieldLabel . addEventListener ( Events . ON_OK , this ) ; fieldLabel1 . addEventListener ( Events . ON_OK , this ) ; } else { editor = WebEditorFactory . getEditor ( mField , _BOOL ) ; label = editor . getLabel ( ) ; editor . setMandatory ( _BOOL ) ; editor . setReadWrite ( _BOOL ) ; editor . dynamicDisplay ( ) ; Component fieldLabel = editor . getComponent ( ) ; if ( displayLength > NUM00 ) mField . setDisplayLength ( displayLength ) ; panel . appendChild ( LayoutUtils . makeRightAlign ( label ) ) ; panel . appendChild ( fieldLabel ) ; fieldLabel . addEventListener ( Events . ON_OK , this ) ; $F722 ( m_sEditors2 ) } m_sEditors . add ( editor ) ; }
public void index ( Iterator tuples , String field ) { while $F2921 ( tuples ) { Tuple t = ( Tuple ) tuples . next ( ) ; index ( t , field ) ; } }
public final static void closeEL ( final OutputStream os ) { try $F1823 ( os ) catch ( final Throwable e ) $F845 }
public void addSearchListener ( SearchListener l ) $F207 ( m_SearchListeners , l )
public boolean isSingleAttributeContainer $F72 { return _BOOL ; }
public Process executeAsync ( final CommandLine command , $F2540 ( environment ) ) throws IOException { if $F271542 ( workingDirectory ) $F124393 ( workingDirectory ) return executeInternal ( command , environment , workingDirectory , streamHandler , null ) ; }
public CacheSpan touch $F72 { $F657 ( now , System ) File newCacheFile = getCacheFileName ( file . getParentFile ( ) , key , position , now ) ; file . renameTo ( newCacheFile ) ; return CacheSpan . createCacheEntry ( key , position , now , newCacheFile ) ; }
$F52843 ( packed , map , i , j , count , value )
public void open ( File file ) throws IOException { checkAWTPermission ( ) ; checkExec ( ) ; checkActionSupport ( Action . OPEN ) ; checkFileValidation ( file ) ; peer . open ( file ) ; }
public static String convertISO8601DurationToNormalTime ( String isoTime ) { $F153364 ( formattedTime ) if ( $F63172 ( isoTime ) && isoTime . contains ( NUM00 ) ) { String hours = $F106856 ( isoTime ) ; String minutes = $F106856 ( isoTime ) ; String seconds = $F106856 ( isoTime ) ; formattedTime = hours + NUM00 + formatTo2Digits ( minutes ) + NUM00 + formatTo2Digits ( seconds ) ; } else if ( $F49413 ( isoTime ) && isoTime . contains ( NUM00 ) && isoTime . contains ( NUM00 ) ) { String minutes = $F106856 ( isoTime ) ; String seconds = $F106856 ( isoTime ) ; formattedTime = minutes + NUM00 + formatTo2Digits ( seconds ) ; } else if ( isoTime . contains ( NUM00 ) && $F49413 ( isoTime ) && isoTime . contains ( NUM00 ) ) { String hours = $F106856 ( isoTime ) ; String seconds = $F106856 ( isoTime ) ; formattedTime = hours + NUM00 + formatTo2Digits ( seconds ) ; } else if ( $F63172 ( isoTime ) && $F49413 ( isoTime ) ) { String hours = $F106856 ( isoTime ) ; String minutes = $F106856 ( isoTime ) ; formattedTime = hours + NUM00 + formatTo2Digits ( minutes ) + NUM00 ; } else if ( $F49413 ( isoTime ) && $F49413 ( isoTime ) && isoTime . contains ( NUM00 ) ) { String seconds = $F106856 ( isoTime ) ; formattedTime = NUM00 + formatTo2Digits ( seconds ) ; } else if ( $F49413 ( isoTime ) && isoTime . contains ( NUM00 ) && $F49413 ( isoTime ) ) { String minutes = $F106856 ( isoTime ) ; formattedTime = minutes + NUM00 ; } else if ( isoTime . contains ( NUM00 ) && $F49413 ( isoTime ) && $F49413 ( isoTime ) ) { String hours = $F106856 ( isoTime ) ; formattedTime = hours + NUM00 ; } return formattedTime ; }
$F1 public void toggleSelection ( T photo ) { if $F105 ( selectedPhotos , photo ) $F106 ( selectedPhotos , photo ) else $F207 ( selectedPhotos , photo ) }
protected void preTick $F72 $F845
public byte map ( byte src ) { char c = map ( ( char ) src ) ; if ( c < Byte . MIN_VALUE || c > Byte . MAX_VALUE ) $F1083 return ( byte ) c ; }
$F73303 ( axis , trans , prevImageSize , imageSize , prevViewSize , viewSize , drawableSize , m , Matrix , percentage , Math )
public Object produceEvent $F72 throws InvocationTargetException { if ( ! valid ) { throw new IllegalStateException ( toString ( ) + NUM00 ) ; } try { return method . invoke ( target ) ; } $F180169 ( e ) catch ( InvocationTargetException e ) { if ( e . getCause ( ) instanceof Error ) { throw ( Error ) e . getCause ( ) ; } throw e ; } }
public String wrapIfKeywordOrBuiltIn ( String name ) { if $F105 ( KEYWORD_BUILT_IN_SET , name ) $F70142 ( name ) return name ; }
public IssueMatcher add $F72 { IssueMatcher issueMatcher = new IssueMatcher $F72 ; issueMatchers . add ( issueMatcher ) ; return issueMatcher ; }
private $F4203 InjectScope $F4203 findScope ( AnnotatedElement annElement ) { for ( Annotation ann : annElement . getAnnotations ( ) ) { $F26425 annType = ann . annotationType ( ) ; if ( annType . isAnnotationPresent ( Scope . class ) ) { Supplier < InjectScope $F4203 > scopeGen = ( Supplier ) _scopeMap . get ( annType ) ; if ( scopeGen != null ) $F1522 ( scopeGen ) else { log . fine ( L . l ( NUM00 , annType . getSimpleName ( ) ) ) ; } } } return new InjectScopeFactory $F200 $F72 ; }
private static native $F2027 RegOpenKey ( int hKey , $F96 subKey , int securityMask ) ;
public void removePropertyChangeListener ( IPropertyChangeListener listener ) $F106 ( listeners , listener )
$F1 public int previous $F72 { CharacterIterator text = getText ( ) ; if ( current ( ) == text . getBeginIndex ( ) ) { return BreakIterator . DONE ; } int start = current ( ) ; int lastResult = cachedLastKnownBreak ; if ( lastResult >= start || lastResult <= BreakIterator . DONE ) { getPrevious ( ) ; lastResult = handlePrevious ( ) ; } else { text . setIndex ( lastResult ) ; } int result = lastResult ; while ( result != BreakIterator . DONE && result < start ) { lastResult = result ; result = handleNext ( ) ; } text . setIndex ( lastResult ) ; cachedLastKnownBreak = lastResult ; return lastResult ; }
public DeferredImageReplacedElement ( ImageResource imageResource , RepaintListener repaintListener , int w , int h ) { this . _imageResource = imageResource ; _loaded = _BOOL ; this . repaintListener = repaintListener ; if $F96093 ( w , h ) { _doScaleImage = _BOOL ; _targetHeight = NUM00 ; _targetWidth = NUM00 ; } else { _doScaleImage = _BOOL ; _targetHeight = Math . max ( NUM00 , h ) ; _targetWidth = Math . max ( NUM00 , w ) ; } _image = ImageUtil . createCompatibleBufferedImage ( _targetWidth , _targetHeight ) ; }
public boolean startsWith ( Name n ) { if ( n instanceof CompoundName ) { return ( impl . startsWith ( n . size ( ) , n . getAll ( ) ) ) ; } else { return _BOOL ; } }
public ParameterizedGenericMethodBinding ( MethodBinding originalMethod , TypeBinding [ ] typeArguments , LookupEnvironment environment ) { this . environment = environment ; this . modifiers = originalMethod . modifiers ; this . selector = originalMethod . selector ; this . declaringClass = originalMethod . declaringClass ; this . typeVariables = Binding . NO_TYPE_VARIABLES ; this . typeArguments = typeArguments ; this . isRaw = _BOOL ; this . tagBits = originalMethod . tagBits ; this . originalMethod = originalMethod ; this . parameters = Scope . substitute ( this , originalMethod . parameters ) ; this . returnType = Scope . substitute ( this , originalMethod . returnType ) ; this . thrownExceptions = Scope . substitute ( this , originalMethod . thrownExceptions ) ; if ( this . thrownExceptions == null ) this . thrownExceptions = Binding . NO_EXCEPTIONS ; checkMissingType : { if ( ( this . tagBits & TagBits . HasMissingType ) != NUM00 ) break checkMissingType ; if ( ( this . returnType . tagBits & TagBits . HasMissingType ) != NUM00 ) { this . tagBits |= TagBits . HasMissingType ; break checkMissingType ; } for ( int i = NUM00 , max = this . parameters . length ; i < max ; i ++ ) { if ( ( this . parameters [ i ] . tagBits & TagBits . HasMissingType ) != NUM00 ) { this . tagBits |= TagBits . HasMissingType ; break checkMissingType ; } } for ( int i = NUM00 , max = this . thrownExceptions . length ; i < max ; i ++ ) { if ( ( this . thrownExceptions [ i ] . tagBits & TagBits . HasMissingType ) != NUM00 ) { this . tagBits |= TagBits . HasMissingType ; break checkMissingType ; } } } this . wasInferred = _BOOL ; }
public void testInvokeAll5 $F72 throws Throwable { $F25236 ( e ) PoolCleaner cleaner = null ; try { cleaner = cleaner ( e ) ; $F25247 ( l ) $F25251 ( l ) $F25251 ( l ) List < $F171452 > futures = e . invokeAll ( l ) ; $F70108 ( assertEquals , futures ) for ( $F171452 future : futures ) assertSame ( TEST_ <missing ';'> NUM00 , future . get ( ) ) ; } $F14364 ( cleaner ) }
public InternalListener ( final ConfigManager configFile ) $F6988 ( this , configFile )
public $F96 sign $F97 ( hash ) { ECDSASigner signer = new ECDSASigner ( new HMacDSAKCalculator ( new SHA256Digest $F72 ) ) ; signer . init ( _BOOL , new ECPrivateKeyParameters ( priv , domain ) ) ; $F81942 signature = signer . generateSignature ( hash ) ; $F1538 ( baos ) try { DERSequenceGenerator seq = new DERSequenceGenerator ( baos ) ; seq . addObject ( new ASN1Integer ( signature [ NUM00 ] ) ) ; seq . addObject ( new ASN1Integer ( toCanonicalS ( signature [ NUM00 ] ) ) ) ; $F59 ( seq ) $F11316 ( baos ) } $F29052 $F1274 }
public TimePeriod ( Date startTime , Date endTime ) { if ( startTime != null && endTime != null && ! endTime . after ( startTime ) ) $F20855 ( endTime , startTime ) this . startTime = startTime ; this . endTime = endTime ; }
JMenu createEditMenu $F72 { $F132272 ( editMenu ) editMenu . add ( actionManager . getCutAction ( ) ) ; editMenu . add ( actionManager . getCopyAction ( ) ) ; editMenu . add ( actionManager . getPasteAction ( ) ) ; editMenu . add ( actionManager . getDeleteAction ( ) ) ; $F55657 ( editMenu ) editMenu . add ( actionManager . getClearSourceNeuronsAction ( ) ) ; editMenu . add ( actionManager . getSetSourceNeuronsAction ( ) ) ; editMenu . add ( actionManager . getConnectionMenu ( ) ) ; editMenu . add ( actionManager . getAddSynapseGroupAction ( ) ) ; $F55657 ( editMenu ) editMenu . add ( actionManager . getRandomizeObjectsAction ( ) ) ; editMenu . add ( actionManager . getShowAdjustSynapsesDialog ( ) ) ; $F55657 ( editMenu ) editMenu . add ( actionManager . getLayoutMenu ( ) ) ; editMenu . add ( actionManager . getGroupMenu ( ) ) ; $F55657 ( editMenu ) $F3876 ( editMenu , createAlignMenu ) $F3876 ( editMenu , createSpacingMenu ) $F55657 ( editMenu ) editMenu . add ( actionManager . getSetNeuronPropertiesAction ( ) ) ; editMenu . add ( actionManager . getSetSynapsePropertiesAction ( ) ) ; $F55657 ( editMenu ) $F3876 ( editMenu , createSelectionMenu ) return editMenu ; }
public void removeHistoryChangedListener ( HistoryChangedListener l ) $F106 ( m_HistoryChangedListeners , l )
public void currentState ( long state , Model currentModel ) { currentState = state ; if ( loggers != null ) { for ( Logger logger : loggers ) { logger . log ( state ) ; } } }
public boolean isBOM $F72 { return m_isBOM ; }
public boolean isSigned $F72 { return signed ; }
public Object parseText ( String text ) { $F20313 ( text ) return parse ( new LineColumnReader $F33896 ( text ) ) ; }
$F1654 ( parts )
protected $F4203 Database makeSimpleDatabase ( String filename , int expectedSize , ListParameterization params , $F63826 ( filters ) ) { try ( InputStream is = open ( filename ) ) { List < ObjectFilter > $F204 ( filterlist ) ; filterlist . add ( new FixedDBIDsFilter $F989 ) ; if ( filters != null ) { for ( $F6969 filtercls : filters ) { ObjectFilter filter = ClassGenericsUtil . parameterizeOrAbort ( filtercls , params ) ; filterlist . add ( filter ) ; } } NumberVectorLabelParser < DoubleVector > parser = new NumberVectorLabelParser $F200 ( DoubleVector . FACTORY ) ; InputStreamDatabaseConnection dbc = new InputStreamDatabaseConnection ( is , filterlist , parser ) ; params . addParameter ( AbstractDatabase . Parameterizer . DATABASE_CONNECTION_ID , dbc ) ; Database db = ClassGenericsUtil . parameterizeOrAbort ( StaticArrayDatabase . class , params ) ; testParameterizationOk ( params ) ; $F21883 ( db ) Relation $F1011 rel = db . getRelation ( TypeUtil . ANY ) ; assertEquals ( $F99343 ( expectedSize , rel ) ) ; return db ; } catch ( IOException e ) { fail ( NUM00 + filename + NUM00 ) ; $F1274 } }
protected void addChooserFilters ( JFileChooser chooser ) { javax . swing . filechooser . FileNameExtensionFilter filter ; chooser . addChoosableFileFilter ( filter = new javax . swing . filechooser . FileNameExtensionFilter $F6600 ) ; chooser . setFileFilter ( filter ) ; }
public void onStop $F72 { if ( null != mService ) { if ( null != mContext ) { mContext . unbindService ( mServiceConnection ) ; } mServiceConnection = null ; mService = null ; } }
public String peek $F72 { String result = null ; if ( isEmpty ( ) ) $F1337 else { int cachedCurrentIndex = currentIndex ; $F8801 ( isEatingBlocksOfDelimiters , trimStartingDelimiters ) int nearestDelimeter = - NUM00 ; for ( $F1088 ( i , delimiters ) ) { int delimiter = source . indexOf ( delimiters . charAt ( i ) , currentIndex ) ; if ( nearestDelimeter == - NUM00 || delimiter != - NUM00 && delimiter < nearestDelimeter ) { nearestDelimeter = delimiter ; } } if ( nearestDelimeter == - NUM00 ) { result = source . substring ( currentIndex ) ; } else { result = source . substring ( currentIndex , nearestDelimeter ) ; } currentIndex = cachedCurrentIndex ; } return result ; }
private void eliminarUsuariosOrgano ( GestionOrganizacionBI organizacionBI , OrganizacionVO organizacionVO ) { organizacionBI . eliminarUsuariosOrgano ( organizacionVO . getId ( ) ) ; }
private static void addPreviousLayer ( List < $F372817 > layers , $F372817 sourceLayer , $F372817 layerToCheck ) { final int MAXLAYERS = NUM00 ; Set $F257385 newLayerTemp = new HashSet $F257385 $F72 ; boolean theNextLayerIsTheSourceLayer = _BOOL ; for ( Neuron neuron : layerToCheck ) { for ( Synapse synapse : neuron . getFanIn ( ) ) { Neuron sourceNeuron = synapse . getSource ( ) ; if $F105 ( sourceLayer , sourceNeuron ) { theNextLayerIsTheSourceLayer = _BOOL ; } $F83608 ( sourceNeuron , neuron ) newLayerTemp . add ( synapse . getSource ( ) ) ; } } if ( ( theNextLayerIsTheSourceLayer ) || $F10471 ( newLayerTemp ) || $F60125 ( layers , MAXLAYERS ) ) $F207 ( layers , sourceLayer ) else { $F372817 newLayer = new ArrayList $F257385 ( newLayerTemp ) ; Collections . sort ( newLayer , OrientationComparator . X_ORDER ) ; layers . add ( newLayer ) ; addPreviousLayer ( layers , sourceLayer , newLayer ) ; } }
public void testShiftRight2 $F72 { $F17888 int aSign = NUM00 ; int number = - NUM00 ; byte $F3018 = { NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F86501 ( result , aNumber , number ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public static void ignorm ( double c1 [ ] , double c2 [ ] , int m , double ng ) { if ( ng != NUM00 ) { double k = Math . pow ( c1 [ NUM00 ] , ng ) ; for ( $F141 ( i , m ) ) c2 [ i ] = k * c1 [ i ] ; c2 [ NUM00 ] = ( k - NUM00 ) / ng ; } else { System . arraycopy ( c1 , NUM00 , c2 , NUM00 , m - NUM00 ) ; c2 [ NUM00 ] = Math . log ( c1 [ NUM00 ] ) ; } }
public static int findNonwhitespaceCharacter ( String s , int index ) { $F1749 ( sLength , s ) while ( index < sLength && $F1750 ( Character , s , index ) ) { index ++ ; } return index ; }
public void readContent $F72 throws IOException { if ( offset + length > buffer . length ) $F11734 if ( in == null ) { offset += length ; } else { $F24020 ( bytesRead , in , buffer , offset , length ) if ( bytesRead != length ) { int c = bytesRead ; do { if ( c < NUM00 || bytesRead > length ) $F11734 c = in . read ( buffer , offset + bytesRead , length - bytesRead ) ; bytesRead += c ; } while ( bytesRead != length ) ; } offset += length ; } }
public Primitive ( Object value ) { this . value = value ; type = ( value != null ) ? Utilities . getPrimitiveType ( value . getClass ( ) ) : null ; $F26344 ( type , value ) }
public void createCashBasedJournalEntriesAndReversalsForSavingsTax ( final Office office , final String currencyCode , final CASH_ACCOUNTS_FOR_SAVINGS accountTypeToBeDebited , final CASH_ACCOUNTS_FOR_SAVINGS accountTypeToBeCredited , final Long savingsProductId , final Long paymentTypeId , final Long savingsId , final String transactionId , final Date transactionDate , final BigDecimal amount , final Boolean isReversal , final List < TaxPaymentDTO > taxDetails ) { for ( TaxPaymentDTO taxPaymentDTO : taxDetails ) { if ( taxPaymentDTO . getAmount ( ) != null ) { if ( taxPaymentDTO . getCreditAccountId ( ) == null ) { createCashBasedCreditJournalEntriesAndReversalsForSavings ( office , currencyCode , accountTypeToBeCredited . getValue ( ) , savingsProductId , paymentTypeId , savingsId , transactionId , transactionDate , taxPaymentDTO . getAmount ( ) , isReversal ) ; } else { createCashBasedCreditJournalEntriesAndReversalsForSavings ( office , currencyCode , taxPaymentDTO . getCreditAccountId ( ) , savingsId , transactionId , transactionDate , taxPaymentDTO . getAmount ( ) , isReversal ) ; } } } createCashBasedDebitJournalEntriesAndReversalsForSavings ( office , currencyCode , accountTypeToBeDebited . getValue ( ) , savingsProductId , paymentTypeId , savingsId , transactionId , transactionDate , amount , isReversal ) ; }
public int read ( ByteBuf dst , int dstStart , int dstLength ) throws IOException { final int remaining = ( int ) Math . min ( this . length - this . position , Integer . MAX_VALUE ) ; $F50166 ( read , Math , remaining , dstLength ) final int bufferPosition = checkOffset ( position , read ) ; final long srcAddress = PlatformDependent . directBufferAddress ( lastMapped ) + bufferPosition ; if ( dst . hasMemoryAddress ( ) ) { final long dstAddress = dst . memoryAddress ( ) + dstStart ; PlatformDependent . copyMemory ( srcAddress , dstAddress , read ) ; } else if $F181184 ( dst ) { $F45857 ( dstArray , dst ) PlatformDependent . copyMemory ( srcAddress , dstArray , dstStart , read ) ; } else $F825 position += read ; return read ; }
public static Calendar clearTime ( final Calendar self ) { clearTimeCommon ( self ) ; return self ; }
public double pdf ( int k ) { return Math . exp ( k * Math . log ( this . mean ) - Arithmetic . logFactorial ( k ) - this . mean ) ; }
public static void appendUnpaddedInteger ( StringBuffer buf , long value ) { $F29204 ( intValue , value ) if ( intValue == value ) { appendUnpaddedInteger ( buf , intValue ) ; } else { $F42779 ( buf , Long , value ) } }
private void drawTextElements ( Canvas canvas , float textSize , Typeface typeface , ColorStateList textColor , $F806 texts , $F5415 textX , $F5415 textY , Paint paint , int alpha , boolean showActivated , int activatedDegrees , boolean activatedOnly ) { paint . setTextSize ( textSize ) ; paint . setTypeface ( typeface ) ; final float activatedIndex = activatedDegrees / ( NUM00 / NUM_POSITIONS ) ; final int activatedFloor = ( int ) activatedIndex ; final int activatedCeil = ( $F63596 ( Math , activatedIndex ) ) % NUM_POSITIONS ; for ( $F6268 ( i ) ) { final boolean activated = ( activatedFloor == i || activatedCeil == i ) ; if ( activatedOnly && ! activated ) $F1448 final $F2027 stateMask = new int [ ] { android . R . attr . state_enabled , ( showActivated && activated ? android . R . attr . state_selected : NUM00 ) } ; final int color = textColor . getColorForState ( stateMask , NUM00 ) ; paint . setColor ( color ) ; paint . setAlpha ( getMultipliedAlpha ( color , alpha ) ) ; canvas . drawText ( texts [ i ] , textX [ i ] , textY [ i ] , paint ) ; } }
public void testFindSpringActiveDirectoryWithLimit $F72 { LdapProxy proxy = getLdapAD ( ) ; List result = null ; int limit = NUM00 ; try { result = proxy . find ( getLdapSearchVO ( NUM00 , limit , NUM00 , NUM00 , null , LdapScopeConstants . SCOPE_SUBTREE ) ) ; } $F3957 assertNotNull ( result ) ; if ( result != null ) { $F43476 ( assertEquals , limit , result ) } }
$F1 public void handleKey ( int virtualKeyCode , int transitionState , char keyChar ) { switchControlKeys ( virtualKeyCode , transitionState ) ; inputBuffer . add ( new GlobalKeyEvent ( this , virtualKeyCode , transitionState , keyChar , menuPressed , shiftPressed , controlPressed , extendedKey ) ) ; }
public int hashCode $F72 { return alignment ^ leader ^ Math . round ( position ) ; }
public static String stripLeadingPeriod ( String s ) { if ( null != s && s . startsWith ( NUM00 ) ) return s . substring ( Math . min ( $F34024 ( s ) ) , s . length ( ) ) ; return s ; }
public static boolean isRequiredConfigDirectory ( final String directory ) $F298 ( requiredConfigDirectories , directory )
protected ConnectionStateSSLv3 ( SSLSessionImpl session ) { try { CipherSuite cipherSuite = session . cipherSuite ; boolean is_exportabe = cipherSuite . isExportable ( ) ; hash_size = cipherSuite . getMACLength ( ) ; int key_size = ( is_exportabe ) ? cipherSuite . keyMaterial : cipherSuite . expandedKeyMaterial ; int iv_size = cipherSuite . ivSize ; block_size = cipherSuite . getBlockSize ( ) ; String algName = cipherSuite . getBulkEncryptionAlgorithm ( ) ; String hashName = cipherSuite . getHashName ( ) ; if ( logger != null ) { $F8438 ( logger ) logger . println ( NUM00 + session . getCipherSuite ( ) ) ; $F7957 ( logger , algName ) $F7957 ( logger , hashName ) $F7957 ( logger , hash_size ) $F7957 ( logger , block_size ) $F7957 ( logger , iv_size ) $F7957 ( logger , key_size ) } $F56524 ( clientRandom , session ) $F56524 ( serverRandom , session ) $F96 key_block = new byte [ NUM00 * hash_size + NUM00 * key_size + NUM00 * iv_size ] ; $F148496 ( seed , clientRandom , serverRandom ) $F7057 ( System , serverRandom , seed ) $F11244 ( System , clientRandom , seed , serverRandom ) PRF . computePRF_SSLv3 ( key_block , session . master_secret , seed ) ; $F2175 ( client_mac_secret , hash_size ) $F2175 ( server_mac_secret , hash_size ) $F2175 ( client_key , key_size ) $F2175 ( server_key , key_size ) boolean is_client = ! session . isServer ; $F135 ( System , key_block , client_mac_secret , hash_size ) $F30985 ( System , key_block , hash_size , server_mac_secret ) System . arraycopy ( key_block , NUM00 * hash_size , client_key , NUM00 , key_size ) ; System . arraycopy ( key_block , NUM00 * hash_size + key_size , server_key , NUM00 , key_size ) ; IvParameterSpec clientIV = null ; IvParameterSpec serverIV = null ; if ( is_exportabe ) { if ( logger != null ) $F12204 ( logger ) $F5348 ( md5 , MessageDigest ) md5 . update ( client_key ) ; md5 . update ( clientRandom ) ; md5 . update ( serverRandom ) ; $F14611 ( client_key , md5 ) md5 . update ( server_key ) ; md5 . update ( serverRandom ) ; md5 . update ( clientRandom ) ; $F14611 ( server_key , md5 ) key_size = cipherSuite . expandedKeyMaterial ; if ( block_size != NUM00 ) { md5 . update ( clientRandom ) ; md5 . update ( serverRandom ) ; clientIV = new IvParameterSpec ( md5 . digest ( ) , NUM00 , iv_size ) ; md5 . update ( serverRandom ) ; md5 . update ( clientRandom ) ; serverIV = new IvParameterSpec ( md5 . digest ( ) , NUM00 , iv_size ) ; } } else if ( block_size != NUM00 ) { clientIV = new IvParameterSpec ( key_block , NUM00 * hash_size + NUM00 * key_size , iv_size ) ; serverIV = new IvParameterSpec ( key_block , NUM00 * hash_size + NUM00 * key_size + iv_size , iv_size ) ; } if ( logger != null ) { $F7957 ( logger , is_exportabe ) $F8438 ( logger ) logger . print ( session . master_secret ) ; $F8438 ( logger ) logger . print ( clientRandom ) ; $F8438 ( logger ) logger . print ( serverRandom ) ; $F8438 ( logger ) logger . print ( client_mac_secret ) ; $F8438 ( logger ) logger . print ( server_mac_secret ) ; $F8438 ( logger ) logger . print ( client_key , NUM00 , key_size ) ; $F8438 ( logger ) logger . print ( server_key , NUM00 , key_size ) ; if ( clientIV != null ) { $F8438 ( logger ) logger . print ( clientIV . getIV ( ) ) ; $F8438 ( logger ) logger . print ( serverIV . getIV ( ) ) ; } else $F12204 ( logger ) } if ( algName == null ) { $F83645 ( encCipher ) ; $F83645 ( decCipher ) ; } else { encCipher = Cipher . getInstance ( algName ) ; decCipher = Cipher . getInstance ( algName ) ; if ( is_client ) { encCipher . init ( Cipher . ENCRYPT_MODE , new SecretKeySpec ( client_key , NUM00 , key_size , algName ) , clientIV ) ; decCipher . init ( Cipher . DECRYPT_MODE , new SecretKeySpec ( server_key , NUM00 , key_size , algName ) , serverIV ) ; } else { encCipher . init ( Cipher . ENCRYPT_MODE , new SecretKeySpec ( server_key , NUM00 , key_size , algName ) , serverIV ) ; decCipher . init ( Cipher . DECRYPT_MODE , new SecretKeySpec ( client_key , NUM00 , key_size , algName ) , clientIV ) ; } } messageDigest = MessageDigest . getInstance ( hashName ) ; if ( is_client ) { mac_write_secret = client_mac_secret ; mac_read_secret = server_mac_secret ; } else { mac_write_secret = server_mac_secret ; mac_read_secret = client_mac_secret ; } if $F3057 ( hashName ) { pad_1 = SSLv3Constants . MD5pad1 ; pad_2 = SSLv3Constants . MD5pad2 ; } else { pad_1 = SSLv3Constants . SHApad1 ; pad_2 = SSLv3Constants . SHApad2 ; } } catch ( Exception e ) { $F301 ( e ) throw new AlertException ( AlertProtocol . INTERNAL_ERROR , new SSLProtocolException $F580 ) ; } }
$F221804 ( d , imageView , getImageView , viewWidth , getImageViewWidth , viewHeight , getImageViewHeight , drawableWidth , drawableHeight , mBaseMatrix , widthScale , heightScale , mScaleType , ScaleType , scale , Math , mTempSrc , mTempDst , FIT_CENTER , ScaleToFit , FIT_START , FIT_END , FIT_XY , resetMatrix )
private void cleanUpLabels $F72 { int id = NUM00 ; for ( Iterator < Label > i = labels . iterator ( ) ; i . hasNext ( ) ; ) { Label label = i . next ( ) ; if $F2979 ( label ) $F38599 ( i ) else { $F116630 ( label ) label . id = id ++ ; } } }
void zrot ( double theta ) { theta *= ( pi / NUM00 ) ; $F54226 ( ct , Math , theta ) $F33859 ( st , Math , theta ) $F193831 ( Nyx , yx , ct , xx , st ) $F193831 ( Nyy , yy , ct , xy , st ) $F193831 ( Nyz , yz , ct , xz , st ) $F193831 ( Nyo , yo , ct , xo , st ) $F193835 ( Nxx , xx , ct , yx , st ) $F193835 ( Nxy , xy , ct , yy , st ) $F193835 ( Nxz , xz , ct , yz , st ) $F193835 ( Nxo , xo , ct , yo , st ) yo = Nyo ; yx = Nyx ; yy = Nyy ; yz = Nyz ; xo = Nxo ; xx = Nxx ; xy = Nxy ; xz = Nxz ; }
public static long nanosFromDate ( long ms ) { Calendar cal = getCalendar ( ) ; cal . setTimeInMillis ( ms ) ; return nanosFromCalendar ( cal ) ; }
$F1 default CompletableFuture < OptionalLong > maxLong ( final ToLongFunction $F11632 fn ) $F257945 ( CompletableFuture , getExec )
protected BalancedWebResource createHttpsClient ( final String username , final String password , $F3803 hosts ) throws NoSuchAlgorithmException $F33971 ( createHttpsClient , username , password , hosts , _BOOL )
public static $F1469 createArraySignature ( $F1469 typeSignature , int arrayCount ) { $F116 ( arrayCount , typeSignature ) int sigLength = typeSignature . length ; $F1469 result = new char [ arrayCount + sigLength ] ; for ( $F119 ( i , arrayCount ) ) { result [ i ] = C_ARRAY ; } $F6483 ( System , typeSignature , result , arrayCount , sigLength ) return result ; }
public void println $F72 throws IOException { writer . write ( format . getLineSeparator ( ) ) ; }
protected void increaseBufferSize ( int minSize ) { int newLength = buf . length ; while ( newLength < minSize ) newLength *= NUM00 ; $F9662 ( newBuf , newLength ) int avail = currentlyInBuffer ( ) ; $F21535 ( System , buf , readPos , newBuf , avail ) buf = newBuf ; readPos = NUM00 ; writePos = avail ; }
private void handleEnumeratedAttribute ( Instances trainInstances ) throws Exception { Instance instance ; m_distribution = new Distribution ( m_complexityIndex , trainInstances . numClasses ( ) ) ; Enumeration $F90868 enu = trainInstances . enumerateInstances ( ) ; while $F1444 ( enu ) { $F1445 ( instance , enu ) if $F246479 ( instance , m_attIndex ) { m_distribution . add ( ( int ) instance . value ( m_attIndex ) , instance ) ; } } if ( m_distribution . check ( m_minNoObj ) ) { m_numSubsets = m_complexityIndex ; m_infoGain = infoGainCrit . splitCritValue ( m_distribution , m_sumOfWeights ) ; m_gainRatio = gainRatioCrit . splitCritValue ( m_distribution , m_sumOfWeights , m_infoGain ) ; } }
private boolean isLoadMore $F72 { return mNextLoadEnable && pageSize != - NUM00 && mRequestLoadMoreListener != null && mData . size ( ) >= pageSize ; }
private void addWorkerIfNecessary $F72 { if $F76102 ( idleWorkers ) { synchronized ( workers ) { if ( workers . isEmpty ( ) || $F76102 ( idleWorkers ) ) $F5795 ( addWorker ) } } }
$F1 protected Node removeFromFrontier $F72 { Node result = frontier . remove ( ) ; frontierNodeLookup . remove ( result . getState ( ) ) ; explored . add ( result . getState ( ) ) ; $F4173 ( updateMetrics , frontier ) return result ; }
public static String encode $F97 ( data ) { int start = NUM00 ; int len = data . length ; StringBuffer buf = new StringBuffer ( data . length * NUM00 / NUM00 ) ; int end = len - NUM00 ; int i = start ; int n = NUM00 ; while ( i <= end ) { int d = ( ( ( ( int ) data [ i ] ) & NUM00 ) < < NUM00 ) | ( ( ( ( int ) data [ i + NUM00 ] ) & NUM00 ) < < NUM00 ) | ( ( ( int ) data [ i + NUM00 ] ) & NUM00 ) ; buf . append ( $F138727 ( legalChars , d ) ) ; buf . append ( $F138727 ( legalChars , d ) ) ; buf . append ( $F138727 ( legalChars , d ) ) ; $F3248 ( buf , legalChars , d ) i += NUM00 ; if ( n ++ >= NUM00 ) { n = NUM00 ; } } if ( i == start + len - NUM00 ) { int d = ( ( ( ( int ) data [ i ] ) & NUM00 ) < < NUM00 ) | ( ( ( ( int ) data [ i + NUM00 ] ) & NUM00 ) < < NUM00 ) ; buf . append ( $F138727 ( legalChars , d ) ) ; buf . append ( $F138727 ( legalChars , d ) ) ; buf . append ( $F138727 ( legalChars , d ) ) ; $F84 ( buf ) } else if ( i == start + len - NUM00 ) { int d = ( ( ( int ) data [ i ] ) & NUM00 ) < < NUM00 ; buf . append ( $F138727 ( legalChars , d ) ) ; buf . append ( $F138727 ( legalChars , d ) ) ; $F84 ( buf ) } $F92 ( buf ) }
public static Font createBitmapFont ( String name , Image bitmap , $F2027 cutOffsets , $F2027 charWidth , String charsets ) { Font f = createBitmapFont ( bitmap , cutOffsets , charWidth , charsets ) ; bitmapCache . put ( name , f ) ; return f ; }
static boolean isTenured ( MemoryPoolMXBean memoryPoolMXBean ) { if ( memoryPoolMXBean . getType ( ) != MemoryType . HEAP ) { return _BOOL ; } $F20605 ( name , memoryPoolMXBean ) return $F5129 ( name ) || name . equals ( NUM00 ) || name . equals ( NUM00 ) || name . equals ( NUM00 ) || $F35166 ( HEAP_POOL , name ) ; }
public String toSimpleString $F72 { $F280 ( buffer ) buffer . append ( NUM00 + $F81465 ( mLabel ) + NUM00 + mYVals . size ( ) + NUM00 ) ; $F92 ( buffer ) }
public static $F4203 T interpreterOnly $F41334 ( callable ) throws Exception $F41336 ( callable )
public static $F3803 tokenize ( String arguments , boolean stringify ) { $F28830 $F31408 ( argList ) ; $F83 ( currArg ) boolean escaped = _BOOL ; int state = NO_TOKEN_STATE ; $F1749 ( len , arguments ) for ( $F119 ( i , len ) ) { $F1280 ( c , arguments , i ) if ( escaped ) $F40007 ( escaped , _BOOL , currArg , c ) else { switch ( state ) { case SINGLE_QUOTE_STATE : if ( c == NUM00 ) { state = NORMAL_TOKEN_STATE ; } else $F288 ( currArg , c ) $F597 case DOUBLE_QUOTE_STATE : if ( c == NUM00 ) { state = NORMAL_TOKEN_STATE ; } else if ( c == NUM00 ) { i ++ ; $F1280 ( next , arguments , i ) if $F37111 ( next ) $F288 ( currArg , next ) else $F31988 ( currArg , c , next ) } else $F288 ( currArg , c ) $F597 case NO_TOKEN_STATE : case NORMAL_TOKEN_STATE : switch ( c ) { $F1262 escaped = _BOOL ; state = NORMAL_TOKEN_STATE ; $F597 $F32808 ( state , SINGLE_QUOTE_STATE ) $F32808 ( state , DOUBLE_QUOTE_STATE ) $F1267 if $F32022 ( Character , c ) $F40016 ( currArg , c , state , NORMAL_TOKEN_STATE ) else if ( state == NORMAL_TOKEN_STATE ) { $F40018 ( argList , currArg ) $F6932 ( currArg ) state = NO_TOKEN_STATE ; } } $F597 $F1267 $F40027 ( state ) } } } if ( escaped ) { $F84 ( currArg ) $F40018 ( argList , currArg ) } else if ( state != NO_TOKEN_STATE ) $F40035 ( argList , currArg ) if ( stringify ) { for ( $F2277 ( i , argList ) ) { argList . set ( i , NUM00 + _escapeQuotesAndBackslashes ( argList . get ( i ) ) + NUM00 ) ; } } return argList ; }
private void addSelectorForProtocol ( Properties settings , String protocol , ProtocolDispatchSelector ps ) { $F7601 ( proxy , settings , protocol ) if ( proxy != null ) { FixedProxySelector protocolSelector = ProxyUtil . parseProxySettings ( proxy ) ; ps . setSelector ( protocol , protocolSelector ) ; } }
public void addHeader ( String name , String value ) $F1717 ( header , name , value )
public static void readSkel ( BufferedReader reader ) throws IOException { $F10144 ( lines ) $F83 ( section ) String ln ; while $F443 ( ln , reader ) { if $F3106 ( ln ) { $F40018 ( lines , section ) $F4910 ( section ) } else $F31988 ( section , ln , NL ) } if $F4012 ( section ) $F40018 ( lines , section ) if $F137887 ( lines , size ) { Out . error ( ErrorMessages . WRONG_SKELETON ) ; throw new GeneratorException $F72 ; } $F58180 ( line , size ) for ( $F119 ( i , size ) ) $F15302 ( line , i , lines ) }
public static $F2689 nonMonogamousSamples ( Collection < Family > families ) { final LinkedHashSet $F4 $F22304 ( ret ) ; final $F2690 $F9626 ( parents ) ; for ( Family f : families ) { if ( ! parents . add ( f . getFather ( ) ) ) { ret . add ( f . getFather ( ) ) ; } if ( ! parents . add ( f . getMother ( ) ) ) { ret . add ( f . getMother ( ) ) ; } } return ret ; }
private void createSceneVao $F72 { int vao = glGenVertexArrays ( ) ; int vbo = glGenBuffers ( ) ; glBindVertexArray ( vao ) ; glBindBuffer ( GL_ARRAY_BUFFER , vbo ) ; ByteBuffer bb = BufferUtils . createByteBuffer ( boxes . length * NUM00 * $F210280 * NUM00 * NUM00 ) ; $F16708 ( fv , bb ) for ( $F24429 ( i , boxes ) ) { DemoUtils . triangulateBox ( $F283339 ( boxes , i , fv ) ) ; } glBufferData ( GL_ARRAY_BUFFER , bb , GL_STATIC_DRAW ) ; glEnableVertexAttribArray ( NUM00 ) ; glVertexAttribPointer ( NUM00 , NUM00 , GL_FLOAT , _BOOL , $F297295 , NUM00 ) ; glEnableVertexAttribArray ( NUM00 ) ; glVertexAttribPointer ( NUM00 , NUM00 , GL_FLOAT , _BOOL , $F297295 , NUM00 * NUM00 ) ; glBindBuffer ( GL_ARRAY_BUFFER , NUM00 ) ; glBindVertexArray ( NUM00 ) ; this . vaoScene = vao ; }
public boolean contains ( File file , String fileContent ) { if ( exists ( file ) ) { String content = readFileContent ( file ) ; return content != null && content . equals ( fileContent ) ; } return _BOOL ; }
public static boolean [ ] [ ] loadImage ( File file , char offChar ) throws FileNotFoundException , RuntimeException { $F5 rows = loadImagePad ( file , offChar ) ; $F13410 ( s , rows ) boolean [ ] [ ] img = new boolean [ rows . size ( ) ] [ s . length ( ) ] ; for ( $F2277 ( i , rows ) ) { s = rows . get ( i ) ; for ( $F1088 ( j , s ) ) { $F1280 ( c , s , j ) if ( c == offChar ) { img [ i ] [ j ] = _BOOL ; } else { img [ i ] [ j ] = _BOOL ; } } } return img ; }
protected void updateReceiptStatusWhenCancelled ( final String receiptNumber ) { final List < EgdmCollectedReceipt > egdmCollectedReceipts = demandGenericDAO . getAllEgdmCollectedReceipts ( receiptNumber ) ; if $F1032 ( egdmCollectedReceipts ) for ( final EgdmCollectedReceipt egDmCollectedReceipt : egdmCollectedReceipts ) { egDmCollectedReceipt . setStatus ( DemandConstants . CANCELLED_RECEIPT ) ; egDmCollectedReceipt . setUpdatedTime ( $F4094 ) ; egdmCollectedReceiptDAO . update ( egDmCollectedReceipt ) ; } }
public void addAnimation ( int id , Animation ... animations ) { if $F4257 ( mAnimations , id ) { mAnimations . put ( id , new ArrayList < Animation > ( animations . length ) ) ; if ( id != Animation . FULL_PAGE ) $F207 ( mAnimatedViews , id ) } ArrayList < Animation > anims = mAnimations . get ( id ) ; Collections . addAll ( anims , animations ) ; }
private void cleanupDiscovery ( StorageSystem system ) { try { system . setReachableStatus ( _BOOL ) ; _dbClient . persistObject ( system ) ; } $F88154 ( _logger , e ) }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
$F1 public SSLEngineResult wrap ( $F30903 srcs , int offset , int len , ByteBuffer dst ) throws SSLException { if ( engine_was_shutteddown ) { return new SSLEngineResult ( SSLEngineResult . Status . CLOSED , SSLEngineResult . HandshakeStatus . NOT_HANDSHAKING , NUM00 , NUM00 ) ; } if $F54923 ( srcs , dst ) $F4639 if ( dst . isReadOnly ( ) ) { throw new ReadOnlyBufferException $F72 ; } $F14406 ( handshake_started , beginHandshake ) SSLEngineResult . HandshakeStatus handshakeStatus = getHandshakeStatus ( ) ; if ( ( session == null || engine_was_closed ) && ( handshakeStatus . equals ( SSLEngineResult . HandshakeStatus . NEED_UNWRAP ) || handshakeStatus . equals ( SSLEngineResult . HandshakeStatus . NEED_TASK ) ) ) { return new SSLEngineResult ( getEngineStatus ( ) , handshakeStatus , NUM00 , NUM00 ) ; } $F45850 ( capacity , dst ) int produced = NUM00 ; if ( alertProtocol . hasAlert ( ) ) { if ( capacity < recordProtocol . getRecordSize ( NUM00 ) ) { return new SSLEngineResult ( SSLEngineResult . Status . BUFFER_OVERFLOW , handshakeStatus , NUM00 , NUM00 ) ; } $F96 alert_data = alertProtocol . wrap ( ) ; dst . put ( alert_data ) ; if ( alertProtocol . isFatalAlert ( ) ) { alertProtocol . setProcessed ( ) ; if ( session != null ) $F5218 ( session ) shutdown ( ) ; return new SSLEngineResult ( SSLEngineResult . Status . CLOSED , SSLEngineResult . HandshakeStatus . NOT_HANDSHAKING , NUM00 , alert_data . length ) ; } else { alertProtocol . setProcessed ( ) ; if ( close_notify_was_sent && close_notify_was_received ) { shutdown ( ) ; return new SSLEngineResult ( SSLEngineResult . Status . CLOSED , SSLEngineResult . HandshakeStatus . NOT_HANDSHAKING , NUM00 , alert_data . length ) ; } return new SSLEngineResult ( getEngineStatus ( ) , getHandshakeStatus ( ) , NUM00 , alert_data . length ) ; } } if ( capacity < recordProtocol . getMinRecordSize ( ) ) { if ( logger != null ) { logger . println ( NUM00 + capacity + NUM00 + recordProtocol . getMinRecordSize ( ) + NUM00 ) ; } return new SSLEngineResult ( SSLEngineResult . Status . BUFFER_OVERFLOW , handshakeStatus , NUM00 , NUM00 ) ; } try { if ( ! handshakeStatus . equals ( SSLEngineResult . HandshakeStatus . NEED_WRAP ) ) { dataStream . setSourceBuffers ( srcs , offset , len ) ; if ( ( capacity < SSLRecordProtocol . MAX_SSL_PACKET_SIZE ) && ( capacity < recordProtocol . getRecordSize ( dataStream . available ( ) ) ) ) { if ( logger != null ) { logger . println ( NUM00 + capacity + NUM00 + recordProtocol . getRecordSize ( dataStream . available ( ) ) + NUM00 ) ; } return new SSLEngineResult ( SSLEngineResult . Status . BUFFER_OVERFLOW , handshakeStatus , NUM00 , NUM00 ) ; } if ( remaining_wrapped_data == null ) { remaining_wrapped_data = recordProtocol . wrap ( ContentType . APPLICATION_DATA , dataStream ) ; } if ( capacity < remaining_wrapped_data . length ) { return new SSLEngineResult ( SSLEngineResult . Status . BUFFER_OVERFLOW , handshakeStatus , dataStream . consumed ( ) , NUM00 ) ; } else { dst . put ( remaining_wrapped_data ) ; produced = remaining_wrapped_data . length ; remaining_wrapped_data = null ; return new SSLEngineResult ( getEngineStatus ( ) , handshakeStatus , dataStream . consumed ( ) , produced ) ; } } else { if ( remaining_hsh_data == null ) { remaining_hsh_data = handshakeProtocol . wrap ( ) ; } if ( capacity < remaining_hsh_data . length ) { return new SSLEngineResult ( SSLEngineResult . Status . BUFFER_OVERFLOW , handshakeStatus , NUM00 , NUM00 ) ; } else { dst . put ( remaining_hsh_data ) ; produced = remaining_hsh_data . length ; remaining_hsh_data = null ; handshakeStatus = handshakeProtocol . getStatus ( ) ; if ( handshakeStatus . equals ( SSLEngineResult . HandshakeStatus . FINISHED ) ) { session = recordProtocol . getSession ( ) ; } } return new SSLEngineResult ( getEngineStatus ( ) , getHandshakeStatus ( ) , NUM00 , produced ) ; } } catch ( AlertException e ) { alertProtocol . alert ( AlertProtocol . FATAL , e . getDescriptionCode ( ) ) ; engine_was_closed = _BOOL ; if ( session != null ) $F5218 ( session ) throw e . getReason ( ) ; } }
$F1 protected void initialize $F72 { $F101494 ( words ) $F21883 ( super ) $F21884 ( m_Words ) words = read ( ) ; for ( String word : words ) { if $F14943 ( word ) m_Words . add ( word ) ; } }
protected boolean existsInRange $F36827 ( x , minLength , maxLength ) { x = StringUtils . trimToNull ( x ) ; return x != null && x . length ( ) >= minLength && x . length ( ) <= maxLength ; }
public synchronized void unwatch ( String pathName ) throws IOException $F80218 ( unregisterAll , Paths , pathName )
public Criteria addProperty ( String name , String value , Operator operator ) { properties . add ( new PropertyCriteria ( name , value , operator ) ) ; return this ; }
public void removeColumn ( final String columnName ) { $F2329 ( columnName ) final $F3803 cols = Arrays . asList ( getInfo ( ) . headers ) ; $F1086 ( colIndex , cols , columnName ) removeColumn ( colIndex ) ; }
public static UnManagedProtectionSet checkUnManagedProtectionSetExistsInDB ( DbClient dbClient , String nativeGuid ) throws IOException { List < UnManagedProtectionSet > cgs = CustomQueryUtility . getUnManagedProtectionSetByNativeGuid ( dbClient , nativeGuid ) ; Iterator < UnManagedProtectionSet > cgsItr = cgs . iterator ( ) ; if $F2921 ( cgsItr ) $F43105 ( cgsItr ) $F1274 }
$F45746 ( destbytes , srcString , destOffset , srcOffset , count , i )
private void checkQuery ( String expRes , String qry ) throws Exception { assertEquals ( NUM00 , executeHiveQuery ( NUM00 ) ) ; assertEquals ( NUM00 , executeHiveQuery ( $F39 + qry ) ) ; IgfsInputStream in = igfs . open ( new IgfsPath $F580 ) ; $F5344 ( buf , in ) in . read ( buf ) ; assertEquals ( expRes , new String ( buf ) ) ; }
public final V updateAndGet ( UnaryOperator $F2193 updateFunction ) { V prev , next ; do { prev = get ( ) ; next = updateFunction . apply ( prev ) ; } while ( ! compareAndSet ( prev , next ) ) ; return next ; }
public void close $F72 { stopTimers ( ) ; closed = _BOOL ; $F355 ( window ) if ( listener != null ) { listener . notificationRemoved ( this ) ; } if ( activityListener != null ) { ActivityTracker . removeActivityListener ( activityListener ) ; } }
protected boolean shouldMove ( final ILoadBalancerService loadBalancerService ) { $F10057 ( loadBalancerService ) final boolean highlyUtilizedService ; try { final UUID serviceUUID = resourceManager . getDataServiceUUID ( ) ; highlyUtilizedService = loadBalancerService . isHighlyUtilizedDataService ( serviceUUID ) ; } catch ( Exception ex ) $F95123 ( log , _BOOL ) if ( ! highlyUtilizedService ) { $F140706 ( log ) return _BOOL ; } final ResourceScores resourceScores = resourceManager . getResourceScores ( ) ; final boolean shouldMove = ( resourceScores . percentCPUTime >= resourceManager . movePercentCpuTimeThreshold ) || ( resourceScores . majorPageFaultsPerSec > NUM00 ) || ( resourceScores . dataDirBytesFree < Bytes . gigabyte * NUM00 ) || ( resourceScores . dataDirBytesFree < Bytes . gigabyte * NUM00 ) ; return shouldMove ; }
$F29422 ( encodedPublicKey , decodedKey , Base64 , keyFactory , KeyFactory , KEY_FACTORY_ALGORITHM , e , Log , TAG )
private static $F131 convertThrowableMessages ( final $F131 args ) { if ( args != null ) { for ( $F1139 ( i , args ) ) { if ( args [ i ] instanceof Throwable ) { Throwable t = ( Throwable ) args [ i ] ; if ( t . getMessage ( ) != null ) { args [ i ] = t . getMessage ( ) ; } } } } return args ; }
protected void wrapContent $F72 { $F24126 ( DO_WRAP ) $F2329 ( mText ) Canvas c = new Canvas $F72 ; c . setFont ( mFont ) ; $F23540 ( fm , c , mFont ) String string = getText ( ) ; if ( mToUpperCase ) $F168450 ( string ) int tw = fm . stringWidth ( string ) + NUM00 * ( mHorizontalPadding + mHorizontalMargin ) ; int th = fm . getMaxAscent ( ) + NUM00 * fm . getMaxDescent ( ) + NUM00 * ( mVerticalPadding + mVerticalMargin ) ; mWidget . setWrapWidth ( tw ) ; mWidget . setWrapHeight ( th ) ; if ( tw > mWidget . getMinWidth ( ) ) { mWidget . setMinWidth ( tw ) ; } if ( th > mWidget . getMinHeight ( ) ) { mWidget . setMinHeight ( th ) ; } if ( mWidget . getHorizontalDimensionBehaviour ( ) == ConstraintWidget . DimensionBehaviour . WRAP_CONTENT ) { mWidget . setWidth ( tw ) ; } if ( mWidget . getVerticalDimensionBehaviour ( ) == ConstraintWidget . DimensionBehaviour . WRAP_CONTENT ) { mWidget . setHeight ( th ) ; } if ( mWidget . getHorizontalDimensionBehaviour ( ) == ConstraintWidget . DimensionBehaviour . FIXED ) { if ( mWidget . getWidth ( ) <= mWidget . getMinWidth ( ) ) { mWidget . setHorizontalDimensionBehaviour ( ConstraintWidget . DimensionBehaviour . WRAP_CONTENT ) ; } } if ( mWidget . getVerticalDimensionBehaviour ( ) == ConstraintWidget . DimensionBehaviour . FIXED ) { if ( mWidget . getHeight ( ) <= mWidget . getMinHeight ( ) ) { mWidget . setVerticalDimensionBehaviour ( ConstraintWidget . DimensionBehaviour . WRAP_CONTENT ) ; } } int baseline = fm . getAscent ( ) + fm . getMaxDescent ( ) + mVerticalPadding + mVerticalMargin ; mWidget . setBaselineDistance ( baseline ) ; }
public RAFDirectory ( Path path , LockFactory lockFactory ) throws IOException { super ( path , lockFactory ) ; path . toFile ( ) ; }
public static void addMinutesToList ( Context context , $F15272 values , $F5 labels , int minutes ) { $F12747 ( index , values , minutes ) if ( index != - NUM00 ) $F932 String label = constructReminderLabel ( context , minutes , _BOOL ) ; $F2199 ( len , values ) for ( $F119 ( i , len ) ) { if ( minutes < values . get ( i ) ) { values . add ( i , minutes ) ; labels . add ( i , label ) ; $F665 } } values . add ( minutes ) ; labels . add ( len , label ) ; }
void recomposeVariables ( ElemVariable elemVar ) { if ( $F6798 ( getVariableOrParamComposed , elemVar ) == null ) { elemVar . setIsTopLevel ( _BOOL ) ; $F232083 ( elemVar , m_variables ) m_variables . addElement ( elemVar ) ; } }
public void propertyChange ( PropertyChangeEvent e ) { String propertyName = e . getPropertyName ( ) ; if ( propertyName == NUM00 ) { if ( e . getOldValue ( ) == Boolean . FALSE && e . getNewValue ( ) == Boolean . TRUE ) { handlePopupIsVisibleEvent ( _BOOL ) ; } else if ( e . getOldValue ( ) == Boolean . TRUE && e . getNewValue ( ) == Boolean . FALSE ) { handlePopupIsVisibleEvent ( _BOOL ) ; } } }
private static $F2027 maybeSort $F23416 ( values ) { if ( ! isSorted ( values , NUM00 , _BOOL ) ) { values = values . clone ( ) ; Arrays . sort ( values ) ; } return values ; }
public int executeUpdate ( String sql ) throws GenericDataSourceException { Statement stmt = null ; try { $F2715 ( stmt , _connection ) return stmt . executeUpdate ( sql ) ; } catch ( SQLException sqle ) { throw new GenericDataSourceException ( NUM00 + _sql , sqle ) ; } finally { if ( stmt != null ) { try $F881 ( stmt ) catch ( SQLException sqle ) { Debug . logWarning ( $F5351 ( sqle ) , module ) ; } } } }
private void doTextNormal ( final PDFPage cmds , final String text ) { final PointF zero = new PointF $F72 ; final Matrix scale = new Matrix $F72 ; Utils . setMatValues ( scale , fsize , NUM00 , NUM00 , fsize * th , NUM00 , tr ) ; final Matrix at = new Matrix $F72 ; final List < PDFGlyph > l = ( List < PDFGlyph > ) font . getGlyphs ( text ) ; for ( final PDFGlyph glyph : l ) { at . set ( cur ) ; at . preConcat ( scale ) ; final PointF advance = glyph . addCommands ( cmds , at , tm ) ; float advanceX = ( advance . x * fsize ) + tc ; if ( glyph . getChar ( ) == NUM00 ) { advanceX += tw ; } advanceX *= th ; cur . preTranslate ( advanceX , advance . y ) ; } final $F5415 src = { zero . x , zero . y } ; final $F5415 dst = new float [ src . length ] ; cur . mapPoints ( dst , src ) ; prevEnd . set ( dst [ NUM00 ] , dst [ NUM00 ] ) ; }
public synchronized static void initialize ( Connection conn ) throws SQLException { if ( logHadoopIdPatterns != null && logLineagePatterns != null ) $F932 loadLineagePatterns ( conn ) ; loadHadoopIdPatterns ( conn ) ; }
public void addIndices ( Collection < IIndex > indices ) { for ( Iterator < IIndex > it = indices . iterator ( ) ; it . hasNext ( ) ; ) { addIndex ( ( IIndex ) it . next ( ) ) ; } }
public static boolean isCookieSecure $F72 { return secureCookie ; }
public static List < ObjectModel > loadJsonStream ( InputStream input ) { List < ObjectModel > $F204 ( models ) ; Reader reader = new InputStreamReader ( input ) ; ObjectModel [ ] objectModels = GSON . fromJson ( reader , ObjectModel [ ] . class ) ; for ( ObjectModel objectModel : objectModels ) $F207 ( models , objectModel ) return models ; }
protected MultistepExprHolder createMultistepExprList ( Vector paths ) { MultistepExprHolder first = null ; $F2199 ( n , paths ) for ( $F119 ( i , n ) ) { $F55733 ( eo , paths , i ) if ( null == eo ) $F598 LocPathIterator lpi = ( LocPathIterator ) eo . getExpression ( ) ; int numPaths = countSteps ( lpi ) ; if ( numPaths > NUM00 ) { if ( null == first ) first = new MultistepExprHolder ( eo , numPaths , null ) ; else first = first . addInSortedOrder ( eo , numPaths ) ; } } if ( ( null == first ) || ( first . getLength ( ) <= NUM00 ) ) $F1274 else return first ; }
private int addWordlenWeights ( Channel chan , int weightIdx ) { $F2027 weigthsTab = atrac3p_wl_weights [ chan . chNum * NUM00 + weightIdx - NUM00 ] ; for ( int i = NUM00 ; i < ctx . numQuantUnits ; i ++ ) { chan . quWordlen [ i ] += weigthsTab [ i ] ; if ( chan . quWordlen [ i ] < NUM00 || chan . quWordlen [ i ] > NUM00 ) { log . error ( String . format ( NUM00 , i , chan . quWordlen [ i ] ) ) ; return AT3P_ERROR ; } } $F1082 }
public void testUpdate3 $F72 throws SQLException { DatabaseCreator . fillFKStrictTable ( conn ) ; $F283254 ( statement , DatabaseCreator ) $F62856 ( statement , DatabaseCreator ) }
final void pruneExceptionalOut ( IR ir ) { int n = getNumberOfExceptionalOut ( ) ; if ( n > NUM00 ) { ComputedBBEnum handlers = new ComputedBBEnum ( n ) ; $F12039 e = forwardRealInstrEnumerator ( ) ; while $F1444 ( e ) { $F12043 ( x , e ) $F32409 bbs = getApplicableExceptionalOut ( x ) ; while $F1444 ( bbs ) { $F32413 ( bb , bbs ) handlers . addPossiblyDuplicateElement ( bb ) ; } } deleteExceptionalOut ( ) ; for ( int i = NUM00 ; handlers . hasMoreElements ( ) ; i ++ ) { ExceptionHandlerBasicBlock b = ( ExceptionHandlerBasicBlock ) handlers . nextElement ( ) ; insertOut ( b ) ; } } recomputeNormalOut ( ir ) ; }
private Pair < DBIDVar , Double > singleIteration ( $F42616 relationx , Relation < ? extends NumberVector > relationy ) { $F2601 ( dim , RelationUtil , relationx ) $F2601 ( dimy , RelationUtil , relationy ) assert ( dim == NUM00 ) ; KNNQuery $F2193 knnQuery = QueryUtil . getKNNQuery ( relationx , getDistanceFunction ( ) , k + NUM00 ) ; ArrayModifiableDBIDs ids = DBIDUtil . newArray ( relationx . getDBIDs ( ) ) ; $F112999 ( ids ) $F3789 X = new double [ ids . size ( ) ] [ NUM00 ] ; $F3789 F = new double [ ids . size ( ) ] [ ids . size ( ) ] ; $F3789 Y = new double [ ids . size ( ) ] [ dimy ] ; { int i = NUM00 ; for ( DBIDIter id = ids . iter ( ) ; id . valid ( ) ; $F102236 ( id , i ) ) { { $F42637 ( vec , relationx , id ) double la = vec . doubleValue ( NUM00 ) ; double lo = vec . doubleValue ( NUM00 ) ; X [ i ] [ NUM00 ] = NUM00 ; X [ i ] [ NUM00 ] = la ; X [ i ] [ NUM00 ] = lo ; X [ i ] [ NUM00 ] = la * lo ; X [ i ] [ NUM00 ] = la * la ; X [ i ] [ NUM00 ] = lo * lo ; } { final NumberVector vecy = relationy . get ( id ) ; for ( $F119 ( d , dimy ) ) { $F42635 ( idy , vecy , d ) Y [ i ] [ d ] = idy ; } } { KNNList neighbors = knnQuery . getKNNForDBID ( id , k + NUM00 ) ; ModifiableDBIDs neighborhood = DBIDUtil . newArray ( neighbors . size ( ) ) ; for ( $F60471 ( neighbor , neighbors ) ) { $F95009 ( DBIDUtil , id , neighbor ) neighborhood . add ( neighbor ) ; } $F162129 ( F , i ) final int nweight = - NUM00 / neighborhood . size ( ) ; for ( $F134224 ( iter , neighborhood ) ) { int pos = ids . binarySearch ( iter ) ; assert ( pos >= NUM00 ) ; F [ pos ] [ i ] = nweight ; } } } } $F3789 common = times ( transposeTimesTranspose ( X , F ) , F ) ; $F3789 b = times ( inverse ( times ( common , X ) ) , times ( common , Y ) ) ; $F3789 sigmaMat = times ( F , minusEquals ( times ( X , b ) , times ( F , Y ) ) ) ; final double sigma_sum_square = normF ( sigmaMat ) / ( $F2281 ( relationx ) - NUM00 ) ; final double norm = NUM00 / Math . sqrt ( sigma_sum_square ) ; $F3789 E = timesEquals ( times ( F , minus ( Y , times ( X , b ) ) ) , norm ) ; DBIDVar worstid = DBIDUtil . newVar ( ) ; double worstscore = Double . NEGATIVE_INFINITY ; int i = NUM00 ; for ( DBIDIter id = ids . iter ( ) ; id . valid ( ) ; $F102236 ( id , i ) ) { double err = squareSum ( getRow ( E , i ) ) ; if ( err > worstscore ) { worstscore = err ; worstid . set ( id ) ; } } return new $F24650 ( worstid , Math . sqrt ( worstscore ) ) ; }
$F146067 ( zzBuffer , zzStartRead , zzMarkedPos )
private void cleanupMinidumpFile $F72 { if ( ! CrashFileManager . tryMarkAsUploaded ( mFileToUpload ) ) { Log . w ( TAG , NUM00 + mFileToUpload + NUM00 ) ; if $F7119 ( mFileToUpload ) { $F248237 ( Log , TAG , mFileToUpload ) } } }
public String toSpacedString $F72 { $F61105 ( original , toString ) $F1121 ( builder ) for ( $F1088 ( i , original ) ) { if ( i > NUM00 && ( i % NUM00 ) == NUM00 ) $F84 ( builder ) $F4137 ( builder , original , i ) } $F92 ( builder ) }
private int parseContentType $F4741 ( b , off ) throws ParseException { contentTypeVal_ = PrimitivesParser . parseByte ( b , off ) ; if ( ContentType . deserialize ( contentTypeVal_ ) == null ) { throw new BadCiphertextException $F580 ; } $F1082 }
@ Benchmark public void nonCaching $F72 $F5795 ( run )
public int decode ( String data , OutputStream out ) throws IOException { byte b1 , b2 , b3 , b4 ; int length = NUM00 ; $F1749 ( end , data ) while ( end > NUM00 ) { if ( ! ignore ( data . charAt ( end - NUM00 ) ) ) $F5153 end -- ; } int i = NUM00 ; int finish = end - NUM00 ; i = nextI ( data , i , finish ) ; while ( i < finish ) { $F75763 ( b1 , decodingTable , data , i ) i = nextI ( data , i , finish ) ; $F75763 ( b2 , decodingTable , data , i ) i = nextI ( data , i , finish ) ; $F75763 ( b3 , decodingTable , data , i ) i = nextI ( data , i , finish ) ; $F75763 ( b4 , decodingTable , data , i ) $F75765 ( b1 , b2 , b3 , b4 ) $F75768 ( out , b1 , b2 ) $F75768 ( out , b2 , b3 ) $F75770 ( out , b3 , b4 ) length += NUM00 ; i = nextI ( data , i , finish ) ; } length += decodeLastBlock ( out , data . charAt ( end - NUM00 ) , data . charAt ( end - NUM00 ) , data . charAt ( end - NUM00 ) , data . charAt ( end - NUM00 ) ) ; return length ; }
private void rLineTo ( float dx , float dy ) { if ( isEmpty ( ) ) { mPath . moveTo ( mLastX = NUM00 , mLastY = NUM00 ) ; } dx += mLastX ; dy += mLastY ; mPath . lineTo ( mLastX = dx , mLastY = dy ) ; }
$F1 public ConflictResults parseOutput $F2236 ( stdout , stderr ) { $F191108 ( contentConflicts ) $F191108 ( renameConflicts ) $F191108 ( bothConflicts ) final $F806 lines = getLines ( stderr ) ; for ( final String line : lines ) { $F55879 ( index , line ) if ( index != - NUM00 ) { if ( StringUtils . endsWith ( line , BOTH_CONFLICTS_SUFFIX ) ) { bothConflicts . add ( line . substring ( NUM00 , index ) ) ; } else if ( StringUtils . endsWith ( line , RENAME_CONFLICT_SUFFIX ) ) { renameConflicts . add ( line . substring ( NUM00 , index ) ) ; } else { contentConflicts . add ( line . substring ( NUM00 , index ) ) ; } } } return new ConflictResults ( contentConflicts , renameConflicts , bothConflicts ) ; }
protected void sendStart ( final OutputStream out ) throws IOException { $F1932 ( LOG ) out . write ( EXTRA_BYTES ) ; out . write ( getPartBoundary ( ) ) ; out . write ( CRLF_BYTES ) ; }
public void addActualQty ( BigDecimal add ) { m_actualQty = m_actualQty . add ( add ) ; }
protected static boolean isVowel ( final char c ) { final char l = Character . toLowerCase ( c ) ; return ( $F152535 ( l ) || ( l == NUM00 ) || ( l == NUM00 ) ) ; }
private $F96 createPreviewBuffer ( Size previewSize ) { int bitsPerPixel = ImageFormat . getBitsPerPixel ( ImageFormat . NV21 ) ; long sizeInBits = previewSize . getHeight ( ) * previewSize . getWidth ( ) * bitsPerPixel ; int bufferSize = $F96308 ( Math , sizeInBits ) + NUM00 ; $F2175 ( byteArray , bufferSize ) $F23500 ( buffer , ByteBuffer , byteArray ) if ( ! buffer . hasArray ( ) || ( buffer . array ( ) != byteArray ) ) $F4639 mBytesToByteBuffer . put ( byteArray , buffer ) ; return byteArray ; }
$F46189 ( task , initExecutorsIfNeed , taskExecutorForCachedImages )
public static void printStackTrace ( SQLException e , PrintWriter pw ) { SQLException next = e ; while ( next != null ) { next . printStackTrace ( pw ) ; next = next . getNextException ( ) ; if ( next != null ) $F12204 ( pw ) } }
protected void initializeWorld $F72 { Body ground = new SimulationBody $F72 ; { Convex c = Geometry . createRectangle ( NUM00 , NUM00 ) ; BodyFixture bf = new BodyFixture ( c ) ; ground . addFixture ( bf ) ; } ground . translate ( new Vector2 $F261843 ) ; ground . setMass ( MassType . INFINITE ) ; world . addBody ( ground ) ; Body head = new SimulationBody $F72 ; { Convex c = Geometry . createCircle ( NUM00 ) ; BodyFixture bf = new BodyFixture ( c ) ; head . addFixture ( bf ) ; } head . setMass ( MassType . NORMAL ) ; world . addBody ( head ) ; Body torso = new SimulationBody $F72 ; { Convex c = Geometry . createRectangle ( NUM00 , NUM00 ) ; BodyFixture bf = new BodyFixture ( c ) ; torso . addFixture ( bf ) ; } { Convex c = Geometry . createRectangle ( NUM00 , NUM00 ) ; c . translate ( new Vector2 $F32532 ) ; BodyFixture bf = new BodyFixture ( c ) ; torso . addFixture ( bf ) ; } torso . translate ( new Vector2 $F261843 ) ; torso . setMass ( MassType . NORMAL ) ; world . addBody ( torso ) ; Body rightHumerus = new SimulationBody $F72 ; { Convex c = Geometry . createRectangle ( NUM00 , NUM00 ) ; BodyFixture bf = new BodyFixture ( c ) ; rightHumerus . addFixture ( bf ) ; } rightHumerus . translate ( new Vector2 $F261843 ) ; rightHumerus . setMass ( MassType . NORMAL ) ; world . addBody ( rightHumerus ) ; Body rightUlna = new SimulationBody $F72 ; { Convex c = Geometry . createRectangle ( NUM00 , NUM00 ) ; BodyFixture bf = new BodyFixture ( c ) ; rightUlna . addFixture ( bf ) ; } rightUlna . translate ( new Vector2 $F261843 ) ; rightUlna . setMass ( MassType . NORMAL ) ; world . addBody ( rightUlna ) ; Body neck = new SimulationBody $F72 ; { Convex c = Geometry . createRectangle ( NUM00 , NUM00 ) ; BodyFixture bf = new BodyFixture ( c ) ; neck . addFixture ( bf ) ; } neck . translate ( new Vector2 $F261843 ) ; neck . setMass ( MassType . NORMAL ) ; world . addBody ( neck ) ; Body leftHumerus = new SimulationBody $F72 ; { Convex c = Geometry . createRectangle ( NUM00 , NUM00 ) ; BodyFixture bf = new BodyFixture ( c ) ; leftHumerus . addFixture ( bf ) ; } leftHumerus . translate ( new Vector2 ( $F64496 ) ) ; leftHumerus . setMass ( MassType . NORMAL ) ; world . addBody ( leftHumerus ) ; Body leftUlna = new SimulationBody $F72 ; { Convex c = Geometry . createRectangle ( NUM00 , NUM00 ) ; BodyFixture bf = new BodyFixture ( c ) ; leftUlna . addFixture ( bf ) ; } leftUlna . translate ( new Vector2 ( $F64496 ) ) ; leftUlna . setMass ( MassType . NORMAL ) ; world . addBody ( leftUlna ) ; Body rightFemur = new SimulationBody $F72 ; { Convex c = Geometry . createRectangle ( NUM00 , NUM00 ) ; BodyFixture bf = new BodyFixture ( c ) ; rightFemur . addFixture ( bf ) ; } rightFemur . translate ( new Vector2 $F261843 ) ; rightFemur . setMass ( MassType . NORMAL ) ; world . addBody ( rightFemur ) ; Body leftFemur = new SimulationBody $F72 ; { Convex c = Geometry . createRectangle ( NUM00 , NUM00 ) ; BodyFixture bf = new BodyFixture ( c ) ; leftFemur . addFixture ( bf ) ; } leftFemur . translate ( new Vector2 ( $F64496 ) ) ; leftFemur . setMass ( MassType . NORMAL ) ; world . addBody ( leftFemur ) ; Body rightTibia = new SimulationBody $F72 ; { Convex c = Geometry . createRectangle ( NUM00 , NUM00 ) ; BodyFixture bf = new BodyFixture ( c ) ; rightTibia . addFixture ( bf ) ; } rightTibia . translate ( new Vector2 $F261843 ) ; rightTibia . setMass ( MassType . NORMAL ) ; world . addBody ( rightTibia ) ; Body leftTibia = new SimulationBody $F72 ; { Convex c = Geometry . createRectangle ( NUM00 , NUM00 ) ; BodyFixture bf = new BodyFixture ( c ) ; leftTibia . addFixture ( bf ) ; } leftTibia . translate ( new Vector2 ( $F64496 ) ) ; leftTibia . setMass ( MassType . NORMAL ) ; world . addBody ( leftTibia ) ; RevoluteJoint headToNeck = new RevoluteJoint ( head , neck , new Vector2 $F261843 ) ; headToNeck . setLimitEnabled ( _BOOL ) ; headToNeck . setLimits ( Math . toRadians ( NUM00 ) , Math . toRadians ( NUM00 ) ) ; headToNeck . setReferenceAngle ( Math . toRadians ( NUM00 ) ) ; headToNeck . setMotorEnabled ( _BOOL ) ; headToNeck . setMotorSpeed ( Math . toRadians ( NUM00 ) ) ; headToNeck . setMaximumMotorTorque ( NUM00 ) ; headToNeck . setCollisionAllowed ( _BOOL ) ; world . addJoint ( headToNeck ) ; RevoluteJoint neckToTorso = new RevoluteJoint ( neck , torso , new Vector2 $F261843 ) ; neckToTorso . setLimitEnabled ( _BOOL ) ; neckToTorso . setLimits ( Math . toRadians ( NUM00 ) , Math . toRadians ( NUM00 ) ) ; neckToTorso . setReferenceAngle ( Math . toRadians ( NUM00 ) ) ; neckToTorso . setMotorEnabled ( _BOOL ) ; neckToTorso . setMotorSpeed ( Math . toRadians ( NUM00 ) ) ; neckToTorso . setMaximumMotorTorque ( NUM00 ) ; neckToTorso . setCollisionAllowed ( _BOOL ) ; world . addJoint ( neckToTorso ) ; RevoluteJoint torsoToLeftHumerus = new RevoluteJoint ( torso , leftHumerus , new Vector2 ( $F64496 ) ) ; torsoToLeftHumerus . setLimitEnabled ( _BOOL ) ; torsoToLeftHumerus . setLimits ( Math . toRadians ( NUM00 ) , Math . toRadians ( NUM00 ) ) ; torsoToLeftHumerus . setReferenceAngle ( Math . toRadians ( NUM00 ) ) ; torsoToLeftHumerus . setMotorEnabled ( _BOOL ) ; torsoToLeftHumerus . setMotorSpeed ( Math . toRadians ( NUM00 ) ) ; torsoToLeftHumerus . setMaximumMotorTorque ( NUM00 ) ; torsoToLeftHumerus . setCollisionAllowed ( _BOOL ) ; world . addJoint ( torsoToLeftHumerus ) ; RevoluteJoint torsoToRightHumerus = new RevoluteJoint ( torso , rightHumerus , new Vector2 $F261843 ) ; torsoToRightHumerus . setLimitEnabled ( _BOOL ) ; torsoToRightHumerus . setLimits ( Math . toRadians ( NUM00 ) , Math . toRadians ( NUM00 ) ) ; torsoToRightHumerus . setReferenceAngle ( Math . toRadians ( NUM00 ) ) ; torsoToRightHumerus . setMotorEnabled ( _BOOL ) ; torsoToRightHumerus . setMotorSpeed ( Math . toRadians ( NUM00 ) ) ; torsoToRightHumerus . setMaximumMotorTorque ( NUM00 ) ; torsoToRightHumerus . setCollisionAllowed ( _BOOL ) ; world . addJoint ( torsoToRightHumerus ) ; RevoluteJoint rightHumerusToRightUlna = new RevoluteJoint ( rightHumerus , rightUlna , new Vector2 $F261843 ) ; rightHumerusToRightUlna . setLimitEnabled ( _BOOL ) ; rightHumerusToRightUlna . setLimits ( Math . toRadians ( NUM00 ) , Math . toRadians ( NUM00 ) ) ; rightHumerusToRightUlna . setReferenceAngle ( Math . toRadians ( NUM00 ) ) ; rightHumerusToRightUlna . setMotorEnabled ( _BOOL ) ; rightHumerusToRightUlna . setMotorSpeed ( Math . toRadians ( NUM00 ) ) ; rightHumerusToRightUlna . setMaximumMotorTorque ( NUM00 ) ; rightHumerusToRightUlna . setCollisionAllowed ( _BOOL ) ; world . addJoint ( rightHumerusToRightUlna ) ; RevoluteJoint leftHumerusToLeftUlna = new RevoluteJoint ( leftHumerus , leftUlna , new Vector2 ( $F64496 ) ) ; leftHumerusToLeftUlna . setLimitEnabled ( _BOOL ) ; leftHumerusToLeftUlna . setLimits ( Math . toRadians ( NUM00 ) , Math . toRadians ( NUM00 ) ) ; leftHumerusToLeftUlna . setReferenceAngle ( Math . toRadians ( NUM00 ) ) ; leftHumerusToLeftUlna . setMotorEnabled ( _BOOL ) ; leftHumerusToLeftUlna . setMotorSpeed ( Math . toRadians ( NUM00 ) ) ; leftHumerusToLeftUlna . setMaximumMotorTorque ( NUM00 ) ; leftHumerusToLeftUlna . setCollisionAllowed ( _BOOL ) ; world . addJoint ( leftHumerusToLeftUlna ) ; RevoluteJoint torsoToRightFemur = new RevoluteJoint ( torso , rightFemur , new Vector2 $F261843 ) ; torsoToRightFemur . setLimitEnabled ( _BOOL ) ; torsoToRightFemur . setLimits ( Math . toRadians ( NUM00 ) , Math . toRadians ( NUM00 ) ) ; torsoToRightFemur . setReferenceAngle ( Math . toRadians ( NUM00 ) ) ; torsoToRightFemur . setMotorEnabled ( _BOOL ) ; torsoToRightFemur . setMotorSpeed ( Math . toRadians ( NUM00 ) ) ; torsoToRightFemur . setMaximumMotorTorque ( NUM00 ) ; torsoToRightFemur . setCollisionAllowed ( _BOOL ) ; world . addJoint ( torsoToRightFemur ) ; RevoluteJoint torsoToLeftFemur = new RevoluteJoint ( torso , leftFemur , new Vector2 ( $F64496 ) ) ; torsoToLeftFemur . setLimitEnabled ( _BOOL ) ; torsoToLeftFemur . setLimits ( Math . toRadians ( NUM00 ) , Math . toRadians ( NUM00 ) ) ; torsoToLeftFemur . setReferenceAngle ( Math . toRadians ( NUM00 ) ) ; torsoToLeftFemur . setMotorEnabled ( _BOOL ) ; torsoToLeftFemur . setMotorSpeed ( Math . toRadians ( NUM00 ) ) ; torsoToLeftFemur . setMaximumMotorTorque ( NUM00 ) ; torsoToLeftFemur . setCollisionAllowed ( _BOOL ) ; world . addJoint ( torsoToLeftFemur ) ; RevoluteJoint rightFemurToRightTibia = new RevoluteJoint ( rightFemur , rightTibia , new Vector2 $F261843 ) ; rightFemurToRightTibia . setLimitEnabled ( _BOOL ) ; rightFemurToRightTibia . setLimits ( Math . toRadians ( NUM00 ) , Math . toRadians ( NUM00 ) ) ; rightFemurToRightTibia . setReferenceAngle ( Math . toRadians ( NUM00 ) ) ; rightFemurToRightTibia . setMotorEnabled ( _BOOL ) ; rightFemurToRightTibia . setMotorSpeed ( Math . toRadians ( NUM00 ) ) ; rightFemurToRightTibia . setMaximumMotorTorque ( NUM00 ) ; rightFemurToRightTibia . setCollisionAllowed ( _BOOL ) ; world . addJoint ( rightFemurToRightTibia ) ; RevoluteJoint leftFemurToLeftTibia = new RevoluteJoint ( leftFemur , leftTibia , new Vector2 ( $F64496 ) ) ; leftFemurToLeftTibia . setLimitEnabled ( _BOOL ) ; leftFemurToLeftTibia . setLimits ( Math . toRadians ( NUM00 ) , Math . toRadians ( NUM00 ) ) ; leftFemurToLeftTibia . setReferenceAngle ( Math . toRadians ( NUM00 ) ) ; leftFemurToLeftTibia . setMotorEnabled ( _BOOL ) ; leftFemurToLeftTibia . setMotorSpeed ( Math . toRadians ( NUM00 ) ) ; leftFemurToLeftTibia . setMaximumMotorTorque ( NUM00 ) ; leftFemurToLeftTibia . setCollisionAllowed ( _BOOL ) ; world . addJoint ( leftFemurToLeftTibia ) ; }
public void readData ( DataInput din ) throws IOException { $F1643 ( byteCount , din ) $F89921 ( status , din ) $F89921 ( eventCount , din ) $F89921 ( messageCount , din ) $F41018 ( events , byteCount ) ; if $F3305 ( events ) { din . readFully ( events , NUM00 , events . length ) ; } }
public E remove ( int index ) { $F677 ( lock , this ) $F790 ( lock ) try { $F8867 ( elements , getArray ) int len = elements . length ; E oldValue = get ( elements , index ) ; int numMoved = len - index - NUM00 ; if ( numMoved == NUM00 ) setArray ( Arrays . copyOf ( elements , len - NUM00 ) ) ; else { $F131 newElements = new Object [ len - NUM00 ] ; $F135 ( System , elements , newElements , index ) System . arraycopy ( elements , index + NUM00 , newElements , index , numMoved ) ; setArray ( newElements ) ; } return oldValue ; } $F796 ( lock ) }
void createEdges ( Number [ ] v ) { $F31361 ( graph , Math , v , EdgeType ) $F31361 ( graph , Math , v , EdgeType ) $F31361 ( graph , Math , v , EdgeType ) $F31361 ( graph , Math , v , EdgeType ) $F31361 ( graph , Math , v , EdgeType ) $F31361 ( graph , Math , v , EdgeType ) $F31361 ( graph , Math , v , EdgeType ) $F31361 ( graph , Math , v , EdgeType ) $F31361 ( graph , Math , v , EdgeType ) $F31361 ( graph , Math , v , EdgeType ) $F31361 ( graph , Math , v , EdgeType ) $F31361 ( graph , Math , v , EdgeType ) $F31361 ( graph , Math , v , EdgeType ) $F31361 ( graph , Math , v , EdgeType ) $F31361 ( graph , Math , v , EdgeType ) $F31361 ( graph , Math , v , EdgeType ) $F31361 ( graph , Math , v , EdgeType ) $F31361 ( graph , Math , v , EdgeType ) $F31361 ( graph , Math , v , EdgeType ) }
$F1431 public DataResponse paginateList ( $F2540 ( requestParams ) , PaginateRequest paginateRequest , Object query , String defaultSort , Map properties ) { if ( paginateRequest == null ) { paginateRequest = new PaginateRequest $F72 ; } if ( paginateRequest . getStart ( ) == null ) { paginateRequest . setStart ( RequestUtil . getInteger ( requestParams , NUM00 , NUM00 ) ) ; } if ( paginateRequest . getSize ( ) == null ) { paginateRequest . setSize ( RequestUtil . getInteger ( requestParams , NUM00 , NUM00 ) ) ; } if ( paginateRequest . getOrder ( ) == null ) { paginateRequest . setOrder ( requestParams . get ( NUM00 ) ) ; } if ( paginateRequest . getSort ( ) == null ) { paginateRequest . setSort ( requestParams . get ( NUM00 ) ) ; } Integer start = paginateRequest . getStart ( ) ; if ( start == null || start < NUM00 ) { start = NUM00 ; } Integer size = paginateRequest . getSize ( ) ; if ( size == null || size < NUM00 ) { size = NUM00 ; } String sort = paginateRequest . getSort ( ) ; $F13265 ( sort , defaultSort ) String order = paginateRequest . getOrder ( ) ; $F23170 ( order ) if $F31724 ( sort , properties ) { $F16628 ( qp , properties , sort ) if ( qp == null ) { throw new ActivitiIllegalArgumentException ( NUM00 + sort + NUM00 ) ; } if ( query instanceof AbstractQuery ) { AbstractQuery queryObject = ( AbstractQuery ) query ; QueryProperty queryProperty = ( QueryProperty ) qp ; queryObject . orderBy ( queryProperty ) ; if $F3057 ( order ) { queryObject . asc ( ) ; } else if $F3057 ( order ) { queryObject . desc ( ) ; } else { throw new ActivitiIllegalArgumentException ( NUM00 + order + NUM00 ) ; } } else if ( query instanceof org . activiti . idm . engine . impl . AbstractQuery ) { org . activiti . idm . engine . impl . AbstractQuery queryObject = ( org . activiti . idm . engine . impl . AbstractQuery ) query ; org . activiti . idm . api . QueryProperty queryProperty = ( org . activiti . idm . api . QueryProperty ) qp ; queryObject . orderBy ( queryProperty ) ; if $F3057 ( order ) { queryObject . asc ( ) ; } else if $F3057 ( order ) { queryObject . desc ( ) ; } else { throw new ActivitiIllegalArgumentException ( NUM00 + order + NUM00 ) ; } } } DataResponse response = new DataResponse $F72 ; response . setStart ( start ) ; response . setSort ( sort ) ; response . setOrder ( order ) ; if ( query instanceof AbstractQuery ) { AbstractQuery queryObject = ( AbstractQuery ) query ; List list = processList ( queryObject . listPage ( start , size ) ) ; response . setTotal ( queryObject . count ( ) ) ; response . setSize ( list . size ( ) ) ; response . setData ( list ) ; } else if ( query instanceof org . activiti . idm . engine . impl . AbstractQuery ) { org . activiti . idm . engine . impl . AbstractQuery queryObject = ( org . activiti . idm . engine . impl . AbstractQuery ) query ; List list = processList ( queryObject . listPage ( start , size ) ) ; response . setTotal ( queryObject . count ( ) ) ; response . setSize ( list . size ( ) ) ; response . setData ( list ) ; } return response ; }
private static < T extends Component > T buildRow ( final JPanel panel , final String labelText , final String hint , final T component , final boolean isLast ) { $F174885 ( component , COLORPANEL_WIDTH , COLORPANEL_HEIGHT ) $F40881 ( rowPanel ) rowPanel . setBorder ( new EmptyBorder ( NUM00 , NUM00 , isLast ? NUM00 : NUM00 , NUM00 ) ) ; rowPanel . add ( new JLabel ( labelText ) , BorderLayout . CENTER ) ; rowPanel . add ( CHintCreator . createHintPanel ( component , hint ) , BorderLayout . EAST ) ; panel . add ( rowPanel ) ; return component ; }
public Builder addTargetElements ( Element ... additionalTargets ) { $F68861 ( i , additionalTargets , targetElements ) return this ; }
public void curveTo $F130908 ( x1 , y1 , x2 , y2 , x3 , y3 ) { if $F37713 ( size ) { throw new IllegalPathStateException $F580 ; } Node lastPoint = get ( size ( ) - NUM00 ) ; lastPoint . mask |= C2_MASK ; lastPoint . x [ NUM00 ] = x1 ; lastPoint . y [ NUM00 ] = y1 ; if ( ( lastPoint . mask & C1C2_MASK ) == C1C2_MASK ) { lastPoint . keepColinear = Math . abs ( Geom . angle ( lastPoint . x [ NUM00 ] , lastPoint . y [ NUM00 ] , lastPoint . x [ NUM00 ] , lastPoint . y [ NUM00 ] ) - Geom . angle ( lastPoint . x [ NUM00 ] , lastPoint . y [ NUM00 ] , lastPoint . x [ NUM00 ] , lastPoint . y [ NUM00 ] ) ) < NUM00 ; } add ( new Node ( C1_MASK , x3 , y3 , x2 , y2 , x3 , y3 ) ) ; }
public void testDivideRoundUpNeg $F72 { String a = NUM00 ; int aScale = - NUM00 ; String b = NUM00 ; int bScale = NUM00 ; String c = NUM00 ; int resScale = - NUM00 ; $F1918 ( aNumber , a , aScale ) $F1918 ( bNumber , b , bScale ) BigDecimal result = aNumber . divide ( bNumber , resScale , BigDecimal . ROUND_UP ) ; $F1925 ( assertEquals , c , result ) $F1928 ( assertEquals , resScale , result ) }
private void writeMetaBits $F72 throws IOException { final byte $F46499 = genMetabitsData ( ) ; final long addr = m_metaBitsAddr < NUM00 ? physicalAddress ( m_metaBitsAddr ) : ( ( long ) m_metaBitsAddr ) < < ALLOCATION_SCALEUP ; if ( addr == NUM00 ) $F1155 ( m_metaBitsAddr ) assert addr > NUM00 ; try { $F51620 ( log , addr ) m_writeCacheService . write ( addr , ByteBuffer . wrap ( buf ) , NUM00 , _BOOL , m_metaBitsAddr < NUM00 ? m_metaBitsAddr : NUM00 ) ; } $F73196 ( e ) }
private void openCounterDataInputStream $F72 throws DataFallbackException { if ( dInput == null ) { if $F585 ( LOG ) LOG . debug ( $F2990 ( counterFile ) ) ; try { $F438 ( dInput , counterFile ) } catch ( IOException e ) { throw new DataFallbackException $F1783 ( e ) ; } } }
public CompositePredicate ( Predicate p1 , Predicate p2 ) $F23287 ( m_clauses , p1 , p2 )
public String readNextWord $F72 { if $F14498 ( tokenizer ) { return tokenizer . nextToken ( ) ; } else $F1337 }
public static final void toString ( StringBuffer output , String str ) { if ( str == null ) { $F84 ( output ) $F665 } $F6407 ( output , toString , str ) }
public static boolean testFileExists ( String name ) { boolean status ; if ( ( testSaveLocationExists ( ) ) && $F1264 ( name ) ) { $F63896 ( path , Environment ) File $F63897 ( newPath , constructFilePaths , path , name ) ; $F63900 ( status , newPath ) } else { status = _BOOL ; } return status ; }
$F1 public void buildAssociations ( Instances data ) throws Exception { buildAssociations ( ( Object ) data ) ; $F665 }
public void testFloatValueNeg $F72 { String a = NUM00 ; $F12208 ( aNumber , a ) float result = - NUM00 ; $F229387 ( assertTrue , aNumber , result ) }
public static String replaceFirst $F1947 ( s , sub , with ) { $F12747 ( i , s , sub ) $F5881 ( i , s ) return s . substring ( NUM00 , i ) + with + $F29991 ( s , i , sub ) ; }
private LocationHelper $F72 $F845
public void addObject ( String s ) throws Exception { inspect ( Class . forName ( s ) ) ; }
public static Element firstChildElement ( Element element , $F2689 childElementNames ) { $F1275 ( element ) $F15376 ( node , element ) if ( node != null ) { do { if ( $F15377 ( node , Node ) && childElementNames . contains ( node . getNodeName ( ) ) ) { $F6721 ( childElement , node ) return childElement ; } } while $F15388 ( node ) ; } $F1274 }
public static void main $F4374 ( args ) throws Exception { final JFrame frame = new HTMLTest ( args ) ; $F30055 ( frame , JFrame ) $F30070 ( frame ) frame . setVisible ( _BOOL ) ; }
$F16587 ( rawString )
public final void testAddAllHelperTextColorsFromArray $F72 { int helperTextColor1 = Color . BLACK ; int helperTextColor2 = Color . GRAY ; $F11844 ( helperTextColors1 ) helperTextColors1 [ NUM00 ] = helperTextColor1 ; helperTextColors1 [ NUM00 ] = helperTextColor2 ; PasswordEditText passwordEditText = new PasswordEditText ( getContext ( ) ) ; passwordEditText . addAllHelperTextColors ( helperTextColors1 ) ; passwordEditText . addAllHelperTextColors ( helperTextColors1 ) ; $F2306 helperTextColors2 = passwordEditText . getHelperTextColors ( ) ; assertEquals ( $F11620 ( helperTextColors1 , helperTextColors2 ) ) ; Iterator $F2305 iterator = helperTextColors2 . iterator ( ) ; assertEquals ( helperTextColor1 , ( int ) iterator . next ( ) ) ; assertEquals ( helperTextColor2 , ( int ) iterator . next ( ) ) ; }
private void normalize $F9830 ( in ) { double max = NUM00 ; for ( double d : in ) { $F46000 ( max , Math , d ) } for ( $F1139 ( i , in ) ) $F160348 ( in , i , max ) }
public void add ( T graphic ) $F250537 ( mLock , mGraphics , graphic , postInvalidate )
public static boolean writeToFile $F22381 ( filename , message , append ) { boolean result ; BufferedWriter writer ; try { $F88736 ( writer , filename , append ) writer . write ( message ) ; $F1769 ( writer ) $F1206 ( writer ) $F59 ( writer ) result = _BOOL ; } $F28453 ( result , _BOOL ) return result ; }
public int hashCode $F72 { return ( NUM00 * colorModel . hashCode ( ) ) + ( NUM00 * sampleModel . hashCode ( ) ) ; }
static public final float random ( float start , float end ) { return start + random . nextFloat ( ) * ( end - start ) ; }
public void writeFile ( String name , String mimeType , String fileName , $F96 data ) throws IOException { $F826 ( data ) $F50542 ( fileName ) out . writeBytes ( PREFIX ) ; out . writeBytes ( boundary ) ; out . writeBytes ( NEWLINE ) ; out . writeBytes ( NUM00 + name + NUM00 + fileName + NUM00 ) ; out . writeBytes ( NEWLINE ) ; if ( mimeType != null ) { out . writeBytes ( NUM00 + mimeType ) ; out . writeBytes ( NEWLINE ) ; } out . writeBytes ( NEWLINE ) ; $F17918 ( out , data ) out . writeBytes ( NEWLINE ) ; $F1206 ( out ) }
@ TargetApi ( Build . VERSION_CODES . ICE_CREAM_SANDWICH_MR1 ) private void onConfigurationChanged ( Configuration newConfig ) { final Locale newLocale = newConfig . locale ; $F7224 ( newLocale , mSystemLocale ) mSystemLocale = newLocale ; ensureSupportedLocale ( ) ; }
private static Boolean findConvexPolygon ( final PlanetModel planetModel , final Edge currentEdge , final GeoCompositePolygon rval , final EdgeBuffer edgeBuffer , final List < GeoPolygon > holes , final GeoPoint testPoint ) { final Set $F146131 $F9626 ( includedEdges ) ; includedEdges . add ( currentEdge ) ; Edge firstEdge = currentEdge ; Edge lastEdge = currentEdge ; while ( _BOOL ) { if ( firstEdge . startPoint == lastEdge . endPoint ) $F5153 final Edge newLastEdge = edgeBuffer . getNext ( lastEdge ) ; if ( isWithin ( newLastEdge . endPoint , includedEdges ) ) { final SidedPlane returnBoundary ; if ( firstEdge . startPoint != newLastEdge . endPoint ) { returnBoundary = new SidedPlane ( firstEdge . endPoint , firstEdge . startPoint , newLastEdge . endPoint ) ; } else { returnBoundary = null ; } boolean foundPointInside = _BOOL ; final Iterator $F146131 edgeIterator = edgeBuffer . iterator ( ) ; while $F2921 ( edgeIterator ) { final Edge edge = edgeIterator . next ( ) ; if ( ! includedEdges . contains ( edge ) && edge != newLastEdge ) { if ( edge . startPoint != newLastEdge . endPoint ) { if ( isWithin ( edge . startPoint , includedEdges , newLastEdge , returnBoundary ) ) $F3468 ( foundPointInside , _BOOL ) } if ( edge . endPoint != firstEdge . startPoint ) { if ( isWithin ( edge . endPoint , includedEdges , newLastEdge , returnBoundary ) ) $F3468 ( foundPointInside , _BOOL ) } } } if ( ! foundPointInside ) { includedEdges . add ( newLastEdge ) ; lastEdge = newLastEdge ; $F598 } } $F597 } while ( _BOOL ) { if ( firstEdge . startPoint == lastEdge . endPoint ) $F5153 final Edge newFirstEdge = edgeBuffer . getPrevious ( firstEdge ) ; if ( isWithin ( newFirstEdge . startPoint , includedEdges ) ) { final SidedPlane returnBoundary ; if ( newFirstEdge . startPoint != lastEdge . endPoint ) { returnBoundary = new SidedPlane ( lastEdge . startPoint , lastEdge . endPoint , newFirstEdge . startPoint ) ; } else { returnBoundary = null ; } boolean foundPointInside = _BOOL ; final Iterator $F146131 edgeIterator = edgeBuffer . iterator ( ) ; while $F2921 ( edgeIterator ) { final Edge edge = edgeIterator . next ( ) ; if ( ! includedEdges . contains ( edge ) && edge != newFirstEdge ) { if ( edge . startPoint != lastEdge . endPoint ) { if ( isWithin ( edge . startPoint , includedEdges , newFirstEdge , returnBoundary ) ) $F3468 ( foundPointInside , _BOOL ) } if ( edge . endPoint != newFirstEdge . startPoint ) { if ( isWithin ( edge . endPoint , includedEdges , newFirstEdge , returnBoundary ) ) $F3468 ( foundPointInside , _BOOL ) } } } if ( ! foundPointInside ) { includedEdges . add ( newFirstEdge ) ; firstEdge = newFirstEdge ; $F598 } } $F597 } if $F6214 ( includedEdges ) { return _BOOL ; } final List < GeoPoint > points = new $F162971 ( $F2958 ( includedEdges ) ) ; final BitSet internalEdges = new BitSet $F716 ( includedEdges ) ; final boolean returnIsInternal ; if ( firstEdge . startPoint == lastEdge . endPoint ) { if $F6214 ( includedEdges ) { return _BOOL ; } Edge edge = firstEdge ; points . add ( edge . startPoint ) ; int k = NUM00 ; while ( _BOOL ) { $F15290 ( edge , lastEdge ) points . add ( edge . endPoint ) ; internalEdges . set ( k ++ , edge . isInternal ) ; edge = edgeBuffer . getNext ( edge ) ; } returnIsInternal = lastEdge . isInternal ; for ( $F2277 ( i , points ) ) { final GeoPoint start = points . get ( i ) ; final GeoPoint end = points . get ( getLegalIndex ( i + NUM00 , points . size ( ) ) ) ; final Plane planeToFind = new Plane ( start , end ) ; int endPointIndex = - NUM00 ; for ( $F2277 ( j , points ) ) { final int index = getLegalIndex ( j + i + NUM00 , points . size ( ) ) ; if ( ! planeToFind . evaluateIsZero ( points . get ( index ) ) ) $F3468 ( endPointIndex , index ) } $F5881 ( endPointIndex , _BOOL ) } $F725 ( edgeBuffer ) } else { final SidedPlane returnSidedPlane = new SidedPlane ( firstEdge . endPoint , _BOOL , firstEdge . startPoint , lastEdge . endPoint ) ; final Edge returnEdge = new Edge ( firstEdge . startPoint , lastEdge . endPoint , returnSidedPlane , _BOOL ) ; final $F146132 edges = new ArrayList $F146131 $F716 ( includedEdges ) ; returnIsInternal = _BOOL ; Edge edge = firstEdge ; points . add ( edge . startPoint ) ; int k = NUM00 ; while ( _BOOL ) { points . add ( edge . endPoint ) ; internalEdges . set ( k ++ , edge . isInternal ) ; edges . add ( edge ) ; $F15290 ( edge , lastEdge ) edge = edgeBuffer . getNext ( edge ) ; } for ( $F2277 ( i , points ) ) { final GeoPoint start = points . get ( i ) ; final GeoPoint end = points . get ( getLegalIndex ( i + NUM00 , points . size ( ) ) ) ; final Plane planeToFind = new Plane ( start , end ) ; int endPointIndex = - NUM00 ; for ( $F2277 ( j , points ) ) { final int index = getLegalIndex ( j + i + NUM00 , points . size ( ) ) ; if ( ! planeToFind . evaluateIsZero ( points . get ( index ) ) ) $F3468 ( endPointIndex , index ) } $F5881 ( endPointIndex , _BOOL ) } edgeBuffer . replace ( edges , returnEdge ) ; } if ( testPoint != null && holes != null && $F3816 ( holes ) ) { final GeoPolygon testPolygon = new GeoConvexPolygon ( planetModel , points , null , internalEdges , returnIsInternal ) ; if ( testPolygon . isWithin ( testPoint ) ) $F1337 } final GeoPolygon realPolygon = new GeoConvexPolygon ( planetModel , points , holes , internalEdges , returnIsInternal ) ; if ( testPoint != null && $F45555 ( holes ) ) { if ( realPolygon . isWithin ( testPoint ) ) $F1337 } rval . addShape ( realPolygon ) ; return _BOOL ; }
public static Keymap fromKey ( final String key ) { $F25770 ( key ) final Keymap searchResult = instances . get ( key ) ; return searchResult ; }
private static boolean isGMTish ( String name ) { if $F3599 ( name ) { return _BOOL ; } $F12685 ( c1 , name ) $F12685 ( c2 , name ) $F12685 ( c3 , name ) if ( ! ( $F37111 ( c1 ) && $F37111 ( c2 ) && $F37111 ( c3 ) ) && ! ( $F37111 ( c1 ) && $F37111 ( c2 ) && $F37111 ( c3 ) ) && ! ( $F37111 ( c1 ) && $F37111 ( c2 ) && ( c3 == NUM00 ) ) ) { return _BOOL ; } $F25111 ( name , _BOOL ) $F28924 ( offset , name ) if $F3106 ( offset ) { return offset . equals ( NUM00 ) || offset . equals ( NUM00 ) || offset . equals ( NUM00 ) ; } else { return offset . equals ( NUM00 ) || offset . equals ( NUM00 ) || offset . equals ( NUM00 ) ; } }
private static String massageURI ( String uri ) { $F1382 ( uri ) $F1384 ( protocolEnd , uri ) if ( protocolEnd < NUM00 || isColonFollowedByPortNumber ( uri , protocolEnd ) ) $F21679 ( uri ) return uri ; }
public void delete ( int key ) { int i = binarySearch ( mKeys , NUM00 , mSize , key ) ; if ( i >= NUM00 ) $F21314 ( System , mKeys , i , mSize , mValues ) }
protected void addWholeMatch $F43574 ( sb , surface , analyzed ) $F7227 ( sb , surface )
public void start $F72 $F363139 ( stopAt , System , MAX_PROCESSING_TIME )
private $F131 singleRow ( int row ) { $F131 res = new Object [ this . nFields ] ; for ( int i = NUM00 ; i < this . nFields ; i += NUM00 ) { if ( this . isNull == null || ! this . isNull [ row * this . nFields + i ] ) { res [ i ] = ArrayFuncs . newInstance ( this . types [ i ] , NUM00 ) ; System . arraycopy ( this . data [ i ] , row , res [ i ] , NUM00 , NUM00 ) ; } } return res ; }
public static String removeChars ( String src , String chars ) { $F1749 ( i , src ) $F7542 ( sb , i ) for ( $F119 ( j , i ) ) { $F1280 ( c , src , j ) if $F85013 ( chars , c ) $F288 ( sb , c ) } $F92 ( sb ) }
private void addAllColumns $F72 throws SQLException { DatabaseMetaData metaData = getDatabaseMetaData ( ) ; $F24645 ( columns ) try ( ResultSet rs = metaData . getColumns ( null , null , normalizeObjectName ( statementModel . getTableName ( ) ) , null ) ) { while $F1682 ( rs ) { columns . add ( quoteObjectName ( rs . getString ( IDX_COLUMN_NAME ) ) ) ; } } columnNames = $F16104 ( columns ) ; addReturningClause ( ) ; }
public void loadHamNSpam ( Connection conn ) throws java . sql . SQLException { PreparedStatement pstmt = null ; ResultSet rs = null ; try { pstmt = conn . prepareStatement ( sqlQueries . getSqlString ( NUM00 , _BOOL ) ) ; $F47578 ( rs , pstmt ) $F8435 ham = getHamTokenCounts ( ) ; while $F1682 ( rs ) { $F27130 ( token , rs ) $F24632 ( count , rs ) if ( count > NUM00 ) $F1717 ( ham , token , count ) } log ( $F10532 ( ham ) ) ; $F59 ( rs ) $F59 ( pstmt ) pstmt = conn . prepareStatement ( sqlQueries . getSqlString ( NUM00 , _BOOL ) ) ; $F47578 ( rs , pstmt ) $F8435 spam = getSpamTokenCounts ( ) ; while $F1682 ( rs ) { $F27130 ( token , rs ) $F24632 ( count , rs ) if ( count > NUM00 ) $F1717 ( spam , token , count ) } log ( $F10532 ( spam ) ) ; $F59 ( rs ) $F59 ( pstmt ) pstmt = conn . prepareStatement ( sqlQueries . getSqlString ( NUM00 , _BOOL ) ) ; $F47578 ( rs , pstmt ) if $F1682 ( rs ) { $F213552 ( setHamMessageCount , rs ) $F213552 ( setSpamMessageCount , rs ) } $F59 ( rs ) $F59 ( pstmt ) } finally { if ( rs != null ) { try $F881 ( rs ) catch ( java . sql . SQLException se ) $F1941 ( log , se ) rs = null ; } if ( pstmt != null ) { try $F881 ( pstmt ) catch ( java . sql . SQLException se ) $F1941 ( log , se ) pstmt = null ; } } }
static private void copyStream ( final InputStream content , final OutputStream outstr ) throws IOException { $F4727 ( buf , GZIP_BUFFER ) while ( _BOOL ) { $F117439 ( rdlen , content , buf ) $F65649 ( rdlen ) $F11584 ( outstr , buf , rdlen ) } }
public void checkAndSetupStreamsDrawer $F72 $F5795 ( setupListViewAdapter )
public void testFpTypeOverrideSimple $F72 throws Exception { $F44214 ( m ) m . enable ( DeserializationConfig . Feature . USE_BIG_DECIMAL_FOR_FLOATS ) ; BigDecimal dec = $F185880 ; Number result = m . readValue ( dec . toString ( ) , Number . class ) ; assertEquals ( $F20778 , result . getClass ( ) ) ; assertEquals ( dec , result ) ; Object value = m . readValue ( dec . toString ( ) , $F12222 ) ; assertEquals ( $F20778 , result . getClass ( ) ) ; assertEquals ( dec , value ) ; }
private com . codename1 . ui . Component copyComponent ( com . codename1 . ui . Component cmp ) { com . codename1 . ui . Container cnt = builder . createContainer ( res , copiedResourceName ) ; com . codename1 . ui . Component dest = builder . findByName ( cmp . getName ( ) , cnt ) ; if ( dest != null && dest . getParent ( ) != null ) { removeComponentSync ( dest . getParent ( ) , dest ) ; } return dest ; }
static double zetastatic ( long st , long n , double theta , double initialsum ) { double sum = initialsum ; for ( long i = st ; i < n ; i ++ ) { sum += NUM00 / ( Math . pow ( i + NUM00 , theta ) ) ; } return sum ; }
$F1 public BigDecimal calculateTotalPendingAdvance ( final BigDecimal totalAdvancePaid , final Date billDate , final WorkOrderEstimate workOrderEstimate , final Long billId ) { final CChartOfAccounts advanceCOA = contractorAdvanceService . getContractorAdvanceAccountcodeForWOE ( workOrderEstimate . getId ( ) ) ; BigDecimal totalPendingBalance = BigDecimal . ZERO ; BigDecimal totalAdvanceAdjusted = BigDecimal . ZERO ; if ( advanceCOA != null && totalAdvancePaid != null && $F17645 ( totalAdvancePaid , BigDecimal ) > NUM00 ) { totalAdvanceAdjusted = getTotalAdvanceAdjustedForWOE ( billDate , workOrderEstimate . getId ( ) , advanceCOA . getId ( ) , billId ) ; if ( totalAdvanceAdjusted != null && $F17645 ( totalAdvanceAdjusted , BigDecimal ) > NUM00 && $F17645 ( totalAdvanceAdjusted , BigDecimal ) > NUM00 ) totalPendingBalance = totalAdvanceAdjusted . subtract ( totalAdvanceAdjusted ) ; else totalPendingBalance = totalAdvancePaid ; } return totalPendingBalance ; }
private void loadProfile ( String userId , String name ) { final Intent userProfileIntent = new Intent ( getActivity ( ) , UserProfileActivity . class ) ; userProfileIntent . putExtra ( AppConstants . Keys . USER_ID , userId ) ; userProfileIntent . putExtra ( AppConstants . Keys . USER_NAME , name ) ; userProfileIntent . putExtra ( AppConstants . Keys . SERVICE_SCREEN_TYPE , AppConstants . ServiceScreenType . PROFILE ) ; startActivity ( userProfileIntent ) ; }
private void scrollBy ( final int increment ) { index += increment ; $F17370 ( index ) if $F6389 ( index , items ) $F114853 ( index , items ) redraw ( ) ; }
$F33495 ( seedBuffer , seedBufferOut , System , Process , BUILD_FINGERPRINT_AND_DEVICE_SERIAL , e )
public static boolean symbolNeedsQuoting ( CharSequence symbol , boolean quoteOperators ) { $F115 ( length , symbol ) if ( length == NUM00 ) { throw new EmptySymbolException $F72 ; } if ( ! isIdentifierKeyword ( symbol ) ) { $F12685 ( c , symbol ) if ( ! quoteOperators && isOperatorPart ( c ) ) { for ( $F119 ( ii , length ) ) { c = symbol . charAt ( ii ) ; $F38676 ( isOperatorPart , c , _BOOL ) } return _BOOL ; } else if ( isIdentifierStart ( c ) ) { for ( $F119 ( ii , length ) ) { c = symbol . charAt ( ii ) ; if ( ( c == NUM00 || c < NUM00 || c > NUM00 ) || ! isIdentifierPart ( c ) ) { return _BOOL ; } } return _BOOL ; } } return _BOOL ; }
public static long parseCommitCounterFile $F2236 ( name , ext ) throws NumberFormatException { $F10057 ( name ) $F10057 ( ext ) final int len = $F15171 ( name , ext ) ; $F66071 ( fileBaseName , name , len ) final long commitCounter = Long . parseLong ( fileBaseName ) ; return commitCounter ; }
public static Document loadDocument ( File file ) throws Exception { $F2218 ( factory , DocumentBuilderFactory ) $F2220 ( builder , factory ) $F5651 ( builder , file ) }
private Node newFloatingComment $F72 { Node c = new Node ( Token . EMPTY ) ; linkCommentToNode ( c ) ; return c ; }
public Boolean isHod ( final Long assignId ) { final List < HeadOfDepartments > hodList = employeeDepartmentRepository . getAllHodDepartments ( assignId ) ; $F3386 ( hodList ) }
public Munger singleLabelMode ( String ... languages ) $F28185 ( singleLabelMode , Arrays , languages )
public StatValue [ ] matchSpec ( StatSpec spec ) { if ( spec . getCombineType ( ) == StatSpec . GLOBAL ) { StatValue [ ] allValues = matchSpec ( new RawStatSpec ( spec ) ) ; if $F9634 ( allValues ) { return allValues ; } else { ComboValue cv = new ComboValue ( allValues ) ; return new StatValue [ ] { cv } ; } } else { $F19151 ( l ) StatArchiveReader . StatArchiveFile [ ] archives = getArchives ( ) ; for ( $F1139 ( i , archives ) ) { StatArchiveFile f = archives [ i ] ; if ( spec . archiveMatches ( f . getFile ( ) ) ) { f . matchSpec ( spec , l ) ; } } StatValue [ ] result = new StatValue $F2313 ( l ) ; return ( StatValue [ ] ) l . toArray ( result ) ; } }
private void assignClusterNums $F23416 ( cl_num ) throws Exception { if ( m_children != null && $F6213 ( m_children ) ) $F9451 m_clusterNum = cl_num [ NUM00 ] ; cl_num [ NUM00 ] ++ ; if ( m_children != null ) { for ( $F2277 ( i , m_children ) ) { CNode child = m_children . get ( i ) ; child . assignClusterNums ( cl_num ) ; } } }
protected void closeSubpath $F72 { mPSStream . println ( CLOSEPATH_STR ) ; mPenX = mStartPathX ; mPenY = mStartPathY ; }
public TvShowEpisodeScrapeTask ( List < TvShowEpisode > episodes , MediaScraper mediaScraper ) { super ( BUNDLE . getString ( NUM00 ) , episodes . size ( ) , TaskType . BACKGROUND_TASK ) ; this . episodes = episodes ; this . mediaScraper = mediaScraper ; this . scrapeThumb = _BOOL ; }
public void saveSelection ( IMiniTable miniTable ) { $F973 ( log ) $F15277 ( results ) setSelection ( null ) ; $F160876 ( rows , miniTable ) $F251540 ( i , rows , id , miniTable , results ) $F44759 ( results ) $F251542 ( log , results ) setSelection ( results ) ; }
public ModelMBeanNotificationInfo $F142640 ( notifTypes , name , description ) $F214324 ( this , notifTypes , name , description )
public void cleanBuildTask ( long id ) throws NotFoundException { FutureBuildTask task = tasks . remove ( id ) ; if ( task == null ) { throw new NotFoundException $F10797 ( String , id ) ; } task . cancel ( _BOOL ) ; cleanup ( task ) ; }
public static File createTempDir ( File parent ) { File temp = new File ( parent , Integer . toString ( $F23772 ( Math , UNSEEDED_RANDOM ) % NUM00 ) ) ; $F1900 ( temp ) $F27233 ( temp ) $F60829 ( temp ) return temp ; }
public String toURI $F72 { $F126634 ( buffer ) buffer . append ( this . schemeName ) ; $F84 ( buffer ) buffer . append ( this . hostname ) ; if ( this . port != - NUM00 ) { $F84 ( buffer ) buffer . append ( Integer . toString ( this . port ) ) ; } $F92 ( buffer ) }
public void moveTo $F6803 ( lonCenter , latCenter ) { double mLatCenter = GeoMath . latE7ToMercator ( latCenter ) ; double mTop = GeoMath . latE7ToMercator ( top ) ; int newBottom = GeoMath . mercatorToLatE7 ( mLatCenter - ( mTop - bottomMercator ) / NUM00 ) ; try { translate ( ( lonCenter - left - $F55075 ( width ) ) , newBottom - bottom ) ; } catch ( OsmException e ) $F302 ( e ) }
public void sendEvent ( final String name , $F27504 ( properties ) ) { final String eventName = String . format ( TfsTelemetryConstants . PLUGIN_ACTION_EVENT_NAME_FORMAT , name ) ; final PropertyMapBuilder builder = new PropertyMapBuilder ( properties ) ; logger . debug ( $F131442 ( String , name , builder ) ) ; if ( telemetryClient != null ) { telemetryClient . trackEvent ( eventName , builder . build ( ) , null ) ; } }
public void handleHeaderColumnPressed ( Point p ) { JTableHeader th = TABLE . getTableHeader ( ) ; int col = th . columnAtPoint ( p ) ; int c = TABLE . convertColumnIndexToModel ( col ) ; if ( c != - NUM00 ) { TABLE . setPressedColumnIndex ( c ) ; th . repaint ( th . getHeaderRect ( col ) ) ; } }
private static List < FixedRecord > createFixedRecords ( int count ) { List < FixedRecord > $F204 ( records ) ; for ( $F119 ( i , count ) ) { records . add ( new FixedRecord ( i ) ) ; } return records ; }
public TrackedEntityInstanceQueryParams addAttributesIfNotExist ( List < QueryItem > attrs ) { for ( QueryItem attr : attrs ) { if ( attributes != null && ! attributes . contains ( attr ) ) $F207 ( attributes , attr ) } return this ; }
void recomposeAttributeSets ( ElemAttributeSet attrSet ) { ArrayList attrSetList = ( ArrayList ) $F22754 ( m_attrSets , attrSet ) ; if ( null == attrSetList ) { $F13241 ( attrSetList ) $F22760 ( m_attrSets , attrSet , attrSetList ) } attrSetList . add ( attrSet ) ; }
public static List split ( String str , String regex ) { return ( Arrays . asList ( str . split ( regex ) ) ) ; }
protected final void deleteDBFFDCFiles ( String directoryToDelete ) throws AdeException { try { $F15885 ( dirToDelete , directoryToDelete ) $F1894 ( fileList , dirToDelete ) if $F9634 ( fileList ) $F19636 ( dirToDelete ) else { for ( $F1139 ( i , fileList ) ) { final File $F170887 ( f , dirToDelete , fileList , i ) ; if $F3444 ( f ) { final String filePath = f . getPath ( ) ; deleteDBFFDCFiles ( filePath ) ; $F598 } $F1900 ( f ) } fileList = dirToDelete . list ( ) ; if $F9634 ( fileList ) $F19636 ( dirToDelete ) } } catch ( Exception e ) $F212515 ( e ) }
$F9341 findLast $F72 { $F154321 ( q , head ) for ( $F589 ) { $F154319 d , r ; if ( ( r = q . right ) != null ) { if ( r . indexesDeletedNode ( ) ) { q . unlink ( r ) ; q = head ; } else q = r ; } else if ( ( d = q . down ) != null ) { q = d ; } else { $F154325 ( b , q ) $F35175 ( n , b ) for ( $F589 ) { if ( n == null ) $F45454 ( b ) $F35175 ( f , n ) $F45438 ( n , b ) Object v = n . value ; $F45440 ( v , n , b , f ) $F45442 ( v , n , b ) b = n ; n = f ; } q = head ; } } }
public void appendToNalUnit $F24576 ( data , offset , limit ) { $F24126 ( isFilling ) int readLength = limit - offset ; if ( nalData . length < nalLength + readLength ) { nalData = Arrays . copyOf ( nalData , ( nalLength + readLength ) * NUM00 ) ; } System . arraycopy ( data , offset , nalData , nalLength , readLength ) ; nalLength += readLength ; }
public static long sizeOfDirectory ( File directory ) { checkDirectory ( directory ) ; $F44946 ( files , directory ) $F1084 ( files ) long size = NUM00 ; for ( final File file : files ) { try { if ( ! isSymlink ( file ) ) { size += sizeOf ( file ) ; $F29432 ( size ) } } $F62612 } return size ; }
public synchronized void panAbs ( double dx , double dy ) { damageReport ( ) ; m_transform . translate ( dx , dy ) ; $F280860 ( m_itransform , m_transform ) }
public static void checkSerializedEquality ( Object object ) { Object object2 = serializeAndRecover ( object ) ; Assert . assertEquals ( NUM00 , object , object2 ) ; Assert . assertEquals ( NUM00 , object . hashCode ( ) , object2 . hashCode ( ) ) ; }
public String documentationReferenceGuideUrl $F72 $F16566 ( properties )
$F104170 ( purchase , result )
public static double mean ( final $F31488 list ) { double sum = NUM00 ; for ( Double number : list ) { sum += number ; } return sum / list . size ( ) ; }
public static String toHex $F97 ( data ) { try { return new String ( Hex . encode ( data ) , NUM00 ) ; } catch ( UnsupportedEncodingException e ) $F845 $F1274 }
public In ( URL url ) { $F1149 ( url ) try { $F5858 ( site , url ) $F517 ( is , site ) scanner = new Scanner ( new BufferedInputStream ( is ) , CHARSET_NAME ) ; scanner . useLocale ( LOCALE ) ; } catch ( IOException ioe ) $F18931 ( url ) }
$F1219 public void processEnableFullscreenRunnableForTest $F72 { if ( mHandler . hasMessages ( MSG_ID_ENABLE_FULLSCREEN_AFTER_LOAD ) ) { mHandler . removeMessages ( MSG_ID_ENABLE_FULLSCREEN_AFTER_LOAD ) ; enableFullscreenAfterLoad ( ) ; } }
private static String fromHtmlEntity ( String str ) { Character ch = map . get ( str ) ; return ( ch != null ) ? ch . toString ( ) : str ; }
public void write $F97 ( vector ) { check ( vector . length ) ; $F41363 ( System , vector , buffer , write_pos ) write_pos += vector . length ; }
public void unlockUI ( ProcessInfo pi ) { boolean notPrint = pi != null && pi . getAD_Process_ID ( ) != m_curTab . getAD_Process_ID ( ) && pi . isReportingProcess ( ) == _BOOL ; setBusy ( _BOOL , notPrint ) ; if ( notPrint ) { m_curTab . dataRefresh ( ) ; if ( pi . isTimeout ( ) ) Env . setContext ( m_ctx , m_curWindowNo , NUM00 , NUM00 ) ; m_curGC . dynamicDisplay ( NUM00 ) ; setStatusLine ( pi . getSummary ( ) , pi . isError ( ) ) ; if ( pi . isError ( ) ) ADialog . error ( m_curWindowNo , this , null , pi . getSummary ( ) ) ; ProcessInfoUtil . setLogFromDB ( pi ) ; String logInfo = pi . getLogInfo ( ) ; if $F4012 ( logInfo ) ADialog . info ( m_curWindowNo , this , Env . getHeader ( m_ctx , m_curWindowNo ) , pi . getTitle ( ) , logInfo ) ; } else { setStatusLine ( pi . getSummary ( ) , pi . isError ( ) ) ; if ( pi . isError ( ) ) ADialog . error ( m_curWindowNo , this , null , pi . getSummary ( ) ) ; } }
private Map < URI , StorageSystem > buildArrayMap ( StorageSystem vplexSystem , $F81867 descriptors , $F112895 [ ] types ) { Map < URI , StorageSystem > arrayMap = new HashMap < URI , StorageSystem > $F72 ; if ( types != null ) { descriptors = VolumeDescriptor . filterByType ( descriptors , types , new $F112895 $F10277 ) ; } for ( VolumeDescriptor desc : descriptors ) { if ( arrayMap . containsKey ( desc . getDeviceURI ( ) ) == _BOOL ) { if ( vplexSystem == null ) { StorageSystem array = getDataObject ( $F41797 , desc . getDeviceURI ( ) , _dbClient ) ; arrayMap . put ( desc . getDeviceURI ( ) , array ) ; } else { $F4324 connectedSystems = ConnectivityUtil . getStorageSystemAssociationsByNetwork ( _dbClient , vplexSystem . getId ( ) , StoragePort . PortType . backend ) ; if ( connectedSystems . contains ( desc . getDeviceURI ( ) ) ) { StorageSystem array = getDataObject ( $F41797 , desc . getDeviceURI ( ) , _dbClient ) ; arrayMap . put ( desc . getDeviceURI ( ) , array ) ; } } } } return arrayMap ; }
public $F96 encrypt ( $F96 plainTextAsBytes , CharSequence password ) throws KeyCrypterException { try { $F2175 ( salt , SALT_LENGTH ) secureRandom . nextBytes ( salt ) ; ParametersWithIV key = ( ParametersWithIV ) getAESPasswordKey ( password , salt ) ; BufferedBlockCipher cipher = new PaddedBufferedBlockCipher ( new CBCBlockCipher ( new AESFastEngine $F72 ) ) ; cipher . init ( _BOOL , key ) ; $F251439 ( encryptedBytes , cipher , plainTextAsBytes ) final int processLength = cipher . processBytes ( $F251440 ( plainTextAsBytes , encryptedBytes ) ) ; final int doFinalLength = cipher . doFinal ( encryptedBytes , processLength ) ; return concat ( salt , Arrays . copyOf ( encryptedBytes , processLength + doFinalLength ) ) ; } catch ( Exception e ) { throw new KeyCrypterException ( NUM00 + Utils . bytesToHexString ( plainTextAsBytes ) + NUM00 , e ) ; } }
public final ArrayList < WifiRecord > loadWifisByBssid ( final String bssid , final Integer session ) { final ArrayList < WifiRecord > $F204 ( wifis ) ; String selectSql ; if ( session != null ) { selectSql = Schema . COL_BSSID + NUM00 + bssid + NUM00 + Schema . COL_SESSION_ID + NUM00 + session + NUM00 ; } else { selectSql = Schema . COL_BSSID + NUM00 + bssid + NUM00 ; } final Cursor cursor = contentResolver . query ( ContentProvider . CONTENT_URI_WIFI , null , selectSql , null , null ) ; final int columnIndex = cursor . getColumnIndex ( Schema . COL_BSSID ) ; final int columnIndex2 = cursor . getColumnIndex ( Schema . COL_SSID ) ; final int columnIndex3 = cursor . getColumnIndex ( Schema . COL_CAPABILITIES ) ; final int columnIndex4 = cursor . getColumnIndex ( Schema . COL_FREQUENCY ) ; final int columnIndex5 = cursor . getColumnIndex ( Schema . COL_LEVEL ) ; final int columnIndex6 = cursor . getColumnIndex ( Schema . COL_TIMESTAMP ) ; final int columnIndex7 = cursor . getColumnIndex ( Schema . COL_BEGIN_POSITION_ID ) ; final int columnIndex8 = cursor . getColumnIndex ( Schema . COL_END_POSITION_ID ) ; final int columnIndex9 = cursor . getColumnIndex ( Schema . COL_KNOWN_WIFI ) ; while $F12260 ( cursor ) { final WifiRecord wifi = new WifiRecord $F72 ; wifi . setBssid ( cursor . getString ( columnIndex ) ) ; wifi . setSsid ( cursor . getString ( columnIndex2 ) ) ; wifi . setCapabilities ( cursor . getString ( columnIndex3 ) ) ; wifi . setFrequency ( cursor . getInt ( columnIndex4 ) ) ; wifi . setLevel ( cursor . getInt ( columnIndex5 ) ) ; wifi . setOpenBmapTimestamp ( cursor . getLong ( columnIndex6 ) ) ; wifi . setBeginPosition ( loadPositionById ( cursor . getString ( columnIndex7 ) ) ) ; wifi . setEndPosition ( loadPositionById ( cursor . getString ( columnIndex8 ) ) ) ; wifi . setCatalogStatus ( CatalogStatus . values ( ) [ cursor . getInt ( columnIndex9 ) ] ) ; wifis . add ( wifi ) ; } $F59 ( cursor ) return wifis ; }
$F20813 ( fieldId , AFTER_ID , MAX_JOBS )
$F1 public void deinstall ( JEditorPane editor ) { super . deinstall ( editor ) ; editor . removeKeyListener ( this ) ; }
$F35762 ( newScrollValue , itemDimension , initialMotionValue , lastMotionValue , getPullToRefreshScrollDirection , HORIZONTAL , mInitialMotionX , mLastMotionX , VERTICAL , mInitialMotionY , mLastMotionY , mCurrentMode , PULL_FROM_END , Math , FRICTION , getFooterSize , PULL_FROM_START , getHeaderSize , setHeaderScroll , isRefreshing , scale , mFooterLayout , mHeaderLayout , mState , State , setState )
public boolean isSecure $F72 $F51935 ( mTlsCipher )
public void sample ( Record rec ) { totalRecs ++ ; if $F10255 ( samples , MAX_SAMPLES ) { samples . add ( new Sample ( rec , schema ) ) ; updateNewValueInterval ( rec ) ; } else { $F8669 ( flip , random ) if ( flip < ( double ) MAX_SAMPLES / totalRecs ) { samples . set ( random . nextInt ( MAX_SAMPLES ) , new Sample ( rec , schema ) ) ; updateNewValueInterval ( rec ) ; } } }
public TenantCreateParam prepareTenantParam ( KeystoneTenant tenant ) { TenantCreateParam param = new TenantCreateParam ( CinderConstants . TENANT_NAME_PREFIX + NUM00 + tenant . getName ( ) , $F13536 ( prepareUserMappings , tenant ) ) ; param . setDescription ( getProperTenantDescription ( tenant . getDescription ( ) ) ) ; return param ; }
private void forceInternalError $F72 { throw $F86636 ; }
$F1 public void drawHighlight $F177595 ( g , w , h ) { $F129587 ( g , Color ) $F319 ( fm , g ) int l = $F2354 ( m_x , w ) - fm . stringWidth ( m_id ) / NUM00 ; int t = $F2354 ( m_y , h ) - $F63370 ( fm ) ; g . fillRect ( l - NUM00 , t - NUM00 , fm . stringWidth ( m_id ) + NUM00 , fm . getHeight ( ) + fm . getDescent ( ) + NUM00 ) ; drawNode ( g , w , h ) ; }
public static ImageEncoder newInstance ( String format ) { ImageEncoder imageEncoder = null ; $F123 ( className , encoders , format ) $F26344 ( className , format ) try { $F63290 ( imageEncoderClass , Class , className ) imageEncoder = ( ImageEncoder ) imageEncoderClass . newInstance ( ) ; } catch ( Exception e ) { $F22681 ( e ) } return imageEncoder ; }
public static void applyPinchZoomImage ( ImageView mImageView ) { mImageView . setOnTouchListener ( new PinchZoom $F72 ) ; }
public double empiricalHSICincompleteCholesky ( TetradMatrix Gy , TetradMatrix Gx , TetradMatrix Gz , int m ) { int ky = Gy . columns ( ) ; int kx = Gx . columns ( ) ; int kz = Gz . columns ( ) ; TetradMatrix H = KernelUtils . constructH ( m ) ; TetradMatrix Gcy = H . times ( Gy ) ; TetradMatrix Gcx = H . times ( Gx ) ; TetradMatrix Gcz = H . times ( Gz ) ; TetradMatrix A = new TetradMatrix ( ky , kx ) ; TetradMatrix Gcyt = Gcy . transpose ( ) ; A = Gcyt . times ( Gcx ) ; TetradMatrix B = Gcy . times ( A ) ; TetradMatrix Kyx = new TetradMatrix ( m , m ) ; TetradMatrix Gcxt = new TetradMatrix ( kx , m ) ; Gcxt = Gcx . transpose ( ) ; Kyx = B . times ( Gcxt ) ; double empHSIC = NUM00 ; double xy = NUM00 ; for ( $F119 ( i , m ) ) { empHSIC += matrixProductEntry ( B , Gcxt , i , i ) ; } TetradMatrix Gytz = Gcyt . times ( Gcz ) ; TetradMatrix Gczt = Gcz . transpose ( ) ; TetradMatrix Gztx = Gczt . times ( Gcx ) ; TetradMatrix Gztz = Gczt . times ( Gcz ) ; TetradMatrix Gztzr = Gztz . copy ( ) ; for ( $F119 ( i , kz ) ) { Gztzr . set ( i , i , Gztz . get ( i , i ) + this . regularizer ) ; } TetradMatrix ZI = Gztzr . inverse ( ) ; TetradMatrix ZIzt = ZI . times ( Gczt ) ; TetradMatrix Gzr = Gcz . copy ( ) ; for ( $F119 ( i , m ) ) { for ( $F119 ( j , kz ) ) { Gzr . set ( i , j , Gcz . get ( i , j ) * ( - NUM00 / this . regularizer ) ) ; } } TetradMatrix Zinv = Gzr . times ( ZIzt ) ; for ( $F119 ( i , m ) ) { Zinv . set ( i , i , Zinv . get ( i , i ) + ( NUM00 / this . regularizer ) ) ; } TetradMatrix Gztzinv = Gczt . times ( Zinv ) ; TetradMatrix Gzinvz = Zinv . times ( Gcz ) ; TetradMatrix Gztinv2z = Gztzinv . times ( Gzinvz ) ; TetradMatrix Gytzztzinv2z = Gytz . times ( Gztinv2z ) ; TetradMatrix Gytzztzinv2zztx = Gytzztzinv2z . times ( Gztx ) ; TetradMatrix Gyytzztzinv2zztx = Gcy . times ( Gytzztzinv2zztx ) ; double second = NUM00 ; for ( $F119 ( i , m ) ) { second += matrixProductEntry ( Gyytzztzinv2zztx , Gcxt , i , i ) ; } empHSIC -= NUM00 * second ; TetradMatrix Gxtz = Gcxt . times ( Gcz ) ; TetradMatrix Gxtzztinv2z = Gxtz . times ( Gztinv2z ) ; TetradMatrix Gyytzztzinv2zztxxtzztinv2z = Gyytzztzinv2zztx . times ( Gxtzztinv2z ) ; for ( $F119 ( i , m ) ) { empHSIC += matrixProductEntry ( Gyytzztzinv2zztxxtzztinv2z , Gczt , i , i ) ; } double betaz = NUM00 ; for ( int i = NUM00 ; i < ( m - NUM00 ) ; i ++ ) { for ( int j = ( i + NUM00 ) ; j < m ; j ++ ) { betaz += Math . pow ( matrixProductEntry ( Gcz , Gczt , i , j ) , NUM00 ) ; betaz += Math . pow ( matrixProductEntry ( Gcz , Gczt , j , i ) , NUM00 ) ; } } empHSIC *= ( m / $F78421 ( betaz , m ) ) ; return empHSIC ; }
public static File parse ( $F806 options , String option , File defValue ) throws Exception { $F142641 ( value , Utils , option , options ) if $F2979 ( value ) return defValue ; else return new File ( value ) ; }
public boolean isAcctBalanced $F72 { $F298621 ( m_lines , _BOOL ) BigDecimal balance = getAcctBalance ( ) ; boolean retValue = $F67525 ( balance ) ; if ( retValue ) log . finer ( toString ( ) ) ; else log . warning ( NUM00 + balance + NUM00 + toString ( ) ) ; return retValue ; }
public void ensureCapacity ( int minCapacity ) { int oldCapacity = capacity ; if ( minCapacity > oldCapacity ) { int newCapacity = ( oldCapacity * NUM00 ) / NUM00 + NUM00 ; $F46169 ( newCapacity , minCapacity ) BitVector vector = toBitVector ( ) ; vector . setSize ( newCapacity * bitsPerElement ) ; this . bits = vector . elements ( ) ; this . capacity = newCapacity ; } }
private String detailBase ( final Method method ) { final $F6969 clazz = method . getDeclaringClass ( ) ; final String detailBase = MessageUtils . bundleNameForClass ( clazz ) ; if ( isBlank ( detailBase ) ) $F1155 ( clazz ) return detailBase ; }
public void finished $F72 throws IOException $F881 ( outputStream )
public final void lock $F72 { SunToolkit . awtLock ( ) ; }
$F1 public Object createStatement ( Object proxy , Method method , $F131 args , Object statement , long time ) { try { Object result = null ; $F20605 ( name , method ) String sql = null ; $F43121 constructor = null ; if ( compare ( CREATE_STATEMENT , name ) ) { constructor = getConstructor ( CREATE_STATEMENT_IDX , Statement . class ) ; } else if ( compare ( PREPARE_STATEMENT , name ) ) { sql = ( String ) args [ NUM00 ] ; constructor = getConstructor ( PREPARE_STATEMENT_IDX , PreparedStatement . class ) ; $F38251 ( sql , prepareStatement , time ) } else if ( compare ( PREPARE_CALL , name ) ) { sql = ( String ) args [ NUM00 ] ; constructor = getConstructor ( PREPARE_CALL_IDX , CallableStatement . class ) ; prepareCall ( sql , time ) ; } else { return statement ; } result = constructor . newInstance ( new Object [ ] { new StatementProxy ( statement , sql ) } ) ; return result ; } $F92403 ( log , x ) return statement ; }
public UpdateResponse remove ( long id ) throws IOException , SolrServerException { UpdateResponse res = solrClient . deleteById ( String . valueOf ( id ) ) ; solrClient . commit ( _BOOL , _BOOL , _BOOL ) ; return res ; }
public void switchSetup $F72 { int retVal ; retVal = m_SetupFileChooser . showOpenDialog ( this ) ; if ( retVal != JFileChooser . APPROVE_OPTION ) $F932 m_DbUtils . initialize ( m_SetupFileChooser . getSelectedFile ( ) ) ; m_URL = m_DbUtils . getDatabaseURL ( ) ; m_User = m_DbUtils . getUsername ( ) ; $F100094 ( m_Password , m_DbUtils ) m_TextURL . setText ( m_URL ) ; }
private ClientDetailsEntity loadClientObject ( final OIDCAuthorizationRequestContext authorizationRequest ) { log . debug ( NUM00 , authorizationRequest . getClientId ( ) ) ; return clientService . loadClientByClientId ( authorizationRequest . getClientId ( ) ) ; }
public void addFieldProperty ( String name , String accessorField ) { fieldProperties . add ( new LegacyFieldPropDesc ( name , accessorField ) ) ; }
private void parseNoWildCards $F72 { this . fSegments = $F382 ; this . fSegments [ NUM00 ] = this . fPattern ; this . fBound = this . fLength ; }
public $F2539 environment $F72 { String base64 = toStringBase64 ( ) ; if $F6036 ( base64 ) $F83145 ( Collections ) $F2539 environment = Maps . newHashMap ( ) ; environment . put ( BaggageUtils . BAGGAGE_ENVIRONMENT_VARIABLE , base64 ) ; return environment ; }
$F1 public void drawSeries ( Canvas canvas , Paint paint , $F6205 points , $F31488 values , XYSeriesRenderer seriesRenderer , SupportSeriesRender supportSeriesRender , float yAxisValue , int seriesIndex , int startIndex ) { $F36951 ( seriesNr , mDataset ) $F2199 ( length , points ) $F14782 ( paint , seriesRenderer ) $F5597 ( paint , Style ) float halfDiffX = getHalfDiffX ( points , length , seriesNr ) ; for ( $F6225 ( i , length ) ) { $F36955 ( x , points , i ) $F36957 ( y , points , i ) drawBar ( canvas , x , yAxisValue , x , y , halfDiffX , seriesNr , seriesIndex , paint ) ; } $F14782 ( paint , seriesRenderer ) }
public void listenModLog ( String username , String token ) { $F933 ( hasServer ) if $F1710 ( modLogListen , username ) $F932 this . token = token ; long userId = getUserId ( username ) ; modLogListen . put ( username , userId ) ; $F21448 ( LOGGER , username , userId ) if ( userId != - NUM00 ) { sendListenModLog ( userId , _BOOL ) ; } }
public static boolean isValidClassName ( String className ) { if $F48846 ( className ) { return _BOOL ; } return _BOOL ; }
$F1431 public void newMinute $F72 { $F24126 ( inSyncWithInternalFastClock ) if ( correctFastClock || synchronizeWithInternalClock ) { $F9110 ( now , clock ) if ( now . getMinutes ( ) != NUM00 ) { curDays = now . getDate ( ) ; curHours = now . getHours ( ) ; curMinutes = now . getMinutes ( ) ; long millis = now . getTime ( ) ; long elapsedMS = millis % MSECPERMINUTE ; double frac_min = elapsedMS / ( double ) MSECPERMINUTE ; curFractionalMinutes = ( int ) CORRECTION - $F2354 ( CORRECTION , frac_min ) ; setClock ( ) ; } } else if ( setInternal && ! correctFastClock && ! synchronizeWithInternalClock ) $F21847 ( inSyncWithInternalFastClock , _BOOL , initiateRead ) }
private < T extends DiscoveredSystemObject > boolean isDataCollectionScanJobSchedulingNeeded ( long lastScanTime , boolean inProgress ) { $F657 ( systemTime , System ) long refreshInterval = getRefreshInterval ( ControllerServiceImpl . SCANNER ) ; $F9303 ( inProgress , _BOOL ) if ( lastScanTime > NUM00 && ( systemTime - lastScanTime < refreshInterval * NUM00 ) ) $F53787 ( _logger , _BOOL ) return _BOOL ; }
private void removeBreakpoints ( $F99304 ( breakpointAddressSet ) , final BreakpointStorage storage ) { if $F6887 ( breakpointAddressSet ) { final Set < Breakpoint > breakpoints = storage . getBreakPointsByAddress ( breakpointAddressSet ) ; storage . removeBreakpoints ( breakpointAddressSet ) ; for ( final BreakpointManagerListener listener : listeners ) { try { listener . breakpointsRemoved ( breakpoints ) ; } $F39654 ( CUtilityFunctions , e ) } } }
public void replaceCreationTemplate ( Guid guid , String templateName , AttrSet attrSet ) throws ConfigManagerException { if ( guid == null ) { guid = new Guid ( _rootDN ) ; } DN dn = DN . valueOf ( guid . getDn ( ) ) ; String org = NUM00 ; List < RDN > $F204 ( rdns ) ; for ( RDN rdn : dn ) $F6966 ( rdns , rdn ) for ( RDN rdn : rdns ) { org = org + NUM00 + LDAPUtils . rdnValue ( rdn ) ; } String service = CREATIONPATH + NUM00 + templateName ; Map map = convertToMap ( attrSet ) ; try { replaceServiceAttributes ( org , service , map ) ; } catch ( SMSException e ) { String $F1868 = $F382 ; args [ NUM00 ] = e . toString ( ) ; throw new ConfigManagerException ( i18n . getString ( IUMSConstants . ERROR_CM , args ) ) ; } catch ( SSOException se ) { String $F1868 = $F382 ; args [ NUM00 ] = se . toString ( ) ; throw new ConfigManagerException ( i18n . getString ( IUMSConstants . ERROR_CM , args ) ) ; } }
private void readObject ( ObjectInputStream stream ) throws $F6427 { $F6428 ( stream ) MarshalledInstance mi = ( MarshalledInstance ) stream . readObject ( ) ; try { listener = ( RemoteEventListener ) mi . get ( _BOOL ) ; } catch ( Throwable e ) { if ( e instanceof Error && ThrowableConstants . retryable ( e ) == ThrowableConstants . BAD_OBJECT ) { $F106249 ( e ) } logger . log ( Level . WARNING , NUM00 , e ) ; } }
public void add ( T item ) { if $F9793 ( set , item ) { fireContentsChanged ( this , NUM00 , getSize ( ) - NUM00 ) ; } }
private $F51580 ( bytes , sb , element , v , Integer )
public ScServer createClusterServer $F1947 ( ssn , clusterName , osId ) throws StorageCenterAPIException { Parameters $F108428 ( params ) ; $F269710 ( params , clusterName ) $F269710 ( params , ssn ) params . add ( NUM00 , NOTES_ "STRING" ) ; $F269710 ( params , osId ) RestResult rr = restClient . post ( NUM00 , params . toJson ( ) ) ; if ( ! checkResults ( rr ) ) { String error = String . format ( NUM00 , clusterName , rr . getErrorMsg ( ) ) ; $F269734 ( error ) } return gson . fromJson ( rr . getResult ( ) , ScServer . class ) ; }
public void testConstructorSignBytesPositive4 $F72 { byte $F3009 = $F294877 ; int aSign = NUM00 ; byte $F3018 = $F294877 ; $F3023 ( aNumber , aSign , aBytes ) $F3030 ( rBytes ) $F3031 ( resBytes , aNumber ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , aNumber ) }
public void testMinimalCompletionStage $F72 { $F70225 ( f ) CompletionStage $F2305 g = f . minimalCompletionStage ( ) ; AtomicInteger $F107657 ( x ) ; AtomicReference $F81247 r = new AtomicReference $F81247 $F72 ; checkIncomplete ( f ) ; g . whenComplete ( null ) ; f . complete ( NUM00 ) ; checkCompletedNormally ( f , NUM00 ) ; assertEquals ( x . get ( ) , NUM00 ) ; $F80909 ( assertNull , r ) }
private void writeDirectoryPostResource ( Element postResourceEl , String path ) { $F34765 ( postResourceEl , DIR_RESOURCE_SET ) postResourceEl . setAttribute ( NUM00 , $F2934 ( path ) ) ; }
private static $F2027 trimArray $F11072 ( array , size ) { $F63585 ( size ) $F6482 ( size , NO_ERRORS ) $F4120 ( a , size ) $F135 ( System , array , a , size ) return a ; }
static PotionType fromName ( String name ) { for ( PotionTypeTable table : values ( ) ) { if ( $F206388 ( name , table ) ) return table . type ; } return PotionType . valueOf ( name . toUpperCase ( ) ) ; }
public synchronized void removeCurlMesh ( CurlMesh mesh ) { while $F16914 ( mCurlMeshes , mesh ) ; }
private List < Datum > sampleNbestList ( int sourceId , $F246175 source , SentenceLevelMetric $F57784 scoreMetric , List < RichTranslation $F57784 > translations , List < $F246175 > references ) { $F11844 ( sourceIds ) sourceIds [ NUM00 ] = sourceId ; List < $F246175 > $F9187 ( sources ) ; sources . add ( source ) ; List < List < RichTranslation $F57784 > > translationList = new ArrayList < List < RichTranslation $F57784 > > $F989 ; translationList . add ( translations ) ; List < List < $F246175 > > referenceList = new ArrayList < List < $F246175 > > $F989 ; referenceList . add ( references ) ; return sampleNbestLists ( sourceIds , sources , scoreMetric , translationList , referenceList ) ; }
protected void postRunnable ( Runnable runnable ) { if ( runnable != null ) $F95028 ( handler , runnable ) }
public boolean isClosed $F72 { return map . isClosed ( ) ; }
public void insertThinkTime $F72 { ScriptStep thinkTimeScriptStep = ScriptStepFactory . createThinkTime ( getMinThinkTime ( ) , getMaxThinkTime ( ) ) ; steps . add ( getInsertIndex ( ) , thinkTimeScriptStep ) ; minThinkTime = NUM00 ; maxThinkTime = NUM00 ; reindexScriptSteps ( ) ; }
$F98441 ( is , os , listener , bufferSize , current , total , DEFAULT_IMAGE_TOTAL_SIZE , bytes , count , shouldStopLoading , _BOOL )
public void addNode ( final Instruction instruction ) { instructions . add ( instruction ) ; $F38251 ( prevInstruction , addEdge , instruction ) prevInstruction = instruction ; }
public void ensureCapacity ( int minimumCapacity ) { if ( minimumCapacity <= _capacity ) $F665 if ( minimumCapacity > NUM00 ) { _capacity = ( minimumCapacity + NUM00 ) & ~ NUM00 ; } else { while ( _capacity < minimumCapacity ) { _capacity += _capacity ; } } $F2175 ( bytes , _capacity ) $F135 ( System , _buffer , bytes , _length ) _buffer = bytes ; }
public Builder removeName ( final String name ) $F120129 ( names , name , this )
public $F4203 JSONAPIDocument < $F5675 > readDocumentCollection ( InputStream dataStream , $F20474 clazz ) { try { $F10089 ( resourceCache ) JsonNode rootNode = objectMapper . readTree ( dataStream ) ; ValidationUtils . ensureNotError ( objectMapper , rootNode ) ; ValidationUtils . ensureCollection ( rootNode ) ; resourceCache . cache ( parseIncluded ( rootNode ) ) ; $F98037 ( resourceList ) for ( JsonNode element : rootNode . get ( DATA ) ) { T pojo = readObject ( element , clazz , _BOOL ) ; resourceList . add ( pojo ) ; } JSONAPIDocument < $F5675 > result = new JSONAPIDocument $F200 ( resourceList , objectMapper ) ; if $F186819 ( rootNode , META ) { result . setMeta ( mapMeta ( rootNode . get ( META ) ) ) ; } if $F186819 ( rootNode , LINKS ) { result . setLinks ( new Links $F26285 ( mapLinks , rootNode , LINKS ) ) ; } return result ; } $F41337 ( e ) $F12237 ( e ) finally $F9096 ( resourceCache ) }
public void addTargetedBySwarm ( int entityId , int weaponId ) { hitBySwarmsEntity . addElement ( new Integer ( entityId ) ) ; hitBySwarmsWeapon . addElement ( new Integer ( weaponId ) ) ; }
private boolean isCheckpointExists ( Connection conn , String key ) throws SQLException { PreparedStatement st = null ; ResultSet rs = null ; try { st = conn . prepareStatement ( chkExistsSql ) ; $F3916 ( st , key ) $F47578 ( rs , st ) $F43104 ( rs ) } finally { U . close ( rs , log ) ; U . close ( st , log ) ; } }
public OMScalingRaster ( double ullat , double ullon , double lrlat , double lrlon , ImageIcon ii ) { this ( ullat , ullon , lrlat , lrlon , ii . getImage ( ) ) ; }
private static $F108629 findVertices ( BitMatrix matrix , boolean tryHarder ) { $F2047 ( height , matrix ) $F2049 ( width , matrix ) $F108629 result = new ResultPoint $F380 ; boolean found = _BOOL ; $F22974 ( counters , START_PATTERN ) int rowStep = Math . max ( NUM00 , height > > ( tryHarder ? NUM00 : NUM00 ) ) ; $F108661 ( i , height , rowStep , loc , findGuardPattern , matrix , width , _BOOL , START_PATTERN , counters , result , found ) $F108660 ( found , _BOOL , i , height , rowStep , loc , findGuardPattern , matrix , width , START_PATTERN , counters , result ) $F14244 ( counters , STOP_PATTERN ) if ( found ) { found = _BOOL ; $F108661 ( i , height , rowStep , loc , findGuardPattern , matrix , width , _BOOL , STOP_PATTERN , counters , result , found ) } $F108660 ( found , _BOOL , i , height , rowStep , loc , findGuardPattern , matrix , width , STOP_PATTERN , counters , result ) return found ? result : null ; }
public static void copyStream ( InputStream is , OutputStream os , $F96 buffer , int bufferSize , String confid , double fileSize , Context context ) throws IOException { double downloaded = NUM00 ; $F11844 ( update ) try { for ( $F589 ) { $F65003 ( count , is , buffer , bufferSize ) downloaded += count ; if ( count == - NUM00 ) { if ( context != null ) $F845 $F597 } $F11584 ( os , buffer , count ) if ( context != null ) { update [ NUM00 ] = ( int ) downloaded ; update [ NUM00 ] = ( int ) fileSize ; update [ NUM00 ] = ( int ) ( ( downloaded / fileSize ) * NUM00 ) ; } } } $F8012 ( e ) }
$F1 public void writeHeader $F72 throws IOException { os = new PDFWriter ( new BufferedOutputStream ( ros ) , PDF_VERSION ) ; delayImageQueue = new PDFImageDelayQueue ( os ) ; delayPaintQueue = new PDFPaintDelayQueue ( os , delayImageQueue ) ; fontTable = new PDFFontTable ( os ) ; PDFDocInfo info = os . openDocInfo ( NUM00 ) ; info . setTitle ( getProperty ( TITLE ) ) ; info . setAuthor ( getProperty ( AUTHOR ) ) ; info . setSubject ( getProperty ( SUBJECT ) ) ; info . setKeywords ( getProperty ( KEYWORDS ) ) ; info . setCreator ( getCreator ( ) ) ; info . setProducer ( producer == null ? NUM00 : producer ) ; if $F931 ( isDeviceIndependent ) { $F4377 ( now , Calendar ) info . setCreationDate ( now ) ; info . setModificationDate ( now ) ; } info . setTrapped ( NUM00 ) ; os . close ( info ) ; PDFCatalog catalog = os . openCatalog ( NUM00 , NUM00 ) ; catalog . setOutlines ( NUM00 ) ; catalog . setPageMode ( NUM00 ) ; catalog . setViewerPreferences ( NUM00 ) ; catalog . setOpenAction ( new Object [ ] { os . ref ( NUM00 ) , os . name ( NUM00 ) } ) ; os . close ( catalog ) ; PDFViewerPreferences prefs = os . openViewerPreferences ( NUM00 ) ; prefs . setFitWindow ( _BOOL ) ; prefs . setCenterWindow ( _BOOL ) ; os . close ( prefs ) ; alphaIndex = NUM00 ; extGStates = new HashMap < Float , String > $F72 ; if $F931 ( isMultiPage ) { openPage ( getSize ( ) , null ) ; } }
protected String parseString ( int closingCharacter ) throws IOException , RDFParseException { StringBuilder sb = getBuilder ( ) ; while ( _BOOL ) { int c = readCodePoint ( ) ; if ( c == closingCharacter ) $F5153 else if ( c == - NUM00 ) $F5795 ( throwEOFException ) appendCodepoint ( sb , c ) ; if ( c == NUM00 ) { c = readCodePoint ( ) ; if ( c == - NUM00 ) $F5795 ( throwEOFException ) appendCodepoint ( sb , c ) ; } } $F92 ( sb ) }
private void codeUnwrapReturnValue ( $F6969 type , DataOutputStream out ) throws IOException { if $F24204 ( type ) { $F27383 ( prim , PrimitiveTypeInfo , type ) out . writeByte ( opc_checkcast ) ; out . writeShort ( cp . getClass ( prim . wrapperClassName ) ) ; out . writeByte ( opc_invokevirtual ) ; out . writeShort ( cp . getMethodRef ( prim . wrapperClassName , prim . unwrapMethodName , prim . unwrapMethodDesc ) ) ; if ( type == $F37010 || type == $F41254 || type == $F41266 || type == $F94714 || type == $F41260 ) { out . writeByte ( opc_ireturn ) ; } else if $F41238 ( type ) { out . writeByte ( opc_lreturn ) ; } else if $F41249 ( type ) { out . writeByte ( opc_freturn ) ; } else if $F41243 ( type ) { out . writeByte ( opc_dreturn ) ; } else $F10176 } else { out . writeByte ( opc_checkcast ) ; out . writeShort ( cp . getClass ( $F6798 ( dotToSlash , type ) ) ) ; out . writeByte ( opc_areturn ) ; } }
private String formatLink $F4374 ( parts ) { String anchor , text ; if $F8830 ( parts ) $F85091 ( anchor , text ) else { anchor = parts [ NUM00 ] ; text = parts [ NUM00 ] ; } return String . format ( NUM00 , anchor , text ) ; }
public JSONException ( Throwable cause ) { $F3270 ( super , cause ) this . cause = cause ; }
public boolean fixUtils $F4374 ( utils ) throws Exception { for ( String util : utils ) { if ( ! checkUtil ( util ) ) { if ( checkUtil ( NUM00 ) ) { if ( hasUtil ( util , NUM00 ) ) { fixUtil ( util , RootTools . utilPath ) ; } } else { if ( checkUtil ( NUM00 ) ) { if ( hasUtil ( util , NUM00 ) ) { fixUtil ( util , RootTools . utilPath ) ; } } else { return _BOOL ; } } } } return _BOOL ; }
$F1 protected void initialize $F72 { $F101494 ( patterns ) $F21883 ( super ) m_Patterns = new ArrayList $F28916 $F72 ; patterns = read ( ) ; for ( String pattern : patterns ) { m_Patterns . add ( Pattern . compile ( pattern ) ) ; } }
public static $F806 lsDirectories ( String directory ) throws Exception { $F91090 ( tmp , ls , directory ) $F22547 ( files ) for ( String s : tmp ) { if ( isDirectory ( directory + File . separator + s ) ) files . add ( s ) ; } $F14862 ( files ) }
private void toStringWithChildren ( StringBuffer buffer , int indent ) { internalToString ( buffer , indent ) ; if ( fChildren != null ) { for ( Iterator < TextEdit > iterator = fChildren . iterator ( ) ; iterator . hasNext ( ) ; ) { TextEdit child = iterator . next ( ) ; $F84 ( buffer ) child . toStringWithChildren ( buffer , indent + NUM00 ) ; } } }
public static void encode ( Appendable out , int value ) throws IOException { value = toVLQSigned ( value ) ; do { int digit = value & VLQ_BASE_MASK ; value >>>= VLQ_BASE_SHIFT ; if ( value > NUM00 ) { digit |= VLQ_CONTINUATION_BIT ; } out . append ( Base64 . toBase64 ( digit ) ) ; } while ( value > NUM00 ) ; }
public mxICellOverlay removeCellOverlay ( Object cell , mxICellOverlay overlay ) { if ( overlay == null ) { removeCellOverlays ( cell ) ; } else { mxICellOverlay [ ] arr = getCellOverlays ( cell ) ; if ( arr != null ) { List < mxICellOverlay > list = Arrays . asList ( arr ) ; if $F16914 ( list , overlay ) { removeCellOverlayComponent ( overlay , cell ) ; } arr = ( mxICellOverlay [ ] ) list . toArray ( ) ; overlays . put ( cell , arr ) ; } } return overlay ; }
public void removeForeignKey ( int idx ) $F106 ( foreignKeys , idx )
public $F21637 insert ( int offset , int i ) { internal . insert ( offset , i ) ; return this ; }
public void addGefaehrdungsUmsetzung ( GefaehrdungsUmsetzung gefaehrdung ) $F2202 ( allGefaehrdungsUmsetzungen , gefaehrdung )
String normalizeClassPath ( String classPath , boolean generateRelative ) { char sep = CauchoUtil . getPathSeparatorChar ( ) ; int head = NUM00 ; int tail = NUM00 ; CharBuffer cb = CharBuffer . allocate ( ) ; while $F7007 ( head , classPath ) { tail = classPath . indexOf ( sep , head ) ; if ( tail < NUM00 ) $F3935 ( tail , classPath ) if ( tail > head ) { $F12715 ( segment , classPath , head , tail ) segment = normalizePath ( segment , generateRelative ) ; if ( segment != null ) { if $F35625 ( cb ) cb . append ( sep ) ; cb . append ( segment ) ; } } head = tail + NUM00 ; } return cb . close ( ) ; }
protected ASN1Sequence ( ASN1Encodable obj ) $F6659 ( seq , obj )
public static double pow $F30455 ( x , y ) { if ( y == NUM00 ) $F1083 else { $F137479 ( yBits , Double , y ) final int yRawExp = ( int ) ( ( yBits & MASK_DOUBLE_EXPONENT ) > > NUM00 ) ; final long yRawMantissa = yBits & MASK_DOUBLE_MANTISSA ; $F137479 ( xBits , Double , x ) final int xRawExp = ( int ) ( ( xBits & MASK_DOUBLE_EXPONENT ) > > NUM00 ) ; final long xRawMantissa = xBits & MASK_DOUBLE_MANTISSA ; if ( yRawExp > NUM00 ) { if ( ( yRawExp == NUM00 && yRawMantissa != NUM00 ) || ( xRawExp == NUM00 && xRawMantissa != NUM00 ) ) $F6623 ( Double ) else if ( xRawExp == NUM00 && xRawMantissa == NUM00 ) { if ( yRawExp == NUM00 ) $F6623 ( Double ) else $F1083 } else { if ( ( y > NUM00 ) ^ ( xRawExp < NUM00 ) ) $F90685 ( Double ) else { return + NUM00 ; } } } else { if ( yRawExp >= NUM00 ) { final long yFullMantissa = IMPLICIT_HIGH_BIT | yRawMantissa ; if ( yRawExp < NUM00 ) { final long integralMask = $F81964 < < ( NUM00 - yRawExp ) ; if ( ( yFullMantissa & integralMask ) == yFullMantissa ) { final long l = yFullMantissa > > ( NUM00 - yRawExp ) ; return FastMath . pow ( x , ( y < NUM00 ) ? - l : l ) ; } } else { final long l = yFullMantissa < < ( yRawExp - NUM00 ) ; return FastMath . pow ( x , ( y < NUM00 ) ? - l : l ) ; } } if ( x == NUM00 ) { return y < NUM00 ? Double . POSITIVE_INFINITY : + NUM00 ; } else if ( xRawExp == NUM00 ) { if ( xRawMantissa == NUM00 ) { return ( y < NUM00 ) ? + NUM00 : Double . POSITIVE_INFINITY ; } else $F6623 ( Double ) } else if ( x < NUM00 ) $F6623 ( Double ) else { final double tmp = y * HEX_40000000 ; final double ya = ( y + tmp ) - tmp ; final double yb = y - ya ; final double lns [ ] = $F1990 ; final double lores = log ( x , lns ) ; if $F28102 ( Double , lores ) { return lores ; } double lna = lns [ NUM00 ] ; double lnb = lns [ NUM00 ] ; final double tmp1 = lna * HEX_40000000 ; final double tmp2 = ( lna + tmp1 ) - tmp1 ; lnb += lna - tmp2 ; lna = tmp2 ; final double aa = lna * ya ; final double ab = lna * yb + lnb * ya + lnb * yb ; lna = aa + ab ; lnb = - ( lna - aa - ab ) ; double z = NUM00 / NUM00 ; z = z * lnb + $F52906 ; z = z * lnb + $F52906 ; z = z * lnb + NUM00 ; z = z * lnb + NUM00 ; z *= lnb ; final double result = exp ( lna , z , null ) ; return result ; } } } }
public final void push ( int value ) { int ff = m_firstFree ; if $F11078 ( ff , m_mapSize ) { if ( null == m_map ) $F74814 ( m_map , m_blocksize , m_mapSize ) else { m_mapSize += m_blocksize ; int newMap [ ] = new int [ m_mapSize ] ; $F10236 ( System , m_map , newMap , ff ) m_map = newMap ; } } m_map [ ff ] = value ; ff ++ ; m_firstFree = ff ; }
protected Node stringConversion ( Node node ) { TypeElement stringElement = elements . getTypeElement ( NUM00 ) ; if ( ! TypesUtils . isString ( node . getType ( ) ) ) { Node converted = new StringConversionNode ( node . getTree ( ) , node , stringElement . asType ( ) ) ; addToConvertedLookupMap ( converted ) ; insertNodeAfter ( converted , node ) ; return converted ; } else { return node ; } }
$F61852 public void testUpdate7 $F72 throws SQLException { DatabaseCreator . fillFKStrictTable ( conn ) ; statement . executeUpdate ( NUM00 + DatabaseCreator . FKSTRICT_TABLE + NUM00 + DatabaseCreator . PARENT_TABLE + NUM00 ) ; ResultSet r = statement . executeQuery ( NUM00 + DatabaseCreator . FKSTRICT_TABLE + NUM00 ) ; $F24630 ( r ) $F92911 ( assertEquals , r ) $F59 ( r ) }
CompletableFuture < HistoryReadResponse > historyRead ( HistoryReadDetails historyReadDetails , TimestampsToReturn timestampsToReturn , boolean releaseContinuationPoints , List < HistoryReadValueId > nodesToRead ) ;
private void validate $F72 throws URISyntaxException { String s = getScheme ( ) ; if ( ( s != null ) && $F87842 ( s ) ) $F932 if ( getLocalVmId ( ) == - NUM00 ) { throw new URISyntaxException ( uri . toString ( ) , NUM00 ) ; } }
public synchronized void finishWriting $F72 $F21847 ( doneWriting , _BOOL , notifyAll )
private long offset2PhysicalAddress ( final long offset ) { return offset + headerSize ; }
$F1 public void internalEntityDecl ( String name , XMLString text , XMLString nonNormalizedText , Augmentations augs ) throws XNIException { try { if ( fDeclHandler != null ) { fDeclHandler . internalEntityDecl ( name , text . toString ( ) ) ; } } $F122277 ( e ) }
public static boolean isAuthorized ( String logName , String operation , Object credential ) { return authorizer . isAuthorized ( logName , operation , credential ) ; }
public Object next $F72 { if ( pos < size ) return Array . get ( array , pos ++ ) ; throw new NoSuchElementException ( NUM00 + pos + NUM00 + size ) ; }
public void addMessages ( List < ? extends Message > messages ) { $F12265 ( SHOW_LOGS , Logger , TAG , messages ) mQueueLock . lock ( TAG ) ; mPlayerMessagesQueue . addAll ( messages ) ; mQueueLock . notify ( TAG ) ; $F12265 ( SHOW_LOGS , Logger , TAG , messages ) mQueueLock . unlock ( TAG ) ; }
public PermissionRequestObject onRational ( Func3 rationalFunc ) { mRationalFunc = rationalFunc ; return this ; }
public GenericPrincipal ( String userName , String password , $F3803 roles , Map < String , List < GenericPrincipal . Attribute > > writeEntries , Map < String , List < GenericPrincipal . Attribute > > readEntries , Map < String , List < GenericPrincipal . Attribute > > executeTasks ) { this . userName = userName ; this . password = password ; this . writeEntries = writeEntries ; this . readEntries = readEntries ; this . executeTasks = executeTasks ; if ( roles != null ) { this . roles = new String $F2313 ( roles ) ; this . roles = roles . toArray ( this . roles ) ; if ( this . roles . length > NUM00 ) Arrays . sort ( this . roles ) ; } writeMatchObjects = new HashMap < String , MatchObject > $F72 ; readMatchObjects = new HashMap < String , MatchObject > $F72 ; executeMatchObjects = new HashMap < String , MatchObject > $F72 ; $F30598 ( userDefinedRoles ) }
public boolean equals ( Object other ) { $F3627 ( other , this , _BOOL ) if ( ! ( other instanceof X509CRLEntry ) ) { return _BOOL ; } X509CRLEntry obj = ( X509CRLEntry ) other ; try $F120506 ( Arrays , getEncoded , obj ) $F222842 ( _BOOL ) }
public static int roll1D6 $F72 { return $F6823 ( rand ) ; }
static $F96 septetStream2octetStream $F97 ( septets ) { int octetLength = ( int ) Math . ceil ( ( $F28143 ( septets ) ) / NUM00 ) ; $F2175 ( octets , octetLength ) for ( $F1139 ( i , septets ) ) { for ( $F6268 ( j ) ) { if ( ( septets [ i ] & ( NUM00 < < j ) ) != NUM00 ) { int bitIndex = ( i * NUM00 ) + j ; octets [ bitIndex > > > NUM00 ] |= NUM00 < < ( bitIndex & NUM00 ) ; } } } return octets ; }
public CTaggingPanel ( final JFrame parent , final ZyGraph graph , final ITagManager manager ) { $F9898 ( super ) m_tagsTree = new CTagsTree ( parent , graph , manager ) ; final JScrollPane pane = new JScrollPane ( m_tagsTree ) ; pane . setVerticalScrollBarPolicy ( ScrollPaneConstants . VERTICAL_SCROLLBAR_AS_NEEDED ) ; pane . setHorizontalScrollBarPolicy ( ScrollPaneConstants . HORIZONTAL_SCROLLBAR_AS_NEEDED ) ; add ( pane ) ; setBorder ( new TitledBorder ( new LineBorder ( Color . LIGHT_GRAY , NUM00 , _BOOL ) , NUM00 ) ) ; setDoubleBuffered ( _BOOL ) ; }
$F1 public double height ( final int markerIndex ) { MathUtils . checkRangeInclusive ( markerIndex , NUM00 , markerArray . length - NUM00 ) ; return markerArray [ markerIndex ] . markerHeight ; }
public $F9340 void consume ( String groupId , String clientId , OffsetResetStrategy autoOffsetReset , Deserializer $F22664 keyDeserializer , Deserializer $F2193 valueDeserializer , BooleanSupplier continuation , OffsetCommitCallback offsetCommitCallback , Runnable completion , $F6877 topics , java . util . function . Consumer < ConsumerRecord $F9340 > consumerFunction ) { Properties props = getConsumerProperties ( groupId , clientId , autoOffsetReset ) ; Thread t = new Thread $F8320 ; t . setName ( clientId + NUM00 ) ; $F2346 ( t ) }
public double distance ( Instance first , Instance second , PerformanceStats stats ) { return Math . sqrt ( distance ( first , second , Double . POSITIVE_INFINITY , stats ) ) ; }
$F25527 ( redundantOpCompactThreshold , redundantOpCount , lruEntries )
public void findSameAsChaining ( Resource subj , $F25925 currentSameAs , $F83495 contxts ) throws InferenceEngineException { try { CloseableIteration < Statement , QueryEvaluationException > subjIter = RyaDAOHelper . query ( ryaDAO , subj , OWL . SAMEAS , null , conf , contxts ) ; while $F2921 ( subjIter ) { Statement st = subjIter . next ( ) ; if ( ! currentSameAs . contains ( st . getObject ( ) ) ) { Resource castedObj = ( Resource ) st . getObject ( ) ; currentSameAs . add ( castedObj ) ; findSameAsChaining ( castedObj , currentSameAs , contxts ) ; } } $F59 ( subjIter ) CloseableIteration < Statement , QueryEvaluationException > objIter = RyaDAOHelper . query ( ryaDAO , null , OWL . SAMEAS , subj , conf , contxts ) ; while $F2921 ( objIter ) { Statement st = objIter . next ( ) ; if ( ! currentSameAs . contains ( st . getSubject ( ) ) ) { Resource sameAsSubj = st . getSubject ( ) ; currentSameAs . add ( sameAsSubj ) ; findSameAsChaining ( sameAsSubj , currentSameAs , contxts ) ; } } $F59 ( objIter ) } catch ( QueryEvaluationException e ) { throw new InferenceEngineException ( e ) ; } }
public static void reindex ( Connection conn ) throws SQLException { init ( conn ) ; removeAllTriggers ( conn , TRIGGER_PREFIX ) ; removeIndexFiles ( conn ) ; $F11282 ( stat , conn ) ResultSet rs = stat . executeQuery ( NUM00 + SCHEMA + NUM00 ) ; while $F1682 ( rs ) { $F21024 ( schema , rs ) $F21024 ( table , rs ) createTrigger ( conn , schema , table ) ; indexExistingRows ( conn , schema , table ) ; } }
String toDot $F72 { $F83 ( buf ) for ( Type t : inferenceContext . undetvars ) { UndetVar uv = ( UndetVar ) t ; buf . append ( String . format ( NUM00 , uv . qtype , uv . getBounds ( InferenceBound . UPPER ) , uv . getBounds ( InferenceBound . LOWER ) , uv . getBounds ( InferenceBound . EQ ) ) ) ; } return GraphUtils . toDot ( nodes , NUM00 + hashCode ( ) , buf . toString ( ) ) ; }
private void resizeTables $F72 { if ( mObjectDataUsed > mObjectData . length - MAX_DATA_SIZE ) { mObjectData = Arrays . copyOf ( mObjectData , mObjectData . length * NUM00 ) ; } if ( mObjectCount < mTypes . length ) $F932 mObjectOffset = Arrays . copyOf ( mObjectOffset , mObjectOffset . length * NUM00 ) ; mTypes = Arrays . copyOf ( mTypes , mTypes . length * NUM00 ) ; mObjects = Arrays . copyOf ( mObjects , mObjects . length * NUM00 ) ; mRect = Arrays . copyOf ( mRect , mRect . length * NUM00 ) ; }
private boolean hasNextInetSocketAddress $F72 $F231867 ( nextInetSocketAddressIndex , inetSocketAddresses )
protected static double convertPercentileToX ( double percentileLevelIteratedTo ) { double x = NUM00 / ( NUM00 - ( percentileLevelIteratedTo / NUM00 ) ) ; return Math . log10 ( x ) ; }
public static String queueNameFromDBName ( String dbName ) { $F806 tokens = $F289440 ( dbName ) ; return tokens [ NUM00 ] ; }
public String UseThis $F103468 ( type , id , context ) { int i = FindSym ( type , id , context ) ; if $F25745 ( i , symtab ) return id ; else return ( ( SymTabEntry ) symtab . elementAt ( i ) ) . useThis ; }
private float angle ( TouchState s ) { return ( float ) Math . toDegrees ( Math . atan2 ( s . yDown - s . yCurrent , s . xDown - s . xCurrent ) ) ; }
private int uint16FromData ( int offset ) { return twoBytesToInt ( Arrays . copyOfRange ( data ( ) , offset , offset + NUM00 ) , Constants . CC2540_BYTE_ORDER ) ; }
protected static $F7329 asrRegister $F7334 ( offset , environment , instructions , registerNodeValue1 , registerNodeValue2 ) { $F7336 ( shifterOperand , environment ) $F7336 ( shifterCarryOut , environment ) $F7336 ( isZeroCondition , environment ) $F7336 ( isLessCondition , environment ) $F7336 ( isGtEqCondition , environment ) $F7336 ( shifterCarryOutTmp1 , environment ) $F7336 ( shifterCarryOutTmp2 , environment ) $F7336 ( shifterCarryOutTmp3 , environment ) $F7336 ( shifterCarryOutTmp4 , environment ) $F7336 ( shifterOperandTmp1 , environment ) $F7336 ( shifterOperandTmp2 , environment ) $F7336 ( shifterOperandTmp3 , environment ) $F7336 ( shifterOperandTmp4 , environment ) $F7336 ( tmpRsRegister , environment ) $F7336 ( negativeTmpRsRegister , environment ) $F7336 ( tmpVar1 , environment ) $F7336 ( tmpVar2 , environment ) $F7336 ( tmpVar3 , environment ) $F7336 ( tmpVar4 , environment ) $F7336 ( tmpVar5 , environment ) $F7336 ( tmpVar6 , environment ) $F7336 ( tmpVar7 , environment ) $F7336 ( tmpVar8 , environment ) $F7336 ( tmpVar9 , environment ) $F7336 ( tmpVar10 , environment ) $F7336 ( tmpVar11 , environment ) long baseOffset = offset ; instructions . add ( ReilHelpers . createAnd ( baseOffset ++ , dWordSize , registerNodeValue2 , dWordSize , String . valueOf ( NUM00 ) , dWordSize , tmpRsRegister ) ) ; instructions . add ( ReilHelpers . createSub ( baseOffset ++ , dWordSize , zeroSet , dWordSize , tmpRsRegister , dWordSize , negativeTmpRsRegister ) ) ; $F453896 ( instructions , ReilHelpers , baseOffset , dWordSize , tmpRsRegister , byteSize , isZeroCondition ) instructions . add ( ReilHelpers . createAnd ( baseOffset ++ , byteSize , NUM00 , byteSize , isZeroCondition , byteSize , shifterCarryOutTmp1 ) ) ; instructions . add ( ReilHelpers . createSub ( baseOffset ++ , dWordSize , String . valueOf ( NUM00 ) , byteSize , isZeroCondition , dWordSize , tmpVar1 ) ) ; $F7341 ( instructions , ReilHelpers , baseOffset , dWordSize , tmpVar1 , registerNodeValue2 , shifterOperandTmp1 ) instructions . add ( ReilHelpers . createAnd ( baseOffset ++ , dWordSize , tmpRsRegister , dWordSize , String . valueOf ( NUM00 ) , dWordSize , tmpVar2 ) ) ; $F453896 ( instructions , ReilHelpers , baseOffset , dWordSize , tmpVar2 , byteSize , isLessCondition ) $F43828 ( instructions , ReilHelpers , baseOffset , dWordSize , registerNodeValue1 , bitMaskHighestBitSet , tmpVar3 ) instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dWordSize , tmpVar3 , dWordSize , negativeTmpRsRegister , dWordSize , tmpVar4 ) ) ; instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dWordSize , bitMaskHighestBitSet , dWordSize , negativeTmpRsRegister , dWordSize , tmpVar5 ) ) ; instructions . add ( ReilHelpers . createSub ( baseOffset ++ , dWordSize , tmpVar4 , dWordSize , tmpVar5 , dWordSize , tmpVar6 ) ) ; instructions . add ( ReilHelpers . createSub ( baseOffset ++ , dWordSize , zeroSet , byteSize , isLessCondition , dWordSize , tmpVar7 ) ) ; $F7341 ( instructions , ReilHelpers , baseOffset , dWordSize , tmpVar6 , tmpVar7 , shifterOperandTmp2 ) instructions . add ( ReilHelpers . createSub ( baseOffset ++ , dWordSize , tmpRsRegister , byteSize , oneSet , dWordSize , tmpVar8 ) ) ; instructions . add ( ReilHelpers . createSub ( baseOffset ++ , dWordSize , zeroSet , dWordSize , tmpVar8 , dWordSize , tmpVar8 ) ) ; instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dWordSize , registerNodeValue1 , dWordSize , tmpVar8 , dWordSize , tmpVar9 ) ) ; $F7364 ( instructions , ReilHelpers , baseOffset , dWordSize , tmpVar9 , byteSize , isLessCondition , shifterCarryOutTmp2 ) $F43825 ( instructions , ReilHelpers , baseOffset , byteSize , isZeroCondition , isLessCondition , tmpVar10 ) instructions . add ( ReilHelpers . createBisz ( baseOffset ++ , byteSize , tmpVar10 , byteSize , isGtEqCondition ) ) ; instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dWordSize , registerNodeValue1 , dWordSize , minusThirtyOneSet , byteSize , tmpVar11 ) ) ; instructions . add ( ReilHelpers . createSub ( baseOffset ++ , byteSize , zeroSet , byteSize , isGtEqCondition , dWordSize , shifterOperandTmp3 ) ) ; $F7341 ( instructions , ReilHelpers , baseOffset , byteSize , tmpVar11 , isGtEqCondition , shifterCarryOutTmp3 ) $F43825 ( instructions , ReilHelpers , baseOffset , byteSize , shifterCarryOutTmp1 , shifterCarryOutTmp2 , shifterCarryOutTmp4 ) $F43825 ( instructions , ReilHelpers , baseOffset , byteSize , shifterCarryOutTmp3 , shifterCarryOutTmp4 , shifterCarryOut ) $F43825 ( instructions , ReilHelpers , baseOffset , dWordSize , shifterOperandTmp1 , shifterOperandTmp2 , shifterOperandTmp4 ) $F43825 ( instructions , ReilHelpers , baseOffset , dWordSize , shifterOperandTmp3 , shifterOperandTmp4 , shifterOperand ) $F7348 ( shifterOperand , shifterCarryOut ) }
private static String removeQuotesEncolosingOption ( String fileName , String option ) throws Exception { String option1 = removeQuoteCharactersIfNecessary ( fileName , option , NUM00 ) ; if $F2137 ( option1 , option ) { return option1 ; } return removeQuoteCharactersIfNecessary ( fileName , option , NUM00 ) ; }
$F1 public String generateLabel ( XYDataset dataset , int series ) { $F19400 ( ParamChecks , dataset ) String label = MessageFormat . format ( this . formatPattern , createItemArray ( dataset , series ) ) ; return label ; }
private boolean matchStrings ( String pattern , String str , $F2540 ( uriTemplateVariables ) ) { AntPathStringMatcher matcher = new AntPathStringMatcher ( pattern , str , uriTemplateVariables ) ; return matcher . matchStrings ( ) ; }
$F5466 public Dimension adjust ( $F1113 Dimension newPreferredSize , $F5466 Dimension oldPreferredSize , $F1113 EditorImpl editor ) { if ( oldPreferredSize == null || mySkip ) { return newPreferredSize ; } if ( newPreferredSize . height != oldPreferredSize . height ) { return newPreferredSize ; } stripTimings ( ) ; myTimings . add ( System . currentTimeMillis ( ) ) ; if $F10255 ( myTimings , FREQUENT_SIZE_CHANGES1BER ) { return newPreferredSize ; } boolean increaseWidth = newPreferredSize . width > oldPreferredSize . width ; Dimension result ; if ( increaseWidth ) { final int spaceWidth = EditorUtil . getSpaceWidth ( Font . PLAIN , editor ) ; newPreferredSize . width += myReserveColumns * spaceWidth ; myReserveColumns += NUM00 ; result = newPreferredSize ; } else { result = oldPreferredSize ; } scheduleSizeUpdate ( editor ) ; return result ; }
public RVMField findDeclaredField ( Atom fieldName , Atom fieldDescriptor ) { for ( RVMField field : declaredFields ) { if ( field . getName ( ) == fieldName && field . getDescriptor ( ) == fieldDescriptor ) { return field ; } } $F1274 }
public Quarter ( Date time , TimeZone zone ) $F118649 ( this , time , zone , Locale )
private Util $F72 $F845
default B withDefault ( String key , float value ) $F65298 ( withDefault , key , Float , value )
public static boolean readBoolean ( final JSONArray jsonArray , final int index , final boolean required , final boolean notNull ) throws JSONException { if ( required ) $F232979 ( jsonArray , index ) $F3652 ( notNull , jsonArray , index , String , Locale , NULL_VALUE_FORMAT_ARRAY ) boolean value = _BOOL ; if $F3653 ( jsonArray , index ) { value = jsonArray . getBoolean ( index ) ; } return value ; }
protected static void autoBoxing ( MethodVisitor mv , Type fieldType ) { switch ( fieldType . getSort ( ) ) { case Type . BOOLEAN : mv . visitMethodInsn ( INVOKESTATIC , NUM00 , NUM00 , NUM00 ) ; $F597 case Type . BYTE : mv . visitMethodInsn ( INVOKESTATIC , NUM00 , NUM00 , NUM00 ) ; $F597 case Type . CHAR : mv . visitMethodInsn ( INVOKESTATIC , NUM00 , NUM00 , NUM00 ) ; $F597 case Type . SHORT : mv . visitMethodInsn ( INVOKESTATIC , NUM00 , NUM00 , NUM00 ) ; $F597 case Type . INT : mv . visitMethodInsn ( INVOKESTATIC , NUM00 , NUM00 , NUM00 ) ; $F597 case Type . FLOAT : mv . visitMethodInsn ( INVOKESTATIC , NUM00 , NUM00 , NUM00 ) ; $F597 case Type . LONG : mv . visitMethodInsn ( INVOKESTATIC , NUM00 , NUM00 , NUM00 ) ; $F597 case Type . DOUBLE : mv . visitMethodInsn ( INVOKESTATIC , NUM00 , NUM00 , NUM00 ) ; $F597 } }
public final void openPdfFile $F3295 ( data ) throws PdfException { final RandomAccessBuffer pdf_datafile ; try { if ( PdfFileReader . alwaysCacheInMemory == - NUM00 || data . length < PdfFileReader . alwaysCacheInMemory ) { pdf_datafile = new RandomAccessDataBuffer ( data ) ; } else { try { final File file = File . createTempFile ( NUM00 , NUM00 , new File ( ObjectStore . temp_dir ) ) ; $F24536 ( tempFileName , file ) final java . io . FileOutputStream a = new java . io . FileOutputStream ( file ) ; a . write ( data ) ; $F1206 ( a ) $F59 ( a ) pdf_datafile = new RandomAccessFileBuffer ( tempFileName , NUM00 ) ; } catch ( final Exception e ) { throw new RuntimeException ( NUM00 + ObjectStore . temp_dir + NUM00 + e ) ; } } objectReader . init ( pdf_datafile ) ; } catch ( final Exception e ) { LogWriter . writeLog ( NUM00 + e + NUM00 ) ; throw new PdfException ( NUM00 + e + NUM00 ) ; } }
public static void main $F4374 ( args ) { if $F8830 ( args ) $F9465 ( LOGGER ) $F40997 ( lastIndex , args ) Path [ ] files = getFiles ( args ) ; Main main = new Main $F72 ; main . generate ( files [ lastIndex ] , Arrays . copyOf ( files , lastIndex ) ) ; }
$F5466 E awaitMatch ( int start ) { for ( int step = NUM00 , totalSpins = NUM00 ; ( step < ARENA_LENGTH ) && ( totalSpins < SPINS ) ; step ++ ) { int index = ( start + step ) & ARENA_MASK ; AtomicReference $F1432 slot = arena [ index ] ; $F86788 ( found , slot ) if ( found == FREE ) { if $F73502 ( slot , FREE , WAITER ) { int slotSpins = NUM00 ; for ( $F589 ) { $F16478 ( found , slot ) if ( ( found != WAITER ) && slot . compareAndSet ( found , FREE ) ) { $F1431 E e = ( E ) found ; return e ; } else if ( ( slotSpins >= SPINS_PER_STEP ) && ( found == WAITER ) && $F73502 ( slot , WAITER , FREE ) ) { totalSpins += slotSpins ; $F597 } slotSpins ++ ; } } } else if ( ( found != WAITER ) && slot . compareAndSet ( found , FREE ) ) { $F1431 E e = ( E ) found ; return e ; } } $F1274 }
private ArrayList < Signature > constructOneSignatures ( SetDBIDs [ ] [ ] partitions , final long [ ] [ ] markers ) { $F18832 ( dim , partitions ) ArrayList < Signature > $F204 ( signatures ) ; for ( $F119 ( d , dim ) ) { final DBIDs [ ] parts = partitions [ d ] ; $F4322 ( parts ) final $F2469 marked = markers [ d ] ; for ( int start = BitsUtil . nextSetBit ( marked , NUM00 ) ; start >= NUM00 ; ) { int end = BitsUtil . nextClearBit ( marked , start + NUM00 ) ; end = ( end == - NUM00 ) ? dim : end ; $F2027 signature = new int [ dim < < NUM00 ] ; $F99493 ( Arrays , signature ) signature [ d < < NUM00 ] = start ; $F107987 ( signature , d ) = end - NUM00 ; HashSetModifiableDBIDs sids = unionDBIDs ( parts , start , end ) ; if $F88618 ( LOG ) { LOG . debug ( NUM00 + d + NUM00 + start + NUM00 + ( end - NUM00 ) ) ; } signatures . add ( new Signature ( signature , sids ) ) ; start = ( end < dim ) ? BitsUtil . nextSetBit ( marked , end + NUM00 ) : - NUM00 ; } } return signatures ; }
public void testTestBitPositive1 $F72 { $F123148 int aSign = NUM00 ; int number = NUM00 ; $F3023 ( aNumber , aSign , aBytes ) assertTrue ( ! aNumber . testBit ( number ) ) ; }
public static int findEndTrimNewlineChars ( CharSequence s ) { for ( $F1748 ( i , s ) ; i > NUM00 ; ) { if ( $F17486 ( s , i ) ) { return i ; } i -- ; if $F41319 ( i , s ) { i -- ; } } $F1082 }
public static String assertJQ ( SolrQueryRequest req , String ... tests ) throws Exception { return assertJQ ( req , JSONTestUtil . DEFAULT_DELTA , tests ) ; }
public void popElemAttributeSet $F72 $F89427 ( m_attrSetStack )
private void calcCoordinates ( final float x , final $F101632 Trm , float charSpacing ) { final $F101632 trm = new float $F387 ; for ( $F6268 ( xx ) ) { System . arraycopy ( Trm [ xx ] , NUM00 , trm [ xx ] , NUM00 , NUM00 ) ; } x1 = x ; x2 = trm [ NUM00 ] [ NUM00 ] - ( charSpacing * trm [ NUM00 ] [ NUM00 ] ) ; if $F441256 ( glyphData ) { if $F148942 ( trm ) { x1 = x + trm [ NUM00 ] [ NUM00 ] - ( charSpacing * trm [ NUM00 ] [ NUM00 ] ) ; $F293670 ( x2 , trm ) } else if ( $F148939 ( trm ) ) { x1 = x ; $F293670 ( x2 , trm ) } } else if ( $F148939 ( trm ) ) { $F293670 ( x1 , trm ) x2 = x + trm [ NUM00 ] [ NUM00 ] - ( charSpacing * trm [ NUM00 ] [ NUM00 ] ) ; } else if $F148942 ( trm ) { $F293670 ( x2 , trm ) x1 = x + trm [ NUM00 ] [ NUM00 ] - ( charSpacing * trm [ NUM00 ] [ NUM00 ] ) ; } }
public void printEntry ( Writer w ) { try { String indent = NUM00 ; $F1749 ( indentWidth , indent ) HardcopyWriter ww = ( HardcopyWriter ) w ; int textSpace = ww . getCharactersPerLine ( ) - indentWidth - NUM00 ; String newLine = NUM00 ; $F105801 ( w , newLine ) String s = NUM00 + _id ; $F170077 ( w , s ) if ( ! $F3057 ( _consistNumber ) ) { $F105801 ( w , newLine ) s = NUM00 + _consistNumber ; $F170077 ( w , s ) } if ( ! $F3057 ( _roadName ) ) { $F105801 ( w , newLine ) s = NUM00 + _roadName ; $F170077 ( w , s ) } if ( ! $F3057 ( _roadNumber ) ) { $F105801 ( w , newLine ) s = NUM00 + _roadNumber ; $F170077 ( w , s ) } if ( ! $F3057 ( _model ) ) { $F105801 ( w , newLine ) s = NUM00 + _model ; $F170077 ( w , s ) } if ( ! $F3057 ( _loco1DccAddress ) ) { $F105801 ( w , newLine ) s = NUM00 + _loco1DccAddress + NUM00 + _loco1Direction ; $F170077 ( w , s ) } if ( ! $F3057 ( _loco2DccAddress ) ) { $F105801 ( w , newLine ) s = NUM00 + _loco2DccAddress + NUM00 + _loco2Direction ; $F170077 ( w , s ) } if ( ! $F3057 ( _loco3DccAddress ) ) { $F105801 ( w , newLine ) s = NUM00 + _loco3DccAddress + NUM00 + _loco3Direction ; $F170077 ( w , s ) } if ( ! $F3057 ( _loco4DccAddress ) ) { $F105801 ( w , newLine ) s = NUM00 + _loco4DccAddress + NUM00 + _loco4Direction ; $F170077 ( w , s ) } if ( ! $F3057 ( _loco5DccAddress ) ) { $F105801 ( w , newLine ) s = NUM00 + _loco5DccAddress + NUM00 + _loco5Direction ; $F170077 ( w , s ) } if ( ! $F3057 ( _loco6DccAddress ) ) { $F105801 ( w , newLine ) s = NUM00 + _loco6DccAddress + NUM00 + _loco6Direction ; $F170077 ( w , s ) } if ( ! $F3057 ( _comment ) ) { $F11968 commentVector = wrapComment ( _comment , textSpace ) ; int k = NUM00 ; $F105801 ( w , newLine ) s = NUM00 + commentVector . elementAt ( k ) ; $F170077 ( w , s ) k ++ ; while $F1765 ( k , commentVector ) { String token = commentVector . elementAt ( k ) ; if $F1264 ( token ) { s = indent + token ; } else { s = token ; } $F170077 ( w , s ) k ++ ; } } $F105801 ( w , newLine ) } catch ( IOException e ) $F17663 ( log , e ) }
protected $F22273 fromJulian ( int julian ) { YMD ymd = new YMD ( julian ) ; GregorianCalendar cal = new GregorianCalendar ( ymd . year , ymd . month - NUM00 , ymd . day ) ; $F11894 ( cal ) }
public synchronized boolean removeLast ( K obj ) { if ( peekLast ( ) != obj ) { return _BOOL ; } array = Arrays . copyOf ( array , array . length - NUM00 ) ; return _BOOL ; }
private boolean serializeCompactRDFStructProp ( XMPNode node , int indent , boolean hasRDFResourceQual ) throws XMPException , IOException { boolean hasAttrFields = _BOOL ; boolean hasElemFields = _BOOL ; boolean emitEndTag = _BOOL ; for ( Iterator ic = node . iterateChildren ( ) ; ic . hasNext ( ) ; ) { $F38096 ( field , ic ) if ( canBeRDFAttrProp ( field ) ) { hasAttrFields = _BOOL ; } else { hasElemFields = _BOOL ; } if ( hasAttrFields && hasElemFields ) $F5153 } if ( hasRDFResourceQual && hasElemFields ) { throw new XMPException ( NUM00 , XMPError . BADRDF ) ; } if ( ! node . hasChildren ( ) ) { write ( NUM00 ) ; writeNewline ( ) ; emitEndTag = _BOOL ; } else if ( ! hasElemFields ) { serializeCompactRDFAttrProps ( node , indent + NUM00 ) ; write ( NUM00 ) ; writeNewline ( ) ; emitEndTag = _BOOL ; } else if ( ! hasAttrFields ) { write ( NUM00 ) ; writeNewline ( ) ; serializeCompactRDFElementProps ( node , indent + NUM00 ) ; } else { write ( NUM00 ) ; writeNewline ( ) ; writeIndent ( indent + NUM00 ) ; write ( RDF_STRUCT_START ) ; serializeCompactRDFAttrProps ( node , indent + NUM00 ) ; write ( NUM00 ) ; writeNewline ( ) ; serializeCompactRDFElementProps ( node , indent + NUM00 ) ; writeIndent ( indent + NUM00 ) ; write ( RDF_STRUCT_END ) ; writeNewline ( ) ; } return emitEndTag ; }
public default UtilityTable queryUtil ( BNetwork network , String queryVar , Assignment evidence ) { return queryUtil ( new Query . UtilQuery ( network , Arrays . asList ( queryVar ) , evidence ) ) ; }
public static $F5415 stringListToNumeric $F24643 ( scoreList ) throws NumberFormatException { $F5415 scores = new float $F2313 ( scoreList ) ; int scoreId = NUM00 ; for ( String score : scoreList ) { float floatScore = ( float ) Double . parseDouble ( score ) ; if $F35707 ( Float , floatScore ) $F111291 ( score ) scores [ scoreId ++ ] = floatScore ; } return scores ; }
$F1 public void next $F72 { currentImage = Optional . of ( addIndexAndGetImageByOffset ( + NUM00 ) ) ; eventBus . post ( new SourceHasPendingUpdateEvent ( this ) ) ; }
protected void parse ( DataInputStream stream ) throws Exception { $F5952 ( size , stream ) int ret , read = NUM00 ; $F1325 ( data , size ) while ( size > NUM00 ) { ret = stream . read ( data , read , size ) ; size -= ret ; read += ret ; } }
private List $F43793 findBestInsertion ( List $F43793 partialRoute , boolean allowAsMajor ) { int startIndex = NUM00 ; $F40484 ( endIndex , partialRoute ) if ( allowAsMajor ) { startIndex = NUM00 ; $F8935 ( endIndex , partialRoute ) } List $F43793 newList = partialRoute ; double best = Double . POSITIVE_INFINITY ; List $F43793 bestList = null ; for ( int i = startIndex ; i <= endIndex ; i ++ ) { List $F43793 $F10252 ( tmpList , newList ) ; Activity tmpActivity = getRelocationActivity ( ) ; tmpList . add ( i , tmpActivity ) ; double tmp = evaluateList ( tmpList ) ; if ( tmp < best ) { if ( i == NUM00 ) { $F146148 ( tmpActivity ) tmpActivity . setEndTime ( Time . parseTime ( NUM00 ) ) ; } else if $F25745 ( i , partialRoute ) { $F146148 ( tmpActivity ) } else { $F146148 ( tmpActivity ) tmpActivity . setMaximumDuration ( Time . parseTime ( NUM00 ) ) ; } best = tmp ; bestList = tmpList ; } } return bestList ; }
$F97565 ( value , pattern , locale , calendar , format , _BOOL , fail , e )
public void writeShort ( int value ) throws IOException { checkWritePrimitiveTypes ( ) ; primitiveTypes . writeShort ( value ) ; }
private boolean isInitialized $F72 $F51935 ( poolNames )
public void onRegisterClick ( View view ) { Intent register = new Intent ( Intent . ACTION_VIEW , Uri . parse ( getString ( R . string . welcome_link_url ) ) ) ; setResult ( RESULT_CANCELED ) ; startActivity ( register ) ; }
private void registerExtraValidSubject ( String subject ) { extraValidSubjects . add ( subject ) ; restoredStatements . addAll ( unknownSubjects . removeAll ( subject ) ) ; }
public static String trimLine ( String line ) { $F1384 ( idx , line ) $F63871 ( idx , line ) $F123954 ( line ) }
public double distance2 ( double p1 , double p2 ) { return $F127638 ( p1 , p2 ) ; }
public static void appendInstruction ( OFFlowMod . Builder fmb , OFInstruction inst ) { List < OFInstruction > newIl = new ArrayList < OFInstruction > $F72 ; List < OFInstruction > oldIl = fmb . getInstructions ( ) ; if ( oldIl != null ) { newIl . addAll ( fmb . getInstructions ( ) ) ; } for ( OFInstruction i : newIl ) { if ( i . getType ( ) == inst . getType ( ) ) $F106 ( newIl , i ) } newIl . add ( inst ) ; fmb . setInstructions ( newIl ) ; }
public $F13085 iterator $F72 $F16048 ( orderList )
private void verifyDomainsIsNotInUse ( StringSet domains ) { checkForActiveTenantsUsingDomains ( domains ) ; checkForVdcRolesUsingDomains ( domains ) ; checkForTenantRolesUsingDomains ( domains ) ; checkForUserGroupsUsingDomains ( domains ) ; }
private Hashtable < IPoint , List < ICircle > > filter ( Hashtable < IPoint , ICircle [ ] > circleIntersections ) { Hashtable < IPoint , List < ICircle > > real = new Hashtable < IPoint , List < ICircle > > $F72 ; for ( IPoint pt : circleIntersections . keySet ( ) ) { ICircle [ ] circs = circleIntersections . get ( pt ) ; for ( $F21583 ( i , circs ) ) { for ( $F169942 ( j , i , circs ) ) { IPoint [ ] pts = intersects ( circs [ i ] , circs [ j ] ) ; if ( pts != null ) { for ( IPoint p : pts ) { report ( real , p , circs [ i ] , circs [ j ] ) ; } } } } } return real ; }
public void initWithoutJUnitForFixture ( Class fixture , Method method ) { this . testClass = fixture ; this . testMethodName = method . getName ( ) ; }
$F3594 ( oredCriteria , orderByClause , distinct , _BOOL )
public long sigignore $F72 $F12907 ( Long , fields )
protected JavaType findSerializationType ( Annotated a , boolean useStaticTyping , JavaType declaredType ) { $F6969 serClass = _annotationIntrospector . findSerializationType ( a ) ; if ( serClass != null ) { $F6969 rawDeclared = declaredType . getRawClass ( ) ; if $F62123 ( serClass , rawDeclared ) { declaredType = declaredType . widenBy ( serClass ) ; } else { if $F80006 ( rawDeclared , serClass ) { throw new IllegalArgumentException ( $F27322 ( a , serClass ) + rawDeclared . getName ( ) ) ; } declaredType = _config . constructSpecializedType ( declaredType , serClass ) ; } useStaticTyping = _BOOL ; } JavaType secondary = BeanSerializerFactory . modifySecondaryTypesByAnnotation ( _config , a , declaredType ) ; if ( secondary != declaredType ) { useStaticTyping = _BOOL ; declaredType = secondary ; } if ( ! useStaticTyping ) { JsonSerialize . Typing typing = _annotationIntrospector . findSerializationTyping ( a ) ; if ( typing != null ) { useStaticTyping = ( typing == JsonSerialize . Typing . STATIC ) ; } } return useStaticTyping ? declaredType : null ; }
private static void convert ( AScene scene , InputStream in , OutputStream out ) throws IOException , DefException , ParseException { IndexUnit iu = JavaParser . parse ( in ) ; extractScene ( iu , scene ) ; try ( Writer w = new BufferedWriter ( new OutputStreamWriter ( out ) ) ) { IndexFileWriter . write ( scene , w ) ; } }
public static $F9340 $F15228 of ( K k1 , V v1 , K k2 , V v2 ) { Map map = of ( ) ; map . put ( k1 , v1 ) ; map . put ( k2 , v2 ) ; return map ; }
$F1 public void write $F53421 ( chr ) throws IOException $F4050 ( out , chr )
public boolean boundScroll $F72 { float curScroll = getStackScroll ( ) ; float newScroll = getBoundedStackScroll ( curScroll ) ; if ( Float . compare ( newScroll , curScroll ) != NUM00 ) $F9278 ( setStackScroll , newScroll , _BOOL ) return _BOOL ; }
public static void load ( marytts . modules . synthesis . Voice maryVoice ) throws NoSuchPropertyException { if ( mary2freettsVoices == null ) mary2freettsVoices = new HashMap < marytts . modules . synthesis . Voice , com . sun . speech . freetts . Voice > $F72 ; if ( freetts2maryVoices == null ) freetts2maryVoices = new HashMap < com . sun . speech . freetts . Voice , marytts . modules . synthesis . Voice > $F72 ; if $F1710 ( mary2freettsVoices , maryVoice ) $F665 load ( maryVoice , createFreeTTSVoice ( maryVoice ) ) ; }
public void append ( int key , double value ) { $F49491 ( mSize , key , mKeys , put , value ) int pos = mSize ; if ( pos >= mKeys . length ) { $F49493 ( n , ArrayUtils , pos ) $F4120 ( nkeys , n ) $F9662 ( nvalues , n ) $F7057 ( System , mKeys , nkeys ) $F7057 ( System , mValues , nvalues ) mKeys = nkeys ; mValues = nvalues ; } mKeys [ pos ] = key ; mValues [ pos ] = value ; mSize = pos + NUM00 ; }
public synchronized void addIncrementalClassifierListener ( IncrementalClassifierListener cl ) $F207 ( m_incrementalClassifierListeners , cl )
public float readR4 $F72 throws $F3258 { return Float . intBitsToFloat ( $F112407 ( readDWORD ) ) ; }
public Collection engineGenerateCertificates ( InputStream inStream ) throws CertificateException { $F132633 cert ; $F19151 ( certs ) while $F2108 ( cert , engineGenerateCertificate , inStream ) $F207 ( certs , cert ) return certs ; }
public static boolean filesExistOnDestButNotSrc ( Configuration conf , Path src , Path dest , Optional < PathFilter > filter ) throws IOException { Set < FileStatus > srcFileStatuses = getFileStatusesRecursive ( conf , src , filter ) ; Set < FileStatus > destFileStatuses = getFileStatusesRecursive ( conf , dest , filter ) ; $F12295 srcFileSizes = null ; $F12295 destFileSizes = null ; try { srcFileSizes = getRelPathToSizes ( src , srcFileStatuses ) ; destFileSizes = getRelPathToSizes ( dest , destFileStatuses ) ; } catch ( ArgumentException e ) $F19592 ( e ) for ( $F3465 ( file , destFileSizes ) ) { if $F15257 ( srcFileSizes , file ) { LOG . warn ( String . format ( NUM00 , file , dest , src ) ) ; return _BOOL ; } } return _BOOL ; }
protected void convertOrder ( SqlSelect select , Blackboard bb , RelCollation collation , List < SqlNode > orderExprList , SqlNode offset , SqlNode fetch ) { if ( select . getOrderList ( ) == null || select . getOrderList ( ) . getList ( ) . isEmpty ( ) ) { assert collation . getFieldCollations ( ) . isEmpty ( ) ; if ( ( offset == null || ( ( SqlLiteral ) offset ) . bigDecimalValue ( ) . equals ( BigDecimal . ZERO ) ) && fetch == null ) $F932 } bb . setRoot ( LogicalSort . create ( bb . root , collation , offset == null ? null : convertExpression ( offset ) , fetch == null ? null : convertExpression ( fetch ) ) , _BOOL ) ; if ( $F3816 ( orderExprList ) && ! bb . top ) { final List < RexNode > $F204 ( exprs ) ; final RelDataType rowType = bb . root . getRowType ( ) ; final int fieldCount = rowType . getFieldCount ( ) - orderExprList . size ( ) ; for ( $F119 ( i , fieldCount ) ) { exprs . add ( rexBuilder . makeInputRef ( bb . root , i ) ) ; } bb . setRoot ( LogicalProject . create ( bb . root , exprs , rowType . getFieldNames ( ) . subList ( NUM00 , fieldCount ) ) , _BOOL ) ; } }
public void tickBlock ( BlockPos pos ) { List < BlockPos > $F204 ( validCoords ) ; for ( $F142929 ( xOffset , TICK_RANGE ) ) { for ( $F142929 ( zOffset , TICK_RANGE ) ) { if ( xOffset == NUM00 && zOffset == NUM00 ) $F598 if ( isValidSwapPosition ( pos . add ( xOffset , NUM00 , zOffset ) ) ) validCoords . add ( pos . add ( xOffset , NUM00 , zOffset ) ) ; } } if ( $F1030 ( validCoords ) && ! world . isRemote ) { BlockPos $F30353 ( toSwap , validCoords , rand ) ; world . setBlockState ( toSwap , stateToSet , NUM00 | NUM00 ) ; } }
public synchronized int updatePurchase ( String orderId , String productId , PurchaseState purchaseState , long purchaseTime , String developerPayload ) { insertOrder ( orderId , productId , purchaseState , purchaseTime , developerPayload ) ; Cursor cursor = mDb . query ( PURCHASE_HISTORY_TABLE_NAME , HISTORY_COLUMNS , HISTORY_PRODUCT_ID_COL + NUM00 , $F8640 ( productId ) , null , null , null , null ) ; $F1084 ( cursor ) int quantity = NUM00 ; try { while $F12260 ( cursor ) { $F24632 ( stateIndex , cursor ) $F2544 ( state , PurchaseState , stateIndex ) if ( state == PurchaseState . PURCHASED || state == PurchaseState . REFUNDED ) { quantity += NUM00 ; } } updatePurchasedItem ( productId , quantity ) ; } $F14364 ( cursor ) return quantity ; }
private void configureMessageLabel ( JLabel label ) { Color color = ( Color ) DefaultLookup . get ( optionPane , this , NUM00 ) ; if ( color != null ) { label . setForeground ( color ) ; } Font messageFont = ( Font ) DefaultLookup . get ( optionPane , this , NUM00 ) ; if ( messageFont != null ) { label . setFont ( messageFont ) ; } }
public void removeAllLimitLines $F72 $F9096 ( mLimitLines )
$F65837 ( node , count , capacity , _BOOL , f , first , last , notEmpty )
default Filterable $F4203 removeAll ( final Stream $F10049 stream ) { final $F28904 set = stream . collect ( Collectors . toSet ( ) ) ; return filterNot ( null ) ; }
public void drawLine ( $F106590 pts , $F2100 ( style ) ) { Color penColor = mxUtils . getStyleStrokeColor ( style , Color . BLACK ) ; float penWidth = mxUtils . getStyleStrokeWidth ( style , $F77473 ) ; if ( penColor != null && penWidth > NUM00 ) { String shape = mxUtils . getString ( style , mxConstants . STYLE_SHAPE , NUM00 ) ; if ( shape . equals ( mxConstants . SHAPE_ARROW ) ) { setStroke ( penWidth , style ) ; mxPoint p0 = pts . get ( NUM00 ) ; mxPoint $F7662 ( pe , pts ) ; Rectangle bounds = new Rectangle ( p0 . getPoint ( ) ) ; bounds . add ( pe . getPoint ( ) ) ; Color fillColor = mxUtils . getStyleFillColor ( style ) ; Paint fillPaint = getFillPaint ( bounds , fillColor , style ) ; boolean shadow = mxUtils . isTrue ( style , mxConstants . STYLE_SHADOW , _BOOL ) ; drawArrow ( pts , fillColor , fillPaint , penColor , shadow ) ; } else { Object startMarker = style . get ( mxConstants . STYLE_STARTARROW ) ; Object endMarker = style . get ( mxConstants . STYLE_ENDARROW ) ; float startSize = ( float ) ( mxUtils . getFloat ( style , mxConstants . STYLE_STARTSIZE , mxConstants . DEFAULT_MARKERSIZE ) ) ; float endSize = ( float ) ( mxUtils . getFloat ( style , mxConstants . STYLE_ENDSIZE , mxConstants . DEFAULT_MARKERSIZE ) ) ; boolean rounded = mxUtils . isTrue ( style , mxConstants . STYLE_ROUNDED , _BOOL ) ; drawConnector ( pts , penWidth , penColor , startMarker , startSize , endMarker , endSize , rounded , style ) ; } } }
private static MeteringRectangle [ ] regionsForNormalizedCoord ( float nx , float ny , float fraction , final Rect cropRegion , int sensorOrientation ) { int minCropEdge = Math . min ( $F78956 ( cropRegion ) ) ; int halfSideLength = ( int ) ( NUM00 * fraction * minCropEdge ) ; PointF nsc = CameraUtil . normalizedSensorCoordsForNormalizedDisplayCoords ( nx , ny , sensorOrientation ) ; int xCenterSensor = ( int ) ( cropRegion . left + nsc . x * cropRegion . width ( ) ) ; int yCenterSensor = ( int ) ( cropRegion . top + nsc . y * cropRegion . height ( ) ) ; Rect meteringRegion = new Rect ( xCenterSensor - halfSideLength , yCenterSensor - halfSideLength , xCenterSensor + halfSideLength , yCenterSensor + halfSideLength ) ; meteringRegion . left = CameraUtil . clamp ( meteringRegion . left , cropRegion . left , cropRegion . right ) ; meteringRegion . top = CameraUtil . clamp ( meteringRegion . top , cropRegion . top , cropRegion . bottom ) ; meteringRegion . right = CameraUtil . clamp ( meteringRegion . right , cropRegion . left , cropRegion . right ) ; meteringRegion . bottom = CameraUtil . clamp ( meteringRegion . bottom , cropRegion . top , cropRegion . bottom ) ; return new MeteringRectangle [ ] { new MeteringRectangle ( meteringRegion , CAMERA2_REGION_WEIGHT ) } ; }
$F1 public void flush $F72 throws IOException { flushBuffer ( ) ; $F1206 ( _outputStream ) }
public Vector ( double comp [ ] ) throws NegativeArraySizeException { int n = comp . length ; if ( n <= NUM00 ) throw new NegativeArraySizeException $F580 ; $F10254 ( components , n ) $F135 ( System , comp , components , n ) }
$F34101 ( aname , outerName , innerName , attr_access , name , this , super )
public long lonToPixel ( double lon ) { return ( long ) ( ( lon + NUM00 ) / NUM00 * Math . pow ( NUM00 , zoom ) * NUM00 ) ; }
public static boolean worldFileValuesAppearGeographic ( AVList values ) { double xLocation ; double yLocation ; double xPixelSize ; double yPixelSize ; Object o = values . getValue ( WORLD_FILE_X_LOCATION ) ; if ( o != null && o instanceof Double ) xLocation = ( Double ) o ; else return _BOOL ; o = values . getValue ( WORLD_FILE_Y_LOCATION ) ; if ( o != null && o instanceof Double ) yLocation = ( Double ) o ; else return _BOOL ; o = values . getValue ( WORLD_FILE_X_PIXEL_SIZE ) ; if ( o != null && o instanceof Double ) xPixelSize = ( Double ) o ; else return _BOOL ; o = values . getValue ( WORLD_FILE_Y_PIXEL_SIZE ) ; if ( o != null && o instanceof Double ) yPixelSize = ( Double ) o ; else return _BOOL ; return ( Angle . isValidLongitude ( xPixelSize ) && Angle . isValidLatitude ( yPixelSize ) && Angle . isValidLongitude ( xLocation ) && Angle . isValidLatitude ( yLocation ) ) ; }
public void storeInRegister ( int registerNumber ) throws IOException { print ( NUM00 , new String [ ] { Integer . toString ( registerNumber ) } ) ; }
public void remove ( SessionID sessionID ) $F106 ( remoteSessionSet , sessionID )
$F1 public synchronized String toString $F72 { $F40722 ( elementCount ) int length = elementCount - NUM00 ; $F40726 ( buffer , elementCount ) $F84 ( buffer ) for ( $F119 ( i , length ) ) { $F40728 ( elementData , i , this , buffer ) $F84 ( buffer ) } $F40728 ( elementData , length , this , buffer ) $F84 ( buffer ) $F92 ( buffer ) }
public Iterator < AbstractPage > childIterator ( final boolean dirtyNodesOnly ) { if ( dirtyNodesOnly ) { return new DirtyChildIterator ( this ) ; } else { return new ChildIterator $F72 ; } }
public void enable $F72 throws IOException { synchronized ( optOutLock ) { if ( isOptOut ( ) ) { $F113827 ( configuration , _BOOL ) configuration . save ( configurationFile ) ; } $F113304 ( task , start ) } }
public HMACT64 $F97 ( key ) { super ( NUM00 ) ; int length = Math . min ( key . length , BLOCK_LENGTH ) ; for ( $F119 ( i , length ) ) { ipad [ i ] = ( byte ) ( key [ i ] ^ IPAD ) ; opad [ i ] = ( byte ) ( key [ i ] ^ OPAD ) ; } for ( int i = length ; i < BLOCK_LENGTH ; i ++ ) { ipad [ i ] = IPAD ; opad [ i ] = OPAD ; } try $F14527 ( md5 , MessageDigest ) catch ( Exception ex ) { throw new IllegalStateException $F1783 ( ex ) ; } engineReset ( ) ; }
public boolean startsWith ( String string ) { $F397 ( string , _BOOL ) $F1749 ( strlen , string ) if ( _length < strlen ) return _BOOL ; $F1469 buffer = _buffer ; int offset = _offset ; while ( -- strlen >= NUM00 ) { if ( buffer [ offset + strlen ] != string . charAt ( strlen ) ) return _BOOL ; } return _BOOL ; }
private void writeRawBytesInternal ( final ByteBuffer value ) throws IOException { $F45850 ( length , value ) if ( limit - position >= length ) { value . get ( buffer , position , length ) ; position += length ; totalBytesWritten += length ; } else { final int bytesWritten = limit - position ; value . get ( buffer , position , bytesWritten ) ; length -= bytesWritten ; position = limit ; totalBytesWritten += bytesWritten ; refreshBuffer ( ) ; while ( length > limit ) { $F37570 ( value , buffer , limit ) $F11584 ( output , buffer , limit ) length -= limit ; totalBytesWritten += limit ; } $F37570 ( value , buffer , length ) position = length ; totalBytesWritten += length ; } }
public boolean isSrcClass ( SootClass clz ) { return $F40656 ( srcClasses , clz ) ; }
private void processLDIF ( Connection conn , String path ) throws UpgradeException { ChangeRecordReader reader = null ; try { $F19232 ( DEBUG , path ) $F2539 $F143413 ( tags ) ; $F545 ( tags , baseDN ) $F16824 ( tags ) String content = AMSetupServlet . readFile ( path ) ; String tagSwapped = StringUtils . tagSwap ( content , tags ) ; reader = new LDIFChangeRecordReader ( new ByteArrayInputStream ( $F22470 ( tagSwapped , Charset ) ) ) ; ChangeRecordWriter writer = new ConnectionChangeRecordWriter ( conn ) ; while $F2921 ( reader ) { writer . writeChangeRecord ( reader . readChangeRecord ( ) ) ; } } catch ( IOException ioe ) { $F30202 ( DEBUG , path , ioe ) throw new UpgradeException ( ioe ) ; } finally { IOUtils . closeIfNotNull ( reader ) ; } }
private void printProgress $F46828 ( row , rowFrom , rowTill ) { long rowsProcessed = row + chunkSize - rowFrom ; if ( rowsProcessed > ( rowTill - rowFrom ) ) rowsProcessed = ( rowTill - rowFrom ) ; print ( String . format ( NUM00 , ( int ) ( ( $F365047 ( rowsProcessed ) / $F250385 ( rowTill , rowFrom ) ) * NUM00 ) ) ) ; }
void postRemoteReleaseLock ( Object objectName ) throws InterruptedException { if $F39897 ( acquireDestroyReadLock ) $F932 try { checkDestroyed ( ) ; drainPermittedRequests ( ) ; grantLock ( objectName ) ; } catch ( LockServiceDestroyedException e ) $F845 catch ( LockGrantorDestroyedException e ) $F845 $F49978 ( releaseDestroyReadLock ) }
public final ArrayList < PositionRecord > loadPositions ( final int session , final Double minLat , final Double maxLat , final Double minLon , final Double maxLon ) { final ArrayList < PositionRecord > $F204 ( positions ) ; String selection = Schema . COL_SESSION_ID + NUM00 ; Cursor cursor = null ; $F36422 ( selectionArgs ) if ( minLat != null & maxLat != null && minLon != null && maxLon != null ) { $F9404 ( selectionArgs ) $F269561 ( selectionArgs , String , session ) $F269561 ( selectionArgs , String , minLat ) $F269561 ( selectionArgs , String , maxLat ) $F269561 ( selectionArgs , String , minLon ) $F269561 ( selectionArgs , String , maxLon ) selection += NUM00 + Schema . COL_LATITUDE + NUM00 + Schema . COL_LATITUDE + NUM00 + Schema . COL_LONGITUDE + NUM00 + Schema . COL_LONGITUDE + NUM00 ; cursor = contentResolver . query ( ContentProvider . CONTENT_URI_POSITION , null , selection , $F16104 ( selectionArgs ) , Schema . COL_TIMESTAMP ) ; } else { $F27746 ( Log , TAG ) cursor = contentResolver . query ( ContentProvider . CONTENT_URI_POSITION , null , null , null , Schema . COL_TIMESTAMP ) ; } while $F12260 ( cursor ) $F3762 ( positions , positionFromCursor , cursor ) $F59 ( cursor ) return positions ; }
public static CheckBox createToggle ( String text , Image icon ) { CheckBox cb = new CheckBox ( text , icon ) ; cb . setToggle ( _BOOL ) ; return cb ; }
public long addCompletedBatch ( RequestBatch requestBatch ) { long completedBatchId = insertBatchAsCompleted ( requestBatch ) ; for ( Request request : requestBatch . getRequests ( ) ) { request . setBatchId ( completedBatchId ) ; File file = new File ( request . getDestinationPath ( ) ) ; long length = file . exists ( ) ? file . length ( ) : NUM00 ; insertRequestAsCompletedDownload ( request . getDestinationPath ( ) , length , request ) ; } return completedBatchId ; }
@ TargetApi ( Build . VERSION_CODES . JELLY_BEAN ) private void dequeueOutputBuffer ( MediaCodec codec , $F30903 outputBuffers , int index , MediaCodec . BufferInfo info ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . JELLY_BEAN ) { ByteBuffer buffer = outputBuffers [ index ] ; Log . i ( NUM00 + info . size + NUM00 + buffer . remaining ( ) ) ; if ( info . size <= buffer . remaining ( ) ) { final $F96 bufferCopied = new byte [ info . size ] ; buffer . get ( bufferCopied ) ; codec . releaseOutputBuffer ( index , _BOOL ) ; addEncoded ( bufferCopied ) ; if ( Log . DEBUG ) { AudioUtils . showSomeBytes ( NUM00 , bufferCopied ) ; } } else { $F294495 ( Log ) codec . releaseOutputBuffer ( index , _BOOL ) ; } } }
public static DefaultJobDefinition retryableFixedDelayJobDefinition ( final String jobType , final String jobName , final String description , final Duration fixedDelay , final int restarts , final int retries , final Optional < Duration > retryDelay , final Optional < Duration > maxAge ) { return new DefaultJobDefinition ( jobType , jobName , description , maxAge , Optional . of ( fixedDelay ) , Optional . empty ( ) , restarts , retries , retryDelay ) ; }
$F37100 ( fieldId , MESSAGE )
public static void putLong ( long addr , long val ) { if ( UNALIGNED ) UNSAFE . putLong ( addr , val ) ; else putLongByByte ( addr , val , BIG_ENDIAN ) ; }
public static File createMinimalSplit $F25022 ( inputFolder , numFolds , numAvailableJCas , isSequence ) throws Exception { $F109797 ( outputFolder , inputFolder ) int splitNum = ( int ) Math . ceil ( numFolds / ( double ) numAvailableJCas ) ; CollectionReaderDescription createReader = CollectionReaderFactory . createReaderDescription ( BinaryCasReader . class , BinaryCasReader . PARAM_SOURCE_LOCATION , inputFolder , BinaryCasReader . PARAM_PATTERNS , NUM00 ) ; AnalysisEngineDescription multiplier = AnalysisEngineFactory . createEngineDescription ( FoldClassificationUnitCasMultiplier . class , FoldClassificationUnitCasMultiplier . PARAM_REQUESTED_SPLITS , splitNum , FoldClassificationUnitCasMultiplier . PARAM_USE_SEQUENCES , isSequence ) ; AnalysisEngineDescription xmiWriter = AnalysisEngineFactory . createEngineDescription ( BinaryCasWriter . class , BinaryCasWriter . PARAM_TARGET_LOCATION , outputFolder . getAbsolutePath ( ) , BinaryCasWriter . PARAM_FORMAT , NUM00 ) ; AnalysisEngineDescription both = AnalysisEngineFactory . createEngineDescription ( multiplier , xmiWriter ) ; SimplePipeline . runPipeline ( createReader , both ) ; isNumberOfCasCreatedLargerEqualNumFolds ( outputFolder , numFolds ) ; return outputFolder ; }
public org . w3c . dom . Element signXML ( org . w3c . dom . Document doc , $F9738 ( certAlias ) ) throws XMLSignatureException $F25228 ( signXML , doc , certAlias )
public boolean displayPopup $F72 { $F397 ( m_popupClass , _BOOL ) try { Window win = SwingUtilities . getWindowAncestor ( this ) ; CFieldPopup popup = null ; if ( win instanceof Dialog ) { $F43121 constructor = m_popupClass . getConstructor ( new $F6969 [ ] { Dialog . class , $F10062 , $F61970 } ) ; popup = ( CFieldPopup ) constructor . newInstance ( new Object [ ] { ( Dialog ) win , m_title , new Boolean ( _BOOL ) } ) ; } else if ( win instanceof Frame ) { $F43121 constructor = m_popupClass . getConstructor ( new Class [ ] { Frame . class , $F10062 , $F61970 } ) ; popup = ( CFieldPopup ) constructor . newInstance ( new Object [ ] { ( Frame ) win , m_title , new Boolean ( _BOOL ) } ) ; } $F397 ( popup , _BOOL ) popup . setValue ( m_editor . getItem ( ) ) ; popup . setFormat ( m_editor . getFormat ( ) ) ; $F114746 ( popup ) m_editor . setItem ( popup . getValue ( ) ) ; popup = null ; } $F114671 ( notifyUser , e ) return _BOOL ; }
public AbstractSdfWriter ( final PrereadType prereadType , final boolean hasQuality , boolean hasNames , boolean compressed , final SequenceType type ) { mPrereadType = prereadType ; mPrereadArm = PrereadArm . UNKNOWN ; mSdfId = new SdfId $F72 ; mNameHandler = new SequenceNameHandler $F72 ; mSequenceType = type ; mFirstValid = mSequenceType . firstValid ( ) ; mResidueCounts = new long [ mSequenceType . numberKnownCodes ( ) + mSequenceType . firstValid ( ) ] ; $F11125 ( mNHistogram , MAX_HISTOGRAM ) $F11125 ( mPosHistogram , MAX_HISTOGRAM ) $F10254 ( mQSAveragePerPos , MAX_HISTOGRAM ) $F11125 ( mPositionCounts , MAX_HISTOGRAM ) mGlobalQSAverage = NUM00 ; mDataHashFunction = new PrereadHashFunction $F72 ; mQualityHashFunction = new PrereadHashFunction $F72 ; mNameHashFunction = new PrereadHashFunction $F72 ; mNameSuffixHashFunction = new PrereadHashFunction $F72 ; mHasQuality = hasQuality ; mHasNames = hasNames ; mCompressed = compressed ; mSeqDataChecksum = new CRC32 $F72 ; mQualDataChecksum = new CRC32 $F72 ; }
FiringPlan guessBestFiringPlanUnderHeat ( Entity shooter , $F5466 EntityState shooterState , Targetable target , $F5466 EntityState targetState , int maxHeat , IGame game ) { $F17370 ( maxHeat ) FiringPlan alphaStrike = guessFullFiringPlan ( shooter , shooterState , target , targetState , game ) ; if ( alphaStrike . getHeat ( ) <= maxHeat && ! ( shooter instanceof Infantry ) && ! ( shooter instanceof BattleArmor ) ) { return alphaStrike ; } FiringPlan heatPlans [ ] = calcFiringPlansUnderHeat ( shooter , alphaStrike ) ; Arrays . sort ( heatPlans ) ; if $F3305 ( heatPlans ) $F3262 ( heatPlans ) else { return new FiringPlan ( target ) ; } }
public static VolumeGroupRestRep map ( VolumeGroup from ) { $F1338 ( from ) VolumeGroupRestRep rep = new VolumeGroupRestRep $F72 ; mapDataObjectFields ( from , rep ) ; $F100328 ( rep , from ) rep . setRoles ( from . getRoles ( ) ) ; rep . setParent ( toRelatedResource ( ResourceTypeEnum . VOLUME_GROUP , from . getParent ( ) ) ) ; rep . setMigrationGroupBy ( from . getMigrationGroupBy ( ) ) ; rep . setMigrationType ( from . getMigrationType ( ) ) ; return rep ; }
public int postFiles ( $F806 args , int startIndexInArgs , OutputStream out , String type ) { reset ( ) ; int filesPosted = NUM00 ; for ( $F9958 ( j , startIndexInArgs , args ) ) { File $F170883 ( srcFile , args , j ) ; if ( srcFile . isDirectory ( ) && srcFile . canRead ( ) ) { filesPosted += postDirectory ( srcFile , out , type ) ; } else if ( srcFile . isFile ( ) && srcFile . canRead ( ) ) { filesPosted += postFiles ( new File [ ] { srcFile } , out , type ) ; } else { $F4924 ( parent , srcFile ) if ( parent == null ) $F263964 ( parent ) $F20605 ( fileGlob , srcFile ) GlobFileFilter ff = new GlobFileFilter ( fileGlob , _BOOL ) ; $F5237 files = parent . listFiles ( ff ) ; if $F12414 ( files ) { warn ( NUM00 + srcFile ) ; $F598 } filesPosted += postFiles ( parent . listFiles ( ff ) , out , type ) ; } } return filesPosted ; }
$F1 public final String toString $F72 { if ( stringRep == null ) { $F83 ( buffer ) buffer . append ( this . name ) ; $F84 ( buffer ) buffer . append ( Integer . toString ( this . defaultPort ) ) ; $F6947 ( stringRep , buffer ) } return stringRep ; }
public void clearSearchable $F72 $F9096 ( searchables )
public void addActionListener ( ActionListener newListener ) $F207 ( m_listeners , newListener )
$F1309 public ShapelessRecipe addIngredient ( int count , Material ingredient , int rawdata ) { Validate . isTrue ( ingredients . size ( ) + count <= NUM00 , NUM00 ) ; if ( rawdata == - NUM00 ) $F7984 ( rawdata , Short ) while ( count -- > NUM00 ) { ingredients . add ( new ItemStack ( ingredient , NUM00 , ( short ) rawdata ) ) ; } return this ; }
$F1017 ( request , container , mRequest , mContainers )
public String order $F72 { return $F20 ( mOrderBy ) ? mOrderBy . toString ( ) : null ; }
static AxesWalker findClone ( AxesWalker key , Vector cloneList ) { if ( null != cloneList ) { $F2199 ( n , cloneList ) for ( $F6225 ( i , n ) ) { if ( key == cloneList . elementAt ( i ) ) return ( AxesWalker ) cloneList . elementAt ( i + NUM00 ) ; } } $F1274 }
public static $F96 encodingToBytes $F2236 ( str , encoding ) { $F1338 ( str ) try { return str . getBytes ( encoding ) ; } catch ( final UnsupportedEncodingException e ) { throw new Error ( encoding + NUM00 + e ) ; } }
public static boolean looksLikeABGRepeat ( String val ) { return BACKGROUND_REPEATS . indexOf ( val ) >= NUM00 ; }
public void before $F72 throws Throwable { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . M ) { ProcessBuilder processBuilder = new ProcessBuilder $F72 ; processBuilder . command ( NUM00 , NUM00 ) ; processBuilder . redirectErrorStream ( ) ; $F111135 ( process , processBuilder ) $F84402 ( process ) if ( process . exitValue ( ) != NUM00 ) { Log . e ( LOG_TAG , NUM00 + process . exitValue ( ) ) ; } } }
public void addMeta ( char meta , String replacement ) { metaCharacterSet . set ( meta ) ; replacementMap . put ( new String ( new char [ ] { meta } ) , replacement ) ; }
private Matches lookupDo ( Template tmpl , int maxMatches ) { $F30465 ( maxMatches ) int totalMatches = NUM00 ; ArrayList matches = null ; ItemIter iter = matchingItems ( tmpl ) ; if ( maxMatches > NUM00 || iter . dupsPossible ) $F13241 ( matches ) if ( iter . dupsPossible ) { while $F2921 ( iter ) { Item item = iter . next ( ) ; $F24127 ( matches , item ) } $F8935 ( totalMatches , matches ) if ( maxMatches > NUM00 ) { for ( $F2198 ( i , matches ) ; -- i >= maxMatches ; ) matches . remove ( i ) ; for ( $F335206 ( i , matches ) ) { matches . set ( i , copyItem ( ( Item ) matches . get ( i ) ) ) ; } } else { matches = null ; } } else { while $F2921 ( iter ) { Item item = iter . next ( ) ; totalMatches ++ ; if ( -- maxMatches >= NUM00 ) $F3761 ( matches , copyItem , item ) } } return new Matches ( matches , totalMatches ) ; }
public static List < History > findHistoryByJob ( EntityManager em , JPAEntity job , BigInteger limit ) { requireArgument ( em != null , NUM00 ) ; requireArgument ( job != null , NUM00 ) ; TypedQuery < History > query = em . createNamedQuery ( NUM00 , History . class ) ; if ( limit != null ) { query . setMaxResults ( limit . intValue ( ) ) ; } try { $F155222 ( query , job ) $F155223 ( query ) } catch ( NoResultException ex ) { return new ArrayList < History > $F989 ; } }
protected Character isWFXMLChar ( String chardata ) { Character refInvalidChar ; if ( chardata == null || $F1277 ( chardata ) ) $F1337 $F7782 ( dataarray , chardata ) int datalength = dataarray . length ; if ( fIsXMLVersion11 ) { int i = NUM00 ; while ( i < datalength ) { if ( XML11Char . isXML11Invalid ( dataarray [ i ++ ] ) ) { char ch = dataarray [ i - NUM00 ] ; $F121844 ( XMLChar , ch , i , datalength , ch2 , dataarray ) refInvalidChar = new Character ( ch ) ; return refInvalidChar ; } } } else { int i = NUM00 ; while ( i < datalength ) { if ( XMLChar . isInvalid ( dataarray [ i ++ ] ) ) { char ch = dataarray [ i - NUM00 ] ; $F121844 ( XMLChar , ch , i , datalength , ch2 , dataarray ) refInvalidChar = new Character ( ch ) ; return refInvalidChar ; } } } $F1274 }
public static String quote ( char ch ) { switch ( ch ) { $F12596 $F12596 $F12596 $F12596 $F12596 $F12596 $F12596 $F12596 $F1267 return ( isPrintableAscii ( ch ) ) ? String . valueOf ( ch ) : String . format ( NUM00 , ( int ) ch ) ; } }
private void updatePendingNodes ( final int newLandmarkIndex , final RouterPriorityQueue $F6869 pendingNodes ) { final $F31488 $F204 ( newEstRemTravCosts ) ; final $F27878 $F204 ( nodesToBeUpdated ) ; final InternalLandmarkData landmarkData = new InternalLandmarkData $F72 ; for ( Node node : pendingNodes ) { final AStarNodeData role = getData ( node ) ; final PreProcessLandmarks . LandmarksData ppRole = preprocess . getNodeData ( node ) ; landmarkData . setDelegate ( ppRole ) ; final double newEstRemTravCost = estimateRemainingTravelCost ( landmarkData , newLandmarkIndex ) ; if ( newEstRemTravCost > role . getExpectedRemainingCost ( ) ) $F30090 ( nodesToBeUpdated , node , newEstRemTravCosts , newEstRemTravCost ) } for ( Node node : nodesToBeUpdated ) $F106 ( pendingNodes , node ) for ( $F2277 ( i , nodesToBeUpdated ) ) { final Node node = nodesToBeUpdated . get ( i ) ; final AStarNodeData data = getData ( node ) ; data . setExpectedRemainingCost ( newEstRemTravCosts . get ( i ) ) ; $F142564 ( pendingNodes , node , getPriority , data ) } }
$F1 public String toString $F72 { $F280 ( buff ) if ( m_correlations == null ) $F86 ( buff ) else { $F84 ( buff ) if $F316063 ( m_detailedOutput , m_detailedOutputBuff ) $F20352 ( buff , m_detailedOutputBuff ) } $F92 ( buff ) }
private void drawOverflowIndicator ( final Graphics g , int maxX ) { int width = NUM00 ; int height = NUM00 ; int xOffset = NUM00 ; int stepSize = width / NUM00 ; int dotSize = NUM00 ; int x = maxX - width - xOffset ; int y = button . getSize ( ) . height - height ; g . setColor ( LIGHTER_GRAY ) ; g . fillRect ( x , y , width , width ) ; g . setColor ( Color . GRAY ) ; g . drawRoundRect ( x , y , width , width , NUM00 , NUM00 ) ; $F339 ( g , Color ) g . fillOval ( x + stepSize , y + NUM00 , dotSize , dotSize ) ; g . fillOval ( x + stepSize * NUM00 , y + NUM00 , dotSize , dotSize ) ; g . fillOval ( x + stepSize * NUM00 , y + NUM00 , dotSize , dotSize ) ; $F355 ( g ) }
public void writeLine ( long time , $F5415 column ) { $F4074 ( str , Long , time ) for ( $F9808 ( i , column ) ) { str += NUM00 + column [ i ] ; } writer . println ( str ) ; }
public static boolean isPEM ( InputStream is ) { try { String startPEM = NUM00 ; int headerLength = NUM00 ; $F2175 ( preamble , headerLength ) if ( is . read ( preamble , NUM00 , headerLength ) > NUM00 ) { $F605 ( startArray , preamble ) $F112225 ( startArray , startPEM ) } return _BOOL ; } catch ( Exception e ) { $F148698 } }
public CloseListener ( Object resource ) { _resource = resource ; }
$F1 public IndexRequest routing ( String routing ) { if ( $F145545 ( routing ) ) { this . routing = null ; } else $F6988 ( this , routing ) return this ; }
public $F96 receive $F72 throws NetworkException { try { packet . setLength ( DatagramConnection . DEFAULT_DATAGRAM_SIZE ) ; connection . receive ( packet ) ; $F19322 ( packetLength , packet ) $F2175 ( data , packetLength ) System . arraycopy ( packet . getData ( ) , NUM00 , data , NUM00 , packetLength ) ; return data ; } catch ( IOException e ) { throw new NetworkException ( NUM00 , e ) ; } }
$F1 protected void forceDeleteAttributeAt ( int position ) { $F284341 ( newValues , m_AttValues ) $F135 ( System , m_AttValues , newValues , position ) if $F18953 ( position , m_AttValues ) { System . arraycopy ( m_AttValues , position + NUM00 , newValues , position , m_AttValues . length - ( position + NUM00 ) ) ; } m_AttValues = newValues ; }
public synchronized AlphabeticIndex addLabels ( Locale locale ) { $F10665 ( addLabels , peer , locale ) return this ; }
protected $F96 engineWrap ( Key key ) throws IllegalBlockSizeException , InvalidKeyException $F59421
$F1309 public JavaPluginLoader ( Server instance ) { $F18062 ( Validate , instance ) server = instance ; }
public void addSeparator $F72 { if $F935 ( log , PlatformLogger ) $F102497 ( log ) }
public static boolean testSaveLocationExists $F72 { $F139156 ( sDCardStatus , Environment ) boolean status ; if $F139157 ( sDCardStatus , Environment ) { status = _BOOL ; } else { status = _BOOL ; } return status ; }
private static $F6969 loadClass ( $F52326 urls , String name ) throws ClassNotFoundException { ClassLoader parent = getRMIContextClassLoader ( ) ; if $F134749 ( loaderLog , Log ) { loaderLog . log ( Log . VERBOSE , NUM00 + parent + NUM00 ) ; } $F8108 ( sm , System ) if ( sm == null ) { try { $F6969 c = Class . forName ( name , _BOOL , parent ) ; if $F134749 ( loaderLog , Log ) { loaderLog . log ( Log . VERBOSE , NUM00 + name + NUM00 + NUM00 + NUM00 + NUM00 + c . getClassLoader ( ) ) ; } return c ; } catch ( ClassNotFoundException e ) { if ( loaderLog . isLoggable ( Log . BRIEF ) ) { loaderLog . log ( Log . BRIEF , NUM00 + name + NUM00 + NUM00 + NUM00 , e ) ; } throw new ClassNotFoundException ( e . getMessage ( ) + NUM00 , e . getException ( ) ) ; } } Loader loader = lookupLoader ( urls , parent ) ; try { if ( loader != null ) { loader . checkPermissions ( ) ; } } catch ( SecurityException e ) { try { $F6969 c = loadClassForName ( name , _BOOL , parent ) ; if $F134749 ( loaderLog , Log ) { loaderLog . log ( Log . VERBOSE , NUM00 + name + NUM00 + NUM00 + NUM00 + NUM00 + c . getClassLoader ( ) ) ; } return c ; } catch ( ClassNotFoundException unimportant ) { if ( loaderLog . isLoggable ( Log . BRIEF ) ) { loaderLog . log ( Log . BRIEF , NUM00 + name + NUM00 + NUM00 + NUM00 , e ) ; } throw new ClassNotFoundException ( NUM00 , e ) ; } } try { $F6969 c = loadClassForName ( name , _BOOL , loader ) ; if $F134749 ( loaderLog , Log ) { loaderLog . log ( Log . VERBOSE , NUM00 + name + NUM00 + NUM00 + NUM00 + c . getClassLoader ( ) ) ; } return c ; } catch ( ClassNotFoundException e ) { if ( loaderLog . isLoggable ( Log . BRIEF ) ) { loaderLog . log ( Log . BRIEF , NUM00 + name + NUM00 , e ) ; } throw e ; } }
public static final List < INaviRawModule > loadRawModules ( final AbstractSQLProvider provider ) throws CouldntLoadDataException { $F1832 ( Preconditions , provider ) final CConnection connection = provider . getConnection ( ) ; final List < INaviRawModule > modules = new ArrayList < INaviRawModule > $F72 ; if ( ! PostgreSQLHelpers . hasTable ( connection , CTableNames . RAW_MODULES_TABLE ) ) { return modules ; } final String query = NUM00 + CTableNames . RAW_MODULES_TABLE + NUM00 ; try ( ResultSet resultSet = connection . executeQuery ( query , _BOOL ) ) { while $F1682 ( resultSet ) { $F10411 ( rawModuleId , resultSet ) $F435445 ( name , PostgreSQLHelpers , resultSet ) final boolean isComplete = PostgreSQLDatabaseFunctions . checkRawModulesTables ( provider . getConnection ( ) , PostgreSQLHelpers . getDatabaseName ( provider . getConnection ( ) ) , rawModuleId ) ; final int functionCount = isComplete ? PostgreSQLDatabaseFunctions . getRawModuleFunctionCount ( connection , rawModuleId ) : NUM00 ; final CRawModule module = new CRawModule ( rawModuleId , name , functionCount , isComplete , provider ) ; modules . add ( module ) ; } } catch ( final SQLException e ) { throw new CouldntLoadDataException ( e ) ; } return modules ; }
void write ( ImageOutputStream ios ) throws IOException { length = NUM00 + data . length ; writeTag ( ios ) ; ios . write ( data ) ; }
public static int probRound ( double value , Random rand ) { if ( value >= NUM00 ) { double lower = Math . floor ( value ) ; double prob = value - lower ; if ( rand . nextDouble ( ) < prob ) { return ( int ) lower + NUM00 ; } else $F23220 ( lower ) } else { double lower = Math . floor ( Math . abs ( value ) ) ; double prob = Math . abs ( value ) - lower ; if ( rand . nextDouble ( ) < prob ) { return - ( ( int ) lower + NUM00 ) ; } else { return - ( int ) lower ; } } }
Map < String , TypeName > convertPropertiesToTypes ( Map < String , ExecutableElement > properties ) { Map < String , TypeName > types = new LinkedHashMap < String , TypeName > $F72 ; for ( Map . Entry < String , ExecutableElement > entry : properties . entrySet ( ) ) { ExecutableElement el = entry . getValue ( ) ; types . put ( entry . getKey ( ) , TypeName . get ( el . getReturnType ( ) ) ) ; } return types ; }
private static List < RegisterDescription > parseRegisterInformation ( final Node node ) throws MessageParserException { final List < RegisterDescription > $F204 ( registers ) ; final NodeList nodes = node . getChildNodes ( ) ; for ( $F184528 ( i , nodes ) ) { final Node child = nodes . item ( i ) ; $F20139 ( registerName , getAttribute , child ) $F20139 ( registerSize , getAttribute , child ) $F20139 ( registerEditable , getAttribute , child ) registers . add ( new RegisterDescription ( registerName , Integer . valueOf ( registerSize ) , Boolean . valueOf ( registerEditable ) ) ) ; } return registers ; }
public NamedThreadFactory ( String namePrefix ) { $F31108 ( this , Objects , namePrefix ) group = getThreadGroup ( ) ; daemon = _BOOL ; }
public void test_metric_cpu_num_uint16 $F72 { final IGangliaMetadataMessage decl = new GangliaMetadataMessage ( NUM00 , NUM00 , _BOOL , GangliaMessageTypeEnum . UINT16 , NUM00 , NUM00 , GangliaSlopeEnum . zero , NUM00 , NUM00 , AbstractMetrics . getMap ( IGangliaAttributes . GROUP_CPU , NUM00 , NUM00 ) ) ; assertEncodeDecode ( null , decl ) ; final IGangliaMetricMessage expected = new GangliaMetricMessage ( GangliaMessageTypeEnum . UINT16 , NUM00 , NUM00 , _BOOL , NUM00 , Integer . valueOf ( NUM00 ) ) ; final $F96 actualData = assertEncodeDecode ( decl , expected ) ; final $F96 expectedData = new byte [ ] { NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ; if $F1209 ( Arrays , expectedData , actualData ) { fail ( $F11846 ( Arrays , expectedData ) + Arrays . toString ( actualData ) ) ; } }
String formatNumberList ( TransformerImpl transformer , $F2469 list , int contextNode ) throws TransformerException { String numStr ; FastStringBuffer formattedNumber = StringBufferPool . get ( ) ; try { int nNumbers = list . length , numberWidth = NUM00 ; char numberType = NUM00 ; String formatToken , lastSepString = null , formatTokenString = null ; String lastSep = NUM00 ; boolean isFirstToken = _BOOL ; String formatValue = ( null != m_format_avt ) ? m_format_avt . evaluate ( transformer . getXPathContext ( ) , contextNode , this ) : null ; if ( null == formatValue ) formatValue = NUM00 ; NumberFormatStringTokenizer formatTokenizer = new NumberFormatStringTokenizer ( formatValue ) ; for ( $F119 ( i , nNumbers ) ) { if $F14498 ( formatTokenizer ) { $F39710 ( formatToken , formatTokenizer ) if ( Character . isLetterOrDigit ( $F7792 ( formatToken ) ) ) { $F3935 ( numberWidth , formatToken ) $F223528 ( numberType , formatToken , numberWidth ) } else if ( formatTokenizer . isLetterOrDigitAhead ( ) ) { formatTokenString = formatToken ; while ( formatTokenizer . nextIsSep ( ) ) { $F39710 ( formatToken , formatTokenizer ) formatTokenString += formatToken ; } if ( ! isFirstToken ) lastSep = formatTokenString ; $F39710 ( formatToken , formatTokenizer ) $F3935 ( numberWidth , formatToken ) $F223528 ( numberType , formatToken , numberWidth ) } else { lastSepString = formatToken ; while $F14498 ( formatTokenizer ) { $F39710 ( formatToken , formatTokenizer ) lastSepString += formatToken ; } } } if ( null != formatTokenString && isFirstToken ) $F288 ( formattedNumber , formatTokenString ) else if ( null != lastSep && ! isFirstToken ) formattedNumber . append ( lastSep ) ; getFormattedNumber ( transformer , contextNode , numberType , numberWidth , list [ i ] , formattedNumber ) ; isFirstToken = _BOOL ; } while ( formatTokenizer . isLetterOrDigitAhead ( ) ) { $F89223 ( formatTokenizer ) } $F208830 ( lastSepString , formattedNumber ) while $F14498 ( formatTokenizer ) { $F39710 ( formatToken , formatTokenizer ) formattedNumber . append ( formatToken ) ; } $F6947 ( numStr , formattedNumber ) } finally { StringBufferPool . free ( formattedNumber ) ; } return numStr ; }
public int addColumn ( Object newCol , int length ) throws FitsException { if ( this . nFields > NUM00 && Array . getLength ( newCol ) != this . nRows ) { throw new FitsException $F580 ; } if ( this . nFields == NUM00 ) { this . nRows = Array . getLength ( newCol ) ; } $F131 newData = new Object [ this . nFields + NUM00 ] ; $F2027 newOffsets = new int [ this . nFields + NUM00 ] ; $F2027 newLengths = new int [ this . nFields + NUM00 ] ; $F18547 newTypes = new Class [ this . nFields + NUM00 ] ; $F806 newNulls = new String [ this . nFields + NUM00 ] ; System . arraycopy ( this . data , NUM00 , newData , NUM00 , this . nFields ) ; System . arraycopy ( this . offsets , NUM00 , newOffsets , NUM00 , this . nFields ) ; System . arraycopy ( this . lengths , NUM00 , newLengths , NUM00 , this . nFields ) ; System . arraycopy ( this . types , NUM00 , newTypes , NUM00 , this . nFields ) ; System . arraycopy ( this . nulls , NUM00 , newNulls , NUM00 , this . nFields ) ; this . data = newData ; this . offsets = newOffsets ; this . lengths = newLengths ; this . types = newTypes ; this . nulls = newNulls ; newData [ this . nFields ] = newCol ; this . offsets [ this . nFields ] = this . rowLen + NUM00 ; this . lengths [ this . nFields ] = length ; this . types [ this . nFields ] = ArrayFuncs . getBaseClass ( newCol ) ; this . rowLen += length + NUM00 ; if ( this . isNull != null ) { $F8748 newIsNull = new boolean [ this . nRows * ( this . nFields + NUM00 ) ] ; int add = NUM00 ; for ( int i = NUM00 ; i < this . isNull . length ; i += NUM00 ) { if ( i % this . nFields == NUM00 ) { add += NUM00 ; } if ( this . isNull [ i ] ) { newIsNull [ i + add ] = _BOOL ; } } this . isNull = newIsNull ; } this . nFields += NUM00 ; this . buffer = null ; return this . nFields ; }
Deque $F40167 schedule ( Block entry ) { Deque $F40167 code = dfs ( entry ) ; Deque $F40167 scheduled = new ArrayDeque $F40167 $F72 ; SetMap < Block , Edge > pred = preds ( code ) ; Map < Block , Block > idom = idoms ( code , pred ) ; EdgeMap $F40167 loops = findLoops ( code , idom , pred ) ; if $F5973 ( loops ) verboseStatus ( NUM00 + loops ) ; for ( Block b : code ) { $F24127 ( scheduled , b ) if $F1710 ( loops , b ) schedule_loop ( b , loops , scheduled ) ; } Deque $F40167 branch_analysis = new ArrayDeque $F40167 $F72 ; branch_analysis . addAll ( scheduled ) ; Set $F40167 already_seen = new HashSet $F40167 $F72 ; while $F3817 ( branch_analysis ) { Block b = branch_analysis . removeFirst ( ) ; Expr last = b . last ( ) ; Block next = branch_analysis . peekFirst ( ) ; if ( isBranch ( last ) && last . succ [ NUM00 ] . to != next && last . succ [ NUM00 ] . to == next ) invert ( last ) ; already_seen . add ( b ) ; b . is_backwards_branch_target = _BOOL ; for ( Edge s : b . succ ( ) ) { s . to . is_backwards_branch_target |= s . is_backwards_branch = already_seen . contains ( s . to ) ; } } if ( verbose_mode ) for ( Block b : code ) if ( b . is_backwards_branch_target ) verboseStatus ( NUM00 + b ) ; return scheduled ; }
public void addTransaction ( SIPServerTransaction serverTransaction ) throws IOException { if $F293507 ( logger , LogWriter ) logger . logDebug ( NUM00 + serverTransaction ) ; serverTransaction . map ( ) ; addTransactionHash ( serverTransaction ) ; }
private void delayRetry ( int multiplier ) { debug ( NUM00 ) ; try { Thread . sleep ( NUM00 * multiplier ) ; } catch ( InterruptedException e ) $F28986 ( warn , e ) }
public void testSplitAndJoinSemicolonNestedInPipeProperties $F72 { Properties outer = PropertyUtils . splitPropertiesOnPipe ( ONE_THEN_TWO_OUTER_A ) ; assertEquals ( ONE_SEMI_TWO , outer . getProperty ( NUM00 ) ) ; $F70108 ( assertEquals , outer ) try { assertEquals ( ONE_THEN_TWO_OUTER_A , PropertyUtils . joinOnPipe ( PropertyUtils . toMap ( outer ) ) ) ; $F665 } catch ( ComparisonFailure deviation1 ) $F845 try { assertEquals ( TWO_THEN_ONE_OUTER_A , PropertyUtils . joinOnPipe ( PropertyUtils . toMap ( outer ) ) ) ; $F665 } catch ( ComparisonFailure deviation2 ) $F845 try { assertEquals ( ONE_THEN_TWO_OUTER_B , PropertyUtils . joinOnPipe ( PropertyUtils . toMap ( outer ) ) ) ; $F665 } catch ( ComparisonFailure deviation3 ) $F845 try { assertEquals ( TWO_THEN_ONE_OUTER_B , PropertyUtils . joinOnPipe ( PropertyUtils . toMap ( outer ) ) ) ; $F665 } catch ( ComparisonFailure deviation4 ) $F845 assertEquals ( TWO_THEN_ONE_OUTER_A , PropertyUtils . joinOnPipe ( PropertyUtils . toMap ( outer ) ) ) ; }
public void testIntBooleanMap $F72 throws Exception { $F44214 ( mapper ) String JSON = NUM00 ; $F8435 result = mapper . readValue ( JSON , new TypeReference < HashMap < Integer , Boolean > > $F90279 ) ; assertNotNull ( result ) ; assertEquals ( HashMap . class , result . getClass ( ) ) ; $F70108 ( assertEquals , result ) assertEquals ( Boolean . TRUE , result . get ( Integer . valueOf ( NUM00 ) ) ) ; assertEquals ( Boolean . FALSE , result . get ( $F43818 ( Integer ) ) ) ; assertNull ( result . get ( NUM00 ) ) ; $F254829 ( assertNull , result ) }
$F1 public boolean isBusy $F72 { return _BOOL ; }
protected ByteArrayOutputStream parseBytes ( ByteArrayOutputStream bos ) throws IOException { int ch ; for ( ch = skipWhitespace ( ) ; ch >= NUM00 && ch != NUM00 ; ch = skipWhitespace ( ) ) { int b1 = ch ; int b2 = read ( ) ; int b3 = read ( ) ; int b4 = read ( ) ; if ( b4 != NUM00 ) { int chunk = ( ( base64Decode [ b1 ] < < NUM00 ) + ( base64Decode [ b2 ] < < NUM00 ) + ( base64Decode [ b3 ] < < NUM00 ) + ( base64Decode [ b4 ] ) ) ; $F34529 ( bos , chunk ) $F34529 ( bos , chunk ) bos . write ( chunk ) ; } else if ( b3 != NUM00 ) { int chunk = ( ( base64Decode [ b1 ] < < NUM00 ) + ( base64Decode [ b2 ] < < NUM00 ) + ( base64Decode [ b3 ] > > NUM00 ) ) ; $F34529 ( bos , chunk ) bos . write ( chunk ) ; } else { int chunk = ( ( base64Decode [ b1 ] < < NUM00 ) + ( base64Decode [ b2 ] > > NUM00 ) ) ; bos . write ( chunk ) ; } } if ( ch == NUM00 ) _peek = ch ; return bos ; }
public void reset $F72 { $F195699 ( mDownloadBandwidth ) mCurrentBandwidthConnectionQuality . set ( ConnectionQuality . UNKNOWN ) ; }
public void testMergeSecurityRoleIntoEmptyDocument $F72 throws Exception { String srcXml = NUM00 ; $F34646 ( srcWebXml , WebXmlIo , srcXml ) $F180114 ( mergeXml ) $F34646 ( mergeWebXml , WebXmlIo , mergeXml ) $F34648 ( merger , srcWebXml ) merger . merge ( mergeWebXml ) ; $F3803 securityRoleNames = WebXmlUtils . getSecurityRoleNames ( srcWebXml ) ; $F70108 ( assertEquals , securityRoleNames ) $F100793 ( assertEquals , securityRoleNames ) }
private DiffPart decodeFullRevision ( final int blockSize_L ) throws UnsupportedEncodingException , DecodingException { if ( blockSize_L < NUM00 ) { throw new DecodingException ( NUM00 + blockSize_L ) ; } $F83249 ( l , r , blockSize_L ) $F1538 ( output ) for ( $F119 ( i , l ) ) { output . write ( r . readByte ( ) ) ; } DiffPart part = new DiffPart ( DiffAction . FULL_REVISION_UNCOMPRESSED ) ; $F92634 ( part , output , WIKIPEDIA_ENCODING ) return part ; }
private synchronized static void removeChildCharacterData ( Node node , boolean deep ) { $F9040 ( list , node ) for ( int i = list . getLength ( ) ; i >= NUM00 ; i -- ) { $F61359 ( n , list , i ) $F45557 ( n ) if ( n instanceof CharacterData ) node . removeChild ( XMLCaster . toRawNode ( n ) ) ; else if ( deep ) removeChildCharacterData ( n , deep ) ; } }
void unlink $F75141 ( p , trail ) { p . item = null ; $F33910 ( trail , p ) if ( last == p ) last = trail ; $F75143 ( count , capacity , notFull ) }
private void loadCorpus $F1947 ( source , target , align ) throws IOException { $F973 ( logger ) TimeKeeper timer = TimingUtils . start ( ) ; int numSourcePositions = NUM00 ; int numTargetPositions = NUM00 ; numSentences = NUM00 ; ParallelCorpus corpus = new ParallelCorpus $F989 ; try ( LineNumberReader fReader = IOTools . getReaderFromFile ( source ) ) { LineNumberReader eReader = IOTools . getReaderFromFile ( target ) ; LineNumberReader aReader = IOTools . getReaderFromFile ( align ) ; for ( $F26610 ( fLine , fReader ) ) { $F27015 ( eLine , eReader ) $F27015 ( aLine , aReader ) AlignedSentence example = corpus . getSentence ( fLine , eLine , aLine ) ; if ( example != null ) { numSourcePositions += example . sourceLength ( ) ; numTargetPositions += example . targetLength ( ) ; ++ numSentences ; } } } final int initialVocabularySize = corpus . getVocabulary ( ) . size ( ) ; timer . mark ( NUM00 ) ; logger . info ( NUM00 , numSourcePositions , numTargetPositions , numSentences ) ; final int srcLength = numSourcePositions + numSentences ; if ( srcLength < NUM00 ) $F11388 $F3936 ( srcBitext , srcLength ) $F3936 ( f2e , srcLength ) final int tgtLength = numTargetPositions + numSentences ; if ( tgtLength < NUM00 ) $F11388 $F3936 ( tgtBitext , tgtLength ) $F3936 ( e2f , tgtLength ) try ( LineNumberReader fReader = IOTools . getReaderFromFile ( source ) ) { LineNumberReader eReader = IOTools . getReaderFromFile ( target ) ; LineNumberReader aReader = IOTools . getReaderFromFile ( align ) ; int srcOffset = NUM00 ; int tgtOffset = NUM00 ; for ( $F26610 ( fLine , fReader ) ) { $F27015 ( eLine , eReader ) $F27015 ( aLine , aReader ) AlignedSentence sentence = corpus . getSentence ( fLine , eLine , aLine ) ; if ( sentence == null ) { logger . info ( $F252806 ( fReader ) ) ; } else { System . arraycopy ( sentence . source , NUM00 , srcBitext , srcOffset , sentence . sourceLength ( ) ) ; System . arraycopy ( sentence . f2e , NUM00 , f2e , srcOffset , sentence . f2e . length ) ; System . arraycopy ( sentence . target , NUM00 , tgtBitext , tgtOffset , sentence . targetLength ( ) ) ; System . arraycopy ( sentence . e2f , NUM00 , e2f , tgtOffset , sentence . e2f . length ) ; srcOffset += sentence . sourceLength ( ) ; tgtOffset += sentence . targetLength ( ) ; srcBitext [ srcOffset ] = toSentenceOffset ( tgtOffset ) ; tgtBitext [ tgtOffset ] = toSentenceOffset ( srcOffset ) ; ++ srcOffset ; ++ tgtOffset ; } } } this . vocabulary = corpus . getVocabulary ( ) ; assert initialVocabularySize == vocabulary . size ( ) ; timer . mark ( NUM00 ) ; $F10635 ( logger , timer ) }
public static float mixFriction ( float friction1 , float friction2 ) { return MathUtils . sqrt ( friction1 * friction2 ) ; }
public String serialize ( Object obj , String contentType ) throws ApiException { if $F3106 ( contentType ) { return json . serialize ( obj ) ; } else { throw new ApiException ( NUM00 , NUM00 + contentType ) ; } }
private boolean compileSWsequenceZR ( int baseRegister , $F2027 offsets , $F2027 registers ) { for ( $F1139 ( i , registers ) ) { if ( registers [ i ] != _zr ) { return _BOOL ; } } for ( $F1139 ( i , offsets ) ) { if ( offsets [ i ] != offsets [ i - NUM00 ] + NUM00 ) { return _BOOL ; } } int offset = offsets [ NUM00 ] ; int length = offsets . length ; do { int copyLength = Math . min ( length , FastMemory . zero . length ) ; mv . visitFieldInsn ( Opcodes . GETSTATIC , Type . getInternalName ( FastMemory . class ) , NUM00 , NUM00 ) ; loadImm ( NUM00 ) ; loadMemoryInt ( ) ; prepareMemIndex ( baseRegister , offset , _BOOL , NUM00 ) ; loadImm ( copyLength ) ; mv . visitMethodInsn ( Opcodes . INVOKESTATIC , Type . getInternalName ( System . class ) , NUM00 , arraycopyDescriptor ) ; length -= copyLength ; offset += copyLength ; } while ( length > NUM00 ) ; return _BOOL ; }
private boolean isNativeVolumeExpansionSupported ( Volume vplexVolume , Long newSize ) { boolean useNativeVolumeExpansion = _BOOL ; StringSet assocVolumeIds = vplexVolume . getAssociatedVolumes ( ) ; if ( null == assocVolumeIds ) { s_logger . warn ( NUM00 , vplexVolume . forDisplay ( ) ) ; useNativeVolumeExpansion = _BOOL ; } else { for ( String assocVolumeId : assocVolumeIds ) { Volume assocVolume = _permissionsHelper . getObjectById ( URI . create ( assocVolumeId ) , $F8540 ) ; try { super . verifyVolumeExpansionRequest ( assocVolume , newSize ) ; } catch ( Exception e ) $F3468 ( useNativeVolumeExpansion , _BOOL ) } } return useNativeVolumeExpansion ; }
public void updateGUI ( RosterEntry r ) { roadName . setText ( r . getRoadName ( ) ) ; roadNumber . setText ( r . getRoadNumber ( ) ) ; mfg . setText ( r . getMfg ( ) ) ; owner . setText ( r . getOwner ( ) ) ; model . setText ( r . getModel ( ) ) ; comment . setText ( r . getComment ( ) ) ; decoderModel . setText ( r . getDecoderModel ( ) ) ; decoderFamily . setText ( r . getDecoderFamily ( ) ) ; decoderComment . setText ( r . getDecoderComment ( ) ) ; dateUpdated . setText ( r . getDateUpdated ( ) ) ; maxSpeedSpinner . setValue ( Integer . valueOf ( r . getMaxSpeedPCT ( ) ) ) ; }
public static Double oizp ( Number value ) { $F1338 ( value ) return ( value . doubleValue ( ) >= NUM00 ) ? NUM00 : NUM00 ; }
public TerminalSize with ( TerminalSize size ) { $F46660 ( equals , size , this ) return size ; }
private boolean isGzipAllowed ( final HttpServletRequest request ) { return ! DispatcherStreamLocator . isIncludedRequest ( request ) && WroUtil . isGzipSupported ( request ) ; }
public ReplayProcessor ( int bufferSize , boolean unbounded ) { if ( unbounded ) { this . buffer = new UnboundedBuffer $F200 ( bufferSize ) ; } else { this . buffer = new BoundedBuffer $F200 ( bufferSize ) ; } SUBSCRIBERS . lazySet ( this , EMPTY ) ; }
protected void onShowConversations ( $F4170 List $F37574 conversations ) { if ( DEBUG ) { Log . d ( $F46477 ( TAG , conversations ) ) ; } mView . showConversations ( $F7044 ( conversations ) ) ; }
protected int read $F72 throws IOException { if ( offset == buffer . length ) $F11734 if ( in == null ) { return buffer [ offset ++ ] & NUM00 ; } else { $F7468 ( octet , in ) if ( octet == - NUM00 ) $F11734 $F11740 ( buffer , offset , octet ) return octet ; } }
public void enqueueJob ( final Runnable job ) { synchronized ( mSleepSync ) { if ( hasJob ( ) ) $F4639 setJob ( job ) ; $F165 ( mSleepSync ) } }
public void testSetNull_int_int $F72 throws SQLException { PreparedStatement ps = null ; try { String query = NUM00 ; ps = conn . prepareStatement ( query ) ; Statement st = null ; try { ps . setNull ( NUM00 , Types . INTEGER ) ; $F1699 ( ps ) } $F137812 ( ps ) query = NUM00 ; ps = conn . prepareStatement ( query ) ; try { ps . setNull ( NUM00 , Types . BIGINT ) ; $F1699 ( ps ) } $F137812 ( ps ) query = NUM00 ; ps = conn . prepareStatement ( query ) ; try { ps . setNull ( NUM00 , Types . DECIMAL ) ; $F1699 ( ps ) } $F137812 ( ps ) query = NUM00 ; ps = conn . prepareStatement ( query ) ; try { ps . setNull ( NUM00 , Types . DATE ) ; $F1699 ( ps ) } $F137812 ( ps ) query = NUM00 ; ps = conn . prepareStatement ( query ) ; try { ps . setNull ( NUM00 , Types . BLOB ) ; $F1699 ( ps ) } $F137812 ( ps ) query = NUM00 ; ps = conn . prepareStatement ( query ) ; ps . setNull ( NUM00 , Types . CHAR ) ; $F1699 ( ps ) } $F137812 ( ps ) }
public void testTestBitPositive2 $F72 { $F123148 int aSign = NUM00 ; int number = NUM00 ; $F3023 ( aNumber , aSign , aBytes ) assertTrue ( aNumber . testBit ( number ) ) ; }
public void startElement $F42838 ( uri , localName , qName , attributes ) throws $F2253 { if ( qName . equals ( PrintData . XML_TAG ) ) { String name = attributes . getValue ( PrintData . XML_ATTRIBUTE_NAME ) ; if ( m_pd == null ) { m_pd = new PrintData ( m_ctx , name ) ; push ( m_pd ) ; } else { PrintData temp = new PrintData ( m_ctx , name ) ; m_curPD . addNode ( temp ) ; push ( temp ) ; } } else if ( qName . equals ( PrintData . XML_ROW_TAG ) ) { m_curPD . addRow ( _BOOL , NUM00 ) ; } else if ( qName . equals ( PrintDataElement . XML_TAG ) ) { m_curPDEname = attributes . getValue ( PrintDataElement . XML_ATTRIBUTE_NAME ) ; $F7398 ( m_curPDEvalue ) } }
public synchronized int updatePurchase ( String orderId , String productId , PurchaseState purchaseState , long purchaseTime , String developerPayload ) { insertOrder ( orderId , productId , purchaseState , purchaseTime , developerPayload ) ; Cursor cursor = mDb . query ( PURCHASE_HISTORY_TABLE_NAME , HISTORY_COLUMNS , HISTORY_PRODUCT_ID_COL + NUM00 , $F8640 ( productId ) , null , null , null , null ) ; $F1084 ( cursor ) int quantity = NUM00 ; try { while $F12260 ( cursor ) { $F24632 ( stateIndex , cursor ) $F2544 ( state , PurchaseState , stateIndex ) if ( state == PurchaseState . PURCHASED || state == PurchaseState . REFUNDED ) { quantity += NUM00 ; } } updatePurchasedItem ( productId , quantity ) ; } $F14364 ( cursor ) return quantity ; }
public void drawString $F21324 ( str , x , y , textDecoration ) { if ( $F1276 ( str ) || ( $F1276 ( str ) && $F4431 ( str ) ) ) $F932 Object nativeFont = null ; if ( current != null ) { nativeFont = current . getNativeFont ( ) ; } if ( current instanceof CustomFont ) { current . drawString ( this , str , x , y ) ; } else { impl . drawString ( nativeGraphics , nativeFont , str , x + xTranslate , y + yTranslate , textDecoration ) ; } }
$F1 public int read $F21196 ( array , offset , length ) { if $F11984 ( idx , charSequence ) $F7629 $F896 ( array ) if ( length < NUM00 || offset < NUM00 || offset + length > array . length ) { throw new IndexOutOfBoundsException ( $F130320 ( array , offset ) + length ) ; } int count = NUM00 ; for ( $F119 ( i , length ) ) { int c = read ( ) ; $F5881 ( c , count ) array [ offset + i ] = ( char ) c ; count ++ ; } return count ; }
public void updateNonceParameters $F72 { if $F1238 ( mNextNonce , mNonce ) { mCnonceCounter ++ ; } else { mCnonceCounter = NUM00 ; mNonce = mNextNonce ; } }
$F1 public void acceptInstance ( InstanceEvent e ) { if ( e . getStatus ( ) == InstanceEvent . FORMAT_AVAILABLE ) { m_connectedFormat = e . getStructure ( ) ; m_stopRequested . set ( _BOOL ) ; try { init ( new Instances ( e . getStructure ( ) , NUM00 ) ) ; } catch ( IllegalArgumentException ex ) { if ( m_log != null ) { String message = NUM00 ; stopWithErrorMessage ( message , ex ) ; $F665 } } String buffSize = m_bufferSize ; try { buffSize = m_env . substitute ( buffSize ) ; m_bufferSizeI = Integer . parseInt ( buffSize ) ; } $F1516 ( ex ) m_incrementalBuffer = new ArrayList < InstanceHolder > ( m_bufferSizeI ) ; $F14389 ( m_bufferFiles ) ; m_streamCounter = NUM00 ; $F665 } m_busy = _BOOL ; if ( e . getInstance ( ) != null ) { if ( m_streamCounter == NUM00 ) { if ( m_log != null ) { $F37058 ( m_log , statusMessagePrefix ) m_log . logMessage ( NUM00 + statusMessagePrefix ( ) + NUM00 + m_bufferSizeI ) ; } } InstanceHolder tempH = new InstanceHolder $F72 ; tempH . m_instance = e . getInstance ( ) ; tempH . m_fileNumber = - NUM00 ; $F40608 ( m_stringAttIndexes , copyStringAttVals , tempH ) m_incrementalBuffer . add ( tempH ) ; m_streamCounter ++ ; } if ( e . getInstance ( ) == null || $F158194 ( e , InstanceEvent ) ) $F10990 ( emitBufferedInstances ) else if $F36323 ( m_incrementalBuffer , m_bufferSizeI ) { try { sortBuffer ( _BOOL ) ; } catch ( Exception ex ) { $F158170 ( msg , statusMessagePrefix ) stopWithErrorMessage ( msg , ex ) ; m_busy = _BOOL ; $F665 } } m_busy = _BOOL ; }
private void matchVPools ( URI rpSystemId ) { $F28584 storagePoolIds = ConnectivityUtil . getRPSystemStoragePools ( _dbClient , rpSystemId ) ; $F280 ( errorMessage ) if $F1032 ( storagePoolIds ) { $F37270 storagePools = _dbClient . queryObject ( StoragePool . class , storagePoolIds ) ; ImplicitPoolMatcher . matchModifiedStoragePoolsWithAllVirtualPool ( storagePools , _dbClient , _coordinator , errorMessage ) ; } }
public static BigDecimal calculateFee ( Player player , int price ) { $F2544 ( fee , BigDecimal , price ) fee = fee . multiply ( BigDecimal . valueOf ( TRADING_FEE_PERCENTAGE ) ) ; if ( player . isBadBoy ( ) ) { fee = fee . multiply ( BigDecimal . valueOf ( NUM00 + TRADING_FEE_PLAYER_KILLER_PENALTY ) ) ; } BigDecimal feeBonus = BigDecimal . ONE ; feeBonus = BigDecimal . valueOf ( Math . exp ( - player . getTradescore ( ) / FEE_BONUS_CONSTANT ) ) ; fee = fee . multiply ( feeBonus ) ; return fee . max ( BigDecimal . ONE ) ; }
private static $F108629 findVertices180 ( BitMatrix matrix , boolean tryHarder ) { $F2047 ( height , matrix ) $F2049 ( width , matrix ) int halfWidth = width > > NUM00 ; $F108629 result = new ResultPoint $F380 ; boolean found = _BOOL ; $F22974 ( counters , START_PATTERN_REVERSE ) int rowStep = Math . max ( NUM00 , height > > ( tryHarder ? NUM00 : NUM00 ) ) ; for ( int i = height - NUM00 ; i > NUM00 ; i -= rowStep ) { $F2027 loc = findGuardPattern ( matrix , halfWidth , i , halfWidth , _BOOL , START_PATTERN_REVERSE , counters ) ; if ( loc != null ) { result [ NUM00 ] = new ResultPoint ( loc [ NUM00 ] , i ) ; result [ NUM00 ] = new ResultPoint ( loc [ NUM00 ] , i ) ; found = _BOOL ; $F597 } } if ( found ) { found = _BOOL ; for ( int i = NUM00 ; i < height ; i += rowStep ) { $F2027 loc = findGuardPattern ( matrix , halfWidth , i , halfWidth , _BOOL , START_PATTERN_REVERSE , counters ) ; if ( loc != null ) { result [ NUM00 ] = new ResultPoint ( loc [ NUM00 ] , i ) ; result [ NUM00 ] = new ResultPoint ( loc [ NUM00 ] , i ) ; found = _BOOL ; $F597 } } } $F14244 ( counters , STOP_PATTERN_REVERSE ) $F108660 ( found , _BOOL , i , height , rowStep , loc , findGuardPattern , matrix , halfWidth , STOP_PATTERN_REVERSE , counters , result ) if ( found ) { found = _BOOL ; $F108661 ( i , height , rowStep , loc , findGuardPattern , matrix , halfWidth , _BOOL , STOP_PATTERN_REVERSE , counters , result , found ) } return found ? result : null ; }
private void addSearchHistory $F72 { $F47592 ( addSearchHistory , tfSearchEditor ) ; }
ArrayList < SourceFile > trimFileList ( ArrayList < SourceFile > files ) { $F144226 ( names ) ArrayList < SourceFile > list = new ArrayList < SourceFile > $F72 ; $F115 ( size , files ) for ( $F119 ( i , size ) ) { boolean addIt = _BOOL ; SourceFile fi = files . get ( i ) ; String fName = fi . getRawName ( ) ; if ( m_swfFilter == null ) { if $F4257 ( names , fName ) addIt = _BOOL ; } else { addIt = m_swfFilter . containsSource ( fi ) ; } if ( addIt ) { $F22747 ( names , fName ) list . add ( fi ) ; } } return list ; }
public static String join ( $F1986 self , String separator ) { $F83 ( buffer ) boolean first = _BOOL ; $F12553 ( separator ) for ( double next : self ) $F98972 ( first , _BOOL , buffer , separator , next ) $F92 ( buffer ) }
protected void writeShort ( int value ) throws IOException { $F88315 ( out , value ) out . write ( $F11786 ( value ) ) ; }
public EntityQuery orderBy ( String ... fields ) { this . orderBy = Arrays . asList ( fields ) ; return this ; }
public StemmedString ( String orig , String stemmed ) { strOrig = orig ; strStemmed = stemmed ; }
public LogNetworkStreamMerger ( LogRequest req , MediaType mediaType , LogSvcPropertiesLoader propertiesLoader ) { $F1932 ( logger ) this . request = req ; this . mediaType = mediaType ; this . propertiesLoader = propertiesLoader ; List < LogNetworkReader > readers = getLogNetworkStreams ( ) ; $F115 ( size , readers ) logHeads = new LogMessage [ size ] ; this . logStreamList = new LogNetworkReader [ size ] ; int index = NUM00 ; for ( LogNetworkReader reader : readers ) { logStreamList [ index ] = reader ; logHeads [ index ] = null ; index ++ ; } }
public static String packCipherSuites $F4374 ( ciphers ) { String cipherSet = null ; if ( ciphers != null ) { $F280 ( buf ) for ( $F1139 ( i , ciphers ) ) { $F6939 ( buf , ciphers , i ) if $F18953 ( i , ciphers ) $F86 ( buf ) } $F6947 ( cipherSet , buf ) } return cipherSet ; }
public ExtensionFileFilter ( String description , String extension ) { this . description = description ; this . extensions = $F2692 ; $F9631 ( extensions , extension ) defaultExtension = extension ; }
private void ensureTupleArray ( int row ) { int nrows = Math . max ( m_table . getRowCount ( ) , row + NUM00 ) ; if ( m_tuples == null ) { m_tuples = new TableTuple [ nrows ] ; } else if ( m_tuples . length < nrows ) { int capacity = Math . max ( $F113948 ( m_tuples ) / NUM00 + NUM00 , nrows ) ; TableTuple [ ] tuples = new TableTuple [ capacity ] ; $F7057 ( System , m_tuples , tuples ) m_tuples = tuples ; } }
private static boolean isAnArgument ( final String arg ) { return ( arg . startsWith ( NUM00 ) && $F4012 ( arg ) && ! $F142343 ( Character , arg ) ) ; }
private synchronized static void removeChildren ( Node node , short type , boolean deep ) { $F9040 ( list , node ) for ( int i = list . getLength ( ) ; i >= NUM00 ; i -- ) { $F61359 ( n , list , i ) $F45557 ( n ) if ( n . getNodeType ( ) == type || type == UNDEFINED_NODE ) node . removeChild ( XMLCaster . toRawNode ( n ) ) ; else if ( deep ) removeChildren ( n , type , deep ) ; } }
public final void lazySet ( V newValue ) { unsafe . putOrderedObject ( this , valueOffset , newValue ) ; }
public boolean isValidSavepoint ( Savepoint sp ) { if ( isSource ( ) ) return _BOOL ; boolean result = _BOOL ; if ( sp != null ) result = _BOOL ; return result ; }
public static void columnsFor ( ResultSet resultSet , TableEditor editor ) throws SQLException { $F100709 $F204 ( columns ) ; columnsFor ( resultSet , null ) ; editor . setColumns ( columns ) ; }
private static void write ( $F6877 src , File out ) throws IOException { try ( Writer writer = new BufferedWriter ( new FileWriter ( out ) ) ) { for ( String line : src ) $F5299 ( writer , line ) } }
public void clear $F72 { if ( mOriginalValues != null ) { $F101536 ( mLock , mOriginalValues ) } else $F9096 ( mObjects ) $F32367 ( mNotifyOnChange , notifyDataSetChanged ) }
private long resetUidValidity $F72 throws IOException { $F657 ( timestamp , System ) setUidValidity ( timestamp ) ; return timestamp ; }
public final $F79542 pseudoLegalMoves ( Position pos ) { $F79542 moveList = getMoveListObj ( ) ; final boolean wtm = pos . whiteMove ; for ( $F6268 ( x ) ) { for ( $F6268 ( y ) ) { int sq = Position . getSquare ( x , y ) ; int p = pos . getPiece ( sq ) ; if ( ( p == Piece . EMPTY ) || ( Piece . isWhite ( p ) != wtm ) ) $F1448 if ( ( p == Piece . WROOK ) || ( p == Piece . BROOK ) || ( p == Piece . WQUEEN ) || ( p == Piece . BQUEEN ) ) { if ( addDirection ( moveList , pos , sq , NUM00 - x , NUM00 ) ) return moveList ; if ( addDirection ( moveList , pos , sq , NUM00 - y , NUM00 ) ) return moveList ; if ( addDirection ( moveList , pos , sq , x , - NUM00 ) ) return moveList ; if ( addDirection ( moveList , pos , sq , y , - NUM00 ) ) return moveList ; } if ( ( p == Piece . WBISHOP ) || ( p == Piece . BBISHOP ) || ( p == Piece . WQUEEN ) || ( p == Piece . BQUEEN ) ) { if ( addDirection ( moveList , pos , sq , Math . min ( NUM00 - x , NUM00 - y ) , NUM00 ) ) return moveList ; if ( addDirection ( moveList , pos , sq , Math . min ( x , NUM00 - y ) , NUM00 ) ) return moveList ; if ( addDirection ( moveList , pos , sq , Math . min ( x , y ) , - NUM00 ) ) return moveList ; if ( addDirection ( moveList , pos , sq , Math . min ( NUM00 - x , y ) , - NUM00 ) ) return moveList ; } if ( ( p == Piece . WKNIGHT ) || ( p == Piece . BKNIGHT ) ) { if ( x < NUM00 && y < NUM00 && addDirection ( moveList , pos , sq , NUM00 , NUM00 ) ) return moveList ; if ( x < NUM00 && y < NUM00 && addDirection ( moveList , pos , sq , NUM00 , NUM00 ) ) return moveList ; if ( x > NUM00 && y < NUM00 && addDirection ( moveList , pos , sq , NUM00 , NUM00 ) ) return moveList ; if ( x > NUM00 && y < NUM00 && addDirection ( moveList , pos , sq , NUM00 , NUM00 ) ) return moveList ; if ( x > NUM00 && y > NUM00 && addDirection ( moveList , pos , sq , NUM00 , - NUM00 ) ) return moveList ; if ( x > NUM00 && y > NUM00 && addDirection ( moveList , pos , sq , NUM00 , - NUM00 ) ) return moveList ; if ( x < NUM00 && y > NUM00 && addDirection ( moveList , pos , sq , NUM00 , - NUM00 ) ) return moveList ; if ( x < NUM00 && y > NUM00 && addDirection ( moveList , pos , sq , NUM00 , - NUM00 ) ) return moveList ; } if ( ( p == Piece . WKING ) || ( p == Piece . BKING ) ) { if ( x < NUM00 && addDirection ( moveList , pos , sq , NUM00 , NUM00 ) ) return moveList ; if ( x < NUM00 && y < NUM00 && addDirection ( moveList , pos , sq , NUM00 , NUM00 ) ) return moveList ; if ( y < NUM00 && addDirection ( moveList , pos , sq , NUM00 , NUM00 ) ) return moveList ; if ( x > NUM00 && y < NUM00 && addDirection ( moveList , pos , sq , NUM00 , NUM00 ) ) return moveList ; if ( x > NUM00 && addDirection ( moveList , pos , sq , NUM00 , - NUM00 ) ) return moveList ; if ( x > NUM00 && y > NUM00 && addDirection ( moveList , pos , sq , NUM00 , - NUM00 ) ) return moveList ; if ( y > NUM00 && addDirection ( moveList , pos , sq , NUM00 , - NUM00 ) ) return moveList ; if ( x < NUM00 && y > NUM00 && addDirection ( moveList , pos , sq , NUM00 , - NUM00 ) ) return moveList ; int k0 = wtm ? Position . getSquare ( NUM00 , NUM00 ) : Position . getSquare ( NUM00 , NUM00 ) ; if ( Position . getSquare ( x , y ) == k0 ) { int aCastle = wtm ? Position . A1_CASTLE : Position . A8_CASTLE ; int hCastle = wtm ? Position . H1_CASTLE : Position . H8_CASTLE ; int rook = wtm ? Piece . WROOK : Piece . BROOK ; if ( ( ( pos . getCastleMask ( ) & ( NUM00 < < hCastle ) ) != NUM00 ) && ( pos . getPiece ( k0 + NUM00 ) == Piece . EMPTY ) && ( pos . getPiece ( k0 + NUM00 ) == Piece . EMPTY ) && ( pos . getPiece ( k0 + NUM00 ) == rook ) && ! sqAttacked ( pos , k0 ) && ! sqAttacked ( pos , k0 + NUM00 ) ) { moveList . add ( getMoveObj ( k0 , k0 + NUM00 , Piece . EMPTY ) ) ; } if ( ( ( pos . getCastleMask ( ) & ( NUM00 < < aCastle ) ) != NUM00 ) && ( pos . getPiece ( k0 - NUM00 ) == Piece . EMPTY ) && ( pos . getPiece ( k0 - NUM00 ) == Piece . EMPTY ) && ( pos . getPiece ( k0 - NUM00 ) == Piece . EMPTY ) && ( pos . getPiece ( k0 - NUM00 ) == rook ) && ! sqAttacked ( pos , k0 ) && ! sqAttacked ( pos , k0 - NUM00 ) ) { moveList . add ( getMoveObj ( k0 , k0 - NUM00 , Piece . EMPTY ) ) ; } } } if ( ( p == Piece . WPAWN ) || ( p == Piece . BPAWN ) ) { int yDir = wtm ? NUM00 : - NUM00 ; if ( pos . getPiece ( sq + yDir ) == Piece . EMPTY ) { addPawnMoves ( moveList , sq , sq + yDir ) ; if ( ( y == ( wtm ? NUM00 : NUM00 ) ) && ( pos . getPiece ( sq + NUM00 * yDir ) == Piece . EMPTY ) ) { addPawnMoves ( moveList , sq , sq + yDir * NUM00 ) ; } } if ( x > NUM00 ) { int toSq = sq + yDir - NUM00 ; int cap = pos . getPiece ( toSq ) ; if ( cap != Piece . EMPTY ) { if ( Piece . isWhite ( cap ) != wtm ) { if ( cap == ( wtm ? Piece . BKING : Piece . WKING ) ) { returnMoveList ( moveList ) ; moveList = getMoveListObj ( ) ; moveList . add ( getMoveObj ( sq , toSq , Piece . EMPTY ) ) ; return moveList ; } else { addPawnMoves ( moveList , sq , toSq ) ; } } } else if ( toSq == pos . getEpSquare ( ) ) { addPawnMoves ( moveList , sq , toSq ) ; } } if ( x < NUM00 ) { int toSq = sq + yDir + NUM00 ; int cap = pos . getPiece ( toSq ) ; if ( cap != Piece . EMPTY ) { if ( Piece . isWhite ( cap ) != wtm ) { if ( cap == ( wtm ? Piece . BKING : Piece . WKING ) ) { returnMoveList ( moveList ) ; moveList = getMoveListObj ( ) ; moveList . add ( getMoveObj ( sq , toSq , Piece . EMPTY ) ) ; return moveList ; } else { addPawnMoves ( moveList , sq , toSq ) ; } } } else if ( toSq == pos . getEpSquare ( ) ) { addPawnMoves ( moveList , sq , toSq ) ; } } } } } return moveList ; }
public static int writeOggPageHeader ( $F96 buf , int offset , int headerType , long granulepos , int streamSerialNumber , int pageCount , int packetCount , $F96 packetSizes ) { writeString ( buf , offset , NUM00 ) ; buf [ offset + NUM00 ] = NUM00 ; buf [ offset + NUM00 ] = ( byte ) headerType ; writeLong ( buf , offset + NUM00 , granulepos ) ; writeInt ( buf , offset + NUM00 , streamSerialNumber ) ; writeInt ( buf , offset + NUM00 , pageCount ) ; writeInt ( buf , offset + NUM00 , NUM00 ) ; buf [ offset + NUM00 ] = ( byte ) packetCount ; System . arraycopy ( packetSizes , NUM00 , buf , offset + NUM00 , packetCount ) ; return packetCount + NUM00 ; }
private void beforeKey $F72 throws JSONException { Scope context = peek ( ) ; if ( context == Scope . NONEMPTY_OBJECT ) $F86 ( out ) else if ( context != Scope . EMPTY_OBJECT ) $F19954 newline ( ) ; replaceTop ( Scope . DANGLING_KEY ) ; }
private $F96 createPreviewBuffer ( Size previewSize ) { int bitsPerPixel = ImageFormat . getBitsPerPixel ( ImageFormat . NV21 ) ; long sizeInBits = previewSize . getHeight ( ) * previewSize . getWidth ( ) * bitsPerPixel ; int bufferSize = $F96308 ( Math , sizeInBits ) + NUM00 ; $F2175 ( byteArray , bufferSize ) $F23500 ( buffer , ByteBuffer , byteArray ) if ( ! buffer . hasArray ( ) || ( buffer . array ( ) != byteArray ) ) $F4639 mBytesToByteBuffer . put ( byteArray , buffer ) ; return byteArray ; }
private void handleStaticSiteRequest ( StaticSiteRequest . PointRequest request , TransportNetwork transportNetwork , TaskStatistics ts ) { StaticComputer computer = new StaticComputer ( request , transportNetwork , ts ) ; if ( request . request . bucket != null ) $F21687 ( computer ) else { try { PipedInputStream pis = new PipedInputStream $F72 ; PipedOutputStream pos = new PipedOutputStream ( pis ) ; finishPriorityTask ( request , pis ) ; computer . write ( pos ) ; $F59 ( pos ) } $F5199 ( LOG , e ) } deleteRequest ( request ) ; }
public synchronized void removeRoom ( String room ) { if ( ! Helper . validateStream ( room ) ) $F932 $F37156 ( room ) if $F16914 ( rooms , room ) { unsubRoom ( room ) ; removeEmotes ( room ) ; prevEmotesets . remove ( room ) ; } }
public static double discharge ( ItemStack itemStack , double amount ) { if ( itemStack != null ) { if ( itemStack . getItem ( ) instanceof IEnergizedItem ) { IEnergizedItem energizedItem = ( IEnergizedItem ) itemStack . getItem ( ) ; if ( energizedItem . canSend ( itemStack ) ) { double energyToUse = Math . min ( energizedItem . getMaxTransfer ( itemStack ) , Math . min ( energizedItem . getEnergy ( itemStack ) , amount ) ) ; energizedItem . setEnergy ( itemStack , energizedItem . getEnergy ( itemStack ) - energyToUse ) ; return energyToUse ; } } } $F1082 }
$F238095 ( lock , this , a , count , k , p , first )
public void addAll ( final Collection elements ) { adjusting = _BOOL ; $F46709 ( oldSelection , selection ) boolean rv = selection . addAll ( elements ) ; adjusting = _BOOL ; $F308 ( rv , fireSelectionChanged , oldSelection , selection ) oldSelection = null ; }
public boolean hasFeature ( int feature ) { return ( ( feature >= MODE_FIRST && feature <= MODE_LAST ) || ( feature >= FEATURE_FIRST && feature <= FEATURE_LAST ) ) && ( feature == MODE_OFF || mCapabilities . get ( feature ) ) ; }
public $F11868 backupPartitions ( UUID nodeId ) { $F86394 ( set , backup , nodeId ) return set == null ? Collections . $F2305 $F35890 : set ; }
public $F21637 insert ( int offset , $F9738 ( str ) ) { internal . insert ( offset , str ) ; return this ; }
public Loader load ( String imageUrl ) { ImageUrl = imageUrl ; return this ; }
private void generateLegalTimesTree $F72 { int k0 = KeyEvent . KEYCODE_0 ; int k1 = KeyEvent . KEYCODE_1 ; int k2 = KeyEvent . KEYCODE_2 ; int k3 = KeyEvent . KEYCODE_3 ; int k4 = KeyEvent . KEYCODE_4 ; int k5 = KeyEvent . KEYCODE_5 ; int k6 = KeyEvent . KEYCODE_6 ; int k7 = KeyEvent . KEYCODE_7 ; int k8 = KeyEvent . KEYCODE_8 ; int k9 = KeyEvent . KEYCODE_9 ; $F58037 ( mLegalTimesTree ) $F58066 ( mIs24HourMode , minuteFirstDigit , k0 , k1 , k2 , k3 , k4 , k5 , minuteSecondDigit , k6 , k7 , k8 , k9 , firstDigit , mLegalTimesTree , secondDigit , thirdDigit , ampm , getAmOrPmKeyCode , AM , PM , fourthDigit ) }
private void buildPTR $F72 { $F1986 temp_row ; $F28974 ( PTRA ) ; int k ; PivotTransform pt ; PTR = Matrix . identity ( n , n ) ; PTRA = PTR . getArray ( ) ; $F8935 ( k , pivotTransformQueue ) while ( k -- > NUM00 ) { pt = pivotTransformQueue . removeLast ( ) ; temp_row = PTRA [ pt . pos1 ] ; PTRA [ pt . pos1 ] = PTRA [ pt . pos2 ] ; PTRA [ pt . pos2 ] = temp_row ; } }
private static String byteToHex $F97 ( digest ) { $F83 ( builder ) for ( byte b : digest ) { String hex = Integer . toHexString ( NUM00 & b ) ; if $F1277 ( hex ) $F86 ( builder ) builder . append ( hex ) ; } $F92 ( builder ) }
public String replace ( char oldChar , char newChar ) { $F1469 buffer = value ; int _offset = offset ; int _count = count ; int idx = _offset ; int last = _offset + _count ; boolean copied = _BOOL ; while ( idx < last ) { if ( buffer [ idx ] == oldChar ) { if ( ! copied ) { $F18064 ( newBuffer , _count ) $F21535 ( System , buffer , _offset , newBuffer , _count ) buffer = newBuffer ; idx -= _offset ; last -= _offset ; copied = _BOOL ; } buffer [ idx ] = newChar ; } idx ++ ; } return copied ? new String ( NUM00 , count , buffer ) : this ; }
public Bidi createLineBidi ( int lineStart , int lineLimit ) { AttributedString astr = new AttributedString $F580 ; Bidi newBidi = new Bidi ( astr . getIterator ( ) ) ; return bidiBase . setLine ( this , bidiBase , newBidi , newBidi . bidiBase , lineStart , lineLimit ) ; }
public boolean isCallerValidForPackage ( Context context , int authRequirements , String packageToMatch ) { assert ! TextUtils . isEmpty ( packageToMatch ) ; return isCallerValid ( context , authRequirements , packageToMatch ) ; }
public void paintInternalFrameTitlePaneBackground $F147434 ( context , g , x , y , w , h ) $F72336 ( paintBackground , context , g , x , y , w , h )
public synchronized void addGraphListener ( GraphListener cl ) $F6659 ( m_graphListeners , cl )
public void restartAndInstallIfNecessary $F72 { File patchesDir = new File ( mySdkHandler . getLocation ( ) , PatchInstallerUtil . PATCHES_DIR_NAME ) ; StudioLoggerProgressIndicator progress = new StudioLoggerProgressIndicator ( PatchInstallerFactory . class ) ; if $F3428 ( patchesDir ) { $F5237 subDirs = patchesDir . listFiles ( null ) ; for ( File patchDir : subDirs ) { processPatch ( mySdkHandler . getLocation ( ) , progress , patchDir ) ; } } }
public static $F3789 align ( $F2027 real , $F1986 pred ) { int missing = numberOfMissingLabels ( real ) ; $F1986 _real = new double [ real . length - missing ] ; $F1986 _pred = new double [ real . length - missing ] ; int offset = NUM00 ; for ( $F1139 ( i , real ) ) { if ( real [ i ] == - NUM00 || pred [ i ] == - NUM00 || Double . isNaN ( pred [ i ] ) ) $F118993 ( offset ) _real [ i - offset ] = real [ i ] ; _pred [ i - offset ] = pred [ i ] ; } $F3789 $F90858 ( res ) ; res [ NUM00 ] = _real ; res [ NUM00 ] = _pred ; return res ; }
public static boolean isCategory ( int M_Product_Category_ID , int M_Product_ID ) { if ( M_Product_ID == NUM00 || M_Product_Category_ID == NUM00 ) return _BOOL ; $F16747 ( product , M_Product_ID ) $F10158 ( category , s_products , product ) if ( category != null ) return category . intValue ( ) == M_Product_Category_ID ; String sql = NUM00 ; PreparedStatement pstmt = null ; try { $F47577 ( pstmt , DB , sql ) $F47 ( pstmt , M_Product_ID ) $F49 ( rs , pstmt ) if $F1682 ( rs ) category = new Integer ( rs . getInt ( NUM00 ) ) ; $F59 ( rs ) $F59 ( pstmt ) pstmt = null ; } $F285018 ( s_log , Level , sql , e ) $F285021 ( pstmt ) if ( category != null ) { s_products . put ( product , category ) ; s_log . fine ( NUM00 + M_Product_ID + NUM00 + category + NUM00 + M_Product_Category_ID + NUM00 + ( category . intValue ( ) == M_Product_Category_ID ) ) ; return category . intValue ( ) == M_Product_Category_ID ; } $F68676 ( s_log , Level , M_Product_ID ) return _BOOL ; }
public AllStatsTableMulti ( DatasetGenerator datasetGenerator , Locker locker ) { $F18062 ( ArgumentChecking , datasetGenerator ) initComponents ( ) ; table . setDefaultRenderer ( JLabel . class , new Renderer $F72 ) ; table . setColumnSelectionAllowed ( _BOOL ) ; table . setRowSelectionAllowed ( _BOOL ) ; table . setGridColor ( GRID_COLOR ) ; JTableHeader header = table . getTableHeader ( ) ; header . setReorderingAllowed ( _BOOL ) ; GUIUtilities . setTableHeader ( header ) ; model = new Model ( datasetGenerator ) ; table . setModel ( model ) ; this . locker = locker ; }
$F5803 ( drawable , getDrawable , matrix , prevMatrix , drawableWidth , drawableHeight , scaleX , viewWidth , scaleY , viewHeight , mScaleType , CENTER , CENTER_CROP , Math , CENTER_INSIDE , FIT_CENTER , FIT_XY , redundantXSpace , redundantYSpace , matchViewWidth , matchViewHeight , isZoomed , imageRenderedAtLeastOnce , normalizedScale , prevMatchViewWidth , prevMatchViewHeight , savePreviousImageValues , m , Matrix , transX , transY , prevActualWidth , actualWidth , getImageWidth , translateMatrixAfterRotate , prevViewWidth , prevActualHeight , actualHeight , getImageHeight , prevViewHeight , fixTrans , setImageMatrix )
public void append ( File file , FTPDataTransferListener listener ) throws IllegalStateException , FileNotFoundException , IOException , FTPIllegalReplyException , FTPException , FTPDataTransferException , FTPAbortedException { if $F1906 ( file ) { throw new FileNotFoundException $F89450 ( file ) ; } InputStream inputStream = null ; try { $F5335 ( inputStream , file ) } catch ( IOException e ) { throw new FTPDataTransferException ( e ) ; } try { append ( file . getName ( ) , inputStream , NUM00 , listener ) ; } catch ( IllegalStateException e ) { throw e ; } $F8012 ( e ) catch ( FTPIllegalReplyException e ) { throw e ; } catch ( FTPException e ) { throw e ; } catch ( FTPDataTransferException e ) { throw e ; } catch ( FTPAbortedException e ) { throw e ; } finally { $F73912 ( inputStream ) } }
public $F3803 provideWhiteList $F72 { $F127233 ( whiteList ) $F18793 ( whiteList ) return whiteList ; }
public static boolean isScopedName ( String name ) { return $F412 ( name ) ; }
public Input ( IoBuffer buf ) { super ( buf ) ; amf3_mode = NUM00 ; $F30598 ( stringReferences ) classReferences = new ArrayList < ClassReference > $F72 ; }
public static Properties loadConfigFile ( String path ) { Properties property = null ; $F1705 ( file , path ) if ( $F302235 ( file ) ) { try { $F65625 ( property ) property . load ( new FileReader $F89450 ( file ) ) ; } $F35546 ( e ) $F12241 ( e ) } return property ; }
protected void illegalMessageReceived ( OFMessage m ) { String msg = getSwitchStateMessage ( m , NUM00 ) ; throw new SwitchStateException ( msg ) ; }
protected void sprint ( boolean booleanField ) $F45719 ( sprint , String , booleanField )
protected static void toEPLViews ( StringWriter writer , $F183286 views ) { if ( ( views != null ) && $F6887 ( views ) ) { $F3410 ( writer ) String delimiter = NUM00 ; for ( View view : views ) { writer . write ( delimiter ) ; view . toEPL ( writer ) ; delimiter = NUM00 ; } } }
protected void removeDatabaseListeners $F72 $F9096 ( databaseListeners )
private AudioMapType loadAudioMapXml ( File audioMapFile ) throws XmlParsingException , FileNotFoundException { if $F48790 ( audioMapFile ) { throw $F135029 ( String , audioMapFile ) ; } return XmlParser . parse ( audioMapFile , $F8640 ( AUDIOMAP_XML_SCHEME ) , AUDIOMAP_PACKAGE , AudioMapType . class ) ; }
public void addGenericAttr ( GenericAttr g ) $F6659 ( generic , g )
private List < FahrzeitEvent > addFahrtInfoToFahrzeitEvents ( List < FahrtEvent > fahrtEvents , List < FahrzeitEvent > fahrzeitEvents , boolean keepFahrzeitEventsWithoutFahrtEvent ) { List < FahrzeitEvent > fahrzeitEventsOut = new LinkedList < FahrzeitEvent > $F72 ; Map < String , FahrtEvent > rblDateKursDateTimeIst2FahrtEventMap = new HashMap < String , FahrtEvent > $F72 ; $F205052 ( searchStrings ) for ( FahrtEvent fahrtEvent : fahrtEvents ) { String searchId = String . valueOf ( fahrtEvent . getRblDate ( ) ) + String . valueOf ( fahrtEvent . getKurs ( ) ) + fahrtEvent . getDepartureDateIst ( ) + fahrtEvent . getDepartureTimeIst ( ) ; if $F105 ( searchStrings , searchId ) $F34420 ( log , searchId ) else { searchStrings . add ( searchId ) ; rblDateKursDateTimeIst2FahrtEventMap . put ( searchId , fahrtEvent ) ; } } int numberOfMissingFahrtEvents = NUM00 ; for ( FahrzeitEvent fahrzeitEvent : fahrzeitEvents ) { String searchId = String . valueOf ( fahrzeitEvent . getRblDate ( ) ) + String . valueOf ( fahrzeitEvent . getKurs ( ) ) + fahrzeitEvent . getDepartureDateIst ( ) + fahrzeitEvent . getDepartureTimeIst ( ) ; FahrtEvent fahrtEvent = rblDateKursDateTimeIst2FahrtEventMap . get ( searchId ) ; if ( fahrtEvent == null ) { numberOfMissingFahrtEvents ++ ; $F46023 ( keepFahrzeitEventsWithoutFahrtEvent , fahrzeitEventsOut , fahrzeitEvent ) } else { fahrzeitEvent . add ( fahrtEvent ) ; fahrzeitEventsOut . add ( fahrzeitEvent ) ; } } $F60651 ( log , numberOfMissingFahrtEvents ) log . info ( $F10533 ( fahrzeitEventsOut ) ) ; return fahrzeitEventsOut ; }
private static Object newInstanceNoServiceLoader $F60993 ( providerClass ) { if ( System . getSecurityManager ( ) == null ) $F1337 try { Method creationMethod = providerClass . getDeclaredMethod ( NUM00 ) ; return creationMethod . invoke ( null , ( $F131 ) null ) ; } catch ( NoSuchMethodException exc ) $F1337 catch ( Exception exc ) $F1337 }
private void checkUUID ( String uuid , int code ) { checkHash ( UUID . fromString ( uuid ) , code ) ; }
$F1 protected void prepareWrite ( WritableByteChannel channel ) throws Exception { os = Channels . newOutputStream ( channel ) ; }
public void run $F72 { try { boolean cleanRemoteSessions = _BOOL ; synchronized ( this ) { Collection < StateInfo > $F204 ( infos ) ; $F2966 ( infos , servers ) $F2966 ( infos , sites ) for ( StateInfo info : infos ) { info . isUp = checkServerUp ( info ) ; if ( ! info . isUp ) { $F52932 ( down , info ) } else { if ( $F1030 ( down ) && down . remove ( info . id ) ) { cleanRemoteSessions = _BOOL ; } } } } if ( cleanRemoteSessions ) { foreignSessionHandler . cleanUpRemoteSessions ( ) ; } } catch ( Exception ex ) $F36592 ( sessionDebug , ex ) }
private void writeObject $F9338 ( p_stream ) throws $F3258 { $F9339 ( p_stream ) p_stream . writeInt ( trace_angle_restriction . get_no ( ) ) ; }
$F1431 public LiteralExtensionIV createIV ( final Value value ) { if ( value instanceof Literal == _BOOL ) $F10056 final Literal lit = ( Literal ) value ; final AbstractLiteralIV delegate = new PackedLongIV ( Long . parseLong ( lit . getLabel ( ) ) ) ; return new LiteralExtensionIV ( delegate , datatype . getIV ( ) ) ; }
public Builder addHeader ( String name , String value ) { headers . add ( new Header ( name , value ) ) ; return this ; }
public void add ( LeafAtom atom ) $F207 ( leafChildren , atom )
$F25527 ( redundantOpCompactThreshold , redundantOpCount , lruEntries )
public static double normalCDF ( double x ) { return ( NUM00 * ( NUM00 + ( erf ( x / ( Math . sqrt ( NUM00 ) ) ) ) ) ) ; }
public void removeResult ( String name ) { StringBuffer buff = m_Results . get ( name ) ; if ( buff != null ) { m_Results . remove ( name ) ; m_Model . removeElement ( name ) ; m_Objs . remove ( name ) ; $F58463 ( System ) } }
private void addEntry $F72 { filterModel . addNewEntry ( ) ; extentModel . populate ( null ) ; removeFTCButton . setEnabled ( _BOOL ) ; addExtentButton . setEnabled ( _BOOL ) ; removeExtentButton . setEnabled ( _BOOL ) ; }
public void testCase22 $F72 { $F3013 byte $F3014 = { NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 } ; int aSign = NUM00 ; int bSign = - NUM00 ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) try { aNumber . mod ( bNumber ) ; fail ( NUM00 ) ; } $F174375 }
$F3789 CalcTheoreticalSVValues ( Variogram vario , double MaximumDisplyDistanst ) { $F3789 res = new double [ NUM00 * NumberOfLags + NUM00 ] [ NUM00 ] ; for ( $F1139 ( i , res ) ) { res [ i ] [ NUM00 ] = i * MaximumDisplyDistanst / ( NUM00 * NumberOfLags ) ; switch ( vario . Type ) { case EXPONENTIAL : if ( res [ i ] [ NUM00 ] != NUM00 ) { res [ i ] [ NUM00 ] = vario . Nugget + vario . Sill * ( NUM00 - Math . exp ( - res [ i ] [ NUM00 ] / vario . Range ) ) ; } else { res [ i ] [ NUM00 ] = vario . Nugget ; } $F597 case GAUSSIAN : if ( res [ i ] [ NUM00 ] != NUM00 ) { res [ i ] [ NUM00 ] = vario . Nugget + vario . Sill * ( NUM00 - Math . exp ( - NUM00 * ( Math . pow ( res [ i ] [ NUM00 ] , NUM00 ) ) / ( Math . pow ( vario . Range , NUM00 ) ) ) ) ; } else { res [ i ] [ NUM00 ] = vario . Nugget ; } $F597 case SPHERICAL : if ( res [ i ] [ NUM00 ] > vario . Range ) { res [ i ] [ NUM00 ] = vario . Nugget + vario . Sill ; } else if ( res [ i ] [ NUM00 ] > NUM00 && res [ i ] [ NUM00 ] <= vario . Range ) { res [ i ] [ NUM00 ] = vario . Nugget + vario . Sill * ( NUM00 * res [ i ] [ NUM00 ] / vario . Range - NUM00 * Math . pow ( ( res [ i ] [ NUM00 ] / vario . Range ) , NUM00 ) ) ; } else { res [ i ] [ NUM00 ] = vario . Nugget ; } $F597 } } return res ; }
public DExportPrivateKeyOpenSsl ( JFrame parent , String entryAlias , PasswordQualityConfig passwordQualityConfig ) { $F36748 ( super , parent , Dialog ) this . entryAlias = entryAlias ; this . passwordQualityConfig = passwordQualityConfig ; initComponents ( ) ; }
public BigDecimal sum ( String sqlExpression ) $F8587 ( aggregate , sqlExpression , AGGREGATE_SUM )
private void smoothSnapToPosition ( int scrollY , int availableScrollHeight , AlphabeticalAppsList . FastScrollSectionInfo info ) { mRv . removeCallbacks ( mSmoothSnapNextFrameRunnable ) ; mRv . removeCallbacks ( mFastScrollToTargetSectionRunnable ) ; trackAllChildViews ( ) ; if ( mHasFastScrollTouchSettled ) { mCurrentFastScrollSection = info . sectionName ; mTargetFastScrollSection = null ; updateTrackedViewsFastScrollFocusState ( ) ; } else { mCurrentFastScrollSection = null ; mTargetFastScrollSection = info . sectionName ; mHasFastScrollTouchSettled = _BOOL ; updateTrackedViewsFastScrollFocusState ( ) ; mRv . postDelayed ( mFastScrollToTargetSectionRunnable , mHasFastScrollTouchSettledAtLeastOnce ? REPEAT_TOUCH_SETTLING_DURATION : INITIAL_TOUCH_SETTLING_DURATION ) ; } int newScrollY = Math . min ( availableScrollHeight , mRv . getPaddingTop ( ) + mRv . getTop ( info . fastScrollToItem . rowIndex ) ) ; int numFrames = mFastScrollFrames . length ; for ( $F119 ( i , numFrames ) ) { mFastScrollFrames [ i ] = ( newScrollY - scrollY ) / numFrames ; } mFastScrollFrameIndex = NUM00 ; mRv . postOnAnimation ( mSmoothSnapNextFrameRunnable ) ; }
$F1 public int calculateOffsetX $F72 { return ( int ) ( Math . cos ( this . angle ) * this . distance ) - this . shadowSize ; }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
protected void onFinish $F72 { mErrorListener = null ; }
private $F4203 void runTestWrite ( XmlWriter $F4203 writer , $F5675 bundle , $F3803 expected ) throws Exception { File tmpFile = tmpFolder . newFile ( NUM00 ) ; try $F64338 ( fileOutputStream , tmpFile ) { writeBundle ( writer , bundle , fileOutputStream . getChannel ( ) ) ; } $F24645 ( lines ) try ( BufferedReader reader = new BufferedReader $F434 ( tmpFile ) ) { for ( $F589 ) { $F27015 ( line , reader ) $F32472 ( line ) $F1382 ( line ) if $F4012 ( line ) $F207 ( lines , line ) } assertEquals ( expected , lines ) ; } }
public String addDays ( Object odays , String format ) { $F41834 ( days , FunctionHandler , odays ) $F4377 ( now , Calendar ) now . add ( Calendar . DAY_OF_YEAR , days ) ; DateFormat formatter = getFormatter ( format ) ; $F13440 ( formatter , now ) }
private static File createTempFile ( Context context , $F5466 String mimeType ) throws IOException { File externalCacheDir = context . getExternalCacheDir ( ) ; File internalCacheDir = context . getCacheDir ( ) ; File cacheDir ; if ( externalCacheDir == null && internalCacheDir == null ) $F14525 if ( externalCacheDir == null ) { cacheDir = internalCacheDir ; } else if ( internalCacheDir == null ) { cacheDir = externalCacheDir ; } else { cacheDir = externalCacheDir . getFreeSpace ( ) > internalCacheDir . getFreeSpace ( ) ? externalCacheDir : internalCacheDir ; } return File . createTempFile ( TEMP_FILE_PREFIX , getFileExtensionForType ( mimeType ) , cacheDir ) ; }
$F1 public $F987 listOptions $F72 { $F994 ( newVector ) $F9007 ( newVector ) $F9007 ( newVector ) $F1000 ( newVector ) $F1006 ( newVector ) $F1007 ( newVector ) }
public boolean removeEntry ( int xIndex , int dataSetIndex ) { if $F6389 ( dataSetIndex , mDataSets ) return _BOOL ; $F6391 ( dataSet , mDataSets , dataSetIndex ) Entry e = dataSet . getEntryForXIndex ( xIndex ) ; return removeEntry ( e , dataSetIndex ) ; }
private void runReadTest ( $F96 input , CompressionMode mode ) throws IOException $F34231 ( runReadTest , input , mode )
public static void close ( $F5466 Context rsrc , $F5466 IgniteLogger log ) { if ( rsrc != null ) try $F881 ( rsrc ) catch ( NamingException e ) { warn ( $F56761 ( log , e ) ) ; } }
void removeEQ ( Object o ) { $F677 ( lock , this ) $F790 ( lock ) try { $F131 array = queue ; for ( int i = NUM00 , n = size ; i < n ; i ++ ) { if ( o == array [ i ] ) $F87181 ( removeAt , i ) } } $F796 ( lock ) }
public WritableRaster createCompatibleWritableRaster ( int w , int h ) { if ( w <= NUM00 || h <= NUM00 ) { throw new RasterFormatException ( NUM00 + ( ( w <= NUM00 ) ? NUM00 : NUM00 ) ) ; } SampleModel sm = sampleModel . createCompatibleSampleModel ( w , h ) ; return new IntegerInterleavedRaster ( sm , $F69159 ) ; }
$F221804 ( d , imageView , getImageView , viewWidth , getImageViewWidth , viewHeight , getImageViewHeight , drawableWidth , drawableHeight , mBaseMatrix , widthScale , heightScale , mScaleType , ScaleType , scale , Math , mTempSrc , mTempDst , FIT_CENTER , ScaleToFit , FIT_START , FIT_END , FIT_XY , resetMatrix )
public static $F806 schedulerCommandArgs ( Config config , Config runtime , $F3807 freePorts ) { if $F10255 ( freePorts , PORTS_REQUIRED_FOR_SCHEDULER ) $F11389 for ( int port : freePorts ) { $F201598 ( port ) } int httpPort = freePorts . get ( NUM00 ) ; $F24645 ( commands ) $F18793 ( commands ) commands . add ( Context . cluster ( config ) ) ; $F18793 ( commands ) commands . add ( Context . role ( config ) ) ; $F18793 ( commands ) commands . add ( Context . environ ( config ) ) ; $F18793 ( commands ) commands . add ( Context . topologyName ( config ) ) ; $F18793 ( commands ) commands . add ( Context . topologyBinaryFile ( config ) ) ; $F18793 ( commands ) commands . add ( Integer . toString ( httpPort ) ) ; $F16105 ( commands ) }
public DocumentAnalysisRequest addDocument ( SolrInputDocument doc ) $F18637 ( documents , doc , this )
public final Key doPhase ( Key key , boolean lastPhase ) throws InvalidKeyException , IllegalStateException { chooseFirstProvider ( ) ; return spi . engineDoPhase ( key , lastPhase ) ; }
public SimpleSystemPermissionSet $F72 $F845
$F1 public final void addBezierCurveY ( final float x , final float y , final float x3 , final float y3 ) { elements . add ( new QuadCurveTo ( x , y , x3 , y3 ) ) ; currentPos [ NUM00 ] = x3 ; currentPos [ NUM00 ] = y3 ; }
public void readBucketsFromPrefs $F72 { SharedPreferences prefs = mContext . getSharedPreferences ( SHARED_PREFS , NUM00 ) ; $F2689 buckets = prefs . getStringSet ( PREF_BUCKETS_IDS , new $F32030 $F72 ) ; $F725 ( mBuckets ) for ( String bucketId : buckets ) { AutoMixBucket bucket = restoreBucketFromId ( bucketId ) ; mBuckets . add ( bucket ) ; } }
protected int nextChar $F72 throws IOException { fReadFromBuffer = $F4012 ( fBuffer ) ; if ( fReadFromBuffer ) { $F52837 ( ch , fBuffer , fIndex ) if $F11984 ( fIndex , fBuffer ) { $F4910 ( fBuffer ) fIndex = NUM00 ; } return ch ; } int ch = fCharAfterWhiteSpace ; if ( ch == - NUM00 ) $F145798 ( ch , fReader ) if ( fSkipWhiteSpace && $F136808 ( Character , ch ) ) { do $F145798 ( ch , fReader ) while ( $F136808 ( Character , ch ) ) ; if ( ch != - NUM00 ) { fCharAfterWhiteSpace = ch ; $F1278 } } else $F44867 ( fCharAfterWhiteSpace ) return ch ; }
$F1 public void acceptAppOffer ( Offer offer ) { int index = getIndex ( offer , appOffers ) ; if ( index != - NUM00 ) { appOffers . remove ( index ) ; appOfferStream . onNext ( offer ) ; } index = getIndex ( offer , acceptedOffers ) ; if ( index == - NUM00 ) $F207 ( acceptedOffers , offer ) }
public boolean verify ( PublicKey key , String sigProvider ) throws NoSuchAlgorithmException , NoSuchProviderException , CMSException { return verify ( key , CMSUtils . getProvider ( sigProvider ) ) ; }
private void injectDependencies $F72 { EasyMVPApplication easyMVPApplication = ( EasyMVPApplication ) getApplication ( ) ; $F6689 activityScopeModules = $F89491 ( getModules ) ? getModules ( ) : $F203 ; activityScopeModules . add ( new ActivityModule ( this ) ) ; activityScopeGraph = easyMVPApplication . buildGraphWithAditionalModules ( activityScopeModules ) ; inject ( this ) ; }
public void writeRequest $F72 { $F38008 ( lock ) synchronized ( lock ) { synchronized ( this ) { boolean goAheadWithWrite = $F10470 ( writerLocks ) && currentReaders == NUM00 && currentWriters == NUM00 ; if ( goAheadWithWrite ) { ++ currentWriters ; $F665 } writerLocks . addLast ( lock ) ; } $F29028 ( lock ) } }
public long readLocalDate $F72 throws IOException { expectStartTag ( NUM00 ) ; if ( localCalendar == null ) $F90333 ( localCalendar , Calendar ) long value = parseDate ( localCalendar ) ; expectEndTag ( NUM00 ) ; return value ; }
public void removeSelectionListener ( final SelectionListener listener ) { checkWidget ( ) ; listeners . remove ( listener ) ; }
private void writeHex ( int i ) throws IOException { int cursor = NUM00 ; do { hex [ -- cursor ] = HEX_DIGITS [ i & NUM00 ] ; } while ( ( i >>>= NUM00 ) != NUM00 ) ; socketOut . write ( hex , cursor , hex . length - cursor ) ; }
private synchronized String readInputStream ( InputStreamReader inputStreamReader ) throws IOException , BadLocationException { BufferedReader bufferedReader = null ; try { $F26608 ( bufferedReader , inputStreamReader ) String newLine = NUM00 ; $F280 ( sb ) String line ; while $F443 ( line , bufferedReader ) { sb . append ( line + newLine ) ; } $F92 ( sb ) } finally { if ( null != bufferedReader ) $F59 ( bufferedReader ) if ( null != inputStreamReader ) $F59 ( inputStreamReader ) } }
private $F20526 typeParameters ( List < TypeParameter > tpl , Declaration from ) { if $F1032 ( tpl ) { $F20526 $F719 ( l , tpl ) ; for ( TypeParameter tp : tpl ) $F18351 ( l , typeParameterMap , tp , from ) return l ; } $F1274 }
long freeSpaceUnix ( String path , boolean kb , boolean posix , long timeout ) throws IOException { if $F1277 ( path ) $F825 String flags = NUM00 ; $F70739 ( kb , flags ) $F70739 ( posix , flags ) $F806 cmdAttribs = $F20 ( flags ) ? $F2707 ( DF , flags , path ) : $F17191 ( DF , path ) ; $F3803 lines = performCommand ( cmdAttribs , NUM00 , timeout ) ; if $F6214 ( lines ) { throw new IOException ( NUM00 + DF + NUM00 + NUM00 + path + NUM00 + lines ) ; } $F13410 ( line2 , lines ) $F17727 ( tok , line2 ) if ( tok . countTokens ( ) < NUM00 ) { if ( tok . countTokens ( ) == NUM00 && $F14764 ( lines ) ) { $F13410 ( line3 , lines ) $F49888 ( tok , line3 ) } else { throw new IOException ( NUM00 + DF + NUM00 + NUM00 + path + NUM00 ) ; } } else { $F89223 ( tok ) } $F89223 ( tok ) $F89223 ( tok ) $F8095 ( freeSpace , tok ) return parseBytes ( freeSpace , path ) ; }
$F21985 ( is , bytes , DEFAULT_BUFFER_SIZE , closeSilently )
private static boolean withinTwo ( INode n , INode goal ) { DoubleLinkedList $F62805 moves = n . validMoves ( ) ; for ( Iterator $F62805 it = moves . iterator ( ) ; it . hasNext ( ) ; ) { IMove move = it . next ( ) ; INode successor = n . copy ( ) ; move . execute ( successor ) ; if ( withinOne ( successor , goal ) ) { return _BOOL ; } } return _BOOL ; }
public PennTreebankReader ( String treebankHome , $F806 sections , String parseViewName ) throws Exception { super ( CorpusReaderConfigurator . buildResourceManager ( PENN_TREEBANK_WSJ , treebankHome ) ) ; this . parseViewName = parseViewName ; combinedWSJHome = treebankHome ; if ( sections == null ) this . sections = IOUtils . lsDirectories ( combinedWSJHome ) ; else { this . sections = new String [ sections . length ] ; $F833 ( System , sections , this ) } updateCurrentFiles ( ) ; }
$F1 public void unwrapSSLv2 $F97 ( bytes ) $F5795 ( unexpectedMessage )
$F1 public void closeWrite $F72 throws IOException { $F7254 ( _isCloseWrite ) _isCloseWrite = _BOOL ; OutputStream os = _os ; _os = null ; boolean isShutdownOutput = _BOOL ; if ( _s instanceof SSLSocket ) { log . finer ( L . l ( NUM00 ) ) ; $F665 } else if ( _s != null ) { try { $F124256 ( _s ) isShutdownOutput = _BOOL ; } catch ( UnsupportedOperationException e ) { $F120634 ( log , Level , e ) } catch ( Exception e ) { log . finer ( e . toString ( ) ) ; $F120634 ( log , Level , e ) } } if ( ! isShutdownOutput && os != null ) $F881 ( os ) }
protected void applyRowChangeData ( RowChangeData data , List < ReplOption > options , String sourceDbmsType ) throws ReplicatorException { if ( options != null ) { try { if ( applySessionVariables ( null , options ) ) { $F35060 ( logger ) executePendingBatch ( ) ; $F180903 ( statement ) statement . clearBatch ( ) ; } } catch ( SQLException e ) { throw new ApplierException ( NUM00 , e ) ; } } List < ReplOption > rowOptions = data . getOptions ( ) ; if ( rowOptions != null ) { try { if ( applySessionVariables ( null , rowOptions ) ) { $F35060 ( logger ) executePendingBatch ( ) ; $F180903 ( statement ) statement . clearBatch ( ) ; } } catch ( SQLException e ) { throw new ApplierException ( NUM00 , e ) ; } } for ( OneRowChange row : data . getRowChanges ( ) ) { applyOneRowChangePrepared ( row , sourceDbmsType ) ; } }
$F99425 ( os , writeInt , CACHE_MAGIC , writeString , key , etag , writeLong , serverDate , lastModified , ttl , softTtl , writeStringStringMap , responseHeaders , _BOOL , VolleyLog , e )
public NamedList normalize ( NamedList input ) { $F36382 ( input ) for ( $F2277 ( i , input ) ) { Object v = input . getVal ( i ) ; if ( v instanceof NamedList ) { input . setVal ( i , normalize ( ( NamedList ) v ) ) ; } } return input ; }
$F38759 ( isInfinite , value )
String inprogressZNodeName $F46828 ( ledgerId , firstTxId , logSegmentSeqNo ) { if ( DistributedLogConstants . LOGSEGMENT_NAME_VERSION == conf . getLogSegmentNameVersion ( ) ) { return String . format ( NUM00 , DistributedLogConstants . INPROGRESS_LOGSEGMENT_PREFIX , logSegmentSeqNo ) ; } else { return DistributedLogConstants . INPROGRESS_LOGSEGMENT_PREFIX + NUM00 + Long . toString ( firstTxId , NUM00 ) ; } }
public synchronized void add ( double value ) { add ( $F37513 ( mCategories ) , value ) ; }
public void receiveRedundancy $F72 { try { while ( _BOOL ) { if ( mIn . read ( mInBuffer ) <= NUM00 ) $F665 } } $F29052 }
void outputDocTypeDecl ( String name , boolean closeDecl ) throws SAXException { $F32367 ( m_cdataTagOpen , closeCDATA ) try { $F42851 ( writer , m_writer ) $F3410 ( writer ) writer . write ( name ) ; String doctypePublic = getDoctypePublic ( ) ; if ( null != doctypePublic ) $F74647 ( writer , doctypePublic ) String doctypeSystem = getDoctypeSystem ( ) ; if ( null != doctypeSystem ) { if ( null == doctypePublic ) $F3410 ( writer ) else $F3410 ( writer ) writer . write ( doctypeSystem ) ; if ( closeDecl ) { $F3410 ( writer ) $F11584 ( writer , m_lineSep , m_lineSepLen ) closeDecl = _BOOL ; } else $F3410 ( writer ) } } $F6289 ( e ) }
MVStore ( $F530 config ) { $F100553 ( o , config ) this . compressionLevel = o == null ? NUM00 : ( Integer ) o ; $F28495 ( fileName , config ) $F178035 ( o , config ) if ( o == null ) { pageSplitSize = fileName == null ? NUM00 * NUM00 : NUM00 * NUM00 ; } else { pageSplitSize = ( Integer ) o ; } $F178035 ( o , config ) this . backgroundExceptionHandler = ( UncaughtExceptionHandler ) o ; meta = new MVMap $F2538 ( StringDataType . INSTANCE , StringDataType . INSTANCE ) ; $F530 c = New . hashMap ( ) ; $F140284 ( c ) $F545 ( c , currentVersion ) meta . init ( this , c ) ; fileStore = ( FileStore ) config . get ( NUM00 ) ; if ( fileName == null && fileStore == null ) { cache = null ; cacheChunkRef = null ; $F665 } if ( fileStore == null ) { fileStoreIsProvided = _BOOL ; fileStore = new FileStore $F72 ; } else { fileStoreIsProvided = _BOOL ; } retentionTime = fileStore . getDefaultRetentionTime ( ) ; boolean readOnly = config . containsKey ( NUM00 ) ; $F178035 ( o , config ) int mb = o == null ? NUM00 : ( Integer ) o ; if ( mb > NUM00 ) { CacheLongKeyLIRS . Config cc = new CacheLongKeyLIRS . Config $F72 ; cc . maxMemory = mb * NUM00 * NUM00 ; $F178035 ( o , config ) if ( o != null ) { cc . segmentCount = ( Integer ) o ; } cache = new CacheLongKeyLIRS < Page > ( cc ) ; cc . maxMemory /= NUM00 ; cacheChunkRef = new CacheLongKeyLIRS < PageChildren > ( cc ) ; } $F178035 ( o , config ) int kb = o == null ? NUM00 : ( Integer ) o ; autoCommitMemory = kb * NUM00 * NUM00 ; $F178035 ( o , config ) autoCompactFillRate = o == null ? NUM00 : ( Integer ) o ; $F1469 encryptionKey = ( $F1469 ) config . get ( NUM00 ) ; try { if ( ! fileStoreIsProvided ) { fileStore . open ( fileName , readOnly , encryptionKey ) ; } if $F10471 ( fileStore ) { creationTime = getTimeAbsolute ( ) ; lastCommitTime = creationTime ; $F140284 ( storeHeader ) $F545 ( storeHeader , BLOCK_SIZE ) $F545 ( storeHeader , FORMAT_WRITE ) $F545 ( storeHeader , creationTime ) writeStoreHeader ( ) ; } else $F5795 ( readStoreHeader ) } catch ( IllegalStateException e ) { panic ( e ) ; } finally { if ( encryptionKey != null ) { Arrays . fill ( encryptionKey , $F2858 ) ; } } lastCommitTime = getTimeSinceCreation ( ) ; $F178035 ( o , config ) int delay = o == null ? NUM00 : ( Integer ) o ; setAutoCommitDelay ( delay ) ; }
public static boolean isValidVector ( Vector2f vector ) { $F397 ( vector , _BOOL ) if ( Float . isNaN ( vector . x ) || Float . isNaN ( vector . y ) ) return _BOOL ; if ( Float . isInfinite ( vector . x ) || Float . isInfinite ( vector . y ) ) return _BOOL ; return _BOOL ; }
public static URL resolveURL ( URL base , String target ) throws MalformedURLException { $F1382 ( target ) if $F3106 ( target ) $F8587 ( fixPureQueryTargets , base , target ) $F260311 ( base , target ) }
protected int maxDepth ( Layout . Node node ) { int depth = NUM00 ; for ( int i = NUM00 ; i < node . numChildren ( ) ; i ++ ) { Layout . Node child = node . getChild ( i ) ; depth = Math . max ( depth , maxDepth ( child ) ) ; } return depth + NUM00 ; }
$F23145 ( measureSpec , result , specMode , MeasureSpec , specSize , mRadius , getPaddingTop , getPaddingBottom , Math )
private static $F52326 pathToURLs ( String path ) throws MalformedURLException { synchronized ( pathToURLsCache ) { $F131 v = ( $F131 ) pathToURLsCache . get ( path ) ; if ( v != null ) { return ( $F52326 ) v [ NUM00 ] ; } } $F70316 ( st , path ) $F52326 urls = new URL $F49889 ( st ) ; for ( int i = NUM00 ; st . hasMoreTokens ( ) ; i ++ ) { urls [ i ] = new URL $F52332 ( st ) ; } synchronized ( pathToURLsCache ) { pathToURLsCache . put ( path , new Object [ ] { urls , new SoftReference ( path ) } ) ; } return urls ; }
private void addFinal $F22194 ( stacks ) { $F131 input = new Object [ inputSize ] , output = new Object [ outputSize ] ; for ( $F1139 ( i , stacks ) ) { if ( i < inputSize ) $F15086 ( input , i , stacks ) else if ( ! ( i - inputSize > outputSize ) ) { output [ i - inputSize ] = stacks [ i ] ; } else $F11389 } addRecipe ( input , output ) ; }
protected void fireConnectionClosed $F72 { ConnectionEvent evt = new ConnectionEvent ( this ) ; for ( ConnectionEventListener listener : connectionEventListeners ) { listener . connectionClosed ( evt ) ; } }
public static void putIntVolatile ( Object obj , long off , int val ) { UNSAFE . putIntVolatile ( obj , off , val ) ; }
NumberStrategy ( final int field ) $F6988 ( this , field )
public static URI createUriFromServerSet ( Set $F64087 serverInetSet , String path , String protocol ) throws URISyntaxException { InetSocketAddress inetSocketAddress = ServiceUtils . selectRandomItem ( serverInetSet ) ; String address = inetSocketAddress . getHostString ( ) ; $F287270 ( port , inetSocketAddress ) URI uri = new URI ( protocol , null , address , port , path , null , null ) ; return uri ; }
public PlotNavigator ( Plot plot , String ... axesNames ) $F254297 ( this , plot , Arrays , axesNames )
$F25545 ( i , count , buf , newbuf , mPool , System )
public void addColumn ( Class classType , boolean readOnly , String header ) { m_modelHeaderClass . add ( classType ) ; setColumnReadOnly ( $F175208 ( m_modelHeaderClass , readOnly ) ) ; addColumn ( header ) ; WListItemRenderer renderer = ( WListItemRenderer ) getItemRenderer ( ) ; renderer . setColumnClass ( ( renderer . getNoColumns ( ) - NUM00 ) , classType ) ; $F665 }
PointComparator ( int dimension ) $F6988 ( this , dimension )
public static void addElement ( Document doc , Element rootElement , String elementName , String typeIn , String isArrayIn , String partitionerIn ) { $F8382 ( element , doc ) rootElement . appendChild ( element ) ; $F8382 ( name , doc ) $F5849 ( name , doc , elementName ) element . appendChild ( name ) ; $F8382 ( type , doc ) $F5849 ( type , doc , typeIn ) element . appendChild ( type ) ; if $F3057 ( isArrayIn ) { element . appendChild ( doc . createElement ( NUM00 ) ) ; } if ( partitionerIn != null ) { $F8382 ( partitioner , doc ) $F5849 ( partitioner , doc , partitionerIn ) element . appendChild ( partitioner ) ; } }
public void flushBuffer $F72 throws IOException { if ( count > NUM00 ) $F139965 ( m_os , m_outputBytes , count ) }
public void addFirst ( Character c ) $F94311 ( addFirst , c )
public final void addInstanceOf ( String className ) { Reject . ifNull ( className ) ; $F9652 ( value , className ) if $F129995 ( value , CLASS_RE ) $F29526 ( value ) instanceOfInterfaces . add ( value ) ; }
$F1 public int read $F24576 ( b , off , len ) throws IOException { $F896 ( b ) if ( len < NUM00 || off < NUM00 || ( off + len ) > b . length ) { throw new IndexOutOfBoundsException ( $F130320 ( b , off ) + len ) ; } int read = NUM00 ; $F14826 ( len ) while ( len > NUM00 ) { if $F5720 ( encoderOut ) { int c = Math . min ( encoderOut . remaining ( ) , len ) ; encoderOut . get ( b , off , c ) ; off += c ; len -= c ; read += c ; } else { fillBuffer ( ) ; if ( endOfInput && ! encoderOut . hasRemaining ( ) ) $F5153 } } return read == NUM00 && endOfInput ? - NUM00 : read ; }
public boolean isDisplayedExpectingComponents $F72 { boolean result = _BOOL ; if ( conditions . isConditionMet ( visibilityOf ( window ) ) ) { if $F2979 ( components ) { closeButton . click ( ) ; } else { result = _BOOL ; } } return result ; }
private void processRunStartedTag ( String identifier ) { $F26605 ( numTestsPattern , Pattern ) $F1150 ( numTests , numTestsPattern , identifier ) if $F281 ( numTests ) { try { $F13291 ( mNumTestsExpected , Integer , numTests ) } catch ( NumberFormatException e ) { Log . e ( LOG_TAG , $F26623 ( numTests ) ) ; } } if ( mNumTestsExpected > NUM00 ) { reportTestRunStarted ( ) ; mNumTestsRun = NUM00 ; mTestRunInProgress = _BOOL ; } }
public StyledString insert ( char ch , int offset ) throws StringIndexOutOfBoundsException { if ( offset < NUM00 || offset > builder . length ( ) ) { throw new StringIndexOutOfBoundsException ( NUM00 + offset + NUM00 ) ; } builder . insert ( offset , ch ) ; return this ; }
public void addRoot ( ProtoElement root ) $F207 ( roots , root )
public void expandToObjectAndSelect ( Object elementOrTreePath , int level ) { $F84963 ( checkBusy ) Object parent = getParentElement ( elementOrTreePath ) ; if ( ( ( parent != null ) && getExpandedState ( parent ) ) || isRootElement ( elementOrTreePath ) ) { Widget w = internalGetWidgetToSelect ( elementOrTreePath ) ; if ( null != w ) { $F48425 ( selectionList ) selectionList . add ( w ) ; setSelection ( selectionList ) ; $F49400 ( objectToSelect ) } else $F24242 ( objectToSelect , elementOrTreePath ) } else { objectToSelect . set ( elementOrTreePath ) ; $F6689 objectsToExpand = createObjectList ( parent , $F203 ) ; if $F5973 ( objectsToExpand ) { objectsToBeExpanded . addAll ( objectsToExpand ) ; Widget w = internalExpand ( elementOrTreePath , _BOOL ) ; $F38251 ( w , internalExpandToLevel , level ) } else { Widget w = internalGetWidgetToSelect ( elementOrTreePath ) ; if ( null != w ) { $F48425 ( selectionList ) selectionList . add ( w ) ; setSelection ( selectionList ) ; $F49400 ( objectToSelect ) } } } }
public void appendCell ( float value ) $F45719 ( appendCell , String , value )
public SVNChangeSetCollector ( ISynchronizePageConfiguration configuration ) { super ( configuration ) ; }
public void ensureMaxSize $F39830 ( maxWidth , maxHeight , keepProportions ) { $F2049 ( width , canvas ) $F2047 ( height , canvas ) if ( keepProportions ) { if ( width > height ) { if ( width > maxWidth ) { height = Math . round ( height *= maxWidth / ( double ) width ) ; width = maxWidth ; } } else { if ( height > maxHeight ) { width = Math . round ( width *= maxHeight / ( double ) height ) ; height = maxHeight ; } } } else { $F16700 ( width , Math , maxWidth ) $F16700 ( height , Math , maxHeight ) } resize ( width , height ) ; }
public static boolean isNormalized ( CharSequence src , java . text . Normalizer . Form form , int option ) { return NormalizerBase . isNormalized ( src . toString ( ) , form , option ) ; }
$F1 public String toString ( boolean freq ) { $F280 ( result ) result . append ( m_attribute . name ( ) + NUM00 ) ; switch ( m_comparison ) { $F20819 ( EQUAL , result ) $F20819 ( LESS_THAN_OR_EQUAL_TO , result ) $F20819 ( GREATER_THAN , result ) $F2448 } result . append ( NUM00 + Utils . doubleToString ( m_splitPoint , NUM00 ) ) ; if ( freq ) $F11031 ( result , m_frequency ) $F92 ( result ) }
public static String unescapeSom ( String s ) { $F1384 ( idx , s ) $F12655 ( idx , s ) $F83 ( sb ) int last = NUM00 ; while ( idx >= NUM00 ) { $F13037 ( sb , s , last , idx ) last = idx + NUM00 ; $F101462 ( idx , s ) } $F13047 ( sb , s , last ) $F92 ( sb ) }
void saveAsync ( ColumnEntity entity , Duration ttl , Consumer < ColumnEntity > callBack ) throws ExecuteAsyncQueryException , UnsupportedOperationException ;
private static CopyState readCopyState ( DataInput in ) throws IOException { $F96 infosBytes = new byte [ in . readVInt ( ) ] ; in . readBytes ( infosBytes , NUM00 , infosBytes . length ) ; long gen = in . readVLong ( ) ; long version = in . readVLong ( ) ; Map < String , FileMetaData > files = CopyFilesHandler . readFilesMetaData ( in ) ; int count = in . readVInt ( ) ; $F13750 ( completedMergeFiles ) for ( $F119 ( i , count ) ) { completedMergeFiles . add ( in . readString ( ) ) ; } long primaryGen = in . readVLong ( ) ; return new CopyState ( files , version , gen , infosBytes , completedMergeFiles , primaryGen , null ) ; }
private void beforeName $F72 throws IOException { JsonScope context = peek ( ) ; if ( context == JsonScope . NONEMPTY_OBJECT ) $F12032 ( out ) else if ( context != JsonScope . EMPTY_OBJECT ) $F1155 ( stack ) newline ( ) ; replaceTop ( JsonScope . DANGLING_NAME ) ; }
$F1230 public void redeem $F2236 ( tokenNumber , service ) { final Token token = tokenRepository . findByTokenNumberAndService ( tokenNumber , service ) ; if ( token == null ) throw new ApplicationRuntimeException ( NUM00 + tokenNumber + NUM00 ) ; redeem ( token ) ; }
public int lightenColor ( int color , float factor ) { float r = Color . red ( color ) * factor ; float g = Color . green ( color ) * factor ; float b = Color . blue ( color ) * factor ; int ir = Math . min ( NUM00 , ( int ) r ) ; int ig = Math . min ( NUM00 , ( int ) g ) ; int ib = Math . min ( NUM00 , ( int ) b ) ; int ia = Color . alpha ( color ) ; return ( Color . argb ( ia , ir , ig , ib ) ) ; }
private static String toDatabaseString ( final OperandSize size ) { switch ( size ) { case BYTE : $F1278 case WORD : $F1278 case DWORD : $F1278 case QWORD : $F1278 case OWORD : $F1278 case ADDRESS : $F1278 $F1267 throw new IllegalArgumentException $F10797 ( String , size ) ; } }
static String fileNameOfClass ( final String className , String typeSuffix ) { return $F2934 ( className ) + NUM00 + typeSuffix ; }
public void writePv ( ProcessVar pv , int recursiveDepth ) { writePv ( pv , recursiveDepth , _BOOL ) ; }
public synchronized void add ( double minValue , double maxValue ) $F30090 ( super , minValue , mMaxValues , maxValue )
private static void assertQualNS ( String qualNS ) throws XMPException { if $F6036 ( qualNS ) { throw new XMPException ( NUM00 , XMPError . BADSCHEMA ) ; } }
public static StringBuilder formatTo ( StringBuilder buf , $F5415 d , String sep , NumberFormat nf ) { $F50085 ( d , buf ) $F50086 ( d , buf ) buf . append ( nf . format ( d [ NUM00 ] ) ) ; for ( $F1139 ( i , d ) ) { buf . append ( sep ) ; buf . append ( nf . format ( d [ i ] ) ) ; } return buf ; }
public static void pack ( $F2027 n , String s ) { $F169226 ( i , n ) $F40997 ( idx , n ) for ( $F186068 ( i , s ) ) { n [ idx -- ] = s . charAt ( i ) - NUM00 ; } }
public int removeViewpoints $F23416 ( indices ) { for ( int i = indices . length - NUM00 ; i >= NUM00 ; -- i ) viewpointList . remove ( indices [ i ] ) ; viewpointIndex = indices [ NUM00 ] - NUM00 ; if $F10471 ( viewpointList ) $F44867 ( viewpointIndex ) else if ( viewpointIndex < NUM00 ) $F114853 ( viewpointIndex , viewpointList ) return ( viewpointIndex ) ; }
$F134537 ( mOnPageChangeListeners )
private void updateColor $F72 { try { BreakpointConditionParser . evaluate ( inputField . getText ( ) ) ; $F301047 ( inputField , Color ) } catch ( final InvalidFormulaException e ) { inputField . setBackground ( Color . RED ) ; } }
public void removeIgnoredView ( View v ) $F106 ( ignoredViews , v )
$F99425 ( os , writeInt , CACHE_MAGIC , writeString , key , etag , writeLong , serverDate , lastModified , ttl , softTtl , writeStringStringMap , responseHeaders , _BOOL , VinciLog , e )
private static boolean ensureCurrent ( LeasedResource resource ) { return resource . getExpiration ( ) > SystemTime . timeMillis ( ) ; }
public static int maxFill ( final int n , final float f ) { return Math . min ( $F29907 ( Math , n , f ) , n - NUM00 ) ; }
$F244332 ( mCategories , mTitles , mValues )
public void toggleSectionSelected ( int sectionIndex ) { setSectionSelected ( sectionIndex , ! isSectionSelected ( sectionIndex ) ) ; }
public String combine $F72133 ( files , outFile ) throws Exception { $F8728 ( cmd ) cmd . add ( soxBin ) ; $F42002 ( file , files , cmd ) cmd . add ( outFile ) ; int rc = execSox ( cmd , callback ) ; if ( rc != NUM00 ) $F216876 ( rc ) return outFile ; }
void stopScrollingInstance $F72 { if $F935 ( log , PlatformLogger ) $F18853 ( log , this ) $F5191 ( i_scroller ) }
$F179160 protected void newInternalMinute $F72 { double origCurrent = mCurrentIntensity ; int origState = mState ; int steps = getNumberOfSteps ( ) ; if ( ( mTransitionDuration > NUM00 ) && ( steps > NUM00 ) ) { double stepsPerMinute = steps / mTransitionDuration ; double stepSize = NUM00 / ( double ) steps ; double intensityDiffPerMinute = stepSize * stepsPerMinute ; if ( Math . abs ( mCurrentIntensity - mTransitionTargetIntensity ) != NUM00 ) { $F197555 ( log , mTransitionTargetIntensity , mCurrentIntensity ) if ( mTransitionTargetIntensity > mCurrentIntensity ) { mCurrentIntensity = mCurrentIntensity + intensityDiffPerMinute ; if ( mCurrentIntensity >= mTransitionTargetIntensity ) { mCurrentIntensity = mTransitionTargetIntensity ; if ( mCurrentIntensity >= getMaxIntensity ( ) ) { mState = ON ; } else { mState = INTERMEDIATE ; } } } else { mCurrentIntensity = mCurrentIntensity - intensityDiffPerMinute ; if ( mCurrentIntensity <= mTransitionTargetIntensity ) { mCurrentIntensity = mTransitionTargetIntensity ; if ( mCurrentIntensity <= getMinIntensity ( ) ) { mState = OFF ; } else { mState = INTERMEDIATE ; } } } sendIntensity ( mCurrentIntensity ) ; $F197555 ( log , mTransitionTargetIntensity , mCurrentIntensity ) } } if ( origCurrent != mCurrentIntensity ) { firePropertyChange ( NUM00 , Double . valueOf ( origCurrent ) , Double . valueOf ( mCurrentIntensity ) ) ; $F197555 ( log , origCurrent , mCurrentIntensity ) } if ( origState != mState ) { firePropertyChange ( NUM00 , Integer . valueOf ( origState ) , Integer . valueOf ( mState ) ) ; $F197555 ( log , origCurrent , mCurrentIntensity ) } }
public void execute2 ( KahanObject in1 , double in2 ) { if ( Double . isInfinite ( in1 . _sum ) || Double . isInfinite ( in2 ) ) { in1 . set ( Double . isInfinite ( in2 ) ? in2 : in1 . _sum , NUM00 ) ; $F665 } double correction = in2 + in1 . _correction ; double sum = in1 . _sum + correction ; in1 . set ( sum , correction - ( sum - in1 . _sum ) ) ; }
public static Response newFixedLengthResponse ( String msg ) { return newFixedLengthResponse ( Status . OK , NanoHTTPD . MIME_HTML , msg ) ; }
$F1 public XMLEvent peek $F72 throws XMLStreamException { $F37599 ( log , Level ) if $F931 ( hasNext ) { throw new XMLStreamException $F580 ; } log . log ( Level . FINE , NUM00 , nextEvent ) ; return nextEvent ; }
public static String replaceEndPoint ( String url , String endPoint ) { return endPoint + url . replaceFirst ( DEFAULT_ENDPOINT , NUM00 ) ; }
public static double length $F7635 ( x , y , z ) { $F100238 ( Math , x , y , z ) }
private void makeOkPath $F72 { $F2268 ( path1 ) $F23200 ( w2 , getMeasuredWidth ) $F23200 ( h2 , getMeasuredHeight ) double a = $F77590 ( Math ) * getRadius ( ) ; double c = Math . sin ( Math . toRadians ( NUM00 ) ) * getRadius ( ) ; double l = $F77590 ( Math ) * NUM00 * a ; double b = Math . sin ( Math . toRadians ( NUM00 ) ) * l ; double m = $F77590 ( Math ) * l ; path1 . moveTo ( $F64550 ( w2 , a ) , $F64550 ( h2 , c ) ) ; path1 . lineTo ( ( float ) ( w2 - a + m ) , ( float ) ( h2 - c + Math . sin ( Math . toRadians ( NUM00 ) ) * l ) ) ; path1 . lineTo ( ( float ) ( w2 + a ) , $F64550 ( h2 , c ) ) ; pathMeasure1 . setPath ( path1 , _BOOL ) ; $F249676 ( mMarkOklength , pathMeasure1 ) }
private static void _trustAllHttpsCertificates $F72 { SSLContext context ; if ( _trustManagers == null ) { _trustManagers = new TrustManager [ ] { new FakeX509TrustManager $F72 } ; } try { $F6161 ( context , SSLContext ) context . init ( null , _trustManagers , $F5607 ) ; } catch ( GeneralSecurityException gse ) { throw new IllegalStateException $F1783 ( gse ) ; } HttpsURLConnection . setDefaultSSLSocketFactory ( context . getSocketFactory ( ) ) ; }
public void addMemberValue ( String name , MemberValue value ) { Pair p = new Pair $F72 ; p . name = pool . addUtf8Info ( name ) ; p . value = value ; if ( members == null ) $F170950 ( members ) members . put ( name , p ) ; }
public $F9737 toString $F72 $F4915 ( toString , value )
protected $F3803 addWhitespace $F24643 ( list ) { $F24645 ( whitespaceList ) $F34103 ( value , list , whitespaceList , addWhitespace ) return whitespaceList ; }
public static String computeQualifiedWidgetTypeName ( Node widgetNode ) { if ( widgetNode . getNodeType ( ) != Node . ELEMENT_NODE ) $F1337 $F40269 ( typeName , widgetNode ) if ( $F1276 ( typeName ) || Character . isLowerCase ( typeName . charAt ( NUM00 ) ) ) $F1337 String packageName = UiBinderUtilities . getPackageName ( widgetNode . getNamespaceURI ( ) ) ; return packageName != null ? JavaUtilities . getQualifiedTypeName ( typeName , packageName ) : null ; }
private static boolean processFtypAtom ( ParsableByteArray atomData ) { atomData . setPosition ( Atom . HEADER_SIZE ) ; $F5952 ( majorBrand , atomData ) $F3627 ( majorBrand , BRAND_QUICKTIME , _BOOL ) $F11231 ( atomData ) while ( atomData . bytesLeft ( ) > NUM00 ) { if ( atomData . readInt ( ) == BRAND_QUICKTIME ) { return _BOOL ; } } return _BOOL ; }
public $F2539 parse ( final String str , char separator ) { if ( str == null ) { return $F12080 ; } return parse ( str . toCharArray ( ) , separator ) ; }
$F3594 ( oredCriteria , orderByClause , distinct , _BOOL )
public String delete ( String url , final int expectedStatusCode ) { return delete ( url , $F100462 ( Collections ) , expectedStatusCode ) ; }
protected void runningSum ( Set < Map . Entry $F93656 > c , double value , $F1986 sums ) { double offset = CONST - Math . log ( m_Width ) ; double logFactor = Math . log ( m_Threshold ) - Math . log ( NUM00 - m_Threshold ) ; double logSumOfWeights = Math . log ( m_SumOfWeights ) ; Iterator < Map . Entry $F93656 > itr = c . iterator ( ) ; while $F2921 ( itr ) { Map . Entry $F93656 entry = itr . next ( ) ; if ( entry . getValue ( ) > NUM00 ) { double diff = ( entry . getKey ( ) - value ) / m_Width ; double logDensity = offset - NUM00 * diff * diff ; double logWeight = Math . log ( entry . getValue ( ) ) ; sums [ NUM00 ] = logOfSum ( sums [ NUM00 ] , logWeight + logDensity ) ; sums [ NUM00 ] = logOfSum ( sums [ NUM00 ] , logWeight ) ; if ( logDensity + logSumOfWeights < logOfSum ( logFactor + sums [ NUM00 ] , logDensity + sums [ NUM00 ] ) ) $F5153 } } }
$F1 public CategoricalTable copy $F72 { Map < Value , Double > newTable = new HashMap < Value , Double > $F72 ; for ( Value v : table . keySet ( ) ) $F103853 ( newTable , v , table ) return new CategoricalTable ( variable , newTable ) ; }
public Configuration subConfig ( String prefix , String keyPrefix ) { Configuration $F73973 ( sub ) ; addToSubConf ( sub , $F20 ( prefix ) ? prefix + NUM00 + keyPrefix : keyPrefix ) ; return sub ; }
public $F2539 mapNameToDisplayName $F32029 ( names ) throws $F16995 { final $F2539 $F72141 ( map , names ) ; for ( String name : names ) { if ( smsConsoleServiceConfig . isServiceVisible ( name ) ) { final ServiceSchemaManager serviceSchemaManager = serviceSchemaManagerFactory . build ( name ) ; String displayName = getLocalizedServiceName ( serviceSchemaManager , name ) ; String resourceName = serviceSchemaManager . getResourceName ( ) ; if ( ! name . equals ( displayName ) && ! StringUtils . isBlank ( resourceName ) ) $F1717 ( map , resourceName , displayName ) } } return map ; }
public IntColumn $F14337 ( nrows , capacity , defaultValue ) { super ( $F37010 , new Integer ( defaultValue ) ) ; $F49020 ( capacity , nrows ) $F3936 ( m_values , capacity ) Arrays . fill ( m_values , defaultValue ) ; m_size = nrows ; }
$F4562 ( view , deltaX , scrollX , deltaY , scrollY , scrollRange , fuzzyThreshold , scaleFactor , isTouchEvent , deltaValue , currentScrollValue , scrollValue , HORIZONTAL , VERTICAL , mode , newScrollValue , PullToRefreshBase , Log , LOG_TAG , State , Math )
$F1 public String toString $F72 { return NUM00 + getId ( ) ; }
public static final boolean executePotentialWork ( final Object data , final ImageView imageView ) { final BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask ( imageView ) ; if ( bitmapWorkerTask != null ) { final Object bitmapData = bitmapWorkerTask . mKey ; if $F87129 ( bitmapData , data ) $F11437 ( bitmapWorkerTask , _BOOL ) else { return _BOOL ; } } return _BOOL ; }
public static void queueBitmap ( String key , Bitmap bmp ) $F1717 ( mBitmapQueue , key , bmp )
private static int analyze ( Compiler compiler , int stepOpCodePos , int stepIndex ) throws $F1872 { int stepType ; int stepCount = NUM00 ; int analysisResult = NUM00 ; while ( OpCodes . ENDOP != ( stepType = compiler . getOp ( stepOpCodePos ) ) ) { stepCount ++ ; boolean predAnalysis = analyzePredicate ( compiler , stepOpCodePos , stepType ) ; if ( predAnalysis ) analysisResult |= BIT_PREDICATE ; switch ( stepType ) { case OpCodes . OP_VARIABLE : case OpCodes . OP_EXTFUNCTION : case OpCodes . OP_FUNCTION : case OpCodes . OP_GROUP : analysisResult |= BIT_FILTER ; $F597 case OpCodes . FROM_ROOT : analysisResult |= BIT_ROOT ; $F597 case OpCodes . FROM_ANCESTORS : analysisResult |= BIT_ANCESTOR ; $F597 case OpCodes . FROM_ANCESTORS_OR_SELF : analysisResult |= BIT_ANCESTOR_OR_SELF ; $F597 case OpCodes . FROM_ATTRIBUTES : analysisResult |= BIT_ATTRIBUTE ; $F597 case OpCodes . FROM_NAMESPACE : analysisResult |= BIT_NAMESPACE ; $F597 case OpCodes . FROM_CHILDREN : analysisResult |= BIT_CHILD ; $F597 case OpCodes . FROM_DESCENDANTS : analysisResult |= BIT_DESCENDANT ; $F597 case OpCodes . FROM_DESCENDANTS_OR_SELF : if ( NUM00 == stepCount && BIT_ROOT == analysisResult ) { analysisResult |= BIT_ANY_DESCENDANT_FROM_ROOT ; } analysisResult |= BIT_DESCENDANT_OR_SELF ; $F597 case OpCodes . FROM_FOLLOWING : analysisResult |= BIT_FOLLOWING ; $F597 case OpCodes . FROM_FOLLOWING_SIBLINGS : analysisResult |= BIT_FOLLOWING_SIBLING ; $F597 case OpCodes . FROM_PRECEDING : analysisResult |= BIT_PRECEDING ; $F597 case OpCodes . FROM_PRECEDING_SIBLINGS : analysisResult |= BIT_PRECEDING_SIBLING ; $F597 case OpCodes . FROM_PARENT : analysisResult |= BIT_PARENT ; $F597 case OpCodes . FROM_SELF : analysisResult |= BIT_SELF ; $F597 case OpCodes . MATCH_ATTRIBUTE : analysisResult |= ( BIT_MATCH_PATTERN | BIT_ATTRIBUTE ) ; $F597 case OpCodes . MATCH_ANY_ANCESTOR : analysisResult |= ( BIT_MATCH_PATTERN | BIT_ANCESTOR ) ; $F597 case OpCodes . MATCH_IMMEDIATE_ANCESTOR : analysisResult |= ( BIT_MATCH_PATTERN | BIT_PARENT ) ; $F597 $F1267 throw new RuntimeException ( XSLMessages . createXPATHMessage ( XPATHErrorResources . ER_NULL_ERROR_HANDLER , $F19685 ( Integer , stepType ) ) ) ; } if ( OpCodes . NODETYPE_NODE == compiler . getOp ( stepOpCodePos + NUM00 ) ) { analysisResult |= BIT_NODETEST_ANY ; } stepOpCodePos = compiler . getNextStepPos ( stepOpCodePos ) ; $F7995 ( stepOpCodePos ) } analysisResult |= ( stepCount & BITS_COUNT ) ; return analysisResult ; }
public void addListener ( AfterServerStartListener listener ) $F207 ( _afterStartListeners , listener )
$F58902 ( name , threadId , mFinished , mMarkers , SystemClock )
private static $F39277 generateValidPreviewSizeList ( Camera camera ) { $F39278 parameters = camera . getParameters ( ) ; $F39283 supportedPreviewSizes = parameters . getSupportedPreviewSizes ( ) ; $F39283 supportedPictureSizes = parameters . getSupportedPictureSizes ( ) ; $F39277 $F204 ( validPreviewSizes ) ; for ( $F39290 ( previewSize , supportedPreviewSizes ) ) { $F39296 ( previewAspectRatio , previewSize ) for ( $F39290 ( pictureSize , supportedPictureSizes ) ) { $F39296 ( pictureAspectRatio , pictureSize ) if $F39297 ( Math , previewAspectRatio , pictureAspectRatio , ASPECT_RATIO_TOLERANCE ) { validPreviewSizes . add ( new SizePair ( previewSize , pictureSize ) ) ; $F597 } } } if $F10471 ( validPreviewSizes ) { $F6173 ( Log , TAG ) for ( $F39290 ( previewSize , supportedPreviewSizes ) ) { validPreviewSizes . add ( new SizePair ( previewSize , null ) ) ; } } return validPreviewSizes ; }
private int makeAvailable $F72 throws IOException { if ( pos != - NUM00 ) $F1083 total += tail - head - pad ; System . arraycopy ( buffer , tail - pad , buffer , NUM00 , pad ) ; head = NUM00 ; tail = pad ; for ( $F589 ) { $F230162 ( bytesRead , input , buffer , tail , bufSize ) if ( bytesRead == - NUM00 ) { final String msg = NUM00 ; throw new FileUploadException ( MalformedStreamException , msg ) ; } tail += bytesRead ; findSeparator ( ) ; int av = available ( ) ; if ( av > NUM00 || pos != - NUM00 ) { return av ; } } }
public RelationNotification ( String notifType , Object sourceObj , long sequence , long timeStamp , String message , String id , String typeName , ObjectName objectName , List $F50005 unregMBeanList ) throws IllegalArgumentException { super ( notifType , sourceObj , sequence , timeStamp , message ) ; if ( ! isValidBasicStrict ( notifType , sourceObj , id , typeName ) || ! isValidCreate ( notifType ) ) $F825 relationId = id ; relationTypeName = typeName ; relationObjName = safeGetObjectName ( objectName ) ; unregisterMBeanList = safeGetObjectNameList ( unregMBeanList ) ; }
public void addDataToStore $F22194 ( row ) throws CarbonDataWriterException { dataRows . add ( row ) ; this . entryCount ++ ; if ( this . entryCount == this . blockletSize ) { try { $F90610 ( semaphore ) producerExecutorServiceTaskList . add ( producerExecutorService . submit ( new Producer ( blockletDataHolder , dataRows , ++ writerTaskSequenceCounter ) ) ) ; $F5224 ( blockletProcessingCount ) processedDataCount += entryCount ; $F556 ( LOGGER , processedDataCount ) dataRows = new $F201 ( this . blockletSize ) ; this . entryCount = NUM00 ; } catch ( InterruptedException e ) { LOGGER . error ( e , e . getMessage ( ) ) ; $F33828 ( e ) } } }
public boolean localHostOrDomainIs ( String host , String domain ) $F121470 ( domain , host )
protected double entropy $F219838 ( dataZs , dataWs ) { double entropy = NUM00 ; int numInstances = dataZs . length ; for ( $F119 ( j , m_numClasses ) ) { double m = NUM00 ; double sum = NUM00 ; for ( $F119 ( i , numInstances ) ) { m += dataZs [ i ] [ j ] * dataWs [ i ] [ j ] ; sum += dataWs [ i ] [ j ] ; } m /= sum ; for ( $F119 ( i , numInstances ) ) { entropy += dataWs [ i ] [ j ] * Math . pow ( dataZs [ i ] [ j ] - m , NUM00 ) ; } } return entropy ; }
protected void writeDistribution ( Parameter parameter , boolean isRef , XMLWriter writer ) { switch ( parameter . priorType ) { case UNIFORM_PRIOR : String id = parameter . taxaId + NUM00 ; if ( isRef ) { writer . writeIDref ( UniformDistributionModelParser . UNIFORM_DISTRIBUTION_MODEL , id ) ; } else { writer . writeOpenTag ( UniformDistributionModelParser . UNIFORM_DISTRIBUTION_MODEL , new Attribute [ ] { new $F406208 ( XMLParser . ID , id ) } ) ; writer . writeOpenTag ( UniformDistributionModelParser . LOWER ) ; writer . writeText ( Double . toString ( parameter . uniformLower ) ) ; writer . writeCloseTag ( UniformDistributionModelParser . LOWER ) ; writer . writeOpenTag ( UniformDistributionModelParser . UPPER ) ; writer . writeText ( Double . toString ( parameter . uniformUpper ) ) ; writer . writeCloseTag ( UniformDistributionModelParser . UPPER ) ; writer . writeCloseTag ( UniformDistributionModelParser . UNIFORM_DISTRIBUTION_MODEL ) ; } $F597 case EXPONENTIAL_PRIOR : writer . writeOpenTag ( ExponentialDistributionModel . EXPONENTIAL_DISTRIBUTION_MODEL ) ; writer . writeOpenTag ( DistributionModelParser . MEAN ) ; writer . writeText ( Double . toString ( parameter . mean ) ) ; writer . writeCloseTag ( DistributionModelParser . MEAN ) ; writer . writeOpenTag ( DistributionModelParser . OFFSET ) ; writer . writeText ( Double . toString ( parameter . offset ) ) ; writer . writeCloseTag ( DistributionModelParser . OFFSET ) ; writer . writeCloseTag ( ExponentialDistributionModel . EXPONENTIAL_DISTRIBUTION_MODEL ) ; $F597 case NORMAL_PRIOR : writer . writeOpenTag ( NormalDistributionModelParser . NORMAL_DISTRIBUTION_MODEL ) ; writer . writeOpenTag ( NormalDistributionModelParser . MEAN ) ; writer . writeText ( Double . toString ( parameter . mean ) ) ; writer . writeCloseTag ( NormalDistributionModelParser . MEAN ) ; writer . writeOpenTag ( NormalDistributionModelParser . STDEV ) ; writer . writeText ( Double . toString ( parameter . stdev ) ) ; writer . writeCloseTag ( NormalDistributionModelParser . STDEV ) ; writer . writeCloseTag ( NormalDistributionModelParser . NORMAL_DISTRIBUTION_MODEL ) ; $F597 case LOGNORMAL_PRIOR : writer . writeOpenTag ( LogNormalDistributionModelParser . LOGNORMAL_DISTRIBUTION_MODEL , new Attribute [ ] { new Attribute . Default $F19437 ( LogNormalDistributionModelParser . MEAN_IN_REAL_SPACE , parameter . isMeanInRealSpace ( ) ) , new Attribute . Default $F19437 ( LogNormalDistributionModelParser . STDEV_IN_REAL_SPACE , parameter . isMeanInRealSpace ( ) ) } ) ; writer . writeOpenTag ( LogNormalDistributionModelParser . MEAN ) ; writer . writeText ( Double . toString ( parameter . mean ) ) ; writer . writeCloseTag ( LogNormalDistributionModelParser . MEAN ) ; writer . writeOpenTag ( LogNormalDistributionModelParser . STDEV ) ; writer . writeText ( Double . toString ( parameter . stdev ) ) ; writer . writeCloseTag ( LogNormalDistributionModelParser . STDEV ) ; writer . writeOpenTag ( LogNormalDistributionModelParser . OFFSET ) ; writer . writeText ( Double . toString ( parameter . offset ) ) ; writer . writeCloseTag ( LogNormalDistributionModelParser . OFFSET ) ; writer . writeCloseTag ( LogNormalDistributionModelParser . LOGNORMAL_DISTRIBUTION_MODEL ) ; $F597 case GAMMA_PRIOR : writer . writeOpenTag ( GammaDistributionModel . GAMMA_DISTRIBUTION_MODEL ) ; writer . writeOpenTag ( DistributionModelParser . SHAPE ) ; writer . writeText ( Double . toString ( parameter . shape ) ) ; writer . writeCloseTag ( DistributionModelParser . SHAPE ) ; writer . writeOpenTag ( DistributionModelParser . SCALE ) ; writer . writeText ( Double . toString ( parameter . scale ) ) ; writer . writeCloseTag ( DistributionModelParser . SCALE ) ; writer . writeOpenTag ( DistributionModelParser . OFFSET ) ; writer . writeText ( Double . toString ( parameter . offset ) ) ; writer . writeCloseTag ( DistributionModelParser . OFFSET ) ; writer . writeCloseTag ( GammaDistributionModel . GAMMA_DISTRIBUTION_MODEL ) ; $F597 $F1267 throw new IllegalArgumentException $F47919 ( parameter ) ; } }
public void saveWorkingInstancesToFileQ $F72 { if ( m_IOThread == null ) { m_FileChooser . setCapabilitiesFilter ( m_FilterEditor . getCapabilitiesFilter ( ) ) ; m_FileChooser . setAcceptAllFileFilterUsed ( _BOOL ) ; int returnVal = m_FileChooser . showSaveDialog ( this ) ; if ( returnVal == JFileChooser . APPROVE_OPTION ) { Instances inst = new Instances ( m_Instances ) ; inst . setClassIndex ( m_AttVisualizePanel . getColoringIndex ( ) ) ; saveInstancesToFile ( m_FileChooser . getSaver ( ) , inst ) ; } FileFilter temp = m_FileChooser . getFileFilter ( ) ; m_FileChooser . setAcceptAllFileFilterUsed ( _BOOL ) ; m_FileChooser . setFileFilter ( temp ) ; } else { JOptionPane . showMessageDialog ( this , NUM00 + NUM00 , NUM00 , JOptionPane . WARNING_MESSAGE ) ; } }
private void calculateColor ( int coord ) { coord = coord - mBarPointerHaloRadius ; if ( coord < NUM00 ) { coord = NUM00 ; } else $F8789 ( coord , mBarLength ) mColor = Color . HSVToColor ( Math . round ( mPosToOpacFactor * coord ) , mHSVColor ) ; if ( Color . alpha ( mColor ) > NUM00 ) { mColor = Color . HSVToColor ( mHSVColor ) ; } else if ( Color . alpha ( mColor ) < NUM00 ) { mColor = Color . TRANSPARENT ; } }
public int read $F233176 ( off , len ) throws IOException { if ( ( off < NUM00 ) || ( off > cbuf . length ) || ( len < NUM00 ) || ( ( off + len ) > cbuf . length ) || ( ( off + len ) < NUM00 ) ) $F21203 $F94561 ( len ) $F80680 ( next , length ) $F55158 ( n , Math , length , next , len ) $F88042 ( text , next , n , cbuf , off ) next += n ; return n ; }
private boolean adjustIndent $F72 { AlignmentImpl alignment = CoreFormatterUtil . getAlignment ( myCurrentBlock ) ; WhiteSpace whiteSpace = myCurrentBlock . getWhiteSpace ( ) ; if ( alignment == null || myAlignmentsToSkip . contains ( alignment ) ) { if ( whiteSpace . containsLineFeeds ( ) ) $F5795 ( adjustSpacingByIndentOffset ) else { whiteSpace . arrangeSpaces ( myCurrentBlock . getSpaceProperty ( ) ) ; } return _BOOL ; } BlockAlignmentProcessor alignmentProcessor = ALIGNMENT_PROCESSORS . get ( alignment . getAnchor ( ) ) ; if ( alignmentProcessor == null ) { LOG . error ( String . format ( NUM00 , alignment . getAnchor ( ) ) ) ; return _BOOL ; } BlockAlignmentProcessor . Context context = new BlockAlignmentProcessor . Context ( myDocument , alignment , myCurrentBlock , myAlignmentMappings , myBackwardShiftedAlignedBlocks , getIndentOptionsToUse ( myCurrentBlock , myDefaultIndentOption ) , myRightMargin ) ; BlockAlignmentProcessor . Result result = alignmentProcessor . applyAlignment ( context ) ; final LeafBlockWrapper offsetResponsibleBlock = alignment . getOffsetRespBlockBefore ( myCurrentBlock ) ; switch ( result ) { case TARGET_BLOCK_PROCESSED_NOT_ALIGNED : return _BOOL ; case TARGET_BLOCK_ALIGNED : storeAlignmentMapping ( ) ; return _BOOL ; case BACKWARD_BLOCK_ALIGNED : $F1933 ( offsetResponsibleBlock , _BOOL ) Set < LeafBlockWrapper > blocksCausedRealignment = new HashSet < LeafBlockWrapper > $F72 ; $F725 ( myBackwardShiftedAlignedBlocks ) myBackwardShiftedAlignedBlocks . put ( offsetResponsibleBlock , blocksCausedRealignment ) ; blocksCausedRealignment . add ( myCurrentBlock ) ; storeAlignmentMapping ( myCurrentBlock , offsetResponsibleBlock ) ; myCurrentBlock = offsetResponsibleBlock . getNextBlock ( ) ; onCurrentLineChanged ( ) ; return _BOOL ; case RECURSION_DETECTED : myCurrentBlock = offsetResponsibleBlock ; case UNABLE_TO_ALIGN_BACKWARD_BLOCK : myAlignmentsToSkip . add ( alignment ) ; return _BOOL ; $F1267 return _BOOL ; } }
$F1 public void appendCode ( Type declaringType , TypeTuple inputTypes , Type outputType , List $F30094 inputVars , StringBuilder b ) { b . append ( field . toCode ( declaringType , inputVars ) ) ; }
public ForwardPlanner ( DialogueSystem system ) $F6988 ( this , system )
private JButton addButton ( String text , Container container , float alignment ) { JButton button = new JButton ( text ) ; button . setAlignmentX ( alignment ) ; container . add ( button ) ; return button ; }
private boolean noMatchForTagInAttributes ( AttributeSet attr , $F24322 t , Object tagValue ) { if ( attr != null && attr . isDefined ( t ) ) { $F46163 ( newValue , attr , t ) if ( ( tagValue == null ) ? ( newValue == null ) : $F35166 ( newValue , tagValue ) ) { return _BOOL ; } } return _BOOL ; }
public String businessObjectDataKeyToString ( BusinessObjectDataKey businessObjectDataKey ) { $F1338 ( businessObjectDataKey ) return businessObjectDataKeyToString ( businessObjectDataKey . getNamespace ( ) , businessObjectDataKey . getBusinessObjectDefinitionName ( ) , businessObjectDataKey . getBusinessObjectFormatUsage ( ) , businessObjectDataKey . getBusinessObjectFormatFileType ( ) , businessObjectDataKey . getBusinessObjectFormatVersion ( ) , businessObjectDataKey . getPartitionValue ( ) , businessObjectDataKey . getSubPartitionValues ( ) , businessObjectDataKey . getBusinessObjectDataVersion ( ) ) ; }
public static boolean isValidIfd ( int ifdId ) { return ifdId == IfdId . TYPE_IFD_0 || ifdId == IfdId . TYPE_IFD_1 || ifdId == IfdId . TYPE_IFD_EXIF || ifdId == IfdId . TYPE_IFD_INTEROPERABILITY || ifdId == IfdId . TYPE_IFD_GPS ; }
private Usage createTalkUsage ( Context context ) { $F21525 ( talkUsage ) TypeToken < List < Usage > > token = new TypeToken < List < Usage > > $F90279 ; List < Usage > initTalkIO = JsonUtils . parseJsonFile ( context , NUM00 , token ) ; $F36986 ( talkUsage , initTalkIO ) return talkUsage ; }
$F5466 public GrCall enclosingCall ( String name , GdslMembersHolderConsumer consumer ) { final PsiElement place = consumer . getPlace ( ) ; $F1275 ( place ) GrCall call = PsiTreeUtil . getParentOfType ( place , GrCall . class , _BOOL ) ; $F1275 ( call ) while ( call != null && ! name . equals ( getInvokedMethodName ( call ) ) ) { call = PsiTreeUtil . getParentOfType ( call , GrCall . class , _BOOL ) ; } $F1275 ( call ) final GrArgumentList argumentList = call . getArgumentList ( ) ; if ( argumentList != null ) { for ( GrExpression arg : argumentList . getExpressionArguments ( ) ) { if ( arg instanceof GrClosableBlock && PsiTreeUtil . findCommonParent ( place , arg ) == arg ) { return call ; } } } if ( call instanceof GrMethodCallExpression ) { for ( GrExpression arg : call . getClosureArguments ( ) ) { if ( arg instanceof GrClosableBlock && PsiTreeUtil . findCommonParent ( place , arg ) == arg ) { return call ; } } } $F1274 }
public static void genOvfenvIsoImage ( String ovfenvPropKVStr , String isoFilePath ) { $F39526 ( bOvfenvPropKVStr , ovfenvPropKVStr ) String propFilePath = NUM00 ; $F1705 ( propFile , propFilePath ) try { FileUtils . writePlainFile ( propFilePath , bOvfenvPropKVStr ) ; } catch ( Exception e1 ) { $F1900 ( propFile ) $F10631 ( log , e1 ) $F4638 } try { $F1705 ( isoFile , isoFilePath ) $F806 genISOImageCommand = { GENISO_CMD , NUM00 , NUM00 , NUM00 , propFilePath , NUM00 , isoFilePath , NUM00 , NUM00 } ; Exec . Result result = Exec . sudo ( CMD_TIMEOUT , genISOImageCommand ) ; if ( ! result . exitedNormally ( ) || result . getExitValue ( ) != NUM00 ) { log . error ( NUM00 , result . getExitValue ( ) , result . getStdError ( ) ) ; $F4638 } } $F91522 ( e ) $F105993 ( propFile ) }
public static void createActionableEvent ( DbClient dbClient , EventUtils . EventCode eventCode , URI tenant , String name , String description , String warning , DataObject resource , $F28584 affectedResources , String approveMethod , $F131 approveParameters ) { createActionableEvent ( dbClient , eventCode , tenant , name , description , warning , resource , affectedResources , approveMethod , approveParameters , null , null ) ; }
public Rational ( ByteProvider byteProvider ) throws IOException { $F383576 ( MXFPropertyPopulator , byteProvider , this ) $F383576 ( MXFPropertyPopulator , byteProvider , this ) }
public synchronized void removeNotifications ( String type ) throws InstanceNotFoundException { $F24610 v = getNotificationIDs ( type ) ; if $F2979 ( v ) throw new InstanceNotFoundException $F580 ; for ( Integer i : v ) removeNotification ( i ) ; }
private void unifyViaAtom ( Atomic parentAtom ) { Atomic childAtom = getRuleConclusionAtom ( ) ; Query parent = parentAtom . getParentQuery ( ) ; $F2539 unifiers = childAtom . getUnifiers ( parentAtom ) ; head . unify ( unifiers ) ; body . unify ( unifiers ) ; $F2689 childFVs = body . getVarSet ( ) ; $F2689 parentBVs = parentAtom . getVarNames ( ) ; $F2689 parentVars = parent . getVarSet ( ) ; $F22620 ( parentBVs ) $F22620 ( childFVs ) }
static void addUuid ( SsfNode node , UUID uuid ) { node . set ( NUM00 , uuid . getMostSignificantBits ( ) ) ; node . set ( NUM00 , uuid . getLeastSignificantBits ( ) ) ; }
$F15683 ( listener , changingListeners )
public long objectFieldOffset ( Field field ) { if $F181753 ( Modifier , field ) $F825 return objectFieldOffset0 ( field ) ; }
private static $F7465 ( msg , startpos , count , len , idx , ch , isDigit )
abstract void toXML ( StringBuilder xml , int level ) ;
public void dispose $F72 { mRunButton . setSelected ( _BOOL ) ; $F355 ( super ) }
public FluxConcatArray $F4203 concatAdditionalSourceFirst ( $F40799 ( source ) ) { int n = array . length ; $F1431 $F40798 [ ] $F48543 ( newArray , n ) ; $F135 ( System , array , newArray , n ) newArray [ NUM00 ] = source ; return new FluxConcatArray $F200 ( delayError , newArray ) ; }
public void shutdown $F72 $F9099 ( shutdownServerThread , shutdownSessions )
private boolean isLocalId ( String localId ) { if $F14943 ( localId ) { return _BOOL ; } for ( $F38840 ( i , localId ) ) { $F1280 ( c , localId , i ) if ( ! $F19295 ( c ) && ! $F19295 ( c ) ) { return _BOOL ; } } return _BOOL ; }
public ServerSocketBar bind ( ServerSocketBar ss ) throws ConfigException , IOException { synchronized ( _sslInitLock ) { if ( _stdServerSocket != null ) throw new ConfigException ( L . l ( NUM00 ) ) ; try $F5795 ( initConfig ) catch ( RuntimeException e ) { $F301 ( e ) throw e ; } _stdServerSocket = ss ; initSSL ( ) ; return this ; } }
$F80551 ( node , Thread , transferAfterCancelledWait , THROW_IE , REINTERRUPT )
private void resetOutputBuilders $F72 { $F54171 ( ansi , Ansi ) $F6932 ( stringBuilder ) }
public String read ( ByteBuffer buf , DictionaryCache dict ) { $F83 ( out ) $F208830 ( pre , out ) if ( type == VOID ) $F92 ( out ) if ( type == NULL ) { $F84 ( out ) $F92 ( out ) } if ( type == BYTE ) { out . append ( buf . get ( ) ) ; $F92 ( out ) } if ( type == SHORT ) { out . append ( buf . getShort ( ) ) ; $F92 ( out ) } if ( type == INT ) { out . append ( buf . getInt ( ) ) ; $F92 ( out ) } if ( type == LONG ) { out . append ( buf . getLong ( ) ) ; $F92 ( out ) } if ( type == DOUBLE ) { out . append ( buf . getDouble ( ) ) ; $F92 ( out ) } if ( type == BOOLEAN ) { out . append ( ( $F76101 ( buf ) ? NUM00 : NUM00 ) ) ; $F92 ( out ) } if ( type == NUM00 ) { $F73767 ( pos , buf ) if ( pos > - NUM00 ) { $F84 ( out ) $F89 ( out , dict , pos ) $F84 ( out ) } else { int size = NUM00 ; $F183760 ( val , buf ) while ( val == NUM00 ) { size += val ; val = buf . get ( ) & NUM00 ; } size += val ; $F2175 ( data , size ) buf . get ( data ) ; $F84 ( out ) out . append ( $F189105 ( data , StandardCharsets ) ) ; $F84 ( out ) } $F92 ( out ) } $F1274 }
public void write ( String filename ) { $F973 ( logger ) try { openFile ( filename ) ; writeXmlHead ( ) ; startCarriers ( this . writer ) ; for ( Carrier carrier : carriers ) { startCarrier ( carrier , this . writer ) ; writeVehicles ( carrier , this . writer ) ; writeShipments ( carrier , this . writer ) ; writePlans ( carrier , this . writer ) ; endCarrier ( this . writer ) ; } endCarriers ( this . writer ) ; close ( ) ; $F973 ( logger ) } catch ( IOException e ) { $F301 ( e ) logger . error ( e ) ; $F5194 ( System ) } }
public void removeResourceListener ( ResourceEventsListener listener ) $F106 ( resourceListeners , listener )
public void testHasMainActivity $F72 throws Exception { mEnabled . add ( LauncherActivityDetector . ISSUE_MORE_THAN_ONE_LAUNCHER ) ; mEnabled . add ( LauncherActivityDetector . ISSUE_MISSING_LAUNCHER ) ; mEnabled . add ( LauncherActivityDetector . ISSUE_LAUNCHER_ACTIVITY_IN_LIBRARY ) ; String expected = NUM00 ; String result = lintProject ( xml ( FN_ANDROID_MANIFEST_XML , $F118275 ) ) ; assertEquals ( expected , result ) ; }
private void informUponSimilarName ( final StringBuffer messageBuffer , final String name , final String candidate ) { $F7224 ( name , candidate ) if ( name . regionMatches ( _BOOL , NUM00 , candidate , NUM00 , PKG_LEN + NUM00 ) ) $F7227 ( messageBuffer , candidate ) }
protected void writeHeader ( RandomAccessFile file , int size ) throws IOException { String str ; int offset = NUM00 ; $F12496 ( buffer ) str = $F27055 ( Integer , getSize ) ; for ( int i = NUM00 ; i < ( NUM00 - str . length ( ) ) ; i ++ ) { buffer [ i ] = $F74671 ; } offset += ( NUM00 - str . length ( ) ) ; for ( $F1088 ( i , str ) ) { buffer [ i + offset ] = ( byte ) str . charAt ( i ) ; } file . write ( buffer ) ; }
public String buildJavaVendor $F72 $F16566 ( properties )
public VoiceResult ( String match , float confidence ) { mMatch = match ; mConfidence = confidence ; }
final void treeify ( $F35152 tab ) { $F35193 root = null ; for ( $F35193 x = this , next ; x != null ; x = next ) { next = ( $F35193 ) x . next ; x . left = x . right = null ; if ( root == null ) { x . parent = null ; x . red = _BOOL ; root = x ; } else { K k = x . key ; int h = x . hash ; $F20126 ( kc ) for ( $F415623 ( p , root ) ; ; ) { int dir , ph ; K pk = p . key ; if ( ( ph = p . hash ) > h ) dir = - NUM00 ; else if ( ph < h ) dir = NUM00 ; else if ( ( kc == null && ( kc = comparableClassFor ( k ) ) == null ) || ( dir = compareComparables ( kc , k , pk ) ) == NUM00 ) dir = tieBreakOrder ( k , pk ) ; $F415623 ( xp , p ) ; if ( ( p = ( dir <= NUM00 ) ? p . left : p . right ) == null ) { x . parent = xp ; if ( dir <= NUM00 ) xp . left = x ; else xp . right = x ; root = balanceInsertion ( root , x ) ; $F597 } } } } moveRootToFront ( tab , root ) ; }
private void addCategoryToTree ( DefaultMutableTreeNode node , $F806 names ) { if $F9634 ( names ) $F932 boolean matched = _BOOL ; for ( $F1431 Enumeration < DefaultMutableTreeNode > e = node . children ( ) ; e . hasMoreElements ( ) ; ) { DefaultMutableTreeNode childNode = e . nextElement ( ) ; String nodeName = ( String ) childNode . getUserObject ( ) ; if $F151557 ( nodeName , names ) { if $F3305 ( names ) { addCategoryToTree ( childNode , Arrays . copyOfRange ( names , NUM00 , names . length ) ) ; matched = _BOOL ; } else $F845 } } if ( ! matched ) { DefaultMutableTreeNode root = node ; for ( $F1139 ( i , names ) ) { DefaultMutableTreeNode newNode = new DefaultMutableTreeNode ( names [ i ] ) ; root . add ( newNode ) ; root = newNode ; } } }
public void addDrawerListener ( $F4170 DrawerListener listener ) { $F2329 ( listener ) if ( mListeners == null ) { mListeners = new ArrayList < DrawerListener > $F72 ; } mListeners . add ( listener ) ; }
private void editNote ( int noteId ) { hideSoftKeyboard ( ) ; Intent intent = new Intent ( MainActivity . this , NoteActivity . class ) ; intent . setFlags ( Intent . FLAG_ACTIVITY_CLEAR_TASK ) ; intent . putExtra ( NUM00 , String . valueOf ( noteId ) ) ; startActivity ( intent ) ; }
public final Entry addEntry ( Position inputPosition , Position outputPosition ) { Entry entry = new Entry ( inputPosition , outputPosition ) ; entries . add ( entry ) ; return entry ; }
public void unHideActionBar ( View view ) { if ( toolbarAutoHider != null ) toolbarAutoHider . showComponent ( ) ; }
public static String formatTimeDelta ( long time , CharSequence sep ) { $F1121 ( sb ) final Formatter fmt = new Formatter ( sb ) ; for ( int i = TIME_UNIT_SIZES . length - NUM00 ; i >= NUM00 ; -- i ) { if ( i == NUM00 && $F20 ( sb ) ) $F1448 if $F4012 ( sb ) $F288 ( sb , sep ) final long acValue = time / TIME_UNIT_SIZES [ i ] ; time = time % TIME_UNIT_SIZES [ i ] ; if ( ! ( acValue == NUM00 && $F1276 ( sb ) ) ) { fmt . format ( NUM00 + TIME_UNIT_DIGITS [ i ] + NUM00 , Long . valueOf ( acValue ) , TIME_UNIT_NAMES [ i ] ) ; } } $F59 ( fmt ) $F92 ( sb ) }
public void run $F72 { Log . d ( LOG , $F3905 ( sampleRate , channels , bufferSizeInBytes , bufferSizeInMs ) ) ; isPlaying = _BOOL ; AudioTrack atrack = null ; try { atrack = new AudioTrack ( AudioManager . STREAM_MUSIC , sampleRate , channels == NUM00 ? AudioFormat . CHANNEL_CONFIGURATION_MONO : AudioFormat . CHANNEL_CONFIGURATION_STEREO , AudioFormat . ENCODING_PCM_16BIT , bufferSizeInBytes , AudioTrack . MODE_STREAM ) ; atrack . setPlaybackPositionUpdateListener ( this ) ; atrack . setPositionNotificationPeriod ( msToSamples ( NUM00 , sampleRate , channels ) ) ; if ( playerCallback != null ) playerCallback . playerAudioTrackCreated ( atrack ) ; this . audioTrack = atrack ; } catch ( Throwable t ) { $F110901 ( Log , LOG , t ) stop ( ) ; if ( playerCallback != null ) playerCallback . playerException ( t ) ; } while ( ! stopped ) { int ln = acquireSamples ( ) ; if ( stopped || ln == NUM00 ) $F151805 ( releaseSamples ) int writtenNow = NUM00 ; do { if ( writtenNow != NUM00 ) { $F13527 ( Log , LOG ) $F36705 ( Thread ) } int written = atrack . write ( lsamples , writtenNow , ln ) ; if ( written < NUM00 ) { $F110901 ( Log , LOG , written ) stopped = _BOOL ; $F597 } writtenTotal += written ; int buffered = writtenTotal - atrack . getPlaybackHeadPosition ( ) * channels ; if ( ! stopped && ! isPlaying ) { if ( buffered * NUM00 >= bufferSizeInBytes ) { $F63425 ( Log , LOG , buffered ) $F6193 ( atrack ) isPlaying = _BOOL ; } else $F13573 ( Log , LOG ) } writtenNow += written ; ln -= written ; } while ( ln > NUM00 && ! stopped ) ; releaseSamples ( ) ; } if ( ! stopped && stoppedByEOF ) waitForLastTone ( ) ; if ( isPlaying ) atrack . pause ( ) ; $F1206 ( atrack ) $F33833 ( atrack ) stopped = _BOOL ; $F13527 ( Log , LOG ) }
$F45572 ( context , intent , pm , handlers , PackageManager , _BOOL , resolveInfo , filter , Log , TAG )
$F73354 ( curViewBound , curViewWidth , right , mClipPadding )
public static $F1986 deconvolve ( final $F1986 p , final double rate ) { final $F1986 $F42716 ( r , Arrays , p ) ; for ( $F1139 ( k , p ) ) { for ( $F1139 ( j , p ) ) { if ( k + j < p . length ) { r [ k + j ] -= rate * p [ k ] * p [ j ] ; } } } double sum = NUM00 ; for ( final double q : r ) { sum += q ; } sum = NUM00 / sum ; for ( $F1139 ( k , r ) ) { r [ k ] *= sum ; } return r ; }
public static String collapseNewlines ( String str ) $F73165 ( collapseCharacter , str )
private synchronized void readObject $F154558 ( s ) throws $F6427 { $F6428 ( s ) init ( getName ( ) ) ; }
public static double calculateColumnTotal ( Values2D data , int column , $F2027 validRows ) { $F19400 ( ParamChecks , data ) double total = NUM00 ; $F160876 ( rowCount , data ) for ( $F1139 ( v , validRows ) ) { int row = validRows [ v ] ; if ( row < rowCount ) { $F98564 ( n , data , row , column ) if ( n != null ) { $F16683 ( total , n ) } } } return total ; }
public boolean openAnalysis ( File f , SaveType saveType ) { if ( $F1905 ( f ) || $F15586 ( f ) ) { throw new IllegalArgumentException ( $F4946 ( f ) ) ; } mainFrameLoadSaveHelper . prepareForFileLoad ( f , saveType ) ; mainFrameLoadSaveHelper . loadAnalysis ( f ) ; return _BOOL ; }
public void childrenRemoved ( BeanContextMembershipEvent bcme ) { $F15849 ( findAndUndo , bcme ) ; }
public String process ( Item item ) throws ProcessException { int count = NUM00 ; Item ss = item . getItemAs ( Relation . SYLLABLE ) ; Item firstSyllable = LAST_LAST_SYLLABLE_PATH . findItem ( item ) ; for ( Item p = ss ; p != null ; p = p . getNext ( ) ) { if ( p . equalsShared ( firstSyllable ) ) $F5153 count ++ ; } $F100077 ( Integer , rail , count ) }
private void removeInstancesFromContainers ( ArrayList < Container > containers , Map < Integer , List < InstanceId > > allocation , $F59936 ( componentsToScaleDown ) ) { ArrayList < RamRequirement > ramRequirements = getRAMInstances ( componentsToScaleDown ) ; for ( RamRequirement ramRequirement : ramRequirements ) { String component = ramRequirement . getComponentName ( ) ; int numInstancesToRemove = - componentsToScaleDown . get ( component ) ; for ( $F119 ( j , numInstancesToRemove ) ) { Pair < Integer , InstanceId > idPair = removeRRInstance ( containers , component ) ; List < InstanceId > instances = allocation . get ( idPair . first ) ; instances . remove ( idPair . second ) ; allocation . put ( idPair . first , instances ) ; } } }
protected void drawNormalMessage ( DrawHandler drawHandler , PointDouble send , PointDouble receive , RelationDrawer . ArrowEndType arrowEndType , boolean fillArrow , DrawingInfo drawingInfo ) { Line line = new Line ( send , receive ) ; drawHandler . drawLine ( line ) ; drawHandler . setLineType ( LineType . SOLID ) ; RelationDrawer . drawArrowToLine ( receive , drawHandler , line , _BOOL , arrowEndType , fillArrow , _BOOL ) ; double height = send . y - drawingInfo . getVerticalStart ( sendTick ) ; double topLeftX ; AlignHorizontal hAlignment ; if ( from == getFirstLifeline ( ) ) { topLeftX = send . x ; hAlignment = AlignHorizontal . LEFT ; } else { topLeftX = receive . x ; hAlignment = AlignHorizontal . RIGHT ; } if ( duration == NUM00 ) { hAlignment = AlignHorizontal . CENTER ; } topLeftX += LIFELINE_TEXT_PADDING ; TextSplitter . drawText ( drawHandler , textLines , topLeftX , send . y - height , Math . abs ( send . x - receive . x ) - LIFELINE_TEXT_PADDING * NUM00 , height , hAlignment , AlignVertical . BOTTOM ) ; }
private void killConsist $F72 { if ( $F47592 ( validLocoAdr , locoTextField1 ) < NUM00 ) $F932 int locoAddr = getLocoAddr ( locoTextField1 , adrButton1 ) ; sendNceBinaryCommand ( locoAddr , NceBinaryCommand . LOCO_CMD_KILL_CONSIST , $F19905 ) ; }
public ListenKey startListening $F72 throws IOException { return startListening ( null , NUM00 ) ; }
$F2304 public static Set < Flag > parse ( @ Nonnegative final int bitmask ) { Check . notNegative ( bitmask , NUM00 ) ; final Set < Flag > flags = new HashSet < Flag > $F72 ; for ( final Flag flag : values ( ) ) { if ( ( bitmask & flag . getNumber ( ) ) != NUM00 ) $F207 ( flags , flag ) } return flags ; }
protected Package definePackage ( String packageName , Manifest manifest , URL url ) throws IllegalArgumentException { Attributes mainAttributes = manifest . getMainAttributes ( ) ; $F182960 ( dirName , packageName ) Attributes packageAttributes = manifest . getAttributes ( dirName ) ; boolean noEntry = _BOOL ; if ( packageAttributes == null ) { noEntry = _BOOL ; packageAttributes = mainAttributes ; } String specificationTitle = packageAttributes . getValue ( Attributes . Name . SPECIFICATION_TITLE ) ; if ( specificationTitle == null && ! noEntry ) { specificationTitle = mainAttributes . getValue ( Attributes . Name . SPECIFICATION_TITLE ) ; } String specificationVersion = packageAttributes . getValue ( Attributes . Name . SPECIFICATION_VERSION ) ; if ( specificationVersion == null && ! noEntry ) { specificationVersion = mainAttributes . getValue ( Attributes . Name . SPECIFICATION_VERSION ) ; } String specificationVendor = packageAttributes . getValue ( Attributes . Name . SPECIFICATION_VENDOR ) ; if ( specificationVendor == null && ! noEntry ) { specificationVendor = mainAttributes . getValue ( Attributes . Name . SPECIFICATION_VENDOR ) ; } String implementationTitle = packageAttributes . getValue ( Attributes . Name . IMPLEMENTATION_TITLE ) ; if ( implementationTitle == null && ! noEntry ) { implementationTitle = mainAttributes . getValue ( Attributes . Name . IMPLEMENTATION_TITLE ) ; } String implementationVersion = packageAttributes . getValue ( Attributes . Name . IMPLEMENTATION_VERSION ) ; if ( implementationVersion == null && ! noEntry ) { implementationVersion = mainAttributes . getValue ( Attributes . Name . IMPLEMENTATION_VERSION ) ; } String implementationVendor = packageAttributes . getValue ( Attributes . Name . IMPLEMENTATION_VENDOR ) ; if ( implementationVendor == null && ! noEntry ) { implementationVendor = mainAttributes . getValue ( Attributes . Name . IMPLEMENTATION_VENDOR ) ; } return definePackage ( packageName , specificationTitle , specificationVersion , specificationVendor , implementationTitle , implementationVersion , implementationVendor , isSealed ( manifest , dirName ) ? url : null ) ; }
$F1431 private void parse $F72 throws $F55616 { init ( ) ; try { mHandCont . setDocumentLocator ( this ) ; mHandCont . startDocument ( ) ; if ( mPh != PH_MISC_DTD ) { mPh = PH_MISC_DTD ; } int evt = EV_NULL ; do { wsskip ( ) ; switch ( evt = step ( ) ) { case EV_ELM : case EV_ELMS : mPh = PH_DOCELM ; $F597 case EV_COMM : case EV_PI : $F597 case EV_DTD : if ( mPh >= PH_DTD_MISC ) { panic ( FAULT ) ; } mPh = PH_DTD_MISC ; $F597 $F1267 panic ( FAULT ) ; } } while ( mPh < PH_DOCELM ) ; do { switch ( evt ) { case EV_ELM : case EV_ELMS : if ( mIsNSAware == _BOOL ) { mHandCont . startElement ( mElm . value , mElm . name , NUM00 , mAttrs ) ; } else { mHandCont . startElement ( NUM00 , NUM00 , mElm . name , mAttrs ) ; } if ( evt == EV_ELMS ) { evt = step ( ) ; $F597 } case EV_ELME : if ( mIsNSAware == _BOOL ) { mHandCont . endElement ( mElm . value , mElm . name , NUM00 ) ; } else { mHandCont . endElement ( NUM00 , NUM00 , mElm . name ) ; } while ( mPref . list == mElm ) { mHandCont . endPrefixMapping ( mPref . name ) ; mPref = del ( mPref ) ; } mElm = del ( mElm ) ; if ( mElm == null ) { mPh = PH_DOCELM_MISC ; } else $F20182 ( evt , step ) $F597 case EV_TEXT : case EV_WSPC : case EV_CDAT : case EV_COMM : case EV_PI : case EV_ENT : evt = step ( ) ; $F597 $F1267 panic ( FAULT ) ; } } while ( mPh == PH_DOCELM ) ; do { if ( wsskip ( ) == EOS ) $F5153 switch ( step ( ) ) { case EV_COMM : case EV_PI : $F597 $F1267 panic ( FAULT ) ; } } while ( mPh == PH_DOCELM_MISC ) ; mPh = PH_AFTER_DOC ; } catch ( SAXException saxe ) { throw saxe ; } $F8012 ( ioe ) $F41337 ( rte ) catch ( Exception e ) $F94311 ( panic , e ) finally { $F45698 ( mHandCont ) cleanup ( ) ; } }
protected boolean engineVerify $F97 ( sigBytes ) throws SignatureException { $F896 ( sigBytes ) return checkSignature ( sigBytes , NUM00 , NUM00 ) ; }
public void addMatchString ( String matchString ) $F207 ( matchStrings , matchString )
$F137271 ( close , deleteContents , directory )
public String timeAgo ( final long millis ) { return time ( System . currentTimeMillis ( ) - millis ) ; }
public static $F96 hexStringToByteArray ( String input ) { if ( ( input == null ) || ( $F47012 ( input ) != NUM00 ) ) $F275480 ( input ) $F19710 ( output , input ) for ( $F1139 ( i , output ) ) { output [ i ] = ( byte ) ( ( Character . digit ( input . charAt ( i * NUM00 ) , NUM00 ) < < NUM00 ) + Character . digit ( input . charAt ( i * NUM00 + NUM00 ) , NUM00 ) ) ; } return output ; }
private boolean stopTrackingJob ( JobStatus jobStatus ) { boolean removed ; boolean rocking ; synchronized ( mJobs ) { removed = mJobs . remove ( jobStatus ) ; rocking = mReadyToRock ; } if ( removed && rocking ) { for ( $F2277 ( i , mControllers ) ) { StateController controller = mControllers . get ( i ) ; controller . maybeStopTrackingJob ( jobStatus ) ; } } return removed ; }
public double coefficientOfVariance $F72 { return $F86242 ( Math , variance ) / mean ( ) ; }
final boolean transferAfterCancelledWait ( Node node ) { if ( compareAndSetWaitStatus ( node , Node . CONDITION , NUM00 ) ) $F9278 ( enq , node , _BOOL ) while ( ! isOnSyncQueue ( node ) ) $F5756 ( Thread ) return _BOOL ; }
public String toString $F72 { $F83 ( buf ) buf . append ( this . coefficient ) ; if ( this . variables . length > NUM00 ) $F86 ( buf ) for ( int variable : this . variables ) $F7227 ( buf , variable ) $F92 ( buf ) }
public SkeletonVersionChecker ( int defaultVersion ) { myExplicitVersion = createTreeMap ( ) ; myDefaultVersion = defaultVersion ; load ( ) ; }
$F1 public AttributeSchemaImpl upgradeAttribute ( AttributeSchemaImpl newAttr ) throws UpgradeException { return updateDefaultValues ( newAttr , Collections . singleton ( OLDEST_VERSION ) ) ; }
public static String toDalvikName ( String canonicalName ) { final boolean isArray = $F4432 ( canonicalName ) ; if ( isArray ) $F11447 ( canonicalName ) else { if $F3057 ( canonicalName ) $F1278 else if $F3057 ( canonicalName ) $F1278 else if $F3057 ( canonicalName ) $F1278 else if $F3057 ( canonicalName ) $F1278 else if $F3057 ( canonicalName ) $F1278 else if $F3057 ( canonicalName ) $F1278 else if $F3057 ( canonicalName ) $F1278 else if $F3057 ( canonicalName ) $F1278 else if $F3057 ( canonicalName ) $F1278 else return $F139654 ( canonicalName ) ; } }
private void emitEnsureCollection $F6406 ( method , fieldName , builder ) { $F84 ( builder ) $F6407 ( builder , getEnsureName , fieldName ) $F84 ( builder ) $F84 ( builder ) builder . append ( fieldName ) ; $F84 ( builder ) builder . append ( fieldName ) ; $F84 ( builder ) builder . append ( getImplName ( method . getGenericReturnType ( ) , _BOOL ) ) ; $F84 ( builder ) $F84 ( builder ) $F84 ( builder ) }
public void unregisterClient ( ClientProxyMembershipID proxyID , AcceptorImpl acceptor , boolean clientDisconnectedCleanly ) { unregisterClient ( proxyID ) ; if ( acceptor != null ) { CacheClientNotifier ccn = acceptor . getCacheClientNotifier ( ) ; if ( ccn != null ) { try { ccn . unregisterClient ( proxyID , clientDisconnectedCleanly ) ; } catch ( CancelException ignore ) $F845 } } }
private String doubleQuotesHandling ( String resource ) { return resource . replaceAll ( NUM00 , Matcher . quoteReplacement ( NUM00 ) ) ; }
public static int allocateNewContainer ( ArrayList < Container > containers , Resource capacity , int paddingPercentage ) { containers . add ( new Container ( capacity , paddingPercentage ) ) ; $F1651 ( containers ) }
public static boolean isLocalResourceUri ( Uri uri ) $F67552 ( scheme , getSchemeOrNull , uri , LOCAL_RESOURCE_SCHEME )
$F32357 ( Class , _BOOL )
protected String doWaitForPath ( String filePath ) { String path = null ; long waitTimeMillis = NUM00 ; assertTrue ( NUM00 + filePath + NUM00 , mSm . isObbMounted ( filePath ) ) ; while ( path == null ) { try { Thread . sleep ( WAIT_TIME_INCR ) ; waitTimeMillis += WAIT_TIME_INCR ; if ( waitTimeMillis > MAX_WAIT_TIME ) $F1328 ( fail , filePath ) } $F887 path = mSm . getMountedObbPath ( filePath ) ; } $F26334 ( Log , LOG_TAG , path ) return path ; }
$F1 protected boolean isZoneLevelResource $F72 { return _BOOL ; }
private void validateMessage ( String expectedType , String type , long returnCode , String service , String payload ) throws ReplicatorException { if $F2137 ( type , expectedType ) { throw new ReplicatorException ( NUM00 + Protocol . TYPE_FILTERED + NUM00 + type + NUM00 ) ; } else if ( returnCode != NUM00 ) { throw new ReplicatorException ( NUM00 + returnCode + NUM00 + payload ) ; } else if ( ! service . equals ( messageGenerator . getService ( ) ) ) { throw new ReplicatorException ( NUM00 + service + NUM00 + messageGenerator . getService ( ) + NUM00 ) ; } }
private void closeDatabases $F72 { $F28795 ( s_logger , Level ) $F28795 ( s_logger , Level ) $F59 ( m_source ) $F59 ( m_target ) $F2268 ( m_source ) m_source = null ; $F2268 ( m_target ) m_target = null ; m_direction = null ; m_objectType = null ; m_objectTypes = null ; m_sourceMap = null ; m_targetMap = null ; $F30598 ( m_objectList ) $F30598 ( m_trackingList ) m_tempIndexes = null ; m_counterPrg = null ; m_counterDrp = null ; m_counterUpd = null ; m_counterAdd = null ; m_totalPrg = null ; m_totalDrp = null ; m_totalUpd = null ; m_totalAdd = null ; m_detailType = null ; m_detailTypes = null ; m_detailCounterDrp = null ; m_detailCounterUpd = null ; m_detailCounterAdd = null ; $F58463 ( System ) }
public static $F96 MD5 $F41456 ( message , offset , length ) { MessageDigest digest ; try { $F6161 ( digest , MessageDigest ) digest . update ( message , offset , length ) ; final $F96 md5 = digest . digest ( ) ; return md5 ; } catch ( final NoSuchAlgorithmException e ) { $F44960 ( Cfg , Check , e ) } $F1274 }
private int runMetastoreCompareJob ( Optional $F72371 inputTableListPath , Path outputPath ) throws InterruptedException , IOException , ClassNotFoundException , TemplateRenderException { $F973 ( LOG ) int result ; if $F16464 ( inputTableListPath ) { result = $F38219 ( runMetastoreCompareJobWithTextInput , inputTableListPath , outputPath ) ; } else { result = runMetastoreCompareJob ( outputPath ) ; } if ( result == NUM00 ) { LOG . info ( NUM00 + NUM00 + VelocityUtils . renderTemplate ( STEP1_HQL_TEMPLATE , velocityContext ) ) ; } return result ; }
$F4562 ( view , deltaX , scrollX , deltaY , scrollY , scrollRange , fuzzyThreshold , scaleFactor , isTouchEvent , deltaValue , currentScrollValue , scrollValue , HORIZONTAL , VERTICAL , mode , newScrollValue , PullToRefreshBase , Log , LOG_TAG , State , Math )
public void deleteSubPeopleContainers ( Set peopleContainers ) throws $F52710 { $F10531 ( iter , peopleContainers ) while $F2921 ( iter ) { $F2778 ( peopleContainerDN , iter ) AMPeopleContainer peopleContainer = new AMPeopleContainerImpl ( super . token , peopleContainerDN ) ; $F1900 ( peopleContainer ) } }
private void testFindRecentMessageUidsInMailbox $F72 throws Exception { $F973 ( LOG ) List < MessageUid > recentMessages = messageMapper . findRecentMessageUidsInMailbox ( MBOXES . get ( NUM00 ) ) ; assertEquals ( $F2281 ( MESSAGE_NO ) , recentMessages . size ( ) ) ; }
public void queueEvent ( Runnable r ) { $F826 ( r ) synchronized ( sGLThreadManager ) { mEventQueue . add ( r ) ; $F165 ( sGLThreadManager ) } }
private void addErrorMessage ( String message ) { $F13324 ( message , m_errorMessages ) $F84 ( m_errorMessages ) }
$F1431 protected final void ensureCapacity ( long targetSize ) { long capacity = capacity ( ) ; if ( targetSize > capacity ) { inflateSpine ( ) ; for ( int i = spineIndex + NUM00 ; targetSize > capacity ; i ++ ) { if ( i >= spine . length ) { $F49759 ( newSpineSize , spine ) $F8003 ( spine , Arrays , newSpineSize ) $F8003 ( priorElementCount , Arrays , newSpineSize ) } int nextChunkSize = chunkSize ( i ) ; spine [ i ] = ( $F38234 ) new Object [ nextChunkSize ] ; priorElementCount [ i ] = priorElementCount [ i - NUM00 ] + spine [ i - NUM00 ] . length ; capacity += nextChunkSize ; } } }
public void write $F84589 ( key , newValue ) throws Exception { $F48568 $F8690 ( entry ) ; entry . put ( key , newValue ) ; write ( entry ) ; }
public void timingEvent ( float fraction ) { current . x = ( int ) ( start . x + $F27158 ( end , start ) * fraction ) ; current . y = ( int ) ( start . y + $F27159 ( end , start ) * fraction ) ; track . setCarPosition ( current ) ; }
public void transform ( Source xmlSource , Result outputTarget ) throws TransformerException { transform ( xmlSource , outputTarget , _BOOL ) ; }
public String query ( String handler , SolrQueryRequest req ) throws Exception { try ( SolrCore core = getCoreInc ( ) ) { SolrQueryResponse rsp = new SolrQueryResponse $F72 ; SolrRequestInfo . setRequestInfo ( new SolrRequestInfo ( req , rsp ) ) ; core . execute ( core . getRequestHandler ( handler ) , req , rsp ) ; if ( rsp . getException ( ) != null ) { throw rsp . getException ( ) ; } StringWriter sw = new StringWriter $F989 ; QueryResponseWriter responseWriter = core . getQueryResponseWriter ( req ) ; responseWriter . write ( sw , req , rsp ) ; $F59 ( req ) $F92 ( sw ) } finally { $F59 ( req ) SolrRequestInfo . clearRequestInfo ( ) ; } }
private boolean bothLinksHaveSameLinkStats ( Link linkA , Link linkB ) { boolean bothLinksHaveSameLinkStats = _BOOL ; if ( linkA . getFreespeed ( ) != linkB . getFreespeed ( ) ) { bothLinksHaveSameLinkStats = _BOOL ; } if ( linkA . getCapacity ( ) != linkB . getCapacity ( ) ) { bothLinksHaveSameLinkStats = _BOOL ; } return bothLinksHaveSameLinkStats ; }
public String generateSanitizedId $F72 { String result = generateId ( ) ; $F2936 ( result ) $F2936 ( result ) $F2936 ( result ) return result ; }
public static synchronized void removeProvider ( int providerNumber ) { Provider p = providers . remove ( providerNumber - NUM00 ) ; $F139889 ( providersNames , p ) setNeedRefresh ( ) ; }
private Object parseElement ( Node element ) throws XmlParseException { try $F4915 ( parseElementRaw , element ) catch ( Exception e ) { throw new XmlParseException ( NUM00 + element . getNodeName ( ) , e ) ; } }
public IOUtils $F72 $F5795 ( super )
public static String format ( Money money ) { long microAmount = NUM00 ; if ( money != null ) { microAmount = money . getMicroAmount ( ) ; } else { return PLACEHOLDER_NULL ; } $F67468 ( amount , microAmount , MICRO_UNITS ) $F27028 ( String , FORMAT_MONEY , amount ) }
private void deleteInstance ( EntryClass eclass ) { $F12747 ( idx , entryClasses , eclass ) eclass = ( EntryClass ) entryClasses . get ( idx ) ; int num = eclass . getNumInstances ( ) - NUM00 ; if ( num == NUM00 ) entryClasses . remove ( idx ) ; eclass . setNumInstances ( num ) ; }
public Properties readSettings $F72 { try { String pacScriptUrl = detectScriptUrlPerDHCP ( ) ; $F22771 ( pacScriptUrl , detectScriptUrlPerDNS ) $F1338 ( pacScriptUrl ) $F2697 ( result ) $F48491 ( result , pacScriptUrl ) return result ; } catch ( IOException e ) { return $F856 ; } }
public void logWarning ( String message ) { logger . warning ( logPrefix + message ) ; }
public static String readAsString ( InputStream is ) throws IOException { $F280 ( buf ) $F12496 ( b ) int nread = - NUM00 ; while $F42482 ( nread , is , b ) { String s = $F626 ( b , nread ) ; buf . append ( s ) ; } $F92 ( buf ) }
public ArrayFieldVector ( int size , T preset ) { this ( preset . getField ( ) , size ) ; Arrays . fill ( data , preset ) ; }
public static synchronized void unregisterTransactionServicePlugin ( TransactionServicePlugin l ) { if ( service_ != null ) { service_ . removeTSListener ( l ) ; } tsListenersList_ . remove ( l ) ; }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
$F4486 ( type , outputStack , n , outputStackTop , t , Math , System , top , owner )
protected static void isort ( int level [ ] , float BC [ ] ) { float temp ; int temp2 ; for ( $F21583 ( i , BC ) ) { int j = i ; temp = BC [ j + NUM00 ] ; temp2 = level [ j + NUM00 ] ; $F67632 ( temp ) int prej = j + NUM00 ; while ( j > - NUM00 && ( temp < BC [ j ] || BC [ j ] == NUM00 ) ) { if ( BC [ j ] == NUM00 ) { j -- ; $F598 } else { BC [ prej ] = BC [ j ] ; level [ prej ] = level [ j ] ; prej = j ; j -- ; } } BC [ prej ] = temp ; level [ prej ] = temp2 ; } }
public void testIsConsistentModelClass $F72 { SessionNode node1 = new SessionNode ( Type1 . class ) ; SessionNode node2 = new SessionNode ( Type2 . class ) ; SessionNode node3 = new SessionNode ( Type3 . class ) ; SessionNode node4 = new SessionNode ( new Class [ ] { Type1 . class , Type2 . class } ) ; SessionNode node6 = new SessionNode ( new Class [ ] { Type1 . class , Type2 . class , Type3 . class } ) ; SessionNode node7 = new SessionNode ( new Class [ ] { Type1 . class , Type4 . class } ) ; $F19151 ( parents ) parents . add ( node1 ) ; parents . add ( node2 ) ; parents . add ( node3 ) ; parents . remove ( node1 ) ; parents . remove ( node2 ) ; parents . remove ( node3 ) ; parents . add ( node4 ) ; assertTrue ( node1 . isConsistentModelClass ( Type1 . class , parents , _BOOL ) ) ; parents . add ( node6 ) ; assertTrue ( node1 . isConsistentModelClass ( Type1 . class , parents , _BOOL ) ) ; parents . remove ( node6 ) ; parents . add ( node7 ) ; assertTrue ( ! node1 . isConsistentModelClass ( Type1 . class , parents , _BOOL ) ) ; }
public void findAndInit ( Object someObj ) { if ( someObj instanceof com . bbn . openmap . MapBean ) { $F22806 ( logger ) setMapBean ( ( MapBean ) someObj ) ; } }
public void removeAllLayers $F72 { $F6050 ( _layers ) refreshLayers = _BOOL ; $F8798 ( super ) }
$F1654 ( productions )
public static Future < BoxedUnit > zkAsyncCreateFullPathOptimistic ( final ZooKeeperClient zkc , final String pathToCreate , final $F96 data , final List < ACL > acl , final CreateMode createMode ) { $F65632 parentPathShouldNotCreate = Optional . absent ( ) ; return zkAsyncCreateFullPathOptimistic ( zkc , pathToCreate , parentPathShouldNotCreate , data , acl , createMode ) ; }
private void writeObject ( ObjectOutputStream oos ) throws IOException { $F9339 ( oos ) writeStroke ( oos , stroke , OMGraphicAdapter . BASIC_STROKE ) ; writeTextureMask ( oos , textureMask ) ; }
public boolean equals ( Object obj ) { if ( obj instanceof MRfQResponseLineQty ) { MRfQResponseLineQty cmp = ( MRfQResponseLineQty ) obj ; if ( ! cmp . isValidAmt ( ) || ! isValidAmt ( ) ) return _BOOL ; BigDecimal cmpNet = cmp . getNetAmt ( ) ; $F397 ( cmpNet , _BOOL ) BigDecimal net = cmp . getNetAmt ( ) ; $F397 ( net , _BOOL ) return cmpNet . compareTo ( net ) == NUM00 ; } return _BOOL ; }
$F13429 ( criteria , createCriteriaInternal , oredCriteria )
public ReflectiveAttribute ( Class $F65331 objectType , $F67889 fieldType , String fieldName ) { super ( objectType , fieldType , fieldName ) ; Field field ; try { field = getField ( objectType , fieldName ) ; $F41506 ( field , _BOOL ) } catch ( Exception e ) { throw new IllegalStateException ( $F106503 ( fieldName , objectType ) ) ; } if ( ! fieldType . isAssignableFrom ( field . getType ( ) ) ) { throw new IllegalStateException ( NUM00 + fieldName + NUM00 + field . getType ( ) + NUM00 + objectType . getName ( ) + NUM00 + fieldType . getName ( ) ) ; } this . field = field ; }
private void processEvent ( EventLogControl check , final String name , final DTNHost host1 , final DTNHost host2 , final Message message ) { String descString ; if ( ! check . showEvent ( ) ) $F932 descString = name + NUM00 + $F134738 ( host1 ) + ( host2 != null ? ( HOST_DELIM + host2 ) : NUM00 ) + ( message != null ? NUM00 + message : NUM00 ) ; if ( regExp != null && ! descString . matches ( regExp ) ) $F932 if ( check . pauseOnEvent ( ) ) { gui . setPaused ( _BOOL ) ; if ( host1 != null ) { gui . setFocus ( host1 ) ; } } addEvent ( name , host1 , host2 , message , check . pauseOnEvent ( ) ) ; }
public boolean removeMembershipListener ( MembershipListener listener ) { return membershipListeners . remove ( listener ) != null ; }
public static Uri addMessageToUri ( ContentResolver resolver , Uri uri , String address , String body , String subject , Long date , boolean read , boolean deliveryReport , long threadId ) { $F41874 ( values ) values . put ( ADDRESS , address ) ; $F114625 ( date , values , DATE ) values . put ( READ , read ? Integer . valueOf ( NUM00 ) : Integer . valueOf ( NUM00 ) ) ; values . put ( SUBJECT , subject ) ; values . put ( BODY , body ) ; if ( deliveryReport ) $F1717 ( values , STATUS , STATUS_PENDING ) if ( threadId != - NUM00 ) $F1717 ( values , THREAD_ID , threadId ) return resolver . insert ( uri , values ) ; }
private void present $F72 { glUseProgram ( quadProgram ) ; glBindBuffer ( GL_ARRAY_BUFFER , vbo ) ; glActiveTexture ( GL_TEXTURE0 ) ; glBindTexture ( GL_TEXTURE_2D , tex ) ; glDrawArrays ( GL_TRIANGLES , NUM00 , NUM00 ) ; glActiveTexture ( GL_TEXTURE0 ) ; glBindTexture ( GL_TEXTURE_2D , NUM00 ) ; glBindBuffer ( GL_ARRAY_BUFFER , NUM00 ) ; glUseProgram ( NUM00 ) ; }
public static Calendar next ( Calendar self ) { $F30242 ( result , self ) $F107166 ( result , Calendar ) return result ; }
protected void angularObjectClientBind ( NotebookSocket conn , $F2690 userAndRoles , Notebook notebook , Message fromMessage ) throws Exception { String noteId = fromMessage . getType ( NUM00 ) ; String varName = fromMessage . getType ( NUM00 ) ; $F100553 ( varValue , fromMessage ) String paragraphId = fromMessage . getType ( NUM00 ) ; Note note = notebook . getNote ( noteId ) ; if ( paragraphId == null ) $F11813 if ( note != null ) { final InterpreterGroup interpreterGroup = findInterpreterGroupForParagraph ( note , paragraphId ) ; final AngularObjectRegistry registry = interpreterGroup . getAngularObjectRegistry ( ) ; if ( registry instanceof RemoteAngularObjectRegistry ) { RemoteAngularObjectRegistry remoteRegistry = ( RemoteAngularObjectRegistry ) registry ; pushAngularObjectToRemoteRegistry ( noteId , paragraphId , varName , varValue , remoteRegistry , interpreterGroup . getId ( ) , conn ) ; } else { pushAngularObjectToLocalRepo ( noteId , paragraphId , varName , varValue , registry , interpreterGroup . getId ( ) , conn ) ; } } }
public static $F4203 void removeAll ( $F5675 list , $F3807 indexes ) { $F5768 ( list , indexes ) Collections . sort ( indexes , Collections . reverseOrder ( ) ) ; $F11550 ( size , list ) for ( Integer index : indexes ) { if ( index >= NUM00 && index < size ) { list . remove ( ( int ) index ) ; } } }
public CProjectTree ( final JFrame parent , final CDatabaseManager databaseManager ) { $F1832 ( Preconditions , databaseManager ) m_treeModel = new CProjectTreeModel ( this ) ; setModel ( m_treeModel ) ; CProjectTreeDragHandlerInitializer . initialize ( parent , this , databaseManager ) ; addMouseListener ( new InternalMouseListener $F72 ) ; setScrollsOnExpand ( _BOOL ) ; setRootVisible ( _BOOL ) ; m_rootNode = new CRootNode ( this , databaseManager ) ; m_treeModel . setRoot ( m_rootNode ) ; setCellRenderer ( new IconNodeRenderer $F72 ) ; m_popup . add ( CActionProxy . proxy ( new CAddDatabaseAction ( this ) ) ) ; }
public boolean isObject $F72 $F121470 ( typeString , OBJECT )
$F663 ( currTime , System , elapsed , startTime , ZOOM_TIME , Math , interpolator )
private void autoRequestMods $F72 { if ( ! c . autoRequestModsEnabled ( ) ) $F932 $F2689 joinedChannels = c . getJoinedChannels ( ) ; for ( String channel : joinedChannels ) { if $F2200 ( modsAlreadyRequested , channel ) { $F556 ( LOGGER , channel ) modsAlreadyRequested . add ( channel ) ; requestModsSilent ( channel ) ; $F665 } } }
public void buildDepreciation $F72 { $F933 ( isDepreciated ) $F280 ( sb ) load ( get_TrxName ( ) ) ; MAssetAcct assetacct = getA_AssetAcct ( null , get_TrxName ( ) ) ; MDepreciation depreciation_C = MDepreciation . get ( getCtx ( ) , assetacct . getA_Depreciation_ID ( ) ) ; MDepreciation depreciation_F = MDepreciation . get ( getCtx ( ) , assetacct . getA_Depreciation_F_ID ( ) ) ; int offset_C = NUM00 , offset_F = NUM00 ; BigDecimal assetCost = getActualCost ( ) ; BigDecimal accumDep_C = getA_Accumulated_Depr ( _BOOL ) ; BigDecimal accumDep_F = getA_Accumulated_Depr ( _BOOL ) ; int lifePeriods_C = getUseLifeMonths ( _BOOL ) + offset_C ; int lifePeriods_F = getUseLifeMonths ( _BOOL ) + offset_F ; int lifePeriods = ( lifePeriods_C > lifePeriods_F ? lifePeriods_C : lifePeriods_F ) ; BigDecimal exp_C = Env . ZERO ; BigDecimal exp_F = Env . ZERO ; if ( CLogMgt . isLevelFine ( ) ) { sb . append ( NUM00 + getA_Current_Period ( ) + NUM00 + getAssetDepreciationDate ( ) + NUM00 ) ; $F45293 ( sb , offset_C , offset_F ) sb . append ( NUM00 + lifePeriods_C + NUM00 + lifePeriods_F + NUM00 + lifePeriods + NUM00 ) ; } truncDepreciation ( ) ; int A_Current_Period = getA_Current_Period ( ) ; for ( int currentPeriod = A_Current_Period , cnt = NUM00 ; currentPeriod <= lifePeriods ; currentPeriod ++ , cnt ++ ) { exp_C = Env . ZERO ; exp_F = Env . ZERO ; $F35113 ( help , accumDep_C , accumDep_F ) if ( lifePeriods_C > currentPeriod || ! depreciation_C . requireLastPeriodAdjustment ( ) ) { setFiscal ( _BOOL ) ; exp_C = depreciation_C . invoke ( this , assetacct , currentPeriod , accumDep_C ) ; $F10950 ( accumDep_C , exp_C ) } else if ( lifePeriods_C == currentPeriod ) { exp_C = assetCost . subtract ( accumDep_C ) ; accumDep_C = assetCost ; } if ( lifePeriods_F > currentPeriod || ! depreciation_F . requireLastPeriodAdjustment ( ) ) { setFiscal ( _BOOL ) ; exp_F = depreciation_F . invoke ( this , assetacct , currentPeriod , accumDep_F ) ; $F10950 ( accumDep_F , exp_F ) } else if ( lifePeriods_F == currentPeriod ) { exp_F = assetCost . subtract ( accumDep_F ) ; accumDep_F = assetCost ; } help += NUM00 + exp_C + NUM00 + exp_F + NUM00 + accumDep_C + NUM00 + accumDep_F ; int months = NUM00 ; months = months + ( currentPeriod - A_Current_Period ) ; Timestamp dateAcct = TimeUtil . getMonthLastDay ( TimeUtil . addMonths ( getDateAcct ( ) , months ) ) ; MDepreciationExp . createDepreciation ( this , currentPeriod , dateAcct , exp_C , exp_F , accumDep_C , accumDep_F , help , get_TrxName ( ) ) ; if ( CLogMgt . isLevelFine ( ) ) { String info = $F3911 ( cnt , currentPeriod , lifePeriods_C , lifePeriods_F , exp_C , exp_F , accumDep_C ) + accumDep_F + NUM00 + dateAcct ; log . fine ( NUM00 + info + Env . NL + Env . NL ) ; sb . append ( info + Env . NL ) ; } } $F7404 ( log , sb ) m_buildDepreciation = _BOOL ; }
$F1 public boolean contains ( Object value ) { final Iterator < Comparable > iter = new StepIterator ( this , NUM00 ) ; $F1933 ( value , _BOOL ) while $F2921 ( iter ) { if ( DefaultTypeTransformation . compareEqual ( value , iter . next ( ) ) ) return _BOOL ; } return _BOOL ; }
public synchronized void renameFile ( JDBCSequentialFile file , String newFileName ) throws SQLException { try { connection . setAutoCommit ( _BOOL ) ; $F3916 ( renameFile , newFileName ) $F36264 ( renameFile , file ) $F3917 ( renameFile ) $F17621 ( connection ) } catch ( SQLException e ) $F33796 ( connection , e ) }
public boolean hasNext $F72 throws IOException { $F46282 ( dataInputStream ) $F7468 ( val , dataInputStream ) $F2268 ( dataInputStream ) return val != - NUM00 ; }
public static void handleErrorViolations ( Formatter formatter , long numErrors ) { ExitCode exitCode = formatter . getExitStatus ( numErrors ) ; if ( exitCode != ExitCode . SUCCESS ) { System . exit ( exitCode . ordinal ( ) ) ; } }
public void remove ( final Sensor sensor ) { Set $F310647 oldSelection = new HashSet $F310647 ( selection ) ; $F12396 ( rv , selection , sensor ) $F308 ( rv , fireSelectionChanged , oldSelection , selection ) }
protected void printWay ( MapWay way , DefaultEntityViewInfo pInfo , boolean asArea ) { List $F455692 nodes = getWayNodes ( way ) ; if ( nodes != null ) { boolean asOneway = _BOOL ; NameInfo textInfo = null ; if ( scale >= pInfo . minNameScale * displayFactor ) { asOneway = way . isOneway ( ) ; if ( way . getName ( ) != null && pInfo . nameColor != null ) { textInfo = new NameInfo ( way . getName ( ) , pInfo . nameColor , pInfo . printOrder ) ; } } printLine ( imageBdr , nodes , pInfo , asArea , asOneway , textInfo ) ; } }
$F1 public String toString $F72 { $F280 ( result ) for ( $F1139 ( i , data ) ) { result . append ( $F262485 ( i ) + data [ i ] ) ; } $F92 ( result ) }
public Element fullPath ( ManagedObjectReference obj ) throws InvalidPropertyFaultMsg , RuntimeFaultFaultMsg , FinderException { List < ObjectContent > set = ancestrySet ( obj ) ; Map < MoRef , Element > $F8690 ( childToParent ) ; for ( ObjectContent cont : set ) { MoRef key = new MoRef ( cont . getObj ( ) ) ; ManagedObjectReference parentRef = getParent ( cont ) ; Element parent ; if ( parentRef != null ) { parent = Element . make ( parentRef , getName ( cont ) ) ; } else { parent = Element . make ( cont . getObj ( ) , getName ( cont ) ) ; } childToParent . put ( key , parent ) ; } MoRef next = new MoRef ( obj ) ; $F24645 ( path ) while ( _BOOL ) { Element parent = childToParent . get ( next ) ; path . add ( parent . path ) ; if ( next . equals ( new MoRef ( parent . object ) ) ) $F5153 next = new MoRef ( parent . object ) ; } Collections . reverse ( path ) ; $F83 ( sb ) for ( String s : path ) $F20352 ( sb , s ) return Element . make ( obj , sb . toString ( ) ) ; }
private boolean hasNextProxy $F72 $F231867 ( nextProxyIndex , proxies )
private boolean noObjectWasClickedOn $F72 { boolean pickedNodeNull = ( pickedNode == null ) ; boolean cameraPicked = ( pickedNode instanceof PCamera ) ; return ( pickedNodeNull || cameraPicked ) ; }
$F1 public int hashCode $F72 $F39976
public Builder measurementMappings $F3501 ( measurementMappings ) { Map < String , Pattern > mappingsByPattern = new HashMap < String , Pattern > $F72 ; for ( $F19318 ( entry , measurementMappings ) ) { try { final Pattern pattern = Pattern . compile ( entry . getValue ( ) ) ; $F15251 ( mappingsByPattern , entry , pattern ) } catch ( PatternSyntaxException e ) { throw new RuntimeException ( $F253401 ( entry ) , e ) ; } } this . measurementMappings = mappingsByPattern ; return this ; }
private $F16501 diff_bisectSplit ( String text1 , String text2 , int x , int y , long deadline ) { $F11991 ( text1a , text1 , x ) $F11991 ( text2a , text2 , y ) $F12716 ( text1b , text1 , x ) $F12716 ( text2b , text2 , y ) $F40337 ( diffs , diff_main , text1a , text2a , _BOOL , deadline ) $F40337 ( diffsb , diff_main , text1b , text2b , _BOOL , deadline ) diffs . addAll ( diffsb ) ; return diffs ; }
public static String validateCreditCardNumber ( String creditCardNumber , String creditCardType ) { if ( creditCardNumber == null || creditCardType == null ) $F1278 String ccStartList = NUM00 ; String ccLengthList = NUM00 ; if ( creditCardType . equals ( X_C_Payment . CREDITCARDTYPE_MasterCard ) ) $F85091 ( ccStartList , ccLengthList ) else if ( creditCardType . equals ( X_C_Payment . CREDITCARDTYPE_Visa ) ) $F85091 ( ccStartList , ccLengthList ) else if ( creditCardType . equals ( X_C_Payment . CREDITCARDTYPE_Amex ) ) $F85091 ( ccStartList , ccLengthList ) else if ( creditCardType . equals ( X_C_Payment . CREDITCARDTYPE_Discover ) ) $F85091 ( ccStartList , ccLengthList ) else if ( creditCardType . equals ( X_C_Payment . CREDITCARDTYPE_Diners ) ) $F85091 ( ccStartList , ccLengthList ) else { ccStartList = NUM00 ; ccLengthList = NUM00 ; ccStartList += NUM00 ; ccLengthList += NUM00 ; ccStartList += NUM00 ; ccLengthList += NUM00 ; } String ccNumber = checkNumeric ( creditCardNumber ) ; $F1749 ( ccLength , ccNumber ) boolean ccLengthOK = _BOOL ; $F8093 ( st , ccLengthList , _BOOL ) while ( st . hasMoreTokens ( ) && ! ccLengthOK ) { $F24697 ( l , Integer , st ) if ( ccLength == l ) ccLengthOK = _BOOL ; } if ( ! ccLengthOK ) { $F21516 ( s_log , ccLength , ccLengthList ) $F1278 } boolean ccIdentified = _BOOL ; $F8091 ( st , ccStartList , _BOOL ) ; while ( st . hasMoreTokens ( ) && ! ccIdentified ) { if ( ccNumber . startsWith ( st . nextToken ( ) ) ) ccIdentified = _BOOL ; } if ( ! ccIdentified ) $F21516 ( s_log , creditCardType , ccStartList ) String check = validateCreditCardNumber ( ccNumber ) ; if $F35625 ( check ) return check ; if ( ! ccIdentified ) $F1278 $F1278 }
public static void extract ( File zipFile , File destDir ) throws IOException { $F170751 ( zf , zipFile ) try { extract ( zf , destDir ) ; } $F3229 ( zf ) }
public Config ( String file ) { this ( new File ( CONFIG_DIR , file . contains ( NUM00 ) ? file : file . concat ( NUM00 ) ) ) ; }
public GotoLineDialog ( JTextComponent text ) { super ( ActionUtils . getFrameFor ( text ) , _BOOL ) ; initComponents ( ) ; this . text = text ; setLocationRelativeTo ( text . getRootPane ( ) ) ; }
$F11730 ( logPrefix , request , exception , retryPolicy , oldTimeout , String , e )
protected void computeAxisValues ( float min , float max ) { float yMin = min ; float yMax = max ; int labelCount = mYAxis . getLabelCount ( ) ; $F14050 ( range , Math , yMax , yMin ) if ( labelCount == NUM00 || range <= NUM00 ) { mYAxis . mEntries = new float $F10277 ; mYAxis . mEntryCount = NUM00 ; $F665 } double rawInterval = range / labelCount ; double interval = Utils . roundToNextSignificant ( rawInterval ) ; double intervalMagnitude = Math . pow ( NUM00 , ( int ) Math . log10 ( interval ) ) ; $F113182 ( intervalSigDigit , interval , intervalMagnitude ) if ( intervalSigDigit > NUM00 ) { interval = Math . floor ( NUM00 * intervalMagnitude ) ; } if ( mYAxis . isShowOnlyMinMaxEnabled ( ) ) { mYAxis . mEntryCount = NUM00 ; mYAxis . mEntries = $F12454 ; $F127729 ( mYAxis , yMin ) $F127729 ( mYAxis , yMax ) } else { double first = Math . ceil ( yMin / interval ) * interval ; double last = Utils . nextUp ( Math . floor ( yMax / interval ) * interval ) ; double f ; int i ; int n = NUM00 ; for ( f = first ; f <= last ; f += interval ) { ++ n ; } mYAxis . mEntryCount = n ; $F127722 ( mYAxis , n ) for ( f = first , i = NUM00 ; i < n ; f += interval , ++ i ) { mYAxis . mEntries [ i ] = ( float ) f ; } } if ( interval < NUM00 ) { mYAxis . mDecimals = ( int ) Math . ceil ( - Math . log10 ( interval ) ) ; } else { mYAxis . mDecimals = NUM00 ; } }
private void sendRequestTeardown $F72 throws IOException { String request = NUM00 + mParameters . host + NUM00 + mParameters . port + mParameters . path + NUM00 + addHeaders ( ) ; Log . i ( TAG , $F31599 ( request ) ) ; $F42213 ( mOutputStream , request ) $F1206 ( mOutputStream ) }
public boolean parseMoreData ( final EncodedImage encodedImage ) { $F3627 ( mParserState , NOT_A_JPEG , _BOOL ) final int dataBufferSize = encodedImage . getSize ( ) ; $F24599 ( dataBufferSize , mBytesParsed , _BOOL ) final InputStream bufferedDataStream = new PooledByteArrayBufferedInputStream ( encodedImage . getInputStream ( ) , mByteArrayPool . get ( BUFFER_SIZE ) , mByteArrayPool ) ; try { StreamUtil . skip ( bufferedDataStream , mBytesParsed ) ; return doParseMoreData ( bufferedDataStream ) ; } catch ( IOException ioe ) { Throwables . propagate ( ioe ) ; return _BOOL ; } $F18090 ( Closeables , bufferedDataStream ) }
public void testSimpleEar $F72 throws Exception $F123330 ( url , System , expected , PingUtils , logger )
public int length $F72 { return this . filledLength ; }
$F1 public boolean equals ( Object o ) { if ( o instanceof Prefix ) { return value . equals ( ( ( Prefix ) o ) . value ) ; } return _BOOL ; }
private void notifyWifiState $F72 { synchronized ( mWifiMonitor ) { $F27746 ( Log , LOG_TAG ) $F8071 ( mWifiMonitor ) } }
private boolean arrayKeyValueExists ( String key , String value ) { if $F1710 ( visitedPost , key ) { for ( String s : visitedPost . get ( key ) ) $F12419 ( s , value , _BOOL ) } return _BOOL ; }
public void removeDiagramChangeListener ( mxDiagramChangeListener listener ) $F4579 ( diagramChangeListeners , listener )
public static ConnectivityGrid ConnectivityGridFactory ( int key , double maxRange ) { if ( gridobjects . containsKey ( ( Integer ) key ) ) { return ( ConnectivityGrid ) gridobjects . get ( ( Integer ) key ) ; } else { ConnectivityGrid newgrid = new ConnectivityGrid ( $F29907 ( Math , maxRange , cellSizeMultiplier ) ) ; gridobjects . put ( ( Integer ) key , newgrid ) ; return newgrid ; } }
public static String stripLeadingDollar ( String str ) { return $F4432 ( str ) ? str . substring ( NUM00 ) : str ; }
@ AfterClass public static void clearHostContext $F72 throws Exception { $F739 ( System ) }
public PNormNormalization ( double p ) { if $F92586 ( p , Double ) $F11416 ( p ) this . p = p ; }
public void addSeparator $F72 { if $F935 ( log , PlatformLogger ) $F102497 ( log ) }
$F1 public void start ( Stage stage ) throws Exception { CategoryDataset dataset = createDataset ( ) ; JFreeChart chart = createChart ( dataset ) ; ChartViewer viewer = new ChartViewer ( chart ) ; viewer . addChartMouseListener ( this ) ; stage . setScene ( new Scene ( viewer ) ) ; $F249283 ( stage ) stage . setWidth ( NUM00 ) ; stage . setHeight ( NUM00 ) ; $F114746 ( stage ) }
$F10929 ( buf , mSizeLimit , mBuffersByLastUse , pos , Collections , mBuffersBySize , BUF_COMPARATOR , mCurrentSize , trim )
$F1 public void acceptDataPoint ( ChartEvent e ) { if ( e . getReset ( ) ) { m_xCount = NUM00 ; m_max = NUM00 ; m_min = NUM00 ; } if ( m_outputFrame != null ) { boolean refresh = _BOOL ; if ( e . getLegendText ( ) != null & e . getLegendText ( ) != m_legendText ) { m_legendText = e . getLegendText ( ) ; refresh = _BOOL ; } if ( e . getMin ( ) != m_min || e . getMax ( ) != m_max ) { m_oldMax = m_max ; m_oldMin = m_min ; $F268954 ( m_max , e ) m_min = e . getMin ( ) ; refresh = _BOOL ; m_yScaleUpdate = _BOOL ; } if ( refresh ) { $F8798 ( m_legendPanel ) $F8798 ( m_scalePanel ) } acceptDataPoint ( e . getDataPoint ( ) ) ; } m_xCount ++ ; }
public void sub ( NamedRangeSet other ) { List < NamedRange > newRanges = new ArrayList < NamedRange > $F72 ; OUTER_LOOP : for ( NamedRange range : ranges ) { NamedRange thisRange = new NamedRange ( range . start , range . end , range . name ) ; for ( NamedRange otherRange : other . ranges ) { if ( otherRange . start <= thisRange . start && otherRange . end >= thisRange . end ) { continue OUTER_LOOP ; } if ( otherRange . end < thisRange . start || otherRange . start > thisRange . end ) $F845 else if ( otherRange . start <= thisRange . start ) { thisRange . start = otherRange . end + NUM00 ; } else if ( otherRange . end >= thisRange . end ) { thisRange . end = otherRange . start - NUM00 ; } else { newRanges . add ( new NamedRange ( thisRange . start , otherRange . start - NUM00 , thisRange . name ) ) ; thisRange . start = otherRange . end + NUM00 ; } } newRanges . add ( thisRange ) ; } ranges = newRanges ; }
private static Node locateAttrParent ( Element elem , Node attr ) { Node parent = null ; Attr check = elem . getAttributeNode ( attr . getNodeName ( ) ) ; if ( check == attr ) parent = elem ; if ( null == parent ) { for ( Node node = elem . getFirstChild ( ) ; null != node ; node = node . getNextSibling ( ) ) { if ( Node . ELEMENT_NODE == node . getNodeType ( ) ) { parent = locateAttrParent ( ( Element ) node , attr ) ; if ( null != parent ) $F597 } } } return parent ; }
public static Tailer create ( File file , TailerListener listener , long delayMillis , boolean end , int bufSize ) { Tailer tailer = new Tailer ( file , listener , delayMillis , end , bufSize ) ; $F24440 ( thread , tailer ) thread . setDaemon ( _BOOL ) ; $F2346 ( thread ) return tailer ; }
public static boolean isMacOs $F72 $F144200 ( osName )
$F1654 ( values )
public DViewAsn1Dump ( JDialog parent , X509CRL crl ) throws $F31549 { $F15426 ( super , res ) this . crl = crl ; initComponents ( ) ; }
public static String rightTrim ( final String value ) { validate ( value , NULL_ <missing ';'> NUM00 <missing ';'> $F38386 NULL_ NUM00 <missing ';'> $F38387 ; $F8479 ( value ) }
public synchronized void putMessage ( Object obj ) { fifo . addElement ( obj ) ; numMessage ++ ; notifyAll ( ) ; }
public void dispose $F72 { $F84963 ( isDisposed ) setDisposed ( _BOOL ) ; if ( ! menu ) $F47532 ( super ) }
public double signed_distance ( PlaPointFloat p_point ) { double dx = point_b . v_x - point_a . v_x ; double dy = point_b . v_y - point_a . v_y ; double det = dy * ( p_point . v_x - point_a . v_x ) - dx * ( p_point . v_y - point_a . v_y ) ; $F25559 ( length , Math , dx , dy ) return det / length ; }
public static void expandReal ( String numberString , WordRelation wordRelation , Item tokenItem ) { $F1749 ( stringLength , numberString ) int position ; if $F4432 ( numberString ) { $F56208 ( wordRelation , tokenItem ) expandReal ( numberString . substring ( NUM00 , stringLength ) , wordRelation , tokenItem ) ; } else if $F4432 ( numberString ) { $F56208 ( wordRelation , tokenItem ) expandReal ( numberString . substring ( NUM00 , stringLength ) , wordRelation , tokenItem ) ; } else if ( $F12720 ( position , numberString ) != - NUM00 || $F12720 ( position , numberString ) != - NUM00 ) { expandReal ( numberString . substring ( NUM00 , position ) , wordRelation , tokenItem ) ; $F56208 ( wordRelation , tokenItem ) expandReal ( numberString . substring ( position + NUM00 ) , wordRelation , tokenItem ) ; } else if $F48458 ( position , numberString ) { $F11991 ( beforeDot , numberString , position ) if $F4012 ( beforeDot ) { expandReal ( beforeDot , wordRelation , tokenItem ) ; } $F56208 ( wordRelation , tokenItem ) $F36289 ( afterDot , numberString , position ) if $F4012 ( afterDot ) { expandDigits ( afterDot , wordRelation , tokenItem ) ; } } else { expandNumber ( numberString , wordRelation , tokenItem ) ; } }
public static $F1986 ones ( int L ) { double m [ ] = new double [ L ] ; $F9952 ( Arrays , m ) return m ; }
private PermissionRequest submit $F72 { int showRationale = NUM00 ; $F22547 ( requests ) for ( final String permission : mPermissions ) { if ( mActivity . checkSelfPermission ( permission ) != PackageManager . PERMISSION_GRANTED ) { requests . add ( permission ) ; if ( ActivityCompat . shouldShowRequestPermissionRationale ( mActivity , permission ) ) { showRationale ++ ; } } } mRequestCode = mRequestId . addAndGet ( NUM00 ) ; if $F2979 ( requests ) { if ( mCallback != null ) { mCallback . onPermissionsGranted ( ) ; } } else { if ( showRationale == NUM00 ) { ActivityCompat . requestPermissions ( mActivity , mPermissions , mRequestCode ) ; } else $F5795 ( showRationale ) } return this ; }
public void error ( XPathContext xctxt , String msg , $F131 args ) throws $F1872 { $F9737 fmsg = XSLMessages . createXPATHMessage ( msg , args ) ; if ( null != xctxt ) { $F1875 ( eh , xctxt ) TransformerException te = new TransformerException ( fmsg , this ) ; eh . fatalError ( te ) ; } }
public void testSettingANullDeployableProperty $F72 { Deployable deployableElement = new Deployable $F72 ; WAR war = new WAR $F580 ; $F13404 ( properties ) $F91191 ( properties ) deployableElement . setProperties ( properties ) ; deployableElement . setPropertiesOnDeployable ( war , createDefaultProject ( NUM00 , null ) ) ; assertEquals ( NUM00 , war . getContext ( ) ) ; }
private NaviLogger $F72 $F845
public static DeleteSubCommandHandler create ( SubCommandArgumentParser parser , $F303831 ( p ) , SetRelationDefinition $F5162 r ) throws ArgumentException { return new DeleteSubCommandHandler ( parser , p , r , p . child ( r ) ) ; }
protected void removeCycles $F72 { int visited [ ] = $F2315 ( m_nodes ) ; for ( $F1139 ( i , graphMatrix ) ) { if ( visited [ i ] == NUM00 ) { removeCycles2 ( i , visited ) ; visited [ i ] = NUM00 ; } } }
public String toString ( ObjectMatrix3D matrix ) { $F280 ( buf ) boolean oldPrintShape = this . printShape ; this . printShape = _BOOL ; for ( int slice = NUM00 ; slice < matrix . slices ( ) ; slice ++ ) { if ( slice != NUM00 ) buf . append ( sliceSeparator ) ; buf . append ( toString ( matrix . viewSlice ( slice ) ) ) ; } this . printShape = oldPrintShape ; if ( printShape ) buf . insert ( NUM00 , shape ( matrix ) + NUM00 ) ; $F92 ( buf ) }
int findAncestor ( XPathContext xctxt , XPath fromMatchPattern , XPath countMatchPattern , int context , ElemNumber namespaceContext ) throws $F1872 { DTM dtm = xctxt . getDTM ( context ) ; while ( DTM . NULL != context ) { if ( null != fromMatchPattern ) { if ( fromMatchPattern . getMatchScore ( xctxt , context ) != XPath . MATCH_SCORE_NONE ) $F5153 } if ( null != countMatchPattern ) { if ( countMatchPattern . getMatchScore ( xctxt , context ) != XPath . MATCH_SCORE_NONE ) $F5153 } context = dtm . getParent ( context ) ; } return context ; }
public synchronized void kill $F72 { running = _BOOL ; closed = _BOOL ; $F29053 ( STDIN ) try $F17624 ( process ) $F3957 }
public final ByteBuffer encode ( CharBuffer in ) throws CharacterCodingException { int length = ( int ) ( in . remaining ( ) * averageBytesPerChar ) ; $F87627 ( out , ByteBuffer , length ) reset ( ) ; while ( state != FLUSHED ) { CoderResult result = encode ( in , out , _BOOL ) ; if ( result == CoderResult . OVERFLOW ) { out = allocateMore ( out ) ; $F598 } else { checkCoderResult ( result ) ; } result = flush ( out ) ; if ( result == CoderResult . OVERFLOW ) $F8576 ( out , allocateMore ) else { checkCoderResult ( result ) ; } } $F14257 ( out ) return out ; }
public static Metrics create $F3501 ( dimensionMap ) { $F2539 map = Maps . newTreeMap ( ) ; map . putAll ( dimensionMap ) ; return new Metrics ( Collections . unmodifiableMap ( map ) ) ; }
protected $F6969 resolveClass ( ObjectStreamClass classDesc ) throws $F6427 { Object annotation = readLocation ( ) ; $F20605 ( className , classDesc ) ClassLoader defaultLoader = skipDefaultResolveClass ? null : latestUserDefinedLoader ( ) ; String codebase = null ; if ( ! useCodebaseOnly && annotation instanceof String ) $F80631 ( codebase , annotation ) try { return RMIClassLoader . loadClass ( codebase , className , defaultLoader ) ; } catch ( AccessControlException e ) $F8587 ( checkSunClass , className , e ) catch ( ClassNotFoundException e ) { try { if ( Character . isLowerCase ( className . charAt ( NUM00 ) ) && $F8907 ( className ) ) { return super . resolveClass ( classDesc ) ; } } catch ( ClassNotFoundException e2 ) $F845 throw e ; } }
public IOUtils $F72 $F5795 ( super )
public boolean contains ( final CreatureRespawnPoint point ) { $F1933 ( point , _BOOL ) final IRPZone entityZone = point . getZone ( ) ; return zone . equals ( entityZone ) && shape . contains ( $F5048 ( point ) ) ; }
public void add $F95906 ( i , buffer , offset , length ) { if ( _length + length > _capacity ) ensureCapacity ( _length + length ) ; $F75427 ( System , _buffer , i , length , _length ) System . arraycopy ( buffer , offset , _buffer , i , length ) ; _length += length ; }
public boolean isUseAntiAlias $F72 { return useAntiAlias ; }
private void loadLevelFile $F19845 ( tableName , columnName , cubeName , schemaName ) { String baseLocation = CarbonUtil . getCarbonStorePath ( schemaName , cubeName ) ; baseLocation = baseLocation + File . separator + schemaName + File . separator + cubeName ; if $F10471 ( loadFolderList ) { checkAndUpdateFolderList ( baseLocation ) ; } try { $F5237 filesArray = null ; for ( File loadFoler : loadFolderList ) { filesArray = getFilesArray ( loadFoler , tableName + NUM00 + columnName ) ; if ( null != filesArray ) { for ( $F1139 ( i , filesArray ) ) { readLevelFileAndUpdateCache ( filesArray [ i ] , tableName + NUM00 + columnName ) ; } } } } catch ( IOException e ) $F21338 ( LOGGER ) }
protected void doValidateZeroLongFile ( String path , String filename , long size , boolean checkContents ) { $F4453 ( inFile , path , filename ) DataInputStream inStream = null ; $F6848 ( Log , LOG_TAG , filename , path ) try { inStream = new DataInputStream $F18079 ( inFile ) ; if ( checkContents ) { for ( long i = NUM00 ; i < size ; ++ i ) { if ( inStream . readLong ( ) != NUM00 ) $F1328 ( fail , filename ) } } $F2727 ( inStream ) Log . i ( LOG_TAG , NUM00 + filename + NUM00 + size + NUM00 ) ; } catch ( IOException e ) { $F60313 ( fail , inFile , e ) } }
protected void write ( DataOutputStream stream ) throws Exception { Iterator < NBT_Tag > iter = elements . iterator ( ) ; while $F2921 ( iter ) { NBT_Tag ret = iter . next ( ) ; ret . save ( stream ) ; } TAG_End end = new TAG_End $F580 ; end . save ( stream ) ; }
public String applyMask ( String mask , String value ) { return ( String ) getMaskOrGetCursorIndex ( mask , value , NUM00 , _BOOL ) ; }
private void computeDuration $F72 { $F266849 ( duration , System , start ) total_duration += duration ; }
$F22330 $F1 public $F96 serialize ( List list ) { $F1275 ( list ) $F11550 ( size , list ) $F64664 ( valueIDs , size ) $F37191 ( valueBytes , size ) int totalSize = NUM00 + size * NUM00 ; int i = NUM00 ; $F10531 ( iter , list ) while $F2921 ( iter ) { final Object value = iter . next ( ) ; $F20850 ( valueClass , value ) int valueTypeID = EntityDefinitionManager . getIDBySerDerClass ( valueClass ) ; if ( valueTypeID == - NUM00 ) { if ( value instanceof List ) { valueClass = List . class ; valueTypeID = EntityDefinitionManager . getIDBySerDerClass ( valueClass ) ; } else if ( value instanceof Map ) { valueClass = $F64671 ; valueTypeID = EntityDefinitionManager . getIDBySerDerClass ( valueClass ) ; } else { throw new IllegalArgumentException $F47919 ( valueClass ) ; } } valueIDs [ i ] = valueTypeID ; final EntitySerDeser valueSerDer = EntityDefinitionManager . getSerDeser ( valueClass ) ; if ( valueSerDer == null ) { throw new IllegalArgumentException $F47919 ( valueClass ) ; } valueBytes [ i ] = valueSerDer . serialize ( value ) ; totalSize += valueBytes [ i ] . length ; ++ i ; } $F4727 ( result , totalSize ) int offset = NUM00 ; ByteUtil . intToBytes ( size , result , offset ) ; offset += NUM00 ; for ( i = NUM00 ; i < size ; ++ i ) { ByteUtil . intToBytes ( valueIDs [ i ] , result , offset ) ; offset += NUM00 ; ByteUtil . intToBytes ( valueBytes [ i ] . length , result , offset ) ; offset += NUM00 ; System . arraycopy ( valueBytes [ i ] , NUM00 , result , offset , valueBytes [ i ] . length ) ; offset += valueBytes [ i ] . length ; } return result ; }
public int handleNITFHeader ( BinaryFile binFile ) { try { $F96 nitfArray = binFile . readBytes ( NUM00 , _BOOL ) ; $F605 ( nitf , nitfArray ) binFile . seek ( RPF_DATE_LOCATION ) ; nitfArray = binFile . readBytes ( NUM00 , _BOOL ) ; $F84838 ( nitf , nitfArray ) if $F141797 ( nitf ) $F1082 binFile . seek ( RPF_DATE_LOCATION + TOC_NITF_HEADER_LENGTH ) ; nitfArray = binFile . readBytes ( NUM00 , _BOOL ) ; $F84838 ( nitf , nitfArray ) if $F141797 ( nitf ) return TOC_NITF_HEADER_LENGTH ; binFile . seek ( RPF_DATE_LOCATION + FRAME_SHORT_NITF_HEADER_LENGTH ) ; nitfArray = binFile . readBytes ( NUM00 , _BOOL ) ; $F84838 ( nitf , nitfArray ) if $F141797 ( nitf ) return FRAME_SHORT_NITF_HEADER_LENGTH ; binFile . seek ( RPF_DATE_LOCATION + FRAME_LONG_NITF_HEADER_LENGTH ) ; nitfArray = binFile . readBytes ( NUM00 , _BOOL ) ; $F84838 ( nitf , nitfArray ) if $F141797 ( nitf ) return FRAME_LONG_NITF_HEADER_LENGTH ; } catch ( IOException e ) { $F17662 ( Debug , e ) $F150 } catch ( FormatException f ) { $F17662 ( Debug , f ) $F150 } $F150 }
public BufferedImage takeScreenshot $F72 { Debug . setDebugLevel ( NUM00 ) ; File scrFile = driver . getScreenshotAs ( OutputType . FILE ) ; BufferedImage bufferedImage = null ; try $F616 ( bufferedImage , ImageIO , scrFile ) $F12241 ( e ) return bufferedImage ; }
private void pickCenterOverlap ( ScoutWidget [ ] list ) { for ( $F1139 ( i , list ) ) { ScoutWidget scoutWidget = list [ i ] ; float centerX = scoutWidget . getX ( ) + $F77576 ( scoutWidget ) ; float centerY = $F167223 ( scoutWidget ) ; for ( $F1139 ( j , list ) ) { $F73688 ( i , j ) ScoutWidget widget = list [ j ] ; if ( scoutWidget . isGuideline ( ) ) $F1448 if ( ! widget . isGuideline ( ) && ScoutWidget . distance ( scoutWidget , widget ) > MAX_DIST_FOR_CENTER_OVERLAP ) $F1448 if ( ! widget . isGuideline ( ) || widget . isVerticalGuideline ( ) ) { if ( Math . abs ( widget . getX ( ) - centerX ) < CENTER_ERROR ) { scoutWidget . setEdgeCentered ( NUM00 , widget , Direction . WEST ) ; } if ( Math . abs ( $F7573 ( widget ) - centerX ) < CENTER_ERROR ) { scoutWidget . setEdgeCentered ( NUM00 , widget , Direction . EAST ) ; } } if ( ! widget . isGuideline ( ) || widget . isHorizontalGuideline ( ) ) { if ( Math . abs ( widget . getY ( ) - centerY ) < CENTER_ERROR ) { scoutWidget . setEdgeCentered ( NUM00 , widget , Direction . NORTH ) ; } if ( Math . abs ( $F175125 ( widget ) - centerY ) < CENTER_ERROR ) { scoutWidget . setEdgeCentered ( NUM00 , widget , Direction . SOUTH ) ; } } } } }
