[{"code": "$F60268 ( value ) "}, {"code": "public void onStart $F72 $F845 "}, {"code": "$F1 protected void propertyChange ( PropertyChangeEvent evt ) { \n\tif ( SeaGlassLookAndFeel . shouldUpdateStyle ( evt ) ) { \n\t\tupdateStyle ( ( JTextComponent ) evt . getSource ( ) ) ; \n\t\t} \n\tsuper . propertyChange ( evt ) ; \n\t} \n"}, {"code": "$F1113 public PsiQuery filter ( $F1113 final Class < ? extends PsiNamedElement > clazz , $F1113 final String name ) { \n\tfinal Set $F265759 result = new HashSet $F265759 $F6 ( Arrays , myPsiElements ) ; \n\tfor ( final PsiElement element : myPsiElements ) { \n\t\tfinal PsiNamedElement namedElement = PyUtil . as ( element , clazz ) ; \n\t\tif ( ( namedElement == null ) || ( ! $F3174 ( name , namedElement ) ) ) $F106 ( result , element ) } \n\treturn new PsiQuery ( result . toArray ( new PsiElement $F2313 ( result ) ) ) ; \n\t} \n"}, {"code": "protected void writeQualifiedName ( String nsAlias , String name ) throws IOException { \n\tif $F22 ( nsAlias ) { \n\t\twriter . write ( nsAlias ) ; \n\t\t$F3410 ( writer ) } \n\twriter . write ( name ) ; \n\t} \n"}, {"code": "public TextEditor deleteAll ( String pattern ) $F73165 ( replaceAll , pattern ) "}, {"code": "public synchronized GcmHelper addRegistrationCallback ( $F4170 Context context , $F4170 GcmRegistrationListener registrationListener , boolean sticky ) { \n\tif ( null == registrationCallbacks ) { \n\t\tregistrationCallbacks = new ConcurrentLinkedQueue $F200 $F72 ; \n\t\t} \n\tregistrationCallbacks . add ( registrationListener ) ; \n\tif ( sticky && ! TextUtils . isEmpty ( this . pushToken ) ) { \n\t\tregistrationListener . onTokenAvailable ( context , pushToken , _BOOL ) ; \n\t\t} \n\treturn this ; \n\t} \n"}, {"code": "$F1 public void acceptTrainingSet ( TrainingSetEvent e ) { \n\tInstances trainingSet = e . getTrainingSet ( ) ; \n\t$F179981 ( dse , this , trainingSet ) acceptDataSet ( dse ) ; \n\t} \n"}, {"code": "$F4203 $F5675 onFind ( $F20474 modelClass , $F806 columns , $F806 conditions , String orderBy , String limit , boolean isEager ) { \n\tBaseUtility . checkConditionsCorrect ( conditions ) ; \n\t$F5675 dataList = query ( modelClass , columns , getWhereClause ( conditions ) , getWhereArgs ( conditions ) , null , null , orderBy , limit , $F19610 ( getForeignKeyAssociations , modelClass , isEager ) ) ; \n\treturn dataList ; \n\t} \n"}, {"code": "private boolean isAgentEmpty ( Agent agent ) { \n\tif ( agent != null ) { \n\t\tString first = agent . getFirstName ( ) ; \n\t\tString last = agent . getLastName ( ) ; \n\t\tString email = agent . getEmail ( ) ; \n\t\tString home = agent . getHomepage ( ) ; \n\t\tString org = agent . getOrganisation ( ) ; \n\t\tString phone = agent . getPhone ( ) ; \n\t\tString position = agent . getPosition ( ) ; \n\t\tString city = null ; \n\t\tString street = null ; \n\t\tString country = null ; \n\t\tString code = null ; \n\t\tString province = null ; \n\t\tAddress address = agent . getAddress ( ) ; \n\t\tif ( address != null ) { \n\t\t\tcity = address . getCity ( ) ; \n\t\t\tstreet = address . getAddress ( ) ; \n\t\t\tcountry = address . getCountry ( ) ; \n\t\t\tcode = address . getPostalCode ( ) ; \n\t\t\tprovince = address . getProvince ( ) ; \n\t\t\t} \n\t\tString directory = null ; \n\t\tString identifier = null ; \n\t\tList < UserId > userIds = agent . getUserIds ( ) ; \n\t\tif $F5973 ( userIds ) { \n\t\t\tUserId userId = userIds . get ( NUM00 ) ; \n\t\t\tdirectory = userId . getDirectory ( ) ; \n\t\t\tidentifier = userId . getIdentifier ( ) ; \n\t\t\t} \n\t\treturn ( Strings . isNullOrEmpty ( city ) && Strings . isNullOrEmpty ( street ) && Strings . isNullOrEmpty ( country ) && Strings . isNullOrEmpty ( code ) && Strings . isNullOrEmpty ( province ) && Strings . isNullOrEmpty ( first ) && Strings . isNullOrEmpty ( last ) && Strings . isNullOrEmpty ( email ) && Strings . isNullOrEmpty ( home ) && Strings . isNullOrEmpty ( org ) && Strings . isNullOrEmpty ( phone ) && Strings . isNullOrEmpty ( position ) && Strings . isNullOrEmpty ( directory ) && Strings . isNullOrEmpty ( identifier ) ) ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static $F96 calendarToRawBytes ( Calendar timestamp , boolean honorDeviceTimeOffset ) { \n\tif ( honorDeviceTimeOffset ) { \n\t\tint offsetInHours = MiBandCoordinator . getDeviceTimeOffsetHours ( ) ; \n\t\tif ( offsetInHours != NUM00 ) { \n\t\t\ttimestamp . add ( Calendar . HOUR_OF_DAY , offsetInHours ) ; \n\t\t\t} \n\t\t} \n\t$F96 year = fromUint16 ( $F21621 ( timestamp , Calendar ) ) ; \n\treturn new byte [ ] { \n\t\tyear [ NUM00 ] , year [ NUM00 ] , fromUint8 ( $F21623 ( timestamp , Calendar ) + NUM00 ) , fromUint8 ( $F36854 ( timestamp , Calendar ) ) , fromUint8 ( $F13065 ( timestamp , Calendar ) ) , fromUint8 ( $F21629 ( timestamp , Calendar ) ) , fromUint8 ( $F21631 ( timestamp , Calendar ) ) , dayOfWeekToRawBytes ( timestamp ) , NUM00 } \n\t; \n\t} \n"}, {"code": "$F2192 ( bits , result , byteSegments , codewordPosition , d1 , unrandomize255State , count , FormatException , bytes , i , uee ) "}, {"code": "protected void initBPOrderDetails ( int C_BPartner_ID , boolean forInvoice ) { \n\t$F81293 ( log , C_BPartner_ID ) KeyNamePair pp = new KeyNamePair ( NUM00 , NUM00 ) ; \n\torderField . removeActionListener ( this ) ; \n\t$F213890 ( orderField ) orderField . addItem ( pp ) ; \n\t$F104317 list = loadOrderData ( C_BPartner_ID , forInvoice , sameWarehouseCb . isSelected ( ) ) ; \n\t$F104320 ( knp , list , orderField ) $F53383 ( orderField ) orderField . addActionListener ( this ) ; \n\tinitBPDetails ( C_BPartner_ID ) ; \n\t} \n"}, {"code": "public ModpackInitializationPanel ( WizardController controller , Map wizardData , $F11968 versions , String selVersion ) { \n\tinitComponents ( ) ; \n\tthis . controller = controller ; \n\tthis . wizardData = wizardData ; \n\twizardData . put ( KEY_GAME_VERSION , versions ) ; \n\t$F545 ( wizardData , selVersion ) wizardData . put ( KEY_INCLUDING_LAUNCHER , _BOOL ) ; \n\tconfigureComboContents ( ) ; \n\tcheckProblem ( ) ; \n\t} \n"}, {"code": "public synchronized void remove ( int index ) { \n\tsuper . remove ( index ) ; \n\tdouble removedValue = mValue . remove ( index ) ; \n\tif ( removedValue == mMinValue || removedValue == mMaxValue ) $F5795 ( initRange ) } \n"}, {"code": "private boolean coordIsCalendarCell ( float y ) { \n\treturn y > cellHeight ; \n\t} \n"}, {"code": "protected void sprint ( double doubleField ) $F45719 ( sprint , String , doubleField ) "}, {"code": "private int attributeMap ( String name ) { \n\t$F99426 ( num , map , name ) $F1084 ( num ) $F10182 ( num ) } \n"}, {"code": "private void groupPlayerStandingCSV $F72 { \n\tfor ( PlayerQB p : teamQBs ) { \n\t\tif ( p . year == NUM00 ) teamRSs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamFRs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamSOs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamJRs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamSRs . add ( p ) ; \n\t\t} \n\tfor ( PlayerRB p : teamRBs ) { \n\t\tif ( p . year == NUM00 ) teamRSs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamFRs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamSOs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamJRs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamSRs . add ( p ) ; \n\t\t} \n\tfor ( PlayerWR p : teamWRs ) { \n\t\tif ( p . year == NUM00 ) teamRSs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamFRs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamSOs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamJRs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamSRs . add ( p ) ; \n\t\t} \n\tfor ( PlayerK p : teamKs ) { \n\t\tif ( p . year == NUM00 ) teamRSs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamFRs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamSOs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamJRs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamSRs . add ( p ) ; \n\t\t} \n\tfor ( PlayerOL p : teamOLs ) { \n\t\tif ( p . year == NUM00 ) teamRSs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamFRs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamSOs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamJRs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamSRs . add ( p ) ; \n\t\t} \n\tfor ( PlayerS p : teamSs ) { \n\t\tif ( p . year == NUM00 ) teamRSs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamFRs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamSOs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamJRs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamSRs . add ( p ) ; \n\t\t} \n\tfor ( PlayerCB p : teamCBs ) { \n\t\tif ( p . year == NUM00 ) teamRSs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamFRs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamSOs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamJRs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamSRs . add ( p ) ; \n\t\t} \n\tfor ( PlayerF7 p : teamF7s ) { \n\t\tif ( p . year == NUM00 ) teamRSs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamFRs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamSOs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamJRs . add ( p ) ; \n\t\telse if ( p . year == NUM00 ) teamSRs . add ( p ) ; \n\t\t} \n\t} \n"}, {"code": "public String list $F72 throws IOException , TomcatManagerException { \n\treturn invoke ( $F244022 ) ; \n\t} \n"}, {"code": "public AttributeFiller ( AttributesImpl attributes , PO poToAutoFill ) { \n\t$F725 ( attributes ) atts = attributes ; \n\tpo = poToAutoFill ; \n\t} \n"}, {"code": "public static final void toByteArray ( ByteArrayOutputStream output , String str ) { \n\t$F2329 ( str ) $F25097 ( output ) $F1749 ( max , str ) for ( $F119 ( i , max ) ) { \n\t\t$F8205 ( b , str , i ) if ( ( b >= NUM00 ) && ( b <= NUM00 ) ) { \n\t\t\tswitch ( b ) { \n\t\t\t\t$F3366 $F3366 $F25097 ( output ) $F597 } \n\t\t\toutput . write ( b ) ; \n\t\t\t} \n\t\telse { \n\t\t\t$F25097 ( output ) switch ( b ) { \n\t\t\t\t$F3366 $F25097 ( output ) $F597 $F3366 $F25097 ( output ) $F597 $F3366 $F25097 ( output ) $F597 $F3366 $F25097 ( output ) $F597 $F3366 $F25097 ( output ) $F597 $F1267 $F25097 ( output ) int b3 = b > > NUM00 ; \n\t\t\t\tint b4 = b & NUM00 ; \n\t\t\t\tif ( b4 < NUM00 ) b4 += NUM00 ; \n\t\t\t\telse b4 += NUM00 ; \n\t\t\t\tint b2 = b3 > > NUM00 ; \n\t\t\t\tb3 &= NUM00 ; \n\t\t\t\tif ( b3 < NUM00 ) b3 += NUM00 ; \n\t\t\t\telse b3 += NUM00 ; \n\t\t\t\tint b1 = b2 > > NUM00 ; \n\t\t\t\tb2 &= NUM00 ; \n\t\t\t\tif ( b2 < NUM00 ) b2 += NUM00 ; \n\t\t\t\telse b2 += NUM00 ; \n\t\t\t\tif ( b1 < NUM00 ) b1 += NUM00 ; \n\t\t\t\telse b1 += NUM00 ; \n\t\t\t\toutput . write ( b1 ) ; \n\t\t\t\toutput . write ( b2 ) ; \n\t\t\t\toutput . write ( b3 ) ; \n\t\t\t\toutput . write ( b4 ) ; \n\t\t\t\t$F597 } \n\t\t\t} \n\t\t} \n\t$F25097 ( output ) } \n"}, {"code": "$F133772 ( RequestMethod ) $F4586 public RestWrapper insert ( $F100302 $F100303 File file , BindingResult bindingResult , Principal principal ) { \n\tRestWrapper restWrapper = null ; \n\t$F100315 ( bindingResult , bindingResultError ) try { \n\t\tfile . setCreationTS ( DateConverter . stringToDate ( file . getTableCreationTS ( ) ) ) ; \n\t\tfileDAO . insert ( file ) ; \n\t\t$F4608 ( restWrapper , file , RestWrapper ) LOGGER . info ( NUM00 + file . getBatchId ( ) + NUM00 + principal . getName ( ) + file ) ; \n\t\t} \n\t$F100376 ( LOGGER , e , restWrapper , RestWrapper ) return restWrapper ; \n\t} \n"}, {"code": "private void enableUpdates $F72 { \n\tif ( lmgr != null ) { \n\t\ttry { \n\t\t\tlmgr . addGpsStatusListener ( this ) ; \n\t\t\tlmgr . requestLocationUpdates ( LocationManager . GPS_PROVIDER , gpsLoggingInterval , NUM00 , this ) ; \n\t\t\t} \n\t\tcatch ( SecurityException e ) $F13955 ( Log , TAG ) } \n\t} \n"}, {"code": "private void addInteger $F72 { \n\tint oldPos = pos - NUM00 ; \n\tString literal = scanInteger ( ) ; \n\tfinal String substring ; \n\tfinal int radix ; \n\tif $F418 ( literal ) { \n\t\tradix = NUM00 ; \n\t\tsubstring = literal . substring ( NUM00 ) ; \n\t\t} \n\telse if ( literal . startsWith ( NUM00 ) && $F20 ( literal ) ) { \n\t\tradix = NUM00 ; \n\t\tsubstring = literal . substring ( NUM00 ) ; \n\t\t} \n\telse { \n\t\tradix = NUM00 ; \n\t\tsubstring = literal ; \n\t\t} \n\tint value = NUM00 ; \n\ttry { \n\t\tvalue = Integer . parseInt ( substring , radix ) ; \n\t\t} \n\tcatch ( NumberFormatException e ) $F35015 ( error , radix , literal ) addToken ( TokenKind . INT , oldPos , pos , value ) ; \n\t} \n"}, {"code": "public void removeMouseListener ( GlobalMouseListener listener ) $F106 ( listeners , listener ) "}, {"code": "public XMLDocument ( double version , boolean standalone ) { \n\tprolog = new $F20764 $F989 ; \n\t$F280 ( versionStr ) $F84 ( versionStr ) versionStr . append ( version ) ; \n\t$F84 ( versionStr ) if ( standalone ) $F84 ( versionStr ) else $F84 ( versionStr ) this . versionDecl = versionStr . toString ( ) ; \n\t} \n"}, {"code": "public ObjectName createDistributionLocator ( String host , int port , String workingDirectory , String productDirectory , String remoteCommand ) throws MalformedObjectNameException { \n\ttry { \n\t\tDistributionLocatorJmxImpl locator = ( DistributionLocatorJmxImpl ) addDistributionLocator ( ) ; \n\t\tDistributionLocatorConfig config = locator . getConfig ( ) ; \n\t\tconfig . setHost ( host ) ; \n\t\tconfig . setPort ( port ) ; \n\t\tconfig . setWorkingDirectory ( workingDirectory ) ; \n\t\tconfig . setProductDirectory ( productDirectory ) ; \n\t\tconfig . setRemoteCommand ( remoteCommand ) ; \n\t\treturn new ObjectName ( locator . getMBeanName ( ) ) ; \n\t\t} \n\tcatch ( RuntimeException e ) { \n\t\tlogger . warn ( $F1573 ( e ) ) ; \n\t\tthrow e ; \n\t\t} \n\t$F79506 ( SystemFailure , err ) catch ( Error e ) { \n\t\t$F79507 ( SystemFailure ) $F1575 ( logger , e ) throw e ; \n\t\t} \n\t} \n"}, {"code": "void applyCenterPanel ( GrassMarlin ui ) { \n\tif ( treeViewComponent != null ) { \n\t\tcenterPanelComponent . add ( treeViewComponent , SplitPane . Position . CENTER ) ; \n\t\t} \n\tcenterPanelComponent . add ( graphComponent , SplitPane . Position . RIGHT ) ; \n\tcenterPanelComponent . add ( logComponent , SplitPane . Position . LEFT_BOTTOM ) ; \n\tBorder b = BorderFactory . createMatteBorder ( NUM00 , NUM00 , NUM00 , NUM00 , Color . GRAY ) ; \n\tBorder b2 = BorderFactory . createMatteBorder ( NUM00 , NUM00 , NUM00 , NUM00 , Color . GRAY ) ; \n\ttreeViewComponent . setBorder ( b2 ) ; \n\tgraphComponent . setBorder ( b ) ; \n\tlogComponent . setBorder ( b2 ) ; \n\tcenterPanelComponent . setInitialSize ( x , y ) ; \n\t$F32537 ( d ) ui . add ( new Filler ( d , d , d ) , BorderLayout . WEST ) ; \n\tui . add ( new Filler ( d , d , d ) , BorderLayout . EAST ) ; \n\t$F30063 ( ui , centerPanelComponent , BorderLayout ) } \n"}, {"code": "private boolean isAbstract ( String source ) { \n\tint nonterminalCount = NUM00 ; \n\tfor ( $F55140 ( t , source ) ) { \n\t\tif $F129995 ( t , NT_REGEX ) return _BOOL ; \n\t\tnonterminalCount ++ ; \n\t\t} \n\treturn nonterminalCount != NUM00 ; \n\t} \n"}, {"code": "public static String URIforPortablePath ( String path ) { \n\tif ( path . startsWith ( FileUtil . PREFERENCES ) ) { \n\t\treturn path . replaceFirst ( FileUtil . PREFERENCES , NUM00 ) ; \n\t\t} \n\telse if ( path . startsWith ( FileUtil . PROGRAM ) ) { \n\t\treturn path . replaceFirst ( FileUtil . PROGRAM , NUM00 ) ; \n\t\t} \n\telse $F1337 } \n"}, {"code": "public int hashCode $F72 { \n\treturn Float . floatToIntBits ( value ) ; \n\t} \n"}, {"code": "public static void log ( Throwable error , String message , Object ... args ) { \n\tif ( loggingEnabled ) { \n\t\tLog . d ( TAG , args . length == NUM00 ? message : String . format ( message , args ) , error ) ; \n\t\t} \n\t} \n"}, {"code": "public void addExtensionNamespace ( String uri , ExtensionHandler extNS ) $F1717 ( m_extensionFunctionNamespaces , uri , extNS ) "}, {"code": "private void generateTypeParameterInfos ( BinaryMember parent , $F1469 signature , HashMap newElements , ArrayList typeParameterHandles ) { \n\t$F8249 ( signature ) $F10849 typeParameterSignatures = Signature . getTypeParameters ( signature ) ; \n\tfor ( $F151668 ( i , typeParameterCount , typeParameterSignatures ) ) { \n\t\t$F16051 ( typeParameterSignature , typeParameterSignatures , i ) $F1469 typeParameterName = Signature . getTypeVariable ( typeParameterSignature ) ; \n\t\t$F127812 ( CharOperation , typeParameterSignature ) ; \n\t\t$F10849 typeParameterBoundSignatures = Signature . getTypeParameterBounds ( typeParameterSignature ) ; \n\t\tint boundLength = typeParameterBoundSignatures . length ; \n\t\t$F10849 typeParameterBounds = new char [ boundLength ] [ ] ; \n\t\tfor ( $F119 ( j , boundLength ) ) { \n\t\t\ttypeParameterBounds [ j ] = Signature . toCharArray ( typeParameterBoundSignatures [ j ] ) ; \n\t\t\t} \n\t\tTypeParameter typeParameter = new TypeParameter ( parent , parent . manager , new String ( typeParameterName ) ) ; \n\t\tTypeParameterElementInfo info = new TypeParameterElementInfo $F72 ; \n\t\tinfo . bounds = typeParameterBounds ; \n\t\tinfo . boundsSignatures = typeParameterBoundSignatures ; \n\t\ttypeParameterHandles . add ( typeParameter ) ; \n\t\twhile $F1710 ( newElements , typeParameter ) typeParameter . occurrenceCount ++ ; \n\t\tnewElements . put ( typeParameter , info ) ; \n\t\t} \n\t} \n"}, {"code": "public final void testNextBytesbyteArray02 $F72 { \n\t$F96 myBytes ; \n\t$F96 myBytes1 ; \n\t$F96 myBytes2 ; \n\tfor ( int i = NUM00 ; \n\ti < LENGTH ; \n\ti += INCR ) { \n\t\t$F1325 ( myBytes , i ) for ( $F119 ( j , i ) ) { \n\t\t\tmyBytes [ j ] = $F8046 ( j ) ; \n\t\t\t} \n\t\tsr . setSeed ( myBytes ) ; \n\t\tsr2 . setSeed ( myBytes ) ; \n\t\tfor ( int k = NUM00 ; \n\t\tk < LENGTH ; \n\t\tk += INCR ) { \n\t\t\t$F1325 ( myBytes1 , k ) $F1325 ( myBytes2 , k ) sr . nextBytes ( myBytes1 ) ; \n\t\t\tsr2 . nextBytes ( myBytes2 ) ; \n\t\t\tfor ( $F119 ( l , k ) ) { \n\t\t\t\tassertFalse ( NUM00 + l + NUM00 + k + NUM00 + i + NUM00 + myBytes1 [ l ] + NUM00 + myBytes2 [ l ] , myBytes1 [ l ] != myBytes2 [ l ] ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tfor ( int n = NUM00 ; \n\tn < LENGTH ; \n\tn += INCR ) { \n\t\tint n1 = NUM00 ; \n\t\tint n2 = NUM00 ; \n\t\tint n3 = NUM00 ; \n\t\t$F459355 ( bytes1 , n1 ) $F459355 ( bytes2 , n2 ) for ( $F1139 ( k , bytes1 ) ) { \n\t\t\tsr . nextBytes ( bytes1 [ k ] ) ; \n\t\t\t} \n\t\tfor ( $F1139 ( k , bytes2 ) ) { \n\t\t\tsr2 . nextBytes ( bytes2 [ k ] ) ; \n\t\t\t} \n\t\tfor ( $F119 ( k , n3 ) ) { \n\t\t\tint i1 = k / n1 ; \n\t\t\tint i2 = k % n1 ; \n\t\t\tint i3 = k / n2 ; \n\t\t\tint i4 = k % n2 ; \n\t\t\tassertTrue ( NUM00 + i1 + NUM00 + i2 + NUM00 + i3 + NUM00 + i4 , bytes1 [ i1 ] [ i2 ] == bytes2 [ i3 ] [ i4 ] ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F9538 ( takeLock , this , notEmpty ) "}, {"code": "public RoutingInfo ( Object o ) { \n\tthis . text = o . toString ( ) ; \n\t} \n"}, {"code": "$F183298 ( view , cache ) "}, {"code": "public static CertChainKeyPair generateSigned ( String fqdn , X509Certificate issuerCertificate , PrivateKey issuerPrivateKey ) { \n\ttry { \n\t\treturn generateCertificateAndSign ( fqdn , issuerCertificate , issuerPrivateKey , getServerExtensions ( issuerCertificate ) ) ; \n\t\t} \n\tcatch ( CertificateException | OperatorCreationException | NoSuchAlgorithmException | IOException e ) { \n\t\tthrow new RuntimeException ( String . format ( $F10629 ( e ) ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "$F43398 ( animator , ValueAnimator , nameValueList , mPendingAnimations , propertyMask , propertyCount , i , nameValuesHolder , mAnimatorMap , mAnimatorEventListener , mStartDelaySet , mStartDelay , mDurationSet , mDuration , mInterpolatorSet , mInterpolator ) "}, {"code": "public void addRequest ( Request request ) $F207 ( requestSet , request ) "}, {"code": "public static double logpmf ( double x , int n , double p ) { \n\tif ( x < NUM00 || x > n ) $F86429 ( Double ) if ( p <= NUM00 ) { \n\t\treturn x == NUM00 ? NUM00 : Double . NEGATIVE_INFINITY ; \n\t\t} \n\tif ( p >= NUM00 ) { \n\t\treturn x == n ? NUM00 : Double . NEGATIVE_INFINITY ; \n\t\t} \n\tfinal double q = NUM00 - p ; \n\tif ( x == NUM00 ) { \n\t\tif ( p < NUM00 ) { \n\t\t\treturn - devianceTerm ( n , n * q ) - n * p ; \n\t\t\t} \n\t\telse { \n\t\t\treturn n * Math . log ( q ) ; \n\t\t\t} \n\t\t} \n\tif ( x == n ) { \n\t\tif ( p > NUM00 ) { \n\t\t\treturn - devianceTerm ( n , n * p ) - n * q ; \n\t\t\t} \n\t\telse { \n\t\t\treturn n * Math . log ( p ) ; \n\t\t\t} \n\t\t} \n\tfinal double lc = stirlingError ( n ) - stirlingError ( x ) - stirlingError ( n - x ) - devianceTerm ( x , n * p ) - devianceTerm ( n - x , n * q ) ; \n\tfinal double f = ( MathUtil . TWOPI * x * ( n - x ) ) / n ; \n\treturn lc - NUM00 * Math . log ( f ) ; \n\t} \n"}, {"code": "private void byte2hex ( byte b , StringBuffer buf ) { \n\t$F1469 hexChars = $F32662 ; \n\tint $F84703 ( high , b ) ; \n\t$F74266 ( low , b ) $F6939 ( buf , hexChars , high ) $F6939 ( buf , hexChars , low ) } \n"}, {"code": "public static List < GeoTimeSerie > timesplit ( GeoTimeSerie gts , long quietperiod , int minvalues , String labelname ) { \n\tList < GeoTimeSerie > series = new ArrayList < GeoTimeSerie > $F72 ; \n\tif ( NUM00 == gts . values || gts . hasLabel ( labelname ) ) { \n\t\tseries . add ( gts . clone ( ) ) ; \n\t\treturn series ; \n\t\t} \n\tsort ( gts , _BOOL ) ; \n\tlong lasttick = gts . ticks [ NUM00 ] ; \n\tint idx = NUM00 ; \n\tint gtsid = NUM00 ; \n\tGeoTimeSerie serie = new GeoTimeSerie ( gts . lastbucket , gts . bucketcount , gts . bucketspan , NUM00 ) ; \n\t$F69429 ( serie , gts ) $F13404 ( labels ) labels . putAll ( gts . getLabels ( ) ) ; \n\tlabels . put ( labelname , Integer . toString ( gtsid ) ) ; \n\tserie . setLabels ( labels ) ; \n\twhile ( idx < gts . values ) { \n\t\tif ( gts . ticks [ idx ] - lasttick >= quietperiod ) { \n\t\t\tif ( serie . values > NUM00 && serie . values >= minvalues ) $F207 ( series , serie ) serie = new GeoTimeSerie ( gts . lastbucket , gts . bucketcount , gts . bucketspan , NUM00 ) ; \n\t\t\t$F69429 ( serie , gts ) $F168026 ( labels ) labels . putAll ( gts . getLabels ( ) ) ; \n\t\t\tgtsid ++ ; \n\t\t\tlabels . put ( labelname , Integer . toString ( gtsid ) ) ; \n\t\t\tserie . setLabels ( labels ) ; \n\t\t\t} \n\t\tObject value = GTSHelper . valueAtIndex ( gts , idx ) ; \n\t\tGTSHelper . setValue ( serie , gts . ticks [ idx ] , null != gts . locations ? gts . locations [ idx ] : GeoTimeSerie . NO_LOCATION , null != gts . elevations ? gts . elevations [ idx ] : GeoTimeSerie . NO_ELEVATION , value , _BOOL ) ; \n\t\tlasttick = gts . ticks [ idx ] ; \n\t\tidx ++ ; \n\t\t} \n\tif ( serie . values > NUM00 && serie . values >= minvalues ) $F207 ( series , serie ) return series ; \n\t} \n"}, {"code": "protected void checkSignature $F97 ( buf ) { \n\tif ( ! Arrays . equals ( buf , PngHelperInternal . getPngIdSignature ( ) ) ) throw new PngjInputException $F580 ; \n\t} \n"}, {"code": "private void twoWayMergeInternal ( final ReservoirLongsSketch sketchIn , final boolean isModifiable ) { \n\tif ( sketchIn . getN ( ) <= sketchIn . getK ( ) ) { \n\t\ttwoWayMergeInternalStandard ( sketchIn ) ; \n\t\t} \n\telse if ( gadget_ . getN ( ) < gadget_ . getK ( ) ) { \n\t\tfinal ReservoirLongsSketch tmpSketch = gadget_ ; \n\t\tgadget_ = ( isModifiable ? sketchIn : sketchIn . copy ( ) ) ; \n\t\ttwoWayMergeInternalStandard ( tmpSketch ) ; \n\t\t} \n\telse if ( sketchIn . getImplicitSampleWeight ( ) < gadget_ . getN ( ) / ( ( double ) ( gadget_ . getK ( ) - NUM00 ) ) ) { \n\t\ttwoWayMergeInternalWeighted ( sketchIn ) ; \n\t\t} \n\telse { \n\t\tfinal ReservoirLongsSketch tmpSketch = gadget_ ; \n\t\tgadget_ = ( isModifiable ? sketchIn : sketchIn . copy ( ) ) ; \n\t\ttwoWayMergeInternalWeighted ( tmpSketch ) ; \n\t\t} \n\t} \n"}, {"code": "final public void print ( Object v ) { \n\tWriter out = this . out ; \n\t$F8249 ( out ) try { \n\t\tif ( v == null ) $F17918 ( out , _nullChars ) else { \n\t\t\t$F1822 ( s , v ) $F170077 ( out , s ) } \n\t\t} \n\t$F53427 ( log , Level , e ) } \n"}, {"code": "public void subscribeTo ( final K key , final Subscriber $F2193 subscriber , final Executor subscribeOn ) { \n\tCompletableFuture . runAsync ( null , subscribeOn ) ; \n\t} \n"}, {"code": "$F98441 ( is , os , listener , bufferSize , current , total , DEFAULT_IMAGE_TOTAL_SIZE , bytes , count , shouldStopLoading , _BOOL ) "}, {"code": "private void refreshBuffer $F72 throws IOException { \n\tif ( output == null ) { \n\t\tthrow new OutOfSpaceException $F72 ; \n\t\t} \n\t$F11584 ( output , buffer , position ) position = NUM00 ; \n\t} \n"}, {"code": "public String damageBayDoor $F72 { \n\tString bayType = NUM00 ; \n\tVector < Bay > potential ; \n\tpotential = new Vector < Bay > $F72 ; \n\tEnumeration < Transporter > iter = transports . elements ( ) ; \n\twhile $F1444 ( iter ) { \n\t\tTransporter next = iter . nextElement ( ) ; \n\t\tif ( next instanceof Bay ) { \n\t\t\tBay nextBay = ( Bay ) next ; \n\t\t\tif ( nextBay . getDoors ( ) > NUM00 ) $F207 ( potential , nextBay ) } \n\t\t} \n\tif $F3817 ( potential ) { \n\t\tBay chosenBay = potential . elementAt ( Compute . randomInt ( potential . size ( ) ) ) ; \n\t\tchosenBay . destroyDoor ( ) ; \n\t\tchosenBay . resetDoors ( ) ; \n\t\tchosenBay . setDoors ( chosenBay . getDoors ( ) - NUM00 ) ; \n\t\t$F86218 ( bayType , chosenBay ) } \n\treturn bayType ; \n\t} \n"}, {"code": "public void updateEnabledState $F72 { \n\tboolean b = $F9774 ( getSimulationThread ) ; \n\tboolean prep = b && controller != null && controller . isPrepared ( ) ; \n\tclearButton . setEnabled ( b ) ; \n\tprepareButton . setEnabled ( b ) ; \n\trunButton . setEnabled ( prep ) ; \n\tif ( b ) pauseButton . setSelected ( _BOOL ) ; \n\tpauseButton . setEnabled ( ! b ) ; \n\tstepButton . setEnabled ( prep ) ; \n\tcancelButton . setEnabled ( ! b ) ; \n\tfor ( JComboBox $F1432 combo : selectors . combos ) combo . setEnabled ( b ) ; \n\t} \n"}, {"code": "private void prepareVolumeData $F72 throws Exception $F9099 ( prepareVPlexVolumeData , prepareRPVolumeData ) "}, {"code": "private static int determineIconIdByMimeTypeList $F24643 ( mimetypes ) { \n\tif ( mimetypes == null || $F6213 ( mimetypes ) ) { \n\t\treturn R . drawable . file ; \n\t\t} \n\telse { \n\t\tfor ( String mimetype : mimetypes ) { \n\t\t\t$F99426 ( iconId , MIMETYPE_TO_ICON_MAPPING , mimetype ) $F21525 ( iconId ) } \n\t\tfor ( String mimetype : mimetypes ) { \n\t\t\t$F64065 ( mainMimetypePart , mimetype ) $F99426 ( iconId , MAINMIMETYPE_TO_ICON_MAPPING , mainMimetypePart ) $F21525 ( iconId ) } \n\t\t} \n\treturn R . drawable . file ; \n\t} \n"}, {"code": "public SmsMmsMessage ( Context _context , long _messageId , long _threadId , long _timestamp , String _messageBody , int _unreadCount , int _messageType ) { \n\tcontext = _context ; \n\tmessageId = _messageId ; \n\tthreadId = _threadId ; \n\ttimestamp = _timestamp ; \n\tmessageBody = _messageBody ; \n\tunreadCount = _unreadCount ; \n\tmessageType = _messageType ; \n\tfromAddress = SmsPopupUtils . getMmsAddress ( context , messageId ) ; \n\tfromEmailGateway = _BOOL ; \n\tcontactName = PhoneNumberUtils . formatNumber ( fromAddress ) ; \n\tContactIdentification contactIdentify = SmsPopupUtils . getPersonIdFromPhoneNumber ( context , fromAddress ) ; \n\tif ( contactIdentify == null ) { \n\t\tcontactIdentify = SmsPopupUtils . getPersonIdFromEmail ( context , fromAddress ) ; \n\t\tif ( contactIdentify != null ) { \n\t\t\tfromEmailGateway = _BOOL ; \n\t\t\t} \n\t\t} \n\tif ( contactIdentify != null ) { \n\t\tcontactId = contactIdentify . contactId ; \n\t\tcontactLookupKey = contactIdentify . contactLookup ; \n\t\tcontactName = contactIdentify . contactName ; \n\t\t} \n\t} \n"}, {"code": "public void attributeAsClass $F72 { \n\tDataSortedTableModel model ; \n\t$F110345 ( m_CurrentCol ) model = ( DataSortedTableModel ) m_TableData . getModel ( ) ; \n\tif ( model . getAttributeAt ( m_CurrentCol ) == null ) $F932 setCursor ( $F92769 ( Cursor ) ) ; \n\tmodel . attributeAsClassAt ( m_CurrentCol ) ; \n\tsetCursor ( $F88367 ( Cursor ) ) ; \n\t} \n"}, {"code": "public void addListener ( RefreshListener listener ) { \n\t$F896 ( listener ) refreshListeners . add ( listener ) ; \n\t} \n"}, {"code": "public final void doExport ( final String trackName , final File target , int verbosity ) throws IOException { \n\tLog . i ( $F71440 ( TAG , target ) ) ; \n\tmDbHelper = new DatabaseHelper ( mContext . getApplicationContext ( ) ) ; \n\tfinal BufferedWriter bw = new BufferedWriter ( new FileWriter ( target ) ) ; \n\tbw . write ( XML_HEADER ) ; \n\tbw . write ( TAG_GPX ) ; \n\tif ( verbosity == VERBOSITY_TRACK_AND_WAYPOINTS || verbosity == VERBOSITY_WAYPOINTS_ONLY || verbosity == VERBOSITY_ALL ) { \n\t\twriteWaypoints ( bw ) ; \n\t\t} \n\tif ( verbosity == VERBOSITY_TRACK_AND_WAYPOINTS || verbosity == VERBOSITY_ALL ) { \n\t\twriteTrackpoints ( trackName , bw ) ; \n\t\t} \n\t$F1206 ( bw ) if ( verbosity == VERBOSITY_ALL ) { \n\t\twriteWifis ( bw ) ; \n\t\t$F1206 ( bw ) writeCells ( bw ) ; \n\t\t$F1206 ( bw ) } \n\tbw . write ( TAG_GPX_CLOSE ) ; \n\t$F59 ( bw ) $F59 ( mDbHelper ) $F1594 ( Log , TAG ) } \n"}, {"code": "public $F2194 valuesInSelection ( RichEditText editor , int spanType ) { \n\t$F2194 $F376851 ( result ) ; \n\tSelection expandedSelection = getExpandedSelection ( editor , spanType ) ; \n\tif ( expandedSelection != null ) { \n\t\tfor ( Span $F2193 span : getSpans ( editor . getText ( ) , expandedSelection ) ) { \n\t\t\t$F100054 ( result , span ) } \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "private boolean isGTEDelta ( double value ) { \n\treturn Math . abs ( value ) - Math . abs ( mDelta ) > - NUM00 ; \n\t} \n"}, {"code": "public static String rowToString ( JSONArray ja ) { \n\t$F83 ( sb ) for ( $F146321 ( i , ja ) ) { \n\t\t$F34674 ( i , sb ) Object object = ja . opt ( i ) ; \n\t\tif ( object != null ) { \n\t\t\t$F1822 ( string , object ) if ( $F20 ( string ) && ( $F116993 ( string ) || $F48845 ( string ) || string . indexOf ( NUM00 ) >= NUM00 || $F4431 ( string ) ) ) { \n\t\t\t\t$F84 ( sb ) $F115 ( length , string ) for ( $F6225 ( j , length ) ) { \n\t\t\t\t\t$F1280 ( c , string , j ) if ( c >= NUM00 && c != NUM00 ) $F288 ( sb , c ) } \n\t\t\t\t$F84 ( sb ) } \n\t\t\telse $F288 ( sb , string ) } \n\t\t} \n\t$F84 ( sb ) $F92 ( sb ) } \n"}, {"code": "private void maybeSampleSyncParams $F72 { \n\tlong playbackPositionUs = audioTrackUtil . getPlaybackHeadPositionUs ( ) ; \n\t$F32905 ( playbackPositionUs ) if ( log . allowVerbose ( ) ) { \n\t\tlog . v ( NUM00 + playbackPositionUs ) ; \n\t\t} \n\tlong $F11380 ( systemClockUs , System ) ; \n\tif ( systemClockUs - lastPlayheadSampleTimeUs >= MIN_PLAYHEAD_OFFSET_SAMPLE_INTERVAL_US ) { \n\t\tplayheadOffsets [ nextPlayheadOffsetIndex ] = playbackPositionUs - systemClockUs ; \n\t\t$F271125 ( nextPlayheadOffsetIndex , MAX_PLAYHEAD_OFFSET_COUNT ) if ( playheadOffsetCount < MAX_PLAYHEAD_OFFSET_COUNT ) { \n\t\t\tplayheadOffsetCount ++ ; \n\t\t\t} \n\t\tlastPlayheadSampleTimeUs = systemClockUs ; \n\t\tsmoothedPlayheadOffsetUs = NUM00 ; \n\t\tfor ( $F119 ( i , playheadOffsetCount ) ) { \n\t\t\tsmoothedPlayheadOffsetUs += playheadOffsets [ i ] / playheadOffsetCount ; \n\t\t\t} \n\t\t} \n\t$F84963 ( needsPassthroughWorkarounds ) if ( systemClockUs - lastTimestampSampleTimeUs >= MIN_TIMESTAMP_SAMPLE_INTERVAL_US ) { \n\t\taudioTimestampSet = audioTrackUtil . updateTimestamp ( ) ; \n\t\tif ( audioTimestampSet ) { \n\t\t\tlong audioTimestampUs = audioTrackUtil . getTimestampNanoTime ( ) / NUM00 ; \n\t\t\tif ( log . allowVerbose ( ) ) { \n\t\t\t\tlog . v ( NUM00 + audioTimestampUs ) ; \n\t\t\t\t} \n\t\t\tlong audioTimestampFramePosition = audioTrackUtil . getTimestampFramePosition ( ) ; \n\t\t\tif ( audioTimestampUs < resumeSystemTimeUs ) { \n\t\t\t\taudioTimestampSet = _BOOL ; \n\t\t\t\tlog . w ( NUM00 + audioTimestampUs + NUM00 + resumeSystemTimeUs ) ; \n\t\t\t\t} \n\t\t\telse if $F19505 ( Math , audioTimestampUs , systemClockUs , MAX_AUDIO_TIMESTAMP_OFFSET_US ) { \n\t\t\t\tString message = NUM00 + audioTimestampFramePosition + NUM00 + audioTimestampUs + NUM00 + systemClockUs + NUM00 + playbackPositionUs ; \n\t\t\t\tif ( failOnSpuriousAudioTimestamp ) { \n\t\t\t\t\tthrow new InvalidAudioTrackTimestampException ( message ) ; \n\t\t\t\t\t} \n\t\t\t\tlog . w ( message ) ; \n\t\t\t\taudioTimestampSet = _BOOL ; \n\t\t\t\t} \n\t\t\telse if ( Math . abs ( framesToDurationUs ( audioTimestampFramePosition ) - playbackPositionUs ) > MAX_AUDIO_TIMESTAMP_OFFSET_US ) { \n\t\t\t\tString message = NUM00 + audioTimestampFramePosition + NUM00 + audioTimestampUs + NUM00 + systemClockUs + NUM00 + playbackPositionUs ; \n\t\t\t\tif ( failOnSpuriousAudioTimestamp ) { \n\t\t\t\t\tthrow new InvalidAudioTrackTimestampException ( message ) ; \n\t\t\t\t\t} \n\t\t\t\tlog . w ( message ) ; \n\t\t\t\taudioTimestampSet = _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( isLatencyQuirkEnabled ) { \n\t\t\tlatencyUs = AmazonQuirks . getAudioHWLatency ( ) ; \n\t\t\t} \n\t\telse if ( getLatencyMethod != null && ! passthrough ) { \n\t\t\ttry { \n\t\t\t\tlatencyUs = ( Integer ) $F99198 ( getLatencyMethod , audioTrack ) * NUM00 - bufferSizeUs ; \n\t\t\t\t$F89002 ( latencyUs , Math ) if ( latencyUs > MAX_LATENCY_US ) { \n\t\t\t\t\tlog . w ( NUM00 + latencyUs ) ; \n\t\t\t\t\tlatencyUs = NUM00 ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tcatch ( Exception e ) { \n\t\t\t\tgetLatencyMethod = null ; \n\t\t\t\t} \n\t\t\t} \n\t\tlastTimestampSampleTimeUs = systemClockUs ; \n\t\t} \n\t} \n"}, {"code": "$F1 public boolean contains ( Object object ) { \n\t$F1933 ( object , _BOOL ) for ( $F119 ( i , size ) ) $F55055 ( object , elements , i , _BOOL ) return _BOOL ; \n\t} \n"}, {"code": "$F136015 ( writer ) "}, {"code": "public static void substituteProperties ( Node node , Properties properties ) { \n\tNode child ; \n\t$F15376 ( next , node ) while $F200462 ( child , next ) { \n\t\t$F5901 ( next , child ) if ( $F77051 ( child , Node ) ) { \n\t\t\tchild . setNodeValue ( PropertiesUtil . substituteProperty ( child . getNodeValue ( ) , properties ) ) ; \n\t\t\t} \n\t\telse if $F61358 ( child , Node ) { \n\t\t\t$F32683 ( attributes , child ) for ( $F85554 ( i , attributes ) ) { \n\t\t\t\t$F61359 ( attribute , attributes , i ) attribute . setNodeValue ( PropertiesUtil . substituteProperty ( attribute . getNodeValue ( ) , properties ) ) ; \n\t\t\t\t} \n\t\t\tsubstituteProperties ( child , properties ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F1431 public PseudoFunctionSelector ( String functionName , String expression ) { \n\tsuper ( Type . PSEUDO_FUNCTION ) ; \n\tthis . pseudoFunction = ( PseudoFunction $F11685 ) $F140410 ( lookupPseudoFunction , functionName ) ; \n\tthis . expression = expression ; \n\tthis . parsedExpression = pseudoFunction . parseExpression ( expression ) ; \n\t} \n"}, {"code": "public static String fixQueryMistakes ( String q ) { \n\t$F2899 ( q ) $F2899 ( q ) return q ; \n\t} \n"}, {"code": "public $F96 readBytes $F72 throws IOException { \n\tif $F931 ( parseTag ) throw new BurlapProtocolException $F580 ; \n\t$F1822 ( tag , sbuf ) if $F3057 ( tag ) { \n\t\texpectEndTag ( NUM00 ) ; \n\t\t$F1274 } \n\telse if $F3057 ( tag ) { \n\t\t$F4910 ( sbuf ) $F74534 ( value , parseBytes ) expectEndTag ( NUM00 ) ; \n\t\treturn value ; \n\t\t} \n\telse throw expectBeginTag ( NUM00 , tag ) ; \n\t} \n"}, {"code": "public synchronized Utterance pend $F72 { \n\tUtterance utterance = null ; \n\twhile $F10471 ( list ) { \n\t\ttry $F5795 ( wait ) catch ( InterruptedException ie ) $F1337 } \n\tutterance = ( Utterance ) list . removeFirst ( ) ; \n\tnotify ( ) ; \n\treturn utterance ; \n\t} \n"}, {"code": "public void testLongValuePos $F72 { \n\tString a = NUM00 ; \n\t$F12208 ( aNumber , a ) long result = NUM00 ; \n\tassertTrue ( NUM00 , aNumber . longValue ( ) == result ) ; \n\t} \n"}, {"code": "public static EvaluationResult findOrCreate ( ResultHierarchy hierarchy , Result parent , String name , String shortname ) { \n\tArrayList < EvaluationResult > ers = ResultUtil . filterResults ( hierarchy , parent , EvaluationResult . class ) ; \n\tEvaluationResult ev = null ; \n\tfor ( EvaluationResult e : ers ) { \n\t\tif ( shortname . equals ( e . getShortName ( ) ) ) $F3468 ( ev , e ) } \n\tif ( ev == null ) { \n\t\tev = new EvaluationResult ( name , shortname ) ; \n\t\thierarchy . add ( parent , ev ) ; \n\t\t} \n\treturn ev ; \n\t} \n"}, {"code": "public static boolean isRunningJavaWebStart $F72 { \n\tboolean hasJNLP = _BOOL ; \n\ttry { \n\t\t$F32352 ( Class ) hasJNLP = _BOOL ; \n\t\t} \n\tcatch ( ClassNotFoundException ex ) { \n\t\thasJNLP = _BOOL ; \n\t\t} \n\treturn hasJNLP ; \n\t} \n"}, {"code": "public boolean isConnected $F72 $F1522 ( connected ) "}, {"code": "private void tryScheduleAction ( Runnable action ) { \n\ttry $F135437 ( scheduler , action ) catch ( RejectedExecutionException e ) $F845 } \n"}, {"code": "private static double scoreSequence ( List < LatLong > pts ) { \n\tLatLong $F7662 ( prev , pts ) ; \n\tLatLong $F7662 ( prevprev , pts ) ; \n\tdouble prevAngle = Math . atan2 ( prev . lat - prevprev . lat , prev . lng - prevprev . lng ) ; \n\tdouble score = NUM00 ; \n\tfor ( LatLong pt : pts ) { \n\t\tdouble angle = Math . atan2 ( pt . lat - prev . lat , pt . lng - prev . lng ) ; \n\t\tdouble diff = prevAngle - angle ; \n\t\tif ( diff > Math . PI ) diff -= Math . PI * NUM00 ; \n\t\telse if ( diff < - Math . PI ) diff += Math . PI * NUM00 ; \n\t\tif ( diff < NUM00 ) score += NUM00 ; \n\t\telse score += diff ; \n\t\tprev = pt ; \n\t\tprevAngle = angle ; \n\t\t} \n\treturn score ; \n\t} \n"}, {"code": "public void addWebAppDebugModelListener ( IWebAppDebugModelListener listener ) $F138275 ( privateInstanceLock , webAppDebugModelListeners , listener ) "}, {"code": "public void resetPolicy $F72 { \n\tmPreferences . putString ( PREF_LAST_RESPONSE , Integer . toString ( Policy . RETRY ) ) ; \n\tsetRetryUntil ( DEFAULT_RETRY_UNTIL ) ; \n\tsetMaxRetries ( DEFAULT_MAX_RETRIES ) ; \n\tsetRetryCount ( Long . parseLong ( DEFAULT_RETRY_COUNT ) ) ; \n\tsetValidityTimestamp ( DEFAULT_VALIDITY_TIMESTAMP ) ; \n\t$F17621 ( mPreferences ) } \n"}, {"code": "public void simulateMethod $F5498 ( method , thisVar , returnVar ) { \n\t$F5500 ( subSignature , method ) if $F3057 ( subSignature ) $F5501 ( java_lang_SecurityManager_getClassContext , method , thisVar , returnVar , params ) else if $F3057 ( subSignature ) $F5501 ( java_lang_SecurityManager_currentClassLoader0 , method , thisVar , returnVar , params ) else if $F3057 ( subSignature ) $F5501 ( java_lang_SecurityManager_currentLoadedClass0 , method , thisVar , returnVar , params ) else $F5501 ( defaultMethod , method , thisVar , returnVar , params ) } \n"}, {"code": "public static boolean isFileExists ( final String path ) { \n\tif $F4329 ( TextUtils , path ) $F277465 ( Log , _BOOL ) $F15885 ( fileToCheck , path ) return fileToCheck . exists ( ) && $F4925 ( fileToCheck ) ; \n\t} \n"}, {"code": "private List < Reference > createSignatureReferences ( XMLSignatureFactory xmlSigFactory , $F3803 referenceIdList ) throws NoSuchAlgorithmException , InvalidAlgorithmParameterException { \n\tList < Reference > result = new ArrayList < Reference > $F72 ; \n\tfor ( String refId : referenceIdList ) { \n\t\t$F4322 ( refId ) Reference ref = xmlSigFactory . newReference ( NUM00 + refId , xmlSigFactory . newDigestMethod ( DigestMethod . SHA512 , null ) , Collections . singletonList ( xmlSigFactory . newCanonicalizationMethod ( CanonicalizationMethod . EXCLUSIVE , ( C14NMethodParameterSpec ) null ) ) , null , null ) ; \n\t\tresult . add ( ref ) ; \n\t\t} \n\t$F26666 ( Collections , result ) } \n"}, {"code": "public boolean removeNetworkConnection ( NetworkConnection networkConnection ) $F20067 ( networkConnections , networkConnection ) "}, {"code": "$F1 public $F987 listOptions $F72 { \n\t$F20795 ( result ) $F9007 ( result ) $F9007 ( result ) $F1000 ( result ) $F1007 ( result ) } \n"}, {"code": "protected Object convertArray ( Object value ) { \n\treturn value ; \n\t} \n"}, {"code": "public static String encodeString ( String s ) { \n\treturn new String ( encode ( s . getBytes ( ) ) ) ; \n\t} \n"}, {"code": "GridLuceneFile ( GridLuceneDirectory dir ) { \n\tthis . dir = dir ; \n\t$F5224 ( filesCnt ) } \n"}, {"code": "public void addAttributes ( Attributes atts ) throws SAXException { \n\t$F19322 ( nAtts , atts ) for ( $F119 ( i , nAtts ) ) { \n\t\tString uri = atts . getURI ( i ) ; \n\t\tif ( null == uri ) uri = NUM00 ; \n\t\taddAttributeAlways ( uri , atts . getLocalName ( i ) , atts . getQName ( i ) , atts . getType ( i ) , atts . getValue ( i ) , _BOOL ) ; \n\t\t} \n\t} \n"}, {"code": "public synchronized void addPanListener ( PanListener listener ) $F207 ( mPanListeners , listener ) "}, {"code": "public synchronized long lastOnlineAgo $F72 { \n\treturn $F32708 ( System , lastOnline ) ; \n\t} \n"}, {"code": "public double distance_weighted ( PlaPointFloat p_other , double p_horizontal_weight , double p_vertical_weight ) { \n\tdouble delta_x = v_x - p_other . v_x ; \n\tdouble delta_y = v_y - p_other . v_y ; \n\tdelta_x *= p_horizontal_weight ; \n\tdelta_y *= p_vertical_weight ; \n\t$F25559 ( result , Math , delta_x , delta_y ) return result ; \n\t} \n"}, {"code": "public NameSpace swap ( NameSpace newTop ) { \n\tNameSpace oldTop = ( NameSpace ) ( stack . elementAt ( NUM00 ) ) ; \n\tstack . setElementAt ( newTop , NUM00 ) ; \n\treturn oldTop ; \n\t} \n"}, {"code": "public static $F3803 classesPath $F72 throws FileNotFoundException , LoadingFileException { \n\t$F11300 files = getJavaFiles ( ) ; \n\t$F10144 ( paths ) for ( File file : files ) paths . add ( file . getPath ( ) ) ; \n\treturn paths ; \n\t} \n"}, {"code": "public static Number sub ( Number a , Number b ) { \n\tif $F71585 ( isFloatingPoint , a , b ) { \n\t\treturn a . doubleValue ( ) - b . doubleValue ( ) ; \n\t\t} \n\telse { \n\t\treturn a . longValue ( ) - b . longValue ( ) ; \n\t\t} \n\t} \n"}, {"code": "public static Stream $F4 wordsOf ( String text ) { \n\trequireNonNull ( text ) ; \n\treturn WORDS . splitAsStream ( text ) ; \n\t} \n"}, {"code": "public static DeleteParticipant [ ] loadDeleteParticipants ( RefactoringStatus status , RefactoringProcessor processor , Object element , DeleteArguments arguments , IParticipantDescriptorFilter filter , $F806 affectedNatures , SharableParticipants shared ) { \n\tRefactoringParticipant [ ] participants = fgDeleteInstance . getParticipants ( status , processor , element , arguments , filter , affectedNatures , shared ) ; \n\tDeleteParticipant [ ] result = new DeleteParticipant [ participants . length ] ; \n\t$F7057 ( System , participants , result ) return result ; \n\t} \n"}, {"code": "public PutResult $F176270 ( successCount , failCount , errorMessages ) { \n\t_successCount = successCount ; \n\t_failCount = failCount ; \n\t$F9404 ( _errorMessages ) $F36447 ( errorMessages , _errorMessages ) } \n"}, {"code": "$F1 public int hashCode $F72 { \n\tint myPosition = position ; \n\tint hash = NUM00 ; \n\twhile ( myPosition < limit ) { \n\t\thash = hash + get ( myPosition ++ ) ; \n\t\t} \n\treturn hash ; \n\t} \n"}, {"code": "public void print ( CharSequence text ) throws IOException { \n\t$F1749 ( size , text ) int pos = NUM00 ; \n\tfor ( $F119 ( i , size ) ) { \n\t\tif $F11983 ( text , i ) { \n\t\t\twrite ( text . subSequence ( pos , size ) , i - pos + NUM00 ) ; \n\t\t\tpos = i + NUM00 ; \n\t\t\tatStartOfLine = _BOOL ; \n\t\t\t} \n\t\t} \n\twrite ( text . subSequence ( pos , size ) , size - pos ) ; \n\t} \n"}, {"code": "public void closeRunningApp ( String deviceID , String app_package ) throws InterruptedException , IOException { \n\tcmd . runCommand ( NUM00 + deviceID + NUM00 + app_package ) ; \n\t} \n"}, {"code": "$F30902 public void test_unwrap_05 $F72 { \n\tString host = NUM00 ; \n\tint port = NUM00 ; \n\t$F30907 ( bbA , ByteBuffer ) $F30909 ( bb , ByteBuffer ) SSLEngine sse = getEngine ( host , port ) ; \n\ttry { \n\t\tsse . unwrap ( bb , bbA , NUM00 , bbA . length ) ; \n\t\tfail ( NUM00 ) ; \n\t\t} \n\t$F30913 $F30915 ( fail , e ) } \n"}, {"code": "$F21572 ( doc , elementList , nameNode , child , childData , load , _BOOL , assertEquals ) "}, {"code": "public boolean filteroutInvalidation ( T tag , TagQualityStatus statusToAdd , String statusDescription , Timestamp timestamp ) { \n\treturn filterout ( tag , tag . getValue ( ) , tag . getValueDescription ( ) , statusToAdd , statusDescription , timestamp ) ; \n\t} \n"}, {"code": "public void bindY ( DoubleProperty yProperty ) { \n\tminYWorld . bind ( yProperty . add ( getMinY ( ) ) ) ; \n\tmaxYWorld . bind ( minYWorld . add ( getHeight ( ) ) ) ; \n\t} \n"}, {"code": "private void copyFieldAttributes $F72 { \n\tif ( ( loadFields == null ) || fields == null ) $F932 for ( $F1139 ( i , loadFields ) ) { \n\t\tObjectStreamField loadField = loadFields [ i ] ; \n\t\t$F20605 ( name , loadField ) for ( $F1139 ( j , fields ) ) { \n\t\t\tObjectStreamField field = fields [ j ] ; \n\t\t\tif $F3175 ( name , field ) { \n\t\t\t\tloadField . setUnshared ( field . isUnshared ( ) ) ; \n\t\t\t\tloadField . setOffset ( field . getOffset ( ) ) ; \n\t\t\t\t$F597 } \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static Uri . Builder appendId ( Uri . Builder builder , long id ) { \n\treturn builder . appendEncodedPath ( String . valueOf ( id ) ) ; \n\t} \n"}, {"code": "private static void beginStartingService ( Context context , Intent intent ) { \n\tsynchronized ( sStartingServiceSync ) { \n\t\tif ( sStartingService == null ) { \n\t\t\tPowerManager pm = ( PowerManager ) context . getSystemService ( Context . POWER_SERVICE ) ; \n\t\t\tsStartingService = pm . newWakeLock ( PowerManager . PARTIAL_WAKE_LOCK , NUM00 ) ; \n\t\t\t} \n\t\t$F90610 ( sStartingService ) if ( context . startService ( intent ) == null ) $F13955 ( Log , TAG ) } \n\t} \n"}, {"code": "$F28896 ( index , paint , bounds , title , getTitle ) "}, {"code": "public static double stddev $F9830 ( a ) $F148602 ( Math , var , a ) "}, {"code": "public SimpleArgumentsBundle ( $F4170 $F2539 arguments , $F4170 DisplayMetrics metrics ) { \n\tmArguments = arguments ; \n\tmMetrics = metrics ; \n\t} \n"}, {"code": "public static String collapseWhitespace ( String str ) $F12588 ( collapse , str , WHITE_SPACES ) "}, {"code": "private void adjustASIAndCollectFollowElements ( CustomInternalN4JSParser previousParser , boolean strict , Set < FollowElement > result ) { \n\tObservableXtextTokenStream tokens = ( ObservableXtextTokenStream ) previousParser . getTokenStream ( ) ; \n\t$F40484 ( lastTokenIndex , tokens ) if ( lastTokenIndex >= NUM00 ) { \n\t\tCommonToken lastToken = ( CommonToken ) tokens . LT ( - NUM00 ) ; \n\t\t$F1431 $F40119 tokenList = tokens . getTokens ( ) ; \n\t\t$F2329 ( lastToken ) if ( shouldSkipASI ( lastToken ) ) { \n\t\t\tif ( maySkipASI ( lastToken , tokens ) ) { \n\t\t\t\ttokenList . remove ( lastTokenIndex ) ; \n\t\t\t\t$F15415 ( result , resetAndGetFollowElements , tokens , strict ) removePostfixOperator ( result ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse if ( shouldAddSyntheticSemicolon ( previousParser , lastTokenIndex , lastToken ) ) { \n\t\t\tCommonToken token = new CommonToken ( semi ) ; \n\t\t\ttokenList . add ( token ) ; \n\t\t\t$F15415 ( result , resetAndGetFollowElements , tokens , strict ) removePostfixOperator ( result ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public LinkedList $F89473 patch_make ( String text1 , String text2 ) { \n\t$F3541 ( text1 , text2 ) $F16501 diffs = diff_main ( text1 , text2 , _BOOL ) ; \n\tif $F3817 ( diffs ) $F86383 ( diff_cleanupSemantic , diffs , diff_cleanupEfficiency ) return patch_make ( text1 , diffs ) ; \n\t} \n"}, {"code": "public void testBasicsV6 $F72 throws Exception { \n\tDirectory dir = newDirectory ( ) ; \n\tRandomIndexWriter writer = new RandomIndexWriter ( random ( ) , dir ) ; \n\t$F10888 ( document ) InetAddress address = InetAddress . getByName ( NUM00 ) ; \n\tdocument . add ( new InetAddressPoint ( NUM00 , address ) ) ; \n\twriter . addDocument ( document ) ; \n\tIndexReader reader = writer . getReader ( ) ; \n\tIndexSearcher searcher = newSearcher ( reader ) ; \n\tassertEquals ( NUM00 , searcher . count ( InetAddressPoint . newExactQuery ( NUM00 , address ) ) ) ; \n\tassertEquals ( NUM00 , searcher . count ( InetAddressPoint . newPrefixQuery ( NUM00 , address , NUM00 ) ) ) ; \n\tassertEquals ( NUM00 , searcher . count ( InetAddressPoint . newRangeQuery ( NUM00 , InetAddress . getByName ( NUM00 ) , InetAddress . getByName ( NUM00 ) ) ) ) ; \n\t$F59 ( reader ) $F59 ( writer ) $F59 ( dir ) } \n"}, {"code": "private boolean isMinorVersionUpgrade ( String currentVersion , String targetVersion ) { \n\tString currentDbSchemaVersion = VdcUtil . getDbSchemaVersion ( currentVersion ) ; \n\t$F1933 ( currentDbSchemaVersion , _BOOL ) return currentDbSchemaVersion . equals ( VdcUtil . getDbSchemaVersion ( targetVersion ) ) ; \n\t} \n"}, {"code": "public static final void exception ( Throwable e ) { \n\tlogExpensive ( Level . SEVERE , e . getMessage ( ) , e ) ; \n\t} \n"}, {"code": "private static DefaultAlignment valueOf ( String str , boolean isHorizontal ) { \n\tif $F40270 ( str ) { \n\t\treturn FILL_ALIGN ; \n\t\t} \n\telse if $F40270 ( str ) { \n\t\treturn CENTER_ALIGN ; \n\t\t} \n\telse if ( isHorizontal ) { \n\t\tif $F40270 ( str ) { \n\t\t\treturn RIGHT_ALIGN ; \n\t\t\t} \n\t\telse if $F40270 ( str ) { \n\t\t\treturn LEFT_ALIGN ; \n\t\t\t} \n\t\telse $F1337 } \n\telse if $F40270 ( str ) { \n\t\treturn TOP_ALIGN ; \n\t\t} \n\telse if $F40270 ( str ) { \n\t\treturn BOTTOM_ALIGN ; \n\t\t} \n\telse $F1337 } \n"}, {"code": "public void combineSets ( HashMap < String , $F2689 > containerAffinities , OperatorPair pair ) { \n\t$F2689 set1 = containerAffinities . get ( pair . first ) ; \n\t$F2689 set2 = containerAffinities . get ( pair . second ) ; \n\tset1 . addAll ( set2 ) ; \n\tcontainerAffinities . put ( pair . first , set1 ) ; \n\tcontainerAffinities . put ( pair . second , set1 ) ; \n\t} \n"}, {"code": "protected void firePropertyChange $F109214 ( propertyName , oldValue , newValue ) { \n\tpropertyChangeSupport . firePropertyChange ( propertyName , oldValue , newValue ) ; \n\t} \n"}, {"code": "$F1 public boolean isBusy $F72 $F9911 ( m_splitThread ) "}, {"code": "public static $F11685 boolean isNotEmpty ( CharSequence c ) { \n\treturn $F23754 ( c ) ; \n\t} \n"}, {"code": "$F1 public boolean eIsSet ( int featureID ) { \n\tswitch ( featureID ) { \n\t\tcase EipPackage . COMPOSITE_PROCESSOR__NAME : $F6439 ( NAME_EDEFAULT , name ) case EipPackage . COMPOSITE_PROCESSOR__TO_CHANNELS : $F6441 ( toChannels ) case EipPackage . COMPOSITE_PROCESSOR__FROM_CHANNELS : $F6441 ( fromChannels ) case EipPackage . COMPOSITE_PROCESSOR__OWNED_ENDPOINTS : $F6441 ( ownedEndpoints ) } \n\t$F6444 ( super , featureID ) } \n"}, {"code": "private void addInfoButton ( JPanel panel , Object o , String clientProp ) { \n\tJButton hButton ; \n\thButton = new JButton $F3362 ( o ) ; \n\thButton . putClientProperty ( clientProp , o ) ; \n\thButton . addActionListener ( this ) ; \n\thButton . setFont ( font ) ; \n\thButton . setMargin ( $F32450 ) ; \n\thButton . setBackground ( LOG_BUTTON_BG ) ; \n\tpanel . add ( hButton ) ; \n\t} \n"}, {"code": "public void removeNetworkListener ( NetworkListener networkListener ) $F106 ( networkListeners , networkListener ) "}, {"code": "public static String chomp ( String s ) { \n\tif $F8991 ( s ) $F16082 ( s ) if $F128455 ( s ) $F16082 ( s ) return s ; \n\t} \n"}, {"code": "private void validateSurrogateSettings $F72 { \n\tfaultySurrogatesRadioButton . setEnabled ( _BOOL ) ; \n\tdiscardSurrogatesArticleRadioButton . setEnabled ( _BOOL ) ; \n\treplaceSurrogatesRadioButton . setEnabled ( _BOOL ) ; \n\tdiscardSurrogatesRevisionRadioButton . setSelected ( _BOOL ) ; \n\t} \n"}, {"code": "static DiskId createDiskId ( long maxOplogSize , boolean isPersistenceType , boolean needsLinkedList ) { \n\tlong bytes = maxOplogSize * NUM00 * NUM00 ; \n\tif ( bytes > Integer . MAX_VALUE ) { \n\t\tif ( isPersistenceType ) { \n\t\t\tif ( needsLinkedList ) { \n\t\t\t\treturn new PersistenceWithLongOffset $F72 ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\treturn new PersistenceWithLongOffsetNoLL $F72 ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tif ( needsLinkedList ) { \n\t\t\t\treturn new OverflowOnlyWithLongOffset $F72 ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\treturn new OverflowOnlyWithLongOffsetNoLL $F72 ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse { \n\t\tif ( isPersistenceType ) { \n\t\t\tif ( needsLinkedList ) { \n\t\t\t\treturn new PersistenceWithIntOffset $F72 ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\treturn new PersistenceWithIntOffsetNoLL $F72 ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tif ( needsLinkedList ) { \n\t\t\t\treturn new OverflowOnlyWithIntOffset $F72 ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\treturn new OverflowOnlyWithIntOffsetNoLL $F72 ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void startElement $F42838 ( namespaceURI , localName , name , atts ) throws $F2253 { \n\tElemContext elemContext = m_elemContext ; \n\tif ( elemContext . m_startTagOpen ) $F42845 ( closeStartTag , elemContext , _BOOL ) else if ( m_cdataTagOpen ) $F62354 ( closeCDATA , m_cdataTagOpen , _BOOL ) else $F62355 ( m_needToCallStartDocument , startDocumentInternal , _BOOL ) if ( m_needToOutputDocTypeDecl ) { \n\t\tString n = name ; \n\t\tif $F6036 ( n ) { \n\t\t\tn = localName ; \n\t\t\t} \n\t\toutputDocTypeDecl ( n ) ; \n\t\t} \n\tif $F49270 ( namespaceURI ) { \n\t\tsuper . startElement ( namespaceURI , localName , name , atts ) ; \n\t\t$F665 } \n\ttry { \n\t\tElemDesc elemDesc = getElemDesc2 ( name ) ; \n\t\tint elemFlags = elemDesc . getFlags ( ) ; \n\t\tif ( m_doIndent ) { \n\t\t\tboolean isBlockElement = ( elemFlags & ElemDesc . BLOCK ) != NUM00 ; \n\t\t\tif ( m_ispreserve ) m_ispreserve = _BOOL ; \n\t\t\telse if ( ( null != elemContext . m_elementName ) && ( ! m_inBlockElem || isBlockElement ) ) $F21847 ( m_startNewLine , _BOOL , indent ) m_inBlockElem = ! isBlockElement ; \n\t\t\t} \n\t\t$F27424 ( atts , addAttributes ) m_isprevtext = _BOOL ; \n\t\t$F42851 ( writer , m_writer ) $F3410 ( writer ) writer . write ( name ) ; \n\t\t$F42855 ( m_tracer , firePseudoAttributes ) if ( ( elemFlags & ElemDesc . EMPTY ) != NUM00 ) { \n\t\t\tm_elemContext = elemContext . push ( ) ; \n\t\t\tm_elemContext . m_elementName = name ; \n\t\t\tm_elemContext . m_elementDesc = elemDesc ; \n\t\t\t$F665 } \n\t\telse { \n\t\t\telemContext = elemContext . push ( namespaceURI , localName , name ) ; \n\t\t\tm_elemContext = elemContext ; \n\t\t\telemContext . m_elementDesc = elemDesc ; \n\t\t\telemContext . m_isRaw = ( elemFlags & ElemDesc . RAW ) != NUM00 ; \n\t\t\t} \n\t\tif ( ( elemFlags & ElemDesc . HEADELEM ) != NUM00 ) { \n\t\t\tcloseStartTag ( ) ; \n\t\t\telemContext . m_startTagOpen = _BOOL ; \n\t\t\tif ( ! m_omitMetaTag ) { \n\t\t\t\t$F32367 ( m_doIndent , indent ) $F3410 ( writer ) String encoding = getEncoding ( ) ; \n\t\t\t\tString encode = Encodings . getMimeEncoding ( encoding ) ; \n\t\t\t\twriter . write ( encode ) ; \n\t\t\t\t$F3410 ( writer ) } \n\t\t\t} \n\t\t} \n\t$F6289 ( e ) } \n"}, {"code": "public static long sizeOf ( Class clazz ) { \n\tlong maxSize = headerSize ( clazz ) ; \n\twhile ( clazz != $F12222 ) { \n\t\tfor ( $F128325 ( f , clazz ) ) { \n\t\t\tif ( ( f . getModifiers ( ) & Modifier . STATIC ) == NUM00 ) { \n\t\t\t\tlong offset = unsafe . objectFieldOffset ( f ) ; \n\t\t\t\tif ( offset > maxSize ) { \n\t\t\t\t\tmaxSize = offset + NUM00 ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t$F7852 ( clazz ) } \n\treturn roundUpTo8 ( maxSize ) ; \n\t} \n"}, {"code": "public void addHandler ( String columnName , SQLDataHandler handler ) { \n\tif ( m_overrides == null ) $F6450 ( m_overrides ) ; \n\tm_overrides . put ( columnName , handler ) ; \n\t} \n"}, {"code": "public void addNearEvicted ( KeyCacheObject key ) { \n\t$F21432 ( nearEvicted ) nearEvicted . add ( key ) ; \n\t} \n"}, {"code": "public Word ( String word , String displayAs , String ... soundsLike ) { \n\tthis ( ) ; \n\tthis . word = word ; \n\tthis . displayAs = displayAs ; \n\t$F37437 ( this , Arrays , soundsLike ) } \n"}, {"code": "public EnumeratedDistribution ( final List < Pair $F165782 > pmf ) throws MathIllegalArgumentException { \n\t$F132214 ( singletons , pmf ) final $F1986 probs = new double $F2313 ( pmf ) ; \n\tfor ( $F2277 ( i , pmf ) ) { \n\t\tfinal Pair $F165782 sample = pmf . get ( i ) ; \n\t\t$F44305 ( singletons , sample ) final double p = sample . getValue ( ) ; \n\t\tprobs [ i ] = p ; \n\t\t} \n\tprobabilities = checkAndNormalize ( probs ) ; \n\t$F14238 ( cumulativeProbabilities , probabilities ) double sum = NUM00 ; \n\tfor ( $F1139 ( i , probabilities ) ) { \n\t\tsum += probabilities [ i ] ; \n\t\tcumulativeProbabilities [ i ] = sum ; \n\t\t} \n\t} \n"}, {"code": "$F1 public Calendar next $F72 { \n\tif $F1238 ( spot , endFinal ) $F6747 $F113057 ( spot , Calendar ) return ( Calendar ) spot . clone ( ) ; \n\t} \n"}, {"code": "public void pauseWork $F72 { \n\tmExitTasksEarly = _BOOL ; \n\tsetPause ( _BOOL ) ; \n\tif ( DEBUG ) { \n\t\t$F118527 ( Log , Log_TAG , String , this ) } \n\t} \n"}, {"code": "public static List < ErrorLogger . ErrorObject > isVirtualTrackInCPLConformed ( PayloadRecord cplPayloadRecord , VirtualTrack virtualTrack , List < PayloadRecord > essencesHeaderPartitionPayloads ) throws IOException { \n\tList < VirtualTrack > $F204 ( virtualTracks ) ; \n\tIMFErrorLogger imfErrorLogger = new IMFErrorLoggerImpl $F72 ; \n\tvirtualTracks . add ( virtualTrack ) ; \n\timfErrorLogger . addAllErrors ( checkVirtualTrackAndEssencesHeaderPartitionPayloadRecords ( virtualTracks , essencesHeaderPartitionPayloads ) ) ; \n\tif ( imfErrorLogger . hasFatalErrors ( ) ) { \n\t\treturn imfErrorLogger . getErrors ( ) ; \n\t\t} \n\timfErrorLogger . addAllErrors ( conformVirtualTracksInCPL ( cplPayloadRecord , essencesHeaderPartitionPayloads , _BOOL ) ) ; \n\treturn imfErrorLogger . getErrors ( ) ; \n\t} \n"}, {"code": "public byte receiveOneByte $F72 { \n\t$F13527 ( Log , TAG ) try { \n\t\tacquireLock ( ) ; \n\t\tmServerSocket . receive ( mReceivePacket ) ; \n\t\tLog . d ( TAG , NUM00 + ( NUM00 + $F94795 ( mReceivePacket ) ) ) ; \n\t\treturn $F94795 ( mReceivePacket ) ; \n\t\t} \n\t$F12241 ( e ) return Byte . MIN_VALUE ; \n\t} \n"}, {"code": "public static String encode $F97 ( input ) { \n\t$F193057 ( input ) int zeros = NUM00 ; \n\t$F107776 ( zeros , input ) input = $F17877 ( Arrays , input ) ; \n\t$F10567 ( encoded , input ) int outputStart = encoded . length ; \n\tfor ( $F107777 ( inputStart , zeros , input ) ) { \n\t\tencoded [ -- outputStart ] = ALPHABET [ divmod ( input , inputStart , NUM00 , NUM00 ) ] ; \n\t\t$F107780 ( input , inputStart ) } \n\twhile $F304435 ( outputStart , encoded , ENCODED_ZERO ) { \n\t\t++ outputStart ; \n\t\t} \n\twhile ( -- zeros >= NUM00 ) { \n\t\tencoded [ -- outputStart ] = ENCODED_ZERO ; \n\t\t} \n\treturn new String $F218 ( encoded , outputStart ) ; \n\t} \n"}, {"code": "public static $F2027 cells $F22564 ( start , end ) { \n\tArrays . sort ( start ) ; \n\tArrays . sort ( end ) ; \n\tint overlap = NUM00 ; \n\tint gaps = NUM00 ; \n\tfor ( int i = NUM00 , j = NUM00 ; \n\tj < end . length ; \n\t) { \n\t\tif ( i < start . length && start [ i ] < end [ j ] ) $F1097 ( overlap , i ) else $F166832 ( j , overlap ) if ( overlap == NUM00 ) { \n\t\t\tgaps ++ ; \n\t\t\t} \n\t\t} \n\t$F69133 ( cells , gaps ) overlap = NUM00 ; \n\tgaps = NUM00 ; \n\tint previousOverlap = NUM00 ; \n\tfor ( int i = NUM00 , j = NUM00 ; \n\tj < end . length ; \n\t) { \n\t\tif ( i < start . length && start [ i ] < end [ j ] ) { \n\t\t\toverlap ++ ; \n\t\t\tif ( previousOverlap == NUM00 ) $F49219 ( cells , gaps , start , i ) i ++ ; \n\t\t\t} \n\t\telse { \n\t\t\toverlap -- ; \n\t\t\tif ( overlap == NUM00 ) $F49219 ( cells , gaps , end , j ) j ++ ; \n\t\t\t} \n\t\tpreviousOverlap = overlap ; \n\t\t} \n\treturn cells ; \n\t} \n"}, {"code": "$F1 public InStore openRead ( long address , int size ) { \n\tif ( fileSize ( ) < address + size ) { \n\t\tthrow new IllegalStateException ( L . l ( NUM00 , this , address , size , fileSize ( ) ) ) ; \n\t\t} \n\tif $F27748 ( _isClosed ) { \n\t\tthrow new IllegalStateException $F136796 ( L , this ) ; \n\t\t} \n\tif ( _fileSize < address + size ) { \n\t\tthrow new IllegalStateException ( L . l ( NUM00 , Long . toHexString ( address ) , size ) ) ; \n\t\t} \n\ttry { \n\t\tstreamOpen ( address , size ) ; \n\t\treturn openReadImpl ( address , size ) ; \n\t\t} \n\t$F12153 ( e ) } \n"}, {"code": "List < Address > geoDecode ( String searchedLocation ) { \n\ttry { \n\t\tGeocoder geo = new Geocoder ( sContext , Locale . getDefault ( ) ) ; \n\t\tList < Address > addresses = geo . getFromLocationName ( searchedLocation , NUM00 ) ; \n\t\tif $F8841 ( addresses ) { \n\t\t\treturn addresses ; \n\t\t\t} \n\t\t} \n\t$F15720 $F1274 } \n"}, {"code": "private boolean isIdentifierStartChar ( int position ) { \n\tif ( _len >= NUM00 && position >= _len ) { \n\t\treturn _BOOL ; \n\t\t} \n\tchar ch = _working [ position ] ; \n\treturn Character . isUnicodeIdentifierStart ( ch ) ; \n\t} \n"}, {"code": "public void destroy $F72 { \n\t$F725 ( fallbackStorage ) FileUtils . deleteQuietly ( fallbackStorageFile ) ; \n\t} \n"}, {"code": "public static SelectClause create ( String ... propertyNames ) { \n\tList $F57151 selectList = new ArrayList $F57151 $F72 ; \n\tfor ( String name : propertyNames ) { \n\t\tselectList . add ( new SelectClauseExpression ( new PropertyValueExpression ( name ) ) ) ; \n\t\t} \n\treturn new SelectClause ( StreamSelector . ISTREAM_ONLY , selectList ) ; \n\t} \n"}, {"code": "$F156045 ( msg , x , super , this ) "}, {"code": "public static String makeMarginTransform ( double owidth , double oheight , double iwidth , double iheight , double lmargin , double tmargin , double rmargin , double bmargin ) { \n\tdouble swidth = iwidth + lmargin + rmargin ; \n\tdouble sheight = iheight + tmargin + bmargin ; \n\tdouble scale = Math . max ( swidth / owidth , sheight / oheight ) ; \n\tdouble offx = ( scale * owidth - swidth ) * NUM00 + lmargin ; \n\tdouble offy = ( scale * oheight - sheight ) * NUM00 + tmargin ; \n\treturn NUM00 + fmt ( NUM00 / scale ) + NUM00 + fmt ( offx ) + NUM00 + fmt ( offy ) + NUM00 ; \n\t} \n"}, {"code": "public static boolean isAttachment ( String contentDisposition ) { \n\treturn contentDisposition != null && contentDisposition . regionMatches ( _BOOL , NUM00 , NUM00 , NUM00 , NUM00 ) ; \n\t} \n"}, {"code": "private JMenu createInsertMenu $F72 { \n\t$F132272 ( insertMenu ) insertMenu . add ( actionManager . getNewNetworkAction ( ) ) ; \n\t$F132272 ( newGaugeSubMenu ) for ( Action action : actionManager . getPlotActions ( ) ) $F207 ( newGaugeSubMenu , action ) insertMenu . add ( newGaugeSubMenu ) ; \n\t$F132272 ( newWorldSubMenu ) for ( Action action : actionManager . getNewWorldActions ( ) ) $F207 ( newWorldSubMenu , action ) insertMenu . add ( newWorldSubMenu ) ; \n\t$F55657 ( insertMenu ) insertMenu . add ( actionManager . getNewDocViewerAction ( ) ) ; \n\tinsertMenu . add ( actionManager . getNewConsoleAction ( ) ) ; \n\treturn insertMenu ; \n\t} \n"}, {"code": "public static $F11968 findPackages $F72 { \n\t$F172413 ( result ) $F14937 packages ; \n\tinitCache ( ) ; \n\t$F172414 ( result ) $F54171 ( packages , m_ClassCache ) while $F1444 ( packages ) { \n\t\t$F99853 ( result , packages ) } \n\tCollections . sort ( result , new StringCompare $F72 ) ; \n\treturn result ; \n\t} \n"}, {"code": "public static String convertSystemNameToAlternate ( String systemName ) { \n\tif ( ! validSystemNameFormat ( systemName , systemName . charAt ( NUM00 ) , NUM00 ) ) $F2455 String altName = NUM00 ; \n\taltName = systemName ; \n\treturn altName ; \n\t} \n"}, {"code": "private void initializeUserDirectives $F72 { \n\t$F9404 ( userDirectives ) IEclipsePreferences preferences = VelocityCorePlugin . getPreferences ( ) ; \n\tString directives = preferences . get ( IPreferencesConstants . VELOCITY_USER_DIRECTIVES , NUM00 ) ; \n\t$F17727 ( st , directives ) while $F1444 ( st ) { \n\t\t$F14952 ( directive , st ) $F172220 ( name , directive ) int type = ( directive . endsWith ( NUM00 ) ? Directive . BLOCK : Directive . LINE ) ; \n\t\t$F34170 ( userDirectives , name ) addDirective ( new VelocityDirective ( name , type ) ) ; \n\t\t} \n\t} \n"}, {"code": "private synchronized void storeTimestampAndSetStatus ( Timestamper . TimestampSucceeded message , TimestampRecord timestampRecord ) throws Exception { \n\ttry { \n\t\tpersistTimestampRecord ( message , timestampRecord ) ; \n\t\tsetTimestampSucceeded ( ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F5197 ( log , e ) setTimestampFailedRegardlessOfQueue ( new DateTime $F72 ) ; \n\t\tthrow e ; \n\t\t} \n\t} \n"}, {"code": "public static Character [ ] valuesOf $F53421 ( array ) { \n\tCharacter [ ] dest = new Character [ array . length ] ; \n\tfor ( $F1139 ( i , array ) ) $F11856 ( dest , i , Character , array ) return dest ; \n\t} \n"}, {"code": "public void mark ( int readlimit ) { \n\tstream . mark ( readlimit ) ; \n\tif ( markSupported ( ) ) { \n\t\tmarkpos = framePos ; \n\t\tmarkPushBackLen = pushBackLen ; \n\t\tif ( markPushBackLen > NUM00 ) { \n\t\t\tif ( markPushBackBuffer == null ) $F75474 ( markPushBackBuffer , frameSize ) $F135 ( System , pushBackBuffer , markPushBackBuffer , markPushBackLen ) } \n\t\t} \n\t} \n"}, {"code": "public void testCreatingLauncherWithJetty1 $F72 { \n\tSwtBotProjectCreation . createMavenGwtProjectIsCreated1 ( bot , PROJECT_NAME , PACKAGE_NAME ) ; \n\tSwtBotProjectDebug . launchGWTDevModeWithJettyThenTerminateIt ( bot , PROJECT_NAME ) ; \n\tString persistedArgs = SwtBotProjectDebug . getTheProgramArgsTextBox ( bot ) ; \n\t$F196452 ( assertTrue , persistedArgs ) } \n"}, {"code": "$F61852 public void test_getTablesLjava_lang_StringLjava_lang_StringLjava_lang_String$Ljava_lang_String $F72 throws SQLException { \n\t$F806 tablesName = { \n\t\tVIEW_NAME , DatabaseCreator . TEST_TABLE1 , DatabaseCreator . TEST_TABLE3 } \n\t; \n\t$F64831 ( tablesType ) Arrays . sort ( tablesName ) ; \n\tArrays . sort ( tablesType ) ; \n\tResultSet rs = meta . getTables ( null , null , null , null ) ; \n\twhile $F1682 ( rs ) { \n\t\tassertTrue ( NUM00 , Arrays . binarySearch ( tablesName , rs . getString ( NUM00 ) ) > - NUM00 ) ; \n\t\tassertNull ( $F34152 ( rs ) , rs . getString ( NUM00 ) ) ; \n\t\tassertTrue ( NUM00 , Arrays . binarySearch ( tablesType , rs . getString ( NUM00 ) ) > - NUM00 ) ; \n\t\t$F86060 ( assertEquals , rs ) } \n\t$F59 ( rs ) rs = meta . getTables ( conn . getCatalog ( ) , null , null , $F78037 ) ; \n\t$F32625 ( assertFalse , rs ) $F59 ( rs ) rs = meta . getTables ( conn . getCatalog ( ) , null , null , $F78037 ) ; \n\t$F32625 ( assertTrue , rs ) $F263195 ( assertEquals , VIEW_NAME , rs ) assertNull ( $F34152 ( rs ) , rs . getString ( NUM00 ) ) ; \n\t$F86060 ( assertEquals , rs ) $F86060 ( assertEquals , rs ) $F32625 ( assertFalse , rs ) $F32625 ( assertFalse , rs ) $F59 ( rs ) rs = meta . getTables ( null , null , NUM00 , null ) ; \n\twhile $F1682 ( rs ) { \n\t\tassertTrue ( NUM00 , Arrays . binarySearch ( tablesName , rs . getString ( NUM00 ) ) > - NUM00 ) ; \n\t\t$F86075 ( assertNull , rs ) assertTrue ( NUM00 , Arrays . binarySearch ( tablesType , rs . getString ( NUM00 ) ) > - NUM00 ) ; \n\t\t$F86060 ( assertEquals , rs ) } \n\t$F59 ( rs ) $F59 ( conn ) try { \n\t\tmeta . getTables ( null , null , null , null ) ; \n\t\tfail ( NUM00 ) ; \n\t\t} \n\t$F31184 } \n"}, {"code": "public static boolean needsDefaultFormatter ( ValueFormatter formatter ) { \n\t$F397 ( formatter , _BOOL ) if ( formatter instanceof DefaultValueFormatter ) return _BOOL ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "public boolean putGrammar ( SchemaGrammar grammar , boolean deep , boolean ignoreConflict ) { \n\tif ( ! ignoreConflict ) $F8587 ( putGrammar , grammar , deep ) SchemaGrammar sg = getGrammar ( grammar . fTargetNamespace ) ; \n\tif ( sg == null ) { \n\t\tputGrammar ( grammar ) ; \n\t\t} \n\t$F42316 ( deep , _BOOL ) Vector currGrammars = grammar . getImportedGrammars ( ) ; \n\t$F1933 ( currGrammars , _BOOL ) Vector grammars = ( ( Vector ) currGrammars . clone ( ) ) ; \n\tSchemaGrammar sg1 , sg2 ; \n\tVector gs ; \n\tfor ( $F2277 ( i , grammars ) ) { \n\t\tsg1 = ( SchemaGrammar ) grammars . elementAt ( i ) ; \n\t\tsg2 = getGrammar ( sg1 . fTargetNamespace ) ; \n\t\tif ( sg2 == null ) { \n\t\t\tgs = sg1 . getImportedGrammars ( ) ; \n\t\t\t$F45557 ( gs ) for ( $F5373 ( j , gs ) ) { \n\t\t\t\tsg2 = ( SchemaGrammar ) gs . elementAt ( j ) ; \n\t\t\t\tif $F2200 ( grammars , sg2 ) grammars . addElement ( sg2 ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse $F106 ( grammars , sg1 ) } \n\tfor ( $F5373 ( i , grammars ) ) { \n\t\tputGrammar ( ( SchemaGrammar ) grammars . elementAt ( i ) ) ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public List $F36647 nodes ( $F5466 Object key , int cnt ) { \n\t$F37759 ( nodes , key , cnt ) } \n"}, {"code": "public boolean isExistsKey ( Connection connection , $F131 keys ) { \n\t$F83 ( builder ) $F84 ( builder ) builder . append ( tableName ) ; \n\t$F84 ( builder ) String delimiter = NUM00 ; \n\tfor ( String keyField : keyFieldNames ) { \n\t\tbuilder . append ( delimiter ) ; \n\t\tbuilder . append ( keyField ) ; \n\t\t$F84 ( builder ) delimiter = NUM00 ; \n\t\t} \n\t$F1822 ( query , builder ) PreparedStatement statement = null ; \n\ttry { \n\t\tif ( ( ExecutionPathDebugLog . isDebugEnabled ) && $F585 ( log ) ) { \n\t\t\tlog . debug ( NUM00 + query + NUM00 + print ( keys ) + NUM00 ) ; \n\t\t\t} \n\t\tstatement = connection . prepareStatement ( query ) ; \n\t\tfor ( $F1139 ( i , keys ) ) { \n\t\t\tstatement . setObject ( i + NUM00 , keys [ i ] ) ; \n\t\t\t} \n\t\t$F49 ( rs , statement ) if $F17350 ( rs ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\treturn _BOOL ; \n\t\t} \n\tcatch ( SQLException ex ) { \n\t\t$F60713 ( message , query , ex ) log . error ( message , ex ) ; \n\t\tstoreExceptionHandler . handle ( message , ex ) ; \n\t\tthrow new StoreExceptionDBRel ( message , ex ) ; \n\t\t} \n\tfinally { \n\t\ttry $F1823 ( statement ) $F31184 } \n\t} \n"}, {"code": "public static $F4203 T implement ( $F20474 type , Object object ) { \n\tif $F38790 ( type , object ) { \n\t\t$F123138 ( type , object ) } \n\treturn type . cast ( Proxy . newProxyInstance ( type . getClassLoader ( ) , $F139647 ( type ) , new DuckType ( object ) ) ) ; \n\t} \n"}, {"code": "public boolean isIvrVsan ( int vsanId ) { \n\tboolean inRange = vsans . contains ( vsanId ) ; \n\tif ( ! inRange ) { \n\t\tfor ( IntRange range : getVsansRanges ( ) ) { \n\t\t\tinRange = range . containsInteger ( vsanId ) ; \n\t\t\t$F30711 ( inRange ) } \n\t\t} \n\treturn inRange ; \n\t} \n"}, {"code": "private void addBOMLines ( MProduct product , BigDecimal qty ) { \n\tMPPProductBOM bom = MPPProductBOM . getDefault ( product , null ) ; \n\tMPPProductBOMLine [ ] bomLines = bom . getLines ( _BOOL ) ; \n\tfor ( $F1139 ( i , bomLines ) ) addBOMLine ( bomLines [ i ] , qty ) ; \n\tlog . fine ( NUM00 + bomLines . length ) ; \n\t} \n"}, {"code": "private QueryExp buildOptionalQueryExp ( final $F806 attributes , final $F131 values ) { \n\tQueryExp queryExp = null ; \n\tfor ( $F1139 ( i , attributes ) ) { \n\t\tif ( values [ i ] instanceof Boolean ) { \n\t\t\tif ( queryExp == null ) { \n\t\t\t\tqueryExp = Query . eq ( Query . attr ( attributes [ i ] ) , Query . value ( ( ( Boolean ) values [ i ] ) ) ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tqueryExp = Query . and ( queryExp , Query . eq ( Query . attr ( attributes [ i ] ) , Query . value ( ( ( Boolean ) values [ i ] ) ) ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse if ( values [ i ] instanceof Number ) { \n\t\t\tif ( queryExp == null ) { \n\t\t\t\tqueryExp = Query . eq ( Query . attr ( attributes [ i ] ) , Query . value ( ( Number ) values [ i ] ) ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tqueryExp = Query . and ( queryExp , Query . eq ( Query . attr ( attributes [ i ] ) , Query . value ( ( Number ) values [ i ] ) ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse if ( values [ i ] instanceof String ) { \n\t\t\tif ( queryExp == null ) { \n\t\t\t\tqueryExp = Query . eq ( Query . attr ( attributes [ i ] ) , Query . value ( ( String ) values [ i ] ) ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tqueryExp = Query . and ( queryExp , Query . eq ( Query . attr ( attributes [ i ] ) , Query . value ( ( String ) values [ i ] ) ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn queryExp ; \n\t} \n"}, {"code": "$F1 public Foo fetchByUuid_C_Last $F38154 ( uuid , companyId , orderByComparator ) { \n\tint count = countByUuid_C ( uuid , companyId ) ; \n\t$F38155 ( count ) $F38156 list = findByUuid_C ( uuid , companyId , count - NUM00 , count , orderByComparator ) ; \n\t$F38161 ( list ) $F1274 } \n"}, {"code": "public final boolean at ( String str , CharSequence csq ) { \n\tint i = index ; \n\t$F115 ( length , csq ) for ( $F124686 ( j , str ) ) { \n\t\tif ( ( i >= length ) || ( str . charAt ( j ++ ) != csq . charAt ( i ++ ) ) ) return _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static int findLastOf $F68141 ( container , charSeq , begin ) { \n\tfor ( int i = begin ; \n\ti < container . length ( ) && i >= NUM00 ; \n\t-- i ) { \n\t\tif ( charSeq . contains ( NUM00 + container . charAt ( i ) ) ) return i ; \n\t\t} \n\t$F150 } \n"}, {"code": "private static CookieOrigin adjustEffectiveHost ( final CookieOrigin origin ) { \n\t$F107310 ( host , origin ) boolean isLocalHost = _BOOL ; \n\tfor ( $F1088 ( i , host ) ) { \n\t\t$F1280 ( ch , host , i ) if $F37111 ( ch ) $F3468 ( isLocalHost , _BOOL ) } \n\tif ( isLocalHost ) { \n\t\thost += NUM00 ; \n\t\treturn new CookieOrigin ( host , origin . getPort ( ) , origin . getPath ( ) , origin . isSecure ( ) ) ; \n\t\t} \n\telse { \n\t\treturn origin ; \n\t\t} \n\t} \n"}, {"code": "protected final void finalize $F72 $F845 "}, {"code": "public boolean addBound ( TypeBound bound ) { \n\tif ( bound . isTrivial ( ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tfinal boolean wasAdded = internal_addBound ( bound ) ; \n\tif ( DEBUG ) { \n\t\tfinal String suffix = wasAdded ? NUM00 : NUM00 ; \n\t\tlog ( NUM00 + bound + suffix ) ; \n\t\t} \n\treturn wasAdded ; \n\t} \n"}, {"code": "public boolean remove ( SimEvent event ) $F20067 ( sortedSet , event ) "}, {"code": "public static final void printThreadCpuTime ( final Thread thread ) { \n\tif ( tbe . isThreadCpuTimeEnabled ( ) ) { \n\t\tlog . info ( $F2990 ( thread ) + getThreadCpuTime ( thread ) + NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "public static Version fromBits $F14337 ( major , minor , bugfix ) { \n\treturn new Version ( major , minor , bugfix ) ; \n\t} \n"}, {"code": "$F48525 ( n , d , scale , i , sb , j , rGen , points ) "}, {"code": "public static String bytesToString $F23416 ( b ) { \n\tif $F8830 ( b ) $F2455 return String . format ( NUM00 , b [ NUM00 ] , b [ NUM00 ] , b [ NUM00 ] , b [ NUM00 ] ) ; \n\t} \n"}, {"code": "private String convertToIsoDateTime ( String humanReadableDateTime ) throws ParseException { \n\t$F121432 ( dfInitial ) $F126579 ( initialDateTime , dfInitial , humanReadableDateTime ) $F121432 ( df ) $F5330 ( df , initialDateTime ) } \n"}, {"code": "private static boolean classNamesEqual ( String name1 , String name2 ) { \n\tname1 = $F31604 ( name1 ) ; \n\tname2 = $F31604 ( name2 ) ; \n\t$F1964 ( name1 , name2 ) } \n"}, {"code": "public boolean optBoolean ( int index ) $F8587 ( optBoolean , index , _BOOL ) "}, {"code": "public CommandBuilder withLongSwitchIfPresent ( $F2100 ( properties ) , String ... keys ) { \n\twithLongSwitchIfPresent ( properties , UnaryOperator . identity ( ) , keys ) ; \n\treturn this ; \n\t} \n"}, {"code": "$F45572 ( context , intent , pm , handlers , PackageManager , _BOOL , resolveInfo , filter , Log , TAG ) "}, {"code": "private void onCollectionClicked ( Long collectionId ) { \n\tIntent intent = new Intent ( this , ProductListActivity . class ) ; \n\tif ( collectionId != null ) { \n\t\tintent . putExtra ( ProductListActivity . EXTRA_COLLECTION_ID , collectionId ) ; \n\t\t} \n\tstartActivity ( intent ) ; \n\t} \n"}, {"code": "public void addFrequency ( Frequency frequency ) $F207 ( frequencies , frequency ) "}, {"code": "public boolean isItemStackRegisteredForName ( ItemStack stack , String oreName ) { \n\tfinal $F2027 oreIDs = OreDictionary . getOreIDs ( stack ) ; \n\tfor ( final int oreID : oreIDs ) { \n\t\tif ( oreName . equals ( OreDictionary . getOreName ( oreID ) ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "private static $F2304 $F52326 createClassloaderUrls ( $F2304 URL url ) throws PluginException { \n\tList $F100821 urls = new $F188804 $F72 ; \n\turls . add ( url ) ; \n\tManifest mf = null ; \n\t$F291035 ( f , url ) if $F4926 ( f ) { \n\t\tJarInputStream jis = null ; \n\t\ttry { \n\t\t\tjis = new JarInputStream ( url . openStream ( ) ) ; \n\t\t\tmf = jis . getManifest ( ) ; \n\t\t\t} \n\t\tcatch ( IOException ioe ) { \n\t\t\tthrow new PluginException ( NUM00 + url , ioe ) ; \n\t\t\t} \n\t\t$F19458 ( IO , jis ) } \n\telse { \n\t\tFile manifest = guessManifest ( f ) ; \n\t\tif ( manifest != null ) { \n\t\t\tFileInputStream is = null ; \n\t\t\ttry { \n\t\t\t\t$F5335 ( is , manifest ) mf = new Manifest ( is ) ; \n\t\t\t\t} \n\t\t\tcatch ( IOException e ) { \n\t\t\t\tthrow new PluginException ( NUM00 + url , e ) ; \n\t\t\t\t} \n\t\t\t$F19458 ( IO , is ) } \n\t\t} \n\tif ( mf != null ) { \n\t\ttry { \n\t\t\taddClassPathFromManifest ( url , urls , mf ) ; \n\t\t\t} \n\t\tcatch ( MalformedURLException e ) { \n\t\t\tthrow new PluginException ( NUM00 + url , e ) ; \n\t\t\t} \n\t\t} \n\treturn urls . toArray ( new URL $F2313 ( urls ) ) ; \n\t} \n"}, {"code": "$F1 public void write $F36827 ( str , st , end ) throws IOException $F21537 ( out , str , st , end ) "}, {"code": "$F125330 ( isAwake ) "}, {"code": "private static void transferStreams ( InputStream source , OutputStream destination ) { \n\t$F12496 ( buffer ) try { \n\t\twhile ( _BOOL ) { \n\t\t\tint bytesRead = - NUM00 ; \n\t\t\ttry $F616 ( bytesRead , source , buffer ) catch ( IOException e ) $F932 $F167039 ( bytesRead ) try $F29756 ( destination , buffer , bytesRead ) catch ( IOException e ) $F932 } \n\t\t} \n\tfinally { \n\t\ttry $F881 ( source ) $F29052 $F53155 ( destination ) } \n\t} \n"}, {"code": "public static void gc $F72 { \n\tif ( startedGc ) { \n\t\tforceGc = _BOOL ; \n\t\tgcShouldLoop = _BOOL ; \n\t\t} \n\tstartGCThread ( ) ; \n\t$F8073 ( LOCK ) try $F31130 ( Thread ) catch ( InterruptedException er ) $F845 } \n"}, {"code": "private $F84864 toArrayList $F72 { \n\t$F91915 ( list ) $F91919 ( p , first , succ , item , list ) return list ; \n\t} \n"}, {"code": "public static BlobEntry isBlobEntryForStoring ( String repositoryLocation , String mimeType ) { \n\tRepositoryLocation location ; \n\ttry { \n\t\tlocation = new RepositoryLocation ( repositoryLocation ) ; \n\t\tEntry entry = location . locateEntry ( ) ; \n\t\tif ( entry instanceof BlobEntry ) { \n\t\t\tBlobEntry blobEntry = ( BlobEntry ) entry ; \n\t\t\tif ( mimeType . equals ( blobEntry . getMimeType ( ) ) ) { \n\t\t\t\treturn blobEntry ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tSwingTools . showSimpleErrorMessage ( $F20534 ( blobEntry ) ) ; \n\t\t\t\t$F1274 } \n\t\t\t} \n\t\telse if ( entry == null ) $F4915 ( createBlobEntry , repositoryLocation ) else { \n\t\t\tSwingTools . showSimpleErrorMessage ( $F20534 ( entry ) ) ; \n\t\t\t} \n\t\t} \n\tcatch ( RepositoryException e ) { \n\t\tSwingTools . showSimpleErrorMessage ( NUM00 , e ) ; \n\t\t} \n\tcatch ( MalformedRepositoryLocationException e ) { \n\t\tSwingTools . showSimpleErrorMessage ( NUM00 , e ) ; \n\t\t} \n\t$F1274 } \n"}, {"code": "$F133772 ( RequestMethod ) $F4586 public RestWrapper insert ( $F100302 $F100303 Batch batch , BindingResult bindingResult , Principal principal ) { \n\tRestWrapper restWrapper = null ; \n\t$F100315 ( bindingResult , bindingResultError ) try { \n\t\tcom . wipro . ats . bdre . md . dao . jpa . Batch jpaBatch = new com . wipro . ats . bdre . md . dao . jpa . Batch $F72 ; \n\t\tjpaBatch . setBatchType ( batch . getBatchType ( ) ) ; \n\t\tInstanceExec instanceExec = new InstanceExec $F72 ; \n\t\tif ( batch . getSourceInstanceExecId ( ) != null ) { \n\t\t\tinstanceExec . setInstanceExecId ( batch . getSourceInstanceExecId ( ) ) ; \n\t\t\tjpaBatch . setInstanceExec ( instanceExec ) ; \n\t\t\t} \n\t\tLong autoGenBatchId = batchDAO . insert ( jpaBatch ) ; \n\t\tbatch . setBatchId ( autoGenBatchId ) ; \n\t\t$F4608 ( restWrapper , batch , RestWrapper ) LOGGER . info ( RECORDWITHID + batch . getBatchId ( ) + NUM00 + principal . getName ( ) + batch ) ; \n\t\t} \n\t$F100376 ( LOGGER , e , restWrapper , RestWrapper ) return restWrapper ; \n\t} \n"}, {"code": "private void onClickGalleryImage ( final RecentMedia aMediaItem ) { \n\tif ( null != mCamera ) { \n\t\tmCamera . stopPreview ( ) ; \n\t\t} \n\tmSelectedGalleryItemsList . add ( aMediaItem ) ; \n\tif ( ( null != aMediaItem . mThumbnail ) && ! mIsAvatarMode ) { \n\t\tupdateUiConfiguration ( UI_SHOW_TAKEN_IMAGE , IMAGE_ORIGIN_GALLERY ) ; \n\t\tmImagePreviewImageView . setImageBitmap ( aMediaItem . mThumbnail ) ; \n\t\tVectorApp . setSavedCameraImagePreview ( aMediaItem . mThumbnail ) ; \n\t\t} \n\telse if ( null != aMediaItem . mFileUri ) { \n\t\tdisplayImagePreview ( null , null , aMediaItem . mFileUri , IMAGE_ORIGIN_GALLERY ) ; \n\t\t} \n\telse $F13955 ( Log , LOG_TAG ) mImagePreviewImageView . setTag ( aMediaItem . mFileUri ) ; \n\t} \n"}, {"code": "public static double pareto ( double alpha ) { \n\tif $F102905 ( alpha ) $F824 return Math . pow ( NUM00 - uniform ( ) , - NUM00 / alpha ) - NUM00 ; \n\t} \n"}, {"code": "public void disconnectFromBroker ( final MqttAsyncConnection connection ) { \n\ttry { \n\t\tconnection . disconnect ( new MqttDisconnectionResultHandler $F72 ) ; \n\t\t} \n\tcatch ( SpyException e ) { \n\t\tPlatform . runLater ( new MqttEventHandler ( new MqttDisconnectionAttemptFailureEvent ( connection , e ) ) ) ; \n\t\t$F1575 ( logger , e ) } \n\t} \n"}, {"code": "public $F131 copyAll $F72 $F138478 ( Arrays , args ) "}, {"code": "public void start $F72 { \n\t$F21153 ( LOG , port , logLevel ) try $F28175 ( component ) $F54147 ( e ) $F10635 ( LOG , port ) running = _BOOL ; \n\t$F3224 ( started , System ) } \n"}, {"code": "public FSAccountFedInfo readAccountFedInfo ( String userID , String providerID ) throws FSAccountMgmtException $F25228 ( readAccountFedInfo , userID , providerID ) "}, {"code": "public Response $F1947 ( status , mimeType , txt ) { \n\tthis . status = status ; \n\tthis . mimeType = mimeType ; \n\ttry { \n\t\tthis . data = $F18490 ( txt ) ; \n\t\t} \n\tcatch ( $F42439 uee ) $F302 ( uee ) } \n"}, {"code": "@ Parallel @ Realtime ( limit = LINEAR ) public E reduce ( BinaryOperator $F11685 operator ) { \n\t$F11686 itr = iterator ( ) ; \n\tif $F87568 ( itr ) $F1274 $F378645 ( accumulator , itr ) while $F2921 ( itr ) accumulator = operator . apply ( accumulator , itr . next ( ) ) ; \n\treturn accumulator ; \n\t} \n"}, {"code": "public void saveHistory ( String filename ) throws Exception { \n\t$F4649 ( fos , filename ) $F7054 ( oos , fos ) oos . writeObject ( getHistory ( ) ) ; \n\t$F59 ( oos ) } \n"}, {"code": "private void checkSize ( final int i ) { \n\tif ( i >= max_size ) { \n\t\tfinal int old_size = max_size ; \n\t\tmax_size += increment_size ; \n\t\tif ( max_size <= i ) { \n\t\t\tmax_size = i + increment_size + NUM00 ; \n\t\t\t} \n\t\tfinal $F1986 temp = items ; \n\t\t$F10254 ( items , max_size ) $F135 ( System , temp , items , old_size ) increment_size = incrementSize ( increment_size ) ; \n\t\t} \n\t} \n"}, {"code": "public double nextGaussian $F72 { \n\treturn random . nextGaussian ( ) ; \n\t} \n"}, {"code": "private void readFromProperties ( final Properties props , final boolean defaultMinimized , final int defaultX , final int defaultY , final boolean defaultVisible ) { \n\tminimized = Boolean . parseBoolean ( props . getProperty ( NUM00 + name + NUM00 , Boolean . toString ( defaultMinimized ) ) ) ; \n\tvisible = Boolean . parseBoolean ( props . getProperty ( NUM00 + name + NUM00 , Boolean . toString ( defaultVisible ) ) ) ; \n\tx = Integer . parseInt ( props . getProperty ( NUM00 + name + NUM00 , Integer . toString ( defaultX ) ) ) ; \n\ty = Integer . parseInt ( props . getProperty ( NUM00 + name + NUM00 , Integer . toString ( defaultY ) ) ) ; \n\t} \n"}, {"code": "public boolean sendEMailAttachments ( int AD_User_ID , String subject , String message , $F92258 attachments , boolean html ) { \n\tMUser to = MUser . get ( getCtx ( ) , AD_User_ID ) ; \n\tString toEMail = to . getEMail ( ) ; \n\tif $F6036 ( toEMail ) { \n\t\t$F37855 ( log , to ) return _BOOL ; \n\t\t} \n\tEMail email = createEMail ( null , to , subject , message , html ) ; \n\t$F397 ( email , _BOOL ) email . addAttachments ( attachments ) ; \n\ttry { \n\t\treturn sendEmailNow ( null , to , email ) ; \n\t\t} \n\tcatch ( Exception ex ) { \n\t\tlog . severe ( getName ( ) + NUM00 + ex . getLocalizedMessage ( ) ) ; \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "private void addUnitTaxCalculationInfoClone ( final TaxCalculationInfo taxCalInfo , final TaxCalculationInfo clone ) { \n\tfinal List < UnitTaxCalculationInfo > units = new ArrayList < UnitTaxCalculationInfo > $F72 ; \n\tfinal List < UnitTaxCalculationInfo > unitsByDate = new ArrayList < UnitTaxCalculationInfo > $F72 ; \n\tfor ( final UnitTaxCalculationInfo unitInfo : taxCalInfo . getUnitTaxCalculationInfos ( ) ) { \n\t\tfinal UnitTaxCalculationInfo newUnitInfo = getUnitTaxCalculationInfoClone ( unitInfo ) ; \n\t\tunitsByDate . add ( newUnitInfo ) ; \n\t\t} \n\tclone . setUnitTaxCalculationInfo ( units ) ; \n\t} \n"}, {"code": "public SocketWrapper accept $F72 throws IOException { \n\tfor ( $F589 ) { \n\t\ttry { \n\t\t\tSocket sock = serverSocket . accept ( ) ; \n\t\t\treturn new SocketWrapper ( sock ) ; \n\t\t\t} \n\t\tcatch ( SocketTimeoutException e ) $F845 catch ( IOException e ) { \n\t\t\tif ( done ) { \n\t\t\t\tthrow new SocketTerminationException ( NUM00 , e ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tthrow e ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private String replaceDotInMustacheKeys ( $F20109 ( mustacheKeys ) , final String pluginCall ) { \n\tString fixedPluginCall = pluginCall ; \n\tfor ( String mustacheKey : mustacheKeys ) { \n\t\tif $F3578 ( mustacheKey ) { \n\t\t\tfixedPluginCall = fixedPluginCall . replace ( NUM00 + mustacheKey + NUM00 , $F139654 ( mustacheKey ) ) ; \n\t\t\t} \n\t\t} \n\treturn fixedPluginCall ; \n\t} \n"}, {"code": "protected synchronized Instance processBuffers $F72 { \n\tif ( m_firstBuffer != null && m_secondBuffer != null && $F3816 ( m_firstBuffer ) && $F3816 ( m_secondBuffer ) ) { \n\t\tif $F27748 ( m_stopRequested ) $F1337 InstanceHolder firstH = m_firstBuffer . peek ( ) ; \n\t\tInstanceHolder secondH = m_secondBuffer . peek ( ) ; \n\t\tInstance first = firstH . m_instance ; \n\t\tInstance second = secondH . m_instance ; \n\t\tint cmp = compare ( first , second , firstH , secondH ) ; \n\t\tif ( cmp == NUM00 ) { \n\t\t\tInstance newInst = generateMergedInstance ( m_firstBuffer . remove ( ) , m_secondBuffer . remove ( ) ) ; \n\t\t\treturn newInst ; \n\t\t\t} \n\t\telse if ( cmp < NUM00 ) { \n\t\t\tdo { \n\t\t\t\t$F7042 ( m_firstBuffer ) if $F3817 ( m_firstBuffer ) { \n\t\t\t\t\t$F56194 ( firstH , m_firstBuffer ) first = firstH . m_instance ; \n\t\t\t\t\tcmp = compare ( first , second , firstH , secondH ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\twhile ( cmp < NUM00 && $F3816 ( m_firstBuffer ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tdo { \n\t\t\t\t$F7042 ( m_secondBuffer ) if $F3817 ( m_secondBuffer ) { \n\t\t\t\t\t$F56194 ( secondH , m_secondBuffer ) second = secondH . m_instance ; \n\t\t\t\t\tcmp = compare ( first , second , firstH , secondH ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\twhile ( cmp > NUM00 && $F3816 ( m_secondBuffer ) ) ; \n\t\t\t} \n\t\t} \n\t$F1274 } \n"}, {"code": "public boolean isThemeConstant ( String constantName , boolean def ) { \n\tString c = getThemeConstant ( constantName , null ) ; \n\t$F1933 ( c , def ) return c . equalsIgnoreCase ( NUM00 ) || c . equals ( NUM00 ) ; \n\t} \n"}, {"code": "public void testDelete4 $F72 throws SQLException { \n\tDatabaseCreator . fillFKCascadeTable ( conn ) ; \n\t$F62856 ( statement , DatabaseCreator ) } \n"}, {"code": "public void unmap ( int addr , int len ) { \n\tfor ( int i = NUM00 ; \n\ti < len ; \n\ti += PAGE_SIZE ) { \n\t\tint pte = getPTE ( addr + i ) ; \n\t\tif ( getPage ( pte ) != null ) { \n\t\t\treadableMemory [ pte ] = null ; \n\t\t\twritableMemory [ pte ] = null ; \n\t\t\texecutableMemory [ pte ] = null ; \n\t\t\t} \n\t\telse { \n\t\t\tthrow new Error ( $F36004 ( Integer , addr ) + len ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private synchronized void saveToSettings $F72 { \n\tList < List > $F204 ( entriesToSave ) ; \n\tfor ( StatusHistoryEntry entry : entries . values ( ) ) $F3762 ( entriesToSave , entryToList , entry ) settings . putList ( NUM00 , entriesToSave ) ; \n\t} \n"}, {"code": "protected void initFinished $F72 $F845 "}, {"code": "protected void addToMaintenanceQueue ( NodePortTuple npt ) { \n\tif $F38948 ( maintenanceQueue , npt , _BOOL ) maintenanceQueue . add ( npt ) ; \n\t} \n"}, {"code": "public MovieScraperMetadataPanel ( MovieScraperMetadataConfig config ) $F46658 ( this , config , initComponents ) "}, {"code": "$F1654 ( seq ) "}, {"code": "public static void assertPropsPerRow ( Iterator < EventBean > iterator , SafeIterator < EventBean > safeIterator , $F806 propertyNames , $F29684 expected ) { \n\tassertPropsPerRow ( EPAssertionUtil . iteratorToArray ( iterator ) , propertyNames , expected ) ; \n\tassertPropsPerRow ( EPAssertionUtil . iteratorToArray ( safeIterator ) , propertyNames , expected ) ; \n\t$F59 ( safeIterator ) } \n"}, {"code": "public boolean isLeaf $F72 $F52232 ( children ) "}, {"code": "public void testGet $F72 throws Exception { \n\tIgniteCache $F76740 cache = populate ( ) ; \n\tfor ( long i = from ; \n\ti < to ; \n\ti ++ ) { \n\t\t$F5856 ( val , cache , i ) assertNotNull ( val ) ; \n\t\tassertEquals ( i , val . longValue ( ) ) ; \n\t\t} \n\t$F127421 ( assertEquals , swappedCnt ) $F127421 ( assertEquals , offheapedCnt ) assertEquals ( to - from , unswapedCnt . get ( ) + onheapedCnt . get ( ) ) ; \n\tcheckEntries ( cache ) ; \n\tassertEquals ( to - from , unswapedCnt . get ( ) + onheapedCnt . get ( ) ) ; \n\t} \n"}, {"code": "public int read $F72 throws IOException { \n\tif ( hasNextChar ) { \n\t\thasNextChar = _BOOL ; \n\t\twrite ( nextChar ) ; \n\t\treturn nextChar ; \n\t\t} \n\tif ( previousLine != lexer . getLine ( ) ) { \n\t\tnumUnicodeEscapesFoundOnCurrentLine = NUM00 ; \n\t\tpreviousLine = lexer . getLine ( ) ; \n\t\t} \n\t$F7468 ( c , reader ) if ( c != NUM00 ) { \n\t\twrite ( c ) ; \n\t\treturn c ; \n\t\t} \n\t$F10201 ( c , reader ) if ( c != NUM00 ) { \n\t\thasNextChar = _BOOL ; \n\t\tnextChar = c ; \n\t\twrite ( NUM00 ) ; \n\t\t$F1278 } \n\tint numberOfUChars = NUM00 ; \n\tdo { \n\t\tnumberOfUChars ++ ; \n\t\t$F10201 ( c , reader ) } \n\twhile ( c == NUM00 ) ; \n\tcheckHexDigit ( c ) ; \n\t$F83 ( charNum ) $F36813 ( charNum , c ) for ( $F6268 ( i ) ) { \n\t\t$F10201 ( c , reader ) checkHexDigit ( c ) ; \n\t\t$F36813 ( charNum , c ) } \n\tint rv = Integer . parseInt ( $F89373 ( charNum ) ) ; \n\twrite ( rv ) ; \n\tnumUnicodeEscapesFound += NUM00 + numberOfUChars ; \n\tnumUnicodeEscapesFoundOnCurrentLine += NUM00 + numberOfUChars ; \n\treturn rv ; \n\t} \n"}, {"code": "public boolean isEmpty $F72 { \n\tif ( ! built ) $F18904 ( itemBoundables ) $F18904 ( root ) } \n"}, {"code": "protected AbstractWriter ( Writer w , Document doc , int pos , int len ) { \n\tthis . doc = doc ; \n\tit = new ElementIterator ( doc . getDefaultRootElement ( ) ) ; \n\tout = w ; \n\tstartOffset = pos ; \n\tendOffset = pos + len ; \n\tObject docNewline = doc . getProperty ( DefaultEditorKit . EndOfLineStringProperty ) ; \n\tif ( docNewline instanceof String ) { \n\t\tsetLineSeparator ( ( String ) docNewline ) ; \n\t\t} \n\telse { \n\t\tString newline = null ; \n\t\ttry $F185872 ( newline , System ) catch ( SecurityException se ) $F845 $F23170 ( newline ) setLineSeparator ( newline ) ; \n\t\t} \n\tcanWrapLines = _BOOL ; \n\t} \n"}, {"code": "protected void adjustPositionY ( int velocityY ) { \n\tif ( reverseLayout ) velocityY *= - NUM00 ; \n\tint childCount = getChildCount ( ) ; \n\tif ( childCount > NUM00 ) { \n\t\tint curPosition = ViewUtils . getCenterYChildPosition ( this ) ; \n\t\tint $F125539 ( childHeight , getHeight , getPaddingTop , getPaddingBottom ) ; \n\t\tint flingCount = getFlingCount ( velocityY , childHeight ) ; \n\t\tint targetPosition = curPosition + flingCount ; \n\t\tif ( mSinglePageFling ) { \n\t\t\tflingCount = Math . max ( - NUM00 , Math . min ( NUM00 , flingCount ) ) ; \n\t\t\ttargetPosition = flingCount == NUM00 ? curPosition : mPositionOnTouchDown + flingCount ; \n\t\t\t} \n\t\t$F89002 ( targetPosition , Math ) targetPosition = $F125548 ( Math , targetPosition , getItemCount ) ; \n\t\tif ( targetPosition == curPosition && ( ! mSinglePageFling || mPositionOnTouchDown == curPosition ) ) { \n\t\t\tView centerYChild = ViewUtils . getCenterYChild ( this ) ; \n\t\t\tif ( centerYChild != null ) { \n\t\t\t\tif ( mTouchSpan > centerYChild . getHeight ( ) * mTriggerOffset && targetPosition != NUM00 ) { \n\t\t\t\t\tif ( ! reverseLayout ) targetPosition -- ; \n\t\t\t\t\telse targetPosition ++ ; \n\t\t\t\t\t} \n\t\t\t\telse if ( mTouchSpan < centerYChild . getHeight ( ) * - mTriggerOffset && targetPosition != getItemCount ( ) - NUM00 ) { \n\t\t\t\t\tif ( ! reverseLayout ) targetPosition ++ ; \n\t\t\t\t\telse targetPosition -- ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tif ( DEBUG ) { \n\t\t\t$F125570 ( Log , mTouchSpan ) $F125570 ( Log , targetPosition ) } \n\t\tsmoothScrollToPosition ( safeTargetPosition ( targetPosition , getItemCount ( ) ) ) ; \n\t\t} \n\t} \n"}, {"code": "$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel ) "}, {"code": "$F1 public Node importTo ( Document hostDocument ) { \n\tValidateUtil . validateNotNull ( hostDocument , NUM00 ) ; \n\tElement clonedTokenElement = ( Element ) hostDocument . importNode ( _parsedToken . getDocumentElement ( ) , _BOOL ) ; \n\tmarkAssertionIdAttribute ( clonedTokenElement ) ; \n\treturn clonedTokenElement ; \n\t} \n"}, {"code": "public static Matrix random ( int m , int n ) { \n\t$F3788 ( A , m , n ) $F3791 ( X , A ) for ( $F119 ( i , m ) ) { \n\t\tfor ( $F119 ( j , n ) ) $F3794 ( X , i , j , Math ) } \n\treturn A ; \n\t} \n"}, {"code": "public void addPriorityUnit ( String id ) { \n\tif ( ! StringUtil . isPositiveInteger ( id ) ) $F932 $F46427 ( addPriorityUnit , Integer , id ) } \n"}, {"code": "private void calcIntervalDis $F72 { \n\t$F2329 ( mMarkTextPaint ) String defaultText = NUM00 ; \n\t$F28883 ( temp ) int max = NUM00 ; \n\tif $F8841 ( mItems ) { \n\t\tfor ( String i : mItems ) { \n\t\t\t$F77589 ( mMarkTextPaint , i , temp ) if ( temp . width ( ) > max ) { \n\t\t\t\tmax = temp . width ( ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse { \n\t\t$F77589 ( mMarkTextPaint , defaultText , temp ) max = temp . width ( ) ; \n\t\t} \n\tif $F20899 ( TextUtils , mAdditionCenterMark ) { \n\t\tmMarkTextPaint . setTextSize ( mNormalTextSize ) ; \n\t\t$F77589 ( mMarkTextPaint , mAdditionCenterMark , temp ) mAdditionCenterMarkWidth = temp . width ( ) ; \n\t\tmax += temp . width ( ) ; \n\t\t} \n\tmIntervalDis = max * mIntervalFactor ; \n\t} \n"}, {"code": "public boolean isUseSoftkeys $F72 { \n\treturn useSoftkeys ; \n\t} \n"}, {"code": "public void testDivisionKnuthFirstDigitsEqual $F72 { \n\tbyte $F3009 = { \n\t\tNUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } \n\t; \n\tbyte $F3014 = { \n\t\tNUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 } \n\t; \n\tint aSign = - NUM00 ; \n\tint bSign = - NUM00 ; \n\tbyte $F3018 = { \n\t\tNUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 } \n\t; \n\t$F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F88893 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) } \n"}, {"code": "public void connectionClosed ( ConnectionEvent event ) { \n\tif ( isActive ) { \n\t\tManagedConnection conn = ( ManagedConnection ) event . getSource ( ) ; \n\t\tTransactionManagerImpl transManager = TransactionManagerImpl . getTransactionManager ( ) ; \n\t\ttry { \n\t\t\tTransaction txn = transManager . getTransaction ( ) ; \n\t\t\tif ( txn == null ) { \n\t\t\t\tmannPoolCache . returnPooledConnectionToPool ( conn ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( Exception se ) { \n\t\t\tString exception = $F5351 ( se ) ; \n\t\t\tif $F585 ( logger ) { \n\t\t\t\tlogger . debug ( exception , se ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public MetadataBlockHeader ( boolean isLastBlock , BlockType blockType , int dataLength ) { \n\t$F87627 ( rawdata , ByteBuffer , HEADER_LENGTH ) this . blockType = blockType ; \n\tthis . isLastBlock = isLastBlock ; \n\tthis . dataLength = dataLength ; \n\tbyte type ; \n\tif ( isLastBlock ) { \n\t\ttype = ( byte ) ( NUM00 | blockType . getId ( ) ) ; \n\t\t} \n\telse { \n\t\ttype = ( byte ) blockType . getId ( ) ; \n\t\t} \n\trawdata . put ( type ) ; \n\trawdata . put ( ( byte ) ( ( dataLength & NUM00 ) > > > NUM00 ) ) ; \n\trawdata . put ( ( byte ) ( ( dataLength & NUM00 ) > > > NUM00 ) ) ; \n\t$F42832 ( rawdata , dataLength ) $F1325 ( bytes , HEADER_LENGTH ) $F149311 ( i , HEADER_LENGTH , bytes , rawdata ) } \n"}, {"code": "private void checkFileToRun $F72 throws ExitCodeException { \n\tif $F7108 ( runThisFile ) { \n\t\tthrow new ExitCodeException ( EXITCODE_MODULE_TO_RUN_NOT_FOUND ) ; \n\t\t} \n\t} \n"}, {"code": "public void addLastItem ( M model ) { \n\t$F28711 ( addItem , mDatas , model ) ; \n\t} \n"}, {"code": "@ ManagedOperation ( description = NUM00 ) public void notifyAllTagCacheListeners $F72 { \n\t$F973 ( LOGGER ) for ( Long key : controlTagCache . getKeys ( ) ) { \n\t\tcontrolTagCache . acquireWriteLockOnKey ( key ) ; \n\t\ttry { \n\t\t\t$F64414 ( controlTag , controlTagCache , key ) $F657 ( eventTime , System ) controlTagCache . notifyListenerStatusConfirmation ( controlTag , eventTime ) ; \n\t\t\t} \n\t\tfinally $F106063 ( controlTagCache , key ) } \n\tfor ( Long key : dataTagCache . getKeys ( ) ) { \n\t\tdataTagCache . acquireWriteLockOnKey ( key ) ; \n\t\ttry { \n\t\t\tDataTag dataTag = dataTagCache . getCopy ( key ) ; \n\t\t\t$F657 ( eventTime , System ) dataTagCache . notifyListenerStatusConfirmation ( dataTag , eventTime ) ; \n\t\t\t} \n\t\tfinally $F106063 ( dataTagCache , key ) } \n\t$F973 ( LOGGER ) } \n"}, {"code": "public static $F2469 breakdown ( long t , $F4170 TimeUnit unit , boolean roundMillis ) { \n\tlong days = unit . toDays ( t ) ; \n\tlong hours = unit . toHours ( t ) % NUM00 ; \n\tlong minutes = unit . toMinutes ( t ) % NUM00 ; \n\tlong seconds = unit . toSeconds ( t ) % NUM00 ; \n\tlong msecs = unit . toMillis ( t ) % NUM00 ; \n\tif ( roundMillis ) { \n\t\tif ( msecs >= NUM00 ) { \n\t\t\tseconds ++ ; \n\t\t\tmsecs = NUM00 ; \n\t\t\tif ( seconds == NUM00 ) { \n\t\t\t\tminutes ++ ; \n\t\t\t\tseconds = NUM00 ; \n\t\t\t\tif ( minutes == NUM00 ) { \n\t\t\t\t\thours ++ ; \n\t\t\t\t\tminutes = NUM00 ; \n\t\t\t\t\tif ( hours == NUM00 ) { \n\t\t\t\t\t\tdays ++ ; \n\t\t\t\t\t\thours = NUM00 ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn new long [ ] { \n\t\tdays , hours , minutes , seconds , msecs } \n\t; \n\t} \n"}, {"code": "private int socksGetServerPort $F72 { \n\tInetSocketAddress addr = ( InetSocketAddress ) proxy . address ( ) ; \n\treturn addr . getPort ( ) ; \n\t} \n"}, {"code": "public static $F4203 ReactiveSeq $F4203 fromList ( $F95121 ( list ) ) { \n\tObjects . requireNonNull ( list ) ; \n\tfinal ReversingListSpliterator array = new ReversingListSpliterator $F4203 ( list , _BOOL ) ; \n\treturn StreamUtils . reactiveSeq ( StreamSupport . stream ( array , _BOOL ) , Optional . ofNullable ( array ) ) ; \n\t} \n"}, {"code": "private boolean processKeyUp ( int keyCode ) { \n\tif ( keyCode == KeyEvent . KEYCODE_DEL ) { \n\t\tif ( mInKbMode ) { \n\t\t\tif $F5973 ( mTypedTimes ) { \n\t\t\t\tint deleted = deleteLastTypedKey ( ) ; \n\t\t\t\tString deletedKeyStr ; \n\t\t\t\t$F218511 ( deleted , getAmOrPmKeyCode , AM , deletedKeyStr , mAmText , PM , mPmText , String , getValFromKeyCode ) ViewCompatUtils . announceForAccessibility ( mDelegator , String . format ( mDeletedKeyFormat , deletedKeyStr ) ) ; \n\t\t\t\tupdateDisplay ( _BOOL ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse $F218536 ( keyCode , KeyEvent , mIs24HourView , getAmOrPmKeyCode , AM , PM , mInKbMode , mRadialTimePickerView , Log , TAG , _BOOL , mTypedTimes , tryStartingKbMode , addKeyIfLegal , updateDisplay ) return _BOOL ; \n\t} \n"}, {"code": "public synchronized OMGraphicList prepare $F72 { \n\t$F138819 ( list ) Projection proj = getProjection ( ) ; \n\t$F1933 ( proj , list ) Point2D upperLeft = proj . getUpperLeft ( ) ; \n\tPoint2D lowerRight = proj . getLowerRight ( ) ; \n\tif ( upperLeft . getX ( ) > lowerRight . getX ( ) ) { \n\t\tgetPoints ( new DataBounds ( upperLeft , new $F5047 ( NUM00 , lowerRight . getY ( ) ) ) , list , proj ) ; \n\t\tgetPoints ( new DataBounds ( new $F5047 ( - NUM00 , upperLeft . getY ( ) ) , lowerRight ) , list , proj ) ; \n\t\t} \n\telse { \n\t\tgetPoints ( new DataBounds ( upperLeft , lowerRight ) , list , proj ) ; \n\t\t} \n\tOMText statement = new OMText ( NUM00 , proj . getHeight ( ) - NUM00 , getName ( ) + NUM00 + list . size ( ) + NUM00 + dataSource . size ( ) + NUM00 , OMText . JUSTIFY_LEFT ) ; \n\tstatement . setFillPaint ( Color . gray ) ; \n\tstatement . generate ( proj ) ; \n\t$F6965 ( list , statement ) return list ; \n\t} \n"}, {"code": "public X509Name ( Vector oids , Vector values ) { \n\tthis ( oids , values , new X509DefaultEntryConverter $F72 ) ; \n\t} \n"}, {"code": "void nextLine $F72 { \n\ttry { \n\t\t$F36243 ( nextLine , currentEpisode ) while $F3057 ( nextLine ) $F36243 ( nextLine , currentEpisode ) } \n\tcatch ( IOException | NullPointerException e ) { \n\t\tnextLine = null ; \n\t\t} \n\t} \n"}, {"code": "public Jobs subset $F4374 ( jobIds ) { \n\tfinal List $F67389 subsetResult = new ArrayList $F67389 $F72 ; \n\tfor ( String jobId : jobIds ) { \n\t\tJob job = jobMap . get ( jobId ) ; \n\t\tif ( job . isAnalysis ( ) ) $F207 ( subsetResult , job ) } \n\treturn new Jobs ( subsetResult ) ; \n\t} \n"}, {"code": "public void addPropertyChangeListener ( PropertyChangeListener listener ) { \n\tList $F39994 l = Arrays . asList ( listenerList . getListeners ( PropertyChangeListener . class ) ) ; \n\tif $F2200 ( l , listener ) { \n\t\tlistenerList . add ( PropertyChangeListener . class , listener ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F96 fromHexString ( String text ) { \n\t$F1382 ( text ) if ( $F47012 ( text ) != NUM00 ) text = NUM00 + text ; \n\t$F203657 ( resLen , text ) int loNibble , hiNibble ; \n\t$F2175 ( res , resLen ) for ( $F119 ( i , resLen ) ) { \n\t\tint j = i < < NUM00 ; \n\t\thiNibble = charToNibble ( text . charAt ( j ) ) ; \n\t\tloNibble = $F203659 ( charToNibble , text , j ) ; \n\t\tif $F44600 ( loNibble , hiNibble ) $F1274 res [ i ] = $F112580 ( hiNibble , loNibble ) ; \n\t\t} \n\treturn res ; \n\t} \n"}, {"code": "protected static double variance ( $F1986 s , $F1986 sS , $F1986 sumOfWeights ) { \n\tdouble var = NUM00 ; \n\tfor ( $F1139 ( i , s ) ) { \n\t\tif ( sumOfWeights [ i ] > NUM00 ) { \n\t\t\tvar += singleVariance ( s [ i ] , sS [ i ] , sumOfWeights [ i ] ) ; \n\t\t\t} \n\t\t} \n\treturn var ; \n\t} \n"}, {"code": "public void write ( CharSequence csq ) throws IOException { \n\t$F11550 ( length , csq ) for ( int i = NUM00 ; \n\ti < length ; \n\t) { \n\t\t$F52837 ( c , csq , i ) if ( c < NUM00 ) { \n\t\t\t$F8214 ( _bytes , _index , c ) if ( ++ _index >= _bytes . length ) $F5795 ( flushBuffer ) } \n\t\telse { \n\t\t\twrite ( c ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static boolean canResize ( List constraints ) { \n\tfor ( $F2774 ( iter , constraints ) ) { \n\t\t$F67999 ( dc , iter ) if ( ! dc . canResize ( ) ) return _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "$F6802 ( esd , connectionAllowed ) "}, {"code": "String readNumber ( String source , int ofs , String token , boolean adjacent ) { \n\tif ( adjacent ) { \n\t\treturn $F147460 ( source , ofs , token ) ; \n\t\t} \n\t$F1749 ( len , source ) for ( int i = ofs ; \n\ti < len ; \n\ti ++ ) { \n\t\t$F1280 ( ch , source , i ) if ( isNumeric ( ch ) == _BOOL ) { \n\t\t\t$F38155 ( i ) $F6669 ( source , ofs , i ) } \n\t\t} \n\t$F32744 ( source , ofs ) } \n"}, {"code": "private Vec feedForward ( Vec input ) { \n\tVec x = input ; \n\tfor ( $F2277 ( i , Ws ) ) { \n\t\tMatrix W_i = Ws . get ( i ) ; \n\t\tVec b_i = bs . get ( i ) ; \n\t\tVec a_i = W_i . multiply ( x ) ; \n\t\ta_i . mutableAdd ( b_i ) ; \n\t\ta_i . applyFunction ( f ) ; \n\t\tx = a_i ; \n\t\t} \n\treturn x ; \n\t} \n"}, {"code": "private boolean split_wtrace_other ( BrdTracep found_trace , Collection < BrdTracep > split_pieces , ArrayList $F66714 intersecting_lines , AwtreeFindEntry found_entry ) { \n\tif ( found_trace == this ) return _BOOL ; \n\tboolean have_trace_split = _BOOL ; \n\tfor ( PlaLineInt inter_line : intersecting_lines ) { \n\t\t$F46020 ( have_trace_split ) int line_no = found_entry . shape_index_in_object + NUM00 ; \n\t\t$F102811 curr_split_pieces = found_trace . split_with_end_line ( line_no , inter_line ) ; \n\t\tif $F6214 ( curr_split_pieces ) $F598 have_trace_split = _BOOL ; \n\t\tsplit_pieces . addAll ( curr_split_pieces ) ; \n\t\t} \n\tif ( ! have_trace_split ) split_pieces . add ( found_trace ) ; \n\treturn have_trace_split ; \n\t} \n"}, {"code": "private void printSolution ( Solution solution ) { \n\tif ( includeVariables ) { \n\t\tfor ( int i = NUM00 ; \n\t\ti < solution . getNumberOfVariables ( ) ; \n\t\ti ++ ) { \n\t\t\tif ( i > NUM00 ) $F21410 ( writer ) writer . print ( encode ( solution . getVariable ( i ) ) ) ; \n\t\t\t} \n\t\t} \n\tfor ( $F61686 ( i , solution ) ) { \n\t\tif ( ( i > NUM00 ) || ( includeVariables && ( solution . getNumberOfVariables ( ) > NUM00 ) ) ) $F21410 ( writer ) writer . print ( solution . getObjective ( i ) ) ; \n\t\t} \n\t$F21416 ( writer ) } \n"}, {"code": "public void readNBT ( NBTTagCompound nbt ) { \n\tif ( nbt . hasKey ( NUM00 , NUM00 ) ) { \n\t\tthis . decayLevel = nbt . getInteger ( NUM00 ) ; \n\t\tthis . decaySaturationLevel = nbt . getFloat ( NUM00 ) ; \n\t\tthis . decayAccelerationLevel = nbt . getFloat ( NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "public void copyTo ( PositionTextureVertex [ ] verts , TexturedQuad [ ] quad ) { \n\tTexturedPolygon [ ] poly = new TexturedPolygon [ quad . length ] ; \n\tfor ( $F1139 ( idx , quad ) ) { \n\t\tpoly [ idx ] = new TexturedPolygon ( ( PositionTextureVertex [ ] ) quad [ idx ] . vertexPositions ) ; \n\t\t} \n\tcopyTo ( verts , poly ) ; \n\t} \n"}, {"code": "public synchronized void deleteObserver ( Observer observer ) $F106 ( observers , observer ) "}, {"code": "public AccountAttribute asAccountAttribute ( Account account ) { \n\t$F1338 ( account ) AccountAttribute who = new AccountAttribute $F72 ; \n\twho . name = account . getFullName ( ) ; \n\twho . email = account . getPreferredEmail ( ) ; \n\twho . username = account . getUserName ( ) ; \n\treturn who ; \n\t} \n"}, {"code": "public void delete ( TemplatePersistenceData data ) { \n\tif ( data . isUserAdded ( ) ) fTemplates . remove ( data ) ; \n\telse data . setDeleted ( _BOOL ) ; \n\t} \n"}, {"code": "$F1 public $F987 listOptions $F72 { \n\t$F994 ( newVector ) $F36797 ( newVector ) $F9007 ( newVector ) $F1006 ( newVector ) $F1000 ( newVector ) newVector . addElement ( new Option ( $F34354 , NUM00 , NUM00 , NUM00 ) ) ; \n\t$F1007 ( newVector ) } \n"}, {"code": "public String consumeWord $F72 { \n\tint start = pos ; \n\twhile ( matchesWord ( ) ) pos ++ ; \n\t$F6669 ( queue , start , pos ) } \n"}, {"code": "public static void printInlining ( final ResolvedJavaMethod method , final int bci , final int inliningDepth , final boolean success , final String msg , final Object ... args ) { \n\tif $F100917 ( HotSpotPrintInlining ) { \n\t\t$F83 ( sb ) $F84 ( sb ) $F84 ( sb ) sb . append ( String . format ( NUM00 , NUM00 , method . isSynchronized ( ) ? NUM00 : NUM00 , NUM00 , NUM00 , method . isNative ( ) ? NUM00 : NUM00 ) ) ; \n\t\t$F84 ( sb ) $F84 ( sb ) $F103815 ( i , inliningDepth , sb ) sb . append ( String . format ( NUM00 , bci , methodName ( method ) , success ? NUM00 : NUM00 , String . format ( msg , args ) ) ) ; \n\t\t$F144975 ( TTY , sb ) } \n\t} \n"}, {"code": "public static double calculatePValue ( double t , int v ) { \n\treturn NUM00 * ( NUM00 - StudentsTDistribution . cdf ( Math . abs ( t ) , v ) ) ; \n\t} \n"}, {"code": "public static void appendChild ( Node parent , Node child ) { \n\tDocument ownerDoc = getOwnerDocument ( parent ) ; \n\tif ( child . getOwnerDocument ( ) != ownerDoc ) { \n\t\tparent . appendChild ( ownerDoc . importNode ( child , _BOOL ) ) ; \n\t\t} \n\telse $F205551 ( parent , child ) } \n"}, {"code": "protected void deleteSessionVariables $F71933 ( sessionId , varNames ) { \n\t$F59924 ( sessionId ) Key key = keyFactory . newKey ( sessionId ) ; \n\tTransaction transaction = datastore . newTransaction ( ) ; \n\ttry { \n\t\tEntity stateEntity = transaction . get ( key ) ; \n\t\tEntity . Builder builder = Entity . builder ( stateEntity ) ; \n\t\t$F83 ( delNames ) for ( String varName : varNames ) { \n\t\t\t$F86403 ( delNames , varName ) builder = builder . remove ( varName ) ; \n\t\t\t} \n\t\tdatastore . update ( builder . build ( ) ) ; \n\t\t} \n\t$F1214 finally { \n\t\tif $F433289 ( transaction ) $F21746 ( transaction ) } \n\t} \n"}, {"code": "$F20664 private void pruneScrapViews $F72 { \n\t$F18832 ( maxViews , mActiveViews ) final int viewTypeCount = mViewTypeCount ; \n\t$F158084 ( scrapViews , mScrapViews ) for ( $F1316 ( i , viewTypeCount ) ) { \n\t\t$F65533 ( scrapPile , scrapViews , i ) $F115 ( size , scrapPile ) final int extras = size - maxViews ; \n\t\tsize -- ; \n\t\t$F158088 ( j , extras , removeDetachedView , scrapPile , size , _BOOL ) } \n\tif ( mTransientStateViews != null ) { \n\t\tfor ( $F2277 ( i , mTransientStateViews ) ) { \n\t\t\tfinal View v = mTransientStateViews . valueAt ( i ) ; \n\t\t\tif ( ! v . hasTransientState ( ) ) { \n\t\t\t\tmTransientStateViews . removeAt ( i ) ; \n\t\t\t\ti -- ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void updateWorkAmount ( double workTime ) { \n\tif ( workTime <= NUM00 ) { \n\t\tcurrentWorkAmount *= NUM00 ; \n\t\t} \n\telse { \n\t\ttotalTimeTaken += workTime ; \n\t\tcompletedWorkAmount += currentWorkAmount ; \n\t\tcurrentWorkAmount = ( int ) Math . ceil ( targetExecutionMs * completedWorkAmount / totalTimeTaken ) ; \n\t\t} \n\t} \n"}, {"code": "public static boolean isLafAqua $F72 { \n\tensureValidCache ( ) ; \n\tif ( cachedIsLafAqua == null ) { \n\t\tcachedIsLafAqua = $F130521 ( Boolean , computeIsLafAqua ) ; \n\t\t} \n\t$F44652 ( cachedIsLafAqua ) } \n"}, {"code": "public void moveRandomly $F72 { \n\tsetRandomPathFrom ( getX ( ) , getY ( ) , getMovementRange ( ) / NUM00 ) ; \n\t} \n"}, {"code": "public void plnI ( Object o ) throws IOException { \n\t$F31458 ( p , o ) pln ( ) ; \n\tpI ( ) ; \n\t} \n"}, {"code": "$F1 public void writeEntityToNBT ( NBTTagCompound par1NBTTagCompound ) { \n\tpar1NBTTagCompound . setShort ( NUM00 , ( short ) this . xTile ) ; \n\tpar1NBTTagCompound . setShort ( NUM00 , ( short ) this . yTile ) ; \n\tpar1NBTTagCompound . setShort ( NUM00 , ( short ) this . zTile ) ; \n\tpar1NBTTagCompound . setInteger ( NUM00 , Block . getIdFromBlock ( this . inTile ) ) ; \n\tpar1NBTTagCompound . setByte ( NUM00 , ( byte ) this . inData ) ; \n\tpar1NBTTagCompound . setByte ( NUM00 , ( byte ) this . arrowShake ) ; \n\tpar1NBTTagCompound . setByte ( NUM00 , ( byte ) ( this . inGround ? NUM00 : NUM00 ) ) ; \n\tpar1NBTTagCompound . setBoolean ( NUM00 , this . isExplosive ) ; \n\t} \n"}, {"code": "$F1 public StringBuffer format ( final double value , final StringBuffer buffer , final FieldPosition position ) { \n\treturn format ( Double . valueOf ( value ) , buffer , position ) ; \n\t} \n"}, {"code": "private Object translateStreamToInputStream ( InputStream str , DataFlavor flavor , long format , Transferable localeTransferable ) throws IOException { \n\tif ( isFlavorCharsetTextType ( flavor ) && isTextFormat ( format ) ) { \n\t\tstr = new ReencodingInputStream ( str , format , DataTransferer . getTextCharset ( flavor ) , localeTransferable ) ; \n\t\t} \n\treturn constructFlavoredObject ( str , flavor , InputStream . class ) ; \n\t} \n"}, {"code": "public void dispose $F72 throws IabAsyncInProgressException { \n\tsynchronized ( mAsyncInProgressLock ) { \n\t\tif ( mAsyncInProgress ) { \n\t\t\tthrow new IabAsyncInProgressException $F54019 ( mAsyncOperation ) ; \n\t\t\t} \n\t\t} \n\tlogDebug ( NUM00 ) ; \n\tmSetupDone = _BOOL ; \n\tif ( mServiceConn != null ) { \n\t\tlogDebug ( NUM00 ) ; \n\t\tif ( mContext != null ) mContext . unbindService ( mServiceConn ) ; \n\t\t} \n\tmDisposed = _BOOL ; \n\tmContext = null ; \n\tmServiceConn = null ; \n\tmService = null ; \n\tmPurchaseListener = null ; \n\t} \n"}, {"code": "private boolean isIPTResourceFolder ( File dir ) { \n\tif $F1892 ( dir ) { \n\t\t$F4453 ( persistenceFile , dir , PERSISTENCE_FILE ) File emlFile = new File ( dir , DataDir . EML_XML_FILENAME ) ; \n\t\treturn persistenceFile . isFile ( ) && emlFile . isFile ( ) ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public $F2689 addSpriteFrames ( String plist , CCTexture2D texture ) { \n\t$F530 dict = PlistParser . parse ( plist ) ; \n\treturn addSpriteFrames ( dict , texture ) ; \n\t} \n"}, {"code": "public void addAnnotation ( final Annotation annotation ) { \n\tannotationList . add ( annotation ) ; \n\tannotation . setxyGraph ( xyGraph ) ; \n\tadd ( annotation ) ; \n\trevalidate ( ) ; \n\tchangeSupport . firePropertyChange ( NUM00 , null , annotation ) ; \n\t} \n"}, {"code": "public static void createOverviews ( ASDocConfiguration config ) throws CompilerException { \n\tString templatesPath = config . getTemplatesPath ( ) ; \n\tString ditaPath = config . getOutput ( ) + NUM00 + File . separator ; \n\tBufferedWriter writer = null ; \n\tReader reader = null ; \n\ttry { \n\t\twriter = new BufferedWriter ( new FileWriter ( ditaPath + NUM00 ) ) ; \n\t\tif ( config . getPackageDescriptionFile ( ) != null ) { \n\t\t\treader = new BufferedReader ( new FileReader ( config . getPackageDescriptionFile ( ) ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\treader = new BufferedReader ( new FileReader ( templatesPath + NUM00 ) ) ; \n\t\t\t} \n\t\tOverviewsHandler h = new OverviewsHandler ( writer , config ) ; \n\t\t$F77995 ( source , reader ) $F2218 ( factory , SAXParserFactory ) $F49819 ( parser , factory ) parser . parse ( source , h ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tif ( Trace . error ) $F301 ( e ) CompilerMessage c = new CouldNotCreate ( $F10629 ( e ) ) ; \n\t\tThreadLocalToolkit . log ( c ) ; \n\t\tthrow c ; \n\t\t} \n\tfinally { \n\t\t$F141989 ( writer ) $F141989 ( reader ) } \n\t} \n"}, {"code": "$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel ) "}, {"code": "public CreateNewNoteIntentBuilder addTags ( $F5466 $F5 tags ) { \n\t$F5 list = mArgs . getStringArrayList ( EvernoteIntent . EXTRA_TAG_NAME_LIST ) ; \n\tif ( list == null ) { \n\t\tlist = tags ; \n\t\t} \n\telse $F36447 ( tags , list ) return setTags ( list ) ; \n\t} \n"}, {"code": "private RemoteOperationResult refreshSharesForFolder ( OwnCloudClient client ) { \n\tRemoteOperationResult result = null ; \n\tGetRemoteSharesForFileOperation operation = new GetRemoteSharesForFileOperation ( mLocalFolder . getRemotePath ( ) , _BOOL , _BOOL ) ; \n\tresult = operation . execute ( client ) ; \n\tif ( result . isSuccess ( ) ) { \n\t\tArrayList < OCShare > shares = new ArrayList < OCShare > $F72 ; \n\t\tfor ( Object obj : result . getData ( ) ) { \n\t\t\tshares . add ( ( OCShare ) obj ) ; \n\t\t\t} \n\t\tmStorageManager . saveSharesInFolder ( shares , mLocalFolder ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public double dist ( Math_Vector other ) $F167839 ( distX , this , other , distY , Math ) "}, {"code": "public static String parseString ( String value ) { \n\tif ( $F3106 ( value ) && $F8991 ( value ) || $F3106 ( value ) && $F8991 ( value ) ) { \n\t\tif $F4012 ( value ) { \n\t\t\tif $F12703 ( value ) { \n\t\t\t\treturn unescape ( $F4019 ( value ) ) ; \n\t\t\t\t} \n\t\t\t$F16082 ( value ) } \n\t\t} \n\t$F29525 ( value ) } \n"}, {"code": "private void defineDesktopPanes ( UIDefaults d ) { \n\td . put ( NUM00 , new ColorUIResource $F989 ) ; \n\tString c = PAINTER_PREFIX + NUM00 ; \n\tString p = NUM00 ; \n\t$F13870 ( d , p , c , DesktopPanePainter ) p = NUM00 ; \n\tc = PAINTER_PREFIX + NUM00 ; \n\t$F13782 ( d , p ) $F13870 ( d , p , c , DesktopIconPainter ) } \n"}, {"code": "$F5803 ( drawable , getDrawable , matrix , prevMatrix , drawableWidth , drawableHeight , scaleX , viewWidth , scaleY , viewHeight , mScaleType , CENTER , CENTER_CROP , Math , CENTER_INSIDE , FIT_CENTER , FIT_XY , redundantXSpace , redundantYSpace , matchViewWidth , matchViewHeight , isZoomed , imageRenderedAtLeastOnce , normalizedScale , prevMatchViewWidth , prevMatchViewHeight , savePreviousImageValues , m , Matrix , transX , transY , prevActualWidth , actualWidth , getImageWidth , translateMatrixAfterRotate , prevViewWidth , prevActualHeight , actualHeight , getImageHeight , prevViewHeight , fixTrans , setImageMatrix ) "}, {"code": "ObjectAnimator animateBoundScroll $F72 { \n\tfloat curScroll = getStackScroll ( ) ; \n\tfloat newScroll = getBoundedStackScroll ( curScroll ) ; \n\tif ( Float . compare ( newScroll , curScroll ) != NUM00 ) $F16625 ( animateScroll , curScroll , newScroll ) return mScrollAnimator ; \n\t} \n"}, {"code": "public IntArray resize ( IntArray array , long size ) { \n\tif ( array instanceof BigIntArray ) { \n\t\treturn resizeInPlace ( ( BigIntArray ) array , size ) ; \n\t\t} \n\telse { \n\t\tAbstractArray arr = ( AbstractArray ) array ; \n\t\tfinal IntArray newArray = newIntArray ( size , arr . clearOnResize ) ; \n\t\tfor ( long i = NUM00 , end = Math . min ( size , array . size ( ) ) ; \n\t\ti < end ; \n\t\t++ i ) $F221909 ( newArray , i , array ) $F59 ( array ) return newArray ; \n\t\t} \n\t} \n"}, {"code": "public DERUTCTime ( Date time ) { \n\t$F108456 ( dateF ) dateF . setTimeZone ( new SimpleTimeZone ( NUM00 , NUM00 ) ) ; \n\tthis . time = Strings . toByteArray ( dateF . format ( time ) ) ; \n\t} \n"}, {"code": "public static double pdf $F7635 ( x , mu , beta ) { \n\tfinal double z = ( x - mu ) / beta ; \n\tif ( x == Double . NEGATIVE_INFINITY ) $F1083 return Math . exp ( - z - Math . exp ( - z ) ) / beta ; \n\t} \n"}, {"code": "private static $F96 copy_buffer $F24576 ( buffer , sOffset , len ) { \n\t$F2175 ( newData , len ) $F21535 ( System , buffer , sOffset , newData , len ) return newData ; \n\t} \n"}, {"code": "public SharedFsCheckpointSpi $F72 $F1614 ( dirPaths , DFLT_DIR_PATH ) "}, {"code": "private void configure $F72 throws NullLocationException , FormatterInitException { \n\tString Interval = lmanager . getProperty ( LogConstants . LOGSIGN_PERIODINSECONDS ) ; \n\tif $F38892 ( Interval ) { \n\t\tsignInterval = LogConstants . LOGSIGN_PERIODINSECONDS_DEFAULT * NUM00 ; \n\t\t} \n\telse { \n\t\tsignInterval = Long . parseLong ( Interval ) * NUM00 ; \n\t\t} \n\tString strMaxFileSize = lmanager . getProperty ( LogConstants . MAX_FILE_SIZE ) ; \n\tif $F38892 ( strMaxFileSize ) { \n\t\tmaxFileSize = NUM00 ; \n\t\t} \n\telse $F37473 ( maxFileSize , Integer , strMaxFileSize ) location = lmanager . getProperty ( LogConstants . LOG_PROP_PREFIX + NUM00 + logName + NUM00 ) ; \n\tif ( location == null ) { \n\t\tlocation = lmanager . getProperty ( LogConstants . LOG_LOCATION ) ; \n\t\t} \n\tif $F38892 ( location ) { \n\t\tthrow new NullLocationException $F580 ; \n\t\t} \n\tif ( ! $F22072 ( location , File ) ) { \n\t\tlocation += File . separator ; \n\t\t} \n\tString filesPerKeyStoreString = lmanager . getProperty ( LogConstants . FILES_PER_KEYSTORE ) ; \n\tif $F38892 ( filesPerKeyStoreString ) { \n\t\tif $F12866 ( Debug ) { \n\t\t\tDebug . warning ( logName + NUM00 + NUM00 ) ; \n\t\t\t} \n\t\tfilesPerKeyStoreString = NUM00 ; \n\t\t} \n\tfilesPerKeyStore = Integer . parseInt ( filesPerKeyStoreString ) ; \n\t$F75014 ( Debug , logName , filesPerKeyStoreString ) String archiverClassString = lmanager . getProperty ( LogConstants . ARCHIVER ) ; \n\tif $F38892 ( archiverClassString ) { \n\t\tthrow new NullLocationException $F580 ; \n\t\t} \n\tarchiverClass = archiverClassString ; \n\t} \n"}, {"code": "public void pull ( final PullParams params , final ProgressMonitor progressMonitor ) throws IOException { \n\tpull ( params , progressMonitor , dockerDaemonUri ) ; \n\t} \n"}, {"code": "public static InputStream streamFromString ( String location ) throws IOException { \n\tInputStream is = null ; \n\tURL url = urlFromString ( location , null , _BOOL ) ; \n\tif ( url != null ) { \n\t\t$F21223 ( is , url ) } \n\telse { \n\t\t$F1705 ( f , location ) if $F3428 ( f ) $F5335 ( is , f ) } \n\tif ( is == null ) $F1337 else if ( isGZipFile ( location ) ) { \n\t\treturn new GZIPInputStream ( is ) ; \n\t\t} \n\telse { \n\t\treturn is ; \n\t\t} \n\t} \n"}, {"code": "public void addUpdateListener ( AnimatorUpdateListener listener ) { \n\tif ( mUpdateListeners == null ) { \n\t\tmUpdateListeners = new ArrayList < AnimatorUpdateListener > $F72 ; \n\t\t} \n\tmUpdateListeners . add ( listener ) ; \n\t} \n"}, {"code": "public void handleRequest ( RequestContext rc ) throws CLIException { \n\tsuper . handleRequest ( rc ) ; \n\tSSOToken adminSSOToken = getAdminSSOToken ( ) ; \n\tIOutput outputWriter = getOutputWriter ( ) ; \n\tString realm = getStringOptionValue ( IArgument . REALM_NAME ) ; \n\tString idName = getStringOptionValue ( ARGUMENT_ID_NAME ) ; \n\tString type = getStringOptionValue ( ARGUMENT_ID_TYPE ) ; \n\tIdType idType = convert2IdType ( type ) ; \n\t$F28010 ( params , realm , type , idName ) try { \n\t\tAMIdentityRepository amir = new AMIdentityRepository ( adminSSOToken , realm ) ; \n\t\tSet set = amir . getAllowedIdOperations ( idType ) ; \n\t\tif ( ! set . contains ( IdOperation . SERVICE ) ) { \n\t\t\tthrow new CLIException ( MessageFormat . format ( getResourceString ( NUM00 ) , $F2486 ( params ) ) , ExitCodes . REQUEST_CANNOT_BE_PROCESSED ) ; \n\t\t\t} \n\t\t$F28013 ( writeLog , LogWriter , Level , params ) AMIdentity amid = new AMIdentity ( adminSSOToken , idName , idType , realm , null ) ; \n\t\tSet services = amid . getAssignableServices ( ) ; \n\t\tif ( idType . equals ( IdType . USER ) ) { \n\t\t\tservices . remove ( Constants . SVC_NAME_USER ) ; \n\t\t\tservices . remove ( Constants . SVC_NAME_AUTH_CONFIG ) ; \n\t\t\tservices . remove ( Constants . SVC_NAME_SAML ) ; \n\t\t\t} \n\t\tif $F2772 ( services ) { \n\t\t\tString msg = getResourceString ( NUM00 ) ; \n\t\t\t$F806 arg = $F21901 ; \n\t\t\tfor ( $F2774 ( i , services ) ) { \n\t\t\t\targ [ NUM00 ] = $F2775 ( i ) ; \n\t\t\t\toutputWriter . printlnMessage ( MessageFormat . format ( msg , $F2486 ( arg ) ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse $F265961 ( outputWriter , getResourceString ) $F28013 ( writeLog , LogWriter , Level , params ) } \n\tcatch ( IdRepoException e ) { \n\t\t$F28032 ( args , realm , type , idName , e ) debugError ( NUM00 , e ) ; \n\t\t$F28035 ( writeLog , LogWriter , Level , args ) $F145379 ( e , ExitCodes ) } \n\tcatch ( SSOException e ) { \n\t\t$F28032 ( args , realm , type , idName , e ) debugError ( NUM00 , e ) ; \n\t\t$F28035 ( writeLog , LogWriter , Level , args ) $F145379 ( e , ExitCodes ) } \n\t} \n"}, {"code": "public boolean isAlive $F72 { \n\tif ( hasSentData ) { \n\t\tif $F164541 ( System , lastSendTime , TIMEOUT ) return _BOOL ; \n\t\treturn hasReceivedData && lastReceiveTime > lastSendTime ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "private void removeSelectedItems ( List items ) { \n\tfor ( $F2774 ( iter , items ) ) { \n\t\t$F8877 ( item , iter ) removeHistoryItem ( item ) ; \n\t\t} \n\trefreshWithLastSelection = _BOOL ; \n\t$F17015 ( contentProvider ) } \n"}, {"code": "public static $F9340 $F15228 of ( K k1 , V v1 , K k2 , V v2 , K k3 , V v3 , K k4 , V v4 ) { \n\tMap map = of ( ) ; \n\tmap . put ( k1 , v1 ) ; \n\tmap . put ( k2 , v2 ) ; \n\tmap . put ( k3 , v3 ) ; \n\tmap . put ( k4 , v4 ) ; \n\treturn map ; \n\t} \n"}, {"code": "public static void disableConnectionReuseIfNecessary $F72 { \n\tif ( Build . VERSION . SDK_INT < Build . VERSION_CODES . FROYO ) { \n\t\t$F2699 ( System ) } \n\t} \n"}, {"code": "public static long sizeOf ( Struct sct ) { \n\tIterator < Entry < Key , Object > > it = sct . entryIterator ( ) ; \n\tEntry < Key , Object > e ; \n\tlong size = NUM00 ; \n\twhile $F2921 ( it ) { \n\t\t$F45366 ( e , it ) size += SizeOf . size ( e . getKey ( ) ) ; \n\t\tsize += SizeOf . size ( e . getValue ( ) ) ; \n\t\t} \n\treturn size ; \n\t} \n"}, {"code": "$F1 public boolean isEnabled $F72 { \n\tif ( ( attributeSelectionPanel != null ) && ! isValueOnly ( ) ) $F68134 ( attributeSelectionPanel ) else { \n\t\t$F68135 ( table ) } \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static $F11061 parseHeaders ( final SessionInputBuffer inbuffer , int maxHeaderCount , int maxLineLen , LineParser parser ) throws HttpException , IOException { \n\t$F826 ( inbuffer ) $F45529 ( parser , BasicLineParser ) $F12181 ( headerLines ) CharArrayBuffer current = null ; \n\tCharArrayBuffer previous = null ; \n\tfor ( $F589 ) { \n\t\tif ( current == null ) { \n\t\t\tcurrent = new CharArrayBuffer $F989 ; \n\t\t\t} \n\t\telse $F9096 ( current ) int l = inbuffer . readLine ( current ) ; \n\t\tif ( l == - NUM00 || $F3598 ( current ) ) $F5153 if ( $F66132 ( current ) && previous != null ) { \n\t\t\tint i = NUM00 ; \n\t\t\twhile $F7007 ( i , current ) { \n\t\t\t\t$F1280 ( ch , current , i ) if $F22868 ( ch ) $F5153 i ++ ; \n\t\t\t\t} \n\t\t\tif ( maxLineLen > NUM00 && $F1285 ( previous ) + current . length ( ) - i > maxLineLen ) $F14525 $F84 ( previous ) previous . append ( current , i , current . length ( ) - i ) ; \n\t\t\t} \n\t\telse { \n\t\t\theaderLines . add ( current ) ; \n\t\t\tprevious = current ; \n\t\t\tcurrent = null ; \n\t\t\t} \n\t\tif ( maxHeaderCount > NUM00 && headerLines . size ( ) >= maxHeaderCount ) $F14525 } \n\t$F11061 headers = new Header $F2313 ( headerLines ) ; \n\tfor ( $F2277 ( i , headerLines ) ) { \n\t\tCharArrayBuffer buffer = ( CharArrayBuffer ) headerLines . get ( i ) ; \n\t\ttry { \n\t\t\theaders [ i ] = parser . parseHeader ( buffer ) ; \n\t\t\t} \n\t\tcatch ( ParseException ex ) { \n\t\t\tthrow new ProtocolException $F1783 ( ex ) ; \n\t\t\t} \n\t\t} \n\treturn headers ; \n\t} \n"}, {"code": "$F298952 ( type , supportedTypes , super ) "}, {"code": "public void readContent $F24576 ( dst , offset , length ) $F112231 ( System , content , dst , offset , length ) "}, {"code": "public static void putObjectField ( Object obj , long fieldOff , Object val ) { \n\tUNSAFE . putObject ( obj , fieldOff , val ) ; \n\t} \n"}, {"code": "$F103232 ( curFirst , pager , PAGE_SIZE , calPageSize , newPage , removeViewAt , afterPlatformListGot ) "}, {"code": "public List < FunctionDesc > listAllFunctions $F72 { \n\tList < FunctionDesc > functions = new ArrayList < FunctionDesc > $F72 ; \n\tfor ( MeasureDesc m : measures ) { \n\t\tfunctions . add ( m . getFunction ( ) ) ; \n\t\t} \n\treturn functions ; \n\t} \n"}, {"code": "public boolean hasExplicitField ( String fieldName ) { \n\tif $F1710 ( fields , fieldName ) { \n\t\treturn _BOOL ; \n\t\t} \n\tfor ( DynamicField df : dynamicFields ) { \n\t\tif ( fieldName . equals ( df . getRegex ( ) ) ) return _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "private static boolean instanceOfAny ( Object o , Collection $F116567 classes ) { \n\tfor ( Class c : classes ) { \n\t\tif $F38790 ( c , o ) return _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static IProposalComputer newSetterAttributeProposalComputer ( ContentAssistRequest contentAssistRequest , IJavaProject javaProject ) { \n\tIDOMNode node = ( IDOMNode ) contentAssistRequest . getNode ( ) ; \n\tif ( node . getNodeType ( ) != IDOMNode . ELEMENT_NODE ) $F1337 String widgetTypeName = UiBinderXmlModelUtilities . computeQualifiedWidgetTypeName ( node ) ; \n\t$F1338 ( widgetTypeName ) String matchString = contentAssistRequest . getMatchString ( ) ; \n\treturn new SetterAttributeProposalComputer ( node , widgetTypeName , javaProject , matchString , contentAssistRequest . getReplacementBeginPosition ( ) , matchString . length ( ) ) ; \n\t} \n"}, {"code": "public void omitAll $F72 { \n\tif ( writeChunk != null ) bytesWritten += writeChunk . position ( ) ; \n\tbytesRead = bytesWritten ; \n\t$F725 ( list ) writeChunk = null ; \n\treadChunk = null ; \n\t} \n"}, {"code": "Job loadPreview ( FutureCallback < Pair < OmniBuildEnvironment , OmniGradleBuild > > resultHandler , List $F314324 listeners ) ; \n"}, {"code": "private void refresh ( ILaunchConfiguration configuration ) { \n\tsetLaunchConfiguration ( configuration ) ; \n\ttry { \n\t\tfModel = createClasspathModel ( configuration ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F5976 ( message , e ) $F3270 ( setErrorMessage , e ) } \n\tfClasspathViewer . setLaunchConfiguration ( configuration ) ; \n\tfClasspathViewer . setInput ( fModel ) ; \n\tsetDirty ( _BOOL ) ; \n\t} \n"}, {"code": "public void computePackageFragmentRoots ( IClasspathEntry [ ] resolvedClasspath , ObjectVector accumulatedRoots , HashSet rootIDs , IClasspathEntry referringEntry , boolean retrieveExportedRoots , Map rootToResolvedEntries ) throws JavaModelException { \n\tif ( referringEntry == null ) $F33452 ( rootIDs , rootID ) for ( $F21059 ( i , length , resolvedClasspath ) ) { \n\t\tcomputePackageFragmentRoots ( resolvedClasspath [ i ] , accumulatedRoots , rootIDs , referringEntry , retrieveExportedRoots , rootToResolvedEntries ) ; \n\t\t} \n\t} \n"}, {"code": "private void init $F72 { \n\tsetTitle ( NUM00 ) ; \n\tsomPanel = new SOMPropertiesPanel ( networkPanel , SOMPropsPanelType . CREATE_GROUP ) ; \n\ttabLogic . add ( somPanel ) ; \n\tlayoutPanel = new MainLayoutPanel ( _BOOL , this ) ; \n\tlayoutPanel . setCurrentLayout ( SOMGroup . DEFAULT_LAYOUT ) ; \n\ttabLayout . add ( layoutPanel ) ; \n\t$F36210 ( tabbedPane , tabLogic ) $F36210 ( tabbedPane , layoutPanel ) setContentPane ( tabbedPane ) ; \n\tAction helpAction = new ShowHelpAction ( somPanel . getHelpPath ( ) ) ; \n\taddButton ( new JButton ( helpAction ) ) ; \n\t} \n"}, {"code": "private String diff_linesToCharsMunge ( String text , $F3803 lineArray , $F59936 ( lineHash ) ) { \n\tint lineStart = NUM00 ; \n\tint lineEnd = - NUM00 ; \n\tString line ; \n\t$F83 ( chars ) while $F46112 ( lineEnd , text ) { \n\t\t$F61909 ( lineEnd , text , lineStart ) if ( lineEnd == - NUM00 ) $F32479 ( lineEnd , text ) line = text . substring ( lineStart , lineEnd + NUM00 ) ; \n\t\tlineStart = lineEnd + NUM00 ; \n\t\tif $F1710 ( lineHash , line ) { \n\t\t\tchars . append ( String . valueOf ( ( char ) $F113095 ( lineHash , line ) ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tlineArray . add ( line ) ; \n\t\t\tlineHash . put ( $F43443 ( line , lineArray ) ) ; \n\t\t\tchars . append ( String . valueOf ( ( char ) $F113103 ( lineArray ) ) ) ; \n\t\t\t} \n\t\t} \n\t$F92 ( chars ) } \n"}, {"code": "public void remove ( Video video ) $F15777 ( videoList , video , notifyDataSetChanged ) "}, {"code": "public boolean canInvert $F72 { \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void addAllSearchables ( ArrayList < ? extends SearchResult > searchable ) $F21926 ( searchables , searchable ) "}, {"code": "public static String toString ( final $F247465 iterable ) { \n\tif ( iterable instanceof Collection ) $F2495 ( iterable ) else { \n\t\t$F1121 ( builder ) boolean firstValue = _BOOL ; \n\t\t$F84 ( builder ) for ( final Object value : iterable ) { \n\t\t\t$F48750 ( firstValue , builder ) builder . append ( value ) ; \n\t\t\tfirstValue = _BOOL ; \n\t\t\t} \n\t\t$F84 ( builder ) $F92 ( builder ) } \n\t} \n"}, {"code": "public static int parseInt ( String text ) $F41330 ( parseInt , text ) "}, {"code": "$F1 public void endDocument ( Augmentations augs ) throws XNIException { \n\ttry { \n\t\tif ( fDocumentHandler != null ) { \n\t\t\t$F45698 ( fDocumentHandler ) } \n\t\tif ( fContentHandler != null ) { \n\t\t\t$F45698 ( fContentHandler ) } \n\t\t} \n\t$F122277 ( e ) } \n"}, {"code": "public String execCommand ( String command ) { \n\t$F83 ( buf ) sendWaitFor ( command , defaultTimeout , prompts , buf ) ; \n\t$F62755 ( log , buf ) return cleanOutput ( buf ) ; \n\t} \n"}, {"code": "private void ClientThreadRun $F72 throws IOException { \n\tSocketChannel channel = null ; \n\ttry { \n\t\tlog . debug ( NUM00 , hostname , port , pending . size ( ) ) ; \n\t\tchannel = SocketChannel . open ( new InetSocketAddress ( hostname , port ) ) ; \n\t\tchannel . configureBlocking ( _BOOL ) ; \n\t\tClientThreadMainLoop ( channel ) ; \n\t\t} \n\tfinally { \n\t\t$F2727 ( channel ) if ( current != null ) { \n\t\t\tpending . offerFirst ( current ) ; \n\t\t\tcurrent = null ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F1 public PathImpl schemeWalk ( String userPath , $F2100 ( newAttributes ) , String uri , int offset ) { \n\t$F115 ( length , uri ) if ( length < NUM00 + offset || uri . charAt ( offset ) != NUM00 || uri . charAt ( NUM00 + offset ) != NUM00 ) $F11388 $F110602 ( buf ) int i = NUM00 + offset ; \n\tint ch = NUM00 ; \n\tboolean isIpv6 = _BOOL ; \n\tfor ( ; \n\t( i < length && $F31375 ( ch , uri , i ) != NUM00 && ch != NUM00 && ! ( ch == NUM00 && ! isIpv6 ) ) ; \n\ti ++ ) { \n\t\tif ( ch == NUM00 ) isIpv6 = _BOOL ; \n\t\telse if ( ch == NUM00 ) isIpv6 = _BOOL ; \n\t\t$F36813 ( buf , ch ) } \n\t$F1822 ( host , buf ) if $F1277 ( host ) $F11388 int port = NUM00 ; \n\tif ( ch == NUM00 ) { \n\t\tfor ( i ++ ; \n\t\ti < length && $F31375 ( ch , uri , i ) >= NUM00 && ch <= NUM00 ; \n\t\ti ++ ) { \n\t\t\tport = NUM00 * port + uri . charAt ( i ) - NUM00 ; \n\t\t\t} \n\t\t} \n\treturn create ( this , userPath , newAttributes , host , port ) ; \n\t} \n"}, {"code": "@ RequestMapping ( $F3144 ) public void ssoDefaultTenantBindingError ( Locale locale , HttpServletResponse response ) throws IOException { \n\t$F174863 ( logger , locale ) sendError ( locale , response , NUM00 ) ; \n\t} \n"}, {"code": "$F234188 ( webClient ) "}, {"code": "$F1 public void onCanStartVideoServiceChanged ( boolean canStartVideoService ) { \n\tLog . i ( NUM00 , NUM00 + String . valueOf ( canStartVideoService ) ) ; \n\tif ( canStartVideoService == _BOOL ) { \n\t\tmConversationHelper . startOutgoingVideo ( ) ; \n\t\tmConversationHelper . startIncomingVideo ( ) ; \n\t\t} \n\t} \n"}, {"code": "public Manifest ( InputStream is ) throws IOException { \n\twhile ( is . available ( ) != NUM00 ) { \n\t\tMessageHeader m = new MessageHeader ( is ) ; \n\t\tentries . addElement ( m ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public Object readReply ( Class expectedClass ) throws Throwable { \n\tint tag = read ( ) ; \n\tif ( tag == NUM00 ) return readObject ( expectedClass ) ; \n\telse if ( tag == NUM00 ) { \n\t\tHashMap map = ( HashMap ) readObject ( HashMap . class ) ; \n\t\tthrow prepareFault ( map ) ; \n\t\t} \n\telse { \n\t\t$F83 ( sb ) $F36813 ( sb , tag ) try { \n\t\t\tint ch ; \n\t\t\twhile $F61411 ( ch , read ) $F46352 ( sb , ch ) } \n\t\t$F53427 ( log , Level , e ) throw error ( NUM00 + codeName ( tag ) + NUM00 + sb ) ; \n\t\t} \n\t} \n"}, {"code": "$F11763 ( listener , clickingListeners ) "}, {"code": "public static String unexpandLine ( CharSequence self , int tabStop ) { \n\tStringBuilder builder = new StringBuilder $F3362 ( self ) ; \n\tint index = NUM00 ; \n\twhile ( index + tabStop < builder . length ( ) ) { \n\t\t$F25024 ( piece , builder , index , tabStop ) int count = NUM00 ; \n\t\twhile ( ( count < tabStop ) && ( Character . isWhitespace ( piece . charAt ( tabStop - ( count + NUM00 ) ) ) ) ) count ++ ; \n\t\tif ( count > NUM00 ) { \n\t\t\tpiece = piece . substring ( NUM00 , tabStop - count ) + NUM00 ; \n\t\t\tbuilder . replace ( index , index + tabStop , piece ) ; \n\t\t\tindex = index + tabStop - ( count - NUM00 ) ; \n\t\t\t} \n\t\telse index = index + tabStop ; \n\t\t} \n\t$F92 ( builder ) } \n"}, {"code": "private void uninstall ( String rowType ) { \n\tif $F1710 ( extensionsByRowtype , rowType ) { \n\t\textensionsByRowtype . remove ( rowType ) ; \n\t\tFile f = getExtensionFile ( rowType ) ; \n\t\tif $F3428 ( f ) { \n\t\t\tFileUtils . deleteQuietly ( f ) ; \n\t\t\t} \n\t\telse $F34420 ( log , rowType ) } \n\telse $F34420 ( log , rowType ) } \n"}, {"code": "$F16267 ( propertyName , in_pcl , pcSupport ) "}, {"code": "static final int tableSizeFor ( int cap ) { \n\tint n = cap - NUM00 ; \n\t$F250876 ( n ) $F250876 ( n ) $F250876 ( n ) $F250876 ( n ) $F250876 ( n ) return ( n < NUM00 ) ? NUM00 : ( n >= MAXIMUM_CAPACITY ) ? MAXIMUM_CAPACITY : n + NUM00 ; \n\t} \n"}, {"code": "$F1 public boolean connectionAllowed ( String eventName ) { \n\tif ( $F1263 ( eventName ) && $F1263 ( eventName ) && $F1263 ( eventName ) && $F1263 ( eventName ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\t$F20092 ( m_listenee , _BOOL ) return _BOOL ; \n\t} \n"}, {"code": "protected void generateOMGraphic ( OMGraphic g ) { \n\tif ( g != null && g . getNeedToRegenerate ( ) ) { \n\t\tProjection proj = getProjection ( ) ; \n\t\tif ( proj != null ) { \n\t\t\tg . generate ( proj ) ; \n\t\t\t} \n\t\telse if ( DEBUG ) { \n\t\t\tDebug . output ( NUM00 + g . getNeedToRegenerate ( ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void insertVariable $F72 { \n\tScriptStep variableStep = ScriptStepFactory . createVariable ( getVariableKey ( ) , getVariableValue ( ) ) ; \n\tsteps . add ( getInsertIndex ( ) , variableStep ) ; \n\tvariableKey = NUM00 ; \n\tvariableValue = NUM00 ; \n\treindexScriptSteps ( ) ; \n\t} \n"}, {"code": "protected $F8748 canHandleZeroTraining $F70738 ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType ) { \n\tprint ( NUM00 ) ; \n\tprintAttributeSummary ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType ) ; \n\tprint ( NUM00 ) ; \n\t$F8728 ( accepts ) $F18793 ( accepts ) $F18793 ( accepts ) int numTrain = NUM00 , numTest = getNumInstances ( ) , numClasses = NUM00 , missingLevel = NUM00 ; \n\tboolean predictorMissing = _BOOL , classMissing = _BOOL ; \n\treturn runBasicTest ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType , missingLevel , predictorMissing , classMissing , numTrain , numTest , numClasses , accepts ) ; \n\t} \n"}, {"code": "public static $F96 long2buff ( long n ) { \n\t$F96 bs ; \n\t$F46945 ( bs ) $F257846 ( bs , n ) $F257846 ( bs , n ) $F257846 ( bs , n ) $F257846 ( bs , n ) $F257846 ( bs , n ) $F257846 ( bs , n ) $F257846 ( bs , n ) $F8048 ( bs , n ) return bs ; \n\t} \n"}, {"code": "final boolean tryWriteLock $F72 { \n\t$F686 ( current , Thread ) int c = getState ( ) ; \n\tif ( c != NUM00 ) { \n\t\tint w = exclusiveCount ( c ) ; \n\t\tif ( w == NUM00 || current != getExclusiveOwnerThread ( ) ) return _BOOL ; \n\t\t$F266914 ( w , MAX_COUNT ) } \n\tif ( ! compareAndSetState ( c , c + NUM00 ) ) return _BOOL ; \n\tsetExclusiveOwnerThread ( current ) ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "public IoServiceListenerSupport ( IoService service ) { \n\t$F826 ( service ) this . service = service ; \n\t} \n"}, {"code": "private void cancelEventLeaseDo ( long eventID , Uuid leaseID ) throws UnknownLeaseException { \n\t$F657 ( now , System ) EventReg reg = ( EventReg ) eventByID . get ( new Long ( eventID ) ) ; \n\tif ( reg == null || reg . leaseExpiration <= now ) throw new UnknownLeaseException $F72 ; \n\tdeleteEvent ( reg ) ; \n\tif ( reg . leaseExpiration == minEventExpiration ) concurrentObj . waiterNotify ( eventNotifier ) ; \n\t} \n"}, {"code": "public static boolean isValidGDay ( String value ) $F142409 ( regex , value , isValidCalendarValue , _BOOL ) "}, {"code": "protected void paint3DRectLighting ( Graphics2D g2 , int x , int y , int width , int height ) { \n\t$F202051 ( g2 , Color ) g2 . drawLine ( x + NUM00 , y + NUM00 , x + NUM00 , y + height - NUM00 ) ; \n\tg2 . drawLine ( x + NUM00 , y + NUM00 , x + width - NUM00 , y + NUM00 ) ; \n\tg2 . setColor ( Color . gray ) ; \n\tg2 . drawLine ( x + NUM00 , y + height - NUM00 , x + width - NUM00 , y + height - NUM00 ) ; \n\t$F175635 ( g2 , x , width , y , height ) g2 . setColor ( Color . darkGray ) ; \n\tg2 . drawLine ( x , y + height , x + width , y + height ) ; \n\tg2 . drawLine ( x + width , y , x + width , y + height ) ; \n\t} \n"}, {"code": "private void parseAttributes ( TypedArray a ) { \n\tbarWidth = ( int ) a . getDimension ( R . styleable . ProgressWheel_pwBarWidth , barWidth ) ; \n\trimWidth = ( int ) a . getDimension ( R . styleable . ProgressWheel_pwRimWidth , rimWidth ) ; \n\tspinSpeed = ( int ) a . getDimension ( R . styleable . ProgressWheel_pwSpinSpeed , spinSpeed ) ; \n\tbarLength = ( int ) a . getDimension ( R . styleable . ProgressWheel_pwBarLength , barLength ) ; \n\tdelayMillis = a . getInteger ( R . styleable . ProgressWheel_pwDelayMillis , delayMillis ) ; \n\t$F17370 ( delayMillis ) if ( a . hasValue ( R . styleable . ProgressWheel_pwText ) ) { \n\t\tsetText ( a . getString ( R . styleable . ProgressWheel_pwText ) ) ; \n\t\t} \n\tbarColor = a . getColor ( R . styleable . ProgressWheel_pwBarColor , barColor ) ; \n\ttextColor = a . getColor ( R . styleable . ProgressWheel_pwTextColor , textColor ) ; \n\trimColor = a . getColor ( R . styleable . ProgressWheel_pwRimColor , rimColor ) ; \n\tcircleColor = a . getColor ( R . styleable . ProgressWheel_pwCircleColor , circleColor ) ; \n\tcontourColor = a . getColor ( R . styleable . ProgressWheel_pwContourColor , contourColor ) ; \n\ttextSize = ( int ) a . getDimension ( R . styleable . ProgressWheel_pwTextSize , textSize ) ; \n\tcontourSize = a . getDimension ( R . styleable . ProgressWheel_pwContourSize , contourSize ) ; \n\t$F17551 ( a ) } \n"}, {"code": "$F1309 public MediaFile ( File f , MediaFileType type ) { \n\tthis ( f . toPath ( ) , type ) ; \n\t} \n"}, {"code": "public CommandLine clear $F72 $F68437 ( line , this ) "}, {"code": "public static String grepMinusV ( String val , String pattern ) $F19580 ( grepInner , val , pattern , _BOOL ) "}, {"code": "public DropDownPopupButtonBuilder add ( Action action ) $F18637 ( popupMenu , action , this ) "}, {"code": "$F20664 private void attachImageFrommGallery $F72 { \n\t$F53033 ( conData ) Intent $F192736 ( intent ) ; \n\tif ( $F10471 ( mSelectedGalleryItemsList ) || ( Build . VERSION . SDK_INT < Build . VERSION_CODES . JELLY_BEAN_MR2 ) ) { \n\t\tintent . setData ( mSelectedGalleryItemsList . get ( NUM00 ) . mFileUri ) ; \n\t\t} \n\telse if $F3817 ( mSelectedGalleryItemsList ) { \n\t\tClipData . Item firstUri = new ClipData . Item ( null , null , null , mSelectedGalleryItemsList . get ( NUM00 ) . mFileUri ) ; \n\t\t$F806 mimeType = $F21901 ; \n\t\tClipData clipData = new ClipData ( NUM00 , mimeType , firstUri ) ; \n\t\tfor ( $F2277 ( index , mSelectedGalleryItemsList ) ) { \n\t\t\tClipData . Item item = new ClipData . Item ( null , null , null , mSelectedGalleryItemsList . get ( index ) . mFileUri ) ; \n\t\t\tclipData . addItem ( item ) ; \n\t\t\t} \n\t\tintent . setClipData ( clipData ) ; \n\t\t} \n\telse { \n\t\tUri uriSavedFromLifeCycle = ( Uri ) mImagePreviewImageView . getTag ( ) ; \n\t\tif ( null != uriSavedFromLifeCycle ) { \n\t\t\tintent . setData ( uriSavedFromLifeCycle ) ; \n\t\t\t} \n\t\t} \n\tintent . putExtras ( conData ) ; \n\tsetResult ( RESULT_OK , intent ) ; \n\tVectorApp . setSavedCameraImagePreview ( null ) ; \n\tfinish ( ) ; \n\t} \n"}, {"code": "public static void mkdirs ( File directory ) throws CreateDirectoryException { \n\tif $F3428 ( directory ) { \n\t\tif $F3444 ( directory ) $F932 if $F7119 ( directory ) { \n\t\t\tthrow new CreateDirectoryException ( directory . getAbsolutePath ( ) , new FileDeleteException $F89450 ( directory ) ) ; \n\t\t\t} \n\t\t} \n\tif ( $F4927 ( directory ) && $F4925 ( directory ) ) { \n\t\tthrow new CreateDirectoryException $F89450 ( directory ) ; \n\t\t} \n\t} \n"}, {"code": "public boolean hasDependency ( Capability c ) { \n\t$F58185 ( doNotCheckCapabilities , _BOOL ) $F297 ( m_Dependencies , c ) } \n"}, {"code": "private static int prefixLen ( String o1 , String o2 ) { \n\tfinal int l1 = o1 . length ( ) , l2 = o2 . length ( ) , l = l1 < l2 ? l1 : l2 ; \n\tint prefix = NUM00 ; \n\twhile ( prefix < l && ( o1 . charAt ( prefix ) == o2 . charAt ( prefix ) ) ) { \n\t\tprefix ++ ; \n\t\t} \n\treturn prefix ; \n\t} \n"}, {"code": "$F1 public void writeExternal ( ObjectOutput out ) throws IOException { \n\tsuper . writeExternal ( out ) ; \n\tout . writeDouble ( parentDistance ) ; \n\t} \n"}, {"code": "static int shouldNativelyFocusHeavyweight ( Component heavyweight , Component descendant , boolean temporary , boolean focusedWindowChangeAllowed , long time , CausedFocusEvent . Cause cause ) { \n\tif $F58998 ( log , PlatformLogger ) { \n\t\tif ( heavyweight == null ) $F22807 ( log ) if ( time == NUM00 ) $F22807 ( log ) } \n\t$F13265 ( descendant , heavyweight ) KeyboardFocusManager manager = getCurrentKeyboardFocusManager ( SunToolkit . targetToAppContext ( descendant ) ) ; \n\tKeyboardFocusManager thisManager = getCurrentKeyboardFocusManager ( ) ; \n\tComponent currentFocusOwner = thisManager . getGlobalFocusOwner ( ) ; \n\tComponent nativeFocusOwner = thisManager . getNativeFocusOwner ( ) ; \n\tWindow nativeFocusedWindow = thisManager . getNativeFocusedWindow ( ) ; \n\tif $F935 ( focusLog , PlatformLogger ) { \n\t\tfocusLog . finer ( NUM00 , String . valueOf ( descendant ) , String . valueOf ( heavyweight ) ) ; \n\t\t} \n\tif ( focusLog . isLoggable ( PlatformLogger . Level . FINEST ) ) { \n\t\tfocusLog . finest ( NUM00 , String . valueOf ( currentFocusOwner ) ) ; \n\t\tfocusLog . finest ( NUM00 , String . valueOf ( nativeFocusOwner ) ) ; \n\t\tfocusLog . finest ( NUM00 , String . valueOf ( nativeFocusedWindow ) ) ; \n\t\t} \n\tsynchronized ( heavyweightRequests ) { \n\t\tHeavyweightFocusRequest hwFocusRequest = getLastHWRequest ( ) ; \n\t\tif ( focusLog . isLoggable ( PlatformLogger . Level . FINEST ) ) { \n\t\t\tfocusLog . finest ( NUM00 , String . valueOf ( hwFocusRequest ) ) ; \n\t\t\t} \n\t\tif ( hwFocusRequest == null && heavyweight == nativeFocusOwner && heavyweight . getContainingWindow ( ) == nativeFocusedWindow ) { \n\t\t\tif ( descendant == currentFocusOwner ) { \n\t\t\t\tif ( focusLog . isLoggable ( PlatformLogger . Level . FINEST ) ) focusLog . finest ( NUM00 , String . valueOf ( descendant ) ) ; \n\t\t\t\treturn SNFH_FAILURE ; \n\t\t\t\t} \n\t\t\tmanager . enqueueKeyEvents ( time , descendant ) ; \n\t\t\thwFocusRequest = new HeavyweightFocusRequest ( heavyweight , descendant , temporary , cause ) ; \n\t\t\theavyweightRequests . add ( hwFocusRequest ) ; \n\t\t\tif ( currentFocusOwner != null ) { \n\t\t\t\tFocusEvent currentFocusOwnerEvent = new CausedFocusEvent ( currentFocusOwner , FocusEvent . FOCUS_LOST , temporary , descendant , cause ) ; \n\t\t\t\tSunToolkit . postEvent ( currentFocusOwner . appContext , currentFocusOwnerEvent ) ; \n\t\t\t\t} \n\t\t\tFocusEvent newFocusOwnerEvent = new CausedFocusEvent ( descendant , FocusEvent . FOCUS_GAINED , temporary , currentFocusOwner , cause ) ; \n\t\t\tSunToolkit . postEvent ( descendant . appContext , newFocusOwnerEvent ) ; \n\t\t\tif ( focusLog . isLoggable ( PlatformLogger . Level . FINEST ) ) focusLog . finest ( NUM00 , String . valueOf ( descendant ) ) ; \n\t\t\treturn SNFH_SUCCESS_HANDLED ; \n\t\t\t} \n\t\telse if ( hwFocusRequest != null && hwFocusRequest . heavyweight == heavyweight ) { \n\t\t\tif ( hwFocusRequest . addLightweightRequest ( descendant , temporary , cause ) ) { \n\t\t\t\tmanager . enqueueKeyEvents ( time , descendant ) ; \n\t\t\t\t} \n\t\t\tif ( focusLog . isLoggable ( PlatformLogger . Level . FINEST ) ) $F224661 ( focusLog , descendant , heavyweight ) return SNFH_SUCCESS_HANDLED ; \n\t\t\t} \n\t\telse { \n\t\t\tif ( ! focusedWindowChangeAllowed ) { \n\t\t\t\tif ( hwFocusRequest == HeavyweightFocusRequest . CLEAR_GLOBAL_FOCUS_OWNER ) { \n\t\t\t\t\t$F115 ( size , heavyweightRequests ) hwFocusRequest = ( HeavyweightFocusRequest ) ( ( size >= NUM00 ) ? heavyweightRequests . get ( size - NUM00 ) : null ) ; \n\t\t\t\t\t} \n\t\t\t\tif ( focusedWindowChanged ( heavyweight , ( hwFocusRequest != null ) ? hwFocusRequest . heavyweight : nativeFocusedWindow ) ) { \n\t\t\t\t\tif ( focusLog . isLoggable ( PlatformLogger . Level . FINEST ) ) { \n\t\t\t\t\t\t$F150605 ( focusLog , descendant ) } \n\t\t\t\t\treturn SNFH_FAILURE ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tmanager . enqueueKeyEvents ( time , descendant ) ; \n\t\t\theavyweightRequests . add ( new HeavyweightFocusRequest ( heavyweight , descendant , temporary , cause ) ) ; \n\t\t\tif ( focusLog . isLoggable ( PlatformLogger . Level . FINEST ) ) { \n\t\t\t\t$F150605 ( focusLog , descendant ) } \n\t\t\treturn SNFH_SUCCESS_PROCEED ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public NamedThreadFactory ( final String poolID ) { \n\tid = poolID ; \n\t} \n"}, {"code": "public void moveLocationUp ( RouteLocation rl ) { \n\tint sequenceId = rl . getSequenceId ( ) ; \n\tif ( sequenceId - NUM00 <= NUM00 ) { \n\t\trl . setSequenceId ( _sequenceNum + NUM00 ) ; \n\t\tresequenceIds ( ) ; \n\t\t} \n\telse { \n\t\tRouteLocation replaceRl = getItemBySequenceId ( sequenceId - NUM00 ) ; \n\t\tif ( replaceRl != null ) { \n\t\t\treplaceRl . setSequenceId ( sequenceId ) ; \n\t\t\trl . setSequenceId ( sequenceId - NUM00 ) ; \n\t\t\t} \n\t\telse $F5795 ( resequenceIds ) } \n\tsetDirtyAndFirePropertyChange ( LISTCHANGE_CHANGED_PROPERTY , null , Integer . toString ( sequenceId ) ) ; \n\t} \n"}, {"code": "protected Attribute generateAttribute $F120580 ( index , attType , namePrefix ) throws Exception { \n\tAttribute result ; \n\tString name ; \n\tint valIndex ; \n\tint nomCount ; \n\tString prefix ; \n\tresult = null ; \n\tif ( index == CLASS_IS_LAST ) { \n\t\tvalIndex = NUM00 ; \n\t\tname = NUM00 ; \n\t\tprefix = NUM00 ; \n\t\tnomCount = getNumClasses ( ) ; \n\t\t} \n\telse { \n\t\tvalIndex = index ; \n\t\tnomCount = getNumNominalValues ( ) ; \n\t\tprefix = $F37978 ( valIndex ) ; \n\t\tswitch ( attType ) { \n\t\t\tcase Attribute . NOMINAL : name = NUM00 + ( valIndex + NUM00 ) ; \n\t\t\t$F597 case Attribute . NUMERIC : name = NUM00 + ( valIndex + NUM00 ) ; \n\t\t\t$F597 case $F70746 NUM00 : name = NUM00 + ( valIndex + NUM00 ) ; \n\t\t\t$F597 case $F70746 DATE : name = NUM00 + ( valIndex + NUM00 ) ; \n\t\t\t$F597 case $F70746 RELATIONAL : name = NUM00 + ( valIndex + NUM00 ) ; \n\t\t\t$F597 default : $F29525 ( attType ) } \n\t\t} \n\tswitch ( attType ) { \n\t\tcase $F70746 NOMINAL : ArrayList < String > nomStrings = new $F5 ( valIndex + NUM00 ) ; \n\t\tfor ( $F119 ( j , nomCount ) ) { \n\t\t\tnomStrings . add ( prefix + ( j + NUM00 ) ) ; \n\t\t\t} \n\t\tresult = new Attribute ( namePrefix + name , nomStrings ) ; \n\t\t$F597 case $F70746 NUMERIC : result = new Attribute ( namePrefix + name ) ; \n\t\t$F597 case $F70746 NUM00 : result = new Attribute ( namePrefix + name , ( $F5 ) null ) ; \n\t\t$F597 case $F70746 DATE : result = new Attribute ( namePrefix + name , NUM00 ) ; \n\t\t$F597 case $F70746 RELATIONAL : Instances rel ; \n\t\tif ( index == CLASS_IS_LAST ) $F20182 ( rel , getRelationalClassFormat ) else { \n\t\t\trel = getRelationalFormat ( index ) ; \n\t\t\t} \n\t\tif ( rel == null ) { \n\t\t\tTestInstances dataset = new TestInstances $F72 ; \n\t\t\tdataset . setNumNominal ( getNumRelationalNominal ( ) ) ; \n\t\t\tdataset . setNumNominalValues ( getNumRelationalNominalValues ( ) ) ; \n\t\t\tdataset . setNumNumeric ( getNumRelationalNumeric ( ) ) ; \n\t\t\tdataset . setNumString ( getNumRelationalString ( ) ) ; \n\t\t\tdataset . setNumDate ( getNumRelationalDate ( ) ) ; \n\t\t\tdataset . setNumInstances ( NUM00 ) ; \n\t\t\tdataset . setClassType ( Attribute . NOMINAL ) ; \n\t\t\trel = new Instances ( dataset . generate ( ) ) ; \n\t\t\tif $F931 ( getNoClass ) { \n\t\t\t\tint clsIndex = rel . classIndex ( ) ; \n\t\t\t\trel . setClassIndex ( - NUM00 ) ; \n\t\t\t\trel . deleteAttributeAt ( clsIndex ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tresult = new Attribute ( namePrefix + name , rel ) ; \n\t\t$F597 default : $F29525 ( attType ) } \n\treturn result ; \n\t"}, {"code": "public static String printCanopyAssignments ( Instances dataPoints , List < $F2469 > canopyAssignments ) { \n\t$F83 ( temp ) for ( $F2277 ( i , dataPoints ) ) { \n\t\t$F286 ( temp , i ) temp . append ( dataPoints . instance ( i ) ) ; \n\t\tif ( canopyAssignments != null && $F56339 ( canopyAssignments , dataPoints ) ) { \n\t\t\t$F2469 assignments = canopyAssignments . get ( i ) ; \n\t\t\t$F6407 ( temp , printSingleAssignment , assignments ) } \n\t\t$F84 ( temp ) } \n\t$F92 ( temp ) } \n"}, {"code": "public static void registerDefaultPrefixes $F72 throws XMLSecurityException { \n\tsetDefaultPrefix ( NUM00 , NUM00 ) ; \n\tsetDefaultPrefix ( NUM00 , NUM00 ) ; \n\tsetDefaultPrefix ( NUM00 , NUM00 ) ; \n\tsetDefaultPrefix ( NUM00 , NUM00 ) ; \n\tsetDefaultPrefix ( NUM00 , NUM00 ) ; \n\tsetDefaultPrefix ( NUM00 , NUM00 ) ; \n\tsetDefaultPrefix ( NUM00 , NUM00 ) ; \n\tsetDefaultPrefix ( NUM00 , NUM00 ) ; \n\t} \n"}, {"code": "protected void initBPOrderDetails ( int C_BPartner_ID , boolean forInvoice ) { \n\t$F81293 ( log , C_BPartner_ID ) KeyNamePair pp = new KeyNamePair ( NUM00 , NUM00 ) ; \n\torderField . removeActionListener ( this ) ; \n\t$F213890 ( orderField ) orderField . addItem ( pp ) ; \n\t$F104317 list = loadOrderData ( C_BPartner_ID , forInvoice , _BOOL ) ; \n\t$F104320 ( knp , list , orderField ) $F53383 ( orderField ) orderField . addActionListener ( this ) ; \n\t$F30070 ( dialog ) initBPDetails ( C_BPartner_ID ) ; \n\t} \n"}, {"code": "private void writeToc ( ByteBuffer dataFileBuffer , TocType tocType , int entryCount , int firstEntryOffset ) { \n\tdataFileBuffer . putInt ( tocType . identifier ) ; \n\tdataFileBuffer . putInt ( entryCount ) ; \n\tdataFileBuffer . putLong ( firstEntryOffset ) ; \n\t} \n"}, {"code": "public void startPart $F8306 ( contentType , headers ) throws IOException { \n\twriteCurrentBoundary ( ) ; \n\tif ( contentType != null ) { \n\t\twriteString ( MimeUtils . HEADER_CONTENT_TYPE + NUM00 + contentType ) ; \n\t\tout . write ( CRLF ) ; \n\t\t} \n\tfor ( $F30035 ( i , headers ) ) { \n\t\twriteString ( headers [ i ] ) ; \n\t\tout . write ( CRLF ) ; \n\t\t} \n\tout . write ( CRLF ) ; \n\t} \n"}, {"code": "public EmbeddedMetaService $F72 throws IOException , ExecutionException { \n\tthis ( System . getenv ( JOLIE_HOME_ENV ) ) ; \n\t} \n"}, {"code": "public int showDialog $F72 { \n\tm_Result = CANCEL_OPTION ; \n\t$F2027 origSelected = m_List . getSelectedIndices ( ) ; \n\tsetVisible ( _BOOL ) ; \n\tif ( m_Result == CANCEL_OPTION ) { \n\t\tm_List . setSelectedIndices ( origSelected ) ; \n\t\t} \n\treturn m_Result ; \n\t} \n"}, {"code": "public final void addAlarmValues ( final List < AlarmValueImpl > alarmValues ) { \n\tif ( alarmValues != null ) { \n\t\tfor ( AlarmValueImpl alarmValue : alarmValues ) { \n\t\t\t$F25302 ( alarmValue , addAlarmValue ) } \n\t\t} \n\t} \n"}, {"code": "public String product $F83882 ( ctx , WindowNo , mTab , mField , value ) { \n\t$F179073 ( M_Product_ID , value ) if ( M_Product_ID == null || $F179074 ( M_Product_ID ) ) $F1278 if ( $F307232 ( Env , ctx , WindowNo ) == M_Product_ID . intValue ( ) && $F307232 ( Env , ctx , WindowNo ) != NUM00 ) mTab . setValue ( NUM00 , $F307232 ( Env , ctx , WindowNo ) ) ; \n\telse $F179081 ( mTab ) checkQtyAvailable ( ctx , mTab , WindowNo , M_Product_ID , null ) ; \n\t$F1278 } \n"}, {"code": "protected void processpacket ( SimEvent ev ) { \n\tCloudSim . cancelAll ( getId ( ) , new PredicateType ( CloudSimTags . Network_Event_UP ) ) ; \n\tschedule ( getId ( ) , switching_delay , CloudSimTags . Network_Event_UP ) ; \n\tpktlist . add ( ( NetworkPacket ) ev . getData ( ) ) ; \n\t} \n"}, {"code": "public void addChild ( Controller controller ) { \n\tif ( children == null ) children = new ArrayList < Controller > $F72 ; \n\tchildren . add ( controller ) ; \n\tcontroller . parent = this ; \n\t} \n"}, {"code": "protected boolean checkTurnoutsInSection ( Section s , int seqNum , Section nextSection , ActiveTrain at , LayoutEditor le , Section prevSection ) { \n\treturn turnoutUtil ( s , seqNum , nextSection , at , le , _BOOL , _BOOL , prevSection ) ; \n\t} \n"}, {"code": "private Point2D calculateLabelAnchorPoint ( ItemLabelAnchor anchor , Rectangle2D bar , PlotOrientation orientation ) { \n\tPoint2D result = null ; \n\tdouble offset = getItemLabelAnchorOffset ( ) ; \n\tdouble x0 = bar . getX ( ) - offset ; \n\t$F82242 ( x1 , bar ) double x2 = bar . getX ( ) + offset ; \n\tdouble x3 = bar . getCenterX ( ) ; \n\tdouble x4 = bar . getMaxX ( ) - offset ; \n\t$F69944 ( x5 , bar ) double x6 = bar . getMaxX ( ) + offset ; \n\tdouble y0 = bar . getMaxY ( ) + offset ; \n\t$F69928 ( y1 , bar ) double y2 = bar . getMaxY ( ) - offset ; \n\tdouble y3 = bar . getCenterY ( ) ; \n\tdouble y4 = bar . getMinY ( ) + offset ; \n\t$F69930 ( y5 , bar ) double y6 = bar . getMinY ( ) - offset ; \n\tif ( anchor == ItemLabelAnchor . CENTER ) $F467389 ( result , x3 , y3 ) else if ( anchor == ItemLabelAnchor . INSIDE1 ) $F467389 ( result , x4 , y4 ) else if ( anchor == ItemLabelAnchor . INSIDE2 ) $F467389 ( result , x4 , y4 ) else if ( anchor == ItemLabelAnchor . INSIDE3 ) $F467389 ( result , x4 , y3 ) else if ( anchor == ItemLabelAnchor . INSIDE4 ) $F467389 ( result , x4 , y2 ) else if ( anchor == ItemLabelAnchor . INSIDE5 ) $F467389 ( result , x4 , y2 ) else if ( anchor == ItemLabelAnchor . INSIDE6 ) $F467389 ( result , x3 , y2 ) else if ( anchor == ItemLabelAnchor . INSIDE7 ) $F467389 ( result , x2 , y2 ) else if ( anchor == ItemLabelAnchor . INSIDE8 ) $F467389 ( result , x2 , y2 ) else if ( anchor == ItemLabelAnchor . INSIDE9 ) $F467389 ( result , x2 , y3 ) else if ( anchor == ItemLabelAnchor . INSIDE10 ) $F467389 ( result , x2 , y4 ) else if ( anchor == ItemLabelAnchor . INSIDE11 ) $F467389 ( result , x2 , y4 ) else if ( anchor == ItemLabelAnchor . INSIDE12 ) $F467389 ( result , x3 , y4 ) else if ( anchor == ItemLabelAnchor . OUTSIDE1 ) $F467389 ( result , x5 , y6 ) else if ( anchor == ItemLabelAnchor . OUTSIDE2 ) $F467389 ( result , x6 , y5 ) else if ( anchor == ItemLabelAnchor . OUTSIDE3 ) $F467389 ( result , x6 , y3 ) else if ( anchor == ItemLabelAnchor . OUTSIDE4 ) $F467389 ( result , x6 , y1 ) else if ( anchor == ItemLabelAnchor . OUTSIDE5 ) $F467389 ( result , x5 , y0 ) else if ( anchor == ItemLabelAnchor . OUTSIDE6 ) $F467389 ( result , x3 , y0 ) else if ( anchor == ItemLabelAnchor . OUTSIDE7 ) $F467389 ( result , x1 , y0 ) else if ( anchor == ItemLabelAnchor . OUTSIDE8 ) $F467389 ( result , x0 , y1 ) else if ( anchor == ItemLabelAnchor . OUTSIDE9 ) $F467389 ( result , x0 , y3 ) else if ( anchor == ItemLabelAnchor . OUTSIDE10 ) $F467389 ( result , x0 , y5 ) else if ( anchor == ItemLabelAnchor . OUTSIDE11 ) $F467389 ( result , x1 , y6 ) else if ( anchor == ItemLabelAnchor . OUTSIDE12 ) $F467389 ( result , x3 , y6 ) return result ; \n\t} \n"}, {"code": "$F47733 ( reader , writer , buffer , count ) "}, {"code": "protected String instanceToMatlab ( Instance inst ) { \n\tStringBuffer result ; \n\tint i ; \n\t$F7398 ( result ) for ( i = NUM00 ; \n\ti < inst . numAttributes ( ) ; \n\ti ++ ) { \n\t\tif ( i > NUM00 ) { \n\t\t\t$F562612 ( result , m_UseTabs ) } \n\t\tresult . append ( m_Format . format ( inst . value ( i ) ) ) ; \n\t\t} \n\t$F92 ( result ) } \n"}, {"code": "private static double distance ( Problem problem , Solution a , Solution b , double power ) { \n\tdouble distance = NUM00 ; \n\tfor ( $F61686 ( i , problem ) ) { \n\t\tdistance += Math . pow ( Math . abs ( a . getObjective ( i ) - b . getObjective ( i ) ) , power ) ; \n\t\t} \n\treturn Math . pow ( distance , NUM00 / power ) ; \n\t} \n"}, {"code": "private List < TokenType > extractStringLiteralDelimitingTokens $F4374 ( tokens ) { \n\tList < TokenType > delimitingTokens = new ArrayList < TokenType > $F72 ; \n\tfor ( String token : tokens ) { \n\t\tString cleanToken = cleanToken ( token ) ; \n\t\tboolean handled = _BOOL ; \n\t\tif ( alternateQuote == null ) { \n\t\t\tString alternateQuoteFromToken = extractAlternateOpenQuote ( cleanToken ) ; \n\t\t\tif ( alternateQuoteFromToken != null ) { \n\t\t\t\tString closeQuote = computeAlternateCloseQuote ( alternateQuoteFromToken ) ; \n\t\t\t\tif ( cleanToken . length ( ) >= ( $F71221 ( alternateQuoteFromToken , closeQuote ) ) && cleanToken . startsWith ( alternateQuoteFromToken ) && cleanToken . endsWith ( closeQuote ) ) $F1448 alternateQuote = closeQuote ; \n\t\t\t\tdelimitingTokens . add ( TokenType . ALTERNATE_QUOTE ) ; \n\t\t\t\t$F598 } \n\t\t\t} \n\t\tif ( ( alternateQuote != null ) && cleanToken . endsWith ( alternateQuote ) ) { \n\t\t\talternateQuote = null ; \n\t\t\tdelimitingTokens . add ( TokenType . ALTERNATE_QUOTE ) ; \n\t\t\t$F598 } \n\t\tif ( $F45145 ( cleanToken ) && cleanToken . startsWith ( NUM00 ) && cleanToken . endsWith ( NUM00 ) ) $F1448 if ( $F45145 ( cleanToken ) && cleanToken . startsWith ( NUM00 ) && cleanToken . endsWith ( NUM00 ) ) $F1448 if ( isSingleLineComment ( cleanToken ) ) { \n\t\t\tdelimitingTokens . add ( TokenType . SINGLE_LINE_COMMENT ) ; \n\t\t\thandled = _BOOL ; \n\t\t\t} \n\t\tif $F3106 ( cleanToken ) { \n\t\t\tdelimitingTokens . add ( TokenType . MULTI_LINE_COMMENT ) ; \n\t\t\thandled = _BOOL ; \n\t\t\t} \n\t\telse if $F3106 ( cleanToken ) { \n\t\t\tdelimitingTokens . add ( TokenType . QUOTE ) ; \n\t\t\thandled = _BOOL ; \n\t\t\t} \n\t\tif ( $F14942 ( cleanToken ) && cleanToken . endsWith ( NUM00 ) ) { \n\t\t\tdelimitingTokens . add ( TokenType . MULTI_LINE_COMMENT ) ; \n\t\t\thandled = _BOOL ; \n\t\t\t} \n\t\telse if ( $F14942 ( cleanToken ) && cleanToken . endsWith ( NUM00 ) ) { \n\t\t\tdelimitingTokens . add ( TokenType . QUOTE ) ; \n\t\t\thandled = _BOOL ; \n\t\t\t} \n\t\tif ( ! handled ) { \n\t\t\tdelimitingTokens . add ( TokenType . OTHER ) ; \n\t\t\t} \n\t\t} \n\treturn delimitingTokens ; \n\t} \n"}, {"code": "private void printRainbowUser ( User user , String userName , boolean action , SpecialColor type , String id ) { \n\tSimpleAttributeSet userStyle = new SimpleAttributeSet ( styles . nick ( ) ) ; \n\tuserStyle . addAttribute ( Attribute . IS_USER_MESSAGE , _BOOL ) ; \n\tuserStyle . addAttribute ( Attribute . USER , user ) ; \n\tif ( id != null ) { \n\t\tuserStyle . addAttribute ( Attribute . ID , id ) ; \n\t\t} \n\t$F115 ( length , userName ) if ( action ) { \n\t\tprint ( NUM00 , styles . nick ( ) ) ; \n\t\t} \n\tfor ( $F119 ( i , length ) ) { \n\t\tColor c ; \n\t\tif ( type == SpecialColor . RAINBOW ) { \n\t\t\tc = makeRainbowColor ( i , length ) ; \n\t\t\t} \n\t\telse { \n\t\t\tc = makeGoldColor ( i , length ) ; \n\t\t\t} \n\t\tStyleConstants . setForeground ( userStyle , c ) ; \n\t\tprint ( $F10818 ( userName , i ) , userStyle ) ; \n\t\t} \n\t} \n"}, {"code": "public void notifyAddressThrottleFound ( DccThrottle t ) { \n\t$F35060 ( log ) mThrottle = t ; \n\tsetEnabled ( _BOOL ) ; \n\tmThrottle . addPropertyChangeListener ( this ) ; \n\tsetFnButtons ( ) ; \n\t} \n"}, {"code": "public static void matrixMultWDivMM ( MatrixBlock mW , MatrixBlock mU , MatrixBlock mV , MatrixBlock mX , MatrixBlock ret , WDivMMType wt , int k ) throws DMLRuntimeException { \n\tif ( mW . isEmptyBlock ( _BOOL ) || ( wt . isLeft ( ) && mU . isEmptyBlock ( _BOOL ) ) || ( wt . isRight ( ) && mV . isEmptyBlock ( _BOOL ) ) || ( wt . isBasic ( ) && mW . isEmptyBlock ( _BOOL ) ) ) { \n\t\t$F88073 ( ret ) $F665 } \n\tret . sparse = wt . isBasic ( ) ? mW . sparse : _BOOL ; \n\tret . allocateDenseOrSparseBlock ( ) ; \n\tif ( ! ret . isThreadSafe ( ) ) { \n\t\tmatrixMultWDivMM ( mW , mU , mV , mX , ret , wt ) ; \n\t\t$F665 } \n\ttry { \n\t\tExecutorService pool = Executors . newFixedThreadPool ( k ) ; \n\t\tArrayList < MatrixMultWDivTask > tasks = new ArrayList < MatrixMultWDivTask > $F72 ; \n\t\tif ( wt . isLeft ( ) ) { \n\t\t\tint blklen = ( int ) ( Math . ceil ( ( double ) mW . clen / k ) ) ; \n\t\t\tfor ( int j = NUM00 ; \n\t\t\tj < k & j * blklen < mW . clen ; \n\t\t\tj ++ ) tasks . add ( new MatrixMultWDivTask ( mW , mU , mV , mX , ret , wt , NUM00 , mW . rlen , j * blklen , Math . min ( ( j + NUM00 ) * blklen , mW . clen ) ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tint blklen = ( int ) ( Math . ceil ( ( double ) mW . rlen / k ) ) ; \n\t\t\tfor ( int i = NUM00 ; \n\t\t\ti < k & i * blklen < mW . rlen ; \n\t\t\ti ++ ) tasks . add ( new MatrixMultWDivTask ( mW , mU , mV , mX , ret , wt , i * blklen , Math . min ( ( i + NUM00 ) * blklen , mW . rlen ) , NUM00 , mW . clen ) ) ; \n\t\t\t} \n\t\tList < Future $F17803 > taskret = pool . invokeAll ( tasks ) ; \n\t\t$F733 ( pool ) ret . nonZeros = NUM00 ; \n\t\tfor ( Future $F17803 task : taskret ) ret . nonZeros += task . get ( ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new DMLRuntimeException ( e ) ; \n\t\t} \n\t$F88073 ( ret ) } \n"}, {"code": "public boolean verify $F72 throws MissingResourceFailureException , XMLSecurityException { \n\treturn super . verifyReferences ( _BOOL ) ; \n\t} \n"}, {"code": "public OpenIdPrompt ( String prompt ) { \n\toriginalValue = prompt ; \n\tif ( isEmpty ( prompt ) ) { \n\t\t$F131516 ( prompts , Collections ) } \n\telse { \n\t\tprompts = stringToSet ( prompt . toLowerCase ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "private static boolean calculateIsFailure $F72 { \n\tint randomValue = $F6823 ( random ) ; \n\treturn randomValue <= ERROR_PCT ; \n\t} \n"}, {"code": "private int checkUserLink ( SpannableStringBuilder out , String in , int start ) { \n\tint pos = start + NUM00 ; \n\t$F83 ( temp ) String targetString = in . substring ( pos , Math . min ( in . length ( ) , pos + NUM00 ) ) ; \n\tfor ( $F1088 ( i , targetString ) ) { \n\t\t$F1280 ( c , targetString , i ) if ( $F53963 ( c ) || c == NUM00 ) $F288 ( temp , c ) else $F5153 } \n\t$F1822 ( username , temp ) if ( $F3598 ( username ) || username . equalsIgnoreCase ( NUM00 ) ) $F7629 out . append ( username ) ; \n\treturn pos + username . length ( ) - NUM00 ; \n\t} \n"}, {"code": "$F40513 ( mArrayList ) "}, {"code": "public void test_commonTest_01 $F72 { \n\tSSLContextSpiImpl ssl = new SSLContextSpiImpl $F72 ; \n\ttry { \n\t\tSSLSessionContext slsc = ssl . engineGetClientSessionContext ( ) ; \n\t\tfail ( NUM00 ) ; \n\t\t} \n\t$F132298 ( str , re , fail ) $F132299 ( fail , e ) try { \n\t\tSSLSessionContext slsc = ssl . engineGetServerSessionContext ( ) ; \n\t\tfail ( NUM00 ) ; \n\t\t} \n\t$F132298 ( str , re , fail ) $F132299 ( fail , e ) try { \n\t\tSSLServerSocketFactory sssf = ssl . engineGetServerSocketFactory ( ) ; \n\t\tfail ( NUM00 ) ; \n\t\t} \n\t$F132298 ( str , re , fail ) $F132299 ( fail , e ) try { \n\t\tSSLSocketFactory ssf = ssl . engineGetSocketFactory ( ) ; \n\t\tfail ( NUM00 ) ; \n\t\t} \n\t$F132298 ( str , re , fail ) $F132299 ( fail , e ) } \n"}, {"code": "public static ClassDescriptor createClassDescriptorFromResourceName ( String resourceName ) { \n\tif ( ! isClassResource ( resourceName ) ) $F29526 ( resourceName ) return createClassDescriptor ( $F4019 ( resourceName ) ) ; \n\t} \n"}, {"code": "public static void show ( final Window parent , final String content ) { \n\tfinal CLogFileDialog dialog = new CLogFileDialog ( parent , content ) ; \n\tGuiHelper . centerChildToParent ( parent , dialog , _BOOL ) ; \n\tdialog . setVisible ( _BOOL ) ; \n\t} \n"}, {"code": "protected void endNode ( Node node ) throws $F2253 { \n\tswitch $F6708 ( node ) { \n\t\tcase Node . DOCUMENT_NODE : $F597 case Node . DOCUMENT_TYPE_NODE : serializeDocType ( ( DocumentType ) node , _BOOL ) ; \n\t\t$F597 case Node . ELEMENT_NODE : serializeElement ( ( Element ) node , _BOOL ) ; \n\t\t$F597 case Node . CDATA_SECTION_NODE : $F597 case Node . ENTITY_REFERENCE_NODE : serializeEntityReference ( ( EntityReference ) node , _BOOL ) ; \n\t\t$F597 $F1267 } \n\t} \n"}, {"code": "public CreateWindowClause addView ( String namespace , String name ) { \n\tviews . add ( View . create ( namespace , name ) ) ; \n\treturn this ; \n\t} \n"}, {"code": "$F1654 ( set ) "}, {"code": "public void associateConnection ( Object connection ) throws ResourceException { \n\t$F217922 ( connectionSharing , disassociateConnections ) try { \n\t\tfinal FBConnection abstractConnection = ( FBConnection ) connection ; \n\t\tabstractConnection . setManagedConnection ( this ) ; \n\t\tconnectionHandles . add ( abstractConnection ) ; \n\t\t} \n\tcatch ( ClassCastException cce ) { \n\t\tthrow new FBResourceException ( NUM00 , cce ) ; \n\t\t} \n\t} \n"}, {"code": "ChronoLocalDateTime $F48881 toLocalDateTime $F72 ; \n"}, {"code": "private void save $F72 { \n\ttry { \n\t\tFileUtils . write ( $F33731 ( jarName ) , text ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\tJOptionPane . showMessageDialog ( null , e . getMessage ( ) , NUM00 , JOptionPane . ERROR_MESSAGE ) ; \n\t\t} \n\t} \n"}, {"code": "private static void assertNotEmpty ( String message , String string ) { \n\tassertNotNull ( message , string ) ; \n\tassertFalse ( message , string . equals ( NUM00 ) ) ; \n\t} \n"}, {"code": "private void generateEntityConfig ( ManagedEntityConfig config ) throws SAXException { \n\t$F107310 ( host , config ) if ( host != null ) { \n\t\t$F153269 ( handler , HOST , EMPTY ) handler . characters ( $F62204 ( host ) ) ; \n\t\t$F153271 ( handler , HOST ) } \n\tString remoteCommand = config . getRemoteCommand ( ) ; \n\tif ( remoteCommand != null ) { \n\t\t$F153269 ( handler , REMOTE_COMMAND , EMPTY ) handler . characters ( $F62204 ( remoteCommand ) ) ; \n\t\t$F153271 ( handler , REMOTE_COMMAND ) } \n\tString workingDirectory = config . getWorkingDirectory ( ) ; \n\tif ( workingDirectory != null ) { \n\t\t$F153269 ( handler , WORKING_DIRECTORY , EMPTY ) handler . characters ( $F62204 ( workingDirectory ) ) ; \n\t\t$F153271 ( handler , WORKING_DIRECTORY ) } \n\tString productDirectory = config . getProductDirectory ( ) ; \n\tif ( productDirectory != null ) { \n\t\t$F153269 ( handler , PRODUCT_DIRECTORY , EMPTY ) handler . characters ( $F62204 ( productDirectory ) ) ; \n\t\t$F153271 ( handler , PRODUCT_DIRECTORY ) } \n\t} \n"}, {"code": "public void hiliteLabel ( Node v , NodeData data ) { \n\tNodeView nv = viewer . getNV ( v ) ; \n\tif ( nv . getLocation ( ) == null ) $F665 Point apt = nv . getLabelPosition ( viewer . trans ) ; \n\t$F8249 ( apt ) gc . setColor ( ProgramProperties . SELECTION_COLOR_ADDITIONAL_TEXT ) ; \n\tif ( ! nv . getLabelVisible ( ) && nv . getLabel ( ) != null ) { \n\t\t$F252172 ( gc , nv ) gc . drawString ( nv . getLabel ( ) , apt . x , apt . y ) ; \n\t\t} \n\tif ( data . getSummarized ( ) . length > NUM00 || ( data . getSummarized ( ) . length == NUM00 && data . getSummarized ( ) [ NUM00 ] > NUM00 ) ) { \n\t\tgc . setFont ( selectionFont ) ; \n\t\t$F83 ( buf ) if ( data . getCountAssigned ( ) > NUM00 ) { \n\t\t\t$F84 ( buf ) for ( int value : data . getAssigned ( ) ) $F181853 ( buf , String , value ) gc . drawString ( buf . toString ( ) , apt . x , apt . y += NUM00 ) ; \n\t\t\t} \n\t\t$F6932 ( buf ) $F84 ( buf ) for ( int value : data . getSummarized ( ) ) $F181853 ( buf , String , value ) gc . drawString ( buf . toString ( ) , apt . x , apt . y += NUM00 ) ; \n\t\t} \n\tif ( data . getUpPValue ( ) != - NUM00 ) { \n\t\tgc . drawString ( NUM00 + ( float ) data . getUpPValue ( ) , apt . x , apt . y += NUM00 ) ; \n\t\t} \n\tif ( data . getDownPValue ( ) != - NUM00 ) { \n\t\tgc . drawString ( NUM00 + ( float ) data . getDownPValue ( ) , apt . x , apt . y += NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "public void appendLine ( CharSequence line ) $F207 ( lines , line ) "}, {"code": "public void flagActionItems $F72 { \n\t$F24126 ( mIsActionItemsStale ) boolean flagged = _BOOL ; \n\tfor ( $F232606 ref : mPresenters ) { \n\t\t$F232608 ( presenter , ref ) if ( presenter == null ) $F106 ( mPresenters , ref ) else { \n\t\t\tflagged |= presenter . flagActionItems ( ) ; \n\t\t\t} \n\t\t} \n\tif ( flagged ) { \n\t\t$F725 ( mActionItems ) $F725 ( mNonActionItems ) ArrayList < MenuItemImpl > visibleItems = getVisibleItems ( ) ; \n\t\t$F10162 ( itemsSize , visibleItems ) for ( $F119 ( i , itemsSize ) ) { \n\t\t\tMenuItemImpl item = visibleItems . get ( i ) ; \n\t\t\tif ( item . isActionButton ( ) ) $F207 ( mActionItems , item ) else $F207 ( mNonActionItems , item ) } \n\t\t} \n\telse { \n\t\t$F725 ( mActionItems ) $F725 ( mNonActionItems ) $F138067 ( mNonActionItems , getVisibleItems ) } \n\tmIsActionItemsStale = _BOOL ; \n\t} \n"}, {"code": "public static void registerNewAggregationFunction ( String name , Class < ? extends AggregationFunction > clazz , AggregationFunctionMetaDataProvider metaDataProvider ) { \n\tAGGREATION_FUNCTIONS . put ( name , clazz ) ; \n\tAGGREGATION_FUNCTIONS_META_DATA_PROVIDER . put ( name , metaDataProvider ) ; \n\t} \n"}, {"code": "private $F96 buildFileAuthTag $F72 throws FileEncryptionException { \n\tSecretKey key = backEncRandomAccessFile . shareKey ; \n\tif ( key == null || key . getEncoded ( ) . length == NUM00 ) $F112401 else { \n\t\t$F2268 ( authTagHMac ) KeyParameter keyParameter = new KeyParameter $F4697 ( key ) ; \n\t\tauthTagHMac . init ( keyParameter ) ; \n\t\t} \n\tif $F10471 ( atagList ) $F112401 else { \n\t\tfor ( $F2277 ( i , atagList ) ) { \n\t\t\t$F96 curChunkTag = atagList . get ( i ) ; \n\t\t\tif ( ( curChunkTag == null ) || ( curChunkTag . length != CHUNK_AUTH_TAG_LENGTH ) ) { \n\t\t\t\tthrow new FileEncryptionException ( NUM00 + i ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\t$F118814 ( authTagHMac , curChunkTag , CHUNK_AUTH_TAG_LENGTH ) } \n\t\t\t} \n\t\t$F2175 ( tmp , AUTH_TAG_SIZE ) $F137382 ( authTagHMac , tmp ) return tmp ; \n\t\t} \n\t} \n"}, {"code": "$F60268 ( name ) "}, {"code": "public void updateData ( MapElement mapElement ) { \n\t$F18684 ( nameLabel , mapElement ) pinnedCheckBox . setSelected ( mapElement . isPinned ( ) ) ; \n\t} \n"}, {"code": "public int doFinal $F5474 ( out , outOff ) throws DataLengthException , IllegalStateException , InvalidCipherTextException { \n\ttry { \n\t\tint resultLen = NUM00 ; \n\t\tif ( outOff + bufOff > out . length ) { \n\t\t\tthrow new OutputLengthException $F580 ; \n\t\t\t} \n\t\tif ( bufOff != NUM00 ) { \n\t\t\tif ( ! partialBlockOkay ) $F58352 $F58355 ( cipher , buf ) resultLen = bufOff ; \n\t\t\tbufOff = NUM00 ; \n\t\t\t$F6483 ( System , buf , out , outOff , resultLen ) } \n\t\treturn resultLen ; \n\t\t} \n\t$F49978 ( reset ) } \n"}, {"code": "public PriorityQueue ( int initialCapacity , Comparator < ? super E > comparator ) { \n\t$F63585 ( initialCapacity ) elements = newElementArray ( initialCapacity ) ; \n\tthis . comparator = comparator ; \n\t} \n"}, {"code": "public void readData ( DataInput input ) throws IOException { \n\t$F89921 ( readReference , input ) $F89921 ( readCount , input ) $F89921 ( writeReference , input ) $F89921 ( writeCount , input ) $F34181 ( byteCount , input ) if ( nonWordDataHandler == null ) { \n\t\tbyte $F76061 = new byte [ byteCount ] ; \n\t\t$F65245 ( input , buffer , byteCount ) int offset = NUM00 ; \n\t\tregisters = new Register [ writeCount ] ; \n\t\tfor ( $F119 ( register , writeCount ) ) { \n\t\t\tregisters [ register ] = new SimpleRegister ( $F149550 ( buffer , offset ) ) ; \n\t\t\toffset += NUM00 ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tnonWordDataHandler . readData ( input , writeReference , writeCount ) ; \n\t\t} \n\t} \n"}, {"code": "private boolean isTouchInsideList ( MotionEvent ev ) { \n\tfloat x = $F42972 ( ev , mListView ) ; \n\tfloat y = $F42973 ( ev , mListView ) ; \n\tif ( x < NUM00 || x > mListView . getWidth ( ) || y < NUM00 || y > mListView . getHeight ( ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static final void centerChildToParent ( final Component parent , final Component child , final boolean bStayOnScreen ) { \n\tint x = ( parent . getX ( ) + ( $F77576 ( parent ) ) ) - ( $F77576 ( child ) ) ; \n\tint y = ( parent . getY ( ) + $F63371 ( parent ) ) - $F63371 ( child ) ; \n\tif ( bStayOnScreen ) { \n\t\tfinal Toolkit tk = Toolkit . getDefaultToolkit ( ) ; \n\t\tfinal Dimension ss = new Dimension ( tk . getScreenSize ( ) ) ; \n\t\tif ( ( x + child . getWidth ( ) ) > ss . getWidth ( ) ) { \n\t\t\tx = ( int ) ( ss . getWidth ( ) - child . getWidth ( ) ) ; \n\t\t\t} \n\t\tif ( ( y + child . getHeight ( ) ) > ss . getHeight ( ) ) { \n\t\t\ty = ( int ) ( ss . getHeight ( ) - child . getHeight ( ) ) ; \n\t\t\t} \n\t\t$F17370 ( x ) $F17370 ( y ) } \n\tchild . setLocation ( x , y ) ; \n\t} \n"}, {"code": "public boolean isConnecting $F72 { \n\treturn start != null && preview != null && preview . isVisible ( ) ; \n\t} \n"}, {"code": "public ProtectedProperties ( Properties props ) { \n\t$F85051 ( propEnum , props ) while $F1444 ( propEnum ) { \n\t\t$F14952 ( propName , propEnum ) $F7601 ( propValue , props , propName ) super . setProperty ( propName , propValue ) ; \n\t\t} \n\tclosed = _BOOL ; \n\t} \n"}, {"code": "$F18907 ( itemList ) "}, {"code": "private static void fixNumericByteOrder $F97 ( bytes ) { \n\tfor ( $F24429 ( i , bytes ) ) { \n\t\tByteUtil . swap4Bytes ( bytes , i ) ; \n\t\t} \n\t} \n"}, {"code": "public synchronized boolean hasScope $F72 $F3387 ( scopeStack ) "}, {"code": "private boolean checkAttributeChanged ( String existing , String current ) { \n\tif ( existing == null && current == null ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( ( existing == null ) ^ ( current == null ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\treturn $F28190 ( existing , current ) ; \n\t} \n"}, {"code": "public boolean isEmpty $F72 { \n\treturn count ( ) == NUM00 ; \n\t} \n"}, {"code": "$F1 public void addTableModelListener ( TableModelListener l ) $F207 ( m_Listeners , l ) "}, {"code": "private static $F52326 pathToURLs ( String path ) throws MalformedURLException { \n\tsynchronized ( pathToURLsCache ) { \n\t\t$F131 v = pathToURLsCache . get ( path ) ; \n\t\tif ( v != null ) { \n\t\t\treturn ( ( $F52326 ) v [ NUM00 ] ) ; \n\t\t\t} \n\t\t} \n\t$F70316 ( st , path ) $F52326 urls = new URL $F49889 ( st ) ; \n\tfor ( int i = NUM00 ; \n\tst . hasMoreTokens ( ) ; \n\ti ++ ) { \n\t\turls [ i ] = new URL $F52332 ( st ) ; \n\t\t} \n\tsynchronized ( pathToURLsCache ) { \n\t\tpathToURLsCache . put ( path , new Object [ ] { \n\t\t\turls , new SoftReference $F4 ( path ) } \n\t\t) ; \n\t\t} \n\treturn urls ; \n\t} \n"}, {"code": "boolean performWork ( TaskManager . Task who , Object param ) throws JobException { \n\tInteger tmp = null ; \n\tsynchronized ( tasks ) { \n\t\ttmp = ( Integer ) tasks . get ( who ) ; \n\t\t} \n\tif ( tmp == null ) throw new UnknownTaskException $F72 ; \n\t$F79839 ( rank , tmp ) synchronized ( attempts ) { \n\t\tattempts [ rank ] ++ ; \n\t\t} \n\tObject result = doWork ( who , param ) ; \n\t$F397 ( result , _BOOL ) try { \n\t\treportDone ( who , result ) ; \n\t\t} \n\tcatch ( UnknownTaskException e ) $F845 catch ( PartialResultException e ) $F845 catch ( JobException e ) $F845 return _BOOL ; \n\t} \n"}, {"code": "public List < Order > loadAllDeepFromCursor ( Cursor cursor ) { \n\t$F23386 ( count , cursor ) List < Order > list = new ArrayList < Order > ( count ) ; \n\t$F23402 ( cursor , identityScope , count , list , loadCurrentDeep , _BOOL ) return list ; \n\t} \n"}, {"code": "public static boolean isValidAuthType ( String authType ) { \n\t$F980 ( log ) if ( authType != null ) { \n\t\tif $F5973 ( authType ) { \n\t\t\tif ( authType . equalsIgnoreCase ( LdapAuthBase . LDAP_AUTH_TYPE_SIMPLE ) ) return _BOOL ; \n\t\t\tif ( authType . equalsIgnoreCase ( LdapAuthBase . LDAP_AUTH_TYPE_NONE ) ) return _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "$F73823 ( lock , this , count ) "}, {"code": "$F234188 ( webClient ) "}, {"code": "public AnnotationMember ( String name , Object val , Class type , Method m ) { \n\tthis ( name , val ) ; \n\tdefiningMethod = m ; \n\tif $F41233 ( type ) { \n\t\telementType = $F58948 ; \n\t\t} \n\telse if $F41255 ( type ) { \n\t\telementType = $F61970 ; \n\t\t} \n\telse if $F94715 ( type ) { \n\t\telementType = $F62127 ; \n\t\t} \n\telse if $F41249 ( type ) { \n\t\telementType = $F58950 ; \n\t\t} \n\telse if $F41243 ( type ) { \n\t\telementType = $F20774 ; \n\t\t} \n\telse if $F41238 ( type ) { \n\t\telementType = $F10063 ; \n\t\t} \n\telse if $F41261 ( type ) { \n\t\telementType = $F94724 ; \n\t\t} \n\telse if $F41267 ( type ) { \n\t\telementType = $F94727 ; \n\t\t} \n\telse { \n\t\telementType = type ; \n\t\t} \n\t} \n"}, {"code": "public void unregisterPreferenceChangeListener ( PreferenceChangeListener preferenceChangeListener ) $F106 ( mListeners , preferenceChangeListener ) "}, {"code": "public static String join ( String separator , $F11654 elements ) { \n\tif $F45555 ( elements ) $F2455 StringBuffer sb = new StringBuffer $F98338 ( elements ) ; \n\tint i = NUM00 ; \n\tfor ( Object elem : elements ) { \n\t\tif ( i ++ > NUM00 ) $F288 ( sb , separator ) $F6407 ( sb , format , elem ) } \n\t$F92 ( sb ) } \n"}, {"code": "public boolean removeTrace ( final Trace trace ) { \n\t$F12396 ( result , traceList , trace ) if ( result ) $F34462 ( remove , trace , revalidate ) return result ; \n\t} \n"}, {"code": "private void updateRandomValues $F72 { \n\tfor ( $F119 ( i , mBlockNumber ) ) { \n\t\tfor ( $F119 ( j , DEFAULT1BER_RANDOM_VALUES ) ) { \n\t\t\tmBlockValues [ i ] [ j ] = mRandom . nextFloat ( ) ; \n\t\t\tif ( mBlockValues [ i ] [ j ] < NUM00 ) $F211213 ( mBlockValues , i , j ) } \n\t\t} \n\t} \n"}, {"code": "protected ASN1Set ( ASN1Encodable obj ) $F6659 ( set , obj ) "}, {"code": "static private String BYTE_Min_Minus $F72 { \n\tlong tempValue = Byte . MIN_VALUE - NUM00 ; \n\t$F33236 ( String , tempValue ) } \n"}, {"code": "public DoubleAccumulator ( DoubleBinaryOperator accumulatorFunction , double identity ) { \n\tthis . function = accumulatorFunction ; \n\tbase = this . identity = Double . doubleToRawLongBits ( identity ) ; \n\t} \n"}, {"code": "$F42402 ( bmp , mat , unPremultiplyAlpha , nBitmapToMat2 ) "}, {"code": "public static void sendMail ( Context mContext , String mailID ) { \n\tUri uri = Uri . parse ( NUM00 + mailID ) ; \n\tIntent intent = new Intent ( Intent . ACTION_SENDTO , uri ) ; \n\tmContext . startActivity ( intent ) ; \n\t} \n"}, {"code": "public void push ( $F1113 StatusNotification notification ) $F31742 ( stack , notification ) "}, {"code": "public void onPaintActions ( ViewTransform transform , Graphics2D g ) { \n\t$F24126 ( mIsSelected ) $F2329 ( mColorSet ) if ( mWidget . getVisibility ( ) == ConstraintWidget . GONE ) $F932 $F24126 ( mShowResizeHandles ) $F24126 ( mShowActions ) $F110977 ( mWidgetActions ) int l = transform . getSwingFX ( mWidget . getDrawX ( ) ) ; \n\tint t = transform . getSwingFY ( mWidget . getDrawY ( ) ) ; \n\tint h = transform . getSwingDimension ( mWidget . getHeight ( ) ) ; \n\tint x = l ; \n\tint y = t + h + ConnectionDraw . CONNECTION_ANCHOR_SIZE + NUM00 ; \n\tg . setColor ( mColorSet . getSelectedFrames ( ) ) ; \n\tfor ( WidgetAction action : mWidgetActions ) { \n\t\t$F92039 ( action ) if ( $F181253 ( action ) ) $F1448 action . onPaint ( transform , g , x , y ) ; \n\t\tx += ACTION_SIZE + ConnectionDraw . CONNECTION_ANCHOR_SIZE ; \n\t\t} \n\t} \n"}, {"code": "$F1 public Lookup createGlobalContext $F72 { \n\tif ( proxyLookup == null ) { \n\t\t$F156357 ( logger ) projectLookup = new AbstractLookup ( content ) ; \n\t\tproxyLookup = new ProxyLookup ( globalContextLookup , projectLookup ) ; \n\t\t} \n\treturn proxyLookup ; \n\t} \n"}, {"code": "public void write $F97 ( bytes ) throws IOException { \n\tflushBits ( ) ; \n\tif $F22195 ( bytes ) { \n\t\tout . write ( bytes ) ; \n\t\tbytesWritten += bytes . length ; \n\t\t} \n\t} \n"}, {"code": "public static MutableList $F4 chunk ( String string , int size ) { \n\tif ( size <= NUM00 ) $F18931 ( size ) $F115 ( length , string ) if ( length == NUM00 ) { \n\t\treturn FastList . newList ( ) ; \n\t\t} \n\tMutableList $F4 result = FastList . newList ( ( length + size - NUM00 ) / size ) ; \n\tint startOffset = NUM00 ; \n\twhile ( startOffset < length ) { \n\t\tresult . add ( string . substring ( startOffset , Math . min ( startOffset + size , length ) ) ) ; \n\t\tstartOffset += size ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public void removeIm ( ImEntity im ) $F106 ( ims , im ) "}, {"code": "public LanguageSetting ( Option opt ) { \n\telem = null ; \n\tname = opt . getLanguage ( ) ; \n\t$F806 suffixArray = opt . getSuffixes ( ) ; \n\t$F280 ( strbuf ) for ( $F1139 ( i , suffixArray ) ) { \n\t\t$F6939 ( strbuf , suffixArray , i ) if ( i != suffixArray . length - NUM00 ) $F84 ( strbuf ) } \n\tthis . suffixes = strbuf . toString ( ) ; \n\tminMatchLen = opt . getMinimumMatchLength ( ) ; \n\tclusterType = opt . getClustertype ( ) ; \n\treadSubdirs = opt . isReadSubdirs ( ) ; \n\tstoreMatches = opt . getStoreMatches ( ) ; \n\t} \n"}, {"code": "private double calcUtil4Performing $F30455 ( typDuration , actualDuration ) { \n\treturn NUM00 * marginalUtilPerformingSec + marginalUtilPerformingSec * typDuration * Math . log ( actualDuration / typDuration ) ; \n\t} \n"}, {"code": "public void clearAllCache $F72 $F9099 ( clearMemoryCache , clearStorageCache ) "}, {"code": "$F1 public $F987 listOptions $F72 { \n\t$F994 ( newVector ) $F9007 ( newVector ) $F9007 ( newVector ) $F1006 ( newVector ) $F1007 ( newVector ) } \n"}, {"code": "public void addNotify $F72 { \n\tsuper . addNotify ( ) ; \n\tif ( textArea != null ) { \n\t\tl . install ( textArea ) ; \n\t\t} \n\tupdateCellWidths ( ) ; \n\tupdateCellHeights ( ) ; \n\t} \n"}, {"code": "@ Description ( summary = NUM00 ) public void mavenInstallLocal $F72 { \n\tjarMVStore ( ) ; \n\tString pom = new String ( readFile ( $F8806 ) ) ; \n\t$F373826 ( pom , replaceAll ) writeFile ( $F8806 , pom . getBytes ( ) ) ; \n\texecScript ( NUM00 , args ( NUM00 , NUM00 , NUM00 + getJarSuffix ( ) , NUM00 , NUM00 , NUM00 , NUM00 ) ) ; \n\tjar ( ) ; \n\tpom = new String ( readFile ( $F8806 ) ) ; \n\t$F373826 ( pom , replaceAll ) writeFile ( $F8806 , pom . getBytes ( ) ) ; \n\texecScript ( NUM00 , args ( NUM00 , NUM00 , NUM00 + getJarSuffix ( ) , NUM00 , NUM00 , NUM00 , NUM00 ) ) ; \n\t} \n"}, {"code": "public static boolean isDtoGetter ( Method method ) { \n\tif ( method . isAnnotationPresent ( DelegateTo . class ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( $F36180 ( method ) > NUM00 ) { \n\t\treturn _BOOL ; \n\t\t} \n\t$F20605 ( methodName , method ) return methodName . startsWith ( NUM00 ) || ( methodName . startsWith ( NUM00 ) && ( ( method . getReturnType ( ) == $F61970 || method . getReturnType ( ) == $F41254 ) ) ) ; \n\t} \n"}, {"code": "protected List < VideoDTO > extractVideosFromCursor ( Cursor cursor , int offset , int limit ) { \n\tList < VideoDTO > $F204 ( videos ) ; \n\tint count = NUM00 ; \n\tint begin = offset > NUM00 ? offset : NUM00 ; \n\tif ( cursor . moveToPosition ( begin ) ) { \n\t\tdo { \n\t\t\tVideoDTO video = extractOneVideoFromCursor ( cursor ) ; \n\t\t\tvideos . add ( video ) ; \n\t\t\tcount ++ ; \n\t\t\tif ( limit > NUM00 && count > limit ) $F5153 } \n\t\twhile $F12260 ( cursor ) ; \n\t\t} \n\t$F59 ( cursor ) return videos ; \n\t} \n"}, {"code": "private static void computeNextCCWEdges ( Node node , long label ) { \n\tDirectedEdgeStar deStar = node . getOutEdges ( ) ; \n\tPolygonizeDirectedEdge firstOutDE = null ; \n\tPolygonizeDirectedEdge prevInDE = null ; \n\tList edges = deStar . getEdges ( ) ; \n\tfor ( $F5373 ( i , edges ) ) { \n\t\tPolygonizeDirectedEdge de = ( PolygonizeDirectedEdge ) edges . get ( i ) ; \n\t\tPolygonizeDirectedEdge sym = ( PolygonizeDirectedEdge ) de . getSym ( ) ; \n\t\tPolygonizeDirectedEdge outDE = null ; \n\t\tif ( de . getLabel ( ) == label ) outDE = de ; \n\t\tPolygonizeDirectedEdge inDE = null ; \n\t\tif ( sym . getLabel ( ) == label ) inDE = sym ; \n\t\tif ( outDE == null && inDE == null ) $F598 $F57733 ( inDE , prevInDE ) if ( outDE != null ) { \n\t\t\tif ( prevInDE != null ) { \n\t\t\t\tprevInDE . setNext ( outDE ) ; \n\t\t\t\tprevInDE = null ; \n\t\t\t\t} \n\t\t\t$F22996 ( firstOutDE , outDE ) } \n\t\t} \n\tif ( prevInDE != null ) { \n\t\tAssert . isTrue ( firstOutDE != null ) ; \n\t\tprevInDE . setNext ( firstOutDE ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public boolean equals ( Object other ) { \n\tif ( other instanceof IntArrayWrapper ) { \n\t\treturn Arrays . equals ( data , ( ( IntArrayWrapper ) other ) . data ) ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static DateTime toDateSimple ( String str , TimeZone timeZone ) throws PageException { \n\tDateTime dt = toDateSimple ( str , CONVERTING_TYPE_OFFSET , _BOOL , timeZone , null ) ; \n\tif ( dt == null ) throw new ExpressionException ( NUM00 + str + NUM00 ) ; \n\treturn dt ; \n\t} \n"}, {"code": "public boolean contains ( Song s ) $F298 ( mSongs , s ) "}, {"code": "$F41720 ( value , absMin , absMax , absValue , Math ) "}, {"code": "private boolean zzRefill $F72 throws $F3258 { \n\t$F113517 ( zzStartRead , zzEndRead , zzFinalHighSurrogate , System , zzBuffer , zzCurrentPos , zzMarkedPos ) $F216365 ( zzCurrentPos , zzBuffer , zzFinalHighSurrogate , System , newBuffer , zzEndRead ) int requested = zzBuffer . length - zzEndRead ; \n\t$F24020 ( numRead , zzReader , zzBuffer , zzEndRead , requested ) if ( numRead == NUM00 ) { \n\t\tthrow new $F3258 $F580 ; \n\t\t} \n\t$F216376 ( numRead , zzEndRead , requested , Character , zzBuffer , zzFinalHighSurrogate , _BOOL ) return _BOOL ; \n\t} \n"}, {"code": "public int addPadding $F5474 ( in , inOff ) { \n\t$F18952 ( code , in , inOff ) while $F18953 ( inOff , in ) { \n\t\tif ( random == null ) $F5629 ( in , inOff ) else { \n\t\t\tin [ inOff ] = ( byte ) random . nextInt ( ) ; \n\t\t\t} \n\t\tinOff ++ ; \n\t\t} \n\tin [ inOff ] = code ; \n\treturn code ; \n\t} \n"}, {"code": "public static Long makeLong ( String s ) { \n\t$F78912 ( WWUtil , s ) try $F62107 ( Long , s ) $F62108 } \n"}, {"code": "private void verifyBlockSnapshotMigration $F72 throws Exception { \n\t$F973 ( log ) Iterator $F106744 blockSnapshotItr = _dbClient . queryIterativeObjects ( $F34885 , blockSnapshotURIs ) ; \n\tList $F30635 blockObjects = new ArrayList $F30635 $F72 ; \n\t$F3536 ( blockSnapshotItr , blockObjects ) verifyBlockObjects ( blockObjects ) ; \n\t} \n"}, {"code": "public static String edgeTypeToString ( @ Type int edgeType ) { \n\tswitch ( edgeType ) { \n\t\tcase FALL_THROUGH_EDGE : $F1278 case IFCMP_EDGE : $F1278 case SWITCH_EDGE : $F1278 case SWITCH_DEFAULT_EDGE : $F1278 case JSR_EDGE : $F1278 case RET_EDGE : $F1278 case GOTO_EDGE : $F1278 case RETURN_EDGE : $F1278 case UNHANDLED_EXCEPTION_EDGE : $F1278 case HANDLED_EXCEPTION_EDGE : $F1278 case START_EDGE : $F1278 case BACKEDGE_TARGET_EDGE : $F1278 case BACKEDGE_SOURCE_EDGE : $F1278 case EXIT_EDGE : $F1278 } \n\t$F1154 ( edgeType ) } \n"}, {"code": "boolean checkGroups ( PhoneNumberUtil util , PhoneNumber number , StringBuilder normalizedCandidate , $F806 expectedNumberGroups ) ; \n"}, {"code": "private int insertUnassignedGroup $F72 throws SQLException { \n\tPreparedStatement groupStatement ; \n\t$F3666 ( ruleid , insertUnassignedRule ) final int evaluationOrder = getNumOfGroups ( ) + NUM00 ; \n\tString unassignedGroupSqlStatement = NUM00 + GROUPS_TABLE + NUM00 + NUM00 + NUM00 ; \n\tunassignedGroupSqlStatement = String . format ( unassignedGroupSqlStatement , UNASSIGNED_GROUP , UNASSIGNED_GROUP_TYPE , UNASSIGNED_DATA_TYPE , ruleid , evaluationOrder ) ; \n\tgroupStatement = prepareStatement ( unassignedGroupSqlStatement , $F21904 ) ; \n\t$F1699 ( groupStatement ) return getInternalId ( groupStatement ) ; \n\t} \n"}, {"code": "public Builder deleteExtensionField ( String urn , String fieldName ) { \n\tdeleteFields . add ( urn + NUM00 + fieldName ) ; \n\treturn this ; \n\t} \n"}, {"code": "public void sendDirect ( $F96 sqlBytes , int offset , int sqlLength , byte commandType ) throws IOException , QueryException { \n\tif ( isClosed ( ) ) $F3575 int seqNo = NUM00 ; \n\tsetCompressSeqNo ( NUM00 ) ; \n\tif ( sqlLength + ( useCompression ? NUM00 : NUM00 ) > getMaxAllowedPacket ( ) ) { \n\t\tthrow new QueryException ( NUM00 + ( sqlLength + ( useCompression ? NUM00 : NUM00 ) ) + NUM00 + maxAllowedPacket + NUM00 , - NUM00 , INTERRUPTED_EXCEPTION ) ; \n\t\t} \n\tif $F931 ( isUseCompression ) { \n\t\tif ( sqlLength + NUM00 <= maxPacketSize ) { \n\t\t\t$F130978 ( packetBuffer , sqlLength ) packetBuffer [ NUM00 ] = ( byte ) ( ( sqlLength + NUM00 ) & NUM00 ) ; \n\t\t\tpacketBuffer [ NUM00 ] = ( byte ) ( ( sqlLength + NUM00 ) > > > NUM00 ) ; \n\t\t\tpacketBuffer [ NUM00 ] = ( byte ) ( ( sqlLength + NUM00 ) > > > NUM00 ) ; \n\t\t\tpacketBuffer [ NUM00 ] = ( byte ) seqNo ++ ; \n\t\t\tpacketBuffer [ NUM00 ] = commandType ; \n\t\t\t$F21535 ( System , sqlBytes , offset , packetBuffer , sqlLength ) if $F8415 ( logger ) { \n\t\t\t\tlogger . trace ( NUM00 + seqNo + NUM00 + ( sqlLength + NUM00 ) + NUM00 + Utils . hexdump ( packetBuffer , maxQuerySizeToLog , NUM00 , sqlLength + NUM00 ) ) ; \n\t\t\t\t} \n\t\t\toutputStream . write ( packetBuffer ) ; \n\t\t\t} \n\t\telse { \n\t\t\t$F130978 ( packetBuffer , maxPacketSize ) $F8048 ( packetBuffer , maxPacketSize ) $F203203 ( packetBuffer , maxPacketSize ) $F203203 ( packetBuffer , maxPacketSize ) packetBuffer [ NUM00 ] = ( byte ) seqNo ++ ; \n\t\t\tpacketBuffer [ NUM00 ] = commandType ; \n\t\t\tSystem . arraycopy ( sqlBytes , offset , packetBuffer , NUM00 , maxPacketSize - NUM00 ) ; \n\t\t\tint lengthAlreadySend = maxPacketSize - NUM00 ; \n\t\t\tif $F8415 ( logger ) { \n\t\t\t\tlogger . trace ( NUM00 + seqNo + NUM00 + maxPacketSize + NUM00 + Utils . hexdump ( packetBuffer , maxQuerySizeToLog , NUM00 , maxPacketSize ) ) ; \n\t\t\t\t} \n\t\t\toutputStream . write ( packetBuffer ) ; \n\t\t\tint length ; \n\t\t\twhile $F84686 ( length , sqlLength , lengthAlreadySend ) { \n\t\t\t\tif ( length > maxPacketSize ) { \n\t\t\t\t\t$F8048 ( packetBuffer , maxPacketSize ) $F203203 ( packetBuffer , maxPacketSize ) $F203203 ( packetBuffer , maxPacketSize ) packetBuffer [ NUM00 ] = ( byte ) seqNo ++ ; \n\t\t\t\t\tSystem . arraycopy ( sqlBytes , offset + lengthAlreadySend , packetBuffer , NUM00 , maxPacketSize ) ; \n\t\t\t\t\tif $F8415 ( logger ) { \n\t\t\t\t\t\tlogger . trace ( NUM00 + seqNo + NUM00 + maxPacketSize + NUM00 + Utils . hexdump ( packetBuffer , maxQuerySizeToLog , NUM00 , maxPacketSize ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\toutputStream . write ( packetBuffer ) ; \n\t\t\t\t\tlengthAlreadySend += maxPacketSize ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\t$F8048 ( packetBuffer , length ) $F203203 ( packetBuffer , length ) $F203203 ( packetBuffer , length ) packetBuffer [ NUM00 ] = ( byte ) seqNo ++ ; \n\t\t\t\t\tSystem . arraycopy ( sqlBytes , offset + lengthAlreadySend , packetBuffer , NUM00 , length ) ; \n\t\t\t\t\tif $F8415 ( logger ) { \n\t\t\t\t\t\tlogger . trace ( NUM00 + seqNo + NUM00 + length + NUM00 + Utils . hexdump ( packetBuffer , maxQuerySizeToLog , NUM00 , length ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\toutputStream . write ( packetBuffer , NUM00 , length + NUM00 ) ; \n\t\t\t\t\t$F597 } \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse { \n\t\tif ( sqlLength < maxPacketSize ) { \n\t\t\t$F130978 ( packetBuffer , sqlLength ) packetBuffer [ NUM00 ] = ( byte ) ( ( sqlLength + NUM00 ) & NUM00 ) ; \n\t\t\tpacketBuffer [ NUM00 ] = ( byte ) ( ( sqlLength + NUM00 ) > > > NUM00 ) ; \n\t\t\tpacketBuffer [ NUM00 ] = ( byte ) ( ( sqlLength + NUM00 ) > > > NUM00 ) ; \n\t\t\t$F65119 ( packetBuffer ) packetBuffer [ NUM00 ] = commandType ; \n\t\t\t$F21535 ( System , sqlBytes , offset , packetBuffer , sqlLength ) compressedAndSend ( sqlLength + NUM00 , packetBuffer , _BOOL ) ; \n\t\t\t} \n\t\telse { \n\t\t\tfinal int expectedPacketSize = sqlLength + NUM00 + NUM00 * ( ( ( sqlLength + NUM00 ) / maxPacketSize ) + NUM00 ) ; \n\t\t\t$F2175 ( packetBuffer , expectedPacketSize ) $F8048 ( packetBuffer , maxPacketSize ) $F203203 ( packetBuffer , maxPacketSize ) $F203203 ( packetBuffer , maxPacketSize ) packetBuffer [ NUM00 ] = ( byte ) seqNo ++ ; \n\t\t\tpacketBuffer [ NUM00 ] = commandType ; \n\t\t\tSystem . arraycopy ( sqlBytes , offset , packetBuffer , NUM00 , maxPacketSize - NUM00 ) ; \n\t\t\tint sqlBytesPosition = maxPacketSize - NUM00 ; \n\t\t\tint positionDest = maxPacketSize + NUM00 ; \n\t\t\tint length ; \n\t\t\twhile $F84686 ( length , sqlLength , sqlBytesPosition ) { \n\t\t\t\tif ( length > maxPacketSize ) { \n\t\t\t\t\t$F189022 ( packetBuffer , positionDest , maxPacketSize ) packetBuffer [ positionDest ++ ] = $F53722 ( maxPacketSize ) ; \n\t\t\t\t\tpacketBuffer [ positionDest ++ ] = $F53722 ( maxPacketSize ) ; \n\t\t\t\t\tpacketBuffer [ positionDest ++ ] = ( byte ) seqNo ++ ; \n\t\t\t\t\tSystem . arraycopy ( sqlBytes , offset + sqlBytesPosition , packetBuffer , positionDest , maxPacketSize ) ; \n\t\t\t\t\tsqlBytesPosition += maxPacketSize ; \n\t\t\t\t\tpositionDest += maxPacketSize ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\t$F189022 ( packetBuffer , positionDest , length ) packetBuffer [ positionDest ++ ] = $F53722 ( length ) ; \n\t\t\t\t\tpacketBuffer [ positionDest ++ ] = $F53722 ( length ) ; \n\t\t\t\t\tpacketBuffer [ positionDest ++ ] = ( byte ) seqNo ++ ; \n\t\t\t\t\tSystem . arraycopy ( sqlBytes , offset + sqlBytesPosition , packetBuffer , positionDest , length ) ; \n\t\t\t\t\t$F597 } \n\t\t\t\t} \n\t\t\tcompressedAndSend ( expectedPacketSize , packetBuffer , _BOOL ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F1431 private List < List < GroupAttribute > > searchAuthProvider ( Filter queryBuilder , $F806 returnAttributes , final long countLimit , AttributesMapper mapper , ValidationFailureReason [ ] failureReason ) throws SizeLimitExceededException { \n\tSearchControls groupSearchControls = new SearchControls ( SearchControls . SUBTREE_SCOPE , countLimit , _searchControls . getTimeLimit ( ) , returnAttributes , _searchControls . getReturningObjFlag ( ) , _searchControls . getDerefLinkFlag ( ) ) ; \n\tList < List < GroupAttribute > > queryGroupResults = null ; \n\tqueryGroupResults = safeLdapSearch ( _baseDN , queryBuilder . encode ( ) , groupSearchControls , mapper , failureReason ) ; \n\treturn queryGroupResults ; \n\t} \n"}, {"code": "protected void export ( OMGraphicList list , $F6689 masterRecord , boolean writeFiles ) { \n\tbadGraphics = NUM00 ; \n\tif ( list == null ) $F932 else if ( list instanceof EsriGraphicList ) { \n\t\texport ( ( EsriGraphicList ) list ) ; \n\t\t$F665 } \n\tint dbfIndex = NUM00 ; \n\tfor ( OMGraphic dtlGraphic : list ) { \n\t\t$F6689 record = masterRecord ; \n\t\tInteger recIndex = ( Integer ) dtlGraphic . getAttribute ( SHAPE_INDEX_ATTRIBUTE ) ; \n\t\t$F13265 ( recIndex , dbfIndex ) $F5178 ( record , getMasterDBFRecord , recIndex ) dbfIndex ++ ; \n\t\tif ( dtlGraphic instanceof OMGraphicList ) { \n\t\t\tif ( DEBUG ) $F22806 ( logger ) export ( ( OMGraphicList ) dtlGraphic , record , _BOOL ) ; \n\t\t\t$F598 } \n\t\tif ( dtlGraphic . getRenderType ( ) != RENDERTYPE_LATLON ) $F118993 ( badGraphics ) if ( dtlGraphic instanceof OMAreaList ) { \n\t\t\t$F22808 ( DEBUG , logger ) addAreaList ( ( OMAreaList ) dtlGraphic , record ) ; \n\t\t\t} \n\t\tif ( dtlGraphic instanceof OMPoly ) { \n\t\t\tOMPoly omPoly = ( OMPoly ) dtlGraphic ; \n\t\t\tif ( isPolygon ( omPoly ) ) { \n\t\t\t\tif ( DEBUG ) $F22806 ( logger ) addPolygon ( dtlGraphic , record ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tif ( DEBUG ) $F22806 ( logger ) addLine ( dtlGraphic , record ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse if ( dtlGraphic instanceof OMRect ) { \n\t\t\tif ( DEBUG ) $F22806 ( logger ) addPolygon ( ( OMGraphic ) EsriPolygonList . convert ( ( OMRect ) dtlGraphic ) , record ) ; \n\t\t\t} \n\t\telse if ( dtlGraphic instanceof OMCircle ) { \n\t\t\tif ( DEBUG ) $F22806 ( logger ) addPolygon ( ( OMGraphic ) EsriPolygonList . convert ( ( OMCircle ) dtlGraphic , projection ) , record ) ; \n\t\t\t} \n\t\telse if ( dtlGraphic instanceof OMRangeRings ) { \n\t\t\tif ( DEBUG ) $F22806 ( logger ) export ( EsriPolygonList . convert ( ( OMRangeRings ) dtlGraphic , projection ) , record , _BOOL ) ; \n\t\t\t} \n\t\telse if ( dtlGraphic instanceof OMLine ) { \n\t\t\tif ( DEBUG ) $F22806 ( logger ) addLine ( ( OMGraphic ) EsriPolylineList . convert ( ( OMLine ) dtlGraphic ) , record ) ; \n\t\t\t} \n\t\telse if ( dtlGraphic instanceof OMPoint ) { \n\t\t\tif ( DEBUG ) $F22806 ( logger ) addPoint ( dtlGraphic , record ) ; \n\t\t\t} \n\t\t} \n\tif ( badGraphics > NUM00 ) { \n\t\tDrawingToolRenderException . notifyUserOfNonLatLonGraphics ( badGraphics ) ; \n\t\t} \n\t$F24126 ( writeFiles ) boolean needConfirmation = _BOOL ; \n\tif ( filePath == null ) { \n\t\tfilePath = getFilePathFromUser ( ) ; \n\t\t$F2329 ( filePath ) needConfirmation = _BOOL ; \n\t\t} \n\tif ( DEBUG ) $F22806 ( logger ) boolean needTypeSuffix = _BOOL ; \n\tif ( polyList != null ) { \n\t\teseInterfaces . add ( new ESEInterface ( polyList , filePath , null ) ) ; \n\t\tneedTypeSuffix = _BOOL ; \n\t\t} \n\tif ( lineList != null ) { \n\t\teseInterfaces . add ( new ESEInterface ( lineList , filePath , ( needTypeSuffix ? LineSuffix : null ) ) ) ; \n\t\tneedTypeSuffix = _BOOL ; \n\t\t} \n\tif ( pointList != null ) { \n\t\teseInterfaces . add ( new ESEInterface ( pointList , filePath , ( needTypeSuffix ? PointSuffix : null ) ) ) ; \n\t\t} \n\tif ( needConfirmation ) $F5795 ( showGUI ) else $F5795 ( writeFiles ) } \n"}, {"code": "public Depend ( PathImpl source , long lastModified , long length ) { \n\t_source = source ; \n\t_lastModified = lastModified ; \n\t_length = length ; \n\t} \n"}, {"code": "public boolean hasTaskOfTypeInProgress ( $F1113 ExternalSystemTaskType type , $F1113 Project project ) { \n\tString projectId = ExternalSystemTaskId . getProjectId ( project ) ; \n\tfor ( ExternalSystemTaskId id : myTasksInProgress . keySet ( ) ) { \n\t\tif ( $F283493 ( type , id ) && projectId . equals ( id . getIdeProjectId ( ) ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public final void removeChangeListener ( ChangeListener listener ) $F106 ( listeners , listener ) "}, {"code": "public static boolean containsIgnoreCase ( String str , String query ) { \n\tif ( str != null && query != null ) { \n\t\tint limit = $F15171 ( str , query ) + NUM00 ; \n\t\tfor ( $F119 ( i , limit ) ) { \n\t\t\t$F24922 ( matchesIgnoreCase , str , query , i , _BOOL ) } \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public String toMatrixString $F72 throws Exception $F148106 ( toMatrixString ) "}, {"code": "public QuadEdge connect ( QuadEdge a , QuadEdge b ) { \n\tQuadEdge q = QuadEdge . connect ( a , b ) ; \n\tquadEdges . add ( q ) ; \n\treturn q ; \n\t} \n"}, {"code": "public Test findTest ( $F3803 suiteNames , String testClassName , String testName , boolean insertIfMissing ) { \n\tif $F119130 ( suiteNames ) { \n\t\tTestCase testCase = getTestCase ( testClassName ) ; \n\t\treturn testCase . findTest ( testName , insertIfMissing ) ; \n\t\t} \n\telse { \n\t\t$F21425 ( rootName , suiteNames ) TestSuite suite = getTestSuite ( rootName ) ; \n\t\treturn suite . findTest ( suiteNames , testClassName , testName , insertIfMissing ) ; \n\t\t} \n\t} \n"}, {"code": "public Job configure ( boolean isSecured , String metaStoreUris , String principal , String redisHost , int redisPort , String password , int redisDb , String inputDatabase , String inputTable , String inputFilter , String keyName , String valueName , String keyPrefix , int numReducer , boolean replace , boolean pipeline , boolean flush , int commitSize , $F806 anonFields , String exportSalt ) throws Exception { \n\tthis . isSecured = isSecured ; \n\tthis . metaStoreUris = metaStoreUris ; \n\tthis . principal = principal ; \n\tthis . redisHost = redisHost ; \n\tthis . redisPort = redisPort ; \n\tthis . password = password ; \n\tthis . redisDb = redisDb ; \n\tthis . inputDatabase = inputDatabase ; \n\tthis . inputTable = inputTable ; \n\tthis . inputFilter = inputFilter ; \n\tthis . keyName = keyName ; \n\tthis . keyPrefix = keyPrefix ; \n\tthis . valueName = valueName ; \n\tthis . numReducer = numReducer ; \n\tthis . replace = replace ; \n\tthis . pipeline = pipeline ; \n\tthis . flush = flush ; \n\tthis . commitSize = commitSize ; \n\t$F256750 ( this , anonFields ) this . exportSalt = exportSalt ; \n\treturn configure ( ) ; \n\t} \n"}, {"code": "public static double log2 ( double a ) { \n\treturn Math . log ( a ) / log2 ; \n\t} \n"}, {"code": "public void addSuggestions ( final $F4170 SuggestionsResult result , final $F4170 String bucket , final $F4170 TokenSource source ) { \n\tQueryToken query = result . getQueryToken ( ) ; \n\tsynchronized ( mLock ) { \n\t\tmResultMap . put ( bucket , result ) ; \n\t\t$F48768 ( waitingForBuckets , mWaitingForResults , query ) if ( waitingForBuckets != null ) { \n\t\t\twaitingForBuckets . remove ( bucket ) ; \n\t\t\tif $F10471 ( waitingForBuckets ) $F106 ( mWaitingForResults , query ) } \n\t\t} \n\tString currentTokenString = source . getCurrentTokenString ( ) ; \n\tsynchronized ( mLock ) { \n\t\t$F725 ( mSuggestions ) List < Suggestible > suggestions = mSuggestionsListBuilder . buildSuggestions ( mResultMap , currentTokenString ) ; \n\t\tif $F3817 ( suggestions ) { \n\t\t\tmSuggestions . addAll ( suggestions ) ; \n\t\t\tmSuggestionsVisibilityManager . displaySuggestions ( _BOOL ) ; \n\t\t\t} \n\t\telse { \n\t\t\thideSuggestionsIfNecessary ( result . getQueryToken ( ) , source ) ; \n\t\t\t} \n\t\t} \n\tnotifyDataSetChanged ( ) ; \n\t} \n"}, {"code": "public static < ET extends Enum < ET > > EnumResolver < ET > constructFor ( Class < ET > enumCls , AnnotationIntrospector ai ) { \n\tET [ ] enumValues = enumCls . getEnumConstants ( ) ; \n\tif ( enumValues == null ) { \n\t\tthrow new IllegalArgumentException $F47919 ( enumCls ) ; \n\t\t} \n\tHashMap < String , ET > map = new HashMap < String , ET > $F72 ; \n\tfor ( ET e : enumValues ) { \n\t\tmap . put ( ai . findEnumValue ( e ) , e ) ; \n\t\t} \n\treturn new EnumResolver < ET > ( enumCls , enumValues , map ) ; \n\t} \n"}, {"code": "protected void encodeLineSuffix ( OutputStream aStream ) throws IOException $F46210 ( pStream ) "}, {"code": "public static boolean replace ( RTextArea textArea , String toFind , String replaceWith , boolean forward , boolean matchCase , boolean wholeWord , boolean regex ) throws PatternSyntaxException { \n\ttextArea . beginAtomicEdit ( ) ; \n\ttry { \n\t\tif ( regex ) $F12218 ( regexReplace , textArea , toFind , replaceWith , forward , matchCase , wholeWord ) makeMarkAndDotEqual ( textArea , forward ) ; \n\t\tif ( find ( textArea , toFind , forward , matchCase , wholeWord , _BOOL ) ) { \n\t\t\ttextArea . replaceSelection ( replaceWith ) ; \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\tfinally { \n\t\ttextArea . endAtomicEdit ( ) ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void preSingleSignOnRequest ( String hostedEntityID , String idpEntityID , String realm , HttpServletRequest request , HttpServletResponse response , AuthnRequest authnRequest ) throws SAML2Exception $F932 "}, {"code": "$F46189 ( task , initExecutorsIfNeed , taskExecutorForCachedImages ) "}, {"code": "public static ImageIcon createIcon ( BasicStroke stroke , int width , int height , boolean horizontalOrientation ) { \n\t$F214300 ( bigImage , width , height , BufferedImage ) $F23475 ( g , bigImage ) g . setBackground ( OMColor . clear ) ; \n\tg . setPaint ( OMColor . clear ) ; \n\t$F23479 ( g , width , height ) g . setPaint ( Color . black ) ; \n\tg . setStroke ( stroke ) ; \n\tif ( horizontalOrientation ) { \n\t\tg . drawLine ( NUM00 , height / NUM00 , width , height / NUM00 ) ; \n\t\t} \n\telse { \n\t\tg . drawLine ( width / NUM00 , NUM00 , width / NUM00 , height ) ; \n\t\t} \n\t$F34728 ( bigImage ) } \n"}, {"code": "public static final < T extends EObject > $F5675 collectNodesWithinSameThisEnvironment ( EObject root , $F20474 cls ) { \n\tfinal $F5675 $F204 ( result ) ; \n\tfinal TreeIterator < EObject > iter = root . eAllContents ( ) ; \n\twhile $F2921 ( iter ) { \n\t\tfinal EObject obj = iter . next ( ) ; \n\t\tif $F178804 ( cls , obj ) { \n\t\t\t$F1431 final T objCasted = ( T ) obj ; \n\t\t\tresult . add ( objCasted ) ; \n\t\t\t} \n\t\tif ( obj instanceof ThisArgProvider ) { \n\t\t\titer . prune ( ) ; \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "protected abstract List < SingleVariableDeclaration > adjustDstParams ( MethodDeclaration method ) ; \n"}, {"code": "public String fullSource $F72 { \n\tif ( fullSource == null ) { \n\t\tfullSource = addSentenceMarkers ( source ( ) ) ; \n\t\t} \n\treturn fullSource ; \n\t} \n"}, {"code": "private void updateDetailData $F72 { \n\tfinal long start = mLeftPosition ; \n\tfinal long end = mRightPosition ; \n\tfinal long now = mCurrentTime ; \n\tfinal Context context = getContext ( ) ; \n\tNetworkStatsHistory . Entry originalEntry = mOriginalNetworkStatsHistory . getValues ( start , end , now , null ) ; \n\tfinal long originalTotalBytes = originalEntry . rxBytes ; \n\tmOriginalTotalPhrase = Formatter . formatFileSize ( context , originalTotalBytes ) ; \n\tNetworkStatsHistory . Entry compressedEntry = mReceivedNetworkStatsHistory . getValues ( start , end , now , null ) ; \n\tfinal long compressedTotalBytes = compressedEntry . rxBytes ; \n\tmReceivedTotalPhrase = Formatter . formatFileSize ( context , compressedTotalBytes ) ; \n\tfloat percentage = NUM00 ; \n\tif ( originalTotalBytes > NUM00 && originalTotalBytes > compressedTotalBytes ) { \n\t\tpercentage = ( originalTotalBytes - compressedTotalBytes ) / ( float ) originalTotalBytes ; \n\t\t} \n\tmPercentReductionPhrase = String . format ( NUM00 , NUM00 * percentage ) ; \n\tmStartDatePhrase = formatDate ( context , start ) ; \n\tmEndDatePhrase = formatDate ( context , end ) ; \n\t} \n"}, {"code": "public PunctuationTrie $F4203 lookup ( CharSequence s ) { \n\tPunctuationTrie $F4203 t = this ; \n\tfor ( $F133333 ( i , n , s ) ) { \n\t\tt = t . lookup ( s . charAt ( i ) ) ; \n\t\tif ( null == t ) $F5153 } \n\treturn t ; \n\t} \n"}, {"code": "private static File constructFilePaths ( String file1 , String file2 ) { \n\tFile newPath ; \n\tif $F7311 ( file2 , file1 ) $F94463 ( newPath , file2 ) else { \n\t\t$F44418 ( newPath , file1 , file2 ) ; \n\t\t} \n\treturn newPath ; \n\t} \n"}, {"code": "public String resolveTemplate ( ITemplateType templateType , $F2540 ( replacements ) ) throws IOException { \n\tPath path = getTemplatePath ( templateType ) ; \n\tString template = new String ( Files . readAllBytes ( path ) , StandardCharsets . UTF_8 ) ; \n\treturn insertProperties ( template , replacements ) ; \n\t} \n"}, {"code": "public void execute $F72 { \n\ttry { \n\t\t$F1699 ( prep ) } \n\t$F44917 ( convert , e ) } \n"}, {"code": "$F3594 ( oredCriteria , orderByClause , distinct , _BOOL ) "}, {"code": "private static $F96 unwrapCalculatedValue $F97 ( data ) { \n\tif ( data . length < CALC_DATA_OFFSET ) { \n\t\treturn data ; \n\t\t} \n\tByteBuffer buffer = PageChannel . wrap ( data ) ; \n\tbuffer . position ( CALC_DATA_LEN_OFFSET ) ; \n\t$F8354 ( dataLen , buffer ) $F96 newData = new byte [ Math . min ( buffer . remaining ( ) , dataLen ) ] ; \n\tbuffer . get ( newData ) ; \n\treturn newData ; \n\t} \n"}, {"code": "public synchronized TypeInstance createInstance ( final String name , final String comment , final BaseType baseType , final Section section , final long sectionOffset ) throws CouldntSaveDataException , CouldntLoadDataException { \n\t$F1832 ( Preconditions , name ) Preconditions . checkArgument ( comment == null || $F1030 ( comment ) , NUM00 ) ; \n\t$F1832 ( Preconditions , baseType ) $F1832 ( Preconditions , section ) $F46507 ( Preconditions , sectionOffset ) Preconditions . checkArgument ( ! instancesByAddress . containsKey ( new TypeInstanceAddress ( section . getStartAddress ( ) , sectionOffset ) ) ) ; \n\tfinal TypeInstance instance = backend . createTypeInstance ( name , comment , baseType , section , sectionOffset ) ; \n\tinstancesByAddress . put ( instance . getAddress ( ) , instance ) ; \n\tinstances . add ( instance ) ; \n\tnotifyInstanceAdded ( instance ) ; \n\treturn instance ; \n\t} \n"}, {"code": "void showInputBox ( String message , Consumer $F4 resultCallback ) $F1861 ( showInputBox , message , resultCallback ) "}, {"code": "public void add ( Field field ) $F207 ( mFields , field ) "}, {"code": "public static long measureTime ( Callable $F1432 c , int threadCnt ) throws Exception { \n\tA . ensure ( threadCnt >= NUM00 , NUM00 ) ; \n\t$F657 ( start , System ) if ( threadCnt == NUM00 ) c . call ( ) ; \n\telse GridTestUtils . runMultiThreaded ( c , threadCnt , NUM00 ) ; \n\treturn System . currentTimeMillis ( ) - start ; \n\t} \n"}, {"code": "$F1 public boolean isClosed $F72 $F1522 ( _isClosed ) "}, {"code": "protected StatementListNode generateDestructorBody ( Context context , StatementListNode statementList ) { \n\tModel model = ( Model ) value ; \n\t$F164120 ( ids ) if ( model . isDeclared ( ) ) $F42096 ( ids , model ) collectDeclarations ( model . getSubInitializerIterator ( ) , ids ) ; \n\tNodeFactory nodeFactory = context . getNodeFactory ( ) ; \n\tStatementListNode result = statementList ; \n\tStatementListNode functionStatementList = null ; \n\tfor ( String id : ids ) { \n\t\tLiteralNullNode literalNull = nodeFactory . literalNull ( ) ; \n\t\tIdentifierNode identifier = nodeFactory . identifier ( id ) ; \n\t\tNode expressionStatement = nodeFactory . assignmentExpression ( identifier , ASSIGN_TOKEN , literalNull ) ; \n\t\tfunctionStatementList = nodeFactory . statementList ( functionStatementList , expressionStatement ) ; \n\t\t} \n\tFunctionSignatureNode functionSignature = nodeFactory . functionSignature ( null , null ) ; \n\tfunctionSignature . void_anno = _BOOL ; \n\tIdentifierNode functionIdentifier = nodeFactory . identifier ( model . getDefinitionName ( ) + NUM00 ) ; \n\tFunctionCommonNode functionCommon = nodeFactory . functionCommon ( context , functionIdentifier , functionSignature , functionStatementList ) ; \n\tfunctionCommon . setUserDefinedBody ( _BOOL ) ; \n\tAttributeListNode attributeList = AbstractSyntaxTreeUtil . generatePrivateAttribute ( nodeFactory ) ; \n\tFunctionNameNode functionName = nodeFactory . functionName ( Tokens . EMPTY_TOKEN , functionIdentifier ) ; \n\tFunctionDefinitionNode functionDefinition = nodeFactory . functionDefinition ( context , attributeList , functionName , functionCommon ) ; \n\tresult = nodeFactory . statementList ( result , functionDefinition ) ; \n\treturn result ; \n\t} \n"}, {"code": "protected synchronized void expire $F72 throws IllegalMonitorStateException { \n\tif ( owner == Thread . currentThread ( ) ) { \n\t\texpired = _BOOL ; \n\t\t} \n\telse { \n\t\tthrow new IllegalMonitorStateException $F580 ; \n\t\t} \n\t} \n"}, {"code": "private StringBuffer prepareOptimizedInsertStatement ( OneRowChange oneRowChange ) { \n\tStringBuffer stmt ; \n\t$F7398 ( stmt ) $F84 ( stmt ) stmt . append ( conn . getDatabaseObjectName ( oneRowChange . getSchemaName ( ) ) + NUM00 + conn . getDatabaseObjectName ( oneRowChange . getTableName ( ) ) ) ; \n\t$F84 ( stmt ) printColumnSpec ( stmt , oneRowChange . getColumnSpec ( ) , null , null , PrintMode . NAMES_ONLY , NUM00 ) ; \n\t$F84 ( stmt ) boolean firstRow = _BOOL ; \n\tfor ( ArrayList < ColumnVal > oneRowValues : oneRowChange . getColumnValues ( ) ) { \n\t\tif ( firstRow ) { \n\t\t\tfirstRow = _BOOL ; \n\t\t\t} \n\t\telse $F84 ( stmt ) printColumnSpec ( stmt , oneRowChange . getColumnSpec ( ) , null , oneRowValues , PrintMode . PLACE_HOLDER , NUM00 ) ; \n\t\t$F84 ( stmt ) } \n\treturn stmt ; \n\t} \n"}, {"code": "private boolean extractorQueueEmpty $F72 throws InterruptedException { \n\tif ( extractor . hasMoreEvents ( ) ) return _BOOL ; \n\telse if ( blockCommitIntervalMillis <= NUM00 ) return _BOOL ; \n\telse { \n\t\tlong nextCommitMillis = lastCommitMillis + blockCommitIntervalMillis ; \n\t\tlong sleepMillis = nextCommitMillis - System . currentTimeMillis ( ) ; \n\t\twhile ( sleepMillis > NUM00 ) { \n\t\t\t$F9470 ( Thread ) if ( extractor . hasMoreEvents ( ) ) return _BOOL ; \n\t\t\tsleepMillis = nextCommitMillis - System . currentTimeMillis ( ) ; \n\t\t\t} \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "$F98526 ( cr , dump , pw , verify ) "}, {"code": "public FileAsyncHttpResponseHandler ( Context context ) { \n\tsuper ( ) ; \n\tthis . file = getTemporaryFile ( context ) ; \n\tthis . append = _BOOL ; \n\tthis . renameIfExists = _BOOL ; \n\t} \n"}, {"code": "public static boolean isWindowOpaque ( Window window ) { \n\t$F896 ( window ) return window . isOpaque ( ) ; \n\t} \n"}, {"code": "public static $F96 encode $F24576 ( data , off , length ) { \n\tint len = ( length + NUM00 ) / NUM00 * NUM00 ; \n\t$F39018 ( bOut , len ) $F39025 ( encoder , data , off , length , bOut , e ) $F11316 ( bOut ) } \n"}, {"code": "public double entropyNMIMin $F72 { \n\treturn ( entropyMutualInformation ( ) / Math . min ( entropyFirst ( ) , entropySecond ( ) ) ) ; \n\t} \n"}, {"code": "public static void unregister ( CloseWatcher w ) { \n\tw . closeable = null ; \n\trefs . remove ( w ) ; \n\t} \n"}, {"code": "$F120210 ( maximumPullScroll , getMaximumPullScroll , pLeft , getPaddingLeft , pTop , getPaddingTop , pRight , getPaddingRight , pBottom , getPaddingBottom , getPullToRefreshScrollDirection , HORIZONTAL , mMode , mHeaderLayout , mFooterLayout , VERTICAL , DEBUG , Log , LOG_TAG , String , setPadding ) "}, {"code": "$F96285 ( labels , map , clones , i ) "}, {"code": "$F1 public JettySolrRunner createJetty ( File solrHome , String dataDir , String shardList , String solrConfigOverride , String schemaOverride ) throws Exception $F16525 ( createProxiedJetty , solrHome , dataDir , shardList , solrConfigOverride , schemaOverride ) "}, {"code": "public synchronized void addBatchClassifierListener ( BatchClassifierListener cl ) $F6659 ( m_batchClassifierListeners , cl ) "}, {"code": "private boolean matchAndwriteOneAuditLog ( BufferedWriter writer , AuditLog auditlog , String keyword ) throws MarshallingExcetion { \n\ttry { \n\t\tAuditLogUtils . resetDesc ( auditlog , resb ) ; \n\t\tif ( AuditLogUtils . isKeywordContained ( auditlog , keyword ) ) { \n\t\t\tif ( _count . getAndIncrement ( ) > NUM00 ) { \n\t\t\t\twhile $F972 ( _firstWritten ) { \n\t\t\t\t\ttry $F31130 ( Thread ) catch ( InterruptedException e ) $F10911 ( _logger ) } \n\t\t\t\twriter . write ( NUM00 + _mapper . writeValueAsString ( auditlog ) ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\twriter . write ( _mapper . writeValueAsString ( auditlog ) ) ; \n\t\t\t\t_firstWritten . set ( _BOOL ) ; \n\t\t\t\t} \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t_logger . debug ( NUM00 , auditlog . getDescription ( ) , keyword ) ; \n\t\treturn _BOOL ; \n\t\t} \n\tcatch ( JsonGenerationException e ) { \n\t\tthrow new MarshallingExcetion ( NUM00 , e ) ; \n\t\t} \n\tcatch ( JsonMappingException e ) { \n\t\tthrow new MarshallingExcetion ( NUM00 , e ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\tthrow new MarshallingExcetion ( NUM00 , e ) ; \n\t\t} \n\t} \n"}, {"code": "String toString ( boolean includePrivateCredentials ) { \n\t$F21024 ( s , ResourcesMgr ) String suffix = NUM00 ; \n\tsynchronized ( principals ) { \n\t\tIterator $F35948 pI = principals . iterator ( ) ; \n\t\twhile $F2921 ( pI ) { \n\t\t\tPrincipal p = pI . next ( ) ; \n\t\t\tsuffix = suffix + ResourcesMgr . getString ( NUM00 ) + p . toString ( ) + ResourcesMgr . getString ( NUM00 ) ; \n\t\t\t} \n\t\t} \n\tsynchronized ( pubCredentials ) { \n\t\t$F91960 pI = pubCredentials . iterator ( ) ; \n\t\twhile $F2921 ( pI ) { \n\t\t\t$F8877 ( o , pI ) suffix = suffix + ResourcesMgr . getString ( NUM00 ) + o . toString ( ) + ResourcesMgr . getString ( NUM00 ) ; \n\t\t\t} \n\t\t} \n\tif ( includePrivateCredentials ) { \n\t\tsynchronized ( privCredentials ) { \n\t\t\t$F91960 pI = privCredentials . iterator ( ) ; \n\t\t\twhile $F2921 ( pI ) { \n\t\t\t\ttry { \n\t\t\t\t\t$F8877 ( o , pI ) suffix += ResourcesMgr . getString ( NUM00 ) + o . toString ( ) + ResourcesMgr . getString ( NUM00 ) ; \n\t\t\t\t\t} \n\t\t\t\tcatch ( SecurityException se ) { \n\t\t\t\t\tsuffix += ResourcesMgr . getString ( NUM00 ) ; \n\t\t\t\t\t$F597 } \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn s + suffix ; \n\t} \n"}, {"code": "private void decodeTonesPhase ( int chNum , boolean bandHasTones [ ] ) { \n\tWavesData dst [ ] = ctx . channels [ chNum ] . tonesInfo ; \n\tfor ( int sb = NUM00 ; \n\tsb < ctx . wavesInfo . numToneBands ; \n\tsb ++ ) { \n\t\tif ( ! bandHasTones [ sb ] ) $F1448 int wparam = dst [ sb ] . startIndex ; \n\t\tfor ( int i = NUM00 ; \n\t\ti < dst [ sb ] . numWavs ; \n\t\ti ++ ) { \n\t\t\tctx . wavesInfo . waves [ wparam + i ] . phaseIndex = br . read ( NUM00 ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public int encode $F56810 ( data , off , length , out ) throws IOException { \n\tfor ( $F147626 ( i , off , length ) ) { \n\t\tint v = data [ i ] & NUM00 ; \n\t\tout . write ( encodingTable [ $F14870 ( v ) ] ) ; \n\t\t$F56823 ( out , encodingTable , v ) } \n\treturn length * NUM00 ; \n\t} \n"}, {"code": "public void clear $F72 { \n\t$F101536 ( mLock , mGraphics ) postInvalidate ( ) ; \n\t} \n"}, {"code": "public static String removeAll $F8306 ( str , patterns ) { \n\tfor ( String pattern : patterns ) str = str . replace ( pattern , NUM00 ) ; \n\treturn str ; \n\t} \n"}, {"code": "public void addSeriesRenderer ( SimpleSeriesRenderer renderer ) $F207 ( mRenderers , renderer ) "}, {"code": "public static void ccDrawCircle ( GL10 gl , CGPoint center , float r , float a , int segments , boolean drawLineToCenter ) { \n\tFloatBuffer vertices = getVertices ( NUM00 * ( segments + NUM00 ) ) ; \n\tint additionalSegment = NUM00 ; \n\tif ( drawLineToCenter ) additionalSegment ++ ; \n\tfinal float coef = NUM00 * ( float ) Math . PI / segments ; \n\tfor ( $F9993 ( i , segments ) ) { \n\t\tfloat rads = i * coef ; \n\t\tfloat j = ( float ) ( r * Math . cos ( rads + a ) + center . x ) ; \n\t\tfloat k = ( float ) ( r * Math . sin ( rads + a ) + center . y ) ; \n\t\tvertices . put ( j ) ; \n\t\tvertices . put ( k ) ; \n\t\t} \n\tvertices . put ( center . x ) ; \n\tvertices . put ( center . y ) ; \n\t$F16709 ( vertices ) gl . glDisable ( GL_TEXTURE_2D ) ; \n\tgl . glDisableClientState ( GL_TEXTURE_COORD_ARRAY ) ; \n\tgl . glDisableClientState ( GL_COLOR_ARRAY ) ; \n\t$F126369 ( gl , GL_FLOAT , vertices ) gl . glDrawArrays ( GL_LINE_STRIP , NUM00 , segments + additionalSegment ) ; \n\tgl . glEnableClientState ( GL_COLOR_ARRAY ) ; \n\tgl . glEnableClientState ( GL_TEXTURE_COORD_ARRAY ) ; \n\tgl . glEnable ( GL_TEXTURE_2D ) ; \n\t} \n"}, {"code": "$F1 public $F987 listOptions $F72 { \n\t$F20795 ( newVector ) $F1000 ( newVector ) $F9010 ( newVector , Collections , super ) $F1007 ( newVector ) } \n"}, {"code": "$F1 public boolean isParent ( File folder , File file ) { \n\treturn folder . equals ( file . getParentFile ( ) ) ; \n\t} \n"}, {"code": "$F1 public void print ( char c ) throws IOException { \n\tboolean isWS = Character . isWhitespace ( c ) ; \n\tif ( isWS ) { \n\t\t$F5453 ( isFirstChar ) $F16699 ( c , CHAR_RETURN ) if $F4012 ( sb ) { \n\t\t\tprintBuffer ( ) ; \n\t\t\tlastChar = ( c == CHAR_NL ) ? CHAR_NL : c ; \n\t\t\tsuper . print ( lastChar ) ; \n\t\t\t$F665 } \n\t\t} \n\tisFirstChar = _BOOL ; \n\tif ( c == CHAR_GT && $F20 ( sb ) ) printBuffer ( ) ; \n\tif ( isWS || ! addToBuffer ( c ) ) { \n\t\tif ( depthSum == NUM00 ) { \n\t\t\tif ( isWS ) { \n\t\t\t\t$F16699 ( lastChar , CHAR_NL ) if ( c != CHAR_NL ) { \n\t\t\t\t\tif $F104645 ( Character , lastChar ) $F665 } \n\t\t\t\t} \n\t\t\t} \n\t\tlastChar = c ; \n\t\tsuper . print ( c ) ; \n\t\t} \n\t} \n"}, {"code": "public static TokenEndpointAuthMethod fromString ( String type ) { \n\tif ( type != null ) { \n\t\tfor ( $F40424 ( authMethod , TokenEndpointAuthMethod ) ) { \n\t\t\tif ( $F206388 ( type , authMethod ) ) { \n\t\t\t\treturn authMethod ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F1274 } \n"}, {"code": "public void put ( E e ) throws InterruptedException { \n\t$F61745 ( e ) int c = - NUM00 ; \n\t$F677 ( putLock , this ) $F201031 ( count , this ) $F678 ( putLock ) try { \n\t\twhile ( count . get ( ) >= capacity ) $F24081 ( notFull ) enqueue ( e ) ; \n\t\t$F201038 ( c , count ) $F201039 ( c , capacity , notFull ) } \n\t$F796 ( putLock ) $F42886 ( c , signalNotEmpty ) } \n"}, {"code": "private boolean compare ( $F3803 remoteModules , $F3803 expectedModules ) { \n\tCollections . sort ( remoteModules ) ; \n\tCollections . sort ( expectedModules ) ; \n\t$F1964 ( remoteModules , expectedModules ) } \n"}, {"code": "private void encodeSize ( ByteBuffer headerBuffer , int size ) { \n\theaderBuffer . put ( $F125631 ( size ) ) ; \n\theaderBuffer . put ( $F125631 ( size ) ) ; \n\t$F42832 ( headerBuffer , size ) logger . fine ( NUM00 + size + NUM00 + Integer . toBinaryString ( size ) + NUM00 + Integer . toHexString ( size ) ) ; \n\t} \n"}, {"code": "protected $F16501 diff_bisect $F9179 ( text1 , text2 , deadline ) { \n\t$F1749 ( text1_length , text1 ) $F1749 ( text2_length , text2 ) int max_d = ( text1_length + text2_length + NUM00 ) / NUM00 ; \n\tint v_offset = max_d ; \n\tint v_length = NUM00 * max_d ; \n\t$F4120 ( v1 , v_length ) $F4120 ( v2 , v_length ) for ( $F119 ( x , v_length ) ) { \n\t\tv1 [ x ] = - NUM00 ; \n\t\tv2 [ x ] = - NUM00 ; \n\t\t} \n\tv1 [ v_offset + NUM00 ] = NUM00 ; \n\tv2 [ v_offset + NUM00 ] = NUM00 ; \n\tint delta = text1_length - text2_length ; \n\tboolean front = ( delta % NUM00 != NUM00 ) ; \n\tint k1start = NUM00 ; \n\tint k1end = NUM00 ; \n\tint k2start = NUM00 ; \n\tint k2end = NUM00 ; \n\tfor ( $F119 ( d , max_d ) ) { \n\t\tif $F16508 ( System , deadline ) $F5153 for ( $F16510 ( k1 , d , k1start , k1end ) ) { \n\t\t\tint k1_offset = v_offset + k1 ; \n\t\t\tint x1 ; \n\t\t\t$F16518 ( k1 , d , v1 , k1_offset , x1 ) int y1 = x1 - k1 ; \n\t\t\twhile ( x1 < text1_length && y1 < text2_length && $F16519 ( text1 , x1 , text2 , y1 ) ) $F1097 ( x1 , y1 ) v1 [ k1_offset ] = x1 ; \n\t\t\tif ( x1 > text1_length ) { \n\t\t\t\tk1end += NUM00 ; \n\t\t\t\t} \n\t\t\telse if ( y1 > text2_length ) { \n\t\t\t\tk1start += NUM00 ; \n\t\t\t\t} \n\t\t\telse if ( front ) { \n\t\t\t\tint k2_offset = v_offset + delta - k1 ; \n\t\t\t\tif $F16524 ( k2_offset , v_length , v2 ) { \n\t\t\t\t\tint x2 = text1_length - v2 [ k2_offset ] ; \n\t\t\t\t\t$F16526 ( x1 , x2 , diff_bisectSplit , text1 , text2 , y1 , deadline ) } \n\t\t\t\t} \n\t\t\t} \n\t\tfor ( $F16510 ( k2 , d , k2start , k2end ) ) { \n\t\t\tint k2_offset = v_offset + k2 ; \n\t\t\tint x2 ; \n\t\t\t$F16518 ( k2 , d , v2 , k2_offset , x2 ) int y2 = x2 - k2 ; \n\t\t\twhile ( x2 < text1_length && y2 < text2_length && text1 . charAt ( text1_length - x2 - NUM00 ) == text2 . charAt ( text2_length - y2 - NUM00 ) ) $F1097 ( x2 , y2 ) v2 [ k2_offset ] = x2 ; \n\t\t\tif ( x2 > text1_length ) { \n\t\t\t\tk2end += NUM00 ; \n\t\t\t\t} \n\t\t\telse if ( y2 > text2_length ) { \n\t\t\t\tk2start += NUM00 ; \n\t\t\t\t} \n\t\t\telse if ( ! front ) { \n\t\t\t\tint k1_offset = v_offset + delta - k2 ; \n\t\t\t\tif $F16524 ( k1_offset , v_length , v1 ) { \n\t\t\t\t\tint x1 = v1 [ k1_offset ] ; \n\t\t\t\t\tint y1 = v_offset + x1 - k1_offset ; \n\t\t\t\t\tx2 = text1_length - x2 ; \n\t\t\t\t\t$F16526 ( x1 , x2 , diff_bisectSplit , text1 , text2 , y1 , deadline ) } \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F16553 ( diffs ) $F16557 ( diffs , Operation , text1 ) $F16561 ( diffs , Operation , text2 ) return diffs ; \n\t} \n"}, {"code": "public boolean thisIsYou ( Object n ) $F23588 ( id , n ) "}, {"code": "private int syncContactNames ( Context context ) { \n\tfinal ContentResolver contentResolver = context . getContentResolver ( ) ; \n\tfinal Cursor cursor = contentResolver . query ( ContactNotifications . CONTENT_URI , null , null , null , null ) ; \n\t$F1084 ( cursor ) if $F22360 ( cursor ) $F1083 int count = NUM00 ; \n\tint updatedCount = NUM00 ; \n\tString id ; \n\tString contactName ; \n\tString contactLookup ; \n\tString contactId ; \n\twhile $F12260 ( cursor ) { \n\t\tcount ++ ; \n\t\tid = cursor . getString ( cursor . getColumnIndexOrThrow ( ContactNotifications . _ID ) ) ; \n\t\tcontactName = cursor . getString ( cursor . getColumnIndexOrThrow ( ContactNotifications . CONTACT_NAME ) ) ; \n\t\tcontactId = cursor . getString ( cursor . getColumnIndexOrThrow ( ContactNotifications . CONTACT_ID ) ) ; \n\t\tcontactLookup = cursor . getString ( cursor . getColumnIndexOrThrow ( ContactNotifications . CONTACT_LOOKUPKEY ) ) ; \n\t\tContactIdentification contactInfo = SmsPopupUtils . getPersonNameByLookup ( context , contactLookup , contactId ) ; \n\t\tif ( contactInfo != null ) { \n\t\t\tboolean runUpdate = _BOOL ; \n\t\t\t$F20904 ( vals ) if ( contactName == null || $F45203 ( contactName , contactInfo ) ) { \n\t\t\t\tvals . put ( ContactNotifications . CONTACT_NAME , contactInfo . contactName ) ; \n\t\t\t\trunUpdate = _BOOL ; \n\t\t\t\t} \n\t\t\tif ( contactId == null || $F45203 ( contactId , contactInfo ) ) { \n\t\t\t\tvals . put ( ContactNotifications . CONTACT_ID , contactInfo . contactId ) ; \n\t\t\t\trunUpdate = _BOOL ; \n\t\t\t\t} \n\t\t\tif ( contactLookup == null || $F45203 ( contactLookup , contactInfo ) ) { \n\t\t\t\tvals . put ( ContactNotifications . CONTACT_LOOKUPKEY , contactInfo . contactLookup ) ; \n\t\t\t\trunUpdate = _BOOL ; \n\t\t\t\t} \n\t\t\tif ( runUpdate && NUM00 == contentResolver . update ( ContactNotifications . buildContactUri ( id ) , vals , null , null ) ) { \n\t\t\t\tupdatedCount ++ ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F2727 ( cursor ) if ( BuildConfig . DEBUG ) Log . v ( NUM00 + updatedCount + NUM00 + count ) ; \n\treturn updatedCount ; \n\t} \n"}, {"code": "$F66632 ( files , mRootDirectory , file , mEntries , mTotalSize , VolleyLog ) "}, {"code": "$F1 protected void deviceFrameRect ( int x , int y , int width , int height , Color color ) { \n\tAffineTransform deviceTransform = getTransform ( ) ; \n\t$F20997 ( transformType , deviceTransform ) boolean usePath = ( ( transformType & ( AffineTransform . TYPE_GENERAL_ROTATION | AffineTransform . TYPE_GENERAL_TRANSFORM ) ) != NUM00 ) ; \n\tif ( usePath ) { \n\t\tdraw ( new $F186398 ( x , y , width , height ) ) ; \n\t\t$F665 } \n\tStroke stroke = getStroke ( ) ; \n\tif ( stroke instanceof BasicStroke ) { \n\t\tBasicStroke lineStroke = ( BasicStroke ) stroke ; \n\t\tint endCap = lineStroke . getEndCap ( ) ; \n\t\tint lineJoin = lineStroke . getLineJoin ( ) ; \n\t\tif ( ( endCap == BasicStroke . CAP_SQUARE ) && ( lineJoin == BasicStroke . JOIN_MITER ) && ( lineStroke . getMiterLimit ( ) == NUM00 ) ) { \n\t\t\tfloat lineWidth = lineStroke . getLineWidth ( ) ; \n\t\t\t$F13616 penSize = new $F13616 ( lineWidth , lineWidth ) ; \n\t\t\tdeviceTransform . deltaTransform ( penSize , penSize ) ; \n\t\t\tfloat deviceLineWidth = Math . min ( $F67900 ( Math , penSize ) , Math . abs ( penSize . y ) ) ; \n\t\t\t$F13616 ul_pos = $F181599 ( x , y ) ; \n\t\t\t$F166803 ( deviceTransform , ul_pos ) $F13616 lr_pos = new $F13616 ( x + width , y + height ) ; \n\t\t\t$F166803 ( deviceTransform , lr_pos ) float w = ( float ) $F205392 ( lr_pos , ul_pos ) ; \n\t\t\tfloat h = ( float ) $F205394 ( lr_pos , ul_pos ) ; \n\t\t\tWPrinterJob wPrinterJob = ( WPrinterJob ) getPrinterJob ( ) ; \n\t\t\tif ( wPrinterJob . selectStylePen ( endCap , lineJoin , deviceLineWidth , color ) == _BOOL ) { \n\t\t\t\twPrinterJob . frameRect ( $F10740 ( ul_pos ) , $F10783 ( ul_pos ) , w , h ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tdouble lowerRes = Math . min ( wPrinterJob . getXRes ( ) , wPrinterJob . getYRes ( ) ) ; \n\t\t\t\tif ( ( deviceLineWidth / lowerRes ) < MAX_THINLINE_INCHES ) { \n\t\t\t\t\twPrinterJob . selectPen ( deviceLineWidth , color ) ; \n\t\t\t\t\twPrinterJob . frameRect ( $F10740 ( ul_pos ) , $F10783 ( ul_pos ) , w , h ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tdraw ( new $F186398 ( x , y , width , height ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tdraw ( new $F186398 ( x , y , width , height ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void resetWorkspace $F72 { \n\tmBlockFactory . clearPriorBlockReferences ( ) ; \n\t$F725 ( mRootBlocks ) $F725 ( mStats ) $F725 ( mDeletedBlocks ) } \n"}, {"code": "private void parseElement ( Element element ) throws SAML2Exception { \n\t$F4377 ( assertionFactory , AssertionFactory ) $F4377 ( protoFactory , ProtocolFactory ) requestId = element . getAttribute ( SAML2Constants . ID ) ; \n\tvalidateID ( requestId ) ; \n\tversion = element . getAttribute ( SAML2Constants . VERSION ) ; \n\tvalidateVersion ( version ) ; \n\tString issueInstantStr = element . getAttribute ( SAML2Constants . ISSUE_INSTANT ) ; \n\tvalidateIssueInstant ( issueInstantStr ) ; \n\tdestinationURI = element . getAttribute ( SAML2Constants . DESTINATION ) ; \n\tconsent = element . getAttribute ( SAML2Constants . CONSENT ) ; \n\tString notOnOrAfterStr = element . getAttribute ( SAML2Constants . NOTONORAFTER ) ; \n\tvalidateNotOnOrAfterStr ( notOnOrAfterStr ) ; \n\treason = element . getAttribute ( SAML2Constants . REASON ) ; \n\tString sessionIndexStr = null ; \n\t$F9040 ( nList , element ) if ( ( nList != null ) && ( $F72501 ( nList ) ) ) { \n\t\tfor ( $F85554 ( i , nList ) ) { \n\t\t\t$F61359 ( childNode , nList , i ) $F40269 ( cName , childNode ) if ( cName != null ) { \n\t\t\t\tif ( cName . equals ( SAML2Constants . ISSUER ) ) { \n\t\t\t\t\tnameID = assertionFactory . createIssuer ( ( Element ) childNode ) ; \n\t\t\t\t\t} \n\t\t\t\telse if ( cName . equals ( SAML2Constants . SIGNATURE ) ) { \n\t\t\t\t\tsignatureString = XMLUtils . print ( ( Element ) childNode ) ; \n\t\t\t\t\tisSigned = _BOOL ; \n\t\t\t\t\t} \n\t\t\t\telse if ( cName . equals ( SAML2Constants . EXTENSIONS ) ) { \n\t\t\t\t\textensions = protoFactory . createExtensions ( ( Element ) childNode ) ; \n\t\t\t\t\t} \n\t\t\t\telse if ( cName . equals ( SAML2Constants . BASEID ) ) { \n\t\t\t\t\tbaseId = assertionFactory . createBaseID ( ( Element ) childNode ) ; \n\t\t\t\t\t} \n\t\t\t\telse if ( cName . equals ( SAML2Constants . NAMEID ) ) { \n\t\t\t\t\tnameId = assertionFactory . createNameID ( ( Element ) childNode ) ; \n\t\t\t\t\t} \n\t\t\t\telse if ( cName . equals ( SAML2Constants . ENCRYPTEDID ) ) { \n\t\t\t\t\tencryptedId = assertionFactory . createEncryptedID ( ( Element ) childNode ) ; \n\t\t\t\t\t} \n\t\t\t\telse if ( cName . equals ( SAML2Constants . SESSION_INDEX ) ) { \n\t\t\t\t\tif $F10122 ( sessionIndexList ) $F13242 ( sessionIndexList ) sessionIndexStr = XMLUtils . getElementString ( ( Element ) childNode ) ; \n\t\t\t\t\tsessionIndexList . add ( sessionIndexStr ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tvalidateBaseIDorNameIDorEncryptedID ( ) ; \n\t\tif $F13709 ( sessionIndexList ) { \n\t\t\t$F5939 ( sessionIndexList , Collections ) } \n\t\t} \n\t} \n"}, {"code": "protected void onComplete $F72 $F845 "}, {"code": "public static BigDecimal paidToDate ( int p_C_Invoice_ID , int p_C_Currency_ID , int p_MultiplierAP , Timestamp DateAcct ) throws SQLException { \n\tif ( p_C_Invoice_ID == NUM00 || p_C_Currency_ID == NUM00 ) $F1274 BigDecimal MultiplierAP = new BigDecimal $F51635 ( p_MultiplierAP ) ; \n\tif ( p_MultiplierAP == NUM00 ) MultiplierAP = Adempiere . ONE ; \n\tint C_ConversionType_ID = NUM00 ; \n\tBigDecimal paymentAmt = allocatedAmtToDate ( p_C_Invoice_ID , p_C_Currency_ID , C_ConversionType_ID , MultiplierAP , DateAcct ) ; \n\treturn Currency . round ( paymentAmt , p_C_Currency_ID , null ) ; \n\t} \n"}, {"code": "private $F2027 toIntArray $F72 { \n\tint length = encoding . length ; \n\t$F11844 ( result ) int which = NUM00 ; \n\tint fromPos = NUM00 ; \n\tfor ( $F119 ( i , length ) ) { \n\t\tif ( ( encoding [ i ] & NUM00 ) == NUM00 ) { \n\t\t\tif ( i - fromPos + NUM00 > NUM00 ) { \n\t\t\t\tBigInteger big = new BigInteger ( pack ( encoding , fromPos , i - fromPos + NUM00 , NUM00 , NUM00 ) ) ; \n\t\t\t\tif ( fromPos == NUM00 ) { \n\t\t\t\t\tresult [ which ++ ] = NUM00 ; \n\t\t\t\t\tBigInteger second = big . subtract ( BigInteger . valueOf ( NUM00 ) ) ; \n\t\t\t\t\tif ( second . compareTo ( BigInteger . valueOf ( Integer . MAX_VALUE ) ) == NUM00 ) $F1337 else { \n\t\t\t\t\t\tresult [ which ++ ] = second . intValue ( ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tif ( big . compareTo ( BigInteger . valueOf ( Integer . MAX_VALUE ) ) == NUM00 ) $F1337 else { \n\t\t\t\t\t\tresult [ which ++ ] = big . intValue ( ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tint retval = NUM00 ; \n\t\t\t\tfor ( int j = fromPos ; \n\t\t\t\tj <= i ; \n\t\t\t\tj ++ ) { \n\t\t\t\t\tretval <<= NUM00 ; \n\t\t\t\t\tbyte tmp = encoding [ j ] ; \n\t\t\t\t\tretval |= ( tmp & NUM00 ) ; \n\t\t\t\t\t} \n\t\t\t\tif ( fromPos == NUM00 ) { \n\t\t\t\t\tif ( retval < NUM00 ) { \n\t\t\t\t\t\tresult [ which ++ ] = retval / NUM00 ; \n\t\t\t\t\t\tresult [ which ++ ] = retval % NUM00 ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse { \n\t\t\t\t\t\tresult [ which ++ ] = NUM00 ; \n\t\t\t\t\t\tresult [ which ++ ] = retval - NUM00 ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\telse $F52339 ( result , which , retval ) } \n\t\t\tfromPos = i + NUM00 ; \n\t\t\t} \n\t\tif ( which >= result . length ) { \n\t\t\tresult = Arrays . copyOf ( result , which + NUM00 ) ; \n\t\t\t} \n\t\t} \n\treturn Arrays . copyOf ( result , which ) ; \n\t} \n"}, {"code": "public static List $F349233 windows ( InputStream words , TokenizerFactory tokenizerFactory , int windowSize ) { \n\tTokenizer tokenizer = tokenizerFactory . create ( words ) ; \n\t$F24645 ( list ) $F226965 ( tokenizer , list ) if $F2979 ( list ) $F4638 return windows ( list , windowSize ) ; \n\t} \n"}, {"code": "public static $F1986 pageRank ( MatrixInterface preparedMatrix , int maxIteration ) { \n\t$F1986 init = new double [ preparedMatrix . getRowsCount ( ) ] ; \n\tfor ( $F15868 ( i , init ) ) init [ i ] = NUM00 ; \n\treturn pageRank ( preparedMatrix , maxIteration , DEFAULT_D , init ) ; \n\t} \n"}, {"code": "public boolean hasMIMEType ( String mimeType ) { \n\t$F397 ( mimeType , _BOOL ) String type = mimeType ; \n\tif $F56559 ( mimeType ) { \n\t\ttype = $F31599 ( mimeType ) ; \n\t\t} \n\tfor ( String mt : this . mimeTypes ) { \n\t\t$F72433 ( mt , mimeType , _BOOL ) if ( mimeType != type && mt . equalsIgnoreCase ( type ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "$F23145 ( measureSpec , result , specMode , MeasureSpec , specSize , mRadius , getPaddingTop , getPaddingBottom , Math ) "}, {"code": "private void readObject $F154558 ( s ) throws $F169650 { \n\t$F6428 ( s ) key = key . clone ( ) ; \n\t} \n"}, {"code": "void unexecuteNSDecls ( TransformerImpl transformer ) throws TransformerException $F11707 ( unexecuteNSDecls , transformer ) "}, {"code": "public boolean add ( ProtocolMessage pm ) $F31974 ( protocolMessages , pm ) "}, {"code": "public void randomInit $F72 { \n\tdo { \n\t\tm_bits = new boolean [ m_nNodes * m_nNodes ] ; \n\t\tfor ( $F119 ( i , m_nNodes ) ) { \n\t\t\tint iPos ; \n\t\t\tdo { \n\t\t\t\tiPos = m_random . nextInt ( m_nNodes * m_nNodes ) ; \n\t\t\t\t} \n\t\t\twhile ( isSquare ( iPos ) ) ; \n\t\t\tm_bits [ iPos ] = _BOOL ; \n\t\t\t} \n\t\t} \n\twhile ( hasCycles ( ) ) ; \n\tcalcGlobalScore ( ) ; \n\t} \n"}, {"code": "public static int safeParseInt ( String s ) { \n\treturn safeParseInt ( s , - NUM00 ) ; \n\t} \n"}, {"code": "protected boolean hasReceiversFor ( DistributedMember endPoint ) { \n\tsynchronized ( this . receivers ) { \n\t\tfor ( $F2774 ( it , receivers ) ) { \n\t\t\tConnection con = ( Connection ) it . next ( ) ; \n\t\t\tif ( endPoint . equals ( con . getRemoteAddress ( ) ) ) { \n\t\t\t\treturn _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "protected void decodeBitmapData ( final GifFrame frame , $F96 dstPixels ) { \n\tif ( frame != null ) { \n\t\trawData . position ( frame . bufferFrameStart ) ; \n\t\t} \n\tfinal int nullCode = - NUM00 ; \n\tfinal int npix = ( frame == null ) ? width * height : frame . iw * frame . ih ; \n\tint available , clear , code_mask , code_size , end_of_information , in_code , old_code , bits , code , count , i , datum , data_size , first , top , bi , pi ; \n\tif $F28203 ( dstPixels , npix ) $F75474 ( dstPixels , npix ) if ( prefix == null ) { \n\t\t$F69027 ( prefix , MAX_STACK_SIZE ) } \n\tif ( suffix == null ) $F75474 ( suffix , MAX_STACK_SIZE ) if ( pixelStack == null ) { \n\t\t$F83281 ( pixelStack , MAX_STACK_SIZE ) ; \n\t\t} \n\tdata_size = read ( ) ; \n\tclear = NUM00 < < data_size ; \n\tend_of_information = clear + NUM00 ; \n\tavailable = clear + NUM00 ; \n\told_code = nullCode ; \n\tcode_size = data_size + NUM00 ; \n\t$F143890 ( code_mask , code_size ) ; \n\tfor ( code = NUM00 ; \n\tcode < clear ; \n\tcode ++ ) { \n\t\tprefix [ code ] = NUM00 ; \n\t\t$F78924 ( suffix , code ) } \n\tdatum = bits = count = first = top = pi = bi = NUM00 ; \n\tfor ( i = NUM00 ; \n\ti < npix ; \n\t) { \n\t\tif ( top == NUM00 ) { \n\t\t\tif ( bits < code_size ) { \n\t\t\t\tif ( count == NUM00 ) { \n\t\t\t\t\tcount = readBlock ( ) ; \n\t\t\t\t\t$F65649 ( count ) bi = NUM00 ; \n\t\t\t\t\t} \n\t\t\t\tdatum += ( ( block [ bi ] ) & NUM00 ) < < bits ; \n\t\t\t\tbits += NUM00 ; \n\t\t\t\tbi ++ ; \n\t\t\t\tcount -- ; \n\t\t\t\t$F598 } \n\t\t\tcode = datum & code_mask ; \n\t\t\tdatum >>= code_size ; \n\t\t\tbits -= code_size ; \n\t\t\tif ( ( code > available ) || ( code == end_of_information ) ) $F5153 if ( code == clear ) { \n\t\t\t\tcode_size = data_size + NUM00 ; \n\t\t\t\t$F143890 ( code_mask , code_size ) ; \n\t\t\t\tavailable = clear + NUM00 ; \n\t\t\t\told_code = nullCode ; \n\t\t\t\t$F598 } \n\t\t\tif ( old_code == nullCode ) { \n\t\t\t\tpixelStack [ top ++ ] = suffix [ code ] ; \n\t\t\t\told_code = code ; \n\t\t\t\tfirst = code ; \n\t\t\t\t$F598 } \n\t\t\tin_code = code ; \n\t\t\tif ( code == available ) { \n\t\t\t\t$F11740 ( pixelStack , top , first ) code = old_code ; \n\t\t\t\t} \n\t\t\twhile ( code > clear ) { \n\t\t\t\tpixelStack [ top ++ ] = suffix [ code ] ; \n\t\t\t\tcode = prefix [ code ] ; \n\t\t\t\t} \n\t\t\tfirst = ( suffix [ code ] ) & NUM00 ; \n\t\t\t$F66497 ( available , MAX_STACK_SIZE ) $F11740 ( pixelStack , top , first ) prefix [ available ] = ( short ) old_code ; \n\t\t\t$F8214 ( suffix , available , first ) available ++ ; \n\t\t\tif ( $F84469 ( available , code_mask ) && ( available < MAX_STACK_SIZE ) ) { \n\t\t\t\tcode_size ++ ; \n\t\t\t\tcode_mask += available ; \n\t\t\t\t} \n\t\t\told_code = in_code ; \n\t\t\t} \n\t\ttop -- ; \n\t\tdstPixels [ pi ++ ] = pixelStack [ top ] ; \n\t\ti ++ ; \n\t\t} \n\tfor ( i = pi ; \n\ti < npix ; \n\ti ++ ) $F5629 ( dstPixels , i ) } \n"}, {"code": "public void addRangeRestriction ( String ColumnName , Object Code , Object Code_to , String InfoName , String InfoDisplay , String InfoDisplay_to ) { \n\tRestriction r = new Restriction ( ColumnName , Code , Code_to , InfoName , InfoDisplay , InfoDisplay_to , _BOOL , NUM00 ) ; \n\tm_list . add ( r ) ; \n\t} \n"}, {"code": "$F1431 E transfer ( E e , boolean timed , long nanos ) { \n\tQNode s = null ; \n\tboolean isData = ( e != null ) ; \n\tfor ( $F589 ) { \n\t\tQNode t = tail ; \n\t\tQNode h = head ; \n\t\tif ( t == null || h == null ) $F598 if ( h == t || t . isData == isData ) { \n\t\t\tQNode tn = t . next ; \n\t\t\tif ( t != tail ) $F598 if ( tn != null ) $F171537 ( advanceTail , t , tn ) if ( timed && nanos <= NUM00 ) $F1274 if ( s == null ) s = new QNode ( e , isData ) ; \n\t\t\tif ( ! t . casNext ( null , s ) ) $F598 advanceTail ( t , s ) ; \n\t\t\tObject x = awaitFulfill ( s , e , timed , nanos ) ; \n\t\t\tif ( x == s ) { \n\t\t\t\tclean ( t , s ) ; \n\t\t\t\t$F1274 } \n\t\t\tif ( ! s . isOffList ( ) ) { \n\t\t\t\tadvanceHead ( t , s ) ; \n\t\t\t\tif ( x != null ) s . item = s ; \n\t\t\t\ts . waiter = null ; \n\t\t\t\t} \n\t\t\treturn ( x != null ) ? ( E ) x : e ; \n\t\t\t} \n\t\telse { \n\t\t\tQNode m = h . next ; \n\t\t\tif ( t != tail || m == null || h != head ) $F598 Object x = m . item ; \n\t\t\tif ( isData == ( x != null ) || x == m || ! m . casItem ( x , e ) ) $F171537 ( advanceHead , h , m ) advanceHead ( h , m ) ; \n\t\t\t$F139937 ( LockSupport , m ) return ( x != null ) ? ( E ) x : e ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "protected void indexPoints ( InputStream is , long ptr , OutputStream os ) { \n\tboolean moreRecords = _BOOL ; \n\tbyte rHdr [ ] = new byte [ SHAPE_RECORD_HEADER_LENGTH ] ; \n\tbyte outBuf [ ] = new byte [ SPATIAL_INDEX_RECORD_LENGTH ] ; \n\tint result ; \n\tint nRecords = NUM00 ; \n\tint recLengthWords , recLengthBytes ; \n\tlong recOffset ; \n\tint shapeType ; \n\tint recBufSize = NUM00 ; \n\tbyte recBuf [ ] = new byte [ recBufSize ] ; \n\tdouble x = NUM00 ; \n\tdouble y = NUM00 ; \n\ttry { \n\t\twhile ( moreRecords ) { \n\t\t\t$F61539 ( result , is , rHdr , SHAPE_RECORD_HEADER_LENGTH ) if ( result < NUM00 ) { \n\t\t\t\tmoreRecords = _BOOL ; \n\t\t\t\tif $F6456 ( logger , Level ) { \n\t\t\t\t\t$F29117 ( logger , nRecords ) $F35577 ( logger , recBufSize ) } \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tnRecords ++ ; \n\t\t\t\trecOffset = ptr ; \n\t\t\t\treadBEInt ( rHdr , NUM00 ) ; \n\t\t\t\trecLengthWords = readBEInt ( rHdr , NUM00 ) ; \n\t\t\t\trecLengthBytes = recLengthWords * NUM00 ; \n\t\t\t\tif ( recLengthBytes > recBufSize ) { \n\t\t\t\t\t$F35579 ( logger , Level , recLengthBytes ) recBufSize = recLengthBytes ; \n\t\t\t\t\t$F1325 ( recBuf , recBufSize ) } \n\t\t\t\t$F61539 ( result , is , recBuf , recLengthBytes ) shapeType = readLEInt ( recBuf , NUM00 ) ; \n\t\t\t\tif ( shapeType != SHAPE_TYPE_NULL ) { \n\t\t\t\t\tx = readLEDouble ( recBuf , NUM00 ) ; \n\t\t\t\t\ty = readLEDouble ( recBuf , NUM00 ) ; \n\t\t\t\t\t} \n\t\t\t\tptr += recLengthBytes + NUM00 ; \n\t\t\t\twriteBEInt ( outBuf , NUM00 , $F55075 ( recOffset ) ) ; \n\t\t\t\twriteBEInt ( outBuf , NUM00 , recLengthWords ) ; \n\t\t\t\twriteLEDouble ( outBuf , NUM00 , x ) ; \n\t\t\t\twriteLEDouble ( outBuf , NUM00 , y ) ; \n\t\t\t\twriteLEDouble ( outBuf , NUM00 , x ) ; \n\t\t\t\twriteLEDouble ( outBuf , NUM00 , y ) ; \n\t\t\t\t$F11584 ( os , outBuf , SPATIAL_INDEX_RECORD_LENGTH ) } \n\t\t\t} \n\t\t} \n\t$F61572 ( e ) finally { \n\t\ttry $F881 ( is ) $F42485 } \n\t} \n"}, {"code": "public static String unsignedToString ( final int value ) { \n\tif ( value >= NUM00 ) $F23210 ( Integer , value ) else { \n\t\treturn Long . toString ( value & NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F11300 findAll ( File baseFile , String regex ) { \n\t$F14386 $F14389 ( found ) ; \n\tfindAll ( baseFile , regex , found ) ; \n\treturn found ; \n\t} \n"}, {"code": "public void appendCSSDefinition ( StringBuilder buf ) { \n\t$F84 ( buf ) buf . append ( name ) ; \n\t$F84 ( buf ) for ( $F7329 pair : statements ) { \n\t\tbuf . append ( pair . getFirst ( ) ) ; \n\t\t$F84 ( buf ) buf . append ( pair . getSecond ( ) ) ; \n\t\t$F84 ( buf ) } \n\t$F84 ( buf ) } \n"}, {"code": "$F1 public boolean eIsSet ( int featureID ) { \n\tswitch ( featureID ) { \n\t\tcase DatatypePackage . CONSTRAINT__TYPE : return type != TYPE_EDEFAULT ; \n\t\tcase DatatypePackage . CONSTRAINT__CONSTRAINT_VALUES : $F6439 ( CONSTRAINT_VALUES_EDEFAULT , constraintValues ) } \n\t$F6444 ( super , featureID ) } \n"}, {"code": "protected Object cloneObject ( Object obj ) { \n\t$F1338 ( obj ) if ( obj instanceof String || obj instanceof Boolean || obj instanceof Byte || obj instanceof Short || obj instanceof Character || obj instanceof Integer || obj instanceof Long || obj instanceof Float || obj instanceof Double ) { \n\t\treturn obj ; \n\t\t} \n\tif $F2456 ( obj ) { \n\t\t$F114166 ( body , obj ) $F82619 ( data , body ) $F7057 ( System , body , data ) return data ; \n\t\t} \n\treturn SerializationHelper . deepClone ( obj ) ; \n\t} \n"}, {"code": "private void assertWriteVarint $F31474 ( data , value ) throws Exception { \n\tif ( $F14870 ( value ) == NUM00 ) { \n\t\t$F1538 ( rawOutput ) $F2237 ( output , CodedOutputStream , rawOutput ) output . writeRawVarint32 ( ( int ) value ) ; \n\t\t$F1206 ( output ) $F31476 ( assertEqualBytes , data , rawOutput ) assertEquals ( data . length , CodedOutputStream . computeRawVarint32Size ( ( int ) value ) ) ; \n\t\t} \n\t{ \n\t\t$F1538 ( rawOutput ) $F2237 ( output , CodedOutputStream , rawOutput ) output . writeRawVarint64 ( value ) ; \n\t\t$F1206 ( output ) $F31476 ( assertEqualBytes , data , rawOutput ) assertEquals ( data . length , CodedOutputStream . computeRawVarint64Size ( value ) ) ; \n\t\t} \n\tfor ( $F31477 ( blockSize ) ) { \n\t\tif ( $F14870 ( value ) == NUM00 ) { \n\t\t\t$F1538 ( rawOutput ) CodedOutputStream output = CodedOutputStream . newInstance ( rawOutput , blockSize ) ; \n\t\t\toutput . writeRawVarint32 ( ( int ) value ) ; \n\t\t\t$F1206 ( output ) $F31476 ( assertEqualBytes , data , rawOutput ) } \n\t\t{ \n\t\t\t$F1538 ( rawOutput ) CodedOutputStream output = CodedOutputStream . newInstance ( rawOutput , blockSize ) ; \n\t\t\toutput . writeRawVarint64 ( value ) ; \n\t\t\t$F1206 ( output ) $F31476 ( assertEqualBytes , data , rawOutput ) } \n\t\t} \n\t} \n"}, {"code": "public void attach ( ActionObserver observer ) { \n\tobserver . makeOneTimeUse ( ) ; \n\t$F790 ( lock ) try $F207 ( onceUsedObservers , observer ) $F796 ( lock ) } \n"}, {"code": "private void signCertificateChain $F72 { \n\tList $F65938 $F204 ( cc ) ; \n\tcc . add ( signCert ) ; \n\tList $F65938 $F10252 ( oc , certs ) ; \n\tfor ( $F3836 ( k , oc ) ) { \n\t\tif ( $F115302 ( signCert , oc , k ) ) { \n\t\t\toc . remove ( k ) ; \n\t\t\t-- k ; \n\t\t\t} \n\t\t} \n\tboolean found = _BOOL ; \n\twhile ( found ) { \n\t\tX509Certificate v = ( X509Certificate ) $F7661 ( cc ) ; \n\t\tfound = _BOOL ; \n\t\tfor ( $F3836 ( k , oc ) ) { \n\t\t\tX509Certificate issuer = ( X509Certificate ) oc . get ( k ) ; \n\t\t\ttry { \n\t\t\t\tv . verify ( issuer . getPublicKey ( ) , provider ) ; \n\t\t\t\tfound = _BOOL ; \n\t\t\t\t$F18208 ( cc , oc , k ) oc . remove ( k ) ; \n\t\t\t\t$F597 } \n\t\t\t$F63878 } \n\t\t} \n\tsignCerts = cc ; \n\t} \n"}, {"code": "public static String meterToString ( OFInstructionMeter inst , Logger log ) { \n\treturn Long . toString ( inst . getMeterId ( ) ) ; \n\t} \n"}, {"code": "public String charset $F72 $F8587 ( parameter , HEADER_CONTENT_TYPE , PARAM_CHARSET ) "}, {"code": "public Dimension minimumLayoutSize ( Container parent ) { \n\tDimension rd , mbd ; \n\tInsets i = getInsets ( ) ; \n\tif ( contentPane != null ) { \n\t\trd = contentPane . getMinimumSize ( ) ; \n\t\t} \n\telse { \n\t\trd = parent . getSize ( ) ; \n\t\t} \n\tif $F293975 ( menuBar ) { \n\t\tmbd = menuBar . getMinimumSize ( ) ; \n\t\t} \n\telse $F293977 ( mbd ) return new Dimension ( $F241074 ( Math , rd , mbd ) + i . left + i . right , rd . height + mbd . height + i . top + i . bottom ) ; \n\t} \n"}, {"code": "$F1 public void add ( int location , E object ) { \n\tinsertElementAt ( object , location ) ; \n\t} \n"}, {"code": "public static boolean checkIfCanUse ( String className ) { \n\tif ( MockList . shouldBeMocked ( className ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tfor ( String s : classExceptions ) $F72107 ( className , s , _BOOL ) return _BOOL ; \n\t} \n"}, {"code": "private static void applyOverrides $F72 { \n\tInputStream stream = getContentTypesPropertiesStream ( ) ; \n\t$F2329 ( stream ) try { \n\t\ttry { \n\t\t\t$F2697 ( overrides ) overrides . load ( stream ) ; \n\t\t\tfor ( $F261788 ( entry , overrides ) ) { \n\t\t\t\tString $F167509 ( extension , entry ) ; \n\t\t\t\t$F189249 ( mimeType , entry ) add ( mimeType , extension ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F3229 ( stream ) } \n\t$F20287 } \n"}, {"code": "$F1 public void run $F72 { \n\tamIActive = _BOOL ; \n\tString inputHeader = null ; \n\tString outputHeader = null ; \n\tint row , col ; \n\tfloat progress = NUM00 ; \n\tdouble maxPatchValue = NUM00 ; \n\tint x , y ; \n\tboolean blnFoundNeighbour ; \n\tboolean blnIncludeDiagNeighbour = _BOOL ; \n\tboolean blnTreatZerosAsBackground = _BOOL ; \n\tint i ; \n\t$F51364 ( args , showFeedback ) for ( $F6929 ( i , args ) ) { \n\t\tif ( i == NUM00 ) { \n\t\t\tinputHeader = args [ i ] ; \n\t\t\t} \n\t\telse if ( i == NUM00 ) { \n\t\t\toutputHeader = args [ i ] ; \n\t\t\t} \n\t\telse if ( i == NUM00 ) { \n\t\t\tblnIncludeDiagNeighbour = Boolean . parseBoolean ( args [ i ] ) ; \n\t\t\tif ( ! blnIncludeDiagNeighbour ) { \n\t\t\t\tdX = new int [ ] $F294877 ; \n\t\t\t\tdY = new int [ ] { \n\t\t\t\t\t- NUM00 , NUM00 , NUM00 , NUM00 } \n\t\t\t\t; \n\t\t\t\t} \n\t\t\t} \n\t\telse if ( i == NUM00 ) { \n\t\t\tblnTreatZerosAsBackground = Boolean . parseBoolean ( args [ i ] ) ; \n\t\t\t} \n\t\t} \n\tif $F54923 ( inputHeader , outputHeader ) $F3602 ( showFeedback ) try { \n\t\tnumScanCells = dY . length ; \n\t\t$F90048 ( image , inputHeader ) int rows = image . getNumberRows ( ) ; \n\t\tint cols = image . getNumberColumns ( ) ; \n\t\t$F51458 ( noData , image ) double initialValue = - NUM00 ; \n\t\toutput = new WhiteboxRaster ( outputHeader , NUM00 , inputHeader , WhiteboxRaster . DataType . FLOAT , initialValue ) ; \n\t\toutput . setDataScale ( WhiteboxRaster . DataScale . CATEGORICAL ) ; \n\t\toutput . setPreferredPalette ( NUM00 ) ; \n\t\tif ( blnTreatZerosAsBackground ) { \n\t\t\tfor ( row = NUM00 ; \n\t\t\trow < rows ; \n\t\t\trow ++ ) { \n\t\t\t\tfor ( col = NUM00 ; \n\t\t\t\tcol < cols ; \n\t\t\t\tcol ++ ) { \n\t\t\t\t\tif ( image . getValue ( row , col ) == NUM00 ) { \n\t\t\t\t\t\toutput . setValue ( row , col , NUM00 ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F51521 ( cancelOp , cancelOperation ) $F90104 ( progress , row , rows ) updateProgress ( ( int ) progress ) ; \n\t\t\t\t} \n\t\t\tif ( output . getValue ( NUM00 , NUM00 ) == - NUM00 ) { \n\t\t\t\toutput . setValue ( $F25460 ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\toutput . setValue ( $F25460 ) ; \n\t\t\t} \n\t\tdouble patchValue = NUM00 ; \n\t\tdouble neighbourPatchValue = NUM00 ; \n\t\tdouble newPatchValue = NUM00 ; \n\t\tdouble imageValue = NUM00 ; \n\t\tint loopNum = NUM00 ; \n\t\tupdateProgress ( NUM00 + loopNum + NUM00 , NUM00 ) ; \n\t\tfor ( row = NUM00 ; \n\t\trow < rows ; \n\t\trow ++ ) { \n\t\t\tfor ( col = NUM00 ; \n\t\t\tcol < cols ; \n\t\t\tcol ++ ) { \n\t\t\t\timageValue = image . getValue ( row , col ) ; \n\t\t\t\tif ( imageValue != noData ) { \n\t\t\t\t\tpatchValue = output . getValue ( row , col ) ; \n\t\t\t\t\tif ( patchValue == initialValue ) { \n\t\t\t\t\t\tblnFoundNeighbour = _BOOL ; \n\t\t\t\t\t\tfor ( i = NUM00 ; \n\t\t\t\t\t\ti < numScanCells ; \n\t\t\t\t\t\ti ++ ) { \n\t\t\t\t\t\t\tx = col + dX [ i ] ; \n\t\t\t\t\t\t\ty = row + dY [ i ] ; \n\t\t\t\t\t\t\tneighbourPatchValue = output . getValue ( y , x ) ; \n\t\t\t\t\t\t\tif ( neighbourPatchValue != initialValue && image . getValue ( y , x ) == imageValue ) { \n\t\t\t\t\t\t\t\toutput . setValue ( row , col , neighbourPatchValue ) ; \n\t\t\t\t\t\t\t\tnewPatchValue = neighbourPatchValue ; \n\t\t\t\t\t\t\t\tblnFoundNeighbour = _BOOL ; \n\t\t\t\t\t\t\t\t$F597 } \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\tif ( ! blnFoundNeighbour ) { \n\t\t\t\t\t\t\tmaxPatchValue ++ ; \n\t\t\t\t\t\t\tnewPatchValue = maxPatchValue ; \n\t\t\t\t\t\t\toutput . setValue ( row , col , newPatchValue ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\tdepth = NUM00 ; \n\t\t\t\t\t\tScanConnectedCells ( row , col , imageValue , initialValue , newPatchValue ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\toutput . setValue ( row , col , noData ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F51521 ( cancelOp , cancelOperation ) $F90104 ( progress , row , rows ) updateProgress ( ( int ) progress ) ; \n\t\t\t} \n\t\tboolean somethingDone ; \n\t\t$F1986 reclass = new double [ ( int ) maxPatchValue + NUM00 ] ; \n\t\tdo { \n\t\t\tloopNum ++ ; \n\t\t\tupdateProgress ( NUM00 + loopNum + NUM00 , NUM00 ) ; \n\t\t\tsomethingDone = _BOOL ; \n\t\t\tfor ( row = NUM00 ; \n\t\t\trow < rows ; \n\t\t\trow ++ ) { \n\t\t\t\tfor ( col = NUM00 ; \n\t\t\t\tcol < cols ; \n\t\t\t\tcol ++ ) { \n\t\t\t\t\timageValue = image . getValue ( row , col ) ; \n\t\t\t\t\tif ( imageValue != noData ) { \n\t\t\t\t\t\tpatchValue = output . getValue ( row , col ) ; \n\t\t\t\t\t\tfor ( i = NUM00 ; \n\t\t\t\t\t\ti < numScanCells ; \n\t\t\t\t\t\ti ++ ) { \n\t\t\t\t\t\t\tx = col + dX [ i ] ; \n\t\t\t\t\t\t\ty = row + dY [ i ] ; \n\t\t\t\t\t\t\tneighbourPatchValue = output . getValue ( y , x ) ; \n\t\t\t\t\t\t\tif ( neighbourPatchValue != patchValue && image . getValue ( y , x ) == imageValue ) { \n\t\t\t\t\t\t\t\tsomethingDone = _BOOL ; \n\t\t\t\t\t\t\t\tif ( patchValue < neighbourPatchValue ) { \n\t\t\t\t\t\t\t\t\treclass [ ( int ) neighbourPatchValue ] = - NUM00 ; \n\t\t\t\t\t\t\t\t\toutput . setValue ( y , x , patchValue ) ; \n\t\t\t\t\t\t\t\t\tScanConnectedCells ( y , x , imageValue , neighbourPatchValue , patchValue ) ; \n\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\telse { \n\t\t\t\t\t\t\t\t\treclass [ ( int ) patchValue ] = - NUM00 ; \n\t\t\t\t\t\t\t\t\toutput . setValue ( row , col , neighbourPatchValue ) ; \n\t\t\t\t\t\t\t\t\tScanConnectedCells ( row , col , imageValue , patchValue , neighbourPatchValue ) ; \n\t\t\t\t\t\t\t\t\tpatchValue = neighbourPatchValue ; \n\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F51521 ( cancelOp , cancelOperation ) $F90104 ( progress , row , rows ) updateProgress ( ( int ) progress ) ; \n\t\t\t\t} \n\t\t\t} \n\t\twhile ( somethingDone ) ; \n\t\ti = NUM00 ; \n\t\tfor ( $F10229 ( a , maxPatchValue ) ) { \n\t\t\tif ( reclass [ a ] != - NUM00 ) { \n\t\t\t\treclass [ a ] = i ; \n\t\t\t\ti ++ ; \n\t\t\t\t} \n\t\t\t} \n\t\tloopNum ++ ; \n\t\tupdateProgress ( NUM00 + loopNum + NUM00 , NUM00 ) ; \n\t\tfor ( row = NUM00 ; \n\t\trow < rows ; \n\t\trow ++ ) { \n\t\t\tfor ( col = NUM00 ; \n\t\t\tcol < cols ; \n\t\t\tcol ++ ) { \n\t\t\t\tpatchValue = output . getValue ( row , col ) ; \n\t\t\t\tif ( patchValue != noData ) { \n\t\t\t\t\toutput . setValue ( row , col , reclass [ ( int ) patchValue ] ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F51521 ( cancelOp , cancelOperation ) $F90104 ( progress , row , rows ) updateProgress ( ( int ) progress ) ; \n\t\t\t} \n\t\t$F90114 ( output , getDescriptiveName ) $F90117 ( output ) $F59 ( image ) $F59 ( output ) returnData ( outputHeader ) ; \n\t\t} \n\t$F90121 ( myHost ) $F90125 ( myHost , getDescriptiveName , e ) $F51536 ( updateProgress , amIActive , _BOOL , myHost ) } \n"}, {"code": "public static int readAll ( InputStream i , byte $F1310 ) throws IOException { \n\tint len = b . length ; \n\tint n = NUM00 ; \n\twhile ( n < len ) { \n\t\t$F230162 ( count , i , b , n , len ) $F7879 ( count , n ) n += count ; \n\t\t} \n\treturn n ; \n\t} \n"}, {"code": "public void switchToSimple ( Experiment exp ) { \n\tif ( exp == null ) { \n\t\texp = m_advancedPanel . getExperiment ( ) ; \n\t\t} \n\tif ( exp != null && ! m_simplePanel . setExperiment ( exp ) ) { \n\t\tm_AdvancedSetupRBut . setSelected ( _BOOL ) ; \n\t\tswitchToAdvanced ( exp ) ; \n\t\t} \n\telse { \n\t\tremove ( m_advancedPanel ) ; \n\t\tm_advancedPanel . removeNotesFrame ( ) ; \n\t\tadd ( m_simplePanel , BorderLayout . CENTER ) ; \n\t\tvalidate ( ) ; \n\t\trepaint ( ) ; \n\t\t} \n\t} \n"}, {"code": "public static CacheSpan createCacheEntry ( File file ) { \n\tMatcher matcher = $F53827 ( CACHE_FILE_PATTERN_V2 , file ) ; \n\tif $F1152 ( matcher ) $F1337 String key = Util . unescapeFileName ( matcher . group ( NUM00 ) ) ; \n\treturn key == null ? null : createCacheEntry ( key , $F53832 ( Long , matcher ) , $F53832 ( Long , matcher ) , file ) ; \n\t} \n"}, {"code": "public boolean isComponentPartOfCurrentMenu ( Component c ) { \n\tif $F3817 ( selection ) { \n\t\tMenuElement me = selection . elementAt ( NUM00 ) ; \n\t\treturn isComponentPartOfCurrentMenu ( me , c ) ; \n\t\t} \n\telse return _BOOL ; \n\t} \n"}, {"code": "public static int hsba $F9302 ( h , s , b , a ) { \n\treturn setAlpha ( Color . HSBtoRGB ( h , s , b ) , ( int ) ( a * NUM00 + NUM00 ) & NUM00 ) ; \n\t} \n"}, {"code": "LambdaFormBuffer replaceFunctions ( NamedFunction [ ] oldFns , NamedFunction [ ] newFns , Object ... forArguments ) { \n\tassert ( inTrans ( ) ) ; \n\t$F41350 ( oldFns , this ) for ( int i = arity ; \n\ti < length ; \n\ti ++ ) { \n\t\tName n = names [ i ] ; \n\t\tint nfi = indexOf ( n . function , oldFns ) ; \n\t\tif ( nfi >= NUM00 && Arrays . equals ( n . arguments , forArguments ) ) { \n\t\t\tchangeName ( i , new Name ( newFns [ nfi ] , n . arguments ) ) ; \n\t\t\t} \n\t\t} \n\treturn this ; \n\t} \n"}, {"code": "$F1 public ClientSocket openIfLive $F72 { \n\tif $F43263 ( _state ) $F1337 ClientSocket stream = openRecycle ( ) ; \n\t$F60730 ( stream ) $F80733 ( now , CurrentTime ) if ( isFailed ( now ) ) $F1274 else if ( _state == State . FAIL && $F15854 ( _startingCount ) ) $F1337 return connect ( ) ; \n\t} \n"}, {"code": "public void commit $F72 { \n\tinfo ( NUM00 + solrUrl + NUM00 ) ; \n\tdoGet ( appendParam ( solrUrl . toString ( ) , NUM00 ) ) ; \n\t} \n"}, {"code": "public abstract void filesDropped ( $F70659 [ ] files ) ; \n"}, {"code": "protected void waitForThreadToEnterWaitState ( Thread thread , long timeoutMillis ) { \n\tlong startTime = NUM00 ; \n\tfor ( $F589 ) { \n\t\tThread . State s = thread . getState ( ) ; \n\t\tif ( s == Thread . State . BLOCKED || s == Thread . State . WAITING || s == Thread . State . TIMED_WAITING ) $F665 else if ( s == Thread . State . TERMINATED ) fail ( NUM00 ) ; \n\t\telse if ( startTime == NUM00 ) $F101251 ( startTime , System ) else if ( millisElapsedSince ( startTime ) > timeoutMillis ) { \n\t\t\tthreadAssertTrue ( thread . isAlive ( ) ) ; \n\t\t\t$F665 } \n\t\t$F5756 ( Thread ) } \n\t} \n"}, {"code": "public void forceRewriteExif ( String filename , $F198017 tags ) throws $F27136 { \n\tif ( ! rewriteExif ( filename , tags ) ) { \n\t\tExifData tempData = mData ; \n\t\tmData = new ExifData ( DEFAULT_BYTE_ORDER ) ; \n\t\tFileInputStream is = null ; \n\t\tByteArrayOutputStream bytes = null ; \n\t\ttry { \n\t\t\t$F5335 ( is , filename ) $F1659 ( bytes ) doExifStreamIO ( is , bytes ) ; \n\t\t\t$F1208 ( imageBytes , bytes ) readExif ( imageBytes ) ; \n\t\t\tsetTags ( tags ) ; \n\t\t\twriteExif ( imageBytes , filename ) ; \n\t\t\t} \n\t\t$F27615 ( closeSilently , is , e ) finally { \n\t\t\t$F59 ( is ) mData = tempData ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static LatLng translatePoint ( LatLng point , double distance , double bearing ) { \n\tdistance = distance / NUM00 ; \n\t$F46307 ( lat , Math , point ) $F89861 ( lng , Math , point ) $F129283 ( bearing , Math ) double Lat2 = Math . asin ( ( Math . sin ( lat ) * Math . cos ( distance / EARTH ) ) + ( Math . cos ( lat ) * Math . sin ( distance / EARTH ) * Math . cos ( bearing ) ) ) ; \n\tdouble Long2 = lng + Math . atan2 ( Math . sin ( bearing ) * Math . sin ( distance / EARTH ) * Math . cos ( lat ) , Math . cos ( distance / EARTH ) - ( Math . sin ( lat ) * Math . sin ( Lat2 ) ) ) ; \n\tLat2 = Math . toDegrees ( Lat2 ) ; \n\tLong2 = Math . toDegrees ( Long2 ) ; \n\treturn new LatLng ( Lat2 , Long2 ) ; \n\t} \n"}, {"code": "public boolean init $F72 { \n\t$F156357 ( log ) MClient client = MClient . get ( Env . getCtx ( ) ) ; \n\tString ASPFilter = NUM00 ; \n\tif ( client . isUseASP ( ) ) ASPFilter = $F40 + client . getAD_Client_ID ( ) + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + client . getAD_Client_ID ( ) + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + client . getAD_Client_ID ( ) + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 ; \n\tString sql = null ; \n\tif ( Env . isBaseLanguage ( $F9205 ( Env ) ) ) sql = $F34354 + NUM00 + NUM00 + NUM00 + ASPFilter + NUM00 ; \n\telse sql = $F40645 + Env . getAD_Language ( Env . getCtx ( ) ) + NUM00 + NUM00 + ASPFilter + NUM00 ; \n\tboolean hasFields = _BOOL ; \n\tRows rows = new Rows $F72 ; \n\ttry { \n\t\t$F46 ( pstmt , DB , sql ) pstmt . setInt ( NUM00 , m_processInfo . getAD_Process_ID ( ) ) ; \n\t\t$F49 ( rs , pstmt ) int field = NUM00 ; \n\t\tRow row = null ; \n\t\twhile $F1682 ( rs ) { \n\t\t\thasFields = _BOOL ; \n\t\t\tfield ++ ; \n\t\t\tif ( field % NUM00 == NUM00 && mode == BROWSER_MODE ) { \n\t\t\t\trow = createField ( rs , rows , row ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\trow = createField ( rs , rows , null ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F59 ( rs ) $F59 ( pstmt ) } \n\t$F64 ( log , Level , sql , e ) if ( $F15255 ( m_mFields , m_mFields2 ) || $F15255 ( m_mFields , m_wEditors ) || $F15255 ( m_mFields2 , m_wEditors2 ) ) $F81302 ( log , Level ) if ( hasFields ) { \n\t\tcenterPanel . appendChild ( rows ) ; \n\t\tdynamicDisplay ( ) ; \n\t\t} \n\telse dispose ( ) ; \n\treturn hasFields ; \n\t} \n"}, {"code": "public static String detectPropertiesPath $F72 { \n\t$F27462 ( override , System ) $F21525 ( override ) String jarPath = detectJarPath ( ) ; \n\tString propFile = Constants . PROPS_FILE + NUM00 ; \n\treturn fixWhitespaces ( getParentDirectory ( jarPath ) + File . separator + propFile ) ; \n\t} \n"}, {"code": "static int formatFloat ( final $F1469 out , float val , int digits ) { \n\tboolean negative = _BOOL ; \n\tif ( val == NUM00 ) { \n\t\tout [ NUM00 ] = NUM00 ; \n\t\t$F1082 } \n\tif ( val < NUM00 ) $F385538 ( negative , _BOOL , val ) if ( digits >= POW10 . length ) $F65461 ( digits , POW10 ) val *= POW10 [ digits ] ; \n\t$F385541 ( lval , Math , val ) $F40997 ( index , out ) int charCount = NUM00 ; \n\twhile ( lval != NUM00 || charCount < ( digits + NUM00 ) ) { \n\t\t$F273037 ( digit , lval ) lval = lval / NUM00 ; \n\t\tout [ index -- ] = ( char ) ( digit + NUM00 ) ; \n\t\tcharCount ++ ; \n\t\tif ( charCount == digits ) { \n\t\t\tout [ index -- ] = NUM00 ; \n\t\t\tcharCount ++ ; \n\t\t\t} \n\t\t} \n\tif ( negative ) { \n\t\tout [ index ] = NUM00 ; \n\t\tcharCount ++ ; \n\t\t} \n\treturn charCount ; \n\t} \n"}, {"code": "public void acceptPackage $F53421 ( packageName ) $F845 "}, {"code": "public void resume $F72 { \n\tmPaused = _BOOL ; \n\t$F3224 ( mLastFrameTime , System ) invalidate ( ) ; \n\t} \n"}, {"code": "public GaussianDensityFunction ( Double mean , Double variance ) { \n\tthis . mean = new double [ ] { \n\t\tmean } \n\t; \n\tthis . variance = new double [ ] { \n\t\tvariance } \n\t; \n\tstdDev = new double [ ] { \n\t\tMath . sqrt ( variance ) } \n\t; \n\tif ( variance < NUM00 ) $F37856 ( log , variance ) } \n"}, {"code": "int encryptFinal $F107623 ( in , inOfs , len , out , outOfs ) throws IllegalBlockSizeException , ShortBufferException { \n\tif ( out . length - outOfs < ( len + tagLenBytes ) ) { \n\t\tthrow new ShortBufferException $F580 ; \n\t\t} \n\tprocessAAD ( ) ; \n\tif ( len > NUM00 ) { \n\t\tdoLastBlock ( in , inOfs , len , out , outOfs , _BOOL ) ; \n\t\t} \n\t$F96 lengthBlock = getLengthBlock ( sizeOfAAD * NUM00 , processed * NUM00 ) ; \n\tghashAllToS . update ( lengthBlock ) ; \n\t$F294889 ( s , ghashAllToS ) $F82619 ( sOut , s ) GCTR gctrForSToTag = new GCTR ( embeddedCipher , this . preCounterBlock ) ; \n\tgctrForSToTag . doFinal ( $F251440 ( s , sOut ) ) ; \n\tSystem . arraycopy ( sOut , NUM00 , out , ( outOfs + len ) , tagLenBytes ) ; \n\treturn ( len + tagLenBytes ) ; \n\t} \n"}, {"code": "$F663 ( currTime , System , elapsed , startTime , ZOOM_TIME , Math , interpolator ) "}, {"code": "public static String componentToImageColName ( String component ) { \n\tif ( component . equals ( MixnMatchColumns . KEY_HOMESCREEN ) ) { \n\t\treturn ThemesColumns . HOMESCREEN_URI ; \n\t\t} \n\telse if ( component . equals ( MixnMatchColumns . KEY_LOCKSCREEN ) ) { \n\t\treturn ThemesColumns . LOCKSCREEN_URI ; \n\t\t} \n\telse if ( component . equals ( MixnMatchColumns . KEY_BOOT_ANIM ) ) { \n\t\treturn ThemesColumns . BOOT_ANIM_URI ; \n\t\t} \n\telse if ( component . equals ( MixnMatchColumns . KEY_FONT ) ) { \n\t\treturn ThemesColumns . FONT_URI ; \n\t\t} \n\telse if ( component . equals ( MixnMatchColumns . KEY_ICONS ) ) { \n\t\treturn ThemesColumns . ICON_URI ; \n\t\t} \n\telse if ( component . equals ( MixnMatchColumns . KEY_STATUS_BAR ) ) { \n\t\treturn ThemesColumns . STATUSBAR_URI ; \n\t\t} \n\telse if ( component . equals ( MixnMatchColumns . KEY_NOTIFICATIONS ) ) $F825 else if ( component . equals ( MixnMatchColumns . KEY_RINGTONE ) ) $F825 else if ( component . equals ( MixnMatchColumns . KEY_OVERLAYS ) ) { \n\t\treturn ThemesColumns . OVERLAYS_URI ; \n\t\t} \n\telse if ( component . equals ( MixnMatchColumns . KEY_ALARM ) ) $F825 else if ( component . equals ( MixnMatchColumns . KEY_NAVIGATION_BAR ) ) $F825 else if ( component . equals ( MixnMatchColumns . KEY_LIVE_LOCK_SCREEN ) ) $F825 $F1274 } \n"}, {"code": "public boolean isAbstract $F72 { \n\treturn $F79998 ( Modifier , _method ) ; \n\t} \n"}, {"code": "public void nodeClicked ( RequestInvocationEvent event , int nodeID ) { \n\tboolean forwardTo = _BOOL ; \n\t$F4074 ( strNodeId , Integer , nodeID ) if $F4012 ( strNodeId ) { \n\t\t$F28921 ( prefix , strNodeId ) if ( prefix . equals ( AMAdminConstants . TAB_AGENT_PREFIX ) ) { \n\t\t\tsetPageSessionAttribute ( getTrackingTabIDName ( ) , Integer . toString ( nodeID ) ) ; \n\t\t\t$F4377 ( amconfig , AMViewConfig ) List list = amconfig . getSupportedAgentTypes ( getModel ( ) ) ; \n\t\t\t$F3108 ( strNodeId ) $F27213 ( idx , Integer , strNodeId ) if $F1765 ( idx , list ) { \n\t\t\t\tsetPageSessionAttribute ( PG_SESSION_AGENT_TYPE , $F120 ( list , idx ) ) ; \n\t\t\t\tAMPostViewBean vb = ( AMPostViewBean ) getViewBean ( AMPostViewBean . class ) ; \n\t\t\t\tpassPgSessionMap ( vb ) ; \n\t\t\t\tvb . setTargetViewBeanURL ( NUM00 ) ; \n\t\t\t\t$F50333 ( vb , getRequestContext ) forwardTo = _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tif ( ! forwardTo ) { \n\t\ttry { \n\t\t\tAMViewBeanBase vb = getTabNodeAssociatedViewBean ( NUM00 , nodeID ) ; \n\t\t\tString tmp = ( String ) getPageSessionAttribute ( AMAdminConstants . PREVIOUS_REALM ) ; \n\t\t\tvb . setPageSessionAttribute ( AMAdminConstants . PREVIOUS_REALM , tmp ) ; \n\t\t\ttmp = ( String ) getPageSessionAttribute ( AMAdminConstants . CURRENT_REALM ) ; \n\t\t\tvb . setPageSessionAttribute ( AMAdminConstants . CURRENT_REALM , tmp ) ; \n\t\t\ttmp = ( String ) getPageSessionAttribute ( AMAdminConstants . PREVIOUS_TAB_ID ) ; \n\t\t\tvb . setPageSessionAttribute ( AMAdminConstants . PREVIOUS_TAB_ID , tmp ) ; \n\t\t\tunlockPageTrailForSwapping ( ) ; \n\t\t\tpassPgSessionMap ( vb ) ; \n\t\t\t$F50333 ( vb , getRequestContext ) } \n\t\tcatch ( AMConsoleException e ) { \n\t\t\t$F5197 ( debug , e ) forwardTo ( ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private static void parseCopyFields ( ParseContext context , FieldMapper fieldMapper , $F3803 copyToFields ) throws IOException { \n\tif ( ! context . isWithinCopyTo ( ) && copyToFields . isEmpty ( ) == _BOOL ) { \n\t\tcontext = context . createCopyToContext ( ) ; \n\t\tfor ( String field : copyToFields ) { \n\t\t\tParseContext . Document targetDoc = null ; \n\t\t\tfor ( ParseContext . Document doc = context . doc ( ) ; \n\t\t\tdoc != null ; \n\t\t\t$F10336 ( doc ) ) { \n\t\t\t\tif ( field . startsWith ( doc . getPrefix ( ) ) ) $F3468 ( targetDoc , doc ) } \n\t\t\tassert targetDoc != null ; \n\t\t\tfinal ParseContext copyToContext ; \n\t\t\tif ( targetDoc == context . doc ( ) ) { \n\t\t\t\tcopyToContext = context ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tcopyToContext = context . switchDoc ( targetDoc ) ; \n\t\t\t\t} \n\t\t\tparseCopy ( field , copyToContext ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "protected File createObbFile ( String name , int rawResId ) { \n\tFile outFile = null ; \n\ttry { \n\t\tfinal File filesDir = mContext . getFilesDir ( ) ; \n\t\t$F63508 ( outFile , filesDir , name ) copyRawToFile ( rawResId , outFile ) ; \n\t\t} \n\tcatch ( NotFoundException e ) { \n\t\tif ( outFile != null ) $F19636 ( outFile ) } \n\treturn outFile ; \n\t} \n"}, {"code": "public PlaySoundEntity $F36827 ( sound , radius , volume ) { \n\tthis . sounds = sound . split ( NUM00 ) ; \n\tthis . radius = radius ; \n\tthis . volume = volume ; \n\t} \n"}, {"code": "public Repository ( String domain ) { \n\tthis ( domain , _BOOL ) ; \n\t} \n"}, {"code": "private void updateView ( int viewPosition ) { \n\tnotifyItemChanged ( viewPosition ) ; \n\t} \n"}, {"code": "public static String optimize ( String ... args ) $F195829 ( simpleTag , args ) "}, {"code": "protected boolean isValidServer ( final String server ) { \n\tboolean isValid = checkServerPrefixes ( server ) ; \n\tif ( isValid ) { \n\t\tif $F3106 ( server ) { \n\t\t\tisValid = canConnect ( server ) ; \n\t\t\t} \n\t\telse if $F3106 ( server ) { \n\t\t\tisValid = isDirectory ( server ) ; \n\t\t\t} \n\t\t} \n\treturn isValid ; \n\t} \n"}, {"code": "public ConcurrentHashMap $F15182 ( m ) $F334729 ( this , Math , m , DEFAULT_LOAD_FACTOR , DEFAULT_INITIAL_CAPACITY , DEFAULT_CONCURRENCY_LEVEL , putAll ) "}, {"code": "public MapMaker expiration ( long duration , TimeUnit unit ) { \n\tif ( expirationNanos != NUM00 ) $F322689 ( expirationNanos ) if ( duration <= NUM00 ) $F18931 ( duration ) this . expirationNanos = unit . toNanos ( duration ) ; \n\tuseCustomMap = _BOOL ; \n\treturn this ; \n\t} \n"}, {"code": "void initFromNode ( final Node fromNode , final double startTime , final PseudoRemovePriorityQueue $F6869 pendingNodes ) { \n\tDijkstraNodeData data = getData ( fromNode ) ; \n\tvisitNode ( fromNode , data , pendingNodes , startTime , NUM00 , null ) ; \n\t} \n"}, {"code": "public Collection $F536800 tokenizeHTML $F72 { \n\tList $F536800 tokens = new ArrayList $F536800 $F72 ; \n\tString nestedTags = nestedTagsRegex ( NUM00 ) ; \n\tPattern p = Pattern . compile ( $F40 + nestedTags + NUM00 , Pattern . CASE_INSENSITIVE ) ; \n\t$F1150 ( m , p , text ) int lastPos = NUM00 ; \n\twhile $F281 ( m ) { \n\t\tif ( lastPos < m . start ( ) ) { \n\t\t\ttokens . add ( HTMLToken . text ( text . substring ( lastPos , m . start ( ) ) ) ) ; \n\t\t\t} \n\t\ttokens . add ( HTMLToken . tag ( text . substring ( m . start ( ) , m . end ( ) ) ) ) ; \n\t\t$F204945 ( lastPos , m ) } \n\tif $F7007 ( lastPos , text ) { \n\t\ttokens . add ( HTMLToken . text ( $F83851 ( text , lastPos ) ) ) ; \n\t\t} \n\treturn tokens ; \n\t} \n"}, {"code": "public int decryptBlock $F59451 ( in , inOff , out , outOff ) throws $F5278 { \n\t$F59453 ( inOff , blockSize , in ) $F59453 ( outOff , blockSize , out ) $F59455 ( cipher , cfbV , cfbOutV ) $F59464 ( System , cfbV , blockSize ) System . arraycopy ( in , inOff , cfbV , cfbV . length - blockSize , blockSize ) ; \n\t$F59461 ( i , blockSize , out , outOff , cfbOutV , in , inOff ) return blockSize ; \n\t} \n"}, {"code": "private String computeMd5Hash ( String buffer ) { \n\tMessageDigest md ; \n\ttry { \n\t\t$F6161 ( md , MessageDigest ) return bytesToHex ( md . digest ( buffer . getBytes ( NUM00 ) ) ) ; \n\t\t} \n\tcatch ( NoSuchAlgorithmException ignore ) $F845 catch ( UnsupportedEncodingException e ) $F845 $F1278 } \n"}, {"code": "$F178575 ( expression , errorMessage , String ) "}, {"code": "public void run $F72 throws $F3 { \n\tfor ( $F119 ( i , connCnt ) ) exec . submit ( new ClientThread $F72 ) ; \n\tThread . sleep ( $F264 ) ; \n\t$F5832 ( exec ) } \n"}, {"code": "public static String pluralize ( String word ) { \n\t$F99586 ( word ) final String lowerCaseWord = word . toLowerCase ( ) ; \n\tif ( endsWithAny ( lowerCaseWord , NUM00 , NUM00 , NUM00 ) ) $F70142 ( word ) if ( lowerCaseWord . endsWith ( NUM00 ) && $F2363 ( lowerCaseWord ) || endsWithAny ( lowerCaseWord , NUM00 , NUM00 , NUM00 ) ) { \n\t\treturn $F55443 ( word ) ; \n\t\t} \n\telse $F70142 ( word ) } \n"}, {"code": "protected void onNetworkTypeChange ( NetworkInfo oldNetwork , NetworkInfo newNetwork ) throws RouterException { \n\tlog . info ( String . format ( NUM00 , oldNetwork == null ? NUM00 : oldNetwork . getTypeName ( ) , newNetwork == null ? NUM00 : newNetwork . getTypeName ( ) ) ) ; \n\tif ( disable ( ) ) { \n\t\tlog . info ( String . format ( NUM00 , oldNetwork == null ? NUM00 : oldNetwork . getTypeName ( ) ) ) ; \n\t\t} \n\tnetworkInfo = newNetwork ; \n\tif ( enable ( ) ) { \n\t\tlog . info ( String . format ( NUM00 , newNetwork == null ? NUM00 : newNetwork . getTypeName ( ) ) ) ; \n\t\t} \n\t} \n"}, {"code": "private LinkedHashMap < Term , Integer > repeatingTerms $F72 { \n\tLinkedHashMap < Term , Integer > $F161023 ( tord ) ; \n\tHashMap < Term , Integer > $F8690 ( tcnt ) ; \n\tfor ( PhrasePositions pp : phrasePositions ) { \n\t\tfor ( Term t : pp . terms ) { \n\t\t\t$F99426 ( cnt0 , tcnt , t ) Integer cnt = cnt0 == null ? $F13791 : new Integer ( NUM00 + cnt0 . intValue ( ) ) ; \n\t\t\ttcnt . put ( t , cnt ) ; \n\t\t\tif ( cnt == NUM00 ) { \n\t\t\t\ttord . put ( t , tord . size ( ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn tord ; \n\t} \n"}, {"code": "public List < InetAddress > discoverHosts ( int udpPort , int timeoutMillis ) { \n\tList < InetAddress > hosts = new ArrayList < InetAddress > $F72 ; \n\tDatagramSocket socket = null ; \n\ttry { \n\t\t$F125428 ( socket ) broadcast ( udpPort , socket ) ; \n\t\tsocket . setSoTimeout ( timeoutMillis ) ; \n\t\twhile ( _BOOL ) { \n\t\t\tDatagramPacket packet = new DatagramPacket ( $F10314 , NUM00 ) ; \n\t\t\ttry { \n\t\t\t\tsocket . receive ( packet ) ; \n\t\t\t\t} \n\t\t\tcatch ( SocketTimeoutException ex ) { \n\t\t\t\tif ( INFO ) info ( NUM00 , NUM00 ) ; \n\t\t\t\treturn hosts ; \n\t\t\t\t} \n\t\t\tif ( INFO ) info ( NUM00 , NUM00 + packet . getAddress ( ) ) ; \n\t\t\thosts . add ( packet . getAddress ( ) ) ; \n\t\t\t} \n\t\t} \n\tcatch ( IOException ex ) { \n\t\tif ( ERROR ) error ( NUM00 , NUM00 , ex ) ; \n\t\treturn hosts ; \n\t\t} \n\t$F48674 ( socket ) } \n"}, {"code": "protected void reloadClusterConfiguration $F72 { \n\tsynchronized ( this . cluster ) $F5795 ( loadClusterConfiguration ) } \n"}, {"code": "public double expectedUtility ( NondominatedPopulation population ) { \n\tdouble sum = NUM00 ; \n\tfor ( $F1139 ( i , weights ) ) { \n\t\tdouble max = Double . NEGATIVE_INFINITY ; \n\t\tfor ( Solution solution : population ) { \n\t\t\tmax = Math . max ( max , utilityFunction . computeUtility ( solution , weights [ i ] ) ) ; \n\t\t\t} \n\t\tsum += max ; \n\t\t} \n\treturn sum / weights . length ; \n\t} \n"}, {"code": "public void count ( HashMap < String , TreeMap $F8434 > table , String suffix , String tag ) { \n\tTreeMap $F8434 counts = table . get ( suffix ) ; \n\tif ( counts == null ) { \n\t\tcounts = new TreeMap $F8434 $F72 ; \n\t\ttable . put ( suffix , counts ) ; \n\t\t} \n\t$F99426 ( count , counts , tag ) if ( count == null ) count = NUM00 ; \n\tcounts . put ( tag , count + NUM00 ) ; \n\t} \n"}, {"code": "public void addInputMode ( String mode , $F20725 ( inputChars ) ) $F1717 ( modesMap , mode , inputChars ) "}, {"code": "public static void sleep ( int msec ) throws InterruptedException $F7595 ( Thread , msec ) "}, {"code": "public static $F22273 toDate ( String monthStr , String dayStr , String yearStr , String hourStr , String minuteStr , String secondStr ) { \n\tint month , day , year , hour , minute , second ; \n\ttry { \n\t\tmonth = Integer . parseInt ( monthStr ) ; \n\t\tday = Integer . parseInt ( dayStr ) ; \n\t\tyear = Integer . parseInt ( yearStr ) ; \n\t\thour = Integer . parseInt ( hourStr ) ; \n\t\tminute = Integer . parseInt ( minuteStr ) ; \n\t\tsecond = Integer . parseInt ( secondStr ) ; \n\t\t} \n\t$F34300 return toDate ( month , day , year , hour , minute , second ) ; \n\t} \n"}, {"code": "public void propertyChange ( PropertyChangeEvent pce ) { \n\tif ( pce . getPropertyName ( ) == OMDrawingTool . LoadersProperty ) { \n\t\tObject obj = pce . getNewValue ( ) ; \n\t\tif ( obj instanceof Vector ) { \n\t\t\tVector < EditToolLoader > loaders = ( Vector < EditToolLoader > ) obj ; \n\t\t\t$F15849 ( setLoaders , loaders ) ; \n\t\t\tresetGUI ( ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void removeAppOffer ( Offer offer ) { \n\tint indexToRemove = getIndex ( offer ) ; \n\tif ( indexToRemove != - NUM00 ) $F15777 ( appOffers , indexToRemove , notifyDataSetChanged ) } \n"}, {"code": "public Data transform ( Data data , XMLCryptoContext xc ) throws TransformException { \n\treturn spi . transform ( data , xc ) ; \n\t} \n"}, {"code": "public static int compare ( Comparable c1 , Comparable c2 , boolean nullGreater ) { \n\tif ( c1 == c2 ) $F1083 else if ( c1 == null ) { \n\t\treturn $F17979 ( nullGreater ) ; \n\t\t} \n\telse if ( c2 == null ) { \n\t\treturn $F17973 ( nullGreater ) ; \n\t\t} \n\t$F12554 ( c1 , c2 ) } \n"}, {"code": "public static double quantile $F12359 ( val , mu , sigma , xi ) { \n\tif $F19274 ( val ) $F6623 ( Double ) if ( xi == NUM00 ) { \n\t\treturn mu - sigma * Math . log ( NUM00 - val ) ; \n\t\t} \n\treturn mu - sigma / xi * ( NUM00 - Math . pow ( NUM00 - val , - xi ) ) ; \n\t} \n"}, {"code": "OathDeviceSettings createDeviceProfile ( int minSharedSecretLength ) { \n\tReject . ifFalse ( minSharedSecretLength >= NUM00 , NUM00 ) ; \n\tint sharedSecretByteLength = Math . max ( MIN_SHARED_SECRET_BYTE_LENGTH , $F96308 ( Math , minSharedSecretLength ) ) ; \n\t$F2175 ( secretBytes , sharedSecretByteLength ) secureRandom . nextBytes ( secretBytes ) ; \n\tString sharedSecret = DatatypeConverter . printHexBinary ( secretBytes ) ; \n\treturn new OathDeviceSettings ( sharedSecret , DEVICE_NAME , INITIAL_LAST_LOGIN_TIME , INITIAL_COUNTER_VALUE ) ; \n\t} \n"}, {"code": "public final void deleteSelectedObjects $F72 { \n\t$F252345 components = getComponents ( ) ; \n\tList < DisplayNode > $F204 ( graphNodes ) ; \n\tList < IDisplayEdge > $F204 ( graphEdges ) ; \n\tfor ( Component comp : components ) { \n\t\tif ( comp instanceof DisplayNode ) { \n\t\t\tif $F931 ( isDeleteVariablesAllowed ) $F1448 DisplayNode node = ( DisplayNode ) comp ; \n\t\t\tif $F31483 ( node ) $F207 ( graphNodes , node ) } \n\t\telse if ( comp instanceof IDisplayEdge ) { \n\t\t\tIDisplayEdge edge = ( IDisplayEdge ) comp ; \n\t\t\tif $F31483 ( edge ) $F207 ( graphEdges , edge ) } \n\t\t} \n\tfor ( DisplayNode graphNode : graphNodes ) { \n\t\tremoveNode ( graphNode ) ; \n\t\t} \n\tfor ( IDisplayEdge displayEdge : graphEdges ) { \n\t\ttry $F86383 ( removeEdge , displayEdge , resetEdgeOffsets ) catch ( Exception e ) { \n\t\t\tif ( isNodeEdgeErrorsReported ( ) ) { \n\t\t\t\tJOptionPane . showMessageDialog ( JOptionUtils . centeringComp ( ) , e . getMessage ( ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "protected final void initStatistics $F8306 ( who , headerLines ) throws AdeException { \n\tsetStatsFilePath ( ) ; \n\tif ( statsFilePath == null ) $F234373 appendStatString ( SPACER ) ; \n\tappendStatString ( String . format ( NUM00 , currentTimeStamp ( ) , who ) ) ; \n\tappendStatString ( SPACER ) ; \n\t$F159660 ( i , headerLines , appendStatString ) appendStatString ( SPACER ) ; \n\t} \n"}, {"code": "public static $F529 dayEndCapacityAvailable ( GenericValue techDataCalendarWeek , int dayEnd ) { \n\t$F34733 ( result , FastMap ) int moveDay = NUM00 ; \n\tDouble capacity = null ; \n\tTime startTime = null ; \n\twhile $F355079 ( capacity ) { \n\t\tswitch ( dayEnd ) { \n\t\t\tcase Calendar . MONDAY : $F225882 ( capacity , techDataCalendarWeek ) $F355080 ( startTime , techDataCalendarWeek ) $F597 case Calendar . TUESDAY : $F225882 ( capacity , techDataCalendarWeek ) $F355080 ( startTime , techDataCalendarWeek ) $F597 case Calendar . WEDNESDAY : $F225882 ( capacity , techDataCalendarWeek ) $F355080 ( startTime , techDataCalendarWeek ) $F597 case Calendar . THURSDAY : $F225882 ( capacity , techDataCalendarWeek ) $F355080 ( startTime , techDataCalendarWeek ) $F597 case Calendar . FRIDAY : $F225882 ( capacity , techDataCalendarWeek ) $F355080 ( startTime , techDataCalendarWeek ) $F597 case Calendar . SATURDAY : $F225882 ( capacity , techDataCalendarWeek ) $F355080 ( startTime , techDataCalendarWeek ) $F597 case Calendar . SUNDAY : $F225882 ( capacity , techDataCalendarWeek ) $F355080 ( startTime , techDataCalendarWeek ) $F597 } \n\t\tif $F355079 ( capacity ) { \n\t\t\tmoveDay -= NUM00 ; \n\t\t\tdayEnd = ( dayEnd == NUM00 ) ? NUM00 : dayEnd - NUM00 ; \n\t\t\t} \n\t\t} \n\t$F545 ( result , capacity ) $F545 ( result , startTime ) $F155160 ( result , Integer , moveDay ) return result ; \n\t} \n"}, {"code": "protected void addClassPath ( String classpath ) { \n\t$F8249 ( classpath ) String sep = $F8907 ( classpath ) ? NUM00 : NUM00 ; \n\t$F35105 ( parseCp , classpath , sep ) for ( String cpEntry : parseCp ) { \n\t\taddEntry ( cpEntry ) ; \n\t\t} \n\t} \n"}, {"code": "$F14125 EntryUploaderImpl ( EntryInserter entryInserter , EntryProvider entryProvider , EntryUpdater entryUpdater ) { \n\tthis . entryInserter = checkNotNull ( entryInserter ) ; \n\tthis . entryProvider = checkNotNull ( entryProvider ) ; \n\tthis . entryUpdater = checkNotNull ( entryUpdater ) ; \n\t} \n"}, {"code": "protected void add ( long bytesIn , long bytesOut ) { \n\ttotalBytesIn . addAndGet ( bytesIn ) ; \n\ttotalBytesOut . addAndGet ( bytesOut ) ; \n\t} \n"}, {"code": "public static double vectorDistance ( $F1986 vec1 , $F1986 vec2 , double power , double oneOverPower ) { \n\tdouble result = NUM00 ; \n\tif ( power == NUM00 ) { \n\t\tfor ( $F1139 ( i , vec1 ) ) { \n\t\t\tresult += vec1 [ i ] - vec2 [ i ] == NUM00 ? NUM00 : NUM00 ; \n\t\t\t} \n\t\t} \n\telse if ( power == NUM00 ) { \n\t\tfor ( $F1139 ( i , vec1 ) ) { \n\t\t\tresult += Math . abs ( vec1 [ i ] - vec2 [ i ] ) ; \n\t\t\t} \n\t\t} \n\telse if ( power == NUM00 ) { \n\t\tresult = Math . sqrt ( distSquaredCartesian ( vec1 , vec2 ) ) ; \n\t\t} \n\telse if ( power == Integer . MAX_VALUE || Double . isInfinite ( power ) ) { \n\t\tfor ( $F1139 ( i , vec1 ) ) { \n\t\t\tresult = Math . max ( result , Math . max ( vec1 [ i ] , vec2 [ i ] ) ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tfor ( $F1139 ( i , vec1 ) ) { \n\t\t\tresult += Math . pow ( vec1 [ i ] - vec2 [ i ] , power ) ; \n\t\t\t} \n\t\tresult = Math . pow ( result , oneOverPower ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static $F5415 randomVector ( int aSize , long seed ) { \n\t$F22745 ( rand , seed ) $F25850 ( unk , aSize ) for ( $F1139 ( i , unk ) ) { \n\t\tunk [ i ] = ( rand . nextFloat ( ) - NUM00 ) / aSize ; \n\t\t} \n\treturn unk ; \n\t} \n"}, {"code": "$F125330 ( wasRaw ) "}, {"code": "public Table findTable $F106000 ( catalogName , schemaName , tableName , caseSensitive ) { \n\tString cacheKey = catalogName + NUM00 + schemaName + NUM00 + tableName + NUM00 + caseSensitive ; \n\t$F99426 ( tableIndex , tableIndexCache , cacheKey ) if ( tableIndex != null ) { \n\t\tif ( tableIndex < getTableCount ( ) ) { \n\t\t\tTable table = getTable ( tableIndex ) ; \n\t\t\tif ( doesMatch ( table , catalogName , schemaName , tableName , caseSensitive ) ) { \n\t\t\t\treturn table ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tTable [ ] tables = getTables ( ) ; \n\tfor ( $F1139 ( i , tables ) ) { \n\t\tTable table = tables [ i ] ; \n\t\tif ( doesMatch ( table , catalogName , schemaName , tableName , caseSensitive ) ) $F67896 ( tableIndexCache , cacheKey , i , table ) } \n\t$F1274 } \n"}, {"code": "public void testDomainMatchesOnLocalAddresses $F72 { \n\tassertFalse ( HttpCookie . domainMatches ( NUM00 , NUM00 ) ) ; \n\tassertFalse ( HttpCookie . domainMatches ( NUM00 , NUM00 ) ) ; \n\t} \n"}, {"code": "public void flush $F72 $F5795 ( writeDataBlock ) "}, {"code": "protected CRFPCoverageBox [ ] vectorToCRFPCoverageBoxes ( Vector vector ) { \n\t$F115 ( size , vector ) CRFPCoverageBox [ ] rets = new CRFPCoverageBox [ size ] ; \n\tfor ( $F119 ( i , size ) ) { \n\t\tRpfCoverageBox box = ( RpfCoverageBox ) vector . elementAt ( i ) ; \n\t\tif ( box != null ) { \n\t\t\trets [ i ] = new CRFPCoverageBox ( ( float ) box . nw_lat , ( float ) box . nw_lon , ( float ) box . se_lat , ( float ) box . se_lon , box . subframeLatInterval , box . subframeLonInterval , box . chartCode , ( short ) box . zone , new XYPoint ( ( short ) box . startIndexes . x , ( short ) box . startIndexes . y ) , new XYPoint ( ( short ) box . endIndexes . x , ( short ) box . endIndexes . y ) , ( short ) box . tocNumber , ( short ) box . entryNumber , box . scale , box . percentCoverage ) ; \n\t\t\t} \n\t\t} \n\treturn rets ; \n\t} \n"}, {"code": "public void notifyListenersOfInitialization $F72 { \n\tif ( initialized ) { \n\t\tfor ( ActionListener l : listeners ) { \n\t\t\tl . actionPerformed ( new ActionEvent ( this , ActionEvent . ACTION_PERFORMED , NUM00 ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void checkPassword ( String password ) throws BadRequestException { \n\tif ( password == null ) { \n\t\tthrow new BadRequestException $F580 ; \n\t\t} \n\tif $F3599 ( password ) { \n\t\tthrow new BadRequestException $F580 ; \n\t\t} \n\tint numOfLetters = NUM00 ; \n\tint numOfDigits = NUM00 ; \n\tfor ( $F2998 ( passwordChar , password ) ) { \n\t\tif $F119844 ( Character , passwordChar ) { \n\t\t\tnumOfDigits ++ ; \n\t\t\t} \n\t\telse if ( Character . isLetter ( passwordChar ) ) { \n\t\t\tnumOfLetters ++ ; \n\t\t\t} \n\t\t} \n\tif ( numOfDigits == NUM00 || numOfLetters == NUM00 ) { \n\t\tthrow new BadRequestException $F580 ; \n\t\t} \n\t} \n"}, {"code": "final $F9341 find ( int h , Object k ) { \n\tif ( k != null ) { \n\t\tfor ( $F9341 e = first ; \n\t\te != null ; \n\t\t) { \n\t\t\tint s ; \n\t\t\tK ek ; \n\t\t\tif ( ( ( s = lockState ) & ( WAITER | WRITER ) ) != NUM00 ) { \n\t\t\t\tif ( e . hash == h && ( ( ek = e . key ) == k || $F35166 ( ek , k ) ) ) return e ; \n\t\t\t\te = e . next ; \n\t\t\t\t} \n\t\t\telse if ( U . compareAndSwapInt ( this , LOCKSTATE , s , s + READER ) ) { \n\t\t\t\t$F35195 ( r , p ) try { \n\t\t\t\t\tp = ( ( r = root ) == null ? null : r . findTreeNode ( h , k , null ) ) ; \n\t\t\t\t\t} \n\t\t\t\tfinally { \n\t\t\t\t\tThread w ; \n\t\t\t\t\tif ( U . getAndAddInt ( this , LOCKSTATE , - READER ) == ( READER | WAITER ) && ( w = waiter ) != null ) LockSupport . unpark ( w ) ; \n\t\t\t\t\t} \n\t\t\t\treturn p ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F1274 } \n"}, {"code": "$F1431 private void collectAllRegionsDetails ( SystemMemberCacheJmxImpl cache , RegionSubRegionSnapshot regionSnapshot , Map < String , Map $F6251 > regionsInfo , Map < String , ObjectName > existingRegionMbeans ) throws AdminException , OperationsException , MBeanException , ReflectionException { \n\tString fullPath = regionSnapshot . getFullPath ( ) ; \n\tif $F2137 ( fullPath , PLACE_HOLDER_ROOT_REGION ) { \n\t\tfullPath = fullPath . substring ( $F1092 ( PLACE_HOLDER_ROOT_REGION ) ) ; \n\t\t$F20605 ( name , regionSnapshot ) Integer entryCount = Integer . valueOf ( regionSnapshot . getEntryCount ( ) ) ; \n\t\t$F529 details = new $F27766 $F72 ; \n\t\tdetails . put ( REGION_NAME , name ) ; \n\t\tdetails . put ( REGION_PATH , fullPath ) ; \n\t\tdetails . put ( REGION_ENTRYCOUNT , entryCount ) ; \n\t\tObjectName regionObjectName = existingRegionMbeans . get ( fullPath ) ; \n\t\tif ( regionObjectName == null ) { \n\t\t\tregionObjectName = cache . manageRegion ( fullPath ) ; \n\t\t\t} \n\t\tObject attribute = getAttribute ( regionObjectName , NUM00 , NOT_AVAILABLE ) ; \n\t\tattribute = attribute != null ? attribute . toString ( ) : attribute ; \n\t\tdetails . put ( REGION_SCOPE , attribute ) ; \n\t\tattribute = getAttribute ( regionObjectName , NUM00 , NOT_AVAILABLE ) ; \n\t\tattribute = attribute != null ? attribute . toString ( ) : attribute ; \n\t\tdetails . put ( REGION_DATAPOLICY , attribute ) ; \n\t\tSubscriptionAttributes interestPolicyAttr = ( SubscriptionAttributes ) getAttribute ( regionObjectName , NUM00 , null ) ; \n\t\tString interestPolicyStr = NOT_AVAILABLE ; \n\t\tif ( interestPolicyAttr != null ) { \n\t\t\tInterestPolicy interestPolicy = interestPolicyAttr . getInterestPolicy ( ) ; \n\t\t\t$F170091 ( interestPolicy , interestPolicyStr ) } \n\t\tdetails . put ( REGION_INTERESTPOLICY , interestPolicyStr ) ; \n\t\tattribute = getAttribute ( regionObjectName , NUM00 , NOT_AVAILABLE ) ; \n\t\tattribute = attribute != null ? attribute . toString ( ) : attribute ; \n\t\tdetails . put ( REGION_DISKATTRS , attribute ) ; \n\t\tregionsInfo . put ( fullPath , details ) ; \n\t\t} \n\tSet subRegionSnapshots = regionSnapshot . getSubRegionSnapshots ( ) ; \n\tfor ( $F437180 ( iterator , subRegionSnapshots ) ) { \n\t\tRegionSubRegionSnapshot subRegion = ( RegionSubRegionSnapshot ) iterator . next ( ) ; \n\t\tcollectAllRegionsDetails ( cache , subRegion , regionsInfo , existingRegionMbeans ) ; \n\t\t} \n\t} \n"}, {"code": "public synchronized boolean removeSuspendedResponse ( WorkerCategory category , Response response ) { \n\tDeque < Response > deque = workersByCategory . get ( category ) ; \n\t$F1933 ( deque , _BOOL ) if $F16914 ( deque , response ) { \n\t\tnWaitingConsumers -= NUM00 ; \n\t\t$F980 ( LOG ) return _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static Number sin ( Number a ) { \n\treturn Math . sin ( a . doubleValue ( ) ) ; \n\t} \n"}, {"code": "private TypedClassOperation instantiateOperationTypes ( TypedClassOperation operation ) { \n\t$F62886 typeParameters = operation . getTypeParameters ( ) ; \n\t$F4975 ( typeParameters , operation ) $F304868 substitution = selectSubstitution ( typeParameters ) ; \n\t$F1338 ( substitution ) return operation . apply ( substitution ) ; \n\t} \n"}, {"code": "default T fold ( final T identity , final BinaryOperator $F4203 accumulator ) { \n\tfinal $F19288 opt = toOptional ( ) ; \n\tif $F16464 ( opt ) return accumulator . apply ( identity , get ( ) ) ; \n\treturn identity ; \n\t} \n"}, {"code": "protected void load ( String filename , Properties p ) throws FileNotFoundException { \n\t$F1705 ( file , filename ) if $F1906 ( file ) throw new FileNotFoundException ( filename ) ; \n\tclassifier = new CRFClassifier < CoreLabel > ( p ) ; \n\ttry { \n\t\tclassifier . loadClassifier ( file , p ) ; \n\t\t} \n\tcatch ( ClassCastException e ) $F302 ( e ) $F12241 ( e ) catch ( ClassNotFoundException e ) $F302 ( e ) } \n"}, {"code": "public String resolveFont ( java . awt . Font font ) { \n\tString ret = NUM00 ; \n\tret = ret . concat ( $F2989 ( font ) ) ; \n\tif ( font . isBold ( ) ) ret = ret . concat ( NUM00 ) ; \n\telse ret = ret . concat ( NUM00 ) ; \n\tif ( font . isItalic ( ) ) ret = ret . concat ( NUM00 ) ; \n\telse ret = ret . concat ( NUM00 ) ; \n\tret = ret . concat ( NUM00 ) ; \n\tret = ret . concat ( NUM00 + font . getSize ( ) ) ; \n\tret = ret . concat ( NUM00 ) ; \n\tret = ret . concat ( NUM00 ) ; \n\tret = ret . concat ( NUM00 ) ; \n\tret = ret . concat ( NUM00 ) ; \n\tret = ret . concat ( NUM00 ) ; \n\tret = ret . concat ( NUM00 ) ; \n\treturn ret ; \n\t} \n"}, {"code": "public void addLineContent ( final ZyLineContent line ) { \n\t$F1832 ( Preconditions , line ) m_content . add ( line ) ; \n\t} \n"}, {"code": "public static boolean excludeByPackage $F13322 ( pkg , excludePkg ) { \n\tfor ( String ep : excludePkg ) { \n\t\tif $F44202 ( pkg , ep ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public RegionVersionHolder ( long ver ) { \n\tthis . version = ver ; \n\t} \n"}, {"code": "public static void writeFully ( FileChannel file , long pos , ByteBuffer src ) { \n\ttry { \n\t\tint off = NUM00 ; \n\t\tdo { \n\t\t\tint len = file . write ( src , pos + off ) ; \n\t\t\toff += len ; \n\t\t\t} \n\t\twhile $F45853 ( src ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\tthrow newIllegalStateException ( ERROR_WRITING_FAILED , NUM00 , file , src . remaining ( ) , pos , e ) ; \n\t\t} \n\t} \n"}, {"code": "public void updateRequestTimeout ( TimeSpan span ) throws SecurityException , ApplicationException { \n\tcheckWriteAccess ( ) ; \n\t$F26096 ( hasAccess , ConfigWebUtil , config , SecurityManager ) $F26100 ( hasAccess ) Element scope = _getRootElement ( NUM00 ) ; \n\tElement application = _getRootElement ( NUM00 ) ; \n\tif ( span != null ) { \n\t\tif ( span . getMillis ( ) <= NUM00 ) throw new ApplicationException $F580 ; \n\t\tapplication . setAttribute ( NUM00 , span . getDay ( ) + NUM00 + span . getHour ( ) + NUM00 + span . getMinute ( ) + NUM00 + span . getSecond ( ) ) ; \n\t\t} \n\telse $F152467 ( application ) if $F186046 ( scope ) $F152467 ( scope ) } \n"}, {"code": "$F1 protected boolean calcProblem $F72 { \n\tString type = getTagWithKey ( Tags . KEY_TYPE ) ; \n\tif $F3581 ( type ) { \n\t\treturn _BOOL ; \n\t\t} \n\treturn super . calcProblem ( ) ; \n\t} \n"}, {"code": "public int readByte $F72 throws IOException { \n\t++ length ; \n\treturn in . read ( ) & NUM00 ; \n\t} \n"}, {"code": "public void updateShapeShadowsToCurrentTime ( boolean updateMinutes , boolean updateHours , int currentMinute , int currentHour ) { \n\tif ( updateMinutes ) { \n\t\tint tens = $F71088 ( Math , currentMinute ) ; \n\t\tint units = ( int ) Math . floor ( currentMinute % NUM00 ) ; \n\t\tif ( minutesTens . getCurrentValue ( ) != tens ) { \n\t\t\t$F574 ( mt , String , tens ) mt = mt . concat ( NUM00 ) ; \n\t\t\t$F12258 ( Log , TAG , mt ) minutesTens . parseJSON ( mt ) ; \n\t\t\t} \n\t\tif ( minutesUnits . getCurrentValue ( ) != units ) { \n\t\t\t$F574 ( mu , String , units ) mu = mu . concat ( NUM00 ) ; \n\t\t\t$F12258 ( Log , TAG , mu ) minutesUnits . parseJSON ( mu ) ; \n\t\t\t} \n\t\t} \n\tif ( updateHours ) { \n\t\tint tens = $F71088 ( Math , currentHour ) ; \n\t\tint units = ( int ) Math . floor ( currentHour % NUM00 ) ; \n\t\tif ( hoursTens . getCurrentValue ( ) != tens ) { \n\t\t\t$F574 ( ht , String , tens ) ht = ht . concat ( NUM00 ) ; \n\t\t\t$F12258 ( Log , TAG , ht ) hoursTens . parseJSON ( ht ) ; \n\t\t\t} \n\t\tif ( hoursUnits . getCurrentValue ( ) != units ) { \n\t\t\t$F574 ( hu , String , units ) hu = hu . concat ( NUM00 ) ; \n\t\t\t$F12258 ( Log , TAG , hu ) hoursUnits . parseJSON ( hu ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public Set < RawProtein < SuperFamilyHmmer3RawMatch > > parse ( InputStream is ) throws IOException { \n\tMap < String , RawProtein < SuperFamilyHmmer3RawMatch > > data = new HashMap < String , RawProtein < SuperFamilyHmmer3RawMatch > > $F72 ; \n\tBufferedReader reader = null ; \n\ttry { \n\t\t$F105457 ( reader , is ) String line ; \n\t\twhile $F443 ( line , reader ) { \n\t\t\tSet < SuperFamilyHmmer3RawMatch > rawMatches = parseLine ( line ) ; \n\t\t\tSuperFamilyHmmer3RawMatch rawMatch ; \n\t\t\tfor ( SuperFamilyHmmer3RawMatch rawMatche : rawMatches ) { \n\t\t\t\trawMatch = rawMatche ; \n\t\t\t\tString sequenceId = rawMatch . getSequenceIdentifier ( ) ; \n\t\t\t\tif $F1710 ( data , sequenceId ) { \n\t\t\t\t\tRawProtein < SuperFamilyHmmer3RawMatch > rawProtein = data . get ( sequenceId ) ; \n\t\t\t\t\trawProtein . addMatch ( rawMatch ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tRawProtein < SuperFamilyHmmer3RawMatch > rawProtein = new RawProtein < SuperFamilyHmmer3RawMatch > ( sequenceId ) ; \n\t\t\t\t\trawProtein . addMatch ( rawMatch ) ; \n\t\t\t\t\tdata . put ( sequenceId , rawProtein ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F14364 ( reader ) return new HashSet < RawProtein < SuperFamilyHmmer3RawMatch > > $F6680 ( data ) ; \n\t} \n"}, {"code": "public UnionPathIterator ( Compiler compiler , int opPos ) throws $F1872 { \n\tsuper ( ) ; \n\topPos = OpMap . getFirstChildPos ( opPos ) ; \n\tloadLocationPaths ( compiler , opPos , NUM00 ) ; \n\t} \n"}, {"code": "public String relationName $F72 { \n\treturn m_RelationName ; \n\t} \n"}, {"code": "$F9749 ( namespace , attName , attValue , xmlWriter , registerPrefix ) "}, {"code": "@ RequestMapping ( $F3144 , method = RequestMethod . POST , produces = MediaType . TEXT_PLAIN_VALUE ) @ Timed public ResponseEntity $F1011 changePassword ( $F151143 String password ) { \n\tif ( ! checkPasswordLength ( password ) ) { \n\t\treturn new $F151149 ( NUM00 , HttpStatus . BAD_REQUEST ) ; \n\t\t} \n\tuserService . changePassword ( password ) ; \n\treturn new $F151149 ( HttpStatus . OK ) ; \n\t} \n"}, {"code": "public void testBadSegment $F72 throws IOException { \n\tDirectory dir = newDirectory ( ) ; \n\tIndexWriter iw = new IndexWriter ( dir , newIndexWriterConfig ( new MockAnalyzer ( random ( ) ) ) ) ; \n\t$F10888 ( document ) FieldType customType = new FieldType ( TextField . TYPE_NOT_STORED ) ; \n\tcustomType . setStoreTermVectors ( _BOOL ) ; \n\tdocument . add ( newField ( NUM00 , NUM00 , customType ) ) ; \n\tiw . addDocument ( document ) ; \n\t$F59 ( iw ) $F59 ( dir ) } \n"}, {"code": "public static int size ( String str ) { \n\t$F74334 ( str ) $F115 ( length , str ) int size = length ; \n\ttry { \n\t\tsize = str . getBytes ( NUM00 ) . length ; \n\t\t} \n\tcatch ( UnsupportedEncodingException e ) { \n\t\t$F62 ( log , Level , str , e ) } \n\treturn size ; \n\t} \n"}, {"code": "protected void synchWithTarget $F72 throws MonitorException { \n\t$F52855 ( timeLimit , System , syncWaitMs ) log ( NUM00 + lvmid + NUM00 ) ; \n\twhile ( ! prologue . isAccessible ( ) ) { \n\t\tlog ( NUM00 ) ; \n\t\t$F36705 ( Thread ) if $F16508 ( System , timeLimit ) { \n\t\t\tlogln ( NUM00 + lvmid ) ; \n\t\t\tthrow new MonitorException $F580 ; \n\t\t\t} \n\t\t} \n\tlogln ( NUM00 + lvmid ) ; \n\t} \n"}, {"code": "public static CharSequence time ( Context context , EasyCursor c ) { \n\t$F657 ( now , System ) long when = c . getLong ( Reviews . WRITTEN_ON ) ; \n\treturn now - when > MINUTE_IN_MILLIS ? DateUtils . getRelativeTimeSpanString ( when , now , NUM00 , FORMAT_ABBREV_ALL ) : context . getString ( R . string . recent_time ) ; \n\t} \n"}, {"code": "$F256112 ( screenCoord , width , getWidth , padding , result , Math ) "}, {"code": "public long roundTripTime $F72 throws InterruptedException { \n\t$F681 ( latch ) return received - sent ; \n\t} \n"}, {"code": "static private String userIdFromRange $F9816 ( values , include ) { \n\t$F167151 ( minId , Integer , values ) $F167151 ( maxId , Integer , values ) String exclusions = values . length > NUM00 ? values [ NUM00 ] : null ; \n\tStack $F2305 stack = getStack ( minId , maxId , exclusions , include ) ; \n\tif $F3817 ( stack ) { \n\t\treturn Integer . toString ( stack . pop ( ) ) ; \n\t\t} \n\t$F824 } \n"}, {"code": "public void testCase4 $F72 { \n\t$F3013 $F3017 byte $F3018 = { \n\t\t- NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 } \n\t; \n\tint aSign = - NUM00 ; \n\tint bSign = NUM00 ; \n\t$F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F3024 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , result ) } \n"}, {"code": "public static String stringDefaultValue ( String bytes ) { \n\ttry { \n\t\treturn new String ( bytes . getBytes ( NUM00 ) , NUM00 ) ; \n\t\t} \n\tcatch ( UnsupportedEncodingException e ) $F54146 ( e ) } \n"}, {"code": "public void actualizaCampo ( int tipoFicha , ValorCampoGenericoVO campo ) { \n\tValorCampoGenericoVO campoAnterior = retrieve ( tipoFicha , campo . getTipo ( ) , campo . getIdObjeto ( ) , campo . getIdCampo ( ) , campo . getOrden ( ) , campo . getTipoElemento ( ) ) ; \n\tif ( campoAnterior == null ) insert ( tipoFicha , campo ) ; \n\telse update ( tipoFicha , campo , campoAnterior . getValorInfo ( ) ) ; \n\t} \n"}, {"code": "public static int length ( RegExp re ) { \n\tRegExp2 r ; \n\tswitch ( re . type ) { \n\t\tcase sym . BAR : { \n\t\t\tr = ( RegExp2 ) re ; \n\t\t\tint l1 = length ( r . r1 ) ; \n\t\t\t$F125151 ( l1 ) int l2 = length ( r . r2 ) ; \n\t\t\tif ( l1 == l2 ) return l1 ; \n\t\t\telse $F150 } \n\t\tcase sym . CONCAT : { \n\t\t\tr = ( RegExp2 ) re ; \n\t\t\tint l1 = length ( r . r1 ) ; \n\t\t\t$F125151 ( l1 ) int l2 = length ( r . r2 ) ; \n\t\t\t$F125151 ( l2 ) return l1 + l2 ; \n\t\t\t} \n\t\tcase sym . STAR : case sym . PLUS : case sym . QUESTION : $F150 case sym . CCLASS : case sym . CCLASSNOT : case sym . CHAR : case sym . CHAR_I : $F1082 case $F358481 NUM00 : case $F358481 NUM00 <missing ';'> _I : { \n\t\t\tString content = $F358483 ( String , re ) ; \n\t\t\t$F55826 ( content ) } \n\t\tcase $F358481 TILDE : case sym . BANG : $F150 case $F358481 MACROUSE : return length ( macros . getDefinition ( $F358483 ( String , re ) ) ) ; \n\t\t} \n\tthrow new Error ( \"STRING\" + <missing '{'> re . type + NUM00 + re ) ; \n\t} \n"}, {"code": "public static TimeZone randomTimeZone ( Random random ) { \n\tString tzIds [ ] = TimeZone . getAvailableIDs ( ) ; \n\treturn TimeZone . getTimeZone ( $F342958 ( tzIds , random ) ) ; \n\t} \n"}, {"code": "public static String arrayToList $F28786 ( array , delimiter ) { \n\tif $F4329 ( ArrayUtil , array ) $F1278 StringBuilder sb = new StringBuilder ( array [ NUM00 ] ) ; \n\tif $F1277 ( delimiter ) { \n\t\t$F12685 ( c , delimiter ) for ( $F1139 ( i , array ) ) { \n\t\t\tsb . append ( c ) ; \n\t\t\t$F6939 ( sb , array , i ) } \n\t\t} \n\telse { \n\t\tfor ( $F1139 ( i , array ) ) { \n\t\t\tsb . append ( delimiter ) ; \n\t\t\t$F6939 ( sb , array , i ) } \n\t\t} \n\t$F92 ( sb ) } \n"}, {"code": "$F1 public boolean addAll $F22451 ( c ) { \n\tIterator $F22448 i = c . iterator ( ) ; \n\tboolean changed = _BOOL ; \n\twhile $F2921 ( i ) { \n\t\tboolean ret = $F4337 ( add , i ) ; \n\t\tif ( ! changed ) { \n\t\t\tchanged = ret ; \n\t\t\t} \n\t\t} \n\treturn changed ; \n\t} \n"}, {"code": "public void reset $F72 { \n\t$F725 ( mCodes ) mIsFirstCharCapitalized = _BOOL ; \n\tmPreferredWord = null ; \n\t$F4910 ( mTypedWord ) mCapsCount = NUM00 ; \n\t} \n"}, {"code": "private String extractPath ( final String uri ) { \n\treturn DefaultWildcardStreamLocator . stripQueryPath ( uri . replace ( PREFIX , StringUtils . EMPTY ) ) ; \n\t} \n"}, {"code": "public void addClassesToCheck ( File basedir , String ... relativeNames ) throws IOException $F254297 ( addClassesToCheck , basedir , Arrays , relativeNames ) "}, {"code": "public static Short toShort ( String str ) throws PageException $F18816 ( Short , toShortValue , str ) "}, {"code": "public void testReadXmlLangNewStyle $F72 throws Exception { \n\tProperties result = xmlToProperties ( NUM00 ) ; \n\tassertNotNull ( result ) ; \n\t$F253047 ( assertTrue , result ) $F70108 ( assertEquals , result ) $F107616 ( assertEquals , result ) } \n"}, {"code": "public boolean hasPermission ( Security security , GenericValue userLogin ) { \n\treturn OrderReadHelper . hasPermission ( security , userLogin , orderHeader ) ; \n\t} \n"}, {"code": "protected boolean filterFiles $F11301 ( files ) { \n\tif ( task . getNoMtimeCheck ( ) || isOutputRepositoryURL ( ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tIterator $F11299 iter = files . iterator ( ) ; \n\twhile $F2921 ( iter ) { \n\t\tFile file = iter . next ( ) ; \n\t\tModule module = inferModule ( file ) ; \n\t\tif ( module == null ) { \n\t\t\ttask . log ( NUM00 + file , Project . MSG_VERBOSE ) ; \n\t\t\t$F598 } \n\t\tif ( module . getVersion ( ) == null ) { \n\t\t\ttask . log ( $F2989 ( module ) , Project . MSG_VERBOSE ) ; \n\t\t\t$F598 } \n\t\tlong oldest = getArtifactFileTime ( module , file ) ; \n\t\tif ( oldest == Long . MAX_VALUE ) { \n\t\t\tFile outModuleDir = getArtifactDir ( module ) ; \n\t\t\toldest = oldestOutputArtifact ( Long . MAX_VALUE , outModuleDir ) ; \n\t\t\ttask . log ( NUM00 + module + NUM00 + new Date ( oldest ) , Project . MSG_DEBUG ) ; \n\t\t\t} \n\t\telse { \n\t\t\ttask . log ( NUM00 + file + NUM00 + module + NUM00 + new Date ( oldest ) , Project . MSG_DEBUG ) ; \n\t\t\t} \n\t\t$F105872 ( newestFile , file ) task . log ( NUM00 + file + NUM00 + new Date ( newestFile ) , Project . MSG_DEBUG ) ; \n\t\tif ( newestFile != Long . MIN_VALUE && oldest != Long . MAX_VALUE && newestFile < oldest ) { \n\t\t\ttask . log ( NUM00 + file + NUM00 ) ; \n\t\t\t$F7042 ( iter ) } \n\t\t} \n\t$F214965 ( files ) } \n"}, {"code": "public void flush $F72 $F29882 ( outputStream ) "}, {"code": "public int createMeasures ( MSLAGoal goal ) { \n\tString sql = $F34354 + NUM00 + NUM00 + MInOut . Table_ID + NUM00 ; \n\tint counter = NUM00 ; \n\tPreparedStatement pstmt = null ; \n\tResultSet rs = null ; \n\ttry { \n\t\t$F47577 ( pstmt , DB , sql ) pstmt . setInt ( NUM00 , goal . getC_BPartner_ID ( ) ) ; \n\t\tpstmt . setInt ( NUM00 , goal . getPA_SLA_Goal_ID ( ) ) ; \n\t\t$F47578 ( rs , pstmt ) while $F1682 ( rs ) { \n\t\t\t$F24632 ( M_InOut_ID , rs ) $F307245 ( MeasureActual , rs ) Timestamp MovementDate = rs . getTimestamp ( NUM00 ) ; \n\t\t\tString Description = rs . getString ( NUM00 ) + NUM00 + rs . getTimestamp ( NUM00 ) ; \n\t\t\tif ( goal . isDateValid ( MovementDate ) ) { \n\t\t\t\tMSLAMeasure measure = new MSLAMeasure ( goal , MovementDate , MeasureActual , Description ) ; \n\t\t\t\tmeasure . setLink ( MInOut . Table_ID , M_InOut_ID ) ; \n\t\t\t\tif $F262254 ( measure ) counter ++ ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F209655 ( log , Level , e ) $F47585 ( DB , rs , pstmt ) return counter ; \n\t} \n"}, {"code": "public E removeAt ( int index ) { \n\tfinal Object old = mArray [ index ] ; \n\tif ( mSize <= NUM00 ) { \n\t\tif ( DEBUG ) Log . d ( TAG , NUM00 + mHashes . length + NUM00 ) ; \n\t\tfreeArrays ( mHashes , mArray , mSize ) ; \n\t\tmHashes = SupportContainerInternals . EMPTY_INTS ; \n\t\tmArray = SupportContainerInternals . EMPTY_OBJECTS ; \n\t\tmSize = NUM00 ; \n\t\t} \n\telse { \n\t\tif ( mHashes . length > ( BASE_SIZE * NUM00 ) && mSize < mHashes . length / NUM00 ) { \n\t\t\tfinal int n = mSize > ( BASE_SIZE * NUM00 ) ? $F107995 ( mSize ) : ( BASE_SIZE * NUM00 ) ; \n\t\t\tif ( DEBUG ) Log . d ( TAG , NUM00 + mHashes . length + NUM00 + n ) ; \n\t\t\t$F92861 ( ohashes , mHashes ) $F108000 ( oarray , mArray ) allocArrays ( n ) ; \n\t\t\tmSize -- ; \n\t\t\tif ( index > NUM00 ) { \n\t\t\t\t$F100653 ( DEBUG , Log , TAG , index ) $F135 ( System , ohashes , mHashes , index ) $F135 ( System , oarray , mArray , index ) } \n\t\t\tif ( index < mSize ) { \n\t\t\t\tif ( DEBUG ) Log . d ( TAG , $F37980 ( index , mSize ) + index ) ; \n\t\t\t\t$F108006 ( System , ohashes , index , mHashes , mSize ) $F108006 ( System , oarray , index , mArray , mSize ) } \n\t\t\t} \n\t\telse { \n\t\t\tmSize -- ; \n\t\t\tif ( index < mSize ) { \n\t\t\t\tif ( DEBUG ) Log . d ( TAG , $F37980 ( index , mSize ) + index ) ; \n\t\t\t\t$F108014 ( System , mHashes , index , mSize ) $F108014 ( System , mArray , index , mSize ) } \n\t\t\tmArray [ mSize ] = null ; \n\t\t\t} \n\t\t} \n\treturn ( E ) old ; \n\t} \n"}, {"code": "$F1 public String resolveVideoUrl ( $F5466 final Video video , Step step ) { \n\t$F1275 ( video ) String localPath = databaseFacade . getPathToVideoIfExist ( video ) ; \n\tif ( localPath != null && checkExistingOnDisk ( localPath , step ) ) { \n\t\treturn localPath ; \n\t\t} \n\telse { \n\t\tList < VideoUrl > urlList = video . getUrls ( ) ; \n\t\tif $F45555 ( urlList ) $F1274 return resolveFromWeb ( urlList ) ; \n\t\t} \n\t} \n"}, {"code": "protected Object lookupService $F72 throws Exception { \n\tObject service = null ; \n\tServiceTemplate templ ; \n\tif ( template == null ) { \n\t\t$F18547 types = ( serviceClass == null ? null : $F139647 ( serviceClass ) ) ; \n\t\t$F12345 entry = ( serviceName == null ? null : new Entry [ ] { \n\t\t\tnew Name ( serviceName ) } \n\t\t) ; \n\t\ttempl = new ServiceTemplate ( null , types , entry ) ; \n\t\t} \n\telse { \n\t\ttempl = template ; \n\t\t} \n\tLookupLocator [ ] lookupLocators = null ; \n\tif ( locators != null ) { \n\t\tlookupLocators = new LookupLocator [ locators . length ] ; \n\t\tfor ( $F1139 ( i , locators ) ) { \n\t\t\tString locator = locators [ i ] ; \n\t\t\t$F48788 ( locator ) lookupLocators [ i ] = new LookupLocator ( locator ) ; \n\t\t\t} \n\t\t} \n\tServiceDiscoveryManager serviceDiscovery = null ; \n\ttry { \n\t\tserviceDiscovery = SharedDiscoveryManagement . getBackwardsServiceDiscoveryManager ( groups , lookupLocators , null ) ; \n\t\tServiceItem returnObject = serviceDiscovery . lookup ( templ , null , timeout ) ; \n\t\tif ( returnObject != null ) $F145688 ( service , returnObject ) } \n\tfinally { \n\t\tif ( serviceDiscovery != null ) { \n\t\t\ttry { \n\t\t\t\t$F72716 ( serviceDiscovery ) } \n\t\t\t$F92403 ( logger , e ) } \n\t\t} \n\treturn service ; \n\t} \n"}, {"code": "public static boolean equals $F66005 ( obj1 , obj2 ) { \n\treturn $F1256 ( obj1 , obj2 ) ; \n\t} \n"}, {"code": "public void testMergeSameFilterWithInitParamInTwoDocuments $F72 throws Exception { \n\tString srcXml = $F40645 + NUM00 + NUM00 + NUM00 ; \n\t$F34646 ( srcWebXml , WebXmlIo , srcXml ) String mergeXml = $F40645 + NUM00 + NUM00 + NUM00 ; \n\t$F34646 ( mergeWebXml , WebXmlIo , mergeXml ) $F34648 ( merger , srcWebXml ) merger . mergeFilters ( mergeWebXml ) ; \n\t$F100788 ( assertTrue , WebXmlUtils , srcWebXml ) $F3803 filterInitParamNames = WebXmlUtils . getFilterInitParamNames ( srcWebXml , NUM00 ) ; \n\tassertTrue ( $F10470 ( filterInitParamNames ) ) ; \n\t$F100793 ( assertEquals , filterInitParamNames ) $F3803 filterMappings = WebXmlUtils . getFilterMappings ( srcWebXml , NUM00 ) ; \n\t$F70108 ( assertEquals , filterMappings ) $F100793 ( assertEquals , filterMappings ) } \n"}, {"code": "public WebappTemplateLoader ( ServletContext servletContext , String subdirPath ) { \n\t$F826 ( servletContext ) $F826 ( subdirPath ) $F2936 ( subdirPath ) if $F2364 ( subdirPath ) { \n\t\tsubdirPath += NUM00 ; \n\t\t} \n\t$F48788 ( subdirPath ) this . subdirPath = subdirPath ; \n\tthis . servletContext = servletContext ; \n\t} \n"}, {"code": "$F22330 public static $F4203 $F10809 insert ( $F10809 dest , T src , int offset , Class componentType ) { \n\t$F10809 temp = ( $F10809 ) Array . newInstance ( componentType , dest . length + NUM00 ) ; \n\t$F135 ( System , dest , temp , offset ) temp [ offset ] = src ; \n\tSystem . arraycopy ( dest , offset , temp , offset + NUM00 , dest . length - offset ) ; \n\treturn temp ; \n\t} \n"}, {"code": "$F1 public void flush $F72 throws IOException $F139965 ( writer , buffer , fill ) "}, {"code": "public MetricInstance withDependencyMetricNames $F24643 ( dependencyMetricNames ) { \n\treturn new MetricInstance ( metricName , maker , $F10148 ( dependencyMetricNames ) ) ; \n\t} \n"}, {"code": "public static IStatus validateMethodName ( String name ) { \n\treturn validateMethodName ( name , CompilerOptions . VERSION_1_3 , CompilerOptions . VERSION_1_3 ) ; \n\t} \n"}, {"code": "$F1431 void notifyAlarmClock ( TimerAlarmClockNotification notification ) { \n\tTimerNotification timerNotification = null ; \n\tDate timerDate = null ; \n\tTimerAlarmClock alarmClock = ( TimerAlarmClock ) notification . getSource ( ) ; \n\tsynchronized ( Timer . this ) { \n\t\tfor ( $F131 obj : timerTable . values ( ) ) { \n\t\t\tif ( obj [ ALARM_CLOCK_INDEX ] == alarmClock ) { \n\t\t\t\ttimerNotification = ( TimerNotification ) obj [ TIMER_NOTIF_INDEX ] ; \n\t\t\t\ttimerDate = ( Date ) obj [ TIMER_DATE_INDEX ] ; \n\t\t\t\t$F597 } \n\t\t\t} \n\t\t} \n\tsendNotification ( timerDate , timerNotification ) ; \n\tupdateTimerTable ( timerNotification . getNotificationID ( ) ) ; \n\t} \n"}, {"code": "public ProfilerEntity start $F72 { \n\t$F101251 ( start_time , System ) return this ; \n\t} \n"}, {"code": "public static $F62483 $F62484 of ( E e1 , E e2 , E e3 ) { \n\t$F62484 set = of ( e1 , e2 ) ; \n\tset . add ( e3 ) ; \n\treturn set ; \n\t} \n"}, {"code": "public PickRequest withCameraPicsDirectory ( $F5466 final File pDirFile ) { \n\tthis . mCustomCameraPicsDirPath = pDirFile == null ? null : pDirFile . getAbsolutePath ( ) ; \n\treturn this ; \n\t} \n"}, {"code": "public void prepareForNextRun $F72 { \n\tfor ( $F6268 ( i ) ) { \n\t\t$F58463 ( System ) $F110998 ( Thread , e ) } \n\t} \n"}, {"code": "$F99425 ( os , writeInt , CACHE_MAGIC , writeString , key , etag , writeLong , serverDate , lastModified , ttl , softTtl , writeStringStringMap , responseHeaders , _BOOL , VolleyLog , e ) "}, {"code": "public void add ( Chip chip ) { \n\tif ( ! mChipList . contains ( chip ) || mToleratingDuplicate ) $F36131 ( mChipList , chip , notifyUpdate ) } \n"}, {"code": "private boolean checkTripZoneConsistency $F72 { \n\t$F973 ( log ) $F11293 ( missingZones ) for ( Trip T : trips . values ( ) ) { \n\t\tBasicLocation zo = zones . getLocation ( Id . create ( T . zone_o , Zone . class ) ) ; \n\t\tBasicLocation zd = zones . getLocation ( Id . create ( T . zone_d , Zone . class ) ) ; \n\t\tif ( zo == null ) { \n\t\t\tmissingZones . add ( T . zone_o ) ; \n\t\t\t} \n\t\tif ( zd == null ) { \n\t\t\tmissingZones . add ( T . zone_d ) ; \n\t\t\t} \n\t\t} \n\tif $F3817 ( missingZones ) { \n\t\tString msg = $F37513 ( missingZones ) ; \n\t\tfor ( String s : missingZones ) msg += $F369 ( s ) ; \n\t\tlog . error ( msg ) ; \n\t\treturn _BOOL ; \n\t\t} \n\telse $F973 ( log ) return _BOOL ; \n\t} \n"}, {"code": "private int insertIndexForLayer ( Component comp , int layer , int position ) { \n\tint i , count , curLayer ; \n\tint layerStart = - NUM00 ; \n\tint layerEnd = - NUM00 ; \n\tint componentCount = getComponentCount ( ) ; \n\tArrayList $F44984 compList = new ArrayList $F44984 ( componentCount ) ; \n\tfor ( $F119 ( index , componentCount ) ) { \n\t\tif ( getComponent ( index ) != comp ) $F3762 ( compList , getComponent , index ) } \n\t$F8935 ( count , compList ) for ( i = NUM00 ; \n\ti < count ; \n\ti ++ ) { \n\t\tcurLayer = getLayer ( compList . get ( i ) ) ; \n\t\tif ( layerStart == - NUM00 && curLayer == layer ) { \n\t\t\tlayerStart = i ; \n\t\t\t} \n\t\tif ( curLayer < layer ) { \n\t\t\tif ( i == NUM00 ) $F18712 ( layerStart , layerEnd ) else { \n\t\t\t\tlayerEnd = i ; \n\t\t\t\t} \n\t\t\t$F597 } \n\t\t} \n\tif $F96093 ( layerStart , layerEnd ) return count ; \n\tif ( layerStart != - NUM00 && layerEnd == - NUM00 ) layerEnd = count ; \n\tif ( layerEnd != - NUM00 && layerStart == - NUM00 ) layerStart = layerEnd ; \n\t$F101463 ( position , layerEnd ) if ( position > - NUM00 && layerStart + position <= layerEnd ) return layerStart + position ; \n\treturn layerEnd ; \n\t} \n"}, {"code": "public void testTimedInvokeAll2 $F72 throws InterruptedException { \n\t$F25236 ( e ) PoolCleaner cleaner = null ; \n\ttry { \n\t\tcleaner = cleaner ( e ) ; \n\t\tList < $F171452 > r = e . invokeAll ( new ArrayList < Callable $F4 > $F72 , MEDIUM_DELAY_MS , MILLISECONDS ) ; \n\t\tassertTrue ( r . isEmpty ( ) ) ; \n\t\t} \n\t$F14364 ( cleaner ) } \n"}, {"code": "public static WaitDialog showDialog ( WaitDialog . Runnable runnable , String message , Container container , int width , int height ) { \n\tWaitDialog newDialog = null ; \n\tif ( container instanceof JDialog ) { \n\t\tnewDialog = new WaitDialog ( ( JDialog ) container ) ; \n\t\t} \n\telse if ( container instanceof JFrame ) { \n\t\tnewDialog = new WaitDialog ( ( JFrame ) container ) ; \n\t\t} \n\telse { \n\t\tnewDialog = new WaitDialog ( ( JDialog ) null ) ; \n\t\tnewDialog . setLocationRelativeTo ( container ) ; \n\t\t} \n\tnewDialog . buildDialog ( width , height ) ; \n\trunnable . setDialog ( newDialog ) ; \n\tnewDialog . container = container ; \n\tnewDialog . runnable = runnable ; \n\tnewDialog . setMessage ( message ) ; \n\tThread processThread = new ProcessThread ( newDialog ) ; \n\t$F2346 ( processThread ) while ( $F181253 ( newDialog ) ) { \n\t\ttry $F31130 ( Thread ) $F109995 } \n\treturn newDialog ; \n\t} \n"}, {"code": "public void testFlipBitPositiveOutside2 $F72 { \n\t$F17888 int aSign = NUM00 ; \n\tint number = NUM00 ; \n\tbyte $F3018 = { \n\t\tNUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 } \n\t; \n\t$F3023 ( aNumber , aSign , aBytes ) $F103435 ( result , aNumber , number ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) } \n"}, {"code": "public synchronized void write $F1313 ( off , len ) throws IOException { \n\tif ( len <= NUM00 ) $F665 int freeSpace = buffer . length - pos ; \n\tif ( len <= freeSpace ) { \n\t\tSystem . arraycopy ( b , off , buffer , pos , len ) ; \n\t\tpos += len ; \n\t\t$F665 } \n\tflush ( ) ; \n\tint local_requested ; \n\twhile ( _BOOL ) { \n\t\tsynchronized ( lock ) { \n\t\t\twhile ( ( local_requested = requested ) < NUM00 && ! disconnected ) { \n\t\t\t\t$F29028 ( lock ) } \n\t\t\tif ( disconnected ) $F3575 } \n\t\tif ( local_requested < len ) { \n\t\t\tmanager . sendTransmit ( info , b , off , local_requested ) ; \n\t\t\toff += local_requested ; \n\t\t\tlen -= local_requested ; \n\t\t\tsynchronized ( lock ) { \n\t\t\t\trequested -= local_requested ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tmanager . sendTransmit ( info , b , off , len ) ; \n\t\t\tsynchronized ( lock ) { \n\t\t\t\trequested -= len ; \n\t\t\t\t} \n\t\t\t$F597 } \n\t\t} \n\t} \n"}, {"code": "protected Alarm $F72 $F1210 ( this ) "}, {"code": "public void removeMouseMode ( MapMouseMode med ) { \n\tboolean needToAdjustActiveMode = _BOOL ; \n\t$F2329 ( med ) if $F1238 ( med , activeMouseMode ) { \n\t\tneedToAdjustActiveMode = _BOOL ; \n\t\tsetInactive ( med ) ; \n\t\t} \n\tfor ( MapMouseMode checkMM : mouseModes ) { \n\t\tif $F1238 ( med , checkMM ) { \n\t\t\tmed . removeAllMapMouseListeners ( ) ; \n\t\t\t} \n\t\telse if ( needToAdjustActiveMode ) { \n\t\t\tsetActive ( checkMM ) ; \n\t\t\tneedToAdjustActiveMode = _BOOL ; \n\t\t\t} \n\t\t} \n\tmouseModes . remove ( med ) ; \n\tfirePropertyChange ( MouseModesProperty , null , mouseModes ) ; \n\t} \n"}, {"code": "$F1 public boolean hasDispatchFunction $F72 { \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void addMap ( $F15232 ( map ) , K min , K max ) { \n\tif ( min != null && max != null && keyType . compare ( min , max ) > NUM00 ) { \n\t\tDataUtils . newIllegalArgumentException ( NUM00 , min , max ) ; \n\t\t} \n\tint len = shards . length + NUM00 ; \n\tShard $F9340 [ ] newShards = Arrays . copyOf ( shards , len ) ; \n\tShard $F9340 newShard = new Shard $F9340 $F72 ; \n\tnewShard . map = map ; \n\tnewShard . minIncluding = min ; \n\tnewShard . maxExcluding = max ; \n\tnewShards [ len - NUM00 ] = newShard ; \n\tshards = newShards ; \n\t} \n"}, {"code": "private void retryFailedInterfaces $F72 { \n\tfor ( $F2774 ( i , failedInterfaces ) ) { \n\t\tNetworkInterface nic = ( NetworkInterface ) i . next ( ) ; \n\t\ttry { \n\t\t\tif ( nic != null ) { \n\t\t\t\tsocket . setNetworkInterface ( nic ) ; \n\t\t\t\t} \n\t\t\tsocket . joinGroup ( requestAddr ) ; \n\t\t\t$F7042 ( i ) Level l = multicastInterfacesSpecified ? Level . INFO : Level . FINE ; \n\t\t\tif $F155449 ( logger , l ) { \n\t\t\t\tif ( nic != null ) { \n\t\t\t\t\tlogger . log ( $F157217 ( l , nic ) ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tlogger . log ( l , NUM00 ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t$F29052 } \n\t} \n"}, {"code": "public void writeHeader $F72 throws IOException { \n\tFLVHeader flvHeader = new FLVHeader $F72 ; \n\tflvHeader . setFlagAudio ( _BOOL ) ; \n\tflvHeader . setFlagVideo ( _BOOL ) ; \n\tByteBuffer header = ByteBuffer . allocate ( HEADER_LENGTH + NUM00 ) ; \n\tflvHeader . write ( header ) ; \n\tfile . setLength ( HEADER_LENGTH + NUM00 ) ; \n\tif $F181184 ( header ) { \n\t\t$F980 ( log ) file . write ( header . array ( ) ) ; \n\t\t} \n\telse { \n\t\t$F980 ( log ) $F130978 ( tmp , HEADER_LENGTH ) header . get ( tmp ) ; \n\t\tfile . write ( tmp ) ; \n\t\t} \n\t$F3935 ( bytesWritten , file ) $F725 ( header ) } \n"}, {"code": "public static $F44535 submit ( Runnable task ) { \n\treturn THREAD_POOL . submit ( task ) ; \n\t} \n"}, {"code": "public boolean addOverlay ( Overlay overlay , KmlDocument kmlDoc ) { \n\t$F397 ( overlay , _BOOL ) KmlFeature kmlItem ; \n\tif ( overlay instanceof GroundOverlay ) { \n\t\tkmlItem = new KmlGroundOverlay ( ( GroundOverlay ) overlay ) ; \n\t\t} \n\telse if ( overlay instanceof FolderOverlay ) { \n\t\tkmlItem = new KmlFolder ( ( FolderOverlay ) overlay , kmlDoc ) ; \n\t\t} \n\telse if ( overlay instanceof MarkerClusterer ) { \n\t\tkmlItem = new KmlFolder ( ( MarkerClusterer ) overlay , kmlDoc ) ; \n\t\t} \n\telse if ( overlay instanceof Marker ) { \n\t\tMarker marker = ( Marker ) overlay ; \n\t\tkmlItem = new KmlPlacemark ( marker ) ; \n\t\t} \n\telse if ( overlay instanceof Polygon ) { \n\t\tPolygon polygon = ( Polygon ) overlay ; \n\t\tkmlItem = new KmlPlacemark ( polygon , kmlDoc ) ; \n\t\t} \n\telse if ( overlay instanceof Polyline ) { \n\t\tPolyline polyline = ( Polyline ) overlay ; \n\t\tkmlItem = new KmlPlacemark ( polyline , kmlDoc ) ; \n\t\t} \n\telse { \n\t\treturn _BOOL ; \n\t\t} \n\tmItems . add ( kmlItem ) ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "private < T extends SBResource > T lookForResource ( SBResourceType type , $F20474 clazz ) { \n\t$F5675 resources = lookForResources ( type , clazz ) ; \n\treturn resources != null && $F3816 ( resources ) ? resources . get ( NUM00 ) : null ; \n\t} \n"}, {"code": "private Object produceEvent $F72 throws InvocationTargetException { \n\tif ( ! valid ) { \n\t\tthrow new IllegalStateException ( toString ( ) + NUM00 ) ; \n\t\t} \n\ttry { \n\t\treturn method . invoke ( target ) ; \n\t\t} \n\t$F180169 ( e ) catch ( InvocationTargetException e ) { \n\t\tif ( e . getCause ( ) instanceof Error ) { \n\t\t\tthrow ( Error ) e . getCause ( ) ; \n\t\t\t} \n\t\tthrow e ; \n\t\t} \n\t} \n"}, {"code": "private $F6205 createDashArray ( String dashString ) { \n\t$F6542 ( dashes , dashString ) $F55998 ( floatDashArray ) for ( String dashValue : dashes ) { \n\t\ttry { \n\t\t\tfloatDashArray . add ( Float . parseFloat ( dashValue ) ) ; \n\t\t\t} \n\t\t$F62108 } \n\treturn floatDashArray ; \n\t} \n"}, {"code": "public void cleanPatchByVersion ( String versionName ) { \n\t$F5768 ( patchDirectory , versionName ) String path = $F3884 ( patchDirectory ) + versionName ; \n\tSharePatchFileUtil . deleteDir ( path ) ; \n\t} \n"}, {"code": "public static boolean isValidJavaClassName ( String input ) { \n\tif ( ! StringUtils . hasText ( input ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( ! Character . isJavaIdentifierStart ( input . charAt ( NUM00 ) ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif $F4012 ( input ) { \n\t\tfor ( $F1088 ( i , input ) ) { \n\t\t\tif ( ! Character . isJavaIdentifierPart ( input . charAt ( i ) ) ) { \n\t\t\t\treturn _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void test_create_empty $F72 { \n\tfinal String id = NUM00 ; \n\tfinal $F529 metadata = $F532 ; \n\tmetadata . put ( FileMetadataSchema . ID , id ) ; \n\t$F16824 ( metadata ) final int version = repo . create ( metadata ) ; \n\tmetadata . put ( FileMetadataSchema . VERSION , Integer . valueOf ( version ) ) ; \n\tassertEquals ( NUM00 , NUM00 , version ) ; \n\tRepositoryDocumentImpl doc = ( RepositoryDocumentImpl ) repo . read ( id ) ; \n\tassertTrue ( NUM00 , doc . exists ( ) ) ; \n\tassertEquals ( NUM00 , version , doc . getVersion ( ) ) ; \n\tassertNotSame ( NUM00 , NUM00 , doc . getVersionCreateTime ( ) ) ; \n\tassertEquals ( NUM00 , doc . getVersionCreateTime ( ) , doc . getEarliestVersionCreateTime ( ) ) ; \n\tassertEquals ( NUM00 , doc . getVersionCreateTime ( ) , doc . getMetadataUpdateTime ( ) ) ; \n\t$F529 actual = doc . asMap ( ) ; \n\tassertEquals ( NUM00 , id , actual . get ( FileMetadataSchema . ID ) ) ; \n\tassertEquals ( NUM00 , version , actual . get ( FileMetadataSchema . VERSION ) ) ; \n\tassertEquals ( NUM00 , NUM00 , actual . get ( NUM00 ) ) ; \n\tassertEquals ( NUM00 , metadata . size ( ) , actual . size ( ) ) ; \n\t} \n"}, {"code": "public static String rename $F1947 ( desc , oldname , newname ) { \n\tif $F283026 ( desc , oldname ) return desc ; \n\t$F280 ( newdesc ) int head = NUM00 ; \n\tint i = NUM00 ; \n\tfor ( $F589 ) { \n\t\t$F12712 ( j , desc , i ) if ( j < NUM00 ) $F597 else if ( desc . startsWith ( oldname , j + NUM00 ) && desc . charAt ( $F222398 ( j , oldname ) ) == NUM00 ) { \n\t\t\t$F13037 ( newdesc , desc , head , j ) $F84 ( newdesc ) newdesc . append ( newname ) ; \n\t\t\t$F84 ( newdesc ) head = i = $F222398 ( j , oldname ) ; \n\t\t\t} \n\t\telse { \n\t\t\ti = desc . indexOf ( NUM00 , j ) + NUM00 ; \n\t\t\t$F7995 ( i ) } \n\t\t} \n\tif ( head == NUM00 ) return desc ; \n\telse { \n\t\t$F1749 ( len , desc ) if ( head < len ) $F13037 ( newdesc , desc , head , len ) $F92 ( newdesc ) } \n\t} \n"}, {"code": "public void sort ( int attIndex ) { \n\t$F1986 vals = new double [ numInstances ( ) ] ; \n\tInstance [ ] backup = new Instance [ vals . length ] ; \n\tfor ( $F1139 ( i , vals ) ) { \n\t\tInstance inst = instance ( i ) ; \n\t\tbackup [ i ] = inst ; \n\t\tdouble val = inst . value ( attIndex ) ; \n\t\tif ( Utils . isMissingValue ( val ) ) { \n\t\t\tvals [ i ] = Double . MAX_VALUE ; \n\t\t\t} \n\t\telse { \n\t\t\tvals [ i ] = val ; \n\t\t\t} \n\t\t} \n\t$F2027 sortOrder = Utils . sortWithNoMissingValues ( vals ) ; \n\tfor ( $F1139 ( i , vals ) ) { \n\t\tm_Instances . set ( i , backup [ sortOrder [ i ] ] ) ; \n\t\t} \n\t} \n"}, {"code": "private static byte CallByteMethodV $F4272 ( env , objJREF , methodID , argAddress ) throws Exception { \n\t$F4274 ( traceJNI , VM ) $F4275 ( RuntimeEntrypoints ) try { \n\t\t$F4276 ( obj , env , objJREF ) Object returnObj = JNIHelpers . invokeWithVarArg ( obj , methodID , argAddress , TypeReference . Byte , _BOOL ) ; \n\t\treturn Reflection . unwrapByte ( returnObj ) ; \n\t\t} \n\t$F4287 ( traceJNI , unexpected , System , env ) } \n"}, {"code": "public boolean adjustEntry ( E entry ) { \n\tfinal SpatialDirectoryEntry se = ( SpatialDirectoryEntry ) entry ; \n\tfinal ModifiableHyperBoundingBox mbr = computeMBR ( ) ; \n\tboolean changed = _BOOL ; \n\tif ( se . hasMBR ( ) ) { \n\t\tfinal int dim = se . getDimensionality ( ) ; \n\t\tfor ( $F119 ( i , dim ) ) { \n\t\t\tif ( Math . abs ( se . getMin ( i ) - mbr . getMin ( i ) ) > Float . MIN_NORMAL ) $F3468 ( changed , _BOOL ) if ( Math . abs ( se . getMax ( i ) - mbr . getMax ( i ) ) > Float . MIN_NORMAL ) $F3468 ( changed , _BOOL ) } \n\t\t} \n\telse { \n\t\tchanged = _BOOL ; \n\t\t} \n\tif ( changed ) { \n\t\tse . setMBR ( mbr ) ; \n\t\t} \n\treturn changed ; \n\t} \n"}, {"code": "private void traceObject ( ObjectReference object , boolean root ) { \n\tif ( VERBOSE ) { \n\t\tTrace . trace ( Item . SANITY , NUM00 , ObjectModel . getString ( object ) ) ; \n\t\t} \n\tif ( object . isNull ( ) ) $F665 boolean marked = blackSet . contains ( object ) ; \n\tif ( ! marked ) $F437553 ( blackSet , object , markStack ) visitor . visitObject ( object , root , marked ) ; \n\t} \n"}, {"code": "private static int compare ( int fromIndex , CharSequence left , CharSequence right ) { \n\t$F43349 ( left ) $F74334 ( right ) for ( int i = fromIndex , n = MathLib . min ( left . length ( ) , right . length ( ) ) ; \n\ti < n ; \n\ti ++ ) { \n\t\tchar c1 = $F29169 ( Character , left , i ) ; \n\t\tchar c2 = $F29169 ( Character , right , i ) ; \n\t\tif ( c1 != c2 ) return c1 - c2 ; \n\t\t} \n\treturn $F15171 ( left , right ) ; \n\t} \n"}, {"code": "public boolean restoreAccessibilityFocus ( CalendarDay day ) { \n\tif ( ( day . year != mYear ) || ( day . month != mMonth ) || ( day . day > mNumCells ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tmTouchHelper . setFocusedVirtualView ( day . day ) ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "public DriverTask createVolumeClone ( List < VolumeClone > clones ) { \n\t$F973 ( LOG ) $F423222 ( task ) $F83 ( errBuffer ) int createCount = NUM00 ; \n\tfor ( VolumeClone clone : clones ) { \n\t\ttry { \n\t\t\tStorageCenterAPI api = connectionManager . getConnection ( clone . getStorageSystemId ( ) ) ; \n\t\t\tScReplay replay = null ; \n\t\t\tapi . checkAndInitVolume ( clone . getParentId ( ) ) ; \n\t\t\tif ( clone . getSourceType ( ) == SourceType . SNAPSHOT ) { \n\t\t\t\treplay = api . getReplay ( clone . getParentId ( ) ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\treplay = api . createReplay ( clone . getParentId ( ) , NUM00 ) ; \n\t\t\t\t} \n\t\t\tScVolume scVol = api . createViewVolume ( clone . getDisplayName ( ) , replay . instanceId ) ; \n\t\t\tclone . setProvisionedCapacity ( SizeUtil . sizeStrToBytes ( scVol . configuredSize ) ) ; \n\t\t\tclone . setAllocatedCapacity ( NUM00 ) ; \n\t\t\tclone . setWwn ( scVol . deviceId ) ; \n\t\t\tclone . setNativeId ( scVol . instanceId ) ; \n\t\t\tclone . setDeviceLabel ( scVol . name ) ; \n\t\t\tclone . setAccessStatus ( AccessStatus . READ_WRITE ) ; \n\t\t\tclone . setReplicationState ( ReplicationState . SYNCHRONIZED ) ; \n\t\t\tcreateCount ++ ; \n\t\t\t} \n\t\tcatch ( DellSCDriverException | StorageCenterAPIException dex ) { \n\t\t\tString error = String . format ( NUM00 , clone . getParentId ( ) , dex ) ; \n\t\t\t$F64611 ( errBuffer , String , error ) } \n\t\t} \n\ttask . setMessage ( errBuffer . toString ( ) ) ; \n\tif $F25745 ( createCount , clones ) $F193217 ( task , TaskStatus ) else if ( createCount == NUM00 ) { \n\t\t$F193219 ( task , TaskStatus ) } \n\telse $F193223 ( task , TaskStatus ) return task ; \n\t} \n"}, {"code": "$F1 public int hashCode $F72 { \n\tif ( hash == NUM00 ) { \n\t\tint result = NUM00 ; \n\t\t$F26525 ( result , range ) $F39428 ( bitsWeight , Double , weight ) $F14881 ( result , bitsWeight ) hash = result ; \n\t\t} \n\treturn hash ; \n\t} \n"}, {"code": "$F1 public void onClick ( View v ) { \n\tint position = Math . min ( ( Integer ) v . getTag ( ) , $F2281 ( mItemList ) ) ; \n\tmSelectedTracker = mItemList . get ( position ) ; \n\tmToggleConfigHandler . showForSelectedToggle ( ) ; \n\tmToggleConfigHandler . showAtLocation ( v ) ; \n\tmToggleConfigHandler . setArrowPosition ( v ) ; \n\t} \n"}, {"code": "private int readFromDataSource ( $F96 target , int offset , int length , int bytesAlreadyRead , boolean allowEndOfInput ) throws InterruptedException , IOException { \n\tif $F2754 ( Thread ) { \n\t\t$F2757 } \n\t$F113519 ( bytesRead , dataSource , target , offset , bytesAlreadyRead , length ) if ( bytesRead == C . RESULT_END_OF_INPUT ) { \n\t\tif ( bytesAlreadyRead == NUM00 && allowEndOfInput ) { \n\t\t\treturn C . RESULT_END_OF_INPUT ; \n\t\t\t} \n\t\tthrow new EOFException $F72 ; \n\t\t} \n\treturn bytesAlreadyRead + bytesRead ; \n\t} \n"}, {"code": "public Explanation explain ( int doc , Explanation freq ) throws IOException { \n\treturn Explanation . match ( score ( doc , freq . getValue ( ) ) , NUM00 + doc + NUM00 + freq . getValue ( ) + NUM00 , Collections . singleton ( freq ) ) ; \n\t} \n"}, {"code": "public static Stack $F4 splitParts ( String name ) { \n\twhile $F3106 ( name ) $F3108 ( name ) Stack $F4 $F125605 ( parts ) ; \n\tint last = NUM00 ; \n\tint pos = NUM00 ; \n\tString part ; \n\twhile ( _BOOL ) { \n\t\tpos = last ; \n\t\twhile ( _BOOL ) { \n\t\t\t$F50296 ( pos , name ) $F7995 ( pos ) if $F198486 ( name , pos ) ++ pos ; \n\t\t\telse $F597 } \n\t\t$F7995 ( pos ) part = name . substring ( last , pos ) ; \n\t\tif $F2364 ( part ) part += NUM00 ; \n\t\tparts . add ( part ) ; \n\t\tlast = pos + NUM00 ; \n\t\t} \n\tpart = name . substring ( last ) ; \n\tif $F2364 ( part ) part += NUM00 ; \n\tparts . add ( part ) ; \n\treturn parts ; \n\t} \n"}, {"code": "public Set $F69372 collectSourceMethods $F72 { \n\tSet $F69372 result = new HashSet $F69372 $F72 ; \n\tfor ( SourceCallChainInfo cci : entry_points ) { \n\t\tcollectSourceMethods ( cci , result ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public void testPrecisionAndScale $F72 throws Exception { \n\ttestPrecisionForType ( NUM00 , NUM00 , - NUM00 , _BOOL ) ; \n\ttestPrecisionForType ( NUM00 , NUM00 , - NUM00 , _BOOL ) ; \n\ttestPrecisionForType ( NUM00 , NUM00 , - NUM00 , _BOOL ) ; \n\ttestPrecisionForType ( NUM00 , NUM00 , - NUM00 , _BOOL ) ; \n\ttestPrecisionForType ( NUM00 , NUM00 , - NUM00 , _BOOL ) ; \n\ttestPrecisionForType ( NUM00 , NUM00 , - NUM00 , _BOOL ) ; \n\ttestPrecisionForType ( NUM00 , NUM00 , - NUM00 , _BOOL ) ; \n\ttestPrecisionForType ( NUM00 , NUM00 , - NUM00 , _BOOL ) ; \n\ttestPrecisionForType ( NUM00 , NUM00 , - NUM00 , _BOOL ) ; \n\ttestPrecisionForType ( NUM00 , NUM00 , - NUM00 , _BOOL ) ; \n\ttestPrecisionForType ( NUM00 , NUM00 , NUM00 , _BOOL ) ; \n\ttestPrecisionForType ( NUM00 , NUM00 , NUM00 , _BOOL ) ; \n\ttestPrecisionForType ( NUM00 , NUM00 , NUM00 , _BOOL ) ; \n\ttestPrecisionForType ( NUM00 , NUM00 , NUM00 , _BOOL ) ; \n\ttestPrecisionForType ( NUM00 , NUM00 , NUM00 , _BOOL ) ; \n\ttestPrecisionForType ( NUM00 , NUM00 , NUM00 , _BOOL ) ; \n\ttestPrecisionForType ( NUM00 , NUM00 , NUM00 , _BOOL ) ; \n\ttestPrecisionForType ( NUM00 , NUM00 , NUM00 , _BOOL ) ; \n\t} \n"}, {"code": "public void register ( NamedBean s ) { \n\tString systemName = s . getSystemName ( ) ; \n\t_tsys . put ( systemName , s ) ; \n\tString userName = s . getUserName ( ) ; \n\tif ( userName != null ) $F1717 ( _tuser , userName , s ) firePropertyChange ( NUM00 , null , $F10189 ( Integer , _tsys ) ) ; \n\ts . addPropertyChangeListener ( this , NUM00 , NUM00 ) ; \n\t} \n"}, {"code": "protected void expandFor $F20449 ( i1 , i2 , d ) { \n\tif $F6389 ( i1 , sizes ) { \n\t\tint oldSize = sizes . size ( ) , capacity = vector . length ; \n\t\tsizes . set ( i1 , NUM00 ) ; \n\t\tif $F1765 ( capacity , sizes ) { \n\t\t\twhile $F1765 ( capacity , sizes ) capacity *= NUM00 ; \n\t\t\t$F69805 ( t , capacity ) $F135 ( System , vector , t , oldSize ) vector = t ; \n\t\t\t} \n\t\tfor ( int i = oldSize ; \n\t\ti < sizes . size ( ) ; \n\t\t++ i ) vector [ i ] = new double [ defaultCapacity2 ] ; \n\t\t} \n\tif ( i2 < sizes . get ( i1 ) ) $F665 int oldSize = sizes . get ( i1 ) , capacity = vector [ i1 ] . length ; \n\tsizes . set ( i1 , i2 + NUM00 ) ; \n\tif ( capacity >= sizes . get ( i1 ) ) $F665 while ( capacity < sizes . get ( i1 ) ) capacity *= NUM00 ; \n\t$F9662 ( t , capacity ) System . arraycopy ( vector [ i1 ] , NUM00 , t , NUM00 , oldSize ) ; \n\tif ( d != NUM00 ) Arrays . fill ( t , oldSize , sizes . get ( i1 ) , d ) ; \n\tvector [ i1 ] = t ; \n\t} \n"}, {"code": "public V put ( final K k , final V v ) { \n\tfinal WeakReference $F2193 ref = newWeakRef ( k , v , referenceQueue ) ; \n\tfinal WeakReference $F2193 oldRef = map . put ( k , ref ) ; \n\tfinal V oldVal = oldRef == null ? null : oldRef . get ( ) ; \n\tif ( queue . add ( v ) && DEBUG ) { \n\t\t$F8922 ( log , k , v ) } \n\tdidUpdate ( k , ref , oldRef ) ; \n\treturn oldVal ; \n\t} \n"}, {"code": "static void delay ( long millis ) throws InterruptedException { \n\tlong nanos = millis * $F18752 ; \n\t$F27344 ( wakeupTime , System , nanos ) do { \n\t\tif ( millis > NUM00 ) Thread . sleep ( millis ) ; \n\t\telse $F5756 ( Thread ) $F27353 ( nanos , wakeupTime , System ) millis = nanos / $F18752 ; \n\t\t} \n\twhile ( nanos >= NUM00 ) ; \n\t} \n"}, {"code": "$F173551 ( sourceList , value , _BOOL ) "}, {"code": "public void delete ( int key ) { \n\tint i = ContainerHelpers . binarySearch ( mKeys , mSize , key ) ; \n\tif ( i >= NUM00 ) $F21314 ( System , mKeys , i , mSize , mValues ) } \n"}, {"code": "public static void keepAlive ( final boolean keepAlive ) { \n\t$F68359 ( setProperty , Boolean , keepAlive ) ; \n\t} \n"}, {"code": "public PageObjectContext peek $F72 { \n\treturn deque . peek ( ) ; \n\t} \n"}, {"code": "protected void writeNamespace ( String prefix , String uri ) throws IOException { \n\tif $F23754 ( prefix ) $F74647 ( writer , prefix ) else $F12032 ( writer ) writer . write ( uri ) ; \n\t$F3410 ( writer ) } \n"}, {"code": "public static void waitSomeTime ( int seconds ) { \n\ttry { \n\t\t$F28300 ( Thread , seconds ) } \n\t$F887 } \n"}, {"code": "public void encode ( String value , ByteBuffer buffer ) throws BufferOverflowException { \n\tif ( value == null ) { \n\t\tbuffer . put ( ( byte ) $F989 ) ; \n\t\t$F665 } \n\t$F1749 ( charCount , value ) if ( charCount == NUM00 ) { \n\t\tbuffer . put ( ( byte ) ( NUM00 | NUM00 ) ) ; \n\t\t$F665 } \n\t$F115 ( position , buffer ) boolean ascii = _BOOL ; \n\tif ( charCount > NUM00 ) { \n\t\tfor ( $F119 ( i , charCount ) ) { \n\t\t\t$F8205 ( c , value , i ) if ( c > NUM00 ) $F3468 ( ascii , _BOOL ) $F180945 ( buffer , c ) } \n\t\t} \n\telse { \n\t\tascii = _BOOL ; \n\t\t} \n\tif ( ascii ) { \n\t\t$F54171 ( position , buffer ) buffer . put ( position - NUM00 , ( byte ) ( buffer . get ( position - NUM00 ) | NUM00 ) ) ; \n\t\t} \n\telse { \n\t\tbuffer . position ( position ) ; \n\t\twriteLength ( charCount + NUM00 , buffer ) ; \n\t\tint charIndex = NUM00 ; \n\t\tfor ( ; \n\t\tcharIndex < charCount ; \n\t\tcharIndex ++ ) { \n\t\t\t$F8205 ( c , value , charIndex ) if ( c > NUM00 ) $F597 $F180945 ( buffer , c ) } \n\t\twriteUTF8String ( value , charCount , charIndex , buffer ) ; \n\t\t} \n\t} \n"}, {"code": "public void testBug71672Statement ( int testStep , Connection testConn , String query , int expectedUpdateCount , $F2027 expectedKeys ) throws SQLException { \n\t$F11282 ( testStmt , testConn ) if ( expectedUpdateCount < NUM00 ) { \n\t\tassertFalse ( testStep + NUM00 , testStmt . execute ( query , Statement . RETURN_GENERATED_KEYS ) ) ; \n\t\t} \n\telse { \n\t\tassertEquals ( testStep + NUM00 , expectedUpdateCount , testStmt . executeUpdate ( query , Statement . RETURN_GENERATED_KEYS ) ) ; \n\t\t} \n\tResultSet testRS = testStmt . getGeneratedKeys ( ) ; \n\tfor ( int k : expectedKeys ) { \n\t\t$F439015 ( assertTrue , testStep , testRS ) assertEquals ( testStep + NUM00 , k , testRS . getInt ( NUM00 ) ) ; \n\t\t} \n\t$F439015 ( assertFalse , testStep , testRS ) $F59 ( testRS ) $F59 ( testStmt ) } \n"}, {"code": "public static PathImpl lookup ( String url ) { \n\tPathImpl pwd = getPwd ( ) ; \n\tif $F14943 ( url ) { \n\t\treturn pwd . lookup ( url , null ) ; \n\t\t} \n\telse { \n\t\treturn PWD . lookup ( url , null ) ; \n\t\t} \n\t} \n"}, {"code": "public static XMLGregorianCalendar now $F72 $F15127 ( getXMLGregorianCalendarValue ) "}, {"code": "protected void addScalarDimension ( int i ) { \n\tfor ( Dimension dimension : dimensionList ) { \n\t\tif ( dimension . getDimension ( ) == i ) $F932 } \n\tdimensionList . add ( new Dimension ( i ) ) ; \n\t} \n"}, {"code": "public void initialize $F72 { \n\tTextureState ts = new TextureState $F72 ; \n\tts . setEnabled ( _BOOL ) ; \n\tsetRenderState ( ts ) ; \n\tfor ( $F3836 ( i , lineSetList ) ) { \n\t\tLineSetState state = lineSetList . get ( i ) ; \n\t\taddLineSet ( state , _BOOL ) ; \n\t\t} \n\tzBufferState = new ZBufferState $F72 ; \n\tzBufferState . setFunction ( ZBufferState . TestFunction . LessThanOrEqualTo ) ; \n\tzBufferState . setEnabled ( _BOOL ) ; \n\tsetRenderState ( zBufferState ) ; \n\t} \n"}, {"code": "protected boolean regExpRegionMatches ( String text , int tStart , String p , int pStart , int plen ) { \n\twhile ( plen -- > NUM00 ) { \n\t\t$F52837 ( tchar , text , tStart ) $F52837 ( pchar , p , pStart ) if ( ! this . fIgnoreWildCards ) { \n\t\t\t$F83608 ( pchar , fSingleWildCard ) } \n\t\t$F83608 ( pchar , tchar ) if ( this . fIgnoreCase ) { \n\t\t\tif ( Character . toUpperCase ( tchar ) == Character . toUpperCase ( pchar ) ) $F1448 if ( Character . toLowerCase ( tchar ) == Character . toLowerCase ( pchar ) ) $F1448 } \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static void initKeys ( KeyStore keystore , Properties props ) { \n\tif ( props . containsKey ( Configuration . WEBCALL_KAFKA_AES ) ) { \n\t\t$F96 key = keystore . decodeKey ( props . getProperty ( Configuration . WEBCALL_KAFKA_AES ) ) ; \n\t\tPreconditions . checkArgument ( ( NUM00 == key . length || NUM00 == key . length || NUM00 == key . length ) , Configuration . WEBCALL_KAFKA_AES + NUM00 ) ; \n\t\tkeystore . setKey ( KeyStore . AES_KAFKA_WEBCALL , key ) ; \n\t\taesKey = key ; \n\t\t} \n\tif ( props . containsKey ( Configuration . WEBCALL_KAFKA_MAC ) ) { \n\t\t$F96 key = keystore . decodeKey ( props . getProperty ( Configuration . WEBCALL_KAFKA_MAC ) ) ; \n\t\tPreconditions . checkArgument ( ( NUM00 == key . length ) , Configuration . WEBCALL_KAFKA_MAC + NUM00 ) ; \n\t\tkeystore . setKey ( KeyStore . SIPHASH_KAFKA_WEBCALL , key ) ; \n\t\tsiphashKey = key ; \n\t\t} \n\t} \n"}, {"code": "public static boolean isEmpty ( StringBuilder str ) { \n\treturn isNull ( str ) || $F41726 ( str ) ; \n\t} \n"}, {"code": "public static Gas register ( Gas gas ) { \n\t$F1338 ( gas ) registeredGasses . add ( gas ) ; \n\treturn $F6798 ( getGas , gas ) ; \n\t} \n"}, {"code": "$F1 public boolean lock $F72 { \n\ttry { \n\t\tlockPath = zk . create ( this . lockTypeFolder + CarbonCommonConstants . FILE_SEPARATOR + lockName , null , Ids . OPEN_ACL_UNSAFE , CreateMode . EPHEMERAL_SEQUENTIAL ) ; \n\t\t$F3803 nodes = zk . getChildren ( this . lockTypeFolder , null ) ; \n\t\tCollections . sort ( nodes ) ; \n\t\tif ( lockPath . endsWith ( nodes . get ( NUM00 ) ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\telse { \n\t\t\tzk . delete ( lockPath , - NUM00 ) ; \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\tcatch ( KeeperException | InterruptedException e ) { \n\t\tLOGGER . error ( e , e . getMessage ( ) ) ; \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "$F1 protected void keyTyped ( char par1 , int par2 ) { \n\ttokenBox . textboxKeyTyped ( par1 , par2 ) ; \n\t$F153042 ( par2 , actionPerformed , buttonList ) } \n"}, {"code": "private static Boolean isAlphanumeric ( final String label ) { \n\tboolean status = _BOOL ; \n\tif $F35028 ( StringUtils , label ) { \n\t\t$F275 ( matcher , patternAlphanumeric , label ) status = matcher . matches ( ) ; \n\t\t} \n\treturn status ; \n\t} \n"}, {"code": "final static String trimURISubstring ( URL src , String sub ) { \n\tfinal String s = src . toExternalForm ( ) ; \n\tfinal int endIndex = s . lastIndexOf ( sub ) ; \n\t$F66071 ( t , s , endIndex ) return t ; \n\t} \n"}, {"code": "$F1 public String globalInfo $F72 { \n\treturn $F38 ; \n\t} \n"}, {"code": "public static void silentCloseInputStream ( InputStream is ) { \n\ttry $F6399 ( is ) $F122999 ( Log , LOG_TAG , e ) } \n"}, {"code": "public boolean removeRow ( int row ) { \n\tif ( m_rows . isValidRow ( row ) ) { \n\t\tfireTableEvent ( row , row , TableModelEvent . ALL_COLUMNS , TableModelEvent . DELETE ) ; \n\t\tm_tuples . invalidate ( row ) ; \n\t\tm_rows . releaseRow ( row ) ; \n\t\tfor ( Iterator cols = getColumns ( ) ; \n\t\tcols . hasNext ( ) ; \n\t\t) { \n\t\t\tColumn c = ( Column ) cols . next ( ) ; \n\t\t\tc . revertToDefault ( row ) ; \n\t\t\t} \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "$F32569 ( panel , cols , rows , filler , filled_cell_11 , _BOOL , cc , Box , index ) "}, {"code": "private boolean isParsableToDouble ( String i ) { \n\treturn i . matches ( NUM00 ) ; \n\t} \n"}, {"code": "protected $F806 initPathsFromProperties ( String rawPaths ) { \n\t$F10127 ( retPaths ) if ( rawPaths != null ) { \n\t\ttry { \n\t\t\t$F46984 ( token , rawPaths , File ) $F17729 ( numPaths , token ) $F58180 ( retPaths , numPaths ) for ( $F119 ( i , numPaths ) ) { \n\t\t\t\tretPaths [ i ] = token . nextToken ( ) ; \n\t\t\t\t} \n\t\t\treturn retPaths ; \n\t\t\t} \n\t\tcatch ( $F104572 e ) $F302 ( e ) } \n\treturn retPaths ; \n\t} \n"}, {"code": "private float colorToAngle ( int color ) { \n\t$F12457 ( colors ) Color . colorToHSV ( color , colors ) ; \n\treturn ( float ) Math . toRadians ( - colors [ NUM00 ] ) ; \n\t} \n"}, {"code": "private void registerDefaultValidatorIds ( Application application , LinkedHashSet $F4 defaultValidatorIds ) { \n\tif ( defaultValidatorIds == null ) { \n\t\t$F22304 ( defaultValidatorIds ) ; \n\t\tif ( isBeanValidatorAvailable ( ) ) { \n\t\t\t$F4377 ( webConfig , WebConfiguration ) if ( ! webConfig . isOptionEnabled ( WebConfiguration . BooleanWebContextInitParameter . DisableDefaultBeanValidator ) ) { \n\t\t\t\tdefaultValidatorIds . add ( BeanValidator . VALIDATOR_ID ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tfor ( String validatorId : defaultValidatorIds ) { \n\t\tif $F6456 ( LOGGER , Level ) { \n\t\t\tLOGGER . log ( Level . FINE , MessageFormat . format ( NUM00 , validatorId ) ) ; \n\t\t\t} \n\t\tapplication . addDefaultValidatorId ( validatorId ) ; \n\t\t} \n\t} \n"}, {"code": "protected void initializeLocation ( V v , Point2D coord ) { \n\tPoint point = locations . get ( v ) ; \n\tcoord . setLocation ( $F25550 ( point ) ) ; \n\t} \n"}, {"code": "public static Date parseDate ( String dateStr ) { \n\tString formatString = NUM00 ; \n\tif $F1277 ( dateStr ) $F139011 ( dateStr ) if $F1277 ( dateStr ) formatString = NUM00 ; \n\tif $F1277 ( dateStr ) formatString = NUM00 ; \n\t$F13438 ( formatter , formatString ) $F18141 ( pos ) return formatter . parse ( dateStr , pos ) ; \n\t} \n"}, {"code": "$F1431 private void doUnload ( MarkedProject markedProject , N4ProgressStateRecorder rec ) throws N4JSCompileErrorException { \n\tif ( createDebugOutput ) { \n\t\tprintln ( NUM00 + markedProject . project ) ; \n\t\t} \n\trec . markStartUnloading ( markedProject ) ; \n\tfor ( Resource res : markedProject . resources ) { \n\t\trec . markUnloadingOf ( res ) ; \n\t\tres . unload ( ) ; \n\t\t} \n\trec . markFinishedUnloading ( markedProject ) ; \n\t} \n"}, {"code": "public void parseLib ( $F2100 ( dataModel ) , String fullText ) throws ParseException { \n\tMatcher m ; \n\tfullText = tmplHelper . normalizeText ( fullText ) ; \n\tm = commentPat . matcher ( fullText ) ; \n\tif $F55142 ( m ) { \n\t\tthrow new ParseException $F580 ; \n\t\t} \n\tString introText = tmplHelper . stripCommentLeadingAsterix ( tmplHelper . cleanTextValue ( m . group ( NUM00 ) ) ) ; \n\t$F545 ( dataModel , introText ) Matcher introm = tmplHelper . getFirstLineMatcher ( introText ) ; \n\tif $F24133 ( introm ) { \n\t\tdataModel . put ( NUM00 , tmplHelper . cleanTextValue ( introm . group ( NUM00 ) ) ) ; \n\t\tdataModel . put ( NUM00 , tmplHelper . cleanTextValue ( introm . group ( NUM00 ) ) ) ; \n\t\t} \n\tString currentSectionName = NUM00 ; \n\t$F529 sectionInfo = makeObjectMap ( ) ; \n\t$F545 ( sectionInfo , currentSectionName ) $F91191 ( sectionInfo ) $F16824 ( sectionInfo ) $F16824 ( sectionInfo ) $F67614 sectionEntryMap = makeDataMap ( ) ; \n\t$F545 ( sectionInfo , sectionEntryMap ) $F67614 entryMap = makeDataMap ( ) ; \n\t$F67614 sectionMap = makeDataMap ( ) ; \n\t$F545 ( sectionMap , sectionInfo ) while $F281 ( m ) { \n\t\tString comment = tmplHelper . cleanTextValue ( m . group ( NUM00 ) ) ; \n\t\tMatcher subm ; \n\t\tsubm = sectionPat . matcher ( comment ) ; \n\t\tif $F24133 ( subm ) { \n\t\t\tcurrentSectionName = tmplHelper . cleanTextValue ( subm . group ( NUM00 ) ) ; \n\t\t\tsectionInfo = makeObjectMap ( ) ; \n\t\t\t$F545 ( sectionInfo , currentSectionName ) $F545 ( sectionInfo , currentSectionName ) $F16824 ( sectionInfo ) sectionInfo . put ( NUM00 , tmplHelper . cleanTextValue ( tmplHelper . stripCommentLeadingAsterix ( subm . group ( NUM00 ) ) ) ) ; \n\t\t\tsectionEntryMap = makeDataMap ( ) ; \n\t\t\t$F545 ( sectionInfo , sectionEntryMap ) sectionMap . put ( currentSectionName , sectionInfo ) ; \n\t\t\t} \n\t\telse { \n\t\t\tsubm = entryPat . matcher ( comment ) ; \n\t\t\tif $F24133 ( subm ) { \n\t\t\t\tString entryTitle = tmplHelper . cleanTextValue ( subm . group ( NUM00 ) ) ; \n\t\t\t\tString entryBody = tmplHelper . cleanTextValue ( subm . group ( NUM00 ) ) ; \n\t\t\t\tString postEntryText = fullText . substring ( m . end ( ) ) ; \n\t\t\t\ttry { \n\t\t\t\t\t$F529 entryInfo = parseEntry ( entryTitle , entryBody , postEntryText ) ; \n\t\t\t\t\t$F545 ( entryInfo , currentSectionName ) $F28495 ( entryName , entryInfo ) if $F4251 ( entryName ) { \n\t\t\t\t\t\tthrow new ParseException $F580 ; \n\t\t\t\t\t\t} \n\t\t\t\t\tif $F1710 ( entryMap , entryName ) { \n\t\t\t\t\t\tthrow new ParseException ( NUM00 + entryName ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\tentryMap . put ( entryName , entryInfo ) ; \n\t\t\t\t\tsectionEntryMap . put ( entryName , entryInfo ) ; \n\t\t\t\t\t} \n\t\t\t\tcatch ( ParseException e ) { \n\t\t\t\t\tthrow new ParseException ( $F6165 ( entryTitle , e ) , e ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse $F12542 } \n\t\t} \n\tmsgHandler . logInfo ( $F10533 ( entryMap ) + sectionMap . size ( ) ) ; \n\t$F545 ( dataModel , sectionMap ) $F545 ( dataModel , entryMap ) } \n"}, {"code": "public void writeFile ( ArrayList < DccLocoAddress > consistList , String fileName ) throws IOException { \n\tElement root = new Element $F580 ; \n\tDocument doc = newDocument ( root , dtdLocation + NUM00 ) ; \n\t$F13404 ( m ) $F16824 ( m ) m . put ( NUM00 , xsltLocation + NUM00 ) ; \n\tProcessingInstruction p = new ProcessingInstruction ( NUM00 , m ) ; \n\tdoc . addContent ( NUM00 , p ) ; \n\tElement roster = new Element $F580 ; \n\tfor ( $F2277 ( i , consistList ) ) { \n\t\tConsist newConsist = consistMan . getConsist ( consistList . get ( i ) ) ; \n\t\troster . addContent ( consistToXml ( newConsist ) ) ; \n\t\t} \n\troot . addContent ( roster ) ; \n\ttry { \n\t\tif ( ! checkFile ( fileName ) ) { \n\t\t\t$F1705 ( file , fileName ) $F4924 ( parentDir , file ) if $F1906 ( parentDir ) { \n\t\t\t\tif $F70667 ( parentDir ) { \n\t\t\t\t\tthrow ( new IOException $F72 ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tif $F380343 ( file ) { \n\t\t\t\tthrow ( new IOException $F72 ) ; \n\t\t\t\t} \n\t\t\t} \n\t\twriteXML ( findFile ( fileName ) , doc ) ; \n\t\t} \n\tcatch ( IOException ioe ) { \n\t\t$F17662 ( log , ioe ) throw ( ioe ) ; \n\t\t} \n\t} \n"}, {"code": "public void train ( Reader aReader ) throws IOException { \n\t$F20481 ( in , aReader ) $F27015 ( line , in ) while ( line != null ) { \n\t\tMatcher m = WORD_PATTERN . matcher ( line . toLowerCase ( ) ) ; \n\t\twhile $F281 ( m ) { \n\t\t\t$F45144 ( word , m ) $F101373 ( count , nWords , word ) if ( count == null ) { \n\t\t\t\t$F107657 ( count ) ; \n\t\t\t\tnWords . put ( word , count ) ; \n\t\t\t\t} \n\t\t\t$F5224 ( count ) } \n\t\t$F36243 ( line , in ) } \n\t} \n"}, {"code": "private void startClient $F72 { \n\tif ( flumeClient != null && ! flumeClient . isActive ( ) ) $F39862 ( flumeClient ) if ( flumeClient == null ) { \n\t\ttry { \n\t\t\tflumeClient = RpcClientFactory . getDefaultInstance ( flumeHostName , flumePort , maxSpanBatchSize ) ; \n\t\t\t} \n\t\tcatch ( FlumeException e ) { \n\t\t\tLOG . warn ( $F5351 ( e ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void vspan ( long start , long end , Paint color , String legend ) { \n\tLegendText legendText = new LegendText ( color , legend ) ; \n\tcomments . add ( legendText ) ; \n\tplotElements . add ( new VSpan ( start , end , color , legendText ) ) ; \n\t} \n"}, {"code": "public void onDraw ( Canvas canvas , int centerX , int centerY ) { \n\t$F24126 ( mVisible ) mArcBounds = new RectF ( centerX - mProgressRadius , centerY - mProgressRadius , centerX + mProgressRadius , centerY + mProgressRadius ) ; \n\tcanvas . drawCircle ( centerX , centerY , mProgressRadius , mProgressBasePaint ) ; \n\tcanvas . drawArc ( mArcBounds , - NUM00 , mProgressAngleDegrees , _BOOL , mProgressPaint ) ; \n\tif ( mProgressAngleDegrees == NUM00 && System . currentTimeMillis ( ) > mTimeToHide ) { \n\t\tmVisible = _BOOL ; \n\t\tif ( mVisibilityListener != null ) { \n\t\t\tmVisibilityListener . onHidden ( ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void removeItemAtInt ( int index , boolean updateChildrenOnMenuViews ) { \n\tif ( ( index < NUM00 ) || $F6389 ( index , mItems ) ) $F665 mItems . remove ( index ) ; \n\tif ( updateChildrenOnMenuViews ) onItemsChanged ( _BOOL ) ; \n\t} \n"}, {"code": "public static $F96 decode ( String s ) $F36684 ( decode , s ) "}, {"code": "public boolean check $F72 { \n\treturn $F30364 ( m_File , m_Handler ) && m_File . exists ( ) ; \n\t} \n"}, {"code": "public static $F27145 zScoreTest ( GeoTimeSerie gts , boolean useMedian , double d ) throws WarpScriptException { \n\tdoubleCheck ( gts ) ; \n\t$F27145 $F17807 ( anomalous_ticks ) ; \n\t$F226310 ( musigma , madsigma , gts , useMedian ) double m = musigma [ NUM00 ] ; \n\tdouble std = musigma [ NUM00 ] ; \n\tif ( NUM00 == std ) { \n\t\treturn anomalous_ticks ; \n\t\t} \n\tfor ( $F168888 ( i , gts ) ) { \n\t\tdouble z = ( gts . doubleValues [ i ] - m ) / std ; \n\t\tif ( Math . abs ( z ) >= d ) { \n\t\t\tanomalous_ticks . add ( gts . ticks [ i ] ) ; \n\t\t\t} \n\t\t} \n\treturn anomalous_ticks ; \n\t} \n"}, {"code": "private void append ( PrintWriter pw , final String k , final String v ) { \n\tif ( v != null ) { \n\t\tpw . println ( k + NUM00 + v ) ; \n\t\t} \n\t} \n"}, {"code": "default B withDefault ( String key , Object value ) { \n\treturn withDefault ( $F164680 ( key , value ) ) ; \n\t} \n"}, {"code": "public void testMultiplyDiffScalePosNeg $F72 { \n\tString a = NUM00 ; \n\tint aScale = NUM00 ; \n\tString b = NUM00 ; \n\tint bScale = - NUM00 ; \n\tString c = NUM00 ; \n\tint cScale = NUM00 ; \n\t$F1918 ( aNumber , a , aScale ) $F1918 ( bNumber , b , bScale ) $F168802 ( result , aNumber , bNumber ) $F1925 ( assertEquals , c , result ) $F1928 ( assertEquals , cScale , result ) } \n"}, {"code": "private void skipWhitespace $F72 { \n\tmatcher . usePattern ( WHITESPACE ) ; \n\tif $F54321 ( matcher ) { \n\t\tmatcher . region ( matcher . end ( ) , matcher . regionEnd ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "protected void createDynamicStyleForComponents ( final TextField tagName , final TextArea tagDesc , final String taregtTagColor ) { \n\ttagName . removeStyleName ( SPUIDefinitions . TAG_NAME ) ; \n\ttagDesc . removeStyleName ( SPUIDefinitions . TAG_DESC ) ; \n\tgetTargetDynamicStyles ( taregtTagColor ) ; \n\ttagName . addStyleName ( TAG_NAME_DYNAMIC_STYLE ) ; \n\ttagDesc . addStyleName ( TAG_DESC_DYNAMIC_STYLE ) ; \n\t} \n"}, {"code": "public void calculate_scores $F72 { \n\tscore = NUM00 ; \n\tif $F9634 ( contents ) { \n\t\tAPI api = API . v ( ) ; \n\t\tSet < InfoKind > source = api . getSourceInfoKinds ( method ) ; \n\t\tSet < InfoKind > sink = api . getSinkInfoKinds ( method ) ; \n\t\tif ( is_system ( method ) ) { \n\t\t\tif ( api . isSafeMethod ( method ) ) score = NUM00 ; \n\t\t\telse if ( api . isSpecMethod ( method ) ) score = NUM00 ; \n\t\t\telse if ( api . isBannedMethod ( method ) ) score = NUM00 ; \n\t\t\tif $F5973 ( source ) score += NUM00 ; \n\t\t\telse if $F5973 ( sink ) score += NUM00 ; \n\t\t\t} \n\t\t$F665 } \n\tfor ( CallChainInfo cci : contents ) { \n\t\tcci . calculate_scores ( ) ; \n\t\tcalls += cci . calls ; \n\t\tsyscalls += cci . syscalls ; \n\t\tif ( cci . score > score ) score = cci . score ; \n\t\t} \n\t} \n"}, {"code": "public $F4203 JsonArray $F4203 createListDtoFromJson $F92641 ( json , dtoInterface ) { \n\tfinal $F20477 dtoProvider = getDtoProvider ( dtoInterface ) ; \n\tfinal List $F115413 list = gson . fromJson ( json , listTypeCache . getUnchecked ( $F111365 ) ) ; \n\tfinal $F5675 $F719 ( result , list ) ; \n\tfor ( JsonElement e : list ) { \n\t\tresult . add ( dtoProvider . fromJson ( e ) ) ; \n\t\t} \n\treturn new JsonArrayImpl $F200 ( result ) ; \n\t} \n"}, {"code": "public void startConsumption ( MultiThreadedBatchProcessor < T , TL > processor ) ; \n"}, {"code": "public static long longForQuery ( SQLiteDatabase db , String query , $F806 selectionArgs ) { \n\tSQLiteStatement prog = db . compileStatement ( query ) ; \n\ttry $F8587 ( longForQuery , prog , selectionArgs ) $F3229 ( prog ) } \n"}, {"code": "public void testOneOne $F72 $F9149 ( numA , numB , res , aNumber , bNumber , result , assertTrue ) "}, {"code": "public String toString $F72 { \n\t$F57047 ( s , ids ) return ( s ) ; \n\t} \n"}, {"code": "$F1 public void remove ( String ... identifiers ) { \n\twhitelist . removeAll ( Arrays . asList ( identifiers ) ) ; \n\t} \n"}, {"code": "public static $F96 checkTlsPreMasterSecretKey ( int clientVersion , int serverVersion , SecureRandom random , $F96 encoded , boolean isFailOver ) { \n\tif ( random == null ) { \n\t\trandom = JCAUtil . getSecureRandom ( ) ; \n\t\t} \n\t$F12496 ( replacer ) random . nextBytes ( replacer ) ; \n\tif ( ! isFailOver && ( encoded != null ) ) { \n\t\tif $F11845 ( encoded ) { \n\t\t\treturn replacer ; \n\t\t\t} \n\t\tint encodedVersion = $F257715 ( encoded ) | $F18896 ( encoded ) ; \n\t\tif ( clientVersion != encodedVersion ) { \n\t\t\tif ( clientVersion > NUM00 || serverVersion != encodedVersion ) { \n\t\t\t\tencoded = replacer ; \n\t\t\t\t} \n\t\t\t} \n\t\treturn encoded ; \n\t\t} \n\treturn replacer ; \n\t} \n"}, {"code": "public Commafier ( final String initial ) $F40007 ( m_separator , DEFAULT_SEPARATOR , sb , initial ) "}, {"code": "public void write ( File file ) throws IOException { \n\tPrintWriter pw = new PrintWriter ( new OutputStreamWriter ( new FileOutputStream ( file ) , NUM00 ) , _BOOL ) ; \n\tif ( fromDir != null ) { \n\t\tpw . println ( NUM00 + fromDir + NUM00 + fromExt ) ; \n\t\t} \n\tString str = null ; \n\tfor ( $F2277 ( i , bList ) ) { \n\t\tstr = ( String ) ( bList . elementAt ( i ) ) ; \n\t\tpw . println ( str ) ; \n\t\t} \n\t} \n"}, {"code": "private void log ( IStatus status ) { \n\tResourcesPlugin . log ( status ) ; \n\t} \n"}, {"code": "static private StringBuilder replace ( StringBuilder input , java . util . regex . Pattern pattern , String replacement ) { \n\tjava . util . regex . Matcher m = pattern . matcher ( input ) ; \n\twhile $F281 ( m ) { \n\t\tif ( isEscapedChar ( input . toString ( ) , m . start ( ) ) ) $F1448 input . replace ( m . start ( ) , m . end ( ) , replacement ) ; \n\t\tm . reset ( input ) ; \n\t\t} \n\treturn input ; \n\t} \n"}, {"code": "public static MultisigAggregateModificationTransaction createMultisigModification $F72 { \n\treturn new MultisigAggregateModificationTransaction ( TimeInstant . ZERO , Utils . generateRandomAccount ( ) , Collections . singletonList ( new MultisigCosignatoryModification ( MultisigModificationType . AddCosignatory , Utils . generateRandomAccount ( ) ) ) ) ; \n\t} \n"}, {"code": "public static boolean isJarCacheEnabledDefault $F72 { \n\treturn _isJarCacheEnabled ; \n\t} \n"}, {"code": "public void test_write_flush_update $F72 { \n\tfinal Journal store = ( Journal ) getStore ( ) ; \n\ttry { \n\t\tRWStrategy bufferStrategy = ( RWStrategy ) store . getBufferStrategy ( ) ; \n\t\tfinal int nbytes = NUM00 ; \n\t\t$F2175 ( a , nbytes ) r . nextBytes ( a ) ; \n\t\tfinal long addr = bufferStrategy . write ( ByteBuffer . wrap ( a ) ) ; \n\t\tassertEquals ( nbytes , store . getByteCount ( addr ) ) ; \n\t\t$F17621 ( store ) { \n\t\t\t$F87240 ( b , bufferStrategy , addr ) assertNotNull ( b ) ; \n\t\t\tfor ( $F6268 ( i ) ) { \n\t\t\t\tassertEquals ( NUM00 + i , a [ i ] , b . get ( i ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F17625 ( store ) } \n"}, {"code": "public static void copy ( $F2469 src , int srcOffset , $F2469 dst , int dstOffset , int len ) { \n\tint srcLimit = srcOffset + len ; \n\twhile ( srcOffset < srcLimit ) { \n\t\tint srcIdx = srcOffset & NUM00 ; \n\t\tint dstIdx = dstOffset & NUM00 ; \n\t\tint srcRemainder = NUM00 - srcIdx ; \n\t\tint dstRemainder = NUM00 - dstIdx ; \n\t\t$F17565 ( chunkLen , Math , srcRemainder , dstRemainder ) long mask = maskBelow ( chunkLen ) < < srcIdx ; \n\t\tdst [ dstOffset > > NUM00 ] |= ( ( src [ srcOffset > > NUM00 ] & mask ) > > > srcIdx ) < < dstOffset ; \n\t\tsrcOffset += chunkLen ; \n\t\tdstOffset += chunkLen ; \n\t\t} \n\t} \n"}, {"code": "public static int SAVED_XERROR_HANDLER ( long display , XErrorEvent error ) { \n\tif ( saved_error_handler != NUM00 ) $F845 if $F58998 ( log , PlatformLogger ) { \n\t\tlog . fine ( NUM00 + NUM00 + error . get_resourceid ( ) + NUM00 + NUM00 + error . get_serial ( ) + NUM00 + NUM00 + error . get_error_code ( ) + NUM00 + NUM00 + error . get_request_code ( ) + NUM00 + NUM00 + error . get_minor_code ( ) ) ; \n\t\t} \n\t$F1082 } \n"}, {"code": "protected int inBorder ( int x , int y ) { \n\tBorder b = getBorder ( ) ; \n\t$F1933 ( b , UNDEF ) Insets i = b . getBorderInsets ( this ) ; \n\tif ( x <= i . left ) { \n\t\treturn DOCK_WEST ; \n\t\t} \n\tif ( x >= getWidth ( ) - i . right ) { \n\t\treturn DOCK_EAST ; \n\t\t} \n\tif ( y <= i . top ) { \n\t\treturn DOCK_NORTH ; \n\t\t} \n\tif ( y >= getHeight ( ) - i . bottom ) { \n\t\treturn DOCK_SOUTH ; \n\t\t} \n\treturn UNDEF ; \n\t} \n"}, {"code": "public WallForce $F780 ( gravConst , x1 , y1 , x2 , y2 ) { \n\tparams = new float [ ] { \n\t\tgravConst } \n\t; \n\tminValues = new float [ ] { \n\t\tDEFAULT_MIN_GRAV_CONSTANT } \n\t; \n\tmaxValues = new float [ ] { \n\t\tDEFAULT_MAX_GRAV_CONSTANT } \n\t; \n\tthis . x1 = x1 ; \n\tthis . y1 = y1 ; \n\tthis . x2 = x2 ; \n\tthis . y2 = y2 ; \n\tdx = x2 - x1 ; \n\tdy = y2 - y1 ; \n\t$F118175 ( r , Math , dx , dy ) if ( dx != NUM00 ) dx /= r ; \n\tif ( dy != NUM00 ) dy /= r ; \n\t} \n"}, {"code": "public static void writeLn ( final OutputStream out ) throws IOException $F4050 ( out , LS_BYTES ) "}, {"code": "public static boolean isSystemApplication ( Context context ) { \n\t$F1933 ( context , _BOOL ) return isSystemApplication ( context , context . getPackageName ( ) ) ; \n\t} \n"}, {"code": "public void testPosZero $F72 $F9149 ( numA , numB , res , aNumber , bNumber , result , assertTrue ) "}, {"code": "private static void initializeReleasePlatform $F72 { \n\tString platformProperty = readConfigProperty ( PLATFORM_PROPERTIES , PLATFORM_PROPERTY_KEY ) ; \n\tif ( platformProperty == null ) $F1210 ( logInfo ) else { \n\t\tcurrentPlatform = Platform . valueOf ( platformProperty . toUpperCase ( Locale . UK ) ) ; \n\t\tlogInfo ( NUM00 + currentPlatform ) ; \n\t\t} \n\t} \n"}, {"code": "public static boolean isEmpty ( CharSequence str ) { \n\tif $F6036 ( str ) { \n\t\treturn _BOOL ; \n\t\t} \n\telse { \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "$F1 public FSDataInputStream open ( Path path , int bufferSize ) throws IOException { \n\tString table = getTableName ( _rootPath , path ) ; \n\tString split = getSplitName ( _rootPath , path ) ; \n\tsplit = splitNameWithoutGzipExtension ( split ) ; \n\treturn new FSDataInputStream ( new EmoSplitInputStream ( table , split ) ) ; \n\t} \n"}, {"code": "public void simulateMethod $F5498 ( method , thisVar , returnVar ) { \n\t$F5500 ( subSignature , method ) $F166632 ( subSignature , java_lang_ClassLoader_defineClass0 , method , thisVar , returnVar , params , java_lang_ClassLoader_findBootstrapClass , java_lang_ClassLoader_findLoadedClass , java_lang_ClassLoader_getCallerClassLoader , defaultMethod ) } \n"}, {"code": "public static final String extractIplIdentityHostFrimwareRev ( LocoNetMessage m ) { \n\t$F83 ( s ) s . append ( Integer . toString ( ( $F470482 ( m ) ) > > NUM00 ) ) ; \n\t$F84 ( s ) s . append ( Integer . toString ( ( $F470482 ( m ) ) ) ) ; \n\t$F92 ( s ) } \n"}, {"code": "private void grow $F72 { \n\tif ( keys == null || nkeys >= keys . length ) { \n\t\t$F806 nk = $F113629 ( nkeys ) ; \n\t\t$F806 nv = $F113629 ( nkeys ) ; \n\t\tif ( keys != null ) $F135 ( System , keys , nk , nkeys ) if ( values != null ) $F135 ( System , values , nv , nkeys ) keys = nk ; \n\t\tvalues = nv ; \n\t\t} \n\t} \n"}, {"code": "private $F5675 filter ( $F60962 ( collection ) ) { \n\tfinal $F5675 nullFreeList = new $F5676 $F72 ; \n\tif ( collection != null ) { \n\t\tfor ( final T item : collection ) $F17651 ( item , nullFreeList ) } \n\treturn nullFreeList ; \n\t} \n"}, {"code": "public boolean isSystemClass ( SootClass clz ) $F298 ( allSystemClasses , clz ) "}, {"code": "private $F96 tryDecodeHostToIp ( String host ) { \n\tif $F40448 ( host ) $F4915 ( tryDecodeHostToIPv6 , host ) return tryDecodeHostToIPv4 ( host ) ; \n\t} \n"}, {"code": "$F221804 ( d , imageView , getImageView , viewWidth , getImageViewWidth , viewHeight , getImageViewHeight , drawableWidth , drawableHeight , mBaseMatrix , widthScale , heightScale , mScaleType , ScaleType , scale , Math , mTempSrc , mTempDst , FIT_CENTER , ScaleToFit , FIT_START , FIT_END , FIT_XY , resetMatrix ) "}, {"code": "public $F27878 listAvailableNodes $F60993 ( type ) { \n\t$F207421 ( result ) for ( Node node : availableNodes ) { \n\t\tif ( $F207424 ( type , node ) ) $F207 ( result , node ) } \n\treturn result ; \n\t} \n"}, {"code": "private < T extends Draft3Resource > T lookForResource ( Draft3ResourceType type , $F20474 clazz ) { \n\t$F5675 resources = lookForResources ( type , clazz ) ; \n\treturn resources != null && $F3816 ( resources ) ? resources . get ( NUM00 ) : null ; \n\t} \n"}, {"code": "$F163438 ( file , readFileToString , Charset ) "}, {"code": "private boolean isLocked ( Order order ) { \n\t$F790 ( lock ) try { \n\t\treturn $F60437 ( activeOrders , order ) ; \n\t\t} \n\t$F796 ( lock ) } \n"}, {"code": "$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel ) "}, {"code": "private static $F96 longToByteArray ( long l ) { \n\t$F12496 ( retVal ) for ( $F6268 ( i ) ) { \n\t\t$F8214 ( retVal , i , l ) l >>= NUM00 ; \n\t\t} \n\treturn retVal ; \n\t} \n"}, {"code": "public EncoderTestSuiteBuilder encode $F2236 ( expected , input ) { \n\treturn encode ( NUM00 + input , expected , input ) ; \n\t} \n"}, {"code": "public static boolean isFileTypeSupported ( int fileType ) { \n\tList providers = getMidiFileWriters ( ) ; \n\tfor ( $F2277 ( i , providers ) ) { \n\t\tMidiFileWriter writer = ( MidiFileWriter ) providers . get ( i ) ; \n\t\tif ( writer . isFileTypeSupported ( fileType ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public $F45986 ( username , addMutedUsername ) "}, {"code": "public void overrideCurrentTime ( long time ) { \n\t$F3224 ( startTime , System ) currentTime = NUM00 ; \n\tstoredTime = time ; \n\t} \n"}, {"code": "public static String sc ( Double score ) { \n\t$F574 ( score_str , String , score ) return score_str ; \n\t} \n"}, {"code": "public static boolean validateBindAddress ( String bindAddress ) { \n\t$F72105 ( bindAddress , _BOOL ) if ( InetAddressUtil . validateHost ( bindAddress ) == null ) return _BOOL ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "protected void fail ( String string ) { \n\tlastPrint = NUM00 ; \n\tif $F4012 ( string ) { \n\t\t$F7782 ( data , string ) for ( $F1139 ( i , data ) ) { \n\t\t\tchar c = data [ i ] ; \n\t\t\tif ( c >= NUM00 || c < NUM00 ) { \n\t\t\t\tdata [ i ] = ( char ) ( NUM00 + ( c & NUM00 ) ) ; \n\t\t\t\tstring = null ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( string == null ) { \n\t\t\t$F84838 ( string , data ) } \n\t\t} \n\tprintln ( string ) ; \n\tthrow new AssertionError ( string ) ; \n\t} \n"}, {"code": "public TypecheckResult interpretResults ( TestConfiguration config , CompilationResult compilationResult ) { \n\t$F62418 expectedDiagnostics = readDiagnostics ( config , compilationResult ) ; \n\treturn TypecheckResult . fromCompilationResults ( config , compilationResult , expectedDiagnostics ) ; \n\t} \n"}, {"code": "public boolean isTrustedXACMLProvider $F19845 ( realm , entityId , trustedEntityId , role ) throws SAML2MetaException { \n\tboolean result = _BOOL ; \n\tif ( role != null ) { \n\t\tif ( role . equals ( SAML2Constants . PDP_ROLE ) ) { \n\t\t\tXACMLPDPConfigElement pdpConfig = getPolicyDecisionPointConfig ( realm , entityId ) ; \n\t\t\tif ( pdpConfig != null ) { \n\t\t\t\tresult = isSameCircleOfTrust ( pdpConfig , realm , trustedEntityId ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse if ( role . equals ( SAML2Constants . PEP_ROLE ) ) { \n\t\t\tXACMLAuthzDecisionQueryConfigElement pepConfig = getPolicyEnforcementPointConfig ( realm , entityId ) ; \n\t\t\tresult = isSameCircleOfTrust ( pepConfig , realm , trustedEntityId ) ; \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "private PropertyEditor loadPropertyEditor ( Class clz ) { \n\tPropertyEditor editor = null ; \n\ttry { \n\t\teditor = ( PropertyEditor ) clz . newInstance ( ) ; \n\t\t} \n\t$F1516 ( e ) return editor ; \n\t} \n"}, {"code": "public Distribution ( Instances source , ClassifierSplitModel modelToUse ) throws Exception { \n\tint index ; \n\tInstance instance ; \n\t$F1986 weights ; \n\tm_perClassPerBag = new double [ modelToUse . numSubsets ( ) ] [ NUM00 ] ; \n\tm_perBag = new double [ modelToUse . numSubsets ( ) ] ; \n\ttotaL = NUM00 ; \n\tm_perClass = $F90863 ( source ) ; \n\tfor ( int i = NUM00 ; \n\ti < modelToUse . numSubsets ( ) ; \n\ti ++ ) { \n\t\tm_perClassPerBag [ i ] = $F90863 ( source ) ; \n\t\t} \n\tEnumeration $F90868 enu = source . enumerateInstances ( ) ; \n\twhile $F1444 ( enu ) { \n\t\t$F1445 ( instance , enu ) index = modelToUse . whichSubset ( instance ) ; \n\t\tif ( index != - NUM00 ) { \n\t\t\tadd ( index , instance ) ; \n\t\t\t} \n\t\telse { \n\t\t\tweights = modelToUse . weights ( instance ) ; \n\t\t\taddWeights ( instance , weights ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void writingRequestHeaders $F72 { \n\tif ( sentRequestMillis != - NUM00 ) $F8675 $F3224 ( sentRequestMillis , System ) } \n"}, {"code": "public List < DexlibAbstractInstruction > instructionsAfter ( DexlibAbstractInstruction instruction ) { \n\t$F12747 ( i , instructions , instruction ) if ( i == - NUM00 ) $F29525 ( instruction ) return instructions . subList ( i + NUM00 , instructions . size ( ) ) ; \n\t} \n"}, {"code": "private Alignment fineTuneAlignment ( final Alignment firstCompute , final int xframe , final int yframe , final Point frameLocation , final Point componentLocation , final int compWidth , final int compHeight ) { \n\tswitch ( firstCompute ) { \n\t\tcase TOPLEFT : case TOPRIGHT : if ( componentLocation . x - frameLocation . x + compWidth / NUM00 > xframe / NUM00 ) { \n\t\t\treturn Alignment . TOPRIGHT ; \n\t\t\t} \n\t\telse { \n\t\t\treturn Alignment . TOPLEFT ; \n\t\t\t} \n\t\tcase LEFTBOTTOM : case LEFTTOP : if ( componentLocation . y - frameLocation . y + compHeight / NUM00 > yframe / NUM00 ) { \n\t\t\treturn Alignment . LEFTBOTTOM ; \n\t\t\t} \n\t\telse { \n\t\t\treturn Alignment . LEFTTOP ; \n\t\t\t} \n\t\tcase RIGHTBOTTOM : case RIGHTTOP : if ( componentLocation . y - frameLocation . y + compHeight / NUM00 > yframe / NUM00 ) { \n\t\t\treturn Alignment . RIGHTBOTTOM ; \n\t\t\t} \n\t\telse { \n\t\t\treturn Alignment . RIGHTTOP ; \n\t\t\t} \n\t\tcase BOTTOMLEFT : case BOTTOMRIGHT : if ( componentLocation . x - frameLocation . x + compWidth / NUM00 > xframe / NUM00 ) { \n\t\t\treturn Alignment . BOTTOMRIGHT ; \n\t\t\t} \n\t\telse { \n\t\t\treturn Alignment . BOTTOMLEFT ; \n\t\t\t} \n\t\t$F1267 if ( realAlignment == Alignment . INNERLEFT || realAlignment == Alignment . INNERRIGHT ) { \n\t\t\treturn realAlignment ; \n\t\t\t} \n\t\tif ( componentLocation . x - frameLocation . x > xframe + frameLocation . x - ( compWidth + componentLocation . x ) ) { \n\t\t\treturn Alignment . INNERRIGHT ; \n\t\t\t} \n\t\telse { \n\t\t\treturn Alignment . INNERLEFT ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public boolean isEmpty $F72 { \n\treturn shapes == null ? _BOOL : shapes . isEmpty ( ) ; \n\t} \n"}, {"code": "public static boolean isNetworkAvailable ( Context context ) { \n\t$F40395 ( cm , context , Context ) $F40397 ( netInfo , cm ) return netInfo != null && netInfo . isConnectedOrConnecting ( ) ; \n\t} \n"}, {"code": "public void resetData $F72 { \n\t$F725 ( data ) $F725 ( dataNames ) dataSet . resetData ( dataNames , data , bins ) ; \n\t} \n"}, {"code": "$F1 public URI uploadPackage $F72 { \n\tboolean fileExists = new File ( topologyPackageLocation ) . isFile ( ) ; \n\tif ( ! fileExists ) { \n\t\t$F9472 ( LOG , topologyPackageLocation ) $F1274 } \n\t$F77510 ( filePath , Paths , destTopologyFile ) File parentDirectory = filePath . getParent ( ) . toFile ( ) ; \n\tassert parentDirectory != null ; \n\tif $F1906 ( parentDirectory ) { \n\t\t$F22806 ( LOG ) if $F4928 ( parentDirectory ) { \n\t\t\tLOG . severe ( $F4946 ( parentDirectory ) ) ; \n\t\t\t$F1274 } \n\t\t} \n\tfileExists = new File $F3362 ( filePath ) . isFile ( ) ; \n\tif ( fileExists ) { \n\t\tLOG . fine ( $F369 ( filePath ) ) ; \n\t\t} \n\tLOG . fine ( $F28567 ( topologyPackageLocation , filePath ) ) ; \n\t$F77510 ( source , Paths , topologyPackageLocation ) try { \n\t\tCopyOption [ ] options = new CopyOption [ ] { \n\t\t\tStandardCopyOption . REPLACE_EXISTING } \n\t\t; \n\t\tFiles . copy ( source , filePath , options ) ; \n\t\t} \n\tcatch ( IOException ex ) { \n\t\tLOG . info ( $F370 ( source , ex ) ) ; \n\t\t$F1274 } \n\treturn getUri ( destTopologyFile ) ; \n\t} \n"}, {"code": "public static String stripEscape ( String pattern ) { \n\t$F1275 ( pattern ) $F80469 ( stripped , pattern ) for ( $F1088 ( pos , pattern ) ) { \n\t\t$F1280 ( ch , pattern , pos ) if ( ch != NUM00 ) $F288 ( stripped , ch ) else if ( $F1093 ( pos , pattern ) && $F10825 ( pattern , pos ) ) { \n\t\t\t$F84 ( stripped ) pos += NUM00 ; \n\t\t\t} \n\t\t} \n\t$F92 ( stripped ) } \n"}, {"code": "public long guest_time $F72 $F12907 ( Long , fields ) "}, {"code": "public void auditOperation ( String operation , List < ? extends TaggedLogAPIEntity > entities , $F3803 encodedRowKeys , EntityDefinition entityDefinition ) { \n\tif ( isAuditingRequired ( entityDefinition . getService ( ) ) ) { \n\t\tList < GenericAuditEntity > auditEntities = buildAuditEntities ( operation , entities , encodedRowKeys , entityDefinition ) ; \n\t\tif ( null != auditEntities && NUM00 != auditEntities . size ( ) ) { \n\t\t\tauditSupport . fireAudit ( entityDefinition . getService ( ) , auditEntities ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public Collection $F536800 tokenizeHTML $F72 { \n\tList $F536800 tokens = new ArrayList $F536800 $F72 ; \n\tString nestedTags = nestedTagsRegex ( NUM00 ) ; \n\tPattern p = Pattern . compile ( $F40 + nestedTags + NUM00 , Pattern . CASE_INSENSITIVE ) ; \n\t$F1150 ( m , p , text ) int lastPos = NUM00 ; \n\twhile $F281 ( m ) { \n\t\tif ( lastPos < m . start ( ) ) { \n\t\t\ttokens . add ( HTMLToken . text ( text . substring ( lastPos , m . start ( ) ) ) ) ; \n\t\t\t} \n\t\ttokens . add ( HTMLToken . tag ( text . substring ( m . start ( ) , m . end ( ) ) ) ) ; \n\t\t$F204945 ( lastPos , m ) } \n\tif $F7007 ( lastPos , text ) { \n\t\ttokens . add ( HTMLToken . text ( $F83851 ( text , lastPos ) ) ) ; \n\t\t} \n\treturn tokens ; \n\t} \n"}, {"code": "public void register ( String pattern , String result ) { \n\tAssert . isTrue ( $F56339 ( matchers , results ) ) ; \n\t$F1382 ( pattern ) if $F1277 ( pattern ) $F932 matchers . add ( new StringMatcher ( pattern , _BOOL , _BOOL ) ) ; \n\tresults . add ( result ) ; \n\t} \n"}, {"code": "$F1 public boolean onItemUse ( ItemStack par1ItemStack , EntityPlayer par2EntityPlayer , World par3World , int x , int y , int z , int par7 , float par8 , float par9 , float par10 ) { \n\tif ( ! par3World . isRemote ) { \n\t\tTileEntity tileEntity = par3World . getTileEntity ( x , y , z ) ; \n\t\tif ( tileEntity != null ) { \n\t\t\tif ( tileEntity instanceof TileLauncherPrefab ) { \n\t\t\t\tTileLauncherPrefab missileLauncher = ( TileLauncherPrefab ) tileEntity ; \n\t\t\t\tif ( missileLauncher . getFrequency ( ) > NUM00 ) { \n\t\t\t\t\tsetFrequency ( missileLauncher . getFrequency ( ) , par1ItemStack ) ; \n\t\t\t\t\tpar2EntityPlayer . addChatMessage ( new ChatComponentText ( Reference . CHAT_DESC + EnumColor . GREY + NUM00 + LangUtils . localize ( NUM00 ) + NUM00 + EnumColor . DARK_GREY + getFrequency ( par1ItemStack ) ) ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tpar2EntityPlayer . addChatMessage ( new ChatComponentText ( Reference . CHAT_DESC + EnumColor . GREY + NUM00 + LangUtils . localize ( NUM00 ) ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "$F29422 ( encodedPublicKey , decodedKey , Base64 , keyFactory , KeyFactory , KEY_FACTORY_ALGORITHM , e , Log , TAG ) "}, {"code": "SSLSession toSession ( $F96 data , String host , int port ) { \n\t$F5950 ( bais , data ) $F5337 ( dais , bais ) try { \n\t\t$F5952 ( type , dais ) if ( type != OPEN_SSL ) { \n\t\t\tlog ( new AssertionError ( NUM00 + type ) ) ; \n\t\t\t$F1274 } \n\t\t$F5952 ( length , dais ) $F2175 ( sessionData , length ) dais . readFully ( sessionData ) ; \n\t\t$F5952 ( count , dais ) $F5958 certs = new X509Certificate [ count ] ; \n\t\tfor ( $F119 ( i , count ) ) { \n\t\t\t$F5961 ( length , dais ) $F2175 ( certData , length ) dais . readFully ( certData ) ; \n\t\t\tcerts [ i ] = OpenSSLX509Certificate . fromX509Der ( certData ) ; \n\t\t\t} \n\t\treturn new OpenSSLSessionImpl ( sessionData , host , port , certs , this ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\tlog ( e ) ; \n\t\t$F1274 } \n\t} \n"}, {"code": "private static String parseDERString $F97 ( alterNameValue ) throws Throwable { \n\ttry { \n\t\tASN1StreamParser p = new ASN1StreamParser ( alterNameValue ) ; \n\t\tASN1Encodable d = p . readObject ( ) ; \n\t\tASN1Primitive der = d . toASN1Primitive ( ) ; \n\t\treturn getStringFromObject ( der ) ; \n\t\t} \n\tcatch ( Throwable e ) { \n\t\t$F45904 ( logger , e ) throw e ; \n\t\t} \n\t} \n"}, {"code": "public AtlasMessagesAdapter addCellFactories ( AtlasCellFactory ... cellFactories ) { \n\tfor ( AtlasCellFactory CellFactory : cellFactories ) { \n\t\tCellFactory . setStyle ( mMessageStyle ) ; \n\t\tmCellFactories . add ( CellFactory ) ; \n\t\tmViewTypeCount ++ ; \n\t\tCellType me = new CellType ( _BOOL , CellFactory ) ; \n\t\tmCellTypesByViewType . put ( mViewTypeCount , me ) ; \n\t\tmMyViewTypesByCell . put ( CellFactory , mViewTypeCount ) ; \n\t\tmViewTypeCount ++ ; \n\t\tCellType notMe = new CellType ( _BOOL , CellFactory ) ; \n\t\tmCellTypesByViewType . put ( mViewTypeCount , notMe ) ; \n\t\tmTheirViewTypesByCell . put ( CellFactory , mViewTypeCount ) ; \n\t\t} \n\treturn this ; \n\t} \n"}, {"code": "protected String consumeBOM ( InputStream stream , String encoding ) throws IOException { \n\t$F12496 ( b ) int count = NUM00 ; \n\t$F46282 ( stream ) if $F3057 ( encoding ) { \n\t\t$F3261 ( count , stream , b ) if ( count == NUM00 ) { \n\t\t\tfinal int b0 = b [ NUM00 ] & NUM00 ; \n\t\t\tfinal int b1 = b [ NUM00 ] & NUM00 ; \n\t\t\tfinal int b2 = b [ NUM00 ] & NUM00 ; \n\t\t\tif ( b0 != NUM00 || b1 != NUM00 || b2 != NUM00 ) $F8030 ( stream ) } \n\t\telse $F8030 ( stream ) } \n\telse if $F3106 ( encoding ) { \n\t\t$F3261 ( count , stream , b ) if ( count == NUM00 ) { \n\t\t\tfinal int b0 = b [ NUM00 ] & NUM00 ; \n\t\t\tfinal int b1 = b [ NUM00 ] & NUM00 ; \n\t\t\tif ( b0 == NUM00 && b1 == NUM00 ) $F2455 else if ( b0 == NUM00 && b1 == NUM00 ) $F2455 } \n\t\t$F2268 ( stream ) } \n\treturn encoding ; \n\t} \n"}, {"code": "public static int createWithIdGeneration ( Connection connection , String rawSqlQuery , Object ... parameters ) throws SQLException { \n\tPreparedStatement stmt = null ; \n\tResultSet rs = null ; \n\ttry { \n\t\tstmt = connection . prepareStatement ( rawSqlQuery , Statement . RETURN_GENERATED_KEYS ) ; \n\t\tfor ( $F1139 ( index , parameters ) ) { \n\t\t\tJdbcUtils . bindParameter ( stmt , index + NUM00 , parameters [ index ] ) ; \n\t\t\t} \n\t\t$F3917 ( stmt ) rs = stmt . getGeneratedKeys ( ) ; \n\t\t$F24630 ( rs ) return rs . getInt ( NUM00 ) ; \n\t\t} \n\tfinally { \n\t\tJdbcUtils . closeResultSet ( rs ) ; \n\t\tJdbcUtils . closeStatement ( stmt ) ; \n\t\t} \n\t} \n"}, {"code": "$F99425 ( os , writeInt , CACHE_MAGIC , writeString , key , etag , writeLong , serverDate , lastModified , ttl , softTtl , writeStringStringMap , responseHeaders , _BOOL , VolleyLog , e ) "}, {"code": "public static int andNot ( int $F26223 , int lena , int $F1310 , int lenb , $F2027 target ) { \n\t$F94561 ( lena ) if ( lenb == NUM00 ) { \n\t\t$F135 ( System , a , target , lena ) return lena ; \n\t\t} \n\tif ( ( lenb > > NUM00 ) >= lena ) $F16525 ( andNotBinarySearch , a , lena , b , lenb , target ) int count = NUM00 ; \n\tint i = NUM00 , j = NUM00 ; \n\tint doca = a [ i ] , docb = b [ j ] ; \n\tfor ( $F589 ) { \n\t\tif ( doca > docb ) { \n\t\t\tif ( ++ j >= lenb ) $F597 docb = b [ j ] ; \n\t\t\t} \n\t\telse if ( doca < docb ) { \n\t\t\ttarget [ count ++ ] = doca ; \n\t\t\tif ( ++ i >= lena ) $F597 doca = a [ i ] ; \n\t\t\t} \n\t\telse { \n\t\t\tif ( ++ i >= lena ) $F597 doca = a [ i ] ; \n\t\t\tif ( ++ j >= lenb ) $F597 docb = b [ j ] ; \n\t\t\t} \n\t\t} \n\tint leftover = lena - i ; \n\tif ( leftover > NUM00 ) $F21534 ( System , a , i , target , count , leftover ) return count ; \n\t} \n"}, {"code": "public boolean remove ( HttpConnection connection ) { \n\tTimeValues times = connectionToTimes . remove ( connection ) ; \n\tif ( times == null ) $F95123 ( log , _BOOL ) else { \n\t\treturn System . currentTimeMillis ( ) <= times . timeExpires ; \n\t\t} \n\t} \n"}, {"code": "void createButtons $F72 { \n\tif ( scrollForwardButton != null ) { \n\t\ttabPane . remove ( scrollForwardButton ) ; \n\t\tscrollForwardButton . removeActionListener ( this ) ; \n\t\ttabPane . remove ( scrollBackwardButton ) ; \n\t\tscrollBackwardButton . removeActionListener ( this ) ; \n\t\t} \n\tint tabPlacement = tabPane . getTabPlacement ( ) ; \n\t$F15339 ( width , UIManager ) if ( tabPlacement == TOP || tabPlacement == BOTTOM ) { \n\t\tscrollForwardButton = new ArrowButton ( EAST , width ) ; \n\t\tscrollBackwardButton = new ArrowButton ( WEST , width ) ; \n\t\t} \n\telse { \n\t\tscrollForwardButton = new ArrowButton ( SOUTH , width ) ; \n\t\tscrollBackwardButton = new ArrowButton ( NORTH , width ) ; \n\t\t} \n\tscrollForwardButton . addActionListener ( this ) ; \n\tscrollBackwardButton . addActionListener ( this ) ; \n\ttabPane . add ( scrollForwardButton ) ; \n\ttabPane . add ( scrollBackwardButton ) ; \n\t} \n"}, {"code": "$F1322 ( criteria , oredCriteria ) "}, {"code": "$F9863 ( child , dx , dy , _BOOL , checkHorizontal , mCallback , checkVertical , mTouchSlop , Math ) "}, {"code": "public static String rmSlashFromUrl ( final String url ) { \n\treturn url . endsWith ( NUM00 ) ? $F4019 ( url ) : url ; \n\t} \n"}, {"code": "protected void updateChartLayout $F72 { \n\t$F7600 ( chartContainer ) $F53443 ( selectedMetrics , getSelectedMetrics ) if $F3817 ( selectedMetrics ) { \n\t\tif $F119130 ( selectedMetrics ) { \n\t\t\t$F58107 ( chartContainer ) } \n\t\telse if $F119130 ( selectedMetrics ) { \n\t\t\t$F58107 ( chartContainer ) } \n\t\telse if $F119130 ( selectedMetrics ) { \n\t\t\t$F58107 ( chartContainer ) } \n\t\telse if $F119130 ( selectedMetrics ) { \n\t\t\t$F58107 ( chartContainer ) } \n\t\telse { \n\t\t\tchartContainer . setLayout ( new GridLayout ( ( int ) Math . ceil ( $F74216 ( selectedMetrics ) ) , NUM00 ) ) ; \n\t\t\t} \n\t\tGridLayout layout = ( GridLayout ) chartContainer . getLayout ( ) ; \n\t\tint spaces = layout . getRows ( ) * layout . getColumns ( ) ; \n\t\tfor ( int i = NUM00 ; \n\t\ti < Math . max ( spaces , selectedMetrics . size ( ) ) ; \n\t\ti ++ ) { \n\t\t\tif $F1765 ( i , selectedMetrics ) { \n\t\t\t\tchartContainer . add ( createChart ( selectedMetrics . get ( i ) ) ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tchartContainer . add ( new EmptyPlot ( this ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F8797 ( chartContainer ) } \n"}, {"code": "public String host ( Properties props ) { \n\treturn props . getProperty ( HOST_PROPERTY_KEY , NUM00 ) ; \n\t} \n"}, {"code": "void cancel $F72 { \n\tsetVisible ( _BOOL ) ; \n\t} \n"}, {"code": "$F1 public MemChunkHolder < VolatileMemAllocator > createChunk ( long size , boolean autoreclaim ) { \n\tMemChunkHolder < VolatileMemAllocator > ret = null ; \n\tLong addr = m_vmasvc . allocate ( m_nid , size , _BOOL ) ; \n\tif ( NUM00 == addr && m_activegc ) { \n\t\tm_chunkcollector . waitReclaimCoolDown ( m_gctimeout ) ; \n\t\taddr = m_vmasvc . allocate ( m_nid , size , _BOOL ) ; \n\t\t} \n\tif ( NUM00 != addr ) { \n\t\tret = new MemChunkHolder < VolatileMemAllocator > ( this , addr , size ) ; \n\t\tret . setCollector ( m_chunkcollector ) ; \n\t\t$F160288 ( autoreclaim , m_chunkcollector , ret ) } \n\treturn ret ; \n\t} \n"}, {"code": "public void waitForInvocation ( long msecWait , int numberOfNewEvents ) { \n\t$F657 ( startTime , System ) while ( _BOOL ) { \n\t\tif $F183121 ( System , startTime , msecWait ) { \n\t\t\tthrow new RuntimeException ( NUM00 + numberOfNewEvents + NUM00 + getNewDataListFlattened ( ) . length ) ; \n\t\t\t} \n\t\t$F80820 events = getNewDataListFlattened ( ) ; \n\t\tif ( events . length >= numberOfNewEvents ) $F932 try $F31130 ( Thread ) catch ( InterruptedException e ) $F932 } \n\t} \n"}, {"code": "private String versionName ( String prefix , int ver ) { \n\treturn fName ( prefix ) + String . valueOf ( ver ) ; \n\t} \n"}, {"code": "private void requestPermissionIfNeeded $F72 { \n\tif ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . M ) { \n\t\tint hasEnableCoarseLocationPerm = checkSelfPermission ( Manifest . permission . ACCESS_COARSE_LOCATION ) ; \n\t\tint hasEnableFineLocationPerm = checkSelfPermission ( Manifest . permission . ACCESS_FINE_LOCATION ) ; \n\t\tint hasEnableExternalWritePerm = checkSelfPermission ( Manifest . permission . WRITE_EXTERNAL_STORAGE ) ; \n\t\t$F24645 ( permissionToRequest ) if ( hasEnableCoarseLocationPerm == PackageManager . PERMISSION_DENIED ) { \n\t\t\tpermissionToRequest . add ( Manifest . permission . ACCESS_COARSE_LOCATION ) ; \n\t\t\t} \n\t\tif ( hasEnableFineLocationPerm == PackageManager . PERMISSION_DENIED ) { \n\t\t\tpermissionToRequest . add ( Manifest . permission . ACCESS_FINE_LOCATION ) ; \n\t\t\t} \n\t\tif ( hasEnableExternalWritePerm == PackageManager . PERMISSION_DENIED ) { \n\t\t\tpermissionToRequest . add ( Manifest . permission . WRITE_EXTERNAL_STORAGE ) ; \n\t\t\t} \n\t\tif $F5973 ( permissionToRequest ) { \n\t\t\trequestPermissions ( $F10148 ( permissionToRequest ) , ALLOW_PERMISSIONS ) ; \n\t\t\t} \n\t\telse $F5795 ( initEvent ) } \n\t} \n"}, {"code": "public ExtractMethodRefactoring ( ICompilationUnit unit , int selectionStart , int selectionLength ) { \n\tfCUnit = unit ; \n\tfRoot = null ; \n\tfMethodName = NUM00 ; \n\tfSelectionStart = selectionStart ; \n\tfSelectionLength = selectionLength ; \n\tfVisibility = - NUM00 ; \n\t} \n"}, {"code": "$F1 public boolean done $F72 { \n\tif ( stoppingIncrements && incrementsLeft == NUM00 ) return _BOOL ; \n\telse return _BOOL ; \n\t} \n"}, {"code": "public void parse $F72 throws $F34430 { \n\tint act ; \n\tsymbol lhs_sym ; \n\tshort handle_size , lhs_sym_num ; \n\tproduction_tab = production_table ( ) ; \n\taction_tab = action_table ( ) ; \n\treduce_tab = reduce_table ( ) ; \n\tinit_actions ( ) ; \n\tuser_init ( ) ; \n\tcur_token = scan ( ) ; \n\tstack . push ( new symbol ( NUM00 , start_state ( ) ) ) ; \n\ttos = NUM00 ; \n\tfor ( _done_parsing = _BOOL ; \n\t! _done_parsing ; \n\t) { \n\t\tact = get_action ( $F34439 ( stack ) , cur_token . sym ) ; \n\t\tif ( act > NUM00 ) { \n\t\t\tcur_token . parse_state = act - NUM00 ; \n\t\t\tstack . push ( cur_token ) ; \n\t\t\ttos ++ ; \n\t\t\tcur_token = scan ( ) ; \n\t\t\t} \n\t\telse if ( act < NUM00 ) { \n\t\t\tlhs_sym = do_action ( ( - act ) - NUM00 , this , stack , tos ) ; \n\t\t\t$F34451 ( lhs_sym_num , production_tab , act ) $F34451 ( handle_size , production_tab , act ) for ( $F119 ( i , handle_size ) ) { \n\t\t\t\t$F34454 ( stack ) tos -- ; \n\t\t\t\t} \n\t\t\tact = get_reduce ( $F34439 ( stack ) , lhs_sym_num ) ; \n\t\t\tlhs_sym . parse_state = act ; \n\t\t\tstack . push ( lhs_sym ) ; \n\t\t\ttos ++ ; \n\t\t\t} \n\t\telse if ( act == NUM00 ) { \n\t\t\tsyntax_error ( cur_token ) ; \n\t\t\tif ( ! error_recovery ( _BOOL ) ) $F34462 ( unrecovered_syntax_error , cur_token , done_parsing ) } \n\t\t} \n\t} \n"}, {"code": "private static void writeSet1 ( final BTree btree ) { \n\t$F973 ( log ) for ( $F6268 ( i ) ) { \n\t\tbtree . insert ( i , i ) ; \n\t\t} \n\t} \n"}, {"code": "private $F96 createSegmentTable ( int setupHeaderLength , List < OggPageHeader . PacketStartAndLength > extraPackets ) { \n\t$F1538 ( resultBaos ) $F96 restShouldBe ; \n\t$F96 nextPacket ; \n\trestShouldBe = createSegments ( setupHeaderLength , _BOOL ) ; \n\ttry { \n\t\tresultBaos . write ( restShouldBe ) ; \n\t\tif $F3817 ( extraPackets ) { \n\t\t\tfor ( OggPageHeader . PacketStartAndLength packet : extraPackets ) { \n\t\t\t\tnextPacket = createSegments ( packet . getLength ( ) , _BOOL ) ; \n\t\t\t\tresultBaos . write ( nextPacket ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tcatch ( IOException ioe ) { \n\t\tthrow new RuntimeException $F16296 ( ioe ) ; \n\t\t} \n\t$F11316 ( resultBaos ) } \n"}, {"code": "public static int indexOfIgnoreCase $F60302 ( src , sub , startIndex , endIndex ) { \n\t$F17370 ( startIndex ) $F1749 ( srclen , src ) $F8789 ( endIndex , srclen ) $F1749 ( sublen , sub ) if ( sublen == NUM00 ) { \n\t\treturn startIndex > srclen ? srclen : startIndex ; \n\t\t} \n\t$F37156 ( sub ) int total = endIndex - sublen + NUM00 ; \n\t$F12685 ( c , sub ) mainloop : for ( int i = startIndex ; \n\ti < total ; \n\ti ++ ) { \n\t\tif ( $F954 ( Character , src , i ) != c ) $F1448 int j = NUM00 ; \n\t\tint k = i + NUM00 ; \n\t\twhile ( j < sublen ) { \n\t\t\t$F7882 ( source , Character , src , k ) if $F7883 ( sub , j , source ) { \n\t\t\t\tcontinue mainloop ; \n\t\t\t\t} \n\t\t\tj ++ ; \n\t\t\tk ++ ; \n\t\t\t} \n\t\treturn i ; \n\t\t} \n\t$F150 } \n"}, {"code": "private void addPolygonRing ( LinearRing lr , int cwLeft , int cwRight ) { \n\t$F8504 ( lr ) $F19578 coord = CoordinateArrays . removeRepeatedPoints ( lr . getCoordinates ( ) ) ; \n\tif $F8830 ( coord ) { \n\t\thasTooFewPoints = _BOOL ; \n\t\tinvalidPoint = coord [ NUM00 ] ; \n\t\t$F665 } \n\tint left = cwLeft ; \n\tint right = cwRight ; \n\tif ( CGAlgorithms . isCCW ( coord ) ) { \n\t\tleft = cwRight ; \n\t\tright = cwLeft ; \n\t\t} \n\tEdge e = new Edge ( coord , new Label ( argIndex , Location . BOUNDARY , left , right ) ) ; \n\tlineEdgeMap . put ( lr , e ) ; \n\tinsertEdge ( e ) ; \n\tinsertPoint ( argIndex , coord [ NUM00 ] , Location . BOUNDARY ) ; \n\t} \n"}, {"code": "public boolean acceptsLoadName ( String load ) { \n\t$F12418 ( _loadOption , ALL_LOADS , _BOOL ) if $F1238 ( _loadOption , INCLUDE_LOADS ) $F298 ( _loadList , load ) $F78369 ( _loadList , load ) } \n"}, {"code": "public static void expandLetters ( String letters , WordRelation wordRelation ) { \n\t$F37156 ( letters ) char c ; \n\tfor ( $F1088 ( i , letters ) ) { \n\t\tc = letters . charAt ( i ) ; \n\t\tif ( isDigit ( c ) ) { \n\t\t\twordRelation . addWord ( digit2num [ c - NUM00 ] ) ; \n\t\t\t} \n\t\telse if $F3057 ( letters ) $F71515 ( wordRelation ) else { \n\t\t\twordRelation . addWord ( String . valueOf ( c ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static void writeStringToFile ( File file , String data , Charset encoding , boolean append ) throws IOException { \n\tOutputStream out = null ; \n\ttry { \n\t\tout = openOutputStream ( file , append ) ; \n\t\tIOUtils . write ( data , out , encoding ) ; \n\t\t$F59 ( out ) } \n\t$F18090 ( IOUtils , out ) } \n"}, {"code": "$F1309 public static void subtract ( String name , double amount ) throws UserDoesNotExistException , NoLoanPermittedException { \n\ttry $F141087 ( substract , name , BigDecimal , amount ) catch ( ArithmeticException e ) { \n\t\tlogger . log ( Level . WARNING , $F141088 ( amount , name , e ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "public MnemonicCode ( InputStream wordstream , String wordListDigest ) throws $F248925 { \n\t$F524 ( br , wordstream ) $F16090 ( wordList ) ; \n\tString word ; \n\twhile $F443 ( word , br ) wordList . add ( word ) ; \n\t$F59 ( br ) initializeFromWords ( wordList , wordListDigest ) ; \n\t} \n"}, {"code": "public QKDialog addMenuItem ( String title , long id ) { \n\tmMenuItems . add ( title ) ; \n\tmMenuItemIds . add ( id ) ; \n\treturn this ; \n\t} \n"}, {"code": "public AnchorPane createFingerPrintPanel ( ArrayList < FpPanel > fingerprintPanelList ) $F13736 ( createFingerPrintPanel , fingerprintPanelList ) "}, {"code": "private static boolean isMemoryAccess ( final String value ) { \n\t$F786 ( value ) } \n"}, {"code": "public void addAttribute ( AttributeInfo info ) { \n\tAttributeInfo . remove ( attributes , info . getName ( ) ) ; \n\tattributes . add ( info ) ; \n\t} \n"}, {"code": "private static boolean verifyStringParam $F18289 ( str , maxLength , acceptableCharacters ) { \n\treturn ! ( $F6035 ( str ) || str . length ( ) > maxLength || ! Pattern . matches ( acceptableCharacters , str ) ) ; \n\t} \n"}, {"code": "private int calculateDragSensitivity $F72 { \n\tint range = MAX_DRAG_SENSITIVITY - MIN_DRAG_SENSITIVITY ; \n\treturn Math . round ( ( NUM00 - getDragSensitivity ( ) ) * range + MIN_DRAG_SENSITIVITY ) ; \n\t} \n"}, {"code": "public static String lowerFirstChar ( String string ) { \n\t$F1275 ( string ) if $F71860 ( string ) $F32484 ( string ) $F7542 ( sb , string ) sb . setCharAt ( NUM00 , $F85542 ( Character , sb ) ) ; \n\t$F92 ( sb ) } \n"}, {"code": "public void forEachBlockPosMutableTopDown ( Predicate < BlockPos > func ) { \n\tBlockPos . MutableBlockPos blockPos = new BlockPos . MutableBlockPos $F72 ; \n\tint baseX = getMinBlockX ( ) ; \n\tint baseZ = getMinBlockZ ( ) ; \n\tint blockYMax = getMaxBlockY ( ) ; \n\tfor ( $F6268 ( x ) ) { \n\t\tfor ( $F6268 ( z ) ) { \n\t\t\tblockPos . setPos ( baseX + x , blockYMax , baseZ + z ) ; \n\t\t\tfor ( $F183017 ( y ) ) { \n\t\t\t\tboolean cont = func . test ( blockPos ) ; \n\t\t\t\tblockPos . move ( EnumFacing . DOWN ) ; \n\t\t\t\t$F30724 ( cont ) } \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public String visit ( Type t , Locale locale ) { \n\treturn t . accept ( this , locale ) ; \n\t} \n"}, {"code": "public static final void writeMapXml ( Map val , XmlSerializer out , WriteMapCallback callback ) throws $F52182 { \n\t$F2329 ( val ) Set s = val . entrySet ( ) ; \n\t$F10531 ( i , s ) while $F2921 ( i ) { \n\t\t$F53089 e = ( $F53089 ) i . next ( ) ; \n\t\twriteValueXml ( e . getValue ( ) , $F123408 ( e ) , out , callback ) ; \n\t\t} \n\t} \n"}, {"code": "public static void dropTable ( String table , Connection connection ) { \n\t$F2936 ( table ) $F83 ( dropTableQuery ) $F84 ( dropTableQuery ) dropTableQuery . append ( table ) ; \n\t$F973 ( LOG ) LOG . info ( dropTableQuery ) ; \n\t$F25731 ( executeStatementIfExists , dropTableQuery , connection ) } \n"}, {"code": "private int freeSpace $F72 { \n\treturn buffer . capacity ( ) - buffer . limit ( ) + buffer . position ( ) ; \n\t} \n"}, {"code": "$F1 public $F27878 generate ( int popSize ) { \n\t$F245843 ( population ) for ( int i = NUM00 ; \n\ti < popSize ; \n\t) { \n\t\tNode candidate = grow ( NUM00 ) ; \n\t\tif $F45040 ( candidate ) $F107337 ( population , candidate , i ) } \n\treturn population ; \n\t} \n"}, {"code": "public synchronized void notifyBeforeUse ( CompositeTransaction ct ) throws InvalidSessionHandleStateException { \n\tif ( closed ) throw new InvalidSessionHandleStateException $F580 ; \n\ttry { \n\t\tTransactionContext suspended = null ; \n\t\tif ( ct != null ) { \n\t\t\tIterator < TransactionContext > it = allContexts . iterator ( ) ; \n\t\t\twhile ( it . hasNext ( ) && suspended == null ) { \n\t\t\t\tTransactionContext b = ( TransactionContext ) it . next ( ) ; \n\t\t\t\tif ( b . isSuspendedInTransaction ( ct ) ) { \n\t\t\t\t\tsuspended = b ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tif ( suspended != null ) { \n\t\t\tif $F585 ( LOGGER ) LOGGER . logDebug ( this + NUM00 + ct . getTid ( ) ) ; \n\t\t\tcurrentContext = suspended ; \n\t\t\tcurrentContext . transactionResumed ( ) ; \n\t\t\t} \n\t\telse { \n\t\t\ttry { \n\t\t\t\tif $F8415 ( LOGGER ) LOGGER . logTrace ( this + NUM00 + ct ) ; \n\t\t\t\tcurrentContext . checkEnlistBeforeUse ( ct ) ; \n\t\t\t\t} \n\t\t\tcatch ( UnexpectedTransactionContextException txBoundaryPassed ) { \n\t\t\t\tif $F585 ( LOGGER ) LOGGER . logDebug ( this + NUM00 + ct ) ; \n\t\t\t\tcurrentContext . transactionSuspended ( ) ; \n\t\t\t\tcurrentContext = new TransactionContext ( resource , xaResource ) ; \n\t\t\t\tallContexts . add ( currentContext ) ; \n\t\t\t\ttry { \n\t\t\t\t\tcurrentContext . checkEnlistBeforeUse ( ct ) ; \n\t\t\t\t\t} \n\t\t\t\tcatch ( UnexpectedTransactionContextException e ) { \n\t\t\t\t\tString msg = NUM00 ; \n\t\t\t\t\tLOGGER . logError ( msg , e ) ; \n\t\t\t\t\tthrow new InvalidSessionHandleStateException ( msg ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tcatch ( InvalidSessionHandleStateException e ) $F124189 ( notifySessionErrorOccurred , e ) } \n"}, {"code": "$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel ) "}, {"code": "public void onActivityResult $F39172 ( requestCode , resultCode , data ) { \n\tif ( mInitializationComplete ) { \n\t\tmActivityDelegate . onActivityResultWithNative ( requestCode , resultCode , data ) ; \n\t\t} \n\telse { \n\t\tif ( mPendingActivityResults == null ) { \n\t\t\tmPendingActivityResults = new ArrayList < ActivityResult > $F989 ; \n\t\t\t} \n\t\tmPendingActivityResults . add ( new ActivityResult ( requestCode , resultCode , data ) ) ; \n\t\t} \n\t} \n"}, {"code": "public void deleteSelection $F96672 ( nodes ) { \n\tfor ( $F2277 ( i , nodes ) ) { \n\t\tfor ( $F2290 ( j , i , nodes ) ) { \n\t\t\tif ( nodes . get ( i ) > nodes . get ( j ) ) { \n\t\t\t\t$F85651 ( h , nodes , i ) $F146189 ( nodes , i , j ) nodes . set ( j , h ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tif ( m_bNeedsUndoAction ) { \n\t\taddUndoAction ( new DeleteSelectionAction ( nodes ) ) ; \n\t\t} \n\tboolean bNeedsUndoAction = m_bNeedsUndoAction ; \n\tm_bNeedsUndoAction = _BOOL ; \n\ttry { \n\t\tfor ( $F5373 ( iNode , nodes ) ) $F80218 ( deleteNode , nodes , iNode ) } \n\t$F1516 ( e ) m_bNeedsUndoAction = bNeedsUndoAction ; \n\t} \n"}, {"code": "protected void onCached $F72 { \n\tif $F28793 ( LogConfiguration ) { \n\t\t$F28795 ( logger , Level ) } \n\tuiHandler . hideMessage ( ) ; \n\tupdating = _BOOL ; \n\tfireApplicationCacheEvent ( CacheEvent . onCached ) ; \n\t} \n"}, {"code": "public static void showString ( String title , String content , Dimension dimension ) { \n\tJTextArea area = new JTextArea ( content ) ; \n\tarea . setEditable ( _BOOL ) ; \n\t$F114437 ( scroll , area ) scroll . setPreferredSize ( dimension ) ; \n\tJOptionPane . showMessageDialog ( null , scroll , title , JOptionPane . INFORMATION_MESSAGE ) ; \n\t} \n"}, {"code": "private void markCGForDeletion ( BlockConsistencyGroup consistencyGroup ) { \n\tif ( ! consistencyGroup . getInactive ( ) ) { \n\t\tconsistencyGroup . setStorageController ( null ) ; \n\t\tconsistencyGroup . setInactive ( _BOOL ) ; \n\t\t_dbClient . updateObject ( consistencyGroup ) ; \n\t\t} \n\t} \n"}, {"code": "public LongBuffer put $F189406 ( src , srcOffset , longCount ) $F11682 ( JTranscArrays , src , srcOffset , longCount , remaining , i , put , this ) "}, {"code": "public void playTogether ( Collection $F113170 items ) { \n\tif $F8841 ( items ) { \n\t\tmNeedsSort = _BOOL ; \n\t\tBuilder builder = null ; \n\t\tfor ( Animator anim : items ) { \n\t\t\tif ( builder == null ) { \n\t\t\t\tbuilder = play ( anim ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tbuilder . with ( anim ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private MessageContext createMessageContext ( AxisEngine engine , HttpServletRequest req , HttpServletResponse res , Component component ) { \n\tMessageContext msgContext = new MessageContext ( engine ) ; \n\tString requestPath = getRequestPath ( req ) ; \n\tif ( isDebug ) { \n\t\t$F586 ( log , msgContext ) log . debug ( NUM00 + req . getHeader ( HTTPConstants . HEADER_CONTENT_TYPE ) ) ; \n\t\tlog . debug ( NUM00 + req . getHeader ( HTTPConstants . HEADER_CONTENT_LOCATION ) ) ; \n\t\tlog . debug ( NUM00 + String . valueOf ( homeDir ) ) ; \n\t\t$F586 ( log , requestPath ) log . debug ( NUM00 + String . valueOf ( webInfPath ) ) ; \n\t\tlog . debug ( NUM00 + req . getPathInfo ( ) ) ; \n\t\tlog . debug ( NUM00 + req . getHeader ( HTTPConstants . HEADER_AUTHORIZATION ) ) ; \n\t\tlog . debug ( NUM00 + req . getRemoteAddr ( ) ) ; \n\t\tlog . debug ( NUM00 + String . valueOf ( webInfPath ) ) ; \n\t\t} \n\tmsgContext . setTransportName ( NUM00 ) ; \n\tmsgContext . setProperty ( Constants . MC_HOME_DIR , homeDir ) ; \n\tmsgContext . setProperty ( Constants . MC_RELATIVE_PATH , requestPath ) ; \n\tmsgContext . setProperty ( HTTPConstants . MC_HTTP_SERVLET , this ) ; \n\tmsgContext . setProperty ( HTTPConstants . MC_HTTP_SERVLETREQUEST , req ) ; \n\tmsgContext . setProperty ( HTTPConstants . MC_HTTP_SERVLETRESPONSE , res ) ; \n\tmsgContext . setProperty ( HTTPConstants . MC_HTTP_SERVLETLOCATION , webInfPath ) ; \n\tmsgContext . setProperty ( HTTPConstants . MC_HTTP_SERVLETPATHINFO , req . getPathInfo ( ) ) ; \n\tmsgContext . setProperty ( HTTPConstants . HEADER_AUTHORIZATION , req . getHeader ( HTTPConstants . HEADER_AUTHORIZATION ) ) ; \n\tmsgContext . setProperty ( lucee . runtime . net . rpc . server . Constants . COMPONENT , component ) ; \n\tmsgContext . setProperty ( Constants . MC_REMOTE_ADDR , req . getRemoteAddr ( ) ) ; \n\tServletEndpointContextImpl sec = new ServletEndpointContextImpl $F72 ; \n\tmsgContext . setProperty ( Constants . MC_SERVLET_ENDPOINT_CONTEXT , sec ) ; \n\tString realpath = context . getRealPath ( requestPath ) ; \n\tif ( realpath != null ) { \n\t\tmsgContext . setProperty ( Constants . MC_REALPATH , realpath ) ; \n\t\t} \n\tmsgContext . setProperty ( Constants . MC_CONFIGPATH , webInfPath ) ; \n\treturn msgContext ; \n\t} \n"}, {"code": "$F1 public void invokeCommand ( int argLength , $F806 args , String command ) { \n\tPattern regex = null ; \n\tif $F9634 ( args ) { \n\t\tregex = Pattern . compile ( args [ NUM00 ] ) ; \n\t\t} \n\telse if $F11845 ( args ) { \n\t\tthrow new UsageException $F580 ; \n\t\t} \n\tfor ( AbstractCommand cmd : CommandBus . commands ) tryRegex ( regex , cmd ) ; \n\tfor ( FuzzyCommand cmd : CommandBus . parsers ) tryRegex ( regex , cmd ) ; \n\t} \n"}, {"code": "public static Builder newBuilder $F72 { \n\treturn new Builder $F72 ; \n\t} \n"}, {"code": "protected int parseAndAddNode ( XmlResourceParser parser , HashMap < String , TagParser > tagParserMap , $F17804 screenIds ) throws $F18821 { \n\tif $F3175 ( TAG_INCLUDE , parser ) { \n\t\tfinal int resId = getAttributeResourceValue ( parser , ATTR_WORKSPACE , NUM00 ) ; \n\t\tif ( resId != NUM00 ) $F8587 ( parseLayout , resId , screenIds ) else $F1083 } \n\t$F725 ( mValues ) parseContainerAndScreen ( parser , mTemp ) ; \n\tfinal long container = mTemp [ NUM00 ] ; \n\tfinal long screenId = mTemp [ NUM00 ] ; \n\tmValues . put ( LauncherSettings . Favorites . CONTAINER , container ) ; \n\tmValues . put ( LauncherSettings . Favorites . SCREEN , screenId ) ; \n\tmValues . put ( LauncherSettings . Favorites . CELLX , convertToDistanceFromEnd ( getAttributeValue ( parser , ATTR_X ) , mColumnCount ) ) ; \n\tmValues . put ( LauncherSettings . Favorites . CELLY , convertToDistanceFromEnd ( getAttributeValue ( parser , ATTR_Y ) , mRowCount ) ) ; \n\tTagParser $F24916 ( tagParser , tagParserMap , parser ) ; \n\tif ( tagParser == null ) { \n\t\tif ( LOGD ) Log . d ( $F71108 ( TAG , parser ) ) ; \n\t\t$F1082 } \n\tlong newElementId = tagParser . parseAndAdd ( parser ) ; \n\tif ( newElementId >= NUM00 ) { \n\t\tif ( ! screenIds . contains ( screenId ) && container == LauncherSettings . Favorites . CONTAINER_DESKTOP ) $F207 ( screenIds , screenId ) $F1082 } \n\t$F1082 } \n"}, {"code": "public WordEntry addNewWord ( final String str ) { \n\tfinal String key = trimWord ( str ) ; \n\tWordEntry entry = words . get ( key ) ; \n\tif ( entry == null ) { \n\t\tentry = new WordEntry $F72 ; \n\t\tentry . setType ( new ExpressionType $F580 ) ; \n\t\tentry . setNormalized ( key ) ; \n\t\twords . put ( key , entry ) ; \n\t\t} \n\telse { \n\t\tlogger . warn ( NUM00 + str + NUM00 + entry . getNormalized ( ) ) ; \n\t\t} \n\treturn entry ; \n\t} \n"}, {"code": "$F1 public int insert ( String elem ) { \n\tint firstIndex = ( int ) ( elem . charAt ( NUM00 ) - NUM00 ) ; \n\tint middleIndex = ( int ) ( elem . charAt ( - NUM00 + $F8196 ( elem ) ) - NUM00 ) ; \n\tint lastIndex = ( int ) ( $F7792 ( elem ) - NUM00 ) ; \n\tstorage [ firstIndex * NUM00 + middleIndex * NUM00 + lastIndex ] = elem ; \n\t$F1082 } \n"}, {"code": "$F1 protected void onMeasure ( int widthMeasureSpec , int heightMeasureSpec ) { \n\tmWidth = MeasureSpec . getSize ( widthMeasureSpec ) ; \n\tmHeight = MeasureSpec . getSize ( heightMeasureSpec ) ; \n\t$F17565 ( minSide , Math , mWidth , mHeight ) mWidth = minSide ; \n\tmHeight = minSide ; \n\tmCurrentProgressPosition = calculateCurrentPositionFromCurrentSeconds ( mCurrentSeconds ) ; \n\tobjectAnimatorProgress . setFloatValues ( mCurrentProgressPosition / mWidth , NUM00 ) ; \n\tobjectAnimatorProgress . setDuration ( ( mMaxSeconds - mCurrentSeconds ) * NUM00 ) ; \n\t$F27424 ( mBitmapCoverImage , scaleCoverBitmap ) rectFEmptyProgress . set ( NUM00 , mHeight - mProgressHeight , mWidth , mHeight ) ; \n\tmDrawableBottomShadow . setBounds ( NUM00 , ( NUM00 * mHeight ) / NUM00 , mWidth , mHeight ) ; \n\tif ( startRequested ) $F21847 ( startRequested , _BOOL , start ) super . onMeasure ( widthMeasureSpec , heightMeasureSpec ) ; \n\t} \n"}, {"code": "protected List < Command > handleCommands ( ServerConnector serverConnector , List < Command > commands ) { \n\tList < Command > results = new ArrayList < Command > $F72 ; \n\tfor ( Command command : commands ) { \n\t\tif $F14148 ( LOG , Level ) { \n\t\t\t$F150605 ( LOG , command ) } \n\t\tresults . addAll ( serverConnector . receive ( command ) ) ; \n\t\t} \n\treturn results ; \n\t} \n"}, {"code": "public static void UF5 $F93381 ( x , f , nx ) { \n\tint count1 = NUM00 ; \n\tint count2 = NUM00 ; \n\tdouble sum1 = NUM00 ; \n\tdouble sum2 = NUM00 ; \n\tdouble yj ; \n\tdouble hj ; \n\tdouble N = NUM00 ; \n\tdouble E = NUM00 ; \n\tfor ( $F9993 ( j , nx ) ) { \n\t\t$F94025 ( yj , x , j , Math , PI , nx ) hj = $F63533 ( yj , Math , PI ) ; \n\t\t$F63536 ( j , sum2 , hj , count2 , sum1 , count1 ) } \n\thj = ( NUM00 / N + E ) * Math . abs ( Math . sin ( NUM00 * N * PI * x [ NUM00 ] ) ) ; \n\tf [ NUM00 ] = x [ NUM00 ] + hj + NUM00 * sum1 / ( double ) count1 ; \n\tf [ NUM00 ] = NUM00 - x [ NUM00 ] + hj + NUM00 * sum2 / ( double ) count2 ; \n\t} \n"}, {"code": "private View fillUp ( int pos , int nextBottom ) { \n\tif ( DEBUG ) Log . i ( TAG , NUM00 + pos + NUM00 + nextBottom + M_FIRST_POSITION + mFirstPosition ) ; \n\tView selectedView = null ; \n\t$F315564 ( end , mListPadding ) while ( nextBottom > end && pos >= NUM00 ) { \n\t\tView temp = makeRow ( pos , nextBottom , _BOOL ) ; \n\t\t$F57733 ( temp , selectedView ) nextBottom = mReferenceView . getTop ( ) - mVerticalSpacing ; \n\t\tmFirstPosition = pos ; \n\t\tpos -= mNumColumns ; \n\t\t} \n\tif ( mStackFromBottom ) { \n\t\tmFirstPosition = Math . max ( NUM00 , pos + NUM00 ) ; \n\t\t} \n\treturn selectedView ; \n\t} \n"}, {"code": "private List < ValidationError > validate $F72 { \n\tList < ValidationError > errors = Lists . newArrayList ( ) ; \n\tModule module = getModule ( ) ; \n\terrors . addAll ( BlazeAndroidRunConfigurationValidationUtil . validateModule ( module ) ) ; \n\tAndroidFacet facet = null ; \n\tif ( module != null ) { \n\t\tfacet = AndroidFacet . getInstance ( module ) ; \n\t\terrors . addAll ( BlazeAndroidRunConfigurationValidationUtil . validateFacet ( facet , module ) ) ; \n\t\t} \n\terrors . addAll ( configState . validate ( facet ) ) ; \n\terrors . addAll ( BlazeAndroidRunConfigurationValidationUtil . validateLabel ( getLabel ( ) , configuration . getProject ( ) , Kind . ANDROID_BINARY ) ) ; \n\treturn errors ; \n\t} \n"}, {"code": "public void removeChildJob ( Job childJob ) { \n\tif $F2200 ( childJobs , childJob ) $F5754 ( childJob ) $F12396 ( removed , childJobs , childJob ) if ( ! removed ) $F11389 } \n"}, {"code": "private PointF isFlingingToDelete ( DragSource source ) { \n\t$F1275 ( mFlingToDeleteDropTarget ) if ( ! source . supportsFlingToDelete ( ) ) $F1274 $F27383 ( config , ViewConfiguration , mLauncher ) mVelocityTracker . computeCurrentVelocity ( NUM00 , config . getScaledMaximumFlingVelocity ( ) ) ; \n\tif ( mVelocityTracker . getYVelocity ( ) < mFlingToDeleteThresholdVelocity ) { \n\t\tPointF vel = new PointF ( mVelocityTracker . getXVelocity ( ) , mVelocityTracker . getYVelocity ( ) ) ; \n\t\tPointF upVec = new PointF $F261843 ; \n\t\tfloat theta = ( float ) Math . acos ( ( ( vel . x * upVec . x ) + ( vel . y * upVec . y ) ) / ( vel . length ( ) * upVec . length ( ) ) ) ; \n\t\tif ( theta <= Math . toRadians ( MAX_FLING_DEGREES ) ) { \n\t\t\treturn vel ; \n\t\t\t} \n\t\t} \n\t$F1274 } \n"}, {"code": "$F49286 ( value , absMin , absMax , absValue , Math ) "}, {"code": "public void runTest $F72 throws Throwable { \n\tDocument doc ; \n\tNodeList elementList ; \n\tNode nameNode ; \n\tCharacterData child ; \n\t$F236 ( doc , load , _BOOL ) $F237 ( elementList , doc ) $F238 ( nameNode , elementList ) $F241 ( child , nameNode ) { \n\t\tboolean success = _BOOL ; \n\t\ttry { \n\t\t\t$F4054 ( child ) } \n\t\t$F250 ( success , ex , DOMException ) assertTrue ( NUM00 , success ) ; \n\t\t} \n\t} \n"}, {"code": "public static void runScript ( final File file , final List < Pair $F528 > bindings ) throws ScriptException , IOException { \n\tfinal ScriptEngine engine = manager . getEngineByExtension ( FileUtils . getFileExtension ( file ) ) ; \n\tPreconditions . checkNotNull ( engine , NUM00 , file . getAbsolutePath ( ) ) ; \n\tfinal String script = FileUtils . readTextfile ( file ) ; \n\trunScript ( engine , script , bindings ) ; \n\t} \n"}, {"code": "public void addUGraphic ( UGraphic ug ) $F6659 ( graphics , ug ) "}, {"code": "public void apply $F72 throws IllegalStateException { \n\ttry { \n\t\tSystem . setSecurityManager ( this ) ; \n\t\t} \n\tcatch ( SecurityException e ) { \n\t\t$F5197 ( logger , e ) $F48926 ( e ) } \n\t} \n"}, {"code": "public static Rule createAGetPostRule ( String ruleName , String ruleUrl ) throws PolicyException { \n\t$F10651 $F122365 ( actionValues ) ; \n\t$F2695 ( set ) set . add ( ALLOW_DECISION ) ; \n\tactionValues . put ( GET_ACTION , set ) ; \n\t$F21884 ( set ) set . add ( ALLOW_DECISION ) ; \n\tactionValues . put ( POST_ACTION , set ) ; \n\treturn new Rule ( ruleName , IPLANETAMWEBAGENTSERVICE , ruleUrl , actionValues ) ; \n\t} \n"}, {"code": "public FastArrayList $F22451 ( c ) { \n\telementData = c . toArray ( ) ; \n\tsize = elementData . length ; \n\tif ( elementData . getClass ( ) != $F22453 ) elementData = Arrays . copyOf ( elementData , size , $F22453 ) ; \n\t} \n"}, {"code": "void createSceneVao $F72 { \n\tint vao = glGenVertexArrays ( ) ; \n\tint vbo = glGenBuffers ( ) ; \n\tglBindVertexArray ( vao ) ; \n\tglBindBuffer ( GL_ARRAY_BUFFER , vbo ) ; \n\tlong bufferSize = $F297295 * mesh . numVertices ; \n\tlong normalsOffset = NUM00 * NUM00 * mesh . numVertices ; \n\tglBufferData ( GL_ARRAY_BUFFER , bufferSize , GL_STATIC_DRAW ) ; \n\tglBufferSubData ( GL_ARRAY_BUFFER , NUM00 , mesh . positions ) ; \n\tglBufferSubData ( GL_ARRAY_BUFFER , normalsOffset , mesh . normals ) ; \n\tglEnableVertexAttribArray ( NUM00 ) ; \n\tglVertexAttribPointer ( NUM00 , NUM00 , GL_FLOAT , _BOOL , NUM00 , NUM00 ) ; \n\tglEnableVertexAttribArray ( NUM00 ) ; \n\tglVertexAttribPointer ( NUM00 , NUM00 , GL_FLOAT , _BOOL , NUM00 , normalsOffset ) ; \n\tglBindBuffer ( GL_ARRAY_BUFFER , NUM00 ) ; \n\tglBindVertexArray ( NUM00 ) ; \n\tthis . vaoScene = vao ; \n\t} \n"}, {"code": "public $F11654 endBatch $F72 { \n\t$F11654 result = null ; \n\tif $F3817 ( operationsBatch ) $F20182 ( result , doFlush ) useBatch = _BOOL ; \n\toperationsBatch = null ; \n\treturn result ; \n\t} \n"}, {"code": "$F53919 ( widthSize , mode , initResourcesIfNecessary , itemsLayout , LayoutParams , MeasureSpec , width , PADDING , Math , getSuggestedMinimumWidth ) "}, {"code": "public static Collection removeInnerClassNames ( Collection col ) { \n\t$F19151 ( list ) list . addAll ( col ) ; \n\t$F10531 ( it , list ) while $F2921 ( it ) { \n\t\t$F2778 ( name , it ) if $F12703 ( name ) $F7042 ( it ) } \n\treturn list ; \n\t} \n"}, {"code": "public TrieNode find ( String word ) { \n\treturn ( $F3598 ( word ) ? null : find ( word , root , NUM00 ) ) ; \n\t} \n"}, {"code": "private void testOrderedIndexes $F72 throws SQLException { \n\tdeleteDb ( NUM00 ) ; \n\tConnection conn = getConnection ( NUM00 ) ; \n\t$F11282 ( stat , conn ) stat . execute ( NUM00 + NUM00 ) ; \n\t$F131050 ( stat ) ResultSet rs = stat . executeQuery ( NUM00 + NUM00 ) ; \n\t$F24630 ( rs ) assertContains ( rs . getString ( NUM00 ) , NUM00 ) ; \n\t$F131050 ( stat ) $F131050 ( stat ) $F131050 ( stat ) $F131050 ( stat ) rs = stat . executeQuery ( NUM00 + NUM00 ) ; \n\t$F24630 ( rs ) assertContains ( rs . getString ( NUM00 ) , NUM00 ) ; \n\t$F59 ( conn ) } \n"}, {"code": "public String encode ( ByteBuffer aBuffer ) { \n\t$F12490 ( buf , getBytes , aBuffer ) return encode ( buf ) ; \n\t} \n"}, {"code": "public static int clearListInfo ( Delegator delegator , String shoppingListId ) throws GenericEntityException { \n\tdelegator . removeByAnd ( NUM00 , UtilMisc . toMap ( NUM00 , shoppingListId ) ) ; \n\treturn delegator . removeByAnd ( NUM00 , UtilMisc . toMap ( NUM00 , shoppingListId ) ) ; \n\t} \n"}, {"code": "private synchronized void handleWatchdog $F72 { \n\tfinal int exitCode ; \n\t$F8249 ( watchdog ) $F7546 ( watchdogTimeout ) if $F931 ( isRunning ) { \n\t\texitCode = OnCommandResultListener . SHELL_DIED ; \n\t\tDebug . log ( String . format ( NUM00 , $F65405 ( shell , Locale ) ) ) ; \n\t\t} \n\telse if ( watchdogCount ++ < watchdogTimeout ) $F932 else { \n\t\texitCode = OnCommandResultListener . WATCHDOG_EXIT ; \n\t\tDebug . log ( String . format ( NUM00 , $F65405 ( shell , Locale ) ) ) ; \n\t\t} \n\tif ( handler != null ) { \n\t\tpostCallback ( command , exitCode , buffer ) ; \n\t\t} \n\tcommand = null ; \n\tbuffer = null ; \n\tidle = _BOOL ; \n\t$F733 ( watchdog ) watchdog = null ; \n\tkill ( ) ; \n\t} \n"}, {"code": "public synchronized boolean hasService ( Class serviceClass ) { \n\t$F1149 ( serviceClass ) synchronized ( BeanContext . globalHierarchyLock ) { \n\t\tif $F1710 ( services , serviceClass ) return _BOOL ; \n\t\tBeanContextServices bcs = null ; \n\t\ttry { \n\t\t\tbcs = ( BeanContextServices ) getBeanContext ( ) ; \n\t\t\t} \n\t\tcatch ( ClassCastException cce ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\treturn bcs == null ? _BOOL : bcs . hasService ( serviceClass ) ; \n\t\t} \n\t} \n"}, {"code": "public boolean isPingDisabled $F72 { \n\treturn ( null != healthcheck && $F1905 ( healthcheck ) ) ; \n\t} \n"}, {"code": "public static String format ( Integer i ) { \n\t$F1275 ( i ) $F92 ( i ) } \n"}, {"code": "$F292923 ( super ) "}, {"code": "public void dumpNodes ( Path webGraphDb , DumpType type , long topN , Path output , boolean asEff , NameType nameType , AggrType aggrType , boolean asSequenceFile ) throws Exception { \n\t$F108456 ( sdf ) $F657 ( start , System ) LOG . info ( NUM00 + sdf . format ( start ) ) ; \n\tPath nodeDb = new Path ( webGraphDb , WebGraph . NODE_DIR ) ; \n\tConfiguration conf = getConf ( ) ; \n\tJobConf dumper = new NutchJob ( conf ) ; \n\tdumper . setJobName ( NUM00 + webGraphDb ) ; \n\tFileInputFormat . addInputPath ( dumper , nodeDb ) ; \n\tdumper . setInputFormat ( SequenceFileInputFormat . class ) ; \n\tif ( nameType == null ) { \n\t\tdumper . setMapperClass ( Sorter . class ) ; \n\t\tdumper . setReducerClass ( Sorter . class ) ; \n\t\tdumper . setMapOutputKeyClass ( FloatWritable . class ) ; \n\t\tdumper . setMapOutputValueClass ( Text . class ) ; \n\t\t} \n\telse { \n\t\tdumper . setMapperClass ( Dumper . class ) ; \n\t\tdumper . setReducerClass ( Dumper . class ) ; \n\t\tdumper . setMapOutputKeyClass ( Text . class ) ; \n\t\tdumper . setMapOutputValueClass ( FloatWritable . class ) ; \n\t\t} \n\tdumper . setOutputKeyClass ( Text . class ) ; \n\tdumper . setOutputValueClass ( FloatWritable . class ) ; \n\tFileOutputFormat . setOutputPath ( dumper , output ) ; \n\tif ( asSequenceFile ) { \n\t\tdumper . setOutputFormat ( SequenceFileOutputFormat . class ) ; \n\t\t} \n\telse { \n\t\tdumper . setOutputFormat ( TextOutputFormat . class ) ; \n\t\t} \n\tdumper . setNumReduceTasks ( NUM00 ) ; \n\tdumper . setBoolean ( NUM00 , type == DumpType . INLINKS ) ; \n\tdumper . setBoolean ( NUM00 , type == DumpType . OUTLINKS ) ; \n\tdumper . setBoolean ( NUM00 , type == DumpType . SCORES ) ; \n\tdumper . setBoolean ( NUM00 , nameType == NameType . HOST ) ; \n\tdumper . setBoolean ( NUM00 , nameType == NameType . DOMAIN ) ; \n\tdumper . setBoolean ( NUM00 , aggrType == AggrType . SUM ) ; \n\tdumper . setBoolean ( NUM00 , aggrType == AggrType . MAX ) ; \n\tdumper . setLong ( NUM00 , topN ) ; \n\tif ( asEff ) { \n\t\tdumper . set ( NUM00 , NUM00 ) ; \n\t\t} \n\ttry { \n\t\t$F973 ( LOG ) JobClient . runJob ( dumper ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\tLOG . error ( StringUtils . stringifyException ( e ) ) ; \n\t\tthrow e ; \n\t\t} \n\t$F657 ( end , System ) LOG . info ( $F1999 ( sdf , end ) + TimingUtil . elapsedTime ( start , end ) ) ; \n\t} \n"}, {"code": "public static String convertMethodSignature $F19845 ( className , methodName , methodSig , pkgName ) { \n\t$F83 ( args ) SignatureConverter converter = new SignatureConverter ( methodSig ) ; \n\tconverter . skip ( ) ; \n\t$F84 ( args ) while ( converter . getFirst ( ) != NUM00 ) { \n\t\t$F47101 ( args ) args . append ( shorten ( pkgName , converter . parseNext ( ) ) ) ; \n\t\t} \n\tconverter . skip ( ) ; \n\t$F84 ( args ) $F83 ( result ) result . append ( className ) ; \n\t$F84 ( result ) result . append ( methodName ) ; \n\t$F11659 ( result , args ) $F92 ( result ) } \n"}, {"code": "protected void Predicate $F72 throws $F1872 { \n\tif ( tokenIs ( NUM00 ) ) { \n\t\tnextToken ( ) ; \n\t\tPredicateExpr ( ) ; \n\t\tconsumeExpected ( NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "private void newUnitReceived ( GridUriDeploymentUnitDescriptor newDesc , Collection $F69669 clss ) { \n\tassert newDesc != null ; \n\tassert newDesc . getType ( ) == GridUriDeploymentUnitDescriptor . Type . FILE ; \n\tif $F1032 ( clss ) { \n\t\ttry { \n\t\t\taddResources ( newDesc . getClassLoader ( ) , newDesc , clss . toArray ( new $F6969 $F2313 ( clss ) ) ) ; \n\t\t\t} \n\t\tcatch ( IgniteSpiException e ) { \n\t\t\tU . warn ( log , $F6165 ( newDesc , e ) + NUM00 ) ; \n\t\t\t} \n\t\t} \n\tCollection $F2390 $F204 ( rmvClsLdrs ) ; \n\tsynchronized ( mux ) { \n\t\tif ( checkMd5 && unitDeployed ( newDesc . getMd5 ( ) ) ) { \n\t\t\tif $F17747 ( log ) LT . info ( log , NUM00 + NUM00 + U . hidePassword ( newDesc . getUri ( ) ) + NUM00 + ( newDesc . getFile ( ) == null ? NUM00 : newDesc . getFile ( ) ) + NUM00 ) ; \n\t\t\t$F665 } \n\t\tboolean isAdded = _BOOL ; \n\t\tboolean ignoreNewUnit = _BOOL ; \n\t\tfor ( ListIterator < GridUriDeploymentUnitDescriptor > iter = unitLoaders . listIterator ( ) ; \n\t\titer . hasNext ( ) ; \n\t\t) { \n\t\t\tGridUriDeploymentUnitDescriptor desc = iter . next ( ) ; \n\t\t\tassert ! newDesc . getClassLoader ( ) . equals ( desc . getClassLoader ( ) ) : NUM00 + newDesc ; \n\t\t\tif ( desc . getType ( ) == GridUriDeploymentUnitDescriptor . Type . FILE && newDesc . getUri ( ) . equals ( desc . getUri ( ) ) && ! newDesc . getFile ( ) . equals ( desc . getFile ( ) ) ) { \n\t\t\t\t$F7042 ( iter ) rmvClsLdrs . add ( desc . getClassLoader ( ) ) ; \n\t\t\t\tif $F87568 ( iter ) $F597 $F598 } \n\t\t\tif ( ! isAdded ) { \n\t\t\t\tif $F150035 ( unitComp , newDesc , desc ) { \n\t\t\t\t\tif ( checkUnitCollision ( desc , newDesc ) ) { \n\t\t\t\t\t\t$F7042 ( iter ) iter . add ( newDesc ) ; \n\t\t\t\t\t\trmvClsLdrs . add ( desc . getClassLoader ( ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse { \n\t\t\t\t\t\titer . set ( newDesc ) ; \n\t\t\t\t\t\titer . add ( desc ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\tisAdded = _BOOL ; \n\t\t\t\t\t} \n\t\t\t\telse if ( checkUnitCollision ( newDesc , desc ) ) $F3468 ( ignoreNewUnit , _BOOL ) } \n\t\t\telse if ( checkUnitCollision ( newDesc , desc ) ) { \n\t\t\t\t$F7042 ( iter ) rmvClsLdrs . add ( desc . getClassLoader ( ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( ! ignoreNewUnit ) { \n\t\t\tif ( ! isAdded ) unitLoaders . add ( newDesc ) ; \n\t\t\tif $F585 ( log ) LT . info ( log , NUM00 + newDesc . getClassLoader ( ) + NUM00 + newDesc . getTimestamp ( ) + NUM00 + U . hidePassword ( newDesc . getUri ( ) ) + NUM00 + ( newDesc . getFile ( ) == null ? NUM00 : newDesc . getFile ( ) ) + NUM00 ) ; \n\t\t\t} \n\t\t} \n\tfor ( ClassLoader cldLdr : rmvClsLdrs ) onUnitReleased ( cldLdr ) ; \n\t} \n"}, {"code": "public static String canonicalID ( String id ) { \n\t$F1747 ( id ) int st = NUM00 ; \n\t$F1749 ( len , id ) boolean substr = _BOOL ; \n\tint c ; \n\twhile ( st < len && ( $F31375 ( c , id , st ) == NUM00 || c <= NUM00 ) ) { \n\t\tst ++ ; \n\t\tsubstr = _BOOL ; \n\t\t} \n\twhile ( st < len && ( ( c = id . charAt ( len - NUM00 ) ) == NUM00 || c <= NUM00 ) ) { \n\t\tlen -- ; \n\t\tsubstr = _BOOL ; \n\t\t} \n\treturn substr ? id . substring ( st , len ) : id ; \n\t} \n"}, {"code": "private static void encodeBinary $F91888 ( bytes , startpos , count , startmode , sb ) { \n\tif ( count == NUM00 && startmode == TEXT_COMPACTION ) $F46352 ( sb , SHIFT_TO_BYTE ) else { \n\t\tboolean sixpack = $F91889 ( count ) ; \n\t\tif ( sixpack ) $F46352 ( sb , LATCH_TO_BYTE ) else $F46352 ( sb , LATCH_TO_BYTE_PADDED ) } \n\tint idx = startpos ; \n\tif ( count >= NUM00 ) { \n\t\t$F11577 ( chars ) $F91906 ( startpos , count , idx , t , i , bytes , chars , sb ) } \n\t$F91910 ( i , idx , startpos , count , ch , bytes , sb ) } \n"}, {"code": "$F1 public void step ( MessageLogger logger ) { \n\ttry { \n\t\taddAgent ( ) ; \n\t\tenv . step ( ) ; \n\t\t} \n\t$F1516 ( e ) } \n"}, {"code": "private static boolean isNonLeft ( int i0 , int i1 , int i2 , int i3 , $F1986 pts ) { \n\tdouble l1 , l2 , l4 , l5 , l6 , angle1 , angle2 , angle ; \n\tl1 = Math . sqrt ( Math . pow ( $F3123 ( pts , i2 , i1 ) , NUM00 ) + Math . pow ( pts [ i2 ] - pts [ i1 ] , NUM00 ) ) ; \n\tl2 = Math . sqrt ( Math . pow ( $F3123 ( pts , i3 , i2 ) , NUM00 ) + Math . pow ( pts [ i3 ] - pts [ i2 ] , NUM00 ) ) ; \n\tl4 = Math . sqrt ( Math . pow ( $F3123 ( pts , i3 , i0 ) , NUM00 ) + Math . pow ( pts [ i3 ] - pts [ i0 ] , NUM00 ) ) ; \n\tl5 = Math . sqrt ( Math . pow ( $F3123 ( pts , i1 , i0 ) , NUM00 ) + Math . pow ( pts [ i1 ] - pts [ i0 ] , NUM00 ) ) ; \n\tl6 = Math . sqrt ( Math . pow ( $F3123 ( pts , i2 , i0 ) , NUM00 ) + Math . pow ( pts [ i2 ] - pts [ i0 ] , NUM00 ) ) ; \n\tangle1 = $F3135 ( Math , l2 , l6 , l4 ) ; \n\tangle2 = $F3135 ( Math , l6 , l1 , l5 ) ; \n\tangle = ( Math . PI - angle1 ) - angle2 ; \n\tif ( angle <= NUM00 ) $F3139 ( _BOOL ) else $F3139 ( _BOOL ) } \n"}, {"code": "protected void copy2DArray ( int from [ ] [ ] , int to [ ] [ ] ) { \n\tfor ( $F1139 ( i , from ) ) { \n\t\tto [ i ] = new int [ from [ i ] . length ] ; \n\t\tSystem . arraycopy ( from [ i ] , NUM00 , to [ i ] , NUM00 , from [ i ] . length ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F9340 $F15228 of ( K k1 , V v1 , K k2 , V v2 , K k3 , V v3 ) { \n\tMap map = of ( ) ; \n\tmap . put ( k1 , v1 ) ; \n\tmap . put ( k2 , v2 ) ; \n\tmap . put ( k3 , v3 ) ; \n\treturn map ; \n\t} \n"}, {"code": "public boolean fill ( Reader reader , int pos ) throws IOException { \n\t$F83249 ( res , reader , fBuf ) if ( res == - NUM00 ) { \n\t\tfOffset = pos ; \n\t\tfLength = NUM00 ; \n\t\treturn _BOOL ; \n\t\t} \n\tint charsRead = res ; \n\twhile ( charsRead < BUFFER_SIZE ) { \n\t\tres = reader . read ( fBuf , charsRead , BUFFER_SIZE - charsRead ) ; \n\t\tif ( res == - NUM00 ) { \n\t\t\tfOffset = pos ; \n\t\t\tfLength = charsRead ; \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\tcharsRead += res ; \n\t\t} \n\tfOffset = pos ; \n\tfLength = BUFFER_SIZE ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void drawInRect ( GL10 gl , CGRect rect ) { \n\tgl . glEnable ( GL_TEXTURE_2D ) ; \n\tloadTexture ( gl ) ; \n\tfloat vertices [ ] = { \n\t\trect . origin . x , rect . origin . y , rect . origin . x + rect . size . width , rect . origin . y , rect . origin . x , rect . origin . y + rect . size . height , rect . origin . x + rect . size . width , rect . origin . y + rect . size . height } \n\t; \n\tmVertices . put ( vertices ) ; \n\t$F16709 ( mVertices ) float coordinates [ ] = { \n\t\tNUM00 , _maxT , _maxS , _maxT , NUM00 , NUM00 , _maxS , NUM00 } \n\t; \n\tmCoordinates . put ( coordinates ) ; \n\t$F16709 ( mCoordinates ) gl . glEnableClientState ( GL_VERTEX_ARRAY ) ; \n\tgl . glEnableClientState ( GL_TEXTURE_COORD_ARRAY ) ; \n\tgl . glBindTexture ( GL_TEXTURE_2D , _name ) ; \n\tgl . glTexParameterx ( GL_TEXTURE_2D , GL_TEXTURE_WRAP_S , GL_REPEAT ) ; \n\tgl . glTexParameterx ( GL_TEXTURE_2D , GL_TEXTURE_WRAP_T , GL_REPEAT ) ; \n\t$F126369 ( gl , GL_FLOAT , mVertices ) gl . glTexCoordPointer ( NUM00 , GL_FLOAT , NUM00 , mCoordinates ) ; \n\tgl . glDrawArrays ( GL_TRIANGLE_STRIP , NUM00 , NUM00 ) ; \n\tgl . glDisableClientState ( GL_VERTEX_ARRAY ) ; \n\tgl . glDisableClientState ( GL_TEXTURE_COORD_ARRAY ) ; \n\tgl . glDisable ( GL_TEXTURE_2D ) ; \n\t} \n"}, {"code": "synchronized void executed ( RTEditText editor , Operation op ) { \n\t$F78304 ( undoStack , getUndoStack , editor ) $F78304 ( redoStack , getRedoStack , editor ) while $F232570 ( undoStack , op ) { \n\t\t$F232572 ( previousOp , undoStack ) op . merge ( previousOp ) ; \n\t\t} \n\tpush ( op , undoStack ) ; \n\t$F725 ( redoStack ) } \n"}, {"code": "$F43277 ( listener , mListeners ) "}, {"code": "public static boolean isOssBuild $F72 { \n\tboolean isOssBuild = _BOOL ; \n\t$F27462 ( buildType , System ) if ( StringUtils . isNotBlank ( buildType ) && buildType . equalsIgnoreCase ( NUM00 ) ) { \n\t\tisOssBuild = _BOOL ; \n\t\t} \n\treturn isOssBuild ; \n\t} \n"}, {"code": "public void invokeHookBoltExecute ( Tuple tuple , long executeLatencyNs ) { \n\tif $F6887 ( taskHooks ) { \n\t\tBoltExecuteInfo executeInfo = new BoltExecuteInfo ( tuple , getThisTaskId ( ) , executeLatencyNs / Constants . MILLISECONDS_TO_NANOSECONDS ) ; \n\t\tfor ( ITaskHook taskHook : taskHooks ) { \n\t\t\ttaskHook . boltExecute ( executeInfo ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void validateIamRoles ( List < IamRole > iamRoles ) { \n\t$F18062 ( Assert , iamRoles ) Assert . isTrue ( $F3816 ( iamRoles ) , NUM00 ) ; \n\tfor ( IamRole iamRole : iamRoles ) { \n\t\t$F18062 ( Assert , iamRole ) Assert . hasText ( iamRole . getIamRoleName ( ) , NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "public static Intent buildStartInBackgroundIntent ( File script ) { \n\tfinal ComponentName componentName = Constants . SL4A_SERVICE_LAUNCHER_COMPONENT_NAME ; \n\tIntent $F192736 ( intent ) ; \n\tintent . setComponent ( componentName ) ; \n\tintent . setAction ( Constants . ACTION_LAUNCH_BACKGROUND_SCRIPT ) ; \n\tintent . putExtra ( Constants . EXTRA_SCRIPT_PATH , script . getAbsolutePath ( ) ) ; \n\treturn intent ; \n\t} \n"}, {"code": "public static $F9737 valueOf $F168406 ( obj ) { \n\treturn $F58366 ( obj ) ; \n\t} \n"}, {"code": "$F45923 public SpanMultiTermQueryWrapper ( Q query ) { \n\t$F31108 ( this , Objects , query ) this . rewriteMethod = selectRewriteMethod ( query ) ; \n\t} \n"}, {"code": "public void writeMapEnd $F72 throws IOException $F12032 ( os ) "}, {"code": "public Shape createArrowUp $F22855 ( x , y , w , h ) { \n\t$F2268 ( path ) path . moveTo ( x , y + h ) ; \n\tpath . lineTo ( x + w / NUM00 , y ) ; \n\tpath . lineTo ( x + w , y + h ) ; \n\t$F2272 ( path ) return path ; \n\t} \n"}, {"code": "protected void fireValueChanged $F72 { \n\tChangeEvent evt = new ChangeEvent ( this ) ; \n\tfor ( ChangeListener listener : listenerList . getListeners ( ChangeListener . class ) ) { \n\t\tlistener . stateChanged ( evt ) ; \n\t\t} \n\t} \n"}, {"code": "public static void streamContentToBrowser ( HttpServletResponse response , InputStream in , int length , String contentType , String fileName ) throws IOException { \n\tsetResponseBrowserProxyNoCache ( response ) ; \n\tresponse . setContentLength ( length ) ; \n\tif ( contentType != null ) { \n\t\tresponse . setContentType ( contentType ) ; \n\t\t} \n\tif ( fileName != null ) { \n\t\tresponse . setHeader ( NUM00 , NUM00 + fileName ) ; \n\t\t} \n\t$F147972 ( out , response ) try { \n\t\tstreamContent ( out , in , length ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\t$F59 ( out ) throw e ; \n\t\t} \n\t$F1206 ( out ) $F59 ( out ) } \n"}, {"code": "public static ByteBuffer encode ( String string ) throws CharacterCodingException $F8587 ( encode , string , _BOOL ) "}, {"code": "public void disableRealtimeStepsNotify $F72 { \n\tcheckConnection ( ) ; \n\tfinal List < BLEAction > $F204 ( list ) ; \n\tlist . add ( new WriteAction ( Profile . UUID_CHAR_CONTROL_POINT , Protocol . DISABLE_REALTIME_STEPS_NOTIFY ) ) ; \n\tqueue ( list ) ; \n\t} \n"}, {"code": "private static void stableStringSort ( $F806 arr , $F806 src , $F806 dst , int start , int end , int chId ) { \n\tint length = end - start ; \n\tif ( length < SIMPLE_LENGTH ) { \n\t\tif ( src == arr ) { \n\t\t\tfor ( $F2634 ( i , start , end ) ) { \n\t\t\t\tString current = arr [ i ] ; \n\t\t\t\tString prev = arr [ i - NUM00 ] ; \n\t\t\t\tif $F25292 ( current , prev ) { \n\t\t\t\t\tint j = i ; \n\t\t\t\t\tdo $F230915 ( arr , j , prev ) while ( j > start && current . compareTo ( prev = arr [ j - NUM00 ] ) < NUM00 ) ; \n\t\t\t\t\tarr [ j ] = current ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tint actualEnd = end - NUM00 ; \n\t\t\tdst [ start ] = src [ actualEnd -- ] ; \n\t\t\tfor ( int i = start + NUM00 ; \n\t\t\ti < end ; \n\t\t\ti ++ , actualEnd -- ) { \n\t\t\t\tString current = src [ actualEnd ] ; \n\t\t\t\tString prev ; \n\t\t\t\tint j = i ; \n\t\t\t\twhile ( j > start && current . compareTo ( prev = dst [ j - NUM00 ] ) < NUM00 ) $F230915 ( dst , j , prev ) dst [ j ] = current ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F665 } \n\tint s ; \n\tint mid = start + length / NUM00 ; \n\tint lo = start ; \n\tint hi = end - NUM00 ; \n\tif ( length > NUM00 ) { \n\t\ts = length / NUM00 ; \n\t\tlo = medChar ( lo , lo + s , lo + s * NUM00 , src , chId ) ; \n\t\tmid = medChar ( mid - s , mid , mid + s , src , chId ) ; \n\t\thi = medChar ( hi , hi - s , hi - s * NUM00 , src , chId ) ; \n\t\t} \n\tmid = medChar ( lo , mid , hi , src , chId ) ; \n\tint midVal = charAt ( src [ mid ] , chId ) ; \n\tint a , b , c ; \n\ta = b = start ; \n\tc = end - NUM00 ; \n\tint cmp ; \n\tfor ( int i = start ; \n\ti < end ; \n\ti ++ ) { \n\t\tString el = src [ i ] ; \n\t\tcmp = charAt ( el , chId ) - midVal ; \n\t\tif ( cmp < NUM00 ) $F2319 ( src , a , el ) else if ( cmp > NUM00 ) { \n\t\t\tdst [ c ] = el ; \n\t\t\tc -- ; \n\t\t\t} \n\t\telse $F2319 ( dst , b , el ) } \n\ts = b - start ; \n\tif ( s > NUM00 ) { \n\t\tif ( arr == src ) $F69917 ( System , dst , start , arr , a , s ) else { \n\t\t\tcopySwap ( dst , start , arr , a , s ) ; \n\t\t\t} \n\t\tif ( b >= end && midVal == - NUM00 ) $F932 stableStringSort ( arr , arr , arr == dst ? src : dst , a , a + s , chId + NUM00 ) ; \n\t\t} \n\ts = a - start ; \n\tif ( s > NUM00 ) { \n\t\tstableStringSort ( arr , src , dst , start , a , chId ) ; \n\t\t} \n\tc ++ ; \n\ts = end - c ; \n\tif ( s > NUM00 ) { \n\t\tstableStringSort ( arr , dst , src , c , end , chId ) ; \n\t\t} \n\t} \n"}, {"code": "private static $F18547 types ( Object ... values ) { \n\tif ( values == null ) { \n\t\treturn $F33934 ; \n\t\t} \n\t$F65070 ( result , values ) for ( $F1139 ( i , values ) ) { \n\t\tObject value = values [ i ] ; \n\t\tresult [ i ] = value == null ? NULL . class : value . getClass ( ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static void unRegisterTileCodec ( int comp ) { \n\tXTIFFTileCodec cod = getTileCodec ( comp ) ; \n\ttileCodecs . remove ( cod ) ; \n\t} \n"}, {"code": "public static void escape ( StrBuilder toAppend , String text , boolean escapeQuote , boolean escapeApos ) { \n\t$F2329 ( text ) for ( $F1088 ( i , text ) ) { \n\t\t$F1280 ( ch , text , i ) switch ( ch ) { \n\t\t\t$F2999 ( toAppend ) $F2999 ( toAppend ) $F2999 ( toAppend ) $F1262 toAppend . append ( escapeQuote ? NUM00 : ch ) ; \n\t\t\t$F597 $F1262 toAppend . append ( escapeApos ? NUM00 : ch ) ; \n\t\t\t$F597 $F3000 ( toAppend , ch ) } \n\t\t} \n\t} \n"}, {"code": "public void destroy $F72 { \n\t$F725 ( mListeners ) mSpringSystem . deregisterSpring ( this ) ; \n\t} \n"}, {"code": "$F1 public synchronized void removeInstanceListener ( InstanceListener tsl ) $F130709 ( m_instanceListeners , tsl ) "}, {"code": "private String readUntil ( $F1469 delimiter , boolean returnText ) throws $F139192 { \n\tint start = position ; \n\tStringBuilder result = null ; \n\tif ( returnText && text != null ) { \n\t\t$F6932 ( result ) result . append ( text ) ; \n\t\t} \n\tsearch : while ( _BOOL ) { \n\t\tif ( position + delimiter . length > limit ) { \n\t\t\tif ( start < position && returnText ) { \n\t\t\t\t$F39896 ( result ) $F14090 ( result , buffer , start , position ) } \n\t\t\tif ( ! fillBuffer ( delimiter . length ) ) { \n\t\t\t\tcheckRelaxed ( UNEXPECTED_EOF ) ; \n\t\t\t\ttype = COMMENT ; \n\t\t\t\t$F1274 } \n\t\t\tstart = position ; \n\t\t\t} \n\t\tfor ( $F1139 ( i , delimiter ) ) { \n\t\t\tif $F219258 ( buffer , position , i , delimiter ) { \n\t\t\t\tposition ++ ; \n\t\t\t\tcontinue search ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F597 } \n\tint end = position ; \n\tposition += delimiter . length ; \n\tif ( ! returnText ) $F1337 else $F139251 ( result , stringPool , buffer , start , end ) } \n"}, {"code": "private void toggleFavorite $F72 { \n\tfor ( String game : list . getSelectedValuesList ( ) ) { \n\t\tif $F105 ( favorites , game ) $F106 ( favorites , game ) else $F207 ( favorites , game ) } \n\tsaveFavorites ( ) ; \n\tupdate ( ) ; \n\t} \n"}, {"code": "private void createPartitionRegion ( List vmList , int startIndexForRegion , int endIndexForRegion , int localMaxMemory , int redundancy , boolean firstCreationFlag , boolean multipleVMFlag ) { \n\t$F10531 ( nodeIterator , vmList ) while $F2921 ( nodeIterator ) { \n\t\t$F90160 ( vm , nodeIterator ) vm . invoke ( createMultiplePartitionRegion ( prPrefix , startIndexForRegion , endIndexForRegion , redundancy , localMaxMemory , firstCreationFlag , multipleVMFlag ) ) ; \n\t\t} \n\t} \n"}, {"code": "public int write ( $F96 destMac , $F96 packet , int offset , int byteCount ) { \n\t$F896 ( destMac ) $F896 ( packet ) $F11673 ( Arrays , packet , offset , byteCount ) if $F11845 ( destMac ) { \n\t\tthrow new IllegalArgumentException $F75477 ( destMac ) ; \n\t\t} \n\treturn sendPacket ( fd , mInterfaceName , mProtocolType , destMac , packet , offset , byteCount ) ; \n\t} \n"}, {"code": "public boolean hasExtensionsWithDeps $F72 $F3387 ( extensionsWithDeps ) "}, {"code": "public synchronized void addSeries ( XYSeries series ) $F207 ( mSeries , series ) "}, {"code": "private $F2027 calculateTaskCountPerContainer $F14337 ( taskCount , prevContainerCount , currentContainerCount ) { \n\t$F2027 newTaskCountPerContainer = new int [ Math . max ( currentContainerCount , prevContainerCount ) ] ; \n\t$F9952 ( Arrays , newTaskCountPerContainer ) for ( $F119 ( i , currentContainerCount ) ) { \n\t\tnewTaskCountPerContainer [ i ] = taskCount / currentContainerCount ; \n\t\tif ( taskCount % currentContainerCount > i ) { \n\t\t\tnewTaskCountPerContainer [ i ] ++ ; \n\t\t\t} \n\t\t} \n\treturn newTaskCountPerContainer ; \n\t} \n"}, {"code": "$F1 public void actionPerform ( Component component ) { \n\t$F933 ( isEnabled ) if ( beforeActionPerformedHandler != null ) { \n\t\tif ( ! beforeActionPerformedHandler . beforeActionPerformed ( ) ) $F665 } \n\tSet selected = target . getSelected ( ) ; \n\tif $F5973 ( selected ) { \n\t\tif ( confirm ) { \n\t\t\tconfirmAndRemove ( selected ) ; \n\t\t\t} \n\t\telse { \n\t\t\tremove ( selected ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void testCompareToPosPos2 $F72 { \n\t$F7829 $F79258 int aSign = NUM00 ; \n\tint bSign = NUM00 ; \n\t$F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F67217 ( assertEquals , aNumber , bNumber ) } \n"}, {"code": "static public void generateSeed $F97 ( result ) { \n\tinstance . getSeedBytes ( result ) ; \n\t} \n"}, {"code": "private double hammingDistanceNumberVector ( NumberVector o1 , NumberVector o2 ) { \n\tfinal int d1 = o1 . getDimensionality ( ) , d2 = o2 . getDimensionality ( ) ; \n\tint differences = NUM00 ; \n\tint d = NUM00 ; \n\tfor ( ; \n\td < d1 && d < d2 ; \n\td ++ ) { \n\t\tdouble v1 = o1 . doubleValue ( d ) , v2 = o2 . doubleValue ( d ) ; \n\t\tif ( v1 != v1 || v2 != v2 ) $F1448 if ( v1 != v2 ) { \n\t\t\t++ differences ; \n\t\t\t} \n\t\t} \n\tfor ( ; \n\td < d1 ; \n\td ++ ) { \n\t\t$F42635 ( v1 , o1 , d ) if ( v1 != NUM00 && v1 == v1 ) { \n\t\t\t++ differences ; \n\t\t\t} \n\t\t} \n\tfor ( ; \n\td < d2 ; \n\td ++ ) { \n\t\t$F42635 ( v2 , o2 , d ) if ( v2 != NUM00 && v2 == v2 ) { \n\t\t\t++ differences ; \n\t\t\t} \n\t\t} \n\treturn differences ; \n\t} \n"}, {"code": "public static Kernel createKernel ( int kernelType ) { \n\tswitch ( kernelType ) { \n\t\tcase KERNEL_RADIAL : return new KernelRadial $F72 ; \n\t\tcase KERNEL_POLYNOMIAL : return new KernelPolynomial $F72 ; \n\t\tcase KERNEL_NEURAL : return new KernelNeural $F72 ; \n\t\t$F1267 return new KernelDot $F72 ; \n\t\t} \n\t} \n"}, {"code": "protected void checkForPendingTasks ( $F46217 tenants , Collection < ? extends DataObject > dataObjects ) { \n\tfor ( URI tenant : tenants ) { \n\t\tcheckForPendingTasks ( tenant , dataObjects ) ; \n\t\t} \n\t} \n"}, {"code": "@ org . junit . Test public void verifyGetFloatResponse $F72 throws Exception { \n\t$F13404 ( queryParams ) String str = client . invokeAPI ( NUM00 , NUM00 , queryParams , null , $F12080 , null , NUM00 , null , $F382 ) ; \n\tassertEquals ( str , String . valueOf ( ExampleBuilder . SAMPLE_FLOAT_PROPERTY_VALUE ) ) ; \n\t} \n"}, {"code": "public void writeOperationsCarFile $F72 { \n\tmakeBackupFile ( defaultOperationsFilename ( ) ) ; \n\ttry { \n\t\tif ( ! checkFile ( defaultOperationsFilename ( ) ) ) { \n\t\t\t$F70659 file = new $F70659 ( defaultOperationsFilename ( ) ) ; \n\t\t\t$F70659 parentDir = file . getParentFile ( ) ; \n\t\t\tif $F1906 ( parentDir ) { \n\t\t\t\tif $F70667 ( parentDir ) $F21338 ( log ) } \n\t\t\tif ( file . createNewFile ( ) ) $F981 ( log ) } \n\t\twriteFile ( defaultOperationsFilename ( ) ) ; \n\t\t} \n\t$F70676 ( log , e ) } \n"}, {"code": "$F5077 ( journalWriter , writer , journalFileTmp , IO_BUFFER_SIZE , MAGIC , VERSION_1 , Integer , appVersion , valueCount , entry , lruEntries , DIRTY , CLEAN , journalFile , _BOOL ) "}, {"code": "public static double median $F10212 ( values ) { \n\t$F18832 ( len , values ) final $F1986 sortedValues = Arrays . copyOf ( values , len ) ; \n\tArrays . sort ( sortedValues ) ; \n\tif ( len % NUM00 == NUM00 ) { \n\t\treturn ( ( double ) sortedValues [ len / NUM00 ] + ( double ) sortedValues [ len / NUM00 - NUM00 ] ) / NUM00 ; \n\t\t} \n\telse { \n\t\treturn ( double ) sortedValues [ len / NUM00 ] ; \n\t\t} \n\t} \n"}, {"code": "private List < BlockInfo > fillSegmentIdToTableInfoMap ( $F8688 tableBlockInfos , AbsoluteTableIdentifier absoluteTableIdentifier ) { \n\tMap < String , List < BlockInfo > > map = segmentIdToBlockListMap . get ( absoluteTableIdentifier ) ; \n\tif ( null == map ) { \n\t\tmap = new ConcurrentHashMap < String , List < BlockInfo > > $F72 ; \n\t\tsegmentIdToBlockListMap . put ( absoluteTableIdentifier , map ) ; \n\t\t} \n\tBlockInfo temp = null ; \n\tList < BlockInfo > $F204 ( blockInfosNeedToLoad ) ; \n\tfor ( TableBlockInfo info : tableBlockInfos ) { \n\t\tList < BlockInfo > tempTableBlockInfos = map . get ( info . getSegmentId ( ) ) ; \n\t\tif ( null == tempTableBlockInfos ) { \n\t\t\t$F9404 ( tempTableBlockInfos ) map . put ( info . getSegmentId ( ) , tempTableBlockInfos ) ; \n\t\t\t} \n\t\ttemp = new BlockInfo ( info ) ; \n\t\t$F2201 ( tempTableBlockInfos , temp ) blockInfosNeedToLoad . add ( temp ) ; \n\t\t} \n\treturn blockInfosNeedToLoad ; \n\t} \n"}, {"code": "public CharBuffer put $F36827 ( str , start , end ) { \n\t$F74722 ( isReadOnly ) if ( start < NUM00 || end < start || end > str . length ( ) ) { \n\t\tthrow new IndexOutOfBoundsException ( $F36805 ( str ) + start + NUM00 + end ) ; \n\t\t} \n\tif ( end - start > remaining ( ) ) { \n\t\tthrow new BufferOverflowException $F72 ; \n\t\t} \n\tfor ( int i = start ; \n\ti < end ; \n\ti ++ ) $F170253 ( put , str , i ) return this ; \n\t} \n"}, {"code": "public List < OfferRecommendation > evaluate ( $F132403 offers ) { \n\tList < OfferRecommendation > recommendations = new ArrayList < OfferRecommendation > $F72 ; \n\tint offerResourceCount = NUM00 ; \n\tfor ( Offer offer : offers ) { \n\t\tofferResourceCount += offer . getResourcesCount ( ) ; \n\t\tfor ( Resource toDestroy : selectUnexpectedResources ( expectedPersistentVolumeIds , getPersistentVolumesById ( offer ) ) ) { \n\t\t\trecommendations . add ( new DestroyOfferRecommendation ( offer , toDestroy ) ) ; \n\t\t\t} \n\t\t} \n\t$F2199 ( destroyRecommendationCount , recommendations ) for ( Offer offer : offers ) { \n\t\tfor ( Resource toUnreserve : selectUnexpectedResources ( expectedReservedResourceIds , getReservedResourcesById ( offer ) ) ) { \n\t\t\trecommendations . add ( new UnreserveOfferRecommendation ( offer , toUnreserve ) ) ; \n\t\t\t} \n\t\t} \n\tlogger . info ( NUM00 , offers . size ( ) , offerResourceCount , destroyRecommendationCount , recommendations . size ( ) - destroyRecommendationCount ) ; \n\treturn recommendations ; \n\t} \n"}, {"code": "$F1 public int update ( ByteBuffer inBuffer , ByteBuffer outBuffer ) throws ShortBufferException { \n\treturn cipher . update ( inBuffer , outBuffer ) ; \n\t} \n"}, {"code": "boolean displayContextAssump ( NodeRepresentation rep , int i ) { \n\treturn rep . isCreated || ( ( ! state . splitChosen ( ) ) && showContextValue ) ; \n\t} \n"}, {"code": "private void unregisterMBeans $F72 { \n\tList $F50005 unregistered = new ArrayList $F50005 $F72 ; \n\tfor ( ObjectName name : mbeans ) { \n\t\ttry { \n\t\t\tmbeanserver . unregisterMBean ( name ) ; \n\t\t\tunregistered . add ( name ) ; \n\t\t\t} \n\t\tcatch ( JMException e ) $F845 } \n\tmbeans . removeAll ( unregistered ) ; \n\t} \n"}, {"code": "public static void main $F4374 ( argv ) throws $F35763 { \n\tScanner s = new HTMLScanner $F72 ; \n\tReader r = new InputStreamReader ( System . in , NUM00 ) ; \n\tWriter w = new OutputStreamWriter ( System . out , NUM00 ) ; \n\tPYXWriter pw = new PYXWriter ( w ) ; \n\ts . scan ( r , pw ) ; \n\t$F59 ( w ) } \n"}, {"code": "private void createAmpResultStreamMethod ( JavaClass jClass , Method method , int resultOffset ) { \n\t$F20605 ( methodName , method ) $F272051 ( parameterTypes , method ) Annotation [ ] [ ] parameterAnns = method . getParameterAnnotations ( ) ; \n\taddMethod ( method ) ; \n\tCodeWriterAttribute code = createMethodHeader ( jClass , method ) ; \n\tcode . setMaxLocals ( NUM00 + NUM00 * parameterTypes . length ) ; \n\tcode . setMaxStack ( NUM00 + NUM00 * parameterTypes . length ) ; \n\tcode . pushObjectVar ( NUM00 ) ; \n\tcode . getField ( jClass . getThisClass ( ) , NUM00 , MessageFactoryAmp . class ) ; \n\t$F40997 ( argLen , parameterTypes ) code . pushObjectVar ( getLength ( parameterTypes , resultOffset ) + NUM00 ) ; \n\tlong timeout = _defaultTimeout ; \n\tcode . pushConstant ( timeout ) ; \n\tcode . pushObjectVar ( NUM00 ) ; \n\tcode . getField ( jClass . getThisClass ( ) , NUM00 , ServiceRefAmp . class ) ; \n\tcode . pushObjectVar ( NUM00 ) ; \n\tcode . getField ( jClass . getThisClass ( ) , fieldName ( method ) , MethodAmp . class ) ; \n\tpartitionMethod ( code , parameterTypes , parameterAnns ) ; \n\tpushParameters ( code , parameterTypes , parameterAnns , NUM00 , NUM00 , argLen + NUM00 , resultOffset ) ; \n\tcode . invokeInterface ( MessageFactoryAmp . class , NUM00 , $F78753 , ResultStream . class , $F41237 , ServiceRefAmp . class , MethodAmp . class , $F22453 ) ; \n\tcode . addReturn ( ) ; \n\t$F59 ( code ) } \n"}, {"code": "private static synchronized void endTransaction ( Connection C , boolean successful ) throws AdeException { \n\t$F1932 ( logger ) try { \n\t\tif ( successful ) $F19092 ( C ) else $F21746 ( C ) C . setAutoCommit ( _BOOL ) ; \n\t\t} \n\tcatch ( Throwable t ) { \n\t\tsurfaceThrowable ( NUM00 , t ) ; \n\t\tthrow adeExceptionOf ( t ) ; \n\t\t} \n\t$F1932 ( logger ) } \n"}, {"code": "public $F1986 estimateL2DistanceSquared ( Datum queryDatum ) { \n\tRealVector vector = queryDatum . metrics ( ) ; \n\t$F1993 ( estimates ) for ( $F119 ( i , k ) ) { \n\t\tdouble deltaLo = vector . getEntry ( i ) - this . boundaries [ i ] [ NUM00 ] ; \n\t\tdouble deltaHi = this . boundaries [ i ] [ NUM00 ] - vector . getEntry ( i ) ; \n\t\tdouble sqDeltaLo = deltaLo * deltaLo ; \n\t\tdouble sqDeltaHi = deltaHi * deltaHi ; \n\t\tif ( deltaLo < NUM00 || deltaHi < NUM00 ) { \n\t\t\tif ( sqDeltaHi < sqDeltaLo ) { \n\t\t\t\testimates [ NUM00 ] += sqDeltaHi ; \n\t\t\t\testimates [ NUM00 ] += sqDeltaLo ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\testimates [ NUM00 ] += sqDeltaLo ; \n\t\t\t\testimates [ NUM00 ] += sqDeltaHi ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\testimates [ NUM00 ] += Math . max ( sqDeltaHi , sqDeltaLo ) ; \n\t\t\t} \n\t\t} \n\treturn estimates ; \n\t} \n"}, {"code": "private void deserializeClass ( File file ) throws RuntimeException { \n\ttry { \n\t\t$F4647 ( in , file ) $F67402 ( objIn , in ) $F67404 ( o , objIn ) $F59 ( in ) } \n\tcatch ( ClassNotFoundException e ) { \n\t\tthrow new RuntimeException ( NUM00 + NUM00 + file + NUM00 + NUM00 + NUM00 , e ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\tthrow new RuntimeException ( NUM00 + NUM00 + file + NUM00 , e ) ; \n\t\t} \n\t} \n"}, {"code": "public boolean calculateTaxTotal $F72 { \n\t$F22806 ( log ) DB . executeUpdateEx ( NUM00 + getC_Invoice_ID ( ) , get_TrxName ( ) ) ; \n\tm_taxes = null ; \n\tBigDecimal totalLines = Env . ZERO ; \n\t$F15277 ( taxList ) MInvoiceLine [ ] lines = getLines ( _BOOL ) ; \n\tfor ( $F1139 ( i , lines ) ) { \n\t\tMInvoiceLine line = lines [ i ] ; \n\t\tif ( ! taxList . contains ( line . getC_Tax_ID ( ) ) ) { \n\t\t\tMInvoiceTax iTax = MInvoiceTax . get ( line , getPrecision ( ) , _BOOL , get_TrxName ( ) ) ; \n\t\t\tif ( iTax != null ) { \n\t\t\t\tiTax . setIsTaxIncluded ( isTaxIncluded ( ) ) ; \n\t\t\t\tif ( ! iTax . calculateTaxFromLines ( ) ) return _BOOL ; \n\t\t\t\t$F45240 ( iTax ) taxList . add ( line . getC_Tax_ID ( ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\ttotalLines = totalLines . add ( line . getLineNetAmt ( ) ) ; \n\t\t} \n\tBigDecimal grandTotal = totalLines ; \n\tMInvoiceTax [ ] taxes = getTaxes ( _BOOL ) ; \n\tfor ( $F1139 ( i , taxes ) ) { \n\t\tMInvoiceTax iTax = taxes [ i ] ; \n\t\tMTax tax = iTax . getTax ( ) ; \n\t\tif ( tax . isSummary ( ) ) { \n\t\t\tMTax [ ] cTaxes = tax . getChildTaxes ( _BOOL ) ; \n\t\t\tfor ( $F1139 ( j , cTaxes ) ) { \n\t\t\t\tMTax cTax = cTaxes [ j ] ; \n\t\t\t\tBigDecimal taxAmt = cTax . calculateTax ( iTax . getTaxBaseAmt ( ) , isTaxIncluded ( ) , getPrecision ( ) ) ; \n\t\t\t\tMInvoiceTax newITax = new MInvoiceTax ( getCtx ( ) , NUM00 , get_TrxName ( ) ) ; \n\t\t\t\tnewITax . setClientOrg ( this ) ; \n\t\t\t\tnewITax . setC_Invoice_ID ( getC_Invoice_ID ( ) ) ; \n\t\t\t\tnewITax . setC_Tax_ID ( cTax . getC_Tax_ID ( ) ) ; \n\t\t\t\tnewITax . setPrecision ( getPrecision ( ) ) ; \n\t\t\t\tnewITax . setIsTaxIncluded ( isTaxIncluded ( ) ) ; \n\t\t\t\tnewITax . setTaxBaseAmt ( iTax . getTaxBaseAmt ( ) ) ; \n\t\t\t\tnewITax . setTaxAmt ( taxAmt ) ; \n\t\t\t\tnewITax . saveEx ( get_TrxName ( ) ) ; \n\t\t\t\tif $F931 ( isTaxIncluded ) $F10950 ( grandTotal , taxAmt ) } \n\t\t\tiTax . deleteEx ( _BOOL , get_TrxName ( ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tif $F931 ( isTaxIncluded ) grandTotal = grandTotal . add ( iTax . getTaxAmt ( ) ) ; \n\t\t\t} \n\t\t} \n\tsetTotalLines ( totalLines ) ; \n\tsetGrandTotal ( grandTotal ) ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "private boolean canOpen $F72 { \n\tfor ( final INaviProject project : m_projects ) { \n\t\tif ( project . isLoaded ( ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static Array listWithQuotesToArray $F1947 ( list , delimiter , quotes ) { \n\t$F7780 ( list ) $F1749 ( len , list ) int last = NUM00 ; \n\t$F7782 ( del , delimiter ) $F7782 ( quo , quotes ) char c ; \n\tchar inside = NUM00 ; \n\tArrayImpl array = new ArrayImpl $F72 ; \n\ttry { \n\t\tfor ( $F119 ( i , len ) ) { \n\t\t\tc = list . charAt ( i ) ; \n\t\t\tfor ( $F1139 ( y , quo ) ) { \n\t\t\t\tif ( c == quo [ y ] ) { \n\t\t\t\t\tif ( c == inside ) inside = NUM00 ; \n\t\t\t\t\telse if ( inside == NUM00 ) inside = c ; \n\t\t\t\t\t$F598 } \n\t\t\t\t} \n\t\t\tfor ( $F1139 ( y , del ) ) { \n\t\t\t\tif ( inside == NUM00 && c == del [ y ] ) { \n\t\t\t\t\tarray . _append ( list . substring ( last , i ) ) ; \n\t\t\t\t\tlast = i + NUM00 ; \n\t\t\t\t\t$F597 } \n\t\t\t\t} \n\t\t\t} \n\t\tif ( last <= len ) $F13047 ( array , list , last ) } \n\tcatch ( ExpressionException e ) $F845 return array ; \n\t} \n"}, {"code": "public MLOutput execute ( String dmlScriptFilePath , $F5 argsName , $F5 argsValues , String configFilePath ) throws IOException , DMLException , ParseException { \n\t$F144226 ( newNamedArgs ) if $F15256 ( argsName , argsValues ) { \n\t\tthrow new DMLException ( $F10533 ( argsName ) + NUM00 ) ; \n\t\t} \n\tfor ( $F2277 ( i , argsName ) ) { \n\t\t$F1729 ( k , argsName , i ) $F1729 ( v , argsValues , i ) newNamedArgs . put ( k , v ) ; \n\t\t} \n\treturn execute ( dmlScriptFilePath , newNamedArgs , configFilePath ) ; \n\t} \n"}, {"code": "public boolean isInMemoryDb $F72 { \n\t$F84030 ( path , MEMORY_DB_PATH ) } \n"}, {"code": "private static boolean testSpecificValue $F12359 ( x , y , expectedValue , interpValue ) { \n\tlogger . info ( $F3905 ( x , y , expectedValue , interpValue ) ) ; \n\tboolean specificValueInterpUseful = _BOOL ; \n\tif ( interpValue > expectedValue + NUM00 || interpValue < expectedValue - NUM00 ) specificValueInterpUseful = _BOOL ; \n\treturn specificValueInterpUseful ; \n\t} \n"}, {"code": "public InputSource resolveEntity ( String publicId , String systemId ) throws $F55616 { \n\thasDTD = _BOOL ; \n\tString dtd = UtilProperties . getSplitPropertyValue ( UtilURL . fromResource ( NUM00 ) , publicId ) ; \n\tif $F35028 ( UtilValidate , dtd ) { \n\t\tif $F2907 ( Debug ) Debug . logVerbose ( NUM00 + publicId + NUM00 + systemId + NUM00 + dtd + NUM00 , module ) ; \n\t\ttry { \n\t\t\tURL dtdURL = UtilURL . fromResource ( dtd ) ; \n\t\t\tif ( dtdURL == null ) { \n\t\t\t\tthrow new GeneralException ( NUM00 + dtd ) ; \n\t\t\t\t} \n\t\t\t$F35900 ( dtdStream , dtdURL ) $F77995 ( inputSource , dtdStream ) inputSource . setPublicId ( publicId ) ; \n\t\t\thasDTD = _BOOL ; \n\t\t\tif $F2907 ( Debug ) Debug . logVerbose ( NUM00 + publicId + NUM00 + dtd + NUM00 , module ) ; \n\t\t\treturn inputSource ; \n\t\t\t} \n\t\tcatch ( Exception e ) $F1824 ( Debug , e , module ) } \n\telse { \n\t\t$F24867 ( lastSlash , systemId ) String filename = null ; \n\t\tif ( lastSlash == - NUM00 ) { \n\t\t\tfilename = systemId ; \n\t\t\t} \n\t\telse $F78003 ( filename , systemId , lastSlash ) URL resourceUrl = UtilURL . fromResource ( filename ) ; \n\t\tif ( resourceUrl != null ) { \n\t\t\t$F35900 ( resStream , resourceUrl ) $F77995 ( inputSource , resStream ) if $F35028 ( UtilValidate , publicId ) { \n\t\t\t\tinputSource . setPublicId ( publicId ) ; \n\t\t\t\t} \n\t\t\thasDTD = _BOOL ; \n\t\t\tif $F2907 ( Debug ) Debug . logVerbose ( NUM00 + publicId + NUM00 + filename + NUM00 , module ) ; \n\t\t\treturn inputSource ; \n\t\t\t} \n\t\telse { \n\t\t\tDebug . logWarning ( NUM00 + publicId + NUM00 + filename + NUM00 , module ) ; \n\t\t\t$F1274 } \n\t\t} \n\treturn defaultResolver . resolveEntity ( publicId , systemId ) ; \n\t} \n"}, {"code": "$F1 public String leaveDTD $F72 { \n\tif ( _writer == _dtdWriter ) { \n\t\t_line . append ( _text ) ; \n\t\t_text = new StringBuffer $F989 ; \n\t\tflushLine ( _BOOL ) ; \n\t\t_writer = _docWriter ; \n\t\t$F92 ( _dtdWriter ) } \n\t$F1274 } \n"}, {"code": "private static ClassNode loadClass ( String name , Config config ) throws Exception { \n\tString filePath = config . getClassDumpPath ( ) + $F2934 ( name ) + NUM00 ; \n\tClassReader reader = new ClassReader $F18079 ( filePath ) ; \n\tClassNode node = new ClassNode $F72 ; \n\treader . accept ( node , ClassReader . EXPAND_FRAMES ) ; \n\treturn node ; \n\t} \n"}, {"code": "public void write $F21196 ( cbuf , off , len ) throws IOException $F21537 ( internalOut , cbuf , off , len ) "}, {"code": "public void add ( final String clazz , final String subclazz , final boolean blocked ) { \n\tentries . add ( new Entry ( clazz , subclazz , blocked ) ) ; \n\t} \n"}, {"code": "private synchronized void bufferChange $F72 throws ReadFailedException { \n\tByteBuffer current = super . getByteBuffer ( ) ; \n\tif ( null != current ) { \n\t\t$F725 ( current ) emptyBuffers . add ( current ) ; \n\t\t} \n\tint tries = NUM00 ; \n\twhile ( _BOOL ) { \n\t\ttry { \n\t\t\tByteBuffer buffer = fullBuffers . poll ( NUM00 , TimeUnit . MILLISECONDS ) ; \n\t\t\tif ( null != buffer ) { \n\t\t\t\tsuper . setByteBuffer ( buffer ) ; \n\t\t\t\t$F597 } \n\t\t\telse { \n\t\t\t\ttries ++ ; \n\t\t\t\tif ( readFailed || ( tries > MAX_BUFFER_POOL_TRIES ) ) { \n\t\t\t\t\tthrow new ReadFailedException $F580 ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( InterruptedException e ) { \n\t\t\t$F84406 ( Thread ) } \n\t\t} \n\t} \n"}, {"code": "protected synchronized Class loadClass ( String name , boolean resolve ) throws ClassNotFoundException { \n\tClass c = findLoadedClass ( name ) ; \n\t$F192589 ( c , findClass , name ) if ( c == null ) $F102970 ( name ) if ( resolve ) resolveClass ( c ) ; \n\treturn c ; \n\t} \n"}, {"code": "$F45923 public static $F65474 max ( $F65474 [ ] ar ) { \n\tComparable ret = ar [ NUM00 ] ; \n\tfor ( $F1139 ( i , ar ) ) { \n\t\tif ( ret . compareTo ( ar [ i ] ) < NUM00 ) { \n\t\t\tret = ar [ i ] ; \n\t\t\t} \n\t\t} \n\treturn ret ; \n\t} \n"}, {"code": "private void initBPRMADetails ( int C_BPartner_ID ) { \n\trmaField . removeActionListener ( this ) ; \n\t$F213890 ( rmaField ) KeyNamePair pp = new KeyNamePair ( NUM00 , NUM00 ) ; \n\trmaField . addItem ( pp ) ; \n\t$F104317 list = loadRMAData ( C_BPartner_ID ) ; \n\t$F104320 ( knp , list , rmaField ) $F53383 ( rmaField ) rmaField . addActionListener ( this ) ; \n\t} \n"}, {"code": "protected void resetOptions $F72 { \n\tm_maxStale = NUM00 ; \n\tm_searchDirection = SELECTION_FORWARD ; \n\tm_starting = null ; \n\tm_startRange = new Range $F72 ; \n\tm_classIndex = - NUM00 ; \n\tm_totalEvals = NUM00 ; \n\tm_cacheSize = NUM00 ; \n\tm_debug = _BOOL ; \n\t} \n"}, {"code": "$F1 protected void tearDown $F72 throws Exception { \n\ttry $F5795 ( takeScreenShot ) $F86388 ( throwable ) $F173385 ( super ) } \n"}, {"code": "$F52361 ( mCategories , mValues ) "}, {"code": "private boolean itera_connect ( PlaPointInt p_from_point , PlaPointInt p_to_point ) { \n\tArrayList $F137739 corners = angled_connection ( p_from_point , p_to_point ) ; \n\tboolean connection_succeeded = _BOOL ; \n\tfor ( $F3836 ( index , corners ) ) { \n\t\tPlaPointInt from_corner = corners . get ( index - NUM00 ) ; \n\t\tPlaPointInt to_corner = corners . get ( index ) ; \n\t\tTimeLimit time_limit = new TimeLimit ( s_CHECK_FORCED_TRACE_TIME_MAX ) ; \n\t\twhile $F2137 ( from_corner , to_corner ) { \n\t\t\tPlaPointInt curr_ok_point = r_board . insert_trace ( from_corner , to_corner , pen_half_width_arr [ layer_active_no ] , layer_active_no , net_nos , clearance_class , max_shove_trace_recursion_depth , max_shove_via_recursion_depth , max_spring_over_recursion_depth , itera_settings . trace_pullt_min_move , ! is_stitch_mode , time_limit ) ; \n\t\t\tif ( curr_ok_point == null ) { \n\t\t\t\tr_board . undo ( null ) ; \n\t\t\t\treturn _BOOL ; \n\t\t\t\t} \n\t\t\tif ( curr_ok_point . equals ( from_corner ) && itera_settings . is_automatic_neckdown ( ) ) { \n\t\t\t\tcurr_ok_point = try_neckdown_at_end ( from_corner , to_corner ) ; \n\t\t\t\t} \n\t\t\tif $F1238 ( curr_ok_point , from_corner ) { \n\t\t\t\tprev_corner = from_corner ; \n\t\t\t\tconnection_succeeded = _BOOL ; \n\t\t\t\t$F597 } \n\t\t\tfrom_corner = curr_ok_point ; \n\t\t\t} \n\t\t} \n\treturn connection_succeeded ; \n\t} \n"}, {"code": "private $F9341 findPredecessorOfLast $F72 { \n\tfor ( $F589 ) { \n\t\t$F154321 ( q , head ) for ( $F589 ) { \n\t\t\t$F154319 d , r ; \n\t\t\tif ( ( r = q . right ) != null ) { \n\t\t\t\tif ( r . indexesDeletedNode ( ) ) { \n\t\t\t\t\tq . unlink ( r ) ; \n\t\t\t\t\t$F597 } \n\t\t\t\tif ( r . node . next != null ) $F34544 ( q , r ) } \n\t\t\tif ( ( d = q . down ) != null ) q = d ; \n\t\t\telse return q . node ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public boolean query ( int objectToQuery , long [ ] [ ] hashFunctions ) { \n\tfor ( $F2469 h : hashFunctions ) { \n\t\tint i = hash ( h , ( long ) objectToQuery ) ; \n\t\tif $F87318 ( bitSet , i ) return _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void clear $F72 { \n\t$F101536 ( mLock , mGraphics ) postInvalidate ( ) ; \n\t} \n"}, {"code": "$F28183 public static $F2193 $F25669 createSet ( V ... values ) { \n\t$F25669 set = new LinkedHashSet $F2193 $F72 ; \n\tfor ( V v : values ) $F207 ( set , v ) return set ; \n\t} \n"}, {"code": "$F1 void doConstrainedOutsideScores ( Grammar grammar , boolean viterbi , boolean logScores ) { \n\t$F5078 numSubStatesArray = grammar . numSubStates ; \n\tdouble initVal = ( logScores ) ? Double . NEGATIVE_INFINITY : NUM00 ; \n\tfor ( $F141 ( diff , length ) ) { \n\t\tfor ( int start = NUM00 ; \n\t\tstart + diff <= length ; \n\t\tstart ++ ) { \n\t\t\tint end = start + diff ; \n\t\t\t$F69805 ( scoresAfterUnaries , numStates ) boolean somethingChanged = _BOOL ; \n\t\t\tfor ( $F119 ( cState , numStates ) ) { \n\t\t\t\tif ( diff > NUM00 && ! grammar . isGrammarTag [ cState ] ) $F598 if ( ! allowedStates [ start ] [ end ] [ cState ] ) $F1448 $F55251 rules = null ; \n\t\t\t\tif ( viterbi ) rules = grammar . getClosedViterbiUnaryRulesByChild ( cState ) ; \n\t\t\t\telse rules = grammar . getClosedSumUnaryRulesByChild ( cState ) ; \n\t\t\t\tfinal int nChildStates = numSubStatesArray [ cState ] ; \n\t\t\t\t$F18832 ( numRules , rules ) for ( $F119 ( r , numRules ) ) { \n\t\t\t\t\tUnaryRule ur = rules [ r ] ; \n\t\t\t\t\tint pState = ur . parentState ; \n\t\t\t\t\tif ( ( pState == cState ) ) $F598 if ( ! allowedStates [ start ] [ end ] [ pState ] ) $F1448 $F55256 ( scores , ur ) final int nParentStates = numSubStatesArray [ pState ] ; \n\t\t\t\t\tfor ( $F119 ( cp , nChildStates ) ) { \n\t\t\t\t\t\tif ( scores [ cp ] == null ) $F598 if ( ! allowedSubStates [ start ] [ end ] [ cState ] [ cp ] ) $F598 for ( $F119 ( np , nParentStates ) ) { \n\t\t\t\t\t\t\tdouble pS = scores [ cp ] [ np ] ; \n\t\t\t\t\t\t\t$F73688 ( pS , initVal ) $F55213 ( oS , oScore , start , end , pState , np ) $F73688 ( oS , initVal ) double thisRound = ( logScores ) ? oS + pS : oS * pS ; \n\t\t\t\t\t\t\tif ( scoresAfterUnaries [ cState ] == null ) { \n\t\t\t\t\t\t\t\tscoresAfterUnaries [ cState ] = new double [ numSubStatesArray [ cState ] ] ; \n\t\t\t\t\t\t\t\tif ( viterbi ) Arrays . fill ( scoresAfterUnaries [ cState ] , initVal ) ; \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\tif ( viterbi ) scoresAfterUnaries [ cState ] [ cp ] = Math . max ( thisRound , scoresAfterUnaries [ cState ] [ cp ] ) ; \n\t\t\t\t\t\t\telse scoresAfterUnaries [ cState ] [ cp ] += thisRound ; \n\t\t\t\t\t\t\tsomethingChanged = _BOOL ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tif ( somethingChanged ) { \n\t\t\t\tfor ( $F119 ( cState , numStates ) ) { \n\t\t\t\t\t$F42658 ( thisCell , scoresAfterUnaries , cState ) $F45557 ( thisCell ) for ( $F66767 ( cp , numSubStatesArray , cState ) ) { \n\t\t\t\t\t\tif ( thisCell [ cp ] > initVal ) { \n\t\t\t\t\t\t\tif ( viterbi ) oScore [ start ] [ end ] [ cState ] [ cp ] = Math . max ( oScore [ start ] [ end ] [ cState ] [ cp ] , thisCell [ cp ] ) ; \n\t\t\t\t\t\t\telse oScore [ start ] [ end ] [ cState ] [ cp ] += thisCell [ cp ] ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tfor ( $F1139 ( pState , numSubStatesArray ) ) { \n\t\t\t\tif ( ! allowedStates [ start ] [ end ] [ pState ] ) $F1448 final int nParentChildStates = numSubStatesArray [ pState ] ; \n\t\t\t\t$F55202 ( rules , grammar , pState ) $F18832 ( numRules , rules ) for ( $F119 ( r , numRules ) ) { \n\t\t\t\t\tBinaryRule br = rules [ r ] ; \n\t\t\t\t\tint lState = br . leftChildState ; \n\t\t\t\t\tint min1 = narrowRExtent [ start ] [ lState ] ; \n\t\t\t\t\t$F327539 ( end , min1 ) int rState = br . rightChildState ; \n\t\t\t\t\tint max1 = narrowLExtent [ end ] [ rState ] ; \n\t\t\t\t\t$F327539 ( max1 , min1 ) int min = min1 ; \n\t\t\t\t\tint max = max1 ; \n\t\t\t\t\tif ( max - min > NUM00 ) { \n\t\t\t\t\t\tint min2 = wideLExtent [ end ] [ rState ] ; \n\t\t\t\t\t\tmin = ( min1 > min2 ? min1 : min2 ) ; \n\t\t\t\t\t\t$F327539 ( max1 , min ) int max2 = wideRExtent [ start ] [ lState ] ; \n\t\t\t\t\t\tmax = ( max1 < max2 ? max1 : max2 ) ; \n\t\t\t\t\t\t$F327539 ( max , min ) } \n\t\t\t\t\t$F55210 ( scores , br ) final int nLeftChildStates = numSubStatesArray [ lState ] ; \n\t\t\t\t\tfinal int nRightChildStates = numSubStatesArray [ rState ] ; \n\t\t\t\t\tfor ( int split = min ; \n\t\t\t\t\tsplit <= max ; \n\t\t\t\t\tsplit ++ ) { \n\t\t\t\t\t\tif ( ! allowedStates [ start ] [ split ] [ lState ] ) $F598 if ( ! allowedStates [ split ] [ end ] [ rState ] ) $F598 $F9662 ( rightScores , nRightChildStates ) if ( viterbi ) Arrays . fill ( rightScores , initVal ) ; \n\t\t\t\t\t\tArrays . fill ( scoresToAdd , initVal ) ; \n\t\t\t\t\t\tsomethingChanged = _BOOL ; \n\t\t\t\t\t\tfor ( $F119 ( lp , nLeftChildStates ) ) { \n\t\t\t\t\t\t\t$F55213 ( lS , iScore , start , split , lState , lp ) $F83608 ( lS , initVal ) for ( $F119 ( rp , nRightChildStates ) ) { \n\t\t\t\t\t\t\t\tif $F55215 ( scores , lp , rp ) $F598 $F55213 ( rS , iScore , split , end , rState , rp ) $F83608 ( rS , initVal ) for ( $F119 ( np , nParentChildStates ) ) { \n\t\t\t\t\t\t\t\t\t$F55217 ( pS , scores , lp , rp , np ) $F73688 ( pS , initVal ) $F55213 ( oS , oScore , start , end , pState , np ) $F73688 ( oS , initVal ) double thisRoundL = ( logScores ) ? pS + rS + oS : pS * rS * oS ; \n\t\t\t\t\t\t\t\t\tdouble thisRoundR = ( logScores ) ? pS + lS + oS : pS * lS * oS ; \n\t\t\t\t\t\t\t\t\tif ( viterbi ) { \n\t\t\t\t\t\t\t\t\t\tscoresToAdd [ lp ] = Math . max ( thisRoundL , scoresToAdd [ lp ] ) ; \n\t\t\t\t\t\t\t\t\t\trightScores [ rp ] = Math . max ( thisRoundR , rightScores [ rp ] ) ; \n\t\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t\telse { \n\t\t\t\t\t\t\t\t\t\tscoresToAdd [ lp ] += thisRoundL ; \n\t\t\t\t\t\t\t\t\t\trightScores [ rp ] += thisRoundR ; \n\t\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t\tsomethingChanged = _BOOL ; \n\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\tif ( ! somethingChanged ) $F598 for ( $F119 ( cp , nLeftChildStates ) ) { \n\t\t\t\t\t\t\tif ( scoresToAdd [ cp ] > initVal ) { \n\t\t\t\t\t\t\t\tif ( viterbi ) oScore [ start ] [ split ] [ lState ] [ cp ] = Math . max ( oScore [ start ] [ split ] [ lState ] [ cp ] , scoresToAdd [ cp ] ) ; \n\t\t\t\t\t\t\t\telse oScore [ start ] [ split ] [ lState ] [ cp ] += scoresToAdd [ cp ] ; \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\tfor ( $F119 ( cp , nRightChildStates ) ) { \n\t\t\t\t\t\t\tif ( rightScores [ cp ] > initVal ) { \n\t\t\t\t\t\t\t\tif ( viterbi ) oScore [ split ] [ end ] [ rState ] [ cp ] = Math . max ( oScore [ split ] [ end ] [ rState ] [ cp ] , rightScores [ cp ] ) ; \n\t\t\t\t\t\t\t\telse oScore [ split ] [ end ] [ rState ] [ cp ] += rightScores [ cp ] ; \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void stop $F72 { \n\ttimeMonIndex = NUM00 ; \n\tsetException ( ) ; \n\tIterator iter = iter ( ) ; \n\twhile $F2921 ( iter ) { \n\t\tHttpMonItem monItem = ( HttpMonItem ) iter . next ( ) ; \n\t\tmonItem . stop ( this ) ; \n\t\t} \n\t$F42855 ( stackTrace , changeDetails ) } \n"}, {"code": "public void calcMinTick $F72 { \n\tif ( minData == NUM00 ) minTick = NUM00 ; \n\telse minTick = Math . floor ( minData / majorTick ) * majorTick ; \n\t} \n"}, {"code": "public static void switchTiming ( String nextPhase ) $F19529 ( stopMostRecentTimer , startTiming , nextPhase ) "}, {"code": "public $F96 encode $F72 { \n\tchar type = getAttributeType ( ) ; \n\tif ( ! isTypeValid ( type ) ) throw new IllegalStateException ( $F1047 ( type ) + NUM00 ) ; \n\tbyte $F8033 = new byte [ HEADER_LENGTH + getDataLength ( ) ] ; \n\t$F8045 ( binValue , type ) $F8048 ( binValue , type ) $F8052 ( binValue , getDataLength ) $F8056 ( binValue , getDataLength ) binValue [ NUM00 ] = NUM00 ; \n\t$F320194 ( binValue , getFamily ) $F8052 ( binValue , getPort ) $F8056 ( binValue , getPort ) if ( getFamily ( ) == ADDRESS_FAMILY_IPV6 ) { \n\t\tSystem . arraycopy ( getAddressBytes ( ) , NUM00 , binValue , NUM00 , NUM00 ) ; \n\t\t} \n\telse { \n\t\tSystem . arraycopy ( getAddressBytes ( ) , NUM00 , binValue , NUM00 , NUM00 ) ; \n\t\t} \n\treturn binValue ; \n\t} \n"}, {"code": "private void doDeleteEntry ( String alias ) throws Exception { \n\tif ( keyStore . containsAlias ( alias ) == _BOOL ) { \n\t\t$F22029 ( form , rb ) $F22031 ( source , alias ) throw new Exception $F22032 ( form , source ) ; \n\t\t} \n\tkeyStore . deleteEntry ( alias ) ; \n\t} \n"}, {"code": "protected Integer mapThrowableFlat ( Throwable throwable ) { \n\t$F78637 throwableClass = throwable . getClass ( ) ; \n\t$F99426 ( resId , throwableToMsgIdMap , throwableClass ) if ( resId == null ) { \n\t\t$F78637 closestClass = null ; \n\t\tSet < Entry < $F78637 , Integer > > mappings = throwableToMsgIdMap . entrySet ( ) ; \n\t\tfor ( Entry < $F78637 , Integer > mapping : mappings ) { \n\t\t\t$F78637 candidate = mapping . getKey ( ) ; \n\t\t\tif $F62123 ( candidate , throwableClass ) { \n\t\t\t\tif ( closestClass == null || closestClass . isAssignableFrom ( candidate ) ) { \n\t\t\t\t\tclosestClass = candidate ; \n\t\t\t\t\t$F37891 ( resId , mapping ) } \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn resId ; \n\t} \n"}, {"code": "$F1 public $F987 listOptions $F72 { \n\t$F20795 ( newVector ) $F77737 ( newVector ) $F424068 ( newVector ) $F1007 ( newVector ) } \n"}, {"code": "public void assertColumnType ( ResultSet rs ) throws SQLException { \n\t$F19097 ( md , rs ) int sqlType = md . getColumnType ( mdi . getPosition ( ) ) ; \n\tassertTrue ( String . format ( NUM00 , sqlType , mdi ) , isAllowedSqlType ( sqlType ) ) ; \n\t} \n"}, {"code": "private void validateDnsNames ( Set dnsNameSet ) throws PolicyException { \n\t$F10531 ( dnsNames , dnsNameSet ) while $F2921 ( dnsNames ) { \n\t\t$F2778 ( dnsName , dnsNames ) validateDnsName ( dnsName ) ; \n\t\t$F9631 ( dnsList , dnsName ) } \n\t} \n"}, {"code": "public static boolean isMopMethod ( String methodName ) { \n\treturn $F418 ( methodName ) && $F49413 ( methodName ) ; \n\t} \n"}, {"code": "protected void init $F72 { \n\tGraphicsConfigTemplate3D template = new GraphicsConfigTemplate3D $F72 ; \n\tGraphicsEnvironment env = GraphicsEnvironment . getLocalGraphicsEnvironment ( ) ; \n\tGraphicsDevice device = env . getDefaultScreenDevice ( ) ; \n\tGraphicsConfiguration config = device . getBestConfiguration ( template ) ; \n\tcanvas = new Canvas3D ( config ) ; \n\tcanvas . setSize ( new Dimension ( DEFAULT_DIMENSION , DEFAULT_DIMENSION ) ) ; \n\tobjRootBG = new BranchGroup $F72 ; \n\tobjRootBG . setCapability ( Group . ALLOW_CHILDREN_EXTEND ) ; \n\tconstructWorld ( objRootBG ) ; \n\t} \n"}, {"code": "private < Delegated > PresenterBinder < ? super Delegated > findPresenterBinderForClass ( Class < Delegated > clazz ) throws IllegalAccessException , InstantiationException { \n\tPresenterBinder < ? super Delegated > presenterBinder ; \n\t$F20605 ( clsName , clazz ) String className = clsName + PRESENTER_BINDER_SUFFIX ; \n\ttry { \n\t\t$F96883 ( presenterBinderClass , Class , className ) presenterBinder = ( PresenterBinder < ? super Delegated > ) presenterBinderClass . newInstance ( ) ; \n\t\t} \n\tcatch ( ClassNotFoundException e ) $F1337 return presenterBinder ; \n\t} \n"}, {"code": "$F1 final $F9341 find ( int h , Object k ) { \n\tif ( k != null ) { \n\t\tfor ( $F9341 e = first ; \n\t\te != null ; \n\t\t) { \n\t\t\tint s ; \n\t\t\tif ( ( ( s = lockState ) & ( WAITER | WRITER ) ) != NUM00 ) { \n\t\t\t\tif ( e . hash == h && isEqual ( ( K ) k , e . key , myHashingStrategy ) ) { \n\t\t\t\t\treturn e ; \n\t\t\t\t\t} \n\t\t\t\te = e . next ; \n\t\t\t\t} \n\t\t\telse if ( U . compareAndSwapInt ( this , LOCKSTATE , s , s + READER ) ) { \n\t\t\t\t$F35195 ( r , p ) try { \n\t\t\t\t\tp = ( ( r = root ) == null ? null : r . findTreeNode ( h , k , null ) ) ; \n\t\t\t\t\t} \n\t\t\t\tfinally { \n\t\t\t\t\tint ls ; \n\t\t\t\t\tdo $F845 while ( ! U . compareAndSwapInt ( this , LOCKSTATE , ls = lockState , ls - READER ) ) ; \n\t\t\t\t\tThread w ; \n\t\t\t\t\tif ( ls == ( READER | WAITER ) && ( w = waiter ) != null ) { \n\t\t\t\t\t\tLockSupport . unpark ( w ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\treturn p ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F1274 } \n"}, {"code": "public void square $F7635 ( x , y , r ) { \n\t$F30465 ( r ) double xs = scaleX ( x ) ; \n\tdouble ys = scaleY ( y ) ; \n\tdouble ws = factorX ( NUM00 * r ) ; \n\tdouble hs = factorY ( NUM00 * r ) ; \n\tif ( ws <= NUM00 && hs <= NUM00 ) pixel ( x , y ) ; \n\telse offscreen . draw ( new $F1634 ( xs - ws / NUM00 , ys - hs / NUM00 , ws , hs ) ) ; \n\tdraw ( ) ; \n\t} \n"}, {"code": "$F41720 ( value , absMin , absMax , absValue , Math ) "}, {"code": "private int lowerHeightMap $F14337 ( x , y , z ) { \n\tfor ( -- y ; \n\ty >= NUM00 ; \n\t-- y ) { \n\t\tif ( getType ( x , z , y ) != NUM00 ) $F5153 } \n\treturn y + NUM00 ; \n\t} \n"}, {"code": "public String toString $F72 { \n\t$F8755 ( result ) for ( $F2277 ( i , intervalls ) ) result . append ( intervalls . elementAt ( i ) ) ; \n\t$F84 ( result ) $F92 ( result ) } \n"}, {"code": "public void remove ( $F1113 StatusNotification notification ) { \n\tstack . remove ( notification ) ; \n\tonClose ( notification ) ; \n\t} \n"}, {"code": "private JobDefinitionEntity createOrUpdateJobDefinitionEntity ( JobDefinitionEntity jobDefinitionEntity , NamespaceEntity namespaceEntity , String jobName , String description , String activitiId , $F292037 parameters , S3PropertiesLocation s3PropertiesLocation ) { \n\tJobDefinitionEntity jobDefinitionEntityLocal = jobDefinitionEntity ; \n\tif ( jobDefinitionEntityLocal == null ) { \n\t\tjobDefinitionEntityLocal = new JobDefinitionEntity $F72 ; \n\t\t} \n\tjobDefinitionEntityLocal . setName ( jobName ) ; \n\tjobDefinitionEntityLocal . setNamespace ( namespaceEntity ) ; \n\tjobDefinitionEntityLocal . setDescription ( description ) ; \n\tjobDefinitionEntityLocal . setActivitiId ( activitiId ) ; \n\tString bucketName = null ; \n\tString key = null ; \n\tif ( s3PropertiesLocation != null ) { \n\t\tbucketName = s3PropertiesLocation . getBucketName ( ) ; \n\t\t$F76754 ( key , s3PropertiesLocation ) } \n\tjobDefinitionEntityLocal . setS3BucketName ( bucketName ) ; \n\tjobDefinitionEntityLocal . setS3ObjectKey ( key ) ; \n\tList < JobDefinitionParameterEntity > $F204 ( parameterEntities ) ; \n\tif $F20899 ( CollectionUtils , parameters ) { \n\t\tfor ( Parameter parameter : parameters ) { \n\t\t\tJobDefinitionParameterEntity parameterEntity = new JobDefinitionParameterEntity $F72 ; \n\t\t\tparameterEntities . add ( parameterEntity ) ; \n\t\t\t$F69429 ( parameterEntity , parameter ) parameterEntity . setValue ( parameter . getValue ( ) ) ; \n\t\t\t} \n\t\t} \n\tjobDefinitionEntityLocal . setParameters ( parameterEntities ) ; \n\treturn jobDefinitionEntityLocal ; \n\t} \n"}, {"code": "public void find ( int index , float weightLoss , float moveCost , ArrayList < DbEntry > itemsPlaced ) { \n\tif ( ( weightLoss >= lowestWeightLoss ) || ( ( weightLoss == lowestWeightLoss ) && ( moveCost >= lowestMoveCost ) ) ) $F932 else if $F6389 ( index , itemsToPlace ) { \n\t\tlowestWeightLoss = weightLoss ; \n\t\tlowestMoveCost = moveCost ; \n\t\tfinalPlacedItems = deepCopy ( itemsPlaced ) ; \n\t\t$F665 } \n\tDbEntry me = itemsToPlace . get ( index ) ; \n\tint myX = me . cellX ; \n\tint myY = me . cellY ; \n\tArrayList < DbEntry > itemsIncludingMe = new $F201 ( $F2958 ( itemsPlaced ) ) ; \n\titemsIncludingMe . addAll ( itemsPlaced ) ; \n\titemsIncludingMe . add ( me ) ; \n\tif ( me . spanX > NUM00 || me . spanY > NUM00 ) { \n\t\tint myW = me . spanX ; \n\t\tint myH = me . spanY ; \n\t\tfor ( $F119 ( y , mTrgY ) ) { \n\t\t\tfor ( $F119 ( x , mTrgX ) ) { \n\t\t\t\tfloat newMoveCost = moveCost ; \n\t\t\t\tif ( x != myX ) { \n\t\t\t\t\tme . cellX = x ; \n\t\t\t\t\tnewMoveCost ++ ; \n\t\t\t\t\t} \n\t\t\t\tif ( y != myY ) { \n\t\t\t\t\tme . cellY = y ; \n\t\t\t\t\tnewMoveCost ++ ; \n\t\t\t\t\t} \n\t\t\t\t$F65989 ( ignoreMove , newMoveCost , moveCost ) if ( isVacant ( occupied , x , y , myW , myH ) ) { \n\t\t\t\t\tmarkCells ( occupied , me , _BOOL ) ; \n\t\t\t\t\tfind ( index + NUM00 , weightLoss , newMoveCost , itemsIncludingMe ) ; \n\t\t\t\t\tmarkCells ( occupied , me , _BOOL ) ; \n\t\t\t\t\t} \n\t\t\t\tif ( myW > me . minSpanX && isVacant ( occupied , x , y , myW - NUM00 , myH ) ) { \n\t\t\t\t\tme . spanX -- ; \n\t\t\t\t\tmarkCells ( occupied , me , _BOOL ) ; \n\t\t\t\t\tfind ( index + NUM00 , weightLoss , newMoveCost + NUM00 , itemsIncludingMe ) ; \n\t\t\t\t\tmarkCells ( occupied , me , _BOOL ) ; \n\t\t\t\t\tme . spanX ++ ; \n\t\t\t\t\t} \n\t\t\t\tif ( myH > me . minSpanY && isVacant ( occupied , x , y , myW , myH - NUM00 ) ) { \n\t\t\t\t\tme . spanY -- ; \n\t\t\t\t\tmarkCells ( occupied , me , _BOOL ) ; \n\t\t\t\t\tfind ( index + NUM00 , weightLoss , newMoveCost + NUM00 , itemsIncludingMe ) ; \n\t\t\t\t\tmarkCells ( occupied , me , _BOOL ) ; \n\t\t\t\t\tme . spanY ++ ; \n\t\t\t\t\t} \n\t\t\t\tif ( myH > me . minSpanY && myW > me . minSpanX && isVacant ( occupied , x , y , myW - NUM00 , myH - NUM00 ) ) { \n\t\t\t\t\tme . spanX -- ; \n\t\t\t\t\tme . spanY -- ; \n\t\t\t\t\tmarkCells ( occupied , me , _BOOL ) ; \n\t\t\t\t\tfind ( index + NUM00 , weightLoss , newMoveCost + NUM00 , itemsIncludingMe ) ; \n\t\t\t\t\tmarkCells ( occupied , me , _BOOL ) ; \n\t\t\t\t\tme . spanX ++ ; \n\t\t\t\t\tme . spanY ++ ; \n\t\t\t\t\t} \n\t\t\t\tme . cellX = myX ; \n\t\t\t\tme . cellY = myY ; \n\t\t\t\t} \n\t\t\t} \n\t\tfind ( index + NUM00 , weightLoss + me . weight , moveCost , itemsPlaced ) ; \n\t\t} \n\telse { \n\t\tint newDistance = Integer . MAX_VALUE ; \n\t\tint newX = Integer . MAX_VALUE , newY = Integer . MAX_VALUE ; \n\t\tfor ( $F119 ( y , mTrgY ) ) { \n\t\t\tfor ( $F119 ( x , mTrgX ) ) { \n\t\t\t\tif ( ! occupied [ x ] [ y ] ) { \n\t\t\t\t\tint dist = ignoreMove ? NUM00 : ( ( me . cellX - x ) * ( me . cellX - x ) + ( me . cellY - y ) * ( me . cellY - y ) ) ; \n\t\t\t\t\tif ( dist < newDistance ) { \n\t\t\t\t\t\tnewX = x ; \n\t\t\t\t\t\tnewY = y ; \n\t\t\t\t\t\tnewDistance = dist ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tif ( newX < mTrgX && newY < mTrgY ) { \n\t\t\tfloat newMoveCost = moveCost ; \n\t\t\tif ( newX != myX ) { \n\t\t\t\tme . cellX = newX ; \n\t\t\t\tnewMoveCost ++ ; \n\t\t\t\t} \n\t\t\tif ( newY != myY ) { \n\t\t\t\tme . cellY = newY ; \n\t\t\t\tnewMoveCost ++ ; \n\t\t\t\t} \n\t\t\t$F65989 ( ignoreMove , newMoveCost , moveCost ) markCells ( occupied , me , _BOOL ) ; \n\t\t\tfind ( index + NUM00 , weightLoss , newMoveCost , itemsIncludingMe ) ; \n\t\t\tmarkCells ( occupied , me , _BOOL ) ; \n\t\t\tme . cellX = myX ; \n\t\t\tme . cellY = myY ; \n\t\t\tif ( index + NUM00 < itemsToPlace . size ( ) && itemsToPlace . get ( index + NUM00 ) . weight >= me . weight && ! ignoreMove ) { \n\t\t\t\tfind ( index + NUM00 , weightLoss + me . weight , moveCost , itemsPlaced ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tfor ( $F2290 ( i , index , itemsToPlace ) ) { \n\t\t\t\tweightLoss += itemsToPlace . get ( i ) . weight ; \n\t\t\t\t} \n\t\t\tfind ( itemsToPlace . size ( ) , weightLoss + me . weight , moveCost , itemsPlaced ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F133772 ( RequestMethod ) $F4586 public RestWrapper insert ( $F100302 $F100303 Users users , BindingResult bindingResult , Principal principal ) { \n\tRestWrapper restWrapper = null ; \n\t$F100315 ( bindingResult , bindingResultError ) try { \n\t\tString hashedPassword = DigestUtils . sha1Hex ( users . getPassword ( ) ) ; \n\t\tcom . wipro . ats . bdre . md . dao . jpa . Users jpaUsers = new com . wipro . ats . bdre . md . dao . jpa . Users $F72 ; \n\t\tjpaUsers . setPassword ( hashedPassword ) ; \n\t\tjpaUsers . setUsername ( users . getUsername ( ) ) ; \n\t\tjpaUsers . setEnabled ( ( users . getEnabled ( ) == NUM00 ) ? _BOOL : _BOOL ) ; \n\t\tusersDAO . insert ( jpaUsers ) ; \n\t\t$F4608 ( restWrapper , users , RestWrapper ) LOGGER . info ( NUM00 + users . getUsername ( ) + NUM00 + principal . getName ( ) + users ) ; \n\t\t} \n\t$F20495 ( LOGGER , e , restWrapper , RestWrapper ) return restWrapper ; \n\t} \n"}, {"code": "public static String cappedInt ( final long val ) { \n\tif ( val >= Integer . MAX_VALUE ) { \n\t\treturn OVER ; \n\t\t} \n\telse if ( val <= Integer . MIN_VALUE ) { \n\t\treturn UNDER ; \n\t\t} \n\t$F23209 ( Long , val ) } \n"}, {"code": "private void createFromAssets ( String myDBName , File dbfile , InputStream assetFileInputStream ) { \n\tOutputStream out = null ; \n\ttry { \n\t\t$F22814 ( dbPath , dbfile ) dbPath = dbPath . substring ( NUM00 , $F31603 ( dbPath ) ) ; \n\t\t$F1705 ( dbPathFile , dbPath ) if $F1906 ( dbPathFile ) $F1907 ( dbPathFile ) $F43662 ( newDbFile , dbPath , myDBName ) $F10893 ( out , newDbFile ) $F12496 ( buf ) int len ; \n\t\twhile $F87061 ( len , assetFileInputStream , buf ) $F11584 ( out , buf , len ) Log . v ( NUM00 , $F4929 ( newDbFile ) ) ; \n\t\t} \n\tcatch ( IOException ex ) { \n\t\tLog . v ( NUM00 , $F5351 ( ex ) ) ; \n\t\t} \n\tfinally $F25132 ( out ) } \n"}, {"code": "public static _Fields findByThriftId ( int fieldId ) { \n\tswitch ( fieldId ) { \n\t\t$F3366 return PERSON_PROPERTY ; \n\t\t$F3366 return PAGE_PROPERTY ; \n\t\t$F3366 return EQUIV ; \n\t\t$F3366 return PAGE_VIEW ; \n\t\t$F20809 } \n\t} \n"}, {"code": "protected String internalPut ( String key , String newValue ) { \n\tsynchronized ( childAndPropertyLock ) { \n\t\t$F1729 ( oldValue , properties , key ) if $F1256 ( oldValue , newValue ) return oldValue ; \n\t\tproperties = properties . put ( key , newValue ) ; \n\t\treturn oldValue ; \n\t\t} \n\t} \n"}, {"code": "public Polyline ( PlaPointInt p_from_corner , PlaPointInt p_to_corner ) { \n\tif $F1238 ( p_from_corner , p_to_corner ) $F70401 ( classname ) lines_list = new ArrayList $F66714 $F989 ; \n\tPlaDirection dir = new PlaDirection ( p_from_corner , p_to_corner ) ; \n\tlines_list . add ( new PlaLineInt ( p_from_corner , dir . rotate_45_deg ( NUM00 ) ) ) ; \n\tlines_list . add ( new PlaLineInt ( p_from_corner , p_to_corner ) ) ; \n\tlines_list . add ( new PlaLineInt ( p_to_corner , dir . rotate_45_deg ( NUM00 ) ) ) ; \n\tcorners_allocate ( corner_count ( ) ) ; \n\tprecalculated_corners [ NUM00 ] = p_from_corner ; \n\tprecalculated_corners [ NUM00 ] = p_to_corner ; \n\t} \n"}, {"code": "protected boolean isOnSameScreenAsChildren $F72 { \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static String formatPrice ( Double price ) { \n\t$F1747 ( price ) return formatPrice ( price . doubleValue ( ) ) ; \n\t} \n"}, {"code": "static void checkLogDir $F72 { \n\tif ( System . getProperty ( NUM00 ) == null ) $F21338 ( log ) } \n"}, {"code": "private static boolean isMoreAbove ( String src , int index ) { \n\tint ch ; \n\tint cc ; \n\t$F1749 ( len , src ) for ( int i = index + Character . charCount ( src . codePointAt ( index ) ) ; \n\ti < len ; \n\ti += Character . charCount ( ch ) ) { \n\t\tch = src . codePointAt ( i ) ; \n\t\tcc = Normalizer . getCombiningClass ( ch ) ; \n\t\tif ( cc == COMBINING_CLASS_ABOVE ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\telse $F6482 ( cc , _BOOL ) } \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void restoreKey ( String key ) { \n\tif $F14072 ( key ) { \n\t\t$F130950 ( originalKey , key , keyTestMode ) Object value = get ( key ) ; \n\t\tput ( originalKey , value ) ; \n\t\tclear ( key ) ; \n\t\t} \n\t} \n"}, {"code": "public boolean hasUnsupportedCriticalExtension $F72 { \n\tSet extns = getCriticalExtensionOIDs ( ) ; \n\t$F1933 ( extns , _BOOL ) extns . remove ( RFC3280CertPathUtilities . ISSUING_DISTRIBUTION_POINT ) ; \n\textns . remove ( RFC3280CertPathUtilities . DELTA_CRL_INDICATOR ) ; \n\t$F3386 ( extns ) } \n"}, {"code": "public static void writeInt ( DataOutput out , int v ) throws IOException { \n\tout . writeByte ( NUM00 & v ) ; \n\tout . writeByte ( $F223664 ( v ) ) ; \n\tout . writeByte ( $F223664 ( v ) ) ; \n\tout . writeByte ( $F223664 ( v ) ) ; \n\t} \n"}, {"code": "public static $F173034 sortCopy ( $F173034 objects ) { \n\tint len = objects . length ; \n\t$F173034 copy = new Comparable [ len ] ; \n\t$F135 ( System , objects , copy , len ) sort ( copy ) ; \n\treturn copy ; \n\t} \n"}, {"code": "private Utf8Constant parseUtf8Constant ( int index ) throws IOException { \n\tint length = readShort ( ) ; \n\t$F83 ( cb ) for ( $F119 ( i , length ) ) { \n\t\tint ch = read ( ) ; \n\t\tif ( ch < NUM00 ) $F46352 ( cb , ch ) else if $F14827 ( ch ) { \n\t\t\tint ch2 = read ( ) ; \n\t\t\ti ++ ; \n\t\t\tcb . append ( ( char ) ( $F186272 ( ch , ch2 ) ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tint ch2 = read ( ) ; \n\t\t\tint ch3 = read ( ) ; \n\t\t\ti += NUM00 ; \n\t\t\tcb . append ( ( char ) ( $F74254 ( ch ) + $F74254 ( ch2 ) + ( ( ch3 & NUM00 ) ) ) ) ; \n\t\t\t} \n\t\t} \n\treturn new Utf8Constant ( _class . getConstantPool ( ) , index , cb . toString ( ) ) ; \n\t} \n"}, {"code": "$F1 public boolean markNextSequence $F72 throws IOException { \n\tif ( mSeqSize < mLimit && mPointerSize + mPointerEntrySize <= mLimit ) { \n\t\tmPointers . writeByte ( ( int ) mChecksumSeq . getValue ( ) ) ; \n\t\t$F2268 ( mChecksumSeq ) if ( mChecksumQual != null ) { \n\t\t\tmPointers . writeByte ( ( int ) mChecksumQual . getValue ( ) ) ; \n\t\t\t$F2268 ( mChecksumQual ) } \n\t\tmPointers . writeInt ( ( int ) mSeqSize ) ; \n\t\tmPointerSize += mPointerEntrySize ; \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public final double sampleActiveCount $F72 $F1522 ( _activeCount ) "}, {"code": "private void preprocessData ( Map < Integer , Map < Integer , $F3807 > > knotenVonSpurNachSpurMapping , Map < Integer , $F20666 > knotenSpurLinkMapping ) { \n\tpreprocessKnotenSpurLinkMapping ( knotenSpurLinkMapping ) ; \n\tcleanKnotenVonSpurNachSpurMapping ( knotenVonSpurNachSpurMapping , knotenSpurLinkMapping ) ; \n\tmergeLanesOnSameLink ( knotenVonSpurNachSpurMapping , knotenSpurLinkMapping ) ; \n\t} \n"}, {"code": "$F1 public boolean mutate ( TestCase test , TestFactory factory ) { \n\tif ( Randomness . nextDouble ( ) >= Properties . P_CHANGE_PARAMETER ) return _BOOL ; \n\tif $F931 ( isStatic ) { \n\t\tVariableReference source = getSource ( ) ; \n\t\tList < VariableReference > objects = test . getObjects ( source . getType ( ) , getPosition ( ) ) ; \n\t\tobjects . remove ( source ) ; \n\t\tif $F5973 ( objects ) { \n\t\t\tsetSource ( Randomness . choice ( objects ) ) ; \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "$F1 protected void drawXLabels $F31491 ( xLabels , xTextLabelLocations , canvas , paint , left , top , bottom , xPixelsPerUnit , minX , maxX ) { \n\t$F2199 ( length , xLabels ) if ( length > NUM00 ) { \n\t\t$F31493 ( showLabels , mRenderer ) $F31495 ( showGridY , mRenderer ) $F31497 ( showTickMarks , mRenderer ) DateFormat format = getDateFormat ( xLabels . get ( NUM00 ) , xLabels . get ( length - NUM00 ) ) ; \n\t\tfor ( $F119 ( i , length ) ) { \n\t\t\tlong label = Math . round ( xLabels . get ( i ) ) ; \n\t\t\t$F31501 ( xLabel , left , xPixelsPerUnit , label , minX ) if ( showLabels ) { \n\t\t\t\t$F31503 ( paint , mRenderer ) $F31510 ( showTickMarks , canvas , xLabel , bottom , mRenderer , paint ) drawText ( canvas , format . format ( new Date ( label ) ) , xLabel , $F31515 ( bottom , mRenderer ) , paint , mRenderer . getXLabelsAngle ( ) ) ; \n\t\t\t\t} \n\t\t\t$F31525 ( showGridY , paint , mRenderer , canvas , xLabel , bottom , top ) } \n\t\t} \n\tdrawXTextLabels ( xTextLabelLocations , canvas , paint , _BOOL , left , top , bottom , xPixelsPerUnit , minX , maxX ) ; \n\t} \n"}, {"code": "public XPath ( String exprString , SourceLocator locator , PrefixResolver prefixResolver , int type ) throws $F1872 { \n\tthis ( exprString , locator , prefixResolver , type , null ) ; \n\t} \n"}, {"code": "private void addMenuItem ( JPopupMenu menu , String title , MWFNode node , int AD_WF_NodeTo_ID ) { \n\tWFPopupItem item = new WFPopupItem ( title , node , AD_WF_NodeTo_ID ) ; \n\tmenu . add ( item ) ; \n\titem . addActionListener ( this ) ; \n\t} \n"}, {"code": "public synchronized long allocate ( int length ) { \n\tint blocks = getBlockCount ( length ) ; \n\tBlockRange x = null ; \n\tfor ( BlockRange b : freeSpace ) { \n\t\tif ( b . blocks >= blocks ) $F3468 ( x , b ) } \n\tlong pos = getPos ( x . start ) ; \n\tif ( x . blocks == blocks ) $F106 ( freeSpace , x ) else { \n\t\tx . start += blocks ; \n\t\tx . blocks -= blocks ; \n\t\t} \n\treturn pos ; \n\t} \n"}, {"code": "public JenkinsHttpClient ( URI uri , String username , String password ) { \n\tthis ( uri ) ; \n\tif ( isNotBlank ( username ) ) { \n\t\tCredentialsProvider provider = client . getCredentialsProvider ( ) ; \n\t\tAuthScope scope = new AuthScope ( uri . getHost ( ) , uri . getPort ( ) , AuthScope . ANY_REALM ) ; \n\t\tUsernamePasswordCredentials credentials = new UsernamePasswordCredentials ( username , password ) ; \n\t\tprovider . setCredentials ( scope , credentials ) ; \n\t\tlocalContext = new BasicHttpContext $F72 ; \n\t\tlocalContext . setAttribute ( NUM00 , new BasicScheme $F72 ) ; \n\t\tclient . addRequestInterceptor ( new PreemptiveAuth $F72 , NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "public static Set combineOCs ( Set one , Set two ) { \n\t$F34929 ( one , two ) $F34929 ( two , one ) $F19850 ( resultSet ) $F10531 ( itr1 , one ) while $F2921 ( itr1 ) { \n\t\t$F2778 ( value1 , itr1 ) $F9631 ( resultSet , value1 ) } \n\t$F10531 ( itr2 , two ) while $F2921 ( itr2 ) { \n\t\t$F2778 ( value2 , itr2 ) $F9631 ( resultSet , value2 ) } \n\treturn resultSet ; \n\t} \n"}, {"code": "private String wrap ( String str ) { \n\t$F7542 ( buf , str ) int len = lineLength ; \n\twhile $F7007 ( len , buf ) { \n\t\t$F99139 ( idx , buf , len ) if ( idx != - NUM00 ) { \n\t\t\tbuf . replace ( idx , idx + NUM00 , breaker ) ; \n\t\t\tlen = idx + breaker . length ( ) + lineLength ; \n\t\t\t} \n\t\telse { \n\t\t\tbuf . insert ( len , breaker ) ; \n\t\t\tlen += breaker . length ( ) + lineLength ; \n\t\t\t} \n\t\t} \n\t$F2864 ( buf ) $F92 ( buf ) } \n"}, {"code": "public EchoStateNetwork commitChanges $F72 { \n\tNetwork net = networkPanel . getNetwork ( ) ; \n\tInteger numIns = Utils . parseInteger ( tfInputLayerPop ) ; \n\t$F826 ( numIns ) NeuronGroup inputLayer = new NeuronGroup ( net , numIns ) ; \n\tif ( inputLayer . size ( ) > inputLayer . getGridThreshold ( ) ) { \n\t\tinputLayer . setLayout ( new org . simbrain . network . layouts . GridLayout $F72 ) ; \n\t\t} \n\tinputLayer . applyLayout ( ) ; \n\tNeuronGroup reservoirLayer = reservoirPanel . createLayerFromData ( ) ; \n\tif ( reservoirLayer . size ( ) > reservoirLayer . getGridThreshold ( ) ) { \n\t\treservoirLayer . setLayout ( new org . simbrain . network . layouts . GridLayout $F72 ) ; \n\t\t} \n\treservoirLayer . applyLayout ( ) ; \n\tSynapseGroup resSynapses = resToResPanel . createSynapseGroup ( reservoirLayer , reservoirLayer ) ; \n\tresSynapses . setLabel ( NUM00 ) ; \n\tNeuronGroup outputLayer = outputPanel . createLayerFromData ( ) ; \n\toutputLayer . applyLayout ( ) ; \n\tif ( outputLayer . size ( ) > outputLayer . getGridThreshold ( ) ) { \n\t\toutputLayer . setLayout ( new org . simbrain . network . layouts . GridLayout $F72 ) ; \n\t\t} \n\tEchoStateNetwork esn = new EchoStateNetwork ( net , networkPanel . getLastClickedPosition ( ) ) ; \n\tesn . setBackWeights ( allowOutToRes . isSelected ( ) ) ; \n\tesn . setDirectInOutWeights ( directInputToOutput . isSelected ( ) ) ; \n\tesn . setRecurrentOutWeights ( allowRecurrentOutputs . isSelected ( ) ) ; \n\tesn . setTimeType ( ( TimeType ) cbTimeType . getSelectedItem ( ) ) ; \n\tdouble maxEig = Utils . doubleParsable ( spectralRadius ) ; \n\tif $F35707 ( Double , maxEig ) $F825 esn . initializeInputLayer ( inputLayer ) ; \n\tesn . initializeReservoir ( reservoirLayer , resSynapses , maxEig ) ; \n\tesn . initializeOutput ( outputLayer ) ; \n\tSynapseGroup itr = inToResPanel . createSynapseGroup ( inputLayer , reservoirLayer ) ; \n\titr . setLabel ( NUM00 ) ; \n\tesn . addSynapseGroup ( itr ) ; \n\tSynapseGroup rto = SynapseGroup . createSynapseGroup ( reservoirLayer , outputLayer , NUM00 ) ; \n\trto . setLabel ( NUM00 ) ; \n\tesn . addSynapseGroup ( rto ) ; \n\tif $F31483 ( allowRecurrentOutputs ) { \n\t\tSynapseGroup oto = SynapseGroup . createSynapseGroup ( outputLayer , outputLayer , NUM00 ) ; \n\t\toto . setLabel ( NUM00 ) ; \n\t\tesn . addSynapseGroup ( oto ) ; \n\t\t} \n\tif $F31483 ( allowOutToRes ) { \n\t\tSynapseGroup otr = outToResPanel . createSynapseGroup ( outputLayer , reservoirLayer ) ; \n\t\totr . setLabel ( NUM00 ) ; \n\t\tesn . addSynapseGroup ( otr ) ; \n\t\t} \n\tif $F31483 ( directInputToOutput ) { \n\t\tSynapseGroup ito = SynapseGroup . createSynapseGroup ( inputLayer , outputLayer , NUM00 ) ; \n\t\tito . setLabel ( NUM00 ) ; \n\t\tesn . addSynapseGroup ( ito ) ; \n\t\t} \n\tesn . positionLayers ( ) ; \n\treturn esn ; \n\t} \n"}, {"code": "public static double pdf $F7635 ( x , shape , scale ) { \n\tif ( x < NUM00 ) $F1082 if ( x == NUM00 ) { \n\t\tif ( shape == NUM00 ) return NUM00 / scale ; \n\t\telse $F1082 } \n\tif ( shape == NUM00 ) return NUM00 / x ; \n\tif ( shape == - NUM00 ) { \n\t\t$F41531 ( Math , x ) } \n\tfinal double xs = x / scale ; \n\tif ( shape == NUM00 ) { \n\t\treturn Math . exp ( - xs ) / scale ; \n\t\t} \n\tfinal double a = Math . exp ( $F207655 ( shape , Math , xs ) - xs - GammaFunction . lnGamma ( shape ) ) ; \n\treturn a / scale ; \n\t} \n"}, {"code": "public void flush $F72 { \n\tsynchronized ( list ) { \n\t\tint n = NUM00 ; \n\t\tlong m = NUM00 ; \n\t\tfor ( T b : list ) { \n\t\t\tif ( halt ) throw new RuntimeException $F27748 ( firstCause ) ; \n\t\t\t$F11550 ( size , b ) final long counter = b . flush ( ) ; \n\t\t\tm += counter ; \n\t\t\tif ( DEBUG ) $F8922 ( log , size , counter ) } \n\t\tif ( INFO ) $F8817 ( log , n , m ) } \n\t} \n"}, {"code": "$F13735 ( prefix , namespace , attName , attValue , xmlWriter ) "}, {"code": "public void logInfo ( String message ) { \n\tlogger . info ( logPrefix + message ) ; \n\t} \n"}, {"code": "private boolean matchAddress $F3295 ( remoteMask ) { \n\tif ( ruleType == RuleType . ALLWILDCARD ) { \n\t\treturn _BOOL ; \n\t\t} \n\t$F1933 ( prefixMask , _BOOL ) $F164288 ( remoteMask , prefixMask , _BOOL ) for ( $F1139 ( i , prefixMask ) ) { \n\t\tif ( ! wildCard . get ( i ) && ( ruleMask [ i ] & prefixMask [ i ] ) != ( remoteMask [ i ] & prefixMask [ i ] ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static String sign ( String signingString , PrivateKey privateKey ) throws InvalidKeyException , SignatureException { \n\t$F96 bytes = $F43004 ( signingString , StandardCharsets ) ; \n\tSignature sig ; \n\ttry $F25343 ( sig , Signature , SHA256_WITH_RSA ) catch ( NoSuchAlgorithmException e ) $F78550 ( e ) sig . initSign ( privateKey ) ; \n\tsig . update ( bytes ) ; \n\treturn Hex . encodeHexString ( sig . sign ( ) ) ; \n\t} \n"}, {"code": "public Object invoke ( Method method , Object target , ExtensionContext extensionContext , ExtensionRegistry extensionRegistry ) { \n\t$F1431 Optional $F1432 optionalTarget = ( target instanceof Optional ? ( Optional $F1432 ) target : Optional . ofNullable ( target ) ) ; \n\treturn ReflectionUtils . invokeMethod ( method , target , resolveParameters ( method , optionalTarget , extensionContext , extensionRegistry ) ) ; \n\t} \n"}, {"code": "$F91084 "}, {"code": "RegisteredProject putProject ( ProjectConfig config , FolderEntry folder , boolean updated , boolean detected ) throws ServerException , ConflictException , NotFoundException { \n\tfinal RegisteredProject project = new RegisteredProject ( folder , config , updated , detected , this . projectTypeRegistry ) ; \n\tprojects . put ( project . getPath ( ) , project ) ; \n\treturn project ; \n\t} \n"}, {"code": "protected void tearDown $F72 { \n\ttry $F4650 ( ds , sds ) $F3957 } \n"}, {"code": "$F1 public void removeListener ( final IZyNodeRealizerListener $F1011 listener ) { \n\tm_listeners . removeListener ( listener ) ; \n\t} \n"}, {"code": "protected void assertResultRowCount ( int expected , ResultSet rs ) throws SQLException { \n\tint i = NUM00 ; \n\twhile $F1682 ( rs ) { \n\t\ti ++ ; \n\t\t} \n\tassertEquals ( expected , i ) ; \n\t} \n"}, {"code": "private boolean isModelUseful ( ContingencyMatrix cm ) { \n\tfor ( int row = NUM00 ; \n\trow < cm . getNumberOfPredictions ( ) ; \n\trow ++ ) { \n\t\tfor ( int col = NUM00 ; \n\t\tcol < cm . getNumberOfClasses ( ) ; \n\t\tcol ++ ) { \n\t\t\tif ( Math . abs ( cm . getLift ( row , col ) - NUM00 ) > MIN_ADVANTAGE ) { \n\t\t\t\treturn _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void scan ( ClassNode cn ) { \n\tList < ThreatResult > threats = new ArrayList < ThreatResult > $F72 ; \n\tfor ( ClassHandler classHandler : classHandlers ) { \n\t\tThreatResult result = classHandler . scanClass ( cn ) ; \n\t\t$F1140 ( result , threats ) } \n\tfor ( MethodNode mn : cn . methods ) { \n\t\tfor ( MethodHandler methodHandler : methodHandlers ) { \n\t\t\tThreatResult result = methodHandler . scanMethod ( mn ) ; \n\t\t\t$F1140 ( result , threats ) } \n\t\t} \n\tif $F3817 ( threats ) { \n\t\tthreatsByClass . put ( cn . name , threats ) ; \n\t\t} \n\t} \n"}, {"code": "$F35762 ( newScrollValue , itemDimension , initialMotionValue , lastMotionValue , getPullToRefreshScrollDirection , HORIZONTAL , mInitialMotionX , mLastMotionX , VERTICAL , mInitialMotionY , mLastMotionY , mCurrentMode , PULL_FROM_END , Math , FRICTION , getFooterSize , PULL_FROM_START , getHeaderSize , setHeaderScroll , isRefreshing , scale , mFooterLayout , mHeaderLayout , mState , State , setState ) "}, {"code": "public void reset $F72 { \n\tmChannelNumber = NUM00 ; \n\t$F725 ( mActiveCalls ) $F725 ( mESNs ) $F725 ( mNeighborIDs ) $F725 ( mReceiveFrequencies ) $F725 ( mSiteIDs ) $F725 ( mTalkgroups ) $F725 ( mTransmitFrequencies ) $F725 ( mUniqueIDs ) resetState ( ) ; \n\t} \n"}, {"code": "public static String newickNoLengths ( Tree tree ) { \n\t$F280 ( buffer ) newick ( tree , tree . getRoot ( ) , _BOOL , BranchLengthType . NO_BRANCH_LENGTHS , null , null , null , null , buffer ) ; \n\t$F84 ( buffer ) $F92 ( buffer ) } \n"}, {"code": "$F1 public String toString $F72 { \n\treturn ( $F130521 ( String , getType ) + NUM00 + getKey ( ) + NUM00 + getValue ( ) ) ; \n\t} \n"}, {"code": "$F45332 $F2513 $F2512 ( MediaType ) $F21697 ( MediaType ) @ CheckPermission ( roles = { \n\tRole . SECURITY_ADMIN , Role . RESTRICTED_SECURITY_ADMIN } \n, blockProxies = _BOOL ) public String rotateIPsecKey $F72 { \n\tipsecMgr . verifyIPsecOpAllowable ( ) ; \n\tString version = ipsecMgr . rotateKey ( ) ; \n\tauditMgr . recordAuditLog ( null , null , IPSEC_SERVICE_TYPE , OperationTypeEnum . UPDATE_SYSTEM_PROPERTY , System . currentTimeMillis ( ) , AuditLogManager . AUDITLOG_SUCCESS , null , NUM00 + version ) ; \n\treturn version ; \n\t} \n"}, {"code": "public int append ( char chunk [ ] ) throws GuacamoleException { \n\treturn $F39529 ( append , chunk ) ; \n\t} \n"}, {"code": "public $F96 reset $F97 ( data ) { \n\t$F5475 ( bytes ) if ( $F18896 ( data ) < NUM00 ) { \n\t\tbytes = new byte [ data [ NUM00 ] + NUM00 ] ; \n\t\tSystem . arraycopy ( data , NUM00 , bytes , NUM00 , data [ NUM00 ] + NUM00 ) ; \n\t\t} \n\telse { \n\t\tif ( $F18896 ( data ) > NUM00 ) { \n\t\t\tint len = data [ NUM00 ] & $F19905 ; \n\t\t\tint result = NUM00 ; \n\t\t\tfor ( $F119 ( i , len ) ) { \n\t\t\t\tresult |= $F21296 ( data , i ) < < ( NUM00 * ( len - i - NUM00 ) ) ; \n\t\t\t\t} \n\t\t\tbytes = new byte [ result + len + NUM00 ] ; \n\t\t\tSystem . arraycopy ( data , NUM00 , bytes , NUM00 , result + len + NUM00 ) ; \n\t\t\t} \n\t\t} \n\treturn bytes ; \n\t} \n"}, {"code": "public VectorClock $F72 { \n\tthis ( new ArrayList < ClockEntry > $F989 , System . currentTimeMillis ( ) ) ; \n\t} \n"}, {"code": "public Analyzer add ( String name , NondominatedPopulation result ) { \n\tList < NondominatedPopulation > list = data . get ( name ) ; \n\tif ( list == null ) { \n\t\tlist = new ArrayList < NondominatedPopulation > $F72 ; \n\t\tdata . put ( name , list ) ; \n\t\t} \n\tlist . add ( result ) ; \n\treturn this ; \n\t} \n"}, {"code": "public static void assertEquals ( String msg , $F1986 expected , $F1986 observed , double tolerance ) { \n\t$F7542 ( out , msg ) if $F11279 ( expected , observed ) { \n\t\t$F84 ( out ) $F84 ( out ) out . append ( expected . length ) ; \n\t\t$F84 ( out ) out . append ( observed . length ) ; \n\t\tAssert . fail ( out . toString ( ) ) ; \n\t\t} \n\tboolean failure = _BOOL ; \n\tfor ( $F1139 ( i , expected ) ) { \n\t\tif ( ! Precision . equalsIncludingNaN ( expected [ i ] , observed [ i ] , tolerance ) ) { \n\t\t\tfailure = _BOOL ; \n\t\t\t$F84 ( out ) out . append ( i ) ; \n\t\t\t$F84 ( out ) $F84 ( out ) $F6939 ( out , expected , i ) $F84 ( out ) $F6939 ( out , observed , i ) } \n\t\t} \n\tif ( failure ) { \n\t\tAssert . fail ( out . toString ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "public void initializeAtomsForFinite ( List < Datum > data , String filename , Random random ) { \n\t$F10254 ( beta , K ) $F10254 ( dof , K ) $F10253 ( omega , K ) if ( filename != null ) { \n\t\ttry { \n\t\t\tloc = BatchMixtureModel . initializeClustersFromFile ( filename , K ) ; \n\t\t\tif $F10255 ( loc , K ) { \n\t\t\t\tloc = BatchMixtureModel . gonzalezInitializeMixtureCenters ( loc , data , K , random ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( FileNotFoundException e ) { \n\t\t\t$F301 ( e ) loc = BatchMixtureModel . gonzalezInitializeMixtureCenters ( data , K , random ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tloc = BatchMixtureModel . gonzalezInitializeMixtureCenters ( data , K , random ) ; \n\t\t} \n\t$F7028 ( log , loc ) for ( int k = NUM00 ; \n\tk < this . K ; \n\tk ++ ) { \n\t\tbeta [ k ] = baseBeta ; \n\t\tdof [ k ] = baseNu ; \n\t\tomega . add ( baseOmega ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void onInit ( List < ? extends IndexCommit > commits ) throws IOException { \n\t$F19233 ( commits ) log . info ( NUM00 , new CommitsLoggingInfo ( commits ) ) ; \n\tlog . debug ( NUM00 , new CommitsLoggingDebug ( commits ) ) ; \n\tupdateCommits ( commits ) ; \n\t} \n"}, {"code": "public boolean isLoading $F72 $F23588 ( state , LOADING ) "}, {"code": "CharSequence convert ( Object value , String key ) ; \n"}, {"code": "$F1 public final void sample $F72 { \n\tsynchronized ( _lock ) { \n\t\t$F106670 ( count , _count ) long lastCount = _lastAvgCount ; \n\t\t_lastAvgCount = count ; \n\t\t$F106670 ( sum , _sum ) double lastSum = _lastAvgSum ; \n\t\t_lastAvgSum = sum ; \n\t\tif ( count == lastCount ) _value = NUM00 ; \n\t\telse _value = _scale * ( sum - lastSum ) / $F250385 ( count , lastCount ) ; \n\t\t} \n\t} \n"}, {"code": "public boolean login $F72 throws LoginException { \n\ttry $F5795 ( loadPasswordFile ) catch ( IOException ioe ) { \n\t\tLoginException le = new LoginException ( NUM00 + passwordFileDisplayName ) ; \n\t\tthrow EnvHelp . initCause ( le , ioe ) ; \n\t\t} \n\tif ( userCredentials == null ) { \n\t\tthrow new LoginException $F580 ; \n\t\t} \n\tif ( logger . debugOn ( ) ) { \n\t\tlogger . debug ( NUM00 , NUM00 + passwordFileDisplayName ) ; \n\t\t} \n\tif ( tryFirstPass ) { \n\t\ttry { \n\t\t\tattemptAuthentication ( _BOOL ) ; \n\t\t\tsucceeded = _BOOL ; \n\t\t\tif ( logger . debugOn ( ) ) { \n\t\t\t\t$F77795 ( logger ) } \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\tcatch ( LoginException le ) { \n\t\t\tcleanState ( ) ; \n\t\t\t$F77795 ( logger ) } \n\t\t} \n\telse if ( useFirstPass ) { \n\t\ttry { \n\t\t\tattemptAuthentication ( _BOOL ) ; \n\t\t\tsucceeded = _BOOL ; \n\t\t\tif ( logger . debugOn ( ) ) { \n\t\t\t\t$F77795 ( logger ) } \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\tcatch ( LoginException le ) { \n\t\t\tcleanState ( ) ; \n\t\t\t$F77795 ( logger ) throw le ; \n\t\t\t} \n\t\t} \n\tif ( logger . debugOn ( ) ) { \n\t\t$F77795 ( logger ) } \n\ttry { \n\t\tattemptAuthentication ( _BOOL ) ; \n\t\tsucceeded = _BOOL ; \n\t\tif ( logger . debugOn ( ) ) { \n\t\t\t$F77795 ( logger ) } \n\t\treturn _BOOL ; \n\t\t} \n\tcatch ( LoginException le ) { \n\t\tcleanState ( ) ; \n\t\t$F77795 ( logger ) throw le ; \n\t\t} \n\t} \n"}, {"code": "public Builder updateExtension ( Extension extension ) $F18637 ( extensions , extension , this ) "}, {"code": "public void processUtterance ( Utterance utterance ) throws ProcessException { \n\tif ( utterance . getRelation ( Relation . SEGMENT ) == null ) $F4639 utterance . setObject ( SampleInfo . UTT_NAME , diphoneDatabase . getSampleInfo ( ) ) ; \n\tcreateUnitRelation ( utterance ) ; \n\t} \n"}, {"code": "public static int copy ( InputStream in , OutputStream out ) throws IOException { \n\t$F18062 ( Assert , in ) $F18062 ( Assert , out ) try { \n\t\treturn StreamUtils . copy ( in , out ) ; \n\t\t} \n\tfinally { \n\t\t$F18072 ( in ) $F18072 ( out ) } \n\t} \n"}, {"code": "private String convertToAttributeName ( String localName ) $F11447 ( localName ) "}, {"code": "public ExpandedStatementBuilder reference ( String property , Object value ) { \n\tcheckCanChange ( ) ; \n\textraInfo . add ( new ReferenceInfo ( property , value ) ) ; \n\treturn this ; \n\t} \n"}, {"code": "@ TargetApi ( Build . VERSION_CODES . HONEYCOMB ) protected void swipeView ( View child , float deltaX , float deltaY ) { \n\tif ( isFixedView ( child ) ) { \n\t\tdeltaX = deltaX / NUM00 ; \n\t\t} \n\tfloat deltaXAbs = Math . abs ( deltaX ) ; \n\tfloat fractionCovered = deltaXAbs / $F52896 ( child ) ; \n\tchild . setTranslationX ( deltaX ) ; \n\tchild . setAlpha ( NUM00 - fractionCovered ) ; \n\tif ( deltaX > NUM00 ) child . setRotationY ( - NUM00 * fractionCovered ) ; \n\telse child . setRotationY ( NUM00 * fractionCovered ) ; \n\t} \n"}, {"code": "private void verifyIsRoot $F72 { \n\tif $F6887 ( hierarchyElements ) { \n\t\tthrow new IllegalStateException ( NUM00 + NUM00 + hierarchy ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public int size $F72 { \n\t$F677 ( lock , this ) $F790 ( lock ) try { \n\t\treturn count ; \n\t\t} \n\t$F796 ( lock ) } \n"}, {"code": "private void verifyWithSeparateSigningKey ( X509Certificate cert , PublicKey prevKey , boolean signFlag , Set < X509Certificate > stackedCerts ) throws CertPathValidatorException { \n\tString msg = NUM00 ; \n\tif ( debug != null ) { \n\t\tdebug . println ( NUM00 + NUM00 + msg + NUM00 ) ; \n\t\t} \n\tif ( ( stackedCerts != null ) && stackedCerts . contains ( cert ) ) { \n\t\tif ( debug != null ) $F44047 ( debug ) throw new CertPathValidatorException ( NUM00 , null , null , - NUM00 , BasicReason . UNDETERMINED_REVOCATION_STATUS ) ; \n\t\t} \n\tif ( ! signFlag ) $F1861 ( buildToNewKey , cert , stackedCerts ) else { \n\t\tbuildToNewKey ( cert , prevKey , stackedCerts ) ; \n\t\t} \n\t} \n"}, {"code": "public boolean isRunning $F72 { \n\treturn this . running ; \n\t} \n"}, {"code": "private boolean mapPatternElemPos ( int nesting , boolean isStart , boolean isAttrName ) { \n\tif ( NUM00 == nesting ) { \n\t\tif ( m_patternMapSize >= m_patternMap . length ) { \n\t\t\tint patternMap [ ] = m_patternMap ; \n\t\t\tint len = m_patternMap . length ; \n\t\t\t$F15464 ( m_patternMap , m_patternMapSize ) $F135 ( System , patternMap , m_patternMap , len ) } \n\t\tif ( ! isStart ) { \n\t\t\tm_patternMap [ m_patternMapSize - NUM00 ] -= TARGETEXTRA ; \n\t\t\t} \n\t\tm_patternMap [ m_patternMapSize ] = ( m_compiler . getTokenQueueSize ( ) - ( isAttrName ? NUM00 : NUM00 ) ) + TARGETEXTRA ; \n\t\tm_patternMapSize ++ ; \n\t\tisStart = _BOOL ; \n\t\t} \n\treturn isStart ; \n\t} \n"}, {"code": "public boolean addOperationAtFirst ( Operation operation ) { \n\tif ( isRunning ) { \n\t\t$F397 ( operationHandlerThreadHandler , _BOOL ) return operationHandlerThreadHandler . postAtFrontOfQueue ( new AndroidOperation ( this , operation ) ) ; \n\t\t} \n\telse { \n\t\treturn operationQueue . add ( new AndroidOperation ( this , operation , AndroidOperation . Type . ATFIRST , null , NUM00 ) ) ; \n\t\t} \n\t} \n"}, {"code": "public void testShiftLeft1 $F72 { \n\t$F17888 int aSign = NUM00 ; \n\tint number = NUM00 ; \n\tbyte $F3018 = { \n\t\tNUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 } \n\t; \n\t$F3023 ( aNumber , aSign , aBytes ) $F17893 ( result , aNumber , number ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) } \n"}, {"code": "public static String toUnitbytes ( long bytes ) { \n\tif ( bytes < NUM00 ) $F1948 ( GENERAL_UNIT_KILOBYTES ) long unitValue ; \n\tString unitName ; \n\tif ( bytes < NUM00 ) { \n\t\tunitValue = NUM00 ; \n\t\tunitName = GENERAL_UNIT_KILOBYTES ; \n\t\t} \n\telse if ( bytes < NUM00 ) { \n\t\tunitValue = NUM00 ; \n\t\tunitName = GENERAL_UNIT_MEGABYTES ; \n\t\t} \n\telse if ( bytes < NUM00 ) { \n\t\tunitValue = NUM00 ; \n\t\tunitName = GENERAL_UNIT_GIGABYTES ; \n\t\t} \n\telse { \n\t\tunitValue = NUM00 ; \n\t\tunitName = GENERAL_UNIT_TERABYTES ; \n\t\t} \n\tNumberFormat numberFormat ; \n\tif ( ( double ) bytes * NUM00 / unitValue < NUM00 ) numberFormat = NUMBER_FORMAT1 ; \n\telse numberFormat = NUMBER_FORMAT0 ; \n\ttry { \n\t\treturn numberFormat . format ( ( double ) bytes / unitValue ) + NUM00 + unitName ; \n\t\t} \n\tcatch ( ArithmeticException ae ) $F1948 ( unitName ) } \n"}, {"code": "$F1 public $F987 listOptions $F72 { \n\t$F20795 ( result ) result . addElement ( new Option ( $F40 , NUM00 , NUM00 , NUM00 ) ) ; \n\t$F9007 ( result ) $F9007 ( result ) $F9007 ( result ) $F1006 ( result ) result . addElement ( new Option ( $F40 , NUM00 , NUM00 , NUM00 ) ) ; \n\t$F9010 ( result , Collections , super ) $F1007 ( result ) } \n"}, {"code": "public static String changePassword ( Connection conn , String userName , String password ) throws Exception { \n\t$F151311 ( prep , conn ) $F3916 ( prep , password ) $F3916 ( prep , userName ) $F3917 ( prep ) return password ; \n\t} \n"}, {"code": "public Object remove ( Object key ) { \n\tprocessQueue ( ) ; \n\treturn map . remove ( Key . create ( key , null ) ) ; \n\t} \n"}, {"code": "protected Rectangle computePopupBounds $F2026 ( px , py , pw , ph ) { \n\t$F170001 ( toolkit , Toolkit ) Rectangle screenBounds ; \n\tGraphicsConfiguration gc = comboBox . getGraphicsConfiguration ( ) ; \n\t$F101628 ( p ) SwingUtilities . convertPointFromScreen ( p , comboBox ) ; \n\tif ( gc != null ) { \n\t\tInsets screenInsets = toolkit . getScreenInsets ( gc ) ; \n\t\tscreenBounds = gc . getBounds ( ) ; \n\t\tscreenBounds . width -= $F151527 ( screenInsets ) ; \n\t\tscreenBounds . height -= $F151531 ( screenInsets ) ; \n\t\tscreenBounds . x += ( p . x + screenInsets . left ) ; \n\t\tscreenBounds . y += ( p . y + screenInsets . top ) ; \n\t\t} \n\telse { \n\t\tscreenBounds = new Rectangle ( p , toolkit . getScreenSize ( ) ) ; \n\t\t} \n\tRectangle rect = new Rectangle ( px , py , pw , ph ) ; \n\tif ( py + ph > $F6118 ( screenBounds ) && ph < screenBounds . height ) { \n\t\trect . y = - rect . height ; \n\t\t} \n\treturn rect ; \n\t} \n"}, {"code": "public static Intent buildBackgroundShortcutIntent ( File script , Parcelable iconResource ) { \n\tIntent $F192736 ( intent ) ; \n\tintent . putExtra ( Intent . EXTRA_SHORTCUT_INTENT , buildStartInBackgroundIntent ( script ) ) ; \n\tintent . putExtra ( Intent . EXTRA_SHORTCUT_NAME , script . getName ( ) ) ; \n\tintent . putExtra ( Intent . EXTRA_SHORTCUT_ICON_RESOURCE , iconResource ) ; \n\treturn intent ; \n\t} \n"}, {"code": "public static boolean isShown ( final Actor actor ) { \n\treturn actor != null && actor . getStage ( ) != null ; \n\t} \n"}, {"code": "public static void addListener ( final DiagnosticListener listener ) $F17651 ( listener , LISTENERS ) "}, {"code": "public void shuffleTrainingSet $F72 { \n\tutils . shuffleList ( TrainingFiles ) ; \n\t} \n"}, {"code": "public NTLMAuthentication ( boolean isProxy , URL url , PasswordAuthentication pw ) { \n\tsuper ( isProxy ? PROXY_AUTHENTICATION : SERVER_AUTHENTICATION , AuthScheme . NTLM , url , NUM00 ) ; \n\tinit ( pw ) ; \n\t} \n"}, {"code": "public MessageChannel createMessageChannel ( SIPRequest request , MessageProcessor mp , Hop nextHop ) throws IOException { \n\tHost targetHost = new Host $F72 ; \n\ttargetHost . setHostname ( nextHop . getHost ( ) ) ; \n\tHostPort targetHostPort = new HostPort $F72 ; \n\ttargetHostPort . setHost ( targetHost ) ; \n\ttargetHostPort . setPort ( nextHop . getPort ( ) ) ; \n\tMessageChannel returnChannel = mp . createMessageChannel ( targetHostPort ) ; \n\treturn returnChannel ; \n\t} \n"}, {"code": "public static $F96 generateMac ( $F96 byteCipherText , SecretKey integrityKey ) throws $F155 { \n\t$F156 ( sha256_HMAC , Mac , HMAC_ALGORITHM ) sha256_HMAC . init ( integrityKey ) ; \n\t$F157 ( sha256_HMAC , byteCipherText ) } \n"}, {"code": "public void populateEditText ( String query ) { \n\t$F9652 ( text , query ) setSearchString ( text , _BOOL ) ; \n\tdispatchStateChange ( SearchViewState . SEARCH ) ; \n\t} \n"}, {"code": "public static $F96 concat $F7233 ( b1 , b2 ) { \n\t$F148496 ( out , b1 , b2 ) $F7057 ( System , b1 , out ) $F11244 ( System , b2 , out , b1 ) return out ; \n\t} \n"}, {"code": "$F73354 ( curViewBound , curViewWidth , right , mClipPadding ) "}, {"code": "public static void putFloat ( String property , float val ) { \n\tSIMBRAIN_PREFERENCES . putFloat ( property , val ) ; \n\t} \n"}, {"code": "public int hashCode $F72 { \n\treturn Arrays . hashCode ( this . uid ) ; \n\t} \n"}, {"code": "private void advanceRunState ( int targetState ) { \n\tfor ( $F589 ) { \n\t\t$F8943 ( c , ctl ) if ( runStateAtLeast ( c , targetState ) || ctl . compareAndSet ( c , ctlOf ( targetState , workerCountOf ( c ) ) ) ) $F597 } \n\t} \n"}, {"code": "public static final $F1986 copy $F10212 ( v ) $F138478 ( Arrays , v ) "}, {"code": "public void addAction ( String action ) { \n\t$F131 args = $F382 ; \n\tSimpleDateFormat sdf = new SimpleDateFormat ( context . getString ( R . string . dateFormat ) ) ; \n\targs [ NUM00 ] = $F52170 ( sdf ) ; \n\tString timestamp = context . getString ( R . string . timestamp , args ) ; \n\thistory . add ( action + timestamp ) ; \n\tnotifyListeners ( new PropertyChangeEvent ( this , ActivityConstants . historyProperty , null , null ) ) ; \n\t} \n"}, {"code": "private FilterOperationCodes $F72 $F845 "}, {"code": "$F1 public String toString $F72 { \n\t$F280 ( text ) if ( m_trainInstances == null ) $F86 ( text ) else { \n\t\t$F84 ( text ) $F48750 ( m_missing_merge , text ) } \n\t$F84 ( text ) $F92 ( text ) } \n"}, {"code": "public CharSequence subSequence ( int start , int end ) $F8587 ( substring , start , end ) "}, {"code": "private CreationTemplate toCreationTemplate ( AttrSet t ) { \n\tAttr nameAttr = t . getAttribute ( TEMPLATE_NAME ) ; \n\tString name = null ; \n\tif ( nameAttr != null ) $F37892 ( name , nameAttr ) Attr namingAttr = t . getAttribute ( TEMPLATE_NAMINGATTRIBUTE ) ; \n\tString namingAttribute = null ; \n\tif ( namingAttr != null ) $F37892 ( namingAttribute , namingAttr ) Attr classAttr = t . getAttribute ( TEMPLATE_JAVACLASS ) ; \n\t$F10127 ( classNames ) if ( classAttr != null ) { \n\t\tclassNames = classAttr . getStringValues ( ) ; \n\t\t} \n\tAttrSet required = decodeAttr ( t . getAttribute ( TEMPLATE_REQUIRED ) , NUM00 ) ; \n\tAttrSet optional = decodeAttr ( t . getAttribute ( TEMPLATE_OPTIONAL ) , NUM00 ) ; \n\tAttrSet validated = decodeAttr ( t . getAttribute ( TEMPLATE_VALIDATED ) , NUM00 ) ; \n\tCreationTemplate template = new CreationTemplate $F72 ; \n\t$F12181 ( classes ) try { \n\t\tif ( classNames != null ) { \n\t\t\tfor ( $F1139 ( i , classNames ) ) { \n\t\t\t\tClass cls = Class . forName ( classNames [ i ] ) ; \n\t\t\t\tclasses . add ( cls ) ; \n\t\t\t\t} \n\t\t\t} \n\t\ttemplate = new CreationTemplate ( name , required , optional , classes ) ; \n\t\t} \n\tcatch ( ClassNotFoundException e ) { \n\t\ttemplate = new CreationTemplate ( name , required , optional ) ; \n\t\t} \n\tif ( validated != null ) { \n\t\ttemplate . setValidation ( validated ) ; \n\t\t} \n\tif ( namingAttribute != null ) { \n\t\ttemplate . setNamingAttribute ( namingAttribute ) ; \n\t\t} \n\treturn template ; \n\t} \n"}, {"code": "$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel ) "}, {"code": "public void placeItem ( ItemStack stack , BlockPos pos , World world , boolean centreItem ) { \n\tdouble offset = ( centreItem ) ? NUM00 : NUM00 ; \n\tEntityItem entityitem = new EntityItem ( world , ( double ) pos . getX ( ) + offset , ( double ) pos . getY ( ) + offset , ( double ) pos . getZ ( ) + offset , stack ) ; \n\tentityitem . motionX = NUM00 ; \n\tentityitem . motionY = NUM00 ; \n\tentityitem . motionZ = NUM00 ; \n\tentityitem . setDefaultPickupDelay ( ) ; \n\tworld . spawnEntityInWorld ( entityitem ) ; \n\t} \n"}, {"code": "$F108235 ( f , first , n , item , last , count , notFull ) "}, {"code": "private < M extends ConfigurationClient , P > ManagedObject $F6574 createNewManagedObject ( ManagedObjectDefinition < M , ? > d , ManagedObjectPath < M , ? > p , PropertyDefinition $F89402 namingPropertyDefinition , String name , Collection $F89781 exceptions ) { \n\tPropertySet childProperties = new PropertySet $F72 ; \n\tfor ( PropertyDefinition $F1011 pd : d . getAllPropertyDefinitions ( ) ) { \n\t\ttry { \n\t\t\tcreateProperty ( childProperties , p , pd ) ; \n\t\t\t} \n\t\tcatch ( PropertyException e ) { \n\t\t\t$F73441 ( exceptions , e ) } \n\t\t} \n\tif ( namingPropertyDefinition != null ) { \n\t\tP value = namingPropertyDefinition . decodeValue ( name ) ; \n\t\tchildProperties . setPropertyValues ( namingPropertyDefinition , Collections . singleton ( value ) ) ; \n\t\t} \n\treturn newInstance ( d , p , childProperties , _BOOL , namingPropertyDefinition ) ; \n\t} \n"}, {"code": "public abstract void initializeConstraints ( Step step , Settings settings ) ; \n"}, {"code": "public void testEmptyCommits $F72 throws Exception { \n\tclearIndexWithReplication ( ) ; \n\tindex ( masterClient , NUM00 , NUM00 , NUM00 , NUM00 ) ; \n\temptyUpdate ( masterClient , NUM00 , NUM00 ) ; \n\tpullFromMasterToSlave ( ) ; \n\trQuery ( NUM00 , NUM00 , slaveClient ) ; \n\tassertVersions ( masterClient , slaveClient ) ; \n\temptyUpdate ( masterClient , NUM00 , NUM00 ) ; \n\tpullFromMasterToSlave ( ) ; \n\tindex ( masterClient , NUM00 , NUM00 , NUM00 , NUM00 ) ; \n\temptyUpdate ( masterClient , NUM00 , NUM00 ) ; \n\tpullFromMasterToSlave ( ) ; \n\trQuery ( NUM00 , NUM00 , slaveClient ) ; \n\tassertVersions ( masterClient , slaveClient ) ; \n\tindex ( masterClient , NUM00 , NUM00 , NUM00 , NUM00 ) ; \n\temptyUpdate ( masterClient , NUM00 , NUM00 , NUM00 , NUM00 ) ; \n\tpullFromMasterToSlave ( ) ; \n\trQuery ( NUM00 , NUM00 , masterClient ) ; \n\trQuery ( NUM00 , NUM00 , slaveClient ) ; \n\tindex ( masterClient , NUM00 , NUM00 , NUM00 , NUM00 ) ; \n\temptyUpdate ( masterClient , NUM00 , NUM00 ) ; \n\tpullFromMasterToSlave ( ) ; \n\tString q = NUM00 ; \n\trQuery ( NUM00 , q , masterClient ) ; \n\trQuery ( NUM00 , q , slaveClient ) ; \n\tassertVersions ( masterClient , slaveClient ) ; \n\t} \n"}, {"code": "private $F96 decrypt ( $F96 d , int start , int end , int key , int skip ) { \n\tif ( end - start - skip < NUM00 ) { \n\t\tskip = NUM00 ; \n\t\t} \n\t$F96 o = new byte [ end - start - skip ] ; \n\tint r = key ; \n\tint ipos ; \n\tint c1 = NUM00 ; \n\tint c2 = NUM00 ; \n\tfor ( ipos = start ; \n\tipos < end ; \n\tipos ++ ) { \n\t\tint c = d [ ipos ] & NUM00 ; \n\t\tint p = ( c ^ ( r > > NUM00 ) ) & NUM00 ; \n\t\tr = ( ( c + r ) * c1 + c2 ) & NUM00 ; \n\t\tif ( ipos - start - skip >= NUM00 ) { \n\t\t\to [ ipos - start - skip ] = ( byte ) p ; \n\t\t\t} \n\t\t} \n\treturn o ; \n\t} \n"}, {"code": "public static void appendInstruction ( OFFlowMod . Builder fmb , OFInstruction inst ) { \n\tList < OFInstruction > newIl = new ArrayList < OFInstruction > $F72 ; \n\tList < OFInstruction > oldIl = fmb . getInstructions ( ) ; \n\tif ( oldIl != null ) { \n\t\tnewIl . addAll ( fmb . getInstructions ( ) ) ; \n\t\t} \n\tfor ( OFInstruction i : newIl ) { \n\t\tif ( i . getType ( ) == inst . getType ( ) ) $F106 ( newIl , i ) } \n\tnewIl . add ( inst ) ; \n\tfmb . setInstructions ( newIl ) ; \n\t} \n"}, {"code": "$F1 public final void insertAll ( DBIDs ids ) { \n\tif ( ids . isEmpty ( ) || $F10471 ( ids ) ) $F932 if ( canBulkLoad ( ) ) { \n\t\tList < RdKNNEntry > $F719 ( leafs , ids ) ; \n\t\tfor ( $F134224 ( iter , ids ) ) { \n\t\t\tleafs . add ( createNewLeafEntry ( DBIDUtil . deref ( iter ) ) ) ; \n\t\t\t} \n\t\tbulkLoad ( leafs ) ; \n\t\t} \n\telse { \n\t\tfor ( $F134224 ( iter , ids ) ) { \n\t\t\tinsert ( iter ) ; \n\t\t\t} \n\t\t} \n\tdoExtraIntegrityChecks ( ) ; \n\t} \n"}, {"code": "public void testCase14 $F72 { \n\t$F15143 BigInteger aNumber = BigInteger . ONE ; \n\tBigInteger bNumber = BigInteger . ONE ; \n\t$F88893 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) } \n"}, {"code": "public abstract int compare ( String source , String target ) ; \n"}, {"code": "public static $F96 asUnsignedByteArray ( BigInteger value ) { \n\t$F1208 ( bytes , value ) if $F41780 ( bytes ) $F41781 ( tmp , bytes , System ) return bytes ; \n\t} \n"}, {"code": "public static boolean isSupplemental ( int c ) { \n\treturn $F56314 ( c ) ; \n\t} \n"}, {"code": "private final String _decodeShortUnicodeName ( int len ) throws IOException { \n\tint outPtr = NUM00 ; \n\t$F1469 outBuf = _textBuffer . emptyAndGetCurrentSegment ( ) ; \n\tint inPtr = _inputPtr ; \n\t_inputPtr += len ; \n\tfinal $F2027 codes = SmileConstants . sUtf8UnitLengths ; \n\t$F71887 ( inBuf , _inputBuffer ) for ( int end = inPtr + len ; \n\tinPtr < end ; \n\t) { \n\t\t$F1473 ( i , inBuf , inPtr ) int code = codes [ i ] ; \n\t\tif ( code != NUM00 ) { \n\t\t\tswitch ( code ) { \n\t\t\t\t$F3366 i = $F74254 ( i ) | $F44579 ( inBuf , inPtr ) ; \n\t\t\t\t$F597 $F3366 i = $F74254 ( i ) | $F196796 ( inBuf , inPtr ) | $F44579 ( inBuf , inPtr ) ; \n\t\t\t\t$F597 $F3366 i = $F74254 ( i ) | $F196796 ( inBuf , inPtr ) | $F196796 ( inBuf , inPtr ) | $F44579 ( inBuf , inPtr ) ; \n\t\t\t\ti -= NUM00 ; \n\t\t\t\toutBuf [ outPtr ++ ] = ( char ) ( NUM00 | ( i > > NUM00 ) ) ; \n\t\t\t\ti = NUM00 | ( i & NUM00 ) ; \n\t\t\t\t$F597 $F1267 $F52251 ( _reportError , Integer , i ) } \n\t\t\t} \n\t\t$F1479 ( outBuf , outPtr , i ) } \n\treturn _textBuffer . setCurrentAndReturn ( outPtr ) ; \n\t} \n"}, {"code": "public void saveDeviceProfile ( $F2304 String user , $F2304 String realm , $F2304 PushDeviceSettings deviceSettings ) throws AuthLoginException { \n\tReject . ifNull ( user , realm , deviceSettings ) ; \n\ttry { \n\t\tdevicesDao . saveDeviceProfiles ( user , realm , jsonUtils . toJsonValues ( Collections . singletonList ( deviceSettings ) ) ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\tdebug . error ( NUM00 , user , realm , e ) ; \n\t\tthrow new AuthLoginException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public RankingImageListProvider inDays ( int days ) { \n\tmTime = Integer . toString ( days ) + NUM00 ; \n\treturn this ; \n\t} \n"}, {"code": "public void removeUpdateListener ( AnimatorUpdateListener listener ) $F49005 ( mUpdateListeners , listener ) "}, {"code": "public final void dbUnavailable ( final boolean alarmUp , final String exceptionMsg , final String dbInfo ) { \n\tif ( alarmUp == FallbackAlarmsInterface . ACTIVATED ) { \n\t\t$F12181 ( recipients ) MailDetailsBean mailDetails = new MailDetailsBean $F72 ; \n\t\tmailDetails . setSender ( NUM00 ) ; \n\t\t$F18793 ( recipients ) mailDetails . setToRecipients ( recipients ) ; \n\t\tmailDetails . setSubject ( NUM00 ) ; \n\t\tmailDetails . setMessage ( NUM00 + dbInfo + NUM00 + exceptionMsg ) ; \n\t\tmailDetails . setServer ( NUM00 ) ; \n\t\tSMTPMailSender mailSender = new SMTPMailSender $F72 ; \n\t\ttry { \n\t\t\tmailSender . sendMail ( mailDetails ) ; \n\t\t\t} \n\t\tcatch ( MailSenderException e ) { \n\t\t\tLOG . debug ( e . getMessage ( ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static String tidyString ( String string ) { \n\tif $F11809 ( string ) { \n\t\treturn string ; \n\t\t} \n\telse $F8480 ( string ) } \n"}, {"code": "public Select $F4203 sortDesc ( String ... columns ) { \n\tfor ( String column : columns ) { \n\t\t$F31982 ( mSortingOrderList , column ) } \n\treturn this ; \n\t} \n"}, {"code": "public String toString $F72 { \n\t$F83 ( result ) $F84 ( result ) $F167270 ( result , klazz ) $F84 ( result ) for ( $F9808 ( i , elements ) ) { \n\t\t$F63265 ( i , result ) $F6939 ( result , elements , i ) } \n\t$F84 ( result ) $F92 ( result ) } \n"}, {"code": "public void testUlpNeg $F72 { \n\tString a = NUM00 ; \n\tint aScale = NUM00 ; \n\t$F1918 ( aNumber , a , aScale ) BigDecimal result = aNumber . ulp ( ) ; \n\tString res = NUM00 ; \n\tint resScale = NUM00 ; \n\t$F1925 ( assertEquals , res , result ) $F1928 ( assertEquals , resScale , result ) } \n"}, {"code": "public LogRecord ( Level level , String msg ) { \n\tlevel . getClass ( ) ; \n\tthis . level = level ; \n\tmessage = msg ; \n\t$F201038 ( sequenceNumber , globalSequenceNumber ) threadID = defaultThreadID ( ) ; \n\t$F3224 ( millis , System ) needToInferCaller = _BOOL ; \n\t} \n"}, {"code": "public Matrix correlation $F72 { \n\tfinal Matrix corr = covariance ( ) ; \n\tfinal Array v = corr . diagonal ( ) ; \n\tfor ( $F119 ( i , dimension_ ) ) { \n\t\tfor ( $F119 ( j , dimension_ ) ) { \n\t\t\tif ( i == j ) { \n\t\t\t\tif ( v . $ [ v . _ ( i ) ] == NUM00 ) { \n\t\t\t\t\tcorr . $ [ corr . _ ( i , j ) ] = NUM00 ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tcorr . $ [ corr . _ ( i , j ) ] *= NUM00 / Math . sqrt ( v . $ [ v . _ ( i ) ] * v . $ [ v . _ ( j ) ] ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tif ( v . $ [ v . _ ( i ) ] == NUM00 && v . $ [ v . _ ( j ) ] == NUM00 ) { \n\t\t\t\t\tcorr . $ [ corr . _ ( i , j ) ] = NUM00 ; \n\t\t\t\t\t} \n\t\t\t\telse if ( v . $ [ v . _ ( i ) ] == NUM00 || v . $ [ v . _ ( j ) ] == NUM00 ) { \n\t\t\t\t\tcorr . $ [ corr . _ ( i , j ) ] = NUM00 ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tcorr . $ [ corr . _ ( i , j ) ] *= NUM00 / Math . sqrt ( v . $ [ v . _ ( i ) ] * v . $ [ v . _ ( j ) ] ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn corr ; \n\t} \n"}, {"code": "$F1113 public static SaveDirectory from ( File file ) throws FileNotFoundException { \n\tFile currentFile = file ; \n\tSaveDirectory result = null ; \n\tif ( currentFile == null ) $F845 else { \n\t\tresult = createValidSaveDirectory ( currentFile ) ; \n\t\t$F122621 ( currentFile ) if ( result != null ) { \n\t\t\treturn result ; \n\t\t\t} \n\t\telse if ( currentFile == null ) $F845 else { \n\t\t\tresult = createValidSaveDirectory ( currentFile ) ; \n\t\t\t$F122621 ( currentFile ) if ( result != null ) { \n\t\t\t\treturn result ; \n\t\t\t\t} \n\t\t\telse $F845 } \n\t\t} \n\t$F352240 ( file ) } \n"}, {"code": "public Serializer serializer $F72 { \n\treturn serializer ; \n\t} \n"}, {"code": "private void addIncludedResources ( JsonApiDocument jsonApiDocument , PersistentResource rec , $F3803 requestedRelationPaths ) $F115274 ( requestedRelationPaths ) "}, {"code": "protected VideoDTO extractOneVideoFromCursor ( Cursor cursor ) { \n\tif ( videoIdCol == - NUM00 ) { \n\t\tvideoIdCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . _ID ) ; \n\t\tvideoTitleCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . TITLE ) ; \n\t\tvideoDisplayNameCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . DISPLAY_NAME ) ; \n\t\tvideoDescriptionCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . DESCRIPTION ) ; \n\t\tvideoBucketIdCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . BUCKET_ID ) ; \n\t\tvideoBucketDisplayNameCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . BUCKET_DISPLAY_NAME ) ; \n\t\tvideoDataCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . DATA ) ; \n\t\tvideoMimeCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . MIME_TYPE ) ; \n\t\tvideoResolutionCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . RESOLUTION ) ; \n\t\tvideoSizeCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . SIZE ) ; \n\t\tvideoDateAddedCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . DATE_ADDED ) ; \n\t\tvideoDateTakenCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . DATE_TAKEN ) ; \n\t\tvideoDateModifyCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . DATE_MODIFIED ) ; \n\t\tvideoLatitudeCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . LATITUDE ) ; \n\t\tvideoLongitudeCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . LONGITUDE ) ; \n\t\tvideoAlbumCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . ALBUM ) ; \n\t\tvideoArtistCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . ARTIST ) ; \n\t\t} \n\tVideoDTO video = new VideoDTO $F72 ; \n\tvideo . setId ( cursor . getLong ( videoIdCol ) ) ; \n\tvideo . setTitle ( cursor . getString ( videoTitleCol ) ) ; \n\tvideo . setDisplayName ( cursor . getString ( videoDisplayNameCol ) ) ; \n\tvideo . setDescription ( cursor . getString ( videoDescriptionCol ) ) ; \n\tvideo . setBucketId ( cursor . getString ( videoBucketIdCol ) ) ; \n\tvideo . setBucketDisplayName ( cursor . getString ( videoBucketDisplayNameCol ) ) ; \n\tvideo . setUri ( cursor . getString ( videoDataCol ) ) ; \n\tvideo . setMimeType ( cursor . getString ( videoMimeCol ) ) ; \n\tvideo . setSize ( cursor . getLong ( videoSizeCol ) ) ; \n\tvideo . setAddedDate ( new Date ( cursor . getLong ( videoDateAddedCol ) ) ) ; \n\tvideo . setTakenDate ( new Date ( cursor . getLong ( videoDateTakenCol ) ) ) ; \n\tvideo . setModifyDate ( new Date ( cursor . getLong ( videoDateModifyCol ) ) ) ; \n\tvideo . setLatitude ( cursor . getDouble ( videoLatitudeCol ) ) ; \n\tvideo . setLongitude ( cursor . getDouble ( videoLongitudeCol ) ) ; \n\tvideo . setAlbum ( cursor . getString ( videoAlbumCol ) ) ; \n\tvideo . setArtist ( cursor . getString ( videoArtistCol ) ) ; \n\t$F19101 ( resolution , cursor , videoResolutionCol ) if ( resolution != null ) { \n\t\ttry { \n\t\t\t$F6542 ( res , resolution ) $F167151 ( width , Integer , res ) $F167151 ( height , Integer , res ) video . setWidth ( width ) ; \n\t\t\tvideo . setHeight ( height ) ; \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\tLog . w ( TAG , String . format ( NUM00 , video . getId ( ) , video . getTitle ( ) , video . getDisplayName ( ) ) , e ) ; \n\t\t\t} \n\t\t} \n\treturn video ; \n\t} \n"}, {"code": "private void shiftSegments ( int fromIdx , int offset ) { \n\tfor ( Element element : elements ) { \n\t\tif ( element . end . left > fromIdx ) { \n\t\t\tshiftSegment ( element . start , fromIdx , offset ) ; \n\t\t\tshiftSegment ( element . end , fromIdx , offset ) ; \n\t\t\tif ( element . text != null ) { \n\t\t\t\tfor ( Segment textSegment : element . text ) { \n\t\t\t\t\tshiftSegment ( textSegment , fromIdx , offset ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public RefUpdate . Result modifyFile ( ChangeEdit edit , String file , RawInput content ) throws AuthException , InvalidChangeOperationException , IOException { \n\treturn modify ( TreeOperation . CHANGE_ENTRY , edit , file , null , content ) ; \n\t} \n"}, {"code": "private void startDocument ( final boolean multiObjectMode ) throws SAXException { \n\tif ( depth == NUM00 ) { \n\t\tcontentHandler . startDocument ( ) ; \n\t\t$F19814 ( multiObjectMode , depth ) } \n\t} \n"}, {"code": "$F122160 ( writer ) "}, {"code": "private static ArrayList < GridCollisionJobContextWrapper > slice ( Collection < CollisionJobContext > src , int num ) { \n\tArrayList < GridCollisionJobContextWrapper > $F204 ( slice ) ; \n\tIterator < CollisionJobContext > iter = src . iterator ( ) ; \n\tfor ( int i = NUM00 ; \n\ti < num && iter . hasNext ( ) ; \n\ti ++ ) slice . add ( new GridCollisionJobContextWrapper ( iter . next ( ) , i ) ) ; \n\treturn slice ; \n\t} \n"}, {"code": "protected void calculateFormatter ( float min , float max ) { \n\tfloat reference = NUM00 ; \n\tif ( mData == null || mData . getXValCount ( ) < NUM00 ) { \n\t\treference = Math . max ( $F44398 ( Math , min , max ) ) ; \n\t\t} \n\telse { \n\t\treference = Math . abs ( max - min ) ; \n\t\t} \n\tint digits = Utils . getDecimals ( reference ) ; \n\tmDefaultFormatter = new DefaultValueFormatter ( digits ) ; \n\t} \n"}, {"code": "public Request add ( Request request ) { \n\trequest . setRequestQueue ( this ) ; \n\t$F9231 ( mCurrentRequests , request ) request . setSequence ( getSequenceNumber ( ) ) ; \n\trequest . addMarker ( NUM00 ) ; \n\tif ( ! request . shouldCache ( ) ) { \n\t\tmNetworkQueue . add ( request ) ; \n\t\treturn request ; \n\t\t} \n\tsynchronized ( mWaitingRequests ) { \n\t\tString cacheKey = request . getCacheKey ( ) ; \n\t\tif $F1710 ( mWaitingRequests , cacheKey ) { \n\t\t\tQueue < Request > stagedRequests = mWaitingRequests . get ( cacheKey ) ; \n\t\t\tif ( stagedRequests == null ) { \n\t\t\t\tstagedRequests = new LinkedList < Request > $F72 ; \n\t\t\t\t} \n\t\t\tstagedRequests . add ( request ) ; \n\t\t\tmWaitingRequests . put ( cacheKey , stagedRequests ) ; \n\t\t\tif ( VolleyLog . DEBUG ) { \n\t\t\t\tVolleyLog . v ( NUM00 , cacheKey ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\t$F16843 ( mWaitingRequests , cacheKey ) mCacheQueue . add ( request ) ; \n\t\t\t} \n\t\treturn request ; \n\t\t} \n\t} \n"}, {"code": "public String lookup ( String data ) { \n\t$F13710 it = map . getPrefixedBy ( data ) ; \n\tif $F87568 ( it ) $F1274 $F43104 ( it ) } \n"}, {"code": "public static Object loadModule ( String homedir , ScriptEngine engine , String name ) throws FileNotFoundException , ScriptException { \n\tHashMap $F51855 mp = ( HashMap $F51855 ) engine . get ( NUM00 ) ; \n\tObject ret = load ( mp . get ( name ) , engine ) ; \n\treturn ret ; \n\t} \n"}, {"code": "$F1 public void modifyVariableId ( String nodeId , String newId ) { \n\tMap < Assignment , UtilityEstimate > utilities2 = new HashMap < Assignment , UtilityEstimate > $F72 ; \n\tfor ( Assignment a : table . keySet ( ) ) { \n\t\tAssignment b = new Assignment $F72 ; \n\t\tfor ( String var : a . getVariables ( ) ) { \n\t\t\tString newVar = $F1238 ( var , nodeId ) ? newId : var ; \n\t\t\tb . addPair ( newVar , a . getValue ( var ) ) ; \n\t\t\t} \n\t\tutilities2 . put ( b , table . get ( a ) ) ; \n\t\t} \n\ttable = utilities2 ; \n\t} \n"}, {"code": "public static $F2469 truncateI $F118948 ( v , len ) { \n\tfinal int zap = ( v . length * Long . SIZE ) - len ; \n\tfinal int zapWords = ( zap > > > LONG_LOG2_SIZE ) ; \n\tfinal int zapbits = zap & LONG_LOG2_MASK ; \n\tArrays . fill ( v , v . length - zapWords , v . length , NUM00 ) ; \n\tif ( zapbits > NUM00 ) { \n\t\t$F362187 ( v , zapWords ) &= ( LONG_ALL_BITS > > > zapbits ) ; \n\t\t} \n\treturn v ; \n\t} \n"}, {"code": "public void test_noResourcesDoesNotWait_predeclareLocks_synchronousQueue $F72 throws Exception { \n\t$F859 ( properties ) final int ntasks = NUM00 ; \n\tfinal int corePoolSize = NUM00 ; \n\tfinal int maxPoolSize = ntasks ; \n\tproperties . setProperty ( TestOptions . SYNCHRONOUS_QUEUE , NUM00 ) ; \n\t$F130259 ( properties , TestOptions , corePoolSize ) properties . setProperty ( TestOptions . MAX_POOL_SIZE , NUM00 + maxPoolSize ) ; \n\t$F130261 ( properties , TestOptions , ntasks ) $F130263 ( properties , TestOptions ) $F130265 ( properties , TestOptions ) $F130267 ( properties , TestOptions ) $F130271 ( properties , TestOptions ) $F130273 ( properties , TestOptions ) final Result result = doComparisonTest ( properties ) ; \n\t$F130280 ( assertEquals , ntasks , Integer , result ) final int maxrunning = Integer . parseInt ( result . get ( NUM00 ) ) ; \n\tassertTrue ( NUM00 + maxrunning , corePoolSize <= maxrunning ) ; \n\t} \n"}, {"code": "private void positionAtCentralDirectory $F72 throws IOException { \n\tboolean found = _BOOL ; \n\tlong off = archive . length ( ) - MIN_EOCD_SIZE ; \n\tif ( off >= NUM00 ) { \n\t\tarchive . seek ( off ) ; \n\t\t$F96 sig = JBZipOutputStream . EOCD_SIG ; \n\t\t$F7468 ( curr , archive ) while ( curr != - NUM00 ) { \n\t\t\tif ( curr == sig [ POS_0 ] ) { \n\t\t\t\t$F10201 ( curr , archive ) if ( curr == sig [ POS_1 ] ) { \n\t\t\t\t\t$F10201 ( curr , archive ) if ( curr == sig [ POS_2 ] ) { \n\t\t\t\t\t\t$F10201 ( curr , archive ) if ( curr == sig [ POS_3 ] ) $F3468 ( found , _BOOL ) } \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tarchive . seek ( -- off ) ; \n\t\t\t$F10201 ( curr , archive ) } \n\t\t} \n\tif ( ! found ) $F124916 archive . seek ( off + CFD_LOCATOR_OFFSET ) ; \n\t$F2175 ( cfdOffset , WORD ) archive . readFully ( cfdOffset ) ; \n\tcurrentcfdfoffset = ZipLong . getValue ( cfdOffset ) ; \n\tarchive . seek ( currentcfdfoffset ) ; \n\t} \n"}, {"code": "public List query ( double x1 , double x2 ) { \n\treturn super . query ( new Interval ( Math . min ( x1 , x2 ) , Math . max ( x1 , x2 ) ) ) ; \n\t} \n"}, {"code": "public static boolean isNull ( Object object ) { \n\treturn object != null && object == NULL_CACHE . get ( object . getClass ( ) ) ; \n\t} \n"}, {"code": "public static void createDestinationFolder ( String path ) { \n\t$F1705 ( fpath , path ) $F1907 ( fpath ) } \n"}, {"code": "public void removeAll $F72 { \n\tlog . debug ( $F10532 ( connectionToAdded ) ) ; \n\t$F725 ( connectionToAdded ) } \n"}, {"code": "public float readFloat $F72 throws IOException { \n\treturn primitiveTypes . readFloat ( ) ; \n\t} \n"}, {"code": "public synchronized static int insertLuaState ( LuaState L ) { \n\tint i ; \n\tfor ( $F12002 ( i , states ) ) { \n\t\tLuaState state = ( LuaState ) states . get ( i ) ; \n\t\tif ( state != null ) { \n\t\t\tif ( state . getCPtrPeer ( ) == L . getCPtrPeer ( ) ) return i ; \n\t\t\t} \n\t\t} \n\ti = getNextStateIndex ( ) ; \n\tstates . set ( i , L ) ; \n\treturn i ; \n\t} \n"}, {"code": "public PhoneNumberValidator $F134304 ( errorMessage ) { \n\tsuper ( errorMessage , REGEX ) ; \n\t} \n"}, {"code": "$F16587 ( fullyQualifiedName ) "}, {"code": "$F45746 ( destbytes , srcString , destOffset , srcOffset , count , i ) "}, {"code": "public Point2D convertWindowToReference ( Point2D apt ) { \n\tif ( scrollBackReferenceRect == null ) $F1274 else return new $F5047 ( $F205392 ( apt , scrollBackReferenceRect ) / scrollBackReferenceRect . getWidth ( ) , $F205394 ( apt , scrollBackReferenceRect ) / scrollBackReferenceRect . getHeight ( ) ) ; \n\t} \n"}, {"code": "public void clear $F72 { \n\t$F677 ( lock , this ) $F790 ( lock ) try { \n\t\tfor ( TenantQueue q : qs . values ( ) ) $F9096 ( q ) } \n\t$F796 ( lock ) } \n"}, {"code": "public void printUsage ( PrintWriter pw , int width , String cmdLineSyntax ) { \n\t$F12710 ( argPos , cmdLineSyntax ) printWrapped ( pw , width , defaultSyntaxPrefix . length ( ) + argPos , defaultSyntaxPrefix + cmdLineSyntax ) ; \n\t} \n"}, {"code": "public boolean hasNameValue ( String name ) { \n\treturn $F241801 ( nameValueMap , name ) ; \n\t} \n"}, {"code": "private void addNewLine $F72 { \n\tif ( addLineDialog == null ) { \n\t\taddLineDialog = new AddParallelLineDialog $F72 ; \n\t\t} \n\taddLineDialog . setChartEngine ( engine ) ; \n\taddLineDialog . showDialog ( ) ; \n\tif $F31483 ( horizontalLineRadiobutton ) $F5795 ( setHorizontalLineSelected ) else if $F31483 ( verticalLineRadiobutton ) $F5795 ( setVerticalLineSelected ) } \n"}, {"code": "public final static $F4203 CompletableFuture < $F5675 > streamToCompletableFuture $F51721 ( stream ) { \n\treturn CompletableFuture . completedFuture ( stream . collect ( CyclopsCollectors . toListX ( ) ) ) ; \n\t} \n"}, {"code": "$F1431 public static boolean isGzipSupported ( final HttpServletRequest request ) { \n\tif ( request != null ) { \n\t\tfinal $F14937 headerNames = request . getHeaderNames ( ) ; \n\t\tif ( headerNames != null ) { \n\t\t\twhile $F1444 ( headerNames ) { \n\t\t\t\tfinal String headerName = headerNames . nextElement ( ) ; \n\t\t\t\t$F66059 ( m , PATTERN_ACCEPT_ENCODING , headerName ) if $F281 ( m ) { \n\t\t\t\t\tfinal String headerValue = request . getHeader ( headerName ) ; \n\t\t\t\t\t$F66059 ( mValue , PATTERN_GZIP , headerValue ) $F89398 ( mValue ) } \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "private boolean isLanguageAllowed ( String languageKey ) { \n\t$F397 ( allowedLanguages , _BOOL ) $F297 ( allowedLanguages , languageKey ) } \n"}, {"code": "public List < Boundary > populateWard ( final Long zoneId ) { \n\tList < Boundary > wardList = new LinkedList < Boundary > $F72 ; \n\ttry { \n\t\twardList = boundaryService . getChildBoundariesByBoundaryId ( zoneId ) ; \n\t\t} \n\tcatch ( final Exception e ) { \n\t\t$F45904 ( LOGGER , e ) throw new ApplicationRuntimeException ( NUM00 , e ) ; \n\t\t} \n\treturn wardList ; \n\t} \n"}, {"code": "$F71992 ( className , cl , doFallback , providerClass , findProviderClass , instance , debugPrintln , x ) "}, {"code": "public void handleRequest ( List arguments ) { \n\ttry { \n\t\tInstallLogger migrateLog = new InstallLogger ( STR_MIGRATE ) ; \n\t\tMultipleMigrateDriver driver = new MultipleMigrateDriver $F72 ; \n\t\tif $F2979 ( arguments ) { \n\t\t\t$F138169 ( Debug ) driver . migrate ( migrateLog ) ; \n\t\t\t} \n\t\telse if $F10471 ( arguments ) { \n\t\t\t$F138169 ( Debug ) driver . migrate ( migrateLog ) ; \n\t\t\t} \n\t\t} \n\tcatch ( InstallAbortException ia ) { \n\t\t$F16828 ( Debug , ia ) Console . printlnRawText ( ia . getMessage ( ) ) ; \n\t\t} \n\tcatch ( InstallException ex ) { \n\t\t$F16828 ( Debug , ex ) printConsoleMessage ( LOC_HR_ERR_MIGRATE , new Object [ ] { \n\t\t\tex . getMessage ( ) } \n\t\t) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public String toString $F72 { \n\t$F280 ( result ) for ( $F1139 ( i , data ) ) { \n\t\tresult . append ( $F262485 ( i ) + data [ i ] ) ; \n\t\t} \n\t$F92 ( result ) } \n"}, {"code": "public static SynchronizerStatus makeRunningStatus $F72 { \n\treturn new SynchronizerStatus ( Status . RUNNING , $F4094 , null ) ; \n\t} \n"}, {"code": "public static Iterable $F11299 applyCwd ( File cwd , Iterable $F11299 files ) { \n\tif ( files != null ) { \n\t\t$F14391 ( result ) for ( File f : files ) $F18351 ( result , applyCwd , cwd , f ) return result ; \n\t\t} \n\telse $F1337 } \n"}, {"code": "private void close ( boolean force ) { \n\tif $F48405 ( closeGuard , _BOOL ) hadoop . close ( force ) ; \n\t} \n"}, {"code": "MutableBigInteger divideKnuth ( MutableBigInteger b , MutableBigInteger quotient , boolean needRemainder ) { \n\tif ( b . intLen == NUM00 ) $F28078 if ( intLen == NUM00 ) { \n\t\tquotient . intLen = quotient . offset = NUM00 ; \n\t\treturn needRemainder ? new MutableBigInteger $F72 : null ; \n\t\t} \n\tint cmp = compare ( b ) ; \n\tif ( cmp < NUM00 ) { \n\t\tquotient . intLen = quotient . offset = NUM00 ; \n\t\treturn needRemainder ? new MutableBigInteger ( this ) : null ; \n\t\t} \n\tif ( cmp == NUM00 ) { \n\t\tquotient . value [ NUM00 ] = quotient . intLen = NUM00 ; \n\t\tquotient . offset = NUM00 ; \n\t\treturn needRemainder ? new MutableBigInteger $F72 : null ; \n\t\t} \n\t$F725 ( quotient ) if ( b . intLen == NUM00 ) { \n\t\tint r = divideOneWord ( b . value [ b . offset ] , quotient ) ; \n\t\tif ( needRemainder ) { \n\t\t\tif ( r == NUM00 ) return new MutableBigInteger $F72 ; \n\t\t\treturn new MutableBigInteger ( r ) ; \n\t\t\t} \n\t\telse $F1337 } \n\tif ( intLen >= KNUTH_POW2_THRESH_LEN ) { \n\t\tint trailingZeroBits = $F203679 ( Math , getLowestSetBit , b ) ; \n\t\tif ( trailingZeroBits >= KNUTH_POW2_THRESH_ZEROS * NUM00 ) { \n\t\t\tMutableBigInteger a = new MutableBigInteger ( this ) ; \n\t\t\tb = new MutableBigInteger ( b ) ; \n\t\t\ta . rightShift ( trailingZeroBits ) ; \n\t\t\tb . rightShift ( trailingZeroBits ) ; \n\t\t\tMutableBigInteger r = a . divideKnuth ( b , quotient ) ; \n\t\t\tr . leftShift ( trailingZeroBits ) ; \n\t\t\treturn r ; \n\t\t\t} \n\t\t} \n\treturn divideMagnitude ( b , quotient , needRemainder ) ; \n\t} \n"}, {"code": "public static $F13096 makeRandomCacheEntry ( $F96 data , boolean isExpired , boolean needsRefresh ) { \n\t$F6822 ( random ) $F13096 entry = new $F13096 $F72 ; \n\tif ( data != null ) $F6988 ( entry , data ) else { \n\t\tentry . data = $F13106 ( random ) ; \n\t\t} \n\tentry . etag = $F13111 ( String , random ) ; \n\tentry . lastModified = random . nextLong ( ) ; \n\tentry . ttl = isExpired ? NUM00 : Long . MAX_VALUE ; \n\tentry . softTtl = needsRefresh ? NUM00 : Long . MAX_VALUE ; \n\treturn entry ; \n\t} \n"}, {"code": "$F1431 public void insert ( int id , Comparable $F11685 priority ) { \n\tint i ; \n\ti = ++ _n ; \n\tElementH p = new ElementH $F72 ; \n\twhile ( i > NUM00 ) { \n\t\tint pIdx = i / NUM00 ; \n\t\tElementH eIdx = ( ElementH ) _elements [ pIdx ] ; \n\t\tp . id = eIdx . id ; \n\t\tp . priority = eIdx . priority ; \n\t\tif ( priority . compareTo ( ( E ) p . priority ) > NUM00 ) $F5153 ElementH ei = ( ElementH ) _elements [ i ] ; \n\t\tei . id = p . id ; \n\t\tei . priority = p . priority ; \n\t\t_pos [ p . id ] = i ; \n\t\ti = pIdx ; \n\t\t} \n\tElementH ei = ( ElementH ) _elements [ i ] ; \n\tei . id = id ; \n\tei . priority = priority ; \n\t_pos [ id ] = i ; \n\t} \n"}, {"code": "ExternalProblem ( Socket socket ) throws IOException { \n\tthis ( socket . getInputStream ( ) , socket . getOutputStream ( ) ) ; \n\t} \n"}, {"code": "private static void stopGC $F72 { \n\tgcShouldLoop = _BOOL ; \n\t$F8073 ( LOCK ) } \n"}, {"code": "public final void insertElementAt ( int value , int at ) { \n\t$F11084 ( m_firstFree , m_mapSize , m_blocksize , System , m_map , newMap ) $F45575 ( at , m_firstFree , System , m_map ) m_map [ at ] = value ; \n\tm_firstFree ++ ; \n\t} \n"}, {"code": "public static $F5466 RequestBody createGzip ( final MediaType mediaType , final String body ) { \n\t$F1538 ( gzipByteArrayOutputStream ) try { \n\t\tOutputStream gzipOutputStream = new GZIPOutputStream ( gzipByteArrayOutputStream ) ; \n\t\t$F60813 ( gzipOutputStream , body ) $F59 ( gzipOutputStream ) } \n\t$F20154 return RequestBody . create ( mediaType , gzipByteArrayOutputStream . toByteArray ( ) ) ; \n\t} \n"}, {"code": "private void processTSBK ( TSBKMessage tsbk ) { \n\tbroadcast ( new DecoderStateEvent ( this , Event . CONTINUATION , State . CONTROL ) ) ; \n\tif ( tsbk . getVendor ( ) == Vendor . STANDARD ) { \n\t\tswitch ( tsbk . getOpcode ( ) ) { \n\t\t\tcase ADJACENT_STATUS_BROADCAST : if ( tsbk instanceof AdjacentStatusBroadcast ) { \n\t\t\t\tIAdjacentSite ias = ( IAdjacentSite ) tsbk ; \n\t\t\t\tmNeighborMap . put ( ias . getUniqueID ( ) , ias ) ; \n\t\t\t\tupdateSystem ( ias . getSystemID ( ) ) ; \n\t\t\t\t} \n\t\t\t$F597 $F20998 ( ACKNOWLEDGE_RESPONSE , processTSBKResponse , tsbk ) $F20998 ( AUTHENTICATION_COMMAND , processTSBKCommand , tsbk ) $F20998 ( CALL_ALERT , processTSBKPage , tsbk ) $F20998 ( DENY_RESPONSE , processTSBKResponse , tsbk ) $F20998 ( EXTENDED_FUNCTION_COMMAND , processTSBKCommand , tsbk ) $F20998 ( GROUP_AFFILIATION_QUERY , processTSBKQuery , tsbk ) $F20998 ( GROUP_AFFILIATION_RESPONSE , processTSBKResponse , tsbk ) case GROUP_DATA_CHANNEL_ANNOUNCEMENT : case GROUP_DATA_CHANNEL_ANNOUNCEMENT_EXPLICIT : processTSBKDataChannelAnnouncement ( tsbk ) ; \n\t\t\t$F597 case GROUP_DATA_CHANNEL_GRANT : case GROUP_VOICE_CHANNEL_GRANT : case GROUP_VOICE_CHANNEL_GRANT_UPDATE : case GROUP_VOICE_CHANNEL_GRANT_UPDATE_EXPLICIT : case INDIVIDUAL_DATA_CHANNEL_GRANT : case TELEPHONE_INTERCONNECT_VOICE_CHANNEL_GRANT : case TELEPHONE_INTERCONNECT_VOICE_CHANNEL_GRANT_UPDATE : case UNIT_TO_UNIT_VOICE_CHANNEL_GRANT : case UNIT_TO_UNIT_VOICE_CHANNEL_GRANT_UPDATE : processTSBKChannelGrant ( tsbk ) ; \n\t\t\t$F597 case IDENTIFIER_UPDATE_NON_VUHF : case IDENTIFIER_UPDATE_VHF_UHF_BANDS : IdentifierUpdate iu = ( IdentifierUpdate ) tsbk ; \n\t\t\tif ( ! mBands . containsKey ( iu . getIdentifier ( ) ) ) { \n\t\t\t\tmBands . put ( iu . getIdentifier ( ) , iu ) ; \n\t\t\t\t} \n\t\t\t$F597 case LOCATION_REGISTRATION_RESPONSE : case UNIT_DEREGISTRATION_ACKNOWLEDGE : processTSBKResponse ( tsbk ) ; \n\t\t\t$F597 $F20998 ( MESSAGE_UPDATE , processTSBKMessage , tsbk ) case NETWORK_STATUS_BROADCAST : mNetworkStatus = ( module . decode . p25 . message . tsbk . osp . control . NetworkStatusBroadcast ) tsbk ; \n\t\t\t$F597 $F20998 ( PROTECTION_PARAMETER_UPDATE , processTSBKResponse , tsbk ) $F20998 ( QUEUED_RESPONSE , processTSBKResponse , tsbk ) $F20998 ( RADIO_UNIT_MONITOR_COMMAND , processTSBKCommand , tsbk ) case RFSS_STATUS_BROADCAST : processTSBKRFSSStatus ( ( RFSSStatusBroadcast ) tsbk ) ; \n\t\t\t$F597 $F20998 ( ROAMING_ADDRESS_COMMAND , processTSBKCommand , tsbk ) case SECONDARY_CONTROL_CHANNEL_BROADCAST : module . decode . p25 . message . tsbk . osp . control . SecondaryControlChannelBroadcast sccb = ( module . decode . p25 . message . tsbk . osp . control . SecondaryControlChannelBroadcast ) tsbk ; \n\t\t\tif ( sccb . getDownlinkFrequency1 ( ) > NUM00 ) $F207 ( mSecondaryControlChannels , sccb ) $F597 case SNDCP_DATA_CHANNEL_ANNOUNCEMENT_EXPLICIT : mSNDCPDataChannel = ( SNDCPDataChannelAnnouncementExplicit ) tsbk ; \n\t\t\t$F597 $F20998 ( SNDCP_DATA_CHANNEL_GRANT , processTSBKChannelGrant , tsbk ) $F20998 ( STATUS_QUERY , processTSBKQuery , tsbk ) $F20998 ( STATUS_UPDATE , processTSBKResponse , tsbk ) case TELEPHONE_INTERCONNECT_ANSWER_REQUEST : case UNIT_TO_UNIT_ANSWER_REQUEST : processTSBKPage ( tsbk ) ; \n\t\t\t$F597 $F20998 ( UNIT_REGISTRATION_COMMAND , processTSBKCommand , tsbk ) $F20998 ( UNIT_REGISTRATION_RESPONSE , processTSBKResponse , tsbk ) $F2448 } \n\t\t} \n\telse if ( tsbk . getVendor ( ) == Vendor . MOTOROLA ) { \n\t\tprocessMotorolaTSBK ( ( MotorolaTSBKMessage ) tsbk ) ; \n\t\t} \n\t} \n"}, {"code": "public XintroActivityBuilder removeFragment ( int fragmentPos ) $F120129 ( introFragmentModelList , fragmentPos , this ) "}, {"code": "$F125330 ( update ) "}, {"code": "public TreeViewerBuilder ( Composite parent , int style ) { \n\tmappings = Collections . emptyMap ( ) ; \n\tcheckable = ( style & SWT . CHECK ) == SWT . CHECK ; \n\tif ( checkable ) { \n\t\tviewer = new CheckboxTreeViewer ( parent , style ) ; \n\t\t} \n\telse { \n\t\tviewer = new TreeViewer ( parent , style ) ; \n\t\t} \n\tColumnViewerToolTipSupport . enableFor ( viewer , ToolTip . NO_RECREATE ) ; \n\t} \n"}, {"code": "$F1 public void write $F24576 ( buffer , offset , count ) throws IOException { \n\tsynchronized ( intThread ) { \n\t\tint avail = ( wroteIndex - dataEndIndex + data . length ) % data . length ; \n\t\tif ( avail == NUM00 ) avail = data . length ; \n\t\tif ( avail < count ) { \n\t\t\t$F132377 ( avail , count ) } \n\t\tif ( count > data . length - dataEndIndex ) { \n\t\t\tint firstPart = data . length - dataEndIndex ; \n\t\t\tint secondPart = count - firstPart ; \n\t\t\tSystem . arraycopy ( buffer , offset , data , dataEndIndex , firstPart ) ; \n\t\t\tSystem . arraycopy ( buffer , offset + firstPart , data , NUM00 , secondPart ) ; \n\t\t\tdataEndIndex = secondPart ; \n\t\t\t} \n\t\telse $F21534 ( System , buffer , offset , data , dataEndIndex , count ) $F8071 ( intThread ) } \n\t} \n"}, {"code": "public void pause $F72 { \n\t$F8934 ( pauseLock ) try { \n\t\tpaused = _BOOL ; \n\t\t} \n\t$F796 ( pauseLock ) } \n"}, {"code": "public void addToConsolitatedMsg ( final String message ) { \n\tif $F22 ( consolidatedMessage ) $F2365 ( consolidatedMessage ) consolidatedMessage = consolidatedMessage + message ; \n\t} \n"}, {"code": "$F192509 ( is , close , b , len , _BOOL , n , c , System , last ) "}, {"code": "public void sort ( final Comparator $F11632 comparator ) { \n\tsynchronized ( mLock ) $F57005 ( Collections , mList , comparator ) notifyDataSetChanged ( ) ; \n\t} \n"}, {"code": "public String cropKeepFinalCharacter ( String string , char finalChar ) { \n\tString cropped = crop ( string ) ; \n\tif ( ( null == string ) || string . equals ( cropped ) ) { \n\t\treturn string ; \n\t\t} \n\t$F83314 ( cropped ) return cropped + finalChar ; \n\t} \n"}, {"code": "public static boolean isDerivedAdjective ( final String word ) { \n\tif $F4012 ( word ) { \n\t\tif $F128455 ( word ) return _BOOL ; \n\t\tif $F8991 ( word ) return _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "String renameFile ( String inputFilename ) { \n\tfor ( Pattern searchExp : regexMappings . keySet ( ) ) { \n\t\t$F275 ( matcher , searchExp , inputFilename ) if $F281 ( matcher ) { \n\t\t\tString renamed = matcher . replaceFirst ( regexMappings . get ( searchExp ) ) ; \n\t\t\treturn FILE_SEP_CHAR_MATCHER . trimLeadingFrom ( renamed ) ; \n\t\t\t} \n\t\t} \n\tthrow new MoeProblem ( NUM00 + NUM00 , inputFilename ) ; \n\t} \n"}, {"code": "private static int validateAdbServerPort $F20574 ( adbServerPort ) throws IllegalArgumentException { \n\ttry { \n\t\tint port = Integer . decode ( adbServerPort ) ; \n\t\tif ( port <= NUM00 || port >= NUM00 ) $F825 return port ; \n\t\t} \n\tcatch ( NumberFormatException e ) $F825 } \n"}, {"code": "public static String formatElapsed ( Timestamp start ) { \n\t$F1747 ( start ) long startTime = start . getTime ( ) ; \n\t$F657 ( endTime , System ) return formatElapsed ( endTime - startTime ) ; \n\t} \n"}, {"code": "$F1 public void stop $F72 { \n\tfor ( Thread thread : threads ) $F36257 ( thread ) try { \n\t\tfor ( Thread thread : threads ) $F45915 ( thread ) } \n\t$F887 } \n"}, {"code": "private boolean verifyPublishedDualInetAddress ( String nodeId ) { \n\tDualInetAddress dualAddress = null ; \n\tConfiguration config = queryConfiguration ( Constants . NODE_DUALINETADDR_CONFIG , nodeId ) ; \n\tif ( config != null ) { \n\t\tdualAddress = parseInetAddressConfig ( config ) ; \n\t\t} \n\tif ( ( dualAddress != null ) && dualAddress . equals ( inetAddressLookupMap . getDualInetAddress ( ) ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void testRecursiveChains $F72 throws Throwable { \n\tfor ( $F40424 ( m , ExecutionMode ) ) for ( $F2703 ( addDeadEnds , _BOOL ) ) { \n\t\tfinal int val = NUM00 ; \n\t\tfinal int n = expensiveTests ? NUM00 : NUM00 ; \n\t\t$F70225 ( head ) $F70219 tail = head ; \n\t\tfor ( $F119 ( i , n ) ) { \n\t\t\tif ( addDeadEnds ) m . thenApply ( tail , null ) ; \n\t\t\ttail = m . thenApply ( tail , null ) ; \n\t\t\tif ( addDeadEnds ) m . applyToEither ( tail , tail , null ) ; \n\t\t\ttail = m . applyToEither ( tail , tail , null ) ; \n\t\t\tif ( addDeadEnds ) m . thenCombine ( tail , tail , null ) ; \n\t\t\ttail = m . thenCombine ( tail , tail , null ) ; \n\t\t\t} \n\t\thead . complete ( val ) ; \n\t\tassertEquals ( val + NUM00 * n , ( int ) tail . join ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "public boolean responseIsString ( String oid ) $F298 ( stringResponses , oid ) "}, {"code": "$F35790 ( cw , desc , t , index , INTEGER , FLOAT , LONG , DOUBLE , OBJECT , data , dims , BOOLEAN , CHAR , BYTE , SHORT ) "}, {"code": "public void logFine ( String message ) { \n\tlogger . fine ( logPrefix + message ) ; \n\t} \n"}, {"code": "public static $F65632 createInputDialog ( final Window owner , final String title , final String label ) { \n\tfinal TextInputDialog dialog = new TextInputDialog $F72 ; \n\tdialog . setTitle ( title ) ; \n\tdialog . setHeaderText ( null ) ; \n\tdialog . setContentText ( label ) ; \n\tdialog . initOwner ( owner ) ; \n\treturn dialog . showAndWait ( ) ; \n\t} \n"}, {"code": "public static void closeOutputStream ( OutputStream stream , String tag ) $F144343 ( stream , Log , tag , e ) "}, {"code": "private static String encode ( final String text ) throws UnsupportedEncodingException $F31978 ( URLEncoder , text ) "}, {"code": "public static String convertToRGB ( int color ) { \n\t$F21676 ( red , Integer , Color , color ) $F21676 ( green , Integer , Color , color ) $F21676 ( blue , Integer , Color , color ) $F21680 ( red ) $F21680 ( green ) $F21680 ( blue ) return NUM00 + red + green + blue ; \n\t} \n"}, {"code": "private static final void appendEncodedByte ( StringBuffer buffer , byte value , $F96 state ) { \n\tif ( state [ NUM00 ] != NUM00 ) { \n\t\tchar c = ( char ) ( $F42449 ( state ) | ( $F1047 ( value ) & NUM00 ) ) ; \n\t\tbuffer . append ( c ) ; \n\t\tstate [ NUM00 ] = NUM00 ; \n\t\t} \n\telse { \n\t\tstate [ NUM00 ] = NUM00 ; \n\t\tstate [ NUM00 ] = value ; \n\t\t} \n\t} \n"}, {"code": "public SidedPlane ( double pX , double pY , double pZ , Vector v , double D ) { \n\tsuper ( v , D ) ; \n\tsigNum = Math . signum ( evaluate ( pX , pY , pZ ) ) ; \n\t$F47005 ( sigNum ) } \n"}, {"code": "public String buildUnionQuery $F142640 ( subQueries , sortOrder , limit ) { \n\t$F20818 ( query ) int subQueryCount = subQueries . length ; \n\tString unionOperator = mDistinct ? NUM00 : NUM00 ; \n\tfor ( $F119 ( i , subQueryCount ) ) { \n\t\t$F234280 ( i , query , unionOperator ) $F6939 ( query , subQueries , i ) } \n\tappendClause ( query , NUM00 , sortOrder ) ; \n\tappendClause ( query , NUM00 , limit ) ; \n\t$F92 ( query ) } \n"}, {"code": "$F1 public String toString $F72 { \n\t$F280 ( sb ) sb . append ( clientId ) ; \n\t$F84 ( sb ) switch ( status ) { \n\t\tcase CONNECTED : sb . append ( context . getString ( R . string . connectedto ) ) ; \n\t\t$F597 case DISCONNECTED : sb . append ( context . getString ( R . string . disconnected ) ) ; \n\t\t$F597 case NONE : sb . append ( context . getString ( R . string . no_status ) ) ; \n\t\t$F597 case CONNECTING : sb . append ( context . getString ( R . string . connecting ) ) ; \n\t\t$F597 case DISCONNECTING : sb . append ( context . getString ( R . string . disconnecting ) ) ; \n\t\t$F597 case ERROR : sb . append ( context . getString ( R . string . connectionError ) ) ; \n\t\t} \n\t$F84 ( sb ) sb . append ( host ) ; \n\t$F92 ( sb ) } \n"}, {"code": "void registerCallback ( BluetoothCallback callback ) $F9232 ( mCallbacks , callback ) "}, {"code": "private void validateTableMetaDataNoRow $F8306 ( tableNamePattern , types ) throws Exception { \n\ttry ( ResultSet tables = dbmd . getTables ( null , null , tableNamePattern , types ) ) { \n\t\tassertFalse ( String . format ( NUM00 , tableNamePattern , Arrays . toString ( types ) ) , tables . next ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "void checkClassBounds ( DiagnosticPosition pos , Type type ) { \n\tcheckClassBounds ( pos , new HashMap < TypeSymbol , Type > $F72 , type ) ; \n\t} \n"}, {"code": "private static String parseToken ( String pattern , $F2027 indexRef ) { \n\t$F280 ( buf ) int i = indexRef [ NUM00 ] ; \n\t$F115 ( length , pattern ) $F1280 ( c , pattern , i ) if ( $F91222 ( c ) ) { \n\t\tbuf . append ( c ) ; \n\t\twhile ( i + NUM00 < length ) { \n\t\t\t$F17494 ( peek , pattern , i ) if ( peek == c ) $F56682 ( buf , c , i ) else $F5153 } \n\t\t} \n\telse { \n\t\t$F84 ( buf ) boolean inLiteral = _BOOL ; \n\t\tfor ( ; \n\t\ti < length ; \n\t\ti ++ ) { \n\t\t\tc = pattern . charAt ( i ) ; \n\t\t\tif ( c == NUM00 ) { \n\t\t\t\tif ( $F179049 ( i , length , pattern ) ) { \n\t\t\t\t\ti ++ ; \n\t\t\t\t\tbuf . append ( c ) ; \n\t\t\t\t\t} \n\t\t\t\telse $F1091 ( inLiteral ) } \n\t\t\telse if ( ! inLiteral && ( $F91222 ( c ) ) ) { \n\t\t\t\ti -- ; \n\t\t\t\t$F597 } \n\t\t\telse $F288 ( buf , c ) } \n\t\t} \n\tindexRef [ NUM00 ] = i ; \n\t$F92 ( buf ) } \n"}, {"code": "public int alloc ( final RWStore store , final int size , final IAllocationContext context ) { \n\ttry { \n\t\t$F255788 ( size ) if ( size > m_size ) throw new IllegalArgumentException $F6486 ( m_size , size ) ; \n\t\tif ( m_freeBits == NUM00 ) $F322689 ( m_size ) int addr = - NUM00 ; \n\t\tif ( m_size <= m_store . cSmallSlot ) $F4915 ( allocFromIndex , size ) final Iterator < AllocBlock > iter = m_allocBlocks . iterator ( ) ; \n\t\tint count = - NUM00 ; \n\t\twhile ( addr == - NUM00 && iter . hasNext ( ) ) { \n\t\t\tcount ++ ; \n\t\t\tfinal AllocBlock block = iter . next ( ) ; \n\t\t\tcheckBlock ( block ) ; \n\t\t\taddr = block . alloc ( m_size ) ; \n\t\t\t} \n\t\tif ( addr != - NUM00 ) { \n\t\t\taddr += NUM00 ; \n\t\t\tif ( -- m_freeBits == NUM00 ) { \n\t\t\t\tif ( s_islogTrace ) $F1932 ( log ) removeFromFreeList ( ) ; \n\t\t\t\tif $F3817 ( m_freeList ) { \n\t\t\t\t\tif ( s_islogDebug ) { \n\t\t\t\t\t\tfinal FixedAllocator nxt = ( FixedAllocator ) m_freeList . get ( NUM00 ) ; \n\t\t\t\t\t\tlog . debug ( NUM00 + nxt . getSummaryStats ( ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\taddr += ( count * NUM00 * m_bitSize ) ; \n\t\t\tfinal int value = - ( ( m_index < < RWStore . OFFSET_BITS ) + addr ) ; \n\t\t\tif ( m_statsBucket != null ) { \n\t\t\t\tm_statsBucket . allocate ( size ) ; \n\t\t\t\t} \n\t\t\treturn value ; \n\t\t\t} \n\t\telse { \n\t\t\t$F83 ( sb ) $F286 ( sb , m_freeBits ) for ( AllocBlock ab : m_allocBlocks ) { \n\t\t\t\tsb . append ( ab . show ( ) + NUM00 ) ; \n\t\t\t\t} \n\t\t\tlog . error ( sb ) ; \n\t\t\t$F1082 } \n\t\t} \n\tfinally { \n\t\t$F32367 ( s_islogDebug , checkBits ) } \n\t} \n"}, {"code": "public static NativePage createNativePageForURL ( String url , NativePage candidatePage , Tab tab , TabModelSelector tabModelSelector , Activity activity ) { \n\treturn createNativePageForURL ( url , candidatePage , tab , tabModelSelector , activity , tab . isIncognito ( ) ) ; \n\t} \n"}, {"code": "$F1 public void nodeDown ( long eventUID , String nodeID ) { \n\ttry { \n\t\t$F790 ( lock ) untriedConnectors . putAll ( triedConnectors ) ; \n\t\t$F725 ( triedConnectors ) if $F3817 ( untriedConnectors ) { \n\t\t\t$F702 ( condition ) } \n\t\t} \n\t$F796 ( lock ) } \n"}, {"code": "public static synchronized $F6877 allLocalMACs $F72 { \n\t$F3803 $F9187 ( macs ) ; \n\ttry { \n\t\tEnumeration $F149690 itfs = NetworkInterface . getNetworkInterfaces ( ) ; \n\t\tif ( itfs != null ) { \n\t\t\tfor ( NetworkInterface itf : asIterable ( itfs ) ) { \n\t\t\t\t$F96 hwAddr = itf . getHardwareAddress ( ) ; \n\t\t\t\tif $F22195 ( hwAddr ) { \n\t\t\t\t\tString mac = byteArray2HexString ( hwAddr ) ; \n\t\t\t\t\t$F24127 ( macs , mac ) } \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tcatch ( SocketException ignore ) $F12523 ( Collections ) Collections . sort ( macs ) ; \n\treturn macs ; \n\t} \n"}, {"code": "public void removeCartItem ( int index , boolean triggerExternalOps , LocalDispatcher dispatcher ) throws CartItemModifyException { \n\tif ( isReadOnlyCart ( ) ) { \n\t\tthrow new CartItemModifyException $F580 ; \n\t\t} \n\t$F61236 ( index ) if $F58405 ( cartLines , index ) $F665 ShoppingCartItem item = cartLines . remove ( index ) ; \n\titem . setQuantity ( BigDecimal . ZERO , dispatcher , this , triggerExternalOps , _BOOL , _BOOL , _BOOL ) ; \n\t} \n"}, {"code": "private final void accessCheck ( T obj ) { \n\tif $F78643 ( cclass , obj ) throw accessCheckException ( obj ) ; \n\t} \n"}, {"code": "protected void markFirstTime ( Element elem ) { \n\t$F20605 ( elemName , elem ) if $F3057 ( elemName ) { \n\t\tseenHtml = _BOOL ; \n\t\t} \n\telse if $F3057 ( elemName ) { \n\t\tseenHead = _BOOL ; \n\t\t} \n\telse if $F3057 ( elemName ) { \n\t\tif $F9634 ( buf ) { \n\t\t\t$F11577 ( newBuf ) $F603 ( newBuf , buf ) buf = newBuf ; \n\t\t\t} \n\t\tseenBody = _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public static String timeToString ( long period ) { \n\tperiod /= NUM00 ; \n\tfinal long milsecs = period % NUM00 ; \n\tperiod /= NUM00 ; \n\tfinal long secs = period % NUM00 ; \n\tperiod /= NUM00 ; \n\tfinal long mins = period % NUM00 ; \n\tperiod /= NUM00 ; \n\tfinal long hours = period ; \n\treturn String . format ( NUM00 , hours , mins , secs , milsecs ) ; \n\t} \n"}, {"code": "protected static boolean isUserDefinedProperty ( String propName ) { \n\t$F78369 ( standardPropNames , propName ) } \n"}, {"code": "private boolean conditionM0 ( String value , int index ) { \n\tif ( charAt ( value , index + NUM00 ) == NUM00 ) { \n\t\treturn _BOOL ; \n\t\t} \n\treturn contains ( value , index - NUM00 , NUM00 , NUM00 ) && ( ( index + NUM00 ) == $F1092 ( value ) || contains ( value , index + NUM00 , NUM00 , NUM00 ) ) ; \n\t} \n"}, {"code": "$F13735 ( prefix , namespace , attName , attValue , xmlWriter ) "}, {"code": "@ Reference ( authors = NUM00 , title = NUM00 , booktitle = NUM00 , url = NUM00 ) public double computeTau ( long c , long d , double m , long wd , long bd ) { \n\tdouble tie = ( wd * ( wd - NUM00 ) + bd * ( bd - NUM00 ) ) > > > NUM00 ; \n\treturn ( c - d ) / Math . sqrt ( ( m - tie ) * m ) ; \n\t} \n"}, {"code": "private void readObject ( ObjectInputStream in ) throws $F6427 { \n\t$F6428 ( in ) serviceID = new ServiceID ( in ) ; \n\t} \n"}, {"code": "$F43277 ( listener , mListeners ) "}, {"code": "private void generateCreateEvents ( List < IgfsPath > createdPaths , boolean file ) { \n\tif ( evts . isRecordable ( EventType . EVT_IGFS_DIR_CREATED ) ) { \n\t\tfor ( $F2665 ( i , createdPaths ) ) IgfsUtils . sendEvents ( igfsCtx . kernalContext ( ) , createdPaths . get ( i ) , EventType . EVT_IGFS_DIR_CREATED ) ; \n\t\t} \n\tIgfsPath $F7662 ( leafPath , createdPaths ) ; \n\tif ( file ) { \n\t\tIgfsUtils . sendEvents ( igfsCtx . kernalContext ( ) , leafPath , EventType . EVT_IGFS_FILE_CREATED ) ; \n\t\tIgfsUtils . sendEvents ( igfsCtx . kernalContext ( ) , leafPath , EventType . EVT_IGFS_FILE_OPENED_WRITE ) ; \n\t\t} \n\telse IgfsUtils . sendEvents ( igfsCtx . kernalContext ( ) , leafPath , EventType . EVT_IGFS_DIR_CREATED ) ; \n\t} \n"}, {"code": "public OptInTemplateClassResolver ( Set allowedClasses , List trustedTemplates ) { \n\tthis . allowedClasses = allowedClasses != null ? allowedClasses : Collections . EMPTY_SET ; \n\tif ( trustedTemplates != null ) { \n\t\t$F266988 ( trustedTemplateNames ) $F13241 ( trustedTemplatePrefixes ) $F10531 ( it , trustedTemplates ) while $F2921 ( it ) { \n\t\t\t$F2778 ( li , it ) $F120626 ( li ) if $F8991 ( li ) { \n\t\t\t\ttrustedTemplatePrefixes . add ( $F4019 ( li ) ) ; \n\t\t\t\t} \n\t\t\telse $F207 ( trustedTemplateNames , li ) } \n\t\t} \n\telse { \n\t\ttrustedTemplateNames = Collections . EMPTY_SET ; \n\t\ttrustedTemplatePrefixes = Collections . EMPTY_LIST ; \n\t\t} \n\t} \n"}, {"code": "protected void asyncOpRelease $F72 { \n\tif ( asyncOpsSem != null ) $F33833 ( asyncOpsSem ) } \n"}, {"code": "public static boolean validSystemNameConfig ( String systemName , char type ) { \n\t$F27673 ( validSystemNameFormat , systemName , type , _BOOL ) return _BOOL ; \n\t} \n"}, {"code": "public void removeAll $F72 { \n\tif $F14765 ( mRecords ) { \n\t\t$F725 ( mRecords ) mCurrentPosition = - NUM00 ; \n\t\tnotifyObservers ( ) ; \n\t\t} \n\t} \n"}, {"code": "public synchronized boolean startReindexer ( String name , boolean force ) throws ReindexerAlreadyRunningException { \n\tOnlineReindexer < ? , ? , ? > reindexer = reindexers . get ( name ) ; \n\tvalidateReindexerNotRunning ( reindexer ) ; \n\tif ( force || ! isCurrentIndexVersionLatest ( name , reindexer ) ) { \n\t\t$F2346 ( reindexer ) return _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "$F1 public void printStackTrace $F72 { \n\t$F301 ( super ) if ( nested != null ) $F301 ( nested ) } \n"}, {"code": "private static void updateLastModified ( File destDir , String warFilePath ) { \n\t$F1705 ( warFile , warFilePath ) destDir . setLastModified ( warFile . lastModified ( ) ) ; \n\t} \n"}, {"code": "public void addChild ( BaseAssemblyNode childNode ) { \n\tchildNode . parentNode = this ; \n\tchildNodes . add ( childNode ) ; \n\t} \n"}, {"code": "protected void notifyHistoryChangedListeners $F72 { \n\tIterator < HistoryChangedListener > iter ; \n\tHistoryChangedListener l ; \n\t$F18058 ( iter , m_HistoryChangedListeners ) while $F2921 ( iter ) { \n\t\t$F45366 ( l , iter ) l . historyChanged ( new HistoryChangedEvent ( this , HISTORY_NAME , getHistory ( ) ) ) ; \n\t\t} \n\t} \n"}, {"code": "$F121106 ( putLock , this , notFull ) "}, {"code": "@ RequiresPermission ( Manifest . permission . CAMERA ) public CameraSource start $F72 throws IOException { \n\tsynchronized ( mCameraLock ) { \n\t\t$F20092 ( mCamera , this ) mCamera = createCamera ( ) ; \n\t\tif ( $F20093 ( Build ) ) { \n\t\t\tmDummySurfaceTexture = new SurfaceTexture ( DUMMY_TEXTURE_NAME ) ; \n\t\t\tmCamera . setPreviewTexture ( mDummySurfaceTexture ) ; \n\t\t\t} \n\t\telse { \n\t\t\tmDummySurfaceView = new SurfaceView ( mContext ) ; \n\t\t\tmCamera . setPreviewDisplay ( mDummySurfaceView . getHolder ( ) ) ; \n\t\t\t} \n\t\tmCamera . startPreview ( ) ; \n\t\t$F20103 ( mProcessingThread , mFrameProcessor ) mFrameProcessor . setActive ( _BOOL ) ; \n\t\t$F2346 ( mProcessingThread ) } \n\treturn this ; \n\t} \n"}, {"code": "$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel ) "}, {"code": "private TextView findTextViewByTagId ( final String tagId ) { \n\tfor ( final TextView view : mTagViewMap . values ( ) ) { \n\t\tfinal Tag tag = ( Tag ) view . getTag ( ) ; \n\t\tif ( tagId . equals ( tag . id ) ) { \n\t\t\treturn view ; \n\t\t\t} \n\t\t} \n\t$F1274 } \n"}, {"code": "public Space prune ( Space prefix ) throws ScopeException { \n\tSpace x = this ; \n\tArrayList < Space > $F204 ( stack ) ; \n\twhile $F10335 ( x , prefix ) { \n\t\t$F6965 ( stack , x ) $F10337 ( x ) } \n\tif ( x == null ) { \n\t\tthrow new ScopeException $F580 ; \n\t\t} \n\telse { \n\t\tSpace result = new Space ( universe , x . getDomain ( ) ) ; \n\t\tfor ( Space space : stack ) { \n\t\t\tresult = result . S ( space . getRelation ( ) ) ; \n\t\t\t} \n\t\treturn result ; \n\t\t} \n\t} \n"}, {"code": "default void infof $F4353 ( format , args ) $F4355 ( info , String , format , args ) "}, {"code": "public static int darker ( int color , float factor ) { \n\tint a = Color . alpha ( color ) ; \n\tint r = Color . red ( color ) ; \n\tint g = Color . green ( color ) ; \n\tint b = Color . blue ( color ) ; \n\treturn Color . argb ( a , Math . max ( $F2354 ( r , factor ) , NUM00 ) , Math . max ( $F2354 ( g , factor ) , NUM00 ) , Math . max ( $F2354 ( b , factor ) , NUM00 ) ) ; \n\t} \n"}, {"code": "public < FV > FV extractRawJavaFieldValue ( Object object ) throws SQLException { \n\tObject val ; \n\tif ( fieldGetMethod == null ) { \n\t\ttry $F6045 ( val , field , object ) catch ( Exception e ) { \n\t\t\tthrow SqlExceptionUtil . create ( NUM00 + this , e ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\ttry { \n\t\t\tval = fieldGetMethod . invoke ( object ) ; \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\tthrow SqlExceptionUtil . create ( NUM00 + fieldGetMethod + NUM00 + this , e ) ; \n\t\t\t} \n\t\t} \n\t$F1431 FV converted = ( FV ) val ; \n\treturn converted ; \n\t} \n"}, {"code": "public static void writeFile ( File file , $F96 data ) { \n\ttry { \n\t\t$F18800 ( ra , file ) ra . write ( data ) ; \n\t\t$F5660 ( ra , data ) $F59 ( ra ) } \n\tcatch ( IOException e ) $F72290 ( file , e ) } \n"}, {"code": "public static $F1986 thresholdStringToArray ( String top , int L ) { \n\tif $F3106 ( top ) { \n\t\treturn MLUtils . toDoubleArray ( top ) ; \n\t\t} \n\telse { \n\t\tdouble t [ ] = new double [ L ] ; \n\t\tArrays . fill ( t , Double . parseDouble ( top ) ) ; \n\t\treturn t ; \n\t\t} \n\t} \n"}, {"code": "$F1 public $F806 determineColumnConstraints ( ResultProducer rp ) throws Exception $F1337 "}, {"code": "abstract $F2689 initConfigNames $F72 ; \n"}, {"code": "public static int eval ( String url , String text ) throws IOException { \n\tString returnValue = null ; \n\tif $F3106 ( url ) { \n\t\treturnValue = doHttp ( url , text ) ; \n\t\t} \n\telse if $F3106 ( url ) { \n\t\treturnValue = doBsh ( url , text ) ; \n\t\t} \n\telse $F3490 try $F75349 ( Integer , returnValue ) catch ( Exception e ) $F1083 } \n"}, {"code": "public DSAPrivateKey $F97 ( encoded ) throws InvalidKeyException $F19529 ( clearOldKey , decode , encoded ) "}, {"code": "$F47733 ( reader , writer , buffer , count ) "}, {"code": "private void sendBroadcastNewOperation ( Target target , RemoteOperation operation ) { \n\tIntent intent = new Intent ( ACTION_OPERATION_ADDED ) ; \n\tif ( target . mAccount != null ) { \n\t\tintent . putExtra ( EXTRA_ACCOUNT , target . mAccount ) ; \n\t\t} \n\telse { \n\t\tintent . putExtra ( EXTRA_SERVER_URL , target . mServerUrl ) ; \n\t\t} \n\tsendStickyBroadcast ( intent ) ; \n\t} \n"}, {"code": "int successful $F72 $F1522 ( success ) "}, {"code": "public void monitor ( String key ) { \n\tTimer t = new Timer ( _BOOL ) ; \n\tt . schedule ( new WatchableRegistration ( key ) , NUM00 * NUM00 , NUM00 * NUM00 ) ; \n\t} \n"}, {"code": "$F5077 ( journalWriter , writer , journalFileTmp , IO_BUFFER_SIZE , MAGIC , VERSION_1 , Integer , appVersion , valueCount , entry , lruEntries , DIRTY , CLEAN , journalFile , _BOOL ) "}, {"code": "protected int checkRiskAttribute $F72 { \n\tint retVal = NUM00 ; \n\tif $F6299 ( debug ) $F218635 ( debug , ADAPTIVE ) if ( riskAttributeName != null && riskAttributeValue != null ) { \n\t\t$F29150 ( riskAttributeValues ) riskAttributeValues = getIdentityAttributeSet ( riskAttributeName ) ; \n\t\tif ( riskAttributeValues != null ) { \n\t\t\tfor ( String riskAttr : riskAttributeValues ) { \n\t\t\t\tif $F8397 ( riskAttributeValue , riskAttr ) { \n\t\t\t\t\tif $F6299 ( debug ) $F218635 ( debug , ADAPTIVE ) retVal = riskAttributeScore ; \n\t\t\t\t\t$F597 } \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tif ( ! riskAttributeInvert ) { \n\t\tretVal = riskAttributeScore - retVal ; \n\t\t} \n\treturn retVal ; \n\t} \n"}, {"code": "public static MethExecutorResult executeInstance ( String receiver , String selector , $F749 types , $F131 args ) { \n\ttry { \n\t\t$F63290 ( receiverClass , Class , receiver ) Constructor init = receiverClass . getDeclaredConstructor ( $F33934 ) ; \n\t\tinit . setAccessible ( _BOOL ) ; \n\t\tObject target = init . newInstance ( $F3297 ) ; \n\t\tObject res = null ; \n\t\ttry { \n\t\t\tMethod theMethod = getMethod ( receiverClass , selector , types ) ; \n\t\t\tres = theMethod . invoke ( target , args ) ; \n\t\t\treturn new MethExecutorResult ( res ) ; \n\t\t\t} \n\t\tcatch ( InvocationTargetException invTargEx ) { \n\t\t\t$F171619 ( targEx , invTargEx ) if ( targEx == null ) { \n\t\t\t\treturn new MethExecutorResult ( res ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\treturn new MethExecutorResult ( targEx ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F79506 ( SystemFailure , e ) catch ( Throwable t ) { \n\t\treturn new MethExecutorResult ( t ) ; \n\t\t} \n\t} \n"}, {"code": "private void writeObject ( ObjectOutputStream stream ) throws IOException { \n\t$F9339 ( stream ) marshalAttributes ( attrs , stream ) ; \n\t} \n"}, {"code": "$F1 synchronized public void write $F1313 ( off , len ) throws IOException { \n\tif ( b == null ) $F18044 else if ( off < NUM00 || len < NUM00 || len > b . length - off ) $F81129 else $F32905 ( len ) c . checkWrite ( ) ; \n\tboolean isFirstRecordOfThePayload = _BOOL ; \n\ttry { \n\t\tdo { \n\t\t\tboolean holdRecord = _BOOL ; \n\t\t\tint howmuch ; \n\t\t\tif ( isFirstRecordOfThePayload && c . needToSplitPayload ( ) ) { \n\t\t\t\thowmuch = Math . min ( NUM00 , r . availableDataBytes ( ) ) ; \n\t\t\t\tif ( ( len != NUM00 ) && ( howmuch == NUM00 ) ) { \n\t\t\t\t\tholdRecord = _BOOL ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\thowmuch = Math . min ( len , r . availableDataBytes ( ) ) ; \n\t\t\t\t} \n\t\t\tif ( isFirstRecordOfThePayload && howmuch != NUM00 ) { \n\t\t\t\tisFirstRecordOfThePayload = _BOOL ; \n\t\t\t\t} \n\t\t\tif ( howmuch > NUM00 ) { \n\t\t\t\tr . write ( b , off , howmuch ) ; \n\t\t\t\toff += howmuch ; \n\t\t\t\tlen -= howmuch ; \n\t\t\t\t} \n\t\t\tc . writeRecord ( r , holdRecord ) ; \n\t\t\tc . checkWrite ( ) ; \n\t\t\t} \n\t\twhile ( len > NUM00 ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tc . handleException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public boolean onInterceptTouchEvent ( MotionEvent ev ) { \n\t$F1431 final boolean debug = _BOOL ; \n\tif ( debug ) { \n\t\tLog . d ( Launcher . TAG , NUM00 + ev + NUM00 + mDragging ) ; \n\t\t} \n\tacquireVelocityTrackerAndAddMovement ( ev ) ; \n\t$F19472 ( action , ev ) final $F2027 dragLayerPos = $F42981 ( getClampedDragLayerPos , ev ) ; \n\t$F178172 ( dragLayerX , dragLayerPos ) $F178172 ( dragLayerY , dragLayerPos ) switch ( action ) { \n\t\tcase MotionEvent . ACTION_MOVE : $F597 case MotionEvent . ACTION_DOWN : mMotionDownX = dragLayerX ; \n\t\tmMotionDownY = dragLayerY ; \n\t\tmLastDropTarget = null ; \n\t\t$F597 case MotionEvent . ACTION_UP : $F3224 ( mLastTouchUpTime , System ) if ( mDragging ) { \n\t\t\tPointF vec = isFlingingToDelete ( mDragObject . dragSource ) ; \n\t\t\tif ( ! DeleteDropTarget . willAcceptDrop ( mDragObject . dragInfo ) ) { \n\t\t\t\tvec = null ; \n\t\t\t\t} \n\t\t\tif ( vec != null ) { \n\t\t\t\tdropOnFlingToDeleteTarget ( dragLayerX , dragLayerY , vec ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tdrop ( dragLayerX , dragLayerY ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tendDrag ( ) ; \n\t\t$F597 case MotionEvent . ACTION_CANCEL : cancelDrag ( ) ; \n\t\t$F597 } \n\treturn mDragging ; \n\t} \n"}, {"code": "public void test_concurrentKBCreateAndDiscovery $F72 throws Exception { \n\t$F61105 ( namespace , getName ) $F17606 ( properties , getProperties ) Journal jnl = null ; \n\ttry { \n\t\tjnl = new Journal ( properties ) ; \n\t\tdoConcurrentCreateAndDiscoveryTest ( jnl , namespace ) ; \n\t\t} \n\tfinally { \n\t\tif ( jnl != null ) $F17623 ( jnl ) } \n\t} \n"}, {"code": "private void resetDatabase ( TungstenProperties serviceProps , $F2540 ( progress ) ) throws InterruptedException { \n\tDataSourceAdministrator admin = null ; \n\tString serviceName = serviceProps . getString ( ReplicatorConf . SERVICE_NAME ) ; \n\ttry { \n\t\tadmin = new DataSourceAdministrator ( serviceProps ) ; \n\t\t$F97691 ( admin ) $F545 ( progress , serviceName ) boolean cleared = admin . resetAll ( ) ; \n\t\tif ( cleared ) $F22715 ( logger ) else $F10090 ( logger , serviceName ) } \n\tcatch ( ReplicatorException e ) { \n\t\tlogger . error ( String . format ( $F8129 ( serviceName , e ) ) , e ) ; \n\t\t} \n\tfinally { \n\t\tif ( admin != null ) $F33834 ( admin ) } \n\t} \n"}, {"code": "public static final void writeValueXml ( Object v , String name , XmlSerializer out ) throws $F18821 { \n\tString typeStr ; \n\tif ( v == null ) { \n\t\t$F18823 ( out ) $F18831 ( name , out ) $F18825 ( out ) $F665 } \n\telse if ( v instanceof String ) $F154622 ( out , name , v ) else if ( v instanceof Integer ) { \n\t\ttypeStr = NUM00 ; \n\t\t} \n\telse if ( v instanceof Long ) { \n\t\ttypeStr = NUM00 ; \n\t\t} \n\telse if ( v instanceof Float ) { \n\t\ttypeStr = NUM00 ; \n\t\t} \n\telse if ( v instanceof Double ) { \n\t\ttypeStr = NUM00 ; \n\t\t} \n\telse if ( v instanceof Boolean ) { \n\t\ttypeStr = NUM00 ; \n\t\t} \n\telse if $F2456 ( v ) { \n\t\twriteByteArrayXml ( $F2457 ( v ) , name , out ) ; \n\t\t$F665 } \n\telse if $F25705 ( v ) { \n\t\twriteIntArrayXml ( $F25706 ( v ) , name , out ) ; \n\t\t$F665 } \n\telse if ( v instanceof Map ) { \n\t\twriteMapXml ( ( Map ) v , name , out ) ; \n\t\t$F665 } \n\telse if ( v instanceof List ) { \n\t\twriteListXml ( ( List ) v , name , out ) ; \n\t\t$F665 } \n\telse if ( v instanceof CharSequence ) $F154622 ( out , name , v ) else $F1666 ( v ) out . startTag ( null , typeStr ) ; \n\t$F18831 ( name , out ) out . attribute ( null , NUM00 , v . toString ( ) ) ; \n\tout . endTag ( null , typeStr ) ; \n\t} \n"}, {"code": "private void initializeIdealPoint $F72 { \n\tidealPoint = new double [ problem . getNumberOfObjectives ( ) ] ; \n\t$F116979 ( Arrays , idealPoint , Double ) } \n"}, {"code": "private long startWait $F72 { \n\treturn System . nanoTime ( ) ; \n\t} \n"}, {"code": "public static $F806 readFontNames ( final FontData fontData ) { \n\tfinal $F806 fontNames = $F382 ; \n\tfontNames [ NUM00 ] = null ; \n\tfinal BufferedReader br = new BufferedReader ( new StringReader ( new String ( fontData . getBytes ( $F34024 ( fontData ) ) ) ) ) ; \n\tString line = null ; \n\twhile ( _BOOL ) { \n\t\ttry $F63868 ( line , br ) catch ( final IOException e ) $F65913 ( LogWriter , e ) $F32472 ( line ) if $F3106 ( line ) { \n\t\t\tfinal int nameStart = line . indexOf ( NUM00 , NUM00 ) ; \n\t\t\tif ( nameStart != - NUM00 ) { \n\t\t\t\t$F57844 ( nameEnd , line , nameStart ) if ( nameEnd != - NUM00 ) { \n\t\t\t\t\tfinal String name = line . substring ( nameStart + NUM00 , nameEnd ) ; \n\t\t\t\t\tfontNames [ NUM00 ] = name . toLowerCase ( ) ; \n\t\t\t\t\t$F597 } \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tif ( br != null ) { \n\t\ttry $F881 ( br ) catch ( final Exception e ) $F109312 ( LogWriter , e ) } \n\t$F2727 ( fontData ) return fontNames ; \n\t} \n"}, {"code": "private void writeUnitsOfIndentation ( int i ) throws IOException { \n\tfor ( ; \n\ti > NUM00 ; \n\ti -- ) $F4050 ( writer , INDENTATION_UNIT ) } \n"}, {"code": "private PatternParser $F72 throws HyphenationException { \n\t$F6932 ( token ) parser = createParser ( ) ; \n\tparser . setContentHandler ( this ) ; \n\tparser . setErrorHandler ( this ) ; \n\thyphenChar = NUM00 ; \n\t} \n"}, {"code": "public static int capBetween $F14337 ( min , number , max ) { \n\tassertTrue ( min <= max ) ; \n\treturn Math . min ( max , Math . max ( min , number ) ) ; \n\t} \n"}, {"code": "public boolean hasExtensions $F72 $F40347 ( extensions ) "}, {"code": "public void munge ( String entityId , Collection $F12621 statements , $F6877 existingValues , $F6877 existingRefs , Change sourceChange ) { \n\t$F19233 ( statements ) MungeOperation op = new MungeOperation ( entityId , statements , existingValues , existingRefs ) ; \n\tif ( sourceChange != null ) { \n\t\top . importFromChange ( sourceChange ) ; \n\t\t} \n\top . munge ( ) ; \n\texistingValues . removeAll ( op . extraValidSubjects ) ; \n\texistingRefs . removeAll ( op . extraValidSubjects ) ; \n\t$F665 } \n"}, {"code": "public void showPropertyDialog $F72 { \n\tif ( $F61599 ( m_Editor ) ) { \n\t\tif ( m_PD == null ) { \n\t\t\tint x = getLocationOnScreen ( ) . x ; \n\t\t\tint y = getLocationOnScreen ( ) . y ; \n\t\t\tif ( PropertyDialog . getParentDialog ( this ) != null ) m_PD = new PropertyDialog ( PropertyDialog . getParentDialog ( this ) , m_Editor , x , y ) ; \n\t\t\telse m_PD = new PropertyDialog ( PropertyDialog . getParentFrame ( this ) , m_Editor , x , y ) ; \n\t\t\tm_PD . setVisible ( _BOOL ) ; \n\t\t\t} \n\t\telse $F59564 ( m_PD , _BOOL ) m_Editor . setValue ( m_Editor . getValue ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "public Lucene60Codec ( Mode mode ) { \n\tsuper ( NUM00 ) ; \n\tthis . storedFieldsFormat = new Lucene50StoredFieldsFormat ( Objects . requireNonNull ( mode ) ) ; \n\t} \n"}, {"code": "$F10188 ( close , Util , directory ) "}, {"code": "public synchronized void remove ( String name ) { \n\tfor ( $F2277 ( i , modifications ) ) { \n\t\tModification mod = modifications . get ( i ) ; \n\t\tAttribute attr = mod . getAttribute ( ) ; \n\t\tif ( name . equalsIgnoreCase ( attr . getAttributeDescriptionAsString ( ) ) ) { \n\t\t\tmodifications . remove ( i ) ; \n\t\t\t$F665 } \n\t\t} \n\t} \n"}, {"code": "$F32569 ( panel , cols , rows , filler , filled_cell_11 , _BOOL , cc , Box , index ) "}, {"code": "private boolean quietSleep ( long ms ) { \n\ttry $F7595 ( Thread , ms ) $F42359 ( _BOOL ) return _BOOL ; \n\t} \n"}, {"code": "public void pushFrame ( LocalVariableMap vars , DMLProgramCounter pc ) { \n\tcallStack . push ( new DMLFrame ( vars , pc ) ) ; \n\t} \n"}, {"code": "public boolean isLandingPage ( URL url ) { \n\tif ( url . getQuery ( ) != null ) { \n\t\treturn _BOOL ; \n\t\t} \n\telse { \n\t\treturn landingPageSuffix ( url ) != NUM00 ; \n\t\t} \n\t} \n"}, {"code": "protected void layoutGraphicModifiers ( DrawContext dc , AVList modifiers , OrderedSymbol osym ) $F845 "}, {"code": "public static synchronized void progress ( final String message ) { \n\tsLastProgress = message ; \n\tfinal PrintStream prog = getProgressStream ( ) ; \n\tif ( prog != null ) { \n\t\tprog . println ( now ( ) + message ) ; \n\t\t$F1206 ( prog ) if ( prog . checkError ( ) ) { \n\t\t\tsProgressStream = null ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private static boolean match ( CharSequence string , CharSequence pattern , int sNdx , int pNdx ) { \n\t$F1749 ( pLen , pattern ) if ( pLen == NUM00 ) { \n\t\tif $F4432 ( pattern ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\t$F1749 ( sLen , string ) boolean nextIsNotWildcard = _BOOL ; \n\twhile ( _BOOL ) { \n\t\tif ( ( sNdx >= sLen ) == _BOOL ) { \n\t\t\twhile ( ( pNdx < pLen ) && $F11983 ( pattern , pNdx ) ) { \n\t\t\t\tpNdx ++ ; \n\t\t\t\t} \n\t\t\treturn pNdx >= pLen ; \n\t\t\t} \n\t\t$F232230 ( pNdx , pLen , _BOOL ) $F1280 ( p , pattern , pNdx ) if ( nextIsNotWildcard == _BOOL ) { \n\t\t\tif ( p == NUM00 ) { \n\t\t\t\tpNdx ++ ; \n\t\t\t\tnextIsNotWildcard = _BOOL ; \n\t\t\t\t$F598 } \n\t\t\tif ( p == NUM00 ) { \n\t\t\t\tsNdx ++ ; \n\t\t\t\tpNdx ++ ; \n\t\t\t\t$F598 } \n\t\t\tif ( p == NUM00 ) { \n\t\t\t\tchar pNext = NUM00 ; \n\t\t\t\tif ( pNdx + NUM00 < pLen ) { \n\t\t\t\t\tpNext = pattern . charAt ( pNdx + NUM00 ) ; \n\t\t\t\t\t} \n\t\t\t\tif ( pNext == NUM00 ) $F118993 ( pNdx ) int i ; \n\t\t\t\tpNdx ++ ; \n\t\t\t\tfor ( i = string . length ( ) ; \n\t\t\t\ti >= sNdx ; \n\t\t\t\ti -- ) { \n\t\t\t\t\tif ( match ( string , pattern , i , pNdx ) == _BOOL ) { \n\t\t\t\t\t\treturn _BOOL ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\treturn _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tnextIsNotWildcard = _BOOL ; \n\t\t\t} \n\t\tif $F94215 ( p , string , sNdx ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\tsNdx ++ ; \n\t\tpNdx ++ ; \n\t\t} \n\t} \n"}, {"code": "public String nextCDATA $F72 throws JSONException { \n\tchar c ; \n\tint i ; \n\t$F280 ( sb ) for ( $F589 ) { \n\t\tc = next ( ) ; \n\t\tif ( end ( ) ) $F25983 ( syntaxError ) sb . append ( c ) ; \n\t\t$F25985 ( i , sb ) if ( $F25986 ( i , sb ) && $F10825 ( sb , i ) && $F10825 ( sb , i ) ) { \n\t\t\tsb . setLength ( i ) ; \n\t\t\t$F92 ( sb ) } \n\t\t} \n\t} \n"}, {"code": "public void addGrammarFile ( String fileName ) $F207 ( grammarFiles , fileName ) "}, {"code": "private $F28319 rollbackDeleteMirrorDeviceMethod ( URI vplexURI , URI vplexMirrorURI ) $F79423 ( RB_DELETE_MIRROR_DEVICE_METHOD_NAME , vplexURI , vplexMirrorURI ) "}, {"code": "private String findCipherAndStrength ( $F96 supportedCiphers , $F806 tokens ) { \n\tbyte s ; \n\tfor ( $F1139 ( i , strength ) ) { \n\t\tif ( ( s = strength [ i ] ) != NUM00 ) { \n\t\t\tfor ( $F1139 ( j , supportedCiphers ) ) { \n\t\t\t\tif ( s == supportedCiphers [ j ] && ( specifiedCipher == null || specifiedCipher . equals ( tokens [ j ] ) ) ) { \n\t\t\t\t\tswitch ( s ) { \n\t\t\t\t\t\t$F7242 ( HIGH_STRENGTH , negotiatedStrength ) $F7242 ( MEDIUM_STRENGTH , negotiatedStrength ) $F7242 ( LOW_STRENGTH , negotiatedStrength ) } \n\t\t\t\t\treturn tokens [ j ] ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F1274 } \n"}, {"code": "public static $F806 split ( String line , String delim ) { \n\t$F19151 ( list ) $F14497 ( t , line , delim ) $F44279 ( t , list ) $F10150 ( list ) } \n"}, {"code": "public static String slurpFile ( File file ) throws IOException { \n\tReader r = new FileReader ( file ) ; \n\treturn slurpReader ( r ) ; \n\t} \n"}, {"code": "$F1113 public List < PlayerNbt > createSingleplayerPlayerNbts $F72 { \n\t$F2980 ( Log ) return Arrays . asList ( createLevelDatPlayerNbt ( ) ) ; \n\t} \n"}, {"code": "$F1 public String toString $F72 { \n\tStringBuilder result = new StringBuilder ( limit - position ) ; \n\tfor ( int i = position ; \n\ti < limit ; \n\ti ++ ) $F9821 ( result , get , i ) $F92 ( result ) } \n"}, {"code": "public void testEqualsUnequal1 $F72 { \n\tString a = NUM00 ; \n\tint aScale = - NUM00 ; \n\tString b = NUM00 ; \n\tint bScale = NUM00 ; \n\t$F1918 ( aNumber , a , aScale ) $F1918 ( bNumber , b , bScale ) $F28249 ( assertFalse , aNumber , bNumber ) } \n"}, {"code": "public void testCase8 $F72 { \n\t$F7829 $F10679 int aSign = - NUM00 ; \n\tint bSign = NUM00 ; \n\t$F122099 $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F10683 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F70256 ( assertEquals , result ) } \n"}, {"code": "public GetFormKeyCmd ( String processDefinitionId , String taskDefinitionKey ) { \n\tsetProcessDefinitionId ( processDefinitionId ) ; \n\tif ( $F107041 ( taskDefinitionKey ) ) { \n\t\tthrow new ActivitiIllegalArgumentException ( NUM00 + taskDefinitionKey + NUM00 ) ; \n\t\t} \n\tthis . taskDefinitionKey = taskDefinitionKey ; \n\t} \n"}, {"code": "protected abstract StorageLevel storageLevel $F72 ; \n"}, {"code": "$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel ) "}, {"code": "private void statInit $F72 { \n\tlDocumentNo . setLabelFor ( fDocumentNo ) ; \n\t$F405061 ( fDocumentNo , AdempierePLAF ) fDocumentNo . addActionListener ( this ) ; \n\tfcheckReceipt . setSelected ( _BOOL ) ; \n\t$F79692 ( fcheckReceipt ) fcheckReceipt . addActionListener ( this ) ; \n\tfcheckPayment . setSelected ( _BOOL ) ; \n\t$F79692 ( fcheckPayment ) fcheckPayment . addActionListener ( this ) ; \n\tfBankAccount_ID = new VLookup ( NUM00 , _BOOL , _BOOL , _BOOL , MLookupFactory . get ( Env . getCtx ( ) , p_WindowNo , NUM00 , MColumn . getColumn_ID ( MPayment . Table_Name , MPayment . COLUMNNAME_C_BankAccount_ID ) , DisplayType . TableDir ) ) ; \n\tlBankAccount_ID . setLabelFor ( fBankAccount_ID ) ; \n\t$F405061 ( fBankAccount_ID , AdempierePLAF ) fBankAccount_ID . addActionListener ( this ) ; \n\tfBPartner_ID = new VLookup ( NUM00 , _BOOL , _BOOL , _BOOL , MLookupFactory . get ( Env . getCtx ( ) , p_WindowNo , NUM00 , MColumn . getColumn_ID ( MPayment . Table_Name , MPayment . COLUMNNAME_C_BPartner_ID ) , DisplayType . Search ) ) ; \n\tlBPartner_ID . setLabelFor ( fBPartner_ID ) ; \n\t$F405061 ( fBPartner_ID , AdempierePLAF ) fBPartner_ID . addActionListener ( this ) ; \n\tlDateFrom . setLabelFor ( fDateFrom ) ; \n\t$F405061 ( fDateFrom , AdempierePLAF ) fDateFrom . setToolTipText ( $F9206 ( Msg , Env ) ) ; \n\tfDateFrom . addActionListener ( this ) ; \n\tlDateTo . setLabelFor ( fDateTo ) ; \n\t$F405061 ( fDateTo , AdempierePLAF ) fDateTo . setToolTipText ( $F9206 ( Msg , Env ) ) ; \n\tfDateTo . addActionListener ( this ) ; \n\tlAmtFrom . setLabelFor ( fAmtFrom ) ; \n\t$F405061 ( fAmtFrom , AdempierePLAF ) fAmtFrom . setToolTipText ( $F9206 ( Msg , Env ) ) ; \n\tfAmtFrom . setBorder ( fDateFrom . getBorder ( ) ) ; \n\tfAmtFrom . addActionListener ( this ) ; \n\tlAmtTo . setLabelFor ( fAmtTo ) ; \n\t$F405061 ( fAmtTo , AdempierePLAF ) fAmtTo . setToolTipText ( $F9206 ( Msg , Env ) ) ; \n\tfAmtTo . setBorder ( fDateFrom . getBorder ( ) ) ; \n\tfAmtTo . addActionListener ( this ) ; \n\tCPanel amtPanel = new CPanel $F72 ; \n\tCPanel datePanel = new CPanel $F72 ; \n\tamtPanel . setLayout ( new ALayout ( NUM00 , NUM00 , _BOOL ) ) ; \n\t$F405134 ( amtPanel , fAmtFrom ) $F103711 ( amtPanel , lAmtTo ) $F103711 ( amtPanel , fAmtTo ) datePanel . setLayout ( new ALayout ( NUM00 , NUM00 , _BOOL ) ) ; \n\t$F405134 ( datePanel , fDateFrom ) $F103711 ( datePanel , lDateTo ) $F103711 ( datePanel , fDateTo ) $F405134 ( p_criteriaGrid , lDocumentNo ) $F103711 ( p_criteriaGrid , fDocumentNo ) $F103711 ( p_criteriaGrid , lBPartner_ID ) $F103711 ( p_criteriaGrid , fBPartner_ID ) $F405134 ( p_criteriaGrid , fcheckReceipt ) $F405134 ( p_criteriaGrid , lBankAccount_ID ) p_criteriaGrid . add ( fBankAccount_ID ) ; \n\t$F103711 ( p_criteriaGrid , lDateFrom ) $F103711 ( p_criteriaGrid , datePanel ) $F405134 ( p_criteriaGrid , fcheckPayment ) $F405134 ( p_criteriaGrid , lAmtFrom ) $F103711 ( p_criteriaGrid , amtPanel ) } \n"}, {"code": "$F1 public Graphics create $F72 { \n\t$F110481 ( DEBUG , m_printstream ) PostscriptGraphics psg = new PostscriptGraphics ( this ) ; \n\treturn ( psg ) ; \n\t} \n"}, {"code": "private void parseActions $F72 { \n\t$F8093 ( st , actions , _BOOL ) boolean comma = _BOOL ; \n\twhile $F14498 ( st ) { \n\t\t$F8095 ( act , st ) if $F3057 ( act ) $F1448 else if ( comma ) { \n\t\t\tif $F1264 ( act ) $F3468 ( comma , _BOOL ) } \n\t\telse if $F21935 ( act ) { \n\t\t\tmask |= CONNECT ; \n\t\t\t} \n\t\telse if $F21935 ( act ) { \n\t\t\tmask |= ACCEPT ; \n\t\t\t} \n\t\telse if $F21935 ( act ) { \n\t\t\tmask |= DELEGATE ; \n\t\t\t} \n\t\telse if $F21935 ( act ) { \n\t\t\tmask |= LISTEN ; \n\t\t\t} \n\t\telse $F5153 comma = ! comma ; \n\t\t} \n\tif ( ! comma ) $F825 } \n"}, {"code": "$F96 toBytes ( SSLSession session ) { \n\tif ( ! ( session instanceof OpenSSLSessionImpl ) ) $F1337 OpenSSLSessionImpl sslSession = ( OpenSSLSessionImpl ) session ; \n\ttry { \n\t\t$F1538 ( baos ) $F1533 ( daos , baos ) daos . writeInt ( OPEN_SSL ) ; \n\t\t$F46943 ( data , sslSession ) $F17916 ( daos , data ) daos . write ( data ) ; \n\t\t$F65927 certs = session . getPeerCertificates ( ) ; \n\t\t$F17916 ( daos , certs ) for ( Certificate cert : certs ) { \n\t\t\tdata = cert . getEncoded ( ) ; \n\t\t\t$F17916 ( daos , data ) daos . write ( data ) ; \n\t\t\t} \n\t\t$F11316 ( baos ) } \n\tcatch ( IOException e ) { \n\t\tlog ( e ) ; \n\t\t$F1274 } \n\tcatch ( CertificateEncodingException e ) { \n\t\tlog ( e ) ; \n\t\t$F1274 } \n\t} \n"}, {"code": "$F196938 ( textCompactionData , byteCompactionData , length , result , subMode , Mode , priorToShiftMode , i , subModeCh , ch , ALPHA , LL , ML , PS , MODE_SHIFT_TO_BYTE_COMPACTION_MODE , TEXT_COMPACTION_MODE_LATCH , LOWER , AS , MIXED , PL , MIXED_CHARS , AL , PUNCT , PAL , PUNCT_CHARS , ALPHA_SHIFT , PUNCT_SHIFT ) "}, {"code": "$F35807 ( name , _BOOL ) "}, {"code": "protected void addCounters ( BasicCounters < MutableLong > target , BasicCounters < MutableLong > source ) { \n\tfor ( Enum < ReaderCounterKeys > key : ReaderCounterKeys . values ( ) ) { \n\t\tMutableLong tcounter = target . getCounter ( key ) ; \n\t\tif ( tcounter == null ) { \n\t\t\ttcounter = new MutableLong $F72 ; \n\t\t\ttarget . setCounter ( key , tcounter ) ; \n\t\t\t} \n\t\tMutableLong scounter = source . getCounter ( key ) ; \n\t\tif ( scounter != null ) { \n\t\t\ttcounter . add ( scounter . longValue ( ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void addCard ( SharedPreferences sharedPreferences , String key ) { \n\tString json = sharedPreferences . getString ( key , null ) ; \n\tif ( json != null ) { \n\t\ttry { \n\t\t\t$F16933 ( jsonData , json ) if $F186819 ( jsonData , IMAGE_KEY ) { \n\t\t\t\t$F19101 ( image , jsonData , IMAGE_KEY ) List < ITopic > cards = getSourceTopicModel ( ) ; \n\t\t\t\tswitch ( key ) { \n\t\t\t\t\tcase POOL_KEY : cards . add ( NUM00 , Cards . pool ( image , getActivity ( ) ) ) ; \n\t\t\t\t\tremoveDuplicates ( POOL_KEY , cards ) ; \n\t\t\t\t\t$F597 case VIDEO_KEY : switch ( jsonData . getString ( ID_KEY ) ) { \n\t\t\t\t\t\tcase POOL_CAMERA_ID : mGreatShotUrl = jsonData . getString ( URL_KEY ) ; \n\t\t\t\t\t\tmElv . setOnGroupClickListener ( greatShotListener ) ; \n\t\t\t\t\t\tcards . add ( NUM00 , Cards . poolVideo ( mGreatShotUrl , getActivity ( ) ) ) ; \n\t\t\t\t\t\tremoveDuplicates ( VIDEO_KEY , cards ) ; \n\t\t\t\t\t\t$F597 } \n\t\t\t\t\t$F597 case FOOD_KEY : cards . add ( NUM00 , Cards . food ( image , getActivity ( ) ) ) ; \n\t\t\t\t\tremoveDuplicates ( FOOD_KEY , cards ) ; \n\t\t\t\t\t$F597 case PRINTER_3D_KEY : cards . add ( NUM00 , Cards . printer3d ( image , getActivity ( ) ) ) ; \n\t\t\t\t\tremoveDuplicates ( PRINTER_3D_KEY , cards ) ; \n\t\t\t\t\t$F597 } \n\t\t\t\t} \n\t\t\telse if $F186819 ( jsonData , MESSAGE_KEY ) { \n\t\t\t\t$F19101 ( message , jsonData , MESSAGE_KEY ) List < ITopic > cards = getSourceTopicModel ( ) ; \n\t\t\t\tcards . add ( NUM00 , Cards . test ( message , getActivity ( ) ) ) ; \n\t\t\t\t} \n\t\t\t$F62331 ( UI ) } \n\t\t$F16830 ( e ) } \n\t} \n"}, {"code": "public static List < LoggedMqttMessage > parseMessageLog ( $F20109 ( messages ) , final ProgressUpdater progress , final long current , final long max ) throws SpyException { \n\ttry { \n\t\tfinal long startTime = TimeUtils . getMonotonicTime ( ) ; \n\t\t$F10162 ( items , messages ) final long chunkSize = items / NUM00 ; \n\t\tfinal MqttMessageLogParser parser = new MqttMessageLogParser $F72 ; \n\t\tfinal List < LoggedMqttMessage > list = new ArrayList < LoggedMqttMessage > $F72 ; \n\t\tlong item = NUM00 ; \n\t\tlong reportAt = NUM00 ; \n\t\tfor ( $F119 ( i , items ) ) { \n\t\t\t$F3056 ( message , messages , i ) if ( progress != null ) { \n\t\t\t\tif ( progress . isCancelled ( ) ) $F11048 ( logger ) item ++ ; \n\t\t\t\tif ( item % NUM00 == NUM00 ) { \n\t\t\t\t\tprogress . update ( current + item , max ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tif ( ( i > NUM00 ) && ( i == ( chunkSize * reportAt ) ) ) { \n\t\t\t\tfinal long currentTime = TimeUtils . getMonotonicTime ( ) ; \n\t\t\t\tfinal long timeTaken = currentTime - startTime ; \n\t\t\t\tfinal long totalTimeExpected = timeTaken * items / i ; \n\t\t\t\tif ( timeTaken > NUM00 ) { \n\t\t\t\t\tlogger . info ( NUM00 , reportAt * NUM00 , ( totalTimeExpected - timeTaken ) / NUM00 ) ; \n\t\t\t\t\t} \n\t\t\t\treportAt ++ ; \n\t\t\t\t} \n\t\t\ttry { \n\t\t\t\tlist . add ( parser . parse ( message ) ) ; \n\t\t\t\t} \n\t\t\tcatch ( XMLException e ) $F30203 ( logger , message , e ) } \n\t\t$F11057 ( logger , list ) return list ; \n\t\t} \n\tcatch ( XMLException e ) { \n\t\tthrow new SpyException ( NUM00 , e ) ; \n\t\t} \n\t} \n"}, {"code": "private void recomputeSeperation ( $F28974 ( means ) , $F1986 sep ) { \n\t$F18832 ( k , means ) assert ( sep . length == k ) ; \n\tboolean issquared = ( distanceFunction instanceof SquaredEuclideanDistanceFunction ) ; \n\t$F116979 ( Arrays , sep , Double ) for ( $F119 ( i , k ) ) { \n\t\t$F80292 ( m1 , DoubleVector , means , i ) for ( $F119 ( j , i ) ) { \n\t\t\tdouble $F42644 ( d , distanceFunction , m1 , DoubleVector , means , j ) ; \n\t\t\tsep [ i ] = ( d < sep [ i ] ) ? d : sep [ i ] ; \n\t\t\tsep [ j ] = ( d < sep [ j ] ) ? d : sep [ j ] ; \n\t\t\t} \n\t\t} \n\tfor ( $F119 ( i , k ) ) { \n\t\tsep [ i ] = issquared ? Math . sqrt ( sep [ i ] ) : sep [ i ] ; \n\t\tsep [ i ] *= NUM00 ; \n\t\t} \n\t} \n"}, {"code": "private int transition ( int state , int symbol ) { \n\tfor ( $F9958 ( i , state , transitions ) ) { \n\t\tif ( ( transitions [ i ] % vocabularySize ) == symbol ) { \n\t\t\treturn ( transitions [ i ] / vocabularySize ) ; \n\t\t\t} \n\t\t} \n\t$F150 } \n"}, {"code": "public synchronized CeylonConfig merge ( CeylonConfig other ) { \n\tfor ( String key : other . getOptionNames ( null ) ) { \n\t\t$F806 values = other . getOptionValues ( key ) ; \n\t\tsetOptionValues ( key , values ) ; \n\t\t} \n\treturn this ; \n\t} \n"}, {"code": "public static synchronized String rot13 ( String input ) { \n\t$F280 ( output ) if ( input != null ) { \n\t\tfor ( $F1088 ( i , input ) ) { \n\t\t\t$F1280 ( inChar , input , i ) if ( ( inChar >= NUM00 ) & ( inChar <= NUM00 ) ) { \n\t\t\t\tinChar += NUM00 ; \n\t\t\t\tif ( inChar > NUM00 ) { \n\t\t\t\t\tinChar -= NUM00 ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tif ( ( inChar >= NUM00 ) & ( inChar <= NUM00 ) ) { \n\t\t\t\tinChar += NUM00 ; \n\t\t\t\tif ( inChar > NUM00 ) { \n\t\t\t\t\tinChar -= NUM00 ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\toutput . append ( inChar ) ; \n\t\t\t} \n\t\t} \n\t$F92 ( output ) } \n"}, {"code": "private long monthRange $F72 { \n\tValueRange startRange = chrono . range ( MONTH_OF_YEAR ) ; \n\tif ( startRange . isFixed ( ) && startRange . isIntValue ( ) ) { \n\t\treturn startRange . getMaximum ( ) - startRange . getMinimum ( ) + NUM00 ; \n\t\t} \n\t$F150 } \n"}, {"code": "public void animate ( MarkerWithPosition marker , LatLng from , LatLng to ) { \n\t$F790 ( lock ) mAnimationTasks . add ( new AnimationTask ( marker , from , to ) ) ; \n\t$F704 ( lock ) } \n"}, {"code": "$F1 public int compareTo ( ComponentDescription o ) { \n\tint myPos = NUM00 ; \n\tint oPos = NUM00 ; \n\tif ( this instanceof LanguageComponentDescription ) { \n\t\tmyPos = NUM00 ; \n\t\t} \n\telse if ( this instanceof VoiceComponentDescription ) { \n\t\tmyPos = NUM00 ; \n\t\t} \n\tif ( o instanceof LanguageComponentDescription ) { \n\t\toPos = NUM00 ; \n\t\t} \n\telse if ( o instanceof VoiceComponentDescription ) { \n\t\toPos = NUM00 ; \n\t\t} \n\tif ( oPos - myPos != NUM00 ) { \n\t\treturn ( oPos - myPos ) ; \n\t\t} \n\treturn name . compareTo ( o . name ) ; \n\t} \n"}, {"code": "public $F8748 testToString $F72 { \n\treturn super . testToString ( ) ; \n\t} \n"}, {"code": "public static $F96 escapeEasternUnicodeByteStream $F27539 ( origBytes , origString ) { \n\t$F1338 ( origBytes ) if $F9634 ( origBytes ) $F42429 int bytesLen = origBytes . length ; \n\tint bufIndex = NUM00 ; \n\tint strIndex = NUM00 ; \n\t$F39018 ( bytesOut , bytesLen ) while ( _BOOL ) { \n\t\tif $F11983 ( origString , strIndex ) { \n\t\t\tbytesOut . write ( origBytes [ bufIndex ++ ] ) ; \n\t\t\t} \n\t\telse { \n\t\t\tint loByte = origBytes [ bufIndex ] ; \n\t\t\t$F69446 ( loByte ) bytesOut . write ( loByte ) ; \n\t\t\tif ( loByte >= NUM00 ) { \n\t\t\t\tif $F133315 ( bufIndex , bytesLen ) { \n\t\t\t\t\tint hiByte = origBytes [ bufIndex + NUM00 ] ; \n\t\t\t\t\t$F69446 ( hiByte ) bytesOut . write ( hiByte ) ; \n\t\t\t\t\tbufIndex ++ ; \n\t\t\t\t\tif ( hiByte == NUM00 ) $F4050 ( bytesOut , hiByte ) } \n\t\t\t\t} \n\t\t\telse if ( loByte == NUM00 ) { \n\t\t\t\tif $F133315 ( bufIndex , bytesLen ) { \n\t\t\t\t\tint hiByte = origBytes [ bufIndex + NUM00 ] ; \n\t\t\t\t\t$F69446 ( hiByte ) if ( hiByte == NUM00 ) { \n\t\t\t\t\t\t$F25097 ( bytesOut ) $F25097 ( bytesOut ) bufIndex ++ ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tbufIndex ++ ; \n\t\t\t} \n\t\t$F66497 ( bufIndex , bytesLen ) strIndex ++ ; \n\t\t} \n\t$F11316 ( bytesOut ) } \n"}, {"code": "private static StringBuilder dump ( StringBuilder _lbuffer , long value ) { \n\tfor ( $F6268 ( j ) ) { \n\t\t_lbuffer . append ( CHARS [ ( int ) ( value > > SHIFTS [ j ] ) & NUM00 ] ) ; \n\t\t} \n\treturn _lbuffer ; \n\t} \n"}, {"code": "$F1 protected void onMeasure ( int widthMeasureSpec , int heightMeasureSpec ) { \n\tsuper . onMeasure ( widthMeasureSpec , heightMeasureSpec ) ; \n\tint sizeWidth = MeasureSpec . getSize ( widthMeasureSpec ) - getPaddingLeft ( ) - getPaddingRight ( ) ; \n\t$F23132 ( sizeHeight , MeasureSpec , heightMeasureSpec ) $F20444 ( modeWidth , MeasureSpec , widthMeasureSpec ) $F20444 ( modeHeight , MeasureSpec , heightMeasureSpec ) int width = NUM00 ; \n\tint height = getPaddingTop ( ) + getPaddingBottom ( ) ; \n\tint lineWidth = NUM00 ; \n\tint lineHeight = NUM00 ; \n\tint childCount = getChildCount ( ) ; \n\tfor ( $F119 ( i , childCount ) ) { \n\t\tView child = getChildAt ( i ) ; \n\t\tboolean lastChild = i == childCount - NUM00 ; \n\t\tif ( child . getVisibility ( ) == View . GONE ) { \n\t\t\tif ( lastChild ) { \n\t\t\t\t$F19410 ( width , Math , lineWidth ) height += lineHeight ; \n\t\t\t\t} \n\t\t\t$F598 } \n\t\tmeasureChildWithMargins ( child , widthMeasureSpec , lineWidth , heightMeasureSpec , height ) ; \n\t\t$F310049 ( lp , child ) int childWidthMode = MeasureSpec . AT_MOST ; \n\t\tint childWidthSize = sizeWidth ; \n\t\tint childHeightMode = MeasureSpec . AT_MOST ; \n\t\tint childHeightSize = sizeHeight ; \n\t\tif ( lp . width == LayoutParams . MATCH_PARENT ) { \n\t\t\tchildWidthMode = MeasureSpec . EXACTLY ; \n\t\t\tchildWidthSize -= lp . leftMargin + lp . rightMargin ; \n\t\t\t} \n\t\telse if ( lp . width >= NUM00 ) { \n\t\t\tchildWidthMode = MeasureSpec . EXACTLY ; \n\t\t\tchildWidthSize = lp . width ; \n\t\t\t} \n\t\tif ( lp . height >= NUM00 ) { \n\t\t\tchildHeightMode = MeasureSpec . EXACTLY ; \n\t\t\tchildHeightSize = lp . height ; \n\t\t\t} \n\t\telse if ( modeHeight == MeasureSpec . UNSPECIFIED ) { \n\t\t\tchildHeightMode = MeasureSpec . UNSPECIFIED ; \n\t\t\tchildHeightSize = NUM00 ; \n\t\t\t} \n\t\tchild . measure ( MeasureSpec . makeMeasureSpec ( childWidthSize , childWidthMode ) , MeasureSpec . makeMeasureSpec ( childHeightSize , childHeightMode ) ) ; \n\t\tint childWidth = $F239295 ( child , lp ) ; \n\t\tif ( lineWidth + childWidth > sizeWidth ) { \n\t\t\t$F19410 ( width , Math , lineWidth ) lineWidth = childWidth ; \n\t\t\theight += lineHeight ; \n\t\t\tlineHeight = child . getMeasuredHeight ( ) + lp . topMargin + lp . bottomMargin ; \n\t\t\t} \n\t\telse { \n\t\t\tlineWidth += childWidth ; \n\t\t\tlineHeight = Math . max ( lineHeight , child . getMeasuredHeight ( ) + lp . topMargin + lp . bottomMargin ) ; \n\t\t\t} \n\t\tif ( lastChild ) { \n\t\t\t$F19410 ( width , Math , lineWidth ) height += lineHeight ; \n\t\t\t} \n\t\t} \n\twidth += getPaddingLeft ( ) + getPaddingRight ( ) ; \n\tsetMeasuredDimension ( ( modeWidth == MeasureSpec . EXACTLY ) ? sizeWidth : width , ( modeHeight == MeasureSpec . EXACTLY ) ? sizeHeight : height ) ; \n\t} \n"}, {"code": "public UnionMemberDescriptionWithError ( IEObjectDescription delegate , ComposedTypeRef composedTypeRef , IScope [ ] subScopes , boolean writeAccess ) { \n\tsuper ( delegate ) ; \n\tthis . composedTypeRef = composedTypeRef ; \n\tthis . subScopes = subScopes ; \n\tmax = subScopes . length ; \n\tthis . writeAccess = writeAccess ; \n\t} \n"}, {"code": "private void readObject ( ObjectInputStream oos ) throws $F6427 { \n\tiInstant = ( DateMidnight ) oos . readObject ( ) ; \n\tDateTimeFieldType type = ( DateTimeFieldType ) oos . readObject ( ) ; \n\tiField = type . getField ( iInstant . getChronology ( ) ) ; \n\t} \n"}, {"code": "public void generateLootChest ( World world , Random random , BlockPos pos , int min , int max , IBlockState state , ResourceLocation lootTable ) { \n\tworld . setBlockState ( pos , state , NUM00 ) ; \n\tTileEntityChest chest = ( TileEntityChest ) world . getTileEntity ( pos ) ; \n\tif ( chest != null ) chest . setLootTable ( lootTable , random . nextLong ( ) ) ; \n\t} \n"}, {"code": "private void drawAutoHit ( Graphics g , Coords hex ) { \n\tint baseX = ( hex . getX ( ) * $F356083 ( hexSide , zoom , hexSideBySin30 ) ) + leftMargin + hexSide [ zoom ] ; \n\tint baseY = ( ( ( NUM00 * hex . getY ( ) ) + NUM00 + ( hex . getX ( ) % NUM00 ) ) * hexSideByCos30 [ zoom ] ) + topMargin ; \n\t$F86453 ( alt , g ) $F348 ( g , Color ) g . drawOval ( baseX - ( unitSize - NUM00 ) , baseY - ( unitSize - NUM00 ) , ( NUM00 * unitSize ) - NUM00 , ( NUM00 * unitSize ) - NUM00 ) ; \n\tg . drawLine ( baseX - unitSize - NUM00 , baseY , ( baseX - unitSize ) + NUM00 , baseY ) ; \n\tg . drawLine ( baseX + unitSize + NUM00 , baseY , ( baseX + unitSize ) - NUM00 , baseY ) ; \n\tg . drawLine ( baseX , baseY - unitSize - NUM00 , baseX , ( baseY - unitSize ) + NUM00 ) ; \n\tg . drawLine ( baseX , baseY + unitSize + NUM00 , baseX , ( baseY + unitSize ) - NUM00 ) ; \n\tg . setColor ( alt ) ; \n\t} \n"}, {"code": "public void remove $F72 throws RecurrenceRuleException { \n\ttry $F38599 ( rule ) catch ( GenericEntityException e ) { \n\t\tthrow new RecurrenceRuleException $F2808 ( e ) ; \n\t\t} \n\t} \n"}, {"code": "private boolean shouldBeEscaped ( char c ) { \n\treturn c < NUM00 || ( c >= NUM00 && c < NUM00 ) || ( c >= NUM00 && c < NUM00 ) ; \n\t} \n"}, {"code": "public CEventTableMenu ( final JTable table , final List < ITraceEvent > traces ) { \n\taddOpenFunction ( SwingUtilities . getWindowAncestor ( table ) , traces ) ; \n\tadd ( new JMenuItem ( CActionProxy . proxy ( new CSearchTableAction ( SwingUtilities . getWindowAncestor ( table ) , table ) ) ) ) ; \n\tadd ( new CopySelectionAction ( table ) ) ; \n\t} \n"}, {"code": "$F1 public int available $F72 throws IOException { \n\treturn ( outBytes_ . length + inputStream_ . available ( ) ) ; \n\t} \n"}, {"code": "public boolean checkError $F72 { \n\treturn pw . checkError ( ) ; \n\t} \n"}, {"code": "$F32632 ( criteria , createCriteriaInternal , oredCriteria ) "}, {"code": "public void addBugPattern ( BugPattern bugPattern ) $F207 ( bugPatterns , bugPattern ) "}, {"code": "public SpiderGitParser ( SpiderParam params ) { \n\tsuper ( ) ; \n\tthis . params = params ; \n\t} \n"}, {"code": "public void onRetry ( int retryNo ) { \n\t$F118527 ( Log , LOG_TAG , String , retryNo ) } \n"}, {"code": "protected void analyzeDtoSetterMethod ( Method method , MethodModel methodModel ) { \n\tmethodModel . setSetter ( _BOOL ) ; \n\tType fieldType = method . getGenericParameterTypes ( ) [ NUM00 ] ; \n\tString fieldName = getSetterFieldName ( method ) ; \n\tfieldAttributes . put ( fieldName , fieldType ) ; \n\tmethodModel . setFieldName ( fieldName ) ; \n\tmethodModel . setFieldType ( convertType ( fieldType ) ) ; \n\t} \n"}, {"code": "public static String loadLastColor ( Context context ) { \n\ttry { \n\t\tSharedPreferences sharedPreferences = context . getSharedPreferences ( NUM00 , Context . MODE_PRIVATE ) ; \n\t\tString s = sharedPreferences . getString ( SP_KEY_LAST_COLOR , null ) ; \n\t\tColor . parseColor ( s ) ; \n\t\treturn s ; \n\t\t} \n\t$F84580 ( e ) } \n"}, {"code": "public BevelBorder ( int bevelType , Color highlight , Color shadow ) { \n\tthis ( bevelType , highlight . brighter ( ) , highlight , shadow , shadow . brighter ( ) ) ; \n\t} \n"}, {"code": "protected final void refreshSessionLayer ( final Location location ) { \n\tif ( ! mRefreshSessionPending && isVisible ( ) ) { \n\t\t$F13527 ( Log , TAG ) mRefreshSessionPending = _BOOL ; \n\t\ttriggerSessionObjectsUpdate ( null ) ; \n\t\t$F3224 ( sessionObjectsRefreshTime , System ) sessionObjectsRefreshedAt = location ; \n\t\t} \n\telse if $F931 ( isVisible ) $F101659 ( Log , TAG ) else $F101659 ( Log , TAG ) } \n"}, {"code": "public static int mDateGap ( String dayName ) { \n\tLog . d ( NUM00 , dayName ) ; \n\tif $F3057 ( dayName ) $F1083 else if $F3057 ( dayName ) $F1083 else if $F3057 ( dayName ) $F1083 else if $F3057 ( dayName ) $F1083 else if $F3057 ( dayName ) $F1083 else if $F3057 ( dayName ) $F1083 else $F1083 } \n"}, {"code": "public static String removeAdditionalParty ( HttpServletRequest request , HttpServletResponse response ) { \n\tShoppingCart cart = getCartObject ( request ) ; \n\t$F10362 ( partyId , request ) String roleTypeId [ ] = request . getParameterValues ( NUM00 ) ; \n\t$F31410 ( eventList ) $F27861 ( locale , UtilHttp , request ) int i ; \n\tif ( UtilValidate . isEmpty ( partyId ) || roleTypeId . length < NUM00 ) { \n\t\trequest . setAttribute ( $F71253 ( UtilProperties , resource_error , locale ) ) ; \n\t\t$F1278 } \n\tif ( request . getAttribute ( NUM00 ) != null ) { \n\t\t$F3803 msg = UtilGenerics . checkList ( request . getAttribute ( NUM00 ) ) ; \n\t\teventList . addAll ( msg ) ; \n\t\t} \n\tfor ( $F6929 ( i , roleTypeId ) ) { \n\t\ttry { \n\t\t\tcart . removeAdditionalPartyRole ( partyId , roleTypeId [ i ] ) ; \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\tDebug . logInfo ( e . getLocalizedMessage ( ) , module ) ; \n\t\t\teventList . add ( e . getLocalizedMessage ( ) ) ; \n\t\t\t} \n\t\t} \n\t$F152467 ( request ) $F34765 ( request , eventList ) $F1278 } \n"}, {"code": "public Map $F24639 crop ( final Map $F24639 original ) { \n\tMap $F24639 result = new HashMap $F24639 $F716 ( original ) ; \n\tfor ( Map . Entry $F24639 entry : original . entrySet ( ) ) { \n\t\t$F3477 ( key , entry ) if ( null == key ) $F1448 $F806 value = entry . getValue ( ) ; \n\t\t$F806 convertedValue ; \n\t\tif ( null == value ) { \n\t\t\t$F384 ( convertedValue ) convertedValue [ NUM00 ] = NUM00 ; \n\t\t\t} \n\t\telse { \n\t\t\tboolean croppingWasNeeded = _BOOL ; \n\t\t\tconvertedValue = value ; \n\t\t\tfor ( $F151668 ( i , l , value ) ) { \n\t\t\t\tString curValue = value [ i ] ; \n\t\t\t\tString croppingResult = crop ( curValue ) ; \n\t\t\t\tif ( ( curValue != croppingResult ) & ! croppingWasNeeded ) { \n\t\t\t\t\tcroppingWasNeeded = _BOOL ; \n\t\t\t\t\t$F91800 ( convertedValue , value ) ; \n\t\t\t\t\t$F135 ( System , value , convertedValue , i ) convertedValue [ i ] = croppingResult ; \n\t\t\t\t\t} \n\t\t\t\tif ( croppingWasNeeded ) { \n\t\t\t\t\tconvertedValue [ i ] = croppingResult ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tresult . put ( key , convertedValue ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "$F1 int lookForSelectablePosition ( int position , boolean lookDown ) { \n\tfinal ListAdapter adapter = mAdapter ; \n\tif ( adapter == null || isInTouchMode ( ) ) { \n\t\treturn INVALID_POSITION ; \n\t\t} \n\tfinal int count = adapter . getCount ( ) ; \n\tif ( ! mAreAllItemsSelectable ) { \n\t\tif ( lookDown ) { \n\t\t\t$F34970 ( position , Math ) while ( position < count && ! adapter . isEnabled ( position ) ) { \n\t\t\t\tposition ++ ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\t$F72086 ( position , Math , count ) while ( position >= NUM00 && ! adapter . isEnabled ( position ) ) { \n\t\t\t\tposition -- ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( position < NUM00 || position >= count ) { \n\t\t\treturn INVALID_POSITION ; \n\t\t\t} \n\t\treturn position ; \n\t\t} \n\telse { \n\t\tif ( position < NUM00 || position >= count ) { \n\t\t\treturn INVALID_POSITION ; \n\t\t\t} \n\t\treturn position ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void deleteBCVHelperVolume ( StorageSystem storageSystem , Volume volume ) throws Exception { \n\t_log . info ( String . format ( NUM00 , storageSystem . getId ( ) , volume . getId ( ) ) ) ; \n\ttry { \n\t\tString deviceName = volume . getNativeId ( ) ; \n\t\t$F57196 ( deviceNameWithoutLeadingZeros , deviceName ) String query = String . format ( NUM00 , SmisConstants . CP_ELEMENT_NAME , SmisConstants . CP_DEVICE_ID , SmisConstants . CP_ELEMENT_NAME , deviceNameWithoutLeadingZeros ) ; \n\t\tString queryLanguage = NUM00 ; \n\t\tList $F271595 bcvVolumeInstanceList = _helper . executeQuery ( storageSystem , query , queryLanguage ) ; \n\t\tif $F4251 ( bcvVolumeInstanceList ) { \n\t\t\tquery = String . format ( NUM00 , SmisConstants . CP_ELEMENT_NAME , SmisConstants . CP_DEVICE_ID , SmisConstants . CP_ELEMENT_NAME , deviceName ) ; \n\t\t\tbcvVolumeInstanceList = _helper . executeQuery ( storageSystem , query , queryLanguage ) ; \n\t\t\t} \n\t\tString elementName = null ; \n\t\tString nativeId = null ; \n\t\tCIMInstance bcvVolumeInstance = null ; \n\t\tif $F1032 ( bcvVolumeInstanceList ) { \n\t\t\t$F36986 ( bcvVolumeInstance , bcvVolumeInstanceList ) elementName = CIMPropertyFactory . getPropertyValue ( bcvVolumeInstance , SmisConstants . CP_ELEMENT_NAME ) ; \n\t\t\tnativeId = CIMPropertyFactory . getPropertyValue ( bcvVolumeInstance , SmisConstants . CP_DEVICE_ID ) ; \n\t\t\t$F124174 ( _log , String , elementName , nativeId ) } \n\t\telse { \n\t\t\t_log . warn ( String . format ( NUM00 , volume . getId ( ) , volume . getNativeId ( ) ) ) ; \n\t\t\t$F665 } \n\t\t_log . info ( String . format ( NUM00 + nativeId ) ) ; \n\t\t$F806 nativeIds = $F8640 ( nativeId ) ; \n\t\tCIMObjectPath configSvcPath = _cimPath . getConfigSvcPath ( storageSystem ) ; \n\t\t$F50603 inArgs = _helper . getDeleteVolumesInputArguments ( storageSystem , nativeIds ) ; \n\t\t$F50610 ( outArgs ) String returnElementsMethod ; \n\t\tif ( storageSystem . getUsingSmis80 ( ) ) { \n\t\t\treturnElementsMethod = SmisConstants . RETURN_ELEMENTS_TO_STORAGE_POOL ; \n\t\t\t} \n\t\telse { \n\t\t\treturnElementsMethod = SmisConstants . EMC_RETURN_TO_STORAGE_POOL ; \n\t\t\t} \n\t\t_helper . invokeMethodSynchronously ( storageSystem , configSvcPath , returnElementsMethod , inArgs , outArgs , null ) ; \n\t\t_log . info ( String . format ( NUM00 + nativeId ) ) ; \n\t\t} \n\tcatch ( Exception ex ) { \n\t\t_log . error ( String . format ( NUM00 , storageSystem . getId ( ) , volume . getId ( ) ) ) ; \n\t\t} \n\t} \n"}, {"code": "public void populateBottomTabItems ( $F4170 BottomTabsBuilder builder ) { \n\tif ( mContainer . getChildCount ( ) >= MIN_BOTTOM_NAVIGATION_ITEMS ) { \n\t\tcheckBottomItemGuidelines ( mContainer . getChildCount ( ) ) ; \n\t\t} \n\tList < BottomNavigationItem > build = builder . build ( ) ; \n\tfor ( $F2277 ( i , build ) ) { \n\t\tBottomNavigationItem item = build . get ( i ) ; \n\t\titem . setPosition ( i ) ; \n\t\taddBottomNavigationItem ( item ) ; \n\t\t} \n\tupdateBottomNavViews ( ) ; \n\tselectTabView ( ) ; \n\t} \n"}, {"code": "public final int skipBytes ( int count ) throws $F3258 { \n\tint skipped = NUM00 ; \n\tlong skip ; \n\twhile ( skipped < count && ( skip = in . skip ( count - skipped ) ) != NUM00 ) { \n\t\tskipped += skip ; \n\t\t} \n\treturn skipped ; \n\t} \n"}, {"code": "public GeneralAndersonDarlingTest ( $F31488 data , RealDistribution dist ) { \n\t$F18045 ( dist ) this . dist = dist ; \n\tCollections . sort ( data ) ; \n\tthis . data = data ; \n\trunTest ( ) ; \n\t} \n"}, {"code": "private final void insert ( Object text ) { \n\tbuf . insert ( $F1092 ( buf ) , NUM00 ) ; \n\tbuf . insert ( $F1092 ( buf ) , text ) ; \n\t} \n"}, {"code": "public static void splitTextures ( File destination , File texturePack , double scale , boolean alphas , ProgressCallback progress ) throws Exception { \n\t$F19273 ( destination ) $F9472 ( Log , destination ) if $F224313 ( destination ) { \n\t\tif $F3428 ( destination ) $F11388 if $F70667 ( destination ) $F11388 } \n\tgetTextures ( texturePack , scale , progress , alphas , _BOOL , destination ) ; \n\t} \n"}, {"code": "public void testBuilder_RootOnConstruct_MultipleAppends $F72 { \n\tSQLException root = new SQLException $F72 ; \n\tList < SQLException > additionalExceptions = new ArrayList < SQLException > $F72 ; \n\tfor ( $F34659 ( count ) ) { \n\t\tadditionalExceptions . add ( new SQLException $F59159 ( Integer , count ) ) ; \n\t\t} \n\tSQLExceptionChainBuilder < SQLException > builder = new SQLExceptionChainBuilder < SQLException > ( root ) ; \n\tfor ( SQLException ex : additionalExceptions ) $F288 ( builder , ex ) assertTrue ( NUM00 , builder . hasException ( ) ) ; \n\tSQLException resultException = builder . getException ( ) ; \n\tassertSame ( NUM00 , root , resultException ) ; \n\tcheckExceptionChain ( resultException , additionalExceptions ) ; \n\t} \n"}, {"code": "protected synchronized String nextCnxKey $F72 { \n\tif ( connectionsCounter == Integer . MAX_VALUE ) connectionsCounter = NUM00 ; \n\tconnectionsCounter ++ ; \n\tint randLong = random . nextInt ( Integer . MAX_VALUE ) ; \n\treturn connectionsCounter + ( randLong + NUM00 + ID_SUFFIX ) ; \n\t} \n"}, {"code": "public static boolean copyFileSafe ( final Path srcFile , final Path destFile ) throws IOException $F19580 ( copyFileSafe , srcFile , destFile , _BOOL ) "}, {"code": "public static boolean isHeader ( Header header ) { \n\tString xten = header . getStringValue ( XTENSION ) ; \n\t$F1933 ( xten , _BOOL ) $F1382 ( xten ) return xten . equals ( XTENSION_BINTABLE ) || xten . equals ( NUM00 ) ; \n\t} \n"}, {"code": "final void putFloat ( int offset , float value ) { \n\tunsafe . putFloat ( offset + address , value ) ; \n\t} \n"}, {"code": "public void doctypeDecl ( String rootElement , String publicId , String systemId , Augmentations augs ) throws XNIException { \n\tfInDTD = _BOOL ; \n\ttry { \n\t\tif ( fLexicalHandler != null ) { \n\t\t\tfLexicalHandler . startDTD ( rootElement , publicId , systemId ) ; \n\t\t\t} \n\t\t} \n\t$F122277 ( e ) if ( fDeclHandler != null ) { \n\t\tfDeclaredAttrs = new SymbolHash $F72 ; \n\t\t} \n\t} \n"}, {"code": "$F1219 static OMAEntry parseOMAEntry ( String entry ) { \n\t$F1384 ( index , entry ) long downloadId = Long . parseLong ( entry . substring ( NUM00 , index ) ) ; \n\treturn new OMAEntry ( downloadId , entry . substring ( index + NUM00 ) ) ; \n\t} \n"}, {"code": "public void parse $F72 throws IOException { \n\tlong length = NUM00 ; \n\ttry $F57332 ( length , file ) catch ( IOException e ) $F14525 try $F1941 ( parse , length ) catch ( IOException e ) $F14525 } \n"}, {"code": "public void test_SelectUnionItself $F72 throws SQLException { \n\tString sql = NUM00 + NUM00 + DatabaseCreator . CUSTOMERS_TABLE + NUM00 + DatabaseCreator . CUSTOMERS_TABLE + NUM00 + NUM00 + NUM00 ; \n\t$F15328 ( result , statement , sql ) $F397346 value = new $F397346 $F72 ; \n\tvalue . put ( NUM00 , NUM00 ) ; \n\tvalue . put ( NUM00 , NUM00 ) ; \n\tvalue . put ( NUM00 , NUM00 ) ; \n\twhile $F1682 ( result ) { \n\t\t$F15339 ( key , result ) $F21024 ( val , result ) $F15343 ( assertTrue , value , key ) assertEquals ( NUM00 , value . get ( key ) , val ) ; \n\t\tvalue . remove ( key ) ; \n\t\t} \n\t$F15351 ( assertTrue , value ) $F59 ( result ) } \n"}, {"code": "public ReflectiveProperty ( $F20474 propertyHolder , $F197000 valueType , String name ) { \n\tsuper ( valueType , name ) ; \n\t$F226746 ( firstLetter , Character , name ) $F28924 ( theRest , name ) String capitalizedName = firstLetter + theRest ; \n\tString getterName = PREFIX_GET + capitalizedName ; \n\ttry $F226752 ( mGetter , propertyHolder , getterName ) catch ( NoSuchMethodException e ) { \n\t\ttry $F226756 ( mGetter , propertyHolder , getterName , _BOOL ) catch ( NoSuchMethodException e2 ) { \n\t\t\tgetterName = PREFIX_IS + capitalizedName ; \n\t\t\ttry $F226752 ( mGetter , propertyHolder , getterName ) catch ( NoSuchMethodException e3 ) { \n\t\t\t\ttry $F226756 ( mGetter , propertyHolder , getterName , _BOOL ) catch ( NoSuchMethodException e4 ) { \n\t\t\t\t\ttry { \n\t\t\t\t\t\tmField = propertyHolder . getField ( name ) ; \n\t\t\t\t\t\t$F42606 ( fieldType , mField ) $F226761 ( typesMatch , valueType , fieldType ) $F665 } \n\t\t\t\t\tcatch ( NoSuchFieldException e5 ) { \n\t\t\t\t\t\tthrow new NoSuchPropertyException ( NUM00 + NUM00 + name ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tClass getterType = mGetter . getReturnType ( ) ; \n\t$F226761 ( typesMatch , valueType , getterType ) String setterName = PREFIX_SET + capitalizedName ; \n\ttry { \n\t\tmSetter = propertyHolder . getDeclaredMethod ( setterName , getterType ) ; \n\t\tmSetter . setAccessible ( _BOOL ) ; \n\t\t} \n\t$F110500 } \n"}, {"code": "public CFunctionTypePanel ( final ListenerProvider < IFilterDialogListener > listeners ) { \n\t$F9898 ( super ) m_listeners = listeners ; \n\t$F40901 ( innerPanel ) innerPanel . add ( buildRow ( NUM00 , m_normalFunctionCheckbox ) ) ; \n\tinnerPanel . add ( buildRow ( NUM00 , m_importedFunctionCheckbox ) ) ; \n\tinnerPanel . add ( buildRow ( NUM00 , m_libraryFunctionCheckbox ) ) ; \n\tinnerPanel . add ( buildRow ( NUM00 , m_thunkFunctionCheckbox ) ) ; \n\tinnerPanel . add ( buildRow ( NUM00 , m_adjustorFunctionCheckbox ) ) ; \n\tadd ( innerPanel , BorderLayout . NORTH ) ; \n\tsetBorder ( new TitledBorder $F580 ) ; \n\t} \n"}, {"code": "public DragContext ( Node draggable ) { \n\tthis . node = draggable ; \n\tthis . goToForegroundOnContact = _BOOL ; \n\tthis . touchId = NULL_ID ; \n\tthis . activated = _BOOL ; \n\tthis . dragLimits = new BoundingBox ( NUM00 , NUM00 , Integer . MAX_VALUE , Integer . MAX_VALUE ) ; \n\tthis . dragThreshold = NUM00 ; \n\tthis . dragStarted = _BOOL ; \n\tthis . relocateThreshold = NUM00 ; \n\tthis . dragInitAction = null ; \n\tthis . dragFinishAction = null ; \n\ttouchHandler = null ; \n\tmouseHandler = null ; \n\tdraggable . addEventHandler ( TouchEvent . ANY , touchHandler ) ; \n\tdraggable . addEventHandler ( MouseEvent . ANY , mouseHandler ) ; \n\t} \n"}, {"code": "protected $F5958 openCertificate ( File certificateFile ) { \n\ttry { \n\t\t$F4647 ( is , certificateFile ) return $F142678 ( openCertificate , is , certificateFile ) ; \n\t\t} \n\tcatch ( FileNotFoundException ex ) { \n\t\tJOptionPane . showMessageDialog ( frame , $F36702 ( MessageFormat , res , certificateFile ) , res . getString ( NUM00 ) , JOptionPane . WARNING_MESSAGE ) ; \n\t\t$F1274 } \n\t} \n"}, {"code": "public ShapeTileSimplex ( PlaLineIntAlist p_line_alist ) { \n\tlines_list = new ArrayList $F66714 $F716 ( p_line_alist ) ; \n\tfor ( PlaLineInt a_line : p_line_alist ) lines_list . add ( a_line ) ; \n\tCollections . sort ( lines_list ) ; \n\t} \n"}, {"code": "public ProperFractionFormat ( NumberFormat format ) { \n\tthis ( format , $F195242 ( format ) , $F195242 ( format ) ) ; \n\t} \n"}, {"code": "private File createCaptureFile ( int encodingType ) $F73165 ( createCaptureFile , encodingType ) "}, {"code": "public $F3789 extractMainSetJacobian ( final ODEState state ) { \n\tfinal $F1986 p = state . getSecondaryState ( index ) ; \n\tfinal $F3789 dYdY0 = new double [ jode . getDimension ( ) ] [ jode . getDimension ( ) ] ; \n\tint j = NUM00 ; \n\tfor ( int i = NUM00 ; \n\ti < jode . getDimension ( ) ; \n\ti ++ ) { \n\t\tSystem . arraycopy ( p , j , dYdY0 [ i ] , NUM00 , jode . getDimension ( ) ) ; \n\t\tj += jode . getDimension ( ) ; \n\t\t} \n\treturn dYdY0 ; \n\t} \n"}, {"code": "public static String byteToHexString $F97 ( byteArray ) { \n\t$F83 ( builder ) for ( $F1139 ( i , byteArray ) ) { \n\t\tint byteCode = byteArray [ i ] & NUM00 ; \n\t\tif ( byteCode < NUM00 ) { \n\t\t\tbuilder . append ( NUM00 ) ; \n\t\t\t} \n\t\t$F1463 ( builder , Integer , byteCode ) } \n\t$F92 ( builder ) } \n"}, {"code": "public static void assertNotEqual ( Object expected , Object actual ) { \n\tif ( verbose ) { \n\t\t$F25590 ( log , expected , actual ) } \n\tTestUtils . assertBool ( ! expected . equals ( actual ) ) ; \n\t} \n"}, {"code": "private boolean isEmpty ( String value ) $F85941 ( value ) "}, {"code": "private void disposeCodec ( IoSession session ) { \n\tdisposeEncoder ( session ) ; \n\tdisposeDecoder ( session ) ; \n\tdisposeDecoderOut ( session ) ; \n\t} \n"}, {"code": "public static ObjectStreamClass lookupAny $F60993 ( cl ) $F4915 ( lookupStreamClass , cl ) "}, {"code": "public static void main $F4374 ( args ) { \n\ttry { \n\t\tint $F15194 ( serverPort , Integer , System ) ; \n\t\tTTransport transport ; \n\t\ttransport = new TFramedTransport ( new TSocket ( NUM00 , serverPort ) ) ; \n\t\t$F5837 ( transport ) TProtocol protocol = new TBinaryProtocol ( transport ) ; \n\t\t$F15205 client = new $F15205 ( protocol ) ; \n\t\tsendPackets ( client , $F15211 , OFMessageType . PACKET_IN , _BOOL ) ; \n\t\t$F980 ( log ) client . terminateSession ( NUM00 ) ; \n\t\t$F59 ( transport ) } \n\tcatch ( TException x ) $F302 ( x ) } \n"}, {"code": "public ConfigurationParser ( boolean verify , ClassLoader loader ) throws ParserConfigurationException { \n\t$F33943 ( factory , DocumentBuilderFactory ) factory . setValidating ( verify ) ; \n\tfactory . setNamespaceAware ( _BOOL ) ; \n\tfactory . setExpandEntityReferences ( _BOOL ) ; \n\tfactory . setCoalescing ( _BOOL ) ; \n\t$F6281 ( builder , factory ) if ( verify ) builder . setErrorHandler ( new XMLErrorHandler $F72 ) ; \n\t$F1149 ( loader ) } \n"}, {"code": "TestEnvironment ( SystemTestEnvironment systemTestEnvironment , Path workingDir , Path sourceDir , Path classDir , Path jacocoDir ) { \n\tthis . systemTestEnvironment = systemTestEnvironment ; \n\tthis . workingDir = workingDir ; \n\tthis . sourceDir = sourceDir ; \n\tthis . classDir = classDir ; \n\tthis . jacocoDir = jacocoDir ; \n\tthis . testClassPath = systemTestEnvironment . classpath + NUM00 + classDir . toString ( ) ; \n\t} \n"}, {"code": "public Application createJmxApplicationInteractive ( String connectionString , String displayName , EnvironmentProvider provider , boolean persistent ) $F16525 ( createJmxApplicationInteractive , connectionString , displayName , provider , persistent , _BOOL ) "}, {"code": "public static synchronized void removeProvider ( int providerNumber ) { \n\tProvider p = providers . remove ( providerNumber - NUM00 ) ; \n\t$F139889 ( providersNames , p ) setNeedRefresh ( ) ; \n\t} \n"}, {"code": "public Object referenceInsert ( String reference , Object value ) { \n\tString s = null ; \n\tif ( value != null ) { \n\t\ts = REFERENCE_VALUE ; \n\t\t} \n\telse { \n\t\t$F19677 ( reference , s , NO_REFERENCE_VALUE ) } \n\treturn s ; \n\t} \n"}, {"code": "public GraphicComponent ( GraphicAttribute graphic , Decoration decorator , $F2027 charsLtoV , $F96 levels , int start , int limit , AffineTransform baseTx ) { \n\tif ( limit <= start ) $F825 this . graphic = graphic ; \n\tthis . graphicAdvance = graphic . getAdvance ( ) ; \n\tthis . decorator = decorator ; \n\tthis . cm = createCoreMetrics ( graphic ) ; \n\tthis . baseTx = baseTx ; \n\tinitLocalOrdering ( charsLtoV , levels , start , limit ) ; \n\t} \n"}, {"code": "public static boolean hasValidUserInContext ( SecurityContext securityContext ) { \n\tif ( ( securityContext != null ) && ( securityContext . getUserPrincipal ( ) instanceof StorageOSUser ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\telse { \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "private void handleEndOfStream ( State state , InnerState innerState ) throws StopRequest { \n\t$F57044 ( mInfo , innerState ) mDB . updateDownload ( mInfo ) ; \n\tboolean lengthMismatched = ( innerState . mHeaderContentLength != null ) && ( innerState . mBytesSoFar != Integer . parseInt ( innerState . mHeaderContentLength ) ) ; \n\tif ( lengthMismatched ) { \n\t\tif ( cannotResume ( innerState ) ) { \n\t\t\tthrow new StopRequest ( DownloaderService . STATUS_CANNOT_RESUME , NUM00 ) ; \n\t\t\t} \n\t\telse { \n\t\t\tthrow new StopRequest ( getFinalStatusForHttpError ( state ) , NUM00 ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void add ( String keyword , byte id ) { \n\tint key = getStringMapKey ( keyword ) ; \n\tmap [ key ] = new Keyword ( keyword . toCharArray ( ) , id , map [ key ] ) ; \n\t} \n"}, {"code": "public String toString $F72 { \n\treturn m_Formatter . format ( getStamp ( ) ) ; \n\t} \n"}, {"code": "private String secondsToTime ( int seconds ) { \n\tString time = NUM00 ; \n\tString minutesText = String . valueOf ( seconds / NUM00 ) ; \n\t$F89053 ( minutesText ) String secondsText = String . valueOf ( seconds % NUM00 ) ; \n\t$F89053 ( secondsText ) time = minutesText + NUM00 + secondsText ; \n\treturn time ; \n\t} \n"}, {"code": "private void processNewPort ( DatapathId sw , OFPort p ) { \n\t$F153093 ( isLinkDiscoverySuppressed , sw , p ) $F2579 ( iofSwitch , switchService , sw ) $F2329 ( iofSwitch ) NodePortTuple npt = new NodePortTuple ( sw , p ) ; \n\tdiscover ( sw , p ) ; \n\taddToQuarantineQueue ( npt ) ; \n\t} \n"}, {"code": "public AmqpReceiver ( AmqpSession session , String address , String receiverId ) { \n\tif $F171402 ( address ) $F825 this . userSpecifiedSource = null ; \n\tthis . session = session ; \n\tthis . address = address ; \n\tthis . receiverId = receiverId ; \n\t} \n"}, {"code": "private void notifyServiceMap ( Object eventSource , long eventID , long seqNo , ServiceID sid , ServiceItem item , int transition ) { \n\t$F8249 ( eventSource ) synchronized ( serviceIdMap ) { \n\t\tProxyReg reg = null ; \n\t\tEventReg eReg = null ; \n\t\tSet set = eventRegMap . entrySet ( ) ; \n\t\t$F10531 ( iter , set ) while $F2921 ( iter ) { \n\t\t\t$F53089 e = ( $F53089 ) iter . next ( ) ; \n\t\t\teReg = ( EventReg ) e . getValue ( ) ; \n\t\t\tif ( eventSource . equals ( eReg . source ) && ( eventID == eReg . eventID ) ) { \n\t\t\t\treg = ( ProxyReg ) e . getKey ( ) ; \n\t\t\t\t$F597 } \n\t\t\t} \n\t\t$F8249 ( reg ) long prevSeqNo = eReg . seqNo ; \n\t\teReg . seqNo = seqNo ; \n\t\tCacheTask t ; \n\t\tif ( seqNo == ( prevSeqNo + NUM00 ) ) { \n\t\t\tt = new NotifyEventTask ( lookupCacheClassLoader , reg , sid , item , transition , taskSeqN ++ ) ; \n\t\t\t} \n\t\telse { \n\t\t\tt = new LookupTask ( lookupCacheClassLoader , reg , taskSeqN ++ ) ; \n\t\t\tif ( logger . isLoggable ( Levels . HANDLED ) ) { \n\t\t\t\tString msg = $F34354 + NUM00 ; \n\t\t\t\t$F131 params = new Object [ ] { \n\t\t\t\t\treg == null ? null : reg . proxy , item . service , sid , eventSource , new Long ( eventID ) , new Long ( prevSeqNo ) , new Long ( seqNo ) } \n\t\t\t\t; \n\t\t\t\tlogger . log ( Levels . HANDLED , msg , params ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tcacheTaskMgr . add ( t ) ; \n\t\t} \n\t} \n"}, {"code": "$F61852 public void test_getColumnsTableWithNoCatalogSchema $F72 throws SQLException { \n\ttry { \n\t\tResultSet noSchemaTable = meta . getColumns ( NUM00 , NUM00 , DatabaseCreator . TEST_TABLE1 , NUM00 ) ; \n\t\tassertNotNull ( noSchemaTable ) ; \n\t\tnoSchemaTable . last ( ) ; \n\t\t$F8267 ( size , noSchemaTable ) assertEquals ( NUM00 , NUM00 , size ) ; \n\t\t} \n\t$F32310 ( fail , e ) try { \n\t\tResultSet noSchemaTable = meta . getColumns ( NUM00 , NUM00 , DatabaseCreator . TEST_TABLE1 , NUM00 ) ; \n\t\tassertNotNull ( noSchemaTable ) ; \n\t\tnoSchemaTable . last ( ) ; \n\t\t$F8267 ( size , noSchemaTable ) assertEquals ( NUM00 , NUM00 , size ) ; \n\t\t} \n\t$F32310 ( fail , e ) try { \n\t\tResultSet noSchemaTable = meta . getColumns ( $F61861 ) ; \n\t\tassertNotNull ( noSchemaTable ) ; \n\t\tnoSchemaTable . last ( ) ; \n\t\t$F8267 ( size , noSchemaTable ) assertEquals ( NUM00 , NUM00 , size ) ; \n\t\t} \n\t$F32310 ( fail , e ) $F59 ( conn ) try { \n\t\tmeta . getColumns ( null , null , DatabaseCreator . TEST_TABLE1 , NUM00 ) ; \n\t\tfail ( NUM00 ) ; \n\t\t} \n\t$F31184 } \n"}, {"code": "public static byte readByte $F72 { \n\treturn scanner . nextByte ( ) ; \n\t} \n"}, {"code": "$F37100 ( fieldId , SUCCESS ) "}, {"code": "$F3874 ( tag , msg , args , sLevel , LEVEL_DEBUG , String , Log ) "}, {"code": "public void clearValueLocal ( String columnHeader ) { \n\t$F127129 ( values , columnHeader ) } \n"}, {"code": "public List closeBucketAdvisors $F72 { \n\tList primariesHeld = Collections . EMPTY_LIST ; \n\tif ( this . buckets != null ) { \n\t\tfor ( int i = NUM00 ; \n\t\ti < this . buckets . length ; \n\t\ti ++ ) { \n\t\t\tProxyBucketRegion pbr = this . buckets [ i ] ; \n\t\t\tif ( pbr . isPrimary ( ) ) { \n\t\t\t\tif ( primariesHeld == Collections . EMPTY_LIST ) $F13242 ( primariesHeld ) $F269561 ( primariesHeld , Integer , i ) } \n\t\t\t$F59 ( pbr ) } \n\t\t} \n\treturn primariesHeld ; \n\t} \n"}, {"code": "public boolean isMacMuted ( final String mac ) { \n\tfinal long muteTill = getMacUnmuteTime ( mac ) ; \n\treturn muteTill > System . currentTimeMillis ( ) ; \n\t} \n"}, {"code": "public abstract void insertSpillBefore ( Instruction s , Register r , byte type , int location ) ; \n"}, {"code": "static public Test suite $F72 { \n\treturn ProxySuiteHelper . suiteWhenStandalone ( TestSparqlUpdate . class , NUM00 , new LinkedHashSet < BufferMode > ( Arrays . asList ( new BufferMode [ ] { \n\t\tBufferMode . Transient , BufferMode . DiskWORM , BufferMode . MemStore , BufferMode . DiskRW } \n\t) ) , TestMode . quads ) ; \n\t} \n"}, {"code": "private synchronized void cleanupIsComplexTypeAttribute $F72 { \n\tfirstAttribute = null ; \n\t$F725 ( remainingAttributes ) isComplexTypeAttribute = _BOOL ; \n\t} \n"}, {"code": "public static String leftTrim ( final String value ) { \n\tvalidate ( value , NULL_ <missing ';'> NUM00 <missing ';'> $F38386 NULL_ NUM00 <missing ';'> $F38387 ; \n\t$F8479 ( value ) } \n"}, {"code": "public float polarAngle $F72 { \n\treturn ( float ) Math . toDegrees ( angle ( ) ) ; \n\t} \n"}, {"code": "public String checkParamsNonNegative $F72 { \n\tString ret = NUM00 ; \n\tif ( param1 < NUM00 ) { \n\t\tret = ret . concat ( pdf . getParam1Name ( ) + NUM00 ) ; \n\t\t} \n\tif ( param2 < NUM00 ) { \n\t\tret = ret . concat ( pdf . getParam2Name ( ) + NUM00 ) ; \n\t\t} \n\tif ( upperBound < NUM00 ) $F54816 ( ret ) if ( lowerBound < NUM00 ) $F54816 ( ret ) return ret ; \n\t} \n"}, {"code": "public static boolean validate ( String str , String regEx , Debug tmpDebug ) { \n\tdebug = tmpDebug ; \n\tif $F6036 ( str ) { \n\t\t$F18126 ( debug ) return _BOOL ; \n\t\t} \n\t$F7782 ( value , str ) int count = value . length ; \n\t$F19850 ( hSet ) $F14497 ( st , regEx , SEPERATOR ) $F44279 ( st , hSet ) $F10531 ( itr , hSet ) while $F2921 ( itr ) { \n\t\t$F2778 ( obj , itr ) if ( process ( value , obj , NUM00 , count ) > - NUM00 ) { \n\t\t\t$F18126 ( debug ) return _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static float turbulence2 $F2267 ( x , y , octaves ) { \n\tfloat t = NUM00 ; \n\tfor ( float f = NUM00 ; \n\tf <= octaves ; \n\tf *= NUM00 ) t += Math . abs ( noise2 ( f * x , f * y ) ) / f ; \n\treturn t ; \n\t} \n"}, {"code": "public void addMapObject ( InternalMapObject mapObject ) $F207 ( mapObjects , mapObject ) "}, {"code": "public List < MockResponse > enqueue ( String ... paths ) { \n\t$F1338 ( paths ) List < MockResponse > $F204 ( mockResponseList ) ; \n\tfor ( String path : paths ) { \n\t\tFixture fixture = Fixture . parseFrom ( path , parser ) ; \n\t\tMockResponse mockResponse = new MockResponse $F72 ; \n\t\tif ( fixture . statusCode != NUM00 ) { \n\t\t\tmockResponse . setResponseCode ( fixture . statusCode ) ; \n\t\t\t} \n\t\tif ( fixture . body != null ) { \n\t\t\tmockResponse . setBody ( fixture . body ) ; \n\t\t\t} \n\t\tif ( fixture . delay != NUM00 ) { \n\t\t\tmockWebServer . setDispatcher ( new DelayedDispatcher ( fixture . delay , TimeUnit . MILLISECONDS ) ) ; \n\t\t\t} \n\t\tif ( fixture . headers != null ) { \n\t\t\tfor ( String header : fixture . headers ) { \n\t\t\t\tmockResponse . addHeader ( header ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tmockWebServer . enqueue ( mockResponse ) ; \n\t\tmockResponseList . add ( mockResponse ) ; \n\t\t} \n\treturn mockResponseList ; \n\t} \n"}, {"code": "$F1 public void endOfStream $F72 throws AdeException { \n\tdouble minProb = NUM00 ; \n\t$F85331 ( m_totalIntervalCount ) for ( Entry < String , BernoulliScore . MsgData > entry : m_msgData . entrySet ( ) ) { \n\t\tfinal FullBernoulliMsgData data = ( FullBernoulliMsgData ) entry . getValue ( ) ; \n\t\tdata . m_prob = ( ( double ) data . m_count + NUM00 ) / ( m_totalIntervalCount + NUM00 ) ; \n\t\tif ( data . m_prob < NUM00 || data . m_prob >= NUM00 ) { \n\t\t\tlogger . info ( entry . getKey ( ) + NUM00 + data . m_prob + NUM00 + data . m_count + NUM00 + m_totalIntervalCount + NUM00 ) ; \n\t\t\t} \n\t\tif ( data . m_prob < minProb ) { \n\t\t\tminProb = data . m_prob ; \n\t\t\t} \n\t\tdata . m_outOfClusterProb = ( ( double ) data . m_outOfClusterCount + NUM00 ) / ( m_totalIntervalCount + NUM00 ) ; \n\t\tif ( data . m_outOfClusterCount < minProb && data . m_outOfClusterCount > NUM00 ) { \n\t\t\tminProb = data . m_outOfClusterCount ; \n\t\t\t} \n\t\t} \n\tfor ( BernoulliScore . MsgData dataSuper : m_msgData . values ( ) ) { \n\t\tfinal FullBernoulliMsgData data = ( FullBernoulliMsgData ) dataSuper ; \n\t\tfinal double probability = data . m_prob ; \n\t\tdata . m_score = - Math . log ( probability ) ; \n\t\tif ( data . m_score > NUM00 ) { \n\t\t\tdata . m_score = NUM00 ; \n\t\t\t} \n\t\tfinal double outOfContextProbability = data . m_outOfClusterProb ; \n\t\tdata . m_outOfContextScore = - Math . log ( outOfContextProbability ) ; \n\t\tif ( data . m_outOfContextScore > NUM00 ) { \n\t\t\tdata . m_outOfContextScore = NUM00 ; \n\t\t\t} \n\t\t} \n\tm_trained = _BOOL ; \n\t} \n"}, {"code": "public boolean hasNextKeyTyped $F72 { \n\tsynchronized ( keyLock ) $F3387 ( keysTyped ) } \n"}, {"code": "public void addOperator ( Variation operator ) $F207 ( operators , operator ) "}, {"code": "public R paramsToMultipartEntity ( boolean isrepeatable ) { \n\ttry { \n\t\tmHttpEntity = createMultipartEntity ( isrepeatable ) ; \n\t\t} \n\t$F12241 ( e ) return ( R ) this ; \n\t} \n"}, {"code": "private static int parseInt $F36827 ( value , beginIndex , endIndex ) throws NumberFormatException { \n\tif ( $F128898 ( beginIndex , endIndex , value ) || beginIndex > endIndex ) { \n\t\tthrow new NumberFormatException ( value ) ; \n\t\t} \n\tint i = beginIndex ; \n\tint result = NUM00 ; \n\tint digit ; \n\tif ( i < endIndex ) { \n\t\t$F289104 ( digit , Character , value , i ) if ( digit < NUM00 ) { \n\t\t\tthrow new NumberFormatException ( NUM00 + value . substring ( beginIndex , endIndex ) ) ; \n\t\t\t} \n\t\tresult = - digit ; \n\t\t} \n\twhile ( i < endIndex ) { \n\t\t$F289104 ( digit , Character , value , i ) if ( digit < NUM00 ) { \n\t\t\tthrow new NumberFormatException ( NUM00 + value . substring ( beginIndex , endIndex ) ) ; \n\t\t\t} \n\t\tresult *= NUM00 ; \n\t\tresult -= digit ; \n\t\t} \n\treturn - result ; \n\t} \n"}, {"code": "public boolean isAlertDefinitionCreated ( StatAlertDefinition alertDefinition ) { \n\tsynchronized ( ALERT_DEFINITIONS ) { \n\t\treturn ALERT_DEFINITIONS . containsKey ( Integer . valueOf ( alertDefinition . getId ( ) ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static double logpoissonPDFm1 ( double x_plus_1 , double lambda ) { \n\tif $F28102 ( Double , lambda ) $F86429 ( Double ) if ( x_plus_1 > NUM00 ) { \n\t\treturn rawLogProbability ( x_plus_1 - NUM00 , lambda ) ; \n\t\t} \n\tif ( lambda > Math . abs ( x_plus_1 - NUM00 ) * MathUtil . LOG2 * Double . MAX_EXPONENT / NUM00 ) { \n\t\treturn - lambda - GammaDistribution . logGamma ( x_plus_1 ) ; \n\t\t} \n\telse { \n\t\treturn rawLogProbability ( x_plus_1 , lambda ) + Math . log ( x_plus_1 / lambda ) ; \n\t\t} \n\t} \n"}, {"code": "public void checkAndNotify $F72 { \n\tfor ( FileAlterationListener listener : listeners ) { \n\t\tlistener . onStart ( this ) ; \n\t\t} \n\tFile rootFile = rootEntry . getFile ( ) ; \n\tif $F3428 ( rootFile ) { \n\t\tcheckAndNotify ( rootEntry , rootEntry . getChildren ( ) , listFiles ( rootFile ) ) ; \n\t\t} \n\telse if ( rootEntry . isExists ( ) ) { \n\t\tcheckAndNotify ( rootEntry , rootEntry . getChildren ( ) , FileUtils . EMPTY_FILE_ARRAY ) ; \n\t\t} \n\telse $F845 for ( FileAlterationListener listener : listeners ) { \n\t\tlistener . onStop ( this ) ; \n\t\t} \n\t} \n"}, {"code": "private double allowableError ( int rank ) { \n\t$F115 ( size , samples ) final double error = calculateError ( rank , size ) ; \n\tfinal double minError = size + NUM00 ; \n\tif ( error < minError ) { \n\t\treturn error ; \n\t\t} \n\treturn minError ; \n\t} \n"}, {"code": "public RetryPolicy withMaxDuration ( long maxDuration , TimeUnit timeUnit ) { \n\t$F18062 ( Assert , timeUnit ) Assert . state ( timeUnit . toNanos ( maxDuration ) > delay . toNanos ( ) , NUM00 ) ; \n\tthis . maxDuration = new Duration ( maxDuration , timeUnit ) ; \n\treturn this ; \n\t} \n"}, {"code": "$F23145 ( measureSpec , result , specMode , MeasureSpec , specSize , mRadius , getPaddingTop , getPaddingBottom , Math ) "}, {"code": "private static final void cleanupNamespaceNodes ( ZooKeeper zkc , String root , String selfBrokerUrl ) throws Exception { \n\tfor ( String node : zkc . getChildren ( root , _BOOL ) ) { \n\t\tString currentPath = root + NUM00 + node ; \n\t\t$F3803 children = zkc . getChildren ( currentPath , _BOOL ) ; \n\t\tif $F10471 ( children ) { \n\t\t\tcleanupSingleNamespaceNode ( zkc , currentPath , selfBrokerUrl ) ; \n\t\t\t} \n\t\telse { \n\t\t\tcleanupNamespaceNodes ( zkc , currentPath , selfBrokerUrl ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "String validateLogixReference ( String name ) { \n\tLogix l = null ; \n\tif ( name != null ) { \n\t\tif $F4012 ( name ) { \n\t\t\tl = _logixManager . getByUserName ( name ) ; \n\t\t\t$F20092 ( l , name ) } \n\t\tl = _logixManager . getBySystemName ( name ) ; \n\t\t} \n\tif ( l == null ) { \n\t\tmessageInvalidActionItemName ( name , NUM00 ) ; \n\t\t$F1274 } \n\treturn name ; \n\t} \n"}, {"code": "protected void clearMenuSelection $F72 { \n\t$F149815 ( popupMenuGroup ) updateSelectionStatus ( ) ; \n\t} \n"}, {"code": "public double distance ( LatLng ll ) { \n\tdouble er = NUM00 ; \n\tdouble latFrom = Math . toRadians ( getLat ( ) ) ; \n\tdouble latTo = Math . toRadians ( ll . getLat ( ) ) ; \n\tdouble lngFrom = Math . toRadians ( getLng ( ) ) ; \n\tdouble lngTo = Math . toRadians ( ll . getLng ( ) ) ; \n\tdouble d = Math . acos ( Math . sin ( latFrom ) * Math . sin ( latTo ) + Math . cos ( latFrom ) * Math . cos ( latTo ) * Math . cos ( lngTo - lngFrom ) ) * er ; \n\treturn d ; \n\t} \n"}, {"code": "$F1 public $F31354 applyControlsToImpact ( int riskType , CnATreeElement asset , Integer impactC , Integer impactI , Integer impactA ) { \n\tif ( riskType == RISK_PRE_CONTROLS ) $F1337 asset = Retriever . checkRetrieveLinks ( asset , _BOOL ) ; \n\tMap < CnATreeElement , CnALink > linkedElements = CnALink . getLinkedElements ( asset , Control . TYPE_ID ) ; \n\tInteger impactC0 = Integer . valueOf ( impactC . intValue ( ) ) ; \n\tInteger impactI0 = Integer . valueOf ( impactI . intValue ( ) ) ; \n\tInteger impactA0 = Integer . valueOf ( impactA . intValue ( ) ) ; \n\tswitch ( riskType ) { \n\t\tcase RISK_WITH_IMPLEMENTED_CONTROLS : for ( CnATreeElement control : linkedElements . keySet ( ) ) { \n\t\t\tcontrol = Retriever . checkRetrieveElement ( control ) ; \n\t\t\tif ( Control . isImplemented ( control . getEntity ( ) ) ) { \n\t\t\t\timpactC0 -= control . getNumericProperty ( IRiskAnalysisService . PROP_CONTROL_EFFECT_C ) ; \n\t\t\t\timpactI0 -= control . getNumericProperty ( IRiskAnalysisService . PROP_CONTROL_EFFECT_I ) ; \n\t\t\t\timpactA0 -= control . getNumericProperty ( IRiskAnalysisService . PROP_CONTROL_EFFECT_A ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F597 case RISK_WITH_ALL_CONTROLS : for ( CnATreeElement control : linkedElements . keySet ( ) ) { \n\t\t\tcontrol = Retriever . checkRetrieveElement ( control ) ; \n\t\t\timpactC0 -= control . getNumericProperty ( IRiskAnalysisService . PROP_CONTROL_EFFECT_C ) ; \n\t\t\timpactI0 -= control . getNumericProperty ( IRiskAnalysisService . PROP_CONTROL_EFFECT_I ) ; \n\t\t\timpactA0 -= control . getNumericProperty ( IRiskAnalysisService . PROP_CONTROL_EFFECT_A ) ; \n\t\t\t} \n\t\t$F597 case RISK_WITHOUT_NA_CONTROLS : for ( CnATreeElement control : linkedElements . keySet ( ) ) { \n\t\t\tcontrol = Retriever . checkRetrieveElement ( control ) ; \n\t\t\tif ( Control . isPlanned ( control . getEntity ( ) ) ) { \n\t\t\t\timpactC0 -= control . getNumericProperty ( IRiskAnalysisService . PROP_CONTROL_EFFECT_C ) ; \n\t\t\t\timpactI0 -= control . getNumericProperty ( IRiskAnalysisService . PROP_CONTROL_EFFECT_I ) ; \n\t\t\t\timpactA0 -= control . getNumericProperty ( IRiskAnalysisService . PROP_CONTROL_EFFECT_A ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F597 $F2448 } \n\timpactC0 = ( impactC0 . intValue ( ) < NUM00 ) ? Integer . valueOf ( NUM00 ) : impactC0 ; \n\timpactI0 = ( impactI0 . intValue ( ) < NUM00 ) ? Integer . valueOf ( NUM00 ) : impactI0 ; \n\timpactA0 = ( impactA0 . intValue ( ) < NUM00 ) ? Integer . valueOf ( NUM00 ) : impactA0 ; \n\treturn new Integer [ ] { \n\t\timpactC0 , impactI0 , impactA0 } \n\t; \n\t} \n"}, {"code": "public static String encode ( String encode ) { \n\t$F7542 ( str , encode ) String key ; \n\tint i = NUM00 ; \n\twhile $F7007 ( i , str ) { \n\t\tkey = findValue ( str . charAt ( i ) ) ; \n\t\tif ( key != null ) { \n\t\t\tstr . replace ( i , i + NUM00 , key ) ; \n\t\t\t$F90433 ( i , key ) } \n\t\telse { \n\t\t\ti ++ ; \n\t\t\t} \n\t\t} \n\t$F92 ( str ) } \n"}, {"code": "protected static Boolean tryToLock ( String serviceName ) { \n\tDistributedLockService service = DistributedLockService . getServiceNamed ( serviceName ) ; \n\tboolean locked = service . lock ( NUM00 , NUM00 , - NUM00 ) ; \n\tif ( locked ) { \n\t\tservice . unlock ( NUM00 ) ; \n\t\t} \n\t$F33236 ( Boolean , locked ) } \n"}, {"code": "public int hashCode $F72 { \n\tLatLonPoint llp = getLocation ( ) ; \n\tint hc1 = Float . floatToIntBits ( llp . getLatitude ( ) ) ; \n\tint hc2 = Float . floatToIntBits ( llp . getLongitude ( ) ) ; \n\treturn hc1 ^ ( hc2 < < NUM00 ) ^ $F14870 ( hc2 ) ; \n\t} \n"}, {"code": "private XPathFactory loadFromServicesFile $F63851 ( uri , resourceName , in ) { \n\t$F63852 ( debug , debugPrintln , resourceName ) BufferedReader rd ; \n\ttry { \n\t\trd = new BufferedReader ( new InputStreamReader ( in , NUM00 ) , DEFAULT_LINE_LENGTH ) ; \n\t\t} \n\tcatch ( $F42439 e ) { \n\t\trd = new BufferedReader ( new InputStreamReader ( in ) , DEFAULT_LINE_LENGTH ) ; \n\t\t} \n\tString factoryClassName ; \n\tXPathFactory resultFactory = null ; \n\twhile ( _BOOL ) { \n\t\ttry $F63868 ( factoryClassName , rd ) catch ( IOException x ) $F5153 if ( factoryClassName != null ) { \n\t\t\t$F1384 ( hashIndex , factoryClassName ) $F63871 ( hashIndex , factoryClassName ) $F1382 ( factoryClassName ) $F63872 ( factoryClassName ) try { \n\t\t\t\tXPathFactory foundFactory = createInstance ( factoryClassName ) ; \n\t\t\t\tif ( foundFactory . isObjectModelSupported ( uri ) ) $F3468 ( resultFactory , foundFactory ) } \n\t\t\t$F63878 } \n\t\telse $F5153 } \n\tIoUtils . closeQuietly ( rd ) ; \n\treturn resultFactory ; \n\t} \n"}, {"code": "private synchronized void _stop $F72 { \n\twhile $F3817 ( m_activities ) { \n\t\tActivity a = ( Activity ) $F7661 ( m_activities ) ; \n\t\t$F65148 ( a ) } \n\t_setRunning ( _BOOL ) ; \n\tnotify ( ) ; \n\t} \n"}, {"code": "public void runTest $F72 throws Throwable { \n\tDocument doc ; \n\tNodeList elementList ; \n\tNode nameNode ; \n\tCharacterData child ; \n\tString childData ; \n\tint childLength ; \n\t$F59123 result = new $F59124 $F72 ; \n\t$F236 ( doc , load , _BOOL ) $F237 ( elementList , doc ) $F238 ( nameNode , elementList ) $F241 ( child , nameNode ) $F4054 ( child ) $F4055 ( childData , child ) assertEquals ( NUM00 , NUM00 , childData ) ; \n\t$F59131 ( childLength , child ) ; \n\tassertEquals ( NUM00 , NUM00 , childLength ) ; \n\t} \n"}, {"code": "public RhythmGroup makeGroup ( String title ) { \n\tfinal RhythmGroup group = new RhythmGroup $F72 ; \n\tgroup . mTitle = title ; \n\tgroup . mIndex = mRhythmGroups . size ( ) ; \n\tgroup . mControl = this ; \n\tmRhythmGroups . add ( group ) ; \n\tif ( mCurrentNotificationGroupIndex == NOTIFICATION_NO_GROUPS ) { \n\t\tmCurrentNotificationGroupIndex = NUM00 ; \n\t\trequestNotificationUpdate ( ) ; \n\t\t} \n\treturn group ; \n\t} \n"}, {"code": "public CharSequence subSequence ( int start , int end ) $F8587 ( substring , start , end ) "}, {"code": "public void testMultiplyMathContextDiffScalePosNeg $F72 { \n\tString a = NUM00 ; \n\tint aScale = NUM00 ; \n\tString b = NUM00 ; \n\tint bScale = - NUM00 ; \n\tString c = NUM00 ; \n\tint cScale = - NUM00 ; \n\t$F1918 ( aNumber , a , aScale ) $F1918 ( bNumber , b , bScale ) MathContext mc = new MathContext ( NUM00 , RoundingMode . HALF_UP ) ; \n\tBigDecimal result = aNumber . multiply ( bNumber , mc ) ; \n\t$F1925 ( assertEquals , c , result ) $F1928 ( assertEquals , cScale , result ) } \n"}, {"code": "public void writeTo ( final OutputStream out ) throws IOException { \n\tfor ( final Block block : blocks ) { \n\t\tout . write ( block . data , NUM00 , block . limit ) ; \n\t\t} \n\t} \n"}, {"code": "public void testMergeOneServletIntoDocumentWithSameServletAndParam $F72 throws Exception { \n\t$F44 ( srcXml ) $F34646 ( srcWebXml , WebXmlIo , srcXml ) $F100786 ( mergeXml ) $F34646 ( mergeWebXml , WebXmlIo , mergeXml ) $F34648 ( merger , srcWebXml ) merger . merge ( mergeWebXml ) ; \n\tassertTrue ( WebXmlUtils . hasServlet ( srcWebXml , NUM00 ) ) ; \n\t$F3803 initParams = WebXmlUtils . getServletInitParamNames ( srcWebXml , NUM00 ) ; \n\t$F70108 ( assertEquals , initParams ) $F100793 ( assertEquals , initParams ) assertEquals ( NUM00 , WebXmlUtils . getServletInitParam ( srcWebXml , NUM00 , NUM00 ) ) ; \n\t} \n"}, {"code": "public KMP ( String pat ) { \n\tthis . R = NUM00 ; \n\tthis . pat = pat ; \n\t$F1749 ( m , pat ) dfa = new int [ R ] [ m ] ; \n\tdfa [ pat . charAt ( NUM00 ) ] [ NUM00 ] = NUM00 ; \n\tfor ( int x = NUM00 , j = NUM00 ; \n\tj < m ; \n\tj ++ ) { \n\t\tfor ( $F119 ( c , R ) ) $F183944 ( dfa , c , j , x ) dfa [ pat . charAt ( j ) ] [ j ] = j + NUM00 ; \n\t\tx = dfa [ pat . charAt ( j ) ] [ x ] ; \n\t\t} \n\t} \n"}, {"code": "private void loadConfiguration $F72 { \n\tmClientId = mConfigurationManager . getString ( PREF_CLIENT_ID , NUM00 ) ; \n\tmClientKey = mConfigurationManager . getString ( PREF_CLIENT_KEY , NUM00 ) ; \n\t$F2980 ( Timber ) } \n"}, {"code": "public static void putBooleanField ( Object obj , long fieldOff , boolean val ) { \n\tUNSAFE . putBoolean ( obj , fieldOff , val ) ; \n\t} \n"}, {"code": "public void sort ( $F392154 comparator ) { \n\tsynchronized ( mLock ) $F57005 ( Collections , fileList , comparator ) notifyDataSetChanged ( ) ; \n\t} \n"}, {"code": "public AcceptRequestInterceptor ( final String accept ) { \n\tthis . accept = accept ; \n\tcheckArgument ( $F27376 ( accept ) ) ; \n\t} \n"}, {"code": "public void test_getLowestSetBitNeg $F72 { \n\t$F123148 int aSign = - NUM00 ; \n\tint iNumber = NUM00 ; \n\t$F3023 ( aNumber , aSign , aBytes ) int result = aNumber . getLowestSetBit ( ) ; \n\tassertTrue ( NUM00 , result == iNumber ) ; \n\t} \n"}, {"code": "private int tailingNonNewline $F36827 ( str , off , len ) { \n\tfor ( $F119 ( cnt , len ) ) { \n\t\tfinal int pos = off + ( len - NUM00 ) - cnt ; \n\t\tif $F44927 ( str , pos , UNIX_NEWLINE ) { \n\t\t\treturn cnt ; \n\t\t\t} \n\t\tif $F44927 ( str , pos , CARRIAGE_RETURN ) { \n\t\t\treturn cnt ; \n\t\t\t} \n\t\t} \n\treturn len ; \n\t} \n"}, {"code": "$F1 public void reset $F72 { \n\t_clear ( ) ; \n\tbnodes = null ; \n\tbnodesTotalCount = NUM00 ; \n\tbnodesResolvedCount = NUM00 ; \n\tdeferredStmts = null ; \n\treifiedStmts = null ; \n\tif ( queue != null ) { \n\t\tfinal $F8318 ft = this . ft ; \n\t\tif ( ft != null ) { \n\t\t\tft . cancel ( _BOOL ) ; \n\t\t\tthis . ft = null ; \n\t\t\t} \n\t\t$F725 ( queue ) } \n\t} \n"}, {"code": "public static $F96 readData ( final InputStream input ) throws IOException { \n\t$F4727 ( inputBuffer , BUFFER_LENGTH ) final ByteArrayOutputStream byteOutput = new ByteArrayOutputStream ( BUFFER_LENGTH ) ; \n\tint bytesRead ; \n\t$F29757 ( bytesRead , input , inputBuffer , byteOutput ) $F40695 ( r , byteOutput ) $F59 ( byteOutput ) return r ; \n\t} \n"}, {"code": "$F29442 ( cls , makeLogTag ) "}, {"code": "$F1 public synchronized void println $F72 $F1210 ( print ) "}, {"code": "public boolean isCrash ( String testPath ) { \n\tfor ( String prefix : getPrefixes ( testPath ) ) $F51680 ( mCrashList , prefix , _BOOL ) return _BOOL ; \n\t} \n"}, {"code": "public AbstractSiteMap parseSiteMap ( String contentType , $F96 content , URL url ) throws UnknownFormatException , IOException { \n\t$F23375 ( mediaType , MediaType , contentType ) while ( mediaType != null && ! mediaType . equals ( MediaType . OCTET_STREAM ) ) { \n\t\tif $F105 ( XML_MEDIA_TYPES , mediaType ) $F8587 ( processXml , url , content ) else if $F105 ( TEXT_MEDIA_TYPES , mediaType ) $F38748 ( processText , url , content ) else if $F105 ( GZ_MEDIA_TYPES , mediaType ) $F8587 ( processGzip , url , content ) else { \n\t\t\tmediaType = MEDIA_TYPE_REGISTRY . getSupertype ( mediaType ) ; \n\t\t\treturn parseSiteMap ( mediaType . toString ( ) , content , url ) ; \n\t\t\t} \n\t\t} \n\tthrow new UnknownFormatException $F6486 ( contentType , url ) ; \n\t} \n"}, {"code": "private void createDefaultManagedObject ( ManagedObjectDefinition $F5162 d , ManagedObject $F1011 child , DefaultManagedObject $F5162 dmo ) { \n\tfor ( PropertyDefinition $F1011 pd : d . getAllPropertyDefinitions ( ) ) { \n\t\tsetPropertyValues ( child , pd , dmo ) ; \n\t\t} \n\ttry $F19092 ( child ) catch ( ManagedObjectAlreadyExistsException e ) { \n\t\tmoaee = e ; \n\t\t} \n\tcatch ( MissingMandatoryPropertiesException e ) { \n\t\tmmpe = e ; \n\t\t} \n\tcatch ( ConcurrentModificationException e ) { \n\t\tcme = e ; \n\t\t} \n\tcatch ( OperationRejectedException e ) { \n\t\tore = e ; \n\t\t} \n\tcatch ( LdapException e ) { \n\t\tere = e ; \n\t\t} \n\t} \n"}, {"code": "static String omitQuotesIfExist ( String str ) { \n\t$F1338 ( str ) if ( ( $F4432 ( str ) || $F4432 ( str ) ) && $F45145 ( str ) ) $F8994 ( str ) return str ; \n\t} \n"}, {"code": "$F48363 ( input , offset , len , flags , decoder , _BOOL , temp , System ) "}, {"code": "private static boolean canCompleteNodePath ( Entity start , Entity end , ArrayList $F37552 network , int startPosition , List < ECMInfo > allECMInfo ) { \n\tEntity spotter = network . get ( startPosition ) ; \n\tECMInfo spotterStartECM = ComputeECM . getECMEffects ( spotter , start . getPosition ( ) , spotter . getPosition ( ) , _BOOL , allECMInfo ) ; \n\tboolean isC3BDefeated = start . hasBoostedC3 ( ) && ( spotterStartECM != null ) && spotterStartECM . isAngelECM ( ) ; \n\tboolean isNovaDefeated = start . hasNovaCEWS ( ) && ( spotterStartECM != null ) && spotterStartECM . isNovaECM ( ) ; \n\tboolean isC3Defeated = ! ( start . hasBoostedC3 ( ) || start . hasNovaCEWS ( ) ) && ( spotterStartECM != null ) && spotterStartECM . isECM ( ) ; \n\tif ( isC3BDefeated || isNovaDefeated || isC3Defeated ) { \n\t\treturn _BOOL ; \n\t\t} \n\tECMInfo spotterEndECM = ComputeECM . getECMEffects ( spotter , spotter . getPosition ( ) , end . getPosition ( ) , _BOOL , allECMInfo ) ; \n\tisC3BDefeated = start . hasBoostedC3 ( ) && ( spotterEndECM != null ) && spotterEndECM . isAngelECM ( ) ; \n\tisNovaDefeated = start . hasNovaCEWS ( ) && ( spotterEndECM != null ) && spotterEndECM . isNovaECM ( ) ; \n\tisC3Defeated = ! ( start . hasBoostedC3 ( ) || start . hasNovaCEWS ( ) ) && ( spotterEndECM != null ) && spotterEndECM . isECM ( ) ; \n\tif ( ! ( isC3BDefeated || isNovaDefeated || isC3Defeated ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tfor ( ++ startPosition ; \n\tstartPosition < network . size ( ) ; \n\tstartPosition ++ ) { \n\t\tif ( Compute . canCompleteNodePath ( spotter , end , network , startPosition , allECMInfo ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "static void make72Safe ( StringBuffer line ) { \n\t$F115 ( length , line ) if ( length > NUM00 ) { \n\t\tint index = NUM00 ; \n\t\twhile ( index < length - NUM00 ) { \n\t\t\t$F48459 ( line , index ) index += NUM00 ; \n\t\t\tlength += NUM00 ; \n\t\t\t} \n\t\t} \n\t$F665 } \n"}, {"code": "$F1 public int last $F72 { \n\tCharacterIterator t = getText ( ) ; \n\tt . setIndex ( t . getEndIndex ( ) ) ; \n\treturn t . getIndex ( ) ; \n\t} \n"}, {"code": "public static IStatus validateMethodName ( String name ) { \n\treturn validateMethodName ( name , CompilerOptions . VERSION_1_3 , CompilerOptions . VERSION_1_3 ) ; \n\t} \n"}, {"code": "public static void registerProtocol ( final String id , final Protocol protocol ) { \n\t$F826 ( id ) $F826 ( protocol ) PROTOCOLS . put ( id , protocol ) ; \n\t} \n"}, {"code": "public byte receiveOneByte $F72 { \n\t$F13527 ( Log , TAG ) try { \n\t\tacquireLock ( ) ; \n\t\tmServerSocket . receive ( mReceivePacket ) ; \n\t\tLog . d ( TAG , NUM00 + ( NUM00 + $F94795 ( mReceivePacket ) ) ) ; \n\t\treturn $F94795 ( mReceivePacket ) ; \n\t\t} \n\t$F12241 ( e ) return Byte . MIN_VALUE ; \n\t} \n"}, {"code": "public static String linkHTML ( String text ) { \n\tif $F6036 ( text ) $F2455 boolean http = $F412 ( text ) ; \n\tboolean www = $F412 ( text ) ; \n\tboolean email = $F412 ( text ) ; \n\tif ( ! http && ! www && ! email ) { \n\t\treturn text ; \n\t\t} \n\tif ( $F412 ( text ) && $F412 ( text ) ) { \n\t\treturn text ; \n\t\t} \n\tif ( http ) { \n\t\t$F275 ( matcher , httpRegex , text ) $F280 ( sb ) while $F281 ( matcher ) { \n\t\t\t$F45144 ( url , matcher ) if ( $F412 ( url ) || $F412 ( url ) || $F412 ( url ) || $F412 ( url ) ) { \n\t\t\t\turl = NUM00 + url + NUM00 + url + NUM00 ; \n\t\t\t\t} \n\t\t\telse if ( $F412 ( url ) || $F412 ( url ) || $F412 ( url ) ) { \n\t\t\t\turl = NUM00 + url + NUM00 + url + NUM00 ; \n\t\t\t\t} \n\t\t\telse if ( $F412 ( url ) || $F412 ( url ) ) { \n\t\t\t\turl = NUM00 + url + NUM00 + url + NUM00 ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\turl = NUM00 + url + NUM00 + url + NUM00 ; \n\t\t\t\t} \n\t\t\tmatcher . appendReplacement ( sb , url ) ; \n\t\t\t} \n\t\tmatcher . appendTail ( sb ) ; \n\t\t$F6947 ( text , sb ) } \n\telse if ( www ) { \n\t\t$F275 ( matcher , wwwRegex , text ) $F280 ( sb ) while $F281 ( matcher ) { \n\t\t\t$F45144 ( url , matcher ) matcher . appendReplacement ( sb , NUM00 + url + NUM00 + url + NUM00 ) ; \n\t\t\t} \n\t\tmatcher . appendTail ( sb ) ; \n\t\t$F6947 ( text , sb ) } \n\tif ( email ) { \n\t\t$F275 ( matcher , emailRegex , text ) $F280 ( sb ) while $F281 ( matcher ) { \n\t\t\t$F45144 ( address , matcher ) matcher . appendReplacement ( sb , NUM00 + address + NUM00 + address + NUM00 ) ; \n\t\t\t} \n\t\tmatcher . appendTail ( sb ) ; \n\t\t$F6947 ( text , sb ) } \n\treturn text ; \n\t} \n"}, {"code": "public static int hash ( String key , int bitSize , String input , String hashType ) { \n\tint bitLimitedHash ; \n\ttry { \n\t\t$F156 ( md , MessageDigest , hashType ) $F96 array = md . digest ( input . getBytes ( ) ) ; \n\t\tint hashInt = fromByteArray ( array ) ; \n\t\tbitLimitedHash = hashInt ; \n\t\tif ( bitSize < NUM00 ) { \n\t\t\tbitLimitedHash = ( NUM00 > > > ( NUM00 - bitSize ) ) & hashInt ; \n\t\t\t} \n\t\t$F8922 ( logger , hashInt , bitLimitedHash ) } \n\tcatch ( NoSuchAlgorithmException e ) { \n\t\t$F17749 ( logger , e ) bitLimitedHash = hash ( key , bitSize , input ) ; \n\t\t} \n\treturn bitLimitedHash ; \n\t} \n"}, {"code": "private OFFactory computeInitialFactory ( Set < OFVersion > ofVersions ) { \n\tif $F4251 ( ofVersions ) $F4639 OFVersion highest = null ; \n\tfor ( OFVersion v : ofVersions ) { \n\t\tif ( highest == null ) { \n\t\t\thighest = v ; \n\t\t\t} \n\t\telse if $F9032 ( v , highest ) { \n\t\t\thighest = v ; \n\t\t\t} \n\t\t} \n\treturn OFFactories . getFactory ( highest ) ; \n\t} \n"}, {"code": "private void loadJettyConfiguration ( $F5466 URL cfgUrl ) throws IgniteCheckedException { \n\tif ( cfgUrl == null ) { \n\t\tHttpConfiguration httpCfg = new HttpConfiguration $F72 ; \n\t\thttpCfg . setSecureScheme ( NUM00 ) ; \n\t\thttpCfg . setSecurePort ( NUM00 ) ; \n\t\thttpCfg . setSendServerVersion ( _BOOL ) ; \n\t\thttpCfg . setSendDateHeader ( _BOOL ) ; \n\t\tString srvPortStr = System . getProperty ( IGNITE_JETTY_PORT , NUM00 ) ; \n\t\tint srvPort ; \n\t\ttry $F37473 ( srvPort , Integer , srvPortStr ) catch ( NumberFormatException ignore ) { \n\t\t\tthrow new IgniteCheckedException ( NUM00 + NUM00 + srvPortStr ) ; \n\t\t\t} \n\t\thttpSrv = new Server ( new QueuedThreadPool $F32532 ) ; \n\t\tServerConnector srvConn = new ServerConnector ( httpSrv , new HttpConnectionFactory ( httpCfg ) ) ; \n\t\tsrvConn . setHost ( System . getProperty ( IGNITE_JETTY_HOST , NUM00 ) ) ; \n\t\tsrvConn . setPort ( srvPort ) ; \n\t\tsrvConn . setIdleTimeout ( NUM00 ) ; \n\t\tsrvConn . setReuseAddress ( _BOOL ) ; \n\t\thttpSrv . addConnector ( srvConn ) ; \n\t\thttpSrv . setStopAtShutdown ( _BOOL ) ; \n\t\t} \n\telse { \n\t\tXmlConfiguration cfg ; \n\t\ttry { \n\t\t\tcfg = new XmlConfiguration ( cfgUrl ) ; \n\t\t\t} \n\t\tcatch ( FileNotFoundException e ) { \n\t\t\tthrow new IgniteSpiException ( NUM00 + cfgUrl , e ) ; \n\t\t\t} \n\t\tcatch ( SAXException e ) { \n\t\t\tthrow new IgniteSpiException ( NUM00 + cfgUrl , e ) ; \n\t\t\t} \n\t\tcatch ( IOException e ) { \n\t\t\tthrow new IgniteSpiException ( NUM00 + cfgUrl , e ) ; \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\tthrow new IgniteSpiException ( NUM00 + cfgUrl , e ) ; \n\t\t\t} \n\t\ttry { \n\t\t\thttpSrv = ( Server ) cfg . configure ( ) ; \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\tthrow new IgniteCheckedException ( NUM00 , e ) ; \n\t\t\t} \n\t\t} \n\tassert httpSrv != null ; \n\thttpSrv . setHandler ( jettyHnd ) ; \n\toverride ( getJettyConnector ( ) ) ; \n\t} \n"}, {"code": "public $F96 encodeFrame $F72 { \n\tint length = this . payload . length + frameLengthOverhead ; \n\tif ( this . payload . length > NUM00 ) { \n\t\tlength += NUM00 ; \n\t\t} \n\telse if ( this . payload . length >= NUM00 ) { \n\t\tlength += NUM00 ; \n\t\t} \n\t$F87627 ( buffer , ByteBuffer , length ) appendFinAndOpCode ( buffer , this . opcode , this . fin ) ; \n\tbyte mask [ ] = generateMaskingKey ( ) ; \n\tappendLengthAndMask ( buffer , this . payload . length , mask ) ; \n\tfor ( int i = NUM00 ; \n\ti < this . payload . length ; \n\ti ++ ) { \n\t\tbuffer . put ( ( byte ) ( this . payload [ i ] ^= mask [ i % NUM00 ] ) ) ; \n\t\t} \n\t$F14257 ( buffer ) $F31057 ( buffer ) } \n"}, {"code": "public static void preloadIcon ( Context context , ComponentName componentName , Bitmap icon , int dpi ) { \n\ttry { \n\t\t$F45547 ( packageManager , context ) packageManager . getActivityIcon ( componentName ) ; \n\t\t$F665 } \n\tcatch ( PackageManager . NameNotFoundException e ) $F845 final String key = componentName . flattenToString ( ) ; \n\tFileOutputStream resourceFile = null ; \n\ttry { \n\t\tresourceFile = context . openFileOutput ( getResourceFilename ( componentName ) , Context . MODE_PRIVATE ) ; \n\t\t$F1538 ( os ) if ( icon . compress ( android . graphics . Bitmap . CompressFormat . PNG , NUM00 , os ) ) { \n\t\t\t$F1208 ( buffer , os ) $F17918 ( resourceFile , buffer ) } \n\t\telse { \n\t\t\t$F248237 ( Log , TAG , key ) $F665 } \n\t\t} \n\tcatch ( FileNotFoundException e ) { \n\t\tLog . w ( TAG , NUM00 + key , e ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\tLog . w ( TAG , NUM00 + key , e ) ; \n\t\t} \n\tfinally { \n\t\tif ( resourceFile != null ) { \n\t\t\ttry $F881 ( resourceFile ) catch ( IOException e ) { \n\t\t\t\tLog . d ( TAG , NUM00 + key , e ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void normalize $F72 { \n\t$F83 ( sb ) for ( String v : values ) $F288 ( sb , v ) $F725 ( values ) $F40018 ( values , sb ) compacted = _BOOL ; \n\t} \n"}, {"code": "public void addAttribute ( String key , String value ) $F1717 ( extraSessionAttributes , key , value ) "}, {"code": "String capitalise ( final String s ) { \n\t$F83314 ( s ) final StringBuffer s1 = new StringBuffer ( s ) ; \n\tif ( Character . isLowerCase ( s1 . charAt ( NUM00 ) ) ) { \n\t\ts1 . setCharAt ( NUM00 , Character . toUpperCase ( s1 . charAt ( NUM00 ) ) ) ; \n\t\t} \n\tfor ( $F1088 ( j , s1 ) ) { \n\t\tif ( $F952 ( Character , s1 , j ) ) { \n\t\t\ts1 . setCharAt ( j , $F954 ( Character , s1 , j ) ) ; \n\t\t\t} \n\t\t} \n\t$F92 ( s1 ) } \n"}, {"code": "public void recompose ( Vector recomposableElements ) throws TransformerException { \n\tint n = getIncludeCountComposed ( ) ; \n\tfor ( int i = - NUM00 ; \n\ti < n ; \n\ti ++ ) { \n\t\tStylesheet included = getIncludeComposed ( i ) ; \n\t\tint s = included . getOutputCount ( ) ; \n\t\tfor ( $F119 ( j , s ) ) { \n\t\t\trecomposableElements . addElement ( included . getOutput ( j ) ) ; \n\t\t\t} \n\t\ts = included . getAttributeSetCount ( ) ; \n\t\tfor ( $F119 ( j , s ) ) { \n\t\t\trecomposableElements . addElement ( included . getAttributeSet ( j ) ) ; \n\t\t\t} \n\t\ts = included . getDecimalFormatCount ( ) ; \n\t\tfor ( $F119 ( j , s ) ) { \n\t\t\trecomposableElements . addElement ( included . getDecimalFormat ( j ) ) ; \n\t\t\t} \n\t\ts = included . getKeyCount ( ) ; \n\t\tfor ( $F119 ( j , s ) ) { \n\t\t\trecomposableElements . addElement ( included . getKey ( j ) ) ; \n\t\t\t} \n\t\ts = included . getNamespaceAliasCount ( ) ; \n\t\tfor ( $F119 ( j , s ) ) { \n\t\t\trecomposableElements . addElement ( included . getNamespaceAlias ( j ) ) ; \n\t\t\t} \n\t\ts = included . getTemplateCount ( ) ; \n\t\tfor ( $F119 ( j , s ) ) { \n\t\t\trecomposableElements . addElement ( included . getTemplate ( j ) ) ; \n\t\t\t} \n\t\ts = included . getVariableOrParamCount ( ) ; \n\t\tfor ( $F119 ( j , s ) ) { \n\t\t\trecomposableElements . addElement ( included . getVariableOrParam ( j ) ) ; \n\t\t\t} \n\t\ts = included . getStripSpaceCount ( ) ; \n\t\tfor ( $F119 ( j , s ) ) { \n\t\t\trecomposableElements . addElement ( included . getStripSpace ( j ) ) ; \n\t\t\t} \n\t\ts = included . getPreserveSpaceCount ( ) ; \n\t\tfor ( $F119 ( j , s ) ) { \n\t\t\trecomposableElements . addElement ( included . getPreserveSpace ( j ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private Geometry unionActual ( Geometry g0 , Geometry g1 ) { \n\treturn restrictToPolygons ( g0 . union ( g1 ) ) ; \n\t} \n"}, {"code": "public boolean supports ( @ MagicConstant ( flagsFromClass = Features . class ) int capability ) { \n\tIAndroidTarget target = getTarget ( ) ; \n\tif ( target != null ) { \n\t\treturn RenderService . supportsCapability ( getModule ( ) , target , capability ) ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "$F1 public void transactionAborted $F72 { \n\tif $F2979 ( listeners ) $F8030 ( records ) else { \n\t\t$F1206 ( records ) $F22620 ( listeners ) } \n\t} \n"}, {"code": "$F1 public boolean add ( E o ) { \n\t$F160092 ( o ) $F46660 ( offer , o , _BOOL ) $F8675 } \n"}, {"code": "public StandardCrosshairLabelGenerator $F72 { \n\tthis ( NUM00 , NumberFormat . getNumberInstance ( ) ) ; \n\t} \n"}, {"code": "private URI createEthernetStoragePort ( $F2100 ( keyMap ) , StoragePort port , String name , String portInstanceID , $F42521 newPorts , $F42521 existingPorts ) throws IOException { \n\tStoragePort portinMemory = ( StoragePort ) keyMap . get ( portInstanceID ) ; \n\tif ( null == port ) { \n\t\tportinMemory . setPortNetworkId ( name ) ; \n\t\tportinMemory . setPortEndPointID ( name ) ; \n\t\tString portNativeGuid = NativeGUIDGenerator . generateNativeGuid ( _dbClient , portinMemory ) ; \n\t\tportinMemory . setNativeGuid ( portNativeGuid ) ; \n\t\tportinMemory . setLabel ( portNativeGuid ) ; \n\t\t_dbClient . createObject ( portinMemory ) ; \n\t\tnewPorts . add ( portinMemory ) ; \n\t\treturn portinMemory . getId ( ) ; \n\t\t} \n\telse { \n\t\tport . setPortName ( portinMemory . getPortName ( ) ) ; \n\t\tport . setPortSpeed ( portinMemory . getPortSpeed ( ) ) ; \n\t\tport . setPortEndPointID ( name ) ; \n\t\tport . setCompatibilityStatus ( portinMemory . getCompatibilityStatus ( ) ) ; \n\t\tport . setDiscoveryStatus ( portinMemory . getDiscoveryStatus ( ) ) ; \n\t\tport . setOperationalStatus ( portinMemory . getOperationalStatus ( ) ) ; \n\t\tport . setPortType ( portinMemory . getPortType ( ) ) ; \n\t\t_dbClient . persistObject ( port ) ; \n\t\texistingPorts . add ( port ) ; \n\t\treturn port . getId ( ) ; \n\t\t} \n\t} \n"}, {"code": "default int add ( Item stack ) { \n\tint itemsLeft = stack . count ( ) ; \n\tfor ( $F50810 ( i , size ) ) { \n\t\titemsLeft = add ( i , stack . withAmount ( itemsLeft ) ) ; \n\t\t} \n\tif ( itemsLeft != stack . count ( ) ) $F5795 ( markChanged ) return itemsLeft ; \n\t} \n"}, {"code": "public void mark ( long n ) { \n\tcount . addAndGet ( n ) ; \n\tm1Rate . update ( n ) ; \n\tm5Rate . update ( n ) ; \n\tm15Rate . update ( n ) ; \n\t} \n"}, {"code": "public $F806 readAllLines $F72 { \n\t$F8728 ( lines ) while ( hasNextLine ( ) ) $F33452 ( lines , readLine ) $F16105 ( lines ) } \n"}, {"code": "public static boolean isAbsolutePath ( String systemId ) { \n\t$F397 ( systemId , _BOOL ) $F15885 ( file , systemId ) return file . isAbsolute ( ) ; \n\t} \n"}, {"code": "protected QualifiedItem [ ] parseQualifiedItems ( final VersionSpec defaultVersion , final boolean allowVersionRange , final int startIndex ) { \n\treturn parseQualifiedItems ( getFreeArguments ( ) , defaultVersion , allowVersionRange , startIndex ) ; \n\t} \n"}, {"code": "public void changeChangeEnabled ( ChangeEnabledState state ) throws RefactoringException { \n\tRefactoringSession session = getRefactoringSession ( state . getSessionId ( ) ) ; \n\tsession . updateChangeEnabled ( state . getChangeId ( ) , state . isEnabled ( ) ) ; \n\t} \n"}, {"code": "public UpdateBuilder bindUris ( String from , $F6877 uris ) $F12588 ( bindUris , from , uris ) "}, {"code": "public void populateAll $F72 throws GeneralException { \n\tfor ( ServiceEcaAction ecaAction : serviceEcaRule . getEcaActionList ( ) ) { \n\t\tservicesCalledByThisServiceEca . add ( aif . getServiceArtifactInfo ( ecaAction . getServiceName ( ) ) ) ; \n\t\tUtilMisc . addToSortedSetInMap ( this , aif . allServiceEcaInfosReferringToServiceName , ecaAction . getServiceName ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "private $F2027 findNearestArea ( int pixelX , int pixelY , int minSpanX , int minSpanY , int spanX , int spanY , boolean ignoreOccupied , $F2027 result , $F2027 resultSpan ) { \n\tlazyInitTempRectStack ( ) ; \n\t$F115851 ( pixelX , mCellWidth , mWidthGap , spanX ) $F115851 ( pixelY , mCellHeight , mHeightGap , spanY ) $F115855 ( bestXY , result ) double bestDistance = Double . MAX_VALUE ; \n\tfinal Rect bestRect = new Rect ( - NUM00 , - NUM00 , - NUM00 , - NUM00 ) ; \n\tfinal $F115864 validRegions = new $F115864 $F72 ; \n\tfinal int countX = mCountX ; \n\tfinal int countY = mCountY ; \n\tif ( minSpanX <= NUM00 || minSpanY <= NUM00 || spanX <= NUM00 || spanY <= NUM00 || spanX < minSpanX || spanY < minSpanY ) { \n\t\treturn bestXY ; \n\t\t} \n\tfor ( $F115874 ( y , countY , minSpanY ) ) { \n\t\tinner : for ( $F115874 ( x , countX , minSpanX ) ) { \n\t\t\tint ySize = - NUM00 ; \n\t\t\tint xSize = - NUM00 ; \n\t\t\tif ( ignoreOccupied ) { \n\t\t\t\tfor ( $F119 ( i , minSpanX ) ) { \n\t\t\t\t\tfor ( $F119 ( j , minSpanY ) ) { \n\t\t\t\t\t\tif ( mOccupied [ x + i ] [ y + j ] ) $F115876 } \n\t\t\t\t\t} \n\t\t\t\txSize = minSpanX ; \n\t\t\t\tySize = minSpanY ; \n\t\t\t\tboolean incX = _BOOL ; \n\t\t\t\tboolean hitMaxX = xSize >= spanX ; \n\t\t\t\tboolean hitMaxY = ySize >= spanY ; \n\t\t\t\twhile ( ! ( hitMaxX && hitMaxY ) ) { \n\t\t\t\t\tif ( incX && ! hitMaxX ) { \n\t\t\t\t\t\tfor ( $F119 ( j , ySize ) ) { \n\t\t\t\t\t\t\tif ( x + xSize > countX - NUM00 || mOccupied [ x + xSize ] [ y + j ] ) { \n\t\t\t\t\t\t\t\thitMaxX = _BOOL ; \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t$F115888 ( hitMaxX , xSize ) } \n\t\t\t\t\telse if ( ! hitMaxY ) { \n\t\t\t\t\t\tfor ( $F119 ( i , xSize ) ) { \n\t\t\t\t\t\t\tif ( y + ySize > countY - NUM00 || mOccupied [ x + i ] [ y + ySize ] ) { \n\t\t\t\t\t\t\t\thitMaxY = _BOOL ; \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t$F115888 ( hitMaxY , ySize ) } \n\t\t\t\t\thitMaxX |= xSize >= spanX ; \n\t\t\t\t\thitMaxY |= ySize >= spanY ; \n\t\t\t\t\tincX = ! incX ; \n\t\t\t\t\t} \n\t\t\t\tincX = _BOOL ; \n\t\t\t\thitMaxX = xSize >= spanX ; \n\t\t\t\thitMaxY = ySize >= spanY ; \n\t\t\t\t} \n\t\t\t$F92861 ( cellXY , mTmpPoint ) cellToCenterPoint ( x , y , cellXY ) ; \n\t\t\tRect currentRect = mTempRectStack . pop ( ) ; \n\t\t\tcurrentRect . set ( x , y , x + xSize , y + ySize ) ; \n\t\t\tboolean contained = _BOOL ; \n\t\t\tfor ( Rect r : validRegions ) { \n\t\t\t\t$F10283 ( r , currentRect , contained , _BOOL ) } \n\t\t\tvalidRegions . push ( currentRect ) ; \n\t\t\tdouble distance = Math . hypot ( cellXY [ NUM00 ] - pixelX , cellXY [ NUM00 ] - pixelY ) ; \n\t\t\tif ( ( distance <= bestDistance && ! contained ) || currentRect . contains ( bestRect ) ) { \n\t\t\t\tbestDistance = distance ; \n\t\t\t\tbestXY [ NUM00 ] = x ; \n\t\t\t\tbestXY [ NUM00 ] = y ; \n\t\t\t\t$F115913 ( resultSpan , xSize , ySize ) bestRect . set ( currentRect ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F115922 ( bestDistance , Double , bestXY ) recycleTempRects ( validRegions ) ; \n\treturn bestXY ; \n\t} \n"}, {"code": "public void validationStatesRemoved ( K key ) { \n\thideMessage ( key ) ; \n\tvalidationErrorStates . remove ( key ) ; \n\tnotifyUpstream ( key , Collections . < ValidationState > $F35890 ) ; \n\t} \n"}, {"code": "public void killApplication ( String applicationId ) throws IOException , YarnException { \n\t$F556 ( log , applicationId ) yarnClient . killApplication ( getApplicationIDFromString ( applicationId ) ) ; \n\t} \n"}, {"code": "public static String convert ( String prefix ) { \n\t$F83 ( sb ) $F2936 ( prefix ) $F6542 ( lines , prefix ) for ( String line : lines ) { \n\t\t$F10144 ( tokens ) $F1469 c = UnsafeString . getChars ( line ) ; \n\t\tint lastidx = NUM00 ; \n\t\tint idx = NUM00 ; \n\t\twhile ( idx < c . length ) { \n\t\t\twhile ( c [ idx ] != NUM00 && c [ idx ] != NUM00 && c [ idx ] != NUM00 ) { \n\t\t\t\tidx ++ ; \n\t\t\t\t} \n\t\t\tif ( idx != lastidx ) { \n\t\t\t\ttokens . add ( new String ( c , lastidx , idx - lastidx ) ) ; \n\t\t\t\t} \n\t\t\tidx ++ ; \n\t\t\tlastidx = idx ; \n\t\t\t} \n\t\tCollections . reverse ( tokens ) ; \n\t\tfor ( String token : tokens ) $F444 ( sb , token ) } \n\t$F92 ( sb ) } \n"}, {"code": "public boolean toBoolean ( Element el , String attributeName , boolean defaultValue ) { \n\t$F57219 ( value , el , attributeName ) $F397 ( value , defaultValue ) return Caster . toBooleanValue ( value , _BOOL ) ; \n\t} \n"}, {"code": "public synchronized void addPanListener ( PanListener listener ) $F207 ( mPanListeners , listener ) "}, {"code": "protected void serializePreRoot $F72 throws IOException { \n\tint i ; \n\tif ( _preRoot != null ) { \n\t\tfor ( i = NUM00 ; \n\t\ti < _preRoot . size ( ) ; \n\t\t++ i ) { \n\t\t\tprintText ( $F1766 ( _preRoot , i ) , _BOOL , _BOOL ) ; \n\t\t\tif ( _indenting ) _printer . breakLine ( ) ; \n\t\t\t} \n\t\t$F6050 ( _preRoot ) } \n\t} \n"}, {"code": "private void createSchemaColumnEntities ( $F206544 schemaColumns , boolean isPartitionList , Collection < SchemaColumnEntity > schemaColumnEntityList , Map < String , SchemaColumnEntity > schemaColumnEntityMap , BusinessObjectFormatEntity businessObjectFormatEntity ) { \n\tif $F20899 ( CollectionUtils , schemaColumns ) { \n\t\tint position = NUM00 ; \n\t\tfor ( SchemaColumn schemaColumn : schemaColumns ) { \n\t\t\tSchemaColumnEntity $F24916 ( schemaColumnEntity , schemaColumnEntityMap , schemaColumn ) ; \n\t\t\tif ( schemaColumnEntity == null ) { \n\t\t\t\tschemaColumnEntity = createSchemaColumnEntity ( schemaColumn , businessObjectFormatEntity ) ; \n\t\t\t\tschemaColumnEntityList . add ( schemaColumnEntity ) ; \n\t\t\t\t$F22760 ( schemaColumnEntityMap , schemaColumn , schemaColumnEntity ) } \n\t\t\tif ( isPartitionList ) { \n\t\t\t\tschemaColumnEntity . setPartitionLevel ( position ++ ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tschemaColumnEntity . setPosition ( position ++ ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static $F4203 String joinAnd ( final String delimiter , final String lastDelimiter , $F60962 ( objs ) ) { \n\tif $F4251 ( objs ) $F1278 final $F13085 iter = objs . iterator ( ) ; \n\t$F1121 ( buffer ) while $F2921 ( iter ) { \n\t\tfinal T obj = iter . next ( ) ; \n\t\tif ( notEmpty ( obj ) ) { \n\t\t\tif $F35625 ( buffer ) { \n\t\t\t\tbuffer . append ( iter . hasNext ( ) ? delimiter : lastDelimiter ) ; \n\t\t\t\t} \n\t\t\t$F42779 ( buffer , Strings , obj ) } \n\t\t} \n\t$F92 ( buffer ) } \n"}, {"code": "public static String generateNativeGuid ( DbClient dbClient , Snapshot snapshot ) throws IOException { \n\tFileShare fs = dbClient . queryObject ( FileShare . class , snapshot . getParent ( ) ) ; \n\tStorageSystem device = dbClient . queryObject ( $F41797 , fs . getStorageDevice ( ) ) ; \n\treturn String . format ( NUM00 + SNAPSHOT + NUM00 , $F131294 ( _deviceTypeMap , device ) , device . getSerialNumber ( ) , snapshot . getNativeId ( ) ) ; \n\t} \n"}, {"code": "public static $F529 updateFile $F71242 ( dctx , context ) { \n\t$F67631 ( result ) try { \n\t\tresult = updateFileMethod ( dctx , context ) ; \n\t\t} \n\tcatch ( GenericServiceException e ) $F34760 ( ServiceUtil , e ) return result ; \n\t} \n"}, {"code": "$F47733 ( reader , writer , buffer , count ) "}, {"code": "public EditSensorsDialog ( final Collection $F310647 sensors ) { \n\tsuper ( ) ; \n\t$F826 ( sensors ) this . sensors = sensors ; \n\tsetTitle ( $F10533 ( sensors ) ) ; \n\tinitComponents ( ) ; \n\tlayoutComponents ( ) ; \n\t} \n"}, {"code": "$F1219 synchronized void trimToSize ( int targetSize ) { \n\tint bytesToFree = Math . min ( mUsed . mNumBytes + mFree . mNumBytes - targetSize , mFree . mNumBytes ) ; \n\t$F36109 ( bytesToFree ) if $F65643 ( FLog ) { \n\t\tFLog . v ( TAG , NUM00 , targetSize , mUsed . mNumBytes + mFree . mNumBytes , bytesToFree ) ; \n\t\t} \n\tlogStats ( ) ; \n\tfor ( $F3836 ( i , mBuckets ) ) { \n\t\t$F65649 ( bytesToFree ) Bucket $F2193 bucket = mBuckets . valueAt ( i ) ; \n\t\twhile ( bytesToFree > NUM00 ) { \n\t\t\tV value = bucket . pop ( ) ; \n\t\t\t$F32472 ( value ) free ( value ) ; \n\t\t\tbytesToFree -= bucket . mItemSize ; \n\t\t\tmFree . decrement ( bucket . mItemSize ) ; \n\t\t\t} \n\t\t} \n\tlogStats ( ) ; \n\tif $F65643 ( FLog ) { \n\t\tFLog . v ( TAG , NUM00 , targetSize , mUsed . mNumBytes + mFree . mNumBytes ) ; \n\t\t} \n\t} \n"}, {"code": "$F129060 ( views , direction , focusableMode , focusableCount , descendantFocusability , getDescendantFocusability , FOCUS_BLOCK_DESCENDANTS , i , getChildCount , child , getChildAt , VISIBLE , ii , infoForChild , mCurItem , FOCUS_AFTER_DESCENDANTS , isFocusable , FOCUSABLES_TOUCH_MODE , isInTouchMode , isFocusableInTouchMode , this ) "}, {"code": "public String readToDelimiter ( char delim ) throws FormatException { \n\t$F280 ( buildretval ) char tmp ; \n\ttry { \n\t\twhile ( ( tmp = readChar ( ) ) != delim ) buildretval . append ( tmp ) ; \n\t\t} \n\t$F214817 catch ( FormatException fe ) { \n\t\tif $F1277 ( buildretval ) { \n\t\t\tthrow fe ; \n\t\t\t} \n\t\t} \n\t$F92 ( buildretval ) } \n"}, {"code": "private void addNewLineAtTop ( $F40828 recycler ) { \n\tint x = layoutStartPoint ( ) . x , bottom = getDecoratedTop ( getChildAt ( getMaxHeightLayoutPositionInLine ( NUM00 ) ) ) , y ; \n\tint height = NUM00 ; \n\t$F183286 $F19827 ( lineChildren ) ; \n\tint currentAdapterPosition = NUM00 ; \n\tint endAdapterPosition = getChildAdapterPosition ( NUM00 ) - NUM00 ; \n\t$F28883 ( rect ) boolean newline ; \n\tboolean firstItem = _BOOL ; \n\tLayoutContext layoutContext = LayoutContext . fromLayoutOptions ( flowLayoutOptions ) ; \n\tint firstItemAdapterPosition = getChildAdapterPosition ( NUM00 ) ; \n\tif ( cacheHelper . hasPreviousLineCached ( firstItemAdapterPosition ) ) { \n\t\tint previousLineIndex = cacheHelper . itemLineIndex ( firstItemAdapterPosition ) - NUM00 ; \n\t\tLine previousLine = cacheHelper . getLine ( previousLineIndex ) ; \n\t\tint firstNewItemAdapterPosition = cacheHelper . firstItemIndex ( previousLineIndex ) ; \n\t\tfor ( int i = NUM00 ; \n\t\ti < previousLine . itemCount ; \n\t\ti ++ ) { \n\t\t\tView newView = recycler . getViewForPosition ( firstNewItemAdapterPosition + i ) ; \n\t\t\taddView ( newView , i ) ; \n\t\t\tlineChildren . add ( newView ) ; \n\t\t\t} \n\t\theight = previousLine . maxHeight ; \n\t\t} \n\telse { \n\t\twhile ( currentAdapterPosition <= endAdapterPosition ) { \n\t\t\tView newChild = recycler . getViewForPosition ( currentAdapterPosition ) ; \n\t\t\tnewline = calcChildLayoutRect ( newChild , x , NUM00 , height , layoutContext , rect ) ; \n\t\t\tcacheHelper . setItem ( currentAdapterPosition , new Point ( $F78956 ( rect ) ) ) ; \n\t\t\t$F43476 ( addView , newChild , lineChildren ) if ( newline && ! firstItem ) { \n\t\t\t\tfor ( View viewToRecycle : lineChildren ) { \n\t\t\t\t\tremoveAndRecycleView ( viewToRecycle , recycler ) ; \n\t\t\t\t\t} \n\t\t\t\t$F725 ( lineChildren ) x = advanceInSameLine ( layoutStartPoint ( ) . x , rect , layoutContext ) ; \n\t\t\t\t$F54171 ( height , rect ) layoutContext . currentLineItemCount = NUM00 ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tx = advanceInSameLine ( x , rect , layoutContext ) ; \n\t\t\t\theight = Math . max ( height , rect . height ( ) ) ; \n\t\t\t\tfirstItem = _BOOL ; \n\t\t\t\tlayoutContext . currentLineItemCount ++ ; \n\t\t\t\t} \n\t\t\tlineChildren . add ( newChild ) ; \n\t\t\tcurrentAdapterPosition ++ ; \n\t\t\t} \n\t\t} \n\tx = layoutStartPoint ( ) . x ; \n\ty = bottom - height ; \n\tfirstItem = _BOOL ; \n\tlayoutContext = LayoutContext . fromLayoutOptions ( flowLayoutOptions ) ; \n\tfor ( $F2277 ( i , lineChildren ) ) { \n\t\tView childView = lineChildren . get ( i ) ; \n\t\tnewline = calcChildLayoutRect ( childView , x , y , height , layoutContext , rect ) ; \n\t\tif ( newline && firstItem ) { \n\t\t\tint rectHeight = rect . height ( ) ; \n\t\t\trect . top -= rectHeight ; \n\t\t\trect . bottom -= rectHeight ; \n\t\t\tfirstItem = _BOOL ; \n\t\t\t} \n\t\tlayoutDecorated ( childView , rect . left , rect . top , rect . right , rect . bottom ) ; \n\t\tx = advanceInSameLine ( x , rect , layoutContext ) ; \n\t\t} \n\t} \n"}, {"code": "$F31396 ( str , retval , ch , i , s , Integer ) "}, {"code": "default T call ( SourceSection source , T lhs , T argument1 , T argument2 ) { \n\treturn call ( source , lhs , Arrays . asList ( argument ( argument1 ) , argument ( argument2 ) ) ) ; \n\t} \n"}, {"code": "public boolean equalMapGenParameters ( MapSettings other ) { \n\tif ( ( boardWidth != other . getBoardWidth ( ) ) || ( boardHeight != other . getBoardHeight ( ) ) || ( mapWidth != other . getMapWidth ( ) ) || ( mapHeight != other . getMapHeight ( ) ) || ( invertNegativeTerrain != other . getInvertNegativeTerrain ( ) ) || ( hilliness != other . getHilliness ( ) ) || ( cliffs != other . getCliffs ( ) ) || ( range != other . getRange ( ) ) || ( minWaterSpots != other . getMinWaterSpots ( ) ) || ( maxWaterSpots != other . getMaxWaterSpots ( ) ) || ( minWaterSize != other . getMinWaterSize ( ) ) || ( maxWaterSize != other . getMaxWaterSize ( ) ) || ( probDeep != other . getProbDeep ( ) ) || ( minForestSpots != other . getMinForestSpots ( ) ) || ( maxForestSpots != other . getMaxForestSpots ( ) ) || ( minForestSize != other . getMinForestSize ( ) ) || ( maxForestSize != other . getMaxForestSize ( ) ) || ( probHeavy != other . getProbHeavy ( ) ) || ( minRoughSpots != other . getMinRoughSpots ( ) ) || ( maxRoughSpots != other . getMaxRoughSpots ( ) ) || ( minRoughSize != other . getMinRoughSize ( ) ) || ( maxRoughSize != other . getMaxRoughSize ( ) ) || ( minSandSpots != other . getMinSandSpots ( ) ) || ( maxSandSpots != other . getMaxSandSpots ( ) ) || ( minSandSize != other . getMinSandSize ( ) ) || ( maxSandSize != other . getMaxSandSize ( ) ) || ( minPlantedFieldSpots != other . getMinPlantedFieldSpots ( ) ) || ( maxPlantedFieldSpots != other . getMaxPlantedFieldSpots ( ) ) || ( minPlantedFieldSize != other . getMinPlantedFieldSize ( ) ) || ( maxPlantedFieldSize != other . getMaxPlantedFieldSize ( ) ) || ( minSwampSpots != other . getMinSwampSpots ( ) ) || ( maxSwampSpots != other . getMaxSwampSpots ( ) ) || ( minSwampSize != other . getMinSwampSize ( ) ) || ( maxSwampSize != other . getMaxSwampSize ( ) ) || ( minPavementSpots != other . getMinPavementSpots ( ) ) || ( maxPavementSpots != other . getMaxPavementSpots ( ) ) || ( minPavementSize != other . getMinPavementSize ( ) ) || ( maxPavementSize != other . getMaxPavementSize ( ) ) || ( minRubbleSpots != other . getMinRubbleSpots ( ) ) || ( maxRubbleSpots != other . getMaxRubbleSpots ( ) ) || ( minRubbleSize != other . getMinRubbleSize ( ) ) || ( maxRubbleSize != other . getMaxRubbleSize ( ) ) || ( minFortifiedSpots != other . getMinFortifiedSpots ( ) ) || ( maxFortifiedSpots != other . getMaxFortifiedSpots ( ) ) || ( minFortifiedSize != other . getMinFortifiedSize ( ) ) || ( maxFortifiedSize != other . getMaxFortifiedSize ( ) ) || ( minIceSpots != other . getMinIceSpots ( ) ) || ( maxIceSpots != other . getMaxIceSpots ( ) ) || ( minIceSize != other . getMinIceSize ( ) ) || ( maxIceSize != other . getMaxIceSize ( ) ) || ( probRoad != other . getProbRoad ( ) ) || ( probInvert != other . getProbInvert ( ) ) || ( probRiver != other . getProbRiver ( ) ) || ( probCrater != other . getProbCrater ( ) ) || ( minRadius != other . getMinRadius ( ) ) || ( maxRadius != other . getMaxRadius ( ) ) || ( minCraters != other . getMinCraters ( ) ) || ( maxCraters != other . getMaxCraters ( ) ) || ( ! theme . equals ( other . getTheme ( ) ) ) || ( fxMod != other . getFxMod ( ) ) || ( cityBlocks != other . getCityBlocks ( ) ) || ( cityType != other . getCityType ( ) ) || ( cityMinCF != other . getCityMinCF ( ) ) || ( cityMaxCF != other . getCityMaxCF ( ) ) || ( cityMinFloors != other . getCityMinFloors ( ) ) || ( cityMaxFloors != other . getCityMaxFloors ( ) ) || ( cityDensity != other . getCityDensity ( ) ) || ( probFlood != other . getProbFlood ( ) ) || ( probForestFire != other . getProbForestFire ( ) ) || ( probFreeze != other . getProbFreeze ( ) ) || ( probDrought != other . getProbDrought ( ) ) || ( algorithmToUse != other . getAlgorithmToUse ( ) ) || ( mountainHeightMin != other . getMountainHeightMin ( ) ) || ( mountainHeightMax != other . getMountainHeightMax ( ) ) || ( mountainPeaks != other . getMountainPeaks ( ) ) || ( mountainStyle != other . getMountainStyle ( ) ) || ( mountainWidthMin != other . getMountainWidthMin ( ) ) || ( mountainWidthMax != other . getMountainWidthMax ( ) ) || ( boardBuildings != other . getBoardBuildings ( ) ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "private static void decodeTextSegment ( BitSource bits , StringBuilder result ) throws FormatException { \n\tboolean upperShift = _BOOL ; \n\t$F11844 ( cValues ) int shift = NUM00 ; \n\tdo { \n\t\t$F46340 ( bits ) $F2847 ( firstByte , bits ) $F32905 ( firstByte ) $F46342 ( parseTwoBytes , firstByte , bits , cValues ) for ( $F6268 ( i ) ) { \n\t\t\tint cValue = cValues [ i ] ; \n\t\t\tswitch ( shift ) { \n\t\t\t\t$F46351 ( cValue , shift , TEXT_BASIC_SET_CHARS , textChar , upperShift , result , _BOOL , FormatException ) $F46354 ( upperShift , result , cValue , _BOOL , shift ) $F46358 ( cValue , C40_SHIFT2_SET_CHARS , c40char , upperShift , result , _BOOL , FormatException , shift ) $F99359 ( cValue , TEXT_SHIFT3_SET_CHARS , textChar , upperShift , result , _BOOL , shift , FormatException ) $F46362 ( FormatException ) } \n\t\t\t} \n\t\t} \n\twhile $F2892 ( bits ) ; \n\t} \n"}, {"code": "public synchronized void curl ( PointF curlPos , PointF curlDir , double radius ) { \n\tif ( DRAW_CURL_POSITION ) { \n\t\t$F16709 ( mBufCurlPositionLines ) mBufCurlPositionLines . put ( curlPos . x ) ; \n\t\tmBufCurlPositionLines . put ( curlPos . y - NUM00 ) ; \n\t\tmBufCurlPositionLines . put ( curlPos . x ) ; \n\t\tmBufCurlPositionLines . put ( curlPos . y + NUM00 ) ; \n\t\tmBufCurlPositionLines . put ( curlPos . x - NUM00 ) ; \n\t\tmBufCurlPositionLines . put ( curlPos . y ) ; \n\t\tmBufCurlPositionLines . put ( curlPos . x + NUM00 ) ; \n\t\tmBufCurlPositionLines . put ( curlPos . y ) ; \n\t\tmBufCurlPositionLines . put ( curlPos . x ) ; \n\t\tmBufCurlPositionLines . put ( curlPos . y ) ; \n\t\tmBufCurlPositionLines . put ( curlPos . x + curlDir . x * NUM00 ) ; \n\t\tmBufCurlPositionLines . put ( curlPos . y + curlDir . y * NUM00 ) ; \n\t\t$F16709 ( mBufCurlPositionLines ) } \n\t$F16709 ( mBufVertices ) $F16709 ( mBufColors ) if ( DRAW_TEXTURE ) { \n\t\t$F16709 ( mBufTexCoords ) } \n\tdouble curlAngle = Math . acos ( curlDir . x ) ; \n\tcurlAngle = curlDir . y > NUM00 ? - curlAngle : curlAngle ; \n\tmArrTempVertices . addAll ( mArrRotatedVertices ) ; \n\t$F725 ( mArrRotatedVertices ) for ( $F809 ( i ) ) { \n\t\tVertex v = mArrTempVertices . remove ( NUM00 ) ; \n\t\tv . set ( mRectangle [ i ] ) ; \n\t\t$F16666 ( v , curlPos ) v . rotateZ ( - curlAngle ) ; \n\t\tint j = NUM00 ; \n\t\tfor ( ; \n\t\tj < mArrRotatedVertices . size ( ) ; \n\t\t++ j ) { \n\t\t\tVertex v2 = mArrRotatedVertices . get ( j ) ; \n\t\t\tif ( v . mPosX > v2 . mPosX ) $F5153 if ( v . mPosX == v2 . mPosX && v . mPosY > v2 . mPosY ) $F5153 } \n\t\tmArrRotatedVertices . add ( j , v ) ; \n\t\t} \n\tint lines [ ] [ ] = { \n\t\t$F104535 , $F104535 , $F104535 , $F104535 } \n\t; \n\t{ \n\t\tVertex v0 = mArrRotatedVertices . get ( NUM00 ) ; \n\t\tVertex v2 = mArrRotatedVertices . get ( NUM00 ) ; \n\t\tVertex v3 = mArrRotatedVertices . get ( NUM00 ) ; \n\t\tdouble dist2 = Math . sqrt ( ( v0 . mPosX - v2 . mPosX ) * ( v0 . mPosX - v2 . mPosX ) + ( v0 . mPosY - v2 . mPosY ) * ( v0 . mPosY - v2 . mPosY ) ) ; \n\t\tdouble dist3 = Math . sqrt ( ( v0 . mPosX - v3 . mPosX ) * ( v0 . mPosX - v3 . mPosX ) + ( v0 . mPosY - v3 . mPosY ) * ( v0 . mPosY - v3 . mPosY ) ) ; \n\t\tif ( dist2 > dist3 ) { \n\t\t\t$F293658 ( lines ) $F293658 ( lines ) } \n\t\t} \n\tmVerticesCountFront = mVerticesCountBack = NUM00 ; \n\tif ( DRAW_SHADOW ) { \n\t\tmArrTempShadowVertices . addAll ( mArrDropShadowVertices ) ; \n\t\tmArrTempShadowVertices . addAll ( mArrSelfShadowVertices ) ; \n\t\t$F725 ( mArrDropShadowVertices ) $F725 ( mArrSelfShadowVertices ) } \n\tdouble curlLength = Math . PI * radius ; \n\t$F725 ( mArrScanLines ) if ( mMaxCurlSplits > NUM00 ) { \n\t\tmArrScanLines . add ( ( double ) NUM00 ) ; \n\t\t} \n\tfor ( $F1316 ( i , mMaxCurlSplits ) ) { \n\t\tmArrScanLines . add ( ( - curlLength * i ) / ( mMaxCurlSplits - NUM00 ) ) ; \n\t\t} \n\tmArrScanLines . add ( mArrRotatedVertices . get ( NUM00 ) . mPosX - NUM00 ) ; \n\tdouble scanXmax = mArrRotatedVertices . get ( NUM00 ) . mPosX + NUM00 ; \n\tfor ( $F3836 ( i , mArrScanLines ) ) { \n\t\t$F28095 ( scanXmin , mArrScanLines , i ) for ( $F3836 ( j , mArrRotatedVertices ) ) { \n\t\t\tVertex v = mArrRotatedVertices . get ( j ) ; \n\t\t\tif ( v . mPosX >= scanXmin && v . mPosX <= scanXmax ) { \n\t\t\t\tVertex n = mArrTempVertices . remove ( NUM00 ) ; \n\t\t\t\tn . set ( v ) ; \n\t\t\t\tArray $F130408 intersections = getIntersections ( mArrRotatedVertices , lines , n . mPosX ) ; \n\t\t\t\tif ( $F10470 ( intersections ) && intersections . get ( NUM00 ) . mPosY > v . mPosY ) { \n\t\t\t\t\tmArrOutputVertices . addAll ( intersections ) ; \n\t\t\t\t\tmArrOutputVertices . add ( n ) ; \n\t\t\t\t\t} \n\t\t\t\telse if $F119130 ( intersections ) { \n\t\t\t\t\tmArrOutputVertices . add ( n ) ; \n\t\t\t\t\tmArrOutputVertices . addAll ( intersections ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tmArrTempVertices . add ( n ) ; \n\t\t\t\t\tmArrTempVertices . addAll ( intersections ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tArray $F130408 intersections = getIntersections ( mArrRotatedVertices , lines , scanXmin ) ; \n\t\tif $F10471 ( intersections ) { \n\t\t\tVertex v1 = intersections . get ( NUM00 ) ; \n\t\t\tVertex v2 = intersections . get ( NUM00 ) ; \n\t\t\tif ( v1 . mPosY < v2 . mPosY ) $F23287 ( mArrOutputVertices , v2 , v1 ) else $F21926 ( mArrOutputVertices , intersections ) } \n\t\telse if $F6887 ( intersections ) $F21926 ( mArrTempVertices , intersections ) while $F3817 ( mArrOutputVertices ) { \n\t\t\tVertex v = mArrOutputVertices . remove ( NUM00 ) ; \n\t\t\tmArrTempVertices . add ( v ) ; \n\t\t\tboolean textureFront ; \n\t\t\tif ( i == NUM00 ) { \n\t\t\t\ttextureFront = _BOOL ; \n\t\t\t\tmVerticesCountFront ++ ; \n\t\t\t\t} \n\t\t\telse if ( $F2282 ( i , mArrScanLines ) || curlLength == NUM00 ) { \n\t\t\t\tv . mPosX = - ( curlLength + v . mPosX ) ; \n\t\t\t\tv . mPosZ = NUM00 * radius ; \n\t\t\t\tv . mPenumbraX = - v . mPenumbraX ; \n\t\t\t\ttextureFront = _BOOL ; \n\t\t\t\tmVerticesCountBack ++ ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tdouble rotY = Math . PI * ( v . mPosX / curlLength ) ; \n\t\t\t\tv . mPosX = radius * Math . sin ( rotY ) ; \n\t\t\t\tv . mPosZ = radius - $F68927 ( radius , Math , rotY ) ; \n\t\t\t\tv . mPenumbraX *= Math . cos ( rotY ) ; \n\t\t\t\tv . mColorFactor = ( float ) ( NUM00 + NUM00 * Math . sqrt ( Math . sin ( rotY ) + NUM00 ) ) ; \n\t\t\t\tif ( v . mPosZ >= radius ) { \n\t\t\t\t\ttextureFront = _BOOL ; \n\t\t\t\t\tmVerticesCountBack ++ ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\ttextureFront = _BOOL ; \n\t\t\t\t\tmVerticesCountFront ++ ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tif ( textureFront != mFlipTexture ) { \n\t\t\t\tv . mTexX *= mTextureRectFront . right ; \n\t\t\t\tv . mTexY *= mTextureRectFront . bottom ; \n\t\t\t\tv . mColor = mTexturePage . getColor ( CurlPage . SIDE_FRONT ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tv . mTexX *= mTextureRectBack . right ; \n\t\t\t\tv . mTexY *= mTextureRectBack . bottom ; \n\t\t\t\tv . mColor = mTexturePage . getColor ( CurlPage . SIDE_BACK ) ; \n\t\t\t\t} \n\t\t\tv . rotateZ ( curlAngle ) ; \n\t\t\t$F26898 ( v , curlPos ) addVertex ( v ) ; \n\t\t\tif ( DRAW_SHADOW && v . mPosZ > NUM00 && v . mPosZ <= radius ) { \n\t\t\t\tShadowVertex sv = mArrTempShadowVertices . remove ( NUM00 ) ; \n\t\t\t\tsv . mPosX = v . mPosX ; \n\t\t\t\tsv . mPosY = v . mPosY ; \n\t\t\t\tsv . mPosZ = v . mPosZ ; \n\t\t\t\tsv . mPenumbraX = ( v . mPosZ / NUM00 ) * - curlDir . x ; \n\t\t\t\tsv . mPenumbraY = ( v . mPosZ / NUM00 ) * - curlDir . y ; \n\t\t\t\tsv . mPenumbraColor = v . mPosZ / radius ; \n\t\t\t\tint idx = ( $F2958 ( mArrDropShadowVertices ) ) / NUM00 ; \n\t\t\t\tmArrDropShadowVertices . add ( idx , sv ) ; \n\t\t\t\t} \n\t\t\tif ( DRAW_SHADOW && v . mPosZ > radius ) { \n\t\t\t\tShadowVertex sv = mArrTempShadowVertices . remove ( NUM00 ) ; \n\t\t\t\tsv . mPosX = v . mPosX ; \n\t\t\t\tsv . mPosY = v . mPosY ; \n\t\t\t\tsv . mPosZ = v . mPosZ ; \n\t\t\t\tsv . mPenumbraX = ( ( v . mPosZ - radius ) / NUM00 ) * v . mPenumbraX ; \n\t\t\t\tsv . mPenumbraY = ( ( v . mPosZ - radius ) / NUM00 ) * v . mPenumbraY ; \n\t\t\t\tsv . mPenumbraColor = ( v . mPosZ - radius ) / ( NUM00 * radius ) ; \n\t\t\t\tint idx = ( $F2958 ( mArrSelfShadowVertices ) ) / NUM00 ; \n\t\t\t\tmArrSelfShadowVertices . add ( idx , sv ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tscanXmax = scanXmin ; \n\t\t} \n\t$F16709 ( mBufVertices ) $F16709 ( mBufColors ) if ( DRAW_TEXTURE ) { \n\t\t$F16709 ( mBufTexCoords ) } \n\tif ( DRAW_SHADOW ) { \n\t\t$F16709 ( mBufShadowColors ) $F16709 ( mBufShadowVertices ) mDropShadowCount = NUM00 ; \n\t\tfor ( $F3836 ( i , mArrDropShadowVertices ) ) { \n\t\t\tShadowVertex sv = mArrDropShadowVertices . get ( i ) ; \n\t\t\tmBufShadowVertices . put ( ( float ) sv . mPosX ) ; \n\t\t\tmBufShadowVertices . put ( ( float ) sv . mPosY ) ; \n\t\t\tmBufShadowVertices . put ( ( float ) sv . mPosZ ) ; \n\t\t\tmBufShadowVertices . put ( ( float ) ( sv . mPosX + sv . mPenumbraX ) ) ; \n\t\t\tmBufShadowVertices . put ( ( float ) ( sv . mPosY + sv . mPenumbraY ) ) ; \n\t\t\tmBufShadowVertices . put ( ( float ) sv . mPosZ ) ; \n\t\t\tfor ( $F809 ( j ) ) { \n\t\t\t\tdouble color = SHADOW_OUTER_COLOR [ j ] + $F17318 ( SHADOW_INNER_COLOR , j , SHADOW_OUTER_COLOR ) * sv . mPenumbraColor ; \n\t\t\t\tmBufShadowColors . put ( ( float ) color ) ; \n\t\t\t\t} \n\t\t\tmBufShadowColors . put ( SHADOW_OUTER_COLOR ) ; \n\t\t\tmDropShadowCount += NUM00 ; \n\t\t\t} \n\t\tmSelfShadowCount = NUM00 ; \n\t\tfor ( $F3836 ( i , mArrSelfShadowVertices ) ) { \n\t\t\tShadowVertex sv = mArrSelfShadowVertices . get ( i ) ; \n\t\t\tmBufShadowVertices . put ( ( float ) sv . mPosX ) ; \n\t\t\tmBufShadowVertices . put ( ( float ) sv . mPosY ) ; \n\t\t\tmBufShadowVertices . put ( ( float ) sv . mPosZ ) ; \n\t\t\tmBufShadowVertices . put ( ( float ) ( sv . mPosX + sv . mPenumbraX ) ) ; \n\t\t\tmBufShadowVertices . put ( ( float ) ( sv . mPosY + sv . mPenumbraY ) ) ; \n\t\t\tmBufShadowVertices . put ( ( float ) sv . mPosZ ) ; \n\t\t\tfor ( $F809 ( j ) ) { \n\t\t\t\tdouble color = SHADOW_OUTER_COLOR [ j ] + $F17318 ( SHADOW_INNER_COLOR , j , SHADOW_OUTER_COLOR ) * sv . mPenumbraColor ; \n\t\t\t\tmBufShadowColors . put ( ( float ) color ) ; \n\t\t\t\t} \n\t\t\tmBufShadowColors . put ( SHADOW_OUTER_COLOR ) ; \n\t\t\tmSelfShadowCount += NUM00 ; \n\t\t\t} \n\t\t$F16709 ( mBufShadowColors ) $F16709 ( mBufShadowVertices ) } \n\t} \n"}, {"code": "public void saveLockPassword $F123257 ( password , quality , isFallback ) { \n\t$F172325 ( hash , passwordToHash , password ) try { \n\t\t$F18800 ( raf , sLockPasswordFilename ) try { \n\t\t\tif ( password == null ) $F357905 ( raf ) else $F53422 ( raf , hash ) } \n\t\t$F48674 ( raf ) } \n\tcatch ( FileNotFoundException fnfe ) { \n\t\t$F110901 ( LogUtil , TAG , sLockPasswordFilename ) } \n\tcatch ( IOException ioe ) { \n\t\t$F110901 ( LogUtil , TAG , sLockPasswordFilename ) } \n\t} \n"}, {"code": "public boolean checkUsernameExists ( String username ) throws DataAccessException $F118073 ( getUserInfo , username ) "}, {"code": "public Code39Reader $F72 { \n\tusingCheckDigit = _BOOL ; \n\textendedMode = _BOOL ; \n\t} \n"}, {"code": "public static String encode ( final List $F223126 path , int precision ) { \n\tlong lastLat = NUM00 ; \n\tlong lastLng = NUM00 ; \n\t$F3239 ( result ) $F70630 ( factor , Math , precision ) for ( final Position point : path ) { \n\t\tlong lat = Math . round ( point . getLatitude ( ) * factor ) ; \n\t\tlong lng = Math . round ( point . getLongitude ( ) * factor ) ; \n\t\tlong dLat = lat - lastLat ; \n\t\tlong dLng = lng - lastLng ; \n\t\tencode ( dLat , result ) ; \n\t\tencode ( dLng , result ) ; \n\t\tlastLat = lat ; \n\t\tlastLng = lng ; \n\t\t} \n\t$F92 ( result ) } \n"}, {"code": "public ActivityResolveInfo ( ResolveInfo resolveInfo ) $F6988 ( this , resolveInfo ) "}, {"code": "$F1 public int compareTo ( LibPackage p_other ) { \n\treturn pkg_name . compareToIgnoreCase ( p_other . pkg_name ) ; \n\t} \n"}, {"code": "$F64178 ( bmap , exifOutFileName , NULL_ARGUMENT_ , s , getExifWriterStream , Bitmap , closeSilently , e ) "}, {"code": "public double entropy $F23416 ( x ) { \n\tdouble h = NUM00 ; \n\tint n = x . length ; \n\t$F13209 ( ln2 , Math ) int n0 = NUM00 ; \n\tfor ( $F119 ( i , n ) ) { \n\t\tif ( x [ i ] == NUM00 ) { \n\t\t\tn0 ++ ; \n\t\t\t} \n\t\t} \n\tdouble p ; \n\tif ( n0 == NUM00 || n0 == n ) { \n\t\treturn h ; \n\t\t} \n\telse { \n\t\tp = $F10425 ( n0 , n ) ; \n\t\th = - ( p * Math . log ( p ) + ( NUM00 - p ) * Math . log ( NUM00 - p ) ) / ln2 ; \n\t\t} \n\treturn h ; \n\t} \n"}, {"code": "private $F806 addtoSelectionArgs $F41327 ( argValue , selectionArgsIn ) { \n\t$F806 selectionArgs = selectionArgsIn ; \n\t$F24645 ( selectionArgsList ) selectionArgsList . add ( argValue ) ; \n\tif ( null != selectionArgsIn ) { \n\t\tfor ( final String arg : selectionArgsIn ) $F207 ( selectionArgsList , arg ) } \n\tselectionArgs = $F16104 ( selectionArgsList ) ; \n\t$F725 ( selectionArgsList ) selectionArgsList = null ; \n\treturn selectionArgs ; \n\t} \n"}, {"code": "public void put ( String sample , String attribute , Object value ) { \n\t$F24127 ( sampleOrder , sample ) $F24127 ( attributeOrder , attribute ) table . put ( sample , attribute , value ) ; \n\t} \n"}, {"code": "public boolean isCompacted $F72 { \n\treturn compacted ; \n\t} \n"}, {"code": "protected void center $F72 { \n\tContainer parent = getParent ( ) ; \n\tfinal Dimension size = getPreferredSize ( ) ; \n\tsetBounds ( ( parent . getWidth ( ) - size . width ) / NUM00 , ( parent . getHeight ( ) - size . height ) / NUM00 , size . width , size . height ) ; \n\t} \n"}, {"code": "public boolean isCardDismissible ( String tag ) $F298 ( mDismissibleCards , tag ) "}, {"code": "public void write $F233176 ( off , len ) throws IOException $F21537 ( se , cbuf , off , len ) "}, {"code": "public boolean validate ( String telephone ) { \n\tchar aChar ; \n\t$F7542 ( buf , telephone ) for ( $F1088 ( aIndex , buf ) ) { \n\t\taChar = buf . charAt ( aIndex ) ; \n\t\tif ( ! Character . isSpaceChar ( aChar ) ) { \n\t\t\tif ( ! Character . isDigit ( aChar ) && ! isValidTelephoneChars ( aChar ) ) { \n\t\t\t\treturn _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static void unpack ( $F530 object , String key , Object value ) { \n\t$F83044 ( split , key ) HashMap lobj = object ; \n\tfor ( $F1139 ( cur , split ) ) { \n\t\tString current = split [ cur ] ; \n\t\tif ( ! ( lobj . containsKey ( current ) && lobj . get ( current ) instanceof HashMap ) ) { \n\t\t\tlobj . put ( current , $F532 ) ; \n\t\t\t} \n\t\tif $F74408 ( cur , split ) $F1717 ( lobj , current , value ) else lobj = ( HashMap ) lobj . get ( current ) ; \n\t\t} \n\t} \n"}, {"code": "public void removeListener ( DNSListener listener ) $F106 ( _listeners , listener ) "}, {"code": "static $F2689 parseResourcePathParams ( String resourcePath ) { \n\t$F275 ( matcher , PARAM_URL_REGEX , resourcePath ) $F116112 ( patterns ) while $F281 ( matcher ) { \n\t\tpatterns . add ( matcher . group ( NUM00 ) ) ; \n\t\t} \n\treturn patterns ; \n\t} \n"}, {"code": "$F1 public void close $F72 throws IOException { \n\tif ( logger != null ) $F7958 ( logger , socket_was_closed ) if ( ! socket_was_closed ) { \n\t\tif ( handshake_started ) { \n\t\t\talertProtocol . alert ( AlertProtocol . WARNING , AlertProtocol . CLOSE_NOTIFY ) ; \n\t\t\ttry { \n\t\t\t\toutput . write ( alertProtocol . wrap ( ) ) ; \n\t\t\t\t} \n\t\t\t$F18071 alertProtocol . setProcessed ( ) ; \n\t\t\t} \n\t\tshutdown ( ) ; \n\t\tcloseTransportLayer ( ) ; \n\t\tsocket_was_closed = _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public JRangeSlider ( BoundedRangeModel model , int orientation , int direction ) { \n\tsuper . setFocusable ( _BOOL ) ; \n\tthis . model = model ; \n\tthis . orientation = orientation ; \n\tthis . direction = direction ; \n\tsetForeground ( Color . LIGHT_GRAY ) ; \n\tthis . lstnr = createListener ( ) ; \n\tmodel . addChangeListener ( lstnr ) ; \n\taddMouseListener ( this ) ; \n\taddMouseMotionListener ( this ) ; \n\taddKeyListener ( this ) ; \n\t} \n"}, {"code": "public static boolean isAutoNew ( Properties ctx ) { \n\t$F19273 ( ctx ) String s = getContext ( ctx , NUM00 ) ; \n\tif $F85112 ( s ) return _BOOL ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "public boolean canRead ( String path ) { \n\ttry { \n\t\tZipEntry entry = getZipEntry ( path ) ; \n\t\treturn entry != null && $F4925 ( entry ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\tlog . log ( Level . FINE , e . toString ( ) , e ) ; \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public static $F2469 andI ( $F2469 v , $F2469 o , int off ) { \n\tif ( off == NUM00 ) $F8587 ( andI , v , o ) if ( off < NUM00 ) $F39976 final int shiftWords = off > > > LONG_LOG2_SIZE ; \n\tfinal int shiftBits = off & LONG_LOG2_MASK ; \n\tif ( shiftWords >= v . length ) { \n\t\treturn v ; \n\t\t} \n\tif ( shiftBits == NUM00 ) { \n\t\tfinal int end = Math . min ( v . length , o . length + shiftWords ) ; \n\t\tfor ( int i = shiftWords ; \n\t\ti < end ; \n\t\ti ++ ) { \n\t\t\tv [ i ] &= o [ i - shiftWords ] ; \n\t\t\t} \n\t\tArrays . fill ( v , NUM00 , shiftWords , NUM00 ) ; \n\t\treturn v ; \n\t\t} \n\tfinal int unshiftBits = Long . SIZE - shiftBits ; \n\tfinal int end = Math . min ( v . length , o . length + shiftWords ) - NUM00 ; \n\tArrays . fill ( v , end + NUM00 , v . length , NUM00 ) ; \n\tfor ( int i = end ; \n\ti > shiftWords ; \n\ti -- ) { \n\t\tfinal int src = i - shiftWords ; \n\t\tv [ i ] &= ( o [ src ] < < shiftBits ) | ( o [ src - NUM00 ] > > > unshiftBits ) ; \n\t\t} \n\tv [ shiftWords ] &= o [ NUM00 ] < < shiftBits ; \n\tArrays . fill ( v , NUM00 , shiftWords , NUM00 ) ; \n\treturn v ; \n\t} \n"}, {"code": "$F53919 ( widthSize , mode , initResourcesIfNecessary , itemsLayout , LayoutParams , MeasureSpec , width , PADDING , Math , getSuggestedMinimumWidth ) "}, {"code": "public boolean equals ( Object p_test ) { \n\tif ( p_test instanceof URI ) { \n\t\tURI testURI = ( URI ) p_test ; \n\t\tif ( $F29474 ( m_scheme , testURI ) && $F29474 ( m_userinfo , testURI ) && $F29474 ( m_host , testURI ) && m_port == testURI . m_port && $F29474 ( m_path , testURI ) && $F29474 ( m_queryString , testURI ) && $F29474 ( m_fragment , testURI ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void testCase5 $F72 { \n\t$F15139 $F10679 int aSign = NUM00 ; \n\tint bSign = - NUM00 ; \n\tbyte $F3018 = { \n\t\t- NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } \n\t; \n\t$F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F7838 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , result ) } \n"}, {"code": "public ISAACRandom $F72 { \n\tsetSeed ( System . currentTimeMillis ( ) + System . identityHashCode ( this ) ) ; \n\t} \n"}, {"code": "public static boolean isMD5String ( final String string ) { \n\t$F1832 ( Preconditions , string ) return $F1277 ( string ) && isHexString ( string ) ; \n\t} \n"}, {"code": "public synchronized void waitForSubmittedTasks $F72 throws InterruptedException { \n\twhile $F15855 ( currentTaskCount ) $F5795 ( waitForSingleTask ) } \n"}, {"code": "private int scanToken ( int startPos ) { \n\tint position = startPos ; \n\twhile ( position < maxPosition ) { \n\t\tif ( ! hasSurrogates ) { \n\t\t\t$F1280 ( c , str , position ) if ( ( c <= maxDelimCodePoint ) && $F358955 ( delimiters , c ) ) $F597 position ++ ; \n\t\t\t} \n\t\telse { \n\t\t\t$F207694 ( c , str , position ) if ( ( c <= maxDelimCodePoint ) && isDelimiter ( c ) ) $F597 position += Character . charCount ( c ) ; \n\t\t\t} \n\t\t} \n\tif ( retDelims && ( startPos == position ) ) { \n\t\tif ( ! hasSurrogates ) { \n\t\t\t$F1280 ( c , str , position ) if ( ( c <= maxDelimCodePoint ) && $F358955 ( delimiters , c ) ) position ++ ; \n\t\t\t} \n\t\telse { \n\t\t\t$F207694 ( c , str , position ) if ( ( c <= maxDelimCodePoint ) && isDelimiter ( c ) ) position += Character . charCount ( c ) ; \n\t\t\t} \n\t\t} \n\treturn position ; \n\t} \n"}, {"code": "public void zoomAt $F12359 ( x , y , z , zoomValue ) { \n\t$F1986 diff = { \n\t\ttargetXoff - x , targetYoff - y , z - targetZoff } \n\t; \n\tdouble length = Math . sqrt ( $F43608 ( diff ) + $F43608 ( diff ) + $F43608 ( diff ) ) ; \n\t$F85331 ( length ) $F1986 normalized = { \n\t\tdiff [ NUM00 ] / length , diff [ NUM00 ] / length , diff [ NUM00 ] / length } \n\t; \n\tdouble percent = zoomValue / normalized [ NUM00 ] ; \n\tmoveToPosition ( - ( float ) ( targetXoff + normalized [ NUM00 ] * percent ) , - ( float ) ( targetYoff + normalized [ NUM00 ] * percent ) ) ; \n\tzoomToCamera ( ( float ) ( targetZoff + normalized [ NUM00 ] * percent ) ) ; \n\t} \n"}, {"code": "private static int stringToHash ( String s ) { \n\t$F1749 ( len , s ) int hash2 = NUM00 ; \n\tint hash = len ; \n\thash <<= NUM00 ; \n\thash += s . charAt ( NUM00 ) - NUM00 ; \n\tint j = len ; \n\tfor ( int i = NUM00 ; \n\ti < NUM00 && j > NUM00 ; \n\ti ++ ) { \n\t\tj -- ; \n\t\thash <<= NUM00 ; \n\t\thash += s . charAt ( j ) - NUM00 ; \n\t\thash2 <<= NUM00 ; \n\t\thash2 += s . charAt ( i ) - NUM00 ; \n\t\t} \n\treturn hash ^ hash2 ; \n\t} \n"}, {"code": "public void registerDenseFeatures ( ArrayList < FeatureFunction > featureFunctions ) { \n\tfor ( FeatureFunction feature : featureFunctions ) { \n\t\t$F5 names = feature . reportDenseFeatures ( denseFeatures . size ( ) ) ; \n\t\tfor ( String name : names ) { \n\t\t\tDENSE_FEATURE_NAMES . add ( name ) ; \n\t\t\t$F3761 ( denseFeatures , getSparse , name ) sparseFeatures . remove ( name ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void addFlag ( $F20109 ( args ) , final String argName , final boolean value ) { \n\t$F46023 ( value , args , argName ) } \n"}, {"code": "public static PrivateKey load ( InputStream is ) throws IOException , CryptoException { \n\t$F96 pvk = ReadUtil . readFully ( is ) ; \n\t$F23500 ( bb , ByteBuffer , pvk ) $F31290 ( bb , ByteOrder ) long keyType = readReservedMagicKeyType ( bb ) ; \n\tlong encrypted = UnsignedUtil . getInt ( bb ) ; \n\tif ( encrypted != PVK_UNENCRYPTED ) { \n\t\tthrow new PrivateKeyEncryptedException ( MessageFormat . format ( res . getString ( NUM00 ) , Long . toHexString ( encrypted ) , Long . toHexString ( PVK_UNENCRYPTED ) ) ) ; \n\t\t} \n\tlong saltLength = UnsignedUtil . getInt ( bb ) ; \n\tif ( saltLength != UNENCRYPTED_SALT_LENGTH ) { \n\t\tthrow new CryptoException ( MessageFormat . format ( res . getString ( NUM00 ) , Long . toHexString ( saltLength ) , Long . toHexString ( UNENCRYPTED_SALT_LENGTH ) ) ) ; \n\t\t} \n\tlong keyLength = UnsignedUtil . getInt ( bb ) ; \n\treadPrivateKeyBlobHeader ( bb , keyType ) ; \n\t$F159436 ( privateKeyBlob , bb ) bb . get ( privateKeyBlob ) ; \n\tif ( keyLength != ( privateKeyBlob . length + BLOB_HEADER_LENGTH ) ) { \n\t\tthrow new CryptoException ( MessageFormat . format ( res . getString ( NUM00 ) , Long . toHexString ( keyLength ) , Long . toHexString ( privateKeyBlob . length + BLOB_HEADER_LENGTH ) ) ) ; \n\t\t} \n\treturn blobToPrivateKey ( privateKeyBlob ) ; \n\t} \n"}, {"code": "public static $F96 keyGenPrivate $F97 ( randomBytes ) throws NoSuchAlgorithmException , DigestException { \n\tif $F8830 ( randomBytes ) $F11389 $F5348 ( digest , MessageDigest ) digest . digest ( randomBytes , NUM00 , randomBytes . length ) ; \n\t$F96 privateKey = digest . digest ( ) ; \n\tprivateKey [ NUM00 ] &= NUM00 ; \n\tprivateKey [ NUM00 ] &= NUM00 ; \n\tprivateKey [ NUM00 ] |= NUM00 ; \n\treturn privateKey ; \n\t} \n"}, {"code": "private boolean isCheckpointTableExists ( Connection conn ) { \n\tStatement st = null ; \n\tResultSet rs = null ; \n\ttry { \n\t\t$F2715 ( st , conn ) rs = st . executeQuery ( chkTblExistsSql ) ; \n\t\treturn _BOOL ; \n\t\t} \n\tcatch ( SQLException ignored ) { \n\t\treturn _BOOL ; \n\t\t} \n\tfinally { \n\t\tU . close ( rs , log ) ; \n\t\tU . close ( st , log ) ; \n\t\t} \n\t} \n"}, {"code": "public FunctionTableModel $F72 { \n\tcolumnList . add ( Localisation . getString ( FunctionTableModel . class , NUM00 ) ) ; \n\tcolumnList . add ( Localisation . getString ( FunctionTableModel . class , NUM00 ) ) ; \n\tcolumnList . add ( Localisation . getString ( FunctionTableModel . class , NUM00 ) ) ; \n\tcolumnList . add ( Localisation . getString ( FunctionTableModel . class , NUM00 ) ) ; \n\t} \n"}, {"code": "private NewCookie createWsCookie ( String cookieName , String token , boolean setMaxAge , String userAgent ) { \n\tString ieExpires = NUM00 ; \n\tint maxAge = setMaxAge ? _tokenManager . getMaxTokenLifeTimeInSecs ( ) : NewCookie . DEFAULT_MAX_AGE ; \n\tif ( setMaxAge && StringUtils . contains ( userAgent , NUM00 ) ) { \n\t\tieExpires = NUM00 + getExpiredTimeGMT ( maxAge ) ; \n\t\t$F586 ( _log , ieExpires ) } \n\tif $F1032 ( token ) { \n\t\treturn new NewCookie ( cookieName , token + NUM00 + ieExpires , null , null , null , maxAge , _BOOL ) ; \n\t\t} \n\t$F1274 } \n"}, {"code": "protected void initView $F72 { \n\tp . setFakeBoldText ( _BOOL ) ; \n\tp . setAntiAlias ( _BOOL ) ; \n\tp . setTextSize ( MINI_DAY1BER_TEXT_SIZE ) ; \n\t$F5597 ( p , Style ) $F5590 ( mMonthNumPaint ) mMonthNumPaint . setFakeBoldText ( _BOOL ) ; \n\tmMonthNumPaint . setAntiAlias ( _BOOL ) ; \n\tmMonthNumPaint . setTextSize ( MINI_DAY1BER_TEXT_SIZE ) ; \n\tmMonthNumPaint . setColor ( mFocusMonthColor ) ; \n\t$F5597 ( mMonthNumPaint , Style ) $F5595 ( mMonthNumPaint , Align ) } \n"}, {"code": "$F6802 ( esd , connectionAllowed ) "}, {"code": "ScheduledFutureTask ( Runnable r , V result , long ns , long period ) { \n\tsuper ( r , result ) ; \n\tthis . time = ns ; \n\tthis . period = period ; \n\t$F56332 ( this , sequencer ) } \n"}, {"code": "public boolean verify ( X509Certificate cert , Provider sigProvider ) throws NoSuchAlgorithmException , CertificateExpiredException , CertificateNotYetValidException , CMSException { \n\tTime signingTime = getSigningTime ( ) ; \n\tif ( signingTime != null ) { \n\t\tcert . checkValidity ( signingTime . getDate ( ) ) ; \n\t\t} \n\treturn doVerify ( cert . getPublicKey ( ) , sigProvider ) ; \n\t} \n"}, {"code": "public GeoMark analyse ( final String text , final $F806 tags , final int maxlength , final String salt ) { \n\tGeoLocation loc = geocode ( text , tags , maxlength ) ; \n\tif ( loc != null ) return new GeoMark ( loc , salt ) ; \n\treturn reverse_geocode ( text ) ; \n\t} \n"}, {"code": "public void findAndInit ( Iterator it ) $F7686 ( it , findAndInit ) "}, {"code": "public void test_SelectOrderBy $F72 throws SQLException { \n\tString selectQuery = NUM00 + DatabaseCreator . ORDERS_TABLE + NUM00 ; \n\t$F15328 ( result , statement , selectQuery ) $F15277 ( values ) $F203638 ( values , Integer ) $F203638 ( values , Integer ) $F203638 ( values , Integer ) $F203638 ( values , Integer ) $F203638 ( values , Integer ) $F203638 ( values , Integer ) $F203638 ( values , Integer ) $F203638 ( values , Integer ) $F203638 ( values , Integer ) $F203638 ( values , Integer ) int index = NUM00 ; \n\twhile $F1682 ( result ) { \n\t\tInteger onum = result . getInt ( NUM00 ) ; \n\t\tassertTrue ( NUM00 , values . contains ( onum ) ) ; \n\t\tassertEquals ( NUM00 , index , values . indexOf ( onum ) ) ; \n\t\tindex ++ ; \n\t\t} \n\t$F59 ( result ) } \n"}, {"code": "private static String formatTo2Digits ( String str ) { \n\tif $F3599 ( str ) $F21679 ( str ) return str ; \n\t} \n"}, {"code": "protected static String quoteSQL ( Object data , int type ) throws SQLException { \n\t$F4158 ( data ) switch ( type ) { \n\t\tcase Types . BIT : case Types . BOOLEAN : case Types . INTEGER : case Types . BIGINT : case Types . DECIMAL : case Types . DOUBLE : case Types . FLOAT : case Types . NUMERIC : case Types . REAL : case Types . SMALLINT : case Types . TINYINT : $F92 ( data ) case Types . DATE : case Types . TIME : case Types . TIMESTAMP : case Types . LONGVARCHAR : case Types . CHAR : case Types . VARCHAR : $F17718 ( quoteString , data ) case Types . VARBINARY : case Types . LONGVARBINARY : case Types . BINARY : if ( data instanceof UUID ) { \n\t\t\treturn $F369 ( data ) ; \n\t\t\t} \n\t\treturn NUM00 + StringUtils . convertBytesToHex ( $F2457 ( data ) ) + NUM00 ; \n\t\tcase Types . CLOB : case Types . JAVA_OBJECT : case Types . OTHER : case Types . BLOB : case Types . STRUCT : case Types . REF : case Types . NULL : case Types . ARRAY : case Types . DATALINK : case Types . DISTINCT : throw throwException ( NUM00 + type ) ; \n\t\t$F1267 $F1278 } \n\t} \n"}, {"code": "public void addFooterView $F123554 ( v , data , isSelectable ) { \n\t$F123559 ( info ) info . view = v ; \n\tinfo . data = data ; \n\tinfo . isSelectable = isSelectable ; \n\tmFooterViewInfos . add ( info ) ; \n\tif ( mAdapter != null && mObserver != null ) { \n\t\tmObserver . onChanged ( ) ; \n\t\t} \n\t} \n"}, {"code": "public static int calculateDigitCount ( long value ) { \n\tif ( value < NUM00 ) { \n\t\tif ( value != Long . MIN_VALUE ) { \n\t\t\treturn calculateDigitCount ( - value ) + NUM00 ; \n\t\t\t} \n\t\telse $F1083 } \n\treturn ( value < NUM00 ? NUM00 : ( value < NUM00 ? NUM00 : ( value < NUM00 ? NUM00 : ( value < NUM00 ? NUM00 : ( ( int ) $F159551 ( Math , value , LOG_10 ) + NUM00 ) ) ) ) ) ; \n\t} \n"}, {"code": "public static Byte [ ] convertDate ( String date ) { \n\t$F70316 ( st , date ) $F8095 ( sdate , st ) $F8095 ( stime , st ) $F49888 ( st , sdate ) $F8095 ( year , st ) int iyear = NUM00 ; \n\ttry $F37473 ( iyear , Integer , year ) catch ( NumberFormatException ex ) $F142113 ( debug , year ) byte yrlow = $F8046 ( iyear ) ; \n\tbyte yrhigh = ( byte ) ( $F84702 ( iyear ) & NUM00 ) ; \n\t$F8095 ( month , st ) $F8095 ( day , st ) $F49888 ( st , stime ) $F8095 ( hour , st ) $F8095 ( min , st ) $F8095 ( sec , st ) Byte bz = Byte . valueOf ( $F19905 ) ; \n\tByte byrhi = bz ; \n\tByte byrlo = bz ; \n\tByte bmo = bz ; \n\tByte bdy = bz ; \n\tByte bhr = bz ; \n\tByte bmn = bz ; \n\tByte bsc = bz ; \n\ttry { \n\t\tbyrhi = new Byte ( yrhigh ) ; \n\t\tbyrlo = new Byte ( yrlow ) ; \n\t\tbmo = new Byte ( month ) ; \n\t\tbdy = new Byte ( day ) ; \n\t\tbhr = new Byte ( hour ) ; \n\t\tbmn = new Byte ( min ) ; \n\t\tbsc = new Byte ( sec ) ; \n\t\t} \n\tcatch ( NumberFormatException ex ) { \n\t\tdebug . error ( NUM00 + NUM00 + sdate + NUM00 + stime ) ; \n\t\t} \n\tByte [ ] ret = new Byte $F380 ; \n\tret [ NUM00 ] = byrhi ; \n\tret [ NUM00 ] = byrlo ; \n\tret [ NUM00 ] = bmo ; \n\tret [ NUM00 ] = bdy ; \n\tret [ NUM00 ] = bhr ; \n\tret [ NUM00 ] = bmn ; \n\tret [ NUM00 ] = bsc ; \n\tret [ NUM00 ] = bz ; \n\treturn ret ; \n\t} \n"}, {"code": "private void parseAndAdd ( String line , BufferedReader reader ) throws IOException { \n\ttry { \n\t\t$F17727 ( tokenizer , line ) $F8095 ( tag , tokenizer ) if $F3057 ( tag ) { \n\t\t\t$F188732 ( continuityWeight , Integer , tokenizer ) } \n\t\telse if $F3057 ( tag ) { \n\t\t\t$F188732 ( optimalCoupling , Integer , tokenizer ) } \n\t\telse if $F3057 ( tag ) { \n\t\t\t$F188732 ( extendSelections , Integer , tokenizer ) } \n\t\telse if $F3057 ( tag ) { \n\t\t\t$F188732 ( joinMethod , Integer , tokenizer ) } \n\t\telse if $F3057 ( tag ) { \n\t\t\t$F24697 ( numWeights , Integer , tokenizer ) $F3936 ( joinWeights , numWeights ) for ( $F119 ( i , numWeights ) ) { \n\t\t\t\tjoinWeights [ i ] = Integer . parseInt ( tokenizer . nextToken ( ) ) ; \n\t\t\t\t} \n\t\t\tjoinWeightShift = calcJoinWeightShift ( joinWeights ) ; \n\t\t\t} \n\t\telse if $F3057 ( tag ) { \n\t\t\t$F8095 ( name , tokenizer ) if $F3057 ( name ) { \n\t\t\t\tsts = new SampleSet ( tokenizer , reader ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tmcep = new SampleSet ( tokenizer , reader ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse if $F3057 ( tag ) { \n\t\t\t$F24697 ( type , Integer , tokenizer ) $F24697 ( phone , Integer , tokenizer ) $F24697 ( start , Integer , tokenizer ) $F24697 ( end , Integer , tokenizer ) $F24697 ( prev , Integer , tokenizer ) $F24697 ( next , Integer , tokenizer ) DatabaseClusterUnit unit = new DatabaseClusterUnit ( type , phone , start , end , prev , next ) ; \n\t\t\tunitList . add ( unit ) ; \n\t\t\t} \n\t\telse if $F3057 ( tag ) { \n\t\t\t$F8095 ( name , tokenizer ) $F24697 ( nodes , Integer , tokenizer ) CART cart = new CARTImpl ( reader , nodes ) ; \n\t\t\tcartMap . put ( name , cart ) ; \n\t\t\t$F13265 ( defaultCart , cart ) } \n\t\telse if $F3057 ( tag ) { \n\t\t\t$F8095 ( name , tokenizer ) $F24697 ( start , Integer , tokenizer ) $F24697 ( count , Integer , tokenizer ) UnitType unitType = new UnitType ( name , start , count ) ; \n\t\t\tunitTypesList . add ( unitType ) ; \n\t\t\t} \n\t\telse { \n\t\t\tthrow new Error $F6486 ( tag , line ) ; \n\t\t\t} \n\t\t} \n\tcatch ( NoSuchElementException nse ) $F220112 ( nse ) catch ( NumberFormatException nfe ) { \n\t\tthrow new Error ( $F6165 ( line , nfe ) ) ; \n\t\t} \n\t} \n"}, {"code": "public String byteStringNoSemicolon $F72 { \n\t$F83 ( retval ) try { \n\t\twhile ( _BOOL ) { \n\t\t\tchar next = lookAhead ( NUM00 ) ; \n\t\t\tif $F120925 ( next ) $F5153 else { \n\t\t\t\tconsume ( NUM00 ) ; \n\t\t\t\tretval . append ( next ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tcatch ( ParseException ex ) $F2495 ( retval ) $F92 ( retval ) } \n"}, {"code": "public void testNegNegFirstLonger $F72 { \n\t$F37335 $F37339 int aSign = - NUM00 ; \n\tint bSign = - NUM00 ; \n\tbyte $F3018 = { \n\t\t- NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 } \n\t; \n\t$F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F45034 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , result ) } \n"}, {"code": "public static void println ( double x ) $F18992 ( out , x ) "}, {"code": "public boolean subscribeTopic ( $F4170 Context context , $F4170 $F806 newTopics ) { \n\t$F88859 ( initialized , init , context ) $F41350 ( newTopics , _BOOL ) if ( null == topics ) { \n\t\t$F9404 ( topics ) } \n\tfor ( String topic : newTopics ) { \n\t\t$F16222 ( topics , topic , _BOOL ) topics . add ( topic ) ; \n\t\t} \n\tsaveSubscibedTopics ( context ) ; \n\tIntent intent = new Intent ( context , RegistrationIntentService . class ) ; \n\tintent . setAction ( RegistrationIntentService . ACTION_SUBSCRIBE ) ; \n\tintent . putExtra ( RegistrationIntentService . EXTRA_TOPIC_LIST , newTopics ) ; \n\tcontext . startService ( intent ) ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static String serialise ( Node node ) { \n\ttry { \n\t\t$F2218 ( registry , DOMImplementationRegistry ) DOMImplementationLS lsImpl = ( DOMImplementationLS ) registry . getDOMImplementation ( NUM00 ) ; \n\t\tLSSerializer serializer = lsImpl . createLSSerializer ( ) ; \n\t\treturn serializer . writeToString ( node ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F35577 ( log , e ) $F1278 } \n\t} \n"}, {"code": "public static boolean isOnSegment ( Geo a , Geo b , Geo i ) { \n\treturn ( ( a . distance ( i ) < a . distance ( b ) ) && ( b . distance ( i ) < b . distance ( a ) ) ) ; \n\t} \n"}, {"code": "public void addExtensionPoint ( ExtensionPoint extensionPoint ) $F207 ( fExtensionPoints , extensionPoint ) "}, {"code": "private List addNodeToList ( int startIndexForNode , int endIndexForNode ) { \n\t$F19151 ( localvmList ) for ( int i = startIndexForNode ; \n\ti < endIndexForNode ; \n\ti ++ ) $F24617 ( localvmList , vm , i ) return localvmList ; \n\t} \n"}, {"code": "public void addMetaMethod ( MetaMethod method ) { \n\tif ( isInitialized ( ) ) $F1666 ( method ) final CachedClass declaringClass = method . getDeclaringClass ( ) ; \n\taddMetaMethodToIndex ( method , metaMethodIndex . getHeader ( declaringClass . getTheClass ( ) ) ) ; \n\t} \n"}, {"code": "public void waitForEvent ( long timeout ) { \n\t$F686 ( thread , Thread ) Semaphore semaphore = _semaphores . get ( thread ) ; \n\tif ( semaphore == null ) { \n\t\tsemaphore = new Semaphore ( NUM00 , _BOOL ) ; \n\t\tsemaphore . drainPermits ( ) ; \n\t\t_semaphores . putIfAbsent ( thread , semaphore ) ; \n\t\t} \n\tsemaphore = _semaphores . get ( thread ) ; \n\ttry { \n\t\tsemaphore . tryAcquire ( timeout , TimeUnit . MILLISECONDS ) ; \n\t\t} \n\tcatch ( InterruptedException exception ) { \n\t\tlogger . log ( Level . FINER , NUM00 , exception ) ; \n\t\t} \n\t} \n"}, {"code": "public String stringValue $F72 { \n\tObject cv = Assert . checkNonNull ( constValue ( ) ) ; \n\t$F92 ( cv ) } \n"}, {"code": "public Date parseDate ( String str ) { \n\ttry $F57093 ( dateFormat , str ) catch ( $F105392 e ) $F9491 ( e ) } \n"}, {"code": "default int hash32 ( String value ) $F26006 ( hash32 , value ) "}, {"code": "public Name addAll ( Name suffix ) throws InvalidNameException { \n\treturn addAll ( size ( ) , suffix ) ; \n\t} \n"}, {"code": "public final InputStream asInputStream $F72 throws UnknownResourceException $F2905 ( toInputStream ) "}, {"code": "private static double euclideanNorm ( double vector [ ] ) { \n\tint n = vector . length ; \n\t$F96078 ( n ) if ( n == NUM00 ) { \n\t\treturn Math . abs ( vector [ NUM00 ] ) ; \n\t\t} \n\tdouble scale = NUM00 ; \n\tdouble sum = NUM00 ; \n\tfor ( $F119 ( i , n ) ) { \n\t\tif ( vector [ i ] != NUM00 ) { \n\t\t\tdouble abs = Math . abs ( vector [ i ] ) ; \n\t\t\tif ( scale < abs ) { \n\t\t\t\tdouble t = scale / abs ; \n\t\t\t\tsum = NUM00 + sum * ( t * t ) ; \n\t\t\t\tscale = abs ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tdouble t = abs / scale ; \n\t\t\t\tsum += t * t ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn scale * Math . sqrt ( sum ) ; \n\t} \n"}, {"code": "public static FileDescriptor createSocket $F72 throws IOException { \n\tif ( ! isSupported ) $F5788 int fdVal = create0 ( ) ; \n\tFileDescriptor $F23044 ( fd ) ; \n\tfdAccess . set ( fd , fdVal ) ; \n\treturn fd ; \n\t} \n"}, {"code": "public static Grammar doTheMerges ( Grammar grammar , Lexicon lexicon , boolean [ ] [ ] [ ] mergeThesePairs , $F28974 ( mergeWeights ) ) { \n\t$F5078 numSubStatesArray = grammar . numSubStates ; \n\t$F5078 newNumSubStatesArray = grammar . numSubStates ; \n\tGrammar newGrammar = null ; \n\twhile ( _BOOL ) { \n\t\tboolean somethingToMerge = _BOOL ; \n\t\tfor ( $F1139 ( tag , numSubStatesArray ) ) { \n\t\t\tfor ( $F66767 ( i , newNumSubStatesArray , tag ) ) { \n\t\t\t\tfor ( $F66767 ( j , newNumSubStatesArray , tag ) ) { \n\t\t\t\t\tsomethingToMerge = somethingToMerge || mergeThesePairs [ tag ] [ i ] [ j ] ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t$F91251 ( somethingToMerge ) boolean [ ] [ ] [ ] mergeThisIteration = new boolean [ newNumSubStatesArray . length ] [ ] [ ] ; \n\t\tfor ( $F1139 ( tag , numSubStatesArray ) ) { \n\t\t\tmergeThisIteration [ tag ] = new boolean [ mergeThesePairs [ tag ] . length ] [ mergeThesePairs [ tag ] . length ] ; \n\t\t\tfor ( $F179379 ( i , mergeThesePairs , tag ) ) { \n\t\t\t\tfor ( $F179379 ( j , mergeThesePairs , tag ) ) { \n\t\t\t\t\tmergeThisIteration [ tag ] [ i ] [ j ] = mergeThesePairs [ tag ] [ i ] [ j ] ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tfor ( $F1139 ( tag , numSubStatesArray ) ) { \n\t\t\t$F8748 alreadyDecidedToMerge = new boolean [ mergeThesePairs [ tag ] . length ] ; \n\t\t\tfor ( $F179379 ( i , mergeThesePairs , tag ) ) { \n\t\t\t\tfor ( $F179379 ( j , mergeThesePairs , tag ) ) { \n\t\t\t\t\tif ( alreadyDecidedToMerge [ i ] || alreadyDecidedToMerge [ j ] ) mergeThisIteration [ tag ] [ i ] [ j ] = _BOOL ; \n\t\t\t\t\talreadyDecidedToMerge [ i ] = alreadyDecidedToMerge [ i ] || mergeThesePairs [ tag ] [ i ] [ j ] ; \n\t\t\t\t\talreadyDecidedToMerge [ j ] = alreadyDecidedToMerge [ j ] || mergeThesePairs [ tag ] [ i ] [ j ] ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tfor ( $F1139 ( tag , numSubStatesArray ) ) { \n\t\t\tfor ( $F179379 ( i , mergeThesePairs , tag ) ) { \n\t\t\t\tfor ( $F179379 ( j , mergeThesePairs , tag ) ) { \n\t\t\t\t\tmergeThesePairs [ tag ] [ i ] [ j ] = mergeThesePairs [ tag ] [ i ] [ j ] && ! mergeThisIteration [ tag ] [ i ] [ j ] ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tnewGrammar = grammar . mergeStates ( mergeThisIteration , mergeWeights ) ; \n\t\tlexicon . mergeStates ( mergeThisIteration , mergeWeights ) ; \n\t\tgrammar . fixMergeWeightsEtc ( mergeThesePairs , mergeWeights , mergeThisIteration ) ; \n\t\tgrammar = newGrammar ; \n\t\tnewNumSubStatesArray = grammar . numSubStates ; \n\t\t} \n\tgrammar . makeCRArrays ( ) ; \n\treturn grammar ; \n\t} \n"}, {"code": "private static void extractFile ( ZipInputStream zipIn , String filePath ) throws IOException { \n\tBufferedOutputStream $F112784 ( bos , filePath ) ; \n\t$F2175 ( bytesIn , BUFFER_SIZE ) int read = NUM00 ; \n\twhile $F96840 ( read , zipIn , bytesIn ) $F29756 ( bos , bytesIn , read ) $F59 ( bos ) } \n"}, {"code": "public static final String squareToString ( int square ) { \n\t$F83 ( ret ) int x = Position . getX ( square ) ; \n\tint y = Position . getY ( square ) ; \n\t$F159538 ( ret , x ) $F159538 ( ret , y ) $F92 ( ret ) } \n"}, {"code": "protected void drawVerticalItem ( Graphics2D g2 , CategoryItemRendererState state , Rectangle2D dataArea , CategoryPlot plot , CategoryAxis domainAxis , ValueAxis rangeAxis , StatisticalCategoryDataset dataset , int visibleRow , int row , int column ) { \n\tdouble rectX = calculateBarW0 ( plot , PlotOrientation . VERTICAL , dataArea , domainAxis , state , visibleRow , column ) ; \n\tNumber meanValue = dataset . getMeanValue ( row , column ) ; \n\t$F2329 ( meanValue ) $F50466 ( value , meanValue ) double base = NUM00 ; \n\tdouble lclip = getLowerClip ( ) ; \n\tdouble uclip = getUpperClip ( ) ; \n\tif ( uclip <= NUM00 ) { \n\t\tif ( value >= uclip ) $F932 base = uclip ; \n\t\t$F78883 ( value , lclip ) } \n\telse if ( lclip <= NUM00 ) { \n\t\tif ( value >= uclip ) { \n\t\t\tvalue = uclip ; \n\t\t\t} \n\t\telse { \n\t\t\t$F78883 ( value , lclip ) } \n\t\t} \n\telse { \n\t\t$F152990 ( value , lclip ) base = getLowerClip ( ) ; \n\t\t$F33288 ( value , uclip ) } \n\t$F82906 ( yAxisLocation , plot ) $F31931 ( transY1 , rangeAxis , base , dataArea , yAxisLocation ) $F31931 ( transY2 , rangeAxis , value , dataArea , yAxisLocation ) $F59772 ( rectY , Math , transY2 , transY1 ) double rectWidth = state . getBarWidth ( ) ; \n\t$F14050 ( rectHeight , Math , transY2 , transY1 ) Rectangle2D bar = $F152596 ( rectX , rectY , rectWidth , rectHeight ) ; \n\tPaint itemPaint = getItemPaint ( row , column ) ; \n\tGradientPaintTransformer t = getGradientPaintTransformer ( ) ; \n\tif ( t != null && itemPaint instanceof GradientPaint ) { \n\t\titemPaint = t . transform ( ( GradientPaint ) itemPaint , bar ) ; \n\t\t} \n\tg2 . setPaint ( itemPaint ) ; \n\tg2 . fill ( bar ) ; \n\tif ( isDrawBarOutline ( ) && state . getBarWidth ( ) > BAR_OUTLINE_WIDTH_THRESHOLD ) { \n\t\tStroke stroke = getItemOutlineStroke ( row , column ) ; \n\t\tPaint paint = getItemOutlinePaint ( row , column ) ; \n\t\tif ( stroke != null && paint != null ) $F93649 ( g2 , stroke , paint , bar ) } \n\tNumber n = dataset . getStdDevValue ( row , column ) ; \n\tif ( n != null ) { \n\t\t$F50466 ( valueDelta , n ) double highVal = rangeAxis . valueToJava2D ( meanValue . doubleValue ( ) + valueDelta , dataArea , yAxisLocation ) ; \n\t\tdouble lowVal = rangeAxis . valueToJava2D ( meanValue . doubleValue ( ) - valueDelta , dataArea , yAxisLocation ) ; \n\t\tif ( this . errorIndicatorPaint != null ) { \n\t\t\tg2 . setPaint ( this . errorIndicatorPaint ) ; \n\t\t\t} \n\t\telse $F98606 ( g2 , getItemOutlinePaint , row , column ) if ( this . errorIndicatorStroke != null ) { \n\t\t\tg2 . setStroke ( this . errorIndicatorStroke ) ; \n\t\t\t} \n\t\telse { \n\t\t\t$F98595 ( g2 , getItemOutlineStroke , row , column ) } \n\t\tLine2D line ; \n\t\tline = new $F69931 ( rectX + rectWidth / NUM00 , lowVal , rectX + rectWidth / NUM00 , highVal ) ; \n\t\tg2 . draw ( line ) ; \n\t\tline = new $F69931 ( rectX + rectWidth / NUM00 - NUM00 , highVal , rectX + rectWidth / NUM00 + NUM00 , highVal ) ; \n\t\tg2 . draw ( line ) ; \n\t\tline = new $F69931 ( rectX + rectWidth / NUM00 - NUM00 , lowVal , rectX + rectWidth / NUM00 + NUM00 , lowVal ) ; \n\t\tg2 . draw ( line ) ; \n\t\t} \n\tCategoryItemLabelGenerator generator = getItemLabelGenerator ( row , column ) ; \n\tif ( generator != null && isItemLabelVisible ( row , column ) ) $F98616 ( drawItemLabel , g2 , dataset , row , column , plot , generator , bar , value ) $F98625 ( entities , state ) $F98626 ( entities , addItemEntity , dataset , row , column , bar ) } \n"}, {"code": "public static boolean hasValidCover ( IGame game , Coords pos , int elevation ) { \n\tif ( ( pos == null ) || ( elevation > NUM00 ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tboolean hasMovedEntity = _BOOL ; \n\tfor ( Entity e : game . getEntitiesVector ( pos ) ) { \n\t\tif ( e . isDone ( ) && ! ( e instanceof Infantry ) && ( e . getElevation ( ) == elevation ) ) $F3468 ( hasMovedEntity , _BOOL ) } \n\tif ( ! hasMovedEntity ) { \n\t\tEnumeration $F37552 wrecks = game . getWreckedEntities ( ) ; \n\t\twhile $F1444 ( wrecks ) { \n\t\t\tEntity e = wrecks . nextElement ( ) ; \n\t\t\tif ( pos . equals ( e . getPosition ( ) ) && ! ( e instanceof Infantry ) ) { \n\t\t\t\thasMovedEntity = _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn hasMovedEntity ; \n\t} \n"}, {"code": "public static $F19578 computeTangentsThroughPoint ( Coordinate circleCenter , double radius , Coordinate point ) { \n\t$F19578 ret = new Coordinate $F380 ; \n\tdouble dx = $F27158 ( point , circleCenter ) / NUM00 ; \n\tdouble dy = $F27159 ( point , circleCenter ) / NUM00 ; \n\t$F25559 ( d , Math , dx , dy ) double a = ( radius * radius ) / ( NUM00 * d ) ; \n\tdouble x2 = circleCenter . x + ( dx * a / d ) ; \n\tdouble y2 = circleCenter . y + ( dy * a / d ) ; \n\tdouble h = Math . sqrt ( radius * radius - a * a ) ; \n\tdouble rx = - dy * ( h / d ) ; \n\tdouble ry = dx * ( h / d ) ; \n\tdouble xi = x2 + rx ; \n\tdouble yi = y2 + ry ; \n\tdouble xiPrime = x2 - rx ; \n\tdouble yiPrime = y2 - ry ; \n\tret [ NUM00 ] = new Coordinate ( point ) ; \n\tret [ NUM00 ] = new Coordinate ( xi , yi ) ; \n\tret [ NUM00 ] = new Coordinate ( xiPrime , yiPrime ) ; \n\treturn ret ; \n\t} \n"}, {"code": "public void addGroup ( GroupConfigInterface subGroup ) $F207 ( subGroupList , subGroup ) "}, {"code": "public void startScanning ( final BeaconServiceConnection serviceConnection ) { \n\tfinal Cursor cursor = mDatabaseHelper . getAllRegions ( ) ; \n\twhile $F12260 ( cursor ) { \n\t\tfinal UUID uuid = UUID . fromString ( cursor . getString ( NUM00 ) ) ; \n\t\tfinal int major = cursor . getInt ( NUM00 ) ; \n\t\tfinal int minor = cursor . getInt ( NUM00 ) ; \n\t\tfinal int event = cursor . getInt ( NUM00 ) ; \n\t\tserviceConnection . startRangingBeaconsInRegion ( BeaconsFragment . BEACON_COMPANY_ID , uuid , major , minor , this ) ; \n\t\tif ( event == BeaconContract . EVENT_IN_RANGE || event == BeaconContract . EVENT_OUT_OF_RANGE ) serviceConnection . startMonitoringForRegion ( BeaconsFragment . BEACON_COMPANY_ID , uuid , major , minor , this ) ; \n\t\t} \n\t} \n"}, {"code": "public void testDivideRoundHalfDownNeg1 $F72 $F148774 ( a , aScale , b , bScale , c , resScale , aNumber , bNumber , result , BigDecimal , assertEquals ) "}, {"code": "public static boolean isHeader ( Header hdr ) { \n\treturn hdr . getBooleanValue ( ZIMAGE , _BOOL ) ; \n\t} \n"}, {"code": "public static InfoRegister createFolder ( User user , Integer bookId , List atts , List inter , Map documents , String entidad , boolean consolidacion ) throws ValidationException , SecurityException , BookException , SessionException , TecDocException , ParseException , AttributesException { \n\tInfoRegister result = new InfoRegister $F72 ; \n\t$F153364 ( sessionID ) try { \n\t\tsessionID = Login . login ( user , entidad ) ; \n\t\tsetOfficeUserRegister ( entidad , sessionID , atts ) ; \n\t\tBookSession . openBook ( sessionID , bookId , entidad ) ; \n\t\tInteger launchDistOutRegister = RegisterServicesUtil . getInvesConfActions ( entidad ) ; \n\t\tRegisterServicesUtil . canCreateFolder ( sessionID , bookId , documents , user , atts , entidad , consolidacion ) ; \n\t\tAxSf axsfQ = BookSession . getFormFormat ( sessionID , bookId , entidad ) ; \n\t\tFieldFormat fieldFormat = RegisterServicesUtil . getFieldFormat ( sessionID , bookId ) ; \n\t\tMap translatedIds = RegisterServicesUtil . getFieldsWithSustitute ( atts , axsfQ , sessionID , bookId , entidad ) ; \n\t\tAxSf newAxSF = RegisterServicesUtil . initInOrOutFolder ( user , axsfQ ) ; \n\t\tnewAxSF = RegisterServicesUtil . completeFolder ( translatedIds , axsfQ , newAxSF , user . getLocale ( ) , atts , fieldFormat , consolidacion ) ; \n\t\tFolderDataSession data = Register . createNewFolder ( sessionID , bookId , newAxSF , inter , documents , launchDistOutRegister , user . getLocale ( ) , entidad , consolidacion ) ; \n\t\tresult = ConsultRegister . consultRegisterInfo ( bookId , data . getAxsfNew ( ) , data . getNewRegisterID ( ) , data . getScrofic ( ) , data . getUserName ( ) , user . getLocale ( ) ) ; \n\t\t} \n\tfinally { \n\t\tBookSession . closeBook ( sessionID , bookId ) ; \n\t\tSecuritySession . logout ( sessionID , entidad ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "$F136015 ( fInputStream ) "}, {"code": "private void handleSubscriptionError ( AzureAllocationContext ctx , String namespace , Throwable e ) { \n\tif ( e instanceof CloudException ) { \n\t\tCloudException ce = ( CloudException ) e ; \n\t\tCloudError body = ce . getBody ( ) ; \n\t\tif ( body != null ) { \n\t\t\tString code = body . getCode ( ) ; \n\t\t\tif $F1238 ( MISSING_SUBSCRIPTION_CODE , code ) $F47994 ( registerSubscription , ctx , namespace ) } \n\t\t} \n\thandleError ( ctx , e ) ; \n\t} \n"}, {"code": "public boolean hasShutdownHook ( Runnable shutdownHook ) $F298 ( hooks , shutdownHook ) "}, {"code": "$F1 public void endProcessSubTokens $F72 { \n\tif $F5973 ( skey ) { \n\t\tmap . put ( skey , sval ) ; \n\t\tskey = NUM00 ; \n\t\tsval = NUM00 ; \n\t\t} \n\t} \n"}, {"code": "private void heapifyDown ( $F62936 cur ) { \n\tfinal int stop = size > > > NUM00 ; \n\tint twopos = NUM00 ; \n\twhile ( twopos < stop ) { \n\t\tint $F76469 ( bestchild , twopos ) ; \n\t\t$F62936 best = twoheap [ bestchild ] ; \n\t\tfinal int right = bestchild + NUM00 ; \n\t\tif ( right < size && best . compareTo ( twoheap [ right ] ) > NUM00 ) { \n\t\t\tbestchild = right ; \n\t\t\tbest = twoheap [ right ] ; \n\t\t\t} \n\t\tif $F348512 ( cur , best ) $F5153 twoheap [ twopos ] = best ; \n\t\ttwopos = bestchild ; \n\t\t} \n\ttwoheap [ twopos ] = cur ; \n\t} \n"}, {"code": "public void addFeature ( IFeatureVector fv ) { \n\tidxList . addAll ( Ints . asList ( fv . getIndices ( ) ) ) ; \n\tvalList . addAll ( Floats . asList ( fv . getValues ( ) ) ) ; \n\t} \n"}, {"code": "protected void waitForExternalStoreMount $F72 throws Exception { \n\t$F139156 ( extStorageState , Environment ) int currentWaitTime = NUM00 ; \n\twhile ( ! extStorageState . equals ( Environment . MEDIA_MOUNTED ) ) { \n\t\t$F1594 ( Log , LOG_TAG ) currentWaitTime = timeoutWait ( currentWaitTime , DEFAULT_WAIT_POLL_TIME , DEFAULT_MAX_WAIT_TIME , NUM00 ) ; \n\t\textStorageState = Environment . getExternalStorageState ( ) ; \n\t\t} \n\t} \n"}, {"code": "public static DataDisplayTable listGlyphDimensionBounds ( Font font ) { \n\t$F64831 ( header ) $F218688 displayAlignment = { \n\t\tAlign . Left , Align . Right } \n\t; \n\t$F218697 ( table , Arrays , header ) $F218699 ( table , Arrays , displayAlignment ) LocaTable locaTable = FontUtils . getLocaTable ( font ) ; \n\tGlyphTable glyfTable = FontUtils . getGlyphTable ( font ) ; \n\tint xMin = Integer . MAX_VALUE ; \n\tint yMin = Integer . MAX_VALUE ; \n\tint xMax = Integer . MIN_VALUE ; \n\tint yMax = Integer . MIN_VALUE ; \n\tfor ( int i = NUM00 ; \n\ti < locaTable . numGlyphs ( ) ; \n\ti ++ ) { \n\t\tGlyph glyph = glyfTable . glyph ( locaTable . glyphOffset ( i ) , locaTable . glyphLength ( i ) ) ; \n\t\tif $F62004 ( glyph , xMin ) $F57332 ( xMin , glyph ) if $F62004 ( glyph , yMin ) $F57332 ( yMin , glyph ) if $F14791 ( glyph , xMax ) $F57332 ( xMax , glyph ) if $F14791 ( glyph , yMax ) $F57332 ( yMax , glyph ) } \n\ttable . add ( Arrays . asList ( new String [ ] { \n\t\tNUM00 , String . format ( NUM00 , xMin ) } \n\t) ) ; \n\ttable . add ( Arrays . asList ( new String [ ] { \n\t\tNUM00 , String . format ( NUM00 , xMax ) } \n\t) ) ; \n\ttable . add ( Arrays . asList ( new String [ ] { \n\t\tNUM00 , String . format ( NUM00 , yMin ) } \n\t) ) ; \n\ttable . add ( Arrays . asList ( new String [ ] { \n\t\tNUM00 , String . format ( NUM00 , yMax ) } \n\t) ) ; \n\treturn table ; \n\t} \n"}, {"code": "private boolean isInThumbRange ( float touchX , double normalizedThumbValue ) { \n\treturn Math . abs ( touchX - normalizedToScreen ( normalizedThumbValue ) ) <= thumbHalfWidth ; \n\t} \n"}, {"code": "public static $F96 str2UnicodeByteArray ( final JBBPByteOrder byteOrder , final String str ) { \n\tfinal $F96 result = new byte [ str . length ( ) < < NUM00 ] ; \n\tint index = NUM00 ; \n\tfor ( $F1088 ( i , str ) ) { \n\t\tfinal int val = str . charAt ( i ) ; \n\t\tswitch ( byteOrder ) { \n\t\t\tcase BIG_ENDIAN : { \n\t\t\t\t$F157410 ( result , index , val ) $F11740 ( result , index , val ) } \n\t\t\t$F597 case LITTLE_ENDIAN : { \n\t\t\t\t$F11740 ( result , index , val ) $F157410 ( result , index , val ) } \n\t\t\t$F597 $F1267 throw new Error ( NUM00 + byteOrder + NUM00 ) ; \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "private MethodDef parse_method ( StrTok st ) { \n\tString method_name = st . need_word ( ) ; \n\tst . need ( NUM00 ) ; \n\t$F22547 ( args ) $F8095 ( tok , st ) if ( tok != NUM00 ) { \n\t\tst . pushBack ( ) ; \n\t\tdo { \n\t\t\ttok = st . need_word ( ) ; \n\t\t\targs . add ( tok ) ; \n\t\t\t} \n\t\twhile ( st . nextToken ( ) == NUM00 ) ; \n\t\tst . pushBack ( ) ; \n\t\tst . need ( NUM00 ) ; \n\t\t} \n\t$F24901 targs = new Type $F2313 ( args ) ; \n\tfor ( $F2277 ( ii , args ) ) { \n\t\ttargs [ ii ] = BCELUtil . classname_to_type ( args . get ( ii ) ) ; \n\t\t} \n\treturn new MethodDef ( method_name , targs ) ; \n\t} \n"}, {"code": "private void writeExperiecedAndCausingPersonDelay $F72 { \n\tSortedMap < Double , Map < $F141376 , Double > > timeBin2AffectedPerson2Delay = getExperiencedPersonDelay ( NUM00 ) ; \n\tSortedMap < Double , Map < $F141376 , Double > > timeBin2CausingPerson2Delay = getCausingPersonDelay ( NUM00 ) ; \n\tif $F6887 ( timeBin2AffectedPerson2Delay ) $F11388 Map < $F141376 , Double > affectedperson2Delay = timeBin2AffectedPerson2Delay . get ( simulationEndTime ) ; \n\tMap < $F141376 , Double > causedPerson2Delay = timeBin2CausingPerson2Delay . get ( simulationEndTime ) ; \n\tBufferedWriter writer = IOUtils . getBufferedWriter ( runDir + NUM00 + pricingScenario + suffixForSoring + NUM00 ) ; \n\ttry { \n\t\t$F3410 ( writer ) for ( $F141376 id : causedPerson2Delay . keySet ( ) ) { \n\t\t\twriter . write ( id + NUM00 + pf . getMunichUserGroupFromPersonId ( id ) + NUM00 + affectedperson2Delay . get ( id ) / NUM00 + NUM00 + causedPerson2Delay . get ( id ) / NUM00 + NUM00 ) ; \n\t\t\t} \n\t\t$F59 ( writer ) } \n\tcatch ( Exception e ) $F1666 ( e ) } \n"}, {"code": "static List < $F11300 > partition ( final int binCount , final File ... files ) { \n\tfinal $F5237 $F42716 ( sort , Arrays , files ) ; \n\treturn binThem ( binCount , sort ) ; \n\t} \n"}, {"code": "private void calcBitePoint ( int centerX , int centerY , float circleEdgeX , float circleEdgeY , double biteLine , boolean isFirstBite , boolean isRandomBite ) { \n\tdouble bitePercent ; \n\tif ( isFirstBite ) { \n\t\tbiteX = ( int ) circleEdgeX ; \n\t\tbiteY = ( int ) circleEdgeY ; \n\t\t} \n\telse { \n\t\tbitePercent = biteRadius / biteLine ; \n\t\tif ( isRandomBite ) { \n\t\t\tbitePercent *= bitesTakenMap . get ( biteDirection ) ; \n\t\t\t} \n\t\telse { \n\t\t\tbitePercent *= ( numBitesForOneDirection - numBitesForOneDirectionLeft ) ; \n\t\t\t} \n\t\tbiteX = DrawUtils . getPointBetweenTwoPoints ( circleEdgeX , centerX , bitePercent ) ; \n\t\tbiteY = DrawUtils . getPointBetweenTwoPoints ( circleEdgeY , centerY , bitePercent ) ; \n\t\t} \n\t} \n"}, {"code": "private boolean zzRefill $F72 throws $F3258 { \n\t$F72981 ( zzStartRead , System , zzBuffer , zzEndRead , zzCurrentPos , zzMarkedPos , zzPushbackPos ) $F72988 ( zzCurrentPos , zzBuffer , System , newBuffer ) $F7994 ( numRead , zzReader , zzBuffer , zzEndRead ) $F72989 ( numRead , _BOOL , zzEndRead ) } \n"}, {"code": "private void updateBusinessObjectDefinitionEntityDescriptiveInformation ( BusinessObjectDefinitionEntity businessObjectDefinitionEntity , BusinessObjectDefinitionDescriptiveInformationUpdateRequest request ) { \n\t$F100328 ( businessObjectDefinitionEntity , request ) businessObjectDefinitionEntity . setDisplayName ( request . getDisplayName ( ) ) ; \n\tbusinessObjectDefinitionDao . saveAndRefresh ( businessObjectDefinitionEntity ) ; \n\t} \n"}, {"code": "$F1 public void onDownloadProgress ( DownloadProgressInfo progress ) { \n\tmAverageSpeed . setText ( getString ( R . string . kilobytes_per_second , Helpers . getSpeedString ( progress . mCurrentSpeed ) ) ) ; \n\tmTimeRemaining . setText ( getString ( R . string . time_remaining , Helpers . getTimeRemaining ( progress . mTimeRemaining ) ) ) ; \n\tprogress . mOverallTotal = progress . mOverallTotal ; \n\tmPB . setMax ( ( int ) ( progress . mOverallTotal > > NUM00 ) ) ; \n\tmPB . setProgress ( ( int ) ( progress . mOverallProgress > > NUM00 ) ) ; \n\tmProgressPercent . setText ( Long . toString ( progress . mOverallProgress * NUM00 / progress . mOverallTotal ) + NUM00 ) ; \n\tmProgressFraction . setText ( Helpers . getDownloadProgressString ( progress . mOverallProgress , progress . mOverallTotal ) ) ; \n\t} \n"}, {"code": "static public boolean isSameDay ( Timestamp one , Timestamp two ) { \n\t$F13064 ( calOne ) if ( one != null ) $F176384 ( calOne , one ) $F13064 ( calTwo ) if ( two != null ) $F176384 ( calTwo , two ) if ( $F183169 ( calOne , Calendar , calTwo ) && $F21623 ( calOne , Calendar ) == $F21623 ( calTwo , Calendar ) && $F21625 ( calOne , Calendar ) == $F21625 ( calTwo , Calendar ) ) return _BOOL ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static void updateAllForFacade ( DataStore dataStore , Iterable < Update > updates ) { \n\tupdateAllForFacade ( dataStore , updates . iterator ( ) ) ; \n\t} \n"}, {"code": "public ArrayFieldVector ( FieldVector $F4203 v1 , FieldVector $F4203 v2 ) throws NullArgumentException { \n\tMathUtils . checkNotNull ( v1 ) ; \n\tMathUtils . checkNotNull ( v2 ) ; \n\tfield = v1 . getField ( ) ; \n\tfinal $F10809 v1Data = ( v1 instanceof ArrayFieldVector ) ? ( ( ArrayFieldVector $F4203 ) v1 ) . data : v1 . toArray ( ) ; \n\tfinal $F10809 v2Data = ( v2 instanceof ArrayFieldVector ) ? ( ( ArrayFieldVector $F4203 ) v2 ) . data : v2 . toArray ( ) ; \n\tdata = MathArrays . buildArray ( field , v1Data . length + v2Data . length ) ; \n\t$F7057 ( System , v1Data , data ) $F11244 ( System , v2Data , data , v1Data ) } \n"}, {"code": "public boolean equals ( Object o ) { \n\tif ( o instanceof ServiceConfigManager ) { \n\t\tServiceConfigManager oscm = ( ServiceConfigManager ) o ; \n\t\tif ( $F142656 ( serviceName , oscm , version ) ) $F3139 ( _BOOL ) } \n\treturn ( _BOOL ) ; \n\t} \n"}, {"code": "public void addItemBoundsListener ( ItemBoundsListener ibl ) { \n\tif ( m_bounders == null ) m_bounders = new CopyOnWriteArrayList $F72 ; \n\tm_bounders . add ( ibl ) ; \n\t} \n"}, {"code": "public static S2CellId fromFaceIJ $F14337 ( face , i , j ) { \n\tlong n [ ] = { \n\t\tNUM00 , face < < ( POS_BITS - NUM00 ) } \n\t; \n\tint bits = ( face & SWAP_MASK ) ; \n\tfor ( int k = NUM00 ; \n\tk >= NUM00 ; \n\t-- k ) { \n\t\tbits = getBits ( n , i , j , k , bits ) ; \n\t\t} \n\tS2CellId s = new S2CellId ( ( ( $F42449 ( n ) + n [ NUM00 ] ) < < NUM00 ) + NUM00 ) ; \n\treturn s ; \n\t} \n"}, {"code": "public void increaseDpi $F72 { \n\tif ( this . currentDpiPos < ( this . dpiSizes . length - NUM00 ) ) { \n\t\t++ this . currentDpiPos ; \n\t\t} \n\t} \n"}, {"code": "StringVector processPREFIX_URLLIST $F17723 ( handler , uri , name , rawName , value ) throws $F2253 { \n\t$F17727 ( tokenizer , value ) $F17729 ( nStrings , tokenizer ) $F17731 ( strings , nStrings ) for ( $F119 ( i , nStrings ) ) { \n\t\t$F8095 ( prefix , tokenizer ) String url = handler . getNamespaceForPrefix ( prefix ) ; \n\t\tif ( url != null ) strings . addElement ( url ) ; \n\t\telse throw new $F2253 ( XSLMessages . createMessage ( XSLTErrorResources . ER_CANT_RESOLVE_NSPREFIX , $F8844 ( prefix ) ) ) ; \n\t\t} \n\treturn strings ; \n\t} \n"}, {"code": "$F1 public void write ( DataOutput out ) throws IOException { \n\tout . writeLong ( duration ) ; \n\t$F75558 ( out , getLength ) for ( $F1139 ( i , coeffs ) ) $F304625 ( out , coeffs , i ) } \n"}, {"code": "private void addSharingProfiles ( Collection < SharingProfile > sharingProfiles ) throws GuacamoleException { \n\tfor ( SharingProfile sharingProfile : sharingProfiles ) { \n\t\tString primaryConnectionIdentifier = sharingProfile . getPrimaryConnectionIdentifier ( ) ; \n\t\tAPIConnection primaryConnection = retrievedConnections . get ( primaryConnectionIdentifier ) ; \n\t\tif ( primaryConnection != null ) { \n\t\t\tCollection < APISharingProfile > children = primaryConnection . getSharingProfiles ( ) ; \n\t\t\tif ( children == null ) { \n\t\t\t\tchildren = new ArrayList < APISharingProfile > $F72 ; \n\t\t\t\tprimaryConnection . setSharingProfiles ( children ) ; \n\t\t\t\t} \n\t\t\tchildren . add ( new APISharingProfile ( sharingProfile ) ) ; \n\t\t\t} \n\t\telse logger . debug ( $F38 , sharingProfile . getIdentifier ( ) , primaryConnectionIdentifier ) ; \n\t\t} \n\t} \n"}, {"code": "public void failoverCopy ( RPCopyRequestParams copyToFailoverTo ) throws RecoverPointException { \n\tString bookmarkName = copyToFailoverTo . getBookmarkName ( ) ; \n\tDate apitTime = copyToFailoverTo . getApitTime ( ) ; \n\tif ( bookmarkName != null ) $F10090 ( logger , bookmarkName ) else if ( apitTime != null ) { \n\t\t$F209111 ( logger , apitTime ) } \n\telse $F22715 ( logger ) RecoverPointImageManagementUtils imageManager = new RecoverPointImageManagementUtils $F72 ; \n\timageManager . enableCopyImage ( functionalAPI , copyToFailoverTo , _BOOL ) ; \n\t} \n"}, {"code": "private static void prepareLoggingSystemEnviroment $F72 { \n\tSystem . setProperty ( NUM00 , getLogFolder ( ) ) ; \n\t} \n"}, {"code": "public StateAttribute $F97 ( octets ) { \n\tsuper ( octets ) ; \n\tstate = new String ( octets , NUM00 , octets . length - NUM00 , Charset . forName ( NUM00 ) ) ; \n\t} \n"}, {"code": "private static long calcSize $F46828 ( size , skip , limit ) { \n\treturn size >= NUM00 ? Math . max ( - NUM00 , Math . min ( size - skip , limit ) ) : - NUM00 ; \n\t} \n"}, {"code": "public static Collection $F64087 resolveAddresses ( AddressResolver addrRslvr , $F46406 addrs , int port ) throws IgniteSpiException { \n\tassert addrRslvr != null ; \n\tCollection $F64087 $F9626 ( extAddrs ) ; \n\tfor ( String addr : addrs ) { \n\t\tInetSocketAddress sockAddr = new InetSocketAddress ( addr , port ) ; \n\t\tif ( ! sockAddr . isUnresolved ( ) ) { \n\t\t\tCollection $F64087 extAddrs0 = resolveAddress ( addrRslvr , sockAddr ) ; \n\t\t\t$F97792 ( extAddrs0 , extAddrs ) } \n\t\t} \n\treturn extAddrs ; \n\t} \n"}, {"code": "private double sampleFromGamma ( double k , double theta ) { \n\tboolean accept = _BOOL ; \n\tif ( k < NUM00 ) { \n\t\tdouble c = ( NUM00 / k ) ; \n\t\tdouble d = ( ( NUM00 - k ) * Math . pow ( k , ( k / ( NUM00 - k ) ) ) ) ; \n\t\tdouble u , v , z , e , x ; \n\t\tdo { \n\t\t\t$F124366 ( u , rng ) $F124366 ( v , rng ) z = - Math . log ( u ) ; \n\t\t\te = - Math . log ( v ) ; \n\t\t\tx = Math . pow ( z , c ) ; \n\t\t\tif ( ( z + e ) >= ( d + x ) ) { \n\t\t\t\taccept = _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\twhile ( ! accept ) ; \n\t\treturn ( x * theta ) ; \n\t\t} \n\telse { \n\t\tdouble b = ( k - Math . log ( NUM00 ) ) ; \n\t\tdouble c = ( k + Math . sqrt ( NUM00 * k - NUM00 ) ) ; \n\t\tdouble lam = Math . sqrt ( NUM00 * k - NUM00 ) ; \n\t\tdouble cheng = ( NUM00 + Math . log ( NUM00 ) ) ; \n\t\tdouble u , v , x , y , z , r ; \n\t\tdo { \n\t\t\t$F124366 ( u , rng ) $F124366 ( v , rng ) y = ( ( NUM00 / lam ) * Math . log ( v / ( NUM00 - v ) ) ) ; \n\t\t\tx = ( k * Math . exp ( y ) ) ; \n\t\t\tz = ( u * v * v ) ; \n\t\t\tr = ( b + ( c * y ) - x ) ; \n\t\t\tif ( ( r >= ( ( NUM00 * z ) - cheng ) ) || ( r >= Math . log ( z ) ) ) { \n\t\t\t\taccept = _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\twhile ( ! accept ) ; \n\t\treturn ( x * theta ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public $F987 listOptions $F72 { \n\t$F20795 ( newVector ) $F1000 ( newVector ) $F9010 ( newVector , Collections , super ) $F1007 ( newVector ) } \n"}, {"code": "public BlocklyController build $F72 { \n\tif ( mViewFactory == null && ( mWorkspaceFragment != null || mTrashFragment != null || mToolboxFragment != null || mToolboxDrawer != null ) ) $F4639 if ( mWorkspaceHelper == null ) { \n\t\tmWorkspaceHelper = new WorkspaceHelper ( mContext ) ; \n\t\t} \n\tBlockFactory factory = new BlockFactory ( mContext , null ) ; \n\tfor ( $F2277 ( i , mBlockDefResources ) ) { \n\t\ttry { \n\t\t\tfactory . addBlocks ( mBlockDefResources . get ( i ) ) ; \n\t\t\t} \n\t\tcatch ( Throwable e ) { \n\t\t\t$F725 ( factory ) throw e ; \n\t\t\t} \n\t\t} \n\tfor ( $F2277 ( i , mBlockDefAssets ) ) { \n\t\t$F1729 ( assetPath , mBlockDefAssets , i ) try { \n\t\t\tfactory . addBlocks ( mAssetManager . open ( assetPath ) ) ; \n\t\t\t} \n\t\tcatch ( IOException e ) { \n\t\t\t$F725 ( factory ) throw new IllegalStateException ( NUM00 + assetPath , e ) ; \n\t\t\t} \n\t\t} \n\tfor ( $F2277 ( i , mBlockDefs ) ) { \n\t\tfactory . addBlockTemplate ( mBlockDefs . get ( i ) ) ; \n\t\t} \n\tBlocklyController controller = new BlocklyController ( mContext , factory , mWorkspaceHelper , mViewFactory ) ; \n\tif ( mToolboxResId != NUM00 ) { \n\t\tcontroller . loadToolboxContents ( mToolboxResId ) ; \n\t\t} \n\telse if ( mToolboxXml != null ) { \n\t\tcontroller . loadToolboxContents ( mToolboxXml ) ; \n\t\t} \n\telse if ( mToolboxAssetId != null && mAssetManager != null ) { \n\t\ttry { \n\t\t\tcontroller . loadToolboxContents ( mAssetManager . open ( mToolboxAssetId ) ) ; \n\t\t\t} \n\t\tcatch ( IOException e ) $F12615 ( mToolboxAssetId , e ) } \n\tcontroller . setWorkspaceFragment ( mWorkspaceFragment ) ; \n\tcontroller . setTrashFragment ( mTrashFragment ) ; \n\tcontroller . setToolboxFragment ( mToolboxFragment ) ; \n\tcontroller . setTrashIcon ( mTrashIcon ) ; \n\tcontroller . setVariableCallback ( mVariableCallback ) ; \n\treturn controller ; \n\t} \n"}, {"code": "$F1 public void run $F72 { \n\twhile $F931 ( isInterrupted ) { \n\t\ttry { \n\t\t\tKeyHolder $F22664 ref = ( KeyHolder $F22664 ) _queue . remove ( ) ; \n\t\t\tV removed = _table . remove ( ref ) ; \n\t\t\tif ( _listener != null && removed != null ) _listener . weakEntryRemoved ( removed ) ; \n\t\t\t} \n\t\tcatch ( InterruptedException e ) $F151805 ( interrupt ) } \n\t} \n"}, {"code": "public JobDefinitionCreateRequest createJobDefinitionCreateRequest ( String namespaceCd , String jobName , String jobDescription , String activitiXml , $F292037 parameters ) { \n\tJobDefinitionCreateRequest request = new JobDefinitionCreateRequest $F72 ; \n\trequest . setNamespace ( namespaceCd ) ; \n\trequest . setJobName ( jobName ) ; \n\trequest . setDescription ( jobDescription ) ; \n\trequest . setActivitiJobXml ( activitiXml ) ; \n\trequest . setParameters ( parameters ) ; \n\treturn request ; \n\t} \n"}, {"code": "public TabState restoreTabState ( int tabId , boolean encrypted ) { \n\treturn TabState . restoreTabState ( getTabStateFile ( tabId , encrypted ) , encrypted ) ; \n\t} \n"}, {"code": "public FTPClient $F72 { \n\taddListParser ( new UnixListParser $F72 ) ; \n\taddListParser ( new DOSListParser $F72 ) ; \n\taddListParser ( new EPLFListParser $F72 ) ; \n\taddListParser ( new NetWareListParser $F72 ) ; \n\taddListParser ( new MLSDListParser $F72 ) ; \n\t} \n"}, {"code": "public String addExtension ( String testFileName ) $F70142 ( testFileName ) "}, {"code": "public $F4203 String makeStringValueSQ ( T value ) $F2495 ( value ) "}, {"code": "private Level descriptionToLogLevel ( String description ) { \n\tLevel result = Level . OFF ; \n\tif ( description . equals ( s_logger . localizeMessage ( NUM00 ) ) ) { \n\t\tresult = Level . OFF ; \n\t\t} \n\telse if ( description . equals ( s_logger . localizeMessage ( NUM00 ) ) ) { \n\t\tresult = Level . SEVERE ; \n\t\t} \n\telse if ( description . equals ( s_logger . localizeMessage ( NUM00 ) ) ) { \n\t\tresult = Level . WARNING ; \n\t\t} \n\telse if ( description . equals ( s_logger . localizeMessage ( NUM00 ) ) ) { \n\t\tresult = Level . INFO ; \n\t\t} \n\telse if ( description . equals ( s_logger . localizeMessage ( NUM00 ) ) ) { \n\t\tresult = Level . CONFIG ; \n\t\t} \n\telse if ( description . equals ( s_logger . localizeMessage ( NUM00 ) ) ) { \n\t\tresult = Level . FINE ; \n\t\t} \n\telse if ( description . equals ( s_logger . localizeMessage ( NUM00 ) ) ) { \n\t\tresult = Level . FINER ; \n\t\t} \n\telse if ( description . equals ( s_logger . localizeMessage ( NUM00 ) ) ) { \n\t\tresult = Level . FINEST ; \n\t\t} \n\telse if ( description . equals ( s_logger . localizeMessage ( NUM00 ) ) ) { \n\t\tresult = Level . ALL ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "default boolean isImmutable $F72 { \n\treturn _BOOL ; \n\t} \n"}, {"code": "public long renew ( String entryUid , String className , int objectType , long duration , boolean fromReplication , boolean origin , boolean isFromGateway ) throws UnknownLeaseException , InternalSpaceException { \n\ttry { \n\t\textendLeasePeriod ( entryUid , className , objectType , duration , fromReplication , origin , _BOOL , null , isFromGateway ) ; \n\t\t} \n\tcatch ( UnknownLeaseException unknownLeaseException ) { \n\t\tif ( _cacheManager . isCacheExternalDB ( ) && objectType != ObjectTypes . NOTIFY_NULL_TEMPLATE && objectType != ObjectTypes . NOTIFY_TEMPLATE ) { \n\t\t\tif $F6456 ( _logger , Level ) { \n\t\t\t\t$F37847 ( _logger , Level , unknownLeaseException ) } \n\t\t\t} \n\t\telse throw unknownLeaseException ; \n\t\t} \n\treturn duration ; \n\t} \n"}, {"code": "public JKTagMapping $F72 $F845 "}, {"code": "public static void inRange ( final long value , final String name , final long minInclusive , final long maxInclusive ) { \n\tif ( value < minInclusive || value > maxInclusive ) { \n\t\tfinal String message = String . format ( NUM00 , name , minInclusive , maxInclusive ) ; \n\t\t$F29415 ( message ) } \n\t} \n"}, {"code": "$F13429 ( criteria , createCriteriaInternal , oredCriteria ) "}, {"code": "public static File unzipToTempFolder ( File zipFile ) { \n\t$F20605 ( zipFilename , zipFile ) $F319260 ( tempFolderPrefix , zipFilename ) File tempFolder = createTempFolder ( tempFolderPrefix ) ; \n\ttry { \n\t\tPUZipUtils . unzip ( zipFile , tempFolder ) ; \n\t\treturn tempFolder ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\ttry { \n\t\t\tFileUtils . deleteFileOrDirectory ( tempFolder ) ; \n\t\t\t} \n\t\tcatch ( RuntimeException ex ) { \n\t\t\tlogger . debug ( NUM00 + tempFolder , ex ) ; \n\t\t\t} \n\t\tthrow new RuntimeException ( NUM00 + zipFile + NUM00 + tempFolder , e ) ; \n\t\t} \n\t} \n"}, {"code": "public void testAscii $F72 throws Exception { \n\tString str = NUM00 ; \n\tByteArrayInputStream $F21318 ( aa , str ) ; \n\tInputStreamReader a = new InputStreamReader ( aa , NUM00 ) ; \n\ttry { \n\t\t$F7468 ( x , a ) assertEquals ( NUM00 , x ) ; \n\t\t$F11577 ( c ) $F3261 ( x , a , c ) assertEquals ( NUM00 , a . getEncoding ( ) ) ; \n\t\tassertEquals ( NUM00 , x ) ; \n\t\tassertEquals ( NUM00 , String . valueOf ( c ) ) ; \n\t\t} \n\t$F3229 ( a ) } \n"}, {"code": "public void clear $F72 { \n\t$F725 ( m_reducedResults ) m_currentSearchIndex = NUM00 ; \n\t} \n"}, {"code": "public static void createAccessorMethod ( SootMethod container , Stmt stmt ) { \n\tBody containerBody = container . getActiveBody ( ) ; \n\tsoot . util . Chain containerStmts = containerBody . getUnits ( ) ; \n\tif $F2200 ( containerStmts , stmt ) $F62078 if ( stmt . containsInvokeExpr ( ) ) { \n\t\tcreateInvokeAccessor ( container , stmt ) ; \n\t\t} \n\telse if ( stmt instanceof AssignStmt ) { \n\t\tAssignStmt as = ( AssignStmt ) stmt ; \n\t\tFieldRef ref ; \n\t\tif ( as . getLeftOp ( ) instanceof FieldRef ) { \n\t\t\tref = ( FieldRef ) as . getLeftOp ( ) ; \n\t\t\tcreateSetAccessor ( container , as , ref ) ; \n\t\t\t} \n\t\telse if ( as . getRightOp ( ) instanceof FieldRef ) { \n\t\t\tref = ( FieldRef ) as . getRightOp ( ) ; \n\t\t\tcreateGetAccessor ( container , as , ref ) ; \n\t\t\t} \n\t\telse $F11389 } \n\telse $F11388 } \n"}, {"code": "$F1 public void displayChanged $F72 $F5795 ( updateGC ) "}, {"code": "public final void pushPair ( Node v1 , Node v2 ) { \n\tif ( null == m_map ) $F132454 ( m_map , m_blocksize , m_mapSize ) else { \n\t\tif $F11078 ( m_firstFree , m_mapSize ) { \n\t\t\tm_mapSize += m_blocksize ; \n\t\t\tNode newMap [ ] = new Node [ m_mapSize ] ; \n\t\t\t$F135 ( System , m_map , newMap , m_firstFree ) m_map = newMap ; \n\t\t\t} \n\t\t} \n\tm_map [ m_firstFree ] = v1 ; \n\tm_map [ m_firstFree + NUM00 ] = v2 ; \n\tm_firstFree += NUM00 ; \n\t} \n"}, {"code": "$F119089 ( text , builder , index , chr , t , Integer ) "}, {"code": "final $F108030 segmentFor ( int hash ) { \n\treturn segments [ ( hash > > > segmentShift ) & segmentMask ] ; \n\t} \n"}, {"code": "$F1431 private void startSetTimeChanged $F72 { \n\tint hours = NUM00 ; \n\tint minutes = NUM00 ; \n\ttry $F50527 ( hours , Integer , startHoursField ) catch ( Exception e ) { \n\t\tJOptionPane . showMessageDialog ( this , ( Bundle . getMessage ( NUM00 ) + NUM00 + e ) , Bundle . getMessage ( NUM00 ) , JOptionPane . ERROR_MESSAGE ) ; \n\t\t$F17662 ( log , e ) $F665 } \n\tif $F61157 ( hours ) { \n\t\tJOptionPane . showMessageDialog ( this , $F253578 ( Bundle ) , Bundle . getMessage ( NUM00 ) , JOptionPane . ERROR_MESSAGE ) ; \n\t\t$F665 } \n\ttry $F50527 ( minutes , Integer , startMinutesField ) catch ( Exception e ) { \n\t\tJOptionPane . showMessageDialog ( this , ( Bundle . getMessage ( NUM00 ) + NUM00 + e ) , Bundle . getMessage ( NUM00 ) , JOptionPane . ERROR_MESSAGE ) ; \n\t\t$F17662 ( log , e ) $F665 } \n\tif $F61157 ( minutes ) { \n\t\tJOptionPane . showMessageDialog ( this , $F253578 ( Bundle ) , Bundle . getMessage ( NUM00 ) , JOptionPane . ERROR_MESSAGE ) ; \n\t\t$F665 } \n\tlong mSecPerHour = NUM00 ; \n\tlong mSecPerMinute = NUM00 ; \n\t$F9110 ( tem , clock ) int cHours = tem . getHours ( ) ; \n\tlong cNumMSec = tem . getTime ( ) ; \n\tlong nNumMSec = ( ( cNumMSec / mSecPerHour ) * mSecPerHour ) - ( cHours * mSecPerHour ) + ( hours * mSecPerHour ) + ( minutes * mSecPerMinute ) ; \n\tclock . setStartSetTime ( startSetTimeCheckBox . isSelected ( ) , new Date ( nNumMSec ) ) ; \n\tchanged = _BOOL ; \n\t} \n"}, {"code": "public static String serialize ( Object toSerialize ) throws Exception { \n\t$F33929 ( xstreamClass ) $F33932 ( constructor ) Object xstream ; \n\t$F33937 ( serializeArgsClasses ) $F3300 ( serializeArgs ) $F33940 ( methodSerialize ) String result ; \n\t$F33941 ( xstreamClass , Class ) constructor = xstreamClass . getConstructor ( ) ; \n\t$F33943 ( xstream , constructor ) serializeArgsClasses [ NUM00 ] = $F12222 ; \n\tserializeArgs [ NUM00 ] = toSerialize ; \n\t$F18553 ( methodSerialize , xstreamClass , serializeArgsClasses ) try { \n\t\tresult = ( String ) methodSerialize . invoke ( xstream , serializeArgs ) ; \n\t\t} \n\tcatch ( Exception ex ) { \n\t\tresult = null ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "$F1 public void release $F72 $F33834 ( super ) "}, {"code": "public void updateAndTestCounter ( OFMessage ofm , String type ) { \n\tvalidateCounter ( type , NUM00 ) ; \n\tcounters . updateWriteStats ( ofm ) ; \n\tcounters . updateWriteStats ( ofm ) ; \n\tcounters . updateReadStats ( ofm ) ; \n\tcounters . updateReadStats ( ofm ) ; \n\tvalidateCounter ( type , NUM00 ) ; \n\t} \n"}, {"code": "public static $F11685 $F57915 of $F72 $F12523 ( Collections ) "}, {"code": "protected void drawDomainCrosshair ( Graphics2D g2 , Rectangle2D dataArea , PlotOrientation orientation , int datasetIndex , Comparable rowKey , Comparable columnKey , Stroke stroke , Paint paint ) { \n\tCategoryDataset dataset = getDataset ( datasetIndex ) ; \n\tCategoryAxis axis = getDomainAxisForDataset ( datasetIndex ) ; \n\tCategoryItemRenderer renderer = getRenderer ( datasetIndex ) ; \n\tLine2D line ; \n\tif ( orientation == PlotOrientation . VERTICAL ) { \n\t\tdouble xx = renderer . getItemMiddle ( rowKey , columnKey , dataset , axis , dataArea , RectangleEdge . BOTTOM ) ; \n\t\tline = new $F69931 ( xx , dataArea . getMinY ( ) , xx , dataArea . getMaxY ( ) ) ; \n\t\t} \n\telse { \n\t\tdouble yy = renderer . getItemMiddle ( rowKey , columnKey , dataset , axis , dataArea , RectangleEdge . LEFT ) ; \n\t\tline = new $F69931 ( dataArea . getMinX ( ) , yy , dataArea . getMaxX ( ) , yy ) ; \n\t\t} \n\tg2 . setStroke ( stroke ) ; \n\tg2 . setPaint ( paint ) ; \n\tg2 . draw ( line ) ; \n\t} \n"}, {"code": "$F1 public Table summary $F72 { \n\tTable table = Table . create ( NUM00 + name ( ) ) ; \n\tCategoryColumn measure = CategoryColumn . create ( NUM00 ) ; \n\tCategoryColumn value = CategoryColumn . create ( NUM00 ) ; \n\ttable . addColumn ( measure ) ; \n\ttable . addColumn ( value ) ; \n\t$F18793 ( measure ) value . add ( $F130521 ( String , size ) ) ; \n\t$F18793 ( measure ) value . add ( $F130521 ( String , countMissing ) ) ; \n\t$F18793 ( measure ) value . add ( $F130521 ( String , min ) ) ; \n\t$F18793 ( measure ) value . add ( $F130521 ( String , max ) ) ; \n\treturn table ; \n\t} \n"}, {"code": "private Object js_parseFloat $F22194 ( args ) { \n\tif $F8830 ( args ) return ScriptRuntime . NaNobj ; \n\tString s = ScriptRuntime . toString ( args [ NUM00 ] ) ; \n\t$F1749 ( len , s ) int start = NUM00 ; \n\tchar c ; \n\tfor ( $F589 ) { \n\t\tif ( start == len ) { \n\t\t\treturn ScriptRuntime . NaNobj ; \n\t\t\t} \n\t\tc = s . charAt ( start ) ; \n\t\tif ( ! ScriptRuntime . isStrWhiteSpaceChar ( c ) ) $F5153 ++ start ; \n\t\t} \n\tint i = start ; \n\tif $F37111 ( c ) { \n\t\t++ i ; \n\t\tif ( i == len ) { \n\t\t\treturn ScriptRuntime . NaNobj ; \n\t\t\t} \n\t\tc = s . charAt ( i ) ; \n\t\t} \n\tif ( c == NUM00 ) { \n\t\tif ( i + NUM00 <= len && s . regionMatches ( i , NUM00 , NUM00 , NUM00 ) ) { \n\t\t\tdouble d ; \n\t\t\tif $F11983 ( s , start ) { \n\t\t\t\td = Double . NEGATIVE_INFINITY ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\td = Double . POSITIVE_INFINITY ; \n\t\t\t\t} \n\t\t\treturn ScriptRuntime . wrapNumber ( d ) ; \n\t\t\t} \n\t\treturn ScriptRuntime . NaNobj ; \n\t\t} \n\tint decimal = - NUM00 ; \n\tint exponent = - NUM00 ; \n\tboolean exponentValid = _BOOL ; \n\tfor ( ; \n\ti < len ; \n\ti ++ ) { \n\t\tswitch $F31372 ( s , i ) { \n\t\t\t$F1262 if ( decimal != - NUM00 ) $F597 decimal = i ; \n\t\t\t$F598 $F1262 $F1262 if ( exponent != - NUM00 ) $F5153 else if ( i == len - NUM00 ) $F5153 exponent = i ; \n\t\t\t$F598 $F1262 $F1262 if ( exponent != i - NUM00 ) $F5153 else if ( i == len - NUM00 ) { \n\t\t\t\t-- i ; \n\t\t\t\t$F597 } \n\t\t\t$F598 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 if ( exponent != - NUM00 ) { \n\t\t\t\texponentValid = _BOOL ; \n\t\t\t\t} \n\t\t\t$F598 $F2448 } \n\t\t$F597 } \n\tif ( exponent != - NUM00 && ! exponentValid ) { \n\t\ti = exponent ; \n\t\t} \n\ts = s . substring ( start , i ) ; \n\ttry $F62107 ( Double , s ) catch ( NumberFormatException ex ) { \n\t\treturn ScriptRuntime . NaNobj ; \n\t\t} \n\t} \n"}, {"code": "public CVisibilityCriteriumPanel ( final CVisibilityCriterium criterium ) { \n\t$F9898 ( super ) visibilityCriterium = criterium ; \n\tvisibilityStateBox . addActionListener ( visibilityStateBoxListener ) ; \n\tinitPanel ( ) ; \n\t} \n"}, {"code": "public boolean isAlterAdd $F72 $F32878 ( columnsToAdd ) "}, {"code": "private boolean processRemovedNode ( final INaviViewNode node ) { \n\tif ( node instanceof INaviCodeNode ) { \n\t\tfinal INaviCodeNode cnode = ( INaviCodeNode ) node ; \n\t\ttry { \n\t\t\tfinal INaviFunction targetFunction = cnode . getParentFunction ( ) ; \n\t\t\tif $F1710 ( m_nodeCounter , targetFunction ) { \n\t\t\t\tfinal int newCounter = m_nodeCounter . get ( targetFunction ) - NUM00 ; \n\t\t\t\tif ( newCounter == NUM00 ) { \n\t\t\t\t\tm_nodeCounter . remove ( targetFunction ) ; \n\t\t\t\t\tfinal Set < CCrossReference > toDelete = new HashSet < CCrossReference > $F72 ; \n\t\t\t\t\tfor ( final CCrossReference reference : m_crossReferences ) { \n\t\t\t\t\t\tif ( reference . getCalledFunction ( ) == targetFunction ) $F207 ( toDelete , reference ) } \n\t\t\t\t\tm_crossReferences . removeAll ( toDelete ) ; \n\t\t\t\t\treturn _BOOL ; \n\t\t\t\t\t} \n\t\t\t\telse $F1717 ( m_nodeCounter , targetFunction , newCounter ) } \n\t\t\t} \n\t\tcatch ( final MaybeNullException exception ) $F845 } \n\treturn _BOOL ; \n\t} \n"}, {"code": "public long transferTo ( long position , long count , OutputStream dst ) throws IOException { \n\treturn transferTo ( position , count , Channels . newChannel ( dst ) ) ; \n\t} \n"}, {"code": "public void test_isLenient $F72 { \n\t$F4377 ( df , DateFormat ) Calendar c = df . getCalendar ( ) ; \n\tif ( df . isLenient ( ) ) { \n\t\ttry { \n\t\t\t$F305335 ( c , Calendar ) $F531204 ( c , Calendar ) } \n\t\t$F53525 ( fail , e ) c . setLenient ( _BOOL ) ; \n\t\ttry { \n\t\t\t$F305335 ( c , Calendar ) $F531204 ( c , Calendar ) fail ( NUM00 ) ; \n\t\t\t} \n\t\t$F45786 $F53525 ( fail , e ) } \n\telse { \n\t\ttry { \n\t\t\t$F305335 ( c , Calendar ) $F531204 ( c , Calendar ) fail ( NUM00 ) ; \n\t\t\t} \n\t\t$F45786 $F53525 ( fail , e ) c . setLenient ( _BOOL ) ; \n\t\ttry { \n\t\t\t$F305335 ( c , Calendar ) $F531204 ( c , Calendar ) } \n\t\t$F53525 ( fail , e ) } \n\t} \n"}, {"code": "private void writeIndexFile $F72 throws IOException , CarbonDataWriterException { \n\tIndexHeader indexHeader = CarbonMetadataUtil . getIndexHeader ( localCardinality , thriftColumnSchemaList ) ; \n\tList < BlockIndex > blockIndexThrift = CarbonMetadataUtil . getBlockIndexInfo ( blockIndexInfoList ) ; \n\tString fileName = storeLocation + File . separator + carbonTablePath . getCarbonIndexFileName ( carbonDataFileAttributes . getTaskId ( ) , carbonDataFileAttributes . getFactTimeStamp ( ) ) ; \n\tCarbonIndexFileWriter writer = new CarbonIndexFileWriter $F72 ; \n\twriter . openThriftWriter ( fileName ) ; \n\twriter . writeThrift ( indexHeader ) ; \n\tfor ( BlockIndex blockIndex : blockIndexThrift ) { \n\t\twriter . writeThrift ( blockIndex ) ; \n\t\t} \n\t$F59 ( writer ) copyCarbonDataFileToCarbonStorePath ( fileName ) ; \n\t} \n"}, {"code": "public void nackAll ( PubsubReader $F4203 reader ) throws IOException { \n\tcheckState ( this . reader == null , NUM00 ) ; \n\t$F3803 batchYetToAckIds = new $F201 ( $F150109 ( Math , notYetReadIds , ACK_BATCH_SIZE ) ) ; \n\tfor ( String ackId : notYetReadIds ) { \n\t\tbatchYetToAckIds . add ( ackId ) ; \n\t\tif $F29395 ( batchYetToAckIds , ACK_BATCH_SIZE ) { \n\t\t\tlong nowMsSinceEpoch = now ( reader ) ; \n\t\t\treader . nackBatch ( nowMsSinceEpoch , batchYetToAckIds ) ; \n\t\t\t$F725 ( batchYetToAckIds ) } \n\t\t} \n\tif $F5973 ( batchYetToAckIds ) { \n\t\tlong nowMsSinceEpoch = now ( reader ) ; \n\t\treader . nackBatch ( nowMsSinceEpoch , batchYetToAckIds ) ; \n\t\t} \n\t} \n"}, {"code": "static public void assertEquals $F109214 ( message , expected , actual ) { \n\t$F2564 ( expected , actual ) $F2565 ( expected , actual ) failNotEquals ( message , expected , actual ) ; \n\t} \n"}, {"code": "public static NamingException mapErrorCode ( int errorCode , String errorMessage ) { \n\tif ( errorCode == LdapClient . LDAP_SUCCESS ) $F1274 NamingException e = null ; \n\tString message = LdapClient . getErrorMessage ( errorCode , errorMessage ) ; \n\tswitch ( errorCode ) { \n\t\tcase LdapClient . LDAP_ALIAS_DEREFERENCING_PROBLEM : e = new NamingException ( message ) ; \n\t\t$F597 case LdapClient . LDAP_ALIAS_PROBLEM : e = new NamingException ( message ) ; \n\t\t$F597 case LdapClient . LDAP_ATTRIBUTE_OR_VALUE_EXISTS : e = new AttributeInUseException ( message ) ; \n\t\t$F597 case LdapClient . LDAP_AUTH_METHOD_NOT_SUPPORTED : case LdapClient . LDAP_CONFIDENTIALITY_REQUIRED : case LdapClient . LDAP_STRONG_AUTH_REQUIRED : case LdapClient . LDAP_INAPPROPRIATE_AUTHENTICATION : e = new AuthenticationNotSupportedException ( message ) ; \n\t\t$F597 case LdapClient . LDAP_ENTRY_ALREADY_EXISTS : e = new NameAlreadyBoundException ( message ) ; \n\t\t$F597 case LdapClient . LDAP_INVALID_CREDENTIALS : case LdapClient . LDAP_SASL_BIND_IN_PROGRESS : e = new AuthenticationException ( message ) ; \n\t\t$F597 case LdapClient . LDAP_INAPPROPRIATE_MATCHING : e = new InvalidSearchFilterException ( message ) ; \n\t\t$F597 case LdapClient . LDAP_INSUFFICIENT_ACCESS_RIGHTS : e = new NoPermissionException ( message ) ; \n\t\t$F597 case LdapClient . LDAP_INVALID_ATTRIBUTE_SYNTAX : case LdapClient . LDAP_CONSTRAINT_VIOLATION : e = new InvalidAttributeValueException ( message ) ; \n\t\t$F597 case LdapClient . LDAP_LOOP_DETECT : e = new NamingException ( message ) ; \n\t\t$F597 case LdapClient . LDAP_NO_SUCH_ATTRIBUTE : e = new NoSuchAttributeException ( message ) ; \n\t\t$F597 case LdapClient . LDAP_NO_SUCH_OBJECT : e = new NameNotFoundException ( message ) ; \n\t\t$F597 case LdapClient . LDAP_OBJECT_CLASS_MODS_PROHIBITED : case LdapClient . LDAP_OBJECT_CLASS_VIOLATION : case LdapClient . LDAP_NOT_ALLOWED_ON_RDN : e = new SchemaViolationException ( message ) ; \n\t\t$F597 case LdapClient . LDAP_NOT_ALLOWED_ON_NON_LEAF : e = new ContextNotEmptyException ( message ) ; \n\t\t$F597 case LdapClient . LDAP_OPERATIONS_ERROR : e = new NamingException ( message ) ; \n\t\t$F597 case LdapClient . LDAP_OTHER : e = new NamingException ( message ) ; \n\t\t$F597 case LdapClient . LDAP_PROTOCOL_ERROR : e = new CommunicationException ( message ) ; \n\t\t$F597 case LdapClient . LDAP_SIZE_LIMIT_EXCEEDED : e = new SizeLimitExceededException ( message ) ; \n\t\t$F597 case LdapClient . LDAP_TIME_LIMIT_EXCEEDED : e = new TimeLimitExceededException ( message ) ; \n\t\t$F597 case LdapClient . LDAP_UNAVAILABLE_CRITICAL_EXTENSION : e = new OperationNotSupportedException ( message ) ; \n\t\t$F597 case LdapClient . LDAP_UNAVAILABLE : case LdapClient . LDAP_BUSY : e = new ServiceUnavailableException ( message ) ; \n\t\t$F597 case LdapClient . LDAP_UNDEFINED_ATTRIBUTE_TYPE : e = new InvalidAttributeIdentifierException ( message ) ; \n\t\t$F597 case LdapClient . LDAP_UNWILLING_TO_PERFORM : e = new OperationNotSupportedException ( message ) ; \n\t\t$F597 case LdapClient . LDAP_COMPARE_FALSE : case LdapClient . LDAP_COMPARE_TRUE : case LdapClient . LDAP_IS_LEAF : e = new NamingException ( message ) ; \n\t\t$F597 case LdapClient . LDAP_ADMIN_LIMIT_EXCEEDED : e = new LimitExceededException ( message ) ; \n\t\t$F597 case LdapClient . LDAP_REFERRAL : e = new NamingException ( message ) ; \n\t\t$F597 case LdapClient . LDAP_PARTIAL_RESULTS : e = new NamingException ( message ) ; \n\t\t$F597 case LdapClient . LDAP_INVALID_DN_SYNTAX : case LdapClient . LDAP_NAMING_VIOLATION : e = new InvalidNameException ( message ) ; \n\t\t$F597 $F1267 e = new NamingException ( message ) ; \n\t\t$F597 } \n\treturn e ; \n\t} \n"}, {"code": "public final void computeIndex $F72 { \n\t$F7254 ( indexComputed ) $F27145 cellList = new ArrayList $F72 ; \n\t$F3807 edgeList = new ArrayList $F72 ; \n\tfor ( $F2010 ( i , getNumEdges ) ) { \n\t\tS2Point from = edgeFrom ( i ) ; \n\t\tS2Point to = edgeTo ( i ) ; \n\t\t$F17427 cover = new ArrayList $F72 ; \n\t\tint level = getCovering ( from , to , _BOOL , cover ) ; \n\t\t$F16700 ( minimumS2LevelUsed , Math , level ) for ( S2CellId cellId : cover ) { \n\t\t\tcellList . add ( cellId . id ( ) ) ; \n\t\t\tedgeList . add ( i ) ; \n\t\t\t} \n\t\t} \n\tcells = new long $F2313 ( cellList ) ; \n\t$F103411 ( edges , edgeList ) for ( $F1139 ( i , cells ) ) { \n\t\t$F15302 ( cells , i , cellList ) $F15302 ( edges , i , edgeList ) } \n\tsortIndex ( ) ; \n\tindexComputed = _BOOL ; \n\t} \n"}, {"code": "public WaitForAnyListener ( int numberOfResults ) $F11707 ( this , numberOfResults ) "}, {"code": "public static Object stringToValue ( String string ) { \n\tDouble d ; \n\t$F29942 ( string ) $F29944 ( string , Boolean ) $F29946 ( string , Boolean ) $F29948 ( string , JSONObject ) $F12685 ( b , string ) if ( $F19295 ( b ) || b == NUM00 || b == NUM00 || b == NUM00 ) { \n\t\ttry { \n\t\t\tif $F29954 ( string ) $F29960 ( d , Double , string ) else { \n\t\t\t\t$F29962 ( myLong , string ) if ( myLong . longValue ( ) == myLong . intValue ( ) ) { \n\t\t\t\t\t$F29969 ( myLong ) } \n\t\t\t\telse { \n\t\t\t\t\treturn myLong ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t$F29977 } \n\treturn string ; \n\t} \n"}, {"code": "public abstract void onPinSet ( String pin ) ; \n"}, {"code": "public void testCase9 $F72 { \n\t$F70249 $F10679 int aSign = - NUM00 ; \n\tint bSign = - NUM00 ; \n\t$F70253 $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F3024 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , result ) } \n"}, {"code": "public EntityQuery orderBy ( String ... fields ) { \n\tthis . orderBy = Arrays . asList ( fields ) ; \n\treturn this ; \n\t} \n"}, {"code": "public void removeNodesFromPartition ( List < IGroupMemberNode > nodesToRemove ) { \n\tfor ( final IGroupMemberNode nodeToRemove : nodesToRemove ) { \n\t\tif ( nodeToRemove != null ) { \n\t\t\tif $F40971 ( nonOptionalNonMinusNodes , nodeToRemove ) { \n\t\t\t\tif $F1238 ( nodeToRemove , optionalOrMinus ) { \n\t\t\t\t\toptionalOrMinus = null ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\trecomputeDefinitelyProduced ( ) ; \n\t} \n"}, {"code": "public static void banner ( Logger logger , $F6969 clazz , String methodName , String text ) { \n\tString string = clazz . getSimpleName ( ) + NUM00 + methodName ; \n\tif ( text != null ) { \n\t\tstring += NUM00 + text ; \n\t\t} \n\t$F973 ( logger ) $F973 ( logger ) $F556 ( logger , string ) $F973 ( logger ) } \n"}, {"code": "private void readObject ( ObjectInputStream in ) throws $F6427 { \n\t$F6428 ( in ) if ( resourceBundleName != null ) { \n\t\ttry { \n\t\t\trb = ResourceBundle . getBundle ( resourceBundleName ) ; \n\t\t\t} \n\t\tcatch ( MissingResourceException e ) { \n\t\t\trb = null ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private static void exit ( $F5466 String errMsg , $F5466 Options options , int exitCode ) { \n\tif ( errMsg != null ) echo ( NUM00 + errMsg ) ; \n\tString runner = System . getProperty ( IGNITE_PROG_NAME , NUM00 ) ; \n\t$F1384 ( space , runner ) runner = runner . substring ( NUM00 , space == - NUM00 ? runner . length ( ) : space ) ; \n\tif ( options != null ) { \n\t\tHelpFormatter formatter = new HelpFormatter $F72 ; \n\t\tformatter . printHelp ( runner , options ) ; \n\t\t} \n\tSystem . exit ( exitCode ) ; \n\t} \n"}, {"code": "private static void replaceAltSpecialInstructions $F72 { \n\tfillInstructionMap ( NUM00 , NUM00 , new FrInstruction ( InstructionFormat . D , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , Instruction . FlowType . NONE , _BOOL , _BOOL , andccrU8SimulationCode ) ) ; \n\tfillInstructionMap ( NUM00 , NUM00 , new FrInstruction ( InstructionFormat . D , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , Instruction . FlowType . NONE , _BOOL , _BOOL , stilmU8SimulationCode ) ) ; \n\tfillInstructionMap ( NUM00 , NUM00 , new FrInstruction ( InstructionFormat . D , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , Instruction . FlowType . NONE , _BOOL , _BOOL , orccrU8SimulationCode ) ) ; \n\tfillInstructionMap ( NUM00 , NUM00 , new FrInstruction ( InstructionFormat . D , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , Instruction . FlowType . NONE , _BOOL , _BOOL , addspS10SimulationCode ) ) ; \n\t} \n"}, {"code": "$F1 public boolean addSensorToRoute ( String sensorName , int mode ) { \n\tif $F29395 ( _controlSensorList , MAX_CONTROL_SENSORS ) { \n\t\tlog . warn ( NUM00 , getSystemName ( ) ) ; \n\t\t} \n\tControlSensor sensor = new ControlSensor ( sensorName ) ; \n\t$F119866 ( log , getSystemName , sensorName ) if ( ! sensor . setState ( mode ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( isControlSensorIncluded ( sensor ) ) { \n\t\tlog . debug ( NUM00 , sensorName , getSystemName ( ) ) ; \n\t\t} \n\telse $F207 ( _controlSensorList , sensor ) return _BOOL ; \n\t} \n"}, {"code": "private void eliminateBackfillStates ( int baseState ) { \n\tif ( $F118675 ( statesToBackfill , baseState ) ) { \n\t\tstatesToBackfill . removeElement ( new Integer ( baseState ) ) ; \n\t\t$F5078 state = tempStateTable . elementAt ( baseState ) ; \n\t\tfor ( $F119 ( i , numCategories ) ) { \n\t\t\tif ( state [ i ] != NUM00 ) $F11680 ( eliminateBackfillStates , state , i ) } \n\t\t} \n\t} \n"}, {"code": "static boolean separateConvexPolygons ( $F5415 verts1 , $F5415 verts2 , Vector2 separation ) { \n\t$F18832 ( length1 , verts1 ) $F18832 ( length2 , verts2 ) for ( $F6225 ( i , length1 ) ) { \n\t\tfinal int j = ( i + NUM00 ) % length1 ; \n\t\tfloat projX = $F3123 ( verts1 , j , i ) ; \n\t\tfloat projY = verts1 [ i ] - verts1 [ j ] ; \n\t\tfinal float length = ( float ) $F25556 ( Math , projX , projY ) ; \n\t\tprojX /= length ; \n\t\tprojY /= length ; \n\t\tfloat min1 = Float . POSITIVE_INFINITY , max1 = Float . NEGATIVE_INFINITY ; \n\t\tfor ( $F6225 ( k , length1 ) ) { \n\t\t\tfinal float dot = projX * verts1 [ k ] + projY * verts1 [ k + NUM00 ] ; \n\t\t\t$F7547 ( dot , min1 ) $F15468 ( dot , max1 ) } \n\t\tfloat min2 = Float . POSITIVE_INFINITY , max2 = Float . NEGATIVE_INFINITY ; \n\t\tfor ( $F6225 ( k , length2 ) ) { \n\t\t\tfinal float dot = projX * verts2 [ k ] + projY * verts2 [ k + NUM00 ] ; \n\t\t\t$F7547 ( dot , min2 ) $F15468 ( dot , max2 ) } \n\t\tif ( ( max1 < min2 ) || ( max2 < min1 ) ) { \n\t\t\tif ( null != separation ) separation . set ( projY , - projX ) ; \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public String paymentTerm $F83882 ( ctx , WindowNo , mTab , mField , value ) { \n\t$F179073 ( C_PaymentTerm_ID , value ) int C_Invoice_ID = Env . getContextAsInt ( ctx , WindowNo , NUM00 ) ; \n\tif ( C_PaymentTerm_ID == null || $F179074 ( C_PaymentTerm_ID ) || C_Invoice_ID == NUM00 ) $F1278 MPaymentTerm pt = new MPaymentTerm ( ctx , C_PaymentTerm_ID . intValue ( ) , null ) ; \n\tif ( $F73658 ( pt ) ) $F1278 boolean valid = pt . apply ( C_Invoice_ID ) ; \n\tmTab . setValue ( NUM00 , valid ? NUM00 : NUM00 ) ; \n\t$F1278 } \n"}, {"code": "static void checkTypeRefAndPath ( int typeRef , TypePath typePath ) { \n\tint mask = NUM00 ; \n\tswitch $F14870 ( typeRef ) { \n\t\tcase TypeReference . CLASS_TYPE_PARAMETER : case TypeReference . METHOD_TYPE_PARAMETER : case TypeReference . METHOD_FORMAL_PARAMETER : mask = NUM00 ; \n\t\t$F597 case TypeReference . FIELD : case TypeReference . METHOD_RETURN : case TypeReference . METHOD_RECEIVER : case TypeReference . LOCAL_VARIABLE : case TypeReference . RESOURCE_VARIABLE : case TypeReference . INSTANCEOF : case TypeReference . NEW : case TypeReference . CONSTRUCTOR_REFERENCE : case TypeReference . METHOD_REFERENCE : mask = NUM00 ; \n\t\t$F597 case TypeReference . CLASS_EXTENDS : case TypeReference . CLASS_TYPE_PARAMETER_BOUND : case TypeReference . METHOD_TYPE_PARAMETER_BOUND : case TypeReference . THROWS : case TypeReference . EXCEPTION_PARAMETER : mask = NUM00 ; \n\t\t$F597 case TypeReference . CAST : case TypeReference . CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT : case TypeReference . METHOD_INVOCATION_TYPE_ARGUMENT : case TypeReference . CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT : case TypeReference . METHOD_REFERENCE_TYPE_ARGUMENT : mask = NUM00 ; \n\t\t$F597 $F1267 throw new IllegalArgumentException ( NUM00 + Integer . toHexString ( typeRef > > > NUM00 ) ) ; \n\t\t} \n\tif ( ( typeRef & ~ mask ) != NUM00 ) { \n\t\tthrow new IllegalArgumentException $F184522 ( Integer , typeRef ) ; \n\t\t} \n\tif ( typePath != null ) { \n\t\tfor ( $F184528 ( i , typePath ) ) { \n\t\t\tint step = typePath . getStep ( i ) ; \n\t\t\tif ( step != TypePath . ARRAY_ELEMENT && step != TypePath . INNER_TYPE && step != TypePath . TYPE_ARGUMENT && step != TypePath . WILDCARD_BOUND ) $F20855 ( i , typePath ) if ( step != TypePath . TYPE_ARGUMENT && typePath . getStepArgument ( i ) != NUM00 ) $F20855 ( i , typePath ) } \n\t\t} \n\t} \n"}, {"code": "public static void transformCriteria ( Properties formProperties , InputStream xslIs , Result result ) throws SAXException , IOException , ParserConfigurationException , TransformerException { \n\tdbf . setNamespaceAware ( _BOOL ) ; \n\t$F2220 ( builder , dbf ) org . w3c . dom . Document xslDoc = builder . parse ( xslIs ) ; \n\t$F29110 ( ds , xslDoc ) Transformer transformer = null ; \n\tsynchronized ( tFactory ) { \n\t\ttransformer = tFactory . newTransformer ( ds ) ; \n\t\t} \n\ttransformCriteria ( formProperties , transformer , result ) ; \n\t} \n"}, {"code": "public static $F3510 splitAndPad $F5474 ( byteArray , blocksize ) { \n\t$F3510 $F96301 ( blocks ) ; \n\tint numBlocks = ( int ) Math . ceil ( byteArray . length / ( double ) blocksize ) ; \n\tfor ( $F119 ( i , numBlocks ) ) { \n\t\t$F2175 ( block , blocksize ) $F26770 ( Arrays , block ) if ( i + NUM00 == numBlocks ) { \n\t\t\tint remainingBytes = byteArray . length - ( i * blocksize ) ; \n\t\t\tSystem . arraycopy ( byteArray , i * blocksize , block , NUM00 , remainingBytes ) ; \n\t\t\t} \n\t\telse { \n\t\t\t$F272701 ( System , byteArray , i , blocksize , block ) } \n\t\tblocks . add ( block ) ; \n\t\t} \n\treturn blocks ; \n\t} \n"}, {"code": "public void put ( E item ) throws InterruptedException { \n\tif $F972 ( done ) $F45619 ( queue , item ) } \n"}, {"code": "protected void notifyComplete $F72 { \n\tfinal String methodName = NUM00 ; \n\tlog . fine ( CLASS_NAME , methodName , NUM00 , new Object [ ] { \n\t\tgetKey ( ) , this . response , this . exception } \n\t) ; \n\tsynchronized ( responseLock ) { \n\t\tif ( exception == null && pendingComplete ) { \n\t\t\tcompleted = _BOOL ; \n\t\t\tpendingComplete = _BOOL ; \n\t\t\t} \n\t\telse { \n\t\t\tpendingComplete = _BOOL ; \n\t\t\t} \n\t\t$F165 ( responseLock ) } \n\t$F39755 ( sentLock , sent , _BOOL ) } \n"}, {"code": "private $F35152 initTable $F72 { \n\t$F35152 tab ; \n\tint sc ; \n\twhile $F75438 ( tab , table ) { \n\t\tif $F75439 ( sc , sizeCtl ) { \n\t\t\t$F5756 ( Thread ) } \n\t\telse if $F75441 ( U , this , SIZECTL , sc ) { \n\t\t\ttry { \n\t\t\t\tif $F75438 ( tab , table ) { \n\t\t\t\t\t$F75443 ( n , sc , DEFAULT_CAPACITY ) $F1431 $F35152 nt = ( $F35152 ) new Node $F5162 [ n ] ; \n\t\t\t\t\ttable = tab = nt ; \n\t\t\t\t\t$F75453 ( sc , n ) } \n\t\t\t\t} \n\t\t\tfinally { \n\t\t\t\tsizeCtl = sc ; \n\t\t\t\t} \n\t\t\t$F597 } \n\t\t} \n\treturn tab ; \n\t} \n"}, {"code": "public BufferedImage drawBarGraphWithStdDev ( String graphTitle , String xLabel , String yLabel , HashMap < ComparableLabel , $F31354 > barDataPoints , $F806 barLabels , Long stdDevHigh , Long stdDevLow , Long graphMaxValue ) { \n\tBufferedImage bi = new BufferedImage ( this . WIDTH , this . HEIGHT , BufferedImage . TYPE_INT_ARGB ) ; \n\t$F5115 ( g2d , bi ) RenderingHints renderHints = new RenderingHints ( RenderingHints . KEY_ANTIALIASING , RenderingHints . VALUE_ANTIALIAS_ON ) ; \n\tg2d . setRenderingHints ( renderHints ) ; \n\tdrawChartAndGraphRectangles ( g2d ) ; \n\tdrawBarLegend ( g2d , NUM00 , barLabels , stdDevHigh , stdDevLow ) ; \n\tdrawTitleAndLabels ( g2d , graphTitle , xLabel , yLabel ) ; \n\tCollection < $F31354 > valueCollection = barDataPoints . values ( ) ; \n\tSet < ComparableLabel > dateKeySet = barDataPoints . keySet ( ) ; \n\tlong maxValue = NUM00 ; \n\tfor ( $F31354 intArray : valueCollection ) { \n\t\tfor ( Integer intValue : intArray ) { \n\t\t\t$F8790 ( maxValue , intValue ) } \n\t\t} \n\tlong yMaxMark = NUM00 ; \n\tint yLabelXOffset = NUM00 ; \n\tyMaxMark = determineYMaxMark ( maxValue , stdDevHigh , graphMaxValue ) ; \n\tdrawYAxisDivisions ( g2d , yMaxMark , yLabelXOffset ) ; \n\tArrayList < ComparableLabel > orderedDateSet = new ArrayList < ComparableLabel > $F72 ; \n\torderedDateSet . addAll ( dateKeySet ) ; \n\tCollections . sort ( orderedDateSet ) ; \n\tdrawXAxisDivisions ( g2d , orderedDateSet ) ; \n\tdrawBarsOnGraph ( g2d , orderedDateSet , barDataPoints , yMaxMark ) ; \n\tif ( stdDevHigh != null ) { \n\t\tdrawStdDevLine ( g2d , stdDevHigh , yMaxMark , this . stdDevHighColor ) ; \n\t\t} \n\tif ( stdDevLow != null ) { \n\t\tdrawStdDevLine ( g2d , stdDevLow , yMaxMark , this . stdDevLowColor ) ; \n\t\t} \n\treturn bi ; \n\t} \n"}, {"code": "public synchronized boolean loadPublicKey $F72 { \n\tif ( ! has ( NUM00 ) || ! has ( NUM00 ) ) return _BOOL ; \n\tString encodedKey = getString ( NUM00 ) ; \n\tString algorithm = getString ( NUM00 ) ; \n\tPublicKey pub = IO . decodePublicKey ( encodedKey , algorithm ) ; \n\tif ( pub != null ) { \n\t\tpublic_key = pub ; \n\t\tkey_algorithm = algorithm ; \n\t\tsetPeerHash ( ) ; \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "private String extractProjectNameFromUri $F116884 ( uri ) { \n\t$F24867 ( indexFinishProjectName , uri ) int indexStartProjectName = uri . lastIndexOf ( NUM00 ) != - NUM00 ? $F31603 ( uri ) : ( $F31603 ( uri ) ) ; \n\tif ( indexStartProjectName != NUM00 && indexStartProjectName < indexFinishProjectName ) $F102712 ( uri , indexStartProjectName , indexFinishProjectName ) if ( indexStartProjectName != NUM00 ) $F61217 ( uri , indexStartProjectName ) $F1278 } \n"}, {"code": "private void loadTextData ( DataInputStream dis ) throws IOException { \n\tfor ( $F119 ( f , numFrames ) ) { \n\t\ttimes [ f ] = Float . parseFloat ( General . readWord ( dis ) ) ; \n\t\tGeneral . readWord ( dis ) ; \n\t\tfor ( $F119 ( c , numChannels ) ) { \n\t\t\tframes [ f ] [ c ] = Float . parseFloat ( General . readWord ( dis ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F83977 ( listener , mListeners ) "}, {"code": "public static boolean isGzipContent ( String contentEncoding ) { \n\treturn $F82309 ( contentEncoding ) ; \n\t} \n"}, {"code": "public synchronized boolean checkSize ( final int sizeChecked ) { \n\t$F34216 ( started ) if ( sizeChecked > bufferSize ) $F322689 ( bufferSize ) if ( bufferLimit == NUM00 || buffer . writerIndex ( ) + sizeChecked > bufferLimit ) { \n\t\tflush ( ) ; \n\t\tdelayFlush = _BOOL ; \n\t\tfinal int remainingInFile = bufferObserver . getRemainingBytes ( ) ; \n\t\tif ( sizeChecked > remainingInFile ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\telse { \n\t\t\tbufferLimit = Math . min ( remainingInFile , bufferSize ) ; \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\telse $F98813 ( delayFlush , _BOOL ) } \n"}, {"code": "public void testCompareLessScale1 $F72 { \n\tString a = NUM00 ; \n\tint aScale = NUM00 ; \n\tString b = NUM00 ; \n\tint bScale = NUM00 ; \n\t$F1918 ( aNumber , a , aScale ) $F1918 ( bNumber , b , bScale ) int result = NUM00 ; \n\t$F1960 ( assertEquals , result , aNumber , bNumber ) } \n"}, {"code": "void reclaimScrapViews $F206149 ( views ) { \n\tif ( mViewTypeCount == NUM00 ) $F21926 ( views , mCurrentScrap ) else { \n\t\tfinal int viewTypeCount = mViewTypeCount ; \n\t\t$F158084 ( scrapViews , mScrapViews ) for ( $F1316 ( i , viewTypeCount ) ) { \n\t\t\t$F65533 ( scrapPile , scrapViews , i ) views . addAll ( scrapPile ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void exit $F72 { \n\texitCalled = _BOOL ; \n\tif ( threadMap != null ) { \n\t\tdeleteAllThreads ( ) ; \n\t\t$F973 ( log ) if ( DurationStatistics . collectStatistics ) { \n\t\t\tstatistics . exit ( ) ; \n\t\t\tlog . info ( String . format ( NUM00 , statistics . allCycles , statistics . getDurationMillis ( ) / NUM00 ) ) ; \n\t\t\tCollections . sort ( statistics . threads ) ; \n\t\t\tfor ( Statistics . ThreadStatistics threadStatistics : statistics . threads ) { \n\t\t\t\tdouble percentage = NUM00 ; \n\t\t\t\tif ( statistics . allCycles != NUM00 ) { \n\t\t\t\t\tpercentage = ( threadStatistics . runClocks / ( double ) statistics . allCycles ) * NUM00 ; \n\t\t\t\t\t} \n\t\t\t\tlog . info ( String . format ( NUM00 , threadStatistics . getQuotedName ( ) , threadStatistics . runClocks , percentage ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void formatNodeTo ( Formatter f , int level , RadixTreeNode $F4203 node ) { \n\tfor ( $F119 ( i , level ) ) { \n\t\tf . format ( NUM00 ) ; \n\t\t} \n\tf . format ( NUM00 ) ; \n\tfor ( $F119 ( i , level ) ) { \n\t\tf . format ( NUM00 ) ; \n\t\t} \n\tif ( node . isReal ( ) == _BOOL ) f . format ( NUM00 , node . getKey ( ) , node . getValue ( ) ) ; \n\telse f . format ( NUM00 , node . getKey ( ) ) ; \n\tfor ( RadixTreeNode $F4203 child : node . getChildern ( ) ) { \n\t\tformatNodeTo ( f , level + NUM00 , child ) ; \n\t\t} \n\t} \n"}, {"code": "protected void startDownload ( int blocks ) { \n\tif ( blocks > NUM00 ) log . info ( NUM00 + blocks + NUM00 + ( blocks > NUM00 ? NUM00 : NUM00 ) ) ; \n\t} \n"}, {"code": "public void add $F2026 ( start , end , handler , type ) { \n\tif ( start < end ) entries . add ( new ExceptionTableEntry ( start , end , handler , type ) ) ; \n\t} \n"}, {"code": "private void freeKick ( Team offense ) { \n\tif ( gameTime <= NUM00 ) $F665 else { \n\t\tif ( gameTime < NUM00 && ( ( gamePoss && ( awayScore - homeScore ) <= NUM00 && ( awayScore - homeScore ) > NUM00 ) || ( ! gamePoss && ( homeScore - awayScore ) <= NUM00 && ( homeScore - awayScore ) > NUM00 ) ) ) { \n\t\t\tif ( offense . getK ( NUM00 ) . ratKickFum * Math . random ( ) > NUM00 || Math . random ( ) < NUM00 ) { \n\t\t\t\tgameEventLog += getEventPrefix ( ) + offense . abbr + NUM00 + offense . getK ( NUM00 ) . name + NUM00 + offense . abbr + NUM00 ; \n\t\t\t\tgameYardLine = NUM00 ; \n\t\t\t\tgameDown = NUM00 ; \n\t\t\t\tgameYardsNeed = NUM00 ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tgameEventLog += getEventPrefix ( ) + offense . abbr + NUM00 + offense . getK ( NUM00 ) . name + NUM00 ; \n\t\t\t\tgamePoss = ! gamePoss ; \n\t\t\t\tgameYardLine = NUM00 ; \n\t\t\t\tgameDown = NUM00 ; \n\t\t\t\tgameYardsNeed = NUM00 ; \n\t\t\t\t} \n\t\t\tgameTime -= NUM00 + $F293740 ( Math ) ; \n\t\t\t} \n\t\telse { \n\t\t\tgameYardLine = ( int ) ( NUM00 - ( offense . getK ( NUM00 ) . ratKickPow + NUM00 - $F293740 ( Math ) ) ) ; \n\t\t\tif ( gameYardLine <= NUM00 ) gameYardLine = NUM00 ; \n\t\t\tgameDown = NUM00 ; \n\t\t\tgameYardsNeed = NUM00 ; \n\t\t\tgamePoss = ! gamePoss ; \n\t\t\tgameTime -= $F293740 ( Math ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void processNewPort ( long sw , short p ) { \n\t$F153093 ( isLinkDiscoverySuppressed , sw , p ) $F2579 ( iofSwitch , floodlightProvider , sw ) $F8249 ( iofSwitch ) if ( autoPortFastFeature && iofSwitch . isFastPort ( p ) ) $F932 NodePortTuple npt = new NodePortTuple ( sw , p ) ; \n\tdiscover ( sw , p ) ; \n\tif ( ! iofSwitch . isFastPort ( p ) ) { \n\t\taddToQuarantineQueue ( npt ) ; \n\t\t} \n\telse { \n\t\taddToMaintenanceQueue ( npt ) ; \n\t\t} \n\t} \n"}, {"code": "public static void put3ByteInt ( ByteBuffer buffer , int val ) { \n\tput3ByteInt ( buffer , val , buffer . order ( ) ) ; \n\t} \n"}, {"code": "public static void assertNoException ( Runnable expression , String errorMessage ) { \n\tif ( verbose ) { \n\t\t$F25590 ( log , expression , errorMessage ) } \n\ttry $F21688 ( expression ) catch ( RuntimeException failure ) { \n\t\tTestUtils . fail ( errorMessage ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public int indexOf ( Object object ) $F41330 ( indexOf , object ) "}, {"code": "protected ResponseFormatType generateAcceptFormat ( String format ) throws BadApiRequestException { \n\ttry { \n\t\treturn format == null ? ResponseFormatType . JSON : ResponseFormatType . valueOf ( $F65405 ( format , Locale ) ) ; \n\t\t} \n\tcatch ( IllegalArgumentException e ) { \n\t\tLOG . error ( ACCEPT_FORMAT_INVALID . logFormat ( format ) , e ) ; \n\t\tthrow new BadApiRequestException ( ACCEPT_FORMAT_INVALID . format ( format ) ) ; \n\t\t} \n\t} \n"}, {"code": "public SharedObject ( $F2100 ( data ) , String name , String path , boolean persistent ) { \n\tsuper ( ) ; \n\tthis . name = name ; \n\tthis . path = path ; \n\tthis . persistentSO = persistent ; \n\townerMessage = new SharedObjectMessage ( null , name , NUM00 , persistent ) ; \n\t$F3224 ( creationTime , System ) super . setAttributes ( data ) ; \n\t} \n"}, {"code": "public static String dateToString ( Date date ) { \n\tif ( date == null ) $F1337 else { \n\t\tDateFormat df = new SimpleDateFormat ( dateFormat ) ; \n\t\tdf . setTimeZone ( utc ) ; \n\t\t$F5330 ( df , date ) } \n\t} \n"}, {"code": "public static String infoFirstLastPixels ( ImageLineInt line ) { \n\treturn line . imgInfo . channels == NUM00 ? String . format ( NUM00 , line . scanline [ NUM00 ] , line . scanline [ line . scanline . length - NUM00 ] ) : String . format ( NUM00 , line . scanline [ NUM00 ] , line . scanline [ NUM00 ] , line . scanline [ NUM00 ] , line . scanline [ line . scanline . length - line . imgInfo . channels ] , line . scanline [ line . scanline . length - line . imgInfo . channels + NUM00 ] , line . scanline [ line . scanline . length - line . imgInfo . channels + NUM00 ] ) ; \n\t} \n"}, {"code": "private AstNode memberExprTail ( boolean allowCallSyntax , AstNode pn ) throws IOException { \n\t$F21009 ( pn , codeBug ) int pos = pn . getPosition ( ) ; \n\tint lineno ; \n\ttailLoop : for ( $F589 ) { \n\t\tint tt = peekToken ( ) ; \n\t\tswitch ( tt ) { \n\t\t\tcase Token . DOT : case Token . DOTDOT : lineno = ts . lineno ; \n\t\t\tpn = propertyAccess ( tt , pn ) ; \n\t\t\tpn . setLineno ( lineno ) ; \n\t\t\t$F597 case Token . DOTQUERY : consumeToken ( ) ; \n\t\t\tint opPos = ts . tokenBeg , rp = - NUM00 ; \n\t\t\tlineno = ts . lineno ; \n\t\t\tmustHaveXML ( ) ; \n\t\t\tsetRequiresActivation ( ) ; \n\t\t\tAstNode filter = expr ( ) ; \n\t\t\tint end = getNodeEnd ( filter ) ; \n\t\t\tif ( mustMatchToken ( Token . RP , NUM00 ) ) { \n\t\t\t\trp = ts . tokenBeg ; \n\t\t\t\tend = ts . tokenEnd ; \n\t\t\t\t} \n\t\t\tXmlDotQuery q = new XmlDotQuery ( pos , end - pos ) ; \n\t\t\tq . setLeft ( pn ) ; \n\t\t\tq . setRight ( filter ) ; \n\t\t\tq . setOperatorPosition ( opPos ) ; \n\t\t\tq . setRp ( rp - pos ) ; \n\t\t\tq . setLineno ( lineno ) ; \n\t\t\tpn = q ; \n\t\t\t$F597 case Token . LB : consumeToken ( ) ; \n\t\t\tint lb = ts . tokenBeg , rb = - NUM00 ; \n\t\t\tlineno = ts . lineno ; \n\t\t\tAstNode expr = expr ( ) ; \n\t\t\tend = getNodeEnd ( expr ) ; \n\t\t\tif ( mustMatchToken ( Token . RB , NUM00 ) ) { \n\t\t\t\trb = ts . tokenBeg ; \n\t\t\t\tend = ts . tokenEnd ; \n\t\t\t\t} \n\t\t\tElementGet g = new ElementGet ( pos , end - pos ) ; \n\t\t\tg . setTarget ( pn ) ; \n\t\t\tg . setElement ( expr ) ; \n\t\t\tg . setParens ( lb , rb ) ; \n\t\t\tg . setLineno ( lineno ) ; \n\t\t\tpn = g ; \n\t\t\t$F597 case Token . LP : if ( ! allowCallSyntax ) { \n\t\t\t\tbreak tailLoop ; \n\t\t\t\t} \n\t\t\tlineno = ts . lineno ; \n\t\t\tconsumeToken ( ) ; \n\t\t\tcheckCallRequiresActivation ( pn ) ; \n\t\t\tFunctionCall f = new FunctionCall ( pos ) ; \n\t\t\tf . setTarget ( pn ) ; \n\t\t\tf . setLineno ( lineno ) ; \n\t\t\tf . setLp ( ts . tokenBeg - pos ) ; \n\t\t\tList < AstNode > args = argumentList ( ) ; \n\t\t\tif ( args != null && args . size ( ) > ARGC_LIMIT ) reportError ( NUM00 ) ; \n\t\t\tf . setArguments ( args ) ; \n\t\t\tf . setRp ( ts . tokenBeg - pos ) ; \n\t\t\tf . setLength ( ts . tokenEnd - pos ) ; \n\t\t\tpn = f ; \n\t\t\t$F597 $F1267 break tailLoop ; \n\t\t\t} \n\t\t} \n\treturn pn ; \n\t} \n"}, {"code": "public static Iterable $F15368 elements ( NodeList nodes ) $F1337 "}, {"code": "public static int minDistance ( String word1 , String word2 ) { \n\tif $F1238 ( word1 , word2 ) $F1082 $F1749 ( m , word1 ) $F1749 ( n , word2 ) $F26352 d = new int [ m + NUM00 ] [ n + NUM00 ] ; \n\t$F293658 ( d ) for ( $F10229 ( i , m ) ) d [ i ] [ NUM00 ] = i ; \n\tfor ( $F10229 ( j , n ) ) d [ NUM00 ] [ j ] = j ; \n\tfor ( $F10229 ( i , m ) ) { \n\t\tfor ( $F10229 ( j , n ) ) { \n\t\t\td [ i ] [ j ] = Math . min ( Math . min ( d [ i ] [ j - NUM00 ] + NUM00 , d [ i - NUM00 ] [ j ] + NUM00 ) , word1 . charAt ( i - NUM00 ) == word2 . charAt ( j - NUM00 ) ? d [ i - NUM00 ] [ j - NUM00 ] : d [ i - NUM00 ] [ j - NUM00 ] + NUM00 ) ; \n\t\t\t} \n\t\t} \n\treturn d [ m ] [ n ] ; \n\t} \n"}, {"code": "public void addUrl ( String url ) { \n\t$F2689 urls = getCachedUrls ( ) ; \n\turls . add ( url ) ; \n\tputCachedUrls ( urls ) ; \n\tupdateNotification ( urls ) ; \n\t} \n"}, {"code": "public void testValueOfLongMax $F72 { \n\tlong longVal = Long . MAX_VALUE ; \n\t$F2544 ( aNumber , BigInteger , longVal ) byte $F3018 = { \n\t\tNUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 } \n\t; \n\t$F3030 ( rBytes ) $F3031 ( resBytes , aNumber ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , aNumber ) } \n"}, {"code": "private void closeDatabaseConnection ( Connection connection ) { \n\t$F8249 ( connection ) try $F881 ( connection ) $F31184 connection = null ; \n\t$F665 } \n"}, {"code": "$F1 public boolean eIsSet ( int featureID ) { \n\tswitch ( featureID ) { \n\t\tcase InformationModelPackage . INFORMATION_MODEL__NAME : $F6439 ( NAME_EDEFAULT , name ) case InformationModelPackage . INFORMATION_MODEL__NAMESPACE : $F6439 ( NAMESPACE_EDEFAULT , namespace ) case InformationModelPackage . INFORMATION_MODEL__VERSION : $F6439 ( VERSION_EDEFAULT , version ) case InformationModelPackage . INFORMATION_MODEL__REFERENCES : $F6441 ( references ) case InformationModelPackage . INFORMATION_MODEL__DESCRIPTION : $F6439 ( DESCRIPTION_EDEFAULT , description ) case InformationModelPackage . INFORMATION_MODEL__DISPLAYNAME : $F6439 ( DISPLAYNAME_EDEFAULT , displayname ) case InformationModelPackage . INFORMATION_MODEL__CATEGORY : $F6439 ( CATEGORY_EDEFAULT , category ) case InformationModelPackage . INFORMATION_MODEL__PROPERTIES : $F6441 ( properties ) } \n\t$F6444 ( super , featureID ) } \n"}, {"code": "public void addUnnamedTask ( TmmTask task ) { \n\tif ( unnamedTaskExecutor == null || unnamedTaskExecutor . isShutdown ( ) ) $F20182 ( unnamedTaskExecutor , createUnnamedTaskExecutor ) task . addListener ( this ) ; \n\ttask . setState ( TaskState . QUEUED ) ; \n\tunnamedTaskExecutor . execute ( task ) ; \n\t} \n"}, {"code": "public Path ( final Vertex v0 , final Vertex v1 , final EdgeSample edgeSample ) { \n\t$F10057 ( v0 ) $F10057 ( v1 ) if ( v0 . sample == null ) $F10056 $F10057 ( edgeSample ) if ( edgeSample . getSample ( ) == null ) $F10056 this . vertices = new Vertex [ ] { \n\t\tv0 , v1 } \n\t; \n\tthis . preds = getPredicates ( vertices ) ; \n\tthis . edgeSample = edgeSample ; \n\tthis . sumEstRead = v0 . sample . estCard + edgeSample . estRead ; \n\tthis . sumEstCard = edgeSample . estCard ; \n\tthis . sumEstCost = getCost ( this . sumEstRead , this . sumEstCard ) ; \n\t} \n"}, {"code": "public boolean evaluate ( Map record ) { \n\t$F16628 ( recVal , record , keyField ) return op . evaluate ( this . val , recVal ) ; \n\t} \n"}, {"code": "$F31396 ( str , retval , ch , i , s , Integer ) "}, {"code": "public $F1469 toCharArray $F72 { \n\tCharset utf8 = Charset . forName ( NUM00 ) ; \n\tCharBuffer charBuffer = utf8 . decode ( ByteBuffer . wrap ( buffer , offset , length ) ) ; \n\t$F1469 chars = new char [ charBuffer . remaining ( ) ] ; \n\tcharBuffer . get ( chars ) ; \n\treturn chars ; \n\t} \n"}, {"code": "public static $F96 chars2utf $F21196 ( src , sindex , len ) { \n\t$F171903 ( dst , len ) int len1 = chars2utf ( src , sindex , dst , NUM00 , len ) ; \n\t$F2175 ( result , len1 ) $F135 ( System , dst , result , len1 ) return result ; \n\t} \n"}, {"code": "private void readReference $F72 { \n\tString sql ; \n\tif ( Env . isBaseLanguage ( $F9205 ( Env ) ) ) sql = NUM00 + NUM00 ; \n\telse sql = $F39 + Env . getAD_Language ( Env . getCtx ( ) ) + NUM00 + NUM00 ; \n\t$F8728 ( v_value ) $F8728 ( v_name ) $F8728 ( v_description ) try { \n\t\t$F46 ( pstmt , DB , sql ) $F49 ( rs , pstmt ) while $F1682 ( rs ) { \n\t\t\t$F27130 ( value , rs ) $F27130 ( name , rs ) $F27130 ( description , rs ) $F12553 ( description ) v_value . add ( value ) ; \n\t\t\tv_name . add ( name ) ; \n\t\t\tv_description . add ( description ) ; \n\t\t\t} \n\t\t$F59 ( rs ) $F59 ( pstmt ) } \n\t$F64 ( log , Level , sql , e ) $F115 ( size , v_value ) $F58180 ( s_value , size ) $F58180 ( s_name , size ) $F58180 ( s_description , size ) for ( $F119 ( i , size ) ) { \n\t\t$F73934 ( s_value , i , v_value ) $F73934 ( s_name , i , v_name ) $F73934 ( s_description , i , v_description ) } \n\t} \n"}, {"code": "private CarbonDictionarySortInfo createColumnSortInfo ( CarbonDictionarySortModel [ ] dictionarySortModels ) { \n\t$F2027 sortIndex ; \n\t$F2027 sortIndexInverted ; \n\tArrays . sort ( dictionarySortModels ) ; \n\t$F14244 ( sortIndex , dictionarySortModels ) $F14244 ( sortIndexInverted , dictionarySortModels ) for ( $F1139 ( i , dictionarySortModels ) ) { \n\t\tCarbonDictionarySortModel dictionarySortModel = dictionarySortModels [ i ] ; \n\t\tsortIndex [ i ] = dictionarySortModel . getKey ( ) ; \n\t\tsortIndexInverted [ dictionarySortModel . getKey ( ) - NUM00 ] = i + NUM00 ; \n\t\t} \n\tdictionarySortModels = null ; \n\t$F3807 sortIndexList = convertToList ( sortIndex ) ; \n\t$F3807 sortIndexInvertedList = convertToList ( sortIndexInverted ) ; \n\treturn new CarbonDictionarySortInfo ( sortIndexList , sortIndexInvertedList ) ; \n\t} \n"}, {"code": "private IntegerPolynomial MGF $F169066 ( seed , N , minCallsR , hashSeed ) { \n\tDigest hashAlg = params . hashAlg ; \n\tint hashLen = hashAlg . getDigestSize ( ) ; \n\t$F70838 ( buf , minCallsR , hashLen ) $F96 Z = hashSeed ? calcHash ( hashAlg , seed ) : seed ; \n\tint counter = NUM00 ; \n\twhile ( counter < minCallsR ) { \n\t\t$F6163 ( hashAlg , Z ) putInt ( hashAlg , counter ) ; \n\t\t$F12490 ( hash , calcHash , hashAlg ) $F41437 ( System , hash , buf , counter , hashLen ) counter ++ ; \n\t\t} \n\tIntegerPolynomial i = new IntegerPolynomial ( N ) ; \n\twhile ( _BOOL ) { \n\t\tint cur = NUM00 ; \n\t\tfor ( $F15868 ( index , buf ) ) { \n\t\t\tint O = ( int ) buf [ index ] & NUM00 ; \n\t\t\tif ( O >= NUM00 ) $F1448 for ( $F6268 ( terIdx ) ) { \n\t\t\t\tint rem3 = O % NUM00 ; \n\t\t\t\ti . coeffs [ cur ] = rem3 - NUM00 ; \n\t\t\t\tcur ++ ; \n\t\t\t\t$F3627 ( cur , N , i ) O = ( O - rem3 ) / NUM00 ; \n\t\t\t\t} \n\t\t\ti . coeffs [ cur ] = O - NUM00 ; \n\t\t\tcur ++ ; \n\t\t\t$F3627 ( cur , N , i ) } \n\t\t$F232230 ( cur , N , i ) $F6163 ( hashAlg , Z ) putInt ( hashAlg , counter ) ; \n\t\t$F12490 ( hash , calcHash , hashAlg ) buf = hash ; \n\t\tcounter ++ ; \n\t\t} \n\t} \n"}, {"code": "public static void agentmain ( String agentArgs , Instrumentation inst ) throws Exception { \n\tsynchronized ( JVMAgent . class ) { \n\t\tif ( instance == null ) { \n\t\t\tinstance = new JVMAgent ( inst ) ; \n\t\t\t$F38783 ( waitForInstance ) } \n\t\t} \n\t} \n"}, {"code": "public void close $F72 { \n\tHandler [ ] handlerArray = m_logger . getHandlers ( ) ; \n\tfor ( $F1139 ( i , handlerArray ) ) { \n\t\tHandler h = handlerArray [ i ] ; \n\t\t$F1206 ( h ) $F59 ( h ) m_logger . removeHandler ( h ) ; \n\t\t} \n\t} \n"}, {"code": "public String toString $F72 { \n\t$F1747 ( val ) if ( val instanceof Long || val instanceof Integer ) { \n\t\treturn Long . toString ( val . longValue ( ) ) ; \n\t\t} \n\t$F50466 ( d , val ) if $F28102 ( Double , d ) return ( d > NUM00 ) ? NUM00 : NUM00 ; \n\tif $F35707 ( Double , d ) $F1278 $F23209 ( Double , d ) } \n"}, {"code": "public static $F3803 splitText ( String text ) { \n\tint startLine = NUM00 ; \n\tint i = NUM00 ; \n\t$F1749 ( n , text ) $F8728 ( rc ) while ( i < n ) { \n\t\tswitch $F31372 ( text , i ) { \n\t\t\t$F1262 i ++ ; \n\t\t\tif $F52566 ( i , n , text ) { \n\t\t\t\ti ++ ; \n\t\t\t\t} \n\t\t\t$F56997 ( rc , text , startLine , i ) startLine = i ; \n\t\t\t$F597 $F1262 i ++ ; \n\t\t\tif $F52566 ( i , n , text ) { \n\t\t\t\ti ++ ; \n\t\t\t\t} \n\t\t\t$F56997 ( rc , text , startLine , i ) startLine = i ; \n\t\t\t$F597 $F1267 i ++ ; \n\t\t\t} \n\t\t} \n\tif $F9615 ( startLine , text ) $F71145 ( rc ) else { \n\t\t$F56997 ( rc , text , startLine , i ) } \n\treturn rc ; \n\t} \n"}, {"code": "CountryCodeSource maybeStripInternationalPrefixAndNormalize ( StringBuilder number , String possibleIddPrefix ) { \n\tif $F1277 ( number ) { \n\t\treturn CountryCodeSource . FROM_DEFAULT_COUNTRY ; \n\t\t} \n\t$F1150 ( m , PLUS_CHARS_PATTERN , number ) if $F54321 ( m ) { \n\t\tnumber . delete ( NUM00 , m . end ( ) ) ; \n\t\tnormalize ( number ) ; \n\t\treturn CountryCodeSource . FROM1BER_WITH_PLUS_SIGN ; \n\t\t} \n\tPattern iddPattern = regexCache . getPatternForRegex ( possibleIddPrefix ) ; \n\tnormalize ( number ) ; \n\treturn parsePrefixAsIdd ( iddPattern , number ) ? CountryCodeSource . FROM1BER_WITH_IDD : CountryCodeSource . FROM_DEFAULT_COUNTRY ; \n\t} \n"}, {"code": "$F1 public void write ( int value ) { \n\t$F211632 ( digest , value ) } \n"}, {"code": "public boolean isManufactured ( boolean ignoreSupplierProducts ) { \n\t$F6261 supplierProducts = null ; \n\ttry { \n\t\tsupplierProducts = product . getRelated ( NUM00 , UtilMisc . toMap ( NUM00 , NUM00 ) , UtilMisc . toList ( NUM00 ) , _BOOL ) ; \n\t\t} \n\tcatch ( GenericEntityException gee ) { \n\t\t$F172017 ( Debug , module ) } \n\tsupplierProducts = EntityUtil . filterByDate ( supplierProducts , UtilDateTime . nowTimestamp ( ) , NUM00 , NUM00 , _BOOL ) ; \n\treturn $F3816 ( childrenNodes ) && ( ignoreSupplierProducts || UtilValidate . isEmpty ( supplierProducts ) ) ; \n\t} \n"}, {"code": "private void addCodeFromField ( StringBuilder sb , Field f ) { \n\ttry { \n\t\tsb . append ( $F43113 ( f ) + f . getInt ( KeyEvent . class ) ) ; \n\t\t} \n\tcatch ( IllegalArgumentException e ) $F302 ( e ) $F153656 ( e ) $F84 ( sb ) } \n"}, {"code": "protected boolean scrollUp ( TextView widget , Spannable buffer , int amount ) { \n\tfinal Layout layout = widget . getLayout ( ) ; \n\tfinal int top = widget . getScrollY ( ) ; \n\tint topLine = layout . getLineForVertical ( top ) ; \n\tif ( layout . getLineTop ( topLine ) == top ) { \n\t\ttopLine -= NUM00 ; \n\t\t} \n\tif ( topLine >= NUM00 ) { \n\t\ttopLine = Math . max ( topLine - amount + NUM00 , NUM00 ) ; \n\t\tTouch . scrollTo ( widget , layout , widget . getScrollX ( ) , layout . getLineTop ( topLine ) ) ; \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void load ( String filename ) { \n\t++ numMappings ; \n\tloadClassFile ( filename ) ; \n\t} \n"}, {"code": "protected void fillFaceToolBar ( JToolBar faceTB , ButtonGroup bg ) { \n\tfor ( EditToolLoader loader : loaderList ) { \n\t\t$F806 classnames = loader . getEditableClasses ( ) ; \n\t\tfor ( $F1139 ( i , classnames ) ) { \n\t\t\tImageIcon icon = loader . getIcon ( classnames [ i ] ) ; \n\t\t\tJToggleButton btn = new JToggleButton ( icon , _BOOL ) ; \n\t\t\tbtn . setToolTipText ( loader . getPrettyName ( classnames [ i ] ) ) ; \n\t\t\tbtn . setFocusable ( _BOOL ) ; \n\t\t\tbtn . setActionCommand ( classnames [ i ] ) ; \n\t\t\tbtn . addActionListener ( this ) ; \n\t\t\tbg . add ( btn ) ; \n\t\t\tfaceTB . add ( btn ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void writeToFile ( File filename ) throws IOException { \n\tFileUtils . stringToFile ( mText . toString ( ) , filename ) ; \n\t} \n"}, {"code": "protected void transformRectsTouch ( ArrayList < RectF > rects ) { \n\tfor ( $F2277 ( i , rects ) ) { \n\t\tmMatrixTouch . mapRect ( rects . get ( i ) ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public String toString $F72 { \n\t$F83 ( buf ) for ( NameValuePair pair : nameValuePairList ) { \n\t\t$F84 ( buf ) $F167270 ( buf , pair ) $F84 ( buf ) $F84 ( buf ) buf . append ( $F25312 ( getQuotedAttributeValue , pair ) ) ; \n\t\t$F84 ( buf ) } \n\t$F92 ( buf ) } \n"}, {"code": "$F1 public final int arrayOffset $F72 $F2905 ( protectedArrayOffset ) "}, {"code": "public DOMTestDocumentBuilderFactory newInstance $F230110 ( newSettings ) throws DOMTestIncompatibleException { \n\t$F1933 ( newSettings , this ) $F230109 mergedSettings = mergeSettings ( newSettings ) ; \n\treturn new BatikTestDocumentBuilderFactory ( mergedSettings ) ; \n\t} \n"}, {"code": "public $F5415 valueArray $F74143 ( array ) { \n\tif ( array == null || array . length != size ( ) ) { \n\t\t$F189191 ( array , count ) } \n\t$F135 ( System , values , array , count ) return array ; \n\t} \n"}, {"code": "public static Set < TypeVariable > methodTypeToTargets ( final AnnotatedExecutableType methodType ) { \n\tfinal List < AnnotatedTypeVariable > annotatedTypeVars = methodType . getTypeVariables ( ) ; \n\tfinal Set < TypeVariable > targets = new $F22301 $F716 ( annotatedTypeVars ) ; \n\tfor ( final AnnotatedTypeVariable atv : annotatedTypeVars ) { \n\t\ttargets . add ( atv . getUnderlyingType ( ) ) ; \n\t\t} \n\treturn targets ; \n\t} \n"}, {"code": "private void validateTableMetaDataSingleRow ( String tableNamePattern , $F806 types , Map < TableMetaData , Object > validationRules ) throws Exception { \n\tcheckValidationRulesComplete ( validationRules ) ; \n\ttry ( ResultSet tables = dbmd . getTables ( null , null , tableNamePattern , types ) ) { \n\t\t$F32625 ( assertTrue , tables ) validateRowValues ( tables , validationRules ) ; \n\t\t$F32625 ( assertFalse , tables ) } \n\t} \n"}, {"code": "public void flush $F72 throws IOException { \n\ttry { \n\t\t$F11584 ( _writer , _buffer , _pos ) $F1206 ( _writer ) } \n\tcatch ( IOException except ) { \n\t\t$F22996 ( _exception , except ) throw except ; \n\t\t} \n\t_pos = NUM00 ; \n\t} \n"}, {"code": "private JavaScriptRelationSets $F72 $F845 "}, {"code": "$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel ) "}, {"code": "private JMenu makeLogLevelMenu $F72 { \n\treturn new LogLevelMenu $F72 ; \n\t} \n"}, {"code": "$F1 public void close $F72 throws IOException { \n\tsynchronized ( lock ) { \n\t\tbuf = null ; \n\t\t$F59 ( in ) } \n\t} \n"}, {"code": "public DGetAlias ( JFrame parent , String title , String alias ) { \n\tsuper ( parent , title , Dialog . ModalityType . DOCUMENT_MODAL ) ; \n\tinitComponents ( alias ) ; \n\t} \n"}, {"code": "$F141880 ( closeable , rethrown ) "}, {"code": "public static ArrayList < Hop > deepCopyHopsDag ( ArrayList < Hop > hops ) throws HopsException { \n\tArrayList < Hop > ret = new ArrayList < Hop > $F72 ; \n\ttry { \n\t\tHashMap < Long , Hop > memo = new HashMap < Long , Hop > $F72 ; \n\t\tfor ( Hop hopRoot : hops ) $F12366 ( ret , rDeepCopyHopsDag , hopRoot , memo ) } \n\tcatch ( Exception ex ) { \n\t\tthrow new HopsException ( ex ) ; \n\t\t} \n\treturn ret ; \n\t} \n"}, {"code": "public void addAll ( T ... items ) { \n\tif ( mEventDelegate != null ) mEventDelegate . addData ( items == null ? NUM00 : items . length ) ; \n\tif $F180527 ( items ) { \n\t\tsynchronized ( mLock ) $F122380 ( Collections , mObjects , items ) } \n\t$F32367 ( mNotifyOnChange , notifyDataSetChanged ) } \n"}, {"code": "private void replaceImpl ( final int startIndex , final int endIndex , final int removeLen , final String insertStr , final int insertLen ) { \n\tfinal int newSize = size - removeLen + insertLen ; \n\tif ( insertLen != removeLen ) { \n\t\tensureCapacity ( newSize ) ; \n\t\tSystem . arraycopy ( buffer , endIndex , buffer , startIndex + insertLen , size - endIndex ) ; \n\t\tsize = newSize ; \n\t\t} \n\tif ( insertLen > NUM00 ) { \n\t\t$F234786 ( insertStr , insertLen , buffer , startIndex ) } \n\t} \n"}, {"code": "public void updateCheque_DD_Card_Deposit_Receipt ( final Map instrumentDetailsMap ) $F86383 ( updateInstrumentAndPayinSql , instrumentDetailsMap , addToBankReconcilationSQL ) "}, {"code": "public void testtestIsLast $F72 throws SQLException { \n\tassertFalse ( target . isLast ( ) ) ; \n\ttarget . absolute ( - NUM00 ) ; \n\tassertTrue ( target . isLast ( ) ) ; \n\tassertFalse ( emptyTarget . isLast ( ) ) ; \n\t$F7683 ( assertFalse , emptyTarget ) assertFalse ( emptyTarget . isLast ( ) ) ; \n\ttry { \n\t\t$F59 ( target ) target . isLast ( ) ; \n\t\tfail ( NUM00 ) ; \n\t\t} \n\t$F31184 } \n"}, {"code": "public final void addHelperText $F134304 ( helperText ) { \n\tensureNotNull ( helperText , NUM00 ) ; \n\tensureNotEmpty ( helperText , NUM00 ) ; \n\tif $F2200 ( helperTexts , helperText ) $F36131 ( helperTexts , helperText , verifyPasswordStrength ) } \n"}, {"code": "void waitForLogEntry ( int index , int timeout ) throws GondolaException , InterruptedException , TimeoutException { \n\treset ( ) ; \n\tthis . index = index ; \n\tlong endTs = timeout < NUM00 ? Long . MAX_VALUE : gondola . getClock ( ) . now ( ) + timeout ; \n\t$F790 ( lock ) try { \n\t\twhile ( status == Command . STATUS_NONE && gondola . getClock ( ) . now ( ) < endTs ) { \n\t\t\tif ( timeout < NUM00 ) $F24081 ( updateCond ) else { \n\t\t\t\tupdateCond . await ( timeout , TimeUnit . MILLISECONDS ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( this . index != index ) $F21338 ( logger ) } \n\t$F796 ( lock ) switch ( status ) { \n\t\tcase Command . STATUS_NONE : status = Command . STATUS_TIMEOUT ; \n\t\tthrow new TimeoutException $F4456 ( String , timeout , index ) ; \n\t\tcase Command . STATUS_NOT_LEADER : assert _BOOL ; \n\t\t$F597 case Command . STATUS_SLAVE_MODE : throw new GondolaException ( GondolaException . Code . SLAVE_MODE , cmember . memberId ) ; \n\t\tcase Command . STATUS_ERROR : throw new IllegalStateException ( NUM00 + index + NUM00 + errorMessage ) ; \n\t\tcase Command . STATUS_OK : $F597 } \n\t} \n"}, {"code": "public static String generateNativeGuid ( DbClient dbClient , Volume volume ) throws IOException { \n\tStorageSystem device = dbClient . queryObject ( $F41797 , volume . getStorageController ( ) ) ; \n\treturn String . format ( NUM00 + VOLUME + NUM00 , $F131294 ( _deviceTypeMap , device ) , device . getSerialNumber ( ) , volume . getNativeId ( ) ) ; \n\t} \n"}, {"code": "public AgentMappings saveAgentMappings ( AgentMappings agentMappings , boolean checkEnvironments ) throws BusinessException , JAXBException , IOException { \n\tif ( checkEnvironments ) { \n\t\tcheckEnvironments ( agentMappings ) ; \n\t\t} \n\tAgentMappings current ; \n\tdo { \n\t\t$F16478 ( current , agentMappingsReference ) if ( current . getRevision ( ) != agentMappings . getRevision ( ) ) { \n\t\t\tthrow new BusinessException ( NUM00 , ConfigurationInterfaceErrorCodeEnum . REVISION_CHECK_FAILED ) ; \n\t\t\t} \n\t\t} \n\twhile $F59753 ( agentMappingsReference , current , agentMappings ) ; \n\tagentMappings . setRevision ( agentMappings . getRevision ( ) + NUM00 ) ; \n\tsaveAgentMapping ( agentMappings ) ; \n\tpublishAgentMappingsUpdateEvent ( ) ; \n\treturn agentMappings ; \n\t} \n"}, {"code": "public E push ( E object ) { \n\taddElement ( object ) ; \n\treturn object ; \n\t} \n"}, {"code": "protected void newCertBtnListener $F72 { \n\tNewCertificateDialogData data = new NewCertificateDialogData $F72 ; \n\tNewCertificateDialog dialog = new NewCertificateDialog ( getShell ( ) , data , NUM00 ) ; \n\tint returnCode = dialog . open ( ) ; \n\tif ( returnCode == Window . OK ) { \n\t\tString certPath = data . getCerFilePath ( ) ; \n\t\tcertTxt . setText ( certPath != null ? $F2934 ( certPath ) : certPath ) ; \n\t\tcertInfoTxt . setText ( $F47592 ( getCertInfo , certTxt ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static void generateMov ( final ITranslationEnvironment environment , final long baseOffset , final IInstruction instruction , $F7332 ( instructions ) ) throws InternalTranslationException { \n\t$F1832 ( Preconditions , environment ) $F1832 ( Preconditions , instruction ) $F1832 ( Preconditions , instructions ) long reilOffset = baseOffset ; \n\tfinal List < ? extends IOperandTree > operands = instruction . getOperands ( ) ; \n\tfinal TranslationResult loadSource = Helpers . translateOperand ( environment , reilOffset , operands . get ( NUM00 ) , _BOOL ) ; \n\tinstructions . addAll ( loadSource . getInstructions ( ) ) ; \n\t$F283237 ( reilOffset , baseOffset , instructions ) final TranslationResult loadDest = Helpers . translateOperand ( environment , reilOffset , operands . get ( NUM00 ) , _BOOL ) ; \n\tinstructions . addAll ( loadDest . getInstructions ( ) ) ; \n\t$F283237 ( reilOffset , baseOffset , instructions ) Helpers . writeBack ( environment , reilOffset , operands . get ( NUM00 ) , loadSource . getRegister ( ) , loadDest . getSize ( ) , loadDest . getAddress ( ) , loadDest . getType ( ) , instructions ) ; \n\t} \n"}, {"code": "public void characters $F62353 ( start , length ) throws $F2253 { \n\t$F18748 ( m_shouldProcess ) XSLTElementProcessor elemProcessor = getCurrentProcessor ( ) ; \n\tXSLTElementDef def = elemProcessor . getElemDef ( ) ; \n\tif ( def . getType ( ) != XSLTElementDef . T_PCDATA ) elemProcessor = def . getProcessorFor ( null , NUM00 ) ; \n\tif ( null == elemProcessor ) { \n\t\tif ( ! XMLCharacterRecognizer . isWhiteSpace ( ch , start , length ) ) error ( XSLMessages . createMessage ( XSLTErrorResources . ER_NONWHITESPACE_NOT_ALLOWED_IN_POSITION , null ) , null ) ; \n\t\t} \n\telse elemProcessor . characters ( this , ch , start , length ) ; \n\t} \n"}, {"code": "public boolean removeEntry ( int xIndex , int dataSetIndex ) { \n\tif $F6389 ( dataSetIndex , mDataSets ) return _BOOL ; \n\t$F6391 ( dataSet , mDataSets , dataSetIndex ) Entry e = dataSet . getEntryForXIndex ( xIndex ) ; \n\treturn removeEntry ( e , dataSetIndex ) ; \n\t} \n"}, {"code": "public void testBug68562 $F72 throws Exception { \n\ttestBug68562BatchWithSize ( NUM00 ) ; \n\ttestBug68562BatchWithSize ( NUM00 ) ; \n\t} \n"}, {"code": "public Vec2 toVector ( Point2D v ) { \n\treturn new Vec2 ( $F59993 ( toMeters , v ) , toMeters ( - v . getY ( ) ) ) ; \n\t} \n"}, {"code": "$F1 public void terminateAnyRestoreSessions ( StorageSystem storage , BlockObject from , URI volume , TaskCompleter taskCompleter ) throws Exception { \n\tBlockObject blockObject = BlockObject . fetch ( _dbClient , volume ) ; \n\tCollection $F87269 syncObjects = null ; \n\tif ( storage . checkIfVmax3 ( ) ) { \n\t\tsyncObjects = _helper . getSettingsDefineStatePaths ( storage , blockObject , ( BlockSnapshot ) from ) ; \n\t\t} \n\telse { \n\t\tsyncObjects = getRestoredOrMixedStateSyncObjects ( storage , blockObject ) ; \n\t\t} \n\tfor ( CIMObjectPath syncObject : syncObjects ) { \n\t\tresumeSnapshot ( storage , from , blockObject , syncObject , taskCompleter ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F4203 $F28904 toSet ( T obj1 , T obj2 , T obj3 , T obj4 , T obj5 , T obj6 ) { \n\t$F78907 ( theSet ) theSet . add ( obj1 ) ; \n\ttheSet . add ( obj2 ) ; \n\ttheSet . add ( obj3 ) ; \n\ttheSet . add ( obj4 ) ; \n\ttheSet . add ( obj5 ) ; \n\ttheSet . add ( obj6 ) ; \n\treturn theSet ; \n\t} \n"}, {"code": "protected void writeGraphicCtrlExt $F72 throws IOException { \n\t$F25097 ( out ) $F25097 ( out ) $F25097 ( out ) int transp , disp ; \n\tif ( transparent == - NUM00 ) $F18712 ( transp , disp ) else $F18712 ( transp , disp ) if ( dispose >= NUM00 ) { \n\t\tdisp = dispose & NUM00 ; \n\t\t} \n\tdisp <<= NUM00 ; \n\tout . write ( NUM00 | disp | NUM00 | transp ) ; \n\twriteShort ( delay ) ; \n\tout . write ( transIndex ) ; \n\t$F25097 ( out ) } \n"}, {"code": "public final double doOperation $F72 throws OperatorFailedException { \n\tint index ; \n\tif ( updateMap == null ) { \n\t\tindex = MathUtils . nextInt ( parameter . getDimension ( ) ) ; \n\t\t} \n\telse { \n\t\tindex = updateMap . get ( MathUtils . nextInt ( updateMapSize ) ) ; \n\t\t} \n\tdouble draw = ( NUM00 * MathUtils . nextDouble ( ) - NUM00 ) * windowSize ; \n\tdouble newValue = parameter . getParameterValue ( index ) + draw ; \n\tfinal $F62092 bounds = parameter . getBounds ( ) ; \n\tfinal double lower = ( lowerOperatorBound == null ? bounds . getLowerLimit ( index ) : Math . max ( bounds . getLowerLimit ( index ) , lowerOperatorBound ) ) ; \n\tfinal double upper = ( upperOperatorBound == null ? bounds . getUpperLimit ( index ) : Math . min ( bounds . getUpperLimit ( index ) , upperOperatorBound ) ) ; \n\tif ( condition == BoundaryCondition . reflecting ) { \n\t\tnewValue = reflectValue ( newValue , lower , upper ) ; \n\t\t} \n\telse if ( condition == BoundaryCondition . absorbing && ( newValue < lower || newValue > upper ) ) $F1083 else if ( newValue < lower || newValue > upper ) $F62102 parameter . setParameterValue ( index , newValue ) ; \n\t$F1082 } \n"}, {"code": "$F21572 ( doc , elementList , nameNode , child , childData , load , _BOOL , assertEquals ) "}, {"code": "public $F5363 injectables $F72 $F12523 ( Collections ) "}, {"code": "private void updateEffectiveDimensions $F72 { \n\teffectiveWidth = Math . max ( NUM00 , width - leftBorder - rightBorder ) ; \n\teffectiveHeight = Math . max ( NUM00 , height - topBorder - bottomBorder ) ; \n\t} \n"}, {"code": "public void addAttribute ( AttributeInfo info ) { \n\t$F92209 ( attribute ) AttributeInfo . remove ( attribute , info . getName ( ) ) ; \n\tattribute . add ( info ) ; \n\t} \n"}, {"code": "public void addLine ( String text ) throws BadLocationException { \n\tif ( $F6035 ( text ) || text . equals ( NUM00 ) ) $F932 document . replace ( document . getLength ( ) , NUM00 , text ) ; \n\t} \n"}, {"code": "protected void muteButtonPressed ( ActionEvent e ) { \n\tJToggleButton b = ( JToggleButton ) e . getSource ( ) ; \n\tlog . debug ( NUM00 + b . isSelected ( ) ) ; \n\tfirePropertyChange ( PropertyChangeID . MUTE , $F151781 ( b ) , b . isSelected ( ) ) ; \n\t} \n"}, {"code": "public TwoDPoint ( String s ) { \n\t$F17727 ( st , s ) x = $F245302 ( Double , st ) ; \n\ty = $F245302 ( Double , st ) ; \n\t} \n"}, {"code": "private void readObject ( final ObjectInputStream in ) throws $F6427 { \n\t$F6428 ( in ) init ( ) ; \n\t} \n"}, {"code": "public static boolean isClassSupport ( String clzName ) { \n\ttry { \n\t\tClass . forName ( clzName ) ; \n\t\treturn _BOOL ; \n\t\t} \n\t$F17063 ( _BOOL ) } \n"}, {"code": "public void addPopupListener ( final PopupListener listener ) $F2202 ( popupListeners , listener ) "}, {"code": "public static $F96 decode $F97 ( data ) { \n\tint len = data . length / NUM00 * NUM00 ; \n\t$F39018 ( bOut , len ) try { \n\t\tencoder . decode ( data , NUM00 , data . length , bOut ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new DecoderException $F11592 ( e ) ; \n\t\t} \n\t$F11316 ( bOut ) } \n"}, {"code": "public static String buildSelectorFromAttributeTypeAndValue ( String attributeType , String attributeValue ) { \n\t$F83 ( strb ) strb . append ( OPEN_BRACKET ) ; \n\tstrb . append ( attributeType ) ; \n\tstrb . append ( EQUAL ) ; \n\tstrb . append ( attributeValue ) ; \n\tstrb . append ( CLOSE_BRACKET ) ; \n\t$F92 ( strb ) } \n"}, {"code": "public static Bitmap scaleFit ( Bitmap src , int maxW , int maxH ) { \n\tfloat ratio = Math . min ( maxW / $F52896 ( src ) , maxH / $F52899 ( src ) ) ; \n\tint newW = $F85502 ( src , ratio ) ; \n\tint newH = $F85503 ( src , ratio ) ; \n\treturn scale ( src , newW , newH ) ; \n\t} \n"}, {"code": "public File ( String dirPath , String name ) { \n\t$F896 ( name ) if $F4251 ( dirPath ) { \n\t\tthis . path = fixSlashes ( name ) ; \n\t\t} \n\telse if $F2979 ( name ) { \n\t\tthis . path = fixSlashes ( dirPath ) ; \n\t\t} \n\telse { \n\t\tthis . path = fixSlashes ( join ( dirPath , name ) ) ; \n\t\t} \n\t} \n"}, {"code": "void decodeAttributeBody $F65230 ( attributeValue , offset , length ) $F65231 ( username , length , System , attributeValue , offset ) "}, {"code": "protected synchronized $F96 engineGenerateSeed ( int numBytes ) { \n\t$F96 myBytes ; \n\tif ( numBytes < NUM00 ) { \n\t\tthrow new NegativeArraySizeException $F59159 ( Integer , numBytes ) ; \n\t\t} \n\tif ( numBytes == NUM00 ) { \n\t\treturn EmptyArray . BYTE ; \n\t\t} \n\tif ( myRandom == null ) { \n\t\tmyRandom = new SHA1PRNG_SecureRandomImpl $F72 ; \n\t\tmyRandom . engineSetSeed ( getRandomBytes ( DIGEST_LENGTH ) ) ; \n\t\t} \n\t$F1325 ( myBytes , numBytes ) myRandom . engineNextBytes ( myBytes ) ; \n\treturn myBytes ; \n\t} \n"}, {"code": "public static String normalizeInet4Address ( String ip4String ) { \n\tfinal $F2027 octets = parseInet4Address ( ip4String ) ; \n\t$F1338 ( octets ) $F83 ( sb ) for ( $F6268 ( i ) ) $F70285 ( i , sb , octets ) $F92 ( sb ) } \n"}, {"code": "public static $F2027 shuffle $F23416 ( input ) { \n\t$F3807 vals = new $F15272 ( input . length ) ; \n\t$F46150 ( i , input , vals ) Collections . shuffle ( vals , SEEDED_RANDOM ) ; \n\t$F22974 ( copy , input ) for ( $F1139 ( i , input ) ) $F15302 ( copy , i , vals ) return copy ; \n\t} \n"}, {"code": "public boolean offer ( PooledConnection pooledConnection ) { \n\tacquiredConnections . remove ( pooledConnection ) ; \n\t$F8563 ( offer , queue , pooledConnection ) if ( ! offer ) $F47532 ( pooledConnection ) if $F27748 ( isTerminating ) { \n\t\tPooledConnection poll = queue . poll ( ) ; \n\t\t$F92075 ( poll ) } \n\treturn offer ; \n\t} \n"}, {"code": "private int parseStyleInDefaultWorkspace ( GeoServerRESTReader reader , int count , List < StyleWrapper > styleList ) { \n\tRESTStyleList geoServerStyleList = reader . getStyles ( ) ; \n\tfor ( String style : geoServerStyleList . getNames ( ) ) { \n\t\tStyleWrapper newStyleWrapper = new StyleWrapper ( DEFAULT_WORKSPACE_NAME , style ) ; \n\t\tstyleList . add ( newStyleWrapper ) ; \n\t\tif ( parentObj != null ) { \n\t\t\tparentObj . readStylesProgress ( connection , count , count ) ; \n\t\t\t} \n\t\tcount ++ ; \n\t\t} \n\treturn count ; \n\t} \n"}, {"code": "private ClassSignature loadClassFromJigsaw ( String classname ) throws IOException { \n\t$F13264 ( method_Class_getModule , method_Module_getName ) $F6970 ( clazz ) ; \n\tfinal String moduleName ; \n\ttry { \n\t\tclazz = Class . forName ( classname , _BOOL , loader ) ; \n\t\tfinal Object module = method_Class_getModule . invoke ( clazz ) ; \n\t\tmoduleName = ( String ) method_Module_getName . invoke ( module ) ; \n\t\t} \n\t$F34300 return new ClassSignature ( clazz , AsmUtils . isRuntimeModule ( moduleName ) ) ; \n\t} \n"}, {"code": "public void testConnectANTSensor_Cadence $F72 { \n\tif ( ! runTest ) { \n\t\tLog . d ( TAG , BigTestUtils . DISABLE_MESSAGE ) ; \n\t\t$F665 } \n\tuseANTSeonsor ( ) ; \n\tassertTrue ( checkSensorsStatus_notRecording ( ) ) ; \n\tcheckANTSensorsStatus ( R . id . sensor_state_cadence ) ; \n\t} \n"}, {"code": "$F1 public boolean equals ( Object obj ) { \n\t$F3627 ( this , obj , _BOOL ) $F1933 ( obj , _BOOL ) $F34838 ( getClass , obj , _BOOL ) Diff other = ( Diff ) obj ; \n\t$F12734 ( operation , other , _BOOL ) $F56936 ( text , other , _BOOL ) return _BOOL ; \n\t} \n"}, {"code": "public void clearAttributeSpecs $F72 { \n\tif ( m_attributeSpecs == null ) { \n\t\tm_attributeSpecs = new ArrayList < AttributeSpec > $F72 ; \n\t\t} \n\t$F725 ( m_attributeSpecs ) } \n"}, {"code": "public void loadProperties ( boolean silent ) { \n\tloadPropertiesFile ( System . getProperty ( PROPERTIES_FILE , NUM00 ) , silent ) ; \n\tinitializeProperties ( ) ; \n\t} \n"}, {"code": "$F1 public void start $F72 { \n\ttry { \n\t\tJournalClientEndpoint endpoint = connect ( ) ; \n\t\tif ( endpoint != null ) { \n\t\t\tOutputStream os ; \n\t\t\t_os = os = endpoint . startMessage ( ) ; \n\t\t\tif ( os != null ) $F12032 ( os ) } \n\t\t} \n\tcatch ( Exception e ) { \n\t\tlog . finer ( e . toString ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "static private int readBytes ( int $F184368 , int len , InputStream is ) throws IOException { \n\tbyte $F46499 = new byte [ len ] ; \n\tif ( is . read ( buf , NUM00 , len ) < len ) $F7629 for ( $F119 ( i , len ) ) { \n\t\tc [ i ] = buf [ i ] & NUM00 ; \n\t\t} \n\t$F1082 } \n"}, {"code": "public static void sort $F22194 ( array ) { \n\tif $F3305 ( array ) $F57005 ( Arrays , array , INSTANCE ) } \n"}, {"code": "public static int expectedSizeOfProbabilityTable ( RandomVariable ... vars ) { \n\tint expectedSizeOfDistribution = NUM00 ; \n\tif ( null != vars ) { \n\t\tfor ( RandomVariable rv : vars ) { \n\t\t\tif ( ! ( rv . getDomain ( ) instanceof FiniteDomain ) ) $F18931 ( rv ) FiniteDomain d = ( FiniteDomain ) rv . getDomain ( ) ; \n\t\t\texpectedSizeOfDistribution *= d . size ( ) ; \n\t\t\t} \n\t\t} \n\treturn expectedSizeOfDistribution ; \n\t} \n"}, {"code": "native private static void initialize ( String applicationId ) ; \n"}, {"code": "$F107211 ( md5Model , animModel , defaultColour , invJointMatrices , calcInJointMatrices , animatedFrames , processAnimationFrames , list , md5Mesh , mesh , generateMesh , handleTexture , meshes , result ) "}, {"code": "static String encodeHighLevel ( String msg , Compaction compaction , Charset encoding ) throws WriterException { \n\t$F80469 ( sb , msg ) if ( encoding == null ) { \n\t\tencoding = DEFAULT_ENCODING ; \n\t\t} \n\telse if $F2137 ( DEFAULT_ENCODING , encoding ) { \n\t\tCharacterSetECI eci = CharacterSetECI . getCharacterSetECIByName ( encoding . name ( ) ) ; \n\t\tif ( eci != null ) { \n\t\t\tencodingECI ( eci . getValue ( ) , sb ) ; \n\t\t\t} \n\t\t} \n\t$F1749 ( len , msg ) int p = NUM00 ; \n\tint textSubMode = SUBMODE_ALPHA ; \n\t$F5475 ( bytes ) if ( compaction == Compaction . TEXT ) { \n\t\tencodeText ( msg , p , len , sb , textSubMode ) ; \n\t\t} \n\telse if ( compaction == Compaction . BYTE ) { \n\t\tbytes = msg . getBytes ( encoding ) ; \n\t\tencodeBinary ( bytes , p , bytes . length , BYTE_COMPACTION , sb ) ; \n\t\t} \n\telse if ( compaction == Compaction . NUMERIC ) { \n\t\t$F36813 ( sb , LATCH_TO1ERIC ) encodeNumeric ( msg , p , len , sb ) ; \n\t\t} \n\telse { \n\t\tint encodingMode = TEXT_COMPACTION ; \n\t\twhile ( p < len ) { \n\t\t\tint n = determineConsecutiveDigitCount ( msg , p ) ; \n\t\t\tif ( n >= NUM00 ) { \n\t\t\t\t$F36813 ( sb , LATCH_TO1ERIC ) encodingMode = NUMERIC_COMPACTION ; \n\t\t\t\ttextSubMode = SUBMODE_ALPHA ; \n\t\t\t\tencodeNumeric ( msg , p , n , sb ) ; \n\t\t\t\tp += n ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tint t = determineConsecutiveTextCount ( msg , p ) ; \n\t\t\t\tif ( t >= NUM00 || n == len ) { \n\t\t\t\t\tif ( encodingMode != TEXT_COMPACTION ) { \n\t\t\t\t\t\t$F36813 ( sb , LATCH_TO_TEXT ) encodingMode = TEXT_COMPACTION ; \n\t\t\t\t\t\ttextSubMode = SUBMODE_ALPHA ; \n\t\t\t\t\t\t} \n\t\t\t\t\ttextSubMode = encodeText ( msg , p , t , sb , textSubMode ) ; \n\t\t\t\t\tp += t ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tif ( bytes == null ) $F12169 ( bytes , msg , encoding ) int b = determineConsecutiveBinaryCount ( msg , bytes , p ) ; \n\t\t\t\t\t$F85331 ( b ) if ( b == NUM00 && encodingMode == TEXT_COMPACTION ) { \n\t\t\t\t\t\tencodeBinary ( bytes , p , NUM00 , TEXT_COMPACTION , sb ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse { \n\t\t\t\t\t\tencodeBinary ( bytes , p , b , encodingMode , sb ) ; \n\t\t\t\t\t\tencodingMode = BYTE_COMPACTION ; \n\t\t\t\t\t\ttextSubMode = SUBMODE_ALPHA ; \n\t\t\t\t\t\t} \n\t\t\t\t\tp += b ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F92 ( sb ) } \n"}, {"code": "private int readAnnotationValue ( int v , final $F1469 buf , final String name , final AnnotationVisitor av ) { \n\tint i ; \n\tif ( av == null ) { \n\t\tswitch ( b [ v ] & NUM00 ) { \n\t\t\t$F1262 return v + NUM00 ; \n\t\t\t$F1262 return readAnnotationValues ( v + NUM00 , buf , _BOOL , null ) ; \n\t\t\t$F1262 return readAnnotationValues ( v + NUM00 , buf , _BOOL , null ) ; \n\t\t\t$F1267 return v + NUM00 ; \n\t\t\t} \n\t\t} \n\tswitch $F44579 ( b , v ) { \n\t\t$F1262 $F1262 $F1262 $F1262 av . visit ( name , readConst ( readUnsignedShort ( v ) , buf ) ) ; \n\t\tv += NUM00 ; \n\t\t$F597 $F1262 av . visit ( name , new Byte ( ( byte ) readInt ( items [ readUnsignedShort ( v ) ] ) ) ) ; \n\t\tv += NUM00 ; \n\t\t$F597 $F1262 av . visit ( name , readInt ( items [ readUnsignedShort ( v ) ] ) == NUM00 ? Boolean . FALSE : Boolean . TRUE ) ; \n\t\tv += NUM00 ; \n\t\t$F597 $F1262 av . visit ( name , new Short ( ( short ) readInt ( items [ readUnsignedShort ( v ) ] ) ) ) ; \n\t\tv += NUM00 ; \n\t\t$F597 $F1262 av . visit ( name , new Character ( ( char ) readInt ( items [ readUnsignedShort ( v ) ] ) ) ) ; \n\t\tv += NUM00 ; \n\t\t$F597 $F1262 av . visit ( name , readUTF8 ( v , buf ) ) ; \n\t\tv += NUM00 ; \n\t\t$F597 $F1262 av . visitEnum ( name , readUTF8 ( v , buf ) , readUTF8 ( v + NUM00 , buf ) ) ; \n\t\tv += NUM00 ; \n\t\t$F597 $F1262 av . visit ( name , Type . getType ( readUTF8 ( v , buf ) ) ) ; \n\t\tv += NUM00 ; \n\t\t$F597 $F1262 v = readAnnotationValues ( v + NUM00 , buf , _BOOL , av . visitAnnotation ( name , readUTF8 ( v , buf ) ) ) ; \n\t\t$F597 $F1262 int size = readUnsignedShort ( v ) ; \n\t\tv += NUM00 ; \n\t\tif ( size == NUM00 ) { \n\t\t\treturn readAnnotationValues ( v - NUM00 , buf , _BOOL , av . visitArray ( name ) ) ; \n\t\t\t} \n\t\tswitch ( this . b [ v ++ ] & NUM00 ) { \n\t\t\t$F1262 $F2175 ( bv , size ) for ( i = NUM00 ; \n\t\t\ti < size ; \n\t\t\ti ++ ) { \n\t\t\t\tbv [ i ] = ( byte ) readInt ( items [ readUnsignedShort ( v ) ] ) ; \n\t\t\t\tv += NUM00 ; \n\t\t\t\t} \n\t\t\tav . visit ( name , bv ) ; \n\t\t\t-- v ; \n\t\t\t$F597 $F1262 $F57515 ( zv , size ) for ( i = NUM00 ; \n\t\t\ti < size ; \n\t\t\ti ++ ) { \n\t\t\t\tzv [ i ] = readInt ( items [ readUnsignedShort ( v ) ] ) != NUM00 ; \n\t\t\t\tv += NUM00 ; \n\t\t\t\t} \n\t\t\tav . visit ( name , zv ) ; \n\t\t\t-- v ; \n\t\t\t$F597 $F1262 $F5099 ( sv , size ) for ( i = NUM00 ; \n\t\t\ti < size ; \n\t\t\ti ++ ) { \n\t\t\t\tsv [ i ] = ( short ) readInt ( items [ readUnsignedShort ( v ) ] ) ; \n\t\t\t\tv += NUM00 ; \n\t\t\t\t} \n\t\t\tav . visit ( name , sv ) ; \n\t\t\t-- v ; \n\t\t\t$F597 $F1262 $F18064 ( cv , size ) for ( i = NUM00 ; \n\t\t\ti < size ; \n\t\t\ti ++ ) { \n\t\t\t\tcv [ i ] = ( char ) readInt ( items [ readUnsignedShort ( v ) ] ) ; \n\t\t\t\tv += NUM00 ; \n\t\t\t\t} \n\t\t\tav . visit ( name , cv ) ; \n\t\t\t-- v ; \n\t\t\t$F597 $F1262 $F4120 ( iv , size ) for ( i = NUM00 ; \n\t\t\ti < size ; \n\t\t\ti ++ ) { \n\t\t\t\tiv [ i ] = readInt ( items [ readUnsignedShort ( v ) ] ) ; \n\t\t\t\tv += NUM00 ; \n\t\t\t\t} \n\t\t\tav . visit ( name , iv ) ; \n\t\t\t-- v ; \n\t\t\t$F597 $F1262 $F12300 ( lv , size ) for ( i = NUM00 ; \n\t\t\ti < size ; \n\t\t\ti ++ ) { \n\t\t\t\tlv [ i ] = readLong ( items [ readUnsignedShort ( v ) ] ) ; \n\t\t\t\tv += NUM00 ; \n\t\t\t\t} \n\t\t\tav . visit ( name , lv ) ; \n\t\t\t-- v ; \n\t\t\t$F597 $F1262 $F25850 ( fv , size ) for ( i = NUM00 ; \n\t\t\ti < size ; \n\t\t\ti ++ ) { \n\t\t\t\tfv [ i ] = Float . intBitsToFloat ( readInt ( items [ readUnsignedShort ( v ) ] ) ) ; \n\t\t\t\tv += NUM00 ; \n\t\t\t\t} \n\t\t\tav . visit ( name , fv ) ; \n\t\t\t-- v ; \n\t\t\t$F597 $F1262 $F9662 ( dv , size ) for ( i = NUM00 ; \n\t\t\ti < size ; \n\t\t\ti ++ ) { \n\t\t\t\tdv [ i ] = Double . longBitsToDouble ( readLong ( items [ readUnsignedShort ( v ) ] ) ) ; \n\t\t\t\tv += NUM00 ; \n\t\t\t\t} \n\t\t\tav . visit ( name , dv ) ; \n\t\t\t-- v ; \n\t\t\t$F597 $F1267 v = readAnnotationValues ( v - NUM00 , buf , _BOOL , av . visitArray ( name ) ) ; \n\t\t\t} \n\t\t} \n\treturn v ; \n\t} \n"}, {"code": "private static final boolean compareAndSetWaitStatus ( Node node , int expect , int update ) { \n\treturn unsafe . compareAndSwapInt ( node , waitStatusOffset , expect , update ) ; \n\t} \n"}, {"code": "public NetworkConnectivityListener $F72 { \n\tmState = State . UNKNOWN ; \n\t} \n"}, {"code": "Vector processSIMPLEPATTERNLIST $F40351 ( handler , uri , name , rawName , value , owner ) throws $F2253 { \n\ttry { \n\t\t$F17727 ( tokenizer , value ) $F17729 ( nPatterns , tokenizer ) $F289085 ( patterns , nPatterns ) for ( $F119 ( i , nPatterns ) ) { \n\t\t\tXPath pattern = handler . createMatchPatternXPath ( tokenizer . nextToken ( ) , owner ) ; \n\t\t\tpatterns . addElement ( pattern ) ; \n\t\t\t} \n\t\treturn patterns ; \n\t\t} \n\t$F2262 ( te ) } \n"}, {"code": "protected ASN1Sequence ( ASN1Encodable [ ] array ) { \n\tfor ( $F15868 ( i , array ) ) { \n\t\t$F15869 ( seq , array , i ) } \n\t} \n"}, {"code": "public void addCopy ( IResource copy , CopyArguments arguments ) { \n\tif ( fCopy == null ) { \n\t\t$F136190 ( fCopy ) $F136190 ( fCopyArguments ) } \n\tfCopy . add ( copy ) ; \n\tfCopyArguments . add ( arguments ) ; \n\taddCopyDelta ( copy , arguments ) ; \n\t} \n"}, {"code": "$F1 public void write $F24576 ( buffer , offset , length ) throws IOException { \n\twhile $F73749 ( mByteToSkip , mByteToCopy , mState , STATE_JPEG_DATA , length ) { \n\t\t$F73751 ( mByteToSkip , byteToProcess , length , offset ) if ( mByteToCopy > NUM00 ) { \n\t\t\tint byteToProcess = length > mByteToCopy ? mByteToCopy : length ; \n\t\t\tout . write ( buffer , offset , byteToProcess ) ; \n\t\t\tlength -= byteToProcess ; \n\t\t\tmByteToCopy -= byteToProcess ; \n\t\t\toffset += byteToProcess ; \n\t\t\t} \n\t\t$F32905 ( length ) switch ( mState ) { \n\t\t\tcase STATE_SOI : int byteRead = requestByteToBuffer ( NUM00 , buffer , offset , length ) ; \n\t\t\toffset += byteRead ; \n\t\t\tlength -= byteRead ; \n\t\t\t$F73756 ( mBuffer ) $F23501 ( mBuffer ) $F73759 ( mBuffer , JpegHeader ) $F73762 ( out , mBuffer ) mState = STATE_FRAME_HEADER ; \n\t\t\t$F23501 ( mBuffer ) writeExifData ( ) ; \n\t\t\t$F597 case STATE_FRAME_HEADER : byteRead = requestByteToBuffer ( NUM00 , buffer , offset , length ) ; \n\t\t\toffset += byteRead ; \n\t\t\tlength -= byteRead ; \n\t\t\tif $F73765 ( mBuffer ) { \n\t\t\t\t$F73767 ( tag , mBuffer ) if ( tag == JpegHeader . EOI ) { \n\t\t\t\t\t$F73762 ( out , mBuffer ) $F23501 ( mBuffer ) } \n\t\t\t\t} \n\t\t\t$F73756 ( mBuffer ) $F23501 ( mBuffer ) $F73767 ( marker , mBuffer ) if ( marker == JpegHeader . APP1 ) $F125654 ( mByteToSkip , mBuffer , mState , STATE_JPEG_DATA ) else if $F125655 ( JpegHeader , marker ) { \n\t\t\t\t$F73762 ( out , mBuffer ) $F73777 ( mByteToCopy , mBuffer ) } \n\t\t\telse { \n\t\t\t\t$F73762 ( out , mBuffer ) mState = STATE_JPEG_DATA ; \n\t\t\t\t} \n\t\t\t$F23501 ( mBuffer ) } \n\t\t} \n\tif ( length > NUM00 ) $F21537 ( out , buffer , offset , length ) } \n"}, {"code": "protected $F8748 datasetIntegrity ( boolean nominalPredictor , boolean numericPredictor , boolean stringPredictor , boolean datePredictor , boolean relationalPredictor , boolean multiInstance , int classType , boolean predictorMissing , boolean classMissing ) { \n\tprint ( NUM00 ) ; \n\tprintAttributeSummary ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType ) ; \n\tprint ( NUM00 ) ; \n\tint numTrain = getNumInstances ( ) , numClasses = NUM00 , missingLevel = NUM00 ; \n\t$F125783 ( result ) Instances train = null ; \n\tInstances trainCopy = null ; \n\tASSearch search = null ; \n\tASEvaluation evaluation = null ; \n\ttry { \n\t\ttrain = makeTestDataset ( NUM00 , numTrain , nominalPredictor ? getNumNominal ( ) : NUM00 , numericPredictor ? getNumNumeric ( ) : NUM00 , stringPredictor ? getNumString ( ) : NUM00 , datePredictor ? getNumDate ( ) : NUM00 , relationalPredictor ? getNumRelational ( ) : NUM00 , numClasses , classType , multiInstance ) ; \n\t\tif ( missingLevel > NUM00 ) { \n\t\t\taddMissing ( train , missingLevel , predictorMissing , classMissing ) ; \n\t\t\t} \n\t\tsearch = ASSearch . makeCopies ( getSearch ( ) , NUM00 ) [ NUM00 ] ; \n\t\tevaluation = ASEvaluation . makeCopies ( getEvaluator ( ) , NUM00 ) [ NUM00 ] ; \n\t\ttrainCopy = new Instances ( train ) ; \n\t\t} \n\tcatch ( Exception ex ) $F220112 ( ex ) try { \n\t\tsearch ( search , evaluation , trainCopy ) ; \n\t\tcompareDatasets ( train , trainCopy ) ; \n\t\tprintln ( NUM00 ) ; \n\t\tresult [ NUM00 ] = _BOOL ; \n\t\t} \n\tcatch ( Exception ex ) { \n\t\tprintln ( NUM00 ) ; \n\t\tresult [ NUM00 ] = _BOOL ; \n\t\tif ( m_Debug ) { \n\t\t\tprintln ( NUM00 ) ; \n\t\t\tprint ( NUM00 ) ; \n\t\t\t$F5354 ( println , ex ) println ( NUM00 ) ; \n\t\t\tprintln ( $F369 ( trainCopy ) ) ; \n\t\t\tprintln ( $F369 ( train ) ) ; \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public void insert_trace ( Polyline p_polyline , int p_layer , int p_half_width , NetNosList p_net_no_arr , int p_clearance_class , ItemFixState p_fixed_state ) { \n\tBrdTracep new_trace = insert_trace_without_cleaning ( p_polyline , p_layer , p_half_width , p_net_no_arr , p_clearance_class , p_fixed_state ) ; \n\t$F8249 ( new_trace ) new_trace . normalize ( changed_area . get_area ( p_layer ) ) ; \n\t} \n"}, {"code": "void sendTransmit ( MultiplexConnectionInfo info , byte $F46499 , int off , int len ) throws IOException { \n\tsynchronized ( dataOut ) { \n\t\tif ( alive && ! info . closed ) try { \n\t\t\tdataOut . writeByte ( TRANSMIT ) ; \n\t\t\tdataOut . writeShort ( info . id ) ; \n\t\t\tdataOut . writeInt ( len ) ; \n\t\t\tdataOut . write ( buf , off , len ) ; \n\t\t\t$F1206 ( dataOut ) } \n\t\tcatch ( IOException e ) { \n\t\t\t$F134796 ( multiplexLog , Log , e ) shutDown ( ) ; \n\t\t\tthrow e ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public < T extends SQLException > T toFlatSQLException $F38789 ( type ) throws ClassCastException { \n\treturn type . cast ( toFlatSQLException ( ) ) ; \n\t} \n"}, {"code": "public void addTotalResultCountCookie ( WorkbenchRequest req , HttpServletResponse resp , int value ) { \n\taddCookie ( req , resp , NUM00 , String . valueOf ( value ) ) ; \n\t} \n"}, {"code": "$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel ) "}, {"code": "abstract void startPoll ( int fd , int events ) ; \n"}, {"code": "private Rectangle integerise ( Rectangle2D rect ) { \n\tint x0 = ( int ) Math . ceil ( rect . getMinX ( ) ) ; \n\tint y0 = ( int ) Math . ceil ( rect . getMinY ( ) ) ; \n\tint x1 = ( int ) Math . floor ( rect . getMaxX ( ) ) ; \n\tint y1 = ( int ) Math . floor ( rect . getMaxY ( ) ) ; \n\treturn new Rectangle ( x0 , y0 , ( x1 - x0 ) , ( y1 - y0 ) ) ; \n\t} \n"}, {"code": "$F1 public void mouseMoved ( MouseEvent evt ) { \n\tdelegate . mouseMoved ( evt ) ; \n\t} \n"}, {"code": "protected void validateConfig $F72 { \n\tA . notNull ( getStreamer ( ) , NUM00 ) ; \n\tA . notNull ( getIgnite ( ) , NUM00 ) ; \n\t$F18062 ( A , endpointUrl ) A . ensure ( getSingleTupleExtractor ( ) != null || getMultipleTupleExtractor ( ) != null , NUM00 ) ; \n\t$F1729 ( followParam , apiParams , SITE_USER_ID_KEY ) A . ensure ( followParam != null && followParam . matches ( NUM00 ) , NUM00 ) ; \n\t} \n"}, {"code": "public $F2469 selectZero ( long rank , $F2469 dest , final int offset , final int length ) { \n\t$F116 ( length , dest ) long s = selectZero ( rank ) ; \n\tdest [ offset ] = s ; \n\tint curr = ( int ) ( s / Long . SIZE ) ; \n\tlong window = ~ bits [ curr ] & - NUM00 < < s ; \n\twindow &= window - NUM00 ; \n\tfor ( $F119 ( i , length ) ) { \n\t\twhile ( window == NUM00 ) window = ~ bits [ ++ curr ] ; \n\t\tdest [ offset + i ] = curr * Long . SIZE + Long . numberOfTrailingZeros ( window ) ; \n\t\twindow &= window - NUM00 ; \n\t\t} \n\treturn dest ; \n\t} \n"}, {"code": "public static _Fields findByThriftId ( int fieldId ) { \n\tswitch ( fieldId ) { \n\t\t$F3366 return NUM00 _FIELD ; \n\t\t$F3366 return SET_FIELD ; \n\t\t$F3366 return LIST_FIELD ; \n\t\t$F3366 return BINARY_FIELD ; \n\t\t$F20809 } \n\t} \n"}, {"code": "public int size $F72 { \n\tsynchronized ( children ) $F1652 ( children ) } \n"}, {"code": "private String flattenComment ( String string ) { \n\tStringBuffer $F1289 ( buffer , string ) ; \n\tboolean skipAdjacentLineSeparator = _BOOL ; \n\tfor ( $F1088 ( i , string ) ) { \n\t\t$F1280 ( c , string , i ) if $F37111 ( c ) { \n\t\t\tif ( ! skipAdjacentLineSeparator ) buffer . append ( Policy . bind ( NUM00 ) ) ; \n\t\t\tskipAdjacentLineSeparator = _BOOL ; \n\t\t\t} \n\t\telse $F40016 ( buffer , c , skipAdjacentLineSeparator , _BOOL ) } \n\t$F92 ( buffer ) } \n"}, {"code": "private boolean isAccelerating ( SensorEvent event ) { \n\tfloat ax = event . values [ NUM00 ] ; \n\tfloat ay = event . values [ NUM00 ] ; \n\tfloat az = event . values [ NUM00 ] ; \n\tfinal double magnitude = $F16206 ( Math , ax , ay , az ) ; \n\treturn magnitude > ACCELERATION_THRESHOLD ; \n\t} \n"}, {"code": "$F1 public $F96 readByteArray ( String filePath , int length ) { \n\tFileChannel fileChannel = updateCache ( filePath ) ; \n\tByteBuffer byteBffer = read ( fileChannel , length ) ; \n\t$F31057 ( byteBffer ) } \n"}, {"code": "public void popDragEntry ( int index ) { \n\tif ( isIndexInBound ( index ) ) { \n\t\tmDraggedEntry = mDragEntries . get ( index ) ; \n\t\tmDraggedEntryIndex = index ; \n\t\tmDragEnteredEntryIndex = index ; \n\t\tmarkDropArea ( index ) ; \n\t\t} \n\t} \n"}, {"code": "public void test_loadAndVerify_small_quadsMode $F72 throws Exception $F208250 ( resource , p , getProperties , AbstractTripleStore , doLoadAndVerifyTest ) "}, {"code": "public void addEmail ( EmailEntity email ) $F207 ( emails , email ) "}, {"code": "private static int manhattanDistance ( final int x1 , final int y1 , final int x2 , final int y2 ) { \n\treturn Math . abs ( x1 - x2 ) + Math . abs ( y1 - y2 ) ; \n\t} \n"}, {"code": "private static final boolean compareAndSetWaitStatus ( Node node , int expect , int update ) { \n\treturn unsafe . compareAndSwapInt ( node , waitStatusOffset , expect , update ) ; \n\t} \n"}, {"code": "public void putGrammar ( SchemaGrammar grammar ) { \n\tif ( grammar . getTargetNamespace ( ) == null ) fNoNSGrammar = grammar ; \n\telse fGrammarRegistry . put ( grammar . getTargetNamespace ( ) , grammar ) ; \n\t} \n"}, {"code": "public JSONArray optJSONArray ( String key ) { \n\tObject o = opt ( key ) ; \n\treturn o instanceof JSONArray ? ( JSONArray ) o : null ; \n\t} \n"}, {"code": "private void status $F72 { \n\t$F8438 ( ps ) $F8438 ( ps ) $F8438 ( ps ) $F8438 ( ps ) writeKeysWithPrefix ( NUM00 , NUM00 ) ; \n\t} \n"}, {"code": "$F1 public void chartProgress ( ChartProgressEvent event ) $F845 "}, {"code": "void pushImportSource ( Source sourceFromURIResolver ) $F31742 ( m_importSourceStack , sourceFromURIResolver ) "}, {"code": "public static $F96 buildNalUnit $F24576 ( data , offset , length ) { \n\t$F96 nalUnit = new byte [ length + NAL_START_CODE . length ] ; \n\t$F7057 ( System , NAL_START_CODE , nalUnit ) System . arraycopy ( data , offset , nalUnit , NAL_START_CODE . length , length ) ; \n\treturn nalUnit ; \n\t} \n"}, {"code": "protected void doLogOobMessageOutbound ( Message message ) { \n\tif ( rpcLogger != null ) { \n\t\trpcLogger . logOobMessage ( clientInfo , serverInfo , message , System . currentTimeMillis ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void stop $F72 { \n\tCountDownLatch latch = stopped ; \n\tThread oldThread = thread . getAndUpdate ( null ) ; \n\tif ( oldThread != null && latch != null ) { \n\t\ttry { \n\t\t\tlatch . await ( NUM00 , TimeUnit . SECONDS ) ; \n\t\t\t} \n\t\tcatch ( InterruptedException e ) { \n\t\t\t$F84406 ( Thread ) } \n\t\t} \n\t} \n"}, {"code": "$F1 public $F96 encode ( BufferedImage bufferedImage ) throws IOException $F42436 ( outputStream , encode , bufferedImage ) "}, {"code": "private JsonParserException createHelpfulException ( char first , $F1469 expected , int failurePosition ) throws JsonParserException { \n\tStringBuilder errorToken = new StringBuilder ( first + ( expected == null ? NUM00 : $F626 ( expected , failurePosition ) ) ) ; \n\twhile ( isAsciiLetter ( peekChar ( ) ) && $F3598 ( errorToken ) ) errorToken . append ( $F15478 ( advanceChar ) ) ; \n\treturn createParseException ( null , NUM00 + errorToken + NUM00 + ( expected == null ? NUM00 : NUM00 + first + new String ( expected ) + NUM00 ) , _BOOL ) ; \n\t} \n"}, {"code": "public void testConstructorBytesPositive3 $F72 { \n\tbyte $F3009 = $F294877 ; \n\tbyte $F3018 = $F294877 ; \n\t$F9144 ( aNumber , aBytes ) $F3030 ( rBytes ) $F3031 ( resBytes , aNumber ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , aNumber ) } \n"}, {"code": "public static void i $F3867 ( tag , s , args ) { \n\tif ( LOG . INFO >= LOGLEVEL ) Log . i ( tag , String . format ( s , args ) ) ; \n\t} \n"}, {"code": "public void removeLifecycleListener ( LifecycleListener lifecycleListener ) $F106 ( lifecycleListeners , lifecycleListener ) "}, {"code": "private synchronized void initRegistry ( boolean force ) throws MatlabConnectionException { \n\tif ( _registry == null || force ) { \n\t\ttry { \n\t\t\t_registry = LocalHostRMIHelper . createRegistry ( _options . getPort ( ) ) ; \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\ttry { \n\t\t\t\t_registry = LocalHostRMIHelper . getRegistry ( _options . getPort ( ) ) ; \n\t\t\t\t} \n\t\t\tcatch ( Exception ex ) { \n\t\t\t\tthrow new MatlabConnectionException ( NUM00 , ex ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public boolean phaseHasTurns ( IGame . Phase thisPhase ) { \n\tswitch ( thisPhase ) { \n\t\tcase PHASE_SET_ARTYAUTOHITHEXES : case PHASE_DEPLOY_MINEFIELDS : case PHASE_DEPLOYMENT : case PHASE_MOVEMENT : case PHASE_FIRING : case PHASE_PHYSICAL : case PHASE_TARGETING : case PHASE_OFFBOARD : return _BOOL ; \n\t\t$F1267 return _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public int read $F72 throws IOException { \n\t$F7468 ( ch1 , is ) $F7468 ( ch2 , is ) $F125151 ( ch2 ) $F61876 ( ch2 , ch1 ) } \n"}, {"code": "public static boolean isUrl ( String resourceLocation ) { \n\t$F1933 ( resourceLocation , _BOOL ) $F72106 ( resourceLocation , CLASSPATH_URL_PREFIX , _BOOL ) try { \n\t\tnew URL ( resourceLocation ) ; \n\t\treturn _BOOL ; \n\t\t} \n\tcatch ( MalformedURLException ex ) { \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public static String encodeURL ( String uri ) { \n\tCharBuffer cb = CharBuffer . allocate ( ) ; \n\tfor ( $F1088 ( i , uri ) ) { \n\t\t$F1280 ( ch , uri , i ) switch ( ch ) { \n\t\t\t$F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F84 ( cb ) $F7002 ( cb , encodeHex , ch ) $F6407 ( cb , encodeHex , ch ) $F597 $F38142 ( cb , ch ) } \n\t\t} \n\treturn cb . close ( ) ; \n\t} \n"}, {"code": "public void close $F72 throws IOException { \n\t$F7254 ( closed ) $F7254 ( queuedForCleanup ) try { \n\t\tif ( expected > count ) { \n\t\t\tlong nskip = expected - count ; \n\t\t\tif ( nskip <= available ( ) ) { \n\t\t\t\tdo $F845 while ( ( nskip = ( expected - count ) ) > NUM00 && skip ( $F102434 ( Math , nskip , available ) ) > NUM00 ) ; \n\t\t\t\t} \n\t\t\telse if ( expected <= KeepAliveStreamCleaner . MAX_DATA_REMAINING && ! hurried ) { \n\t\t\t\tqueueForCleanup ( new KeepAliveCleanerEntry ( this , hc ) ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\thc . closeServer ( ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( ! closed && ! hurried && ! queuedForCleanup ) { \n\t\t\thc . finished ( ) ; \n\t\t\t} \n\t\t} \n\tfinally { \n\t\tif ( pi != null ) pi . finishTracking ( ) ; \n\t\tif ( ! queuedForCleanup ) { \n\t\t\tin = null ; \n\t\t\thc = null ; \n\t\t\tclosed = _BOOL ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public boolean isPublic $F72 { \n\treturn $F57120 ( Modifier , _method ) ; \n\t} \n"}, {"code": "private $F131 initializeCallerHierarchyRoots ( Map < String , Map < String , Set $F115413 > > callerMap ) { \n\tList < TreeElement < SourceMethodNode , SourceMethodNode > > roots = new ArrayList < TreeElement < SourceMethodNode , SourceMethodNode > > $F72 ; \n\tCallerHierarchy callerHierarchy = ( CallerHierarchy ) fInput ; \n\tSourceMethodNode rootNode = callerHierarchy . getRoot ( ) ; \n\tSet < SourceMethodNode > processedNodes = new HashSet < SourceMethodNode > $F72 ; \n\tTreeElement < SourceMethodNode , SourceMethodNode > root = initializeCallerHierarchy ( rootNode , processedNodes , callerMap ) ; \n\treturn $F8844 ( root ) ; \n\t} \n"}, {"code": "private $F14699 reduceWithDouglasPeuker ( $F14699 entries , double epsilon ) { \n\tif ( epsilon <= NUM00 || $F6213 ( entries ) ) { \n\t\treturn entries ; \n\t\t} \n\tkeep [ NUM00 ] = _BOOL ; \n\tkeep [ $F2281 ( entries ) ] = _BOOL ; \n\talgorithmDouglasPeucker ( entries , epsilon , NUM00 , $F2281 ( entries ) ) ; \n\t$F86990 ( reducedEntries ) for ( $F2277 ( i , entries ) ) { \n\t\tif ( keep [ i ] ) { \n\t\t\t$F14726 ( curEntry , entries , i ) reducedEntries . add ( new Entry ( curEntry . getVal ( ) , curEntry . getXIndex ( ) ) ) ; \n\t\t\t} \n\t\t} \n\treturn reducedEntries ; \n\t} \n"}, {"code": "public static $F1986 computeLogAmplitudeSpectrum $F10212 ( signal ) { \n\t$F2291 ( spectrum , computeAmplitudeSpectrum , signal ) for ( $F1139 ( i , spectrum ) ) { \n\t\tspectrum [ i ] = Math . log ( spectrum [ i ] ) ; \n\t\t} \n\treturn spectrum ; \n\t} \n"}, {"code": "private Segment createMemorySegment ( SegmentDescriptor descriptor ) { \n\tFile segmentFile = SegmentFile . createSegmentFile ( name , storage . directory ( ) , descriptor . id ( ) , descriptor . version ( ) ) ; \n\tBuffer buffer = HeapBuffer . allocate ( Math . min ( DEFAULT_BUFFER_SIZE , descriptor . maxSegmentSize ( ) ) , Integer . MAX_VALUE ) ; \n\tdescriptor . copyTo ( buffer ) ; \n\tSegment segment = new Segment ( new SegmentFile ( segmentFile ) , buffer . slice ( ) , descriptor , createIndex ( descriptor ) , new OffsetPredicate $F72 , serializer . clone ( ) , this ) ; \n\t$F7028 ( LOGGER , segment ) return segment ; \n\t} \n"}, {"code": "public static void init ( final AsyncContext context ) { \n\tfinal SecurityContext security = ( SecurityContext ) context . getAttribute ( AsyncContext . SECURITY_CTX ) ; \n\tfinal boolean forceSetSecurity = forceSetSecurityContext ( context ) ; \n\tif ( forceSetSecurity ) { \n\t\tSecurityContextHolder . setContext ( security ) ; \n\t\t} \n\tctx . set ( context ) ; \n\t} \n"}, {"code": "private void cancelPreviousWebRtcNotifications $F72 { \n\t$F2689 notificationIds = mSharedPreferences . getStringSet ( WEBRTC_NOTIFICATION_IDS , null ) ; \n\t$F8249 ( notificationIds ) $F50737 ( iterator , notificationIds ) while $F2921 ( iterator ) { \n\t\tmNotificationManager . cancel ( NOTIFICATION_NAMESPACE , Integer . parseInt ( iterator . next ( ) ) ) ; \n\t\t} \n\t$F37526 ( sharedPreferenceEditor , mSharedPreferences ) sharedPreferenceEditor . remove ( MediaCaptureNotificationService . WEBRTC_NOTIFICATION_IDS ) ; \n\t$F37527 ( sharedPreferenceEditor ) } \n"}, {"code": "public static final String readString ( $F96 bytes , int offset , int length , String charset ) throws IOException { \n\treturn readString ( bytes , NUM00 , bytes . length , Charset . forName ( charset ) ) ; \n\t} \n"}, {"code": "private TopologyUpdaterThread $F72 { \n\tsuper ( id + NUM00 ) ; \n\t} \n"}, {"code": "private void typeParametersRest ( List < ? extends TypeParameterTree > typeParameters , Indent plusIndent ) { \n\tbuilder . open ( plusIndent ) ; \n\tbuilder . breakOp ( ) ; \n\tbuilder . open ( ZERO ) ; \n\tboolean first = _BOOL ; \n\tfor ( TypeParameterTree typeParameter : typeParameters ) { \n\t\tif ( ! first ) { \n\t\t\ttoken ( NUM00 ) ; \n\t\t\tbuilder . breakOp ( NUM00 ) ; \n\t\t\t} \n\t\tscan ( typeParameter , null ) ; \n\t\tfirst = _BOOL ; \n\t\t} \n\ttoken ( NUM00 ) ; \n\t$F59 ( builder ) $F59 ( builder ) } \n"}, {"code": "public void writeString ( String str ) throws IOException { \n\tif ( str == null ) writeInt ( NUM00 ) ; \n\telse { \n\t\tif ( useCompression && str . length ( ) >= Compressor . MIN_SIZE_FOR_DEFLATION ) { \n\t\t\t$F96 bytes = compressor . deflateString2ByteArray ( str ) ; \n\t\t\twriteInt ( - bytes . length ) ; \n\t\t\t$F17918 ( outs , bytes ) position += bytes . length ; \n\t\t\t} \n\t\telse { \n\t\t\t$F151317 ( bytes , str ) writeInt ( bytes . length ) ; \n\t\t\t$F17918 ( outs , bytes ) position += bytes . length ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void dequeueSound ( Uri uri ) { \n\tmAudioQueue . remove ( new AudioQueueItem ( uri , null ) ) ; \n\t} \n"}, {"code": "public void removeBookmark ( final CBookmark bookmark ) { \n\t$F1832 ( Preconditions , bookmark ) Preconditions . checkArgument ( m_bookmarks . remove ( bookmark ) , NUM00 ) ; \n\tfor ( final IBookmarkManagerListener listener : m_listeners ) { \n\t\ttry { \n\t\t\tlistener . removedBookmark ( this , bookmark ) ; \n\t\t\t} \n\t\t$F39654 ( CUtilityFunctions , exception ) } \n\t} \n"}, {"code": "public static KeyStore loadKeyStore ( String type , File file , $F1469 password ) throws Exception { \n\t$F156 ( keyStore , KeyStore , type ) try $F31304 ( fis , file ) { \n\t\tkeyStore . load ( fis , password ) ; \n\t\t} \n\treturn keyStore ; \n\t} \n"}, {"code": "public void loop ( double ellapsedMillis ) { \n\tfor ( SpringSystemListener listener : mListeners ) { \n\t\tlistener . onBeforeIntegrate ( this ) ; \n\t\t} \n\tadvance ( ellapsedMillis ) ; \n\t$F159338 ( mActiveSprings , mIdle , _BOOL ) for ( SpringSystemListener listener : mListeners ) { \n\t\tlistener . onAfterIntegrate ( this ) ; \n\t\t} \n\tif ( mIdle ) $F5196 ( mSpringLooper ) } \n"}, {"code": "private void updateRecordingTrack ( Track track , long lastTrackPointId , boolean increaseNumberOfPoints ) { \n\tif ( lastTrackPointId >= NUM00 ) { \n\t\tif ( track . getStartId ( ) < NUM00 ) { \n\t\t\ttrack . setStartId ( lastTrackPointId ) ; \n\t\t\t} \n\t\ttrack . setStopId ( lastTrackPointId ) ; \n\t\t} \n\tif ( increaseNumberOfPoints ) { \n\t\ttrack . setNumberOfPoints ( track . getNumberOfPoints ( ) + NUM00 ) ; \n\t\t} \n\ttrackTripStatisticsUpdater . updateTime ( System . currentTimeMillis ( ) ) ; \n\ttrack . setTripStatistics ( trackTripStatisticsUpdater . getTripStatistics ( ) ) ; \n\tmyTracksProviderUtils . updateTrack ( track ) ; \n\t} \n"}, {"code": "$F1 public void requestStartupUpdates ( String from , $F96 tableKey , int podIndex , long deltaTime , Result $F19437 cont ) { \n\tif $F14148 ( log , Level ) { \n\t\tlog . finest ( NUM00 + from + NUM00 + podIndex + NUM00 + deltaTime ) ; \n\t\t} \n\tlong accessTime = CurrentTime . currentTime ( ) + deltaTime ; \n\tTablePod tablePod = _clientKraken . getTable ( tableKey ) ; \n\tif ( tablePod == null ) { \n\t\tif $F14148 ( log , Level ) { \n\t\t\tlog . finest ( L . l ( NUM00 , Hex . toShortHex ( tableKey ) , BartenderSystem . getCurrentSelfServer ( ) ) ) ; \n\t\t\t} \n\t\tcont . ok ( _BOOL ) ; \n\t\t$F665 } \n\ttablePod . getUpdatesFromLocal ( podIndex , accessTime , cont ) ; \n\t} \n"}, {"code": "private void refreshMuteVideoButton $F72 { \n\tif ( ( null != mCall ) && mCall . isVideo ( ) ) { \n\t\t$F29549 ( mMuteLocalCameraView , View ) boolean isMuted = mCall . isVideoRecordingMuted ( ) ; \n\t\t$F12258 ( Log , LOG_TAG , isMuted ) int iconId = isMuted ? R . drawable . ic_material_videocam_off_pink_red : R . drawable . ic_material_videocam_off_grey ; \n\t\tmMuteLocalCameraView . setImageResource ( iconId ) ; \n\t\t} \n\telse { \n\t\t$F13527 ( Log , LOG_TAG ) $F185816 ( mMuteLocalCameraView , View ) } \n\t} \n"}, {"code": "public boolean isAutoUpdateTrl ( String TableName ) { \n\tif ( super . isMultiLingualDocument ( ) ) return _BOOL ; \n\t$F397 ( TableName , _BOOL ) if ( TableName . startsWith ( NUM00 ) && getAD_Client_ID ( ) == NUM00 ) return _BOOL ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "private void createPreferenceControls ( Composite parent , Set < PreferenceId > preferenceSet , InputDefinition inputDefinition ) { \n\tfor ( PreferenceId preferenceIdEnum : preferenceSet ) { \n\t\tIPreferenceControl preferenceControl = PreferenceControlFactory . createPreferenceControls ( parent , toolkit , preferenceIdEnum , this , inputDefinition ) ; \n\t\tif ( null != preferenceControl ) $F207 ( preferenceControlList , preferenceControl ) } \n\t} \n"}, {"code": "@ RequestMapping ( $F3144 , method = POST , produces = APPLICATION_JSON_VALUE ) public ResponseEntity < PageResponse < ProjectDTO > > findAll ( $F151143 PageRequestByExample < ProjectDTO > prbe ) throws URISyntaxException { \n\tPageResponse < ProjectDTO > pageResponse = projectDTOService . findAll ( prbe ) ; \n\treturn new $F151149 ( pageResponse , new HttpHeaders $F72 , HttpStatus . OK ) ; \n\t} \n"}, {"code": "public void testSHAProvider $F72 { \n\tMessageDigest md = null ; \n\ttry $F14527 ( md , MessageDigest ) catch ( NoSuchAlgorithmException e ) $F1328 ( fail , e ) $F140763 ( bytes ) try { \n\t\tmd . update ( bytes , - NUM00 , NUM00 ) ; \n\t\tfail ( NUM00 ) ; \n\t\t} \n\t$F323912 try { \n\t\tmd . update ( bytes , NUM00 , - NUM00 ) ; \n\t\tfail ( NUM00 ) ; \n\t\t} \n\t$F323912 try $F14527 ( md , MessageDigest ) catch ( NoSuchAlgorithmException e ) $F1328 ( fail , e ) try { \n\t\tmd . digest ( bytes , NUM00 , - NUM00 ) ; \n\t\tfail ( NUM00 ) ; \n\t\t} \n\tcatch ( DigestException e ) $F845 try { \n\t\tmd . digest ( bytes , - NUM00 , NUM00 ) ; \n\t\tfail ( NUM00 ) ; \n\t\t} \n\tcatch ( DigestException e ) $F845 try { \n\t\t$F6161 ( md , MessageDigest ) fail ( NUM00 ) ; \n\t\t} \n\tcatch ( NoSuchAlgorithmException e ) $F845 } \n"}, {"code": "static private double fac2 ( int j ) { \n\tlong i = j ; \n\tif ( j < NUM00 ) i = Math . abs ( j ) ; \n\tdouble d = NUM00 ; \n\twhile ( i > NUM00 ) d *= i -- ; \n\tif ( j < NUM00 ) return - d ; \n\telse return d ; \n\t} \n"}, {"code": "private static boolean isInputExhausted ( StreamTokenizer input ) throws ParseError { \n\ttry { \n\t\tif ( input . nextToken ( ) == StreamTokenizer . TT_EOF ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\tinput . pushBack ( ) ; \n\t\treturn _BOOL ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\tthrow new ParseError $F1783 ( e ) ; \n\t\t} \n\t} \n"}, {"code": "$F40513 ( m ) "}, {"code": "$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel ) "}, {"code": "public static void writeUnsafe ( PacketOutputStream out , InputStream is , long length , boolean noBackslashEscapes ) throws IOException { \n\tout . writeUnsafe ( QUOTE ) ; \n\t$F12496 ( buffer ) long bytesLeft = length ; \n\tint len ; \n\tfor ( $F589 ) { \n\t\tint bytesToRead = ( int ) $F56147 ( Math , bytesLeft , buffer ) ; \n\t\t$F7256 ( bytesToRead ) $F61539 ( len , is , buffer , bytesToRead ) $F65649 ( len ) writeBytesEscapedUnsafe ( out , buffer , len , noBackslashEscapes ) ; \n\t\tbytesLeft -= len ; \n\t\t} \n\tout . writeUnsafe ( QUOTE ) ; \n\t} \n"}, {"code": "public SQLQuery ( $F20474 type , String sqlExpression , QueryResultType queryResultType ) { \n\tthis ( sqlExpression , type . getName ( ) , null , queryResultType , null ) ; \n\t} \n"}, {"code": "public Builder retry ( long duration , TimeUnit timeUnit ) { \n\tthis . retry = timeUnit . toSeconds ( duration ) ; \n\treturn this ; \n\t} \n"}, {"code": "private $F228084 tryTake ( long elapsedWaiting ) { \n\t$F228084 result = null ; \n\tif $F5973 ( retryQueue ) { \n\t\t$F8716 ( result , retryQueue ) } \n\telse { \n\t\t$F8716 ( result , neverPubQueue ) } \n\tif ( result != null ) $F8587 ( onTakeSuccess , result , elapsedWaiting ) else if ( elapsedWaiting > NUM00 ) $F4915 ( onTakeTimeout , elapsedWaiting ) else $F1274 } \n"}, {"code": "public void testConstructorBytesNegative1 $F72 { \n\tbyte $F3009 = { \n\t\t- NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } \n\t; \n\tbyte $F3018 = { \n\t\t- NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } \n\t; \n\t$F9144 ( aNumber , aBytes ) $F3030 ( rBytes ) $F3031 ( resBytes , aNumber ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , aNumber ) } \n"}, {"code": "private $F4203 $F5675 toSortedList ( $F10809 array , $F96239 comparator ) { \n\t$F98037 ( list ) Collections . addAll ( list , array ) ; \n\tCollections . sort ( list , comparator ) ; \n\treturn list ; \n\t} \n"}, {"code": "private GeoMark reverse_geocode ( final String text ) { \n\tfor ( $F55140 ( t , text ) ) { \n\t\tif $F3599 ( t ) $F598 $F6542 ( c , t ) if $F11845 ( c ) $F598 try { \n\t\t\t$F158402 ( lat , Double , c ) $F158402 ( lon , Double , c ) GeoMark mark = cityNear ( lat , lon ) ; \n\t\t\t$F45557 ( mark ) return mark ; \n\t\t\t} \n\t\tcatch ( NumberFormatException e ) $F1448 } \n\t$F1274 } \n"}, {"code": "public ArrayList < PlaToupleInt > entrance_points ( Polyline p_polyline ) { \n\tArrayList < PlaToupleInt > result = new ArrayList < PlaToupleInt > ( NUM00 * p_polyline . plaline_len ( ) ) ; \n\tint prev_intersection_line_no = - NUM00 ; \n\tint prev_intersection_edge_no = - NUM00 ; \n\tfor ( int line_no = NUM00 ; \n\tline_no < p_polyline . plaline_len ( - NUM00 ) ; \n\t++ line_no ) { \n\t\tPlaSegmentInt curr_line_seg = p_polyline . segment_get ( line_no ) ; \n\t\t$F2027 curr_intersections = curr_line_seg . border_intersections ( this ) ; \n\t\tfor ( $F9808 ( index , curr_intersections ) ) { \n\t\t\tint edge_no = curr_intersections [ index ] ; \n\t\t\tif ( line_no != prev_intersection_line_no || edge_no != prev_intersection_edge_no ) { \n\t\t\t\tresult . add ( new PlaToupleInt ( line_no , edge_no ) ) ; \n\t\t\t\tprev_intersection_line_no = line_no ; \n\t\t\t\tprev_intersection_edge_no = edge_no ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "private void emitClear ( String fieldName , StringBuilder builder ) { \n\t$F84 ( builder ) $F6407 ( builder , getClearName , fieldName ) $F84 ( builder ) $F6407 ( builder , getEnsureName , fieldName ) $F84 ( builder ) builder . append ( fieldName ) ; \n\t$F84 ( builder ) $F84 ( builder ) } \n"}, {"code": "public static $F96 serializeAsByteArray ( Object b ) throws IOException { \n\t$F1538 ( bos ) $F7054 ( out , bos ) try $F12610 ( out , b ) $F3229 ( out ) $F11316 ( bos ) } \n"}, {"code": "public static void putIntLE ( long addr , int val ) { \n\tif ( UNALIGNED ) UNSAFE . putInt ( addr , Integer . reverseBytes ( val ) ) ; \n\telse putIntByByte ( addr , val , _BOOL ) ; \n\t} \n"}, {"code": "public FloatingActionButton createSubFAB ( char icon , String text ) { \n\tFloatingActionButton sub = new FloatingActionButton ( icon , text , NUM00 ) ; \n\tif ( subMenu == null ) { \n\t\tsubMenu = new ArrayList < FloatingActionButton > $F72 ; \n\t\t} \n\tsubMenu . add ( sub ) ; \n\treturn sub ; \n\t} \n"}, {"code": "public String readValue ( InputNode from ) throws Exception { \n\tif ( ! stack . isRelevant ( from ) ) $F1337 $F115 ( length , text ) if ( length <= NUM00 ) { \n\t\tEventNode event = reader . peek ( ) ; \n\t\tif ( event . isEnd ( ) ) { \n\t\t\tif ( stack . top ( ) == from ) $F1337 else $F89427 ( stack ) $F45366 ( event , reader ) } \n\t\t} \n\treturn readText ( from ) ; \n\t} \n"}, {"code": "$F5803 ( drawable , getDrawable , matrix , prevMatrix , drawableWidth , drawableHeight , scaleX , viewWidth , scaleY , viewHeight , mScaleType , CENTER , CENTER_CROP , Math , CENTER_INSIDE , FIT_CENTER , FIT_XY , redundantXSpace , redundantYSpace , matchViewWidth , matchViewHeight , isZoomed , imageRenderedAtLeastOnce , normalizedScale , prevMatchViewWidth , prevMatchViewHeight , savePreviousImageValues , m , Matrix , transX , transY , prevActualWidth , actualWidth , getImageWidth , translateMatrixAfterRotate , prevViewWidth , prevActualHeight , actualHeight , getImageHeight , prevViewHeight , fixTrans , setImageMatrix ) "}, {"code": "private void dispatchOnThirdPartyRegistered $F72 { \n\tsynchronized ( this ) { \n\t\tfor ( ThirdPartyRegistrationListener listener : mThirdPartyRegistrationListeners ) { \n\t\t\ttry { \n\t\t\t\tlistener . onThirdPartyRegistered ( ) ; \n\t\t\t\t} \n\t\t\tcatch ( Exception e ) { \n\t\t\t\tLog . e ( LOG_TAG , $F9309 ( e ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F725 ( mThirdPartyRegistrationListeners ) } \n\t} \n"}, {"code": "void updateForDecoderTypeID ( List < DecoderFile > pList ) { \n\tdecoderBox . setModel ( DecoderIndexFile . jComboBoxModelFromList ( pList ) ) ; \n\tdecoderBox . insertItemAt ( NUM00 , NUM00 ) ; \n\t$F53383 ( decoderBox ) } \n"}, {"code": "$F1 public void actionPerformed ( ActionEvent event ) { \n\tswitch ( event . getActionCommand ( ) ) { \n\t\tcase NEW_ALIAS : addAlias ( new Alias $F580 ) ; \n\t\t$F597 case COPY_ALIAS : for ( Alias alias : getSelectedAliases ( ) ) { \n\t\t\taddAlias ( AliasFactory . copyOf ( alias ) ) ; \n\t\t\t} \n\t\t$F597 case DELETE_ALIAS : List < Alias > toDelete = getSelectedAliases ( ) ; \n\t\tif $F1032 ( toDelete ) { \n\t\t\tString title = $F10470 ( toDelete ) ? NUM00 : NUM00 ; \n\t\t\tString prompt = $F10470 ( toDelete ) ? NUM00 : $F10533 ( toDelete ) ; \n\t\t\tint choice = JOptionPane . showConfirmDialog ( AliasController . this , prompt , title , JOptionPane . YES_NO_OPTION , JOptionPane . WARNING_MESSAGE ) ; \n\t\t\tif ( choice == JOptionPane . YES_OPTION ) { \n\t\t\t\tfor ( Alias alias : toDelete ) { \n\t\t\t\t\tmAliasModel . removeAlias ( alias ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t$F597 $F2448 } \n\t} \n"}, {"code": "public boolean directionKeyIsPressed $F72 { \n\treturn pressedStateKeys . contains ( KeyEvent . VK_UP ) || pressedStateKeys . contains ( KeyEvent . VK_DOWN ) || pressedStateKeys . contains ( KeyEvent . VK_LEFT ) || pressedStateKeys . contains ( KeyEvent . VK_RIGHT ) || pressedStateKeys . contains ( KeyEvent . VK_KP_LEFT ) || pressedStateKeys . contains ( KeyEvent . VK_KP_RIGHT ) || pressedStateKeys . contains ( KeyEvent . VK_KP_UP ) || pressedStateKeys . contains ( KeyEvent . VK_KP_DOWN ) ; \n\t} \n"}, {"code": "private void calculateCalibration ( long difference , float currentMeasure , byte currentIndex ) { \n\tif ( difference >= MedtronicConstants . TIME_15_MIN_IN_MS && difference < MedtronicConstants . TIME_20_MIN_IN_MS ) { \n\t\tif ( isSensorMeasureInRange ( currentIndex , expectedSensorSortNumberForCalibration ) ) { \n\t\t\tisCalibrating = _BOOL ; \n\t\t\tcalibrationStatus = MedtronicConstants . CALIBRATED ; \n\t\t\tcalibrationIsigValue = currentMeasure ; \n\t\t\t$F37526 ( editor , settings ) calibrationFactor = lastGlucometerValue / calibrationIsigValue ; \n\t\t\t$F36382 ( editor ) $F36382 ( editor ) editor . putFloat ( NUM00 , ( float ) calibrationFactor ) ; \n\t\t\teditor . putInt ( NUM00 , calibrationStatus ) ; \n\t\t\t$F17621 ( editor ) } \n\t\telse { \n\t\t\tif ( calibrationStatus != MedtronicConstants . WITHOUT_ANY_CALIBRATION && currentIndex != expectedSensorSortNumber ) { \n\t\t\t\tcalibrationStatus = MedtronicConstants . LAST_CALIBRATION_FAILED_USING_PREVIOUS ; \n\t\t\t\tisCalibrating = _BOOL ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tcalibrationStatus = MedtronicConstants . WITHOUT_ANY_CALIBRATION ; \n\t\t\t\t} \n\t\t\t$F37526 ( editor , settings ) $F36382 ( editor ) $F36382 ( editor ) $F17621 ( editor ) } \n\t\t} \n\telse if ( difference >= MedtronicConstants . TIME_20_MIN_IN_MS ) { \n\t\tif ( isSensorMeasureInRange ( currentIndex , expectedSensorSortNumberForCalibration ) ) { \n\t\t\tcalibrationStatus = MedtronicConstants . CALIBRATED_IN_15MIN ; \n\t\t\tcalibrationIsigValue = currentMeasure ; \n\t\t\t$F37526 ( editor , settings ) calibrationFactor = lastGlucometerValue / calibrationIsigValue ; \n\t\t\t$F36382 ( editor ) $F36382 ( editor ) editor . putFloat ( NUM00 , ( float ) calibrationFactor ) ; \n\t\t\teditor . putInt ( NUM00 , calibrationStatus ) ; \n\t\t\t$F17621 ( editor ) } \n\t\telse { \n\t\t\tif ( calibrationStatus != MedtronicConstants . WITHOUT_ANY_CALIBRATION ) calibrationStatus = MedtronicConstants . LAST_CALIBRATION_FAILED_USING_PREVIOUS ; \n\t\t\telse { \n\t\t\t\tcalibrationStatus = MedtronicConstants . WITHOUT_ANY_CALIBRATION ; \n\t\t\t\t} \n\t\t\t$F37526 ( editor , settings ) $F36382 ( editor ) $F36382 ( editor ) $F17621 ( editor ) } \n\t\tisCalibrating = _BOOL ; \n\t\t} \n\telse { \n\t\tif ( isCalibrating ) { \n\t\t\tif ( difference < MedtronicConstants . TIME_5_MIN_IN_MS ) { \n\t\t\t\tcalibrationStatus = MedtronicConstants . CALIBRATING ; \n\t\t\t\t} \n\t\t\telse if ( difference >= MedtronicConstants . TIME_5_MIN_IN_MS && difference <= MedtronicConstants . TIME_15_MIN_IN_MS ) calibrationStatus = MedtronicConstants . CALIBRATING2 ; \n\t\t\telse calibrationStatus = MedtronicConstants . CALIBRATING ; \n\t\t\t} \n\t\telse { \n\t\t\tif ( calibrationStatus != MedtronicConstants . WITHOUT_ANY_CALIBRATION ) calibrationStatus = MedtronicConstants . LAST_CALIBRATION_FAILED_USING_PREVIOUS ; \n\t\t\telse { \n\t\t\t\tcalibrationStatus = MedtronicConstants . WITHOUT_ANY_CALIBRATION ; \n\t\t\t\t} \n\t\t\t$F37526 ( editor , settings ) $F36382 ( editor ) $F36382 ( editor ) editor . putInt ( NUM00 , calibrationStatus ) ; \n\t\t\t$F17621 ( editor ) } \n\t\t} \n\t} \n"}, {"code": "public void addPosition ( int offset , int length , String ... ids ) { \n\tTextAttribute highlighting = ids . length == NUM00 ? attributeProvider . getAttribute ( ids [ NUM00 ] ) : attributeProvider . getMergedAttributes ( ids ) ; \n\tboolean isExisting = _BOOL ; \n\tfor ( $F62958 ( i , n , removedPositions ) ) { \n\t\tAttributedPosition position = removedPositions . get ( i ) ; \n\t\t$F45557 ( position ) if ( position . isEqual ( offset , length , highlighting ) ) { \n\t\t\tisExisting = _BOOL ; \n\t\t\t$F270740 ( removedPositions , i ) removedPositionCount -- ; \n\t\t\t$F597 } \n\t\t} \n\tif ( ! isExisting ) { \n\t\tAttributedPosition position = presenter . createHighlightedPosition ( offset , length , highlighting ) ; \n\t\taddedPositions . add ( position ) ; \n\t\t} \n\t} \n"}, {"code": "static void exportMaskUpdate ( ExportMask exportMask , $F186003 ( volumeMap ) , $F15661 initiators , $F28584 targets ) { \n\tif ( volumeMap != null ) { \n\t\tfor ( $F13394 ( volume , volumeMap ) ) { \n\t\t\texportMask . addVolume ( volume , volumeMap . get ( volume ) ) ; \n\t\t\t} \n\t\t} \n\tif ( initiators != null ) { \n\t\tfor ( Initiator initiator : initiators ) { \n\t\t\texportMask . addInitiator ( initiator ) ; \n\t\t\t} \n\t\t} \n\tif ( targets != null ) { \n\t\tfor ( URI target : targets ) { \n\t\t\texportMask . addTarget ( target ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void internalAddHead ( final MessageReference ref ) { \n\tqueueMemorySize . addAndGet ( ref . getMessageMemoryEstimate ( ) ) ; \n\trefAdded ( ref ) ; \n\tint priority = getPriority ( ref ) ; \n\tmessageReferences . addHead ( ref , priority ) ; \n\t} \n"}, {"code": "private boolean createNew ( MProduct product , MAcctSchema as ) { \n\tMCost dimension = MCost . getOrCreate ( product , NUM00 , as , NUM00 , NUM00 , as . getM_CostType_ID ( ) , m_ce . getM_CostElement_ID ( ) ) ; \n\tif ( dimension . is_new ( ) ) return dimension . save ( ) ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "$F1 protected void step $F72 { \n\twhile $F2921 ( iter ) { \n\t\treg = ( SvcReg ) iter . next ( ) ; \n\t\tif ( reg . leaseExpiration > now ) $F665 } \n\treg = null ; \n\t} \n"}, {"code": "public $F14937 packages $F72 { \n\treturn m_Cache . keys ( ) ; \n\t} \n"}, {"code": "protected int size $F72 $F55827 ( document ) "}, {"code": "public TPS currentRow $F72 $F15127 ( currentRow ) "}, {"code": "public final void deleteAllEntries $F72 { \n\tif ( numEntries > NUM00 ) { \n\t\t$F17838 ( Arrays , entries ) this . numEntries = NUM00 ; \n\t\t} \n\t} \n"}, {"code": "public $F20526 query ( final String indexName , final String q , final Operator operator , final int offset , final int count ) { \n\tassert count > NUM00 ; \n\tSearchRequestBuilder request = elasticsearchClient . prepareSearch ( indexName ) . setQuery ( QueryBuilders . multiMatchQuery ( q , NUM00 ) . operator ( operator ) . zeroTermsQuery ( ZeroTermsQuery . ALL ) ) . setFrom ( offset ) . setSize ( count ) ; \n\tSearchResponse response = request . execute ( ) . actionGet ( ) ; \n\tSearchHit [ ] hits = response . getHits ( ) . getHits ( ) ; \n\t$F390500 result = new $F390500 $F72 ; \n\tfor ( SearchHit hit : hits ) { \n\t\t$F529 map = hit . getSource ( ) ; \n\t\tresult . add ( map ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public $F44293 plugins $F72 { \n\t$F44293 $F32033 ( r ) ; \n\tfor ( NamePair p : items . keySet ( ) ) { \n\t\tr . add ( p . pluginName ) ; \n\t\t} \n\treturn Collections . unmodifiableSortedSet ( r ) ; \n\t} \n"}, {"code": "public static void error ( int WindowNo , Container c , String AD_Message ) $F214324 ( error , WindowNo , c , AD_Message ) "}, {"code": "public ReilFunction translate ( final ITranslationEnvironment environment , final IBlockContainer < InstructionType > function ) throws InternalTranslationException { \n\treturn translate ( environment , function , new ArrayList < ITranslationExtension < InstructionType > > $F72 ) ; \n\t} \n"}, {"code": "public Name parse ( String name ) throws NamingException { \n\t$F11968 comps = insStringToStringifiedComps ( name ) ; \n\treturn new CNCompoundName ( comps . elements ( ) ) ; \n\t} \n"}, {"code": "public CSVDataSourceFactory $F72 { \n\tsuper ( NUM00 , CSV_MIME_TYPES , CSV_FILE_ENDINGS , CSVFormatSpecificationWizardStep . CSV_FORMAT_SPECIFICATION_STEP_ID ) ; \n\t} \n"}, {"code": "private void sendAck ( String index , String message , GuacamoleStatus status ) { \n\tif ( status != GuacamoleStatus . SUCCESS ) closeInterceptedStream ( index ) ; \n\tsendInstruction ( new GuacamoleInstruction ( NUM00 , index , message , Integer . toString ( status . getGuacamoleStatusCode ( ) ) ) ) ; \n\t} \n"}, {"code": "public static boolean isWindowsPlatform $F72 { \n\t$F27462 ( os , System ) return $F99996 ( os , WIN_ID ) ; \n\t} \n"}, {"code": "static public int countRangesThatCollideZone ( List < Bounds > ranges , List < Bounds > zoneRanges ) { \n\tint overallEOAA = NUM00 ; \n\tCollections . sort ( zoneRanges ) ; \n\tfor ( Bounds extractedBounds : ranges ) { \n\t\tfor ( Bounds expectedBounds : zoneRanges ) { \n\t\t\tif ( expectedBounds . start >= extractedBounds . end ) $F5153 if ( extractedBounds . overlaps ( expectedBounds ) ) $F56675 ( overallEOAA ) } \n\t\t} \n\treturn overallEOAA ; \n\t} \n"}, {"code": "public static boolean timeStampChanged ( String location ) { \n\tsynchronized ( installLock ) { \n\t\t$F16222 ( fgHasChanged , location , _BOOL ) $F1705 ( file , location ) if $F3428 ( file ) { \n\t\t\t$F113304 ( fgInstallTimeMap , readInstallInfo ) $F5856 ( stamp , fgInstallTimeMap , location ) $F105872 ( fstamp , file ) if ( stamp != null ) { \n\t\t\t\tif ( stamp . longValue ( ) == fstamp ) { \n\t\t\t\t\treturn _BOOL ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tstamp = new Long ( fstamp ) ; \n\t\t\tfgInstallTimeMap . put ( location , stamp ) ; \n\t\t\twriteInstallInfo ( ) ; \n\t\t\tfgHasChanged . add ( location ) ; \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static Boolean [ ] valuesOf ( $F8748 array ) { \n\tBoolean [ ] dest = new Boolean [ array . length ] ; \n\tfor ( $F1139 ( i , array ) ) $F11856 ( dest , i , Boolean , array ) return dest ; \n\t} \n"}, {"code": "public void addUpdateListener ( AnimatorUpdateListener listener ) { \n\tif ( mUpdateListeners == null ) { \n\t\tmUpdateListeners = new ArrayList < AnimatorUpdateListener > $F72 ; \n\t\t} \n\tmUpdateListeners . add ( listener ) ; \n\t} \n"}, {"code": "private void correctTooHigh ( int childCount ) { \n\tint lastPosition = mFirstPosition + childCount - NUM00 ; \n\tif ( lastPosition == mItemCount - NUM00 && childCount > NUM00 ) { \n\t\t$F3666 ( lastBottom , getLowestChildBottom ) final int end = $F124367 ( getBottom , getTop ) - getListPaddingBottom ( ) ; \n\t\tint bottomOffset = end - lastBottom ; \n\t\t$F3666 ( firstTop , getHighestChildTop ) if ( bottomOffset > NUM00 && ( mFirstPosition > NUM00 || firstTop < getListPaddingTop ( ) ) ) { \n\t\t\tif ( mFirstPosition == NUM00 ) { \n\t\t\t\tbottomOffset = Math . min ( bottomOffset , getListPaddingTop ( ) - firstTop ) ; \n\t\t\t\t} \n\t\t\toffsetChildrenTopAndBottom ( bottomOffset ) ; \n\t\t\tif ( mFirstPosition > NUM00 ) { \n\t\t\t\tint previousPosition = mFirstPosition - NUM00 ; \n\t\t\t\tfillUp ( previousPosition , getNextChildUpsBottom ( previousPosition ) ) ; \n\t\t\t\tadjustViewsUpOrDown ( ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static boolean writeLine ( String fileName , String value ) { \n\tBufferedWriter writer = null ; \n\ttry { \n\t\t$F92873 ( writer , fileName ) writer . write ( value ) ; \n\t\t} \n\tcatch ( FileNotFoundException e ) { \n\t\tLog . w ( TAG , NUM00 + fileName + NUM00 , e ) ; \n\t\treturn _BOOL ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\tLog . e ( TAG , NUM00 + fileName , e ) ; \n\t\treturn _BOOL ; \n\t\t} \n\tfinally { \n\t\ttry $F6399 ( writer ) $F29052 } \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void didRollback $F72 { \n\tsynchronized ( this ) { \n\t\tif ( pending != null ) { \n\t\t\tpending . cancel ( _BOOL ) ; \n\t\t\tpending = null ; \n\t\t\t} \n\t\t$F3223 ( docsSinceCommit ) } \n\t} \n"}, {"code": "$F1 protected void calculateThumbLocation $F72 { \n\tsuper . calculateThumbLocation ( ) ; \n\tif ( slider . getSnapToTicks ( ) ) { \n\t\tint upperValue = slider . getValue ( ) + slider . getExtent ( ) ; \n\t\tint snappedValue = upperValue ; \n\t\tint majorTickSpacing = slider . getMajorTickSpacing ( ) ; \n\t\tint minorTickSpacing = slider . getMinorTickSpacing ( ) ; \n\t\tint tickSpacing = NUM00 ; \n\t\tif ( minorTickSpacing > NUM00 ) { \n\t\t\ttickSpacing = minorTickSpacing ; \n\t\t\t} \n\t\telse if ( majorTickSpacing > NUM00 ) { \n\t\t\ttickSpacing = majorTickSpacing ; \n\t\t\t} \n\t\tif ( tickSpacing != NUM00 ) { \n\t\t\tif ( ( upperValue - slider . getMinimum ( ) ) % tickSpacing != NUM00 ) { \n\t\t\t\tfloat temp = ( float ) ( upperValue - slider . getMinimum ( ) ) / ( float ) tickSpacing ; \n\t\t\t\tint whichTick = Math . round ( temp ) ; \n\t\t\t\tsnappedValue = slider . getMinimum ( ) + ( whichTick * tickSpacing ) ; \n\t\t\t\t} \n\t\t\tif ( snappedValue != upperValue ) { \n\t\t\t\tslider . setExtent ( snappedValue - slider . getValue ( ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tif ( slider . getOrientation ( ) == JSlider . HORIZONTAL ) { \n\t\tint upperPosition = xPositionForValue ( slider . getValue ( ) + slider . getExtent ( ) ) ; \n\t\tupperThumbRect . x = upperPosition - $F511692 ( upperThumbRect ) ; \n\t\t$F33649 ( upperThumbRect , trackRect ) } \n\telse { \n\t\tint upperPosition = yPositionForValue ( slider . getValue ( ) + slider . getExtent ( ) ) ; \n\t\t$F33664 ( upperThumbRect , trackRect ) upperThumbRect . y = upperPosition - $F130196 ( upperThumbRect ) ; \n\t\t} \n\t} \n"}, {"code": "public void compile ( int throughPhase ) throws CompilationFailedException { \n\tgotoPhase ( Phases . INITIALIZATION ) ; \n\tthroughPhase = Math . min ( throughPhase , Phases . ALL ) ; \n\twhile ( throughPhase >= phase && phase <= Phases . ALL ) { \n\t\tif ( phase == Phases . SEMANTIC_ANALYSIS ) { \n\t\t\tdoPhaseOperation ( resolve ) ; \n\t\t\tif ( dequeued ( ) ) $F598 } \n\t\tprocessPhaseOperations ( phase ) ; \n\t\tprocessNewPhaseOperations ( phase ) ; \n\t\tif ( progressCallback != null ) progressCallback . call ( this , phase ) ; \n\t\tcompletePhase ( ) ; \n\t\tapplyToSourceUnits ( mark ) ; \n\t\tif ( dequeued ( ) ) $F598 gotoPhase ( phase + NUM00 ) ; \n\t\tif ( phase == Phases . CLASS_GENERATION ) $F5795 ( sortClasses ) } \n\terrorCollector . failIfErrors ( ) ; \n\t} \n"}, {"code": "public String generateBearerToken ( String email , String username , $F2540 ( payload ) ) { \n\tString token = tokenGenerator . generate ( ) ; \n\t$F2539 payloadCopy = payload == null ? new HashMap $F72 : new HashMap ( payload ) ; \n\t$F545 ( payloadCopy , email ) $F545 ( payloadCopy , username ) payloadCopy . put ( NUM00 , $F172781 ( Long , System ) ) ; \n\ttokenMap . put ( token , payloadCopy ) ; \n\treturn token ; \n\t} \n"}, {"code": "public void endDocument ( Augmentations augs ) throws XNIException { \n\ttry { \n\t\tif ( fDocumentHandler != null ) { \n\t\t\t$F45698 ( fDocumentHandler ) } \n\t\tif ( fContentHandler != null ) { \n\t\t\t$F45698 ( fContentHandler ) } \n\t\t} \n\t$F122277 ( e ) } \n"}, {"code": "public final ConnectionState newInput $F72 throws IOException { \n\tif $F5720 ( in ) $F11389 $F725 ( in ) $F83249 ( r , ch , in ) if ( r == - NUM00 ) $F3575 if ( r == NUM00 ) return ConnectionState . SELECTOR_WAIT_FOR_NEW_INPUT ; \n\t$F14257 ( in ) return newRequestChunk ( ) ; \n\t} \n"}, {"code": "$F120210 ( maximumPullScroll , getMaximumPullScroll , pLeft , getPaddingLeft , pTop , getPaddingTop , pRight , getPaddingRight , pBottom , getPaddingBottom , getPullToRefreshScrollDirection , HORIZONTAL , mMode , mHeaderLayout , mFooterLayout , VERTICAL , DEBUG , Log , LOG_TAG , String , setPadding ) "}, {"code": "public boolean canMoveForward $F72 { \n\treturn currentIndex >= NUM00 && currentIndex < $F113103 ( history ) ; \n\t} \n"}, {"code": "public void clearCache $F72 { \n\tDiskLruCache . clearCache ( mCacheDir ) ; \n\t} \n"}, {"code": "public void addNaturalJoinColumn ( Column c ) { \n\tif ( naturalJoinColumns == null ) { \n\t\tnaturalJoinColumns = New . arrayList ( ) ; \n\t\t} \n\tnaturalJoinColumns . add ( c ) ; \n\t} \n"}, {"code": "private RefactoringStatus checkCanCreateIntermediaryMethod $F72 throws JavaModelException { \n\tList < ITypeBinding > parameterBindings = new ArrayList < ITypeBinding > $F72 ; \n\tif $F931 ( isStaticTarget ) parameterBindings . add ( fIntermediaryFirstParameterType ) ; \n\tparameterBindings . addAll ( Arrays . asList ( fTargetMethodBinding . getParameterTypes ( ) ) ) ; \n\treturn Checks . checkMethodInType ( fIntermediaryTypeBinding , fIntermediaryMethodName , parameterBindings . toArray ( new ITypeBinding $F2313 ( parameterBindings ) ) ) ; \n\t} \n"}, {"code": "$F1 public String generateToolTip $F133956 ( data , series , item ) $F8587 ( getToolTipText , series , item ) "}, {"code": "private $F6969 findClassNonDalvik ( String name ) throws ClassNotFoundException { \n\tString pathName = CLASS_PATH + name + NUM00 ; \n\t$F1705 ( path , pathName ) RandomAccessFile raf ; \n\ttry { \n\t\t$F27402 ( raf , path ) } \n\tcatch ( FileNotFoundException fnfe ) { \n\t\tthrow new ClassNotFoundException ( NUM00 + pathName ) ; \n\t\t} \n\t$F96 fileData ; \n\ttry { \n\t\tfileData = new byte [ $F5338 ( raf ) ] ; \n\t\traf . readFully ( fileData ) ; \n\t\t} \n\tcatch ( IOException ioe ) { \n\t\tthrow new ClassNotFoundException ( NUM00 + pathName ) ; \n\t\t} \n\tfinally { \n\t\ttry $F881 ( raf ) $F62612 } \n\ttry { \n\t\treturn defineClass ( name , fileData , NUM00 , fileData . length ) ; \n\t\t} \n\tcatch ( Throwable th ) $F345483 ( th ) } \n"}, {"code": "public static void load $F60993 ( parent ) { \n\tload ( parent , ClassLoader . getSystemClassLoader ( ) ) ; \n\t} \n"}, {"code": "public void removeChangeListener ( ChangeListener cl ) $F106 ( listeners , cl ) "}, {"code": "@ GuardedBy ( NUM00 ) void applyRead $F17573 ( node ) { \n\tif $F105 ( evictionDeque , node ) { \n\t\tevictionDeque . moveToBack ( node ) ; \n\t\t} \n\t} \n"}, {"code": "private void flushWriteChunk $F72 { \n\t$F8249 ( writeChunk ) if $F73765 ( writeChunk ) $F665 if $F116620 ( writeChunk ) { \n\t\tbytesWritten += writeChunk . position ( ) ; \n\t\t$F14257 ( writeChunk ) list . addLast ( writeChunk ) ; \n\t\twriteChunk = null ; \n\t\t$F665 } \n\tbytesWritten += writeChunk . position ( ) ; \n\tByteBuffer flushChunk = writeChunk ; \n\twriteChunk = writeChunk . slice ( ) ; \n\twriteChunk . order ( order ) ; \n\t$F14257 ( flushChunk ) list . addLast ( flushChunk ) ; \n\t$F665 } \n"}, {"code": "public final double sin $F72 { \n\treturn Math . sin ( this . radians ) ; \n\t} \n"}, {"code": "public AxisLabelLayout ( String group , int axis , ValuedRangeModel values ) $F214324 ( this , group , axis , values ) "}, {"code": "public double angle ( IMovingAgent agent ) { \n\treturn Geometric . angle ( this . location , agent . getLocation ( ) ) ; \n\t} \n"}, {"code": "$F1 public boolean equals ( Object obj ) { \n\t$F3627 ( obj , this , _BOOL ) if ( ! ( obj instanceof DefaultDrawingSupplier ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tDefaultDrawingSupplier that = ( DefaultDrawingSupplier ) obj ; \n\tif ( ! Arrays . equals ( this . paintSequence , that . paintSequence ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( this . paintIndex != that . paintIndex ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( ! Arrays . equals ( this . outlinePaintSequence , that . outlinePaintSequence ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( this . outlinePaintIndex != that . outlinePaintIndex ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( ! Arrays . equals ( this . strokeSequence , that . strokeSequence ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( this . strokeIndex != that . strokeIndex ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( ! Arrays . equals ( this . outlineStrokeSequence , that . outlineStrokeSequence ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( this . outlineStrokeIndex != that . outlineStrokeIndex ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( ! equalShapes ( this . shapeSequence , that . shapeSequence ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( this . shapeIndex != that . shapeIndex ) { \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static int brighter ( int c ) { \n\tint r = red ( c ) , g = green ( c ) , b = blue ( c ) ; \n\tint i = ( int ) ( NUM00 / ( NUM00 - scale ) ) ; \n\tif ( r == NUM00 && g == NUM00 && b == NUM00 ) { \n\t\treturn rgba ( i , i , i , alpha ( c ) ) ; \n\t\t} \n\tif ( r > NUM00 && r < i ) r = i ; \n\tif ( g > NUM00 && g < i ) g = i ; \n\tif ( b > NUM00 && b < i ) b = i ; \n\treturn rgba ( Math . min ( NUM00 , $F2116 ( r , scale ) ) , Math . min ( NUM00 , $F2116 ( g , scale ) ) , Math . min ( NUM00 , $F2116 ( b , scale ) ) , alpha ( c ) ) ; \n\t} \n"}, {"code": "$F16267 ( propertyName , in_pcl , pcSupport ) "}, {"code": "$F1 protected void paintComponent ( Graphics g ) { \n\tsuper . paintComponent ( g ) ; \n\t$F20230 ( g2 , g ) $F72524 ( shouldDraw , drawDisplayListOn , g2 ) } \n"}, {"code": "public void load ( InputStream in ) throws IOException { \n\tproperties . load ( in ) ; \n\tdirty = _BOOL ; \n\t} \n"}, {"code": "$F1 public void onBindViewHolder ( VH holder , int position ) { \n\tif ( list . get ( position ) . type == TYPE_ITEM ) { \n\t\tonBindItemViewHolder ( holder , position ) ; \n\t\t} \n\telse if ( list . get ( position ) . type == TYPE_HEADER ) { \n\t\tonBindHeaderViewHolder ( holder , position ) ; \n\t\t} \n\t} \n"}, {"code": "public static Map < ComponentWrapper , CC > parseComponentConstraints ( Map < ComponentWrapper , String > constrMap ) { \n\tHashMap < ComponentWrapper , CC > flowConstrMap = new HashMap < ComponentWrapper , CC > $F72 ; \n\tfor ( ComponentWrapper c : constrMap . keySet ( ) ) { \n\t\tflowConstrMap . put ( c , parseComponentConstraint ( constrMap . get ( c ) ) ) ; \n\t\t} \n\treturn flowConstrMap ; \n\t} \n"}, {"code": "private void sendStageProgressPatch ( TaskState state ) { \n\tServiceUtils . logInfo ( this , NUM00 , state . stage , state . subStage ) ; \n\tTaskUtils . sendSelfPatch ( this , buildPatch ( state . stage , state . subStage , null ) ) ; \n\t} \n"}, {"code": "public void testCommonPrefix $F72 { \n\tString returned = m_Trie . getCommonPrefix ( ) ; \n\tassertEquals ( NUM00 , NUM00 , returned . length ( ) ) ; \n\tString expected = NUM00 ; \n\tTrie t = buildTrie ( new String [ ] { \n\t\tm_Data [ NUM00 ] , m_Data [ NUM00 ] } \n\t) ; \n\treturned = t . getCommonPrefix ( ) ; \n\tassertEquals ( NUM00 , expected . length ( ) , returned . length ( ) ) ; \n\t} \n"}, {"code": "public String moveBack $F72 { \n\tCheck . isTrue ( currentIndex > NUM00 , NUM00 ) ; \n\tcurrentIndex -- ; \n\t$F8313 ( history , currentIndex ) } \n"}, {"code": "public static long hash64 ( final String text ) { \n\t$F173719 ( bytes , text ) $F135820 ( hash64 , bytes ) } \n"}, {"code": "public static void deleteCore $F72 { \n\t$F973 ( log ) $F2727 ( h ) if ( factoryProp == null ) { \n\t\t$F739 ( System ) } \n\tsolrConfig = null ; \n\th = null ; \n\tlrf = null ; \n\tconfigString = schemaString = null ; \n\t} \n"}, {"code": "public static boolean canTab ( List constraints ) { \n\tfor ( $F2774 ( iter , constraints ) ) { \n\t\t$F67999 ( dc , iter ) if ( ! dc . canTab ( ) ) return _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public ImdnParser parse $F72 throws $F49817 $F49826 ( factory , SAXParserFactory , parser , mInputSource , this , e ) "}, {"code": "static boolean chunkSet ( InternalDistributedMember recipient , Set set , int CHUNK_SIZE_IN_BYTES , boolean includeValues , ObjectIntProcedure proc ) throws IOException { \n\t$F10531 ( it , set ) boolean keepGoing = _BOOL ; \n\tboolean sentLastChunk = _BOOL ; \n\tfinal HeapDataOutputStream mos = new HeapDataOutputStream ( InitialImageOperation . CHUNK_SIZE_IN_BYTES + NUM00 , recipient . getVersionObject ( ) ) ; \n\tdo { \n\t\t$F2268 ( mos ) int avgItemSize = NUM00 ; \n\t\tint itemCount = NUM00 ; \n\t\twhile ( ( mos . size ( ) + avgItemSize ) < InitialImageOperation . CHUNK_SIZE_IN_BYTES && it . hasNext ( ) ) { \n\t\t\t$F8877 ( key , it ) DataSerializer . writeObject ( key , mos ) ; \n\t\t\titemCount ++ ; \n\t\t\tavgItemSize = mos . size ( ) / itemCount ; \n\t\t\t} \n\t\tDataSerializer . writeObject ( ( Object ) null , mos ) ; \n\t\tint lastMsg = it . hasNext ( ) ? NUM00 : NUM00 ; \n\t\tkeepGoing = proc . executeWith ( mos , lastMsg ) ; \n\t\tsentLastChunk = lastMsg == NUM00 && keepGoing ; \n\t\t} \n\twhile ( keepGoing && it . hasNext ( ) ) ; \n\treturn sentLastChunk ; \n\t} \n"}, {"code": "public static BigInteger toBigInteger ( final Ed25519EncodedFieldElement encoded ) { \n\treturn toBigInteger ( encoded . getRaw ( ) ) ; \n\t} \n"}, {"code": "public String escapeLDAPSearchFilter ( String filter ) { \n\t$F83 ( sb ) for ( $F1088 ( i , filter ) ) { \n\t\t$F1280 ( curChar , filter , i ) switch ( curChar ) { \n\t\t\t$F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F38142 ( sb , curChar ) } \n\t\t} \n\t$F92 ( sb ) } \n"}, {"code": "protected synchronized void save $F72 { \n\tint retVal ; \n\tFile file ; \n\tString text ; \n\tFileWriter fwriter ; \n\tBufferedWriter bwriter ; \n\tretVal = m_FileChooser . showOpenDialog ( this ) ; \n\t$F35873 ( retVal , MekaFileChooser ) file = m_FileChooser . getSelectedFile ( ) ; \n\t$F35875 ( text , m_TextArea ) fwriter = null ; \n\tbwriter = null ; \n\ttry { \n\t\t$F35876 ( fwriter , file ) $F35877 ( bwriter , fwriter ) bwriter . write ( text ) ; \n\t\t$F1769 ( bwriter ) $F1206 ( bwriter ) log ( NUM00 + file ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\thandleException ( NUM00 + file , e ) ; \n\t\t} \n\t$F5186 ( FileUtils , bwriter , fwriter ) } \n"}, {"code": "public EigenvalueDecomposition $F28975 ( A ) { \n\tn = A . length ; \n\t$F10226 ( V , n ) $F10254 ( d , n ) $F10254 ( e , n ) issymmetric = _BOOL ; \n\tfor ( int j = NUM00 ; \n\t( j < n ) && issymmetric ; \n\tj ++ ) { \n\t\tfor ( int i = NUM00 ; \n\t\t( i < n ) && issymmetric ; \n\t\ti ++ ) { \n\t\t\tissymmetric = ( A [ i ] [ j ] == A [ j ] [ i ] ) ; \n\t\t\tif ( Double . isNaN ( A [ i ] [ j ] ) ) $F825 if ( Double . isInfinite ( A [ i ] [ j ] ) ) $F825 } \n\t\t} \n\tif ( issymmetric ) { \n\t\tfor ( $F119 ( i , n ) ) { \n\t\t\tSystem . arraycopy ( A [ i ] , NUM00 , V [ i ] , NUM00 , n ) ; \n\t\t\t} \n\t\ttred2 ( ) ; \n\t\ttql2 ( ) ; \n\t\t} \n\telse { \n\t\t$F10226 ( H , n ) $F10254 ( ort , n ) for ( $F119 ( j , n ) ) { \n\t\t\tfor ( $F119 ( i , n ) ) { \n\t\t\t\tH [ i ] [ j ] = A [ i ] [ j ] ; \n\t\t\t\t} \n\t\t\t} \n\t\torthes ( ) ; \n\t\thqr2 ( ) ; \n\t\t} \n\t} \n"}, {"code": "public SearchSourceBuilder fields ( String ... fields ) { \n\t$F9406 ( fieldNames ) Collections . addAll ( fieldNames , fields ) ; \n\treturn this ; \n\t} \n"}, {"code": "public static StringBuilder formatTo ( StringBuilder buf , $F8748 d , String sep ) { \n\t$F50085 ( d , buf ) $F50086 ( d , buf ) $F13031 ( buf , d ) for ( $F1139 ( i , d ) ) { \n\t\tbuf . append ( sep ) ; \n\t\t$F29840 ( buf , format , d , i ) } \n\treturn buf ; \n\t} \n"}, {"code": "public String toCompleteString $F72 { \n\tString ret = NUM00 ; \n\tif ( $F1030 ( lines ) && ! Config . v ( ) . noSourceInfo ) { \n\t\tfor ( SourceLocationTag line : lines ) $F58266 ( ret , line ) } \n\tret += toSignatureString ( ) ; \n\treturn ret ; \n\t} \n"}, {"code": "$F1 public void updateReceiptDetails ( final Set < BillReceiptInfo > billReceipts ) { \n\t$F586 ( LOGGER , billReceipts ) final Boolean status = _BOOL ; \n\tif ( billReceipts != null ) super . updateReceiptDetails ( billReceipts ) ; \n\t$F586 ( LOGGER , status ) } \n"}, {"code": "public static void removeMapEntries ( Map map , Set set ) { \n\tif $F2772 ( set ) { \n\t\tfor ( $F2774 ( iter , set ) ) { \n\t\t\tmap . remove ( iter . next ( ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static void putFile ( ServiceClient h , final Operation put , File f ) throws IOException { \n\tfinal AsynchronousFileChannel ch = AsynchronousFileChannel . open ( f . toPath ( ) , StandardOpenOption . READ ) ; \n\tAtomicInteger $F107657 ( completionCount ) ; \n\tString contentType = FileUtils . getContentType ( f . toURI ( ) ) ; \n\tfinal $F8748 fileIsDone = { \n\t\t_BOOL } \n\t; \n\tputChunks ( h , put , ch , contentType , f . length ( ) , NUM00 , completionCount , fileIsDone ) ; \n\t} \n"}, {"code": "protected StringBuilder processLine ( String nextElement ) { \n\tStringBuilder sb = new StringBuilder ( INITIAL_ <missing ';'> NUM00 <missing ';'> _SIZE ) ; \n\tfor ( $F1088 ( j , nextElement ) ) { \n\t\t$F1280 ( nextChar , nextElement , j ) processCharacter ( sb , nextChar ) ; \n\t\t} \n\treturn sb ; \n\t} \n"}, {"code": "public JavaRefactoringDescriptor ( final String id , final String project , final String description , final String comment , final Map arguments , final int flags ) { \n\tsuper ( id , project , description , comment , flags ) ; \n\tfArguments = arguments ; \n\tfArguments . put ( ATTRIBUTE_VERSION , VALUE_VERSION_1_0 ) ; \n\t} \n"}, {"code": "private static SupportedGroup negotiateNamedCurve ( ClientHello clientHello ) { \n\tSupportedGroup result = null ; \n\tList < SupportedGroup > preferredGroups = SupportedGroup . getPreferredGroups ( ) ; \n\tSupportedEllipticCurvesExtension extension = clientHello . getSupportedEllipticCurvesExtension ( ) ; \n\tif ( extension == null ) { \n\t\tif $F5973 ( preferredGroups ) $F36987 ( result , preferredGroups ) } \n\telse { \n\t\tfor ( Integer preferredGroupId : extension . getSupportedGroupIds ( ) ) { \n\t\t\tSupportedGroup group = SupportedGroup . fromId ( preferredGroupId ) ; \n\t\t\tif ( group != null && group . isUsable ( ) && preferredGroups . contains ( group ) ) $F3468 ( result , group ) } \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public void zoom $F72 { \n\tif ( getSelectedRowKey ( ) != null && getSelectedRowKey ( ) > NUM00 ) { \n\t\tMQuery zoomQuery = new MQuery $F72 ; \n\t\tString column = getKeyColumn ( ) ; \n\t\tif $F56559 ( column ) column = $F58211 ( column ) ; \n\t\tzoomQuery . addRestriction ( column , MQuery . EQUAL , getSelectedRowKey ( ) ) ; \n\t\tzoomQuery . setRecordCount ( NUM00 ) ; \n\t\tzoomQuery . setTableName ( $F4019 ( column ) ) ; \n\t\tAEnv . zoom ( NUM00 , zoomQuery ) ; \n\t\t} \n\t} \n"}, {"code": "public long avgRate $F72 { \n\tlong sum = NUM00 ; \n\tfor ( Sample s : samples ) { \n\t\tsum += s . rate ( ) ; \n\t\t} \n\treturn ( long ) ( sum / ( long ) samples . size ( ) ) ; \n\t} \n"}, {"code": "$F1 public synchronized void close $F72 throws IOException { \n\ttry { \n\t\t$F65150 ( syncTask ) sync ( ) ; \n\t\tunmapFile ( ) ; \n\t\t} \n\t$F3229 ( super ) } \n"}, {"code": "public boolean mouseMoved ( MouseEvent e ) { \n\tOMGraphic newSelectedGraphic ; \n\tif ( show_plot_ && graph != null ) { \n\t\tnewSelectedGraphic = graph . selectPoint ( e . getX ( ) , e . getY ( ) , NUM00 ) ; \n\t\tif ( newSelectedGraphic != null ) { \n\t\t\tString infostring = ( String ) ( newSelectedGraphic . getAttribute ( OMGraphic . APP_OBJECT ) ) ; \n\t\t\t$F25302 ( infostring , fireRequestInfoLine ) } \n\t\telse $F1210 ( fireRequestInfoLine ) return _BOOL ; \n\t\t} \n\telse { \n\t\tOMGraphicList list = getList ( ) ; \n\t\tif ( list != null ) { \n\t\t\tnewSelectedGraphic = list . selectClosest ( e . getX ( ) , e . getY ( ) , NUM00 ) ; \n\t\t\tif ( newSelectedGraphic != null && ( selectedGraphic == null || newSelectedGraphic != selectedGraphic ) ) { \n\t\t\t\t$F36253 ( Debug ) selectedGraphic = newSelectedGraphic ; \n\t\t\t\tselectedGraphic . regenerate ( getProjection ( ) ) ; \n\t\t\t\tGLOBESite site = ( GLOBESite ) ( newSelectedGraphic . getAttribute ( OMGraphic . APP_OBJECT ) ) ; \n\t\t\t\tif ( site != null ) { \n\t\t\t\t\tfireRequestInfoLine ( site . getInfo ( ) ) ; \n\t\t\t\t\t} \n\t\t\t\trepaint ( ) ; \n\t\t\t\t} \n\t\t\telse if ( selectedGraphic != null && newSelectedGraphic == null ) { \n\t\t\t\t$F36253 ( Debug ) selectedGraphic . regenerate ( getProjection ( ) ) ; \n\t\t\t\tfireRequestInfoLine ( NUM00 ) ; \n\t\t\t\tselectedGraphic = null ; \n\t\t\t\trepaint ( ) ; \n\t\t\t\t} \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void hidePopup $F72 { \n\tshowPending = _BOOL ; \n\tif ( popup != null ) { \n\t\t$F4911 ( popup ) popup = null ; \n\t\t} \n\t} \n"}, {"code": "$F663 ( currTime , System , elapsed , startTime , ZOOM_TIME , Math , interpolator ) "}, {"code": "private PointF isFlingingToDelete ( DragSource source ) { \n\t$F1275 ( mFlingToDeleteDropTarget ) if ( ! source . supportsFlingToDelete ( ) ) $F1274 $F27383 ( config , ViewConfiguration , mLauncher ) mVelocityTracker . computeCurrentVelocity ( NUM00 , config . getScaledMaximumFlingVelocity ( ) ) ; \n\tif ( mVelocityTracker . getYVelocity ( ) < mFlingToDeleteThresholdVelocity ) { \n\t\tPointF vel = new PointF ( mVelocityTracker . getXVelocity ( ) , mVelocityTracker . getYVelocity ( ) ) ; \n\t\tPointF upVec = new PointF $F261843 ; \n\t\tfloat theta = ( float ) Math . acos ( ( ( vel . x * upVec . x ) + ( vel . y * upVec . y ) ) / ( vel . length ( ) * upVec . length ( ) ) ) ; \n\t\tif ( theta <= Math . toRadians ( MAX_FLING_DEGREES ) ) { \n\t\t\treturn vel ; \n\t\t\t} \n\t\t} \n\t$F1274 } \n"}, {"code": "public final RuntimeException processDoMethodInvokeException ( Exception e , Object object , $F131 argumentArray ) { \n\tif ( e instanceof RuntimeException ) return ( RuntimeException ) e ; \n\treturn MetaClassHelper . createExceptionText ( NUM00 , this , object , argumentArray , e , _BOOL ) ; \n\t} \n"}, {"code": "protected boolean buildSubfieldDefns ( String pszSublist ) { \n\tif $F4432 ( pszSublist ) { \n\t\tbRepeatingSubfields = _BOOL ; \n\t\t$F3108 ( pszSublist ) } \n\tVector papszSubfieldNames = PropUtils . parseMarkers ( pszSublist , NUM00 ) ; \n\t$F20637 ( paoSubfieldDefns ) for ( $F2774 ( it , papszSubfieldNames ) ) { \n\t\tDDFSubfieldDefinition ddfsd = new DDFSubfieldDefinition $F72 ; \n\t\tddfsd . setName ( $F2775 ( it ) ) ; \n\t\tpaoSubfieldDefns . add ( ddfsd ) ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public boolean isRunning $F72 $F1522 ( mRunning ) "}, {"code": "private static Map $F91737 objectMethodsToGenerate ( List < ExecutableElement > methods ) { \n\tMap $F91737 vars = new TreeMap $F91737 $F72 ; \n\t$F545 ( vars , _BOOL ) $F545 ( vars , _BOOL ) $F545 ( vars , _BOOL ) for ( ExecutableElement method : methods ) { \n\t\tif ( isToStringOrEqualsOrHashCode ( method ) ) { \n\t\t\tboolean canGenerate = method . getModifiers ( ) . contains ( Modifier . ABSTRACT ) || isJavaLangObject ( ( TypeElement ) method . getEnclosingElement ( ) ) ; \n\t\t\tvars . put ( method . getSimpleName ( ) . toString ( ) , canGenerate ) ; \n\t\t\t} \n\t\t} \n\tassert $F10470 ( vars ) ; \n\treturn vars ; \n\t} \n"}, {"code": "public void addEntryTime ( double time ) { \n\t$F2329 ( entryTimes ) $F17370 ( time ) $F269561 ( entryTimes , Double , time ) } \n"}, {"code": "public void test_singleResourceLocking_serialized_waitsFor_highConcurrency $F72 throws Exception { \n\t$F859 ( properties ) final int nthreads = NUM00 ; \n\tfinal int ntasks = NUM00 ; \n\t$F130259 ( properties , TestOptions , nthreads ) $F130261 ( properties , TestOptions , ntasks ) $F130263 ( properties , TestOptions ) $F130265 ( properties , TestOptions ) $F130267 ( properties , TestOptions ) $F130271 ( properties , TestOptions ) $F130273 ( properties , TestOptions ) final Result result = doComparisonTest ( properties ) ; \n\t$F130277 ( assertEquals , Integer , result ) $F130277 ( assertEquals , Integer , result ) $F130280 ( assertEquals , ntasks , Integer , result ) } \n"}, {"code": "public final double NPV $F72 { \n\tcalculate ( ) ; \n\tQL . require ( ! Double . isNaN ( this . NPV ) , NUM00 ) ; \n\treturn NPV ; \n\t} \n"}, {"code": "public ArrayRealVector ( ArrayRealVector v1 , RealVector v2 ) { \n\tfinal int l1 = v1 . data . length ; \n\t$F62063 ( l2 , v2 ) data = new double [ l1 + l2 ] ; \n\tSystem . arraycopy ( v1 . data , NUM00 , data , NUM00 , l1 ) ; \n\tfor ( $F1316 ( i , l2 ) ) { \n\t\tdata [ l1 + i ] = v2 . getEntry ( i ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F529 deactivateContentAssoc $F71242 ( dctx , rcontext ) { \n\t$F118334 ( context , UtilMisc , rcontext ) $F16824 ( context ) $F3803 targetOperationList = ContentWorker . prepTargetOperationList ( context , NUM00 ) ; \n\t$F3803 contentPurposeList = ContentWorker . prepContentPurposeList ( context ) ; \n\t$F545 ( context , targetOperationList ) $F545 ( context , contentPurposeList ) $F91191 ( context ) $F157005 ( result , deactivateContentAssocMethod , dctx , context ) return result ; \n\t} \n"}, {"code": "public ByteBuffer flushAndReleaseBuffer $F72 throws IOException { \n\t$F8934 ( _lock ) try { \n\t\t_flushPending = _BOOL ; \n\t\twhile ( _bufferUseCount != NUM00 ) $F24081 ( _flushReady ) $F14257 ( _buffer ) if ( _buffer . limit ( ) != NUM00 && _modified ) { \n\t\t\tif ( _backingFile == null ) { \n\t\t\t\t_backingFile = Files . createTempFile ( NUM00 , NUM00 ) ; \n\t\t\t\t} \n\t\t\t_log . debug ( NUM00 , _startIndex , _backingFile , _buffer . limit ( ) , _blockSize ) ; \n\t\t\ttry ( ByteChannel out = Files . newByteChannel ( _backingFile , WRITE ) ) $F4050 ( out , _buffer ) } \n\t\telse $F11589 ( _log , _startIndex ) ByteBuffer oldBuffer = _buffer ; \n\t\t_buffer = null ; \n\t\t_loaded = _BOOL ; \n\t\treturn oldBuffer ; \n\t\t} \n\tcatch ( InterruptedException e ) { \n\t\tthrow Throwables . propagate ( e ) ; \n\t\t} \n\tfinally { \n\t\t_flushPending = _BOOL ; \n\t\t$F39065 ( _flushComplete ) $F704 ( _lock ) } \n\t} \n"}, {"code": "public static boolean isDirectlyGettingPowered ( World world , Coord4D coord ) { \n\tfor ( ForgeDirection side : ForgeDirection . VALID_DIRECTIONS ) { \n\t\tCoord4D sideCoord = coord . getFromSide ( side ) ; \n\t\tif $F97092 ( sideCoord , world ) { \n\t\t\tif ( world . isBlockProvidingPowerTo ( coord . xCoord , coord . yCoord , coord . zCoord , side . ordinal ( ) ) > NUM00 ) { \n\t\t\t\treturn _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public < T extends PropertyContainer > List < SearchMatch $F4203 > search $F92641 ( query , clazz ) { \n\tSearchResult result = doQuery ( query , clazz ) ; \n\tList < SearchMatch $F4203 > matches = buildSearchMatches ( result ) ; \n\t$F1431 Function < SearchMatch , T > resolver = ( Function < SearchMatch , T > ) ( clazz . equals ( Node . class ) ? getNodeResolver ( ) : getRelationshipResolver ( ) ) ; \n\treturn resolveMatchItems ( matches , resolver ) ; \n\t} \n"}, {"code": "private synchronized void enumerate ( $F240196 h ) { \n\tif ( defaults != null ) { \n\t\tdefaults . enumerate ( h ) ; \n\t\t} \n\tfor ( $F58020 e = keys ( ) ; \n\te . hasMoreElements ( ) ; \n\t) { \n\t\t$F14952 ( key , e ) h . put ( key , get ( key ) ) ; \n\t\t} \n\t} \n"}, {"code": "public void updateQuantityCsv ( ItemBean original , ItemBean itemToAdd , boolean add ) { \n\tBigDecimal originalQuantity = original . getQtyCsv ( ) ; \n\tBigDecimal quantityToAdd = itemToAdd . getQtyCsv ( ) ; \n\tBigDecimal finalQuantity = null ; \n\tif ( ! add ) finalQuantity = originalQuantity . subtract ( quantityToAdd ) ; \n\telse finalQuantity = originalQuantity . add ( quantityToAdd ) ; \n\toriginal . setQtyCsv ( finalQuantity ) ; \n\t} \n"}, {"code": "public static Number abs ( Number a ) { \n\tif ( isFloatingPoint ( a ) ) { \n\t\treturn Math . abs ( a . doubleValue ( ) ) ; \n\t\t} \n\telse { \n\t\treturn Math . abs ( a . longValue ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "$F43277 ( listener , mListeners ) "}, {"code": "private void sendResponse ( String status , String mime , Properties header , InputStream data ) { \n\ttry { \n\t\tif ( status == null ) $F9283 $F147972 ( out , mySocket ) $F80496 ( pw , out ) $F147974 ( pw , status ) if ( mime != null ) $F147974 ( pw , mime ) if ( header == null || header . getProperty ( NUM00 ) == null ) pw . print ( $F52171 ( gmtFrmt ) + NUM00 ) ; \n\t\tif ( header != null ) { \n\t\t\t$F10529 ( e , header ) while $F1444 ( e ) { \n\t\t\t\t$F14952 ( key , e ) $F7601 ( value , header , key ) pw . print ( key + NUM00 + value + NUM00 ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F21384 ( pw ) $F1206 ( pw ) if ( data != null ) { \n\t\t\t$F89380 ( pending , data ) $F12496 ( buff ) while ( pending > NUM00 ) { \n\t\t\t\tint read = data . read ( buff , NUM00 , ( ( pending > NUM00 ) ? NUM00 : pending ) ) ; \n\t\t\t\t$F137919 ( read ) $F11584 ( out , buff , read ) pending -= read ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F1206 ( out ) $F59 ( out ) $F711 ( data ) } \n\tcatch ( IOException ioe ) { \n\t\ttry $F881 ( mySocket ) $F58785 } \n\t} \n"}, {"code": "$F38750 ( input , encoding , toInputStream ) "}, {"code": "public User $F1947 ( id , name , email ) $F9180 ( this , id , email , name ) "}, {"code": "public static void forceDeleteOnExit ( File file ) throws IOException { \n\tif $F3444 ( file ) { \n\t\tdeleteDirectoryOnExit ( file ) ; \n\t\t} \n\telse $F125403 ( file ) } \n"}, {"code": "$F1431 public $F131 toArray $F72 { \n\t$F677 ( lock , this ) $F790 ( lock ) try { \n\t\t$F133 ( a , count ) int k = NUM00 ; \n\t\tfor ( $F13430 p = first ; \n\t\tp != null ; \n\t\tp = p . next ) a [ k ++ ] = p . item ; \n\t\treturn a ; \n\t\t} \n\t$F796 ( lock ) } \n"}, {"code": "public static Asset createAssetFromBitmap ( Bitmap bitmap ) { \n\tif ( bitmap != null ) { \n\t\t$F99460 ( byteStream ) $F125872 ( bitmap , Bitmap , byteStream ) return Asset . createFromBytes ( byteStream . toByteArray ( ) ) ; \n\t\t} \n\t$F1274 } \n"}, {"code": "public boolean isIPValid ( Session sess , String clientIP ) throws SSOException { \n\tboolean check = _BOOL ; \n\ttry { \n\t\tInetAddress sessIPAddress = InetAddress . getByName ( sess . getProperty ( NUM00 ) ) ; \n\t\t$F123267 ( clientIPAddress , InetAddress , clientIP ) $F67935 ( sessIPAddress , clientIPAddress , check , _BOOL ) } \n\tcatch ( Exception e ) { \n\t\tif $F6299 ( debug ) $F218635 ( debug , e ) } \n\treturn check ; \n\t} \n"}, {"code": "$F1431 private static void handleMethodNode ( GetStaticGraph staticUsageTree , ClassNode cn , MethodNode mn , int depth ) { \n\tInsnList instructions = mn . instructions ; \n\tIterator < AbstractInsnNode > iterator = instructions . iterator ( ) ; \n\twhile $F2921 ( iterator ) { \n\t\tAbstractInsnNode insn = iterator . next ( ) ; \n\t\tif ( insn instanceof MethodInsnNode ) { \n\t\t\thandleMethodInsnNode ( staticUsageTree , cn , mn , ( MethodInsnNode ) insn , depth + NUM00 ) ; \n\t\t\t} \n\t\telse if ( insn instanceof FieldInsnNode ) { \n\t\t\thandleFieldInsnNode ( staticUsageTree , cn , mn , ( FieldInsnNode ) insn , depth + NUM00 ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public boolean handleTouch ( MotionEvent event ) { \n\tint action = event . getAction ( ) ; \n\tif ( mRenderer != null && action == MotionEvent . ACTION_MOVE ) { \n\t\tif ( oldX >= NUM00 || oldY >= NUM00 ) { \n\t\t\tfloat newX = event . getX ( NUM00 ) ; \n\t\t\tfloat newY = event . getY ( NUM00 ) ; \n\t\t\tif ( event . getPointerCount ( ) > NUM00 && ( oldX2 >= NUM00 || oldY2 >= NUM00 ) && mRenderer . isZoomEnabled ( ) ) { \n\t\t\t\tfloat newX2 = event . getX ( NUM00 ) ; \n\t\t\t\tfloat newY2 = event . getY ( NUM00 ) ; \n\t\t\t\t$F40429 ( newDeltaX , Math , newX , newX2 ) $F40429 ( newDeltaY , Math , newY , newY2 ) $F40429 ( oldDeltaX , Math , oldX , oldX2 ) $F40429 ( oldDeltaY , Math , oldY , oldY2 ) float zoomRate = NUM00 ; \n\t\t\t\tfloat tan1 = Math . abs ( newY - oldY ) / Math . abs ( newX - oldX ) ; \n\t\t\t\tfloat tan2 = Math . abs ( newY2 - oldY2 ) / Math . abs ( newX2 - oldX2 ) ; \n\t\t\t\tif ( tan1 <= NUM00 && tan2 <= NUM00 ) { \n\t\t\t\t\tzoomRate = newDeltaX / oldDeltaX ; \n\t\t\t\t\tapplyZoom ( zoomRate , Zoom . ZOOM_AXIS_X ) ; \n\t\t\t\t\t} \n\t\t\t\telse if ( tan1 >= NUM00 && tan2 >= NUM00 ) { \n\t\t\t\t\tzoomRate = newDeltaY / oldDeltaY ; \n\t\t\t\t\tapplyZoom ( zoomRate , Zoom . ZOOM_AXIS_Y ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tif ( Math . abs ( newX - oldX ) >= Math . abs ( newY - oldY ) ) { \n\t\t\t\t\t\tzoomRate = newDeltaX / oldDeltaX ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse { \n\t\t\t\t\t\tzoomRate = newDeltaY / oldDeltaY ; \n\t\t\t\t\t\t} \n\t\t\t\t\tapplyZoom ( zoomRate , Zoom . ZOOM_AXIS_XY ) ; \n\t\t\t\t\t} \n\t\t\t\toldX2 = newX2 ; \n\t\t\t\toldY2 = newY2 ; \n\t\t\t\t} \n\t\t\telse if ( mRenderer . isPanEnabled ( ) ) { \n\t\t\t\tmPan . apply ( oldX , oldY , newX , newY ) ; \n\t\t\t\toldX2 = NUM00 ; \n\t\t\t\toldY2 = NUM00 ; \n\t\t\t\t} \n\t\t\toldX = newX ; \n\t\t\toldY = newY ; \n\t\t\t$F8798 ( graphicalView ) return _BOOL ; \n\t\t\t} \n\t\t} \n\telse if ( action == MotionEvent . ACTION_DOWN ) { \n\t\toldX = event . getX ( NUM00 ) ; \n\t\toldY = event . getY ( NUM00 ) ; \n\t\tif ( mRenderer != null && mRenderer . isZoomEnabled ( ) && zoomR . contains ( oldX , oldY ) ) { \n\t\t\tif ( oldX < zoomR . left + $F77595 ( zoomR ) ) { \n\t\t\t\tgraphicalView . zoomIn ( ) ; \n\t\t\t\t} \n\t\t\telse if ( oldX < zoomR . left + zoomR . width ( ) * NUM00 / NUM00 ) { \n\t\t\t\tgraphicalView . zoomOut ( ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tgraphicalView . zoomReset ( ) ; \n\t\t\t\t} \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\telse if ( action == MotionEvent . ACTION_UP || action == MotionEvent . ACTION_POINTER_UP ) { \n\t\toldX = NUM00 ; \n\t\toldY = NUM00 ; \n\t\toldX2 = NUM00 ; \n\t\toldY2 = NUM00 ; \n\t\tif ( action == MotionEvent . ACTION_POINTER_UP ) { \n\t\t\toldX = - NUM00 ; \n\t\t\toldY = - NUM00 ; \n\t\t\t} \n\t\t} \n\treturn ! mRenderer . isClickEnabled ( ) ; \n\t} \n"}, {"code": "public void addParameter ( NameValuePair param ) throws IllegalArgumentException { \n\t$F1932 ( log ) $F826 ( param ) addParameter ( param . getName ( ) , param . getValue ( ) ) ; \n\t} \n"}, {"code": "public static String readAsString ( InputStream is ) throws IOException { \n\t$F280 ( buf ) $F12496 ( b ) int nread = - NUM00 ; \n\twhile $F42482 ( nread , is , b ) { \n\t\tString s = $F626 ( b , nread ) ; \n\t\tbuf . append ( s ) ; \n\t\t} \n\t$F92 ( buf ) } \n"}, {"code": "private void readPolicies ( XmlPullParser parser ) throws $F139192 { \n\twhile ( parser . next ( ) != XmlPullParser . END_TAG ) { \n\t\tif ( parser . getEventType ( ) != XmlPullParser . START_TAG ) $F1448 $F20605 ( name , parser ) if $F1238 ( TAG_USER_RESTRICTION , name ) { \n\t\t\t$F85602 ( userRestriction , parser , ATTRIBUTE_NAME ) $F1140 ( userRestriction , mUserRestrictions ) } \n\t\telse if $F1238 ( TAG_GLOBAL_SETTING , name ) { \n\t\t\t$F85602 ( setting , parser , ATTRIBUTE_NAME ) $F85602 ( value , parser , ATTRIBUTE_VALUE ) if ( setting != null && value != null ) { \n\t\t\t\tmGlobalSettings . add ( new GlobalSetting ( setting , value ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse if $F1238 ( TAG_DISABLE_STATUS_BAR , name ) { \n\t\t\tmDisableStatusBar = Boolean . parseBoolean ( parser . getAttributeValue ( null , ATTRIBUTE_VALUE ) ) ; \n\t\t\t} \n\t\telse if $F1238 ( TAG_DISABLE_KEYGUARD , name ) { \n\t\t\tmDisableKeyguard = Boolean . parseBoolean ( parser . getAttributeValue ( null , ATTRIBUTE_VALUE ) ) ; \n\t\t\t} \n\t\telse if $F1238 ( TAG_DISABLE_CAMERA , name ) { \n\t\t\tmDisableCamera = Boolean . parseBoolean ( parser . getAttributeValue ( null , ATTRIBUTE_VALUE ) ) ; \n\t\t\t} \n\t\telse if $F1238 ( TAG_DISABLE_SCREEN_CAPTURE , name ) { \n\t\t\tmDisableScreenCapture = Boolean . parseBoolean ( parser . getAttributeValue ( null , ATTRIBUTE_VALUE ) ) ; \n\t\t\t} \n\t\tskipCurrentTag ( parser ) ; \n\t\t} \n\t} \n"}, {"code": "public boolean readHeader ( RandomAccessFile raf ) throws IOException { \n\t$F75240 ( id ) for ( $F6268 ( i ) ) { \n\t\t$F7468 ( ch , raf ) if ( ch < NUM00 ) { \n\t\t\t$F21991 ( hx , Integer , ch ) if $F3599 ( hx ) $F21679 ( hx ) return _BOOL ; \n\t\t\t} \n\t\t$F36813 ( id , ch ) } \n\t$F6947 ( _chunkID , id ) _size = AiffUtil . readUINT32 ( raf ) ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "private XYPlot initializePlot $F72 { \n\t$F89138 ( jmxChart ) YIntervalSeriesCollection yintervalseriescollection = new YIntervalSeriesCollection $F72 ; \n\tyintervalseriescollection . addSeries ( jmxChart ) ; \n\tDeviationRenderer renderer = new DeviationRenderer ( _BOOL , _BOOL ) ; \n\trenderer . setBaseShapesVisible ( _BOOL ) ; \n\trenderer . setSeriesStroke ( NUM00 , new BasicStroke ( NUM00 , BasicStroke . CAP_ROUND , BasicStroke . JOIN_ROUND ) ) ; \n\trenderer . setSeriesFillPaint ( NUM00 , $F89156 ) ; \n\trenderer . setSeriesOutlineStroke ( $F89162 ) ; \n\trenderer . setSeriesShape ( NUM00 , new $F35359 $F89166 ) ; \n\trenderer . setBaseToolTipGenerator ( new StandardXYToolTipGenerator ( StandardXYToolTipGenerator . DEFAULT_TOOL_TIP_FORMAT , DateFormat . getDateTimeInstance ( ) , NumberFormat . getNumberInstance ( ) ) ) ; \n\tNumberAxis rangeAxis = plotDataSolver . getAxis ( ) ; \n\tsubplot = new XYPlot ( yintervalseriescollection , null , rangeAxis , renderer ) ; \n\tsubplot . setAxisOffset ( new RectangleInsets $F13777 ) ; \n\tsubplot . setRangeAxisLocation ( AxisLocation . TOP_OR_LEFT ) ; \n\tsubplot . setRangeCrosshairVisible ( _BOOL ) ; \n\treturn subplot ; \n\t} \n"}, {"code": "private boolean isFatalState ( String sqlState ) { \n\tif ( $F107041 ( sqlState ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tfor ( String FATAL_SQL_STATE_CLASS : FATAL_SQL_STATE_CLASSES ) $F72107 ( sqlState , FATAL_SQL_STATE_CLASS , _BOOL ) return _BOOL ; \n\t} \n"}, {"code": "private void analyzeFile ( File inputFile , Optional < CommonTokenStream > optTokenStream , Optional < TopLevelContext > optTree , Formatter formatter , Severity maxSeverity , ConstructLengths constructLengths , Set < Rules > enabledRules ) throws CLIArgumentParserException { \n\ttry { \n\t\tPrinter printer = new Printer ( inputFile , maxSeverity , formatter ) ; \n\t\tif ( optTokenStream . isPresent ( ) && optTree . isPresent ( ) ) { \n\t\t\tCommonTokenStream tokenStream = optTokenStream . get ( ) ; \n\t\t\tTopLevelContext tree = optTree . get ( ) ; \n\t\t\tCommentExtractor commentExtractor = new CommentExtractor ( tokenStream ) ; \n\t\t\tViolationSuppressor disableAnalysis = new ViolationSuppressor ( printer , commentExtractor . getSingleLineComments ( ) , commentExtractor . getMultilineComments ( ) ) ; \n\t\t\tdisableAnalysis . analyze ( ) ; \n\t\t\tList < SwiftBaseListener > listeners = createListeners ( enabledRules , printer , tokenStream , constructLengths , commentExtractor ) ; \n\t\t\twalkParseTree ( listeners , tree ) ; \n\t\t\ttry ( FileListener fileListener = new FileListener ( printer , inputFile , constructLengths , enabledRules ) ) { \n\t\t\t\tfileListener . verify ( ) ; \n\t\t\t\t} \n\t\t\tnumErrors . addAndGet ( printer . getNumErrorMessages ( ) ) ; \n\t\t\tnumWarnings . addAndGet ( printer . getNumWarningMessages ( ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tprinter . setShouldPrintParseErrorMessage ( _BOOL ) ; \n\t\t\t} \n\t\tprintersForAllFiles . add ( printer ) ; \n\t\t} \n\t$F52544 ( handleIOException , e ) catch ( CLIArgumentParserException e ) { \n\t\thandleCLIException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "$F1431 public static < ValueT > ValueT toObject ( ByteBuffer bf ) throws $F6427 { \n\tObject obj = null ; \n\tInputStream is = null ; \n\tObjectInputStream ois = null ; \n\ttry { \n\t\tis = new ByteBufferBackedInputStream ( bf ) ; \n\t\t$F14589 ( ois , is ) $F215455 ( obj , ois ) } \n\t$F85840 ( is , ois ) return ( ValueT ) obj ; \n\t} \n"}, {"code": "static private void scanDeadlineQueue ( final long nowNanos , final PriorityBlockingQueue < QueryDeadline > deadlineQueue ) { \n\tfinal List < QueryDeadline > c = new ArrayList < QueryDeadline > ( DEADLINE_QUEUE_SCAN_SIZE ) ; \n\tdeadlineQueue . drainTo ( c , DEADLINE_QUEUE_SCAN_SIZE ) ; \n\tint ndropped = NUM00 , nrunning = NUM00 ; \n\tfor ( QueryDeadline x : c ) { \n\t\tif ( x . checkDeadline ( nowNanos ) != null ) $F107337 ( deadlineQueue , x , nrunning ) else { \n\t\t\tndropped ++ ; \n\t\t\t} \n\t\t} \n\tif $F17747 ( log ) log . info ( NUM00 + DEADLINE_QUEUE_SCAN_SIZE + NUM00 + ndropped + NUM00 + nrunning + NUM00 + deadlineQueue . size ( ) ) ; \n\t} \n"}, {"code": "public int compare ( File file1 , File file2 ) { \n\treturn caseSensitivity . checkCompareTo ( $F66558 ( file1 , file2 ) ) ; \n\t} \n"}, {"code": "$F1 public String lastString $F72 $F23210 ( Integer , lastint ) "}, {"code": "public boolean removeItemContent ( String uid ) { \n\tif $F5973 ( users ) $F8587 ( removeContent , uid , users ) else if $F5973 ( reports ) $F8587 ( removeContent , uid , reports ) else $F8587 ( removeContent , uid , resources ) } \n"}, {"code": "public void close $F72 { \n\tif ( dialog != null ) { \n\t\tdialog . setVisible ( _BOOL ) ; \n\t\t$F355 ( dialog ) dialog = null ; \n\t\tpane = null ; \n\t\tmyBar = null ; \n\t\t} \n\t} \n"}, {"code": "public static void expandOrdinal ( String rawNumberString , WordRelation wordRelation ) { \n\tString numberString = Utilities . deleteChar ( rawNumberString , NUM00 ) ; \n\texpandNumber ( numberString , wordRelation ) ; \n\tItem lastItem = wordRelation . getTail ( ) ; \n\tif ( lastItem != null ) { \n\t\t$F85094 ( featureSet , lastItem ) $F21024 ( lastNumber , featureSet ) String ordinal = findMatchInArray ( lastNumber , digit2num , ord2num ) ; \n\t\t$F63621 ( ordinal , findMatchInArray , lastNumber , digit2teen , ord2teen ) $F63621 ( ordinal , findMatchInArray , lastNumber , digit2enty , ord2enty ) if $F3057 ( lastNumber ) { \n\t\t\tordinal = NUM00 ; \n\t\t\t} \n\t\telse if $F3057 ( lastNumber ) { \n\t\t\tordinal = NUM00 ; \n\t\t\t} \n\t\telse if $F3057 ( lastNumber ) { \n\t\t\tordinal = NUM00 ; \n\t\t\t} \n\t\tif ( ordinal != null ) { \n\t\t\twordRelation . setLastWord ( ordinal ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void checkBoundedTypeParameter ( Method method ) { \n\t$F91854 ( typeParameter , getTypeParameter , method ) $F64976 ( assertEquals , typeParameter ) $F91862 ( assertEquals , method , typeParameter ) $F24901 bounds = typeParameter . getBounds ( ) ; \n\tassertLenghtOne ( bounds ) ; \n\tType bound = bounds [ NUM00 ] ; \n\tassertEquals ( BoundedWildcardsGenericMethods . class , bound ) ; \n\t} \n"}, {"code": "public void registerSensor ( Sensor s , int i ) { \n\tif ( ( i < NUM00 ) || ( i > ( inputBits [ nodeType ] - NUM00 ) ) || ( i > MAXSENSORS ) ) { \n\t\tlog . error ( NUM00 + Integer . toString ( i + NUM00 ) ) ; \n\t\t$F665 } \n\thasActiveSensors = _BOOL ; \n\tif ( sensorArray [ i ] == null ) { \n\t\tsensorArray [ i ] = s ; \n\t\t$F8790 ( lastUsedSensor , i ) } \n\telse { \n\t\tlog . warn ( NUM00 + Integer . toString ( ( getNodeAddress ( ) * SerialSensorManager . SENSORSPERNODE ) + i + NUM00 ) ) ; \n\t\t} \n\t} \n"}, {"code": "public boolean hasOrganisationUnits $F72 { \n\t$F200953 dimOpts = getDimensionOptions ( ORGUNIT_DIM_ID ) ; \n\t$F200953 filterOpts = getFilterOptions ( ORGUNIT_DIM_ID ) ; \n\treturn $F123850 ( dimOpts , filterOpts ) ; \n\t} \n"}, {"code": "protected void fixupBlocks $F97 ( bytes2 ) { \n\t$F96 bytes = bytes2 ; \n\tfor ( $F2774 ( enumerator , blocks ) ) { \n\t\t$F2027 info = ( $F2027 ) enumerator . next ( ) ; \n\t\tint codeSize = info [ NUM00 ] ; \n\t\tint offset = info [ NUM00 ] ; \n\t\t$F96 sizeBytes = OutStream . sintTo2Bytes ( codeSize ) ; \n\t\tbytes [ offset ] = sizeBytes [ NUM00 ] ; \n\t\t$F76497 ( bytes , offset , sizeBytes ) } \n\t} \n"}, {"code": "protected double negativeLogLikelihood $F219838 ( dataYs , probs ) { \n\tdouble logLikelihood = NUM00 ; \n\tfor ( $F1139 ( i , dataYs ) ) { \n\t\tfor ( $F119 ( j , m_numClasses ) ) { \n\t\t\tif ( dataYs [ i ] [ j ] == NUM00 ) { \n\t\t\t\tlogLikelihood -= Math . log ( probs [ i ] [ j ] ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn logLikelihood ; \n\t} \n"}, {"code": "public static boolean validSystemNameConfig ( String systemName , char type , AcelaSystemConnectionMemo memo ) { \n\tif ( ! validSystemNameFormat ( systemName , type , memo . getSystemPrefix ( ) ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tAcelaNode node = getNodeFromSystemName ( systemName , memo ) ; \n\t$F1933 ( node , _BOOL ) int bit = getBitFromSystemName ( systemName ) ; \n\tif $F34322 ( type ) { \n\t\tif $F61167 ( bit , MINOUTPUTADDRESS , MAXOUTPUTADDRESS ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\telse if ( type == NUM00 ) { \n\t\tif $F61167 ( bit , MINSENSORADDRESS , MAXSENSORADDRESS ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\telse $F24275 ( log , _BOOL ) return _BOOL ; \n\t} \n"}, {"code": "public void readEncryptionObject ( final PdfObject encyptionObj , final PdfFileReader pdfFileReader ) throws PdfSecurityException { \n\tstringsEncoded = _BOOL ; \n\tisMetaDataEncypted = _BOOL ; \n\tStmFObj = null ; \n\tStrFObj = null ; \n\tisAES = _BOOL ; \n\tif ( ! isInitialised ) { \n\t\tisInitialised = _BOOL ; \n\t\t$F10089 ( SetSecurity ) } \n\tif ( SetSecurity . useBouncyCastle ) { \n\t\tdecryptionMethods = new BouncyCastleDecryption $F72 ; \n\t\t} \n\telse { \n\t\tdecryptionMethods = new JCADecryption $F72 ; \n\t\t} \n\tfinal int v = encyptionObj . getInt ( PdfDictionary . V ) ; \n\tfinal PdfArrayIterator filters = encyptionObj . getMixedArray ( PdfDictionary . Filter ) ; \n\tint firstValue = PdfDictionary . Standard ; \n\tif ( filters != null && filters . hasMoreTokens ( ) ) { \n\t\tfirstValue = filters . getNextValueAsConstant ( _BOOL ) ; \n\t\t} \n\tif ( v == NUM00 ) { \n\t\tthrow new PdfSecurityException $F580 ; \n\t\t} \n\telse if ( ( v > NUM00 ) && ( firstValue != PdfDictionary . Standard ) ) { \n\t\tthrow new PdfSecurityException $F580 ; \n\t\t} \n\tfinal int newLength = encyptionObj . getInt ( PdfDictionary . Length ) > > NUM00 ; \n\tif ( newLength != - NUM00 ) { \n\t\tthis . keyLength = newLength ; \n\t\t} \n\trev = encyptionObj . getInt ( PdfDictionary . R ) ; \n\tP = encyptionObj . getInt ( PdfDictionary . P ) ; \n\tO = encyptionObj . getTextStreamValueAsByte ( PdfDictionary . O ) ; \n\tU = encyptionObj . getTextStreamValueAsByte ( PdfDictionary . U ) ; \n\tOE = encyptionObj . getTextStreamValueAsByte ( PdfDictionary . OE ) ; \n\tUE = encyptionObj . getTextStreamValueAsByte ( PdfDictionary . UE ) ; \n\tPerms = encyptionObj . getTextStreamValueAsByte ( PdfDictionary . Perms ) ; \n\tif ( v >= NUM00 ) { \n\t\tisAES = _BOOL ; \n\t\tString CFkey ; \n\t\tfinal PdfObject CF = encyptionObj . getDictionary ( PdfDictionary . CF ) ; \n\t\tif ( v == NUM00 ) { \n\t\t\tisMetaDataEncypted = encyptionObj . getBoolean ( PdfDictionary . EncryptMetadata ) ; \n\t\t\t} \n\t\tisAESIdentity = _BOOL ; \n\t\tString key = encyptionObj . getName ( PdfDictionary . StrF ) ; \n\t\tif ( key != null ) { \n\t\t\tisAESIdentity = key . equals ( NUM00 ) ; \n\t\t\tstringsEncoded = _BOOL ; \n\t\t\tfinal PdfKeyPairsIterator keyPairs = CF . getKeyPairsIterator ( ) ; \n\t\t\twhile ( keyPairs . hasMorePairs ( ) ) { \n\t\t\t\tCFkey = keyPairs . getNextKeyAsString ( ) ; \n\t\t\t\tif $F1238 ( CFkey , key ) { \n\t\t\t\t\tStrFObj = PdfObjectFactory . getPDFObjectObjectFromRefOrDirect ( new EncryptionObject ( encyptionObj . getObjectRefAsString ( ) ) , pdfFileReader , keyPairs . getNextValueAsBytes ( ) , PdfDictionary . CF ) ; \n\t\t\t\t\t} \n\t\t\t\tkeyPairs . nextPair ( ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tkey = encyptionObj . getName ( PdfDictionary . StmF ) ; \n\t\tif ( key != null ) { \n\t\t\tisAESIdentity = key . equals ( NUM00 ) ; \n\t\t\tfinal PdfKeyPairsIterator keyPairs = CF . getKeyPairsIterator ( ) ; \n\t\t\twhile ( keyPairs . hasMorePairs ( ) ) { \n\t\t\t\tCFkey = keyPairs . getNextKeyAsString ( ) ; \n\t\t\t\tif $F1238 ( CFkey , key ) { \n\t\t\t\t\tStmFObj = PdfObjectFactory . getPDFObjectObjectFromRefOrDirect ( new EncryptionObject ( encyptionObj . getObjectRefAsString ( ) ) , pdfFileReader , keyPairs . getNextValueAsBytes ( ) , PdfDictionary . CF ) ; \n\t\t\t\t\t} \n\t\t\t\tkeyPairs . nextPair ( ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tisEncrypted = _BOOL ; \n\tisFileViewable = _BOOL ; \n\tLogWriter . writeLog ( NUM00 ) ; \n\tif ( firstValue == PdfDictionary . Standard ) { \n\t\ttry $F5795 ( verifyAccess ) catch ( final PdfSecurityException e ) { \n\t\t\tLogWriter . writeLog ( NUM00 + e ) ; \n\t\t\t} \n\t\t} \n\telse if ( certificate != null ) { \n\t\tisFileViewable = _BOOL ; \n\t\tisPasswordSupplied = _BOOL ; \n\t\textractionIsAllowed = _BOOL ; \n\t\tpasswordStatus = PDFflags . VALID_OWNER_PASSWORD ; \n\t\t} \n\tif ( rev == NUM00 ) { \n\t\tPerms = v5Decrypt ( Perms , encryptionKey ) ; \n\t\tisMetaDataEncypted = Perms [ NUM00 ] == NUM00 ; \n\t\tP = $F358766 ( Perms ) | $F257715 ( Perms ) | $F257715 ( Perms ) ; \n\t\t} \n\t} \n"}, {"code": "public void addMember ( String playerName ) { \n\topenInvites . remove ( playerName ) ; \n\tmembersAndLastSeen . put ( playerName , $F258568 ( Long , System ) ) ; \n\t$F13265 ( leader , playerName ) sendGroupChangeEvent ( ) ; \n\t} \n"}, {"code": "public BubbleXYItemLabelGenerator $F72 { \n\tthis ( DEFAULT_FORMAT_ <missing ';'> NUM00 , NumberFormat . getNumberInstance ( ) , NumberFormat . getNumberInstance ( ) , NumberFormat . getNumberInstance ( ) ) ; \n\t} \n"}, {"code": "void addNodes ( $F27878 newNodes , boolean atBeginning ) { \n\tif ( atBeginning ) { \n\t\tif ( $F3817 ( nodes ) && nodes . get ( NUM00 ) == $F7661 ( newNodes ) ) { \n\t\t\t$F1594 ( Log , DEBUG_TAG ) if $F3817 ( newNodes ) { \n\t\t\t\t$F1594 ( Log , DEBUG_TAG ) $F30606 ( newNodes ) addNodes ( newNodes , atBeginning ) ; \n\t\t\t\t} \n\t\t\t$F665 } \n\t\t$F177656 ( nodes , newNodes ) } \n\telse { \n\t\tif ( $F3817 ( nodes ) && newNodes . get ( NUM00 ) == $F7661 ( nodes ) ) { \n\t\t\t$F1594 ( Log , DEBUG_TAG ) if $F3817 ( newNodes ) { \n\t\t\t\t$F1594 ( Log , DEBUG_TAG ) $F86372 ( newNodes ) addNodes ( newNodes , atBeginning ) ; \n\t\t\t\t} \n\t\t\t$F665 } \n\t\tnodes . addAll ( newNodes ) ; \n\t\t} \n\t} \n"}, {"code": "public synchronized Boolean updateAVClientByStreamId ( String streamId , RoomClient rcm ) { \n\ttry { \n\t\tRoomClient rclUsual = getClientByPublicSID ( rcm . getPublicSID ( ) , _BOOL ) ; \n\t\tif ( rclUsual != null ) { \n\t\t\trclUsual . setBroadCastID ( rcm . getBroadCastID ( ) ) ; \n\t\t\trclUsual . setAvsettings ( rcm . getAvsettings ( ) ) ; \n\t\t\trclUsual . setVHeight ( rcm . getVHeight ( ) ) ; \n\t\t\trclUsual . setVWidth ( rcm . getVWidth ( ) ) ; \n\t\t\trclUsual . setVX ( rcm . getVX ( ) ) ; \n\t\t\trclUsual . setVY ( rcm . getVY ( ) ) ; \n\t\t\tif ( clientList . containsKey ( rclUsual . getStreamid ( ) ) ) { \n\t\t\t\tclientList . put ( rclUsual . getStreamid ( ) , rclUsual ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tlog . debug ( NUM00 + rclUsual . getStreamid ( ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tupdateClientByStreamId ( streamId , rcm ) ; \n\t\t} \n\t$F9877 ( log , err ) $F1274 } \n"}, {"code": "public void addColor ( int color ) { \n\tif ( mColors == null ) $F117818 ( mColors ) mColors . add ( color ) ; \n\t} \n"}, {"code": "private void clampStartingPosition $F72 { \n\tfinal float cX = mBounds . exactCenterX ( ) ; \n\tfinal float cY = mBounds . exactCenterY ( ) ; \n\tfinal float dX = mStartingX - cX ; \n\tfinal float dY = mStartingY - cY ; \n\tfinal float r = mTargetRadius ; \n\tif ( dX * dX + dY * dY > r * r ) { \n\t\tfinal double angle = Math . atan2 ( dY , dX ) ; \n\t\tmClampedStartingX = cX + ( float ) ( Math . cos ( angle ) * r ) ; \n\t\tmClampedStartingY = cY + ( float ) ( Math . sin ( angle ) * r ) ; \n\t\t} \n\telse { \n\t\tmClampedStartingX = mStartingX ; \n\t\tmClampedStartingY = mStartingY ; \n\t\t} \n\t} \n"}, {"code": "$F32632 ( criteria , createCriteriaInternal , oredCriteria ) "}, {"code": "public boolean isEmpty $F72 { \n\tif ( lastBatch != null ) { \n\t\t$F77773 ( lastBatch , _BOOL ) } \n\t$F18904 ( currentBatch ) } \n"}, {"code": "$F1431 public DummyData ( int cols , int rows , $F65474 value ) { \n\tvalue . getClass ( ) ; \n\tthis . cols = cols ; \n\tthis . rows = rows ; \n\tthis . value = value ; \n\tClass $F195402 [ ] types = new Class [ cols ] ; \n\tArrays . fill ( types , value . getClass ( ) ) ; \n\tsetColumnTypes ( types ) ; \n\t} \n"}, {"code": "public Object clone $F72 throws CloneNotSupportedException { \n\tNodeVector clone = ( NodeVector ) super . clone ( ) ; \n\tif ( ( null != this . m_map ) && ( this . m_map == clone . m_map ) ) { \n\t\tclone . m_map = new int [ this . m_map . length ] ; \n\t\tSystem . arraycopy ( this . m_map , NUM00 , clone . m_map , NUM00 , this . m_map . length ) ; \n\t\t} \n\treturn clone ; \n\t} \n"}, {"code": "public boolean matchWithPattern ( String pattern ) { \n\tif $F4329 ( TextUtils , pattern ) $F255219 ( mCurrentPattern , mUpperCasePattern , mLowerCasePattern ) $F46019 ( TextUtils , mDisplayName , _BOOL ) if $F4329 ( TextUtils , mUpperCaseDisplayName ) { \n\t\t$F21936 ( mUpperCaseDisplayName , mDisplayName ) mLowerCaseDisplayName = mDisplayName . toUpperCase ( ) ; \n\t\t} \n\tif $F2137 ( pattern , mCurrentPattern ) { \n\t\tmCurrentPattern = pattern ; \n\t\tmUpperCasePattern = pattern . toUpperCase ( ) ; \n\t\t$F21936 ( mLowerCasePattern , pattern ) } \n\treturn $F358955 ( mUpperCaseDisplayName , mUpperCasePattern ) || $F358955 ( mLowerCaseDisplayName , mUpperCasePattern ) ; \n\t} \n"}, {"code": "public boolean equals ( Object obj ) { \n\t$F3627 ( obj , this , _BOOL ) if ( obj instanceof AnnotationMember ) { \n\t\tAnnotationMember that = ( AnnotationMember ) obj ; \n\t\tif ( $F43168 ( name , that , tag ) ) { \n\t\t\tif ( tag == ARRAY ) { \n\t\t\t\treturn equalArrayValue ( that . value ) ; \n\t\t\t\t} \n\t\t\telse if ( tag == ERROR ) { \n\t\t\t\treturn _BOOL ; \n\t\t\t\t} \n\t\t\telse $F12739 ( value , that ) } \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public int hleJpegDecodeYCbCr ( BufferedImage bufferedImage , TPointer yCbCrBuffer , int yCbCrBufferSize , int dhtMode ) { \n\t$F2049 ( width , bufferedImage ) $F2047 ( height , bufferedImage ) int sizeY = width * height ; \n\tint sizeCb = sizeY > > NUM00 ; \n\tint addressY = yCbCrBuffer . getAddress ( ) ; \n\tint addressCb = addressY + sizeY ; \n\tint addressCr = addressCb + sizeCb ; \n\tif $F585 ( log ) { \n\t\tlog . debug ( String . format ( NUM00 , addressY , addressCb , addressCr ) ) ; \n\t\t} \n\t$F4120 ( bufferCb , sizeCb ) $F4120 ( bufferCr , sizeCb ) IMemoryWriter imageWriterY = MemoryWriter . getMemoryWriter ( addressY , sizeY , NUM00 ) ; \n\tfor ( $F119 ( y , height ) ) { \n\t\tint indexCb = ( y > > NUM00 ) * ( width > > NUM00 ) ; \n\t\tfor ( int x = NUM00 ; \n\t\tx < width ; \n\t\tx += NUM00 , indexCb ++ ) { \n\t\t\tint argb0 = bufferedImage . getRGB ( x , y ) ; \n\t\t\tint yCbCr0 = colorARGBToYCbCr ( argb0 ) ; \n\t\t\tint argb1 = bufferedImage . getRGB ( x + NUM00 , y ) ; \n\t\t\tint yCbCr1 = colorARGBToYCbCr ( argb1 ) ; \n\t\t\timageWriterY . writeNext ( getY ( yCbCr0 ) ) ; \n\t\t\timageWriterY . writeNext ( getY ( yCbCr1 ) ) ; \n\t\t\tbufferCb [ indexCb ] += getCb ( yCbCr0 ) ; \n\t\t\tbufferCb [ indexCb ] += getCb ( yCbCr1 ) ; \n\t\t\tbufferCr [ indexCb ] += getCr ( yCbCr0 ) ; \n\t\t\tbufferCr [ indexCb ] += getCr ( yCbCr1 ) ; \n\t\t\t} \n\t\t} \n\t$F1206 ( imageWriterY ) IMemoryWriter imageWriterCb = MemoryWriter . getMemoryWriter ( addressCb , sizeCb , NUM00 ) ; \n\tIMemoryWriter imageWriterCr = MemoryWriter . getMemoryWriter ( addressCr , sizeCb , NUM00 ) ; \n\tfor ( $F119 ( i , sizeCb ) ) { \n\t\timageWriterCb . writeNext ( bufferCb [ i ] > > NUM00 ) ; \n\t\timageWriterCr . writeNext ( bufferCr [ i ] > > NUM00 ) ; \n\t\t} \n\t$F1206 ( imageWriterCb ) $F1206 ( imageWriterCr ) return getWidthHeight ( width , height ) ; \n\t} \n"}, {"code": "public static Range iterateZBounds ( XYZDataset dataset , boolean includeInterval ) { \n\tdouble minimum = Double . POSITIVE_INFINITY ; \n\tdouble maximum = Double . NEGATIVE_INFINITY ; \n\t$F36951 ( seriesCount , dataset ) for ( $F119 ( series , seriesCount ) ) { \n\t\t$F19407 ( itemCount , dataset , series ) for ( $F119 ( item , itemCount ) ) { \n\t\t\tdouble value = dataset . getZValue ( series , item ) ; \n\t\t\t$F19412 ( Double , value , minimum , Math , maximum ) } \n\t\t} \n\tif ( minimum == Double . POSITIVE_INFINITY ) $F1337 else $F19420 ( minimum , maximum ) } \n"}, {"code": "public void removeViewFromFadeList ( View view ) { \n\tif ( mFadeViewList != null && view != null ) $F106 ( mFadeViewList , view ) } \n"}, {"code": "void addIndifferentAlgorithm ( String algorithm ) $F207 ( indifferentAlgorithms , algorithm ) "}, {"code": "public UnionIterator ( Iterable $F22448 ... args ) $F81861 ( this , Arrays , args ) "}, {"code": "public static String mangleNativeMethod $F1947 ( owner , name , desc ) { \n\t$F83 ( sb ) $F84 ( sb ) $F6407 ( sb , mangleNativeString , owner ) $F84 ( sb ) $F6407 ( sb , mangleNativeString , name ) if ( desc != null ) { \n\t\t$F84 ( sb ) sb . append ( mangleNativeString ( $F129389 ( desc ) ) ) ; \n\t\t} \n\t$F92 ( sb ) } \n"}, {"code": "public String readLine $F72 throws IOException { \n\tboolean gotCR = _BOOL , gotLF = _BOOL ; \n\tpos = NUM00 ; \n\t$F7398 ( lineBuf ) while ( ! gotLF ) { \n\t\t$F7468 ( c , is ) $F132643 ( c ) if ( gotCR ) { \n\t\t\tif ( c == LF ) { \n\t\t\t\tgotLF = _BOOL ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tgotCR = _BOOL ; \n\t\t\t\tconsume ( CR ) ; \n\t\t\t\tconsume ( c ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tif ( c == CR ) { \n\t\t\t\tgotCR = _BOOL ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tconsume ( c ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F58551 ( lineBuf , buf , pos ) $F22269 ( lineBuf ) } \n"}, {"code": "public LobbyClient login $F72 { \n\tif ( ! m_serverProperties . isServerAvailable ( ) ) { \n\t\tJOptionPane . showMessageDialog ( m_parent , m_serverProperties . serverErrorMessage , NUM00 , JOptionPane . ERROR_MESSAGE ) ; \n\t\t$F1274 } \n\tif ( m_serverProperties . port == - NUM00 ) { \n\t\tif ( ClientFileSystemHelper . areWeOldExtraJar ( ) ) { \n\t\t\tJOptionPane . showMessageDialog ( m_parent , NUM00 + UrlConstants . LATEST_GAME_DOWNLOAD_WEBSITE + NUM00 + NUM00 , NUM00 , JOptionPane . ERROR_MESSAGE ) ; \n\t\t\t} \n\t\telse { \n\t\t\tJOptionPane . showMessageDialog ( m_parent , NUM00 + UrlConstants . LATEST_GAME_DOWNLOAD_WEBSITE + NUM00 , NUM00 , JOptionPane . ERROR_MESSAGE ) ; \n\t\t\t} \n\t\t$F1274 } \n\treturn loginToServer ( ) ; \n\t} \n"}, {"code": "$F1 public boolean eIsSet ( int featureID ) { \n\tswitch ( featureID ) { \n\t\tcase FunctionblockPackage . PARAM__MULTIPLICITY : return multiplicity != MULTIPLICITY_EDEFAULT ; \n\t\tcase FunctionblockPackage . PARAM__NAME : $F6439 ( NAME_EDEFAULT , name ) case FunctionblockPackage . PARAM__DESCRIPTION : $F6439 ( DESCRIPTION_EDEFAULT , description ) } \n\t$F6444 ( super , featureID ) } \n"}, {"code": "protected Node popNode ( Stack $F6869 stack , Class < ? extends Node > cls , String uri ) { \n\tNode top = stack . isEmpty ( ) ? null : stack . peek ( ) ; \n\tif ( top != null ) { \n\t\tif ( nodeMatches ( top , cls , uri ) ) { \n\t\t\tNode node = stack . pop ( ) ; \n\t\t\tpoppedNodes . push ( node ) ; \n\t\t\treturn node ; \n\t\t\t} \n\t\telse { \n\t\t\tfor ( $F5373 ( i , stack ) ) { \n\t\t\t\tif ( nodeMatches ( stack . get ( i ) , cls , uri ) ) { \n\t\t\t\t\tNode node = stack . remove ( i ) ; \n\t\t\t\t\tpoppedNodes . push ( node ) ; \n\t\t\t\t\treturn node ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F1274 } \n"}, {"code": "static String pathToCookiePath ( String path ) { \n\t$F4158 ( path ) $F24867 ( lastSlash , path ) return $F1399 ( path , lastSlash ) ; \n\t} \n"}, {"code": "public static $F3789 computeWeightMatrix ( int bpp ) { \n\tfinal int dim = bpp * bpp * bpp ; \n\tfinal $F3789 m = new double [ dim ] [ dim ] ; \n\tfinal double max = NUM00 * ( bpp - NUM00 ) ; \n\tfor ( $F119 ( x , dim ) ) { \n\t\tfinal int rx = ( x / bpp ) / bpp ; \n\t\tfinal int gx = ( x / bpp ) % bpp ; \n\t\tfinal int bx = x % bpp ; \n\t\tfor ( int y = x ; \n\t\ty < dim ; \n\t\ty ++ ) { \n\t\t\tfinal int ry = ( y / bpp ) / bpp ; \n\t\t\tfinal int gy = ( y / bpp ) % bpp ; \n\t\t\tfinal int by = y % bpp ; \n\t\t\tfinal double dr = Math . abs ( rx - ry ) ; \n\t\t\tfinal double dg = Math . abs ( gx - gy ) ; \n\t\t\tfinal double db = Math . abs ( bx - by ) ; \n\t\t\tfinal double val = NUM00 - ( dr + dg + db ) / max ; \n\t\t\tm [ x ] [ y ] = m [ y ] [ x ] = val ; \n\t\t\t} \n\t\t} \n\treturn m ; \n\t} \n"}, {"code": "public boolean moveEntry ( User user , Entry entry , String direction , boolean isAdmin , Errors errors ) { \n\tif ( direction == null ) { \n\t\tErrors . add ( errors , errorMessages . errorDirectionIsNull ( ) ) ; \n\t\treturn _BOOL ; \n\t\t} \n\tif ( entry == null ) { \n\t\tErrors . add ( errors , errorMessages . errorEntryIsNull ( ) ) ; \n\t\treturn _BOOL ; \n\t\t} \n\tif ( ! canUserModifyEntry ( user , entry , isAdmin ) ) { \n\t\tErrors . add ( errors , errorMessages . errorUserIsNotEntitledToMoveTheEntry ( ) ) ; \n\t\treturn _BOOL ; \n\t\t} \n\tfinal String parentId = entry . getParentId ( ) ; \n\tString parentFirstChildId = null ; \n\tString parentLastChildId = null ; \n\tfinal Entry parent = getEntryById ( parentId ) ; \n\tif ( parent == null ) { \n\t\tErrors . add ( errors , errorMessages . errorTheEntryHadNoParentSoItCouldNotBeMoved ( ) ) ; \n\t\treturn _BOOL ; \n\t\t} \n\tparentFirstChildId = parent . getFirstChildId ( ) ; \n\tparentLastChildId = parent . getLastChildId ( ) ; \n\tif $F3057 ( direction ) { \n\t\tfinal String previousId = entry . getPreviousSiblingId ( ) ; \n\t\tif ( previousId == null ) { \n\t\t\tErrors . add ( errors , errorMessages . errorThereIsNoEntryToMoveBefore ( ) ) ; \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\tfinal Entry previous = getEntryById ( previousId ) ; \n\t\tfinal String previousPreviousId = previous . getPreviousSiblingId ( ) ; \n\t\tif ( previousPreviousId != null ) { \n\t\t\tfinal Entry previousPrevious = getEntryById ( previousPreviousId ) ; \n\t\t\tif ( previousPrevious != null ) { \n\t\t\t\tpreviousPrevious . setNextSiblingId ( entry . getId ( ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tfinal String nextId = entry . getNextSiblingId ( ) ; \n\t\tif ( nextId != null ) { \n\t\t\tfinal Entry next = getEntryById ( nextId ) ; \n\t\t\tif ( next != null ) { \n\t\t\t\tnext . setPreviousSiblingId ( previousId ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tentry . setPreviousSiblingId ( previousPreviousId ) ; \n\t\tentry . setNextSiblingId ( previousId ) ; \n\t\tprevious . setPreviousSiblingId ( entry . getId ( ) ) ; \n\t\tprevious . setNextSiblingId ( nextId ) ; \n\t\tif ( $F18218 ( parentFirstChildId , previousId ) ) { \n\t\t\tparent . setFirstChildId ( entry . getId ( ) ) ; \n\t\t\t} \n\t\tif ( parentLastChildId != null && $F140091 ( parentLastChildId , entry ) ) { \n\t\t\tparent . setLastChildId ( previousId ) ; \n\t\t\t} \n\t\t} \n\telse if $F3057 ( direction ) { \n\t\tfinal String nextId = entry . getNextSiblingId ( ) ; \n\t\tif ( nextId == null ) { \n\t\t\tErrors . add ( errors , errorMessages . errorThereIsNoEntryToMoveAfter ( ) ) ; \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\tfinal Entry next = getEntryById ( nextId ) ; \n\t\tfinal String nextNextId = next . getNextSiblingId ( ) ; \n\t\tif ( nextNextId != null ) { \n\t\t\tfinal Entry nextNext = getEntryById ( nextNextId ) ; \n\t\t\tif ( nextNext != null ) { \n\t\t\t\tnextNext . setPreviousSiblingId ( entry . getId ( ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tfinal String previousId = entry . getPreviousSiblingId ( ) ; \n\t\tif ( previousId != null ) { \n\t\t\tfinal Entry previous = getEntryById ( previousId ) ; \n\t\t\tif ( previousId != null ) { \n\t\t\t\tprevious . setNextSiblingId ( nextId ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tentry . setPreviousSiblingId ( nextId ) ; \n\t\tentry . setNextSiblingId ( nextNextId ) ; \n\t\tnext . setPreviousSiblingId ( previousId ) ; \n\t\tnext . setNextSiblingId ( entry . getId ( ) ) ; \n\t\tif ( parentFirstChildId != null && $F140091 ( parentFirstChildId , entry ) ) { \n\t\t\tparent . setFirstChildId ( nextId ) ; \n\t\t\t} \n\t\tif ( $F18218 ( parentLastChildId , nextId ) ) { \n\t\t\tparent . setLastChildId ( entry . getId ( ) ) ; \n\t\t\t} \n\t\t} \n\telse if $F3057 ( direction ) { \n\t\tfinal String parentParentId = parent . getParentId ( ) ; \n\t\tif ( parentParentId == null ) { \n\t\t\tErrors . add ( errors , errorMessages . errorThereIsNoParentOfTheParent ( ) ) ; \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\tsnipOutEntry ( entry , parent , _BOOL ) ; \n\t\tinsertEntryAfter ( entry , parent , _BOOL ) ; \n\t\t} \n\telse if $F3057 ( direction ) { \n\t\tfinal String previousId = entry . getPreviousSiblingId ( ) ; \n\t\tif ( previousId == null ) { \n\t\t\tErrors . add ( errors , errorMessages . errorThereIsNoPreviousEntryToUseAsAParent ( ) ) ; \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\tsnipOutEntry ( entry , parent , _BOOL ) ; \n\t\tfinal Entry previous = getEntryById ( previousId ) ; \n\t\tfinal String previousLastChildId = previous . getLastChildId ( ) ; \n\t\tif ( previousLastChildId != null ) { \n\t\t\tfinal Entry previousLastChild = getEntryById ( previousLastChildId ) ; \n\t\t\tpreviousLastChild . setNextSiblingId ( entry . getId ( ) ) ; \n\t\t\t} \n\t\tentry . setPreviousSiblingId ( previousLastChildId ) ; \n\t\tentry . setNextSiblingId ( null ) ; \n\t\tprevious . setLastChildId ( entry . getId ( ) ) ; \n\t\tif ( ! previous . hasFirstChildId ( ) ) { \n\t\t\tprevious . setFirstChildId ( entry . getId ( ) ) ; \n\t\t\t} \n\t\tprevious . setLastChildId ( entry . getId ( ) ) ; \n\t\tentry . setParentId ( previous . getId ( ) ) ; \n\t\t} \n\telse { \n\t\tErrors . add ( errors , errorMessages . errorTheDirectionIsInvalid ( ) ) ; \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "private static boolean isGnome $F72 { \n\treturn System . getenv ( NUM00 ) != null ; \n\t} \n"}, {"code": "protected SizeRequirements calculateMajorAxisRequirements ( int axis , SizeRequirements r ) { \n\tSizeRequirements req = super . calculateMajorAxisRequirements ( axis , r ) ; \n\treq . maximum = Integer . MAX_VALUE ; \n\treturn req ; \n\t} \n"}, {"code": "$F1 public $F987 listOptions $F72 { \n\t$F994 ( newVector ) $F1000 ( newVector ) $F9007 ( newVector ) $F1006 ( newVector ) $F1000 ( newVector ) $F1007 ( newVector ) } \n"}, {"code": "public void addNodesInDocOrder ( DTMIterator iterator , XPathContext support ) { \n\tif ( ! m_mutable ) throw new RuntimeException ( XSLMessages . createXPATHMessage ( XPATHErrorResources . ER_NODESETDTM_NOT_MUTABLE , null ) ) ; \n\tint node ; \n\twhile ( DTM . NULL != $F161934 ( node , iterator ) ) { \n\t\taddNodeInDocOrder ( node , support ) ; \n\t\t} \n\t} \n"}, {"code": "public Map < String , List < RevisionFile > > currentRevisionFiles $F72 ; \n"}, {"code": "protected static $F7329 rorRegister $F7334 ( offset , environment , instructions , registerNodeValue1 , registerNodeValue2 ) { \n\t$F7336 ( shifterOperand , environment ) $F7336 ( shifterCarryOut , environment ) $F7336 ( tmpRsFour , environment ) $F7336 ( tmpRsFourNegative , environment ) $F7336 ( tmpRsSeven , environment ) $F7336 ( isZeroConditionFour , environment ) $F7336 ( isNotZeroConditionFour , environment ) $F7336 ( isZeroConditionSeven , environment ) $F7336 ( tmpVar1 , environment ) $F7336 ( tmpVar2 , environment ) $F7336 ( tmpVar3 , environment ) $F7336 ( tmpVar4 , environment ) $F7336 ( tmpVar5 , environment ) $F7336 ( tmpVar6 , environment ) $F7336 ( tmpVar7 , environment ) $F7336 ( tmpVar8 , environment ) $F7336 ( shifterCarryOutTmp1 , environment ) $F7336 ( shifterCarryOutTmp2 , environment ) $F7336 ( shifterCarryOutTmp3 , environment ) $F7336 ( shifterCarryOutTmp4 , environment ) long baseOffset = offset ; \n\tinstructions . add ( ReilHelpers . createAnd ( baseOffset ++ , dWordSize , registerNodeValue2 , dWordSize , String . valueOf ( NUM00 ) , dWordSize , tmpRsSeven ) ) ; \n\t$F453896 ( instructions , ReilHelpers , baseOffset , dWordSize , tmpRsSeven , byteSize , isZeroConditionSeven ) instructions . add ( ReilHelpers . createAnd ( baseOffset ++ , dWordSize , tmpRsSeven , dWordSize , String . valueOf ( NUM00 ) , dWordSize , tmpRsFour ) ) ; \n\t$F453896 ( instructions , ReilHelpers , baseOffset , dWordSize , tmpRsFour , byteSize , isZeroConditionFour ) instructions . add ( ReilHelpers . createBisz ( baseOffset ++ , byteSize , isZeroConditionFour , byteSize , isNotZeroConditionFour ) ) ; \n\tinstructions . add ( ReilHelpers . createSub ( baseOffset ++ , dWordSize , zeroSet , dWordSize , tmpRsFour , dWordSize , tmpRsFourNegative ) ) ; \n\tinstructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dWordSize , registerNodeValue1 , dWordSize , tmpRsFourNegative , dWordSize , tmpVar1 ) ) ; \n\tinstructions . add ( ReilHelpers . createSub ( baseOffset ++ , dWordSize , String . valueOf ( NUM00 ) , dWordSize , tmpRsFour , dWordSize , tmpVar2 ) ) ; \n\tinstructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dWordSize , registerNodeValue1 , dWordSize , tmpVar2 , dWordSize , tmpVar3 ) ) ; \n\t$F43825 ( instructions , ReilHelpers , baseOffset , dWordSize , tmpVar1 , tmpVar3 , tmpVar4 ) $F7341 ( instructions , ReilHelpers , baseOffset , dWordSize , tmpVar4 , bitMaskAllBitsSet , shifterOperand ) instructions . add ( ReilHelpers . createAnd ( baseOffset ++ , byteSize , NUM00 , byteSize , isZeroConditionSeven , byteSize , shifterCarryOutTmp1 ) ) ; \n\tinstructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dWordSize , registerNodeValue1 , dWordSize , minusThirtyOneSet , byteSize , tmpVar5 ) ) ; \n\t$F7341 ( instructions , ReilHelpers , baseOffset , byteSize , tmpVar5 , isZeroConditionFour , shifterCarryOutTmp2 ) instructions . add ( ReilHelpers . createSub ( baseOffset ++ , dWordSize , tmpRsFour , byteSize , oneSet , dWordSize , tmpVar6 ) ) ; \n\tinstructions . add ( ReilHelpers . createSub ( baseOffset ++ , dWordSize , zeroSet , dWordSize , tmpVar6 , dWordSize , tmpVar7 ) ) ; \n\tinstructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dWordSize , registerNodeValue1 , dWordSize , tmpVar7 , dWordSize , tmpVar8 ) ) ; \n\t$F7364 ( instructions , ReilHelpers , baseOffset , dWordSize , tmpVar8 , byteSize , isNotZeroConditionFour , shifterCarryOutTmp3 ) $F43825 ( instructions , ReilHelpers , baseOffset , byteSize , shifterCarryOutTmp1 , shifterCarryOutTmp2 , shifterCarryOutTmp4 ) $F43825 ( instructions , ReilHelpers , baseOffset , byteSize , shifterCarryOutTmp3 , shifterCarryOutTmp4 , shifterCarryOut ) $F7348 ( shifterOperand , shifterCarryOut ) } \n"}, {"code": "public static $F96 readFully ( InputStream in ) throws IOException { \n\t$F11452 ( readFullyNoClose , in ) } \n"}, {"code": "public void endSubreport ( String subreport ) { \n\tif $F2979 ( subreport ) { \n\t\t$F131438 ( LOG , String , subreport ) $F665 } \n\tString topSubreport = subreports . peek ( ) ; \n\tif $F1238 ( topSubreport , subreport ) { \n\t\t$F34454 ( subreports ) addLogEntry ( new SubreportEndEntry ( subreport ) ) ; \n\t\t$F665 } \n\t$F131438 ( LOG , String , subreport ) } \n"}, {"code": "public static double dnormLog $F7635 ( x , mean , sd ) { \n\tif ( sd <= NUM00 ) $F824 return - Math . log ( sd ) + dnormLog ( ( x - mean ) / sd ) ; \n\t} \n"}, {"code": "public static void delete ( File f ) { \n\tdelete_ ( f , _BOOL ) ; \n\t} \n"}, {"code": "public BufferedHeader ( final CharArrayBuffer buffer ) throws ParseException { \n\tsuper ( ) ; \n\t$F826 ( buffer ) $F1384 ( colon , buffer ) if ( colon == - NUM00 ) { \n\t\tthrow new ParseException $F3943 ( buffer ) ; \n\t\t} \n\tString s = buffer . substringTrimmed ( NUM00 , colon ) ; \n\tif $F1277 ( s ) { \n\t\tthrow new ParseException $F3943 ( buffer ) ; \n\t\t} \n\tthis . buffer = buffer ; \n\tthis . name = s ; \n\tthis . valuePos = colon + NUM00 ; \n\t} \n"}, {"code": "public boolean extendsEntity $F60993 ( entityDefinition ) { \n\treturn entityDefinition . getAnnotation ( ExtendsEntity . class ) != null ; \n\t} \n"}, {"code": "$F35762 ( newScrollValue , itemDimension , initialMotionValue , lastMotionValue , getPullToRefreshScrollDirection , HORIZONTAL , mInitialMotionX , mLastMotionX , VERTICAL , mInitialMotionY , mLastMotionY , mCurrentMode , PULL_FROM_END , Math , FRICTION , getFooterSize , PULL_FROM_START , getHeaderSize , setHeaderScroll , isRefreshing , scale , mFooterLayout , mHeaderLayout , mState , State , setState ) "}, {"code": "public void parse ( InputSource input ) throws $F35763 { \n\tif ( parsing ) $F268590 setupParser ( ) ; \n\tparsing = _BOOL ; \n\ttry { \n\t\tparser . parse ( input ) ; \n\t\t} \n\tfinally { \n\t\tparsing = _BOOL ; \n\t\t} \n\tparsing = _BOOL ; \n\t} \n"}, {"code": "private void release0 ( long ptr , long size , AtomicLong cnt ) { \n\tif ( ptr != NUM00 ) { \n\t\tif ( SAFE_RELEASE ) fill ( ptr , size , $F19905 ) ; \n\t\tGridUnsafe . freeMemory ( ptr ) ; \n\t\tcnt . addAndGet ( - size ) ; \n\t\tif ( lsnr != null ) lsnr . onEvent ( RELEASE ) ; \n\t\t} \n\t} \n"}, {"code": "public void addServices ( List < ServiceDefinition > services ) throws Exception { \n\tensurePathExists ( ) ; \n\t$F2689 remainingDescriptors = new $F9623 ( dataManager . getChildren ( ZK_SERVICE_DEFINITION_PATH ) ) ; \n\tfor ( ServiceDefinition service : services ) { \n\t\tLOG . debug ( String . format ( NUM00 , service . serviceId ) ) ; \n\t\tString path = getServiceDefinitionPath ( service . serviceId ) ; \n\t\ttry { \n\t\t\tStat before = dataManager . checkExists ( path ) ; \n\t\t\tdataManager . putData ( path , service ) ; \n\t\t\tStat after = dataManager . checkExists ( path ) ; \n\t\t\tnodeUpdated ( path , before , after ) ; \n\t\t\tremainingDescriptors . remove ( service . serviceId ) ; \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\tLOG . error ( String . format ( NUM00 , service . serviceId , path ) , e ) ; \n\t\t\tthrow e ; \n\t\t\t} \n\t\t} \n\tfor ( String descriptorName : remainingDescriptors ) { \n\t\t$F102990 ( LOG , String , descriptorName ) dataManager . removeNode ( ZK_SERVICE_DEFINITION_PATH + NUM00 + descriptorName ) ; \n\t\t} \n\t} \n"}, {"code": "protected void readProps $F72 { \n\tint count ; \n\tProperties props ; \n\tint i ; \n\tString itemStr ; \n\tT item ; \n\tm_IgnoreChanges = _BOOL ; \n\tprops = loadProps ( ) ; \n\tcount = Integer . parseInt ( props . getProperty ( expand ( getCountKey ( ) ) , NUM00 ) ) ; \n\t$F725 ( m_RecentItems ) for ( $F157662 ( i , count ) ) { \n\t\titemStr = props . getProperty ( getItemPrefix ( ) + i , NUM00 ) ; \n\t\tif $F4012 ( itemStr ) { \n\t\t\titem = fromString ( itemStr ) ; \n\t\t\tif ( check ( item ) ) addRecentItem ( item ) ; \n\t\t\t} \n\t\t} \n\tm_IgnoreChanges = _BOOL ; \n\t} \n"}, {"code": "public FormIndex stepIndexOut ( FormIndex index ) { \n\tif $F93782 ( index ) $F1337 else { \n\t\treturn new FormIndex ( stepIndexOut ( index . getNextLevel ( ) ) , index ) ; \n\t\t} \n\t} \n"}, {"code": "protected double kernelHelperLP ( int n , $F1469 s , int endIndexS , $F1469 t , int endIndexT , int remainingMatchLength ) { \n\tif ( n == NUM00 ) $F4915 ( getReturnValue , n ) if ( Math . min ( endIndexS + NUM00 , endIndexT + NUM00 ) < n ) { \n\t\t; \n\t\treturn getReturnValue ( n ) ; \n\t\t} \n\tif ( remainingMatchLength < NUM00 * n ) $F4915 ( getReturnValue , n ) int adr = NUM00 ; \n\tif ( m_useRecursionCache ) { \n\t\tadr = m_multX * n + m_multY * endIndexS + m_multZ * endIndexT + m_multZZ * remainingMatchLength ; \n\t\tif ( cachekh2K [ adr % maxCache ] == adr + NUM00 ) { \n\t\t\treturn cachekh2 [ adr % maxCache ] ; \n\t\t\t} \n\t\t} \n\tint rml = NUM00 ; \n\tdouble result = NUM00 ; \n\tfor ( int iS = ( endIndexS - remainingMatchLength ) ; \n\tiS <= endIndexS ; \n\tiS ++ ) { \n\t\tresult *= m_lambda ; \n\t\tresult += kernelHelper2LP ( n , s , iS , t , endIndexT , rml ++ ) ; \n\t\t} \n\tif ( m_useRecursionCache && endIndexS >= NUM00 && endIndexT >= NUM00 && n >= NUM00 ) { \n\t\tcachekhK [ adr % maxCache ] = adr + NUM00 ; \n\t\tcachekh [ adr % maxCache ] = result ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "$F1 protected synchronized void onMeasure ( int widthMeasureSpec , int heightMeasureSpec ) { \n\tint width = NUM00 ; \n\t$F136573 ( MeasureSpec , widthMeasureSpec , width ) $F2047 ( height , thumbImage ) $F136578 ( MeasureSpec , heightMeasureSpec , height , Math ) setMeasuredDimension ( width , height ) ; \n\t} \n"}, {"code": "public void start $F72 { \n\tcalculatePositionArray ( ) ; \n\tsetPreferredSize ( calculatePreferredSize ( ) ) ; \n\toffset = getWidth ( ) ; \n\ttimer = new Timer ( interval , this ) ; \n\t$F2346 ( timer ) } \n"}, {"code": "public static void writePlainFile $F84589 ( filePath , content ) throws IOException { \n\t$F4649 ( fileOuputStream , filePath ) fileOuputStream . write ( content ) ; \n\t$F59 ( fileOuputStream ) } \n"}, {"code": "public void transform ( AffineTransform at ) { \n\t$F83345 ( clip ) $F83345 ( clip ) $F83345 ( clip ) $F83345 ( clip ) at . transform ( clip , NUM00 , clip , NUM00 , NUM00 ) ; \n\tdouble xmin = clip [ NUM00 ] , ymin = clip [ NUM00 ] ; \n\tdouble xmax = clip [ NUM00 ] , ymax = clip [ NUM00 ] ; \n\tfor ( $F5151 ( i ) ) { \n\t\tif ( clip [ i ] < xmin ) xmin = clip [ i ] ; \n\t\tif ( clip [ i ] > xmax ) xmax = clip [ i ] ; \n\t\tif ( clip [ i + NUM00 ] < ymin ) ymin = clip [ i + NUM00 ] ; \n\t\tif ( clip [ i + NUM00 ] > ymax ) ymax = clip [ i + NUM00 ] ; \n\t\t} \n\tclip [ NUM00 ] = xmin ; \n\tclip [ NUM00 ] = ymin ; \n\tclip [ NUM00 ] = xmax ; \n\tclip [ NUM00 ] = ymax ; \n\t} \n"}, {"code": "$F1431 public boolean isPortableFilename ( String filename ) { \n\treturn ( filename . startsWith ( PROGRAM ) || filename . startsWith ( HOME ) || filename . startsWith ( PREFERENCES ) || filename . startsWith ( SCRIPTS ) || filename . startsWith ( PROFILE ) || filename . startsWith ( SETTINGS ) || filename . startsWith ( FILE ) || filename . startsWith ( RESOURCE ) ) ; \n\t} \n"}, {"code": "void configureBasicAuth ( HttpServerRequest serverRequest , HttpClientRequest httpClientRequest ) { \n\tfinal String authorization = serverRequest . getParam ( NUM00 ) ; \n\tif ( authorization != null ) { \n\t\thttpClientRequest . putHeader ( HttpHeaders . AUTHORIZATION , authorization ) ; \n\t\t} \n\t} \n"}, {"code": "public void rejectedExecution ( Runnable r , ThreadPoolExecutor e ) { \n\tif $F210917 ( e ) $F21688 ( r ) } \n"}, {"code": "public boolean nodeChange ( CatalogTreeNode node , String name ) { \n\tCatalogTreeNode cNode = getCorrespondingNode ( node ) ; \n\tcNode . setLeaves ( node . getLeaves ( ) ) ; \n\tAbstractCatalogTree tree = ( AbstractCatalogTree ) getCorespondingModel ( node ) ; \n\tcNode . setUserObject ( name ) ; \n\tnode . setUserObject ( name ) ; \n\ttree . nodeChanged ( cNode ) ; \n\t_model . nodeChanged ( node ) ; \n\tupdatePanel ( ) ; \n\tImageIndexEditor . indexChanged ( _BOOL ) ; \n\tupdatePanel ( ) ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static Enumeration all $F72 $F10806 ( _all ) "}, {"code": "public boolean waitUntilEmpty ( long timeout ) throws InterruptedException { \n\tif ( ! notifyLock . tryLock ( timeout , TimeUnit . MILLISECONDS ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\ttry { \n\t\treturn pending . isEmpty ( ) || notifyCondition . await ( timeout , TimeUnit . MILLISECONDS ) ; \n\t\t} \n\t$F796 ( notifyLock ) } \n"}, {"code": "public static Set < JavaClassAndMethod > resolveMethodCallTargets ( ReferenceType receiverType , InvokeInstruction invokeInstruction , ConstantPoolGen cpg ) throws ClassNotFoundException $F33971 ( resolveMethodCallTargets , receiverType , invokeInstruction , cpg , _BOOL ) "}, {"code": "private String safe ( String src ) { \n\t$F280 ( sb ) for ( $F1088 ( i , src ) ) { \n\t\t$F1280 ( c , src , i ) if $F152867 ( c ) $F288 ( sb , c ) else { \n\t\t\tsb . append ( $F129237 ( c ) ) ; \n\t\t\t} \n\t\t} \n\t$F92 ( sb ) } \n"}, {"code": "public Algorithm ( Element el ) { \n\t$F321395 ( requiredKey , el ) $F321395 ( jceName , el ) $F321395 ( algorithmClass , el ) if $F186046 ( el ) { \n\t\tkeyLength = Integer . parseInt ( el . getAttribute ( NUM00 ) ) ; \n\t\t} \n\telse { \n\t\tkeyLength = NUM00 ; \n\t\t} \n\t} \n"}, {"code": "protected abstract boolean isSSLSocket $F72 ; \n"}, {"code": "private Run consumeRun ( int offset ) { \n\t$F1280 ( ch , fText , offset ) $F115 ( length , fText ) Run run = getRun ( ch ) ; \n\twhile ( run . consume ( ch ) && offset < length - NUM00 ) { \n\t\toffset ++ ; \n\t\tch = fText . charAt ( offset ) ; \n\t\t} \n\treturn run ; \n\t} \n"}, {"code": "$F1 public $F987 listOptions $F72 { \n\t$F994 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F9010 ( newVector , Collections , super ) $F1007 ( newVector ) } \n"}, {"code": "public static String formatForUI ( Calendar today , Calendar date ) { \n\tif ( $F183169 ( today , Calendar , date ) ) { \n\t\tif ( $F183172 ( today , Calendar ) == $F183172 ( date , Calendar ) ) $F2455 return currentYearDateFormat ( date . getTimeInMillis ( ) ) ; \n\t\t} \n\telse { \n\t\treturn format ( date . getTimeInMillis ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "public OutputStreamWriter ( OutputStream out , CharsetEncoder enc ) { \n\tsuper ( out ) ; \n\t$F1149 ( enc ) se = StreamEncoder . forOutputStreamWriter ( out , this , enc ) ; \n\t} \n"}, {"code": "public synchronized void free ( long pos , int length ) { \n\tint start = getBlock ( pos ) ; \n\tint blocks = getBlockCount ( length ) ; \n\tBlockRange x = new BlockRange ( start , blocks ) ; \n\tBlockRange next = freeSpace . ceiling ( x ) ; \n\tif ( next == null ) { \n\t\tthrow DataUtils . newIllegalStateException ( DataUtils . ERROR_INTERNAL , NUM00 ) ; \n\t\t} \n\tBlockRange prev = freeSpace . lower ( x ) ; \n\tif ( prev != null ) { \n\t\tif ( prev . start + prev . blocks == start ) { \n\t\t\tprev . blocks += blocks ; \n\t\t\tif ( prev . start + prev . blocks == next . start ) { \n\t\t\t\tprev . blocks += next . blocks ; \n\t\t\t\tfreeSpace . remove ( next ) ; \n\t\t\t\t} \n\t\t\t$F665 } \n\t\t} \n\tif ( start + blocks == next . start ) { \n\t\tnext . start -= blocks ; \n\t\tnext . blocks += blocks ; \n\t\t$F665 } \n\tfreeSpace . add ( x ) ; \n\t} \n"}, {"code": "private static void decodeHanziSegment $F11771 ( bits , result , count ) throws FormatException { \n\t$F11774 ( count , bits , FormatException ) $F11778 ( buffer , count ) int offset = NUM00 ; \n\t$F11794 ( count , twoBytes , bits , assembledTwoBytes , buffer , offset ) try $F11799 ( result , buffer , StringUtils ) catch ( UnsupportedEncodingException ignored ) $F2172 ( FormatException ) } \n"}, {"code": "public URI csrfToken $F72 { \n\tURIBuilder builder = apiBuilder ( ) ; \n\tbuilder . setParameter ( NUM00 , NUM00 ) ; \n\tbuilder . setParameter ( NUM00 , NUM00 ) ; \n\tbuilder . setParameter ( NUM00 , NUM00 ) ; \n\treturn build ( builder ) ; \n\t} \n"}, {"code": "$F52843 ( packed , map , i , j , count , value ) "}, {"code": "public DistributedLogMultiStreamWriter build $F72 { \n\tPreconditions . checkArgument ( $F45081 ( _streams ) , NUM00 ) ; \n\t$F1832 ( Preconditions , _client ) $F1832 ( Preconditions , _codec ) Preconditions . checkArgument ( _firstSpeculativeTimeoutMs > NUM00 && _firstSpeculativeTimeoutMs <= _maxSpeculativeTimeoutMs && _speculativeBackoffMultiplier > NUM00 && _maxSpeculativeTimeoutMs < _requestTimeoutMs , NUM00 ) ; \n\treturn new DistributedLogMultiStreamWriter ( _streams , _client , Math . min ( _bufferSize , MAX_LOGRECORDSET_SIZE ) , _flushIntervalMs , _requestTimeoutMs , _firstSpeculativeTimeoutMs , _maxSpeculativeTimeoutMs , _speculativeBackoffMultiplier , _codec , _ticker , _executorService ) ; \n\t} \n"}, {"code": "private void writeChars ( int number , char c ) throws IOException { \n\tfor ( ; \n\tnumber > NUM00 ; \n\tnumber -- ) $F4050 ( writer , c ) } \n"}, {"code": "$F1 public void error ( String msg , Throwable t ) { \n\tif $F68674 ( logger , Level ) { \n\t\tlog ( SELF , Level . SEVERE , msg , t ) ; \n\t\t} \n\t} \n"}, {"code": "public int exit_signal $F72 $F22645 ( Integer , fields ) "}, {"code": "public Command $F72 { \n\tmsgQueue = new LinkedList $F46060 $F72 ; \n\t$F725 ( msgQueue ) } \n"}, {"code": "public synchronized int indexOf ( V item ) $F194077 ( items , item ) "}, {"code": "protected void createNode ( DefaultMutableTreeNode top , String title , String info , String content , int lineCount ) { \n\tDefaultMutableTreeNode threadInfo = null ; \n\tthreadInfo = new DefaultMutableTreeNode ( new ThreadInfo ( title , info , content , lineCount , getThreadTokens ( title ) ) ) ; \n\ttop . add ( threadInfo ) ; \n\t} \n"}, {"code": "public Peer clone $F72 { \n\tPeer clone = new Peer ( network . clone ( ) , address ) ; \n\treturn clone ; \n\t} \n"}, {"code": "public static String generateNativeGuid $F1947 ( deviceType , serialNumber , fileShareNativeId ) { \n\treturn String . format ( NUM00 + FILESYSTEM + NUM00 , _deviceTypeMap . get ( deviceType ) , serialNumber , fileShareNativeId ) ; \n\t} \n"}, {"code": "public StrBuilder ensureCapacity ( final int capacity ) { \n\tif ( capacity > buffer . length ) { \n\t\t$F5040 ( old , buffer ) buffer = new char [ capacity * NUM00 ] ; \n\t\t$F135 ( System , old , buffer , size ) } \n\treturn this ; \n\t} \n"}, {"code": "private void onStartTrackingTouch $F72 { \n\tmIsDragging = _BOOL ; \n\t} \n"}, {"code": "private static void createSuperForwarder ( ClassNode targetNode , MethodNode forwarder , final $F215163 genericsSpec ) { \n\tList $F330824 interfaces = new ArrayList $F330824 ( Traits . collectAllInterfacesReverseOrder ( targetNode , new LinkedHashSet $F330824 $F72 ) ) ; \n\t$F20605 ( name , forwarder ) Parameter [ ] forwarderParameters = forwarder . getParameters ( ) ; \n\tLinkedHashSet $F330824 traits = new LinkedHashSet $F330824 $F72 ; \n\t$F103749 superForwarders = new LinkedList < MethodNode > $F72 ; \n\tfor ( ClassNode node : interfaces ) { \n\t\tif ( Traits . isTrait ( node ) ) { \n\t\t\tMethodNode method = node . getDeclaredMethod ( name , forwarderParameters ) ; \n\t\t\tif ( method != null ) $F30090 ( traits , node , superForwarders , method ) } \n\t\t} \n\tfor ( MethodNode superForwarder : superForwarders ) { \n\t\tdoCreateSuperForwarder ( targetNode , superForwarder , traits . toArray ( new ClassNode $F2313 ( traits ) ) , genericsSpec ) ; \n\t\t} \n\t} \n"}, {"code": "public void testCase15 $F72 { \n\t$F3013 $F3017 $F15143 int aSign = - NUM00 ; \n\tint bSign = NUM00 ; \n\t$F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F3024 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) } \n"}, {"code": "public boolean isVirtualPoolAccessible ( VirtualPool resource ) { \n\treturn _permissionsHelper . tenantHasUsageACL ( $F81891 ( URI , _user ) , resource ) ; \n\t} \n"}, {"code": "public void testTimedInvokeAllNullTimeUnit $F72 throws Throwable { \n\t$F25236 ( e ) PoolCleaner cleaner = null ; \n\ttry { \n\t\tcleaner = cleaner ( e ) ; \n\t\t$F25247 ( l ) $F25251 ( l ) try { \n\t\t\te . invokeAll ( l , MEDIUM_DELAY_MS , null ) ; \n\t\t\tshouldThrow ( ) ; \n\t\t\t} \n\t\t$F83403 } \n\t$F14364 ( cleaner ) } \n"}, {"code": "private static boolean intersectsOneOf ( final Rectangle2D r , final Collection < ? extends Shape > shapes ) { \n\t$F4975 ( shapes , _BOOL ) for ( final Shape item : shapes ) { \n\t\tif $F82382 ( item , r ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "private void expectedByte ( int position , int count ) throws UTFDataFormatException { \n\tthrow new UTFDataFormatException ( Localizer . getMessage ( $F1855 ( Integer , position , count ) ) ) ; \n\t} \n"}, {"code": "private $F3803 checkConfigList ( Configuration config , String name ) { \n\tString peerIPs = config . getConfig ( name ) ; \n\t$F8728 ( peers ) if ( peerIPs != null ) { \n\t\tfor ( String ip : StringUtils . split ( peerIPs , NUM00 ) ) $F207 ( peers , ip ) } \n\treturn peers ; \n\t} \n"}, {"code": "public final ByteBuffer encode ( CharBuffer in ) throws CharacterCodingException { \n\tint length = ( int ) ( in . remaining ( ) * averageBytesPerChar ) ; \n\t$F87627 ( out , ByteBuffer , length ) reset ( ) ; \n\twhile ( state != FLUSHED ) { \n\t\tCoderResult result = encode ( in , out , _BOOL ) ; \n\t\tif ( result == CoderResult . OVERFLOW ) { \n\t\t\tout = allocateMore ( out ) ; \n\t\t\t$F598 } \n\t\telse { \n\t\t\tcheckCoderResult ( result ) ; \n\t\t\t} \n\t\tresult = flush ( out ) ; \n\t\tif ( result == CoderResult . OVERFLOW ) $F8576 ( out , allocateMore ) else { \n\t\t\tcheckCoderResult ( result ) ; \n\t\t\t} \n\t\t} \n\t$F14257 ( out ) return out ; \n\t} \n"}, {"code": "private void loadExternal $F72 { \n\t$F2697 ( properties ) try { \n\t\tproperties . loadFromXML ( new FileInputStream ( PROPERTIES_PATH ) ) ; \n\t\tfor ( $F49930 ( key , properties ) ) { \n\t\t\t$F98826 ( externalSupport , key , properties ) } \n\t\t} \n\tcatch ( IOException ignore ) $F845 } \n"}, {"code": "public static URI parseURI ( String nuri , URI baseuri ) throws URISyntaxException { \n\t$F1384 ( colonLocation , nuri ) int fragmentLocation = getFragmentLocation ( nuri ) ; \n\tif ( colonLocation == - NUM00 || colonLocation > fragmentLocation ) { \n\t\tif ( baseuri == null ) throw new URISyntaxException ( NUM00 + nuri + NUM00 + NUM00 , nuri ) ; \n\t\t} \n\t$F11991 ( protocol , nuri , colonLocation ) if $F3057 ( protocol ) $F19580 ( parseURN , nuri , colonLocation , fragmentLocation ) else if $F3057 ( protocol ) { \n\t\treturn new URI ( nuri ) ; \n\t\t} \n\telse if $F3057 ( protocol ) { \n\t\treturn new URI ( nuri ) ; \n\t\t} \n\telse if $F3057 ( protocol ) { \n\t\treturn new URI ( nuri ) ; \n\t\t} \n\telse $F19580 ( parseGeneralURI , nuri , colonLocation , fragmentLocation ) } \n"}, {"code": "protected void updateUs $F72 { \n\ttry { \n\t\tsetText ( m_Editor . getAsText ( ) ) ; \n\t\t} \n\t$F59734 } \n"}, {"code": "public File makeDirty $F72 throws IOException { \n\tFile f = File . createTempFile ( NUM00 , NUM00 , repositoryLocation . getParentFile ( ) ) ; \n\t$F2824 ( fw , f ) fw . write ( $F128293 ( System ) ) ; \n\t$F1206 ( fw ) $F59 ( fw ) return f ; \n\t} \n"}, {"code": "private static boolean isASCIISuperset ( String encoding ) throws Exception { \n\tString chkS = NUM00 + NUM00 ; \n\t$F96 chkB = { \n\t\t} \n\t; \n\t$F45669 ( b , chkS , encoding ) return Arrays . equals ( b , chkB ) ; \n\t} \n"}, {"code": "public static BigDecimal allocated ( int p_C_Payment_ID , int p_C_Currency_ID ) throws SQLException { \n\tBigDecimal PayAmt = null ; \n\tint C_Charge_ID = NUM00 ; \n\t$F68101 ( sql ) $F3915 ( pstmt , Adempiere , sql ) $F47 ( pstmt , p_C_Payment_ID ) $F49 ( rs , pstmt ) if $F1682 ( rs ) { \n\t\tPayAmt = rs . getBigDecimal ( NUM00 ) ; \n\t\t$F55 ( C_Charge_ID , rs ) } \n\t$F59 ( rs ) $F59 ( pstmt ) $F19679 ( C_Charge_ID , PayAmt ) int C_ConversionType_ID = NUM00 ; \n\tBigDecimal allocatedAmt = getAllocatedAmt ( p_C_Payment_ID , p_C_Currency_ID , C_ConversionType_ID ) ; \n\treturn Currency . round ( allocatedAmt , p_C_Currency_ID , null ) ; \n\t} \n"}, {"code": "public static ByteBuffer processOutboundPackage ( ByteBuffer roData , int exchangeId , boolean connectionOk ) { \n\t$F23501 ( roData ) if ( BuildConfig . DEBUG ) { \n\t\tXposedBridge . log ( NUM00 + Integer . toString ( roData . remaining ( ) ) ) ; \n\t\t} \n\ttry { \n\t\tsynchronized ( sync ) $F845 } \n\tcatch ( Throwable e ) { \n\t\tXposedBridge . log ( e ) ; \n\t\t} \n\t$F1274 } \n"}, {"code": "public void initialize $F72 { \n\tif $F27748 ( isClosed ) { \n\t\t$F973 ( logger ) ActorConfig . createAndGetActorSystem ( ) ; \n\t\t$F10089 ( httpClientStore ) $F10089 ( tcpSshPingResourceStore ) ParallelTaskManager . getInstance ( ) ; \n\t\tisClosed . set ( _BOOL ) ; \n\t\t$F973 ( logger ) } \n\telse $F981 ( logger ) } \n"}, {"code": "$F1113 private static TextRange processSpaces ( $F1113 Helper helper , $F1113 TextRange range , int tabWidth ) { \n\tCharSequence indent = helper . getCurrentLineIndent ( ) ; \n\tint start = Math . max ( NUM00 , range . getStartOffset ( ) - helper . getCurrentLineStartOffset ( ) ) ; \n\tint end = Math . min ( indent . length ( ) , range . getEndOffset ( ) - helper . getCurrentLineStartOffset ( ) ) ; \n\tint tabsNumber = NUM00 ; \n\tint indentOffset = end ; \n\tfor ( int i = start ; \n\ti < end ; \n\ti ++ ) { \n\t\t$F1280 ( c , indent , i ) if ( c == NUM00 ) { \n\t\t\ttabsNumber ++ ; \n\t\t\t} \n\t\telse if ( c != NUM00 ) $F3468 ( indentOffset , i ) } \n\tif ( tabsNumber > NUM00 ) { \n\t\thelper . replace ( start , indentOffset , StringUtil . repeat ( NUM00 , indentOffset - start - tabsNumber + tabsNumber * tabWidth ) ) ; \n\t\treturn TextRange . create ( range . getStartOffset ( ) , range . getEndOffset ( ) - tabsNumber + tabsNumber * tabWidth ) ; \n\t\t} \n\telse { \n\t\treturn range ; \n\t\t} \n\t} \n"}, {"code": "public void removeAlarm ( final Alarm ALARM ) { \n\tif $F105 ( alarms , ALARM ) alarms . remove ( ALARM ) ; \n\t} \n"}, {"code": "public int read $F72 throws $F3258 { \n\tsynchronized ( lock ) { \n\t\tchar charArray [ ] = $F11574 ; \n\t\tif ( read ( charArray , NUM00 , NUM00 ) != - NUM00 ) $F3262 ( charArray ) $F150 } \n\t} \n"}, {"code": "protected void checkParameters $F72 { \n\tif ( parameters != null ) { \n\t\tfor ( $F12534 ( i , size , parameters ) ) { \n\t\t\tParameter param = parameters . get ( i ) ; \n\t\t\tparam . checkSet ( ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private static Properties createProperties1 ( String conflation ) { \n\t$F2697 ( props ) $F9266 ( props , DELTA_PROPAGATION ) $F9266 ( props , MCAST_PORT ) $F9266 ( props , LOCATORS ) props . setProperty ( CONFLATE_EVENTS , conflation ) ; \n\treturn props ; \n\t} \n"}, {"code": "public static void CF3 $F50490 ( x , f , c , nx ) { \n\tint count1 = NUM00 ; \n\tint count2 = NUM00 ; \n\tdouble sum1 = NUM00 ; \n\tdouble sum2 = NUM00 ; \n\tdouble prod1 = NUM00 ; \n\tdouble prod2 = NUM00 ; \n\tdouble yj ; \n\tdouble pj ; \n\tdouble N = NUM00 ; \n\tdouble a = NUM00 ; \n\tfor ( $F9993 ( j , nx ) ) { \n\t\t$F94025 ( yj , x , j , Math , PI , nx ) pj = Math . cos ( NUM00 * yj * PI / Math . sqrt ( j + NUM00 ) ) ; \n\t\tif ( j % NUM00 == NUM00 ) $F115995 ( sum2 , yj , prod2 , pj , count2 ) else $F115995 ( sum1 , yj , prod1 , pj , count1 ) } \n\tf [ NUM00 ] = x [ NUM00 ] + $F116001 ( sum1 , prod1 , count1 ) ; \n\tf [ NUM00 ] = NUM00 - $F43608 ( x ) + $F116001 ( sum2 , prod2 , count2 ) ; \n\tc [ NUM00 ] = f [ NUM00 ] + $F43608 ( f ) - a * Math . sin ( N * PI * ( $F43608 ( f ) - f [ NUM00 ] + NUM00 ) ) - NUM00 ; \n\t} \n"}, {"code": "public static void closeSilently ( ResultSet rs ) $F31188 ( rs ) "}, {"code": "public static void execute ( PoolImpl pool , Function function , Object args , MemberMappedArgument memberMappedArg , boolean allServers , byte hasResult , boolean isFnSerializationReqd , $F806 groups ) { \n\tList servers = null ; \n\tAbstractOp op = new ExecuteFunctionNoAckOpImpl ( function , args , memberMappedArg , hasResult , isFnSerializationReqd , groups , allServers ) ; \n\ttry { \n\t\tif ( allServers && groups . length == NUM00 ) { \n\t\t\tif $F585 ( logger ) { \n\t\t\t\tlogger . debug ( $F5352 ( op ) + pool ) ; \n\t\t\t\t} \n\t\t\tservers = pool . getCurrentServers ( ) ; \n\t\t\t$F10531 ( i , servers ) while $F2921 ( i ) { \n\t\t\t\tpool . executeOn ( ( ServerLocation ) i . next ( ) , op ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tif $F585 ( logger ) { \n\t\t\t\tlogger . debug ( $F5352 ( op ) + pool + NUM00 + Arrays . toString ( groups ) + NUM00 + allServers ) ; \n\t\t\t\t} \n\t\t\tpool . execute ( op , NUM00 ) ; \n\t\t\t} \n\t\t} \n\tcatch ( Exception ex ) { \n\t\tif $F585 ( logger ) { \n\t\t\tlogger . debug ( $F5352 ( op ) + pool , ex ) ; \n\t\t\t} \n\t\tif ( ex . getMessage ( ) != null ) throw new FunctionException $F2808 ( ex ) ; \n\t\telse throw new FunctionException ( NUM00 , ex ) ; \n\t\t} \n\t} \n"}, {"code": "public static Script createMultiSigInputScript ( TransactionSignature ... signatures ) $F28185 ( createMultiSigInputScript , Arrays , signatures ) "}, {"code": "Object proxyIfReturnTypeIsJdbcInterface ( $F6969 returnType , Object toProxy ) { \n\tif ( toProxy != null ) { \n\t\tif ( Util . isJdbcInterface ( returnType ) ) { \n\t\t\t$F20850 ( toProxyClass , toProxy ) return Proxy . newProxyInstance ( toProxyClass . getClassLoader ( ) , Util . getImplementedInterfaces ( toProxyClass ) , getNewJdbcInterfaceProxy ( toProxy ) ) ; \n\t\t\t} \n\t\t} \n\treturn toProxy ; \n\t} \n"}, {"code": "public final void empty $F72 { \n\tsynchronized ( buffer ) $F5122 ( buffer , bufferMap ) } \n"}, {"code": "public void testModeratelyComplexTemplating $F72 throws Exception { \n\tHtmlPage page = getPage ( NUM00 ) ; \n\tString text = page . asText ( ) ; \n\t$F196452 ( assertTrue , text ) } \n"}, {"code": "private ValueRange rangeByWeek ( TemporalAccessor temporal , TemporalField field ) { \n\tint dow = localizedDayOfWeek ( temporal ) ; \n\tint offset = startOfWeekOffset ( temporal . get ( field ) , dow ) ; \n\tValueRange fieldRange = temporal . range ( field ) ; \n\treturn ValueRange . of ( computeWeek ( offset , ( int ) fieldRange . getMinimum ( ) ) , computeWeek ( offset , ( int ) fieldRange . getMaximum ( ) ) ) ; \n\t} \n"}, {"code": "public Object apply ( Object in ) { \n\tif ( in instanceof HasWord ) { \n\t\tHasWord w = ( HasWord ) in ; \n\t\tString str = w . word ( ) ; \n\t\tString outStr = americanize ( str , capitalizeTimex ) ; \n\t\tif $F2137 ( outStr , str ) { \n\t\t\tw . setWord ( outStr ) ; \n\t\t\t} \n\t\treturn w ; \n\t\t} \n\telse { \n\t\t$F71197 ( str , in ) return americanize ( str , capitalizeTimex ) ; \n\t\t} \n\t} \n"}, {"code": "public void addWayRef ( MapWay way , int nodeIdx ) { \n\tif ( ways == null ) ways = new ArrayList < WayRef > $F989 ; \n\tif ( ways . isEmpty ( ) || ways . get ( NUM00 ) != way ) ways . add ( new DefaultWayRef ( way , ( short ) nodeIdx ) ) ; \n\t} \n"}, {"code": "public double doCrossValidation ( $F35808 data , int dataSize ) throws $F38232 { \n\tstats = new OneVariableStats $F72 ; \n\tlog . info ( NUM00 + ( $F4094 ) ) ; \n\t$F9472 ( log , numFolds ) $F98026 splits = splitData ( data , dataSize ) ; \n\t$F973 ( log ) ExecutorService executor = Executors . newFixedThreadPool ( numThreads ) ; \n\tList < FutureTask $F12404 > $F204 ( folds ) ; \n\tfor ( $F119 ( i , numFolds ) ) { \n\t\t$F98037 ( trainingSet ) for ( $F119 ( j , numFolds ) ) { \n\t\t\tif ( j != i ) $F103980 ( trainingSet , splits , j ) } \n\t\t$F5675 testSet = splits . get ( i ) ; \n\t\tFutureTask $F12404 fold = createFoldTask ( trainingSet , testSet , i ) ; \n\t\texecutor . execute ( fold ) ; \n\t\tfolds . add ( fold ) ; \n\t\t} \n\t$F733 ( executor ) executor . awaitTermination ( timeoutSeconds , TimeUnit . SECONDS ) ; \n\tfor ( FutureTask $F12404 fold : folds ) { \n\t\t$F2659 ( stats , fold ) } \n\tlog . info ( NUM00 + ( $F4094 ) ) ; \n\treturn stats . mean ( ) ; \n\t} \n"}, {"code": "public EntireTextBuilder addBackground ( @ ColorInt int bgColor , int start , int end ) { \n\tBackgroundHolder backgroundHolder = new BackgroundHolder ( bgColor , start , end ) ; \n\tmBackgrounds . add ( backgroundHolder ) ; \n\treturn this ; \n\t} \n"}, {"code": "$F15683 ( listener , changingListeners ) "}, {"code": "public boolean matches ( String filename ) { \n\t$F397 ( exts , _BOOL ) $F24867 ( j , filename ) if ( j == - NUM00 || j == filename . length ( ) ) return _BOOL ; \n\t$F36289 ( suffix , filename , j ) $F297 ( exts , suffix ) } \n"}, {"code": "public Rectangle [ ] computeGaps $F72 { \n\tArrayList < Rectangle > $F204 ( ret ) ; \n\t$F47146 ( gap ) for ( $F1139 ( i , mRectList ) ) { \n\t\tRectangle rectangleA = mRectList [ i ] ; \n\t\tfor ( $F169942 ( j , i , mRectList ) ) { \n\t\t\tRectangle rectangleB = mRectList [ j ] ; \n\t\t\tboolean viable = calculateGap ( rectangleA , rectangleB , gap ) ; \n\t\t\tif ( viable ) { \n\t\t\t\tfor ( $F1139 ( k , mRectList ) ) { \n\t\t\t\t\tif ( k != j && k != i ) { \n\t\t\t\t\t\tif ( gap . intersects ( mRectList [ k ] ) ) $F3468 ( viable , _BOOL ) } \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tif ( viable ) { \n\t\t\t\tret . add ( new Rectangle ( gap ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn ret . toArray ( new Rectangle $F2313 ( ret ) ) ; \n\t} \n"}, {"code": "public synchronized MethodCountSet collectHotMethods ( int optLevel , double threshold ) { \n\t$F32367 ( DEBUG , validityCheck ) ArrayList < HotMethodRecompilationEvent > collect = new ArrayList < HotMethodRecompilationEvent > $F72 ; \n\tcollectHotOptMethodsInternal ( NUM00 , collect , hotnessToCounts ( threshold ) , optLevel ) ; \n\t$F2199 ( numHotMethods , collect ) $F9662 ( numCounts , numHotMethods ) CompiledMethod [ ] hotMethods = new CompiledMethod [ numHotMethods ] ; \n\tfor ( $F119 ( i , numHotMethods ) ) { \n\t\tHotMethodEvent event = collect . get ( i ) ; \n\t\thotMethods [ i ] = event . getCompiledMethod ( ) ; \n\t\tnumCounts [ i ] = event . getNumSamples ( ) ; \n\t\t} \n\treturn new MethodCountSet ( hotMethods , numCounts ) ; \n\t} \n"}, {"code": "public synchronized void addBan ( long duration , String reason , String id ) { \n\taddLine ( new BanMessage ( System . currentTimeMillis ( ) , duration , reason , id ) ) ; \n\t} \n"}, {"code": "private void writeHeader $F72 throws OpenStegoException { \n\tDCTDataHeader header = null ; \n\ttry { \n\t\theader = new DCTDataHeader ( this . dataLength , this . fileName , this . config ) ; \n\t\tif ( ( ( header . getHeaderSize ( ) + this . dataLength ) * NUM00 ) > ( this . imgWidth * this . imgHeight / ( DCT . NJPEG * DCT . NJPEG ) ) ) { \n\t\t\tthrow new OpenStegoException ( null , DctLSBPlugin . NAMESPACE , DctLSBErrors . IMAGE_SIZE_INSUFFICIENT ) ; \n\t\t\t} \n\t\tthis . coord = new Coordinates ( ( header . getHeaderSize ( ) + this . dataLength ) * NUM00 ) ; \n\t\twrite ( header . getHeaderData ( ) ) ; \n\t\t} \n\tcatch ( IOException ioEx ) { \n\t\tthrow new OpenStegoException ( ioEx ) ; \n\t\t} \n\t} \n"}, {"code": "public int decrementSubscriberCount $F72 { \n\tif ( isAvailable ( ) ) { \n\t\treturn jmdnsSubscriberCount . decrementAndGet ( ) ; \n\t\t} \n\t$F1082 } \n"}, {"code": "public static boolean addShapelessEnchantingRecipe ( ItemStack aResult , Enchantment [ ] aEnchantmentsAdded , $F2027 aEnchantmentLevelsAdded , $F131 aRecipe ) { \n\treturn addShapelessCraftingRecipe ( aResult , aEnchantmentsAdded , aEnchantmentLevelsAdded , _BOOL , _BOOL , _BOOL , _BOOL , aRecipe ) ; \n\t} \n"}, {"code": "public void start $F72 throws TomcatException { \n\t$F21009 ( cat , init ) $F2346 ( cat ) } \n"}, {"code": "$F20296 ( mRootDirectory , VolleyLog , files , file , fis , entry , CacheHeader , putEntry ) "}, {"code": "$F1 public $F987 listOptions $F72 { \n\t$F994 ( newVector ) $F1000 ( newVector ) $F1007 ( newVector ) } \n"}, {"code": "$F183298 ( view , cache ) "}, {"code": "private boolean imageOutline ( DefaultMutableTreeNode node ) { \n\tboolean isOutline = _BOOL ; \n\tif ( node != null ) { \n\t\tDefaultMutableTreeNode parentNode = ( DefaultMutableTreeNode ) node . getParent ( ) ; \n\t\tif ( parentNode != null ) { \n\t\t\tif ( parentNode . getUserObject ( ) instanceof RasterSymbolizer ) { \n\t\t\t\tisOutline = _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn isOutline ; \n\t} \n"}, {"code": "private short addEntry ( Entry entry ) { \n\tpool . add ( entry ) ; \n\tif $F14765 ( pool ) $F825 return ( short ) pool . size ( ) ; \n\t} \n"}, {"code": "private boolean loadNextPage $F72 { \n\tresult = pageable . getPage ( query , skip , pageSize ) ; \n\tindex = NUM00 ; \n\t$F34929 ( result , _BOOL ) return _BOOL ; \n\t} \n"}, {"code": "public boolean contains ( Node s ) { \n\trunTo ( - NUM00 ) ; \n\t$F161848 ( m_map , _BOOL ) for ( $F119 ( i , m_firstFree ) ) { \n\t\tNode node = m_map [ i ] ; \n\t\tif ( ( null != node ) && node . equals ( s ) ) return _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void close $F72 throws IOException { \n\tif ( ! closed ) { \n\t\tif ( usesDefaultInflater ) $F87417 ( inf ) $F59 ( in ) closed = _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public FieldAnalysisRequest addFieldType ( String fieldTypeName ) { \n\t$F130568 ( fieldTypes ) fieldTypes . add ( fieldTypeName ) ; \n\treturn this ; \n\t} \n"}, {"code": "public static BigFraction parseEditRate ( String editRate ) { \n\teditRate = editRate . contains ( NUM00 ) ? rFrameRateToEditRate ( editRate ) : editRate ; \n\t$F6542 ( parts , editRate ) try { \n\t\tif $F9634 ( parts ) { \n\t\t\treturn new BigFraction ( $F12905 ( Long , parts ) , $F12905 ( Long , parts ) ) ; \n\t\t\t} \n\t\telse if $F9634 ( parts ) { \n\t\t\treturn new BigFraction ( $F12905 ( Long , parts ) ) ; \n\t\t\t} \n\t\t} \n\tcatch ( NumberFormatException e ) { \n\t\tthrow new ConversionHelperException ( NUM00 , e ) ; \n\t\t} \n\tthrow new ConversionHelperException $F580 ; \n\t} \n"}, {"code": "public FST $F4203 finish $F72 throws IOException { \n\tfinal UnCompiledNode $F4203 root = frontier [ NUM00 ] ; \n\tfreezeTail ( NUM00 ) ; \n\tif ( root . inputCount < minSuffixCount1 || root . inputCount < minSuffixCount2 || root . numArcs == NUM00 ) { \n\t\tif ( fst . emptyOutput == null ) $F1337 else if ( minSuffixCount1 > NUM00 || minSuffixCount2 > NUM00 ) $F1337 } \n\telse { \n\t\tif ( minSuffixCount2 != NUM00 ) { \n\t\t\tcompileAllTargets ( root , lastInput . length ( ) ) ; \n\t\t\t} \n\t\t} \n\tfst . finish ( compileNode ( root , lastInput . length ( ) ) . node ) ; \n\tif ( doPackFST ) { \n\t\treturn fst . pack ( this , NUM00 , Math . max ( NUM00 , ( int ) ( getNodeCount ( ) / NUM00 ) ) , acceptableOverheadRatio ) ; \n\t\t} \n\telse { \n\t\treturn fst ; \n\t\t} \n\t} \n"}, {"code": "public void onConfiguration ( ContactsOps . View view , boolean firstTimeIn ) { \n\tmContactsView = $F164361 ( view ) ; \n\tif ( firstTimeIn ) { \n\t\tinitializeAccount ( ) ; \n\t\tmCursorAdapter = new SimpleCursorAdapter ( view . getApplicationContext ( ) , R . layout . list_layout , null , sColumnsToDisplay , sColumnResIds , NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "public static final int randomUnsetBit ( Random r , BitSet bits , final int max ) { \n\tif ( bits . cardinality ( ) == max + NUM00 ) $F7629 final int candidate = TestUtil . nextInt ( r , NUM00 , max ) ; \n\tif $F73204 ( bits , candidate ) { \n\t\tfinal int lo = bits . previousClearBit ( candidate ) ; \n\t\tfinal int hi = bits . nextClearBit ( candidate ) ; \n\t\tif ( lo < NUM00 && max < hi ) { \n\t\t\tfail ( NUM00 + bits . cardinality ( ) + NUM00 + bits . size ( ) ) ; \n\t\t\t} \n\t\telse if ( lo < NUM00 ) { \n\t\t\treturn hi ; \n\t\t\t} \n\t\telse $F88060 ( max , hi , lo ) return ( ( candidate - lo ) < ( hi - candidate ) ) ? lo : hi ; \n\t\t} \n\treturn candidate ; \n\t} \n"}, {"code": "$F1 public void flush $F72 throws IOException { \n\tsynchronized ( lock ) $F29882 ( out ) } \n"}, {"code": "public double std $F72 { \n\tif ( min == max || num == NUM00 ) $F1083 double m = mean ( ) ; \n\treturn Math . sqrt ( sigmax2 / num - m * m ) ; \n\t} \n"}, {"code": "public boolean containsInstruction ( InstructionHandle handle ) { \n\tIterator < InstructionHandle > i = instructionIterator ( ) ; \n\twhile $F2921 ( i ) { \n\t\tif ( i . next ( ) == handle ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static String sendFedexRequest ( String xmlString , Delegator delegator , String shipmentGatewayConfigId , String resource , Locale locale ) throws FedexConnectException { \n\tString url = getShipmentGatewayConfigValue ( delegator , shipmentGatewayConfigId , NUM00 , resource , NUM00 ) ; \n\tif $F4329 ( UtilValidate , url ) { \n\t\tthrow new FedexConnectException ( UtilProperties . getMessage ( resourceError , NUM00 , locale ) ) ; \n\t\t} \n\tif $F48318 ( xmlString ) { \n\t\tthrow new FedexConnectException ( UtilProperties . getMessage ( resourceError , NUM00 , locale ) ) ; \n\t\t} \n\t$F1382 ( url ) String timeOutStr = getShipmentGatewayConfigValue ( delegator , shipmentGatewayConfigId , NUM00 , resource , NUM00 , NUM00 ) ; \n\tint timeout = NUM00 ; \n\ttry $F37473 ( timeout , Integer , timeOutStr ) catch ( NumberFormatException e ) { \n\t\tDebug . logError ( e , NUM00 + timeOutStr + NUM00 + timeout ) ; \n\t\t} \n\tif $F2907 ( Debug ) { \n\t\t$F36357 ( Debug , url , module ) $F36357 ( Debug , xmlString , module ) } \n\tHttpClient http = new HttpClient ( url ) ; \n\thttp . setTimeout ( timeout * NUM00 ) ; \n\tString response = null ; \n\ttry { \n\t\tresponse = http . post ( xmlString ) ; \n\t\t} \n\tcatch ( HttpClientException e ) { \n\t\t$F48322 ( Debug , e , module ) throw new FedexConnectException ( UtilProperties . getMessage ( resourceError , NUM00 , UtilMisc . toMap ( $F22435 ( e ) ) , locale ) ) ; \n\t\t} \n\tif ( response == null ) { \n\t\tthrow new FedexConnectException ( UtilProperties . getMessage ( resourceError , NUM00 , locale ) ) ; \n\t\t} \n\tif $F2907 ( Debug ) { \n\t\t$F36357 ( Debug , response , module ) } \n\treturn response ; \n\t} \n"}, {"code": "public String trimToSize ( String str , int maxStringLength ) { \n\t$F1275 ( str ) if $F62924 ( str , maxStringLength ) { \n\t\t$F7542 ( sb , str ) sb . setLength ( maxStringLength ) ; \n\t\t$F6947 ( str , sb ) } \n\treturn str ; \n\t} \n"}, {"code": "public Subject login ( String username , String password ) { \n\tif ( StringUtils . isBlank ( username ) || StringUtils . isBlank ( password ) ) $F1274 $F2697 ( credentials ) credentials . setProperty ( ResourceConstants . USER_NAME , username ) ; \n\tcredentials . setProperty ( ResourceConstants . PASSWORD , password ) ; \n\treturn login ( credentials ) ; \n\t} \n"}, {"code": "@ Timed @ ExceptionMetered $F2513 @ GET @ Produces ( APPLICATION_JSON ) public Iterable < SanitizedSecret > secretListingV2 ( @ Auth AutomationClient automationClient , @ QueryParam ( NUM00 ) Integer idx , @ QueryParam ( NUM00 ) Integer num , @ DefaultValue ( NUM00 ) @ QueryParam ( NUM00 ) boolean newestFirst ) { \n\tif ( idx != null && num != null ) { \n\t\tif ( idx < NUM00 || num < NUM00 ) { \n\t\t\tthrow new BadRequestException $F580 ; \n\t\t\t} \n\t\treturn secretController . getSecretsBatched ( idx , num , newestFirst ) ; \n\t\t} \n\treturn secretController . getSanitizedSecrets ( null , null ) ; \n\t} \n"}, {"code": "public void deselect ( Iterable $F2305 positions ) { \n\t$F116323 ( entries , positions ) while $F2921 ( entries ) { \n\t\tdeselect ( entries . next ( ) , entries ) ; \n\t\t} \n\t} \n"}, {"code": "public static String map2OID ( String algName ) { \n\tcheckCacheVersion ( ) ; \n\tString result = alg2OidMap . get ( $F184776 ( algName , Locale ) ) ; \n\t$F21525 ( result ) AlgNameMapperSource s = source ; \n\tif ( s != null ) { \n\t\treturn s . mapNameToOid ( algName ) ; \n\t\t} \n\t$F1274 } \n"}, {"code": "public PushHistory ( int maxHistoryLength , JSONObject json ) { \n\tthis . maxHistoryLength = maxHistoryLength ; \n\tthis . entries = new PriorityQueue $F14698 ( maxHistoryLength + NUM00 ) ; \n\tthis . pushIds = new $F2690 ( maxHistoryLength + NUM00 ) ; \n\tthis . lastTime = null ; \n\tif ( json != null ) { \n\t\tJSONObject jsonHistory = json . optJSONObject ( NUM00 ) ; \n\t\tif ( jsonHistory != null ) { \n\t\t\t$F13710 it = jsonHistory . keys ( ) ; \n\t\t\twhile $F2921 ( it ) { \n\t\t\t\t$F2778 ( pushId , it ) String timestamp = jsonHistory . optString ( pushId , null ) ; \n\t\t\t\tif ( pushId != null && timestamp != null ) { \n\t\t\t\t\ttryInsertPush ( pushId , timestamp ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tsetLastReceivedTimestamp ( json . optString ( NUM00 , null ) ) ; \n\t\t} \n\t} \n"}, {"code": "private void endList ( boolean orderedList ) { \n\tif $F5973 ( mParagraphStyles ) { \n\t\tAccumulatedParagraphStyle style = mParagraphStyles . peek ( ) ; \n\t\tParagraphType type = style . getType ( ) ; \n\t\tif ( ( orderedList && ( type . isNumbering ( ) || type == ParagraphType . INDENTATION_OL ) ) || ( ! orderedList && ( type . isBullet ( ) || type == ParagraphType . INDENTATION_UL ) ) ) { \n\t\t\tint indent = style . getRelativeIndent ( ) ; \n\t\t\tif ( indent > NUM00 ) { \n\t\t\t\tstyle . setRelativeIndent ( indent - NUM00 ) ; \n\t\t\t\tstyle . setAbsoluteIndent ( style . getAbsoluteIndent ( ) - NUM00 ) ; \n\t\t\t\t} \n\t\t\telse $F89427 ( mParagraphStyles ) } \n\t\telse { \n\t\t\t$F34454 ( mParagraphStyles ) endList ( orderedList ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private boolean processKeyUp ( int keyCode ) { \n\tif ( keyCode == KeyEvent . KEYCODE_ESCAPE || keyCode == KeyEvent . KEYCODE_BACK ) $F27427 ( dismiss , _BOOL ) else if ( keyCode == KeyEvent . KEYCODE_TAB ) { \n\t\tif ( mInKbMode ) { \n\t\t\t$F121010 ( isTypedTimeFullyLegal , finishKbMode , _BOOL ) return _BOOL ; \n\t\t\t} \n\t\t} \n\telse if ( keyCode == KeyEvent . KEYCODE_ENTER ) { \n\t\tif ( mInKbMode ) { \n\t\t\t$F1485 ( isTypedTimeFullyLegal , _BOOL ) finishKbMode ( _BOOL ) ; \n\t\t\t} \n\t\tif ( mCallback != null ) { \n\t\t\tmCallback . onTimeSet ( mTimePicker , mTimePicker . getHours ( ) , mTimePicker . getMinutes ( ) ) ; \n\t\t\t} \n\t\tdismiss ( ) ; \n\t\treturn _BOOL ; \n\t\t} \n\telse if ( keyCode == KeyEvent . KEYCODE_DEL ) { \n\t\tif ( mInKbMode ) { \n\t\t\tif $F5973 ( mTypedTimes ) { \n\t\t\t\tint deleted = deleteLastTypedKey ( ) ; \n\t\t\t\tString deletedKeyStr ; \n\t\t\t\t$F218511 ( deleted , getAmOrPmKeyCode , AM , deletedKeyStr , mAmText , PM , mPmText , String , getValFromKeyCode ) Utils . tryAccessibilityAnnounce ( mTimePicker , String . format ( mDeletedKeyFormat , deletedKeyStr ) ) ; \n\t\t\t\tupdateDisplay ( _BOOL ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse $F218536 ( keyCode , KeyEvent , mIs24HourMode , getAmOrPmKeyCode , AM , PM , mInKbMode , mTimePicker , Log , TAG , _BOOL , mTypedTimes , tryStartingKbMode , addKeyIfLegal , updateDisplay ) return _BOOL ; \n\t} \n"}, {"code": "public boolean isNaturalJoinColumn ( Column c ) { \n\t$F28807 ( naturalJoinColumns , c ) } \n"}, {"code": "public int read $F24576 ( b , off , len ) throws IOException { \n\tensureOpen ( ) ; \n\tif ( b == null ) $F895 else if ( off < NUM00 || len < NUM00 || len > b . length - off ) $F81129 else $F14826 ( len ) int cnt = NUM00 ; \n\twhile ( len > NUM00 && ! def . finished ( ) ) { \n\t\tint n ; \n\t\tif ( def . needsInput ( ) ) { \n\t\t\t$F81136 ( n , in , buf ) if ( n < NUM00 ) { \n\t\t\t\t$F1571 ( def ) } \n\t\t\telse if ( n > NUM00 ) { \n\t\t\t\t$F81138 ( def , buf , n ) } \n\t\t\t} \n\t\tn = def . deflate ( b , off , len ) ; \n\t\tcnt += n ; \n\t\toff += n ; \n\t\tlen -= n ; \n\t\t} \n\tif ( cnt == NUM00 && def . finished ( ) ) { \n\t\treachEOF = _BOOL ; \n\t\tcnt = - NUM00 ; \n\t\t} \n\treturn cnt ; \n\t} \n"}, {"code": "$F1 public void passivate $F72 { \n\tcleanupUserTransaction ( ) ; \n\tsuper . passivate ( ) ; \n\t} \n"}, {"code": "public Builder delay ( long duration , TimeUnit timeUnit ) { \n\tthis . delay = timeUnit . toSeconds ( duration ) ; \n\treturn this ; \n\t} \n"}, {"code": "private boolean contains ( int part ) $F298 ( parts , part ) "}, {"code": "int keyCount ( Class clazz ) { \n\tMap map = get ( clazz ) ; \n\t$F2199 ( count , map ) if $F1710 ( map , CONSTRUCTORS_KEY ) count -- ; \n\tif $F1710 ( map , GENERIC_GET_KEY ) count -- ; \n\tif $F1710 ( map , ARGTYPES_KEY ) count -- ; \n\treturn count ; \n\t} \n"}, {"code": "public Mp4StcoBox ( Mp4BoxHeader header , ByteBuffer originalDataBuffer , int adjustment ) { \n\tthis . header = header ; \n\tthis . dataBuffer = originalDataBuffer . slice ( ) ; \n\tdataBuffer . position ( dataBuffer . position ( ) + VERSION_FLAG_LENGTH + OTHER_FLAG_LENGTH ) ; \n\tthis . noOfOffSets = Utils . getIntBE ( dataBuffer , dataBuffer . position ( ) , ( dataBuffer . position ( ) + NO_OF_OFFSETS_LENGTH - NUM00 ) ) ; \n\t$F8349 ( dataBuffer , NO_OF_OFFSETS_LENGTH ) for ( $F119 ( i , noOfOffSets ) ) { \n\t\tint offset = Utils . getIntBE ( dataBuffer , dataBuffer . position ( ) , ( dataBuffer . position ( ) + NO_OF_OFFSETS_LENGTH - NUM00 ) ) ; \n\t\toffset = offset + adjustment ; \n\t\tdataBuffer . put ( Utils . getSizeBEInt32 ( offset ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static void createOPUSDirectories ( Config config ) { \n\t$F973 ( log ) UrbanSimParameterConfigModuleV3 module = M4UConfigUtils . getUrbanSimParameterConfigAndPossiblyConvert ( config ) ; \n\tFile tempFile = new File ( module . getOpusHome ( ) ) ; \n\t$F1907 ( tempFile ) tempFile = new File ( module . getMATSim4Opus ( ) ) ; \n\t$F1907 ( tempFile ) tempFile = new File ( module . getMATSim4OpusOutput ( ) ) ; \n\t$F1907 ( tempFile ) tempFile = new File ( module . getMATSim4OpusTemp ( ) ) ; \n\t$F1907 ( tempFile ) tempFile = new File ( module . getMATSim4OpusConfig ( ) ) ; \n\t$F1907 ( tempFile ) $F973 ( log ) } \n"}, {"code": "public static String lcfirst ( String input ) $F13736 ( withFirst , input ) "}, {"code": "void compress $F32395 ( page , old ) { \n\t$F30974 array = data ; \n\tif ( page >= array . length ) $F932 $F96 d = array [ page ] ; \n\tif ( d != old ) $F932 synchronized ( LZF ) { \n\t\tint len = LZF . compress ( d , BLOCK_SIZE , BUFFER , NUM00 ) ; \n\t\tif ( len <= BLOCK_SIZE ) { \n\t\t\t$F1325 ( d , len ) $F135 ( System , BUFFER , d , len ) $F96 o = array [ page ] ; \n\t\t\tif ( o != old ) $F932 array [ page ] = d ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public HadoopProcessDescriptor localProcessDescriptor $F72 { \n\treturn locProcDesc ; \n\t} \n"}, {"code": "private Pair $F91737 describeRain ( Calendar calendar , int temperatureMod ) { \n\tint month = $F21623 ( calendar , Calendar ) ; \n\tmonth = NUM00 * Math . abs ( month - NUM00 ) ; \n\tint hour = $F13065 ( calendar , Calendar ) ; \n\thour = Math . abs ( ( hour + NUM00 ) % NUM00 - NUM00 ) / NUM00 ; \n\tint temp = temperature . getValue ( ) - hour - month + ( temperatureMod * NUM00 ) ; \n\t$F8922 ( LOGGER , temp , temperatureMod ) if ( temp <= - NUM00 ) { \n\t\treturn new Pair $F91737 ( NUM00 , Boolean . FALSE ) ; \n\t\t} \n\treturn new Pair $F91737 ( NUM00 , temp >= - NUM00 && thunder . getDescription ( NUM00 ) != null ) ; \n\t} \n"}, {"code": "$F1219 @ CalledByNativeUnchecked ( NUM00 ) public void addChild ( BookmarkNode child ) $F207 ( mChildren , child ) "}, {"code": "public void testGetMinCRL $F72 { \n\t$F40920 ( selector ) assertNull ( NUM00 , selector . getMinCRL ( ) ) ; \n\t$F88961 ( minCRL ) selector . setMinCRLNumber ( minCRL ) ; \n\tassertTrue ( NUM00 , minCRL . equals ( selector . getMinCRL ( ) ) ) ; \n\t} \n"}, {"code": "public void testWhenComplete_exceptionalCompletion $F72 { \n\tfor ( $F40424 ( m , ExecutionMode ) ) for ( $F2703 ( createIncomplete , _BOOL ) ) { \n\t\t$F127413 ( a ) $F181556 ( ex ) $F127411 ( f ) if ( ! createIncomplete ) f . completeExceptionally ( ex ) ; \n\t\tfinal $F70219 g = m . whenComplete ( f , null ) ; \n\t\tif ( createIncomplete ) f . completeExceptionally ( ex ) ; \n\t\tcheckCompletedWithWrappedException ( g , ex ) ; \n\t\tcheckCompletedExceptionally ( f , ex ) ; \n\t\t$F127421 ( assertEquals , a ) } \n\t} \n"}, {"code": "$F1 public String read ( String pattern ) { \n\treturn read ( Pattern . compile ( pattern , Pattern . DOTALL | Pattern . MULTILINE ) ) ; \n\t} \n"}, {"code": "protected void addSubKeysAndAggregator ( $F2689 values , $F2689 keysOfCompositeAggregator , $F2689 subKeys , String aggregatorName , Map < $F2689 , Integer > keysToCombinationId ) { \n\tif ( keysOfCompositeAggregator == null || subKeys == null || keysOfCompositeAggregator . isEmpty ( ) || subKeys . isEmpty ( ) ) $F825 $F2689 allKeys = Sets . newHashSet ( ) ; \n\tallKeys . addAll ( keysOfCompositeAggregator ) ; \n\tallKeys . addAll ( subKeys ) ; \n\tif ( allKeys . size ( ) != $F11365 ( keysOfCompositeAggregator , subKeys ) ) { \n\t\tthrow new IllegalArgumentException ( $F370 ( keysOfCompositeAggregator , subKeys ) ) ; \n\t\t} \n\t$F99426 ( combinationId , keysToCombinationId , allKeys ) if ( combinationId == null ) { \n\t\tif ( dimensionsDescriptorIDToKeys . add ( new Fields ( allKeys ) ) ) $F114853 ( combinationId , dimensionsDescriptorIDToKeys ) else $F5754 ( allKeys ) keysToCombinationId . put ( allKeys , combinationId ) ; \n\t\taddValueToAggregatorToCombination ( values , allKeys , aggregatorName ) ; \n\t\t} \n\telse { \n\t\t$F42356 ( incrementalAggregatorNames ) boolean isOTFAggregator = _BOOL ; \n\t\tif ( ! isIncrementalAggregator ( aggregatorName ) ) { \n\t\t\tincrementalAggregatorNames = getOTFDependedIncrementalAggregatorNames ( aggregatorName ) ; \n\t\t\tisOTFAggregator = _BOOL ; \n\t\t\t} \n\t\telse { \n\t\t\tincrementalAggregatorNames = Sets . newHashSet ( ) ; \n\t\t\tincrementalAggregatorNames . add ( aggregatorName ) ; \n\t\t\t} \n\t\t$F10651 newValueToIncrementalAggregators = Maps . newHashMap ( ) ; \n\t\t$F10651 newValueToOTFAggregators = Maps . newHashMap ( ) ; \n\t\tfor ( String value : values ) { \n\t\t\tnewValueToIncrementalAggregators . put ( value , incrementalAggregatorNames ) ; \n\t\t\tif ( isOTFAggregator ) { \n\t\t\t\tnewValueToOTFAggregators . put ( value , Sets . newHashSet ( aggregatorName ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tint ddid = combinationId * customTimeBucketsCombination . size ( ) ; \n\t\tfor ( int index = NUM00 ; \n\t\tindex < customTimeBucketsCombination . size ( ) ; \n\t\t++ index , ++ ddid ) { \n\t\t\t$F13395 ( mergeMaps , dimensionsDescriptorIDToValueToAggregator , ddid , newValueToIncrementalAggregators ) $F13395 ( mergeMaps , dimensionsDescriptorIDToValueToOTFAggregator , ddid , newValueToOTFAggregators ) } \n\t\t} \n\t} \n"}, {"code": "protected boolean _findCanonicalLabelling ( boolean tmpPreviouslyEqualToMin ) { \n\tboolean foundNewMinimum = _BOOL ; \n\tIntArrayList underlyingVertexPosThatExtendTmp = getUnderlyingVertexPosThatExtendTmp ( ) ; \n\tIntCursor underlyingVertexPosThatExtendTmpCursor = underlyingVertexPosThatExtendTmp . cursor ( ) ; \n\twhile ( underlyingVertexPosThatExtendTmpCursor . moveNext ( ) ) { \n\t\tint underlyingVertexPosToAdd = underlyingVertexPosThatExtendTmpCursor . elem ( ) ; \n\t\tint newTmpVertexPos = addTmpVertex ( underlyingVertexPosToAdd ) ; \n\t\tint newTmpVertexLabel = underlyingPosToLabel . getUnchecked ( underlyingVertexPosToAdd ) ; \n\t\tIntSet neighbourUnderlyingPositions = underlyingAdjacencyList . get ( underlyingVertexPosToAdd ) ; \n\t\tIntCursor neighbourUnderlyingPositionsCursor = neighbourUnderlyingPositions . cursor ( ) ; \n\t\tPatternEdgeArrayList edgesToAdd = createPatternEdgeArrayList ( ) ; \n\t\twhile ( neighbourUnderlyingPositionsCursor . moveNext ( ) ) { \n\t\t\tint neighbourUnderlyingPos = neighbourUnderlyingPositionsCursor . elem ( ) ; \n\t\t\t$F85651 ( neighbourTmpPos , tmpLabelling , neighbourUnderlyingPos ) if ( neighbourTmpPos == - NUM00 ) $F1448 addCandidatePatternEdges ( edgesToAdd , neighbourUnderlyingPos , neighbourTmpPos , underlyingVertexPosToAdd , newTmpVertexPos ) ; \n\t\t\t} \n\t\tif ( $F3816 ( edgesToAdd ) || newTmpVertexPos == NUM00 ) { \n\t\t\t$F112999 ( edgesToAdd ) boolean promisingTmpPattern = _BOOL ; \n\t\t\tboolean equalToMinTmpPattern = tmpPreviouslyEqualToMin ; \n\t\t\tif ( foundMinimum ) { \n\t\t\t\tint comparisonResult ; \n\t\t\t\tif ( newTmpVertexPos > NUM00 ) { \n\t\t\t\t\tPatternEdgeArrayList minEquivalentEdges = minEdges . get ( newTmpVertexPos ) ; \n\t\t\t\t\tcomparisonResult = edgesToAdd . compareTo ( minEquivalentEdges ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\t$F85651 ( minFirstUnderlyingVertexPos , minInverseLabelling , newTmpVertexPos ) int minFirstUnderylingVertexLabel = underlyingPosToLabel . getUnchecked ( minFirstUnderlyingVertexPos ) ; \n\t\t\t\t\tcomparisonResult = Integer . compare ( newTmpVertexLabel , minFirstUnderylingVertexLabel ) ; \n\t\t\t\t\t} \n\t\t\t\tequalToMinTmpPattern = equalToMinTmpPattern && comparisonResult == NUM00 ; \n\t\t\t\tif ( tmpPreviouslyEqualToMin && ! equalToMinTmpPattern ) { \n\t\t\t\t\t$F158341 ( comparisonResult , promisingTmpPattern , _BOOL ) } \n\t\t\t\t} \n\t\t\tif ( promisingTmpPattern ) { \n\t\t\t\taddTmpEdges ( edgesToAdd ) ; \n\t\t\t\tif ( tmpLabelling . size ( ) == getNumberOfVertices ( ) ) { \n\t\t\t\t\tif ( ! equalToMinTmpPattern || ! foundMinimum ) { \n\t\t\t\t\t\tcopyTmpToMin ( ) ; \n\t\t\t\t\t\tfoundNewMinimum = _BOOL ; \n\t\t\t\t\t\t$F725 ( vertexPositionEquivalences ) } \n\t\t\t\t\tIntIntCursor tmpLabellingCursor = tmpLabelling . cursor ( ) ; \n\t\t\t\t\twhile ( tmpLabellingCursor . moveNext ( ) ) { \n\t\t\t\t\t\tint underlyingPos = tmpLabellingCursor . key ( ) ; \n\t\t\t\t\t\tint tmpEquivalentPos = tmpLabellingCursor . value ( ) ; \n\t\t\t\t\t\t$F85651 ( underlyingPosAccordingToMin , minInverseLabelling , tmpEquivalentPos ) vertexPositionEquivalences . addEquivalence ( underlyingPos , underlyingPosAccordingToMin ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tboolean foundNewMinimumInChild = _findCanonicalLabelling ( equalToMinTmpPattern ) ; \n\t\t\t\t\tif ( foundNewMinimumInChild ) { \n\t\t\t\t\t\ttmpPreviouslyEqualToMin = _BOOL ; \n\t\t\t\t\t\tfoundNewMinimum = _BOOL ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\tremoveLastTmpEdges ( ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tedgesToAdd . reclaim ( ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tremoveLastTmpVertex ( ) ; \n\t\t} \n\tunderlyingVertexPosThatExtendTmp . reclaim ( ) ; \n\treturn foundNewMinimum ; \n\t} \n"}, {"code": "private String constructISCSINamesQuery ( String systemId , List < HostStorageDomain > hsdList , String model ) { \n\t$F535 ( attributeMap ) StorageArray array = new StorageArray ( systemId ) ; \n\tAdd addOp = new Add ( HDSConstants . ISCSI_NAME_FOR_HSD_TARGET ) ; \n\tattributeMap . put ( HDSConstants . STORAGEARRAY , array ) ; \n\tattributeMap . put ( HDSConstants . ADD , addOp ) ; \n\tattributeMap . put ( HDSConstants . MODEL , model ) ; \n\tattributeMap . put ( HDSConstants . HOSTGROUP_LIST , hsdList ) ; \n\tString addWWNQuery = InputXMLGenerationClient . getInputXMLString ( HDSConstants . BATCH_ADD_WWN_TO_HSD_OP , attributeMap , HDSConstants . HITACHI_INPUT_XML_CONTEXT_FILE , HDSConstants . HITACHI_SMOOKS_CONFIG_FILE ) ; \n\treturn addWWNQuery ; \n\t} \n"}, {"code": "public static void tryClaim ( Publication publication , BufferFiller fillBuffer , int length , int timeout , TimeUnit timeUnit ) { \n\tif $F43263 ( publication ) { \n\t\tthrow new NotConnectedException $F72 ; \n\t\t} \n\tfinal BufferClaim bufferClaim = bufferClaims . get ( ) ; \n\t$F132947 ( start , System ) do { \n\t\t$F132947 ( current , System ) if ( ( current - start ) > timeUnit . toNanos ( timeout ) ) { \n\t\t\tthrow new TimedOutException $F72 ; \n\t\t\t} \n\t\tfinal long offer = publication . tryClaim ( length , bufferClaim ) ; \n\t\tif ( offer >= NUM00 ) { \n\t\t\ttry { \n\t\t\t\tfinal MutableDirectBuffer buffer = bufferClaim . buffer ( ) ; \n\t\t\t\t$F11550 ( offset , bufferClaim ) fillBuffer . fill ( offset , buffer ) ; \n\t\t\t\t$F597 } \n\t\t\tfinally $F19092 ( bufferClaim ) } \n\t\telse if ( Publication . NOT_CONNECTED == offer ) { \n\t\t\tthrow new NotConnectedException $F72 ; \n\t\t\t} \n\t\t} \n\twhile ( _BOOL ) ; \n\t} \n"}, {"code": "Builder addLenient ( String line ) { \n\t$F129840 ( index , line ) if ( index != - NUM00 ) { \n\t\treturn addLenient ( line . substring ( NUM00 , index ) , line . substring ( index + NUM00 ) ) ; \n\t\t} \n\telse if $F3106 ( line ) { \n\t\treturn addLenient ( NUM00 , line . substring ( NUM00 ) ) ; \n\t\t} \n\telse $F195829 ( addLenient , line ) } \n"}, {"code": "protected boolean tableExists ( Table t ) throws SQLException { \n\tString sql = NUM00 + ( t . isTemporary ( ) ? NUM00 : ( NUM00 + t . getSchema ( ) + NUM00 ) ) + NUM00 + ( t . isTemporary ( ) ? ( t . getSchema ( ) + NUM00 ) : NUM00 ) + t . getName ( ) + NUM00 ; \n\t$F11282 ( stmt , dbConn ) try { \n\t\t$F15328 ( rs , stmt , sql ) $F43104 ( rs ) } \n\tfinally $F31188 ( stmt ) } \n"}, {"code": "private void readUnlockedThread $F72 { \n\tfinal long thisThreadId = Thread . currentThread ( ) . getId ( ) ; \n\t$F38778 ( entry , threadLockMap , thisThreadId ) assert entry != null ; \n\tif ( $F179074 ( entry ) ) $F106 ( threadLockMap , thisThreadId ) else { \n\t\tthreadLockMap . put ( thisThreadId , entry . intValue ( ) - NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "boolean isSingleWindowStandardOffset $F72 { \n\treturn windowEnd . equals ( LocalDateTime . MAX ) && timeDefinition == TimeDefinition . WALL && fixedSavingAmountSecs == null && lastRuleList . isEmpty ( ) && ruleList . isEmpty ( ) ; \n\t} \n"}, {"code": "public void add ( Character ok ) { \n\tadd ( ok . charValue ( ) ) ; \n\t} \n"}, {"code": "private $F28319 deleteVolumesMethod ( URI systemURI , $F28584 volumeURIs ) $F28323 ( systemURI , volumeURIs ) "}, {"code": "public boolean remove ( AccessibleState state ) { \n\tif ( states == null ) { \n\t\treturn _BOOL ; \n\t\t} \n\telse { \n\t\treturn states . removeElement ( state ) ; \n\t\t} \n\t} \n"}, {"code": "public void testRadix10Pos $F72 $F214959 ( value , radix , aNumber , result , assertTrue ) "}, {"code": "public void outputExampleXML ( PrintWriter writer , AttributeRule rule ) { \n\twriter . print ( $F2990 ( rule ) ) ; \n\tif ( rule . hasExample ( ) ) { \n\t\twriter . print ( rule . getExample ( ) ) ; \n\t\t} \n\telse { \n\t\toutputAttributeValue ( writer , rule . getAttributeClass ( ) ) ; \n\t\t} \n\t$F21384 ( writer ) } \n"}, {"code": "private void beforeValue $F72 throws JSONException { \n\t$F19233 ( stack ) Scope context = peek ( ) ; \n\tif ( context == Scope . EMPTY_ARRAY ) { \n\t\treplaceTop ( Scope . NONEMPTY_ARRAY ) ; \n\t\tnewline ( ) ; \n\t\t} \n\telse if ( context == Scope . NONEMPTY_ARRAY ) { \n\t\t$F84 ( out ) newline ( ) ; \n\t\t} \n\telse if ( context == Scope . DANGLING_KEY ) { \n\t\tout . append ( indent == null ? NUM00 : NUM00 ) ; \n\t\treplaceTop ( Scope . NONEMPTY_OBJECT ) ; \n\t\t} \n\telse if ( context != Scope . NULL ) $F19954 } \n"}, {"code": "public static double calculateJulianDate ( GregorianCalendar cal ) { \n\t$F91762 ( year , cal , Calendar ) int month = $F21623 ( cal , Calendar ) ; \n\t$F187609 ( day , cal , Calendar ) month ++ ; \n\tif $F61413 ( month ) { \n\t\tyear -= NUM00 ; \n\t\tmonth += NUM00 ; \n\t\t} \n\tint A = year / NUM00 ; \n\tint B = ( int ) ( NUM00 - A + ( A / NUM00 ) ) ; \n\tint C = ( int ) ( NUM00 * ( float ) year ) ; \n\tint D = ( int ) ( NUM00 * ( float ) ( month + NUM00 ) ) ; \n\tdouble julianDate = ( double ) ( B + C + D + day ) + NUM00 ; \n\treturn julianDate ; \n\t} \n"}, {"code": "public boolean isUploadInProgress $F72 $F1522 ( mUploadStarted ) "}, {"code": "private int indexOf ( int tabId ) $F194077 ( mTabIdList , tabId ) "}, {"code": "public NdefMessage ( NdefRecord record , NdefRecord ... records ) { \n\t$F1149 ( record ) for ( NdefRecord r : records ) { \n\t\t$F896 ( r ) } \n\tmRecords = new NdefRecord [ NUM00 + records . length ] ; \n\tmRecords [ NUM00 ] = record ; \n\t$F7057 ( System , records , mRecords ) } \n"}, {"code": "private int findCheckpointPosition $F23416 ( cids ) { \n\t$F33287 ( checkpointPeriod ) if $F9634 ( cids ) $F26853 int firstCID = cids [ NUM00 ] ; \n\tif ( ( firstCID + NUM00 ) % checkpointPeriod == NUM00 ) $F8587 ( cidPosition , cids , firstCID ) else { \n\t\tint nextCkpIndex = ( ( ( firstCID / checkpointPeriod ) + NUM00 ) * checkpointPeriod ) - NUM00 ; \n\t\tif ( nextCkpIndex <= $F8528 ( cids ) ) $F8587 ( cidPosition , cids , nextCkpIndex ) } \n\t$F150 } \n"}, {"code": "private boolean readNextLine $F72 throws IOException { \n\tif $F1444 ( headerLines ) { \n\t\ttry { \n\t\t\tpos = NUM00 ; \n\t\t\tString line = ( headerLines . nextElement ( ) + LINE_SEPERATOR ) ; \n\t\t\tif ( ! headerLines . hasMoreElements ( ) ) { \n\t\t\t\tline += LINE_SEPERATOR ; \n\t\t\t\t} \n\t\t\t$F103791 ( currLine , line ) return _BOOL ; \n\t\t\t} \n\t\tcatch ( UnsupportedEncodingException e ) $F14525 } \n\telse { \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "private boolean pause $F72 { \n\ttry { \n\t\tU . await ( pauseLatch , REMAP_PAUSE , MILLISECONDS ) ; \n\t\treturn _BOOL ; \n\t\t} \n\tcatch ( IgniteInterruptedCheckedException e ) $F9278 ( onDone , e , _BOOL ) } \n"}, {"code": "public static InputStream toInputStream ( final CharSequence input ) { \n\treturn IOUtils . toInputStream ( input , Charset . defaultCharset ( ) ) ; \n\t} \n"}, {"code": "private static ITLRestRep createInitiatorTargetRefRep ( ExportGroup exportGroup , BlockObject blockObject , String hlu , Initiator initiator , StoragePort port , FCZoneReference fcZoneReference ) { \n\tITLRestRep rep = new ITLRestRep $F72 ; \n\trep . setHlu ( Integer . parseInt ( hlu ) ) ; \n\tITLRestRep . ITLBlockObjectRestRep blockObjectRestRep = new ITLRestRep . ITLBlockObjectRestRep $F72 ; \n\t$F29332 ( blockObjectRestRep , blockObject ) blockObjectRestRep . setLink ( new RestLinkRep ( NUM00 , RestLinkFactory . newLink ( blockObject ) ) ) ; \n\tblockObjectRestRep . setWwn ( getBlockObjectFormattedWWN ( blockObject ) ) ; \n\trep . setBlockObject ( blockObjectRestRep ) ; \n\tITLRestRep . ITLInitiatorRestRep initiatorRestRep = new ITLRestRep . ITLInitiatorRestRep $F72 ; \n\t$F29332 ( initiatorRestRep , initiator ) initiatorRestRep . setLink ( new RestLinkRep ( NUM00 , RestLinkFactory . newLink ( initiator ) ) ) ; \n\tinitiatorRestRep . setPort ( initiator . getInitiatorPort ( ) ) ; \n\trep . setInitiator ( initiatorRestRep ) ; \n\tITLRestRep . ITLStoragePortRestRep storagePortRestRep = new ITLRestRep . ITLStoragePortRestRep $F72 ; \n\tif ( port != null ) { \n\t\t$F29332 ( storagePortRestRep , port ) storagePortRestRep . setLink ( new RestLinkRep ( NUM00 , RestLinkFactory . newLink ( port ) ) ) ; \n\t\tstoragePortRestRep . setPort ( port . getPortNetworkId ( ) ) ; \n\t\tif ( port . getIpAddress ( ) != null ) { \n\t\t\tstoragePortRestRep . setIpAddress ( port . getIpAddress ( ) ) ; \n\t\t\tstoragePortRestRep . setTcpPort ( String . valueOf ( port . getTcpPortNumber ( ) ) ) ; \n\t\t\t} \n\t\t} \n\trep . setStoragePort ( storagePortRestRep ) ; \n\trep . setExport ( toNamedRelatedResource ( exportGroup , exportGroup . getLabel ( ) ) ) ; \n\tif ( fcZoneReference != null ) { \n\t\trep . setSanZoneName ( fcZoneReference . getZoneName ( ) ) ; \n\t\t} \n\treturn rep ; \n\t} \n"}, {"code": "public void write ( final int c ) throws IOException { \n\tif ( m_writer != null ) m_writer . write ( c ) ; \n\tif ( count >= buf_length ) flushBuffer ( ) ; \n\tif ( c < NUM00 ) { \n\t\t$F260231 ( buf , count , c ) } \n\telse if ( c < NUM00 ) { \n\t\t$F264145 ( buf , count , c ) $F264148 ( buf , count , c ) } \n\telse { \n\t\t$F264145 ( buf , count , c ) $F264152 ( buf , count , c ) $F264148 ( buf , count , c ) } \n\t} \n"}, {"code": "private static List < COperandTree > convert ( final INaviModule module , final List < Operand > operands ) { \n\tfinal List < COperandTree > convertedOperands = new ArrayList < COperandTree > $F72 ; \n\tfor ( final Operand operand : operands ) { \n\t\tconvertedOperands . add ( module . createOperand ( convert ( module , operand . getRootNode ( ) , null ) ) ) ; \n\t\t} \n\treturn convertedOperands ; \n\t} \n"}, {"code": "public static String xmlEscape ( String s ) { \n\t$F83 ( sb ) for ( $F1088 ( i , s ) ) { \n\t\t$F1280 ( ch , s , i ) switch ( ch ) { \n\t\t\t$F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F151814 $F3000 ( sb , ch ) } \n\t\t} \n\t$F92 ( sb ) } \n"}, {"code": "$F145605 ( os , writeInt , CACHE_MAGIC , writeString , key , etag , writeLong , serverDate , ttl , softTtl , writeStringStringMap , responseHeaders , _BOOL , VolleyLog , e ) "}, {"code": "$F1219 public Bitmap ensureNormalizedIcon ( Bitmap icon , String origin ) { \n\tif ( icon == null || icon . getWidth ( ) == NUM00 ) { \n\t\tif ( mIconGenerator == null ) { \n\t\t\tint cornerRadiusPx = Math . min ( mLargeIconWidthPx , mLargeIconHeightPx ) / NUM00 ; \n\t\t\tmIconGenerator = new RoundedIconGenerator ( mLargeIconWidthPx , mLargeIconHeightPx , cornerRadiusPx , NOTIFICATION_ICON_BG_COLOR , NOTIFICATION_TEXT_SIZE_DP * mDensity ) ; \n\t\t\t} \n\t\treturn mIconGenerator . generateIconForUrl ( origin , _BOOL ) ; \n\t\t} \n\tif ( icon . getWidth ( ) > mLargeIconWidthPx || icon . getHeight ( ) > mLargeIconHeightPx ) { \n\t\treturn icon . createScaledBitmap ( icon , mLargeIconWidthPx , mLargeIconHeightPx , _BOOL ) ; \n\t\t} \n\treturn icon ; \n\t} \n"}, {"code": "protected $F8748 canHandleZeroTraining $F70738 ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType ) { \n\tprint ( NUM00 ) ; \n\tprintAttributeSummary ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType ) ; \n\tprint ( NUM00 ) ; \n\t$F8728 ( accepts ) $F18793 ( accepts ) $F18793 ( accepts ) $F317241 ( numTrain , numClasses , missingLevel ) boolean predictorMissing = _BOOL , classMissing = _BOOL ; \n\treturn runBasicTest ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType , missingLevel , predictorMissing , classMissing , numTrain , numClasses , accepts ) ; \n\t} \n"}, {"code": "public SQLQuery ( String typeName , String sqlExpression ) { \n\tthis ( sqlExpression , typeName , null , DEFAULT_QUERY_RESULT_TYPE , null ) ; \n\t} \n"}, {"code": "private static void checkOffset $F41200 ( value , offset , expected ) throws IndexOutOfBoundsException { \n\t$F1280 ( found , value , offset ) if ( found != expected ) { \n\t\tthrow new IndexOutOfBoundsException $F6486 ( expected , found ) ; \n\t\t} \n\t} \n"}, {"code": "public boolean isInNet $F1947 ( host , pattern , mask ) { \n\thost = dnsResolve ( host ) ; \n\t$F32021 ( host , _BOOL ) long lhost = parseIpAddressToLong ( host ) ; \n\tlong lpattern = parseIpAddressToLong ( pattern ) ; \n\tlong lmask = parseIpAddressToLong ( mask ) ; \n\treturn ( lhost & lmask ) == lpattern ; \n\t} \n"}, {"code": "protected static $F7329 rrxRegister ( final long offset , final ITranslationEnvironment environment , $F7332 ( instructions ) , final String registerNodeValue ) { \n\t$F7336 ( shifterOperand , environment ) $F7336 ( shifterCarryOut , environment ) $F7336 ( tmpVar1 , environment ) $F7336 ( tmpVar2 , environment ) $F7336 ( tmpVar3 , environment ) long baseOffset = offset ; \n\tinstructions . add ( ReilHelpers . createBsh ( baseOffset ++ , byteSize , NUM00 , wordSize , thirtyOneSet , dWordSize , tmpVar1 ) ) ; \n\tinstructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dWordSize , registerNodeValue , byteSize , NUM00 + oneSet , dWordSize , tmpVar2 ) ) ; \n\t$F43825 ( instructions , ReilHelpers , baseOffset , dWordSize , tmpVar1 , tmpVar2 , tmpVar3 ) $F7341 ( instructions , ReilHelpers , baseOffset , dWordSize , tmpVar3 , bitMaskAllBitsSet , shifterOperand ) instructions . add ( ReilHelpers . createAnd ( baseOffset ++ , dWordSize , registerNodeValue , byteSize , String . valueOf ( NUM00 ) , byteSize , shifterCarryOut ) ) ; \n\t$F7348 ( shifterOperand , shifterCarryOut ) } \n"}, {"code": "public int enumerate ( Thread [ ] threads ) $F8587 ( enumerate , threads , _BOOL ) "}, {"code": "public void findAndUndo ( Object someObj ) { \n\tif ( someObj instanceof LayerHandler ) { \n\t\t$F22806 ( logger ) if ( getLayerHandler ( ) == ( LayerHandler ) someObj ) $F82623 ( setLayerHandler ) } \n\tif ( controls != null && someObj != this ) { \n\t\tcontrols . findAndUndo ( someObj ) ; \n\t\t} \n\tif ( someObj instanceof Layer ) { \n\t\tpaneLookUp . remove ( ( Layer ) someObj ) ; \n\t\t} \n\t} \n"}, {"code": "public void start $F72 { \n\tlog . info ( NUM00 , this . name , this . frequencyInSecs ) ; \n\tstopped = _BOOL ; \n\t$F24440 ( drHealthMonitorThread , this ) drHealthMonitorThread . setName ( this . name ) ; \n\t$F2346 ( drHealthMonitorThread ) } \n"}, {"code": "public void connect ( String eventSourceUrl ) throws IOException { \n\tLOG . entering ( CLASS_NAME , NUM00 , eventSourceUrl ) ; \n\tif ( stream != null ) { \n\t\t$F18143 ( LOG ) $F824 } \n\tstream = new SseEventStream ( eventSourceUrl ) ; \n\tstream . setListener ( eventStreamListener ) ; \n\t$F2410 ( stream ) } \n"}, {"code": "private static String methodName ( $F157772 final String method ) { \n\treturn GitSSHHandler . HANDLER_NAME + NUM00 + method ; \n\t} \n"}, {"code": "public DataRow removeDataRow ( int index ) $F20067 ( dataList , index ) "}, {"code": "public void put ( Object key , Object value ) { \n\tint bucket = ( key . hashCode ( ) & NUM00 ) % fTableSize ; \n\tEntry entry = search ( key , bucket ) ; \n\tif ( entry != null ) $F6988 ( entry , value ) else { \n\t\tentry = new Entry ( key , value , fBuckets [ bucket ] ) ; \n\t\tfBuckets [ bucket ] = entry ; \n\t\tfNum ++ ; \n\t\t} \n\t} \n"}, {"code": "public void valueChanged ( ListSelectionEvent e ) { \n\t$F2329 ( _table ) $F3768 ( row , _table ) $F15998 ( log , row ) if ( row >= NUM00 ) { \n\t\t_addButton . setEnabled ( _BOOL ) ; \n\t\t$F51105 ( _addButton ) if $F85112 ( _type ) { \n\t\t\tmakeIconMap ( _pickListModel . getBeanAt ( row ) ) ; \n\t\t\tclearIconPanel ( ) ; \n\t\t\tdoIconPanel ( ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\t_addButton . setEnabled ( _BOOL ) ; \n\t\t$F335680 ( _addButton , Bundle ) } \n\tvalidate ( ) ; \n\t} \n"}, {"code": "private int processPollFds $F72 throws IOException { \n\tif ( pollFds . get ( NUM00 ) . revents == POLLIN ) { \n\t\t$F12496 ( buffer ) while ( IoBridge . read ( wakeupIn , buffer , NUM00 , NUM00 ) > NUM00 ) $F845 } \n\tint readyKeyCount = NUM00 ; \n\tfor ( $F3836 ( i , pollFds ) ) { \n\t\tStructPollfd pollFd = pollFds . get ( i ) ; \n\t\tif ( pollFd . revents == NUM00 ) $F1448 if ( pollFd . fd == null ) $F5153 SelectionKeyImpl key = ( SelectionKeyImpl ) pollFd . userData ; \n\t\tpollFd . fd = null ; \n\t\tpollFd . userData = null ; \n\t\tint ops = key . interestOpsNoCheck ( ) ; \n\t\tint selectedOps = NUM00 ; \n\t\tif ( ( pollFd . revents & POLLHUP ) != NUM00 ) { \n\t\t\tselectedOps |= ops ; \n\t\t\t} \n\t\tif ( ( pollFd . revents & POLLIN ) != NUM00 ) { \n\t\t\tselectedOps |= ops & ( OP_ACCEPT | OP_READ ) ; \n\t\t\t} \n\t\tif ( ( pollFd . revents & POLLOUT ) != NUM00 ) { \n\t\t\tif $F104255 ( key ) { \n\t\t\t\tselectedOps |= ops & OP_WRITE ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tselectedOps |= ops & OP_CONNECT ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( selectedOps != NUM00 ) { \n\t\t\tboolean wasSelected = mutableSelectedKeys . contains ( key ) ; \n\t\t\tif ( wasSelected && key . readyOps ( ) != selectedOps ) { \n\t\t\t\tkey . setReadyOps ( key . readyOps ( ) | selectedOps ) ; \n\t\t\t\t++ readyKeyCount ; \n\t\t\t\t} \n\t\t\telse if ( ! wasSelected ) { \n\t\t\t\tkey . setReadyOps ( selectedOps ) ; \n\t\t\t\tmutableSelectedKeys . add ( key ) ; \n\t\t\t\t++ readyKeyCount ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn readyKeyCount ; \n\t} \n"}, {"code": "$F5803 ( drawable , getDrawable , matrix , prevMatrix , drawableWidth , drawableHeight , scaleX , viewWidth , scaleY , viewHeight , mScaleType , CENTER , CENTER_CROP , Math , CENTER_INSIDE , FIT_CENTER , FIT_XY , redundantXSpace , redundantYSpace , matchViewWidth , matchViewHeight , isZoomed , imageRenderedAtLeastOnce , normalizedScale , prevMatchViewWidth , prevMatchViewHeight , savePreviousImageValues , m , Matrix , transX , transY , prevActualWidth , actualWidth , getImageWidth , translateMatrixAfterRotate , prevViewWidth , prevActualHeight , actualHeight , getImageHeight , prevViewHeight , fixTrans , setImageMatrix ) "}, {"code": "public static boolean isIntermediateTable ( String tableName , SQLiteDatabase db ) { \n\tif $F20899 ( TextUtils , tableName ) { \n\t\tif $F11809 ( tableName ) { \n\t\t\tCursor cursor = null ; \n\t\t\ttry { \n\t\t\t\tcursor = db . query ( Const . TableSchema . TABLE_NAME , null , null , null , null , null , null ) ; \n\t\t\t\tif $F17816 ( cursor ) { \n\t\t\t\t\tdo { \n\t\t\t\t\t\tString tableNameDB = cursor . getString ( cursor . getColumnIndexOrThrow ( Const . TableSchema . COLUMN_NAME ) ) ; \n\t\t\t\t\t\tif $F8397 ( tableName , tableNameDB ) { \n\t\t\t\t\t\t\tint tableType = cursor . getInt ( cursor . getColumnIndexOrThrow ( Const . TableSchema . COLUMN_TYPE ) ) ; \n\t\t\t\t\t\t\tif ( tableType == Const . TableSchema . INTERMEDIATE_JOIN_TABLE ) { \n\t\t\t\t\t\t\t\treturn _BOOL ; \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t$F597 } \n\t\t\t\t\t\t} \n\t\t\t\t\twhile $F12260 ( cursor ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F1516 ( e ) $F14364 ( cursor ) } \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static void initialize ( File helpDir ) throws HelpException { \n\tif ( helpDir . isDirectory ( ) && helpDir . exists ( ) ) HelpManager . helpDir = helpDir ; \n\telse throw new HelpException ( $F4929 ( helpDir ) , null ) ; \n\t} \n"}, {"code": "public RealMatrix create $F72 { \n\tRealMatrix rotation = newIdentityMatrix ( ) ; \n\tfor ( Plane plane : planes ) { \n\t\tdouble theta = plane . getTheta ( ) ; \n\t\tif $F35707 ( Double , theta ) $F1448 rotation = rotation . multiply ( newRotationMatrix ( plane . getFirstAxis ( ) , plane . getSecondAxis ( ) , theta ) ) ; \n\t\t} \n\treturn rotation ; \n\t} \n"}, {"code": "public static String toUpperCase ( String str ) { \n\treturn $F65405 ( str , Locale ) ; \n\t} \n"}, {"code": "protected static void init $F72 { \n\tString notificationfactoryClassName = null ; \n\ttry $F10616 ( notificationfactoryClassName , System , NOTIFICATION_FACTORY_NAME ) catch ( SecurityException e ) $F9491 ( e ) if ( notificationfactoryClassName != null ) { \n\t\t$F33929 ( nfc ) try { \n\t\t\tnfc = Class . forName ( notificationfactoryClassName ) ; \n\t\t\tfactory = ( INotificationManagerFactory ) nfc . newInstance ( ) ; \n\t\t\t} \n\t\tcatch ( ClassNotFoundException | InstantiationException | IllegalAccessException e ) $F9491 ( e ) } \n\telse { \n\t\tfactory = new SyslogNotificationFactory $F72 ; \n\t\t} \n\t} \n"}, {"code": "public boolean isDeclaredEntity ( String entityName ) { \n\tEntity entity = ( Entity ) fEntities . get ( entityName ) ; \n\treturn entity != null ; \n\t} \n"}, {"code": "private void openContextMenu ( MouseEvent e ) { \n\tif $F264788 ( e ) { \n\t\tselectClicked ( e , _BOOL ) ; \n\t\tList < RemovedListItem > selectedItems = list . getSelectedValuesList ( ) ; \n\t\tList < StreamInfo > $F204 ( selected ) ; \n\t\tfor ( RemovedListItem item : selectedItems ) { \n\t\t\tselected . add ( item . getStreamInfo ( ) ) ; \n\t\t\t} \n\t\tStreamInfosContextMenu m = new StreamInfosContextMenu ( selected , _BOOL ) ; \n\t\tfor ( ContextMenuListener cml : contextMenuListeners ) { \n\t\t\tm . addContextMenuListener ( cml ) ; \n\t\t\t} \n\t\t$F255135 ( m , list , e ) } \n\t} \n"}, {"code": "private boolean put ( boolean isRoot , Vector names , int len , Object value ) { \n\tif ( len == NUM00 ) { \n\t\tif ( isRoot ) { \n\t\t\t$F203568 ( rootValue , _BOOL ) rootValue = value ; \n\t\t\t} \n\t\telse { \n\t\t\t$F203568 ( otherValue , _BOOL ) otherValue = value ; \n\t\t\t} \n\t\treturn _BOOL ; \n\t\t} \n\telse { \n\t\tObject name = names . elementAt ( len - NUM00 ) ; \n\t\tContextMap nestedMap = ( ContextMap ) nameTable . get ( name ) ; \n\t\tif ( nestedMap == null ) { \n\t\t\tnestedMap = new ContextMap $F72 ; \n\t\t\tnameTable . put ( name , nestedMap ) ; \n\t\t\t} \n\t\treturn nestedMap . put ( isRoot , names , len - NUM00 , value ) ; \n\t\t} \n\t} \n"}, {"code": "static String encodeHighLevel ( String msg , Compaction compaction ) throws WriterException { \n\t$F5475 ( bytes ) $F80469 ( sb , msg ) $F1749 ( len , msg ) int p = NUM00 ; \n\tint textSubMode = SUBMODE_ALPHA ; \n\tif ( compaction == Compaction . TEXT ) { \n\t\tencodeText ( msg , p , len , sb , textSubMode ) ; \n\t\t} \n\telse if ( compaction == Compaction . BYTE ) { \n\t\tbytes = getBytesForMessage ( msg ) ; \n\t\tencodeBinary ( bytes , p , bytes . length , BYTE_COMPACTION , sb ) ; \n\t\t} \n\telse if ( compaction == Compaction . NUMERIC ) { \n\t\t$F36813 ( sb , LATCH_TO1ERIC ) encodeNumeric ( msg , p , len , sb ) ; \n\t\t} \n\telse { \n\t\tint encodingMode = TEXT_COMPACTION ; \n\t\twhile ( p < len ) { \n\t\t\tint n = determineConsecutiveDigitCount ( msg , p ) ; \n\t\t\tif ( n >= NUM00 ) { \n\t\t\t\t$F36813 ( sb , LATCH_TO1ERIC ) encodingMode = NUMERIC_COMPACTION ; \n\t\t\t\ttextSubMode = SUBMODE_ALPHA ; \n\t\t\t\tencodeNumeric ( msg , p , n , sb ) ; \n\t\t\t\tp += n ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tint t = determineConsecutiveTextCount ( msg , p ) ; \n\t\t\t\tif ( t >= NUM00 || n == len ) { \n\t\t\t\t\tif ( encodingMode != TEXT_COMPACTION ) { \n\t\t\t\t\t\t$F36813 ( sb , LATCH_TO_TEXT ) encodingMode = TEXT_COMPACTION ; \n\t\t\t\t\t\ttextSubMode = SUBMODE_ALPHA ; \n\t\t\t\t\t\t} \n\t\t\t\t\ttextSubMode = encodeText ( msg , p , t , sb , textSubMode ) ; \n\t\t\t\t\tp += t ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\t$F5178 ( bytes , getBytesForMessage , msg ) int b = determineConsecutiveBinaryCount ( msg , bytes , p ) ; \n\t\t\t\t\t$F85331 ( b ) if ( b == NUM00 && encodingMode == TEXT_COMPACTION ) { \n\t\t\t\t\t\tencodeBinary ( bytes , p , NUM00 , TEXT_COMPACTION , sb ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse { \n\t\t\t\t\t\tencodeBinary ( bytes , p , b , encodingMode , sb ) ; \n\t\t\t\t\t\tencodingMode = BYTE_COMPACTION ; \n\t\t\t\t\t\ttextSubMode = SUBMODE_ALPHA ; \n\t\t\t\t\t\t} \n\t\t\t\t\tp += b ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F92 ( sb ) } \n"}, {"code": "protected void queue ( final Path file ) throws InterruptedException { \n\tif ( null != base && file . startsWith ( base ) ) { \n\t\tqueue . put ( file . subpath ( base . getNameCount ( ) , file . getNameCount ( ) ) ) ; \n\t\t} \n\telse $F45619 ( queue , file ) } \n"}, {"code": "public InputStream openPath $F72 throws IOException { \n\tPath $F166744 ( filePath , Paths , path ) ; \n\tif $F97092 ( Files , filePath ) { \n\t\t$F10635 ( logger , filePath ) return Files . newInputStream ( filePath ) ; \n\t\t} \n\tURL resourceUrl = Resources . getResource ( path ( ) ) ; \n\t$F10635 ( logger , resourceUrl ) return resourceUrl . openStream ( ) ; \n\t} \n"}, {"code": "public static String replaceCharacters ( final ConversionMethod conversionMethod , final String input , final int fromCharacter , final int toCharacter , final String wrap ) { \n\tString convertedText = input ; \n\tfor ( int i = fromCharacter ; \n\ti <= toCharacter ; \n\ti ++ ) { \n\t\tfinal String characterToReplace = new String ( Character . toChars ( i ) ) ; \n\t\tif ( wrap != null ) { \n\t\t\tconvertedText = convertedText . replace ( characterToReplace , wrap + convertText ( conversionMethod , characterToReplace ) + wrap ) ; \n\t\t\t} \n\t\telse { \n\t\t\tconvertedText = convertedText . replace ( characterToReplace , convertText ( conversionMethod , characterToReplace ) ) ; \n\t\t\t} \n\t\t} \n\treturn convertedText ; \n\t} \n"}, {"code": "public static $F96 hmac_sha1 $F7233 ( keyBytes , text ) throws $F155 { \n\tMac hmacSha1 ; \n\ttry $F14527 ( hmacSha1 , Mac ) catch ( final NoSuchAlgorithmException nsae ) $F14527 ( hmacSha1 , Mac ) final SecretKeySpec macKey = new SecretKeySpec ( keyBytes , NUM00 ) ; \n\thmacSha1 . init ( macKey ) ; \n\t$F157 ( hmacSha1 , text ) } \n"}, {"code": "public static $F96 readBytesAndClose ( InputStream in , int length ) throws IOException { \n\ttry { \n\t\tif ( length <= NUM00 ) $F7984 ( length , Integer ) int block = Math . min ( Constants . IO_BUFFER_SIZE , length ) ; \n\t\t$F39018 ( out , block ) copy ( in , out , length ) ; \n\t\t$F11316 ( out ) } \n\t$F101911 ( DbException , e ) $F3229 ( in ) } \n"}, {"code": "public IdentValue asIdentValue $F72 { \n\tif ( ! identIsSet ) { \n\t\t_identVal = IdentValue . getByIdentString ( cssPrimitiveValue . getCssText ( ) ) ; \n\t\tidentIsSet = _BOOL ; \n\t\t} \n\treturn _identVal ; \n\t} \n"}, {"code": "public final TestSuite build $F72 { \n\trootSuite = new TestSuite ( getSuiteName ( ) ) ; \n\tcurrentClassname = null ; \n\ttry { \n\t\tfor ( TestMethod test : testGrouping . getTests ( ) ) { \n\t\t\tif ( satisfiesAllPredicates ( test ) ) { \n\t\t\t\taddTest ( test ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tif $F3817 ( testCases ) { \n\t\t\tfor ( TestCase testCase : testCases ) { \n\t\t\t\tif ( satisfiesAllPredicates ( new TestMethod ( testCase ) ) ) { \n\t\t\t\t\taddTest ( testCase ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tcatch ( Exception exception ) { \n\t\tLog . i ( NUM00 , NUM00 , exception ) ; \n\t\tTestSuite suite = new TestSuite ( getSuiteName ( ) ) ; \n\t\tsuite . addTest ( new FailedToCreateTests ( exception ) ) ; \n\t\treturn suite ; \n\t\t} \n\treturn rootSuite ; \n\t} \n"}, {"code": "public javax . naming . Binding next $F72 throws NamingException { \n\tif ( more && counter >= _bindingList . value . length ) $F5795 ( getMore ) if ( more && counter < _bindingList . value . length ) { \n\t\torg . omg . CosNaming . Binding bndg = _bindingList . value [ counter ] ; \n\t\tcounter ++ ; \n\t\treturn mapBinding ( bndg ) ; \n\t\t} \n\telse $F6747 } \n"}, {"code": "protected < T extends ASTNode > T moveNode ( T oldNode , ASTRewrite rewrite ) { \n\tT movedNode ; \n\tif ( ASTNodes . isExistingNode ( oldNode ) ) movedNode = ASTNodes . createMoveTarget ( rewrite , oldNode ) ; \n\telse movedNode = ASTNodes . copySubtree ( rewrite . getAST ( ) , oldNode ) ; \n\treturn movedNode ; \n\t} \n"}, {"code": "$F122843 $F32043 public void shouldBeFasterWhenRunningProcessingInParallel $F72 throws Exception { \n\ttestMojoWithConfigurableWroManagerFactoryWithValidConfigFileSet ( ) ; \n\t$F42358 ( begin , System ) victim . setParallelProcessing ( _BOOL ) ; \n\ttestMojoWithConfigurableWroManagerFactoryWithValidConfigFileSet ( ) ; \n\t$F42358 ( endSerial , System ) victim . setParallelProcessing ( _BOOL ) ; \n\ttestMojoWithConfigurableWroManagerFactoryWithValidConfigFileSet ( ) ; \n\t$F42358 ( endParallel , System ) final long serial = endSerial - begin ; \n\tfinal long parallel = endParallel - endSerial ; \n\t$F10635 ( LOG , serial ) $F10635 ( LOG , parallel ) assertTrue ( String . format ( NUM00 , serial , parallel ) , serial > parallel ) ; \n\t} \n"}, {"code": "public static TetradMatrix incompleteCholeskyGramMatrix ( List < Kernel > kernels , DataSet dataset , $F27878 nodes , double precision ) { \n\t$F41760 ( precision ) $F193446 ( m , dataset ) TetradMatrix G = new TetradMatrix ( m , m ) ; \n\t$F9662 ( Dadv , m ) $F4120 ( p , m ) for ( $F119 ( i , m ) ) { \n\t\tDadv [ i ] = evaluate ( kernels , dataset , nodes , i , i ) ; \n\t\tp [ i ] = i ; \n\t\t} \n\tint cols = m ; \n\tfor ( $F119 ( k , m ) ) { \n\t\tdouble best = Dadv [ k ] ; \n\t\tint bestInd = k ; \n\t\tfor ( int j = ( k + NUM00 ) ; \n\t\tj < m ; \n\t\tj ++ ) { \n\t\t\tif ( Dadv [ j ] > best / NUM00 ) { \n\t\t\t\tbest = Dadv [ j ] ; \n\t\t\t\tbestInd = j ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( best < precision ) { \n\t\t\tcols = k - NUM00 ; \n\t\t\t$F597 } \n\t\tint pk = p [ k ] ; \n\t\tp [ k ] = p [ bestInd ] ; \n\t\tp [ bestInd ] = pk ; \n\t\tdouble dk = Dadv [ k ] ; \n\t\tDadv [ k ] = Dadv [ bestInd ] ; \n\t\tDadv [ bestInd ] = dk ; \n\t\tfor ( $F119 ( j , k ) ) { \n\t\t\tdouble gk = G . get ( k , j ) ; \n\t\t\tG . set ( k , j , G . get ( bestInd , j ) ) ; \n\t\t\tG . set ( bestInd , j , gk ) ; \n\t\t\t} \n\t\tdouble diag = Math . sqrt ( Dadv [ k ] ) ; \n\t\tG . set ( k , k , diag ) ; \n\t\tfor ( int j = ( k + NUM00 ) ; \n\t\tj < m ; \n\t\tj ++ ) { \n\t\t\tdouble s = NUM00 ; \n\t\t\tfor ( $F119 ( i , k ) ) { \n\t\t\t\ts += G . get ( j , i ) * G . get ( k , i ) ; \n\t\t\t\t} \n\t\t\tG . set ( j , k , ( evaluate ( kernels , dataset , nodes , p [ j ] , p [ k ] ) - s ) / diag ) ; \n\t\t\t} \n\t\tfor ( int j = ( k + NUM00 ) ; \n\t\tj < m ; \n\t\tj ++ ) { \n\t\t\tDadv [ j ] -= Math . pow ( G . get ( j , k ) , NUM00 ) ; \n\t\t\t} \n\t\tDadv [ k ] = NUM00 ; \n\t\t} \n\tTetradMatrix Gm = new TetradMatrix ( m , cols ) ; \n\tfor ( $F119 ( i , m ) ) { \n\t\tfor ( $F119 ( j , cols ) ) { \n\t\t\tGm . set ( i , j , G . get ( i , j ) ) ; \n\t\t\t} \n\t\t} \n\treturn Gm ; \n\t} \n"}, {"code": "FormatSpecifierParser ( String format ) { \n\tthis . format = format ; \n\tthis . length = format . length ( ) ; \n\t} \n"}, {"code": "public void addConsumerType ( AttributeType type ) $F2202 ( consumerTypes , type ) "}, {"code": "public final void printVerboseMessage ( final LocalizableMessage msg ) { \n\tif ( isVerbose ( ) ) { \n\t\tout . println ( wrap ( msg ) ) ; \n\t\t} \n\t} \n"}, {"code": "private static void orderMatches ( List $F30094 typeMatches , String paramName ) { \n\tif ( typeMatches != null ) Collections . sort ( typeMatches , new MatchComparator ( paramName ) ) ; \n\t} \n"}, {"code": "$F44293 typesToImport $F72 { \n\t$F44298 ( typesToImport ) for ( Map . Entry < String , Spelling > entry : imports . entrySet ( ) ) { \n\t\tif ( entry . getValue ( ) . importIt ) $F44306 ( typesToImport , entry ) } \n\treturn typesToImport ; \n\t} \n"}, {"code": "$F1 public boolean isScraped $F72 { \n\tif ( ! scraped ) { \n\t\tif ( $F1030 ( plot ) && ! ( year . isEmpty ( ) || year . equals ( NUM00 ) ) && ! $F45555 ( genres ) && ! $F45555 ( actors ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn scraped ; \n\t} \n"}, {"code": "public NoiseTagLdaModel ( InputStream in ) throws IOException { \n\tGZIPInputStream zipin = new GZIPInputStream ( in ) ; \n\t$F31064 ( bin , zipin ) $F5337 ( datain , bin ) $F5961 ( numTopics , datain ) $F5952 ( numWords , datain ) $F216839 ( alpha , datain ) $F216839 ( beta , datain ) $F29712 ( locked , datain ) $F3936 ( wnz , numTopics ) $F9952 ( Arrays , wnz ) for ( $F119 ( i , numWords ) ) { \n\t\t$F1540 ( word , datain ) $F4120 ( count , numTopics ) for ( $F119 ( j , numTopics ) ) { \n\t\t\t$F114160 ( count , j , datain ) wnz [ j ] += count [ j ] ; \n\t\t\tnw += count [ j ] ; \n\t\t\t} \n\t\tnwz . put ( word , count ) ; \n\t\t} \n\t$F15464 ( tnz , numTopics ) $F9952 ( Arrays , tnz ) $F5952 ( numTags , datain ) $F216839 ( eta , datain ) for ( $F119 ( i , numTags ) ) { \n\t\t$F1540 ( word , datain ) $F65716 ( count , numTopics ) for ( $F10229 ( j , numTopics ) ) { \n\t\t\t$F114160 ( count , j , datain ) tnz [ j ] += count [ j ] ; \n\t\t\tnt += count [ j ] ; \n\t\t\t} \n\t\tntz . put ( word , count ) ; \n\t\t} \n\tnoise = numTopics ; \n\t} \n"}, {"code": "$F65791 ( api , Opcodes , visibleTypeAnnotations , invisibleTypeAnnotations , f , fields , m , methods ) "}, {"code": "public static String RTFEnc ( String s ) { \n\t$F1749 ( ln , s ) int firstEscIdx = - NUM00 ; \n\tint lastEscIdx = NUM00 ; \n\tint plusOutLn = NUM00 ; \n\tfor ( $F119 ( i , ln ) ) { \n\t\t$F1280 ( c , s , i ) if $F58237 ( c ) { \n\t\t\tif ( firstEscIdx == - NUM00 ) { \n\t\t\t\tfirstEscIdx = i ; \n\t\t\t\t} \n\t\t\tlastEscIdx = i ; \n\t\t\tplusOutLn ++ ; \n\t\t\t} \n\t\t} \n\tif ( firstEscIdx == - NUM00 ) { \n\t\treturn s ; \n\t\t} \n\telse { \n\t\t$F1469 esced = new char [ ln + plusOutLn ] ; \n\t\tif ( firstEscIdx != NUM00 ) { \n\t\t\t$F16116 ( s , firstEscIdx , esced ) } \n\t\tint dst = firstEscIdx ; \n\t\tfor ( int i = firstEscIdx ; \n\t\ti <= lastEscIdx ; \n\t\ti ++ ) { \n\t\t\t$F1280 ( c , s , i ) if $F58237 ( c ) { \n\t\t\t\tesced [ dst ++ ] = NUM00 ; \n\t\t\t\t} \n\t\t\tesced [ dst ++ ] = c ; \n\t\t\t} \n\t\tif ( lastEscIdx != ln - NUM00 ) { \n\t\t\ts . getChars ( lastEscIdx + NUM00 , ln , esced , dst ) ; \n\t\t\t} \n\t\t$F33236 ( String , esced ) } \n\t} \n"}, {"code": "public String toString $F105266 { \n\treturn Integer . toString ( ( int ) bytes ) ; \n\t} \n"}, {"code": "public InetNetwork ( InetAddress inetAddress , int subnetBits ) { \n\t_inetAddress = inetAddress ; \n\t_address = inetAddress . getAddress ( ) ; \n\tif ( subnetBits < NUM00 ) subnetBits = NUM00 * _address . length ; \n\t_subnetBits = subnetBits ; \n\t_subnetByte = subnetBits / NUM00 ; \n\t_subnetMask = ~ ( ( NUM00 < < ( NUM00 - subnetBits % NUM00 ) ) - NUM00 ) & NUM00 ; \n\t} \n"}, {"code": "public boolean equalArrayValue ( Object otherValue ) { \n\tif ( value instanceof $F131 && otherValue instanceof $F131 ) { \n\t\treturn Arrays . equals ( $F2486 ( value ) , $F2486 ( otherValue ) ) ; \n\t\t} \n\t$F121108 ( type , value ) if ( type != otherValue . getClass ( ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( type == $F144048 ) { \n\t\treturn Arrays . equals ( $F25706 ( value ) , $F25706 ( otherValue ) ) ; \n\t\t} \n\telse if ( type == $F144055 ) { \n\t\treturn Arrays . equals ( $F2457 ( value ) , $F2457 ( otherValue ) ) ; \n\t\t} \n\telse if ( type == $F5078 . class ) { \n\t\treturn Arrays . equals ( $F41262 ( value ) , $F41262 ( otherValue ) ) ; \n\t\t} \n\telse if ( type == $F2469 . class ) { \n\t\treturn Arrays . equals ( $F2471 ( value ) , $F2471 ( otherValue ) ) ; \n\t\t} \n\telse if ( type == $F1469 . class ) { \n\t\treturn Arrays . equals ( $F114168 ( value ) , $F114168 ( otherValue ) ) ; \n\t\t} \n\telse if ( type == $F144083 ) { \n\t\treturn Arrays . equals ( $F41256 ( value ) , $F41256 ( otherValue ) ) ; \n\t\t} \n\telse if ( type == $F5415 . class ) { \n\t\treturn Arrays . equals ( $F41250 ( value ) , $F41250 ( otherValue ) ) ; \n\t\t} \n\telse if $F45497 ( type ) { \n\t\treturn Arrays . equals ( $F41244 ( value ) , $F41244 ( otherValue ) ) ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "$F1 public HierarchyWrapperOperation createSubOperation $F72 { \n\treturn new ToStringOperation ( builder , baseIndent ) ; \n\t} \n"}, {"code": "$F192509 ( is , close , b , len , _BOOL , n , c , System , last ) "}, {"code": "protected final boolean execute $F72 throws AdeException { \n\tlogger . info ( NUM00 + m_requestType . name ( ) ) ; \n\t$F42358 ( start , System ) $F30559 ( success , doControlLogic ) $F39033 ( total , System , start ) logger . info ( m_requestType . name ( ) + ( success ? NUM00 : NUM00 ) + NUM00 + millisecondsToHumanTime ( total ) ) ; \n\treturn success ; \n\t} \n"}, {"code": "public abstract JsonValue sync $F72 throws SynchronizationException ; \n"}, {"code": "private boolean validConsist $F72 { \n\tint cN = $F47592 ( validConsist , consistTextField ) ; \n\tif ( cN == - NUM00 ) { \n\t\t$F50529 ( consistStatus , rb ) JOptionPane . showMessageDialog ( this , rb . getString ( NUM00 ) , rb . getString ( NUM00 ) , JOptionPane . ERROR_MESSAGE ) ; \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "private void activity $F72 { \n\tconnectionCheckedCount = NUM00 ; \n\t} \n"}, {"code": "public static ScheduleSpec computeValues $F22194 ( args ) throws ScheduleParameterException { \n\tif ( args . length <= NUM00 || args . length >= NUM00 ) { \n\t\tthrow new ScheduleParameterException $F75477 ( args ) ; \n\t\t} \n\tEnumMap < ScheduleUnit , SortedSet $F2305 > unitMap = new EnumMap < ScheduleUnit , SortedSet $F2305 > ( ScheduleUnit . class ) ; \n\tObject minutes = args [ NUM00 ] ; \n\tObject hours = args [ NUM00 ] ; \n\tObject daysOfMonth = args [ NUM00 ] ; \n\tObject months = args [ NUM00 ] ; \n\tObject daysOfWeek = args [ NUM00 ] ; \n\tunitMap . put ( ScheduleUnit . MINUTES , computeValues ( minutes , ScheduleUnit . MINUTES ) ) ; \n\tunitMap . put ( ScheduleUnit . HOURS , computeValues ( hours , ScheduleUnit . HOURS ) ) ; \n\tSortedSet $F2305 resultMonths = computeValues ( months , ScheduleUnit . MONTHS ) ; \n\tif ( daysOfWeek instanceof CronParameter && daysOfMonth instanceof CronParameter ) { \n\t\tthrow new ScheduleParameterException $F580 ; \n\t\t} \n\tif ( resultMonths != null && $F10470 ( resultMonths ) && ( resultMonths . first ( ) instanceof Integer ) ) { \n\t\tCronParameter parameter = null ; \n\t\tif ( daysOfMonth instanceof CronParameter ) { \n\t\t\tparameter = ( ( CronParameter ) daysOfMonth ) ; \n\t\t\t} \n\t\telse if ( daysOfWeek instanceof CronParameter ) { \n\t\t\tparameter = ( ( CronParameter ) daysOfWeek ) ; \n\t\t\t} \n\t\tif ( parameter != null ) { \n\t\t\tparameter . setMonth ( resultMonths . first ( ) ) ; \n\t\t\t} \n\t\t} \n\tSortedSet $F2305 resultDaysOfWeek = computeValues ( daysOfWeek , ScheduleUnit . DAYS_OF_WEEK ) ; \n\tSortedSet $F2305 resultDaysOfMonth = computeValues ( daysOfMonth , ScheduleUnit . DAYS_OF_MONTH ) ; \n\tif ( resultDaysOfWeek != null && $F10470 ( resultDaysOfWeek ) && ( resultDaysOfWeek . first ( ) instanceof Integer ) ) { \n\t\tif ( resultDaysOfWeek . first ( ) > NUM00 ) { \n\t\t\tif ( resultDaysOfMonth != null ) { \n\t\t\t\tthrow new ScheduleParameterException $F580 ; \n\t\t\t\t} \n\t\t\tresultDaysOfMonth = resultDaysOfWeek ; \n\t\t\tresultDaysOfWeek = null ; \n\t\t\t} \n\t\t} \n\tif ( resultDaysOfMonth != null && $F10470 ( resultDaysOfMonth ) && ( resultDaysOfMonth . first ( ) instanceof Integer ) ) { \n\t\tif ( resultDaysOfWeek != null ) { \n\t\t\tthrow new ScheduleParameterException $F580 ; \n\t\t\t} \n\t\t} \n\tunitMap . put ( ScheduleUnit . DAYS_OF_WEEK , resultDaysOfWeek ) ; \n\tunitMap . put ( ScheduleUnit . DAYS_OF_MONTH , resultDaysOfMonth ) ; \n\tunitMap . put ( ScheduleUnit . MONTHS , resultMonths ) ; \n\tif $F3305 ( args ) { \n\t\tunitMap . put ( ScheduleUnit . SECONDS , computeValues ( args [ NUM00 ] , ScheduleUnit . SECONDS ) ) ; \n\t\t} \n\tString timezone = null ; \n\tif $F3305 ( args ) { \n\t\tif ( ! ( args [ NUM00 ] instanceof WildcardParameter ) ) { \n\t\t\tif ( ! ( args [ NUM00 ] instanceof String ) ) { \n\t\t\t\tthrow new ScheduleParameterException ( NUM00 + args [ NUM00 ] + NUM00 ) ; \n\t\t\t\t} \n\t\t\ttimezone = ( String ) args [ NUM00 ] ; \n\t\t\t} \n\t\t} \n\tCronParameter optionalDayOfMonthOp = getOptionalSpecialOp ( daysOfMonth ) ; \n\tCronParameter optionalDayOfWeekOp = getOptionalSpecialOp ( daysOfWeek ) ; \n\treturn new ScheduleSpec ( unitMap , timezone , optionalDayOfMonthOp , optionalDayOfWeekOp ) ; \n\t} \n"}, {"code": "public void remove ( int position ) { \n\tmData . remove ( position ) ; \n\tnotifyItemRemoved ( position + getHeaderLayoutCount ( ) ) ; \n\t} \n"}, {"code": "public AsyncBufferedOutputStream ( OutputStream out , int bufSize , int maxBuffers ) { \n\tsuper ( out ) ; \n\tbuffers = new ConcurrentLinkedDeque $F200 $F72 ; \n\t$F1325 ( buf , bufSize ) $F2346 ( flusherThread ) } \n"}, {"code": "public boolean startlistContains ( String x ) { \n\t$F397 ( startwords , _BOOL ) $F297 ( startwords , x ) } \n"}, {"code": "private void closeMediaInfo $F72 { \n\t$F39863 ( mediaInfo ) miSnapshot = null ; \n\t} \n"}, {"code": "public void addHeader ( final Header header ) $F207 ( headers , header ) "}, {"code": "private void readVersion ( InputNode node , Object source , Label label ) throws Exception { \n\tObject value = readInstance ( node , source , label ) ; \n\t$F42606 ( expect , type ) if ( value != null ) { \n\t\tVersion version = context . getVersion ( expect ) ; \n\t\tDouble actual = version . revision ( ) ; \n\t\tif $F2137 ( value , revision ) { \n\t\t\trevision . compare ( actual , value ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "protected Ignite startGridWithIgfs ( String gridName , String igfsName , IgfsMode mode , $F5466 IgfsSecondaryFileSystem secondaryFs , $F5466 IgfsIpcEndpointConfiguration restCfg ) throws Exception { \n\tFileSystemConfiguration igfsCfg = new FileSystemConfiguration $F72 ; \n\tigfsCfg . setDataCacheName ( NUM00 ) ; \n\tigfsCfg . setMetaCacheName ( NUM00 ) ; \n\tigfsCfg . setName ( igfsName ) ; \n\tigfsCfg . setBlockSize ( IGFS_BLOCK_SIZE ) ; \n\tigfsCfg . setDefaultMode ( mode ) ; \n\tigfsCfg . setIpcEndpointConfiguration ( restCfg ) ; \n\tigfsCfg . setSecondaryFileSystem ( secondaryFs ) ; \n\tigfsCfg . setPrefetchBlocks ( PREFETCH_BLOCKS ) ; \n\tigfsCfg . setSequentialReadsBeforePrefetch ( SEQ_READS_BEFORE_PREFETCH ) ; \n\tCacheConfiguration dataCacheCfg = defaultCacheConfiguration ( ) ; \n\t$F87453 ( dataCacheCfg ) dataCacheCfg . setCacheMode ( PARTITIONED ) ; \n\tdataCacheCfg . setNearConfiguration ( null ) ; \n\tdataCacheCfg . setWriteSynchronizationMode ( CacheWriteSynchronizationMode . FULL_SYNC ) ; \n\tdataCacheCfg . setAffinityMapper ( new IgfsGroupDataBlocksKeyMapper $F989 ) ; \n\tdataCacheCfg . setBackups ( NUM00 ) ; \n\tdataCacheCfg . setAtomicityMode ( TRANSACTIONAL ) ; \n\tdataCacheCfg . setOffHeapMaxMemory ( NUM00 ) ; \n\tCacheConfiguration metaCacheCfg = defaultCacheConfiguration ( ) ; \n\t$F87453 ( metaCacheCfg ) metaCacheCfg . setCacheMode ( REPLICATED ) ; \n\tmetaCacheCfg . setWriteSynchronizationMode ( CacheWriteSynchronizationMode . FULL_SYNC ) ; \n\tmetaCacheCfg . setAtomicityMode ( TRANSACTIONAL ) ; \n\tIgniteConfiguration cfg = new IgniteConfiguration $F72 ; \n\tcfg . setGridName ( gridName ) ; \n\tTcpDiscoverySpi discoSpi = new TcpDiscoverySpi $F72 ; \n\tdiscoSpi . setIpFinder ( new TcpDiscoveryVmIpFinder ( _BOOL ) ) ; \n\tcfg . setDiscoverySpi ( discoSpi ) ; \n\tcfg . setCacheConfiguration ( dataCacheCfg , metaCacheCfg ) ; \n\tcfg . setFileSystemConfiguration ( igfsCfg ) ; \n\tcfg . setLocalHost ( NUM00 ) ; \n\tcfg . setConnectorConfiguration ( null ) ; \n\treturn G . start ( cfg ) ; \n\t} \n"}, {"code": "TypeSimplifier ( Types typeUtils , String packageName , $F134539 types , TypeMirror base ) { \n\tthis . typeUtils = typeUtils ; \n\t$F134539 typesPlusBase = new TypeMirrorSet ( types ) ; \n\t$F1140 ( base , typesPlusBase ) $F134545 ( referenced , referencedClassTypes , typeUtils , typesPlusBase ) $F134545 ( defined , nonPrivateDeclaredTypes , typeUtils , base ) this . imports = findImports ( typeUtils , packageName , referenced , defined ) ; \n\t} \n"}, {"code": "private $F23384 removeFailed ( $F23384 statistics ) { \n\t$F23384 $F204 ( result ) ; \n\tfor ( Statistics statistic : statistics ) { \n\t\tif ( statistic . getSucceeded ( ) ) result . add ( statistic ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public void addAssociatedGefahr ( GefaehrdungsUmsetzung gefaehrdung ) $F2202 ( associatedGefaehrdungen , gefaehrdung ) "}, {"code": "public static $F96 packByteBufferIntoSingleByteArray ( $F30903 byteBufferArr ) { \n\tif ( null == byteBufferArr || byteBufferArr . length == NUM00 ) $F1337 int noOfCol = byteBufferArr . length ; \n\tshort toDetermineLengthOfByteArr = NUM00 ; \n\tshort offsetLen = ( short ) ( noOfCol * NUM00 + toDetermineLengthOfByteArr ) ; \n\tint totalBytes = calculateTotalBytes ( byteBufferArr ) + offsetLen ; \n\t$F87627 ( buffer , ByteBuffer , totalBytes ) buffer . putShort ( ( short ) ( totalBytes - toDetermineLengthOfByteArr ) ) ; \n\tbuffer . putShort ( offsetLen ) ; \n\tfor ( $F21583 ( index , byteBufferArr ) ) { \n\t\tByteBuffer individualCol = byteBufferArr [ index ] ; \n\t\t$F85980 ( noOfBytes , individualCol ) buffer . putShort ( $F15066 ( offsetLen , noOfBytes ) ) ; \n\t\toffsetLen += noOfBytes ; \n\t\t$F23501 ( individualCol ) } \n\tfor ( $F1139 ( index , byteBufferArr ) ) { \n\t\tByteBuffer individualCol = byteBufferArr [ index ] ; \n\t\tbuffer . put ( individualCol . array ( ) ) ; \n\t\t} \n\t$F23501 ( buffer ) $F31057 ( buffer ) } \n"}, {"code": "public void connect ( SocketAddress endpoint , int timeout ) throws IOException { \n\t$F19273 ( endpoint ) $F30465 ( timeout ) if ( isClosed ( ) ) throw new SocketException $F580 ; \n\tif ( ! oldImpl && isConnected ( ) ) throw new SocketException $F580 ; \n\tif ( ! ( endpoint instanceof InetSocketAddress ) ) $F824 InetSocketAddress epoint = ( InetSocketAddress ) endpoint ; \n\tInetAddress addr = epoint . getAddress ( ) ; \n\t$F287270 ( port , epoint ) checkAddress ( addr , NUM00 ) ; \n\t$F8108 ( security , System ) if ( security != null ) { \n\t\tif ( epoint . isUnresolved ( ) ) security . checkConnect ( epoint . getHostName ( ) , port ) ; \n\t\telse security . checkConnect ( addr . getHostAddress ( ) , port ) ; \n\t\t} \n\t$F88859 ( created , createImpl , _BOOL ) if ( ! oldImpl ) impl . connect ( epoint , timeout ) ; \n\telse if ( timeout == NUM00 ) { \n\t\tif ( epoint . isUnresolved ( ) ) impl . connect ( addr . getHostName ( ) , port ) ; \n\t\telse impl . connect ( addr , port ) ; \n\t\t} \n\telse $F5788 connected = _BOOL ; \n\tbound = _BOOL ; \n\t} \n"}, {"code": "private Pair < HashStepType , HashChainType > fetchHashStep ( String uri , HashChainType currentChain ) throws Exception { \n\t$F1384 ( hashIndex , uri ) if ( hashIndex < NUM00 ) { \n\t\tthrow new CodedException ( X_MALFORMED_HASH_CHAIN , NUM00 , uri ) ; \n\t\t} \n\t$F11991 ( baseUri , uri , hashIndex ) $F36289 ( fragment , uri , hashIndex ) if $F2979 ( fragment ) { \n\t\tthrow new CodedException ( X_MALFORMED_HASH_CHAIN , NUM00 , uri ) ; \n\t\t} \n\tHashChainType hashChain ; \n\tif $F2979 ( baseUri ) { \n\t\thashChain = currentChain ; \n\t\t} \n\telse { \n\t\thashChain = getHashChain ( baseUri ) ; \n\t\t} \n\tfor ( HashStepType step : hashChain . getHashStep ( ) ) { \n\t\tif ( $F140091 ( fragment , step ) ) { \n\t\t\treturn new ImmutablePair $F200 ( step , hashChain ) ; \n\t\t\t} \n\t\t} \n\tthrow new CodedException ( X_MALFORMED_HASH_CHAIN , NUM00 , uri ) ; \n\t} \n"}, {"code": "$F1431 public static boolean loadByCurrentClassloader ( String clsName ) { \n\tif $F3106 ( clsName ) return _BOOL ; \n\tif $F3106 ( clsName ) { \n\t\tif $F100843 ( clsName ) return _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void decrementTargetsCountAll $F72 { \n\tfinal long decrementAndGet = targetsCountAll . decrementAndGet ( ) ; \n\tif ( decrementAndGet < NUM00 ) $F21827 ( targetsCountAll ) } \n"}, {"code": "private void addNotAvailableBusinessObjectDataStatuses ( List < BusinessObjectDataStatus > notAvailableStatuses , List < StorageUnitEntity > storageUnitEntities , Set < BusinessObjectDataEntity > archivedBusinessObjectDataEntities ) { \n\tfor ( StorageUnitEntity storageUnitEntity : storageUnitEntities ) $F18351 ( notAvailableStatuses , createNotAvailableBusinessObjectDataStatus , storageUnitEntity , archivedBusinessObjectDataEntities ) } \n"}, {"code": "private List < JdbcStatement > createDefaultQueryJdbcStatements $F72 { \n\tList < JdbcStatement > $F204 ( jdbcStatements ) ; \n\t{ \n\t\tJdbcStatement jdbcStatement = new JdbcStatement $F72 ; \n\t\tjdbcStatement . setType ( JdbcStatementType . QUERY ) ; \n\t\tjdbcStatement . setSql ( MockJdbcOperations . CASE_1_SQL ) ; \n\t\tjdbcStatements . add ( jdbcStatement ) ; \n\t\t} \n\treturn jdbcStatements ; \n\t} \n"}, {"code": "private void testMemorySpatialIndex $F72 throws SQLException { \n\tdeleteDb ( NUM00 ) ; \n\tConnection conn = getConnection ( URL ) ; \n\t$F11282 ( stat , conn ) $F131050 ( stat ) $F131050 ( stat ) $F131050 ( stat ) $F131050 ( stat ) ResultSet rs ; \n\trs = stat . executeQuery ( $F38 ) ; \n\t$F7683 ( assertFalse , rs ) rs = stat . executeQuery ( NUM00 + NUM00 ) ; \n\t$F24630 ( rs ) if ( config . mvStore ) { \n\t\tassertContains ( rs . getString ( NUM00 ) , NUM00 ) ; \n\t\t} \n\tstat . executeQuery ( NUM00 + NUM00 ) ; \n\tstat . executeQuery ( NUM00 + NUM00 ) ; \n\trs = stat . executeQuery ( NUM00 + NUM00 ) ; \n\t$F7683 ( assertTrue , rs ) rs = stat . executeQuery ( NUM00 + NUM00 ) ; \n\t$F7683 ( assertTrue , rs ) rs = stat . executeQuery ( NUM00 + NUM00 ) ; \n\t$F7683 ( assertFalse , rs ) $F131050 ( stat ) $F59 ( conn ) deleteDb ( NUM00 ) ; \n\t} \n"}, {"code": "public static boolean isValid ( Date expirationDate ) { \n\t$F6357 ( currentDate ) $F94422 ( formattedDate , dateFormat , currentDate ) currentDate = convertDate ( formattedDate ) ; \n\tboolean isExpired = currentDate . after ( expirationDate ) ; \n\t$F20729 ( isEqual , currentDate , expirationDate ) if ( isExpired == _BOOL || isEqual == _BOOL ) { \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public long contentLength $F72 { \n\tlong size ; \n\ttry { \n\t\tsize = Long . parseLong ( request . getHeader ( FileUpload . CONTENT_LENGTH ) ) ; \n\t\t} \n\tcatch ( NumberFormatException e ) { \n\t\tsize = request . getContentLength ( ) ; \n\t\t} \n\treturn size ; \n\t} \n"}, {"code": "$F108235 ( f , first , n , item , last , count , notFull ) "}, {"code": "public void testZeroPos $F72 $F9149 ( numA , numB , res , aNumber , bNumber , result , assertTrue ) "}, {"code": "public CheckBox addListener ( Listener listener ) { \n\tif $F122854 ( listener , listeners ) $F207 ( listeners , listener ) return this ; \n\t} \n"}, {"code": "$F1431 public $F131 toArray $F72 { \n\t$F677 ( lock , this ) $F790 ( lock ) try { \n\t\t$F133 ( a , count ) int k = NUM00 ; \n\t\tfor ( $F13430 p = first ; \n\t\tp != null ; \n\t\tp = p . next ) a [ k ++ ] = p . item ; \n\t\treturn a ; \n\t\t} \n\t$F796 ( lock ) } \n"}, {"code": "private void takePicture $F72 { \n\t$F13527 ( Log , TAG ) lockFocus ( ) ; \n\t} \n"}, {"code": "$F23145 ( measureSpec , result , specMode , MeasureSpec , specSize , mRadius , getPaddingTop , getPaddingBottom , Math ) "}, {"code": "private static $F26352 parse ( String members ) { \n\t$F6518 ( theRanges ) $F63276 ( n , members ) int i = NUM00 ; \n\tint state = NUM00 ; \n\tint lb = NUM00 ; \n\tint ub = NUM00 ; \n\tchar c ; \n\tint digit ; \n\twhile ( i < n ) { \n\t\t$F47698 ( c , members , i ) switch ( state ) { \n\t\t\t$F3366 if $F104645 ( Character , c ) { \n\t\t\t\tstate = NUM00 ; \n\t\t\t\t} \n\t\t\telse if ( ( digit = Character . digit ( c , NUM00 ) ) != - NUM00 ) { \n\t\t\t\tlb = digit ; \n\t\t\t\tstate = NUM00 ; \n\t\t\t\t} \n\t\t\telse $F26853 $F597 $F3366 if $F104645 ( Character , c ) { \n\t\t\t\tstate = NUM00 ; \n\t\t\t\t} \n\t\t\telse if ( ( digit = Character . digit ( c , NUM00 ) ) != - NUM00 ) { \n\t\t\t\tlb = NUM00 * lb + digit ; \n\t\t\t\tstate = NUM00 ; \n\t\t\t\t} \n\t\t\telse if $F37111 ( c ) { \n\t\t\t\tstate = NUM00 ; \n\t\t\t\t} \n\t\t\telse if ( c == NUM00 ) { \n\t\t\t\taccumulate ( theRanges , lb , lb ) ; \n\t\t\t\tstate = NUM00 ; \n\t\t\t\t} \n\t\t\telse $F26853 $F597 $F3366 if $F104645 ( Character , c ) { \n\t\t\t\tstate = NUM00 ; \n\t\t\t\t} \n\t\t\telse if $F37111 ( c ) { \n\t\t\t\tstate = NUM00 ; \n\t\t\t\t} \n\t\t\telse if ( c == NUM00 ) { \n\t\t\t\taccumulate ( theRanges , lb , lb ) ; \n\t\t\t\tstate = NUM00 ; \n\t\t\t\t} \n\t\t\telse $F26853 $F597 $F3366 if $F104645 ( Character , c ) { \n\t\t\t\tstate = NUM00 ; \n\t\t\t\t} \n\t\t\telse if ( ( digit = Character . digit ( c , NUM00 ) ) != - NUM00 ) { \n\t\t\t\tub = digit ; \n\t\t\t\tstate = NUM00 ; \n\t\t\t\t} \n\t\t\telse $F26853 $F597 $F3366 if $F104645 ( Character , c ) { \n\t\t\t\tstate = NUM00 ; \n\t\t\t\t} \n\t\t\telse if ( ( digit = Character . digit ( c , NUM00 ) ) != - NUM00 ) { \n\t\t\t\tub = NUM00 * ub + digit ; \n\t\t\t\tstate = NUM00 ; \n\t\t\t\t} \n\t\t\telse if ( c == NUM00 ) { \n\t\t\t\taccumulate ( theRanges , lb , ub ) ; \n\t\t\t\tstate = NUM00 ; \n\t\t\t\t} \n\t\t\telse $F26853 $F597 $F3366 if $F104645 ( Character , c ) { \n\t\t\t\tstate = NUM00 ; \n\t\t\t\t} \n\t\t\telse if ( c == NUM00 ) { \n\t\t\t\taccumulate ( theRanges , lb , ub ) ; \n\t\t\t\tstate = NUM00 ; \n\t\t\t\t} \n\t\t\telse $F26853 $F597 $F3366 if $F104645 ( Character , c ) { \n\t\t\t\tstate = NUM00 ; \n\t\t\t\t} \n\t\t\telse if ( ( digit = Character . digit ( c , NUM00 ) ) != - NUM00 ) { \n\t\t\t\tlb = digit ; \n\t\t\t\tstate = NUM00 ; \n\t\t\t\t} \n\t\t\telse $F26853 $F597 } \n\t\t} \n\tswitch ( state ) { \n\t\t$F56826 $F3366 $F3366 accumulate ( theRanges , lb , lb ) ; \n\t\t$F597 $F3366 $F3366 accumulate ( theRanges , lb , ub ) ; \n\t\t$F597 $F3366 $F3366 $F10056 } \n\treturn canonicalArrayForm ( theRanges ) ; \n\t} \n"}, {"code": "public static String showDialog ( final Component component , final String title , final Object message , final String ... buttons ) { \n\treturn showDialog ( JOptionPane . getFrameForComponent ( component ) , title , message , JOptionPane . PLAIN_MESSAGE , buttons ) ; \n\t} \n"}, {"code": "public static void encode ( InputStream in , Writer out ) throws IOException { \n\tint column = NUM00 ; \n\twhile ( _BOOL ) { \n\t\t$F7468 ( byte1 , in ) $F7468 ( byte2 , in ) $F7468 ( byte3 , in ) $F44858 ( byte1 ) if ( column >= NUM00 ) { \n\t\t\tcolumn = NUM00 ; \n\t\t\t$F3410 ( out ) } \n\t\tout . write ( charset [ byte1 > > NUM00 ] ) ; \n\t\tint index = ( byte1 & NUM00 ) < < NUM00 ; \n\t\tif ( byte2 < NUM00 ) { \n\t\t\tout . write ( charset [ index ] ) ; \n\t\t\tout . write ( paddingChar ) ; \n\t\t\tout . write ( paddingChar ) ; \n\t\t\t$F665 } \n\t\tindex += byte2 > > NUM00 ; \n\t\tout . write ( charset [ index ] ) ; \n\t\t$F3252 ( index , byte2 ) if ( byte3 < NUM00 ) { \n\t\t\tout . write ( charset [ index ] ) ; \n\t\t\tout . write ( paddingChar ) ; \n\t\t\t$F665 } \n\t\tindex += byte3 > > NUM00 ; \n\t\tout . write ( charset [ index ] ) ; \n\t\t$F56823 ( out , charset , byte3 ) column += NUM00 ; \n\t\t} \n\t} \n"}, {"code": "public static String canonicalID ( String id ) { \n\t$F1747 ( id ) int st = NUM00 ; \n\t$F1749 ( len , id ) boolean substr = _BOOL ; \n\tint c ; \n\twhile ( st < len && ( $F31375 ( c , id , st ) == NUM00 || c <= NUM00 ) ) { \n\t\tst ++ ; \n\t\tsubstr = _BOOL ; \n\t\t} \n\twhile ( st < len && ( ( c = id . charAt ( len - NUM00 ) ) == NUM00 || c <= NUM00 ) ) { \n\t\tlen -- ; \n\t\tsubstr = _BOOL ; \n\t\t} \n\treturn substr ? id . substring ( st , len ) : id ; \n\t} \n"}, {"code": "protected void sendMessage ( String handler , $F11654 arguments ) { \n\townerMessage . addEvent ( Type . CLIENT_SEND_MESSAGE , handler , arguments ) ; \n\tsyncEvents . add ( new SharedObjectEvent ( Type . CLIENT_SEND_MESSAGE , handler , arguments ) ) ; \n\t$F5224 ( sendStats ) } \n"}, {"code": "public void taskNow ( final Runnable r , boolean async ) { \n\tif ( async ) { \n\t\tasync ( r ) ; \n\t\t} \n\telse $F21689 ( r ) } \n"}, {"code": "public void reset $F72 { \n\t$F2268 ( cur ) $F2268 ( line ) inuse = _BOOL ; \n\t$F4910 ( word ) } \n"}, {"code": "protected void engineSetMode ( String mode ) throws NoSuchAlgorithmException { \n\tif ( ( mode != null ) && $F14072 ( mode ) ) { \n\t\tthrow new NoSuchAlgorithmException ( NUM00 + mode ) ; \n\t\t} \n\t} \n"}, {"code": "$F25079 ( deltaY , mPtrIndicator , DEBUG , PtrCLog , LOG_TAG , String , to , PtrIndicator , change , updatePos ) "}, {"code": "public static $F15367 childElementList ( DocumentFragment fragment ) { \n\t$F1275 ( fragment ) $F15375 ( elements ) $F15376 ( node , fragment ) if ( node != null ) { \n\t\tdo { \n\t\t\tif $F61358 ( node , Node ) $F15383 ( childElement , node , elements ) } \n\t\twhile $F15388 ( node ) ; \n\t\t} \n\treturn elements ; \n\t} \n"}, {"code": "$F31353 ( method , thisVar , returnVar , subSignature , java_lang_reflect_Field_set , params , java_lang_reflect_Field_get , defaultMethod ) "}, {"code": "public FloatArray resize ( FloatArray array , long size ) { \n\tif ( array instanceof BigFloatArray ) { \n\t\treturn resizeInPlace ( ( BigFloatArray ) array , size ) ; \n\t\t} \n\telse { \n\t\tAbstractArray arr = ( AbstractArray ) array ; \n\t\tfinal FloatArray newArray = newFloatArray ( size , arr . clearOnResize ) ; \n\t\tfor ( long i = NUM00 , end = Math . min ( size , array . size ( ) ) ; \n\t\ti < end ; \n\t\t++ i ) $F221909 ( newArray , i , array ) $F59 ( arr ) return newArray ; \n\t\t} \n\t} \n"}, {"code": "$F1 public boolean domainMatch ( final String host , String domain ) { \n\t$F12418 ( host , domain , _BOOL ) $F48788 ( domain ) return host . endsWith ( domain ) || host . equals ( domain . substring ( NUM00 ) ) ; \n\t} \n"}, {"code": "public boolean isDirty ( String key ) $F298 ( dirtyKeys , key ) "}, {"code": "final public void println ( float v ) { \n\tWriter out = this . out ; \n\t$F8249 ( out ) $F2544 ( s , String , v ) try { \n\t\t$F170077 ( out , s ) $F17918 ( out , _newline ) } \n\t$F53427 ( log , Level , e ) } \n"}, {"code": "public static BigInteger sizeOfDirectoryAsBigInteger ( File directory ) { \n\tcheckDirectory ( directory ) ; \n\t$F44946 ( files , directory ) if ( files == null ) { \n\t\treturn BigInteger . ZERO ; \n\t\t} \n\tBigInteger size = BigInteger . ZERO ; \n\tfor ( final File file : files ) { \n\t\ttry { \n\t\t\tif ( ! isSymlink ( file ) ) { \n\t\t\t\tsize = size . add ( BigInteger . valueOf ( sizeOf ( file ) ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F62612 } \n\treturn size ; \n\t} \n"}, {"code": "public double logDensityForInstance ( Instance instance ) throws Exception { \n\t$F2291 ( a , logJointDensitiesForInstance , instance ) double max = a [ Utils . maxIndex ( a ) ] ; \n\tdouble sum = NUM00 ; \n\tfor ( $F1139 ( i , a ) ) { \n\t\tsum += Math . exp ( a [ i ] - max ) ; \n\t\t} \n\treturn max + Math . log ( sum ) ; \n\t} \n"}, {"code": "public void testWhenComplete_sourceFailedActionFailed $F72 { \n\tfor ( $F2703 ( createIncomplete , _BOOL ) ) for ( $F40424 ( m , ExecutionMode ) ) { \n\t\t$F127413 ( a ) $F181556 ( ex1 ) $F181556 ( ex2 ) $F127411 ( f ) if ( ! createIncomplete ) f . completeExceptionally ( ex1 ) ; \n\t\tfinal $F70219 g = m . whenComplete ( f , null ) ; \n\t\tif ( createIncomplete ) f . completeExceptionally ( ex1 ) ; \n\t\tcheckCompletedWithWrappedException ( g , ex1 ) ; \n\t\tcheckCompletedExceptionally ( f , ex1 ) ; \n\t\t$F127421 ( assertEquals , a ) } \n\t} \n"}, {"code": "public static Angle greatCircleDistance ( LatLon p1 , LatLon p2 ) { \n\tif $F54923 ( p1 , p2 ) $F825 $F3545 ( lat1 , p1 ) $F3549 ( lon1 , p1 ) $F3545 ( lat2 , p2 ) $F3549 ( lon2 , p2 ) if ( lat1 == lat2 && lon1 == lon2 ) return Angle . ZERO ; \n\tdouble a = Math . sin ( ( lat2 - lat1 ) / NUM00 ) ; \n\tdouble b = Math . sin ( ( lon2 - lon1 ) / NUM00 ) ; \n\tdouble c = a * a + + Math . cos ( lat1 ) * Math . cos ( lat2 ) * b * b ; \n\tdouble distanceRadians = NUM00 * Math . asin ( Math . sqrt ( c ) ) ; \n\treturn Double . isNaN ( distanceRadians ) ? Angle . ZERO : Angle . fromRadians ( distanceRadians ) ; \n\t} \n"}, {"code": "public int indexOf ( $F9738 ( subString ) , int start ) { \n\t$F17370 ( start ) int subCount = subString . count ; \n\tint _count = count ; \n\tif ( subCount > NUM00 ) { \n\t\tif ( subCount + start > _count ) $F7629 $F1469 target = subString . value ; \n\t\tint subOffset = subString . offset ; \n\t\tchar firstChar = target [ subOffset ] ; \n\t\tint end = subOffset + subCount ; \n\t\twhile ( _BOOL ) { \n\t\t\tint i = indexOf ( firstChar , start ) ; \n\t\t\tif ( i == - NUM00 || subCount + i > _count ) $F7629 int o1 = offset + i , o2 = subOffset ; \n\t\t\t$F1469 _value = value ; \n\t\t\twhile ( ++ o2 < end && _value [ ++ o1 ] == target [ o2 ] ) $F845 $F3627 ( o2 , end , i ) start = i + NUM00 ; \n\t\t\t} \n\t\t} \n\treturn start < _count ? start : _count ; \n\t} \n"}, {"code": "$F1 public Query rewrite ( IndexReader reader ) throws IOException { \n\tif $F9634 ( disjuncts ) $F3262 ( disjuncts ) boolean actuallyRewritten = _BOOL ; \n\tList < Query > $F204 ( rewrittenDisjuncts ) ; \n\tfor ( Query sub : disjuncts ) { \n\t\tQuery rewrittenSub = sub . rewrite ( reader ) ; \n\t\tactuallyRewritten |= rewrittenSub != sub ; \n\t\trewrittenDisjuncts . add ( rewrittenSub ) ; \n\t\t} \n\tif ( actuallyRewritten ) { \n\t\treturn new DisjunctionMaxQuery ( rewrittenDisjuncts , tieBreakerMultiplier ) ; \n\t\t} \n\treturn super . rewrite ( reader ) ; \n\t} \n"}, {"code": "public static String valueOf ( long value ) $F23210 ( Long , value ) "}, {"code": "public static $F4203 boolean areSetsIdentical ( final $F28904 set1 , final $F28904 set2 ) { \n\tif ( set1 == set2 ) return _BOOL ; \n\tif ( CollectionUtil . size ( set1 ) != CollectionUtil . size ( set2 ) ) return _BOOL ; \n\tif $F4329 ( CollectionUtil , set1 ) return _BOOL ; \n\tfor ( final T t : set1 ) if $F2200 ( set2 , t ) return _BOOL ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "$F1 public int compareTo ( Value o ) { \n\t$F93077 ( hashCode , o ) } \n"}, {"code": "$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel ) "}, {"code": "private static void addOptions ( $F20109 ( cmd ) , Map < CheckerProp , Object > props ) { \n\tfor ( $F40424 ( cp , CheckerProp ) ) { \n\t\tcmd . addAll ( cp . getCmdLine ( props ) ) ; \n\t\t} \n\t} \n"}, {"code": "public boolean obsolete $F72 { \n\t$F11844 ( stamp ) boolean undeployed = usage . get ( stamp ) ; \n\treturn undeployed && stamp [ NUM00 ] == NUM00 ; \n\t} \n"}, {"code": "$F10188 ( close , Util , directory ) "}, {"code": "boolean popNamespace ( String prefix ) { \n\t$F72106 ( prefix , XML_PREFIX , _BOOL ) Stack stack ; \n\tif $F2108 ( stack , getPrefixStack , prefix ) { \n\t\t$F34454 ( stack ) return _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void redoLastAction $F72 { \n\ttry { \n\t\tif ( undoManager . canRedo ( ) ) undoManager . redo ( ) ; \n\t\t} \n\tcatch ( CannotRedoException cre ) $F302 ( cre ) } \n"}, {"code": "protected void continueWrite $F72 { \n\t$F35060 ( log ) Iterator < VariableValue > i = variables . iterator ( ) ; \n\twhile $F2921 ( i ) { \n\t\tVariableValue v = i . next ( ) ; \n\t\tif ( v . isToWrite ( ) && ( ! writingChanges || v . isChanged ( ) ) ) { \n\t\t\tamWriting = _BOOL ; \n\t\t\tsetBusy ( _BOOL ) ; \n\t\t\tlog . debug ( NUM00 + v . label ( ) + NUM00 + writingChanges ) ; \n\t\t\tif ( writingChanges ) { \n\t\t\t\tv . writeChanges ( ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tv . writeAll ( ) ; \n\t\t\t\t} \n\t\t\t$F980 ( log ) $F665 } \n\t\t} \n\tamWriting = _BOOL ; \n\tsuper . setState ( STORED ) ; \n\tsetBusy ( _BOOL ) ; \n\t$F980 ( log ) } \n"}, {"code": "private void startGame ( GameLaunchMessage gameLaunchMessage , Faction faction , RatingMode ratingMode , Integer localRelayPort ) { \n\tif ( isRunning ( ) ) $F100849 ( logger ) stopSearchRanked1v1 ( ) ; \n\t$F3803 args = fixMalformedArgs ( gameLaunchMessage . getArgs ( ) ) ; \n\ttry { \n\t\tlocalRelayServer . getPort ( ) ; \n\t\tprocess = forgedAllianceService . startGame ( gameLaunchMessage . getUid ( ) , gameLaunchMessage . getMod ( ) , faction , args , ratingMode , localRelayPort , rehostRequested ) ; \n\t\tsetGameRunning ( _BOOL ) ; \n\t\tthis . ratingMode = ratingMode ; \n\t\tspawnTerminationListener ( process ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\t$F18942 ( logger , e ) notificationService . addNotification ( new ImmediateNotification ( i18n . get ( NUM00 ) , i18n . get ( NUM00 ) , Severity . ERROR , e , Arrays . asList ( new ReportAction ( i18n , reportingService , e ) , new DismissAction ( i18n ) ) ) ) ; \n\t\t} \n\t} \n"}, {"code": "public void addLine ( String line ) { \n\t$F129840 ( index , line ) if ( index != - NUM00 ) { \n\t\taddLenient ( line . substring ( NUM00 , index ) , line . substring ( index + NUM00 ) ) ; \n\t\t} \n\telse if $F3106 ( line ) { \n\t\taddLenient ( NUM00 , line . substring ( NUM00 ) ) ; \n\t\t} \n\telse $F1941 ( addLenient , line ) } \n"}, {"code": "private synchronized void addEntries ( Hashtable entries ) $F96492 ( entryDirectory , entries ) "}, {"code": "$F100301 ( RequestMethod ) $F4586 public RestWrapper updateOneRecord ( $F100302 $F100303 GeneralConfig generalConfig , BindingResult bindingResult , Principal principal ) { \n\tRestWrapper restWrapper = null ; \n\t$F100315 ( bindingResult , bindingResultError ) try { \n\t\tif ( generalConfig . getRequired ( ) <= NUM00 ) { \n\t\t\tcom . wipro . ats . bdre . md . dao . jpa . GeneralConfig jpaGeneralConfigUpdate = new com . wipro . ats . bdre . md . dao . jpa . GeneralConfig $F72 ; \n\t\t\tGeneralConfigId jpaGeneralConfigId = new GeneralConfigId $F72 ; \n\t\t\tjpaGeneralConfigId . setConfigGroup ( generalConfig . getConfigGroup ( ) ) ; \n\t\t\tjpaGeneralConfigId . setGcKey ( generalConfig . getKey ( ) ) ; \n\t\t\tjpaGeneralConfigUpdate . setId ( jpaGeneralConfigId ) ; \n\t\t\tjpaGeneralConfigUpdate . setDefaultVal ( generalConfig . getDefaultVal ( ) ) ; \n\t\t\t$F100328 ( jpaGeneralConfigUpdate , generalConfig ) jpaGeneralConfigUpdate . setEnabled ( generalConfig . isEnabled ( ) ) ; \n\t\t\tjpaGeneralConfigUpdate . setGcValue ( generalConfig . getValue ( ) ) ; \n\t\t\tif ( generalConfig . getRequired ( ) == NUM00 ) jpaGeneralConfigUpdate . setRequired ( _BOOL ) ; \n\t\t\telse jpaGeneralConfigUpdate . setRequired ( _BOOL ) ; \n\t\t\tjpaGeneralConfigUpdate . setType ( generalConfig . getType ( ) ) ; \n\t\t\tLOGGER . info ( generalConfig ) ; \n\t\t\tgeneralConfigDAO . update ( jpaGeneralConfigUpdate ) ; \n\t\t\t$F4608 ( restWrapper , generalConfig , RestWrapper ) LOGGER . info ( NUM00 + jpaGeneralConfigId . getGcKey ( ) + NUM00 + jpaGeneralConfigId . getConfigGroup ( ) + NUM00 + principal . getName ( ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\t$F9464 ( LOGGER ) restWrapper = new RestWrapper ( NUM00 , RestWrapper . ERROR ) ; \n\t\t\t} \n\t\t} \n\t$F100376 ( LOGGER , e , restWrapper , RestWrapper ) return restWrapper ; \n\t} \n"}, {"code": "public static void loadProject ( final JTree tree , final INaviProject project ) { \n\t$F1832 ( Preconditions , tree ) $F1832 ( Preconditions , project ) loadProjectThreaded ( SwingUtilities . getWindowAncestor ( tree ) , project , tree ) ; \n\t} \n"}, {"code": "public Enumeration listOptions $F72 { \n\t$F153203 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F1007 ( newVector ) } \n"}, {"code": "public static DataPolicy fromOrdinal ( byte ordinal ) $F269670 ( VALUES , ordinal ) "}, {"code": "public static boolean isInstalled ( PackageManager packageManager , String packageName ) { \n\tList < PackageInfo > packs = packageManager . getInstalledPackages ( NUM00 ) ; \n\tfor ( $F2277 ( i , packs ) ) { \n\t\tif ( TextUtils . equals ( packs . get ( i ) . packageName , packageName ) ) return _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void addSetAttribute ( final SetAttribute setAttribute ) $F207 ( setAttributes , setAttribute ) "}, {"code": "static String applyTemplate ( final String template , $F87266 ( map ) ) { \n\tconfiguration = getConfiguration ( ) ; \n\ttry ( ByteArrayOutputStream outputStream = $F1535 ; \n\tWriter writer = new OutputStreamWriter ( outputStream ) ) { \n\t\tTemplate configurationTemplate = configuration . getTemplate ( template ) ; \n\t\tconfigurationTemplate . process ( map , writer ) ; \n\t\t$F92 ( outputStream ) } \n\t$F51077 ( e ) } \n"}, {"code": "final void putShort ( int offset , short value ) { \n\tunsafe . putShort ( offset + address , value ) ; \n\t} \n"}, {"code": "public static Clob toClob ( Object value ) throws PageException { \n\tif ( value instanceof Clob ) return ( Clob ) value ; \n\telse if ( value instanceof $F1469 ) return toClob ( new String ( $F114168 ( value ) ) ) ; \n\telse if ( value instanceof Reader ) { \n\t\t$F29429 ( sw ) try { \n\t\t\tIOUtil . copy ( ( Reader ) value , sw , _BOOL , _BOOL ) ; \n\t\t\t} \n\t\tcatch ( IOException e ) { \n\t\t\tthrow ExpressionException . newInstance ( e ) ; \n\t\t\t} \n\t\t$F17718 ( toClob , sw ) } \n\treturn toClob ( Caster . toString ( value ) ) ; \n\t} \n"}, {"code": "private JFreeChart createHistogramChart ( ExampleSet exampleSet ) { \n\tJFreeChart chart = ChartFactory . createHistogram ( null , null , null , createHistogramDataset ( exampleSet ) , PlotOrientation . VERTICAL , _BOOL , _BOOL , _BOOL ) ; \n\tAbstractAttributeStatisticsModel . setDefaultChartFonts ( chart ) ; \n\tchart . setBackgroundPaint ( null ) ; \n\tchart . setBackgroundImageAlpha ( NUM00 ) ; \n\tXYPlot plot = ( XYPlot ) chart . getPlot ( ) ; \n\tplot . setRangeGridlinesVisible ( _BOOL ) ; \n\tplot . setDomainGridlinesVisible ( _BOOL ) ; \n\tplot . setOutlineVisible ( _BOOL ) ; \n\tplot . setRangeZeroBaselineVisible ( _BOOL ) ; \n\tplot . setDomainZeroBaselineVisible ( _BOOL ) ; \n\tplot . setBackgroundPaint ( COLOR_INVISIBLE ) ; \n\tplot . setBackgroundImageAlpha ( NUM00 ) ; \n\tXYBarRenderer renderer = ( XYBarRenderer ) plot . getRenderer ( ) ; \n\trenderer . setSeriesPaint ( NUM00 , AttributeGuiTools . getColorForValueType ( Ontology . NUMERICAL ) ) ; \n\trenderer . setBarPainter ( new StandardXYBarPainter $F72 ) ; \n\trenderer . setDrawBarOutline ( _BOOL ) ; \n\trenderer . setShadowVisible ( _BOOL ) ; \n\treturn chart ; \n\t} \n"}, {"code": "$F17124 save $F72 { \n\tListBuffer $F12993 $F53349 ( buf ) ; \n\tfor ( Type t : undetvars ) { \n\t\tUndetVar uv = ( UndetVar ) t ; \n\t\tUndetVar uv2 = new UndetVar ( ( TypeVar ) uv . qtype , types ) ; \n\t\tfor ( $F40424 ( ib , InferenceBound ) ) { \n\t\t\tfor ( Type b : uv . getBounds ( ib ) ) { \n\t\t\t\tuv2 . addBound ( ib , b , types ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tuv2 . inst = uv . inst ; \n\t\tbuf . add ( uv2 ) ; \n\t\t} \n\treturn buf . toList ( ) ; \n\t} \n"}, {"code": "public int executeProcess $F72 { \n\t$F73562 ( processStrings , tokenizeString , execCommand ) $F42501 ( processStrings , tokenizeString , script ) $F102990 ( logger , MessageFormat , processStrings ) final ProcessBuilder processBuilder = new ProcessBuilder ( processStrings ) ; \n\tif ( workingDirectory != null ) { \n\t\tfinal Path dir = Paths . get ( workingDirectory ) ; \n\t\tif ( Files . notExists ( dir ) ) { \n\t\t\ttry { \n\t\t\t\tFiles . createDirectories ( dir ) ; \n\t\t\t\t} \n\t\t\tcatch ( IOException e ) { \n\t\t\t\t$F37855 ( logger , workingDirectory ) $F150 } \n\t\t\t} \n\t\telse if ( ! Files . isDirectory ( dir ) ) { \n\t\t\tlogger . warning ( workingDirectory + NUM00 ) ; \n\t\t\t$F150 } \n\t\tfinal File directory = dir . toFile ( ) ; \n\t\tprocessBuilder . directory ( directory ) ; \n\t\t} \n\tprocessBuilder . redirectErrorStream ( _BOOL ) ; \n\tInteger exitValue ; \n\ttry { \n\t\t$F973 ( logger ) final Process process = processBuilder . start ( ) ; \n\t\tsendInputStringToProcess ( process ) ; \n\t\thandleProcessOutput ( process ) ; \n\t\ttry { \n\t\t\texitValue = process . waitFor ( ) ; \n\t\t\t} \n\t\tcatch ( InterruptedException e ) { \n\t\t\t$F18143 ( logger ) $F17623 ( process ) exitValue = - NUM00 ; \n\t\t\t} \n\t\t$F9472 ( logger , exitValue ) } \n\tcatch ( IOException e ) { \n\t\tlogger . log ( SEVERE , NUM00 , e . getCause ( ) ) ; \n\t\texitValue = - NUM00 ; \n\t\t} \n\treturn exitValue ; \n\t} \n"}, {"code": "$F20329 ( desc , start , checkDesc , _BOOL ) "}, {"code": "protected Rectangle applyMargins ( Rectangle rect , $F5415 margins , boolean reverse ) { \n\tif ( isPositioned ( ) ) return rect ; \n\treturn rect . < Rectangle > applyMargins ( margins [ NUM00 ] , margins [ NUM00 ] , margins [ NUM00 ] , margins [ NUM00 ] , reverse ) ; \n\t} \n"}, {"code": "private void resetAttempts $F72 { \n\tfor ( final PoliticalActionAttachment paa : PoliticalActionAttachment . getPoliticalActionAttachments ( m_player ) ) { \n\t\tpaa . resetAttempts ( getBridge ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static Number minus ( Character left , Character right ) $F209729 ( minus , Integer , left , right ) "}, {"code": "public void findAndInit ( Object someObj ) { \n\tif ( someObj instanceof MouseDelegator ) { \n\t\t$F36253 ( Debug ) setMouseDelegator ( ( MouseDelegator ) someObj ) ; \n\t\t} \n\t} \n"}, {"code": "public static int toInt ( final String value ) $F75349 ( Integer , value ) "}, {"code": "protected Object evaluateLeftLessRight ( List elements , String lvalue , String rvalue ) { \n\tList array ; \n\tif ( elements instanceof $F11420 ) { \n\t\tarray = new $F11420 $F72 ; \n\t\t} \n\telse $F13242 ( array ) for ( $F2774 ( e , elements ) ) { \n\t\t$F8877 ( o , e ) if ( o instanceof StructuredContent ) { \n\t\t\tif ( ( o = evaluateLeftLessRight ( ( StructuredContent ) o , lvalue , rvalue ) ) != null ) $F207 ( array , o ) } \n\t\t} \n\tif $F10471 ( array ) { \n\t\treturn ( StructuredContent ) array . get ( NUM00 ) ; \n\t\t} \n\treturn array ; \n\t} \n"}, {"code": "static void checkTypeRefAndPath ( int typeRef , TypePath typePath ) { \n\tint mask = NUM00 ; \n\tswitch $F14870 ( typeRef ) { \n\t\tcase TypeReference . CLASS_TYPE_PARAMETER : case TypeReference . METHOD_TYPE_PARAMETER : case TypeReference . METHOD_FORMAL_PARAMETER : mask = NUM00 ; \n\t\t$F597 case TypeReference . FIELD : case TypeReference . METHOD_RETURN : case TypeReference . METHOD_RECEIVER : case TypeReference . LOCAL_VARIABLE : case TypeReference . RESOURCE_VARIABLE : case TypeReference . INSTANCEOF : case TypeReference . NEW : case TypeReference . CONSTRUCTOR_REFERENCE : case TypeReference . METHOD_REFERENCE : mask = NUM00 ; \n\t\t$F597 case TypeReference . CLASS_EXTENDS : case TypeReference . CLASS_TYPE_PARAMETER_BOUND : case TypeReference . METHOD_TYPE_PARAMETER_BOUND : case TypeReference . THROWS : case TypeReference . EXCEPTION_PARAMETER : mask = NUM00 ; \n\t\t$F597 case TypeReference . CAST : case TypeReference . CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT : case TypeReference . METHOD_INVOCATION_TYPE_ARGUMENT : case TypeReference . CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT : case TypeReference . METHOD_REFERENCE_TYPE_ARGUMENT : mask = NUM00 ; \n\t\t$F597 $F1267 throw new IllegalArgumentException ( NUM00 + Integer . toHexString ( typeRef > > > NUM00 ) ) ; \n\t\t} \n\tif ( ( typeRef & ~ mask ) != NUM00 ) { \n\t\tthrow new IllegalArgumentException $F184522 ( Integer , typeRef ) ; \n\t\t} \n\tif ( typePath != null ) { \n\t\tfor ( $F184528 ( i , typePath ) ) { \n\t\t\tint step = typePath . getStep ( i ) ; \n\t\t\tif ( step != TypePath . ARRAY_ELEMENT && step != TypePath . INNER_TYPE && step != TypePath . TYPE_ARGUMENT && step != TypePath . WILDCARD_BOUND ) $F20855 ( i , typePath ) if ( step != TypePath . TYPE_ARGUMENT && typePath . getStepArgument ( i ) != NUM00 ) $F20855 ( i , typePath ) } \n\t\t} \n\t} \n"}, {"code": "public void removeCatchable ( CatchablePokemon pokemon ) { \n\tif $F3817 ( cachedCatchable ) $F106 ( cachedCatchable , pokemon ) } \n"}, {"code": "$F1431 $F1 protected void fillBuffer $F72 { \n\tint oldP = p ; \n\t$F2199 ( index , tokens ) Token t = tokenSource . nextToken ( ) ; \n\twhile ( t != null && t . getType ( ) != CharStream . EOF ) { \n\t\t$F20997 ( type , t ) if ( type == InternalN4JSLexer . Solidus || type == InternalN4JSLexer . SolidusEqualsSign || type == InternalN4JSLexer . RightCurlyBracket ) { \n\t\t\tt . setTokenIndex ( index ) ; \n\t\t\ttokens . add ( t ) ; \n\t\t\tindex ++ ; \n\t\t\t$F597 } \n\t\tboolean discard = _BOOL ; \n\t\tif ( channelOverrideMap != null ) { \n\t\t\tInteger channelI = ( Integer ) $F126975 ( channelOverrideMap , Integer , type ) ; \n\t\t\tif ( channelI != null ) { \n\t\t\t\tt . setChannel ( channelI . intValue ( ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( discardSet != null && discardSet . contains ( Integer . valueOf ( type ) ) ) { \n\t\t\tdiscard = _BOOL ; \n\t\t\t} \n\t\telse if ( discardOffChannelTokens && t . getChannel ( ) != this . channel ) { \n\t\t\tdiscard = _BOOL ; \n\t\t\t} \n\t\tif ( ! discard ) { \n\t\t\tt . setTokenIndex ( index ) ; \n\t\t\ttokens . add ( t ) ; \n\t\t\tindex ++ ; \n\t\t\t} \n\t\t$F39710 ( t , tokenSource ) } \n\tp = oldP == - NUM00 ? NUM00 : oldP ; \n\tp = skipOffTokenChannels ( p ) ; \n\t} \n"}, {"code": "char caseFold ( char c ) { \n\tif ( alternateCasing ) { \n\t\tif ( c == NUM00 ) $F2455 else if ( c == NUM00 ) $F2455 else { \n\t\t\treturn Character . toLowerCase ( c ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\treturn Character . toLowerCase ( c ) ; \n\t\t} \n\t} \n"}, {"code": "public void writeCountsComparisonList $F2236 ( filename , format ) { \n\tif ( format . compareToIgnoreCase ( NUM00 ) == NUM00 ) { \n\t\tCountSimComparisonKMLWriter kmlWriter = new CountSimComparisonKMLWriter ( countsComparisonList , this . network , TransformationFactory . getCoordinateTransformation ( this . coordinateSystem , TransformationFactory . WGS84 ) ) ; \n\t\tkmlWriter . writeFile ( filename ) ; \n\t\t} \n\telse if ( format . compareToIgnoreCase ( NUM00 ) == NUM00 ) { \n\t\tCountSimComparisonTableWriter writer = new CountSimComparisonTableWriter ( countsComparisonList , Locale . US ) ; \n\t\twriter . writeFile ( filename ) ; \n\t\t} \n\telse $F825 ComparisonErrorStatsCalculator errorStats = new ComparisonErrorStatsCalculator ( countsComparisonList ) ; \n\t$F1993 ( hours ) for ( $F6268 ( i ) ) { \n\t\thours [ i - NUM00 ] = i ; \n\t\t} \n\tDoubleArrayTableWriter tableWriter = new DoubleArrayTableWriter $F72 ; \n\ttableWriter . addColumn ( hours ) ; \n\ttableWriter . addColumn ( errorStats . getMeanRelError ( ) ) ; \n\ttableWriter . writeFile ( filename + NUM00 ) ; \n\t} \n"}, {"code": "public void testSubtractMathContextDiffScalePosNeg $F72 { \n\tString a = NUM00 ; \n\tint aScale = NUM00 ; \n\tString b = NUM00 ; \n\tint bScale = - NUM00 ; \n\tString c = NUM00 ; \n\tint cScale = - NUM00 ; \n\t$F1918 ( aNumber , a , aScale ) $F1918 ( bNumber , b , bScale ) MathContext mc = new MathContext ( NUM00 , RoundingMode . DOWN ) ; \n\tBigDecimal result = aNumber . subtract ( bNumber , mc ) ; \n\t$F1925 ( assertEquals , c , result ) $F1928 ( assertEquals , cScale , result ) } \n"}, {"code": "public void putGrammar ( DTDGrammar grammar ) { \n\tXMLDTDDescription desc = ( XMLDTDDescription ) grammar . getGrammarDescription ( ) ; \n\tfGrammars . put ( desc , grammar ) ; \n\t} \n"}, {"code": "public ServiceCall < TranslationResult > translate ( final String text , final Language source , final Language target ) { \n\treturn translate ( Collections . singletonList ( text ) , source , target ) ; \n\t} \n"}, {"code": "$F1 public int execute ( final FormObject form , final int type , final String code , final int eventType , final char keyPressed ) { \n\tint messageCode ; \n\tfinal String js = code ; \n\tfinal $F806 args = JSFunction . convertToArray ( js ) ; \n\t$F244765 ( command , args ) if $F3106 ( command ) { \n\t\tmessageCode = handleAFCommands ( form , command , js , args , eventType , keyPressed ) ; \n\t\t} \n\telse { \n\t\texecuteFunctions ( js , form , acro ) ; \n\t\tmessageCode = ActionHandler . VALUESCHANGED ; \n\t\t} \n\tif ( type == PdfDictionary . F ) { \n\t\tcalcualteEvent ( ) ; \n\t\tmessageCode = ActionHandler . VALUESCHANGED ; \n\t\t} \n\treturn messageCode ; \n\t} \n"}, {"code": "private Object readResolve $F72 { \n\tsynchronized ( levels ) { \n\t\tfor ( Level level : levels ) { \n\t\t\tif ( value != level . value ) $F1448 if $F45204 ( name , level ) $F1448 if ( Objects . equal ( resourceBundleName , level . resourceBundleName ) ) { \n\t\t\t\treturn level ; \n\t\t\t\t} \n\t\t\t} \n\t\tlevels . add ( this ) ; \n\t\treturn this ; \n\t\t} \n\t} \n"}, {"code": "private static void repeat ( String pattern , int count , Appendable out ) throws IOException { \n\twhile $F11984 ( count , pattern ) { \n\t\tout . append ( pattern ) ; \n\t\tcount -= pattern . length ( ) ; \n\t\t} \n\tif ( count > NUM00 ) { \n\t\t$F58551 ( out , pattern , count ) } \n\t} \n"}, {"code": "private void cleanUp ( Reference $F1011 reference ) throws ShutDown { \n\tMethod finalizeReferentMethod = getFinalizeReferentMethod ( ) ; \n\tdo { \n\t\t$F725 ( reference ) if ( reference == frqReference ) { \n\t\t\tthrow new ShutDown $F72 ; \n\t\t\t} \n\t\ttry $F173188 ( finalizeReferentMethod , reference ) catch ( Throwable t ) $F55754 ( logger , Level , t ) } \n\twhile $F22655 ( reference , queue ) ; \n\t} \n"}, {"code": "$F32357 ( Class , _BOOL ) "}, {"code": "public $F147000 Queue . Item run2 ( $F2304 String replacementMainScript , $F2304 $F2539 replacementLoadedScripts ) { \n\tList < Action > actions = new ArrayList < Action > $F72 ; \n\tCpsFlowExecution execution = getExecution ( ) ; \n\t$F1338 ( execution ) actions . add ( new ReplayFlowFactoryAction ( replacementMainScript , replacementLoadedScripts , execution . isSandbox ( ) ) ) ; \n\tactions . add ( new CauseAction ( new Cause . UserIdCause $F72 , new ReplayCause ( run ) ) ) ; \n\tfor ( Class < ? extends Action > c : COPIED_ACTIONS ) { \n\t\tactions . addAll ( run . getActions ( c ) ) ; \n\t\t} \n\treturn ParameterizedJobMixIn . scheduleBuild2 ( run . getParent ( ) , NUM00 , actions . toArray ( new Action $F2313 ( actions ) ) ) ; \n\t} \n"}, {"code": "public static SecretKeys keys ( String keysStr ) throws InvalidKeyException { \n\t$F6542 ( keysArr , keysStr ) if $F11845 ( keysArr ) $F825 else { \n\t\t$F134490 ( confidentialityKey , Base64 , keysArr , BASE64_FLAGS ) $F134496 ( confidentialityKey , AES_KEY_LENGTH_BITS ) $F134490 ( integrityKey , Base64 , keysArr , BASE64_FLAGS ) $F134496 ( integrityKey , HMAC_KEY_LENGTH_BITS ) SecretKeys secretKeys = new SecretKeys $F72 ; \n\t\tSecretKeySpec secretKeySpec = new SecretKeySpec $F72 ; \n\t\tsecretKeySpec . generate ( confidentialityKey , NUM00 , confidentialityKey . length , CIPHER ) ; \n\t\tSecretKeySpec secretKeySpec1 = new SecretKeySpec $F72 ; \n\t\tsecretKeySpec1 . generate ( integrityKey , HMAC_ALGORITHM ) ; \n\t\tsecretKeys . setConfidentialityKey ( secretKeySpec ) ; \n\t\tsecretKeys . setIntegrityKey ( secretKeySpec1 ) ; \n\t\treturn secretKeys ; \n\t\t} \n\t} \n"}, {"code": "public Path [ ] chooseStartingPaths ( final int nedges , final Path [ ] paths ) { \n\tfinal $F77502 tmp = new LinkedList $F72371 $F72 ; \n\tArrays . sort ( paths , NUM00 , paths . length , EstimatedCardinalityComparator . INSTANCE ) ; \n\tfor ( int i = NUM00 ; \n\ti < paths . length && i < nedges ; \n\ti ++ ) $F24617 ( tmp , paths , i ) return tmp . toArray ( new Path $F2313 ( tmp ) ) ; \n\t} \n"}, {"code": "private void safeBottomView $F72 { \n\tStatus status = getOpenStatus ( ) ; \n\tViewGroup bottom = getBottomView ( ) ; \n\tif ( status == Status . Close ) $F141296 ( bottom , INVISIBLE ) else $F141296 ( bottom , VISIBLE ) } \n"}, {"code": "public static int uniform ( int n ) { \n\tif ( n <= NUM00 ) $F824 return random . nextInt ( n ) ; \n\t} \n"}, {"code": "private void viewDelta ( final Item item ) { \n\tfinal DeltaFragment fragment = DeltaFragment . newInstance ( item ) ; \n\tnavigateToFragment ( fragment ) ; \n\t} \n"}, {"code": "public Message ( String type , double value ) { \n\tif $F2200 ( VALID_TYPES , type ) { \n\t\tthrow new IllegalArgumentException ( type + NUM00 + NUM00 ) ; \n\t\t} \n\tthis . type = type ; \n\tthis . value = value ; \n\t} \n"}, {"code": "public void addAll ( final CasualtyList casualtyList ) { \n\tm_damaged . addAll ( casualtyList . getDamaged ( ) ) ; \n\tm_killed . addAll ( casualtyList . getKilled ( ) ) ; \n\t} \n"}, {"code": "public static String importResultSet ( ResultSet source , Database db , String name , ImportFilter filter , boolean useExistingTable ) throws SQLException , IOException { \n\t$F19097 ( md , source ) name = TableBuilder . escapeIdentifier ( name ) ; \n\tTable table = null ; \n\tif ( ! useExistingTable || ( ( table = db . getTable ( name ) ) == null ) ) { \n\t\tList < ColumnBuilder > columns = toColumns ( md ) ; \n\t\ttable = createUniqueTable ( db , name , columns , md , filter ) ; \n\t\t} \n\t$F60674 rows = new ArrayList $F60673 ( COPY_TABLE_BATCH_SIZE ) ; \n\t$F16742 ( numColumns , md ) while $F1682 ( source ) { \n\t\t$F133 ( row , numColumns ) for ( $F1139 ( i , row ) ) { \n\t\t\trow [ i ] = source . getObject ( i + NUM00 ) ; \n\t\t\t} \n\t\trow = filter . filterRow ( row ) ; \n\t\t$F4322 ( row ) rows . add ( row ) ; \n\t\tif $F36323 ( rows , COPY_TABLE_BATCH_SIZE ) { \n\t\t\ttable . addRows ( rows ) ; \n\t\t\t$F725 ( rows ) } \n\t\t} \n\tif $F3817 ( rows ) { \n\t\ttable . addRows ( rows ) ; \n\t\t} \n\treturn table . getName ( ) ; \n\t} \n"}, {"code": "$F1 public long skip ( long n ) throws IOException { \n\tlong remaining = n ; \n\tfinal $F1469 ch = new char [ fBuffer . length ] ; \n\tdo { \n\t\tint length = ch . length < remaining ? ch . length : ( int ) remaining ; \n\t\tint count = read ( ch , NUM00 , length ) ; \n\t\tif ( count > NUM00 ) { \n\t\t\tremaining -= count ; \n\t\t\t} \n\t\telse $F5153 } \n\twhile ( remaining > NUM00 ) ; \n\tlong skipped = n - remaining ; \n\treturn skipped ; \n\t} \n"}, {"code": "public static $F2469 hashToLongs ( double datum , long seed ) { \n\tdouble d = $F176019 ( datum ) ; \n\t$F2469 data = { \n\t\tDouble . doubleToLongBits ( d ) } \n\t; \n\treturn hash ( data , seed ) ; \n\t} \n"}, {"code": "private boolean allowUploadCrashDump $F72 { \n\tif ( isCellularExperimentEnabled ( ) ) return isUsageAndCrashReportingEnabled ( ) ; \n\tif ( isMobileNetworkCapable ( ) ) { \n\t\tString option = mSharedPreferences . getString ( PREF_CRASH_DUMP_UPLOAD , mCrashDumpNeverUpload ) ; \n\t\treturn option . equals ( mCrashDumpAlwaysUpload ) || ( option . equals ( mCrashDumpWifiOnlyUpload ) && isWiFiOrEthernetNetwork ( ) ) ; \n\t\t} \n\treturn mSharedPreferences . getBoolean ( PREF_CRASH_DUMP_UPLOAD_NO_CELLULAR , _BOOL ) ; \n\t} \n"}, {"code": "private $F2027 joinMap $F22564 ( a , b ) { \n\t$F1933 ( a , b ) $F1933 ( b , a ) $F2027 result = new int $F12348 ( a , b ) ; \n\t$F7057 ( System , a , result ) $F11244 ( System , b , result , a ) return result ; \n\t} \n"}, {"code": "private void readObject ( ObjectInputStream in ) throws $F125668 { \n\t$F6428 ( in ) $F18058 ( iter , col ) } \n"}, {"code": "public LabelSet ( int indices [ ] , boolean sort ) { \n\tthis . indices = indices ; \n\tif ( sort == _BOOL ) Arrays . sort ( this . indices ) ; \n\t} \n"}, {"code": "public void diffEquals $F72 { \n\t$F69807 ( col ) for ( $F1139 ( i , A ) ) { \n\t\tcol = new double [ A [ i ] . length - NUM00 ] ; \n\t\tfor ( $F179379 ( j , A , i ) ) col [ j - NUM00 ] = Math . abs ( A [ i ] [ j ] - A [ i ] [ j - NUM00 ] ) ; \n\t\tA [ i ] = col ; \n\t\t} \n\tn -- ; \n\t} \n"}, {"code": "private static void printStackTraceElement ( StackTraceElement trace , PrintWriter out , ClassLoader loader ) { \n\ttry { \n\t\tLineMap map = getScriptLineMap ( trace . getClassName ( ) , loader ) ; \n\t\tif ( map != null ) { \n\t\t\tLineMap . Line line = map . getLine ( trace . getLineNumber ( ) ) ; \n\t\t\tif ( line != null ) { \n\t\t\t\tout . print ( trace . getClassName ( ) + NUM00 + trace . getMethodName ( ) ) ; \n\t\t\t\tout . print ( NUM00 + line . getSourceFilename ( ) + NUM00 ) ; \n\t\t\t\tout . println ( line . getSourceLine ( trace . getLineNumber ( ) ) + NUM00 ) ; \n\t\t\t\t$F665 } \n\t\t\t} \n\t\t} \n\t$F115820 out . println ( trace ) ; \n\t} \n"}, {"code": "$F196938 ( textCompactionData , byteCompactionData , length , result , subMode , Mode , priorToShiftMode , i , subModeCh , ch , ALPHA , LL , ML , PS , MODE_SHIFT_TO_BYTE_COMPACTION_MODE , TEXT_COMPACTION_MODE_LATCH , LOWER , AS , MIXED , PL , MIXED_CHARS , AL , PUNCT , PAL , PUNCT_CHARS , ALPHA_SHIFT , PUNCT_SHIFT ) "}, {"code": "public void readInformationObject ( final PdfObject infoObj , final ObjectDecoder objectDecoder ) { \n\ttry { \n\t\tobjectDecoder . checkResolved ( infoObj ) ; \n\t\t} \n\tcatch ( final Exception e ) $F65913 ( LogWriter , e ) String newValue ; \n\tint id ; \n\t$F96 data ; \n\tfinal int count = PdfFileInformation . information_field_IDs . length ; \n\tfor ( $F119 ( i , count ) ) { \n\t\tid = PdfFileInformation . information_field_IDs [ i ] ; \n\t\tif ( id == PdfDictionary . Trapped ) { \n\t\t\tnewValue = infoObj . getName ( id ) ; \n\t\t\t$F23170 ( newValue ) } \n\t\telse { \n\t\t\tdata = infoObj . getTextStreamValueAsByte ( id ) ; \n\t\t\tif ( data == null ) { \n\t\t\t\tnewValue = NUM00 ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tnewValue = StringUtils . getTextString ( data , _BOOL ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tsetFieldValue ( i , newValue ) ; \n\t\t} \n\t} \n"}, {"code": "private void cmd_calculateDifference $F72 { \n\tBigDecimal previousValue , actualValue ; \n\tTimestamp today = TimeUtil . getDay ( System . currentTimeMillis ( ) ) ; \n\tMCash cash = MCash . get ( p_pos . getCtx ( ) , p_pos . getC_CashBook_ID ( ) , today , null ) ; \n\tv_previousBalance . setValue ( cash . getEndingBalance ( ) ) ; \n\tpreviousValue = cash . getEndingBalance ( ) ; \n\tactualValue = ( BigDecimal ) v_ActualBalance . getValue ( ) ; \n\tv_difference . setValue ( actualValue . subtract ( previousValue ) ) ; \n\t} \n"}, {"code": "public boolean testAllocation $F72 { \n\tboolean change = _BOOL ; \n\tif ( isProcessed ( ) ) { \n\t\tBigDecimal alloc = getAllocatedAmt ( ) ; \n\t\t$F307246 ( alloc , Env ) BigDecimal total = getGrandTotal ( ) ; \n\t\tif $F931 ( isSOTrx ) $F201387 ( total ) if ( isCreditMemo ( ) ) $F201387 ( total ) boolean test = total . compareTo ( alloc ) == NUM00 ; \n\t\tchange = test != isPaid ( ) ; \n\t\tif ( change ) setIsPaid ( test ) ; \n\t\tlog . fine ( NUM00 + test + NUM00 + alloc + NUM00 + total + NUM00 ) ; \n\t\t} \n\treturn change ; \n\t} \n"}, {"code": "private void requestForUpload ( OCFile file ) { \n\tFileUploader . UploadRequester requester = new FileUploader . UploadRequester $F72 ; \n\trequester . uploadUpdate ( mContext , mAccount , file , FileUploader . LOCAL_BEHAVIOUR_MOVE , _BOOL ) ; \n\tmTransferWasRequested = _BOOL ; \n\t} \n"}, {"code": "protected void decodeImageData $F72 { \n\tint NullCode = - NUM00 ; \n\tint npix = iw * ih ; \n\tint available , clear , code_mask , code_size , end_of_information , in_code , old_code , bits , code , count , i , datum , data_size , first , top , bi , pi ; \n\tif ( ( pixels == null ) || ( pixels . length < npix ) ) $F75474 ( pixels , npix ) if ( prefix == null ) $F69027 ( prefix , MaxStackSize ) if ( suffix == null ) $F1325 ( suffix , MaxStackSize ) if ( pixelStack == null ) $F83281 ( pixelStack , MaxStackSize ) ; \n\tdata_size = read ( ) ; \n\tclear = NUM00 < < data_size ; \n\tend_of_information = clear + NUM00 ; \n\tavailable = clear + NUM00 ; \n\told_code = NullCode ; \n\tcode_size = data_size + NUM00 ; \n\t$F143890 ( code_mask , code_size ) ; \n\tfor ( code = NUM00 ; \n\tcode < clear ; \n\tcode ++ ) { \n\t\tprefix [ code ] = NUM00 ; \n\t\t$F78924 ( suffix , code ) } \n\tdatum = bits = count = first = top = pi = bi = NUM00 ; \n\tfor ( i = NUM00 ; \n\ti < npix ; \n\t) { \n\t\tif ( top == NUM00 ) { \n\t\t\tif ( bits < code_size ) { \n\t\t\t\tif ( count == NUM00 ) { \n\t\t\t\t\tcount = readBlock ( ) ; \n\t\t\t\t\t$F137919 ( count ) bi = NUM00 ; \n\t\t\t\t\t} \n\t\t\t\tdatum += ( ( ( int ) block [ bi ] ) & NUM00 ) < < bits ; \n\t\t\t\tbits += NUM00 ; \n\t\t\t\tbi ++ ; \n\t\t\t\tcount -- ; \n\t\t\t\t$F598 } \n\t\t\tcode = datum & code_mask ; \n\t\t\tdatum >>= code_size ; \n\t\t\tbits -= code_size ; \n\t\t\tif ( ( code > available ) || ( code == end_of_information ) ) $F597 if ( code == clear ) { \n\t\t\t\tcode_size = data_size + NUM00 ; \n\t\t\t\t$F143890 ( code_mask , code_size ) ; \n\t\t\t\tavailable = clear + NUM00 ; \n\t\t\t\told_code = NullCode ; \n\t\t\t\t$F598 } \n\t\t\tif ( old_code == NullCode ) { \n\t\t\t\tpixelStack [ top ++ ] = suffix [ code ] ; \n\t\t\t\told_code = code ; \n\t\t\t\tfirst = code ; \n\t\t\t\t$F598 } \n\t\t\tin_code = code ; \n\t\t\tif ( code == available ) { \n\t\t\t\t$F11740 ( pixelStack , top , first ) code = old_code ; \n\t\t\t\t} \n\t\t\twhile ( code > clear ) { \n\t\t\t\tpixelStack [ top ++ ] = suffix [ code ] ; \n\t\t\t\tcode = prefix [ code ] ; \n\t\t\t\t} \n\t\t\tfirst = ( ( int ) suffix [ code ] ) & NUM00 ; \n\t\t\t$F612 ( available , MaxStackSize ) $F11740 ( pixelStack , top , first ) prefix [ available ] = ( short ) old_code ; \n\t\t\t$F8214 ( suffix , available , first ) available ++ ; \n\t\t\tif ( $F84469 ( available , code_mask ) && ( available < MaxStackSize ) ) { \n\t\t\t\tcode_size ++ ; \n\t\t\t\tcode_mask += available ; \n\t\t\t\t} \n\t\t\told_code = in_code ; \n\t\t\t} \n\t\ttop -- ; \n\t\tpixels [ pi ++ ] = pixelStack [ top ] ; \n\t\ti ++ ; \n\t\t} \n\tfor ( i = pi ; \n\ti < npix ; \n\ti ++ ) $F5629 ( pixels , i ) } \n"}, {"code": "void refreshCustomMasterList $F72 { \n\tif $F6036 ( customMasterCountries ) { \n\t\tcustomMasterCountriesList = null ; \n\t\t} \n\telse { \n\t\tList < Country > $F204 ( localCountryList ) ; \n\t\tfor ( $F55140 ( nameCode , customMasterCountries ) ) { \n\t\t\tCountry country = Country . getCountryForNameCodeFromLibraryMasterList ( customLanguage , nameCode ) ; \n\t\t\tif ( country != null ) { \n\t\t\t\tif ( ! isAlreadyInList ( country , localCountryList ) ) $F207 ( localCountryList , country ) } \n\t\t\t} \n\t\tif $F10471 ( localCountryList ) { \n\t\t\tcustomMasterCountriesList = null ; \n\t\t\t} \n\t\telse { \n\t\t\tcustomMasterCountriesList = localCountryList ; \n\t\t\t} \n\t\t} \n\tif ( customMasterCountriesList != null ) { \n\t\tfor ( Country country : customMasterCountriesList ) { \n\t\t\tcountry . log ( ) ; \n\t\t\t} \n\t\t} \n\telse $F845 } \n"}, {"code": "protected boolean isDtoGetter ( Method method ) { \n\tif ( method . isAnnotationPresent ( DelegateTo . class ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\t$F20605 ( methodName , method ) if ( $F418 ( methodName ) && $F36180 ( method ) == NUM00 ) { \n\t\tif $F53956 ( methodName ) { \n\t\t\treturn method . getReturnType ( ) == $F61970 || method . getReturnType ( ) == $F41254 ; \n\t\t\t} \n\t\treturn $F20 ( methodName ) ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "protected void handleParseConversionException ( Exception e ) throws SAXException { \n\tif ( e instanceof RuntimeException ) $F219952 ( e ) ParseConversionEvent pce = new ParseConversionEventImpl ( ValidationEvent . ERROR , e . getMessage ( ) , new ValidationEventLocatorImpl ( context . getLocator ( ) ) , e ) ; \n\tcontext . handleEvent ( pce , _BOOL ) ; \n\t} \n"}, {"code": "private static $F1469 yy_unpack_cmap ( String packed ) { \n\t$F11577 ( map ) int i = NUM00 ; \n\tint j = NUM00 ; \n\twhile ( i < NUM00 ) { \n\t\t$F52835 ( count , packed , i ) $F52837 ( value , packed , i ) do map [ j ++ ] = value ; \n\t\twhile ( -- count > NUM00 ) ; \n\t\t} \n\treturn map ; \n\t} \n"}, {"code": "public StatusBar ( boolean showMemory ) { \n\t$F9898 ( super ) add ( createInfoPanel ( ) , BorderLayout . WEST ) ; \n\tif ( showMemory ) { \n\t\tadd ( createMemoryStatus ( ) , BorderLayout . CENTER ) ; \n\t\tJPanel iconPanel = new JPanel ( new BorderLayout $F72 ) ; \n\t\ticonPanel . add ( new JLabel ( new AngledLinesWindowsCornerIcon $F72 ) , BorderLayout . SOUTH ) ; \n\t\tadd ( iconPanel , BorderLayout . EAST ) ; \n\t\t} \n\telse { \n\t\tsetBackground ( Color . WHITE ) ; \n\t\t} \n\t} \n"}, {"code": "public void execute ( final Runnable task ) { \n\tString name = metadata . get ( Metadata . RESOURCE_NAME_KEY ) ; \n\tif ( name != null ) $F21679 ( name ) else { \n\t\tname = NUM00 ; \n\t\t} \n\tfinal Thread thread = new Thread ( task , name ) ; \n\tthread . setDaemon ( _BOOL ) ; \n\t$F2346 ( thread ) } \n"}, {"code": "static int stringSize ( String string ) { \n\tint size = NUM00 ; \n\tif ( string != null ) { \n\t\tsize += HEADERS + NUM00 * NUM00 ; \n\t\tsize += HEADERS + NUM00 * string . length ( ) ; \n\t\t} \n\treturn size ; \n\t} \n"}, {"code": "public static GraphRequest newPostOpenGraphObjectRequest ( AccessToken accessToken , JSONObject openGraphObject , Callback callback ) { \n\tif ( openGraphObject == null ) { \n\t\tthrow new FacebookException $F580 ; \n\t\t} \n\tif ( Utility . isNullOrEmpty ( openGraphObject . optString ( NUM00 ) ) ) { \n\t\tthrow new FacebookException $F580 ; \n\t\t} \n\tif ( Utility . isNullOrEmpty ( openGraphObject . optString ( NUM00 ) ) ) { \n\t\tthrow new FacebookException $F580 ; \n\t\t} \n\tString path = String . format ( MY_OBJECTS_FORMAT , openGraphObject . optString ( NUM00 ) ) ; \n\t$F53033 ( bundle ) bundle . putString ( OBJECT_PARAM , openGraphObject . toString ( ) ) ; \n\treturn new GraphRequest ( accessToken , path , bundle , HttpMethod . POST , callback ) ; \n\t} \n"}, {"code": "public void addGraph ( Graph g ) $F207 ( graphs , g ) "}, {"code": "protected void addToQuarantineQueue ( NodePortTuple npt ) $F116364 ( quarantineQueue , npt , _BOOL ) "}, {"code": "private MrcMessage loadChars $F72 throws $F3258 { \n\tint nchars ; \n\t$F12496 ( rcvBuffer ) $F3261 ( nchars , inpipe , rcvBuffer ) MrcMessage msg = new MrcMessage ( nchars ) ; \n\tfor ( $F119 ( i , nchars ) ) { \n\t\tmsg . setElement ( i , rcvBuffer [ i ] & NUM00 ) ; \n\t\t} \n\treturn msg ; \n\t} \n"}, {"code": "$F1431 $F1 protected Money handleTransactionThatIsALateRepaymentOfInstallment ( final LoanRepaymentScheduleInstallment currentInstallment , final List < LoanRepaymentScheduleInstallment > installments , final LoanTransaction loanTransaction , final Money transactionAmountUnprocessed , List < LoanTransactionToRepaymentScheduleMapping > transactionMappings ) $F33971 ( handleTransactionThatIsOnTimePaymentOfInstallment , currentInstallment , loanTransaction , transactionAmountUnprocessed , transactionMappings ) "}, {"code": "protected void fireTupleEvent ( Table t , int start , int end , int type ) { \n\tif $F8841 ( m_tupleListeners ) { \n\t\t$F131 lstnrs = m_tupleListeners . getArray ( ) ; \n\t\t$F416167 tuples = new Tuple [ end - start + NUM00 ] ; \n\t\tfor ( int i = NUM00 , r = start ; \n\t\tr <= end ; \n\t\t++ r , ++ i ) { \n\t\t\ttuples [ i ] = t . getTuple ( r ) ; \n\t\t\t} \n\t\tfor ( $F9808 ( i , lstnrs ) ) { \n\t\t\tTupleSetListener tsl = ( TupleSetListener ) lstnrs [ i ] ; \n\t\t\tif ( type == EventConstants . INSERT ) { \n\t\t\t\ttsl . tupleSetChanged ( this , tuples , EMPTY_ARRAY ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\ttsl . tupleSetChanged ( this , EMPTY_ARRAY , tuples ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public String buildQuery ( $F806 projectionIn , String selection , String groupBy , String having , String sortOrder , String limit ) { \n\t$F91090 ( projection , computeProjection , projectionIn ) $F83 ( where ) boolean hasBaseWhereClause = $F21 ( mWhereClause ) ; \n\tif ( hasBaseWhereClause ) { \n\t\t$F11659 ( where , mWhereClause ) $F84 ( where ) } \n\tif $F22 ( selection ) { \n\t\t$F12290 ( hasBaseWhereClause , where ) $F84 ( where ) where . append ( selection ) ; \n\t\t$F84 ( where ) } \n\treturn buildQueryString ( mDistinct , mTables , projection , where . toString ( ) , groupBy , having , sortOrder , limit ) ; \n\t} \n"}, {"code": "public static boolean isExceptionTime ( Calendar scheduleTime , ScheduleInfo scheduleInfo ) throws Exception { \n\tif ( scheduleInfo . getDateExceptions ( ) != null ) { \n\t\tfor ( String dateException : scheduleInfo . getDateExceptions ( ) ) { \n\t\t\tDateFormat formatter = new SimpleDateFormat ( ScheduleInfo . FULL_DAYTIME_FORMAT ) ; \n\t\t\tDate date = formatter . parse ( scheduleInfo . getStartDate ( ) ) ; \n\t\t\t$F25274 ( exceptionTime , Calendar , TimeZone ) exceptionTime . setTime ( date ) ; \n\t\t\tif $F1238 ( exceptionTime , scheduleTime ) { \n\t\t\t\t$F279664 ( log , scheduleTime ) return _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "protected void initPort $F72 { \n\tString portParam = getInitParameter ( NUM00 ) ; \n\tsetPort ( ( portParam == null ) ? DEFAULT_PORT : Integer . parseInt ( portParam ) ) ; \n\tif ( isDebug ( ) ) { \n\t\tlog ( NUM00 + getPort ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "public JPEGQTable $F23416 ( table ) { \n\t$F826 ( table ) $F231344 ( table ) $F42716 ( qTable , Arrays , table ) ; \n\t} \n"}, {"code": "public VNXeNfsShare findSnapNfsShare $F1947 ( snapId , shareName , softwareVersion ) { \n\tStringBuilder queryFilter = new StringBuilder ( VNXeConstants . NAME_FILTER ) ; \n\tif ( ! VNXeUtils . isHigherVersion ( softwareVersion , VNXeConstants . VNXE_BASE_SOFT_VER ) ) { \n\t\tqueryFilter . append ( shareName ) ; \n\t\tqueryFilter . append ( VNXeConstants . AND ) ; \n\t\tqueryFilter . append ( VNXeConstants . SNAP_FILTER ) ; \n\t\tqueryFilter . append ( snapId ) ; \n\t\t} \n\telse { \n\t\t$F286 ( queryFilter , shareName ) queryFilter . append ( VNXeConstants . AND ) ; \n\t\tqueryFilter . append ( VNXeConstants . SNAP_FILTER_V31 ) ; \n\t\t$F286 ( queryFilter , snapId ) } \n\t$F31458 ( setFilter , queryFilter ) VNXeNfsShare result = null ; \n\tList < VNXeNfsShare > shareList = getDataForObjects ( VNXeNfsShare . class ) ; \n\tif $F1032 ( shareList ) { \n\t\t$F36986 ( result , shareList ) $F21153 ( _logger , snapId , shareName ) } \n\telse $F146673 ( _logger , snapId , shareName ) return result ; \n\t} \n"}, {"code": "$F1 public final int read $F72 throws IOException { \n\tByteBuffer bb = waitForAvailableData ( ) ; \n\treturn $F96314 ( bb ) ; \n\t} \n"}, {"code": "protected TokenPosition ( TokenPosition other ) { \n\tObjects . requireNonNull ( other ) ; \n\tthis . line = other . line ; \n\tthis . column = other . column ; \n\tthis . offset = other . offset ; \n\t} \n"}, {"code": "private JComponent createDetailPanel ( Throwable error ) { \n\tStackTraceList stl = new StackTraceList ( error ) ; \n\tJScrollPane detailPane = new ExtendedJScrollPane ( stl ) ; \n\tdetailPane . setPreferredSize ( new Dimension ( getWidth ( ) , NUM00 ) ) ; \n\t$F55355 ( detailPane ) return detailPane ; \n\t} \n"}, {"code": "abstract boolean containsKey ( T container , String key ) ; \n"}, {"code": "private JMXConnector connect ( String host , int port ) { \n\ttry { \n\t\tif ( ! isNodeAvailable ( host ) ) { \n\t\t\t$F10635 ( log , host ) $F4638 } \n\t\t$F39971 ( log , host , port ) String connectorAddress = String . format ( serviceUrl , host , port ) ; \n\t\tJMXServiceURL jmxUrl = new JMXServiceURL ( connectorAddress ) ; \n\t\treturn JMXConnectorFactory . connect ( jmxUrl ) ; \n\t\t} \n\tcatch ( MalformedURLException e ) { \n\t\tlog . error ( String . format ( NUM00 , host , port ) , e ) ; \n\t\t$F4638 } \n\tcatch ( IOException e ) { \n\t\tlog . error ( String . format ( NUM00 , host , port ) , e ) ; \n\t\t$F1154 ( host ) } \n\t} \n"}, {"code": "public TagHandler processObjectValue ( Object value ) throws JspException { \n\tif ( value instanceof AttributeDefinition ) { \n\t\treturn processTypedAttribute ( ( AttributeDefinition ) value ) ; \n\t\t} \n\telse if ( value instanceof ComponentDefinition ) { \n\t\treturn processDefinition ( ( ComponentDefinition ) value ) ; \n\t\t} \n\t$F17718 ( processAsDefinitionOrURL , value ) } \n"}, {"code": "public $F3807 emit ( String streamId , Tuple anchor , $F6689 tuple ) { \n\treturn emit ( streamId , Arrays . asList ( anchor ) , tuple ) ; \n\t} \n"}, {"code": "private synchronized void writeToOutputStream ( int oneByte ) { \n\t$F7254 ( mClosed ) try { \n\t\tmOutputStream . write ( oneByte ) ; \n\t\treportDecodedSizeIfApplicable ( ) ; \n\t\t} \n\t$F52544 ( handleIOExceptionWritingToStream , e ) } \n"}, {"code": "public int difference ( String s1 , String s2 ) throws EncoderException { \n\treturn SoundexUtils . difference ( this , s1 , s2 ) ; \n\t} \n"}, {"code": "public static Enumeration all $F72 $F10806 ( _all ) "}, {"code": "protected List < ModelEntity > makeEntityModelToUseList $F72 throws GenericEntityException { \n\t$F6261 entitySyncIncludes = entitySync . getRelated ( NUM00 , null , null , _BOOL ) ; \n\t$F6261 entitySyncGroupIncludes = entitySync . getRelated ( NUM00 , null , null , _BOOL ) ; \n\tentitySyncIncludes . addAll ( entitySyncGroupIncludes ) ; \n\tList < ModelEntity > entityModelToUseList = EntityGroupUtil . getModelEntitiesFromRecords ( entitySyncIncludes , delegator , _BOOL ) ; \n\tif $F206576 ( Debug ) Debug . logInfo ( $F28496 ( entitySync ) + NUM00 + entityModelToUseList . size ( ) + NUM00 , module ) ; \n\treturn entityModelToUseList ; \n\t} \n"}, {"code": "private static String lz ( int num ) $F23891 ( String , num ) "}, {"code": "public void onChildIdleBegin $F72 $F16878 ( _idleCount ) "}, {"code": "private StartupMode checkStartupMode ( Configuration config ) throws IOException { \n\tStartupMode bootMode = checkStartupModeOnDisk ( config ) ; \n\t$F21525 ( bootMode ) if ( checkConfigBool ( config , Constants . STARTUPMODE_RESTORE_REINIT ) ) { \n\t\t_log . info ( NUM00 , Constants . STARTUPMODE_RESTORE_REINIT ) ; \n\t\tGeodbRestoreMode mode = new GeodbRestoreMode ( config ) ; \n\t\tmode . setCoordinator ( _coordinator ) ; \n\t\tmode . setSchemaUtil ( _schemaUtil ) ; \n\t\tmode . setDbDir ( dbDir ) ; \n\t\treturn mode ; \n\t\t} \n\tif ( checkConfigBool ( config , Constants . REINIT_DB ) ) { \n\t\t_log . info ( NUM00 , Constants . REINIT_DB ) ; \n\t\tDbReinitMode mode = new DbReinitMode ( config ) ; \n\t\tmode . setCoordinator ( _coordinator ) ; \n\t\tmode . setSchemaUtil ( _schemaUtil ) ; \n\t\tmode . setDbDir ( dbDir ) ; \n\t\treturn mode ; \n\t\t} \n\t$F3803 obsoletePeers = checkConfigList ( config , Constants . OBSOLETE_CASSANDRA_PEERS ) ; \n\tif $F5973 ( obsoletePeers ) { \n\t\tObsoletePeersCleanupMode mode = new ObsoletePeersCleanupMode ( config ) ; \n\t\tmode . setCoordinator ( _coordinator ) ; \n\t\tmode . setSchemaUtil ( _schemaUtil ) ; \n\t\tmode . setObsoletePeers ( obsoletePeers ) ; \n\t\treturn mode ; \n\t\t} \n\telse { \n\t\tNormalMode mode = new NormalMode ( config ) ; \n\t\tmode . setCoordinator ( _coordinator ) ; \n\t\tmode . setSchemaUtil ( _schemaUtil ) ; \n\t\treturn mode ; \n\t\t} \n\t} \n"}, {"code": "private void writeObject $F9338 ( s ) throws $F3258 { \n\t$F790 ( lock ) try { \n\t\tq = new $F363756 ( Math . max ( size , NUM00 ) , comparator ) ; \n\t\tq . addAll ( this ) ; \n\t\t$F9339 ( s ) } \n\tfinally { \n\t\tq = null ; \n\t\t$F704 ( lock ) } \n\t} \n"}, {"code": "private void run $F72 { \n\ttry { \n\t\t$F686 ( current , Thread ) $F12496 ( buf ) for ( int len = in . read ( buf ) ; \n\t\tlen != - NUM00 ; \n\t\tlen = in . read ( buf ) ) { \n\t\t\t$F11584 ( buffer , buf , len ) if ( current != thread ) $F5153 } \n\t\t$F1206 ( buffer ) $F59 ( buffer ) } \n\tcatch ( IOException e ) $F14108 ( log , e ) } \n"}, {"code": "protected boolean shardAvailable ( $F5466 IndexShard shard ) { \n\treturn shard != null && shard . canIndex ( ) && CAN_UPDATE_INDEX_BUFFER_STATES . contains ( shard . state ( ) ) ; \n\t} \n"}, {"code": "synchronized void updateAuthConfigGlobals ( ServiceSchemaManager scm ) throws SMSException { \n\tServiceSchema schema = scm . getOrganizationSchema ( ) ; \n\tschema = schema . getSubSchema ( NUM00 ) ; \n\tschema = schema . getSubSchema ( NUM00 ) ; \n\tMap attrs = schema . getAttributeDefaults ( ) ; \n\tif ( attrs != null ) { \n\t\tdefaultServiceSuccessURLSet = ( Set ) attrs . get ( ISAuthConstants . LOGIN_SUCCESS_URL ) ; \n\t\tdefaultServiceFailureURLSet = ( Set ) attrs . get ( ISAuthConstants . LOGIN_FAILURE_URL ) ; \n\t\t} \n\tif $F6299 ( debug ) { \n\t\t$F18127 ( debug , defaultServiceSuccessURLSet ) $F18127 ( debug , defaultServiceFailureURLSet ) } \n\t} \n"}, {"code": "public void increment $F72 { \n\t$F5224 ( count ) rateWindow . incrementForTimestamp ( timerGetter . now ( ) ) ; \n\t} \n"}, {"code": "long totalMemory $F72 ; \n"}, {"code": "$F1 public int preceding ( int offset ) { \n\tCharacterIterator text = getText ( ) ; \n\tcheckOffset ( offset , text ) ; \n\ttext . setIndex ( offset ) ; \n\treturn previous ( ) ; \n\t} \n"}, {"code": "public void log ( String event , String message ) { \n\tboolean eventActive = isEventActive ( event ) ; \n\tif ( ( this . logging && eventActive && $F1030 ( writers ) ) ) { \n\t\ttry { \n\t\t\tfor ( Writer writer : writers . values ( ) ) { \n\t\t\t\twriter . write ( message ) ; \n\t\t\t\t$F3410 ( writer ) $F1206 ( writer ) } \n\t\t\t} \n\t\t$F12241 ( e ) } \n\t} \n"}, {"code": "public int write ( final ByteBuffer byteBuffer ) throws IOException { \n\tensureOpen ( ) ; \n\t$F11550 ( remaining , byteBuffer ) if ( inspectable < buffer . length ) { \n\t\tfinal int toBuffer = Math . min ( buffer . length - inspectable , remaining ) ; \n\t\tbyteBuffer . get ( buffer , inspectable , toBuffer ) ; \n\t\tinspectable += toBuffer ; \n\t\t} \n\tif $F5720 ( byteBuffer ) { \n\t\tfileChannel . position ( writePosition ) ; \n\t\twritePosition += fileChannel . write ( byteBuffer ) ; \n\t\t} \n\treturn remaining ; \n\t} \n"}, {"code": "public void copyInto $F95906 ( strOffset , bytes , arrayOffset , len ) { \n\tSystem . arraycopy ( m_bytes , m_offset + strOffset , bytes , arrayOffset , len ) ; \n\t} \n"}, {"code": "public static String repeatString ( String pattern , int repeats ) { \n\tStringBuilder buffer = new StringBuilder ( pattern . length ( ) * repeats ) ; \n\t$F48485 ( i , repeats , buffer , pattern ) $F22269 ( buffer ) } \n"}, {"code": "private boolean isMusicPlayer $F72 { \n\treturn playerSetting != null && playerSetting . equalsIgnoreCase ( NUM00 ) ; \n\t} \n"}, {"code": "$F5803 ( drawable , getDrawable , matrix , prevMatrix , drawableWidth , drawableHeight , scaleX , viewWidth , scaleY , viewHeight , mScaleType , CENTER , CENTER_CROP , Math , CENTER_INSIDE , FIT_CENTER , FIT_XY , redundantXSpace , redundantYSpace , matchViewWidth , matchViewHeight , isZoomed , imageRenderedAtLeastOnce , normalizedScale , prevMatchViewWidth , prevMatchViewHeight , savePreviousImageValues , m , Matrix , transX , transY , prevActualWidth , actualWidth , getImageWidth , translateMatrixAfterRotate , prevViewWidth , prevActualHeight , actualHeight , getImageHeight , prevViewHeight , fixTrans , setImageMatrix ) "}, {"code": "public final static VersionInfo [ ] loadVersionInfo ( $F806 pckgs , ClassLoader clsldr ) { \n\t$F826 ( pckgs ) ArrayList vil = new ArrayList ( pckgs . length ) ; \n\tfor ( $F1139 ( i , pckgs ) ) { \n\t\tVersionInfo vi = loadVersionInfo ( pckgs [ i ] , clsldr ) ; \n\t\t$F67023 ( vi , vil ) } \n\treturn ( VersionInfo [ ] ) vil . toArray ( new VersionInfo $F2313 ( vil ) ) ; \n\t} \n"}, {"code": "public static Collection < ContentStream > toContentStreams $F2236 ( str , contentType ) { \n\t$F1275 ( str ) ArrayList < ContentStream > $F9187 ( streams ) ; \n\tContentStreamBase ccc = new ContentStreamBase . StringStream ( str ) ; \n\tccc . setContentType ( contentType ) ; \n\tstreams . add ( ccc ) ; \n\treturn streams ; \n\t} \n"}, {"code": "void writeRepeatedSqrt ( DD xdd ) { \n\tint count = NUM00 ; \n\twhile ( xdd . doubleValue ( ) > NUM00 ) { \n\t\tcount ++ ; \n\t\t$F50466 ( x , xdd ) DD xSqrt = xdd . sqrt ( ) ; \n\t\t$F1822 ( s , xSqrt ) $F23375 ( xSqrt2 , DD , s ) DD xx = xSqrt2 . multiply ( xSqrt2 ) ; \n\t\tdouble err = Math . abs ( xx . doubleValue ( ) - x ) ; \n\t\txdd = xSqrt ; \n\t\tDD distFrom1DD = xSqrt . subtract ( DD . valueOf ( NUM00 ) ) ; \n\t\t$F50466 ( distFrom1 , distFrom1DD ) if $F20932 ( Math , distFrom1 ) $F597 } \n\t} \n"}, {"code": "$F1 public String format ( DateTimeFormatter formatter ) { \n\t$F10578 ( Objects , formatter ) $F5330 ( formatter , this ) } \n"}, {"code": "$F18164 ( msgs , seenXids , m , xid , assertTrue , assertFalse ) "}, {"code": "public static boolean hasExtension ( String extension ) $F123773 ( extension , _BOOL , extensionToMimeTypeMap ) "}, {"code": "private float applyFriction ( float velocity , float simulationRate ) { \n\tif ( isZero ( velocity ) ) { \n\t\tvelocity = NUM00 ; \n\t\t} \n\telse if ( velocity > NUM00 ) { \n\t\tvelocity = Math . max ( NUM00 , velocity - ( FRICTION * simulationRate ) ) ; \n\t\t} \n\telse { \n\t\tvelocity = Math . min ( NUM00 , velocity + ( FRICTION * simulationRate ) ) ; \n\t\t} \n\treturn velocity ; \n\t} \n"}, {"code": "static Boolean realIsJUnit4Test ( Class scriptClass , GroovyClassLoader loader ) { \n\tboolean isTest = _BOOL ; \n\ttry { \n\t\ttry { \n\t\t\t$F198604 ( runWithAnnotationClass , loader ) Annotation annotation = scriptClass . getAnnotation ( runWithAnnotationClass ) ; \n\t\t\tif ( annotation != null ) { \n\t\t\t\tisTest = _BOOL ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\t$F198604 ( testAnnotationClass , loader ) $F23596 methods = scriptClass . getMethods ( ) ; \n\t\t\t\tfor ( $F1139 ( i , methods ) ) { \n\t\t\t\t\tMethod method = methods [ i ] ; \n\t\t\t\t\tannotation = method . getAnnotation ( testAnnotationClass ) ; \n\t\t\t\t\tif ( annotation != null ) $F3468 ( isTest , _BOOL ) } \n\t\t\t\t} \n\t\t\t} \n\t\t$F230185 } \n\t$F115820 return isTest ? Boolean . TRUE : Boolean . FALSE ; \n\t} \n"}, {"code": "private Dimension layoutSize ( Container target , boolean preferred ) { \n\tsynchronized $F201886 ( target ) { \n\t\t$F138386 ( targetWidth , target ) if ( targetWidth == NUM00 ) $F7984 ( targetWidth , Integer ) int hgap = getHgap ( ) ; \n\t\tint vgap = getVgap ( ) ; \n\t\t$F3970 ( insets , target ) int horizontalInsetsAndGap = $F30395 ( insets ) + ( hgap * NUM00 ) ; \n\t\tint maxWidth = targetWidth - horizontalInsetsAndGap ; \n\t\t$F32537 ( dim ) int rowWidth = NUM00 ; \n\t\tint rowHeight = NUM00 ; \n\t\t$F60281 ( nmembers , target ) for ( $F119 ( i , nmembers ) ) { \n\t\t\t$F201892 ( m , target , i ) if $F201893 ( m ) { \n\t\t\t\tDimension d = preferred ? m . getPreferredSize ( ) : m . getMinimumSize ( ) ; \n\t\t\t\tif ( rowWidth + d . width > maxWidth ) { \n\t\t\t\t\taddRow ( dim , rowWidth , rowHeight ) ; \n\t\t\t\t\trowWidth = NUM00 ; \n\t\t\t\t\trowHeight = NUM00 ; \n\t\t\t\t\t} \n\t\t\t\tif ( rowWidth != NUM00 ) { \n\t\t\t\t\trowWidth += hgap ; \n\t\t\t\t\t} \n\t\t\t\trowWidth += d . width ; \n\t\t\t\t$F201902 ( rowHeight , Math , d ) } \n\t\t\t} \n\t\taddRow ( dim , rowWidth , rowHeight ) ; \n\t\tdim . width += horizontalInsetsAndGap ; \n\t\tdim . height += $F30391 ( insets ) + vgap * NUM00 ; \n\t\tContainer scrollPane = SwingUtilities . getAncestorOfClass ( JScrollPane . class , target ) ; \n\t\tif ( scrollPane != null ) { \n\t\t\tdim . width -= ( hgap + NUM00 ) ; \n\t\t\t} \n\t\treturn dim ; \n\t\t} \n\t} \n"}, {"code": "private static void parseExpression ( final Reader reader , final boolean writingString , final StringBuilder templateExpressions ) throws IOException { \n\t$F48750 ( writingString , templateExpressions ) $F84 ( templateExpressions ) while ( _BOOL ) { \n\t\t$F7468 ( c , reader ) $F167039 ( c ) if ( c == NUM00 ) { \n\t\t\t$F10201 ( c , reader ) if ( c == NUM00 ) $F597 $F84 ( templateExpressions ) } \n\t\t$F36813 ( templateExpressions , c ) } \n\t$F84 ( templateExpressions ) } \n"}, {"code": "$F6672 ( filename , separatorAdd , prefix , getPrefixLength , index , indexOfLastSeparator , endIndex ) "}, {"code": "protected void reduceParseTree ( CompilationUnitDeclaration unit ) { \n\tTypeDeclaration [ ] types = unit . types ; \n\tfor ( $F151668 ( i , l , types ) ) purgeMethodStatements ( types [ i ] , _BOOL ) ; \n\t} \n"}, {"code": "$F95779 ( out , remaining , count , buf , buffers , c , Math ) "}, {"code": "public static long findRevision ( $F20109 ( output ) , final Pattern pattern ) { \n\tlong revision = - NUM00 ; \n\tfor ( final String line : output ) { \n\t\t$F37142 ( matcher , pattern , line ) if $F281 ( matcher ) { \n\t\t\trevision = $F53832 ( Long , matcher ) ; \n\t\t\t$F597 } \n\t\t} \n\treturn revision ; \n\t} \n"}, {"code": "protected int chooseHighWaterMark ( int capacity , double maxLoad ) { \n\treturn Math . min ( capacity - NUM00 , $F2354 ( capacity , maxLoad ) ) ; \n\t} \n"}, {"code": "private AccessGrant createAccessGrant $F3501 ( params ) { \n\tAccessGrant accessGrant = new AccessGrant $F72 ; \n\tif $F139289 ( params ) { \n\t\t$F170151 ( accessToken , params ) Integer expires = null ; \n\t\tif $F139289 ( params ) { \n\t\t\texpires = Integer . valueOf ( params . get ( NUM00 ) ) ; \n\t\t\t} \n\t\taccessGrant . setKey ( accessToken ) ; \n\t\t$F34765 ( accessGrant , expires ) } \n\taccessGrant . setProviderId ( mProviderName . toString ( ) ) ; \n\treturn accessGrant ; \n\t} \n"}, {"code": "protected final boolean _loadToHaveAtLeast ( int minAvailable ) throws IOException { \n\t$F1933 ( _inputStream , _BOOL ) int amount = _inputEnd - _inputPtr ; \n\tif ( amount > NUM00 && _inputPtr > NUM00 ) { \n\t\t_currInputProcessed += _inputPtr ; \n\t\t_currInputRowStart -= _inputPtr ; \n\t\t$F51886 ( System , _inputBuffer , _inputPtr , amount ) _inputEnd = amount ; \n\t\t} \n\telse { \n\t\t_inputEnd = NUM00 ; \n\t\t} \n\t_inputPtr = NUM00 ; \n\twhile ( _inputEnd < minAvailable ) { \n\t\t$F7994 ( count , _inputStream , _inputBuffer , _inputEnd ) if ( count < NUM00 ) { \n\t\t\t_closeInput ( ) ; \n\t\t\tif ( count == NUM00 ) $F5244 ( amount ) return _BOOL ; \n\t\t\t} \n\t\t_inputEnd += count ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public double logPdf ( double x ) { \n\treturn Math . log ( pdf ( x ) ) ; \n\t} \n"}, {"code": "private void selectFile ( int titleMsg , int buttonMsg , String settingsName , String defaultDir , int dialog , int result ) { \n\tsetAutoMode ( AutoMode . OFF ) ; \n\tString action = NUM00 ; \n\tIntent i = new Intent ( action ) ; \n\tString currentFile = settings . getString ( settingsName , NUM00 ) ; \n\tString sep = File . separator ; \n\tif $F2200 ( currentFile , sep ) currentFile = Environment . getExternalStorageDirectory ( ) + sep + defaultDir + sep + currentFile ; \n\ti . setData ( Uri . fromFile ( new File ( currentFile ) ) ) ; \n\ti . putExtra ( NUM00 , getString ( titleMsg ) ) ; \n\ti . putExtra ( NUM00 , getString ( buttonMsg ) ) ; \n\ttry { \n\t\tstartActivityForResult ( i , result ) ; \n\t\t} \n\tcatch ( ActivityNotFoundException e ) $F86383 ( removeDialog , dialog , showDialog ) } \n"}, {"code": "private static void encodeBinary $F91888 ( bytes , startpos , count , startmode , sb ) { \n\tif ( count == NUM00 && startmode == TEXT_COMPACTION ) $F46352 ( sb , SHIFT_TO_BYTE ) else { \n\t\tboolean sixpack = $F91889 ( count ) ; \n\t\tif ( sixpack ) $F46352 ( sb , LATCH_TO_BYTE ) else $F46352 ( sb , LATCH_TO_BYTE_PADDED ) } \n\tint idx = startpos ; \n\tif ( count >= NUM00 ) { \n\t\t$F11577 ( chars ) $F91906 ( startpos , count , idx , t , i , bytes , chars , sb ) } \n\t$F91910 ( i , idx , startpos , count , ch , bytes , sb ) } \n"}, {"code": "public String timerString ( int level , String message ) { \n\t$F83 ( retStringBuf ) $F103815 ( i , level , retStringBuf ) $F84 ( retStringBuf ) String timeSinceStartStr = $F130521 ( String , timeSinceStart ) ; \n\t$F86403 ( retStringBuf , timeSinceStartStr ) String timeSinceLastStr = $F130521 ( String , timeSinceLast ) ; \n\tretStringBuf . append ( timeSinceLastStr ) ; \n\t$F84 ( retStringBuf ) int spacecount = NUM00 + ( NUM00 * level ) - retStringBuf . length ( ) ; \n\t$F103815 ( i , spacecount , retStringBuf ) retStringBuf . append ( message ) ; \n\t$F3224 ( lastMessageTime , System ) $F1822 ( retString , retStringBuf ) if ( log && Debug . timingOn ( ) ) Debug . logTiming ( retString , module ) ; \n\treturn retString ; \n\t} \n"}, {"code": "public static int recompileWithOpt ( NormalMethod method ) { \n\tif ( VM . BuildForOptCompiler ) { \n\t\tCompilationPlan plan = new CompilationPlan ( method , ( OptimizationPlanElement [ ] ) optimizationPlan , null , ( OptOptions ) options ) ; \n\t\treturn recompileWithOpt ( plan ) ; \n\t\t} \n\telse { \n\t\tif ( VM . VerifyAssertions ) VM . _assert ( VM . NOT_REACHED ) ; \n\t\t$F150 } \n\t} \n"}, {"code": "public String findMatch ( Pattern pattern , String text ) $F331052 ( findMatch , pattern , text ) "}, {"code": "private void addHit ( String cname , $F6969 c ) { \n\tif ( len == names . length ) { \n\t\tfinal int $F76469 ( nl , len ) ; \n\t\t$F8003 ( names , Arrays , nl ) $F8003 ( clazzes , Arrays , nl ) } \n\tnames [ len ] = cname ; \n\tclazzes [ len ] = c ; \n\t++ len ; \n\t} \n"}, {"code": "private Object queryCommandValue ( final String commandIdentifier ) { \n\t$F18062 ( Check , commandIdentifier ) $F3239 ( cmd ) $F84 ( cmd ) cmd . append ( commandIdentifier ) ; \n\t$F84 ( cmd ) return browser . evaluate ( cmd . toString ( ) ) ; \n\t} \n"}, {"code": "public void line ( double x , double y ) { \n\tLine line = new Line ( x , y ) ; \n\t$F45132 ( x , minX ) $F45132 ( y , minY ) $F12283 ( x , maxX ) $F12283 ( y , maxY ) elements . add ( line ) ; \n\t} \n"}, {"code": "$F73354 ( curViewBound , curViewWidth , right , mClipPadding ) "}, {"code": "$F1 public List < $F81733 > cluster ( $F60962 ( points ) ) throws NullArgumentException { \n\tMathUtils . checkNotNull ( points ) ; \n\tfinal List < $F81733 > clusters = new ArrayList < $F81733 > $F72 ; \n\tfinal Map < Clusterable , PointStatus > visited = new HashMap < Clusterable , PointStatus > $F72 ; \n\tfor ( final T point : points ) { \n\t\tif $F26935 ( visited , point ) $F1448 final $F5675 neighbors = getNeighbors ( point , points ) ; \n\t\tif $F29395 ( neighbors , minPts ) { \n\t\t\tfinal $F81733 cluster = new $F81733 $F72 ; \n\t\t\tclusters . add ( expandCluster ( cluster , point , neighbors , points , visited ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tvisited . put ( point , PointStatus . NOISE ) ; \n\t\t\t} \n\t\t} \n\treturn clusters ; \n\t} \n"}, {"code": "public void testGetVersion25 $F72 throws Exception { \n\tString xml = WEBAPP_25_HEADER + NUM00 ; \n\t$F168856 ( webXml , WebXmlIo , xml , getEntityResolver ) assertEquals ( WebXmlVersion . V2_5 , webXml . getVersion ( ) ) ; \n\t} \n"}, {"code": "$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel ) "}, {"code": "private static void mat4_util_inplace_rotate ( $F5415 inOutMatrix , float eulerRadiansX , float eulerRadiansY , float eulerRadiansZ ) { \n\tfloat cos_rx = $F148722 ( Math , eulerRadiansX ) ; \n\tfloat cos_ry = $F148722 ( Math , eulerRadiansY ) ; \n\tfloat cos_rz = $F148722 ( Math , eulerRadiansZ ) ; \n\tfloat sin_rx = $F148723 ( Math , eulerRadiansX ) ; \n\tfloat sin_ry = $F148723 ( Math , eulerRadiansY ) ; \n\tfloat sin_rz = $F148723 ( Math , eulerRadiansZ ) ; \n\tfloat b00 = cos_rz * cos_ry ; \n\tfloat b10 = sin_rz * cos_ry ; \n\tfloat b20 = - sin_ry ; \n\tfloat b30 = NUM00 ; \n\tfloat b01 = - sin_rz * cos_rx + cos_rz * sin_ry * sin_rx ; \n\tfloat b11 = cos_rz * cos_rx + sin_rz * sin_ry * sin_rx ; \n\tfloat b21 = cos_ry * sin_rx ; \n\tfloat b31 = NUM00 ; \n\tfloat b02 = sin_rz * sin_rx + cos_rz * sin_ry * cos_rx ; \n\tfloat b12 = - cos_rz * sin_rx + sin_rz * sin_ry * cos_rx ; \n\tfloat b22 = cos_ry * cos_rx ; \n\tfloat b32 = NUM00 ; \n\tfloat b03 = NUM00 ; \n\tfloat b13 = NUM00 ; \n\tfloat b23 = NUM00 ; \n\tfloat b33 = NUM00 ; \n\tfloat a00 = inOutMatrix [ NUM00 ] ; \n\tfloat a10 = inOutMatrix [ NUM00 ] ; \n\tfloat a20 = inOutMatrix [ NUM00 ] ; \n\tfloat a30 = inOutMatrix [ NUM00 ] ; \n\tfloat a01 = inOutMatrix [ NUM00 ] ; \n\tfloat a11 = inOutMatrix [ NUM00 ] ; \n\tfloat a21 = inOutMatrix [ NUM00 ] ; \n\tfloat a31 = inOutMatrix [ NUM00 ] ; \n\tfloat a02 = inOutMatrix [ NUM00 ] ; \n\tfloat a12 = inOutMatrix [ NUM00 ] ; \n\tfloat a22 = inOutMatrix [ NUM00 ] ; \n\tfloat a32 = inOutMatrix [ NUM00 ] ; \n\tfloat a03 = inOutMatrix [ NUM00 ] ; \n\tfloat a13 = inOutMatrix [ NUM00 ] ; \n\tfloat a23 = inOutMatrix [ NUM00 ] ; \n\tfloat a33 = inOutMatrix [ NUM00 ] ; \n\tinOutMatrix [ NUM00 ] = a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30 ; \n\tinOutMatrix [ NUM00 ] = a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30 ; \n\tinOutMatrix [ NUM00 ] = a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30 ; \n\tinOutMatrix [ NUM00 ] = a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30 ; \n\tinOutMatrix [ NUM00 ] = a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31 ; \n\tinOutMatrix [ NUM00 ] = a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31 ; \n\tinOutMatrix [ NUM00 ] = a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31 ; \n\tinOutMatrix [ NUM00 ] = a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31 ; \n\tinOutMatrix [ NUM00 ] = a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32 ; \n\tinOutMatrix [ NUM00 ] = a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32 ; \n\tinOutMatrix [ NUM00 ] = a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32 ; \n\tinOutMatrix [ NUM00 ] = a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32 ; \n\tinOutMatrix [ NUM00 ] = a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33 ; \n\tinOutMatrix [ NUM00 ] = a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33 ; \n\tinOutMatrix [ NUM00 ] = a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33 ; \n\tinOutMatrix [ NUM00 ] = a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33 ; \n\t} \n"}, {"code": "$F1 public void mousePressed ( MouseEvent evt ) { \n\tint pos = ( slider . getOrientation ( ) == JSlider . HORIZONTAL ) ? evt . getX ( ) : evt . getY ( ) ; \n\tint loc = getLocationForValue ( getSnappedValue ( evt ) ) ; \n\tthis . offset = ( loc < NUM00 ) ? NUM00 : pos - loc ; \n\t} \n"}, {"code": "private String printDFormat ( final long x ) $F21034 ( printDFormat , Long , x ) "}, {"code": "public void write ( int ch ) throws IOException { \n\tOutputStream os = getOutputStream ( ) ; \n\t$F3410 ( os ) $F25097 ( os ) $F25097 ( os ) os . write ( ch ) ; \n\t} \n"}, {"code": "public static $F50398 ServiceLoader $F50398 loadInstalled ( $F50400 service ) { \n\t$F50403 ( cl , ClassLoader ) if ( cl != null ) { \n\t\twhile $F50405 ( cl ) $F10338 ( cl ) } \n\treturn ServiceLoader . load ( service , cl ) ; \n\t} \n"}, {"code": "private static Iterator < Operand > iterateReturnValues ( IR ir ) { \n\tArrayList < Operand > returnValues = new ArrayList < Operand > $F72 ; \n\tfor ( $F12039 e = ir . forwardInstrEnumerator ( ) ; \n\te . hasMoreElements ( ) ; \n\t) { \n\t\t$F12043 ( s , e ) if $F86920 ( Return , s ) { \n\t\t\treturnValues . add ( Return . getVal ( s ) ) ; \n\t\t\t} \n\t\t} \n\t$F16047 ( returnValues ) } \n"}, {"code": "public static Pattern glob2Pattern ( String ... globs ) { \n\t$F1121 ( regex ) boolean needOr = _BOOL ; \n\tfor ( String glob : globs ) { \n\t\t$F12290 ( needOr , regex ) $F51283 ( i , len , glob ) ; \n\t\twhile ( i < len ) { \n\t\t\t$F52837 ( c , glob , i ) switch ( c ) { \n\t\t\t\t$F1262 if $F52566 ( i , len , glob ) $F312159 ( regex , i ) else $F86 ( regex ) $F597 $F2999 ( regex ) $F1267 if ( isRegexMeta ( c ) ) $F86 ( regex ) regex . append ( c ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tneedOr = _BOOL ; \n\t\t} \n\treturn Pattern . compile ( $F89373 ( regex ) ) ; \n\t} \n"}, {"code": "public static boolean containsTraceExplorerModuleConflict ( String rootModuleName ) { \n\tString rootModuleFileName = rootModuleName ; \n\tif ( ! rootModuleName . endsWith ( ResourceHelper . TLA_EXTENSION ) ) { \n\t\trootModuleFileName = ResourceHelper . getModuleFileName ( rootModuleName ) ; \n\t\t} \n\t$F3803 extendedModuleNames = ToolboxHandle . getExtendedModules ( rootModuleFileName ) ; \n\t$F13712 ( it , extendedModuleNames ) while $F2921 ( it ) { \n\t\t$F13714 ( moduleName , it ) $F12418 ( moduleName , TE_FILE_TLA , _BOOL ) } \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void testFlipBitNegativeInside2 $F72 { \n\t$F17888 int aSign = - NUM00 ; \n\tint number = NUM00 ; \n\tbyte $F3018 = { \n\t\t- NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 } \n\t; \n\t$F3023 ( aNumber , aSign , aBytes ) $F103435 ( result , aNumber , number ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , result ) } \n"}, {"code": "private String buildFullMessage ( String msg , Object arg0 , Object arg1 , Object arg2 , $F131 argArray ) { \n\tStringBuilder sb = null ; \n\tint lastIndex = NUM00 ; \n\tint argC = NUM00 ; \n\twhile ( _BOOL ) { \n\t\tint argIndex = msg . indexOf ( ARG_ <missing ';'> NUM00 , lastIndex ) ; \n\t\t$F76065 ( argIndex ) if ( sb == null ) { \n\t\t\tsb = new StringBuilder $F989 ; \n\t\t\t} \n\t\tsb . append ( msg , lastIndex , argIndex ) ; \n\t\tlastIndex = argIndex + ARG_ <missing ';'> NUM00 _LENGTH ; \n\t\tif ( argArray == null ) { \n\t\t\tif ( argC == NUM00 ) { \n\t\t\t\tappendArg ( sb , arg0 ) ; \n\t\t\t\t} \n\t\t\telse if ( argC == NUM00 ) { \n\t\t\t\tappendArg ( sb , arg1 ) ; \n\t\t\t\t} \n\t\t\telse if ( argC == NUM00 ) { \n\t\t\t\tappendArg ( sb , arg2 ) ; \n\t\t\t\t} \n\t\t\telse $F845 } \n\t\telse if ( argC < argArray . length ) { \n\t\t\tappendArg ( sb , argArray [ argC ] ) ; \n\t\t\t} \n\t\telse $F845 argC ++ ; \n\t\t} \n\tif ( sb == null ) { \n\t\treturn msg ; \n\t\t} \n\telse { \n\t\tsb . append ( $F180345 ( msg , lastIndex ) ) ; \n\t\t$F92 ( sb ) } \n\t} \n"}, {"code": "protected void removeFromParentInfo ( Openable child ) { \n\tOpenable parent = ( Openable ) child . getParent ( ) ; \n\tif $F73305 ( parent ) { \n\t\ttry { \n\t\t\tOpenableElementInfo info = ( OpenableElementInfo ) parent . getElementInfo ( ) ; \n\t\t\tinfo . removeChild ( child ) ; \n\t\t\t} \n\t\tcatch ( JavaModelException e ) $F845 } \n\t} \n"}, {"code": "$F27745 ( mUpdateListeners ) "}, {"code": "public static String encodeString ( String s ) { \n\treturn new String ( encode ( s . getBytes ( ) ) ) ; \n\t} \n"}, {"code": "public void executePlan ( TaskCompleter completer , String successMessage , WorkflowCallbackHandler callbackHandler , $F131 callbackHandlerArgs , WorkflowRollbackHandler rollbackHandler , $F131 rollbackHandlerArgs ) throws WorkflowException { \n\tthis . _callbackHandler = callbackHandler ; \n\tif ( callbackHandlerArgs != null ) { \n\t\tthis . _callbackHandlerArgs = callbackHandlerArgs . clone ( ) ; \n\t\t} \n\tthis . _rollbackHandler = rollbackHandler ; \n\tif ( rollbackHandlerArgs != null ) { \n\t\tthis . _rollbackHandlerArgs = rollbackHandlerArgs . clone ( ) ; \n\t\t} \n\tthis . _taskCompleter = completer ; \n\tthis . _successMessage = successMessage ; \n\t_service . executePlan ( this ) ; \n\t} \n"}, {"code": "private OSInfo $F72 $F845 "}, {"code": "public boolean isMutable $F72 { \n\treturn mutable ; \n\t} \n"}, {"code": "public void handleRequest ( RequestContext rc ) throws CLIException { \n\tsuper . handleRequest ( rc ) ; \n\tldapLogin ( ) ; \n\tString serviceName = getStringOptionValue ( IArgument . SERVICE_NAME ) ; \n\tString subConfigName = getStringOptionValue ( IArgument . SUB_CONFIGURATION_NAME ) ; \n\tString realmName = getStringOptionValue ( IArgument . REALM_NAME ) ; \n\tif $F38892 ( realmName ) { \n\t\tdeleteSubConfigToRoot ( serviceName , subConfigName ) ; \n\t\t} \n\telse { \n\t\tdeleteSubConfigFromRealm ( realmName , serviceName , subConfigName ) ; \n\t\t} \n\t} \n"}, {"code": "public void enforceContext ( Resource ... contexts ) { \n\tOpenRDFUtil . verifyContextNotNull ( contexts ) ; \n\t$F17879 ( this , Arrays , contexts ) } \n"}, {"code": "protected void runUpload ( Integer numOfThreads , $F140617 ( attributes ) , Boolean createNewVersion , Boolean force ) throws Exception { \n\trunUpload ( numOfThreads , attributes , createNewVersion , force , null , null ) ; \n\t} \n"}, {"code": "public final Collection $F44984 components $F72 { \n\treturn new $F9623 $F6680 ( components ) ; \n\t} \n"}, {"code": "protected $F8748 canPredict $F70738 ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType ) { \n\tprint ( NUM00 ) ; \n\tprintAttributeSummary ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType ) ; \n\tprint ( NUM00 ) ; \n\t$F8728 ( accepts ) $F18793 ( accepts ) $F18793 ( accepts ) $F18793 ( accepts ) $F18793 ( accepts ) $F18793 ( accepts ) $F18793 ( accepts ) $F18793 ( accepts ) $F18793 ( accepts ) $F18793 ( accepts ) int numTrain = getNumInstances ( ) , numClasses = NUM00 , missingLevel = NUM00 ; \n\tboolean predictorMissing = _BOOL , classMissing = _BOOL ; \n\treturn runBasicTest ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType , missingLevel , predictorMissing , classMissing , numTrain , numClasses , accepts ) ; \n\t} \n"}, {"code": "public void test_historyIndexDisabled $F72 throws SailException { \n\t$F17606 ( properties , getProperties ) properties . setProperty ( com . bigdata . rdf . store . AbstractTripleStore . Options . HISTORY_SERVICE , NUM00 ) ; \n\tfinal BigdataSail sail = getSail ( properties ) ; \n\ttry { \n\t\t$F21883 ( sail ) final BigdataSailConnection conn = sail . getConnection ( ) ; \n\t\ttry { \n\t\t\tfinal IIndex ndx = getHistoryIndex ( conn . getTripleStore ( ) ) ; \n\t\t\tassertNull ( ndx ) ; \n\t\t\t$F19121 ( conn ) } \n\t\t$F3229 ( conn ) } \n\tfinally { \n\t\tsail . __tearDownUnitTest ( ) ; \n\t\t} \n\t} \n"}, {"code": "$F172853 ( collapse , _BOOL ) "}, {"code": "public int numInstances $F72 $F1652 ( m_Instances ) "}, {"code": "$F1 public void startDocument ( XMLLocator locator , String encoding , NamespaceContext namespaceContext , Augmentations augs ) throws XNIException { \n\tfNamespaceContext = namespaceContext ; \n\ttry { \n\t\tif ( fDocumentHandler != null ) { \n\t\t\tif ( locator != null ) { \n\t\t\t\tfDocumentHandler . setDocumentLocator ( new LocatorProxy ( locator ) ) ; \n\t\t\t\t} \n\t\t\tif ( fDocumentHandler != null ) { \n\t\t\t\tfDocumentHandler . startDocument ( ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( fContentHandler != null ) { \n\t\t\tif ( locator != null ) { \n\t\t\t\tfContentHandler . setDocumentLocator ( new LocatorProxy ( locator ) ) ; \n\t\t\t\t} \n\t\t\tif ( fContentHandler != null ) { \n\t\t\t\tfContentHandler . startDocument ( ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F122277 ( e ) } \n"}, {"code": "public static double parseNumberPercentWithSeparateRange ( FXGNode node , String value , String name , double minNumber , double maxNumber , double minPercent , double maxPercent , double defaultValue ) { \n\tif ( $F35624 ( value ) && $F25771 ( value ) ) { \n\t\t$F13881 ( doubleValue , value ) try $F12218 ( parseDouble , node , doubleValue , name , minPercent , maxPercent , defaultValue ) catch ( FXGException e ) { \n\t\t\tthrow new FXGException ( node . getStartLine ( ) , node . getStartColumn ( ) , NUM00 , name , value ) ; \n\t\t\t} \n\t\t} \n\telse $F12218 ( parseDouble , node , value , name , minNumber , maxNumber , defaultValue ) } \n"}, {"code": "private void checkDownloadCanProceed $F72 throws StopRequestException { \n\tif ( clock . intervalLessThan ( Clock . Interval . ONE_SECOND ) ) $F932 clock . startInterval ( ) ; \n\tcheckIsPausedOrCanceled ( ) ; \n\tcheckClientRules ( ) ; \n\t} \n"}, {"code": "private void calculateColor ( int coord ) { \n\tcoord = coord - mBarPointerHaloRadius ; \n\tif ( coord < NUM00 ) { \n\t\tcoord = NUM00 ; \n\t\t} \n\telse $F8789 ( coord , mBarLength ) mColor = Color . HSVToColor ( Math . round ( mPosToOpacFactor * coord ) , mHSVColor ) ; \n\tif ( Color . alpha ( mColor ) > NUM00 ) { \n\t\tmColor = Color . HSVToColor ( mHSVColor ) ; \n\t\t} \n\telse if ( Color . alpha ( mColor ) < NUM00 ) { \n\t\tmColor = Color . TRANSPARENT ; \n\t\t} \n\t} \n"}, {"code": "private void deleteEvent ( EventRegKeyExpiration regExpiration , EventReg reg ) { \n\tlisteners . dec ( ) ; \n\tsynchronized ( reg ) { \n\t\t$F205252 tmpls = reg . tmpl . attributeSetTemplates ; \n\t\tif ( tmpls != null ) { \n\t\t\tfor ( $F45516 ( i , tmpls ) ) { \n\t\t\t\tEntryClass eclass = tmpls [ i ] . eclass ; \n\t\t\t\teclass . setNumTemplates ( eclass . getNumTemplates ( ) - NUM00 ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tLong id = reg . eventID ; \n\t\teventByID . remove ( id ) ; \n\t\tif ( regExpiration != null ) $F106 ( eventByTime , regExpiration ) else { \n\t\t\teventByTime . remove ( new EventRegKeyExpiration ( reg , reg . leaseExpiration ) ) ; \n\t\t\t} \n\t\tif ( reg . tmpl . serviceID != null ) { \n\t\t\tObject val = subEventByService . get ( reg . tmpl . serviceID ) ; \n\t\t\tif ( val == reg ) { \n\t\t\t\tsubEventByService . remove ( reg . tmpl . serviceID ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\t$F131 array = ( EventReg [ ] ) val ; \n\t\t\t\tarray = arrayDel ( array , indexOf ( array , reg ) ) ; \n\t\t\t\tif $F9634 ( array ) val = array [ NUM00 ] ; \n\t\t\t\telse val = array ; \n\t\t\t\tsubEventByService . put ( reg . tmpl . serviceID , val ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse $F106 ( subEventByID , id ) computeMaxLeases ( ) ; \n\t\t} \n\t} \n"}, {"code": "public String gtidSet $F72 { \n\treturn this . gtidSet != null ? this . gtidSet : null ; \n\t} \n"}, {"code": "public static Peer createMapPeer ( Map map ) throws MessageException { \n\tif ( ! map . containsKey ( PORT ) || ! map . containsKey ( ADDRESS ) ) throw new MessageException $F580 ; \n\tint port = ( int ) ( long ) map . get ( PORT ) ; \n\t$F123 ( address , map , ADDRESS ) String peerId = null ; \n\tif $F1710 ( map , PEER_ID ) $F18988 ( peerId , map , PEER_ID ) return new Peer ( peerId , new InetSocketAddress ( address , port ) ) ; \n\t} \n"}, {"code": "private static int countGapsDashDotStar ( String sequence ) { \n\tint count = NUM00 ; \n\tfor ( $F1088 ( i , sequence ) ) { \n\t\t$F8205 ( a , sequence , i ) if $F58237 ( a ) count ++ ; \n\t\t} \n\treturn count ; \n\t} \n"}, {"code": "private boolean testPassword $F72 throws PdfSecurityException { \n\tint count = NUM00 ; \n\t$F10317 ( rawValue ) $F96 keyValue ; \n\tfor ( $F6268 ( i ) ) { \n\t\trawValue [ i ] = ( byte ) Integer . parseInt ( pad [ i ] , NUM00 ) ; \n\t\t} \n\t$F96 encrypted = ObjectCloneFactory . cloneArray ( rawValue ) ; \n\tif ( rev == NUM00 ) { \n\t\tencryptionKey = calculateKey ( O , P , ID ) ; \n\t\tencrypted = decrypt ( encrypted , NUM00 , _BOOL , null , _BOOL , _BOOL ) ; \n\t\t} \n\telse if ( rev >= NUM00 ) { \n\t\tint keyLength = this . keyLength ; \n\t\tcount = NUM00 ; \n\t\tencryptionKey = calculateKey ( O , P , ID ) ; \n\t\tfinal $F96 originalKey = ObjectCloneFactory . cloneArray ( encryptionKey ) ; \n\t\tMessageDigest md = null ; \n\t\ttry $F14527 ( md , MessageDigest ) catch ( final Exception e ) $F109312 ( LogWriter , e ) md . update ( encrypted ) ; \n\t\tkeyValue = md . digest ( ID ) ; \n\t\tkeyValue = decrypt ( keyValue , NUM00 , _BOOL , null , _BOOL , _BOOL ) ; \n\t\t$F4727 ( nextKey , keyLength ) for ( $F34659 ( i ) ) { \n\t\t\tfor ( $F119 ( j , keyLength ) ) { \n\t\t\t\tnextKey [ j ] = ( byte ) ( originalKey [ j ] ^ i ) ; \n\t\t\t\t} \n\t\t\tencryptionKey = nextKey ; \n\t\t\tkeyValue = decrypt ( keyValue , NUM00 , _BOOL , null , _BOOL , _BOOL ) ; \n\t\t\t} \n\t\tencryptionKey = originalKey ; \n\t\t$F46945 ( encrypted ) $F10319 ( System , keyValue , encrypted ) $F10319 ( System , rawValue , encrypted ) } \n\treturn compareKeys ( U , encrypted , count ) ; \n\t} \n"}, {"code": "public static void putDoubleField ( Object obj , long fieldOff , double val ) { \n\tUNSAFE . putDouble ( obj , fieldOff , val ) ; \n\t} \n"}, {"code": "$F47733 ( reader , writer , buffer , count ) "}, {"code": "public String toOIDString $F72 { \n\tif ( sOID == null ) { \n\t\tsOID = NUM00 + toString ( ) ; \n\t\t} \n\treturn sOID ; \n\t} \n"}, {"code": "public void emitDirect ( int taskId , String streamId , Tuple anchor , $F6689 tuple ) { \n\temitDirect ( taskId , streamId , Arrays . asList ( anchor ) , tuple ) ; \n\t} \n"}, {"code": "protected void loadValue ( String sValue ) { \n\t$F1382 ( sValue ) try { \n\t\tint r = $F608 ( Integer , sValue ) ; \n\t\tint g = $F608 ( Integer , sValue ) ; \n\t\tint b = $F608 ( Integer , sValue ) ; \n\t\tvalue = new Color ( r , g , b ) ; \n\t\t} \n\tcatch ( NumberFormatException nfe ) $F5795 ( revertToDefault ) catch ( StringIndexOutOfBoundsException sioobe ) $F5795 ( revertToDefault ) } \n"}, {"code": "public void schemaChanged ( String serviceName , String version ) $F5795 ( updateStatus ) "}, {"code": "private static int byteCompaction ( int mode , $F2027 codewords , int codeIndex , StringBuilder result ) { \n\tif ( mode == BYTE_COMPACTION_MODE_LATCH ) { \n\t\tint count = NUM00 ; \n\t\tlong value = NUM00 ; \n\t\t$F11577 ( decodedData ) $F11844 ( byteCompactedCodewords ) boolean end = _BOOL ; \n\t\tint nextCode = codewords [ codeIndex ++ ] ; \n\t\twhile ( ( codeIndex < codewords [ NUM00 ] ) && ! end ) { \n\t\t\tbyteCompactedCodewords [ count ++ ] = nextCode ; \n\t\t\tvalue = NUM00 * value + nextCode ; \n\t\t\tnextCode = codewords [ codeIndex ++ ] ; \n\t\t\tif $F62764 ( nextCode , TEXT_COMPACTION_MODE_LATCH , BYTE_COMPACTION_MODE_LATCH , NUMERIC_COMPACTION_MODE_LATCH , BYTE_COMPACTION_MODE_LATCH_6 , BEGIN_MACRO_PDF417_CONTROL_BLOCK , BEGIN_MACRO_PDF417_OPTIONAL_FIELD , MACRO_PDF417_TERMINATOR ) { \n\t\t\t\tcodeIndex -- ; \n\t\t\t\tend = _BOOL ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tif ( ( count % NUM00 == NUM00 ) && ( count > NUM00 ) ) { \n\t\t\t\t\tfor ( $F809 ( j ) ) { \n\t\t\t\t\t\tdecodedData [ NUM00 - j ] = ( char ) ( value % NUM00 ) ; \n\t\t\t\t\t\tvalue >>= NUM00 ; \n\t\t\t\t\t\t} \n\t\t\t\t\tresult . append ( decodedData ) ; \n\t\t\t\t\tcount = NUM00 ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tif ( codeIndex == codewords [ NUM00 ] && nextCode < TEXT_COMPACTION_MODE_LATCH ) $F52339 ( byteCompactedCodewords , count , nextCode ) for ( $F119 ( i , count ) ) { \n\t\t\t$F3356 ( result , byteCompactedCodewords , i ) } \n\t\t} \n\telse if ( mode == BYTE_COMPACTION_MODE_LATCH_6 ) { \n\t\tint count = NUM00 ; \n\t\tlong value = NUM00 ; \n\t\tboolean end = _BOOL ; \n\t\twhile $F38554 ( codeIndex , codewords , end ) { \n\t\t\tint code = codewords [ codeIndex ++ ] ; \n\t\t\tif ( code < TEXT_COMPACTION_MODE_LATCH ) { \n\t\t\t\tcount ++ ; \n\t\t\t\tvalue = NUM00 * value + code ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tif $F62764 ( code , TEXT_COMPACTION_MODE_LATCH , BYTE_COMPACTION_MODE_LATCH , NUMERIC_COMPACTION_MODE_LATCH , BYTE_COMPACTION_MODE_LATCH_6 , BEGIN_MACRO_PDF417_CONTROL_BLOCK , BEGIN_MACRO_PDF417_OPTIONAL_FIELD , MACRO_PDF417_TERMINATOR ) { \n\t\t\t\t\tcodeIndex -- ; \n\t\t\t\t\tend = _BOOL ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tif ( ( count % NUM00 == NUM00 ) && ( count > NUM00 ) ) { \n\t\t\t\t$F11577 ( decodedData ) for ( $F809 ( j ) ) { \n\t\t\t\t\tdecodedData [ NUM00 - j ] = $F27723 ( value ) ; \n\t\t\t\t\tvalue >>= NUM00 ; \n\t\t\t\t\t} \n\t\t\t\tresult . append ( decodedData ) ; \n\t\t\t\tcount = NUM00 ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn codeIndex ; \n\t} \n"}, {"code": "public int addAndGet ( T obj , int delta ) { \n\tfor ( $F589 ) { \n\t\tint current = get ( obj ) ; \n\t\tint next = current + delta ; \n\t\t$F158832 ( compareAndSet , obj , current , next ) } \n\t} \n"}, {"code": "public KCResponse serve ( String uri , String method , Properties header , Properties parms , Properties files ) $F33971 ( serveFile , uri , header , myRootDir , _BOOL ) "}, {"code": "protected void fillMemData ( Object data , $F2027 posits , int length , Object output , int outputOffset , int dim ) { \n\tif $F2485 ( data ) { \n\t\t$F32760 ( xo , data ) fillMemData ( xo [ posits [ dim ] ] , posits , length , output , outputOffset , dim + NUM00 ) ; \n\t\t} \n\telse { \n\t\tint startFrom = posits [ dim ] ; \n\t\tint startTo = outputOffset ; \n\t\tint copyLength = length ; \n\t\tif ( posits [ dim ] < NUM00 ) { \n\t\t\tstartFrom -= posits [ dim ] ; \n\t\t\tstartTo -= posits [ dim ] ; \n\t\t\tcopyLength += posits [ dim ] ; \n\t\t\t} \n\t\tif ( posits [ dim ] + length > this . dims [ dim ] ) { \n\t\t\tcopyLength -= posits [ dim ] + length - this . dims [ dim ] ; \n\t\t\t} \n\t\tSystem . arraycopy ( data , startFrom , output , startTo , copyLength ) ; \n\t\t} \n\t} \n"}, {"code": "public $F65632 startAsyncJob ( String jobType ) { \n\ttry { \n\t\tfinal JobRunnable jobRunnable = findJobRunnable ( jobType ) ; \n\t\tJobInfo jobInfo = createJobInfo ( jobType ) ; \n\t\trepository . markJobAsRunningIfPossible ( jobInfo , mutexJobTypesFor ( jobType ) ) ; \n\t\trepository . createOrUpdate ( jobInfo ) ; \n\t\treturn Optional . of ( startAsync ( metered ( jobRunnable ) , jobInfo . getJobId ( ) ) ) ; \n\t\t} \n\tcatch ( JobBlockedException e ) { \n\t\tLOG . info ( e . getMessage ( ) ) ; \n\t\t$F21169 ( Optional ) } \n\t} \n"}, {"code": "public boolean isLegalReplacement $F97 ( replacement ) { \n\tif ( decoder == null ) { \n\t\tdecoder = charset . newDecoder ( ) ; \n\t\tdecoder . onMalformedInput ( CodingErrorAction . REPORT ) ; \n\t\tdecoder . onUnmappableCharacter ( CodingErrorAction . REPORT ) ; \n\t\t} \n\t$F23500 ( in , ByteBuffer , replacement ) CharBuffer out = CharBuffer . allocate ( ( int ) ( replacement . length * decoder . maxCharsPerByte ( ) ) ) ; \n\tCoderResult result = decoder . decode ( in , out , _BOOL ) ; \n\treturn ! result . isError ( ) ; \n\t} \n"}, {"code": "public static void adaptTable ( ConstraintTableLayout table ) { \n\t$F2049 ( width , table ) $F2047 ( height , table ) ConstraintWidget . DimensionBehaviour horizontalBehaviour = table . getHorizontalDimensionBehaviour ( ) ; \n\tConstraintWidget . DimensionBehaviour verticalBehaviour = table . getVerticalDimensionBehaviour ( ) ; \n\ttable . setHorizontalDimensionBehaviour ( ConstraintWidget . DimensionBehaviour . WRAP_CONTENT ) ; \n\ttable . setVerticalDimensionBehaviour ( ConstraintWidget . DimensionBehaviour . WRAP_CONTENT ) ; \n\ttable . layout ( ) ; \n\ttable . layout ( ) ; \n\ttable . setMinWidth ( table . getWidth ( ) ) ; \n\ttable . setMinHeight ( table . getHeight ( ) ) ; \n\ttable . computeGuidelinesPercentPositions ( ) ; \n\ttable . setHorizontalDimensionBehaviour ( horizontalBehaviour ) ; \n\ttable . setVerticalDimensionBehaviour ( verticalBehaviour ) ; \n\ttable . setWidth ( width < table . getMinWidth ( ) ? table . getMinWidth ( ) : width ) ; \n\ttable . setHeight ( height < table . getMinHeight ( ) ? table . getMinHeight ( ) : height ) ; \n\ttable . layout ( ) ; \n\t} \n"}, {"code": "public static < V , C extends Collection $F42625 > C addAll ( C c , V ... vals ) { \n\tCollections . addAll ( c , vals ) ; \n\treturn c ; \n\t} \n"}, {"code": "public static void addStrut ( JComponent b , int layout , int size ) { \n\t$F61236 ( size ) b . add ( getAxis ( b , layout ) == BoxLayout . X_AXIS ? Box . createHorizontalStrut ( size ) : Box . createVerticalStrut ( size ) ) ; \n\t} \n"}, {"code": "public void elementType $F21324 ( name , model , memberOf , flags ) { \n\tElementType e = new ElementType ( name , model , memberOf , flags , this ) ; \n\ttheElementTypes . put ( name . toLowerCase ( ) , e ) ; \n\tif ( memberOf == M_ROOT ) theRoot = e ; \n\t} \n"}, {"code": "public int arrayIndexScale ( Class clazz ) { \n\tif $F101443 ( clazz ) $F825 return arrayIndexScale0 ( clazz ) ; \n\t} \n"}, {"code": "public static StringPool readStringPool ( ByteBuffer buffer , StringPoolHeader stringPoolHeader ) { \n\tlong beginPos = buffer . position ( ) ; \n\t$F2469 offsets = new long [ ( int ) stringPoolHeader . getStringCount ( ) ] ; \n\tif ( stringPoolHeader . getStringCount ( ) > NUM00 ) { \n\t\tfor ( int idx = NUM00 ; \n\t\tidx < stringPoolHeader . getStringCount ( ) ; \n\t\tidx ++ ) { \n\t\t\toffsets [ idx ] = Buffers . readUInt ( buffer ) ; \n\t\t\t} \n\t\t} \n\tboolean utf8 = ( stringPoolHeader . getFlags ( ) & StringPoolHeader . UTF8_FLAG ) != NUM00 ; \n\tlong stringPos = beginPos + stringPoolHeader . getStringsStart ( ) - stringPoolHeader . getHeaderSize ( ) ; \n\tbuffer . position ( ( int ) stringPos ) ; \n\tStringPoolEntry [ ] entries = new StringPoolEntry [ offsets . length ] ; \n\tfor ( $F1139 ( i , offsets ) ) { \n\t\tentries [ i ] = new StringPoolEntry ( i , stringPos + offsets [ i ] ) ; \n\t\t} \n\tString lastStr = null ; \n\tlong lastOffset = - NUM00 ; \n\tStringPool stringPool = new StringPool ( ( int ) stringPoolHeader . getStringCount ( ) ) ; \n\tfor ( StringPoolEntry entry : entries ) { \n\t\tif ( entry . offset == lastOffset ) { \n\t\t\tstringPool . set ( entry . index , lastStr ) ; \n\t\t\t$F598 } \n\t\tbuffer . position ( ( int ) entry . offset ) ; \n\t\tlastOffset = entry . offset ; \n\t\tString str = ParseUtils . readString ( buffer , utf8 ) ; \n\t\tlastStr = str ; \n\t\tstringPool . set ( entry . index , str ) ; \n\t\t} \n\tbuffer . position ( ( int ) ( beginPos + stringPoolHeader . getBodySize ( ) ) ) ; \n\treturn stringPool ; \n\t} \n"}, {"code": "public String strRep $F72 { \n\treturn $F3905 ( rankTeamPollScore , abbr , wins , losses ) ; \n\t} \n"}, {"code": "$F1 public String toString $F72 { \n\tif ( eIsProxy ( ) ) $F92 ( super ) StringBuffer result = $F80120 ( super ) ; \n\t$F84 ( result ) result . append ( kind ) ; \n\t$F84 ( result ) $F92 ( result ) } \n"}, {"code": "$F2208 ( sourceList , entryList , isEmpty , sourceCount , entry ) "}, {"code": "private void recordRPOperation ( DbClient dbClient , OperationTypeEnum opType , Operation . Status status , Object ... extParam ) { \n\ttry { \n\t\tboolean opStatus = ( Operation . Status . ready == status ) ? _BOOL : _BOOL ; \n\t\tString evType ; \n\t\tevType = opType . getEvType ( opStatus ) ; \n\t\t$F137633 ( evDesc , opType ) String opStage = AuditLogManager . AUDITOP_END ; \n\t\t_log . info ( NUM00 , opType . toString ( ) , $F5528 ( evType ) + evDesc ) ; \n\t\trecordBourneRPEvent ( dbClient , getId ( ) , evType , status , evDesc ) ; \n\t\tswitch ( opType ) { \n\t\t\tcase START_RP_LINK : case STOP_RP_LINK : case PAUSE_RP_LINK : case RESUME_RP_LINK : case FAILOVER_RP_LINK : case FAILOVER_CANCEL_RP_LINK : case CHANGE_RP_IMAGE_ACCESS_MODE : case SWAP_RP_VOLUME : AuditBlockUtil . auditBlock ( dbClient , opType , opStatus , opStage , extParam ) ; \n\t\t\t$F597 $F37651 ( _log ) } \n\t\t} \n\tcatch ( Exception e ) { \n\t\t_log . error ( $F89018 ( opType , e ) ) ; \n\t\t} \n\t} \n"}, {"code": "void autoClosingClipOpened ( AutoClosingClip clip ) { \n\tif ( Printer . debug ) $F980 ( Printer ) int index = NUM00 ; \n\tsynchronized ( autoClosingClips ) { \n\t\tindex = getAutoClosingClipIndex ( clip ) ; \n\t\tif ( index == - NUM00 ) { \n\t\t\tif ( Printer . debug ) $F586 ( Printer , clip ) autoClosingClips . add ( new ClipInfo ( clip ) ) ; \n\t\t\t} \n\t\t} \n\tif ( index == - NUM00 ) { \n\t\t$F59357 ( this , notifyAll ) } \n\tif ( Printer . debug ) $F25390 ( Printer , autoClosingClips ) } \n"}, {"code": "public boolean implies ( Permission permission ) { \n\tif ( ! ( permission instanceof ExecOptionPermission ) ) return _BOOL ; \n\tExecOptionPermission p = ( ExecOptionPermission ) permission ; \n\tif ( all_allowed ) return _BOOL ; \n\t$F20605 ( pname , p ) Permission x = permissions . get ( pname ) ; \n\tif ( x != null ) return x . implies ( permission ) ; \n\tint last , offset ; \n\t$F25985 ( offset , pname ) while ( ( last = pname . lastIndexOf ( NUM00 , offset ) ) != - NUM00 ) { \n\t\tpname = $F1399 ( pname , last ) + NUM00 ; \n\t\tx = permissions . get ( pname ) ; \n\t\tif ( x != null ) { \n\t\t\treturn x . implies ( permission ) ; \n\t\t\t} \n\t\toffset = last - NUM00 ; \n\t\t} \n\t$F32928 ( pname , p ) $F25985 ( offset , pname ) while ( ( last = pname . lastIndexOf ( NUM00 , offset ) ) != - NUM00 ) { \n\t\tpname = $F1399 ( pname , last ) + NUM00 ; \n\t\tx = permissions . get ( pname ) ; \n\t\tif ( x != null ) { \n\t\t\treturn x . implies ( permission ) ; \n\t\t\t} \n\t\toffset = last - NUM00 ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void addTailArg ( String arg ) $F207 ( _tailArgs , arg ) "}, {"code": "private static $F96 save ( Bitmap src , Bitmap . CompressFormat format , int quality ) { \n\tByteArrayOutputStream outputStream = null ; \n\ttry { \n\t\t$F1659 ( outputStream ) src . compress ( format , quality , outputStream ) ; \n\t\t$F11316 ( outputStream ) } \n\tfinally { \n\t\t$F296786 ( outputStream , e1 ) } \n\t} \n"}, {"code": "public boolean isExternal ( Resource input ) $F298 ( externalResources , input ) "}, {"code": "protected final void writeD ( ByteBuffer buf , int value ) { \n\tbuf . putInt ( value ) ; \n\t} \n"}, {"code": "$F1 public AbstractScannedResult scanBlocklet ( BlocksChunkHolder blocksChunkHolder ) throws QueryExecutionException { \n\ttry { \n\t\tfillScannedResult ( blocksChunkHolder ) ; \n\t\t} \n\tcatch ( FilterUnsupportedException e ) { \n\t\tthrow new QueryExecutionException $F1783 ( e ) ; \n\t\t} \n\treturn scannedResult ; \n\t} \n"}, {"code": "public List < ShoppingCartItem > items $F72 { \n\tList < ShoppingCartItem > result = FastList . newInstance ( ) ; \n\tresult . addAll ( cartLines ) ; \n\treturn result ; \n\t} \n"}, {"code": "MutableBigInteger ( BigInteger b ) { \n\tintLen = b . mag . length ; \n\tvalue = Arrays . copyOf ( b . mag , intLen ) ; \n\t} \n"}, {"code": "public boolean isHttp11 $F72 { \n\t$F72433 ( mVersion , HTTP11 , _BOOL ) return _BOOL ; \n\t} \n"}, {"code": "private int readNext ( boolean charstring ) { \n\tnum = ( int ) ( data [ pos ++ ] ) & NUM00 ; \n\tif ( num == NUM00 && ! charstring ) { \n\t\treadFNum ( ) ; \n\t\treturn type = FLT ; \n\t\t} \n\telse if ( num == NUM00 ) { \n\t\tnum = ( ( ( int ) data [ pos ] ) < < NUM00 ) + ( ( ( int ) data [ pos + NUM00 ] ) & NUM00 ) ; \n\t\tpos += NUM00 ; \n\t\treturn type = NUM ; \n\t\t} \n\telse if ( num == NUM00 && ! charstring ) { \n\t\tnum = ( ( ( int ) data [ pos ] & NUM00 ) < < NUM00 ) | ( ( ( int ) data [ pos + NUM00 ] & NUM00 ) < < NUM00 ) | ( ( ( int ) data [ pos + NUM00 ] & NUM00 ) < < NUM00 ) | ( ( ( int ) data [ pos + NUM00 ] & NUM00 ) ) ; \n\t\tpos += NUM00 ; \n\t\treturn type = NUM ; \n\t\t} \n\telse if ( num == NUM00 ) { \n\t\tnum = NUM00 + ( ( int ) ( data [ pos ++ ] ) & NUM00 ) ; \n\t\treturn type = CMD ; \n\t\t} \n\telse if ( num < NUM00 ) { \n\t\treturn type = CMD ; \n\t\t} \n\telse if ( num < NUM00 ) { \n\t\tnum -= NUM00 ; \n\t\treturn type = NUM ; \n\t\t} \n\telse if ( num < NUM00 ) { \n\t\tnum = ( num - NUM00 ) * NUM00 + ( ( ( int ) data [ pos ++ ] ) & NUM00 ) + NUM00 ; \n\t\treturn type = NUM ; \n\t\t} \n\telse if ( num < NUM00 ) { \n\t\tnum = - ( num - NUM00 ) * NUM00 - ( ( ( int ) data [ pos ++ ] ) & NUM00 ) - NUM00 ; \n\t\treturn type = NUM ; \n\t\t} \n\telse if ( ! charstring ) { \n\t\tprintData ( ) ; \n\t\t$F11388 } \n\telse { \n\t\tfnum = ( ( ( ( int ) data [ pos ] & NUM00 ) < < NUM00 ) | ( ( ( int ) data [ pos + NUM00 ] & NUM00 ) < < NUM00 ) | ( ( ( int ) data [ pos + NUM00 ] & NUM00 ) < < NUM00 ) | ( ( ( int ) data [ pos + NUM00 ] & NUM00 ) ) ) / NUM00 ; \n\t\tpos += NUM00 ; \n\t\treturn type = FLT ; \n\t\t} \n\t} \n"}, {"code": "protected void deleteIcon $F72 { \n\t$F2329 ( _selectedIcon ) if ( _iconMap . remove ( _selectedIcon . getName ( ) ) != null ) { \n\t\tremoveIconFamiliesPanel ( ) ; \n\t\taddIconsToPanel ( _iconMap ) ; \n\t\tdeleteIconButton . setEnabled ( _BOOL ) ; \n\t\tvalidate ( ) ; \n\t\t} \n\t} \n"}, {"code": "public boolean equals ( Object obj ) { \n\t$F397 ( obj , _BOOL ) if ( this == obj ) return _BOOL ; \n\t$F9904 ( getClass , obj , _BOOL ) ChoiceFormat other = ( ChoiceFormat ) obj ; \n\treturn ( $F3629 ( Arrays , choiceLimits , other ) && $F3629 ( Arrays , choiceFormats , other ) ) ; \n\t} \n"}, {"code": "private static File createReserveDiskCacheDir ( Context context ) { \n\tFile cacheDir = StorageUtils . getCacheDirectory ( context , _BOOL ) ; \n\t$F109797 ( individualDir , cacheDir ) $F202511 ( individualDir , cacheDir ) return cacheDir ; \n\t} \n"}, {"code": "public static Date updated ( Date self , Map < Object , Integer > updates ) { \n\t$F4377 ( cal , Calendar ) cal . setTime ( self ) ; \n\tset ( cal , updates ) ; \n\t$F11894 ( cal ) } \n"}, {"code": "public boolean displayTopic ( String name ) { \n\tString topic = null ; \n\tif ( name == null ) topic = DEFAULT + FILE_TYPE ; \n\telse topic = name . toLowerCase ( ) + FILE_TYPE ; \n\t$F4453 ( helpFile , helpDir , topic ) return display ( helpFile ) ; \n\t} \n"}, {"code": "private void dashToWords ( String tokenVal ) { \n\t$F1384 ( index , tokenVal ) $F11991 ( aaa , tokenVal , index ) $F76054 ( bbb , tokenVal , index ) if ( matches ( digitsPattern , aaa ) && matches ( digitsPattern , bbb ) ) { \n\t\t$F85094 ( featureSet , tokenItem ) $F282478 ( featureSet , aaa ) tokenToWords ( aaa ) ; \n\t\t$F71514 ( wordRelation ) $F282478 ( featureSet , bbb ) tokenToWords ( bbb ) ; \n\t\tfeatureSet . setString ( NUM00 , NUM00 ) ; \n\t\t} \n\telse { \n\t\ttokenToWords ( aaa ) ; \n\t\ttokenToWords ( bbb ) ; \n\t\t} \n\t} \n"}, {"code": "public static int numberOfTrailingZerosSigned $F101011 ( v ) { \n\tfor ( $F26577 ( p ) ) { \n\t\tif ( p == v . length ) $F7629 if ( v [ p ] != NUM00 ) { \n\t\t\treturn Long . numberOfTrailingZeros ( v [ p ] ) + p * Long . SIZE ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static void applyWMRule ( Collection < MWMInOutBound > lines , String boundType ) { \n\tfor ( MWMInOutBound line : lines ) { \n\t\tfor ( MWMDefinition definition : MWMDefinition . getAll ( line . getCtx ( ) , line . get_TrxName ( ) ) ) { \n\t\t\tWMRuleEngine . validateDefinition ( line , definition , boundType ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static float readFloat ( final JSONArray jsonArray , final int index , final boolean required , final boolean notNull ) throws JSONException { \n\tif ( required ) { \n\t\treturn ( float ) jsonArray . getDouble ( index ) ; \n\t\t} \n\t$F3652 ( notNull , jsonArray , index , String , Locale , NULL_VALUE_FORMAT_ARRAY ) float value = NUM00 ; \n\tif $F3653 ( jsonArray , index ) { \n\t\tvalue = ( float ) jsonArray . getDouble ( index ) ; \n\t\t} \n\treturn value ; \n\t} \n"}, {"code": "public void flush $F72 throws IOException { \n\tflushBits ( ) ; \n\t$F1206 ( out ) } \n"}, {"code": "public final Flux $F4203 onErrorResumeWith ( Predicate < $F3204 > predicate , Function < $F3204 , ? extends $F40798 > fallback ) { \n\t$F10578 ( Objects , predicate ) return onErrorResumeWith ( null ) ; \n\t} \n"}, {"code": "$F1 public $F987 listOptions $F72 { \n\t$F20795 ( result ) $F1000 ( result ) $F9010 ( result , Collections , super ) $F1007 ( result ) } \n"}, {"code": "public $F32043 final void testSetUsersNegative $F72 { \n\tRole role = new Role ( TEST_ROLE ) ; \n\tthrown . expect ( $F85137 ) ; \n\trole . setUsers ( null ) ; \n\t} \n"}, {"code": "private $F2689 findResourceNames $F1947 ( path , prefix , suffix ) throws IOException { \n\t$F2689 resourceNames = findResourceNamesFromFileSystem ( path , new File ( path ) ) ; \n\treturn filterResourceNames ( resourceNames , prefix , suffix ) ; \n\t} \n"}, {"code": "public boolean add ( K key , V item ) { \n\t$F25669 values = map . get ( key ) ; \n\tif ( values == null ) { \n\t\tvalues = ( sorted ? new TreeSet $F2193 $F72 : new HashSet $F2193 $F72 ) ; \n\t\tmap . put ( key , values ) ; \n\t\t} \n\t$F397 ( item , _BOOL ) $F20805 ( values , item ) } \n"}, {"code": "public void addECM ( ECMInfo info ) $F207 ( ecmEffects , info ) "}, {"code": "protected void loadImage ( String filePath , OMGraphicList ret ) { \n\t$F1705 ( file , filePath ) if $F1892 ( file ) { \n\t\t$F1894 ( files , file ) for ( $F1139 ( i , files ) ) { \n\t\t\tloadImage ( filePath + NUM00 + files [ i ] , ret ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tfireStatusUpdate ( LayerStatusEvent . START_WORKING ) ; \n\t\ttry { \n\t\t\tURL fileURL = PropUtils . getResourceOrFileOrURL ( filePath ) ; \n\t\t\tif ( fileURL != null ) { \n\t\t\t\tif ( imageReaderLoaders != null ) { \n\t\t\t\t\tImageTile imageTile = null ; \n\t\t\t\t\tfor ( ImageReaderLoader idl : imageReaderLoaders ) { \n\t\t\t\t\t\tif ( idl . isLoadable ( filePath ) ) { \n\t\t\t\t\t\t\tImageReader id = idl . getImageReader ( fileURL ) ; \n\t\t\t\t\t\t\tImageTile tmpImageTile = id . getImageTile ( imageCache ) ; \n\t\t\t\t\t\t\tif ( imageTile == null ) { \n\t\t\t\t\t\t\t\timageTile = tmpImageTile ; \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\telse if ( tmpImageTile != null && imageTile instanceof ErrImageTile ) { \n\t\t\t\t\t\t\t\timageTile = tmpImageTile ; \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\tif ( imageTile != null && ! ( imageTile instanceof ErrImageTile ) ) $F5153 } \n\t\t\t\t\t\t} \n\t\t\t\t\tif ( imageTile != null ) { \n\t\t\t\t\t\taddImageToLists ( imageTile , ret , fileURL ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tlogger . warning ( NUM00 + getName ( ) + NUM00 ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse $F37856 ( logger , filePath ) } \n\t\tcatch ( MalformedURLException murle ) $F845 } \n\t} \n"}, {"code": "$F1 protected final boolean writeData ( ByteBuffer data ) { \n\tsynchronized ( guard ) { \n\t\tGsServerPacket packet = sendMsgQueue . pollFirst ( ) ; \n\t\t$F1933 ( packet , _BOOL ) packet . write ( this , data ) ; \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public static ExportMask createExportMask ( DbClient dbClient , ExportGroup exportGroup , URI sdUri , String maskName ) throws DatabaseException { \n\tExportMask exportMask = new ExportMask $F72 ; \n\texportMask . setId ( URIUtil . createId ( ExportMask . class ) ) ; \n\texportMask . setMaskName ( maskName ) ; \n\texportMask . setStorageDevice ( sdUri ) ; \n\tdbClient . createObject ( exportMask ) ; \n\texportGroup . addExportMask ( exportMask . getId ( ) ) ; \n\tdbClient . updateObject ( exportGroup ) ; \n\treturn exportMask ; \n\t} \n"}, {"code": "public LogEntry ( String timestamp , String contents ) $F20755 ( this , timestamp , contents ) "}, {"code": "$F87136 ( data , imageView , bitmapWorkerTask , getBitmapWorkerTask , bitmapData , _BOOL , BuildConfig , Log , TAG ) "}, {"code": "void replacePolicyInResourceTree ( Policy oldPolicy , Policy newPolicy ) throws PolicyException , SSOException $F19517 ( removePolicyFromResourceTree , oldPolicy , addPolicyToResourceTree , newPolicy ) "}, {"code": "private Shape [ ] createHorizontalBlock ( double x0 , double width , double y0 , double y1 , boolean inverted ) { \n\tShape [ ] result = new Shape $F380 ; \n\t$F152056 ( p00 , y0 , x0 ) Point2D p01 = new $F5047 ( y0 , x0 + width ) ; \n\tPoint2D p02 = new $F5047 ( p01 . getX ( ) + getXOffset ( ) , p01 . getY ( ) - getYOffset ( ) ) ; \n\tPoint2D p03 = new $F5047 ( p00 . getX ( ) + getXOffset ( ) , p00 . getY ( ) - getYOffset ( ) ) ; \n\t$F152056 ( p0 , y1 , x0 ) Point2D p1 = new $F5047 ( y1 , x0 + width ) ; \n\tPoint2D p2 = new $F5047 ( p1 . getX ( ) + getXOffset ( ) , p1 . getY ( ) - getYOffset ( ) ) ; \n\tPoint2D p3 = new $F5047 ( p0 . getX ( ) + getXOffset ( ) , p0 . getY ( ) - getYOffset ( ) ) ; \n\t$F13609 ( bottom ) $F76134 ( bottom , p1 ) $F76138 ( bottom , p01 ) $F76138 ( bottom , p02 ) $F76138 ( bottom , p2 ) $F2272 ( bottom ) $F13609 ( top ) $F76134 ( top , p0 ) $F76138 ( top , p00 ) $F76138 ( top , p03 ) $F76138 ( top , p3 ) $F2272 ( top ) $F13609 ( back ) $F76134 ( back , p2 ) $F76138 ( back , p02 ) $F76138 ( back , p03 ) $F76138 ( back , p3 ) $F2272 ( back ) $F13609 ( front ) $F76134 ( front , p0 ) $F76138 ( front , p1 ) $F76138 ( front , p01 ) $F76138 ( front , p00 ) $F2272 ( front ) $F13609 ( left ) $F76134 ( left , p0 ) $F76138 ( left , p1 ) $F76138 ( left , p2 ) $F76138 ( left , p3 ) $F2272 ( left ) $F13609 ( right ) $F76134 ( right , p00 ) $F76138 ( right , p01 ) $F76138 ( right , p02 ) $F76138 ( right , p03 ) $F2272 ( right ) result [ NUM00 ] = bottom ; \n\tresult [ NUM00 ] = back ; \n\tif ( inverted ) { \n\t\tresult [ NUM00 ] = right ; \n\t\tresult [ NUM00 ] = left ; \n\t\t} \n\telse { \n\t\tresult [ NUM00 ] = left ; \n\t\tresult [ NUM00 ] = right ; \n\t\t} \n\tresult [ NUM00 ] = top ; \n\tresult [ NUM00 ] = front ; \n\treturn result ; \n\t} \n"}, {"code": "public OIDCTokens acquireTokensBySecurID ( String username , String passcode , SecurIDRetriever securIdRetriever , TokenSpec tokenSpec ) throws OIDCClientException , OIDCServerException , TokenValidationException , SSLConnectionException { \n\tValidate . notEmpty ( username , NUM00 ) ; \n\tValidate . notEmpty ( passcode , NUM00 ) ; \n\t$F18062 ( Validate , securIdRetriever ) $F18062 ( Validate , tokenSpec ) HttpResponse httpResponse = OIDCClientUtils . handleSecurIDMultiLeggedGrant ( username , passcode , securIdRetriever , tokenSpec , getTokenEndpointURI ( ) , this . clientId , this . holderOfKeyConfig , this . keyStore ) ; \n\treturn OIDCClientUtils . parseTokenResponse ( httpResponse , this . providerPublicKey , this . issuer , this . clientId , this . clockToleranceInSeconds ) ; \n\t} \n"}, {"code": "public void loadNested ( Environment env ) $F127556 ( loadNested , env ) "}, {"code": "private JSONArray requestAllFileSystems $F72 throws IOException , JSONException { \n\t$F19928 ( ret ) for ( Filesystem fs : filesystems ) { \n\t\tret . put ( fs . getRootEntry ( ) ) ; \n\t\t} \n\treturn ret ; \n\t} \n"}, {"code": "private Promise < ActionResponse , ResourceException > internalHandleAction ( String tokenId , Context context , ActionRequest request ) { \n\tfinal String action = request . getAction ( ) ; \n\tfinal ActionHandler actionHandler = actionHandlers . get ( action ) ; \n\tif ( actionHandler != null ) { \n\t\treturn actionHandler . handle ( tokenId , context , request ) ; \n\t\t} \n\telse { \n\t\t$F574 ( message , String , action ) NotSupportedException e = new NotSupportedException ( message ) ; \n\t\tif $F6299 ( LOGGER ) { \n\t\t\tLOGGER . message ( NUM00 + message , e ) ; \n\t\t\t} \n\t\treturn e . asPromise ( ) ; \n\t\t} \n\t} \n"}, {"code": "public int compareTo ( Object obj ) { \n\tint diff = - NUM00 ; \n\tif ( obj instanceof ParserNotice ) { \n\t\tParserNotice p2 = ( ParserNotice ) obj ; \n\t\tdiff = level - p2 . getLevel ( ) ; \n\t\tif ( diff == NUM00 ) { \n\t\t\tdiff = line - p2 . getLine ( ) ; \n\t\t\tif ( diff == NUM00 ) { \n\t\t\t\tdiff = message . compareTo ( p2 . getMessage ( ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn diff ; \n\t} \n"}, {"code": "$F1 $F1431 public $F40262 doHighlighting ( DocList docs , Query query , SolrQueryRequest req , $F806 defaultFields ) throws IOException { \n\tSolrParams params = req . getParams ( ) ; \n\tif ( ! isHighlightingEnabled ( params ) ) $F1274 SolrIndexSearcher searcher = req . getSearcher ( ) ; \n\tIndexSchema schema = searcher . getSchema ( ) ; \n\tNamedList fragments = new SimpleOrderedMap $F72 ; \n\t$F806 fieldNames = getHighlightFields ( query , req , defaultFields ) ; \n\t$F13750 ( fset ) { \n\t\t$F42002 ( f , fieldNames , fset ) SchemaField keyField = schema . getUniqueKeyField ( ) ; \n\t\tif ( null != keyField ) $F29790 ( fset , keyField ) } \n\tFastVectorHighlighter fvh = new FastVectorHighlighter ( params . getBool ( HighlightParams . USE_PHRASE_HIGHLIGHTER , _BOOL ) , params . getBool ( HighlightParams . FIELD_MATCH , _BOOL ) ) ; \n\tfvh . setPhraseLimit ( params . getInt ( HighlightParams . PHRASE_LIMIT , SolrHighlighter . DEFAULT_PHRASE_LIMIT ) ) ; \n\tFieldQuery fieldQuery = fvh . getFieldQuery ( query , searcher . getIndexReader ( ) ) ; \n\tDocIterator iterator = docs . iterator ( ) ; \n\tfor ( $F2277 ( i , docs ) ) { \n\t\tint docId = iterator . nextDoc ( ) ; \n\t\tDocument doc = searcher . doc ( docId , fset ) ; \n\t\tNamedList docSummaries = new SimpleOrderedMap $F72 ; \n\t\tfor ( String fieldName : fieldNames ) { \n\t\t\t$F1382 ( fieldName ) if ( useFastVectorHighlighter ( params , schema , fieldName ) ) doHighlightingByFastVectorHighlighter ( fvh , fieldQuery , req , docSummaries , docId , doc , fieldName ) ; \n\t\t\telse doHighlightingByHighlighter ( query , req , docSummaries , docId , doc , fieldName ) ; \n\t\t\t} \n\t\tString printId = schema . printableUniqueKey ( doc ) ; \n\t\tfragments . add ( printId == null ? null : printId , docSummaries ) ; \n\t\t} \n\treturn fragments ; \n\t} \n"}, {"code": "protected abstract Map < Integer , FilterOperationDelegateInvoker > doGetInvokerLookup $F72 ; \n"}, {"code": "private IBindingSet aggregate ( final Iterable < IBindingSet > solutions ) { \n\tfinal IBindingSet aggregates = new ContextBindingSet ( context , new ListBindingSet $F72 ) ; \n\tif ( groupBy != null ) { \n\t\tfinal IBindingSet aSolution = solutions . iterator ( ) . next ( ) ; \n\t\tfor ( IValueExpression $F1011 expr : groupBy ) { \n\t\t\tif ( expr instanceof $F169385 ) { \n\t\t\t\tfinal $F169385 var = ( $F169385 ) expr ; \n\t\t\t\t$F149932 ( varValue , var , aSolution ) final Constant $F1011 val ; \n\t\t\t\tif ( varValue == null ) { \n\t\t\t\t\tval = Constant . errorValue ( ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tval = new Constant ( varValue . getClass ( ) . cast ( varValue ) ) ; \n\t\t\t\t\t} \n\t\t\t\t; \n\t\t\t\taggregates . set ( var , val ) ; \n\t\t\t\t} \n\t\t\telse if ( expr instanceof IBind $F1011 ) { \n\t\t\t\tfinal IBind $F1011 bindExpr = ( IBind $F1011 ) expr ; \n\t\t\t\tfinal Constant $F1011 val ; \n\t\t\t\t$F149932 ( exprValue , bindExpr , aSolution ) if ( exprValue == null ) { \n\t\t\t\t\tval = Constant . errorValue ( ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tval = new Constant ( exprValue . getClass ( ) . cast ( exprValue ) ) ; \n\t\t\t\t\t} \n\t\t\t\tfinal $F169385 ovar = ( ( IBind $F1011 ) expr ) . getVar ( ) ; \n\t\t\t\taggregates . set ( ovar , val ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t{ \n\t\tfinal boolean nestedAggregates = groupByState . isNestedAggregates ( ) ; \n\t\tfinal Iterator < Map . Entry < IAggregate $F1011 , $F169385 > > itr = rewrite . getAggExpr ( ) . entrySet ( ) . iterator ( ) ; \n\t\twhile $F2921 ( itr ) { \n\t\t\tfinal Map . Entry < IAggregate $F1011 , $F169385 > e = itr . next ( ) ; \n\t\t\tdoAggregate ( e . getKey ( ) , e . getValue ( ) , nestedAggregates , aggregates , solutions , stats ) ; \n\t\t\t} \n\t\tif $F8415 ( log ) $F49408 ( log , aggregates ) } \n\tfor ( IValueExpression $F1011 expr : rewrite . getSelect2 ( ) ) { \n\t\ttry { \n\t\t\texpr . get ( aggregates ) ; \n\t\t\t} \n\t\tcatch ( SparqlTypeErrorException ex ) { \n\t\t\tTypeErrorLog . handleTypeError ( ex , expr , stats ) ; \n\t\t\t$F598 } \n\t\tcatch ( IllegalArgumentException ex ) { \n\t\t\tTypeErrorLog . handleTypeError ( ex , expr , stats ) ; \n\t\t\t$F598 } \n\t\t} \n\t{ \n\t\tfinal boolean drop ; \n\t\tfinal IConstraint [ ] having2 = rewrite . getHaving2 ( ) ; \n\t\tif ( having2 != null && ! BOpUtility . isConsistent ( having2 , aggregates ) ) { \n\t\t\tdrop = _BOOL ; \n\t\t\t} \n\t\telse { \n\t\t\tdrop = _BOOL ; \n\t\t\t} \n\t\tif $F17747 ( log ) log . info ( ( drop ? NUM00 : NUM00 ) + NUM00 + aggregates ) ; \n\t\t$F5972 ( drop ) } \n\tfinal IBindingSet out ; \n\tif ( groupBy == null ) { \n\t\tassert ! aggregates . containsErrorValues ( ) ; \n\t\tout = aggregates . copy ( groupByState . getSelectVars ( ) . toArray ( new IVariable $F380 ) ) ; \n\t\t} \n\telse { \n\t\tout = aggregates . copyMinusErrors ( groupByState . getSelectVars ( ) . toArray ( new IVariable $F380 ) ) ; \n\t\t} \n\treturn out ; \n\t} \n"}, {"code": "public static void deleteCollection ( String host , String collection ) throws Exception { \n\tString deleteCollectionTemplate = NUM00 ; \n\tString deleteCollectionCommand = String . format ( deleteCollectionTemplate , host , DEFAULT_SOLR_PORT , collection ) ; \n\texecuteSolrCommand ( deleteCollectionCommand ) ; \n\t} \n"}, {"code": "private Iterable < FragmentConstructor > createConstructors $F72 { \n\treturn Collections . unmodifiableList ( Arrays . asList ( new BiomeDataConstructor ( Resolution . QUARTER ) , new EndIslandsConstructor $F72 , new ImageConstructor ( Resolution . QUARTER , LayerIds . BACKGROUND ) , new ImageConstructor ( Resolution . CHUNK , LayerIds . SLIME ) ) ) ; \n\t} \n"}, {"code": "public static $F4203 int copy ( $F95121 ( from ) , int first , int last , $F5675 to ) { \n\tint i = first ; \n\tfor ( ; \n\ti < last ; \n\ti ++ ) $F62006 ( to , from , i ) return i ; \n\t} \n"}, {"code": "$F5466 public static HKey psiKey ( $F1113 PsiMethod psiMethod , $F1113 Direction direction , $F1113 MessageDigest md ) { \n\tfinal PsiClass psiClass = PsiTreeUtil . getParentOfType ( psiMethod , PsiClass . class , _BOOL ) ; \n\t$F1338 ( psiClass ) $F33012 ( classDigest , psiClassDigest , psiClass , md ) $F1338 ( classDigest ) $F33012 ( sigDigest , methodDigest , psiMethod , md ) $F1338 ( sigDigest ) $F2175 ( digest , HASH_SIZE ) $F135 ( System , classDigest , digest , CLASS_HASH_SIZE ) $F6483 ( System , sigDigest , digest , CLASS_HASH_SIZE , SIGNATURE_HASH_SIZE ) return new HKey ( digest , mkDirectionKey ( direction ) , _BOOL ) ; \n\t} \n"}, {"code": "public static boolean isSdCardMounted $F72 { \n\t$F139156 ( status , Environment ) if $F139157 ( status , Environment ) return _BOOL ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "private void parseResource ( final Element resourceElement , final Collection $F25924 resources ) { \n\tfinal String tagName = resourceElement . getTagName ( ) ; \n\tfinal String uri = resourceElement . getTextContent ( ) ; \n\tif $F1238 ( TAG_GROUP_REF , tagName ) $F42502 ( resources , getResourcesForGroup , uri ) if ( getResourceType ( resourceElement ) != null ) { \n\t\tfinal Resource resource = createResource ( resourceElement ) ; \n\t\t$F7028 ( LOG , resource ) resources . add ( resource ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void licenceFile ( String textToShow , File licenceFile ) throws CancelException { \n\ttry { \n\t\t$F197755 ( content , licenceFile ) $F24475 ( writer ) IOUtils . copy ( content , writer , NUM00 ) ; \n\t\t$F59 ( content ) $F10665 ( licence , textToShow , writer ) } \n\tcatch ( IOException e ) { \n\t\tthrow new ScriptFailureException ( NUM00 , e ) ; \n\t\t} \n\t} \n"}, {"code": "public int meanAllocation $F72 { \n\t$F94561 ( m_slotAllocations ) return $F2116 ( m_sizeAllocations , m_slotAllocations ) ; \n\t} \n"}, {"code": "public void testTimeZones $F72 throws Exception { \n\t$F13404 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) for ( $F3465 ( key , tzMap ) ) { \n\t\tassertEquals ( NUM00 + key + NUM00 , tzMap . get ( key ) , TimeUtil . getCanonicalTimezone ( key , null ) ) ; \n\t\t} \n\tfor ( String tz : TimeZone . getAvailableIDs ( ) ) { \n\t\tString canonicalTZ ; \n\t\ttry { \n\t\t\tcanonicalTZ = TimeUtil . getCanonicalTimezone ( tz , null ) ; \n\t\t\t} \n\t\tcatch ( SQLException e ) { \n\t\t\tcanonicalTZ = null ; \n\t\t\t} \n\t\tassertNotNull ( NUM00 + tz + NUM00 , canonicalTZ ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public String toString $F72 { \n\treturn MessageFormat . format ( $F38 , getLDAPFilter ( ) , StringUtils . join ( requestedAttributes , NUM00 ) ) ; \n\t} \n"}, {"code": "public static void convolveAndTranspose ( Kernel kernel , $F2027 inPixels , $F2027 outPixels , int width , int height , boolean alpha , boolean premultiply , boolean unpremultiply , int edgeAction ) { \n\t$F5415 matrix = kernel . getKernelData ( null ) ; \n\t$F2049 ( cols , kernel ) int cols2 = cols / NUM00 ; \n\tfor ( $F119 ( y , height ) ) { \n\t\tint index = y ; \n\t\tint ioffset = y * width ; \n\t\tfor ( $F119 ( x , width ) ) { \n\t\t\tfloat r = NUM00 , g = NUM00 , b = NUM00 , a = NUM00 ; \n\t\t\tint moffset = cols2 ; \n\t\t\tfor ( $F142929 ( col , cols2 ) ) { \n\t\t\t\tfloat f = matrix [ moffset + col ] ; \n\t\t\t\tif ( f != NUM00 ) { \n\t\t\t\t\tint ix = x + col ; \n\t\t\t\t\tif ( ix < NUM00 ) { \n\t\t\t\t\t\tif ( edgeAction == CLAMP_EDGES ) ix = NUM00 ; \n\t\t\t\t\t\telse if ( edgeAction == WRAP_EDGES ) ix = ( x + width ) % width ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse if ( ix >= width ) { \n\t\t\t\t\t\tif ( edgeAction == CLAMP_EDGES ) ix = width - NUM00 ; \n\t\t\t\t\t\telse if ( edgeAction == WRAP_EDGES ) ix = ( x + width ) % width ; \n\t\t\t\t\t\t} \n\t\t\t\t\tint rgb = inPixels [ ioffset + ix ] ; \n\t\t\t\t\t$F52249 ( pa , rgb ) $F52249 ( pr , rgb ) $F52249 ( pg , rgb ) int pb = rgb & NUM00 ; \n\t\t\t\t\tif ( premultiply ) { \n\t\t\t\t\t\tfloat a255 = pa * $F52906 ; \n\t\t\t\t\t\tpr *= a255 ; \n\t\t\t\t\t\tpg *= a255 ; \n\t\t\t\t\t\tpb *= a255 ; \n\t\t\t\t\t\t} \n\t\t\t\t\ta += f * pa ; \n\t\t\t\t\tr += f * pr ; \n\t\t\t\t\tg += f * pg ; \n\t\t\t\t\tb += f * pb ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tif ( unpremultiply && a != NUM00 && a != NUM00 ) { \n\t\t\t\tfloat f = NUM00 / a ; \n\t\t\t\tr *= f ; \n\t\t\t\tg *= f ; \n\t\t\t\tb *= f ; \n\t\t\t\t} \n\t\t\tint ia = alpha ? PixelUtils . clamp ( $F127087 ( a ) ) : NUM00 ; \n\t\t\t$F339710 ( ir , PixelUtils , r ) $F339710 ( ig , PixelUtils , g ) $F339710 ( ib , PixelUtils , b ) outPixels [ index ] = $F38048 ( ia , ir , ig , ib ) ; \n\t\t\tindex += height ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void testCase6 $F72 { \n\t$F7829 byte $F3014 = { \n\t\tNUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } \n\t; \n\tint aSign = NUM00 ; \n\tint bSign = - NUM00 ; \n\tbyte $F3018 = { \n\t\t- NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } \n\t; \n\t$F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F7838 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , result ) } \n"}, {"code": "public void animateProgressFill ( int animateTo ) { \n\tmAnimationHandler . removeMessages ( NUM00 ) ; \n\tif ( animateTo > mMax || animateTo < NUM00 ) $F84174 ( String , animateTo , mMax ) mAnimationHandler . setAnimateTo ( animateTo ) ; \n\tmAnimationHandler . sendEmptyMessage ( NUM00 ) ; \n\tinvalidate ( ) ; \n\t} \n"}, {"code": "static boolean isRegistered ( ObjectName objectName ) { \n\tSet $F50005 registeredObjectNames = mBeanServer . queryNames ( objectName , null ) ; \n\t$F3386 ( registeredObjectNames ) } \n"}, {"code": "public $F4203 PushableLazyFutureStream $F4203 futureStream ( final LazyReact s ) { \n\tfinal $F48532 q = createQueue ( ) ; \n\treturn new PushableLazyFutureStream $F4203 ( q , s . fromStream ( q . stream ( ) ) ) ; \n\t} \n"}, {"code": "public $F96 convertHexStringToBinary ( String hexString ) throws IllegalArgumentException { \n\t$F115 ( length , hexString ) if ( length % NUM00 != NUM00 ) $F20855 ( length , hexString ) $F96 binary = new byte [ length / NUM00 ] ; \n\tfor ( $F6225 ( i , length ) ) { \n\t\t$F1280 ( highBitsChar , hexString , i ) $F17494 ( lowBitsChar , hexString , i ) int highBits = hexCharToInt ( highBitsChar , hexString ) < < NUM00 ; \n\t\tint lowBits = hexCharToInt ( lowBitsChar , hexString ) ; \n\t\tbinary [ i / NUM00 ] = ( byte ) ( highBits + lowBits ) ; \n\t\t} \n\treturn binary ; \n\t} \n"}, {"code": "public void writeField ( final String name , final short value ) throws $F3258 $F261761 ( writeField , name , Short , value ) "}, {"code": "public static ResultSet select ( Connection conn , String sql ) throws SQLException { \n\tStatement stat = conn . createStatement ( ResultSet . TYPE_SCROLL_INSENSITIVE , ResultSet . CONCUR_READ_ONLY ) ; \n\treturn stat . executeQuery ( sql ) ; \n\t} \n"}, {"code": "public static void writeSetOfLongs ( Set set , boolean hasLongIDs , DataOutput out ) throws IOException { \n\tif ( set == null ) { \n\t\t$F150188 ( out ) } \n\telse { \n\t\t$F27636 ( out , set ) out . writeBoolean ( hasLongIDs ) ; \n\t\tfor ( $F2774 ( it , set ) ) { \n\t\t\tLong l = ( Long ) it . next ( ) ; \n\t\t\tif ( hasLongIDs ) { \n\t\t\t\tout . writeLong ( l . longValue ( ) ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tout . writeInt ( ( int ) l . longValue ( ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void restoreWidget ( Key key , $F96 buffer , int dataSize ) throws IOException { \n\tif ( VERBOSE ) Log . v ( TAG , NUM00 + key . id ) ; \n\tif ( DEBUG ) Log . d ( TAG , NUM00 + buffer . length + NUM00 + Base64 . encodeToString ( buffer , NUM00 , dataSize , Base64 . NO_WRAP ) ) ; \n\tWidget widget = unpackProto ( new Widget $F72 , buffer , dataSize ) ; \n\tif ( DEBUG ) Log . d ( TAG , NUM00 + widget . provider ) ; \n\tif ( widget . icon . data != null ) { \n\t\tBitmap icon = BitmapFactory . decodeByteArray ( widget . icon . data , NUM00 , widget . icon . data . length ) ; \n\t\tif ( icon == null ) { \n\t\t\tLog . w ( TAG , NUM00 + key . name ) ; \n\t\t\t} \n\t\telse { \n\t\t\tmIconCache . preloadIcon ( ComponentName . unflattenFromString ( widget . provider ) , icon , widget . icon . dpi , widget . label , mUserSerial , mIdp ) ; \n\t\t\t} \n\t\t} \n\twidgetSizes . add ( widget . provider + NUM00 + NUM00 + NUM00 + NUM00 ) ; \n\t} \n"}, {"code": "$F26560 ( requestMethod , responseCode , Request , HttpStatus ) "}, {"code": "public void considerRegionXRegion ( GeoRegion r , GeoRegion region ) { \n\tGeoArray rBoundary = r . getPoints ( ) ; \n\tGeo rPoint = rBoundary . get ( NUM00 , new Geo $F72 ) ; \n\tGeoArray regionBoundary = region . getPoints ( ) ; \n\tGeo regionPoint = regionBoundary . get ( NUM00 , new Geo $F72 ) ; \n\tif ( Intersection . isPointInPolygon ( rPoint , regionBoundary ) || Intersection . isPointInPolygon ( regionPoint , rBoundary ) ) { \n\t\tcollector . collect ( r , region ) ; \n\t\t} \n\telse { \n\t\tfor ( GeoPath . SegmentIterator pit = r . segmentIterator ( ) ; \n\t\tpit . hasNext ( ) ; \n\t\t) { \n\t\t\tGeoSegment seg = pit . nextSegment ( ) ; \n\t\t\tif ( filter . preConsider ( seg , region ) && considerSegmentXRegion ( seg , region ) ) { \n\t\t\t\tcollector . collect ( seg , region ) ; \n\t\t\t\t$F665 } \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private XPathFactory loadFromServicesFile $F63851 ( uri , resourceName , in ) { \n\t$F63852 ( debug , debugPrintln , resourceName ) BufferedReader rd ; \n\ttry { \n\t\trd = new BufferedReader ( new InputStreamReader ( in , NUM00 ) , DEFAULT_LINE_LENGTH ) ; \n\t\t} \n\tcatch ( $F42439 e ) { \n\t\trd = new BufferedReader ( new InputStreamReader ( in ) , DEFAULT_LINE_LENGTH ) ; \n\t\t} \n\tString factoryClassName ; \n\tXPathFactory resultFactory = null ; \n\twhile ( _BOOL ) { \n\t\ttry $F63868 ( factoryClassName , rd ) catch ( IOException x ) $F5153 if ( factoryClassName != null ) { \n\t\t\t$F1384 ( hashIndex , factoryClassName ) $F63871 ( hashIndex , factoryClassName ) $F1382 ( factoryClassName ) $F63872 ( factoryClassName ) try { \n\t\t\t\tXPathFactory foundFactory = createInstance ( factoryClassName ) ; \n\t\t\t\tif ( foundFactory . isObjectModelSupported ( uri ) ) $F3468 ( resultFactory , foundFactory ) } \n\t\t\t$F63878 } \n\t\telse $F5153 } \n\tIoUtils . closeQuietly ( rd ) ; \n\treturn resultFactory ; \n\t} \n"}, {"code": "private char foldCase ( char ch ) { \n\tif ( ch < NUM00 ) { \n\t\tif $F27695 ( ch ) { \n\t\t\treturn $F27698 ( ch ) ; \n\t\t\t} \n\t\treturn ch ; \n\t\t} \n\treturn $F170663 ( Character , ch ) ; \n\t} \n"}, {"code": "public WritableRaster createCompatibleWritableRaster ( int w , int h ) { \n\tif ( w <= NUM00 || h <= NUM00 ) { \n\t\tthrow new RasterFormatException ( NUM00 + ( ( w <= NUM00 ) ? NUM00 : NUM00 ) ) ; \n\t\t} \n\tSampleModel sm = sampleModel . createCompatibleSampleModel ( w , h ) ; \n\treturn new ByteBandedRaster ( sm , $F69159 ) ; \n\t} \n"}, {"code": "$F156045 ( msg , x , super , this ) "}, {"code": "@ TargetApi ( VERSION_CODES . LOLLIPOP ) public static void reveal ( final View view , int cx , int cy ) { \n\tif $F931 ( hasLollipop ) { \n\t\t$F29549 ( view , View ) $F665 } \n\tint finalRadius = Math . max ( $F13695 ( view ) ) ; \n\tAnimator animator = ViewAnimationUtils . createCircularReveal ( view , cx , cy , NUM00 , finalRadius ) ; \n\t$F29549 ( view , View ) $F2346 ( animator ) } \n"}, {"code": "public TopNMetric ( TopNMetricType type , String previousStop , SortDirection order ) { \n\tthis ( type , previousStop ) ; \n\tif ( order == SortDirection . ASC ) { \n\t\tthis . type = TopNMetricType . INVERTED ; \n\t\tthis . nested = Optional . of ( new TopNMetric ( type , previousStop ) ) ; \n\t\tthis . previousStop = Optional . empty ( ) ; \n\t\t} \n\t} \n"}, {"code": "public void removeSupportedOptions $F32029 ( unmatchedProcessorOptions ) $F111938 ( unmatchedProcessorOptions , supportedOptionNames ) "}, {"code": "protected void subscribe $F72 { \n\tif ( sampleClientSub == null ) { \n\t\ttry { \n\t\t\tsampleClientSub = new SampleAsyncCallback ( url , clientIdSub , cleanSession , quietMode , userName , password ) ; \n\t\t\t} \n\t\tcatch ( MqttException e ) $F302 ( e ) } \n\tif ( sampleClientSub != null ) { \n\t\tString topic = NUM00 ; \n\t\tint qos = NUM00 ; \n\t\ttry { \n\t\t\tsampleClientSub . subscribe ( topic , qos ) ; \n\t\t\t} \n\t\t$F86388 ( e ) } \n\t} \n"}, {"code": "private boolean shouldCrop ( int width , int height ) { \n\tint pixelError = NUM00 ; \n\tpixelError += Math . round ( Math . max ( width , height ) / NUM00 ) ; \n\treturn ( mMaxResultImageSizeX > NUM00 && mMaxResultImageSizeY > NUM00 ) || Math . abs ( mCropRect . left - mCurrentImageRect . left ) > pixelError || Math . abs ( mCropRect . top - mCurrentImageRect . top ) > pixelError || Math . abs ( mCropRect . bottom - mCurrentImageRect . bottom ) > pixelError || Math . abs ( mCropRect . right - mCurrentImageRect . right ) > pixelError ; \n\t} \n"}, {"code": "public boolean exists $F72 $F4915 ( doAccess , F_OK ) "}, {"code": "$F1309 public boolean isFillBelowLine $F72 $F32878 ( mFillBelowLine ) "}, {"code": "public ShapeTileBox bounding_box $F72 { \n\t$F60730 ( bounding_box ) PlaPointFloat start_corner = start_point_approx ( ) ; \n\tPlaPointFloat end_corner = end_point_approx ( ) ; \n\tdouble llx = Math . min ( start_corner . v_x , end_corner . v_x ) ; \n\tdouble lly = Math . min ( start_corner . v_y , end_corner . v_y ) ; \n\tdouble urx = Math . max ( start_corner . v_x , end_corner . v_x ) ; \n\tdouble ury = Math . max ( start_corner . v_y , end_corner . v_y ) ; \n\tPlaPointInt lower_left = new PlaPointInt ( Math . floor ( llx ) , Math . floor ( lly ) ) ; \n\tPlaPointInt upper_right = new PlaPointInt ( Math . ceil ( urx ) , Math . ceil ( ury ) ) ; \n\tbounding_box = new ShapeTileBox ( lower_left , upper_right ) ; \n\treturn bounding_box ; \n\t} \n"}, {"code": "public boolean isValidAttachmentPoint ( DatapathId switchDPID , OFPort switchPort ) { \n\tif ( topology . isAttachmentPointPort ( switchDPID , switchPort ) == _BOOL ) return _BOOL ; \n\tif ( suppressAPs . contains ( new SwitchPort ( switchDPID , switchPort ) ) ) return _BOOL ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void testClasspathWar $F72 throws Exception $F123330 ( url , System , expected , PingUtils , logger ) "}, {"code": "protected abstract boolean isNullable $F72 ; \n"}, {"code": "public vec3 normalize $F72 { \n\t$F375891 ( x , this ) $F375891 ( y , this ) $F375891 ( z , this ) float s = NUM00 / $F16207 ( Math , x , y , z ) ; \n\tthis . m [ NUM00 ] = x * s ; \n\tthis . m [ NUM00 ] = y * s ; \n\tthis . m [ NUM00 ] = z * s ; \n\treturn this ; \n\t} \n"}, {"code": "$F1 public P readPage ( int pageID ) { \n\ttry { \n\t\tcountRead ( ) ; \n\t\tlong offset = ( ( long ) ( header . getReservedPages ( ) + pageID ) ) * ( long ) pageSize ; \n\t\t$F2175 ( buffer , pageSize ) file . seek ( offset ) ; \n\t\tfile . read ( buffer ) ; \n\t\treturn byteArrayToPage ( buffer ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\tthrow new RuntimeException ( NUM00 + pageID + NUM00 , e ) ; \n\t\t} \n\t} \n"}, {"code": "public void addActionListener ( ActionListener listener ) { \n\tforwardProjectionButton . addActionListener ( listener ) ; \n\tbackProjectionButton . addActionListener ( listener ) ; \n\t} \n"}, {"code": "void writeDataToFileLocked ( RandomAccessFile file , boolean addMayo , boolean addTomato , int whichFilling ) throws IOException { \n\t$F4910 ( file ) file . writeInt ( whichFilling ) ; \n\tfile . writeBoolean ( addMayo ) ; \n\tfile . writeBoolean ( addTomato ) ; \n\tLog . v ( TAG , NUM00 + addMayo + NUM00 + addTomato + NUM00 + whichFilling ) ; \n\t} \n"}, {"code": "static $F24901 mapKeyAndValueTypes ( Type context , $F6969 contextRawType ) { \n\tif ( context == Properties . class ) return new Type [ ] { \n\t\t$F10062 , $F10062 } \n\t; \n\tType mapType = getSupertype ( context , contextRawType , $F64671 ) ; \n\tif ( mapType instanceof ParameterizedType ) { \n\t\tParameterizedType mapParameterizedType = ( ParameterizedType ) mapType ; \n\t\treturn mapParameterizedType . getActualTypeArguments ( ) ; \n\t\t} \n\treturn new Type [ ] { \n\t\t$F12222 , $F12222 } \n\t; \n\t} \n"}, {"code": "static AggregatedHttpMessage of ( HttpHeaders headers , HttpData content , HttpHeaders trailingHeaders ) { \n\treturn of ( Collections . emptyList ( ) , headers , content , trailingHeaders ) ; \n\t} \n"}, {"code": "public static boolean isLetter ( char c ) { \n\treturn Character . isLetter ( c ) ; \n\t} \n"}, {"code": "protected List $F68180 createChildList $F72 { \n\tBranch branch = getXmlBranch ( ) ; \n\tint size = branch . nodeCount ( ) ; \n\tList $F68180 childList = new ArrayList $F68180 ( size ) ; \n\tfor ( $F119 ( i , size ) ) { \n\t\tNode node = branch . node ( i ) ; \n\t\tif ( node instanceof CharacterData ) { \n\t\t\t$F45667 ( text , node ) $F4322 ( text ) $F1382 ( text ) if $F71860 ( text ) $F1448 } \n\t\t$F3761 ( childList , createChildTreeNode , node ) } \n\treturn childList ; \n\t} \n"}, {"code": "public $F120453 mayAliases ( Value v , Unit u ) { \n\t$F120453 res = new HashSet $F120452 $F72 ; \n\tSet < $F120453 > flow = getFlowBefore ( u ) ; \n\tfor ( $F120453 set : flow ) { \n\t\tif $F105 ( set , v ) res . addAll ( set ) ; \n\t\t} \n\treturn res ; \n\t} \n"}, {"code": "$F5466 private static String read ( $F4170 SocketChannel socket , $F4170 $F96 buffer ) throws IOException { \n\tByteBuffer buf = ByteBuffer . wrap ( buffer , NUM00 , buffer . length ) ; \n\twhile ( buf . position ( ) != buf . limit ( ) ) { \n\t\tint count ; \n\t\tcount = socket . read ( buf ) ; \n\t\t$F28956 ( count ) } \n\ttry { \n\t\treturn new String ( buffer , NUM00 , buf . position ( ) , AdbHelper . DEFAULT_ENCODING ) ; \n\t\t} \n\tcatch ( UnsupportedEncodingException e ) $F1337 } \n"}, {"code": "public static DateTimeUnit createLocalDateUnitInstance ( Date date , org . hisp . dhis . calendar . Calendar calendar ) { \n\treturn calendar . fromIso ( DateTimeUnit . fromJdkDate ( date ) ) ; \n\t} \n"}, {"code": "public static boolean equal ( double a , double b ) { \n\treturn $F39297 ( Math , a , b , EPSILON ) ; \n\t} \n"}, {"code": "$F1 public void addClassAnnotation $F21196 ( buffer , offset , length ) { \n\tString annType = new String ( buffer , offset , length ) ; \n\tif $F105 ( _annTypes , annType ) { \n\t\taddClass ( _className ) ; \n\t\t} \n\t} \n"}, {"code": "public Process exec ( $F806 taintedCommand , $F806 taintedEnvironment , File workingDirectory , boolean redirectErrorStream ) throws IOException { \n\t$F896 ( taintedCommand ) if $F9634 ( taintedCommand ) $F10547 $F806 command = taintedCommand . clone ( ) ; \n\t$F806 environment = taintedEnvironment != null ? taintedEnvironment . clone ( ) : null ; \n\tfor ( $F1139 ( i , command ) ) { \n\t\tif ( command [ i ] == null ) { \n\t\t\tthrow new NullPointerException ( NUM00 + i + NUM00 ) ; \n\t\t\t} \n\t\t} \n\tif ( environment != null ) { \n\t\tfor ( $F1139 ( i , environment ) ) { \n\t\t\tif ( environment [ i ] == null ) { \n\t\t\t\tthrow new NullPointerException ( NUM00 + i + NUM00 ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tFileDescriptor $F23044 ( in ) ; \n\tFileDescriptor $F23044 ( out ) ; \n\tFileDescriptor $F23044 ( err ) ; \n\tString workingPath = ( workingDirectory == null ) ? null : workingDirectory . getPath ( ) ; \n\tsynchronized ( processReferences ) { \n\t\tint pid ; \n\t\ttry { \n\t\t\tpid = exec ( command , environment , workingPath , in , out , err , redirectErrorStream ) ; \n\t\t\t} \n\t\tcatch ( IOException e ) { \n\t\t\tIOException wrapper = new IOException ( NUM00 + NUM00 + Arrays . toString ( command ) + NUM00 + workingDirectory + NUM00 + Arrays . toString ( environment ) ) ; \n\t\t\twrapper . initCause ( e ) ; \n\t\t\tthrow wrapper ; \n\t\t\t} \n\t\tProcessImpl process = new ProcessImpl ( pid , in , out , err ) ; \n\t\tProcessReference processReference = new ProcessReference ( process , referenceQueue ) ; \n\t\tprocessReferences . put ( pid , processReference ) ; \n\t\t$F165 ( processReferences ) return process ; \n\t\t} \n\t} \n"}, {"code": "static PathPart makeAbsolute ( PathPart oldPart ) { \n\t$F1431 boolean encodedCached = oldPart . encoded != NOT_CACHED ; \n\tString oldPath = encodedCached ? oldPart . encoded : oldPart . decoded ; \n\tif ( $F6035 ( oldPath ) || oldPath . startsWith ( NUM00 ) ) { \n\t\treturn oldPart ; \n\t\t} \n\tString newEncoded = encodedCached ? NUM00 + oldPart . encoded : NOT_CACHED ; \n\t$F1431 boolean decodedCached = oldPart . decoded != NOT_CACHED ; \n\tString newDecoded = decodedCached ? NUM00 + oldPart . decoded : NOT_CACHED ; \n\treturn new PathPart ( newEncoded , newDecoded ) ; \n\t} \n"}, {"code": "public static $F2027 splitGt ( String gt ) { \n\t$F22998 ( gtlen , gt ) if ( gtlen == NUM00 ) { \n\t\treturn new int [ ] { \n\t\t\t$F95813 ( alleleId , gt ) } \n\t\t; \n\t\t} \n\telse { \n\t\t$F11844 ( result ) int ploid = NUM00 ; \n\t\tint allelestart = NUM00 ; \n\t\tfor ( $F119 ( i , gtlen ) ) { \n\t\t\t$F1090 ( c , gt , i ) if ( c == PHASED_SEPARATOR || c == UNPHASED_SEPARATOR ) { \n\t\t\t\tif ( ploid == result . length ) { \n\t\t\t\t\tresult = $F30258 ( Arrays , result ) ; \n\t\t\t\t\t} \n\t\t\t\tresult [ ploid ++ ] = alleleId ( gt , allelestart , i - allelestart ) ; \n\t\t\t\tallelestart = i + NUM00 ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( allelestart < gtlen ) { \n\t\t\tif ( ploid == result . length ) { \n\t\t\t\tresult = $F30258 ( Arrays , result ) ; \n\t\t\t\t} \n\t\t\tresult [ ploid ++ ] = alleleId ( gt , allelestart , gtlen - allelestart ) ; \n\t\t\t} \n\t\tif ( ploid < result . length ) { \n\t\t\t$F8003 ( result , Arrays , ploid ) } \n\t\tif ( ploid == NUM00 ) { \n\t\t\t$F58968 ( gt ) } \n\t\treturn result ; \n\t\t} \n\t} \n"}, {"code": "public void testBug18041 $F72 throws Exception { \n\tif $F57555 ( versionMeetsMinimum ) { \n\t\tcreateTable ( NUM00 , NUM00 ) ; \n\t\t$F2697 ( props ) $F2699 ( props ) $F2699 ( props ) Connection truncConn = null ; \n\t\tPreparedStatement stm = null ; \n\t\ttry { \n\t\t\ttruncConn = getConnectionWithProps ( props ) ; \n\t\t\t$F57556 ( stm , truncConn ) $F270830 ( stm ) $F252944 ( stm ) $F3917 ( stm ) fail ( NUM00 ) ; \n\t\t\t} \n\t\tcatch ( DataTruncation truncEx ) $F845 $F14364 ( truncConn ) } \n\t} \n"}, {"code": "public void deleteKernel ( String name ) { \n\tKernel kernel = getKernelByName ( name ) ; \n\tif ( kernel != null ) { \n\t\t$F355 ( kernel ) $F10192 ( oldSize , Integer , _kernelHashTable ) _kernelHashTable . remove ( name ) ; \n\t\t$F10197 ( setDirtyAndFirePropertyChange , KERNEL_LISTLENGTH_CHANGED_PROPERTY , oldSize , Integer , _kernelHashTable ) } \n\t} \n"}, {"code": "protected boolean shouldStop $F72 { \n\treturn isPaused ( ) || isKilled ( ) ; \n\t} \n"}, {"code": "$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel ) "}, {"code": "public Builder addTokenFilter $F5805 ( name , params ) throws IOException { \n\t$F10578 ( Objects , name ) tokenFilters . add ( applyResourceLoader ( TokenFilterFactory . forName ( name , applyDefaultParams ( params ) ) ) ) ; \n\tcomponentsAdded = _BOOL ; \n\treturn this ; \n\t} \n"}, {"code": "public StyledToolTipUI ( Style style ) { \n\tthis . style = style ; \n\tborder = BorderFactory . createLineBorder ( style . getShadowColor ( ) ) ; \n\t} \n"}, {"code": "public final void addElements ( Object value , int numberOfElements ) { \n\tif ( ( m_firstFree + numberOfElements ) >= m_mapSize ) { \n\t\tm_mapSize += ( m_blocksize + numberOfElements ) ; \n\t\t$F45481 ( m_mapSize ) $F10236 ( System , m_map , newMap , m_firstFree ) m_map = newMap ; \n\t\t} \n\t$F45484 ( i , numberOfElements , m_map , m_firstFree , value ) } \n"}, {"code": "public void actionPerformed ( ActionEvent e ) { \n\tsuper . actionPerformed ( e ) ; \n\t$F35563 ( cmd , e ) if ( cmd == showMapsCommand ) { \n\t\tJCheckBox mapCheck = ( JCheckBox ) e . getSource ( ) ; \n\t\tviewAttributes . showMaps = mapCheck . isSelected ( ) ; \n\t\trepaint ( ) ; \n\t\t} \n\telse if ( cmd == showInfoCommand ) { \n\t\tJCheckBox infoCheck = ( JCheckBox ) e . getSource ( ) ; \n\t\tboolean showInfo = infoCheck . isSelected ( ) ; \n\t\tviewAttributes . showInfo = showInfo ; \n\t\tshowSubframes ( showInfo ) ; \n\t\tdoPrepare ( ) ; \n\t\t} \n\telse if ( cmd == lockSeriesCommand ) { \n\t\tJCheckBox lockCheck = ( JCheckBox ) e . getSource ( ) ; \n\t\tboolean locked = lockCheck . isSelected ( ) ; \n\t\tif ( locked ) { \n\t\t\tList < RpfCoverageBox > coverageBoxes = getCoverageBoxes ( ) ; \n\t\t\tString seriesName ; \n\t\t\tif $F4251 ( coverageBoxes ) { \n\t\t\t\tseriesName = RpfViewAttributes . ANY ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tseriesName = coverageBoxes . get ( NUM00 ) . chartCode ; \n\t\t\t\t} \n\t\t\tif ( seriesName == null ) { \n\t\t\t\tseriesName = RpfViewAttributes . ANY ; \n\t\t\t\tfireRequestMessage ( NUM00 + getName ( ) + NUM00 ) ; \n\t\t\t\t} \n\t\t\tlockCheck . setText ( lockedButtonTitle + NUM00 + seriesName ) ; \n\t\t\tviewAttributes . chartSeries = seriesName ; \n\t\t\t} \n\t\telse { \n\t\t\tlockCheck . setText ( unlockedButtonTitle ) ; \n\t\t\tviewAttributes . chartSeries = RpfViewAttributes . ANY ; \n\t\t\t} \n\t\t} \n\telse if ( cmd == showCoverageCommand ) { \n\t\tif ( coverage != null ) { \n\t\t\tJCheckBox coverageCheck = ( JCheckBox ) e . getSource ( ) ; \n\t\t\tcoverage . setInUse ( coverageCheck . isSelected ( ) ) ; \n\t\t\tdoPrepare ( ) ; \n\t\t\t} \n\t\t} \n\telse $F5795 ( doPrepare ) } \n"}, {"code": "$F1 public void run $F72 { \n\tif ( mDelay > NUM00 ) { \n\t\ttry $F7595 ( Thread , mDelay ) catch ( InterruptedException e ) { \n\t\t\tLogImpl . w ( TAG , getName ( ) + NUM00 + e . getMessage ( ) ) ; \n\t\t\t} \n\t\t} \n\tif ( mParentTask != null ) { \n\t\tsynchronized ( this ) { \n\t\t\ttry $F5795 ( wait ) catch ( InterruptedException e ) { \n\t\t\t\tLogImpl . w ( TAG , getName ( ) + NUM00 + e . getMessage ( ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tmStatus = Status . STATUS_EXECUTING ; \n\t$F657 ( startTime , System ) start ( ) ; \n\t$F657 ( endTime , System ) LogImpl . i ( TAG , getName ( ) + NUM00 + ( endTime - startTime ) ) ; \n\tif ( mDoneSignal != null ) $F94601 ( mDoneSignal ) if ( mChildTask != null ) { \n\t\t$F8073 ( mChildTask ) } \n\tmStatus = Status . STATUS_DONE ; \n\t} \n"}, {"code": "public boolean has ( final String name ) { \n\treturn $F241801 ( contents , name ) ; \n\t} \n"}, {"code": "public void stop $F72 { \n\tisAlive . set ( _BOOL ) ; \n\tfor ( KafkaConsumer < $F96 , $F96 > c : consumers . values ( ) ) { \n\t\t$F164395 ( c ) } \n\t$F5832 ( kafkaConsumerExecutor ) $F725 ( holdingBuffer ) IOUtils . closeQuietly ( this ) ; \n\t} \n"}, {"code": "$F120210 ( maximumPullScroll , getMaximumPullScroll , pLeft , getPaddingLeft , pTop , getPaddingTop , pRight , getPaddingRight , pBottom , getPaddingBottom , getPullToRefreshScrollDirection , HORIZONTAL , mMode , mHeaderLayout , mFooterLayout , VERTICAL , DEBUG , Log , LOG_TAG , String , setPadding ) "}, {"code": "public String consumeElementSelector $F72 { \n\tint start = pos ; \n\twhile ( ! isEmpty ( ) && ( matchesWord ( ) || matchesAny ( $F7288 ) ) ) pos ++ ; \n\t$F6669 ( queue , start , pos ) } \n"}, {"code": "$F1431 public LongMap ( int initialCapacity , float loadFactor ) { \n\t$F81428 ( initialCapacity ) if ( initialCapacity > $F152871 ) $F11416 ( initialCapacity ) capacity = nextPowerOfTwo ( initialCapacity ) ; \n\t$F255788 ( loadFactor ) this . loadFactor = loadFactor ; \n\t$F53239 ( threshold , capacity , loadFactor ) mask = capacity - NUM00 ; \n\thashShift = NUM00 - Long . numberOfTrailingZeros ( capacity ) ; \n\tstashCapacity = Math . max ( NUM00 , ( int ) Math . ceil ( Math . log ( capacity ) ) * NUM00 ) ; \n\tpushIterations = Math . max ( Math . min ( capacity , NUM00 ) , $F86010 ( Math , capacity ) / NUM00 ) ; \n\tkeyTable = new long [ capacity + stashCapacity ] ; \n\tvalueTable = ( $F25667 ) new Object [ keyTable . length ] ; \n\t} \n"}, {"code": "public void endAttributes $F72 throws SAXException { \n\tString uri = getCurrentElementUri ( ) ; \n\tString local = getCurrentElementLocal ( ) ; \n\t$F118492 ( prefix , nsContext , uri ) _assert ( prefix != null ) ; \n\tString qname ; \n\tif $F35625 ( prefix ) qname = prefix + NUM00 + local ; \n\telse qname = local ; \n\tnsContext . iterateDeclaredPrefixes ( startPrefixCallback ) ; \n\twriter . startElement ( uri , local , qname , attributes ) ; \n\t$F725 ( attributes ) $F4910 ( textBuf ) } \n"}, {"code": "private String abbreviateScript ( String script ) { \n\t$F1338 ( script ) if $F71860 ( script ) { \n\t\treturn script ; \n\t\t} \n\treturn NUM00 + $F606 ( script ) ; \n\t} \n"}, {"code": "public static void expandID ( String numberString , WordRelation wordRelation , Item tokenItem ) { \n\t$F1749 ( numberDigits , numberString ) if ( ( numberDigits == NUM00 ) && $F4432 ( numberString ) && $F4432 ( numberString ) ) { \n\t\tif $F4432 ( numberString ) { \n\t\t\texpandNumber ( numberString , wordRelation , tokenItem ) ; \n\t\t\t} \n\t\telse { \n\t\t\texpandNumber ( $F606 ( numberString ) , wordRelation , tokenItem ) ; \n\t\t\t$F56208 ( wordRelation , tokenItem ) } \n\t\t} \n\telse if ( ( numberDigits == NUM00 ) && $F4432 ( numberString ) ) { \n\t\t$F56208 ( wordRelation , tokenItem ) expandDigits ( $F606 ( numberString ) , wordRelation , tokenItem ) ; \n\t\t} \n\telse if ( ( numberDigits == NUM00 && $F4431 ( numberString ) ) || numberDigits < NUM00 ) { \n\t\texpandNumber ( numberString , wordRelation , tokenItem ) ; \n\t\t} \n\telse if ( numberDigits % NUM00 == NUM00 ) { \n\t\t$F63127 ( firstDigit , digit2num , numberString ) wordRelation . addWord ( tokenItem , firstDigit ) ; \n\t\texpandID ( numberString . substring ( NUM00 , numberDigits ) , wordRelation , tokenItem ) ; \n\t\t} \n\telse { \n\t\texpandNumber ( $F606 ( numberString ) , wordRelation , tokenItem ) ; \n\t\texpandID ( numberString . substring ( NUM00 , numberDigits ) , wordRelation , tokenItem ) ; \n\t\t} \n\t} \n"}, {"code": "private static void unregisterMbeansFromPropsFile ( MBeanServer mBeanServer ) throws Exception { \n\tJamonPropertiesLoader loader = new JamonPropertiesLoader $F72 ; \n\t$F3803 jamonJmxBeanProperties = loader . getMxBeans ( ) ; \n\t$F13712 ( iter , jamonJmxBeanProperties ) while $F2921 ( iter ) { \n\t\t$F13714 ( beanInfo , iter ) MonitorMXBean mXbean = MonitorMXBeanFactory . create ( beanInfo ) ; \n\t\tmBeanServer . unregisterMBean ( MonitorMXBeanFactory . getObjectName ( mXbean ) ) ; \n\t\tMonitorMXBean mXbeanDelta = MonitorMXBeanFactory . createDelta ( beanInfo ) ; \n\t\tmBeanServer . unregisterMBean ( MonitorMXBeanFactory . getDeltaObjectName ( mXbeanDelta ) ) ; \n\t\t} \n\t} \n"}, {"code": "Source popImportSource $F72 { \n\treturn ( Source ) m_importSourceStack . pop ( ) ; \n\t} \n"}, {"code": "public static Date zeroTimeDate ( Date date ) { \n\tfinal GregorianCalendar $F13062 ( gregorianCalendar ) ; \n\tgregorianCalendar . setTime ( date ) ; \n\t$F118880 ( gregorianCalendar , Calendar ) $F118882 ( gregorianCalendar , Calendar ) $F118884 ( gregorianCalendar , Calendar ) $F104560 ( gregorianCalendar , Calendar ) $F11894 ( gregorianCalendar ) } \n"}, {"code": "public static final void writeMapXml ( Map val , String name , XmlSerializer out ) throws $F18821 { \n\t$F18827 ( val , out ) Set s = val . entrySet ( ) ; \n\t$F10531 ( i , s ) $F18823 ( out ) $F18831 ( name , out ) while $F2921 ( i ) { \n\t\t$F53089 e = ( $F53089 ) i . next ( ) ; \n\t\twriteValueXml ( e . getValue ( ) , $F123408 ( e ) , out ) ; \n\t\t} \n\t$F18825 ( out ) } \n"}, {"code": "protected void export $F72 { \n\tint retVal ; \n\tFile file ; \n\tAbstractFileSaver saver ; \n\tif ( m_FileChooser == null ) m_FileChooser = GUIHelper . newConverterFileChooser ( ) ; \n\tretVal = m_FileChooser . showSaveDialog ( this ) ; \n\t$F35873 ( retVal , ConverterFileChooser ) file = m_FileChooser . getSelectedFile ( ) ; \n\tsaver = m_FileChooser . getSaver ( ) ; \n\ttry { \n\t\tsaver . setInstances ( m_DataPanel . getInstances ( ) ) ; \n\t\tsaver . writeBatch ( ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tJOptionPane . showMessageDialog ( this , NUM00 + file + NUM00 + Utils . throwableToString ( e ) , NUM00 , JOptionPane . ERROR_MESSAGE ) ; \n\t\t} \n\t} \n"}, {"code": "public void sort ( int i ) { \n\tArrays . sort ( vector [ i ] , NUM00 , sizes . get ( i ) ) ; \n\t} \n"}, {"code": "private void createMapWhenNeeded $F72 { \n\t$F7254 ( isMapInitialized ) if ( resourceBundle != null ) { \n\t\t$F23720 ( set , resourceBundle ) topLevelMap = new $F530 $F716 ( set ) ; \n\t\tfor ( String key : set ) { \n\t\t\tObject value = resourceBundle . getObject ( key ) ; \n\t\t\ttopLevelMap . put ( key , value ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\ttopLevelMap = new $F530 $F989 ; \n\t\t} \n\t$F545 ( topLevelMap , resourceBundle ) isMapInitialized = _BOOL ; \n\t} \n"}, {"code": "public static VectorClock increment ( VectorClock clock , int ... nodes ) { \n\tfor ( int n : nodes ) clock = clock . incremented ( ( short ) n , System . currentTimeMillis ( ) ) ; \n\treturn clock ; \n\t} \n"}, {"code": "$F1 public String toString $F72 { \n\t$F68665 ( set ) } \n"}, {"code": "void createHeapPhiInstruction ( BasicBlock bb , $F211924 H ) { \n\tInstruction s = makePhiInstruction ( H , bb ) ; \n\t$F241341 heapPhis = heapPhi . get ( bb ) ; \n\tif ( heapPhis == null ) { \n\t\theapPhis = new $F241341 $F989 ; \n\t\theapPhi . put ( bb , heapPhis ) ; \n\t\t} \n\theapPhis . add ( s ) ; \n\tregisterInstruction ( s , bb ) ; \n\t} \n"}, {"code": "protected void printTime ( String s ) { \n\t$F108456 ( dateFormat ) println ( dateFormat . format ( new $F22273 $F72 ) + NUM00 + s ) ; \n\t} \n"}, {"code": "public static int determineSampleSize ( ImageRequest imageRequest , EncodedImage encodedImage ) { \n\tif ( ! EncodedImage . isMetaDataAvailable ( encodedImage ) ) { \n\t\treturn DEFAULT_SAMPLE_SIZE ; \n\t\t} \n\tfloat ratio = determineDownsampleRatio ( imageRequest , encodedImage ) ; \n\tint sampleSize ; \n\tif ( encodedImage . getImageFormat ( ) == ImageFormat . JPEG ) { \n\t\tsampleSize = ratioToSampleSizeJPEG ( ratio ) ; \n\t\t} \n\telse { \n\t\tsampleSize = ratioToSampleSize ( ratio ) ; \n\t\t} \n\tint maxDimension = Math . max ( encodedImage . getHeight ( ) , encodedImage . getWidth ( ) ) ; \n\twhile ( maxDimension / sampleSize > MAX_BITMAP_SIZE ) { \n\t\tif ( encodedImage . getImageFormat ( ) == ImageFormat . JPEG ) { \n\t\t\tsampleSize *= NUM00 ; \n\t\t\t} \n\t\telse { \n\t\t\tsampleSize ++ ; \n\t\t\t} \n\t\t} \n\treturn sampleSize ; \n\t} \n"}, {"code": "public Skeleton ( PrintWriter out ) $F6988 ( this , out ) "}, {"code": "public void disconnect $F72 { \n\tif ( conn != null ) { \n\t\ttry $F881 ( conn ) catch ( SQLException e ) $F23016 ( logger , e ) } \n\ttry $F5795 ( closeBinlog ) $F60644 ( logger , e ) } \n"}, {"code": "$F1 public int read $F24576 ( b , off , len ) throws IOException { \n\t$F24020 ( n , in , b , off , len ) if ( n == - NUM00 ) $F5795 ( throwIfFalseEOF ) else { \n\t\tbytesRead += n ; \n\t\t} \n\treturn n ; \n\t} \n"}, {"code": "$F1 public Generator $F80240 construct $F4374 ( args ) { \n\treturn new IntegerGenerator ( $F63082 ( Integer , args ) , $F63082 ( Integer , args ) ) ; \n\t} \n"}, {"code": "public SpatialStrategy ( SpatialContext ctx , String fieldName ) { \n\t$F19273 ( ctx ) this . ctx = ctx ; \n\tif $F6036 ( fieldName ) $F824 this . fieldName = fieldName ; \n\t} \n"}, {"code": "public void dispose $F72 { \n\t$F263153 ( keys ) $F355 ( super ) } \n"}, {"code": "public boolean isFixedDisk ( String letter ) { \n\tif $F35625 ( letter ) $F11416 ( letter ) $F226746 ( drive , Character , letter ) if $F19298 ( drive ) $F11416 ( drive ) return getDriveType ( drive + NUM00 ) == NUM00 ; \n\t} \n"}, {"code": "$F25079 ( deltaY , mPtrIndicator , DEBUG , PtrCLog , LOG_TAG , String , to , PtrIndicator , change , updatePos ) "}, {"code": "private $F131 compile ( String path ) { \n\t$F19151 ( list ) if ( path == null ) $F340590 ( list ) $F17727 ( tok , path ) while $F14498 ( tok ) { \n\t\t$F8095 ( token , tok ) $F156 ( op , OpEnum , token ) if ( op == null ) $F35098 ( path ) list . add ( op ) ; \n\t\tif ( op == OpEnum . RELATION ) { \n\t\t\tlist . add ( tok . nextToken ( ) ) ; \n\t\t\t} \n\t\t} \n\t$F3537 ( list ) } \n"}, {"code": "private void splitChunk ( final MemoryChunk chunk , final long address ) { \n\t$F173719 ( oldData , chunk ) final $F96 newData1 = new byte [ ( int ) ( address - chunk . getAddress ( ) ) ] ; \n\tfinal $F96 newData2 = new byte [ ( chunk . getLength ( ) - newData1 . length ) ] ; \n\t$F5634 ( System , oldData , newData1 ) System . arraycopy ( oldData , oldData . length - newData2 . length , newData2 , NUM00 , newData2 . length ) ; \n\tfinal MemoryChunk newChunk1 = new MemoryChunk ( chunk . getAddress ( ) , newData1 ) ; \n\tfinal MemoryChunk newChunk2 = new MemoryChunk ( ( chunk . getAddress ( ) + chunk . getLength ( ) ) - newData2 . length , newData2 ) ; \n\tremoveChunk ( chunk ) ; \n\tinsertChunk ( newChunk1 ) ; \n\tinsertChunk ( newChunk2 ) ; \n\t} \n"}, {"code": "public boolean isDirty $F72 { \n\treturn dirty ; \n\t} \n"}, {"code": "private Vector showTextFixedWidth ( String text , int align ) { \n\t$F6518 ( comps ) if ( $F158251 ( text ) ) { \n\t\treturn comps ; \n\t\t} \n\tint spaceW = width - x ; \n\tVector words = getWords ( text , align , _BOOL ) ; \n\tif $F3817 ( words ) { \n\t\tint w = NUM00 ; \n\t\tString wordStr = NUM00 ; \n\t\tif ( ( CSSParser . isWhiteSpace ( text . charAt ( NUM00 ) ) ) && ( curLine . getComponentCount ( ) != NUM00 ) ) { \n\t\t\twordStr = NUM00 ; \n\t\t\t} \n\t\twhile $F1765 ( w , words ) { \n\t\t\t$F124180 ( nextWord , words , w ) String space = NUM00 ; \n\t\t\tif ( $F1264 ( wordStr ) && $F1264 ( wordStr ) ) { \n\t\t\t\tspace = NUM00 ; \n\t\t\t\t} \n\t\t\tif ( font . stringWidth ( wordStr + space + nextWord ) > spaceW - NUM00 ) { \n\t\t\t\tcomps . addElement ( addString ( wordStr , align ) ) ; \n\t\t\t\tnewLineIfNotEmpty ( align ) ; \n\t\t\t\tspaceW = width - x ; \n\t\t\t\twordStr = nextWord ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\twordStr += space + nextWord ; \n\t\t\t\t} \n\t\t\tw ++ ; \n\t\t\t} \n\t\tif ( CSSParser . isWhiteSpace ( $F7792 ( text ) ) ) { \n\t\t\twordStr += NUM00 ; \n\t\t\t} \n\t\tcomps . addElement ( addString ( wordStr , align ) ) ; \n\t\t} \n\treturn comps ; \n\t} \n"}, {"code": "private void calculateSlotUsage $F72 { \n\tnumEntries = NUM00 ; \n\tfor ( int i = NUM00 ; \n\ti < table . table . length ; \n\ti ++ ) { \n\t\tLinkedList $F2193 list = ( LinkedList $F2193 ) table . table [ i ] ; \n\t\tif ( list != null ) { \n\t\t\t$F41045 ( numEntries , list ) intHashTable [ i ] += list . size ( ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public Insert defaultValues $F72 { \n\tdefaultValues = _BOOL ; \n\t$F725 ( columns ) $F725 ( valuesToInsert ) query = null ; \n\tinvalidateCompileCache ( ) ; \n\treturn this ; \n\t} \n"}, {"code": "public CFilenameFormatter ( final File directory ) { \n\tPreconditions . checkArgument ( directory . exists ( ) , NUM00 ) ; \n\tm_directory = directory ; \n\t} \n"}, {"code": "public T pop $F72 { \n\treturn list . removeLast ( ) ; \n\t} \n"}, {"code": "$F29442 ( cls , makeLogTag ) "}, {"code": "public Timestamp recalculateEstimatedCompletionDate ( Long priority , Timestamp startDate ) { \n\tif ( exist ( ) ) { \n\t\tgetProductionRunRoutingTasks ( ) ; \n\t\t$F21009 ( quantity , getQuantity ) Timestamp endDate = null ; \n\t\tfor ( Iterator $F6260 iter = productionRunRoutingTasks . iterator ( ) ; \n\t\titer . hasNext ( ) ; \n\t\t) { \n\t\t\tGenericValue routingTask = iter . next ( ) ; \n\t\t\tif ( priority . compareTo ( routingTask . getLong ( NUM00 ) ) <= NUM00 ) { \n\t\t\t\tlong totalTime = ProductionRun . getEstimatedTaskTime ( routingTask , quantity , dispatcher ) ; \n\t\t\t\tendDate = TechDataServices . addForward ( TechDataServices . getTechDataCalendar ( routingTask ) , startDate , totalTime ) ; \n\t\t\t\t$F113827 ( routingTask , startDate ) $F113827 ( routingTask , endDate ) startDate = endDate ; \n\t\t\t\t} \n\t\t\t} \n\t\treturn endDate ; \n\t\t} \n\telse $F1337 } \n"}, {"code": "protected ShoppingCartItem $F72 $F845 "}, {"code": "public static String nodeListToString ( List < ? extends Node > list ) { \n\t$F280 ( buf ) $F84 ( buf ) if $F3817 ( list ) { \n\t\tbuf . append ( NUM00 + $F189709 ( domToString , list ) + NUM00 ) ; \n\t\tfor ( $F3836 ( i , list ) ) { \n\t\t\tbuf . append ( NUM00 + i + NUM00 + $F189709 ( domToString , list ) + NUM00 ) ; \n\t\t\t} \n\t\t$F84 ( buf ) } \n\t$F84 ( buf ) $F92 ( buf ) } \n"}, {"code": "protected Element adapt ( Element source , $F369480 ( sourceMeta ) , String kind ) { \n\t$F369491 adaptorKey = sourceMeta . adapt ( kind ) ; \n\tif ( adaptorKey != null ) { \n\t\ttry $F8587 ( adapt , adaptorKey , source ) catch ( ContentCreationException e ) { \n\t\t\tLOGGER . log ( Level . SEVERE , $F29695 ( source ) + adaptorKey . getElementType ( ) , e ) ; \n\t\t\t} \n\t\t} \n\treturn source ; \n\t} \n"}, {"code": "public String convertAliasToNumber ( String aliasName ) { \n\tif ( $F49413 ( aliasName ) && AliasDatabase . containsAlias ( aliasName ) ) { \n\t\t$F806 res = AliasDatabase . getAlias ( aliasName ) ; \n\t\treturn res [ NUM00 ] ; \n\t\t} \n\treturn aliasName ; \n\t} \n"}, {"code": "public Attr ( String name , $F5466 Format format ) { \n\tthis . name = name ; \n\tif ( format != null ) { \n\t\tformats = Collections . singletonList ( format ) ; \n\t\t} \n\t} \n"}, {"code": "static StreamTokenizer makeTokenizer ( String tagValue ) { \n\tStreamTokenizer tokenizer = new StreamTokenizer $F33896 ( tagValue ) ; \n\t$F61733 ( tokenizer ) $F33902 ( tokenizer ) $F33902 ( tokenizer ) $F33902 ( tokenizer ) $F33902 ( tokenizer ) $F33902 ( tokenizer ) $F33902 ( tokenizer ) $F33902 ( tokenizer ) $F33902 ( tokenizer ) $F70966 ( tokenizer ) $F70966 ( tokenizer ) tokenizer . whitespaceChars ( NUM00 , NUM00 ) ; \n\ttokenizer . whitespaceChars ( NUM00 , NUM00 ) ; \n\ttokenizer . whitespaceChars ( NUM00 , NUM00 ) ; \n\ttokenizer . whitespaceChars ( NUM00 , NUM00 ) ; \n\ttokenizer . eolIsSignificant ( _BOOL ) ; \n\treturn tokenizer ; \n\t} \n"}, {"code": "private void sendRequest $F72 { \n\t$F89756 ( i , tabPane ) String prompt = rb . getString ( NUM00 + i + NUM00 ) ; \n\t$F197555 ( log , prompt , i ) if ( source == null ) { \n\t\t$F9464 ( log ) $F5191 ( timer ) $F665 } \n\tsource . sendBytes ( prompt . getBytes ( ) ) ; \n\t} \n"}, {"code": "public void remove ( Predicate filter ) { \n\tfor ( IntIterator ii = rows ( filter ) ; \n\tii . hasNext ( ) ; \n\t) removeRow ( ii . nextInt ( ) ) ; \n\t} \n"}, {"code": "private void calculateTrimArea ( Rect bounds ) { \n\tfloat size = Math . min ( bounds . height ( ) , bounds . width ( ) ) ; \n\tfloat yOffset = ( bounds . height ( ) - size ) / NUM00 ; \n\tfloat xOffset = ( bounds . width ( ) - size ) / NUM00 ; \n\tfloat padding = mPadding + ( bounds . height ( ) - NUM00 * mPadding ) * NUM00 / NUM00 ; \n\tmInternalBounds . set ( bounds . left + padding + xOffset , bounds . top + padding + yOffset , bounds . right - padding - xOffset , bounds . bottom - padding - yOffset ) ; \n\tmCenter = mInternalBounds . centerX ( ) ; \n\tmSize = mInternalBounds . width ( ) ; \n\tmPlayTipOffset = NUM00 / NUM00 * mSize ; \n\tmPlayBaseOffset = NUM00 * mSize ; \n\tsetTransitionState ( NUM00 , NUM00 ) ; \n\t} \n"}, {"code": "protected void initInstances ( Operation post , ServiceDocument ... states ) { \n\tinitInstances ( post , _BOOL , _BOOL , states ) ; \n\t} \n"}, {"code": "protected Instance mergeInstances ( Instance source , Instance dest ) { \n\tInstances outputFormat = outputFormatPeek ( ) ; \n\t$F1986 vals = new double [ outputFormat . numAttributes ( ) ] ; \n\tfor ( $F1139 ( i , vals ) ) { \n\t\tif ( ( i != outputFormat . classIndex ( ) ) && ( m_SelectedCols . isInRange ( i ) ) ) { \n\t\t\tif ( ( source != null ) && ! source . isMissing ( i ) && ! dest . isMissing ( i ) ) { \n\t\t\t\tvals [ i ] = dest . value ( i ) - source . value ( i ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tvals [ i ] = Utils . missingValue ( ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse $F221560 ( vals , i , dest ) } \n\tInstance inst = null ; \n\tif ( dest instanceof SparseInstance ) { \n\t\tinst = new SparseInstance ( dest . weight ( ) , vals ) ; \n\t\t} \n\telse { \n\t\t$F221573 ( inst , dest , vals ) } \n\tinst . setDataset ( dest . dataset ( ) ) ; \n\treturn inst ; \n\t} \n"}, {"code": "public SourceCallChainBuilder ( int timeout , boolean process_callbacks ) $F20755 ( this , timeout , process_callbacks ) "}, {"code": "public synchronized float recoveredBytesPercent $F72 { \n\tlong total = NUM00 ; \n\tlong recovered = NUM00 ; \n\tfor ( $F90432 ( file , fileDetails ) ) { \n\t\tif ( file . reused ( ) == _BOOL ) { \n\t\t\t$F90433 ( total , file ) recovered += file . recovered ( ) ; \n\t\t\t} \n\t\t} \n\tif ( total == NUM00 && $F10470 ( fileDetails ) ) $F1083 if ( total == recovered ) $F1083 else { \n\t\treturn NUM00 * recovered / total ; \n\t\t} \n\t} \n"}, {"code": "public < E extends T > EventBinder $F11685 on $F72 { \n\treturn new EventBinder $F200 $F95683 ( Optional ) ; \n\t} \n"}, {"code": "private boolean isValueSupported ( Object value ) { \n\tfor ( $F1139 ( i , values ) ) $F55055 ( value , values , i , _BOOL ) return _BOOL ; \n\t} \n"}, {"code": "public static BitSet fromByteArray $F97 ( bytes ) { \n\t$F219748 ( bits ) for ( int i = NUM00 ; \n\ti < bytes . length * NUM00 ; \n\ti ++ ) { \n\t\tif ( ( bytes [ bytes . length - i / NUM00 - NUM00 ] & ( NUM00 < < ( i % NUM00 ) ) ) > NUM00 ) $F24242 ( bits , i ) } \n\treturn bits ; \n\t} \n"}, {"code": "public RepeatTime createRepeatTime ( int repeatInterval , int activeDuration , $F2027 offsets ) { \n\tRepeatField repeatTimeField = new RepeatField $F72 ; \n\ttry { \n\t\trepeatTimeField . setRepeatInterval ( repeatInterval ) ; \n\t\trepeatTimeField . setActiveDuration ( activeDuration ) ; \n\t\trepeatTimeField . setOffsetArray ( offsets ) ; \n\t\t} \n\t$F18284 ( s ) return repeatTimeField ; \n\t} \n"}, {"code": "public void remove ( int i ) { \n\tif ( ( i >= array . length ) || ( i < NUM00 ) ) throw new ArrayIndexOutOfBoundsException ( NUM00 + i + NUM00 + array . length ) ; \n\t$F12334 newArray = new NSObject $F12500 ( array ) ; \n\t$F135 ( System , array , newArray , i ) $F86533 ( System , array , i , newArray ) array = newArray ; \n\t} \n"}, {"code": "private Time parseTime ( String timeString ) throws ParseException { \n\t$F22273 parsedDate = TimeField . parse ( timeString ) ; \n\t$F1275 ( parsedDate ) return new Time $F16810 ( parsedDate ) ; \n\t} \n"}, {"code": "public synchronized void deleteObservers $F72 $F9096 ( observers ) "}, {"code": "private void decrementCopyFieldTargetCount ( SchemaField dest ) { \n\t$F99426 ( count , copyFieldTargetCounts , dest ) assert count != null ; \n\tif ( count <= NUM00 ) $F106 ( copyFieldTargetCounts , dest ) else { \n\t\tcopyFieldTargetCounts . put ( dest , count - NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "public synchronized int updatePurchase ( String orderId , String productId , PurchaseState purchaseState , long purchaseTime , String developerPayload ) { \n\tinsertOrder ( orderId , productId , purchaseState , purchaseTime , developerPayload ) ; \n\tCursor cursor = mDb . query ( PURCHASE_HISTORY_TABLE_NAME , HISTORY_COLUMNS , HISTORY_PRODUCT_ID_COL + NUM00 , $F8640 ( productId ) , null , null , null , null ) ; \n\t$F1084 ( cursor ) int quantity = NUM00 ; \n\ttry { \n\t\twhile $F12260 ( cursor ) { \n\t\t\t$F24632 ( stateIndex , cursor ) $F2544 ( state , PurchaseState , stateIndex ) if ( state == PurchaseState . PURCHASED || state == PurchaseState . REFUNDED ) { \n\t\t\t\tquantity += NUM00 ; \n\t\t\t\t} \n\t\t\t} \n\t\tupdatePurchasedItem ( productId , quantity ) ; \n\t\t} \n\t$F14364 ( cursor ) return quantity ; \n\t} \n"}, {"code": "public static Calendar fromUnixTime ( long unixTime , TimeUnit timeUnit ) { \n\tCalendar calendar = getCalendarInstance ( ) ; \n\tcalendar . setTimeZone ( TimeZone . getDefault ( ) ) ; \n\tlong millis = timeUnit . toMillis ( unixTime ) ; \n\tcalendar . setTimeInMillis ( millis ) ; \n\treturn calendar ; \n\t} \n"}, {"code": "public boolean isLayoutIdInRecord ( int layoutId ) { \n\t$F28807 ( mLayoutIds , layoutId ) } \n"}, {"code": "private void open_board_design_action $F72 { \n\tDesignFile design_file = open_dialog ( stat , main_options . design_dir_name ) ; \n\tif ( design_file == null ) { \n\t\tstat . userPrintln ( resources . getString ( NUM00 ) ) ; \n\t\t$F665 } \n\tString message = $F241237 ( resources ) + design_file . get_name ( ) ; \n\tstat . userPrintln ( message ) ; \n\tBoardFrame board_frame = new BoardFrame ( design_file , stat ) ; \n\tImportDesign d_import = new ImportDesign ( board_frame ) ; \n\t$F1699 ( d_import ) } \n"}, {"code": "public static String retrieveDisplayName ( String id , boolean daylight , int style , Locale locale ) { \n\t$F31405 ( names , retrieveDisplayNamesImpl , id , locale ) if ( Objects . nonNull ( names ) ) { \n\t\treturn names [ ( daylight ? NUM00 : NUM00 ) - style ] ; \n\t\t} \n\telse $F1337 } \n"}, {"code": "protected Query newFuzzyQuery ( Term term , float minimumSimilarity , int prefixLength ) { \n\tString text = term . text ( ) ; \n\tint numEdits = FuzzyQuery . floatToEdits ( minimumSimilarity , text . codePointCount ( $F34024 ( text ) ) ) ; \n\treturn new FuzzyQuery ( term , numEdits , prefixLength ) ; \n\t} \n"}, {"code": "$F1 public void playVideo ( Uri uri , String title ) { \n\tCameraActivity activity = mActivity . get ( ) ; \n\tif ( activity != null ) { \n\t\tCameraUtil . playVideo ( activity , uri , title ) ; \n\t\t} \n\t} \n"}, {"code": "public void copyFrom ( Path other ) { \n\tgrow ( other . length - NUM00 ) ; \n\tSystem . arraycopy ( other . blockIdList , NUM00 , this . blockIdList , NUM00 , other . length ) ; \n\tthis . length = other . length ; \n\tthis . cachedHashCode = other . cachedHashCode ; \n\t} \n"}, {"code": "void recoverMessages $F72 throws RollbackFailedException { \n\tif ( m_isQueue ) { \n\t\tif $F6456 ( _logger , Level ) { \n\t\t\t$F105262 ( _logger , Level ) } \n\t\t$F725 ( unackedMessages ) $F21685 ( isAutoAck , rollbackLocalTransaction ) } \n\telse { \n\t\tif $F6456 ( _logger , Level ) { \n\t\t\t$F105262 ( _logger , Level ) } \n\t\tunackedMessages . addAll ( recoverMessages ) ; \n\t\tLinkedList < MessageQueueElement > temp = unackedMessages ; \n\t\t$F725 ( recoverMessages ) unackedMessages = recoverMessages ; \n\t\trecoverMessages = temp ; \n\t\t} \n\t} \n"}, {"code": "private void maybeSampleSyncParams $F72 { \n\tlong playbackPositionUs = audioTrackUtil . getPlaybackHeadPositionUs ( ) ; \n\t$F32905 ( playbackPositionUs ) long $F11380 ( systemClockUs , System ) ; \n\tif ( systemClockUs - lastPlayheadSampleTimeUs >= MIN_PLAYHEAD_OFFSET_SAMPLE_INTERVAL_US ) { \n\t\tplayheadOffsets [ nextPlayheadOffsetIndex ] = playbackPositionUs - systemClockUs ; \n\t\t$F271125 ( nextPlayheadOffsetIndex , MAX_PLAYHEAD_OFFSET_COUNT ) if ( playheadOffsetCount < MAX_PLAYHEAD_OFFSET_COUNT ) { \n\t\t\tplayheadOffsetCount ++ ; \n\t\t\t} \n\t\tlastPlayheadSampleTimeUs = systemClockUs ; \n\t\tsmoothedPlayheadOffsetUs = NUM00 ; \n\t\tfor ( $F119 ( i , playheadOffsetCount ) ) { \n\t\t\tsmoothedPlayheadOffsetUs += playheadOffsets [ i ] / playheadOffsetCount ; \n\t\t\t} \n\t\t} \n\tif ( ! isPassthrough ( ) && systemClockUs - lastTimestampSampleTimeUs >= MIN_TIMESTAMP_SAMPLE_INTERVAL_US ) { \n\t\taudioTimestampSet = audioTrackUtil . updateTimestamp ( ) ; \n\t\tif ( audioTimestampSet ) { \n\t\t\tlong audioTimestampUs = audioTrackUtil . getTimestampNanoTime ( ) / NUM00 ; \n\t\t\tlong audioTimestampFramePosition = audioTrackUtil . getTimestampFramePosition ( ) ; \n\t\t\tif ( audioTimestampUs < resumeSystemTimeUs ) { \n\t\t\t\taudioTimestampSet = _BOOL ; \n\t\t\t\t} \n\t\t\telse if $F19505 ( Math , audioTimestampUs , systemClockUs , MAX_AUDIO_TIMESTAMP_OFFSET_US ) { \n\t\t\t\tString message = NUM00 + audioTimestampFramePosition + NUM00 + audioTimestampUs + NUM00 + systemClockUs + NUM00 + playbackPositionUs ; \n\t\t\t\tif ( failOnSpuriousAudioTimestamp ) { \n\t\t\t\t\tthrow new InvalidAudioTrackTimestampException ( message ) ; \n\t\t\t\t\t} \n\t\t\t\tLog . w ( TAG , message ) ; \n\t\t\t\taudioTimestampSet = _BOOL ; \n\t\t\t\t} \n\t\t\telse if ( Math . abs ( framesToDurationUs ( audioTimestampFramePosition ) - playbackPositionUs ) > MAX_AUDIO_TIMESTAMP_OFFSET_US ) { \n\t\t\t\tString message = NUM00 + audioTimestampFramePosition + NUM00 + audioTimestampUs + NUM00 + systemClockUs + NUM00 + playbackPositionUs ; \n\t\t\t\tif ( failOnSpuriousAudioTimestamp ) { \n\t\t\t\t\tthrow new InvalidAudioTrackTimestampException ( message ) ; \n\t\t\t\t\t} \n\t\t\t\tLog . w ( TAG , message ) ; \n\t\t\t\taudioTimestampSet = _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( getLatencyMethod != null ) { \n\t\t\ttry { \n\t\t\t\tlatencyUs = ( Integer ) $F99198 ( getLatencyMethod , audioTrack ) * NUM00 - framesToDurationUs ( bytesToFrames ( bufferSize ) ) ; \n\t\t\t\t$F89002 ( latencyUs , Math ) if ( latencyUs > MAX_LATENCY_US ) { \n\t\t\t\t\t$F248237 ( Log , TAG , latencyUs ) latencyUs = NUM00 ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tcatch ( Exception e ) { \n\t\t\t\tgetLatencyMethod = null ; \n\t\t\t\t} \n\t\t\t} \n\t\tlastTimestampSampleTimeUs = systemClockUs ; \n\t\t} \n\t} \n"}, {"code": "private Map < Key , Array > store ( Class clazz ) { \n\t$F23596 methods = clazz . getMethods ( ) ; \n\tMap < Key , Array > methodsMap = new ConcurrentHashMap < Key , Array > $F72 ; \n\tfor ( $F1139 ( i , methods ) ) $F218373 ( storeMethod , methods , i , methodsMap ) map . put ( clazz , methodsMap ) ; \n\treturn methodsMap ; \n\t} \n"}, {"code": "private void readCentralDir $F72 throws IOException { \n\tlong scanOffset = raf . length ( ) - ENDHDR ; \n\tif ( scanOffset < NUM00 ) { \n\t\tthrow new ZipException ( $F36804 ( raf ) ) ; \n\t\t} \n\t$F927 ( raf ) final int headerMagic = $F247584 ( Integer , raf ) ; \n\tif ( headerMagic != LOCSIG ) $F124916 long stopOffset = scanOffset - NUM00 ; \n\t$F17370 ( stopOffset ) while ( _BOOL ) { \n\t\traf . seek ( scanOffset ) ; \n\t\tif ( $F247584 ( Integer , raf ) == ENDSIG ) $F5153 scanOffset -- ; \n\t\tif ( scanOffset < stopOffset ) $F124916 } \n\t$F96 $F41018 ( eocd , ENDHDR ) ; \n\traf . readFully ( eocd ) ; \n\tBufferIterator it = HeapBufferIterator . iterator ( eocd , NUM00 , eocd . length , ByteOrder . LITTLE_ENDIAN ) ; \n\t$F247605 ( diskNumber , it ) $F247605 ( diskWithCentralDir , it ) $F247605 ( numEntries , it ) $F247605 ( totalNumEntries , it ) $F71184 ( it ) long centralDirOffset = ( $F247606 ( it ) ) & NUM00 ; \n\t$F247605 ( commentLength , it ) if ( numEntries != totalNumEntries || diskNumber != NUM00 || diskWithCentralDir != NUM00 ) $F124916 if ( commentLength > NUM00 ) { \n\t\t$F2175 ( commentBytes , commentLength ) raf . readFully ( commentBytes ) ; \n\t\tcomment = new String ( commentBytes , NUM00 , commentBytes . length , StandardCharsets . UTF_8 ) ; \n\t\t} \n\tRAFStream rafStream = new RAFStream ( raf , centralDirOffset ) ; \n\tBufferedInputStream bufferedStream = $F247623 ( rafStream ) ; \n\t$F2175 ( hdrBuf , CENHDR ) for ( $F1316 ( i , numEntries ) ) { \n\t\tZipEntry newEntry = new ZipEntry ( hdrBuf , bufferedStream ) ; \n\t\tif ( newEntry . localHeaderRelOffset >= centralDirOffset ) $F124916 $F20605 ( entryName , newEntry ) if ( entries . put ( entryName , newEntry ) != null ) { \n\t\t\tthrow new ZipException ( NUM00 + entryName ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "protected int readFully ( InputStream in , byte $F76061 , int offset , int len ) throws IOException { \n\tfor ( $F119 ( i , len ) ) { \n\t\t$F7468 ( q , in ) if ( q == - NUM00 ) return ( ( i == NUM00 ) ? - NUM00 : i ) ; \n\t\tbuffer [ i + offset ] = ( byte ) q ; \n\t\t} \n\treturn len ; \n\t} \n"}, {"code": "private long renewServiceLeaseDo ( ServiceID serviceID , Uuid leaseID , long renewDuration ) throws UnknownLeaseException { \n\t$F657 ( now , System ) long renewExpiration = renewServiceLeaseInt ( serviceID , leaseID , renewDuration , now ) ; \n\taddLogRecord ( new ServiceLeaseRenewedLogObj ( serviceID , leaseID , renewExpiration ) ) ; \n\treturn renewExpiration - now ; \n\t} \n"}, {"code": "public BlockSwapper ( World world , EntityPlayer player , ItemStack truncator , BlockPos origCoords , int range , boolean leaves ) { \n\tthis . world = world ; \n\tthis . player = player ; \n\tthis . truncator = truncator ; \n\tthis . origin = origCoords ; \n\tthis . range = range ; \n\tthis . treatLeavesSpecial = leaves ; \n\tthis . candidateQueue = new PriorityQueue $F200 $F72 ; \n\tthis . completedCoords = new $F9623 $F72 ; \n\tcandidateQueue . offer ( new SwapCandidate ( this . origin , this . range ) ) ; \n\t} \n"}, {"code": "public static $F806 toStringArray ( $F14937 enumeration ) { \n\t$F1338 ( enumeration ) $F3803 list = Collections . list ( enumeration ) ; \n\t$F14862 ( list ) } \n"}, {"code": "public boolean overlapSave ( SphereCluster other ) { \n\tdouble minDist = Math . sqrt ( NUM00 ) * ( getRadius ( ) + other . getRadius ( ) ) ; \n\tdouble diff = getCenterDistance ( other ) - minDist ; \n\treturn diff > NUM00 ; \n\t} \n"}, {"code": "@ PUT $F21697 ( MediaType ) $F2513 $F2512 ( MediaType ) @ CheckPermission ( roles = { \n\tRole . SYSTEM_ADMIN , Role . RESTRICTED_SYSTEM_ADMIN } \n) public FileVirtualPoolRestRep updateFileVirtualPoolWithAssignedPools ( $F2515 ( id ) , VirtualPoolPoolUpdateParam param ) { \n\tVirtualPool vPool = updateVirtualPoolWithAssignedStoragePools ( id , param ) ; \n\treturn toFileVirtualPool ( vPool , VirtualPool . getFileRemoteProtectionSettings ( vPool , _dbClient ) ) ; \n\t} \n"}, {"code": "public static $F212479 toSqlDate $F14337 ( month , day , year ) { \n\t$F22273 newDate = toDate ( month , day , year , NUM00 , NUM00 , NUM00 ) ; \n\tif ( newDate != null ) { \n\t\treturn new $F212479 $F16810 ( newDate ) ; \n\t\t} \n\telse $F1337 } \n"}, {"code": "public Object readDefaultListModel ( Element node ) throws Exception { \n\tDefaultListModel model ; \n\t$F384979 ( children ) Element child ; \n\tint i ; \n\tint index ; \n\tint currIndex ; \n\tif ( DEBUG ) { \n\t\ttrace ( $F219728 , node . getAttribute ( ATT_NAME ) ) ; \n\t\t} \n\tm_CurrentNode = node ; \n\tchildren = XMLDocument . getChildTags ( node ) ; \n\tmodel = $F215229 ; \n\t$F63959 ( index , children ) for ( $F12002 ( i , children ) ) { \n\t\tchild = children . get ( i ) ; \n\t\tcurrIndex = Integer . parseInt ( child . getAttribute ( ATT_NAME ) ) ; \n\t\t$F12283 ( currIndex , index ) } \n\tmodel . setSize ( index + NUM00 ) ; \n\tfor ( $F12002 ( i , children ) ) { \n\t\tchild = children . get ( i ) ; \n\t\tmodel . set ( Integer . parseInt ( child . getAttribute ( ATT_NAME ) ) , invokeReadFromXML ( child ) ) ; \n\t\t} \n\treturn model ; \n\t} \n"}, {"code": "private boolean resultsIdentical ( String namedCurve , BigInteger badX , BigInteger badY , BigInteger secret , int iter ) throws InvalidAlgorithmParameterException , NoSuchAlgorithmException , InvalidKeySpecException , InvalidKeyException { \n\tfor ( $F119 ( i , iter ) ) { \n\t\tsecret = secret . add ( BigInteger . ONE ) ; \n\t\tBigInteger resultCustom = computeSecretWithCustomAlgorithm ( namedCurve , badX , badY , secret ) ; \n\t\tBigInteger resultSun = computeSecretWithSunAlgorithm ( namedCurve , badX , badY , secret ) ; \n\t\tif $F10335 ( resultSun , resultCustom ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void enableLayers ( boolean enable ) { \n\tTextureState textureState = ( TextureState ) getLocalRenderState ( RenderState . StateType . Texture ) ; \n\ttextureState . setEnabled ( enable ) ; \n\tmarkDirty ( DirtyType . RenderState ) ; \n\t} \n"}, {"code": "protected void starveRandomly ( int limit ) { \n\twhile $F60125 ( population , limit ) { \n\t\tint removePos = Randomness . nextInt ( ) % population . size ( ) ; \n\t\tpopulation . remove ( removePos ) ; \n\t\t} \n\t} \n"}, {"code": "public void saveParam $F72 throws Exception { \n\tEnumeration < AbstractParamPanel > en = tablePanel . elements ( ) ; \n\tAbstractParamPanel panel = null ; \n\twhile $F1444 ( en ) { \n\t\t$F1445 ( panel , en ) panel . saveParam ( paramObject ) ; \n\t\t} \n\t} \n"}, {"code": "$F1431 public static LocalStreamingContainer waitForActivation ( StramLocalCluster localCluster , PTOperator operator ) throws InterruptedException { \n\tLocalStreamingContainer container ; \n\t$F657 ( startMillis , System ) while ( System . currentTimeMillis ( ) < ( startMillis + DEFAULT_TIMEOUT_MILLIS ) ) { \n\t\tif ( operator . getState ( ) == PTOperator . State . ACTIVE ) { \n\t\t\tif ( ( container = localCluster . getContainer ( operator ) ) != null ) { \n\t\t\t\treturn container ; \n\t\t\t\t} \n\t\t\t} \n\t\tLOG . debug ( NUM00 , new Object [ ] { \n\t\t\toperator , operator . getState ( ) , operator . getContainer ( ) } \n\t\t) ; \n\t\t$F9470 ( Thread ) } \n\tAssert . fail ( NUM00 + operator ) ; \n\t$F1274 } \n"}, {"code": "$F663 ( currTime , System , elapsed , startTime , ZOOM_TIME , Math , interpolator ) "}, {"code": "protected String toExternalForm ( URL url ) $F8587 ( toExternalForm , url , _BOOL ) "}, {"code": "public ResultSet executeQuery ( String query ) throws $F135592 { \n\tif ( connection != null ) { \n\t\t$F11282 ( st , connection ) return st . executeQuery ( query ) ; \n\t\t} \n\t$F135596 } \n"}, {"code": "private void rejectAccessAndTerminateProcess ( RadiusResponse response , ContextHolder holder ) { \n\tresponse . setResponsePacket ( new AccessReject $F72 ) ; \n\tresponse . setUniversalId ( holder . getUniversalId ( ) ) ; \n\tterminateAuthnProcess ( holder ) ; \n\t} \n"}, {"code": "public ScVolume createViewVolume ( String name , String instanceId ) throws StorageCenterAPIException { \n\t$F7028 ( LOG , instanceId ) String errorMessage = NUM00 ; \n\tParameters $F108428 ( params ) ; \n\t$F269710 ( params , name ) params . add ( NUM00 , NOTES_ \"STRING\" ) ; \n\ttry { \n\t\tRestResult result = restClient . post ( String . format ( NUM00 , instanceId ) , params . toJson ( ) ) ; \n\t\tif ( checkResults ( result ) ) { \n\t\t\treturn gson . fromJson ( result . getResult ( ) , ScVolume . class ) ; \n\t\t\t} \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F269729 ( errorMessage , String , e ) LOG . warn ( errorMessage ) ; \n\t\t} \n\tif $F1277 ( errorMessage ) { \n\t\t$F86910 ( errorMessage , String , name , instanceId ) } \n\t$F269734 ( errorMessage ) } \n"}, {"code": "$F1 public boolean contains ( Object object ) { \n\treturn indexOf ( object , NUM00 ) != - NUM00 ; \n\t} \n"}, {"code": "public void sync $F72 throws StorageFault { \n\tfinal String methodName = NUM00 ; \n\tlog . debug ( methodName + NUM00 ) ; \n\ttry { \n\t\t$F454866 ( log , methodName ) _syncManager . syncAll ( ) ; \n\t\t} \n\tcatch ( SOSFailure e ) { \n\t\t$F69255 ( log , methodName , e ) throw FaultUtil . StorageFault ( e ) ; \n\t\t} \n\tlog . debug ( methodName + NUM00 ) ; \n\t} \n"}, {"code": "private void addMenuItem ( JPopupMenu menu , String title , MWFNodeNext line ) { \n\tWFPopupItem item = new WFPopupItem ( title , line ) ; \n\tmenu . add ( item ) ; \n\titem . addActionListener ( this ) ; \n\t} \n"}, {"code": "public static Matcher $F143607 binds ( String name , $F6969 value ) { \n\treturn new BindsMatcher $F1432 ( name , instanceOf ( value ) ) ; \n\t} \n"}, {"code": "private void testAdd $F72 throws Exception { \n\t$F973 ( LOG ) long msgCount = messageMapper . countMessagesInMailbox ( MBOXES . get ( NUM00 ) ) ; \n\tLOG . info ( msgCount + NUM00 + MESSAGE_NO . size ( ) ) ; \n\t$F28711 ( assertEquals , MESSAGE_NO , msgCount ) ; \n\t} \n"}, {"code": "public void cancelTaskNoException ( Task task ) { \n\ttry { \n\t\tcancelTask ( task ) ; \n\t\t} \n\tcatch ( Exception e ) $F21338 ( _log ) } \n"}, {"code": "public boolean isLayoutIdInRecord ( int layoutId ) { \n\t$F28807 ( mLayoutIds , layoutId ) } \n"}, {"code": "public String toString $F72 $F31632 ( toIndentedString ) "}, {"code": "public int read $F1313 ( off , len ) throws IOException , LogException { \n\tif ( length < len ) badRead ( len ) ; \n\tlen = in . read ( b , off , len ) ; \n\tlength -= len ; \n\treturn len ; \n\t} \n"}, {"code": "public static void migrateFrom6To7 ( SQLiteDatabase db ) { \n\tString selectQuery = NUM00 + DatabaseHelper . TABLE_GRIDITEMRELATIONS ; \n\tCursor c = db . rawQuery ( selectQuery , null ) ; \n\tif $F17816 ( c ) { \n\t\tdo { \n\t\t\ttry { \n\t\t\t\tint gridItemid = c . getInt ( c . getColumnIndex ( DatabaseHelper . KEY_ID ) ) ; \n\t\t\t\tint pluginId = c . getInt ( c . getColumnIndex ( DatabaseHelper . KEY_GRIDITEMRELATIONS_PLUGIN ) ) ; \n\t\t\t\tString pluginpageUrlQuery = NUM00 + DatabaseHelper . KEY_MUNINPLUGINS_PLUGINPAGEURL + NUM00 + DatabaseHelper . TABLE_MUNINPLUGINS + NUM00 + DatabaseHelper . KEY_ID + NUM00 + pluginId ; \n\t\t\t\tCursor c2 = db . rawQuery ( pluginpageUrlQuery , null ) ; \n\t\t\t\tif $F17816 ( c2 ) { \n\t\t\t\t\tString pluginpageUrl = c2 . getString ( c2 . getColumnIndex ( DatabaseHelper . KEY_MUNINPLUGINS_PLUGINPAGEURL ) ) ; \n\t\t\t\t\t$F20904 ( values ) values . put ( DatabaseHelper . KEY_GRIDITEMRELATIONS_PLUGINPAGEURL , pluginpageUrl ) ; \n\t\t\t\t\tdb . update ( DatabaseHelper . TABLE_GRIDITEMRELATIONS , values , DatabaseHelper . KEY_ID + NUM00 , $F51969 ( String , gridItemid ) ) ; \n\t\t\t\t\t} \n\t\t\t\t$F59 ( c2 ) } \n\t\t\t$F1516 ( ex ) } \n\t\twhile $F12260 ( c ) ; \n\t\t} \n\t$F59 ( c ) } \n"}, {"code": "public static InputStream cropImage ( InputStream inputStream , int imageWidth , int imageHeight , int outWidth , int outHeight ) throws IllegalArgumentException { \n\t$F826 ( inputStream ) if ( imageWidth <= NUM00 || imageHeight <= NUM00 ) { \n\t\tthrow new IllegalArgumentException ( String . format ( NUM00 + NUM00 , imageWidth , imageHeight ) ) ; \n\t\t} \n\tif ( outWidth <= NUM00 || outHeight <= NUM00 ) { \n\t\tthrow new IllegalArgumentException ( String . format ( NUM00 + NUM00 , imageWidth , outHeight ) ) ; \n\t\t} \n\tint scaleDownSampleSize = Math . min ( imageWidth / outWidth , imageHeight / outHeight ) ; \n\tif ( scaleDownSampleSize > NUM00 ) { \n\t\timageWidth /= scaleDownSampleSize ; \n\t\timageHeight /= scaleDownSampleSize ; \n\t\t} \n\telse { \n\t\t$F5773 ( ratio , outWidth , outHeight ) if ( imageWidth < imageHeight * ratio ) { \n\t\t\toutWidth = imageWidth ; \n\t\t\t$F2118 ( outHeight , outWidth , ratio ) } \n\t\telse { \n\t\t\toutHeight = imageHeight ; \n\t\t\t$F53239 ( outWidth , outHeight , ratio ) } \n\t\t} \n\t$F30400 ( left , imageWidth , outWidth ) $F30400 ( top , imageHeight , outHeight ) InputStream compressed = null ; \n\ttry { \n\t\t$F56530 ( options ) if ( scaleDownSampleSize > NUM00 ) { \n\t\t\toptions . inSampleSize = scaleDownSampleSize ; \n\t\t\t} \n\t\tBitmap bitmap = BitmapFactory . decodeStream ( inputStream , null , options ) ; \n\t\t$F1338 ( bitmap ) Bitmap cropped = Bitmap . createBitmap ( bitmap , left , top , outWidth , outHeight ) ; \n\t\t$F121388 ( tmpOut ) if ( cropped . compress ( Bitmap . CompressFormat . PNG , DEFAULT_IMG_QUALITY , tmpOut ) ) { \n\t\t\t$F1208 ( outByteArray , tmpOut ) $F14570 ( compressed , outByteArray ) } \n\t\t} \n\tcatch ( Exception e ) $F23816 ( Log , TAG , e ) return compressed ; \n\t} \n"}, {"code": "$F1 public void datasetChanged ( DatasetChangeEvent event ) $F5795 ( fireDatasetChanged ) "}, {"code": "public void drawingComplete ( OMGraphic omg , OMAction action ) { \n\tif $F31483 ( timerButton ) $F173702 ( timer ) if ( omg instanceof OMPoint ) { \n\t\tOMPoint p = ( OMPoint ) omg ; \n\t\tGLPoint mp = new GLPoint ( p . getLat ( ) , p . getLon ( ) , p . getRadius ( ) , _BOOL ) ; \n\t\tmp . setName ( NUM00 + ( pointCount ++ ) ) ; \n\t\tmp . setStationary ( _BOOL ) ; \n\t\tmp . showPalette ( ) ; \n\t\t$F20063 ( points , mp ) manageGraphics ( ) ; \n\t\t} \n\telse if ( omg instanceof OMPoly ) { \n\t\tOMPoly poly = ( OMPoly ) omg ; \n\t\tPathGLPoint pmp = new PathGLPoint ( poly , NUM00 , _BOOL ) ; \n\t\tpmp . setName ( NUM00 + ( pointCount ++ ) ) ; \n\t\tpmp . showPalette ( ) ; \n\t\t$F20063 ( points , pmp ) manageGraphics ( ) ; \n\t\t} \n\taddNodeButton . setEnabled ( _BOOL ) ; \n\taddPathButton . setEnabled ( _BOOL ) ; \n\t} \n"}, {"code": "$F76441 ( key , cacheKey , mDigest , MessageDigest , bytesToHexString , String ) "}, {"code": "static int firstIllegalCharacter ( String source ) { \n\tfor ( $F1088 ( i , source ) ) { \n\t\tif ( isLegal ( source . charAt ( i ) ) == _BOOL ) { \n\t\t\treturn i ; \n\t\t\t} \n\t\t} \n\t$F150 } \n"}, {"code": "$F20813 ( fieldId , COOKIE , USER_ID ) "}, {"code": "public Charset charset $F72 { \n\treturn charset != null ? Charset . forName ( charset ) : null ; \n\t} \n"}, {"code": "public DriverTask deleteVolumeMirror ( VolumeMirror mirror ) { \n\t$F10635 ( LOG , mirror ) $F423222 ( task ) try { \n\t\tStorageCenterAPI api = connectionManager . getConnection ( mirror . getStorageSystemId ( ) ) ; \n\t\tScCopyMirrorMigrate cmm = api . getMirror ( mirror . getNativeId ( ) ) ; \n\t\tapi . deleteMirror ( cmm . instanceId ) ; \n\t\tapi . deleteVolume ( cmm . destinationVolume . instanceId ) ; \n\t\ttask . setStatus ( TaskStatus . READY ) ; \n\t\t} \n\tcatch ( $F193202 dex ) { \n\t\tString error = String . format ( NUM00 , mirror . getNativeId ( ) , dex ) ; \n\t\tLOG . error ( error ) ; \n\t\ttask . setFailed ( error ) ; \n\t\t} \n\treturn task ; \n\t} \n"}, {"code": "public void testConnect_BlockNoServer $F72 throws IOException $F9099 ( connectWithoutServer , disconnectAfterConnected ) "}, {"code": "public ByteArrayDataProvider $F97 ( bytes ) { \n\t$F17879 ( this , Arrays , bytes ) } \n"}, {"code": "public static String generateNativeGuidForPhysicalNAS ( String systemNativeGuid , String pNasName ) { \n\treturn String . format ( NUM00 + PHYSICAL_NAS + NUM00 , systemNativeGuid , pNasName ) ; \n\t} \n"}, {"code": "private void expire $F72 { \n\tif ( m_expire != NUM00 && m_timeExp < System . currentTimeMillis ( ) ) $F5795 ( reset ) } \n"}, {"code": "private static int determineConsecutiveBinaryCount ( String msg , int startpos , Charset encoding ) throws WriterException { \n\tfinal CharsetEncoder encoder = encoding . newEncoder ( ) ; \n\t$F1749 ( len , msg ) int idx = startpos ; \n\twhile ( idx < len ) { \n\t\t$F1280 ( ch , msg , idx ) int numericCount = NUM00 ; \n\t\twhile ( numericCount < NUM00 && isDigit ( ch ) ) { \n\t\t\tnumericCount ++ ; \n\t\t\tint i = idx + numericCount ; \n\t\t\t$F66497 ( i , len ) ch = msg . charAt ( i ) ; \n\t\t\t} \n\t\tif ( numericCount >= NUM00 ) { \n\t\t\treturn idx - startpos ; \n\t\t\t} \n\t\tch = msg . charAt ( idx ) ; \n\t\tif ( ! encoder . canEncode ( ch ) ) { \n\t\t\tthrow new WriterException ( NUM00 + ch + NUM00 + ( int ) ch + NUM00 ) ; \n\t\t\t} \n\t\tidx ++ ; \n\t\t} \n\treturn idx - startpos ; \n\t} \n"}, {"code": "$F43277 ( listener , mListeners ) "}, {"code": "private boolean apply ( GridClientPredicate $F36647 [ ] p , N n ) { \n\tif ( p != null ) { \n\t\tfor ( GridClientPredicate < ? super N > r : p ) { \n\t\t\tif ( r != null && ! r . apply ( n ) ) return _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public boolean hasName ( final String name ) { \n\tfor ( final String n : names ) $F72434 ( n , name , _BOOL ) return _BOOL ; \n\t} \n"}, {"code": "static MethodHandle makeSpreadArguments ( MethodHandle target , $F6969 spreadArgType , int spreadArgPos , int spreadArgCount ) { \n\tMethodType targetType = target . type ( ) ; \n\tfor ( $F119 ( i , spreadArgCount ) ) { \n\t\t$F6969 arg = VerifyType . spreadArgElementType ( spreadArgType , i ) ; \n\t\tif ( arg == null ) arg = $F12222 ; \n\t\ttargetType = targetType . changeParameterType ( spreadArgPos + i , arg ) ; \n\t\t} \n\ttarget = target . asType ( targetType ) ; \n\tMethodType srcType = targetType . replaceParameterTypes ( spreadArgPos , spreadArgPos + spreadArgCount , spreadArgType ) ; \n\tMethodType lambdaType = srcType . invokerType ( ) ; \n\tName [ ] names = arguments ( spreadArgCount + NUM00 , lambdaType ) ; \n\tint nameCursor = lambdaType . parameterCount ( ) ; \n\t$F2027 indexes = new int [ targetType . parameterCount ( ) ] ; \n\tfor ( int i = NUM00 , argIndex = NUM00 ; \n\ti < targetType . parameterCount ( ) + NUM00 ; \n\ti ++ , argIndex ++ ) { \n\t\t$F6969 src = lambdaType . parameterType ( i ) ; \n\t\tif ( i == spreadArgPos ) { \n\t\t\tMethodHandle aload = MethodHandles . arrayElementGetter ( spreadArgType ) ; \n\t\t\tName array = names [ argIndex ] ; \n\t\t\tnames [ nameCursor ++ ] = new Name ( Lazy . NF_checkSpreadArgument , array , spreadArgCount ) ; \n\t\t\tfor ( $F259650 ( j , spreadArgCount , i ) ) { \n\t\t\t\tindexes [ i ] = nameCursor ; \n\t\t\t\tnames [ nameCursor ++ ] = new Name ( aload , array , j ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse if ( i < indexes . length ) { \n\t\t\tindexes [ i ] = argIndex ; \n\t\t\t} \n\t\t} \n\tassert $F74408 ( nameCursor , names ) ; \n\tName [ ] targetArgs = new Name [ targetType . parameterCount ( ) ] ; \n\tfor ( int i = NUM00 ; \n\ti < targetType . parameterCount ( ) ; \n\ti ++ ) { \n\t\tint idx = indexes [ i ] ; \n\t\ttargetArgs [ i ] = names [ idx ] ; \n\t\t} \n\t$F8528 ( names ) = new Name ( target , $F2486 ( targetArgs ) ) ; \n\tLambdaForm form = new LambdaForm ( NUM00 , lambdaType . parameterCount ( ) , names ) ; \n\treturn SimpleMethodHandle . make ( srcType , form ) ; \n\t} \n"}, {"code": "public void dup2X2 $F72 { \n\tmv . visitInsn ( Opcodes . DUP2_X2 ) ; \n\t} \n"}, {"code": "$F1 public boolean contains ( Object key ) { \n\tif ( key == null ) return _map . _nullValue != null ; \n\tK1 [ ] keys = _map . _keys ; \n\tfor ( $F26259 ( i , keys ) ) { \n\t\tK1 testKey = keys [ i ] ; \n\t\t$F9506 ( key , testKey , _BOOL ) } \n\treturn _BOOL ; \n\t} \n"}, {"code": "public Expression compile ( int opPos ) throws TransformerException { \n\tint op = getOp ( opPos ) ; \n\tExpression expr = null ; \n\tswitch ( op ) { \n\t\tcase OpCodes . OP_XPATH : expr = compile ( opPos + NUM00 ) ; \n\t\t$F597 case OpCodes . OP_OR : expr = or ( opPos ) ; \n\t\t$F597 case OpCodes . OP_AND : expr = and ( opPos ) ; \n\t\t$F597 case OpCodes . OP_NOTEQUALS : expr = notequals ( opPos ) ; \n\t\t$F597 case OpCodes . OP_EQUALS : expr = equals ( opPos ) ; \n\t\t$F597 case OpCodes . OP_LTE : expr = lte ( opPos ) ; \n\t\t$F597 case OpCodes . OP_LT : expr = lt ( opPos ) ; \n\t\t$F597 case OpCodes . OP_GTE : expr = gte ( opPos ) ; \n\t\t$F597 case OpCodes . OP_GT : expr = gt ( opPos ) ; \n\t\t$F597 case OpCodes . OP_PLUS : expr = plus ( opPos ) ; \n\t\t$F597 case OpCodes . OP_MINUS : expr = minus ( opPos ) ; \n\t\t$F597 case OpCodes . OP_MULT : expr = mult ( opPos ) ; \n\t\t$F597 case OpCodes . OP_DIV : expr = div ( opPos ) ; \n\t\t$F597 case OpCodes . OP_MOD : expr = mod ( opPos ) ; \n\t\t$F597 case OpCodes . OP_NEG : expr = neg ( opPos ) ; \n\t\t$F597 case $F423881 OP_ NUM00 : expr = string ( opPos ) ; \n\t\t$F597 case $F423881 OP_BOOL : expr = bool ( opPos ) ; \n\t\t$F597 case $F423881 OP1BER : expr = number ( opPos ) ; \n\t\t$F597 case $F423881 OP_UNION : expr = union ( opPos ) ; \n\t\t$F597 case $F423881 OP_LITERAL : expr = literal ( opPos ) ; \n\t\t$F597 case $F423881 OP_VARIABLE : expr = variable ( opPos ) ; \n\t\t$F597 case $F423881 OP_GROUP : expr = group ( opPos ) ; \n\t\t$F597 case $F423881 OP1BERLIT : expr = numberlit ( opPos ) ; \n\t\t$F597 case $F423881 OP_ARGUMENT : expr = arg ( opPos ) ; \n\t\t$F597 case $F423881 OP_EXTFUNCTION : expr = compileExtension ( opPos ) ; \n\t\t$F597 case $F423881 OP_FUNCTION : expr = compileFunction ( opPos ) ; \n\t\t$F597 case $F423881 OP_LOCATIONPATH : expr = locationPath ( opPos ) ; \n\t\t$F597 case $F423881 OP_PREDICATE : expr = null ; \n\t\t$F597 case $F423881 OP_MATCHPATTERN : expr = matchPattern ( opPos + NUM00 ) ; \n\t\t$F597 case $F423881 OP_LOCATIONPATHPATTERN : expr = locationPathPattern ( opPos ) ; \n\t\t$F597 case $F423881 OP_QUO : error ( XPATHErrorResources . ER_UNKNOWN_OPCODE , new Object $F21902 ) ; \n\t\t$F597 default : error ( XPATHErrorResources . ER_UNKNOWN_OPCODE , new Object [ ] { \n\t\t\tInteger . toString ( getOp ( opPos ) ) } \n\t\t) ; \n\t\t} \n\treturn expr ; \n\t"}, {"code": "public static void replaceValue ( ExampleSet exampleSet , Attribute attribute , String oldValue , String newValue ) { \n\tif ( ! attribute . isNominal ( ) ) $F11389 NominalMapping mapping = attribute . getMapping ( ) ; \n\tif $F3057 ( oldValue ) { \n\t\tfor ( Example example : exampleSet ) { \n\t\t\tif ( Double . isNaN ( example . getValue ( attribute ) ) ) { \n\t\t\t\texample . setValue ( attribute , mapping . mapString ( newValue ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse { \n\t\tint oldIndex = mapping . getIndex ( oldValue ) ; \n\t\tif ( oldIndex < NUM00 ) $F11389 if $F3057 ( newValue ) { \n\t\t\tfor ( Example example : exampleSet ) { \n\t\t\t\tint index = mapping . getIndex ( example . getValueAsString ( attribute ) ) ; \n\t\t\t\tif ( index == oldIndex ) { \n\t\t\t\t\texample . setValue ( attribute , Double . NaN ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F665 } \n\t\tint newIndex = mapping . getIndex ( newValue ) ; \n\t\tif ( newIndex >= NUM00 ) { \n\t\t\tfor ( Example example : exampleSet ) { \n\t\t\t\tint index = mapping . getIndex ( example . getValueAsString ( attribute ) ) ; \n\t\t\t\tif ( index == oldIndex ) { \n\t\t\t\t\texample . setValue ( attribute , newIndex ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tmapping . setMapping ( newValue , oldIndex ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "protected void encode ( ByteSequencesWriter writer , ByteArrayDataOutput output , $F96 buffer , BytesRef spare , BytesRef payload , Set $F123079 contexts , long weight ) throws IOException { \n\tint requiredLength = spare . length + NUM00 + ( ( hasPayloads ) ? NUM00 + payload . length : NUM00 ) ; \n\tif ( hasContexts ) { \n\t\tfor ( BytesRef ctx : contexts ) { \n\t\t\trequiredLength += NUM00 + ctx . length ; \n\t\t\t} \n\t\trequiredLength += NUM00 ; \n\t\t} \n\tif ( requiredLength >= buffer . length ) { \n\t\t$F71720 ( buffer , ArrayUtil , requiredLength ) } \n\toutput . reset ( buffer ) ; \n\toutput . writeBytes ( spare . bytes , spare . offset , spare . length ) ; \n\tif ( hasContexts ) { \n\t\tfor ( BytesRef ctx : contexts ) { \n\t\t\toutput . writeBytes ( ctx . bytes , ctx . offset , ctx . length ) ; \n\t\t\toutput . writeShort ( ( short ) ctx . length ) ; \n\t\t\t} \n\t\toutput . writeShort ( ( short ) contexts . size ( ) ) ; \n\t\t} \n\tif ( hasPayloads ) { \n\t\toutput . writeBytes ( payload . bytes , payload . offset , payload . length ) ; \n\t\toutput . writeShort ( ( short ) payload . length ) ; \n\t\t} \n\toutput . writeLong ( weight ) ; \n\twriter . write ( buffer , NUM00 , output . getPosition ( ) ) ; \n\t} \n"}, {"code": "public void printEntryDetails ( Writer w ) { \n\tint linesadded = - NUM00 ; \n\tString title ; \n\ttry { \n\t\tHardcopyWriter ww = ( HardcopyWriter ) w ; \n\t\tint textSpace = ww . getCharactersPerLine ( ) - indentWidth - NUM00 ; \n\t\ttitle = NUM00 ; \n\t\tif ( ( textSpaceWithIcon != NUM00 ) && ( linesadded < blanks ) ) { \n\t\t\tlinesadded = writeWrappedComment ( w , _id , title , textSpaceWithIcon ) + linesadded ; \n\t\t\t} \n\t\telse { \n\t\t\tlinesadded = writeWrappedComment ( w , _id , title , textSpace ) + linesadded ; \n\t\t\t} \n\t\ttitle = NUM00 ; \n\t\tif ( ( textSpaceWithIcon != NUM00 ) && ( linesadded < blanks ) ) { \n\t\t\tlinesadded = writeWrappedComment ( w , _fileName != null ? _fileName : NUM00 , title , textSpaceWithIcon ) + linesadded ; \n\t\t\t} \n\t\telse { \n\t\t\tlinesadded = writeWrappedComment ( w , _fileName != null ? _fileName : NUM00 , title , textSpace ) + linesadded ; \n\t\t\t} \n\t\tif ( ! $F2979 ( _roadName ) ) { \n\t\t\ttitle = NUM00 ; \n\t\t\tif ( ( textSpaceWithIcon != NUM00 ) && ( linesadded < blanks ) ) { \n\t\t\t\tlinesadded = writeWrappedComment ( w , _roadName , title , textSpaceWithIcon ) + linesadded ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tlinesadded = writeWrappedComment ( w , _roadName , title , textSpace ) + linesadded ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( ! $F2979 ( _roadNumber ) ) { \n\t\t\ttitle = NUM00 ; \n\t\t\tif ( ( textSpaceWithIcon != NUM00 ) && ( linesadded < blanks ) ) { \n\t\t\t\tlinesadded = writeWrappedComment ( w , _roadNumber , title , textSpaceWithIcon ) + linesadded ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tlinesadded = writeWrappedComment ( w , _roadNumber , title , textSpace ) + linesadded ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( ! $F2979 ( _mfg ) ) { \n\t\t\ttitle = NUM00 ; \n\t\t\tif ( ( textSpaceWithIcon != NUM00 ) && ( linesadded < blanks ) ) { \n\t\t\t\tlinesadded = writeWrappedComment ( w , _mfg , title , textSpaceWithIcon ) + linesadded ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tlinesadded = writeWrappedComment ( w , _mfg , title , textSpace ) + linesadded ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( ! $F2979 ( _owner ) ) { \n\t\t\ttitle = NUM00 ; \n\t\t\tif ( ( textSpaceWithIcon != NUM00 ) && ( linesadded < blanks ) ) { \n\t\t\t\tlinesadded = writeWrappedComment ( w , _owner , title , textSpaceWithIcon ) + linesadded ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tlinesadded = writeWrappedComment ( w , _owner , title , textSpace ) + linesadded ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( ! $F2979 ( _model ) ) { \n\t\t\ttitle = NUM00 ; \n\t\t\tif ( ( textSpaceWithIcon != NUM00 ) && ( linesadded < blanks ) ) { \n\t\t\t\tlinesadded = writeWrappedComment ( w , _model , title , textSpaceWithIcon ) + linesadded ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tlinesadded = writeWrappedComment ( w , _model , title , textSpace ) + linesadded ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( ! $F2979 ( _dccAddress ) ) { \n\t\t\t$F105801 ( w , newLine ) String s = NUM00 + _dccAddress ; \n\t\t\t$F170077 ( w , s ) linesadded ++ ; \n\t\t\t} \n\t\tif ( ! $F2979 ( _comment ) ) { \n\t\t\tfor ( int i = NUM00 ; \n\t\t\ti < ( blanks - linesadded ) ; \n\t\t\ti ++ ) { \n\t\t\t\t$F105801 ( w , newLine ) } \n\t\t\tif ( blanks != NUM00 ) { \n\t\t\t\tblanks = NUM00 ; \n\t\t\t\t} \n\t\t\ttitle = NUM00 ; \n\t\t\tlinesadded = writeWrappedComment ( w , _comment , title , textSpace ) + linesadded ; \n\t\t\t} \n\t\tif ( ! $F2979 ( _decoderModel ) ) { \n\t\t\ttitle = NUM00 ; \n\t\t\tif ( ( textSpaceWithIcon != NUM00 ) && ( linesadded < blanks ) ) { \n\t\t\t\tlinesadded = writeWrappedComment ( w , _decoderModel , title , textSpaceWithIcon ) + linesadded ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tlinesadded = writeWrappedComment ( w , _decoderModel , title , textSpace ) + linesadded ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( ! $F2979 ( _decoderFamily ) ) { \n\t\t\ttitle = NUM00 ; \n\t\t\tif ( ( textSpaceWithIcon != NUM00 ) && ( linesadded < blanks ) ) { \n\t\t\t\tlinesadded = writeWrappedComment ( w , _decoderFamily , title , textSpaceWithIcon ) + linesadded ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tlinesadded = writeWrappedComment ( w , _decoderFamily , title , textSpace ) + linesadded ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( ! $F2979 ( _decoderComment ) ) { \n\t\t\tfor ( int i = NUM00 ; \n\t\t\ti < ( blanks - linesadded ) ; \n\t\t\ti ++ ) { \n\t\t\t\t$F105801 ( w , newLine ) } \n\t\t\tif ( blanks != NUM00 ) { \n\t\t\t\tblanks = NUM00 ; \n\t\t\t\t} \n\t\t\ttitle = NUM00 ; \n\t\t\tlinesadded = writeWrappedComment ( w , _decoderComment , title , textSpace ) + linesadded ; \n\t\t\t} \n\t\t$F105801 ( w , newLine ) for ( int i = - NUM00 ; \n\t\ti < ( blanks - linesadded ) ; \n\t\ti ++ ) { \n\t\t\t$F105801 ( w , newLine ) } \n\t\t} \n\tcatch ( IOException e ) $F17663 ( log , e ) } \n"}, {"code": "private int skipQuotedString ( String str , int pos ) { \n\t$F1749 ( n , str ) pos += NUM00 ; \n\twhile ( pos < n ) { \n\t\tif $F11983 ( str , pos ) { \n\t\t\tif ( $F179049 ( pos , n , str ) ) { \n\t\t\t\tpos += NUM00 ; \n\t\t\t\t$F598 } \n\t\t\treturn pos + NUM00 ; \n\t\t\t} \n\t\tpos += NUM00 ; \n\t\t} \n\treturn n ; \n\t} \n"}, {"code": "private static void addNewSegment ( LinkedList < DNASegment > segments , Event event , HashMap < Integer , DNAStrand > strands , int firstJulianDay , int minStart , int minMinutes ) { \n\tif ( event . startDay > event . endDay ) { \n\t\tLog . wtf ( TAG , $F368 ( event ) ) ; \n\t\t} \n\tif ( event . startDay != event . endDay ) { \n\t\tEvent lhs = new Event $F72 ; \n\t\tlhs . color = event . color ; \n\t\tlhs . startDay = event . startDay ; \n\t\tlhs . startTime = event . startTime ; \n\t\tlhs . endDay = lhs . startDay ; \n\t\tlhs . endTime = DAY_IN_MINUTES - NUM00 ; \n\t\twhile ( lhs . startDay != event . endDay ) { \n\t\t\taddNewSegment ( segments , lhs , strands , firstJulianDay , minStart , minMinutes ) ; \n\t\t\tlhs . startDay ++ ; \n\t\t\tlhs . endDay = lhs . startDay ; \n\t\t\tlhs . startTime = NUM00 ; \n\t\t\tminStart = NUM00 ; \n\t\t\t} \n\t\tlhs . endTime = event . endTime ; \n\t\tevent = lhs ; \n\t\t} \n\tDNASegment segment = new DNASegment $F72 ; \n\tint dayOffset = ( event . startDay - firstJulianDay ) * DAY_IN_MINUTES ; \n\tint endOfDay = dayOffset + DAY_IN_MINUTES - NUM00 ; \n\tsegment . startMinute = Math . max ( dayOffset + event . startTime , minStart ) ; \n\tint minEnd = Math . min ( segment . startMinute + minMinutes , endOfDay ) ; \n\tsegment . endMinute = Math . max ( dayOffset + event . endTime , minEnd ) ; \n\tif ( segment . endMinute > endOfDay ) { \n\t\tsegment . endMinute = endOfDay ; \n\t\t} \n\tsegment . color = event . color ; \n\tsegment . day = event . startDay ; \n\tsegments . add ( segment ) ; \n\tDNAStrand strand = getOrCreateStrand ( strands , segment . color ) ; \n\tstrand . count ++ ; \n\t} \n"}, {"code": "private DatagramPacket [ ] encodeMulticastRequest ( final MulticastRequest req ) throws IOException { \n\tfinal Discovery disco = getDiscovery ( multicastRequestConstraints . chooseProtocolVersion ( ) ) ; \n\t$F102316 ( packets ) EncodeIterator ei = disco . encodeMulticastRequest ( req , multicastRequestConstraints . getMulticastMaxPacketSize ( DEFAULT_MAX_PACKET_SIZE ) , multicastRequestConstraints . getUnfulfilledConstraints ( ) ) ; \n\twhile $F2921 ( ei ) { \n\t\ttry { \n\t\t\tpackets . addAll ( Arrays . asList ( ei . next ( ) ) ) ; \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\tlogger . log ( ( e instanceof UnsupportedConstraintException ) ? Levels . HANDLED : Level . INFO , NUM00 , e ) ; \n\t\t\t} \n\t\t} \n\tif $F2979 ( packets ) { \n\t\tthrow new DiscoveryProtocolException $F580 ; \n\t\t} \n\treturn ( DatagramPacket [ ] ) packets . toArray ( new DatagramPacket $F2313 ( packets ) ) ; \n\t} \n"}, {"code": "public FeatureTypeConstraintModel ( FeatureTypeConstraintModelUpdateInterface parent ) { \n\tthis . parentObj = parent ; \n\t$F220523 ( columnList , Localisation ) $F220523 ( columnList , Localisation ) } \n"}, {"code": "protected void deleteDb ( String name ) $F359906 ( deleteDb , getBaseDir , name ) "}, {"code": "public void removeAtRange ( int index , int size ) { \n\tfinal int end = Math . min ( mSize , index + size ) ; \n\tfor ( int i = index ; \n\ti < end ; \n\ti ++ ) { \n\t\tremoveAt ( i ) ; \n\t\t} \n\t} \n"}, {"code": "private void pullEvent $F72 { \n\tfinal int newScrollValue ; \n\tfinal int itemDimension ; \n\tfinal float initialMotionValue , lastMotionValue ; \n\tswitch ( getFilteredPullToRefreshScrollDirection ( ) ) { \n\t\tcase HORIZONTAL : initialMotionValue = mInitialMotionX ; \n\t\tlastMotionValue = mLastMotionX ; \n\t\t$F597 case VERTICAL : $F1267 initialMotionValue = mInitialMotionY ; \n\t\tlastMotionValue = mLastMotionY ; \n\t\t$F597 } \n\tswitch ( mCurrentMode ) { \n\t\tcase PULL_FROM_END : newScrollValue = Math . round ( Math . max ( initialMotionValue - lastMotionValue , NUM00 ) / mFriction ) ; \n\t\titemDimension = getFooterSize ( ) ; \n\t\t$F597 case GOOGLE_STYLE : newScrollValue = Math . round ( Math . min ( initialMotionValue - lastMotionValue , NUM00 ) / mFriction ) ; \n\t\titemDimension = getGoogleStyleViewSize ( ) ; \n\t\t$F597 case PULL_FROM_START : $F1267 newScrollValue = Math . round ( Math . min ( initialMotionValue - lastMotionValue , NUM00 ) / mFriction ) ; \n\t\titemDimension = getHeaderSize ( ) ; \n\t\t$F597 } \n\tsetHeaderScroll ( newScrollValue ) ; \n\tif ( newScrollValue != NUM00 && ! isRefreshing ( ) ) { \n\t\tfloat scale = Math . abs ( newScrollValue ) / ( float ) itemDimension ; \n\t\tswitch ( mCurrentMode ) { \n\t\t\tcase PULL_FROM_END : mFooterLayout . onPull ( scale ) ; \n\t\t\t$F597 case GOOGLE_STYLE : mGoogleStyleViewLayout . onPull ( scale ) ; \n\t\t\tmGoogleStyleProgressLayout . onPull ( scale ) ; \n\t\t\t$F597 case PULL_FROM_START : $F1267 mHeaderLayout . onPull ( scale ) ; \n\t\t\t$F597 } \n\t\tif ( mState != State . PULL_TO_REFRESH && itemDimension >= Math . abs ( newScrollValue ) ) { \n\t\t\tsetState ( State . PULL_TO_REFRESH ) ; \n\t\t\t} \n\t\telse if ( mState == State . PULL_TO_REFRESH && itemDimension < Math . abs ( newScrollValue ) ) { \n\t\t\tsetState ( State . RELEASE_TO_REFRESH ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public StatMonitorHandler $F72 $F845 "}, {"code": "public void addElements $F10212 ( values ) { \n\tfinal $F1986 tempArray = new double [ numElements + values . length + NUM00 ] ; \n\t$F21535 ( System , internalArray , startIndex , tempArray , numElements ) $F41363 ( System , values , tempArray , numElements ) internalArray = tempArray ; \n\tstartIndex = NUM00 ; \n\tnumElements += values . length ; \n\t} \n"}, {"code": "public void registerUnregisteredNamespaces $F72 { \n\tfor ( $F2277 ( i , m_unregisteredExtensions ) ) { \n\t\t$F123 ( ns , m_unregisteredExtensions , i ) ExtensionNamespaceSupport extNsSpt = defineJavaNamespace ( ns ) ; \n\t\t$F67023 ( extNsSpt , m_extensions ) } \n\t} \n"}, {"code": "$F1 public $F987 listOptions $F72 { \n\t$F20795 ( result ) $F1006 ( result ) $F1000 ( result ) $F9007 ( result ) $F9010 ( result , Collections , super ) $F1007 ( result ) } \n"}, {"code": "public $F42106 addSourceVolumeSnapshots $F72 { \n\t$F28584 blockSnapshots = Lists . newArrayList ( ) ; \n\t$F42106 $F8690 ( snapshotsMap ) ; \n\tfor ( URI volumeId : uris ( volumeIds ) ) { \n\t\t$F141871 ( snapshots , getSnapshots , volumeId ) blockSnapshots . addAll ( snapshots ) ; \n\t\tsnapshotsMap . put ( volumeId , snapshots ) ; \n\t\t} \n\tif $F5973 ( blockSnapshots ) { \n\t\tBlockStorageUtils . addVolumesToConsistencyGroup ( consistencyGroup , blockSnapshots ) ; \n\t\t} \n\treturn snapshotsMap ; \n\t} \n"}, {"code": "public static void logInitiator ( Initiator initiator , NetworkLite network ) { \n\tString networkName = ( network != null ? network . getLabel ( ) : NUM00 ) ; \n\t_log . info ( String . format ( NUM00 , initiator . getInitiatorPort ( ) , initiator . getHostName ( ) , networkName ) ) ; \n\t} \n"}, {"code": "$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel ) "}, {"code": "public static final Criterion and ( Criterion one , Criterion two ) { \n\tfinal List < Criterion > criteria = new ArrayList < Criterion > $F72 ; \n\tcriteria . add ( one ) ; \n\tcriteria . add ( two ) ; \n\treturn new ConjunctionCriterion ( Conjunction . AND , criteria ) ; \n\t} \n"}, {"code": "public CCMenuItem ( Object rec , String cb ) { \n\ttargetCallback = rec ; \n\tselector = cb ; \n\tsetAnchorPoint ( CGPoint . make ( NUM00 , NUM00 ) ) ; \n\tinvocation = null ; \n\tif ( rec != null && cb != null ) { \n\t\t$F20850 ( cls , rec ) try { \n\t\t\tinvocation = cls . getMethod ( cb , $F12222 ) ; \n\t\t\t} \n\t\tcatch ( SecurityException e ) $F302 ( e ) catch ( NoSuchMethodException e ) $F302 ( e ) } \n\tisEnabled_ = _BOOL ; \n\tisSelected_ = _BOOL ; \n\t} \n"}, {"code": "public void addChildElement ( XMLElement child , boolean addAfterNewLine ) throws Exception { \n\taddChildElementAt ( child , - NUM00 , addAfterNewLine ) ; \n\t} \n"}, {"code": "public void editText ( VisualItem item , String attribute , Rectangle r ) { \n\t$F8801 ( m_editing , stopEditing ) $F19101 ( txt , item , attribute ) m_editItem = item ; \n\tm_editAttribute = attribute ; \n\tColor tc = ColorLib . getColor ( item . getTextColor ( ) ) ; \n\tColor fc = ColorLib . getColor ( item . getFillColor ( ) ) ; \n\tm_editor . setForeground ( tc ) ; \n\tm_editor . setBackground ( fc ) ; \n\teditText ( txt , r ) ; \n\t} \n"}, {"code": "public static Column column ( final String id , final String title , final int width , final int doublePrecision ) { \n\treturn new Column ( id , title , Math . max ( width , title . length ( ) ) , doublePrecision ) ; \n\t} \n"}, {"code": "public void printCount ( String kind , int count ) { \n\tif ( count != NUM00 ) { \n\t\tString key ; \n\t\tif ( count == NUM00 ) key = NUM00 + kind ; \n\t\telse key = NUM00 + kind + NUM00 ; \n\t\tlog . printLines ( WriterKind . ERROR , key , String . valueOf ( count ) ) ; \n\t\tlog . flush ( Log . WriterKind . ERROR ) ; \n\t\t} \n\t} \n"}, {"code": "$F13591 ( str , flags , decode ) "}, {"code": "public static float screenToScroll ( float x , float warpSize ) { \n\tif ( x <= NUM00 ) $F1082 if ( x >= warpSize ) return x + warpSize ; \n\treturn ( float ) Math . sqrt ( x * warpSize ) * NUM00 ; \n\t} \n"}, {"code": "$F31396 ( str , retval , ch , i , s , Integer ) "}, {"code": "public synchronized void recordStatistics ( QueryStatistic statistic ) $F207 ( queryStatistics , statistic ) "}, {"code": "protected $F1986 randomSubRange ( double boundStart , double boundLen ) { \n\tif ( boundLen >= NUM00 && usually ( ) ) { \n\t\t$F131763 ( intBoundStart , Math , boundStart ) int intBoundEnd = $F66964 ( boundStart , boundLen ) ; \n\t\tint intBoundLen = intBoundEnd - intBoundStart ; \n\t\tint newLen = ( int ) randomGaussianMeanMax ( intBoundLen / NUM00 , intBoundLen ) ; \n\t\tint newStart = intBoundStart + randomInt ( intBoundLen - newLen ) ; \n\t\t$F264542 ( newStart , newLen ) } \n\telse { \n\t\tdouble newLen = randomGaussianMeanMax ( boundLen / NUM00 , boundLen ) ; \n\t\tdouble newStart = boundStart + ( boundLen - newLen == NUM00 ? NUM00 : ( randomDouble ( ) % ( boundLen - newLen ) ) ) ; \n\t\t$F264542 ( newStart , newLen ) } \n\t} \n"}, {"code": "private DateTimeZone generateTimeZone ( String timeZoneId , DateTimeZone systemTimeZone ) { \n\t$F1933 ( timeZoneId , systemTimeZone ) try { \n\t\treturn DateTimeZone . forID ( timeZoneId ) ; \n\t\t} \n\tcatch ( IllegalArgumentException ignored ) { \n\t\t$F87857 ( LOG , INVALID_TIME_ZONE , timeZoneId ) throw new BadApiRequestException $F22032 ( INVALID_TIME_ZONE , timeZoneId ) ; \n\t\t} \n\t} \n"}, {"code": "protected String toString ( $F20725 ( strings ) ) { \n\tint rows = strings . length ; \n\tint columns = strings . length <= NUM00 ? NUM00 : strings [ NUM00 ] . length ; \n\t$F280 ( total ) $F280 ( s ) for ( $F119 ( row , rows ) ) { \n\t\t$F4910 ( s ) for ( $F119 ( column , columns ) ) { \n\t\t\t$F53015 ( s , strings , row , column ) if ( column < columns - NUM00 ) s . append ( columnSeparator ) ; \n\t\t\t} \n\t\ttotal . append ( s ) ; \n\t\tif ( row < rows - NUM00 ) total . append ( rowSeparator ) ; \n\t\t} \n\t$F92 ( total ) } \n"}, {"code": "public void checkWarehouse ( boolean sbf ) { \n\tif ( warehouse == null ) { \n\t\t$F22806 ( logger ) warehouse = new VPFAutoFeatureGraphicWarehouse $F72 ; \n\t\t} \n\t} \n"}, {"code": "public double maxDist ( SpatialComparable mbr1 , SpatialComparable mbr2 ) { \n\tfinal int dim1 = mbr1 . getDimensionality ( ) , dim2 = mbr2 . getDimensionality ( ) ; \n\tfinal int mindim = ( dim1 < dim2 ) ? dim1 : dim2 ; \n\tdouble agg = NUM00 ; \n\tfor ( $F119 ( d , mindim ) ) { \n\t\tdouble d1 = mbr1 . getMax ( d ) - mbr2 . getMin ( d ) ; \n\t\tdouble d2 = mbr2 . getMax ( d ) - mbr1 . getMin ( d ) ; \n\t\tdouble delta = d1 > d2 ? d1 : d2 ; \n\t\tagg += delta * delta ; \n\t\t} \n\tfor ( int d = mindim ; \n\td < dim1 ; \n\td ++ ) { \n\t\tdouble d1 = Math . abs ( mbr1 . getMin ( d ) ) , d2 = Math . abs ( mbr1 . getMax ( d ) ) ; \n\t\tdouble delta = d1 > d2 ? d1 : d2 ; \n\t\tagg += delta * delta ; \n\t\t} \n\tfor ( int d = mindim ; \n\td < dim2 ; \n\td ++ ) { \n\t\tdouble d1 = Math . abs ( mbr2 . getMin ( d ) ) , d2 = Math . abs ( mbr2 . getMax ( d ) ) ; \n\t\tdouble delta = d1 > d2 ? d1 : d2 ; \n\t\tagg += delta * delta ; \n\t\t} \n\t$F41531 ( Math , agg ) } \n"}, {"code": "public static void createLesson ( $F1113 final Lesson lesson , $F1113 final VirtualFile courseDir , $F1113 final File resourceRoot , $F1113 final Project project ) throws IOException { \n\tString lessonDirName = EduNames . LESSON + Integer . toString ( lesson . getIndex ( ) ) ; \n\tVirtualFile lessonDir = courseDir . createChildDirectory ( project , lessonDirName ) ; \n\tfinal List $F67199 taskList = lesson . getTaskList ( ) ; \n\tfor ( int i = NUM00 ; \n\ti <= taskList . size ( ) ; \n\ti ++ ) { \n\t\tTask task = taskList . get ( i - NUM00 ) ; \n\t\ttask . setIndex ( i ) ; \n\t\tcreateTask ( task , lessonDir , new File ( resourceRoot , lessonDir . getName ( ) ) , project ) ; \n\t\t} \n\t} \n"}, {"code": "protected void rehash $F72 { \n\tint oldCapacity = table . length ; \n\tCacheEntry oldTable [ ] = table ; \n\tint newCapacity = oldCapacity * NUM00 + NUM00 ; \n\tCacheEntry newTable [ ] = new CacheEntry [ newCapacity ] ; \n\t$F53239 ( threshold , newCapacity , loadFactor ) table = newTable ; \n\tfor ( $F26144 ( i , oldCapacity ) ) { \n\t\tfor ( CacheEntry old = oldTable [ i ] ; \n\t\told != null ; \n\t\t) { \n\t\t\tCacheEntry e = old ; \n\t\t\told = old . next ; \n\t\t\tif ( e . check ( ) != null ) { \n\t\t\t\tint index = ( e . hash & NUM00 ) % newCapacity ; \n\t\t\t\te . next = newTable [ index ] ; \n\t\t\t\tnewTable [ index ] = e ; \n\t\t\t\t} \n\t\t\telse count -- ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void append $F24576 ( utf8 , start , len ) { \n\tsetCapacity ( length + len , _BOOL ) ; \n\tSystem . arraycopy ( utf8 , start , bytes , length , len ) ; \n\tlength += len ; \n\t} \n"}, {"code": "$F29442 ( cls , makeLogTag ) "}, {"code": "private void handleError ( GCPStatsDataHolder statsData , Throwable e ) { \n\tlogSevere ( e ) ; \n\tstatsData . error = e ; \n\tstatsData . stage = StatsCollectionStage . ERROR ; \n\thandleStatsRequest ( statsData ) ; \n\t} \n"}, {"code": "public $F14638 insert ( int offset , double d ) $F65298 ( insert , offset , Double , d ) "}, {"code": "public Object castToType ( int t , XPathContext support ) throws $F1872 { \n\tObject result ; \n\tswitch ( t ) { \n\t\tcase CLASS_ NUM00 : result = str ( ) ; \n\t\t$F597 case CLASS1BER : result = new Double ( num ( ) ) ; \n\t\t$F597 case CLASS_NODESET : result = iter ( ) ; \n\t\t$F597 case CLASS_BOOLEAN : result = new Boolean ( bool ( ) ) ; \n\t\t$F597 case CLASS_UNKNOWN : result = m_obj ; \n\t\t$F597 default : error ( XPATHErrorResources . ER_CANT_CONVERT_TO_TYPE , new Object [ ] { \n\t\t\tgetTypeString ( ) , Integer . toString ( t ) } \n\t\t) ; \n\t\tresult = null ; \n\t\t} \n\treturn result ; \n\t"}, {"code": "public static boolean areMsCapiStoresSupported $F72 { \n\treturn Security . getProvider ( MS_CAPI . jce ( ) ) != null ; \n\t} \n"}, {"code": "$F38752 ( _BOOL ) "}, {"code": "public boolean isPassthroughSupported ( String mimeType ) { \n\treturn audioCapabilities != null && audioCapabilities . supportsEncoding ( getEncodingForMimeType ( mimeType ) ) ; \n\t} \n"}, {"code": "String internalsprintf ( final Object s ) { \n\tfinal String s2 ; \n\tif $F37111 ( conversionCharacter ) { \n\t\t$F57584 ( s2 , printSFormat , s ) ; \n\t\t} \n\telse { \n\t\tthrow new IllegalArgumentException $F54019 ( conversionCharacter ) ; \n\t\t} \n\treturn s2 ; \n\t} \n"}, {"code": "public T firstItem $F72 { \n\tif $F45555 ( mDataList ) $F1337 $F38159 ( mDataList ) } \n"}, {"code": "public void addRequestProperty ( String field , String newValue ) { \n\tcheckNotConnected ( ) ; \n\t$F896 ( field ) } \n"}, {"code": "public double doOperation $F72 throws OperatorFailedException { \n\t$F1986 mean = sccs . getMode ( ) ; \n\t$F1986 currentValue = parameter . getParameterValues ( ) ; \n\t$F9662 ( newValue , dim ) $F87079 ( updateSet ) if ( setSizeMean != - NUM00 ) { \n\t\tfinal int listLength = Poisson . nextPoisson ( setSizeMean ) ; \n\t\twhile $F10255 ( updateSet , listLength ) { \n\t\t\tint newInt = MathUtils . nextInt ( parameter . getDimension ( ) ) ; \n\t\t\t$F2201 ( updateSet , newInt ) } \n\t\t} \n\telse { \n\t\tfor ( $F1316 ( i , dim ) ) $F207 ( updateSet , i ) } \n\tdouble logq = NUM00 ; \n\tfor ( Integer i : updateSet ) { \n\t\tnewValue [ i ] = mean [ i ] + scaleFactor * MathUtils . nextGaussian ( ) ; \n\t\tif ( UPDATE_ALL ) { \n\t\t\tparameter . setParameterValueQuietly ( i , newValue [ i ] ) ; \n\t\t\t} \n\t\telse { \n\t\t\tparameter . setParameterValue ( i , newValue [ i ] ) ; \n\t\t\t} \n\t\tlogq += ( NormalDistribution . logPdf ( currentValue [ i ] , mean [ i ] , scaleFactor ) - NormalDistribution . logPdf ( newValue [ i ] , mean [ i ] , scaleFactor ) ) ; \n\t\t} \n\tif ( UPDATE_ALL ) { \n\t\tparameter . setParameterValueNotifyChangedAll ( NUM00 , parameter . getParameterValue ( NUM00 ) ) ; \n\t\t} \n\treturn logq ; \n\t} \n"}, {"code": "public Object load ( URI uri ) throws IOException { \n\tInputStreamReader src = null ; \n\ttry { \n\t\tsrc = new FileReader $F15780 ( uri ) ; \n\t\treturn xstream . fromXML ( src ) ; \n\t\t} \n\tfinally { \n\t\t$F162760 ( src ) } \n\t} \n"}, {"code": "private synchronized void sendPendingState $F72 { \n\tif $F5973 ( mPendingClients ) { \n\t\tfinal Message [ ] messages = new Message [ ] { \n\t\t\tSantaServiceMessages . getBeginFullStateMessage ( ) , SantaServiceMessages . getSwitchOffMessage ( mPreferences . getSwitchOff ( ) ) , getTimeUpdateMessage ( ) , SantaServiceMessages . getCastDisabledMessage ( mPreferences . getCastDisabled ( ) ) , SantaServiceMessages . getGamesMessage ( mPreferences . getGumballDisabled ( ) , mPreferences . getJetpackDisabled ( ) , mPreferences . getMemoryDisabled ( ) , mPreferences . getRocketDisabled ( ) , mPreferences . getDancerDisabled ( ) , mPreferences . getSnowdownDisabled ( ) ) , SantaServiceMessages . getDestinationPhotoMessage ( mPreferences . getDestinationPhotoDisabled ( ) ) , SantaServiceMessages . getStateMessage ( mState ) , SantaServiceMessages . getVideosMessage ( mPreferences . getVideos ( ) ) } \n\t\t; \n\t\tfor ( $F2277 ( i , mPendingClients ) ) { \n\t\t\tfinal Messenger messenger = mPendingClients . get ( i ) ; \n\t\t\ttry { \n\t\t\t\tfor ( Message msg : messages ) { \n\t\t\t\t\tmessenger . send ( msg ) ; \n\t\t\t\t\t} \n\t\t\t\tmClients . add ( messenger ) ; \n\t\t\t\t} \n\t\t\t$F31965 mPendingClients . remove ( i ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void fetchChunk ( BulkIdParam input , $F5675 results ) { \n\t$F5675 items = getBulkResources ( input ) ; \n\tfor ( T item : items ) $F207 ( results , item ) } \n"}, {"code": "public static void moveDirectoryToDirectory $F42859 ( src , destDir , createDestDir ) throws IOException $F219037 ( src , destDir , createDestDir , moveDirectory ) "}, {"code": "public Shape createCheckMark ( final int x , final int y , final int w , final int h ) { \n\tdouble xf = w / NUM00 ; \n\tdouble hf = h / NUM00 ; \n\t$F2268 ( path ) path . moveTo ( x , y + NUM00 * hf ) ; \n\tpath . lineTo ( x + NUM00 * xf , y + NUM00 * hf ) ; \n\tpath . lineTo ( x + NUM00 * xf , y + NUM00 * hf ) ; \n\tpath . lineTo ( x + NUM00 * xf , y ) ; \n\tpath . lineTo ( x + NUM00 * xf , y ) ; \n\tpath . lineTo ( x + NUM00 * xf , y + NUM00 * hf ) ; \n\t$F2272 ( path ) return path ; \n\t} \n"}, {"code": "public static ResponseData parse ( String responseData ) { \n\t$F1384 ( index , responseData ) String mainData , extraData ; \n\t$F151471 ( index , mainData , responseData , extraData ) $F151475 ( fields , TextUtils , mainData , Pattern ) if $F8830 ( fields ) $F26853 $F151481 ( data ) data . extra = extraData ; \n\t$F151483 ( data , Integer , fields ) $F151485 ( data , Integer , fields ) $F151486 ( data , fields ) $F151487 ( data , fields ) $F151488 ( data , fields ) $F151490 ( data , Long , fields ) return data ; \n\t} \n"}, {"code": "public int noOfTabs $F72 { \n\treturn m_curWinTab . getTabCount ( ) ; \n\t} \n"}, {"code": "public void testExceptionally_exceptionalCompletionActionFailed $F72 { \n\tfor ( $F2703 ( createIncomplete , _BOOL ) ) { \n\t\t$F127413 ( a ) $F181556 ( ex1 ) $F181556 ( ex2 ) $F127411 ( f ) if ( ! createIncomplete ) f . completeExceptionally ( ex1 ) ; \n\t\tfinal $F70219 g = f . exceptionally ( null ) ; \n\t\tif ( createIncomplete ) f . completeExceptionally ( ex1 ) ; \n\t\tcheckCompletedWithWrappedException ( g , ex2 ) ; \n\t\tcheckCompletedExceptionally ( f , ex1 ) ; \n\t\t$F127421 ( assertEquals , a ) } \n\t} \n"}, {"code": "private static void close ( Closeable closeable ) { \n\t$F29065 ( closeable ) } \n"}, {"code": "public static String convertTimestampToDateStringCompact ( boolean useUTC , long milli ) { \n\t$F25205 ( date , milli ) $F108456 ( sourceFormat ) sourceFormat . setTimeZone ( useUTC ? TimeZone . getTimeZone ( NUM00 ) : TimeZone . getDefault ( ) ) ; \n\t$F5330 ( sourceFormat , date ) } \n"}, {"code": "protected synchronized void superposeBitSet ( FixedBitSet incomingBitSet , double weight ) { \n\tweight = ( int ) Math . round ( weight * Math . pow ( NUM00 , BINARY_VECTOR_DECIMAL_PLACES ) ) ; \n\t$F7546 ( weight ) totalNumberOfVotes . set ( totalNumberOfVotes . get ( ) + ( int ) weight ) ; \n\tint logFloorOfWeight = ( int ) ( $F267069 ( Math , weight ) ) ; \n\tif $F18523 ( logFloorOfWeight , votingRecord ) { \n\t\twhile ( logFloorOfWeight > NUM00 ) { \n\t\t\tsuperposeBitSetFromRowFloor ( incomingBitSet , logFloorOfWeight ) ; \n\t\t\tweight = weight - $F59200 ( Math , logFloorOfWeight ) ; \n\t\t\tlogFloorOfWeight = ( int ) ( $F267069 ( Math , weight ) ) ; \n\t\t\t} \n\t\t} \n\tfor ( $F119 ( x , weight ) ) superposeBitSetFromRowFloor ( incomingBitSet , NUM00 ) ; \n\t} \n"}, {"code": "public final double tanHalfAngle $F72 { \n\treturn Math . tan ( NUM00 * this . radians ) ; \n\t} \n"}, {"code": "abstract Future < AsynchronousSocketChannel > implAccept ( Object attachment , CompletionHandler < AsynchronousSocketChannel , Object > handler ) ; \n"}, {"code": "public void parseSignaturesFile ( URL url ) throws $F79407 { \n\tparseSignaturesFile ( url . openStream ( ) , url . toString ( ) ) ; \n\t} \n"}, {"code": "public void addFlare ( Flare flare ) { \n\tflares . addElement ( flare ) ; \n\tprocessGameEvent ( new GameBoardChangeEvent ( this ) ) ; \n\t} \n"}, {"code": "public static void objectStringNonRecursive ( @ Unretained Object obj , StringBuilder sb ) { \n\tif $F2485 ( obj ) { \n\t\t$F84 ( sb ) boolean first = _BOOL ; \n\t\tfor ( Object o : $F2486 ( obj ) ) { \n\t\t\tif ( ! first ) $F20352 ( sb , o ) else { \n\t\t\t\tfirst = _BOOL ; \n\t\t\t\tobjectStringWithBytes ( o , sb ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F84 ( sb ) } \n\telse { \n\t\tobjectStringWithBytes ( obj , sb ) ; \n\t\t} \n\t} \n"}, {"code": "public void readOSM ( File file ) { \n\tif $F3428 ( file ) { \n\t\tstreetLayer . openOSM ( file ) ; \n\t\t} \n\telse $F22715 ( LOG ) } \n"}, {"code": "public void startElement ( StylesheetHandler handler , String uri , String localName , String rawName , Attributes attributes ) throws SAXException { \n\tString msg = NUM00 ; \n\tif ( ! ( handler . getElemTemplateElement ( ) instanceof Stylesheet ) ) { \n\t\tmsg = NUM00 ; \n\t\thandler . error ( msg , new SAXException ( msg ) ) ; \n\t\t} \n\tsuper . startElement ( handler , uri , localName , rawName , attributes ) ; \n\t$F163382 ( val , attributes ) $F1384 ( indexOfColon , val ) if ( indexOfColon > NUM00 ) $F845 else { \n\t\tmsg = NUM00 ; \n\t\thandler . error ( msg , new SAXException ( msg ) ) ; \n\t\t} \n\t} \n"}, {"code": "public void write $F24576 ( buffer , offset , length ) throws IOException $F21537 ( _file , buffer , offset , length ) "}, {"code": "public static boolean canInteract ( Role issuer , Role target ) { \n\tif ( issuer . getGuild ( ) != target . getGuild ( ) ) $F824 return target . getPosition ( ) < issuer . getPosition ( ) ; \n\t} \n"}, {"code": "public Webster $F72 throws BindException { \n\tthis . port = Integer . getInteger ( WEBSTER_PORT , NUM00 ) ; \n\tinitialize ( ) ; \n\t} \n"}, {"code": "public boolean willThrowExceptionIfKeyWasNotFound $F72 { \n\treturn throwex ; \n\t} \n"}, {"code": "public void testComputeLocationWhenUberwarPackaging $F72 throws Exception { \n\tDeployable deployableElement = new Deployable $F72 ; \n\tdeployableElement . setGroupId ( NUM00 ) ; \n\tdeployableElement . setArtifactId ( NUM00 ) ; \n\t$F146148 ( deployableElement ) String location = deployableElement . computeLocation ( createDefaultProject ( NUM00 , null ) ) ; \n\tassertTrue ( location . endsWith ( NUM00 ) ) ; \n\t} \n"}, {"code": "public Response createResponse ( String responseString ) throws $F105392 { \n\tif ( responseString == null ) return new SIPResponse $F72 ; \n\tStringMsgParser smp = new StringMsgParser $F72 ; \n\tSIPMessage sipMessage = smp . parseSIPMessage ( responseString . getBytes ( ) , _BOOL , _BOOL , null ) ; \n\tif ( ! ( sipMessage instanceof SIPResponse ) ) throw new ParseException ( responseString , NUM00 ) ; \n\treturn ( SIPResponse ) sipMessage ; \n\t} \n"}, {"code": "private ODEStateAndDerivative state ( double t ) { \n\treturn new ODEStateAndDerivative ( t , $F1990 , $F1990 ) ; \n\t} \n"}, {"code": "public static $F6969 findCommonElementType ( Collection collection ) { \n\t$F115472 ( isEmpty , collection ) $F20126 ( candidate ) for ( Object val : collection ) { \n\t\tif ( val != null ) { \n\t\t\tif ( candidate == null ) { \n\t\t\t\t$F215645 ( candidate , val ) } \n\t\t\telse if ( candidate != val . getClass ( ) ) $F1337 } \n\t\t} \n\treturn candidate ; \n\t} \n"}, {"code": "private static void decodeHanziSegment $F11771 ( bits , result , count ) throws FormatException { \n\t$F11774 ( count , bits , FormatException ) $F11778 ( buffer , count ) int offset = NUM00 ; \n\t$F11794 ( count , twoBytes , bits , assembledTwoBytes , buffer , offset ) try $F11799 ( result , buffer , StringUtils ) catch ( UnsupportedEncodingException uee ) $F2172 ( FormatException ) } \n"}, {"code": "protected void initPingIntervalMilli $F72 { \n\tString pingIntervalMilliParam = getInitParameter ( NUM00 ) ; \n\tsetPingIntervalMilli ( ( pingIntervalMilliParam == null ) ? DEFAULT_PING_INTERVAL_MILLI : Integer . parseInt ( pingIntervalMilliParam ) ) ; \n\tif ( isDebug ( ) ) { \n\t\tlog ( NUM00 + getPingIntervalMilli ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "public boolean ask ( final String queryStr , String externalQueryId ) throws Exception { \n\tfinal RepositoryConnection cxn = cxn ( ) ; \n\tUUID queryId = null ; \n\ttry { \n\t\tfinal BooleanQuery query = ( BooleanQuery ) cxn . prepareBooleanQuery ( QueryLanguage . SPARQL , queryStr ) ; \n\t\tsetMaxQueryTime ( query ) ; \n\t\tif ( query instanceof BigdataSailBooleanQuery && cxn instanceof BigdataSailRepositoryConnection ) { \n\t\t\tfinal BigdataSailBooleanQuery bdtq = ( BigdataSailBooleanQuery ) query ; \n\t\t\tqueryId = setupQuery ( ( BigdataSailRepositoryConnection ) cxn , bdtq . getASTContainer ( ) , QueryType . ASK , externalQueryId ) ; \n\t\t\t} \n\t\tfinal boolean result = query . evaluate ( ) ; \n\t\treturn result ; \n\t\t} \n\tfinally { \n\t\t$F25302 ( queryId , finalizeQuery ) } \n\t} \n"}, {"code": "$F1431 private static int find ( $F131 arr , net . sourceforge . retroweaver . harmony . runtime . java . lang . Comparable val , int bnd , int l , int r ) { \n\tint m = l ; \n\tint d = NUM00 ; \n\twhile ( m <= r ) { \n\t\tif ( val . compareTo ( arr [ m ] ) > bnd ) { \n\t\t\tl = m + NUM00 ; \n\t\t\t} \n\t\telse { \n\t\t\tr = m - NUM00 ; \n\t\t\t$F597 } \n\t\tm += d ; \n\t\td <<= NUM00 ; \n\t\t} \n\twhile ( l <= r ) { \n\t\t$F62498 ( m , l , r ) if ( val . compareTo ( arr [ m ] ) > bnd ) { \n\t\t\tl = m + NUM00 ; \n\t\t\t} \n\t\telse { \n\t\t\tr = m - NUM00 ; \n\t\t\t} \n\t\t} \n\treturn l - NUM00 ; \n\t} \n"}, {"code": "$F156045 ( msg , x , super , this ) "}, {"code": "public static String asHex $F27539 ( bytes , separator ) { \n\t$F83 ( sb ) for ( $F1139 ( i , bytes ) ) { \n\t\tString code = Integer . toHexString ( bytes [ i ] & NUM00 ) ; \n\t\tif ( ( bytes [ i ] & NUM00 ) < NUM00 ) $F86 ( sb ) sb . append ( code ) ; \n\t\tif ( separator != null && i < bytes . length - NUM00 ) $F288 ( sb , separator ) } \n\t$F92 ( sb ) } \n"}, {"code": "public void runTest $F72 throws Throwable { \n\tDocument doc ; \n\tNodeList elementList ; \n\tNode nameNode ; \n\tCharacterData child ; \n\tString badString ; \n\t$F236 ( doc , load , _BOOL ) $F237 ( elementList , doc ) $F238 ( nameNode , elementList ) $F241 ( child , nameNode ) { \n\t\tboolean success = _BOOL ; \n\t\ttry { \n\t\t\tbadString = child . substringData ( NUM00 , NUM00 ) ; \n\t\t\t} \n\t\t$F250 ( success , ex , DOMException ) assertTrue ( NUM00 , success ) ; \n\t\t} \n\t} \n"}, {"code": "public String toString $F72 $F62107 ( String , val ) "}, {"code": "private static void CallStaticVoidMethodV $F4272 ( env , classJREF , methodID , argAddress ) throws Exception { \n\t$F4274 ( traceJNI , VM ) $F4275 ( RuntimeEntrypoints ) try { \n\t\tJNIHelpers . invokeWithVarArg ( methodID , argAddress , TypeReference . Void ) ; \n\t\t} \n\t$F61482 ( traceJNI , unexpected , System , env ) } \n"}, {"code": "public static Connection createConnection ( boolean autoCommit , int trxLevel ) { \n\tConnection conn = s_cc . getConnection ( autoCommit , trxLevel ) ; \n\tif ( CLogMgt . isLevelFinest ( ) ) $F845 try { \n\t\tif ( conn != null && conn . getAutoCommit ( ) != autoCommit ) $F322689 ( autoCommit ) } \n\t$F31184 return conn ; \n\t} \n"}, {"code": "private boolean updateStatementData ( StatementData sdata , Matcher matcher , String toRegex ) { \n\tif ( transformTables ) return _BOOL ; \n\t$F397 ( matcher , _BOOL ) String schema = sdata . getDefaultSchema ( ) ; \n\t$F397 ( schema , _BOOL ) matcher . reset ( schema ) ; \n\tif $F24133 ( matcher ) { \n\t\tString oldSchema = schema ; \n\t\tsdata . setDefaultSchema ( matcher . replaceAll ( toRegex ) ) ; \n\t\tif $F585 ( logger ) logger . debug ( NUM00 + oldSchema + NUM00 + sdata . getDefaultSchema ( ) ) ; \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void testShiftLeft1 $F72 { \n\t$F17888 int aSign = NUM00 ; \n\tint number = NUM00 ; \n\tbyte $F3018 = { \n\t\tNUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 } \n\t; \n\t$F3023 ( aNumber , aSign , aBytes ) $F17893 ( result , aNumber , number ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) } \n"}, {"code": "public void stopIfRequired $F72 { \n\tif $F16508 ( System , stopAt ) $F10763 } \n"}, {"code": "private void linkAccount ( final String principalId , final NameID nameId ) throws SAML2MetaException , AuthenticationException { \n\tfinal String spEntityId = metaManager . getEntityByMetaAlias ( metaAlias ) ; \n\ttry { \n\t\tNameIDInfo info = new NameIDInfo ( spEntityId , entityName , nameId , SAML2Constants . SP_ROLE , _BOOL ) ; \n\t\tDEBUG . message ( NUM00 , principalId , nameId . getValue ( ) ) ; \n\t\tif ( shouldPersistNameID ( spEntityId ) ) { \n\t\t\tAccountUtils . setAccountFederation ( info , principalId ) ; \n\t\t\t} \n\t\tprincipal = new SAML2Principal ( principalId ) ; \n\t\t} \n\tcatch ( SAML2Exception e ) { \n\t\tthrow new AuthenticationException ( BUNDLE_NAME , NUM00 , $F3297 ) ; \n\t\t} \n\t} \n"}, {"code": "private void enableActions $F72 { \n\trestoreAction . setEnabled ( frame . isMaximum ( ) || frame . isIcon ( ) ) ; \n\tmaximizeAction . setEnabled ( ( frame . isMaximizable ( ) && ! frame . isMaximum ( ) && ! frame . isIcon ( ) ) || ( frame . isMaximizable ( ) && frame . isIcon ( ) ) ) ; \n\ticonifyAction . setEnabled ( frame . isIconifiable ( ) && ! frame . isIcon ( ) ) ; \n\tcloseAction . setEnabled ( frame . isClosable ( ) ) ; \n\tsizeAction . setEnabled ( _BOOL ) ; \n\tmoveAction . setEnabled ( _BOOL ) ; \n\t} \n"}, {"code": "private $F3803 addRules ( int filterId , $F3803 rules , boolean useCosmetics ) { \n\tInputStream inputStream = null ; \n\tInputStreamReader inputStreamReader = null ; \n\tBufferedReader reader = null ; \n\ttry { \n\t\tString fileName = getOrCreateFilterFile ( filterId ) ; \n\t\tinputStream = context . openFileInput ( fileName ) ; \n\t\t$F144822 ( inputStreamReader , inputStream ) $F26608 ( reader , inputStreamReader ) $F27015 ( line , reader ) while ( line != null ) { \n\t\t\tif ( useCosmetics || ! FilterRule . isCosmeticRule ( line ) ) $F207 ( rules , line ) $F36243 ( line , reader ) } \n\t\treturn rules ; \n\t\t} \n\tcatch ( Exception ex ) { \n\t\t$F59427 ( log , filterId , ex ) throw new RuntimeException ( NUM00 + filterId , ex ) ; \n\t\t} \n\tfinally { \n\t\tIOUtils . closeQuietly ( inputStream ) ; \n\t\tIOUtils . closeQuietly ( inputStreamReader ) ; \n\t\tIOUtils . closeQuietly ( reader ) ; \n\t\t} \n\t} \n"}, {"code": "public static String convertToHexString $F97 ( bytes ) { \n\tint size = bytes . length ; \n\tStringBuffer buffer = new StringBuffer ( size * NUM00 ) ; \n\tfor ( $F119 ( i , size ) ) { \n\t\tint x = bytes [ i ] ; \n\t\t$F106839 ( x ) $F21991 ( tmp , Integer , x ) if $F1277 ( tmp ) $F84 ( buffer ) buffer . append ( tmp ) ; \n\t\t} \n\t$F92 ( buffer ) } \n"}, {"code": "public OrderedTask ( String identifier , Step ... steps ) $F254297 ( this , identifier , Arrays , steps ) "}, {"code": "public void randomize ( List < CellIndex > cellIndices ) { \n\t$F6822 ( rand ) int range = getUpperBound ( ) - getLowerBound ( ) ; \n\tfor ( CellIndex cellIndex : cellIndices ) { \n\t\tint row = cellIndex . row ; \n\t\tint col = cellIndex . col ; \n\t\tdouble value = ( rand . nextDouble ( ) * range ) + getLowerBound ( ) ; \n\t\tsetLogicalValue ( row , col , value , _BOOL ) ; \n\t\t} \n\tfireTableDataChanged ( ) ; \n\t} \n"}, {"code": "private void readResponseHeaders $F37875 ( state , innerState , response ) throws StopRequest { \n\tHeader header = response . getFirstHeader ( NUM00 ) ; \n\tif ( header != null ) { \n\t\tinnerState . mHeaderContentDisposition = header . getValue ( ) ; \n\t\t} \n\t$F37882 ( header , response ) if ( header != null ) { \n\t\tinnerState . mHeaderContentLocation = header . getValue ( ) ; \n\t\t} \n\t$F37882 ( header , response ) if ( header != null ) { \n\t\tinnerState . mHeaderETag = header . getValue ( ) ; \n\t\t} \n\tString headerTransferEncoding = null ; \n\t$F37882 ( header , response ) if ( header != null ) $F37892 ( headerTransferEncoding , header ) String headerContentType = null ; \n\t$F37882 ( header , response ) if ( header != null ) { \n\t\t$F37891 ( headerContentType , header ) if $F1264 ( headerContentType ) { \n\t\t\tthrow new StopRequest ( DownloaderService . STATUS_FILE_DELIVERED_INCORRECTLY , NUM00 ) ; \n\t\t\t} \n\t\t} \n\tif ( headerTransferEncoding == null ) { \n\t\t$F37882 ( header , response ) if ( header != null ) { \n\t\t\tinnerState . mHeaderContentLength = header . getValue ( ) ; \n\t\t\tlong contentLength = Long . parseLong ( innerState . mHeaderContentLength ) ; \n\t\t\tif ( contentLength != - NUM00 && contentLength != mInfo . mTotalBytes ) { \n\t\t\t\tLog . e ( Constants . TAG , NUM00 ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse { \n\t\tif ( Constants . LOGVV ) { \n\t\t\t$F37918 ( Log , Constants ) } \n\t\t} \n\tif ( Constants . LOGVV ) { \n\t\tLog . v ( Constants . TAG , NUM00 + innerState . mHeaderContentDisposition ) ; \n\t\tLog . v ( Constants . TAG , NUM00 + innerState . mHeaderContentLength ) ; \n\t\tLog . v ( Constants . TAG , NUM00 + innerState . mHeaderContentLocation ) ; \n\t\tLog . v ( Constants . TAG , NUM00 + innerState . mHeaderETag ) ; \n\t\tLog . v ( Constants . TAG , NUM00 + headerTransferEncoding ) ; \n\t\t} \n\tboolean noSizeInfo = innerState . mHeaderContentLength == null && ( headerTransferEncoding == null || $F14071 ( headerTransferEncoding ) ) ; \n\tif ( noSizeInfo ) { \n\t\tthrow new StopRequest ( DownloaderService . STATUS_HTTP_DATA_ERROR , NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "public void addAuditory ( int id ) $F207 ( mAuditoryFeedback , id ) "}, {"code": "$F16698 ( path , uriPrefix ) "}, {"code": "public static void constantAttributes ( SimpleMethod method , Element element , String ... attributeNames ) throws ValidationException { \n\tfor ( String name : attributeNames ) { \n\t\t$F57219 ( attributeValue , element , name ) if ( ! MiniLangUtil . isConstantAttribute ( attributeValue ) ) $F129854 ( handleError , name , method , element ) } \n\t} \n"}, {"code": "private void bindViewType ( WXComponent component ) { \n\tint id = generateViewType ( component ) ; \n\tif ( mViewTypes == null ) { \n\t\tmViewTypes = new SparseArray $F200 $F72 ; \n\t\t} \n\tArrayList < WXComponent > mTypes = mViewTypes . get ( id ) ; \n\t$F64950 ( mTypes , mViewTypes , id ) mTypes . add ( component ) ; \n\t} \n"}, {"code": "protected boolean isEmptyValue ( Object rawValue ) { \n\treturn rawValue == null || StringUtils . isBlank ( String . valueOf ( rawValue ) ) ; \n\t} \n"}, {"code": "public CipherTextIvMac $F55962 ( c , i , h ) { \n\t$F14613 ( cipherText , c ) $F7057 ( System , c , cipherText ) $F14613 ( iv , i ) $F7057 ( System , i , iv ) $F14613 ( mac , h ) $F7057 ( System , h , mac ) } \n"}, {"code": "public static MasterPrivateKey createFromEncryptedSeed $F84589 ( passphrase , encryptedSeed ) throws HyperLedgerException { \n\ttry { \n\t\t$F96 key = SCrypt . generate ( passphrase . getBytes ( NUM00 ) , BITCOIN_SEED , NUM00 , NUM00 , NUM00 , NUM00 ) ; \n\t\t$F89939 ( keyspec , key ) if $F11845 ( encryptedSeed ) { \n\t\t\tthrow new HyperLedgerException $F580 ; \n\t\t\t} \n\t\t$F105480 ( cipher , Cipher ) $F116470 ( cipher , Cipher , keyspec ) return create ( cipher . doFinal ( encryptedSeed ) ) ; \n\t\t} \n\tcatch ( UnsupportedEncodingException | NoSuchPaddingException | NoSuchProviderException | NoSuchAlgorithmException | InvalidKeyException | BadPaddingException | IllegalBlockSizeException e ) { \n\t\tthrow new HyperLedgerException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public static List < JsonPointer > filter $F74419 ( fields ) { \n\tfinal List < JsonPointer > $F2086 ( result , fields ) ; \n\tfor ( final String field : fields ) { \n\t\tresult . add ( new JsonPointer ( field ) ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public boolean applyFtProxy $F72 { \n\treturn method . isAnnotationPresent ( AstrixFaultToleranceProxy . class ) ; \n\t} \n"}, {"code": "private void notifyChange ( int previous , int current ) { \n\tmSoundPlayer . play ( $F113059 ( mSoundId ) ) ; \n\tif ( mOnValueChangeListener != null ) { \n\t\tmOnValueChangeListener . onValueChange ( this , previous , mValue ) ; \n\t\t} \n\t} \n"}, {"code": "public static double atan2 ( double y , double x ) { \n\tif $F89880 ( Double , x , y ) $F6623 ( Double ) if ( y == NUM00 ) { \n\t\tfinal double result = x * y ; \n\t\tfinal double invx = NUM00 / x ; \n\t\tfinal double invy = NUM00 / y ; \n\t\tif ( invx == NUM00 ) { \n\t\t\tif ( x > NUM00 ) { \n\t\t\t\treturn y ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\treturn copySign ( Math . PI , y ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( x < NUM00 || invx < NUM00 ) { \n\t\t\tif ( y < NUM00 || invy < NUM00 ) { \n\t\t\t\treturn - Math . PI ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\treturn Math . PI ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\treturn result ; \n\t\t\t} \n\t\t} \n\tif ( y == Double . POSITIVE_INFINITY ) { \n\t\tif ( x == Double . POSITIVE_INFINITY ) { \n\t\t\treturn Math . PI * F_1_4 ; \n\t\t\t} \n\t\tif ( x == Double . NEGATIVE_INFINITY ) { \n\t\t\treturn Math . PI * F_3_4 ; \n\t\t\t} \n\t\treturn Math . PI * F_1_2 ; \n\t\t} \n\tif ( y == Double . NEGATIVE_INFINITY ) { \n\t\tif ( x == Double . POSITIVE_INFINITY ) { \n\t\t\treturn - Math . PI * F_1_4 ; \n\t\t\t} \n\t\tif ( x == Double . NEGATIVE_INFINITY ) { \n\t\t\treturn - Math . PI * F_3_4 ; \n\t\t\t} \n\t\treturn - Math . PI * F_1_2 ; \n\t\t} \n\tif ( x == Double . POSITIVE_INFINITY ) { \n\t\tif ( y > NUM00 || NUM00 / y > NUM00 ) $F1083 if ( y < NUM00 || NUM00 / y < NUM00 ) $F7629 } \n\tif ( x == Double . NEGATIVE_INFINITY ) { \n\t\tif ( y > NUM00 || NUM00 / y > NUM00 ) { \n\t\t\treturn Math . PI ; \n\t\t\t} \n\t\tif ( y < NUM00 || NUM00 / y < NUM00 ) { \n\t\t\treturn - Math . PI ; \n\t\t\t} \n\t\t} \n\tif ( x == NUM00 ) { \n\t\tif ( y > NUM00 || NUM00 / y > NUM00 ) { \n\t\t\treturn Math . PI * F_1_2 ; \n\t\t\t} \n\t\tif ( y < NUM00 || NUM00 / y < NUM00 ) { \n\t\t\treturn - Math . PI * F_1_2 ; \n\t\t\t} \n\t\t} \n\tfinal double r = y / x ; \n\tif $F28102 ( Double , r ) { \n\t\treturn atan ( r , NUM00 , x < NUM00 ) ; \n\t\t} \n\tdouble ra = doubleHighPart ( r ) ; \n\tdouble rb = r - ra ; \n\tfinal double xa = doubleHighPart ( x ) ; \n\tfinal double xb = x - xa ; \n\trb += $F275825 ( y , ra , xa , xb , rb ) / x ; \n\tfinal double temp = ra + rb ; \n\trb = - ( temp - ra - rb ) ; \n\tra = temp ; \n\tif ( ra == NUM00 ) { \n\t\tra = copySign ( NUM00 , y ) ; \n\t\t} \n\tfinal double result = atan ( ra , rb , x < NUM00 ) ; \n\treturn result ; \n\t} \n"}, {"code": "public int count $F72 { \n\treturn $F2908 ( comments ) ; \n\t} \n"}, {"code": "private boolean isAnyPackageFromListInstalled $F24643 ( packages ) { \n\tboolean result = _BOOL ; \n\t$F45547 ( pm , mContext ) for ( String packageName : packages ) { \n\t\ttry { \n\t\t\tpm . getPackageInfo ( packageName , NUM00 ) ; \n\t\t\tQLog . e ( packageName + NUM00 ) ; \n\t\t\tresult = _BOOL ; \n\t\t\t} \n\t\tcatch ( PackageManager . NameNotFoundException e ) $F1448 } \n\treturn result ; \n\t} \n"}, {"code": "public static String makeSystemName ( String type , int bitNum ) { \n\tString nName = NUM00 ; \n\tif ( $F1264 ( type ) && $F1264 ( type ) && $F1264 ( type ) ) { \n\t\t$F17662 ( log , type ) return ( nName ) ; \n\t\t} \n\tif ( ( bitNum < NUM00 ) || ( $F3057 ( type ) && ( bitNum > NUM00 ) ) || ( bitNum > NUM00 ) ) { \n\t\t$F17662 ( log , bitNum ) return ( nName ) ; \n\t\t} \n\tnName = NUM00 + type + Integer . toString ( bitNum ) ; \n\treturn ( nName ) ; \n\t} \n"}, {"code": "public static void remove $F72 $F38599 ( AUTH_TOKEN ) "}, {"code": "public abstract boolean conflicts ( CopyJob other ) ; \n"}, {"code": "public TreeNode deserialize ( String data ) { \n\tDeque $F4 $F19827 ( nodes ) ; \n\tnodes . addAll ( Arrays . asList ( data . split ( SPLITER ) ) ) ; \n\treturn buildTree ( nodes ) ; \n\t} \n"}, {"code": "public void fill ( int fromIndex , int toIndex , short val ) { \n\tif ( toIndex > _pos ) { \n\t\tensureCapacity ( toIndex ) ; \n\t\t_pos = toIndex ; \n\t\t} \n\tArrays . fill ( _data , fromIndex , toIndex , val ) ; \n\t} \n"}, {"code": "private void runPendingRequests $F72 { \n\tint maxStartId = - NUM00 ; \n\tBillingRequest request ; \n\twhile ( ( request = mPendingRequests . peek ( ) ) != null ) { \n\t\tif ( request . runIfConnected ( ) ) { \n\t\t\t$F7042 ( mPendingRequests ) if ( maxStartId < request . getStartId ( ) ) { \n\t\t\t\tmaxStartId = request . getStartId ( ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse $F10990 ( bindToMarketBillingService ) } \n\tif ( maxStartId >= NUM00 ) { \n\t\tif ( Consts . DEBUG ) { \n\t\t\t$F26334 ( Log , TAG , maxStartId ) } \n\t\tstopSelf ( maxStartId ) ; \n\t\t} \n\t} \n"}, {"code": "public static void removeAttributeDefaultValues ( String serviceName , String schemaType , String attrName , Set defaultValues , boolean isOrgAttrSchema ) throws UpgradeException { \n\tString classMethod = NUM00 ; \n\tServiceSchema ss = null ; \n\tif $F6299 ( debug ) { \n\t\t$F69245 ( debug , classMethod , serviceName ) $F69245 ( debug , classMethod , schemaType ) $F69245 ( debug , classMethod , attrName ) $F69245 ( debug , classMethod , defaultValues ) $F69245 ( debug , classMethod , isOrgAttrSchema ) } \n\ttry { \n\t\tif ( isOrgAttrSchema ) { \n\t\t\tServiceSchemaManager sm = getServiceSchemaManager ( serviceName ) ; \n\t\t\tss = sm . getOrganizationCreationSchema ( ) ; \n\t\t\t} \n\t\telse { \n\t\t\tss = getServiceSchema ( serviceName , null , schemaType ) ; \n\t\t\t} \n\t\tif ( ss != null ) { \n\t\t\tAttributeSchema attrSchema = ss . getAttributeSchema ( attrName ) ; \n\t\t\tfor ( $F2774 ( i , defaultValues ) ) { \n\t\t\t\t$F2778 ( defaultValue , i ) attrSchema . removeDefaultValue ( defaultValue ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tcatch ( SMSException sme ) $F69256 ( debug , classMethod , sme ) catch ( SSOException ssoe ) $F69256 ( debug , classMethod , ssoe ) } \n"}, {"code": "public void unlock ( final T tx ) { \n\tif ( DEBUG ) $F980 ( log ) $F790 ( lock ) if ( DEBUG ) $F980 ( log ) try { \n\t\tassertNotDead ( ) ; \n\t\tassertOwnsLock ( tx ) ; \n\t\tif ( queue . remove ( ) != tx ) $F10176 if ( waitsFor != null ) { \n\t\t\tfinal $F13085 itr = queue . iterator ( ) ; \n\t\t\tsynchronized ( waitsFor ) { \n\t\t\t\twhile $F2921 ( itr ) { \n\t\t\t\t\tfinal T pendingTx = itr . next ( ) ; \n\t\t\t\t\ttry { \n\t\t\t\t\t\twaitsFor . removeEdge ( pendingTx , tx ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\tcatch ( Throwable t ) { \n\t\t\t\t\t\tlog . warn ( $F1573 ( t ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tif $F2979 ( queue ) { \n\t\t\tif ( INFO ) $F973 ( log ) $F665 } \n\t\tif ( INFO ) $F973 ( log ) $F39065 ( available ) } \n\tfinally { \n\t\t$F704 ( lock ) if ( DEBUG ) $F980 ( log ) } \n\t} \n"}, {"code": "public boolean isUpdateAvailable $F72 $F40347 ( availableUpdate ) "}, {"code": "$F1 public String toStringSummary $F72 { \n\tString result ; \n\tString titles ; \n\tint resultsetLength ; \n\tint i ; \n\tint j ; \n\t$F4158 ( m_NonSigWins ) result = NUM00 ; \n\ttitles = NUM00 ; \n\tresultsetLength = NUM00 + Math . max ( ( int ) ( Math . log ( getColCount ( ) ) / Math . log ( NUM00 ) ) , ( int ) ( Math . log ( getRowCount ( ) ) / Math . log ( NUM00 ) ) ) ; \n\tfor ( $F95978 ( i , getColCount ) ) { \n\t\t$F18649 ( getColHidden , i ) titles += NUM00 + Utils . padLeft ( NUM00 + getSummaryTitle ( i ) , resultsetLength * NUM00 + NUM00 ) ; \n\t\t} \n\tresult += titles + NUM00 ; \n\tfor ( $F95978 ( i , getColCount ) ) { \n\t\t$F18649 ( getColHidden , i ) for ( $F95978 ( j , getColCount ) ) { \n\t\t\t$F18649 ( getColHidden , j ) result += NUM00 ; \n\t\t\tif ( j == i ) { \n\t\t\t\tresult += Utils . padLeft ( NUM00 , resultsetLength * NUM00 + NUM00 ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tresult += Utils . padLeft ( NUM00 + m_NonSigWins [ i ] [ j ] + NUM00 + m_Wins [ i ] [ j ] + NUM00 , resultsetLength * NUM00 + NUM00 ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tresult += NUM00 + getSummaryTitle ( i ) + NUM00 + getColName ( i ) + NUM00 ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public int read ( BufferedInputStream is ) { \n\tinit ( ) ; \n\tif ( is != null ) { \n\t\tin = is ; \n\t\treadHeader ( ) ; \n\t\t$F218592 ( err , readContents , frameCount , status , STATUS_FORMAT_ERROR ) } \n\telse { \n\t\tstatus = STATUS_OPEN_ERROR ; \n\t\t} \n\t$F29053 ( is ) return status ; \n\t} \n"}, {"code": "private static int determineType $F97 ( bytes ) { \n\tint offset = NUM00 ; \n\tif ( bytes . length >= NUM00 && $F117560 ( bytes ) && $F117560 ( bytes ) && $F117560 ( bytes ) ) { \n\t\toffset += NUM00 ; \n\t\t} \n\twhile ( offset < bytes . length && bytes [ offset ] == NUM00 || bytes [ offset ] == NUM00 || bytes [ offset ] == NUM00 || bytes [ offset ] == NUM00 || bytes [ offset ] == NUM00 ) { \n\t\toffset ++ ; \n\t\t} \n\treturn determineType ( new String ( bytes , offset , Math . min ( NUM00 , bytes . length - offset ) ) ) ; \n\t} \n"}, {"code": "public void fixHttpsURLConnection $F72 { \n\tHttpsURLConnection . setDefaultSSLSocketFactory ( sslContext . getSocketFactory ( ) ) ; \n\t} \n"}, {"code": "$F1 public DataTable sample ( int newSize ) { \n\tint rowCount = getRowNumber ( ) ; \n\t$F24599 ( rowCount , newSize , this ) $F4120 ( sampledSelectedIndices , rowCount ) for ( $F1316 ( i , rowCount ) ) $F14245 ( sampledSelectedIndices , i ) $F24605 ( rng ) int swapIdx ; \n\tint tmpValue ; \n\tfor ( $F1316 ( i , rowCount ) ) { \n\t\tswapIdx = rng . nextInt ( rowCount ) ; \n\t\ttmpValue = sampledSelectedIndices [ swapIdx ] ; \n\t\tsampledSelectedIndices [ swapIdx ] = sampledSelectedIndices [ i ] ; \n\t\tsampledSelectedIndices [ i ] = tmpValue ; \n\t\t} \n\tDataTableView sampledDataTable = new DataTableView ( this ) ; \n\t$F24610 sampledSelectedIndicesVector = new $F24610 ( newSize ) ; \n\tfor ( $F1316 ( i , newSize ) ) $F24617 ( sampledSelectedIndicesVector , sampledSelectedIndices , i ) sampledDataTable . setSelectedIndices ( sampledSelectedIndicesVector ) ; \n\treturn sampledDataTable ; \n\t} \n"}, {"code": "private synchronized void block ( boolean tf ) { \n\tif ( tf ) { \n\t\ttry { \n\t\t\tif ( m_filterThread . isAlive ( ) && m_state != IDLE ) $F5795 ( wait ) } \n\t\t$F34690 } \n\telse $F5795 ( notifyAll ) } \n"}, {"code": "public void cancel $F72 { \n\tif ( mUploadOperation == null ) { \n\t\tif $F27748 ( mUploadStarted ) { \n\t\t\t$F13527 ( Log_OC , TAG ) mCancellationRequested . set ( _BOOL ) ; \n\t\t\t} \n\t\telse $F13955 ( Log_OC , TAG ) } \n\telse { \n\t\t$F13527 ( Log_OC , TAG ) $F65148 ( mUploadOperation ) } \n\t} \n"}, {"code": "public void testNegNegFirstShorter $F72 { \n\t$F50446 $F92469 int aSign = - NUM00 ; \n\tint bSign = - NUM00 ; \n\tbyte $F3018 = { \n\t\t- NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 } \n\t; \n\t$F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F37344 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , result ) } \n"}, {"code": "public static void mergeFiles ( final File file1 , final File file2 , final File outputFile ) { \n\tif ( ! isReadable ( file1 ) || ! isReadable ( file2 ) || $F1905 ( outputFile ) && ! makeDirsForFile ( outputFile ) ) $F932 try { \n\t\t$F4647 ( fis1 , file1 ) $F4647 ( fis2 , file2 ) SequenceInputStream sis = new SequenceInputStream ( fis1 , fis2 ) ; \n\t\t$F4649 ( fos , outputFile ) int count ; \n\t\t$F12496 ( temp ) $F29757 ( count , sis , temp , fos ) FileUtils . sync ( fos ) ; \n\t\t$F59 ( fos ) $F59 ( sis ) $F59 ( fis1 ) $F59 ( fis2 ) } \n\t$F35546 ( e ) $F12241 ( e ) } \n"}, {"code": "public static SnippetSet parse ( final File file ) throws ParseException { \n\treturn parse ( fileInputSupplier ( file . getParentFile ( ) ) , file . getName ( ) ) ; \n\t} \n"}, {"code": "public static String readFile $F17798 ( context , name ) throws IOException { \n\ttry ( InputStream in = context . getResourceAsStream ( name ) ) { \n\t\t$F1338 ( in ) return new String ( ByteStreams . toByteArray ( in ) , ENC ) ; \n\t\t} \n\tcatch ( IOException e ) $F19606 ( name , e ) } \n"}, {"code": "long ptsToTimeUs ( long pts ) { \n\tif ( lastPts != Long . MIN_VALUE ) { \n\t\tlong closestWrapCount = $F152631 ( lastPts , MAX_PTS ) / MAX_PTS ; \n\t\tlong ptsWrapBelow = pts + $F78421 ( MAX_PTS , closestWrapCount ) ; \n\t\tlong ptsWrapAbove = pts + ( MAX_PTS * closestWrapCount ) ; \n\t\tpts = Math . abs ( ptsWrapBelow - lastPts ) < Math . abs ( ptsWrapAbove - lastPts ) ? ptsWrapBelow : ptsWrapAbove ; \n\t\t} \n\tlong timeUs = ( pts * C . MICROS_PER_SECOND ) / NUM00 ; \n\tif ( lastPts == Long . MIN_VALUE ) { \n\t\ttimestampOffsetUs = firstSampleTimestamp - timeUs ; \n\t\t} \n\tlastPts = pts ; \n\treturn timeUs + timestampOffsetUs ; \n\t} \n"}, {"code": "public int remove ( Object key ) { \n\tEntry e = removeEntryForKey ( key ) ; \n\treturn ( e == null ? NUM00 : e . value ) ; \n\t} \n"}, {"code": "public boolean verifyChallengeToken ( InetSocketAddress address , int token ) { \n\treturn Objects . equals ( challengeTokens . get ( address ) , token ) ; \n\t} \n"}, {"code": "$F1 public void handleKey ( int virtualKeyCode , int transitionState , char keyChar ) { \n\tswitchControlKeys ( virtualKeyCode , transitionState ) ; \n\tinputBuffer . add ( new GlobalKeyEvent ( this , virtualKeyCode , transitionState , keyChar , menuPressed , shiftPressed , controlPressed , extendedKey ) ) ; \n\t} \n"}, {"code": "protected void drawTriangle ( int x , int y , int w , int h , Color fillColor , Paint fillPaint , Color penColor , boolean shadow , String direction ) { \n\t$F157439 ( triangle ) if ( direction . equals ( mxConstants . DIRECTION_NORTH ) ) { \n\t\ttriangle . addPoint ( x , y + h ) ; \n\t\ttriangle . addPoint ( x + w / NUM00 , y ) ; \n\t\ttriangle . addPoint ( x + w , y + h ) ; \n\t\t} \n\telse if ( direction . equals ( mxConstants . DIRECTION_SOUTH ) ) { \n\t\ttriangle . addPoint ( x , y ) ; \n\t\ttriangle . addPoint ( x + w / NUM00 , y + h ) ; \n\t\ttriangle . addPoint ( x + w , y ) ; \n\t\t} \n\telse if ( $F127913 ( direction , mxConstants ) ) { \n\t\ttriangle . addPoint ( x + w , y ) ; \n\t\ttriangle . addPoint ( x , y + h / NUM00 ) ; \n\t\ttriangle . addPoint ( x + w , y + h ) ; \n\t\t} \n\telse { \n\t\ttriangle . addPoint ( x , y ) ; \n\t\ttriangle . addPoint ( x + w , y + h / NUM00 ) ; \n\t\ttriangle . addPoint ( x , y + h ) ; \n\t\t} \n\tdrawPolygon ( triangle , fillColor , fillPaint , penColor , shadow ) ; \n\t} \n"}, {"code": "private static $F2539 resourceBundleMap ( ResourceBundle bundle ) { \n\tfinal $F12078 map = $F12080 ; \n\tfinal $F14937 e = bundle . getKeys ( ) ; \n\twhile $F1444 ( e ) { \n\t\tfinal String key = e . nextElement ( ) ; \n\t\tmap . put ( key , ( String ) bundle . getObject ( key ) ) ; \n\t\t} \n\t$F20711 ( Collections , map ) } \n"}, {"code": "public int compareTo ( IntBuffer otherBuffer ) { \n\tint compareRemaining = ( $F123020 ( remaining , otherBuffer ) ) ? remaining ( ) : otherBuffer . remaining ( ) ; \n\tint thisPos = position ; \n\tint otherPos = otherBuffer . position ; \n\tint thisInt , otherInt ; \n\twhile ( compareRemaining > NUM00 ) { \n\t\tthisInt = get ( thisPos ) ; \n\t\totherInt = otherBuffer . get ( otherPos ) ; \n\t\tif ( thisInt != otherInt ) { \n\t\t\treturn thisInt < otherInt ? - NUM00 : NUM00 ; \n\t\t\t} \n\t\tthisPos ++ ; \n\t\totherPos ++ ; \n\t\tcompareRemaining -- ; \n\t\t} \n\t$F93077 ( remaining , otherBuffer ) } \n"}, {"code": "private static SizePair selectSizePair ( Camera camera , int desiredWidth , int desiredHeight ) { \n\t$F39277 validPreviewSizes = generateValidPreviewSizeList ( camera ) ; \n\tSizePair selectedPair = null ; \n\tint minDiff = Integer . MAX_VALUE ; \n\tfor ( SizePair sizePair : validPreviewSizes ) { \n\t\tSize size = sizePair . previewSize ( ) ; \n\t\tint diff = Math . abs ( size . getWidth ( ) - desiredWidth ) + Math . abs ( size . getHeight ( ) - desiredHeight ) ; \n\t\t$F40430 ( diff , minDiff , selectedPair , sizePair ) } \n\treturn selectedPair ; \n\t} \n"}, {"code": "public void testDivideRoundHalfUpPos $F72 $F207243 ( a , aScale , b , bScale , c , resScale , aNumber , bNumber , result , BigDecimal , assertEquals ) "}, {"code": "private boolean isBlack $F6803 ( x , y ) { \n\t$F27673 ( inBounds , x , y , _BOOL ) return ( m_bufferedImage . getRGB ( x , y ) & NUM00 ) == NUM00 ; \n\t} \n"}, {"code": "public void addJob ( Runnable job ) $F207 ( mJobs , job ) "}, {"code": "public PKCS10CertificationRequest ( String signatureAlgorithm , X509Name subject , PublicKey key , ASN1Set attributes , PrivateKey signingKey , String provider ) throws $F36600 { \n\tString algorithmName = Strings . toUpperCase ( signatureAlgorithm ) ; \n\tDERObjectIdentifier sigOID = ( DERObjectIdentifier ) algorithms . get ( algorithmName ) ; \n\tif ( sigOID == null ) { \n\t\ttry { \n\t\t\tsigOID = new DERObjectIdentifier ( algorithmName ) ; \n\t\t\t} \n\t\tcatch ( Exception e ) $F825 } \n\t$F826 ( subject ) $F826 ( key ) if $F105 ( noParams , sigOID ) { \n\t\tthis . sigAlgId = new AlgorithmIdentifier ( sigOID ) ; \n\t\t} \n\telse if $F1710 ( params , algorithmName ) { \n\t\tthis . sigAlgId = new AlgorithmIdentifier ( sigOID , ( ASN1Encodable ) params . get ( algorithmName ) ) ; \n\t\t} \n\telse { \n\t\tthis . sigAlgId = new AlgorithmIdentifier ( sigOID , DERNull . INSTANCE ) ; \n\t\t} \n\ttry { \n\t\tASN1Sequence seq = ( ASN1Sequence ) ASN1Primitive . fromByteArray ( key . getEncoded ( ) ) ; \n\t\tthis . reqInfo = new CertificationRequestInfo ( subject , new SubjectPublicKeyInfo ( seq ) , attributes ) ; \n\t\t} \n\tcatch ( IOException e ) $F825 Signature sig ; \n\t$F25345 ( provider , sig , Signature , signatureAlgorithm ) sig . initSign ( signingKey ) ; \n\ttry { \n\t\tsig . update ( $F73408 ( reqInfo , ASN1Encoding ) ) ; \n\t\t} \n\tcatch ( Exception e ) $F18931 ( e ) this . sigBits = new DERBitString ( sig . sign ( ) ) ; \n\t} \n"}, {"code": "$F1 public void close $F72 throws IOException { \n\tif ( in != null ) { \n\t\t$F59 ( in ) in = null ; \n\t\tbuf = null ; \n\t\t} \n\t} \n"}, {"code": "public static Collection < Vector2D > reducePoints ( final Collection < Vector2D > points ) { \n\tint size = NUM00 ; \n\tVector2D minX = null ; \n\tVector2D maxX = null ; \n\tVector2D minY = null ; \n\tVector2D maxY = null ; \n\tfor ( Vector2D p : points ) { \n\t\tif ( minX == null || p . getX ( ) < minX . getX ( ) ) { \n\t\t\tminX = p ; \n\t\t\t} \n\t\tif ( maxX == null || p . getX ( ) > maxX . getX ( ) ) { \n\t\t\tmaxX = p ; \n\t\t\t} \n\t\tif ( minY == null || p . getY ( ) < minY . getY ( ) ) { \n\t\t\tminY = p ; \n\t\t\t} \n\t\tif ( maxY == null || p . getY ( ) > maxY . getY ( ) ) { \n\t\t\tmaxY = p ; \n\t\t\t} \n\t\tsize ++ ; \n\t\t} \n\t$F7879 ( size , points ) final List < Vector2D > quadrilateral = buildQuadrilateral ( minY , maxX , maxY , minX ) ; \n\tif $F6214 ( quadrilateral ) { \n\t\treturn points ; \n\t\t} \n\tfinal List < Vector2D > reducedPoints = new ArrayList < Vector2D > ( quadrilateral ) ; \n\tfor ( final Vector2D p : points ) { \n\t\tif ( ! insideQuadrilateral ( p , quadrilateral ) ) $F207 ( reducedPoints , p ) } \n\treturn reducedPoints ; \n\t} \n"}, {"code": "int updateBookmarksInTransaction ( ContentValues values , String selection , $F806 selectionArgs , boolean callerIsSyncAdapter ) { \n\tint count = NUM00 ; \n\tfinal SQLiteDatabase db = mOpenHelper . getWritableDatabase ( ) ; \n\tfinal $F806 bookmarksProjection = new String [ ] { \n\t\tBookmarks . _ID , Bookmarks . VERSION , Bookmarks . URL , Bookmarks . TITLE , Bookmarks . IS_FOLDER , Bookmarks . ACCOUNT_NAME , Bookmarks . ACCOUNT_TYPE } \n\t; \n\tCursor cursor = db . query ( TABLE_BOOKMARKS , bookmarksProjection , selection , selectionArgs , null , null , null ) ; \n\tboolean updatingParent = values . containsKey ( Bookmarks . PARENT ) ; \n\tString parentAccountName = null ; \n\tString parentAccountType = null ; \n\tif ( updatingParent ) { \n\t\tlong parent = values . getAsLong ( Bookmarks . PARENT ) ; \n\t\tCursor c = db . query ( TABLE_BOOKMARKS , new String [ ] { \n\t\t\tBookmarks . ACCOUNT_NAME , Bookmarks . ACCOUNT_TYPE } \n\t\t, NUM00 , new String [ ] { \n\t\t\tLong . toString ( parent ) } \n\t\t, null , null , null ) ; \n\t\tif $F17816 ( c ) { \n\t\t\t$F68584 ( parentAccountName , c ) $F68584 ( parentAccountType , c ) } \n\t\t$F59 ( c ) } \n\telse if ( values . containsKey ( Bookmarks . ACCOUNT_NAME ) || values . containsKey ( Bookmarks . ACCOUNT_TYPE ) ) $F845 try { \n\t\t$F808 ( args ) if ( ! callerIsSyncAdapter ) { \n\t\t\tvalues . put ( Bookmarks . DATE_MODIFIED , System . currentTimeMillis ( ) ) ; \n\t\t\tvalues . put ( Bookmarks . DIRTY , NUM00 ) ; \n\t\t\t} \n\t\tboolean updatingUrl = values . containsKey ( Bookmarks . URL ) ; \n\t\tString url = null ; \n\t\tif ( updatingUrl ) { \n\t\t\turl = values . getAsString ( Bookmarks . URL ) ; \n\t\t\t} \n\t\tContentValues imageValues = extractImageValues ( values , url ) ; \n\t\twhile $F12260 ( cursor ) { \n\t\t\tlong id = cursor . getLong ( NUM00 ) ; \n\t\t\targs [ NUM00 ] = Long . toString ( id ) ; \n\t\t\t$F27130 ( accountName , cursor ) $F27130 ( accountType , cursor ) if ( updatingParent && ( ! TextUtils . equals ( accountName , parentAccountName ) || ! TextUtils . equals ( accountType , parentAccountType ) ) ) { \n\t\t\t\tContentValues newValues = valuesFromCursor ( cursor ) ; \n\t\t\t\tnewValues . putAll ( values ) ; \n\t\t\t\tnewValues . remove ( Bookmarks . _ID ) ; \n\t\t\t\tnewValues . remove ( Bookmarks . VERSION ) ; \n\t\t\t\tnewValues . put ( Bookmarks . ACCOUNT_NAME , parentAccountName ) ; \n\t\t\t\tnewValues . put ( Bookmarks . ACCOUNT_TYPE , parentAccountType ) ; \n\t\t\t\tUri insertUri = insertInTransaction ( Bookmarks . CONTENT_URI , newValues , callerIsSyncAdapter ) ; \n\t\t\t\tlong newId = ContentUris . parseId ( insertUri ) ; \n\t\t\t\tif ( cursor . getInt ( NUM00 ) != NUM00 ) { \n\t\t\t\t\t$F41874 ( updateChildren ) updateChildren . put ( Bookmarks . PARENT , newId ) ; \n\t\t\t\t\tcount += updateBookmarksInTransaction ( updateChildren , Bookmarks . PARENT + NUM00 , new String [ ] { \n\t\t\t\t\t\tLong . toString ( id ) } \n\t\t\t\t\t, callerIsSyncAdapter ) ; \n\t\t\t\t\t} \n\t\t\t\tUri uri = ContentUris . withAppendedId ( Bookmarks . CONTENT_URI , id ) ; \n\t\t\t\tdeleteInTransaction ( uri , null , null , callerIsSyncAdapter ) ; \n\t\t\t\tcount += NUM00 ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tif ( ! callerIsSyncAdapter ) { \n\t\t\t\t\tvalues . put ( Bookmarks . VERSION , cursor . getLong ( NUM00 ) + NUM00 ) ; \n\t\t\t\t\t} \n\t\t\t\tcount += db . update ( TABLE_BOOKMARKS , values , NUM00 , args ) ; \n\t\t\t\t} \n\t\t\tif ( imageValues != null ) { \n\t\t\t\tif ( ! updatingUrl ) { \n\t\t\t\t\t$F68584 ( url , cursor ) imageValues . put ( Images . URL , url ) ; \n\t\t\t\t\t} \n\t\t\t\tif $F20899 ( TextUtils , url ) { \n\t\t\t\t\targs [ NUM00 ] = url ; \n\t\t\t\t\tif ( db . update ( TABLE_IMAGES , imageValues , Images . URL + NUM00 , args ) == NUM00 ) { \n\t\t\t\t\t\tdb . insert ( TABLE_IMAGES , Images . FAVICON , imageValues ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F48674 ( cursor ) return count ; \n\t} \n"}, {"code": "private IgniteBiTuple $F8434 hostPort ( String connStr , String hostPortStr ) throws IgniteCheckedException { \n\t$F806 $F33985 ( tokens , hostPortStr ) ; \n\tString host = tokens [ NUM00 ] ; \n\tif $F4329 ( F , host ) host = LOCALHOST ; \n\tint port ; \n\tif $F9634 ( tokens ) port = IgfsIpcEndpointConfiguration . DFLT_PORT ; \n\telse if $F9634 ( tokens ) { \n\t\tString portStr = tokens [ NUM00 ] ; \n\t\ttry { \n\t\t\tport = Integer . valueOf ( portStr ) ; \n\t\t\tif $F19274 ( port ) throw new IgniteCheckedException ( NUM00 + connStr ) ; \n\t\t\t} \n\t\tcatch ( NumberFormatException e ) { \n\t\t\tthrow new IgniteCheckedException ( NUM00 + connStr ) ; \n\t\t\t} \n\t\t} \n\telse throw new IgniteCheckedException ( NUM00 + connStr ) ; \n\treturn F . t ( host , port ) ; \n\t} \n"}, {"code": "public boolean isMissileGoingToHit ( EntityMissile missile ) { \n\tif ( missile == null || missile . targetVector == null ) { \n\t\treturn _BOOL ; \n\t\t} \n\treturn ( Vector2 . distance ( new Vector2 ( new Pos3D ( missile ) ) , new Vector2 ( xCoord , zCoord ) ) < alarmRange && Vector2 . distance ( new Vector2 ( missile . targetVector ) , new Vector2 ( xCoord , zCoord ) ) < safetyRange ) ; \n\t} \n"}, {"code": "public static Usericon parseModIcon ( String json ) { \n\ttry { \n\t\t$F16165 ( parser ) $F16169 ( o , parser , json ) $F193907 ( room , o ) $F28495 ( roomId , room ) $F28495 ( modBadgeUrl , room ) $F1338 ( modBadgeUrl ) return UsericonFactory . createTwitchLikeIcon ( Usericon . Type . MOD , roomId , modBadgeUrl , Usericon . SOURCE_FFZ , NUM00 ) ; \n\t\t} \n\tcatch ( ParseException | ClassCastException | NullPointerException ex ) $F845 $F1274 } \n"}, {"code": "public static long length ( URL url ) throws IOException { \n\tHTTPResponse http = HTTPEngine . head ( url , null , null , - NUM00 , _BOOL , null , Constants . NAME , null , null ) ; \n\treturn http . getContentLength ( ) ; \n\t} \n"}, {"code": "$F1 public Request < List < Workspace > > all $F72 { \n\tList < Workspace > $F204 ( workspacesToReturn ) ; \n\tfor ( Workspace dummyWorkspace : workspaces . values ( ) ) $F207 ( workspacesToReturn , dummyWorkspace ) return new $F211 ( workspacesToReturn ) ; \n\t} \n"}, {"code": "public void subscribe ( EventSubscriber $F1011 subscriber ) { \n\tfinal $F6969 eventType = getEventType ( subscriber ) ; \n\tdoSubscribe ( subscriber , eventType ) ; \n\t} \n"}, {"code": "public static String readerToString ( final Reader fileReader ) throws IOException { \n\t$F1121 ( sb ) try ( BufferedReader br = new BufferedReader ( fileReader ) ) { \n\t\tfinal $F1469 buffer = FileUtils . makeBuffer ( ) ; \n\t\tfinal int eof = - NUM00 ; \n\t\tfor ( int len = br . read ( buffer ) ; \n\t\tlen > eof ; \n\t\tlen = br . read ( buffer ) ) { \n\t\t\tfor ( $F119 ( i , len ) ) $F40727 ( sb , buffer , i ) } \n\t\t} \n\t$F92 ( sb ) } \n"}, {"code": "public static String bytesToHex $F75287 ( bytes , withSpaces ) { \n\t$F83 ( sb ) for ( byte hashByte : bytes ) { \n\t\tint intVal = NUM00 & hashByte ; \n\t\t$F2854 ( intVal , sb ) $F1463 ( sb , Integer , intVal ) $F12290 ( withSpaces , sb ) } \n\t$F92 ( sb ) } \n"}, {"code": "public static $F96 stringToUtf8Bytes ( String string ) { \n\t$F1749 ( len , string ) $F171903 ( bytes , len ) int outAt = NUM00 ; \n\tfor ( $F119 ( i , len ) ) { \n\t\t$F1280 ( c , string , i ) if ( ( c != NUM00 ) && ( c < NUM00 ) ) { \n\t\t\t$F8214 ( bytes , outAt , c ) outAt ++ ; \n\t\t\t} \n\t\telse if ( c < NUM00 ) { \n\t\t\tbytes [ outAt ] = $F476832 ( c ) ; \n\t\t\tbytes [ outAt + NUM00 ] = $F287679 ( c ) ; \n\t\t\toutAt += NUM00 ; \n\t\t\t} \n\t\telse { \n\t\t\tbytes [ outAt ] = $F476832 ( c ) ; \n\t\t\tbytes [ outAt + NUM00 ] = $F476832 ( c ) ; \n\t\t\tbytes [ outAt + NUM00 ] = $F287679 ( c ) ; \n\t\t\toutAt += NUM00 ; \n\t\t\t} \n\t\t} \n\t$F2175 ( result , outAt ) $F135 ( System , bytes , result , outAt ) return result ; \n\t} \n"}, {"code": "private boolean isInterleaved ( ComponentSampleModel sm ) { \n\tint numBands = sampleModel . getNumBands ( ) ; \n\t$F6482 ( numBands , _BOOL ) $F2027 bankIndices = sm . getBankIndices ( ) ; \n\tfor ( $F119 ( i , numBands ) ) { \n\t\tif ( bankIndices [ i ] != NUM00 ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\t$F2027 bandOffsets = sm . getBandOffsets ( ) ; \n\tint minOffset = bandOffsets [ NUM00 ] ; \n\tint maxOffset = minOffset ; \n\tfor ( $F119 ( i , numBands ) ) { \n\t\tint offset = bandOffsets [ i ] ; \n\t\t$F45132 ( offset , minOffset ) $F12283 ( offset , maxOffset ) } \n\tif ( maxOffset - minOffset >= sm . getPixelStride ( ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "private int decodeSize $F97 ( buffer ) { \n\t$F9144 ( bi , buffer ) $F79839 ( tmpSize , bi ) if ( tmpSize < NUM00 ) { \n\t\tlogger . warning ( NUM00 + tmpSize + NUM00 + Integer . toBinaryString ( tmpSize ) + NUM00 + Integer . toHexString ( tmpSize ) ) ; \n\t\t} \n\treturn tmpSize ; \n\t} \n"}, {"code": "public CertificateIssuerExtension ( Boolean critical , Object value ) throws IOException { \n\tthis . extensionId = PKIXExtensions . CertificateIssuer_Id ; \n\t$F77551 ( this , critical ) $F149380 ( this , value ) $F149385 ( val , this ) this . names = new GeneralNames ( val ) ; \n\t} \n"}, {"code": "$F1 public void onSensorSelectionClosed ( DialogFragment dialog ) { \n\t$F13527 ( Log , TAG ) sensorSelectionDialog = null ; \n\t} \n"}, {"code": "public void runTest $F72 throws Throwable { \n\tDocument doc ; \n\tNodeList elementList ; \n\tNode nameNode ; \n\tCharacterData child ; \n\tString childData ; \n\tString childValue ; \n\t$F236 ( doc , load , _BOOL ) $F237 ( elementList , doc ) $F238 ( nameNode , elementList ) $F241 ( child , nameNode ) child . setNodeValue ( NUM00 ) ; \n\t$F4055 ( childData , child ) assertEquals ( NUM00 , NUM00 , childData ) ; \n\t$F5900 ( childValue , child ) assertEquals ( NUM00 , NUM00 , childValue ) ; \n\t} \n"}, {"code": "public String toXML $F72 { \n\t$F280 ( str ) $F84 ( str ) str . append ( XML_ROOT_ELEMENT ) ; \n\t$F84 ( str ) $F84 ( str ) str . append ( XML_ELEMENT_QUALITY_CODE ) ; \n\t$F84 ( str ) str . append ( qualityCode ) ; \n\t$F84 ( str ) str . append ( XML_ELEMENT_QUALITY_CODE ) ; \n\t$F84 ( str ) if ( description != null ) { \n\t\t$F84 ( str ) str . append ( XML_ELEMENT_QUALITY_DESC ) ; \n\t\t$F84 ( str ) str . append ( description ) ; \n\t\t$F84 ( str ) str . append ( XML_ELEMENT_QUALITY_DESC ) ; \n\t\t$F84 ( str ) } \n\t$F84 ( str ) str . append ( XML_ROOT_ELEMENT ) ; \n\t$F84 ( str ) $F92 ( str ) } \n"}, {"code": "public $F96 decrypt ( FacesContext context , $F96 securedata ) { \n\ttry { \n\t\t$F2175 ( macBytes , macLength ) $F5634 ( System , securedata , macBytes ) $F2175 ( iv , ivLength ) System . arraycopy ( securedata , macBytes . length , iv , NUM00 , iv . length ) ; \n\t\t$F96 encdata = new byte [ securedata . length - macBytes . length - iv . length ] ; \n\t\tSystem . arraycopy ( securedata , macBytes . length + iv . length , encdata , NUM00 , encdata . length ) ; \n\t\t$F96 rawKey = convertPasswordToKey ( getPasswordToSecureState ( context ) ) ; \n\t\tMac mac = getMac ( rawKey ) ; \n\t\tmac . update ( iv ) ; \n\t\tmac . update ( encdata ) ; \n\t\t$F96 macBytesCalculated = mac . doFinal ( ) ; \n\t\tif $F12512 ( Arrays , macBytes , macBytesCalculated ) { \n\t\t\tCipher cipher = getBlockCipherForDecryption ( rawKey , iv ) ; \n\t\t\t$F81525 ( plaindata , cipher , encdata ) return plaindata ; \n\t\t\t} \n\t\telse { \n\t\t\tif $F89967 ( logger , Level ) $F18144 ( logger ) $F1274 } \n\t\t} \n\tcatch ( Exception e ) { \n\t\tif $F68674 ( logger , Level ) { \n\t\t\tlogger . log ( Level . SEVERE , e . getMessage ( ) , e . getCause ( ) ) ; \n\t\t\t} \n\t\t$F5301 ( e ) } \n\t} \n"}, {"code": "public static $F2689 commaDelimitedListToSet ( String str ) { \n\t$F2689 $F32033 ( set ) ; \n\t$F91090 ( tokens , commaDelimitedListToStringArray , str ) $F9629 ( set , Arrays , tokens ) return set ; \n\t} \n"}, {"code": "public int hashCode $F72 { \n\treturn Objects . hash ( file , princ , bound ) ; \n\t} \n"}, {"code": "public $F987 listOptions $F72 { \n\t$F994 ( newVector ) $F9007 ( newVector ) $F9007 ( newVector ) $F9007 ( newVector ) $F9007 ( newVector ) $F9010 ( newVector , Collections , super ) $F1007 ( newVector ) } \n"}, {"code": "protected void tag $F106000 ( tag , name , value , close ) { \n\tspacing ( ) ; \n\t$F21384 ( m_out ) m_out . print ( tag ) ; \n\t$F21384 ( m_out ) m_out . print ( name ) ; \n\t$F21384 ( m_out ) $F21384 ( m_out ) escapeString ( value ) ; \n\t$F21384 ( m_out ) if ( close ) $F21384 ( m_out ) $F21384 ( m_out ) println ( ) ; \n\t$F45123 ( close , m_tagStack , tag ) } \n"}, {"code": "public V remove ( Object key ) { \n\tint hash = hash ( key . hashCode ( ) ) ; \n\t$F108030 s = segmentForHash ( hash ) ; \n\treturn s == null ? null : s . remove ( key , hash , null ) ; \n\t} \n"}, {"code": "public void addAttribute ( AttributeInfo info ) { \n\tAttributeInfo . remove ( attributes , info . getName ( ) ) ; \n\tattributes . add ( info ) ; \n\t} \n"}, {"code": "public static Result evaluateModel ( MultiLabelClassifier h , Instances D ) throws Exception { \n\treturn evaluateModelPrequentialBasic ( h , D , NUM00 , NUM00 , NUM00 , NUM00 ) ; \n\t} \n"}, {"code": "protected boolean isValidState ( mxCellState state ) { \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void testFindSpringSunDirectoryServerWithLimit $F72 { \n\tLdapProxy proxy = getLdapSunDirectoryServer ( ) ; \n\tList result = null ; \n\tint limit = NUM00 ; \n\ttry { \n\t\tresult = proxy . find ( getLdapSearchVO ( NUM00 , limit , NUM00 , NUM00 , null , LdapScopeConstants . SCOPE_SUBTREE ) ) ; \n\t\t} \n\t$F3957 assertNotNull ( result ) ; \n\tif ( result != null ) { \n\t\t$F43476 ( assertEquals , limit , result ) } \n\t} \n"}, {"code": "public static boolean deleteDir ( File dir ) { \n\t$F1933 ( dir , _BOOL ) if $F3444 ( dir ) { \n\t\t$F1894 ( children , dir ) for ( String child : children ) { \n\t\t\tboolean success = deleteDir ( new File ( dir , child ) ) ; \n\t\t\t$F42316 ( success , _BOOL ) } \n\t\t} \n\t$F16252 ( dir ) } \n"}, {"code": "private CIMObjectPath createFilter ( CimManagedFilterInfo filterInfo ) throws WBEMException { \n\t$F83 ( filterNameBuilder ) filterNameBuilder . append ( _subscriptionsIdentifier ) ; \n\tfilterNameBuilder . append ( CimConstants . PATH_NAME_DELIMITER ) ; \n\t$F167270 ( filterNameBuilder , filterInfo ) $F1822 ( filterName , filterNameBuilder ) String implNS = _connection . getImplNamespace ( ) ; \n\t$F469739 nameProperty = new CIMProperty $F4 ( CimConstants . NAME_KEY , CIMDataType <missing ')'> . <missing ';'> NUM00 <missing ';'> _T , filterName ) ; \n\t$F469739 srcNamespaceProp = new CIMProperty $F4 ( CimConstants . FILTER_PROP_SRC_NAMESPACE , CIMDataType <missing ')'> . <missing ';'> NUM00 <missing ';'> _T , implNS ) ; \n\t$F469739 srcNamespacesProp = new CIMProperty < $F806 > ( CimConstants . FILTER_PROP_SRC_NAMESPACES , CIMDataType <missing ')'> . <missing ';'> NUM00 <missing ';'> _ARRAY_T , $F8640 ( implNS ) ) ; \n\t$F469739 queryLangProp = new CIMProperty $F4 ( CimConstants . FILTER_PROP_QUERY_LANGUAGE , CIMDataType <missing ')'> . <missing ';'> NUM00 <missing ';'> _T , filterInfo . getQueryLanguage ( ) ) ; \n\t$F469739 queryProp = new CIMProperty $F4 ( CimConstants . FILTER_PROP_QUERY , CIMDataType <missing ')'> . <missing ';'> NUM00 <missing ';'> _T , filterInfo . getQuery ( ) ) ; \n\t$F469739 [ ] filterProperties = new CIMProperty [ ] { \n\t\tnameProperty , srcNamespaceProp , srcNamespacesProp , queryLangProp , queryProp } \n\t; \n\tCIMObjectPath filterPath = createInstance ( CimConstants . CIM_FILTER_NAME , filterName , filterProperties ) ; \n\t_filterPaths . add ( filterPath ) ; \n\treturn filterPath ; \n\t} \n"}, {"code": "public static ArrayList < $F5 > fileTokenizer ( String fin ) { \n\t$F1705 ( file , fin ) BufferedReader br ; \n\tFileReader fr ; \n\t$F8728 ( lines ) try { \n\t\tfr = new FileReader ( file ) ; \n\t\t$F26608 ( br , fr ) String line ; \n\t\ttry { \n\t\t\twhile $F443 ( line , br ) { \n\t\t\t\tif $F4012 ( line ) $F207 ( lines , line ) } \n\t\t\t} \n\t\t$F18071 } \n\tcatch ( FileNotFoundException ex ) $F845 ArrayList < $F5 > tokenized_list = new ArrayList < $F5 > $F72 ; \n\tfor ( String s : lines ) { \n\t\t$F8728 ( tokens ) $F17727 ( st , s ) $F44279 ( st , tokens ) tokenized_list . add ( tokens ) ; \n\t\t} \n\treturn tokenized_list ; \n\t} \n"}, {"code": "public ActivationGroupImpl ( ActivationGroupID id , MarshalledObject $F1011 data ) throws RemoteException { \n\tsuper ( id ) ; \n\tgroupID = id ; \n\tunexportObject ( this , _BOOL ) ; \n\tRMIServerSocketFactory ssf = new ServerSocketFactoryImpl $F72 ; \n\tUnicastRemoteObject . exportObject ( this , NUM00 , null , ssf ) ; \n\tif ( System . getSecurityManager ( ) == null ) { \n\t\ttry { \n\t\t\tSystem . setSecurityManager ( new SecurityManager $F72 ) ; \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\tthrow new RemoteException ( NUM00 , e ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "static $F96 hash_df ( Digest digest , $F96 seedMaterial , int seedLength ) { \n\t$F96 temp = new byte [ ( seedLength + NUM00 ) / NUM00 ] ; \n\tint len = temp . length / digest . getDigestSize ( ) ; \n\tint counter = NUM00 ; \n\t$F216093 ( dig , digest ) for ( $F9993 ( i , len ) ) { \n\t\t$F211632 ( digest , counter ) digest . update ( $F8043 ( seedLength ) ) ; \n\t\tdigest . update ( $F8043 ( seedLength ) ) ; \n\t\tdigest . update ( $F8043 ( seedLength ) ) ; \n\t\t$F211632 ( digest , seedLength ) $F6163 ( digest , seedMaterial ) $F137382 ( digest , dig ) int bytesToCopy = ( ( temp . length - i * dig . length ) > dig . length ) ? dig . length : ( temp . length - i * dig . length ) ; \n\t\tSystem . arraycopy ( dig , NUM00 , temp , i * dig . length , bytesToCopy ) ; \n\t\tcounter ++ ; \n\t\t} \n\tif ( seedLength % NUM00 != NUM00 ) { \n\t\tint shift = NUM00 - ( seedLength % NUM00 ) ; \n\t\tint carry = NUM00 ; \n\t\tfor ( $F15868 ( i , temp ) ) { \n\t\t\tint b = temp [ i ] & NUM00 ; \n\t\t\ttemp [ i ] = ( byte ) ( ( b > > > shift ) | ( carry < < ( NUM00 - shift ) ) ) ; \n\t\t\tcarry = b ; \n\t\t\t} \n\t\t} \n\treturn temp ; \n\t} \n"}, {"code": "protected boolean dropMessage ( RTMP rtmp , int channelId , IRTMPEvent message ) { \n\tboolean drop = _BOOL ; \n\tif ( rtmp . getMode ( ) == RTMP . MODE_SERVER ) { \n\t\tboolean isVideo = _BOOL ; \n\t\tif ( message instanceof Ping ) { \n\t\t\tfinal Ping pingMessage = ( Ping ) message ; \n\t\t\tif ( pingMessage . getEventType ( ) == Ping . STREAM_PLAYBUFFER_CLEAR ) { \n\t\t\t\tfinal int channel = ( NUM00 + ( ( pingMessage . getValue2 ( ) - NUM00 ) * NUM00 ) ) ; \n\t\t\t\trtmp . setLastTimestampMapping ( channel , null ) ; \n\t\t\t\trtmp . setLastTimestampMapping ( channel + NUM00 , null ) ; \n\t\t\t\trtmp . setLastTimestampMapping ( channel + NUM00 , null ) ; \n\t\t\t\t} \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\tif ( ( isVideo = message instanceof VideoData ) || message instanceof AudioData ) { \n\t\t\tif ( message . getTimestamp ( ) == NUM00 ) { \n\t\t\t\treturn _BOOL ; \n\t\t\t\t} \n\t\t\tboolean isLive = message . getSourceType ( ) == Constants . SOURCE_TYPE_LIVE ; \n\t\t\tlong timestamp = ( message . getTimestamp ( ) & NUM00 ) ; \n\t\t\tLiveTimestampMapping mapping = rtmp . getLastTimestampMapping ( channelId ) ; \n\t\t\t$F657 ( now , System ) if ( mapping == null || timestamp < mapping . getLastStreamTime ( ) ) { \n\t\t\t\t$F39971 ( log , now , timestamp ) mapping = new LiveTimestampMapping ( now , timestamp ) ; \n\t\t\t\trtmp . setLastTimestampMapping ( channelId , mapping ) ; \n\t\t\t\t} \n\t\t\tmapping . setLastStreamTime ( timestamp ) ; \n\t\t\tlong clockTimeOfMessage = mapping . getClockStartTime ( ) + timestamp - mapping . getStreamStartTime ( ) ; \n\t\t\tlong tardiness = clockTimeOfMessage - now ; \n\t\t\tif ( isLive && dropLiveFuture ) { \n\t\t\t\t$F15467 ( tardiness , Math ) } \n\t\t\tIConnection conn = Red5 . getConnectionLocal ( ) ; \n\t\t\tif ( conn != null ) { \n\t\t\t\ttardiness -= conn . getLastPingTime ( ) ; \n\t\t\t\t} \n\t\t\telse $F981 ( log ) if ( tardiness < baseTolerance ) $F845 else if ( tardiness > highestTolerance ) { \n\t\t\t\t$F7028 ( log , message ) if ( isVideo ) { \n\t\t\t\t\tmapping . setKeyFrameNeeded ( _BOOL ) ; \n\t\t\t\t\t} \n\t\t\t\tdrop = _BOOL ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tif ( isVideo ) { \n\t\t\t\t\tVideoData video = ( VideoData ) message ; \n\t\t\t\t\tif ( video . getFrameType ( ) == FrameType . KEYFRAME ) { \n\t\t\t\t\t\tmapping . setKeyFrameNeeded ( _BOOL ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse if ( tardiness >= baseTolerance && tardiness < midTolerance ) { \n\t\t\t\t\t\tif ( video . getFrameType ( ) == FrameType . DISPOSABLE_INTERFRAME ) { \n\t\t\t\t\t\t\t$F7028 ( log , message ) drop = _BOOL ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\telse if ( tardiness >= midTolerance && tardiness <= highestTolerance ) { \n\t\t\t\t\t\t$F7028 ( log , message ) drop = _BOOL ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t$F7028 ( log , drop ) } \n\treturn drop ; \n\t} \n"}, {"code": "public static double vectorLength $F9830 ( vector ) { \n\tdouble ret = NUM00 ; \n\tif ( vector == null ) return ret ; \n\telse { \n\t\tfor ( double aVector : vector ) { \n\t\t\tret += Math . pow ( aVector , NUM00 ) ; \n\t\t\t} \n\t\t} \n\treturn ret ; \n\t} \n"}, {"code": "public static String encodeQuery ( String url ) { \n\t$F23375 ( uri , Uri , url ) try { \n\t\tString query = uri . getQuery ( ) ; \n\t\tString encodedQuery = query != null ? URLEncoder . encode ( query , NUM00 ) : null ; \n\t\tURI tmp = new URI ( uri . getScheme ( ) , uri . getAuthority ( ) , uri . getPath ( ) , null , uri . getFragment ( ) ) ; \n\t\treturn tmp + ( $F21 ( encodedQuery ) ? NUM00 + encodedQuery : NUM00 ) ; \n\t\t} \n\tcatch ( UnsupportedEncodingException ignore ) $F845 catch ( URISyntaxException ignore ) $F845 $F92 ( uri ) } \n"}, {"code": "public void defineFillStyle ( int bitmapId , Matrix matrix , boolean clipped ) throws IOException { \n\tfillStyles . add ( new FillStyle ( bitmapId , matrix , clipped ) ) ; \n\toutstandingChanges = _BOOL ; \n\t} \n"}, {"code": "private static long writeFile $F84589 ( path , data ) { \n\tFileOutputStream out = null ; \n\ttry { \n\t\t$F10893 ( out , path ) out . write ( data ) ; \n\t\treturn data . length ; \n\t\t} \n\t$F102303 ( Log , TAG , e ) finally { \n\t\ttry $F881 ( out ) $F102303 ( Log , TAG , e ) } \n\t$F150 } \n"}, {"code": "public void firePaletteEvent ( ComponentEvent event ) { \n\t$F2329 ( localHackList ) palette = ( Container ) event . getSource ( ) ; \n\tint eventType = event . getID ( ) ; \n\tfor ( ComponentListener listener : localHackList ) { \n\t\tif ( eventType == ComponentEvent . COMPONENT_HIDDEN ) { \n\t\t\tlistener . componentHidden ( event ) ; \n\t\t\t} \n\t\telse if ( eventType == ComponentEvent . COMPONENT_SHOWN ) { \n\t\t\tlistener . componentShown ( event ) ; \n\t\t\t} \n\t\t} \n\tif ( eventType == ComponentEvent . COMPONENT_HIDDEN ) { \n\t\tpalette = null ; \n\t\t} \n\t} \n"}, {"code": "public void removeEntry ( RosterEntry e ) { \n\t$F7028 ( log , e ) _list . remove ( e ) ; \n\te . removePropertyChangeListener ( this ) ; \n\tsetDirty ( _BOOL ) ; \n\tfirePropertyChange ( REMOVE , e , null ) ; \n\t} \n"}, {"code": "protected void logDiagnostic ( String msg ) { \n\tif ( isDiagnosticsEnabled ( ) ) { \n\t\tlogRawDiagnostic ( diagnosticPrefix + msg ) ; \n\t\t} \n\t} \n"}, {"code": "public void addURL ( final String url ) { \n\twhile $F18523 ( currentIndex , history ) { \n\t\thistory . remove ( currentIndex + NUM00 ) ; \n\t\t} \n\thistory . add ( url ) ; \n\t$F63959 ( currentIndex , history ) } \n"}, {"code": "public static ValueTimestamp convertTimestamp ( Timestamp x , Calendar calendar ) { \n\tif ( calendar == null ) { \n\t\tthrow DbException . getInvalidValueException ( NUM00 , null ) ; \n\t\t} \n\t$F30242 ( cal , calendar ) $F176384 ( cal , x ) long dateValue = dateValueFromCalendar ( cal ) ; \n\tlong nanos = nanosFromCalendar ( cal ) ; \n\tnanos += x . getNanos ( ) % NUM00 ; \n\treturn ValueTimestamp . fromDateValueAndNanos ( dateValue , nanos ) ; \n\t} \n"}, {"code": "private void process $F72 { \n\t$F364966 pList = new $F364966 $F72 ; \n\tArrayList < Color > cList = new ArrayList < Color > $F72 ; \n\twhile ( reader . getPointer ( ) < reader . getTotalBitLen ( ) ) { \n\t\tPoint2D p = getPointCoords ( ) ; \n\t\tpList . add ( p ) ; \n\t\t$F5415 cc = $F104038 ; \n\t\tfor ( $F119 ( z , colCompCount ) ) { \n\t\t\tcc [ z ] = reader . getFloat ( bitsPerComponent ) ; \n\t\t\t} \n\t\tColor c = new Color ( $F64903 ( cc ) ) ; \n\t\tcList . add ( c ) ; \n\t\t} \n\tint totalRows = pList . size ( ) / verticesPerRow ; \n\tfor ( int mm = NUM00 ; \n\tmm < ( totalRows - NUM00 ) ; \n\tmm ++ ) { \n\t\tint mRows = mm * totalRows ; \n\t\tfor ( int nn = NUM00 ; \n\t\tnn < ( verticesPerRow - NUM00 ) ; \n\t\tnn ++ ) { \n\t\t\tint nm = nn + mRows ; \n\t\t\t$F11844 ( t ) t [ NUM00 ] = nm ; \n\t\t\tt [ NUM00 ] = t [ NUM00 ] = nm + NUM00 ; \n\t\t\tt [ NUM00 ] = t [ NUM00 ] = nm + verticesPerRow ; \n\t\t\tt [ NUM00 ] = nm + verticesPerRow + NUM00 ; \n\t\t\tfor ( $F1139 ( z , t ) ) { \n\t\t\t\ttriangles . add ( pList . get ( t [ z ] ) ) ; \n\t\t\t\ttriColors . add ( cList . get ( t [ z ] ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void element ( String segment ) { \n\t$F1384 ( index , segment ) String prefix = null ; \n\tif ( index > NUM00 ) { \n\t\t$F14493 ( prefix , segment , index ) $F6943 ( segment , index ) } \n\tString element = style . getElement ( segment ) ; \n\tprefixes . add ( prefix ) ; \n\tnames . add ( element ) ; \n\t} \n"}, {"code": "private void cleanupHandler ( ContentHandler vh ) throws SAXException { \n\tfor ( PrefixMapping pm = prefixMapping ; \n\tpm != null ; \n\tpm = pm . parent ) vh . endPrefixMapping ( pm . prefix ) ; \n\t$F45698 ( vh ) } \n"}, {"code": "public InputStream openClassfile ( String classname ) { \n\ttry { \n\t\tURLConnection con = openClassfile0 ( classname ) ; \n\t\tif ( con != null ) return con . getInputStream ( ) ; \n\t\t} \n\t$F29052 $F1274 } \n"}, {"code": "public void removeIgnoredView ( View v ) $F106 ( mIgnoredViews , v ) "}, {"code": "private double fitness ( Solution solution , $F1986 weights ) { \n\tdouble max = Double . NEGATIVE_INFINITY ; \n\tfor ( $F61686 ( i , solution ) ) { \n\t\tmax = Math . max ( max , Math . max ( weights [ i ] , NUM00 ) * Math . abs ( solution . getObjective ( i ) - idealPoint [ i ] ) ) ; \n\t\t} \n\tif ( solution . violatesConstraints ( ) ) { \n\t\tmax += NUM00 ; \n\t\t} \n\treturn max ; \n\t} \n"}, {"code": "private boolean selectItemByName ( CCombo combo , String name , $F806 cString ) { \n\tfor ( $F1139 ( i , cString ) ) { \n\t\tString propName = cString [ i ] ; \n\t\tif $F8397 ( name , propName ) { \n\t\t\tcombo . select ( i ) ; \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void addFile ( String path ) throws IOException { \n\t$F1705 ( newFile , path ) if $F1906 ( newFile ) $F144276 ( newFile ) if ( DelphiUtils . acceptFile ( newFile . getAbsolutePath ( ) ) ) $F207 ( files , newFile ) } \n"}, {"code": "public void removeLimitLine ( LimitLine l ) $F106 ( mLimitLines , l ) "}, {"code": "public boolean isContent $F72 $F23588 ( state , CONTENT ) "}, {"code": "protected boolean columnsDiffer ( Column currentColumn , Column desiredColumn ) { \n\tString desiredDefault = desiredColumn . getDefaultValue ( ) ; \n\tString currentDefault = currentColumn . getDefaultValue ( ) ; \n\tboolean defaultsEqual = ( desiredDefault == null ) || desiredDefault . equals ( currentDefault ) ; \n\tboolean sizeMatters = databaseInfo . hasSize ( currentColumn . getMappedTypeCode ( ) ) && ( desiredColumn . getSize ( ) != null ) ; \n\tif ( ( databaseInfo . getTargetJdbcType ( desiredColumn . getMappedTypeCode ( ) ) != currentColumn . getMappedTypeCode ( ) ) || ( desiredColumn . isRequired ( ) != currentColumn . isRequired ( ) ) || ( sizeMatters && ! StringUtils . equals ( desiredColumn . getSize ( ) , currentColumn . getSize ( ) ) ) || ! defaultsEqual ) { \n\t\treturn _BOOL ; \n\t\t} \n\telse { \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public static int readUINT16 ( InputStream stream ) throws IOException { \n\t$F7468 ( result , stream ) result |= stream . read ( ) < < NUM00 ; \n\treturn result ; \n\t} \n"}, {"code": "private void prepareMetadataConnection $F72 throws SQLException , ReplicatorException { \n\tif ( metadataConnection == null ) $F5182 ( metadataConnection , dataSourceImpl ) $F657 ( currentTime , System ) if ( lastConnectionTime == NUM00 ) { \n\t\tlastConnectionTime = currentTime ; \n\t\t} \n\telse if ( reconnectTimeoutInSeconds > NUM00 && currentTime - lastConnectionTime > reconnectTimeoutInSeconds * NUM00 ) { \n\t\tdataSourceImpl . releaseConnection ( metadataConnection ) ; \n\t\t$F5182 ( metadataConnection , dataSourceImpl ) } \n\t} \n"}, {"code": "public static String identifyLineDelimiter ( String fileContent ) { \n\tif $F11809 ( fileContent ) $F2455 else if $F11809 ( fileContent ) $F2455 else if $F11809 ( fileContent ) $F2455 else $F2455 } \n"}, {"code": "public void addItem ( ForceItem item ) $F207 ( items , item ) "}, {"code": "public static $F3803 makeBestTrailElementsForTrail ( HttpServletRequest request , Delegator delegator , String categoryId , String productId ) { \n\t$F3803 trail = CategoryWorker . getTrail ( request ) ; \n\t$F36422 ( trailElements ) if ( categoryId != null ) { \n\t\tif ( trail == null || $F6213 ( trail ) ) $F12542 else { \n\t\t\tListIterator $F4 $F30104 ( li , trail ) ; \n\t\t\twhile $F90239 ( li ) { \n\t\t\t\tString trailCatId = li . previous ( ) ; \n\t\t\t\tif $F1238 ( categoryId , trailCatId ) { \n\t\t\t\t\t$F33943 ( trailElements , FastList ) trailElements . add ( categoryId ) ; \n\t\t\t\t\t$F597 } \n\t\t\t\t} \n\t\t\tif ( trailElements == null ) { \n\t\t\t\t$F30104 ( li , trail ) ; \n\t\t\t\twhile $F90239 ( li ) { \n\t\t\t\t\tString trailCatId = li . previous ( ) ; \n\t\t\t\t\tif ( CategoryWorker . isCategoryChildOf ( request , trailCatId , categoryId ) ) { \n\t\t\t\t\t\t$F33943 ( trailElements , FastList ) trailElements . add ( trailCatId ) ; \n\t\t\t\t\t\ttrailElements . add ( categoryId ) ; \n\t\t\t\t\t\t$F597 } \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse { \n\t\tif ( trail == null || $F6213 ( trail ) ) $F12542 else { \n\t\t\tListIterator $F4 $F30104 ( li , trail ) ; \n\t\t\twhile $F90239 ( li ) { \n\t\t\t\tString trailCatId = li . previous ( ) ; \n\t\t\t\tif ( CategoryWorker . isCategoryContainsProduct ( request , trailCatId , productId ) ) { \n\t\t\t\t\t$F33943 ( trailElements , FastList ) trailElements . add ( trailCatId ) ; \n\t\t\t\t\t$F597 } \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn trailElements ; \n\t} \n"}, {"code": "public boolean deleteAttachmentPoint ( DatapathId sw , OFPort port ) { \n\tAttachmentPoint ap = new AttachmentPoint ( sw , port , $F6419 ) ; \n\tif ( this . oldAPs != null ) { \n\t\tArrayList < AttachmentPoint > apList = new ArrayList < AttachmentPoint > $F72 ; \n\t\tapList . addAll ( this . oldAPs ) ; \n\t\t$F12747 ( index , apList , ap ) if ( index > NUM00 ) { \n\t\t\tapList . remove ( index ) ; \n\t\t\tthis . oldAPs = apList ; \n\t\t\t} \n\t\t} \n\tif ( this . attachmentPoints != null ) { \n\t\tArrayList < AttachmentPoint > apList = new ArrayList < AttachmentPoint > $F72 ; \n\t\tapList . addAll ( this . attachmentPoints ) ; \n\t\t$F12747 ( index , apList , ap ) if ( index > NUM00 ) { \n\t\t\tapList . remove ( index ) ; \n\t\t\tthis . attachmentPoints = apList ; \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "$F1322 ( criteria , oredCriteria ) "}, {"code": "public void testConstructor2 $F72 { \n\tExecutor e = Executors . newFixedThreadPool ( NUM00 ) ; \n\t$F408697 p = new $F408697 ( e , NUM00 ) ; \n\tcheckInitialState ( p ) ; \n\tassertSame ( p . getExecutor ( ) , e ) ; \n\tassertEquals ( NUM00 , p . getMaxBufferCapacity ( ) ) ; \n\t} \n"}, {"code": "protected void parseContainerAndScreen ( XmlResourceParser parser , $F2469 out ) { \n\tif ( HOTSEAT_CONTAINER_NAME . equals ( getAttributeValue ( parser , ATTR_CONTAINER ) ) ) { \n\t\tout [ NUM00 ] = LauncherSettings . Favorites . CONTAINER_HOTSEAT ; \n\t\tlong rank = Long . parseLong ( getAttributeValue ( parser , ATTR_RANK ) ) ; \n\t\tout [ NUM00 ] = ( rank < mHotseatAllAppsRank ) ? rank : ( rank + NUM00 ) ; \n\t\t} \n\telse { \n\t\tout [ NUM00 ] = LauncherSettings . Favorites . CONTAINER_DESKTOP ; \n\t\tout [ NUM00 ] = Long . parseLong ( getAttributeValue ( parser , ATTR_SCREEN ) ) ; \n\t\t} \n\t} \n"}, {"code": "public DefaultTreeColouring sampleTreeColouring ( Tree tree , ColourChangeMatrix colourChangeMatrix , MetaPopulation mp ) { \n\tDefaultTreeColouring colouring = new DefaultTreeColouring ( NUM00 , tree ) ; \n\t$F1986 N = mp . getPopulationSizes ( NUM00 ) ; \n\t$F1986 rootPartials = prune ( tree , tree . getRoot ( ) , colourChangeMatrix , N ) ; \n\tdouble normalization = NUM00 ; \n\tfor ( $F1139 ( i , rootPartials ) ) { \n\t\tnormalization += colourChangeMatrix . getEquilibrium ( i ) * rootPartials [ i ] ; \n\t\t} \n\tsampleInternalNodes ( tree , tree . getRoot ( ) , colourChangeMatrix ) ; \n\tsampleBranchColourings ( colouring , tree , tree . getRoot ( ) , colourChangeMatrix ) ; \n\tdouble logP = calculateLogProbabilityDensity ( colouring , tree , tree . getRoot ( ) , colourChangeMatrix , N ) - Math . log ( normalization ) ; \n\tcolouring . setLogProbabilityDensity ( logP ) ; \n\treturn colouring ; \n\t} \n"}, {"code": "public StoredListIterator $F4203 establishListScan ( boolean random_scan ) { \n\tif ( isEmpty ( ) ) $F1274 StoredListIterator $F4203 slh = _SLHolderPool . get ( ) ; \n\tStoredListIterator $F4203 res = establishPos ( random_scan , slh ) ; \n\tif ( res == null ) $F33833 ( slh ) return res ; \n\t} \n"}, {"code": "public void drag ( long time , float x , float y , float deltaX , float deltaY , float totalX , float totalY ) { \n\tresetResizeTimeout ( _BOOL ) ; \n\tdeltaX = MathUtils . flipSignIf ( deltaX , LocalizationUtils . isLayoutRtl ( ) ) ; \n\tmNewTabButton . drag ( x , y ) ; \n\tif ( mLastPressedCloseButton != null ) { \n\t\tif ( ! mLastPressedCloseButton . drag ( x , y ) ) mLastPressedCloseButton = null ; \n\t\t} \n\tif ( mInReorderMode ) { \n\t\tfloat accumulatedDeltaX = x - mLastReorderX ; \n\t\tif ( Math . abs ( accumulatedDeltaX ) >= NUM00 ) { \n\t\t\tif ( ! LocalizationUtils . isLayoutRtl ( ) ) { \n\t\t\t\tif ( deltaX >= NUM00 ) { \n\t\t\t\t\tmReorderState |= REORDER_SCROLL_RIGHT ; \n\t\t\t\t\t} \n\t\t\t\telse if ( deltaX <= - NUM00 ) { \n\t\t\t\t\tmReorderState |= REORDER_SCROLL_LEFT ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tif ( deltaX >= NUM00 ) { \n\t\t\t\t\tmReorderState |= REORDER_SCROLL_LEFT ; \n\t\t\t\t\t} \n\t\t\t\telse if ( deltaX <= - NUM00 ) { \n\t\t\t\t\tmReorderState |= REORDER_SCROLL_RIGHT ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tmLastReorderX = x ; \n\t\t\tupdateReorderPosition ( accumulatedDeltaX ) ; \n\t\t\t} \n\t\t} \n\telse if ( ! mScroller . isFinished ( ) ) { \n\t\tmScroller . setFinalX ( ( int ) ( mScroller . getFinalX ( ) + deltaX ) ) ; \n\t\t} \n\telse { \n\t\tfloat fastExpandDelta = calculateOffsetToMakeTabVisible ( mInteractingTab , _BOOL , _BOOL , _BOOL ) ; \n\t\tif ( mInteractingTab != null && fastExpandDelta != NUM00 ) { \n\t\t\tif ( ( fastExpandDelta > NUM00 && deltaX > NUM00 ) || ( fastExpandDelta < NUM00 && deltaX < NUM00 ) ) { \n\t\t\t\tmScroller . startScroll ( mScrollOffset , NUM00 , ( int ) fastExpandDelta , NUM00 , time , EXPAND_DURATION_MS ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tupdateScrollOffsetPosition ( $F66964 ( mScrollOffset , deltaX ) ) ; \n\t\t\t} \n\t\t} \n\tif ( ! mInReorderMode ) { \n\t\t$F41714 ( absTotalX , Math , totalX ) $F41714 ( absTotalY , Math , totalY ) if ( totalY > mReorderMoveStartThreshold && absTotalX < mReorderMoveStartThreshold * NUM00 && ( absTotalX > EPSILON && ( absTotalY / absTotalX ) > TAN_OF_REORDER_ANGLE_START_THRESHOLD ) ) { \n\t\t\tstartReorderMode ( time , x , x - totalX ) ; \n\t\t\t} \n\t\t} \n\tif ( ! mInReorderMode ) mInteractingTab = null ; \n\tmUpdateHost . requestUpdate ( ) ; \n\t} \n"}, {"code": "public static String decode $F2236 ( str , charsetName ) throws UnsupportedEncodingException { \n\treturn decode ( new String ( str . getBytes ( charsetName ) , NUM00 ) ) ; \n\t} \n"}, {"code": "public ServerCommit acquire ( OperationEntry entry , ServerSessionContext session , long timestamp ) { \n\tServerCommit commit = pool . poll ( ) ; \n\tif ( commit == null ) { \n\t\tcommit = new ServerCommit ( this , log ) ; \n\t\t} \n\tcommit . reset ( entry , session , timestamp ) ; \n\treturn commit ; \n\t} \n"}, {"code": "public static synchronized double makeNoise ( double mean , double standardDiviation ) { \n\treturn random . nextGaussian ( ) * Math . sqrt ( standardDiviation ) + mean ; \n\t} \n"}, {"code": "void shutdown $F72 { \n\ttry { \n\t\tsslEngine . closeInbound ( ) ; \n\t\t} \n\tcatch ( SSLException e ) { \n\t\tif $F585 ( log ) log . debug ( $F5352 ( e ) + ses + NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public synchronized void removeInstanceListener ( InstanceListener tsl ) $F106 ( m_instanceListeners , tsl ) "}, {"code": "public $F214606 retrieveTerms ( int docNum ) throws IOException $F13736 ( retrieveTerms , docNum ) "}, {"code": "boolean alias ( String src , String target ) { \n\t$F397 ( src , _BOOL ) PluginHolder $F4203 a = registry . get ( src ) ; \n\t$F397 ( a , _BOOL ) PluginHolder $F4203 b = registry . get ( target ) ; \n\t$F203568 ( b , _BOOL ) registry . put ( target , a ) ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static < T extends CharSequence > T eachMatch ( T self , Pattern pattern , @ ClosureParams ( $F158693 , $F158694 ) Closure closure ) { \n\teachMatch ( self . toString ( ) , pattern , closure ) ; \n\treturn self ; \n\t} \n"}, {"code": "public void switchSingleRow $F72 { \n\t$F5453 ( m_onlyMultiRow ) cardLayout . first ( cardPanel ) ; \n\tm_singleRow = _BOOL ; \n\tdynamicDisplay ( NUM00 ) ; \n\t} \n"}, {"code": "private boolean isStringContinuation ( int offset ) { \n\tint nextNonWSCharPosition = fScanner . findNonWhitespaceBackwardInAnyPartition ( offset - NUM00 , JavaHeuristicScanner . UNBOUND ) ; \n\ttry { \n\t\tif ( nextNonWSCharPosition != JavaHeuristicScanner . NOT_FOUND && fDocument . getChar ( nextNonWSCharPosition ) == NUM00 ) return _BOOL ; \n\t\telse return _BOOL ; \n\t\t} \n\tcatch ( BadLocationException e ) { \n\t\tLog . error ( JavaIndenter . class , e ) ; \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "final void push ( final Object object ) $F207 ( stack , object ) "}, {"code": "public void makeImmutable $F72 { \n\tmutable = _BOOL ; \n\t} \n"}, {"code": "public static $F9340 V atomicGetOrCreate ( ConcurrentMap $F9340 map , K key , $F56328 ctor ) { \n\t$F42637 ( value , map , key ) if ( value == null ) { \n\t\ttry { \n\t\t\tvalue = ctor . call ( ) ; \n\t\t\t} \n\t\t$F270358 ( e ) V existing = map . putIfAbsent ( key , value ) ; \n\t\t$F21525 ( existing ) } \n\treturn value ; \n\t} \n"}, {"code": "public void testMixed $F72 { \n\tArgumentParser parser = new ArgumentParser ( new String [ ] { \n\t\tNUM00 , NUM00 , NUM00 , NUM00 , NUM00 } \n\t, _BOOL ) ; \n\t$F13712 ( iter , parser ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) assertIteratorAtEnd ( iter ) ; \n\tparser = new ArgumentParser ( new String [ ] { \n\t\tNUM00 , NUM00 , NUM00 , NUM00 , NUM00 } \n\t, _BOOL ) ; \n\t$F18058 ( iter , parser ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) assertIteratorAtEnd ( iter ) ; \n\tparser = new ArgumentParser ( new String [ ] { \n\t\tNUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } \n\t, _BOOL ) ; \n\t$F18058 ( iter , parser ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) assertIteratorAtEnd ( iter ) ; \n\t} \n"}, {"code": "private void createMetricChartPanel ( int metric , DatasetGenerator datasetGenerator , List < GCStatsChartPanel > list ) { \n\tChangingCategoryDatasetWithTTG dataset = datasetGenerator . newCategoryDatasetWithTTG ( metric , _BOOL ) ; \n\tGCStatsChartPanel panel = new MetricChartPanel ( CHART_PREFIX + DatasetGenerator . getMetricName ( metric ) , DatasetGenerator . getUnitName ( metric ) , dataset , locker ) ; \n\tlist . add ( panel ) ; \n\t} \n"}, {"code": "public void testConstrStringWithExponentWithoutPoint2 $F72 $F114473 ( a , aScale , bA , aNumber , assertEquals ) "}, {"code": "public DefaultClientWebRequestBuilder cookie ( String name , String value ) { \n\treturn cookie ( new HttpCookie ( name , value ) ) ; \n\t} \n"}, {"code": "private void addNewTilesets ( Map map ) throws IOException { \n\tfor ( TileSet set : map . getTileSets ( ) ) { \n\t\tsetByName . put ( set . getTilebmpFile ( ) , set ) ; \n\t\t} \n\tfor ( String name : mapping . getNewSets ( ) ) { \n\t\tif $F3057 ( name ) $F1448 if $F15257 ( setByName , name ) { \n\t\t\tTileSet set = new TileSet $F72 ; \n\t\t\tset . setName ( constructTilesetName ( name ) ) ; \n\t\t\tBasicTileCutter cutter = new BasicTileCutter $F13777 ; \n\t\t\tset . importTileBitmap ( name , cutter ) ; \n\t\t\tsetByName . put ( name , set ) ; \n\t\t\tmap . addTileset ( set ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static List < CssMetaData < ? extends Styleable , ? > > createCssMetaDataList ( List < CssMetaData < ? extends Styleable , ? > > baseList , CssMetaData < ? extends Styleable , ? > ... metaData ) { \n\tList < CssMetaData < ? extends Styleable , ? > > $F10252 ( styleables , baseList ) ; \n\t$F9629 ( styleables , Arrays , metaData ) $F26666 ( Collections , styleables ) } \n"}, {"code": "private String diff_linesToCharsMunge ( String text , $F3803 lineArray , $F59936 ( lineHash ) ) { \n\tint lineStart = NUM00 ; \n\tint lineEnd = - NUM00 ; \n\tString line ; \n\t$F83 ( chars ) while $F46112 ( lineEnd , text ) { \n\t\t$F61909 ( lineEnd , text , lineStart ) if ( lineEnd == - NUM00 ) $F32479 ( lineEnd , text ) line = text . substring ( lineStart , lineEnd + NUM00 ) ; \n\t\tlineStart = lineEnd + NUM00 ; \n\t\tif $F1710 ( lineHash , line ) { \n\t\t\tchars . append ( String . valueOf ( ( char ) $F113095 ( lineHash , line ) ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tlineArray . add ( line ) ; \n\t\t\tlineHash . put ( $F43443 ( line , lineArray ) ) ; \n\t\t\tchars . append ( String . valueOf ( ( char ) $F113103 ( lineArray ) ) ) ; \n\t\t\t} \n\t\t} \n\t$F92 ( chars ) } \n"}, {"code": "public void addExtension $F29522 ( oid , critical , value ) { \n\t$F29527 ( extensions , oid ) extOrdering . addElement ( oid ) ; \n\textensions . put ( oid , new Extension ( oid , critical , new DEROctetString ( value ) ) ) ; \n\t} \n"}, {"code": "public void updateClientCookies ( Boolean clientCookies ) throws SecurityException { \n\tcheckWriteAccess ( ) ; \n\t$F26096 ( hasAccess , ConfigWebUtil , config , SecurityManager ) $F26100 ( hasAccess ) Element scope = _getRootElement ( NUM00 ) ; \n\tscope . setAttribute ( NUM00 , Caster . toString ( clientCookies , NUM00 ) ) ; \n\t} \n"}, {"code": "public $F1986 subseriesByCopy $F196672 ( series , start , end ) throws IndexOutOfBoundsException { \n\tif ( ( start > end ) || ( start < NUM00 ) || ( end > series . length ) ) { \n\t\tthrow new IndexOutOfBoundsException ( $F130320 ( series , start ) + String . valueOf ( end - start ) ) ; \n\t\t} \n\treturn Arrays . copyOfRange ( series , start , end ) ; \n\t} \n"}, {"code": "public static String createTempFile $F74419 ( lines ) throws Exception { \n\tfinal File f = File . createTempFile ( NUM00 , NUM00 ) ; \n\t$F60829 ( f ) try ( final FileWriter w = new FileWriter ( f ) ) { \n\t\tfor ( final String s : lines ) { \n\t\t\tw . write ( s + System . getProperty ( NUM00 ) ) ; \n\t\t\t} \n\t\t} \n\t$F33744 ( f ) } \n"}, {"code": "public static void readSkel ( BufferedReader reader ) throws IOException { \n\t$F6518 ( lines ) $F280 ( section ) String ln ; \n\twhile $F443 ( ln , reader ) { \n\t\tif $F3106 ( ln ) { \n\t\t\t$F147908 ( lines , section ) $F4910 ( section ) } \n\t\telse $F31988 ( section , ln , NL ) } \n\tif $F4012 ( section ) $F147908 ( lines , section ) if $F137887 ( lines , size ) { \n\t\tOut . error ( ErrorMessages . WRONG_SKELETON ) ; \n\t\tthrow new GeneratorException $F72 ; \n\t\t} \n\t$F58180 ( line , size ) for ( $F119 ( i , size ) ) line [ i ] = $F1766 ( lines , i ) ; \n\t} \n"}, {"code": "$F1 public long readDouble ( String filePath , long offset ) { \n\tFileChannel fileChannel = updateCache ( filePath ) ; \n\tByteBuffer byteBffer = read ( fileChannel , CarbonCommonConstants . LONG_SIZE_IN_BYTE , offset ) ; \n\treturn byteBffer . getLong ( ) ; \n\t} \n"}, {"code": "public LuaCompiler ( CompilerSettings settings ) $F36568 ( this , Objects , settings ) "}, {"code": "$F1431 public void test_putGet3 $F72 { \n\t$F199667 ( in ) { \n\t\t$F462168 ( x , Var ) $F462168 ( y , Var ) $F462168 ( z , Var ) { \n\t\t\t$F73066 ( t ) { \n\t\t\t\t$F221450 ( b ) $F462171 ( b , x , termId ) $F462171 ( b , y , termId2 ) t . add ( b ) ; \n\t\t\t\t} \n\t\t\t{ \n\t\t\t\t$F221450 ( b ) $F462171 ( b , x , termId2 ) $F462171 ( b , y , inlineIV ) $F462171 ( b , z , blobIV ) t . add ( b ) ; \n\t\t\t\t} \n\t\t\t$F199674 ( in , t ) } \n\t\t} \n\t$F61105 ( solutionSet , getName ) $F199682 ( solutionSetsManager , solutionSet , fail , log , ex ) $F199689 ( solutionSetsManager , solutionSet , in ) $F199692 ( out , solutionSetsManager , solutionSet ) assertSameSolutionsAnyOrder ( $F15849 ( flatten , in ) , out ) ; \n\t} \n"}, {"code": "public static void showAddressOnMap ( Context mContext , String address ) { \n\t$F2936 ( address ) Intent geoIntent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( NUM00 + address ) ) ; \n\tmContext . startActivity ( geoIntent ) ; \n\t} \n"}, {"code": "$F32632 ( criteria , createCriteriaInternal , oredCriteria ) "}, {"code": "public void testCopyMap $F72 { \n\tSerializer serializer = new Serializer $F72 ; \n\t$F35131 ( map ) $F16824 ( map ) $F16824 ( map ) $F2539 result = serializer . copy ( map ) ; \n\tassertEquals ( map , result ) ; \n\tassertEquals ( map . get ( NUM00 ) , NUM00 ) ; \n\tassertEquals ( map . get ( NUM00 ) , NUM00 ) ; \n\t} \n"}, {"code": "private void findBouncedInstrument $F72 { \n\tfor ( final ReceiptInstrumentInfo instrumentInfo : instrumentDetails ) if ( instrumentInfo . isBounced ( ) ) bouncedInstruments . add ( instrumentInfo ) ; \n\t} \n"}, {"code": "public static $F2689 convertArrayToSet $F4374 ( array ) { \n\t$F2689 resultSet = new $F2690 ( array . length ) ; \n\tCollections . addAll ( resultSet , array ) ; \n\treturn resultSet ; \n\t} \n"}, {"code": "public ParseFile $F97 ( data ) { \n\tthis ( null , data , null ) ; \n\t} \n"}, {"code": "private StoragePolicyEntity createStoragePolicyEntity ( NamespaceEntity namespaceEntity , String storagePolicyName , StorageEntity storageEntity , StorageEntity destinationStorageEntity , StoragePolicyRuleTypeEntity storagePolicyRuleTypeEntity , Integer storagePolicyRuleValue , BusinessObjectDefinitionEntity businessObjectDefinitionEntity , String businessObjectFormatUsage , FileTypeEntity fileTypeEntity , StoragePolicyStatusEntity storagePolicyStatusEntity , Integer storagePolicyVersion , Boolean storagePolicyLatestVersion ) { \n\tStoragePolicyEntity storagePolicyEntity = new StoragePolicyEntity $F72 ; \n\tstoragePolicyEntity . setNamespace ( namespaceEntity ) ; \n\tstoragePolicyEntity . setName ( storagePolicyName ) ; \n\tstoragePolicyEntity . setStorage ( storageEntity ) ; \n\tstoragePolicyEntity . setDestinationStorage ( destinationStorageEntity ) ; \n\tstoragePolicyEntity . setStoragePolicyRuleType ( storagePolicyRuleTypeEntity ) ; \n\tstoragePolicyEntity . setStoragePolicyRuleValue ( storagePolicyRuleValue ) ; \n\tstoragePolicyEntity . setBusinessObjectDefinition ( businessObjectDefinitionEntity ) ; \n\tif $F16093 ( StringUtils , businessObjectFormatUsage ) { \n\t\tstoragePolicyEntity . setUsage ( businessObjectFormatUsage ) ; \n\t\t} \n\tstoragePolicyEntity . setFileType ( fileTypeEntity ) ; \n\tstoragePolicyEntity . setStatus ( storagePolicyStatusEntity ) ; \n\tstoragePolicyEntity . setVersion ( storagePolicyVersion ) ; \n\tstoragePolicyEntity . setLatestVersion ( storagePolicyLatestVersion ) ; \n\t$F11907 ( storagePolicyDao , storagePolicyEntity ) } \n"}, {"code": "public void drawStdDevLine ( Graphics2D g2d , Long stdDevVal , long yMaxMark , Color color ) { \n\tfloat stdDevPerc = stdDevVal / ( float ) yMaxMark ; \n\tg2d . setColor ( color ) ; \n\tint yPosOfLine = this . graphBottom - Math . round ( this . graphHeight * stdDevPerc ) ; \n\tg2d . drawLine ( this . graphLeft , yPosOfLine , this . graphRight , yPosOfLine ) ; \n\t} \n"}, {"code": "public SampleVcpc ( IndependenceTest independenceTest ) { \n\t$F18045 ( independenceTest ) if ( ! ( independenceTest instanceof IndTestFisherZ ) ) $F825 this . independenceTest = independenceTest ; \n\tthis . dataSet = ( DataSet ) independenceTest . getData ( ) ; \n\tthis . variables = dataSet . getVariables ( ) ; \n\tthis . covMatrix = new CovarianceMatrix ( dataSet ) ; \n\t$F27878 nodes = covMatrix . getVariables ( ) ; \n\tthis . indexMap = indexMap ( variables ) ; \n\tthis . nameMap = mapNames ( variables ) ; \n\tthis . nodesToVariables = $F4190 ; \n\tthis . variablesToNodes = $F4190 ; \n\t} \n"}, {"code": "private int nextAvailableIdx ( $F2306 startedGrids , int maxTopSize , Random rnd ) { \n\twhile ( _BOOL ) { \n\t\t$F123945 ( idx , rnd , maxTopSize ) if $F2200 ( startedGrids , idx ) return idx ; \n\t\t} \n\t} \n"}, {"code": "public boolean hasColor $F72 $F298 ( typeString , COLOR ) "}, {"code": "$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel ) "}, {"code": "public ClearanceMatrix ( int p_class_count , BrdLayerStructure p_layer_structure , $F806 p_name_arr ) { \n\tclass_count = Math . max ( p_class_count , NUM00 ) ; \n\tlayer_structure = p_layer_structure ; \n\tclearance_rows = new ClearanceMatrixRow [ class_count ] ; \n\tfor ( $F1316 ( index , class_count ) ) { \n\t\tclearance_rows [ index ] = new ClearanceMatrixRow ( this , p_name_arr [ index ] ) ; \n\t\t} \n\t$F103411 ( max_value_on_layer , layer_structure ) } \n"}, {"code": "public static $F1469 concat ( $F1469 base , $F1469 other , int appendCount ) { \n\t$F4711 ( length , base ) $F1469 newArray = copyFrom ( base , base . length + appendCount ) ; \n\t$F6483 ( System , other , newArray , length , appendCount ) return newArray ; \n\t} \n"}, {"code": "public ArrayRealVector ( ArrayRealVector v1 , ArrayRealVector v2 ) { \n\tdata = new double [ v1 . data . length + v2 . data . length ] ; \n\t$F79243 ( System , v1 , data ) System . arraycopy ( v2 . data , NUM00 , data , v1 . data . length , v2 . data . length ) ; \n\t} \n"}, {"code": "void addClassList ( String classListFilename ) { \n\tif $F4012 ( classListFilename ) { \n\t\tsetOption ( NUM00 , classListFilename ) ; \n\t\tloadClassNames ( classListFilename ) ; \n\t\t} \n\telse $F825 } \n"}, {"code": "private Start build ( Start event ) { \n\t$F32683 ( list , event ) $F19322 ( length , list ) for ( $F119 ( i , length ) ) { \n\t\t$F61359 ( node , list , i ) Attribute value = attribute ( node ) ; \n\t\tif ( ! value . isReserved ( ) ) $F207 ( event , value ) } \n\treturn event ; \n\t} \n"}, {"code": "public BytesToNameCanonicalizer makeChild ( boolean canonicalize , boolean intern ) { \n\treturn new BytesToNameCanonicalizer ( this , intern , _hashSeed , _tableInfo . get ( ) ) ; \n\t} \n"}, {"code": "public static String encodeString ( String s ) { \n\treturn new String ( encode ( s . getBytes ( ) ) ) ; \n\t} \n"}, {"code": "public Instances retrieveInstances $F72 throws Exception $F4915 ( retrieveInstances , m_Query ) "}, {"code": "void extract ( InputStream in , String files [ ] ) throws IOException { \n\t$F78817 ( zis , in ) ; \n\tZipEntry e ; \n\tSet < ZipEntry > dirs = newDirSet ( ) ; \n\twhile $F78823 ( e , zis ) { \n\t\tif ( files == null ) $F18351 ( dirs , extractFile , zis , e ) else { \n\t\t\t$F20605 ( name , e ) for ( String file : files ) { \n\t\t\t\tif $F7311 ( name , file ) { \n\t\t\t\t\t$F12366 ( dirs , extractFile , zis , e ) $F597 } \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tupdateLastModifiedTime ( dirs ) ; \n\t} \n"}, {"code": "$F49286 ( value , absMin , absMax , absValue , Math ) "}, {"code": "public void testGetAccentColorsByName $F72 { \n\ttry { \n\t\tfor ( String name : MaterialPalettes . COLORS_WITH_ACCENT_NAMES ) { \n\t\t\t$F3807 colorList = MaterialPalettes . getAccentColorsByName ( name ) ; \n\t\t\tassertEquals ( MaterialPalettes . ACCENT_COLOR_LEVELS . length , colorList . size ( ) ) ; \n\t\t\t} \n\t\t} \n\t$F43478 ( fail ) } \n"}, {"code": "private static void drawChunk ( Image image , Graphics g , boolean stretch , int dx1 , int dy1 , int dx2 , int dy2 , int sx1 , int sy1 , int sx2 , int sy2 , boolean xDirection ) { \n\tif ( dx2 - dx1 <= NUM00 || dy2 - dy1 <= NUM00 || sx2 - sx1 <= NUM00 || sy2 - sy1 <= NUM00 ) $F932 if ( stretch ) { \n\t\tg . drawImage ( image , dx1 , dy1 , dx2 , dy2 , sx1 , sy1 , sx2 , sy2 , null ) ; \n\t\t} \n\telse { \n\t\tint xSize = sx2 - sx1 ; \n\t\tint ySize = sy2 - sy1 ; \n\t\tint deltaX ; \n\t\tint deltaY ; \n\t\tif ( xDirection ) { \n\t\t\tdeltaX = xSize ; \n\t\t\tdeltaY = NUM00 ; \n\t\t\t} \n\t\telse { \n\t\t\tdeltaX = NUM00 ; \n\t\t\tdeltaY = ySize ; \n\t\t\t} \n\t\twhile ( dx1 < dx2 && dy1 < dy2 ) { \n\t\t\tint newDX2 = Math . min ( dx2 , dx1 + xSize ) ; \n\t\t\tint newDY2 = Math . min ( dy2 , dy1 + ySize ) ; \n\t\t\tg . drawImage ( image , dx1 , dy1 , newDX2 , newDY2 , sx1 , sy1 , sx1 + newDX2 - dx1 , sy1 + newDY2 - dy1 , null ) ; \n\t\t\tdx1 += deltaX ; \n\t\t\tdy1 += deltaY ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void initSign $F72 { \n\t$F2268 ( messDigestTrees ) GMSSPrivateKeyParameters gmssPrivateKey = ( GMSSPrivateKeyParameters ) key ; \n\tif ( gmssPrivateKey . isUsed ( ) ) $F4639 if ( gmssPrivateKey . getIndex ( NUM00 ) >= gmssPrivateKey . getNumLeafs ( NUM00 ) ) $F4639 this . gmssPS = gmssPrivateKey . getParameters ( ) ; \n\tthis . numLayer = gmssPS . getNumOfLayers ( ) ; \n\t$F96 seed = gmssPrivateKey . getCurrentSeeds ( ) [ numLayer - NUM00 ] ; \n\t$F2175 ( OTSSeed , mdLength ) $F2175 ( dummy , mdLength ) $F135 ( System , seed , dummy , mdLength ) OTSSeed = gmssRandom . nextSeed ( dummy ) ; \n\tthis . ots = new WinternitzOTSignature ( OTSSeed , digestProvider . get ( ) , gmssPS . getWinternitzParameter ( ) [ numLayer - NUM00 ] ) ; \n\tbyte [ ] [ ] [ ] helpCurrentAuthPaths = gmssPrivateKey . getCurrentAuthPaths ( ) ; \n\tcurrentAuthPaths = new byte [ numLayer ] [ ] [ ] ; \n\tfor ( $F119 ( j , numLayer ) ) { \n\t\tcurrentAuthPaths [ j ] = new byte [ helpCurrentAuthPaths [ j ] . length ] [ mdLength ] ; \n\t\tfor ( $F179379 ( i , helpCurrentAuthPaths , j ) ) { \n\t\t\tSystem . arraycopy ( helpCurrentAuthPaths [ j ] [ i ] , NUM00 , currentAuthPaths [ j ] [ i ] , NUM00 , mdLength ) ; \n\t\t\t} \n\t\t} \n\t$F3936 ( index , numLayer ) System . arraycopy ( gmssPrivateKey . getIndex ( ) , NUM00 , index , NUM00 , numLayer ) ; \n\t$F96 helpSubtreeRootSig ; \n\tsubtreeRootSig = new byte [ numLayer - NUM00 ] [ ] ; \n\tfor ( $F4864 ( i , numLayer ) ) { \n\t\thelpSubtreeRootSig = gmssPrivateKey . getSubtreeRootSig ( i ) ; \n\t\tsubtreeRootSig [ i ] = $F3027 ( helpSubtreeRootSig ) ; \n\t\tSystem . arraycopy ( helpSubtreeRootSig , NUM00 , subtreeRootSig [ i ] , NUM00 , helpSubtreeRootSig . length ) ; \n\t\t} \n\tgmssPrivateKey . markUsed ( ) ; \n\t} \n"}, {"code": "$F117302 ( bits , result , i , edifactValue , bitsLeft ) "}, {"code": "public void write $F24576 ( b , offset , length ) throws IOException $F21537 ( out , b , offset , length ) "}, {"code": "public SampleSet ( DataInputStream is ) throws IOException { \n\tint numSamples ; \n\tsampleInfo = new SampleInfo ( is ) ; \n\t$F5961 ( numSamples , is ) this . samples = new Sample [ numSamples ] ; \n\tfor ( $F119 ( i , numSamples ) ) { \n\t\tsamples [ i ] = Sample . loadBinary ( is ) ; \n\t\t} \n\t} \n"}, {"code": "public void close $F72 { \n\trunning = _BOOL ; \n\t$F8073 ( histData ) } \n"}, {"code": "public SQLiteDatabaseConfiguration ( String path , @ SQLiteDatabase . OpenFlags int openFlags ) { \n\t$F826 ( path ) this . path = path ; \n\tlabel = stripPathForLogs ( path ) ; \n\tthis . openFlags = openFlags ; \n\tmaxSqlCacheSize = NUM00 ; \n\t$F39044 ( locale , Locale ) } \n"}, {"code": "private void printProperties ( Properties properties ) throws IOException { \n\t$F29429 ( stringBuffer ) BufferedReader reader = null ; \n\t$F145993 ( properties , stringBuffer ) try { \n\t\treader = new BufferedReader ( $F86540 ( stringBuffer ) ) ; \n\t\t$F224956 ( reader ) String line = null ; \n\t\twhile $F443 ( line , reader ) { \n\t\t\t$F21384 ( writer ) writer . println ( line ) ; \n\t\t\t} \n\t\t} \n\t$F14364 ( reader ) } \n"}, {"code": "public static $F4203 Range $F4203 valueOf $F92641 ( s , clazz ) { \n\t$F12685 ( lbm , s ) if $F22868 ( lbm ) $F29415 ( s ) $F185195 ( ubm , s ) if $F22868 ( ubm ) $F29415 ( s ) BoundType lbt = lbm == NUM00 ? BoundType . CLOSED : BoundType . OPEN ; \n\tBoundType ubt = ubm == NUM00 ? BoundType . CLOSED : BoundType . OPEN ; \n\t$F8993 ( s ) $F6542 ( parts , s ) String lbs = parts [ NUM00 ] ; \n\tString ubs = parts [ NUM00 ] ; \n\tT lowerBound = lbs . equals ( NUM00 ) ? null : boundValue ( lbs , clazz ) ; \n\tT upperBound = ubs . equals ( NUM00 ) ? null : boundValue ( ubs , clazz ) ; \n\treturn range ( lowerBound , lbt , upperBound , ubt ) ; \n\t} \n"}, {"code": "public static DoubleVector dchisq ( double x , DoubleVector ncp ) { \n\t$F2199 ( n , ncp ) DoubleVector d = new DoubleVector ( n ) ; \n\t$F96817 ( xh , Math , x ) double mean ; \n\tfor ( $F119 ( i , n ) ) { \n\t\tmean = Math . sqrt ( ncp . get ( i ) ) ; \n\t\tif ( ncp . get ( i ) == NUM00 ) $F73072 ( d , i , dchisq , x ) else d . set ( i , ( dnorm ( xh - mean ) + dnorm ( - xh - mean ) ) / ( NUM00 * xh ) ) ; \n\t\t} \n\treturn d ; \n\t} \n"}, {"code": "$F43832 ( listener , propertyChangeSupport ) "}, {"code": "public void removeAllBaudRateQueryCallbacks $F72 $F9096 ( baudRateQueryCallbacks ) "}, {"code": "public void add ( AbstractOption option ) { \n\t$F28711 ( add , options , option ) ; \n\t} \n"}, {"code": "private void loadVerticesAndRelatives $F72 { \n\tList < CnATreeElement > elementList = new LinkedList < CnATreeElement > $F72 ; \n\tfor ( IGraphElementLoader loader : getLoaderList ( ) ) { \n\t\tloader . setCnaTreeElementDao ( getCnaTreeElementDao ( ) ) ; \n\t\telementList . addAll ( loader . loadElements ( ) ) ; \n\t\t} \n\tfor ( CnATreeElement element : elementList ) { \n\t\tgraph . addVertex ( element ) ; \n\t\tif $F585 ( LOG ) { \n\t\t\tLOG . debug ( NUM00 + element . getTitle ( ) ) ; \n\t\t\t} \n\t\tuuidMap . put ( element . getUuid ( ) , element ) ; \n\t\t} \n\tfor ( CnATreeElement parent : elementList ) { \n\t\tSet < CnATreeElement > children = parent . getChildren ( ) ; \n\t\tfor ( CnATreeElement child : children ) { \n\t\t\tcreateParentChildEdge ( parent , child ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private boolean hasNonSpecialAttribute $F34102 ( keys ) { \n\tfor ( String attr : keys ) { \n\t\tif $F14943 ( attr ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static final void shuffle ( $F1986 a , int start , int len , Random r ) { \n\tfor ( $F266235 ( i , start , len ) ) { \n\t\tdouble t = a [ i ] ; \n\t\t$F123945 ( j , r , i ) a [ i ] = a [ j ] ; \n\t\ta [ j ] = t ; \n\t\t} \n\t} \n"}, {"code": "public boolean isParityCorrect ( $F31427 ( shards ) , int firstByte , int byteCount , $F96 tempBuffer ) { \n\tcheckBuffersAndSizes ( shards , firstByte , byteCount ) ; \n\tif ( tempBuffer . length < firstByte + byteCount ) $F825 $F57503 ( toCheck , parityShardCount ) $F21535 ( System , shards , dataShardCount , toCheck , parityShardCount ) return codingLoop . checkSomeShards ( parityRows , shards , dataShardCount , toCheck , parityShardCount , firstByte , byteCount , tempBuffer ) ; \n\t} \n"}, {"code": "public static void writeStream ( InputStream in , File file ) throws IOException { \n\t$F4649 ( out , file ) try { \n\t\ttransfer ( in , out ) ; \n\t\t} \n\tfinally { \n\t\ttry $F29882 ( out ) $F3229 ( out ) } \n\t} \n"}, {"code": "private static native long createEntityParser ( long parentPointer , String context ) ; \n"}, {"code": "public void firePropertyChange ( String propertyName , byte oldValue , byte newValue ) { \n\t$F24157 ( changeSupport , oldValue , newValue ) firePropertyChange ( propertyName , Byte . valueOf ( oldValue ) , Byte . valueOf ( newValue ) ) ; \n\t} \n"}, {"code": "private int adjustOffsetForUnitTests ( int offset ) { \n\tif ( System . getProperty ( NUM00 ) == null ) return offset ; \n\telse $F1082 } \n"}, {"code": "$F9863 ( child , dx , dy , _BOOL , checkHorizontal , mCallback , checkVertical , mTouchSlop , Math ) "}, {"code": "public static boolean isAix $F72 $F144200 ( osName ) "}, {"code": "private double testFit ( $F1986 x , $F1986 test , Distribution dist ) throws ArithmeticException { \n\tfor ( $F1139 ( i , test ) ) { \n\t\ttest [ i ] = dist . cdf ( x [ i ] ) ; \n\t\tif ( test [ i ] > NUM00 ) $F5629 ( test , i ) if ( test [ i ] < NUM00 ) $F5629 ( test , i ) if $F1998 ( Double , test , i ) { \n\t\t\tthrow new ArithmeticException $F3943 ( dist ) ; \n\t\t\t} \n\t\t} \n\tArrays . sort ( test ) ; \n\treturn KolmogorovSmirnovTest . simpleTest ( test ) ; \n\t} \n"}, {"code": "public boolean supportsSQL $F72 { \n\treturn _BOOL ; \n\t} \n"}, {"code": "private static Boolean isValidIPV4 ( final String ipAddress ) { \n\tboolean status = _BOOL ; \n\tif $F35028 ( StringUtils , ipAddress ) { \n\t\tstatus = InetAddressUtils . isIPv4Address ( ipAddress ) ; \n\t\t} \n\treturn status ; \n\t} \n"}, {"code": "private int decryptBlockWithIV $F59451 ( in , inOff , out , outOff ) throws $F5278 { \n\t$F59453 ( inOff , blockSize , in ) $F59453 ( outOff , blockSize , out ) if ( count == NUM00 ) { \n\t\tfor ( $F119 ( n , blockSize ) ) { \n\t\t\tFR [ n ] = in [ inOff + n ] ; \n\t\t\t} \n\t\t$F59455 ( cipher , FR , FRE ) count += blockSize ; \n\t\t$F1082 } \n\telse if ( count == blockSize ) { \n\t\t$F21535 ( System , in , inOff , tmp , blockSize ) System . arraycopy ( FR , NUM00 , FR , NUM00 , blockSize - NUM00 ) ; \n\t\tFR [ blockSize - NUM00 ] = tmp [ NUM00 ] ; \n\t\tFR [ blockSize - NUM00 ] = tmp [ NUM00 ] ; \n\t\t$F59455 ( cipher , FR , FRE ) for ( $F4864 ( n , blockSize ) ) { \n\t\t\tout [ outOff + n ] = encryptByte ( tmp [ n + NUM00 ] , n ) ; \n\t\t\t} \n\t\tSystem . arraycopy ( tmp , NUM00 , FR , NUM00 , blockSize - NUM00 ) ; \n\t\tcount += NUM00 ; \n\t\treturn blockSize - NUM00 ; \n\t\t} \n\telse if ( count >= blockSize + NUM00 ) { \n\t\t$F21535 ( System , in , inOff , tmp , blockSize ) out [ outOff + NUM00 ] = encryptByte ( tmp [ NUM00 ] , blockSize - NUM00 ) ; \n\t\tout [ outOff + NUM00 ] = encryptByte ( tmp [ NUM00 ] , blockSize - NUM00 ) ; \n\t\tSystem . arraycopy ( tmp , NUM00 , FR , blockSize - NUM00 , NUM00 ) ; \n\t\t$F59455 ( cipher , FR , FRE ) for ( $F4864 ( n , blockSize ) ) { \n\t\t\tout [ outOff + n + NUM00 ] = encryptByte ( tmp [ n + NUM00 ] , n ) ; \n\t\t\t} \n\t\tSystem . arraycopy ( tmp , NUM00 , FR , NUM00 , blockSize - NUM00 ) ; \n\t\t} \n\treturn blockSize ; \n\t} \n"}, {"code": "public static PTABridge v $F72 { \n\treturn v ; \n\t} \n"}, {"code": "public void registerCacheUpdatePeriodChangeListener ( final PropertyChangeListener listener ) $F207 ( cacheUpdatePeriodListeners , listener ) "}, {"code": "public void makeImmutable $F72 $F845 "}, {"code": "public void testNullStoredField $F72 throws Exception { \n\tDirectory dir = newDirectory ( ) ; \n\tAnalyzer analyzer = new MockAnalyzer ( random ( ) ) ; \n\tIndexWriter iw = new IndexWriter ( dir , new IndexWriterConfig ( analyzer ) ) ; \n\t$F10888 ( doc ) iw . addDocument ( doc ) ; \n\texpectThrows ( $F85137 , null ) ; \n\tassertNull ( iw . getTragicException ( ) ) ; \n\t$F59 ( iw ) DirectoryReader r = DirectoryReader . open ( dir ) ; \n\tassertEquals ( NUM00 , r . numDocs ( ) ) ; \n\t$F59 ( r ) $F59 ( dir ) } \n"}, {"code": "public void addUpdateListener ( AnimatorUpdateListener listener ) { \n\tif ( mUpdateListeners == null ) { \n\t\tmUpdateListeners = new ArrayList < AnimatorUpdateListener > $F72 ; \n\t\t} \n\tmUpdateListeners . add ( listener ) ; \n\t} \n"}, {"code": "public String encode $F72 { \n\t$F280 ( sb ) encode ( sb ) ; \n\t$F92 ( sb ) } \n"}, {"code": "public static Document readDocument ( String fileName ) throws $F55616 { \n\tDocumentBuilder docBuilder ; \n\tDocument result = null ; \n\t$F2218 ( docBuilderFactory , DocumentBuilderFactory ) docBuilderFactory . setIgnoringElementContentWhitespace ( _BOOL ) ; \n\ttry { \n\t\t$F6281 ( docBuilder , docBuilderFactory ) } \n\tcatch ( ParserConfigurationException e ) $F62406 ( e ) $F1705 ( sourceFile , fileName ) result = docBuilder . parse ( sourceFile ) ; \n\treturn result ; \n\t} \n"}, {"code": "$F1 public $F1986 analyse $F9830 ( aFrame ) { \n\tif ( aFrame . length != frameLength ) throw new IllegalArgumentException ( NUM00 + frameLength + NUM00 + aFrame . length ) ; \n\t$F9662 ( real , fftSize ) $F9662 ( imag , fftSize ) $F7057 ( System , aFrame , real ) FFT . transform ( real , imag , _BOOL ) ; \n\tMathUtils . toPolarCoordinates ( real , imag ) ; \n\treal = MathUtils . log ( real ) ; \n\t$F9952 ( Arrays , imag ) double b = NUM00 ; \n\t$F113182 ( bIndex , b , frequencyResolution ) $F1986 invReal ; \n\t$F1986 invImag ; \n\tif ( invFftSize == fftSize ) { \n\t\tinvReal = real ; \n\t\tinvImag = imag ; \n\t\t} \n\telse { \n\t\t$F10254 ( invReal , invFftSize ) $F10236 ( System , real , invReal , bIndex ) $F10254 ( invImag , invFftSize ) } \n\tfor ( int i = bIndex + NUM00 ; \n\ti < invFftSize / NUM00 ; \n\ti ++ ) $F346295 ( invReal , i , bIndex ) for ( $F264992 ( i , invFftSize ) ) { \n\t\tinvReal [ invFftSize - i - NUM00 ] = invReal [ i ] ; \n\t\t} \n\tFFT . transform ( invReal , invImag , _BOOL ) ; \n\treturn invReal ; \n\t} \n"}, {"code": "public SearchSourceBuilder scriptField ( String name , Script script ) { \n\t$F9406 ( scriptFields ) scriptFields . add ( new ScriptField ( name , script ) ) ; \n\treturn this ; \n\t} \n"}, {"code": "public void fixedAspectResizeInner ( RectF newInner ) { \n\tMatrix m = getRotMatrix ( ) ; \n\tMatrix m0 = getInverseRotMatrix ( ) ; \n\tfloat aspectW = inner . width ( ) ; \n\tfloat aspectH = inner . height ( ) ; \n\tfloat aspRatio = aspectW / aspectH ; \n\t$F282780 ( corners , CropMath , outer ) m . mapPoints ( corners ) ; \n\t$F282780 ( oldInnerCorners , CropMath , inner ) $F282780 ( newInnerCorners , CropMath , newInner ) int fixed = - NUM00 ; \n\tif ( inner . top == newInner . top ) { \n\t\tif ( inner . left == newInner . left ) fixed = NUM00 ; \n\t\telse if ( inner . right == newInner . right ) fixed = NUM00 ; \n\t\t} \n\telse if ( inner . bottom == newInner . bottom ) { \n\t\tif ( inner . right == newInner . right ) fixed = NUM00 ; \n\t\telse if ( inner . left == newInner . left ) fixed = NUM00 ; \n\t\t} \n\tif ( fixed == - NUM00 ) $F665 float widthSoFar = newInner . width ( ) ; \n\tint moved = - NUM00 ; \n\tfor ( $F24429 ( i , newInnerCorners ) ) { \n\t\t$F5415 c = { \n\t\t\tnewInnerCorners [ i ] , newInnerCorners [ i + NUM00 ] } \n\t\t; \n\t\t$F5415 c0 = Arrays . copyOf ( c , NUM00 ) ; \n\t\tm0 . mapPoints ( c0 ) ; \n\t\tif ( ! CropMath . inclusiveContains ( $F156480 ( outer , c0 ) ) ) { \n\t\t\tmoved = i ; \n\t\t\t$F73688 ( moved , fixed ) $F5415 l2 = CropMath . closestSide ( c , corners ) ; \n\t\t\t$F5415 l1 = { \n\t\t\t\tnewInnerCorners [ i ] , newInnerCorners [ i + NUM00 ] , oldInnerCorners [ i ] , oldInnerCorners [ i + NUM00 ] } \n\t\t\t; \n\t\t\t$F5415 p = GeometryMathUtils . lineIntersect ( l1 , l2 ) ; \n\t\t\tif ( p == null ) { \n\t\t\t\t$F155572 ( p ) p [ NUM00 ] = oldInnerCorners [ i ] ; \n\t\t\t\tp [ NUM00 ] = oldInnerCorners [ i + NUM00 ] ; \n\t\t\t\t} \n\t\t\tfloat fixed_x = oldInnerCorners [ fixed ] ; \n\t\t\tfloat fixed_y = oldInnerCorners [ fixed + NUM00 ] ; \n\t\t\tfloat newWidth = Math . abs ( fixed_x - p [ NUM00 ] ) ; \n\t\t\tfloat newHeight = Math . abs ( fixed_y - p [ NUM00 ] ) ; \n\t\t\tnewWidth = Math . max ( newWidth , aspRatio * newHeight ) ; \n\t\t\t$F7547 ( newWidth , widthSoFar ) } \n\t\t} \n\tfloat heightSoFar = widthSoFar / aspRatio ; \n\tRectF ret = new RectF ( inner ) ; \n\tif ( fixed == NUM00 ) { \n\t\t$F68813 ( ret , widthSoFar ) ret . bottom = ret . top + heightSoFar ; \n\t\t} \n\telse if ( fixed == NUM00 ) { \n\t\tret . left = ret . right - widthSoFar ; \n\t\tret . bottom = ret . top + heightSoFar ; \n\t\t} \n\telse if ( fixed == NUM00 ) { \n\t\tret . left = ret . right - widthSoFar ; \n\t\tret . top = ret . bottom - heightSoFar ; \n\t\t} \n\telse if ( fixed == NUM00 ) { \n\t\t$F68813 ( ret , widthSoFar ) ret . top = ret . bottom - heightSoFar ; \n\t\t} \n\t$F282780 ( retCorners , CropMath , ret ) m0 . mapPoints ( retCorners ) ; \n\tinnerRotated = retCorners ; \n\treconstrain ( ) ; \n\t} \n"}, {"code": "public static $F4203 T withObjectStreams ( Socket socket , @ ClosureParams ( value = SimpleType . class , $F158694 ) $F158697 closure ) throws IOException { \n\t$F517 ( input , socket ) $F147972 ( output , socket ) $F7054 ( oos , output ) $F67402 ( ois , input ) try { \n\t\tT result = closure . call ( $F40356 ( ois , oos ) ) ; \n\t\tInputStream temp1 = ois ; \n\t\tois = null ; \n\t\t$F59 ( temp1 ) temp1 = input ; \n\t\tinput = null ; \n\t\t$F59 ( temp1 ) OutputStream temp2 = oos ; \n\t\toos = null ; \n\t\t$F59 ( temp2 ) temp2 = output ; \n\t\toutput = null ; \n\t\t$F59 ( temp2 ) return result ; \n\t\t} \n\tfinally { \n\t\tcloseWithWarning ( ois ) ; \n\t\tcloseWithWarning ( input ) ; \n\t\tcloseWithWarning ( oos ) ; \n\t\tcloseWithWarning ( output ) ; \n\t\t} \n\t} \n"}, {"code": "public JFileDataStoreChooser ( Shell parent , int style , final $F806 extensions ) { \n\tthis ( parent , style , associations ( Arrays . asList ( extensions ) ) ) ; \n\t} \n"}, {"code": "private void adjustAlignment ( int align , int curAlign ) { \n\tif ( ( ! FIXED_WIDTH ) && ( align != curAlign ) ) { \n\t\tif ( curLine . getComponentCount ( ) == NUM00 ) { \n\t\t\tcurLine . setLayout ( new FlowLayout ( curAlign ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F99425 ( os , writeInt , CACHE_MAGIC , writeString , key , etag , writeLong , serverDate , lastModified , ttl , softTtl , writeStringStringMap , responseHeaders , _BOOL , VolleyLog , e ) "}, {"code": "public void removeListener ( TrackingListener listener ) $F106 ( listeners , listener ) "}, {"code": "void createImpl ( boolean stream ) throws SocketException { \n\t$F21009 ( impl , setImpl ) try { \n\t\timpl . create ( stream ) ; \n\t\tcreated = _BOOL ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\tthrow new SocketException $F1783 ( e ) ; \n\t\t} \n\t} \n"}, {"code": "$F29611 ( remaining , count , EMPTY_BYTE_ARRAY , pos , buf , buffers , c , Math , System , newbuf ) "}, {"code": "public boolean shExpMatch ( String str , String shexp ) { \n\t$F17727 ( tokenizer , shexp ) int startPos = NUM00 ; \n\twhile $F14498 ( tokenizer ) { \n\t\t$F8095 ( token , tokenizer ) $F204924 ( temp , str , token , startPos ) if ( startPos == NUM00 && $F14942 ( shexp ) && temp != NUM00 ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\tif ( ! tokenizer . hasMoreTokens ( ) && $F2363 ( shexp ) && ! str . endsWith ( token ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\tif ( temp == - NUM00 ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\telse { \n\t\t\t$F46880 ( startPos , temp , token ) } \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public char peek $F72 { \n\treturn isEmpty ( ) ? NUM00 : queue . charAt ( pos ) ; \n\t} \n"}, {"code": "private $F806 parentKey ( String name , int idx ) { \n\t$F6542 ( parts , name ) if ( idx > parts . length ) $F1274 String parent = NUM00 ; \n\tString key = null ; \n\tif ( idx < parts . length ) key = parts [ idx ] ; \n\tfor ( $F119 ( i , idx ) ) { \n\t\tparent = $F20 ( parent ) ? parent + NUM00 + parts [ i ] : parts [ i ] ; \n\t\t} \n\t$F162567 ( parent , key ) } \n"}, {"code": "public DiphoneUnitDatabase ( URL url , boolean isBinary ) throws IOException { \n\tif ( ! useIndexing || useCache ) { \n\t\t$F170950 ( diphoneMap ) } \n\t$F83713 ( is , Utilities , url ) $F57584 ( indexName , getIndexName , url ) ; \n\tif ( isBinary ) { \n\t\tloadBinary ( is ) ; \n\t\t} \n\telse { \n\t\tloadText ( is ) ; \n\t\t} \n\t$F59 ( is ) sampleInfo = new SampleInfo ( sampleRate , numChannels , residualFold , lpcMin , lpcRange , NUM00 ) ; \n\t} \n"}, {"code": "public static List < NotificationDto > transformToDto ( List < Notification > notifications ) { \n\t$F3758 ( notifications , Status ) List < NotificationDto > result = new ArrayList < NotificationDto > $F72 ; \n\tfor ( Notification notification : notifications ) $F3762 ( result , transformToDto , notification ) return result ; \n\t} \n"}, {"code": "public void writeTo ( final PacketOutputStream os ) { \n\tos . write ( ParameterWriter . QUOTE ) ; \n\tos . write ( dateToByte ( ) ) ; \n\tParameterWriter . formatMicroseconds ( os , ts . getNanos ( ) / NUM00 , fractionalSeconds ) ; \n\tos . write ( ParameterWriter . QUOTE ) ; \n\t} \n"}, {"code": "public long skip ( long n ) throws IOException , LogException { \n\tif ( length < n ) badRead ( ( int ) n ) ; \n\tn = in . skip ( n ) ; \n\tlength -= ( int ) n ; \n\treturn n ; \n\t} \n"}, {"code": "public DriverTask discoverStorageProvider ( StorageProvider storageProvider , List $F464271 storageSystems ) { \n\t$F423222 ( task ) try { \n\t\tLOG . info ( NUM00 , storageProvider . getProviderHost ( ) , storageProvider . getPortNumber ( ) , storageProvider . getUsername ( ) ) ; \n\t\tStorageCenterAPI api = connectionManager . getConnection ( storageProvider . getProviderHost ( ) , storageProvider . getPortNumber ( ) , storageProvider . getUsername ( ) , storageProvider . getPassword ( ) , _BOOL ) ; \n\t\tLOG . info ( NUM00 , storageProvider . getProviderHost ( ) , storageProvider . getUsername ( ) ) ; \n\t\tstorageProvider . setAccessStatus ( AccessStatus . READ_WRITE ) ; \n\t\tstorageProvider . setManufacturer ( NUM00 ) ; \n\t\tstorageProvider . setProviderVersion ( driverVersion ) ; \n\t\tstorageProvider . setIsSupportedVersion ( _BOOL ) ; \n\t\tEmDataCollector em = api . getDSMInfo ( ) ; \n\t\tif ( em != null ) { \n\t\t\tLOG . info ( NUM00 , em . type , em . version , em . javaVersion ) ; \n\t\t\tstorageProvider . setProviderVersion ( em . version ) ; \n\t\t\t} \n\t\tStorageCenter [ ] scs = api . getStorageCenterInfo ( ) ; \n\t\tfor ( StorageCenter sc : scs ) { \n\t\t\tStorageSystem storageSystem = util . getStorageSystemFromStorageCenter ( api , sc , null ) ; \n\t\t\tstorageSystem . setSystemType ( driverName ) ; \n\t\t\tstorageSystems . add ( storageSystem ) ; \n\t\t\t} \n\t\ttask . setStatus ( DriverTask . TaskStatus . READY ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F574 ( msg , String , e ) LOG . error ( msg ) ; \n\t\ttask . setFailed ( msg ) ; \n\t\t} \n\treturn task ; \n\t} \n"}, {"code": "public void zoomIn $F72 $F82623 ( zoomIn ) "}, {"code": "public void removeResponseCodeListener ( ActionListener a ) $F130709 ( responseCodeListeners , a ) "}, {"code": "public InputFieldDialog $F2236 ( CAPTION_KEY , LABEL_KEY ) { \n\tString caption = I18n . tr ( CAPTION_KEY ) ; \n\tFrame frame = GUIMediator . getAppFrame ( ) ; \n\t_dialog = new JDialog ( frame , caption , _BOOL ) ; \n\t$F267778 ( _dialog ) LabeledComponent component = new LabeledComponent ( LABEL_KEY , TEXT_FIELD , LabeledComponent . LEFT_GLUE ) ; \n\t$F806 buttonLabelKeys = { \n\t\tI18n . tr ( NUM00 ) , I18n . tr ( NUM00 ) } \n\t; \n\t$F806 buttonLabelTips = { \n\t\tI18n . tr ( NUM00 ) , I18n . tr ( NUM00 ) } \n\t; \n\tActionListener [ ] buttonListeners = { \n\t\tnew OKListener $F72 , new CancelListener $F72 } \n\t; \n\tButtonRow buttons = new ButtonRow ( buttonLabelKeys , buttonLabelTips , buttonListeners , ButtonRow . X_AXIS , ButtonRow . LEFT_GLUE ) ; \n\t$F320994 ( contentPane , _dialog ) BoxPanel componentPanel = new BoxPanel ( BoxPanel . Y_AXIS ) ; \n\tcomponentPanel . add ( Box . createVerticalGlue ( ) ) ; \n\tcomponentPanel . add ( component . getComponent ( ) ) ; \n\tcomponentPanel . add ( Box . createVerticalGlue ( ) ) ; \n\tMAIN_PANEL . add ( componentPanel ) ; \n\tMAIN_PANEL . add ( Box . createVerticalGlue ( ) ) ; \n\tMAIN_PANEL . add ( buttons ) ; \n\tcontentPane . add ( MAIN_PANEL ) ; \n\t} \n"}, {"code": "public EntityLoadInfo create ( Entity entity ) $F13736 ( create , entity ) "}, {"code": "public Float ( Point2D pt2D ) { \n\tsetLatLon ( pt2D . getY ( ) , pt2D . getX ( ) , _BOOL ) ; \n\t} \n"}, {"code": "public final static boolean isPotentialZipArchive ( String name ) { \n\t$F24867 ( lastDot , name ) $F101463 ( lastDot , _BOOL ) if ( name . lastIndexOf ( File . separatorChar ) > lastDot ) return _BOOL ; \n\t$F115 ( length , name ) int extensionLength = length - lastDot - NUM00 ; \n\tif $F9615 ( extensionLength , EXTENSION_java ) { \n\t\tfor ( $F18298 ( i , extensionLength ) ) { \n\t\t\tif ( Character . toLowerCase ( name . charAt ( length - extensionLength + i ) ) != EXTENSION_java . charAt ( i ) ) $F5153 $F6482 ( i , _BOOL ) } \n\t\t} \n\tif $F9615 ( extensionLength , EXTENSION_class ) { \n\t\tfor ( $F18298 ( i , extensionLength ) ) { \n\t\t\tif ( Character . toLowerCase ( name . charAt ( length - extensionLength + i ) ) != EXTENSION_class . charAt ( i ) ) { \n\t\t\t\treturn _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void open $F72 throws IOException { \n\t$F125428 ( connection ) connection . setSoTimeout ( timeout ) ; \n\t} \n"}, {"code": "$F30491 ( key , value , bitmapSize , getBitmapSize ) "}, {"code": "default void forEachRemaining ( IntConsumer action ) { \n\tObjects . requireNonNull ( action ) ; \n\twhile ( hasNext ( ) ) $F114302 ( action , nextInt ) } \n"}, {"code": "private boolean isCI $F72 { \n\treturn Objects . equals ( System . getenv ( NUM00 ) , NUM00 ) ; \n\t} \n"}, {"code": "public DockNode ( Node contents , String title ) $F16625 ( this , contents , title ) "}, {"code": "public void test2033092 $F72 { \n\tRelativeDateFormat rdf = new RelativeDateFormat $F72 ; \n\trdf . setShowZeroDays ( _BOOL ) ; \n\trdf . setShowZeroHours ( _BOOL ) ; \n\trdf . setMinuteSuffix ( NUM00 ) ; \n\trdf . setHourSuffix ( NUM00 ) ; \n\trdf . setSecondSuffix ( NUM00 ) ; \n\t$F125026 ( hoursFormatter ) $F34862 ( hoursFormatter ) hoursFormatter . setMaximumIntegerDigits ( NUM00 ) ; \n\t$F196677 ( hoursFormatter ) rdf . setHourFormatter ( hoursFormatter ) ; \n\t$F125026 ( minsFormatter ) $F34862 ( minsFormatter ) minsFormatter . setMaximumIntegerDigits ( NUM00 ) ; \n\t$F196677 ( minsFormatter ) rdf . setMinuteFormatter ( minsFormatter ) ; \n\t$F125026 ( secondsFormatter ) $F34862 ( secondsFormatter ) secondsFormatter . setMaximumIntegerDigits ( NUM00 ) ; \n\t$F196677 ( secondsFormatter ) rdf . setSecondFormatter ( secondsFormatter ) ; \n\tString s = rdf . format ( new Date ( $F138998 + NUM00 ) ) ; \n\tassertEquals ( NUM00 , s ) ; \n\t} \n"}, {"code": "$F27671 ( in , buffer , result ) "}, {"code": "public static long parseId ( Uri contentUri ) { \n\tString last = contentUri . getLastPathSegment ( ) ; \n\treturn last == null ? - NUM00 : Long . parseLong ( last ) ; \n\t} \n"}, {"code": "public void disableVM ( String hostname , long durationMillis ) throws IllegalStateException { \n\t$F8817 ( logger , hostname , durationMillis ) assignableVMs . disableUntil ( hostname , System . currentTimeMillis ( ) + durationMillis ) ; \n\t} \n"}, {"code": "protected final void endOfInput $F72 throws IOException { \n\tif ( cacheRequest != null ) $F881 ( cacheBody ) httpEngine . release ( _BOOL ) ; \n\t} \n"}, {"code": "public int left $F72 { \n\treturn data . length ( ) - pos ; \n\t} \n"}, {"code": "public FeatureSet combine ( final FeatureSet other ) { \n\tfinal Set < Feature > enabled = new $F9623 ( this . enabled ) ; \n\t$F27392 ( enabled , other ) final Set < Feature > disabled = new $F9623 ( this . disabled ) ; \n\t$F27392 ( disabled , other ) return new FeatureSet ( enabled , disabled ) ; \n\t} \n"}, {"code": "public void removeInterval ( final BatchWriter writer , final TemporalInterval interval , final Statement statement ) throws MutationsRejectedException { \n\tfinal Text cf = new Text ( StatementSerializer . writeContext ( statement ) ) ; \n\tfinal Text cqBegin = new Text ( KeyParts . CQ_BEGIN ) ; \n\tfinal Text cqEnd = new Text ( KeyParts . CQ_END ) ; \n\tText keyText = new Text ( interval . getAsKeyBeginning ( ) ) ; \n\tKeyParts . appendUniqueness ( statement , keyText ) ; \n\tMutation m = new Mutation ( keyText ) ; \n\tm . putDelete ( cf , cqBegin ) ; \n\twriter . addMutation ( m ) ; \n\tkeyText = new Text ( interval . getAsKeyEnd ( ) ) ; \n\tKeyParts . appendUniqueness ( statement , keyText ) ; \n\tm = new Mutation ( keyText ) ; \n\tm . putDelete ( cf , cqEnd ) ; \n\twriter . addMutation ( m ) ; \n\t} \n"}, {"code": "public static final String removeDataFolderPath ( String fullPath ) { \n\t$F63896 ( sdCard , Environment ) String dataFolderPath = $F3884 ( sdCard ) + MainApp . getDataFolder ( ) + NUM00 ; \n\tif ( fullPath . indexOf ( dataFolderPath ) == NUM00 ) { \n\t\t$F158275 ( fullPath , dataFolderPath ) } \n\treturn fullPath ; \n\t} \n"}, {"code": "protected Character isWFXMLChar ( String chardata ) { \n\tCharacter refInvalidChar ; \n\tif ( chardata == null || $F1277 ( chardata ) ) $F1337 $F7782 ( dataarray , chardata ) int datalength = dataarray . length ; \n\tif ( fIsXMLVersion11 ) { \n\t\tint i = NUM00 ; \n\t\twhile ( i < datalength ) { \n\t\t\tif ( XML11Char . isXML11Invalid ( dataarray [ i ++ ] ) ) { \n\t\t\t\tchar ch = dataarray [ i - NUM00 ] ; \n\t\t\t\t$F121844 ( XMLChar , ch , i , datalength , ch2 , dataarray ) refInvalidChar = new Character ( ch ) ; \n\t\t\t\treturn refInvalidChar ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse { \n\t\tint i = NUM00 ; \n\t\twhile ( i < datalength ) { \n\t\t\tif ( XMLChar . isInvalid ( dataarray [ i ++ ] ) ) { \n\t\t\t\tchar ch = dataarray [ i - NUM00 ] ; \n\t\t\t\t$F121844 ( XMLChar , ch , i , datalength , ch2 , dataarray ) refInvalidChar = new Character ( ch ) ; \n\t\t\t\treturn refInvalidChar ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F1274 } \n"}, {"code": "default CompletableFuture < Optional $F23350 > matchAsync ( final Executor executor , final T value ) $F19292 ( CompletableFuture , executor ) "}, {"code": "public static void main $F4374 ( args ) throws FormatException { \n\t$F10089 ( Debug ) if $F9634 ( args ) { \n\t\t$F18535 ( Debug ) $F5194 ( System ) } \n\tfor ( $F1139 ( argsi , args ) ) { \n\t\trootpath = args [ argsi ] ; \n\t\tLibrarySelectionTable lst = new LibrarySelectionTable ( rootpath ) ; \n\t\tif $F22503 ( Debug ) { \n\t\t\t$F32925 ( Debug , rootpath ) Debug . output ( NUM00 + lst . getDatabaseName ( ) ) ; \n\t\t\t} \n\t\tprintln ( NUM00 ) ; \n\t\tprintln ( NUM00 + rootpath ) ; \n\t\tprintln ( NUM00 + lst . getDatabaseDescription ( ) ) ; \n\t\t$F3803 libraries = lst . getLibraryNames ( ) ; \n\t\tif $F22503 ( Debug ) { \n\t\t\tprint ( NUM00 ) ; \n\t\t\tfor ( String libraryName : libraries ) $F28986 ( print , libraryName ) println ( ) ; \n\t\t\tprintln ( ) ; \n\t\t\t} \n\t\tfor ( String libraryName : libraries ) { \n\t\t\tString prefix = lst . getDatabaseName ( ) + NUM00 + libraryName ; \n\t\t\tprintln ( NUM00 + prefix ) ; \n\t\t\tprintLibrary ( prefix , lst . getCAT ( libraryName ) ) ; \n\t\t\tprintln ( ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private static String wildcardToRegex ( String pattern ) { \n\treturn NUM00 + StringUtils . replaceEach ( escapeRegexp ( pattern ) , $F78037 , $F78037 ) + NUM00 ; \n\t} \n"}, {"code": "protected void clearCache $F72 { \n\t$F263153 ( _cache ) } \n"}, {"code": "public String sqlAD_getCustomEntityTypes $F1947 ( vendorName , catalogName , schemaName ) { \n\tString tableName = NUM00 ; \n\t$F8728 ( columnNames ) $F18793 ( columnNames ) $F8728 ( aliasNames ) $F18793 ( aliasNames ) $F8728 ( conditions ) $F18793 ( conditions ) $F8728 ( sortColumns ) $F18793 ( sortColumns ) return sql_select ( vendorName , catalogName , schemaName , tableName , null , columnNames , aliasNames , conditions , sortColumns , _BOOL ) ; \n\t} \n"}, {"code": "public void paintComponent ( Graphics g ) { \n\tint x = PADDING ; \n\tint y = PADDING ; \n\tg . drawImage ( picture , x , y , scaleW , scaleH , null ) ; \n\tx += scaleW + PADDING ; \n\tg . drawImage ( picture , x , y , x + scaleW , y + scaleH , NUM00 , NUM00 , picture . getWidth ( ) , picture . getHeight ( ) , null ) ; \n\tx += scaleW + PADDING ; \n\t$F317 ( g2d , g ) g2d . translate ( x , y ) ; \n\tg2d . scale ( SCALE_FACTOR , SCALE_FACTOR ) ; \n\t$F37616 ( g2d , picture ) $F355 ( g2d ) x += scaleW + PADDING ; \n\tg2d = ( Graphics2D ) g . create ( ) ; \n\t$F34721 ( at ) at . translate ( x , y ) ; \n\tat . scale ( SCALE_FACTOR , SCALE_FACTOR ) ; \n\tg2d . drawImage ( picture , at , null ) ; \n\t$F355 ( g2d ) x += scaleW + PADDING ; \n\tImage scaledImg = picture . getScaledInstance ( scaleW , scaleH , Image . SCALE_DEFAULT ) ; \n\t$F108383 ( g , scaledImg , x , y ) } \n"}, {"code": "$F60268 ( idType ) "}, {"code": "private static void backupAudioConfig $F72 { \n\tif ( null != mRestoreAudioConfigTimer ) { \n\t\t$F65148 ( mRestoreAudioConfigTimer ) mRestoreAudioConfigTimer = null ; \n\t\tmRestoreAudioConfigTimerMask = null ; \n\t\t} \n\telse if ( null == mAudioMode ) { \n\t\tAudioManager audioManager = getAudioManager ( ) ; \n\t\tmAudioMode = audioManager . getMode ( ) ; \n\t\tmIsSpeakerOn = audioManager . isSpeakerphoneOn ( ) ; \n\t\t} \n\t} \n"}, {"code": "public static String buildImdnDeliveryReport ( String msgId , ImdnDocument . DeliveryStatus status , long timestamp ) { \n\tString method ; \n\tswitch ( status ) { \n\t\t$F7242 ( DISPLAYED , method ) $F7242 ( DELIVERED , method ) $F1267 method = NUM00 ; \n\t\t$F597 } \n\treturn NUM00 + UTF8_STR + NUM00 + CRLF + NUM00 + CRLF + NUM00 + msgId + NUM00 + CRLF + NUM00 + DateUtils . encodeDate ( timestamp ) + NUM00 + CRLF + NUM00 + method + NUM00 + status + NUM00 + method + NUM00 + CRLF + NUM00 ; \n\t} \n"}, {"code": "private SpeedrunsLiveRequest $F72 { \n\tsuper ( URL ) ; \n\t} \n"}, {"code": "public static Bitmap decodeResourceWithBackouts ( Resources res , $F56525 options , int id ) { \n\tboolean noBitmap = _BOOL ; \n\tint num_tries = NUM00 ; \n\tif ( options . inSampleSize < NUM00 ) { \n\t\toptions . inSampleSize = NUM00 ; \n\t\t} \n\tBitmap bmap = null ; \n\twhile ( noBitmap ) { \n\t\ttry { \n\t\t\tbmap = BitmapFactory . decodeResource ( res , id , options ) ; \n\t\t\tnoBitmap = _BOOL ; \n\t\t\t} \n\t\tcatch ( java . lang . OutOfMemoryError e ) { \n\t\t\tif ( ++ num_tries >= BITMAP_LOAD_BACKOUT_ATTEMPTS ) { \n\t\t\t\tthrow e ; \n\t\t\t\t} \n\t\t\tbmap = null ; \n\t\t\t$F58463 ( System ) options . inSampleSize *= NUM00 ; \n\t\t\t} \n\t\t} \n\treturn bmap ; \n\t} \n"}, {"code": "$F3594 ( oredCriteria , orderByClause , distinct , _BOOL ) "}, {"code": "public void readDataFile ( String content ) throws DataFileException { \n\tif $F41728 ( content ) $F4638 $F153016 ( bis , content ) readDataFile ( bis , null ) ; \n\t} \n"}, {"code": "public static String readUTF ( DataInput in ) throws IOException { \n\treturn DataInputStream . readUTF ( in ) ; \n\t} \n"}, {"code": "protected Object lazilyLoadDesktopProperty ( String name ) { \n\tif $F3106 ( name ) $F4915 ( lazilyLoadGTKIcon , name ) return super . lazilyLoadDesktopProperty ( name ) ; \n\t} \n"}, {"code": "public OAuthRsaSha1Signer ( String privateKeyString ) throws OAuthException { \n\tif ( privateKeyString == null ) { \n\t\tthrow new OAuthException $F580 ; \n\t\t} \n\telse if $F1277 ( privateKeyString ) { \n\t\tthrow new OAuthException $F580 ; \n\t\t} \n\ttry { \n\t\tsetPrivateKey ( RsaSha1PrivateKeyHelper . getPrivateKey ( privateKeyString ) ) ; \n\t\t} \n\tcatch ( Base64DecoderException e ) { \n\t\tthrow new OAuthException ( NUM00 , e ) ; \n\t\t} \n\tcatch ( NoSuchAlgorithmException e ) { \n\t\tthrow new OAuthException ( NUM00 , e ) ; \n\t\t} \n\tcatch ( InvalidKeySpecException e ) { \n\t\tthrow new OAuthException ( NUM00 , e ) ; \n\t\t} \n\t} \n"}, {"code": "private Map < String , Volume > groupVolumesByReplicationGroup ( $F47942 volumeList ) { \n\tMap < String , Volume > repGroupToVolumeMap = new HashMap < String , Volume > $F72 ; \n\tfor ( Volume volume : volumeList ) { \n\t\tString repGroupName = volume . getReplicationGroupInstance ( ) ; \n\t\tif ( volume . isVPlexVolume ( _dbClient ) ) { \n\t\t\tVolume backedVol = VPlexUtil . getVPLEXBackendVolume ( volume , _BOOL , _dbClient ) ; \n\t\t\tif ( backedVol != null ) { \n\t\t\t\trepGroupName = backedVol . getReplicationGroupInstance ( ) ; \n\t\t\t\t} \n\t\t\t} \n\t\trepGroupToVolumeMap . put ( repGroupName , volume ) ; \n\t\t} \n\treturn repGroupToVolumeMap ; \n\t} \n"}, {"code": "public DefaultFileFilter ( String extension , String description ) { \n\t$F21936 ( ext , extension ) desc = description ; \n\t} \n"}, {"code": "public void appendCell ( boolean value ) $F45719 ( appendCell , String , value ) "}, {"code": "public String name $F72 $F16566 ( System ) "}, {"code": "protected void addURL ( URL url ) { \n\ttry { \n\t\toriginalUrls . add ( url ) ; \n\t\t$F3761 ( searchList , createSearchURL , url ) } \n\t$F54215 } \n"}, {"code": "public void initStructure $F72 throws Exception { \n\tint nAttribute = NUM00 ; \n\tfor ( $F180066 ( iOrder , m_Instances ) ) { \n\t\tif $F55630 ( nAttribute , m_Instances ) { \n\t\t\tnAttribute ++ ; \n\t\t\t} \n\t\t} \n\tm_ParentSets = new ParentSet [ m_Instances . numAttributes ( ) ] ; \n\tfor ( $F180066 ( iAttribute , m_Instances ) ) { \n\t\tm_ParentSets [ iAttribute ] = new ParentSet ( m_Instances . numAttributes ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public synchronized $F159508 disconnect $F72 { \n\t$F70223 ( closeFuture ) ; \n\tif $F5973 ( consumers ) { \n\t\t$F22620 ( consumers ) if ( havePendingRead && cursor . cancelPendingReadRequest ( ) ) { \n\t\t\thavePendingRead = _BOOL ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tcloseFuture . complete ( null ) ; \n\t\t} \n\treturn closeFuture ; \n\t} \n"}, {"code": "$F41325 ( in , result , _BOOL , c , length ) "}, {"code": "$F41325 ( in , result , _BOOL , c , length ) "}, {"code": "protected boolean IPIsBroadcast ( int IPAddress ) { \n\tint inv_subnet_mask = ~ this . subnet_mask ; \n\treturn $F128757 ( IPAddress , inv_subnet_mask ) ; \n\t} \n"}, {"code": "public void addCellAppearancesToWorkList ( DF_LatticeCell cell ) { \n\tfor ( Enumeration < DF_Equation > e = getEquations ( ) ; \n\te . hasMoreElements ( ) ; \n\t) { \n\t\tDF_Equation eq = e . nextElement ( ) ; \n\t\tif ( eq . hasCell ( cell ) ) { \n\t\t\taddToWorkList ( eq ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void remove ( ConstraintWidget widget ) { \n\tElement toUnselect = null ; \n\tfor ( Element selection : mSelectedWidgets ) { \n\t\tif ( selection . widget == widget ) $F3468 ( toUnselect , selection ) } \n\t$F231860 ( toUnselect , mSelectedWidgets ) selectionHasChanged ( ) ; \n\t} \n"}, {"code": "public static long hexStringToLong ( final String hexString ) { \n\t$F1832 ( Preconditions , hexString ) Preconditions . checkArgument ( isHexString ( hexString ) , String . format ( NUM00 , hexString ) ) ; \n\tif ( $F1277 ( hexString ) && ( hexString . charAt ( NUM00 ) >= NUM00 ) ) { \n\t\tfinal String strAddr1 = $F4019 ( hexString ) ; \n\t\tfinal String strAddr2 = $F39706 ( hexString ) ; \n\t\treturn ( Long . parseLong ( strAddr1 , NUM00 ) < < NUM00 ) + Long . parseLong ( strAddr2 , NUM00 ) ; \n\t\t} \n\treturn Long . parseLong ( hexString , NUM00 ) ; \n\t} \n"}, {"code": "public static boolean containsFile ( $F1113 SourceProvider provider , $F1113 File file ) { \n\t$F92258 srcDirectories = getAllSourceFolders ( provider ) ; \n\tif ( filesEqual ( provider . getManifestFile ( ) , file ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tfor ( File container : srcDirectories ) { \n\t\t$F4924 ( parent , container ) if ( parent != null && parent . isDirectory ( ) && filesEqual ( parent , file ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\tif $F1906 ( container ) $F1448 if ( isAncestor ( container , file , _BOOL ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static String checkNotEmpty ( String string , Object errorMessage ) { \n\tif ( ExoPlayerLibraryInfo . ASSERTIONS_ENABLED && TextUtils . isEmpty ( string ) ) { \n\t\tthrow new IllegalArgumentException $F45942 ( String , errorMessage ) ; \n\t\t} \n\treturn string ; \n\t} \n"}, {"code": "void runPostSearch ( int cntItems ) ; \n"}, {"code": "private SSLEngineResult unwrap $F72 throws SSLException { \n\tif ( appBuffer == null ) { \n\t\tappBuffer = IoBuffer . allocate ( inNetBuffer . remaining ( ) ) ; \n\t\t} \n\telse { \n\t\tappBuffer . expand ( inNetBuffer . remaining ( ) ) ; \n\t\t} \n\tSSLEngineResult res ; \n\tStatus status = null ; \n\tHandshakeStatus handshakeStatus = null ; \n\tdo { \n\t\tres = sslEngine . unwrap ( inNetBuffer . buf ( ) , appBuffer . buf ( ) ) ; \n\t\tstatus = res . getStatus ( ) ; \n\t\t$F346875 ( handshakeStatus , res ) if ( status == SSLEngineResult . Status . BUFFER_OVERFLOW ) { \n\t\t\tappBuffer . capacity ( $F238996 ( appBuffer ) ) ; \n\t\t\t$F239000 ( appBuffer ) $F598 } \n\t\t} \n\twhile ( ( ( status == SSLEngineResult . Status . OK ) || ( status == SSLEngineResult . Status . BUFFER_OVERFLOW ) ) && ( ( handshakeStatus == SSLEngineResult . HandshakeStatus . NOT_HANDSHAKING ) || ( handshakeStatus == SSLEngineResult . HandshakeStatus . NEED_UNWRAP ) ) ) ; \n\treturn res ; \n\t} \n"}, {"code": "public Certificate requestCertificate $F97 ( csr ) throws AcmeException $F59662 ( requestCertificate , csr ) "}, {"code": "public void clear $F72 $F13478 ( mStrings , notifyDataSetChanged ) "}, {"code": "$F22330 private static GridUriDeploymentFileProcessorResult processWithDescriptorFile ( GridUriDeploymentSpringDocument doc , File file , String uri , IgniteLogger log ) throws IgniteSpiException { \n\tClassLoader clsLdr = GridUriDeploymentClassLoaderFactory . create ( U . gridClassLoader ( ) , file , log ) ; \n\tList < Class < ? extends ComputeTask $F5162 > > tasks = doc . getTasks ( clsLdr ) ; \n\tList < Class < ? extends ComputeTask $F5162 > > validTasks = null ; \n\tif $F20899 ( F , tasks ) { \n\t\t$F9404 ( validTasks ) for ( Class < ? extends ComputeTask $F5162 > task : tasks ) { \n\t\t\tif ( ! isAllowedTaskClass ( task ) ) { \n\t\t\t\tU . warn ( log , NUM00 + NUM00 + task + NUM00 ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tif $F585 ( log ) $F74568 ( log , task ) validTasks . add ( task ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tGridUriDeploymentFileProcessorResult res = new GridUriDeploymentFileProcessorResult $F72 ; \n\tres . setFile ( file ) ; \n\tres . setClassLoader ( clsLdr ) ; \n\tif $F20899 ( F , validTasks ) res . setTaskClasses ( validTasks ) ; \n\telse if $F585 ( log ) log . debug ( $F62869 ( file ) + U . hidePassword ( uri ) + NUM00 ) ; \n\treturn res ; \n\t} \n"}, {"code": "private $F9883 boolean testSelections ( JClass jc , T dobj ) { \n\tList < JSelection > list = jc . getSelections ( ) ; \n\tfor ( JSelection js : list ) { \n\t\tif ( testSelection ( jc , js , dobj ) == _BOOL ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void truncate $F72 { \n\tcalculateIdealPoint ( ) ; \n\ttranslateByIdealPoint ( ) ; \n\tList < $F41138 > members = associateToReferencePoint ( this ) ; \n\tclear ( ) ; \n\tfor ( $F2277 ( i , members ) ) { \n\t\t$F41138 associations = members . get ( i ) ; \n\t\tif $F3817 ( associations ) { \n\t\t\tadd ( select ( associations , i ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "protected void onDownloading $F72 { \n\tif $F28793 ( LogConfiguration ) { \n\t\tlogger . log ( Level . INFO , messages . downloadingResources ( ) ) ; \n\t\t} \n\tupdating = _BOOL ; \n\tfireApplicationCacheEvent ( CacheEvent . onDownloading ) ; \n\t} \n"}, {"code": "protected synchronized void addTransitionListener ( Hashtable < TxState , Hashtable < TxState , Set < EventListener > > > listeners , EventListener lstnr , TxState from , TxState to ) { \n\tHashtable < TxState , Set < EventListener > > lstnrs = listeners . get ( from ) ; \n\tif ( lstnrs == null ) lstnrs = new Hashtable < TxState , Set < EventListener > > $F72 ; \n\tSet < EventListener > tolstnrs = lstnrs . get ( to ) ; \n\tif ( tolstnrs == null ) tolstnrs = new HashSet < EventListener > $F72 ; \n\t$F24127 ( tolstnrs , lstnr ) lstnrs . put ( to , tolstnrs ) ; \n\tlisteners . put ( from , lstnrs ) ; \n\t} \n"}, {"code": "public boolean hasExclusion $F72 { \n\treturn $F123850 ( mExcludedClasses , mExcludedTests ) ; \n\t} \n"}, {"code": "private int ensureBaselineOnGrid $F72 { \n\tfloat baseline = getBaseline ( ) ; \n\tfloat gridAlign = baseline % FOUR_DIP ; \n\tif ( gridAlign != NUM00 ) { \n\t\textraTopPadding = ( int ) ( FOUR_DIP - Math . ceil ( gridAlign ) ) ; \n\t\t} \n\treturn extraTopPadding ; \n\t} \n"}, {"code": "$F1 public void compute $F72 { \n\tSpliterator < P_IN > rs = spliterator , ls ; \n\tlong sizeEstimate = rs . estimateSize ( ) ; \n\tlong sizeThreshold = getTargetSize ( sizeEstimate ) ; \n\tboolean forkRight = _BOOL ; \n\t$F1431 K task = ( K ) this ; \n\tAtomicReference $F23350 sr = sharedResult ; \n\tR result ; \n\twhile ( $F17862 ( result , sr ) == null ) { \n\t\tif ( task . taskCanceled ( ) ) { \n\t\t\tresult = task . getEmptyResult ( ) ; \n\t\t\t$F597 } \n\t\tif ( sizeEstimate <= sizeThreshold || ( ls = rs . trySplit ( ) ) == null ) { \n\t\t\tresult = task . doLeaf ( ) ; \n\t\t\t$F597 } \n\t\tK leftChild , rightChild , taskToFork ; \n\t\ttask . leftChild = leftChild = task . makeChild ( ls ) ; \n\t\ttask . rightChild = rightChild = task . makeChild ( rs ) ; \n\t\ttask . setPendingCount ( NUM00 ) ; \n\t\tif ( forkRight ) { \n\t\t\tforkRight = _BOOL ; \n\t\t\trs = ls ; \n\t\t\ttask = leftChild ; \n\t\t\ttaskToFork = rightChild ; \n\t\t\t} \n\t\telse { \n\t\t\tforkRight = _BOOL ; \n\t\t\ttask = rightChild ; \n\t\t\ttaskToFork = leftChild ; \n\t\t\t} \n\t\ttaskToFork . fork ( ) ; \n\t\tsizeEstimate = rs . estimateSize ( ) ; \n\t\t} \n\ttask . setLocalResult ( result ) ; \n\ttask . tryComplete ( ) ; \n\t} \n"}, {"code": "public static $F529 createContentAssoc $F71242 ( dctx , rcontext ) { \n\t$F118334 ( context , UtilMisc , rcontext ) $F16824 ( context ) $F3803 targetOperationList = ContentWorker . prepTargetOperationList ( context , NUM00 ) ; \n\t$F3803 contentPurposeList = ContentWorker . prepContentPurposeList ( context ) ; \n\t$F545 ( context , targetOperationList ) $F545 ( context , contentPurposeList ) $F91191 ( context ) $F67631 ( result ) try { \n\t\tresult = createContentAssocMethod ( dctx , context ) ; \n\t\t} \n\tcatch ( GenericServiceException e ) $F34760 ( ServiceUtil , e ) catch ( GenericEntityException e2 ) $F34760 ( ServiceUtil , e2 ) catch ( Exception e3 ) $F34760 ( ServiceUtil , e3 ) return result ; \n\t} \n"}, {"code": "public String formatWithLocale ( Locale locale , String ... args ) { \n\treturn String . format ( locale , this . content , $F2486 ( args ) ) ; \n\t} \n"}, {"code": "private static < T extends AbstractBlockBase $F4203 > T addPathToLinearScanOrder ( T block , $F5675 order , PriorityQueue $F4203 worklist , BitSet visitedBlocks ) { \n\tblock . setLinearScanNumber ( order . size ( ) ) ; \n\torder . add ( block ) ; \n\tT mostLikelySuccessor = findAndMarkMostLikelySuccessor ( block , visitedBlocks ) ; \n\tenqueueSuccessors ( block , worklist , visitedBlocks ) ; \n\tif ( mostLikelySuccessor != null ) { \n\t\tif ( ! mostLikelySuccessor . isLoopHeader ( ) && mostLikelySuccessor . getPredecessorCount ( ) > NUM00 ) { \n\t\t\tdouble unscheduledSum = NUM00 ; \n\t\t\tfor ( T pred : mostLikelySuccessor . getPredecessors ( ) ) { \n\t\t\t\tif ( pred . getLinearScanNumber ( ) == - NUM00 ) { \n\t\t\t\t\tunscheduledSum += pred . probability ( ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tif ( unscheduledSum > block . probability ( ) / PENALTY_VERSUS_UNSCHEDULED ) { \n\t\t\t\tvisitedBlocks . clear ( mostLikelySuccessor . getId ( ) ) ; \n\t\t\t\t$F1274 } \n\t\t\t} \n\t\treturn mostLikelySuccessor ; \n\t\t} \n\t$F1274 } \n"}, {"code": "private static Dimension createThumbDimension ( final BufferedImage image , final int maxWidth , final int maxHeight ) { \n\tDimension dimension = new Dimension $F72 ; \n\tif ( image . getWidth ( ) >= image . getHeight ( ) ) { \n\t\tif ( image . getWidth ( ) >= maxWidth ) { \n\t\t\tdimension . width = maxWidth ; \n\t\t\tdimension . height = Math . round ( ( ( float ) maxWidth / image . getWidth ( ) ) * image . getHeight ( ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\t$F130165 ( dimension , image ) dimension . width = image . getWidth ( ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tif ( image . getHeight ( ) >= maxHeight ) { \n\t\t\tdimension . height = maxHeight ; \n\t\t\tdimension . width = Math . round ( ( ( ( float ) maxHeight / image . getHeight ( ) ) * image . getWidth ( ) ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\t$F130165 ( dimension , image ) dimension . width = image . getWidth ( ) ; \n\t\t\t} \n\t\t} \n\treturn dimension ; \n\t} \n"}, {"code": "private boolean hasCurrentAccountChanged $F72 { \n\tAccount account = AccountUtils . getCurrentOwnCloudAccount ( this ) ; \n\tif ( account == null ) { \n\t\treturn _BOOL ; \n\t\t} \n\telse { \n\t\treturn ! mOriginalCurrentAccount . equals ( account . name ) ; \n\t\t} \n\t} \n"}, {"code": "public int nextClearBit ( int index ) { \n\tint i = index > > NUM00 ; \n\t$F80680 ( i , wlen ) int subIndex = index & NUM00 ; \n\tlong word = ~ bits . get ( i ) > > subIndex ; \n\tif ( word != NUM00 ) { \n\t\treturn ( i < < NUM00 ) + subIndex + Long . numberOfTrailingZeros ( word ) ; \n\t\t} \n\twhile ( ++ i < wlen ) { \n\t\tword = ~ bits . get ( i ) ; \n\t\tif ( word != NUM00 ) { \n\t\t\treturn ( i < < NUM00 ) + Long . numberOfTrailingZeros ( word ) ; \n\t\t\t} \n\t\t} \n\t$F150 } \n"}, {"code": "private static synchronized void appendMessage ( Context c , final String msg ) { \n\tif $F1277 ( msg ) $F665 String out = msg ; \n\tboolean timestamp = PrefStore . isTimestamp ( c ) ; \n\tint maxLines = PrefStore . getMaxLines ( c ) ; \n\t$F2199 ( protocolSize , protocol ) if ( protocolSize > NUM00 && lastChar != NUM00 ) { \n\t\t$F18938 ( protocol , protocolSize ) out = lastLine + out ; \n\t\t} \n\t$F7793 ( lastChar , out ) ; \n\t$F6542 ( lines , out ) for ( $F151668 ( i , l , lines ) ) { \n\t\tlastLine = lines [ i ] ; \n\t\tif ( timestamp ) protocol . add ( getTimeStamp ( ) + lastLine ) ; \n\t\telse protocol . add ( lastLine ) ; \n\t\tif ( protocolSize + i >= maxLines ) $F243398 ( protocol ) } \n\tshow ( ) ; \n\tif ( PrefStore . isLogger ( c ) ) write ( c , msg ) ; \n\t} \n"}, {"code": "public $F131 importCells ( $F131 cells , double dx , double dy , Object target , Point location ) { \n\tif ( target == null && cells . length == NUM00 && location != null ) { \n\t\ttarget = getCellAt ( $F25550 ( location ) ) ; \n\t\tif ( target instanceof mxICell && cells [ NUM00 ] instanceof mxICell ) { \n\t\t\tmxICell targetCell = ( mxICell ) target ; \n\t\t\tmxICell dropCell = ( mxICell ) cells [ NUM00 ] ; \n\t\t\tif ( targetCell . isVertex ( ) == dropCell . isVertex ( ) || targetCell . isEdge ( ) == dropCell . isEdge ( ) ) { \n\t\t\t\tmxIGraphModel model = graph . getModel ( ) ; \n\t\t\t\tmodel . setStyle ( target , model . getStyle ( cells [ NUM00 ] ) ) ; \n\t\t\t\tgraph . setSelectionCell ( target ) ; \n\t\t\t\t$F1274 } \n\t\t\t} \n\t\t} \n\treturn super . importCells ( cells , dx , dy , target , location ) ; \n\t} \n"}, {"code": "private void cancelSearch $F72 { \n\tentrantToSearch = null ; \n\t} \n"}, {"code": "public void onPrepared ( MediaPlayer player ) { \n\tmState = State . PLAYING ; \n\tupdateNotification ( String . format ( getString ( R . string . media_state_playing ) , mFile . getFileName ( ) ) ) ; \n\tif ( mMediaController != null ) $F7728 ( mMediaController , _BOOL ) player . seekTo ( mStartPosition ) ; \n\tconfigAndStartMediaPlayer ( ) ; \n\t$F14406 ( mPlayOnPrepared , processPauseRequest ) if ( mMediaController != null ) { \n\t\tmMediaController . updatePausePlay ( ) ; \n\t\t} \n\t} \n"}, {"code": "public static ResultSet polar2Cartesian ( Double r , Double alpha ) { \n\tSimpleResultSet rs = new SimpleResultSet $F72 ; \n\trs . addColumn ( NUM00 , Types . DOUBLE , NUM00 , NUM00 ) ; \n\trs . addColumn ( NUM00 , Types . DOUBLE , NUM00 , NUM00 ) ; \n\tif ( r != null && alpha != null ) { \n\t\tdouble x = r . doubleValue ( ) * Math . cos ( alpha . doubleValue ( ) ) ; \n\t\tdouble y = r . doubleValue ( ) * Math . sin ( alpha . doubleValue ( ) ) ; \n\t\trs . addRow ( x , y ) ; \n\t\t} \n\treturn rs ; \n\t} \n"}, {"code": "$F183298 ( view , cache ) "}, {"code": "public void threadFail ( String reason ) { \n\ttry { \n\t\tfail ( reason ) ; \n\t\t} \n\tcatch ( AssertionFailedError t ) { \n\t\tthreadRecordFailure ( t ) ; \n\t\tthrow t ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void connectionLost ( Throwable cause ) { \n\tonDisconnect ( _BOOL ) ; \n\t} \n"}, {"code": "private boolean isTypedTimeFullyLegal $F72 { \n\tif ( mIs24HourMode ) { \n\t\t$F2027 values = getEnteredTime ( null ) ; \n\t\treturn ( values [ NUM00 ] >= NUM00 && values [ NUM00 ] >= NUM00 && values [ NUM00 ] < NUM00 && values [ NUM00 ] >= NUM00 && values [ NUM00 ] < NUM00 ) ; \n\t\t} \n\telse { \n\t\treturn ( mTypedTimes . contains ( getAmOrPmKeyCode ( AM ) ) || mTypedTimes . contains ( getAmOrPmKeyCode ( PM ) ) ) ; \n\t\t} \n\t} \n"}, {"code": "public synchronized void clearAnnotations $F72 $F5122 ( mAnnotations , mStringXY ) "}, {"code": "public Table sample ( double proportion ) { \n\tint tableCount = ( int ) Math . round ( rowCount ( ) * proportion ) ; \n\t$F290678 ( table1Selection ) $F2027 selectedRecords = generateUniformBitmap ( tableCount , rowCount ( ) ) ; \n\tfor ( int selectedRecord : selectedRecords ) $F207 ( table1Selection , selectedRecord ) return selectWhere ( table1Selection ) ; \n\t} \n"}, {"code": "$F3594 ( oredCriteria , orderByClause , distinct , _BOOL ) "}, {"code": "public static MessageDigest newDigest $F72 { \n\ttry { \n\t\treturn MessageDigest . getInstance ( NUM00 ) ; \n\t\t} \n\t$F29414 ( e ) } \n"}, {"code": "public Container addChildAt ( int location , $F4170 DisplayObject DisplayObject ) { \n\tif ( mFps != DEFAULT_FPS ) { \n\t\tDisplayObject . setUp ( mFps ) ; \n\t\t} \n\tmDisplayList . add ( location , DisplayObject ) ; \n\treturn this ; \n\t} \n"}, {"code": "private void add ( DimensionIndex index ) { \n\tflatten . add ( index ) ; \n\tlookup . put ( index . getAxis ( ) , index ) ; \n\t} \n"}, {"code": "public static RecipePetals registerPetalRecipe ( ItemStack output , Object ... inputs ) { \n\tPreconditions . checkArgument ( inputs . length <= NUM00 ) ; \n\tRecipePetals recipe = new RecipePetals ( output , inputs ) ; \n\tpetalRecipes . add ( recipe ) ; \n\treturn recipe ; \n\t} \n"}, {"code": "private void buildFirstLine ( LinePath path , Rect r ) { \n\t$F2027 range = new int [ ] { \n\t\t- r . left , - r . top , r . right , r . bottom } \n\t; \n\tint max = - NUM00 ; \n\tint maxId = NUM00 ; \n\tfor ( $F6268 ( i ) ) { \n\t\t$F43613 ( range , i , max , maxId ) } \n\tswitch ( maxId ) { \n\t\t$F3366 path . setEndPoint ( r . left , Utils . nextInt ( r . height ( ) ) + r . top ) ; \n\t\t$F597 $F3366 path . setEndPoint ( Utils . nextInt ( r . width ( ) ) + r . left , r . top ) ; \n\t\t$F597 $F3366 path . setEndPoint ( r . right , Utils . nextInt ( r . height ( ) ) + r . top ) ; \n\t\t$F597 $F3366 path . setEndPoint ( Utils . nextInt ( r . width ( ) ) + r . left , r . bottom ) ; \n\t\t$F597 } \n\tpath . lineToEnd ( ) ; \n\t} \n"}, {"code": "$F45263 ( filename , extension , _BOOL , indexOfExtension , fileExt , getExtension ) "}, {"code": "public void testValueOfDoubleNeg $F72 { \n\tdouble a = - NUM00 ; \n\t$F2544 ( result , BigDecimal , a ) String res = NUM00 ; \n\tint resScale = NUM00 ; \n\t$F1925 ( assertEquals , res , result ) $F1928 ( assertEquals , resScale , result ) } \n"}, {"code": "public void testHugeTerm $F72 throws IOException { \n\t$F83 ( sb ) for ( $F6268 ( i ) ) $F86 ( sb ) $F1822 ( input , sb ) char token [ ] = $F11574 ; \n\t$F21017 ( Arrays , token ) $F605 ( expectedToken , token ) String expected [ ] = { \n\t\texpectedToken , expectedToken , expectedToken , expectedToken , expectedToken , expectedToken , expectedToken , expectedToken , expectedToken , expectedToken } \n\t; \n\tassertAnalyzesTo ( sentence , input , expected ) ; \n\t} \n"}, {"code": "private $F806 combineResultsFromMultipleReads $F159246 ( buffer , lastRead ) { \n\t$F806 t = new String $F12348 ( buffer , lastRead ) ; \n\t$F7057 ( System , buffer , t ) $F11244 ( System , lastRead , t , buffer ) return t ; \n\t} \n"}, {"code": "public double calcDistance $F30455 ( x , y ) { \n\tdouble distanceX ; \n\tdouble distanceY ; \n\tif ( this . minX <= x && x <= this . maxX ) { \n\t\tdistanceX = NUM00 ; \n\t\t} \n\telse { \n\t\tdistanceX = Math . min ( Math . abs ( this . minX - x ) , Math . abs ( this . maxX - x ) ) ; \n\t\t} \n\tif ( this . minY <= y && y <= this . maxY ) { \n\t\tdistanceY = NUM00 ; \n\t\t} \n\telse { \n\t\tdistanceY = Math . min ( Math . abs ( this . minY - y ) , Math . abs ( this . maxY - y ) ) ; \n\t\t} \n\t$F126355 ( Math , distanceX , distanceY ) } \n"}, {"code": "$F1 public MatchesType marshal ( Set < Match > matches ) { \n\tSet < RPSBlastMatch > rpsBlastMatches = new LinkedHashSet < RPSBlastMatch > $F72 ; \n\tSet < Hmmer2Match > hmmer2Matches = new LinkedHashSet < Hmmer2Match > $F72 ; \n\tSet < Hmmer3Match > hmmer3Matches = new LinkedHashSet < Hmmer3Match > $F72 ; \n\tSet < SuperFamilyHmmer3Match > superFamilyHmmer3Matches = new LinkedHashSet < SuperFamilyHmmer3Match > $F72 ; \n\tSet < FingerPrintsMatch > fingerPrintsMatches = new LinkedHashSet < FingerPrintsMatch > $F72 ; \n\tSet < BlastProDomMatch > proDomMatches = new LinkedHashSet < BlastProDomMatch > $F72 ; \n\tSet < PatternScanMatch > patternScanMatches = new LinkedHashSet < PatternScanMatch > $F72 ; \n\tSet < ProfileScanMatch > profileScanMatches = new LinkedHashSet < ProfileScanMatch > $F72 ; \n\tSet < PhobiusMatch > phobiusMatches = new LinkedHashSet < PhobiusMatch > $F72 ; \n\tSet < CoilsMatch > coilsMatches = new LinkedHashSet < CoilsMatch > $F72 ; \n\tSet < PantherMatch > pantherMatches = new LinkedHashSet < PantherMatch > $F72 ; \n\tSet < SignalPMatch > signalPMatches = new LinkedHashSet < SignalPMatch > $F72 ; \n\tSet < TMHMMMatch > tmhmmPMatches = new LinkedHashSet < TMHMMMatch > $F72 ; \n\tfor ( Match m : matches ) { \n\t\tif ( m instanceof RPSBlastMatch ) { \n\t\t\trpsBlastMatches . add ( ( RPSBlastMatch ) m ) ; \n\t\t\t} \n\t\telse if ( m instanceof Hmmer2Match ) { \n\t\t\thmmer2Matches . add ( ( Hmmer2Match ) m ) ; \n\t\t\t} \n\t\telse if ( m instanceof Hmmer3Match ) { \n\t\t\thmmer3Matches . add ( ( Hmmer3Match ) m ) ; \n\t\t\t} \n\t\telse if ( m instanceof SuperFamilyHmmer3Match ) { \n\t\t\tsuperFamilyHmmer3Matches . add ( ( SuperFamilyHmmer3Match ) m ) ; \n\t\t\t} \n\t\telse if ( m instanceof FingerPrintsMatch ) { \n\t\t\tfingerPrintsMatches . add ( ( FingerPrintsMatch ) m ) ; \n\t\t\t} \n\t\telse if ( m instanceof BlastProDomMatch ) { \n\t\t\tproDomMatches . add ( ( BlastProDomMatch ) m ) ; \n\t\t\t} \n\t\telse if ( m instanceof PatternScanMatch ) { \n\t\t\tpatternScanMatches . add ( ( PatternScanMatch ) m ) ; \n\t\t\t} \n\t\telse if ( m instanceof ProfileScanMatch ) { \n\t\t\tprofileScanMatches . add ( ( ProfileScanMatch ) m ) ; \n\t\t\t} \n\t\telse if ( m instanceof PhobiusMatch ) { \n\t\t\tphobiusMatches . add ( ( PhobiusMatch ) m ) ; \n\t\t\t} \n\t\telse if ( m instanceof CoilsMatch ) { \n\t\t\tcoilsMatches . add ( ( CoilsMatch ) m ) ; \n\t\t\t} \n\t\telse if ( m instanceof PantherMatch ) { \n\t\t\tpantherMatches . add ( ( PantherMatch ) m ) ; \n\t\t\t} \n\t\telse if ( m instanceof SignalPMatch ) { \n\t\t\tsignalPMatches . add ( ( SignalPMatch ) m ) ; \n\t\t\t} \n\t\telse if ( m instanceof TMHMMMatch ) { \n\t\t\ttmhmmPMatches . add ( ( TMHMMMatch ) m ) ; \n\t\t\t} \n\t\telse $F18931 ( m ) } \n\treturn new MatchesType ( rpsBlastMatches , hmmer2Matches , hmmer3Matches , superFamilyHmmer3Matches , fingerPrintsMatches , proDomMatches , patternScanMatches , profileScanMatches , phobiusMatches , coilsMatches , pantherMatches , signalPMatches , tmhmmPMatches ) ; \n\t} \n"}, {"code": "public synchronized void ensureCapacity ( int minimumCapacity ) { \n\tif ( elementData . length < minimumCapacity ) { \n\t\tint next = ( capacityIncrement <= NUM00 ? elementData . length : capacityIncrement ) + elementData . length ; \n\t\tgrow ( minimumCapacity > next ? minimumCapacity : next ) ; \n\t\t} \n\t} \n"}, {"code": "public static void reverse $F49171 ( buffer , start , len ) { \n\t$F61236 ( len ) int end = ( start + len ) - NUM00 ; \n\tchar frontHigh = buffer [ start ] ; \n\tchar endLow = buffer [ end ] ; \n\tboolean allowFrontSur = _BOOL , allowEndSur = _BOOL ; \n\tfinal int mid = start + ( len > > NUM00 ) ; \n\tfor ( int i = start ; \n\ti < mid ; \n\t++ i , -- end ) { \n\t\tfinal char frontLow = buffer [ i + NUM00 ] ; \n\t\tfinal char endHigh = buffer [ end - NUM00 ] ; \n\t\tfinal boolean surAtFront = allowFrontSur && Character . isSurrogatePair ( frontHigh , frontLow ) ; \n\t\tif ( surAtFront && ( len < NUM00 ) ) $F932 final boolean surAtEnd = allowEndSur && Character . isSurrogatePair ( endHigh , endLow ) ; \n\t\tallowFrontSur = allowEndSur = _BOOL ; \n\t\tif ( surAtFront == surAtEnd ) { \n\t\t\tif ( surAtFront ) { \n\t\t\t\tbuffer [ end ] = frontLow ; \n\t\t\t\tbuffer [ -- end ] = frontHigh ; \n\t\t\t\tbuffer [ i ] = endHigh ; \n\t\t\t\tbuffer [ ++ i ] = endLow ; \n\t\t\t\tfrontHigh = buffer [ i + NUM00 ] ; \n\t\t\t\tendLow = buffer [ end - NUM00 ] ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tbuffer [ end ] = frontHigh ; \n\t\t\t\tbuffer [ i ] = endLow ; \n\t\t\t\tfrontHigh = frontLow ; \n\t\t\t\tendLow = endHigh ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tif ( surAtFront ) { \n\t\t\t\tbuffer [ end ] = frontLow ; \n\t\t\t\tbuffer [ i ] = endLow ; \n\t\t\t\tendLow = endHigh ; \n\t\t\t\tallowFrontSur = _BOOL ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tbuffer [ end ] = frontHigh ; \n\t\t\t\tbuffer [ i ] = endHigh ; \n\t\t\t\tfrontHigh = frontLow ; \n\t\t\t\tallowEndSur = _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tif ( ( len & NUM00 ) == NUM00 && ! ( allowFrontSur && allowEndSur ) ) { \n\t\tbuffer [ end ] = allowFrontSur ? endLow : frontHigh ; \n\t\t} \n\t} \n"}, {"code": "$F1 public String toString $F72 $F66013 ( String , ledgerId , entryId ) "}, {"code": "$F3594 ( oredCriteria , orderByClause , distinct , _BOOL ) "}, {"code": "public void trigger ( Date time ) $F106 ( taskList , time ) "}, {"code": "$F9863 ( child , dx , dy , _BOOL , checkHorizontal , mCallback , checkVertical , mTouchSlop , Math ) "}, {"code": "Cipher ( CipherSpi cipherSpi , String transformation ) { \n\tthis . spi = cipherSpi ; \n\tthis . transformation = transformation ; \n\tthis . cryptoPerm = CryptoAllPermission . INSTANCE ; \n\tthis . lock = null ; \n\t} \n"}, {"code": "public void testFlipBitPositiveOutside1 $F72 { \n\t$F17888 int aSign = NUM00 ; \n\tint number = NUM00 ; \n\tbyte $F3018 = { \n\t\tNUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 } \n\t; \n\t$F3023 ( aNumber , aSign , aBytes ) $F103435 ( result , aNumber , number ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) } \n"}, {"code": "private void writeObject ( ObjectOutputStream aOutputStream ) throws IOException $F113012 ( aOutputStream ) "}, {"code": "$F1 public boolean isPanelEnabled $F72 { \n\treturn multiOptionGroupEnabled ; \n\t} \n"}, {"code": "$F58902 ( name , threadId , mFinished , mMarkers , SystemClock ) "}, {"code": "public static String toUnixNewline ( String input ) $F11447 ( input ) "}, {"code": "private void outputIndentation $F72 { \n\tfor ( $F119 ( i , m_indent ) ) $F91838 ( m_out , m_basicIndent ) } \n"}, {"code": "protected Bucket $F4203 createBucket ( long bucketKey ) { \n\treturn new Bucket $F4203 ( bucketKey ) ; \n\t} \n"}, {"code": "public AbstractSiteMap parseSiteMap ( $F96 content , URL url ) throws UnknownFormatException , IOException { \n\t$F1338 ( url ) String filename = FilenameUtils . getName ( url . getPath ( ) ) ; \n\tString contentType = TIKA . detect ( content , filename ) ; \n\treturn parseSiteMap ( contentType , content , url ) ; \n\t} \n"}, {"code": "$F35762 ( newScrollValue , itemDimension , initialMotionValue , lastMotionValue , getPullToRefreshScrollDirection , HORIZONTAL , mInitialMotionX , mLastMotionX , VERTICAL , mInitialMotionY , mLastMotionY , mCurrentMode , PULL_FROM_END , Math , FRICTION , getFooterSize , PULL_FROM_START , getHeaderSize , setHeaderScroll , isRefreshing , scale , mFooterLayout , mHeaderLayout , mState , State , setState ) "}, {"code": "public ApplicationMetaData ( final Deserializer deserializer ) { \n\tthis . appName = deserializer . readString ( NUM00 ) ; \n\tthis . version = deserializer . readString ( NUM00 ) ; \n\tthis . certificateSigner = deserializer . readOptionalString ( NUM00 ) ; \n\tthis . startTime = TimeInstant . readFrom ( deserializer , NUM00 ) ; \n\tthis . currentTime = TimeInstant . readFrom ( deserializer , NUM00 ) ; \n\tthis . timeProvider = null ; \n\t} \n"}, {"code": "public static ConstraintsParameters loadPolicyData ( InputStream policyDataStream ) { \n\tif ( policyDataStream != null ) $F4915 ( load , policyDataStream ) if $F2772 ( defaultPolicyConstraintsLocation ) $F4915 ( load , defaultPolicyConstraintsLocation ) $F1274 } \n"}, {"code": "public static void close ( OutputStream out ) { \n\ttry $F6399 ( out ) catch ( IOException ioE ) $F845 } \n"}, {"code": "$F1 public boolean isCellEditable ( int row , int col ) { \n\tif ( isConnectedToDataSource ) { \n\t\tif ( col != FIELD_COLUMN_ID ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\telse { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\telse { \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "$F298952 ( type , supportedTypes , super ) "}, {"code": "private void saveSortedPomFile ( final String sortedXml ) { \n\tfileUtil . savePomFile ( sortedXml ) ; \n\t$F36580 ( log , pomFile ) } \n"}, {"code": "private void appendStatements ( PolicyType policy , String prefix ) { \n\t$F373359 appendStatements = newStatements ( policy , prefix ) ; \n\tfor ( Statement statement : appendStatements ) { \n\t\tappendStatement ( statement ) ; \n\t\t} \n\t} \n"}, {"code": "private void validateTOTPParameters $F72 throws AuthLoginException { \n\t$F83 ( errorMessages ) if $F4329 ( StringUtils , loginTimeAttrName ) $F86 ( errorMessages ) if ( clockDriftCheckEnabled && StringUtils . isEmpty ( observedClockDriftAttrName ) ) $F86 ( errorMessages ) if ( totpTimeStep <= NUM00 ) $F287 ( errorMessages , totpTimeStep ) if ( totpStepsInWindow < NUM00 ) $F11031 ( errorMessages , totpStepsInWindow ) if $F4012 ( errorMessages ) { \n\t\t$F103457 ( debug , errorMessages ) $F12117 ( amAuthOATH ) } \n\t} \n"}, {"code": "public static String removeUriFragment ( String url ) { \n\t$F26918 ( url ) $F6542 ( arr , url ) if $F9634 ( arr ) $F3262 ( arr ) else { \n\t\treturn url ; \n\t\t} \n\t} \n"}, {"code": "public static void writeReceiptsToFiles ( $F4358 ( printedReceipts ) , String prefix , File baseDir ) { \n\ttry { \n\t\tint index = NUM00 ; \n\t\tfor ( $F96 printedReceipt : printedReceipts ) { \n\t\t\t$F5950 ( bIn , printedReceipt ) File receiptFile = new File ( baseDir , prefix + NUM00 + index + NUM00 ) ; \n\t\t\tBufferedOutputStream $F112784 ( bufferedOutputStream , receiptFile ) ; \n\t\t\tIOUtils . copy ( bIn , bufferedOutputStream ) ; \n\t\t\t$F59 ( bufferedOutputStream ) index ++ ; \n\t\t\t} \n\t\t} \n\t$F12241 ( e ) } \n"}, {"code": "public synchronized void renderDataForProjection ( Projection proj , java . awt . Graphics g ) { \n\tfireStatusUpdate ( LayerStatusEvent . FINISH_WORKING ) ; \n\tif ( proj == null ) $F23406 ( logger ) else { \n\t\tsetTargetIndex ( proj . getScale ( ) ) ; \n\t\tLayer layer = getAppropriateLayer ( ) ; \n\t\tlayer . renderDataForProjection ( proj , g ) ; \n\t\t} \n\t} \n"}, {"code": "public void writeExif ( InputStream jpegStream , OutputStream exifOutStream ) throws IOException { \n\t$F26831 ( jpegStream , exifOutStream , NULL_ARGUMENT_ ) OutputStream s = getExifWriterStream ( exifOutStream ) ; \n\tdoExifStreamIO ( jpegStream , s ) ; \n\t$F1206 ( s ) } \n"}, {"code": "private ContainerPanel createContainerPanel $F72 { \n\tContainerPanel containerPanel = new ContainerPanel $F72 ; \n\tcontainerPanel . setAnimated ( _BOOL ) ; \n\t$F167982 ( containerPanel ) character = new Character $F72 ; \n\tcontainerPanel . addRepaintable ( character ) ; \n\tinventory = new SlotWindow ( $F109655 ) ; \n\tinventory . setAcceptedTypes ( EntityMap . getClass ( $F244022 ) ) ; \n\tinventory . setCloseable ( _BOOL ) ; \n\tcontainerPanel . addRepaintable ( inventory ) ; \n\tkeyring = new KeyRing $F72 ; \n\tkeyring . setAcceptedTypes ( EntityMap . getClass ( $F244022 ) ) ; \n\tcontainerPanel . addRepaintable ( keyring ) ; \n\tuserContext . addFeatureChangeListener ( keyring ) ; \n\tspells = new Spells $F72 ; \n\tspells . setAcceptedTypes ( EntityMap . getClass ( $F244022 ) ) ; \n\tcontainerPanel . addRepaintable ( spells ) ; \n\tuserContext . addFeatureChangeListener ( spells ) ; \n\treturn containerPanel ; \n\t} \n"}, {"code": "public void copyFromGeometry3D ( Geometry3D geom ) { \n\tthis . mNumIndices = geom . getNumIndices ( ) ; \n\tthis . mNumVertices = geom . getNumVertices ( ) ; \n\tthis . mVertexBufferInfo = geom . getVertexBufferInfo ( ) ; \n\tthis . mIndexBufferInfo = geom . getIndexBufferInfo ( ) ; \n\tthis . mTexCoordBufferInfo = geom . getTexCoordBufferInfo ( ) ; \n\tthis . mOnlyShortBufferSupported = geom . areOnlyShortBuffersSupported ( ) ; \n\tif ( mColors == null ) this . mColorBufferInfo = geom . getColorBufferInfo ( ) ; \n\tthis . mNormalBufferInfo = geom . getNormalBufferInfo ( ) ; \n\tthis . mOriginalGeometry = geom ; \n\tthis . mHasNormals = geom . hasNormals ( ) ; \n\tthis . mHasTextureCoordinates = geom . hasTextureCoordinates ( ) ; \n\t} \n"}, {"code": "$F43832 ( pcl , m_pcSupport ) "}, {"code": "public static Intent implicit2ExplicitIntent ( Context context , Intent implicitIntent ) { \n\t$F45547 ( pm , context ) $F45549 resolveInfo = pm . queryIntentServices ( implicitIntent , NUM00 ) ; \n\tif ( resolveInfo == null || $F6886 ( resolveInfo ) ) $F1337 ResolveInfo serviceInfo = resolveInfo . get ( NUM00 ) ; \n\tString packageName = serviceInfo . serviceInfo . packageName ; \n\tString className = serviceInfo . serviceInfo . name ; \n\tComponentName component = new ComponentName ( packageName , className ) ; \n\tIntent explicitIntent = new Intent ( implicitIntent ) ; \n\texplicitIntent . setComponent ( component ) ; \n\treturn explicitIntent ; \n\t} \n"}, {"code": "private synchronized void garbageCollectPeer ( Peer peer ) { \n\t$F586 ( log , peer ) mCurrentPeers . remove ( peer ) ; \n\t} \n"}, {"code": "public void reset $F72 { \n\tsynchronized ( this ) { \n\t\t$F725 ( queue ) setBridgeMode ( - NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "@ PostConstruct public void initApplication $F72 throws IOException { \n\tif ( env . getActiveProfiles ( ) . length == NUM00 ) $F10911 ( log ) else { \n\t\tlog . info ( NUM00 , Arrays . toString ( env . getActiveProfiles ( ) ) ) ; \n\t\t} \n\t} \n"}, {"code": "private void indent $F72 $F91838 ( out , currentIndention ) "}, {"code": "private void computeImplicitForwardDependencesUse ( Register r , DepGraphNode destNode ) { \n\tDepGraphNode sourceNode = getDepGraphNode ( r ) ; \n\tif ( sourceNode != null ) { \n\t\tfor ( Enumeration < Register > e = GenericPhysicalDefUse . enumerate ( GenericPhysicalDefUse . getMaskTSPDefs ( ) , ir ) ; \n\t\te . hasMoreElements ( ) ; \n\t\t) { \n\t\t\tRegister r2 = e . nextElement ( ) ; \n\t\t\tif ( r == r2 ) { \n\t\t\t\tsourceNode . insertOutEdge ( destNode , REG_MAY_DEF ) ; \n\t\t\t\t$F665 } \n\t\t\t} \n\t\tsourceNode . insertOutEdge ( destNode , REG_TRUE ) ; \n\t\t} \n\t} \n"}, {"code": "public String description $F72 { \n\tsynchronized ( this ) { \n\t\tif ( messages == null ) { \n\t\t\tmessages = ResourceBundle . getBundle ( NUM00 ) ; \n\t\t\t} \n\t\t} \n\treturn messages . getString ( NUM00 ) ; \n\t} \n"}, {"code": "Set findRemovableAciList ( Set aciList ) throws $F52710 { \n\t$F19850 ( resultSet ) $F1933 ( aciList , resultSet ) $F10531 ( iter , aciList ) while $F2921 ( iter ) { \n\t\t$F2778 ( aci , iter ) Set objs = dsServices . search ( token , AMStoreConnection . getAMSdkBaseDN ( ) , NUM00 + AMSearchFilterManager . getGlobalSearchFilter ( AMObject . GROUP ) + NUM00 + aci + NUM00 , AMConstants . SCOPE_SUB ) ; \n\t\tif $F6214 ( objs ) $F207 ( resultSet , aci ) } \n\treturn resultSet ; \n\t} \n"}, {"code": "protected final void unregisterDataSource ( DataSource removed ) { \n\t$F12632 ( unregisterDataSources , Collections , removed ) } \n"}, {"code": "public String dump $F97 ( der ) throws $F31549 { \n\ttry { \n\t\tASN1Primitive derObject = ASN1Primitive . fromByteArray ( der ) ; \n\t\tif ( derObject . getEncoded ( ) . length < der . length ) { \n\t\t\tthrow new Asn1Exception $F16961 ( res ) ; \n\t\t\t} \n\t\treturn dump ( derObject ) ; \n\t\t} \n\tcatch ( IOException ex ) { \n\t\tthrow new Asn1Exception ( res . getString ( NUM00 ) , ex ) ; \n\t\t} \n\t} \n"}, {"code": "private static void assertChangeEvents ( $F101180 earlyEvents , $F101180 lateEvents , $F101180 anytimeEvents , $F101180 actualEvents ) { \n\tString inputDesc = String . format ( NUM00 + NUM00 , earlyEvents . toString ( ) , lateEvents . toString ( ) , anytimeEvents . toString ( ) , actualEvents . toString ( ) ) ; \n\t$F101193 ( early , earlyEvents ) $F101193 ( late , lateEvents ) $F101193 ( any , anytimeEvents ) $F101197 ( ev , early , assertFalse , late , any ) $F101197 ( ev , late , assertFalse , early , any ) $F101197 ( ev , any , assertFalse , early , late ) for ( PortChangeEvent a : actualEvents ) { \n\t\tif $F16914 ( early , a ) $F1448 if $F16914 ( any , a ) $F1448 if $F16914 ( late , a ) { \n\t\t\tif $F5973 ( early ) { \n\t\t\t\tfail ( a + NUM00 + NUM00 + inputDesc ) ; \n\t\t\t\t} \n\t\t\telse $F1448 } \n\t\tfail ( a + NUM00 + inputDesc ) ; \n\t\t} \n\t$F101205 ( early , fail , inputDesc ) $F101205 ( late , fail , inputDesc ) $F101205 ( any , fail , inputDesc ) } \n"}, {"code": "public static Class needClass ( String property ) throws NoSuchPropertyException { \n\tString value = needProperty ( property ) ; \n\tClass c = null ; \n\ttry { \n\t\tc = Class . forName ( value ) ; \n\t\t} \n\tcatch ( ClassNotFoundException e ) { \n\t\tthrow new NoSuchPropertyException $F6486 ( value , property ) ; \n\t\t} \n\treturn c ; \n\t} \n"}, {"code": "DependencySpec createModuleDependency ( ArtifactResult i , boolean forceExport ) { \n\tif ( JDK_MODULE_NAMES . contains ( i . name ( ) ) ) return JDK_DEPENDENCY ; \n\tfinal ModuleIdentifier mi = createModuleIdentifier ( i ) ; \n\tfinal boolean export = forceExport || ( i . importType ( ) == ImportType . EXPORT ) ; \n\treturn DependencySpec . createModuleDependencySpec ( PathFilters . getMetaInfSubdirectoriesWithoutMetaInfFilter ( ) , ( export ? PathFilters . acceptAll ( ) : PathFilters . rejectAll ( ) ) , this , mi , i . importType ( ) == ImportType . OPTIONAL ) ; \n\t} \n"}, {"code": "public void appendNodes ( NodeSet nodes ) { \n\t$F2199 ( nNodes , nodes ) if ( null == m_map ) { \n\t\tm_mapSize = nNodes + m_blocksize ; \n\t\tm_map = new Node [ m_mapSize ] ; \n\t\t} \n\telse if ( ( m_firstFree + nNodes ) >= m_mapSize ) { \n\t\tm_mapSize += ( nNodes + m_blocksize ) ; \n\t\tNode newMap [ ] = new Node [ m_mapSize ] ; \n\t\tSystem . arraycopy ( m_map , NUM00 , newMap , NUM00 , m_firstFree + nNodes ) ; \n\t\tm_map = newMap ; \n\t\t} \n\t$F197780 ( System , nodes , m_map , m_firstFree , nNodes ) m_firstFree += nNodes ; \n\t} \n"}, {"code": "public void makeImmutable $F72 { \n\t$F4246 ( isMutable , _BOOL ) } \n"}, {"code": "private int readEpoch ( File epochFile ) { \n\tint epoch = - NUM00 ; \n\tif $F1906 ( epochFile ) { \n\t\treturn epoch ; \n\t\t} \n\ttry { \n\t\tScanner scanner = new Scanner ( epochFile ) ; \n\t\tepoch = scanner . nextInt ( ) ; \n\t\tlog . debug ( $F42278 ( epoch , epochFile ) ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\tlog . error ( $F224279 ( epochFile , e ) ) ; \n\t\t} \n\treturn epoch ; \n\t} \n"}, {"code": "private int fastMatch ( String sha1 ) { \n\t$F99426 ( idx , _indexes , sha1 ) if ( idx == null ) $F150 else $F10182 ( idx ) } \n"}, {"code": "$F1322 ( criteria , oredCriteria ) "}, {"code": "public static void format $F4353 ( format , args ) { \n\tif $F931 ( isDisabled ) $F4355 ( print , String , format , args ) } \n"}, {"code": "public void concatenate ( SIPObjectList otherList ) { \n\tsuper . concatenate ( otherList ) ; \n\t} \n"}, {"code": "$F1 $F1230 protected void persist ( Collection < RawProtein $F588333 > filteredProteins , Map < String , Signature > modelIdToSignatureMap , Map < String , Protein > proteinIdToProteinMap ) { \n\tfor ( RawProtein $F588333 rawProtein : filteredProteins ) { \n\t\tProtein protein = proteinIdToProteinMap . get ( rawProtein . getProteinIdentifier ( ) ) ; \n\t\tif ( protein == null ) { \n\t\t\tthrow new IllegalStateException ( NUM00 + NUM00 + rawProtein . getProteinIdentifier ( ) + NUM00 ) ; \n\t\t\t} \n\t\tSet < FingerPrintsMatch . FingerPrintsLocation > locations = null ; \n\t\tString currentSignatureAc = null ; \n\t\tSignature currentSignature = null ; \n\t\tPrintsRawMatch lastRawMatch = null ; \n\t\tfinal TreeSet $F588333 sortedMatches = new TreeSet $F588333 ( PRINTS_RAW_MATCH_COMPARATOR ) ; \n\t\tsortedMatches . addAll ( rawProtein . getMatches ( ) ) ; \n\t\tFingerPrintsMatch match = null ; \n\t\tfor ( PrintsRawMatch rawMatch : sortedMatches ) { \n\t\t\t$F4322 ( rawMatch ) if ( currentSignatureAc == null || ! currentSignatureAc . equals ( rawMatch . getModelId ( ) ) ) { \n\t\t\t\tif ( currentSignatureAc != null ) { \n\t\t\t\t\tif ( match != null ) { \n\t\t\t\t\t\tentityManager . persist ( match ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\tmatch = new FingerPrintsMatch ( currentSignature , lastRawMatch . getEvalue ( ) , lastRawMatch . getGraphscan ( ) , locations ) ; \n\t\t\t\t\tprotein . addMatch ( match ) ; \n\t\t\t\t\t} \n\t\t\t\tlocations = new HashSet < FingerPrintsMatch . FingerPrintsLocation > $F72 ; \n\t\t\t\tcurrentSignatureAc = rawMatch . getModelId ( ) ; \n\t\t\t\tcurrentSignature = modelIdToSignatureMap . get ( currentSignatureAc ) ; \n\t\t\t\tif ( currentSignature == null ) $F322689 ( currentSignatureAc ) } \n\t\t\tlocations . add ( new FingerPrintsMatch . FingerPrintsLocation ( rawMatch . getLocationStart ( ) , boundedLocationEnd ( protein , rawMatch ) , rawMatch . getPvalue ( ) , rawMatch . getScore ( ) , rawMatch . getMotifNumber ( ) ) ) ; \n\t\t\tlastRawMatch = rawMatch ; \n\t\t\t} \n\t\tif ( lastRawMatch != null ) { \n\t\t\tmatch = new FingerPrintsMatch ( currentSignature , lastRawMatch . getEvalue ( ) , lastRawMatch . getGraphscan ( ) , locations ) ; \n\t\t\tprotein . addMatch ( match ) ; \n\t\t\tentityManager . persist ( match ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public Builder withKeyStorePassword ( String trustStorePassword ) { \n\tproperties . setProperty ( NettyOptions . SSL_KEY_STORE_PASSWORD , Assert . notNull ( trustStorePassword , NUM00 ) ) ; \n\treturn this ; \n\t} \n"}, {"code": "public static String suffix ( String string , String suffix ) { \n\tif ( string . endsWith ( suffix ) == _BOOL ) { \n\t\tstring += suffix ; \n\t\t} \n\treturn string ; \n\t} \n"}, {"code": "public Point2D ( double x , double y ) { \n\tif ( Double . isInfinite ( x ) || Double . isInfinite ( y ) ) $F824 if $F89880 ( Double , x , y ) $F824 if ( x == NUM00 ) this . x = NUM00 ; \n\telse this . x = x ; \n\tif ( y == NUM00 ) this . y = NUM00 ; \n\telse this . y = y ; \n\t} \n"}, {"code": "public static void serverFailed ( String serviceName ) { \n\tif $F7311 ( serviceName , validRemoteURL ) { \n\t\tserverFailed = _BOOL ; \n\t\t} \n\telse $F106 ( remoteStubs , serviceName ) } \n"}, {"code": "public RequestHandler ( PokemonGo api , OkHttpClient client ) { \n\tthis . api = api ; \n\tthis . client = client ; \n\tapiEndpoint = ApiSettings . API_ENDPOINT ; \n\t$F40963 ( asyncHttpThread , this ) ; \n\tasyncHttpThread . setDaemon ( _BOOL ) ; \n\t$F2346 ( asyncHttpThread ) } \n"}, {"code": "public String toString $F72 { \n\tString s = NUM00 ; \n\tEnumeration names = getAttributeNames ( ) ; \n\twhile $F1444 ( names ) { \n\t\t$F20039 ( key , names ) Object value = getAttribute ( key ) ; \n\t\tif ( value instanceof AttributeSet ) { \n\t\t\ts = s + key + NUM00 ; \n\t\t\t} \n\t\telse { \n\t\t\ts = s + key + NUM00 + value + NUM00 ; \n\t\t\t} \n\t\t} \n\treturn s ; \n\t} \n"}, {"code": "public VNXeCommandResult removeLunsFromConsistencyGroup $F13322 ( cgId , luns ) { \n\tLunGroupModifyParam param = new LunGroupModifyParam $F72 ; \n\tList $F42136 lunRemoves = new ArrayList $F42136 $F72 ; \n\tfor ( String lunId : luns ) { \n\t\tVNXeBase lun = new VNXeBase ( lunId ) ; \n\t\tLunAddParam lunAdd = new LunAddParam $F72 ; \n\t\tlunAdd . setLun ( lun ) ; \n\t\tlunRemoves . add ( lunAdd ) ; \n\t\t} \n\tparam . setLunRemove ( lunRemoves ) ; \n\tConsistencyGroupRequests req = new ConsistencyGroupRequests ( _khClient ) ; \n\treturn req . modifyConsistencyGroupSync ( cgId , param ) ; \n\t} \n"}, {"code": "private static boolean notInstanceAvailable $F72 { \n\tif ( sInstance == null ) { \n\t\tif $F38402 ( sTrainingTaskFuture ) { \n\t\t\ttry { \n\t\t\t\t$F16478 ( sInstance , sTrainingTaskFuture ) return _BOOL ; \n\t\t\t\t} \n\t\t\tcatch ( InterruptedException | ExecutionException e ) $F37158 ( e , _BOOL ) } \n\t\telse { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void readData ( DataInput din ) throws IOException { \n\t$F89921 ( status , din ) $F89921 ( events , din ) } \n"}, {"code": "$F9863 ( child , dx , dy , _BOOL , checkHorizontal , mCallback , checkVertical , mTouchSlop , Math ) "}, {"code": "public void remove ( String identifier , ActiveConnectionRecord record ) { \n\tsynchronized ( records ) { \n\t\tSet < ActiveConnectionRecord > connections = records . get ( identifier ) ; \n\t\t$F83951 ( connections ) connections . remove ( record ) ; \n\t\tif $F2979 ( connections ) records . remove ( identifier ) ; \n\t\t} \n\t} \n"}, {"code": "private String buildMetroProintPlacementStatusString $F72 { \n\t$F280 ( placementStatusBuf ) if ( placementStatus != null ) { \n\t\t$F46034 ( placementStatusBuf , String ) $F42779 ( placementStatusBuf , placementStatus , dbClient ) } \n\tif ( secondaryPlacementStatus != null ) { \n\t\t$F46034 ( placementStatusBuf , String ) $F42779 ( placementStatusBuf , secondaryPlacementStatus , dbClient ) } \n\t$F92 ( placementStatusBuf ) } \n"}, {"code": "private boolean hasSequence ( Subgraph graph ) { \n\tint oddDegreeCount = NUM00 ; \n\tfor ( Iterator i = graph . nodeIterator ( ) ; \n\ti . hasNext ( ) ; \n\t) { \n\t\t$F67766 ( node , i ) if ( node . getDegree ( ) % NUM00 == NUM00 ) oddDegreeCount ++ ; \n\t\t} \n\treturn oddDegreeCount <= NUM00 ; \n\t} \n"}, {"code": "public void ensureAdditionalCapacity ( final int size ) { \n\tfinal int newCount = visible . position ( ) + size ; \n\tif ( newCount > visible . capacity ( ) ) { \n\t\tfinal ByteBuffer newByteBuffer = ByteBuffer . allocate ( Math . max ( $F238996 ( visible ) , newCount ) ) ; \n\t\t$F14257 ( visible ) visible = newByteBuffer . put ( visible ) ; \n\t\t} \n\t} \n"}, {"code": "public void forceReload ( File file ) $F207 ( fFilesToReoad , file ) "}, {"code": "private static long longMultiplyPowerTen ( long val , int n ) { \n\tif ( val == NUM00 || n <= NUM00 ) return val ; \n\t$F2469 tab = LONG_TEN_POWERS_TABLE ; \n\t$F2469 bounds = THRESHOLDS_TABLE ; \n\tif ( n < tab . length && n < bounds . length ) { \n\t\tlong tenpower = tab [ n ] ; \n\t\t$F116 ( val , tenpower ) if ( Math . abs ( val ) <= bounds [ n ] ) return val * tenpower ; \n\t\t} \n\treturn INFLATED ; \n\t} \n"}, {"code": "public static int wildCompare ( String searchIn , String searchForWildcard ) { \n\tif $F54923 ( searchIn , searchForWildcard ) { \n\t\treturn WILD_COMPARE_NO_MATCH ; \n\t\t} \n\t$F91442 ( searchForWildcard , WILD_COMPARE_MATCH_WITH_WILD ) int result = WILD_COMPARE_NO_MATCH ; \n\tchar wildcardMany = NUM00 ; \n\tchar wildcardOne = NUM00 ; \n\tchar wildcardEscape = NUM00 ; \n\tint searchForPos = NUM00 ; \n\t$F1749 ( searchForEnd , searchForWildcard ) int searchInPos = NUM00 ; \n\t$F1749 ( searchInEnd , searchIn ) while ( searchForPos != searchForEnd ) { \n\t\t$F1280 ( wildstrChar , searchForWildcard , searchForPos ) while ( $F7883 ( searchForWildcard , searchForPos , wildcardMany ) && ( wildstrChar != wildcardOne ) ) { \n\t\t\tif ( $F44927 ( searchForWildcard , searchForPos , wildcardEscape ) && ( ( searchForPos + NUM00 ) != searchForEnd ) ) { \n\t\t\t\tsearchForPos ++ ; \n\t\t\t\t} \n\t\t\tif ( ( searchInPos == searchInEnd ) || ( Character . toUpperCase ( searchForWildcard . charAt ( searchForPos ++ ) ) != Character . toUpperCase ( searchIn . charAt ( searchInPos ++ ) ) ) ) { \n\t\t\t\treturn WILD_COMPARE_MATCH_WITH_WILD ; \n\t\t\t\t} \n\t\t\tif ( searchForPos == searchForEnd ) { \n\t\t\t\treturn ( ( searchInPos != searchInEnd ) ? WILD_COMPARE_MATCH_WITH_WILD : WILD_COMPARE_MATCH_NO_WILD ) ; \n\t\t\t\t} \n\t\t\tresult = WILD_COMPARE_MATCH_WITH_WILD ; \n\t\t\t} \n\t\tif $F44927 ( searchForWildcard , searchForPos , wildcardOne ) { \n\t\t\tdo { \n\t\t\t\tif ( searchInPos == searchInEnd ) $F3139 ( result ) searchInPos ++ ; \n\t\t\t\t} \n\t\t\twhile ( ( ++ searchForPos < searchForEnd ) && $F44927 ( searchForWildcard , searchForPos , wildcardOne ) ) ; \n\t\t\t$F15290 ( searchForPos , searchForEnd ) } \n\t\tif $F44927 ( searchForWildcard , searchForPos , wildcardMany ) { \n\t\t\tchar cmp ; \n\t\t\tsearchForPos ++ ; \n\t\t\tfor ( ; \n\t\t\tsearchForPos != searchForEnd ; \n\t\t\tsearchForPos ++ ) { \n\t\t\t\tif $F44927 ( searchForWildcard , searchForPos , wildcardMany ) $F1448 if $F44927 ( searchForWildcard , searchForPos , wildcardOne ) { \n\t\t\t\t\tif ( searchInPos == searchInEnd ) $F3139 ( WILD_COMPARE_NO_MATCH ) searchInPos ++ ; \n\t\t\t\t\t$F598 } \n\t\t\t\t$F597 } \n\t\t\t$F3627 ( searchForPos , searchForEnd , WILD_COMPARE_MATCH_NO_WILD ) $F3627 ( searchInPos , searchInEnd , WILD_COMPARE_NO_MATCH ) if ( ( $F31375 ( cmp , searchForWildcard , searchForPos ) == wildcardEscape ) && ( ( searchForPos + NUM00 ) != searchForEnd ) ) { \n\t\t\t\t$F373845 ( cmp , searchForWildcard , searchForPos ) } \n\t\t\tsearchForPos ++ ; \n\t\t\tdo { \n\t\t\t\twhile ( ( searchInPos != searchInEnd ) && ( $F29169 ( Character , searchIn , searchInPos ) != Character . toUpperCase ( cmp ) ) ) { \n\t\t\t\t\tsearchInPos ++ ; \n\t\t\t\t\t} \n\t\t\t\tif ( searchInPos ++ == searchInEnd ) { \n\t\t\t\t\treturn WILD_COMPARE_NO_MATCH ; \n\t\t\t\t\t} \n\t\t\t\t{ \n\t\t\t\t\tint tmp = wildCompare ( searchIn , searchForWildcard ) ; \n\t\t\t\t\tif ( tmp <= NUM00 ) $F3139 ( tmp ) } \n\t\t\t\t} \n\t\t\twhile ( ( searchInPos != searchInEnd ) && ( searchForWildcard . charAt ( NUM00 ) != wildcardMany ) ) ; \n\t\t\treturn WILD_COMPARE_NO_MATCH ; \n\t\t\t} \n\t\t} \n\treturn ( ( searchInPos != searchInEnd ) ? WILD_COMPARE_MATCH_WITH_WILD : WILD_COMPARE_MATCH_NO_WILD ) ; \n\t} \n"}, {"code": "boolean compareMethods ( $F5466 Method a , $F5466 Method b ) { \n\tif ( ( a == null ) != ( b == null ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( a != null && b != null ) { \n\t\t$F3067 ( a , b , _BOOL ) } \n\treturn _BOOL ; \n\t} \n"}, {"code": "public Object remove ( String markername ) $F20067 ( prefixLibrarian , markername ) "}, {"code": "String formatLastModified ( String fileName ) { \n\tsynchronized ( dateFormat ) { \n\t\treturn dateFormat . format ( new Date ( FileUtils . lastModified ( fileName ) ) ) ; \n\t\t} \n\t} \n"}, {"code": "public TrueTypeFont ( String platname , Object nativeNames , int fIndex , boolean javaRasterizer , boolean useFilePool ) throws FontFormatException { \n\tsuper ( platname , nativeNames ) ; \n\tuseJavaRasterizer = javaRasterizer ; \n\tfontRank = Font2D . TTF_RANK ; \n\ttry { \n\t\tverify ( useFilePool ) ; \n\t\tinit ( fIndex ) ; \n\t\t$F14406 ( useFilePool , close ) } \n\tcatch ( Throwable t ) { \n\t\tclose ( ) ; \n\t\tif ( t instanceof FontFormatException ) { \n\t\t\tthrow ( FontFormatException ) t ; \n\t\t\t} \n\t\telse { \n\t\t\tthrow new FontFormatException $F580 ; \n\t\t\t} \n\t\t} \n\tDisposer . addObjectRecord ( this , disposerRecord ) ; \n\t} \n"}, {"code": "public void calcMinMax $F72 { \n\t$F8249 ( mDataSets ) mYMax = - Float . MAX_VALUE ; \n\tmYMin = Float . MAX_VALUE ; \n\tmXMax = - Float . MAX_VALUE ; \n\tmXMin = Float . MAX_VALUE ; \n\tfor ( $F12534 ( i , size , mDataSets ) ) { \n\t\t$F6391 ( set , mDataSets , i ) calcMinMax ( set ) ; \n\t\t} \n\tmLeftAxisMax = - Float . MAX_VALUE ; \n\tmLeftAxisMin = Float . MAX_VALUE ; \n\tmRightAxisMax = - Float . MAX_VALUE ; \n\tmRightAxisMin = Float . MAX_VALUE ; \n\tT firstLeft = getFirstLeft ( mDataSets ) ; \n\tif ( firstLeft != null ) { \n\t\t$F546052 ( mLeftAxisMax , firstLeft ) $F546053 ( mLeftAxisMin , firstLeft ) for ( $F2277 ( i , mDataSets ) ) { \n\t\t\t$F6391 ( dataSet , mDataSets , i ) if $F259981 ( dataSet , AxisDependency ) { \n\t\t\t\tif ( dataSet . getYMin ( ) < mLeftAxisMin ) $F546053 ( mLeftAxisMin , dataSet ) if ( dataSet . getYMax ( ) > mLeftAxisMax ) $F546052 ( mLeftAxisMax , dataSet ) } \n\t\t\t} \n\t\t} \n\tT firstRight = getFirstRight ( mDataSets ) ; \n\tif ( firstRight != null ) { \n\t\t$F546052 ( mRightAxisMax , firstRight ) $F546053 ( mRightAxisMin , firstRight ) for ( $F2277 ( i , mDataSets ) ) { \n\t\t\t$F6391 ( dataSet , mDataSets , i ) if ( dataSet . getAxisDependency ( ) == AxisDependency . RIGHT ) { \n\t\t\t\tif ( dataSet . getYMin ( ) < mRightAxisMin ) $F546053 ( mRightAxisMin , dataSet ) if ( dataSet . getYMax ( ) > mRightAxisMax ) $F546052 ( mRightAxisMax , dataSet ) } \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public LogarithmicAxis ( String label ) $F34462 ( super , label , setupNumberFmtObj ) "}, {"code": "protected final boolean has_cycle_recu ( $F155343 p_visited_items , BrdItem p_search_item , BrdItem p_come_from_item , boolean p_ignore_areas ) { \n\tif ( p_ignore_areas && ( this instanceof BrdAreaConduction ) ) return _BOOL ; \n\t$F129519 contact_list = get_normal_contacts ( ) ; \n\t$F397 ( contact_list , _BOOL ) for ( BrdItem curr_contact : contact_list ) { \n\t\t$F73688 ( curr_contact , p_come_from_item ) if ( curr_contact == p_search_item ) return _BOOL ; \n\t\tif $F73676 ( p_visited_items , curr_contact ) $F598 if ( curr_contact . has_cycle_recu ( p_visited_items , p_search_item , this , p_ignore_areas ) ) return _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static boolean isCallingClassReflectionAvailable $F72 { \n\treturn _BOOL ; \n\t} \n"}, {"code": "$F1 public void addTableModelListener ( TableModelListener l ) $F207 ( m_Listeners , l ) "}, {"code": "public Process exec ( $F806 taintedCommand , $F806 taintedEnvironment , File workingDirectory , boolean redirectErrorStream ) throws IOException { \n\t$F896 ( taintedCommand ) if $F9634 ( taintedCommand ) $F10547 $F806 command = taintedCommand . clone ( ) ; \n\t$F806 environment = taintedEnvironment != null ? taintedEnvironment . clone ( ) : null ; \n\tfor ( $F1139 ( i , command ) ) { \n\t\tif ( command [ i ] == null ) { \n\t\t\tthrow new NullPointerException ( NUM00 + i + NUM00 ) ; \n\t\t\t} \n\t\t} \n\tif ( environment != null ) { \n\t\tfor ( $F1139 ( i , environment ) ) { \n\t\t\tif ( environment [ i ] == null ) { \n\t\t\t\tthrow new NullPointerException ( NUM00 + i + NUM00 ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tFileDescriptor $F23044 ( in ) ; \n\tFileDescriptor $F23044 ( out ) ; \n\tFileDescriptor $F23044 ( err ) ; \n\tString workingPath = ( workingDirectory == null ) ? null : workingDirectory . getPath ( ) ; \n\tsynchronized ( processReferences ) { \n\t\tint pid ; \n\t\ttry { \n\t\t\tpid = exec ( command , environment , workingPath , in , out , err , redirectErrorStream ) ; \n\t\t\t} \n\t\tcatch ( IOException e ) { \n\t\t\tIOException wrapper = new IOException ( NUM00 + NUM00 + Arrays . toString ( command ) + NUM00 + workingDirectory + NUM00 + Arrays . toString ( environment ) ) ; \n\t\t\twrapper . initCause ( e ) ; \n\t\t\tthrow wrapper ; \n\t\t\t} \n\t\tProcessImpl process = new ProcessImpl ( pid , in , out , err ) ; \n\t\tProcessReference processReference = new ProcessReference ( process , referenceQueue ) ; \n\t\tprocessReferences . put ( pid , processReference ) ; \n\t\t$F165 ( processReferences ) return process ; \n\t\t} \n\t} \n"}, {"code": "private static $F806 formGrams ( String text , int ng ) { \n\t$F1749 ( len , text ) $F806 res = new String [ len - ng + NUM00 ] ; \n\tfor ( int i = NUM00 ; \n\ti < len - ng + NUM00 ; \n\ti ++ ) { \n\t\tres [ i ] = text . substring ( i , i + ng ) ; \n\t\t} \n\treturn res ; \n\t} \n"}, {"code": "public void loadSettingsFromJson $F72 { \n\tsynchronized ( LOCK ) { \n\t\tloadSettingsFromJson ( defaultFile ) ; \n\t\tfor ( String fileName : files ) { \n\t\t\tloadSettingsFromJson ( fileName ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void testFlush $F72 throws Exception { \n\t$F1191 ( data ) $F1196 ( tos ) CipherOutputStream cos = new CipherOutputStream ( tos ) $F845 ; \n\tcos . write ( data ) ; \n\t$F1206 ( cos ) $F1208 ( result , tos ) $F1211 ( Arrays , result , data , fail ) } \n"}, {"code": "public void loadTrainIcons $F72 { \n\tfor ( Train train : getTrainsByIdList ( ) ) { \n\t\ttrain . loadTrainIcon ( ) ; \n\t\t} \n\t} \n"}, {"code": "public final String translate ( final CharSequence input ) { \n\t$F1338 ( input ) try { \n\t\tfinal StringWriter $F9487 ( writer , input ) ; \n\t\ttranslate ( input , writer ) ; \n\t\t$F92 ( writer ) } \n\t$F9492 ( ioe ) } \n"}, {"code": "public void insertReverseSorted ( final int idx , final double distance ) { \n\tint i = NUM00 ; \n\tfor ( ListNode temp : m_List ) { \n\t\tif ( temp . distance < distance ) $F5153 i ++ ; \n\t\t} \n\tm_List . add ( i , new ListNode ( idx , distance ) ) ; \n\t} \n"}, {"code": "public double normalDistance ( final double x , final double y , final double z , final Membership ... bounds ) { \n\tfinal double dist = evaluate ( x , y , z ) ; \n\tfinal double perpX = x - dist * this . x ; \n\tfinal double perpY = y - dist * this . y ; \n\tfinal double perpZ = z - dist * this . z ; \n\tif ( ! meetsAllBounds ( perpX , perpY , perpZ , bounds ) ) $F90685 ( Double ) $F12286 ( Math , dist ) } \n"}, {"code": "public void testBAandBCbrokerNetworkWithSelectorsSendFirst $F72 throws Exception { \n\tbridgeBrokers ( NUM00 , NUM00 , _BOOL , NUM00 , _BOOL ) ; \n\tbridgeBrokers ( NUM00 , NUM00 , _BOOL , NUM00 , _BOOL ) ; \n\tstartAllBrokers ( ) ; \n\twaitForBridgeFormation ( ) ; \n\tDestination dest = createDestination ( NUM00 , _BOOL ) ; \n\t$F530 $F8690 ( props ) ; \n\t$F16824 ( props ) sendMessages ( NUM00 , dest , MESSAGE_COUNT , props ) ; \n\t$F725 ( props ) $F16824 ( props ) sendMessages ( NUM00 , dest , MESSAGE_COUNT , props ) ; \n\tMessageConsumer clientA = createConsumer ( NUM00 , dest , NUM00 ) ; \n\tMessageConsumer clientC = createConsumer ( NUM00 , dest , NUM00 ) ; \n\t$F9470 ( Thread ) MessageIdList msgsA = getConsumerMessages ( NUM00 , clientA ) ; \n\tMessageIdList msgsC = getConsumerMessages ( NUM00 , clientC ) ; \n\t$F165310 ( assertEquals , MESSAGE_COUNT , msgsA ) $F165310 ( assertEquals , MESSAGE_COUNT , msgsC ) } \n"}, {"code": "private void generateVectorDrawableResult ( VectorDrawable vector , String nextVectorName , boolean isLast , boolean isFirst ) throws IOException { \n\tCustomLogger . logError ( NUM00 + vector . getFileName ( ) + NUM00 + isLast ) ; \n\tif ( ! vectorAlreadyDefined . contains ( vector . getFileName ( ) ) ) { \n\t\tcurrentVectorFileName = vector . getFileName ( ) ; \n\t\tCustomLogger . logError ( NUM00 + currentVectorFileName ) ; \n\t\t$F57201 ( vectorFile , drawableFolder , currentVectorFileName ) BufferedWriter vectorBW = createIt ( vectorFile ) ; \n\t\tCustomLogger . log ( $F4929 ( vectorFile ) ) ; \n\t\tgenerateVectorDrawable ( vector , vectorBW , isLast ) ; \n\t\tvectorAlreadyDefined . add ( vector . getFileName ( ) ) ; \n\t\t$F1206 ( vectorBW ) $F59 ( vectorBW ) } \n\tif ( ! isLast ) { \n\t\tFile animatedVectorFile = new File ( drawableFolder , animatedVector . replace ( NUM00 , currentVectorFileName ) ) ; \n\t\tBufferedWriter animatedVectorBW = createIt ( animatedVectorFile ) ; \n\t\tCustomLogger . log ( $F4929 ( animatedVectorFile ) ) ; \n\t\tCustomLogger . logError ( $F62869 ( animatedVectorFile ) + nextVectorName ) ; \n\t\tgenerateAnimatedVector ( vector , animatedVectorBW , nextVectorName , _BOOL ) ; \n\t\tgenerateAnimatorSet ( vector , _BOOL ) ; \n\t\t$F1206 ( animatedVectorBW ) $F59 ( animatedVectorBW ) } \n\tif ( ! isLast ) { \n\t\tFile animatedVectorFile = new File ( drawableFolder , animatedVector . replace ( NUM00 , currentVectorFileName + reverse ) ) ; \n\t\tBufferedWriter animatedVectorBW = createIt ( animatedVectorFile ) ; \n\t\tCustomLogger . log ( $F4929 ( animatedVectorFile ) ) ; \n\t\tCustomLogger . logError ( $F62869 ( animatedVectorFile ) + nextVectorName ) ; \n\t\tgenerateAnimatedVector ( vector , animatedVectorBW , nextVectorName , _BOOL ) ; \n\t\tgenerateAnimatorSet ( vector , _BOOL ) ; \n\t\t$F1206 ( animatedVectorBW ) $F59 ( animatedVectorBW ) } \n\t} \n"}, {"code": "public void access $F72 $F22067 ( lastAccessedTime , System ) "}, {"code": "public void writeToObject ( Object object ) { \n\ttry { \n\t\tMethod method = BeanUtils . getWriteMethod ( object . getClass ( ) , getName ( ) , getType ( ) ) ; \n\t\tif ( method != null ) { \n\t\t\tmethod . invoke ( object , new Object $F57620 ( getValue ) ) ; \n\t\t\t} \n\t\t} \n\t$F12237 ( e ) } \n"}, {"code": "private HttpURLConnection doHTTPPostRequest ( String location , String clientSessionId , $F2540 ( metadata ) , String postBody ) throws CommunicationException { \n\tOutputStreamWriter writer = null ; \n\ttry { \n\t\t$F9518 ( url , location ) $F7963 ( connection , url ) $F2407 ( connection ) connection . addRequestProperty ( NUM00 , NUM00 ) ; \n\t\tif ( clientSessionId != null ) { \n\t\t\tconnection . addRequestProperty ( HTTP_HEADER_SESSION_ID , NUM00 + clientSessionId ) ; \n\t\t\t} \n\t\tif ( metadata != null ) { \n\t\t\tconnection . addRequestProperty ( HTTP_HEADER_METADATA , GcUtil . getBase64EncodedMetadata ( metadata ) ) ; \n\t\t\t} \n\t\tif ( Constants . ENABLE_REQUEST_LOGGING ) { \n\t\t\tlogRequest ( connection , postBody ) ; \n\t\t\t} \n\t\tconnection . setDoOutput ( _BOOL ) ; \n\t\twriter = new OutputStreamWriter ( connection . getOutputStream ( ) , NUM00 ) ; \n\t\twriter . write ( postBody ) ; \n\t\t$F1206 ( writer ) if ( connection . getResponseCode ( ) != NUM00 ) { \n\t\t\tthrow new CommunicationException ( $F7974 ( connection ) ) ; \n\t\t\t} \n\t\treturn connection ; \n\t\t} \n\tcatch ( MalformedURLException e ) { \n\t\t$F110901 ( Log , TAG , location ) throw new CommunicationException ( NUM00 + location ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\t$F56767 ( Log , TAG , e ) throw new CommunicationException $F11592 ( e ) ; \n\t\t} \n\tfinally { \n\t\tif ( writer != null ) { \n\t\t\ttry $F881 ( writer ) catch ( IOException e ) { \n\t\t\t\tLog . i ( $F56761 ( TAG , e ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "void ioMessage ( Throwable ex ) { \n\tlog . printLines ( PrefixKind . JAVAC , NUM00 ) ; \n\t$F94360 ( ex , log , WriterKind ) } \n"}, {"code": "ObjectAnimator animateBoundScroll $F72 { \n\tfloat curScroll = getStackScroll ( ) ; \n\tfloat newScroll = getBoundedStackScroll ( curScroll ) ; \n\tif ( Float . compare ( newScroll , curScroll ) != NUM00 ) $F16625 ( animateScroll , curScroll , newScroll ) return mScrollAnimator ; \n\t} \n"}, {"code": "$F139813 ( doc , elementList , nameNode , child , substring , load , _BOOL , assertEquals ) "}, {"code": "public static $F252768 nodeIds ( $F5466 Collection < ? extends ClusterNode > nodes ) { \n\tif $F4251 ( nodes ) $F12522 ( Collections ) return F . viewReadOnly ( nodes , node2id ( ) ) ; \n\t} \n"}, {"code": "public static InputStream toInputStream ( final CharSequence input , final Charset encoding ) { \n\treturn IOUtils . toInputStream ( input . toString ( ) , encoding ) ; \n\t} \n"}, {"code": "public static boolean matchesXMLString ( $F1469 buf , int off , int end , String str ) { \n\t$F1749 ( len , str ) if ( len != end - off ) return _BOOL ; \n\tfor ( int i = NUM00 ; \n\ti < len ; \n\toff += NUM00 , i ++ ) { \n\t\tif ( buf [ off ] != str . charAt ( i ) ) return _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public double r $F72 { \n\t$F126355 ( Math , x , y ) } \n"}, {"code": "public void sign ( KeyPair keypair ) throws IOException { \n\tif $F2979 ( namelist ) $F4639 $F826 ( keypair ) try { \n\t\tGeneralName [ ] gns = new GeneralName $F2313 ( namelist ) ; \n\t\tfor ( $F2277 ( ix , namelist ) ) { \n\t\t\tgns [ ix ] = new GeneralName ( GeneralName . dNSName , namelist . get ( ix ) ) ; \n\t\t\t} \n\t\tGeneralNames subjectAltName = new GeneralNames ( gns ) ; \n\t\tPKCS10CertificationRequestBuilder p10Builder = new JcaPKCS10CertificationRequestBuilder ( namebuilder . build ( ) , keypair . getPublic ( ) ) ; \n\t\tExtensionsGenerator extensionsGenerator = new ExtensionsGenerator $F72 ; \n\t\textensionsGenerator . addExtension ( Extension . subjectAlternativeName , _BOOL , subjectAltName ) ; \n\t\tp10Builder . addAttribute ( PKCSObjectIdentifiers . pkcs_9_at_extensionRequest , extensionsGenerator . generate ( ) ) ; \n\t\tPrivateKey pk = keypair . getPrivate ( ) ; \n\t\tJcaContentSignerBuilder csBuilder = new JcaContentSignerBuilder ( pk instanceof ECKey ? EC_SIGNATURE_ALG : SIGNATURE_ALG ) ; \n\t\tContentSigner signer = csBuilder . build ( pk ) ; \n\t\tcsr = p10Builder . build ( signer ) ; \n\t\t} \n\tcatch ( OperatorCreationException ex ) $F19592 ( ex ) } \n"}, {"code": "void removeEmptyRows ( final List list ) { \n\tfor ( final Iterator < ReceiptDetailInfo > detail = list . iterator ( ) ; \n\tdetail . hasNext ( ) ; \n\t) if ( detail . next ( ) == null ) $F7042 ( detail ) } \n"}, {"code": "private void add ( String text , Text textNode ) { \n\t$F1749 ( startIndex , builder ) builder . append ( text ) ; \n\t$F1749 ( endIndex , builder ) textRuns . add ( new TextRun ( textNode , startIndex , endIndex ) ) ; \n\t} \n"}, {"code": "public DNetscapeBaseUrl ( JDialog parent ) $F15427 ( super , parent , setTitle , res , initComponents ) "}, {"code": "private void readObject ( ObjectInputStream s ) throws $F6427 { \n\t$F6428 ( s ) init ( getName ( ) ) ; \n\t} \n"}, {"code": "public void appendRow ( RowSpec rowSpec ) { \n\tcheckNotNull ( rowSpec , NUM00 ) ; \n\trowSpecs . add ( rowSpec ) ; \n\t} \n"}, {"code": "public static $F4203 ReactiveSeq $F4203 fromPublisher ( final $F40798 publisher ) { \n\tObjects . requireNonNull ( publisher ) ; \n\tfinal SeqSubscriber $F4203 sub = SeqSubscriber . subscriber ( ) ; \n\tpublisher . subscribe ( sub ) ; \n\treturn sub . stream ( ) ; \n\t} \n"}, {"code": "public void multiplyAllValuesBy ( final double multiplyBy , final int RoundType ) { \n\tfor ( final T t : keySet ( ) ) { \n\t\t$F28095 ( val , m_values , t ) switch ( RoundType ) { \n\t\t\t$F3366 val = Math . floor ( val * multiplyBy ) ; \n\t\t\t$F597 $F3366 val = Math . round ( val * multiplyBy ) ; \n\t\t\t$F597 $F3366 val = Math . ceil ( val * multiplyBy ) ; \n\t\t\t$F597 $F1267 val = val * multiplyBy ; \n\t\t\t$F597 } \n\t\tput ( t , ( int ) val ) ; \n\t\t} \n\t} \n"}, {"code": "public void onTabsAllClosing ( long time , boolean incognito ) $F845 "}, {"code": "public final $F39461 await ( Duration timeout ) { \n\tif $F22360 ( cdl ) { \n\t\treturn this ; \n\t\t} \n\ttry { \n\t\tif ( ! cdl . await ( timeout . toMillis ( ) , TimeUnit . MILLISECONDS ) ) $F184395 return this ; \n\t\t} \n\tcatch ( InterruptedException ex ) $F25083 ( ex ) } \n"}, {"code": "protected void paintContentBorderBottomEdge ( Graphics g , int tabPlacement , int selectedIndex , int x , int y , int w , int h ) { \n\tboolean leftToRight = CompiereUtils . isLeftToRight ( tabPane ) ; \n\tint bottom = y + h - NUM00 ; \n\tint right = x + w - NUM00 ; \n\tRectangle selRect = selectedIndex < NUM00 ? null : getTabBounds ( selectedIndex , calcRect ) ; \n\tg . setColor ( shadow ) ; \n\tif ( tabPlacement != BOTTOM || selectedIndex < NUM00 || ( selRect . x < x || selRect . x > x + w ) ) { \n\t\tg . setColor ( darkShadow ) ; \n\t\tg . drawLine ( x , y + h - NUM00 , x + w - NUM00 , y + h - NUM00 ) ; \n\t\t} \n\telse { \n\t\tboolean lastInRun = isLastInRun ( selectedIndex ) ; \n\t\tg . setColor ( darkShadow ) ; \n\t\tif ( leftToRight || lastInRun ) g . drawLine ( x , bottom , selRect . x , bottom ) ; \n\t\telse g . drawLine ( x , bottom , selRect . x - NUM00 , bottom ) ; \n\t\tif ( $F6108 ( selRect ) < x + w - NUM00 ) { \n\t\t\tif ( leftToRight && ! lastInRun ) g . drawLine ( $F6108 ( selRect ) , bottom , right , bottom ) ; \n\t\t\telse g . drawLine ( $F6108 ( selRect ) - NUM00 , bottom , right , bottom ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static void upto ( double self , Number to , $F50462 ( closure ) ) { \n\t$F50466 ( to1 , to ) if ( self <= to1 ) { \n\t\tfor ( double i = self ; \n\t\ti <= to1 ; \n\t\ti ++ ) $F50467 ( closure , i ) } \n\telse $F50472 ( to , self ) } \n"}, {"code": "public void save ( String type , List < ElasticSearchDoc > docs ) { \n\tif $F1032 ( docs ) { \n\t\tList < List < ElasticSearchDoc > > partitionedDocs = Lists . partition ( docs , NUM00 ) ; \n\t\t$F22620 ( partitionedDocs ) } \n\t} \n"}, {"code": "public void error ( SourceLocator srcLctr , String msg ) throws TransformerException { \n\terror ( srcLctr , null , null , msg , null ) ; \n\t} \n"}, {"code": "void removeListener ( String listenerID ) { \n\tif ( listenerObjects != null ) { \n\t\tsynchronized ( listenerObjects ) { \n\t\t\tlistenerObjects . remove ( listenerID ) ; \n\t\t\tif $F2979 ( listenerObjects ) $F5795 ( deregisterListener ) } \n\t\t$F21954 ( debug , serviceName , listenerID ) } \n\t} \n"}, {"code": "$F1309 public void registerCredentials ( UserCredential authentication ) { \n\twallet . put ( authentication . getURL ( ) , authentication ) ; \n\t} \n"}, {"code": "public void testDatabaseDriverPropertiesUserAndPasswordPropertyOverrideDSUserAndPassword $F72 { \n\tString driverPropertyString = NUM00 ; \n\t$F2697 ( props ) props . setProperty ( DatasourcePropertySet . USERNAME , NUM00 ) ; \n\tprops . setProperty ( DatasourcePropertySet . PASSWORD , NUM00 ) ; \n\tprops . setProperty ( DatasourcePropertySet . CONNECTION_PROPERTIES , driverPropertyString ) ; \n\tDataSource ds = dataSourceConverter . fromProperties ( props ) ; \n\tassertEquals ( NUM00 , ds . getUsername ( ) ) ; \n\tassertEquals ( NUM00 , ds . getPassword ( ) ) ; \n\t} \n"}, {"code": "public boolean isAGCEnabled $F72 $F1522 ( mAGCEnabled ) "}, {"code": "protected $F28830 splitIntoAllophones ( String phoneString ) { \n\t$F28830 $F31408 ( phoneList ) ; \n\tfor ( $F1088 ( i , phoneString ) ) { \n\t\tString name = null ; \n\t\tfor ( $F183017 ( j ) ) { \n\t\t\tif ( i + j <= phoneString . length ( ) ) { \n\t\t\t\t$F25024 ( candidate , phoneString , i , j ) if ( getAllophone ( candidate ) != null ) { \n\t\t\t\t\tname = candidate ; \n\t\t\t\t\ti += j - NUM00 ; \n\t\t\t\t\t$F597 } \n\t\t\t\t} \n\t\t\t} \n\t\t$F1140 ( name , phoneList ) } \n\treturn phoneList ; \n\t} \n"}, {"code": "protected void addToMaintenanceQueue ( NodePortTuple npt ) $F116364 ( maintenanceQueue , npt , _BOOL ) "}, {"code": "private boolean execute ( boolean readResponse ) throws IOException { \n\ttry { \n\t\thttpEngine . sendRequest ( ) ; \n\t\t$F177970 ( readResponse , httpEngine ) return _BOOL ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\tif ( handleFailure ( e ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\telse { \n\t\t\tthrow e ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public BigdataSail ( final Properties properties ) { \n\tthis ( properties . getProperty ( Options . NAMESPACE , Options . DEFAULT_NAMESPACE ) , new Journal ( properties ) ) ; \n\tcloseOnShutdown = _BOOL ; \n\tif $F931 ( exists ) { \n\t\ttry { \n\t\t\tcreate ( properties ) ; \n\t\t\t} \n\t\tcatch ( InterruptedException | ExecutionException e ) $F9491 ( e ) } \n\t} \n"}, {"code": "public float convert $F72 { \n\treturn Float . intBitsToFloat ( ( int ) bytes ) ; \n\t} \n"}, {"code": "protected int addNode ( Node node , int parentIndex , int previousSibling , int forceNodeType ) { \n\t$F2199 ( nodeIndex , m_nodes ) if ( m_dtmIdent . size ( ) == ( nodeIndex > > > DTMManager . IDENT_DTM_NODE_BITS ) ) { \n\t\ttry { \n\t\t\tif ( m_mgr == null ) throw new ClassCastException $F72 ; \n\t\t\tDTMManagerDefault mgrD = ( DTMManagerDefault ) m_mgr ; \n\t\t\tint id = mgrD . getFirstFreeDTMID ( ) ; \n\t\t\tmgrD . addDTM ( this , id , nodeIndex ) ; \n\t\t\tm_dtmIdent . addElement ( id < < DTMManager . IDENT_DTM_NODE_BITS ) ; \n\t\t\t} \n\t\tcatch ( ClassCastException e ) { \n\t\t\terror ( XMLMessages . createXMLMessage ( XMLErrorResources . ER_NO_DTMIDS_AVAIL , null ) ) ; \n\t\t\t} \n\t\t} \n\tm_size ++ ; \n\tint type ; \n\tif ( NULL == forceNodeType ) type = node . getNodeType ( ) ; \n\telse type = forceNodeType ; \n\tif ( Node . ATTRIBUTE_NODE == type ) { \n\t\t$F48115 ( name , node ) if $F26612 ( name ) { \n\t\t\ttype = DTM . NAMESPACE_NODE ; \n\t\t\t} \n\t\t} \n\tm_nodes . addElement ( node ) ; \n\tm_firstch . setElementAt ( NOTPROCESSED , nodeIndex ) ; \n\tm_nextsib . setElementAt ( NOTPROCESSED , nodeIndex ) ; \n\tm_prevsib . setElementAt ( previousSibling , nodeIndex ) ; \n\tm_parent . setElementAt ( parentIndex , nodeIndex ) ; \n\tif ( DTM . NULL != parentIndex && type != DTM . ATTRIBUTE_NODE && type != DTM . NAMESPACE_NODE ) { \n\t\tif ( NOTPROCESSED == m_firstch . elementAt ( parentIndex ) ) m_firstch . setElementAt ( nodeIndex , parentIndex ) ; \n\t\t} \n\tString nsURI = node . getNamespaceURI ( ) ; \n\tString localName = ( type == Node . PROCESSING_INSTRUCTION_NODE ) ? node . getNodeName ( ) : node . getLocalName ( ) ; \n\tif ( ( ( type == Node . ELEMENT_NODE ) || ( type == Node . ATTRIBUTE_NODE ) ) && null == localName ) $F89257 ( localName , node ) ExpandedNameTable exnt = m_expandedNameTable ; \n\tif ( node . getLocalName ( ) == null && ( type == Node . ELEMENT_NODE || type == Node . ATTRIBUTE_NODE ) ) $F845 int expandedNameID = ( null != localName ) ? exnt . getExpandedTypeID ( nsURI , localName , type ) : exnt . getExpandedTypeID ( type ) ; \n\tm_exptype . setElementAt ( expandedNameID , nodeIndex ) ; \n\tindexNode ( expandedNameID , nodeIndex ) ; \n\tif ( DTM . NULL != previousSibling ) m_nextsib . setElementAt ( nodeIndex , previousSibling ) ; \n\tif ( type == DTM . NAMESPACE_NODE ) declareNamespaceInContext ( parentIndex , nodeIndex ) ; \n\treturn nodeIndex ; \n\t} \n"}, {"code": "public FileProcessController ( final FileControllerParameters arguments , final int pid ) { \n\tthis ( arguments , pid , Long . getLong ( STATUS_TIMEOUT_PROPERTY , NUM00 * NUM00 ) , TimeUnit . MILLISECONDS ) ; \n\t} \n"}, {"code": "public void testAddCertificate2 $F72 throws Exception { \n\t$F63182 ( i ) $F259912 ( pk1 ) $F63198 ( c1 , pk1 ) i . addCertificate ( c1 ) ; \n\tassertSame ( c1 , i . certificates ( ) [ NUM00 ] ) ; \n\t$F259918 ( assertSame , pk1 , i ) } \n"}, {"code": "$F31396 ( str , retval , ch , i , s , Integer ) "}, {"code": "protected Set < $F8318 > send ( String channelId , Object message ) { \n\tCollection $F263492 sessions = ( channelId != null ) ? socketSessions . get ( channelId ) : null ; \n\tif $F1032 ( sessions ) { \n\t\tSet < $F8318 > results = new $F9623 $F716 ( sessions ) ; \n\t\t$F102426 ( json , Json , message ) for ( Session session : sessions ) { \n\t\t\tif $F23014 ( session ) { \n\t\t\t\tsend ( session , json , results ) ; \n\t\t\t\t} \n\t\t\t} \n\t\treturn results ; \n\t\t} \n\treturn emptySet ( ) ; \n\t} \n"}, {"code": "public Object attribute ( Object key ) { \n\treturn ( attributes != null ) ? attributes . get ( key ) : null ; \n\t} \n"}, {"code": "public Response doPut ( String url ) $F13736 ( doPut , url ) "}, {"code": "private static $F7329 offsetRRX $F7334 ( offset , environment , instructions , registerNodeValue1 , registerNodeValue2 ) { \n\t$F7336 ( address , environment ) $F7336 ( index , environment ) $F7336 ( tmpVar , environment ) $F7336 ( tmpVar1 , environment ) $F7336 ( tmpVar2 , environment ) $F7336 ( tmpVar3 , environment ) long baseOffset = offset ; \n\tinstructions . add ( ReilHelpers . createBsh ( baseOffset ++ , bt , NUM00 , wd , String . valueOf ( NUM00 ) , dw , tmpVar1 ) ) ; \n\tinstructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dw , registerNodeValue2 , bt , $F43818 ( String ) , dw , tmpVar2 ) ) ; \n\t$F43825 ( instructions , ReilHelpers , baseOffset , dw , tmpVar1 , tmpVar2 , tmpVar3 ) $F7341 ( instructions , ReilHelpers , baseOffset , dw , tmpVar3 , dWordBitMask , index ) $F43828 ( instructions , ReilHelpers , baseOffset , dw , registerNodeValue1 , index , tmpVar ) $F7341 ( instructions , ReilHelpers , baseOffset , dw , tmpVar , dWordBitMask , address ) $F7348 ( address , registerNodeValue1 ) } \n"}, {"code": "public void unregisterDropControllers $F72 $F9096 ( dropControllerList ) "}, {"code": "private static long CallStaticLongMethodV $F4272 ( env , classJREF , methodID , argAddress ) throws Exception { \n\t$F4274 ( traceJNI , VM ) $F4275 ( RuntimeEntrypoints ) try { \n\t\tObject returnObj = JNIHelpers . invokeWithVarArg ( methodID , argAddress , TypeReference . Long ) ; \n\t\treturn Reflection . unwrapLong ( returnObj ) ; \n\t\t} \n\t$F4287 ( traceJNI , unexpected , System , env ) } \n"}, {"code": "public static String createLink ( String uri , String label ) { \n\t$F150391 ( uri , label ) } \n"}, {"code": "$F1654 ( segments ) "}, {"code": "public void addOperand ( int startTick , int endTick , String text , Lifeline constraintLifeline ) throws SequenceDiagramCheckedException { \n\tif ( $F10470 ( operands ) && this . startTick != startTick ) $F825 operands . add ( new Operand ( startTick , endTick , text , constraintLifeline ) ) ; \n\t} \n"}, {"code": "public static Number asin ( Number a ) { \n\treturn Math . asin ( a . doubleValue ( ) ) ; \n\t} \n"}, {"code": "private void createAndAttachEvent ( long ov ) throws WindowsException { \n\tlong hEvent = CreateEvent ( _BOOL , _BOOL ) ; \n\tUNSAFE . putAddress ( ov + OFFSETOF_HEVENT , hEvent ) ; \n\t} \n"}, {"code": "public String toString $F72 { \n\t$F280 ( result ) $F84 ( result ) $F2199 ( s1 , sizes ) for ( $F1316 ( i , s1 ) ) { \n\t\t$F85651 ( s2 , sizes , i ) $F84 ( result ) for ( $F1316 ( j , s2 ) ) { \n\t\t\t$F53015 ( result , vector , i , j ) if ( j + NUM00 < s2 ) $F84 ( result ) } \n\t\t$F84 ( result ) if ( i + NUM00 < s1 ) $F84 ( result ) } \n\t$F84 ( result ) $F92 ( result ) } \n"}, {"code": "$F1 public int compareTo ( String o ) { \n\tint result ; \n\tint major ; \n\tint minor ; \n\tint revision ; \n\tint pnt ; \n\t$F11844 ( maj ) $F11844 ( min ) $F11844 ( rev ) $F11844 ( point ) parseVersion ( o , maj , min , rev , point ) ; \n\tmajor = maj [ NUM00 ] ; \n\tminor = min [ NUM00 ] ; \n\trevision = rev [ NUM00 ] ; \n\tpnt = point [ NUM00 ] ; \n\tif ( MAJOR < major ) $F44867 ( result ) else if ( MAJOR == major ) { \n\t\tif ( MINOR < minor ) $F44867 ( result ) else if ( MINOR == minor ) { \n\t\t\tif ( REVISION < revision ) $F44867 ( result ) else if ( REVISION == revision ) { \n\t\t\t\tif ( POINT < pnt ) $F44867 ( result ) else if ( POINT == pnt ) { \n\t\t\t\t\tresult = NUM00 ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tresult = NUM00 ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tresult = NUM00 ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tresult = NUM00 ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tresult = NUM00 ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "private void generateIntegrityKeyPair ( boolean clientMode ) throws UnsupportedEncodingException , IOException , NoSuchAlgorithmException { \n\t$F45669 ( cimagic , CLIENT_INT_MAGIC , encoding ) $F45669 ( simagic , SVR_INT_MAGIC , encoding ) $F5348 ( md5 , MessageDigest ) $F148496 ( keyBuffer , H_A1 , cimagic ) $F7057 ( System , H_A1 , keyBuffer ) $F11244 ( System , cimagic , keyBuffer , H_A1 ) md5 . update ( keyBuffer ) ; \n\t$F294889 ( Kic , md5 ) $F11244 ( System , simagic , keyBuffer , H_A1 ) md5 . update ( keyBuffer ) ; \n\t$F294889 ( Kis , md5 ) if $F70311 ( logger , Level ) { \n\t\ttraceOutput ( DI_CLASS_NAME , NUM00 , NUM00 , Kic ) ; \n\t\ttraceOutput ( DI_CLASS_NAME , NUM00 , NUM00 , Kis ) ; \n\t\t} \n\tif ( clientMode ) { \n\t\tmyKi = Kic ; \n\t\tpeerKi = Kis ; \n\t\t} \n\telse { \n\t\tmyKi = Kis ; \n\t\tpeerKi = Kic ; \n\t\t} \n\t} \n"}, {"code": "public static boolean isLocalFileUri ( Uri uri ) $F67552 ( scheme , getSchemeOrNull , uri , LOCAL_FILE_SCHEME ) "}, {"code": "CompletableFuture < WriteResponse > write ( List < WriteValue > writeValues ) ; \n"}, {"code": "$F188545 ( sourceList , entry , _BOOL ) "}, {"code": "public static boolean validSystemNameConfig ( String systemName , char type ) { \n\t$F27673 ( validSystemNameFormat , systemName , type , _BOOL ) int bit = getBitFromSystemName ( systemName ) ; \n\tif $F34322 ( type ) { \n\t\tif ( ( bit <= NUM00 ) || ( bit > OutputBits . getNumOutputBits ( ) ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\telse if ( type == NUM00 ) { \n\t\tif ( ( bit <= NUM00 ) || ( bit > InputBits . getNumInputBits ( ) ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\telse $F24275 ( log , _BOOL ) return _BOOL ; \n\t} \n"}, {"code": "public boolean mouseMoved ( MouseEvent e ) { \n\tEsriGraphicList list = getEsriGraphicList ( ) ; \n\tboolean ret = _BOOL ; \n\tif ( list != null ) { \n\t\tOMGraphic omg = list . findClosest ( e . getX ( ) , e . getY ( ) , NUM00 ) ; \n\t\tif ( omg != null ) { \n\t\t\tint index ; \n\t\t\tInteger I = ( ( Integer ) omg . getAttribute ( SHAPE_INDEX_ATTRIBUTE ) ) ; \n\t\t\tif ( I != null ) $F276383 ( index , I ) else { \n\t\t\t\tindex = list . indexOf ( omg ) ; \n\t\t\t\t} \n\t\t\tif ( parentLayer == null ) { \n\t\t\t\tComponent comp = getComponent ( ) ; \n\t\t\t\tif ( comp instanceof Layer ) { \n\t\t\t\t\tparentLayer = ( Layer ) comp ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tif ( parentLayer != null ) { \n\t\t\t\tparentLayer . fireRequestToolTip ( getDescription ( index ) ) ; \n\t\t\t\t} \n\t\t\tret = _BOOL ; \n\t\t\t} \n\t\telse if ( parentLayer != null ) { \n\t\t\tparentLayer . fireHideToolTip ( ) ; \n\t\t\t} \n\t\t} \n\treturn ret ; \n\t} \n"}, {"code": "$F4486 ( type , outputStack , n , outputStackTop , t , Math , System , top , owner ) "}, {"code": "public void createDatabaseEntitiesForBusinessObjectDataNotificationRegistrationTesting ( String namespace , $F3803 notificationEventTypes , String businessObjectDefinitionNamespace , String businessObjectDefinitionName , $F3803 fileTypes , $F3803 storageNames , $F3803 businessObjectDataStatuses , List < JobAction > jobActions ) { \n\tNamespaceEntity namespaceEntity = namespaceDao . getNamespaceByCd ( namespace ) ; \n\tif ( namespaceEntity == null ) { \n\t\tnamespaceDaoTestHelper . createNamespaceEntity ( namespace ) ; \n\t\t} \n\tif $F20899 ( CollectionUtils , notificationEventTypes ) { \n\t\tfor ( String notificationEventType : notificationEventTypes ) { \n\t\t\tNotificationEventTypeEntity notificationEventTypeEntity = notificationEventTypeDao . getNotificationEventTypeByCode ( notificationEventType ) ; \n\t\t\tif ( notificationEventTypeEntity == null ) { \n\t\t\t\tnotificationRegistrationDaoTestHelper . createNotificationEventTypeEntity ( notificationEventType ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tBusinessObjectDefinitionEntity businessObjectDefinitionEntity = businessObjectDefinitionDao . getBusinessObjectDefinitionByKey ( new BusinessObjectDefinitionKey ( businessObjectDefinitionNamespace , businessObjectDefinitionName ) ) ; \n\tif ( businessObjectDefinitionEntity == null ) { \n\t\tbusinessObjectDefinitionDaoTestHelper . createBusinessObjectDefinitionEntity ( businessObjectDefinitionNamespace , businessObjectDefinitionName , AbstractServiceTest . DATA_PROVIDER_NAME , AbstractServiceTest . BDEF_DESCRIPTION ) ; \n\t\t} \n\tif $F20899 ( CollectionUtils , fileTypes ) { \n\t\tfor ( String businessObjectFormatFileType : fileTypes ) { \n\t\t\tfileTypeDaoTestHelper . createFileTypeEntity ( businessObjectFormatFileType ) ; \n\t\t\t} \n\t\t} \n\tif $F20899 ( CollectionUtils , storageNames ) { \n\t\tfor ( String storageName : storageNames ) { \n\t\t\tstorageDaoTestHelper . createStorageEntity ( storageName , StoragePlatformEntity . S3 ) ; \n\t\t\t} \n\t\t} \n\tif $F20899 ( CollectionUtils , businessObjectDataStatuses ) { \n\t\tfor ( String businessObjectDataStatus : businessObjectDataStatuses ) { \n\t\t\tBusinessObjectDataStatusEntity businessObjectDataStatusEntity = businessObjectDataStatusDao . getBusinessObjectDataStatusByCode ( businessObjectDataStatus ) ; \n\t\t\tif ( businessObjectDataStatusEntity == null ) { \n\t\t\t\tbusinessObjectDataStatusDaoTestHelper . createBusinessObjectDataStatusEntity ( businessObjectDataStatus ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tif $F20899 ( CollectionUtils , jobActions ) { \n\t\tfor ( JobAction jobAction : jobActions ) { \n\t\t\tjobDefinitionDaoTestHelper . createJobDefinitionEntity ( jobAction . getNamespace ( ) , jobAction . getJobName ( ) , String . format ( NUM00 , jobAction . getNamespace ( ) , jobAction . getJobName ( ) ) , String . format ( NUM00 , jobAction . getNamespace ( ) , jobAction . getJobName ( ) , AbstractServiceTest . ACTIVITI_ID ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public boolean postData ( InputStream data , Long length , OutputStream output , String type , URL url ) { \n\tif ( mockMode ) return _BOOL ; \n\tboolean success = _BOOL ; \n\t$F22996 ( type , DEFAULT_CONTENT_TYPE ) HttpURLConnection urlc = null ; \n\ttry { \n\t\ttry { \n\t\t\t$F23802 ( urlc , url ) try { \n\t\t\t\t$F2407 ( urlc ) } \n\t\t\tcatch ( ProtocolException e ) $F1328 ( fatal , e ) urlc . setDoOutput ( _BOOL ) ; \n\t\t\turlc . setDoInput ( _BOOL ) ; \n\t\t\turlc . setUseCaches ( _BOOL ) ; \n\t\t\turlc . setAllowUserInteraction ( _BOOL ) ; \n\t\t\t$F197920 ( urlc , type ) basicAuth ( urlc ) ; \n\t\t\tif ( null != length ) { \n\t\t\t\turlc . setFixedLengthStreamingMode ( length ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\turlc . setChunkedStreamingMode ( - NUM00 ) ; \n\t\t\t\t} \n\t\t\t$F2410 ( urlc ) } \n\t\tcatch ( IOException e ) { \n\t\t\tfatal ( NUM00 + solrUrl + NUM00 + e ) ; \n\t\t\tsuccess = _BOOL ; \n\t\t\t} \n\t\t$F139686 ( fatal , e ) try ( final OutputStream out = urlc . getOutputStream ( ) ) { \n\t\t\tpipe ( data , out ) ; \n\t\t\t} \n\t\tcatch ( IOException e ) $F1328 ( fatal , e ) try { \n\t\t\tsuccess &= checkResponseCode ( urlc ) ; \n\t\t\ttry ( final InputStream in = urlc . getInputStream ( ) ) { \n\t\t\t\tpipe ( in , output ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( IOException e ) { \n\t\t\twarn ( NUM00 + e ) ; \n\t\t\tsuccess = _BOOL ; \n\t\t\t} \n\t\tcatch ( GeneralSecurityException e ) $F1210 ( fatal ) } \n\tfinally { \n\t\tif ( urlc != null ) $F8074 ( urlc ) } \n\treturn success ; \n\t} \n"}, {"code": "public FormatException ( String s , Throwable rootCause ) { \n\tsuper ( s + NUM00 + rootCause . getLocalizedMessage ( ) ) ; \n\tthis . rootCause = rootCause ; \n\t} \n"}, {"code": "private Pair < BigDecimal , BigDecimal > fillPayment ( final CustomerOrder order , final CustomerOrderDelivery delivery , final Payment payment , final boolean singlePay , final BigDecimal runningTotal , final BigDecimal runningTotalTax , final boolean lastDelivery ) { \n\tif ( payment . getTransactionReferenceId ( ) == null ) { \n\t\tpayment . setTransactionReferenceId ( delivery . getDeliveryNum ( ) ) ; \n\t\t} \n\tpayment . setOrderShipment ( singlePay ? order . getOrdernum ( ) : delivery . getDeliveryNum ( ) ) ; \n\tfillPaymentItems ( delivery , payment ) ; \n\tfillPaymentShipment ( order , delivery , payment ) ; \n\treturn fillPaymentAmount ( order , delivery , payment , singlePay , runningTotal , runningTotalTax , lastDelivery ) ; \n\t} \n"}, {"code": "public static double angle ( NumberVector v1 , NumberVector v2 , NumberVector o ) { \n\tfinal int dim1 = v1 . getDimensionality ( ) , dim2 = v2 . getDimensionality ( ) , dimo = o . getDimensionality ( ) ; \n\tfinal int mindim = ( dim1 <= dim2 ) ? dim1 : dim2 ; \n\t$F72638 ( cross , l1 , l2 ) for ( $F119 ( k , mindim ) ) { \n\t\tfinal double ok = k < dimo ? o . doubleValue ( k ) : NUM00 ; \n\t\tfinal double r1 = v1 . doubleValue ( k ) - ok ; \n\t\tfinal double r2 = v2 . doubleValue ( k ) - ok ; \n\t\tcross += r1 * r2 ; \n\t\tl1 += r1 * r1 ; \n\t\tl2 += r2 * r2 ; \n\t\t} \n\tfor ( int k = mindim ; \n\tk < dim1 ; \n\tk ++ ) { \n\t\tfinal double ok = k < dimo ? o . doubleValue ( k ) : NUM00 ; \n\t\tfinal double r1 = v1 . doubleValue ( k ) - ok ; \n\t\tl1 += r1 * r1 ; \n\t\t} \n\tfor ( int k = mindim ; \n\tk < dim2 ; \n\tk ++ ) { \n\t\tfinal double ok = k < dimo ? o . doubleValue ( k ) : NUM00 ; \n\t\tfinal double r2 = v2 . doubleValue ( k ) - ok ; \n\t\tl2 += r2 * r2 ; \n\t\t} \n\tfinal double a = ( cross == NUM00 ) ? NUM00 : ( l1 == NUM00 || l2 == NUM00 ) ? NUM00 : Math . sqrt ( ( cross / l1 ) * ( cross / l2 ) ) ; \n\treturn ( a < NUM00 ) ? a : NUM00 ; \n\t} \n"}, {"code": "void materialize $F72 { \n\t$F44858 ( cachefill ) double min = Double . MAX_VALUE , max = Double . MIN_VALUE ; \n\tfor ( $F119 ( i , cachefill ) ) { \n\t\t$F37717 ( min , Math , cachec , i ) $F37717 ( max , Math , cachec , i ) } \n\tLinearScale scale = new LinearScale ( min , max ) ; \n\tmin = scale . getMin ( ) ; \n\t$F268954 ( max , scale ) this . base = min ; \n\tthis . max = max ; \n\tthis . binsize = ( max - min ) / this . destsize ; \n\tthis . data = new float [ this . destsize < < NUM00 ] ; \n\tsize = destsize ; \n\tfinal int end = cachefill ; \n\tcachefill = - NUM00 ; \n\tfor ( $F119 ( i , end ) ) $F66563 ( increment , cachec , i , cachev ) cachec = null ; \n\tcachev = null ; \n\t} \n"}, {"code": "public boolean buildHostPart ( Appendable buffer , String url , Boolean useSSL ) throws WebAppConfigurationException , IOException $F33971 ( buildHostPart , buffer , url , useSSL , _BOOL ) "}, {"code": "public static $F4203 $F5675 shiftElementsToEnd ( $F95121 ( source ) , final int count ) { \n\tfinal $F5676 $F719 ( rVal , source ) ; \n\tfor ( $F161865 ( i , count , source ) ) $F62006 ( rVal , source , i ) for ( $F119 ( i , count ) ) $F62006 ( rVal , source , i ) if $F15256 ( source , rVal ) { \n\t\tthrow new IllegalStateException $F80632 ( count , source , rVal ) ; \n\t\t} \n\treturn rVal ; \n\t} \n"}, {"code": "private boolean isLeafPage ( ByteBuffer buffer ) throws IOException { \n\tbyte pageType = buffer . get ( NUM00 ) ; \n\tif ( pageType == PageTypes . INDEX_LEAF ) { \n\t\treturn _BOOL ; \n\t\t} \n\telse if ( pageType == PageTypes . INDEX_NODE ) { \n\t\treturn _BOOL ; \n\t\t} \n\tthrow new IOException ( withErrorContext ( NUM00 + pageType ) ) ; \n\t} \n"}, {"code": "public void addJsLibFiles ( File ... files ) $F50757 ( jsLibFiles , Arrays , files ) "}, {"code": "public void testWriteOffset $F72 { \n\tint len = NUM00 ; \n\tint dataLen = NUM00 ; \n\t$F12490 ( srcData , getWData , dataLen ) $F2175 ( data , dataLen ) int nOffset = NUM00 ; \n\tByteFifoBuffer instance = new ByteFifoBuffer ( len ) ; \n\tint result = instance . writeOffset ( srcData , dataLen , nOffset ) ; \n\tint readCount = instance . readOffset ( data , NUM00 , dataLen , nOffset ) ; \n\tassertEquals ( result , readCount ) ; \n\tassertArrayEquals ( srcData , data ) ; \n\t$F171903 ( halfFilled , dataLen ) System . arraycopy ( srcData , NUM00 , halfFilled , dataLen , dataLen ) ; \n\t$F171903 ( halfFilledRead , dataLen ) instance . readOffset ( halfFilledRead , dataLen , dataLen , nOffset ) ; \n\tassertArrayEquals ( halfFilled , halfFilledRead ) ; \n\tinstance = new ByteFifoBuffer ( len ) ; \n\tinstance . write ( srcData , dataLen ) ; \n\tinstance . write ( srcData , dataLen / NUM00 ) ; \n\tinstance . read ( data , dataLen ) ; \n\tinstance . writeOffset ( srcData , dataLen , NUM00 ) ; \n\tinstance = new ByteFifoBuffer $F989 ; \n\tinstance . writeOffset ( getWData ( NUM00 ) , NUM00 , NUM00 ) ; \n\t} \n"}, {"code": "private void initPropertiesIfNecessary $F72 { \n\tif ( timer == null ) { \n\t\t$F170001 ( t , Toolkit ) Integer prop ; \n\t\tprop = ( Integer ) t . getDesktopProperty ( NUM00 ) ; \n\t\ttimer = new Timer ( prop == null ? NUM00 : prop . intValue ( ) , this ) ; \n\t\tprop = ( Integer ) t . getDesktopProperty ( NUM00 ) ; \n\t\ttimer . setInitialDelay ( prop == null ? NUM00 : prop . intValue ( ) ) ; \n\t\tprop = ( Integer ) t . getDesktopProperty ( NUM00 ) ; \n\t\tif ( prop != null ) $F276383 ( hysteresis , prop ) } \n\t} \n"}, {"code": "public EObject loadModel ( String filename , String cwd ) { \n\tURI fileURI = normalizeURI ( URI . createURI ( filename ) ) ; \n\tURI cwdURI = normalizeURI ( URI . createURI ( cwd ) ) ; \n\treturn loadModel ( fileURI , cwdURI ) ; \n\t} \n"}, {"code": "static boolean pathIsWindows ( String path ) { \n\tif $F22 ( path ) { \n\t\treturn ( $F22878 ( Character , path ) && $F4431 ( path ) ) || $F418 ( path ) ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static boolean isTestServer $F72 { \n\treturn System . getProperty ( TestServerOnly . TEST_SERVER_PROPERTY ) != null ; \n\t} \n"}, {"code": "$F1431 private $F4203 String generateTestFile ( String filename , $F5675 elems , AvroCoder $F4203 coder , String codec ) throws IOException { \n\tFile tmpFile = tmpFolder . newFile ( filename ) ; \n\t$F1822 ( path , tmpFile ) $F4649 ( os , tmpFile ) DatumWriter $F4203 datumWriter = coder . createDatumWriter ( ) ; \n\ttry ( DataFileWriter $F4203 writer = new DataFileWriter $F200 ( datumWriter ) ) { \n\t\twriter . setCodec ( CodecFactory . fromString ( codec ) ) ; \n\t\twriter . create ( coder . getSchema ( ) , os ) ; \n\t\tfor ( T elem : elems ) $F288 ( writer , elem ) } \n\treturn path ; \n\t} \n"}, {"code": "public void notifyReturned ( NotifyContext notifyContext , ITemplateHolder template ) { \n\t$F8249 ( notifyContext ) if ( _filterManager . _isFilter [ FilterOperationCodes . AFTER_NOTIFY_TRIGGER ] ) { \n\t\t$F3300 ( entries ) entries [ NUM00 ] = notifyContext . getEntry ( ) ; \n\t\tentries [ NUM00 ] = template ; \n\t\ttry { \n\t\t\t_filterManager . invokeFilters ( FilterOperationCodes . AFTER_NOTIFY_TRIGGER , null , entries ) ; \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\tif $F6456 ( _logger , Level ) $F37847 ( _logger , Level , e ) } \n\t\t} \n\tdecreaseCounter ( notifyContext ) ; \n\t} \n"}, {"code": "public static String normalizeSlashes ( String path ) $F8480 ( path ) "}, {"code": "protected Point2D correct ( Point2D anchor , Rectangle2D bounds ) { \n\t$F6928 ( anchor ) $F313534 ( x , anchor , y ) double x1 = bounds . getMinX ( ) , y1 = bounds . getMinY ( ) ; \n\tdouble x2 = bounds . getMaxX ( ) , y2 = bounds . getMaxY ( ) ; \n\tx = ( x < x1 ? x1 : ( x > x2 ? x2 : x ) ) ; \n\ty = ( y < y1 ? y1 : ( y > y2 ? y2 : y ) ) ; \n\tm_tmp . setLocation ( x , y ) ; \n\treturn m_tmp ; \n\t} \n"}, {"code": "private String saveParameters ( Set userSession , String userID , boolean isSOAPInitiated , boolean isIDPInitiated , String protocol , String realm , String idpEntityID , String spEntityID , String relayState , String singleLogoutRequestXML , String singleLogoutResponseXML , int currentStatus ) { \n\tString tmpRelayState = SAML2Utils . generateIDWithServerID ( ) ; \n\trelayStateMap . put ( tmpRelayState , relayState ) ; \n\tif $F6299 ( debug ) { \n\t\tdebug . message ( $F263731 ( userID , userSession , relayState ) + tmpRelayState + NUM00 + isSOAPInitiated + NUM00 + isIDPInitiated + NUM00 + protocol + NUM00 + realm + NUM00 + idpEntityID + NUM00 + spEntityID + NUM00 + currentStatus + NUM00 + singleLogoutRequestXML + NUM00 + singleLogoutResponseXML ) ; \n\t\t} \n\t$F114625 ( userSession , userSessionMap , tmpRelayState ) $F114625 ( userID , userIDMap , tmpRelayState ) if ( isSOAPInitiated ) { \n\t\tisSOAPInitiatedMap . put ( tmpRelayState , Boolean . TRUE ) ; \n\t\t} \n\telse { \n\t\tisSOAPInitiatedMap . put ( tmpRelayState , Boolean . FALSE ) ; \n\t\t} \n\tif ( isIDPInitiated ) { \n\t\tisIDPInitiatedMap . put ( tmpRelayState , Boolean . TRUE ) ; \n\t\t} \n\telse { \n\t\tisIDPInitiatedMap . put ( tmpRelayState , Boolean . FALSE ) ; \n\t\t} \n\tif ( protocol != null ) { \n\t\torigProtocolMap . put ( tmpRelayState , protocol ) ; \n\t\t$F2199 ( listSize , protocolList ) List list = new ArrayList ( listSize - NUM00 ) ; \n\t\tfor ( $F119 ( i , listSize ) ) { \n\t\t\t$F123 ( proto , protocolList , i ) if $F2137 ( proto , protocol ) $F207 ( list , proto ) } \n\t\tprotocolListMap . put ( tmpRelayState , list ) ; \n\t\t} \n\t$F114625 ( realm , realmMap , tmpRelayState ) $F114625 ( idpEntityID , idpEntityIDMap , tmpRelayState ) $F114625 ( spEntityID , spEntityIDMap , tmpRelayState ) $F114625 ( singleLogoutRequestXML , sloRequestXMLMap , tmpRelayState ) $F114625 ( singleLogoutResponseXML , sloResponseXMLMap , tmpRelayState ) $F117910 ( currentStatusMap , tmpRelayState , currentStatus ) return tmpRelayState ; \n\t} \n"}, {"code": "private void nextPacket $F72 throws IOException { \n\tint off = NUM00 ; \n\tint remaining = NUM00 ; \n\tdo { \n\t\t$F24020 ( count , baseStream , header , off , remaining ) if ( count <= NUM00 ) { \n\t\t\tthrow new EOFException ( NUM00 + ( NUM00 - remaining ) + NUM00 + NUM00 ) ; \n\t\t\t} \n\t\tremaining -= count ; \n\t\toff += count ; \n\t\t} \n\twhile ( remaining > NUM00 ) ; \n\tint compressedLength = $F18896 ( header ) + $F257715 ( header ) + $F257715 ( header ) ; \n\tlastPacketSeq = header [ NUM00 ] & NUM00 ; \n\tint decompressedLength = $F18896 ( header ) + $F257715 ( header ) + $F257715 ( header ) ; \n\tif ( decompressedLength != NUM00 ) { \n\t\tdoDecompress = _BOOL ; \n\t\tremainingBytes += decompressedLength ; \n\t\t$F2175 ( compressedBuffer , compressedLength ) $F2175 ( decompressedBuffer , decompressedLength ) off = NUM00 ; \n\t\tremaining = compressedBuffer . length ; \n\t\tdo { \n\t\t\t$F24020 ( count , baseStream , compressedBuffer , off , remaining ) if ( count <= NUM00 ) { \n\t\t\t\tthrow new EOFException ( NUM00 + ( NUM00 - remaining ) + NUM00 + NUM00 ) ; \n\t\t\t\t} \n\t\t\tremaining -= count ; \n\t\t\toff += count ; \n\t\t\t} \n\t\twhile ( remaining > NUM00 ) ; \n\t\tInflater inflater = new Inflater $F72 ; \n\t\tinflater . setInput ( compressedBuffer ) ; \n\t\ttry { \n\t\t\tint actualUncompressBytes = inflater . inflate ( decompressedBuffer ) ; \n\t\t\tif ( actualUncompressBytes != decompressedLength ) { \n\t\t\t\t$F132377 ( actualUncompressBytes , decompressedLength ) } \n\t\t\t} \n\t\tcatch ( DataFormatException dfe ) $F5615 ( dfe ) $F87417 ( inflater ) $F14570 ( decompressedByteStream , decompressedBuffer ) } \n\telse { \n\t\tdoDecompress = _BOOL ; \n\t\tremainingBytes += compressedLength ; \n\t\tdecompressedByteStream = null ; \n\t\t} \n\tlogger . trace ( NUM00 + lastPacketSeq + NUM00 + remainingBytes ) ; \n\t} \n"}, {"code": "protected boolean loadField ( DDFRecord record , String tagName , int fieldIndex ) { \n\tif $F4257 ( fields , tagName ) { \n\t\tDDFField ddf = record . findField ( tagName , fieldIndex ) ; \n\t\tif ( ddf != null ) { \n\t\t\tfields . put ( tagName , ddf ) ; \n\t\t\tddf . toString ( ) ; \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public HttpRequest ( final CharSequence url , final String method ) throws HttpRequestException { \n\ttry { \n\t\tthis . url = new URL $F3362 ( url ) ; \n\t\t} \n\tcatch ( MalformedURLException e ) { \n\t\tthrow new HttpRequestException ( e ) ; \n\t\t} \n\tthis . requestMethod = method ; \n\t} \n"}, {"code": "private boolean isError ( IProblem problem , Type type ) { \n\treturn _BOOL ; \n\t} \n"}, {"code": "private static void addProcessParameters ( int AD_PInstance_ID , $F2100 ( params ) , String trxName ) { \n\tfinal String sql = NUM00 + NUM00 + X_AD_PInstance_Para . COLUMNNAME_ParameterName + NUM00 + X_AD_PInstance_Para . COLUMNNAME_P_String + NUM00 + X_AD_PInstance_Para . COLUMNNAME_P_String_To + NUM00 + X_AD_PInstance_Para . COLUMNNAME_P_Number + NUM00 + X_AD_PInstance_Para . COLUMNNAME_P_Number_To + NUM00 + X_AD_PInstance_Para . COLUMNNAME_P_Date + NUM00 + X_AD_PInstance_Para . COLUMNNAME_P_Date_To + NUM00 + X_AD_PInstance_Para . COLUMNNAME_Info + NUM00 + X_AD_PInstance_Para . COLUMNNAME_Info_To + NUM00 + X_AD_PInstance_Para . Table_Name + NUM00 + X_AD_PInstance_Para . COLUMNNAME_AD_PInstance_ID + NUM00 ; \n\tPreparedStatement pstmt = null ; \n\tResultSet rs = null ; \n\ttry { \n\t\tpstmt = DB . prepareStatement ( sql , ResultSet . TYPE_FORWARD_ONLY , ResultSet . CONCUR_READ_ONLY , trxName ) ; \n\t\t$F47 ( pstmt , AD_PInstance_ID ) $F47578 ( rs , pstmt ) while $F1682 ( rs ) { \n\t\t\t$F27130 ( name , rs ) $F27130 ( pStr , rs ) $F27130 ( pStrTo , rs ) $F307245 ( pNum , rs ) $F307245 ( pNumTo , rs ) Timestamp pDate = rs . getTimestamp ( NUM00 ) ; \n\t\t\tTimestamp pDateTo = rs . getTimestamp ( NUM00 ) ; \n\t\t\tif ( pStr != null ) { \n\t\t\t\tif ( pStrTo != null ) { \n\t\t\t\t\tparams . put ( name + NUM00 , pStr ) ; \n\t\t\t\t\tparams . put ( name + NUM00 , pStrTo ) ; \n\t\t\t\t\t} \n\t\t\t\telse $F1717 ( params , name , pStr ) } \n\t\t\telse if ( pDate != null ) { \n\t\t\t\tif ( pDateTo != null ) { \n\t\t\t\t\tparams . put ( name + NUM00 , pDate ) ; \n\t\t\t\t\tparams . put ( name + NUM00 , pDateTo ) ; \n\t\t\t\t\t} \n\t\t\t\telse $F1717 ( params , name , pDate ) } \n\t\t\telse if ( pNum != null ) { \n\t\t\t\tif ( pNumTo != null ) { \n\t\t\t\t\tparams . put ( name + NUM00 , pNum ) ; \n\t\t\t\t\tparams . put ( name + NUM00 , pNumTo ) ; \n\t\t\t\t\t} \n\t\t\t\telse $F1717 ( params , name , pNum ) } \n\t\t\t$F27130 ( info , rs ) $F27130 ( infoTo , rs ) params . put ( name + NUM00 , $F134738 ( info ) ) ; \n\t\t\tparams . put ( name + NUM00 , $F134738 ( infoTo ) ) ; \n\t\t\t} \n\t\t} \n\t$F112772 ( e , sql ) $F47585 ( DB , rs , pstmt ) } \n"}, {"code": "$F45923 public RecordSetPage ( Input input ) { \n\tDeserializer deserizalizer = new Deserializer $F72 ; \n\tMap mapResult = deserizalizer . deserialize ( input , $F64671 ) ; \n\tcursor = ( Integer ) mapResult . get ( NUM00 ) ; \n\tdata = ( List < $F6689 > ) mapResult . get ( NUM00 ) ; \n\t} \n"}, {"code": "public $F65632 endpoint $F72 { \n\t$F65633 ( Optional , endpointArg ) } \n"}, {"code": "public void testCollisions $F72 throws Exception { \n\tMap < Integer , Set $F252767 > $F8690 ( map ) ; \n\t$F252768 $F22304 ( nodes ) ; \n\twhile $F6214 ( nodes ) { \n\t\t$F116795 ( uuid , UUID ) $F115 ( hashCode , uuid ) Set $F252767 set = map . get ( hashCode ) ; \n\t\tif ( set == null ) map . put ( hashCode , $F22304 ( set ) ) ; \n\t\tset . add ( uuid ) ; \n\t\tif $F3817 ( set ) nodes . addAll ( set ) ; \n\t\t} \n\t$F725 ( map ) GridClientConsistentHash $F252767 hash = new GridClientConsistentHash $F200 $F72 ; \n\thash . addNodes ( nodes , REPLICAS ) ; \n\tboolean fail = _BOOL ; \n\tfor ( UUID exp : nodes ) { \n\t\tUUID act = hash . node ( NUM00 , Arrays . asList ( exp ) ) ; \n\t\tif $F1238 ( exp , act ) $F25590 ( info , exp , act ) else { \n\t\t\t$F25590 ( info , exp , act ) fail = _BOOL ; \n\t\t\t} \n\t\t} \n\tif ( fail ) fail ( NUM00 + nodes ) ; \n\t} \n"}, {"code": "void sendMessageToHandlerWithControllerReset $F18149 ( messages ) throws Exception { \n\tsendMessageToHandlerNoControllerReset ( messages ) ; \n\t} \n"}, {"code": "public boolean isRedeployMode $F72 { \n\treturn scenario . equals ( PropertyConstants . REDEPLOY_MODE ) ? _BOOL : _BOOL ; \n\t} \n"}, {"code": "public static RSAPrivateKey loadFromKeyStore ( URL keystoreUrl , String password ) throws IOException , NoSuchAlgorithmException , CertificateException , KeyStoreException , UnrecoverableKeyException { \n\t$F7028 ( logger , keystoreUrl ) $F5858 ( connection , keystoreUrl ) $F517 ( is , connection ) try { \n\t\tif $F585 ( logger ) logger . debug ( NUM00 , Arrays . toString ( Security . getProviders ( ) ) ) ; \n\t\tKeyStore keyStore ; \n\t\ttry { \n\t\t\ttry { \n\t\t\t\tkeyStore = KeyStore . getInstance ( NUM00 , NUM00 ) ; \n\t\t\t\t} \n\t\t\tcatch ( NoSuchProviderException e ) { \n\t\t\t\tkeyStore = KeyStore . getInstance ( NUM00 , CryptoUtil . getSecurityProviderName ( KeyStore . class ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( NoSuchProviderException e ) $F14527 ( keyStore , KeyStore ) logger . debug ( NUM00 , keyStore . getProvider ( ) ) ; \n\t\tkeyStore . load ( is , password == null ? null : password . toCharArray ( ) ) ; \n\t\t$F14937 aliases = keyStore . aliases ( ) ; \n\t\tKey key = null ; \n\t\twhile $F1444 ( aliases ) { \n\t\t\t$F14952 ( a , aliases ) key = keyStore . getKey ( a , password == null ? null : password . toCharArray ( ) ) ; \n\t\t\t} \n\t\treturn ( RSAPrivateKey ) key ; \n\t\t} \n\t$F3229 ( is ) } \n"}, {"code": "$F1 public double confSmallM ( double totalExampleWeight , double delta ) { \n\tdouble term = Math . log ( NUM00 / delta ) / ( NUM00 * totalExampleWeight ) ; \n\treturn Math . sqrt ( term ) + Math . pow ( term , NUM00 ) + Math . pow ( term , NUM00 ) ; \n\t} \n"}, {"code": "public static $F4203 boolean contains ( $F13085 iterator , T element ) { \n\tif ( iterator != null ) { \n\t\twhile $F2921 ( iterator ) { \n\t\t\t$F11644 ( candidate , iterator ) if ( ObjectUtils . nullSafeEquals ( candidate , element ) ) return _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void testConstructor6 $F72 { \n\t$F86231 ( ints , SIZE ) for ( $F1316 ( i , SIZE ) ) ints [ i ] = new Integer ( i ) ; \n\tLinkedBlockingQueue q = new LinkedBlockingQueue $F6 ( Arrays , ints ) ; \n\tfor ( $F1316 ( i , SIZE ) ) assertEquals ( ints [ i ] , q . poll ( ) ) ; \n\t} \n"}, {"code": "$F1 public void drawDomainGridline ( Graphics2D g2 , CategoryPlot plot , Rectangle2D dataArea , double value ) { \n\tLine2D line = null ; \n\t$F10709 ( orientation , plot ) if ( orientation == PlotOrientation . HORIZONTAL ) $F75728 ( line , dataArea , value ) else if ( orientation == PlotOrientation . VERTICAL ) $F75721 ( line , value , dataArea ) Paint paint = plot . getDomainGridlinePaint ( ) ; \n\tif ( paint == null ) { \n\t\tpaint = CategoryPlot . DEFAULT_GRIDLINE_PAINT ; \n\t\t} \n\tg2 . setPaint ( paint ) ; \n\tStroke stroke = plot . getDomainGridlineStroke ( ) ; \n\tif ( stroke == null ) { \n\t\tstroke = CategoryPlot . DEFAULT_GRIDLINE_STROKE ; \n\t\t} \n\tg2 . setStroke ( stroke ) ; \n\tg2 . draw ( line ) ; \n\t} \n"}, {"code": "public void addPreBuiltClassifier ( Classifier c ) $F207 ( m_preBuiltClassifiers , c ) "}, {"code": "$F1 public InsnList generate $F72 { \n\treturn merge ( generatedInstructions . toArray ( ) ) ; \n\t} \n"}, {"code": "public static void putJavaVariablesIntoEngine ( final ScriptEngine engine , $F87266 ( variables ) ) { \n\tfinal Bindings bindings = new SimpleBindings $F72 ; \n\tfor ( $F3465 ( key , variables ) ) $F103853 ( bindings , key , variables ) engine . setBindings ( bindings , ScriptContext . ENGINE_SCOPE ) ; \n\t} \n"}, {"code": "private Point2D calculateLabelPoint ( Line2D line , RectangleAnchor anchor , double deltaX , double deltaY ) { \n\tdouble x , y ; \n\tboolean left = ( anchor == RectangleAnchor . BOTTOM_LEFT || anchor == RectangleAnchor . LEFT || anchor == RectangleAnchor . TOP_LEFT ) ; \n\tboolean right = ( anchor == RectangleAnchor . BOTTOM_RIGHT || anchor == RectangleAnchor . RIGHT || anchor == RectangleAnchor . TOP_RIGHT ) ; \n\tboolean top = ( anchor == RectangleAnchor . TOP_LEFT || anchor == RectangleAnchor . TOP || anchor == RectangleAnchor . TOP_RIGHT ) ; \n\tboolean bottom = ( anchor == RectangleAnchor . BOTTOM_LEFT || anchor == RectangleAnchor . BOTTOM || anchor == RectangleAnchor . BOTTOM_RIGHT ) ; \n\t$F5112 ( rect , line ) if ( line . getX1 ( ) == line . getX2 ( ) ) { \n\t\tx = line . getX1 ( ) ; \n\t\ty = ( line . getY1 ( ) + line . getY2 ( ) ) / NUM00 ; \n\t\tif ( left ) { \n\t\t\tx = x - deltaX ; \n\t\t\t} \n\t\tif ( right ) { \n\t\t\tx = x + deltaX ; \n\t\t\t} \n\t\tif ( top ) { \n\t\t\ty = Math . min ( line . getY1 ( ) , line . getY2 ( ) ) + deltaY ; \n\t\t\t} \n\t\tif ( bottom ) { \n\t\t\ty = Math . max ( line . getY1 ( ) , line . getY2 ( ) ) - deltaY ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tx = ( line . getX1 ( ) + line . getX2 ( ) ) / NUM00 ; \n\t\ty = line . getY1 ( ) ; \n\t\tif ( left ) { \n\t\t\tx = Math . min ( line . getX1 ( ) , line . getX2 ( ) ) + deltaX ; \n\t\t\t} \n\t\tif ( right ) { \n\t\t\tx = Math . max ( line . getX1 ( ) , line . getX2 ( ) ) - deltaX ; \n\t\t\t} \n\t\tif ( top ) { \n\t\t\ty = y - deltaY ; \n\t\t\t} \n\t\tif ( bottom ) { \n\t\t\ty = y + deltaY ; \n\t\t\t} \n\t\t} \n\treturn $F152053 ( x , y ) ; \n\t} \n"}, {"code": "public void fling $F118169 ( startX , startY , velocityX , velocityY , minX , maxX , minY , maxY ) { \n\tif ( mFlywheel && ! mFinished ) { \n\t\tfloat oldVel = getCurrVelocity ( ) ; \n\t\t$F118172 ( dx , mFinalX , mStartX ) $F118172 ( dy , mFinalY , mStartY ) $F150219 ( hyp , Math , dx , dy ) float ndx = dx / hyp ; \n\t\tfloat ndy = dy / hyp ; \n\t\tfloat oldVelocityX = ndx * oldVel ; \n\t\tfloat oldVelocityY = ndy * oldVel ; \n\t\t$F118179 ( Math , velocityX , oldVelocityX , velocityY , oldVelocityY ) } \n\tmMode = FLING_MODE ; \n\tmFinished = _BOOL ; \n\t$F150219 ( velocity , Math , velocityX , velocityY ) mVelocity = velocity ; \n\tmDuration = getSplineFlingDuration ( velocity ) ; \n\t$F118190 ( mStartTime , AnimationUtils ) mStartX = startX ; \n\tmStartY = startY ; \n\t$F118191 ( coeffX , velocity , velocityX ) $F118191 ( coeffY , velocity , velocityY ) double totalDistance = getSplineFlingDistance ( velocity ) ; \n\tmDistance = ( int ) ( totalDistance * Math . signum ( velocity ) ) ; \n\tmMinX = minX ; \n\tmMaxX = maxX ; \n\tmMinY = minY ; \n\tmMaxY = maxY ; \n\t$F150228 ( mFinalX , startX , Math , totalDistance , coeffX ) $F16700 ( mFinalX , Math , mMaxX ) $F19410 ( mFinalX , Math , mMinX ) $F150228 ( mFinalY , startY , Math , totalDistance , coeffY ) $F16700 ( mFinalY , Math , mMaxY ) $F19410 ( mFinalY , Math , mMinY ) } \n"}, {"code": "public void deleteWithMissing ( Attribute att ) { \n\tdeleteWithMissing ( att . index ( ) ) ; \n\t} \n"}, {"code": "protected void sprint ( String a ) { \n\tif ( a == null ) { \n\t\tstringRepresentation += getIndentation ( ) ; \n\t\tstringRepresentation += NUM00 ; \n\t\t$F665 } \n\tif ( $F87841 ( a ) || $F87841 ( a ) ) { \n\t\tindentation -- ; \n\t\t} \n\tstringRepresentation += getIndentation ( ) ; \n\tstringRepresentation += a ; \n\tstringRepresentation += NUM00 ; \n\tif ( $F87841 ( a ) || $F87841 ( a ) ) { \n\t\tindentation ++ ; \n\t\t} \n\t} \n"}, {"code": "private void readObject ( ObjectInputStream s ) throws $F6427 { \n\t$F6428 ( s ) $F18045 ( semIms ) } \n"}, {"code": "private static Pair $F76740 load ( ByteArray a , InputStream stream , long memoryOffset , long count , CommonIndex positions , CRC32 checksum , ByteArray checksums , PrereadHashFunction hf , boolean checksumsLoaded , long currentSeq ) throws IOException { \n\tlong tmpCurrentSeq = currentSeq ; \n\tfinal $F96 buffer = new byte [ NUM00 * NUM00 ] ; \n\tlong totalRead = NUM00 ; \n\tint bytesRead ; \n\tlong pos = memoryOffset ; \n\twhile ( totalRead < count && ( bytesRead = stream . read ( buffer , NUM00 , ( int ) Math . min ( count - totalRead , buffer . length ) ) ) != - NUM00 ) { \n\t\ta . set ( pos , buffer , bytesRead ) ; \n\t\tpos += bytesRead ; \n\t\tint j = NUM00 ; \n\t\twhile ( j < bytesRead ) { \n\t\t\tif ( positions . get ( tmpCurrentSeq + NUM00 ) == positions . get ( tmpCurrentSeq ) ) { \n\t\t\t\thf . irvineHash ( NUM00 ) ; \n\t\t\t\ttmpCurrentSeq ++ ; \n\t\t\t\t$F598 } \n\t\t\tfinal int len = ( int ) ( positions . get ( tmpCurrentSeq + NUM00 ) - ( memoryOffset + totalRead + j ) ) ; \n\t\t\tif ( j + len <= bytesRead ) { \n\t\t\t\tchecksum . update ( buffer , j , len ) ; \n\t\t\t\thf . irvineHash ( buffer , j , len ) ; \n\t\t\t\thf . irvineHash ( positions . get ( tmpCurrentSeq + NUM00 ) - positions . get ( tmpCurrentSeq ) ) ; \n\t\t\t\tif ( checksumsLoaded ) { \n\t\t\t\t\tif ( ( byte ) checksum . getValue ( ) != checksums . get ( tmpCurrentSeq ) ) { \n\t\t\t\t\t\tthrow new CorruptSdfException ( NUM00 + tmpCurrentSeq + NUM00 ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tchecksums . set ( tmpCurrentSeq , ( byte ) checksum . getValue ( ) ) ; \n\t\t\t\t\t} \n\t\t\t\ttmpCurrentSeq ++ ; \n\t\t\t\t$F2268 ( checksum ) } \n\t\t\telse { \n\t\t\t\thf . irvineHash ( buffer , j , bytesRead - j ) ; \n\t\t\t\tchecksum . update ( buffer , j , bytesRead - j ) ; \n\t\t\t\t} \n\t\t\tj += len ; \n\t\t\t} \n\t\ttotalRead += bytesRead ; \n\t\t} \n\t$F83164 ( totalRead , tmpCurrentSeq ) } \n"}, {"code": "public static $F212479 toSqlDate $F1947 ( monthStr , dayStr , yearStr ) { \n\t$F22273 newDate = toDate ( monthStr , dayStr , yearStr , NUM00 , NUM00 , NUM00 ) ; \n\tif ( newDate != null ) { \n\t\treturn new $F212479 $F16810 ( newDate ) ; \n\t\t} \n\telse $F1337 } \n"}, {"code": "$F43277 ( listener , mListeners ) "}, {"code": "protected void savePNGImage ( String filename , BufferedImage image ) throws IOException { \n\t$F1705 ( file , filename ) $F107416 ( ImageIO , image , file ) } \n"}, {"code": "public void unsetPermission ( String name ) { \n\tpermissions . remove ( name . toLowerCase ( java . util . Locale . ENGLISH ) ) ; \n\tpermissible . recalculatePermissions ( ) ; \n\t} \n"}, {"code": "public void beforeInsert ( int index , byte element ) { \n\t$F8871 ( index , size ) ensureCapacity ( size + NUM00 ) ; \n\t$F27096 ( System , elements , index , size ) elements [ index ] = element ; \n\tsize ++ ; \n\t} \n"}, {"code": "public OMGraphicList readCachedGraphics ( URL url ) throws $F3258 { \n\t$F254545 ( Debug ) $F138819 ( omgraphics ) if ( url != null ) { \n\t\tomgraphics . readGraphics ( url ) ; \n\t\t} \n\treturn omgraphics ; \n\t} \n"}, {"code": "$F1653 ( noxItems ) "}, {"code": "public $F2193 Future $F2193 invoke ( String method , String path , $F6253 ( arguments ) , ResultHandler $F2193 resultHandler ) { \n\t$F99586 ( method ) $F99586 ( path ) $F99586 ( arguments ) return executorService . submit ( new InvocationCallback $F200 ( method , path , arguments , resultHandler ) ) ; \n\t} \n"}, {"code": "$F1 public String replacePath ( String inputURI ) { \n\tif ( inputURI . contains ( TemporaryDirectoryManager . DIRECTORY_TEMPLATE ) ) { \n\t\treturn inputURI . replace ( TemporaryDirectoryManager . DIRECTORY_TEMPLATE , TEMPLATE_DIRECTORY_NAME ) ; \n\t\t} \n\treturn inputURI ; \n\t} \n"}, {"code": "$F1 public void create $F72 { \n\tassertWritable ( ) ; \n\tfinal String name = getNamespace ( ) + NUM00 + NAME_SEARCH ; \n\tfinal IIndexManager indexManager = getIndexManager ( ) ; \n\t$F17606 ( p , getProperties ) final IndexMetadata indexMetadata = new IndexMetadata ( indexManager , p , name , UUID . randomUUID ( ) , IndexTypeEnum . BTree ) ; \n\tfinal IKeyBuilderFactory keyBuilderFactory ; \n\t{ \n\t\tfinal Properties tmp = new Properties ( p ) ; \n\t\ttmp . setProperty ( KeyBuilder . Options . STRENGTH , p . getProperty ( Options . INDEXER_COLLATOR_STRENGTH , Options . DEFAULT_INDEXER_COLLATOR_STRENGTH ) ) ; \n\t\tkeyBuilderFactory = new DefaultKeyBuilderFactory ( tmp ) ; \n\t\t} \n\tfinal boolean fieldsEnabled = Boolean . parseBoolean ( p . getProperty ( Options . FIELDS_ENABLED , Options . DEFAULT_FIELDS_ENABLED ) ) ; \n\tif $F17747 ( log ) log . info ( Options . FIELDS_ENABLED + NUM00 + fieldsEnabled ) ; \n\tindexMetadata . setTupleSerializer ( new FullTextIndexTupleSerializer $F2193 ( keyBuilderFactory , DefaultTupleSerializer . getDefaultLeafKeysCoder ( ) , EmptyRabaValueCoder . INSTANCE , fieldsEnabled ) ) ; \n\tindexManager . registerIndex ( indexMetadata ) ; \n\t$F38209 ( log , name ) } \n"}, {"code": "public static PGPPublicKey mergeSignatures ( PGPPublicKey targetKey , PGPPublicKey sourceKey ) throws PGPException { \n\tif ( ! Objects . deepEquals ( targetKey . getFingerprint ( ) , sourceKey . getFingerprint ( ) ) ) $F825 return copySignatures ( targetKey , sourceKey ) ; \n\t} \n"}, {"code": "$F45572 ( context , intent , pm , handlers , PackageManager , _BOOL , resolveInfo , filter , Log , TAG ) "}, {"code": "public void drawBackground ( Graphics g ) { \n\tg . fillRect ( $F73489 ( getWidth , getHeight ) ) ; \n\t} \n"}, {"code": "public static double info ( int counts [ ] ) { \n\tint total = NUM00 ; \n\tdouble x = NUM00 ; \n\tfor ( $F1139 ( j , counts ) ) { \n\t\tx -= xlogx ( counts [ j ] ) ; \n\t\ttotal += counts [ j ] ; \n\t\t} \n\treturn x + xlogx ( total ) ; \n\t} \n"}, {"code": "public ComputeJobFailoverException ( Throwable cause ) $F51022 ( this , cause ) "}, {"code": "public boolean hasNewerVersion $F72 { \n\treturn latestStable . compareTo ( currentVersion ) > NUM00 ; \n\t} \n"}, {"code": "$F1 public String format ( DateTimeFormatter formatter ) { \n\t$F10578 ( Objects , formatter ) $F5330 ( formatter , this ) } \n"}, {"code": "$F1 public void readNBT ( NBTTagCompound compound ) { \n\tsuper . readNBT ( compound ) ; \n\tif ( compound . hasKey ( NUM00 ) ) { \n\t\tthis . exhaustionTimer = compound . getInteger ( NUM00 ) ; \n\t\t} \n\tif ( ! compound . hasKey ( NUM00 ) ) { \n\t\tsetFoodLevel ( getFoodLevel ( ) * NUM00 ) ; \n\t\tsetSaturation ( NUM00 ) ; \n\t\t} \n\tif $F44803 ( getFoodLevel ) setFoodLevel ( NUM00 ) ; \n\tif $F44803 ( getSaturationLevel ) setSaturation ( NUM00 ) ; \n\t} \n"}, {"code": "private static boolean verifyXML ( String fileName ) { \n\t$F2237 ( sf , SchemaFactory , W3C_XML_SCHEMA ) Source xsdFile = new StreamSource $F15780 ( XSD_FILE_PATH ) ; \n\tSource xmlFile = new StreamSource $F15780 ( fileName ) ; \n\tboolean validXML = _BOOL ; \n\ttry { \n\t\tSchema schema = sf . newSchema ( xsdFile ) ; \n\t\tValidator validator = schema . newValidator ( ) ; \n\t\ttry { \n\t\t\tvalidator . validate ( xmlFile ) ; \n\t\t\tvalidXML = _BOOL ; \n\t\t\t} \n\t\t$F12241 ( e ) if ( ! validXML ) { \n\t\t\tnew IOException $F580 ; \n\t\t\t} \n\t\t} \n\tcatch ( SAXException e ) $F302 ( e ) return validXML ; \n\t} \n"}, {"code": "$F18534 ( newcount , currentBufferIndex , buffers , filledBufferSum , currentBuffer , newBufferSize , Math ) "}, {"code": "private static void dualPivotQuicksort $F24576 ( a , left , right ) { \n\tint sixth = ( right - left + NUM00 ) / NUM00 ; \n\tint e1 = left + sixth ; \n\tint e5 = right - sixth ; \n\t$F41176 ( e3 , left , right ) int e4 = e3 + sixth ; \n\tint e2 = e3 - sixth ; \n\tbyte ae1 = a [ e1 ] , ae2 = a [ e2 ] , ae3 = a [ e3 ] , ae4 = a [ e4 ] , ae5 = a [ e5 ] ; \n\tif ( ae1 > ae2 ) { \n\t\tbyte t = ae1 ; \n\t\tae1 = ae2 ; \n\t\tae2 = t ; \n\t\t} \n\tif ( ae4 > ae5 ) { \n\t\tbyte t = ae4 ; \n\t\tae4 = ae5 ; \n\t\tae5 = t ; \n\t\t} \n\tif ( ae1 > ae3 ) { \n\t\tbyte t = ae1 ; \n\t\tae1 = ae3 ; \n\t\tae3 = t ; \n\t\t} \n\tif ( ae2 > ae3 ) { \n\t\tbyte t = ae2 ; \n\t\tae2 = ae3 ; \n\t\tae3 = t ; \n\t\t} \n\tif ( ae1 > ae4 ) { \n\t\tbyte t = ae1 ; \n\t\tae1 = ae4 ; \n\t\tae4 = t ; \n\t\t} \n\tif ( ae3 > ae4 ) { \n\t\tbyte t = ae3 ; \n\t\tae3 = ae4 ; \n\t\tae4 = t ; \n\t\t} \n\tif ( ae2 > ae5 ) { \n\t\tbyte t = ae2 ; \n\t\tae2 = ae5 ; \n\t\tae5 = t ; \n\t\t} \n\tif ( ae2 > ae3 ) { \n\t\tbyte t = ae2 ; \n\t\tae2 = ae3 ; \n\t\tae3 = t ; \n\t\t} \n\tif ( ae4 > ae5 ) { \n\t\tbyte t = ae4 ; \n\t\tae4 = ae5 ; \n\t\tae5 = t ; \n\t\t} \n\ta [ e1 ] = ae1 ; \n\ta [ e3 ] = ae3 ; \n\ta [ e5 ] = ae5 ; \n\tbyte pivot1 = ae2 ; \n\ta [ e2 ] = a [ left ] ; \n\tbyte pivot2 = ae4 ; \n\ta [ e4 ] = a [ right ] ; \n\tint less = left + NUM00 ; \n\tint great = right - NUM00 ; \n\tboolean pivotsDiffer = ( pivot1 != pivot2 ) ; \n\tif ( pivotsDiffer ) { \n\t\touter : for ( int k = less ; \n\t\tk <= great ; \n\t\tk ++ ) { \n\t\t\tbyte ak = a [ k ] ; \n\t\t\tif ( ak < pivot1 ) $F346265 ( k , less , a , ak ) else if ( ak > pivot2 ) { \n\t\t\t\twhile ( a [ great ] > pivot2 ) $F346268 ( great , k ) if ( a [ great ] < pivot1 ) $F346270 ( a , k , less , great , ak ) else { \n\t\t\t\t\ta [ k ] = a [ great ] ; \n\t\t\t\t\ta [ great -- ] = ak ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse { \n\t\tfor ( int k = less ; \n\t\tk <= great ; \n\t\tk ++ ) { \n\t\t\tbyte ak = a [ k ] ; \n\t\t\t$F83608 ( ak , pivot1 ) if ( ak < pivot1 ) $F346265 ( k , less , a , ak ) else { \n\t\t\t\twhile ( a [ great ] > pivot1 ) { \n\t\t\t\t\tgreat -- ; \n\t\t\t\t\t} \n\t\t\t\tif ( a [ great ] < pivot1 ) $F346270 ( a , k , less , great , ak ) else { \n\t\t\t\t\ta [ k ] = pivot1 ; \n\t\t\t\t\ta [ great -- ] = ak ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F346289 ( a , left , less ) a [ less - NUM00 ] = pivot1 ; \n\ta [ right ] = a [ great + NUM00 ] ; \n\ta [ great + NUM00 ] = pivot2 ; \n\tdoSort ( a , left , less - NUM00 ) ; \n\tdoSort ( a , great + NUM00 , right ) ; \n\t$F24126 ( pivotsDiffer ) if ( less < e1 && great > e5 ) { \n\t\twhile ( a [ less ] == pivot1 ) { \n\t\t\tless ++ ; \n\t\t\t} \n\t\twhile ( a [ great ] == pivot2 ) { \n\t\t\tgreat -- ; \n\t\t\t} \n\t\touter : for ( int k = less ; \n\t\tk <= great ; \n\t\tk ++ ) { \n\t\t\tbyte ak = a [ k ] ; \n\t\t\tif ( ak == pivot2 ) { \n\t\t\t\twhile ( a [ great ] == pivot2 ) $F346268 ( great , k ) if ( a [ great ] == pivot1 ) $F346294 ( a , k , less , pivot1 ) else $F346295 ( a , k , great ) a [ great -- ] = pivot2 ; \n\t\t\t\t} \n\t\t\telse if ( ak == pivot1 ) $F346294 ( a , k , less , pivot1 ) } \n\t\t} \n\tdoSort ( a , less , great ) ; \n\t} \n"}, {"code": "$F5466 public N node ( $F5466 Object key , $F5466 Collection $F36647 inc ) $F25228 ( node , key , inc ) "}, {"code": "public void increment $F72 $F26160 ( counter ) "}, {"code": "public DefaultDeploymentCache $F72 { \n\tthis . cache = Collections . synchronizedMap ( new HashMap $F94549 $F72 ) ; \n\t} \n"}, {"code": "private int findInsertionPoint ( SortedListEntry entry ) { \n\t$F2199 ( insertionPoint , sortedModel ) if ( sortOrder != SortOrder . UNORDERED ) { \n\t\tinsertionPoint = Collections . binarySearch ( ( List ) sortedModel , entry ) ; \n\t\tif ( insertionPoint < NUM00 ) { \n\t\t\tinsertionPoint = - ( insertionPoint + NUM00 ) ; \n\t\t\t} \n\t\t} \n\treturn insertionPoint ; \n\t} \n"}, {"code": "private boolean haveShownMessageBefore ( UpdateMessage msg ) { \n\tif ( ! msg . isShownOnce ( ) ) return _BOOL ; \n\tloadSeenMessages ( ) ; \n\tif ( _seenMessages == null || $F10470 ( _seenMessages ) || ! _seenMessages . contains ( msg ) ) { \n\t\tif ( _seenMessages == null ) $F9627 ( _seenMessages ) _seenMessages . add ( msg ) ; \n\t\tsaveSeenMessages ( ) ; \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void dataSourceAdded ( int index ) $F9099 ( update , updateCoordinateProjectionComboBoxes ) "}, {"code": "public boolean fieldIsStatic $F72 { \n\treturn $F48022 ( Modifier , field ) ; \n\t} \n"}, {"code": "void newEquation ( DF_LatticeCell lhs , DF_Operator operator , DF_LatticeCell op1 , DF_LatticeCell op2 , DF_LatticeCell op3 ) { \n\tDF_Equation eq = new DF_Equation ( lhs , operator , op1 , op2 , op3 ) ; \n\tequations . addGraphNode ( eq ) ; \n\tequations . addGraphNode ( lhs ) ; \n\tequations . addGraphNode ( op1 ) ; \n\tequations . addGraphNode ( op2 ) ; \n\tequations . addGraphNode ( op3 ) ; \n\tnewEquations . add ( eq ) ; \n\top1 . addUse ( eq ) ; \n\top2 . addUse ( eq ) ; \n\top3 . addUse ( eq ) ; \n\tlhs . addDef ( eq ) ; \n\tif ( EAGER && eq . evaluate ( ) ) changedCell ( lhs ) ; \n\t} \n"}, {"code": "$F1 public void stop $F72 { \n\tif $F48405 ( stopping , _BOOL ) { \n\t\t$F130378 ( log , cacheName ) wakeUp ( ) ; \n\t\tboolean graceful = _BOOL ; \n\t\tfor ( GridWorker worker : flushThreads ) graceful &= U . join ( worker , log ) ; \n\t\tif ( ! graceful ) $F18143 ( log ) } \n\t} \n"}, {"code": "private $F101261 andStoragePortSets ( $F101261 a , $F101261 b ) { \n\t$F101261 result = new HashSet $F42520 $F72 ; \n\tfor ( StoragePort port : a ) $F45100 ( b , port , result ) return result ; \n\t} \n"}, {"code": "public static void addAttributeToSchema ( String serviceName , String subSchemaName , String schemaType , Node attributeSchemaNode , SSOToken adminToken ) throws UpgradeException { \n\tServiceSchema ss = getServiceSchema ( serviceName , subSchemaName , schemaType , adminToken ) ; \n\taddAttributeToSchema ( ss , attributeSchemaNode ) ; \n\t} \n"}, {"code": "public int next ( int current ) { \n\tfor ( int i = current + NUM00 ; \n\ti < ( arguments != null ? arguments . size ( ) : NUM00 ) ; \n\ti ++ ) { \n\t\tif ( getArgument ( i ) instanceof MathContainer ) { \n\t\t\treturn i ; \n\t\t\t} \n\t\t} \n\tthrow new ArrayIndexOutOfBoundsException $F580 ; \n\t} \n"}, {"code": "$F1 public boolean supportsAuthentication $F72 { \n\t$F144577 ( DEBUG ) return _BOOL ; \n\t} \n"}, {"code": "protected void reorderAppDeploymentsAfterConfigurationVersion ( Element domain ) { \n\t$F15369 appDeployments = xmlTool . selectElementsMatchingXPath ( NUM00 , domain ) ; \n\tfor ( Element appDeployment : appDeployments ) { \n\t\tdomain . removeChild ( appDeployment ) ; \n\t\t} \n\tElement configurationVersion = xmlTool . selectElementMatchingXPath ( NUM00 , domain ) ; \n\tNode before = null ; \n\t$F9040 ( children , domain ) for ( $F85554 ( i , children ) ) { \n\t\tif ( configurationVersion . equals ( children . item ( i ) ) && i < children . getLength ( ) - NUM00 ) { \n\t\t\tbefore = children . item ( i + NUM00 ) ; \n\t\t\t} \n\t\t} \n\tif ( before != null ) { \n\t\tfor ( Element appDeployment : appDeployments ) { \n\t\t\tdomain . insertBefore ( appDeployment , before ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tfor ( Element appDeployment : appDeployments ) $F205551 ( domain , appDeployment ) } \n\t} \n"}, {"code": "public URI $F1947 ( scheme , schemeSpecificPart , fragment ) throws URISyntaxException { \n\t$F83 ( uri ) $F43191 ( scheme , uri ) $F189367 ( schemeSpecificPart , ALL_LEGAL_ENCODER , uri ) $F189369 ( fragment , uri , ALL_LEGAL_ENCODER ) $F25731 ( parseURI , uri , _BOOL ) } \n"}, {"code": "static FacetMethod selectFacetMethod ( SchemaField field , FacetMethod method , Integer mincount ) { \n\tFieldType type = field . getType ( ) ; \n\tif ( method == null ) { \n\t\tif ( type instanceof BoolField && ( field . indexed ( ) == _BOOL || field . hasDocValues ( ) == _BOOL ) ) { \n\t\t\tmethod = FacetMethod . ENUM ; \n\t\t\t} \n\t\telse if ( type . getNumericType ( ) != null && ! field . multiValued ( ) ) { \n\t\t\tmethod = FacetMethod . FCS ; \n\t\t\t} \n\t\telse { \n\t\t\tmethod = FacetMethod . FC ; \n\t\t\t} \n\t\t} \n\tif ( method == FacetMethod . FC && type . getNumericType ( ) != null && ! field . multiValued ( ) ) { \n\t\tmethod = FacetMethod . FCS ; \n\t\t} \n\tif ( method == FacetMethod . UIF && ! field . hasDocValues ( ) && mincount == NUM00 ) { \n\t\tmethod = field . multiValued ( ) ? FacetMethod . FC : FacetMethod . FCS ; \n\t\t} \n\tif ( method == FacetMethod . ENUM && TrieField . getMainValuePrefix ( type ) != null ) { \n\t\tmethod = field . multiValued ( ) ? FacetMethod . FC : FacetMethod . FCS ; \n\t\t} \n\tfinal boolean multiToken = field . multiValued ( ) || type . multiValuedFieldCache ( ) ; \n\tif ( method == FacetMethod . FCS && multiToken ) { \n\t\tmethod = FacetMethod . FC ; \n\t\t} \n\treturn method ; \n\t} \n"}, {"code": "public void onTabsAllClosing ( long time , boolean incognito ) $F845 "}, {"code": "public List < $F530 > clearOverallChat $F72 { \n\ttry { \n\t\tList < $F530 > myChatList = myChats . get ( overallChatRoomName ) ; \n\t\tmyChatList = new LinkedList < $F530 > $F72 ; \n\t\tmyChats . put ( overallChatRoomName , myChatList ) ; \n\t\t$F20666 newMessage = new $F397346 $F72 ; \n\t\tnewMessage . put ( NUM00 , NUM00 ) ; \n\t\tscopeApplicationAdapter . sendMessageToMembers ( newMessage ) ; \n\t\treturn myChatList ; \n\t\t} \n\tcatch ( Exception err ) $F236732 ( log , err ) } \n"}, {"code": "public DbSchemaChanger beginChange $F72 throws Exception { \n\tbackupFile = File . createTempFile ( NUM00 , NUM00 ) ; \n\tlog . info ( NUM00 , classFile . getAbsolutePath ( ) , backupFile . getAbsolutePath ( ) ) ; \n\tcopyFile ( classFile , backupFile ) ; \n\tcc . defrost ( ) ; \n\treturn this ; \n\t} \n"}, {"code": "void animateChallengeTo ( int y , int velocity ) { \n\t$F2329 ( mChallengeView ) cancelTransitionsInProgress ( ) ; \n\tmChallengeInteractiveInternal = _BOOL ; \n\tmChallengeView . setLayerType ( LAYER_TYPE_HARDWARE , null ) ; \n\tfinal int sy = mChallengeView . getBottom ( ) ; \n\tfinal int dy = y - sy ; \n\tif ( dy == NUM00 ) $F10990 ( completeChallengeScroll ) setScrollState ( SCROLL_STATE_SETTLING ) ; \n\t$F43590 ( childHeight , mChallengeView ) final int halfHeight = childHeight / NUM00 ; \n\tfinal float distanceRatio = Math . min ( NUM00 , NUM00 * Math . abs ( dy ) / childHeight ) ; \n\tfinal float distance = halfHeight + halfHeight * distanceInfluenceForSnapDuration ( distanceRatio ) ; \n\tint duration = NUM00 ; \n\t$F15467 ( velocity , Math ) if ( velocity > NUM00 ) { \n\t\tduration = NUM00 * Math . round ( NUM00 * Math . abs ( distance / velocity ) ) ; \n\t\t} \n\telse { \n\t\tfinal float childDelta = ( float ) Math . abs ( dy ) / childHeight ; \n\t\tduration = ( int ) $F106873 ( childDelta ) ; \n\t\t} \n\t$F16700 ( duration , Math , MAX_SETTLE_DURATION ) mScroller . startScroll ( NUM00 , sy , NUM00 , dy , duration ) ; \n\tpostInvalidateOnAnimation ( ) ; \n\t} \n"}, {"code": "public JcaX509v3CertificateBuilder ( X500Principal issuer , BigInteger serial , Date notBefore , Date notAfter , X500Principal subject , PublicKey publicKey ) { \n\tsuper ( X500Name . getInstance ( issuer . getEncoded ( ) ) , serial , notBefore , notAfter , X500Name . getInstance ( subject . getEncoded ( ) ) , SubjectPublicKeyInfo . getInstance ( publicKey . getEncoded ( ) ) ) ; \n\t} \n"}, {"code": "private void writeGUIDValue ( ByteBuffer buffer , Object value ) throws IOException { \n\tMatcher m = GUID_PATTERN . matcher ( toCharSequence ( value ) ) ; \n\tif $F1152 ( m ) { \n\t\tthrow new IOException ( withErrorContext ( NUM00 + value ) ) ; \n\t\t} \n\tByteBuffer origBuffer = null ; \n\t$F5475 ( tmpBuf ) if ( buffer . order ( ) != ByteOrder . BIG_ENDIAN ) { \n\t\torigBuffer = buffer ; \n\t\t$F46945 ( tmpBuf ) buffer = ByteBuffer . wrap ( tmpBuf ) ; \n\t\t} \n\tByteUtil . writeHexString ( buffer , m . group ( NUM00 ) ) ; \n\tByteUtil . writeHexString ( buffer , m . group ( NUM00 ) ) ; \n\tByteUtil . writeHexString ( buffer , m . group ( NUM00 ) ) ; \n\tByteUtil . writeHexString ( buffer , m . group ( NUM00 ) ) ; \n\tByteUtil . writeHexString ( buffer , m . group ( NUM00 ) ) ; \n\tif ( tmpBuf != null ) { \n\t\tByteUtil . swap4Bytes ( tmpBuf , NUM00 ) ; \n\t\tByteUtil . swap2Bytes ( tmpBuf , NUM00 ) ; \n\t\tByteUtil . swap2Bytes ( tmpBuf , NUM00 ) ; \n\t\torigBuffer . put ( tmpBuf ) ; \n\t\t} \n\t} \n"}, {"code": "public NeuronGroup ( final Network net , final $F372817 neurons ) { \n\tsuper ( net ) ; \n\tneuronList = new ArrayList $F257385 $F716 ( neurons ) ; \n\tfor ( Neuron neuron : neurons ) { \n\t\taddNeuron ( neuron ) ; \n\t\t} \n\tneuronList = new CopyOnWriteArrayList $F257385 ( neuronList ) ; \n\tupdateRule = getNeuronType ( ) ; \n\tresetSubsamplingIndices ( ) ; \n\t} \n"}, {"code": "@ LogMessageDoc ( $F85045 , $F100217 , explanation = NUM00 , recommendation = LogMessageDoc . REPORT_CONTROLLER_BUG ) public $F116141 applyUpdates $F72 { \n\t$F116141 appliedUpdates = new ArrayList < LDUpdate > $F72 ; \n\tLDUpdate update = null ; \n\twhile ( ldUpdates . peek ( ) != null ) { \n\t\ttry $F116149 ( update , ldUpdates ) $F9877 ( log , e ) $F57901 ( log , update ) switch ( update . getOperation ( ) ) { \n\t\t\tcase LINK_UPDATED : addOrUpdateLink ( update . getSrc ( ) , update . getSrcPort ( ) , update . getDst ( ) , update . getDstPort ( ) , update . getType ( ) ) ; \n\t\t\t$F597 case LINK_REMOVED : removeLink ( update . getSrc ( ) , update . getSrcPort ( ) , update . getDst ( ) , update . getDstPort ( ) ) ; \n\t\t\t$F597 $F116162 ( SWITCH_UPDATED , addOrUpdateSwitch , update ) $F116162 ( SWITCH_REMOVED , removeSwitch , update ) $F116166 ( TUNNEL_PORT_ADDED , addTunnelPort , update ) $F116166 ( TUNNEL_PORT_REMOVED , removeTunnelPort , update ) case PORT_UP : case PORT_DOWN : $F597 } \n\t\tappliedUpdates . add ( update ) ; \n\t\t} \n\treturn ( Collections . unmodifiableList ( appliedUpdates ) ) ; \n\t} \n"}, {"code": "boolean isEmpty $F72 { \n\treturn mDescription . isEmpty ( ) && mTypes . isEmpty ( ) ; \n\t} \n"}, {"code": "public Star ( int points , float rotation , float insideness ) { \n\tfloat x = NUM00 ; \n\tfloat y = NUM00 ; \n\tfloat radius = NUM00 ; \n\tpoints = points < NUM00 ? NUM00 : points ; \n\trotation = rotation + ( float ) ( Math . PI / NUM00 ) ; \n\tboolean flat = insideness >= NUM00 ; \n\tsetControlPointSize ( flat ? points : NUM00 * points ) ; \n\tfinal float pi2 = NUM00 * ( float ) Math . PI ; \n\tfloat insideRadius = radius * insideness ; \n\t$F13616 pt ; \n\tfor ( $F1316 ( p , points ) ) { \n\t\tdouble vertex = p ; \n\t\tdouble angle = vertex * pi2 / points + rotation ; \n\t\tpt = new $F13616 ( ( float ) ( x + Math . cos ( angle ) * radius ) , ( float ) ( y + Math . sin ( angle ) * radius ) ) ; \n\t\tpushPoint ( pt ) ; \n\t\tif ( ! flat ) { \n\t\t\tdouble angle2 = ( vertex + NUM00 ) * pi2 / points + rotation ; \n\t\t\tpt = new $F13616 ( ( float ) ( x + Math . cos ( angle2 ) * insideRadius ) , ( float ) ( y + Math . sin ( angle2 ) * insideRadius ) ) ; \n\t\t\tpushPoint ( pt ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private static boolean isStatic ( Method m ) { \n\t$F23165 ( mods , m ) return ( mods & Modifier . STATIC ) != NUM00 ; \n\t} \n"}, {"code": "public synchronized boolean tryLock $F72 { \n\ttry { \n\t\tlock = file . tryLock ( ) ; \n\t\treturn lock != null ; \n\t\t} \n\t$F7474 ( _BOOL ) } \n"}, {"code": "$F1 public void nodeDown ( Topology topology , long eventUID , String nodeID ) { \n\tif $F1238 ( targetServerID , nodeID ) { \n\t\tdecideOnAction ( topology ) ; \n\t\t} \n\t} \n"}, {"code": "public boolean isValid $F72 { \n\treturn _BOOL ; \n\t} \n"}, {"code": "private void rolloverLogTask $F72 { \n\ttry $F150060 ( _isInit , flush ) catch ( Exception e ) $F173189 ( log , Level , e ) _isRollingOver = _BOOL ; \n\ttry { \n\t\t$F18748 ( _isInit ) Path savedPath = null ; \n\t\t$F80733 ( now , CurrentTime ) long lastPeriodEnd = _nextPeriodEnd ; \n\t\t_nextPeriodEnd = nextRolloverTime ( now ) ; \n\t\tPath path = getPath ( ) ; \n\t\tsynchronized ( _logLock ) { \n\t\t\tflushTempStream ( ) ; \n\t\t\tlong length = Files . size ( path ) ; \n\t\t\tif ( lastPeriodEnd <= now && lastPeriodEnd > NUM00 ) { \n\t\t\t\tcloseLogStream ( ) ; \n\t\t\t\tsavedPath = getSavedPath ( lastPeriodEnd - NUM00 ) ; \n\t\t\t\t} \n\t\t\telse if ( path != null && getRolloverSize ( ) <= length ) { \n\t\t\t\tcloseLogStream ( ) ; \n\t\t\t\tsavedPath = getSavedPath ( now ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F25302 ( savedPath , movePathToArchive ) } \n\t$F12241 ( e ) finally { \n\t\t$F21848 ( _logLock , _isRollingOver , _BOOL , flushTempStream ) _rolloverListener . requeue ( _rolloverAlarm ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void onUpdateScrollbar ( int dy ) { \n\tList < AlphabeticalAppsList . AdapterItem > items = mApps . getAdapterItems ( ) ; \n\tif ( items . isEmpty ( ) || mNumAppsPerRow == NUM00 ) $F64499 ( mScrollbar ) int rowCount = mApps . getNumAppRows ( ) ; \n\tgetCurScrollState ( mScrollPosState , - NUM00 ) ; \n\tif ( mScrollPosState . rowIndex < NUM00 ) $F64499 ( mScrollbar ) int availableScrollBarHeight = getAvailableScrollBarHeight ( ) ; \n\tint availableScrollHeight = getAvailableScrollHeight ( mApps . getNumAppRows ( ) ) ; \n\tif ( availableScrollHeight <= NUM00 ) $F64499 ( mScrollbar ) int scrollY = getScrollTop ( mScrollPosState ) ; \n\tint scrollBarY = mBackgroundPadding . top + ( int ) ( $F59190 ( scrollY , availableScrollHeight ) * availableScrollBarHeight ) ; \n\tif ( mScrollbar . isThumbDetached ( ) ) { \n\t\tint scrollBarX ; \n\t\tif ( Utilities . isRtl ( getResources ( ) ) ) $F9553 ( scrollBarX , mBackgroundPadding ) else { \n\t\t\tscrollBarX = getWidth ( ) - mBackgroundPadding . right - mScrollbar . getThumbWidth ( ) ; \n\t\t\t} \n\t\tif ( mScrollbar . isDraggingThumb ( ) ) { \n\t\t\tmScrollbar . setThumbOffset ( scrollBarX , ( int ) mScrollbar . getLastTouchY ( ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tint thumbScrollY = mScrollbar . getThumbOffset ( ) . y ; \n\t\t\tint diffScrollY = scrollBarY - thumbScrollY ; \n\t\t\tif ( diffScrollY * dy > NUM00 ) { \n\t\t\t\tif ( dy < NUM00 ) { \n\t\t\t\t\tint offset = ( int ) ( ( dy * thumbScrollY ) / ( float ) scrollBarY ) ; \n\t\t\t\t\tthumbScrollY += Math . max ( offset , diffScrollY ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tint offset = ( int ) ( ( dy * ( availableScrollBarHeight - thumbScrollY ) ) / $F64550 ( availableScrollBarHeight , scrollBarY ) ) ; \n\t\t\t\t\tthumbScrollY += Math . min ( offset , diffScrollY ) ; \n\t\t\t\t\t} \n\t\t\t\tthumbScrollY = Math . max ( NUM00 , Math . min ( availableScrollBarHeight , thumbScrollY ) ) ; \n\t\t\t\tmScrollbar . setThumbOffset ( scrollBarX , thumbScrollY ) ; \n\t\t\t\tif ( scrollBarY == thumbScrollY ) { \n\t\t\t\t\tmScrollbar . reattachThumbToScroll ( ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tmScrollbar . setThumbOffset ( scrollBarX , thumbScrollY ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse { \n\t\tsynchronizeScrollBarThumbOffsetToViewScroll ( mScrollPosState , rowCount ) ; \n\t\t} \n\t} \n"}, {"code": "private void emitListAdd $F6406 ( method , fieldName , builder ) { \n\t$F84 ( builder ) $F6407 ( builder , getListAdderName , fieldName ) $F84 ( builder ) builder . append ( getTypeArgumentImplName ( ( ParameterizedType ) method . getGenericReturnType ( ) , NUM00 ) ) ; \n\t$F84 ( builder ) $F6407 ( builder , getEnsureName , fieldName ) $F84 ( builder ) builder . append ( fieldName ) ; \n\t$F84 ( builder ) $F84 ( builder ) } \n"}, {"code": "public boolean onScrollChanged ( int scrollY ) { \n\tboolean isPullingDownNow = scrollY < lastScrollY ; \n\tlatestPullingDown . offer ( isPullingDownNow ) ; \n\tif $F60125 ( latestPullingDown , PULLING_DOWN_TIME_MAX ) { \n\t\t$F56193 ( latestPullingDown ) } \n\tlastScrollY = scrollY ; \n\treturn getPullingDownTime ( ) >= PULLING_DOWN_TIME_THRESHOLD ; \n\t} \n"}, {"code": "@ ExceptionHandler ( ConstraintViolationException . class ) @ ResponseStatus ( value = HttpStatus . BAD_REQUEST ) public $F529 handleConstraintViolationException ( ConstraintViolationException ex ) { \n\tCollection < FieldError > errors = FieldError . getErrors ( ex . getConstraintViolations ( ) ) ; \n\tlog . warn ( $F368 ( errors ) ) ; \n\treturn LemonUtil . mapOf ( NUM00 , NUM00 , NUM00 , errors ) ; \n\t} \n"}, {"code": "$F1 public void readExternal ( ObjectInput in ) throws IOException { \n\tb = new double [ in . readInt ( ) ] ; \n\tfor ( $F1139 ( p , b ) ) { \n\t\tb [ p ] = in . readDouble ( ) ; \n\t\t} \n\t} \n"}, {"code": "private synchronized void addTracker ( String path , Object marker , FileDeleteStrategy deleteStrategy ) { \n\t$F4640 ( exitWhenFinished ) if ( reaper == null ) { \n\t\treaper = new Reaper $F72 ; \n\t\t$F2346 ( reaper ) } \n\ttrackers . add ( new Tracker ( path , deleteStrategy , marker , q ) ) ; \n\t} \n"}, {"code": "List < Issue > errors $F72 { \n\treturn errors ; \n\t} \n"}, {"code": "public AudioWife addOnCompletionListener ( OnCompletionListener listener ) { \n\t$F6965 ( mCompletionListeners , listener ) return this ; \n\t} \n"}, {"code": "public void addVolumeToConsistencyGroup ( String instanceId , String cgID ) throws StorageCenterAPIException { \n\tRestResult rr = restClient . get ( String . format ( NUM00 , instanceId ) ) ; \n\tif ( ! checkResults ( rr ) ) { \n\t\tthrow new StorageCenterAPIException ( String . format ( NUM00 , rr . getErrorMsg ( ) ) ) ; \n\t\t} \n\tScVolumeConfiguration volConfig = gson . fromJson ( rr . getResult ( ) , ScVolumeConfiguration . class ) ; \n\t$F24645 ( profiles ) for ( ScObject profile : volConfig . replayProfileList ) { \n\t\tif ( ! cgID . equals ( profile . instanceId ) ) { \n\t\t\tprofiles . add ( profile . instanceId ) ; \n\t\t\t} \n\t\t} \n\tprofiles . add ( cgID ) ; \n\tParameters $F108428 ( params ) ; \n\tparams . add ( NUM00 , $F16104 ( profiles ) ) ; \n\trr = restClient . put ( String . format ( NUM00 , instanceId ) , params . toJson ( ) ) ; \n\tif ( ! checkResults ( rr ) ) { \n\t\tthrow new StorageCenterAPIException ( String . format ( NUM00 , rr . getErrorMsg ( ) ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static boolean isImplementsInterface ( Class clazz , Class interfaceClass ) { \n\tif ( ! $F97786 ( interfaceClass ) ) $F825 boolean resultThisClass = recursiveIsImplementsInterface ( clazz , interfaceClass ) ; \n\t$F9303 ( resultThisClass , _BOOL ) return recursiveSuperclassImplementsInterface ( clazz , interfaceClass ) ; \n\t} \n"}, {"code": "private static String replaceChars ( String str ) { \n\t$F1350 ( buf , str ) $F115 ( length , buf ) for ( $F119 ( i , length ) ) { \n\t\t$F1280 ( currentChar , buf , i ) if ( currentChar == NUM00 ) { \n\t\t\t$F1351 ( buf , i ) buf . insert ( i + NUM00 , NUM00 ) ; \n\t\t\tlength = length + NUM00 ; \n\t\t\ti = i + NUM00 ; \n\t\t\t} \n\t\telse if ( currentChar == NUM00 ) $F1355 ( buf , i ) } \n\t$F92 ( buf ) } \n"}, {"code": "private void addBinding ( final String key , final Object value ) $F1717 ( m_bindings , key , value ) "}, {"code": "public static < T extends Enum $F4203 > T forKey ( String key , Map $F94549 mapping , $F20474 enumeration ) { \n\t$F6391 ( t , mapping , key ) $F21525 ( t ) throw new IllegalArgumentException ( $F370 ( enumeration , key ) ) ; \n\t} \n"}, {"code": "private ExchangeRate directLookup ( final Currency source , final Currency target , final Date date ) { \n\tif ( System . getProperty ( NUM00 ) == null ) $F5788 ExchangeRate rate = null ; \n\tQL . require ( ( ( rate = fetch ( source , target , date ) ) != null ) , NUM00 ) ; \n\treturn rate ; \n\t} \n"}, {"code": "protected static int findNextNewLineChar ( CharSequence s , int start ) { \n\tfor ( $F68483 ( i , start , s ) ) { \n\t\tif $F11983 ( s , i ) { \n\t\t\treturn i ; \n\t\t\t} \n\t\t} \n\t$F150 } \n"}, {"code": "public SkypeBuilder withChat ( String id ) { \n\tif $F14943 ( id ) $F824 if ( password != null ) $F824 this . chatId = id ; \n\treturn this ; \n\t} \n"}, {"code": "public static int compareTo ( Object left , Object right ) $F19580 ( compareToWithEqualityCheck , left , right , _BOOL ) "}, {"code": "public static X509CRLImpl toImpl ( X509CRL crl ) throws CRLException { \n\tif ( crl instanceof X509CRLImpl ) { \n\t\treturn ( X509CRLImpl ) crl ; \n\t\t} \n\telse { \n\t\treturn X509Factory . intern ( crl ) ; \n\t\t} \n\t} \n"}, {"code": "public final void test_ROUNDTRIP_GetKeySpecKeyProvider02 $F72 { \n\tboolean performed = _BOOL ; \n\tfor ( $F1139 ( i , algName ) ) { \n\t\tfor ( $F1139 ( l , provider ) ) { \n\t\t\tif ( provider [ l ] == null ) $F1448 TestDataGenerator g ; \n\t\t\ttry { \n\t\t\t\tg = new TestDataGenerator ( algName [ i ] [ NUM00 ] , algName [ i ] [ NUM00 ] , privateKeyInfoDamaged , provider [ l ] ) ; \n\t\t\t\t} \n\t\t\tcatch ( TestDataGenerator . AllowedFailure allowedFailure ) $F1448 try { \n\t\t\t\tEncryptedPrivateKeyInfo epki ; \n\t\t\t\t$F71324 ( g , epki , algName , i ) try { \n\t\t\t\t\tepki . getKeySpec ( $F71326 ( g ) , provider [ l ] ) ; \n\t\t\t\t\t$F71332 ( fail , algName , i ) } \n\t\t\t\t$F32328 performed = _BOOL ; \n\t\t\t\t} \n\t\t\t$F71336 } \n\t\t} \n\tassertTrue ( NUM00 , performed ) ; \n\t} \n"}, {"code": "public final synchronized void closeAll $F72 { \n\tif ( onCloseAll ( ) ) $F13518 ( Log , TAG ) $F114083 ids = new $F114083 $F72 ; \n\tfor ( int id : getExistingIds ( ) ) $F207 ( ids , id ) for ( int id : ids ) { \n\t\tclose ( id ) ; \n\t\t} \n\t} \n"}, {"code": "private static Pair < Character , Integer > normalizeCodepoint ( String origString_ , Charset encoding_ , int offset_ ) { \n\tchar normalizedChar = NUM00 ; \n\tboolean isOk = _BOOL ; \n\tfinal int codepoint = origString_ . codePointAt ( offset_ ) ; \n\tif ( encoding_ . equals ( Charset . forName ( NUM00 ) ) ) { \n\t\tif ( codepoint < NUM00 ) isOk = _BOOL ; \n\t\t} \n\telse if ( encoding_ . equals ( Charset . forName ( NUM00 ) ) ) { \n\t\tif ( codepoint < NUM00 ) isOk = _BOOL ; \n\t\t} \n\telse if ( encoding_ . equals ( Charset . forName ( NUM00 ) ) ) { \n\t\tif ( codepoint < NUM00 ) isOk = _BOOL ; \n\t\t} \n\tif ( isOk ) { \n\t\tnormalizedChar = ( char ) codepoint ; \n\t\t} \n\telse { \n\t\tisOk = _BOOL ; \n\t\tfinal int type = Character . getType ( codepoint ) ; \n\t\tif ( type == Character . CURRENCY_SYMBOL ) normalizedChar = NUM00 ; \n\t\telse if ( type == Character . DASH_PUNCTUATION ) normalizedChar = NUM00 ; \n\t\telse if ( type == Character . FINAL_QUOTE_PUNCTUATION ) { \n\t\t\tnormalizedChar = NUM00 ; \n\t\t\t} \n\t\telse if ( type == Character . INITIAL_QUOTE_PUNCTUATION ) { \n\t\t\tnormalizedChar = NUM00 ; \n\t\t\t} \n\t\telse if ( type == Character . END_PUNCTUATION ) normalizedChar = NUM00 ; \n\t\telse if ( type == Character . DASH_PUNCTUATION ) normalizedChar = NUM00 ; \n\t\telse if ( type == Character . OTHER_LETTER ) normalizedChar = NUM00 ; \n\t\telse if ( type == Character . OTHER1BER ) normalizedChar = NUM00 ; \n\t\telse if ( type == Character . OTHER_PUNCTUATION ) normalizedChar = NUM00 ; \n\t\telse if ( type == Character . OTHER_SYMBOL ) normalizedChar = NUM00 ; \n\t\telse isOk = _BOOL ; \n\t\t} \n\tCharacter newChar = null ; \n\tif ( isOk ) newChar = normalizedChar ; \n\t$F83164 ( newChar , codepoint ) } \n"}, {"code": "public void testPosNegFirstShorter $F72 { \n\t$F50446 $F92469 int aSign = NUM00 ; \n\tint bSign = - NUM00 ; \n\tbyte $F3018 = { \n\t\t- NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 } \n\t; \n\t$F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F45034 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , result ) } \n"}, {"code": "private boolean startRandomGame $F72 { \n\tAbstractLaunch [ ] pins = mCardAdapter . getLaunchers ( ) ; \n\tList < AbstractLaunch > games = new ArrayList < AbstractLaunch > ( pins . length ) ; \n\tfor ( AbstractLaunch pin : pins ) { \n\t\tif ( pin . isGame ( ) ) { \n\t\t\tif ( pin . mState == AbstractLaunch . STATE_READY ) $F207 ( games , pin ) } \n\t\t} \n\tif $F3817 ( games ) { \n\t\t$F6822 ( r ) $F59615 ( index , r , games ) AbstractLaunch game = games . get ( index ) ; \n\t\tLog . d ( TAG , String . format ( NUM00 , game . mContentDescription ) ) ; \n\t\tgame . onClick ( game . getClickTarget ( ) ) ; \n\t\tMeasurementManager . recordCustomEvent ( mMeasurement , getString ( R . string . analytics_event_category_launch ) , getString ( R . string . analytics_launch_action_voice ) , game . mContentDescription ) ; \n\t\tAnalyticsManager . sendEvent ( R . string . analytics_event_category_launch , R . string . analytics_launch_action_voice , game . mContentDescription ) ; \n\t\treturn _BOOL ; \n\t\t} \n\telse { \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public void initDiskCache $F72 { \n\tsynchronized ( mDiskCacheLock ) { \n\t\tif $F103532 ( mDiskLruCache ) { \n\t\t\tFile diskCacheDir = mCacheParams . diskCacheDir ; \n\t\t\tif ( mCacheParams . diskCacheEnabled && diskCacheDir != null ) { \n\t\t\t\t$F1909 ( diskCacheDir ) if ( getUsableSpace ( diskCacheDir ) > mCacheParams . diskCacheSize ) { \n\t\t\t\t\ttry { \n\t\t\t\t\t\tmDiskLruCache = DiskLruCache . open ( diskCacheDir , NUM00 , NUM00 , mCacheParams . diskCacheSize ) ; \n\t\t\t\t\t\t$F29031 ( BuildConfig , Log , TAG ) } \n\t\t\t\t\tcatch ( final IOException e ) { \n\t\t\t\t\t\tmCacheParams . diskCacheDir = null ; \n\t\t\t\t\t\t$F23815 ( Log , TAG , e ) } \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tmDiskCacheStarting = _BOOL ; \n\t\t$F165 ( mDiskCacheLock ) } \n\t} \n"}, {"code": "boolean isRegisteredPermission ( Permission permission ) ; \n"}, {"code": "public static int compare ( String id1 , String id2 ) { \n\tint result = - NUM00 ; \n\tString seed1 = IdGenerator . getSeedFromId ( id1 ) ; \n\tString seed2 = IdGenerator . getSeedFromId ( id2 ) ; \n\tif ( seed1 != null && seed2 != null ) { \n\t\tresult = seed1 . compareTo ( seed2 ) ; \n\t\tif ( result == NUM00 ) { \n\t\t\tlong count1 = IdGenerator . getSequenceFromId ( id1 ) ; \n\t\t\tlong count2 = IdGenerator . getSequenceFromId ( id2 ) ; \n\t\t\t$F443511 ( result , count1 , count2 ) } \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static Element addChildElementNSElement ( Element element , String childElementName , Document document , String nameSpaceUrl ) { \n\tElement newElement = document . createElementNS ( nameSpaceUrl , childElementName ) ; \n\telement . appendChild ( newElement ) ; \n\treturn element ; \n\t} \n"}, {"code": "public VNXeCommandResult modifyConsistencyGroupSync ( String id , LunGroupModifyParam param ) { \n\t$F7542 ( urlBld , URL_MODIFY1 ) urlBld . append ( id ) ; \n\turlBld . append ( URL_MODIFY2 ) ; \n\t$F6947 ( _url , urlBld ) return postRequestSync ( param ) ; \n\t} \n"}, {"code": "protected Query finishQuery ( $F220945 in , boolean allTermsRequired ) { \n\t$F17464 ( in ) } \n"}, {"code": "public long sum $F72 { \n\tlong sum = NUM00 ; \n\tfor ( AtomicLong value : map . values ( ) ) { \n\t\tsum = sum + value . get ( ) ; \n\t\t} \n\treturn sum ; \n\t} \n"}, {"code": "public void testNegPosFirstShorter $F72 { \n\t$F50446 $F92469 int aSign = - NUM00 ; \n\tint bSign = NUM00 ; \n\tbyte $F3018 = { \n\t\tNUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 } \n\t; \n\t$F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F37344 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) } \n"}, {"code": "$F35762 ( newScrollValue , itemDimension , initialMotionValue , lastMotionValue , getPullToRefreshScrollDirection , HORIZONTAL , mInitialMotionX , mLastMotionX , VERTICAL , mInitialMotionY , mLastMotionY , mCurrentMode , PULL_FROM_END , Math , FRICTION , getFooterSize , PULL_FROM_START , getHeaderSize , setHeaderScroll , isRefreshing , scale , mFooterLayout , mHeaderLayout , mState , State , setState ) "}, {"code": "public static String extractFullStackTrace ( Throwable e ) { \n\t$F29429 ( stringWriter ) $F80496 ( printWriter , stringWriter ) e . printStackTrace ( printWriter ) ; \n\t$F92 ( stringWriter ) } \n"}, {"code": "public EmptyTileFactory ( TileFactoryInfo info ) { \n\tsuper ( info ) ; \n\tint tileSize = info . getTileSize ( info . getMinimumZoomLevel ( ) ) ; \n\temptyTile = new BufferedImage ( tileSize , tileSize , BufferedImage . TYPE_INT_ARGB ) ; \n\t$F5115 ( g , emptyTile ) $F34716 ( g , RenderingHints ) g . setColor ( Color . GRAY ) ; \n\tg . fillRect ( NUM00 , NUM00 , tileSize , tileSize ) ; \n\tg . setColor ( Color . WHITE ) ; \n\tg . drawOval ( NUM00 , NUM00 , tileSize - NUM00 , tileSize - NUM00 ) ; \n\tg . fillOval ( $F4026 ) ; \n\tg . fillOval ( tileSize - NUM00 , NUM00 , NUM00 , NUM00 ) ; \n\tg . fillOval ( tileSize / NUM00 - NUM00 , tileSize / NUM00 - NUM00 , NUM00 , NUM00 ) ; \n\t$F355 ( g ) } \n"}, {"code": "$F27241 ( tag , msg , args , sLevel , LEVEL_INFO , String , Log ) "}, {"code": "public void close $F72 throws IOException { \n\t$F59 ( guard ) RandomAccessFile localRaf = raf ; \n\tif ( localRaf != null ) { \n\t\tsynchronized ( localRaf ) { \n\t\t\traf = null ; \n\t\t\t$F59 ( localRaf ) } \n\t\tif ( fileToDeleteOnClose != null ) $F187939 ( fileToDeleteOnClose ) } \n\t} \n"}, {"code": "public boolean matchWithRegEx ( String aRegEx ) { \n\t$F46019 ( TextUtils , aRegEx , _BOOL ) boolean matched = _BOOL ; \n\tif $F20899 ( TextUtils , mDisplayName ) { \n\t\tmatched = mDisplayName . matches ( aRegEx ) ; \n\t\t} \n\tif ( ! matched ) { \n\t\tfor ( String email : mEmails ) { \n\t\t\tmatched |= email . matches ( aRegEx ) ; \n\t\t\t} \n\t\t} \n\treturn matched ; \n\t} \n"}, {"code": "public String stemString ( String str ) { \n\t$F280 ( result ) int start = - NUM00 ; \n\tfor ( $F1088 ( j , str ) ) { \n\t\t$F1280 ( c , str , j ) if $F255966 ( Character , c ) { \n\t\t\tif ( start == - NUM00 ) { \n\t\t\t\tstart = j ; \n\t\t\t\t} \n\t\t\t} \n\t\telse if ( c == NUM00 ) { \n\t\t\tif ( start == - NUM00 ) $F288 ( result , c ) } \n\t\telse { \n\t\t\tif ( start != - NUM00 ) { \n\t\t\t\tresult . append ( stem ( str . substring ( start , j ) ) ) ; \n\t\t\t\tstart = - NUM00 ; \n\t\t\t\t} \n\t\t\tresult . append ( c ) ; \n\t\t\t} \n\t\t} \n\tif ( start != - NUM00 ) { \n\t\tresult . append ( stem ( $F83851 ( str , start ) ) ) ; \n\t\t} \n\t$F92 ( result ) } \n"}, {"code": "public static $F3807 parseNumericList ( String string ) { \n\t$F63609 ( list ) $F26605 ( ranges , Pattern ) $F1150 ( m , ranges , string ) while $F281 ( m ) { \n\t\tString range = m . group ( NUM00 ) ; \n\t\tstring = string . replace ( range , NUM00 ) ; \n\t\tparseNumericRange ( range , list ) ; \n\t\t} \n\t$F6542 ( numbers , string ) for ( $F9808 ( i , numbers ) ) { \n\t\tString number = numbers [ i ] ; \n\t\tif $F5973 ( number ) { \n\t\t\t$F269561 ( list , Integer , number ) } \n\t\t} \n\tCollections . sort ( list ) ; \n\treturn list ; \n\t} \n"}, {"code": "protected void savePassCodeAndExit $F72 { \n\tIntent $F192736 ( resultIntent ) ; \n\tresultIntent . putExtra ( KEY_PASSCODE , $F2065 ( mPassCodeDigits ) + mPassCodeDigits [ NUM00 ] + mPassCodeDigits [ NUM00 ] ) ; \n\tsetResult ( RESULT_OK , resultIntent ) ; \n\tfinish ( ) ; \n\t} \n"}, {"code": "public static void readFully ( FileChannel file , long pos , ByteBuffer dst ) { \n\ttry { \n\t\tdo { \n\t\t\tint len = file . read ( dst , pos ) ; \n\t\t\t$F5148 ( len ) pos += len ; \n\t\t\t} \n\t\twhile $F45853 ( dst ) ; \n\t\t$F23501 ( dst ) } \n\tcatch ( IOException e ) { \n\t\tlong size ; \n\t\ttry $F57332 ( size , file ) catch ( IOException e2 ) $F44867 ( size ) throw newIllegalStateException ( ERROR_READING_FAILED , NUM00 + NUM00 , file , size , dst . remaining ( ) , pos , e ) ; \n\t\t} \n\t} \n"}, {"code": "private static void sparseFullRepresentationTest ( final ISchemaVersion schemaVersion ) throws IOException { \n\tfinal Writer output = openOutput ( schemaVersion , NUM00 , TestType . UNION ) ; \n\t$F23769 ( emptyHLL1 , newHLL , HLLType ) $F23769 ( emptyHLL2 , newHLL , HLLType ) cumulativeUnionLine ( output , emptyHLL1 , emptyHLL2 , schemaVersion ) ; \n\tfinal HLL fullHLL = newHLL ( HLLType . FULL ) ; \n\tfullHLL . addRaw ( constructHLLValue ( LOG2M , NUM00 , NUM00 ) ) ; \n\tfinal HLL sparseHLL = newHLL ( HLLType . SPARSE ) ; \n\tsparseHLL . addRaw ( constructHLLValue ( LOG2M , NUM00 , NUM00 ) ) ; \n\toutput . write ( stringCardinality ( fullHLL ) + NUM00 + toByteA ( fullHLL , schemaVersion ) + NUM00 + stringCardinality ( sparseHLL ) + NUM00 + toByteA ( sparseHLL , schemaVersion ) + NUM00 ) ; \n\t$F1206 ( output ) final HLL fullHLL2 = newHLL ( HLLType . FULL ) ; \n\tfullHLL2 . addRaw ( constructHLLValue ( LOG2M , NUM00 , NUM00 ) ) ; \n\tsparseHLL . addRaw ( constructHLLValue ( LOG2M , NUM00 , NUM00 ) ) ; \n\toutput . write ( stringCardinality ( fullHLL2 ) + NUM00 + toByteA ( fullHLL2 , schemaVersion ) + NUM00 + stringCardinality ( sparseHLL ) + NUM00 + toByteA ( sparseHLL , schemaVersion ) + NUM00 ) ; \n\t$F1206 ( output ) final HLL fullHLL3 = newHLL ( HLLType . FULL ) ; \n\tfor ( int i = NUM00 ; \n\ti < ( SPARSE_THRESHOLD + NUM00 ) ; \n\ti ++ ) { \n\t\tfullHLL3 . addRaw ( constructHLLValue ( LOG2M , i , NUM00 ) ) ; \n\t\tsparseHLL . addRaw ( constructHLLValue ( LOG2M , i , NUM00 ) ) ; \n\t\t} \n\toutput . write ( stringCardinality ( fullHLL3 ) + NUM00 + toByteA ( fullHLL3 , schemaVersion ) + NUM00 + stringCardinality ( sparseHLL ) + NUM00 + toByteA ( sparseHLL , schemaVersion ) + NUM00 ) ; \n\t$F1206 ( output ) } \n"}, {"code": "public void triggerCycle $F72 { \n\t$F790 ( lock ) triggerCount ++ ; \n\tcontextsParked = NUM00 ; \n\tlock . broadcast ( ) ; \n\t$F704 ( lock ) } \n"}, {"code": "protected boolean heapifyDownComparator ( final int ipos , Object cur ) { \n\tint pos = ipos ; \n\tfinal int half = size > > > NUM00 ; \n\twhile ( pos < half ) { \n\t\tint min = pos ; \n\t\tObject best = cur ; \n\t\tfinal int $F76469 ( lchild , pos ) ; \n\t\tObject left = queue [ lchild ] ; \n\t\tif $F230914 ( comparator , best , left ) { \n\t\t\tmin = lchild ; \n\t\t\tbest = left ; \n\t\t\t} \n\t\tfinal int rchild = lchild + NUM00 ; \n\t\tif ( rchild < size ) { \n\t\t\tObject right = queue [ rchild ] ; \n\t\t\tif $F230914 ( comparator , best , right ) { \n\t\t\t\tmin = rchild ; \n\t\t\t\tbest = right ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F15290 ( min , pos ) queue [ pos ] = best ; \n\t\tpos = min ; \n\t\t} \n\tqueue [ pos ] = cur ; \n\treturn ( pos != ipos ) ; \n\t} \n"}, {"code": "public static boolean isString ( String str ) { \n\treturn ( $F40448 ( str ) || $F40448 ( str ) ) && $F20 ( str ) ; \n\t} \n"}, {"code": "static public boolean hasPhoto ( Tweet tweet ) $F118073 ( getPhotoEntity , tweet ) "}, {"code": "public void testCase19 $F72 { \n\t$F3013 $F3021 int aSign = NUM00 ; \n\t$F3023 ( aNumber , aSign , aBytes ) BigInteger bNumber = BigInteger . ZERO ; \n\t$F3024 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) } \n"}, {"code": "public static StringBuilder formatTo ( StringBuilder buf , $F2469 d , String sep ) { \n\t$F50085 ( d , buf ) $F50086 ( d , buf ) $F13031 ( buf , d ) for ( $F1139 ( i , d ) ) { \n\t\tbuf . append ( sep ) ; \n\t\t$F6939 ( buf , d , i ) } \n\treturn buf ; \n\t} \n"}, {"code": "public static $F4203 int upperBound ( $F95121 ( valueList ) , int fromIdx , int toIdx , final Comparable $F4203 value ) { \n\tint len = toIdx - fromIdx + ( toIdx > fromIdx ? NUM00 : NUM00 ) ; \n\tint from = fromIdx ; \n\tint half ; \n\tint middle ; \n\twhile ( len > NUM00 ) { \n\t\thalf = len > > NUM00 ; \n\t\tmiddle = from ; \n\t\tmiddle = middle + half ; \n\t\tif ( value . compareTo ( valueList . get ( middle ) ) == - NUM00 ) { \n\t\t\tlen = half ; \n\t\t\t} \n\t\telse { \n\t\t\tfrom = middle ; \n\t\t\tfrom ++ ; \n\t\t\tlen = len - half - NUM00 ; \n\t\t\t} \n\t\t} \n\treturn from ; \n\t} \n"}, {"code": "$F1654 ( data ) "}, {"code": "public static synchronized void registerAdditionalHyphenationFileDirectory ( String directory ) $F23232 ( additionalHyphenationFileDirectories , directory ) "}, {"code": "private void insertNewDriveFiles $F72 throws IOException { \n\tCursor cursor = null ; \n\ttry { \n\t\tcursor = myTracksProviderUtils . getTrackCursor ( SyncUtils . NO_DRIVE_ID_TRACKS_QUERY , null , null ) ; \n\t\tlong recordingTrackId = PreferencesUtils . getLong ( context , R . string . recording_track_id_key ) ; \n\t\tif ( cursor != null && cursor . moveToFirst ( ) ) { \n\t\t\tdo { \n\t\t\t\tTrack track = myTracksProviderUtils . createTrack ( cursor ) ; \n\t\t\t\tif ( track . getId ( ) == recordingTrackId ) $F1448 SyncUtils . insertDriveFile ( drive , folderId , context , myTracksProviderUtils , track , _BOOL , _BOOL ) ; \n\t\t\t\t} \n\t\t\twhile $F12260 ( cursor ) ; \n\t\t\t} \n\t\t} \n\t$F14364 ( cursor ) } \n"}, {"code": "public void testHandle_normalCompletion $F72 { \n\tfor ( $F40424 ( m , ExecutionMode ) ) for ( $F2703 ( createIncomplete , _BOOL ) ) for ( $F127409 ( v1 ) ) { \n\t\t$F127411 ( f ) $F127413 ( a ) if ( ! createIncomplete ) $F181557 ( assertTrue , f , v1 ) final $F70219 g = m . handle ( f , null ) ; \n\t\tif ( createIncomplete ) $F181557 ( assertTrue , f , v1 ) checkCompletedNormally ( g , inc ( v1 ) ) ; \n\t\tcheckCompletedNormally ( f , v1 ) ; \n\t\t$F127421 ( assertEquals , a ) } \n\t} \n"}, {"code": "private static String unescape ( String s ) { \n\tint len = s . length ( ) , base = NUM00 , idx ; \n\tString escapes = NUM00 ; \n\tString chars = NUM00 ; \n\tStringBuffer sbuf = null ; \n\twhile ( $F64354 ( idx , s , base ) != - NUM00 ) { \n\t\tif ( sbuf != null ) $F13037 ( sbuf , s , base , idx ) if ( idx + NUM00 == len ) $F597 $F17494 ( c , s , idx ) $F12747 ( cidx , escapes , c ) if ( cidx == - NUM00 ) $F20352 ( sbuf , c ) else { \n\t\t\tif ( sbuf == null ) sbuf = new StringBuffer $F175778 ( s , base , idx ) ; \n\t\t\t$F4137 ( sbuf , chars , cidx ) } \n\t\tbase = idx + NUM00 ; \n\t\t} \n\tif ( sbuf != null && base < len ) $F13047 ( sbuf , s , base ) return ( $F75266 ( sbuf , s ) ) ; \n\t} \n"}, {"code": "public static void put ( String dbgToken ) { \n\tdbgTable . put ( dbgToken , Boolean . TRUE ) ; \n\t} \n"}, {"code": "public boolean removeDataSet ( T d ) { \n\t$F397 ( d , _BOOL ) $F12396 ( removed , mDataSets , d ) if ( removed ) { \n\t\tmYValCount -= d . getEntryCount ( ) ; \n\t\tmYValueSum -= d . getYValueSum ( ) ; \n\t\tcalcMinMax ( mDataSets ) ; \n\t\t} \n\treturn removed ; \n\t} \n"}, {"code": "public long reservedStore $F72 { \n\treturn m_size * m_totalSlots ; \n\t} \n"}, {"code": "public Transfer writeString ( String s ) throws IOException { \n\tif ( s == null ) { \n\t\t$F150188 ( out ) } \n\telse { \n\t\t$F1749 ( len , s ) out . writeInt ( len ) ; \n\t\tfor ( $F119 ( i , len ) ) { \n\t\t\tout . writeChar ( s . charAt ( i ) ) ; \n\t\t\t} \n\t\t} \n\treturn this ; \n\t} \n"}, {"code": "private void fillInsideDraw $F159951 ( g , x , y , w , h ) { \n\t$F339 ( g , Color ) g . drawRect ( x , y , w , h ) ; \n\tg . setColor ( Color . LIGHT_GRAY ) ; \n\tg . fillRect ( x + NUM00 , y + NUM00 , w - NUM00 , h - NUM00 ) ; \n\t} \n"}, {"code": "public DrawerBuilder addStickyDrawerItems ( $F4170 IDrawerItem ... stickyDrawerItems ) { \n\tif ( this . mStickyDrawerItems == null ) { \n\t\tthis . mStickyDrawerItems = $F203 ; \n\t\t} \n\tCollections . addAll ( this . mStickyDrawerItems , stickyDrawerItems ) ; \n\treturn this ; \n\t} \n"}, {"code": "public void appendToBuffer ( StringBuilder buf ) { \n\tIterator $F103896 iter = polygons . iterator ( ) ; \n\twhile $F2921 ( iter ) { \n\t\tPolygon poly = iter . next ( ) ; \n\t\tpoly . appendToBuffer ( buf ) ; \n\t\tif $F2921 ( iter ) $F86 ( buf ) } \n\t} \n"}, {"code": "public void addFunction ( FunctionInterface activeFunction ) $F207 ( functions , activeFunction ) "}, {"code": "$F127810 ( charset , Charset ) "}, {"code": "public $F9883 Joiner join ( $F20474 clazz , String alias ) { \n\tif $F5973 ( jClasses ) { \n\t\tthrow new JoinerException $F580 ; \n\t\t} \n\tJClass jc = new JClass ( clazz , alias , jClasses . size ( ) ) ; \n\tjClasses . add ( jc ) ; \n\tlastJClass = jc ; \n\taliasMap . put ( alias , jc ) ; \n\treturn this ; \n\t} \n"}, {"code": "$F69921 ( b , off , len , length , data , enlarge , System , this ) "}, {"code": "public static void showProgressBar ( int status , int i ) { \n\tif ( mRootView != null ) { \n\t\tProgressBar pb = ( ProgressBar ) mRootView . findViewById ( R . id . progress_slice ) ; \n\t\tTextView tv = ( TextView ) mRootView . findViewById ( R . id . viewer_text_progress_slice ) ; \n\t\tTextView tve = ( TextView ) mRootView . findViewById ( R . id . viewer_text_estimated_time ) ; \n\t\tTextView tve_title = ( TextView ) mRootView . findViewById ( R . id . viewer_estimated_time_textview ) ; \n\t\tif ( mSlicingHandler . getLastReference ( ) != null ) { \n\t\t\t$F29549 ( tve_title , View ) $F29549 ( pb , View ) switch ( status ) { \n\t\t\t\tcase StateUtils . SLICER_HIDE : if ( i < NUM00 ) { \n\t\t\t\t\ttv . setText ( R . string . error ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\ttv . setText ( R . string . viewer_text_downloaded ) ; \n\t\t\t\t\t} \n\t\t\t\t$F185816 ( pb , View ) $F597 case StateUtils . SLICER_UPLOAD : String uploadText = mContext . getString ( R . string . viewer_text_uploading ) ; \n\t\t\t\tif ( i == NUM00 ) pb . setIndeterminate ( _BOOL ) ; \n\t\t\t\telse { \n\t\t\t\t\tpb . setProgress ( i ) ; \n\t\t\t\t\tpb . setIndeterminate ( _BOOL ) ; \n\t\t\t\t\tuploadText += NUM00 + i + NUM00 ; \n\t\t\t\t\t} \n\t\t\t\ttv . setText ( uploadText ) ; \n\t\t\t\ttve . setText ( null ) ; \n\t\t\t\t$F597 case StateUtils . SLICER_SLICE : String slicingText = mContext . getString ( R . string . viewer_text_slicing ) ; \n\t\t\t\tif ( i == NUM00 ) { \n\t\t\t\t\tpb . setIndeterminate ( _BOOL ) ; \n\t\t\t\t\t} \n\t\t\t\telse if ( i == NUM00 ) { \n\t\t\t\t\tpb . setIndeterminate ( _BOOL ) ; \n\t\t\t\t\tpb . setProgress ( NUM00 ) ; \n\t\t\t\t\tslicingText += NUM00 + mContext . getString ( R . string . viewer_text_done ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tpb . setProgress ( i ) ; \n\t\t\t\t\tpb . setIndeterminate ( _BOOL ) ; \n\t\t\t\t\tslicingText += NUM00 + i + NUM00 ; \n\t\t\t\t\t} \n\t\t\t\ttv . setText ( slicingText ) ; \n\t\t\t\ttve . setText ( null ) ; \n\t\t\t\t$F5217 ( mRootView ) $F597 case StateUtils . SLICER_DOWNLOAD : if ( i > NUM00 ) { \n\t\t\t\t\ttve . setText ( OctoprintConnection . ConvertSecondToHHMMString ( String . valueOf ( i ) ) ) ; \n\t\t\t\t\t} \n\t\t\t\ttv . setText ( R . string . viewer_text_downloading ) ; \n\t\t\t\tpb . setIndeterminate ( _BOOL ) ; \n\t\t\t\t$F597 $F2448 } \n\t\t\t} \n\t\telse { \n\t\t\t$F185816 ( pb , View ) $F185816 ( tve_title , View ) tv . setText ( null ) ; \n\t\t\ttve . setText ( null ) ; \n\t\t\t$F5217 ( mRootView ) } \n\t\t} \n\t} \n"}, {"code": "public LaunchOption ( Version version , Authenticator authenticator , MinecraftDirectory minecraftDir ) { \n\tObjects . requireNonNull ( version ) ; \n\tObjects . requireNonNull ( authenticator ) ; \n\tObjects . requireNonNull ( minecraftDir ) ; \n\tthis . version = version ; \n\tthis . authenticator = authenticator ; \n\tthis . minecraftDirectory = minecraftDir ; \n\tthis . runtimeDirectory = minecraftDir ; \n\tthis . javaEnvironment = JavaEnvironment . current ( ) ; \n\t} \n"}, {"code": "protected boolean isStoppable $F72 { \n\treturn ( isRunning ( ) && getLocator ( ) != null ) ; \n\t} \n"}, {"code": "public void load ( String fileName ) throws Exception { \n\tif ( $F2363 ( fileName ) && $F2363 ( fileName ) ) { \n\t\tthrow new Exception $F3487 ; \n\t\t} \n\tif $F8991 ( fileName ) { \n\t\tloadBinary ( fileName ) ; \n\t\t} \n\telse if $F8991 ( fileName ) { \n\t\tloadXML ( fileName ) ; \n\t\t} \n\t} \n"}, {"code": "public Bindings addOptComponent ( String property , Class clazz , JToggleButton c , boolean enabledByDefault ) { \n\tBinding b = new OptComponentBinding ( this , property , clazz , c , enabledByDefault ) ; \n\tif $F1710 ( _optComponents , property ) { \n\t\tthrow new BindingException $F16961 ( Messages ) ; \n\t\t} \n\t_optComponents . put ( property , b ) ; \n\treturn this ; \n\t} \n"}, {"code": "public static boolean copyFile ( File file , File copy ) { \n\tif ( file == null || copy == null ) $F894 if ( $F48789 ( file ) || copy . isDirectory ( ) ) $F824 FileInputStream fis = null ; \n\tFileOutputStream fos = null ; \n\ttry { \n\t\t$F5335 ( fis , file ) $F10893 ( fos , copy ) int bytes ; \n\t\t$F2175 ( packet , COPY_PACKET_SIZE ) while ( ( bytes = fis . read ( packet , NUM00 , COPY_PACKET_SIZE ) ) != - NUM00 ) $F11584 ( fos , packet , bytes ) return _BOOL ; \n\t\t} \n\tcatch ( Exception e ) $F51339 ( LOGGER , Level , e , _BOOL ) finally { \n\t\ttry $F1823 ( fos ) $F427956 ( LOGGER , Level , e ) try $F1823 ( fis ) $F427956 ( LOGGER , Level , e ) } \n\t} \n"}, {"code": "public static $F96 encryptMySQLPassword $F84589 ( password , seed ) { \n\tif $F3581 ( password ) $F42429 MessageDigest digest = null ; \n\ttry $F14527 ( digest , MessageDigest ) catch ( NoSuchAlgorithmException e ) { \n\t\t$F5197 ( logger , e ) return $F10314 ; \n\t\t} \n\t$F96 stage1_hash = digest . digest ( password . getBytes ( ) ) ; \n\t$F2268 ( digest ) $F96 sha1_stage1 = digest . digest ( stage1_hash ) ; \n\t$F2268 ( digest ) digest . update ( seed ) ; \n\tdigest . update ( sha1_stage1 ) ; \n\t$F96 finalSha1 = digest . digest ( ) ; \n\t$F82619 ( token , finalSha1 ) for ( $F1139 ( i , finalSha1 ) ) { \n\t\ttoken [ i ] = ( byte ) ( stage1_hash [ i ] ^ finalSha1 [ i ] ) ; \n\t\t} \n\treturn token ; \n\t} \n"}, {"code": "protected void addUrl ( URL url ) { \n\tif $F105 ( urls , url ) { \n\t\t$F556 ( LOGGER , url ) $F665 } \n\turls . add ( url ) ; \n\t$F556 ( LOGGER , url ) } \n"}, {"code": "private $F2027 defineNumeric ( Random random ) { \n\t$F2027 num = new int [ getNumAttributes ( ) ] ; \n\tfor ( $F1139 ( i , num ) ) { \n\t\tnum [ i ] = Attribute . NOMINAL ; \n\t\t} \n\tint numNum = NUM00 ; \n\tfor ( int i = NUM00 ; \n\t( numNum < getNumNumeric ( ) ) && ( i < getNumAttributes ( ) * NUM00 ) ; \n\ti ++ ) { \n\t\tint maybeNext = ( int ) ( random . nextDouble ( ) * num . length ) ; \n\t\tif ( num [ maybeNext ] != Attribute . NUMERIC ) { \n\t\t\tnum [ maybeNext ] = Attribute . NUMERIC ; \n\t\t\tnumNum ++ ; \n\t\t\t} \n\t\t} \n\treturn num ; \n\t} \n"}, {"code": "public static boolean isFavoriteStation ( Context context , int iStation ) $F19580 ( isStationExist , context , iStation , STATION_TYPE_FAVORITE ) "}, {"code": "protected void paintCaption ( Graphics g , Rectangle rect ) { \n\tString s = getTargetLabel ( ) ; \n\t$F59924 ( s ) g . setFont ( getTargetFont ( ) ) ; \n\t$F319 ( fm , g ) String str = getTargetLabel ( ) ; \n\tint width = fm . stringWidth ( str ) ; \n\tint textx = rect . x + ( rect . width - width ) / NUM00 ; \n\tint texty = rect . y + CAPTION_MARGIN_TOP + fm . getAscent ( ) ; \n\tint sepy = $F6118 ( rect ) - CAPTION_SEPARATOR_HEIGHT / NUM00 ; \n\tg . setColor ( isTargetEnabled ( ) ? getForegroundColor ( ) : getDisabledColor ( ) ) ; \n\tg . drawString ( s , textx , texty ) ; \n\tdraw3DRect ( g , rect . x , sepy , rect . width , NUM00 , _BOOL ) ; \n\t} \n"}, {"code": "$F45572 ( context , intent , pm , handlers , PackageManager , _BOOL , resolveInfo , filter , Log , TAG ) "}, {"code": "public void putFloat ( float x ) { \n\tbb . putFloat ( space -= NUM00 , x ) ; \n\t} \n"}, {"code": "final void putInt ( int offset , int value ) { \n\tunsafe . putInt ( offset + address , value ) ; \n\t} \n"}, {"code": "private static boolean isUnreservedCharacter ( char p_char ) { \n\treturn ( isAlphanum ( p_char ) || $F36740 ( MARK_CHARACTERS , p_char ) ) ; \n\t} \n"}, {"code": "public static InetSocketAddress parseSocketAddress ( String addr ) { \n\t$F35105 ( parts , addr , COLON ) Preconditions . checkArgument ( parts . length == NUM00 ) ; \n\tString hostname = parts [ NUM00 ] ; \n\t$F167151 ( port , Integer , parts ) return new InetSocketAddress ( hostname , port ) ; \n\t} \n"}, {"code": "$F1 public void writeExternal ( ObjectOutput out ) throws IOException { \n\tsuper . writeExternal ( out ) ; \n\tout . writeObject ( approximation ) ; \n\t} \n"}, {"code": "public $F131 toArray $F72 { \n\t$F48385 ( items , this ) $F677 ( lock , this ) $F790 ( lock ) try { \n\t\t$F4711 ( count , this ) $F133 ( a , count ) int n = items . length - takeIndex ; \n\t\tif ( count <= n ) { \n\t\t\t$F21535 ( System , items , takeIndex , a , count ) } \n\t\telse { \n\t\t\t$F21535 ( System , items , takeIndex , a , n ) System . arraycopy ( items , NUM00 , a , n , count - n ) ; \n\t\t\t} \n\t\treturn a ; \n\t\t} \n\t$F796 ( lock ) } \n"}, {"code": "public void messageArrived ( MqttPublish sendMessage ) { \n\tfinal String methodName = NUM00 ; \n\tif ( mqttCallback != null || $F3816 ( callbacks ) ) { \n\t\tsynchronized ( spaceAvailable ) { \n\t\t\twhile ( running && ! quiescing && messageQueue . size ( ) >= INBOUND_QUEUE_SIZE ) { \n\t\t\t\ttry { \n\t\t\t\t\t$F9270 ( log , CLASS_NAME , methodName ) spaceAvailable . wait ( NUM00 ) ; \n\t\t\t\t\t} \n\t\t\t\t$F34690 } \n\t\t\t} \n\t\tif ( ! quiescing ) { \n\t\t\tmessageQueue . addElement ( sendMessage ) ; \n\t\t\tsynchronized ( workAvailable ) { \n\t\t\t\t$F9270 ( log , CLASS_NAME , methodName ) $F165 ( workAvailable ) } \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void findHome $F72 { \n\t$F27462 ( home , System ) if ( home == null ) $F109927 ( home , System ) if ( home == null ) $F109927 ( home , System ) if ( home == null ) $F109927 ( home , System ) if ( home != null ) manifestPath = $F157313 ( home , File ) + manifestFileName ; \n\telse manifestPath = manifestFileName ; \n\t} \n"}, {"code": "public static final $F2027 toIntArray ( String $F32798 ) { \n\tint u [ ] = $F14242 ( s ) ; \n\tfor ( $F1139 ( j , s ) ) { \n\t\t$F191709 ( u , j , Integer , s ) } \n\treturn u ; \n\t} \n"}, {"code": "private $F3803 checkAllColumnsInCube ( CubeInstance cube , TableDesc table , Map < String , HiveTableMeta . HiveTableColumnMeta > fieldsMap ) { \n\tSet < ColumnDesc > usedColumns = Sets . newHashSet ( ) ; \n\tfor ( TblColRef col : cube . getAllColumns ( ) ) { \n\t\tusedColumns . add ( col . getColumnDesc ( ) ) ; \n\t\t} \n\t$F295581 ( violateColumns , Lists ) for ( ColumnDesc column : table . getColumns ( ) ) { \n\t\tif $F105 ( usedColumns , column ) { \n\t\t\tHiveTableMeta . HiveTableColumnMeta $F24916 ( field , fieldsMap , column ) ; \n\t\t\tif ( field == null || ! isColumnCompatible ( column , field ) ) $F29791 ( violateColumns , column ) } \n\t\t} \n\treturn violateColumns ; \n\t} \n"}, {"code": "public static String makeUnifiedLineFeeds ( String query ) { \n\tif $F8908 ( query ) { \n\t\treturn query ; \n\t\t} \n\t$F80469 ( result , query ) for ( $F1088 ( i , query ) ) { \n\t\t$F1280 ( c , query , i ) $F92331 ( c ) result . append ( c ) ; \n\t\t} \n\t$F92 ( result ) } \n"}, {"code": "private void reflectMemberVariablesInLeftButton $F72 { \n\tfinal boolean lastPageReached = ( viewPager . getCurrentItem ( ) + NUM00 ) == pages . size ( ) ; \n\tfinal boolean buttonShouldBeInvisible = ( lastPageReached && disableLeftButtonOnLastPage ) || leftButtonDisabled ; \n\tfinal boolean buttonIsCurrentlyInvisible = leftButton . getVisibility ( ) == View . INVISIBLE ; \n\tfinal boolean shouldUpdateButton = buttonShouldBeInvisible != buttonIsCurrentlyInvisible ; \n\tif ( shouldUpdateButton ) { \n\t\tfinal Animator buttonAnimator = buttonShouldBeInvisible ? buttonAnimatorFactory . newLeftButtonDisappearAnimator ( leftButton ) : buttonAnimatorFactory . newLeftButtonAppearAnimator ( leftButton ) ; \n\t\t$F270375 ( buttonShouldBeInvisible , disableButton , buttonAnimator , leftButton , enableButton ) } \n\t} \n"}, {"code": "public static void registerSemiDisposableBlock ( String oreDictName ) $F207 ( semiDisposableBlocks , oreDictName ) "}, {"code": "public boolean acceptsTypeName ( String type ) $F298 ( _typeList , type ) "}, {"code": "public void deleteAsync $F110257 ( id , responseCallback ) throws IOException { \n\tdeleteObjectAsync ( id , responseCallback ) ; \n\t} \n"}, {"code": "private boolean continueAfterAcceptFailure ( Throwable t ) { \n\tRMIFailureHandler fh = RMISocketFactory . getFailureHandler ( ) ; \n\tif ( fh != null ) { \n\t\treturn fh . failure ( t instanceof Exception ? ( Exception ) t : new InvocationTargetException ( t ) ) ; \n\t\t} \n\telse $F27427 ( throttleLoopOnException , _BOOL ) } \n"}, {"code": "private static void processPackage ( String tbName , Packages pkg ) { \n\tString classNamePrefix = StringUtil . parseHumpName ( tbName , _BOOL , isHumpModelClass ) ; \n\tpkg . setDao ( packagePrefix + ( StringUtil . isEmpty ( packagePrefix ) || StringUtil . isEmpty ( packageDao ) ? NUM00 : NUM00 ) + packageDao ) ; \n\tpkg . setDaoName ( classNamePrefix + daoSuffix ) ; \n\tpkg . setModel ( packagePrefix + ( StringUtil . isEmpty ( packagePrefix ) || StringUtil . isEmpty ( packageModel ) ? NUM00 : NUM00 ) + packageModel ) ; \n\tpkg . setModelName ( classNamePrefix + modelSuffix ) ; \n\tpkg . setMapperXml ( packagePrefix + ( StringUtil . isEmpty ( packagePrefix ) || StringUtil . isEmpty ( packageMapperXml ) ? NUM00 : NUM00 ) + packageMapperXml ) ; \n\tpkg . setMapperXmlName ( classNamePrefix + mapperXmlSuffix ) ; \n\tpkg . setModelNameLowerFirst ( StringUtil . lowerFirst ( pkg . getModelName ( ) ) ) ; \n\t} \n"}, {"code": "public void addOnCentralPositionChangedListener ( OnCentralPositionChangedListener listener ) $F207 ( mOnCentralPositionChangedListeners , listener ) "}, {"code": "public boolean addCall $F19845 ( sourceClass , sourceMethod , targetClass , targetMethod ) { \n\tCallGraphEntry from = new CallGraphEntry ( targetClass , targetMethod ) ; \n\tCallGraphEntry to = new CallGraphEntry ( sourceClass , sourceMethod ) ; \n\tif $F1238 ( sourceClass , className ) cutNodes . add ( to ) ; \n\tif ( ! graph . containsEdge ( from , to ) ) { \n\t\tgraph . addEdge ( from , to ) ; \n\t\tcallGraphClasses . add ( $F2897 ( targetClass ) ) ; \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "private static void doThreadDump ( final HttpServletRequest req , final HttpServletResponse resp ) throws IOException { \n\tresp . setStatus ( HTTP_OK ) ; \n\tresp . addHeader ( NUM00 , NUM00 ) ; \n\tresp . setContentType ( MIME_TEXT_PLAIN ) ; \n\tfinal PrintWriter w = resp . getWriter ( ) ; \n\ttry { \n\t\tBigdataStatics . threadDump ( w ) ; \n\t\t$F1206 ( w ) } \n\tcatch ( Throwable t ) { \n\t\tlaunderThrowable ( t , resp , NUM00 ) ; \n\t\t} \n\t$F3229 ( w ) } \n"}, {"code": "public static boolean isValidNmtoken ( String nmtoken ) { \n\t$F11550 ( length , nmtoken ) $F6482 ( length , _BOOL ) for ( $F1316 ( i , length ) ) { \n\t\t$F1280 ( ch , nmtoken , i ) $F38676 ( isName , ch , _BOOL ) } \n\treturn _BOOL ; \n\t} \n"}, {"code": "public MMRoll ( MMRandom rng ) { \n\tsuper ( NUM00 , NUM00 ) ; \n\tthis . total = rng . randomInt ( this . faces ) + this . min ; \n\tall . addElement ( this . total ) ; \n\t} \n"}, {"code": "public void handleButton3Request ( RequestInvocationEvent event ) throws ModelControlException $F5795 ( returnToHomePage ) "}, {"code": "static $F4203 UnixStream $F4203 unixify $F51721 ( stream ) { \n\t$F10578 ( Objects , stream ) return new UnixStreamImpl $F200 ( stream ) ; \n\t} \n"}, {"code": "$F1309 public MediaFile ( File f ) { \n\tthis ( f . toPath ( ) , null ) ; \n\t} \n"}, {"code": "public static KeyStore load ( File keyStoreFile , Password password , KeyStoreType keyStoreType ) throws CryptoException , FileNotFoundException { \n\tif ( ! keyStoreType . isFileBased ( ) ) { \n\t\tthrow new CryptoException ( $F103511 ( MessageFormat , res , keyStoreType ) ) ; \n\t\t} \n\t$F4647 ( fis , keyStoreFile ) KeyStore keyStore = getKeyStoreInstance ( keyStoreType ) ; \n\ttry { \n\t\tkeyStore . load ( fis , password . toCharArray ( ) ) ; \n\t\t} \n\tcatch ( CertificateException ex ) { \n\t\tthrow new KeyStoreLoadException ( $F36702 ( MessageFormat , res , keyStoreType ) , ex , keyStoreType ) ; \n\t\t} \n\tcatch ( NoSuchAlgorithmException ex ) { \n\t\tthrow new KeyStoreLoadException ( $F36702 ( MessageFormat , res , keyStoreType ) , ex , keyStoreType ) ; \n\t\t} \n\tcatch ( FileNotFoundException ex ) { \n\t\tthrow ex ; \n\t\t} \n\tcatch ( IOException ex ) { \n\t\tthrow new KeyStoreLoadException ( $F36702 ( MessageFormat , res , keyStoreType ) , ex , keyStoreType ) ; \n\t\t} \n\t$F18090 ( IOUtils , fis ) return keyStore ; \n\t} \n"}, {"code": "public static String addToCartBulk ( HttpServletRequest request , HttpServletResponse response ) { \n\t$F10362 ( categoryId , request ) ShoppingCart cart = getCartObject ( request ) ; \n\t$F15914 ( delegator , request ) $F15918 ( dispatcher , request ) ShoppingCartHelper cartHelper = new ShoppingCartHelper ( delegator , dispatcher , cart ) ; \n\tString controlDirective ; \n\t$F15921 ( result ) $F529 paramMap = UtilHttp . getParameterMap ( request ) ; \n\tString catalogId = CatalogWorker . getCurrentCatalogId ( request ) ; \n\tresult = cartHelper . addToCartBulk ( catalogId , categoryId , paramMap ) ; \n\tcontrolDirective = processResult ( result , request ) ; \n\tif $F1238 ( controlDirective , ERROR ) $F2455 else $F2455 } \n"}, {"code": "public void dumpLog ( String containerId , File logFile ) throws DockerException , InterruptedException { \n\tLogStream errorStream = null ; \n\tFileChannel fileChannel = null ; \n\tFileOutputStream fileOutputStream = null ; \n\ttry { \n\t\t$F142821 ( logFile ) $F88727 ( logFile ) $F10893 ( fileOutputStream , logFile ) $F42861 ( fileChannel , fileOutputStream ) errorStream = dockerClient . logs ( containerId , LogsParam . stderr ( ) ) ; \n\t\twhile $F2921 ( errorStream ) { \n\t\t\tLogMessage message = errorStream . next ( ) ; \n\t\t\tByteBuffer buffer = message . content ( ) ; \n\t\t\tfileChannel . write ( buffer ) ; \n\t\t\t} \n\t\t} \n\tcatch ( FileNotFoundException e ) { \n\t\tthrow new DockerException ( NUM00 + logFile + NUM00 ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\tthrow new DockerException ( e ) ; \n\t\t} \n\tfinally { \n\t\t$F2727 ( errorStream ) if ( fileChannel != null ) { \n\t\t\ttry $F881 ( fileChannel ) $F5199 ( logger , e ) } \n\t\tif ( fileOutputStream != null ) { \n\t\t\ttry $F881 ( fileOutputStream ) $F5199 ( logger , e ) } \n\t\t} \n\t} \n"}, {"code": "public static final void warning ( String message , Throwable e ) { \n\tif ( message == null && e != null ) { \n\t\t$F5976 ( message , e ) } \n\tlogExpensive ( Level . WARNING , message , e ) ; \n\t} \n"}, {"code": "public static IndexedImage pack $F74721 ( rgb , width , height ) { \n\tint arrayLength = width * height ; \n\t$F11844 ( tempPalette ) int paletteLocation = NUM00 ; \n\tfor ( $F119 ( iter , arrayLength ) ) { \n\t\tint current = rgb [ iter ] ; \n\t\tif ( ! contains ( tempPalette , paletteLocation , current ) ) { \n\t\t\tif ( paletteLocation > NUM00 ) $F1337 tempPalette [ paletteLocation ] = current ; \n\t\t\tpaletteLocation ++ ; \n\t\t\t} \n\t\t} \n\tif ( paletteLocation != tempPalette . length ) { \n\t\t$F4120 ( newArray , paletteLocation ) $F135 ( System , tempPalette , newArray , paletteLocation ) tempPalette = newArray ; \n\t\t} \n\tIndexedImage i = new IndexedImage ( width , height , tempPalette , rgb ) ; \n\treturn i ; \n\t} \n"}, {"code": "public void addHint ( Component hintComponent , Component destinationComponent , String position ) { \n\thintComponent . putClientProperty ( POS , position ) ; \n\thintComponent . putClientProperty ( DEST , destinationComponent ) ; \n\tvec . addElement ( hintComponent ) ; \n\t} \n"}, {"code": "public static int convertSRGBtoLinearRGB ( int color ) { \n\tfloat input , output ; \n\tinput = color / NUM00 ; \n\tif ( input <= NUM00 ) { \n\t\toutput = input / NUM00 ; \n\t\t} \n\telse { \n\t\toutput = ( float ) Math . pow ( ( input + NUM00 ) / NUM00 , NUM00 ) ; \n\t\t} \n\treturn Math . round ( output * NUM00 ) ; \n\t} \n"}, {"code": "public void vetoableChange ( PropertyChangeEvent evt ) throws PropertyVetoException { \n\t$F17749 ( log , evt ) throw new PropertyVetoException ( NUM00 , evt ) ; \n\t} \n"}, {"code": "$F9749 ( namespace , attName , attValue , xmlWriter , registerPrefix ) "}, {"code": "public void finish $F72 throws SQLException { \n\t$F11282 ( statement , connection ) $F131050 ( statement ) $F59 ( statement ) $F2715 ( statement , connection ) $F131050 ( statement ) $F59 ( statement ) $F2715 ( statement , connection ) $F131050 ( statement ) $F59 ( statement ) $F2715 ( statement , connection ) $F131050 ( statement ) $F59 ( statement ) } \n"}, {"code": "$F1 public boolean contains ( Object object ) { \n\treturn indexOf ( object , NUM00 ) != - NUM00 ; \n\t} \n"}, {"code": "public void put ( E item ) throws InterruptedException { \n\tif $F972 ( done ) $F45619 ( queue , item ) } \n"}, {"code": "public AuthorizationCode ( String code , String resourceOwnerId , String clientId , String redirectUri , $F2689 scope , String claims , long expiryTime , String nonce , String realm , String authModules , String acr , String ssoTokenId , String codeChallenge , String codeChallengeMethod , String authGrantId , String auditId ) { \n\tsuper ( $F532 ) ; \n\tsetStringProperty ( ID , code ) ; \n\tsetStringProperty ( USERNAME , resourceOwnerId ) ; \n\tsetStringProperty ( CLIENT_ID , clientId ) ; \n\tsetStringProperty ( REDIRECT_URI , redirectUri ) ; \n\t$F141086 ( setStringProperty , EXPIRE_TIME , String , expiryTime ) put ( SCOPE , newList ( scope ) ) ; \n\tsetStringProperty ( TOKEN_TYPE , NUM00 ) ; \n\tsetStringProperty ( TOKEN_NAME , OAUTH_CODE_TYPE ) ; \n\tsetStringProperty ( NONCE , nonce ) ; \n\tsetStringProperty ( AUTH_MODULES , authModules ) ; \n\tsetStringProperty ( ACR , acr ) ; \n\tsetStringProperty ( CODE_CHALLENGE , codeChallenge ) ; \n\tsetStringProperty ( CODE_CHALLENGE_METHOD , codeChallengeMethod ) ; \n\tsetStringProperty ( AUTH_GRANT_ID , authGrantId ) ; \n\tsetStringProperty ( REALM , $F4250 ( realm ) ? NUM00 : realm ) ; \n\tsetStringProperty ( SSO_TOKEN_ID , ssoTokenId ) ; \n\tput ( CLAIMS , CollectionUtils . asList ( claims ) ) ; \n\tsetStringProperty ( AUDIT_TRACKING_ID , auditId ) ; \n\t} \n"}, {"code": "$F1 public Object draw ( Graphics2D g2 , Rectangle2D area , Object params ) { \n\tdraw ( g2 , area ) ; \n\t$F1274 } \n"}, {"code": "public void testSetBitPositiveInside3 $F72 $F105940 ( aSign , number , aNumber , aBytes , result , rBytes , resBytes , i , assertTrue , assertEquals ) "}, {"code": "public boolean isRowVisible ( int row ) { \n\tif ( row != - NUM00 ) { \n\t\tRectangle cellRect = getCellRect ( row , NUM00 , _BOOL ) ; \n\t\tRectangle visibleRect = getVisibleRect ( ) ; \n\t\treturn visibleRect . intersects ( cellRect ) ; \n\t\t} \n\telse return _BOOL ; \n\t} \n"}, {"code": "public void signalEvent $F72 { \n\tCollection < Semaphore > semaphores = _semaphores . values ( ) ; \n\tfor ( Semaphore semaphore : semaphores ) { \n\t\t$F33833 ( semaphore ) semaphores . remove ( semaphore ) ; \n\t\t} \n\t} \n"}, {"code": "public static int fileInTimeRange ( File f , Date start , Date end ) { \n\tlong time = getFileTime ( f ) ; \n\tif ( start != null && time < start . getTime ( ) ) $F7629 if ( end != null && time > end . getTime ( ) ) $F1083 $F1082 } \n"}, {"code": "$F663 ( currTime , System , elapsed , startTime , ZOOM_TIME , Math , interpolator ) "}, {"code": "public Object extFunction ( String ns , String funcName , Vector argVec , Object methodKey , ExpressionContext exprContext ) throws $F1872 { \n\tObject result = null ; \n\tif ( null != ns ) { \n\t\t$F308395 ( extNS , m_extensionFunctionNamespaces , ns ) if ( null != extNS ) { \n\t\t\ttry { \n\t\t\t\tresult = extNS . callFunction ( funcName , argVec , methodKey , exprContext ) ; \n\t\t\t\t} \n\t\t\tcatch ( $F1872 e ) { \n\t\t\t\tthrow e ; \n\t\t\t\t} \n\t\t\tcatch ( Exception e ) { \n\t\t\t\tthrow new $F1872 ( e ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tthrow new XPathProcessorException ( XSLMessages . createMessage ( XSLTErrorResources . ER_EXTENSION_FUNC_UNKNOWN , $F40356 ( ns , funcName ) ) ) ; \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "private synchronized void block ( boolean tf ) { \n\tif ( tf ) { \n\t\ttry { \n\t\t\tif ( m_buildThread . isAlive ( ) && m_state != IDLE ) $F5795 ( wait ) } \n\t\t$F34690 } \n\telse $F5795 ( notifyAll ) } \n"}, {"code": "public $F25925 onClass $F72 { \n\t$F25925 $F9626 ( targets ) ; \n\tfor ( OwlClass c : qcClasses ) { \n\t\ttargets . add ( c . getURI ( ) ) ; \n\t\t} \n\treturn targets ; \n\t} \n"}, {"code": "public static int indexOfChars $F68141 ( str , chars , fromIndex ) { \n\t$F22998 ( len , str ) for ( int pos = fromIndex ; \n\tpos < len ; \n\tpos ++ ) { \n\t\tif ( $F100167 ( chars , str , pos ) ) { \n\t\t\treturn pos ; \n\t\t\t} \n\t\t} \n\t$F150 } \n"}, {"code": "private synchronized void notifyZoomListeners ( ZoomEvent e ) { \n\tfor ( ZoomListener listener : mZoomListeners ) { \n\t\tlistener . zoomApplied ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public static String buildStringFromLines ( String ... lines ) { \n\tint numChars = lines . length ; \n\tfor ( String line : lines ) $F90434 ( numChars , line ) $F7542 ( builder , numChars ) for ( String line : lines ) $F444 ( builder , line ) $F92 ( builder ) } \n"}, {"code": "public void init $F72 { \n\t$F2329 ( mContext ) if $F2979 ( mName ) { \n\t\tmName = mContext . getPackageName ( ) ; \n\t\t} \n\tif ( mMode == INVALID_VALUE || ( mMode != MODE_PRIVATE && mMode != MODE_WORLD_READABLE && mMode != MODE_WORLD_WRITEABLE ) ) { \n\t\tmMode = MODE_PRIVATE ; \n\t\t} \n\tmSharedPreferences = mContext . getSharedPreferences ( mName , mMode ) ; \n\t} \n"}, {"code": "$F1 public void mergeAndOutputTransformationMetadata ( Iterator < DistinctValue > values , String outputDir , int colID , FileSystem fs , TfUtils agents ) throws IOException { \n\tdouble min = Double . MAX_VALUE ; \n\t$F259094 ( max , Double ) int nbins = NUM00 ; \n\tDistinctValue val = new DistinctValue $F72 ; \n\tString w = null ; \n\tdouble d ; \n\twhile $F2921 ( values ) { \n\t\t$F2268 ( val ) $F45366 ( val , values ) w = val . getWord ( ) ; \n\t\tif $F7311 ( w , MIN_PREFIX ) { \n\t\t\td = UtilFunctions . parseToDouble ( $F8182 ( w , MIN_PREFIX ) ) ; \n\t\t\t$F7547 ( d , min ) } \n\t\telse if $F7311 ( w , MAX_PREFIX ) { \n\t\t\td = UtilFunctions . parseToDouble ( $F8182 ( w , MAX_PREFIX ) ) ; \n\t\t\t$F15468 ( d , max ) } \n\t\telse if $F7311 ( w , NBINS_PREFIX ) { \n\t\t\tnbins = ( int ) UtilFunctions . parseToLong ( $F8182 ( w , NBINS_PREFIX ) ) ; \n\t\t\t} \n\t\telse $F1665 ( w ) } \n\tdouble binwidth = ( max - min ) / nbins ; \n\twriteTfMtd ( colID , Double . toString ( min ) , Double . toString ( max ) , Double . toString ( binwidth ) , Integer . toString ( nbins ) , outputDir , fs , agents ) ; \n\t} \n"}, {"code": "static SQLWarning convertShowWarningsToSQLWarnings ( Connection connection ) throws SQLException { \n\treturn convertShowWarningsToSQLWarnings ( connection , NUM00 , _BOOL ) ; \n\t} \n"}, {"code": "public boolean hasEmptyRow $F72 { \n\t$F19795 ( m_dataVector , _BOOL ) $F3803 $F7662 ( dataRow , m_dataVector ) ; \n\tfor ( String s : dataRow ) { \n\t\tif $F35625 ( s ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "$F29611 ( remaining , count , EMPTY_BYTE_ARRAY , pos , buf , buffers , c , Math , System , newbuf ) "}, {"code": "public Node selectSingleNode ( Node contextNode , String str , Node namespaceNode ) throws TransformerException { \n\tNodeIterator nl = selectNodeIterator ( contextNode , str , namespaceNode ) ; \n\treturn nl . nextNode ( ) ; \n\t} \n"}, {"code": "private static String javaScriptEscapeHelper ( String s , boolean escapeToAscii ) { \n\tStringBuilder sb = new StringBuilder ( $F9483 ( s ) / NUM00 ) ; \n\tfor ( $F1088 ( i , s ) ) { \n\t\t$F1280 ( c , s , i ) switch ( c ) { \n\t\t\t$F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F1262 appendHexJavaScriptRepresentation ( sb , c ) ; \n\t\t\t$F597 $F1262 $F1262 boolean isUnsafe = _BOOL ; \n\t\t\tfor ( String tag : UNSAFE_TAGS ) { \n\t\t\t\tif ( s . regionMatches ( _BOOL , i + NUM00 , tag , NUM00 , tag . length ( ) ) ) $F3468 ( isUnsafe , _BOOL ) } \n\t\t\tif ( isUnsafe ) { \n\t\t\t\tappendHexJavaScriptRepresentation ( sb , c ) ; \n\t\t\t\t} \n\t\t\telse $F288 ( sb , c ) $F597 $F1262 if $F350335 ( sb ) $F86 ( sb ) sb . append ( c ) ; \n\t\t\t$F597 $F2999 ( sb ) $F2999 ( sb ) $F1267 if ( c >= NUM00 && escapeToAscii ) { \n\t\t\t\tappendHexJavaScriptRepresentation ( sb , c ) ; \n\t\t\t\t} \n\t\t\telse $F288 ( sb , c ) } \n\t\t} \n\t$F92 ( sb ) } \n"}, {"code": "public synchronized void add ( String category , double value ) $F30090 ( mCategories , category , mValues , value ) "}, {"code": "public final void walkGraph ( Hashtable semNodesTable ) { \n\t$F16747 ( uid , myUID ) $F36819 ( semNodesTable , uid ) semNodesTable . put ( uid , this ) ; \n\tif ( assumeExpr != null ) { \n\t\tassumeExpr . walkGraph ( semNodesTable ) ; \n\t\t} \n\t; \n\t} \n"}, {"code": "private List < ValueComboBoxDataGroup > populateSymbolList $F60993 ( panelDetails ) { \n\tList < ValueComboBoxDataGroup > combinedSymbolList = new ArrayList < ValueComboBoxDataGroup > $F72 ; \n\tfor ( FieldState panel : symbolTypeFieldList ) { \n\t\tpanel . populateSymbolList ( panelDetails , combinedSymbolList ) ; \n\t\t} \n\treturn combinedSymbolList ; \n\t} \n"}, {"code": "$F1 public int hashCode $F72 { \n\tlong value = NUM00 ; \n\tvalue += NUM00 * value + Double . doubleToLongBits ( Math . abs ( x ) ) ; \n\tvalue += NUM00 * value + Double . doubleToLongBits ( Math . abs ( y ) ) ; \n\t$F73161 ( value ) } \n"}, {"code": "public void disconnect $F72 $F8075 ( socket ) "}, {"code": "protected void initComponentDefaults ( UIDefaults table ) { \n\tsuper . initComponentDefaults ( table ) ; \n\tColor c = table . getColor ( NUM00 ) ; \n\t$F545 ( table , c ) $F545 ( table , c ) } \n"}, {"code": "public int indexOfColumnName ( String columnName ) { \n\treturn columnNameList . indexOf ( columnName . toLowerCase ( ) ) ; \n\t} \n"}, {"code": "public boolean clear ( T expect , boolean allowReset ) { \n\t$F8934 ( sync ) try { \n\t\t$F35938 ( expect , value , _BOOL ) ValueState prev = state ; \n\t\tclear ( allowReset ) ; \n\t\treturn prev == ValueState . SET ; \n\t\t} \n\t$F796 ( sync ) } \n"}, {"code": "public void copyStream ( InputStream is ) throws IOException { \n\tsuper . setContentEncoding ( null ) ; \n\t$F1538 ( baos ) while ( _BOOL ) { \n\t\t$F7468 ( b , is ) if ( b == - NUM00 ) { \n\t\t\t$F3031 ( content , baos ) $F59 ( is ) $F665 } \n\t\t} \n\t} \n"}, {"code": "public void test_readResolve $F72 { \n\tMockAttributedCharacterIteratorAttribute mac1 = new MockAttributedCharacterIteratorAttribute $F580 ; \n\ttry { \n\t\tmac1 . readResolve ( ) ; \n\t\tfail ( NUM00 ) ; \n\t\t} \n\tcatch ( InvalidObjectException e ) $F845 ObjectOutputStream out = null ; \n\tObjectInputStream in = null ; \n\ttry { \n\t\t$F1538 ( bytes ) $F111162 ( out , bytes ) $F128895 attr1 , attr2 ; \n\t\tattr1 = AttributedCharacterIterator . Attribute . LANGUAGE ; \n\t\tout . writeObject ( attr1 ) ; \n\t\tin = new ObjectInputStream ( new ByteArrayInputStream $F87573 ( bytes ) ) ; \n\t\ttry { \n\t\t\tattr2 = ( $F128895 ) in . readObject ( ) ; \n\t\t\tassertSame ( NUM00 , attr1 , attr2 ) ; \n\t\t\t} \n\t\tcatch ( IllegalArgumentException e ) $F1328 ( fail , e ) } \n\tcatch ( IOException e ) $F1328 ( fail , e ) catch ( ClassNotFoundException e ) $F1328 ( fail , e ) finally { \n\t\ttry $F21231 ( out , in ) $F29052 } \n\t} \n"}, {"code": "public void interrupt $F72 { \n\t$F221512 ( t , threadVar ) $F36258 ( t ) $F725 ( threadVar ) } \n"}, {"code": "public final boolean isSecure ( Socket sock ) throws IllegalArgumentException { \n\t$F826 ( sock ) if ( sock . getClass ( ) != $F43259 ) $F825 $F43264 ( sock ) return _BOOL ; \n\t} \n"}, {"code": "protected boolean checkList ( String currentVal , String tokenValue ) { \n\tif ( currentVal == null || tokenValue == null ) $F895 if ( $F132005 ( currentVal ) ) $F825 boolean negation = currentVal . startsWith ( NUM00 ) ; \n\tString listName = $F58211 ( currentVal ) ; \n\t$F16628 ( listObj , listMap , listName ) $F397 ( listObj , _BOOL ) boolean contains ; \n\tif ( listObj instanceof Set ) { \n\t\t$F2689 set = ( Set ) listObj ; \n\t\tcontains = set . contains ( tokenValue ) ; \n\t\t} \n\telse $F18931 ( listObj ) return ! ( contains && negation || ! contains && ! negation ) ; \n\t} \n"}, {"code": "public static synchronized void addNativeLibraryDependencies $F71933 ( name , dependencyNames ) { \n\t$F64948 ( list , libraryDependencies , name ) if ( list == null ) { \n\t\tlibraryDependencies . put ( name , $F8726 ( list ) ) ; \n\t\t} \n\tfor ( String dependencyName : dependencyNames ) $F2202 ( list , dependencyName ) } \n"}, {"code": "$F1 protected boolean hasOverflow ( FlatRStarTreeNode node ) { \n\tif ( node . isLeaf ( ) ) { \n\t\treturn node . getNumEntries ( ) == leafCapacity ; \n\t\t} \n\telse if ( node . getNumEntries ( ) == node . getCapacity ( ) ) { \n\t\tnode . increaseEntries ( ) ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void processVolumeExpansion ( StorageSystem storageSystem , URI storagePoolURI , URI volumeId , $F50603 outArgs ) throws Exception { \n\tStringBuilder logMsgBuilder = new StringBuilder ( String . format ( NUM00 ) ) ; \n\tCimConnection connection = _cimConnection . getConnection ( storageSystem ) ; \n\tWBEMClient client = connection . getCimClient ( ) ; \n\tStoragePool storagePool = _dbClient . queryObject ( StoragePool . class , storagePoolURI ) ; \n\tStringMap reservationMap = storagePool . getReservedCapacityMap ( ) ; \n\treservationMap . remove ( volumeId . toString ( ) ) ; \n\tupdateStoragePoolCapacity ( client , storagePool ) ; \n\t_dbClient . persistObject ( storagePool ) ; \n\t$F8544 ( volume , _dbClient , volumeId ) CIMObjectPath volumePath = ( CIMObjectPath ) _cimPath . getFromOutputArgs ( outArgs , IBMSmisConstants . CP_THE_ELEMENT ) ; \n\tboolean isSuccess = _BOOL ; \n\tif ( volumePath != null ) { \n\t\tCIMInstance volumeInstance = client . getInstance ( volumePath , _BOOL , _BOOL , null ) ; \n\t\tif ( volumeInstance != null ) { \n\t\t\tisSuccess = _BOOL ; \n\t\t\tvolume . setProvisionedCapacity ( getProvisionedCapacityInformation ( volumeInstance ) ) ; \n\t\t\tvolume . setAllocatedCapacity ( getAllocatedCapacityInformation ( client , volumeInstance ) ) ; \n\t\t\t_dbClient . persistObject ( volume ) ; \n\t\t\tlogMsgBuilder . append ( String . format ( NUM00 , volume . getCapacity ( ) , volume . getProvisionedCapacity ( ) , volume . getAllocatedCapacity ( ) ) ) ; \n\t\t\t} \n\t\t} \n\tif ( ! isSuccess ) { \n\t\tUnsignedInteger32 returnCoede = ( UnsignedInteger32 ) _cimPath . getFromOutputArgs ( outArgs , IBMSmisConstants . CP_RETURN_CODE ) ; \n\t\t$F84 ( logMsgBuilder ) logMsgBuilder . append ( String . format ( NUM00 , volume . getId ( ) , returnCoede . toString ( ) ) ) ; \n\t\t} \n\t$F17749 ( _log , logMsgBuilder ) } \n"}, {"code": "void updateFromNativeNode ( Node node , boolean fromScratch ) throws IIOInvalidTreeException { \n\t$F32683 ( attrs , node ) if ( $F72501 ( attrs ) ) { \n\t\tint value = getAttributeValue ( node , attrs , NUM00 , NUM00 , NUM00 , _BOOL ) ; \n\t\tmajorVersion = ( value != - NUM00 ) ? value : majorVersion ; \n\t\tvalue = getAttributeValue ( node , attrs , NUM00 , NUM00 , NUM00 , _BOOL ) ; \n\t\tminorVersion = ( value != - NUM00 ) ? value : minorVersion ; \n\t\tvalue = getAttributeValue ( node , attrs , NUM00 , NUM00 , NUM00 , _BOOL ) ; \n\t\tresUnits = ( value != - NUM00 ) ? value : resUnits ; \n\t\tvalue = getAttributeValue ( node , attrs , NUM00 , NUM00 , NUM00 , _BOOL ) ; \n\t\tXdensity = ( value != - NUM00 ) ? value : Xdensity ; \n\t\tvalue = getAttributeValue ( node , attrs , NUM00 , NUM00 , NUM00 , _BOOL ) ; \n\t\tYdensity = ( value != - NUM00 ) ? value : Ydensity ; \n\t\tvalue = getAttributeValue ( node , attrs , NUM00 , NUM00 , NUM00 , _BOOL ) ; \n\t\tthumbWidth = ( value != - NUM00 ) ? value : thumbWidth ; \n\t\tvalue = getAttributeValue ( node , attrs , NUM00 , NUM00 , NUM00 , _BOOL ) ; \n\t\tthumbHeight = ( value != - NUM00 ) ? value : thumbHeight ; \n\t\t} \n\tif $F49521 ( node ) { \n\t\t$F9040 ( children , node ) $F19322 ( count , children ) if ( count > NUM00 ) { \n\t\t\tthrow new IIOInvalidTreeException ( NUM00 , node ) ; \n\t\t\t} \n\t\tfor ( $F119 ( i , count ) ) { \n\t\t\t$F61359 ( child , children , i ) $F48115 ( name , child ) if $F3057 ( name ) { \n\t\t\t\tif ( $F5973 ( extSegments ) && fromScratch ) { \n\t\t\t\t\tthrow new IIOInvalidTreeException ( NUM00 , node ) ; \n\t\t\t\t\t} \n\t\t\t\t$F9040 ( exts , child ) $F19322 ( extCount , exts ) for ( $F119 ( j , extCount ) ) { \n\t\t\t\t\t$F61359 ( ext , exts , j ) extSegments . add ( new JFIFExtensionMarkerSegment ( ext ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tif $F3057 ( name ) { \n\t\t\t\tif ( ( iccSegment != null ) && fromScratch ) { \n\t\t\t\t\tthrow new IIOInvalidTreeException ( NUM00 , node ) ; \n\t\t\t\t\t} \n\t\t\t\ticcSegment = new ICCMarkerSegment ( child ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void addBestTestSuite ( File newlyGeneratedTestSuite ) { \n\tString testName = extractClassName ( tmpTests , newlyGeneratedTestSuite ) ; \n\tString path = testName . replace ( NUM00 , File . separator ) + NUM00 ; \n\tFile file = new File ( getBestTestFolder ( ) + File . separator + path ) ; \n\t$F1900 ( file ) try { \n\t\tFileUtils . copyFile ( newlyGeneratedTestSuite , file ) ; \n\t\t} \n\tcatch ( IOException e ) $F36592 ( logger , e ) } \n"}, {"code": "$F1 public void createConnectionFactory ( String name , boolean ha , boolean useDiscovery , int cfType , String connectors , String bindings ) throws Exception { \n\tcreateConnectionFactory ( name , ha , useDiscovery , cfType , toArray ( connectors ) , toArray ( bindings ) ) ; \n\t} \n"}, {"code": "protected Object evaluateSingle ( List elements , String expr ) { \n\tList array ; \n\tif ( elements instanceof $F11420 ) { \n\t\tarray = new $F11420 $F72 ; \n\t\t} \n\telse $F13242 ( array ) for ( $F2774 ( e , elements ) ) { \n\t\t$F8877 ( o , e ) if ( o instanceof StructuredContent ) { \n\t\t\tif ( ( o = evaluateSingle ( ( StructuredContent ) o , expr ) ) != null ) $F207 ( array , o ) } \n\t\t} \n\tif $F10471 ( array ) { \n\t\treturn ( StructuredContent ) array . get ( NUM00 ) ; \n\t\t} \n\treturn array ; \n\t} \n"}, {"code": "protected void onClose $F72 $F845 "}, {"code": "private int doScale ( int number , double factor ) { \n\treturn ( int ) StrictMath . round ( number * factor ) ; \n\t} \n"}, {"code": "private int parseMessageId $F4741 ( b , off ) throws ParseException { \n\tfinal int messageIdLen = Constants . MESSAGE_ID_LEN ; \n\tfinal int len = b . length - off ; \n\tif ( len >= messageIdLen ) { \n\t\tmessageId_ = Arrays . copyOfRange ( b , off , off + messageIdLen ) ; \n\t\treturn messageIdLen ; \n\t\t} \n\telse { \n\t\tthrow new ParseException $F580 ; \n\t\t} \n\t} \n"}, {"code": "static void generateCharacterClass ( String theTemplateFileName , String theOutputFileName ) throws $F27136 { \n\t$F51387 ( in , theTemplateFileName ) PrintWriter out = new PrintWriter ( new BufferedWriter ( new FileWriter ( theOutputFileName ) ) ) ; \n\tout . println ( commentStart + NUM00 + new $F22273 $F72 + commentEnd ) ; \n\t$F1749 ( marklen , commandMarker ) LOOP : while ( _BOOL ) { \n\t\ttry { \n\t\t\t$F27015 ( line , in ) if ( line == null ) break LOOP ; \n\t\t\tint pos = NUM00 ; \n\t\t\tint depth = NUM00 ; \n\t\t\twhile ( $F150770 ( pos , line , commandMarker ) >= NUM00 ) { \n\t\t\t\tint newpos = pos + marklen ; \n\t\t\t\tchar ch = NUM00 ; \n\t\t\t\tSCAN : while ( newpos < line . length ( ) && ( Character . isJavaIdentifierStart ( ch = line . charAt ( newpos ) ) || ch == NUM00 || ( ch == NUM00 && depth > NUM00 ) ) ) { \n\t\t\t\t\t++ newpos ; \n\t\t\t\t\tif ( ch == NUM00 ) { \n\t\t\t\t\t\t++ depth ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse if ( ch == NUM00 ) { \n\t\t\t\t\t\t-- depth ; \n\t\t\t\t\t\tif ( depth == NUM00 ) break SCAN ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\tString replacement = replaceCommand ( line . substring ( pos + marklen , newpos ) ) ; \n\t\t\t\tline = line . substring ( NUM00 , pos ) + replacement + line . substring ( newpos ) ; \n\t\t\t\t$F90433 ( pos , replacement ) } \n\t\t\tout . println ( line ) ; \n\t\t\t} \n\t\tcatch ( IOException e ) { \n\t\t\tbreak LOOP ; \n\t\t\t} \n\t\t} \n\t$F59 ( in ) $F59 ( out ) } \n"}, {"code": "public static String combineExtensions $F68855 ( extensions ) { \n\t$F18062 ( Check , extensions ) $F3239 ( ret ) for ( $F1139 ( i , extensions ) ) $F70285 ( i , ret , extensions ) $F92 ( ret ) } \n"}, {"code": "public static void initializeProperties ( String file ) throws MissingResourceException { \n\t$F2697 ( props ) ResourceBundle bundle = ResourceBundle . getBundle ( file ) ; \n\tfor ( $F3465 ( key , bundle ) ) { \n\t\tprops . put ( key , bundle . getString ( key ) ) ; \n\t\t} \n\tinitializeProperties ( props , _BOOL , _BOOL ) ; \n\t} \n"}, {"code": "$F108235 ( f , first , n , item , last , count , notFull ) "}, {"code": "private String tweakNativeLaunchUri ( String uri , boolean forDebugging , LaunchInfo launchInfo ) throws IOException , FileNotFoundException { \n\tif ( launchInfo . isHttpOrAbout ( ) ) { \n\t\tboolean modify = ( getPreference ( PREF_URI_MODIFICATION ) != NUM00 ) ; \n\t\tif ( modify && forDebugging && ! launchInfo . isAbout ( ) ) { \n\t\t\turi = URLHelper . escapeSpace ( uri ) ; \n\t\t\tURLHelper urlHelper = new URLHelper ( uri ) ; \n\t\t\t$F2539 params = urlHelper . getParameterMap ( ) ; \n\t\t\t$F16824 ( params ) urlHelper . setParameterMap ( params ) ; \n\t\t\turi = urlHelper . getURL ( ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tFile f = null ; \n\t\tif $F3106 ( uri ) { \n\t\t\ttry { \n\t\t\t\tf = new File ( new URI ( uri ) ) ; \n\t\t\t\t} \n\t\t\tcatch ( URISyntaxException e ) { \n\t\t\t\tIOException ioe = new IOException $F1783 ( e ) ; \n\t\t\t\tioe . initCause ( e ) ; \n\t\t\t\tthrow ioe ; \n\t\t\t\t} \n\t\t\t} \n\t\telse $F94463 ( f , uri ) if $F102275 ( f ) $F48783 ( uri , f ) else { \n\t\t\tthrow new FileNotFoundException ( uri ) ; \n\t\t\t} \n\t\t} \n\treturn uri ; \n\t} \n"}, {"code": "public void addListener ( final Listener listener ) $F207 ( listeners , listener ) "}, {"code": "public $F5675 queryAsList $F72 { \n\tQuantumFluxCursor $F4203 cursor = queryAsCursor ( ) ; \n\ttry { \n\t\t$F5675 resultList = new $F201 $F90762 ( cursor ) ; \n\t\twhile $F12260 ( cursor ) { \n\t\t\tresultList . add ( cursor . inflate ( ) ) ; \n\t\t\t} \n\t\treturn resultList ; \n\t\t} \n\t$F48674 ( cursor ) } \n"}, {"code": "$F1 public void profile $F72 $F5795 ( recordStats ) "}, {"code": "public static void touch ( File file ) throws IOException { \n\tif $F1906 ( file ) { \n\t\tOutputStream out = openOutputStream ( file ) ; \n\t\tIOUtils . closeQuietly ( out ) ; \n\t\t} \n\tboolean success = $F266936 ( file , System ) ; \n\t$F252414 ( success , file ) } \n"}, {"code": "$F18907 ( extOrdering ) "}, {"code": "public static $F96 ivCipherConcat $F7233 ( iv , cipherText ) { \n\t$F148496 ( combined , iv , cipherText ) $F7057 ( System , iv , combined ) $F11244 ( System , cipherText , combined , iv ) return combined ; \n\t} \n"}, {"code": "public static final void saveInstanceIdentifier ( String confPath , String instanceIdentifier ) throws Exception { \n\tPath file = Paths . get ( confPath , INSTANCE_IDENTIFIER_FILE ) ; \n\t$F55609 ( log , file ) AtomicSave . execute ( file . toString ( ) , NUM00 , $F43004 ( instanceIdentifier , StandardCharsets ) ) ; \n\t} \n"}, {"code": "Part ( String contents , String property ) throws Exception { \n\tthis . contents = NUM00 + contents ; \n\tthis . property = property ; \n\tsimplify ( ) ; \n\t} \n"}, {"code": "public static boolean isSame ( Object s1 , Object s2 ) { \n\tif ( s1 == s2 ) return _BOOL ; \n\tif ( X . isEmpty ( s1 ) && X . isEmpty ( s2 ) ) return _BOOL ; \n\tif ( s1 != null ) $F23588 ( s1 , s2 ) return _BOOL ; \n\t} \n"}, {"code": "public static double standardDeviation ( double variance ) { \n\t$F41531 ( Math , variance ) } \n"}, {"code": "public static int frequencyToMIDINote ( double aFrequency ) { \n\tdouble r = NUM00 ; \n\tdouble ref = NUM00 ; \n\tint supinf = NUM00 ; \n\tint i = NUM00 ; \n\tdouble hautnb = NUM00 ; \n\tdouble ref1 = NUM00 ; \n\tdouble ref2 = NUM00 ; \n\tdouble flag = NUM00 ; \n\tint nmidi = NUM00 ; \n\twhile ( aFrequency < ref ) { \n\t\tref = Math . floor ( NUM00 * ref / r ) / NUM00 ; \n\t\ti = i + NUM00 ; \n\t\tsupinf = - NUM00 ; \n\t\tflag = NUM00 ; \n\t\tref1 = ref ; \n\t\t} \n\twhile ( aFrequency > ref ) { \n\t\tref = Math . floor ( NUM00 * ref * r ) / NUM00 ; \n\t\ti = i - NUM00 ; \n\t\tsupinf = NUM00 ; \n\t\tref2 = ref ; \n\t\t} \n\tif ( Math . abs ( aFrequency - ref1 ) < Math . abs ( aFrequency - ref2 ) ) { \n\t\tsupinf = - NUM00 ; \n\t\ti = i + NUM00 ; \n\t\t} \n\telse { \n\t\tif ( flag == NUM00 ) supinf = - NUM00 ; \n\t\t} \n\tif ( ref1 == NUM00 ) { \n\t\tref1 = Math . floor ( NUM00 * ref / r ) / NUM00 ; \n\t\tif ( Math . abs ( aFrequency - ref1 ) < Math . abs ( aFrequency - ref2 ) ) { \n\t\t\ti = i + NUM00 ; \n\t\t\tsupinf = NUM00 ; \n\t\t\t} \n\t\t} \n\t$F15467 ( i , Math ) while ( i -- != NUM00 ) { \n\t\tif ( ( hautnb == NUM00 && supinf == - NUM00 ) || ( hautnb == NUM00 && supinf == NUM00 ) ) { \n\t\t\tif ( supinf == NUM00 ) hautnb = NUM00 ; \n\t\t\tif ( supinf == - NUM00 ) hautnb = NUM00 ; \n\t\t\t} \n\t\thautnb = hautnb + supinf ; \n\t\tnmidi = nmidi + supinf ; \n\t\t} \n\treturn nmidi ; \n\t} \n"}, {"code": "$F9749 ( namespace , attName , attValue , xmlWriter , registerPrefix ) "}, {"code": "public void recordGCVersions ( RegionVersionVector $F4203 other ) { \n\tassert other . memberToGCVersion != null : NUM00 ; \n\trecordGCVersion ( other . myId , other . localGCVersion . get ( ) ) ; \n\tfor ( Map . Entry < T , Long > entry : other . memberToGCVersion . entrySet ( ) ) { \n\t\trecordGCVersion ( entry . getKey ( ) , entry . getValue ( ) . longValue ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "boolean waitForState ( Processor p , int state ) { \n\tsynchronized ( waitSync ) { \n\t\ttry { \n\t\t\twhile ( p . getState ( ) < state && stateTransitionOK ) $F18604 ( waitSync ) } \n\t\t$F3957 } \n\treturn stateTransitionOK ; \n\t} \n"}, {"code": "private static boolean extractFile $F75578 ( c , rootAsset , path ) { \n\tAssetManager assetManager = c . getAssets ( ) ; \n\tInputStream in = null ; \n\tOutputStream out = null ; \n\ttry { \n\t\tin = assetManager . open ( rootAsset + path ) ; \n\t\tString fullPath = PrefStore . getEnvDir ( c ) + path ; \n\t\t$F10893 ( out , fullPath ) $F12496 ( buffer ) int read ; \n\t\twhile $F96840 ( read , in , buffer ) $F29756 ( out , buffer , read ) $F1206 ( out ) } \n\t$F132878 ( e , _BOOL ) $F15722 ( close , in , out ) return _BOOL ; \n\t} \n"}, {"code": "protected int never $F72 { \n\tsynchronized ( sleepLock ) { \n\t\twhile ( running ) { \n\t\t\ttry { \n\t\t\t\tsleepLock . wait ( $F264 ) ; \n\t\t\t\t} \n\t\t\tcatch ( InterruptedException e ) $F1448 } \n\t\t$F1082 } \n\t} \n"}, {"code": "public boolean verify ( X509Certificate cert , Provider sigProvider ) throws NoSuchAlgorithmException , CertificateExpiredException , CertificateNotYetValidException , CMSException { \n\tTime signingTime = getSigningTime ( ) ; \n\tif ( signingTime != null ) { \n\t\tcert . checkValidity ( signingTime . getDate ( ) ) ; \n\t\t} \n\treturn doVerify ( cert . getPublicKey ( ) , sigProvider ) ; \n\t} \n"}, {"code": "public static _Fields findByThriftId ( int fieldId ) { \n\tswitch ( fieldId ) { \n\t\t$F3366 return MESSAGE_TYPE ; \n\t\t$F3366 return REQUEST_INFO ; \n\t\t$F3366 return RESPONSE_INFO ; \n\t\t$F3366 return TRACE_INFO ; \n\t\t$F3366 return GLOBAL_CONTEXT ; \n\t\t$F3366 return LOCAL_CONTEXT ; \n\t\t$F3366 return HEARTBEAT_INFO ; \n\t\t$F20809 } \n\t} \n"}, {"code": "protected void loadHistory ( boolean set ) { \n\tBufferedInputStream str ; \n\tFile file ; \n\tint width ; \n\tint height ; \n\ttry { \n\t\tfile = new File ( getHistoryFilename ( ) ) ; \n\t\tif $F3428 ( file ) { \n\t\t\tstr = new BufferedInputStream ( new FileInputStream ( getHistoryFilename ( ) ) ) ; \n\t\t\tm_History . load ( str ) ; \n\t\t\t} \n\t\t} \n\t$F1516 ( e ) if ( set ) { \n\t\tm_ConnectionPanel . setHistory ( stringToModel ( m_History . getProperty ( ConnectionPanel . HISTORY_NAME , NUM00 ) ) ) ; \n\t\tm_QueryPanel . setHistory ( stringToModel ( m_History . getProperty ( QueryPanel . HISTORY_NAME , NUM00 ) ) ) ; \n\t\tm_QueryPanel . setMaxRows ( Integer . parseInt ( m_History . getProperty ( QueryPanel . MAX_ROWS , NUM00 ) ) ) ; \n\t\twidth = Integer . parseInt ( m_History . getProperty ( WIDTH , NUM00 ) ) ; \n\t\theight = Integer . parseInt ( m_History . getProperty ( HEIGHT , NUM00 ) ) ; \n\t\tif ( ( width != NUM00 ) && ( height != NUM00 ) ) { \n\t\t\tsetPreferredSize ( new Dimension ( width , height ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void updatePanelForExpansion ( float percentage ) { \n\tupdatePromoVisibility ( NUM00 ) ; \n\tfloat baseBaseY = MathUtils . interpolate ( NUM00 , getBasePageTargetY ( ) , percentage ) ; \n\tmBasePageY = baseBaseY ; \n\tfloat brightness = MathUtils . interpolate ( BASE_PAGE_BRIGHTNESS_STATE_PEEKED , BASE_PAGE_BRIGHTNESS_STATE_EXPANDED , percentage ) ; \n\tmBasePageBrightness = brightness ; \n\tfloat searchBarHeight = Math . round ( MathUtils . interpolate ( mSearchBarHeightPeeking , getSearchBarHeightExpanded ( ) , percentage ) ) ; \n\tmSearchBarHeight = searchBarHeight ; \n\tmSearchBarTextOpacity = NUM00 ; \n\tmIsSearchBarBorderVisible = _BOOL ; \n\tmSearchBarBorderY = searchBarHeight - SEARCH_BAR_BORDER_HEIGHT_DP + NUM00 ; \n\tmSearchIconOpacity = SEARCH_ICON_OPACITY_STATE_EXPANDED ; \n\tmArrowIconOpacity = ARROW_ICON_OPACITY_STATE_EXPANDED ; \n\tmArrowIconRotation = Math . round ( MathUtils . interpolate ( ARROW_ICON_ROTATION_STATE_PEEKED , ARROW_ICON_ROTATION_STATE_EXPANDED , percentage ) ) ; \n\tmCloseIconOpacity = CLOSE_ICON_OPACITY_STATE_EXPANDED ; \n\tfloat peekedHeight = getPanelHeightFromState ( PanelState . PEEKED ) ; \n\tfloat threshold = PROGRESS_BAR_VISIBILITY_THRESHOLD_DP / mPxToDp ; \n\tfloat diff = Math . min ( mHeight - peekedHeight , threshold ) ; \n\tfloat progressBarOpacity = MathUtils . interpolate ( NUM00 , NUM00 , diff / threshold ) ; \n\tmProgressBarOpacity = progressBarOpacity ; \n\tmProgressBarY = searchBarHeight - PROGRESS_BAR_HEIGHT_DP + NUM00 ; \n\tupdateSearchBarShadow ( ) ; \n\t} \n"}, {"code": "protected $F8748 updateableClusterer $F72 { \n\t$F125783 ( result ) print ( NUM00 ) ; \n\tif ( m_Clusterer instanceof UpdateableClusterer ) $F125784 ( println , result , _BOOL ) else $F125784 ( println , result , _BOOL ) return result ; \n\t} \n"}, {"code": "$F30491 ( key , value , bitmapSize , getBitmapSize ) "}, {"code": "public void addField ( MappedMember mm ) $F207 ( fields , mm ) "}, {"code": "public static List $F11034 readAndConvertMessageLog ( final File selectedFile ) throws SpyException { \n\tfinal $F3803 lines = FileUtils . readFileAsLines ( selectedFile ) ; \n\tlogger . info ( NUM00 , lines . size ( ) , selectedFile . getAbsoluteFile ( ) ) ; \n\treturn processMessageLog ( parseMessageLog ( lines , null , NUM00 , NUM00 ) , null , NUM00 , NUM00 ) ; \n\t} \n"}, {"code": "void readStream ( InputStream is ) throws Exception { \n\tString line ; \n\t$F6357 ( start ) $F58550 ( reader , is ) while ( ( line = reader . readLine ( ) ) != null && ! mStop ) { \n\t\tmResults . append ( line ) ; \n\t\tmResults . append ( Tools . LineSep ) ; \n\t\t$F6357 ( end ) if ( ( $F265 ( end , start ) ) / NUM00 > NUM00 || $F20 ( mResults ) ) { \n\t\t\tstart = end ; \n\t\t\t$F24867 ( last , mResults ) if ( last != - NUM00 ) { \n\t\t\t\tXmppMsg msg = new XmppMsg ( _font ) ; \n\t\t\t\tmsg . append ( $F1399 ( mResults , last ) ) ; \n\t\t\t\tmCmdBase . send ( mShellId , msg ) ; \n\t\t\t\t$F4910 ( mResults ) } \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F35807 ( name , _BOOL ) "}, {"code": "public void removeParentRelation ( long osmId ) { \n\tif ( parentRelations != null ) { \n\t\t$F87774 tempRelList = new $F87774 ( parentRelations ) ; \n\t\tfor ( Relation r : tempRelList ) { \n\t\t\tif ( osmId == r . getOsmId ( ) ) parentRelations . remove ( r ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public final void test_ROUNDTRIP_GetKeySpecCipher01 $F72 { \n\tboolean performed = _BOOL ; \n\tfor ( $F1139 ( i , algName ) ) { \n\t\ttry { \n\t\t\t$F75160 ( g , algName , i , privateKeyInfo ) EncryptedPrivateKeyInfo epki ; \n\t\t\t$F71324 ( g , epki , algName , i ) try { \n\t\t\t\tPKCS8EncodedKeySpec eks = epki . getKeySpec ( g . c ( ) ) ; \n\t\t\t\tif ( ! $F75165 ( Arrays , privateKeyInfo , eks ) ) { \n\t\t\t\t\t$F71332 ( fail , algName , i ) } \n\t\t\t\t} \n\t\t\tcatch ( InvalidKeySpecException e ) { \n\t\t\t\tfail ( algName [ i ] [ NUM00 ] + NUM00 + algName [ i ] [ NUM00 ] + e + NUM00 ) ; \n\t\t\t\t} \n\t\t\tperformed = _BOOL ; \n\t\t\t} \n\t\t$F75179 catch ( NoSuchAlgorithmException allowed ) $F845 } \n\tassertTrue ( NUM00 , performed ) ; \n\t} \n"}, {"code": "$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel ) "}, {"code": "void insert ( V val , K key ) { \n\t$F215316 list = map . get ( val ) ; \n\tif ( list == null ) { \n\t\tlist = new $F215316 $F989 ; \n\t\tmap . put ( cloneValue ( val ) , list ) ; \n\t\t} \n\tlist . add ( key ) ; \n\t} \n"}, {"code": "public ServerSocket createServerSocket ( int nport , int backlog ) throws IOException $F25228 ( createServerSocket , nport , backlog ) "}, {"code": "public static $F15272 convertStringArrayToIntegerArray $F24643 ( arrayList ) { \n\t$F63609 ( integers ) for ( String str : arrayList ) { \n\t\t$F269561 ( integers , Integer , str ) } \n\treturn integers ; \n\t} \n"}, {"code": "$F1 public void unwrapSSLv2 $F97 ( bytes ) $F5795 ( unexpectedMessage ) "}, {"code": "public static String buildSelectorFromClass ( String classValue ) { \n\t$F83 ( strb ) strb . append ( CLASS_SELECTOR_PREFIX ) ; \n\tstrb . append ( classValue ) ; \n\t$F92 ( strb ) } \n"}, {"code": "public void ensureCapacity ( int minimumCapacity ) { \n\tif ( minimumCapacity > value . length ) { \n\t\tint ourMin = value . length * NUM00 + NUM00 ; \n\t\tenlargeBuffer ( Math . max ( ourMin , minimumCapacity ) ) ; \n\t\t} \n\t} \n"}, {"code": "public String poolFooterStatements $F72 { \n\t$F83 ( sb ) for ( String footerStatement : footerStatements ) $F7227 ( sb , footerStatement ) $F725 ( footerStatements ) $F92 ( sb ) } \n"}, {"code": "private void handleNodeQueue ( SerialMessage incomingMessage ) { \n\tif ( currentStage == ZWaveNodeInitStage . DONE ) $F932 logger . debug ( NUM00 , node . getNodeId ( ) , msgQueue . size ( ) ) ; \n\tif $F105 ( msgQueue , incomingMessage ) { \n\t\tmsgQueue . remove ( incomingMessage ) ; \n\t\tlogger . debug ( NUM00 , node . getNodeId ( ) , msgQueue . size ( ) ) ; \n\t\tfreeToSend = _BOOL ; \n\t\tadvanceNodeStage ( incomingMessage . getMessageClass ( ) ) ; \n\t\t} \n\telse if ( msgQueue . isEmpty ( ) && currentStage == ZWaveNodeInitStage . SECURITY_REPORT ) { \n\t\tlogger . debug ( NUM00 , node . getNodeId ( ) ) ; \n\t\tadvanceNodeStage ( incomingMessage . getMessageClass ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F142035 matches ( final String regexp ) { \n\t$F10578 ( Objects , regexp ) $F1274 } \n"}, {"code": "public boolean hasSet ( String name ) $F69736 ( m_map , name ) "}, {"code": "$F1322 ( criteria , oredCriteria ) "}, {"code": "public void clearParsers $F72 { \n\t$F5191 ( timer ) clearParserNoticeHighlights ( ) ; \n\t$F725 ( parsers ) textArea . fireParserNoticesChange ( ) ; \n\t} \n"}, {"code": "protected PropertyDefinition ( AbstractManagedObjectDefinition $F5162 d , $F20474 theClass , String propertyName , EnumSet < PropertyOption > options , AdministratorAction adminAction , DefaultBehaviorProvider $F4203 defaultBehavior ) { \n\tReject . ifNull ( d , theClass , propertyName , options , adminAction , defaultBehavior ) ; \n\tthis . definition = d ; \n\tthis . theClass = theClass ; \n\tthis . propertyName = propertyName ; \n\tthis . options = EnumSet . copyOf ( options ) ; \n\tthis . adminAction = adminAction ; \n\tthis . defaultBehavior = defaultBehavior ; \n\t} \n"}, {"code": "$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel ) "}, {"code": "$F48525 ( n , d , scale , i , sb , j , rGen , points ) "}, {"code": "public DateTimeParseException ( String message , CharSequence parsedData , int errorIndex , Throwable cause ) { \n\tsuper ( message , cause ) ; \n\tthis . parsedString = parsedData . toString ( ) ; \n\tthis . errorIndex = errorIndex ; \n\t} \n"}, {"code": "public ConfigureXmlAttributeCountDialog_NB ( XmlAttributeCount xmlAttributeCount ) { \n\tthis . xmlAttributeCount = xmlAttributeCount ; \n\tinitComponents ( ) ; \n\tfinal IterateModel numberOfTagsIterator = xmlAttributeCount . getNumberOfAttributesIterator ( ) ; \n\tconfigureIterateModel_NB2 . setStartAt ( String . valueOf ( numberOfTagsIterator . getStartAt ( ) ) ) ; \n\tconfigureIterateModel_NB2 . setStopAt ( String . valueOf ( numberOfTagsIterator . getStopAt ( ) ) ) ; \n\tconfigureIterateModel_NB2 . setIncrement ( String . valueOf ( numberOfTagsIterator . getIncrement ( ) ) ) ; \n\tconfigureIterateModel_NB2 . setIterateStrategie ( numberOfTagsIterator . getIterateStrategie ( ) ) ; \n\t$F3803 names = Arrays . asList ( xmlAttributeCount . getNames ( ) ) ; \n\tconfigureStringList_NB1 . setStringList ( names ) ; \n\t} \n"}, {"code": "$F178575 ( expression , errorMessage , String ) "}, {"code": "public void onMenuDismissed $F72 { \n\tmReloadMenuItem = null ; \n\t} \n"}, {"code": "public static Thread consumeProcessOutputStream ( Process self , OutputStream output ) { \n\tThread thread = new Thread ( new ByteDumper ( self . getInputStream ( ) , output ) ) ; \n\t$F2346 ( thread ) return thread ; \n\t} \n"}, {"code": "public static Angle greatCircleAzimuth ( LatLon p1 , LatLon p2 ) { \n\tif $F54923 ( p1 , p2 ) $F825 $F3545 ( lat1 , p1 ) $F3549 ( lon1 , p1 ) $F3545 ( lat2 , p2 ) $F3549 ( lon2 , p2 ) if ( lat1 == lat2 && lon1 == lon2 ) return Angle . ZERO ; \n\tif ( lon1 == lon2 ) return lat1 > lat2 ? Angle . POS180 : Angle . ZERO ; \n\tdouble y = Math . cos ( lat2 ) * Math . sin ( lon2 - lon1 ) ; \n\tdouble x = Math . cos ( lat1 ) * Math . sin ( lat2 ) - Math . sin ( lat1 ) * Math . cos ( lat2 ) * Math . cos ( lon2 - lon1 ) ; \n\t$F3567 ( azimuthRadians , Math , y , x ) return Double . isNaN ( azimuthRadians ) ? Angle . ZERO : Angle . fromRadians ( azimuthRadians ) ; \n\t} \n"}, {"code": "$F10188 ( close , Util , directory ) "}, {"code": "public void addAllTagsOf ( Host h ) { \n\tList < Tag > tags = h . getTags ( ) ; \n\t$F8504 ( tags ) if ( mTagList == null ) { \n\t\tmTagList = new ArrayList < Tag > $F716 ( tags ) ; \n\t\t} \n\tmTagList . addAll ( tags ) ; \n\t} \n"}, {"code": "public static boolean isNumbersWithPunctuation ( String token ) { \n\tboolean hasDigit = _BOOL ; \n\t$F1749 ( len , token ) for ( $F1316 ( i , len ) ) { \n\t\t$F1280 ( c , token , i ) hasDigit = hasDigit || Character . isDigit ( c ) ; \n\t\tif ( ! ( Character . isDigit ( c ) || Characters . isPunctuation ( c ) ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn hasDigit ; \n\t} \n"}, {"code": "private boolean isPaintLineSeperators ( JComponent c ) { \n\tboolean paintLines = c instanceof JTextArea ; \n\t$F27462 ( globalOverride , System ) if $F22 ( globalOverride ) $F59984 ( paintLines , Boolean , globalOverride ) Boolean overrideProperty = ( Boolean ) c . getClientProperty ( NUM00 ) ; \n\t$F57733 ( overrideProperty , paintLines ) return paintLines ; \n\t} \n"}, {"code": "public static Db open ( DataSource ds ) { \n\ttry { \n\t\treturn new Db ( ds . getConnection ( ) ) ; \n\t\t} \n\t$F44917 ( convert , e ) } \n"}, {"code": "$F1 public void basicPutPart3 ( EntryEventImpl event , RegionEntry entry , boolean isInitialized , long lastModified , boolean invokeCallbacks , boolean ifNew , boolean ifOld , Object expectedOldValue , boolean requireOldValue ) { \n\tdistributeUpdate ( event , lastModified , _BOOL , _BOOL , null , _BOOL ) ; \n\tsuper . basicPutPart3 ( event , entry , isInitialized , lastModified , invokeCallbacks , ifNew , ifOld , expectedOldValue , requireOldValue ) ; \n\t} \n"}, {"code": "public LanguageRange ( String range ) { \n\tthis . range = range . split ( NUM00 ) ; \n\tfull = range ; \n\t} \n"}, {"code": "protected void removeContainer $F72 throws Throwable { \n\t$F2329 ( containerId ) sendDeleteContainerRequest ( ) ; \n\twaitForPropertyValue ( provisioningTaskLink , MockTaskState . class , NUM00 , TaskState . TaskStage . FINISHED ) ; \n\tif $F931 ( isMockTarget ) $F31130 ( Thread ) verifyContainerDoesNotExist ( containerId ) ; \n\t} \n"}, {"code": "$F1654 ( list ) "}, {"code": "public TransformerHandler newTransformerHandler ( Templates templates ) throws TransformerConfigurationException { \n\ttry { \n\t\tTransformerImpl transformer = ( TransformerImpl ) templates . newTransformer ( ) ; \n\t\ttransformer . setURIResolver ( m_uriResolver ) ; \n\t\tTransformerHandler th = ( TransformerHandler ) transformer . getInputContentHandler ( _BOOL ) ; \n\t\treturn th ; \n\t\t} \n\tcatch ( TransformerConfigurationException ex ) { \n\t\tif ( m_errorListener != null ) { \n\t\t\ttry { \n\t\t\t\tm_errorListener . fatalError ( ex ) ; \n\t\t\t\t$F1274 } \n\t\t\tcatch ( TransformerConfigurationException ex1 ) { \n\t\t\t\tthrow ex1 ; \n\t\t\t\t} \n\t\t\tcatch ( TransformerException ex1 ) { \n\t\t\t\tthrow new TransformerConfigurationException ( ex1 ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tthrow ex ; \n\t\t} \n\t} \n"}, {"code": "public void addField ( FieldRef fref ) $F207 ( mFieldRefs , fref ) "}, {"code": "public String render ( ValueExpr theExpr ) throws Exception { \n\treset ( ) ; \n\ttheExpr . visit ( this ) ; \n\t$F92 ( mBuffer ) } \n"}, {"code": "public void add ( final Vector2D [ ] bLoop ) throws MathIllegalArgumentException { \n\tadd ( new NestedLoops ( bLoop , tolerance ) ) ; \n\t} \n"}, {"code": "$F1113 public static $F4203 $F5675 asList ( $F5466 final $F7922 expression , $F1113 final $F20474 elementClass ) { \n\tif $F21545 ( expression ) $F12523 ( Collections ) final $F5675 result = new $F5676 $F72 ; \n\tfor ( final Object element : expression ) { \n\t\tfinal T toAdd = as ( element , elementClass ) ; \n\t\t$F1140 ( toAdd , result ) } \n\treturn result ; \n\t} \n"}, {"code": "$F41325 ( in , result , _BOOL , c , length ) "}, {"code": "private void startNewTransition $F72 { \n\t$F933 ( hasBounds ) mCurrentTrans = mTransGen . generateNextTransition ( mDrawableRect , mViewportRect ) ; \n\tmElapsedTime = NUM00 ; \n\t$F3224 ( mLastFrameTime , System ) fireTransitionStart ( mCurrentTrans ) ; \n\t} \n"}, {"code": "$F1 protected void makeFinished $F72 { \n\t$F96 verify_data ; \n\tif $F181997 ( serverHello ) { \n\t\t$F46945 ( verify_data ) computerVerifyDataTLS ( NUM00 , verify_data ) ; \n\t\t} \n\telse { \n\t\t$F46945 ( verify_data ) computerVerifyDataSSLv3 ( SSLv3Constants . client , verify_data ) ; \n\t\t} \n\tclientFinished = new Finished ( verify_data ) ; \n\tsend ( clientFinished ) ; \n\tif ( isResuming ) { \n\t\t$F182009 ( session , System ) status = FINISHED ; \n\t\t} \n\telse { \n\t\tif $F181997 ( serverHello ) $F1210 ( computerReferenceVerifyDataTLS ) else { \n\t\t\tcomputerReferenceVerifyDataSSLv3 ( SSLv3Constants . server ) ; \n\t\t\t} \n\t\tstatus = NEED_UNWRAP ; \n\t\t} \n\t} \n"}, {"code": "public static File removeExtension ( File file ) { \n\t$F22814 ( absolutePath , file ) if $F3578 ( absolutePath ) { \n\t\treturn new File ( $F129389 ( absolutePath ) ) ; \n\t\t} \n\telse { \n\t\treturn file ; \n\t\t} \n\t} \n"}, {"code": "public void update $F72 { \n\tif ( bgIsOpaque ) { \n\t\tint w = Math . max ( getSize ( ) . width , minWidth ) ; \n\t\tint h = Math . max ( getSize ( ) . height , minHeight ) ; \n\t\toffScr = createImage ( w , h ) ; \n\t\t$F8249 ( offScr ) $F27516 ( g , offScr ) drawInto ( g ) ; \n\t\trepaint ( ) ; \n\t\t$F355 ( g ) } \n\telse $F5795 ( repaint ) } \n"}, {"code": "public static final int readInt ( InputStream is ) throws IOException { \n\treturn ( ( ( NUM00 & is . read ( ) ) < < NUM00 ) | ( NUM00 & is . read ( ) ) ) ; \n\t} \n"}, {"code": "private void saveDynamicActions ( FacesContext context , StateContext stateContext , $F2100 ( stateMap ) ) { \n\tif $F14148 ( LOGGER , Level ) { \n\t\t$F47560 ( LOGGER ) } \n\tList < ComponentStruct > actions = stateContext . getDynamicActions ( ) ; \n\tHashMap < String , UIComponent > componentMap = stateContext . getDynamicComponents ( ) ; \n\tif ( actions != null ) { \n\t\t$F6689 $F719 ( savedActions , actions ) ; \n\t\tfor ( ComponentStruct action : actions ) { \n\t\t\tUIComponent component = componentMap . get ( action . clientId ) ; \n\t\t\tif ( component == null && context . isProjectStage ( ProjectStage . Development ) ) { \n\t\t\t\tLOGGER . log ( Level . WARNING , NUM00 , action . clientId ) ; \n\t\t\t\t} \n\t\t\tif ( component != null ) { \n\t\t\t\tsavedActions . add ( action . saveState ( context ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tstateMap . put ( DYNAMIC_ACTIONS , savedActions ) ; \n\t\t} \n\t} \n"}, {"code": "private Instance generateExample ( Instances format , Random randomG , SubspaceClusterDefinition cl , String cName ) { \n\tboolean makeInteger = cl . isInteger ( ) ; \n\tint num = - NUM00 ; \n\tInstance example = null ; \n\tint numAtts = m_NumAttributes ; \n\tif ( getClassFlag ( ) ) { \n\t\tnumAtts ++ ; \n\t\t} \n\texample = new DenseInstance ( numAtts ) ; \n\texample . setDataset ( format ) ; \n\t$F8748 attributes = cl . getAttributes ( ) ; \n\t$F1986 minValue = cl . getMinValue ( ) ; \n\t$F1986 maxValue = cl . getMaxValue ( ) ; \n\tdouble value ; \n\tint clusterI = - NUM00 ; \n\tfor ( $F119 ( i , m_NumAttributes ) ) { \n\t\tif ( attributes [ i ] ) { \n\t\t\tclusterI ++ ; \n\t\t\tnum ++ ; \n\t\t\tif $F41536 ( isBoolean , i , isNominal ) { \n\t\t\t\tif ( minValue [ clusterI ] == maxValue [ clusterI ] ) { \n\t\t\t\t\tvalue = minValue [ clusterI ] ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tint numValues = ( int ) ( maxValue [ clusterI ] - minValue [ clusterI ] + NUM00 ) ; \n\t\t\t\t\tvalue = randomG . nextInt ( numValues ) ; \n\t\t\t\t\tvalue += minValue [ clusterI ] ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tvalue = randomG . nextDouble ( ) * $F17318 ( maxValue , num , minValue ) + minValue [ num ] ; \n\t\t\t\tif ( makeInteger ) { \n\t\t\t\t\t$F142988 ( value , Math ) } \n\t\t\t\t} \n\t\t\texample . setValue ( i , value ) ; \n\t\t\t} \n\t\telse { \n\t\t\texample . setMissing ( i ) ; \n\t\t\t} \n\t\t} \n\tif ( getClassFlag ( ) ) { \n\t\texample . setClassValue ( cName ) ; \n\t\t} \n\treturn example ; \n\t} \n"}, {"code": "$F1 public long skip ( long n ) { \n\t$F20450 ( n ) if $F11984 ( idx , charSequence ) $F7629 int dest = ( int ) Math . min ( charSequence . length ( ) , idx + n ) ; \n\tint count = dest - idx ; \n\tidx = dest ; \n\treturn count ; \n\t} \n"}, {"code": "$F1 public void clear $F72 { \n\tif ( elementCount > NUM00 ) { \n\t\telementCount = NUM00 ; \n\t\t$F17838 ( Arrays , elementData ) modCount ++ ; \n\t\twhile ( referenceQueue . poll ( ) != null ) $F845 } \n\t} \n"}, {"code": "public DefaultConsolePanel $F72 { \n\tsetLayout ( new BorderLayout $F32532 ) ; \n\ttextPane = new JTextArea $F72 ; \n\ttextPane . setRows ( NUM00 ) ; \n\ttextPane . setEditable ( _BOOL ) ; \n\t$F114437 ( jp , textPane ) add ( jp , BorderLayout . CENTER ) ; \n\t} \n"}, {"code": "public void push $F72 { \n\t$F722 ( level ) cloned = _BOOL ; \n\t} \n"}, {"code": "private static void loadPluginsFromClassLoader ( ClassLoader classLoader ) { \n\tServiceLoader < GDSFactoryPlugin > pluginLoader = ServiceLoader . load ( GDSFactoryPlugin . class , classLoader ) ; \n\tfor ( GDSFactoryPlugin plugin : pluginLoader ) { \n\t\tregisterPlugin ( plugin ) ; \n\t\t} \n\t} \n"}, {"code": "$F9863 ( child , dx , dy , _BOOL , checkHorizontal , mCallback , checkVertical , mTouchSlop , Math ) "}, {"code": "public String redo $F72 { \n\tif $F931 ( canRedo ) $F2455 m_nCurrentEditAction ++ ; \n\tUndoAction undoAction = m_undoStack . get ( m_nCurrentEditAction ) ; \n\tm_bNeedsUndoAction = _BOOL ; \n\tundoAction . redo ( ) ; \n\tm_bNeedsUndoAction = _BOOL ; \n\treturn undoAction . getRedoMsg ( ) ; \n\t} \n"}, {"code": "$F663 ( currTime , System , elapsed , startTime , ZOOM_TIME , Math , interpolator ) "}, {"code": "$F31780 ( value , builder , this ) "}, {"code": "$F1 public InetSocketAddress ipLocal $F72 { \n\tSocketChannel s = _channel ; \n\tif ( s != null ) { \n\t\ttry { \n\t\t\treturn ( InetSocketAddress ) s . getLocalAddress ( ) ; \n\t\t\t} \n\t\t$F12153 ( e ) } \n\telse $F1337 } \n"}, {"code": "$F2304 private static NodeDisk findNodeDisk ( String diskId , List < NodeDisk > nodeDisks , String nodeName ) throws IOException { \n\tNodeDisk selected = null ; \n\tfor ( NodeDisk nodeDisk : nodeDisks ) { \n\t\tif ( diskId . equals ( nodeDisk . getDiskRefId ( ) ) ) $F3468 ( selected , nodeDisk ) } \n\tif ( selected == null ) { \n\t\tString message = format ( NUM00 , nodeName , diskId ) ; \n\t\tthrow new AbortException ( message ) ; \n\t\t} \n\tif ( selected . getNodeMountPoint ( ) == null ) { \n\t\tString message = format ( NUM00 , nodeName , diskId ) ; \n\t\tthrow new AbortException ( message ) ; \n\t\t} \n\treturn selected ; \n\t} \n"}, {"code": "private int stripMultipartHeaders $F5474 ( b , offset ) { \n\tint i = NUM00 ; \n\tfor ( i = offset ; \n\ti < b . length ; \n\ti ++ ) { \n\t\tif ( b [ i ] == NUM00 && b [ ++ i ] == NUM00 && b [ ++ i ] == NUM00 && b [ ++ i ] == NUM00 ) $F597 } \n\treturn i + NUM00 ; \n\t} \n"}, {"code": "void seek ( int position ) throws IOException { \n\tmDexFile . seek ( position ) ; \n\t} \n"}, {"code": "$F1 public $F100709 columns $F72 { \n\treturn columnList ; \n\t} \n"}, {"code": "public static void writeFloat ( DataOutputStream dos , boolean isBigEndian , float val ) throws IOException { \n\tif ( ! isBigEndian ) { \n\t\twriteLittleEndianFloat ( dos , val ) ; \n\t\t} \n\telse { \n\t\tdos . writeFloat ( val ) ; \n\t\t} \n\t} \n"}, {"code": "public void testFlipBitPositiveInside1 $F72 { \n\t$F17888 int aSign = NUM00 ; \n\tint number = NUM00 ; \n\tbyte $F3018 = { \n\t\tNUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 } \n\t; \n\t$F3023 ( aNumber , aSign , aBytes ) $F103435 ( result , aNumber , number ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) } \n"}, {"code": "public static void main $F4374 ( args ) { \n\t$F4375 ( Log ) try { \n\t\tint num_user = NUM00 ; \n\t\t$F4377 ( calendar , Calendar ) boolean trace_flag = _BOOL ; \n\t\tCloudSim . init ( num_user , calendar , trace_flag ) ; \n\t\t$F15317 ( datacenter0 , createDatacenter ) DatacenterBroker broker = createBroker ( ) ; \n\t\t$F4379 ( brokerId , broker ) $F4385 ( vmlist ) int vmid = NUM00 ; \n\t\tint mips = NUM00 ; \n\t\tlong size = NUM00 ; \n\t\tint ram = NUM00 ; \n\t\tlong bw = NUM00 ; \n\t\tint pesNumber = NUM00 ; \n\t\tString vmm = NUM00 ; \n\t\t$F4394 ( vm1 , vmid , brokerId , mips , pesNumber , ram , bw , size , vmm ) vmid ++ ; \n\t\tVm vm2 = new Vm ( vmid , brokerId , mips * NUM00 , pesNumber , ram , bw , size , vmm , new CloudletSchedulerTimeShared $F72 ) ; \n\t\tvmlist . add ( vm1 ) ; \n\t\tvmlist . add ( vm2 ) ; \n\t\tbroker . submitVmList ( vmlist ) ; \n\t\t$F4400 ( cloudletList ) int id = NUM00 ; \n\t\tlong length = NUM00 ; \n\t\tlong fileSize = NUM00 ; \n\t\tlong outputSize = NUM00 ; \n\t\t$F4405 ( utilizationModel ) $F4410 ( cloudlet1 , id , length , pesNumber , fileSize , outputSize , utilizationModel ) cloudlet1 . setUserId ( brokerId ) ; \n\t\tid ++ ; \n\t\t$F4410 ( cloudlet2 , id , length , pesNumber , fileSize , outputSize , utilizationModel ) cloudlet2 . setUserId ( brokerId ) ; \n\t\tcloudletList . add ( cloudlet1 ) ; \n\t\tcloudletList . add ( cloudlet2 ) ; \n\t\tbroker . submitCloudletList ( cloudletList ) ; \n\t\t$F4413 ( broker , cloudlet1 , vm1 ) $F4413 ( broker , cloudlet2 , vm2 ) $F4417 ( CloudSim ) $F4420 ( newList , broker ) $F4421 ( CloudSim ) printCloudletList ( newList ) ; \n\t\t$F4375 ( Log ) } \n\t$F4424 ( e , Log ) } \n"}, {"code": "public static Instruction _osrHelper ( Instruction barrier , GenerationContext gc ) { \n\tInstruction inst = OsrPoint . create ( YIELDPOINT_OSR , null , NUM00 ) ; \n\tgc . saveOSRBarrierForInst ( barrier , inst ) ; \n\treturn inst ; \n\t} \n"}, {"code": "protected void initializeState ( S current ) { \n\tInitializationUtils . initialize ( current ) ; \n\tif ( current . documentExpirationTimeMicros <= NUM00 ) { \n\t\tcurrent . documentExpirationTimeMicros = ServiceUtils . computeExpirationTime ( ServiceUtils . DEFAULT_DOC_EXPIRATION_TIME_MICROS ) ; \n\t\t} \n\t} \n"}, {"code": "$F1431 public InputStream fetchVolumeStats ( final Argument argument , $F87266 ( keyMap ) , int index ) throws VNXFilePluginException { \n\t$F973 ( _logger ) InputStream iStream = null ; \n\tList < QueryStats > statList = new ArrayList < QueryStats > $F72 ; \n\ttry { \n\t\t$F2689 movers = ( $F2689 ) keyMap . get ( VNXFileConstants . MOVERLIST ) ; \n\t\tif $F45081 ( movers ) { \n\t\t\tfor ( String moverID : movers ) { \n\t\t\t\tQueryStats queryStats = new QueryStats $F72 ; \n\t\t\t\tVolumeStatsSetQueryParams params = new VolumeStatsSetQueryParams $F72 ; \n\t\t\t\tparams . setStatsSet ( VolumeStatsSetType . ALL ) ; \n\t\t\t\tparams . setMover ( moverID ) ; \n\t\t\t\tqueryStats . setVolumeStats ( params ) ; \n\t\t\t\tstatList . add ( queryStats ) ; \n\t\t\t\t} \n\t\t\tiStream = _vnxFileInputRequestBuilder . getMultiRequestQueryStatsPacket ( statList ) ; \n\t\t\t} \n\t\telse $F21338 ( _logger ) } \n\tcatch ( JAXBException jaxbException ) { \n\t\tthrow new VNXFilePluginException $F73374 ( jaxbException ) ; \n\t\t} \n\treturn iStream ; \n\t} \n"}, {"code": "private static boolean isDirectory ( URL url ) { \n\t$F323682 ( file , url ) return $F350335 ( file ) ; \n\t} \n"}, {"code": "$F1 public final String readUTF $F72 throws IOException { \n\treturn dis . readUTF ( ) ; \n\t} \n"}, {"code": "$F5466 public static NetworkParameters fromID ( String id ) { \n\tif $F1238 ( id , ID_MAINNET ) $F1522 ( MainNetParams ) else if $F1238 ( id , ID_TESTNET ) $F1522 ( TestNet3Params ) else if $F1238 ( id , ID_UNITTESTNET ) $F1522 ( UnitTestParams ) else $F1337 } \n"}, {"code": "final synchronized void releaseSocket $F72 { \n\trunning = _BOOL ; \n\t$F7589 ( sender ) $F725 ( outboundMessages ) $F39863 ( socket ) maximumTransmissionUnit = NUM00 ; \n\t} \n"}, {"code": "public boolean addPart ( PduPart part ) { \n\t$F160092 ( part ) putPartToMaps ( part ) ; \n\t$F20805 ( mParts , part ) } \n"}, {"code": "public String codeOwner ( List < CodeOwner > codeOwners ) { \n\tlong currentUnix = $F165576 ( System ) ; \n\tdouble best = NUM00 ; \n\tString owner = NUM00 ; \n\tfor ( CodeOwner codeOwner : codeOwners ) { \n\t\tdouble age = ( currentUnix - codeOwner . getMostRecentUnixCommitTimestamp ( ) ) / NUM00 / NUM00 ; \n\t\tdouble calc = codeOwner . getNoLines ( ) / Math . pow ( ( age ) , NUM00 ) ; \n\t\tif ( calc > best ) { \n\t\t\tbest = calc ; \n\t\t\t$F32928 ( owner , codeOwner ) } \n\t\t} \n\treturn owner ; \n\t} \n"}, {"code": "private ArrayList < CellRecord > processNeighbors ( final CellRecord serving , final PositionRecord cellPos ) { \n\tfinal ArrayList < CellRecord > $F204 ( neighbors ) ; \n\tfinal ArrayList < NeighboringCellInfo > neighboringCellInfos = ( ArrayList < NeighboringCellInfo > ) mTelephonyManager . getNeighboringCellInfo ( ) ; \n\tif ( serving == null ) $F31008 ( Log , TAG , neighbors ) if ( neighboringCellInfos == null ) { \n\t\t$F1594 ( Log , TAG ) return neighbors ; \n\t\t} \n\tfor ( final NeighboringCellInfo ci : neighboringCellInfos ) { \n\t\tfinal boolean skip = ! isValidNeigbor ( ci ) ; \n\t\tif ( ! skip ) { \n\t\t\tfinal CellRecord neighbor = new CellRecord ( mSessionId ) ; \n\t\t\tneighbor . setOpenBmapTimestamp ( cellPos . getOpenBmapTimestamp ( ) ) ; \n\t\t\tneighbor . setBeginPosition ( cellPos ) ; \n\t\t\tneighbor . setEndPosition ( cellPos ) ; \n\t\t\tneighbor . setIsServing ( _BOOL ) ; \n\t\t\tneighbor . setIsNeighbor ( _BOOL ) ; \n\t\t\tneighbor . setMnc ( serving . getMnc ( ) ) ; \n\t\t\tneighbor . setMcc ( serving . getMcc ( ) ) ; \n\t\t\tneighbor . setOperator ( serving . getOperator ( ) ) ; \n\t\t\tneighbor . setOperatorName ( serving . getOperatorName ( ) ) ; \n\t\t\tfinal int networkType = ci . getNetworkType ( ) ; \n\t\t\tneighbor . setNetworkType ( networkType ) ; \n\t\t\tif ( networkType == TelephonyManager . NETWORK_TYPE_GPRS || networkType == TelephonyManager . NETWORK_TYPE_EDGE ) { \n\t\t\t\tneighbor . setIsCdma ( _BOOL ) ; \n\t\t\t\tneighbor . setLogicalCellId ( ci . getCid ( ) ) ; \n\t\t\t\tneighbor . setArea ( ci . getLac ( ) ) ; \n\t\t\t\tneighbor . setStrengthdBm ( - NUM00 + NUM00 * ci . getRssi ( ) ) ; \n\t\t\t\tneighbor . setStrengthAsu ( ci . getRssi ( ) ) ; \n\t\t\t\t} \n\t\t\telse if ( networkType == TelephonyManager . NETWORK_TYPE_UMTS || networkType == TelephonyManager . NETWORK_TYPE_HSDPA || networkType == TelephonyManager . NETWORK_TYPE_HSUPA || networkType == TelephonyManager . NETWORK_TYPE_HSPA ) { \n\t\t\t\tneighbor . setIsCdma ( _BOOL ) ; \n\t\t\t\tneighbor . setPsc ( ci . getPsc ( ) ) ; \n\t\t\t\tneighbor . setStrengthdBm ( ci . getRssi ( ) ) ; \n\t\t\t\tfinal int asu = ( int ) Math . round ( ( ci . getRssi ( ) + NUM00 ) / NUM00 ) ; \n\t\t\t\tneighbor . setStrengthAsu ( asu ) ; \n\t\t\t\t} \n\t\t\telse if ( networkType == TelephonyManager . NETWORK_TYPE_CDMA ) { \n\t\t\t\tneighbor . setIsCdma ( _BOOL ) ; \n\t\t\t\t} \n\t\t\tneighbors . add ( neighbor ) ; \n\t\t\t} \n\t\t} \n\treturn neighbors ; \n\t} \n"}, {"code": "public Map read ( SSOToken token , String objName ) throws $F16995 { \n\t$F20313 ( objName ) $F7876 ( objKey , objName ) Map attrMap = null ; \n\tmRWLock . readRequest ( ) ; \n\ttry { \n\t\t$F7601 ( filepath , mNameMap , objKey ) if ( filepath == null ) { \n\t\t\tif $F6299 ( mDebug ) $F235771 ( mDebug , objName ) } \n\t\telse { \n\t\t\t$F1705 ( filehandle , filepath ) Properties props = null ; \n\t\t\ttry { \n\t\t\t\tprops = loadProperties ( filehandle , objName ) ; \n\t\t\t\t} \n\t\t\tcatch ( ServiceNotFoundException e ) $F845 if ( props != null ) { \n\t\t\t\t$F195097 ( attrMap ) ; \n\t\t\t\t$F80571 ( keys , props ) ; \n\t\t\t\twhile $F1444 ( keys ) { \n\t\t\t\t\t$F14952 ( key , keys ) $F7601 ( vals , props , key ) if $F23754 ( vals ) { \n\t\t\t\t\t\tattrMap . put ( key , toValSet ( key , vals ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tfinally { \n\t\tmRWLock . readDone ( ) ; \n\t\t} \n\treturn attrMap ; \n\t} \n"}, {"code": "public static double parseDouble ( String s ) { \n\t$F1382 ( s ) $F115 ( length , s ) if ( length == NUM00 ) $F79286 ( invalidReal , s , _BOOL ) char last = s . charAt ( length - NUM00 ) ; \n\tif $F37111 ( last ) $F8587 ( parseName , s , _BOOL ) StringExponentPair info = initialParse ( s , length , _BOOL ) ; \n\tif ( info . infinity || info . zero ) { \n\t\treturn info . specialValue ( ) ; \n\t\t} \n\tdouble result = parseDblImpl ( info . s , ( int ) info . e ) ; \n\tif ( Double . doubleToLongBits ( result ) == NUM00 ) $F79286 ( invalidReal , s , _BOOL ) return info . negative ? - result : result ; \n\t} \n"}, {"code": "public byte readByte $F72 throws IOException { \n\t$F1544 ( v , dataInput ) offset += NUM00 ; \n\tavailable -= NUM00 ; \n\treturn v ; \n\t} \n"}, {"code": "$F194408 ( n , d , i , sb , j , rGen , points ) "}, {"code": "private String verifyRestoreCode ( String restoreCode , String code ) { \n\t$F4158 ( code ) $F4158 ( restoreCode ) boolean validCode = passwordManager . matches ( code , restoreCode ) ; \n\treturn validCode ? null : NUM00 + code + NUM00 + restoreCode + NUM00 ; \n\t} \n"}, {"code": "public static void appendPaddedInteger ( StringBuffer buf , long value , int size ) { \n\t$F29204 ( intValue , value ) if ( intValue == value ) { \n\t\tappendPaddedInteger ( buf , intValue , size ) ; \n\t\t} \n\telse if ( size <= NUM00 ) { \n\t\t$F42779 ( buf , Long , value ) } \n\telse { \n\t\tif ( value < NUM00 ) { \n\t\t\t$F84 ( buf ) if ( value != Long . MIN_VALUE ) $F52810 ( value ) else { \n\t\t\t\tfor ( ; \n\t\t\t\tsize > NUM00 ; \n\t\t\t\tsize -- ) $F86 ( buf ) $F84 ( buf ) $F665 } \n\t\t\t} \n\t\tint digits = ( int ) $F159551 ( Math , value , LOG_10 ) + NUM00 ; \n\t\tfor ( ; \n\t\tsize > digits ; \n\t\tsize -- ) $F86 ( buf ) $F42779 ( buf , Long , value ) } \n\t} \n"}, {"code": "$F1 public void flush $F72 { \n\tif $F5973 ( queue ) { \n\t\tList < AlertStreamEvent > $F204 ( events ) ; \n\t\tqueue . drainTo ( events ) ; \n\t\t$F22620 ( events ) $F11057 ( LOG , events ) } \n\tlastFlushTime . set ( System . currentTimeMillis ( ) ) ; \n\t} \n"}, {"code": "$F1 public void addUndoPoint $F72 { \n\tFile tempFile ; \n\tObjectOutputStream oos ; \n\t$F933 ( isUndoEnabled ) if $F89491 ( getInstances ) { \n\t\ttry { \n\t\t\ttempFile = File . createTempFile ( NUM00 , null ) ; \n\t\t\t$F60829 ( tempFile ) oos = $F20341 ( tempFile ) ; \n\t\t\toos . writeObject ( getInstances ( ) ) ; \n\t\t\t$F1206 ( oos ) $F59 ( oos ) m_UndoList . add ( tempFile ) ; \n\t\t\t} \n\t\t$F1516 ( e ) } \n\t} \n"}, {"code": "public final void addChildNode ( RowRegexExprNode childNode ) $F207 ( childNodes , childNode ) "}, {"code": "private $F3803 makeList $F74419 ( strings ) { \n\t$F67013 ( result ) $F42002 ( string , strings , result ) return result ; \n\t} \n"}, {"code": "protected boolean isLevelEnabled ( int logLevel ) { \n\treturn ( logLevel >= currentLogLevel ) ; \n\t} \n"}, {"code": "public int numberOfShardsWithState ( ShardRoutingState ... states ) { \n\tint count = NUM00 ; \n\tfor ( ShardRouting shardEntry : this ) { \n\t\tfor ( ShardRoutingState state : states ) { \n\t\t\tif ( shardEntry . state ( ) == state ) { \n\t\t\t\tcount ++ ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn count ; \n\t} \n"}, {"code": "$F1 public void notifyCommit ( final long commitTime ) { \n\t$F790 ( lock ) try { \n\t\tupdateReleaseTimeForBareCommit ( commitTime ) ; \n\t\t} \n\t$F796 ( lock ) } \n"}, {"code": "public static int showYesNoCancelQuestion ( final Component parent , final String msg ) { \n\treturn JOptionPane . showConfirmDialog ( isIconified ( parent ) ? null : parent , msg , System . getProperty ( DEFAULT_WINDOW_TITLE_PROPERTY ) , JOptionPane . YES_NO_CANCEL_OPTION , JOptionPane . QUESTION_MESSAGE ) ; \n\t} \n"}, {"code": "public static String quantityplnounCreature $F66432 ( quantity , noun ) { \n\tif $F3057 ( noun ) { \n\t\tfinal String end = plnounCreature ( quantity , noun ) ; \n\t\treturn Integer . toString ( quantity ) + NUM00 + end ; \n\t\t} \n\treturn quantityplnoun ( quantity , noun ) ; \n\t} \n"}, {"code": "static int copyBytes ( OutputStream os , InputStream is , $F96 ioBuffer , int maxSize ) throws IOException { \n\tint totalSize = NUM00 ; \n\twhile ( totalSize < maxSize ) { \n\t\tint rc = is . read ( ioBuffer , NUM00 , Math . min ( maxSize - totalSize , ioBuffer . length ) ) ; \n\t\t$F76065 ( rc ) $F11584 ( os , ioBuffer , rc ) totalSize += rc ; \n\t\t} \n\treturn totalSize ; \n\t} \n"}, {"code": "public int doFinal $F5474 ( out , outOff ) throws DataLengthException , IllegalStateException , InvalidCipherTextException { \n\ttry { \n\t\tint resultLen = NUM00 ; \n\t\tif ( outOff + bufOff > out . length ) { \n\t\t\tthrow new OutputLengthException $F580 ; \n\t\t\t} \n\t\tif ( bufOff != NUM00 ) { \n\t\t\tif ( ! partialBlockOkay ) $F58352 $F58355 ( cipher , buf ) resultLen = bufOff ; \n\t\t\tbufOff = NUM00 ; \n\t\t\t$F6483 ( System , buf , out , outOff , resultLen ) } \n\t\treturn resultLen ; \n\t\t} \n\t$F49978 ( reset ) } \n"}, {"code": "void composeMessage ( final Mail mail , final String textContent , final String htmlContent , final $F48568 attachments , $F20109 ( mailTemplateChain ) , final String shopCode , final String locale , final String templateName ) throws MessagingException , ClassNotFoundException , IOException { \n\tif ( textContent == null || htmlContent == null ) { \n\t\tif ( textContent != null ) { \n\t\t\tmail . setTextVersion ( textContent ) ; \n\t\t\t} \n\t\tif ( htmlContent != null ) { \n\t\t\tmail . setHtmlVersion ( htmlContent ) ; \n\t\t\tinlineResources ( mail , htmlContent , mailTemplateChain , shopCode , locale , templateName ) ; \n\t\t\taddAttachments ( mail , attachments ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tmail . setTextVersion ( textContent ) ; \n\t\tmail . setHtmlVersion ( htmlContent ) ; \n\t\tinlineResources ( mail , htmlContent , mailTemplateChain , shopCode , locale , templateName ) ; \n\t\taddAttachments ( mail , attachments ) ; \n\t\t} \n\t} \n"}, {"code": "private void handleLaunchMessageEvent ( MessageEvent messageEvent ) { \n\tDataMap dataMap = DataMap . fromByteArray ( messageEvent . getData ( ) ) ; \n\tboolean relaunchIfRunning = dataMap . getBoolean ( KEY_START_ACTIVITY_RELAUNCH , _BOOL ) ; \n\tDataMap bundleData = dataMap . getDataMap ( KEY_START_ACTIVITY_BUNDLE ) ; \n\t$F19101 ( activityName , dataMap , KEY_START_ACTIVITY_NAME ) Bundle bundle = null ; \n\tif ( bundleData != null ) { \n\t\tbundle = bundleData . toBundle ( ) ; \n\t\t} \n\tif ( activityName == null ) { \n\t\tfor ( WearConsumer consumer : mWearConsumers ) { \n\t\t\tconsumer . onWearableApplicationLaunchRequestReceived ( bundle , relaunchIfRunning ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\ttry { \n\t\t\tif $F20899 ( TextUtils , activityName ) { \n\t\t\t\t$F96883 ( targetActivity , Class , activityName ) Intent intent = new Intent ( mContext , targetActivity ) ; \n\t\t\t\tintent . setFlags ( Intent . FLAG_ACTIVITY_NEW_TASK ) ; \n\t\t\t\tif ( bundle != null ) { \n\t\t\t\t\tintent . putExtras ( bundle ) ; \n\t\t\t\t\t} \n\t\t\t\tif ( ! mAppForeground || relaunchIfRunning ) { \n\t\t\t\t\tmContext . startActivity ( intent ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse $F13955 ( Log , TAG ) } \n\t\tcatch ( ClassNotFoundException e ) $F17555 ( Log , TAG , e ) } \n\t} \n"}, {"code": "$F1 public void close $F72 throws IOException { \n\tclosed = _BOOL ; \n\t$F87417 ( def ) $F59 ( in ) } \n"}, {"code": "public static String escapeColonInString ( String str ) { \n\tif ( str != null ) { \n\t\tif $F48846 ( str ) { \n\t\t\t$F2899 ( str ) } \n\t\t} \n\treturn str ; \n\t} \n"}, {"code": "protected void tearDown $F72 throws Exception { \n\tFile file ; \n\t$F24661 ( file , m_ExportFilenameData ) $F81294 ( file ) m_ExportFilenameData = null ; \n\t$F173385 ( super ) } \n"}, {"code": "private static SAXParserFactory createSAXParserFactory $F72 { \n\ttry { \n\t\t$F2218 ( factory , SAXParserFactory ) try { \n\t\t\tSAXParserFactory secureFactory = SecureGenericXMLFactory . getSAXParserFactory ( factory ) ; \n\t\t\tsecureFactory . newSAXParser ( ) ; \n\t\t\tfactory = secureFactory ; \n\t\t\t} \n\t\tcatch ( ParserConfigurationException e ) $F845 factory . setNamespaceAware ( _BOOL ) ; \n\t\treturn factory ; \n\t\t} \n\tcatch ( SAXException e ) $F54146 ( e ) } \n"}, {"code": "$F11730 ( logPrefix , request , exception , retryPolicy , oldTimeout , String , e ) "}, {"code": "public static void saveAsXML ( NSObject root , File out ) throws IOException { \n\t$F4924 ( parent , out ) if $F15930 ( parent ) $F14525 $F4649 ( fous , out ) saveAsXML ( root , fous ) ; \n\t$F59 ( fous ) } \n"}, {"code": "public static boolean containsChroot ( String zkHost ) $F132975 ( zkHost ) "}, {"code": "public final void lazySet ( int newValue ) { \n\tunsafe . putOrderedInt ( this , valueOffset , newValue ) ; \n\t} \n"}, {"code": "public Feature ( String line , Map cpStr2Int , Map lbStr2Int , Map fmap ) { \n\t$F17727 ( strTok , line ) $F17729 ( len , strTok ) $F8095 ( strIdStr , strTok ) $F24697 ( idx , Integer , strTok ) float val = NUM00 ; \n\tdouble wgt = $F254241 ( Double , strTok ) ; \n\t$F17727 ( strIdTok , strIdStr ) $F8095 ( prefix , strIdTok ) if ( prefix . compareToIgnoreCase ( NUM00 ) == NUM00 ) { \n\t\tInteger yInt = ( Integer ) lbStr2Int . get ( strIdTok . nextToken ( ) ) ; \n\t\tInteger ypInt = ( Integer ) lbStr2Int . get ( strIdTok . nextToken ( ) ) ; \n\t\tif ( yInt != null && ypInt != null ) { \n\t\t\teFeature1Init ( yInt . intValue ( ) , ypInt . intValue ( ) ) ; \n\t\t\t} \n\t\t} \n\telse if ( prefix . compareToIgnoreCase ( NUM00 ) == NUM00 ) { \n\t\tInteger yInt = ( Integer ) lbStr2Int . get ( strIdTok . nextToken ( ) ) ; \n\t\tInteger cpInt = ( Integer ) cpStr2Int . get ( strIdTok . nextToken ( ) ) ; \n\t\tif ( yInt != null && cpInt != null ) { \n\t\t\tsFeature1Init ( yInt . intValue ( ) , cpInt . intValue ( ) ) ; \n\t\t\t} \n\t\t} \n\tthis . idx = idx ; \n\tthis . val = val ; \n\tthis . wgt = wgt ; \n\tstrId2IdxAdd ( fmap ) ; \n\t} \n"}, {"code": "public static int patchFast ( InputStream oldInputStream , InputStream diffInputStream , File newFile ) throws IOException { \n\t$F1933 ( oldInputStream , RETURN_OLD_FILE_ERR ) $F1933 ( newFile , RETURN_NEW_FILE_ERR ) $F1933 ( diffInputStream , RETURN_DIFF_FILE_ERR ) $F96 oldBytes = BSUtil . inputStreamToByte ( oldInputStream ) ; \n\t$F96 diffBytes = BSUtil . inputStreamToByte ( diffInputStream ) ; \n\t$F96 newBytes = patchFast ( oldBytes , oldBytes . length , diffBytes , diffBytes . length , NUM00 ) ; \n\t$F12015 ( newOutputStream , newFile ) $F40754 ( newOutputStream , newBytes ) return RETURN_SUCCESS ; \n\t} \n"}, {"code": "public static $F96 readFullyNoClose ( InputStream in ) throws IOException { \n\t$F1538 ( bytes ) $F12496 ( buffer ) int count ; \n\t$F29757 ( count , in , buffer , bytes ) $F11316 ( bytes ) } \n"}, {"code": "public ContentStorage ( ContentStorageBO contentStorageBO , List < GenericPackage > genericPackageList , List < EssenceContainerData > essenceContainerDataList ) { \n\tthis . contentStorageBO = contentStorageBO ; \n\tthis . genericPackageList = Collections . unmodifiableList ( genericPackageList ) ; \n\tthis . essenceContainerDataList = Collections . unmodifiableList ( essenceContainerDataList ) ; \n\t} \n"}, {"code": "public static String decode $F97 ( utf8 ) throws CharacterCodingException { \n\treturn decode ( ByteBuffer . wrap ( utf8 ) , _BOOL ) ; \n\t} \n"}, {"code": "public ScaleIOVolume queryVolume ( String volId ) throws Exception { \n\tClientResponse response = get ( URI . create ( ScaleIOConstants . getVolumeURI ( volId ) ) ) ; \n\treturn getResponseObject ( ScaleIOVolume . class , response ) ; \n\t} \n"}, {"code": "public void removeEventListener ( SIPDialogEventListener oldListener ) $F106 ( eventListeners , oldListener ) "}, {"code": "protected static Object primitiveArrayPut ( Object self , int idx , Object newValue ) { \n\tArray . set ( self , normaliseIndex ( idx , Array . getLength ( self ) ) , newValue ) ; \n\treturn newValue ; \n\t} \n"}, {"code": "public void toAxisAngle ( Vector4f output ) { \n\tif $F44803 ( getW ) $F5795 ( normalise ) float angle = NUM00 * ( float ) Math . toDegrees ( Math . acos ( getW ( ) ) ) ; \n\tfloat x ; \n\tfloat y ; \n\tfloat z ; \n\tfloat s = ( float ) Math . sqrt ( NUM00 - getW ( ) * getW ( ) ) ; \n\tif ( s < NUM00 ) $F7306 ( x , points , y , z ) else { \n\t\tx = points [ NUM00 ] / s ; \n\t\ty = points [ NUM00 ] / s ; \n\t\tz = points [ NUM00 ] / s ; \n\t\t} \n\toutput . points [ NUM00 ] = x ; \n\toutput . points [ NUM00 ] = y ; \n\toutput . points [ NUM00 ] = z ; \n\toutput . points [ NUM00 ] = angle ; \n\t} \n"}, {"code": "$F202347 ( mRootDirectory , VolleyLog , files , file , fis , entry , CacheHeader , putEntry ) "}, {"code": "private QNameMap < BindingExpression > processBindingAttributes ( Node node ) { \n\tQNameMap < BindingExpression > attributeBindings = null ; \n\tfor ( Iterator < QName > i = node . getAttributeNames ( ) ; \n\ti != null && i . hasNext ( ) ; \n\t) { \n\t\tQName qname = i . next ( ) ; \n\t\tString value = ( String ) node . getAttributeValue ( qname ) ; \n\t\tBindingExpression be = textParser . parseBindingExpression ( value , node . beginLine ) ; \n\t\tif ( be != null ) { \n\t\t\tif ( attributeBindings == null ) { \n\t\t\t\tattributeBindings = new QNameMap < BindingExpression > $F72 ; \n\t\t\t\t} \n\t\t\tattributeBindings . put ( qname , be ) ; \n\t\t\t$F7042 ( i ) } \n\t\t} \n\treturn attributeBindings ; \n\t} \n"}, {"code": "public void load ( String fileName ) throws IOException { \n\tBufferedReader bfr = new BufferedReader ( new InputStreamReader ( new FileInputStream ( fileName ) , NUM00 ) ) ; \n\tif ( bList == null ) bList = new Vector ( DEFAULT_INCREMENT , DEFAULT_INCREMENT ) ; \n\t$F27015 ( line , bfr ) if $F12703 ( line ) { \n\t\t$F3108 ( line ) $F808 ( parts ) parts = $F289440 ( line ) ; \n\t\tfromDir = parts [ NUM00 ] ; \n\t\tfromExt = parts [ NUM00 ] ; \n\t\t} \n\telse if ( ! $F11809 ( line ) ) add ( line ) ; \n\twhile $F443 ( line , bfr ) { \n\t\tif ( ! $F11809 ( line ) ) add ( line ) ; \n\t\t} \n\t} \n"}, {"code": "private void verifyRegisterDefs ( String where ) { \n\tDefUse . computeDU ( this ) ; \n\tfor ( Register r = regpool . getFirstSymbolicRegister ( ) ; \n\tr != null ; \n\tr = r . getNext ( ) ) { \n\t\tif ( r . isPhysical ( ) ) $F598 if ( r . useList != null ) { \n\t\t\tif ( r . defList == null ) { \n\t\t\t\tprintInstructions ( ) ; \n\t\t\t\tverror ( where , NUM00 + r + NUM00 ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F1431 public static PartListing parseListParts ( InputStream responseBody ) throws ResponseParseException { \n\ttry { \n\t\tElement root = getXmlRootElement ( responseBody ) ; \n\t\tPartListing partListing = new PartListing $F72 ; \n\t\tpartListing . setBucketName ( root . getChildText ( NUM00 ) ) ; \n\t\tpartListing . setKey ( root . getChildText ( NUM00 ) ) ; \n\t\tpartListing . setUploadId ( root . getChildText ( NUM00 ) ) ; \n\t\tpartListing . setStorageClass ( root . getChildText ( NUM00 ) ) ; \n\t\tpartListing . setMaxParts ( Integer . valueOf ( root . getChildText ( NUM00 ) ) ) ; \n\t\tpartListing . setTruncated ( Boolean . valueOf ( root . getChildText ( NUM00 ) ) ) ; \n\t\tif $F105855 ( root ) { \n\t\t\t$F454660 ( partNumberMarker , root ) if ( ! isNullOrEmpty ( partNumberMarker ) ) { \n\t\t\t\tpartListing . setPartNumberMarker ( Integer . valueOf ( partNumberMarker ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tif $F105855 ( root ) { \n\t\t\t$F454660 ( nextPartNumberMarker , root ) if ( ! isNullOrEmpty ( nextPartNumberMarker ) ) { \n\t\t\t\tpartListing . setNextPartNumberMarker ( Integer . valueOf ( nextPartNumberMarker ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F196412 ( partElems , root ) for ( Element elem : partElems ) { \n\t\t\tPartSummary ps = new PartSummary $F72 ; \n\t\t\tps . setPartNumber ( Integer . valueOf ( elem . getChildText ( NUM00 ) ) ) ; \n\t\t\tps . setLastModified ( DateUtil . parseIso8601Date ( elem . getChildText ( NUM00 ) ) ) ; \n\t\t\tps . setETag ( trimQuotes ( elem . getChildText ( NUM00 ) ) ) ; \n\t\t\tps . setSize ( Integer . valueOf ( elem . getChildText ( NUM00 ) ) ) ; \n\t\t\tpartListing . addPart ( ps ) ; \n\t\t\t} \n\t\treturn partListing ; \n\t\t} \n\t$F105866 ( e ) } \n"}, {"code": "private static void findSnap ( Collection < ConstraintWidget > widgets , ConstraintWidget widget , SnapCandidate candidate , boolean checkHorizontal ) { \n\tArrayList < ConstraintAnchor > anchorsSource = widget . getAnchors ( ) ; \n\tfor ( ConstraintWidget w : widgets ) { \n\t\t$F83608 ( w , widget ) ArrayList < ConstraintAnchor > anchorsTarget = w . getAnchors ( ) ; \n\t\tfor ( ConstraintAnchor as : anchorsSource ) { \n\t\t\tif ( checkHorizontal && as . isVerticalAnchor ( ) ) $F1448 else if ( ! checkHorizontal && ! as . isVerticalAnchor ( ) ) $F1448 for ( ConstraintAnchor at : anchorsTarget ) { \n\t\t\t\tsnapCheck ( as , at , candidate , CONNECTION_SLOPE ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "protected String padString $F123257 ( s , length , left ) { \n\tString result ; \n\tint i ; \n\tresult = s ; \n\tfor ( i = s . length ( ) ; \n\ti < length ; \n\ti ++ ) { \n\t\tif ( left ) $F21679 ( result ) else $F2365 ( result ) } \n\tif ( ( length > NUM00 ) && $F14791 ( result , length ) ) $F45800 ( result , length ) return result ; \n\t} \n"}, {"code": "public static < C extends $F65474 > List < Range $F37574 > remove ( Range $F37574 self , Range $F37574 other ) { \n\tif ( other == null || ! self . isConnected ( other ) ) { \n\t\treturn Collections . singletonList ( self ) ; \n\t\t} \n\tRange $F37574 share = self . intersection ( other ) ; \n\tif $F2979 ( share ) { \n\t\treturn Collections . singletonList ( self ) ; \n\t\t} \n\tList < Range $F37574 > ret = Lists . newArrayList ( ) ; \n\tif ( ! self . hasLowerBound ( ) ) { \n\t\tif ( share . hasLowerBound ( ) ) { \n\t\t\tif ( share . lowerBoundType ( ) == BoundType . CLOSED ) { \n\t\t\t\tret . add ( Range . lessThan ( share . lowerEndpoint ( ) ) ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tret . add ( Range . atMost ( share . lowerEndpoint ( ) ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse { \n\t\tif ( self . lowerEndpoint ( ) != share . lowerEndpoint ( ) ) { \n\t\t\tif ( self . lowerBoundType ( ) == BoundType . CLOSED ) { \n\t\t\t\tif ( share . lowerBoundType ( ) == BoundType . CLOSED ) { \n\t\t\t\t\tret . add ( Range . closedOpen ( self . lowerEndpoint ( ) , share . lowerEndpoint ( ) ) ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tret . add ( Range . closed ( self . lowerEndpoint ( ) , share . lowerEndpoint ( ) ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tif ( share . lowerBoundType ( ) == BoundType . CLOSED ) { \n\t\t\t\t\tret . add ( Range . open ( self . lowerEndpoint ( ) , share . lowerEndpoint ( ) ) ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tret . add ( Range . openClosed ( self . lowerEndpoint ( ) , share . lowerEndpoint ( ) ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tif ( self . lowerBoundType ( ) == BoundType . CLOSED && share . lowerBoundType ( ) == BoundType . OPEN ) { \n\t\t\t\tret . add ( Range . closed ( self . lowerEndpoint ( ) , share . lowerEndpoint ( ) ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tif ( ! self . hasUpperBound ( ) ) { \n\t\tif ( share . hasUpperBound ( ) ) { \n\t\t\tif ( share . upperBoundType ( ) == BoundType . CLOSED ) { \n\t\t\t\tret . add ( Range . greaterThan ( share . upperEndpoint ( ) ) ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tret . add ( Range . atLeast ( share . upperEndpoint ( ) ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse { \n\t\tif ( self . upperEndpoint ( ) != share . upperEndpoint ( ) ) { \n\t\t\tif ( self . upperBoundType ( ) == BoundType . CLOSED ) { \n\t\t\t\tif ( share . upperBoundType ( ) == BoundType . CLOSED ) { \n\t\t\t\t\tret . add ( Range . openClosed ( share . upperEndpoint ( ) , self . upperEndpoint ( ) ) ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tret . add ( Range . closed ( share . upperEndpoint ( ) , self . upperEndpoint ( ) ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tif ( share . upperBoundType ( ) == BoundType . CLOSED ) { \n\t\t\t\t\tret . add ( Range . open ( share . upperEndpoint ( ) , self . upperEndpoint ( ) ) ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tret . add ( Range . closedOpen ( share . upperEndpoint ( ) , self . upperEndpoint ( ) ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tif ( self . upperBoundType ( ) == BoundType . CLOSED && share . upperBoundType ( ) == BoundType . OPEN ) { \n\t\t\t\tret . add ( Range . closed ( self . upperEndpoint ( ) , share . upperEndpoint ( ) ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn ret ; \n\t} \n"}, {"code": "void recomposeKeys ( KeyDeclaration keyDecl ) $F6659 ( m_keyDecls , keyDecl ) "}, {"code": "public $F4203 JsonArray $F4203 createListDtoFromJson ( Reader json , $F20474 dtoInterface ) throws IOException { \n\tfinal $F20477 dtoProvider = getDtoProvider ( dtoInterface ) ; \n\tfinal List $F115413 list ; \n\ttry { \n\t\tlist = gson . fromJson ( json , listTypeCache . get ( $F111365 ) ) ; \n\t\t} \n\tcatch ( JsonSyntaxException e ) { \n\t\tfinal Throwable cause = e . getCause ( ) ; \n\t\tif ( cause instanceof IOException ) $F204796 ( cause ) throw e ; \n\t\t} \n\tfinal $F5675 $F719 ( result , list ) ; \n\tfor ( JsonElement e : list ) { \n\t\tresult . add ( dtoProvider . fromJson ( e ) ) ; \n\t\t} \n\treturn new JsonArrayImpl $F200 ( result ) ; \n\t} \n"}, {"code": "private View fillFromTop ( int nextTop ) { \n\tmFirstPosition = Math . min ( mFirstPosition , - NUM00 ) ; \n\t$F72086 ( mFirstPosition , Math , mItemCount ) $F17370 ( mFirstPosition ) return fillDown ( mFirstPosition , nextTop ) ; \n\t} \n"}, {"code": "public void connectionOpen $F72 { \n\t$F790 ( lock ) try { \n\t\t$F973 ( log ) connectionOpen = _BOOL ; \n\t\t} \n\t$F796 ( lock ) } \n"}, {"code": "public static float rotateY $F780 ( pX , pY , cX , cY , angleInDegrees ) { \n\t$F9291 ( angle , Math , angleInDegrees ) return ( float ) ( Math . sin ( angle ) * ( pX - cX ) + Math . cos ( angle ) * ( pY - cY ) + cY ) ; \n\t} \n"}, {"code": "public void list ( PrintStream out ) { \n\tproperties . list ( out ) ; \n\t} \n"}, {"code": "protected LayerPane findSelectedPane $F72 { \n\tfor ( LayerPane pane : getPanes ( ) ) { \n\t\tif $F31483 ( pane ) { \n\t\t\treturn pane ; \n\t\t\t} \n\t\t} \n\t$F1274 } \n"}, {"code": "private final void scaleNoiseArray ( final int seaLevel ) { \n\tfor ( $F119 ( x , X_SECTIONS ) ) { \n\t\tfor ( $F119 ( z , Z_SECTIONS ) ) { \n\t\t\tfor ( $F119 ( y , Y_SECTIONS ) ) { \n\t\t\t\tthis . rawDensity [ x ] [ y ] [ z ] *= MAX_ELEV ; \n\t\t\t\tthis . rawDensity [ x ] [ y ] [ z ] += seaLevel ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public $F131 toArray $F72 { \n\t$F91915 ( al ) $F91919 ( p , first , succ , item , al ) $F3537 ( al ) } \n"}, {"code": "public MicroservicesRunner ( int ... ports ) { \n\tconfigureTransport ( ports ) ; \n\t} \n"}, {"code": "public static boolean deleteContents ( File directory ) { \n\t$F5459 ( files , directory ) boolean success = _BOOL ; \n\tif ( files != null ) { \n\t\tfor ( File file : files ) { \n\t\t\tsuccess &= deleteRecursively ( file ) ; \n\t\t\t} \n\t\t} \n\treturn success ; \n\t} \n"}, {"code": "private void handleResponse ( AvsResponse response ) { \n\tmEventManager . post ( new CommandEvent ( CommandEvent . TYPE_COMMAND_SEARCHING , KEYWORD_ALEXA ) ) ; \n\tif ( response != null ) { \n\t\tfor ( $F5373 ( i , response ) ) { \n\t\t\tif ( response . get ( i ) instanceof AvsReplaceAllItem || response . get ( i ) instanceof AvsReplaceEnqueuedItem ) { \n\t\t\t\t$F725 ( mAvsQueue ) response . remove ( i ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tTimber . i ( $F2310 ( response ) ) ; \n\t\tmAvsQueue . addAll ( response ) ; \n\t\t} \n\tcheckQueue ( ) ; \n\t} \n"}, {"code": "void mergesort ( Vector a , Vector b , int l , int r , XPathContext support ) throws TransformerException { \n\tif $F117366 ( r , l ) { \n\t\t$F62159 ( m , r , l ) mergesort ( a , b , l , m , support ) ; \n\t\tmergesort ( a , b , m + NUM00 , r , support ) ; \n\t\tint i , j , k ; \n\t\tfor ( i = m ; \n\t\ti >= l ; \n\t\ti -- ) { \n\t\t\tif $F6389 ( i , b ) b . insertElementAt ( a . elementAt ( i ) , i ) ; \n\t\t\telse b . setElementAt ( a . elementAt ( i ) , i ) ; \n\t\t\t} \n\t\ti = l ; \n\t\tfor ( j = ( m + NUM00 ) ; \n\t\tj <= r ; \n\t\tj ++ ) { \n\t\t\tif ( r + m + NUM00 - j >= b . size ( ) ) b . insertElementAt ( a . elementAt ( j ) , r + m + NUM00 - j ) ; \n\t\t\telse b . setElementAt ( a . elementAt ( j ) , r + m + NUM00 - j ) ; \n\t\t\t} \n\t\tj = r ; \n\t\tint compVal ; \n\t\tfor ( k = l ; \n\t\tk <= r ; \n\t\tk ++ ) { \n\t\t\tif ( i == j ) compVal = - NUM00 ; \n\t\t\telse compVal = compare ( $F82324 ( b , i ) , $F82324 ( b , j ) , NUM00 , support ) ; \n\t\t\tif ( compVal < NUM00 ) { \n\t\t\t\ta . setElementAt ( b . elementAt ( i ) , k ) ; \n\t\t\t\ti ++ ; \n\t\t\t\t} \n\t\t\telse if ( compVal > NUM00 ) { \n\t\t\t\ta . setElementAt ( b . elementAt ( j ) , k ) ; \n\t\t\t\tj -- ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static $F3803 toList ( CharSequence self ) { \n\t$F1822 ( s , self ) $F1749 ( size , s ) $F3803 $F71141 ( answer , size ) ; \n\tfor ( $F119 ( i , size ) ) { \n\t\tanswer . add ( $F10818 ( s , i ) ) ; \n\t\t} \n\treturn answer ; \n\t} \n"}, {"code": "void appendArrayGenericType ( StringBuilder sb , $F24901 types ) { \n\tif $F3305 ( types ) $F70234 ( appendGenericType , sb , types , i ) } \n"}, {"code": "public static int decode_residual ( H264Context h , GetBitContext gb , $F5078 block_base , int block_offset , int n , $F2027 scantable_base , int scantable_offset , $F2469 qmul_base , int qmul_offset , int max_coeff ) { \n\tfinal $F2027 coeff_token_table_index = { \n\t\tNUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } \n\t; \n\t$F11844 ( level ) int zeros_left , coeff_token , total_coeff , i , trailing_ones , run_before ; \n\tif ( n >= H264Context . CHROMA_DC_BLOCK_INDEX ) { \n\t\tcoeff_token = gb . get_vlc2 ( chroma_dc_coeff_token_vlc . table_base , chroma_dc_coeff_token_vlc . table_offset , H264Context . CHROMA_DC_COEFF_TOKEN_VLC_BITS , NUM00 , NUM00 ) ; \n\t\ttotal_coeff = coeff_token > > NUM00 ; \n\t\t} \n\telse { \n\t\tif ( n == H264Context . LUMA_DC_BLOCK_INDEX ) { \n\t\t\ttotal_coeff = pred_non_zero_count ( h , NUM00 ) ; \n\t\t\tcoeff_token = gb . get_vlc2 ( coeff_token_vlc [ coeff_token_table_index [ total_coeff ] ] . table_base , coeff_token_vlc [ coeff_token_table_index [ total_coeff ] ] . table_offset , H264Context . COEFF_TOKEN_VLC_BITS , NUM00 , NUM00 ) ; \n\t\t\ttotal_coeff = coeff_token > > NUM00 ; \n\t\t\t} \n\t\telse { \n\t\t\ttotal_coeff = pred_non_zero_count ( h , n ) ; \n\t\t\tcoeff_token = gb . get_vlc2 ( coeff_token_vlc [ coeff_token_table_index [ total_coeff ] ] . table_base , coeff_token_vlc [ coeff_token_table_index [ total_coeff ] ] . table_offset , H264Context . COEFF_TOKEN_VLC_BITS , NUM00 , NUM00 ) ; \n\t\t\ttotal_coeff = coeff_token > > NUM00 ; \n\t\t\t} \n\t\t} \n\th . non_zero_count_cache [ H264Context . scan8 [ n ] ] = total_coeff ; \n\t$F94561 ( total_coeff ) $F81007 ( total_coeff , max_coeff ) trailing_ones = coeff_token & NUM00 ; \n\ti = ( int ) gb . show_bits ( NUM00 ) ; \n\tgb . skip_bits ( trailing_ones ) ; \n\tlevel [ NUM00 ] = NUM00 - $F84702 ( i ) ; \n\tlevel [ NUM00 ] = NUM00 - ( ( i & NUM00 ) ) ; \n\tlevel [ NUM00 ] = NUM00 - $F74254 ( i ) ; \n\tif ( trailing_ones < total_coeff ) { \n\t\tint mask , prefix ; \n\t\tint suffix_length = ( ( total_coeff > NUM00 ) ? NUM00 : NUM00 ) & ( ( trailing_ones < NUM00 ) ? NUM00 : NUM00 ) ; \n\t\tint bitsi = ( int ) gb . show_bits ( LEVEL_TAB_BITS ) ; \n\t\tint level_code = cavlc_level_tab [ suffix_length ] [ bitsi ] [ NUM00 ] ; \n\t\tgb . skip_bits ( cavlc_level_tab [ suffix_length ] [ bitsi ] [ NUM00 ] ) ; \n\t\tif ( level_code >= NUM00 ) { \n\t\t\tprefix = level_code - NUM00 ; \n\t\t\tif ( prefix == LEVEL_TAB_BITS ) prefix += get_level_prefix ( gb ) ; \n\t\t\tif ( prefix < NUM00 ) { \n\t\t\t\tif ( suffix_length != NUM00 ) level_code = ( int ) ( ( prefix < < NUM00 ) + gb . get_bits1 ( NUM00 ) ) ; \n\t\t\t\telse level_code = prefix ; \n\t\t\t\t} \n\t\t\telse if ( prefix == NUM00 ) { \n\t\t\t\tif ( suffix_length != NUM00 ) level_code = ( int ) ( ( prefix < < NUM00 ) + gb . get_bits1 ( NUM00 ) ) ; \n\t\t\t\telse level_code = ( int ) ( prefix + gb . get_bits ( NUM00 , NUM00 ) ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tlevel_code = NUM00 + ( int ) ( gb . get_bits ( prefix - NUM00 , NUM00 ) ) ; \n\t\t\t\tif ( prefix >= NUM00 ) { \n\t\t\t\t\tif ( prefix > NUM00 + NUM00 ) $F7629 level_code += ( NUM00 < < ( prefix - NUM00 ) ) - NUM00 ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tif ( trailing_ones < NUM00 ) level_code += NUM00 ; \n\t\t\tsuffix_length = NUM00 ; \n\t\t\tmask = - ( level_code & NUM00 ) ; \n\t\t\tlevel [ trailing_ones ] = ( ( ( NUM00 + level_code ) > > NUM00 ) ^ mask ) - mask ; \n\t\t\t} \n\t\telse { \n\t\t\tlevel_code += ( ( level_code > > NUM00 ) | NUM00 ) & - ( ( trailing_ones < NUM00 ) ? NUM00 : NUM00 ) ; \n\t\t\tsuffix_length = NUM00 + ( ( ( NUM00 & ( level_code + NUM00 ) ) > NUM00 ) ? NUM00 : NUM00 ) ; \n\t\t\tlevel [ trailing_ones ] = level_code ; \n\t\t\t} \n\t\tfor ( i = trailing_ones + NUM00 ; \n\t\ti < total_coeff ; \n\t\ti ++ ) { \n\t\t\tfinal $F2027 suffix_limit = { \n\t\t\t\tNUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , Integer . MAX_VALUE } \n\t\t\t; \n\t\t\tbitsi = ( int ) gb . show_bits ( LEVEL_TAB_BITS ) ; \n\t\t\tlevel_code = cavlc_level_tab [ suffix_length ] [ bitsi ] [ NUM00 ] ; \n\t\t\tgb . skip_bits ( cavlc_level_tab [ suffix_length ] [ bitsi ] [ NUM00 ] ) ; \n\t\t\tif ( level_code >= NUM00 ) { \n\t\t\t\tprefix = level_code - NUM00 ; \n\t\t\t\tif ( prefix == LEVEL_TAB_BITS ) { \n\t\t\t\t\tprefix += get_level_prefix ( gb ) ; \n\t\t\t\t\t} \n\t\t\t\tif ( prefix < NUM00 ) { \n\t\t\t\t\tlevel_code = ( int ) ( ( prefix < < suffix_length ) + gb . get_bits ( suffix_length , NUM00 ) ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tlevel_code = ( int ) ( ( NUM00 < < suffix_length ) + gb . get_bits ( prefix - NUM00 , NUM00 ) ) ; \n\t\t\t\t\tif ( prefix >= NUM00 ) level_code += ( NUM00 < < ( prefix - NUM00 ) ) - NUM00 ; \n\t\t\t\t\t} \n\t\t\t\tmask = - ( level_code & NUM00 ) ; \n\t\t\t\tlevel_code = ( ( ( NUM00 + level_code ) > > NUM00 ) ^ mask ) - mask ; \n\t\t\t\t} \n\t\t\tlevel [ i ] = level_code ; \n\t\t\tsuffix_length += ( ( ( NUM00 & ( suffix_limit [ suffix_length ] + level_code ) ) > ( NUM00 * suffix_limit [ suffix_length ] ) ) ? NUM00 : NUM00 ) ; \n\t\t\t} \n\t\t} \n\tif ( total_coeff == max_coeff ) zeros_left = NUM00 ; \n\telse { \n\t\tif ( n >= H264Context . CHROMA_DC_BLOCK_INDEX ) { \n\t\t\tzeros_left = gb . get_vlc2 ( chroma_dc_total_zeros_vlc [ total_coeff - NUM00 ] . table_base , chroma_dc_total_zeros_vlc [ total_coeff - NUM00 ] . table_offset , H264Context . CHROMA_DC_TOTAL_ZEROS_VLC_BITS , NUM00 , NUM00 ) ; \n\t\t\t} \n\t\telse { \n\t\t\tzeros_left = gb . get_vlc2 ( total_zeros_vlc [ total_coeff - NUM00 ] . table_base , total_zeros_vlc [ total_coeff - NUM00 ] . table_offset , H264Context . TOTAL_ZEROS_VLC_BITS , NUM00 , NUM00 ) ; \n\t\t\t} \n\t\t} \n\tscantable_offset += zeros_left + total_coeff - NUM00 ; \n\tif ( scantable_offset < NUM00 ) { \n\t\t$F2027 new_scantable_base = new int [ scantable_base . length + ( - scantable_offset ) ] ; \n\t\tSystem . arraycopy ( scantable_base , NUM00 , new_scantable_base , - scantable_offset , scantable_base . length ) ; \n\t\tscantable_base = new_scantable_base ; \n\t\tscantable_offset = NUM00 ; \n\t\t} \n\tif ( n >= H264Context . LUMA_DC_BLOCK_INDEX ) { \n\t\tblock_base [ block_offset + scantable_base [ scantable_offset ] ] = ( short ) level [ NUM00 ] ; \n\t\tfor ( i = NUM00 ; \n\t\ti < total_coeff && zeros_left > NUM00 ; \n\t\ti ++ ) { \n\t\t\tif ( zeros_left < NUM00 ) { \n\t\t\t\trun_before = gb . get_vlc2 ( run_vlc [ zeros_left - NUM00 ] . table_base , run_vlc [ zeros_left - NUM00 ] . table_offset , H264Context . RUN_VLC_BITS , NUM00 , NUM00 ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\trun_before = gb . get_vlc2 ( run7_vlc . table_base , run7_vlc . table_offset , H264Context . RUN7_VLC_BITS , NUM00 , NUM00 ) ; \n\t\t\t\t} \n\t\t\tzeros_left -= run_before ; \n\t\t\tscantable_offset -= NUM00 + run_before ; \n\t\t\tblock_base [ block_offset + scantable_base [ scantable_offset ] ] = ( short ) level [ i ] ; \n\t\t\t} \n\t\tfor ( ; \n\t\ti < total_coeff ; \n\t\ti ++ ) { \n\t\t\tscantable_offset -- ; \n\t\t\tblock_base [ block_offset + scantable_base [ scantable_offset ] ] = ( short ) level [ i ] ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tblock_base [ block_offset + scantable_base [ scantable_offset ] ] = ( short ) ( ( level [ NUM00 ] * qmul_base [ qmul_offset + scantable_base [ scantable_offset ] ] + NUM00 ) > > NUM00 ) ; \n\t\tfor ( i = NUM00 ; \n\t\ti < total_coeff && zeros_left > NUM00 ; \n\t\ti ++ ) { \n\t\t\tif ( zeros_left < NUM00 ) { \n\t\t\t\trun_before = gb . get_vlc2 ( run_vlc [ zeros_left - NUM00 ] . table_base , run_vlc [ zeros_left - NUM00 ] . table_offset , H264Context . RUN_VLC_BITS , NUM00 , NUM00 ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\trun_before = gb . get_vlc2 ( run7_vlc . table_base , run7_vlc . table_offset , H264Context . RUN7_VLC_BITS , NUM00 , NUM00 ) ; \n\t\t\t\t} \n\t\t\tzeros_left -= run_before ; \n\t\t\tscantable_offset -= ( NUM00 + run_before ) ; \n\t\t\tblock_base [ block_offset + scantable_base [ scantable_offset ] ] = ( short ) ( ( level [ i ] * qmul_base [ qmul_offset + scantable_base [ scantable_offset ] ] + NUM00 ) > > NUM00 ) ; \n\t\t\t} \n\t\tfor ( ; \n\t\ti < total_coeff ; \n\t\ti ++ ) { \n\t\t\tscantable_offset -- ; \n\t\t\tblock_base [ block_offset + scantable_base [ scantable_offset ] ] = ( short ) ( ( level [ i ] * qmul_base [ qmul_offset + scantable_base [ scantable_offset ] ] + NUM00 ) > > NUM00 ) ; \n\t\t\t} \n\t\t} \n\t$F33287 ( zeros_left ) $F1082 } \n"}, {"code": "public void checkReinitFile ( final boolean needReinit ) throws IOException { \n\tFile bootModeFile = new File ( rootDir , Constants . STARTUPMODE ) ; \n\tif ( ! needReinit ) { \n\t\t$F973 ( log ) $F142821 ( bootModeFile ) $F665 } \n\tif $F1906 ( bootModeFile ) { \n\t\tsetDbStartupModeAsRestoreReinit ( rootDir ) ; \n\t\t} \n\tchown ( bootModeFile , BackupConstants . STORAGEOS_USER , BackupConstants . STORAGEOS_GROUP ) ; \n\tlog . info ( $F20268 ( bootModeFile ) ) ; \n\t} \n"}, {"code": "$F41720 ( value , absMin , absMax , absValue , Math ) "}, {"code": "public void readDOT ( Reader input ) { \n\tDotParser dp = new DotParser ( input , m_nodes , m_edges ) ; \n\tgraphID = dp . parse ( ) ; \n\tsetAppropriateNodeSize ( ) ; \n\tif ( m_le != null ) { \n\t\tm_le . setNodeSize ( paddedNodeWidth , nodeHeight ) ; \n\t\tjBtLayout . setEnabled ( _BOOL ) ; \n\t\tlayoutGraph ( ) ; \n\t\t} \n\t} \n"}, {"code": "private void notifyAllEntity $F72 { \n\tLog . printConcatLine ( $F19211 ( super ) ) ; \n\tsignalShutdown ( resList ) ; \n\tsignalShutdown ( gisList ) ; \n\t$F725 ( resList ) $F725 ( gisList ) } \n"}, {"code": "protected Response calcDefaultSMTPResponse ( HookResult result ) { \n\tif ( result != null ) { \n\t\tint rCode = result . getResult ( ) ; \n\t\tString smtpRetCode = result . getSmtpRetCode ( ) ; \n\t\tString smtpDesc = result . getSmtpDescription ( ) ; \n\t\tif ( ( rCode & HookReturnCode . DENY ) == HookReturnCode . DENY ) { \n\t\t\tif ( smtpRetCode == null ) smtpRetCode = SMTPRetCode . AUTH_FAILED ; \n\t\t\t$F12553 ( smtpDesc ) SMTPResponse response = new SMTPResponse ( smtpRetCode , smtpDesc ) ; \n\t\t\tif ( ( rCode & HookReturnCode . DISCONNECT ) == HookReturnCode . DISCONNECT ) { \n\t\t\t\tresponse . setEndSession ( _BOOL ) ; \n\t\t\t\t} \n\t\t\treturn response ; \n\t\t\t} \n\t\telse if ( ( rCode & HookReturnCode . DENYSOFT ) == HookReturnCode . DENYSOFT ) { \n\t\t\tif ( smtpRetCode == null ) smtpRetCode = SMTPRetCode . LOCAL_ERROR ; \n\t\t\t$F12553 ( smtpDesc ) SMTPResponse response = new SMTPResponse ( smtpRetCode , smtpDesc ) ; \n\t\t\tif ( ( rCode & HookReturnCode . DISCONNECT ) == HookReturnCode . DISCONNECT ) { \n\t\t\t\tresponse . setEndSession ( _BOOL ) ; \n\t\t\t\t} \n\t\t\treturn response ; \n\t\t\t} \n\t\telse if ( ( rCode & HookReturnCode . OK ) == HookReturnCode . OK ) { \n\t\t\tif ( smtpRetCode == null ) smtpRetCode = SMTPRetCode . AUTH_OK ; \n\t\t\t$F12553 ( smtpDesc ) SMTPResponse response = new SMTPResponse ( smtpRetCode , smtpDesc ) ; \n\t\t\tif ( ( rCode & HookReturnCode . DISCONNECT ) == HookReturnCode . DISCONNECT ) { \n\t\t\t\tresponse . setEndSession ( _BOOL ) ; \n\t\t\t\t} \n\t\t\treturn response ; \n\t\t\t} \n\t\telse if ( ( rCode & HookReturnCode . DISCONNECT ) == HookReturnCode . DISCONNECT ) { \n\t\t\tSMTPResponse response = new SMTPResponse $F580 ; \n\t\t\tresponse . setEndSession ( _BOOL ) ; \n\t\t\treturn response ; \n\t\t\t} \n\t\telse $F1337 } \n\telse $F1337 } \n"}, {"code": "public synchronized boolean hasAlerts $F72 { \n\t$F1933 ( alerts , _BOOL ) $F3386 ( alerts ) } \n"}, {"code": "public void testCompareToPosPos1 $F72 { \n\t$F67214 $F10679 int aSign = NUM00 ; \n\tint bSign = NUM00 ; \n\t$F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F79260 ( assertEquals , aNumber , bNumber ) } \n"}, {"code": "protected Collection $F81224 replacePolyAll ( Collection $F81224 annos ) { \n\t$F200702 ( returnAnnos , AnnotationUtils ) for ( AnnotationMirror top : getTopAnnotations ( ) ) { \n\t\tAnnotationMirror annotationInHierarchy = findAnnotationInHierarchy ( annos , top ) ; \n\t\t$F1140 ( annotationInHierarchy , returnAnnos ) } \n\treturn returnAnnos ; \n\t} \n"}, {"code": "public synchronized void resetInputs $F72 throws IOException { \n\tsource . printStatistics ( NUM00 ) ; \n\tsetConfig ( config , source ) ; \n\tsource . resetInputs ( ) ; \n\t$F3223 ( numDocsCreated ) resetLeftovers ( ) ; \n\t} \n"}, {"code": "public void removeMatchingCoupling ( Coupling $F1011 toRemove ) { \n\tfor ( Coupling $F1011 coupling : getCouplings ( ) ) { \n\t\tboolean consumersMatch = attributesMatch ( coupling . getConsumer ( ) , toRemove . getConsumer ( ) ) ; \n\t\tboolean producersMatch = attributesMatch ( coupling . getProducer ( ) , toRemove . getProducer ( ) ) ; \n\t\tif ( consumersMatch && producersMatch ) { \n\t\t\tremoveCoupling ( coupling ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public String toShortString $F72 { \n\t$F83 ( sb ) $F13324 ( xRoadInstance , sb ) for ( String part : getFieldsForStringFormat ( ) ) { \n\t\tif ( part != null ) $F47102 ( sb , part ) } \n\t$F92 ( sb ) } \n"}, {"code": "private boolean checkPattern $F72 { \n\t$F1933 ( pattern , _BOOL ) char leftSeparator = getLeftSeparator ( ) ; \n\tchar rightSeparator = getRightSeparator ( ) ; \n\tStack $F31735 separatorStack = new Stack $F31735 $F72 ; \n\tfor ( $F1088 ( i , pattern ) ) { \n\t\t$F1280 ( cur , pattern , i ) if ( cur == leftSeparator ) $F31742 ( separatorStack , cur ) else if ( cur == rightSeparator ) { \n\t\t\tif ( $F1030 ( separatorStack ) && ( separatorStack . pop ( ) == leftSeparator ) ) $F1448 else { \n\t\t\t\treturn _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F18904 ( separatorStack ) } \n"}, {"code": "public static SQLiteDatabase openOrCreateDatabase ( File file , CursorFactory factory ) { \n\treturn $F140756 ( openOrCreateDatabase , file , factory ) ; \n\t} \n"}, {"code": "public String toString $F105266 { \n\treturn Integer . toString ( ( int ) bytes ) ; \n\t} \n"}, {"code": "private void clampStartingPosition $F72 { \n\tfinal float cX = mBounds . exactCenterX ( ) ; \n\tfinal float cY = mBounds . exactCenterY ( ) ; \n\tfinal float dX = mStartingX - cX ; \n\tfinal float dY = mStartingY - cY ; \n\tfinal float r = mTargetRadius ; \n\tif ( dX * dX + dY * dY > r * r ) { \n\t\tfinal double angle = Math . atan2 ( dY , dX ) ; \n\t\tmClampedStartingX = cX + ( float ) ( Math . cos ( angle ) * r ) ; \n\t\tmClampedStartingY = cY + ( float ) ( Math . sin ( angle ) * r ) ; \n\t\t} \n\telse { \n\t\tmClampedStartingX = mStartingX ; \n\t\tmClampedStartingY = mStartingY ; \n\t\t} \n\t} \n"}, {"code": "public Wildcard ( String pattern , int regexpOptions ) { \n\tthis . regexpOptions = regexpOptions ; \n\tregexp = Pattern . compile ( wildcardToRegex ( pattern ) , regexpOptions ) ; \n\tshortcut = extractShortcut ( pattern ) ; \n\t} \n"}, {"code": "$F13436 ( node , count , capacity , _BOOL , l , last , first , notEmpty ) "}, {"code": "private String local_number $F72 throws ParseException { \n\t$F280 ( s ) $F10954 ( debug , dbg_enter ) try { \n\t\tint lc = NUM00 ; \n\t\twhile ( lexer . hasMoreChars ( ) ) { \n\t\t\tchar la = lexer . lookAhead ( NUM00 ) ; \n\t\t\tif ( la == NUM00 || la == NUM00 || la == NUM00 || la == NUM00 || la == NUM00 || la == NUM00 || Lexer . isHexDigit ( la ) ) { \n\t\t\t\tlexer . consume ( NUM00 ) ; \n\t\t\t\ts . append ( la ) ; \n\t\t\t\tlc ++ ; \n\t\t\t\t} \n\t\t\telse if ( lc > NUM00 ) $F597 else throw createParseException ( NUM00 + la ) ; \n\t\t\t} \n\t\t$F92 ( s ) } \n\tfinally { \n\t\t$F10954 ( debug , dbg_leave ) } \n\t} \n"}, {"code": "private static void appendDefaultValue ( StringBuilder sb , FieldType fieldType , Object defaultValue ) { \n\tif ( fieldType . isEscapedDefaultValue ( ) ) { \n\t\t$F10665 ( appendEscapedWord , sb , defaultValue ) } \n\telse $F288 ( sb , defaultValue ) } \n"}, {"code": "public MetadataBlockDataPicture ( ByteBuffer rawdata ) throws IOException , InvalidFrameException { \n\tinitFromByteBuffer ( rawdata ) ; \n\t} \n"}, {"code": "public void previous $F72 { \n\tif $F9774 ( current ) $F932 m_currentSearchIndex -- ; \n\tm_isBeforeFirst = _BOOL ; \n\tm_isAfterLast = _BOOL ; \n\tif ( m_currentSearchIndex < NUM00 ) { \n\t\t$F63959 ( m_currentSearchIndex , m_reducedResults ) m_isBeforeFirst = _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public void testZeroOne $F72 { \n\t$F45030 $F45033 int aSign = NUM00 ; \n\tint bSign = NUM00 ; \n\t$F15143 $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F45034 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) } \n"}, {"code": "$F5466 public static Method findMethod ( Class c , String name , Object ... params ) { \n\t$F749 paramTypes = getParamTypes ( params ) ; \n\tMethod method = null ; \n\ttry { \n\t\tmethod = c . getDeclaredMethod ( name , paramTypes ) ; \n\t\t} \n\tcatch ( NoSuchMethodException e ) { \n\t\ttry { \n\t\t\tmethod = c . getMethod ( name , paramTypes ) ; \n\t\t\t} \n\t\tcatch ( NoSuchMethodException e1 ) $F845 } \n\tif ( method != null ) method . setAccessible ( _BOOL ) ; \n\treturn method ; \n\t} \n"}, {"code": "public void testPosZero $F72 { \n\t$F50446 $F45033 int aSign = NUM00 ; \n\tint bSign = NUM00 ; \n\tbyte $F3018 = { \n\t\tNUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } \n\t; \n\t$F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F45034 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) } \n"}, {"code": "public boolean closeAllSessions $F72 { \n\twhile ( existsSession ( ) ) { \n\t\tSessionEditor sessionEditor = getFrontmostSessionEditor ( ) ; \n\t\tSessionEditorWorkbench workbench = sessionEditor . getSessionWorkbench ( ) ; \n\t\tSessionWrapper wrapper = workbench . getSessionWrapper ( ) ; \n\t\tif ( ! wrapper . isSessionChanged ( ) ) { \n\t\t\tcloseFrontmostSession ( ) ; \n\t\t\t$F598 } \n\t\t$F20605 ( name , sessionEditor ) int ret = JOptionPane . showConfirmDialog ( JOptionUtils . centeringComp ( ) , NUM00 + name + NUM00 , NUM00 , JOptionPane . YES_NO_CANCEL_OPTION ) ; \n\t\tif ( ret == JOptionPane . NO_OPTION ) { \n\t\t\tcloseFrontmostSession ( ) ; \n\t\t\t$F598 } \n\t\telse if ( ret == JOptionPane . CANCEL_OPTION ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\tSaveSessionAsAction action = new SaveSessionAsAction $F72 ; \n\t\taction . actionPerformed ( new ActionEvent ( this , ActionEvent . ACTION_PERFORMED , NUM00 ) ) ; \n\t\tif ( ! action . isSaved ( ) ) { \n\t\t\tint ret2 = JOptionPane . showConfirmDialog ( JOptionUtils . centeringComp ( ) , NUM00 , NUM00 , JOptionPane . OK_CANCEL_OPTION ) ; \n\t\t\tif ( ret2 == JOptionPane . CANCEL_OPTION ) { \n\t\t\t\treturn _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\tcloseFrontmostSession ( ) ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "private void removeNonVisibleViews ( final int offset ) { \n\tint childCount = getChildCount ( ) ; \n\tif ( mLastItemPosition != mAdapter . getCount ( ) - NUM00 && childCount > NUM00 ) { \n\t\tView firstChild = getChildAt ( NUM00 ) ; \n\t\twhile ( firstChild != null && getChildBottom ( firstChild ) + offset < NUM00 ) { \n\t\t\tremoveViewInLayout ( firstChild ) ; \n\t\t\tchildCount -- ; \n\t\t\tmCachedItemViews . addLast ( firstChild ) ; \n\t\t\tmFirstItemPosition ++ ; \n\t\t\tmListTopOffset += getChildHeight ( firstChild ) ; \n\t\t\tif ( childCount > NUM00 ) { \n\t\t\t\tfirstChild = getChildAt ( NUM00 ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tfirstChild = null ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tif ( mFirstItemPosition != NUM00 && childCount > NUM00 ) { \n\t\tView lastChild = getChildAt ( childCount - NUM00 ) ; \n\t\twhile ( lastChild != null && getChildTop ( lastChild ) + offset > getHeight ( ) ) { \n\t\t\tremoveViewInLayout ( lastChild ) ; \n\t\t\tchildCount -- ; \n\t\t\tmCachedItemViews . addLast ( lastChild ) ; \n\t\t\tmLastItemPosition -- ; \n\t\t\tif ( childCount > NUM00 ) { \n\t\t\t\tlastChild = getChildAt ( childCount - NUM00 ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tlastChild = null ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public $F118223 addMessage ( int index , MType message ) { \n\t$F18045 ( message ) ensureMutableMessageList ( ) ; \n\tmessages . add ( index , message ) ; \n\tif ( builders != null ) { \n\t\t$F103711 ( builders , index ) } \n\tonChanged ( ) ; \n\tincrementModCounts ( ) ; \n\treturn this ; \n\t} \n"}, {"code": "void unlock ( Table t ) $F106 ( locks , t ) "}, {"code": "public void onExceededDatabaseQuota ( String url , String databaseIdentifier , long currentQuota , long estimatedSize , long totalUsedQuota , WebStorage . QuotaUpdater quotaUpdater ) { \n\tif ( LOGV_ENABLED ) { \n\t\tLog . v ( LOGTAG , $F3905 ( url , databaseIdentifier , currentQuota , totalUsedQuota ) ) ; \n\t\t} \n\tlong totalUnusedQuota = mGlobalLimit - totalUsedQuota - mAppCacheMaxSize ; \n\tif ( totalUnusedQuota <= NUM00 ) { \n\t\tif ( totalUsedQuota > NUM00 ) $F5795 ( scheduleOutOfSpaceNotification ) quotaUpdater . updateQuota ( currentQuota ) ; \n\t\tif ( LOGV_ENABLED ) $F101659 ( Log , LOGTAG ) $F665 } \n\tlong newOriginQuota = currentQuota ; \n\tif ( newOriginQuota == NUM00 ) { \n\t\tif ( totalUnusedQuota >= estimatedSize ) { \n\t\t\tnewOriginQuota = estimatedSize ; \n\t\t\t} \n\t\telse { \n\t\t\tif ( LOGV_ENABLED ) { \n\t\t\t\tLog . v ( LOGTAG , $F38 + estimatedSize + NUM00 + totalUnusedQuota ) ; \n\t\t\t\t} \n\t\t\tnewOriginQuota = NUM00 ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tlong quotaIncrease = estimatedSize == NUM00 ? Math . min ( QUOTA_INCREASE_STEP , totalUnusedQuota ) : estimatedSize ; \n\t\tnewOriginQuota += quotaIncrease ; \n\t\t$F109946 ( quotaIncrease , totalUnusedQuota , newOriginQuota , currentQuota ) } \n\tquotaUpdater . updateQuota ( newOriginQuota ) ; \n\tif ( LOGV_ENABLED ) { \n\t\t$F162 ( Log , LOGTAG , newOriginQuota ) } \n\t} \n"}, {"code": "protected String toValString ( Set vals ) { \n\t$F83 ( sb ) boolean first = _BOOL ; \n\tfor ( $F2774 ( i , vals ) ) { \n\t\t$F2778 ( val , i ) val = encodeVal ( val ) ; \n\t\t$F87 ( first , _BOOL , sb ) sb . append ( val ) ; \n\t\t} \n\t$F92 ( sb ) } \n"}, {"code": "private String printOFormat ( short x ) { \n\tString sx = null ; \n\tif ( x == Short . MIN_VALUE ) sx = NUM00 ; \n\telse if ( x < NUM00 ) { \n\t\tString t = Integer . toString ( ( ~ ( - x - NUM00 ) ) ^ Short . MIN_VALUE , NUM00 ) ; \n\t\tswitch $F45530 ( t ) { \n\t\t\t$F21995 ( sx , t ) $F21995 ( sx , t ) $F21995 ( sx , t ) $F21995 ( sx , t ) $F21995 ( sx , t ) } \n\t\t} \n\telse $F161523 ( sx , Integer , x ) return printOFormat ( sx ) ; \n\t} \n"}, {"code": "public static JSONArray readJSONArray ( final JSONArray jsonArray , final int index , final boolean required , final boolean notNull ) throws JSONException { \n\tif ( required ) { \n\t\treturn jsonArray . getJSONArray ( index ) ; \n\t\t} \n\t$F3652 ( notNull , jsonArray , index , String , Locale , NULL_VALUE_FORMAT_ARRAY ) JSONArray value = null ; \n\tif $F3653 ( jsonArray , index ) { \n\t\tvalue = jsonArray . getJSONArray ( index ) ; \n\t\t} \n\treturn value ; \n\t} \n"}, {"code": "private static Bitmap resizePhoto ( Bitmap realImage , float maxImageSize , boolean filter ) { \n\tfloat ratio = Math . min ( ( float ) maxImageSize / realImage . getWidth ( ) , ( float ) maxImageSize / realImage . getHeight ( ) ) ; \n\tint width = Math . round ( ( float ) ratio * realImage . getWidth ( ) ) ; \n\tint height = Math . round ( ( float ) ratio * realImage . getHeight ( ) ) ; \n\tBitmap newBitmap = Bitmap . createScaledBitmap ( realImage , width , height , filter ) ; \n\treturn newBitmap ; \n\t} \n"}, {"code": "private Element createKeyValue $F72 throws Exception { \n\tElement keyValueEle = null ; \n\tPrivateKey key = idmClient . getTenantPrivateKey ( tenantName ) ; \n\tif ( key != null ) { \n\t\tRSAPrivateKey rsaKey = ( RSAPrivateKey ) key ; \n\t\tElement rsaKeyEle = createRSAKeyValue ( rsaKey ) ; \n\t\tif ( rsaKeyEle != null ) { \n\t\t\tkeyValueEle = doc . createElement ( SAMLNames . DS_KEYVALUE ) ; \n\t\t\tkeyValueEle . appendChild ( rsaKeyEle ) ; \n\t\t\t} \n\t\t} \n\treturn keyValueEle ; \n\t} \n"}, {"code": "static protected void expandElement ( Element el , $F15369 list ) { \n\tlist . addAll ( el . getChildren ( NUM00 ) ) ; \n\t$F15369 children = el . getChildren ( ) ; \n\tfor ( $F2277 ( i , children ) ) { \n\t\t$F13395 ( expandElement , children , i , list ) } \n\t} \n"}, {"code": "static void load $F72 $F845 "}, {"code": "public static String dump $F233349 ( map ) { \n\t$F83 ( stringBuilder ) for ( $F22336 ( entry , map ) ) { \n\t\t$F79971 ( stringBuilder , entry ) $F84 ( stringBuilder ) $F79973 ( stringBuilder , entry ) } \n\t$F92 ( stringBuilder ) } \n"}, {"code": "public void changedUpdate ( DocumentEvent e ) $F845 "}, {"code": "private void mergeCollapse $F72 { \n\twhile ( stackSize > NUM00 ) { \n\t\tint n = stackSize - NUM00 ; \n\t\tif ( n > NUM00 && runLen [ n - NUM00 ] <= runLen [ n ] + runLen [ n + NUM00 ] ) { \n\t\t\tif ( runLen [ n - NUM00 ] < runLen [ n + NUM00 ] ) n -- ; \n\t\t\tmergeAt ( n ) ; \n\t\t\t} \n\t\telse if ( runLen [ n ] <= runLen [ n + NUM00 ] ) { \n\t\t\tmergeAt ( n ) ; \n\t\t\t} \n\t\telse $F5153 } \n\t} \n"}, {"code": "private File findFile ( File directory , String name ) throws FileNotFoundException { \n\t$F4453 ( file , directory , name ) if $F3428 ( file ) { \n\t\treturn file ; \n\t\t} \n\tfor ( String child : directory . list ( ) ) { \n\t\tif $F8397 ( child , name ) { \n\t\t\treturn new File ( directory , child ) ; \n\t\t\t} \n\t\t} \n\t$F352240 ( file ) } \n"}, {"code": "public void forceRewriteExif ( String filename , $F198017 tags ) throws $F27136 { \n\tif ( ! rewriteExif ( filename , tags ) ) { \n\t\tExifData tempData = mData ; \n\t\tmData = new ExifData ( DEFAULT_BYTE_ORDER ) ; \n\t\tFileInputStream is = null ; \n\t\tByteArrayOutputStream bytes = null ; \n\t\ttry { \n\t\t\t$F5335 ( is , filename ) $F1659 ( bytes ) doExifStreamIO ( is , bytes ) ; \n\t\t\t$F1208 ( imageBytes , bytes ) readExif ( imageBytes ) ; \n\t\t\tsetTags ( tags ) ; \n\t\t\twriteExif ( imageBytes , filename ) ; \n\t\t\t} \n\t\t$F27615 ( closeSilently , is , e ) finally { \n\t\t\t$F59 ( is ) mData = tempData ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F13436 ( node , count , capacity , _BOOL , l , last , first , notEmpty ) "}, {"code": "protected void removeFromMaps ( String clientType ) { \n\tClient client = ( Client ) clientTypeMap . get ( clientType ) ; \n\texternalClientData . remove ( clientType ) ; \n\t$F147127 ( map , internalClientData , clientType ) if ( map == null ) { \n\t\tremoveFromClientMap ( clientType , client ) ; \n\t\t} \n\telse { \n\t\thandleParentChange ( clientType , map ) ; \n\t\t} \n\tunloadClient ( clientType ) ; \n\t} \n"}, {"code": "public String serialize ( Object object ) throws ConverterException { \n\tdeep = NUM00 ; \n\t$F83 ( sb ) _serialize ( object , sb , $F22202 ) ; \n\t$F92 ( sb ) } \n"}, {"code": "private void endList ( boolean orderedList ) { \n\tif $F5973 ( mParagraphStyles ) { \n\t\tAccumulatedParagraphStyle style = mParagraphStyles . peek ( ) ; \n\t\tParagraphType type = style . getType ( ) ; \n\t\tif ( ( orderedList && ( type . isNumbering ( ) || type == ParagraphType . INDENTATION_OL ) ) || ( ! orderedList && ( type . isBullet ( ) || type == ParagraphType . INDENTATION_UL ) ) ) { \n\t\t\tint indent = style . getRelativeIndent ( ) ; \n\t\t\tif ( indent > NUM00 ) { \n\t\t\t\tstyle . setRelativeIndent ( indent - NUM00 ) ; \n\t\t\t\tstyle . setAbsoluteIndent ( style . getAbsoluteIndent ( ) - NUM00 ) ; \n\t\t\t\t} \n\t\t\telse $F89427 ( mParagraphStyles ) } \n\t\telse { \n\t\t\t$F34454 ( mParagraphStyles ) endList ( orderedList ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void displayVerbose ( ConsoleApplication app , String categoryName , String typeName , Tag tag , $F2689 propertyNames ) { \n\tLocalizableMessage c1 = buildLine ( NUM00 , MAX_LINE_WIDTH ) ; \n\tLocalizableMessage c2 = buildLine ( NUM00 , MAX_LINE_WIDTH ) ; \n\tboolean isFirstManagedObject = _BOOL ; \n\tfor ( $F3465 ( category , categoryMap ) ) { \n\t\tif $F10335 ( categoryName , category ) $F1448 Map < String , AbstractManagedObjectDefinition $F5162 > subTypes = categoryMap . get ( category ) ; \n\t\tfor ( $F3465 ( type , subTypes ) ) { \n\t\t\tif $F10335 ( typeName , type ) $F1448 AbstractManagedObjectDefinition $F5162 mod = subTypes . get ( type ) ; \n\t\t\tif ( cannotDisplay ( app , mod , tag ) ) $F1448 boolean isFirstProperty = _BOOL ; \n\t\t\tSet < PropertyDefinition $F1011 > pds = getPropertyDefinitions ( mod ) ; \n\t\t\tfor ( PropertyDefinition $F1011 pd : pds ) { \n\t\t\t\tif ( cannotDisplay ( app , pd , propertyNames ) ) $F1448 if ( isFirstProperty ) { \n\t\t\t\t\tif ( ! isFirstManagedObject ) { \n\t\t\t\t\t\t$F21416 ( app ) app . println ( c1 ) ; \n\t\t\t\t\t\t$F21416 ( app ) } \n\t\t\t\t\telse { \n\t\t\t\t\t\tisFirstManagedObject = _BOOL ; \n\t\t\t\t\t\t} \n\t\t\t\t\tapp . println ( INFO_DSCFG_HELP_HEADING_COMPONENT . get ( mod . getUserFriendlyName ( ) ) ) ; \n\t\t\t\t\t$F21416 ( app ) app . println ( mod . getSynopsis ( ) ) ; \n\t\t\t\t\tif ( mod . getDescription ( ) != null ) { \n\t\t\t\t\t\t$F21416 ( app ) app . println ( mod . getDescription ( ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F21416 ( app ) app . println ( c2 ) ; \n\t\t\t\t$F21416 ( app ) displayVerboseSingleProperty ( app , mod , pd . getName ( ) ) ; \n\t\t\t\tisFirstProperty = _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private static $F4203 void findUniqueGoals ( Map < TestCase , $F28904 > testToGoals ) { \n\tMap < TestCase , $F28904 > $F161023 ( goalMapCopy ) ; \n\tfor ( Map . Entry < TestCase , $F28904 > entry : testToGoals . entrySet ( ) ) { \n\t\t$F28904 goalSet = new LinkedHashSet $F4203 $F100917 ( entry ) ; \n\t\tfor ( Map . Entry < TestCase , $F28904 > otherEntry : testToGoals . entrySet ( ) ) { \n\t\t\t$F73688 ( entry , otherEntry ) goalSet . removeAll ( otherEntry . getValue ( ) ) ; \n\t\t\t} \n\t\t$F15251 ( goalMapCopy , entry , goalSet ) } \n\t$F725 ( testToGoals ) testToGoals . putAll ( goalMapCopy ) ; \n\t} \n"}, {"code": "private static String formHead $F1947 ( hair , face , neck ) { \n\treturn String . join ( NUM00 , hair , face , neck ) ; \n\t} \n"}, {"code": "public void terminate $F72 { \n\t$F725 ( listeners ) $F72716 ( lookupDisc ) $F72716 ( locatorDisc ) if ( dynamicLocatorDisc != null ) $F72716 ( dynamicLocatorDisc ) } \n"}, {"code": "public void start $F72 $F22067 ( start , System ) "}, {"code": "$F5466 public static String extractProtocol $F116884 ( url ) { \n\tint index = url . indexOf ( URLUtil . SCHEME_SEPARATOR ) ; \n\t$F94834 ( index ) $F35298 ( url , index ) } \n"}, {"code": "protected void loadBuffer $F72 { \n\tint resIdx = minuteSpacing / NUM00 ; \n\t$F127073 ( resIdx ) String fileName = path + etopoFileNames [ resIdx ] ; \n\tdataBuffer = null ; \n\ttry { \n\t\tBinaryBufferedFile binFile = new BinaryBufferedFile ( fileName ) ; \n\t\tbinFile . byteOrder ( _BOOL ) ; \n\t\tbufferWidth = etopoWidths [ resIdx ] ; \n\t\tbufferHeight = etopoHeights [ resIdx ] ; \n\t\tint spacer = NUM00 ; \n\t\tswitch ( minuteSpacing ) { \n\t\t\t$F3312 spacer = NUM00 + this . spacer ; \n\t\t\t$F597 $F3312 spacer = NUM00 + this . spacer ; \n\t\t\t$F597 $F1267 spacer = NUM00 + this . spacer ; \n\t\t\t} \n\t\tdataBuffer = new short [ ( bufferWidth + spacer ) * bufferHeight ] ; \n\t\tfor ( int i = NUM00 ; \n\t\ti < bufferWidth * bufferHeight ; \n\t\ti ++ ) dataBuffer [ i ] = binFile . readShort ( ) ; \n\t\t$F59 ( binFile ) bufferWidth += spacer ; \n\t\t} \n\tcatch ( FileNotFoundException e ) $F142113 ( Debug , fileName ) catch ( IOException e ) { \n\t\t$F103457 ( Debug , e ) } \n\tcatch ( FormatException e ) { \n\t\t$F103457 ( Debug , e ) } \n\t} \n"}, {"code": "protected VersionTag fetchRemoteVersionTag ( Object key ) { \n\tVersionTag tag = null ; \n\tassert this . dataPolicy != DataPolicy . REPLICATE ; \n\tTransactionId txId = cache . getCacheTransactionManager ( ) . suspend ( ) ; \n\ttry { \n\t\tboolean retry = _BOOL ; \n\t\tInternalDistributedMember member = getRandomReplicate ( ) ; \n\t\twhile ( retry ) { \n\t\t\ttry { \n\t\t\t\t$F32472 ( member ) FetchVersionResponse response = RemoteFetchVersionMessage . send ( member , this , key ) ; \n\t\t\t\ttag = response . waitForResponse ( ) ; \n\t\t\t\tretry = _BOOL ; \n\t\t\t\t} \n\t\t\tcatch ( RemoteOperationException e ) { \n\t\t\t\tmember = getRandomReplicate ( ) ; \n\t\t\t\tif ( member != null ) { \n\t\t\t\t\t$F70998 ( logger , member ) } \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tfinally { \n\t\tif ( txId != null ) { \n\t\t\tcache . getCacheTransactionManager ( ) . resume ( txId ) ; \n\t\t\t} \n\t\t} \n\treturn tag ; \n\t} \n"}, {"code": "public Node replaceChild ( Node newChild , Node oldChild ) throws DOMException { \n\tif ( oldChild == null || oldChild . getParentNode ( ) != this ) $F1274 ElemTemplateElement newChildElem = ( ( ElemTemplateElement ) newChild ) ; \n\tElemTemplateElement oldChildElem = ( ( ElemTemplateElement ) oldChild ) ; \n\tElemTemplateElement prev = ( ElemTemplateElement ) oldChildElem . getPreviousSibling ( ) ; \n\tif ( null != prev ) prev . m_nextSibling = newChildElem ; \n\tif ( m_firstChild == oldChildElem ) m_firstChild = newChildElem ; \n\tnewChildElem . m_parentNode = this ; \n\toldChildElem . m_parentNode = null ; \n\tnewChildElem . m_nextSibling = oldChildElem . m_nextSibling ; \n\toldChildElem . m_nextSibling = null ; \n\treturn newChildElem ; \n\t} \n"}, {"code": "public void paintDirty $F72 { \n\tint size = NUM00 ; \n\tsynchronized ( displayLock ) { \n\t\tsize = paintQueueFill ; \n\t\tAnimation [ ] array = paintQueue ; \n\t\tpaintQueue = paintQueueTemp ; \n\t\tpaintQueueTemp = array ; \n\t\tpaintQueueFill = NUM00 ; \n\t\t} \n\tif ( size > NUM00 ) { \n\t\tGraphics wrapper = getCodenameOneGraphics ( ) ; \n\t\tint dwidth = getDisplayWidth ( ) ; \n\t\tint dheight = getDisplayHeight ( ) ; \n\t\tint topX = dwidth ; \n\t\tint topY = dheight ; \n\t\tint bottomX = NUM00 ; \n\t\tint bottomY = NUM00 ; \n\t\tfor ( $F119 ( iter , size ) ) { \n\t\t\tAnimation ani = paintQueueTemp [ iter ] ; \n\t\t\t$F4322 ( ani ) paintQueueTemp [ iter ] = null ; \n\t\t\twrapper . translate ( - wrapper . getTranslateX ( ) , - wrapper . getTranslateY ( ) ) ; \n\t\t\twrapper . setClip ( NUM00 , NUM00 , dwidth , dheight ) ; \n\t\t\tif ( ani instanceof Component ) { \n\t\t\t\tComponent cmp = ( Component ) ani ; \n\t\t\t\tRectangle dirty = cmp . getDirtyRegion ( ) ; \n\t\t\t\tif ( dirty != null ) { \n\t\t\t\t\tDimension d = dirty . getSize ( ) ; \n\t\t\t\t\twrapper . setClip ( dirty . getX ( ) , dirty . getY ( ) , d . getWidth ( ) , d . getHeight ( ) ) ; \n\t\t\t\t\tcmp . setDirtyRegion ( null ) ; \n\t\t\t\t\t} \n\t\t\t\tcmp . paintComponent ( wrapper ) ; \n\t\t\t\tgetPaintableBounds ( cmp , paintDirtyTmpRect ) ; \n\t\t\t\t$F121945 ( cmpAbsX , paintDirtyTmpRect ) $F106734 ( topX , Math , cmpAbsX ) bottomX = Math . max ( cmpAbsX + paintDirtyTmpRect . getWidth ( ) , bottomX ) ; \n\t\t\t\t$F55855 ( cmpAbsY , paintDirtyTmpRect ) $F106734 ( topY , Math , cmpAbsY ) bottomY = Math . max ( cmpAbsY + paintDirtyTmpRect . getHeight ( ) , bottomY ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tbottomX = dwidth ; \n\t\t\t\tbottomY = dheight ; \n\t\t\t\ttopX = NUM00 ; \n\t\t\t\ttopY = NUM00 ; \n\t\t\t\tani . paint ( wrapper ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tpaintOverlay ( wrapper ) ; \n\t\tflushGraphics ( topX , topY , bottomX - topX , bottomY - topY ) ; \n\t\t} \n\t} \n"}, {"code": "public static FSize calcTextSize ( Paint paint , String demoText ) { \n\t$F28883 ( r ) $F77589 ( paint , demoText , r ) return new FSize ( $F78956 ( r ) ) ; \n\t} \n"}, {"code": "private boolean parseDelimiters ( DelimiterProcessor delimiterProcessor , char delimiterChar ) { \n\tDelimiterData res = scanDelimiters ( delimiterProcessor , delimiterChar ) ; \n\t$F1933 ( res , _BOOL ) int numDelims = res . count ; \n\tint startIndex = index ; \n\tindex += numDelims ; \n\tText node = appendText ( input , startIndex , index ) ; \n\tlastDelimiter = new Delimiter ( node , delimiterChar , res . canOpen , res . canClose , lastDelimiter ) ; \n\tlastDelimiter . numDelims = numDelims ; \n\tif ( lastDelimiter . previous != null ) { \n\t\tlastDelimiter . previous . next = lastDelimiter ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "private void clearMoney $F72 $F13478 ( money , updateMoney ) "}, {"code": "private void multiTouchController $F72 { \n\tif ( DEBUG ) Log . i ( NUM00 , NUM00 + mMode + NUM00 + mCurrPt . getNumTouchPoints ( ) + NUM00 + mCurrPt . isDown ( ) + mCurrPt . isMultiTouch ( ) ) ; \n\tswitch ( mMode ) { \n\t\tcase MODE_NOTHING : if ( DEBUG ) $F16229 ( Log ) if ( mCurrPt . isDown ( ) ) { \n\t\t\tselectedObject = objectCanvas . getDraggableObjectAtPoint ( mCurrPt ) ; \n\t\t\tif ( selectedObject != null ) { \n\t\t\t\tmMode = MODE_DRAG ; \n\t\t\t\tobjectCanvas . selectObject ( selectedObject , mCurrPt ) ; \n\t\t\t\tanchorAtThisPositionAndScale ( ) ; \n\t\t\t\tmSettleStartTime = mSettleEndTime = mCurrPt . getEventTime ( ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F597 case MODE_DRAG : if ( DEBUG ) $F16229 ( Log ) if ( ! mCurrPt . isDown ( ) ) { \n\t\t\tmMode = MODE_NOTHING ; \n\t\t\tobjectCanvas . selectObject ( ( selectedObject = null ) , mCurrPt ) ; \n\t\t\t} \n\t\telse if ( mCurrPt . isMultiTouch ( ) ) { \n\t\t\tmMode = MODE_PINCH ; \n\t\t\tanchorAtThisPositionAndScale ( ) ; \n\t\t\tmSettleStartTime = mCurrPt . getEventTime ( ) ; \n\t\t\tmSettleEndTime = mSettleStartTime + EVENT_SETTLE_TIME_INTERVAL ; \n\t\t\t} \n\t\telse { \n\t\t\tif ( mCurrPt . getEventTime ( ) < mSettleEndTime ) $F5795 ( anchorAtThisPositionAndScale ) else $F5795 ( performDragOrPinch ) } \n\t\t$F597 case MODE_PINCH : if ( DEBUG ) $F16229 ( Log ) if ( ! mCurrPt . isMultiTouch ( ) || ! mCurrPt . isDown ( ) ) { \n\t\t\tif ( ! mCurrPt . isDown ( ) ) { \n\t\t\t\tmMode = MODE_NOTHING ; \n\t\t\t\tobjectCanvas . selectObject ( ( selectedObject = null ) , mCurrPt ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tmMode = MODE_DRAG ; \n\t\t\t\tanchorAtThisPositionAndScale ( ) ; \n\t\t\t\tmSettleStartTime = mCurrPt . getEventTime ( ) ; \n\t\t\t\tmSettleEndTime = mSettleStartTime + EVENT_SETTLE_TIME_INTERVAL ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tif ( $F51813 ( Math , mCurrPt , mPrevPt ) > MAX_MULTITOUCH_POS_JUMP_SIZE || $F51815 ( Math , mCurrPt , mPrevPt ) > MAX_MULTITOUCH_POS_JUMP_SIZE || Math . abs ( mCurrPt . getMultiTouchWidth ( ) - mPrevPt . getMultiTouchWidth ( ) ) * NUM00 > MAX_MULTITOUCH_DIM_JUMP_SIZE || Math . abs ( mCurrPt . getMultiTouchHeight ( ) - mPrevPt . getMultiTouchHeight ( ) ) * NUM00 > MAX_MULTITOUCH_DIM_JUMP_SIZE ) { \n\t\t\t\tanchorAtThisPositionAndScale ( ) ; \n\t\t\t\tmSettleStartTime = mCurrPt . getEventTime ( ) ; \n\t\t\t\tmSettleEndTime = mSettleStartTime + EVENT_SETTLE_TIME_INTERVAL ; \n\t\t\t\t} \n\t\t\telse if ( mCurrPt . eventTime < mSettleEndTime ) $F5795 ( anchorAtThisPositionAndScale ) else $F5795 ( performDragOrPinch ) } \n\t\t$F597 } \n\tif ( DEBUG ) Log . i ( NUM00 , NUM00 + mMode + NUM00 + mCurrPt . getNumTouchPoints ( ) + NUM00 + mCurrPt . isDown ( ) + mCurrPt . isMultiTouch ( ) ) ; \n\t} \n"}, {"code": "public void exec $F4374 ( args ) throws Throwable { \n\tURLClassLoader urlClassLoader = new URLClassLoader ( classPath . toArray ( new URL $F2313 ( classPath ) ) ) ; \n\t$F6969 cls = urlClassLoader . loadClass ( mainClass ) ; \n\tMethod method = cls . getDeclaredMethod ( NUM00 , $F18548 ) ; \n\tmethod . setAccessible ( _BOOL ) ; \n\ttry { \n\t\tmethod . invoke ( null , $F8844 ( args ) ) ; \n\t\t} \n\tcatch ( InvocationTargetException e ) { \n\t\tthrow e . getTargetException ( ) ; \n\t\t} \n\t} \n"}, {"code": "$F44168 ( uri , encoding , toString , Charsets ) "}, {"code": "void rollbackLocalTransaction $F72 throws RollbackFailedException { \n\t$F2329 ( _tx ) try { \n\t\tif $F14148 ( _logger , Level ) { \n\t\t\t_logger . log ( Level . FINEST , NUM00 + _tx ) ; \n\t\t\t} \n\t\t$F29036 ( _tx ) } \n\tcatch ( Exception e ) { \n\t\tif $F68674 ( _logger , Level ) $F68681 ( _logger , Level , _tx , e ) throw new RollbackFailedException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public void write ( char $F184368 , int off , int len ) { \n\tif ( ( off < NUM00 ) || ( off > c . length ) || ( len < NUM00 ) || ( ( off + len ) > c . length ) || ( ( off + len ) < NUM00 ) ) $F81129 else $F32905 ( len ) synchronized ( lock ) { \n\t\tint newcount = count + len ; \n\t\t$F90660 ( newcount , buf , Arrays , Math ) System . arraycopy ( c , off , buf , count , len ) ; \n\t\tcount = newcount ; \n\t\t} \n\t} \n"}, {"code": "private void writeJarPostResource ( StringBuilder sb , String path ) { \n\t$F286 ( sb , JAR_RESOURCE_SET ) sb . append ( $F2934 ( path ) ) ; \n\t} \n"}, {"code": "public static String normalize ( String value ) { \n\t$F6928 ( value ) $F1382 ( value ) if $F8908 ( value ) return value ; \n\tboolean space = _BOOL ; \n\t$F1749 ( len , value ) $F1350 ( b , len ) for ( $F119 ( i , len ) ) { \n\t\t$F1280 ( v , value , i ) if ( v == NUM00 ) { \n\t\t\t$F162296 ( space , b , v ) space = _BOOL ; \n\t\t\t} \n\t\telse $F40016 ( b , v , space , _BOOL ) } \n\t$F92 ( b ) } \n"}, {"code": "protected static void appendDecorations ( int basePos , String sourceCode , CreateSimpleLexer langHandler , $F6689 out ) { \n\t$F896 ( sourceCode ) Job job = new Job $F72 ; \n\tjob . setSourceCode ( sourceCode ) ; \n\tjob . setBasePos ( basePos ) ; \n\tlangHandler . decorate ( job ) ; \n\tout . addAll ( job . getDecorations ( ) ) ; \n\t} \n"}, {"code": "protected CarbonDictionaryColumnMetaChunk readLastChunkFromDictionaryMetadataFile ( DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier ) throws IOException { \n\tDictionaryService dictService = CarbonCommonFactory . getDictionaryService ( ) ; \n\tCarbonDictionaryMetadataReader columnMetadataReaderImpl = dictService . getDictionaryMetadataReader ( dictionaryColumnUniqueIdentifier . getCarbonTableIdentifier ( ) , dictionaryColumnUniqueIdentifier . getColumnIdentifier ( ) , carbonStorePath ) ; \n\tCarbonDictionaryColumnMetaChunk carbonDictionaryColumnMetaChunk = null ; \n\ttry { \n\t\tcarbonDictionaryColumnMetaChunk = columnMetadataReaderImpl . readLastEntryOfDictionaryMetaChunk ( ) ; \n\t\t} \n\t$F3229 ( columnMetadataReaderImpl ) return carbonDictionaryColumnMetaChunk ; \n\t} \n"}, {"code": "public static ExternalAppId determineExternalIntentSource ( String packageName , Intent intent ) { \n\tString appId = IntentUtils . safeGetStringExtra ( intent , Browser . EXTRA_APPLICATION_ID ) ; \n\tExternalAppId externalId = ExternalAppId . OTHER ; \n\tif ( appId == null ) { \n\t\tString url = getUrlFromIntent ( intent ) ; \n\t\tif $F99996 ( url , TWITTER_LINK_PREFIX ) { \n\t\t\texternalId = ExternalAppId . TWITTER ; \n\t\t\t} \n\t\telse if $F99996 ( url , FACEBOOK_LINK_PREFIX ) { \n\t\t\texternalId = ExternalAppId . FACEBOOK ; \n\t\t\t} \n\t\telse if $F99996 ( url , NEWS_LINK_PREFIX ) { \n\t\t\texternalId = ExternalAppId . NEWS ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tif $F1238 ( appId , PACKAGE_PLUS ) { \n\t\t\texternalId = ExternalAppId . PLUS ; \n\t\t\t} \n\t\telse if $F1238 ( appId , PACKAGE_GMAIL ) { \n\t\t\texternalId = ExternalAppId . GMAIL ; \n\t\t\t} \n\t\telse if $F1238 ( appId , PACKAGE_HANGOUTS ) { \n\t\t\texternalId = ExternalAppId . HANGOUTS ; \n\t\t\t} \n\t\telse if $F1238 ( appId , PACKAGE_MESSENGER ) { \n\t\t\texternalId = ExternalAppId . MESSENGER ; \n\t\t\t} \n\t\telse if $F1238 ( appId , PACKAGE_LINE ) { \n\t\t\texternalId = ExternalAppId . LINE ; \n\t\t\t} \n\t\telse if $F1238 ( appId , PACKAGE_WHATSAPP ) { \n\t\t\texternalId = ExternalAppId . WHATSAPP ; \n\t\t\t} \n\t\telse if $F1238 ( appId , PACKAGE_GSA ) { \n\t\t\texternalId = ExternalAppId . GSA ; \n\t\t\t} \n\t\telse if $F1238 ( appId , packageName ) { \n\t\t\texternalId = ExternalAppId . CHROME ; \n\t\t\t} \n\t\t} \n\treturn externalId ; \n\t} \n"}, {"code": "protected TableHDU ( Header hdr , T td ) { \n\tsuper ( hdr , td ) ; \n\t} \n"}, {"code": "public void pushStylesheet ( Stylesheet s ) { \n\tif $F10471 ( m_stylesheets ) m_stylesheetRoot = ( StylesheetRoot ) s ; \n\tm_stylesheets . push ( s ) ; \n\t} \n"}, {"code": "public boolean isBlank ( final CharSequence cs ) { \n\tint strLen ; \n\tif ( cs == null || ( strLen = cs . length ( ) ) == NUM00 ) { \n\t\treturn _BOOL ; \n\t\t} \n\tfor ( $F119 ( i , strLen ) ) { \n\t\tif $F11994 ( Character , cs , i ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void stop $F72 throws $F3 { \n\t$F7589 ( thread ) $F164395 ( selector ) } \n"}, {"code": "private Document parse ( final String data , DocumentBuilder docBuilder ) { \n\t$F13264 ( docBuilder , data ) Document document = null ; \n\ttry { \n\t\t$F20818 ( buf ) if $F14943 ( data ) $F288 ( buf , BEGIN_PART ) buf . append ( data ) ; \n\t\tif $F43141 ( data , END_PART ) $F288 ( buf , END_PART ) InputSource inputSource = new InputSource ( $F86540 ( buf ) ) ; \n\t\tdocument = docBuilder . parse ( inputSource ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tLOGGER . warn ( $F5351 ( e ) ) ; \n\t\t} \n\treturn document ; \n\t} \n"}, {"code": "private XNetReply loadChars ( java . io . BufferedReader istream ) throws $F3258 { \n\tString s = NUM00 ; \n\t$F36243 ( s , istream ) $F15998 ( log , s ) if ( s == null ) $F1337 else { \n\t\treturn new XNetReply ( s ) ; \n\t\t} \n\t} \n"}, {"code": "public synchronized void removeConnectionManager ( final HttpConnectionManager connectionManager ) { \n\t$F4640 ( shutdown ) connectionManagers . remove ( connectionManager ) ; \n\t} \n"}, {"code": "private boolean addState ( long stateNumber ) { \n\tif ( firstState < NUM00 ) { \n\t\tfirstState = stateNumber ; \n\t\t} \n\telse if ( stepSize < NUM00 ) { \n\t\t$F443511 ( stepSize , stateNumber , firstState ) } \n\telse { \n\t\t$F82462 ( step , stateNumber , lastState ) $F35938 ( step , stepSize , _BOOL ) } \n\tlastState = stateNumber ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void reset $F72 { \n\tadler = NUM00 ; \n\t} \n"}, {"code": "public static boolean isLibraryResourceRoot ( $F5466 VirtualFile res ) { \n\tif ( res != null ) { \n\t\tVirtualFile aar = res . getParent ( ) ; \n\t\tif ( aar != null ) { \n\t\t\tVirtualFile exploded = aar . getParent ( ) ; \n\t\t\tif ( exploded != null ) { \n\t\t\t\t$F20605 ( name , exploded ) if $F22081 ( name , EXPLODED_BUNDLES , EXPLODED_AAR ) { \n\t\t\t\t\treturn _BOOL ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void failEngine ( String reason , $F5466 Throwable failure ) { \n\tif $F39091 ( failEngineLock ) { \n\t\tstore . incRef ( ) ; \n\t\ttry { \n\t\t\ttry $F47196 ( closeNoLock , reason ) finally { \n\t\t\t\tif ( failedEngine != null ) { \n\t\t\t\t\t$F39971 ( logger , reason , failure ) $F665 } \n\t\t\t\t$F66731 ( logger , failure , reason ) failedEngine = ( failure != null ) ? failure : new IllegalStateException ( reason ) ; \n\t\t\t\tif ( Lucene . isCorruptionException ( failure ) ) { \n\t\t\t\t\ttry { \n\t\t\t\t\t\tstore . markStoreCorrupted ( new IOException ( NUM00 + reason + NUM00 , ExceptionsHelper . unwrapCorruption ( failure ) ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t$F60644 ( logger , e ) } \n\t\t\t\tfailedEngineListener . onFailedEngine ( shardId , reason , failure ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( Throwable t ) $F23016 ( logger , t ) finally { \n\t\t\tstore . decRef ( ) ; \n\t\t\t} \n\t\t} \n\telse $F79594 ( logger , reason , failure ) } \n"}, {"code": "$F40513 ( values ) "}, {"code": "$F1 default CompletableFuture < OptionalInt > maxInt ( final ToIntFunction $F11632 fn ) $F257945 ( CompletableFuture , getExec ) "}, {"code": "private void addVNXFileStorageSystemIntoCache ( String storageSystemURI , DistributedQueueItemProcessedCallback callBack ) { \n\tif $F35028 ( StringUtils , storageSystemURI ) $F1717 ( VNXFILE_CACHE , storageSystemURI , callBack ) } \n"}, {"code": "void resetToPreferredSizes ( int availableSize ) { \n\t$F2027 testSizes = getPreferredSizes ( ) ; \n\tint totalSize = NUM00 ; \n\tfor ( $F6268 ( counter ) ) { \n\t\tif ( testSizes [ counter ] != - NUM00 ) { \n\t\t\ttotalSize += testSizes [ counter ] ; \n\t\t\t} \n\t\t} \n\tif ( totalSize > availableSize ) { \n\t\ttestSizes = getMinimumSizes ( ) ; \n\t\ttotalSize = NUM00 ; \n\t\tfor ( $F6268 ( counter ) ) { \n\t\t\tif ( testSizes [ counter ] != - NUM00 ) { \n\t\t\t\ttotalSize += testSizes [ counter ] ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tsetSizes ( testSizes ) ; \n\tdistributeSpace ( availableSize - totalSize , _BOOL ) ; \n\t} \n"}, {"code": "$F1 public $F96 decode $F97 ( data ) throws Exception { \n\tif ( data [ NUM00 ] == NUM00 && data [ NUM00 ] == NUM00 && data [ NUM00 ] == NUM00 ) { \n\t\treturn data ; \n\t\t} \n\tint bufSize = NUM00 ; \n\tFastByteArrayOutputStream bos = null ; \n\tboolean failed = _BOOL ; \n\t$F18832 ( orgSize , data ) if ( data != null ) { \n\t\twhile ( failed ) { \n\t\t\tfinal Inflater inf = new Inflater $F72 ; \n\t\t\tinf . setInput ( data ) ; \n\t\t\t$F18832 ( size , data ) bos = new FastByteArrayOutputStream ( size ) ; \n\t\t\t$F45132 ( size , bufSize ) $F4727 ( buf , bufSize ) int count ; \n\t\t\ttry { \n\t\t\t\twhile $F197883 ( inf ) { \n\t\t\t\t\tcount = inf . inflate ( buf ) ; \n\t\t\t\t\t$F11584 ( bos , buf , count ) if ( inf . getRemaining ( ) == NUM00 ) $F5153 } \n\t\t\t\tfailed = _BOOL ; \n\t\t\t\t} \n\t\t\tcatch ( final Exception ee ) { \n\t\t\t\tLogWriter . writeLog ( NUM00 + ee ) ; \n\t\t\t\tfailed = _BOOL ; \n\t\t\t\thasError = _BOOL ; \n\t\t\t\tif ( data . length == orgSize && data . length > NUM00 ) { \n\t\t\t\t\tfailed = _BOOL ; \n\t\t\t\t\t} \n\t\t\t\telse if $F3305 ( data ) { \n\t\t\t\t\tfinal $F96 newData = new byte $F12500 ( data ) ; \n\t\t\t\t\t$F12508 ( System , data , newData ) data = newData ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tfailed = _BOOL ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t$F3031 ( data , bos ) return applyPredictor ( predictor , data , colors , bitsPerComponent , columns ) ; \n\t\t} \n\treturn data ; \n\t} \n"}, {"code": "public boolean isProcessing $F72 $F1522 ( mRunning ) "}, {"code": "$F13429 ( criteria , createCriteriaInternal , oredCriteria ) "}, {"code": "private static InputStreamReader decompressWith7Zip ( final String archivePath ) throws ConfigurationException { \n\tPATH_PROGRAM_7ZIP = ( String ) config . getConfigParameter ( ConfigurationKeys . PATH_PROGRAM_7ZIP ) ; \n\tif ( PATH_PROGRAM_7ZIP == null ) { \n\t\tthrow ErrorFactory . createConfigurationException ( ErrorKeys . CONFIGURATION_PARAMETER_UNDEFINED ) ; \n\t\t} \n\ttry { \n\t\t$F43316 ( runtime , Runtime ) Process p = runtime . exec ( PATH_PROGRAM_7ZIP + NUM00 + archivePath + NUM00 ) ; \n\t\treturn new InputStreamReader ( p . getInputStream ( ) , WIKIPEDIA_ENCODING ) ; \n\t\t} \n\t$F12237 ( e ) } \n"}, {"code": "public void makeImmutable $F72 { \n\t$F4246 ( isMutable , _BOOL ) } \n"}, {"code": "private final Object arenaExchange $F200458 ( item , timed , ns ) { \n\t$F46551 a = arena ; \n\t$F200460 ( p , participant ) for ( int i = p . index ; \n\t; \n\t) { \n\t\tint b , m , c ; \n\t\tlong j ; \n\t\tNode q = ( Node ) U . getObjectVolatile ( a , j = ( i < < ASHIFT ) + ABASE ) ; \n\t\tif ( q != null && U . compareAndSwapObject ( a , j , q , null ) ) $F200465 ( v , q , item , w , U ) else if ( i <= ( m = ( b = bound ) & MMASK ) && q == null ) { \n\t\t\tp . item = item ; \n\t\t\tif $F200476 ( U , a , j , p ) { \n\t\t\t\tlong end = ( timed && m == NUM00 ) ? System . nanoTime ( ) + ns : NUM00 ; \n\t\t\t\t$F686 ( t , Thread ) for ( int h = p . hash , spins = SPINS ; \n\t\t\t\t; \n\t\t\t\t) { \n\t\t\t\t\tObject v = p . match ; \n\t\t\t\t\tif ( v != null ) { \n\t\t\t\t\t\t$F200524 ( U , p , MATCH ) p . item = null ; \n\t\t\t\t\t\tp . hash = h ; \n\t\t\t\t\t\treturn v ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse if ( spins > NUM00 ) $F200502 ( h , SPINS , t , spins , Thread ) else if ( U . getObjectVolatile ( a , j ) != p ) spins = SPINS ; \n\t\t\t\t\telse if ( $F147861 ( t ) && m == NUM00 && $F200507 ( timed , ns , end , System ) ) { \n\t\t\t\t\t\tU . putObject ( t , BLOCKER , this ) ; \n\t\t\t\t\t\tp . parked = t ; \n\t\t\t\t\t\tif ( U . getObjectVolatile ( a , j ) == p ) U . park ( _BOOL , ns ) ; \n\t\t\t\t\t\tp . parked = null ; \n\t\t\t\t\t\t$F200511 ( U , t , BLOCKER ) } \n\t\t\t\t\telse if ( U . getObjectVolatile ( a , j ) == p && U . compareAndSwapObject ( a , j , p , null ) ) { \n\t\t\t\t\t\tif ( m != NUM00 ) U . compareAndSwapInt ( this , BOUND , b , b + SEQ - NUM00 ) ; \n\t\t\t\t\t\tp . item = null ; \n\t\t\t\t\t\tp . hash = h ; \n\t\t\t\t\t\ti = p . index >>>= NUM00 ; \n\t\t\t\t\t\tif $F2754 ( Thread ) $F1274 if ( timed && m == NUM00 && ns <= NUM00 ) return TIMED_OUT ; \n\t\t\t\t\t\t$F597 } \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse p . item = null ; \n\t\t\t} \n\t\telse { \n\t\t\tif ( p . bound != b ) { \n\t\t\t\tp . bound = b ; \n\t\t\t\tp . collides = NUM00 ; \n\t\t\t\ti = ( i != m || m == NUM00 ) ? m : m - NUM00 ; \n\t\t\t\t} \n\t\t\telse if ( ( c = p . collides ) < m || m == FULL || ! U . compareAndSwapInt ( this , BOUND , b , b + SEQ + NUM00 ) ) { \n\t\t\t\tp . collides = c + NUM00 ; \n\t\t\t\ti = ( i == NUM00 ) ? m : i - NUM00 ; \n\t\t\t\t} \n\t\t\telse i = m + NUM00 ; \n\t\t\tp . index = i ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void send ( String data ) throws IOException { \n\tDatagramPacket dp = new DatagramPacket ( data . getBytes ( ) , data . length ( ) , multicastGroup ) ; \n\tdatagramSocket . send ( dp ) ; \n\t} \n"}, {"code": "private void removeStaleRangeReferences $F72 { \n\tremoveStaleReferences ( rangeReferenceQueue , ranges ) ; \n\t} \n"}, {"code": "private boolean isExported ( URI id , $F28584 exportedVolumes ) $F298 ( exportedVolumes , id ) "}, {"code": "private String fixMonitorLinks ( String fixString , String dumpName ) { \n\tif $F56559 ( fixString ) { \n\t\tfixString = fixString . replaceAll ( NUM00 , NUM00 + dumpName + NUM00 ) ; \n\t\t} \n\treturn ( fixString ) ; \n\t} \n"}, {"code": "protected static TestDimensionConfig buildStandardDimensionConfig ( TestApiDimensionName dimensionName ) { \n\treturn new TestDimensionConfig ( dimensionName , dimensionName . asName ( ) , getDefaultKeyValueStore ( dimensionName ) , getDefaultSearchProvider ( ) , getDefaultFields ( ) , getDefaultFields ( ) ) ; \n\t} \n"}, {"code": "public String toString $F72 { \n\t$F8755 ( sb ) if ( type != SET_CONSTRAINTS ) { \n\t\tsb . append ( type == AS_IS ? NUM00 : NUM00 ) ; \n\t\t} \n\tsb . append ( loader ) ; \n\t$F84 ( sb ) for ( $F1139 ( i , contextElements ) ) $F70285 ( i , sb , contextElements ) if ( principals == null ) $F86 ( sb ) else { \n\t\t$F84 ( sb ) for ( $F1139 ( i , principals ) ) $F70285 ( i , sb , principals ) $F84 ( sb ) } \n\tfor ( $F1139 ( i , permissions ) ) $F70285 ( i , sb , permissions ) $F84 ( sb ) $F92 ( sb ) } \n"}, {"code": "public synchronized void cacheReposts $F27146 ( newRepostIds ) { \n\tTreeSet $F17803 $F32033 ( reposts ) ; \n\treposts . addAll ( Longs . asList ( repostCache . get ( ) ) ) ; \n\treposts . addAll ( newRepostIds ) ; \n\trepostCache . set ( Longs . toArray ( reposts ) ) ; \n\t} \n"}, {"code": "$F60342 ( mSmallestWidthDp , mInPortrait ) "}, {"code": "protected final $F6969 defineClass ( String className , $F96 classRep , int offset , int length ) throws ClassFormatError { \n\treturn defineClass ( className , classRep , offset , length , null ) ; \n\t} \n"}, {"code": "$F213785 ( buf , tags , mod , this , t , e ) "}, {"code": "private void writeNewlineOnDebug ( XMLStreamWriter out ) throws XMLStreamException { \n\tif $F88618 ( LOG ) { \n\t\tout . writeCharacters ( NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "public RequestHandle put ( String url , ResponseHandlerInterface responseHandler ) { \n\treturn put ( null , url , null , responseHandler ) ; \n\t} \n"}, {"code": "public Discretize ( Element discretize , FieldMetaInfo . Optype opType , $F53625 fieldDefs ) throws Exception { \n\tsuper ( opType , fieldDefs ) ; \n\t$F321395 ( m_fieldName , discretize ) $F321395 ( m_mapMissingTo , discretize ) if $F22 ( m_mapMissingTo ) { \n\t\tm_mapMissingDefined = _BOOL ; \n\t\t} \n\t$F321395 ( m_defaultValue , discretize ) if $F22 ( m_defaultValue ) { \n\t\tm_defaultValueDefined = _BOOL ; \n\t\t} \n\t$F315146 ( dbL , discretize ) for ( $F85554 ( i , dbL ) ) { \n\t\t$F61359 ( dbN , dbL , i ) if $F61358 ( dbN , Node ) { \n\t\t\t$F6721 ( dbE , dbN ) DiscretizeBin db = new DiscretizeBin ( dbE , m_opType ) ; \n\t\t\tm_bins . add ( db ) ; \n\t\t\t} \n\t\t} \n\t$F60488 ( fieldDefs , setUpField ) } \n"}, {"code": "private static String quadTree ( final MapTile aTile ) { \n\t$F83 ( quadKey ) for ( int i = aTile . zoomLevel ; \n\ti > NUM00 ; \n\ti -- ) { \n\t\tint digit = NUM00 ; \n\t\tint mask = NUM00 < < ( i - NUM00 ) ; \n\t\tif ( ( aTile . x & mask ) != NUM00 ) digit += NUM00 ; \n\t\tif ( ( aTile . y & mask ) != NUM00 ) digit += NUM00 ; \n\t\tquadKey . append ( digit ) ; \n\t\t} \n\t$F92 ( quadKey ) } \n"}, {"code": "public static $F2027 concatAllInt ( $F2027 ... arrays ) { \n\tint totalLength = NUM00 ; \n\t$F18832 ( subArrayCount , arrays ) $F189285 ( i , subArrayCount , totalLength , arrays ) $F2027 $F189287 ( result , Arrays , arrays , totalLength ) ; \n\t$F26358 ( offset , arrays ) $F189290 ( i , subArrayCount , System , arrays , result , offset ) return result ; \n\t} \n"}, {"code": "public static double log1p ( double value ) { \n\tif ( USE_JDK_MATH ) { \n\t\treturn STRICT_MATH ? StrictMath . log1p ( value ) : Math . log1p ( value ) ; \n\t\t} \n\tif ( _BOOL ) { \n\t\tif ( value == Double . POSITIVE_INFINITY ) $F90685 ( Double ) double valuePlusOne = NUM00 + value ; \n\t\tif ( valuePlusOne == NUM00 ) { \n\t\t\treturn value ; \n\t\t\t} \n\t\telse { \n\t\t\treturn FastMath . log ( valuePlusOne ) * ( value / ( valuePlusOne - NUM00 ) ) ; \n\t\t\t} \n\t\t} \n\tif ( value > - NUM00 ) { \n\t\tif ( value == Double . POSITIVE_INFINITY ) $F90685 ( Double ) double valuePlusOne = NUM00 + value ; \n\t\tif ( valuePlusOne == NUM00 ) { \n\t\t\treturn value ; \n\t\t\t} \n\t\telse if $F20932 ( Math , value ) { \n\t\t\tdouble z = value / ( value + NUM00 ) ; \n\t\t\tdouble z2 = z * z ; \n\t\t\treturn z * ( NUM00 + z2 * ( $F52906 + z2 * ( $F52906 + z2 * ( $F52906 + z2 * ( $F52906 + z2 * ( $F52906 ) ) ) ) ) ) ; \n\t\t\t} \n\t\tint valuePlusOneBitsHi = ( int ) ( Double . doubleToRawLongBits ( valuePlusOne ) > > NUM00 ) & NUM00 ; \n\t\tint valuePlusOneExp = ( valuePlusOneBitsHi > > NUM00 ) - MAX_DOUBLE_EXPONENT ; \n\t\tint xIndex = ( ( valuePlusOneBitsHi < < NUM00 ) > > > ( NUM00 - LOG_BITS ) ) ; \n\t\tdouble z = ( valuePlusOne * twoPowTab [ - valuePlusOneExp - MIN_DOUBLE_EXPONENT ] ) * logXInvTab [ xIndex ] - NUM00 ; \n\t\tz *= ( NUM00 - z * ( $F52906 - z * $F52906 ) ) ; \n\t\treturn valuePlusOneExp * LOG_2 + logXLogTab [ xIndex ] + ( z + ( value - ( valuePlusOne - NUM00 ) ) / valuePlusOne ) ; \n\t\t} \n\telse if ( value == - NUM00 ) $F86429 ( Double ) else $F6623 ( Double ) } \n"}, {"code": "public static $F2469 ones ( int bits ) { \n\t$F2469 v = new long [ ( ( bits - NUM00 ) > > > LONG_LOG2_SIZE ) + NUM00 ] ; \n\tfinal int fillWords = bits > > > LONG_LOG2_SIZE ; \n\tfinal int fillBits = bits & LONG_LOG2_MASK ; \n\tArrays . fill ( v , NUM00 , fillWords , LONG_ALL_BITS ) ; \n\tif ( fillWords < v . length ) { \n\t\t$F8528 ( v ) = $F76927 ( fillBits ) ; \n\t\t} \n\treturn v ; \n\t} \n"}, {"code": "private boolean checkCurrentKeyAge $F72 throws NumberFormatException { \n\tlong currentTokenKeyTS = Long . parseLong ( _cachedTokenKeysBundle . getCurrentKeyEntry ( ) ) ; \n\t$F657 ( now , System ) long diff = now - currentTokenKeyTS ; \n\t$F232230 ( diff , _keyRotationIntervalInMsecs , _BOOL ) return _BOOL ; \n\t} \n"}, {"code": "public final void pushContextNodeList ( DTMIterator nl ) $F31742 ( m_contextNodeLists , nl ) "}, {"code": "public void note ( Element e , String msg ) { \n\tmessager . printMessage ( Diagnostic . Kind . NOTE , msg , e ) ; \n\t} \n"}, {"code": "public static PublicKey generatePublicKey ( String encodedPublicKey ) { \n\ttry $F118377 ( decodedKey , Base64 , encodedPublicKey , keyFactory , KeyFactory , KEY_FACTORY_ALGORITHM ) $F29414 ( e ) $F29417 ( Log , TAG , e ) } \n"}, {"code": "$F1 public $F987 listOptions $F72 { \n\t$F20795 ( result ) $F9010 ( result , Collections , super ) $F1000 ( result ) $F1007 ( result ) } \n"}, {"code": "public TrustSource add ( File trustedCAPemFile ) { \n\t$F826 ( trustedCAPemFile ) String pemFileContents ; \n\ttry { \n\t\tpemFileContents = Files . toString ( trustedCAPemFile , Charset . forName ( NUM00 ) ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\tthrow new UncheckedIOException $F27414 ( trustedCAPemFile , e ) ; \n\t\t} \n\treturn add ( pemFileContents ) ; \n\t} \n"}, {"code": "StringVector process \"STRING\" LIST $F17723 ( handler , uri , name , rawName , value ) { \n\t$F17727 ( tokenizer , value ) $F17729 ( nStrings , tokenizer ) $F17731 ( strings , nStrings ) for ( $F119 ( i , nStrings ) ) { \n\t\tstrings . addElement ( tokenizer . nextToken ( ) ) ; \n\t\t} \n\treturn strings ; \n\t} \n"}, {"code": "private String checkforRegex ( String aRegexFragment ) { \n\t$F1121 ( result ) final StringCharacterIterator iterator = new StringCharacterIterator ( aRegexFragment ) ; \n\t$F118352 ( character , iterator ) while ( character != CharacterIterator . DONE ) { \n\t\tif ( character == NUM00 ) $F86 ( result ) else if ( character == NUM00 ) $F86 ( result ) else if ( character == NUM00 ) $F86 ( result ) else if ( character == NUM00 ) $F86 ( result ) else if ( character == NUM00 ) $F86 ( result ) else if ( character == NUM00 ) $F86 ( result ) else if ( character == NUM00 ) $F86 ( result ) else if ( character == NUM00 ) $F86 ( result ) else if ( character == NUM00 ) $F86 ( result ) else if ( character == NUM00 ) $F86 ( result ) else if ( character == NUM00 ) $F86 ( result ) else if ( character == NUM00 ) $F86 ( result ) else $F118355 ( character , result ) $F45366 ( character , iterator ) } \n\t$F92 ( result ) } \n"}, {"code": "protected void drawValueLabel ( DrawingContext context , Slice slice , double radius , Row row , int rowIndex ) { \n\t$F65474 value = slice . end - slice . start ; \n\tFormat format = getValueFormat ( ) ; \n\tif ( ( format == null ) && ( value instanceof Number ) ) { \n\t\t$F90333 ( format , NumberFormat ) } \n\tString text = ( format != null ) ? format . format ( value ) : value . toString ( ) ; \n\tColorMapper colors = getValueColor ( ) ; \n\tPaint paint = colors . get ( rowIndex ) ; \n\tFont font = getValueFont ( ) ; \n\tdouble fontSize = font . getSize2D ( ) ; \n\tLocation location = getValueLocation ( ) ; \n\tdouble alignX = getValueAlignmentX ( ) ; \n\tdouble alignY = getValueAlignmentY ( ) ; \n\tdouble rotation = getValueRotation ( ) ; \n\tdouble distance = getValueDistance ( ) ; \n\tif ( MathUtils . isCalculatable ( distance ) ) { \n\t\tdistance *= fontSize ; \n\t\t} \n\telse { \n\t\tdistance = NUM00 ; \n\t\t} \n\tdouble radiusRelOuter = getOuterRadius ( ) ; \n\tdouble radiusRelInner = getInnerRadius ( ) ; \n\tdouble radiusOuter = radius * radiusRelOuter ; \n\tdouble radiusInner = radius * radiusRelInner ; \n\tdouble distanceV = distance ; \n\tdouble labelPosV ; \n\tif ( location == Location . NORTH ) { \n\t\tlabelPosV = radiusOuter + distanceV ; \n\t\t} \n\telse if ( location == Location . SOUTH ) { \n\t\tlabelPosV = Math . max ( radiusInner - distanceV , NUM00 ) ; \n\t\t} \n\telse { \n\t\tdouble sliceHeight = radiusOuter - radiusInner ; \n\t\tif ( NUM00 * distance >= sliceHeight ) $F18712 ( alignY , distanceV ) labelPosV = radiusInner + distanceV + alignY * ( sliceHeight - NUM00 * distanceV ) ; \n\t\t} \n\tdouble sum = plot . getSum ( row . getSource ( ) ) ; \n\t$F32905 ( sum ) double sliceStartRel = slice . start / sum ; \n\tdouble sliceEndRel = slice . end / sum ; \n\tdouble circumference = NUM00 * labelPosV * Math . PI ; \n\tdouble distanceRelH = distance / circumference ; \n\tdouble sliceWidthRel = sliceEndRel - sliceStartRel ; \n\tif ( NUM00 * distanceRelH >= sliceWidthRel ) $F18712 ( alignX , distanceRelH ) double labelPosRelH = sliceStartRel + distanceRelH + alignX * ( sliceWidthRel - NUM00 * distanceRelH ) ; \n\tdouble start = plot . getStart ( ) ; \n\tdouble angleStart = Math . toRadians ( - start ) ; \n\tdouble direction = NUM00 ; \n\tif ( ! plot . isClockwise ( ) ) $F44867 ( direction ) double angle = angleStart + direction * labelPosRelH * NUM00 * Math . PI ; \n\t$F54226 ( dirX , Math , angle ) $F33859 ( dirY , Math , angle ) Label label = new Label ( text ) ; \n\tlabel . setAlignmentX ( NUM00 - NUM00 * dirX - NUM00 ) ; \n\tlabel . setAlignmentY ( NUM00 * dirY + NUM00 ) ; \n\tlabel . setRotation ( rotation ) ; \n\tlabel . setColor ( paint ) ; \n\tlabel . setFont ( font ) ; \n\tDimension2D sizeLabel = label . getPreferredSize ( ) ; \n\tdouble anchorX = NUM00 ; \n\tdouble anchorY = NUM00 ; \n\tif ( location == Location . NORTH || location == Location . SOUTH ) { \n\t\tanchorX = dirX * sizeLabel . getWidth ( ) / NUM00 ; \n\t\tanchorY = dirY * sizeLabel . getHeight ( ) / NUM00 ; \n\t\tif ( location == Location . SOUTH ) { \n\t\t\tanchorX = - anchorX ; \n\t\t\tanchorY = - anchorY ; \n\t\t\t} \n\t\t} \n\tdouble x = labelPosV * dirX + anchorX - $F77576 ( sizeLabel ) ; \n\tdouble y = labelPosV * dirY + anchorY - $F63370 ( sizeLabel ) ; \n\t$F324 ( w , sizeLabel ) $F322 ( h , sizeLabel ) label . setBounds ( x , y , w , h ) ; \n\tlabel . draw ( context ) ; \n\t} \n"}, {"code": "public static void downto ( Float self , Number to , $F50462 ( closure ) ) { \n\tfloat to1 = to . floatValue ( ) ; \n\tif ( self >= to1 ) { \n\t\tfor ( float i = self ; \n\t\ti >= to1 ; \n\t\ti -- ) $F50467 ( closure , i ) } \n\telse $F50472 ( to , self ) } \n"}, {"code": "public static AttributeDescription objectClass $F72 { \n\treturn OBJECT_CLASS ; \n\t} \n"}, {"code": "public void addKeyValueComment ( String keyName , String value ) { \n\tint keyIndex ; \n\tif ( ( keyIndex = findKeyCommentIndex ( keyName ) ) < NUM00 ) { \n\t\tkeyValComments . add ( NUM00 + keyName + NUM00 + value + NUM00 ) ; \n\t\t$F665 } \n\t$F28293 ( log , keyName ) keyValComments . set ( keyIndex , NUM00 + keyName + NUM00 + value + NUM00 ) ; \n\t} \n"}, {"code": "private String isInputChecked ( String dataSet , String value ) { \n\tif $F1256 ( dataSet , value ) $F2455 $F1278 } \n"}, {"code": "public final void popSubContextList $F72 $F89427 ( m_axesIteratorStack ) "}, {"code": "private DriverTask createDriverTask ( String taskType ) { \n\tString taskID = String . format ( NUM00 , HP3PARConstants . DRIVER_NAME , taskType , UUID . randomUUID ( ) ) ; \n\tDriverTask task = new HP3PARDriverTask ( taskID ) ; \n\treturn task ; \n\t} \n"}, {"code": "public static void write ( File file , CharSequence data , Charset encoding , boolean append ) throws IOException { \n\tString str = $F48364 ( data ) ; \n\twriteStringToFile ( file , str , encoding , append ) ; \n\t} \n"}, {"code": "public void store ( Element cat , $F3803 trees ) { \n\tCatalogTreeManager manager = InstanceManager . getDefault ( jmri . CatalogTreeManager . class ) ; \n\t$F106626 ( cat ) $F13712 ( iter , trees ) while $F2921 ( iter ) { \n\t\t$F13714 ( sname , iter ) if ( sname == null ) { \n\t\t\t$F9464 ( log ) $F598 } \n\t\t$F15998 ( log , sname ) if ( sname . charAt ( NUM00 ) != CatalogTree . XML ) $F1448 CatalogTree ct = manager . getBySystemName ( sname ) ; \n\t\tElement elem = new Element $F580 ; \n\t\t$F34765 ( elem , sname ) String uname = ct . getUserName ( ) ; \n\t\tif ( uname != null ) $F300453 ( elem , uname ) storeNode ( elem , ct . getRoot ( ) ) ; \n\t\t$F15998 ( log , sname ) cat . addContent ( elem ) ; \n\t\t} \n\t} \n"}, {"code": "public boolean isEnabled $F72 { \n\treturn enabled ; \n\t} \n"}, {"code": "$F32632 ( criteria , createCriteriaInternal , oredCriteria ) "}, {"code": "public static boolean loadTexture ( int glId , int file ) { \n\tInputStream is = Resource . getResInputStream ( file ) ; \n\tBitmap bitmap = null ; \n\ttry { \n\t\t$F56530 ( opts ) opts . inScaled = _BOOL ; \n\t\tbitmap = BitmapFactory . decodeStream ( is , null , opts ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tLog . e ( TAG , NUM00 + file , e ) ; \n\t\treturn _BOOL ; \n\t\t} \n\tfinally { \n\t\ttry $F881 ( is ) $F102303 ( Log , TAG , e ) } \n\treturn loadTexture ( glId , bitmap ) ; \n\t} \n"}, {"code": "public static int roll1D100 $F72 { \n\treturn $F6823 ( rand ) ; \n\t} \n"}, {"code": "public ZipfianGenerator ( long min , long max , double _zipfianconstant , double _zetan ) { \n\titems = max - min + NUM00 ; \n\tbase = min ; \n\tzipfianconstant = _zipfianconstant ; \n\ttheta = zipfianconstant ; \n\tzeta2theta = zeta ( NUM00 , theta ) ; \n\talpha = NUM00 / ( NUM00 - theta ) ; \n\tzetan = _zetan ; \n\tcountforzeta = items ; \n\teta = ( NUM00 - Math . pow ( NUM00 / items , NUM00 - theta ) ) / ( NUM00 - zeta2theta / zetan ) ; \n\tnextInt ( ) ; \n\t} \n"}, {"code": "public void removeRole ( RoleEntity role ) $F106 ( roles , role ) "}, {"code": "final boolean transferAfterCancelledWait ( Node node ) { \n\tif ( compareAndSetWaitStatus ( node , Node . CONDITION , NUM00 ) ) $F9278 ( enq , node , _BOOL ) while ( ! isOnSyncQueue ( node ) ) $F5756 ( Thread ) return _BOOL ; \n\t} \n"}, {"code": "private Map processEvent ( MatchResult result ) { \n\t$F28017 ( map ) for ( int i = NUM00 ; \n\ti < result . groupCount ( ) + NUM00 ; \n\ti ++ ) { \n\t\tObject key = matchingKeywords . get ( i - NUM00 ) ; \n\t\tObject value = result . group ( i ) ; \n\t\tmap . put ( key , value ) ; \n\t\t} \n\treturn map ; \n\t} \n"}, {"code": "public void addExtension ( String ext ) $F9632 ( exts , ext ) "}, {"code": "private void displaySimple ( PrintStream output ) { \n\t$F8438 ( output ) for ( $F119 ( j , P ) ) { \n\t\t$F9662 ( a0 , N ) $F9662 ( a1 , N ) $F9662 ( a2 , N ) for ( $F119 ( i , N ) ) { \n\t\t\ta0 [ i ] = A [ i ] ; \n\t\t\ta1 [ i ] = C_A [ i ] [ j ] ; \n\t\t\ta2 [ i ] = B [ i ] ; \n\t\t\t} \n\t\tdouble value = computeFirstOrder ( a0 , a1 , a2 , N ) ; \n\t\toutput . print ( value < NUM00 ? NUM00 : value ) ; \n\t\tif ( j < P - NUM00 ) $F21410 ( output ) } \n\t$F21416 ( output ) $F8438 ( output ) for ( $F119 ( j , P ) ) { \n\t\t$F9662 ( a0 , N ) $F9662 ( a1 , N ) $F9662 ( a2 , N ) for ( $F119 ( i , N ) ) { \n\t\t\ta0 [ i ] = A [ i ] ; \n\t\t\ta1 [ i ] = C_A [ i ] [ j ] ; \n\t\t\ta2 [ i ] = B [ i ] ; \n\t\t\t} \n\t\tdouble value = computeTotalOrder ( a0 , a1 , a2 , N ) ; \n\t\toutput . print ( value < NUM00 ? NUM00 : value ) ; \n\t\tif ( j < P - NUM00 ) $F21410 ( output ) } \n\t$F21416 ( output ) } \n"}, {"code": "public boolean equals ( Object o ) { \n\tif ( o == this ) return _BOOL ; \n\tif ( ! ( o instanceof MBeanAttributeInfo ) ) return _BOOL ; \n\tMBeanAttributeInfo p = ( MBeanAttributeInfo ) o ; \n\treturn ( $F460245 ( Objects , p , getName ) && $F460245 ( Objects , p , getType ) && $F460245 ( Objects , p , getDescription ) && $F460245 ( Objects , p , getDescriptor ) && $F168407 ( p , isReadable ) && $F168407 ( p , isWritable ) && $F168407 ( p , isIs ) ) ; \n\t} \n"}, {"code": "protected boolean handleDirectory ( File directory , $F806 contentNames ) throws SecurityException { \n\tboolean continueWandering = _BOOL ; \n\tfor ( String child : contentNames ) { \n\t\tboolean keepGoing = handleEntry ( new File ( $F98442 ( directory , File ) , child ) ) ; \n\t\tif ( ! keepGoing ) { \n\t\t\tcontinueWandering = exhaustiveSearch ; \n\t\t\t$F30724 ( continueWandering ) } \n\t\t} \n\treturn continueWandering ; \n\t} \n"}, {"code": "int size $F72 $F114498 ( Integer , set ) "}, {"code": "public boolean hasNext $F72 { \n\treturn iterator . hasNext ( ) ; \n\t} \n"}, {"code": "public static double vectorDistance ( $F1986 vec1 , $F1986 vec2 , double power , double oneOverPower ) { \n\tdouble result = NUM00 ; \n\tif ( power == NUM00 ) { \n\t\tfor ( $F1139 ( i , vec1 ) ) { \n\t\t\tresult += vec1 [ i ] - vec2 [ i ] == NUM00 ? NUM00 : NUM00 ; \n\t\t\t} \n\t\t} \n\telse if ( power == NUM00 ) { \n\t\tfor ( $F1139 ( i , vec1 ) ) { \n\t\t\tresult += Math . abs ( vec1 [ i ] - vec2 [ i ] ) ; \n\t\t\t} \n\t\t} \n\telse if ( power == NUM00 ) { \n\t\tresult = Math . sqrt ( distSquaredCartesian ( vec1 , vec2 ) ) ; \n\t\t} \n\telse if ( power == Integer . MAX_VALUE || Double . isInfinite ( power ) ) { \n\t\tfor ( $F1139 ( i , vec1 ) ) { \n\t\t\tresult = Math . max ( result , Math . max ( vec1 [ i ] , vec2 [ i ] ) ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tfor ( $F1139 ( i , vec1 ) ) { \n\t\t\tresult += Math . pow ( vec1 [ i ] - vec2 [ i ] , power ) ; \n\t\t\t} \n\t\tresult = Math . pow ( result , oneOverPower ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static String formatNumber ( final long number ) { \n\tlong divided = number ; \n\t$F3239 ( sb ) while ( divided > NUM00 ) { \n\t\tlong rest = divided % NUM00 ; \n\t\tsb . insert ( NUM00 , NUM00 + String . format ( NUM00 , rest ) ) ; \n\t\tdivided = divided / NUM00 ; \n\t\t} \n\tlong rest = divided % NUM00 ; \n\t$F34005 ( sb , rest ) $F92 ( sb ) } \n"}, {"code": "private boolean isSubsumed ( String selector , $F46406 others ) { \n\tfor ( String other : others ) $F19884 ( subsumes , other , selector , _BOOL ) return _BOOL ; \n\t} \n"}, {"code": "private void displayValues $F72 { \n\tlog ( NUM00 , Project . MSG_INFO ) ; \n\tlog ( NUM00 + this . spec ) ; \n\tlog ( NUM00 + getSpecAbsolutePath ( ) ) ; \n\tlog ( NUM00 + getSerializedSpecAbsolutePath ( ) ) ; \n\tlog ( NUM00 + this . specdir ) ; \n\tlog ( NUM00 + this . cup2srcdir ) ; \n\tlog ( NUM00 + this . classpath ) ; \n\tlog ( NUM00 + this . algorithm ) ; \n\tlog ( NUM00 + this . verbose ) ; \n\tlog ( NUM00 + this . parsetable ) ; \n\tlog ( NUM00 ) ; \n\t} \n"}, {"code": "$F183298 ( view , cache ) "}, {"code": "private boolean checkTouchingMinTarget ( int index , MotionEvent event ) { \n\tif ( isTouchingMinTarget ( index , event ) ) { \n\t\tlastTouchedMin = _BOOL ; \n\t\tisTouchingMinTarget . add ( event . getPointerId ( index ) ) ; \n\t\tif $F28174 ( minAnimator ) { \n\t\t\tminAnimator = getMinTargetAnimator ( _BOOL ) ; \n\t\t\t$F2346 ( minAnimator ) } \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public boolean isCanceled $F72 { \n\t$F397 ( pane , _BOOL ) $F21137 ( v , pane ) return ( ( v != null ) && $F9634 ( cancelOption ) && $F151557 ( v , cancelOption ) ) ; \n\t} \n"}, {"code": "public int availableProcessors $F72 { \n\treturn RVMThread . availableProcessors ; \n\t} \n"}, {"code": "public void updateDebug ( Boolean debug , Boolean database , Boolean exception , Boolean tracing , Boolean dump , Boolean timer , Boolean implicitAccess , Boolean queryUsage ) throws SecurityException { \n\tcheckWriteAccess ( ) ; \n\tboolean hasAccess = ConfigWebUtil . hasAccess ( config , SecurityManager . TYPE_DEBUGGING ) ; \n\t$F26100 ( hasAccess ) Element debugging = _getRootElement ( NUM00 ) ; \n\tif ( debug != null ) debugging . setAttribute ( NUM00 , Caster . toString ( debug . booleanValue ( ) ) ) ; \n\telse $F152467 ( debugging ) if ( database != null ) debugging . setAttribute ( NUM00 , Caster . toString ( database . booleanValue ( ) ) ) ; \n\telse $F152467 ( debugging ) if ( exception != null ) debugging . setAttribute ( NUM00 , Caster . toString ( exception . booleanValue ( ) ) ) ; \n\telse $F152467 ( debugging ) if ( tracing != null ) debugging . setAttribute ( NUM00 , Caster . toString ( tracing . booleanValue ( ) ) ) ; \n\telse $F152467 ( debugging ) if ( dump != null ) debugging . setAttribute ( NUM00 , Caster . toString ( dump . booleanValue ( ) ) ) ; \n\telse $F152467 ( debugging ) if ( timer != null ) debugging . setAttribute ( NUM00 , Caster . toString ( timer . booleanValue ( ) ) ) ; \n\telse $F152467 ( debugging ) if ( implicitAccess != null ) debugging . setAttribute ( NUM00 , Caster . toString ( implicitAccess . booleanValue ( ) ) ) ; \n\telse $F152467 ( debugging ) if ( queryUsage != null ) debugging . setAttribute ( NUM00 , Caster . toString ( queryUsage . booleanValue ( ) ) ) ; \n\telse $F152467 ( debugging ) } \n"}, {"code": "public final static void debug ( String s ) { \n\tif ( DEBUG ) $F7957 ( debug , s ) } \n"}, {"code": "public static final void writeLongArrayXml ( $F2469 val , String name , XmlSerializer out ) throws $F18821 $F18841 ( val , out , name , N , Integer , i , Long ) "}, {"code": "public static $F46012 $F5675 filterByOr ( $F5675 values , List < ? extends EntityCondition > exprs ) { \n\t$F1275 ( values ) $F46019 ( UtilValidate , exprs , values ) $F11916 ( result ) for ( T value : values ) { \n\t\tboolean include = _BOOL ; \n\t\tfor ( EntityCondition condition : exprs ) { \n\t\t\tinclude = condition . entityMatches ( value ) ; \n\t\t\t$F46020 ( include ) } \n\t\t$F46023 ( include , result , value ) } \n\treturn result ; \n\t} \n"}, {"code": "$F9863 ( child , dx , dy , _BOOL , checkHorizontal , mCallback , checkVertical , mTouchSlop , Math ) "}, {"code": "$F1 public RES next ( REQ req ) { \n\twriteTraceLog ( req , middlewareName ) ; \n\tif $F167956 ( predicate , req ) { \n\t\tRES res = middleware . handle ( req , next ) ; \n\t\twriteTraceLog ( res , middlewareName ) ; \n\t\treturn res ; \n\t\t} \n\telse if ( next != null ) { \n\t\tRES res = ( RES ) next . next ( req ) ; \n\t\twriteTraceLog ( res , middlewareName ) ; \n\t\treturn res ; \n\t\t} \n\telse $F1337 } \n"}, {"code": "protected void read ( long offset , $F96 b ) throws IOException { \n\trafile . seek ( offset ) ; \n\tif ( rafile . read ( b ) != b . length ) { \n\t\tthrow new IOException ( NUM00 + getPath ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "public void run $F72 { \n\tfinal FetcherInfo info = FetcherInfo . getFetcherInfo ( ) ; \n\ttry $F5795 ( fetchloop ) $F1516 ( e ) finally { \n\t\tsynchronized ( info . waitList ) { \n\t\t\t$F686 ( me , Thread ) for ( int i = NUM00 ; \n\t\t\ti < info . fetchers . length ; \n\t\t\ti ++ ) { \n\t\t\t\tif ( info . fetchers [ i ] == me ) { \n\t\t\t\t\tinfo . fetchers [ i ] = null ; \n\t\t\t\t\tinfo . numFetchers -- ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public CtClass makeAnnotation ( String name ) throws RuntimeException { \n\ttry { \n\t\tCtClass cc = makeInterface ( name , get ( NUM00 ) ) ; \n\t\tcc . setModifiers ( cc . getModifiers ( ) | Modifier . ANNOTATION ) ; \n\t\treturn cc ; \n\t\t} \n\tcatch ( NotFoundException e ) { \n\t\tthrow new RuntimeException $F2808 ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public void testNegateMathContextNegative $F72 { \n\tString a = NUM00 ; \n\tint aScale = NUM00 ; \n\tint precision = NUM00 ; \n\tRoundingMode rm = RoundingMode . CEILING ; \n\t$F9512 ( mc , precision , rm ) String c = NUM00 ; \n\tint cScale = NUM00 ; \n\t$F1918 ( aNumber , a , aScale ) BigDecimal res = aNumber . negate ( mc ) ; \n\t$F1925 ( assertEquals , c , res ) $F1928 ( assertEquals , cScale , res ) } \n"}, {"code": "public void add ( Node node ) $F207 ( availableNodes , node ) "}, {"code": "public void write ( OutputStream out ) throws IOException { \n\t$F1533 ( dataOut , out ) dataOut . writeShort ( $F2958 ( pool ) ) ; \n\tfor ( Entry e : pool ) $F4050 ( e , dataOut ) } \n"}, {"code": "protected ForeignKeyConstraint buildForeignKeyConstraint ( $F3803 fkFieldNames , $F3803 pkFieldNames , TableDefinition targetTable , DatabasePlatform platform ) { \n\tassert $F3816 ( fkFieldNames ) && $F56339 ( fkFieldNames , pkFieldNames ) ; \n\tForeignKeyConstraint fkConstraint = new ForeignKeyConstraint $F72 ; \n\tfor ( $F2277 ( i , fkFieldNames ) ) { \n\t\tfkConstraint . getSourceFields ( ) . add ( fkFieldNames . get ( i ) ) ; \n\t\tfkConstraint . getTargetFields ( ) . add ( pkFieldNames . get ( i ) ) ; \n\t\t} \n\tfkConstraint . setTargetTable ( targetTable . getFullName ( ) ) ; \n\t$F13410 ( fkFieldName , fkFieldNames ) String name = buildForeignKeyConstraintName ( this . getName ( ) , fkFieldName , platform . getMaxForeignKeyNameSize ( ) , platform ) ; \n\tfkConstraint . setName ( name ) ; \n\treturn fkConstraint ; \n\t} \n"}, {"code": "public static boolean isRewritableBatch ( String queryString , boolean noBackslashEscapes ) { \n\tLexState state = LexState . Normal ; \n\tchar lastChar = NUM00 ; \n\tboolean singleQuotes = _BOOL ; \n\tboolean endingSemicolon = _BOOL ; \n\t$F7782 ( query , queryString ) int queryLength = query . length ; \n\tfor ( $F119 ( i , queryLength ) ) { \n\t\tif ( state == LexState . Escape ) state = LexState . String ; \n\t\tchar car = query [ i ] ; \n\t\tswitch ( car ) { \n\t\t\t$F1262 if ( state == LexState . Normal && lastChar == NUM00 ) state = LexState . SlashStarComment ; \n\t\t\t$F597 $F1262 if ( state == LexState . SlashStarComment && lastChar == NUM00 ) { \n\t\t\t\tstate = LexState . Normal ; \n\t\t\t\t} \n\t\t\telse if ( state == LexState . Normal && lastChar == NUM00 ) { \n\t\t\t\tstate = LexState . EOLComment ; \n\t\t\t\t} \n\t\t\t$F597 $F1262 if ( state == LexState . Normal ) state = LexState . EOLComment ; \n\t\t\t$F597 $F1262 if ( state == LexState . Normal && lastChar == NUM00 ) { \n\t\t\t\tstate = LexState . EOLComment ; \n\t\t\t\t} \n\t\t\t$F597 $F1262 if ( state == LexState . Normal ) { \n\t\t\t\tendingSemicolon = _BOOL ; \n\t\t\t\t} \n\t\t\t$F597 $F1262 if ( state == LexState . EOLComment ) { \n\t\t\t\tstate = LexState . Normal ; \n\t\t\t\t} \n\t\t\t$F597 $F1262 if ( state == LexState . Normal ) { \n\t\t\t\tstate = LexState . String ; \n\t\t\t\tsingleQuotes = _BOOL ; \n\t\t\t\t} \n\t\t\telse if ( state == LexState . String && ! singleQuotes ) { \n\t\t\t\tstate = LexState . Normal ; \n\t\t\t\t} \n\t\t\t$F597 $F1262 if ( state == LexState . Normal ) { \n\t\t\t\tstate = LexState . String ; \n\t\t\t\tsingleQuotes = _BOOL ; \n\t\t\t\t} \n\t\t\telse if ( state == LexState . String && singleQuotes ) { \n\t\t\t\tstate = LexState . Normal ; \n\t\t\t\t} \n\t\t\t$F597 $F1262 $F30711 ( noBackslashEscapes ) if ( state == LexState . String ) state = LexState . Escape ; \n\t\t\t$F597 $F1262 if ( state == LexState . Backtick ) { \n\t\t\t\tstate = LexState . Normal ; \n\t\t\t\t} \n\t\t\telse if ( state == LexState . Normal ) { \n\t\t\t\tstate = LexState . Backtick ; \n\t\t\t\t} \n\t\t\t$F597 $F1267 if ( state == LexState . Normal && endingSemicolon && ( ( byte ) car >= NUM00 ) ) { \n\t\t\t\tendingSemicolon = _BOOL ; \n\t\t\t\t} \n\t\t\t$F597 } \n\t\tlastChar = car ; \n\t\t} \n\treturn state != LexState . EOLComment && ! endingSemicolon ; \n\t} \n"}, {"code": "private boolean zzRefill $F72 throws $F3258 { \n\t$F72981 ( zzStartRead , System , zzBuffer , zzEndRead , zzCurrentPos , zzMarkedPos , zzPushbackPos ) $F72988 ( zzCurrentPos , zzBuffer , System , newBuffer ) $F7994 ( numRead , zzReader , zzBuffer , zzEndRead ) $F72989 ( numRead , _BOOL , zzEndRead ) } \n"}, {"code": "public ServerBuilder ( Config config ) { \n\tObjects . requireNonNull ( config ) ; \n\t_config = config ; \n\t} \n"}, {"code": "private static LDAPFilter createSubstringFilter ( SubstringFilter sf ) throws LDAPException , IOException { \n\t$F6689 anyo = sf . getAny ( ) ; \n\tArrayList < ByteString > $F719 ( subAnyElements , anyo ) ; \n\tfor ( Object o : anyo ) { \n\t\tsubAnyElements . add ( ByteStringUtility . convertValue ( o ) ) ; \n\t\t} \n\tif ( sf . getInitial ( ) == null && subAnyElements . isEmpty ( ) && sf . getFinal ( ) == null ) { \n\t\tLocalizableMessage message = ERR_LDAP_FILTER_DECODE_NULL . get ( ) ; \n\t\tthrow new LDAPException ( LDAPResultCode . PROTOCOL_ERROR , message ) ; \n\t\t} \n\treturn LDAPFilter . createSubstringFilter ( sf . getName ( ) , sf . getInitial ( ) == null ? null : ByteStringUtility . convertValue ( sf . getInitial ( ) ) , subAnyElements , sf . getFinal ( ) == null ? null : ByteStringUtility . convertValue ( sf . getFinal ( ) ) ) ; \n\t} \n"}, {"code": "public void testCompareNegNeg2 $F72 { \n\t$F7829 $F79258 int aSign = - NUM00 ; \n\tint bSign = - NUM00 ; \n\t$F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F79260 ( assertEquals , aNumber , bNumber ) } \n"}, {"code": "$F1 protected void onSizeChanged $F2026 ( w , h , oldw , oldh ) { \n\tif ( readySent ) { \n\t\t$F256591 ( setScaleAndCenter , getScale , getCenter ) } \n\t} \n"}, {"code": "protected void disown ( AbstractNode child ) throws IllegalStateException { \n\tensureParentage ( child ) ; \n\tchild . parent = null ; \n\t} \n"}, {"code": "public String qName2String ( QName qName , boolean writeNS ) { \n\tString prefix = null ; \n\t$F101311 ( namespaceURI , qName ) String localPart = qName . getLocalPart ( ) ; \n\tif $F22 ( localPart ) { \n\t\t$F1384 ( index , localPart ) if ( index != - NUM00 ) { \n\t\t\t$F14493 ( prefix , localPart , index ) if ( $F20 ( prefix ) && $F1263 ( prefix ) ) { \n\t\t\t\tregisterPrefixForURI ( prefix , namespaceURI ) ; \n\t\t\t\t$F6943 ( localPart , index ) } \n\t\t\telse { \n\t\t\t\tprefix = null ; \n\t\t\t\t} \n\t\t\t} \n\t\tlocalPart = getLastLocalPart ( localPart ) ; \n\t\t} \n\tif $F1277 ( namespaceURI ) { \n\t\tif ( writeNS ) { \n\t\t\tString defaultNS = nsStack . getNamespaceURI ( NUM00 ) ; \n\t\t\tif $F22 ( defaultNS ) { \n\t\t\t\tregisterPrefixForURI ( NUM00 , NUM00 ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse { \n\t\tprefix = getPrefixForURI ( namespaceURI , qName . getPreferredPrefix ( ) ) ; \n\t\t} \n\tif $F38892 ( prefix ) return localPart ; \n\treturn prefix + NUM00 + localPart ; \n\t} \n"}, {"code": "public JSONException ( Throwable cause ) { \n\t$F3270 ( super , cause ) this . cause = cause ; \n\t} \n"}, {"code": "$F1 public void close $F72 throws XMLStreamException { \n\t$F37599 ( log , Level ) $F59 ( stream ) } \n"}, {"code": "public void testDivideRoundHalfUpNeg2 $F72 { \n\tString a = NUM00 ; \n\tint aScale = NUM00 ; \n\tString b = NUM00 ; \n\tint bScale = NUM00 ; \n\tString c = NUM00 ; \n\tint resScale = - NUM00 ; \n\t$F1918 ( aNumber , a , aScale ) $F1918 ( bNumber , b , bScale ) BigDecimal result = aNumber . divide ( bNumber , resScale , BigDecimal . ROUND_HALF_UP ) ; \n\t$F1925 ( assertEquals , c , result ) $F1928 ( assertEquals , resScale , result ) } \n"}, {"code": "$F1 public String readLine $F72 throws IOException { \n\tif ( this . pointer >= this . data . length - NUM00 ) $F1337 else { \n\t\t$F1121 ( buf ) int c ; \n\t\twhile $F61411 ( c , read ) { \n\t\t\tif $F61413 ( c ) { \n\t\t\t\tif ( ( $F37713 ( peek ) || $F37713 ( peek ) ) && ( peek ( ) != c ) ) $F5795 ( read ) $F597 } \n\t\t\t$F36813 ( buf , c ) } \n\t\t$F92 ( buf ) } \n\t} \n"}, {"code": "protected static Map attrSetToMap ( AttrSet attrSet , boolean fetchByteValues ) { \n\tMap attributesMap = new AMHashMap ( fetchByteValues ) ; \n\t$F1933 ( attrSet , attributesMap ) $F2199 ( attrSetSize , attrSet ) if ( ! fetchByteValues ) { \n\t\tfor ( $F119 ( i , attrSetSize ) ) { \n\t\t\tAttr attr = attrSet . elementAt ( i ) ; \n\t\t\tString values [ ] = attr . getStringValues ( ) ; \n\t\t\tattributesMap . put ( attr . getName ( ) , stringArrayToSet ( values ) ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tfor ( $F119 ( i , attrSetSize ) ) { \n\t\t\tAttr attr = attrSet . elementAt ( i ) ; \n\t\t\tattributesMap . put ( attr . getName ( ) , attr . getByteValues ( ) ) ; \n\t\t\t} \n\t\t} \n\treturn attributesMap ; \n\t} \n"}, {"code": "public void testGetMinCRL $F72 { \n\t$F40920 ( selector ) assertNull ( NUM00 , selector . getMinCRL ( ) ) ; \n\t$F88961 ( minCRL ) selector . setMinCRLNumber ( minCRL ) ; \n\tassertTrue ( NUM00 , minCRL . equals ( selector . getMinCRL ( ) ) ) ; \n\t} \n"}, {"code": "public $F11685 E parseResponseData ( GDataRequest req , $F48880 resultType ) throws IOException , ServiceException { \n\tInputProperties inputProperties = new ClientInputProperties ( req , resultType ) ; \n\treturn parseResponseData ( req . getParseSource ( ) , inputProperties , resultType ) ; \n\t} \n"}, {"code": "public void addRtpStreamListener ( RtpStreamListener rtpStreamListener ) { \n\tmRtpStreamListener = rtpStreamListener ; \n\t} \n"}, {"code": "public synchronized $F96 toByteArray $F72 { \n\tint remaining = count ; \n\t$F6482 ( remaining , EMPTY_BYTE_ARRAY ) $F2175 ( newbuf , remaining ) int pos = NUM00 ; \n\tfor ( $F96 buf : buffers ) { \n\t\tint c = Math . min ( buf . length , remaining ) ; \n\t\t$F6483 ( System , buf , newbuf , pos , c ) pos += c ; \n\t\tremaining -= c ; \n\t\t$F7256 ( remaining ) } \n\treturn newbuf ; \n\t} \n"}, {"code": "public void addVolumesToConsistencyGroup $F13322 ( cgName , virtualVolumeNames ) throws VPlexApiException { \n\t$F10635 ( s_logger , _baseURI ) _cgMgr . addVolumesToConsistencyGroup ( cgName , virtualVolumeNames ) ; \n\t} \n"}, {"code": "public void testConstructorSignBytesPositive6 $F72 { \n\tbyte $F3009 = { \n\t\tNUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 } \n\t; \n\tint aSign = NUM00 ; \n\tbyte $F3018 = { \n\t\tNUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 } \n\t; \n\t$F3023 ( aNumber , aSign , aBytes ) $F3030 ( rBytes ) $F3031 ( resBytes , aNumber ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , aNumber ) } \n"}, {"code": "public static boolean looksLikeAFontStyle ( String val ) { \n\treturn FONT_STYLES . indexOf ( val ) >= NUM00 ; \n\t} \n"}, {"code": "public static void dumpCursor ( ICursor cursor , int maxColumnWidth ) { \n\t$F4000 ( builder ) dumpCursor ( cursor , maxColumnWidth , builder ) ; \n\tLogger . d ( Logger . LOG_TAG , builder . toString ( ) ) ; \n\t} \n"}, {"code": "static int computeValidLevels ( long bitPattern ) $F114498 ( Long , bitPattern ) "}, {"code": "public static void runUnderLock ( ReentrantLock lock , Runnable runnable ) { \n\t$F790 ( lock ) try $F21688 ( runnable ) $F796 ( lock ) } \n"}, {"code": "private static boolean dateByMonth ( DateTimeFormatterBuilder bld , Collection < DateTimeFieldType > fields , boolean extended , boolean strictISO ) { \n\tboolean reducedPrec = _BOOL ; \n\tif ( fields . remove ( DateTimeFieldType . year ( ) ) ) { \n\t\t$F16690 ( bld , yearElement ) if ( fields . remove ( DateTimeFieldType . monthOfYear ( ) ) ) { \n\t\t\tif ( fields . remove ( DateTimeFieldType . dayOfMonth ( ) ) ) { \n\t\t\t\tappendSeparator ( bld , extended ) ; \n\t\t\t\tbld . appendMonthOfYear ( NUM00 ) ; \n\t\t\t\tappendSeparator ( bld , extended ) ; \n\t\t\t\tbld . appendDayOfMonth ( NUM00 ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\t$F188366 ( bld ) bld . appendMonthOfYear ( NUM00 ) ; \n\t\t\t\treducedPrec = _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tif ( fields . remove ( DateTimeFieldType . dayOfMonth ( ) ) ) { \n\t\t\t\tcheckNotStrictISO ( fields , strictISO ) ; \n\t\t\t\t$F188366 ( bld ) $F188366 ( bld ) bld . appendDayOfMonth ( NUM00 ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\treducedPrec = _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse if ( fields . remove ( DateTimeFieldType . monthOfYear ( ) ) ) { \n\t\t$F188366 ( bld ) $F188366 ( bld ) bld . appendMonthOfYear ( NUM00 ) ; \n\t\tif ( fields . remove ( DateTimeFieldType . dayOfMonth ( ) ) ) { \n\t\t\tappendSeparator ( bld , extended ) ; \n\t\t\tbld . appendDayOfMonth ( NUM00 ) ; \n\t\t\t} \n\t\telse { \n\t\t\treducedPrec = _BOOL ; \n\t\t\t} \n\t\t} \n\telse if ( fields . remove ( DateTimeFieldType . dayOfMonth ( ) ) ) { \n\t\t$F188366 ( bld ) $F188366 ( bld ) $F188366 ( bld ) bld . appendDayOfMonth ( NUM00 ) ; \n\t\t} \n\treturn reducedPrec ; \n\t} \n"}, {"code": "$F1 public int insert ( String elem ) { \n\tint firstIndex = ( int ) ( elem . charAt ( NUM00 ) - NUM00 ) ; \n\tint lastIndex = ( int ) ( $F7792 ( elem ) - NUM00 ) ; \n\tstorage [ firstIndex * NUM00 + lastIndex ] = elem ; \n\t$F1082 } \n"}, {"code": "public void clearMovementData $F72 { \n\tpathSprites = new ArrayList < StepSprite > $F72 ; \n\tmovementTarget = null ; \n\tcheckFoVHexImageCacheClear ( ) ; \n\trepaint ( ) ; \n\trefreshMoveVectors ( ) ; \n\t} \n"}, {"code": "public void threadRecordFailure ( Throwable t ) { \n\tthreadFailure . compareAndSet ( null , t ) ; \n\t} \n"}, {"code": "$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel ) "}, {"code": "protected Boolean replayCompletion ( Participant participant ) throws IllegalStateException { \n\tif $F2200 ( replayStack_ , participant ) $F31742 ( replayStack_ , participant ) return committed_ ; \n\t} \n"}, {"code": "$F188545 ( sourceList , entry , _BOOL ) "}, {"code": "public void testDecoder7 $F72 { \n\tboolean res ; \n\tString originalAppIdName = mAppIdName ; \n\tint originalContentTypeValue = mContentTypeValue ; \n\t$F6822 ( rd ) for ( $F1139 ( i , OMA_CONTENT_TYPE_NAMES ) ) { \n\t\tmContentTypeName = OMA_CONTENT_TYPE_NAMES [ i ] ; \n\t\t$F57834 ( pdu , createPDU ) $F57836 ( pduDecoder , pdu ) res = pduDecoder . decodeContentType ( mWspContentTypeStart ) ; \n\t\tassertTrue ( res ) ; \n\t\tLog . d ( LOG_TAG , NUM00 + mContentTypeName + NUM00 + pduDecoder . getValueString ( ) + NUM00 ) ; \n\t\tassertTrue ( mContentTypeName . equals ( pduDecoder . getValueString ( ) ) ) ; \n\t\t} \n\tmAppIdName = originalAppIdName ; \n\tmContentTypeValue = originalContentTypeValue ; \n\t} \n"}, {"code": "public void shutdownNow $F72 { \n\tshutdown = _BOOL ; \n\tfinal $F44535 f = engineFuture . get ( ) ; \n\tif ( f != null ) { \n\t\t$F38209 ( log , this ) f . cancel ( _BOOL ) ; \n\t\t} \n\tfinal ExecutorService s = engineService . get ( ) ; \n\tif ( s != null ) { \n\t\t$F38209 ( log , this ) $F5832 ( s ) } \n\tfinal HttpClient cm = clientConnectionManagerRef . get ( ) ; \n\tif ( cm != null ) { \n\t\t$F38209 ( log , this ) try $F5196 ( cm ) $F9877 ( log , e ) } \n\tfor ( AbstractRunningQuery q : runningQueries . values ( ) ) $F11437 ( q , _BOOL ) $F725 ( priorityQueue ) $F725 ( deadlineQueue ) $F49400 ( engineFuture ) $F49400 ( engineService ) $F49400 ( clientConnectionManagerRef ) } \n"}, {"code": "static public void addNotificationListener ( JMXConnector jmxConnector , $F6969 mbeanClass , NotificationListener notificationListener ) throws InstanceNotFoundException , Exception { \n\tMBeanServerConnection mbsc = jmxConnector . getMBeanServerConnection ( ) ; \n\tObjectName objectName = generateMBeanObjectName ( mbeanClass ) ; \n\tmbsc . addNotificationListener ( objectName , notificationListener , null , null ) ; \n\t} \n"}, {"code": "protected String toHTML ( String s ) { \n\tString result ; \n\tresult = s ; \n\t$F2899 ( result ) $F2899 ( result ) $F2899 ( result ) $F2899 ( result ) $F2899 ( result ) return result ; \n\t} \n"}, {"code": "$F66632 ( files , mRootDirectory , file , mEntries , mTotalSize , VolleyLog ) "}, {"code": "protected void normalizeScores $F72 { \n\tdouble hub_ssum = NUM00 ; \n\tdouble auth_ssum = NUM00 ; \n\tfor ( V v : graph . getVertices ( ) ) { \n\t\tdouble hub_val = getOutputValue ( v ) . hub ; \n\t\tdouble auth_val = getOutputValue ( v ) . authority ; \n\t\thub_ssum += ( hub_val * hub_val ) ; \n\t\tauth_ssum += ( auth_val * auth_val ) ; \n\t\t} \n\t$F84202 ( hub_ssum , Math ) $F84202 ( auth_ssum , Math ) for ( V v : graph . getVertices ( ) ) { \n\t\tHITS . Scores values = getOutputValue ( v ) ; \n\t\tsetOutputValue ( v , new HITS . Scores ( values . hub / hub_ssum , values . authority / auth_ssum ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static int absoluteMax $F23416 ( intArray ) { \n\tint max = Integer . MIN_VALUE ; \n\tfor ( $F1139 ( i , intArray ) ) { \n\t\tif ( Math . abs ( intArray [ i ] ) > max && intArray [ i ] != NUM00 ) { \n\t\t\tmax = intArray [ i ] ; \n\t\t\t} \n\t\t} \n\treturn max == Integer . MIN_VALUE ? NUM00 : max ; \n\t} \n"}, {"code": "private boolean doAcquireNanos ( long arg , long nanosTimeout ) throws InterruptedException $F160333 ( nanosTimeout , _BOOL , deadline , System , node , addWaiter , Node , failed , p , head , tryAcquire , arg , setHead , shouldParkAfterFailedAcquire , spinForTimeoutThreshold , LockSupport , this , Thread , cancelAcquire ) "}, {"code": "boolean hasMinFeatureCount ( String feature ) { \n\t$F116 ( minFeatureCount , _BOOL ) $F86394 ( ids , clippedFeatureIndex , feature ) $F397 ( ids , _BOOL ) return ids . size ( ) >= minFeatureCount ; \n\t} \n"}, {"code": "void mutate $F72 { \n\tdo { \n\t\tint iBit ; \n\t\tdo { \n\t\t\tiBit = m_random . nextInt ( m_nNodes * m_nNodes ) ; \n\t\t\t} \n\t\twhile ( isSquare ( iBit ) ) ; \n\t\tm_bits [ iBit ] = ! m_bits [ iBit ] ; \n\t\t} \n\twhile ( hasCycles ( ) ) ; \n\tcalcScore ( ) ; \n\t} \n"}, {"code": "public void put ( E e ) throws InterruptedException { \n\tcheckNotNull ( e ) ; \n\t$F677 ( lock , this ) $F678 ( lock ) try { \n\t\twhile ( count == items . length ) $F681 ( notFull ) enqueue ( e ) ; \n\t\t} \n\t$F796 ( lock ) } \n"}, {"code": "private void deleteComments ( SpanManager sm ) { \n\tint start = NUM00 ; \n\twhile ( ( start = sm . indexOf ( NUM00 , start ) ) != - NUM00 ) { \n\t\tint end = sm . indexOf ( NUM00 , start + NUM00 ) + NUM00 ; \n\t\tif ( end == - NUM00 + NUM00 ) $F12713 ( end , sm ) try { \n\t\t\tif ( lineSeparator . equals ( sm . substring ( start - lineSeparator . length ( ) , start ) ) && lineSeparator . equals ( $F147460 ( sm , end , lineSeparator ) ) ) $F90434 ( end , lineSeparator ) } \n\t\t$F323912 sm . delete ( start , end ) ; \n\t\t} \n\t} \n"}, {"code": "DateTimeParseContext ( DateTimeFormatter formatter ) { \n\tsuper ( ) ; \n\tthis . formatter = formatter ; \n\tparsed . add ( new Parsed $F72 ) ; \n\t} \n"}, {"code": "public static boolean isNetworkTypeCellular ( String networkType ) { \n\t$F786 ( networkType ) } \n"}, {"code": "private void defineInternalFrameCloseButtons ( UIDefaults d ) { \n\tString p = NUM00 ; \n\tString c = PAINTER_PREFIX + NUM00 ; \n\t$F70531 ( d , p ) d . put ( p + NUM00 , new TitlePaneCloseButtonWindowNotFocusedState $F72 ) ; \n\t$F13782 ( d , p ) $F82506 ( d , p , c , TitlePaneCloseButtonPainter ) $F13870 ( d , p , c , TitlePaneCloseButtonPainter ) $F266570 ( d , p , c , TitlePaneCloseButtonPainter ) $F91159 ( d , p , c , TitlePaneCloseButtonPainter ) d . put ( p + NUM00 , new LazyPainter ( c , TitlePaneCloseButtonPainter . Which . BACKGROUND_ENABLED_WINDOWNOTFOCUSED ) ) ; \n\t$F266570 ( d , p , c , TitlePaneCloseButtonPainter ) d . put ( p + NUM00 , new LazyPainter ( c , TitlePaneCloseButtonPainter . Which . BACKGROUND_PRESSED_WINDOWNOTFOCUSED ) ) ; \n\t$F13824 ( d , p ) } \n"}, {"code": "private void modify ( StoragePort port , String portNetworkId ) { \n\tport . setPortNetworkId ( portNetworkId ) ; \n\tdbClient . persistObject ( port ) ; \n\tmodifiedStoragePortsList . add ( port ) ; \n\t} \n"}, {"code": "public boolean is ( String word ) { \n\treturn $F101864 ( m_Words , word ) ; \n\t} \n"}, {"code": "public static final String removeMultipleSpacesAndReturns ( final String data ) { \n\t$F94214 ( all_data , data ) int i = NUM00 ; \n\twhile $F7007 ( i , all_data ) { \n\t\tif ( ( $F11983 ( all_data , i ) && $F198486 ( all_data , i ) ) || ( ( all_data . charAt ( i ) == Character . LINE_SEPARATOR ) && ( all_data . charAt ( i - NUM00 ) == Character . LINE_SEPARATOR ) ) ) $F117880 ( all_data , i ) else { \n\t\t\ti ++ ; \n\t\t\t} \n\t\t} \n\t$F92 ( all_data ) } \n"}, {"code": "public void removeListener ( ConnectableDeviceListener listener ) $F106 ( listeners , listener ) "}, {"code": "protected boolean readAttributes ( DataInputStream d , int attributes_count , attribute_info [ ] ai ) throws IOException { \n\tattribute_info a = null ; \n\tint i ; \n\tint j ; \n\tlong len ; \n\tString s ; \n\tfor ( i = NUM00 ; \n\ti < attributes_count ; \n\ti ++ ) { \n\t\t$F89921 ( j , d ) len = d . readInt ( ) & NUM00 ; \n\t\ts = ( ( CONSTANT_Utf8_info ) ( constant_pool [ j ] ) ) . convert ( ) ; \n\t\tif ( s . compareTo ( attribute_info . SourceFile ) == NUM00 ) { \n\t\t\tSourceFile_attribute sa = new SourceFile_attribute $F72 ; \n\t\t\tsa . sourcefile_index = d . readUnsignedShort ( ) ; \n\t\t\ta = ( attribute_info ) sa ; \n\t\t\t} \n\t\telse if ( s . compareTo ( attribute_info . ConstantValue ) == NUM00 ) { \n\t\t\tConstantValue_attribute ca = new ConstantValue_attribute $F72 ; \n\t\t\tca . constantvalue_index = d . readUnsignedShort ( ) ; \n\t\t\ta = ( attribute_info ) ca ; \n\t\t\t} \n\t\telse if ( s . compareTo ( attribute_info . Code ) == NUM00 ) { \n\t\t\tCode_attribute ca = new Code_attribute $F72 ; \n\t\t\tca . max_stack = d . readUnsignedShort ( ) ; \n\t\t\tca . max_locals = d . readUnsignedShort ( ) ; \n\t\t\tca . code_length = d . readInt ( ) & NUM00 ; \n\t\t\tca . code = new byte [ ( int ) ca . code_length ] ; \n\t\t\td . read ( ca . code ) ; \n\t\t\tca . exception_table_length = d . readUnsignedShort ( ) ; \n\t\t\tca . exception_table = new exception_table_entry [ ca . exception_table_length ] ; \n\t\t\tint k ; \n\t\t\texception_table_entry e ; \n\t\t\tfor ( k = NUM00 ; \n\t\t\tk < ca . exception_table_length ; \n\t\t\tk ++ ) { \n\t\t\t\te = new exception_table_entry $F72 ; \n\t\t\t\te . start_pc = d . readUnsignedShort ( ) ; \n\t\t\t\te . end_pc = d . readUnsignedShort ( ) ; \n\t\t\t\te . handler_pc = d . readUnsignedShort ( ) ; \n\t\t\t\te . catch_type = d . readUnsignedShort ( ) ; \n\t\t\t\tca . exception_table [ k ] = e ; \n\t\t\t\t} \n\t\t\tca . attributes_count = d . readUnsignedShort ( ) ; \n\t\t\tca . attributes = new attribute_info [ ca . attributes_count ] ; \n\t\t\treadAttributes ( d , ca . attributes_count , ca . attributes ) ; \n\t\t\ta = ( attribute_info ) ca ; \n\t\t\t} \n\t\telse if ( s . compareTo ( attribute_info . Exceptions ) == NUM00 ) { \n\t\t\tException_attribute ea = new Exception_attribute $F72 ; \n\t\t\tea . number_of_exceptions = d . readUnsignedShort ( ) ; \n\t\t\tif ( ea . number_of_exceptions > NUM00 ) { \n\t\t\t\tint k ; \n\t\t\t\tea . exception_index_table = new int [ ea . number_of_exceptions ] ; \n\t\t\t\tfor ( k = NUM00 ; \n\t\t\t\tk < ea . number_of_exceptions ; \n\t\t\t\tk ++ ) ea . exception_index_table [ k ] = d . readUnsignedShort ( ) ; \n\t\t\t\t} \n\t\t\ta = ( attribute_info ) ea ; \n\t\t\t} \n\t\telse if ( s . compareTo ( attribute_info . LineNumberTable ) == NUM00 ) { \n\t\t\tLineNumberTable_attribute la = new LineNumberTable_attribute $F72 ; \n\t\t\tla . line_number_table_length = d . readUnsignedShort ( ) ; \n\t\t\tint k ; \n\t\t\tline_number_table_entry e ; \n\t\t\tla . line_number_table = new line_number_table_entry [ la . line_number_table_length ] ; \n\t\t\tfor ( k = NUM00 ; \n\t\t\tk < la . line_number_table_length ; \n\t\t\tk ++ ) { \n\t\t\t\te = new line_number_table_entry $F72 ; \n\t\t\t\te . start_pc = d . readUnsignedShort ( ) ; \n\t\t\t\te . line_number = d . readUnsignedShort ( ) ; \n\t\t\t\tla . line_number_table [ k ] = e ; \n\t\t\t\t} \n\t\t\ta = ( attribute_info ) la ; \n\t\t\t} \n\t\telse if ( s . compareTo ( attribute_info . LocalVariableTable ) == NUM00 ) { \n\t\t\tLocalVariableTable_attribute la = new LocalVariableTable_attribute $F72 ; \n\t\t\tla . local_variable_table_length = d . readUnsignedShort ( ) ; \n\t\t\tint k ; \n\t\t\tlocal_variable_table_entry e ; \n\t\t\tla . local_variable_table = new local_variable_table_entry [ la . local_variable_table_length ] ; \n\t\t\tfor ( k = NUM00 ; \n\t\t\tk < la . local_variable_table_length ; \n\t\t\tk ++ ) { \n\t\t\t\te = new local_variable_table_entry $F72 ; \n\t\t\t\te . start_pc = d . readUnsignedShort ( ) ; \n\t\t\t\te . length = d . readUnsignedShort ( ) ; \n\t\t\t\te . name_index = d . readUnsignedShort ( ) ; \n\t\t\t\te . descriptor_index = d . readUnsignedShort ( ) ; \n\t\t\t\te . index = d . readUnsignedShort ( ) ; \n\t\t\t\tla . local_variable_table [ k ] = e ; \n\t\t\t\t} \n\t\t\ta = ( attribute_info ) la ; \n\t\t\t} \n\t\telse if ( s . compareTo ( attribute_info . LocalVariableTypeTable ) == NUM00 ) { \n\t\t\tLocalVariableTypeTable_attribute la = new LocalVariableTypeTable_attribute $F72 ; \n\t\t\tla . local_variable_type_table_length = d . readUnsignedShort ( ) ; \n\t\t\tint k ; \n\t\t\tlocal_variable_type_table_entry e ; \n\t\t\tla . local_variable_type_table = new local_variable_type_table_entry [ la . local_variable_type_table_length ] ; \n\t\t\tfor ( k = NUM00 ; \n\t\t\tk < la . local_variable_type_table_length ; \n\t\t\tk ++ ) { \n\t\t\t\te = new local_variable_type_table_entry $F72 ; \n\t\t\t\te . start_pc = d . readUnsignedShort ( ) ; \n\t\t\t\te . length = d . readUnsignedShort ( ) ; \n\t\t\t\te . name_index = d . readUnsignedShort ( ) ; \n\t\t\t\te . signature_index = d . readUnsignedShort ( ) ; \n\t\t\t\te . index = d . readUnsignedShort ( ) ; \n\t\t\t\tla . local_variable_type_table [ k ] = e ; \n\t\t\t\t} \n\t\t\ta = ( attribute_info ) la ; \n\t\t\t} \n\t\telse if ( s . compareTo ( attribute_info . Synthetic ) == NUM00 ) { \n\t\t\tSynthetic_attribute ia = new Synthetic_attribute $F72 ; \n\t\t\ta = ( attribute_info ) ia ; \n\t\t\t} \n\t\telse if ( s . compareTo ( attribute_info . Signature ) == NUM00 ) { \n\t\t\tSignature_attribute ia = new Signature_attribute $F72 ; \n\t\t\tia . signature_index = d . readUnsignedShort ( ) ; \n\t\t\ta = ( attribute_info ) ia ; \n\t\t\t} \n\t\telse if ( s . compareTo ( attribute_info . Deprecated ) == NUM00 ) { \n\t\t\tDeprecated_attribute da = new Deprecated_attribute $F72 ; \n\t\t\ta = ( attribute_info ) da ; \n\t\t\t} \n\t\telse if ( s . compareTo ( attribute_info . EnclosingMethod ) == NUM00 ) { \n\t\t\tEnclosingMethod_attribute ea = new EnclosingMethod_attribute $F72 ; \n\t\t\tea . class_index = d . readUnsignedShort ( ) ; \n\t\t\tea . method_index = d . readUnsignedShort ( ) ; \n\t\t\ta = ( attribute_info ) ea ; \n\t\t\t} \n\t\telse if ( s . compareTo ( attribute_info . InnerClasses ) == NUM00 ) { \n\t\t\tInnerClasses_attribute ia = new InnerClasses_attribute $F72 ; \n\t\t\tia . inner_classes_length = d . readUnsignedShort ( ) ; \n\t\t\tia . inner_classes = new inner_class_entry [ ia . inner_classes_length ] ; \n\t\t\tfor ( int k = NUM00 ; \n\t\t\tk < ia . inner_classes_length ; \n\t\t\tk ++ ) { \n\t\t\t\tinner_class_entry e = new inner_class_entry $F72 ; \n\t\t\t\te . inner_class_index = d . readUnsignedShort ( ) ; \n\t\t\t\te . outer_class_index = d . readUnsignedShort ( ) ; \n\t\t\t\te . name_index = d . readUnsignedShort ( ) ; \n\t\t\t\te . access_flags = d . readUnsignedShort ( ) ; \n\t\t\t\tia . inner_classes [ k ] = e ; \n\t\t\t\t} \n\t\t\ta = ( attribute_info ) ia ; \n\t\t\t} \n\t\telse if ( s . compareTo ( attribute_info . RuntimeVisibleAnnotations ) == NUM00 ) { \n\t\t\tRuntimeVisibleAnnotations_attribute ra = new RuntimeVisibleAnnotations_attribute $F72 ; \n\t\t\tra . number_of_annotations = d . readUnsignedShort ( ) ; \n\t\t\tra . annotations = new annotation [ ra . number_of_annotations ] ; \n\t\t\tfor ( int k = NUM00 ; \n\t\t\tk < ra . number_of_annotations ; \n\t\t\tk ++ ) { \n\t\t\t\tannotation annot = new annotation $F72 ; \n\t\t\t\tannot . type_index = d . readUnsignedShort ( ) ; \n\t\t\t\tannot . num_element_value_pairs = d . readUnsignedShort ( ) ; \n\t\t\t\tannot . element_value_pairs = readElementValues ( annot . num_element_value_pairs , d , _BOOL , NUM00 ) ; \n\t\t\t\tra . annotations [ k ] = annot ; \n\t\t\t\t} \n\t\t\ta = ( attribute_info ) ra ; \n\t\t\t} \n\t\telse if ( s . compareTo ( attribute_info . RuntimeInvisibleAnnotations ) == NUM00 ) { \n\t\t\tRuntimeInvisibleAnnotations_attribute ra = new RuntimeInvisibleAnnotations_attribute $F72 ; \n\t\t\tra . number_of_annotations = d . readUnsignedShort ( ) ; \n\t\t\tra . annotations = new annotation [ ra . number_of_annotations ] ; \n\t\t\tfor ( int k = NUM00 ; \n\t\t\tk < ra . number_of_annotations ; \n\t\t\tk ++ ) { \n\t\t\t\tannotation annot = new annotation $F72 ; \n\t\t\t\tannot . type_index = d . readUnsignedShort ( ) ; \n\t\t\t\tannot . num_element_value_pairs = d . readUnsignedShort ( ) ; \n\t\t\t\tannot . element_value_pairs = readElementValues ( annot . num_element_value_pairs , d , _BOOL , NUM00 ) ; \n\t\t\t\tra . annotations [ k ] = annot ; \n\t\t\t\t} \n\t\t\ta = ( attribute_info ) ra ; \n\t\t\t} \n\t\telse if ( s . compareTo ( attribute_info . RuntimeVisibleParameterAnnotations ) == NUM00 ) { \n\t\t\tRuntimeVisibleParameterAnnotations_attribute ra = new RuntimeVisibleParameterAnnotations_attribute $F72 ; \n\t\t\tra . num_parameters = d . readUnsignedByte ( ) ; \n\t\t\tra . parameter_annotations = new parameter_annotation [ ra . num_parameters ] ; \n\t\t\tfor ( int x = NUM00 ; \n\t\t\tx < ra . num_parameters ; \n\t\t\tx ++ ) { \n\t\t\t\tparameter_annotation pAnnot = new parameter_annotation $F72 ; \n\t\t\t\tpAnnot . num_annotations = d . readUnsignedShort ( ) ; \n\t\t\t\tpAnnot . annotations = new annotation [ pAnnot . num_annotations ] ; \n\t\t\t\tfor ( int k = NUM00 ; \n\t\t\t\tk < pAnnot . num_annotations ; \n\t\t\t\tk ++ ) { \n\t\t\t\t\tannotation annot = new annotation $F72 ; \n\t\t\t\t\tannot . type_index = d . readUnsignedShort ( ) ; \n\t\t\t\t\tannot . num_element_value_pairs = d . readUnsignedShort ( ) ; \n\t\t\t\t\tannot . element_value_pairs = readElementValues ( annot . num_element_value_pairs , d , _BOOL , NUM00 ) ; \n\t\t\t\t\tpAnnot . annotations [ k ] = annot ; \n\t\t\t\t\t} \n\t\t\t\tra . parameter_annotations [ x ] = pAnnot ; \n\t\t\t\t} \n\t\t\ta = ( attribute_info ) ra ; \n\t\t\t} \n\t\telse if ( s . compareTo ( attribute_info . RuntimeInvisibleParameterAnnotations ) == NUM00 ) { \n\t\t\tRuntimeInvisibleParameterAnnotations_attribute ra = new RuntimeInvisibleParameterAnnotations_attribute $F72 ; \n\t\t\tra . num_parameters = d . readUnsignedByte ( ) ; \n\t\t\tra . parameter_annotations = new parameter_annotation [ ra . num_parameters ] ; \n\t\t\tfor ( int x = NUM00 ; \n\t\t\tx < ra . num_parameters ; \n\t\t\tx ++ ) { \n\t\t\t\tparameter_annotation pAnnot = new parameter_annotation $F72 ; \n\t\t\t\tpAnnot . num_annotations = d . readUnsignedShort ( ) ; \n\t\t\t\tpAnnot . annotations = new annotation [ pAnnot . num_annotations ] ; \n\t\t\t\tfor ( int k = NUM00 ; \n\t\t\t\tk < pAnnot . num_annotations ; \n\t\t\t\tk ++ ) { \n\t\t\t\t\tannotation annot = new annotation $F72 ; \n\t\t\t\t\tannot . type_index = d . readUnsignedShort ( ) ; \n\t\t\t\t\tannot . num_element_value_pairs = d . readUnsignedShort ( ) ; \n\t\t\t\t\tannot . element_value_pairs = readElementValues ( annot . num_element_value_pairs , d , _BOOL , NUM00 ) ; \n\t\t\t\t\tpAnnot . annotations [ k ] = annot ; \n\t\t\t\t\t} \n\t\t\t\tra . parameter_annotations [ x ] = pAnnot ; \n\t\t\t\t} \n\t\t\ta = ( attribute_info ) ra ; \n\t\t\t} \n\t\telse if ( s . compareTo ( attribute_info . AnnotationDefault ) == NUM00 ) { \n\t\t\tAnnotationDefault_attribute da = new AnnotationDefault_attribute $F72 ; \n\t\t\telement_value [ ] result = readElementValues ( NUM00 , d , _BOOL , NUM00 ) ; \n\t\t\tda . default_value = result [ NUM00 ] ; \n\t\t\ta = ( attribute_info ) da ; \n\t\t\t} \n\t\telse if ( s . equals ( attribute_info . BootstrapMethods ) ) { \n\t\t\tBootstrapMethods_attribute bsma = new BootstrapMethods_attribute $F72 ; \n\t\t\t$F27319 ( count , d ) bsma . method_handles = new short [ count ] ; \n\t\t\tbsma . arg_indices = new short [ count ] [ ] ; \n\t\t\tfor ( $F119 ( num , count ) ) { \n\t\t\t\tshort index = ( short ) d . readUnsignedShort ( ) ; \n\t\t\t\tbsma . method_handles [ num ] = index ; \n\t\t\t\t$F27319 ( argCount , d ) bsma . arg_indices [ num ] = new short [ argCount ] ; \n\t\t\t\tfor ( $F119 ( numArg , argCount ) ) { \n\t\t\t\t\tshort indexArg = ( short ) d . readUnsignedShort ( ) ; \n\t\t\t\t\tbsma . arg_indices [ num ] [ numArg ] = indexArg ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tassert bootstrap_methods_attribute == null : NUM00 ; \n\t\t\ta = bootstrap_methods_attribute = bsma ; \n\t\t\t} \n\t\telse { \n\t\t\tGeneric_attribute ga = new Generic_attribute $F72 ; \n\t\t\tif ( len > NUM00 ) { \n\t\t\t\tga . info = new byte [ ( int ) len ] ; \n\t\t\t\td . read ( ga . info ) ; \n\t\t\t\t} \n\t\t\ta = ( attribute_info ) ga ; \n\t\t\t} \n\t\ta . attribute_name = j ; \n\t\ta . attribute_length = len ; \n\t\tai [ i ] = a ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "private void notifiyDownloadState $F72 { \n\tsynchronized ( mDownloadMonitor ) { \n\t\t$F27746 ( Log , LOG_TAG ) $F8071 ( mDownloadMonitor ) } \n\t} \n"}, {"code": "private PKIXBuilderParameters CreatePKIXBuilderParameters ( X509Certificate endCert ) throws CertificatePathBuildingException { \n\tX509CertSelector targetConstraints = new X509CertSelector $F72 ; \n\ttargetConstraints . setCertificate ( endCert ) ; \n\tPKIXBuilderParameters params ; \n\ttry { \n\t\tparams = new PKIXBuilderParameters ( trustStore , targetConstraints ) ; \n\t\tparams . setRevocationEnabled ( _BOOL ) ; \n\t\t} \n\tcatch ( KeyStoreException e ) { \n\t\tthrow new CertificatePathBuildingException $F11592 ( e ) ; \n\t\t} \n\tcatch ( InvalidAlgorithmParameterException e ) { \n\t\tthrow new CertificatePathBuildingException $F11592 ( e ) ; \n\t\t} \n\tcatch ( Throwable e ) { \n\t\tthrow new CertificatePathBuildingException $F11592 ( e ) ; \n\t\t} \n\t$F5363 certCollection = new $F3523 $F72 ; \n\taddCertificateCandidates ( endCert , certCollection ) ; \n\tif $F5973 ( certCollection ) { \n\t\ttry { \n\t\t\tCertStore certStore = CertStore . getInstance ( NUM00 , new CollectionCertStoreParameters ( certCollection ) ) ; \n\t\t\tparams . addCertStore ( certStore ) ; \n\t\t\t} \n\t\tcatch ( InvalidAlgorithmParameterException e ) { \n\t\t\tthrow new CertificatePathBuildingException $F11592 ( e ) ; \n\t\t\t} \n\t\tcatch ( NoSuchAlgorithmException e ) { \n\t\t\tthrow new CertificatePathBuildingException $F11592 ( e ) ; \n\t\t\t} \n\t\t} \n\telse $F981 ( logger ) return params ; \n\t} \n"}, {"code": "public synchronized void addSeries ( XYSeries series ) $F207 ( mSeries , series ) "}, {"code": "public static String valueOf ( long value ) $F23210 ( Long , value ) "}, {"code": "public void printStackTrace $F72 { \n\tThrowable t ; \n\tStringWriter writer ; \n\t$F24473 ( writer ) ; \n\tt = $F219728 ; \n\t$F19083 ( t ) $F24477 ( t , writer ) $F31458 ( println , writer ) } \n"}, {"code": "protected int effectiveBandSize $F6803 ( dim1 , dim2 ) { \n\tif ( bandSize == Double . POSITIVE_INFINITY ) { \n\t\treturn ( dim1 > dim2 ) ? dim1 : dim2 ; \n\t\t} \n\tif ( bandSize >= NUM00 ) $F23220 ( bandSize ) return ( int ) Math . ceil ( ( dim1 >= dim2 ? dim1 : dim2 ) * bandSize ) ; \n\t} \n"}, {"code": "private final Object arenaExchange $F200458 ( item , timed , ns ) { \n\t$F46551 a = arena ; \n\t$F200460 ( p , participant ) for ( int i = p . index ; \n\t; \n\t) { \n\t\tint b , m , c ; \n\t\tlong j ; \n\t\tNode q = ( Node ) U . getObjectVolatile ( a , j = ( i < < ASHIFT ) + ABASE ) ; \n\t\tif ( q != null && U . compareAndSwapObject ( a , j , q , null ) ) $F200465 ( v , q , item , w , U ) else if ( i <= ( m = ( b = bound ) & MMASK ) && q == null ) { \n\t\t\tp . item = item ; \n\t\t\tif $F200476 ( U , a , j , p ) { \n\t\t\t\tlong end = ( timed && m == NUM00 ) ? System . nanoTime ( ) + ns : NUM00 ; \n\t\t\t\t$F686 ( t , Thread ) for ( int h = p . hash , spins = SPINS ; \n\t\t\t\t; \n\t\t\t\t) { \n\t\t\t\t\tObject v = p . match ; \n\t\t\t\t\tif ( v != null ) { \n\t\t\t\t\t\t$F200524 ( U , p , MATCH ) p . item = null ; \n\t\t\t\t\t\tp . hash = h ; \n\t\t\t\t\t\treturn v ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse if ( spins > NUM00 ) $F200502 ( h , SPINS , t , spins , Thread ) else if ( U . getObjectVolatile ( a , j ) != p ) spins = SPINS ; \n\t\t\t\t\telse if ( $F147861 ( t ) && m == NUM00 && $F200507 ( timed , ns , end , System ) ) { \n\t\t\t\t\t\tU . putObject ( t , BLOCKER , this ) ; \n\t\t\t\t\t\tp . parked = t ; \n\t\t\t\t\t\tif ( U . getObjectVolatile ( a , j ) == p ) U . park ( _BOOL , ns ) ; \n\t\t\t\t\t\tp . parked = null ; \n\t\t\t\t\t\t$F200511 ( U , t , BLOCKER ) } \n\t\t\t\t\telse if ( U . getObjectVolatile ( a , j ) == p && U . compareAndSwapObject ( a , j , p , null ) ) { \n\t\t\t\t\t\tif ( m != NUM00 ) U . compareAndSwapInt ( this , BOUND , b , b + SEQ - NUM00 ) ; \n\t\t\t\t\t\tp . item = null ; \n\t\t\t\t\t\tp . hash = h ; \n\t\t\t\t\t\ti = p . index >>>= NUM00 ; \n\t\t\t\t\t\tif $F2754 ( Thread ) $F1274 if ( timed && m == NUM00 && ns <= NUM00 ) return TIMED_OUT ; \n\t\t\t\t\t\t$F597 } \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse p . item = null ; \n\t\t\t} \n\t\telse { \n\t\t\tif ( p . bound != b ) { \n\t\t\t\tp . bound = b ; \n\t\t\t\tp . collides = NUM00 ; \n\t\t\t\ti = ( i != m || m == NUM00 ) ? m : m - NUM00 ; \n\t\t\t\t} \n\t\t\telse if ( ( c = p . collides ) < m || m == FULL || ! U . compareAndSwapInt ( this , BOUND , b , b + SEQ + NUM00 ) ) { \n\t\t\t\tp . collides = c + NUM00 ; \n\t\t\t\ti = ( i == NUM00 ) ? m : i - NUM00 ; \n\t\t\t\t} \n\t\t\telse i = m + NUM00 ; \n\t\t\tp . index = i ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static int encodeLongitudeCeil ( double longitude ) { \n\tGeoUtils . checkLongitude ( longitude ) ; \n\tif ( longitude == NUM00 ) { \n\t\tlongitude = Math . nextDown ( longitude ) ; \n\t\t} \n\treturn ( int ) Math . ceil ( longitude / LON_DECODE ) ; \n\t} \n"}, {"code": "private $F16501 diff_lineMode $F9179 ( text1 , text2 , deadline ) { \n\tLinesToCharsResult b = diff_linesToChars ( text1 , text2 ) ; \n\ttext1 = b . chars1 ; \n\ttext2 = b . chars2 ; \n\t$F3803 linearray = b . lineArray ; \n\t$F40337 ( diffs , diff_main , text1 , text2 , _BOOL , deadline ) diff_charsToLines ( diffs , linearray ) ; \n\tdiff_cleanupSemantic ( diffs ) ; \n\t$F340181 ( diffs , Operation ) int count_delete = NUM00 ; \n\tint count_insert = NUM00 ; \n\tString text_delete = NUM00 ; \n\tString text_insert = NUM00 ; \n\t$F340184 ( pointer , diffs ) $F340186 ( thisDiff , pointer ) while ( thisDiff != null ) { \n\t\tswitch ( thisDiff . operation ) { \n\t\t\t$F357861 ( INSERT , count_insert , text_insert , thisDiff ) $F357861 ( DELETE , count_delete , text_delete , thisDiff ) case EQUAL : if ( count_delete >= NUM00 && count_insert >= NUM00 ) { \n\t\t\t\t$F45359 ( pointer ) for ( $F41842 ( j , count_delete , count_insert ) ) { \n\t\t\t\t\t$F45359 ( pointer ) $F7042 ( pointer ) } \n\t\t\t\tfor ( Diff newDiff : diff_main ( text_delete , text_insert , _BOOL , deadline ) ) $F207 ( pointer , newDiff ) } \n\t\t\tcount_insert = NUM00 ; \n\t\t\tcount_delete = NUM00 ; \n\t\t\ttext_delete = NUM00 ; \n\t\t\ttext_insert = NUM00 ; \n\t\t\t$F597 } \n\t\t$F335731 ( thisDiff , pointer ) } \n\tdiffs . removeLast ( ) ; \n\treturn diffs ; \n\t} \n"}, {"code": "public static _Fields findByThriftId ( int fieldId ) { \n\tswitch ( fieldId ) { \n\t\t$F3366 return ID ; \n\t\t$F3366 return CREATE_TIME ; \n\t\t$F3366 return UPDATE_TIME ; \n\t\t$F3366 return OPERATION ; \n\t\t$F3366 return STATUS ; \n\t\t$F3366 return SRC_PATH ; \n\t\t$F3366 return SRC_CLUSTER ; \n\t\t$F3366 return SRC_DB ; \n\t\t$F3366 return SRC_TABLE ; \n\t\t$F3366 return SRC_PARTITIONS ; \n\t\t$F3366 return SRC_MODIFIED_TIME ; \n\t\t$F3366 return RENAME_TO_DB ; \n\t\t$F3366 return RENAME_TO_TABLE ; \n\t\t$F3366 return RENAME_TO_PATH ; \n\t\t$F3366 return EXTRAS ; \n\t\t$F3366 return WAITING_ON_JOBS ; \n\t\t$F20809 } \n\t} \n"}, {"code": "public JSONBuffer appendKeyHash ( Object key ) { \n\tif ( stack . empty ( ) || stack . peek ( ) != Operand . HASH ) $F19954 addQuotedString ( key ) ; \n\t$F84 ( buffer ) $F84 ( buffer ) stack . push ( Operand . HASH ) ; \n\treturn this ; \n\t} \n"}, {"code": "static ReplayPromise $F8317 anyReplay ( final Duration timeout , final Promise $F1011 ... promises ) { \n\treturn anyReplay ( timeout , System . currentTimeMillis ( ) , promises ) ; \n\t} \n"}, {"code": "public static PolicyService sendPLLRequest ( URL policyServiceUrl , PolicyRequest preq ) throws SendRequestException , PolicyException { \n\tString lbcookie = null ; \n\ttry { \n\t\tlbcookie = getLBCookie ( preq ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new SendRequestException ( e ) ; \n\t\t} \n\tPolicyService policyService = new PolicyService $F72 ; \n\tpolicyService . setMethodID ( PolicyService . POLICY_REQUEST_ID ) ; \n\tpolicyService . setPolicyRequest ( preq ) ; \n\tString xmlString = policyService . toXMLString ( ) ; \n\tRequest request = new Request ( xmlString ) ; \n\tRequestSet requestSet = new RequestSet ( PolicyService . POLICY_SERVICE ) ; \n\trequestSet . addRequest ( request ) ; \n\t$F323452 ( debug , policyServiceUrl , xmlString ) Vector responses = PLLClient . send ( policyServiceUrl , lbcookie , requestSet ) ; \n\tResponse response = ( Response ) responses . elementAt ( NUM00 ) ; \n\tPolicyService ps = PolicyService . parseXML ( response . getContent ( ) ) ; \n\tif $F6299 ( debug ) { \n\t\tdebug . message ( NUM00 + NUM00 + ps . toXMLString ( ) ) ; \n\t\t} \n\treturn ps ; \n\t} \n"}, {"code": "public static URI createId ( Class < ? extends DataObject > clazz ) { \n\treturn newId ( clazz , getLocation ( clazz ) ) ; \n\t} \n"}, {"code": "public static double log2 ( double x ) { \n\treturn Math . log ( x ) * ONE_BY_LOG2 ; \n\t} \n"}, {"code": "$F18534 ( newcount , currentBufferIndex , buffers , filledBufferSum , currentBuffer , newBufferSize , Math ) "}, {"code": "$F129060 ( views , direction , focusableMode , focusableCount , descendantFocusability , getDescendantFocusability , FOCUS_BLOCK_DESCENDANTS , i , getChildCount , child , getChildAt , VISIBLE , ii , infoForChild , mCurItem , FOCUS_AFTER_DESCENDANTS , isFocusable , FOCUSABLES_TOUCH_MODE , isInTouchMode , isFocusableInTouchMode , this ) "}, {"code": "public void insertElementAt ( Node value , int at ) { \n\t$F132452 ( m_mutable , XSLMessages , XPATHErrorResources ) if ( null == m_map ) $F132454 ( m_map , m_blocksize , m_mapSize ) else if $F11078 ( m_firstFree , m_mapSize ) $F132458 ( m_mapSize , m_blocksize , System , m_map , newMap , m_firstFree ) $F45575 ( at , m_firstFree , System , m_map ) m_map [ at ] = value ; \n\tm_firstFree ++ ; \n\t} \n"}, {"code": "public Result regress ( DiscreteVariable x , $F27878 regressors ) { \n\tif ( ! binary ( x ) ) $F825 for ( Node node : regressors ) { \n\t\tif ( ! ( node instanceof ContinuousVariable || binary ( node ) ) ) $F825 } \n\t$F3789 _regressors = new double [ regressors . size ( ) ] [ getRows ( ) . length ] ; \n\tfor ( $F2277 ( j , regressors ) ) { \n\t\tint col = dataSet . getColumn ( regressors . get ( j ) ) ; \n\t\t$F42658 ( dataCol , dataCols , col ) for ( int i = NUM00 ; \n\t\ti < getRows ( ) . length ; \n\t\ti ++ ) { \n\t\t\t_regressors [ j ] [ i ] = dataCol [ getRows ( ) [ i ] ] ; \n\t\t\t} \n\t\t} \n\t$F2027 target = new int [ getRows ( ) . length ] ; \n\tint col = dataSet . getColumn ( dataSet . getVariable ( x . getName ( ) ) ) ; \n\tfor ( int i = NUM00 ; \n\ti < getRows ( ) . length ; \n\ti ++ ) { \n\t\ttarget [ i ] = dataSet . getInt ( getRows ( ) [ i ] , col ) ; \n\t\t} \n\t$F24645 ( regressorNames ) for ( Node node : regressors ) $F29791 ( regressorNames , node ) return regress ( target , x . getName ( ) , _regressors , regressorNames ) ; \n\t} \n"}, {"code": "void copyFile ( String source , String target ) ; \n"}, {"code": "static public List < $F246175 > tokenizeFile ( String filename , boolean doNIST ) { \n\tList < $F246175 > $F204 ( sequences ) ; \n\tLineNumberReader reader = IOTools . getReaderFromFile ( filename ) ; \n\ttry { \n\t\tfor ( $F26610 ( line , reader ) ) { \n\t\t\tif ( doNIST ) line = NISTTokenizer . tokenize ( line ) ; \n\t\t\tsequences . add ( IStrings . tokenize ( line ) ) ; \n\t\t\t} \n\t\t$F59 ( reader ) } \n\t$F12241 ( e ) return sequences ; \n\t} \n"}, {"code": "public Statement like ( String expr ) { \n\t$F84 ( statement ) appendEscapedSQLString ( statement , expr ) ; \n\treturn this ; \n\t} \n"}, {"code": "public static KdbxHeader readKdbxHeader ( KdbxHeader kdbxHeader , InputStream inputStream ) throws IOException { \n\tMessageDigest digest = Encryption . getMessageDigestInstance ( ) ; \n\tDigestInputStream digestInputStream = new DigestInputStream ( inputStream , digest ) ; \n\tLittleEndianDataInputStream ledis = new LittleEndianDataInputStream ( digestInputStream ) ; \n\tif ( ! verifyMagicNumber ( ledis ) ) $F4639 if ( ! verifyFileVersion ( ledis ) ) $F4639 byte headerType ; \n\twhile ( ( headerType = ledis . readByte ( ) ) != HeaderType . END ) { \n\t\tswitch ( headerType ) { \n\t\t\tcase HeaderType . COMMENT : getByteArray ( ledis ) ; \n\t\t\t$F597 case HeaderType . CIPHER_ID : kdbxHeader . setCipherUuid ( getByteArray ( ledis ) ) ; \n\t\t\t$F597 case HeaderType . COMPRESSION_FLAGS : kdbxHeader . setCompressionFlags ( getInt ( ledis ) ) ; \n\t\t\t$F597 case HeaderType . MASTER_SEED : kdbxHeader . setMasterSeed ( getByteArray ( ledis ) ) ; \n\t\t\t$F597 case HeaderType . TRANSFORM_SEED : kdbxHeader . setTransformSeed ( getByteArray ( ledis ) ) ; \n\t\t\t$F597 case HeaderType . TRANSFORM_ROUNDS : kdbxHeader . setTransformRounds ( getLong ( ledis ) ) ; \n\t\t\t$F597 case HeaderType . ENCRYPTION_IV : kdbxHeader . setEncryptionIv ( getByteArray ( ledis ) ) ; \n\t\t\t$F597 case HeaderType . PROTECTED_STREAM_KEY : kdbxHeader . setProtectedStreamKey ( getByteArray ( ledis ) ) ; \n\t\t\t$F597 case HeaderType . STREAM_START_BYTES : kdbxHeader . setStreamStartBytes ( getByteArray ( ledis ) ) ; \n\t\t\t$F597 case HeaderType . INNER_RANDOM_STREAM_ID : kdbxHeader . setInnerRandomStreamId ( getInt ( ledis ) ) ; \n\t\t\t$F597 $F1267 $F4638 } \n\t\t} \n\tgetByteArray ( ledis ) ; \n\tkdbxHeader . setHeaderHash ( digest . digest ( ) ) ; \n\treturn kdbxHeader ; \n\t} \n"}, {"code": "public static $F96 copyToByteArray ( InputStream in ) throws IOException { \n\t$F39018 ( out , BUFFER_SIZE ) copy ( in , out ) ; \n\t$F11316 ( out ) } \n"}, {"code": "public boolean isEnumConstant $F72 { \n\treturn ( getModifiers ( ) & Modifier . ENUM ) != NUM00 ; \n\t} \n"}, {"code": "public boolean containsAny ( Collection < Taxon > taxa ) { \n\tfor ( Taxon taxon : taxa ) $F51680 ( taxa , taxon , _BOOL ) return _BOOL ; \n\t} \n"}, {"code": "$F1431 public synchronized T dequeueTask $F72 throws InterruptedException { \n\twhile $F2979 ( _data ) { \n\t\tif ( ! _closedInput ) wait ( ) ; \n\t\telse $F38791 ( NO_MORE_TASKS ) } \n\tT t = _data . removeFirst ( ) ; \n\tnotify ( ) ; \n\treturn t ; \n\t} \n"}, {"code": "$F1 public void readExternal ( ObjectInput in ) throws $F6427 { \n\tsuper . readExternal ( in ) ; \n\tthis . facetName = in . readUTF ( ) ; \n\t} \n"}, {"code": "private boolean stringToBoolean ( String condition ) { \n\tboolean result = _BOOL ; \n\tif $F22 ( condition ) { \n\t\t$F28921 ( s , condition ) if ( s . equalsIgnoreCase ( NUM00 ) || s . equals ( NUM00 ) || s . equalsIgnoreCase ( NUM00 ) ) result = _BOOL ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static void writeUINT32 ( long number , OutputStream out ) throws IOException { \n\t$F6853 ( number ) $F12496 ( toWrite ) for ( int i = NUM00 ; \n\ti <= NUM00 ; \n\ti += NUM00 ) { \n\t\ttoWrite [ i / NUM00 ] = ( byte ) ( ( number > > i ) & NUM00 ) ; \n\t\t} \n\tout . write ( toWrite ) ; \n\t} \n"}, {"code": "public RemoteMetaDataImpl ( Schema schema ) throws RemoteException { \n\tthis . schema = schema ; \n\tfields . addAll ( schema . fields ( ) ) ; \n\t} \n"}, {"code": "private void checkServerResponseCode ( HttpURLConnection urlConnection ) throws RequestFailureException { \n\ttry { \n\t\tif ( urlConnection . getResponseCode ( ) != NUM00 ) { \n\t\t\tthrow new RequestFailureException ( $F7974 ( urlConnection ) + NUM00 ) ; \n\t\t\t} \n\t\t} \n\tcatch ( IOException e ) $F49482 ( e ) } \n"}, {"code": "public void addSwitchWithOptionalExtraPart $F1947 ( option , optionExtraPartSynopsis , description ) { \n\toptionList . add ( option ) ; \n\toptionExtraPartSynopsisMap . put ( option , optionExtraPartSynopsis ) ; \n\toptionDescriptionMap . put ( option , description ) ; \n\tint length = $F71221 ( option , optionExtraPartSynopsis ) + NUM00 ; \n\t$F12283 ( length , maxWidth ) } \n"}, {"code": "public static Object detectLinuxDefaultFileBrowser $F4673 ( fileBrowsers ) { \n\t$F8728 ( command ) $F18793 ( command ) $F18793 ( command ) $F18793 ( command ) $F18793 ( command ) if ( fileBrowsers == null ) { \n\t\tfileBrowsers = $F532 ; \n\t\t$F16824 ( fileBrowsers ) } \n\treturn Utils . isExpectedCommandOutput ( command , fileBrowsers ) ; \n\t} \n"}, {"code": "public void updated $F72 { \n\tcurrentColor = HtmlColors . decode ( getSettingValue ( ) ) ; \n\tsecondaryColor = HtmlColors . decode ( baseColor ) ; \n\tColor foregroundColor ; \n\tColor backgroundColor ; \n\tif ( type == FOREGROUND ) { \n\t\tforegroundColor = currentColor ; \n\t\tbackgroundColor = secondaryColor ; \n\t\t} \n\telse { \n\t\tforegroundColor = secondaryColor ; \n\t\tbackgroundColor = currentColor ; \n\t\t} \n\tpreview . setForeground ( foregroundColor ) ; \n\tpreview . setBackground ( backgroundColor ) ; \n\t} \n"}, {"code": "public Collection < ? extends ImmutableClassType > removeInstrumentationPoints ( final Collection < ? extends ImmutableType > types ) { \n\treturn removeInstrumentationPoints ( types , Collections . < IInstrumentationApplier > singleton ( RemoveAllInstrumentationApplier . getInstance ( ) ) ) ; \n\t} \n"}, {"code": "private Record createRecord ( RecordProperties recordProperties ) throws RecordException { \n\tString debugDirectory ; \n\tif ( isRecording ( ) ) { \n\t\tdebugDirectory = previousDebugDirectory ; \n\t\t} \n\telse { \n\t\tdebugDirectory = SystemPropertiesManager . get ( DebugConstants . CONFIG_DEBUG_DIRECTORY ) ; \n\t\t} \n\tString recordDirectory = debugDirectory + File . separator + RecordConstants . RECORD_FOLDER_NAME + File . separator + recordProperties . getIssueID ( ) + File . separator + recordProperties . getReferenceID ( ) ; \n\tRecord record = new Record ( recordProperties , recordDirectory ) ; \n\ttry { \n\t\tcreateFolder ( record . getFolderPath ( ) ) ; \n\t\tPrintWriter printWriterInfo = getPrintWriterForFile ( record , RecordConstants . INFO_FILE_NAME ) ; \n\t\tJsonValue info = recordReport . infoReport ( record ) ; \n\t\ttry { \n\t\t\tJSONObject json = new JSONObject $F3362 ( info ) ; \n\t\t\tprintWriterInfo . println ( json . toString ( NUM00 ) ) ; \n\t\t\t} \n\t\tcatch ( JSONException e ) { \n\t\t\tdebug . warning ( NUM00 , info , e ) ; \n\t\t\tprintWriterInfo . println ( info ) ; \n\t\t\t} \n\t\t$F1206 ( printWriterInfo ) return record ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\t$F59427 ( debug , recordProperties , e ) throw new RecordException ( NUM00 + recordProperties . getIssueID ( ) + NUM00 , e ) ; \n\t\t} \n\t} \n"}, {"code": "public static LaggedEdge serializableInstance $F72 { \n\treturn new LaggedEdge ( NUM00 , LaggedFactor . serializableInstance ( ) ) ; \n\t} \n"}, {"code": "public final void dispatchCharactersEvents ( int nodeHandle , ContentHandler ch , boolean normalize ) throws SAXException { \n\tint identity = makeNodeIdentity ( nodeHandle ) ; \n\tif ( identity == DTM . NULL ) $F665 int type = _type2 ( identity ) ; \n\tif ( type == DTM . ELEMENT_NODE || type == DTM . DOCUMENT_NODE ) { \n\t\tint startNode = identity ; \n\t\tidentity = _firstch2 ( identity ) ; \n\t\tif ( DTM . NULL != identity ) { \n\t\t\tint offset = - NUM00 ; \n\t\t\tint length = NUM00 ; \n\t\t\tdo { \n\t\t\t\ttype = _exptype2 ( identity ) ; \n\t\t\t\tif $F117450 ( type , DTM ) { \n\t\t\t\t\tint dataIndex = m_dataOrQName . elementAt ( identity ) ; \n\t\t\t\t\tif ( dataIndex >= NUM00 ) { \n\t\t\t\t\t\tif ( - NUM00 == offset ) { \n\t\t\t\t\t\t\toffset = dataIndex > > > TEXT_LENGTH_BITS ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\tlength += dataIndex & TEXT_LENGTH_MAX ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse { \n\t\t\t\t\t\tif ( - NUM00 == offset ) { \n\t\t\t\t\t\t\toffset = m_data . elementAt ( - dataIndex ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\tlength += m_data . elementAt ( - dataIndex + NUM00 ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\tidentity ++ ; \n\t\t\t\t} \n\t\t\twhile ( _parent2 ( identity ) >= startNode ) ; \n\t\t\tif ( length > NUM00 ) { \n\t\t\t\tif ( normalize ) m_chars . sendNormalizedSAXcharacters ( ch , offset , length ) ; \n\t\t\t\telse m_chars . sendSAXcharacters ( ch , offset , length ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse if ( DTM . TEXT_NODE == type || DTM . CDATA_SECTION_NODE == type ) { \n\t\tint dataIndex = m_dataOrQName . elementAt ( identity ) ; \n\t\tif ( dataIndex >= NUM00 ) { \n\t\t\tif ( normalize ) m_chars . sendNormalizedSAXcharacters ( ch , dataIndex > > > TEXT_LENGTH_BITS , dataIndex & TEXT_LENGTH_MAX ) ; \n\t\t\telse m_chars . sendSAXcharacters ( ch , dataIndex > > > TEXT_LENGTH_BITS , dataIndex & TEXT_LENGTH_MAX ) ; \n\t\t\t} \n\t\telse { \n\t\t\tif ( normalize ) m_chars . sendNormalizedSAXcharacters ( ch , m_data . elementAt ( - dataIndex ) , m_data . elementAt ( - dataIndex + NUM00 ) ) ; \n\t\t\telse m_chars . sendSAXcharacters ( ch , m_data . elementAt ( - dataIndex ) , m_data . elementAt ( - dataIndex + NUM00 ) ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tint dataIndex = m_dataOrQName . elementAt ( identity ) ; \n\t\tif ( dataIndex < NUM00 ) { \n\t\t\tdataIndex = - dataIndex ; \n\t\t\tdataIndex = m_data . elementAt ( dataIndex + NUM00 ) ; \n\t\t\t} \n\t\t$F124180 ( str , m_values , dataIndex ) if ( normalize ) FastStringBuffer . sendNormalizedSAXcharacters ( str . toCharArray ( ) , NUM00 , str . length ( ) , ch ) ; \n\t\telse ch . characters ( $F62204 ( str ) ) ; \n\t\t} \n\t} \n"}, {"code": "$F49286 ( value , absMin , absMax , absValue , Math ) "}, {"code": "private static int lengthOfMimeNames ( String val ) { \n\t$F1384 ( len , val ) if ( len < NUM00 ) $F3935 ( len , val ) return len ; \n\t} \n"}, {"code": "private char readEscapeCharacter $F72 throws JSONException { \n\t$F52837 ( escaped , in , pos ) switch ( escaped ) { \n\t\t$F1262 if ( pos + NUM00 > in . length ( ) ) $F25983 ( syntaxError ) $F10821 ( hex , in , pos ) pos += NUM00 ; \n\t\t$F121531 ( Integer , hex ) $F12596 $F12596 $F12596 $F12596 $F12596 $F1262 $F1262 $F1262 $F1267 return escaped ; \n\t\t} \n\t} \n"}, {"code": "public static boolean isSha1String ( final String string ) { \n\t$F1832 ( Preconditions , string ) return $F1277 ( string ) && isHexString ( string ) ; \n\t} \n"}, {"code": "public boolean isWatched $F72 { \n\treturn watched ; \n\t} \n"}, {"code": "public void addDateChangeListener ( DateChangeListener listener ) $F207 ( dateChangeListeners , listener ) "}, {"code": "public static String stripFileProtocol ( String uriString ) { \n\t$F3110 ( uriString ) return uriString ; \n\t} \n"}, {"code": "public void replaceTemplate ( ElemTemplate v , int i ) throws TransformerException { \n\tif ( null == m_templates ) $F38324 replaceChild ( v , ( ElemTemplateElement ) m_templates . elementAt ( i ) ) ; \n\tm_templates . setElementAt ( v , i ) ; \n\tv . setStylesheet ( this ) ; \n\t} \n"}, {"code": "public RotatedProblem ( Problem problem , RealMatrix rotation ) { \n\tsuper ( ) ; \n\tthis . problem = problem ; \n\tthis . rotation = rotation ; \n\tSolution solution = problem . newSolution ( ) ; \n\tcenter = new double [ getNumberOfVariables ( ) ] ; \n\tlowerBounds = new double [ getNumberOfVariables ( ) ] ; \n\tupperBounds = new double [ getNumberOfVariables ( ) ] ; \n\tfor ( $F50810 ( i , getNumberOfVariables ) ) { \n\t\tRealVariable variable = ( RealVariable ) solution . getVariable ( i ) ; \n\t\tcenter [ i ] = ( variable . getLowerBound ( ) + variable . getUpperBound ( ) ) / NUM00 ; \n\t\tlowerBounds [ i ] = Math . sqrt ( NUM00 ) * ( variable . getLowerBound ( ) - center [ i ] ) ; \n\t\tupperBounds [ i ] = Math . sqrt ( NUM00 ) * ( variable . getUpperBound ( ) - center [ i ] ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F96 decode ( String data ) { \n\tint len = $F8196 ( data ) * NUM00 ; \n\t$F39018 ( bOut , len ) try { \n\t\tencoder . decode ( data , bOut ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new DecoderException $F11592 ( e ) ; \n\t\t} \n\t$F11316 ( bOut ) } \n"}, {"code": "public void characters $F62353 ( start , length ) throws SAXException $F92922 ( m_curValue , ch , start , length ) "}, {"code": "public boolean regenerate ( Projection proj ) { \n\tboolean ret = super . regenerate ( proj ) ; \n\tif ( proj != null && ! ret ) { \n\t\tret = generate ( proj ) ; \n\t\t} \n\treturn ret ; \n\t} \n"}, {"code": "$F1 public $F96 unwrap $F41456 ( incoming , offset , len ) throws LdapException { \n\t$F4727 ( copy , len ) $F21535 ( System , incoming , offset , copy , len ) return copy ; \n\t} \n"}, {"code": "private int sequentialForwardSelection ( String dataFile , $F806 features , int indVarColNumber , int X [ ] , int Y [ ] , double J [ ] , int rowIni , int rowEnd ) { \n\tdouble sig [ ] = new double [ Y . length ] ; \n\tint sigIndex [ ] = $F14242 ( Y ) ; \n\tdouble corXplusy [ ] = new double [ Y . length ] ; \n\tdouble corX ; \n\tif $F3305 ( X ) { \n\t\tRegression reg = new Regression $F72 ; \n\t\treg . multipleLinearRegression ( dataFile , indVarColNumber , X , features , interceptTerm , rowIni , rowEnd ) ; \n\t\tcorX = reg . getCorrelation ( ) ; \n\t\t} \n\telse corX = NUM00 ; \n\tfor ( $F1139 ( i , Y ) ) { \n\t\tcorXplusy [ i ] = correlationOfNewFeature ( dataFile , features , indVarColNumber , X , Y [ i ] , rowIni , rowEnd ) ; \n\t\tsig [ i ] = corXplusy [ i ] - corX ; \n\t\tsigIndex [ i ] = Y [ i ] ; \n\t\t} \n\tint minSig = MathUtils . getMinIndex ( sig ) ; \n\tJ [ NUM00 ] = corXplusy [ minSig ] ; \n\tJ [ NUM00 ] = corX ; \n\tint maxSig = MathUtils . getMaxIndex ( sig ) ; \n\tJ [ NUM00 ] = corXplusy [ maxSig ] ; \n\treturn sigIndex [ maxSig ] ; \n\t} \n"}, {"code": "private static $F96 codesToBytes ( String codes , boolean required ) { \n\tif $F1277 ( codes ) { \n\t\t$F4640 ( required ) $F1274 } \n\tif ( ( $F47012 ( codes ) ) != NUM00 ) $F21679 ( codes ) $F19710 ( bytes , codes ) for ( $F9808 ( i , bytes ) ) { \n\t\tint charIdx = i * NUM00 ; \n\t\tbytes [ i ] = ( byte ) ( $F138426 ( Integer , codes , charIdx ) ) ; \n\t\t} \n\treturn bytes ; \n\t} \n"}, {"code": "public DragEntry dragSelectedEntry $F72 { \n\ttry { \n\t\tKeyStoreHistory history = getActiveKeyStoreHistory ( ) ; \n\t\t$F1338 ( history ) KeyStoreState currentState = history . getCurrentState ( ) ; \n\t\tKeyStore keyStore = currentState . getKeyStore ( ) ; \n\t\tString alias = getSelectedEntryAlias ( ) ; \n\t\t$F1338 ( alias ) if ( KeyStoreUtil . isKeyEntry ( alias , keyStore ) ) { \n\t\t\tJOptionPane . showMessageDialog ( frame , res . getString ( NUM00 ) , KSE . getApplicationName ( ) , JOptionPane . WARNING_MESSAGE ) ; \n\t\t\t$F1274 } \n\t\tif ( KeyStoreUtil . isKeyPairEntry ( alias , keyStore ) ) { \n\t\t\tPassword password = currentState . getEntryPassword ( alias ) ; \n\t\t\tKeyStoreType type = KeyStoreType . resolveJce ( keyStore . getType ( ) ) ; \n\t\t\tif ( password == null && type . hasEntryPasswords ( ) ) { \n\t\t\t\tJOptionPane . showMessageDialog ( frame , res . getString ( NUM00 ) , KSE . getApplicationName ( ) , JOptionPane . WARNING_MESSAGE ) ; \n\t\t\t\t$F1274 } \n\t\t\tPrivateKey privateKey = ( PrivateKey ) keyStore . getKey ( alias , password . toCharArray ( ) ) ; \n\t\t\t$F65927 certificateChain = keyStore . getCertificateChain ( alias ) ; \n\t\t\treturn new DragKeyPairEntry ( alias , privateKey , password , certificateChain ) ; \n\t\t\t} \n\t\telse { \n\t\t\tCertificate trustedCertificate = keyStore . getCertificate ( alias ) ; \n\t\t\treturn new DragTrustedCertificateEntry ( alias , trustedCertificate ) ; \n\t\t\t} \n\t\t} \n\tcatch ( Exception ex ) { \n\t\tDError . displayError ( frame , ex ) ; \n\t\t$F1274 } \n\t} \n"}, {"code": "public void insert ( T object , int index ) { \n\tsynchronized ( mLock ) { \n\t\tif ( mOriginalValues != null ) $F42308 ( mOriginalValues , index , object ) else $F42308 ( mObjects , index , object ) } \n\t$F32367 ( mNotifyOnChange , notifyDataSetChanged ) } \n"}, {"code": "public static Document createDocument ( boolean isSecureProcessing ) { \n\ttry { \n\t\t$F2218 ( dfactory , DocumentBuilderFactory ) dfactory . setNamespaceAware ( _BOOL ) ; \n\t\t$F2220 ( docBuilder , dfactory ) $F218971 ( outNode , docBuilder ) return outNode ; \n\t\t} \n\tcatch ( ParserConfigurationException pce ) { \n\t\tthrow new RuntimeException ( XMLMessages . createXMLMessage ( XMLErrorResources . ER_CREATEDOCUMENT_NOT_SUPPORTED , null ) ) ; \n\t\t} \n\t} \n"}, {"code": "public double reduce ( String numericColumnName , NumericReduceFunction function ) { \n\tColumn column = column ( numericColumnName ) ; \n\treturn function . reduce ( column . toDoubleArray ( ) ) ; \n\t} \n"}, {"code": "public void testSetBitNegativeOutside1 $F72 $F117925 ( aSign , number , aNumber , aBytes , result , rBytes , resBytes , i , assertTrue , assertEquals ) "}, {"code": "static public String formatUInt8Char ( byte b ) { \n\tString ch = new String ( new byte [ ] { \n\t\tb } \n\t) ; \n\t$F2899 ( ch ) return formatUInt8 ( b ) + NUM00 + ch ; \n\t} \n"}, {"code": "public static final $F79542 removeIllegal ( Position pos , $F79542 moveList ) { \n\t$F79542 ret = new $F79542 $F72 ; \n\tUndoInfo ui = new UndoInfo $F72 ; \n\t$F2199 ( mlSize , moveList ) for ( $F119 ( mi , mlSize ) ) { \n\t\tMove m = moveList . get ( mi ) ; \n\t\tpos . makeMove ( m , ui ) ; \n\t\tpos . setWhiteMove ( ! pos . whiteMove ) ; \n\t\tif ( ! inCheck ( pos ) ) ret . add ( m ) ; \n\t\tpos . setWhiteMove ( ! pos . whiteMove ) ; \n\t\tpos . unMakeMove ( m , ui ) ; \n\t\t} \n\treturn ret ; \n\t} \n"}, {"code": "public static int applyMaskPenaltyRule4 ( ByteMatrix matrix ) { \n\tint numDarkCells = NUM00 ; \n\t$F30974 array = matrix . getArray ( ) ; \n\t$F2049 ( width , matrix ) $F2047 ( height , matrix ) for ( $F1316 ( y , height ) ) { \n\t\tfor ( $F1316 ( x , width ) ) { \n\t\t\tif ( array [ y ] [ x ] == NUM00 ) { \n\t\t\t\tnumDarkCells += NUM00 ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tint numTotalCells = matrix . getHeight ( ) * matrix . getWidth ( ) ; \n\t$F67468 ( darkRatio , numDarkCells , numTotalCells ) return Math . abs ( ( int ) ( darkRatio * NUM00 - NUM00 ) ) / NUM00 * NUM00 ; \n\t} \n"}, {"code": "private void checkState $F72 { \n\t$F4640 ( diagramRetrieved ) } \n"}, {"code": "static Hashtable convertToHash ( Map m ) { \n\t$F20036 ( retHash ) $F304893 ( s , m ) $F10531 ( iter , s ) while $F2921 ( iter ) { \n\t\t$F2778 ( key , iter ) $F125374 ( val , m , key ) $F39715 ( retHash , key , setToString , val ) } \n\treturn retHash ; \n\t} \n"}, {"code": "public void actionPerformed ( ActionEvent evt ) $F845 "}, {"code": "public boolean equal_at_start ( PlaPointInt p_point ) { \n\t$F397 ( p_point , _BOOL ) PlaPoint first = corner_first ( ) ; \n\t$F1964 ( first , p_point ) } \n"}, {"code": "public void forEachBlockDepthFirst ( boolean reverse , SsaBasicBlock . Visitor v ) { \n\tBitSet visited = new BitSet $F716 ( blocks ) ; \n\tStack < SsaBasicBlock > stack = new Stack < SsaBasicBlock > $F72 ; \n\tSsaBasicBlock rootBlock = reverse ? getExitBlock ( ) : getEntryBlock ( ) ; \n\t$F2329 ( rootBlock ) $F722 ( stack ) stack . add ( rootBlock ) ; \n\twhile $F3817 ( stack ) { \n\t\tSsaBasicBlock cur = stack . pop ( ) ; \n\t\tSsaBasicBlock parent = stack . pop ( ) ; \n\t\tif ( ! visited . get ( cur . getIndex ( ) ) ) { \n\t\t\tBitSet children = reverse ? cur . getPredecessors ( ) : cur . getSuccessors ( ) ; \n\t\t\tfor ( $F304395 ( i , children ) ; \n\t\t\ti >= NUM00 ; \n\t\t\t$F304396 ( i , children ) ) { \n\t\t\t\tstack . add ( cur ) ; \n\t\t\t\t$F18208 ( stack , blocks , i ) } \n\t\t\tvisited . set ( cur . getIndex ( ) ) ; \n\t\t\tv . visitBlock ( cur , parent ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "protected void fillPath $F72 $F18992 ( mPSStream , mFillOpStr ) "}, {"code": "$F112611 ( encoded , base64Data , len , removeWhiteSpace , FOURBYTE , numberQuadruple , b1 , b2 , b3 , b4 , d1 , d2 , d3 , d4 , i , encodedIndex , dataIndex , decodedData , isData , base64Alphabet , isPad , tmp , System ) "}, {"code": "public boolean isLastWindow ( AccessibilityWindowInfo baseWindow , int windowType ) { \n\tint index = getWindowIndex ( baseWindow ) ; \n\t$F3627 ( index , WRONG_INDEX , _BOOL ) $F2199 ( count , mWindows ) for ( $F2634 ( i , index , count ) ) { \n\t\tAccessibilityWindowInfo window = mWindows . get ( i ) ; \n\t\tif ( window != null && window . getType ( ) == windowType ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void passPgSessionMapEx ( ViewBean other ) { \n\tMap attributes = getPageSessionAttributes ( ) ; \n\tfor ( $F2774 ( i , retainPageSessionsBtwTabs ) ) { \n\t\t$F2778 ( key , i ) other . setPageSessionAttribute ( key , ( Serializable ) attributes . get ( key ) ) ; \n\t\t} \n\tother . setPageSessionAttribute ( getTrackingTabIDName ( ) , ( Serializable ) attributes . get ( getTrackingTabIDName ( ) ) ) ; \n\t} \n"}, {"code": "public long time $F72 { \n\treturn heartbeatTime ; \n\t} \n"}, {"code": "public boolean hitClip $F2026 ( x , y , width , height ) { \n\treturn g . hitClip ( x , y , width , height ) ; \n\t} \n"}, {"code": "public static CloseWatcher pollUnclosed $F72 { \n\t$F145042 q = queue ; \n\t$F1338 ( q ) while ( _BOOL ) { \n\t\tCloseWatcher cw = ( CloseWatcher ) q . poll ( ) ; \n\t\t$F1338 ( cw ) $F4578 ( refs , cw ) if ( cw . closeable != null ) { \n\t\t\treturn cw ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private static boolean appendOdexesToClassPath ( Context cxt , File dexDir , $F806 names ) { \n\t$F22814 ( strDexDir , dexDir ) $F8728 ( jarPaths ) for ( $F1139 ( i , names ) ) { \n\t\tString jarPath = strDexDir + NUM00 + names [ i ] ; \n\t\t$F1705 ( f , jarPath ) if $F7110 ( f ) $F207 ( jarPaths , jarPath ) } \n\t$F5442 ( jarsOfDex , jarPaths ) jarPaths . toArray ( jarsOfDex ) ; \n\tPathClassLoader pcl = ( PathClassLoader ) cxt . getClassLoader ( ) ; \n\ttry { \n\t\tif ( Build . VERSION . SDK_INT < SDK_INT_ICS ) { \n\t\t\tFrameworkHack . appendDexListImplUnderICS ( jarsOfDex , pcl , dexDir ) ; \n\t\t\t} \n\t\telse { \n\t\t\tboolean kitkatPlus = Build . VERSION . SDK_INT >= SDK_INT_KITKAT ; \n\t\t\tboolean marshmallowPlus = Build . VERSION . SDK_INT >= SDK_INT_MARSHMALLOW ; \n\t\t\t$F14386 jarFiles = DexDex . strings2Files ( jarsOfDex ) ; \n\t\t\tFrameworkHack . appendDexListImplICS ( jarFiles , pcl , dexDir , kitkatPlus , marshmallowPlus ) ; \n\t\t\t} \n\t\t$F42002 ( jarName , names , theAppended ) if ( debug ) { \n\t\t\t$F12258 ( Log , TAG , pcl ) $F12258 ( Log , TAG , theAppended ) } \n\t\t} \n\t$F12237 ( ex ) return _BOOL ; \n\t} \n"}, {"code": "$F1 public final int readInt $F72 throws IOException { \n\t$F52634 ( dis , work ) return ( work [ NUM00 ] ) < < NUM00 | $F169749 ( work ) | $F169749 ( work ) | $F18896 ( work ) ; \n\t} \n"}, {"code": "private void assertSerializeAndDesDateTime ( String dateTimeString ) throws RyaTypeResolverException $F47309 ( assertSerializeAndDesDateTime , dateTimeString ) "}, {"code": "$F125330 ( isHardMode ) "}, {"code": "protected String doIt $F72 throws Exception { \n\tsetup ( ) ; \n\tfor ( MWarehouse warehouse : warehouses ) for ( MCostType costType : costTypes ) for ( MCostElement costElement : costElements ) for ( int productId : products ) generateInventoryValue ( productId , costType . getM_CostType_ID ( ) , costElement . getM_CostElement_ID ( ) , warehouse . getM_Warehouse_ID ( ) ) ; \n\t$F180903 ( pstmt ) commitEx ( ) ; \n\tDB . close ( pstmt ) ; \n\tDB . executeUpdate ( NUM00 + DB . TO_DATE ( p_DateValue ) + NUM00 , getAD_PInstance_ID ( ) , get_TrxName ( ) ) ; \n\treturn NUM00 + count ; \n\t} \n"}, {"code": "public void run $F72 { \n\tsetup ( ) ; \n\t$F973 ( log ) for ( TaskStorageManager taskStorageManager : taskStorageManagers ) { \n\t\t$F10089 ( taskStorageManager ) taskStorageManager . stopStores ( ) ; \n\t\t$F101275 ( log , taskStorageManager ) } \n\t$F209111 ( log , storeBaseDir ) } \n"}, {"code": "$F32632 ( criteria , createCriteriaInternal , oredCriteria ) "}, {"code": "public static $F2027 shuffle $F23416 ( input ) { \n\t$F3807 vals = new $F15272 ( input . length ) ; \n\t$F46150 ( i , input , vals ) Collections . shuffle ( vals , SEEDED_RANDOM ) ; \n\t$F22974 ( copy , input ) for ( $F1139 ( i , input ) ) $F15302 ( copy , i , vals ) return copy ; \n\t} \n"}, {"code": "public void read ( int i ) { \n\tVariableValue v = rowVector . elementAt ( i ) ; \n\tv . readAll ( ) ; \n\t} \n"}, {"code": "protected $F240647 transformExpressions ( List < ? extends Expression > expressions , ExpressionTransformer transformer ) { \n\t$F240647 list = new ArrayList $F185096 $F716 ( expressions ) ; \n\tfor ( Expression expr : expressions ) { \n\t\tlist . add ( transformer . transform ( expr ) ) ; \n\t\t} \n\treturn list ; \n\t} \n"}, {"code": "public String prefixForward ( int length ) { \n\tfinal String prefix = prefix ( length ) ; \n\tthis . pointer += length ; \n\tthis . index += length ; \n\tthis . column += length ; \n\treturn prefix ; \n\t} \n"}, {"code": "private boolean canAddTask $F72 { \n\treturn tCur == null ; \n\t} \n"}, {"code": "public void flush $F72 throws IOException { \n\t$F165012 ( printWriter ) $F165012 ( gzipOutputStream ) } \n"}, {"code": "public int start $F72 { \n\tstarted . compareAndSet ( _BOOL , _BOOL ) ; \n\t$F2346 ( server ) return server . getServerPort ( ) ; \n\t} \n"}, {"code": "public static double angle ( Tuple3d a , Tuple3d b ) { \n\t$F25547 ( dx , b , a ) $F25549 ( dy , b , a ) double angle = NUM00 ; \n\tif ( dx == NUM00 ) { \n\t\tif ( dy == NUM00 ) angle = NUM00 ; \n\t\telse if ( dy > NUM00 ) angle = Math . PI / NUM00 ; \n\t\telse angle = ( Math . PI * NUM00 ) / NUM00 ; \n\t\t} \n\telse if ( dy == NUM00 ) { \n\t\tif ( dx > NUM00 ) angle = NUM00 ; \n\t\telse angle = Math . PI ; \n\t\t} \n\telse { \n\t\tif ( dx < NUM00 ) angle = Math . atan ( dy / dx ) + Math . PI ; \n\t\telse if ( dy < NUM00 ) angle = Math . atan ( dy / dx ) + ( NUM00 * Math . PI ) ; \n\t\telse angle = Math . atan ( dy / dx ) ; \n\t\t} \n\treturn angle ; \n\t} \n"}, {"code": "public void addStringToTable ( $F96 oldString , byte newString ) { \n\tint length = oldString . length ; \n\t$F130978 ( str , length ) $F135 ( System , oldString , str , length ) str [ length ] = newString ; \n\tstringTable [ tableIndex ++ ] = str ; \n\tif ( tableIndex == NUM00 ) { \n\t\tbitsToGet = NUM00 ; \n\t\t} \n\telse if ( tableIndex == NUM00 ) { \n\t\tbitsToGet = NUM00 ; \n\t\t} \n\telse $F78418 ( tableIndex , bitsToGet ) } \n"}, {"code": "public static boolean identical ( URI first , URI second ) { \n\tif $F57241 ( first , second ) $F23588 ( first , second ) return _BOOL ; \n\t} \n"}, {"code": "default < ST > Xor < ST , T > toXor ( final ST secondary ) { \n\tfinal $F19288 o = toOptional ( ) ; \n\treturn o . isPresent ( ) ? Xor . primary ( o . get ( ) ) : Xor . secondary ( secondary ) ; \n\t} \n"}, {"code": "public void processInvite ( RequestEvent requestEvent , ServerTransaction serverTransaction ) { \n\t$F38109 ( sipProvider , requestEvent ) $F38111 ( request , requestEvent ) $F556 ( logger , request ) timer . schedule ( new DelayedInviteResponsesTask ( requestEvent , sipProvider ) , NUM00 ) ; \n\t} \n"}, {"code": "$F156045 ( msg , x , super , this ) "}, {"code": "protected Instances dataFromXML ( Instances header ) throws Exception { \n\tInstances result ; \n\tElement node ; \n\t$F384979 ( list ) list = getChildTags ( m_Document . getDocumentElement ( ) , TAG_BODY ) ; \n\t$F36986 ( node , list ) list = getChildTags ( node , TAG_INSTANCES ) ; \n\t$F36986 ( node , list ) result = createInstances ( header , node ) ; \n\treturn result ; \n\t} \n"}, {"code": "private static String prependIfMissing ( final String str , final CharSequence prefix , final boolean ignoreCase , final CharSequence ... prefixes ) { \n\tif ( str == null || isEmpty ( prefix ) || startsWith ( str , prefix , ignoreCase ) ) { \n\t\treturn str ; \n\t\t} \n\tif $F22195 ( prefixes ) { \n\t\tfor ( final CharSequence p : prefixes ) { \n\t\t\tif ( startsWith ( str , p , ignoreCase ) ) { \n\t\t\t\treturn str ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn prefix . toString ( ) + str ; \n\t} \n"}, {"code": "protected CacheDistributionAdvisor createDistributionAdvisor ( InternalRegionArguments internalRegionArgs ) { \n\treturn CacheDistributionAdvisor . createCacheDistributionAdvisor ( this ) ; \n\t} \n"}, {"code": "public $F131 toArray $F72 { \n\t$F91915 ( al ) $F91919 ( p , first , succ , item , al ) $F3537 ( al ) } \n"}, {"code": "public void addMouseListener ( GlobalMouseListener listener ) $F207 ( listeners , listener ) "}, {"code": "private Vector1D finiteOrNullPoint ( final double x ) { \n\treturn Double . isInfinite ( x ) ? null : new Vector1D ( x ) ; \n\t} \n"}, {"code": "public void loadPDF ( final File input ) { \n\t$F2329 ( input ) scale = NUM00 ; \n\t$F24536 ( PDFfile , input ) fileLoc . setText ( PDFfile ) ; \n\topenFile ( input , null , _BOOL ) ; \n\t} \n"}, {"code": "public CharBuffer append ( Object obj ) $F35308 ( append , String , obj ) "}, {"code": "public void testIntbyInt1 $F72 { \n\tbyte $F3009 = $F104038 ; \n\tbyte $F3014 = $F104038 ; \n\tint aSign = NUM00 ; \n\tint bSign = - NUM00 ; \n\tbyte $F3018 = { \n\t\t- NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } \n\t; \n\t$F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F7838 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , result ) } \n"}, {"code": "public abstract void initializeConstraints ( Step step , Settings settings ) ; \n"}, {"code": "private static void checkFileValidation ( File file ) { \n\t$F1149 ( file ) if $F1906 ( file ) { \n\t\tthrow new IllegalArgumentException ( $F25926 ( file ) ) ; \n\t\t} \n\tfile . canRead ( ) ; \n\t} \n"}, {"code": "public < ResultT > Set < ResultT > toSet ( Converter < ResultT > converter ) { \n\ttry { \n\t\tif ( isEmpty ( cursor ) ) $F29020 ( Collections ) return populate ( converter , new HashSet < ResultT > $F90762 ( cursor ) ) ; \n\t\t} \n\t$F49978 ( close ) } \n"}, {"code": "public static Builder newBuilder $F72 { \n\treturn new Builder $F72 ; \n\t} \n"}, {"code": "public static void stashDisableAssertionArg ( String arg ) { \n\tif $F3581 ( arg ) { \n\t\tassertionsEnabled = _BOOL ; \n\t\t} \n\telse { \n\t\t$F10128 ( disabledAssertionStrings , arg ) } \n\t} \n"}, {"code": "$F11730 ( logPrefix , request , exception , retryPolicy , oldTimeout , String , e ) "}, {"code": "public Iterator < Stream > memberIterator $F72 $F16048 ( memberSet ) "}, {"code": "private void cleanMapping $F72 { \n\t$F15277 ( toRemove ) $F115 ( size , mListMapping ) for ( $F1316 ( i , size ) ) { \n\t\tif ( mListMapping . keyAt ( i ) == mListMapping . valueAt ( i ) ) { \n\t\t\ttoRemove . add ( mListMapping . keyAt ( i ) ) ; \n\t\t\t} \n\t\t} \n\t$F54171 ( size , toRemove ) for ( $F1316 ( i , size ) ) { \n\t\tmListMapping . delete ( toRemove . get ( i ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static String timeUntil ( final int seconds , final boolean forceSeconds ) { \n\t$F1121 ( sbuf ) timeUntil ( sbuf , seconds , forceSeconds ) ; \n\t$F92 ( sbuf ) } \n"}, {"code": "public void remove ( T item ) { \n\tif $F16914 ( set , item ) { \n\t\tfireContentsChanged ( this , NUM00 , getSize ( ) - NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "public static void append ( File file , Reader reader , String charset ) throws IOException { \n\tappend ( file , reader , charset , _BOOL ) ; \n\t} \n"}, {"code": "void parseIgnoredSection $F72 throws IOException { \n\tint depth = NUM00 ; \n\tin . replace ++ ; \n\twhile ( _BOOL ) { \n\t\tswitch ( ch ) { \n\t\t\t$F1262 if ( $F7614 ( ch , in ) == NUM00 ) { \n\t\t\t\tif ( $F7614 ( ch , in ) == NUM00 ) { \n\t\t\t\t\t$F10201 ( ch , in ) depth ++ ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F597 $F1262 if ( $F7614 ( ch , in ) == NUM00 ) { \n\t\t\t\tif ( $F7614 ( ch , in ) == NUM00 ) { \n\t\t\t\t\t$F10201 ( ch , in ) if ( -- depth == NUM00 ) { \n\t\t\t\t\t\tin . replace -- ; \n\t\t\t\t\t\t$F665 } \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F597 $F52533 error ( NUM00 ) ; \n\t\t\tin . replace -- ; \n\t\t\t$F665 $F1267 $F10201 ( ch , in ) $F597 } \n\t\t} \n\t} \n"}, {"code": "private synchronized int readRecordLength $F72 throws IOException { \n\tif ( in . getPos ( ) >= end ) $F7629 $F5952 ( length , in ) if ( sync != null && length == SYNC_ESCAPE ) { \n\t\tin . readFully ( syncCheck ) ; \n\t\tif $F1209 ( Arrays , sync , syncCheck ) $F14525 syncSeen = _BOOL ; \n\t\tif ( in . getPos ( ) >= end ) $F7629 $F5961 ( length , in ) } \n\telse { \n\t\tsyncSeen = _BOOL ; \n\t\t} \n\treturn length ; \n\t} \n"}, {"code": "public void addSlide ( $F4170 Fragment fragment ) { \n\tfragments . add ( fragment ) ; \n\tif ( isWizardMode ) { \n\t\t$F4173 ( setOffScreenPageLimit , fragments ) } \n\t$F4176 ( mPagerAdapter ) } \n"}, {"code": "public DefaultIntervalCategoryDataset ( $F173034 seriesKeys , $F173034 categoryKeys , Number [ ] [ ] starts , Number [ ] [ ] ends ) { \n\tthis . startData = starts ; \n\tthis . endData = ends ; \n\tif ( starts != null && ends != null ) { \n\t\tString baseName = NUM00 ; \n\t\tResourceBundle resources = ResourceBundleWrapper . getBundle ( baseName ) ; \n\t\tint seriesCount = starts . length ; \n\t\tif ( seriesCount != ends . length ) { \n\t\t\t$F68104 ( errMsg ) $F29415 ( errMsg ) } \n\t\tif ( seriesCount > NUM00 ) { \n\t\t\tif ( seriesKeys != null ) { \n\t\t\t\tif ( seriesKeys . length != seriesCount ) $F11813 this . seriesKeys = seriesKeys ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tString prefix = $F241237 ( resources ) ; \n\t\t\t\tthis . seriesKeys = generateKeys ( seriesCount , prefix ) ; \n\t\t\t\t} \n\t\t\t$F26358 ( categoryCount , starts ) if ( categoryCount != ends [ NUM00 ] . length ) { \n\t\t\t\t$F68104 ( errMsg ) $F29415 ( errMsg ) } \n\t\t\tif ( categoryKeys != null ) { \n\t\t\t\tif ( categoryKeys . length != categoryCount ) $F11813 this . categoryKeys = categoryKeys ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tString prefix = $F241237 ( resources ) ; \n\t\t\t\tthis . categoryKeys = generateKeys ( categoryCount , prefix ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tthis . seriesKeys = new Comparable $F380 ; \n\t\t\tthis . categoryKeys = new Comparable $F380 ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void translate ( double dx , double dy ) { \n\tif $F931 ( isRelative ) { \n\t\tx += dx ; \n\t\ty += dy ; \n\t\t} \n\tif ( sourcePoint != null ) { \n\t\tsourcePoint . setX ( sourcePoint . getX ( ) + dx ) ; \n\t\tsourcePoint . setY ( sourcePoint . getY ( ) + dy ) ; \n\t\t} \n\tif ( targetPoint != null ) { \n\t\ttargetPoint . setX ( targetPoint . getX ( ) + dx ) ; \n\t\ttargetPoint . setY ( targetPoint . getY ( ) + dy ) ; \n\t\t} \n\tif ( TRANSLATE_CONTROL_POINTS && points != null ) { \n\t\t$F2199 ( count , points ) for ( $F119 ( i , count ) ) { \n\t\t\tmxPoint pt = ( mxPoint ) points . get ( i ) ; \n\t\t\tpt . setX ( pt . getX ( ) + dx ) ; \n\t\t\tpt . setY ( pt . getY ( ) + dy ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public abstract void fill ( ByteBuffer buffer , long id ) ; \n"}, {"code": "private String anonymizePassword ( String password ) { \n\t$F4158 ( password ) $F83 ( sb ) for ( $F1088 ( i , password ) ) $F86 ( sb ) $F92 ( sb ) } \n"}, {"code": "public final void write $F3295 ( data ) $F45619 ( byteBuffer , data ) "}, {"code": "public RRDatabase ( File file ) throws IOException { \n\t$F32928 ( name , file ) rrdFile = new RRDFile ( file ) ; \n\theader = new Header ( rrdFile ) ; \n\tnameindex = new HashMap $F8434 ( header . dsCount ) ; \n\tdataSources = new ArrayList < DataSource > ( header . dsCount ) ; \n\tfor ( int i = NUM00 ; \n\ti < header . dsCount ; \n\ti ++ ) { \n\t\tDataSource ds = new DataSource ( rrdFile ) ; \n\t\t$F22760 ( nameindex , ds , i ) dataSources . add ( ds ) ; \n\t\t} \n\tarchives = new ArrayList < Archive > ( header . rraCount ) ; \n\tfor ( int i = NUM00 ; \n\ti < header . rraCount ; \n\ti ++ ) { \n\t\tArchive archive = new Archive ( this ) ; \n\t\tarchives . add ( archive ) ; \n\t\t} \n\tlong last_up = ( long ) rrdFile . readLong ( ) * NUM00 ; \n\tif ( header . getVersionAsInt ( ) >= Constants . VERSION_WITH_LAST_UPDATE_SEC ) { \n\t\t$F58758 ( last_up_usec , rrdFile ) last_up += last_up_usec / NUM00 ; \n\t\t} \n\tlastUpdate = new Date ( last_up ) ; \n\tfor ( int i = NUM00 ; \n\ti < header . dsCount ; \n\ti ++ ) { \n\t\tDataSource ds = dataSources . get ( i ) ; \n\t\tds . loadPDPStatusBlock ( rrdFile ) ; \n\t\t} \n\tfor ( int i = NUM00 ; \n\ti < header . rraCount ; \n\ti ++ ) { \n\t\tArchive archive = archives . get ( i ) ; \n\t\tarchive . loadCDPStatusBlocks ( rrdFile , header . dsCount ) ; \n\t\t} \n\tfor ( int i = NUM00 ; \n\ti < header . rraCount ; \n\ti ++ ) { \n\t\tArchive archive = archives . get ( i ) ; \n\t\tarchive . loadCurrentRow ( rrdFile ) ; \n\t\t} \n\tfor ( int i = NUM00 ; \n\ti < header . rraCount ; \n\ti ++ ) { \n\t\tArchive archive = archives . get ( i ) ; \n\t\tarchive . loadData ( rrdFile , header . dsCount ) ; \n\t\t} \n\t} \n"}, {"code": "$F136015 ( inputStream ) "}, {"code": "public Address malloc ( int size , int howmany ) { \n\tint result = nextReservableAddress ; \n\tnextReservableAddress += size * howmany ; \n\tif ( nextReservableAddress > ( MEMSIZE + memAddressStart ) ) { \n\t\taddressOutOfRange = _BOOL ; \n\t\t$F1274 } \n\treturn new Address ( Op . MEM , size , result ) ; \n\t} \n"}, {"code": "public static String maskLeft $F41200 ( s , len , mask_ch ) { \n\t$F18806 ( len , s ) len = $F90553 ( Math , len , s ) ; \n\t$F83 ( sb ) $F48485 ( i , len , sb , mask_ch ) $F13047 ( sb , s , len ) $F92 ( sb ) } \n"}, {"code": "public static double pdf $F12359 ( x , mu , sigma , skew ) { \n\tx = ( x - mu ) / sigma ; \n\tif $F33322 ( Math , skew ) { \n\t\tx = - Math . log ( NUM00 - skew * x ) / skew ; \n\t\t} \n\treturn MathUtil . SQRTHALF * Math . exp ( - NUM00 * x * x ) / sigma / ( NUM00 - skew * x ) ; \n\t} \n"}, {"code": "public Composer to ( long animDuration , float x , float y , int alpha , float scaleX , float scaleY , float rotation , Ease ease ) { \n\tmTweenParameterList . add ( new TweenParameter ( x , y , alpha , scaleX , scaleY , rotation , animDuration , ease ) ) ; \n\treturn this ; \n\t} \n"}, {"code": "$F1 public String toString $F72 { \n\t$F20818 ( buffer ) try { \n\t\tprint ( buffer ) ; \n\t\t} \n\t$F7078 ( e ) $F92 ( buffer ) } \n"}, {"code": "$F1 public MemChunkHolder < BigDataMemAllocator > createChunk ( long size , boolean autoreclaim ) { \n\tMemChunkHolder < BigDataMemAllocator > ret = null ; \n\tLong addr = m_vmasvc . allocate ( m_nid , size , _BOOL ) ; \n\tif ( NUM00 == addr && m_activegc ) { \n\t\tforceGC ( ) ; \n\t\taddr = m_vmasvc . allocate ( m_nid , size , _BOOL ) ; \n\t\t} \n\tif ( NUM00 != addr ) { \n\t\tret = new MemChunkHolder < BigDataMemAllocator > ( this , addr , size ) ; \n\t\tret . setCollector ( m_chunkcollector ) ; \n\t\t$F160288 ( autoreclaim , m_chunkcollector , ret ) } \n\treturn ret ; \n\t} \n"}, {"code": "protected void drawLabel ( Canvas canvas , String labelText , DefaultRenderer renderer , $F141966 prevLabelsBounds , int centerX , int centerY , float shortRadius , float longRadius , float currentAngle , float angle , int left , int right , int color , Paint paint , boolean line , boolean display ) { \n\tif ( renderer . isShowLabels ( ) || display ) { \n\t\tpaint . setColor ( color ) ; \n\t\tdouble rAngle = Math . toRadians ( NUM00 - ( currentAngle + angle / NUM00 ) ) ; \n\t\t$F33859 ( sinValue , Math , rAngle ) $F54226 ( cosValue , Math , rAngle ) $F175108 ( x1 , Math , centerX , shortRadius , sinValue ) $F175108 ( y1 , Math , centerY , shortRadius , cosValue ) $F175108 ( x2 , Math , centerX , longRadius , sinValue ) $F175108 ( y2 , Math , centerY , longRadius , cosValue ) float size = renderer . getLabelsTextSize ( ) ; \n\t\tfloat extra = Math . max ( size / NUM00 , NUM00 ) ; \n\t\t$F175116 ( paint , Align ) if ( x1 > x2 ) { \n\t\t\textra = - extra ; \n\t\t\tpaint . setTextAlign ( Align . RIGHT ) ; \n\t\t\t} \n\t\tfloat xLabel = x2 + extra ; \n\t\tfloat yLabel = y2 ; \n\t\tfloat width = right - xLabel ; \n\t\tif ( x1 > x2 ) { \n\t\t\twidth = xLabel - left ; \n\t\t\t} \n\t\tlabelText = getFitText ( labelText , width , paint ) ; \n\t\tfloat widthLabel = paint . measureText ( labelText ) ; \n\t\tboolean okBounds = _BOOL ; \n\t\twhile ( ! okBounds && line ) { \n\t\t\tboolean intersects = _BOOL ; \n\t\t\t$F2199 ( length , prevLabelsBounds ) for ( int j = NUM00 ; \n\t\t\tj < length && ! intersects ; \n\t\t\tj ++ ) { \n\t\t\t\tRectF prevLabelBounds = prevLabelsBounds . get ( j ) ; \n\t\t\t\tif ( prevLabelBounds . intersects ( xLabel , yLabel , xLabel + widthLabel , yLabel + size ) ) { \n\t\t\t\t\tintersects = _BOOL ; \n\t\t\t\t\tyLabel = Math . max ( yLabel , prevLabelBounds . bottom ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tokBounds = ! intersects ; \n\t\t\t} \n\t\tif ( line ) { \n\t\t\ty2 = ( int ) ( yLabel - size / NUM00 ) ; \n\t\t\tcanvas . drawLine ( x1 , y1 , x2 , y2 , paint ) ; \n\t\t\tcanvas . drawLine ( x2 , y2 , x2 + extra , y2 , paint ) ; \n\t\t\t} \n\t\telse { \n\t\t\t$F5595 ( paint , Align ) } \n\t\tcanvas . drawText ( labelText , xLabel , yLabel , paint ) ; \n\t\tif ( line ) { \n\t\t\tprevLabelsBounds . add ( new RectF ( xLabel , yLabel , xLabel + widthLabel , yLabel + size ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F31880 ( position , offset , offsetPixels , mDecorChildCount , scrollX , getScrollX , paddingLeft , getPaddingLeft , paddingRight , getPaddingRight , width , getWidth , childCount , getChildCount , i , child , getChildAt , lp , hgrav , Gravity , childLeft , Math , childOffset , mOnPageChangeListener , mInternalPageChangeListener , mPageTransformer , transformPos , getClientWidth , mCalledSuper , _BOOL ) "}, {"code": "public void DrawSemivariogramSurface ( double Radius , boolean AnIsotropic ) { \n\t$F3789 data = new double [ NUM00 ] [ BinSurface . length * BinSurface [ NUM00 ] . length ] ; \n\tint n = NUM00 ; \n\tdouble max = Double . MIN_VALUE ; \n\tfor ( $F1139 ( i , BinSurface ) ) { \n\t\tfor ( $F179379 ( j , BinSurface , i ) ) { \n\t\t\tdata [ NUM00 ] [ n ] = BinSurface [ i ] [ j ] . GridHorDistance ; \n\t\t\tdata [ NUM00 ] [ n ] = BinSurface [ i ] [ j ] . GridVerDistance ; \n\t\t\tif ( ( Math . pow ( data [ NUM00 ] [ n ] , NUM00 ) + Math . pow ( data [ NUM00 ] [ n ] , NUM00 ) ) <= Radius * Radius && ! Double . isNaN ( BinSurface [ i ] [ j ] . Value ) ) { \n\t\t\t\tdata [ NUM00 ] [ n ] = BinSurface [ i ] [ j ] . Value ; \n\t\t\t\tif ( max < data [ NUM00 ] [ n ] ) { \n\t\t\t\t\tmax = data [ NUM00 ] [ n ] ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tdata [ NUM00 ] [ n ] = - NUM00 ; \n\t\t\t\t} \n\t\t\tn ++ ; \n\t\t\t} \n\t\t} \n\tDefaultXYZDataset dataset = new DefaultXYZDataset $F72 ; \n\tdataset . addSeries ( NUM00 , data ) ; \n\tNumberAxis xAxis = new NumberAxis $F72 ; \n\txAxis . setStandardTickUnits ( NumberAxis . createIntegerTickUnits ( ) ) ; \n\txAxis . setLowerMargin ( NUM00 ) ; \n\txAxis . setUpperMargin ( NUM00 ) ; \n\tNumberAxis yAxis = new NumberAxis $F72 ; \n\tyAxis . setStandardTickUnits ( NumberAxis . createIntegerTickUnits ( ) ) ; \n\tyAxis . setLowerMargin ( NUM00 ) ; \n\tyAxis . setUpperMargin ( NUM00 ) ; \n\tXYBlockRenderer renderer = new XYBlockRenderer $F72 ; \n\trenderer . setBlockWidth ( LagSize ) ; \n\trenderer . setBlockHeight ( LagSize ) ; \n\trenderer . setBlockAnchor ( RectangleAnchor . CENTER ) ; \n\tLookupPaintScale paintScale = new LookupPaintScale ( NUM00 , max , Color . white ) ; \n\tdouble colorRange = max / NUM00 ; \n\tpaintScale . add ( NUM00 , Color . blue ) ; \n\tpaintScale . add ( NUM00 * colorRange , Color . green ) ; \n\tpaintScale . add ( NUM00 * colorRange , Color . cyan ) ; \n\tpaintScale . add ( NUM00 * colorRange , Color . yellow ) ; \n\tpaintScale . add ( NUM00 * colorRange , Color . ORANGE ) ; \n\tpaintScale . add ( NUM00 * colorRange , Color . red ) ; \n\trenderer . setPaintScale ( paintScale ) ; \n\tXYPlot plot = new XYPlot ( dataset , xAxis , yAxis , renderer ) ; \n\tplot . setBackgroundPaint ( Color . lightGray ) ; \n\tplot . setDomainGridlinesVisible ( _BOOL ) ; \n\tplot . setRangeGridlinePaint ( Color . white ) ; \n\tif ( AnIsotropic ) { \n\t\tCombinedRangeXYPlot combinedrangexyplot = new CombinedRangeXYPlot $F72 ; \n\t\t$F38363 ( seriesT1 ) XYSeriesCollection AngleCollct = new XYSeriesCollection $F72 ; \n\t\tdouble bw = BandWidth ; \n\t\tdouble r = bw / Math . sin ( Tolerance ) ; \n\t\tif ( r > Radius ) { \n\t\t\tbw = Radius * Math . sin ( Tolerance ) ; \n\t\t\tr = Radius ; \n\t\t\t} \n\t\tseriesT1 . add ( r * Math . cos ( Angle + Tolerance ) , r * Math . sin ( Angle + Tolerance ) ) ; \n\t\tif ( ( double ) Math . round ( Math . sin ( Angle ) * NUM00 ) / NUM00 != NUM00 ) { \n\t\t\tif ( ( double ) Math . round ( Math . cos ( Angle ) * NUM00 ) / NUM00 != NUM00 ) { \n\t\t\t\tdouble a = ( NUM00 + $F264497 ( Math , Angle ) ) ; \n\t\t\t\tdouble b = NUM00 * bw / Math . sin ( Angle ) * $F264497 ( Math , Angle ) ; \n\t\t\t\tdouble c = $F264497 ( Math , Angle ) * Math . pow ( bw / Math . sin ( Angle ) , NUM00 ) - Math . pow ( Radius , NUM00 ) ; \n\t\t\t\tdouble x1 = ( - b + Math . sqrt ( Math . pow ( b , NUM00 ) - NUM00 * a * c ) ) / ( NUM00 * a ) ; \n\t\t\t\tdouble y1 = Math . tan ( Angle ) * ( x1 + bw / Math . sin ( Angle ) ) ; \n\t\t\t\tdouble x2 = ( - b - Math . sqrt ( Math . pow ( b , NUM00 ) - NUM00 * a * c ) ) / ( NUM00 * a ) ; \n\t\t\t\tdouble y2 = Math . tan ( Angle ) * ( x2 + bw / Math . sin ( Angle ) ) ; \n\t\t\t\tdouble d1 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x1 ) , NUM00 ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y1 ) , NUM00 ) ) ) ; \n\t\t\t\tdouble d2 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x2 ) , NUM00 ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y2 ) , NUM00 ) ) ) ; \n\t\t\t\tif ( d1 < d2 ) $F42308 ( seriesT1 , x1 , y1 ) else $F42308 ( seriesT1 , x2 , y2 ) } \n\t\t\telse { \n\t\t\t\tdouble x1 = - bw * Math . sin ( Angle ) ; \n\t\t\t\tdouble y1 = Math . sqrt ( Math . pow ( Radius , NUM00 ) - Math . pow ( x1 , NUM00 ) ) ; \n\t\t\t\tdouble y2 = - Math . sqrt ( Math . pow ( Radius , NUM00 ) - Math . pow ( x1 , NUM00 ) ) ; \n\t\t\t\tdouble d1 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x1 ) , NUM00 ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y1 ) , NUM00 ) ) ) ; \n\t\t\t\tdouble d2 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x1 ) , NUM00 ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y2 ) , NUM00 ) ) ) ; \n\t\t\t\tif ( d1 < d2 ) $F42308 ( seriesT1 , x1 , y1 ) else $F42308 ( seriesT1 , x1 , y2 ) } \n\t\t\t} \n\t\telse { \n\t\t\tdouble y1 = bw * Math . cos ( Angle ) ; \n\t\t\tdouble x1 = Math . sqrt ( Math . pow ( Radius , NUM00 ) - Math . pow ( y1 , NUM00 ) ) ; \n\t\t\tdouble x2 = - Math . sqrt ( Math . pow ( Radius , NUM00 ) - Math . pow ( y1 , NUM00 ) ) ; \n\t\t\tdouble d1 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x1 ) , NUM00 ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y1 ) , NUM00 ) ) ) ; \n\t\t\tdouble d2 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x2 ) , NUM00 ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y1 ) , NUM00 ) ) ) ; \n\t\t\tif ( d1 < d2 ) $F42308 ( seriesT1 , x1 , y1 ) else $F42308 ( seriesT1 , x2 , y1 ) } \n\t\tAngleCollct . addSeries ( seriesT1 ) ; \n\t\t$F38363 ( seriesT2 ) seriesT2 . add ( r * Math . cos ( Angle + Tolerance ) , r * Math . sin ( Angle + Tolerance ) ) ; \n\t\t$F38365 ( seriesT2 ) AngleCollct . addSeries ( seriesT2 ) ; \n\t\t$F38363 ( seriesT3 ) seriesT3 . add ( Radius * Math . cos ( Angle ) , Radius * Math . sin ( Angle ) ) ; \n\t\t$F38365 ( seriesT3 ) AngleCollct . addSeries ( seriesT3 ) ; \n\t\t$F38363 ( seriesT4 ) seriesT4 . add ( r * Math . cos ( Angle - Tolerance ) , r * Math . sin ( Angle - Tolerance ) ) ; \n\t\t$F38365 ( seriesT4 ) AngleCollct . addSeries ( seriesT4 ) ; \n\t\t$F38363 ( seriesT5 ) seriesT5 . add ( r * Math . cos ( Angle - Tolerance ) , r * Math . sin ( Angle - Tolerance ) ) ; \n\t\tif ( ( double ) Math . round ( Math . sin ( Angle ) * NUM00 ) / NUM00 != NUM00 ) { \n\t\t\tif ( ( double ) Math . round ( Math . cos ( Angle ) * NUM00 ) / NUM00 != NUM00 ) { \n\t\t\t\tdouble a = ( NUM00 + $F264497 ( Math , Angle ) ) ; \n\t\t\t\tdouble b = - NUM00 * bw / Math . sin ( Angle ) * $F264497 ( Math , Angle ) ; \n\t\t\t\tdouble c = $F264497 ( Math , Angle ) * Math . pow ( bw / Math . sin ( Angle ) , NUM00 ) - Math . pow ( Radius , NUM00 ) ; \n\t\t\t\tdouble x1 = ( - b + Math . sqrt ( Math . pow ( b , NUM00 ) - NUM00 * a * c ) ) / ( NUM00 * a ) ; \n\t\t\t\tdouble y1 = Math . tan ( Angle ) * ( x1 - bw / Math . sin ( Angle ) ) ; \n\t\t\t\tdouble x2 = ( - b - Math . sqrt ( Math . pow ( b , NUM00 ) - NUM00 * a * c ) ) / ( NUM00 * a ) ; \n\t\t\t\tdouble y2 = Math . tan ( Angle ) * ( x2 - bw / Math . sin ( Angle ) ) ; \n\t\t\t\tdouble d1 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x1 ) , NUM00 ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y1 ) , NUM00 ) ) ) ; \n\t\t\t\tdouble d2 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x2 ) , NUM00 ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y2 ) , NUM00 ) ) ) ; \n\t\t\t\tif ( d1 < d2 ) $F42308 ( seriesT5 , x1 , y1 ) else $F42308 ( seriesT5 , x2 , y2 ) } \n\t\t\telse { \n\t\t\t\tdouble x1 = bw * Math . sin ( Angle ) ; \n\t\t\t\tdouble y1 = Math . sqrt ( Math . pow ( Radius , NUM00 ) - Math . pow ( x1 , NUM00 ) ) ; \n\t\t\t\tdouble y2 = - Math . sqrt ( Math . pow ( Radius , NUM00 ) - Math . pow ( x1 , NUM00 ) ) ; \n\t\t\t\tdouble d1 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x1 ) , NUM00 ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y1 ) , NUM00 ) ) ) ; \n\t\t\t\tdouble d2 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x1 ) , NUM00 ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y2 ) , NUM00 ) ) ) ; \n\t\t\t\tif ( d1 < d2 ) $F42308 ( seriesT5 , x1 , y1 ) else $F42308 ( seriesT5 , x1 , y2 ) } \n\t\t\t} \n\t\telse { \n\t\t\tdouble y1 = - bw * Math . cos ( Angle ) ; \n\t\t\tdouble x1 = Math . sqrt ( Math . pow ( Radius , NUM00 ) - Math . pow ( y1 , NUM00 ) ) ; \n\t\t\tdouble x2 = - Math . sqrt ( Math . pow ( Radius , NUM00 ) - Math . pow ( y1 , NUM00 ) ) ; \n\t\t\tdouble d1 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x1 ) , NUM00 ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y1 ) , NUM00 ) ) ) ; \n\t\t\tdouble d2 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x2 ) , NUM00 ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y1 ) , NUM00 ) ) ) ; \n\t\t\tif ( d1 < d2 ) $F42308 ( seriesT5 , x1 , y1 ) else $F42308 ( seriesT5 , x2 , y1 ) } \n\t\tAngleCollct . addSeries ( seriesT5 ) ; \n\t\tplot . setDataset ( NUM00 , AngleCollct ) ; \n\t\tXYLineAndShapeRenderer lineshapRend = new XYLineAndShapeRenderer ( _BOOL , _BOOL ) ; \n\t\tfor ( int i = NUM00 ; \n\t\ti < AngleCollct . getSeriesCount ( ) ; \n\t\ti ++ ) { \n\t\t\tlineshapRend . setSeriesPaint ( i , Color . BLACK ) ; \n\t\t\t} \n\t\tplot . setRenderer ( NUM00 , lineshapRend ) ; \n\t\tcombinedrangexyplot . add ( plot ) ; \n\t\t} \n\tplot . setDatasetRenderingOrder ( DatasetRenderingOrder . FORWARD ) ; \n\tJFreeChart chart = new JFreeChart ( NUM00 , plot ) ; \n\tchart . removeLegend ( ) ; \n\tchart . setBackgroundPaint ( Color . white ) ; \n\tChartFrame frame = new ChartFrame ( NUM00 , chart ) ; \n\t$F30070 ( frame ) frame . setVisible ( _BOOL ) ; \n\t} \n"}, {"code": "$F4562 ( view , deltaX , scrollX , deltaY , scrollY , scrollRange , fuzzyThreshold , scaleFactor , isTouchEvent , deltaValue , currentScrollValue , scrollValue , HORIZONTAL , VERTICAL , mode , newScrollValue , PullToRefreshBase , Log , LOG_TAG , State , Math ) "}, {"code": "public Single < TAccessToken > grantNewAccessToken ( OAuth2Grant < TAccessToken > grant ) { \n\treturn grantNewAccessToken ( grant , Calendar . getInstance ( ) ) ; \n\t} \n"}, {"code": "public static Number floor ( Number a ) { \n\tif ( isFloatingPoint ( a ) ) { \n\t\treturn Math . floor ( a . doubleValue ( ) ) ; \n\t\t} \n\telse $F13598 ( a ) } \n"}, {"code": "private void readDefsElement ( IXMLElement elem ) throws IOException { \n\tfor ( IXMLElement child : elem . getChildren ( ) ) { \n\t\tFigure childFigure = readElement ( child ) ; \n\t\t} \n\t} \n"}, {"code": "$F5466 private static ActivityWrapper findLauncherActivityForDevice ( $F1113 List < ActivityWrapper > launchableActivities , $F1113 IDevice device ) { \n\tif ( device . supportsFeature ( IDevice . HardwareFeature . TV ) ) $F4915 ( findLeanbackLauncher , launchableActivities ) $F1274 } \n"}, {"code": "public boolean isQueryRunning ( final BoundEntity song ) { \n\tsynchronized ( mRunningQueries ) $F298 ( mRunningQueries , song ) } \n"}, {"code": "$F148243 ( checkNotClosed , trimToSize , trimToFileCount , journalWriter ) "}, {"code": "$F56555 ( response , data , decodeOptions , bitmap , mMaxWidth , mMaxHeight , mDecodeConfig , BitmapFactory , _BOOL , actualWidth , actualHeight , desiredWidth , getResizedDimension , desiredHeight , findBestSampleSize , tempBitmap , Bitmap , Response , HttpHeaderParser ) "}, {"code": "private Map < String , ExtensionFileFilter > addExtensions ( JFileChooser chooser ) { \n\tMap < String , ExtensionFileFilter > filters = new HashMap < String , ExtensionFileFilter > $F72 ; \n\tfor ( $F19318 ( entry , exts ) ) { \n\t\tExtensionFileFilter filter = new ExtensionFileFilter ( $F15245 ( entry ) ) ; \n\t\t$F15251 ( filters , entry , filter ) chooser . addChoosableFileFilter ( filter ) ; \n\t\t} \n\treturn filters ; \n\t} \n"}, {"code": "public static String withNodeInfo ( AccessibilityNodeInfo nodeInfo ) { \n\t$F1338 ( nodeInfo ) return String . format ( NUM00 , nodeInfo . getText ( ) , nodeInfo . getContentDescription ( ) ) ; \n\t} \n"}, {"code": "static int allParametersAndArgumentsMatchWithDefaultParams ( Parameter [ ] params , ClassNode [ ] args ) { \n\tint dist = NUM00 ; \n\tClassNode ptype = null ; \n\tfor ( int i = NUM00 , j = NUM00 ; \n\ti < params . length ; \n\ti ++ ) { \n\t\tParameter param = params [ i ] ; \n\t\tClassNode paramType = param . getType ( ) ; \n\t\tClassNode arg = j >= args . length ? null : args [ j ] ; \n\t\tif ( arg == null || ! isAssignableTo ( arg , paramType ) ) { \n\t\t\tif ( ! param . hasInitialExpression ( ) && $F87129 ( ptype , paramType ) ) $F7629 ptype = null ; \n\t\t\t} \n\t\telse { \n\t\t\tj ++ ; \n\t\t\tif $F2137 ( paramType , arg ) dist += getDistance ( arg , paramType ) ; \n\t\t\tif ( param . hasInitialExpression ( ) ) { \n\t\t\t\tptype = arg ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tptype = null ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn dist ; \n\t} \n"}, {"code": "private void expect ( char expectedSymbol ) throws ParseException { \n\tif ( ! accept ( expectedSymbol ) ) throw new ParseException ( NUM00 + expectedSymbol + NUM00 + ( char ) data [ index ] + NUM00 , index ) ; \n\t} \n"}, {"code": "public static $F96 stringToUtf8Bytes ( String string ) { \n\t$F1749 ( len , string ) $F171903 ( bytes , len ) int outAt = NUM00 ; \n\tfor ( $F119 ( i , len ) ) { \n\t\t$F1280 ( c , string , i ) if ( ( c != NUM00 ) && ( c < NUM00 ) ) { \n\t\t\t$F8214 ( bytes , outAt , c ) outAt ++ ; \n\t\t\t} \n\t\telse if ( c < NUM00 ) { \n\t\t\tbytes [ outAt ] = $F476832 ( c ) ; \n\t\t\tbytes [ outAt + NUM00 ] = $F287679 ( c ) ; \n\t\t\toutAt += NUM00 ; \n\t\t\t} \n\t\telse { \n\t\t\tbytes [ outAt ] = $F476832 ( c ) ; \n\t\t\tbytes [ outAt + NUM00 ] = $F476832 ( c ) ; \n\t\t\tbytes [ outAt + NUM00 ] = $F287679 ( c ) ; \n\t\t\toutAt += NUM00 ; \n\t\t\t} \n\t\t} \n\t$F2175 ( result , outAt ) $F135 ( System , bytes , result , outAt ) return result ; \n\t} \n"}, {"code": "public abstract void initParameters ( $F2027 aCircuitData , IRedstoneCircuitBlock aRedstoneCircuitBlock ) ; \n"}, {"code": "public Contentlet executeSafeFirst $F72 { \n\tList < Contentlet > result = executeSafe ( ) ; \n\tif $F3817 ( result ) $F38160 ( result ) $F1274 } \n"}, {"code": "$F84990 ( lock , this , f , first , n , last , count , notFull ) "}, {"code": "$F3594 ( oredCriteria , orderByClause , distinct , _BOOL ) "}, {"code": "private static $F7465 ( msg , startpos , count , len , idx , ch , isDigit ) "}, {"code": "public static boolean isFileExist ( String filePath , FileType fileType , boolean performFileCheck ) throws IOException { \n\t$F2936 ( filePath ) switch ( fileType ) { \n\t\tcase HDFS : case VIEWFS : $F424 ( path , filePath ) $F2937 ( fs , path , configuration ) if ( performFileCheck ) { \n\t\t\treturn fs . exists ( path ) && fs . isFile ( path ) ; \n\t\t\t} \n\t\telse { \n\t\t\treturn fs . exists ( path ) ; \n\t\t\t} \n\t\tcase LOCAL : $F1267 $F1705 ( defaultFile , filePath ) if ( performFileCheck ) { \n\t\t\treturn $F2945 ( defaultFile ) ; \n\t\t\t} \n\t\telse $F2949 ( defaultFile ) } \n\t} \n"}, {"code": "private DoubleFactor pointwiseProduct ( List < DoubleFactor > factors ) { \n\tif $F2979 ( factors ) { \n\t\tDoubleFactor factor = new DoubleFactor $F72 ; \n\t\tfactor . addEntry ( new Assignment $F72 , NUM00 , NUM00 ) ; \n\t\treturn factor ; \n\t\t} \n\telse if $F10471 ( factors ) $F38160 ( factors ) DoubleFactor factor = factors . get ( NUM00 ) ; \n\t$F86372 ( factors ) for ( DoubleFactor f : factors ) { \n\t\tDoubleFactor tempFactor = new DoubleFactor $F72 ; \n\t\t$F2689 sharedVars = new $F2690 ( f . getVariables ( ) ) ; \n\t\tsharedVars . retainAll ( factor . getVariables ( ) ) ; \n\t\tfor ( Assignment a : f . getValues ( ) ) { \n\t\t\t$F1986 entry = f . getEntry ( a ) ; \n\t\t\tdouble prob = entry [ NUM00 ] ; \n\t\t\tdouble util = entry [ NUM00 ] ; \n\t\t\tfor ( Assignment b : factor . getValues ( ) ) { \n\t\t\t\tif ( b . consistentWith ( a , sharedVars ) ) { \n\t\t\t\t\t$F1986 entry2 = factor . getEntry ( b ) ; \n\t\t\t\t\tdouble prob2 = entry2 [ NUM00 ] ; \n\t\t\t\t\tdouble util2 = entry2 [ NUM00 ] ; \n\t\t\t\t\tdouble product = prob * prob2 ; \n\t\t\t\t\tdouble sum = util + util2 ; \n\t\t\t\t\ttempFactor . addEntry ( new Assignment ( a , b ) , product , sum ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tfactor = tempFactor ; \n\t\t} \n\treturn factor ; \n\t} \n"}, {"code": "public ClassPath $F72 { \n\t$F27462 ( syscp , System ) $F27462 ( envcp , System ) $F12553 ( envcp ) String cp = syscp + File . pathSeparator + envcp ; \n\tinit ( cp ) ; \n\t} \n"}, {"code": "protected static boolean uninstallAddOnExtension ( AddOn addOn , Extension extension , AddOnUninstallationProgressCallback callback ) { \n\tboolean uninstalledWithoutErrors = _BOOL ; \n\tif $F34496 ( extension ) { \n\t\tString extUiName = extension . getUIName ( ) ; \n\t\tif ( extension . canUnload ( ) ) { \n\t\t\t$F74568 ( logger , extension ) try { \n\t\t\t\textension . unload ( ) ; \n\t\t\t\tExtensionFactory . unloadAddOnExtension ( extension ) ; \n\t\t\t\t} \n\t\t\tcatch ( Exception e ) { \n\t\t\t\tlogger . error ( $F2990 ( extension ) + addOn . getId ( ) + NUM00 , e ) ; \n\t\t\t\tuninstalledWithoutErrors = _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\t$F74568 ( logger , extension ) uninstalledWithoutErrors = _BOOL ; \n\t\t\t} \n\t\tcallback . extensionRemoved ( extUiName ) ; \n\t\t} \n\taddOn . removeLoadedExtension ( extension ) ; \n\treturn uninstalledWithoutErrors ; \n\t} \n"}, {"code": "private static String pickRandomStatsFields $F4374 ( fieldNames ) { \n\tString fieldName ; \n\tdo { \n\t\tfieldName = fieldNames [ TestUtil . nextInt ( random ( ) , NUM00 , fieldNames . length - NUM00 ) ] ; \n\t\t} \n\twhile $F128455 ( fieldName ) ; \n\treturn fieldName ; \n\t} \n"}, {"code": "$F1 public synchronized void doDeleteChild ( BaseSolrResource endpoint , String childId ) { \n\tString key = getIgnoreCase ( ) ? $F131081 ( childId , Locale ) : childId ; \n\tif $F2200 ( managedWords , key ) throw new SolrException ( ErrorCode . NOT_FOUND , String . format ( Locale . ROOT , NUM00 , childId , getResourceId ( ) ) ) ; \n\tmanagedWords . remove ( key ) ; \n\tstoreManagedData ( managedWords ) ; \n\t$F10635 ( log , key ) } \n"}, {"code": "public static final String writeTime ( double seconds , final String timeformat , final char separator ) { \n\tif ( seconds < NUM00 ) { \n\t\tif ( seconds == UNDEFINED_TIME ) $F1278 return NUM00 + writeTime ( Math . abs ( seconds ) , timeformat , separator ) ; \n\t\t} \n\t$F113182 ( day , seconds , MIDNIGHT ) seconds %= MIDNIGHT ; \n\tif $F1238 ( TIMEFORMAT_EEESSSS , timeformat ) return Week . getDayName ( day ) + NUM00 + Long . toString ( ( long ) ( seconds ) ) ; \n\tdouble s = seconds ; \n\tlong h = ( long ) ( s / NUM00 ) ; \n\ts = s % NUM00 ; \n\t$F55078 ( m , s ) s = s % NUM00 ; \n\t$F20818 ( str ) if ( h < timeElements . length ) { \n\t\t$F170335 ( str , timeElements , h ) } \n\telse { \n\t\t$F42779 ( str , Long , h ) } \n\tstr . append ( separator ) ; \n\t$F6939 ( str , timeElements , m ) if $F1238 ( TIMEFORMAT_EEEHHMM , timeformat ) { \n\t\treturn Week . getDayName ( day ) + NUM00 + str . toString ( ) ; \n\t\t} \n\tif $F1238 ( TIMEFORMAT_EEEHHMMSS , timeformat ) { \n\t\tstr . append ( separator ) ; \n\t\t$F170335 ( str , timeElements , s ) return Week . getDayName ( day ) + NUM00 + str . toString ( ) ; \n\t\t} \n\tif $F1238 ( TIMEFORMAT_HHMMSSDOTSS , timeformat ) { \n\t\tstr . append ( separator ) ; \n\t\t$F2854 ( s , str ) str . append ( s ) ; \n\t\treturn Week . getDayName ( day ) + NUM00 + str . toString ( ) ; \n\t\t} \n\t$F29525 ( timeformat ) } \n"}, {"code": "public DExportPrivateKeyType ( JFrame parent ) { \n\t$F36748 ( super , parent , Dialog ) $F15426 ( setTitle , res ) initComponents ( ) ; \n\t} \n"}, {"code": "public static IPoint [ ] copyOf ( IPoint [ ] original , int newLength ) { \n\tIPoint [ ] copy = new IPoint [ newLength ] ; \n\t$F69174 ( System , original , copy , Math , newLength ) return copy ; \n\t} \n"}, {"code": "public void writeFooter $F72 { \n\t$F8438 ( ps ) $F8438 ( ps ) $F8438 ( ps ) } \n"}, {"code": "protected void saveObject ( Object object ) { \n\t$F113304 ( m_FileChooser , createFileChooser ) int returnVal = m_FileChooser . showSaveDialog ( this ) ; \n\tif ( returnVal == JFileChooser . APPROVE_OPTION ) { \n\t\t$F89774 ( sFile , m_FileChooser ) try { \n\t\t\tObjectOutputStream oo = $F20341 ( sFile ) ; \n\t\t\too . writeObject ( object ) ; \n\t\t\t$F59 ( oo ) } \n\t\tcatch ( Exception ex ) { \n\t\t\tJOptionPane . showMessageDialog ( this , $F89105 ( sFile , ex ) , NUM00 , JOptionPane . ERROR_MESSAGE ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F1 public void write ( DataOutput out ) throws IOException { \n\tif ( USE_HADOOP_TEXT ) Text . writeString ( out , term ) ; \n\telse out . writeUTF ( term ) ; \n\tWritableUtils . writeVInt ( out , splitno ) ; \n\tWritableUtils . writeVInt ( out , flushno ) ; \n\t} \n"}, {"code": "public static String stripNonDigits ( String str ) { \n\t$F76170 ( result , str ) for ( $F2998 ( candidate , str ) ) { \n\t\tif $F119844 ( Character , candidate ) $F288 ( result , candidate ) } \n\t$F92 ( result ) } \n"}, {"code": "protected Collection < CommunicationSummaryStatistics > doGetCommunicationSummaryStatistics ( String tenantId , Criteria criteria ) { \n\tString index = client . getIndex ( tenantId ) ; \n\tMap < String , CommunicationSummaryStatistics > $F8690 ( stats ) ; \n\tif ( ! criteria . transactionWide ( ) ) { \n\t\tCriteria txnWideCriteria = criteria . deriveTransactionWide ( ) ; \n\t\tbuildCommunicationSummaryStatistics ( stats , index , txnWideCriteria , _BOOL ) ; \n\t\t} \n\tbuildCommunicationSummaryStatistics ( stats , index , criteria , _BOOL ) ; \n\t$F214800 ( stats ) } \n"}, {"code": "public void removeContent ( String variableId ) { \n\tif ( ! paused ) { \n\t\tcurState . removeFromState ( variableId ) ; \n\t\tupdate ( ) ; \n\t\t} \n\telse $F10090 ( log , variableId ) } \n"}, {"code": "public void addCommandListener ( ActionListener l ) { \n\tif ( globalCommandListeners == null ) { \n\t\tglobalCommandListeners = new EventDispatcher $F72 ; \n\t\t} \n\tglobalCommandListeners . addListener ( l ) ; \n\t} \n"}, {"code": "public static void completeBackgroundTasks ( long timeoutMillis ) { \n\tboolean fifoEmpty = _BOOL ; \n\tboolean asyncThreadsCompleted = _BOOL ; \n\t$F52855 ( absTimeout , System , timeoutMillis ) while $F139818 ( System , absTimeout ) { \n\t\tsynchronized ( fifo ) { \n\t\t\tfifoEmpty = $F10470 ( fifo ) ; \n\t\t\t} \n\t\tsynchronized ( JGoogleAnalyticsTracker . class ) { \n\t\t\tasyncThreadsCompleted = asyncThreadsRunning == NUM00 ; \n\t\t\t} \n\t\tif ( fifoEmpty && asyncThreadsCompleted ) $F597 try $F31130 ( Thread ) catch ( InterruptedException e ) $F5153 } \n\t} \n"}, {"code": "private synchronized void writeObject $F9338 ( s ) throws IOException { \n\t$F21009 ( actions , getActions ) $F9339 ( s ) } \n"}, {"code": "public static final $F96 decode ( BufferedReader reader ) throws IOException , Base64DecodingException { \n\t$F5475 ( retBytes ) UnsyncByteArrayOutputStream baos = null ; \n\ttry { \n\t\tbaos = new UnsyncByteArrayOutputStream $F72 ; \n\t\tString line ; \n\t\twhile ( null != ( line = reader . readLine ( ) ) ) { \n\t\t\t$F12490 ( bytes , decode , line ) baos . write ( bytes ) ; \n\t\t\t} \n\t\t$F3031 ( retBytes , baos ) } \n\t$F3229 ( baos ) return retBytes ; \n\t} \n"}, {"code": "public boolean isDefinedInEnv $F72 { \n\tif ( envVars == null || paramNames . length == NUM00 ) { \n\t\treturn _BOOL ; \n\t\t} \n\tfor ( String var : envVars ) { \n\t\tif ( System . getenv ( var ) == null ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void apply ( Animator animator , float currValue , float endValue , float velocity ) { \n\tapply ( animator , currValue , endValue , velocity , Math . abs ( endValue - currValue ) ) ; \n\t} \n"}, {"code": "public void addNotice ( ParserNotice notice ) $F207 ( notices , notice ) "}, {"code": "$F1 public String toString $F72 { \n\tint len = sessionId . length ; \n\tStringBuffer s = new StringBuffer ( NUM00 + NUM00 * len ) ; \n\t$F84 ( s ) for ( $F119 ( i , len ) ) { \n\t\ts . append ( NUM00 & sessionId [ i ] ) ; \n\t\tif ( i != ( len - NUM00 ) ) $F84 ( s ) } \n\t$F84 ( s ) $F92 ( s ) } \n"}, {"code": "public EventBinder $F11685 after ( String name ) $F18637 ( after , name , this ) "}, {"code": "public Point2D forward ( Point2D llp , Point2D pt ) { \n\treturn forward ( llp . getY ( ) , llp . getX ( ) , pt , _BOOL ) ; \n\t} \n"}, {"code": "private static int maxNumArcsForDedupByte ( int currentNumDedupBytes ) { \n\tint maxArcs = NUM00 + ( NUM00 * currentNumDedupBytes ) ; \n\tif ( currentNumDedupBytes > NUM00 ) { \n\t\tmaxArcs *= currentNumDedupBytes ; \n\t\t} \n\treturn Math . min ( maxArcs , NUM00 ) ; \n\t} \n"}, {"code": "public JobCreateRequest createJobCreateRequest ( String namespaceCd , String jobName ) { \n\t$F292037 $F204 ( parameters ) ; \n\tParameter parameter = new Parameter ( AbstractServiceTest . ATTRIBUTE_NAME_2_MIXED_CASE , AbstractServiceTest . ATTRIBUTE_VALUE_2 ) ; \n\tparameters . add ( parameter ) ; \n\tparameter = new Parameter $F22361 ; \n\tparameters . add ( parameter ) ; \n\treturn createJobCreateRequest ( namespaceCd , jobName , parameters ) ; \n\t} \n"}, {"code": "private void load $F72 throws RepositoryException , RDFParseException , IOException { \n\tfinal RepositoryConnection conn = repository . getConnection ( ) ; \n\tString ttlString = MODEL_TTL ; \n\t$F217487 ( stringInput , ttlString ) conn . add ( stringInput , NUM00 , RDFFormat . TURTLE , new Resource $F10277 ) ; \n\tttlString = BUCKET_TTL ; \n\tstringInput = $F107841 ( ttlString ) ; \n\tconn . add ( stringInput , NUM00 , RDFFormat . TURTLE , new Resource $F10277 ) ; \n\t$F17621 ( conn ) $F59 ( conn ) } \n"}, {"code": "public boolean isTaxIncluded $F72 { \n\tif ( m_M_PriceList_ID == NUM00 ) { \n\t\tm_M_PriceList_ID = DB . getSQLValue ( get_TrxName ( ) , NUM00 , getC_Order_ID ( ) ) ; \n\t\t} \n\tMPriceList pl = MPriceList . get ( getCtx ( ) , m_M_PriceList_ID , get_TrxName ( ) ) ; \n\treturn pl . isTaxIncluded ( ) ; \n\t} \n"}, {"code": "protected WebResource createRequest ( String uriPath ) { \n\tensureInitialization ( ) ; \n\treturn clientRequestHelper . createRequest ( client , serviceURI , URI . create ( uriPath ) ) ; \n\t} \n"}, {"code": "$F35402 ( context , cameraManager ) "}, {"code": "public void nextTable $F72 throws SQLException { \n\tif $F2921 ( tables ) { \n\t\t$F45366 ( currentTable , tables ) openRows ( ) ; \n\t\t} \n\t} \n"}, {"code": "public DDistinguishedNameChooser ( JFrame parent , String title , X500Name distinguishedName , boolean editable ) { \n\tsuper ( parent , title , Dialog . ModalityType . DOCUMENT_MODAL ) ; \n\tthis . distinguishedName = distinguishedName ; \n\tthis . editable = editable ; \n\tinitComponents ( ) ; \n\t} \n"}, {"code": "public static boolean deleteFile ( String filePathAndName ) { \n\tif $F21545 ( filePathAndName ) { \n\t\treturn _BOOL ; \n\t\t} \n\tboolean isSuccessfulDelete = _BOOL ; \n\ttry { \n\t\t$F1705 ( fileToDelete , filePathAndName ) $F7111 ( isSuccessfulDelete , fileToDelete ) } \n\tcatch ( Exception e ) { \n\t\t$F246959 ( logger , e , System , StackTrace ) isSuccessfulDelete = _BOOL ; \n\t\t} \n\treturn isSuccessfulDelete ; \n\t} \n"}, {"code": "public TungstenPropertiesIO ( File path ) { \n\tthis ( new JavaFileIO $F72 , new FilePath $F89450 ( path ) ) ; \n\t} \n"}, {"code": "private void computeTabOffsetHelper ( RectF stackRect ) { \n\tfinal boolean portrait = mCurrentMode == Orientation . PORTRAIT ; \n\tfinal float parentWidth = stackRect . width ( ) ; \n\tfinal float parentHeight = stackRect . height ( ) ; \n\t$F39760 ( overscrollPercent , computeOverscrollPercent ) final float scrollOffset = MathUtils . clamp ( mScrollOffset , getMinScroll ( _BOOL ) , getMaxScroll ( _BOOL ) ) ; \n\tfinal float stackScale = getStackScale ( stackRect ) ; \n\tint stackedCount = NUM00 ; \n\tfloat minStackedPosition = NUM00 ; \n\tfor ( $F9808 ( i , mStackTabs ) ) { \n\t\tassert mStackTabs [ i ] != null ; \n\t\tStackTab stackTab = mStackTabs [ i ] ; \n\t\tLayoutTab layoutTab = stackTab . getLayoutTab ( ) ; \n\t\tfinal float stackScrollOffset = stackTab . isDying ( ) ? mScrollOffsetForDyingTabs : scrollOffset ; \n\t\tfloat screenScrollOffset = approxScreen ( stackTab , stackScrollOffset ) ; \n\t\t$F28619 ( screenScrollOffset , Math , minStackedPosition ) if ( stackedCount < MAX1BER_OF_STACKED_TABS_TOP ) { \n\t\t\tfinal float tiltXcos = ( float ) Math . cos ( Math . toRadians ( layoutTab . getTiltX ( ) ) ) ; \n\t\t\tfinal float tiltYcos = ( float ) Math . cos ( Math . toRadians ( layoutTab . getTiltY ( ) ) ) ; \n\t\t\tfloat collapse = Math . min ( $F44398 ( Math , tiltXcos , tiltYcos ) ) ; \n\t\t\tcollapse *= layoutTab . getAlpha ( ) ; \n\t\t\tminStackedPosition += StackTab . sStackedTabVisibleSize * collapse ; \n\t\t\t} \n\t\tstackedCount += stackTab . isDying ( ) ? NUM00 : NUM00 ; \n\t\tif ( overscrollPercent < NUM00 ) { \n\t\t\tscreenScrollOffset += ( overscrollPercent / OVERSCROLL_TOP_SLIDE_PCTG ) * screenScrollOffset ; \n\t\t\t$F34970 ( screenScrollOffset , Math ) } \n\t\tfloat xIn = ( parentWidth - layoutTab . getScaledContentWidth ( ) ) / NUM00 ; \n\t\tfloat yIn = ( parentHeight - layoutTab . getScaledContentHeight ( ) ) / NUM00 ; \n\t\tfinal float horizontalPadding = ( parentWidth - layoutTab . getOriginalContentWidth ( ) * StackAnimation . SCALE_AMOUNT * stackScale ) / NUM00 ; \n\t\tfinal float verticalPadding = ( parentHeight - layoutTab . getOriginalContentHeight ( ) * StackAnimation . SCALE_AMOUNT * stackScale ) / NUM00 ; \n\t\tif ( portrait ) { \n\t\t\tyIn += STACK_PORTRAIT_Y_OFFSET_PROPORTION * verticalPadding ; \n\t\t\tyIn += screenScrollOffset ; \n\t\t\t} \n\t\telse { \n\t\t\tif ( LocalizationUtils . isLayoutRtl ( ) ) { \n\t\t\t\txIn -= STACK_LANDSCAPE_START_OFFSET_PROPORTION * horizontalPadding ; \n\t\t\t\txIn -= screenScrollOffset ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\txIn += STACK_LANDSCAPE_START_OFFSET_PROPORTION * horizontalPadding ; \n\t\t\t\txIn += screenScrollOffset ; \n\t\t\t\t} \n\t\t\tyIn += STACK_LANDSCAPE_Y_OFFSET_PROPORTION * verticalPadding ; \n\t\t\t} \n\t\tlayoutTab . setX ( xIn ) ; \n\t\tlayoutTab . setY ( yIn ) ; \n\t\t} \n\tstackedCount = NUM00 ; \n\tfloat maxStackedPosition = portrait ? mLayout . getHeightMinusTopControls ( ) : mLayout . getWidth ( ) ; \n\tfor ( $F26259 ( i , mStackTabs ) ) { \n\t\tassert mStackTabs [ i ] != null ; \n\t\tStackTab stackTab = mStackTabs [ i ] ; \n\t\tLayoutTab layoutTab = stackTab . getLayoutTab ( ) ; \n\t\tif ( stackTab . isDying ( ) ) $F598 float pos ; \n\t\tif ( portrait ) { \n\t\t\t$F130222 ( pos , layoutTab ) layoutTab . setY ( Math . min ( pos , maxStackedPosition ) ) ; \n\t\t\t} \n\t\telse if ( LocalizationUtils . isLayoutRtl ( ) ) { \n\t\t\tfloat posOffset = mLayout . getWidth ( ) - layoutTab . getOriginalContentWidth ( ) * StackAnimation . SCALE_AMOUNT * stackScale ; \n\t\t\tpos = $F174576 ( layoutTab ) + posOffset ; \n\t\t\tlayoutTab . setX ( - Math . min ( pos , maxStackedPosition ) + posOffset ) ; \n\t\t\t} \n\t\telse { \n\t\t\t$F25145 ( pos , layoutTab ) layoutTab . setX ( Math . min ( pos , maxStackedPosition ) ) ; \n\t\t\t} \n\t\tif ( pos >= maxStackedPosition && stackedCount < MAX1BER_OF_STACKED_TABS_BOTTOM ) { \n\t\t\tmaxStackedPosition -= StackTab . sStackedTabVisibleSize ; \n\t\t\tstackedCount ++ ; \n\t\t\t} \n\t\t} \n\t$F39760 ( discardRange , getDiscardRange ) for ( $F9808 ( i , mStackTabs ) ) { \n\t\tassert mStackTabs [ i ] != null ; \n\t\tStackTab stackTab = mStackTabs [ i ] ; \n\t\tLayoutTab layoutTab = stackTab . getLayoutTab ( ) ; \n\t\tfinal float xIn = layoutTab . getX ( ) + stackTab . getXInStackOffset ( ) ; \n\t\tfinal float yIn = layoutTab . getY ( ) + stackTab . getYInStackOffset ( ) ; \n\t\tfinal float xOut = stackTab . getXOutOfStack ( ) ; \n\t\tfinal float yOut = stackTab . getYOutOfStack ( ) ; \n\t\tfloat x = MathUtils . interpolate ( xOut , xIn , stackTab . getXInStackInfluence ( ) ) ; \n\t\tfloat y = MathUtils . interpolate ( yOut , yIn , stackTab . getYInStackInfluence ( ) ) ; \n\t\tif ( stackTab . getDiscardAmount ( ) != NUM00 ) { \n\t\t\tfloat discard = stackTab . getDiscardAmount ( ) ; \n\t\t\tboolean fromClick = stackTab . getDiscardFromClick ( ) ; \n\t\t\tfloat scale = computeDiscardScale ( discard , discardRange , fromClick ) ; \n\t\t\tfloat deltaX = stackTab . getDiscardOriginX ( ) - stackTab . getLayoutTab ( ) . getOriginalContentWidth ( ) / NUM00 ; \n\t\t\tfloat deltaY = stackTab . getDiscardOriginY ( ) - stackTab . getLayoutTab ( ) . getOriginalContentHeight ( ) / NUM00 ; \n\t\t\tfloat discardOffset = fromClick ? NUM00 : discard ; \n\t\t\tif ( portrait ) { \n\t\t\t\tx += discardOffset + deltaX * ( NUM00 - scale ) ; \n\t\t\t\ty += deltaY * ( NUM00 - scale ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tx += deltaX * ( NUM00 - scale ) ; \n\t\t\t\ty += discardOffset + deltaY * ( NUM00 - scale ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tlayoutTab . setX ( stackRect . left + x ) ; \n\t\tlayoutTab . setY ( stackRect . top + y ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public int compareTo ( final TimeInstant rhs ) { \n\treturn Integer . compare ( this . time , rhs . time ) ; \n\t} \n"}, {"code": "private boolean writeToCharacteristic ( BluetoothGattCharacteristic charc , $F96 data ) { \n\tcharc . setValue ( data ) ; \n\tboolean result = mGattClient . writeCharacteristic ( charc ) ; \n\tif ( result ) { \n\t\tLog . d ( TAG , NUM00 + charc . getUuid ( ) + NUM00 + Arrays . toString ( data ) ) ; \n\t\t} \n\telse { \n\t\tLog . e ( TAG , NUM00 + charc . getUuid ( ) + NUM00 + Arrays . toString ( data ) ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static void composeThroughMask ( Raster src , WritableRaster dst , Raster sel ) { \n\tint x = src . getMinX ( ) ; \n\tint y = src . getMinY ( ) ; \n\t$F2049 ( w , src ) $F2047 ( h , src ) int srcRGB [ ] = null ; \n\tint selRGB [ ] = null ; \n\tint dstRGB [ ] = null ; \n\tfor ( $F119 ( i , h ) ) { \n\t\tsrcRGB = src . getPixels ( x , y , w , NUM00 , srcRGB ) ; \n\t\tselRGB = sel . getPixels ( x , y , w , NUM00 , selRGB ) ; \n\t\tdstRGB = dst . getPixels ( x , y , w , NUM00 , dstRGB ) ; \n\t\tint k = x ; \n\t\tfor ( $F119 ( j , w ) ) { \n\t\t\tint sr = srcRGB [ k ] ; \n\t\t\tint dir = dstRGB [ k ] ; \n\t\t\tint sg = srcRGB [ k + NUM00 ] ; \n\t\t\tint dig = dstRGB [ k + NUM00 ] ; \n\t\t\tint sb = srcRGB [ k + NUM00 ] ; \n\t\t\tint dib = dstRGB [ k + NUM00 ] ; \n\t\t\tint sa = srcRGB [ k + NUM00 ] ; \n\t\t\tint dia = dstRGB [ k + NUM00 ] ; \n\t\t\tfloat a = selRGB [ k + NUM00 ] / NUM00 ; \n\t\t\tfloat ac = NUM00 - a ; \n\t\t\tdstRGB [ k ] = $F226385 ( a , sr , ac , dir ) ; \n\t\t\tdstRGB [ k + NUM00 ] = $F226385 ( a , sg , ac , dig ) ; \n\t\t\tdstRGB [ k + NUM00 ] = $F226385 ( a , sb , ac , dib ) ; \n\t\t\tdstRGB [ k + NUM00 ] = $F226385 ( a , sa , ac , dia ) ; \n\t\t\tk += NUM00 ; \n\t\t\t} \n\t\tdst . setPixels ( x , y , w , NUM00 , dstRGB ) ; \n\t\ty ++ ; \n\t\t} \n\t} \n"}, {"code": "public char skipTo ( char to ) { \n\tchar c ; \n\tint index = this . myIndex ; \n\tdo { \n\t\tc = next ( ) ; \n\t\tif ( c == NUM00 ) { \n\t\t\tthis . myIndex = index ; \n\t\t\treturn c ; \n\t\t\t} \n\t\t} \n\twhile ( c != to ) ; \n\tback ( ) ; \n\treturn c ; \n\t} \n"}, {"code": "public int checkVersionSize ( final SoftwareVersion version ) { \n\tURL imageUrl = getImageURL ( version ) ; \n\tHttpURLConnection urlConnection = invokeRequest ( imageUrl ) ; \n\treturn urlConnection . getContentLength ( ) ; \n\t} \n"}, {"code": "private static DateTimeFormatter createFormatterForStyle ( String style ) { \n\tif ( style == null || $F35624 ( style ) ) $F18931 ( style ) int dateStyle = $F95813 ( selectStyle , style ) ; \n\tint timeStyle = $F95813 ( selectStyle , style ) ; \n\tif ( dateStyle == NONE && timeStyle == NONE ) $F825 return createFormatterForStyleIndex ( dateStyle , timeStyle ) ; \n\t} \n"}, {"code": "public boolean ackNextChunkId ( String id ) { \n\tif ( state . isTerminated ( ) ) return _BOOL ; \n\telse if $F1238 ( id , chunkid ) { \n\t\treturn _BOOL ; \n\t\t} \n\telse { \n\t\tif ( ! allowOtherChunksInBetween ( id ) ) { \n\t\t\tif $F38577 ( state ) { \n\t\t\t\tif $F931 ( isTerminated ) terminate ( ) ; \n\t\t\t\treturn _BOOL ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tthrow new PngjInputException $F6486 ( id , chunkid ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse return _BOOL ; \n\t\t} \n\t} \n"}, {"code": "$F46189 ( task , initExecutorsIfNeed , taskExecutorForCachedImages ) "}, {"code": "private TopDocs combine ( TopDocs in , TopDocs resorted , QueryRescoreContext ctx ) { \n\tSystem . arraycopy ( resorted . scoreDocs , NUM00 , in . scoreDocs , NUM00 , resorted . scoreDocs . length ) ; \n\tif ( in . scoreDocs . length > resorted . scoreDocs . length ) { \n\t\tfor ( int i = resorted . scoreDocs . length ; \n\t\ti < in . scoreDocs . length ; \n\t\ti ++ ) { \n\t\t\tin . scoreDocs [ i ] . score *= ctx . queryWeight ( ) ; \n\t\t\t} \n\t\tArrays . sort ( in . scoreDocs , SCORE_DOC_COMPARATOR ) ; \n\t\t} \n\treturn in ; \n\t} \n"}, {"code": "public void testPosPosSameLength $F72 { \n\t$F53390 $F37339 int aSign = NUM00 ; \n\tint bSign = NUM00 ; \n\tbyte $F3018 = { \n\t\tNUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 } \n\t; \n\t$F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F45034 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) } \n"}, {"code": "$F98646 ( response , data , decodeOptions , bitmap , mMaxWidth , mMaxHeight , mDecodeConfig , BitmapFactory , _BOOL , actualWidth , actualHeight , desiredWidth , getResizedDimension , mScaleType , desiredHeight , findBestSampleSize , tempBitmap , Bitmap , Response , HttpHeaderParser ) "}, {"code": "$F1 public void pause ( boolean toPause ) { \n\tisPaused = toPause ; \n\t} \n"}, {"code": "public static String replaceAll $F1947 ( original , oldSubstring , newSubstring ) $F33971 ( replace , original , oldSubstring , newSubstring , _BOOL ) "}, {"code": "public long add ( final AddOp add ) throws Exception { \n\treturn add ( add , UUID . randomUUID ( ) ) ; \n\t} \n"}, {"code": "protected boolean isSmall $F72 { \n\treturn this . scale * this . textSizeInMeters < this . pixelSizeInMeters ; \n\t} \n"}, {"code": "public $F96 decompress ( DataInput is ) { \n\t$F1538 ( baos ) try { \n\t\twhile ( _BOOL ) { \n\t\t\t$F1544 ( b , is ) $F167039 ( b ) baos . write ( b ) ; \n\t\t\t} \n\t\t} \n\tcatch ( EOFException ex ) $F845 $F12153 ( ex ) $F77744 ( decompress , baos ) } \n"}, {"code": "public int borrowSpareRegister ( int category ) { \n\tint result = spareRegisterBase + borrowedSpareRegisters ; \n\tborrowedSpareRegisters += category ; \n\tregisterCount = Math . max ( registerCount , result + category ) ; \n\treturn result ; \n\t} \n"}, {"code": "public void True ( boolean expression , Object errorMessage ) { \n\tif ( ! expression ) { \n\t\tthrow new IllegalArgumentException $F45942 ( String , errorMessage ) ; \n\t\t} \n\t} \n"}, {"code": "private void processFields ( final Object component , final Context context , final ContextDestroyer contextDestroyer ) { \n\t$F20850 ( componentClass , component ) while ( componentClass != null && ! componentClass . equals ( $F12222 ) ) { \n\t\tfinal $F16271 fields = ClassReflection . getDeclaredFields ( componentClass ) ; \n\t\tif $F22195 ( fields ) { \n\t\t\tprocessFields ( component , fields , context , contextDestroyer ) ; \n\t\t\t} \n\t\t$F7852 ( componentClass ) } \n\t} \n"}, {"code": "public static String replaceAll $F1947 ( input , regularExpression , replacement ) { \n\treturn input . replaceAll ( regularExpression , replacement ) ; \n\t} \n"}, {"code": "void requestNotificationUpdate $F72 { \n\tif ( mCurrentNotificationGroupIndex != NOTIFICATION_OFF ) { \n\t\tRhythmNotificationService . showNotification ( mContext , mNotificationId ) ; \n\t\t} \n\t} \n"}, {"code": "public static int countLowerCase ( final String text ) { \n\tint count = NUM00 ; \n\tfor ( final char chr : text . toCharArray ( ) ) { \n\t\tif ( Character . isLowerCase ( chr ) ) { \n\t\t\tcount ++ ; \n\t\t\t} \n\t\t} \n\treturn count ; \n\t} \n"}, {"code": "public void assignService ( String serviceName , Map attributes ) throws $F51027 { \n\tIdServices idServices = IdServicesFactory . getDataStoreServices ( ) ; \n\tSet OCs = getServiceOCs ( token , serviceName ) ; \n\tSchemaType stype ; \n\t$F28017 ( tMap ) tMap . put ( serviceName , OCs ) ; \n\tSet assignedServices = idServices . getAssignedServices ( token , type , name , tMap , orgName , univDN ) ; \n\tif $F105 ( assignedServices , serviceName ) { \n\t\tObject $F1868 = { \n\t\t\tserviceName , type . getName ( ) } \n\t\t; \n\t\tthrow new IdRepoException ( IdRepoBundle . BUNDLE_NAME , IdRepoErrorCode . SERVICE_ALREADY_ASSIGNED , args ) ; \n\t\t} \n\ttry { \n\t\tServiceSchemaManager ssm = new ServiceSchemaManager ( serviceName , token ) ; \n\t\tServiceSchema ss = ssm . getSchema ( type . getName ( ) ) ; \n\t\tif ( ss != null ) { \n\t\t\tSet cosPriority = ( attributes != null ) ? ( Set ) attributes . remove ( COS_PRIORITY ) : null ; \n\t\t\tattributes = ss . validateAndInheritDefaults ( attributes , orgName , _BOOL ) ; \n\t\t\t$F114625 ( cosPriority , attributes , COS_PRIORITY ) attributes = AMCommonUtils . removeEmptyValues ( attributes ) ; \n\t\t\tstype = ss . getServiceType ( ) ; \n\t\t\t} \n\t\telse { \n\t\t\tss = ssm . getSchema ( SchemaType . DYNAMIC ) ; \n\t\t\tif ( ss == null ) { \n\t\t\t\tObject $F1868 = { \n\t\t\t\t\tserviceName } \n\t\t\t\t; \n\t\t\t\tthrow new IdRepoException ( IdRepoBundle . BUNDLE_NAME , IdRepoErrorCode . UNABLE_GET_SERVICE_SCHEMA , args ) ; \n\t\t\t\t} \n\t\t\tif ( attributes == null ) { \n\t\t\t\ttry { \n\t\t\t\t\tattributes = getServiceConfig ( token , serviceName , SchemaType . DYNAMIC ) ; \n\t\t\t\t\t} \n\t\t\t\tcatch ( SMSException smsex ) { \n\t\t\t\t\tObject $F1868 = { \n\t\t\t\t\t\tserviceName , type . getName ( ) } \n\t\t\t\t\t; \n\t\t\t\t\tthrow new IdRepoException ( IdRepoBundle . BUNDLE_NAME , NUM00 , args ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tattributes = ss . validateAndInheritDefaults ( attributes , orgName , _BOOL ) ; \n\t\t\t\t} \n\t\t\tattributes = AMCommonUtils . removeEmptyValues ( attributes ) ; \n\t\t\tstype = SchemaType . DYNAMIC ; \n\t\t\t} \n\t\tattributes = AMCrypt . encryptPasswords ( attributes , ss ) ; \n\t\t} \n\tcatch ( SMSException smse ) { \n\t\t$F22031 ( args , serviceName ) throw new IdRepoException ( IdRepoBundle . BUNDLE_NAME , IdRepoErrorCode . SERVICE_NOT_ASSIGNED , args ) ; \n\t\t} \n\t$F545 ( attributes , OCs ) idServices . assignService ( token , type , name , serviceName , stype , attributes , orgName , univDN ) ; \n\t} \n"}, {"code": "$F1 protected void createButtonsForButtonBar ( final Composite parent ) { \n\tfor ( final Iterator it = buttonDescriptions . iterator ( ) ; \n\tit . hasNext ( ) ; \n\t) { \n\t\tfinal ButtonDescription buttonDescription = ( ButtonDescription ) it . next ( ) ; \n\t\tcreateButton ( parent , buttonDescription . buttonId , buttonDescription . buttonLabel , buttonDescription . isDefault ) ; \n\t\t} \n\tif ( includeDefaultButtons ) { \n\t\tsuper . createButtonsForButtonBar ( parent ) ; \n\t\t} \n\thookAfterButtonsCreated ( ) ; \n\t} \n"}, {"code": "private boolean checkFileModifications $F72 throws Exception { \n\t$F105872 ( destFileTime , destFile ) if ( sourceFile . lastModified ( ) > destFileTime ) $F95125 ( logger , _BOOL ) Properties metadata = restoreFileModifications ( metaDataFile ) ; \n\t$F1933 ( metadata , _BOOL ) $F2218 ( parserFactory , SAXParserFactory ) $F49819 ( parser , parserFactory ) TimeCheckerHandler handler = new TimeCheckerHandler ( baseDir , metadata ) ; \n\tparser . parse ( sourceFile , handler ) ; \n\treturn handler . isModified ( ) ; \n\t} \n"}, {"code": "public static Number mul ( Number a , Number b ) { \n\tif $F71585 ( isFloatingPoint , a , b ) { \n\t\treturn a . doubleValue ( ) * b . doubleValue ( ) ; \n\t\t} \n\telse { \n\t\treturn a . longValue ( ) * b . longValue ( ) ; \n\t\t} \n\t} \n"}, {"code": "private final int findWidestAxis $F72 { \n\tint widest = NUM00 ; \n\tdouble width = ( maxLimit [ NUM00 ] - minLimit [ NUM00 ] ) * getAxisWeightHint ( NUM00 ) ; \n\tif $F35707 ( Double , width ) { \n\t\twidth = NUM00 ; \n\t\t} \n\tfor ( $F119 ( i , dimensions ) ) { \n\t\tdouble nwidth = $F17318 ( maxLimit , i , minLimit ) * getAxisWeightHint ( i ) ; \n\t\tif $F35707 ( Double , nwidth ) { \n\t\t\tnwidth = NUM00 ; \n\t\t\t} \n\t\t$F214188 ( nwidth , width , widest , i ) } \n\treturn widest ; \n\t} \n"}, {"code": "public void addSortKey ( int column , Comparator $F4 comparator ) $F30090 ( sortKeys , column , sortComparators , comparator ) "}, {"code": "public static String tagSwap $F5805 ( content , tagSwapMap ) { \n\tfor ( $F19318 ( entry , tagSwapMap ) ) { \n\t\tcontent = content . replace ( $F15245 ( entry ) ) ; \n\t\t} \n\treturn content ; \n\t} \n"}, {"code": "public static RunStats delegateGetBucketForIntegers ( int buckets ) throws Exception { \n\t$F62712 ( startTime , System ) PrimaryIndexBucketGeneratorImpl ibg = new PrimaryIndexBucketGeneratorImpl ( FieldDataType . INTEGER , buckets ) ; \n\tPrimaryIndexBucketLocatorImpl locator = new PrimaryIndexBucketLocatorImpl ( null , null , null , ibg . generateBuckets ( ) , null , null , null , null , null ) ; \n\t$F980 ( logger ) $F62728 ( hm ) $F62733 ( stats ) for ( int inputInt = - NUM00 ; \n\tinputInt < NUM00 ; \n\tinputInt ++ ) { \n\t\tLong bucketId = locator . getBucket ( inputInt , FieldDataType . INTEGER ) ; \n\t\tcalculate ( hm , stats , bucketId , inputInt ) ; \n\t\t} \n\t$F62747 ( runTime , System , startTime ) RunStats runStats = new RunStats ( NUM00 , FieldDataType . INTEGER , runTime , stats , hm ) ; \n\t$F62755 ( logger , runStats ) return runStats ; \n\t} \n"}, {"code": "public static long countSubstr ( final String value , final String subStr , final boolean caseSensitive , boolean allowOverlapping ) { \n\tvalidate ( value , NULL_ <missing ';'> NUM00 <missing ';'> $F38386 NULL_ NUM00 <missing ';'> $F38387 ; \n\treturn countSubstr ( caseSensitive ? value : value . toLowerCase ( ) , caseSensitive ? subStr : subStr . toLowerCase ( ) , allowOverlapping , NUM00 ) ; \n\t} \n"}, {"code": "private void dropIndex ( String indexName ) throws OracleException { \n\tPreparedStatement stmt = null ; \n\tif ( indexName == null ) throw SODAUtils . makeException ( SODAMessage . EX_ARG_CANNOT_BE_NULL , NUM00 ) ; \n\tindexName = CollectionDescriptor . stringToIdentifier ( indexName ) ; \n\tString sqltext = dropIndexDDL ( indexName ) ; \n\ttry { \n\t\tmetrics . startTiming ( ) ; \n\t\tstmt = conn . prepareStatement ( sqltext ) ; \n\t\t$F1699 ( stmt ) if $F68263 ( OracleLog ) $F556 ( log , indexName ) $F59 ( stmt ) stmt = null ; \n\t\tmetrics . recordDDL ( ) ; \n\t\t} \n\tcatch ( SQLException e ) { \n\t\tint errcode = e . getErrorCode ( ) ; \n\t\tif $F14485 ( errcode , ORA_SQL_OBJECT_NOT_EXISTS , ORA_SQL_INDEX_NOT_EXISTS ) { \n\t\t\tif $F68263 ( OracleLog ) $F145157 ( log , e ) } \n\t\telse { \n\t\t\tif $F68263 ( OracleLog ) $F145157 ( log , e ) throw SODAUtils . makeExceptionWithSQLText ( e , sqltext ) ; \n\t\t\t} \n\t\t} \n\tfinally { \n\t\tfor ( String message : SODAUtils . closeCursor ( stmt , null ) ) { \n\t\t\tif $F68263 ( OracleLog ) log . severe ( message ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "void unlaunch $F72 { \n\tif ( server != null ) { \n\t\tserver . die ( ) ; \n\t\tserver = null ; \n\t\t} \n\tframe . setVisible ( _BOOL ) ; \n\tclient = null ; \n\t$F58463 ( System ) System . runFinalization ( ) ; \n\t} \n"}, {"code": "private boolean isOutsideDocElem $F72 { \n\treturn ( null == m_docFrag ) && $F10470 ( m_elemStack ) && ( null == m_currentNode || m_currentNode . getNodeType ( ) == Node . DOCUMENT_NODE ) ; \n\t} \n"}, {"code": "public int postFiles ( $F5237 files , int startIndexInArgs , OutputStream out , String type ) { \n\treset ( ) ; \n\tint filesPosted = NUM00 ; \n\tfor ( File srcFile : files ) { \n\t\tif ( srcFile . isDirectory ( ) && srcFile . canRead ( ) ) { \n\t\t\tfilesPosted += postDirectory ( srcFile , out , type ) ; \n\t\t\t} \n\t\telse if ( srcFile . isFile ( ) && srcFile . canRead ( ) ) { \n\t\t\tfilesPosted += postFiles ( new File [ ] { \n\t\t\t\tsrcFile } \n\t\t\t, out , type ) ; \n\t\t\t} \n\t\telse { \n\t\t\t$F4924 ( parent , srcFile ) if ( parent == null ) $F263964 ( parent ) $F20605 ( fileGlob , srcFile ) GlobFileFilter ff = new GlobFileFilter ( fileGlob , _BOOL ) ; \n\t\t\t$F5237 fileList = parent . listFiles ( ff ) ; \n\t\t\tif $F12414 ( fileList ) { \n\t\t\t\twarn ( NUM00 + srcFile ) ; \n\t\t\t\t$F598 } \n\t\t\tfilesPosted += postFiles ( fileList , out , type ) ; \n\t\t\t} \n\t\t} \n\treturn filesPosted ; \n\t} \n"}, {"code": "private static String unicode2html ( final String text , final boolean amp , final boolean html ) { \n\t$F1275 ( text ) final StringBuilder sb = new StringBuilder ( $F9483 ( text ) / NUM00 ) ; \n\tint textpos = NUM00 ; \n\tString r ; \n\tchar c ; \n\twhile $F7007 ( textpos , text ) { \n\t\tc = text . charAt ( textpos ) ; \n\t\tif ( amp && c == AMP_UNICODE ) { \n\t\t\tsb . append ( AMP_HTML ) ; \n\t\t\ttextpos ++ ; \n\t\t\t$F598 } \n\t\tif ( $F86155 ( r , UNICODE2HTML4XML , c ) != null ) { \n\t\t\tsb . append ( r ) ; \n\t\t\ttextpos ++ ; \n\t\t\t$F598 } \n\t\tif ( html && $F86155 ( r , UNICODE2HTML4HTML , c ) != null ) { \n\t\t\tsb . append ( r ) ; \n\t\t\ttextpos ++ ; \n\t\t\t$F598 } \n\t\tsb . append ( c ) ; \n\t\ttextpos ++ ; \n\t\t} \n\t$F92 ( sb ) } \n"}, {"code": "public String addPlaylist ( String playlistName ) { \n\t$F20904 ( mInserts ) mInserts . put ( MediaStore . Audio . Playlists . NAME , playlistName ) ; \n\tmInserts . put ( MediaStore . Audio . Playlists . DATE_ADDED , System . currentTimeMillis ( ) ) ; \n\tmInserts . put ( MediaStore . Audio . Playlists . DATE_MODIFIED , System . currentTimeMillis ( ) ) ; \n\tUri uri = mContentResolver . insert ( MediaStore . Audio . Playlists . EXTERNAL_CONTENT_URI , mInserts ) ; \n\tif ( uri == null ) $F1337 else { \n\t\tString ref = PREFIX_PLAYLIST + getPlaylistUniqueName ( Long . toString ( ContentUris . parseId ( uri ) ) ) ; \n\t\tPlaylist pl = new Playlist ( ref ) ; \n\t\tpl . setName ( playlistName ) ; \n\t\tpl . setIsLoaded ( _BOOL ) ; \n\t\tmPlaylists . put ( ref , pl ) ; \n\t\tmCallback . playlistUpdated ( pl ) ; \n\t\treturn ref ; \n\t\t} \n\t} \n"}, {"code": "public static JSONArray readJSONArray $F3641 ( jsonObject , key , required , notNull ) throws JSONException { \n\tif ( required ) { \n\t\treturn jsonObject . getJSONArray ( key ) ; \n\t\t} \n\t$F3652 ( notNull , jsonObject , key , String , Locale , NULL_VALUE_FORMAT_OBJECT ) JSONArray value = null ; \n\tif $F3653 ( jsonObject , key ) { \n\t\tvalue = jsonObject . getJSONArray ( key ) ; \n\t\t} \n\treturn value ; \n\t} \n"}, {"code": "default int copyTo ( $F1113 $F96 bytes ) throws BufferUnderflowException { \n\tint len = ( int ) Math . min ( bytes . length , readRemaining ( ) ) ; \n\tfor ( $F119 ( i , len ) ) bytes [ i ] = readByte ( start ( ) + i ) ; \n\treturn len ; \n\t} \n"}, {"code": "private static $F5415 randomPoints ( Random random , int wavesCount , float width , float shiftCoef ) { \n\tfloat shift ; \n\t$F5415 points = new float [ wavesCount + NUM00 ] ; \n\tfor ( $F1139 ( i , points ) ) { \n\t\tif ( i == NUM00 ) { \n\t\t\tpoints [ i ] = - NUM00 ; \n\t\t\t} \n\t\telse if $F74408 ( i , points ) $F5629 ( points , i ) else { \n\t\t\tshift = random . nextFloat ( ) * shiftCoef * width ; \n\t\t\tshift *= random . nextBoolean ( ) ? NUM00 : - NUM00 ; \n\t\t\tpoints [ i ] = - NUM00 + i * width + shift ; \n\t\t\t} \n\t\t} \n\treturn points ; \n\t} \n"}, {"code": "private void addCharacters ( final Map < String , RPObject > characters ) { \n\tfor ( Entry < String , RPObject > character : characters . entrySet ( ) ) { \n\t\tJButton button = createCharacterButton ( $F15245 ( character ) ) ; \n\t\tcharacterPanel . add ( button ) ; \n\t\t} \n\t} \n"}, {"code": "public void runTest $F72 throws Throwable { \n\tDocument doc ; \n\tNodeList genderList ; \n\tNode genderNode ; \n\tCharacterData entText ; \n\tEntityReference entReference ; \n\t$F236 ( doc , load , _BOOL ) $F237 ( genderList , doc ) $F238 ( genderNode , genderList ) entReference = doc . createEntityReference ( NUM00 ) ; \n\tassertNotNull ( NUM00 , entReference ) ; \n\t$F241 ( entText , entReference ) assertNotNull ( NUM00 , entText ) ; \n\t{ \n\t\tboolean success = _BOOL ; \n\t\ttry { \n\t\t\tentText . insertData ( NUM00 , NUM00 ) ; \n\t\t\t} \n\t\tcatch ( DOMException ex ) { \n\t\t\tsuccess = ( ex . code == DOMException . NO_MODIFICATION_ALLOWED_ERR ) ; \n\t\t\t} \n\t\tassertTrue ( NUM00 , success ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void unbindView ( VH holder ) $F845 "}, {"code": "public static boolean isPresent ( Rule rule ) { \n\t$F1933 ( rule , _BOOL ) return ( ! isNotSet ( rule . getMinScaleDenominator ( ) ) || ! isNotSet ( rule . getMaxScaleDenominator ( ) ) ) ; \n\t} \n"}, {"code": "public long startcode $F72 $F12907 ( Long , fields ) "}, {"code": "public static void consumeProcessOutput ( Process self ) { \n\tconsumeProcessOutput ( self , ( OutputStream ) null , ( OutputStream ) null ) ; \n\t} \n"}, {"code": "public static void registerDefaultResolvers $F72 { \n\tList < KeyResolver > keyResolverList = new ArrayList < KeyResolver > $F72 ; \n\tkeyResolverList . add ( new KeyResolver ( new RSAKeyValueResolver $F72 ) ) ; \n\tkeyResolverList . add ( new KeyResolver ( new DSAKeyValueResolver $F72 ) ) ; \n\tkeyResolverList . add ( new KeyResolver ( new X509CertificateResolver $F72 ) ) ; \n\tkeyResolverList . add ( new KeyResolver ( new X509SKIResolver $F72 ) ) ; \n\tkeyResolverList . add ( new KeyResolver ( new RetrievalMethodResolver $F72 ) ) ; \n\tkeyResolverList . add ( new KeyResolver ( new X509SubjectNameResolver $F72 ) ) ; \n\tkeyResolverList . add ( new KeyResolver ( new X509IssuerSerialResolver $F72 ) ) ; \n\tkeyResolverList . add ( new KeyResolver ( new DEREncodedKeyValueResolver $F72 ) ) ; \n\tkeyResolverList . add ( new KeyResolver ( new KeyInfoReferenceResolver $F72 ) ) ; \n\tkeyResolverList . add ( new KeyResolver ( new X509DigestResolver $F72 ) ) ; \n\tresolverVector . addAll ( keyResolverList ) ; \n\t} \n"}, {"code": "public static final void delete ( String fileName ) { \n\t$F1705 ( file , fileName ) if $F7119 ( file ) $F5198 ( log , file ) $F43662 ( metadataFile , fileName , METADATA_SUFFIX ) if $F7119 ( metadataFile ) $F5198 ( log , metadataFile ) $F4924 ( directory , file ) if $F3444 ( directory ) $F19636 ( directory ) } \n"}, {"code": "$F120210 ( maximumPullScroll , getMaximumPullScroll , pLeft , getPaddingLeft , pTop , getPaddingTop , pRight , getPaddingRight , pBottom , getPaddingBottom , getPullToRefreshScrollDirection , HORIZONTAL , mMode , mHeaderLayout , mFooterLayout , VERTICAL , DEBUG , Log , LOG_TAG , String , setPadding ) "}, {"code": "$F45263 ( filename , extension , _BOOL , indexOfExtension , fileExt , getExtension ) "}, {"code": "$F1 public boolean equals ( Object obj ) { \n\t$F3627 ( obj , this , _BOOL ) if ( ! ( obj instanceof TimePeriodValuesCollection ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tTimePeriodValuesCollection that = ( TimePeriodValuesCollection ) obj ; \n\tif ( this . domainIsPointsInTime != that . domainIsPointsInTime ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( this . xPosition != that . xPosition ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( ! ObjectUtilities . equal ( this . data , that . data ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void print ( JTextPane pane ) $F34462 ( setDocument , pane , printDialog ) "}, {"code": "private boolean ensureScrollWheelAdjusted $F72 { \n\tint deltaY = mInitialScrollOffset - mCurrentScrollOffset ; \n\tif ( deltaY != NUM00 ) { \n\t\tmPreviousScrollerY = NUM00 ; \n\t\tif $F41056 ( Math , deltaY , mSelectorElementHeight ) { \n\t\t\tdeltaY += ( deltaY > NUM00 ) ? - mSelectorElementHeight : mSelectorElementHeight ; \n\t\t\t} \n\t\tmAdjustScroller . startScroll ( NUM00 , NUM00 , NUM00 , deltaY , SELECTOR_ADJUSTMENT_DURATION_MILLIS ) ; \n\t\tinvalidate ( ) ; \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "private String sortXml ( final String originalXml ) { \n\tString errorMsg = NUM00 ; \n\txmlProcessingInstructionParser . scanForIgnoredSections ( originalXml ) ; \n\tString xml = xmlProcessingInstructionParser . replaceIgnoredSections ( ) ; \n\tinsertXmlInXmlProcessor ( xml , errorMsg ) ; \n\txmlProcessor . sortXml ( ) ; \n\ttry ( ByteArrayOutputStream sortedXmlOutputStream = xmlProcessor . getSortedXml ( ) ) { \n\t\t$F4074 ( sortedXml , sortedXmlOutputStream , encoding ) if ( xmlProcessingInstructionParser . existsIgnoredSections ( ) ) { \n\t\t\tsortedXml = xmlProcessingInstructionParser . revertIgnoredSections ( sortedXml ) ; \n\t\t\t} \n\t\treturn sortedXml ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\tthrow new FailureException ( errorMsg + xml , e ) ; \n\t\t} \n\t} \n"}, {"code": "void waitForDictionaryLoading $F72 { \n\twhile ( mUpdatingDictionary ) { \n\t\t$F36705 ( Thread ) } \n\t} \n"}, {"code": "private void publishData $F84589 ( path , data ) { \n\ttry { \n\t\tif $F22195 ( data ) { \n\t\t\t$F5950 ( bii , data ) $F67402 ( ois , bii ) $F67404 ( dataObj , ois ) ZooKeeperDataWrapper wrapper = ( ZooKeeperDataWrapper ) ( dataObj ) ; \n\t\t\tJetstreamMessage tm = ( JetstreamMessage ) wrapper . getOrginalData ( ) ; \n\t\t\tString trackerKey = createKey ( path , wrapper ) ; \n\t\t\tm_changeTracker . put ( trackerKey , wrapper . getTimestamp ( ) ) ; \n\t\t\ttry { \n\t\t\t\tLOGGER . warn ( NUM00 + path + NUM00 + trackerKey + NUM00 + wrapper . getTimestamp ( ) ) ; \n\t\t\t\tm_transportListener . postMessage ( tm , m_queueStats ) ; \n\t\t\t\t} \n\t\t\tcatch ( Throwable mse ) { \n\t\t\t\t$F280 ( buf ) $F84 ( buf ) buf . append ( mse . getLocalizedMessage ( ) ) ; \n\t\t\t\tLOGGER . error ( NUM00 + path + buf . toString ( ) , mse ) ; \n\t\t\t\t} \n\t\t\t$F72375 ( m_totalMsgsRcvd ) $F72375 ( m_msgsRcvdPerSec ) } \n\t\t} \n\tcatch ( ClassNotFoundException e ) $F30203 ( LOGGER , path , e ) catch ( IOException e ) $F30203 ( LOGGER , path , e ) } \n"}, {"code": "static public long nextAddr ( Random r , WormAddressManager am ) { \n\tif ( r . nextInt ( NUM00 ) < NUM00 ) $F1082 return nextNonZeroAddr ( r , am ) ; \n\t} \n"}, {"code": "public void undoableEditHappened ( mxUndoableEdit undoableEdit ) { \n\tif ( enabled ) { \n\t\tif ( undoableEdit . getTransparent ( ) ) $F845 else if ( ! undoableEdit . getUndoable ( ) ) $F5795 ( notUndoableEditHappened ) else if ( collection ) { \n\t\t\tcollected . add ( undoableEdit ) ; \n\t\t\tfireEvent ( new mxEventObject ( mxEvent . ADD , NUM00 , undoableEdit ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tcollected . add ( undoableEdit ) ; \n\t\t\taddEventList ( ) ; \n\t\t\tfireEvent ( new mxEventObject ( mxEvent . ADD , NUM00 , undoableEdit ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public File ( File dir , String name ) { \n\tthis ( dir == null ? null : dir . getPath ( ) , name ) ; \n\t} \n"}, {"code": "public void removeDragListener ( DragListener l ) $F106 ( mListeners , l ) "}, {"code": "private HighTideValues findHighTide ( JSONObject responseObject ) throws JSONException , ParseException { \n\t$F49149 ( predictions , responseObject ) JSONObject lastPrediction = null , firstHighTide = null , secondHighTide = null , lowTide = null ; \n\tboolean firstTideDone = _BOOL ; \n\tfor ( $F1088 ( i , predictions ) ) { \n\t\tJSONObject prediction = ( JSONObject ) predictions . get ( i ) ; \n\t\tif ( lastPrediction == null ) $F34544 ( lastPrediction , prediction ) if ( isTideIncreasing ( lastPrediction , prediction ) ) { \n\t\t\tif ( ! firstTideDone ) { \n\t\t\t\tfirstHighTide = prediction ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tsecondHighTide = prediction ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tif ( ! firstTideDone && firstHighTide != null ) { \n\t\t\t\tfirstTideDone = _BOOL ; \n\t\t\t\t} \n\t\t\telse $F111836 ( secondHighTide ) $F65989 ( firstTideDone , lowTide , prediction ) } \n\t\tlastPrediction = prediction ; \n\t\t} \n\t$F121432 ( dateFormat ) return new HighTideValues ( AlexaDateUtil . getFormattedTime ( dateFormat . parse ( firstHighTide . getString ( NUM00 ) ) ) , getFormattedHeight ( firstHighTide . getString ( NUM00 ) ) , AlexaDateUtil . getFormattedTime ( dateFormat . parse ( lowTide . getString ( NUM00 ) ) ) , getFormattedHeight ( lowTide . getString ( NUM00 ) ) , AlexaDateUtil . getFormattedTime ( dateFormat . parse ( secondHighTide . getString ( NUM00 ) ) ) , getFormattedHeight ( secondHighTide . getString ( NUM00 ) ) ) ; \n\t} \n"}, {"code": "public static boolean isIpAddress ( String ipAddress ) { \n\t$F1150 ( m1 , validIPV4Pattern , ipAddress ) $F266906 ( m1 , _BOOL ) $F1150 ( m2 , validIPV6Pattern , ipAddress ) $F36689 ( m2 ) } \n"}, {"code": "$F1 public synchronized void removeTrainingSetListener ( TrainingSetListener tsl ) $F130709 ( m_trainingListeners , tsl ) "}, {"code": "public void renameAttributeValue ( Attribute att , String val , String name ) { \n\tint v = att . indexOfValue ( val ) ; \n\tif ( v == - NUM00 ) $F87843 ( val ) renameAttributeValue ( att . index ( ) , v , name ) ; \n\t} \n"}, {"code": "private static void s_uacmean ( SparseBlock a , $F1986 c , int m , int n , KahanObject kbuff , Mean kmean , int rl , int ru ) { \n\tArrays . fill ( c , n , n * NUM00 , ru - rl ) ; \n\tif ( a . isContiguous ( ) ) { \n\t\tcountDisAgg ( a . values ( rl ) , c , a . indexes ( rl ) , a . pos ( rl ) , n , ( int ) a . size ( rl , ru ) ) ; \n\t\t} \n\telse { \n\t\tfor ( int i = rl ; \n\t\ti < ru ; \n\t\ti ++ ) { \n\t\t\tif $F20899 ( a , i ) countDisAgg ( a . values ( i ) , c , a . indexes ( i ) , a . pos ( i ) , n , a . size ( i ) ) ; \n\t\t\t} \n\t\t} \n\tif ( a . isContiguous ( ) ) { \n\t\tmeanAgg ( a . values ( rl ) , c , a . indexes ( rl ) , a . pos ( rl ) , ( int ) a . size ( rl , ru ) , n , kbuff , kmean ) ; \n\t\t} \n\telse { \n\t\tfor ( int i = rl ; \n\t\ti < ru ; \n\t\ti ++ ) { \n\t\t\tif $F20899 ( a , i ) meanAgg ( a . values ( i ) , c , a . indexes ( i ) , a . pos ( i ) , a . size ( i ) , n , kbuff , kmean ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel ) "}, {"code": "public boolean isPdfAttachment $F72 { \n\tif $F9774 ( getPO ) return _BOOL ; \n\treturn m_po . isPdfAttachment ( ) ; \n\t} \n"}, {"code": "private int nameToIndex ( String parameterName ) throws SQLException { \n\tparameterMetadata . readMetadataFromDbIfRequired ( ) ; \n\tfor ( int i = NUM00 ; \n\ti <= parameterMetadata . getParameterCount ( ) ; \n\ti ++ ) { \n\t\t$F150661 ( name , parameterMetadata , i ) if $F45007 ( name , parameterName ) { \n\t\t\treturn i ; \n\t\t\t} \n\t\t} \n\t$F132231 ( parameterName ) } \n"}, {"code": "public void sort ( Comparator < ? super SubRange > comparator ) $F57005 ( Collections , data , comparator ) "}, {"code": "private void add ( $F27766 map , String key , Object value ) { \n\t$F20764 v = getList ( map , key ) ; \n\tif ( v == null ) { \n\t\t$F15051 ( v ) $F134205 ( map , key , v ) } \n\t$F2201 ( v , value ) } \n"}, {"code": "public void test_singleResourceLocking_serialized_waitsFor_highConcurrency_taskTimeout $F72 throws Exception { \n\t$F859 ( properties ) final int nthreads = NUM00 ; \n\tfinal int ntasks = NUM00 ; \n\t$F130259 ( properties , TestOptions , nthreads ) $F130261 ( properties , TestOptions , ntasks ) $F130263 ( properties , TestOptions ) $F130265 ( properties , TestOptions ) $F130267 ( properties , TestOptions ) properties . setProperty ( TestOptions . TASK_TIMEOUT , NUM00 ) ; \n\t$F130271 ( properties , TestOptions ) $F130273 ( properties , TestOptions ) final Result result = doComparisonTest ( properties ) ; \n\t$F130277 ( assertEquals , Integer , result ) $F130277 ( assertEquals , Integer , result ) final int ncancel = Integer . parseInt ( result . get ( NUM00 ) ) ; \n\tassertTrue ( NUM00 , ncancel > NUM00 ) ; \n\t} \n"}, {"code": "private void blackmanHarris3s ( int size ) { \n\tint start = ( windowFunction . length - size ) / NUM00 ; \n\tint stop = ( windowFunction . length + size ) / NUM00 ; \n\tdouble scale = NUM00 / ( double ) size / NUM00 ; \n\tfor ( int i = NUM00 ; \n\tstart < stop ; \n\tstart ++ , i ++ ) windowFunction [ i ] = scale * ( NUM00 - NUM00 * Math . cos ( twoPI * i / size ) + NUM00 * Math . cos ( NUM00 * twoPI * i / size ) ) ; \n\t} \n"}, {"code": "private WeekFields ( DayOfWeek firstDayOfWeek , int minimalDaysInFirstWeek ) { \n\t$F10578 ( Objects , firstDayOfWeek ) $F102540 ( minimalDaysInFirstWeek ) this . firstDayOfWeek = firstDayOfWeek ; \n\tthis . minimalDays = minimalDaysInFirstWeek ; \n\t} \n"}, {"code": "private ResultPointsAndTransitions transitionsBetween ( ResultPoint from , ResultPoint to ) { \n\t$F166720 ( fromX , from ) $F166722 ( fromY , from ) $F166720 ( toX , to ) $F166722 ( toY , to ) $F226920 ( steep , Math , toY , fromY , toX , fromX ) $F226922 ( steep , temp , fromX , fromY , toX , toY ) $F11871 ( dx , Math , toX , fromX ) $F11871 ( dy , Math , toY , fromY ) int error = - dx > > NUM00 ; \n\t$F211050 ( ystep , fromY , toY ) $F211050 ( xstep , fromX , toX ) int transitions = NUM00 ; \n\t$F226926 ( inBlack , image , steep , fromY , fromX ) $F226931 ( x , fromX , y , fromY , toX , xstep , isBlack , image , steep , inBlack , transitions , error , dy , toY , ystep , dx ) $F226932 ( from , to , transitions ) } \n"}, {"code": "private void placeGroups $F72 { \n\tstartRow ( ) ; \n\tplaceChild ( mCloseButton , Gravity . END ) ; \n\tplaceGroup ( mMainGroup ) ; \n\tint customGroupWidth = NUM00 ; \n\tif ( mCustomGroup != null ) { \n\t\tupdateCustomGroupForRow ( ROW_MAIN ) ; \n\t\tcustomGroupWidth = getWidthWithMargins ( mCustomGroup ) ; \n\t\t} \n\tint buttonGroupWidth = NUM00 ; \n\tif ( mButtonGroup != null ) { \n\t\tupdateButtonGroupForRow ( ROW_MAIN ) ; \n\t\tbuttonGroupWidth = getWidthWithMargins ( mButtonGroup ) ; \n\t\t} \n\tboolean customGroupOnMainRow = customGroupWidth <= availableWidth ( ) ; \n\tboolean buttonGroupOnMainRow = customGroupWidth + buttonGroupWidth <= availableWidth ( ) ; \n\tif ( mCustomGroup != null ) { \n\t\tif ( customGroupOnMainRow ) { \n\t\t\tmCustomGroup . gravity = ( mButtonGroup != null && buttonGroupOnMainRow ) ? Gravity . START : Gravity . END ; \n\t\t\t} \n\t\telse $F19529 ( startRow , updateCustomGroupForRow , ROW_OTHER ) placeGroup ( mCustomGroup ) ; \n\t\t} \n\tif ( mButtonGroup != null ) { \n\t\tif ( ! buttonGroupOnMainRow ) { \n\t\t\tstartRow ( ) ; \n\t\t\tupdateButtonGroupForRow ( ROW_OTHER ) ; \n\t\t\tif ( mCustomGroup == null && mMessageTextView != null ) { \n\t\t\t\t$F310049 ( lp , mMessageTextView ) int messageBottom = lp . top + mMessageTextView . getMeasuredHeight ( ) ; \n\t\t\t\tmTop = Math . max ( mTop , messageBottom + NUM00 * mMargin ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tplaceGroup ( mButtonGroup ) ; \n\t\tif ( mCustomButton != null && ! buttonGroupOnMainRow ) { \n\t\t\t$F310049 ( primaryButtonLP , mPrimaryButton ) $F310049 ( customButtonLP , mCustomButton ) $F310049 ( messageLP , mMessageView ) if ( customButtonLP . start >= messageLP . start ) { \n\t\t\t\tcustomButtonLP . start = messageLP . start ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tcustomButtonLP . start = mMargin ; \n\t\t\t\t} \n\t\t\tif ( ! mButtonGroup . isStacked ) { \n\t\t\t\tcustomButtonLP . top = primaryButtonLP . top + ( mPrimaryButton . getMeasuredHeight ( ) - mCustomButton . getMeasuredHeight ( ) ) / NUM00 ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tstartRow ( ) ; \n\tif ( buttonGroupOnMainRow ) { \n\t\tint layoutHeight = mBottom ; \n\t\tfor ( $F50810 ( i , getChildCount ) ) { \n\t\t\tView child = getChildAt ( i ) ; \n\t\t\tint extraSpace = layoutHeight - child . getMeasuredHeight ( ) ; \n\t\t\t$F310049 ( lp , child ) lp . top = extraSpace / NUM00 ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "static HeapDoublesSketch copy ( DoublesSketch sketch ) { \n\tHeapDoublesSketch qsCopy ; \n\tqsCopy = HeapDoublesSketch . newInstance ( sketch . getK ( ) ) ; \n\tqsCopy . n_ = sketch . getN ( ) ; \n\tqsCopy . minValue_ = sketch . getMinValue ( ) ; \n\tqsCopy . maxValue_ = sketch . getMaxValue ( ) ; \n\tqsCopy . combinedBufferItemCapacity_ = sketch . getCombinedBufferItemCapacity ( ) ; \n\tqsCopy . baseBufferCount_ = sketch . getBaseBufferCount ( ) ; \n\tqsCopy . bitPattern_ = sketch . getBitPattern ( ) ; \n\t$F1986 combBuf = sketch . getCombinedBuffer ( ) ; \n\tqsCopy . combinedBuffer_ = $F17877 ( Arrays , combBuf ) ; \n\treturn qsCopy ; \n\t} \n"}, {"code": "public List < VerificationOK > verify ( List < VerificationOK > result ) throws IOException , GeneralSecurityException { \n\t$F21432 ( result ) while ( pkcs7 != null ) { \n\t\t$F138067 ( result , verifySignature ) } \n\treturn result ; \n\t} \n"}, {"code": "public SchemaField ( String name , FieldType type ) { \n\tthis ( name , type , type . properties , null ) ; \n\t} \n"}, {"code": "private void createDaySlot ( ArrayList < MAssignmentSlot > list , MAssignmentSlot ma ) { \n\tTimestamp start = ma . getStartTime ( ) ; \n\t$F13064 ( calStart ) calStart . setTime ( start ) ; \n\t$F118880 ( calStart , Calendar ) $F118882 ( calStart , Calendar ) $F118884 ( calStart , Calendar ) $F104560 ( calStart , Calendar ) Timestamp end = ma . getEndTime ( ) ; \n\t$F13064 ( calEnd ) calEnd . setTime ( end ) ; \n\t$F118880 ( calEnd , Calendar ) $F118882 ( calEnd , Calendar ) $F118884 ( calEnd , Calendar ) $F104560 ( calEnd , Calendar ) while $F83893 ( calStart , calEnd ) { \n\t\t$F214575 ( xStart , calStart ) $F107166 ( calStart , Calendar ) $F214575 ( xEnd , calStart ) MAssignmentSlot myMa = new MAssignmentSlot ( xStart , xEnd , ma . getName ( ) , ma . getDescription ( ) , ma . getStatus ( ) ) ; \n\t\tlist . add ( myMa ) ; \n\t\t} \n\t} \n"}, {"code": "public boolean isAttachment ( String fileName ) $F121470 ( fileName , ENTRY_ATTACHMENT ) "}, {"code": "void subtractFlakes ( int quantity ) { \n\tfor ( $F1316 ( i , quantity ) ) { \n\t\tint index = numFlakes - i - NUM00 ; \n\t\tflakes . remove ( index ) ; \n\t\t} \n\tsetNumFlakes ( numFlakes - quantity ) ; \n\t} \n"}, {"code": "public Optimized ( int n , int s , int t , Iterator < EdgeInfo > edges ) { \n\tsuper ( n , s , t ) ; \n\t$F3936 ( queue , n ) QUEUE_SIZE = n ; \n\tcapacity = new int [ n ] [ n ] ; \n\tflow = new int [ n ] [ n ] ; \n\t$F3936 ( previous , n ) $F3936 ( visited , n ) while $F2921 ( edges ) { \n\t\tEdgeInfo ei = edges . next ( ) ; \n\t\tcapacity [ ei . start ] [ ei . end ] = ei . capacity ; \n\t\t} \n\t} \n"}, {"code": "public void put ( Buffer buffer ) { \n\tif ( buffer . getLength ( ) <= NUM00 ) $F932 $F96 currentRtpPacketData = ( ( $F96 ) buffer . getData ( ) ) ; \n\tH264RtpHeaders h264RtpHeaders = new H264RtpHeaders ( currentRtpPacketData ) ; \n\tif ( h264RtpHeaders . getFUI_F ( ) ) $F932 if ( reassembledData == null ) { \n\t\ttimeStamp = buffer . getTimeStamp ( ) ; \n\t\tformat = buffer . getFormat ( ) ; \n\t\tseqNumber = buffer . getSequenceNumber ( ) ; \n\t\treassembledDataNALHeader = h264RtpHeaders . getNALHeader ( ) ; \n\t\treassembledData = new byte [ JavaPacketizer . H264_MAX_RTP_PKTS ] [ H264_FRAME_PACKET_SIZE ] ; \n\t\treassembledDataSize = new int [ JavaPacketizer . H264_MAX_RTP_PKTS ] ; \n\t\treassembledDataHasStart = _BOOL ; \n\t\treassembledDataHasEnd = _BOOL ; \n\t\t} \n\tint posSeq = ( int ) ( buffer . getSequenceNumber ( ) & VIDEO_DECODER_MAX_PAYLOADS_CHUNKS_MASK ) ; \n\tint payloadStartPosition = h264RtpHeaders . getHeaderSize ( ) ; \n\tint payloadLength = buffer . getLength ( ) - h264RtpHeaders . getHeaderSize ( ) ; \n\tif ( h264RtpHeaders . getFUI_TYPE ( ) == H264RtpHeaders . AVC_NALTYPE_FUA ) { \n\t\treassembledDataHasStart |= ( h264RtpHeaders . getFUH_S ( ) ) ; \n\t\treassembledDataHasEnd |= ( h264RtpHeaders . getFUH_E ( ) ) ; \n\t\treassembledDataPosSeqStart = ( ( h264RtpHeaders . getFUH_S ( ) ) ? posSeq : reassembledDataPosSeqStart ) ; \n\t\treassembledDataPosSeqEnd = ( ( h264RtpHeaders . getFUH_E ( ) ) ? posSeq : reassembledDataPosSeqEnd ) ; \n\t\t} \n\treassembledDataSize [ posSeq ] = payloadLength ; \n\treassembledDataFullSize += payloadLength ; \n\tSystem . arraycopy ( currentRtpPacketData , payloadStartPosition , reassembledData [ posSeq ] , NUM00 , payloadLength ) ; \n\tvideoOrientation = buffer . getVideoOrientation ( ) ; \n\t} \n"}, {"code": "public static $F529 badExpireEvenProcessor $F71242 ( dctx , context ) { \n\t$F108907 ( creditCard , context ) $F21024 ( expireDate , creditCard ) String lastNumberStr = $F39706 ( expireDate ) ; \n\t$F27213 ( lastNumber , Integer , lastNumberStr ) if ( lastNumber % NUM00 == NUM00 ) $F8587 ( alwaysBadExpireProcessor , dctx , context ) else $F8587 ( alwaysApproveProcessor , dctx , context ) } \n"}, {"code": "public ExpressionType negate $F72 { \n\tif ( isNegated ( ) ) { \n\t\treturn new ExpressionType ( typeString . replace ( SUFFIX_NEGATED , NUM00 ) ) ; \n\t\t} \n\telse { \n\t\treturn new ExpressionType ( typeString + SUFFIX_NEGATED ) ; \n\t\t} \n\t} \n"}, {"code": "protected void updatePathGreyness ( TreePath ancestor ) { \n\tboolean value = isPathCheckBox ( ancestor ) ; \n\t$F260968 ( ancestorNode , ancestor ) if ( ! isPathCheckBox ( ancestor ) ) $F14411 ( addToCheckBoxPathsSet , ancestor ) } \n"}, {"code": "protected $F5 useTokenizer ( String s ) throws Exception { \n\t$F806 tokens ; \n\t$F5 result ; \n\tint i ; \n\ttokens = Tokenizer . tokenize ( m_Tokenizer , $F8640 ( s ) ) ; \n\t$F30598 ( result ) for ( $F6929 ( i , tokens ) ) $F24617 ( result , tokens , i ) return result ; \n\t} \n"}, {"code": "public DOMStorableInputOutputFormat ( DOMFactory factory , String description , String fileExtension , String mimeType ) { \n\tthis . factory = factory ; \n\tthis . description = description ; \n\tthis . fileExtension = fileExtension ; \n\tthis . mimeType = mimeType ; \n\ttry { \n\t\tthis . dataFlavor = new DataFlavor ( mimeType ) ; \n\t\t} \n\tcatch ( ClassNotFoundException ex ) { \n\t\tInternalError error = new InternalError ( NUM00 + mimeType ) ; \n\t\terror . initCause ( ex ) ; \n\t\tthrow error ; \n\t\t} \n\t} \n"}, {"code": "default TypeParameterDeclaration asTypeParameter $F72 { \n\tthrow new UnsupportedOperationException $F10797 ( String , this ) ; \n\t} \n"}, {"code": "public void addColumn ( String header ) { \n\tif ( getModel ( ) instanceof DefaultTableModel ) { \n\t\tDefaultTableModel model = ( DefaultTableModel ) getModel ( ) ; \n\t\tmodel . addColumn ( Util . cleanAmp ( header ) ) ; \n\t\t} \n\telse $F824 } \n"}, {"code": "public void addMoveScript ( String pathname ) { \n\t_moveScripts . add ( pathname ) ; \n\tsetDirtyAndFirePropertyChange ( NUM00 , pathname , null ) ; \n\t} \n"}, {"code": "private void checkAndAddResizeHandler $F72 { \n\tComponent parent = getParent ( ) ; \n\tif ( parent != null && resizable && resizeHandler == null ) { \n\t\tresizeHandler = new ResizeHandler $F72 ; \n\t\tparent . addComponentListener ( resizeHandler ) ; \n\t\t} \n\t} \n"}, {"code": "static public void useXalanXPathSupport $F72 throws Exception { \n\t$F32352 ( Class ) Class c = Class . forName ( NUM00 ) ; \n\t$F37039 ( STATIC_LOCK , xpathSupportClass , c ) $F35060 ( LOG ) } \n"}, {"code": "public int numberOfOwningShards $F72 { \n\tint count = NUM00 ; \n\tfor ( ShardRouting shardEntry : this ) { \n\t\tif ( shardEntry . state ( ) != ShardRoutingState . RELOCATING ) { \n\t\t\tcount ++ ; \n\t\t\t} \n\t\t} \n\treturn count ; \n\t} \n"}, {"code": "public String convertBinaryToHexString $F97 ( bytes ) { \n\t$F28148 ( builder , bytes ) for ( byte b : bytes ) { \n\t\t$F52249 ( highBitsInt , b ) int lowBitsInt = b & NUM00 ; \n\t\t$F6939 ( builder , HEX_CHARS , highBitsInt ) $F6939 ( builder , HEX_CHARS , lowBitsInt ) } \n\t$F92 ( builder ) } \n"}, {"code": "protected static void writeHeader ( XMLWriter writer ) { \n\tXmlWriterUtil . writeCommentLineBreak ( writer ) ; \n\tXmlWriterUtil . writeComment ( writer , NUM00 ) ; \n\t$F121432 ( dateFormat ) XmlWriterUtil . writeComment ( writer , NUM00 + dateFormat . format ( new Date $F30 ( System ) ) ) ; \n\tXmlWriterUtil . writeComment ( writer , NUM00 ) ; \n\tXmlWriterUtil . writeComment ( writer , NUM00 ) ; \n\tXmlWriterUtil . writeCommentLineBreak ( writer ) ; \n\tXmlWriterUtil . writeLineBreak ( writer ) ; \n\t} \n"}, {"code": "protected void close $F72 { \n\ttry $F21231 ( to , from ) $F29052 if ( process != null ) $F17623 ( process ) process = null ; \n\tto = null ; \n\tfrom = null ; \n\terrorLogger = null ; \n\t} \n"}, {"code": "public void clearParseIssues $F72 $F9096 ( parseIssues ) "}, {"code": "public int validate ( GraphicsConfiguration gc ) { \n\tint returnCode = VolatileImage . IMAGE_OK ; \n\tboolean lostSurfaceTmp = lostSurface ; \n\tlostSurface = _BOOL ; \n\tif ( isAccelerationEnabled ( ) ) { \n\t\tif ( ! isConfigValid ( gc ) ) { \n\t\t\treturnCode = VolatileImage . IMAGE_INCOMPATIBLE ; \n\t\t\t} \n\t\telse if ( sdAccel == null ) { \n\t\t\tsdAccel = initAcceleratedSurface ( ) ; \n\t\t\tif ( sdAccel != null ) { \n\t\t\t\tsdCurrent = sdAccel ; \n\t\t\t\tsdBackup = null ; \n\t\t\t\treturnCode = VolatileImage . IMAGE_RESTORED ; \n\t\t\t\t} \n\t\t\telse $F20182 ( sdCurrent , getBackupSurface ) } \n\t\telse if ( sdAccel . isSurfaceLost ( ) ) { \n\t\t\ttry { \n\t\t\t\trestoreAcceleratedSurface ( ) ; \n\t\t\t\tsdCurrent = sdAccel ; \n\t\t\t\tsdAccel . setSurfaceLost ( _BOOL ) ; \n\t\t\t\tsdBackup = null ; \n\t\t\t\treturnCode = VolatileImage . IMAGE_RESTORED ; \n\t\t\t\t} \n\t\t\tcatch ( sun . java2d . InvalidPipeException e ) $F20182 ( sdCurrent , getBackupSurface ) } \n\t\telse if ( lostSurfaceTmp ) { \n\t\t\treturnCode = VolatileImage . IMAGE_RESTORED ; \n\t\t\t} \n\t\t} \n\telse if ( sdAccel != null ) { \n\t\tsdCurrent = getBackupSurface ( ) ; \n\t\tsdAccel = null ; \n\t\treturnCode = VolatileImage . IMAGE_RESTORED ; \n\t\t} \n\tif ( ( returnCode != VolatileImage . IMAGE_INCOMPATIBLE ) && ( sdCurrent != sdPrevious ) ) { \n\t\tsdPrevious = sdCurrent ; \n\t\treturnCode = VolatileImage . IMAGE_RESTORED ; \n\t\t} \n\tif ( returnCode == VolatileImage . IMAGE_RESTORED ) $F5795 ( initContents ) return returnCode ; \n\t} \n"}, {"code": "private static String unsignedToString ( final int value ) { \n\tif ( value >= NUM00 ) $F23210 ( Integer , value ) else { \n\t\treturn Long . toString ( ( ( long ) value ) & NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "public ConnectionManager ( ConnectionManagerConfiguration configuration ) throws Exception { \n\t_configuration = configuration ; \n\tif ( _configuration == null ) { \n\t\tthrow new ConnectionManagerException $F580 ; \n\t\t} \n\t} \n"}, {"code": "$F1431 public Pids $F72 $F57005 ( Arrays , PIDs , pidComparator ) "}, {"code": "public void handleHeaderColumnReleased ( Point p ) { \n\tTABLE . setPressedColumnIndex ( - NUM00 ) ; \n\tJTableHeader th = TABLE . getTableHeader ( ) ; \n\tint col = th . columnAtPoint ( p ) ; \n\tif ( col != - NUM00 ) th . repaint ( th . getHeaderRect ( col ) ) ; \n\t} \n"}, {"code": "public void createDevices ( $F1113 List < Device > devices ) { \n\t$F933 ( initIfNecessary ) for ( Device device : devices ) { \n\t\t$F134526 ( deviceIdBase , device ) String deviceNameBase = device . getDisplayName ( ) ; \n\t\tint i = NUM00 ; \n\t\twhile ( isUserDevice ( device ) ) { \n\t\t\tString id = String . format ( Locale . getDefault ( ) , NUM00 , deviceIdBase , i ) ; \n\t\t\tString name = String . format ( Locale . getDefault ( ) , NUM00 , deviceNameBase , i ) ; \n\t\t\tdevice = cloneDeviceWithNewIdAndName ( device , id , name ) ; \n\t\t\t} \n\t\tourDeviceManager . addUserDevice ( device ) ; \n\t\t} \n\tourDeviceManager . saveUserDevices ( ) ; \n\t} \n"}, {"code": "public WritableRaster createCompatibleWritableRaster ( int w , int h ) { \n\tif ( w <= NUM00 || h <= NUM00 ) { \n\t\tthrow new RasterFormatException ( NUM00 + ( ( w <= NUM00 ) ? NUM00 : NUM00 ) ) ; \n\t\t} \n\tSampleModel sm = sampleModel . createCompatibleSampleModel ( w , h ) ; \n\treturn new ShortBandedRaster ( sm , $F69159 ) ; \n\t} \n"}, {"code": "public void write ( PrintWriter writer ) { \n\tfor ( $F119 ( i , count ) ) { \n\t\twriter . println ( keys [ i ] + NUM00 + values [ i ] ) ; \n\t\t} \n\t$F1206 ( writer ) } \n"}, {"code": "@ WorkerThread public synchronized int stopRecord $F72 { \n\tif ( mRecorder == null ) $F340596 ( mState , STATE_IDLE ) int length = - NUM00 ; \n\tswitch ( mState ) { \n\t\tcase STATE_RECORDING : try { \n\t\t\tThread . sleep ( STOP_AUDIO_RECORD_DELAY_MILLIS ) ; \n\t\t\t$F5191 ( mRecorder ) length = ( int ) ( $F32708 ( System , mSampleStart ) ) ; \n\t\t\t} \n\t\tcatch ( RuntimeException e ) { \n\t\t\tLog . w ( $F56761 ( TAG , e ) ) ; \n\t\t\t} \n\t\tcatch ( InterruptedException e ) { \n\t\t\tLog . w ( $F56761 ( TAG , e ) ) ; \n\t\t\t} \n\t\tcase STATE_PREPARED : case STATE_IDLE : $F1267 try $F8030 ( mRecorder ) catch ( RuntimeException e ) { \n\t\t\tLog . w ( $F56761 ( TAG , e ) ) ; \n\t\t\t} \n\t\t$F33833 ( mRecorder ) mRecorder = null ; \n\t\tmState = STATE_IDLE ; \n\t\t$F597 } \n\treturn length ; \n\t} \n"}, {"code": "public XMLParser ( final Class classToBeBound , final $F806 schemas ) throws XMLException $F2248 ( jc , JAXBContext , classToBeBound , marshaller , XMLSchemaUtils , schemas , unmarshaller , e ) "}, {"code": "private void abort ( Throwable t ) { \n\tthrowable = t ; \n\t} \n"}, {"code": "public static UserImpl signup ( Map $F24639 parameters , String ip , List < SignupError > errors ) { \n\tlog . entering ( NUM00 , NUM00 ) ; \n\tString email = getFirst ( parameters , NUM00 ) ; \n\tString displayName = getFirst ( parameters , NUM00 ) ; \n\tString photoUrl = getFirst ( parameters , NUM00 ) ; \n\tString password = getFirst ( parameters , NUM00 ) ; \n\tString confirm = getFirst ( parameters , NUM00 ) ; \n\tif ( Strings . isNullOrEmpty ( email ) || ! EmailValidator . isValid ( email ) ) { \n\t\terrors . add ( SignupError . INVALID_EMAIL ) ; \n\t\t} \n\tif $F4964 ( Strings , displayName ) { \n\t\terrors . add ( SignupError . EMPTY_DISPLAY_NAME ) ; \n\t\t} \n\tif $F4964 ( Strings , password ) { \n\t\terrors . add ( SignupError . INVALID_PASSWORD ) ; \n\t\t} \n\telse if $F2137 ( password , confirm ) { \n\t\terrors . add ( SignupError . CONFIRM_MISMATCH ) ; \n\t\t} \n\telse if $F3599 ( password ) { \n\t\terrors . add ( SignupError . INVALID_PASSWORD ) ; \n\t\t} \n\tPersistenceManager pm = pmf . getPersistenceManager ( ) ; \n\ttry { \n\t\tUserRecord record = findUserByEmail ( pm , email ) ; \n\t\tif ( record != null ) { \n\t\t\terrors . add ( SignupError . EMAIL_REGISTERED ) ; \n\t\t\t} \n\t\telse if $F2979 ( errors ) { \n\t\t\t$F35577 ( log , email ) record = new UserRecord $F72 ; \n\t\t\trecord . setEmail ( email ) ; \n\t\t\trecord . setDisplayName ( displayName ) ; \n\t\t\trecord . setPhotoUrl ( photoUrl ) ; \n\t\t\trecord . setPassword ( password ) ; \n\t\t\trecord . setTosAccepted ( _BOOL ) ; \n\t\t\trecord . setLastBigChangeTime ( System . currentTimeMillis ( ) ) ; \n\t\t\tpm . makePersistent ( record ) ; \n\t\t\tUserImpl user = createUserByRecord ( record ) ; \n\t\t\treturn user ; \n\t\t\t} \n\t\t} \n\t$F3229 ( pm ) log . exiting ( NUM00 , NUM00 ) ; \n\t$F1274 } \n"}, {"code": "$F1 public final String readNullTerminatedAsciiString $F72 { \n\t$F1538 ( baos ) byte b ; \n\twhile ( _BOOL ) { \n\t\tb = readByte ( ) ; \n\t\t$F7256 ( b ) baos . write ( b ) ; \n\t\t} \n\t$F1208 ( buf , baos ) $F91540 ( chrBuf , buf ) for ( $F1139 ( x , buf ) ) { \n\t\tchrBuf [ x ] = ( char ) buf [ x ] ; \n\t\t} \n\t$F33236 ( String , chrBuf ) } \n"}, {"code": "private void thresholdBlur ( Kernel kernel , $F2027 inPixels , $F2027 outPixels , int width , int height , boolean alpha ) { \n\t$F5415 matrix = kernel . getKernelData ( null ) ; \n\t$F2049 ( cols , kernel ) int cols2 = cols / NUM00 ; \n\tfor ( $F119 ( y , height ) ) { \n\t\tint ioffset = y * width ; \n\t\tint outIndex = y ; \n\t\tfor ( $F119 ( x , width ) ) { \n\t\t\tfloat r = NUM00 , g = NUM00 , b = NUM00 , a = NUM00 ; \n\t\t\tint moffset = cols2 ; \n\t\t\tint rgb1 = inPixels [ ioffset + x ] ; \n\t\t\t$F52249 ( a1 , rgb1 ) $F52249 ( r1 , rgb1 ) $F52249 ( g1 , rgb1 ) int b1 = rgb1 & NUM00 ; \n\t\t\tfloat af = NUM00 , rf = NUM00 , gf = NUM00 , bf = NUM00 ; \n\t\t\tfor ( $F142929 ( col , cols2 ) ) { \n\t\t\t\tfloat f = matrix [ moffset + col ] ; \n\t\t\t\tif ( f != NUM00 ) { \n\t\t\t\t\tint ix = x + col ; \n\t\t\t\t\tif ( ! ( NUM00 <= ix && ix < width ) ) ix = x ; \n\t\t\t\t\tint rgb2 = inPixels [ ioffset + ix ] ; \n\t\t\t\t\t$F52249 ( a2 , rgb2 ) $F52249 ( r2 , rgb2 ) $F52249 ( g2 , rgb2 ) int b2 = rgb2 & NUM00 ; \n\t\t\t\t\tint d ; \n\t\t\t\t\td = a1 - a2 ; \n\t\t\t\t\tif ( d >= - threshold && d <= threshold ) { \n\t\t\t\t\t\ta += f * a2 ; \n\t\t\t\t\t\taf += f ; \n\t\t\t\t\t\t} \n\t\t\t\t\td = r1 - r2 ; \n\t\t\t\t\tif ( d >= - threshold && d <= threshold ) { \n\t\t\t\t\t\tr += f * r2 ; \n\t\t\t\t\t\trf += f ; \n\t\t\t\t\t\t} \n\t\t\t\t\td = g1 - g2 ; \n\t\t\t\t\tif ( d >= - threshold && d <= threshold ) { \n\t\t\t\t\t\tg += f * g2 ; \n\t\t\t\t\t\tgf += f ; \n\t\t\t\t\t\t} \n\t\t\t\t\td = b1 - b2 ; \n\t\t\t\t\tif ( d >= - threshold && d <= threshold ) { \n\t\t\t\t\t\tb += f * b2 ; \n\t\t\t\t\t\tbf += f ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\ta = af == NUM00 ? a1 : a / af ; \n\t\t\tr = rf == NUM00 ? r1 : r / rf ; \n\t\t\tg = gf == NUM00 ? g1 : g / gf ; \n\t\t\tb = bf == NUM00 ? b1 : b / bf ; \n\t\t\tint ia = alpha ? PixelUtils . clamp ( $F127087 ( a ) ) : NUM00 ; \n\t\t\t$F339710 ( ir , PixelUtils , r ) $F339710 ( ig , PixelUtils , g ) $F339710 ( ib , PixelUtils , b ) outPixels [ outIndex ] = $F38048 ( ia , ir , ig , ib ) ; \n\t\t\toutIndex += height ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "void closeSilently ( ServerSocket socket ) $F87767 ( socket ) "}, {"code": "public ExpressionParserBuilder withProcess ( Process process ) $F5584 ( this , process ) "}, {"code": "void addAssociatedComponentAt ( int index , Component cmp ) { \n\tif ( comps == null ) { \n\t\t$F20637 ( comps ) } \n\tcomps . insertElementAt ( cmp , index ) ; \n\t} \n"}, {"code": "private static $F96 readClass ( final InputStream is ) throws IOException { \n\t$F31068 ( is ) $F143466 ( b , is ) int len = NUM00 ; \n\twhile ( _BOOL ) { \n\t\t$F7994 ( n , is , b , len ) if ( n == - NUM00 ) { \n\t\t\tif ( len < b . length ) { \n\t\t\t\t$F2175 ( c , len ) $F135 ( System , b , c , len ) b = c ; \n\t\t\t\t} \n\t\t\treturn b ; \n\t\t\t} \n\t\tlen += n ; \n\t\tif ( len == b . length ) { \n\t\t\t$F7468 ( last , is ) $F7879 ( last , b ) $F64222 ( c , b ) $F135 ( System , b , c , len ) $F11740 ( c , len , last ) b = c ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "static String stringFromPacket ( DatagramPacket packet ) { \n\treturn new String ( packet . getData ( ) , NUM00 , packet . getLength ( ) ) ; \n\t} \n"}, {"code": "private String readAttributeName ( boolean returnLowerCase ) { \n\tskipWhitespace ( ) ; \n\tint c = find ( ATTRIBUTE_NAME_TERMINATORS ) ; \n\tString forSubstring = returnLowerCase ? inputLowerCase : input ; \n\tString result = pos < c ? forSubstring . substring ( pos , c ) : null ; \n\tpos = c ; \n\treturn result ; \n\t} \n"}, {"code": "public boolean contains ( final Entity entity ) { \n\t$F1933 ( entity , _BOOL ) final IRPZone entityZone = entity . getZone ( ) ; \n\treturn zone . equals ( entityZone ) && zone . has ( entity . getID ( ) ) && shape . contains ( $F5048 ( entity ) ) ; \n\t} \n"}, {"code": "protected void checkOffscreenImage ( Dimension d ) { \n\tif ( doubleBuffered ) { \n\t\tif ( offscreen == null || offscreen . getWidth ( ) != d . width || offscreen . getHeight ( ) != d . height ) { \n\t\t\toffscreen = new BufferedImage ( d . width , d . height , BufferedImage . TYPE_INT_ARGB ) ; \n\t\t\t$F76571 ( offscreenG2d , offscreen ) } \n\t\t} \n\t} \n"}, {"code": "public void clear $F72 { \n\t$F101536 ( mLock , mGraphics ) postInvalidate ( ) ; \n\t} \n"}, {"code": "public void testSetObject_int_Object_int $F72 throws SQLException { \n\tPreparedStatement ps = null ; \n\ttry { \n\t\tString query = NUM00 ; \n\t\tps = conn . prepareStatement ( query ) ; \n\t\tStatement st = null ; \n\t\ttry { \n\t\t\tps . setObject ( NUM00 , Integer . MAX_VALUE , Types . INTEGER ) ; \n\t\t\t$F1699 ( ps ) $F2715 ( st , conn ) st . execute ( NUM00 + Integer . MAX_VALUE ) ; \n\t\t\t$F19095 ( rs , st ) assertEquals ( NUM00 , getCount ( rs ) ) ; \n\t\t\t} \n\t\t$F137812 ( st ) query = NUM00 ; \n\t\tps = conn . prepareStatement ( query ) ; \n\t\ttry { \n\t\t\tps . setObject ( NUM00 , NUM00 , Types . CHAR ) ; \n\t\t\t$F1699 ( ps ) $F2715 ( st , conn ) $F131050 ( st ) $F19095 ( rs , st ) assertEquals ( NUM00 , getCount ( rs ) ) ; \n\t\t\t} \n\t\t$F137812 ( st ) query = NUM00 ; \n\t\tps = conn . prepareStatement ( query ) ; \n\t\tps . setObject ( NUM00 , $F38005 , Types . DECIMAL ) ; \n\t\t$F1699 ( ps ) query = NUM00 ; \n\t\tps = conn . prepareStatement ( query ) ; \n\t\tDate $F40924 ( d ) ; \n\t\ttry { \n\t\t\tps . setObject ( NUM00 , d , Types . DATE ) ; \n\t\t\t$F1699 ( ps ) $F2715 ( st , conn ) st . execute ( NUM00 + d . getTime ( ) + NUM00 ) ; \n\t\t\t$F19095 ( rs , st ) assertEquals ( NUM00 , getCount ( rs ) ) ; \n\t\t\t} \n\t\t$F137812 ( st ) query = NUM00 ; \n\t\tps = conn . prepareStatement ( query ) ; \n\t\ttry { \n\t\t\tps . setObject ( NUM00 , NUM00 , Types . BLOB ) ; \n\t\t\t$F1699 ( ps ) } \n\t\t$F137812 ( st ) } \n\t$F137812 ( ps ) try { \n\t\tps . setObject ( NUM00 , Integer . MAX_VALUE , Types . INTEGER ) ; \n\t\tfail ( NUM00 ) ; \n\t\t} \n\t$F31184 } \n"}, {"code": "public void warning $F146212 ( e ) throws $F2253 { \n\t$F105671 ( formattedMsg , e ) SAXSourceLocator locator = getLocator ( ) ; \n\t$F1875 ( handler , m_stylesheetProcessor ) try { \n\t\thandler . warning ( new TransformerException ( formattedMsg , locator ) ) ; \n\t\t} \n\t$F2262 ( te ) } \n"}, {"code": "public static boolean checkChrootPath ( String zkHost , boolean create ) throws $F80658 { \n\t$F38676 ( containsChroot , zkHost , _BOOL ) $F973 ( log ) String chrootPath = zkHost . substring ( zkHost . indexOf ( NUM00 ) , zkHost . length ( ) ) ; \n\tSolrZkClient tmpClient = new SolrZkClient ( $F31599 ( zkHost ) , NUM00 * NUM00 ) ; \n\tboolean exists = tmpClient . exists ( chrootPath , _BOOL ) ; \n\tif ( ! exists && create ) { \n\t\ttmpClient . makePath ( chrootPath , _BOOL , _BOOL ) ; \n\t\texists = _BOOL ; \n\t\t} \n\t$F59 ( tmpClient ) return exists ; \n\t} \n"}, {"code": "public void addJob ( Runnable job ) $F207 ( mJobs , job ) "}, {"code": "public void addXValue ( String xVal ) { \n\tmXValAverageLength = ( mXValAverageLength + xVal . length ( ) ) / NUM00 ; \n\tmXVals . add ( xVal ) ; \n\t} \n"}, {"code": "$F60342 ( mSmallestWidthDp , mInPortrait ) "}, {"code": "public long timeSinceStart $F72 { \n\t$F657 ( currentTime , System ) return currentTime - startTime ; \n\t} \n"}, {"code": "public void fillRectRadialGradient ( Object graphics , int startColor , int endColor , int x , int y , int width , int height , float relativeX , float relativeY , float relativeSize ) { \n\tint centerX = ( int ) ( width * ( NUM00 - relativeX ) ) ; \n\tint centerY = ( int ) ( height * ( NUM00 - relativeY ) ) ; \n\tint size = ( int ) ( Math . min ( width , height ) * relativeSize ) ; \n\tint x2 = ( int ) ( width / NUM00 - ( size * relativeX ) ) ; \n\tint y2 = ( int ) ( height / NUM00 - ( size * relativeY ) ) ; \n\tboolean aa = isAntiAliased ( graphics ) ; \n\tsetAntiAliased ( graphics , _BOOL ) ; \n\tif ( cacheRadialGradients ( ) ) { \n\t\tObject r = findCachedGradient ( radialGradientCache , startColor , endColor , x , y , width , height , _BOOL , centerX , centerY , size ) ; \n\t\tif ( r != null ) { \n\t\t\tdrawImage ( graphics , r , x , y ) ; \n\t\t\t} \n\t\telse { \n\t\t\tr = createMutableImage ( width , height , NUM00 ) ; \n\t\t\tObject imageGraphics = getNativeGraphics ( r ) ; \n\t\t\tsetColor ( imageGraphics , endColor ) ; \n\t\t\tfillRect ( imageGraphics , NUM00 , NUM00 , width , height ) ; \n\t\t\tfillRadialGradientImpl ( imageGraphics , startColor , endColor , x2 , y2 , size , size , NUM00 , NUM00 ) ; \n\t\t\tdrawImage ( graphics , r , x , y ) ; \n\t\t\t$F155382 ( radialGradientCache ) storeCachedGradient ( r , radialGradientCache , startColor , endColor , x , y , _BOOL , centerX , centerY , size ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tsetColor ( graphics , endColor ) ; \n\t\tfillRect ( graphics , x , y , width , height ) ; \n\t\tfillRadialGradientImpl ( graphics , startColor , endColor , x + x2 , y + y2 , size , size , NUM00 , NUM00 ) ; \n\t\t} \n\t$F308 ( aa , setAntiAliased , graphics , _BOOL ) } \n"}, {"code": "public Formatter format ( Locale l , String format , Object ... args ) { \n\tensureOpen ( ) ; \n\tint last = - NUM00 ; \n\tint lasto = - NUM00 ; \n\tFormatString [ ] fsa = parse ( format ) ; \n\tfor ( $F1139 ( i , fsa ) ) { \n\t\tFormatString fs = fsa [ i ] ; \n\t\t$F115 ( index , fs ) try { \n\t\t\tswitch ( index ) { \n\t\t\t\t$F52533 fs . print ( null , l ) ; \n\t\t\t\t$F597 $F52533 if ( last < NUM00 || ( args != null && last > args . length - NUM00 ) ) throw new MissingFormatArgumentException $F3362 ( fs ) ; \n\t\t\t\tfs . print ( ( args == null ? null : args [ last ] ) , l ) ; \n\t\t\t\t$F597 $F3366 lasto ++ ; \n\t\t\t\tlast = lasto ; \n\t\t\t\tif ( args != null && lasto > args . length - NUM00 ) throw new MissingFormatArgumentException $F3362 ( fs ) ; \n\t\t\t\tfs . print ( ( args == null ? null : args [ lasto ] ) , l ) ; \n\t\t\t\t$F597 $F1267 last = index - NUM00 ; \n\t\t\t\tif ( args != null && last > args . length - NUM00 ) throw new MissingFormatArgumentException $F3362 ( fs ) ; \n\t\t\t\tfs . print ( ( args == null ? null : args [ last ] ) , l ) ; \n\t\t\t\t$F597 } \n\t\t\t} \n\t\tcatch ( IOException x ) { \n\t\t\tlastException = x ; \n\t\t\t} \n\t\t} \n\treturn this ; \n\t} \n"}, {"code": "public void testWriteReadEmpty $F72 throws Exception { \n\t$F121388 ( out ) $F7054 ( os , out ) os . writeObject ( empty ) ; \n\t$F164856 ( is , out ) ClusterPolicy copy = ( ClusterPolicy ) is . readObject ( ) ; \n\t$F59 ( is ) $F59 ( os ) $F318717 ( assertTrue , helper , empty , copy ) } \n"}, {"code": "DOMStringListImpl $F4374 ( params ) { \n\t$F20637 ( fStrings ) if ( params != null ) { \n\t\t$F68861 ( i , params , fStrings ) } \n\t} \n"}, {"code": "public Instant watermarkHold $F72 { \n\tlong min = Long . MAX_VALUE ; \n\tfor ( Instant hold : watermarkHolds . values ( ) ) { \n\t\tmin = Math . min ( min , hold . getMillis ( ) ) ; \n\t\t} \n\treturn new Instant ( min ) ; \n\t} \n"}, {"code": "$F1 public final boolean isCapPresent ( int cap ) { \n\treturn ( ( oglCaps . getCaps ( ) & cap ) != NUM00 ) ; \n\t} \n"}, {"code": "public static $F4203 MenuResult $F4203 again $F72 { \n\treturn new MenuResult $F200 ( Type . AGAIN , $F59440 ( Collections ) ) ; \n\t} \n"}, {"code": "$F1431 public V put ( K key , V value ) { \n\tfinal int hash = key . hashCode ( ) ; \n\tint index = indexOf ( key , hash ) ; \n\tif ( index >= NUM00 ) { \n\t\tindex = $F50054 ( index ) ; \n\t\tfinal V old = ( V ) mArray [ index ] ; \n\t\tmArray [ index ] = value ; \n\t\treturn old ; \n\t\t} \n\tindex = ~ index ; \n\tif ( mSize >= mHashes . length ) { \n\t\tfinal int n = mSize >= ( BASE_SIZE * NUM00 ) ? $F107995 ( mSize ) : ( mSize >= BASE_SIZE ? ( BASE_SIZE * NUM00 ) : BASE_SIZE ) ; \n\t\t$F92861 ( ohashes , mHashes ) $F108000 ( oarray , mArray ) allocArrays ( n ) ; \n\t\tif $F3305 ( mHashes ) { \n\t\t\t$F7057 ( System , ohashes , mHashes ) $F7057 ( System , oarray , mArray ) } \n\t\tfreeArrays ( ohashes , oarray , mSize ) ; \n\t\t} \n\tif ( index < mSize ) { \n\t\t$F27096 ( System , mHashes , index , mSize ) System . arraycopy ( mArray , index < < NUM00 , mArray , $F33569 ( index ) , ( mSize - index ) < < NUM00 ) ; \n\t\t} \n\tmHashes [ index ] = hash ; \n\tmArray [ index < < NUM00 ] = key ; \n\t$F107987 ( mArray , index ) = value ; \n\tmSize ++ ; \n\t$F1274 } \n"}, {"code": "public Long addNewUser ( String SID , String username , String userpass , String lastname , String firstname , String email , String additionalname , String street , String zip , String fax , long states_id , String town , long language_id , String baseURL ) throws AxisFault { \n\ttry { \n\t\tLong users_id = sessionManagement . checkSession ( SID ) ; \n\t\tLong user_level = userManagement . getUserLevelByID ( users_id ) ; \n\t\tif ( authLevelManagement . checkWebServiceLevel ( user_level ) ) { \n\t\t\tConfiguration conf = cfgManagement . getConfKey ( NUM00 , NUM00 ) ; \n\t\t\tString jName_timeZone = NUM00 ; \n\t\t\tif ( conf != null ) { \n\t\t\t\tjName_timeZone = conf . getConf_value ( ) ; \n\t\t\t\t} \n\t\t\tLong user_id = userManagement . registerUser ( username , userpass , lastname , firstname , email , $F4094 , street , additionalname , fax , zip , states_id , town , language_id , NUM00 , baseURL , _BOOL , jName_timeZone ) ; \n\t\t\tif ( user_id == null || user_id < NUM00 ) { \n\t\t\t\treturn user_id ; \n\t\t\t\t} \n\t\t\tUsers user = userManagement . getUserById ( user_id ) ; \n\t\t\tuser . setStatus ( NUM00 ) ; \n\t\t\tuser . setUpdatetime ( $F4094 ) ; \n\t\t\tuserManagement . updateUser ( user ) ; \n\t\t\treturn user_id ; \n\t\t\t} \n\t\telse { \n\t\t\t$F337950 } \n\t\t} \n\tcatch ( Exception err ) { \n\t\t$F5197 ( log , err ) throw new AxisFault $F1783 ( err ) ; \n\t\t} \n\t} \n"}, {"code": "public static void interpreterOnly ( Runnable runnable ) $F21688 ( runnable ) "}, {"code": "public DAddExtensionType ( JDialog parent , X509Extension extensions ) { \n\t$F36748 ( super , parent , Dialog ) $F15426 ( setTitle , res ) this . extensions = extensions ; \n\tinitComponents ( ) ; \n\t} \n"}, {"code": "private int hash ( GraphicsConfiguration config , int w , int h , Object ... args ) { \n\tint hash ; \n\thash = ( config != null ? config . hashCode ( ) : NUM00 ) ; \n\thash = NUM00 * hash + w ; \n\thash = NUM00 * hash + h ; \n\thash = NUM00 * hash + Arrays . deepHashCode ( args ) ; \n\treturn hash ; \n\t} \n"}, {"code": "$F48363 ( input , offset , len , flags , decoder , _BOOL , temp , System ) "}, {"code": "protected void paintText ( Graphics g , AbstractButton b , Rectangle textRect , String text ) { \n\tpaintText ( g , ( JComponent ) b , textRect , text ) ; \n\t} \n"}, {"code": "public static boolean usesSecondOperand ( final Integer mnemonic ) { \n\treturn ! mnemonic . equals ( ReilHelpers . _OPCODE_NOP ) && ! mnemonic . equals ( ReilHelpers . _OPCODE_BISZ ) && ! mnemonic . equals ( ReilHelpers . _OPCODE_STR ) && ! mnemonic . equals ( ReilHelpers . _OPCODE_STM ) && ! mnemonic . equals ( ReilHelpers . _OPCODE_LDM ) && ! mnemonic . equals ( ReilHelpers . _OPCODE_JCC ) ; \n\t} \n"}, {"code": "public RhythmGroup addOverlay ( RhythmOverlay overlay ) { \n\tmOverlays . add ( overlay ) ; \n\tif ( mCurrentOverlayIndex == NO_OVERLAY ) $F73598 ( selectOverlay ) return this ; \n\t} \n"}, {"code": "public $F1469 toCharArray $F72 { \n\t$F18064 ( buffer , count ) $F21535 ( System , value , offset , buffer , count ) return buffer ; \n\t} \n"}, {"code": "private $F5237 filterFiles ( final $F5237 toFilter , final String fileName ) { \n\tif ( fileName != null && toFilter != null ) { \n\t\t$F15885 ( fileAsFilter , fileName ) for ( File file : toFilter ) { \n\t\t\tif $F79396 ( file , fileAsFilter ) { \n\t\t\t\treturn new File [ ] { \n\t\t\t\t\tfileAsFilter } \n\t\t\t\t; \n\t\t\t\t} \n\t\t\t} \n\t\treturn new File $F380 ; \n\t\t} \n\treturn toFilter ; \n\t} \n"}, {"code": "public Fp ( ECCurve curve , ECFieldElement x , ECFieldElement y ) { \n\tthis ( curve , x , y , _BOOL ) ; \n\t} \n"}, {"code": "private void pullEvent $F72 { \n\tfinal int newScrollValue ; \n\tfinal int itemDimension ; \n\tfinal float initialMotionValue , lastMotionValue ; \n\tswitch ( getPullToRefreshScrollDirection ( ) ) { \n\t\tcase HORIZONTAL : initialMotionValue = mInitialMotionX ; \n\t\tlastMotionValue = mLastMotionX ; \n\t\t$F597 case VERTICAL : $F1267 initialMotionValue = mInitialMotionY ; \n\t\tlastMotionValue = mLastMotionY ; \n\t\t$F597 } \n\tswitch ( mCurrentMode ) { \n\t\tcase PULL_FROM_END : newScrollValue = Math . round ( Math . max ( initialMotionValue - lastMotionValue , NUM00 ) / FRICTION ) ; \n\t\titemDimension = getFooterSize ( ) ; \n\t\t$F597 case PULL_FROM_START : $F1267 newScrollValue = Math . round ( Math . min ( initialMotionValue - lastMotionValue , NUM00 ) / FRICTION ) ; \n\t\titemDimension = getHeaderSize ( ) ; \n\t\t$F597 } \n\tsetHeaderScroll ( newScrollValue ) ; \n\tif ( newScrollValue != NUM00 && ! isRefreshing ( ) ) { \n\t\tfloat scale = Math . abs ( newScrollValue ) / ( float ) itemDimension ; \n\t\tswitch ( mCurrentMode ) { \n\t\t\tcase PULL_FROM_END : mFooterLayout . onPull ( scale ) ; \n\t\t\t$F597 case PULL_FROM_START : $F1267 mHeaderLayout . onPull ( scale ) ; \n\t\t\t$F597 } \n\t\tif ( mState != State . PULL_TO_REFRESH && itemDimension >= Math . abs ( newScrollValue ) ) { \n\t\t\tsetState ( State . PULL_TO_REFRESH ) ; \n\t\t\t} \n\t\telse if ( ( mState == State . PULL_TO_REFRESH && itemDimension < Math . abs ( newScrollValue ) ) || ( mState == State . RESET && itemDimension < Math . abs ( newScrollValue ) ) ) { \n\t\t\tsetState ( State . RELEASE_TO_REFRESH ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private File writePrivateKeyFile $F72 throws GitException { \n\t$F140034 ( keyDirectory , rootFolder , host ) $F1909 ( keyDirectory ) $F140034 ( keyFile , keyDirectory , DEFAULT_KEY_NAME ) try $F64338 ( fos , keyFile ) $F4050 ( fos , sshKey ) catch ( IOException e ) { \n\t\t$F5197 ( LOG , e ) throw new GitException $F580 ; \n\t\t} \n\tprotectPrivateKeyFile ( keyFile ) ; \n\treturn keyFile ; \n\t} \n"}, {"code": "protected boolean drawLeftBorder $F6065 ( c , g , x , y , width , height ) { \n\tif ( super . drawLeftBorder ( c , g , x , y , width , height ) && frame . isResizable ( ) ) { \n\t\t$F109754 ( g , getFrameHighlight ) int topY = y + CORNER_SIZE ; \n\t\tg . drawLine ( x , topY , x + NUM00 , topY ) ; \n\t\tint bottomY = height - CORNER_SIZE ; \n\t\tg . drawLine ( x + NUM00 , bottomY , x + NUM00 , bottomY ) ; \n\t\t$F109754 ( g , getFrameShadow ) g . drawLine ( x + NUM00 , topY - NUM00 , x + NUM00 , topY - NUM00 ) ; \n\t\tg . drawLine ( x + NUM00 , bottomY - NUM00 , x + NUM00 , bottomY - NUM00 ) ; \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static boolean isFileReadable ( String fileName ) { \n\t$F15885 ( file , fileName ) return $F302235 ( file ) ; \n\t} \n"}, {"code": "public static String hintingSize ( Font font ) { \n\tint instrSize = NUM00 ; \n\tLocaTable locaTable = FontUtils . getLocaTable ( font ) ; \n\tGlyphTable glyfTable = FontUtils . getGlyphTable ( font ) ; \n\tfor ( int i = NUM00 ; \n\ti < locaTable . numGlyphs ( ) ; \n\ti ++ ) { \n\t\tGlyph glyph = glyfTable . glyph ( locaTable . glyphOffset ( i ) , locaTable . glyphLength ( i ) ) ; \n\t\tinstrSize += glyph . instructionSize ( ) ; \n\t\t} \n\tdouble percentage = instrSize * NUM00 / glyfTable . headerLength ( ) ; \n\treturn String . format ( NUM00 , instrSize , twoDecimalPlaces . format ( percentage ) ) ; \n\t} \n"}, {"code": "public static void premain ( String agentArgs , Instrumentation inst ) { \n\tinstrumentation = inst ; \n\t$F973 ( LOGGER ) checkForCorrectSetup ( ) ; \n\ttry { \n\t\t$F1431 InspectItClassLoader classLoader = new InspectItClassLoader ( new URL $F380 ) ; \n\t\t$F6969 agentClazz = classLoader . loadClass ( INSPECTIT_AGENT ) ; \n\t\t$F43121 constructor = agentClazz . getConstructor ( File . class ) ; \n\t\tObject realAgent = constructor . newInstance ( getInspectItAgentJarFileLocation ( ) ) ; \n\t\tAgent . agent = ( IAgent ) realAgent ; \n\t\tpreloadClasses ( ) ; \n\t\t$F973 ( LOGGER ) analyzeAlreadyLoadedClasses ( ) ; \n\t\tinst . addTransformer ( new JavaAgent $F72 ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tLOGGER . severe ( NUM00 ) ; \n\t\t$F301 ( e ) } \n\t} \n"}, {"code": "private static float systemPropertyValue ( String name ) { \n\t$F7601 ( floatString , System , name ) if ( floatString == null ) return Float . NaN ; \n\ttry { \n\t\treturn Float . parseFloat ( floatString ) ; \n\t\t} \n\tcatch ( NumberFormatException ex ) $F84174 ( String , name , floatString ) } \n"}, {"code": "@ ZapApiIgnore public boolean isConfirmRemoveProxyExcludedDomain $F72 { \n\treturn this . confirmRemoveProxyExcludeDomain ; \n\t} \n"}, {"code": "public FloatColumn ( int nrows , int capacity , float defaultValue ) { \n\tsuper ( $F41248 , new Float ( defaultValue ) ) ; \n\t$F49020 ( capacity , nrows ) $F189191 ( m_values , capacity ) Arrays . fill ( m_values , defaultValue ) ; \n\tm_size = nrows ; \n\t} \n"}, {"code": "private boolean addLocalKey ( KeyCacheObject key , AffinityTopologyVersion topVer , $F52042 distributedKeys ) throws IgniteCheckedException { \n\tGridDistributedCacheEntry entry = cctx . colocated ( ) . entryExx ( key , topVer , _BOOL ) ; \n\tassert ! entry . detached ( ) ; \n\tif ( ! cctx . isAll ( entry , filter ) ) { \n\t\t$F51620 ( log , entry ) onComplete ( _BOOL , _BOOL ) ; \n\t\treturn _BOOL ; \n\t\t} \n\tGridCacheMvccCandidate cand = addEntry ( entry ) ; \n\tif ( cand != null && ! cand . reentry ( ) ) distributedKeys . add ( key ) ; \n\treturn inTx ( ) && cand == null ; \n\t} \n"}, {"code": "public static boolean isSupplemental ( int c ) { \n\treturn $F56314 ( c ) ; \n\t} \n"}, {"code": "public void testRadix10Neg $F72 $F214959 ( value , radix , aNumber , result , assertTrue ) "}, {"code": "public synchronized int readInTestFromSUT $F72 { \n\tif $F2979 ( remoteBuffer ) $F7629 return remoteBuffer . poll ( ) & NUM00 ; \n\t} \n"}, {"code": "public SpatialIndex ( String shpFilename ) throws IOException { \n\tthis . shpFileName = shpFilename ; \n\tif $F6456 ( logger , Level ) { \n\t\t$F29117 ( logger , shpFilename ) } \n\t} \n"}, {"code": "public int invokeCompiler $F72 { \n\t$F53443 ( args , getExecArguments ) for ( $F2277 ( i , args ) ) { \n\t\t$F1729 ( arg , args , i ) if $F3106 ( arg ) { \n\t\t\t$F28924 ( fileName , arg ) args . remove ( i ) ; \n\t\t\toutputArgumentsToFile ( fileName , args ) ; \n\t\t\t$F597 } \n\t\t} \n\treturn ExecUtil . execute ( $F10148 ( args ) , System . out , System . err ) ; \n\t} \n"}, {"code": "static double fourNeighborsIDW ( SpatialGrid sg , double xCoord , double yCoord , double exp ) { \n\tdouble xDif = ( xCoord - sg . getXmin ( ) ) % sg . getResolution ( ) ; \n\tdouble yDif = ( yCoord - sg . getYmin ( ) ) % sg . getResolution ( ) ; \n\tif ( xDif == NUM00 && yDif == NUM00 ) { \n\t\treturn sg . getValue ( xCoord , yCoord ) ; \n\t\t} \n\tdouble x1 = xCoord - xDif ; \n\tdouble x2 = x1 + sg . getResolution ( ) ; \n\tdouble y1 = yCoord - yDif ; \n\tdouble y2 = y1 + sg . getResolution ( ) ; \n\tdouble d11 = Math . pow ( distance ( x1 , y1 , xCoord , yCoord ) , exp ) ; \n\tdouble d12 = Math . pow ( distance ( x1 , y2 , xCoord , yCoord ) , exp ) ; \n\tdouble d21 = Math . pow ( distance ( x2 , y1 , xCoord , yCoord ) , exp ) ; \n\tdouble d22 = Math . pow ( distance ( x2 , y2 , xCoord , yCoord ) , exp ) ; \n\tif ( xCoord == sg . getXmax ( ) ) { \n\t\treturn ( sg . getValue ( x1 , y1 ) / d11 + sg . getValue ( x1 , y2 ) / d12 ) / ( NUM00 / d11 + NUM00 / d12 ) ; \n\t\t} \n\tif ( yCoord == sg . getYmax ( ) ) { \n\t\treturn ( sg . getValue ( x1 , y1 ) / d11 + sg . getValue ( x2 , y1 ) / d21 ) / ( NUM00 / d11 + NUM00 / d21 ) ; \n\t\t} \n\treturn ( sg . getValue ( x1 , y1 ) / d11 + sg . getValue ( x1 , y2 ) / d12 + sg . getValue ( x2 , y1 ) / d21 + sg . getValue ( x2 , y2 ) / d22 ) / ( NUM00 / d11 + NUM00 / d12 + NUM00 / d21 + NUM00 / d22 ) ; \n\t} \n"}, {"code": "protected void preUpdateMenu $F72 $F845 "}, {"code": "public PojoValueField ( PropertyDescriptor desc ) { \n\tsuper ( desc ) ; \n\t} \n"}, {"code": "public UrlFilterRule ( String ruleText ) { \n\tsuper ( ruleText ) ; \n\tString urlRuleText = ruleText ; \n\tif ( StringUtils . startsWith ( urlRuleText , MASK_WHITE_LIST ) ) { \n\t\t$F11255 ( urlRuleText , MASK_WHITE_LIST ) whiteListRule = _BOOL ; \n\t\t} \n\tint optionsIndex = StringUtils . lastIndexOf ( urlRuleText , OPTIONS_DELIMITER ) ; \n\tif ( optionsIndex > - NUM00 ) $F45800 ( urlRuleText , optionsIndex ) urlRuleText = toPunycode ( urlRuleText ) ; \n\tboolean regexRule = urlRuleText . startsWith ( MASK_REGEX_RULE ) && urlRuleText . endsWith ( MASK_REGEX_RULE ) ; \n\tif ( ! regexRule ) { \n\t\tshortcut = findShortcut ( urlRuleText ) ; \n\t\t} \n\t} \n"}, {"code": "protected static $F7329 lsrRegister $F7334 ( offset , environment , instructions , registerNodeValue1 , registerNodeValue2 ) { \n\t$F7336 ( shifterOperand , environment ) $F7336 ( shifterCarryOut , environment ) $F7336 ( tmpVar1 , environment ) $F7336 ( tmpVar11 , environment ) $F7336 ( tmpVar2 , environment ) $F7336 ( tmpVar3 , environment ) $F7336 ( tmpVar4 , environment ) $F7336 ( tmpVar5 , environment ) $F7336 ( tmpVar6 , environment ) $F7336 ( tmpVar7 , environment ) $F7336 ( isZeroCondition , environment ) $F7336 ( shifterCarryOutTmp1 , environment ) $F7336 ( shifterCarryOutTmp2 , environment ) $F7336 ( shifterCarryOutTmp3 , environment ) $F7336 ( shifterCarryOutTmp4 , environment ) long baseOffset = offset ; \n\tinstructions . add ( ReilHelpers . createAnd ( baseOffset ++ , dWordSize , registerNodeValue2 , dWordSize , String . valueOf ( NUM00 ) , dWordSize , tmpVar1 ) ) ; \n\tinstructions . add ( ReilHelpers . createSub ( baseOffset ++ , dWordSize , String . valueOf ( NUM00 ) , dWordSize , tmpVar1 , dWordSize , tmpVar11 ) ) ; \n\tinstructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dWordSize , registerNodeValue1 , dWordSize , tmpVar11 , dWordSize , tmpVar2 ) ) ; \n\t$F7341 ( instructions , ReilHelpers , baseOffset , dWordSize , tmpVar2 , bitMaskAllBitsSet , shifterOperand ) $F453896 ( instructions , ReilHelpers , baseOffset , dWordSize , tmpVar11 , byteSize , isZeroCondition ) instructions . add ( ReilHelpers . createAnd ( baseOffset ++ , byteSize , isZeroCondition , byteSize , NUM00 , byteSize , shifterCarryOutTmp1 ) ) ; \n\tinstructions . add ( ReilHelpers . createXor ( baseOffset ++ , dWordSize , tmpVar11 , wordSize , String . valueOf ( NUM00 ) , dWordSize , tmpVar3 ) ) ; \n\t$F453896 ( instructions , ReilHelpers , baseOffset , dWordSize , tmpVar3 , byteSize , isZeroCondition ) instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dWordSize , registerNodeValue1 , dWordSize , thirtyOneSet , byteSize , tmpVar4 ) ) ; \n\t$F7341 ( instructions , ReilHelpers , baseOffset , byteSize , isZeroCondition , tmpVar4 , shifterCarryOutTmp2 ) $F7341 ( instructions , ReilHelpers , baseOffset , dWordSize , tmpVar11 , notThirtyOneSet , tmpVar5 ) $F453896 ( instructions , ReilHelpers , baseOffset , dWordSize , tmpVar5 , byteSize , isZeroCondition ) instructions . add ( ReilHelpers . createSub ( baseOffset ++ , dWordSize , tmpVar11 , dWordSize , oneSet , dWordSize , tmpVar6 ) ) ; \n\tinstructions . add ( ReilHelpers . createSub ( baseOffset ++ , dWordSize , zeroSet , dWordSize , tmpVar6 , dWordSize , tmpVar6 ) ) ; \n\tinstructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dWordSize , registerNodeValue1 , dWordSize , tmpVar6 , byteSize , tmpVar7 ) ) ; \n\t$F7341 ( instructions , ReilHelpers , baseOffset , byteSize , isZeroCondition , tmpVar7 , shifterCarryOutTmp3 ) $F43825 ( instructions , ReilHelpers , baseOffset , byteSize , shifterCarryOutTmp1 , shifterCarryOutTmp2 , shifterCarryOutTmp4 ) $F43825 ( instructions , ReilHelpers , baseOffset , byteSize , shifterCarryOutTmp3 , shifterCarryOutTmp4 , shifterCarryOut ) $F7348 ( shifterOperand , shifterCarryOut ) } \n"}, {"code": "public static boolean isDrmConvertNeeded ( String mimetype ) $F23588 ( MIMETYPE_DRM_MESSAGE , mimetype ) "}, {"code": "public static String pad $F41200 ( original , length , padChar ) { \n\tif ( original . length ( ) >= length ) return original ; \n\t$F7542 ( sb , original ) while $F62004 ( sb , length ) $F288 ( sb , padChar ) $F92 ( sb ) } \n"}, {"code": "public void propertyChange ( PropertyChangeEvent evt ) { \n\tString propName = evt . getPropertyName ( ) ; \n\tif ( propName == MapBean . CursorProperty ) { \n\t\tfallbackMapBeanCursor = ( ( Cursor ) evt . getNewValue ( ) ) ; \n\t\t} \n\telse { \n\t\tif ( propName == MouseDelegator . ActiveModeProperty ) { \n\t\t\tMapMouseMode mmm = ( MapMouseMode ) evt . getNewValue ( ) ; \n\t\t\tsetResetCursor ( mmm . getModeCursor ( ) ) ; \n\t\t\t} \n\t\telse if ( propName == MapBean . LayersProperty ) { \n\t\t\tresetForLayers ( ( $F62515 ) evt . getNewValue ( ) , ( $F62515 ) evt . getOldValue ( ) ) ; \n\t\t\t} \n\t\telse if ( propName != MapBean . ProjectionProperty ) $F932 setAllLabels ( fudgeString ) ; \n\t\t} \n\tinitToolTip ( ) ; \n\t} \n"}, {"code": "private void checkForNight ( final ZonedDateTime TIME ) { \n\tint hour = TIME . getHour ( ) ; \n\tint minute = TIME . getMinute ( ) ; \n\tif ( NUM00 <= hour && minute >= NUM00 && hour <= NUM00 && minute <= NUM00 || NUM00 <= hour && minute <= NUM00 && hour <= NUM00 && minute <= NUM00 ) { \n\t\t$F140642 ( isNightMode ) setNightMode ( _BOOL ) ; \n\t\t} \n\telse { \n\t\t$F15308 ( isNightMode ) setNightMode ( _BOOL ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public int calculateOffsetY $F72 { \n\treturn - ( int ) ( Math . sin ( this . angle ) * this . distance ) - this . shadowSize ; \n\t} \n"}, {"code": "private $F1986 concatenateSamples ( final $F1986 x , final $F1986 y ) { \n\tfinal $F1986 z = new double $F12348 ( x , y ) ; \n\t$F7057 ( System , x , z ) $F11244 ( System , y , z , x ) return z ; \n\t} \n"}, {"code": "$F1 public void drawSeries $F36949 ( canvas , paint , points , renderer , yAxisValue , seriesIndex , startIndex ) { \n\t$F14782 ( paint , renderer ) final float stroke = paint . getStrokeWidth ( ) ; \n\tif ( renderer . isFillPoints ( ) ) { \n\t\t$F5597 ( paint , Style ) } \n\telse { \n\t\t$F373222 ( paint , renderer ) $F41630 ( paint , Style ) } \n\t$F2199 ( length , points ) PointStyle ps = renderer . getPointStyle ( ) ; \n\tif ( ps == PointStyle . X ) { \n\t\t$F373222 ( paint , renderer ) $F373230 ( i , length , drawX , canvas , paint , points ) } \n\telse { \n\t\tif ( ps == PointStyle . CIRCLE ) { \n\t\t\t$F373230 ( i , length , drawCircle , canvas , paint , points ) } \n\t\telse { \n\t\t\tif ( ps == PointStyle . TRIANGLE ) { \n\t\t\t\t$F12457 ( path ) for ( $F6225 ( i , length ) ) { \n\t\t\t\t\t$F373240 ( drawTriangle , canvas , paint , path , points , i ) } \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tif ( ps == PointStyle . SQUARE ) { \n\t\t\t\t\t$F373230 ( i , length , drawSquare , canvas , paint , points ) } \n\t\t\t\telse { \n\t\t\t\t\tif ( ps == PointStyle . DIAMOND ) { \n\t\t\t\t\t\t$F12457 ( path ) for ( $F6225 ( i , length ) ) { \n\t\t\t\t\t\t\t$F373240 ( drawDiamond , canvas , paint , path , points , i ) } \n\t\t\t\t\t\t} \n\t\t\t\t\telse { \n\t\t\t\t\t\tif ( ps == PointStyle . POINT ) { \n\t\t\t\t\t\t\tfor ( $F6225 ( i , length ) ) { \n\t\t\t\t\t\t\t\tcanvas . drawPoint ( points . get ( i ) , points . get ( i + NUM00 ) , paint ) ; \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tpaint . setStrokeWidth ( stroke ) ; \n\t} \n"}, {"code": "public final void pushSubContextList ( SubContextList iter ) $F31742 ( m_axesIteratorStack , iter ) "}, {"code": "public String handleWord ( String aWord ) { \n\t$F1150 ( m , conditionPattern , aWord ) if ( m != null && m . matches ( ) ) { \n\t\tif ( type . equals ( AffixType . PREFIX ) ) $F4915 ( handlePrefix , aWord ) else if ( type . equals ( AffixType . SUFFIX ) ) $F4915 ( handleSuffix , aWord ) } \n\t$F1274 } \n"}, {"code": "public static void round ( Calendar c , String unit ) { \n\t$F99426 ( uu , CALENDAR_UNITS , unit ) if ( null == uu ) $F18931 ( unit ) $F79839 ( u , uu ) switch ( u ) { \n\t\tcase Calendar . YEAR : c . clear ( Calendar . MONTH ) ; \n\t\tcase Calendar . MONTH : c . clear ( Calendar . DAY_OF_MONTH ) ; \n\t\tc . clear ( Calendar . DAY_OF_WEEK ) ; \n\t\tc . clear ( Calendar . DAY_OF_WEEK_IN_MONTH ) ; \n\t\tc . clear ( Calendar . DAY_OF_YEAR ) ; \n\t\tc . clear ( Calendar . WEEK_OF_MONTH ) ; \n\t\tc . clear ( Calendar . WEEK_OF_YEAR ) ; \n\t\tcase Calendar . DATE : c . clear ( Calendar . HOUR_OF_DAY ) ; \n\t\tc . clear ( Calendar . HOUR ) ; \n\t\tc . clear ( Calendar . AM_PM ) ; \n\t\tcase Calendar . HOUR_OF_DAY : c . clear ( Calendar . MINUTE ) ; \n\t\tcase Calendar . MINUTE : c . clear ( Calendar . SECOND ) ; \n\t\tcase Calendar . SECOND : $F36882 ( c , Calendar ) $F597 $F1267 throw new IllegalStateException ( NUM00 + u + NUM00 + unit ) ; \n\t\t} \n\t} \n"}, {"code": "private static final $F1469 growBuffer $F21196 ( dest , index , size ) { \n\t$F18064 ( copy , size ) $F263472 ( index , System , dest , copy ) return copy ; \n\t} \n"}, {"code": "public boolean sync $F72 { \n\t$F1933 ( ulog , _BOOL ) log . info ( msg ( ) + NUM00 + replicas + NUM00 + nUpdates ) ; \n\tif ( ! ( ulog . getState ( ) == UpdateLog . State . ACTIVE || ulog . getState ( ) == UpdateLog . State . REPLAYING ) ) { \n\t\tlog . error ( msg ( ) + NUM00 + ulog ) ; \n\t\t} \n\tif ( debug ) { \n\t\tif ( startingVersions != null ) { \n\t\t\tlog . debug ( msg ( ) + NUM00 + startingVersions . size ( ) + NUM00 + startingVersions ) ; \n\t\t\t} \n\t\t} \n\tfor ( String replica : replicas ) { \n\t\trequestVersions ( replica ) ; \n\t\t} \n\trecentUpdates = ulog . getRecentUpdates ( ) ; \n\ttry { \n\t\tourUpdates = recentUpdates . getVersions ( nUpdates ) ; \n\t\t} \n\t$F3229 ( recentUpdates ) Collections . sort ( ourUpdates , absComparator ) ; \n\tif ( startingVersions != null ) { \n\t\tif $F10471 ( startingVersions ) $F95123 ( log , _BOOL ) Collections . sort ( startingVersions , absComparator ) ; \n\t\tourLowThreshold = percentile ( startingVersions , NUM00 ) ; \n\t\tourHighThreshold = percentile ( startingVersions , NUM00 ) ; \n\t\tlong smallestNewUpdate = Math . abs ( $F7661 ( ourUpdates ) ) ; \n\t\tif ( Math . abs ( startingVersions . get ( NUM00 ) ) < smallestNewUpdate ) { \n\t\t\tlog . warn ( msg ( ) + NUM00 ) ; \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t$F27145 $F10252 ( newList , ourUpdates ) ; \n\t\tfor ( Long ver : startingVersions ) { \n\t\t\tif $F7637 ( Math , ver , smallestNewUpdate ) $F207 ( newList , ver ) } \n\t\tourUpdates = newList ; \n\t\t} \n\telse { \n\t\tif $F3817 ( ourUpdates ) { \n\t\t\tourLowThreshold = percentile ( ourUpdates , NUM00 ) ; \n\t\t\tourHighThreshold = percentile ( ourUpdates , NUM00 ) ; \n\t\t\t} \n\t\telse { \n\t\t\tlog . info ( msg ( ) + NUM00 ) ; \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\t$F28907 ( ourUpdateSet , ourUpdates ) ; \n\t$F28907 ( requestedUpdateSet , ourUpdates ) ; \n\tfor ( $F589 ) { \n\t\tShardResponse srsp = shardHandler . takeCompletedOrError ( ) ; \n\t\t$F12576 ( srsp ) boolean success = handleResponse ( srsp ) ; \n\t\tif ( ! success ) { \n\t\t\tlog . info ( msg ( ) + NUM00 ) ; \n\t\t\tshardHandler . cancelAll ( ) ; \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\tlog . info ( msg ( ) + NUM00 ) ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static String stripFileProtocol ( String uriString ) { \n\t$F3110 ( uriString ) return uriString ; \n\t} \n"}, {"code": "private void contentSpecTree ( int contentSpecIndex , XMLContentSpec contentSpec , ChildrenList children ) { \n\tgetContentSpec ( contentSpecIndex , contentSpec ) ; \n\tif ( contentSpec . type == XMLContentSpec . CONTENTSPECNODE_LEAF || ( contentSpec . type & NUM00 ) == XMLContentSpec . CONTENTSPECNODE_ANY || ( contentSpec . type & NUM00 ) == XMLContentSpec . CONTENTSPECNODE_ANY_LOCAL || ( contentSpec . type & NUM00 ) == XMLContentSpec . CONTENTSPECNODE_ANY_OTHER ) { \n\t\tif ( children . length == children . qname . length ) { \n\t\t\tQName [ ] newQName = new QName $F10562 ( children ) ; \n\t\t\tSystem . arraycopy ( children . qname , NUM00 , newQName , NUM00 , children . length ) ; \n\t\t\tchildren . qname = newQName ; \n\t\t\t$F2027 newType = new int $F10562 ( children ) ; \n\t\t\tSystem . arraycopy ( children . type , NUM00 , newType , NUM00 , children . length ) ; \n\t\t\tchildren . type = newType ; \n\t\t\t} \n\t\tchildren . qname [ children . length ] = new QName ( null , $F99630 ( contentSpec ) , $F99630 ( contentSpec ) , ( String ) contentSpec . otherValue ) ; \n\t\tchildren . type [ children . length ] = contentSpec . type ; \n\t\tchildren . length ++ ; \n\t\t$F665 } \n\tfinal int leftNode = contentSpec . value != null ? ( ( $F2027 ) ( contentSpec . value ) ) [ NUM00 ] : - NUM00 ; \n\tint rightNode = - NUM00 ; \n\tif ( contentSpec . otherValue != null ) rightNode = ( ( $F2027 ) ( contentSpec . otherValue ) ) [ NUM00 ] ; \n\telse $F665 if ( contentSpec . type == XMLContentSpec . CONTENTSPECNODE_CHOICE || contentSpec . type == XMLContentSpec . CONTENTSPECNODE_SEQ ) { \n\t\tcontentSpecTree ( leftNode , contentSpec , children ) ; \n\t\tcontentSpecTree ( rightNode , contentSpec , children ) ; \n\t\t$F665 } \n\tif ( contentSpec . type == XMLContentSpec . CONTENTSPECNODE_ZERO_OR_ONE || contentSpec . type == XMLContentSpec . CONTENTSPECNODE_ZERO_OR_MORE || contentSpec . type == XMLContentSpec . CONTENTSPECNODE_ONE_OR_MORE ) $F55644 ( contentSpecTree , leftNode , contentSpec , children ) throw new RuntimeException ( NUM00 + contentSpec . type ) ; \n\t} \n"}, {"code": "protected JTextField createEditorComponent $F72 { \n\tJTextField editor = new BorderlessTextField $F163565 ; \n\t$F55355 ( editor ) return editor ; \n\t} \n"}, {"code": "private void addArg ( String key , Object value ) { \n\t$F155382 ( requestArguments ) $F5768 ( value , key ) $F72524 ( post , setWriteRequest , _BOOL ) requestArguments . put ( key , value ) ; \n\t} \n"}, {"code": "public static $F1986 readFileColumn $F36827 ( filename , columnIdx , sizeLimit ) throws $F35763 { \n\t$F77510 ( path , Paths , filename ) if ( ! $F97092 ( Files , path ) ) $F268590 BufferedReader br = new BufferedReader ( new InputStreamReader ( new FileInputStream ( filename ) , NUM00 ) ) ; \n\treturn readTS ( br , columnIdx , sizeLimit ) ; \n\t} \n"}, {"code": "private void startReader ( ConnectionTable connTable ) { \n\tAssert . assertTrue ( ! this . isRunning ) ; \n\tstopped = _BOOL ; \n\tthis . isRunning = _BOOL ; \n\tconnTable . executeCommand ( this ) ; \n\t} \n"}, {"code": "public static boolean isCompactionRequiredForTable ( String metaFolderPath ) { \n\tString minorCompactionStatusFile = metaFolderPath + CarbonCommonConstants . FILE_SEPARATOR + CarbonCommonConstants . minorCompactionRequiredFile ; \n\tString majorCompactionStatusFile = metaFolderPath + CarbonCommonConstants . FILE_SEPARATOR + CarbonCommonConstants . majorCompactionRequiredFile ; \n\ttry { \n\t\tif ( FileFactory . isFileExist ( minorCompactionStatusFile , FileFactory . getFileType ( minorCompactionStatusFile ) ) || FileFactory . isFileExist ( majorCompactionStatusFile , FileFactory . getFileType ( majorCompactionStatusFile ) ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\tcatch ( IOException e ) $F50614 ( LOGGER , e ) return _BOOL ; \n\t} \n"}, {"code": "BigInteger copy $F72 { \n\tprepareJavaRepresentation ( ) ; \n\t$F4120 ( copyDigits , numberLength ) $F135 ( System , digits , copyDigits , numberLength ) return new BigInteger ( sign , numberLength , copyDigits ) ; \n\t} \n"}, {"code": "public void addExcludedClass ( String className ) $F207 ( mExcludedClasses , className ) "}, {"code": "public BundleMessageSource ( Locale locale ) { \n\t_messages = ResourceBundle . getBundle ( BASE_NAME , locale ) ; \n\t} \n"}, {"code": "$F73354 ( curViewBound , curViewWidth , right , mClipPadding ) "}, {"code": "private void createEditPanel $F72 { \n\t$F26681 ( editPanel ) add ( editPanel , BorderLayout . CENTER ) ; \n\tCardLayout cardlayout = new CardLayout $F72 ; \n\teditPanel . setLayout ( cardlayout ) ; \n\tif ( colourRampMap != null ) { \n\t\tfor ( ColourRampPanelInterface data : colourRampMap . keySet ( ) ) { \n\t\t\tdata . setParent ( this ) ; \n\t\t\tString key = data . getTitle ( ) ; \n\t\t\teditPanel . add ( data . getPanel ( ) , key ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static long atol ( String s ) { \n\tint i = NUM00 ; \n\twhile ( i < s . length ( ) && $F1750 ( Character , s , i ) ) i ++ ; \n\tif $F61616 ( i , s ) { \n\t\tif ( $F6991 ( i , s ) && ( $F10825 ( s , i ) || $F10825 ( s , i ) ) ) return parseLong ( s . substring ( i + NUM00 ) , NUM00 ) ; \n\t\telse return parseLong ( s , NUM00 ) ; \n\t\t} \n\telse return parseLong ( s , NUM00 ) ; \n\t} \n"}, {"code": "public Object eval ( Reader reader , ScriptEngine engine ) throws ScriptException { \n\treturn engine . eval ( reader ) ; \n\t} \n"}, {"code": "$F38750 ( input , encoding , toInputStream ) "}, {"code": "public void classForName ( SootMethod container , Stmt forNameInvokeStmt ) { \n\t$F2689 classNames = reflectionInfo . classForNameClassNames ( container ) ; \n\tif $F4251 ( classNames ) { \n\t\tregisterGuard ( container , forNameInvokeStmt , NUM00 ) ; \n\t\t} \n\telse { \n\t\tfor ( String clsName : classNames ) { \n\t\t\tconstantForName ( clsName , container , forNameInvokeStmt ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private AbstractRenderer createRenderer ( JTabbedPane tabbedPane ) { \n\treturn hasEmbeddedTabs ( ) ? AbstractRenderer . createEmbeddedRenderer ( tabbedPane ) : AbstractRenderer . createRenderer ( tabPane ) ; \n\t} \n"}, {"code": "public void readMap ( InputStream inputStream , MapBuilder builder ) { \n\ttry { \n\t\tparseMap ( inputStream , builder ) ; \n\t\tif ( builder . nodeRefsWithoutDefsAdded ( ) ) $F18143 ( LOG ) } \n\tcatch ( SAXParseException e ) { \n\t\tthrow new OsmRuntimeException ( NUM00 + NUM00 + e . getPublicId ( ) + NUM00 + e . getSystemId ( ) + NUM00 + e . getLineNumber ( ) + NUM00 + e . getColumnNumber ( ) + NUM00 , e ) ; \n\t\t} \n\tcatch ( SAXException e ) { \n\t\tthrow new OsmRuntimeException ( NUM00 , e ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\tthrow new OsmRuntimeException ( NUM00 , e ) ; \n\t\t} \n\tfinally { \n\t\tif ( inputStream != null ) { \n\t\t\ttry $F881 ( inputStream ) catch ( IOException e ) $F55754 ( LOG , Level , e ) } \n\t\t} \n\t} \n"}, {"code": "private void processComment $F72 { \n\ttemplateReader . nextCharacter ( ) ; \n\tif ( templateReader . startsWith ( syntax . getDocumentTypeOpening ( ) ) ) $F10990 ( processSchemaComment ) else $F51521 ( nestedComments , processNestedComment ) while ( templateReader . hasNextCharacter ( ) ) { \n\t\tfinal char commentCharacter = templateReader . nextCharacter ( ) ; \n\t\tif ( isCommentClosingMarker ( commentCharacter ) && templateReader . hasNextCharacter ( ) && templateReader . peekCharacter ( ) == syntax . getTagClosing ( ) ) { \n\t\t\ttemplateReader . nextCharacter ( ) ; \n\t\t\t$F597 } \n\t\t} \n\t} \n"}, {"code": "private void emitPermutationsAppCache ( TreeLogger logger , LinkerContext context , ArtifactSet artifacts , String startScreenId , OfflineScreen offlineScreen ) throws UnableToCompleteException { \n\tfor ( EmittedArtifact emitted : artifacts . find ( EmittedArtifact . class ) ) { \n\t\tif ( emitted . getVisibility ( ) == Visibility . Private ) $F1448 String pathName = emitted . getPartialPath ( ) ; \n\t\tif ( acceptCachedResource ( pathName ) ) { \n\t\t\t$F432422 ( allArtifacts , pathName , cachedArtifacts ) } \n\t\t} \n\tSet < ArtifactsGroup > keySet = artifactsByGroup . keySet ( ) ; \n\tfor ( ArtifactsGroup group : keySet ) { \n\t\t$F48768 ( set , artifactsByGroup , group ) set . addAll ( cachedArtifacts ) ; \n\t\tartifacts . add ( createCacheManifest ( context , logger , set , group . getGroupId ( ) , startScreenId , offlineScreen ) ) ; \n\t\tartifacts . add ( createCacheManifestLoader ( context , logger , group . getGroupId ( ) , startScreenId ) ) ; \n\t\t} \n\t} \n"}, {"code": "public final boolean isRegistered $F72 { \n\treturn $F132005 ( canonicalName ) ; \n\t} \n"}, {"code": "public License $F2236 ( filename , text ) { \n\t$F896 ( filename ) $F27731 ( filename ) this . filename = filename ; \n\t$F896 ( text ) $F27731 ( text ) this . text = text ; \n\t} \n"}, {"code": "protected static void processExplorerProps ( File propsFile ) { \n\ttry { \n\t\t$F2697 ( expProps ) BufferedInputStream $F20277 ( bi , propsFile ) ; \n\t\texpProps . load ( bi ) ; \n\t\t$F59 ( bi ) bi = null ; \n\t\t$F113927 keys = expProps . keySet ( ) ; \n\t\t$F91960 keysI = keys . iterator ( ) ; \n\t\twhile $F2921 ( keysI ) { \n\t\t\t$F2778 ( key , keysI ) if $F2364 ( key ) { \n\t\t\t\tString existingVal = ExplorerDefaults . get ( key , NUM00 ) ; \n\t\t\t\tif $F4012 ( existingVal ) { \n\t\t\t\t\tString replacePolicy = expProps . getProperty ( key + NUM00 ) ; \n\t\t\t\t\tif $F22 ( replacePolicy ) { \n\t\t\t\t\t\tif $F21935 ( replacePolicy ) { \n\t\t\t\t\t\t\t$F7601 ( newVal , expProps , key ) ExplorerDefaults . set ( key , newVal ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\telse { \n\t\t\t\t\t\t\t$F7601 ( newVal , expProps , key ) if $F283026 ( existingVal , newVal ) { \n\t\t\t\t\t\t\t\tnewVal = existingVal + NUM00 + newVal ; \n\t\t\t\t\t\t\t\tExplorerDefaults . set ( key , newVal ) ; \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\telse { \n\t\t\t\t\t\t$F7601 ( newVal , expProps , key ) if $F283026 ( existingVal , newVal ) { \n\t\t\t\t\t\t\tnewVal = existingVal + NUM00 + newVal ; \n\t\t\t\t\t\t\tExplorerDefaults . set ( key , newVal ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\t$F7601 ( newVal , expProps , key ) ExplorerDefaults . set ( key , newVal ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F15720 } \n"}, {"code": "long calculateMidEntry ( long loVal , long hiVal , final double dfp , long loEntry , long hiEntry ) { \n\tfinal double dhi = ( double ) hiEntry ; \n\tfinal double dlo = ( double ) loEntry ; \n\tfinal double dhiVal = ( double ) hiVal ; \n\tfinal double dloVal = ( double ) loVal ; \n\tlong midEntry = loEntry + ( long ) ( ( dhi - dlo ) * ( dfp - dloVal ) / ( dhiVal - dloVal ) ) ; \n\tif ( midEntry == hiEntry ) { \n\t\tmidEntry -- ; \n\t\t} \n\treturn midEntry ; \n\t} \n"}, {"code": "$F1431 protected int hashFields ( int hash , Map < FieldDescriptor , Object > map ) { \n\tfor ( Map . Entry < FieldDescriptor , Object > entry : map . entrySet ( ) ) { \n\t\tFieldDescriptor field = entry . getKey ( ) ; \n\t\t$F21137 ( value , entry ) hash = ( NUM00 * hash ) + field . getNumber ( ) ; \n\t\tif ( field . getType ( ) != FieldDescriptor . Type . ENUM ) { \n\t\t\thash = ( NUM00 * hash ) + value . hashCode ( ) ; \n\t\t\t} \n\t\telse if $F102310 ( field ) { \n\t\t\tList < ? extends EnumLite > list = ( List < ? extends EnumLite > ) value ; \n\t\t\thash = ( NUM00 * hash ) + hashEnumList ( list ) ; \n\t\t\t} \n\t\telse { \n\t\t\thash = ( NUM00 * hash ) + hashEnum ( ( EnumLite ) value ) ; \n\t\t\t} \n\t\t} \n\treturn hash ; \n\t} \n"}, {"code": "public DashboardServiceHelper $F72 { \n\tattributesRequireUpdate . add ( DASHBOARD_CLASS_NAME ) ; \n\tattributesRequireUpdate . add ( DASHBOARD_NAME ) ; \n\tattributesRequireUpdate . add ( DASHBOARD_DISPLAY_NAME ) ; \n\tattributesRequireUpdate . add ( DASHBOARD_ICON ) ; \n\tattributesRequireUpdate . add ( DASHBOARD_LOGIN ) ; \n\tattributesRequireUpdate . add ( ICF_IDENTIFIER ) ; \n\tattributes . addAll ( attributesRequireUpdate ) ; \n\t} \n"}, {"code": "public static String javaUtilRegexEscape ( String s ) { \n\tif $F8908 ( s ) $F34654 ( s ) $F83 ( sb ) for ( $F1088 ( i , s ) ) { \n\t\t$F84 ( sb ) $F4137 ( sb , s , i ) } \n\t$F92 ( sb ) } \n"}, {"code": "public void forgetFfmpegPath $F72 $F1717 ( settings , SETTINGS_FFMPEG_PATH , FFMPEG_PATH_UNSET ) "}, {"code": "$F1 public void printWarning ( final String message ) { \n\tprintWarning ( message , preferenceStore . getBoolean ( UIPreferenceConstants . CONSOLE_SHOW_ON_NEW_WARNING ) ) ; \n\t} \n"}, {"code": "public static String revertNewLines ( String string ) { \n\tint index ; \n\t$F280 ( newStringBuffer ) while $F48458 ( index , string ) { \n\t\t$F52803 ( index , newStringBuffer , string ) $F84 ( newStringBuffer ) $F52804 ( index , string ) } \n\tnewStringBuffer . append ( string ) ; \n\t$F6947 ( string , newStringBuffer ) $F7398 ( newStringBuffer ) while $F48458 ( index , string ) { \n\t\t$F52803 ( index , newStringBuffer , string ) $F84 ( newStringBuffer ) $F52804 ( index , string ) } \n\tnewStringBuffer . append ( string ) ; \n\t$F92 ( newStringBuffer ) } \n"}, {"code": "public void pathValuesToPixel ( $F77502 paths ) $F155016 ( i , paths , pathValueToPixel ) "}, {"code": "$F1 public void onInsertComplete ( int taskId , Object cookie , long insertRowId ) { \n\tif ( taskId == AppConstants . QueryTokens . INSERT_WALLPOST && insertRowId != - NUM00 ) { \n\t\t$F26334 ( Logger , TAG , insertRowId ) } \n\t} \n"}, {"code": "protected void parseList ( $F5 list , String text ) { \n\t$F725 ( list ) $F17727 ( st , text ) while $F1444 ( st ) { \n\t\t$F14952 ( line , st ) $F28871 ( list , line ) } \n\t} \n"}, {"code": "protected $F27878 splitAssignments ( Node node ) { \n\tif ( node instanceof AssignmentNode ) { \n\t\t$F245843 ( result ) AssignmentNode a = ( AssignmentNode ) node ; \n\t\tresult . add ( a . getTarget ( ) ) ; \n\t\tresult . addAll ( splitAssignments ( a . getExpression ( ) ) ) ; \n\t\treturn result ; \n\t\t} \n\telse { \n\t\treturn Collections . singletonList ( node ) ; \n\t\t} \n\t} \n"}, {"code": "public Tree $F4 extractBestMaxRuleParse ( int start , int end , $F3803 sentence ) { \n\treturn extractBestMaxRuleParse1 ( start , end , NUM00 , sentence ) ; \n\t} \n"}, {"code": "public static double normalize $F7635 ( val , min , max ) { \n\tif ( max < min ) $F824 return $F25154 ( val , min , max ) ; \n\t} \n"}, {"code": "private static boolean containsOnlyTransientAndStaticFields ( $F221457 fields ) { \n\tboolean containsNormalField = _BOOL ; \n\tfor ( Field field : fields ) { \n\t\tif ( ! Modifier . isTransient ( field . getModifiers ( ) ) && ! $F48022 ( Modifier , field ) ) { \n\t\t\tcontainsNormalField = _BOOL ; \n\t\t\t} \n\t\t} \n\treturn ! containsNormalField ; \n\t} \n"}, {"code": "$F1 public void appendIndexMapTo ( Appendable out , String name , List < SourceMapSection > sections ) throws IOException { \n\t$F84 ( out ) appendFirstField ( out , NUM00 , NUM00 ) ; \n\tappendField ( out , NUM00 , escapeString ( name ) ) ; \n\tappendFieldStart ( out , NUM00 ) ; \n\t$F84 ( out ) boolean first = _BOOL ; \n\tfor ( SourceMapSection section : sections ) { \n\t\t$F87 ( first , _BOOL , out ) $F84 ( out ) appendFirstField ( out , NUM00 , offsetValue ( section . getLine ( ) , section . getColumn ( ) ) ) ; \n\t\tif ( section . getSectionType ( ) == SourceMapSection . SectionType . URL ) { \n\t\t\tappendField ( out , NUM00 , escapeString ( section . getSectionValue ( ) ) ) ; \n\t\t\t} \n\t\telse if ( section . getSectionType ( ) == SourceMapSection . SectionType . MAP ) { \n\t\t\tappendField ( out , NUM00 , section . getSectionValue ( ) ) ; \n\t\t\t} \n\t\telse $F14525 $F84 ( out ) } \n\t$F84 ( out ) appendFieldEnd ( out ) ; \n\t$F84 ( out ) } \n"}, {"code": "public Builder addPart ( Part part ) { \n\t$F1149 ( part ) parts . add ( part ) ; \n\treturn this ; \n\t} \n"}, {"code": "protected void notifyGone ( L locator ) { \n\tsynchronized ( this ) { \n\t\tif ( ! staleLocators . add ( locator . getPartitionId ( ) ) ) $F1328 ( fail , locator ) } \n\t} \n"}, {"code": "$F1 public void addVetoableChangeListener ( String name , VetoableChangeListener vcl ) { \n\tm_bcSupport . addVetoableChangeListener ( name , vcl ) ; \n\t} \n"}, {"code": "public String buildUser $F72 $F16566 ( properties ) "}, {"code": "private void updateIdleExpireTime ( long now ) { \n\t_threadIdleExpireTime . set ( now + _idleTimeout ) ; \n\t} \n"}, {"code": "protected CtClass createCtClass ( String classname , boolean useCache ) { \n\tif $F4432 ( classname ) classname = Descriptor . toClassName ( classname ) ; \n\tif $F8991 ( classname ) { \n\t\t$F172220 ( base , classname ) if ( ( ! useCache || getCached ( base ) == null ) && find ( base ) == null ) $F1274 else return new CtArray ( classname , this ) ; \n\t\t} \n\telse if ( find ( classname ) == null ) $F1274 else return new CtClassType ( classname , this ) ; \n\t} \n"}, {"code": "$F1230 public long createVoucherFromBill ( final int billId ) throws ApplicationRuntimeException { \n\ttry { \n\t\tString voucherStatus = null ; \n\t\tfinal List vStatusList = appConfigValuesService . getConfigValuesByModuleAndKey ( NUM00 , NUM00 ) ; \n\t\tif ( $F1030 ( vStatusList ) && $F10470 ( vStatusList ) ) { \n\t\t\tfinal AppConfigValues appVal = ( AppConfigValues ) vStatusList . get ( NUM00 ) ; \n\t\t\t$F37891 ( voucherStatus , appVal ) } \n\t\telse throw new ApplicationRuntimeException ( NUM00 + MISSINGMSG ) ; \n\t\tfinal long vh = createVoucher . createVoucherFromBill ( billId , voucherStatus , null , null ) ; \n\t\treturn vh ; \n\t\t} \n\tcatch ( final Exception e ) { \n\t\t$F16391 ( LOGGER , e ) throw new ApplicationRuntimeException $F1783 ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public static float compareEquivalance ( Bitmap bitmap1 , Bitmap bitmap2 ) { \n\tif ( bitmap1 == null || bitmap2 == null || bitmap1 . getWidth ( ) != bitmap2 . getWidth ( ) || bitmap1 . getHeight ( ) != bitmap2 . getHeight ( ) ) $F1083 ByteBuffer buffer1 = ByteBuffer . allocate ( bitmap1 . getHeight ( ) * bitmap1 . getRowBytes ( ) ) ; \n\tbitmap1 . copyPixelsToBuffer ( buffer1 ) ; \n\tByteBuffer buffer2 = ByteBuffer . allocate ( bitmap2 . getHeight ( ) * bitmap2 . getRowBytes ( ) ) ; \n\tbitmap2 . copyPixelsToBuffer ( buffer2 ) ; \n\t$F152855 ( array1 , buffer1 ) $F152855 ( array2 , buffer2 ) int len = array1 . length ; \n\tint count = NUM00 ; \n\tfor ( $F119 ( i , len ) ) { \n\t\tif ( array1 [ i ] == array2 [ i ] ) { \n\t\t\tcount ++ ; \n\t\t\t} \n\t\t} \n\treturn ( ( float ) ( count ) ) / len ; \n\t} \n"}, {"code": "public void handleTblCharsetAliasHrefActionRequest ( RequestInvocationEvent event ) throws ModelControlException { \n\ttry { \n\t\tMap values = getValues ( ) ; \n\t\tonBeforeSaveProfile ( values ) ; \n\t\t$F50322 ( setPageSessionAttribute , PROPERTY_ATTRIBUTE , values ) G11NCharsetAliasEditViewBean vb = ( G11NCharsetAliasEditViewBean ) getViewBean ( G11NCharsetAliasEditViewBean . class ) ; \n\t\tunlockPageTrail ( ) ; \n\t\tpassPgSessionMap ( vb ) ; \n\t\tvb . populateValues ( ( String ) getDisplayFieldValue ( NUM00 ) ) ; \n\t\t$F50333 ( vb , getRequestContext ) } \n\t$F50339 ( setInlineAlertMessage , CCAlert , e ) } \n"}, {"code": "public BooleanGlassGeneIm ( BooleanGlassGenePm genePm , Parameters parameters ) { \n\ttry { \n\t\tthis . genePm = genePm ; \n\t\tthis . glassFunction = new BooleanGlassFunction ( genePm . getLagGraph ( ) ) ; \n\t\tthis . initializer = new BasalInitializer ( glassFunction , NUM00 , NUM00 ) ; \n\t\tthis . history = new GeneHistory ( initializer , glassFunction ) ; \n\t\tthis . simulator = new MeasurementSimulatorParams ( parameters ) ; \n\t\t} \n\t$F1516 ( e ) } \n"}, {"code": "protected List < ITEM_TYPE > selectFoldTrainItems ( List < ITEM_TYPE > items , int nFolds , int fold ) { \n\tList < ITEM_TYPE > trainItems = new ArrayList < ITEM_TYPE > $F72 ; \n\tfor ( $F3836 ( i , items ) ) { \n\t\tif ( i % nFolds != fold ) $F62006 ( trainItems , items , i ) } \n\treturn trainItems ; \n\t} \n"}, {"code": "$F25527 ( redundantOpCompactThreshold , redundantOpCount , lruEntries ) "}, {"code": "protected void rehash ( int newCapacity ) { \n\tint oldCapacity = _set . length ; \n\tK oldKeys [ ] = ( $F26136 ) _set ; \n\tshort oldVals [ ] = _values ; \n\t$F21451 ( _set , newCapacity ) Arrays . fill ( _set , FREE ) ; \n\t$F69027 ( _values , newCapacity ) for ( $F26144 ( i , oldCapacity ) ) { \n\t\tif ( oldKeys [ i ] != FREE && oldKeys [ i ] != REMOVED ) { \n\t\t\tK o = oldKeys [ i ] ; \n\t\t\tint index = insertionIndex ( o ) ; \n\t\t\tif ( index < NUM00 ) { \n\t\t\t\tthrowObjectContractViolation ( _set [ ( - index - NUM00 ) ] , o ) ; \n\t\t\t\t} \n\t\t\t_set [ index ] = o ; \n\t\t\t_values [ index ] = oldVals [ i ] ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "protected void addAttributes ( Element element , Attributes attributes ) { \n\tboolean noNamespaceAttributes = _BOOL ; \n\tif ( element instanceof AbstractElement ) { \n\t\tAbstractElement baseElement = ( AbstractElement ) element ; \n\t\tbaseElement . setAttributes ( attributes , namespaceStack , noNamespaceAttributes ) ; \n\t\t} \n\telse { \n\t\t$F19322 ( size , attributes ) for ( $F119 ( i , size ) ) { \n\t\t\tString attributeQName = attributes . getQName ( i ) ; \n\t\t\tif ( noNamespaceAttributes || $F14942 ( attributeQName ) ) { \n\t\t\t\tString attributeURI = attributes . getURI ( i ) ; \n\t\t\t\tString attributeLocalName = attributes . getLocalName ( i ) ; \n\t\t\t\t$F62203 ( attributeValue , attributes , i ) QName qName = namespaceStack . getAttributeQName ( attributeURI , attributeLocalName , attributeQName ) ; \n\t\t\t\telement . addAttribute ( qName , attributeValue ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static $F4203 boolean remove ( $F9884 collection , T element ) { \n\t$F1933 ( element , _BOOL ) $F46019 ( CollectionUtils , collection , _BOOL ) $F13237 ( collection , element ) } \n"}, {"code": "private static void persistUpdatedVpoolList ( List $F161827 updatedVpoolList , DbClient dbClient ) { \n\tif $F5973 ( updatedVpoolList ) { \n\t\tdbClient . updateAndReindexObject ( updatedVpoolList ) ; \n\t\t} \n\t} \n"}, {"code": "void composeTemplates ( ElemTemplateElement templ ) throws TransformerException { \n\ttempl . compose ( this ) ; \n\tfor ( ElemTemplateElement child = templ . getFirstChildElem ( ) ; \n\tchild != null ; \n\tchild = child . getNextSiblingElem ( ) ) { \n\t\tcomposeTemplates ( child ) ; \n\t\t} \n\ttempl . endCompose ( this ) ; \n\t} \n"}, {"code": "public static boolean classExists ( String className ) { \n\ttry { \n\t\treturn Class . forName ( className ) != null ; \n\t\t} \n\t$F17063 ( _BOOL ) } \n"}, {"code": "public static void createTopLevelClassesXML $F22381 ( outputDir , templatesPath , lenient ) throws CompilerException { \n\ttry { \n\t\tAsDocHelper asDocHelp = new AsDocHelper ( outputDir + NUM00 , outputDir + NUM00 , outputDir , outputDir + NUM00 + File . separator + NUM00 ) ; \n\t\tasDocHelp . createTopLevelClasses ( lenient ) ; \n\t\t} \n\tcatch ( Throwable t ) { \n\t\t$F301 ( t ) CompilerMessage c = new CouldNotCreate ( $F10629 ( t ) ) ; \n\t\tThreadLocalToolkit . log ( c ) ; \n\t\tthrow c ; \n\t\t} \n\t} \n"}, {"code": "void drawShape ( Graphics g , CSS . Value type , int ax , int ay , int aw , int ah , float align ) { \n\tint gap = isLeftToRight ? - ( bulletgap + NUM00 ) : ( aw + bulletgap ) ; \n\tint x = ax + gap ; \n\tint y = Math . max ( ay , ay + $F2354 ( align , ah ) - NUM00 ) ; \n\tif ( type == CSS . Value . SQUARE ) { \n\t\tg . drawRect ( x , y , NUM00 , NUM00 ) ; \n\t\t} \n\telse if ( type == CSS . Value . CIRCLE ) { \n\t\tg . drawOval ( x , y , NUM00 , NUM00 ) ; \n\t\t} \n\telse { \n\t\tg . fillOval ( x , y , NUM00 , NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "public static void restore ( final Context context ) { \n\t$F111887 ( prefs , PreferenceManager , context ) if ( LongTermOrbits . isSupported ( ) && prefs . getBoolean ( KEY_LOCATION_TOGGLE , _BOOL ) ) { \n\t\tsaveDownloadDataWifiOnlyPref ( context ) ; \n\t\tAlarmManager am = ( AlarmManager ) context . getSystemService ( Context . ALARM_SERVICE ) ; \n\t\tIntent intent = new Intent ( context , LtoService . class ) ; \n\t\tPendingIntent pi = PendingIntent . getService ( context , NUM00 , intent , PendingIntent . FLAG_UPDATE_CURRENT | PendingIntent . FLAG_ONE_SHOT ) ; \n\t\tlong nextLtoDownload = System . currentTimeMillis ( ) + ( $F264 ) ; \n\t\tam . set ( AlarmManager . RTC , nextLtoDownload , pi ) ; \n\t\t} \n\t} \n"}, {"code": "private void generateFile ( int wordCnt ) throws Exception { \n\tRandom rnd = new Random $F30 ( System ) ; \n\ttry ( OutputStreamWriter writer = new OutputStreamWriter $F228925 ( igfs , FILE , _BOOL ) ) { \n\t\tint cnt = NUM00 ; \n\t\twhile ( cnt < wordCnt ) { \n\t\t\tString word = $F342958 ( DICTIONARY , rnd ) ; \n\t\t\t$F5299 ( writer , word ) cnt ++ ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void polygon $F6762 ( x , y ) { \n\tint n = x . length ; \n\t$F13609 ( path ) path . moveTo ( ( float ) scaleX ( x [ NUM00 ] ) , ( float ) scaleY ( y [ NUM00 ] ) ) ; \n\tfor ( $F119 ( i , n ) ) path . lineTo ( ( float ) scaleX ( x [ i ] ) , ( float ) scaleY ( y [ i ] ) ) ; \n\t$F2272 ( path ) offscreen . draw ( path ) ; \n\tdraw ( ) ; \n\t} \n"}, {"code": "public void forceRewriteExif ( String filename , $F198017 tags ) throws $F27136 { \n\tif ( ! rewriteExif ( filename , tags ) ) { \n\t\tExifData tempData = mData ; \n\t\tmData = new ExifData ( DEFAULT_BYTE_ORDER ) ; \n\t\tFileInputStream is = null ; \n\t\tByteArrayOutputStream bytes = null ; \n\t\ttry { \n\t\t\t$F5335 ( is , filename ) $F1659 ( bytes ) doExifStreamIO ( is , bytes ) ; \n\t\t\t$F1208 ( imageBytes , bytes ) readExif ( imageBytes ) ; \n\t\t\tsetTags ( tags ) ; \n\t\t\twriteExif ( imageBytes , filename ) ; \n\t\t\t} \n\t\t$F27615 ( closeSilently , is , e ) finally { \n\t\t\t$F59 ( is ) mData = tempData ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void append ( int key , E value ) { \n\t$F49491 ( mSize , key , mKeys , put , value ) $F143594 ( mGarbage , mSize , mKeys , gc ) int pos = mSize ; \n\tif ( pos >= mKeys . length ) { \n\t\t$F49493 ( n , ContainerHelpers , pos ) $F4120 ( nkeys , n ) $F133 ( nvalues , n ) $F7057 ( System , mKeys , nkeys ) $F7057 ( System , mValues , nvalues ) mKeys = nkeys ; \n\t\tmValues = nvalues ; \n\t\t} \n\tmKeys [ pos ] = key ; \n\tmValues [ pos ] = value ; \n\tmSize = pos + NUM00 ; \n\t} \n"}, {"code": "public void testNegateNegative $F72 { \n\tString a = NUM00 ; \n\tint aScale = NUM00 ; \n\tString c = NUM00 ; \n\tint cScale = NUM00 ; \n\t$F1918 ( aNumber , a , aScale ) $F1918 ( cNumber , c , cScale ) assertEquals ( NUM00 , cNumber , aNumber . negate ( ) ) ; \n\t} \n"}, {"code": "public List < SearchResult > searchByObjectName ( String name ) { \n\tList < SearchResult > $F204 ( all ) ; \n\tfor ( Layer layer : layers ) { \n\t\tif ( isLayerVisible ( layer ) ) { \n\t\t\tall . addAll ( layer . searchByObjectName ( name ) ) ; \n\t\t\t} \n\t\t} \n\tLog . d ( TAG , $F26062 ( all , name ) ) ; \n\treturn all ; \n\t} \n"}, {"code": "private void clearMessages $F72 $F9096 ( messages ) "}, {"code": "public Searcher $F72 throws IOException { \n\tsearcher = new IndexSearcher ( DirectoryReader . open ( FSDirectory . open ( Paths . get ( INDEX_DIR ) ) ) ) ; \n\tparser = new QueryParser ( CONTENT_FIELD , new StandardAnalyzer $F72 ) ; \n\t} \n"}, {"code": "public void clearTextEdits $F72 $F9096 ( fEdits ) "}, {"code": "public static void main $F4374 ( args ) { \n\tFrame frame = new PacketTool $F72 ; \n\t$F30070 ( frame ) $F267779 ( frame ) frame . setVisible ( _BOOL ) ; \n\t} \n"}, {"code": "private void createToolBar $F72 { \n\ttoolBar = new JToolBar $F580 ; \n\tif ( listener . runningAsJConsolePlugin || listener . runningAsVisualVMPlugin ) { \n\t\ttoolBar . add ( createToolBarButton ( NUM00 , NUM00 ) ) ; \n\t\ttoolBar . setFloatable ( _BOOL ) ; \n\t\t} \n\telse { \n\t\ttoolBar . add ( createToolBarButton ( NUM00 , NUM00 ) ) ; \n\t\tcloseToolBarButton = createToolBarButton ( NUM00 , NUM00 ) ; \n\t\tcloseToolBarButton . setEnabled ( _BOOL ) ; \n\t\ttoolBar . add ( closeToolBarButton ) ; \n\t\t} \n\t$F55657 ( toolBar ) toolBar . add ( createToolBarButton ( NUM00 , NUM00 ) ) ; \n\t$F55657 ( toolBar ) expandButton = createToolBarButton ( NUM00 , NUM00 ) ; \n\texpandButton . setEnabled ( _BOOL ) ; \n\ttoolBar . add ( expandButton ) ; \n\tcollapseButton = createToolBarButton ( NUM00 , NUM00 ) ; \n\tcollapseButton . setEnabled ( _BOOL ) ; \n\ttoolBar . add ( collapseButton ) ; \n\t$F55657 ( toolBar ) findLRThreadsButton = createToolBarButton ( NUM00 , NUM00 ) ; \n\tfindLRThreadsButton . setEnabled ( _BOOL ) ; \n\ttoolBar . add ( findLRThreadsButton ) ; \n\ttoolBar . add ( createToolBarButton ( NUM00 , NUM00 ) ) ; \n\ttoolBar . add ( createToolBarButton ( NUM00 , NUM00 ) ) ; \n\t$F55657 ( toolBar ) } \n"}, {"code": "public static Map attrSetToMap ( AttrSet attrSet , boolean fetchByteValues ) { \n\tMap attributesMap = new AMHashMap ( fetchByteValues ) ; \n\t$F1933 ( attrSet , attributesMap ) $F2199 ( attrSetSize , attrSet ) if ( ! fetchByteValues ) { \n\t\tfor ( $F119 ( i , attrSetSize ) ) { \n\t\t\tAttr attr = attrSet . elementAt ( i ) ; \n\t\t\tString values [ ] = attr . getStringValues ( ) ; \n\t\t\tattributesMap . put ( attr . getName ( ) , stringArrayToSet ( values ) ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tfor ( $F119 ( i , attrSetSize ) ) { \n\t\t\tAttr attr = attrSet . elementAt ( i ) ; \n\t\t\tattributesMap . put ( attr . getName ( ) , attr . getByteValues ( ) ) ; \n\t\t\t} \n\t\t} \n\treturn attributesMap ; \n\t} \n"}, {"code": "public final $F13710 schemesIterator $F72 $F64709 ( mDataSchemes ) "}, {"code": "$F1 public void close $F72 throws IOException { \n\ttry $F881 ( out ) $F105993 ( lockFile ) } \n"}, {"code": "public static void reinitRecompiler $F72 { \n\t_rewriter . set ( new ProgramRewriter ( _BOOL , _BOOL ) ) ; \n\t} \n"}, {"code": "default Value remove ( Optional < ? extends CharSequence > name ) { \n\treturn name . isPresent ( ) ? $F47063 ( remove , name ) : null ; \n\t} \n"}, {"code": "private String nextToInternal ( String excluded ) { \n\tint start = pos ; \n\tfor ( $F93943 ( pos , in ) ) { \n\t\t$F1280 ( c , in , pos ) if ( c == NUM00 || c == NUM00 || $F36740 ( excluded , c ) ) $F102712 ( in , start , pos ) } \n\t$F32744 ( in , start ) } \n"}, {"code": "AcceptTcp ( PortTcp port , ServerSocketBar serverSocket ) { \n\tObjects . requireNonNull ( port ) ; \n\tObjects . requireNonNull ( serverSocket ) ; \n\t_port = port ; \n\t_serverSocket = serverSocket ; \n\t} \n"}, {"code": "private static void updateGrabbedCursor ( Cursor cur ) { \n\tXBaseWindow target = XAwtState . getGrabWindow ( ) ; \n\tif ( target instanceof XWindowPeer ) { \n\t\tXWindowPeer grabber = ( XWindowPeer ) target ; \n\t\tgrabber . pSetCursor ( cur ) ; \n\t\t} \n\t} \n"}, {"code": "protected void parseURI ( String uriString ) throws URISyntaxException { \n\tString s = uriString ; \n\t$F12747 ( index , s , FRAGMENT_SEPARATOR ) if ( index != - NUM00 ) { \n\t\tsetFragment ( s . substring ( index + NUM00 ) , _BOOL ) ; \n\t\t$F45799 ( s , index ) } \n\tindex = s . indexOf ( SCHEME_SEPARATOR ) ; \n\tif ( index != - NUM00 ) { \n\t\t$F11991 ( scheme , s , index ) if ( isValidScheme ( scheme ) ) { \n\t\t\tsetScheme ( scheme ) ; \n\t\t\t$F6943 ( s , index ) } \n\t\t} \n\tparseSchemeSpecificPart ( s , _BOOL ) ; \n\t} \n"}, {"code": "$F1 public boolean equals ( Object obj ) { \n\tif ( ( obj instanceof KeepAliveKey ) == _BOOL ) return _BOOL ; \n\tKeepAliveKey kae = ( KeepAliveKey ) obj ; \n\treturn $F12737 ( host , kae ) && ( port == kae . port ) && $F12737 ( protocol , kae ) && this . obj == kae . obj ; \n\t} \n"}, {"code": "protected static void appendLongStringType ( StringBuilder sb ) $F86 ( sb ) "}, {"code": "public void testConnectHeadset $F72 { \n\tint iterations = BluetoothTestRunner . sConnectHeadsetIterations ; \n\t$F32905 ( iterations ) BluetoothAdapter adapter = BluetoothAdapter . getDefaultAdapter ( ) ; \n\tBluetoothDevice device = adapter . getRemoteDevice ( BluetoothTestRunner . sDeviceAddress ) ; \n\tmTestUtils . disable ( adapter ) ; \n\tmTestUtils . enable ( adapter ) ; \n\tmTestUtils . unpair ( adapter , device ) ; \n\tmTestUtils . pair ( adapter , device , BluetoothTestRunner . sDevicePairPasskey , BluetoothTestRunner . sDevicePairPin ) ; \n\tmTestUtils . disconnectProfile ( adapter , device , BluetoothProfile . HEADSET , null ) ; \n\tfor ( $F119 ( i , iterations ) ) { \n\t\tmTestUtils . writeOutput ( $F37978 ( i ) + iterations ) ; \n\t\tmTestUtils . connectProfile ( adapter , device , BluetoothProfile . HEADSET , String . format ( NUM00 , device ) ) ; \n\t\tmTestUtils . disconnectProfile ( adapter , device , BluetoothProfile . HEADSET , String . format ( NUM00 , device ) ) ; \n\t\t} \n\tmTestUtils . unpair ( adapter , device ) ; \n\tmTestUtils . disable ( adapter ) ; \n\t} \n"}, {"code": "public static boolean isNA $F28786 ( NAstrings , w ) { \n\t$F397 ( NAstrings , _BOOL ) for ( String na : NAstrings ) { \n\t\t$F9506 ( w , na , _BOOL ) } \n\treturn _BOOL ; \n\t} \n"}, {"code": "private $F1986 evaluateProbability $F9830 ( data ) { \n\t$F1986 prob = new double [ m_NumClasses ] , v = new double [ m_NumClasses ] ; \n\tfor ( $F4864 ( j , m_NumClasses ) ) { \n\t\tfor ( $F9993 ( k , m_NumPredictors ) ) { \n\t\t\tv [ j ] += m_Par [ k ] [ j ] * data [ k ] ; \n\t\t\t} \n\t\t} \n\tv [ m_NumClasses - NUM00 ] = NUM00 ; \n\tfor ( $F119 ( m , m_NumClasses ) ) { \n\t\tdouble sum = NUM00 ; \n\t\tfor ( $F4864 ( n , m_NumClasses ) ) { \n\t\t\tsum += Math . exp ( v [ n ] - v [ m ] ) ; \n\t\t\t} \n\t\tprob [ m ] = NUM00 / ( sum + Math . exp ( - v [ m ] ) ) ; \n\t\t} \n\treturn prob ; \n\t} \n"}, {"code": "public static final HashMap readMapXml ( InputStream in ) throws $F18821 { \n\t$F58707 ( parser , Xml ) $F58708 ( parser , in ) return ( HashMap ) $F176917 ( readValueXml , parser ) ; \n\t} \n"}, {"code": "protected void modifyOMGraphicForEditRender $F72 $F845 "}, {"code": "int nextNode ( String sStr , int i ) { \n\tint nBraces = NUM00 ; \n\t$F1280 ( c , sStr , i ) do { \n\t\ti ++ ; \n\t\tif $F7007 ( i , sStr ) { \n\t\t\tc = sStr . charAt ( i ) ; \n\t\t\tif ( c == NUM00 ) { \n\t\t\t\twhile ( i < sStr . length ( ) && sStr . charAt ( i ) != NUM00 ) { \n\t\t\t\t\ti ++ ; \n\t\t\t\t\t} \n\t\t\t\ti ++ ; \n\t\t\t\tif $F7007 ( i , sStr ) $F7458 ( c , sStr , i ) } \n\t\t\tswitch ( c ) { \n\t\t\t\t$F188943 ( nBraces ) $F1262 nBraces -- ; \n\t\t\t\t$F597 $F2448 } \n\t\t\t} \n\t\t} \n\twhile ( i < sStr . length ( ) && ( nBraces > NUM00 || ( c != NUM00 && c != NUM00 && c != NUM00 ) ) ) ; \n\tif ( i >= sStr . length ( ) || nBraces < NUM00 ) $F7629 else if $F11983 ( sStr , i ) { \n\t\ti ++ ; \n\t\tif $F11983 ( sStr , i ) { \n\t\t\twhile ( i < sStr . length ( ) && sStr . charAt ( i ) != NUM00 ) { \n\t\t\t\ti ++ ; \n\t\t\t\t} \n\t\t\ti ++ ; \n\t\t\tif $F11984 ( i , sStr ) $F7629 } \n\t\tif $F11983 ( sStr , i ) { \n\t\t\ti ++ ; \n\t\t\tc = sStr . charAt ( i ) ; \n\t\t\twhile ( i < sStr . length ( ) && ( c == NUM00 || Character . isDigit ( c ) ) ) { \n\t\t\t\ti ++ ; \n\t\t\t\tif $F7007 ( i , sStr ) $F7458 ( c , sStr , i ) } \n\t\t\t} \n\t\t} \n\treturn i ; \n\t} \n"}, {"code": "public boolean selectNode ( D nodeData , SignalEvent event ) { \n\tif $F2979 ( selectedNodes ) { \n\t\tinsertAndSelectNode ( nodeData , NUM00 , _BOOL ) ; \n\t\treturn _BOOL ; \n\t\t} \n\tif ( ! hasSameParent ( selectedNodes . get ( NUM00 ) , nodeData ) ) { \n\t\tif ( ! this . multilevelSelection || event . getShiftKey ( ) ) $F4915 ( selectSingleNode , nodeData ) } \n\tif ( event == null || event . getCommandKey ( ) ) $F9278 ( ctrlSelect , nodeData , _BOOL ) else { \n\t\tif ( event . getShiftKey ( ) ) $F4915 ( shiftSelect , nodeData ) } \n\treturn selectSingleNode ( nodeData ) ; \n\t} \n"}, {"code": "$F1 public $F2027 sequenceLengths $F161613 ( start , end ) throws IOException { \n\tfinal int entrySize = mIndex . getVersion ( ) >= IndexFile . PER_SEQUENCE_CHECKSUM_VERSION ? ( mIndex . hasQuality ( ) ? NUM00 : NUM00 ) : NUM00 ; \n\tfinal long internalStart = start + mStart ; \n\tfinal long internalEnd = end + mStart ; \n\tfinal $F2027 ret = new int [ $F15690 ( internalEnd , internalStart ) ] ; \n\tif $F9634 ( ret ) { \n\t\treturn ret ; \n\t\t} \n\tif ( mIndex . getMaxLength ( ) == mIndex . getMinLength ( ) ) { \n\t\tArrays . fill ( ret , ( int ) mIndex . getMaxLength ( ) ) ; \n\t\treturn ret ; \n\t\t} \n\tfinal $F96 buffer = new byte [ entrySize * NUM00 ] ; \n\tfinal DataFileIndex dataIndex = mSequenceManager . sequenceIndex ( ) ; \n\tfinal $F2469 numSequences = new long [ dataIndex . numberEntries ( ) ] ; \n\tint startFileNo = - NUM00 ; \n\tint endFileNo = - NUM00 ; \n\tfor ( $F1139 ( i , numSequences ) ) { \n\t\tif ( i > NUM00 ) { \n\t\t\tnumSequences [ i ] = numSequences [ i - NUM00 ] + dataIndex . numberSequences ( i ) ; \n\t\t\t} \n\t\telse { \n\t\t\tnumSequences [ NUM00 ] = dataIndex . numberSequences ( NUM00 ) ; \n\t\t\t} \n\t\tif ( internalStart < numSequences [ i ] ) { \n\t\t\tif ( startFileNo == - NUM00 ) { \n\t\t\t\tstartFileNo = i ; \n\t\t\t\t} \n\t\t\tif ( internalEnd < numSequences [ i ] ) $F3468 ( endFileNo , i ) } \n\t\t} \n\tfinal long startLower = startFileNo == NUM00 ? NUM00 : numSequences [ startFileNo - NUM00 ] ; \n\tfinal long endLower = endFileNo < NUM00 ? NUM00 : numSequences [ endFileNo - NUM00 ] ; \n\tint seqNo = NUM00 ; \n\tfor ( int i = startFileNo ; \n\t( endFileNo == - NUM00 || i <= endFileNo ) && i < numSequences . length ; \n\ti ++ ) { \n\t\ttry ( RandomAccessFile raf = new RandomAccessFile ( SdfFileUtils . sequencePointerFile ( mDirectory , i ) , NUM00 ) ) { \n\t\t\tfinal long pos ; \n\t\t\tif ( i == startFileNo ) { \n\t\t\t\tpos = ( internalStart - startLower ) * entrySize ; \n\t\t\t\traf . seek ( pos ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tpos = NUM00 ; \n\t\t\t\t} \n\t\t\tfinal long endPos = endFileNo == i ? ( internalEnd - endLower ) * entrySize : raf . length ( ) ; \n\t\t\tseqNo = sequenceLengthsHelper ( raf , buffer , ret , seqNo , pos , endPos , entrySize ) ; \n\t\t\tif ( endFileNo != i && seqNo > NUM00 ) { \n\t\t\t\tfinal long fileLength = dataIndex . dataSize ( i ) ; \n\t\t\t\tret [ seqNo - NUM00 ] = ret [ seqNo - NUM00 ] - ( int ) fileLength ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tif ( seqNo != ret . length ) { \n\t\t\t\t\tthrow new CorruptSdfException ( NUM00 + ret . length + NUM00 + seqNo ) ; \n\t\t\t\t\t} \n\t\t\t\t$F61262 ( raf ) ret [ seqNo - NUM00 ] -= raf . readInt ( ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F8528 ( ret ) = NUM00 - $F8528 ( ret ) ; \n\treturn ret ; \n\t} \n"}, {"code": "public Observable < DriveId > createFile ( DriveFolder folder , File file , String title ) { \n\treturn createFile ( folder , file , title , MimeTypeMap . getFileExtensionFromUrl ( file . getPath ( ) ) ) ; \n\t} \n"}, {"code": "public static String extractCollectionFromPath ( String path ) { \n\tString extractedCollectionName = null ; \n\tString pathModified = removeFromEndOfString ( path , SLASH ) ; \n\t$F6542 ( pathSegments , pathModified ) if $F3305 ( pathSegments ) { \n\t\t$F79270 ( extractedCollectionName , pathSegments ) ; \n\t\t} \n\treturn extractedCollectionName ; \n\t} \n"}, {"code": "$F22713 ( newVector , Collections , super ) "}, {"code": "public boolean isPrivate $F72 { \n\treturn $F80000 ( Modifier , _field ) ; \n\t} \n"}, {"code": "public static final long longEncode ( final String hash ) { \n\t$F22867 ( level , hash ) long b ; \n\tlong l = NUM00 ; \n\tfor ( $F2998 ( c , hash ) ) { \n\t\tb = ( long ) ( BASE_32_ <missing ';'> NUM00 . indexOf ( c ) ) ; \n\t\tl |= ( b < < ( level -- * NUM00 ) ) ; \n\t\t} \n\treturn ( l < < NUM00 ) | hash . length ( ) ; \n\t} \n"}, {"code": "$F1 public void onSuccess ( T result ) { \n\ttry { \n\t\t$F7028 ( LOGGER , result ) queue . put ( result ) ; \n\t\t} \n\t$F45916 ( LOGGER , e ) } \n"}, {"code": "public void handleTblProviderResourceIdMapperButtonAddRequest ( RequestInvocationEvent event ) throws ModelControlException { \n\ttry { \n\t\tMap values = getValues ( ) ; \n\t\tonBeforeSaveProfile ( values ) ; \n\t\t$F50322 ( setPageSessionAttribute , PROPERTY_ATTRIBUTE , values ) SMDiscoveryProviderResourceIdMapperAddViewBean vb = ( SMDiscoveryProviderResourceIdMapperAddViewBean ) getViewBean ( SMDiscoveryProviderResourceIdMapperAddViewBean . class ) ; \n\t\tremovePageSessionAttribute ( SMDiscoveryProviderResourceIdMapperAddViewBean . PROPERTY_ATTRIBUTE ) ; \n\t\tunlockPageTrail ( ) ; \n\t\tpassPgSessionMap ( vb ) ; \n\t\t$F50333 ( vb , getRequestContext ) } \n\t$F50339 ( setInlineAlertMessage , CCAlert , e ) } \n"}, {"code": "public COpenOriginalFunction ( final CGraphWindow parent , final IViewContainer container , final INaviFunction function ) { \n\tsuper ( $F21900 ( String , function ) ) ; \n\tm_parent = parent ; \n\tm_container = container ; \n\tm_function = function ; \n\t} \n"}, {"code": "public int read $F21196 ( buffer , offset , length ) throws IOException { \n\t$F2175 ( bytes , length ) $F65003 ( count , _file , bytes , length ) for ( $F119 ( i , count ) ) { \n\t\tbuffer [ offset + i ] = ( char ) bytes [ i ] ; \n\t\t} \n\treturn count ; \n\t} \n"}, {"code": "public boolean equals ( Object o ) { \n\tif ( ! ( o instanceof Vector2f ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\t$F3627 ( this , o , _BOOL ) Vector2f comp = ( Vector2f ) o ; \n\t$F315406 ( Float , x , comp , _BOOL ) $F315406 ( Float , y , comp , _BOOL ) return _BOOL ; \n\t} \n"}, {"code": "$F1 protected EClass findInstantiableCompatible ( EClass eType ) { \n\tif ( ! isInstantiatableSubType ( eType , eType ) ) { \n\t\tthrow new IllegalStateException $F45942 ( String , eType ) ; \n\t\t} \n\treturn eType ; \n\t} \n"}, {"code": "private int measureWidth ( int measureSpec ) { \n\tint result = NUM00 ; \n\t$F20444 ( specMode , MeasureSpec , measureSpec ) $F23132 ( specSize , MeasureSpec , measureSpec ) if ( specMode == MeasureSpec . EXACTLY ) { \n\t\tresult = specSize ; \n\t\t} \n\telse { \n\t\tresult = IMAGE_WIDTH + MAX_TEXT_WIDTH + TOAST_HEIGHT ; \n\t\t$F23140 ( specMode , MeasureSpec , result , Math , specSize ) } \n\treturn result ; \n\t} \n"}, {"code": "public void restoreTopology ( Iterable < TcpDiscoveryNode > nodes , long topVer ) { \n\tassert ! F . isEmpty ( nodes ) ; \n\tassert topVer > NUM00 ; \n\trwLock . writeLock ( ) . lock ( ) ; \n\ttry { \n\t\tlocNode . internalOrder ( topVer ) ; \n\t\tclear ( ) ; \n\t\tboolean firstAdd = _BOOL ; \n\t\tfor ( TcpDiscoveryNode node : nodes ) { \n\t\t\tif ( nodesMap . containsKey ( node . id ( ) ) ) $F598 nodesMap . put ( node . id ( ) , node ) ; \n\t\t\tif ( firstAdd ) { \n\t\t\t\tthis . nodes = new $F2611 ( this . nodes ) ; \n\t\t\t\tfirstAdd = _BOOL ; \n\t\t\t\t} \n\t\t\tnode . lastUpdateTime ( U . currentTimeMillis ( ) ) ; \n\t\t\tthis . nodes . add ( node ) ; \n\t\t\t} \n\t\tnodeOrder = topVer ; \n\t\tinitializeMinimumVersion ( ) ; \n\t\t} \n\tfinally { \n\t\trwLock . writeLock ( ) . unlock ( ) ; \n\t\t} \n\t} \n"}, {"code": "final protected void startOp ( final IStartOpMessage msg ) { \n\tif ( ! controller ) throw new UnsupportedOperationException ( ERR_NOT_CONTROLLER ) ; \n\t$F10057 ( msg ) if ( ! queryId . equals ( msg . getQueryId ( ) ) ) $F10056 $F790 ( lock ) try { \n\t\tif $F8415 ( log ) log . trace ( msg . toString ( ) ) ; \n\t\tif $F38577 ( future ) $F11388 runState . startOp ( msg ) ; \n\t\t} \n\tcatch ( TimeoutException ex ) { \n\t\thalt ( ex ) ; \n\t\t} \n\t$F796 ( lock ) } \n"}, {"code": "public Flux < IN > drain $F72 $F21170 ( Flux ) "}, {"code": "int traverseConsistencyCheck ( TextEditProcessor processor , Document document , List < List < TextEdit > > sourceEdits ) { \n\tint result = NUM00 ; \n\tif ( fChildren != null ) { \n\t\tfor ( $F5373 ( i , fChildren ) ) { \n\t\t\tTextEdit child = ( TextEdit ) fChildren . get ( i ) ; \n\t\t\tresult = Math . max ( result , child . traverseConsistencyCheck ( processor , document , sourceEdits ) ) ; \n\t\t\t} \n\t\t} \n\tif ( processor . considerEdit ( this ) ) { \n\t\tperformConsistencyCheck ( processor , document ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public Minute ( Date time , TimeZone zone ) $F118649 ( this , time , zone , Locale ) "}, {"code": "private Plan buildPlan1 $F72 { \n\tPlan plan = PopulationUtils . createPlan ( ) ; \n\tActivity a = PopulationUtils . createActivityFromCoord ( NUM00 , CoordUtils . createCoord ( NUM00 , NUM00 ) ) ; \n\ta . setEndTime ( Time . parseTime ( NUM00 ) ) ; \n\tplan . addActivity ( a ) ; \n\tplan . addLeg ( PopulationUtils . createLeg ( NUM00 ) ) ; \n\tdouble travelTime = Time . parseTime ( NUM00 ) ; \n\tdouble distance = Math . round ( ( travelTime * ChainChopper . AVERAGE_SPEED ) / ChainChopper . CROWFLY_FACTOR ) ; \n\tActivity b = PopulationUtils . createActivityFromCoord ( NUM00 , CoordUtils . createCoord ( distance , NUM00 ) ) ; \n\tplan . addActivity ( b ) ; \n\treturn plan ; \n\t} \n"}, {"code": "protected void encodeAtom ( OutputStream outStream , $F97523 , int offset , int len ) throws IOException { \n\tbyte a , b = NUM00 , c = NUM00 ; \n\tint c1 , c2 , c3 , c4 ; \n\ta = data [ offset ] ; \n\tif ( len > NUM00 ) { \n\t\tb = data [ offset + NUM00 ] ; \n\t\t} \n\tif ( len > NUM00 ) { \n\t\tc = data [ offset + NUM00 ] ; \n\t\t} \n\tc1 = $F56812 ( a ) ; \n\tc2 = $F11885 ( a ) | $F97528 ( b ) ; \n\tc3 = $F11885 ( b ) | $F97528 ( c ) ; \n\tc4 = c & NUM00 ; \n\t$F5299 ( outStream , c1 ) $F5299 ( outStream , c2 ) $F5299 ( outStream , c3 ) $F5299 ( outStream , c4 ) $F665 } \n"}, {"code": "public void test_unwrap_ByteBuffer_ByteBuffer_05 $F72 { \n\tString host = NUM00 ; \n\tint port = NUM00 ; \n\t$F30909 ( bbs , ByteBuffer ) $F30909 ( bbd , ByteBuffer ) SSLEngine sse = getEngine ( host , port ) ; \n\tsse . setUseClientMode ( _BOOL ) ; \n\ttry { \n\t\tSSLEngineResult res = sse . unwrap ( bbs , bbd ) ; \n\t\t$F128468 ( assertEquals , res ) $F128471 ( assertEquals , res ) } \n\t$F17395 ( fail , e ) } \n"}, {"code": "private int adjustAlpha ( int color , float factor ) { \n\tint alpha = Math . round ( Color . alpha ( color ) * factor ) ; \n\t$F59912 ( red , Color , color ) $F59912 ( green , Color , color ) $F59912 ( blue , Color , color ) return Color . argb ( alpha , red , green , blue ) ; \n\t} \n"}, {"code": "private void initializeRatioSlider $F72 { \n\tratioSlider . setMajorTickSpacing ( NUM00 ) ; \n\tratioSlider . setMinorTickSpacing ( NUM00 ) ; \n\tratioSlider . setPaintTicks ( _BOOL ) ; \n\tHashtable < Integer , JLabel > labelTable = new Hashtable < Integer , JLabel > $F72 ; \n\tlabelTable . put ( $F13791 , $F34046 ) ; \n\tlabelTable . put ( $F13791 , $F34046 ) ; \n\tlabelTable . put ( $F13791 , $F34046 ) ; \n\tlabelTable . put ( $F13791 , $F34046 ) ; \n\tlabelTable . put ( $F13791 , $F34046 ) ; \n\tratioSlider . setLabelTable ( labelTable ) ; \n\tratioSlider . setPaintLabels ( _BOOL ) ; \n\t} \n"}, {"code": "private static void initializeSettings ( Settings . Builder output , Settings input , boolean loadDefaults ) { \n\toutput . put ( input ) ; \n\tif ( useSystemProperties ( input ) ) { \n\t\tif ( loadDefaults ) { \n\t\t\tfor ( String prefix : PROPERTY_DEFAULTS_PREFIXES ) { \n\t\t\t\toutput . putProperties ( prefix , System . getProperties ( ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tfor ( String prefix : PROPERTY_PREFIXES ) { \n\t\t\toutput . putProperties ( prefix , System . getProperties ( ) , PROPERTY_DEFAULTS_PREFIXES ) ; \n\t\t\t} \n\t\t} \n\toutput . replacePropertyPlaceholders ( ) ; \n\t} \n"}, {"code": "$F1 public void drawOval $F2026 ( x , y , width , height ) { \n\tsetStateToLocal ( ) ; \n\tm_printstream . println ( $F206172 ( xTransform , xScale , x , yTransform , yScale , y ) + xScale ( width ) + NUM00 + yScale ( height ) + NUM00 ) ; \n\t} \n"}, {"code": "public String toString ( int indentFactor ) throws JSONException $F41330 ( toString , indentFactor ) "}, {"code": "private void validateSQLFields $F72 { \n\tboolean flag = controller . isEnableSQLDatabaseOutput ( ) ; \n\tenableSQLDatabaseConnection . setSelected ( flag ) ; \n\tsqlHostLabel . setEnabled ( flag ) ; \n\tsqlHostField . setEnabled ( flag ) ; \n\tsqlDatabaseLabel . setEnabled ( flag ) ; \n\tsqlDatabaseField . setEnabled ( flag ) ; \n\tsqlUserLabel . setEnabled ( flag ) ; \n\tsqlUserField . setEnabled ( flag ) ; \n\tsqlPasswordLabel . setEnabled ( flag ) ; \n\tsqlPasswordField . setEnabled ( flag ) ; \n\tenableZipEncodingCheckBox . setEnabled ( flag ) ; \n\t} \n"}, {"code": "public void readFromObject ( Object object ) { \n\ttry { \n\t\tMethod method = BeanUtils . getReadMethod ( object . getClass ( ) , getName ( ) ) ; \n\t\tif ( method != null ) { \n\t\t\tObject value = method . invoke ( object , null ) ; \n\t\t\tinitializeValue ( value ) ; \n\t\t\tif ( value != null ) { \n\t\t\t\tfor ( $F2774 ( iter , subProperties ) ) { \n\t\t\t\t\tProperty subProperty = ( Property ) iter . next ( ) ; \n\t\t\t\t\tsubProperty . readFromObject ( value ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F12237 ( e ) } \n"}, {"code": "private boolean internalOfferTask ( AFrameTask task ) { \n\tsynchronized ( mFrameTaskQueue ) { \n\t\treturn mFrameTaskQueue . offer ( task ) ; \n\t\t} \n\t} \n"}, {"code": "$F281033 ( name , publicId , systemId ) "}, {"code": "public static String toString ( ByteBuffer bb ) { \n\t$F96 bytes = new byte [ bb . getInt ( ) ] ; \n\tString s = NUM00 ; \n\ttry { \n\t\tif $F35028 ( ArrayUtils , bytes ) { \n\t\t\tbb . get ( bytes ) ; \n\t\t\ts = new String ( bytes , UTF8 ) ; \n\t\t\t} \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new RuntimeException ( NUM00 + NUM00 , e ) ; \n\t\t} \n\treturn s ; \n\t} \n"}, {"code": "public static boolean validImage ( Image image ) { \n\treturn ( image != null && image . getWidth ( null ) > NUM00 && image . getHeight ( null ) > NUM00 ) ; \n\t} \n"}, {"code": "protected void ping ( InetAddress address ) throws Exception { \n\tSocket socket = null ; \n\tint ping = NUM00 ; \n\tfor ( $F589 ) { \n\t\tif ( isDebug ( ) ) { \n\t\t\tlog ( $F230231 ( ping , getMaxPings , address ) + NUM00 + getPort ( ) ) ; \n\t\t\t} \n\t\ttry { \n\t\t\tsocket = new Socket ( address , getPort ( ) ) ; \n\t\t\t$F597 } \n\t\tcatch ( ConnectException ce ) { \n\t\t\tlog ( $F90567 ( ping , getMaxPings ) + ce . toString ( ) + NUM00 + address + NUM00 + getPort ( ) ) ; \n\t\t\tping ++ ; \n\t\t\tif ( ping <= getMaxPings ( ) ) { \n\t\t\t\tlog ( NUM00 + getPingIntervalMilli ( ) + NUM00 ) ; \n\t\t\t\tThread . sleep ( getPingIntervalMilli ( ) ) ; \n\t\t\t\t} \n\t\t\telse $F5153 } \n\t\t} \n\tif ( socket == null ) { \n\t\tthrow new ConnectException $F29591 ( getMaxPings ) ; \n\t\t} \n\ttry { \n\t\tBufferedReader reader = new BufferedReader ( new InputStreamReader ( socket . getInputStream ( ) , NUM00 ) ) ; \n\t\tPrintWriter writer = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( socket . getOutputStream ( ) ) ) , _BOOL ) ; \n\t\tlog ( NUM00 + address + NUM00 ) ; \n\t\t$F8438 ( writer ) $F1206 ( writer ) boolean pongReceived = _BOOL ; \n\t\tfor ( $F589 ) { \n\t\t\t$F27015 ( answer , reader ) if ( answer != null ) { \n\t\t\t\t$F1382 ( answer ) log ( NUM00 + answer + NUM00 ) ; \n\t\t\t\t$F1382 ( answer ) $F19677 ( answer , pongReceived , _BOOL ) } \n\t\t\telse $F5153 } \n\t\t$F59 ( reader ) $F59 ( writer ) if ( ! pongReceived ) { \n\t\t\tthrow new ConnectException $F580 ; \n\t\t\t} \n\t\t} \n\t$F3229 ( socket ) } \n"}, {"code": "private ImageSize computeSizeToFit ( float maxSide ) { \n\tif ( NUM00 == maxSide ) { \n\t\treturn new ImageSize $F32532 ; \n\t\t} \n\tImageSize resized = new ImageSize ( this ) ; \n\tif ( ( this . mWidth > maxSide ) || ( this . mHeight > maxSide ) ) { \n\t\tdouble ratioX = maxSide / this . mWidth ; \n\t\tdouble ratioY = maxSide / this . mHeight ; \n\t\t$F59772 ( scale , Math , ratioX , ratioY ) scale = NUM00 / Integer . highestOneBit ( ( int ) Math . floor ( NUM00 / scale ) ) ; \n\t\tresized . mWidth = ( int ) ( Math . floor ( resized . mWidth * scale / NUM00 ) * NUM00 ) ; \n\t\tresized . mHeight = ( int ) ( Math . floor ( resized . mHeight * scale / NUM00 ) * NUM00 ) ; \n\t\t} \n\treturn resized ; \n\t} \n"}, {"code": "public static $F114477 embeddedSelectorToPartitions ( String selector , String type , DataPartitioner partitioner ) throws PIRException { \n\t$F114477 parts ; \n\tint partitionBits = partitioner . getBits ( type ) ; \n\tif ( partitionBits > NUM00 ) { \n\t\tint hashedSelector = KeyedHash . hash ( NUM00 , NUM00 , selector , NUM00 ) ; \n\t\tparts = partitioner . toPartitions ( hashedSelector , PrimitiveTypePartitioner . INT ) ; \n\t\t} \n\telse { \n\t\tparts = partitioner . toPartitions ( selector , type ) ; \n\t\t} \n\treturn parts ; \n\t} \n"}, {"code": "public static double stddevp $F196672 ( a , lo , hi ) { \n\treturn Math . sqrt ( varp ( a , lo , hi ) ) ; \n\t} \n"}, {"code": "public void maybeLookAheadScripts $F72 $F845 "}, {"code": "public Java2TypeScriptTranslator ( TranspilationHandler logHandler , JSweetContext context , JCCompilationUnit compilationUnit , boolean preserveSourceLineNumbers ) { \n\tsuper ( logHandler , context , compilationUnit , new Java2TypeScriptAdapter ( context ) , preserveSourceLineNumbers ) ; \n\t} \n"}, {"code": "$F1 protected void onMeasure ( int widthMeasureSpec , int heightMeasureSpec ) { \n\tint count = getChildCount ( ) ; \n\tmLeftWidth = NUM00 ; \n\tmRightWidth = NUM00 ; \n\tint maxHeight = NUM00 ; \n\tint maxWidth = NUM00 ; \n\tint childState = NUM00 ; \n\tfor ( $F119 ( i , count ) ) { \n\t\tfinal View child = getChildAt ( i ) ; \n\t\tif ( child . getVisibility ( ) != GONE ) { \n\t\t\tmeasureChildWithMargins ( child , widthMeasureSpec , NUM00 , heightMeasureSpec , NUM00 ) ; \n\t\t\t$F3670 ( lp , child ) if ( lp . position == LayoutParams . POSITION_LEFT ) { \n\t\t\t\tmLeftWidth += Math . max ( maxWidth , $F239295 ( child , lp ) ) ; \n\t\t\t\t} \n\t\t\telse if ( lp . position == LayoutParams . POSITION_RIGHT ) { \n\t\t\t\tmRightWidth += Math . max ( maxWidth , $F239295 ( child , lp ) ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tmaxWidth = Math . max ( maxWidth , $F239295 ( child , lp ) ) ; \n\t\t\t\t} \n\t\t\tmaxHeight = Math . max ( maxHeight , child . getMeasuredHeight ( ) + lp . topMargin + lp . bottomMargin ) ; \n\t\t\tchildState = combineMeasuredStates ( childState , child . getMeasuredState ( ) ) ; \n\t\t\t} \n\t\t} \n\tmaxWidth += mLeftWidth + mRightWidth ; \n\t$F53909 ( maxHeight , Math , getSuggestedMinimumHeight ) $F53909 ( maxWidth , Math , getSuggestedMinimumWidth ) setMeasuredDimension ( resolveSizeAndState ( maxWidth , widthMeasureSpec , childState ) , resolveSizeAndState ( maxHeight , heightMeasureSpec , childState < < MEASURED_HEIGHT_STATE_SHIFT ) ) ; \n\t} \n"}, {"code": "protected int exec ( String command , StringList args ) { \n\ttry { \n\t\tprint ( command ) ; \n\t\tStringList cmd = new StringList $F72 ; \n\t\tcmd = cmd . plus ( command ) ; \n\t\tif ( args != null ) { \n\t\t\tfor ( String a : args ) $F1328 ( print , a ) cmd . addAll ( args ) ; \n\t\t\t} \n\t\tprintln ( NUM00 ) ; \n\t\tProcessBuilder pb = new ProcessBuilder $F72 ; \n\t\tpb . command ( cmd . array ( ) ) ; \n\t\tpb . redirectErrorStream ( _BOOL ) ; \n\t\t$F111135 ( p , pb ) copyInThread ( p . getInputStream ( ) , quiet ? null : sysOut ) ; \n\t\t$F84402 ( p ) return p . exitValue ( ) ; \n\t\t} \n\t$F12237 ( e ) } \n"}, {"code": "$F122843 $F32043 public void testGatewaySenderEventListenerInvocationWithoutLocator $F72 { \n\tint mPort = AvailablePortHelper . getRandomAvailablePortForDUnitSite ( ) ; \n\t$F188761 ( vm4 ) $F188761 ( vm5 ) $F188761 ( vm6 ) $F188761 ( vm7 ) $F188761 ( vm4 ) $F188761 ( vm5 ) startSenderInVMs ( NUM00 , vm4 , vm5 ) ; \n\t$F188761 ( vm4 ) $F188761 ( vm5 ) $F188761 ( vm6 ) $F188761 ( vm7 ) final Map keyValues = new HashMap $F72 ; \n\tfor ( $F6268 ( i ) ) $F48801 ( keyValues , i ) $F188761 ( vm4 ) $F188761 ( vm4 ) $F188761 ( vm5 ) $F188761 ( vm4 ) $F188761 ( vm5 ) fail ( NUM00 ) ; \n\t} \n"}, {"code": "protected ApplicationUser buildUser ( $F2540 ( headerMap ) , boolean includeRoles ) { \n\t$F980 ( LOGGER ) $F2539 headerNames = getHeaderNames ( ) ; \n\tApplicationUser applicationUser = createNewApplicationUser ( ) ; \n\t$F124892 ( buildUserId , applicationUser , headerMap , headerNames , HTTP_HEADER_USER_ID ) $F124892 ( buildFirstName , applicationUser , headerMap , headerNames , HTTP_HEADER_FIRST_NAME ) $F124892 ( buildLastName , applicationUser , headerMap , headerNames , HTTP_HEADER_LAST_NAME ) $F124892 ( buildEmail , applicationUser , headerMap , headerNames , HTTP_HEADER_EMAIL ) buildSessionId ( applicationUser , headerMap , HTTP_HEADER_SESSION_ID ) ; \n\t$F124892 ( buildSessionInitTime , applicationUser , headerMap , headerNames , HTTP_HEADER_SESSION_INIT_TIME ) userNamespaceAuthorizationHelper . buildNamespaceAuthorizations ( applicationUser ) ; \n\tif ( includeRoles ) { \n\t\t$F124892 ( buildRoles , applicationUser , headerMap , headerNames , HTTP_HEADER_ROLES ) } \n\t$F586 ( LOGGER , applicationUser ) return applicationUser ; \n\t} \n"}, {"code": "@ Interruptible public static void harnessEnd $F72 { \n\tStats . stopAll ( ) ; \n\tinsideHarness = _BOOL ; \n\t} \n"}, {"code": "private Cluster < SubspaceModel > runFastDOC ( Database database , $F42616 relation , ArrayModifiableDBIDs S , int d , int n , int m , int r ) { \n\t$F2469 D = null ; \n\tDBIDVar dV = DBIDUtil . newVar ( ) ; \n\tFiniteProgress iprogress = LOG . isVerbose ( ) ? new FiniteProgress ( NUM00 , m * n , LOG ) : null ; \n\tRandom random = rnd . getSingleThreadedRandom ( ) ; \n\tDBIDArrayIter iter = S . iter ( ) ; \n\touter : for ( $F1316 ( i , n ) ) { \n\t\titer . seek ( random . nextInt ( S . size ( ) ) ) ; \n\t\tfor ( $F1316 ( j , m ) ) { \n\t\t\tDBIDs randomSet = DBIDUtil . randomSample ( S , r , random ) ; \n\t\t\t$F2469 nD = BitsUtil . zero ( d ) ; \n\t\t\tfor ( $F1316 ( k , d ) ) { \n\t\t\t\tif ( dimensionIsRelevant ( k , relation , randomSet ) ) { \n\t\t\t\t\tBitsUtil . setI ( nD , k ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tif ( D == null || BitsUtil . cardinality ( nD ) > BitsUtil . cardinality ( D ) ) { \n\t\t\t\tD = nD ; \n\t\t\t\tdV . set ( iter ) ; \n\t\t\t\tif ( BitsUtil . cardinality ( D ) >= d_zero ) { \n\t\t\t\t\tif ( iprogress != null ) { \n\t\t\t\t\t\tiprogress . setProcessed ( iprogress . getTotal ( ) , LOG ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t$F59811 } \n\t\t\t\t} \n\t\t\tLOG . incrementProcessed ( iprogress ) ; \n\t\t\t} \n\t\t} \n\tLOG . ensureCompleted ( iprogress ) ; \n\tif ( D == null || BitsUtil . cardinality ( D ) == NUM00 ) $F1337 SubspaceMaximumDistanceFunction df = new SubspaceMaximumDistanceFunction ( D ) ; \n\tDistanceQuery $F2193 dq = database . getDistanceQuery ( relation , df ) ; \n\tRangeQuery $F2193 rq = database . getRangeQuery ( dq , DatabaseQuery . HINT_SINGLE ) ; \n\tDBIDs C = DBIDUtil . intersection ( S , rq . getRangeForDBID ( dV , w ) ) ; \n\treturn $F3817 ( C ) ? makeCluster ( relation , C , D ) : null ; \n\t} \n"}, {"code": "public RaceGUI ( String appName ) { \n\t$F30051 ( UIManager , Boolean ) JFrame f = new JFrame ( appName ) ; \n\t$F30055 ( f , JFrame ) $F30057 ( f ) track = new TrackView $F72 ; \n\t$F30063 ( f , track , BorderLayout ) controlPanel = new RaceControlPanel $F72 ; \n\t$F30069 ( f , controlPanel , BorderLayout ) $F30070 ( f ) f . setVisible ( _BOOL ) ; \n\t} \n"}, {"code": "public static $F46406 toHexStrings ( Iterable < ByteArray > arrays ) { \n\t$F8728 ( ret ) for ( ByteArray array : arrays ) ret . add ( HexString . toHexString ( array . get ( ) ) ) ; \n\treturn ret ; \n\t} \n"}, {"code": "public static List < GeoTimeSerie > partitionAndApply ( Object function , WarpScriptStack stack , Macro validator , $F6877 bylabels , List < GeoTimeSerie > ... series ) throws WarpScriptException { \n\tMap < $F2539 , List < GeoTimeSerie > > unflattened = partitionAndApplyUnflattened ( function , stack , validator , bylabels , series ) ; \n\tList < GeoTimeSerie > results = new ArrayList < GeoTimeSerie > $F72 ; \n\tfor ( List < GeoTimeSerie > l : unflattened . values ( ) ) $F21926 ( results , l ) return results ; \n\t} \n"}, {"code": "final WorkQueue registerWorker ( ForkJoinWorkerThread wt ) { \n\tThread . UncaughtExceptionHandler handler ; \n\t$F17861 ws ; \n\tint s , ps ; \n\twt . setDaemon ( _BOOL ) ; \n\tif $F200462 ( handler , ueh ) wt . setUncaughtExceptionHandler ( handler ) ; \n\tdo $F845 while ( ! U . compareAndSwapInt ( this , INDEXSEED , s = indexSeed , s += SEED_INCREMENT ) || s == NUM00 ) ; \n\tWorkQueue w = new WorkQueue ( this , wt , config > > > NUM00 , s ) ; \n\tif ( ( ( ps = plock ) & PL_LOCK ) != NUM00 || ! U . compareAndSwapInt ( this , PLOCK , ps , ps += PL_LOCK ) ) ps = acquirePlock ( ) ; \n\tint nps = ( ps & SHUTDOWN ) | ( ( ps + PL_LOCK ) & ~ SHUTDOWN ) ; \n\ttry { \n\t\tif $F200462 ( ws , workQueues ) { \n\t\t\tint n = ws . length , m = n - NUM00 ; \n\t\t\tint r = ( s < < NUM00 ) | NUM00 ; \n\t\t\tif ( ws [ r &= m ] != null ) { \n\t\t\t\tint probes = NUM00 ; \n\t\t\t\tint step = ( n <= NUM00 ) ? NUM00 : ( $F14870 ( n ) & EVENMASK ) + NUM00 ; \n\t\t\t\twhile ( ws [ r = ( r + step ) & m ] != null ) { \n\t\t\t\t\tif ( ++ probes >= n ) { \n\t\t\t\t\t\tworkQueues = ws = Arrays . copyOf ( ws , n <<= NUM00 ) ; \n\t\t\t\t\t\tm = n - NUM00 ; \n\t\t\t\t\t\tprobes = NUM00 ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tw . eventCount = w . poolIndex = r ; \n\t\t\tws [ r ] = w ; \n\t\t\t} \n\t\t} \n\tfinally { \n\t\tif $F302447 ( U , this , PLOCK , ps , nps ) releasePlock ( nps ) ; \n\t\t} \n\twt . setName ( workerNamePrefix . concat ( Integer . toString ( w . poolIndex ) ) ) ; \n\treturn w ; \n\t} \n"}, {"code": "public void clear $F72 $F13478 ( documents , fireMRUListChanged ) "}, {"code": "public boolean isDirectlyControlDependentOn ( BasicBlock insBlock , Branch b ) { \n\tSet < ControlFlowEdge > incomming = incomingEdgesOf ( insBlock ) ; \n\tif $F10471 ( incomming ) { \n\t\tfor ( ControlFlowEdge e : incomming ) { \n\t\t\tif ( ! e . hasControlDependency ( ) && ! e . isExceptionEdge ( ) ) { \n\t\t\t\treturn isDirectlyControlDependentOn ( getEdgeSource ( e ) , b ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tboolean isRootDependent = isRootDependent ( insBlock ) ; \n\t$F397 ( b , isRootDependent ) if ( isRootDependent && b != null ) return _BOOL ; \n\tfor ( ControlFlowEdge e : incomming ) { \n\t\tBranch current = e . getBranchInstruction ( ) ; \n\t\tif ( e . isExceptionEdge ( ) ) { \n\t\t\tif ( current != null ) $F4638 else $F598 } \n\t\t$F45557 ( current ) $F9506 ( current , b , _BOOL ) } \n\treturn _BOOL ; \n\t} \n"}, {"code": "final boolean tryReadLock $F72 { \n\t$F686 ( current , Thread ) for ( $F589 ) { \n\t\tint c = getState ( ) ; \n\t\tif ( exclusiveCount ( c ) != NUM00 && getExclusiveOwnerThread ( ) != current ) return _BOOL ; \n\t\tint r = sharedCount ( c ) ; \n\t\t$F266914 ( r , MAX_COUNT ) if ( compareAndSetState ( c , c + SHARED_UNIT ) ) { \n\t\t\tif ( r == NUM00 ) { \n\t\t\t\tfirstReader = current ; \n\t\t\t\tfirstReaderHoldCount = NUM00 ; \n\t\t\t\t} \n\t\t\telse if ( firstReader == current ) { \n\t\t\t\tfirstReaderHoldCount ++ ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tHoldCounter rh = cachedHoldCounter ; \n\t\t\t\tif $F69886 ( rh , current ) cachedHoldCounter = rh = readHolds . get ( ) ; \n\t\t\t\telse $F69900 ( rh , readHolds ) rh . count ++ ; \n\t\t\t\t} \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static String replace ( String text , String oldsub , String newsub , boolean caseInsensitive , boolean firstOnly ) { \n\tStringBuilder buf ; \n\tint tln ; \n\t$F1749 ( oln , oldsub ) if ( oln == NUM00 ) { \n\t\t$F1749 ( nln , newsub ) if ( nln == NUM00 ) { \n\t\t\treturn text ; \n\t\t\t} \n\t\telse { \n\t\t\tif ( firstOnly ) { \n\t\t\t\treturn newsub + text ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\t$F3935 ( tln , text ) buf = new StringBuilder ( tln + ( tln + NUM00 ) * nln ) ; \n\t\t\t\tbuf . append ( newsub ) ; \n\t\t\t\tfor ( $F119 ( i , tln ) ) { \n\t\t\t\t\t$F4137 ( buf , text , i ) buf . append ( newsub ) ; \n\t\t\t\t\t} \n\t\t\t\t$F92 ( buf ) } \n\t\t\t} \n\t\t} \n\telse { \n\t\toldsub = caseInsensitive ? oldsub . toLowerCase ( ) : oldsub ; \n\t\tString input = caseInsensitive ? text . toLowerCase ( ) : text ; \n\t\t$F12747 ( e , input , oldsub ) $F5881 ( e , text ) int b = NUM00 ; \n\t\t$F3935 ( tln , text ) buf = new StringBuilder ( tln + Math . max ( newsub . length ( ) - oln , NUM00 ) * NUM00 ) ; \n\t\tdo { \n\t\t\t$F13037 ( buf , text , b , e ) buf . append ( newsub ) ; \n\t\t\tb = e + oln ; \n\t\t\te = input . indexOf ( oldsub , b ) ; \n\t\t\t} \n\t\twhile ( e != - NUM00 && ! firstOnly ) ; \n\t\t$F13047 ( buf , text , b ) $F92 ( buf ) } \n\t} \n"}, {"code": "public void serializeFormDef ( FormDef fd , String filepath ) { \n\tString hash = FileUtils . getMd5Hash ( new File ( filepath ) ) ; \n\tFile formDef = new File ( Collect . CACHE_PATH + File . separator + hash + NUM00 ) ; \n\tif $F1906 ( formDef ) { \n\t\tFileOutputStream fos ; \n\t\ttry { \n\t\t\t$F10893 ( fos , formDef ) $F1533 ( dos , fos ) fd . writeExternal ( dos ) ; \n\t\t\t$F1206 ( dos ) $F59 ( dos ) } \n\t\t$F35546 ( e ) $F12241 ( e ) } \n\t} \n"}, {"code": "private void paintRoute ( Graphics2D graphics , JXMapViewer viewer , PlottableEntity entity ) { \n\tSet < Plottable > plottables = entity . getPlottables ( ) ; \n\tif $F3817 ( plottables ) { \n\t\t$F339 ( graphics , Color ) graphics . setStroke ( new BasicStroke $F989 ) ; \n\t\tdrawRoute ( plottables , graphics , viewer ) ; \n\t\t$F14782 ( graphics , entity ) graphics . setStroke ( new BasicStroke $F989 ) ; \n\t\tdrawRoute ( plottables , graphics , viewer ) ; \n\t\t} \n\t} \n"}, {"code": "private boolean installReply ( String alias , InputStream in ) throws Exception { \n\t$F13265 ( alias , keyAlias ) Pair < Key , $F1469 > objs = recoverKey ( alias , storePass , keyPass ) ; \n\tPrivateKey privKey = ( PrivateKey ) objs . fst ; \n\tif ( keyPass == null ) { \n\t\tkeyPass = objs . snd ; \n\t\t} \n\tCertificate userCert = keyStore . getCertificate ( alias ) ; \n\tif ( userCert == null ) { \n\t\t$F22029 ( form , rb ) $F22031 ( source , alias ) throw new Exception $F22032 ( form , source ) ; \n\t\t} \n\tCollection < ? extends Certificate > c = cf . generateCertificates ( in ) ; \n\tif $F2979 ( c ) $F65933 ( rb ) $F65927 replyCerts = c . toArray ( new Certificate $F2313 ( c ) ) ; \n\t$F65927 newChain ; \n\tif $F9634 ( replyCerts ) { \n\t\tnewChain = establishCertChain ( userCert , replyCerts [ NUM00 ] ) ; \n\t\t} \n\telse { \n\t\tnewChain = validateReply ( alias , userCert , replyCerts ) ; \n\t\t} \n\tif ( newChain != null ) { \n\t\tkeyStore . setKeyEntry ( alias , privKey , ( keyPass != null ) ? keyPass : storePass , newChain ) ; \n\t\treturn _BOOL ; \n\t\t} \n\telse { \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "$F1 public boolean eIsSet ( int featureID ) { \n\tswitch ( featureID ) { \n\t\tcase EipPackage . AGGREGATOR__NAME : $F6439 ( NAME_EDEFAULT , name ) case EipPackage . AGGREGATOR__TO_CHANNELS : $F6441 ( toChannels ) case EipPackage . AGGREGATOR__FROM_CHANNELS : $F6441 ( fromChannels ) case EipPackage . AGGREGATOR__PART : return part != PART_EDEFAULT ; \n\t\tcase EipPackage . AGGREGATOR__STRATEGY : $F6439 ( STRATEGY_EDEFAULT , strategy ) case EipPackage . AGGREGATOR__EXPRESSION : $F6439 ( EXPRESSION_EDEFAULT , expression ) } \n\t$F6444 ( super , featureID ) } \n"}, {"code": "public synchronized void mouseWheel ( int wheelAmt ) { \n\tpeer . mouseWheel ( wheelAmt ) ; \n\tafterEvent ( ) ; \n\t} \n"}, {"code": "$F1 public int length $F72 { \n\treturn data . length / ( format . getFrameSize ( ) * NUM00 ) ; \n\t} \n"}, {"code": "public void validate ( Set setData ) throws ValidationException { \n\tfor ( $F2774 ( iter , setData ) ) { \n\t\tperformValidation ( $F2775 ( iter ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static void deleteDirectory ( final File dir , boolean checkForLinks ) { \n\tif $F7110 ( dir ) $F85588 ( dir ) else if ( checkForLinks && isLink ( dir ) ) $F85588 ( dir ) if $F3428 ( dir ) { \n\t\tIOUtils . deleteDir ( dir , checkForLinks ) ; \n\t\t} \n\telse $F85588 ( dir ) } \n"}, {"code": "private static Marshaller createMarshaller ( JAXBContext jaxbContext , String schemaPath ) throws SAXException , JAXBException { \n\tSchema schema = XmlParser . getSchema ( $F8640 ( schemaPath ) ) ; \n\t$F142433 ( jaxbMarshaller , jaxbContext ) jaxbMarshaller . setSchema ( schema ) ; \n\tjaxbMarshaller . setProperty ( Marshaller . JAXB_FORMATTED_OUTPUT , _BOOL ) ; \n\tjaxbMarshaller . setProperty ( Marshaller . JAXB_ENCODING , NUM00 ) ; \n\treturn jaxbMarshaller ; \n\t} \n"}, {"code": "public static GeneralPath cardinalSpline ( $F8138 , float slack , boolean closed ) { \n\t$F13609 ( path ) $F6222 ( path , pts ) return cardinalSpline ( path , pts , slack , closed , NUM00 , NUM00 ) ; \n\t} \n"}, {"code": "public static String makeMethodSafe ( final String S ) { \n\tString name = makeHTMLNameSafe ( S ) ; \n\t$F2936 ( name ) return name ; \n\t} \n"}, {"code": "public Builder addListenUrl ( String url ) { \n\tif ( UrlUtil . isUrl ( url ) ) { \n\t\tif ( mListenUrls == null ) { \n\t\t\t$F21884 ( mListenUrls ) } \n\t\tmListenUrls . add ( url ) ; \n\t\t} \n\treturn this ; \n\t} \n"}, {"code": "$F25545 ( i , count , buf , newbuf , mPool , System ) "}, {"code": "public void remove ( Production production ) $F106 ( productions , production ) "}, {"code": "private void writeDelay $F72 { \n\ttry $F31130 ( Thread ) catch ( InterruptedException e ) $F1210 ( fail ) } \n"}, {"code": "public static void main $F4374 ( argv ) { \n\tArgParser ap = new ArgParser $F580 ; \n\tap . add ( NUM00 , NUM00 , NUM00 ) ; \n\tif $F8830 ( argv ) { \n\t\tap . bail ( NUM00 , _BOOL ) ; \n\t\t} \n\tap . parse ( argv ) ; \n\t$F806 files = ap . getArgValues ( NUM00 ) ; \n\tif ( files != null && files [ NUM00 ] != null ) { \n\t\tString shp = files [ NUM00 ] ; \n\t\tString dbf = null ; \n\t\ttry { \n\t\t\tdbf = shp . substring ( NUM00 , $F31603 ( shp ) ) + PARAM_DBF ; \n\t\t\tDbfTableModel model = DbfTableModel . getDbfTableModel ( PropUtils . getResourceOrFileOrURL ( dbf ) ) ; \n\t\t\tEsriGraphicList list = EsriGraphicList . getEsriGraphicList ( PropUtils . getResourceOrFileOrURL ( shp ) , null , null ) ; \n\t\t\tlogger . info ( list . getDescription ( ) ) ; \n\t\t\tEsriShapeExport ese = new EsriShapeExport ( list , model , null ) ; \n\t\t\tese . export ( ) ; \n\t\t\t} \n\t\tcatch ( MalformedURLException murle ) { \n\t\t\tlogger . warning ( $F5351 ( murle ) ) ; \n\t\t\t} \n\t\tcatch ( NullPointerException npe ) $F18144 ( logger ) catch ( Exception exception ) { \n\t\t\tlogger . warning ( $F5351 ( exception ) ) ; \n\t\t\t$F301 ( exception ) } \n\t\t} \n\telse { \n\t\tap . bail ( NUM00 , _BOOL ) ; \n\t\t} \n\t$F5194 ( System ) } \n"}, {"code": "public PartialHull ( IPoint first , IPoint second ) $F23287 ( points , first , second ) "}, {"code": "public void testMaxGreater $F72 { \n\t$F67214 $F117220 int aSign = NUM00 ; \n\tint bSign = NUM00 ; \n\t$F67522 $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F127615 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F67528 ( assertTrue , result ) } \n"}, {"code": "public static SortedSet < Interval > findFullAvailabilityGaps ( Set < Interval > availableIntervals , Set < Interval > neededIntervals ) { \n\tComparator < Interval > intervalStartComparator = new IntervalStartComparator $F72 ; \n\tSortedSet < Interval > sortedAvailableIntervals = new $F2611 ( intervalStartComparator ) ; \n\tsortedAvailableIntervals . addAll ( availableIntervals ) ; \n\tSortedSet < Interval > sortedNeededIntervals = new $F2611 ( intervalStartComparator ) ; \n\tsortedNeededIntervals . addAll ( neededIntervals ) ; \n\tIterator < Interval > availableIntervalsIterator = sortedAvailableIntervals . iterator ( ) ; \n\tif $F87568 ( availableIntervalsIterator ) { \n\t\treturn sortedNeededIntervals ; \n\t\t} \n\tInterval available = availableIntervalsIterator . next ( ) ; \n\tSortedSet < Interval > missingIntervals = new $F2611 ( intervalStartComparator ) ; \n\tfor ( Interval needed : sortedNeededIntervals ) { \n\t\twhile ( ! canDetermineAvailability ( available , needed ) && availableIntervalsIterator . hasNext ( ) ) $F235549 ( available , availableIntervalsIterator ) $F36399 ( available , needed ) missingIntervals . add ( needed ) ; \n\t\t} \n\treturn missingIntervals ; \n\t} \n"}, {"code": "public static $F3803 split ( String str , String delim ) { \n\t$F36422 ( splitList ) StringTokenizer st = null ; \n\t$F397 ( str , splitList ) if ( delim != null ) st = new StringTokenizer ( str , delim ) ; \n\telse st = new StringTokenizer ( str ) ; \n\tif ( st != null && st . hasMoreTokens ( ) ) { \n\t\t$F36428 ( splitList ) $F226965 ( st , splitList ) } \n\treturn splitList ; \n\t} \n"}, {"code": "public void writeExif ( String jpegFileName , String exifOutFileName ) throws $F27136 { \n\t$F26831 ( jpegFileName , exifOutFileName , NULL_ARGUMENT_ ) InputStream is = null ; \n\t$F5335 ( is , jpegFileName ) writeExif ( is , exifOutFileName ) ; \n\t$F59 ( is ) } \n"}, {"code": "public boolean isGenClass ( SootClass clz ) { \n\treturn $F40656 ( genClasses , clz ) ; \n\t} \n"}, {"code": "public boolean hasExtraStillImage $F72 { \n\treturn isApng ( ) && ! firsIdatApngFrame ; \n\t} \n"}, {"code": "private void readResponseHeaders $F37875 ( state , innerState , response ) throws StopRequest { \n\tHeader header = response . getFirstHeader ( NUM00 ) ; \n\tif ( header != null ) { \n\t\tinnerState . mHeaderContentDisposition = header . getValue ( ) ; \n\t\t} \n\t$F37882 ( header , response ) if ( header != null ) { \n\t\tinnerState . mHeaderContentLocation = header . getValue ( ) ; \n\t\t} \n\t$F37882 ( header , response ) if ( header != null ) { \n\t\tinnerState . mHeaderETag = header . getValue ( ) ; \n\t\t} \n\tString headerTransferEncoding = null ; \n\t$F37882 ( header , response ) if ( header != null ) $F37892 ( headerTransferEncoding , header ) String headerContentType = null ; \n\t$F37882 ( header , response ) if ( header != null ) { \n\t\t$F37891 ( headerContentType , header ) if $F1264 ( headerContentType ) { \n\t\t\tthrow new StopRequest ( DownloaderService . STATUS_FILE_DELIVERED_INCORRECTLY , NUM00 ) ; \n\t\t\t} \n\t\t} \n\tif ( headerTransferEncoding == null ) { \n\t\t$F37882 ( header , response ) if ( header != null ) { \n\t\t\tinnerState . mHeaderContentLength = header . getValue ( ) ; \n\t\t\tlong contentLength = Long . parseLong ( innerState . mHeaderContentLength ) ; \n\t\t\tif ( contentLength != - NUM00 && contentLength != mInfo . mTotalBytes ) { \n\t\t\t\tLog . e ( Constants . TAG , NUM00 ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse { \n\t\tif ( Constants . LOGVV ) { \n\t\t\t$F37918 ( Log , Constants ) } \n\t\t} \n\tif ( Constants . LOGVV ) { \n\t\tLog . v ( Constants . TAG , NUM00 + innerState . mHeaderContentDisposition ) ; \n\t\tLog . v ( Constants . TAG , NUM00 + innerState . mHeaderContentLength ) ; \n\t\tLog . v ( Constants . TAG , NUM00 + innerState . mHeaderContentLocation ) ; \n\t\tLog . v ( Constants . TAG , NUM00 + innerState . mHeaderETag ) ; \n\t\tLog . v ( Constants . TAG , NUM00 + headerTransferEncoding ) ; \n\t\t} \n\tboolean noSizeInfo = innerState . mHeaderContentLength == null && ( headerTransferEncoding == null || $F14071 ( headerTransferEncoding ) ) ; \n\tif ( noSizeInfo ) { \n\t\tthrow new StopRequest ( DownloaderService . STATUS_HTTP_DATA_ERROR , NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "public void removeChangeListener ( final PTPropertyChangeListener listener ) $F106 ( changeListeners , listener ) "}, {"code": "public static ResultSet optimizeInJoinSelect $F72 { \n\tSimpleResultSet rs = new SimpleResultSet $F72 ; \n\trs . addColumn ( NUM00 , Types . INTEGER , NUM00 , NUM00 ) ; \n\trs . addRow ( NUM00 ) ; \n\treturn rs ; \n\t} \n"}, {"code": "public PartitionSubstitutionModel parsePAUPBlock ( BeautiOptions options , List < CharSet > charSets ) throws ImportException , IOException { \n\tPartitionSubstitutionModel model = new PartitionSubstitutionModel ( options , NUM00 ) ; \n\treadTopLevelBlock ( options , model , charSets ) ; \n\treturn model ; \n\t} \n"}, {"code": "private void zEventToggleTimeMenuButtonMousePressed ( MouseEvent e ) $F5795 ( togglePopup ) "}, {"code": "private void addLine ( GridField field , VEditor editor , boolean mandatory ) { \n\t$F35577 ( log , field ) JLabel label = VEditorFactory . getLabel ( field ) ; \n\tlabel . setLabelFor ( ( Component ) editor ) ; \n\teditor . setReadWrite ( _BOOL ) ; \n\teditor . setMandatory ( mandatory ) ; \n\tfield . addPropertyChangeListener ( editor ) ; \n\tif ( m_newRow ) { \n\t\tm_gbc . gridy = m_line ++ ; \n\t\tm_gbc . gridx = NUM00 ; \n\t\t} \n\telse m_gbc . gridx = NUM00 ; \n\tm_gbc . insets = m_labelInsets ; \n\t$F45961 ( m_gbc , GridBagConstraints ) m_gbc . weightx = NUM00 ; \n\tparameterPanel . add ( label , m_gbc ) ; \n\tif ( m_newRow ) m_gbc . gridx = NUM00 ; \n\telse m_gbc . gridx = NUM00 ; \n\tm_gbc . insets = m_fieldInsets ; \n\t$F45961 ( m_gbc , GridBagConstraints ) m_gbc . weightx = NUM00 ; \n\tparameterPanel . add ( ( Component ) editor , m_gbc ) ; \n\tm_newRow = ! m_newRow ; \n\t} \n"}, {"code": "protected Object lazilyLoadDesktopProperty ( String name ) $F1337 "}, {"code": "@ edu . umd . cs . findbugs . annotations . SuppressWarnings ( $F3144 , justification = NUM00 ) public void initRecoveredVersion ( T member , RegionVersionHolder $F4203 v , boolean latestOplog ) { \n\tRegionVersionHolder $F4203 recovered = v . clone ( ) ; \n\tif ( member == null || member . equals ( myId ) ) { \n\t\tsynchronized ( localExceptions ) { \n\t\t\tif ( latestOplog || $F76101 ( localVersion ) ) { \n\t\t\t\tlocalExceptions = recovered ; \n\t\t\t\tif ( logger . isTraceEnabled ( LogMarker . RVV ) ) { \n\t\t\t\t\tlogger . trace ( LogMarker . RVV , NUM00 , recovered . version ) ; \n\t\t\t\t\t} \n\t\t\t\tlocalVersion . set ( recovered . version ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse { \n\t\t$F5856 ( gcVersion , memberToGCVersion , member ) synchronized ( memberToVersion ) { \n\t\t\tRegionVersionHolder $F4203 oldVersion = memberToVersion . get ( member ) ; \n\t\t\tif ( latestOplog || oldVersion == null || oldVersion . version == NUM00 ) { \n\t\t\t\tif ( gcVersion != null ) { \n\t\t\t\t\trecovered . removeExceptionsOlderThan ( gcVersion ) ; \n\t\t\t\t\t} \n\t\t\t\tmemberToVersion . put ( member , recovered ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "protected void notifyClickListenersAboutClick ( int item ) { \n\tif $F3817 ( clickingListeners ) { \n\t\tfor ( OnWheelClickedListener listener : clickingListeners ) { \n\t\t\tlistener . onItemClicked ( this , item ) ; \n\t\t\t} \n\t\t} \n\telse $F24285 ( setCurrentItem , item , _BOOL ) } \n"}, {"code": "$F1 public synchronized void disconnectionNotification ( String eventName , Object source ) { \n\t$F6689 listenees = m_listenees . get ( eventName ) ; \n\tif ( listenees != null ) { \n\t\tlistenees . remove ( source ) ; \n\t\tif $F10471 ( listenees ) $F106 ( m_listenees , eventName ) } \n\tif $F87842 ( eventName ) $F5795 ( stop ) } \n"}, {"code": "public void testConstructorSignBytesZeroNull1 $F72 { \n\tbyte $F3009 = $F845 ; \n\tint aSign = - NUM00 ; \n\t$F15143 $F3023 ( aNumber , aSign , aBytes ) $F3030 ( rBytes ) $F3031 ( resBytes , aNumber ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , aNumber ) } \n"}, {"code": "private String replaceIllegalChar ( String data , char ch , String replacement ) { \n\tint idx = NUM00 ; \n\tStringBuilder buffer = new StringBuilder $F9484 ( data ) ; \n\twhile ( ( data != null ) && $F105153 ( idx , data , ch ) != - NUM00 ) { \n\t\t$F6937 ( buffer , data , idx ) buffer . append ( replacement ) ; \n\t\t$F6943 ( data , idx ) } \n\tif $F23754 ( data ) $F288 ( buffer , data ) $F92 ( buffer ) } \n"}, {"code": "protected static final void adjustModuleName ( DebugModule d ) { \n\td . name = adjustModuleName ( d . name ) ; \n\t} \n"}, {"code": "public org . dom4j . Attribute createAttribute ( Element elem , Attribute attr ) { \n\treturn factory . createAttribute ( elem , $F6798 ( createQName , attr ) , attr . getValue ( ) ) ; \n\t} \n"}, {"code": "public LogEntry $F72 { \n\t$F201038 ( index , ENTRY_INDEX ) $F3224 ( time , System ) } \n"}, {"code": "public void testBitLengthPositive3 $F72 { \n\tbyte $F3009 = $F157839 ; \n\tint aSign = NUM00 ; \n\t$F3023 ( aNumber , aSign , aBytes ) $F6961 ( assertEquals , aNumber ) } \n"}, {"code": "public boolean isSignatureValid $F72 { \n\treturn ECKey . verify ( Utils . doubleDigest ( content ) , signature , params . getAlertSigningKey ( ) ) ; \n\t} \n"}, {"code": "private void validateCreateInformation ( Date startTime , String taskName ) { \n\t$F18062 ( Assert , startTime ) if ( taskName != null && taskName . length ( ) > this . maxTaskNameSize ) { \n\t\tthrow new IllegalArgumentException ( NUM00 + this . maxTaskNameSize + NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "private static Object increment ( final Object object , final Number amount , final JsonPointer field ) throws BadRequestException { \n\tif ( object instanceof Long ) { \n\t\treturn ( ( Long ) object ) + amount . longValue ( ) ; \n\t\t} \n\telse if ( object instanceof Integer ) { \n\t\treturn ( ( Integer ) object ) + amount . intValue ( ) ; \n\t\t} \n\telse if ( object instanceof Float ) { \n\t\treturn ( ( Float ) object ) + amount . floatValue ( ) ; \n\t\t} \n\telse if ( object instanceof Double ) { \n\t\treturn ( ( Double ) object ) + amount . doubleValue ( ) ; \n\t\t} \n\telse { \n\t\tthrow new BadRequestException ( NUM00 + field + NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "public static LinkedHashSet $F37552 findEntites ( LinkedHashSet $F37552 matches , HashSet $F37552 checked , Entity entity , Predicate predicate ) { \n\tif $F73676 ( checked , entity ) { \n\t\treturn matches ; \n\t\t} \n\tif $F44202 ( predicate , entity ) $F207 ( matches , entity ) for ( RefNode refNode : entity . getChildren ( RefNode . class ) ) { \n\t\tEntity e = refNode . getReference ( ) ; \n\t\tif ( e != null ) { \n\t\t\tfindEntites ( matches , checked , e , predicate ) ; \n\t\t\t} \n\t\t} \n\tfor ( ToManyNode toManyNode : entity . getChildren ( ToManyNode . class ) ) { \n\t\tfor ( Entity e : toManyNode . getList ( ) ) { \n\t\t\tif ( e != null ) { \n\t\t\t\tfindEntites ( matches , checked , e , predicate ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn matches ; \n\t} \n"}, {"code": "protected OMGeometry createMGRSRectangle ( MGRSPoint mgrsBasePoint , double voffset , double hoffset , double interval , Ellipsoid ellipsoid ) { \n\t$F1993 ( llpoints ) double easting = mgrsBasePoint . easting + hoffset ; \n\tdouble northing = mgrsBasePoint . northing + voffset ; \n\tint zone_number = mgrsBasePoint . zone_number ; \n\tchar zone_letter = mgrsBasePoint . zone_letter ; \n\t$F99967 ( llp1 ) llp1 = MGRSPoint . MGRStoLL ( ellipsoid , northing , easting , zone_number , zone_letter , llp1 ) ; \n\tllpoints [ NUM00 ] = llp1 . getY ( ) ; \n\tllpoints [ NUM00 ] = llp1 . getX ( ) ; \n\tllpoints [ NUM00 ] = llp1 . getY ( ) ; \n\tllpoints [ NUM00 ] = llp1 . getX ( ) ; \n\tMGRSPoint . MGRStoLL ( ellipsoid , northing , easting + interval , zone_number , zone_letter , llp1 ) ; \n\tllpoints [ NUM00 ] = llp1 . getY ( ) ; \n\tllpoints [ NUM00 ] = llp1 . getX ( ) ; \n\tMGRSPoint . MGRStoLL ( ellipsoid , northing + interval , easting + interval , zone_number , zone_letter , llp1 ) ; \n\tllpoints [ NUM00 ] = llp1 . getY ( ) ; \n\tllpoints [ NUM00 ] = llp1 . getX ( ) ; \n\tMGRSPoint . MGRStoLL ( ellipsoid , northing + interval , easting , zone_number , zone_letter , llp1 ) ; \n\tllpoints [ NUM00 ] = llp1 . getY ( ) ; \n\tllpoints [ NUM00 ] = llp1 . getX ( ) ; \n\tMGRSPoint mgrs = new MGRSPoint ( northing , easting , zone_number , zone_letter ) ; \n\tmgrs . resolve ( mgrsBasePoint . getAccuracy ( ) ) ; \n\tString mgrsString = mgrs . getMGRS ( ) ; \n\tif $F22503 ( Debug ) Debug . output ( NUM00 + mgrsString + NUM00 + mgrs . getAccuracy ( ) ) ; \n\tPolygonGeometry poly = new PolygonGeometry . LL ( llpoints , OMGraphic . DECIMAL_DEGREES , ( interval <= NUM00 ? OMGraphic . LINETYPE_STRAIGHT : OMGraphic . LINETYPE_GREATCIRCLE ) ) ; \n\tpoly . putAttribute ( OMGraphic . APP_OBJECT , mgrsString ) ; \n\treturn poly ; \n\t} \n"}, {"code": "$F284893 ( toXMLString , _BOOL ) "}, {"code": "public void addMemoryPressureListener ( MemoryPressureListener listener ) $F207 ( mListeners , listener ) "}, {"code": "private void resetForOT $F72 { \n\tif ( bottomOT && homeScore == awayScore ) { \n\t\tgameYardLine = NUM00 ; \n\t\tgameYardsNeed = NUM00 ; \n\t\tgameDown = NUM00 ; \n\t\tnumOT ++ ; \n\t\tif $F91889 ( numOT ) gamePoss = _BOOL ; \n\t\telse gamePoss = _BOOL ; \n\t\tgameTime = - NUM00 ; \n\t\tbottomOT = _BOOL ; \n\t\t} \n\telse if ( ! bottomOT ) { \n\t\tgamePoss = ! gamePoss ; \n\t\tgameYardLine = NUM00 ; \n\t\tgameYardsNeed = NUM00 ; \n\t\tgameDown = NUM00 ; \n\t\tgameTime = - NUM00 ; \n\t\tbottomOT = _BOOL ; \n\t\t} \n\telse { \n\t\tplayingOT = _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public synchronized void startPolling $F72 { \n\tm_scheduler . scheduleAtFixedRate ( m_notificationPoller , NUM00 , NUM00 , TimeUnit . MILLISECONDS ) ; \n\t} \n"}, {"code": "private void dropProxy ( ProxyReg reg ) { \n\tsynchronized ( caches ) { \n\t\t$F10531 ( iter , caches ) while $F2921 ( iter ) { \n\t\t\tLookupCacheImpl cache = ( LookupCacheImpl ) iter . next ( ) ; \n\t\t\tcache . removeProxyReg ( reg ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void testUpdate4 $F72 { \n\tint newValue1 = - NUM00 ; \n\tint newValue2 = - NUM00 ; \n\tString updateQuery = $F103214 ( DatabaseCreator , newValue1 ) + newValue2 + NUM00 ; \n\ttry { \n\t\t$F32305 ( num , statement , updateQuery ) int expectedUpdated = NUM00 ; \n\t\tassertEquals ( NUM00 , expectedUpdated , num ) ; \n\t\t$F32306 ( selectQuery , DatabaseCreator ) $F15328 ( result , statement , selectQuery ) while $F1682 ( result ) { \n\t\t\t$F15339 ( id , result ) } \n\t\t$F59 ( result ) } \n\t$F32310 ( fail , e ) } \n"}, {"code": "public long toLong $F72 $F13598 ( m_value ) "}, {"code": "public static void moveToDirectory $F42859 ( src , destDir , createDestDir ) throws IOException { \n\t$F896 ( src ) $F896 ( destDir ) $F130782 ( src ) if $F3444 ( src ) { \n\t\tmoveDirectoryToDirectory ( src , destDir , createDestDir ) ; \n\t\t} \n\telse { \n\t\tmoveFileToDirectory ( src , destDir , createDestDir ) ; \n\t\t} \n\t} \n"}, {"code": "public static int copyAndCloseBoth ( Reader input , Writer output ) throws IOException { \n\ttry $F8587 ( copyAndCloseOutput , input , output ) $F3229 ( input ) } \n"}, {"code": "protected void writeHeader $F72 throws IOException { \n\t$F1325 ( header , SHAPE_FILE_HEADER_LENGTH ) writeBEInt ( header , NUM00 , SHAPE_FILE_CODE ) ; \n\twriteBEInt ( header , NUM00 , NUM00 ) ; \n\twriteLEInt ( header , NUM00 , SHAPE_FILE_VERSION ) ; \n\twriteLEInt ( header , NUM00 , SHAPE_TYPE_NULL ) ; \n\twriteLEDouble ( header , NUM00 , NUM00 ) ; \n\twriteLEDouble ( header , NUM00 , NUM00 ) ; \n\twriteLEDouble ( header , NUM00 , NUM00 ) ; \n\twriteLEDouble ( header , NUM00 , NUM00 ) ; \n\t$F927 ( raf ) $F11584 ( raf , header , SHAPE_FILE_HEADER_LENGTH ) } \n"}, {"code": "public String hashKeyForDisk ( String key ) { \n\tString cacheKey ; \n\ttry { \n\t\t$F10310 ( mDigest , MessageDigest ) $F31951 ( mDigest , key ) cacheKey = bytesToHexString ( mDigest . digest ( ) ) ; \n\t\t} \n\tcatch ( NoSuchAlgorithmException e ) { \n\t\tcacheKey = String . valueOf ( key . hashCode ( ) ) ; \n\t\t} \n\treturn cacheKey ; \n\t} \n"}, {"code": "private Favorite packFavorite ( Cursor c ) { \n\tFavorite favorite = new Favorite $F72 ; \n\tfavorite . id = c . getLong ( ID_INDEX ) ; \n\tfavorite . screen = c . getInt ( SCREEN_INDEX ) ; \n\tfavorite . container = c . getInt ( CONTAINER_INDEX ) ; \n\tfavorite . cellX = c . getInt ( CELLX_INDEX ) ; \n\tfavorite . cellY = c . getInt ( CELLY_INDEX ) ; \n\tfavorite . spanX = c . getInt ( SPANX_INDEX ) ; \n\tfavorite . spanY = c . getInt ( SPANY_INDEX ) ; \n\tfavorite . iconType = c . getInt ( ICON_TYPE_INDEX ) ; \n\tif ( favorite . iconType == Favorites . ICON_TYPE_RESOURCE ) { \n\t\t$F19101 ( iconPackage , c , ICON_PACKAGE_INDEX ) if $F20899 ( TextUtils , iconPackage ) $F6988 ( favorite , iconPackage ) $F19101 ( iconResource , c , ICON_RESOURCE_INDEX ) if $F20899 ( TextUtils , iconResource ) $F6988 ( favorite , iconResource ) } \n\tif ( favorite . iconType == Favorites . ICON_TYPE_BITMAP ) { \n\t\t$F96 blob = c . getBlob ( ICON_INDEX ) ; \n\t\tif $F22195 ( blob ) { \n\t\t\tfavorite . icon = blob ; \n\t\t\t} \n\t\t} \n\t$F19101 ( title , c , TITLE_INDEX ) if $F20899 ( TextUtils , title ) $F6988 ( favorite , title ) $F19101 ( intentDescription , c , INTENT_INDEX ) if $F20899 ( TextUtils , intentDescription ) { \n\t\ttry { \n\t\t\tIntent intent = Intent . parseUri ( intentDescription , NUM00 ) ; \n\t\t\tintent . removeExtra ( ItemInfo . EXTRA_PROFILE ) ; \n\t\t\tfavorite . intent = intent . toUri ( NUM00 ) ; \n\t\t\t} \n\t\tcatch ( URISyntaxException e ) $F17555 ( Log , TAG , e ) } \n\tfavorite . itemType = c . getInt ( ITEM_TYPE_INDEX ) ; \n\tif ( favorite . itemType == Favorites . ITEM_TYPE_APPWIDGET ) { \n\t\tfavorite . appWidgetId = c . getInt ( APPWIDGET_ID_INDEX ) ; \n\t\t$F19101 ( appWidgetProvider , c , APPWIDGET_PROVIDER_INDEX ) if $F20899 ( TextUtils , appWidgetProvider ) $F6988 ( favorite , appWidgetProvider ) } \n\treturn favorite ; \n\t} \n"}, {"code": "public static void unregister ( SPINThreadFunctions old ) { \n\tif ( old != null ) $F24242 ( localFunctions , old ) else $F38599 ( localFunctions ) } \n"}, {"code": "public static boolean loadProperties ( Properties properties , InputStream propsIn ) { \n\ttry { \n\t\tproperties . load ( propsIn ) ; \n\t\treturn _BOOL ; \n\t\t} \n\tcatch ( $F3258 e ) { \n\t\tif $F6456 ( logger , Level ) $F18144 ( logger ) return _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public Complex sin $F72 { \n\treturn new Complex ( Math . sin ( re ) * Math . cosh ( im ) , Math . cos ( re ) * Math . sinh ( im ) ) ; \n\t} \n"}, {"code": "@ OnClick ( R . id . dismiss_button ) public void onDismissClick ( View view ) { \n\tif ( SystemClock . elapsedRealtime ( ) - mLastClickTime < NUM00 ) $F932 $F41468 ( mLastClickTime , SystemClock ) dismissOffer ( getAdapterPosition ( ) ) ; \n\tif ( snackbar != null ) { \n\t\tsnackbar . dismiss ( ) ; \n\t\t} \n\t} \n"}, {"code": "public Table findTable ( String name ) $F8587 ( findTable , name , _BOOL ) "}, {"code": "$F113898 ( buf , s , i , c , Integer ) "}, {"code": "public void draw ( final Graphics g , final int height , final int width ) { \n\tint constantDim ; \n\tint changingDim ; \n\tif ( orientation == X_AXIS ) { \n\t\tchangingDim = width ; \n\t\tconstantDim = height ; \n\t\t} \n\telse { \n\t\tchangingDim = height ; \n\t\tconstantDim = width ; \n\t\t} \n\tint dimStep ; \n\tif ( fixedSteps ) { \n\t\tdimStep = changingDim / STEPS ; \n\t\t} \n\telse { \n\t\tdimStep = NUM00 ; \n\t\tSTEPS = changingDim / dimStep ; \n\t\t} \n\tfloat red = _redT ; \n\tfloat green = _greenT ; \n\tfloat blue = _blueT ; \n\tint offset = NUM00 ; \n\tfor ( $F119 ( i , STEPS ) ) { \n\t\tColor c = new Color ( round ( red ) , round ( green ) , round ( blue ) ) ; \n\t\tg . setColor ( c ) ; \n\t\tdrawRect ( g , offset , constantDim , dimStep ) ; \n\t\toffset += dimStep ; \n\t\tfloat value = shader . getValue ( $F65168 ( i , STEPS ) ) ; \n\t\tred = _redT + ( _redB - _redT ) * value ; \n\t\tgreen = _greenT + ( _greenB - _greenT ) * value ; \n\t\tblue = _blueT + ( _blueB - _blueT ) * value ; \n\t\t} \n\tColor c = new Color ( round ( red ) , round ( green ) , round ( blue ) ) ; \n\tg . setColor ( c ) ; \n\tdrawRect ( g , offset , constantDim , changingDim - offset ) ; \n\t} \n"}, {"code": "public static $F1986 convexHull ( $F1986 pts , int len , $F5415 angles , $F2027 idx , $F2027 stack ) { \n\tint plen = len / NUM00 - NUM00 ; \n\t$F6853 ( len ) if ( angles . length < plen || idx . length < plen || stack . length < len / NUM00 ) $F825 int i0 = NUM00 ; \n\tfor ( $F6225 ( i , len ) ) { \n\t\tif ( pts [ i + NUM00 ] < pts [ i0 + NUM00 ] ) { \n\t\t\ti0 = i ; \n\t\t\t} \n\t\telse if ( pts [ i + NUM00 ] == pts [ i0 + NUM00 ] ) { \n\t\t\ti0 = ( pts [ i ] < pts [ i0 ] ? i : i0 ) ; \n\t\t\t} \n\t\t} \n\tfor ( int i = NUM00 , j = NUM00 ; \n\ti < len ; \n\ti += NUM00 ) { \n\t\t$F73688 ( i , i0 ) angles [ j ] = ( float ) Math . atan2 ( $F3123 ( pts , i , i0 ) , pts [ i ] - pts [ i0 ] ) ; \n\t\tidx [ j ++ ] = i ; \n\t\t} \n\tArrayLib . sort ( angles , idx , plen ) ; \n\tfloat angle = angles [ NUM00 ] ; \n\tint ti = NUM00 , tj = idx [ NUM00 ] ; \n\tfor ( $F119 ( i , plen ) ) { \n\t\tint j = idx [ i ] ; \n\t\tif ( angle == angles [ i ] ) { \n\t\t\tdouble x1 = pts [ tj ] - pts [ i0 ] ; \n\t\t\tdouble y1 = $F3123 ( pts , tj , i0 ) ; \n\t\t\tdouble x2 = pts [ j ] - pts [ i0 ] ; \n\t\t\tdouble y2 = $F3123 ( pts , j , i0 ) ; \n\t\t\tdouble d1 = x1 * x1 + y1 * y1 ; \n\t\t\tdouble d2 = x2 * x2 + y2 * y2 ; \n\t\t\tif ( d1 >= d2 ) { \n\t\t\t\tidx [ i ] = - NUM00 ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tidx [ ti ] = - NUM00 ; \n\t\t\t\tangle = angles [ i ] ; \n\t\t\t\tti = i ; \n\t\t\t\ttj = j ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tangle = angles [ i ] ; \n\t\t\tti = i ; \n\t\t\ttj = j ; \n\t\t\t} \n\t\t} \n\tint sp = NUM00 ; \n\tstack [ sp ++ ] = i0 ; \n\tint j = NUM00 ; \n\tfor ( int k = NUM00 ; \n\tk < NUM00 ; \n\tj ++ ) { \n\t\tif ( idx [ j ] != - NUM00 ) { \n\t\t\tstack [ sp ++ ] = idx [ j ] ; \n\t\t\tk ++ ; \n\t\t\t} \n\t\t} \n\tfor ( ; \n\tj < plen ; \n\tj ++ ) { \n\t\tif $F13071 ( idx , j ) $F598 while ( isNonLeft ( i0 , stack [ sp - NUM00 ] , stack [ sp - NUM00 ] , idx [ j ] , pts ) ) { \n\t\t\tsp -- ; \n\t\t\t} \n\t\tstack [ sp ++ ] = idx [ j ] ; \n\t\t} \n\t$F1986 hull = new double [ NUM00 * sp ] ; \n\tfor ( $F119 ( i , sp ) ) { \n\t\thull [ NUM00 * i ] = pts [ stack [ i ] ] ; \n\t\thull [ NUM00 * i + NUM00 ] = pts [ stack [ i ] + NUM00 ] ; \n\t\t} \n\treturn hull ; \n\t} \n"}, {"code": "private void sendMessages $F72 { \n\tList < MurmurMessage > messages = getMessages ( NUM00 ) ; \n\tMurmurMessage exchangeInfoMessage = new MurmurMessage ( NUM00 , Integer . toString ( messages . size ( ) ) , NUM00 ) ; \n\tif ( lengthValueWrite ( out , exchangeInfoMessage . toJSON ( MurmurApplication . getContext ( ) , NUM00 , NUM00 ) ) ) { \n\t\tfor ( MurmurMessage message : messages ) { \n\t\t\tList < MurmurMessage > $F204 ( packet ) ; \n\t\t\tpacket . add ( message ) ; \n\t\t\tCleartextMessages messagesMessage = new CleartextMessages ( ( ArrayList < MurmurMessage > ) packet ) ; \n\t\t\tlengthValueWrite ( out , messagesMessage . toJson ( MurmurApplication . getContext ( ) ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "protected void init ( String str ) { \n\t$F1749 ( len , str ) $F104602 ( text , len ) $F104602 ( lcText , len ) for ( $F119 ( i , len ) ) { \n\t\t$F1280 ( c , str , i ) text [ i ] = c ; \n\t\tif $F58237 ( c ) $F114344 ( lcText , i ) else lcText [ i ] = $F19297 ( c ) ? c : Character . toLowerCase ( c ) ; \n\t\t} \n\t} \n"}, {"code": "private void updateAttrs ( SvcReg reg , EntryRep entry , $F131 values ) { \n\tEntryClass eclass = entry . eclass ; \n\tfor ( $F45516 ( fldidx , values ) ) { \n\t\tObject oval = entry . fields [ fldidx ] ; \n\t\tObject nval = values [ fldidx ] ; \n\t\tif $F10335 ( nval , oval ) { \n\t\t\teclass = getDefiningClass ( eclass , fldidx ) ; \n\t\t\tHashMap map = addAttr ( reg , eclass , fldidx , nval ) ; \n\t\t\tentry . fields [ fldidx ] = nval ; \n\t\t\tif ( hasAttr ( reg , eclass , fldidx , oval ) ) $F598 $F73534 ( regs , map , oval ) regs . remove ( regs . indexOf ( reg ) ) ; \n\t\t\tif $F2979 ( regs ) map . remove ( oval ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void finalizeNetworkConstruction $F72 { \n\tSet < MotifLink > keySet = nodeSetsDepartingFromLink . keySet ( ) ; \n\tnodesWithLink = new HashMap < MotifLink , $F93424 > $F716 ( keySet ) ; \n\tfor ( MotifLink motifLink : keySet ) { \n\t\t$F6870 nodes = nodeSetsDepartingFromLink . get ( motifLink ) ; \n\t\t$F93424 n = new $F93424 ( nodes ) ; \n\t\tCollections . sort ( n ) ; \n\t\tnodesWithLink . put ( motifLink , n ) ; \n\t\t} \n\tnodeSetsDepartingFromLink = null ; \n\t} \n"}, {"code": "public Collection < AISValidationFailure > failures $F72 { \n\treturn Collections . unmodifiableCollection ( failureList ) ; \n\t} \n"}, {"code": "public static GetInactiveImagesResponse checkGetInactiveImagesResponse ( GetInactiveImagesResponse response ) throws RpcException { \n\t$F10635 ( logger , response ) switch $F52729 ( response ) { \n\t\tcase OK : $F597 $F52738 ( SYSTEM_ERROR , response ) case DATASTORE_NOT_FOUND : throw new DatastoreNotFoundException $F52730 ( response ) ; \n\t\tcase OPERATION_IN_PROGRESS : throw new OperationInProgressException $F52730 ( response ) ; \n\t\t$F52745 ( String , response ) } \n\treturn response ; \n\t} \n"}, {"code": "public void runTest $F72 throws Throwable { \n\tDocument doc ; \n\tElement root ; \n\tNodeList elementList ; \n\tNode firstChild ; \n\tNodeList textList ; \n\tCharacterData textNode ; \n\tString data ; \n\t$F236 ( doc , load , _BOOL ) $F103340 ( root , doc ) $F5896 ( root ) $F237 ( elementList , root ) $F238 ( firstChild , elementList ) textList = firstChild . getChildNodes ( ) ; \n\ttextNode = ( CharacterData ) textList . item ( NUM00 ) ; \n\t$F4055 ( data , textNode ) assertEquals ( NUM00 , NUM00 , data ) ; \n\t} \n"}, {"code": "public double semiDeviation $F72 { \n\treturn $F86242 ( Math , semiVariance ) ; \n\t} \n"}, {"code": "private void checkPostsDisplayOnRecyclerView ( List < Post > postsToCheck , int position ) { \n\tint columnCount = NUM00 ; \n\tint size = postsToCheck . size ( ) + position ; \n\tint pos = NUM00 ; \n\tfor ( int i = position ; \n\ti < size ; \n\ti ++ ) { \n\t\tcheckItemAtPosition ( i , postsToCheck . get ( pos ) ) ; \n\t\tif ( ( ( i + NUM00 ) % columnCount ) == NUM00 ) { \n\t\t\tint nextRowStart = i + columnCount ; \n\t\t\tint nextRowEnd = nextRowStart - columnCount + NUM00 ; \n\t\t\tfor ( int n = nextRowStart ; \n\t\t\tn >= nextRowEnd ; \n\t\t\tn -- ) { \n\t\t\t\tcheckItemAtPosition ( n , postsToCheck . get ( n - position ) ) ; \n\t\t\t\t} \n\t\t\ti = i + columnCount ; \n\t\t\t} \n\t\tpos ++ ; \n\t\t} \n\t} \n"}, {"code": "private void addDependentClassesToWorklist ( GVCongruenceClass c ) { \n\tfor ( ValueGraphVertex v : c ) { \n\t\tfor ( $F245865 e = v . inNodes ( ) ; \n\t\te . hasMoreElements ( ) ; \n\t\t) { \n\t\t\tValueGraphVertex in = ( ValueGraphVertex ) e . nextElement ( ) ; \n\t\t\tint vn = in . getValueNumber ( ) ; \n\t\t\tGVCongruenceClass x = B . get ( vn ) ; \n\t\t\tworkList . push ( x ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public synchronized JSONObject toJSONObject $F72 { \n\t$F60661 ( res ) res . putAll ( this ) ; \n\treturn res ; \n\t} \n"}, {"code": "private Shape createEllipseInternal $F2026 ( x , y , w , h ) { \n\tellipse . setFrame ( x , y , w , h ) ; \n\treturn ellipse ; \n\t} \n"}, {"code": "public static String write ( StringBuilder sb , String ... strings ) { \n\tfor ( String string : strings ) sb . append ( string ) ; \n\t$F92 ( sb ) } \n"}, {"code": "public ImportFolderValidation validate ( final String path ) { \n\t$F18062 ( Check , path ) if ( validationCache == null ) { \n\t\t$F12775 ( validationCache ) } \n\telse { \n\t\tif $F1710 ( validationCache , path ) { \n\t\t\treturn ( ImportFolderValidation ) validationCache . get ( path ) ; \n\t\t\t} \n\t\t} \n\tfinal ImportFolderValidation validation = computeValidation ( path ) ; \n\tvalidationCache . put ( path , validation ) ; \n\treturn validation ; \n\t} \n"}, {"code": "private static $F96 hmac_sha ( String crypto , $F96 keyBytes , $F96 text ) { \n\ttry { \n\t\tMac hmac ; \n\t\thmac = Mac . getInstance ( crypto ) ; \n\t\t$F89939 ( macKey , keyBytes ) hmac . init ( macKey ) ; \n\t\t$F157 ( hmac , text ) } \n\tcatch ( GeneralSecurityException gse ) { \n\t\tthrow new UndeclaredThrowableException ( gse ) ; \n\t\t} \n\t} \n"}, {"code": "public static String fetchCgName ( String clusterCgName ) { \n\tString cgName = null ; \n\tif $F1032 ( clusterCgName ) { \n\t\t$F35105 ( tmp , clusterCgName , SPLITTER ) cgName = tmp [ NUM00 ] ; \n\t\t} \n\treturn cgName ; \n\t} \n"}, {"code": "public void test_chooseServerAlias $F72 { \n\tinit ( SERVER ) ; \n\tassertNull ( manager . chooseServerAlias ( null , null , $F12829 ) ) ; \n\tassertNull ( manager . chooseServerAlias ( NUM00 , null , $F12829 ) ) ; \n\tString res = manager . chooseServerAlias ( TYPE_RSA , null , null ) ; \n\tassertNotNull ( res ) ; \n\tassertEquals ( NUM00 , res . toLowerCase ( ) ) ; \n\tres = manager . chooseServerAlias ( TYPE_RSA , null , $F12829 ) ; \n\tassertNotNull ( res ) ; \n\tassertEquals ( NUM00 , res . toLowerCase ( ) ) ; \n\t} \n"}, {"code": "public void add ( int index , Entity entity ) { \n\tif $F105 ( entities , entity ) $F322689 ( entity ) if ( entity . getEntityType ( ) != entityType ) { \n\t\tthrow new IllegalStateException ( NUM00 + entity . getEntityType ( ) + NUM00 + getParent ( ) + NUM00 + getName ( ) ) ; \n\t\t} \n\tif ( entity . isClearlyNotInDatabase ( ) ) $F207 ( newEntities , entity ) entities . add ( index , entity ) ; \n\t} \n"}, {"code": "public static ControlTagCacheObject createTestEquipmentAlive $F72 { \n\tControlTagCacheObject cacheObject = new ControlTagCacheObject ( $F130579 , NUM00 , NUM00 , DataTagConstants . MODE_TEST ) ; \n\t$F271284 ( cacheObject ) cacheObject . setLogged ( _BOOL ) ; \n\tcacheObject . setUnit ( NUM00 ) ; \n\tcacheObject . setDipAddress ( NUM00 ) ; \n\tcacheObject . setJapcAddress ( NUM00 ) ; \n\tcacheObject . setValue ( new Long $F30 ( System ) ) ; \n\tcacheObject . setValueDescription ( NUM00 ) ; \n\tcacheObject . setSimulated ( _BOOL ) ; \n\tcacheObject . setMinValue ( Long . MIN_VALUE ) ; \n\tcacheObject . setMaxValue ( Long . MAX_VALUE ) ; \n\tcacheObject . setValueDictionary ( new DataTagValueDictionary $F72 ) ; \n\tcacheObject . setAddress ( new DataTagAddress $F72 ) ; \n\tcacheObject . setDataTagQuality ( createValidQuality ( ) ) ; \n\tcacheObject . setCacheTimestamp ( $F32 ( System ) ) ; \n\tcacheObject . setDaqTimestamp ( $F32 ( System ) ) ; \n\tcacheObject . setSourceTimestamp ( $F32 ( System ) ) ; \n\treturn cacheObject ; \n\t} \n"}, {"code": "public DistributedLogConfiguration $F72 { \n\tsuper ( ) ; \n\taddConfiguration ( new SystemConfiguration $F72 ) ; \n\t} \n"}, {"code": "public static double sampleStandardDeviation ( int size , double sampleVariance ) { \n\tdouble s , Cn ; \n\tint n = size ; \n\ts = Math . sqrt ( sampleVariance ) ; \n\tif ( n > NUM00 ) { \n\t\tCn = NUM00 + NUM00 / ( NUM00 * ( n - NUM00 ) ) ; \n\t\t} \n\telse { \n\t\tCn = Math . sqrt ( ( n - NUM00 ) * NUM00 ) * Gamma . gamma ( ( n - NUM00 ) * NUM00 ) / Gamma . gamma ( n * NUM00 ) ; \n\t\t} \n\treturn Cn * s ; \n\t} \n"}, {"code": "void normalize $F72 throws IOException { \n\t$F1749 ( end , chars ) $F32905 ( end ) int pos = NUM00 ; \n\tint codepoint = Character . codePointAt ( chars , NUM00 ) ; \n\tboolean escaped = _BOOL ; \n\tfor ( int i = NUM00 ; \n\ti < end ; \n\t) { \n\t\t$F59912 ( charCount , Character , codepoint ) int i2 = i + charCount ; \n\t\tint nextCodepoint = i2 < end ? Character . codePointAt ( chars , i2 ) : - NUM00 ; \n\t\tif ( escaped ) { \n\t\t\tescaped = _BOOL ; \n\t\t\tif ( escapeOneCodepoint ( pos , i - NUM00 , codepoint , nextCodepoint ) ) { \n\t\t\t\tpos = i2 ; \n\t\t\t\t} \n\t\t\t} \n\t\telse if ( codepoint == NUM00 ) { \n\t\t\tescaped = _BOOL ; \n\t\t\t} \n\t\telse if ( escapeOneCodepoint ( pos , i , codepoint , nextCodepoint ) ) { \n\t\t\tpos = i2 ; \n\t\t\t} \n\t\ti = i2 ; \n\t\tcodepoint = nextCodepoint ; \n\t\t} \n\tout . append ( chars , pos , end ) ; \n\t} \n"}, {"code": "protected void rebuildListModel $F72 { \n\tDefaultListModel dlm = ( DefaultListModel ) getListModel ( ) ; \n\tOMGraphicList list = getList ( ) ; \n\t$F10498 ( selectedIndicies ) if ( list != null ) { \n\t\tif $F22195 ( selectedTiles ) { \n\t\t\t$F14244 ( selectedIndicies , selectedTiles ) } \n\t\tint tileCount = NUM00 ; \n\t\tint selectedIndex = NUM00 ; \n\t\tif ( selectedIndicies != null ) { \n\t\t\tfor ( OMGraphic omg : list ) { \n\t\t\t\tImageTile imageTile = ( ImageTile ) omg ; \n\t\t\t\tif ( imageTile . isSelected ( ) && selectedIndex < selectedIndicies . length ) $F52339 ( selectedIndicies , selectedIndex , tileCount ) tileCount ++ ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F725 ( dlm ) for ( OMGraphic omg : list ) { \n\t\t\ttileCount ++ ; \n\t\t\tdlm . addElement ( omg ) ; \n\t\t\t} \n\t\t} \n\tif ( resultsList != null ) { \n\t\tif ( selectedIndicies != null ) { \n\t\t\tresultsList . setSelectedIndices ( selectedIndicies ) ; \n\t\t\t} \n\t\t$F8798 ( resultsList ) } \n\t} \n"}, {"code": "public void tick $F72 $F73598 ( tick ) "}, {"code": "public Result send ( Email email , boolean ... sync ) { \n\treturn service . send ( email , boolToInt ( _BOOL , sync ) ) ; \n\t} \n"}, {"code": "private $F59542 ( isPopulating ) "}, {"code": "public void processAttributes ( java . io . Writer writer , int nAttrs ) throws $F35763 { \n\tString encoding = getEncoding ( ) ; \n\tfor ( $F119 ( i , nAttrs ) ) { \n\t\tfinal String name = m_attributes . getQName ( i ) ; \n\t\tfinal String value = m_attributes . getValue ( i ) ; \n\t\t$F3410 ( writer ) writer . write ( name ) ; \n\t\t$F3410 ( writer ) writeAttrString ( writer , value , encoding ) ; \n\t\t$F3410 ( writer ) } \n\t} \n"}, {"code": "public int processor $F72 $F22645 ( Integer , fields ) "}, {"code": "public void addNativeChildAt ( ReactShadowNode child , int nativeIndex ) { \n\tAssertions . assertCondition ( ! mIsLayoutOnly ) ; \n\tAssertions . assertCondition ( ! child . mIsLayoutOnly ) ; \n\t$F216949 ( mNativeChildren ) mNativeChildren . add ( nativeIndex , child ) ; \n\tchild . mNativeParent = this ; \n\t} \n"}, {"code": "public boolean containsKey ( final Object eKey ) $F298 ( _elementOrder , eKey ) "}, {"code": "private void handleExitMessage ( final Component component , final long nativeCtxt ) { \n\tpostDropTargetEvent ( component , NUM00 , NUM00 , DnDConstants . ACTION_NONE , DnDConstants . ACTION_NONE , null , nativeCtxt , SunDropTargetEvent . MOUSE_EXITED , SunDropTargetContextPeer . DISPATCH_SYNC ) ; \n\t} \n"}, {"code": "public void addParameterAnnotations ( CstMethodRef method , AnnotationsList list ) { \n\tif ( parameterAnnotations == null ) { \n\t\tparameterAnnotations = new ArrayList < ParameterAnnotationStruct > $F72 ; \n\t\t} \n\tparameterAnnotations . add ( new ParameterAnnotationStruct ( method , list ) ) ; \n\t} \n"}, {"code": "public static String unhtmlSingleQuotes ( final String str ) $F8480 ( str ) "}, {"code": "public void addInputMethodListener ( InputMethodListener l ) { \n\tm_textArea . addInputMethodListener ( l ) ; \n\t} \n"}, {"code": "public void initRawSwap ( $F17427 cellIds ) { \n\tthis . cellIds = new $F17427 ( cellIds ) ; \n\t$F725 ( cellIds ) } \n"}, {"code": "protected void encryptFinal $F72 throws IOException { \n\t$F14257 ( inBuffer ) $F725 ( outBuffer ) try { \n\t\tcipher . doFinal ( inBuffer , outBuffer ) ; \n\t\t} \n\tcatch ( ShortBufferException e ) $F5615 ( e ) catch ( IllegalBlockSizeException e ) $F5615 ( e ) catch ( BadPaddingException e ) $F5615 ( e ) $F725 ( inBuffer ) $F14257 ( outBuffer ) while $F5720 ( outBuffer ) $F4050 ( output , outBuffer ) } \n"}, {"code": "private static boolean spanWillOverlap ( Spannable spanText , URLSpan [ ] spanList , int start , int end ) { \n\t$F3627 ( start , end , _BOOL ) for ( URLSpan span : spanList ) { \n\t\tint existingStart = spanText . getSpanStart ( span ) ; \n\t\tint existingEnd = spanText . getSpanEnd ( span ) ; \n\t\tif ( ( start >= existingStart && start < existingEnd ) || end > existingStart && end <= existingEnd ) { \n\t\t\tif ( Log . isLoggable ( TAG , Log . VERBOSE ) ) { \n\t\t\t\tCharSequence seq = spanText . subSequence ( start , end ) ; \n\t\t\t\tLog . v ( TAG , NUM00 + seq + NUM00 ) ; \n\t\t\t\t} \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "private HashMap < Integer , Trie > buildLookupTable ( final Map < Integer , List < Trie > > childTries ) { \n\tHashMap < Integer , Trie > $F72141 ( lookup , childTries ) ; \n\tfor ( int id : childTries . keySet ( ) ) { \n\t\tfinal List < Trie > tries = childTries . get ( id ) ; \n\t\tif $F10471 ( tries ) { \n\t\t\tlookup . put ( id , tries . get ( NUM00 ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tlookup . put ( id , new SliceAggregatingTrie ( tries ) ) ; \n\t\t\t} \n\t\t} \n\treturn lookup ; \n\t} \n"}, {"code": "public void addMarker ( int x , int z , Color color ) { \n\tMapMarker marker = new MapMarker $F72 ; \n\tmarker . x = x ; \n\tmarker . z = z ; \n\tmarker . color = color ; \n\tmarkers . add ( marker ) ; \n\t} \n"}, {"code": "private void commitDiscard ( long time , boolean allowDiscard ) { \n\t$F8249 ( mDiscardingTab ) assert mStackTabs != null ; \n\tStackTab discarded = mDiscardingTab ; \n\tif ( Math . abs ( discarded . getDiscardAmount ( ) ) / getDiscardRange ( ) > DISCARD_COMMIT_THRESHOLD && allowDiscard ) { \n\t\tmLayout . uiRequestingCloseTab ( time , discarded . getId ( ) ) ; \n\t\tRecordUserAction . record ( NUM00 ) ; \n\t\tRecordUserAction . record ( NUM00 ) ; \n\t\t} \n\telse { \n\t\tstartAnimation ( time , OverviewAnimationType . UNDISCARD ) ; \n\t\t} \n\tmDiscardingTab = null ; \n\trequestUpdate ( ) ; \n\t} \n"}, {"code": "public $F6689 buildJavaMethodParameters ( AssetOptionsContext context , $F2540 ( availableAssets ) , AssetOptionsMethodInfo assetMethod ) { \n\tfinal $F6689 javaMethodParameters = Lists . newArrayList ( ) ; \n\tjavaMethodParameters . add ( context ) ; \n\tfor ( String parentAssetName : assetMethod . assetDependencies ) { \n\t\t$F1729 ( parentAssetValue , availableAssets , parentAssetName ) $F2199 ( index , javaMethodParameters ) Object value = assetMethod . convertParameter ( index , parentAssetValue ) ; \n\t\tjavaMethodParameters . add ( value ) ; \n\t\t} \n\treturn javaMethodParameters ; \n\t} \n"}, {"code": "private static ImageView pickGraphic ( RestartableService startStoppable ) { \n\tfinal boolean running = startStoppable . isRunning ( ) ; \n\tfinal ImageView icon = running ? new ImageView ( stopImage ) : new ImageView ( startImage ) ; \n\tif ( ! running ) { \n\t\tfinal FadeTransition ft = new FadeTransition ( Duration . millis ( NUM00 ) , icon ) ; \n\t\tft . setToValue ( NUM00 ) ; \n\t\tft . setCycleCount ( Transition . INDEFINITE ) ; \n\t\tft . setAutoReverse ( _BOOL ) ; \n\t\t$F6193 ( ft ) } \n\ticon . setFitHeight ( DPIUtility . MINI_ICON_SIZE ) ; \n\ticon . setFitWidth ( DPIUtility . MINI_ICON_SIZE ) ; \n\treturn icon ; \n\t} \n"}, {"code": "$F45263 ( filename , extension , _BOOL , indexOfExtension , fileExt , getExtension ) "}, {"code": "public void createCashBasedJournalEntriesAndReversalsForSavingsCharges ( final Office office , final String currencyCode , final CASH_ACCOUNTS_FOR_SAVINGS accountTypeToBeDebited , final CASH_ACCOUNTS_FOR_SAVINGS accountTypeToBeCredited , final Long savingsProductId , final Long paymentTypeId , final Long loanId , final String transactionId , final Date transactionDate , final BigDecimal totalAmount , final Boolean isReversal , final List < ChargePaymentDTO > chargePaymentDTOs ) { \n\tif $F6887 ( chargePaymentDTOs ) { \n\t\tthrow new PlatformDataIntegrityException $F6600 ; \n\t\t} \n\tChargePaymentDTO chargePaymentDTO = chargePaymentDTOs . get ( NUM00 ) ; \n\tfinal GLAccount chargeSpecificAccount = getLinkedGLAccountForSavingsCharges ( savingsProductId , accountTypeToBeCredited . getValue ( ) , chargePaymentDTO . getChargeId ( ) ) ; \n\tfinal GLAccount savingsControlAccount = getLinkedGLAccountForSavingsProduct ( savingsProductId , accountTypeToBeDebited . getValue ( ) , paymentTypeId ) ; \n\tif ( isReversal ) { \n\t\tcreateDebitJournalEntryForSavings ( office , currencyCode , chargeSpecificAccount , loanId , transactionId , transactionDate , totalAmount ) ; \n\t\tcreateCreditJournalEntryForSavings ( office , currencyCode , savingsControlAccount , loanId , transactionId , transactionDate , totalAmount ) ; \n\t\t} \n\telse { \n\t\tcreateDebitJournalEntryForSavings ( office , currencyCode , savingsControlAccount , loanId , transactionId , transactionDate , totalAmount ) ; \n\t\tcreateCreditJournalEntryForSavings ( office , currencyCode , chargeSpecificAccount , loanId , transactionId , transactionDate , totalAmount ) ; \n\t\t} \n\t} \n"}, {"code": "public void addAll ( JsonArray array ) { \n\t$F27392 ( elements , array ) } \n"}, {"code": "public double nextDouble ( double k ) { \n\tdouble u , v , w , c , z ; \n\t$F61934 ( k ) if ( k_set != k ) { \n\t\ttau = NUM00 + Math . sqrt ( NUM00 + NUM00 * k * k ) ; \n\t\trho = ( tau - Math . sqrt ( NUM00 * tau ) ) / ( NUM00 * k ) ; \n\t\tr = ( NUM00 + rho * rho ) / ( NUM00 * rho ) ; \n\t\tk_set = k ; \n\t\t} \n\tdo { \n\t\t$F76340 ( u , randomGenerator ) $F76340 ( v , randomGenerator ) z = Math . cos ( Math . PI * u ) ; \n\t\tw = ( NUM00 + r * z ) / ( r + z ) ; \n\t\tc = k * ( r - w ) ; \n\t\t} \n\twhile ( ( c * ( NUM00 - c ) < v ) && ( Math . log ( c / v ) + NUM00 < c ) ) ; \n\treturn ( randomGenerator . raw ( ) > NUM00 ) ? Math . acos ( w ) : - Math . acos ( w ) ; \n\t} \n"}, {"code": "public void testListOptions $F72 { \n\tif ( m_OptionTester . getOptionHandler ( ) != null ) { \n\t\tif $F43642 ( m_OptionTester ) $F1210 ( fail ) } \n\t} \n"}, {"code": "$F1 final public void mouseReleased ( MouseEvent e ) { \n\tif ( isComponentPressedDown ) { \n\t\tmouseLiberalClick ( e ) ; \n\t\t$F657 ( now , System ) long timeBetweenUnusedClicks = now - lastUnusedLiberalSingleClickTimeStamp ; \n\t\tif ( timeBetweenUnusedClicks <= slowestDoubleClickMilliseconds ) { \n\t\t\tmouseLiberalDoubleClick ( e ) ; \n\t\t\tlastUnusedLiberalSingleClickTimeStamp = NUM00 ; \n\t\t\t} \n\t\telse $F22067 ( lastUnusedLiberalSingleClickTimeStamp , System ) } \n\tisComponentPressedDown = _BOOL ; \n\tmouseRelease ( e ) ; \n\t} \n"}, {"code": "public static ModificationType valueOf ( final int intValue ) { \n\tModificationType result = null ; \n\tif ( NUM00 <= intValue && intValue < ELEMENTS . length ) { \n\t\tresult = ELEMENTS [ intValue ] ; \n\t\t} \n\tif ( result == null ) { \n\t\tresult = new ModificationType ( intValue , NUM00 + intValue + NUM00 , Enum . UNKNOWN ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "$F1 public void fillHeader ( Header hdr ) { \n\ttry { \n\t\tStandard . context ( AsciiTable . class ) ; \n\t\thdr . setXtension ( NUM00 ) ; \n\t\thdr . setBitpix ( BasicHDU . BITPIX_BYTE ) ; \n\t\thdr . setNaxes ( NUM00 ) ; \n\t\thdr . setNaxis ( NUM00 , this . rowLen ) ; \n\t\thdr . setNaxis ( NUM00 , this . nRows ) ; \n\t\tCursor < String , HeaderCard > iter = hdr . iterator ( ) ; \n\t\titer . setKey ( NAXIS2 . key ( ) ) ; \n\t\t$F24630 ( iter ) iter . add ( new HeaderCard ( PCOUNT . key ( ) , NUM00 , PCOUNT . comment ( ) ) ) ; \n\t\titer . add ( new HeaderCard ( GCOUNT . key ( ) , NUM00 , GCOUNT . comment ( ) ) ) ; \n\t\titer . add ( new HeaderCard ( TFIELDS . key ( ) , this . nFields , TFIELDS . comment ( ) ) ) ; \n\t\tfor ( int i = NUM00 ; \n\t\ti < this . nFields ; \n\t\ti += NUM00 ) { \n\t\t\taddColInfo ( i , iter ) ; \n\t\t\t} \n\t\t} \n\tcatch ( HeaderCardException e ) { \n\t\tLOG . log ( Level . SEVERE , $F5351 ( e ) , e ) ; \n\t\t} \n\tfinally { \n\t\tStandard . context ( null ) ; \n\t\t} \n\t} \n"}, {"code": "private boolean searchEndMatch ( final String itemName ) { \n\tfor ( Map . Entry < String , Sentence > e : parsedNames . entrySet ( ) ) { \n\t\tSentence parsed = e . getValue ( ) ; \n\t\tif ( itemName . endsWith ( parsed . getOriginalText ( ) ) || itemName . endsWith ( parsed . getNormalized ( ) ) ) { \n\t\t\t$F76754 ( name , e ) return _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "private static byte expectedNorm ( final DefaultSimilarity sim , final int length , final float boost ) { \n\treturn ( byte ) sim . encodeNormValue ( boost / ( ( float ) Math . sqrt ( length ) ) ) ; \n\t} \n"}, {"code": "public void testCompareToEqualNeg $F72 { \n\t$F67214 $F79258 int aSign = - NUM00 ; \n\tint bSign = - NUM00 ; \n\t$F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F79260 ( assertEquals , aNumber , bNumber ) } \n"}, {"code": "$F1 public ShapeTileSimplex enlarge ( double p_offset ) { \n\t$F116 ( p_offset , this ) ShapeTileSimplex offset_simplex = offset ( p_offset ) ; \n\tShapeTileOctagon bounding_oct = bounding_octagon ( ) ; \n\tif ( bounding_oct . is_NaN ( ) ) return ShapeTileSimplex . EMPTY ; \n\tShapeTileOctagon offset_oct = bounding_oct . offset ( p_offset ) ; \n\treturn offset_simplex . intersection ( offset_oct . to_Simplex ( ) ) ; \n\t} \n"}, {"code": "V remove ( Object key , int hash , Object value ) { \n\tlock ( ) ; \n\ttry { \n\t\tint c = cnt - NUM00 ; \n\t\tHE $F9340 [ ] tab = table ; \n\t\t$F33769 ( index , hash , tab ) HE $F9340 first = tab [ index ] ; \n\t\tHE $F9340 e = first ; \n\t\twhile ( e != null && ( e . hash != hash || ! key . equals ( e . k ) ) ) e = e . next ; \n\t\tV oldValue = null ; \n\t\tif ( e != null ) { \n\t\t\tV v = e . v ; \n\t\t\tif ( value == null || value . equals ( v ) ) { \n\t\t\t\toldValue = v ; \n\t\t\t\t++ modCnt ; \n\t\t\t\tHE $F9340 newFirst = e . next ; \n\t\t\t\tfor ( HE $F9340 p = first ; \n\t\t\t\tp != e ; \n\t\t\t\tp = p . next ) newFirst = new HE $F9340 ( p . k , p . hash , newFirst , p . v ) ; \n\t\t\t\ttab [ index ] = newFirst ; \n\t\t\t\tcnt = c ; \n\t\t\t\t} \n\t\t\t} \n\t\treturn oldValue ; \n\t\t} \n\t$F49978 ( unlock ) } \n"}, {"code": "public static TreePath pathTillOfKind ( final TreePath path , final Tree . Kind kind ) { \n\treturn pathTillOfKind ( path , EnumSet . of ( kind ) ) ; \n\t} \n"}, {"code": "public BigDecimal readF2Dot14 ( int index ) $F59421 "}, {"code": "$F1654 ( set ) "}, {"code": "$F9749 ( namespace , attName , attValue , xmlWriter , registerPrefix ) "}, {"code": "public void addRenderingHints $F233349 ( hints ) { \n\tmGraphics . addRenderingHints ( hints ) ; \n\t} \n"}, {"code": "private void createNewFieldsArray $F72 { \n\tfor ( $F1139 ( i , personFieldsOld ) ) { \n\t\tpersonFieldsNew [ i ] = personFieldsOld [ i ] + NUM00 ; \n\t\t} \n\t} \n"}, {"code": "public void removeAllRelations $F72 { \n\tfor ( BNode inputNode : new LinkedList $F280831 $F6680 ( inputNodes ) ) { \n\t\t$F13536 ( removeInputNode , inputNode ) ; \n\t\t} \n\tfor ( BNode outputNode : new LinkedList $F280831 $F6680 ( outputNodes ) ) { \n\t\t$F13536 ( removeOutputNode , outputNode ) ; \n\t\t} \n\t} \n"}, {"code": "private void addExposedTypes $F140796 ( clazz , cause ) { \n\t$F47073 ( pruned , clazz ) boolean alreadyDone = done ( clazz ) ; \n\tvisit ( clazz ) ; \n\trecordExposure ( clazz , cause ) ; \n\tif ( alreadyDone || pruned ( clazz ) ) $F932 TypeToken $F1011 token = TypeToken . of ( clazz ) ; \n\tfor ( TypeToken $F1011 superType : token . getTypes ( ) ) { \n\t\tif $F2137 ( superType , token ) { \n\t\t\t$F39971 ( logger , superType , clazz ) addExposedTypes ( superType , clazz ) ; \n\t\t\t} \n\t\t} \n\tfor ( Class innerClass : clazz . getDeclaredClasses ( ) ) { \n\t\tif ( exposed ( innerClass . getModifiers ( ) ) ) { \n\t\t\t$F39971 ( logger , innerClass , clazz ) addExposedTypes ( innerClass , clazz ) ; \n\t\t\t} \n\t\t} \n\tfor ( $F128325 ( field , clazz ) ) { \n\t\tif ( exposed ( field . getModifiers ( ) ) ) { \n\t\t\t$F39971 ( logger , field , clazz ) addExposedTypes ( field , clazz ) ; \n\t\t\t} \n\t\t} \n\tfor ( Invokable invokable : getExposedInvokables ( token ) ) { \n\t\t$F39971 ( logger , invokable , clazz ) addExposedTypes ( invokable , clazz ) ; \n\t\t} \n\t} \n"}, {"code": "public void storeLogs ( File folder ) { \n\t$F22814 ( path , folder ) mLoggerFolder = new LogThis ( path ) ; \n\t} \n"}, {"code": "$F1 public Object clone $F72 { \n\treturn new LocationPath ( this ) ; \n\t} \n"}, {"code": "private Assignment recursiveBackTrackingSearch ( CSP csp , Assignment assignment ) { \n\tAssignment result = null ; \n\tif ( assignment . isComplete ( csp . getVariables ( ) ) ) { \n\t\tresult = assignment ; \n\t\t} \n\telse { \n\t\tVariable var = selectUnassignedVariable ( assignment , csp ) ; \n\t\tfor ( Object value : orderDomainValues ( var , assignment , csp ) ) { \n\t\t\tassignment . setAssignment ( var , value ) ; \n\t\t\tfireStateChanged ( assignment , csp ) ; \n\t\t\tif ( assignment . isConsistent ( csp . getConstraints ( var ) ) ) { \n\t\t\t\tDomainRestoreInfo info = inference ( var , assignment , csp ) ; \n\t\t\t\tif $F5973 ( info ) fireStateChanged ( csp ) ; \n\t\t\t\tif ( ! info . isEmptyDomainFound ( ) ) { \n\t\t\t\t\tresult = recursiveBackTrackingSearch ( csp , assignment ) ; \n\t\t\t\t\tif ( result != null ) $F597 } \n\t\t\t\tinfo . restoreDomains ( csp ) ; \n\t\t\t\t} \n\t\t\tassignment . removeAssignment ( var ) ; \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "private static JSONObject createFileTransferError ( int errorCode , String source , String target , String body , Integer httpStatus ) { \n\tJSONObject error = null ; \n\ttry { \n\t\terror = new JSONObject $F72 ; \n\t\t$F545 ( error , errorCode ) $F545 ( error , source ) $F545 ( error , target ) $F70196 ( body , error ) $F70196 ( httpStatus , error ) } \n\tcatch ( JSONException e ) { \n\t\tLog . e ( $F65849 ( LOG_TAG , e ) ) ; \n\t\t} \n\treturn error ; \n\t} \n"}, {"code": "public ArrayList $F120452 keys $F72 { \n\tArrayList $F120452 list = New . arrayList ( size ) ; \n\tfor ( Value k : keys ) { \n\t\tif ( k != null && k != ValueNull . DELETED ) $F207 ( list , k ) } \n\treturn list ; \n\t} \n"}, {"code": "private void close $F72 { \n\t$F7254 ( closed ) closed = _BOOL ; \n\ttry $F881 ( resultSet ) catch ( final SQLException e ) $F98543 ( logger , e ) try $F6399 ( statement ) catch ( final SQLException e ) $F98543 ( logger , e ) } \n"}, {"code": "public DeliveryThread ( TOMLayer tomLayer , ServiceReplica receiver , Recoverable recoverer , ServerViewController controller ) { \n\tsuper ( NUM00 ) ; \n\tthis . decided = new LinkedBlockingQueue $F200 $F72 ; \n\tthis . tomLayer = tomLayer ; \n\tthis . receiver = receiver ; \n\tthis . recoverer = recoverer ; \n\tthis . controller = controller ; \n\t} \n"}, {"code": "protected void addButtonListener $F72 { \n\tApplicationInsightsAddDialog dialog = new ApplicationInsightsAddDialog ( getShell ( ) ) ; \n\t$F5837 ( dialog ) $F17015 ( tableViewer ) } \n"}, {"code": "public $F2027 toArray $F72 $F141537 ( result , size , System , array ) "}, {"code": "public Block obtainBlock ( String prototypeName , $F5466 String uuid ) { \n\tBlock block ; \n\tif ( uuid != null ) { \n\t\tWeakReference $F40167 ref = mBlockRefs . get ( uuid ) ; \n\t\tif ( ref != null ) { \n\t\t\t$F16478 ( block , ref ) if ( block != null ) $F29526 ( uuid ) } \n\t\t} \n\tif $F15257 ( mBlockTemplates , prototypeName ) { \n\t\tLog . w ( TAG , NUM00 + prototypeName + NUM00 ) ; \n\t\t$F1274 } \n\tBlock . Builder builder = new Block . Builder $F73204 ( mBlockTemplates , prototypeName ) ; \n\tif ( uuid != null ) { \n\t\tbuilder . setUuid ( uuid ) ; \n\t\t} \n\tblock = builder . build ( ) ; \n\tmBlockRefs . put ( block . getId ( ) , new WeakReference $F40167 ( block ) ) ; \n\treturn block ; \n\t} \n"}, {"code": "public SmsConsoleServiceConfig $F72 { \n\tDocument doc = parseDocument ( CONFIG_FILENAME ) ; \n\tconfigServices ( doc ) ; \n\thiddenServices = Collections . unmodifiableSet ( services . get ( HIDDEN_SERVICES ) ) ; \n\t} \n"}, {"code": "$F26827 ( w , h , oldw , oldh , super , setupBounds , setupPaints , invalidate ) "}, {"code": "private static String convertToQuotedString ( String s ) { \n\t$F25770 ( s ) if $F25773 ( s ) { \n\t\treturn s ; \n\t\t} \n\treturn NUM00 + s + NUM00 ; \n\t} \n"}, {"code": "public PatternObserverExpr ( String namespace , String name , Expression [ ] parameters ) { \n\tsuper ( namespace , name , Arrays . asList ( parameters ) ) ; \n\t} \n"}, {"code": "public static String convertStringToHexString ( String data ) $F26006 ( conventBytesToHexString , data ) "}, {"code": "public boolean isTransient $F72 { \n\treturn Modifier . isTransient ( getAccessFlags ( ) ) ; \n\t} \n"}, {"code": "public boolean isForHTTPBasic $F72 { \n\treturn ( negoValue != null ) ? negoValue . equalsIgnoreCase ( HTTP_HTTPBASIC ) : _BOOL ; \n\t} \n"}, {"code": "private String indent ( int level ) { \n\tfinal String s = NUM00 ; \n\tif ( level == NUM00 ) $F1278 StringBuilder sb = new StringBuilder ( level * s . length ( ) ) ; \n\t$F48485 ( i , level , sb , s ) $F92 ( s ) } \n"}, {"code": "public static String cut ( String line , IntPredicate testFunction ) { \n\tString s = NUM00 ; \n\tint pos = SubParser . locate ( line , testFunction ) ; \n\tif ( pos != - NUM00 ) $F14494 ( s , line , pos ) return s ; \n\t} \n"}, {"code": "public void addListener ( UpdateManagerListener listener ) $F207 ( listeners , listener ) "}, {"code": "$F1 public void run $F72 { \n\tList $F213599 dequeuedSpans = new ArrayList $F213599 ( maxSpanBatchSize ) ; \n\tlong errorCount = NUM00 ; \n\twhile ( running . get ( ) || $F3816 ( queue ) ) { \n\t\tSpan firstSpan = null ; \n\t\ttry { \n\t\t\tfirstSpan = queue . poll ( NUM00 , TimeUnit . SECONDS ) ; \n\t\t\tif ( firstSpan != null ) { \n\t\t\t\tdequeuedSpans . add ( firstSpan ) ; \n\t\t\t\tqueue . drainTo ( dequeuedSpans , maxSpanBatchSize - NUM00 ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F109995 startClient ( ) ; \n\t\tif $F2979 ( dequeuedSpans ) $F1448 try { \n\t\t\tList $F137768 events = new ArrayList $F137768 $F716 ( dequeuedSpans ) ; \n\t\t\tfor ( Span span : dequeuedSpans ) { \n\t\t\t\t$F13404 ( headers ) $F108920 ( headers , span ) headers . put ( NUM00 , span . getTracerId ( ) ) ; \n\t\t\t\theaders . put ( NUM00 , span . getDescription ( ) ) ; \n\t\t\t\tString body = span . toJson ( ) ; \n\t\t\t\tEvent evt = EventBuilder . withBody ( body , Charset . forName ( NUM00 ) , headers ) ; \n\t\t\t\tevents . add ( evt ) ; \n\t\t\t\t} \n\t\t\tflumeClient . appendBatch ( events ) ; \n\t\t\t$F725 ( dequeuedSpans ) errorCount = NUM00 ; \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\terrorCount += NUM00 ; \n\t\t\tif ( errorCount < MAX_ERRORS ) { \n\t\t\t\ttry $F21926 ( queue , dequeuedSpans ) catch ( IllegalStateException ex ) { \n\t\t\t\t\tLOG . error ( $F10533 ( dequeuedSpans ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tcloseClient ( ) ; \n\t\t\ttry $F31130 ( Thread ) catch ( InterruptedException e1 ) $F845 } \n\t\t} \n\tcloseClient ( ) ; \n\t} \n"}, {"code": "public void cancelAuthentication $F72 { \n\tsynchronized ( syncLock ) { \n\t\tauthenticating = _BOOL ; \n\t\t$F65148 ( timer ) $F358253 ( timer ) } \n\t} \n"}, {"code": "private void checkValidInterval ( Duration pollingInterval , int retries , long timeSleptMillis ) { \n\tlong highSum = NUM00 ; \n\tlong lowSum = NUM00 ; \n\tfor ( $F119 ( i , retries ) ) { \n\t\tdouble currentInterval = pollingInterval . getMillis ( ) * Math . pow ( DataflowPipelineJob . DEFAULT_BACKOFF_EXPONENT , i ) ; \n\t\tdouble randomOffset = NUM00 * currentInterval ; \n\t\thighSum += Math . round ( currentInterval + randomOffset ) ; \n\t\tlowSum += Math . round ( currentInterval - randomOffset ) ; \n\t\t} \n\tassertThat ( timeSleptMillis , allOf ( greaterThanOrEqualTo ( lowSum ) , lessThanOrEqualTo ( highSum ) ) ) ; \n\t} \n"}, {"code": "public void write $F36827 ( str , off , len ) throws IOException { \n\t$F3576 ( _outputStream ) final int off_plus_len = off + len ; \n\tfor ( int i = off ; \n\ti < off_plus_len ; \n\t) { \n\t\t$F52837 ( c , str , i ) if ( c < NUM00 ) { \n\t\t\t$F8214 ( _bytes , _index , c ) if ( ++ _index >= _bytes . length ) $F5795 ( flushBuffer ) } \n\t\telse { \n\t\t\twrite ( c ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public CommitRecordIndex ( IRawStore store , Checkpoint checkpoint , IndexMetadata metadata , boolean readOnly ) { \n\tsuper ( store , checkpoint , metadata , readOnly ) ; \n\tthis . ser = new Entry . EntrySerializer $F72 ; \n\t} \n"}, {"code": "protected String encodeBody $F72 { \n\treturn Long . toString ( this . sequenceNumber ) ; \n\t} \n"}, {"code": "$F26776 ( container , mContainers ) "}, {"code": "private void checkSize ( final int i ) { \n\tif ( i >= max_size ) { \n\t\tfinal int old_size = max_size ; \n\t\tmax_size += increment_size ; \n\t\tif ( max_size <= i ) { \n\t\t\tmax_size = i + increment_size + NUM00 ; \n\t\t\t} \n\t\tfinal Rectangle [ ] temp = items ; \n\t\titems = new Rectangle [ max_size ] ; \n\t\t$F135 ( System , temp , items , old_size ) increment_size = incrementSize ( increment_size ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F1986 genPulseFromFourierMag $F280936 ( mag , f0 ) { \n\tint numHarm = mag . length ; \n\tint currentF0 = $F62069 ( Math , f0 ) ; \n\tint T ; \n\tif ( currentF0 < NUM00 ) T = NUM00 ; \n\telse T = NUM00 ; \n\tint T2 = NUM00 * T ; \n\t$F9662 ( pulse , T ) $F9662 ( real , T2 ) $F9662 ( imag , T2 ) real [ NUM00 ] = real [ T ] = NUM00 ; \n\tfor ( $F9993 ( i , numHarm ) ) { \n\t\treal [ i ] = real [ T - i ] = real [ T + i ] = real [ T2 - i ] = mag [ i - NUM00 ] ; \n\t\timag [ i ] = imag [ T - i ] = imag [ T + i ] = imag [ T2 - i ] = NUM00 ; \n\t\t} \n\tfor ( int i = ( numHarm + NUM00 ) ; \n\ti < ( T - numHarm ) ; \n\ti ++ ) { \n\t\treal [ i ] = real [ T - i ] = real [ T + i ] = real [ T2 - i ] = NUM00 ; \n\t\timag [ i ] = imag [ T - i ] = imag [ T + i ] = imag [ T2 - i ] = NUM00 ; \n\t\t} \n\tFFT . transform ( real , imag , _BOOL ) ; \n\t$F96817 ( sqrt_f0 , Math , currentF0 ) for ( $F119 ( i , T ) ) pulse [ i ] = real [ ( i - numHarm ) % T ] * sqrt_f0 ; \n\treturn pulse ; \n\t} \n"}, {"code": "public double volume $F72 { \n\tif ( cachedVolume < NUM00 ) { \n\t\tcachedVolume = NUM00 ; \n\t\tIHypercube cube = this . region ; \n\t\tint nd = cube . dimensionality ( ) ; \n\t\tfor ( $F9993 ( d , nd ) ) { \n\t\t\tdouble right = cube . getRight ( d ) ; \n\t\t\tdouble left = cube . getLeft ( d ) ; \n\t\t\tif $F28102 ( Double , right ) { \n\t\t\t\tright = + NUM00 ; \n\t\t\t\t} \n\t\t\tif $F28102 ( Double , left ) $F44867 ( left ) if ( left == - NUM00 && right == + NUM00 ) $F845 else { \n\t\t\t\tcachedVolume *= ( right - left ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn cachedVolume ; \n\t} \n"}, {"code": "static String _targetSoFile ( String libName , int version ) { \n\tContext context = mContext ; \n\tif ( null == context ) $F2455 String path = NUM00 + context . getPackageName ( ) + NUM00 ; \n\tFile f = context . getFilesDir ( ) ; \n\tif ( f != null ) { \n\t\tpath = f . getPath ( ) ; \n\t\t} \n\treturn path + NUM00 + libName + NUM00 + version + NUM00 ; \n\t} \n"}, {"code": "$F1 public $F117572 ( stopMonitoring , _BOOL ) "}, {"code": "$F1 public Object compute ( $F390500 rows ) throws Exception { \n\tif $F3057 ( column ) $F1652 ( rows ) long count = NUM00 ; \n\tfor ( $F46397 ( row , rows ) ) { \n\t\tif ( row . containsKey ( column ) && $F26935 ( row , column ) ) { \n\t\t\tcount ++ ; \n\t\t\t} \n\t\t} \n\treturn count ; \n\t} \n"}, {"code": "private Property [ ] parseProperties ( final String contents ) { \n\t$F7299 ( parts , contents ) final List $F43833 resultsAsList = new ArrayList $F43833 $F72 ; \n\tfor ( String part : parts ) { \n\t\ttry { \n\t\t\tif ( ! StringUtils . isEmpty ( part . trim ( ) ) ) { \n\t\t\t\tresultsAsList . add ( new Property ( part ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( final Exception e ) { \n\t\t\tLOG . warn ( $F1573 ( e ) ) ; \n\t\t\t} \n\t\t} \n\treturn resultsAsList . toArray ( new Property $F2313 ( resultsAsList ) ) ; \n\t} \n"}, {"code": "public void requestSecondsUntilAccountExpiration $F72 { \n\toperations . add ( PasswordPolicyStateOperationType . GET_SECONDS_UNTIL_ACCOUNT_EXPIRATION ) ; \n\t} \n"}, {"code": "public final boolean equalsIgnoreCase ( String a ) { \n\t$F1749 ( len , a ) if ( _length != len ) return _BOOL ; \n\tint offset = _offset ; \n\t$F1469 buffer = _buffer ; \n\tfor ( $F119 ( i , len ) ) { \n\t\tchar ca = buffer [ offset + i ] ; \n\t\t$F1280 ( cb , a , i ) if ( ca == cb ) $F845 else if ( Character . toLowerCase ( ca ) != Character . toLowerCase ( cb ) ) return _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static $F2027 checkObjectStart ( PdfTokenizer lineTokenizer ) { \n\ttry { \n\t\t$F927 ( lineTokenizer ) if ( ! lineTokenizer . nextToken ( ) || lineTokenizer . getTokenType ( ) != TokenType . Number ) $F1274 int num = lineTokenizer . getIntValue ( ) ; \n\t\tif ( ! lineTokenizer . nextToken ( ) || lineTokenizer . getTokenType ( ) != TokenType . Number ) $F1274 int gen = lineTokenizer . getIntValue ( ) ; \n\t\tif ( ! lineTokenizer . nextToken ( ) ) $F1274 if ( ! Arrays . equals ( Obj , lineTokenizer . getByteContent ( ) ) ) $F1274 return $F10511 ( num , gen ) ; \n\t\t} \n\tcatch ( Exception ioe ) $F845 $F1274 } \n"}, {"code": "private Object singleElement ( int row , int col ) { \n\tObject res = null ; \n\tif ( this . isNull == null || ! this . isNull [ row * this . nFields + col ] ) { \n\t\tres = ArrayFuncs . newInstance ( this . types [ col ] , NUM00 ) ; \n\t\tSystem . arraycopy ( this . data [ col ] , row , res , NUM00 , NUM00 ) ; \n\t\t} \n\treturn res ; \n\t} \n"}, {"code": "private char convertToChar ( String kurzname ) { \n\tchar result = KEIN_SIEGEL ; \n\tif $F1032 ( kurzname ) { \n\t\tif $F4012 ( kurzname ) { \n\t\t\tresult = kurzname . toCharArray ( ) [ NUM00 ] ; \n\t\t\t} \n\t\telse { \n\t\t\tresult = kurzname . toCharArray ( ) [ NUM00 ] ; \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public NodeSetDTM ( NodeIterator iterator , XPathContext xctxt ) { \n\tsuper ( ) ; \n\tNode node ; \n\tm_manager = xctxt . getDTMManager ( ) ; \n\twhile ( null != $F161934 ( node , iterator ) ) { \n\t\tint handle = xctxt . getDTMHandleFromNode ( node ) ; \n\t\taddNodeInDocOrder ( handle , xctxt ) ; \n\t\t} \n\t} \n"}, {"code": "public static Vec meanVector ( DataSet dataSet ) { \n\tDenseVector dv = new DenseVector ( dataSet . getNumNumericalVars ( ) ) ; \n\tmeanVector ( dv , dataSet ) ; \n\treturn dv ; \n\t} \n"}, {"code": "private void makeCacheDirectory $F72 { \n\t$F1705 ( cacheDir , CACHE_DIRECTORY ) $F27235 ( cacheDir ) } \n"}, {"code": "public void inputKeyevent ( int value ) { \n\texecuteCommandQuietly ( adbCommand ( NUM00 , NUM00 , NUM00 , NUM00 + value ) ) ; \n\ttry $F31130 ( Thread ) $F45916 ( log , e ) } \n"}, {"code": "public static void passMockSleep $F72 $F1614 ( mockSleepQueue , _BOOL ) "}, {"code": "private static File createReserveDiskCacheDir ( Context context ) { \n\tFile cacheDir = StorageUtils . getCacheDirectory ( context , _BOOL ) ; \n\t$F109797 ( individualDir , cacheDir ) $F202511 ( individualDir , cacheDir ) return cacheDir ; \n\t} \n"}, {"code": "JSONStringer close ( Scope empty , Scope nonempty , String closeBracket ) throws JSONException { \n\tScope context = peek ( ) ; \n\tif ( context != nonempty && context != empty ) $F19954 $F30606 ( stack ) $F83461 ( context , nonempty , newline ) out . append ( closeBracket ) ; \n\treturn this ; \n\t} \n"}, {"code": "private QueryBuilder buildSort $F72 { \n\tQueryBuilder builder = new QueryBuilder $F72 ; \n\t$F13712 ( sortIterator , mSortingOrderList ) while $F2921 ( sortIterator ) { \n\t\t$F45691 ( builder , sortIterator ) if $F2921 ( sortIterator ) $F84 ( builder ) } \n\treturn builder ; \n\t} \n"}, {"code": "public void init ( int mode , $F96 key , $F96 iv ) { \n\tcontext = OpenSslNative . init ( context , mode , algorithm , padding , key , iv ) ; \n\t} \n"}, {"code": "private String diff_wordsToCharsMunge ( String text , $F3803 lineArray , $F59936 ( lineHash ) ) { \n\tint lineStart = NUM00 ; \n\tint lineEnd = - NUM00 ; \n\tString line ; \n\t$F83 ( chars ) while $F46112 ( lineEnd , text ) { \n\t\tString patternStr = NUM00 ; \n\t\t$F55449 ( pattern , Pattern , patternStr ) $F275 ( matcher , pattern , text ) matcher . region ( lineStart , text . length ( ) ) ; \n\t\tif $F281 ( matcher ) { \n\t\t\t$F444278 ( lineEnd , matcher ) } \n\t\telse lineEnd = - NUM00 ; \n\t\tif ( lineEnd == - NUM00 ) $F32479 ( lineEnd , text ) line = text . substring ( lineStart , lineEnd + NUM00 ) ; \n\t\tlineStart = lineEnd + NUM00 ; \n\t\tif $F1710 ( lineHash , line ) { \n\t\t\tchars . append ( String . valueOf ( ( char ) $F113095 ( lineHash , line ) ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tlineArray . add ( line ) ; \n\t\t\tlineHash . put ( $F43443 ( line , lineArray ) ) ; \n\t\t\tchars . append ( String . valueOf ( ( char ) $F113103 ( lineArray ) ) ) ; \n\t\t\t} \n\t\t} \n\t$F92 ( chars ) } \n"}, {"code": "private void replaceTop ( Scope topOfStack ) $F233310 ( stack , topOfStack ) "}, {"code": "public boolean hasNext $F72 { \n\treturn index < desc . length ( ) ; \n\t} \n"}, {"code": "public void registerSessionThread ( SessionThread newSession ) { \n\tsynchronized ( this ) { \n\t\tList < SessionThread > toBeRemoved = new ArrayList < SessionThread > $F72 ; \n\t\tfor ( SessionThread sessionThread : sessionThreads ) { \n\t\t\tif ( ! sessionThread . isAlive ( ) ) { \n\t\t\t\t$F13527 ( Log , TAG ) try { \n\t\t\t\t\t$F14454 ( sessionThread ) $F13527 ( Log , TAG ) toBeRemoved . add ( sessionThread ) ; \n\t\t\t\t\tsessionThread . closeSocket ( ) ; \n\t\t\t\t\t} \n\t\t\t\tcatch ( InterruptedException e ) $F13573 ( Log , TAG ) } \n\t\t\t} \n\t\tfor ( SessionThread removeThread : toBeRemoved ) $F106 ( sessionThreads , removeThread ) sessionThreads . add ( newSession ) ; \n\t\t} \n\t$F13527 ( Log , TAG ) } \n"}, {"code": "protected IObjectInfo $F4203 store_impl ( Segment $F4203 segment , ObjectInfo $F4203 oi ) { \n\tif ( _invalid ) $F1274 $F5224 ( _size ) segment . incrementSize ( ) ; \n\tObjectInfo $F4203 tail = segment . getTail ( ) ; \n\ttail . setForwardRef ( oi ) ; \n\toi . setBackwardRef ( tail ) ; \n\tsegment . setTail ( oi ) ; \n\treturn oi ; \n\t} \n"}, {"code": "public TeXFormula $F72 { \n\tparser = new TeXParser ( NUM00 , this , _BOOL ) ; \n\t} \n"}, {"code": "public static void grayToBinary ( BinaryVariable variable ) { \n\tint n = variable . getNumberOfBits ( ) ; \n\tBitSet gray = variable . getBitSet ( ) ; \n\tvariable . set ( n - NUM00 , gray . get ( n - NUM00 ) ) ; \n\tfor ( $F18298 ( i , n ) ) { \n\t\tvariable . set ( i , variable . get ( i + NUM00 ) ^ gray . get ( i ) ) ; \n\t\t} \n\t} \n"}, {"code": "private void updateTags ( Movie movie ) { \n\t$F3803 $F10252 ( availableTags , tagsObservable ) ; \n\tfor ( String tagInMovie : new $F201 ( movie . getTags ( ) ) ) { \n\t\tboolean tagFound = _BOOL ; \n\t\tfor ( String tag : availableTags ) $F42256 ( tagInMovie , tag , tagFound , _BOOL ) $F42258 ( tagFound , addTag , tagInMovie ) } \n\t} \n"}, {"code": "protected void removeNextProtocolMessages ( List < ProtocolMessage > protocolMessages , int fromIndex ) { \n\tfor ( int i = $F2281 ( protocolMessages ) ; \n\ti >= fromIndex ; \n\ti -- ) $F106 ( protocolMessages , i ) } \n"}, {"code": "public static double sigmoid ( double x ) { \n\treturn NUM00 / ( NUM00 + Math . pow ( Math . E , - x ) ) ; \n\t} \n"}, {"code": "public void testRadix36Neg $F72 $F214959 ( value , radix , aNumber , result , assertTrue ) "}, {"code": "public UCIBestMove stop $F72 { \n\tif $F931 ( isConnected ) $F4639 $F35060 ( LOG ) UCIBestMove result = null ; \n\tsynchronized ( stopSynch ) { \n\t\tif $F931 ( isProcessingGo ) { \n\t\t\tresult = lastBestMove ; \n\t\t\tlastBestMove = null ; \n\t\t\t} \n\t\telse { \n\t\t\tlong totalSleepTime = NUM00 ; \n\t\t\tsend ( NUM00 ) ; \n\t\t\twhile ( goRunnable != null && totalSleepTime < NUM00 ) { \n\t\t\t\ttry { \n\t\t\t\t\t$F9470 ( Thread ) totalSleepTime += NUM00 ; \n\t\t\t\t\t} \n\t\t\t\t$F109995 } \n\t\t\tresult = lastBestMove ; \n\t\t\tlastBestMove = null ; \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "$F1 public boolean supportsDataDefinitionAndDataManipulationTransactions $F72 $F601083 ( debugCodeCall , _BOOL ) "}, {"code": "public static void removeJavaNoOpLogger ( Collection < Handler > rmvHnds ) { \n\tLogger log = Logger . getLogger ( NUM00 ) ; \n\tfor ( Handler h : log . getHandlers ( ) ) log . removeHandler ( h ) ; \n\tif $F20899 ( F , rmvHnds ) { \n\t\tfor ( Handler h : rmvHnds ) log . addHandler ( h ) ; \n\t\t} \n\t} \n"}, {"code": "$F103232 ( curFirst , pager , PAGE_SIZE , calPageSize , newPage , removeViewAt , afterPlatformListGot ) "}, {"code": "private int binarySearch ( final int start , final int end , final SizeTester sizeTester , final RectF availableSpace ) { \n\tint lastBest = start ; \n\tint low = start ; \n\tint high = end - NUM00 ; \n\tint middle ; \n\twhile ( low <= high ) { \n\t\tmiddle = low + high > > > NUM00 ; \n\t\tfinal int midValCmp = sizeTester . onTestSize ( middle , availableSpace ) ; \n\t\tif ( midValCmp < NUM00 ) { \n\t\t\tlastBest = low ; \n\t\t\tlow = middle + NUM00 ; \n\t\t\t} \n\t\telse if ( midValCmp > NUM00 ) { \n\t\t\thigh = middle - NUM00 ; \n\t\t\tlastBest = high ; \n\t\t\t} \n\t\telse return middle ; \n\t\t} \n\treturn lastBest ; \n\t} \n"}, {"code": "protected boolean isValidDomain ( String domain ) { \n\t$F1150 ( ipDomainMatcher , IP_DOMAIN_PATTERN , domain ) if $F24133 ( ipDomainMatcher ) { \n\t\t$F4377 ( inetAddressValidator , InetAddressValidator ) return inetAddressValidator . isValid ( ipDomainMatcher . group ( NUM00 ) ) ; \n\t\t} \n\t$F156 ( domainValidator , DomainValidator , allowLocal ) return domainValidator . isValid ( domain ) || domainValidator . isValidTld ( domain ) ; \n\t} \n"}, {"code": "public void tableSwitch ( final $F2027 keys , final TableSwitchGenerator generator , final boolean useTable ) { \n\tfor ( $F9808 ( i , keys ) ) { \n\t\tif $F15531 ( keys , i ) $F825 } \n\tLabel def = newLabel ( ) ; \n\tLabel end = newLabel ( ) ; \n\tif $F3305 ( keys ) { \n\t\tint len = keys . length ; \n\t\tint min = keys [ NUM00 ] ; \n\t\tint max = keys [ len - NUM00 ] ; \n\t\tint range = max - min + NUM00 ; \n\t\tif ( useTable ) { \n\t\t\t$F15537 ( labels , range ) Arrays . fill ( labels , def ) ; \n\t\t\tfor ( $F1316 ( i , len ) ) { \n\t\t\t\tlabels [ keys [ i ] - min ] = newLabel ( ) ; \n\t\t\t\t} \n\t\t\tmv . visitTableSwitchInsn ( min , max , def , labels ) ; \n\t\t\tfor ( $F1316 ( i , range ) ) { \n\t\t\t\tLabel label = labels [ i ] ; \n\t\t\t\tif ( label != def ) { \n\t\t\t\t\tmark ( label ) ; \n\t\t\t\t\tgenerator . generateCase ( i + min , end ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\t$F15537 ( labels , len ) for ( $F1316 ( i , len ) ) $F15546 ( labels , i , newLabel ) mv . visitLookupSwitchInsn ( def , keys , labels ) ; \n\t\t\tfor ( $F1316 ( i , len ) ) { \n\t\t\t\tmark ( labels [ i ] ) ; \n\t\t\t\tgenerator . generateCase ( keys [ i ] , end ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tmark ( def ) ; \n\tgenerator . generateDefault ( ) ; \n\tmark ( end ) ; \n\t} \n"}, {"code": "public void testRemainderKnuthMultiDigitsByOneDigit $F72 { \n\tbyte $F3009 = { \n\t\tNUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 } \n\t; \n\t$F88888 int aSign = NUM00 ; \n\tint bSign = - NUM00 ; \n\tbyte $F3018 = { \n\t\tNUM00 , - NUM00 , - NUM00 , NUM00 } \n\t; \n\t$F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F221355 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) } \n"}, {"code": "public void testTimedInvokeAny4 $F72 throws Throwable { \n\t$F25236 ( e ) PoolCleaner cleaner = null ; \n\ttry { \n\t\tcleaner = cleaner ( e ) ; \n\t\t$F25238 ( startTime , System ) $F25247 ( l ) l . add ( new NPETask $F72 ) ; \n\t\ttry { \n\t\t\te . invokeAny ( l , LONG_DELAY_MS , MILLISECONDS ) ; \n\t\t\tshouldThrow ( ) ; \n\t\t\t} \n\t\tcatch ( ExecutionException success ) { \n\t\t\tassertTrue ( success . getCause ( ) instanceof NullPointerException ) ; \n\t\t\t} \n\t\tassertTrue ( millisElapsedSince ( startTime ) < LONG_DELAY_MS ) ; \n\t\t} \n\t$F14364 ( cleaner ) } \n"}, {"code": "private void parse ( File dir ) { \n\t$F5237 xmlFiles = dir . listFiles ( new XmlFilter $F72 ) ; \n\t$F5460 ( xmlFile , xmlFiles , parseTestFromXml ) } \n"}, {"code": "public boolean hasNext ( int index ) { \n\tfor ( $F1139 ( p , mask ) ) { \n\t\tif ( mask [ p ] ) { \n\t\t\tif ( index <= lastElementIndex [ p ] ) { \n\t\t\t\treturn _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static boolean isExternalStorageAvailable $F72 { \n\t$F139156 ( state , Environment ) if $F139157 ( state , Environment ) { \n\t\treturn _BOOL ; \n\t\t} \n\telse { \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public TarEntry $F97 ( headerBuf ) $F19529 ( this , parseTarHeader , headerBuf ) "}, {"code": "public static void unregisterMbeans ( MBeanServer mBeanServer ) { \n\ttry { \n\t\tmBeanServer . unregisterMBean ( Log4jMXBeanImp . getObjectName ( ) ) ; \n\t\tmBeanServer . unregisterMBean ( ExceptionMXBeanImp . getObjectName ( ) ) ; \n\t\tmBeanServer . unregisterMBean ( ExceptionDeltaMXBeanImp . getObjectName ( ) ) ; \n\t\tmBeanServer . unregisterMBean ( Log4jDeltaMXBeanImp . getObjectName ( ) ) ; \n\t\tmBeanServer . unregisterMBean ( JamonMXBeanImp . getObjectName ( ) ) ; \n\t\tmBeanServer . unregisterMBean ( HttpStatusMXBeanImp . getObjectName ( ) ) ; \n\t\tmBeanServer . unregisterMBean ( HttpStatusDeltaMXBeanImp . getObjectName ( ) ) ; \n\t\tunregisterGcMXBean ( mBeanServer ) ; \n\t\tunregisterMbeansFromPropsFile ( mBeanServer ) ; \n\t\t} \n\t$F12237 ( e ) } \n"}, {"code": "public static DeterministicKey createMasterPrivateKey $F97 ( seed ) throws HDDerivationException { \n\tcheckArgument ( seed . length > NUM00 , NUM00 ) ; \n\t$F96 i = HDUtils . hmacSha512 ( MASTER_HMAC_SHA512 , seed ) ; \n\tcheckState ( i . length == NUM00 , i . length ) ; \n\t$F96 il = Arrays . copyOfRange ( i , NUM00 , NUM00 ) ; \n\t$F96 ir = Arrays . copyOfRange ( i , NUM00 , NUM00 ) ; \n\t$F26770 ( Arrays , i ) DeterministicKey masterPrivKey = createMasterPrivKeyFromBytes ( il , ir ) ; \n\t$F26770 ( Arrays , il ) $F26770 ( Arrays , ir ) return masterPrivKey ; \n\t} \n"}, {"code": "public boolean isNANPACountry ( String regionCode ) $F298 ( nanpaRegions , regionCode ) "}, {"code": "public void parse ( InputStream in ) throws $F35763 { \n\ttry { \n\t\t_xmlReader . setInput ( in ) ; \n\t\tparseAll ( ) ; \n\t\t} \n\tcatch ( XMLStreamException e ) { \n\t\tif ( e . getNestedException ( ) instanceof IOException ) throw ( IOException ) e . getNestedException ( ) ; \n\t\tthrow new SAXException $F1783 ( e ) ; \n\t\t} \n\t$F171343 ( _xmlReader ) } \n"}, {"code": "$F1 public void printStackTrace ( PrintStream ps ) { \n\tsuper . printStackTrace ( ps ) ; \n\tif ( nested != null ) nested . printStackTrace ( ps ) ; \n\t} \n"}, {"code": "public AMPassword $F53421 ( pw ) { \n\tint i ; \n\tint length = pw . length ; \n\tcleared = _BOOL ; \n\t$F104602 ( password , length ) $F135 ( System , pw , password , length ) } \n"}, {"code": "public void reset $F72 { \n\tfirstStep = _BOOL ; \n\tN3 = NUM00 ; \n\tN4 = NUM00 ; \n\t$F7057 ( System , IV , ofbV ) byteCount = NUM00 ; \n\t$F2268 ( cipher ) } \n"}, {"code": "private static img createControlButtonImage $F22381 ( name , js_command , enabled ) { \n\tStringBuffer imgName = new StringBuffer ( NUM00 + name ) ; \n\t$F28366 ( enabled , imgName ) $F84 ( imgName ) img img = new img ( MobileEnv . getImageDirectory ( imgName . toString ( ) ) , name ) ; \n\tif ( enabled ) img . setAlt ( Msg . getMsg ( AD_Language , name ) ) ; \n\t$F243713 ( img ) if ( $F21 ( js_command ) && enabled ) { \n\t\timg . setOnClick ( NUM00 + FORM_NAME + NUM00 + M_Command + NUM00 + name + NUM00 + js_command ) ; \n\t\t} \n\treturn img ; \n\t} \n"}, {"code": "public $F806 toArray $F72 throws Exception { \n\treturn Utils . splitOptions ( toCommandLine ( ) ) ; \n\t} \n"}, {"code": "public static Set < EvalFactoryNode > recursiveGetChildNodes ( EvalFactoryNode currentNode , EvalNodeUtilFactoryFilter filter ) { \n\tSet < EvalFactoryNode > result = new LinkedHashSet < EvalFactoryNode > $F72 ; \n\tif ( filter . consider ( currentNode ) ) $F207 ( result , currentNode ) recursiveGetChildNodes ( result , currentNode , filter ) ; \n\treturn result ; \n\t} \n"}, {"code": "void dispose $F72 { \n\tif ( popup != null ) $F22542 ( popup ) popup = null ; \n\t} \n"}, {"code": "void checkFrameValue ( final Object value ) { \n\tif ( value == Opcodes . TOP || value == Opcodes . INTEGER || value == Opcodes . FLOAT || value == Opcodes . LONG || value == Opcodes . DOUBLE || value == Opcodes . NULL || value == Opcodes . UNINITIALIZED_THIS ) $F932 if ( value instanceof String ) { \n\t\tcheckInternalName ( ( String ) value , NUM00 ) ; \n\t\t$F665 } \n\tif ( ! ( value instanceof Label ) ) $F18931 ( value ) else { \n\t\tusedLabels . add ( ( Label ) value ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void endPrefixMapping ( String str ) throws SAXException $F845 "}, {"code": "$F1 public void parse ( final Cookie cookie , final String value ) throws MalformedCookieException { \n\t$F826 ( cookie ) if ( value == null ) $F160209 int age = - NUM00 ; \n\ttry $F37473 ( age , Integer , value ) catch ( final NumberFormatException e ) $F44867 ( age ) if ( age < NUM00 ) $F160209 cookie . setExpiryDate ( new Date ( System . currentTimeMillis ( ) + age * NUM00 ) ) ; \n\t} \n"}, {"code": "public VariableConfigResource ( String configuration , TextResource baseResource ) { \n\tthis ( baseResource ) ; \n\tfor ( $F55140 ( configurationLine , configuration ) ) { \n\t\t$F6542 ( configSplit , configurationLine ) addConfig ( configSplit [ NUM00 ] , configSplit [ NUM00 ] ) ; \n\t\t} \n\t} \n"}, {"code": "private static String readFile ( String fileName ) { \n\tString classMethod = NUM00 ; \n\t$F83 ( fileData ) String fileString = NUM00 ; \n\ttry { \n\t\t$F51387 ( reader , fileName ) $F11577 ( buf ) int numRead = NUM00 ; \n\t\twhile $F18067 ( numRead , reader , buf ) { \n\t\t\tString readData = String . valueOf ( buf , NUM00 , numRead ) ; \n\t\t\tfileData . append ( readData ) ; \n\t\t\t$F11575 ( buf ) ; \n\t\t\t} \n\t\t$F59 ( reader ) $F6947 ( fileString , fileData ) } \n\tcatch ( Exception e ) { \n\t\tdebug . error ( classMethod + NUM00 + fileName ) ; \n\t\t} \n\treturn fileString ; \n\t} \n"}, {"code": "public ScaleIOSnapshotVolumeResponse snapshotMultiVolume ( $F2540 ( id2snapshot ) , String systemId ) throws Exception { \n\tString uri = ScaleIOConstants . getSnapshotVolumesURI ( systemId ) ; \n\tScaleIOSnapshotVolumes spVol = new ScaleIOSnapshotVolumes $F72 ; \n\tfor ( $F19318 ( entry , id2snapshot ) ) { \n\t\tspVol . addSnapshot ( $F15245 ( entry ) ) ; \n\t\t} \n\tClientResponse response = post ( URI . create ( uri ) , getJsonForEntity ( spVol ) ) ; \n\treturn getResponseObject ( ScaleIOSnapshotVolumeResponse . class , response ) ; \n\t} \n"}, {"code": "$F1 public String toString $F72 { \n\treturn NUM00 + m_Width + NUM00 + m_SumOfWeights + NUM00 + m_TM . toString ( ) ; \n\t} \n"}, {"code": "$F10929 ( buf , mSizeLimit , mBuffersByLastUse , pos , Collections , mBuffersBySize , BUF_COMPARATOR , mCurrentSize , trim ) "}, {"code": "public boolean isDraft $F72 { \n\treturn draft != null && draft . booleanValue ( ) ; \n\t} \n"}, {"code": "private WeatherUpdater $F72 $F73598 ( onTurnReached ) "}, {"code": "protected void writeDataToFile ( NodeHolder nodeHolder ) throws CarbonDataWriterException { \n\tlong offset = writeDataToFile ( nodeHolder , fileChannel ) ; \n\tBlockletInfoColumnar blockletInfo = getBlockletInfo ( nodeHolder , offset ) ; \n\tblockletInfoList . add ( blockletInfo ) ; \n\t} \n"}, {"code": "protected Container createSideNavigationComponent ( Vector commands ) $F13736 ( createSideNavigationComponent , commands ) "}, {"code": "public static double min $F9830 ( a ) { \n\tdouble min = Double . POSITIVE_INFINITY ; \n\tfor ( $F1139 ( i , a ) ) { \n\t\tif $F1998 ( Double , a , i ) return Double . NaN ; \n\t\tif ( a [ i ] < min ) min = a [ i ] ; \n\t\t} \n\treturn min ; \n\t} \n"}, {"code": "$F1 public void onUpdateSelection ( int oldSelStart , int oldSelEnd , int newSelStart , int newSelEnd , int candidatesStart , int candidatesEnd ) { \n\tsuper . onUpdateSelection ( oldSelStart , oldSelEnd , newSelStart , newSelEnd , candidatesStart , candidatesEnd ) ; \n\tif ( $F20 ( mComposing ) && ( newSelStart != candidatesEnd || newSelEnd != candidatesEnd ) ) { \n\t\t$F4910 ( mComposing ) updateCandidates ( ) ; \n\t\tInputConnection ic = getCurrentInputConnection ( ) ; \n\t\tif ( ic != null ) { \n\t\t\tic . finishComposingText ( ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public $F4203 T mapTo ( $F98259 ( mappingClass ) ) $F13736 ( mapTo , mappingClass ) "}, {"code": "private ArrayList < SpinnerLanguageElement > createSpinnerLanguages ( int avoidLanguage ) { \n\tArrayList < SpinnerLanguageElement > result = new ArrayList < SpinnerLanguageElement > $F72 ; \n\t$F3803 languages = mSessionOptions . allLanguages ( ) ; \n\tfor ( $F3836 ( i , languages ) ) { \n\t\tif ( i != avoidLanguage ) { \n\t\t\tresult . add ( new SpinnerLanguageElement ( languages . get ( i ) , i ) ) ; \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "private String userAgent $F72 { \n\treturn mUserAgent ; \n\t} \n"}, {"code": "protected void collectProperties ( $F6969 type , $F101739 referenceType , Map < String , Property > properties ) { \n\ttry { \n\t\tBeanInfo beanInfo = Introspector . getBeanInfo ( type ) ; \n\t\tPropertyDescriptor [ ] descriptors = beanInfo . getPropertyDescriptors ( ) ; \n\t\tfor ( final PropertyDescriptor pd : descriptors ) { \n\t\t\ttry { \n\t\t\t\tMethod readMethod = getReadMethod ( pd , type ) ; \n\t\t\t\tMethod writeMethod = getWriteMethod ( pd , type , null ) ; \n\t\t\t\tProperty property = processProperty ( pd . getName ( ) , pd . getPropertyType ( ) , readMethod , writeMethod , type , referenceType , properties ) ; \n\t\t\t\tpostProcessProperty ( property , pd , readMethod , writeMethod , type , referenceType , properties ) ; \n\t\t\t\t} \n\t\t\tcatch ( final Exception e ) { \n\t\t\t\tthrow new RuntimeException ( NUM00 + referenceType . getCanonicalName ( ) + NUM00 + pd . getName ( ) + NUM00 , e ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tcatch ( IntrospectionException e ) $F9491 ( e ) } \n"}, {"code": "private void beforeKey $F72 throws JSONException { \n\tScope context = peek ( ) ; \n\tif ( context == Scope . NONEMPTY_OBJECT ) $F86 ( out ) else if ( context != Scope . EMPTY_OBJECT ) $F19954 newline ( ) ; \n\treplaceTop ( Scope . DANGLING_KEY ) ; \n\t} \n"}, {"code": "public void addHeaderView $F123554 ( v , data , isSelectable ) { \n\tif ( mAdapter != null && ! ( mAdapter instanceof HeaderViewListAdapter ) ) $F4639 $F123559 ( info ) info . view = v ; \n\tinfo . data = data ; \n\tinfo . isSelectable = isSelectable ; \n\tmHeaderViewInfos . add ( info ) ; \n\tif ( mAdapter != null && mObserver != null ) { \n\t\tmObserver . onChanged ( ) ; \n\t\t} \n\t} \n"}, {"code": "private void renderOperatorBackground ( final Operator operator , final Graphics2D g2 ) { \n\tRectangle2D frame = model . getOperatorRect ( operator ) ; \n\t$F2329 ( frame ) RoundRectangle2D background = new RoundRectangle2D . Double ( frame . getX ( ) - NUM00 , frame . getY ( ) - NUM00 , frame . getWidth ( ) + NUM00 , frame . getHeight ( ) + NUM00 , OPERATOR_BG_CORNER , OPERATOR_BG_CORNER ) ; \n\tg2 . setColor ( Color . WHITE ) ; \n\tg2 . fill ( background ) ; \n\tRectangle2D nameBounds = OPERATOR_FONT . getStringBounds ( operator . getName ( ) , g2 . getFontRenderContext ( ) ) ; \n\tif ( nameBounds . getWidth ( ) > frame . getWidth ( ) ) { \n\t\tdouble relevantWidth = Math . min ( nameBounds . getWidth ( ) , frame . getWidth ( ) * MAX_HEADER_RATIO ) ; \n\t\tdouble offset = ( frame . getWidth ( ) - relevantWidth ) / NUM00 ; \n\t\tint x = ( int ) ( frame . getX ( ) + offset ) ; \n\t\tint padding = NUM00 ; \n\t\tRoundRectangle2D nameBackground = new RoundRectangle2D . Double ( ( int ) Math . min ( frame . getX ( ) - padding , x - padding ) , frame . getY ( ) - NUM00 , relevantWidth + NUM00 * padding , ProcessRendererModel . HEADER_HEIGHT + NUM00 , OPERATOR_BG_CORNER , OPERATOR_BG_CORNER ) ; \n\t\tg2 . fill ( nameBackground ) ; \n\t\t} \n\trenderPortsBackground ( operator . getInputPorts ( ) , g2 ) ; \n\trenderPortsBackground ( operator . getOutputPorts ( ) , g2 ) ; \n\t} \n"}, {"code": "protected void optionWindow ( ActionEvent e ) { \n\tif ( optionsFrame == null ) { \n\t\toptionsFrame = new JmriJFrame ( Bundle . getMessage ( NUM00 ) , _BOOL , _BOOL ) ; \n\t\toptionsPane = optionsFrame . getContentPane ( ) ; \n\t\toptionsPane . setLayout ( new BoxLayout ( optionsFrame . getContentPane ( ) , BoxLayout . Y_AXIS ) ) ; \n\t\tclearEntry . setSelectedIndex ( nxPairs . getClearDownOption ( ) ) ; \n\t\t$F58099 ( p1 ) $F58097 ( clearEntry ) p1 . add ( new JLabel $F253578 ( Bundle ) ) ; \n\t\tp1 . add ( clearEntry ) ; \n\t\toptionsPane . add ( p1 ) ; \n\t\t$F58099 ( p2 ) initializeColorCombo ( settingTrackColorBox ) ; \n\t\tsetColorCombo ( settingTrackColorBox , nxPairs . getSettingRouteColor ( ) ) ; \n\t\tActionListener settingTrackColorListener = null ; \n\t\tsettingTrackColorBox . addActionListener ( settingTrackColorListener ) ; \n\t\tp2 . add ( new JLabel $F253578 ( Bundle ) ) ; \n\t\tp2 . add ( settingTrackColorBox ) ; \n\t\toptionsPane . add ( p2 ) ; \n\t\tdurationSetting . setText ( NUM00 + nxPairs . getSettingTimer ( ) ) ; \n\t\tif ( nxPairs . useDifferentColorWhenSetting ( ) ) $F7728 ( durationSetting , _BOOL ) else $F7728 ( durationSetting , _BOOL ) $F58099 ( p3 ) p3 . add ( new JLabel $F253578 ( Bundle ) ) ; \n\t\tp3 . add ( durationSetting ) ; \n\t\toptionsPane . add ( p3 ) ; \n\t\t$F58099 ( p4 ) p4 . add ( dispatcherUse ) ; \n\t\tdispatcherUse . setSelected ( nxPairs . getDispatcherIntegration ( ) ) ; \n\t\toptionsPane . add ( p4 ) ; \n\t\tJButton ok = new JButton $F253578 ( Bundle ) ; \n\t\toptionsPane . add ( ok ) ; \n\t\t$F32271 ( ok ) } \n\t$F30070 ( optionsFrame ) optionsFrame . setVisible ( _BOOL ) ; \n\t} \n"}, {"code": "public void makeExistingDemandBillInactive ( String assessmentNo ) { \n\tDemandBillService demandBillService = ( DemandBillService ) beanProvider . getBean ( NUM00 ) ; \n\tdemandBillService . makeDemandBillInactive ( assessmentNo ) ; \n\t} \n"}, {"code": "public void write ( DataOutput out ) throws IOException { \n\tWritableUtils . writeVInt ( out , length ) ; \n\t$F11584 ( out , bytes , length ) } \n"}, {"code": "int characterClass $F72 throws RESyntaxException { \n\tif $F20317 ( pattern , idx ) $F5795 ( internalError ) if ( ( idx + NUM00 ) >= len || pattern . charAt ( ++ idx ) == NUM00 ) $F1210 ( syntaxError ) if $F52566 ( idx , len , pattern ) { \n\t\tidx ++ ; \n\t\tint idxStart = idx ; \n\t\twhile ( idx < len && pattern . charAt ( idx ) >= NUM00 && pattern . charAt ( idx ) <= NUM00 ) { \n\t\t\tidx ++ ; \n\t\t\t} \n\t\tif ( ( idx + NUM00 ) < len && pattern . charAt ( idx ) == NUM00 && $F10825 ( pattern , idx ) ) { \n\t\t\t$F12715 ( charClass , pattern , idxStart , idx ) Character i = ( Character ) hashPOSIX . get ( charClass ) ; \n\t\t\tif ( i != null ) { \n\t\t\t\tidx += NUM00 ; \n\t\t\t\treturn node ( RE . OP_POSIXCLASS , i . charValue ( ) ) ; \n\t\t\t\t} \n\t\t\tsyntaxError ( NUM00 + charClass + NUM00 ) ; \n\t\t\t} \n\t\tsyntaxError ( NUM00 ) ; \n\t\t} \n\tint ret = node ( RE . OP_ANYOF , NUM00 ) ; \n\tchar CHAR_INVALID = Character . MAX_VALUE ; \n\tchar last = CHAR_INVALID ; \n\tchar simpleChar ; \n\tboolean include = _BOOL ; \n\tboolean definingRange = _BOOL ; \n\tint idxFirst = idx ; \n\tchar rangeStart = Character . MIN_VALUE ; \n\tchar rangeEnd ; \n\tRERange range = new RERange $F72 ; \n\twhile ( idx < len && pattern . charAt ( idx ) != NUM00 ) { \n\t\tswitchOnCharacter : switch $F31372 ( pattern , idx ) { \n\t\t\t$F1262 include = ! include ; \n\t\t\tif ( idx == idxFirst ) { \n\t\t\t\trange . include ( Character . MIN_VALUE , Character . MAX_VALUE , _BOOL ) ; \n\t\t\t\t} \n\t\t\tidx ++ ; \n\t\t\t$F598 $F1262 { \n\t\t\t\tint c ; \n\t\t\t\tswitch ( c = escape ( ) ) { \n\t\t\t\t\tcase ESC_COMPLEX : case ESC_BACKREF : syntaxError ( NUM00 ) ; \n\t\t\t\t\tcase ESC_CLASS : $F29727 ( definingRange , syntaxError ) switch ( pattern . charAt ( idx - NUM00 ) ) { \n\t\t\t\t\t\tcase RE . E_NSPACE : range . include ( Character . MIN_VALUE , NUM00 , include ) ; \n\t\t\t\t\t\trange . include ( $F2858 , include ) ; \n\t\t\t\t\t\trange . include ( NUM00 , NUM00 , include ) ; \n\t\t\t\t\t\trange . include ( NUM00 , Character . MAX_VALUE , include ) ; \n\t\t\t\t\t\t$F597 case RE . E_NALNUM : range . include ( Character . MIN_VALUE , NUM00 , include ) ; \n\t\t\t\t\t\trange . include ( NUM00 , NUM00 , include ) ; \n\t\t\t\t\t\trange . include ( NUM00 , NUM00 , include ) ; \n\t\t\t\t\t\trange . include ( NUM00 , include ) ; \n\t\t\t\t\t\trange . include ( NUM00 , Character . MAX_VALUE , include ) ; \n\t\t\t\t\t\t$F597 case RE . E_NDIGIT : range . include ( Character . MIN_VALUE , NUM00 , include ) ; \n\t\t\t\t\t\trange . include ( NUM00 , Character . MAX_VALUE , include ) ; \n\t\t\t\t\t\t$F597 case RE . E_SPACE : range . include ( NUM00 , include ) ; \n\t\t\t\t\t\trange . include ( NUM00 , include ) ; \n\t\t\t\t\t\trange . include ( NUM00 , include ) ; \n\t\t\t\t\t\trange . include ( NUM00 , include ) ; \n\t\t\t\t\t\trange . include ( NUM00 , include ) ; \n\t\t\t\t\t\trange . include ( NUM00 , include ) ; \n\t\t\t\t\t\t$F597 case RE . E_ALNUM : range . include ( NUM00 , NUM00 , include ) ; \n\t\t\t\t\t\trange . include ( NUM00 , NUM00 , include ) ; \n\t\t\t\t\t\trange . include ( NUM00 , include ) ; \n\t\t\t\t\t\tcase RE . E_DIGIT : range . include ( NUM00 , NUM00 , include ) ; \n\t\t\t\t\t\t$F597 } \n\t\t\t\t\tlast = CHAR_INVALID ; \n\t\t\t\t\t$F597 $F1267 simpleChar = ( char ) c ; \n\t\t\t\t\tbreak switchOnCharacter ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F598 $F1262 $F29727 ( definingRange , syntaxError ) definingRange = _BOOL ; \n\t\t\trangeStart = ( last == CHAR_INVALID ? NUM00 : last ) ; \n\t\t\tif ( ( idx + NUM00 ) < len && pattern . charAt ( ++ idx ) == NUM00 ) { \n\t\t\t\tsimpleChar = Character . MAX_VALUE ; \n\t\t\t\t$F597 } \n\t\t\t$F598 $F1267 $F47698 ( simpleChar , pattern , idx ) $F597 } \n\t\tif ( definingRange ) { \n\t\t\trangeEnd = simpleChar ; \n\t\t\tif ( rangeStart >= rangeEnd ) $F1210 ( syntaxError ) range . include ( rangeStart , rangeEnd , include ) ; \n\t\t\tlast = CHAR_INVALID ; \n\t\t\tdefiningRange = _BOOL ; \n\t\t\t} \n\t\telse { \n\t\t\tif ( idx >= len || pattern . charAt ( idx ) != NUM00 ) { \n\t\t\t\trange . include ( simpleChar , include ) ; \n\t\t\t\t} \n\t\t\tlast = simpleChar ; \n\t\t\t} \n\t\t} \n\tif ( idx == len ) $F1210 ( syntaxError ) idx ++ ; \n\tinstruction [ ret + RE . offsetOpdata ] = ( char ) range . num ; \n\tfor ( int i = NUM00 ; \n\ti < range . num ; \n\ti ++ ) { \n\t\temit ( ( char ) range . minRange [ i ] ) ; \n\t\temit ( ( char ) range . maxRange [ i ] ) ; \n\t\t} \n\treturn ret ; \n\t} \n"}, {"code": "public static $F96 decode $F97 ( data ) { \n\tint len = data . length / NUM00 * NUM00 ; \n\t$F39018 ( bOut , len ) try { \n\t\tencoder . decode ( data , NUM00 , data . length , bOut ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new DecoderException $F11592 ( e ) ; \n\t\t} \n\t$F11316 ( bOut ) } \n"}, {"code": "$F1 public int doFinal $F4741 ( out , outOff ) throws BadCiphertextException { \n\tcomplete_ = _BOOL ; \n\tint written = contentCryptoHandler_ . doFinal ( out , outOff ) ; \n\tupdateTrailingSignature ( out , outOff , written ) ; \n\tif ( cryptoAlgo_ . getTrailingSignatureLength ( ) > NUM00 ) { \n\t\ttry { \n\t\t\tCiphertextFooters footer = new CiphertextFooters ( trailingSig_ . sign ( ) ) ; \n\t\t\t$F1208 ( fBytes , footer ) System . arraycopy ( fBytes , NUM00 , out , outOff + written , fBytes . length ) ; \n\t\t\treturn written + fBytes . length ; \n\t\t\t} \n\t\tcatch ( final SignatureException ex ) { \n\t\t\tthrow new AwsCryptoException ( ex ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\treturn written ; \n\t\t} \n\t} \n"}, {"code": "public void hideAllBudges $F72 { \n\tfor ( RelativeLayout badge : badgeList ) { \n\t\tif ( badge . getVisibility ( ) == VISIBLE ) BadgeHelper . hideBadge ( badge ) ; \n\t\t} \n\t$F725 ( badgeSaveInstanceHashMap ) } \n"}, {"code": "public Element render ( SVGPlot svgp ) { \n\tElement tag = svgp . svgElement ( SVGConstants . SVG_G_TAG ) ; \n\tElement button = svgp . svgRect ( x , y , w , h ) ; \n\tif $F2292 ( Double , r ) { \n\t\tSVGUtil . setAtt ( button , SVGConstants . SVG_RX_ATTRIBUTE , r ) ; \n\t\tSVGUtil . setAtt ( button , SVGConstants . SVG_RY_ATTRIBUTE , r ) ; \n\t\t} \n\tSVGUtil . setAtt ( button , SVGConstants . SVG_STYLE_ATTRIBUTE , butcss . inlineCSS ( ) ) ; \n\ttag . appendChild ( button ) ; \n\tif ( svgp . getIdElement ( SVGEffects . LIGHT_GRADIENT_ID ) != null ) { \n\t\tElement light = svgp . svgRect ( x , y , w , h ) ; \n\t\tif $F2292 ( Double , r ) { \n\t\t\tSVGUtil . setAtt ( light , SVGConstants . SVG_RX_ATTRIBUTE , r ) ; \n\t\t\tSVGUtil . setAtt ( light , SVGConstants . SVG_RY_ATTRIBUTE , r ) ; \n\t\t\t} \n\t\tSVGUtil . setAtt ( light , SVGConstants . SVG_STYLE_ATTRIBUTE , NUM00 + SVGEffects . LIGHT_GRADIENT_ID + NUM00 ) ; \n\t\ttag . appendChild ( light ) ; \n\t\t} \n\tif ( svgp . getIdElement ( SVGEffects . SHADOW_ID ) != null ) { \n\t\tbutton . setAttribute ( SVGConstants . SVG_FILTER_ATTRIBUTE , NUM00 + SVGEffects . SHADOW_ID + NUM00 ) ; \n\t\t} \n\tif ( title != null ) { \n\t\tElement label = svgp . svgText ( x + w * NUM00 , y + h * NUM00 , title ) ; \n\t\tlabel . setAttribute ( SVGConstants . SVG_STYLE_ATTRIBUTE , titlecss . inlineCSS ( ) ) ; \n\t\ttag . appendChild ( label ) ; \n\t\t} \n\treturn tag ; \n\t} \n"}, {"code": "public void add ( String gram ) { \n\t$F57400 ( name , gram ) $F1749 ( len , gram ) if ( len < NUM00 || len > NGram . N_GRAM ) $F665 ++ n_words [ len - NUM00 ] ; \n\tif $F1710 ( freq , gram ) { \n\t\tfreq . put ( gram , freq . get ( gram ) + NUM00 ) ; \n\t\t} \n\telse $F248856 ( freq , gram ) } \n"}, {"code": "public void test_addressing $F72 { \n\tfinal Journal store = ( Journal ) getStore ( ) ; \n\ttry { \n\t\t$F205089 ( bufferStrategy , store ) $F205091 ( rw , bufferStrategy ) final $F15272 sizes = new $F15272 $F72 ; \n\t\tfinal TreeMap $F143848 paddrs = new TreeMap $F143848 $F72 ; \n\t\tfor ( $F6268 ( i ) ) { \n\t\t\tfinal int s = $F6823 ( r ) ; \n\t\t\tsizes . add ( s ) ; \n\t\t\tfinal int a = rw . alloc ( s , null ) ; \n\t\t\tfinal long pa = rw . physicalAddress ( a ) ; \n\t\t\tassertTrue ( paddrs . get ( pa ) == null ) ; \n\t\t\tpaddrs . put ( pa , a ) ; \n\t\t\t} \n\t\tfor ( $F6268 ( i ) ) { \n\t\t\tfinal int s = $F6823 ( r ) ; \n\t\t\tsizes . add ( s ) ; \n\t\t\tfinal int a = rw . alloc ( s , null ) ; \n\t\t\tfinal long pa = rw . physicalAddress ( a ) ; \n\t\t\tpaddrs . put ( pa , a ) ; \n\t\t\t} \n\t\t} \n\t$F17625 ( store ) } \n"}, {"code": "public void handleClientMembership ( String clientId , int eventType ) { \n\tString notifType = null ; \n\tList < ManagedResource > cleanedUp = null ; \n\tif ( eventType == ClientMembershipMessage . LEFT ) { \n\t\tnotifType = NOTIF_CLIENT_LEFT ; \n\t\tcleanedUp = cleanupBridgeClientResources ( clientId ) ; \n\t\t} \n\telse if ( eventType == ClientMembershipMessage . CRASHED ) { \n\t\tnotifType = NOTIF_CLIENT_CRASHED ; \n\t\tcleanedUp = cleanupBridgeClientResources ( clientId ) ; \n\t\t} \n\telse if ( eventType == ClientMembershipMessage . JOINED ) { \n\t\tnotifType = NOTIF_CLIENT_JOINED ; \n\t\t} \n\tif ( cleanedUp != null ) { \n\t\tfor ( ManagedResource resource : cleanedUp ) { \n\t\t\tMBeanUtil . unregisterMBean ( resource ) ; \n\t\t\t} \n\t\t} \n\tHelper . sendNotification ( this , new Notification ( notifType , this . modelMBean , Helper . getNextNotificationSequenceNumber ( ) , clientId ) ) ; \n\t} \n"}, {"code": "public < V extends Comparable $F42625 > OptionalDouble maxBy ( DoubleFunction $F2193 keyExtractor ) { \n\tObjDoubleBox $F2193 result = collect ( $F32718 ) ; \n\treturn result . a == null ? OptionalDouble . empty ( ) : OptionalDouble . of ( result . b ) ; \n\t} \n"}, {"code": "private JLabel addKeybindLabel ( JPanel panel , String labelText ) { \n\t$F45960 ( gbc ) $F98084 ( gbc , GridBagConstraints ) $F184708 ( gbc ) gbc . gridx = NUM00 ; \n\tgbc . gridy = keybindLabelGridYCounter ++ ; \n\tgbc . weightx = NUM00 ; \n\t$F78356 ( jlbl , labelText ) panel . add ( jlbl , gbc ) ; \n\treturn jlbl ; \n\t} \n"}, {"code": "public static boolean isLetterOrNumber ( int c ) { \n\treturn isLetter ( c ) || isNumber ( c ) ; \n\t} \n"}, {"code": "public String seasonSummaryStr $F72 { \n\tsetTeamRanks ( ) ; \n\t$F83 ( sb ) $F16690 ( sb , ncgSummaryStr ) sb . append ( NUM00 + userTeam . seasonSummaryStr ( ) ) ; \n\tsb . append ( NUM00 + leagueRecords . brokenRecordsStr ( getYear ( ) , userTeam . abbr ) ) ; \n\t$F92 ( sb ) } \n"}, {"code": "public void addEndBumper $F72 { \n\tnumEndBumpers ++ ; \n\tString name = NUM00 ; \n\tboolean duplicate = _BOOL ; \n\twhile ( duplicate ) { \n\t\tname = NUM00 + numEndBumpers ; \n\t\tif ( finder . findPositionablePointByName ( name ) == null ) { \n\t\t\tduplicate = _BOOL ; \n\t\t\t} \n\t\t$F19814 ( duplicate , numEndBumpers ) } \n\tPositionablePoint o = new PositionablePoint ( name , PositionablePoint . END_BUMPER , currentPoint , this ) ; \n\tpointList . add ( o ) ; \n\tsetDirty ( _BOOL ) ; \n\t} \n"}, {"code": "$F103859 ( data , results , key ) "}, {"code": "public int pixelFor ( Color c ) { \n\treturn pixelFor ( c . getRGB ( ) ) ; \n\t} \n"}, {"code": "void stripNonCompiledNodes ( Node n , $F2689 filesToCompile ) { \n\tfor ( Node child : n . children ( ) ) { \n\t\tif ( ! filesToCompile . contains ( child . getSourceFileName ( ) ) ) { \n\t\t\tchild . detachFromParent ( ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "protected void restoreBaseURI $F72 { \n\t$F34454 ( fBaseURI ) $F34454 ( fLiteralSystemID ) $F34454 ( fExpandedSystemID ) $F34454 ( fBaseURIScope ) fCurrentBaseURI . setBaseSystemId ( ( String ) fBaseURI . peek ( ) ) ; \n\tfCurrentBaseURI . setLiteralSystemId ( ( String ) fLiteralSystemID . peek ( ) ) ; \n\tfCurrentBaseURI . setExpandedSystemId ( ( String ) fExpandedSystemID . peek ( ) ) ; \n\t} \n"}, {"code": "$F9863 ( child , dx , dy , _BOOL , checkHorizontal , mCallback , checkVertical , mTouchSlop , Math ) "}, {"code": "public void testToBigIntegerPos1 $F72 $F114431 ( a , bNumber , aNumber , result , assertTrue ) "}, {"code": "public static boolean asBoolean ( CharSequence string ) { \n\treturn $F20 ( string ) ; \n\t} \n"}, {"code": "public void initialize $F72 { \n\tTextureState ts = new TextureState $F72 ; \n\tts . setEnabled ( _BOOL ) ; \n\tsetRenderState ( ts ) ; \n\tfor ( $F3836 ( i , landmarkList ) ) { \n\t\tLandmarkState state = landmarkList . get ( i ) ; \n\t\taddLandmark ( state , _BOOL ) ; \n\t\t} \n\tzBufferState = new ZBufferState $F72 ; \n\tzBufferState . setFunction ( ZBufferState . TestFunction . LessThanOrEqualTo ) ; \n\tzBufferState . setEnabled ( _BOOL ) ; \n\tsetRenderState ( zBufferState ) ; \n\t} \n"}, {"code": "public $F53328 enterTrees ( $F53328 roots ) { \n\tif $F5973 ( taskListener ) { \n\t\tfor ( JCCompilationUnit unit : roots ) { \n\t\t\tTaskEvent e = new TaskEvent ( TaskEvent . Kind . ENTER , unit ) ; \n\t\t\ttaskListener . started ( e ) ; \n\t\t\t} \n\t\t} \n\tenter . main ( roots ) ; \n\tif $F5973 ( taskListener ) { \n\t\tfor ( JCCompilationUnit unit : roots ) { \n\t\t\tTaskEvent e = new TaskEvent ( TaskEvent . Kind . ENTER , unit ) ; \n\t\t\ttaskListener . finished ( e ) ; \n\t\t\t} \n\t\t} \n\tif ( needRootClasses || sourceOutput || stubOutput ) { \n\t\tListBuffer < JCClassDecl > $F53349 ( cdefs ) ; \n\t\tfor ( JCCompilationUnit unit : roots ) { \n\t\t\tfor ( List $F53352 defs = unit . defs ; \n\t\t\tdefs . nonEmpty ( ) ; \n\t\t\tdefs = defs . tail ) { \n\t\t\t\tif ( defs . head instanceof JCClassDecl ) cdefs . append ( ( JCClassDecl ) defs . head ) ; \n\t\t\t\t} \n\t\t\t} \n\t\trootClasses = cdefs . toList ( ) ; \n\t\t} \n\tfor ( JCCompilationUnit unit : roots ) { \n\t\tinputFiles . add ( unit . sourcefile ) ; \n\t\t} \n\treturn roots ; \n\t} \n"}, {"code": "final V replaceNode ( long key , V value , Object cv ) { \n\tint hash = spread ( key ) ; \n\tfor ( $F75434 tab = table ; \n\t; \n\t) { \n\t\t$F75433 f ; \n\t\tint n , i , fh ; \n\t\tif ( $F35157 ( tab , n ) || $F35160 ( f , tabAt , tab , i , n , hash ) ) $F5153 else if $F35162 ( fh , f , MOVED ) $F176272 ( tab , helpTransfer , f ) else { \n\t\t\tV oldVal = null ; \n\t\t\tboolean validated = _BOOL ; \n\t\t\tsynchronized ( f ) { \n\t\t\t\tif ( tabAt ( tab , i ) == f ) { \n\t\t\t\t\tif ( fh >= NUM00 ) { \n\t\t\t\t\t\tvalidated = _BOOL ; \n\t\t\t\t\t\tfor ( $F75433 e = f , pred = null ; \n\t\t\t\t\t\t; \n\t\t\t\t\t\t) { \n\t\t\t\t\t\t\tif ( ( e . key == key ) ) { \n\t\t\t\t\t\t\t\tV ev = e . val ; \n\t\t\t\t\t\t\t\tif $F125165 ( cv , ev ) { \n\t\t\t\t\t\t\t\t\toldVal = ev ; \n\t\t\t\t\t\t\t\t\tif ( value != null ) { \n\t\t\t\t\t\t\t\t\t\te . val = value ; \n\t\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t\telse if ( pred != null ) { \n\t\t\t\t\t\t\t\t\t\t$F33910 ( pred , e ) } \n\t\t\t\t\t\t\t\t\telse { \n\t\t\t\t\t\t\t\t\t\tsetTabAt ( tab , i , e . next ) ; \n\t\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t$F597 } \n\t\t\t\t\t\t\tpred = e ; \n\t\t\t\t\t\t\tif ( ( e = e . next ) == null ) $F5153 } \n\t\t\t\t\t\t} \n\t\t\t\t\telse if ( f instanceof TreeBin ) { \n\t\t\t\t\t\tvalidated = _BOOL ; \n\t\t\t\t\t\tTreeBin $F2193 t = ( TreeBin $F2193 ) f ; \n\t\t\t\t\t\tTreeNode $F2193 r , p ; \n\t\t\t\t\t\tif ( ( r = t . root ) != null && ( p = r . findTreeNode ( hash , key ) ) != null ) { \n\t\t\t\t\t\t\tV pv = p . val ; \n\t\t\t\t\t\t\tif $F125165 ( cv , pv ) { \n\t\t\t\t\t\t\t\toldVal = pv ; \n\t\t\t\t\t\t\t\tif ( value != null ) { \n\t\t\t\t\t\t\t\t\tp . val = value ; \n\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\telse if ( t . removeTreeNode ( p ) ) { \n\t\t\t\t\t\t\t\t\tsetTabAt ( tab , i , untreeify ( t . first ) ) ; \n\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tif ( validated ) { \n\t\t\t\tif ( oldVal != null ) { \n\t\t\t\t\tif ( value == null ) { \n\t\t\t\t\t\taddCount ( $F64496 ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\treturn oldVal ; \n\t\t\t\t\t} \n\t\t\t\t$F597 } \n\t\t\t} \n\t\t} \n\t$F1274 } \n"}, {"code": "public static LineByLineFileInputOperator checkpoint ( LineByLineFileInputOperator oper , ByteArrayOutputStream bos ) throws Exception { \n\tKryo kryo = new Kryo $F72 ; \n\tOutput loutput = new Output ( bos ) ; \n\tkryo . writeObject ( loutput , oper ) ; \n\t$F59 ( loutput ) Input lInput = new Input $F87573 ( bos ) ; \n\t$F1431 LineByLineFileInputOperator checkPointedOper = kryo . readObject ( lInput , oper . getClass ( ) ) ; \n\t$F59 ( lInput ) return checkPointedOper ; \n\t} \n"}, {"code": "public static String explode $F126719 ( collection , delimiter ) { \n\t$F83 ( sb ) if $F5973 ( collection ) { \n\t\t$F13712 ( i , collection ) $F45691 ( sb , i ) while $F2921 ( i ) { \n\t\t\tsb . append ( delimiter ) ; \n\t\t\t$F45691 ( sb , i ) } \n\t\t} \n\t$F92 ( sb ) } \n"}, {"code": "$F16587 ( fullyQualifiedName ) "}, {"code": "$F1 public $F14937 enumerateMeasures $F72 { \n\t$F75150 ( newVector ) $F6519 ( newVector ) $F1007 ( newVector ) } \n"}, {"code": "public static void writeStatistics ( TDoubleObjectHashMap < DescriptiveStatistics > statsMap , String keyLabel , String file ) throws IOException { \n\t$F1986 keys = statsMap . keys ( ) ; \n\tArrays . sort ( keys ) ; \n\t$F1764 ( writer , file ) writer . write ( keyLabel ) ; \n\twriter . write ( TAB ) ; \n\t$F3410 ( writer ) writer . write ( TAB ) ; \n\t$F3410 ( writer ) writer . write ( TAB ) ; \n\t$F3410 ( writer ) writer . write ( TAB ) ; \n\t$F3410 ( writer ) writer . write ( TAB ) ; \n\t$F3410 ( writer ) $F1769 ( writer ) for ( double key : keys ) { \n\t\tDescriptiveStatistics stats = statsMap . get ( key ) ; \n\t\t$F406601 ( writer , String , key ) writer . write ( TAB ) ; \n\t\twriter . write ( String . valueOf ( stats . getMean ( ) ) ) ; \n\t\twriter . write ( TAB ) ; \n\t\twriter . write ( String . valueOf ( stats . getPercentile ( NUM00 ) ) ) ; \n\t\twriter . write ( TAB ) ; \n\t\twriter . write ( String . valueOf ( stats . getMin ( ) ) ) ; \n\t\twriter . write ( TAB ) ; \n\t\twriter . write ( String . valueOf ( stats . getMax ( ) ) ) ; \n\t\twriter . write ( TAB ) ; \n\t\twriter . write ( String . valueOf ( stats . getN ( ) ) ) ; \n\t\t$F1769 ( writer ) } \n\t$F59 ( writer ) } \n"}, {"code": "public void actionPerformed ( ActionEvent e ) { \n\t$F15308 ( checkModified ) if ( m_Script . getFilename ( ) == null ) $F665 try { \n\t\tm_Script . start ( m_Args ) ; \n\t\t} \n\tcatch ( Exception ex ) { \n\t\t$F301 ( ex ) JOptionPane . showMessageDialog ( FileScriptingPanel . this , NUM00 + ex , NUM00 , JOptionPane . ERROR_MESSAGE ) ; \n\t\t} \n\t} \n"}, {"code": "static String encodeStub ( RMIServer rmiServer , $F6253 ( env ) ) throws IOException { \n\tif ( IIOPHelper . isStub ( rmiServer ) ) return NUM00 + encodeIIOPStub ( rmiServer , env ) ; \n\telse return NUM00 + encodeJRMPStub ( rmiServer , env ) ; \n\t} \n"}, {"code": "public int lineToY ( int line ) { \n\t$F319 ( fm , painter ) return ( line - firstLine ) * fm . getHeight ( ) - ( fm . getLeading ( ) + fm . getMaxDescent ( ) ) ; \n\t} \n"}, {"code": "private void handleDoubleClick ( DoubleClickEvent e ) { \n\t$F359183 ( selection , e ) if ( selection instanceof IStructuredSelection ) { \n\t\tIStructuredSelection structured = ( IStructuredSelection ) selection ; \n\t\tif $F10471 ( structured ) { \n\t\t\tObject first = structured . getFirstElement ( ) ; \n\t\t\tif ( first instanceof ISVNRemoteFile ) { \n\t\t\t\topenAction . selectionChanged ( null , selection ) ; \n\t\t\t\topenAction . run ( null ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\ttreeViewer . setExpandedState ( first , ! treeViewer . getExpandedState ( first ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public CSVResultSetConfiguration $F72 $F845 "}, {"code": "protected File chooseFile ( int type ) { \n\tFrame frame = getFrame ( ) ; \n\tFile f = null ; \n\tif ( fileChooser == null ) fileChooser = new JFileChooser $F72 ; \n\tfileChooser . setCurrentDirectory ( E00File ) ; \n\tif ( type == NUM00 ) fileChooser . setDialogType ( JFileChooser . OPEN_DIALOG ) ; \n\telse fileChooser . setDialogType ( JFileChooser . SAVE_DIALOG ) ; \n\tint retval = fileChooser . showDialog ( frame , null ) ; \n\tif ( retval == JFileChooser . APPROVE_OPTION ) f = fileChooser . getSelectedFile ( ) ; \n\treturn f ; \n\t} \n"}, {"code": "public void pixellate ( FontRenderContext renderFRC , Point2D loc , Point pxResult ) { \n\t$F13265 ( renderFRC , frc ) $F37301 ( at , renderFRC ) $F166803 ( at , loc ) pxResult . x = $F52991 ( loc ) ; \n\tpxResult . y = $F52994 ( loc ) ; \n\tloc . setLocation ( $F25550 ( pxResult ) ) ; \n\ttry { \n\t\tat . inverseTransform ( loc , loc ) ; \n\t\t} \n\tcatch ( NoninvertibleTransformException e ) $F825 } \n"}, {"code": "public static long startTime $F72 { \n\treturn System . nanoTime ( ) ; \n\t} \n"}, {"code": "$F1230 public int deleteAll $F72 { \n\t$F5675 allEntities = retrieveAll ( ) ; \n\tfor ( T entity : allEntities ) { \n\t\tdelete ( entity ) ; \n\t\t} \n\t$F1651 ( allEntities ) } \n"}, {"code": "private GSMessageImpl receiveFromQueue ( long timeout ) throws ReceiveFromQueueException { \n\tTransaction txn = m_session . getTransaction ( ) ; \n\tif $F6456 ( _logger , Level ) { \n\t\t_logger . log ( Level . FINE , NUM00 + txn ) ; \n\t\t} \n\ttry { \n\t\treturn ( GSMessageImpl ) m_space . take ( m_jmsMessageTemplate , txn , timeout ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new ReceiveFromQueueException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public static void writeByteArrayToFile ( File file , $F96 data , boolean append ) throws IOException { \n\tOutputStream out = null ; \n\ttry { \n\t\tout = openOutputStream ( file , append ) ; \n\t\tout . write ( data ) ; \n\t\t$F59 ( out ) } \n\t$F18090 ( IOUtils , out ) } \n"}, {"code": "public String findNext ( boolean previousFlipped ) { \n\tboolean resetIsFlipped = _BOOL ; \n\tif ( previousFlipped && count > NUM00 ) { \n\t\tif $F87568 ( valueIterator ) { \n\t\t\t$F18058 ( valueIterator , values ) index = NUM00 ; \n\t\t\tisFlipped = _BOOL ; \n\t\t\tresetIsFlipped = _BOOL ; \n\t\t\t} \n\t\telse { \n\t\t\tindex ++ ; \n\t\t\t} \n\t\t$F45366 ( currentValue , valueIterator ) } \n\tcount ++ ; \n\t$F65989 ( resetIsFlipped , isFlipped , _BOOL ) return currentValue ; \n\t} \n"}, {"code": "public static boolean isNotEmpty $F11546 ( list ) $F3387 ( list ) "}, {"code": "private RegistrationResult checkPassword ( String password , String confirmPassword ) { \n\tif ( ( password == null ) || $F1276 ( password ) ) { \n\t\t$F144577 ( debug ) return RegistrationResult . NO_PASSWORD_ERROR ; \n\t\t} \n\telse { \n\t\tif $F80353 ( password , requiredPasswordLength ) { \n\t\t\t$F144577 ( debug ) return RegistrationResult . PASSWORD_TOO_SHORT ; \n\t\t\t} \n\t\tif ( ( confirmPassword == null ) || $F1276 ( confirmPassword ) ) { \n\t\t\t$F144577 ( debug ) return RegistrationResult . NO_CONFIRMATION_ERROR ; \n\t\t\t} \n\t\telse { \n\t\t\tif $F2137 ( password , confirmPassword ) { \n\t\t\t\treturn RegistrationResult . PASSWORD_MISMATCH_ERROR ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn RegistrationResult . NO_ERROR ; \n\t} \n"}, {"code": "private static LDAPFilter createANDFilter ( FilterSet filterSet ) throws LDAPException , IOException { \n\tList < JAXBElement $F1011 > list = filterSet . getFilterGroup ( ) ; \n\tArrayList < RawFilter > $F719 ( filters , list ) ; \n\tfor ( JAXBElement $F1011 filter : list ) $F3762 ( filters , createFilter , filter ) return LDAPFilter . createANDFilter ( filters ) ; \n\t} \n"}, {"code": "void calculateUtility ( FiringPlan firingPlan , int overheatTolerance , boolean shooterIsAero ) { \n\tint overheat = NUM00 ; \n\tif ( firingPlan . getHeat ( ) > overheatTolerance ) { \n\t\toverheat = firingPlan . getHeat ( ) - overheatTolerance ; \n\t\t} \n\tdouble modifier = NUM00 ; \n\tmodifier += $F7441 ( calcCommandUtility , firingPlan ) ; \n\tmodifier += $F7441 ( calcStrategicBuildingTargetUtility , firingPlan ) ; \n\tmodifier += $F7441 ( calcPriorityUnitTargetUtility , firingPlan ) ; \n\tdouble utility = NUM00 ; \n\tutility += DAMAGE_UTILITY * firingPlan . getExpectedDamage ( ) ; \n\tutility += CRITICAL_UTILITY * firingPlan . getExpectedCriticals ( ) ; \n\tutility += KILL_UTILITY * firingPlan . getKillProbability ( ) ; \n\tutility *= $F7441 ( calcTargetPotentialDamageMultiplier , firingPlan ) ; \n\tutility += TARGET_HP_FRACTION_DEALT_UTILITY * calcDamageAllocationUtility ( firingPlan . getTarget ( ) , firingPlan . getExpectedDamage ( ) ) ; \n\tutility -= $F7441 ( calcCivilianTargetDisutility , firingPlan ) ; \n\tutility *= modifier ; \n\tutility -= ( shooterIsAero ? OVERHEAT_DISUTILITY_AERO : OVERHEAT_DISUTILITY ) * overheat ; \n\tutility -= ( firingPlan . getTarget ( ) instanceof MechWarrior ) ? EJECTED_PILOT_DISUTILITY : NUM00 ; \n\tfiringPlan . setUtility ( utility ) ; \n\t} \n"}, {"code": "public void put ( String key , double value ) { \n\tif ( value == Double . POSITIVE_INFINITY ) $F28986 ( put , key ) else if ( value == Double . NEGATIVE_INFINITY ) $F28986 ( put , key ) else $F261761 ( put , key , Double , value ) } \n"}, {"code": "public void test_fill$FIIF $F72 { \n\tfloat val = Float . MAX_VALUE ; \n\tfloat $F3234 = $F12454 ; \n\t$F47119 ( Arrays , d , val ) $F47123 ( i , assertTrue , d , val ) $F47124 ( i , d , assertTrue , val ) $F47128 ( Arrays , d , val , fail ) $F47133 ( Arrays , d , val , fail ) $F47138 ( Arrays , d , val , fail ) } \n"}, {"code": "public static long persianToJulian ( long year , int month , int day ) { \n\treturn NUM00 * ( ( ceil ( year - NUM00 , NUM00 ) + NUM00 ) - NUM00 ) + ( ( long ) Math . floor ( ( NUM00 * ( ceil ( year - NUM00 , NUM00 ) + NUM00 ) - NUM00 ) / NUM00 ) ) + ( PersianCalendarConstants . PERSIAN_EPOCH - NUM00 ) + NUM00 * ( ( long ) Math . floor ( ( year - NUM00 ) / NUM00 ) ) + ( month < NUM00 ? NUM00 * month : NUM00 * month + NUM00 ) + day ; \n\t} \n"}, {"code": "$F1 public void mouseDragged ( MouseEvent evt ) { \n\tint xTrans = NUM00 ; \n\tint yTrans = NUM00 ; \n\tif ( slider . getSnapToTicks ( ) ) { \n\t\tint pos = getLocationForValue ( getSnappedValue ( evt ) ) ; \n\t\tif ( pos > - NUM00 ) { \n\t\t\tif ( slider . getOrientation ( ) == JSlider . HORIZONTAL ) { \n\t\t\t\txTrans = pos - evt . getX ( ) + offset ; \n\t\t\t\tevt . translatePoint ( xTrans , NUM00 ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tyTrans = pos - evt . getY ( ) + offset ; \n\t\t\t\tevt . translatePoint ( NUM00 , yTrans ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tdelegate . mouseDragged ( evt ) ; \n\tevt . translatePoint ( xTrans , yTrans ) ; \n\t} \n"}, {"code": "$F1 final $F9341 find ( int h , Object k ) { \n\tif ( k != null ) { \n\t\tfor ( $F9341 e = first ; \n\t\te != null ; \n\t\te = e . next ) { \n\t\t\tint s ; \n\t\t\tK ek ; \n\t\t\tif ( ( ( s = lockState ) & ( WAITER | WRITER ) ) != NUM00 ) { \n\t\t\t\tif ( e . hash == h && ( ( ek = e . key ) == k || $F35166 ( ek , k ) ) ) return e ; \n\t\t\t\t} \n\t\t\telse if ( U . compareAndSwapInt ( this , LOCKSTATE , s , s + READER ) ) { \n\t\t\t\t$F35195 ( r , p ) try { \n\t\t\t\t\tp = ( ( r = root ) == null ? null : r . findTreeNode ( h , k , null ) ) ; \n\t\t\t\t\t} \n\t\t\t\tfinally { \n\t\t\t\t\tThread w ; \n\t\t\t\t\tint ls ; \n\t\t\t\t\tdo $F845 while ( ! U . compareAndSwapInt ( this , LOCKSTATE , ls = lockState , ls - READER ) ) ; \n\t\t\t\t\tif ( ls == ( READER | WAITER ) && ( w = waiter ) != null ) LockSupport . unpark ( w ) ; \n\t\t\t\t\t} \n\t\t\t\treturn p ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F1274 } \n"}, {"code": "public void stopEnumeration ( EnumerationDeletionContext aws ) { \n\taws . computeEnumerationRequest . enumerationAction = EnumerationAction . STOP ; \n\thandleEnumerationRequestForDeletion ( aws ) ; \n\t} \n"}, {"code": "public static void doRestart ( Context c ) { \n\ttry { \n\t\tif ( c != null ) { \n\t\t\t$F45547 ( pm , c ) if ( pm != null ) { \n\t\t\t\tIntent mStartActivity = pm . getLaunchIntentForPackage ( c . getPackageName ( ) ) ; \n\t\t\t\tif ( mStartActivity != null ) { \n\t\t\t\t\tmStartActivity . addFlags ( Intent . FLAG_ACTIVITY_CLEAR_TOP ) ; \n\t\t\t\t\tint mPendingIntentId = NUM00 ; \n\t\t\t\t\tPendingIntent mPendingIntent = PendingIntent . getActivity ( c , mPendingIntentId , mStartActivity , PendingIntent . FLAG_CANCEL_CURRENT ) ; \n\t\t\t\t\tAlarmManager mgr = ( AlarmManager ) c . getSystemService ( Context . ALARM_SERVICE ) ; \n\t\t\t\t\tmgr . set ( AlarmManager . RTC , $F113506 ( System ) , mPendingIntent ) ; \n\t\t\t\t\t$F5194 ( System ) } \n\t\t\t\telse $F259302 ( Log ) } \n\t\t\telse $F259302 ( Log ) } \n\t\telse $F259302 ( Log ) } \n\tcatch ( Exception ex ) $F259302 ( Log ) } \n"}, {"code": "public $F5363 values $F72 { \n\t$F3523 answer = new $F3523 $F716 ( readMethods ) ; \n\tfor ( $F91960 iter = valueIterator ( ) ; \n\titer . hasNext ( ) ; \n\t) { \n\t\tanswer . add ( iter . next ( ) ) ; \n\t\t} \n\t$F26666 ( Collections , answer ) } \n"}, {"code": "protected DateTimeData parse ( String str ) throws SchemaDateTimeException { \n\tDateTimeData date = new DateTimeData ( str , this ) ; \n\t$F1749 ( len , str ) int end = getYearMonth ( str , NUM00 , len , date ) ; \n\tdate . day = DAY ; \n\tparseTimeZone ( str , end , len , date ) ; \n\tvalidateDateTime ( date ) ; \n\tsaveUnnormalized ( date ) ; \n\tif ( date . utc != NUM00 && date . utc != NUM00 ) { \n\t\tnormalize ( date ) ; \n\t\t} \n\tdate . position = NUM00 ; \n\treturn date ; \n\t} \n"}, {"code": "public ArrayVal $F9830 ( values ) { \n\tthis . array = new double [ values . length ] ; \n\tfor ( $F1139 ( i , array ) ) $F15086 ( array , i , values ) hashcode = Arrays . hashCode ( array ) ; \n\t} \n"}, {"code": "public void addChild ( String child ) { \n\t$F2329 ( child ) String childPath = path . endsWith ( NUM00 ) ? path + child : path + NUM00 + child ; \n\tchildren . add ( new ZkNode ( childPath ) ) ; \n\t} \n"}, {"code": "$F1219 public static boolean sendToTMaster ( String command , String topologyName , SchedulerStateManagerAdaptor stateManager , NetworkUtils . TunnelConfig tunnelConfig ) { \n\t$F35577 ( LOG , topologyName ) TopologyMaster . TMasterLocation location = stateManager . getTMasterLocation ( topologyName ) ; \n\tif ( location == null ) { \n\t\t$F285008 ( LOG , topologyName ) return _BOOL ; \n\t\t} \n\t$F35577 ( LOG , topologyName ) String url = String . format ( NUM00 , location . getHost ( ) , location . getControllerPort ( ) , command , location . getTopologyId ( ) ) ; \n\ttry { \n\t\t$F9518 ( endpoint , url ) $F35577 ( LOG , endpoint ) return sendGetRequest ( endpoint , command , tunnelConfig ) ; \n\t\t} \n\tcatch ( MalformedURLException e ) $F72290 ( url , e ) } \n"}, {"code": "public int addPadding $F5474 ( in , inOff ) { \n\t$F18952 ( code , in , inOff ) while ( inOff < $F33765 ( in ) ) { \n\t\tin [ inOff ] = ( byte ) random . nextInt ( ) ; \n\t\tinOff ++ ; \n\t\t} \n\tin [ inOff ] = code ; \n\treturn code ; \n\t} \n"}, {"code": "public void update ( long duration , TimeUnit unit ) { \n\tupdate ( unit . toNanos ( duration ) ) ; \n\t} \n"}, {"code": "public static String fromDoc2String ( Document doc ) throws Exception { \n\tKXmlSerializer serializer = new KXmlSerializer $F72 ; \n\t$F1538 ( bos ) $F1533 ( dos , bos ) try { \n\t\t$F96257 ( serializer , _BOOL ) serializer . setOutput ( dos , XformConstants . DEFAULT_CHARACTER_ENCODING ) ; \n\t\tdoc . write ( serializer ) ; \n\t\t$F1206 ( serializer ) } \n\t$F84580 ( e ) return new String ( bos . toByteArray ( ) , XformConstants . DEFAULT_CHARACTER_ENCODING ) ; \n\t} \n"}, {"code": "public int addOrderTerm ( GenericValue orderTerm ) $F203238 ( orderTerms , orderTerm ) "}, {"code": "public static int checkActions $F4673 ( entry ) { \n\tboolean ip6 = _BOOL ; \n\tboolean ip4 = _BOOL ; \n\tString actions = null ; \n\tif ( entry . containsKey ( StaticFlowEntryPusher . COLUMN_ACTIONS ) || entry . containsKey ( StaticFlowEntryPusher . COLUMN_INSTR_APPLY_ACTIONS ) || entry . containsKey ( StaticFlowEntryPusher . COLUMN_INSTR_WRITE_ACTIONS ) ) { \n\t\tif ( entry . containsKey ( StaticFlowEntryPusher . COLUMN_ACTIONS ) ) { \n\t\t\tactions = ( String ) entry . get ( StaticFlowEntryPusher . COLUMN_ACTIONS ) ; \n\t\t\t} \n\t\telse if ( entry . containsKey ( StaticFlowEntryPusher . COLUMN_INSTR_APPLY_ACTIONS ) ) { \n\t\t\tactions = ( String ) entry . get ( StaticFlowEntryPusher . COLUMN_INSTR_APPLY_ACTIONS ) ; \n\t\t\t} \n\t\telse if ( entry . containsKey ( StaticFlowEntryPusher . COLUMN_INSTR_WRITE_ACTIONS ) ) { \n\t\t\tactions = ( String ) entry . get ( StaticFlowEntryPusher . COLUMN_INSTR_WRITE_ACTIONS ) ; \n\t\t\t} \n\t\tif ( actions . contains ( MatchUtils . STR_ICMPV6_CODE ) || actions . contains ( MatchUtils . STR_ICMPV6_TYPE ) || actions . contains ( MatchUtils . STR_IPV6_DST ) || actions . contains ( MatchUtils . STR_IPV6_SRC ) || actions . contains ( MatchUtils . STR_IPV6_FLOW_LABEL ) || actions . contains ( MatchUtils . STR_IPV6_ND_SSL ) || actions . contains ( MatchUtils . STR_IPV6_ND_TARGET ) || actions . contains ( MatchUtils . STR_IPV6_ND_TTL ) ) { \n\t\t\tip6 = _BOOL ; \n\t\t\t} \n\t\tif ( actions . contains ( MatchUtils . STR_NW_SRC ) || actions . contains ( MatchUtils . STR_NW_DST ) || actions . contains ( MatchUtils . STR_ARP_OPCODE ) || actions . contains ( MatchUtils . STR_ARP_SHA ) || actions . contains ( MatchUtils . STR_ARP_DHA ) || actions . contains ( MatchUtils . STR_ARP_SPA ) || actions . contains ( MatchUtils . STR_ARP_DPA ) || actions . contains ( MatchUtils . STR_ICMP_CODE ) || actions . contains ( MatchUtils . STR_ICMP_TYPE ) ) { \n\t\t\tip4 = _BOOL ; \n\t\t\t} \n\t\t} \n\tif ( ip6 == _BOOL && ip4 == _BOOL ) $F1083 else if ( ip6 == _BOOL && ip4 == _BOOL ) $F1083 else if ( ip6 == _BOOL && ip4 == _BOOL ) $F1083 else $F7629 } \n"}, {"code": "public String toString $F72 { \n\t$F83 ( stringBuilder ) for ( ValidationErrorObject error : errors ) $F221418 ( stringBuilder , error ) $F92 ( stringBuilder ) } \n"}, {"code": "public static ObservableStringValue decision ( ObservableBooleanValue condition , ObservableStringValue ifTrue , ObservableStringValue ifFalse ) { \n\tStringProperty ret = new SimpleStringProperty $F72 ; \n\tcondition . addListener ( null ) ; \n\tifTrue . addListener ( null ) ; \n\tifFalse . addListener ( null ) ; \n\tret . set ( condition . get ( ) ? ifTrue . get ( ) : ifFalse . get ( ) ) ; \n\treturn ret ; \n\t} \n"}, {"code": "public static final boolean readFromStream ( InputStream in , $F96 buf , int offset , int len ) throws IOException { \n\tint totalBytesRead = NUM00 ; \n\twhile ( totalBytesRead < len ) { \n\t\t$F113519 ( bytesRead , in , buf , offset , totalBytesRead , len ) $F7879 ( bytesRead , _BOOL ) totalBytesRead += bytesRead ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static Field findStaticField $F17798 ( type , name ) throws NoSuchFieldException { \n\tField field = findField ( type , name ) ; \n\tif $F48024 ( Modifier , field ) { \n\t\tthrow new NoSuchFieldException ( NUM00 + name + NUM00 ) ; \n\t\t} \n\treturn field ; \n\t} \n"}, {"code": "public void newBraces ( EditorState editorState , char ch ) { \n\tString casName = argumentHelper . readCharacters ( editorState ) ; \n\tif ( ch == FUNCTION_OPEN_KEY && metaModel . isGeneral ( casName ) ) { \n\t\tdelCharacters ( editorState , casName . length ( ) ) ; \n\t\tnewFunction ( editorState , casName ) ; \n\t\t} \n\telse if ( ch == FUNCTION_OPEN_KEY && metaModel . isFunction ( casName ) ) { \n\t\tdelCharacters ( editorState , casName . length ( ) ) ; \n\t\tnewFunction ( editorState , casName ) ; \n\t\t} \n\telse $F40485 ( newArray , editorState , ch ) } \n"}, {"code": "$F1 public Xid [ ] recover ( int flag ) throws XAException { \n\tdebugCodeCall ( NUM00 , quoteFlags ( flag ) ) ; \n\tcheckOpen ( ) ; \n\ttry $F348538 ( stat , physicalConn ) { \n\t\tResultSet rs = stat . executeQuery ( NUM00 + NUM00 ) ; \n\t\tArrayList < Xid > list = New . arrayList ( ) ; \n\t\twhile $F1682 ( rs ) { \n\t\t\t$F21024 ( tid , rs ) int id = getNextId ( XID ) ; \n\t\t\tXid xid = new JdbcXid ( factory , id , tid ) ; \n\t\t\tlist . add ( xid ) ; \n\t\t\t} \n\t\t$F59 ( rs ) Xid [ ] result = new Xid $F2313 ( list ) ; \n\t\tlist . toArray ( result ) ; \n\t\tif $F3817 ( list ) { \n\t\t\tprepared = _BOOL ; \n\t\t\t} \n\t\treturn result ; \n\t\t} \n\tcatch ( SQLException e ) { \n\t\tXAException xa = new XAException ( XAException . XAER_RMERR ) ; \n\t\txa . initCause ( e ) ; \n\t\tthrow xa ; \n\t\t} \n\t} \n"}, {"code": "public void bind ( Texture texture ) $F115274 ( faces ) "}, {"code": "public final void clearPassword $F72 $F21018 ( Arrays , password ) "}, {"code": "private static int NewCharArray ( JNIEnvironment env , int length ) { \n\t$F4274 ( traceJNI , VM ) $F4275 ( RuntimeEntrypoints ) try { \n\t\t$F18064 ( newArray , length ) $F79069 ( env , newArray ) } \n\t$F4287 ( traceJNI , unexpected , System , env ) } \n"}, {"code": "$F125215 ( glUseProgram , quadProgram , texUniform , glGetUniformLocation , glUniform1i ) "}, {"code": "public void put ( E e ) throws InterruptedException { \n\t$F61745 ( e ) int c = - NUM00 ; \n\t$F13430 node = $F201035 ( e ) ; \n\t$F677 ( putLock , this ) $F201031 ( count , this ) $F678 ( putLock ) try { \n\t\twhile $F33770 ( count , capacity ) $F24081 ( notFull ) enqueue ( node ) ; \n\t\t$F201038 ( c , count ) $F201039 ( c , capacity , notFull ) } \n\t$F796 ( putLock ) $F42886 ( c , signalNotEmpty ) } \n"}, {"code": "public static boolean logFileZipped ( String file ) { \n\treturn file . endsWith ( NUM00 ) || file . endsWith ( NUM00 ) || file . endsWith ( NUM00 ) ; \n\t} \n"}, {"code": "private void validateHasChecksumFile ( File archiveFile ) throws InvalidArchiveUpdateException { \n\ttry { \n\t\tresolveChecksumFile ( extractFileToDirectory ( archiveFile , CHECKSUMS_FILE_IN_OPENIDM ) ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new InvalidArchiveUpdateException ( archiveFile . getName ( ) , $F2990 ( archiveFile ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "protected String ratsProblem $F72 { \n\t$F21899 ( text ) return ( text ) ; \n\t} \n"}, {"code": "public $F6969 lookupEntityClass $F60993 ( objClass ) { \n\tfor ( $F6969 cls = objClass ; \n\tcls != null ; \n\tcls = cls . getSuperclass ( ) ) { \n\t\tif ( entityBindings . containsKey ( cls ) || cls . isAnnotationPresent ( Entity . class ) ) { \n\t\t\treturn cls ; \n\t\t\t} \n\t\t} \n\t$F11416 ( objClass ) } \n"}, {"code": "private boolean isWhitespace ( int position ) { \n\tif ( _len >= NUM00 && position >= _len ) { \n\t\treturn _BOOL ; \n\t\t} \n\treturn Character . isWhitespace ( _working [ position ] ) ; \n\t} \n"}, {"code": "private void collectWrapperClasses ( ClassLoader cl , String pkg , File file ) throws Exception { \n\tfor ( $F3445 ( f , file ) ) { \n\t\tif $F3444 ( f ) { \n\t\t\tcollectWrapperClasses ( cl , pkg + f . getName ( ) + NUM00 , f ) ; \n\t\t\t} \n\t\telse { \n\t\t\taddWrapperClassToWrapperClassesList ( cl , pkg , f ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void clearImages $F72 { \n\t$F725 ( chunks ) $F725 ( markers ) redraw ( _BOOL ) ; \n\tshift_x = NUM00 ; \n\tshift_y = NUM00 ; \n\tzoom_level_pos = NUM00 ; \n\tzoom_level = NUM00 ; \n\t} \n"}, {"code": "public void test_fill$JIIJ $F72 { \n\tlong $F3234 = $F87103 ; \n\tArrays . fill ( d , NUM00 , d . length , Long . MAX_VALUE ) ; \n\tfor ( $F6268 ( i ) ) assertTrue ( NUM00 , ! ( d [ i ] == Long . MAX_VALUE ) ) ; \n\tfor ( $F1139 ( i , d ) ) assertTrue ( NUM00 , d [ i ] == Long . MAX_VALUE ) ; \n\ttry { \n\t\tArrays . fill ( d , NUM00 , NUM00 , Long . MIN_VALUE ) ; \n\t\tfail ( NUM00 ) ; \n\t\t} \n\t$F45786 try { \n\t\tArrays . fill ( d , - NUM00 , NUM00 , Long . MAX_VALUE ) ; \n\t\tfail ( NUM00 ) ; \n\t\t} \n\t$F47132 try { \n\t\tArrays . fill ( d , NUM00 , d . length + NUM00 , Long . MAX_VALUE ) ; \n\t\tfail ( NUM00 ) ; \n\t\t} \n\t$F47132 } \n"}, {"code": "public Object extFunction ( String ns , String funcName , Vector argVec , Object methodKey , ExpressionContext exprContext ) throws $F1872 { \n\tObject result = null ; \n\tif ( null != ns ) { \n\t\t$F308395 ( extNS , m_extensionFunctionNamespaces , ns ) if ( null != extNS ) { \n\t\t\ttry { \n\t\t\t\tresult = extNS . callFunction ( funcName , argVec , methodKey , exprContext ) ; \n\t\t\t\t} \n\t\t\tcatch ( $F1872 e ) { \n\t\t\t\tthrow e ; \n\t\t\t\t} \n\t\t\tcatch ( Exception e ) { \n\t\t\t\tthrow new $F1872 ( e ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tthrow new XPathProcessorException ( XSLMessages . createMessage ( XSLTErrorResources . ER_EXTENSION_FUNC_UNKNOWN , $F40356 ( ns , funcName ) ) ) ; \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "private static void addComponent ( final JPanel panel , final Component component , final String description , final String hint ) { \n\t$F40881 ( settingPanel ) settingPanel . setBorder ( STANDARD_EMPTY_BORDER ) ; \n\tsettingPanel . add ( new JLabel ( description ) , BorderLayout . CENTER ) ; \n\t$F40881 ( innerPanel ) $F30063 ( innerPanel , component , BorderLayout ) final JHintIcon hintPopup = new JHintIcon ( hint ) ; \n\t$F40867 ( hintPopup ) $F40903 ( innerPanel , hintPopup , BorderLayout ) $F40903 ( settingPanel , innerPanel , BorderLayout ) panel . add ( settingPanel ) ; \n\t} \n"}, {"code": "$F9749 ( namespace , attName , attValue , xmlWriter , registerPrefix ) "}, {"code": "public ReversedLinesFileReader ( final File file , final int blockSize , final String encoding ) throws IOException { \n\tthis ( file , blockSize , Charsets . toCharset ( encoding ) ) ; \n\t} \n"}, {"code": "private void onConnect $F72 { \n\tconnectionState = ConnectionState . Connected ; \n\tcheckForUpdatedFlight = _BOOL ; \n\tsubscribe ( String . format ( trafficAlertChannel , flightId ) ) ; \n\tsubscribe ( String . format ( situationalAwarenessChannel , flightId ) ) ; \n\t} \n"}, {"code": "public static double cdf ( double x , double sigma ) { \n\t$F14825 ( x ) final double xs = x / sigma ; \n\treturn NUM00 - Math . exp ( - NUM00 * xs * xs ) ; \n\t} \n"}, {"code": "public double gaussianShortfall ( double target ) { \n\tfinal CumulativeNormalDistribution gIntegral = new CumulativeNormalDistribution $F10644 ( mean , standardDeviation ) ; \n\treturn gIntegral . op ( target ) ; \n\t} \n"}, {"code": "$F1 public int read $F62353 ( offset , length ) throws IOException { \n\tint byteLength = length < < NUM00 ; \n\tif ( byteLength > fBuffer . length ) $F9454 ( byteLength , fBuffer ) $F65003 ( byteCount , fInputStream , fBuffer , byteLength ) $F227776 ( byteCount ) if $F69047 ( byteCount ) { \n\t\t$F7468 ( b , fInputStream ) if ( b == - NUM00 ) $F5795 ( expectedTwoBytes ) $F11740 ( fBuffer , byteCount , b ) } \n\tfinal int charCount = byteCount > > NUM00 ; \n\tif ( fIsBigEndian ) { \n\t\tprocessBE ( ch , offset , charCount ) ; \n\t\t} \n\telse { \n\t\tprocessLE ( ch , offset , charCount ) ; \n\t\t} \n\treturn charCount ; \n\t} \n"}, {"code": "public static void endWrapper ( Writer writer ) throws IOException { \n\t$F3410 ( writer ) $F3410 ( writer ) $F3410 ( writer ) $F3410 ( writer ) $F3410 ( writer ) } \n"}, {"code": "protected Document createConfigurationDocument ( AVList params ) { \n\tDocument doc = super . createConfigurationDocument ( params ) ; \n\tif ( doc == null || doc . getDocumentElement ( ) == null ) return doc ; \n\tDataConfigurationUtils . createWMSLayerConfigElements ( params , doc . getDocumentElement ( ) ) ; \n\treturn doc ; \n\t} \n"}, {"code": "public void registerCallback ( String challenge , ChallengeCallbackPlugin plugin , HttpMessage attack ) { \n\tcleanExpiredCallbacks ( ) ; \n\tregCallbacks . put ( challenge , new RegisteredCallback ( plugin , attack ) ) ; \n\t} \n"}, {"code": "public static double min ( Array array ) throws PageException { \n\tif ( array . getDimension ( ) > NUM00 ) $F36299 if $F10471 ( array ) $F1082 double rtn = _toDoubleValue ( array , NUM00 ) ; \n\t$F2199 ( len , array ) try { \n\t\tfor ( $F9993 ( i , len ) ) { \n\t\t\tdouble v = _toDoubleValue ( array , i ) ; \n\t\t\t$F46170 ( rtn , v ) } \n\t\t} \n\tcatch ( PageException e ) { \n\t\tthrow new ExpressionException $F16296 ( e ) ; \n\t\t} \n\treturn rtn ; \n\t} \n"}, {"code": "public static $F96 writeToArray ( NSObject root ) throws IOException { \n\t$F1538 ( bout ) write ( bout , root ) ; \n\t$F11316 ( bout ) } \n"}, {"code": "private static void loadLibraryResource ( String resourceSubdirectoryName , String libraryName , String tempSubdirectoryName , String ... dependentLibraryNames ) throws Throwable { \n\tfor ( String dependentLibraryName : dependentLibraryNames ) { \n\t\tlogger . log ( level , NUM00 + libraryName + NUM00 + dependentLibraryName ) ; \n\t\tString dependentResourceSubdirectoryName = resourceSubdirectoryName + NUM00 + osString ( ) + NUM00 + archString ( ) ; \n\t\tString dependentLibraryTempSubDirectoryName = libraryName + NUM00 + File . separator + osString ( ) + File . separator + archString ( ) + File . separator ; \n\t\tloadLibraryResource ( dependentResourceSubdirectoryName , dependentLibraryName , dependentLibraryTempSubDirectoryName ) ; \n\t\t} \n\tString libraryFileName = createLibraryFileName ( libraryName ) ; \n\tFile libraryTempFile = createTempFile ( tempSubdirectoryName , libraryFileName ) ; \n\tif $F1906 ( libraryTempFile ) { \n\t\tString libraryResourceName = resourceSubdirectoryName + NUM00 + libraryFileName ; \n\t\tlogger . log ( level , NUM00 + libraryResourceName ) ; \n\t\tlogger . log ( level , NUM00 + libraryTempFile ) ; \n\t\twriteResourceToFile ( libraryResourceName , libraryTempFile ) ; \n\t\t} \n\tlogger . log ( level , NUM00 + libraryTempFile ) ; \n\tSystem . load ( libraryTempFile . toString ( ) ) ; \n\tlogger . log ( level , NUM00 + libraryTempFile + NUM00 ) ; \n\t} \n"}, {"code": "private JobDefinition createJobDefinition $F72 throws Exception { \n\tnamespaceDaoTestHelper . createNamespaceEntity ( TEST_ACTIVITI_NAMESPACE_CD ) ; \n\tJobDefinitionCreateRequest request = jobDefinitionServiceTestHelper . createJobDefinitionCreateRequest ( ) ; \n\tJobDefinition jobDefinition = jobDefinitionService . createJobDefinition ( request , _BOOL ) ; \n\tvalidateJobDefinition ( jobDefinition ) ; \n\treturn jobDefinition ; \n\t} \n"}, {"code": "private WebSocketInputStream openInputStream ( Socket socket ) throws WebSocketException { \n\ttry { \n\t\treturn new WebSocketInputStream ( new BufferedInputStream ( socket . getInputStream ( ) ) ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\tthrow new WebSocketException ( WebSocketError . SOCKET_INPUT_STREAM_FAILURE , $F5351 ( e ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 protected void drawFirstPassShape ( Graphics2D g2 , int pass , int series , int item , Shape shape ) { \n\tif ( isShadowPass ( pass ) ) { \n\t\tif $F89491 ( getWallPaint ) { \n\t\t\t$F98595 ( g2 , getItemStroke , series , item ) g2 . setPaint ( getWallPaint ( ) ) ; \n\t\t\tg2 . translate ( getXOffset ( ) , getYOffset ( ) ) ; \n\t\t\tg2 . draw ( shape ) ; \n\t\t\tg2 . translate ( - getXOffset ( ) , - getYOffset ( ) ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tsuper . drawFirstPassShape ( g2 , pass , series , item , shape ) ; \n\t\t} \n\t} \n"}, {"code": "public static double asDouble ( String str , double def ) { \n\ttry $F2404 ( Double , str ) $F8835 ( def ) } \n"}, {"code": "public JMenu createHelpMenu $F72 { \n\tShowHelpAction helpAction = new ShowHelpAction $F580 ; \n\t$F132272 ( helpMenu ) helpMenu . add ( helpAction ) ; \n\treturn helpMenu ; \n\t} \n"}, {"code": "$F129060 ( views , direction , focusableMode , focusableCount , descendantFocusability , getDescendantFocusability , FOCUS_BLOCK_DESCENDANTS , i , getChildCount , child , getChildAt , VISIBLE , ii , infoForChild , mCurItem , FOCUS_AFTER_DESCENDANTS , isFocusable , FOCUSABLES_TOUCH_MODE , isInTouchMode , isFocusableInTouchMode , this ) "}, {"code": "public static void expandDigits ( String numberString , WordRelation wordRelation , Item tokenItem ) { \n\t$F1749 ( numberDigits , numberString ) for ( $F119 ( i , numberDigits ) ) { \n\t\t$F1280 ( digit , numberString , i ) if ( isDigit ( digit ) ) { \n\t\t\twordRelation . addWord ( tokenItem , digit2num [ numberString . charAt ( i ) - NUM00 ] ) ; \n\t\t\t} \n\t\telse $F56209 ( wordRelation , tokenItem ) } \n\t} \n"}, {"code": "public String longestMatch ( String input ) { \n\tTrieNode node = root ; \n\tString result = null ; \n\tfor ( $F186068 ( i , input ) ) { \n\t\t$F93781 ( node , input , i ) $F12576 ( node ) if $F93782 ( node ) result = input . substring ( i ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public void testMapSubClass $F72 throws Exception { \n\t$F44214 ( mapper ) MapSubClass result = mapper . readValue ( NUM00 , MapSubClass . class ) ; \n\t$F70108 ( assertEquals , result ) $F100553 ( value , result ) assertEquals ( BooleanWrapper . class , value . getClass ( ) ) ; \n\tBooleanWrapper bw = ( BooleanWrapper ) value ; \n\tassertEquals ( Boolean . TRUE , bw . b ) ; \n\t} \n"}, {"code": "$F1 public $F9107 ( pcl , m_pcs ) "}, {"code": "public void addOnTagClickListener ( TagsClickListener listener ) $F23232 ( clickListeners , listener ) "}, {"code": "public void removeAllTrackingIcons $F72 { \n\tif $F8841 ( trackingIcons ) $F13478 ( trackingIcons , repaint ) } \n"}, {"code": "private void readReference $F72 { \n\t$F8728 ( v_value ) $F8728 ( v_name ) $F8728 ( v_description ) DocumentEngine . readReferenceList ( v_value , v_name , v_description ) ; \n\t$F115 ( size , v_value ) $F58180 ( s_value , size ) $F58180 ( s_name , size ) $F58180 ( s_description , size ) for ( $F119 ( i , size ) ) { \n\t\t$F73934 ( s_value , i , v_value ) $F73934 ( s_name , i , v_name ) $F73934 ( s_description , i , v_description ) } \n\t} \n"}, {"code": "protected void assertRoundTrip ( TPS expected ) throws $F6427 { \n\t$F59037 ( serialized ) { \n\t\t$F1538 ( baos ) $F7054 ( oos , baos ) expected . writeExternal ( oos ) ; \n\t\t$F1206 ( oos ) $F3031 ( serialized , baos ) } \n\tfinal TPS actual ; \n\t{ \n\t\tactual = new TPS $F72 ; \n\t\t$F5950 ( bais , serialized ) $F67402 ( ois , bais ) actual . readExternal ( ois ) ; \n\t\t} \n\tassertEquals ( expected , actual ) ; \n\t} \n"}, {"code": "public static double calculateContrastRatio ( double lum1 , double lum2 ) { \n\tif ( $F21197 ( lum1 , lum2 ) ) $F825 return ( Math . max ( lum1 , lum2 ) + NUM00 ) / ( Math . min ( lum1 , lum2 ) + NUM00 ) ; \n\t} \n"}, {"code": "protected void reset $F72 throws XNIException $F16404 ( count , fComponents , i , c , this ) "}, {"code": "public synchronized void unregister ( String name ) { \n\tStreamScope $F1011 streamScope = byNameMap . remove ( name ) ; \n\t$F8249 ( streamScope ) $F64948 ( names , byStreamScopeMap , streamScope ) names . remove ( name ) ; \n\tif $F2979 ( names ) byStreamScopeMap . remove ( streamScope ) ; \n\t} \n"}, {"code": "private String expandAffix ( String pattern , StringBuffer buffer ) { \n\t$F4910 ( buffer ) for ( $F124686 ( i , pattern ) ) { \n\t\t$F52837 ( c , pattern , i ) if ( c == QUOTE ) { \n\t\t\t$F47698 ( c , pattern , i ) switch ( c ) { \n\t\t\t\tcase CURRENCY_SIGN : if ( i < pattern . length ( ) && pattern . charAt ( i ) == CURRENCY_SIGN ) { \n\t\t\t\t\t++ i ; \n\t\t\t\t\tbuffer . append ( symbols . getInternationalCurrencySymbol ( ) ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tbuffer . append ( symbols . getCurrencySymbol ( ) ) ; \n\t\t\t\t\t} \n\t\t\t\t$F598 case PATTERN_PERCENT : c = symbols . getPercent ( ) ; \n\t\t\t\t$F597 case PATTERN_PER_MILLE : c = symbols . getPerMill ( ) ; \n\t\t\t\t$F597 case PATTERN_MINUS : c = symbols . getMinusSign ( ) ; \n\t\t\t\t$F597 } \n\t\t\t} \n\t\tbuffer . append ( c ) ; \n\t\t} \n\t$F92 ( buffer ) } \n"}, {"code": "public static QueryFunctions extractFunctions $F4374 ( filterQueries ) { \n\tfinal QueryFunctions result = new QueryFunctions $F72 ; \n\t$F46660 ( isEmpty , filterQueries , result ) $F808 ( arguments ) for ( String unmodifiedAnalysis : filterQueries ) { \n\t\tString function = extractFunction ( unmodifiedAnalysis ) ; \n\t\t$F806 functions ; \n\t\tif $F105 ( function , FUNCTION_ARGUMENT_SPLITTER ) { \n\t\t\tfunctions = function . split ( FUNCTION_ARGUMENT_SPLITTER ) ; \n\t\t\t} \n\t\telse { \n\t\t\tfunctions = $F8640 ( function ) ; \n\t\t\t} \n\t\tfor ( String subFunction : functions ) { \n\t\t\tif $F105 ( subFunction , AGGREGATION_ARGUMENT_DELIMITER ) { \n\t\t\t\targuments = extractAggregationParameter ( subFunction ) ; \n\t\t\t\tsubFunction = subFunction . substring ( NUM00 , subFunction . indexOf ( AGGREGATION_ARGUMENT_DELIMITER ) ) ; \n\t\t\t\t} \n\t\t\tFunctionType type = FunctionType . valueOf ( subFunction . toUpperCase ( ) ) ; \n\t\t\taddFunction ( result , type , arguments ) ; \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "protected final void fireVetoableChange $F36827 ( propertyName , oldValue , newValue ) throws PropertyVetoException { \n\tVetoableChangeSupport aVetoSupport = this . vetoSupport ; \n\t$F2329 ( aVetoSupport ) aVetoSupport . fireVetoableChange ( propertyName , Integer . valueOf ( oldValue ) , Integer . valueOf ( newValue ) ) ; \n\t} \n"}, {"code": "protected boolean isValidClassname ( String classname ) { \n\treturn $F8908 ( classname ) ; \n\t} \n"}, {"code": "public static int number $F72 $F1652 ( _all ) "}, {"code": "public String generateInvertedString $F72 { \n\treturn String . format ( NUM00 , NUM00 & generateInverted ( ) ) ; \n\t} \n"}, {"code": "$F1113 public String extractPresentableUrl $F116884 ( path ) { \n\treturn $F79251 ( path , File ) ; \n\t} \n"}, {"code": "public String convertSWFToHTML ( URL in ) throws Exception { \n\t$F7963 ( conn , in ) conn . setAllowUserInteraction ( _BOOL ) ; \n\t$F7965 ( conn ) conn . setInstanceFollowRedirects ( _BOOL ) ; \n\t$F2410 ( conn ) return $F171458 ( convertSWFToHTML , conn ) ; \n\t} \n"}, {"code": "private void initProgram $F72 { \n\tglUseProgram ( this . program ) ; \n\tviewProjMatrixUniform = glGetUniformLocation ( this . program , NUM00 ) ; \n\tglUseProgram ( NUM00 ) ; \n\t} \n"}, {"code": "private boolean isNegative ( final String input ) { \n\trequireNonNull ( input ) ; \n\tfor ( final String negativeString : negativeStrings ) $F72434 ( input , negativeString , _BOOL ) return _BOOL ; \n\t} \n"}, {"code": "$F1 protected void sendDispositionHeader ( final OutputStream out ) throws IOException { \n\t$F1932 ( LOG ) super . sendDispositionHeader ( out ) ; \n\tfinal String filename = source . getFileName ( ) ; \n\tif ( filename != null ) { \n\t\tout . write ( FILE_NAME_BYTES ) ; \n\t\tout . write ( QUOTE_BYTES ) ; \n\t\tout . write ( EncodingUtil . getAsciiBytes ( filename ) ) ; \n\t\tout . write ( QUOTE_BYTES ) ; \n\t\t} \n\t} \n"}, {"code": "private $F20526 prepareResultsforDisplay ( Collection < ScoredResult > scoredResults ) { \n\t$F390500 output = new $F390500 $F716 ( scoredResults ) ; \n\tfor ( ScoredResult result : scoredResults ) { \n\t\t$F535 ( resultMap ) if ( result . track != null ) { \n\t\t\tprepareTrackForDisplay ( result . track , resultMap ) ; \n\t\t\t} \n\t\telse { \n\t\t\tprepareMarkerForDisplay ( result . waypoint , resultMap ) ; \n\t\t\t} \n\t\toutput . add ( resultMap ) ; \n\t\t} \n\treturn output ; \n\t} \n"}, {"code": "public long copy ( final InputStream from , final OutputStream to ) throws IOException { \n\tlong count = NUM00 ; \n\t$F96 tmp = mByteArrayPool . get ( mTempBufSize ) ; \n\ttry { \n\t\twhile ( _BOOL ) { \n\t\t\tint read = from . read ( tmp , NUM00 , mTempBufSize ) ; \n\t\t\t$F5881 ( read , count ) $F11584 ( to , tmp , read ) count += read ; \n\t\t\t} \n\t\t} \n\tfinally { \n\t\tmByteArrayPool . release ( tmp ) ; \n\t\t} \n\t} \n"}, {"code": "private static Element infoAsElement ( Document doc , LibraryInfo info ) { \n\t$F8382 ( libraryElement , doc ) libraryElement . setAttribute ( NUM00 , info . getVersion ( ) ) ; \n\tappendPathElements ( doc , NUM00 , libraryElement , info . getBootpath ( ) ) ; \n\tappendPathElements ( doc , NUM00 , libraryElement , info . getExtensionDirs ( ) ) ; \n\tappendPathElements ( doc , NUM00 , libraryElement , info . getEndorsedDirs ( ) ) ; \n\treturn libraryElement ; \n\t} \n"}, {"code": "public void addChoiceValue ( String value , String i18nKey ) throws $F16995 { \n\tMap choiceValues = as . getChoiceValuesMap ( ) ; \n\tchoiceValues . put ( value , i18nKey ) ; \n\tupdateChoiceValues ( choiceValues ) ; \n\t} \n"}, {"code": "private void notifyChange ( int previous , int current ) { \n\tif ( mOnValueChangeListener != null ) { \n\t\tmOnValueChangeListener . onValueChange ( this , previous , mValue ) ; \n\t\t} \n\t} \n"}, {"code": "public void loadLibrary ( String libName ) { \n\tloadLibrary0 ( libName , RVMClass . getClassLoaderFromStackFrame ( NUM00 ) , _BOOL ) ; \n\t} \n"}, {"code": "public void handleTblDataActionHrefRequest ( RequestInvocationEvent event ) { \n\tString idRepoName = hexToString ( ( String ) getDisplayFieldValue ( TBL_DATA_ACTION_HREF ) ) ; \n\tString curRealm = ( String ) getPageSessionAttribute ( AMAdminConstants . CURRENT_REALM ) ; \n\ttry { \n\t\tIDRepoModel model = ( IDRepoModel ) getModel ( ) ; \n\t\tsetPageSessionAttribute ( IDRepoOpViewBeanBase . IDREPO_NAME , idRepoName ) ; \n\t\tsetPageSessionAttribute ( IDRepoOpViewBeanBase . IDREPO_TYPE , model . getIDRepoType ( curRealm , idRepoName ) ) ; \n\t\tIDRepoEditViewBean vb = ( IDRepoEditViewBean ) getViewBean ( IDRepoEditViewBean . class ) ; \n\t\tunlockPageTrail ( ) ; \n\t\tpassPgSessionMap ( vb ) ; \n\t\t$F50333 ( vb , getRequestContext ) } \n\t$F123309 ( setInlineAlertMessage , CCAlert , e , forwardTo ) } \n"}, {"code": "public Charset charset $F72 { \n\treturn charset != null ? Charset . forName ( charset ) : null ; \n\t} \n"}, {"code": "public boolean initialize ( DDFModule poModuleIn , String pszTagIn , $F96 pachFieldArea ) { \n\tint iFDOffset = poModuleIn . _fieldControlLength ; \n\tpoModule = poModuleIn ; \n\tpszTag = pszTagIn ; \n\t_data_struct_code = DataStructCode . get ( $F254519 ( pachFieldArea ) ) ; \n\t_data_type_code = DataTypeCode . get ( $F254519 ( pachFieldArea ) ) ; \n\tif $F22503 ( Debug ) { \n\t\tDebug . output ( NUM00 + pszTagIn + NUM00 + _data_struct_code + NUM00 + _data_type_code + NUM00 + iFDOffset ) ; \n\t\t} \n\t$F96 $F154032 ( tempData , pachFieldArea , iFDOffset ) ; \n\tSystem . arraycopy ( pachFieldArea , iFDOffset , tempData , NUM00 , pachFieldArea . length - iFDOffset ) ; \n\tMutableInt nCharsConsumed = new MutableInt $F72 ; \n\t_fieldName = DDFUtils . fetchVariable ( tempData , tempData . length , DDF_UNIT_TERMINATOR , DDF_FIELD_TERMINATOR , nCharsConsumed ) ; \n\tif $F22503 ( Debug ) { \n\t\tDebug . output ( NUM00 + pszTagIn + NUM00 + _fieldName ) ; \n\t\t} \n\tiFDOffset += nCharsConsumed . value ; \n\t$F154032 ( tempData , pachFieldArea , iFDOffset ) ; \n\tSystem . arraycopy ( pachFieldArea , iFDOffset , tempData , NUM00 , pachFieldArea . length - iFDOffset ) ; \n\t_arrayDescr = DDFUtils . fetchVariable ( tempData , tempData . length , DDF_UNIT_TERMINATOR , DDF_FIELD_TERMINATOR , nCharsConsumed ) ; \n\tiFDOffset += nCharsConsumed . value ; \n\t$F154032 ( tempData , pachFieldArea , iFDOffset ) ; \n\tSystem . arraycopy ( pachFieldArea , iFDOffset , tempData , NUM00 , pachFieldArea . length - iFDOffset ) ; \n\t_formatControls = DDFUtils . fetchVariable ( tempData , tempData . length , DDF_UNIT_TERMINATOR , DDF_FIELD_TERMINATOR , nCharsConsumed ) ; \n\tif ( _data_struct_code != DataStructCode . ELEMENTARY ) { \n\t\t$F38676 ( buildSubfieldDefns , _arrayDescr , _BOOL ) $F38676 ( applyFormats , _formatControls , _BOOL ) } \n\treturn _BOOL ; \n\t} \n"}, {"code": "$F1 public void loadHeightMap ( Raster raster ) throws IOException { \n\t$F17565 ( stripHeight , Math , STRIP_ROWS , rasterLength ) int stripWidth = rasterWidth * samplesPerPixel ; \n\tint stripSize = stripWidth * stripHeight * bytesPerSample ; \n\tint numStrips = ( int ) $F98031 ( Math , rasterLength , stripHeight ) ; \n\tif ( stripSize > Integer . MAX_VALUE ) { \n\t\tthrow new IllegalArgumentException ( NUM00 + Integer . MAX_VALUE + NUM00 ) ; \n\t\t} \n\tif $F54923 ( minimum , maximum ) { \n\t\tcomputeMinMaxFromStrip ( dataType , numStrips , stripSize , stripWidth , stripHeight ) ; \n\t\t} \n\tloadFromStrip ( dataType , numStrips , stripSize , stripWidth , stripHeight , raster , _BOOL ) ; \n\t} \n"}, {"code": "public void addFooter $F101116 ( view ) $F41100 ( view , mFooters ) "}, {"code": "public static Pair < $F2027 , $F1986 > convert ( Set < Feature > features , Lexicon lexicon , boolean trainingMode ) { \n\tTIntDoubleHashMap fMap = new TIntDoubleHashMap $F716 ( features ) ; \n\tfor ( Feature feature : features ) { \n\t\tfinal int featureId = FeatureUtilities . getFeatureId ( lexicon , trainingMode , feature ) ; \n\t\t$F166042 ( featureId ) double value = feature . getValue ( ) + fMap . get ( featureId ) ; \n\t\tfMap . put ( featureId , value ) ; \n\t\t} \n\t$F2027 idsOriginal = fMap . keys ( ) ; \n\t$F22974 ( ids , idsOriginal ) $F5634 ( System , idsOriginal , ids ) Arrays . sort ( ids ) ; \n\t$F5311 ( vals , fMap ) int count = NUM00 ; \n\tfor ( int key : ids ) { \n\t\t$F134636 ( vals , count , fMap , key ) } \n\t$F83164 ( ids , vals ) } \n"}, {"code": "private static String creteXMLTotalCount $F83794 ( firstRow , numPFIS , numPJUR , rDefault , maxResults ) { \n\tString result = null ; \n\tDocument document = DocumentHelper . createDocument ( ) ; \n\tElement root = document . addElement ( PersonKeys . XML_PERSONAS_TEXT ) ; \n\troot . addAttribute ( PersonKeys . XML_INICIO_TEXT , Integer . toString ( firstRow ) ) ; \n\tif ( ( firstRow + rDefault ) > ( numPFIS + numPJUR ) ) { \n\t\troot . addAttribute ( PersonKeys . XML_FIN_TEXT , Integer . toString ( numPFIS + numPJUR ) ) ; \n\t\t} \n\telse { \n\t\troot . addAttribute ( PersonKeys . XML_FIN_TEXT , Integer . toString ( firstRow + rDefault ) ) ; \n\t\t} \n\troot . addAttribute ( PersonKeys . XML_TOTAL_TEXT , Integer . toString ( numPFIS + numPJUR ) ) ; \n\troot . addAttribute ( PersonKeys . XML_RANGO_TEXT , Integer . toString ( rDefault ) ) ; \n\troot . addAttribute ( PersonKeys . XML_RESULT_MAX_TEXT , Integer . toString ( maxResults ) ) ; \n\tresult = document . asXML ( ) ; \n\treturn result ; \n\t} \n"}, {"code": "public String toFeatureString ( FeatureVector fv ) { \n\tif ( numByteFeatures != fv . getNumberOfByteFeatures ( ) || numShortFeatures != fv . getNumberOfShortFeatures ( ) || numContinuousFeatures != fv . getNumberOfContinuousFeatures ( ) ) $F29525 ( fv ) $F83 ( buf ) for ( $F119 ( i , numByteFeatures ) ) { \n\t\t$F275070 ( buf ) buf . append ( getFeatureValueAsString ( i , fv . getByteFeature ( i ) ) ) ; \n\t\t} \n\tfor ( $F5883 ( i , numByteFeatures , numShortFeatures ) ) { \n\t\t$F275070 ( buf ) buf . append ( getFeatureValueAsString ( i , fv . getShortFeature ( i ) ) ) ; \n\t\t} \n\tfor ( int i = numByteFeatures + numShortFeatures ; \n\ti < numByteFeatures + numShortFeatures + numContinuousFeatures ; \n\ti ++ ) { \n\t\t$F275070 ( buf ) buf . append ( fv . getContinuousFeature ( i ) ) ; \n\t\t} \n\t$F92 ( buf ) } \n"}, {"code": "protected void sortPopulation $F72 { \n\tif ( Properties . SHUFFLE_GOALS ) Randomness . shuffle ( population ) ; \n\tif ( isMaximizationFunction ( ) ) { \n\t\tCollections . sort ( population , Collections . reverseOrder ( ) ) ; \n\t\t} \n\telse $F57765 ( Collections , population ) } \n"}, {"code": "public void clean $F72 { \n\tChronoFullRevision cfr = firstCFR ; \n\ttotalSize = size ; \n\twhile ( cfr != null ) { \n\t\t$F41045 ( totalSize , cfr ) $F224746 ( cfr ) } \n\tif ( totalSize < MAX_STORAGE_SIZE ) $F932 cfr = firstCFR ; \n\twhile ( cfr != null ) { \n\t\ttotalSize += cfr . clean ( revisionIndex , NUM00 ) ; \n\t\t$F224746 ( cfr ) } \n\tChronoStorageBlock block ; \n\twhile ( last != null && totalSize >= MAX_STORAGE_SIZE ) { \n\t\tblock = last . getIndexPrev ( ) ; \n\t\tif ( storage . remove ( last . getRevisionIndex ( ) ) == null ) $F11389 totalSize -= last . length ( ) ; \n\t\t$F90433 ( size , last ) if ( block != null ) { \n\t\t\tblock . setIndexNext ( null ) ; \n\t\t\t} \n\t\tlast . setIndexPrev ( null ) ; \n\t\tcfr = last . getChronoFullRevision ( ) ; \n\t\ttotalSize += cfr . size ( ) - cfr . clean ( revisionIndex , last . getRevisionIndex ( ) ) ; \n\t\tif ( last == first ) { \n\t\t\tfirst = null ; \n\t\t\t} \n\t\tlast = block ; \n\t\t} \n\t$F58463 ( System ) } \n"}, {"code": "public static Number plus ( Character left , Character right ) $F209729 ( plus , Integer , left , right ) "}, {"code": "boolean containRelayState ( String relayState ) $F69736 ( relayStateMap , relayState ) "}, {"code": "public void localSearchStarted $F72 { \n\t$F3224 ( startTime , System ) endTime = startTime + Properties . LOCAL_SEARCH_BUDGET * NUM00 ; \n\ttests = NUM00 ; \n\tsuites = NUM00 ; \n\tfitnessEvaluations = NUM00 ; \n\texecutedStart = MaxStatementsStoppingCondition . getNumExecutedStatements ( ) ; \n\t} \n"}, {"code": "$F30512 ( in , readCount , inBufferPos , count , filledBufferSum , n , currentBuffer , needNewBuffer ) "}, {"code": "public static double normalizeRadians ( double r ) { \n\tif ( r < NUM00 && r >= - TWO_PI ) return r + TWO_PI ; \n\tif ( r >= TWO_PI && r < FOUR_PI ) return r - TWO_PI ; \n\tif ( r >= NUM00 && r < TWO_PI ) return r ; \n\tr -= TWO_PI * Math . floor ( r * TWO_PI_INVERSE ) ; \n\tif ( r < NUM00 ) r += TWO_PI ; \n\treturn r ; \n\t} \n"}, {"code": "public static TetradMatrix convertCovToCorr ( TetradMatrix m ) { \n\tfor ( int i = NUM00 ; \n\ti < m . rows ( ) ; \n\ti ++ ) { \n\t\tfor ( int j = NUM00 ; \n\t\tj < m . columns ( ) ; \n\t\tj ++ ) { \n\t\t\tif ( Double . isNaN ( m . get ( i , j ) ) ) $F825 } \n\t\t} \n\treturn correlation ( m ) ; \n\t} \n"}, {"code": "private $F96 ungzip $F97 ( body ) { \n\t$F5950 ( bytein , body ) try ( GZIPInputStream gzin = new GZIPInputStream ( bytein ) ; \n\tByteArrayOutputStream byteout = $F1535 ) { \n\t\tint res = NUM00 ; \n\t\tbyte $F46499 = $F10314 ; \n\t\twhile ( res >= NUM00 ) { \n\t\t\t$F81136 ( res , gzin , buf ) $F170111 ( res , byteout , buf ) } \n\t\tbyte uncompressed [ ] = byteout . toByteArray ( ) ; \n\t\treturn uncompressed ; \n\t\t} \n\t$F29052 $F1274 } \n"}, {"code": "private boolean selectID ( int nodeID , boolean show ) { \n\t$F397 ( m_root , _BOOL ) log . config ( NUM00 + nodeID + NUM00 + show + NUM00 + m_root ) ; \n\tMTreeNode node = m_root . findNode ( nodeID ) ; \n\tif ( node != null ) { \n\t\tTreePath treePath = new TreePath $F183378 ( node ) ; \n\t\tlog . config ( $F28567 ( node , treePath ) ) ; \n\t\ttree . setSelectionPath ( treePath ) ; \n\t\tif ( show ) { \n\t\t\ttree . makeVisible ( treePath ) ; \n\t\t\ttree . scrollPathToVisible ( treePath ) ; \n\t\t\t} \n\t\treturn _BOOL ; \n\t\t} \n\t$F556 ( log , nodeID ) return _BOOL ; \n\t} \n"}, {"code": "$F1 public void loadRGBA ( Raster raster ) throws IOException { \n\t$F826 ( bandStorageType ) $F6853 ( samplesPerPixel ) $F2727 ( iStream ) iStream = new FileImageInputStream $F15780 ( dataFilePath ) ; \n\tiStream . seek ( imageStart ) ; \n\t$F17565 ( stripHeight , Math , STRIP_ROWS , rasterLength ) int stripWidth = rasterWidth * samplesPerPixel ; \n\tint numStrips = ( int ) $F98031 ( Math , rasterLength , stripHeight ) ; \n\tif $F3057 ( bandStorageType ) { \n\t\tint stripSize = stripWidth * stripHeight * bytesPerSample ; \n\t\tif ( stripSize > Integer . MAX_VALUE ) { \n\t\t\tthrow new IllegalArgumentException ( NUM00 + Integer . MAX_VALUE + NUM00 ) ; \n\t\t\t} \n\t\t$F2175 ( bbArray , stripSize ) ByteBuffer bbuf = ByteBuffer . allocate ( NUM00 * rasterWidth * stripHeight ) ; \n\t\tiStream . seek ( imageStart ) ; \n\t\tint r = NUM00 ; \n\t\tfor ( $F1316 ( i , numStrips ) ) { \n\t\t\tint h = Math . min ( rasterLength - stripHeight * i , stripHeight ) ; \n\t\t\tint len = h * stripWidth ; \n\t\t\tlen = iStream . read ( bbArray , NUM00 , len ) ; \n\t\t\tfor ( $F1316 ( j , h ) ) { \n\t\t\t\tfor ( int k = NUM00 ; \n\t\t\t\tk < stripWidth ; \n\t\t\t\tk += samplesPerPixel ) { \n\t\t\t\t\tfor ( $F1316 ( l , samplesPerPixel ) ) { \n\t\t\t\t\t\tbbuf . put ( bbArray [ k + l ] ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\tif ( samplesPerPixel == NUM00 ) { \n\t\t\t\t\t\t$F31279 ( bbuf ) } \n\t\t\t\t\t} \n\t\t\t\tr ++ ; \n\t\t\t\t} \n\t\t\t$F23501 ( bbuf ) raster . set ( r , h , bbArray ) ; \n\t\t\t} \n\t\t} \n\telse if $F3057 ( bandStorageType ) { \n\t\tint stripSize = rasterWidth * stripHeight ; \n\t\tif ( stripSize > Integer . MAX_VALUE ) { \n\t\t\tthrow new IllegalArgumentException ( NUM00 + Integer . MAX_VALUE + NUM00 ) ; \n\t\t\t} \n\t\t$F3223 ( raster ) $F96 bArray = new byte [ NUM00 * rasterWidth * stripHeight ] ; \n\t\t$F2175 ( bbArray , stripSize ) iStream . seek ( imageStart ) ; \n\t\tfor ( $F1316 ( k , samplesPerPixel ) ) { \n\t\t\tint r = NUM00 ; \n\t\t\tfor ( $F1316 ( i , numStrips ) ) { \n\t\t\t\tint h = Math . min ( rasterLength - stripHeight * i , stripHeight ) ; \n\t\t\t\tint len = h * rasterWidth ; \n\t\t\t\tlen = iStream . read ( bbArray , NUM00 , len ) ; \n\t\t\t\tfor ( $F1316 ( j , h ) ) { \n\t\t\t\t\traster . get ( r , bArray ) ; \n\t\t\t\t\tfor ( $F1316 ( c , rasterWidth ) ) { \n\t\t\t\t\t\tbArray [ c * NUM00 + k ] = bbArray [ c ] ; \n\t\t\t\t\t\t} \n\t\t\t\t\traster . set ( r , NUM00 , bArray ) ; \n\t\t\t\t\tr ++ ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tif ( minimum == null ) { \n\t\tminimum = new double $F104039 ; \n\t\t} \n\tif ( maximum == null ) { \n\t\tmaximum = new double $F104039 ; \n\t\t} \n\t} \n"}, {"code": "protected final boolean isListState $F72 { \n\treturn stateTextTypes . charAt ( state ) == NUM00 ; \n\t} \n"}, {"code": "private static Class < ? extends Activity > guessErrorActivityClass ( Context context ) { \n\tClass < ? extends Activity > resolvedActivityClass ; \n\tresolvedActivityClass = CustomActivityOnCrash . getErrorActivityClassWithIntentFilter ( context ) ; \n\tif ( resolvedActivityClass == null ) { \n\t\tresolvedActivityClass = DefaultErrorActivity . class ; \n\t\t} \n\treturn resolvedActivityClass ; \n\t} \n"}, {"code": "public void loadGlyphs ( String chars ) throws NoGlyphException { \n\t$F7782 ( chs , chars ) for ( $F1139 ( i , chs ) ) { \n\t\tgetGlyph ( chs [ i ] , null ) ; \n\t\t} \n\t} \n"}, {"code": "private void initQuestAndAddToWorld ( final IQuest quest ) { \n\t$F170638 ( logger , quest ) quest . addToWorld ( ) ; \n\tquests . add ( quest ) ; \n\t} \n"}, {"code": "public static MoveCommand [ ] values ( int f , GameOptions opts , boolean forwardIni ) { \n\tboolean manualShutdown = _BOOL , selfDestruct = _BOOL ; \n\tif ( opts != null ) { \n\t\tmanualShutdown = opts . booleanOption ( NUM00 ) ; \n\t\tselfDestruct = opts . booleanOption ( NUM00 ) ; \n\t\t} \n\tArrayList < MoveCommand > flaggedCmds = new ArrayList < MoveCommand > $F72 ; \n\tfor ( $F40424 ( cmd , MoveCommand ) ) { \n\t\tif ( ( cmd == MOVE_SHUTDOWN || cmd == MOVE_STARTUP ) && ! manualShutdown ) $F1448 if ( cmd == MOVE_SELF_DESTRUCT && ! selfDestruct ) $F1448 if ( cmd == MOVE_FORWARD_INI && ! forwardIni ) $F1448 if ( ( cmd . flag & f ) == f ) $F207 ( flaggedCmds , cmd ) } \n\treturn flaggedCmds . toArray ( new MoveCommand $F380 ) ; \n\t} \n"}, {"code": "public boolean isLDAP $F72 { \n\tString host = getLDAPHost ( ) ; \n\t$F72105 ( host , _BOOL ) String domain = getLDAPDomain ( ) ; \n\t$F179974 ( domain ) } \n"}, {"code": "public void shedCache $F72 { \n\tConnection [ ] conn ; \n\tsynchronized ( freeList ) { \n\t\tconn = freeList . toArray ( new Connection $F2313 ( freeList ) ) ; \n\t\t$F725 ( freeList ) } \n\tfor ( $F45516 ( i , conn ) ) { \n\t\tConnection c = conn [ i ] ; \n\t\tconn [ i ] = null ; \n\t\ttry $F881 ( c ) $F42485 } \n\t} \n"}, {"code": "public static $F96 hash ( InputStream in ) throws IOException { \n\tif ( HASH_DIGEST == null ) { \n\t\tthrow new EvernoteUtilException ( EDAM_HASH_ALGORITHM + NUM00 , new NoSuchAlgorithmException ( EDAM_HASH_ALGORITHM ) ) ; \n\t\t} \n\t$F12496 ( buf ) int n ; \n\twhile $F18067 ( n , in , buf ) { \n\t\t$F118814 ( HASH_DIGEST , buf , n ) } \n\t$F70686 ( HASH_DIGEST ) } \n"}, {"code": "public $F96 readRawBytes ( final int size ) throws IOException { \n\tif ( size < NUM00 ) { \n\t\tthrow InvalidProtocolBufferNanoException . negativeSize ( ) ; \n\t\t} \n\tif ( bufferPos + size > currentLimit ) { \n\t\tskipRawBytes ( currentLimit - bufferPos ) ; \n\t\tthrow InvalidProtocolBufferNanoException . truncatedMessage ( ) ; \n\t\t} \n\tif ( size <= bufferSize - bufferPos ) { \n\t\t$F4727 ( bytes , size ) $F21535 ( System , buffer , bufferPos , bytes , size ) bufferPos += size ; \n\t\treturn bytes ; \n\t\t} \n\telse { \n\t\tthrow InvalidProtocolBufferNanoException . truncatedMessage ( ) ; \n\t\t} \n\t} \n"}, {"code": "public abstract TreeNode createNode $F6803 ( x , y ) ; \n"}, {"code": "$F1431 public static < T extends FeatureStructure > $F5675 toList ( FSArray array ) { \n\tif ( array == null ) { \n\t\treturn new $F5676 $F72 ; \n\t\t} \n\telse { \n\t\treturn ( $F5675 ) Arrays . asList ( array . toArray ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "private void resetNotes2 $F72 { \n\tif ( errorInStatus2 ) { \n\t\tif ( editMode ) $F59925 ( statusText1 , editStatus2 ) else $F59925 ( statusText2 , stdStatus2 ) errorInStatus2 = _BOOL ; \n\t\t} \n\t} \n"}, {"code": "protected static int toDigit ( final char ch , final int index ) throws IllegalArgumentException { \n\tfinal int digit = Character . digit ( ch , NUM00 ) ; \n\tif ( digit == - NUM00 ) $F20855 ( ch , index ) return digit ; \n\t} \n"}, {"code": "public static ServerSideSortRequestControl newControl ( final boolean isCritical , final Collection < SortKey > keys ) { \n\tReject . ifNull ( keys ) ; \n\tReject . ifFalse ( $F27376 ( keys ) ) ; \n\treturn new ServerSideSortRequestControl ( isCritical , Collections . unmodifiableList ( new ArrayList < SortKey > ( keys ) ) ) ; \n\t} \n"}, {"code": "$F45923 static < E extends Comparable $F11685 > AutoSortedCollection $F11685 createAutoSortedCollection ( Supplier < List < SortedListElement $F11685 > > listSup , Collection $F22448 values ) { \n\tList list = listSup . get ( ) ; \n\tif $F5973 ( list ) $F4639 AutoSortedCollection $F11685 sortedCollection = new AutoListSortedCollection $F200 ( list , null ) ; \n\tsortedCollection . addAll ( values ) ; \n\treturn sortedCollection ; \n\t} \n"}, {"code": "private void intStream $F72 { \n\t$F2027 ints = new int [ ] { \n\t\tNUM00 , NUM00 , NUM00 , NUM00 , NUM00 } \n\t; \n\tIntStream intStream = IntStream . of ( ints ) ; \n\t$F22620 ( intStream ) IntStream intStream2 = IntStream . of ( NUM00 , NUM00 , NUM00 , NUM00 , NUM00 ) ; \n\t$F22620 ( intStream2 ) } \n"}, {"code": "$F1431 public boolean isCustomized $F72 { \n\tif ( m_customizationLevel == null ) { \n\t\tgetElementID ( ) ; \n\t\tm_customizationLevel = new Integer ( s_parameters . CUSTOMNONE ) ; \n\t\tif ( m_parent . isCustomPrefix ( m_name ) ) { \n\t\t\tm_customizationLevel = new Integer ( s_parameters . CUSTOMPREFIXED ) ; \n\t\t\t} \n\t\telse { \n\t\t\tif ( m_parent . isObjectExists ( NUM00 , m_parent . getTables ( ) ) && m_parent . isObjectExists ( NUM00 , m_parent . getTables ( ) ) ) { \n\t\t\t\tString sql = s_dbEngine . sqlAD_getTableColumnEntityType ( m_parent . getVendor ( ) , m_parent . getCatalog ( ) , m_parent . getSchema ( ) , m_table , m_name ) ; \n\t\t\t\tStatement stmt = m_parent . setStatement ( ) ; \n\t\t\t\tResultSet rs = m_parent . executeQuery ( stmt , sql ) ; \n\t\t\t\tif ( m_parent . getResultSetNext ( rs ) ) { \n\t\t\t\t\tString s = m_parent . getResultSetString ( rs , NUM00 ) ; \n\t\t\t\t\tif ( m_parent . isCustomEntityType ( s ) ) m_customizationLevel = new Integer ( s_parameters . CUSTOMMARKED ) ; \n\t\t\t\t\t} \n\t\t\t\tm_parent . releaseResultSet ( rs ) ; \n\t\t\t\tm_parent . releaseStatement ( stmt ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tif ( m_customizationLevel . intValue ( ) > s_parameters . CUSTOMNONE ) return _BOOL ; \n\telse return _BOOL ; \n\t} \n"}, {"code": "private void reloadQueue $F72 { \n\tString q = null ; \n\tint id = mCardId ; \n\tif $F3578 ( mPreferences ) { \n\t\tid = mPreferences . getInt ( NUM00 , ~ mCardId ) ; \n\t\t} \n\tif ( id == mCardId ) { \n\t\tq = $F299346 ( mPreferences ) ; \n\t\t} \n\tint qlen = q != null ? q . length ( ) : NUM00 ; \n\tif ( qlen > NUM00 ) { \n\t\tint plen = NUM00 ; \n\t\tint n = NUM00 ; \n\t\tint shift = NUM00 ; \n\t\tfor ( $F119 ( i , qlen ) ) { \n\t\t\t$F1090 ( c , q , i ) if ( c == NUM00 ) { \n\t\t\t\tensurePlayListCapacity ( plen + NUM00 ) ; \n\t\t\t\tmPlayList [ plen ] = n ; \n\t\t\t\tplen ++ ; \n\t\t\t\tn = NUM00 ; \n\t\t\t\tshift = NUM00 ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tif $F19295 ( c ) { \n\t\t\t\t\tn += c - NUM00 < < shift ; \n\t\t\t\t\t} \n\t\t\t\telse if $F19295 ( c ) { \n\t\t\t\t\tn += NUM00 + c - NUM00 < < shift ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tplen = NUM00 ; \n\t\t\t\t\t$F597 } \n\t\t\t\tshift += NUM00 ; \n\t\t\t\t} \n\t\t\t} \n\t\tmPlayListLen = plen ; \n\t\tfinal int pos = mPreferences . getInt ( NUM00 , NUM00 ) ; \n\t\tif ( pos < NUM00 || pos >= mPlayListLen ) { \n\t\t\tmPlayListLen = NUM00 ; \n\t\t\t$F665 } \n\t\tmPlayPos = pos ; \n\t\tupdateCursor ( mPlayList [ mPlayPos ] ) ; \n\t\tif ( mCursor == null ) { \n\t\t\t$F9470 ( SystemClock ) updateCursor ( mPlayList [ mPlayPos ] ) ; \n\t\t\t} \n\t\tsynchronized ( this ) { \n\t\t\tcloseCursor ( ) ; \n\t\t\tmOpenFailedCounter = NUM00 ; \n\t\t\topenCurrentAndNext ( ) ; \n\t\t\t} \n\t\tif ( mPlayer == null || $F225104 ( mPlayer ) ) { \n\t\t\tmPlayListLen = NUM00 ; \n\t\t\t$F665 } \n\t\tfinal long seekpos = mPreferences . getLong ( NUM00 , NUM00 ) ; \n\t\tseek ( seekpos >= NUM00 && seekpos < duration ( ) ? seekpos : NUM00 ) ; \n\t\tif ( D ) { \n\t\t\tLOG . info ( NUM00 + position ( ) + NUM00 + duration ( ) + NUM00 + seekpos + NUM00 ) ; \n\t\t\t} \n\t\tint repmode = mPreferences . getInt ( NUM00 , REPEAT_NONE ) ; \n\t\tif ( repmode != REPEAT_ALL && repmode != REPEAT_CURRENT ) { \n\t\t\trepmode = REPEAT_NONE ; \n\t\t\t} \n\t\tmRepeatMode = repmode ; \n\t\tint shufmode = mPreferences . getInt ( NUM00 , SHUFFLE_NONE ) ; \n\t\tif ( shufmode != SHUFFLE_AUTO && shufmode != SHUFFLE_NORMAL ) { \n\t\t\tshufmode = SHUFFLE_NONE ; \n\t\t\t} \n\t\tif ( shufmode != SHUFFLE_NONE ) { \n\t\t\tq = $F299346 ( mPreferences ) ; \n\t\t\tqlen = q != null ? q . length ( ) : NUM00 ; \n\t\t\tif ( qlen > NUM00 ) { \n\t\t\t\tn = NUM00 ; \n\t\t\t\tshift = NUM00 ; \n\t\t\t\t$F725 ( mHistory ) for ( $F119 ( i , qlen ) ) { \n\t\t\t\t\t$F1090 ( c , q , i ) if ( c == NUM00 ) { \n\t\t\t\t\t\tif ( n >= mPlayListLen ) { \n\t\t\t\t\t\t\t$F725 ( mHistory ) $F597 } \n\t\t\t\t\t\tmHistory . add ( n ) ; \n\t\t\t\t\t\tn = NUM00 ; \n\t\t\t\t\t\tshift = NUM00 ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse { \n\t\t\t\t\t\tif $F19295 ( c ) { \n\t\t\t\t\t\t\tn += c - NUM00 < < shift ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\telse if $F19295 ( c ) { \n\t\t\t\t\t\t\tn += NUM00 + c - NUM00 < < shift ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\telse { \n\t\t\t\t\t\t\t$F725 ( mHistory ) $F597 } \n\t\t\t\t\t\tshift += NUM00 ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tif ( shufmode == SHUFFLE_AUTO ) { \n\t\t\tif $F931 ( makeAutoShuffleList ) { \n\t\t\t\tshufmode = SHUFFLE_NONE ; \n\t\t\t\t} \n\t\t\t} \n\t\tmShuffleMode = shufmode ; \n\t\t} \n\t} \n"}, {"code": "public final void scheduledForFlush $F72 $F24242 ( scheduledForFlush , _BOOL ) "}, {"code": "public ImageInfo inspectImage ( String image ) throws IOException { \n\treturn inspectImage ( InspectImageParams . create ( image ) ) ; \n\t} \n"}, {"code": "$F1 public double prevCumulativeQuantity ( final Long woActivityId , Long mbHeaderId ) { \n\tif ( mbHeaderId == null ) mbHeaderId = - NUM00 ; \n\tfinal $F131 params = new Object [ ] { \n\t\tmbHeaderId , mbHeaderId , WorksConstants . CANCELLED_STATUS , woActivityId } \n\t; \n\tfinal Double pQuant = ( Double ) genericService . findByNamedQuery ( NUM00 , params ) ; \n\tif ( pQuant == null ) $F1082 else $F12165 ( pQuant ) } \n"}, {"code": "void receive ( int length , DataInputStream in ) throws IOException { \n\tsynchronized ( lock ) { \n\t\tif ( ( pos > NUM00 ) && ( ( buffer . length - present ) < length ) ) { \n\t\t\tSystem . arraycopy ( buffer , pos , buffer , NUM00 , present - pos ) ; \n\t\t\tpresent -= pos ; \n\t\t\tpos = NUM00 ; \n\t\t\t} \n\t\tif ( ( buffer . length - present ) < length ) $F3575 in . readFully ( buffer , present , length ) ; \n\t\tpresent += length ; \n\t\trequested -= length ; \n\t\t$F165 ( lock ) } \n\t} \n"}, {"code": "public JDABuilder removeListener ( Object listener ) $F120129 ( listeners , listener , this ) "}, {"code": "$F221804 ( d , imageView , getImageView , viewWidth , getImageViewWidth , viewHeight , getImageViewHeight , drawableWidth , drawableHeight , mBaseMatrix , widthScale , heightScale , mScaleType , ScaleType , scale , Math , mTempSrc , mTempDst , FIT_CENTER , ScaleToFit , FIT_START , FIT_END , FIT_XY , resetMatrix ) "}, {"code": "private static $F3803 readFile ( File file ) throws IOException { \n\t$F35542 ( fr , file ) $F20481 ( br , fr ) $F10144 ( lines ) String line ; \n\twhile $F443 ( line , br ) lines . add ( line ) ; \n\t$F59 ( fr ) $F59 ( br ) return lines ; \n\t} \n"}, {"code": "FlexibleNode readExternalNode ( HashMap < String , Taxon > translationList ) throws ImportException , IOException { \n\tFlexibleNode node = new FlexibleNode $F72 ; \n\tString label = readToken ( NUM00 ) ; \n\tTaxon taxon ; \n\tif $F3817 ( translationList ) { \n\t\ttaxon = translationList . get ( label ) ; \n\t\tif ( taxon == null ) { \n\t\t\tthrow new UnknownTaxonException ( NUM00 + label + NUM00 ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\ttaxon = new Taxon ( label ) ; \n\t\t} \n\tif $F89491 ( getLastMetaComment ) { \n\t\tparseMigrationString ( getLastMetaComment ( ) , node ) ; \n\t\tclearLastMetaComment ( ) ; \n\t\t} \n\tnode . setTaxon ( taxon ) ; \n\tint pop = Integer . parseInt ( $F43978 ( label ) ) ; \n\tnode . setAttribute ( POP , ( pop - NUM00 ) ) ; \n\treturn node ; \n\t} \n"}, {"code": "static void plugTogetherPair ( InputStream in , OutputStream out , InputStream in1 , OutputStream out1 ) { \n\tThread inThread = null ; \n\tThread outThread = null ; \n\tint nExecs = getNumExec ( ) ; \n\tinThread = AccessController . doPrivileged ( new NewThreadAction ( new PipeWriter ( in , out , NUM00 , nExecs ) , NUM00 , _BOOL ) ) ; \n\toutThread = AccessController . doPrivileged ( new NewThreadAction ( new PipeWriter ( in1 , out1 , NUM00 , nExecs ) , NUM00 , _BOOL ) ) ; \n\t$F2346 ( inThread ) $F2346 ( outThread ) } \n"}, {"code": "$F4170 public static StorableFence and ( $F4170 StorableFence ... fences ) { \n\treturn StorableFence . and ( Arrays . asList ( fences ) ) ; \n\t} \n"}, {"code": "public MXFUID $F97 ( uid ) { \n\t$F17879 ( this , Arrays , uid ) } \n"}, {"code": "private int shrinkFlexItems ( FlexLine flexLine , @ FlexDirection int flexDirection , int maxMainSize , int paddingAlongMainAxis , int startIndex ) { \n\tint childIndex = startIndex ; \n\tint sizeBeforeShrink = flexLine . mMainSize ; \n\tif ( flexLine . mTotalFlexShrink <= NUM00 || maxMainSize > flexLine . mMainSize ) { \n\t\tchildIndex += flexLine . mItemCount ; \n\t\treturn childIndex ; \n\t\t} \n\tboolean needsReshrink = _BOOL ; \n\tfloat unitShrink = ( flexLine . mMainSize - maxMainSize ) / flexLine . mTotalFlexShrink ; \n\tfloat accumulatedRoundError = NUM00 ; \n\tflexLine . mMainSize = paddingAlongMainAxis + flexLine . mDividerLengthInMainSize ; \n\tfor ( int i = NUM00 ; \n\ti < flexLine . mItemCount ; \n\ti ++ ) { \n\t\tView child = getReorderedChildAt ( childIndex ) ; \n\t\tif ( child == null ) $F1448 else if ( child . getVisibility ( ) == View . GONE ) $F118993 ( childIndex ) $F310049 ( lp , child ) if ( isMainAxisDirectionHorizontal ( flexDirection ) ) { \n\t\t\tif ( ! mChildrenFrozen [ childIndex ] ) { \n\t\t\t\tfloat rawCalculatedWidth = child . getMeasuredWidth ( ) - unitShrink * lp . flexShrink ; \n\t\t\t\tif ( i == flexLine . mItemCount - NUM00 ) { \n\t\t\t\t\trawCalculatedWidth += accumulatedRoundError ; \n\t\t\t\t\taccumulatedRoundError = NUM00 ; \n\t\t\t\t\t} \n\t\t\t\tint newWidth = Math . round ( rawCalculatedWidth ) ; \n\t\t\t\tif ( newWidth < lp . minWidth ) { \n\t\t\t\t\tneedsReshrink = _BOOL ; \n\t\t\t\t\tnewWidth = lp . minWidth ; \n\t\t\t\t\tmChildrenFrozen [ childIndex ] = _BOOL ; \n\t\t\t\t\tflexLine . mTotalFlexShrink -= lp . flexShrink ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\taccumulatedRoundError += ( rawCalculatedWidth - newWidth ) ; \n\t\t\t\t\tif ( accumulatedRoundError > NUM00 ) { \n\t\t\t\t\t\tnewWidth += NUM00 ; \n\t\t\t\t\t\taccumulatedRoundError -= NUM00 ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse if ( accumulatedRoundError < - NUM00 ) { \n\t\t\t\t\t\tnewWidth -= NUM00 ; \n\t\t\t\t\t\taccumulatedRoundError += NUM00 ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\tchild . measure ( $F19050 ( MeasureSpec , newWidth ) , MeasureSpec . makeMeasureSpec ( child . getMeasuredHeight ( ) , MeasureSpec . EXACTLY ) ) ; \n\t\t\t\t} \n\t\t\tflexLine . mMainSize += $F239295 ( child , lp ) ; \n\t\t\t} \n\t\telse { \n\t\t\tif ( ! mChildrenFrozen [ childIndex ] ) { \n\t\t\t\tfloat rawCalculatedHeight = child . getMeasuredHeight ( ) - unitShrink * lp . flexShrink ; \n\t\t\t\tif ( i == flexLine . mItemCount - NUM00 ) { \n\t\t\t\t\trawCalculatedHeight += accumulatedRoundError ; \n\t\t\t\t\taccumulatedRoundError = NUM00 ; \n\t\t\t\t\t} \n\t\t\t\tint newHeight = Math . round ( rawCalculatedHeight ) ; \n\t\t\t\tif ( newHeight < lp . minHeight ) { \n\t\t\t\t\tneedsReshrink = _BOOL ; \n\t\t\t\t\tnewHeight = lp . minHeight ; \n\t\t\t\t\tmChildrenFrozen [ childIndex ] = _BOOL ; \n\t\t\t\t\tflexLine . mTotalFlexShrink -= lp . flexShrink ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\taccumulatedRoundError += ( rawCalculatedHeight - newHeight ) ; \n\t\t\t\t\tif ( accumulatedRoundError > NUM00 ) { \n\t\t\t\t\t\tnewHeight += NUM00 ; \n\t\t\t\t\t\taccumulatedRoundError -= NUM00 ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse if ( accumulatedRoundError < - NUM00 ) { \n\t\t\t\t\t\tnewHeight -= NUM00 ; \n\t\t\t\t\t\taccumulatedRoundError += NUM00 ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\tchild . measure ( MeasureSpec . makeMeasureSpec ( child . getMeasuredWidth ( ) , MeasureSpec . EXACTLY ) , $F19050 ( MeasureSpec , newHeight ) ) ; \n\t\t\t\t} \n\t\t\tflexLine . mMainSize += child . getMeasuredHeight ( ) + lp . topMargin + lp . bottomMargin ; \n\t\t\t} \n\t\tchildIndex ++ ; \n\t\t} \n\tif ( needsReshrink && sizeBeforeShrink != flexLine . mMainSize ) { \n\t\tshrinkFlexItems ( flexLine , flexDirection , maxMainSize , paddingAlongMainAxis , startIndex ) ; \n\t\t} \n\treturn childIndex ; \n\t} \n"}, {"code": "public static DataModelList serializableInstance $F72 { \n\treturn new DataModelList $F72 ; \n\t} \n"}, {"code": "$F1 public MBHeader findLastMBPageNoForLineItem ( final WorkOrderActivity workOrderActivity , final Long mbHeaderId ) { \n\t$F973 ( logger ) String query = NUM00 ; \n\t$F131 params ; \n\tfinal $F6689 paramList = new $F3523 $F72 ; \n\tquery = query + NUM00 + NUM00 + NUM00 + NUM00 ; \n\t$F42096 ( paramList , workOrderActivity ) paramList . add ( mbHeaderId ) ; \n\tparamList . add ( WorksConstants . APPROVED ) ; \n\tparamList . add ( mbHeaderId ) ; \n\tparams = $F103414 ( paramList ) ; \n\t$F5443 ( params , paramList ) final List < MBHeader > mbHeaderList = genericService . findAllBy ( query , params ) ; \n\tMBHeader result = null ; \n\tif $F1032 ( mbHeaderList ) $F36986 ( result , mbHeaderList ) return result ; \n\t} \n"}, {"code": "synchronized private void outputBufferedChunk $F72 { \n\tif ( smallChunks == null || chunkSize == NUM00 ) $F932 if $F10471 ( smallChunks ) { \n\t\t$F254829 ( outputChunk , smallChunks ) chunkSize = NUM00 ; \n\t\tsmallChunks = null ; \n\t\t$F665 } \n\tfinal IBindingSet [ ] chunk = new IBindingSet [ chunkSize ] ; \n\tint destPos = NUM00 ; \n\tfor ( IBindingSet [ ] e : smallChunks ) $F181805 ( System , e , chunk , destPos ) outputChunk ( chunk ) ; \n\tchunkSize = NUM00 ; \n\tsmallChunks = null ; \n\t} \n"}, {"code": "$F69921 ( b , off , len , length , data , enlarge , System , this ) "}, {"code": "private void waitLoadCompete $F72 { \n\t$F5453 ( m_loadComplete ) m_loader . setPriority ( Thread . NORM_PRIORITY ) ; \n\t$F156357 ( log ) while $F44356 ( m_loader ) { \n\t\ttry $F31130 ( Thread ) $F209655 ( log , Level , e ) } \n\t$F156357 ( log ) } \n"}, {"code": "$F1431 private void dtdatt ( Pair elm ) throws Exception { \n\tchar attqn [ ] = null ; \n\tPair att = null ; \n\tchar ch ; \n\tfor ( short st = NUM00 ; \n\tst >= NUM00 ; \n\t) { \n\t\tch = getch ( ) ; \n\t\tswitch ( st ) { \n\t\t\t$F3366 switch ( chtyp ( ch ) ) { \n\t\t\t\t$F1262 $F1262 $F1262 $F1262 $F1262 bkch ( ) ; \n\t\t\t\tattqn = qname ( mIsNSAware ) ; \n\t\t\t\tatt = find ( elm . list , attqn ) ; \n\t\t\t\tif ( att == null ) { \n\t\t\t\t\tatt = pair ( elm . list ) ; \n\t\t\t\t\tatt . chars = attqn ; \n\t\t\t\t\telm . list = att ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tatt = pair ( null ) ; \n\t\t\t\t\tatt . chars = attqn ; \n\t\t\t\t\tatt . id = NUM00 ; \n\t\t\t\t\t} \n\t\t\t\twsskip ( ) ; \n\t\t\t\tst = NUM00 ; \n\t\t\t\t$F597 $F151812 ( pent ) $F151814 $F151807 ( panic , FAULT ) } \n\t\t\t$F597 $F3366 switch ( chtyp ( ch ) ) { \n\t\t\t\t$F1262 att . id = NUM00 ; \n\t\t\t\tst = NUM00 ; \n\t\t\t\t$F597 $F151812 ( pent ) $F151814 $F1267 bkch ( ) ; \n\t\t\t\tbntok ( ) ; \n\t\t\t\tatt . id = bkeyword ( ) ; \n\t\t\t\tswitch ( att . id ) { \n\t\t\t\t\t$F1262 if $F151815 ( wsskip ) { \n\t\t\t\t\t\tpanic ( FAULT ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\tch = getch ( ) ; \n\t\t\t\t\tst = NUM00 ; \n\t\t\t\t\t$F597 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 wsskip ( ) ; \n\t\t\t\t\tst = NUM00 ; \n\t\t\t\t\t$F597 $F151807 ( panic , FAULT ) } \n\t\t\t\t$F597 } \n\t\t\t$F597 $F3366 switch ( chtyp ( ch ) ) { \n\t\t\t\t$F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 bkch ( ) ; \n\t\t\t\tswitch ( att . id ) { \n\t\t\t\t\t$F151804 ( bntok ) $F1262 mBuffIdx = - NUM00 ; \n\t\t\t\t\tbname ( _BOOL ) ; \n\t\t\t\t\t$F597 $F151807 ( panic , FAULT ) } \n\t\t\t\twsskip ( ) ; \n\t\t\t\tst = NUM00 ; \n\t\t\t\t$F597 $F151812 ( pent ) $F151814 $F151807 ( panic , FAULT ) } \n\t\t\t$F597 $F3366 switch ( ch ) { \n\t\t\t\t$F1262 wsskip ( ) ; \n\t\t\t\tst = NUM00 ; \n\t\t\t\t$F597 $F1262 wsskip ( ) ; \n\t\t\t\tswitch ( att . id ) { \n\t\t\t\t\t$F151804 ( bntok ) $F1262 mBuffIdx = - NUM00 ; \n\t\t\t\t\tbname ( _BOOL ) ; \n\t\t\t\t\t$F597 $F151807 ( panic , FAULT ) } \n\t\t\t\twsskip ( ) ; \n\t\t\t\t$F597 $F151812 ( pent ) $F151807 ( panic , FAULT ) } \n\t\t\t$F597 $F3366 switch ( ch ) { \n\t\t\t\t$F1262 bntok ( ) ; \n\t\t\t\tswitch ( bkeyword ( ) ) { \n\t\t\t\t\t$F1262 switch ( wsskip ( ) ) { \n\t\t\t\t\t\t$F1262 $F1262 st = NUM00 ; \n\t\t\t\t\t\t$F597 case EOS : panic ( FAULT ) ; \n\t\t\t\t\t\t$F1267 st = - NUM00 ; \n\t\t\t\t\t\t$F597 } \n\t\t\t\t\t$F597 $F1262 $F1262 st = - NUM00 ; \n\t\t\t\t\t$F597 $F151807 ( panic , FAULT ) } \n\t\t\t\t$F597 $F1262 $F1262 bkch ( ) ; \n\t\t\t\tst = NUM00 ; \n\t\t\t\t$F597 $F1262 $F1262 $F1262 $F1262 $F597 $F151812 ( pent ) $F1267 bkch ( ) ; \n\t\t\t\tst = - NUM00 ; \n\t\t\t\t$F597 } \n\t\t\t$F597 $F3366 switch ( ch ) { \n\t\t\t\t$F1262 $F1262 bkch ( ) ; \n\t\t\t\tbqstr ( NUM00 ) ; \n\t\t\t\tatt . list = pair ( null ) ; \n\t\t\t\tatt . list . chars = new char [ att . chars . length + mBuffIdx + NUM00 ] ; \n\t\t\t\tSystem . arraycopy ( att . chars , NUM00 , att . list . chars , NUM00 , att . chars . length - NUM00 ) ; \n\t\t\t\tatt . list . chars [ att . chars . length - NUM00 ] = NUM00 ; \n\t\t\t\tatt . list . chars [ att . chars . length ] = ch ; \n\t\t\t\tSystem . arraycopy ( mBuff , NUM00 , att . list . chars , att . chars . length + NUM00 , mBuffIdx ) ; \n\t\t\t\tatt . list . chars [ att . chars . length + mBuffIdx + NUM00 ] = ch ; \n\t\t\t\tatt . list . chars [ att . chars . length + mBuffIdx + NUM00 ] = NUM00 ; \n\t\t\t\tst = - NUM00 ; \n\t\t\t\t$F597 $F151807 ( panic , FAULT ) } \n\t\t\t$F597 $F151807 ( panic , FAULT ) } \n\t\t} \n\t} \n"}, {"code": "public void addClasses $F24643 ( classNames ) { \n\t$F30647 ( handlerFactories ) handlerFactories . addAll ( classNames ) ; \n\t} \n"}, {"code": "public static boolean isConstantName ( String name ) { \n\treturn Pattern . matches ( NUM00 , name ) ; \n\t} \n"}, {"code": "private void notifyDead ( final RPEntity dead ) { \n\tif $F40971 ( rats , dead ) { \n\t\tlogger . warn ( $F369 ( dead ) ) ; \n\t\t} \n\tif $F10471 ( rats ) { \n\t\tphaseToDefaultPhase ( new $F28830 ( Arrays . asList ( NUM00 ) ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static OMGrid read ( DataInputStream dis ) throws IOException $F13736 ( read , dis ) "}, {"code": "public VarcharConstant ( String s ) { \n\ttype = new VarcharType $F45530 ( s ) ; \n\tval = s ; \n\t} \n"}, {"code": "public boolean addChildPlanet ( DimensionProperties child ) { \n\tif ( child == this ) return _BOOL ; \n\t$F42096 ( childPlanets , child ) child . setParentPlanet ( this ) ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "$F1 public $F14937 enumerateMeasures $F72 { \n\t$F75150 ( newVector ) $F18793 ( newVector ) $F1007 ( newVector ) } \n"}, {"code": "$F2027 calculateRelative $F23416 ( absolute ) { \n\t$F22974 ( res , absolute ) $F603 ( res , absolute ) for ( $F1139 ( i , res ) ) { \n\t\tres [ i ] = $F52395 ( absolute , i ) ; \n\t\t} \n\treturn res ; \n\t} \n"}, {"code": "@ AfterClass public static void deleteLogDir $F72 { \n\tif ( logDir != null ) { \n\t\tFileUtils . deleteQuietly ( logDir ) ; \n\t\t} \n\t} \n"}, {"code": "public String toString $F72 { \n\t$F280 ( sb ) $F1469 separator = $F4582 ; \n\tint n = rows ( ) ; \n\tint m = columns ( ) ; \n\tfor ( $F119 ( i , n ) ) { \n\t\tseparator [ NUM00 ] = NUM00 ; \n\t\tfor ( $F119 ( j , m ) ) { \n\t\t\tsb . append ( separator ) ; \n\t\t\t$F53015 ( sb , components , i , j ) separator [ NUM00 ] = NUM00 ; \n\t\t\t} \n\t\t$F84 ( sb ) $F84 ( sb ) } \n\t$F92 ( sb ) } \n"}, {"code": "public static $F806 splitStringIntoArray ( String value ) { \n\t$F808 ( values ) if $F22 ( value ) { \n\t\tif ( value . indexOf ( CIMConstants . COMMA_SEPERATOR ) != - NUM00 ) { \n\t\t\t$F10128 ( values , value ) } \n\t\telse { \n\t\t\t$F384 ( values ) values [ NUM00 ] = value ; \n\t\t\t} \n\t\t} \n\treturn values ; \n\t} \n"}, {"code": "public static String fromAttrModelingModelClass ( String vaModelClass ) { \n\treturn vaModelClass . split ( ValueAnalysis . MODEL_PACKAGE_PREFIX ) [ NUM00 ] ; \n\t} \n"}, {"code": "$F35762 ( newScrollValue , itemDimension , initialMotionValue , lastMotionValue , getPullToRefreshScrollDirection , HORIZONTAL , mInitialMotionX , mLastMotionX , VERTICAL , mInitialMotionY , mLastMotionY , mCurrentMode , PULL_FROM_END , Math , FRICTION , getFooterSize , PULL_FROM_START , getHeaderSize , setHeaderScroll , isRefreshing , scale , mFooterLayout , mHeaderLayout , mState , State , setState ) "}, {"code": "public synchronized void add ( DccLocoAddress locoAddress , boolean directionNormal ) { \n\tif ( ! contains ( locoAddress ) ) { \n\t\tif $F10471 ( ConsistList ) { \n\t\t\tbyte command = NceBinaryCommand . LOCO_CMD_FWD_CONSIST_LEAD ; \n\t\t\tif ( ! directionNormal ) { \n\t\t\t\tcommand = NceBinaryCommand . LOCO_CMD_REV_CONSIST_LEAD ; \n\t\t\t\t} \n\t\t\taddLocoToConsist ( locoAddress . getNumber ( ) , locoAddress . isLongAddress ( ) , command ) ; \n\t\t\tConsistPosition . put ( locoAddress , DccConsist . POSITION_LEAD ) ; \n\t\t\t} \n\t\telse if $F10471 ( ConsistList ) { \n\t\t\tbyte command = NceBinaryCommand . LOCO_CMD_FWD_CONSIST_REAR ; \n\t\t\tif ( ! directionNormal ) { \n\t\t\t\tcommand = NceBinaryCommand . LOCO_CMD_REV_CONSIST_REAR ; \n\t\t\t\t} \n\t\t\taddLocoToConsist ( locoAddress . getNumber ( ) , locoAddress . isLongAddress ( ) , command ) ; \n\t\t\tConsistPosition . put ( locoAddress , DccConsist . POSITION_TRAIL ) ; \n\t\t\t} \n\t\telse { \n\t\t\tbyte command = NceBinaryCommand . LOCO_CMD_FWD_CONSIST_MID ; \n\t\t\tif ( ! directionNormal ) { \n\t\t\t\tcommand = NceBinaryCommand . LOCO_CMD_REV_CONSIST_MID ; \n\t\t\t\t} \n\t\t\taddLocoToConsist ( locoAddress . getNumber ( ) , locoAddress . isLongAddress ( ) , command ) ; \n\t\t\tConsistPosition . put ( locoAddress , ConsistPosition . size ( ) ) ; \n\t\t\t} \n\t\tConsistList . add ( locoAddress ) ; \n\t\t$F33227 ( ConsistDir , locoAddress , Boolean , directionNormal ) } \n\telse { \n\t\tlog . error ( NUM00 + locoAddress + NUM00 + getConsistAddress ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "private GridClientConfiguration clientConfiguration $F72 { \n\tGridClientConfiguration cfg = new GridClientConfiguration $F72 ; \n\tcfg . setTopologyRefreshFrequency ( topologyRefreshFrequency ( ) ) ; \n\tcfg . setMaxConnectionIdleTime ( maxConnectionIdleTime ( ) ) ; \n\tcfg . setProtocol ( protocol ( ) ) ; \n\tcfg . setServers ( Arrays . asList ( serverAddress ( ) ) ) ; \n\tcfg . setBalancer ( new GridClientRoundRobinBalancer $F72 ) ; \n\tif ( useSsl ( ) ) cfg . setSslContextFactory ( sslContextFactory ( ) ) ; \n\tGridClientDataConfiguration loc = new GridClientDataConfiguration $F72 ; \n\tGridClientDataConfiguration partitioned = new GridClientDataConfiguration $F72 ; \n\tpartitioned . setName ( PARTITIONED_CACHE_NAME ) ; \n\tpartitioned . setAffinity ( new GridClientPartitionAffinity $F72 ) ; \n\tGridClientDataConfiguration partitionedAsyncBackup = new GridClientDataConfiguration $F72 ; \n\tpartitionedAsyncBackup . setName ( PARTITIONED_ASYNC_BACKUP_CACHE_NAME ) ; \n\tpartitionedAsyncBackup . setAffinity ( new GridClientPartitionAffinity $F72 ) ; \n\tGridClientDataConfiguration replicated = new GridClientDataConfiguration $F72 ; \n\treplicated . setName ( REPLICATED_CACHE_NAME ) ; \n\tGridClientDataConfiguration replicatedAsync = new GridClientDataConfiguration $F72 ; \n\treplicatedAsync . setName ( REPLICATED_ASYNC_CACHE_NAME ) ; \n\tcfg . setDataConfigurations ( Arrays . asList ( loc , partitioned , replicated , replicatedAsync , partitionedAsyncBackup ) ) ; \n\treturn cfg ; \n\t} \n"}, {"code": "public final TestSubscriber assertNotSubscribed $F72 { \n\tString prefix = NUM00 ; \n\t$F61921 ( done , prefix ) if $F212185 ( subscription ) $F16882 ( fail , prefix , errors ) else if $F5973 ( errors ) $F16882 ( fail , prefix , errors ) return this ; \n\t} \n"}, {"code": "public Builder $F72 { \n\tsetVersionCode ( Math . min ( FreshAir . getCurrentApplicationVersion ( ) , NUM00 ) ) ; \n\tsetFeatures ( new LinkedList < FeatureInfo > $F72 ) ; \n\t} \n"}, {"code": "protected String convertDateFormat ( String pattern ) { \n\tboolean inside = _BOOL ; \n\tboolean mark = _BOOL ; \n\tboolean modifiedCommand = _BOOL ; \n\t$F83 ( buf ) for ( $F1088 ( i , pattern ) ) { \n\t\t$F1280 ( c , pattern , i ) if ( c == NUM00 && ! mark ) { \n\t\t\tmark = _BOOL ; \n\t\t\t} \n\t\telse { \n\t\t\tif ( mark ) { \n\t\t\t\tif ( modifiedCommand ) { \n\t\t\t\t\tmodifiedCommand = _BOOL ; \n\t\t\t\t\tmark = _BOOL ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tinside = translateCommand ( buf , pattern , i , inside ) ; \n\t\t\t\t\tif $F37111 ( c ) { \n\t\t\t\t\t\tmodifiedCommand = _BOOL ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse { \n\t\t\t\t\t\tmark = _BOOL ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tif ( ! inside && c != NUM00 ) $F19003 ( buf , inside , _BOOL ) buf . append ( c ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tif $F4012 ( buf ) { \n\t\t$F185195 ( lastChar , buf ) if ( lastChar != NUM00 && inside ) $F86 ( buf ) } \n\t$F92 ( buf ) } \n"}, {"code": "public void addChildNode ( EvalFactoryNode childNode ) $F207 ( childNodes , childNode ) "}, {"code": "public final void headTo ( Tuple3d p ) { \n\tdouble angle = Geometric . angle ( this . location , p ) ; \n\tturnTo ( Math . toDegrees ( angle ) ) ; \n\t} \n"}, {"code": "public void compactBuffer $F72 { \n\tif ( offset != buffer . length ) { \n\t\t$F2175 ( newBuffer , offset ) $F135 ( System , buffer , newBuffer , offset ) buffer = newBuffer ; \n\t\t} \n\t} \n"}, {"code": "public static $F96 decode ( String s ) $F36684 ( decode , s ) "}, {"code": "public static int putByteBuffer ( $F96 bytes , int offset , ByteBuffer buf ) { \n\t$F45850 ( len , buf ) buf . get ( bytes , offset , len ) ; \n\treturn offset + len ; \n\t} \n"}, {"code": "private void clearIndexToFirst $F72 { \n\tfor ( $F589 ) { \n\t\t$F154321 ( q , head ) for ( $F589 ) { \n\t\t\t$F154323 ( r , q ) if ( r != null && r . indexesDeletedNode ( ) && ! q . unlink ( r ) ) $F597 if ( ( q = q . down ) == null ) { \n\t\t\t\tif ( head . right == null ) tryReduceLevel ( ) ; \n\t\t\t\t$F665 } \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "final void tryTerminate $F72 { \n\tfor ( $F589 ) { \n\t\t$F8943 ( c , ctl ) if ( isRunning ( c ) || runStateAtLeast ( c , TIDYING ) || ( runStateOf ( c ) == SHUTDOWN && $F1030 ( workQueue ) ) ) $F665 if ( workerCountOf ( c ) != NUM00 ) $F14411 ( interruptIdleWorkers , ONLY_ONE ) $F677 ( mainLock , this ) $F8934 ( mainLock ) try { \n\t\t\tif ( ctl . compareAndSet ( c , ctlOf ( TIDYING , NUM00 ) ) ) { \n\t\t\t\ttry $F5795 ( terminated ) finally { \n\t\t\t\t\tctl . set ( ctlOf ( TERMINATED , NUM00 ) ) ; \n\t\t\t\t\t$F39065 ( termination ) } \n\t\t\t\t$F665 } \n\t\t\t} \n\t\t$F796 ( mainLock ) } \n\t} \n"}, {"code": "public void joinResource $F72 throws InterruptedException { \n\tif ( runObj != null ) { \n\t\tsynchronized ( complete ) { \n\t\t\tif ( runObj != null ) $F18604 ( complete ) } \n\t\t} \n\t} \n"}, {"code": "public static String toJSONString ( List list ) { \n\t$F1747 ( list ) boolean first = _BOOL ; \n\t$F280 ( sb ) $F10531 ( iter , list ) $F84 ( sb ) while $F2921 ( iter ) { \n\t\t$F60570 ( first , _BOOL , sb ) $F8877 ( value , iter ) if ( value == null ) $F223464 ( sb ) sb . append ( JSONValue . toJSONString ( value ) ) ; \n\t\t} \n\t$F84 ( sb ) $F92 ( sb ) } \n"}, {"code": "$F1 public int hashCode $F72 { \n\tfinal int prime = NUM00 ; \n\t$F17043 ( result , super ) result = prime * result + $F50584 ( tenant ) ; \n\treturn result ; \n\t} \n"}, {"code": "public void loadAccessors ( MappedField configuredField , MappedField targetField ) { \n\tloadAccessors ( targetClass , configuredField , targetField ) ; \n\t} \n"}, {"code": "public static MatrixBlock reshape ( MatrixBlock in , MatrixBlock out , int rows , int cols , boolean rowwise ) throws DMLRuntimeException { \n\tint rlen = in . rlen ; \n\tint clen = in . clen ; \n\tif ( ( ( long ) rlen ) * clen != ( ( long ) rows ) * cols ) throw new DMLRuntimeException $F84331 ( rlen , clen , rows , cols ) ; \n\tif ( rlen == rows && clen == cols ) { \n\t\tout . copy ( in ) ; \n\t\treturn out ; \n\t\t} \n\tout . sparse = MatrixBlock . evalSparseFormatInMemory ( rows , cols , in . nonZeros ) ; \n\tout . rlen = rows ; \n\tout . clen = cols ; \n\tout . nonZeros = in . nonZeros ; \n\tif ( ! in . sparse && ! out . sparse ) reshapeDense ( in , out , rows , cols , rowwise ) ; \n\telse if ( in . sparse && out . sparse ) reshapeSparse ( in , out , rows , cols , rowwise ) ; \n\telse if ( in . sparse ) reshapeSparseToDense ( in , out , rows , cols , rowwise ) ; \n\telse reshapeDenseToSparse ( in , out , rows , cols , rowwise ) ; \n\treturn out ; \n\t} \n"}, {"code": "public static $F18547 toClassesFromObjects ( final $F131 params ) { \n\tfinal $F18547 classes = new $F6969 [ params . length ] ; \n\tint i = NUM00 ; \n\tfor ( final Object object : params ) { \n\t\tif ( object != null ) { \n\t\t\tclasses [ i ++ ] = object . getClass ( ) ; \n\t\t\t} \n\t\telse { \n\t\t\tclasses [ i ++ ] = $F12222 ; \n\t\t\t} \n\t\t} \n\treturn classes ; \n\t} \n"}, {"code": "public AdminRegion ( String localName , RemoteGemFireVM vm , String userAttributeDesc ) { \n\tString gn = localName ; \n\t$F162792 ( idx , localName , nameSep ) if ( idx != - NUM00 ) $F31399 ( localName , idx ) else { \n\t\tgn = nameSep + gn ; \n\t\t} \n\tthis . globalName = gn ; \n\tthis . localName = localName ; \n\tthis . userAttributeDesc = userAttributeDesc ; \n\tthis . vm = vm ; \n\t} \n"}, {"code": "public Element signWithWSSX509TokenProfile ( Document doc , $F132633 cert , String algorithm , List ids ) throws XMLSignatureException { \n\treturn signWithWSSX509TokenProfile ( doc , cert , algorithm , ids , SOAPBindingConstants . WSF_10_VERSION ) ; \n\t} \n"}, {"code": "public void addUserMessageListener ( UserMessageListener userMessageListener ) $F207 ( userMessageListeners , userMessageListener ) "}, {"code": "public IteratorBuilder addTemplate ( ISpaceQuery query ) $F18637 ( templates , query , this ) "}, {"code": "public String addToClassPath ( final String path ) { \n\tthis . classPath += ( System . getProperty ( NUM00 ) + path ) ; \n\treturn this . classPath ; \n\t} \n"}, {"code": "private static int NewLongArray ( JNIEnvironment env , int length ) { \n\t$F4274 ( traceJNI , VM ) $F4275 ( RuntimeEntrypoints ) try { \n\t\t$F12300 ( newArray , length ) $F79069 ( env , newArray ) } \n\t$F4287 ( traceJNI , unexpected , System , env ) } \n"}, {"code": "protected abstract void finalizeOutput ( final $F2027 sourceImagePixels , final int imageWidth , final int imageHeight ) ; \n"}, {"code": "public static boolean ignoringBatteryOptimizations $F72 { \n\treturn NgnApplication . ignoringBatteryOptimizations ( null ) ; \n\t} \n"}, {"code": "private boolean retryDelayHasPassedBy ( Long lastFailTime ) { \n\treturn lastFailTime == null || lastFailTime + this . retryAfterMs < System . currentTimeMillis ( ) ; \n\t} \n"}, {"code": "public static $F9737 valueOf ( long l ) $F23210 ( Long , l ) "}, {"code": "private boolean useMetric ( MetricRule rule , Metric metric ) { \n\tif ( rule . awsDimensionSelect == null && rule . awsDimensionSelectRegex == null ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( rule . awsDimensionSelect != null && metricsIsInAwsDimensionSelect ( rule , metric ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( rule . awsDimensionSelectRegex != null && metricIsInAwsDimensionSelectRegex ( rule , metric ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "final void addIconManager ( AbstractStatusIconManager manager ) $F207 ( iconManagers , manager ) "}, {"code": "public IndexMetaData upgradeIndexMetaData ( IndexMetaData indexMetaData ) { \n\t$F65304 ( isUpgraded , indexMetaData ) checkSupportedVersion ( indexMetaData ) ; \n\tIndexMetaData newMetaData = upgradeLegacyRoutingSettings ( indexMetaData ) ; \n\tnewMetaData = addDefaultUnitsIfNeeded ( newMetaData ) ; \n\tcheckMappingsCompatibility ( newMetaData ) ; \n\tnewMetaData = upgradeSettings ( newMetaData ) ; \n\tnewMetaData = markAsUpgraded ( newMetaData ) ; \n\treturn newMetaData ; \n\t} \n"}, {"code": "static final void encode $F107623 ( src , srcOff , len , dst , dstOff ) { \n\tdst [ dstOff ] = ( byte ) ENCODE_TABLE . charAt ( $F245776 ( src , srcOff ) ) ; \n\tif ( len == NUM00 ) { \n\t\tdst [ dstOff + NUM00 ] = ( byte ) ENCODE_TABLE . charAt ( ( ( src [ srcOff ] < < NUM00 ) & NUM00 ) | ( ( src [ srcOff + NUM00 ] > > NUM00 ) & NUM00 ) ) ; \n\t\tdst [ dstOff + NUM00 ] = ( byte ) ENCODE_TABLE . charAt ( ( ( src [ srcOff + NUM00 ] < < NUM00 ) & NUM00 ) | ( ( src [ srcOff + NUM00 ] > > NUM00 ) & NUM00 ) ) ; \n\t\tdst [ dstOff + NUM00 ] = ( byte ) ENCODE_TABLE . charAt ( src [ srcOff + NUM00 ] & NUM00 ) ; \n\t\t} \n\telse if ( len == NUM00 ) { \n\t\tdst [ dstOff + NUM00 ] = ( byte ) ENCODE_TABLE . charAt ( ( ( src [ srcOff ] < < NUM00 ) & NUM00 ) | ( ( src [ srcOff + NUM00 ] > > NUM00 ) & NUM00 ) ) ; \n\t\tdst [ dstOff + NUM00 ] = ( byte ) ENCODE_TABLE . charAt ( ( src [ srcOff + NUM00 ] < < NUM00 ) & NUM00 ) ; \n\t\t} \n\telse { \n\t\tdst [ dstOff + NUM00 ] = ( byte ) ENCODE_TABLE . charAt ( ( src [ srcOff ] < < NUM00 ) & NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "public static void convolveV ( Kernel kernel , $F2027 inPixels , $F2027 outPixels , int width , int height , boolean alpha , int edgeAction ) { \n\tint index = NUM00 ; \n\t$F5415 matrix = kernel . getKernelData ( null ) ; \n\t$F2047 ( rows , kernel ) int rows2 = rows / NUM00 ; \n\tfor ( $F119 ( y , height ) ) { \n\t\tfor ( $F119 ( x , width ) ) { \n\t\t\tfloat r = NUM00 , g = NUM00 , b = NUM00 , a = NUM00 ; \n\t\t\tfor ( $F142929 ( row , rows2 ) ) { \n\t\t\t\tint iy = y + row ; \n\t\t\t\tint ioffset ; \n\t\t\t\tif ( iy < NUM00 ) { \n\t\t\t\t\tif ( edgeAction == CLAMP_EDGES ) ioffset = NUM00 ; \n\t\t\t\t\telse if ( edgeAction == WRAP_EDGES ) ioffset = ( ( y + height ) % height ) * width ; \n\t\t\t\t\telse ioffset = iy * width ; \n\t\t\t\t\t} \n\t\t\t\telse if ( iy >= height ) { \n\t\t\t\t\tif ( edgeAction == CLAMP_EDGES ) ioffset = ( height - NUM00 ) * width ; \n\t\t\t\t\telse if ( edgeAction == WRAP_EDGES ) ioffset = ( ( y + height ) % height ) * width ; \n\t\t\t\t\telse ioffset = iy * width ; \n\t\t\t\t\t} \n\t\t\t\telse ioffset = iy * width ; \n\t\t\t\tfloat f = matrix [ row + rows2 ] ; \n\t\t\t\tif ( f != NUM00 ) { \n\t\t\t\t\tint rgb = inPixels [ ioffset + x ] ; \n\t\t\t\t\t$F339696 ( a , f , rgb ) $F339696 ( r , f , rgb ) $F339696 ( g , f , rgb ) b += f * ( rgb & NUM00 ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tint ia = alpha ? PixelUtils . clamp ( $F127087 ( a ) ) : NUM00 ; \n\t\t\t$F339710 ( ir , PixelUtils , r ) $F339710 ( ig , PixelUtils , g ) $F339710 ( ib , PixelUtils , b ) outPixels [ index ++ ] = $F38048 ( ia , ir , ig , ib ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F1431 public final void storeData ( final List data ) throws IDBPersistenceException { \n\tSqlSession session = null ; \n\t$F115 ( size , data ) int commited = NUM00 ; \n\tT dtShortTermLog ; \n\ttry { \n\t\tsession = sqlSessionFactory . openSession ( ExecutorType . BATCH , _BOOL ) ; \n\t\tif $F585 ( LOGGER ) { \n\t\t\tLOGGER . debug ( $F369 ( session ) ) ; \n\t\t\t} \n\t\tLoggerMapper $F4203 persistenceMapper = session . getMapper ( mapperInterface ) ; \n\t\tfor ( $F253816 ( i , size ) ) { \n\t\t\tif ( ( NUM00 == i % RECORDS_PER_BATCH ) && i > NUM00 ) { \n\t\t\t\t$F15998 ( LOGGER , i ) $F17621 ( session ) commited = i ; \n\t\t\t\t} \n\t\t\tif $F26935 ( data , i ) { \n\t\t\t\tdtShortTermLog = ( T ) data . get ( i ) ; \n\t\t\t\tif $F585 ( LOGGER ) { \n\t\t\t\t\tLOGGER . debug ( $F73839 ( dtShortTermLog ) ) ; \n\t\t\t\t\t} \n\t\t\t\tpersistenceMapper . insertLog ( dtShortTermLog ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F17621 ( session ) commited = size ; \n\t\t} \n\tcatch ( PersistenceException e ) { \n\t\tLOGGER . error ( $F10533 ( data ) , e ) ; \n\t\ttry { \n\t\t\tif ( session != null ) $F21746 ( session ) } \n\t\t$F9877 ( LOGGER , sql ) throw new IDBPersistenceException ( e . getMessage ( ) , commited ) ; \n\t\t} \n\tfinally { \n\t\ttry $F6399 ( session ) $F9877 ( LOGGER , e ) } \n\t} \n"}, {"code": "$F1431 public static Map < String , ConfigurationKey $F1011 > registeredKeys $F72 { \n\tsynchronized ( registeredKeys ) { \n\t\tif ( copy == null ) copy = Collections . unmodifiableMap ( ( Map < String , ConfigurationKey $F1011 > ) registeredKeys . clone ( ) ) ; \n\t\treturn copy ; \n\t\t} \n\t} \n"}, {"code": "public static String md5 ( String stringToHash ) { \n\tif ( stringToHash != null ) { \n\t\ttry { \n\t\t\t$F5348 ( md , MessageDigest ) $F96 bytes = md . digest ( stringToHash . getBytes ( ) ) ; \n\t\t\tStringBuilder sb = new StringBuilder $F113948 ( bytes ) ; \n\t\t\tfor ( $F1139 ( i , bytes ) ) { \n\t\t\t\tint low = ( bytes [ i ] & NUM00 ) ; \n\t\t\t\tint high = ( $F92928 ( bytes , i ) ) ; \n\t\t\t\tsb . append ( Constants . HEXADECIMAL [ high ] ) ; \n\t\t\t\tsb . append ( Constants . HEXADECIMAL [ low ] ) ; \n\t\t\t\t} \n\t\t\t$F92 ( sb ) } \n\t\tcatch ( NoSuchAlgorithmException e ) $F2455 } \n\telse $F2455 } \n"}, {"code": "public String mostOfString $F72 { \n\tString typeName = NUM00 ; \n\tswitch ( type ) { \n\t\t$F7242 ( BUILTIN , typeName ) $F7242 ( NUMBER , typeName ) $F23258 ( typeName ) $F7242 ( PF_STEP , typeName ) $F7242 ( IDENT , typeName ) $F7242 ( COMMENT , typeName ) $F7242 ( DASHES , typeName ) $F7242 ( END_MODULE , typeName ) $F7242 ( PROLOG , typeName ) $F7242 ( EPILOG , typeName ) $F7242 ( PCAL_LABEL , typeName ) } \n\t; \n\tString str = NUM00 + string + NUM00 ; \n\tif ( string == null ) { \n\t\tstr = NUM00 ; \n\t\t} \n\t; \n\tString result = NUM00 + str + NUM00 + typeName + NUM00 + column + NUM00 + getWidth ( ) ; \n\tif ( aboveAlign . line != - NUM00 ) { \n\t\tresult = $F31144 ( result , aboveAlign ) ; \n\t\t} \n\t; \n\tif ( belowAlign . line != - NUM00 ) { \n\t\tresult = $F31144 ( result , belowAlign ) ; \n\t\t} \n\t; \n\tif ( preSpace != NUM00 ) $F15894 ( result , preSpace ) ; \n\tif ( isAlignmentPoint ) $F2365 ( result ) ; \n\tif ( distFromMargin != NUM00 ) $F15894 ( result , distFromMargin ) ; \n\tif ( subscript ) $F2365 ( result ) ; \n\treturn result ; \n\t} \n"}, {"code": "public CreateIndexRequest mapping ( String type , XContentBuilder source ) { \n\tif $F1710 ( mappings , type ) $F322689 ( type ) try { \n\t\tmappings . put ( type , source . string ( ) ) ; \n\t\t} \n\tcatch ( IOException e ) $F78550 ( e ) return this ; \n\t} \n"}, {"code": "public static PrettyPrint indentWithSpaces ( int number ) { \n\t$F6853 ( number ) $F18064 ( chars , number ) $F21017 ( Arrays , chars ) return new PrettyPrint ( chars ) ; \n\t} \n"}, {"code": "private static void copyFile ( File src , File dst , Integer port , boolean internalCompression ) throws IOException { \n\tBufferedReader in = new BufferedReader ( new InputStreamReader ( new FileInputStream ( src ) , StandardCharsets . UTF_8 ) ) ; \n\tWriter out = new OutputStreamWriter ( new FileOutputStream ( dst ) , StandardCharsets . UTF_8 ) ; \n\tfor ( String line = in . readLine ( ) ; \n\tnull != line ; \n\tline = in . readLine ( ) ) { \n\t\tif ( null != port ) line = line . replace ( $F22435 ( port ) ) ; \n\t\tline = line . replace ( NUM00 , internalCompression ? NUM00 : NUM00 ) ; \n\t\tout . write ( line ) ; \n\t\t} \n\t$F59 ( in ) $F59 ( out ) } \n"}, {"code": "public void assertEventLogContains ( Object event ) { \n\tif $F2200 ( mEventLog , event ) $F1328 ( fail , mEventLog ) } \n"}, {"code": "private static boolean isAllUnderscores $F72 { \n\tint i = NUM00 ; \n\tboolean result = _BOOL ; \n\twhile ( result && $F7007 ( i , token ) ) { \n\t\tif $F20317 ( token , i ) { \n\t\t\tresult = _BOOL ; \n\t\t\t} \n\t\t; \n\t\ti = i + NUM00 ; \n\t\t} \n\t; \n\treturn result ; \n\t} \n"}, {"code": "public ImageWarp ( BufferedImage bi , GeoCoordTransformation transform , DataBounds imageBounds ) { \n\tif ( bi != null ) { \n\t\t$F23468 ( iwidth , bi ) $F23469 ( iheight , bi ) setGeoTrans ( transform ) ; \n\t\tsetImageBounds ( imageBounds ) ; \n\t\tpixels = getPixels ( bi , NUM00 , NUM00 , iwidth , iheight ) ; \n\t\tbi = null ; \n\t\t} \n\t} \n"}, {"code": "public static EquipmentLoggerFactory createFactory ( final EquipmentConfiguration econf , final ProcessConfiguration pconf , boolean useEquipmentLoggers , boolean useEquipmentAppendersOnly ) { \n\treturn new EquipmentLoggerFactory ( econf . getHandlerClassName ( ) , Long . valueOf ( econf . getId ( ) ) , econf . getName ( ) , pconf . getProcessName ( ) , useEquipmentLoggers , useEquipmentAppendersOnly ) ; \n\t} \n"}, {"code": "protected void assertEquals ( Integer expected , Integer actual ) { \n\tif ( expected == null || actual == null ) { \n\t\tif ( expected != actual ) { \n\t\t\tassertEquals ( NUM00 + expected , NUM00 + actual ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tassertEquals ( expected . intValue ( ) , actual . intValue ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static boolean vPoolSpecifiesSnapshots ( final VirtualPool virtualPool ) { \n\tif ( virtualPool . getMaxNativeSnapshots ( ) == null ) { \n\t\treturn _BOOL ; \n\t\t} \n\treturn virtualPool . getMaxNativeSnapshots ( ) != MAX_DISABLED ; \n\t} \n"}, {"code": "public void mapDatasetToAxis ( int index , int axisIndex ) { \n\tList axisIndices = new $F59124 $F989 ; \n\t$F368241 ( axisIndices , axisIndex ) mapDatasetToAxes ( index , axisIndices ) ; \n\t} \n"}, {"code": "public AuthenticatorAppRegistrationURIBuilder ( AMIdentity id , String secretHex , int codeLength , String issuer ) { \n\tReject . ifNull ( id , NUM00 ) ; \n\tReject . ifNull ( secretHex , NUM00 ) ; \n\tReject . ifTrue ( StringUtils . isBlank ( issuer ) , NUM00 ) ; \n\tReject . ifTrue ( ( codeLength < MIN_CODE_LENGTH ) , NUM00 + MIN_CODE_LENGTH + NUM00 ) ; \n\tif $F1277 ( secretHex ) $F825 this . issuer = issuer ; \n\tthis . id = id ; \n\tthis . secretHex = secretHex ; \n\tthis . codeLength = codeLength ; \n\t} \n"}, {"code": "protected void updateApplicationEnabled $F72 { \n\tfirePropertyChange ( NUM00 , Boolean . valueOf ( ! isEnabled ( ) ) , $F130521 ( Boolean , isEnabled ) ) ; \n\t} \n"}, {"code": "public PersonalityInsights ( final String versionDate , String username , String password ) { \n\tthis ( versionDate ) ; \n\tsetUsernameAndPassword ( username , password ) ; \n\t} \n"}, {"code": "public String signMessage ( String message ) throws IllegalStateException { \n\tValidate . notNull ( getSignAlgorithm ( ) , NUM00 ) ; \n\tValidate . notNull ( getPrivateKey ( ) , NUM00 ) ; \n\tValidate . notEmpty ( message , NUM00 ) ; \n\tlog . debug ( NUM00 + message + NUM00 + getSignAlgorithm ( ) ) ; \n\ttry { \n\t\tSignatureAlgorithm algo = SignatureAlgorithm . getSignatureAlgorithmForURI ( getSignAlgorithm ( ) ) ; \n\t\tSignature sig = Signature . getInstance ( algo . getAlgorithmName ( ) ) ; \n\t\tsig . initSign ( this . privateKey ) ; \n\t\t$F151317 ( messageBytes , message ) sig . update ( messageBytes ) ; \n\t\t$F96 sigBytes = sig . sign ( ) ; \n\t\tString signature = SharedUtils . encodeBytes ( sigBytes ) ; \n\t\t$F586 ( log , signature ) return signature ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F5197 ( log , e ) $F48926 ( e ) } \n\t} \n"}, {"code": "private void outputPriceLists ( Properties ctx , PrintWriter out , boolean includeAny ) { \n\t$F8438 ( out ) if ( includeAny ) $F8438 ( out ) $F8438 ( out ) $F8438 ( out ) $F8438 ( out ) } \n"}, {"code": "public void clearBindings $F72 { \n\tif ( mBindArgs != null ) { \n\t\t$F17838 ( Arrays , mBindArgs ) } \n\t} \n"}, {"code": "public boolean assignIfBestMatch ( MethodDeclaration declaration ) { \n\tassert ! finalized : NUM00 ; \n\tif ( ! isMatch ( declaration . getParameters ( ) ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( this . bestMatchMethod . isPresent ( ) ) { \n\t\tif ( this . bestMatchMethod . get ( ) . getParameters ( ) . size ( ) > declaration . getParameters ( ) . size ( ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\tthis . bestMatchMethod = Optional . of ( declaration ) ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static List $F284080 from ( Cursor c ) { \n\tList $F284080 users = null ; \n\t$F23386 ( count , c ) if ( count > NUM00 ) { \n\t\t$F10253 ( users , count ) while $F12260 ( c ) { \n\t\t\tUser user = $F246422 ; \n\t\t\tSyncing . from ( c , user ) ; \n\t\t\t$F204682 ( col , c , EMAIL_HASH ) if ( col >= NUM00 ) { \n\t\t\t\tuser . emailHash = c . getString ( col ) ; \n\t\t\t\t} \n\t\t\tcol = c . getColumnIndex ( FOLLOWING ) ; \n\t\t\tif ( col >= NUM00 ) { \n\t\t\t\tuser . isFollowing = c . getInt ( col ) == NUM00 ; \n\t\t\t\t} \n\t\t\tusers . add ( user ) ; \n\t\t\t} \n\t\t} \n\t$F59 ( c ) return users ; \n\t} \n"}, {"code": "$F1 public void flush $F72 throws IOException $F29882 ( out ) "}, {"code": "private void startCheckingStatus $F72 { \n\tfuture = executor . submit ( null ) ; \n\t} \n"}, {"code": "private static Object newInstanceNoServiceLoader $F60993 ( providerClass ) { \n\tif ( System . getSecurityManager ( ) == null ) $F1337 try { \n\t\tMethod creationMethod = providerClass . getDeclaredMethod ( NUM00 ) ; \n\t\treturn creationMethod . invoke ( null , ( $F131 ) null ) ; \n\t\t} \n\tcatch ( NoSuchMethodException exc ) $F1337 catch ( Exception exc ) $F1337 } \n"}, {"code": "private void addSignatureProfile ( SignatureWrapper signature , XmlSignature xmlSignature ) { \n\tSignatureType signatureType = SignatureType . NA ; \n\tString certificateId = signature . getSigningCertificateId ( ) ; \n\tif ( certificateId != null ) { \n\t\tsignatureType = getSignatureType ( certificateId ) ; \n\t\t} \n\txmlSignature . setSignatureLevel ( signatureType . name ( ) ) ; \n\t} \n"}, {"code": "private static final int parseTimeString ( String str ) { \n\t$F1382 ( str ) int ret = NUM00 ; \n\tboolean neg = _BOOL ; \n\tint i = NUM00 ; \n\tif $F4432 ( str ) { \n\t\tneg = _BOOL ; \n\t\ti ++ ; \n\t\t} \n\tint num = NUM00 ; \n\t$F22998 ( len , str ) for ( ; \n\ti < len ; \n\ti ++ ) { \n\t\t$F1280 ( c , str , i ) if $F220844 ( c ) { \n\t\t\tnum = num * NUM00 + c - NUM00 ; \n\t\t\t} \n\t\telse if ( c == NUM00 ) { \n\t\t\tret += num ; \n\t\t\tnum = NUM00 ; \n\t\t\tret *= NUM00 ; \n\t\t\t} \n\t\t} \n\tret += num ; \n\tret *= NUM00 ; \n\tif ( neg ) ret = - ret ; \n\treturn ret ; \n\t} \n"}, {"code": "public synchronized void removeImageListener ( ImageListener cl ) $F106 ( m_imageListeners , cl ) "}, {"code": "public ArrayList < ConstraintWidget > buildList ( ScoutWidget [ ] list ) { \n\tArrayList < ConstraintWidget > $F204 ( ret ) ; \n\tfor ( $F304395 ( i , mContainSet ) ; \n\ti >= NUM00 ; \n\t$F304396 ( i , mContainSet ) ) { \n\t\tret . add ( list [ i ] . mConstraintWidget ) ; \n\t\t} \n\treturn ret ; \n\t} \n"}, {"code": "private boolean nodeExists ( StringTokenizer path ) throws BackingStoreException { \n\t$F8095 ( token , path ) if $F3057 ( token ) $F824 synchronized ( lock ) { \n\t\tAbstractPreferences child = kidCache . get ( token ) ; \n\t\t$F192589 ( child , getChild , token ) $F397 ( child , _BOOL ) if $F49874 ( path ) return _BOOL ; \n\t\t$F89223 ( path ) if $F49874 ( path ) $F824 return child . nodeExists ( path ) ; \n\t\t} \n\t} \n"}, {"code": "$F1654 ( delegate ) "}, {"code": "public NetworkAddressFactoryImpl $F72 throws InitializationException { \n\tthis ( DEFAULT_TCP_HTTP_LISTEN_PORT ) ; \n\t} \n"}, {"code": "public TransparentGlassPanePanel ( ImageIcon icon , String text , Color backgroundColor , float transparency ) { \n\tsetLayout ( $F78335 ) ; \n\t$F45960 ( gbc ) gbc . gridy = NUM00 ; \n\tgbc . gridx = NUM00 ; \n\t$F78356 ( iconLabel , icon ) add ( iconLabel , gbc ) ; \n\tgbc . gridy += NUM00 ; \n\tlabel = new JLabel ( text ) ; \n\tadd ( label , gbc ) ; \n\tif ( transparency > NUM00 ) { \n\t\ttransparency = NUM00 ; \n\t\t} \n\telse $F17370 ( transparency ) Color transparentColor = new Color ( backgroundColor . getRed ( ) , backgroundColor . getGreen ( ) , backgroundColor . getBlue ( ) , $F35376 ( transparency ) ) ; \n\tsetBackground ( transparentColor ) ; \n\tsetOpaque ( _BOOL ) ; \n\t} \n"}, {"code": "$F1 protected void fillHeader ( Header head ) { \n\ttry { \n\t\tStandard . context ( UndefinedData . class ) ; \n\t\thead . setXtension ( NUM00 ) ; \n\t\thead . setBitpix ( BasicHDU . BITPIX_BYTE ) ; \n\t\thead . setNaxes ( NUM00 ) ; \n\t\thead . addValue ( NAXISn . n ( NUM00 ) , this . data . length ) ; \n\t\thead . addValue ( PCOUNT , NUM00 ) ; \n\t\thead . addValue ( GCOUNT , NUM00 ) ; \n\t\thead . addValue ( EXTEND , _BOOL ) ; \n\t\t} \n\tcatch ( HeaderCardException e ) $F55754 ( LOG , Level , e ) finally { \n\t\tStandard . context ( null ) ; \n\t\t} \n\t} \n"}, {"code": "protected void cleanStationsAndNetwork $F72 { \n\t$F973 ( log ) cleanSchedule ( ) ; \n\tremoveNonUsedStopFacilities ( ) ; \n\tcleanModes ( ) ; \n\tremoveNonUsedLinks ( ) ; \n\t$F973 ( log ) } \n"}, {"code": "private static String stripAppleSpanFromMarkup ( String markup ) { \n\t$F7542 ( stripped , markup ) $F12747 ( prefixBegIdx , stripped , APPLE_SPAN_PREFIX ) while ( prefixBegIdx >= NUM00 ) { \n\t\tint prefixEndIdx = stripped . indexOf ( NUM00 , prefixBegIdx ) + NUM00 ; \n\t\tstripped . replace ( prefixBegIdx , prefixEndIdx , NUM00 ) ; \n\t\t$F162792 ( suffixBegIdx , stripped , APPLE_SPAN_SUFFIX ) $F12749 ( suffixEndIdx , suffixBegIdx , APPLE_SPAN_SUFFIX ) stripped . replace ( suffixBegIdx , suffixEndIdx , NUM00 ) ; \n\t\tprefixBegIdx = stripped . indexOf ( APPLE_SPAN_PREFIX ) ; \n\t\t} \n\t$F92 ( stripped ) } \n"}, {"code": "private InvocationConstraints createInvocationConstraints $F72 { \n\tif ( MIN_RETRY >= sleepTime [ tryIndx ] ) { \n\t\treturn new InvocationConstraints ( new ConnectionAbsoluteTime ( System . currentTimeMillis ( ) + sleepTime [ tryIndx ] ) , null ) ; \n\t\t} \n\telse $F74420 ( InvocationConstraints ) } \n"}, {"code": "public void create ( SSOToken token , String dn , Map attrs ) throws $F16995 { \n\tcreate ( token . getPrincipal ( ) , dn , attrs ) ; \n\tobjectChanged ( dn , ADD ) ; \n\t} \n"}, {"code": "$F1 public void close $F72 throws IOException { \n\tif ( ! closed ) { \n\t\ttry { \n\t\t\t$F42258 ( eof , exhaustInputStream , this ) } \n\t\tfinally { \n\t\t\teof = _BOOL ; \n\t\t\tclosed = _BOOL ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void discardDownstreamMediaChunk $F72 { \n\tMediaChunk removed = mediaChunks . removeFirst ( ) ; \n\tlong totalBytes = removed . bytesLoaded ( ) ; \n\t$F33833 ( removed ) notifyDownstreamDiscarded ( removed . startTimeUs , removed . endTimeUs , totalBytes ) ; \n\t} \n"}, {"code": "public Object executeScript ( final Script script , final ScriptContext context ) { \n\tfinal ScriptEngine engine = scriptEngineProvider . getScriptEngine ( script . getType ( ) ) ; \n\treturn executeScript ( script , engine , context ) ; \n\t} \n"}, {"code": "public static PlaceholderFragment newInstance $F72 { \n\tPlaceholderFragment fragment = new PlaceholderFragment $F72 ; \n\t$F53033 ( args ) fragment . setArguments ( args ) ; \n\treturn fragment ; \n\t} \n"}, {"code": "void removeEQ ( Object o ) { \n\t$F677 ( lock , this ) $F790 ( lock ) try { \n\t\t$F131 array = queue ; \n\t\tfor ( int i = NUM00 , n = size ; \n\t\ti < n ; \n\t\ti ++ ) { \n\t\t\tif ( o == array [ i ] ) $F87181 ( removeAt , i ) } \n\t\t} \n\t$F796 ( lock ) } \n"}, {"code": "public T eval $F72 { \n\treturn eval ( bindings ( ) ) ; \n\t} \n"}, {"code": "public void add ( XMPPathSegment segment ) $F207 ( segments , segment ) "}, {"code": "private void nextSync $F72 { \n\tif $F2921 ( syncItemIterator ) { \n\t\t$F3224 ( partialStartTime , System ) $F45366 ( currentSyncItem , syncItemIterator ) currentSyncItem . sync ( this , hostConnection , callbackHandler , contentResolver ) ; \n\t\t} \n\telse { \n\t\tLogUtils . LOGD ( TAG , NUM00 + $F32707 ( System , startTime ) ) ; \n\t\tif ( listener != null ) { \n\t\t\tlistener . onSyncFinished ( this ) ; \n\t\t\t} \n\t\tsyncService . stopSelf ( serviceStartId ) ; \n\t\t} \n\t} \n"}, {"code": "public String decode ( String encoded ) { \n\tJsonObject object = new JsonObject ( encoded ) ; \n\tJsonArray headers = object . getJsonArray ( NUM00 ) ; \n\tfor ( Object headerObj : headers ) { \n\t\tJsonArray header = ( JsonArray ) headerObj ; \n\t\t$F27130 ( key , header ) $F27130 ( value , header ) if ( key . equalsIgnoreCase ( CONTENT_TYPE ) && ( value . contains ( NUM00 ) || value . contains ( APPLICATION_JSON ) ) ) { \n\t\t\ttry { \n\t\t\t\tobject . put ( NUM00 , new JsonObject ( new String ( object . getBinary ( PAYLOAD ) , Charset . forName ( UTF_8 ) ) ) ) ; \n\t\t\t\t} \n\t\t\tcatch ( DecodeException e ) { \n\t\t\t\tobject . put ( NUM00 , new String ( object . getBinary ( PAYLOAD ) , Charset . forName ( UTF_8 ) ) ) ; \n\t\t\t\t} \n\t\t\tobject . remove ( PAYLOAD ) ; \n\t\t\t$F597 } \n\t\t} \n\t$F92 ( object ) } \n"}, {"code": "public boolean matchesWord $F72 { \n\treturn ! isEmpty ( ) && $F15875 ( Character , queue , pos ) ; \n\t} \n"}, {"code": "public void test_doAs_01 $F72 { \n\tSubject subj = new Subject $F72 ; \n\t$F101877 pa = new myPrivilegedAction $F72 ; \n\t$F101877 paNull = null ; \n\ttry { \n\t\tObject obj = Subject . doAs ( null , pa ) ; \n\t\t} \n\t$F17395 ( fail , e ) try { \n\t\tObject obj = Subject . doAs ( subj , pa ) ; \n\t\t} \n\t$F17395 ( fail , e ) try { \n\t\tObject obj = Subject . doAs ( subj , paNull ) ; \n\t\tfail ( NUM00 ) ; \n\t\t} \n\t$F53531 } \n"}, {"code": "public void testDivideExpLessZero $F72 { \n\tString a = NUM00 ; \n\tint aScale = NUM00 ; \n\tString b = NUM00 ; \n\tint bScale = NUM00 ; \n\tString c = NUM00 ; \n\tint resScale = - NUM00 ; \n\t$F1918 ( aNumber , a , aScale ) $F1918 ( bNumber , b , bScale ) BigDecimal result = aNumber . divide ( bNumber , resScale , BigDecimal . ROUND_CEILING ) ; \n\t$F1925 ( assertEquals , c , result ) $F1928 ( assertEquals , resScale , result ) } \n"}, {"code": "public static boolean containsWhitespace ( final CharSequence seq ) { \n\t$F46660 ( isEmpty , seq , _BOOL ) $F22998 ( strLen , seq ) for ( $F119 ( i , strLen ) ) { \n\t\tif $F11974 ( Character , seq , i ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "$F125330 ( isWheelEvent ) "}, {"code": "public Connection ( String clientHandle , String clientId , String host , int port , Context context , MqttAndroidClient client , boolean sslConnection ) { \n\tthis . clientHandle = clientHandle ; \n\tthis . clientId = clientId ; \n\tthis . host = host ; \n\tthis . port = port ; \n\tthis . context = context ; \n\tthis . client = client ; \n\tthis . sslConnection = sslConnection ; \n\t$F30598 ( history ) $F280 ( sb ) $F84 ( sb ) sb . append ( clientId ) ; \n\t$F84 ( sb ) $F31458 ( addAction , sb ) } \n"}, {"code": "public void recordState ( DialogueState state , String name ) { \n\tif ( frame != null ) { \n\t\tstateMonitorTab . recordState ( state , name ) ; \n\t\t} \n\t} \n"}, {"code": "public void characters ( org . w3c . dom . Node node ) throws $F2253 { \n\tflushPending ( ) ; \n\t$F61361 ( data , node ) if ( data != null ) { \n\t\t$F11550 ( length , data ) $F180083 ( length , m_charsBuff ) $F16116 ( data , length , m_charsBuff ) characters ( m_charsBuff , NUM00 , length ) ; \n\t\t} \n\t} \n"}, {"code": "private void computeFiltersFromDefault ( IndicatorViewState oldState ) { \n\tfilters = new ArrayList < Filter > $F72 ; \n\t$F2695 ( defaultFilterNames ) for ( Filter defaultFilter : defaultFilters ) { \n\t\tfilters . add ( defaultFilter ) ; \n\t\tif ( defaultFilter . name != null ) defaultFilterNames . add ( defaultFilter . name ) ; \n\t\t} \n\tif ( oldState != null ) { \n\t\tfor ( Filter oldFilter : oldState . filters ) { \n\t\t\tif ( oldFilter . name == null || ! defaultFilterNames . contains ( oldFilter . name ) ) filters . add ( oldFilter ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private static Data parseName ( Set me , Set peer ) { \n\tif ( me == null ) $F895 else $F27731 ( me ) Data data = new Data $F72 ; \n\t$F280 ( b ) data . me = cons ( me , b ) ; \n\tif $F1032 ( peer ) { \n\t\t$F84 ( b ) data . peer = cons ( peer , b ) ; \n\t\t} \n\tdata . name = b . toString ( ) ; \n\treturn data ; \n\t} \n"}, {"code": "public static boolean streamContentEquals ( InputStream s1 , InputStream s2 ) throws IOException { \n\ttry { \n\t\tint b1 , b2 ; \n\t\tdo { \n\t\t\t$F10201 ( b1 , s1 ) $F10201 ( b2 , s2 ) } \n\t\twhile ( ( b1 == b2 ) && ( b1 != - NUM00 ) ) ; \n\t\treturn b1 == b2 ; \n\t\t} \n\tfinally { \n\t\ttry $F4650 ( s1 , s2 ) $F3957 } \n\t} \n"}, {"code": "public ContentNode parse ( JSDocCharScanner scanner , TagDictionary < AbstractInlineTagDefinition > inlineTagsDictinary ) { \n\tComposedContent description = DomFactory . eINSTANCE . createComposedContent ( ) ; \n\tif $F87568 ( scanner ) $F1337 $F115472 ( nextIsTagTitle , scanner ) int start = scanner . nextOffset ( ) ; \n\tint end = start ; \n\t$F83 ( strb ) while $F2921 ( scanner ) { \n\t\tchar c = scanner . peek ( ) ; \n\t\tif ( regionStart ( c ) ) { \n\t\t\tScannerState st = scanner . saveState ( ) ; \n\t\t\tInlineTag tag = ( InlineTag ) parseRegion ( scanner , inlineTagsDictinary ) ; \n\t\t\tif ( tag != null ) { \n\t\t\t\tsaveTextTokens ( description , start , end , strb ) ; \n\t\t\t\t$F6932 ( strb ) start = end ; \n\t\t\t\tdescription . getContents ( ) . add ( tag ) ; \n\t\t\t\t$F598 } \n\t\t\telse { \n\t\t\t\tscanner . restoreState ( st ) ; \n\t\t\t\tif ( start == end ) { \n\t\t\t\t\tassert _BOOL ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t$F24630 ( scanner ) if ( JSDocCharScanner . isNL ( c ) ) { \n\t\t\tif ( scanner . hasNext ( ) && ! nextIsTagTitle ( scanner ) ) { \n\t\t\t\tend = scanner . offset ( ) ; \n\t\t\t\t} \n\t\t\telse $F5153 } \n\t\tstrb . append ( c ) ; \n\t\tend = scanner . offset ( ) ; \n\t\t} \n\t$F1822 ( pendingData , strb ) if $F38506 ( pendingData , _BOOL ) { \n\t\tsaveTextTokens ( description , start , end , strb ) ; \n\t\t} \n\tswitch ( description . getContents ( ) . size ( ) ) { \n\t\t$F3366 $F1274 $F3366 return description . getContents ( ) . get ( NUM00 ) ; \n\t\t$F1267 return description ; \n\t\t} \n\t} \n"}, {"code": "static public void add ( Errors errors , String text ) { \n\t$F2329 ( errors ) errors . add ( text ) ; \n\t} \n"}, {"code": "public synchronized void removeIconsForPkg ( String packageName , UserHandleCompat user ) { \n\tremoveFromMemCacheLocked ( packageName , user ) ; \n\tlong userSerial = mUserManager . getSerialNumberForUser ( user ) ; \n\tmIconDb . delete ( IconDB . COLUMN_COMPONENT + NUM00 + IconDB . COLUMN_USER + NUM00 , new String [ ] { \n\t\tpackageName + NUM00 , Long . toString ( userSerial ) } \n\t) ; \n\t} \n"}, {"code": "public boolean contains ( String sCategory ) $F69736 ( CategoryEstimations , sCategory ) "}, {"code": "private void createRecursivly ( String path ) throws $F80658 { \n\ttry { \n\t\tif ( zk . exists ( path , _BOOL ) == null && $F20 ( path ) ) { \n\t\t\tString temp = path . substring ( NUM00 , $F23703 ( path , File ) ) ; \n\t\t\tcreateRecursivly ( temp ) ; \n\t\t\tzk . create ( path , null , Ids . OPEN_ACL_UNSAFE , CreateMode . PERSISTENT ) ; \n\t\t\t} \n\t\telse $F932 } \n\tcatch ( KeeperException e ) { \n\t\tthrow e ; \n\t\t} \n\tcatch ( InterruptedException e ) { \n\t\tthrow e ; \n\t\t} \n\t} \n"}, {"code": "public static final void frontEndStatistics ( SpecObj spec ) $F845 "}, {"code": "public String toString $F72 { \n\tif ( notBefore == null || notAfter == null ) $F1278 return ( $F148552 ( notBefore , notAfter ) + NUM00 ) ; \n\t} \n"}, {"code": "public void zoom $F7635 ( x , y , factor ) { \n\tdouble rangeX = Math . abs ( currentExtent . getMaxX ( ) - currentExtent . getMinX ( ) ) ; \n\tdouble rangeY = Math . abs ( currentExtent . getMaxY ( ) - currentExtent . getMinY ( ) ) ; \n\tcurrentExtent . setMinX ( x - ( rangeX * factor ) / NUM00 ) ; \n\tcurrentExtent . setMinY ( y - ( rangeY * factor ) / NUM00 ) ; \n\tcurrentExtent . setMaxX ( x + ( rangeX * factor ) / NUM00 ) ; \n\tcurrentExtent . setMaxY ( y + ( rangeY * factor ) / NUM00 ) ; \n\taddToExtentHistory ( currentExtent ) ; \n\t} \n"}, {"code": "protected boolean isOutputLineExpected ( final String line , final $F806 expectedPrefixes , final boolean filePathsAreExpected ) { \n\tfinal String trimmed = line != null ? line . trim ( ) : null ; \n\tif $F35028 ( StringUtils , trimmed ) { \n\t\tif ( filePathsAreExpected && isFilePath ( line ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\tif ( expectedPrefixes != null ) { \n\t\t\tfor ( final String prefix : expectedPrefixes ) { \n\t\t\t\tif ( StringUtils . startsWithIgnoreCase ( line , prefix ) ) { \n\t\t\t\t\treturn _BOOL ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static String meterToString ( OFInstructionMeter inst , Logger log ) { \n\treturn STR_SUB_GOTO_METER_METER_ID + NUM00 + Long . toString ( inst . getMeterId ( ) ) ; \n\t} \n"}, {"code": "public boolean isImageCachable ( int w , int h ) { \n\treturn ( w * h ) < maxSingleImagePixelSize ; \n\t} \n"}, {"code": "public static BigInteger sizeOfDirectoryAsBigInteger ( File directory ) { \n\tcheckDirectory ( directory ) ; \n\t$F44946 ( files , directory ) if ( files == null ) { \n\t\treturn BigInteger . ZERO ; \n\t\t} \n\tBigInteger size = BigInteger . ZERO ; \n\tfor ( final File file : files ) { \n\t\ttry { \n\t\t\tif ( ! isSymlink ( file ) ) { \n\t\t\t\tsize = size . add ( BigInteger . valueOf ( sizeOf ( file ) ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F62612 } \n\treturn size ; \n\t} \n"}, {"code": "$F13735 ( prefix , namespace , attName , attValue , xmlWriter ) "}, {"code": "public void freeEntry ( BasicPoolEntry entry ) { \n\tif ( numEntries < NUM00 ) $F1155 ( route ) if ( numEntries <= freeEntries . size ( ) ) $F1155 ( route ) freeEntries . add ( entry ) ; \n\t} \n"}, {"code": "public boolean isIn ( Coords coords ) $F298 ( coordinates , coords ) "}, {"code": "private DialogBaseUnits computeDialogBaseUnits ( FontMetrics metrics ) { \n\tdouble averageCharWidth = computeAverageCharWidth ( metrics , averageCharWidthTestString ) ; \n\tint ascent = metrics . getAscent ( ) ; \n\tdouble height = ascent > NUM00 ? ascent : ascent + ( NUM00 - ascent ) / NUM00 ; \n\tDialogBaseUnits dialogBaseUnits = new DialogBaseUnits ( averageCharWidth , height ) ; \n\tif $F176449 ( LOGGER , Level ) { \n\t\tLOGGER . config ( NUM00 + dialogBaseUnits + NUM00 + metrics . getFont ( ) ) ; \n\t\t} \n\treturn dialogBaseUnits ; \n\t} \n"}, {"code": "public synchronized void close $F72 $F236461 ( writer , ioe ) "}, {"code": "public static boolean isProxyUri ( final String url ) { \n\tnotNull ( url ) ; \n\treturn $F126724 ( url , getRequestHandlerPath ) ; \n\t} \n"}, {"code": "public void addAction ( Action act ) { \n\tif ( act . entry != null && act . entry != this ) { \n\t\tLog . e ( TAG , NUM00 + act . entry . ID + NUM00 + ID ) ; \n\t\t$F665 } \n\tif ( mActions == null ) { \n\t\tmActions = new ArrayList < Action > $F72 ; \n\t\t} \n\tif $F10471 ( mActions ) $F13518 ( Log , TAG ) act . entry = this ; \n\tmActions . add ( act ) ; \n\t} \n"}, {"code": "public abstract Iterable < ? extends CompilationUnitTree > parse $F72 throws IOException ; \n"}, {"code": "private void name ( StringBuilder builder ) { \n\t$F20605 ( name , type ) $F20973 ( name , builder ) } \n"}, {"code": "boolean ensureProcessSizeFits ( final ExecutionUnit process , final Rectangle2D rect ) { \n\tDimension processSize = model . getProcessSize ( process ) ; \n\t$F1933 ( processSize , _BOOL ) $F1933 ( rect , _BOOL ) boolean needsResize = _BOOL ; \n\tdouble processWidth = processSize . getWidth ( ) * ( NUM00 / model . getZoomFactor ( ) ) ; \n\tdouble processHeight = processSize . getHeight ( ) * ( NUM00 / model . getZoomFactor ( ) ) ; \n\tdouble width = processWidth ; \n\tdouble height = processHeight ; \n\tif ( processSize != null ) { \n\t\tif ( processWidth < rect . getMaxX ( ) + ProcessDrawer . GRID_X_OFFSET ) { \n\t\t\tdouble diff = rect . getMaxX ( ) + ProcessDrawer . GRID_X_OFFSET - processWidth ; \n\t\t\tif ( diff > ProcessDrawer . GRID_X_OFFSET ) { \n\t\t\t\twidth += diff ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\twidth += ProcessDrawer . GRID_X_OFFSET ; \n\t\t\t\t} \n\t\t\tneedsResize = _BOOL ; \n\t\t\t} \n\t\tif ( processHeight < rect . getMaxY ( ) + ProcessDrawer . GRID_Y_OFFSET ) { \n\t\t\tdouble diff = rect . getMaxY ( ) + ProcessDrawer . GRID_Y_OFFSET - processHeight ; \n\t\t\tif ( diff > ProcessDrawer . GRID_Y_OFFSET ) { \n\t\t\t\theight += diff ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\theight += ProcessDrawer . GRID_Y_OFFSET ; \n\t\t\t\t} \n\t\t\tneedsResize = _BOOL ; \n\t\t\t} \n\t\tif ( needsResize ) { \n\t\t\tmodel . setProcessWidth ( process , width ) ; \n\t\t\tmodel . setProcessHeight ( process , height ) ; \n\t\t\tbalance ( ) ; \n\t\t\tmodel . fireProcessSizeChanged ( ) ; \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void handleTblHandlersButtonAddRequest ( RequestInvocationEvent event ) throws ModelControlException { \n\ttry { \n\t\tMap values = getValues ( ) ; \n\t\tonBeforeSaveProfile ( values ) ; \n\t\t$F50322 ( setPageSessionAttribute , PROPERTY_ATTRIBUTE , values ) WSAuthNServicesHandlersAddViewBean vb = ( WSAuthNServicesHandlersAddViewBean ) getViewBean ( WSAuthNServicesHandlersAddViewBean . class ) ; \n\t\tunlockPageTrail ( ) ; \n\t\tpassPgSessionMap ( vb ) ; \n\t\t$F50333 ( vb , getRequestContext ) } \n\t$F50339 ( setInlineAlertMessage , CCAlert , e ) } \n"}, {"code": "public void reduceDL ( double expFPRate , boolean checkErr ) { \n\tboolean needUpdate = _BOOL ; \n\t$F1993 ( rulesetStat ) for ( $F2277 ( j , m_SimpleStats ) ) { \n\t\t$F2280 ( rulesetStat , m_SimpleStats , j ) $F2280 ( rulesetStat , m_SimpleStats , j ) $F2280 ( rulesetStat , m_SimpleStats , j ) if $F2283 ( j , m_SimpleStats ) { \n\t\t\trulesetStat [ NUM00 ] = $F2278 ( m_SimpleStats , j ) ; \n\t\t\trulesetStat [ NUM00 ] = $F2278 ( m_SimpleStats , j ) ; \n\t\t\trulesetStat [ NUM00 ] = $F2278 ( m_SimpleStats , j ) ; \n\t\t\t} \n\t\t} \n\tfor ( $F5373 ( k , m_SimpleStats ) ) { \n\t\t$F1986 ruleStat = m_SimpleStats . get ( k ) ; \n\t\tdouble ifDeleted = potential ( k , expFPRate , rulesetStat , ruleStat , checkErr ) ; \n\t\tif $F2292 ( Double , ifDeleted ) { \n\t\t\tif ( k == $F113103 ( m_SimpleStats ) ) $F5795 ( removeLast ) else { \n\t\t\t\tm_Ruleset . remove ( k ) ; \n\t\t\t\tneedUpdate = _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tif ( needUpdate ) { \n\t\tm_Filtered = null ; \n\t\tm_SimpleStats = null ; \n\t\tcountData ( ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void onDrawFrame ( GL10 gl10 ) { \n\t$F14648 ( GLES20 ) $F14651 ( GLES20 ) $F14653 ( GLES20 ) $F14655 ( GLES20 ) $F14657 ( GLES20 ) GLES20 . glBlendFunc ( GLES20 . GL_SRC_ALPHA , GLES20 . GL_ONE_MINUS_SRC_ALPHA ) ; \n\t$F14662 ( currentTimeMillis , System ) updateWithDelta ( currentTimeMillis - lastTimeMillis ) ; \n\tlastTimeMillis = currentTimeMillis ; \n\t} \n"}, {"code": "public void removeLineHighlight ( Object tag ) { \n\tif ( tag instanceof LineHighlightInfo ) { \n\t\tlineHighlights . remove ( tag ) ; \n\t\trepaintLine ( ( LineHighlightInfo ) tag ) ; \n\t\t} \n\t} \n"}, {"code": "private Element createSingleLogOutForCastleAsIDP ( String binding ) throws Exception { \n\tString entityID = idmClient . getEntityID ( tenantName ) ; \n\tString ssoLoc = convertToIPV6ShortForm ( entityID ) ; \n\t$F13265 ( ssoLoc , tenantName ) $F57196 ( sloLoc , ssoLoc ) Element slosEle = createEndPoint ( SAMLNames . SLOS , binding , sloLoc , null ) ; \n\treturn slosEle ; \n\t} \n"}, {"code": "public static void unregisterTransportMBean ( String containerName ) throws Exception { \n\tMBeanServer mBeanServer = getMBeanServer ( containerName ) ; \n\t$F8249 ( mBeanServer ) ObjectName transportMBeanObjectName = TransportConstants . createTransportMBeanObjectName ( containerName ) ; \n\tif ( mBeanServer . isRegistered ( transportMBeanObjectName ) ) { \n\t\tmBeanServer . unregisterMBean ( transportMBeanObjectName ) ; \n\t\t$F432107 ( _logger , Level ) } \n\t} \n"}, {"code": "public void addNodesInDocOrder ( NodeIterator iterator , XPathContext support ) { \n\t$F132452 ( m_mutable , XSLMessages , XPATHErrorResources ) Node node ; \n\twhile ( null != $F161934 ( node , iterator ) ) { \n\t\taddNodeInDocOrder ( node , support ) ; \n\t\t} \n\t} \n"}, {"code": "protected void uninstallDefaults $F72 { \n\tSeaGlassContext context = getContext ( splitPane , ENABLED ) ; \n\tstyle . uninstallDefaults ( context ) ; \n\t$F355 ( context ) style = null ; \n\tcontext = getContext ( splitPane , Region . SPLIT_PANE_DIVIDER , ENABLED ) ; \n\tdividerStyle . uninstallDefaults ( context ) ; \n\t$F355 ( context ) dividerStyle = null ; \n\tsuper . uninstallDefaults ( ) ; \n\t} \n"}, {"code": "public void subtractAmount ( final String amount ) { \n\t$F46427 ( subtractAmount , Integer , amount ) } \n"}, {"code": "private synchronized void makeCompositeBuilder $F72 throws InvalidObjectException { \n\t$F57099 ( compositeBuilder ) $F6969 targetClass = ( $F6969 ) getJavaType ( ) ; \n\tCompositeBuilder [ ] [ ] builders = { \n\t\t{ \n\t\t\tnew CompositeBuilderViaFrom ( targetClass , itemNames ) } \n\t\t, { \n\t\t\tnew CompositeBuilderViaConstructor ( targetClass , itemNames ) } \n\t\t, { \n\t\t\tnew CompositeBuilderCheckGetters ( targetClass , itemNames , getterMappings ) , new CompositeBuilderViaSetters ( targetClass , itemNames ) , new CompositeBuilderViaProxy ( targetClass , itemNames ) } \n\t\t} \n\t; \n\tCompositeBuilder foundBuilder = null ; \n\t$F1121 ( whyNots ) Throwable possibleCause = null ; \n\tfind : for ( CompositeBuilder [ ] relatedBuilders : builders ) { \n\t\tfor ( $F1139 ( i , relatedBuilders ) ) { \n\t\t\tCompositeBuilder builder = relatedBuilders [ i ] ; \n\t\t\tString whyNot = builder . applicable ( getters ) ; \n\t\t\tif ( whyNot == null ) { \n\t\t\t\tfoundBuilder = builder ; \n\t\t\t\tbreak find ; \n\t\t\t\t} \n\t\t\tThrowable cause = builder . possibleCause ( ) ; \n\t\t\t$F19621 ( cause , possibleCause ) if $F4012 ( whyNot ) { \n\t\t\t\t$F275070 ( whyNots ) whyNots . append ( whyNot ) ; \n\t\t\t\tif ( i == NUM00 ) $F597 } \n\t\t\t} \n\t\t} \n\tif ( foundBuilder == null ) { \n\t\tString msg = $F10073 ( targetClass , whyNots ) ; \n\t\tif ( possibleCause != null ) msg += NUM00 ; \n\t\tthrow invalidObjectException ( msg , possibleCause ) ; \n\t\t} \n\tcompositeBuilder = foundBuilder ; \n\t} \n"}, {"code": "public void append ( CharSequence s ) $F288 ( text , s ) "}, {"code": "public void invalidateAll $F72 { \n\t$F8249 ( m_tuples ) for ( $F9808 ( i , m_tuples ) ) invalidate ( i ) ; \n\t} \n"}, {"code": "public void add ( final long addr ) $F207 ( addrs , addr ) "}, {"code": "$F30902 public void test_wrap_ByteBuffer_ByteBuffer_04 $F72 { \n\tString host = NUM00 ; \n\tint port = NUM00 ; \n\t$F30909 ( bbs , ByteBuffer ) $F30909 ( bbd , ByteBuffer ) SSLEngine sse = getEngine ( host , port ) ; \n\ttry { \n\t\tsse . wrap ( bbs , bbd ) ; \n\t\tfail ( NUM00 ) ; \n\t\t} \n\t$F30913 $F30915 ( fail , e ) } \n"}, {"code": "public static boolean isBlackListed ( $F2304 Size size , $F2304 String blacklistString ) { \n\t$F6542 ( blacklistStringArray , blacklistString ) $F50086 ( blacklistStringArray , _BOOL ) $F2689 blacklistedSizes = new HashSet ( Lists . newArrayList ( blacklistStringArray ) ) ; \n\treturn isBlackListed ( size , blacklistedSizes ) ; \n\t} \n"}, {"code": "static private void _writeDecRef ( Writer out , char ch ) throws IOException { \n\tif ( ch == NUM00 ) { \n\t\t$F3410 ( out ) $F665 } \n\t$F3410 ( out ) $F29204 ( i , ch ) if ( i > NUM00 ) { \n\t\tout . write ( NUM00 + ( i / NUM00 ) ) ; \n\t\ti = i % NUM00 ; \n\t\tout . write ( NUM00 + ( i / NUM00 ) ) ; \n\t\ti = i % NUM00 ; \n\t\tout . write ( NUM00 + ( i / NUM00 ) ) ; \n\t\ti = i % NUM00 ; \n\t\tout . write ( NUM00 + ( i / NUM00 ) ) ; \n\t\ti = i % NUM00 ; \n\t\t$F62201 ( out , i ) } \n\telse if ( i > NUM00 ) { \n\t\tout . write ( NUM00 + ( i / NUM00 ) ) ; \n\t\ti = i % NUM00 ; \n\t\tout . write ( NUM00 + ( i / NUM00 ) ) ; \n\t\ti = i % NUM00 ; \n\t\tout . write ( NUM00 + ( i / NUM00 ) ) ; \n\t\ti = i % NUM00 ; \n\t\t$F62201 ( out , i ) } \n\telse { \n\t\tout . write ( NUM00 + ( i / NUM00 ) ) ; \n\t\ti = i % NUM00 ; \n\t\tout . write ( NUM00 + ( i / NUM00 ) ) ; \n\t\ti = i % NUM00 ; \n\t\t$F62201 ( out , i ) } \n\t$F3410 ( out ) } \n"}, {"code": "protected $F96 inputStreamToByteArray ( InputStream is ) throws IOException { \n\t$F1538 ( bos ) $F7468 ( next , is ) while ( next > - NUM00 ) { \n\t\tbos . write ( next ) ; \n\t\t$F10201 ( next , is ) } \n\t$F1206 ( bos ) $F59 ( is ) $F11316 ( bos ) } \n"}, {"code": "$F1 public String toString $F72 { \n\tObject value = get ( ) ; \n\treturn $F58366 ( value ) ; \n\t} \n"}, {"code": "private boolean isAReferenceTag ( String str ) { \n\t$F1933 ( str , _BOOL ) return str . indexOf ( NUM00 ) == NUM00 && str . lastIndexOf ( NUM00 ) == $F45793 ( str ) ; \n\t} \n"}, {"code": "protected static String encode ( String url ) { \n\t$F83 ( encoder ) for ( $F2998 ( chr , url ) ) { \n\t\tbyte chrByte = ( byte ) chr ; \n\t\tif ( ( chrByte <= NUM00 || chrByte >= NUM00 || chr == NUM00 || chr == NUM00 ) ) $F181853 ( encoder , String , chrByte ) else $F288 ( encoder , chr ) } \n\t$F92 ( encoder ) } \n"}, {"code": "public void testX509CRLEntry $F72 { \n\tTBTCRLEntry tbt_crlentry = new TBTCRLEntry $F72 ; \n\tassertNull ( tbt_crlentry . getCertificateIssuer ( ) ) ; \n\tassertNull ( tbt_crlentry . getCriticalExtensionOIDs ( ) ) ; \n\ttry { \n\t\t$F196480 ( assertNull , tbt_crlentry ) ; \n\t\t} \n\tcatch ( CRLException e ) $F32309 ( fail , e ) assertNull ( tbt_crlentry . getNonCriticalExtensionOIDs ( ) ) ; \n\tassertNull ( tbt_crlentry . getRevocationDate ( ) ) ; \n\t} \n"}, {"code": "public static long now $F72 { \n\t$F21879 ( System ) } \n"}, {"code": "$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel ) "}, {"code": "private BinlogPosition findHeartbeat ( MaxwellReplicator r ) throws Exception { \n\tr . startReplicator ( ) ; \n\tfor ( RowMap row = r . getRow ( ) ; \n\trow != null ; \n\trow = r . getRow ( ) ) { \n\t\tif ( Objects . equals ( r . getLastHeartbeatRead ( ) , recoveryInfo . heartbeat ) ) return row . getPosition ( ) ; \n\t\t} \n\t$F1274 } \n"}, {"code": "private Configure $F72 { \n\t$F2697 ( p ) $F28017 ( args ) args . putAll ( System . getenv ( ) ) ; \n\targs . putAll ( System . getProperties ( ) ) ; \n\tp . putAll ( args ) ; \n\tthis . property = p ; \n\treload ( _BOOL ) ; \n\t} \n"}, {"code": "private void handleTruncatedInfo ( final StatementInfo info ) throws SQLException { \n\tfinal $F96 originalInfo = statement . getStatementInfoRequestItems ( ) ; \n\tfinal $F96 newInfoItems = new byte [ originalInfo . length + NUM00 * NUM00 ] ; \n\tint newIndex = NUM00 ; \n\tfor ( final byte infoItem : originalInfo ) { \n\t\tassert newIndex < newInfoItems . length : NUM00 ; \n\t\tswitch ( infoItem ) { \n\t\t\tcase ISCConstants . isc_info_sql_select : case ISCConstants . isc_info_sql_bind : final RowDescriptorBuilder currentBuilder = infoItem == ISCConstants . isc_info_sql_select ? info . fieldBuilder : info . parameterBuilder ; \n\t\t\tfinal int descriptorIndex = currentBuilder != null ? currentBuilder . getFirstUnprocessedIndex ( ) + NUM00 : NUM00 ; \n\t\t\tnewInfoItems [ newIndex ++ ] = ISCConstants . isc_info_sql_sqlda_start ; \n\t\t\tnewInfoItems [ newIndex ++ ] = NUM00 ; \n\t\t\t$F189022 ( newInfoItems , newIndex , descriptorIndex ) $F157410 ( newInfoItems , newIndex , descriptorIndex ) newInfoItems [ newIndex ++ ] = infoItem ; \n\t\t\t$F597 $F1267 newInfoItems [ newIndex ++ ] = infoItem ; \n\t\t\t$F597 } \n\t\t} \n\tassert newIndex == newInfoItems . length : NUM00 ; \n\tinfo . requestBufferSize = Math . min ( NUM00 * info . requestBufferSize , statement . getMaxSqlInfoSize ( ) ) ; \n\tinfo . buffer = statement . getSqlInfo ( newInfoItems , info . requestBufferSize ) ; \n\tinfo . currentIndex = NUM00 ; \n\t} \n"}, {"code": "public static String stripFileExtension ( String name ) { \n\t$F24867 ( pos , name ) if ( pos > NUM00 & $F1093 ( pos , name ) ) $F35298 ( name , pos ) return name ; \n\t} \n"}, {"code": "private static void pushTransactionStartStamp ( Transaction t ) { \n\tMap < Transaction , Timestamp > map = suspendedTxStartStamps . get ( ) ; \n\tTimestamp stamp = transactionStartStamp . get ( ) ; \n\tif ( stamp != null ) $F1717 ( map , t , stamp ) else { \n\t\t$F172017 ( Debug , module ) } \n\t} \n"}, {"code": "private int indexedBinarySearch ( List < S2CellId > l , S2CellId key , int low ) { \n\t$F40484 ( high , l ) while ( low <= high ) { \n\t\tint mid = ( low + high ) > > NUM00 ; \n\t\tS2CellId midVal = l . get ( mid ) ; \n\t\t$F58436 ( cmp , midVal , key ) if ( cmp < NUM00 ) { \n\t\t\tlow = mid + NUM00 ; \n\t\t\t} \n\t\telse if ( cmp > NUM00 ) { \n\t\t\thigh = mid - NUM00 ; \n\t\t\t} \n\t\telse { \n\t\t\treturn mid ; \n\t\t\t} \n\t\t} \n\treturn low ; \n\t} \n"}, {"code": "public Variable [ ] findLocalArrays $F72 { \n\tList $F30094 arrays = new ArrayList $F30094 $F72 ; \n\tfor ( ListIterator $F30094 $F30104 ( iterator , fLocalVariables ) ; \n\titerator . hasPrevious ( ) ; \n\t) { \n\t\tVariable localVariable = iterator . previous ( ) ; \n\t\tif $F6974 ( localVariable ) arrays . add ( localVariable ) ; \n\t\t} \n\treturn arrays . toArray ( new Variable $F2313 ( arrays ) ) ; \n\t} \n"}, {"code": "public static int indexOfJavaLikeExtension ( String fileName ) { \n\t$F1749 ( fileNameLength , fileName ) $F10849 javaLikeExtensions = getJavaLikeExtensions ( ) ; \n\textensions : for ( $F21059 ( i , length , javaLikeExtensions ) ) { \n\t\t$F16051 ( extension , javaLikeExtensions , i ) int extensionLength = extension . length ; \n\t\tint extensionStart = fileNameLength - extensionLength ; \n\t\tint dotIndex = extensionStart - NUM00 ; \n\t\t$F166042 ( dotIndex ) if $F20317 ( fileName , dotIndex ) $F598 for ( $F119 ( j , extensionLength ) ) { \n\t\t\tif ( fileName . charAt ( extensionStart + j ) != extension [ j ] ) continue extensions ; \n\t\t\t} \n\t\treturn dotIndex ; \n\t\t} \n\t$F150 } \n"}, {"code": "public ShapeTileSimplex remove_border_line ( int p_no ) { \n\tif ( p_no < NUM00 || p_no >= lines_size ( ) ) { \n\t\treturn this ; \n\t\t} \n\tArrayList $F66714 new_arr = new ArrayList $F66714 ( lines_size ( ) ) ; \n\tnew_arr . addAll ( lines_list ) ; \n\tnew_arr . remove ( p_no ) ; \n\treturn new ShapeTileSimplex ( new_arr ) ; \n\t} \n"}, {"code": "protected boolean waitBeforeExecution $F72 throws InterruptedException { \n\treturn _BOOL ; \n\t} \n"}, {"code": "static boolean isValidStreamingUrl ( String url ) { \n\treturn url != null && url . matches ( NUM00 ) ; \n\t} \n"}, {"code": "public WebServiceProxy ( URL serverURL , ExecutorService executorService ) { \n\tthis ( serverURL , executorService , NUM00 , NUM00 ) ; \n\t} \n"}, {"code": "private static $F96 exposeByteArrayInputStreamBytes ( ByteArrayInputStream bais ) { \n\t$F96 buffer ; \n\tsynchronized ( bais ) { \n\t\t$F96 buf ; \n\t\tint pos ; \n\t\ttry { \n\t\t\t$F116458 ( buf , BAIS_BUF , bais ) ; \n\t\t\tpos = BAIS_POS . getInt ( bais ) ; \n\t\t\t} \n\t\t$F180169 ( iae ) $F115 ( available , bais ) if ( pos == NUM00 && buf . length == available ) { \n\t\t\tbuffer = buf ; \n\t\t\t} \n\t\telse $F65231 ( buffer , available , System , buf , pos ) bais . skip ( available ) ; \n\t\t} \n\treturn buffer ; \n\t} \n"}, {"code": "private void restoreData $F72 { \n\tMap $F6251 map = preferenceUtils . getAll ( ) ; \n\t$F23720 ( strings , map ) for ( String string : strings ) { \n\t\tif ( string . startsWith ( SharedPreferenceUtils . keyTestMode ) ) { \n\t\t\tpreferenceUtils . restoreKey ( string ) ; \n\t\t\t} \n\t\t} \n\trefreshKeyValues ( ) ; \n\t} \n"}, {"code": "public String putImage ( String theFolder , String theImageName , Bitmap theBitmap ) { \n\tif $F154085 ( theFolder , theImageName , theBitmap ) $F1274 this . DEFAULT_APP_IMAGEDATA_DIRECTORY = theFolder ; \n\tString mFullPath = setupFullPath ( theImageName ) ; \n\tif $F1264 ( mFullPath ) { \n\t\tlastImagePath = mFullPath ; \n\t\tsaveBitmap ( mFullPath , theBitmap ) ; \n\t\t} \n\treturn mFullPath ; \n\t} \n"}, {"code": "public $F6969 type $F72 { \n\tif ( isClass ) { \n\t\treturn $F146471 ( object ) ; \n\t\t} \n\telse { \n\t\treturn object . getClass ( ) ; \n\t\t} \n\t} \n"}, {"code": "void addToExternalCSS ( CSSElement cssElement ) $F54891 ( externalCSS , cssElement ) "}, {"code": "$F16994 ( buf ) "}, {"code": "private void remove ( String world , PermissionHolder holder , String permission ) { \n\ttry { \n\t\tif $F77244 ( world ) { \n\t\t\tholder . unsetPermission ( permission , server , world ) ; \n\t\t\t} \n\t\telse { \n\t\t\tholder . unsetPermission ( permission , server ) ; \n\t\t\t} \n\t\t} \n\tcatch ( ObjectLacksException ignored ) $F845 save ( holder ) ; \n\t} \n"}, {"code": "private void action_treeAddAll $F72 { \n\t$F973 ( log ) ListModel model = centerList . getModel ( ) ; \n\t$F17900 ( size , model ) int index = - NUM00 ; \n\tfor ( index = NUM00 ; \n\tindex < size ; \n\tindex ++ ) { \n\t\tListItem item = ( ListItem ) model . getElementAt ( index ) ; \n\t\taction_treeAdd ( item ) ; \n\t\t} \n\t} \n"}, {"code": "private ConcurrentSkipListMap . Node $F9340 hiNode $F72 { \n\tif ( hi == null ) return m . findLast ( ) ; \n\telse if ( hiInclusive ) return m . findNear ( hi , LT | EQ ) ; \n\telse return m . findNear ( hi , LT ) ; \n\t} \n"}, {"code": "public static final ImagePoint convertPoint ( MapPoint mapPoint , MapEnvelope mapEnv , int imgHeight , int imgWidth ) { \n\tlong imageY = Math . round ( convertY ( mapPoint , mapEnv , imgHeight ) ) ; \n\tlong imageX = Math . round ( convertX ( mapPoint , mapEnv , imgWidth ) ) ; \n\treturn new ImagePoint ( imageX , imageY ) ; \n\t} \n"}, {"code": "private void checkUsingAdaptation $F72 { \n\tif $F31483 ( tsUseAdaptation ) $F7715 ( tfAdaptationTime , _BOOL , tfAdaptationParam ) else $F7715 ( tfAdaptationTime , _BOOL , tfAdaptationParam ) } \n"}, {"code": "public String combineMix $F72133 ( files , outFile ) { \n\t$F8728 ( cmd ) cmd . add ( soxBin ) ; \n\t$F18793 ( cmd ) for ( String file : files ) { \n\t\t$F18793 ( cmd ) $F18793 ( cmd ) cmd . add ( file ) ; \n\t\t} \n\tcmd . add ( outFile ) ; \n\ttry { \n\t\tint rc = execSox ( cmd , callback ) ; \n\t\tif ( rc != NUM00 ) { \n\t\t\toutFile = null ; \n\t\t\t} \n\t\t} \n\t$F12241 ( e ) $F3101 ( e ) return outFile ; \n\t} \n"}, {"code": "public Quarter ( int quarter , Year year ) { \n\tif $F61167 ( quarter , FIRST_QUARTER , LAST_QUARTER ) $F825 this . year = ( short ) year . getYear ( ) ; \n\tthis . quarter = ( byte ) quarter ; \n\t$F53414 ( peg , Calendar ) } \n"}, {"code": "public void sendRequestVoteRequest ( boolean isPrevote ) throws GondolaException { \n\tif ( ! enabled || masterId >= NUM00 ) $F932 if ( ! isPrevote ) { \n\t\tcurrentTerm ++ ; \n\t\tvotedFor = - NUM00 ; \n\t\tsave ( currentTerm , memberId ) ; \n\t\tvotedFor = memberId ; \n\t\t} \n\tprevotesOnly = isPrevote ; \n\tMessage message = pool . checkout ( ) ; \n\ttry { \n\t\tsaveQueue . getLatest ( savedRid ) ; \n\t\tmessage . requestVoteRequest ( memberId , currentTerm , isPrevote , savedRid ) ; \n\t\t$F22620 ( peers ) } \n\t$F33835 ( message ) prevoteTs = clock . now ( ) + ( long ) ( ( Math . random ( ) * prevotePeriod ) ) ; \n\t$F228945 ( isPrevote , prevoteTs , electionTimeout ) } \n"}, {"code": "private $F3803 filterTargetsFromResponse ( $F2689 varrayTaggedPortWWNs , $F224310 ( initiatorTargetMap ) , String initiatorKey ) { \n\t$F980 ( log ) $F10144 ( filteredTargetList ) $F64948 ( targetPortListFromResponse , initiatorTargetMap , initiatorKey ) for ( String portWWN : targetPortListFromResponse ) { \n\t\tif ( varrayTaggedPortWWNs . contains ( portWWN ) || $F131344 ( varrayTaggedPortWWNs , portWWN ) ) { \n\t\t\tfilteredTargetList . add ( portWWN . toUpperCase ( ) ) ; \n\t\t\t} \n\t\t} \n\t$F980 ( log ) return filteredTargetList ; \n\t} \n"}, {"code": "public PilotingRollData checkManeuver ( MoveStep step , EntityMovementType overallMoveType ) { \n\tPilotingRollData roll = getBasePilotingRoll ( overallMoveType ) ; \n\tif ( ( step == null ) || ( step . getType ( ) != MoveStepType . MANEUVER ) ) { \n\t\troll . addModifier ( TargetRoll . CHECK_FALSE , NUM00 ) ; \n\t\treturn roll ; \n\t\t} \n\tboolean sideSlipMod = ( this instanceof ConvFighter ) && isVSTOL ( ) ; \n\troll . append ( new PilotingRollData ( getId ( ) , ManeuverType . getMod ( step . getManeuverType ( ) , sideSlipMod ) , ManeuverType . getTypeName ( step . getManeuverType ( ) ) + NUM00 ) ) ; \n\treturn roll ; \n\t} \n"}, {"code": "public static $F3803 parseProgramArgs ( ILaunchConfiguration launchConfig ) throws CoreException { \n\treturn parseArgs ( launchConfig . getAttribute ( IJavaLaunchConfigurationConstants . ATTR_PROGRAM_ARGUMENTS , NUM00 ) ) ; \n\t} \n"}, {"code": "public abstract T decodeValue ( String value ) ; \n"}, {"code": "$F5803 ( drawable , getDrawable , matrix , prevMatrix , drawableWidth , drawableHeight , scaleX , viewWidth , scaleY , viewHeight , mScaleType , CENTER , CENTER_CROP , Math , CENTER_INSIDE , FIT_CENTER , FIT_XY , redundantXSpace , redundantYSpace , matchViewWidth , matchViewHeight , isZoomed , imageRenderedAtLeastOnce , normalizedScale , prevMatchViewWidth , prevMatchViewHeight , savePreviousImageValues , m , Matrix , transX , transY , prevActualWidth , actualWidth , getImageWidth , translateMatrixAfterRotate , prevViewWidth , prevActualHeight , actualHeight , getImageHeight , prevViewHeight , fixTrans , setImageMatrix ) "}, {"code": "$F1 public synchronized MXBeanMapping mappingForType ( Type objType , MXBeanMappingFactory factory ) throws OpenDataException { \n\tif $F1710 ( inProgress , objType ) { \n\t\tthrow new OpenDataException ( NUM00 + typeName ( objType ) ) ; \n\t\t} \n\tMXBeanMapping mapping ; \n\tmapping = getMapping ( objType ) ; \n\t$F60730 ( mapping ) $F22747 ( inProgress , objType ) try { \n\t\tmapping = makeMapping ( objType , factory ) ; \n\t\t} \n\tcatch ( OpenDataException e ) { \n\t\tthrow openDataException ( NUM00 + typeName ( objType ) , e ) ; \n\t\t} \n\tfinally $F106 ( inProgress , objType ) putMapping ( objType , mapping ) ; \n\treturn mapping ; \n\t} \n"}, {"code": "public void testCase18 $F72 { \n\t$F45030 $F45033 $F15143 int aSign = NUM00 ; \n\tint bSign = NUM00 ; \n\t$F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F3024 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) } \n"}, {"code": "public static Element createElementInSignature11Space ( Document doc , String elementName ) { \n\t$F28724 ( doc ) if $F38892 ( ds11Prefix ) { \n\t\treturn doc . createElementNS ( Constants . SignatureSpec11NS , elementName ) ; \n\t\t} \n\treturn doc . createElementNS ( Constants . SignatureSpec11NS , ds11Prefix + NUM00 + elementName ) ; \n\t} \n"}, {"code": "public void removeElementAt ( final int index ) $F106 ( entries , index ) "}, {"code": "public static void c2ir ( double $F184368 , int nc , double hh [ ] , int leng ) { \n\thh [ NUM00 ] = Math . exp ( c [ NUM00 ] ) ; \n\tfor ( $F119 ( n , leng ) ) { \n\t\tdouble d = NUM00 ; \n\t\tint upl = ( n >= nc ) ? nc - NUM00 : n ; \n\t\tfor ( $F9993 ( k , upl ) ) d += k * c [ k ] * hh [ n - k ] ; \n\t\thh [ n ] = d / n ; \n\t\t} \n\t} \n"}, {"code": "public void close $F72 { \n\t_ncGuards = null ; \n\t} \n"}, {"code": "public void processIndication ( $F10274 ( cimNotification ) ) { \n\tString cimIndicationType = getCimIndicationType ( cimNotification ) ; \n\tif ( _monitoringPropertiesLoader . isToLogIndications ( ) ) { \n\t\t_logger . debug ( NUM00 + getIndicationData ( cimNotification ) ) ; \n\t\t} \n\tif ( cimIndicationType != null && cimIndicationType . equals ( CimConstants . CIM_ALERT_INDICATION_TYPE ) ) { \n\t\tif ( _monitoringPropertiesLoader . isToLogIndications ( ) ) $F981 ( _logger ) _alertProcessor . processIndication ( cimNotification ) ; \n\t\t} \n\telse if ( cimIndicationType != null && cimIndicationType . equals ( CimConstants . CIM_INST_INDICATION_TYPE ) ) { \n\t\tif ( _monitoringPropertiesLoader . isToLogIndications ( ) ) $F981 ( _logger ) _eventProcessor . processIndication ( cimNotification ) ; \n\t\t} \n\telse { \n\t\tif ( _monitoringPropertiesLoader . isToLogIndications ( ) ) $F11589 ( _logger , cimIndicationType ) } \n\t} \n"}, {"code": "public ReplicationJob createJobForCopyTable ( long auditLogId , long auditLogEntryCreateTime , Table table ) throws StateUpdateException { \n\tReplicationOperation replicationOperation = HiveUtils . isPartitioned ( table ) ? ReplicationOperation . COPY_PARTITIONED_TABLE : ReplicationOperation . COPY_UNPARTITIONED_TABLE ; \n\t$F35131 ( extras ) extras . put ( PersistedJobInfo . AUDIT_LOG_ID_EXTRAS_KEY , Long . toString ( auditLogId ) ) ; \n\textras . put ( PersistedJobInfo . AUDIT_LOG_ENTRY_CREATE_TIME_KEY , Long . toString ( auditLogEntryCreateTime ) ) ; \n\tPersistedJobInfo persistedJobInfo = jobInfoStore . resilientCreate ( replicationOperation , ReplicationStatus . PENDING , ReplicationUtils . getLocation ( table ) , srcCluster . getName ( ) , new HiveObjectSpec ( table ) , Collections . emptyList ( ) , ReplicationUtils . getTldt ( table ) , Optional . empty ( ) , Optional . empty ( ) , extras ) ; \n\t$F212639 ( spec , table ) Optional $F72371 tableLocation = ReplicationUtils . getLocation ( table ) ; \n\tswitch ( replicationOperation ) { \n\t\tcase COPY_UNPARTITIONED_TABLE : return new ReplicationJob ( conf , new CopyUnpartitionedTableTask ( conf , destinationObjectFactory , objectConflictHandler , srcCluster , destCluster , spec , tableLocation , directoryCopier , _BOOL ) , onStateChangeHandler , persistedJobInfo ) ; \n\t\tcase COPY_PARTITIONED_TABLE : return new ReplicationJob ( conf , new CopyPartitionedTableTask ( conf , destinationObjectFactory , objectConflictHandler , srcCluster , destCluster , spec , tableLocation ) , onStateChangeHandler , persistedJobInfo ) ; \n\t\t$F6634 ( replicationOperation ) } \n\t} \n"}, {"code": "$F47733 ( reader , writer , buffer , count ) "}, {"code": "synchronized public void releaseXMLReader ( XMLReader reader ) { \n\tif ( m_readerManager != null ) { \n\t\tm_readerManager . releaseXMLReader ( reader ) ; \n\t\t} \n\t} \n"}, {"code": "public int unFinishSize $F72 $F1652 ( mUnFinishQueue ) "}, {"code": "public void addSample ( int weight , float value ) { \n\tensureSortedByIndex ( ) ; \n\tSample newSample = recycledSampleCount > NUM00 ? recycledSamples [ -- recycledSampleCount ] : new Sample $F72 ; \n\tnewSample . index = nextSampleIndex ++ ; \n\tnewSample . weight = weight ; \n\tnewSample . value = value ; \n\tsamples . add ( newSample ) ; \n\ttotalWeight += weight ; \n\twhile ( totalWeight > maxWeight ) { \n\t\tint excessWeight = totalWeight - maxWeight ; \n\t\tSample oldestSample = samples . get ( NUM00 ) ; \n\t\tif ( oldestSample . weight <= excessWeight ) { \n\t\t\ttotalWeight -= oldestSample . weight ; \n\t\t\t$F86372 ( samples ) if ( recycledSampleCount < MAX_RECYCLED_SAMPLES ) $F52339 ( recycledSamples , recycledSampleCount , oldestSample ) } \n\t\telse { \n\t\t\toldestSample . weight -= excessWeight ; \n\t\t\ttotalWeight -= excessWeight ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void specialisedPredicates $F72 { \n\tDoublePredicate doublePredicate = null ; \n\tLongPredicate longPredicate = null ; \n\t} \n"}, {"code": "private static final synchronized int nextPoolId $F72 $F124417 ( poolNumberSequence ) "}, {"code": "public static boolean secKeyVerify $F97 ( seckey ) { \n\tPreconditions . checkArgument ( seckey . length == NUM00 ) ; \n\tByteBuffer byteBuff = nativeECDSABuffer . get ( ) ; \n\tif ( byteBuff == null || byteBuff . capacity ( ) < seckey . length ) { \n\t\t$F67586 ( byteBuff , ByteBuffer , seckey ) $F16706 ( byteBuff , ByteOrder ) nativeECDSABuffer . set ( byteBuff ) ; \n\t\t} \n\t$F23501 ( byteBuff ) byteBuff . put ( seckey ) ; \n\t$F8934 ( r ) try { \n\t\treturn secp256k1_ec_seckey_verify ( byteBuff , Secp256k1Context . getContext ( ) ) == NUM00 ; \n\t\t} \n\t$F796 ( r ) } \n"}, {"code": "public TreeNodeIterator ( Node root , boolean preorder ) { \n\tm_preorder = preorder ; \n\tm_root = root ; \n\t$F13241 ( m_stack ) m_stack . add ( root ) ; \n\tif ( ! preorder ) { \n\t\tfor ( Node n = root . getChild ( NUM00 ) ; \n\t\tn != null ; \n\t\tn = n . getChild ( NUM00 ) ) m_stack . add ( n ) ; \n\t\t} \n\t} \n"}, {"code": "public static WritableNativeArray makeNativeArray ( List objects ) { \n\tWritableNativeArray nativeArray = new WritableNativeArray $F72 ; \n\t$F1933 ( objects , nativeArray ) for ( Object elem : objects ) { \n\t\telem = makeNativeObject ( elem ) ; \n\t\tif ( elem == null ) { \n\t\t\tnativeArray . pushNull ( ) ; \n\t\t\t} \n\t\telse if ( elem instanceof Boolean ) { \n\t\t\tnativeArray . pushBoolean ( ( Boolean ) elem ) ; \n\t\t\t} \n\t\telse if ( elem instanceof Integer ) { \n\t\t\tnativeArray . pushInt ( ( Integer ) elem ) ; \n\t\t\t} \n\t\telse if ( elem instanceof Double ) { \n\t\t\tnativeArray . pushDouble ( ( Double ) elem ) ; \n\t\t\t} \n\t\telse if ( elem instanceof String ) { \n\t\t\tnativeArray . pushString ( ( String ) elem ) ; \n\t\t\t} \n\t\telse if ( elem instanceof WritableNativeArray ) { \n\t\t\tnativeArray . pushArray ( ( WritableNativeArray ) elem ) ; \n\t\t\t} \n\t\telse if ( elem instanceof WritableNativeMap ) { \n\t\t\tnativeArray . pushMap ( ( WritableNativeMap ) elem ) ; \n\t\t\t} \n\t\telse { \n\t\t\tthrow new IllegalArgumentException $F93485 ( elem ) ; \n\t\t\t} \n\t\t} \n\treturn nativeArray ; \n\t} \n"}, {"code": "public static BigInteger sizeOfDirectoryAsBigInteger ( File directory ) { \n\tcheckDirectory ( directory ) ; \n\t$F44946 ( files , directory ) if ( files == null ) { \n\t\treturn BigInteger . ZERO ; \n\t\t} \n\tBigInteger size = BigInteger . ZERO ; \n\tfor ( final File file : files ) { \n\t\ttry { \n\t\t\tif ( ! isSymlink ( file ) ) { \n\t\t\t\tsize = size . add ( BigInteger . valueOf ( sizeOf ( file ) ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F62612 } \n\treturn size ; \n\t} \n"}, {"code": "$F1 public void nodeChanged $F72 { \n\t$F973 ( log ) wakeup ( ) ; \n\t} \n"}, {"code": "private static NodePair splitBlock ( final View view , final Function function , final CodeNode node , final Instruction instruction ) { \n\tboolean before = _BOOL ; \n\tfinal List $F12038 beforeInstructions = new $F241341 $F72 ; \n\tfinal List $F12038 afterInstructions = new $F241341 $F72 ; \n\tfor ( final Instruction nodeInstruction : node . getInstructions ( ) ) { \n\t\t$F28618 ( before , beforeInstructions , nodeInstruction , afterInstructions ) $F52555 ( nodeInstruction , instruction , before , _BOOL ) } \n\tif $F2979 ( afterInstructions ) { \n\t\treturn new NodePair ( node , null ) ; \n\t\t} \n\telse { \n\t\tfinal CodeNode firstNode = view . createCodeNode ( function , beforeInstructions ) ; \n\t\tfinal CodeNode secondNode = view . createCodeNode ( function , afterInstructions ) ; \n\t\t$F14782 ( firstNode , node ) secondNode . setColor ( DEFAULT_BLOCK_COLOR ) ; \n\t\tfor ( final ViewEdge edge : node . getIncomingEdges ( ) ) { \n\t\t\tfinal ViewEdge newEdge = view . createEdge ( edge . getSource ( ) , firstNode , edge . getType ( ) ) ; \n\t\t\t$F14782 ( newEdge , edge ) } \n\t\tfor ( final ViewEdge edge : node . getOutgoingEdges ( ) ) { \n\t\t\tfinal ViewEdge newEdge = view . createEdge ( secondNode , edge . getTarget ( ) , edge . getType ( ) ) ; \n\t\t\t$F14782 ( newEdge , edge ) } \n\t\tview . deleteNode ( node ) ; \n\t\treturn new NodePair ( firstNode , secondNode ) ; \n\t\t} \n\t} \n"}, {"code": "public $F7329 objectToString ( final long shopId , final String currency , final BigDecimal regularPrice ) { \n\treturn new $F7329 ( NUM00 + shopId + NUM00 + currency , moneyBridge . objectToString ( regularPrice ) ) ; \n\t} \n"}, {"code": "public String readLine $F72 throws IOException { \n\t$F83 ( line ) int i ; \n\tchar c ; \n\ti = read ( ) ; \n\t$F28386 ( i ) while ( i > - NUM00 && i != NUM00 && i != NUM00 ) { \n\t\tc = $F27723 ( i ) ; \n\t\tline = line . append ( c ) ; \n\t\ti = read ( ) ; \n\t\t} \n\tif ( i == NUM00 ) { \n\t\tif $F657475 ( i , read ) throw new IOException ( $F36004 ( Integer , i ) + line ) ; \n\t\t} \n\t$F92 ( line ) } \n"}, {"code": "static public $F117572 ( forceCreationOfNewIndex , _BOOL ) "}, {"code": "public FrameBlock zeroOutOperations ( FrameBlock result , IndexRange range , boolean complementary , int iRowStartSrc , int iRowStartDest , int brlen , int iMaxRowsToCopy ) throws DMLRuntimeException { \n\tint clen = getNumColumns ( ) ; \n\tif ( result == null ) result = new FrameBlock ( getSchema ( ) ) ; \n\telse { \n\t\tresult . reset ( NUM00 , _BOOL ) ; \n\t\tresult . setSchema ( getSchema ( ) ) ; \n\t\t} \n\tresult . ensureAllocatedColumns ( brlen ) ; \n\tif ( complementary ) { \n\t\tfor ( int r = ( int ) range . rowStart ; \n\t\tr <= range . rowEnd && r + iRowStartDest < brlen ; \n\t\tr ++ ) { \n\t\t\tfor ( int c = ( int ) range . colStart ; \n\t\t\tc <= range . colEnd ; \n\t\t\tc ++ ) result . set ( r + iRowStartDest , c , get ( r + iRowStartSrc , c ) ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tint r = iRowStartDest ; \n\t\tfor ( ; \n\t\tr < ( int ) range . rowStart && r - iRowStartDest < iMaxRowsToCopy ; \n\t\tr ++ ) for ( $F119 ( c , clen ) ) result . set ( r , c , get ( r + iRowStartSrc - iRowStartDest , c ) ) ; \n\t\tfor ( ; \n\t\tr <= ( int ) range . rowEnd && r - iRowStartDest < iMaxRowsToCopy ; \n\t\tr ++ ) { \n\t\t\tfor ( int c = NUM00 ; \n\t\t\tc < ( int ) range . colStart ; \n\t\t\tc ++ ) result . set ( r , c , get ( r + iRowStartSrc - iRowStartDest , c ) ) ; \n\t\t\tfor ( int c = ( int ) range . colEnd + NUM00 ; \n\t\t\tc < clen ; \n\t\t\tc ++ ) result . set ( r , c , get ( r + iRowStartSrc - iRowStartDest , c ) ) ; \n\t\t\t} \n\t\tfor ( ; \n\t\tr - iRowStartDest < iMaxRowsToCopy ; \n\t\tr ++ ) for ( $F119 ( c , clen ) ) result . set ( r , c , get ( r + iRowStartSrc - iRowStartDest , c ) ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public SignalBarrier $F72 { \n\t_owner = null ; \n\t} \n"}, {"code": "public void testToBigIntegerPos1 $F72 $F114431 ( a , bNumber , aNumber , result , assertTrue ) "}, {"code": "private static $F5415 normalize $F74143 ( coefficients ) { \n\tfloat accumulator = NUM00 ; \n\tfor ( $F1139 ( x , coefficients ) ) { \n\t\taccumulator += Math . abs ( coefficients [ x ] ) ; \n\t\t} \n\tfor ( $F1139 ( x , coefficients ) ) $F160348 ( coefficients , x , accumulator ) return coefficients ; \n\t} \n"}, {"code": "protected void printTrack ( Track track ) { \n\tDefaultEntityViewInfo vInfo = ( DefaultEntityViewInfo ) track . getViewInfo ( ) ; \n\t$F725 ( tmpNodeBuffer ) tmpNodeBuffer . addAll ( track . getNodes ( ) ) ; \n\tif $F5973 ( tmpNodeBuffer ) { \n\t\tprintLine ( imageBdr , tmpNodeBuffer , vInfo , _BOOL , _BOOL , null ) ; \n\t\tprintPoint ( imageBdr , $F7661 ( tmpNodeBuffer ) , vInfo , null ) ; \n\t\t} \n\t} \n"}, {"code": "private PeriodFormatterBuilder appendSuffix ( PeriodFieldAffix suffix ) { \n\tfinal Object originalPrinter ; \n\tfinal Object originalParser ; \n\tif $F3817 ( iElementPairs ) { \n\t\t$F14770 ( originalPrinter , iElementPairs ) $F14770 ( originalParser , iElementPairs ) } \n\telse $F39233 ( originalPrinter , originalParser ) if ( originalPrinter == null || originalParser == null || originalPrinter != originalParser || ! ( originalPrinter instanceof FieldFormatter ) ) $F4639 clearPrefix ( ) ; \n\tFieldFormatter newField = new FieldFormatter ( ( FieldFormatter ) originalPrinter , suffix ) ; \n\tiElementPairs . set ( $F175208 ( iElementPairs , newField ) ) ; \n\tiElementPairs . set ( $F175208 ( iElementPairs , newField ) ) ; \n\tiFieldFormatters [ newField . getFieldType ( ) ] = newField ; \n\treturn this ; \n\t} \n"}, {"code": "public Collection < Cube > all $F72 { \n\treturn Collections . unmodifiableCollection ( cubes ) ; \n\t} \n"}, {"code": "public static short readUByte ( ByteBuffer buffer ) { \n\t$F46702 ( b , buffer ) return ( short ) ( b & NUM00 ) ; \n\t} \n"}, {"code": "public static double mostToxicRow ( Gate g ) { \n\treturn Collections . min ( g . get_toxicity ( ) ) ; \n\t} \n"}, {"code": "public MultiServer $F72 { \n\tthis ( NetworkConfig . DEFAULT_TCP_PORT , NetworkConfig . DEFAULT_UDP_PORT ) ; \n\t} \n"}, {"code": "protected String urlString $F72 throws ParseException { \n\t$F280 ( retval ) lexer . selectLexer ( NUM00 ) ; \n\twhile ( lexer . hasMoreChars ( ) ) { \n\t\tchar la = lexer . lookAhead ( NUM00 ) ; \n\t\tif ( la == NUM00 || la == NUM00 || la == NUM00 || la == NUM00 || la == NUM00 ) $F597 lexer . consume ( NUM00 ) ; \n\t\tretval . append ( la ) ; \n\t\t} \n\t$F92 ( retval ) } \n"}, {"code": "public XmlElement $F97 ( encodedDocument ) { \n\t$F19273 ( encodedDocument ) this . encoded = encodedDocument . clone ( ) ; \n\t} \n"}, {"code": "public void add ( int position , int height ) { \n\t$F170294 ( currHeight , mMap , position ) if ( currHeight != height ) { \n\t\tif ( currHeight == - NUM00 ) { \n\t\t\tif $F36323 ( mMap , mMaxSize ) { \n\t\t\t\tmMap . delete ( mOrder . remove ( NUM00 ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tmOrder . remove ( ( Integer ) position ) ; \n\t\t\t} \n\t\tmMap . put ( position , height ) ; \n\t\tmOrder . add ( position ) ; \n\t\t} \n\t} \n"}, {"code": "public void testmodInversePos2 $F72 { \n\tbyte $F3009 = { \n\t\tNUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 } \n\t; \n\tbyte mBytes [ ] = { \n\t\tNUM00 , NUM00 , NUM00 , NUM00 , NUM00 } \n\t; \n\tint aSign = NUM00 ; \n\tint mSign = NUM00 ; \n\tbyte $F3018 = { \n\t\tNUM00 , - NUM00 , NUM00 , NUM00 , NUM00 } \n\t; \n\t$F3023 ( aNumber , aSign , aBytes ) $F3023 ( modulus , mSign , mBytes ) BigInteger result = aNumber . modInverse ( modulus ) ; \n\t$F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) } \n"}, {"code": "@ GET $F2513 $F2512 ( MediaType ) @ CheckPermission ( roles = { \n\tRole . SECURITY_ADMIN } \n) public OSTenantListRestRep listCoprhdOsTenants $F72 { \n\t$F980 ( _log ) List < OSTenant > tenants = getOsTenantsFromCoprhdDb ( ) ; \n\treturn map ( tenants ) ; \n\t} \n"}, {"code": "public int read $F3295 ( data ) { \n\tinit ( ) ; \n\tif ( data != null ) { \n\t\trawData = ByteBuffer . wrap ( data ) ; \n\t\t$F23501 ( rawData ) $F31290 ( rawData , ByteOrder ) readHeader ( ) ; \n\t\t$F218592 ( err , readContents , frameCount , status , STATUS_FORMAT_ERROR ) } \n\telse { \n\t\tstatus = STATUS_OPEN_ERROR ; \n\t\t} \n\treturn status ; \n\t} \n"}, {"code": "private void calculateUniqueValue $F89818 ( minValue , uniqueValue ) { \n\tfor ( $F119 ( i , measureCount ) ) { \n\t\tif ( type [ i ] == CarbonCommonConstants . BIG_INT_MEASURE ) { \n\t\t\tuniqueValue [ i ] = ( long ) minValue [ i ] - NUM00 ; \n\t\t\t} \n\t\telse if ( type [ i ] == CarbonCommonConstants . BIG_DECIMAL_MEASURE ) { \n\t\t\tBigDecimal val = ( BigDecimal ) minValue [ i ] ; \n\t\t\tuniqueValue [ i ] = ( val . subtract ( $F173307 ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tuniqueValue [ i ] = ( double ) minValue [ i ] - NUM00 ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "@ RequestMapping ( $F3144 ) public void ssoBindingError ( Locale locale , @ PathVariable ( $F3144 ) String tenant , HttpServletResponse response ) throws IOException { \n\tlogger . info ( $F370 ( locale , tenant ) ) ; \n\tssoDefaultTenantBindingError ( locale , response ) ; \n\t} \n"}, {"code": "public long env_end $F72 $F12907 ( Long , fields ) "}, {"code": "public static _Fields findByThriftId ( int fieldId ) { \n\tswitch ( fieldId ) { \n\t\t$F3366 return NUM00 S ; \n\t\t$F3366 return HELLO ; \n\t\t$F20809 } \n\t} \n"}, {"code": "public X509TrustChainKeySelector ( X509Certificate ... trustedRoots ) { \n\t_log = LoggerFactory . getLogger ( X509TrustChainKeySelector . class ) ; \n\tcheckCtorArgsNotNull ( trustedRoots ) ; \n\t_trustAnchors = new HashSet < TrustAnchor > $F72 ; \n\tfor ( X509Certificate cert : trustedRoots ) { \n\t\t_trustAnchors . add ( new TrustAnchor ( cert , null ) ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void removeAttributeNS ( String namespaceURI , String localName ) { \n\tif ( ownerDocument . errorChecking && isReadOnly ( ) ) { \n\t\t$F209190 ( msg , DOMMessageFormatter ) throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , msg ) ; \n\t\t} \n\t$F191280 ( needsSyncData , synchronizeData ) $F2329 ( attributes ) attributes . safeRemoveNamedItemNS ( namespaceURI , localName ) ; \n\t} \n"}, {"code": "public boolean drawImage ( Image img , AffineTransform xform , ImageObserver obs ) { \n\t$F1933 ( img , _BOOL ) boolean result ; \n\t$F74906 ( srcWidth , img ) $F74908 ( srcHeight , img ) if ( srcWidth < NUM00 || srcHeight < NUM00 ) { \n\t\tresult = _BOOL ; \n\t\t} \n\telse { \n\t\tresult = drawImageToPlatform ( img , xform , null , NUM00 , NUM00 , srcWidth , srcHeight , _BOOL ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public void handleButton1Request ( RequestInvocationEvent event ) throws ModelControlException { \n\t$F59551 ( model , getModel ) $F123284 ( ps , getChild , PROPERTY_ATTRIBUTE ) $F59547 ( serverName , getPageSessionAttribute , PG_ATTR_SERVER_NAME ) $F59547 ( name , getDisplayFieldValue , TF_NAME ) $F1382 ( name ) if $F4012 ( name ) { \n\t\ttry { \n\t\t\tmodel . cloneServer ( serverName , name ) ; \n\t\t\tbackTrail ( ) ; \n\t\t\tServerSiteViewBean vb = ( ServerSiteViewBean ) getViewBean ( ServerSiteViewBean . class ) ; \n\t\t\tpassPgSessionMap ( vb ) ; \n\t\t\t$F50333 ( vb , getRequestContext ) } \n\t\t$F123309 ( setInlineAlertMessage , CCAlert , e , forwardTo ) } \n\telse { \n\t\tsetInlineAlertMessage ( CCAlert . TYPE_ERROR , NUM00 , NUM00 ) ; \n\t\tforwardTo ( ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F247984 FeatureValueCollection < FV > combine ( Derivation $F247984 hyp ) { \n\tCounter < FV > counter = new ClassicCounter < FV > $F72 ; \n\tfor ( ; \n\thyp != null ; \n\thyp = hyp . parent ) { \n\t\tif ( hyp . features != null ) { \n\t\t\tfor ( FeatureValue < FV > feature : hyp . features ) { \n\t\t\t\tcounter . incrementCount ( feature . name , feature . value ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tSet < FV > featureNames = new TreeSet < FV > $F57797 ( counter ) ; \n\tFeatureValueCollection < FV > combinedList = new FeatureValueList < FV > $F716 ( featureNames ) ; \n\tfor ( FV feature : featureNames ) { \n\t\tcombinedList . add ( new FeatureValue < FV > ( feature , counter . getCount ( feature ) ) ) ; \n\t\t} \n\treturn combinedList ; \n\t} \n"}, {"code": "public void sendTitles $F72 { \n\t$F2329 ( listeners ) $F4000 ( labels ) labels . append ( NUM00 + Bundle . getMessage ( NUM00 ) + NUM00 ) ; \n\tlabels . append ( NUM00 + manager . getClosedText ( ) + NUM00 ) ; \n\tlabels . append ( NUM00 + manager . getThrownText ( ) + NUM00 ) ; \n\t$F1822 ( message , labels ) for ( ControllerInterface listener : listeners ) { \n\t\tlistener . sendPacketToDevice ( message ) ; \n\t\t} \n\t} \n"}, {"code": "$F292923 ( super ) "}, {"code": "$F123743 ( session , threadLocal ) "}, {"code": "protected Calendar $F72 { \n\t$F39044 ( zone , TimeZone ) $F3936 ( fields , FIELD_COUNT ) $F34814 ( isSet , FIELD_COUNT ) areFieldsSet = isTimeSet = _BOOL ; \n\t$F153821 ( setTimeInMillis , System ) } \n"}, {"code": "private PointPair calculateEdge ( Component comp1 , Component comp2 ) { \n\t$F5112 ( r1 , comp1 ) $F5112 ( r2 , comp2 ) Point c1 = new Point ( ( int ) $F85273 ( r1 ) , ( int ) $F85279 ( r1 ) ) ; \n\tPoint c2 = new Point ( ( int ) $F85273 ( r2 ) , ( int ) $F85279 ( r2 ) ) ; \n\tdouble angle = Math . atan2 ( c1 . y - c2 . y , c1 . x - c2 . x ) ; \n\tangle += Math . PI / NUM00 ; \n\tPoint d = new Point ( ( int ) $F68927 ( offset , Math , angle ) , ( int ) $F68922 ( offset , Math , angle ) ) ; \n\t$F26898 ( c1 , d ) $F26898 ( c2 , d ) Point p1 = getBoundaryIntersection ( comp1 , c1 , c2 ) ; \n\tPoint p2 = getBoundaryIntersection ( comp2 , c2 , c1 ) ; \n\tif $F54923 ( p1 , p2 ) { \n\t\tc1 = new Point ( ( int ) $F85273 ( r1 ) , ( int ) $F85279 ( r1 ) ) ; \n\t\tc2 = new Point ( ( int ) $F85273 ( r2 ) , ( int ) $F85279 ( r2 ) ) ; \n\t\tp1 = getBoundaryIntersection ( comp1 , c1 , c2 ) ; \n\t\tp2 = getBoundaryIntersection ( comp2 , c2 , c1 ) ; \n\t\t} \n\tif $F54923 ( p1 , p2 ) $F1337 return new PointPair ( p1 , p2 ) ; \n\t} \n"}, {"code": "$F226941 ( c , XML11CHARS , MASK_XML11_SPACE ) "}, {"code": "public void unregisterPlayerListener ( CheerleaderPlayerListener listener ) { \n\tcheckState ( ) ; \n\tmCheerleaderPlayerListeners . remove ( listener ) ; \n\t} \n"}, {"code": "public OutputStream openOutputStream ( Uri uri , boolean append ) throws IOException { \n\tassertBackgroundThread ( ) ; \n\tswitch ( getUriType ( uri ) ) { \n\t\tcase URI_TYPE_FILE : { \n\t\t\t$F291035 ( localFile , uri ) $F4924 ( parent , localFile ) if ( parent != null ) $F1908 ( parent ) return new FileOutputStream ( localFile , append ) ; \n\t\t\t} \n\t\tcase URI_TYPE_CONTENT : case URI_TYPE_RESOURCE : { \n\t\t\tAssetFileDescriptor assetFd = contentResolver . openAssetFileDescriptor ( uri , append ? NUM00 : NUM00 ) ; \n\t\t\treturn assetFd . createOutputStream ( ) ; \n\t\t\t} \n\t\t} \n\t$F352240 ( uri ) } \n"}, {"code": "protected Integer adjustIntegerValue ( Integer origValue , Integer minValue , Integer maxValue ) { \n\tInteger resultValue = origValue ; \n\tif $F25292 ( resultValue , minValue ) { \n\t\tresultValue = minValue ; \n\t\t} \n\tif $F9032 ( resultValue , maxValue ) { \n\t\tresultValue = maxValue ; \n\t\t} \n\treturn resultValue ; \n\t} \n"}, {"code": "private void initPaints ( Resources res ) { \n\tfinal String monthTypeface = res . getString ( R . string . date_picker_month_typeface ) ; \n\tfinal String dayOfWeekTypeface = res . getString ( R . string . date_picker_day_of_week_typeface ) ; \n\tfinal String dayTypeface = res . getString ( R . string . date_picker_day_typeface ) ; \n\tfinal int monthTextSize = res . getDimensionPixelSize ( R . dimen . date_picker_month_text_size ) ; \n\tfinal int dayOfWeekTextSize = res . getDimensionPixelSize ( R . dimen . date_picker_day_of_week_text_size ) ; \n\tfinal int dayTextSize = res . getDimensionPixelSize ( R . dimen . date_picker_day_text_size ) ; \n\tmMonthPaint . setAntiAlias ( _BOOL ) ; \n\tmMonthPaint . setTextSize ( monthTextSize ) ; \n\tmMonthPaint . setTypeface ( Typeface . create ( monthTypeface , NUM00 ) ) ; \n\t$F5595 ( mMonthPaint , Align ) $F5597 ( mMonthPaint , Style ) mDayOfWeekPaint . setAntiAlias ( _BOOL ) ; \n\tmDayOfWeekPaint . setTextSize ( dayOfWeekTextSize ) ; \n\tmDayOfWeekPaint . setTypeface ( Typeface . create ( dayOfWeekTypeface , NUM00 ) ) ; \n\t$F5595 ( mDayOfWeekPaint , Align ) $F5597 ( mDayOfWeekPaint , Style ) mDaySelectorPaint . setAntiAlias ( _BOOL ) ; \n\t$F5597 ( mDaySelectorPaint , Style ) mDayHighlightPaint . setAntiAlias ( _BOOL ) ; \n\t$F5597 ( mDayHighlightPaint , Style ) mDayPaint . setAntiAlias ( _BOOL ) ; \n\tmDayPaint . setTextSize ( dayTextSize ) ; \n\tmDayPaint . setTypeface ( Typeface . create ( dayTypeface , NUM00 ) ) ; \n\t$F5595 ( mDayPaint , Align ) $F5597 ( mDayPaint , Style ) } \n"}, {"code": "$F4058 ( doc , elementList , nameNode , child , childData , load , _BOOL , assertEquals ) "}, {"code": "$F1654 ( rules ) "}, {"code": "private void copyArrays $F72 { \n\t$F806 oldSyms = _symbols ; \n\tint size = oldSyms . length ; \n\t$F58180 ( _symbols , size ) $F135 ( System , oldSyms , _symbols , size ) Bucket [ ] oldBuckets = _buckets ; \n\tsize = oldBuckets . length ; \n\t_buckets = new Bucket [ size ] ; \n\t$F135 ( System , oldBuckets , _buckets , size ) } \n"}, {"code": "$F96285 ( labels , map , clones , i ) "}, {"code": "@ Procedure @ PerformsWrites @ Description ( NUM00 ) public Stream < RelationshipRefactorResult > from ( @ Name ( NUM00 ) Relationship rel , @ Name ( NUM00 ) Node newNode ) { \n\tRelationshipRefactorResult result = new RelationshipRefactorResult ( rel . getId ( ) ) ; \n\ttry { \n\t\tRelationship newRel = newNode . createRelationshipTo ( rel . getEndNode ( ) , rel . getType ( ) ) ; \n\t\tcopyProperties ( rel , newRel ) ; \n\t\t$F1900 ( rel ) return Stream . of ( result . withOther ( newRel ) ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\treturn Stream . of ( result . withError ( e ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static long maxFill ( final long n , final float f ) { \n\treturn Math . min ( ( long ) Math . ceil ( n * f ) , n - NUM00 ) ; \n\t} \n"}, {"code": "public static void print ( char x ) $F7523 ( out , x ) "}, {"code": "public void clearSourceElements $F72 { \n\tfor ( PNode node : sourceElements ) { \n\t\tSourceHandle . removeSourceHandleFrom ( node ) ; \n\t\t} \n\t$F725 ( sourceElements ) selectionModel . fireSelectionChanged ( ) ; \n\t} \n"}, {"code": "public static $F3789 readMatrix ( int numberOfRows , int numberOfColumns , boolean ignoreFirstLine , String fileName ) { \n\t$F220301 ( matrix , numberOfRows , numberOfColumns ) try { \n\t\t$F35542 ( fr , fileName ) $F20481 ( br , fr ) String line ; \n\t\tStringTokenizer tokenizer ; \n\t\tString token ; \n\t\tif ( ignoreFirstLine ) { \n\t\t\t$F224956 ( br ) } \n\t\t$F36243 ( line , br ) int rowId = NUM00 ; \n\t\twhile ( line != null ) { \n\t\t\ttokenizer = new StringTokenizer ( line ) ; \n\t\t\tfor ( $F119 ( i , numberOfColumns ) ) { \n\t\t\t\t$F39710 ( token , tokenizer ) $F182295 ( parsedNumber , Double , token ) matrix [ rowId ] [ i ] = parsedNumber ; \n\t\t\t\t} \n\t\t\tif $F14498 ( tokenizer ) $F11389 $F36243 ( line , br ) rowId ++ ; \n\t\t\t} \n\t\tif ( rowId != numberOfRows ) $F11389 } \n\t$F41337 ( e ) catch ( Exception e ) $F33618 ( e ) return matrix ; \n\t} \n"}, {"code": "$F1 protected boolean readIntoBuffer ( int minLength ) { \n\tif ( bufferSpaceLeft ( ) < minLength ) { \n\t\tincreaseBufferSize ( minLength + currentlyInBuffer ( ) ) ; \n\t\t} \n\telse if ( buf . length - writePos < minLength ) $F5795 ( compact ) int readSum = NUM00 ; \n\twhile ( readSum < minLength && $F1030 ( datagrams ) ) { \n\t\tDatagram next = datagrams . removeFirst ( ) ; \n\t\tint length = ( int ) next . getDuration ( ) ; \n\t\tif ( buf . length < writePos + length ) { \n\t\t\tincreaseBufferSize ( writePos + length ) ; \n\t\t\t} \n\t\tint read = readDatagram ( next , buf , writePos ) ; \n\t\twritePos += read ; \n\t\treadSum += read ; \n\t\t} \n\tif ( dataProcessor != null ) { \n\t\tdataProcessor . applyInline ( buf , writePos - readSum , readSum ) ; \n\t\t} \n\treturn readSum >= minLength ; \n\t} \n"}, {"code": "private int heightOfPhi ( int Phi ) { \n\t$F7630 ( Phi ) int Tau = NUM00 ; \n\tint modul = NUM00 ; \n\twhile ( Phi % modul == NUM00 ) { \n\t\tmodul *= NUM00 ; \n\t\tTau += NUM00 ; \n\t\t} \n\treturn Tau - NUM00 ; \n\t} \n"}, {"code": "$F1113 public ClarifaiClient buildSync $F72 { \n\treturn new ClarifaiClientImpl ( this ) ; \n\t} \n"}, {"code": "public void mouseReleased ( MouseEvent e ) { \n\t$F128225 vv = ( $F128225 ) e . getSource ( ) ; \n\tdown = null ; \n\tvv . setCursor ( $F88367 ( Cursor ) ) ; \n\t} \n"}, {"code": "$F5466 public static $F6969 classForName ( $F5466 String cls , $F5466 $F6969 dflt , boolean includePrimitiveTypes ) { \n\t$F33929 ( clazz ) if ( cls == null ) clazz = dflt ; \n\telse if ( ! includePrimitiveTypes || $F20 ( cls ) || $F86155 ( clazz , primitiveMap , cls ) == null ) { \n\t\ttry { \n\t\t\tclazz = Class . forName ( cls ) ; \n\t\t\t} \n\t\tcatch ( ClassNotFoundException ignore ) { \n\t\t\tclazz = dflt ; \n\t\t\t} \n\t\t} \n\treturn clazz ; \n\t} \n"}, {"code": "public String checkWriteProtected ( int resIdAction , final File ... filesToBeModified ) { \n\tif ( filesToBeModified != null ) { \n\t\tfor ( File file : filesToBeModified ) { \n\t\t\tif ( ( file != null ) && $F3428 ( file ) && $F14326 ( file ) ) { \n\t\t\t\tString action = ( resIdAction == NUM00 ) ? NUM00 : mContext . getString ( resIdAction ) ; \n\t\t\t\treturn mContext . getString ( R . string . file_err_writeprotected , file . getAbsolutePath ( ) , action ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F1274 } \n"}, {"code": "$F49286 ( value , absMin , absMax , absValue , Math ) "}, {"code": "$F1113 $F125711 ( _BOOL ) public static String strip ( $F1113 final String s , $F1113 final CharFilter filter ) { \n\tfinal StringBuilder result = new StringBuilder $F45530 ( s ) ; \n\tfor ( $F1088 ( i , s ) ) { \n\t\t$F1280 ( ch , s , i ) if ( filter . accept ( ch ) ) $F288 ( result , ch ) } \n\t$F92 ( result ) } \n"}, {"code": "protected void addComponent ( XMLComponent component ) $F42353 ( fComponents , component , addRecognizedParamsAndSetDefaults ) "}, {"code": "public void testLocalInstances_distribution $F72 { \n\tMatsimRandom . reset ( NUM00 ) ; \n\tRandom local1a = MatsimRandom . getLocalInstance ( ) ; \n\t$F8669 ( value1 , local1a ) MatsimRandom . reset ( NUM00 ) ; \n\tRandom local2a = MatsimRandom . getLocalInstance ( ) ; \n\t$F8669 ( value2a , local2a ) Random local2b = MatsimRandom . getLocalInstance ( ) ; \n\t$F8669 ( value2b , local2b ) assertTrue ( Math . abs ( value1 - value2a ) > EPSILON ) ; \n\tassertTrue ( Math . abs ( value2a - value2b ) > EPSILON ) ; \n\tassertTrue ( Math . abs ( value1 - value2b ) > EPSILON ) ; \n\t} \n"}, {"code": "public final void test_ROUNDTRIP_GetKeySpecKey02 $F72 { \n\tboolean performed = _BOOL ; \n\tfor ( $F1139 ( i , algName ) ) { \n\t\ttry { \n\t\t\t$F75160 ( g , algName , i , privateKeyInfoDamaged ) EncryptedPrivateKeyInfo epki ; \n\t\t\t$F71324 ( g , epki , algName , i ) try { \n\t\t\t\tepki . getKeySpec ( $F71326 ( g ) ) ; \n\t\t\t\t$F71332 ( fail , algName , i ) } \n\t\t\t$F32328 performed = _BOOL ; \n\t\t\t} \n\t\t$F75179 $F71336 } \n\tassertTrue ( NUM00 , performed ) ; \n\t} \n"}, {"code": "public void clear ( IValidatable bean ) { \n\tfor ( Binding b : _optComponents . values ( ) ) $F241907 ( b , bean ) for ( Binding b : _bindings . values ( ) ) $F241907 ( b , bean ) _modified = _BOOL ; \n\t} \n"}, {"code": "public boolean hasCredentials $F72 { \n\treturn _hasCredentials ; \n\t} \n"}, {"code": "public boolean isRecursiveAttrSet ( ElemAttributeSet attrSet ) { \n\tif ( null == m_attrSetStack ) { \n\t\t$F84877 ( m_attrSetStack ) ; \n\t\t} \n\tif $F84882 ( m_attrSetStack ) { \n\t\tint loc = m_attrSetStack . search ( attrSet ) ; \n\t\tif ( loc > - NUM00 ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void clear ( AbsoluteTableIdentifier absoluteTableIdentifier ) $F76730 ( tableLockMap , absoluteTableIdentifier , tableSegmentMap ) "}, {"code": "public int enumerate ( Thread [ ] threads ) $F8587 ( enumerate , threads , _BOOL ) "}, {"code": "public static InputStream toInputStream ( CharSequence input ) { \n\t$F17718 ( toInputStream , input ) } \n"}, {"code": "$F1 public void process ( Number tuple ) { \n\tvalues . add ( tuple . doubleValue ( ) ) ; \n\t} \n"}, {"code": "public void grantWritePermission ( Collection attributeNames ) { \n\t$F10531 ( it , attributeNames ) if ( it != null ) { \n\t\twhile $F2921 ( it ) { \n\t\t\t$F2778 ( temp , it ) $F9631 ( writables , temp ) } \n\t\t} \n\t} \n"}, {"code": "public void saveData ( File file ) throws IOException { \n\tsynchronized ( accumulators ) { \n\t\tObjectOutputStream oos = null ; \n\t\ttry { \n\t\t\toos = new ObjectOutputStream $F4443 ( file ) ; \n\t\t\toos . writeObject ( accumulators ) ; \n\t\t\t} \n\t\t$F14364 ( oos ) } \n\t} \n"}, {"code": "public static Ingredient fromCursor ( Cursor cursor ) { \n\tIngredient ingredient = new Ingredient $F72 ; \n\tfor ( $F90183 ( c , cursor ) ) { \n\t\t$F43881 ( columnName , cursor , c ) if ( columnName . equals ( RecipeIngredientTable . AMOUNT_COLUMN ) ) { \n\t\t\tingredient . setAmount ( cursor . getString ( c ) ) ; \n\t\t\t} \n\t\telse if $F197257 ( columnName , RecipeIngredientTable ) $F197260 ( ingredient , cursor , c ) } \n\treturn ingredient ; \n\t} \n"}, {"code": "public void append ( char $F184368 , int off , int len ) { \n\tint restLength = buffer . length - pos ; \n\tif ( len < restLength ) $F21534 ( System , c , off , buffer , pos , len ) else { \n\t\tSystem . arraycopy ( c , off , buffer , pos , restLength ) ; \n\t\tcurr . next = new Entity ( buffer ) ; \n\t\tcurr = curr . next ; \n\t\tlength += buffer . length ; \n\t\tbuffer = new char [ ( buffer . length > len - restLength ) ? buffer . length : len - restLength ] ; \n\t\tSystem . arraycopy ( c , off + restLength , buffer , NUM00 , len - restLength ) ; \n\t\tpos = len - restLength ; \n\t\t} \n\t} \n"}, {"code": "public boolean contains ( String voiceName ) { \n\treturn ( getVoice ( voiceName ) != null ) ; \n\t} \n"}, {"code": "public static boolean isEnterpriseEdition ( String serverVersion ) { \n\treturn serverVersion . contains ( NUM00 ) || serverVersion . contains ( NUM00 ) || serverVersion . contains ( NUM00 ) ; \n\t} \n"}, {"code": "$F1 public CategoryItemRendererState initialise ( Graphics2D g2 , Rectangle2D dataArea , CategoryPlot plot , int rendererIndex , PlotRenderingInfo info ) { \n\tCategoryItemRendererState state = super . initialise ( g2 , dataArea , plot , rendererIndex , info ) ; \n\tCategoryAxis domainAxis = getDomainAxis ( plot , rendererIndex ) ; \n\tCategoryDataset dataset = plot . getDataset ( rendererIndex ) ; \n\tif ( dataset != null ) { \n\t\t$F16742 ( columns , dataset ) $F160876 ( rows , dataset ) double space = NUM00 ; \n\t\t$F10709 ( orientation , plot ) if ( orientation == PlotOrientation . HORIZONTAL ) $F32511 ( space , dataArea ) else if ( orientation == PlotOrientation . VERTICAL ) $F32508 ( space , dataArea ) double maxWidth = space * getMaximumBarWidth ( ) ; \n\t\tdouble categoryMargin = NUM00 ; \n\t\tdouble currentItemMargin = NUM00 ; \n\t\tif ( columns > NUM00 ) { \n\t\t\tcategoryMargin = domainAxis . getCategoryMargin ( ) ; \n\t\t\t} \n\t\tif ( rows > NUM00 ) $F20182 ( currentItemMargin , getItemMargin ) double used = space * ( NUM00 - domainAxis . getLowerMargin ( ) - domainAxis . getUpperMargin ( ) - categoryMargin - currentItemMargin ) ; \n\t\tif ( ( rows * columns ) > NUM00 ) { \n\t\t\tstate . setBarWidth ( Math . min ( used / ( dataset . getColumnCount ( ) * dataset . getRowCount ( ) ) , maxWidth ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tstate . setBarWidth ( Math . min ( used , maxWidth ) ) ; \n\t\t\t} \n\t\t} \n\treturn state ; \n\t} \n"}, {"code": "public static boolean createFolder ( $F1431 Context mContext , String path , String folderName ) { \n\t$F4453 ( SDCardRoot , path , folderName ) if $F1906 ( SDCardRoot ) { \n\t\treturn SDCardRoot . mkdir ( ) ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "private static NSObject parseObject ( Node n ) throws ParseException , IOException { \n\t$F48115 ( type , n ) if $F3057 ( type ) { \n\t\tNSDictionary dict = new NSDictionary $F72 ; \n\t\t$F27878 children = filterElementNodes ( n . getChildNodes ( ) ) ; \n\t\tfor ( $F48125 ( i , children ) ) { \n\t\t\t$F22142 ( key , children , i ) Node val = children . get ( i + NUM00 ) ; \n\t\t\tString keyString = getNodeTextContents ( key ) ; \n\t\t\t$F39715 ( dict , keyString , parseObject , val ) } \n\t\treturn dict ; \n\t\t} \n\telse if $F3057 ( type ) { \n\t\t$F27878 children = filterElementNodes ( n . getChildNodes ( ) ) ; \n\t\tNSArray array = new NSArray $F716 ( children ) ; \n\t\tfor ( $F2277 ( i , children ) ) { \n\t\t\tarray . setValue ( i , parseObject ( children . get ( i ) ) ) ; \n\t\t\t} \n\t\treturn array ; \n\t\t} \n\telse if $F3057 ( type ) { \n\t\treturn new NSNumber ( _BOOL ) ; \n\t\t} \n\telse if $F3057 ( type ) { \n\t\treturn new NSNumber ( _BOOL ) ; \n\t\t} \n\telse if $F3057 ( type ) { \n\t\treturn new NSNumber ( getNodeTextContents ( n ) ) ; \n\t\t} \n\telse if $F3057 ( type ) { \n\t\treturn new NSNumber ( getNodeTextContents ( n ) ) ; \n\t\t} \n\telse if $F3057 ( type ) { \n\t\treturn new NSString ( getNodeTextContents ( n ) ) ; \n\t\t} \n\telse if $F3057 ( type ) { \n\t\treturn new NSData ( getNodeTextContents ( n ) ) ; \n\t\t} \n\telse if $F3057 ( type ) { \n\t\treturn new NSDate ( getNodeTextContents ( n ) ) ; \n\t\t} \n\t$F1274 } \n"}, {"code": "LuaString loadString $F72 throws IOException { \n\tint size = this . luacSizeofSizeT == NUM00 ? $F112407 ( loadInt64 ) : loadInt ( ) ; \n\t$F112238 ( size ) $F2175 ( bytes , size ) $F65245 ( is , bytes , size ) return LuaString . valueOf ( $F31038 ( bytes ) ) ; \n\t} \n"}, {"code": "protected AbstractPreferences ( AbstractPreferences parent , String name ) { \n\tif ( parent == null ) { \n\t\tif $F1264 ( name ) $F29525 ( name ) this . absolutePath = NUM00 ; \n\t\troot = this ; \n\t\t} \n\telse { \n\t\tif $F12703 ( name ) $F29525 ( name ) if $F3057 ( name ) $F824 root = parent . root ; \n\t\tabsolutePath = ( parent == root ? NUM00 + name : parent . absolutePath ( ) + NUM00 + name ) ; \n\t\t} \n\tthis . name = name ; \n\tthis . parent = parent ; \n\t} \n"}, {"code": "static $F6969 canonicalize ( $F6969 t , int how ) { \n\t$F33929 ( ct ) if ( t == $F12222 ) $F845 else if $F49310 ( t ) { \n\t\tswitch ( how ) { \n\t\t\tcase UNWRAP : ct = Wrapper . asPrimitiveType ( t ) ; \n\t\t\tif ( ct != t ) return ct ; \n\t\t\t$F597 case RAW_RETURN : case ERASE : return $F12222 ; \n\t\t\t} \n\t\t} \n\telse if ( t == $F78753 ) { \n\t\tswitch ( how ) { \n\t\t\tcase RAW_RETURN : return $F37010 ; \n\t\t\tcase WRAP : return Void . class ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tswitch ( how ) { \n\t\t\tcase WRAP : return Wrapper . asWrapperType ( t ) ; \n\t\t\tcase INTS : if ( t == $F37010 || t == $F41237 ) $F1274 if $F41243 ( t ) return $F41237 ; \n\t\t\treturn $F37010 ; \n\t\t\tcase LONGS : if $F41238 ( t ) $F1274 return $F41237 ; \n\t\t\tcase RAW_RETURN : if ( t == $F37010 || t == $F41237 || t == $F41248 || t == $F41242 ) $F1274 return $F37010 ; \n\t\t\t} \n\t\t} \n\t$F1274 } \n"}, {"code": "protected String extractSubstring ( String pszSrc ) { \n\tint nBracket = NUM00 ; \n\tint i ; \n\tString pszReturn ; \n\tfor ( i = NUM00 ; \n\ti < pszSrc . length ( ) && ( nBracket > NUM00 || pszSrc . charAt ( i ) != NUM00 ) ; \n\ti ++ ) { \n\t\tif $F11983 ( pszSrc , i ) { \n\t\t\tnBracket ++ ; \n\t\t\t} \n\t\telse if $F11983 ( pszSrc , i ) { \n\t\t\tnBracket -- ; \n\t\t\t} \n\t\t} \n\tif $F4432 ( pszSrc ) { \n\t\tpszReturn = $F28929 ( pszSrc , i ) ; \n\t\t} \n\telse $F14494 ( pszReturn , pszSrc , i ) return pszReturn ; \n\t} \n"}, {"code": "public void read ( Appendable dest ) throws IOException { \n\t$F3576 ( _inputStream ) while ( _BOOL ) { \n\t\tif ( _start >= _end ) { \n\t\t\t_start = NUM00 ; \n\t\t\t$F81136 ( _end , _inputStream , _bytes ) $F65649 ( _end ) } \n\t\tbyte b = _bytes [ _start ] ; \n\t\tif ( b >= NUM00 ) { \n\t\t\t$F36813 ( dest , b ) _start ++ ; \n\t\t\t} \n\t\telse { \n\t\t\tint code = read2 ( ) ; \n\t\t\tif ( code < NUM00 ) $F46352 ( dest , code ) else if ( code <= NUM00 ) { \n\t\t\t\tdest . append ( ( char ) ( ( ( code - NUM00 ) > > NUM00 ) + NUM00 ) ) ; \n\t\t\t\tdest . append ( ( char ) ( ( ( code - NUM00 ) & NUM00 ) + NUM00 ) ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tthrow new CharConversionException ( $F36004 ( Integer , code ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public boolean isMonitoring $F72 { \n\treturn m_Monitor . isMonitoring ( ) ; \n\t} \n"}, {"code": "static final Color hexToColor ( String value ) { \n\tString digits ; \n\t$F1749 ( n , value ) if $F3106 ( value ) { \n\t\tdigits = value . substring ( NUM00 , Math . min ( value . length ( ) , NUM00 ) ) ; \n\t\t} \n\telse { \n\t\tdigits = value ; \n\t\t} \n\tString hstr = NUM00 + digits ; \n\tColor c ; \n\ttry { \n\t\tc = Color . decode ( hstr ) ; \n\t\t} \n\tcatch ( NumberFormatException nfe ) { \n\t\tc = null ; \n\t\t} \n\treturn c ; \n\t} \n"}, {"code": "public final boolean contentEquals ( java . lang . CharSequence csq ) { \n\tif $F8732 ( csq , _length ) return _BOOL ; \n\tfor ( int i = NUM00 ; \n\ti < _length ; \n\t) { \n\t\tchar c = _high [ i > > B1 ] [ i & M1 ] ; \n\t\tif ( csq . charAt ( i ++ ) != c ) return _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "private void populateAvailableDataStores $F72 { \n\tDataAccessFactory fac ; \n\t$F980 ( logger ) Iterator < DataStoreFactorySpi > iterator = DataStoreFinder . getAvailableDataStores ( ) ; \n\twhile $F2921 ( iterator ) { \n\t\tfac = ( DataAccessFactory ) iterator . next ( ) ; \n\t\tlogger . debug ( $F16018 ( fac ) ) ; \n\t\tavailableDataStoreList . add ( fac . getDisplayName ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "protected void add ( double value , int group ) { \n\tif ( ( group < NUM00 ) || ( group >= numberOfGroups ) ) $F825 data . add ( new Observation ( value , group ) ) ; \n\t} \n"}, {"code": "protected static String makeOptionString ( Script script ) { \n\tStringBuffer result ; \n\t$F987 enm ; \n\tOption option ; \n\tresult = new StringBuffer $F580 ; \n\t$F84 ( result ) $F84 ( result ) $F84 ( result ) $F84 ( result ) $F84 ( result ) enm = script . listOptions ( ) ; \n\twhile $F1444 ( enm ) { \n\t\t$F1445 ( option , enm ) result . append ( option . synopsis ( ) + NUM00 ) ; \n\t\tresult . append ( option . description ( ) + NUM00 ) ; \n\t\t} \n\t$F84 ( result ) $F84 ( result ) $F84 ( result ) $F84 ( result ) $F92 ( result ) } \n"}, {"code": "public RegistrationBuilder addContact ( URI contact ) $F18637 ( contacts , contact , this ) "}, {"code": "public static void closeQuietly ( AutoCloseable closeable ) { \n\tif ( closeable != null ) { \n\t\ttry $F881 ( closeable ) $F41337 ( rethrown ) $F63878 } \n\t} \n"}, {"code": "String formatTime ( int hour , int minute ) { \n\tString s = NUM00 ; \n\t$F4074 ( t , Integer , hour ) if $F1277 ( t ) { \n\t\ts = t + NUM00 ; \n\t\t} \n\telse if $F1277 ( t ) { \n\t\ts = NUM00 + t + NUM00 ; \n\t\t} \n\tt = Integer . toString ( minute ) ; \n\tif $F1277 ( t ) { \n\t\ts = s + t ; \n\t\t} \n\telse if $F1277 ( t ) $F15894 ( s , t ) if $F35625 ( s ) { \n\t\ts = NUM00 ; \n\t\t} \n\treturn s ; \n\t} \n"}, {"code": "public boolean isEmpty $F72 { \n\treturn ( sentenceType == SentenceType . UNDEFINED ) && expressions . isEmpty ( ) ; \n\t} \n"}, {"code": "$F1 public void init ( AbstractAddressbookManager aBooMgr ) { \n\tsetAddressBookManager ( aBooMgr ) ; \n\treloadSettings ( ) ; \n\ttry { \n\t\tconnection = DriverManager . getConnection ( IDENTITYDB_CONNECT_ \"STRING\" ) ; \n\t\t} \n\tcatch ( SQLException e ) { \n\t\tlogger . error ( NUM00 + IDENTITYDB_CONNECT_ <missing ';'> NUM00 , e ) ; \n\t\t} \n\tStatement statement ; \n\ttry { \n\t\t$F2715 ( statement , connection ) statement . setQueryTimeout ( NUM00 ) ; \n\t\tstatement . executeUpdate ( NUM00 + TABLE_IDENTITY + NUM00 ) ; \n\t\tstatement . executeUpdate ( NUM00 + TABLE_CLOUDPROVIDER + NUM00 ) ; \n\t\tstatement . executeUpdate ( NUM00 + TABLE_CLOUDPROVIDER_MAP + NUM00 ) ; \n\t\t$F10089 ( aBooMgr ) } \n\t$F174178 ( logger , e ) finally { \n\t\tif ( connection != null ) { \n\t\t\ttry $F881 ( connection ) $F174178 ( logger , e ) } \n\t\t} \n\t} \n"}, {"code": "private Buffer checkErrorPacket ( int command ) throws SQLException { \n\tBuffer resultPacket = null ; \n\tthis . serverStatus = NUM00 ; \n\ttry { \n\t\tresultPacket = reuseAndReadPacket ( this . reusablePacket ) ; \n\t\t} \n\tcatch ( SQLException sqlEx ) { \n\t\tthrow sqlEx ; \n\t\t} \n\tcatch ( Exception fallThru ) { \n\t\tthrow SQLError . createCommunicationsException ( this . connection , this . lastPacketSentTimeMs , this . lastPacketReceivedTimeMs , fallThru , getExceptionInterceptor ( ) ) ; \n\t\t} \n\tcheckErrorPacket ( resultPacket ) ; \n\treturn resultPacket ; \n\t} \n"}, {"code": "public void applySettings ( boolean loadCoreComponents ) throws ApplySettingsException { \n\t$F16092 ( errors ) applyTorrentDataSaveFolderSettings ( errors ) ; \n\tapplyTorrentSeedingSettings ( errors ) ; \n\tif $F5973 ( errors ) { \n\t\tthrow new ApplySettingsException ( StringUtils . explode ( errors , NUM00 ) ) ; \n\t\t} \n\t} \n"}, {"code": "public boolean shouldSelectCell ( EventObject e ) { \n\treturn _BOOL ; \n\t} \n"}, {"code": "$F23145 ( measureSpec , result , specMode , MeasureSpec , specSize , mRadius , getPaddingTop , getPaddingBottom , Math ) "}, {"code": "private void readObject ( ObjectInputStream in ) throws $F6427 { \n\t$F6428 ( in ) if ( resourceBundleName != null ) { \n\t\ttry { \n\t\t\trb = ResourceBundle . getBundle ( resourceBundleName ) ; \n\t\t\t} \n\t\tcatch ( MissingResourceException e ) { \n\t\t\trb = null ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "method_info findMethod ( String s ) { \n\tmethod_info m ; \n\tint i ; \n\tfor ( i = NUM00 ; \n\ti < methods_count ; \n\ti ++ ) { \n\t\tm = methods [ i ] ; \n\t\tif ( s . equals ( m . toName ( constant_pool ) ) ) { \n\t\t\treturn m ; \n\t\t\t} \n\t\t} \n\t$F1274 } \n"}, {"code": "private boolean matches ( $F5466 Object obj , String operator , String operandStr ) { \n\tObsValue value ; \n\tif ( obj == null ) { \n\t\tswitch ( operator ) { \n\t\t\t$F1262 $F1262 $F1262 $F18904 ( operandStr ) $F1267 return _BOOL ; \n\t\t\t} \n\t\t} \n\telse if ( obj instanceof ObsPoint ) { \n\t\tvalue = ( ( ObsPoint ) obj ) . value ; \n\t\t} \n\telse if ( obj instanceof ObsValue ) { \n\t\tvalue = ( ObsValue ) obj ; \n\t\t} \n\telse return _BOOL ; \n\tObsValue operand = null ; \n\tif ( value . uuid != null ) { \n\t\toperand = ObsValue . newCoded ( Utils . expandUuid ( operandStr ) ) ; \n\t\t} \n\telse if ( value . number != null ) { \n\t\ttry { \n\t\t\toperand = ObsValue . newNumber ( Double . valueOf ( operandStr ) ) ; \n\t\t\t} \n\t\tcatch ( NumberFormatException e ) $F429599 ( operand , ObsValue ) } \n\telse if ( value . text != null ) { \n\t\toperand = ObsValue . newText ( operandStr ) ; \n\t\t} \n\telse if ( value . date != null ) { \n\t\ttry { \n\t\t\toperand = ObsValue . newDate ( LocalDate . parse ( operandStr ) ) ; \n\t\t\t} \n\t\tcatch ( IllegalArgumentException e ) { \n\t\t\toperand = ObsValue . MIN_DATE ; \n\t\t\t} \n\t\t} \n\telse if ( value . instant != null ) { \n\t\ttry { \n\t\t\toperand = ObsValue . newTime ( Long . valueOf ( operandStr ) ) ; \n\t\t\t} \n\t\tcatch ( IllegalArgumentException e ) { \n\t\t\toperand = ObsValue . MIN_TIME ; \n\t\t\t} \n\t\t} \n\tswitch ( operator ) { \n\t\t$F1262 $F1262 $F1262 return Objects . equal ( value . uuid , operand . uuid ) ; \n\t\t$F1262 return value . compareTo ( operand ) < NUM00 ; \n\t\t$F1262 return value . compareTo ( operand ) <= NUM00 ; \n\t\t$F1262 return value . compareTo ( operand ) > NUM00 ; \n\t\t$F1262 return value . compareTo ( operand ) >= NUM00 ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "private void waitUntilReadable $F72 throws IOException { \n\t$F14811 ( readTimeout ) try { \n\t\twhile ( $F10470 ( readBuffer ) && ! finished && ! closed && errorCode == null ) $F5795 ( waitForIo ) } \n\t$F14820 ( readTimeout ) } \n"}, {"code": "public static < X extends Exception > String toString ( Iteration < ? , X > iter , String separator ) throws X { \n\t$F83 ( sb ) toString ( iter , separator , sb ) ; \n\t$F92 ( sb ) } \n"}, {"code": "$F1431 $F1 public boolean contains ( final Object obj ) { \n\tif ( null != obj ) { \n\t\t$F11686 it = new ArrayDequeIterator $F11685 $F72 ; \n\t\twhile $F2921 ( it ) { \n\t\t\tif ( obj . equals ( ( E ) it . next ( ) ) ) { \n\t\t\t\treturn _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static synchronized GridTestPrintStream acquireErr $F72 { \n\tif ( testErr == null ) testErr = new GridTestPrintStream ( sysErr ) ; \n\tif ( errCnt == NUM00 ) System . setErr ( testErr ) ; \n\terrCnt ++ ; \n\treturn testErr ; \n\t} \n"}, {"code": "private void writeObject ( ObjectOutputStream out ) throws IOException { \n\t$F9339 ( out ) doWriteObject ( out ) ; \n\t} \n"}, {"code": "private static boolean isPropertyName ( String name ) { \n\treturn ( $F4012 ( name ) && $F102260 ( Character , name ) ) || ( $F4012 ( name ) && $F102260 ( Character , name ) ) ; \n\t} \n"}, {"code": "public Collection < ExpressionObject $F1011 > analyzeExpression ( GenericPK id , Expression formula , ExpressionAST expression ) throws ScopeException { \n\tExtractReferences visitor = new ExtractReferences $F72 ; \n\tList < ExpressionRef > references = visitor . apply ( expression ) ; \n\tString internal = rewriteExpressionValue ( formula . getValue ( ) , expression , references ) ; \n\tif ( ! $F14681 ( internal , formula ) ) { \n\t\tformula . setInternal ( internal ) ; \n\t\t} \n\telse { \n\t\tformula . setInternal ( null ) ; \n\t\t} \n\tint level = computeReferenceTree ( expression , references ) ; \n\tformula . setLevel ( level ) ; \n\tCollection < ExpressionObject $F1011 > $F9626 ( objects ) ; \n\tfor ( ExpressionRef expr : references ) { \n\t\tObject ref = expr . getReference ( ) ; \n\t\tif ( ref != null && ref instanceof Property ) { \n\t\t\tProperty property = ( Property ) ref ; \n\t\t\tExpressionObject $F1011 object = property . getExpressionObject ( ) ; \n\t\t\t$F1140 ( object , objects ) } \n\t\t} \n\tif $F5973 ( objects ) { \n\t\tCollection < ExpressionObject $F1011 > closure = null ; \n\t\tCollection < ExpressionObject $F1011 > transitiveClosure = objects ; \n\t\tdo { \n\t\t\tclosure = transitiveClosure ; \n\t\t\ttransitiveClosure = transitiveClosure ( id , closure ) ; \n\t\t\t} \n\t\twhile $F45088 ( closure , transitiveClosure ) ; \n\t\tCollection < ReferencePK $F1011 > $F9626 ( IDs ) ; \n\t\tfor ( ExpressionObject $F1011 object : transitiveClosure ) { \n\t\t\tReferencePK $F1011 refPk = reference ( object ) ; \n\t\t\t$F1140 ( refPk , IDs ) } \n\t\tformula . setReferences ( IDs ) ; \n\t\treturn transitiveClosure ; \n\t\t} \n\telse { \n\t\treturn objects ; \n\t\t} \n\t} \n"}, {"code": "public void removeRtcpListener ( RtcpEventListener listener ) { \n\t$F1375 ( sLogger ) mListeners . removeElement ( listener ) ; \n\t} \n"}, {"code": "private static void collectAllTimes ( Tree tree , NodeRef node , NodeRef [ ] excludeBelow , ArrayList times , $F15272 childs ) { \n\ttimes . add ( new ComparableDouble ( tree . getNodeHeight ( node ) ) ) ; \n\tchilds . add ( tree . getChildCount ( node ) ) ; \n\tfor ( $F5911 ( i , tree , node ) ) { \n\t\tNodeRef child = tree . getChild ( node , i ) ; \n\t\tif ( excludeBelow == null ) { \n\t\t\tcollectAllTimes ( tree , child , excludeBelow , times , childs ) ; \n\t\t\t} \n\t\telse { \n\t\t\tboolean include = _BOOL ; \n\t\t\tfor ( NodeRef anExcludeBelow : excludeBelow ) { \n\t\t\t\tif ( anExcludeBelow . getNumber ( ) == child . getNumber ( ) ) $F3468 ( include , _BOOL ) } \n\t\t\tif ( include ) collectAllTimes ( tree , child , excludeBelow , times , childs ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "protected void paintText ( final Graphics g , final JComponent c , final Rectangle localTextRect , final String text ) { \n\tfinal Graphics2D g2d = g instanceof Graphics2D ? ( Graphics2D ) g : null ; \n\tfinal AbstractButton b = ( AbstractButton ) c ; \n\tfinal ButtonModel model = b . getModel ( ) ; \n\tfinal FontMetrics fm = g . getFontMetrics ( ) ; \n\tfinal int mnemonicIndex = AquaMnemonicHandler . isMnemonicHidden ( ) ? - NUM00 : b . getDisplayedMnemonicIndex ( ) ; \n\tif $F34496 ( model ) { \n\t\tg . setColor ( b . getForeground ( ) ) ; \n\t\t} \n\telse $F158293 ( g , defaultDisabledTextColor ) SwingUtilities2 . drawStringUnderlineCharAt ( c , g , text , mnemonicIndex , localTextRect . x , localTextRect . y + fm . getAscent ( ) ) ; \n\t} \n"}, {"code": "public static ConstraintWidget [ ] inferTableList ( WidgetsScene list ) { \n\tfor ( ConstraintWidget widget : list . getWidgets ( ) ) { \n\t\twidget . resetAnchors ( ) ; \n\t\t} \n\treturn inferTableList ( list . getRoot ( ) ) ; \n\t} \n"}, {"code": "public String toXMLString ( boolean includeNS , boolean declareNS ) throws FSMsgException $F19580 ( toXMLString , includeNS , declareNS , _BOOL ) "}, {"code": "public void ifPresent ( LongConsumer consumer ) { \n\tif ( isPresent ) consumer . accept ( value ) ; \n\t} \n"}, {"code": "public void update ( $F806 columns , $F131 columnValues , $F806 conditions , $F131 conditionValues ) throws DataAccessException { \n\tif ( columns . length != columnValues . length || conditions . length != conditionValues . length ) $F9465 ( logger ) $F131 values = Arrays . copyOf ( columnValues , columnValues . length + conditionValues . length ) ; \n\t$F11244 ( System , conditionValues , values , columnValues ) final String sql = PreparedStatementUtil . prepareUpdateTemplateWithColumn ( tableName , columns , conditions ) ; \n\texecute ( sql , values ) ; \n\t} \n"}, {"code": "public static String replicaSetUsedIn ( String addresses ) { \n\tif $F3106 ( addresses ) $F1337 $F1384 ( index , addresses ) $F94834 ( index ) $F35298 ( addresses , index ) } \n"}, {"code": "public void onProgress ( long bytesWritten , long totalSize ) { \n\tLog . v ( LOG_TAG , String . format ( NUM00 , bytesWritten , totalSize , ( totalSize > NUM00 ) ? ( bytesWritten * NUM00 / totalSize ) * NUM00 : - NUM00 ) ) ; \n\t} \n"}, {"code": "public String self ( TypeDeclaration decl ) { \n\tif ( decl instanceof Constructor ) { \n\t\tdecl = ( TypeDeclaration ) decl . getContainer ( ) ; \n\t\t} \n\tString name = JsUtils . escapeStringLiteral ( decl . getName ( ) ) ; \n\tif ( decl . isShared ( ) || decl . isToplevel ( ) ) { \n\t\tname += nestingSuffix ( decl , _BOOL ) ; \n\t\t} \n\telse { \n\t\tname = NUM00 + Long . toString ( getUID ( decl ) , NUM00 ) ; \n\t\t} \n\treturn String . format ( NUM00 , $F85542 ( Character , name ) , name . substring ( NUM00 ) ) ; \n\t} \n"}, {"code": "public double elapsedTime $F72 { \n\tlong now = threadTimer . getCurrentThreadCpuTime ( ) ; \n\treturn ( now - start ) / NANOSECONDS_PER_SECOND ; \n\t} \n"}, {"code": "public static void sortList ( List list ) { \n\tif ( SystemUtils . IS_JAVA_1_7 && list instanceof CopyOnWriteArrayList ) { \n\t\t$F46704 ( tempList , list ) Collections . sort ( tempList ) ; \n\t\t$F725 ( list ) list . addAll ( tempList ) ; \n\t\t} \n\telse $F57765 ( Collections , list ) } \n"}, {"code": "public void fireIndexedPropertyChange ( String propertyName , int index , boolean oldValue , boolean newValue ) { \n\tif ( oldValue != newValue ) { \n\t\tfireIndexedPropertyChange ( propertyName , index , Boolean . valueOf ( oldValue ) , Boolean . valueOf ( newValue ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F4203 $F10809 concat ( $F10809 first , $F10809 second , $F20474 type ) { \n\t$F10809 result = newArray ( type , first . length + second . length ) ; \n\t$F7057 ( System , first , result ) $F11244 ( System , second , result , first ) return result ; \n\t} \n"}, {"code": "public synchronized void writeToRemote ( byte b ) $F207 ( remoteBuffer , b ) "}, {"code": "$F1 public void drawSeries ( Canvas canvas , Paint paint , $F6205 points , $F31488 values , XYSeriesRenderer seriesRenderer , SupportSeriesRender supportSeriesRender , float yAxisValue , int seriesIndex , int startIndex ) { \n\t$F36951 ( seriesNr , mDataset ) $F2199 ( length , points ) $F14782 ( paint , seriesRenderer ) $F5597 ( paint , Style ) float halfDiffX = getHalfDiffX ( points , length , seriesNr ) ; \n\tint start = NUM00 ; \n\t$F36952 ( startIndex , start ) for ( int i = start ; \n\ti < length ; \n\ti += NUM00 ) { \n\t\tif ( points . size ( ) > i + NUM00 ) { \n\t\t\t$F36955 ( xMin , points , i ) $F36957 ( yMin , points , i ) $F36957 ( xMax , points , i ) $F36957 ( yMax , points , i ) drawBar ( canvas , xMin , yMin , xMax , yMax , halfDiffX , seriesNr , seriesIndex , paint ) ; \n\t\t\t} \n\t\t} \n\t$F14782 ( paint , seriesRenderer ) } \n"}, {"code": "private void beginGesture ( int scrollOffsetY , int scrollExtentY ) { \n\tmInitialTranslationY = getTranslationY ( ) ; \n\tboolean isInitiallyVisible = mInitialTranslationY < mTotalHeight ; \n\tint startingY = isInitiallyVisible ? scrollOffsetY : Math . min ( scrollOffsetY , mTotalHeight ) ; \n\tmInitialOffsetY = startingY + scrollExtentY ; \n\t} \n"}, {"code": "$F1 public void add ( String ... identifiers ) $F50757 ( whitelist , Arrays , identifiers ) "}, {"code": "public static void clear $F72 { \n\t$F3223 ( shopId ) shopCode . set ( NUM00 ) ; \n\t} \n"}, {"code": "$F1 public boolean communicationInitiated $F72 { \n\treturn bugsPopulated . getCount ( ) == NUM00 && communicationInitiated && networkClient . ready ( ) ; \n\t} \n"}, {"code": "$F127810 ( charset , Charset ) "}, {"code": "$F1 public void dump ( String prefix , FileDescriptor fd , PrintWriter writer , $F806 args ) { \n\tsuper . dump ( prefix , fd , writer , args ) ; \n\twriter . print ( prefix ) ; \n\t$F21384 ( writer ) writer . println ( rawQuery ) ; \n\twriter . print ( prefix ) ; \n\t$F21384 ( writer ) writer . println ( Arrays . toString ( args ) ) ; \n\t} \n"}, {"code": "public void addContigField ( ContigField field ) { \n\taddIdField ( mContigLines , field ) ; \n\t} \n"}, {"code": "boolean removeIndexEntry ( String resourceName , String policyName ) { \n\t$F10531 ( iter , topLevelEntries ) boolean processed = _BOOL ; \n\twhile ( ! processed && $F2921 ( iter ) ) { \n\t\t$F388331 ( resourceIndexEntry , iter ) if ( resourceIndexEntry . removeIndexEntry ( resourceType , resourceName , policyName ) ) { \n\t\t\tprocessed = _BOOL ; \n\t\t\t} \n\t\t} \n\treturn processed ; \n\t} \n"}, {"code": "public static double pdf $F7635 ( x , mu , shape ) { \n\tif ( ! ( x > NUM00 ) || x == Double . POSITIVE_INFINITY ) $F1083 final double v = ( x - mu ) / mu ; \n\tdouble t1 = Math . sqrt ( shape / ( MathUtil . TWOPI * x * x * x ) ) ; \n\treturn t1 > NUM00 ? t1 * Math . exp ( - shape * v * v * NUM00 / x ) : NUM00 ; \n\t} \n"}, {"code": "$F1 public void onStopTrackingTouch ( SeekBar seekBar ) { \n\t$F1086 ( pos , mItemList , mSelectedTracker ) final int delta = NUM00 / mItemList . size ( ) ; \n\tcp_mover . setProgress ( pos * delta + delta / NUM00 ) ; \n\t} \n"}, {"code": "public static int maxProfit $F23416 ( prices ) { \n\tif ( prices == null || prices . length < NUM00 ) $F1083 int max = NUM00 ; \n\tint min = prices [ NUM00 ] ; \n\tfor ( $F1139 ( i , prices ) ) { \n\t\t$F37717 ( min , Math , prices , i ) if ( prices [ i ] > prices [ i - NUM00 ] ) { \n\t\t\tmax = Math . max ( max , prices [ i ] - min ) ; \n\t\t\t} \n\t\t} \n\treturn max ; \n\t} \n"}, {"code": "public void add ( String string ) { \n\telements . add ( string == null ? JsonNull . INSTANCE : new JsonPrimitive ( string ) ) ; \n\t} \n"}, {"code": "public void componentAdded ( ContainerEvent e ) { \n\tLayer childLayer = ( Layer ) e . getChild ( ) ; \n\taddProjectionListener ( childLayer ) ; \n\tif ( ! removedLayers . removeElement ( childLayer ) ) $F6659 ( addedLayers , childLayer ) changeLayers ( e ) ; \n\t} \n"}, {"code": "public void processingInstruction ( String target , String data ) throws SAXException { \n\tcharactersFlush ( ) ; \n\t$F2199 ( dataIndex , m_data ) m_previous = addNode ( DTM . PROCESSING_INSTRUCTION_NODE , DTM . PROCESSING_INSTRUCTION_NODE , m_parents . peek ( ) , m_previous , - dataIndex , _BOOL ) ; \n\tm_data . addElement ( m_valuesOrPrefixes . stringToIndex ( target ) ) ; \n\tm_values . addElement ( data ) ; \n\tm_data . addElement ( m_valueIndex ++ ) ; \n\t} \n"}, {"code": "protected void panic ( String msg ) throws SAXException { \n\tSAXParseException spe = new SAXParseException ( msg , this ) ; \n\tmHandErr . fatalError ( spe ) ; \n\tthrow spe ; \n\t} \n"}, {"code": "private void updateNamespacePermissions ( UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity , List < NamespacePermissionEnum > namespacePermissions ) { \n\tuserNamespaceAuthorizationEntity . setReadPermission ( namespacePermissions . contains ( NamespacePermissionEnum . READ ) ) ; \n\tuserNamespaceAuthorizationEntity . setWritePermission ( namespacePermissions . contains ( NamespacePermissionEnum . WRITE ) ) ; \n\tuserNamespaceAuthorizationEntity . setExecutePermission ( namespacePermissions . contains ( NamespacePermissionEnum . EXECUTE ) ) ; \n\tuserNamespaceAuthorizationEntity . setGrantPermission ( namespacePermissions . contains ( NamespacePermissionEnum . GRANT ) ) ; \n\t} \n"}, {"code": "public static void report $F72 { \n\t$F18748 ( booted ) ControllerThread . report ( ) ; \n\tRuntimeMeasurements . report ( ) ; \n\tfor ( Enumeration < Organizer > e = organizers . elements ( ) ; \n\te . hasMoreElements ( ) ; \n\t) { \n\t\tOrganizer organizer = e . nextElement ( ) ; \n\t\torganizer . report ( ) ; \n\t\t} \n\tif ( options . FINAL_REPORT_LEVEL >= NUM00 ) { \n\t\tEdgeCounts . dumpCounts ( ) ; \n\t\tdcg . dumpGraph ( ) ; \n\t\t} \n\tif ( options . REPORT_INTERRUPT_STATS ) { \n\t\t$F152381 ( VM ) VM . sysWriteln ( NUM00 , RVMThread . timerTicks ) ; \n\t\tVM . sysWriteln ( NUM00 , controllerClock ) ; \n\t\tVM . sysWriteln ( NUM00 , ( int ) methodSamples . getTotalNumberOfSamples ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F35235 convertArrayToSet $F22194 ( source ) { \n\t$F113927 set = $F22202 ; \n\tfor ( Object element : source ) $F207 ( set , element ) return set ; \n\t} \n"}, {"code": "public static int intersectLineRectangle ( Line2D l , Rectangle2D r , $F52977 pts ) { \n\tdouble a1x = l . getX1 ( ) , a1y = l . getY1 ( ) ; \n\tdouble a2x = l . getX2 ( ) , a2y = l . getY2 ( ) ; \n\tdouble mxx = r . getMaxX ( ) , mxy = r . getMaxY ( ) ; \n\tdouble mnx = r . getMinX ( ) , mny = r . getMinY ( ) ; \n\t$F556263 ( pts ) $F556263 ( pts ) int i = NUM00 ; \n\t$F556265 ( intersectLineLine , mnx , mny , mxx , a1x , a1y , a2x , a2y , pts , i ) $F556267 ( intersectLineLine , mxx , mny , mxy , a1x , a1y , a2x , a2y , pts , i ) $F556268 ( i ) $F556265 ( intersectLineLine , mxx , mxy , mnx , a1x , a1y , a2x , a2y , pts , i ) $F556268 ( i ) $F556267 ( intersectLineLine , mnx , mxy , mny , a1x , a1y , a2x , a2y , pts , i ) return i ; \n\t} \n"}, {"code": "public static String cidrMaskToNetMask ( String cidrMask ) { \n\t$F1338 ( cidrMask ) int cidrMaskValue = NUM00 ; \n\ttry $F37473 ( cidrMaskValue , Integer , cidrMask ) $F62108 int cidrMaskFull = NUM00 < < ( NUM00 - cidrMaskValue ) ; \n\t$F91054 ( cidrMaskBits1 , cidrMaskFull ) $F91054 ( cidrMaskBits2 , cidrMaskFull ) $F91054 ( cidrMaskBits3 , cidrMaskFull ) $F91054 ( cidrMaskBits4 , cidrMaskFull ) $F280 ( netMaskBuf ) netMaskBuf . append ( cidrMaskBits1 ) ; \n\t$F84 ( netMaskBuf ) netMaskBuf . append ( cidrMaskBits2 ) ; \n\t$F84 ( netMaskBuf ) netMaskBuf . append ( cidrMaskBits3 ) ; \n\t$F84 ( netMaskBuf ) netMaskBuf . append ( cidrMaskBits4 ) ; \n\t$F92 ( netMaskBuf ) } \n"}, {"code": "public boolean inBounds ( MouseEvent e ) { \n\treturn e . getX ( ) > x && e . getX ( ) < x + width && e . getY ( ) > y && e . getY ( ) < y + height ; \n\t} \n"}, {"code": "public ClassPath ( $F2304 Iterable < DexFile > classPath , boolean checkPackagePrivateAccess ) { \n\tIterable < DexFile > dexFiles = Iterables . concat ( classPath , Lists . newArrayList ( getBasicClasses ( ) ) ) ; \n\tunknownClass = new UnknownClassProto ( this ) ; \n\t$F58338 ( loadedClasses , unknownClass ) this . checkPackagePrivateAccess = checkPackagePrivateAccess ; \n\tloadPrimitiveType ( NUM00 ) ; \n\tloadPrimitiveType ( NUM00 ) ; \n\tloadPrimitiveType ( NUM00 ) ; \n\tloadPrimitiveType ( NUM00 ) ; \n\tloadPrimitiveType ( NUM00 ) ; \n\tloadPrimitiveType ( NUM00 ) ; \n\tloadPrimitiveType ( NUM00 ) ; \n\tloadPrimitiveType ( NUM00 ) ; \n\tloadPrimitiveType ( NUM00 ) ; \n\tfor ( DexFile dexFile : dexFiles ) { \n\t\tfor ( ClassDef classDef : dexFile . getClasses ( ) ) { \n\t\t\tClassDef $F4985 ( prev , availableClasses , classDef ) ; \n\t\t\tif ( prev == null ) { \n\t\t\t\t$F58338 ( availableClasses , classDef ) } \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private boolean askToSave $F72 { \n\tif ( mainFrame . isProjectChanged ( ) ) { \n\t\tint response = JOptionPane . showConfirmDialog ( mainFrame , L10N . getLocalString ( NUM00 , NUM00 ) , L10N . getLocalString ( NUM00 , NUM00 ) , JOptionPane . YES_NO_CANCEL_OPTION , JOptionPane . WARNING_MESSAGE ) ; \n\t\tif ( response == JOptionPane . YES_OPTION ) { \n\t\t\tif ( mainFrame . getSaveFile ( ) != null ) $F5795 ( save ) else $F5795 ( saveAs ) } \n\t\telse if ( response == JOptionPane . CANCEL_OPTION ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public MapCursor addCursor ( MapCursor cursor ) { \n\tcursors . add ( cursor ) ; \n\treturn cursor ; \n\t} \n"}, {"code": "private boolean discardUpstreamMediaChunks ( int queueLength ) { \n\tif $F58405 ( mediaChunks , queueLength ) { \n\t\treturn _BOOL ; \n\t\t} \n\tlong startTimeUs = NUM00 ; \n\tlong endTimeUs = mediaChunks . getLast ( ) . endTimeUs ; \n\tBaseMediaChunk removed = null ; \n\twhile $F60125 ( mediaChunks , queueLength ) { \n\t\tremoved = mediaChunks . removeLast ( ) ; \n\t\tstartTimeUs = removed . startTimeUs ; \n\t\t} \n\tsampleQueue . discardUpstreamSamples ( removed . getFirstSampleIndex ( ) ) ; \n\tnotifyUpstreamDiscarded ( startTimeUs , endTimeUs ) ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "public MetalinkFileBuilder addFile ( String name ) { \n\tMetalinkFileBuilder newFile = new MetalinkFileBuilder ( name ) ; \n\tfiles . add ( newFile ) ; \n\treturn newFile ; \n\t} \n"}, {"code": "private void sendAfterConnect ( Channel ch , NettyChannelContext contextFinal , Operation request , NettyChannelGroup group ) { \n\tif ( request . getStatusCode ( ) < Operation . STATUS_CODE_FAILURE_THRESHOLD ) { \n\t\t$F168274 ( request ) } \n\telse { \n\t\trequest . fail ( request . getStatusCode ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "protected String checkProduction ( final Territory to , $F103 ( units ) , final PlayerID player ) { \n\tfinal List < Territory > producers = getAllProducers ( to , player , units ) ; \n\tif $F2979 ( producers ) { \n\t\treturn $F2989 ( to ) ; \n\t\t} \n\tCollections . sort ( producers , getBestProducerComparator ( to , units , player ) ) ; \n\tif ( ! getCanAllUnitsWithRequiresUnitsBePlacedCorrectly ( units , to ) ) $F2455 final int maxUnitsToBePlaced = getMaxUnitsToBePlaced ( units , to , player , _BOOL ) ; \n\tif ( ( maxUnitsToBePlaced != - NUM00 ) && $F1765 ( maxUnitsToBePlaced , units ) ) { \n\t\treturn $F10533 ( units ) + to . getName ( ) ; \n\t\t} \n\t$F1274 } \n"}, {"code": "$F1 public void closeWrite $F72 throws IOException { \n\t$F7254 ( _isWriteClosed ) _isWriteClosed = _BOOL ; \n\tSocketStream stream = _streamImpl ; \n\tif ( stream != null ) { \n\t\tstream . closeWrite ( ) ; \n\t\t} \n\telse if ( _s != null ) { \n\t\ttry { \n\t\t\t$F124256 ( _s ) } \n\t\tcatch ( UnsupportedOperationException e ) { \n\t\t\t$F120634 ( log , Level , e ) } \n\t\tcatch ( Exception e ) { \n\t\t\tlog . finer ( e . toString ( ) ) ; \n\t\t\t$F120634 ( log , Level , e ) } \n\t\t} \n\t} \n"}, {"code": "public boolean equals ( Object that ) { \n\treturn ( that instanceof CharSet ) && Arrays . equals ( chars , ( ( CharSet ) that ) . chars ) ; \n\t} \n"}, {"code": "public static Void processRecords ( List < KinesisEventRecord > inputRecords , KinesisUserRecordProcessor processor ) { \n\t$F53673 $F19827 ( rawRecords ) ; \n\tfor ( KinesisEventRecord rec : inputRecords ) { \n\t\trawRecords . add ( rec . getKinesis ( ) ) ; \n\t\t} \n\treturn processor . process ( UserRecord . deaggregate ( rawRecords ) ) ; \n\t} \n"}, {"code": "protected Font resolveFont ( SharedContext ctx , String font , float size , IdentValue weight , IdentValue style , IdentValue variant ) { \n\t$F3110 ( font ) $F8996 ( font ) if $F21935 ( font ) { \n\t\tfont = NUM00 ; \n\t\t} \n\tif $F21935 ( font ) { \n\t\tfont = NUM00 ; \n\t\t} \n\tif $F21935 ( font ) { \n\t\tfont = NUM00 ; \n\t\t} \n\tif ( font . equals ( NUM00 ) && style == IdentValue . OBLIQUE ) { \n\t\tfont = NUM00 ; \n\t\t} \n\tif ( font . equals ( NUM00 ) && style == IdentValue . ITALIC ) { \n\t\tfont = NUM00 ; \n\t\t} \n\tString fontInstanceName = getFontInstanceHashName ( ctx , font , size , weight , style , variant ) ; \n\t$F65325 ( instanceHash , fontInstanceName ) if $F1710 ( availableFontsHash , font ) { \n\t\tFont possiblyNullFont = availableFontsHash . get ( font ) ; \n\t\tFont rootFont = null ; \n\t\tif ( possiblyNullFont != null ) { \n\t\t\trootFont = possiblyNullFont ; \n\t\t\t} \n\t\telse { \n\t\t\trootFont = new Font ( font , Font . PLAIN , NUM00 ) ; \n\t\t\tavailableFontsHash . put ( font , rootFont ) ; \n\t\t\t} \n\t\tFont fnt = createFont ( ctx , rootFont , size , weight , style , variant ) ; \n\t\tinstanceHash . put ( fontInstanceName , fnt ) ; \n\t\treturn fnt ; \n\t\t} \n\t$F1274 } \n"}, {"code": "public ArrayRealVector $F196672 ( d , pos , size ) throws MathIllegalArgumentException , NullArgumentException { \n\tif ( d == null ) { \n\t\tthrow new NullArgumentException $F72 ; \n\t\t} \n\tif ( d . length < pos + size ) { \n\t\tthrow new MathIllegalArgumentException ( LocalizedCoreFormats . NUMBER_TOO_LARGE , pos + size , d . length ) ; \n\t\t} \n\t$F10254 ( data , size ) $F21535 ( System , d , pos , data , size ) } \n"}, {"code": "public void clearPaymentMethodsById $F24643 ( paymentMethodIdsToRemove ) { \n\tif $F4329 ( UtilValidate , paymentMethodIdsToRemove ) $F665 for ( Iterator < CartPaymentInfo > iter = paymentInfo . iterator ( ) ; \n\titer . hasNext ( ) ; \n\t) { \n\t\tCartPaymentInfo info = iter . next ( ) ; \n\t\tif ( paymentMethodIdsToRemove . contains ( info . paymentMethodId ) ) $F38599 ( iter ) } \n\t} \n"}, {"code": "$F1 public void clean $F72 { \n\tsetCurrentPoints ( NUM00 ) ; \n\tcheckState ( ) ; \n\t} \n"}, {"code": "public void handleButton2Request ( RequestInvocationEvent event ) { \n\tsetPageSessionAttribute ( getTrackingTabIDName ( ) , AMAdminConstants . FED_TAB_ID ) ; \n\tsetPageSessionAttribute ( AMAdminConstants . PREVIOUS_TAB_ID , getTrackingTabIDName ( ) ) ; \n\tFederationViewBean vb = ( FederationViewBean ) getViewBean ( FederationViewBean . class ) ; \n\tbackTrail ( ) ; \n\tpassPgSessionMap ( vb ) ; \n\t$F50333 ( vb , getRequestContext ) } \n"}, {"code": "$F1 public void performRequest ( String request ) { \n\t$F87844 ( request , stop ) } \n"}, {"code": "public $F96 toBytes $F72 { \n\t$F2175 ( returnBytes , bytesLength ) $F135 ( System , bytes , returnBytes , bytesLength ) return returnBytes ; \n\t} \n"}, {"code": "public void startCheck $F72 { \n\tchecker = new Thread ( new CheckForUpdate $F72 ) ; \n\tchecker . setPriority ( Thread . MIN_PRIORITY ) ; \n\t$F2346 ( checker ) } \n"}, {"code": "$F1 public boolean eIsSet ( int featureID ) { \n\tswitch ( featureID ) { \n\t\tcase SGraphPackage . TRANSITION__TRIGGER : return trigger != null ; \n\t\tcase SGraphPackage . TRANSITION__EFFECT : return effect != null ; \n\t\tcase SGraphPackage . TRANSITION__PROPERTIES : $F6441 ( properties ) case SGraphPackage . TRANSITION__DOCUMENTATION : $F6439 ( DOCUMENTATION_EDEFAULT , documentation ) case SGraphPackage . TRANSITION__TARGET : return target != null ; \n\t\tcase SGraphPackage . TRANSITION__SOURCE : return basicGetSource ( ) != null ; \n\t\t} \n\t$F6444 ( super , featureID ) } \n"}, {"code": "public boolean isAckSeen $F72 { \n\treturn this . ackSeen ; \n\t} \n"}, {"code": "protected void uninstallListeners $F72 { \n\tsuper . uninstallListeners ( ) ; \n\tsplitPane . removePropertyChangeListener ( this ) ; \n\t} \n"}, {"code": "private static Collector < SegmentInfo , ? , Map < String , SegmentInfo > > partitionsToMapCollector $F72 { \n\treturn Collector . of ( $F32718 ) ; \n\t} \n"}, {"code": "public boolean isCrc $F72 { \n\treturn isFlags ( FLAG_CACHED_VALUES_CHECKED & FLAG_CRC_CALCED ) ; \n\t} \n"}, {"code": "$F1654 ( queue ) "}, {"code": "$F1 public StringBuffer format ( double number , StringBuffer result , FieldPosition fieldPosition ) { \n\tboolean tryFastPath = _BOOL ; \n\tif ( fieldPosition == DontCareFieldPosition . INSTANCE ) tryFastPath = _BOOL ; \n\telse { \n\t\tfieldPosition . setBeginIndex ( NUM00 ) ; \n\t\tfieldPosition . setEndIndex ( NUM00 ) ; \n\t\t} \n\tif ( tryFastPath ) { \n\t\tString tempResult = fastFormat ( number ) ; \n\t\tif ( tempResult != null ) { \n\t\t\tresult . append ( tempResult ) ; \n\t\t\treturn result ; \n\t\t\t} \n\t\t} \n\treturn format ( number , result , fieldPosition . getFieldDelegate ( ) ) ; \n\t} \n"}, {"code": "private void buildCursorConditionally ( MatrixCursor cursor , CharacterRecord cr , String selection , $F806 selectionArgs ) { \n\tif ( selectionArgs == null ) cursor . addRow ( new Object [ ] { \n\t\tcr . getId ( ) , cr . getName ( ) , cr . getRace ( ) } \n\t) ; \n\telse for ( String item : selectionArgs ) if ( ( selection . equals ( CharacterContract . CharacterEntry . COLUMN_NAME ) && $F3174 ( item , cr ) ) || ( selection . equals ( CharacterContract . CharacterEntry . COLUMN_RACE ) && item . equals ( cr . getRace ( ) ) ) ) { \n\t\tcursor . addRow ( new Object [ ] { \n\t\t\tcr . getId ( ) , cr . getName ( ) , cr . getRace ( ) } \n\t\t) ; \n\t\t} \n\t} \n"}, {"code": "public ModpackFileSelectionPanel ( WizardController controller , Map wizardData , File gameDir , BiFunction < String , Boolean , Integer > blackList ) { \n\tinitComponents ( ) ; \n\tthis . controller = controller ; \n\tthis . wizardData = wizardData ; \n\tthis . blackList = blackList ; \n\tCheckBoxTreeNode root = create ( gameDir , NUM00 ) ; \n\tjTree1 . setModel ( new DefaultTreeModel ( root ) ) ; \n\tjTree1 . setCellRenderer ( new CheckBoxTreeCellRenderer $F72 ) ; \n\tjTree1 . addMouseListener ( new CheckBoxTreeNodeSelectionListener $F72 ) ; \n\t$F545 ( wizardData , root ) } \n"}, {"code": "public Shape paintLayer ( Graphics g , int offs0 , int offs1 , Shape bounds , JTextComponent c , View view ) { \n\t$F20230 ( g2d , g ) Composite originalComposite = null ; \n\tif $F65233 ( getAlpha ) { \n\t\toriginalComposite = g2d . getComposite ( ) ; \n\t\tg2d . setComposite ( getAlphaComposite ( ) ) ; \n\t\t} \n\tPaint paint = getPaint ( ) ; \n\tif ( paint == null ) g2d . setColor ( c . getSelectionColor ( ) ) ; \n\telse g2d . setPaint ( paint ) ; \n\tif ( offs0 == view . getStartOffset ( ) && offs1 == view . getEndOffset ( ) ) { \n\t\tRectangle alloc ; \n\t\tif ( bounds instanceof Rectangle ) alloc = ( Rectangle ) bounds ; \n\t\telse alloc = bounds . getBounds ( ) ; \n\t\t$F109734 ( g2d , alloc ) if $F65233 ( getAlpha ) g2d . setComposite ( originalComposite ) ; \n\t\treturn alloc ; \n\t\t} \n\telse { \n\t\ttry { \n\t\t\tShape shape = view . modelToView ( offs0 , Position . Bias . Forward , offs1 , Position . Bias . Backward , bounds ) ; \n\t\t\tRectangle r = ( shape instanceof Rectangle ) ? ( Rectangle ) shape : shape . getBounds ( ) ; \n\t\t\tif ( roundedEdges ) { \n\t\t\t\tg2d . fillRoundRect ( r . x , r . y , r . width , r . height , ARCWIDTH , ARCHEIGHT ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\t$F109734 ( g2d , r ) } \n\t\t\tif $F65233 ( getAlpha ) g2d . setComposite ( originalComposite ) ; \n\t\t\treturn r ; \n\t\t\t} \n\t\t$F203264 ( ble ) finally { \n\t\t\tif $F65233 ( getAlpha ) g2d . setComposite ( originalComposite ) ; \n\t\t\t} \n\t\t} \n\t$F1274 } \n"}, {"code": "private void createContainerIfNecessary $F72 { \n\tif ( container . isFull ( ) ) { \n\t\tcontainer = new TimerRawContainer $F72 ; \n\t\tdata . add ( container ) ; \n\t\t} \n\t} \n"}, {"code": "private void processUpdateCounts $F11072 ( updateCounts , commandsInBatch ) { \n\tif ( updateCounts . length < commandsInBatch ) { \n\t\terror . emit ( tuples . get ( updateCounts . length + batchStartIdx ) ) ; \n\t\terrorTuples ++ ; \n\t\ttuplesWrittenSuccessfully += updateCounts . length ; \n\t\tbatchStartIdx += updateCounts . length + NUM00 ; \n\t\tif ( ( tuples . size ( ) - batchStartIdx ) > NUM00 ) $F5795 ( processBatch ) } \n\telse { \n\t\ttuplesWrittenSuccessfully = commandsInBatch ; \n\t\tfor ( $F119 ( i , commandsInBatch ) ) { \n\t\t\tif ( updateCounts [ i ] == Statement . EXECUTE_FAILED ) { \n\t\t\t\terror . emit ( tuples . get ( i + batchStartIdx ) ) ; \n\t\t\t\terrorTuples ++ ; \n\t\t\t\ttuplesWrittenSuccessfully -- ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public int chooseProtocolVersion $F72 { \n\treturn preferredProtocolVersion ; \n\t} \n"}, {"code": "public Sensor createNewSensor ( String systemName , String userName ) { \n\tSensor s ; \n\tString sName = AcelaAddress . normalizeSystemName ( systemName ) ; \n\tif $F3057 ( sName ) $F337969 ( log , systemName ) s = getBySystemName ( sName ) ; \n\tif ( s != null ) $F337969 ( log , systemName ) String altName = AcelaAddress . convertSystemNameToAlternate ( sName ) ; \n\ts = getBySystemName ( altName ) ; \n\tif ( s != null ) { \n\t\tlog . error ( NUM00 + systemName + NUM00 + altName + NUM00 ) ; \n\t\t$F1274 } \n\tint bit = AcelaAddress . getBitFromSystemName ( sName ) ; \n\tif ( ( bit < NUM00 ) || ( bit >= NUM00 ) ) { \n\t\tlog . error ( $F11846 ( Integer , bit ) ) ; \n\t\t$F1274 } \n\tif ( userName == null ) { \n\t\ts = new AcelaSensor ( sName ) ; \n\t\t} \n\telse { \n\t\ts = new AcelaSensor ( sName , userName ) ; \n\t\t} \n\tAcelaNode node = AcelaAddress . getNodeFromSystemName ( sName , _memo ) ; \n\tif ( node == null ) { \n\t\t$F28293 ( log , sName ) return s ; \n\t\t} \n\tif ( ! node . hasActiveSensors ) { \n\t\tint newnodeaddress ; \n\t\tnewnodeaddress = node . getNodeAddress ( ) ; \n\t\t$F34419 ( log , newnodeaddress ) return s ; \n\t\t} \n\tnode . registerSensor ( s , bit ) ; \n\treturn s ; \n\t} \n"}, {"code": "public static InputStream needStream ( String propertyName ) throws NoSuchPropertyException , FileNotFoundException , MaryConfigurationException { \n\tMaryProperties . needProperty ( propertyName ) ; \n\treturn getStream ( propertyName ) ; \n\t} \n"}, {"code": "$F56659 ( a , b ) "}, {"code": "public static String networkNameToString $F24576 ( data , offset , length ) { \n\tString ret ; \n\tif ( ( data [ offset ] & NUM00 ) != NUM00 || length < NUM00 ) $F2455 switch ( ( data [ offset ] > > > NUM00 ) & NUM00 ) { \n\t\t$F3366 int countSeptets ; \n\t\tint unusedBits = data [ offset ] & NUM00 ; \n\t\tcountSeptets = ( ( ( length - NUM00 ) * NUM00 ) - unusedBits ) / NUM00 ; \n\t\tret = GsmAlphabet . gsm7BitPackedToString ( data , offset + NUM00 , countSeptets ) ; \n\t\t$F597 $F3366 try { \n\t\t\tret = new String ( data , offset + NUM00 , length - NUM00 , NUM00 ) ; \n\t\t\t} \n\t\tcatch ( UnsupportedEncodingException ex ) { \n\t\t\tret = NUM00 ; \n\t\t\tLog . e ( LOG_TAG , NUM00 , ex ) ; \n\t\t\t} \n\t\t$F597 $F1267 ret = NUM00 ; \n\t\t$F597 } \n\tif ( ( data [ offset ] & NUM00 ) != NUM00 ) $F845 return ret ; \n\t} \n"}, {"code": "public void add ( Marker marker ) $F207 ( mItems , marker ) "}, {"code": "$F41325 ( in , result , _BOOL , c , length ) "}, {"code": "private static Map . Entry < DateTime , TimeSeriesValue > findName ( List < TimeSeriesCollection > c , GroupName name ) { \n\tListIterator < TimeSeriesCollection > iter = c . listIterator ( ) ; \n\twhile $F2921 ( iter ) { \n\t\tfinal int idx = iter . nextIndex ( ) ; \n\t\tfinal TimeSeriesCollection tsdata = iter . next ( ) ; \n\t\tfinal Optional < TimeSeriesValue > found = tsdata . get ( name ) ; \n\t\tif $F16464 ( found ) return SimpleMapEntry . create ( tsdata . getTimestamp ( ) , found . get ( ) ) ; \n\t\t} \n\t$F4638 } \n"}, {"code": "public $F529 finalizeOrderEntryPayment ( String checkOutPaymentId , BigDecimal amount , boolean singleUse , boolean append ) { \n\t$F6259 ( result , ServiceUtil ) if $F35028 ( UtilValidate , checkOutPaymentId ) { \n\t\tif ( ! append ) { \n\t\t\tcart . clearPayments ( ) ; \n\t\t\t} \n\t\tcart . addPaymentAmount ( checkOutPaymentId , amount , singleUse ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public void deploy ( String routeId , String routeName , JsonValue routeConfig ) throws RouterHandlerException { \n\tReject . ifNull ( routeName ) ; \n\t$F8934 ( write ) try { \n\t\tload ( routeId , routeName , routeConfig . copy ( ) ) ; \n\t\tdirectoryMonitor . store ( routeId , routeConfig ) ; \n\t\t$F21153 ( logger , routeId , routeName ) } \n\tcatch ( IOException e ) { \n\t\tthrow new RouterHandlerException ( format ( NUM00 , routeId ) , e ) ; \n\t\t} \n\t$F796 ( write ) } \n"}, {"code": "private static $F1469 subscriptForDigit ( int digit ) { \n\treturn Character . toChars ( NUM00 + digit ) ; \n\t} \n"}, {"code": "private FsPermission permission ( IgfsFile file ) { \n\tString perm = file . property ( IgfsUtils . PROP_PERMISSION , null ) ; \n\tif ( perm == null ) return FsPermission . getDefault ( ) ; \n\ttry { \n\t\treturn new FsPermission ( ( short ) Integer . parseInt ( perm , NUM00 ) ) ; \n\t\t} \n\tcatch ( NumberFormatException ignore ) { \n\t\treturn FsPermission . getDefault ( ) ; \n\t\t} \n\t} \n"}, {"code": "public SimpleMailboxACL $F72 { \n\tthis . entries = Collections . emptyMap ( ) ; \n\t} \n"}, {"code": "private void readStreamResult ( InH3 hIn , HeadersAmp headers ) throws IOException { \n\tServiceRefAmp serviceRef = readToAddress ( hIn ) ; \n\t$F58758 ( id , hIn ) QueryRefAmp queryRef = serviceRef . getQueryRef ( id ) ; \n\tif ( queryRef != null ) { \n\t\tClassLoader loader = queryRef . getClassLoader ( ) ; \n\t\t$F686 ( thread , Thread ) thread . setContextClassLoader ( loader ) ; \n\t\t} \n\t$F5952 ( sequence , hIn ) $F6689 values = ( List ) hIn . readObject ( ) ; \n\tThrowable exn = ( Throwable ) hIn . readObject ( Throwable . class ) ; \n\t$F6622 ( isComplete , hIn ) if $F155449 ( log , _logLevel ) { \n\t\tlog . log ( _logLevel , NUM00 + values + NUM00 + isComplete + NUM00 + this + NUM00 + NUM00 + id + NUM00 + serviceRef + NUM00 + headers + NUM00 ) ; \n\t\t} \n\tif ( queryRef != null ) { \n\t\tif ( queryRef . accept ( headers , values , sequence , isComplete ) ) { \n\t\t\tserviceRef . removeQueryRef ( id ) ; \n\t\t\t} \n\t\tif ( exn != null ) { \n\t\t\tserviceRef . removeQueryRef ( id ) ; \n\t\t\tqueryRef . fail ( headers , exn ) ; \n\t\t\t} \n\t\t} \n\telse if $F89967 ( log , Level ) { \n\t\tlog . warning ( NUM00 + id + NUM00 + serviceRef + NUM00 + headers ) ; \n\t\t} \n\t} \n"}, {"code": "public static int rectCrossingsForPath ( PathIterator pi , double rxmin , double rymin , double rxmax , double rymax ) { \n\tif ( rxmax <= rxmin || rymax <= rymin ) $F1083 if $F38577 ( pi ) $F1083 double coords [ ] = $F1990 ; \n\tif ( pi . currentSegment ( coords ) != PathIterator . SEG_MOVETO ) { \n\t\tthrow new IllegalPathStateException $F3487 ; \n\t\t} \n\t$F24630 ( pi ) double curx , cury , movx , movy , endx , endy ; \n\tcurx = movx = coords [ NUM00 ] ; \n\tcury = movy = coords [ NUM00 ] ; \n\tint crossings = NUM00 ; \n\twhile ( crossings != RECT_INTERSECTS && ! pi . isDone ( ) ) { \n\t\tswitch ( pi . currentSegment ( coords ) ) { \n\t\t\tcase PathIterator . SEG_MOVETO : if ( curx != movx || cury != movy ) { \n\t\t\t\tcrossings = rectCrossingsForLine ( crossings , rxmin , rymin , rxmax , rymax , curx , cury , movx , movy ) ; \n\t\t\t\t} \n\t\t\tmovx = curx = coords [ NUM00 ] ; \n\t\t\tmovy = cury = coords [ NUM00 ] ; \n\t\t\t$F597 case PathIterator . SEG_LINETO : endx = coords [ NUM00 ] ; \n\t\t\tendy = coords [ NUM00 ] ; \n\t\t\tcrossings = rectCrossingsForLine ( crossings , rxmin , rymin , rxmax , rymax , curx , cury , endx , endy ) ; \n\t\t\tcurx = endx ; \n\t\t\tcury = endy ; \n\t\t\t$F597 case PathIterator . SEG_QUADTO : endx = coords [ NUM00 ] ; \n\t\t\tendy = coords [ NUM00 ] ; \n\t\t\tcrossings = rectCrossingsForQuad ( crossings , rxmin , rymin , rxmax , rymax , curx , cury , coords [ NUM00 ] , coords [ NUM00 ] , endx , endy , NUM00 ) ; \n\t\t\tcurx = endx ; \n\t\t\tcury = endy ; \n\t\t\t$F597 case PathIterator . SEG_CUBICTO : endx = coords [ NUM00 ] ; \n\t\t\tendy = coords [ NUM00 ] ; \n\t\t\tcrossings = rectCrossingsForCubic ( crossings , rxmin , rymin , rxmax , rymax , curx , cury , coords [ NUM00 ] , coords [ NUM00 ] , coords [ NUM00 ] , coords [ NUM00 ] , endx , endy , NUM00 ) ; \n\t\t\tcurx = endx ; \n\t\t\tcury = endy ; \n\t\t\t$F597 case PathIterator . SEG_CLOSE : if ( curx != movx || cury != movy ) { \n\t\t\t\tcrossings = rectCrossingsForLine ( crossings , rxmin , rymin , rxmax , rymax , curx , cury , movx , movy ) ; \n\t\t\t\t} \n\t\t\tcurx = movx ; \n\t\t\tcury = movy ; \n\t\t\t$F597 } \n\t\t$F24630 ( pi ) } \n\tif ( crossings != RECT_INTERSECTS && ( curx != movx || cury != movy ) ) { \n\t\tcrossings = rectCrossingsForLine ( crossings , rxmin , rymin , rxmax , rymax , curx , cury , movx , movy ) ; \n\t\t} \n\treturn crossings ; \n\t} \n"}, {"code": "public void updateFieldVisibility ( NeuronUpdateRule rule ) { \n\tboolean bounded = rule instanceof BoundedUpdateRule ; \n\tboolean clip = _BOOL ; \n\tsetBoundsPanelVisible ( bounded ) ; \n\tif ( bounded ) { \n\t\tclip = rule instanceof ClippableUpdateRule ; \n\t\tclippingDropDown . setSelected ( clip ) ; \n\t\t} \n\tsetClippingPanelVisible ( clip ) ; \n\tsetBoundsEnabled ( bounded ) ; \n\t} \n"}, {"code": "$F1 public int hashCode $F72 { \n\tint hash = NUM00 ; \n\t$F156574 ( altFormat , hash ) if ( projection != null ) { \n\t\thash = hash * NUM00 ; \n\t\thash += projection . hashCode ( ) ; \n\t\t} \n\tif ( version != null ) { \n\t\thash = hash * NUM00 ; \n\t\thash += version . hashCode ( ) ; \n\t\t} \n\treturn hash ; \n\t} \n"}, {"code": "public void removeOkListener ( ActionListener a ) { \n\tm_okBut . removeActionListener ( a ) ; \n\t} \n"}, {"code": "void change_item_shape ( BrdItem p_item , int p_shape_no , ShapeTile p_new_shape ) { \n\tAwtreeNodeLeaf [ ] old_entries = p_item . get_search_tree_entries ( this ) ; \n\tAwtreeNodeLeaf [ ] new_leaf_arr = new AwtreeNodeLeaf [ old_entries . length ] ; \n\tShapeTile [ ] new_precalculated_tree_shapes = new ShapeTile [ old_entries . length ] ; \n\tremove_leaf ( old_entries [ p_shape_no ] ) ; \n\tfor ( $F9808 ( i , new_precalculated_tree_shapes ) ) { \n\t\tif ( i == p_shape_no ) { \n\t\t\tnew_precalculated_tree_shapes [ i ] = p_new_shape ; \n\t\t\t} \n\t\telse { \n\t\t\tnew_precalculated_tree_shapes [ i ] = p_item . get_tree_shape ( this , i ) ; \n\t\t\tnew_leaf_arr [ i ] = old_entries [ i ] ; \n\t\t\t} \n\t\t} \n\tp_item . set_precalculated_tree_shapes ( new_precalculated_tree_shapes , this ) ; \n\tnew_leaf_arr [ p_shape_no ] = insert ( p_item , p_shape_no ) ; \n\tp_item . set_search_tree_entries ( this , new_leaf_arr ) ; \n\t} \n"}, {"code": "public JQuickStartPane ( KseFrame kseFrame ) { \n\tsuper ( GRADIENT_COLOR_1 , GRADIENT_COLOR_2 ) ; \n\tthis . kseFrame = kseFrame ; \n\tnew DropTarget ( this , this ) ; \n\tinitComponents ( ) ; \n\t} \n"}, {"code": "protected String decode ( String urlString ) { \n\ttry { \n\t\tClass clazz = URLDecoder . class ; \n\t\tMethod method = clazz . getDeclaredMethod ( NUM00 , new Class [ ] { \n\t\t\t$F10062 , $F10062 } \n\t\t) ; \n\t\tif $F48846 ( urlString ) { \n\t\t\t$F1749 ( len , urlString ) $F1350 ( buf , len ) for ( $F119 ( i , len ) ) { \n\t\t\t\t$F1280 ( c , urlString , i ) if ( c == NUM00 ) $F84 ( buf ) else buf . append ( c ) ; \n\t\t\t\t} \n\t\t\t$F6947 ( urlString , buf ) } \n\t\tObject result = method . invoke ( null , new Object [ ] { \n\t\t\turlString , NUM00 } \n\t\t) ; \n\t\tif ( result != null ) return ( String ) result ; \n\t\t} \n\t$F3957 boolean replaced = _BOOL ; \n\t$F39526 ( encodedBytes , urlString ) int encodedLength = encodedBytes . length ; \n\t$F2175 ( decodedBytes , encodedLength ) int decodedLength = NUM00 ; \n\tfor ( $F119 ( i , encodedLength ) ) { \n\t\tbyte b = encodedBytes [ i ] ; \n\t\tif ( b == NUM00 ) { \n\t\t\tif ( i + NUM00 >= encodedLength ) $F29525 ( urlString ) byte enc1 = encodedBytes [ ++ i ] ; \n\t\t\tbyte enc2 = encodedBytes [ ++ i ] ; \n\t\t\tb = ( byte ) ( $F88401 ( hexToByte , enc1 ) + hexToByte ( enc2 ) ) ; \n\t\t\treplaced = _BOOL ; \n\t\t\t} \n\t\tdecodedBytes [ decodedLength ++ ] = b ; \n\t\t} \n\t$F25096 ( replaced , urlString ) try { \n\t\treturn $F202411 ( decodedBytes , decodedLength ) ; \n\t\t} \n\tcatch ( UnsupportedEncodingException e ) { \n\t\t$F62310 ( decodedBytes , decodedLength ) } \n\t} \n"}, {"code": "public static String indent ( final int depth ) { \n\tif ( depth < NUM00 ) $F2455 return ws . substring ( NUM00 , Math . min ( ws . length ( ) , depth * NUM00 ) ) ; \n\t} \n"}, {"code": "public ExceptionlessOutputStream ( OutputStream out ) { \n\tsuper ( new DataOutputStream ( out ) ) ; \n\tdos = ( DataOutputStream ) this . out ; \n\t} \n"}, {"code": "public T advanceToElement ( $F54596 predicate ) { \n\tNode $F4203 start = head ; \n\t$F1275 ( head ) do { \n\t\tT currElement = advance ( ) ; \n\t\tif $F167956 ( predicate , currElement ) { \n\t\t\treturn currElement ; \n\t\t\t} \n\t\t} \n\twhile ( head != start ) ; \n\t$F1274 } \n"}, {"code": "public void addTrace ( final Trace trace ) { \n\ttraceList . add ( trace ) ; \n\tadd ( trace ) ; \n\trevalidate ( ) ; \n\t} \n"}, {"code": "public static void pingAllDevices ( String message ) throws IOException { \n\tSender sender = new Sender ( Ids . API_KEY ) ; \n\tfor ( DeviceInfo deviceInfo : endpoint . listDeviceInfo ( ) ) { \n\t\tdoSendViaGcm ( message , sender , deviceInfo ) ; \n\t\t} \n\t} \n"}, {"code": "$F52428 ( tag , msg , args , sLevel , LEVEL_WARNING , String , Log ) "}, {"code": "private void findMatchesInContexts ( List < NumberContext > contexts , boolean isValid , boolean isPossible , String region , String number ) { \n\tif ( isValid ) { \n\t\tdoTestInContext ( number , region , contexts , Leniency . VALID ) ; \n\t\t} \n\telse { \n\t\tfor ( NumberContext context : contexts ) { \n\t\t\tString text = context . leadingText + number + context . trailingText ; \n\t\t\tassertTrue ( NUM00 + text , hasNoMatches ( phoneUtil . findNumbers ( text , region ) ) ) ; \n\t\t\t} \n\t\t} \n\tif ( isPossible ) { \n\t\tdoTestInContext ( number , region , contexts , Leniency . POSSIBLE ) ; \n\t\t} \n\telse { \n\t\tfor ( NumberContext context : contexts ) { \n\t\t\tString text = context . leadingText + number + context . trailingText ; \n\t\t\tassertTrue ( NUM00 + text , hasNoMatches ( phoneUtil . findNumbers ( text , region , Leniency . POSSIBLE , Long . MAX_VALUE ) ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void testGeneralPunctuationCategory $F72 { \n\t$F806 s = { \n\t\tNUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } \n\t; \n\tString regexp = NUM00 ; \n\tfor ( $F1139 ( i , s ) ) { \n\t\t$F55449 ( pattern , Pattern , regexp ) Matcher matcher = pattern . matcher ( s [ i ] ) ; \n\t\tassertTrue ( matcher . find ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public int hashCode $F72 { \n\tint code = NUM00 ; \n\tif ( eSubjects != null ) { \n\t\tfor ( EntitlementSubject eSubject : eSubjects ) { \n\t\t\tcode += eSubject . hashCode ( ) ; \n\t\t\t} \n\t\t} \n\t$F156574 ( pSubjectName , code ) return code ; \n\t} \n"}, {"code": "private void assignRandomLowerTriangularMatrix ( int n , SecureRandom sr ) { \n\tnumRows = n ; \n\tnumColumns = n ; \n\tlength = ( n + NUM00 ) > > > NUM00 ; \n\tmatrix = new int [ numRows ] [ length ] ; \n\tfor ( $F119 ( i , numRows ) ) { \n\t\t$F297790 ( q , i ) int r = i & NUM00 ; \n\t\tint s = NUM00 - r ; \n\t\tr = NUM00 < < r ; \n\t\tfor ( $F119 ( j , q ) ) { \n\t\t\tmatrix [ i ] [ j ] = sr . nextInt ( ) ; \n\t\t\t} \n\t\tmatrix [ i ] [ q ] = ( sr . nextInt ( ) > > > s ) | r ; \n\t\tfor ( $F2634 ( j , q , length ) ) $F211213 ( matrix , i , j ) } \n\t} \n"}, {"code": "private boolean loadWithInspectItClassLoader ( String className ) $F121470 ( className , CLASS_NAME_PREFIX ) "}, {"code": "public static void addCustomCommands ( String commands , ContextMenu m ) { \n\t$F275 ( matcher , CUSTOM_COMMANDS_PATTERN , commands ) boolean sep = _BOOL ; \n\twhile $F281 ( matcher ) { \n\t\t$F45144 ( match , matcher ) if $F3057 ( match ) { \n\t\t\tsep = _BOOL ; \n\t\t\t} \n\t\telse { \n\t\t\t$F283 ( command , matcher ) String submenu = null ; \n\t\t\tif $F3106 ( match ) { \n\t\t\t\tsubmenu = CUSTOM_COMMANDS_SUBMENU ; \n\t\t\t\t} \n\t\t\tif ( sep ) { \n\t\t\t\tm . addSeparator ( submenu ) ; \n\t\t\t\t} \n\t\t\tm . addSubItem ( NUM00 + command , Helper . replaceUnderscoreWithSpace ( command ) , submenu ) ; \n\t\t\tsep = _BOOL ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void paintBorder $F6065 ( c , g , x , y , width , height ) { \n\tBorder border = getBorder ( ) ; \n\tString title = getTitle ( ) ; \n\tif $F2772 ( title ) { \n\t\tint edge = ( border instanceof TitledBorder ) ? NUM00 : EDGE_SPACING ; \n\t\tJLabel label = getLabel ( c ) ; \n\t\t$F86864 ( size , label ) Insets insets = getBorderInsets ( border , c , $F32450 ) ; \n\t\tint borderX = x + edge ; \n\t\tint borderY = y + edge ; \n\t\tint borderW = width - edge - edge ; \n\t\tint borderH = height - edge - edge ; \n\t\tint labelY = y ; \n\t\tint labelH = size . height ; \n\t\tint position = getPosition ( ) ; \n\t\tswitch ( position ) { \n\t\t\tcase ABOVE_TOP : insets . left = NUM00 ; \n\t\t\tinsets . right = NUM00 ; \n\t\t\tborderY += labelH - edge ; \n\t\t\tborderH -= labelH - edge ; \n\t\t\t$F597 case TOP : insets . top = edge + insets . top / NUM00 - labelH / NUM00 ; \n\t\t\tif ( insets . top < edge ) { \n\t\t\t\tborderY -= insets . top ; \n\t\t\t\tborderH += insets . top ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tlabelY += insets . top ; \n\t\t\t\t} \n\t\t\t$F597 case BELOW_TOP : labelY += insets . top + edge ; \n\t\t\t$F597 case ABOVE_BOTTOM : labelY += height - labelH - insets . bottom - edge ; \n\t\t\t$F597 case BOTTOM : labelY += height - labelH ; \n\t\t\tinsets . bottom = edge + ( insets . bottom - labelH ) / NUM00 ; \n\t\t\tif ( insets . bottom < edge ) { \n\t\t\t\tborderH += insets . bottom ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tlabelY -= insets . bottom ; \n\t\t\t\t} \n\t\t\t$F597 case BELOW_BOTTOM : insets . left = NUM00 ; \n\t\t\tinsets . right = NUM00 ; \n\t\t\tlabelY += height - labelH ; \n\t\t\tborderH -= labelH - edge ; \n\t\t\t$F597 } \n\t\tinsets . left += edge + TEXT_INSET_H ; \n\t\tinsets . right += edge + TEXT_INSET_H ; \n\t\tint labelX = x ; \n\t\tint labelW = width - insets . left - insets . right ; \n\t\tif ( labelW > size . width ) { \n\t\t\tlabelW = size . width ; \n\t\t\t} \n\t\tswitch ( getJustification ( c ) ) { \n\t\t\tcase LEFT : labelX += insets . left ; \n\t\t\t$F597 case RIGHT : labelX += width - insets . right - labelW ; \n\t\t\t$F597 case CENTER : labelX += ( width - labelW ) / NUM00 ; \n\t\t\t$F597 } \n\t\tif ( border != null ) { \n\t\t\tif ( ( position != TOP ) && ( position != BOTTOM ) ) { \n\t\t\t\tborder . paintBorder ( c , g , borderX , borderY , borderW , borderH ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tGraphics g2 = g . create ( ) ; \n\t\t\t\tif ( g2 instanceof Graphics2D ) { \n\t\t\t\t\t$F20230 ( g2d , g2 ) Path2D path = new Path2D . Float $F72 ; \n\t\t\t\t\tpath . append ( new Rectangle ( borderX , borderY , borderW , labelY - borderY ) , _BOOL ) ; \n\t\t\t\t\tpath . append ( new Rectangle ( borderX , labelY , labelX - borderX - TEXT_SPACING , labelH ) , _BOOL ) ; \n\t\t\t\t\tpath . append ( new Rectangle ( labelX + labelW + TEXT_SPACING , labelY , borderX - labelX + borderW - labelW - TEXT_SPACING , labelH ) , _BOOL ) ; \n\t\t\t\t\tpath . append ( new Rectangle ( borderX , labelY + labelH , borderW , borderY - labelY + borderH - labelH ) , _BOOL ) ; \n\t\t\t\t\tg2d . clip ( path ) ; \n\t\t\t\t\t} \n\t\t\t\tborder . paintBorder ( c , g2 , borderX , borderY , borderW , borderH ) ; \n\t\t\t\t$F355 ( g2 ) } \n\t\t\t} \n\t\tg . translate ( labelX , labelY ) ; \n\t\tlabel . setSize ( labelW , labelH ) ; \n\t\tlabel . paint ( g ) ; \n\t\t$F86480 ( g , labelX , labelY ) } \n\telse if ( border != null ) { \n\t\tborder . paintBorder ( c , g , x , y , width , height ) ; \n\t\t} \n\t} \n"}, {"code": "public int nextClearBit ( int fromIndex ) { \n\tint i = fromIndex > > ADDRESS_BITS ; \n\tint max = data . length ; \n\tfor ( ; \n\ti < max ; \n\ti ++ ) { \n\t\tif $F13071 ( data , i ) $F1448 int j = Math . max ( fromIndex , i < < ADDRESS_BITS ) ; \n\t\tfor ( int end = j + NUM00 ; \n\t\tj < end ; \n\t\tj ++ ) { \n\t\t\t$F74602 ( get , j ) } \n\t\t} \n\treturn max < < ADDRESS_BITS ; \n\t} \n"}, {"code": "private final void nextRequest $F72 { \n\t$F5191 ( pacingTimer ) $F31134 ( pacingTimer ) replyTryCount = NUM00 ; \n\t} \n"}, {"code": "$F1 public boolean equals ( Object o ) { \n\t$F3627 ( this , o , _BOOL ) $F110236 ( o , getClass , _BOOL ) Account account = ( Account ) o ; \n\t$F110240 ( username , account , _BOOL ) return _BOOL ; \n\t} \n"}, {"code": "public static int identifyPid ( final String name ) throws PidUnavailableException { \n\ttry { \n\t\t$F46662 ( index , name ) if ( index < NUM00 ) { \n\t\t\tthrow new PidUnavailableException ( NUM00 + name ) ; \n\t\t\t} \n\t\treturn Integer . valueOf ( name . substring ( NUM00 , index ) ) ; \n\t\t} \n\tcatch ( NumberFormatException e ) { \n\t\tthrow new PidUnavailableException ( NUM00 + name , e ) ; \n\t\t} \n\t} \n"}, {"code": "abstract protected void processCommand ( String line ) throws Exception ; \n"}, {"code": "$F9749 ( namespace , attName , attValue , xmlWriter , registerPrefix ) "}, {"code": "protected Object next $F72 { \n\tint i = NUM00 ; \n\t$F1469 c ; \n\ttry { \n\t\t$F39710 ( i , st ) } \n\tcatch ( IOException e ) { \n\t\tDebug . error ( $F369 ( e ) ) ; \n\t\t} \n\tif ( ( i == StreamTokenizer . TT_EOF ) || ( i == NUM00 ) ) return EOF ; \n\tif ( i == StreamTokenizer . TT_WORD ) return new Symbol ( st . sval , NUM00 ) ; \n\tif $F34322 ( i ) return st . sval ; \n\tif ( i == StreamTokenizer . TT1BER ) return new Double ( st . nval ) ; \n\tif ( $F152535 ( i ) ) return LP ; \n\tif ( $F152535 ( i ) ) return RP ; \n\t$F11575 ( c ) ; \n\t$F238001 ( c , i ) return new Symbol ( new String ( c ) , NUM00 ) ; \n\t} \n"}, {"code": "public static void copy ( File source , File dest ) throws IOException { \n\tif $F3444 ( source ) { \n\t\t$F27233 ( dest ) for ( File child : listFiles ( source ) ) { \n\t\t\tcopy ( child , new File ( dest , child . getName ( ) ) ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tif $F3428 ( source ) { \n\t\t\t$F105872 ( lm , source ) if $F3444 ( dest ) { \n\t\t\t\tdest = new File ( dest , source . getName ( ) ) ; \n\t\t\t\t} \n\t\t\t$F4649 ( fos , dest ) try { \n\t\t\t\t$F4647 ( fis , source ) try { \n\t\t\t\t\tif ( USE_NIO ) { \n\t\t\t\t\t\tnioCopy ( fos , fis ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse { \n\t\t\t\t\t\toioCopy ( source , fos , fis ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F3229 ( fis ) } \n\t\t\t$F3229 ( fos ) dest . setExecutable ( source . canExecute ( ) , _BOOL ) ; \n\t\t\tdest . setLastModified ( lm ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static int classIndex ( int luaState , Class clazz , String searchName ) throws LuaException { \n\tsynchronized ( LuaStateFactory . getExistingState ( luaState ) ) { \n\t\tint res ; \n\t\tres = checkField ( luaState , clazz , searchName ) ; \n\t\tif ( res != NUM00 ) $F1083 res = checkMethod ( luaState , clazz , searchName ) ; \n\t\tif ( res != NUM00 ) $F1083 $F1082 } \n\t} \n"}, {"code": "private void notifyResourceEventListeners ( ResourceEvent event , Object resource ) { \n\tfor ( Iterator < ResourceEventsListener > iter = resourceListeners . iterator ( ) ; \n\titer . hasNext ( ) ; \n\t) { \n\t\ttry { \n\t\t\tResourceEventsListener listener = ( ResourceEventsListener ) iter . next ( ) ; \n\t\t\tlistener . handleEvent ( event , resource ) ; \n\t\t\t} \n\t\tcatch ( CancelException e ) $F845 catch ( GemFireSecurityException | ManagementException ex ) { \n\t\t\tif ( event == ResourceEvent . CACHE_CREATE ) { \n\t\t\t\tthrow ex ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tlogger . warn ( $F1573 ( ex ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( Exception err ) { \n\t\t\tlogger . warn ( $F1573 ( err ) ) ; \n\t\t\t} \n\t\t$F79506 ( SystemFailure , e ) catch ( Throwable t ) { \n\t\t\t$F79507 ( SystemFailure ) logger . warn ( $F1573 ( t ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public boolean isEnumConstant $F72 { \n\treturn ( getModifiers ( ) & Modifier . ENUM ) != NUM00 ; \n\t} \n"}, {"code": "private void inferCaller $F72 { \n\tneedToInferCaller = _BOOL ; \n\tThrowable throwable = $F219728 ; \n\tboolean lookingForLogger = _BOOL ; \n\tfor ( final StackTraceElement frame : throwable . getStackTrace ( ) ) { \n\t\tString cname = frame . getClassName ( ) ; \n\t\tboolean isLoggerImpl = isLoggerImplFrame ( cname ) ; \n\t\tif ( lookingForLogger ) { \n\t\t\t$F65989 ( isLoggerImpl , lookingForLogger , _BOOL ) } \n\t\telse { \n\t\t\tif ( ! isLoggerImpl ) { \n\t\t\t\tif ( $F132005 ( cname ) ) { \n\t\t\t\t\tsetSourceClassName ( cname ) ; \n\t\t\t\t\tsetSourceMethodName ( frame . getMethodName ( ) ) ; \n\t\t\t\t\t$F665 } \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "final int recordExceptionalCompletion ( Throwable ex ) { \n\tint s ; \n\tif ( ( s = status ) >= NUM00 ) { \n\t\t$F33763 ( h , System , this ) final ReentrantLock lock = exceptionTableLock ; \n\t\t$F790 ( lock ) try { \n\t\t\texpungeStaleExceptions ( ) ; \n\t\t\t$F33764 t = exceptionTable ; \n\t\t\t$F33769 ( i , h , t ) for ( ExceptionNode e = t [ i ] ; \n\t\t\t; \n\t\t\te = e . next ) { \n\t\t\t\tif ( e == null ) { \n\t\t\t\t\tt [ i ] = new ExceptionNode ( this , ex , t [ i ] , exceptionTableRefQueue ) ; \n\t\t\t\t\t$F597 } \n\t\t\t\tif $F33770 ( e , this ) $F597 } \n\t\t\t} \n\t\t$F796 ( lock ) s = setCompletion ( EXCEPTIONAL ) ; \n\t\t} \n\treturn s ; \n\t} \n"}, {"code": "private void analyzeResultingTlsContextAndWriteFile ( TlsContext tlsContext , String folder , String fieldName , String workflowName , long phase ) throws JAXBException , IOException { \n\tif ( TlsContextAnalyzer . containsFullWorkflowWithMissingMessage ( tlsContext ) || TlsContextAnalyzer . containsServerFinishedWithModifiedHandshake ( tlsContext ) || TlsContextAnalyzer . containsFullWorkflowWithModifiedMessage ( tlsContext ) ) { \n\t\tString fileNameBasic = createFileName ( folder , phase , tlsContext , fieldName ) ; \n\t\tFileOutputStream fos = new FileOutputStream ( fileNameBasic + workflowName + NUM00 ) ; \n\t\tWorkflowTraceSerializer . write ( fos , tlsContext . getWorkflowTrace ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "private static String toVariableName ( String str ) { \n\t$F280 ( rtn ) $F7782 ( chars , str ) long changes = NUM00 ; \n\tboolean doCorrect = _BOOL ; \n\tfor ( $F1139 ( i , chars ) ) { \n\t\tchar c = chars [ i ] ; \n\t\tif ( i == NUM00 && $F19295 ( c ) ) $F11030 ( rtn , c ) else if ( $F53963 ( c ) || c == NUM00 || c == NUM00 ) rtn . append ( c ) ; \n\t\telse { \n\t\t\tdoCorrect = _BOOL ; \n\t\t\t$F84 ( rtn ) changes += ( c * ( i + NUM00 ) ) ; \n\t\t\t} \n\t\t} \n\tif ( changes > NUM00 ) rtn . append ( changes ) ; \n\tif ( doCorrect ) $F17718 ( correctReservedWord , rtn ) $F92 ( rtn ) } \n"}, {"code": "public Year ( int year ) { \n\tif ( ( year < Year . MINIMUM_YEAR ) || ( year > Year . MAXIMUM_YEAR ) ) $F29526 ( year ) this . year = ( short ) year ; \n\t$F53414 ( peg , Calendar ) } \n"}, {"code": "$F1431 public $F3803 hostVcenterChangeDetails ( URI hostId , URI clusterId , URI datacenterId , boolean isVcenter ) { \n\t$F295581 ( result , Lists ) Host host = _dbClient . queryObject ( $F2522 , hostId ) ; \n\tVcenterDataCenter datacenter = _dbClient . queryObject ( VcenterDataCenter . class , datacenterId ) ; \n\tif ( host != null && datacenter != null ) { \n\t\tresult . add ( ComputeSystemDialogProperties . getMessage ( $F17177 ( host , datacenter ) ) ) ; \n\t\tresult . addAll ( hostClusterChangeDetails ( hostId , clusterId , datacenterId , isVcenter ) ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public boolean deleteStatement ( TestCase test , int position ) throws ConstructionFailedException { \n\tif ( ! ConstraintVerifier . canDelete ( test , position ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\t$F7028 ( logger , position ) $F11868 $F22304 ( toDelete ) ; \n\trecursiveDeleteInclusion ( test , toDelete , position ) ; \n\t$F3807 $F10252 ( pos , toDelete ) ; \n\tCollections . sort ( pos , Collections . reverseOrder ( ) ) ; \n\tfor ( Integer i : pos ) { \n\t\t$F7028 ( logger , i ) test . remove ( i ) ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public boolean isCompound $F72 { \n\treturn $F6886 ( splits ) ; \n\t} \n"}, {"code": "$F1 public $F12622 sum ( $F12625 ( state ) , final $F12622 left , final $F12622 right ) { \n\tfinal $F12622 tmp = new LinkedHashSet $F12621 ( left ) ; \n\ttmp . addAll ( right ) ; \n\treturn tmp ; \n\t} \n"}, {"code": "public void testSignumPositive $F72 { \n\tString a = NUM00 ; \n\tint aScale = NUM00 ; \n\t$F1918 ( aNumber , a , aScale ) $F3037 ( assertEquals , aNumber ) } \n"}, {"code": "public static _Fields findByThriftId ( int fieldId ) { \n\tswitch ( fieldId ) { \n\t\t$F3366 return HOST ; \n\t\t$F3366 return PORT ; \n\t\t$F3366 return ID ; \n\t\t$F3366 return V_NODES ; \n\t\t$F3366 return PING_FREQUENCY ; \n\t\t$F3366 return SERVICE_NAME ; \n\t\t$F3366 return STATE ; \n\t\t$F3366 return TIMESTAMP ; \n\t\t$F20809 } \n\t} \n"}, {"code": "private static int categorizeByYear2014Method ( Context c ) { \n\t$F15277 ( componentYears ) conditionallyAdd ( componentYears , getNumCoresYear ( ) ) ; \n\tconditionallyAdd ( componentYears , getClockSpeedYear ( ) ) ; \n\tconditionallyAdd ( componentYears , getRamYear ( c ) ) ; \n\t$F69790 ( componentYears , CLASS_UNKNOWN ) Collections . sort ( componentYears ) ; \n\tif ( ( componentYears . size ( ) & NUM00 ) == NUM00 ) { \n\t\treturn componentYears . get ( $F74216 ( componentYears ) ) ; \n\t\t} \n\telse { \n\t\tint baseIndex = $F74216 ( componentYears ) - NUM00 ; \n\t\treturn componentYears . get ( baseIndex ) + ( componentYears . get ( baseIndex + NUM00 ) - componentYears . get ( baseIndex ) ) / NUM00 ; \n\t\t} \n\t} \n"}, {"code": "public Time ( Date time ) { \n\tSimpleTimeZone tz = new SimpleTimeZone ( NUM00 , NUM00 ) ; \n\t$F108456 ( dateF ) dateF . setTimeZone ( tz ) ; \n\tString d = dateF . format ( time ) + NUM00 ; \n\t$F215024 ( year , Integer , d ) if $F19274 ( year ) { \n\t\tthis . time = new DERGeneralizedTime ( d ) ; \n\t\t} \n\telse { \n\t\tthis . time = new DERUTCTime ( d . substring ( NUM00 ) ) ; \n\t\t} \n\t} \n"}, {"code": "public ActionRequestHelper then ( ActionRequestHelper nextAction ) $F18637 ( mNext , nextAction , this ) "}, {"code": "protected $F2027 readColorTable ( final int ncolors ) { \n\tfinal int nbytes = NUM00 * ncolors ; \n\t$F10498 ( tab ) $F4727 ( c , nbytes ) try { \n\t\trawData . get ( c ) ; \n\t\t$F4470 ( tab ) int i = NUM00 ; \n\t\tint j = NUM00 ; \n\t\twhile ( i < ncolors ) { \n\t\t\tfinal int r = ( c [ j ++ ] ) & NUM00 ; \n\t\t\tfinal int g = ( c [ j ++ ] ) & NUM00 ; \n\t\t\tfinal int b = ( c [ j ++ ] ) & NUM00 ; \n\t\t\ttab [ i ++ ] = NUM00 | ( r < < NUM00 ) | ( g < < NUM00 ) | b ; \n\t\t\t} \n\t\t} \n\tcatch ( final BufferUnderflowException e ) { \n\t\tLog . w ( TAG , NUM00 , e ) ; \n\t\tstatus = STATUS_FORMAT_ERROR ; \n\t\t} \n\treturn tab ; \n\t} \n"}, {"code": "public boolean isCurrent ( String str ) { \n\tif ( pos + str . length ( ) > lcText . length ) return _BOOL ; \n\tfor ( $F186068 ( i , str ) ) { \n\t\tif ( str . charAt ( i ) != lcText [ pos + i ] ) return _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "private static String matchablePath ( String path ) { \n\tif ( path == null ) $F2455 else if $F8991 ( path ) { \n\t\treturn path ; \n\t\t} \n\telse $F70142 ( path ) } \n"}, {"code": "public void assertUsable $F72 throws IOException { \n\tif $F61923 ( throwable ) { \n\t\t$F31068 ( connection ) $F665 } \n\tThrowable t = throwable . get ( ) ; \n\tif ( t instanceof IOException ) $F204796 ( t ) else { \n\t\tthrow Throwables . propagate ( t ) ; \n\t\t} \n\t} \n"}, {"code": "protected static double computeH ( final int i , $F1986 dist_i , $F1986 pij_i , double mbeta ) { \n\tdouble sumP = NUM00 ; \n\tfor ( $F119 ( j , i ) ) { \n\t\tsumP += ( pij_i [ j ] = Math . exp ( dist_i [ j ] * mbeta ) ) ; \n\t\t} \n\tfor ( $F169942 ( j , i , dist_i ) ) { \n\t\tsumP += ( pij_i [ j ] = Math . exp ( dist_i [ j ] * mbeta ) ) ; \n\t\t} \n\tif $F102905 ( sumP ) $F86429 ( Double ) final double s = NUM00 / sumP ; \n\tdouble sum = NUM00 ; \n\tfor ( $F1139 ( j , dist_i ) ) { \n\t\tsum += dist_i [ j ] * ( pij_i [ j ] *= s ) ; \n\t\t} \n\treturn Math . log ( sumP ) - mbeta * sum ; \n\t} \n"}, {"code": "private Collection < Insanity > checkSubreaders ( MapOfSets < Integer , CacheEntry > valIdToItems , MapOfSets < ReaderField , Integer > readerFieldToValIds ) { \n\tfinal List < Insanity > $F9187 ( insanity ) ; \n\tMap < ReaderField , Set < ReaderField > > badChildren = new $F4188 $F989 ; \n\tMapOfSets < ReaderField , ReaderField > badKids = new MapOfSets $F200 ( badChildren ) ; \n\tMap < Integer , Set < CacheEntry > > viToItemSets = valIdToItems . getMap ( ) ; \n\tMap < ReaderField , $F11868 > rfToValIdSets = readerFieldToValIds . getMap ( ) ; \n\tSet < ReaderField > seen = new $F9623 $F989 ; \n\tSet < ReaderField > readerFields = rfToValIdSets . keySet ( ) ; \n\tfor ( final ReaderField rf : readerFields ) { \n\t\t$F71285 ( seen , rf ) $F6689 kids = getAllDescendantReaderKeys ( rf . readerKey ) ; \n\t\tfor ( Object kidKey : kids ) { \n\t\t\tReaderField kid = new ReaderField ( kidKey , rf . fieldName ) ; \n\t\t\tif $F1710 ( badChildren , kid ) { \n\t\t\t\tbadKids . put ( rf , kid ) ; \n\t\t\t\tbadKids . putAll ( rf , badChildren . get ( kid ) ) ; \n\t\t\t\tbadChildren . remove ( kid ) ; \n\t\t\t\t} \n\t\t\telse if $F1710 ( rfToValIdSets , kid ) $F1717 ( badKids , rf , kid ) seen . add ( kid ) ; \n\t\t\t} \n\t\tseen . add ( rf ) ; \n\t\t} \n\tfor ( final ReaderField parent : badChildren . keySet ( ) ) { \n\t\tSet < ReaderField > kids = badChildren . get ( parent ) ; \n\t\tList < CacheEntry > badEntries = new $F201 $F98338 ( kids ) ; \n\t\t{ \n\t\t\tfor ( final Integer value : rfToValIdSets . get ( parent ) ) { \n\t\t\t\t$F103980 ( badEntries , viToItemSets , value ) } \n\t\t\t} \n\t\tfor ( final ReaderField kid : kids ) { \n\t\t\tfor ( final Integer value : rfToValIdSets . get ( kid ) ) { \n\t\t\t\t$F103980 ( badEntries , viToItemSets , value ) } \n\t\t\t} \n\t\tCacheEntry [ ] badness = new CacheEntry $F2313 ( badEntries ) ; \n\t\t$F5443 ( badness , badEntries ) insanity . add ( new Insanity ( InsanityType . SUBREADER , $F368 ( parent ) , badness ) ) ; \n\t\t} \n\treturn insanity ; \n\t} \n"}, {"code": "public static String addProtocolToUrl ( String url ) { \n\tif ( ! url . startsWith ( HTTP_PROTOCOL_PREFIX ) && ! url . startsWith ( HTTPS_PROTOCOL_PREFIX ) && ! url . startsWith ( FILE_PROTOCOL_PREFIX ) ) { \n\t\tif $F7311 ( url , FILE_PREFIX ) { \n\t\t\turl = FILE_PROTOCOL_PREFIX + url ; \n\t\t\t} \n\t\telse { \n\t\t\turl = HTTP_PROTOCOL_PREFIX + url ; \n\t\t\t} \n\t\t} \n\treturn url ; \n\t} \n"}, {"code": "public XPath ( String exprString , SourceLocator locator , PrefixResolver prefixResolver , int type ) throws $F1872 { \n\tthis ( exprString , locator , prefixResolver , type , null ) ; \n\t} \n"}, {"code": "public static String methodNameToPropertyName ( String methodName ) { \n\tif $F3106 ( methodName ) $F3108 ( methodName ) else if $F3106 ( methodName ) $F3108 ( methodName ) else $F120626 ( methodName ) if $F1277 ( methodName ) $F1274 $F12685 ( ch , methodName ) if ( Character . isUpperCase ( ch ) && ( $F1276 ( methodName ) || ! $F102260 ( Character , methodName ) ) ) { \n\t\tmethodName = Character . toLowerCase ( ch ) + methodName . substring ( NUM00 ) ; \n\t\t} \n\treturn methodName ; \n\t} \n"}, {"code": "private StringBuilder createIndent ( int indent ) { \n\tStringBuilder oneIndent = createIndent ( ) ; \n\t$F83 ( ret ) while ( indent -- > NUM00 ) $F288 ( ret , oneIndent ) return ret ; \n\t} \n"}, {"code": "protected ClassLoader $F72 $F7429 ( this , getSystemClassLoader ) "}, {"code": "public static void matchvPoolWithStoragePools ( VirtualPool vpool , $F37270 pools , DbClient dbClient , CoordinatorClient coordinator , String matcherGroupName , StringBuffer errorMessage ) { \n\t$F37270 filterPools = getMatchedPoolWithStoragePools ( vpool , pools , VirtualPool . getProtectionSettings ( vpool , dbClient ) , VirtualPool . getRemoteProtectionSettings ( vpool , dbClient ) , VirtualPool . getFileRemoteProtectionSettings ( vpool , dbClient ) , dbClient , coordinator , matcherGroupName , errorMessage ) ; \n\tupdateInvalidAndMatchedPoolsForVpool ( vpool , filterPools , pools , dbClient ) ; \n\t} \n"}, {"code": "private static $F2027 trimArray $F11072 ( array , size ) { \n\t$F63585 ( size ) $F6482 ( size , NO_ERRORS ) $F4120 ( a , size ) $F135 ( System , array , a , size ) return a ; \n\t} \n"}, {"code": "static $F4203 boolean removeIf ( $F35808 removeFrom , $F111034 predicate ) { \n\tif ( removeFrom instanceof RandomAccess && removeFrom instanceof List ) { \n\t\treturn removeIfFromRandomAccessList ( ( $F5675 ) removeFrom , checkNotNull ( predicate ) ) ; \n\t\t} \n\treturn Iterators . removeIf ( removeFrom . iterator ( ) , predicate ) ; \n\t} \n"}, {"code": "@ BeforeClass public static void createEcomConnection $F72 { \n\tboolean wasException = _BOOL ; \n\ttry { \n\t\t_connection = new EcomConnection ( createConnectionInfo ( ) , createListener ( ) , new CimFilterMap $F72 ) ; \n\t\t} \n\t$F28453 ( wasException , _BOOL ) Assert . assertFalse ( wasException ) ; \n\t} \n"}, {"code": "protected void _init ( final IDatatypeURIResolver resolver , final ILexiconConfiguration < BigdataValue > config , final Collection < IExtension < ? extends BigdataValue > > extensions ) $F845 "}, {"code": "public mxRectangle graphModelChanged ( mxIGraphModel sender , List < mxUndoableChange > changes , Boolean rv ) { \n\tint thresh = getChangesRepaintThreshold ( ) ; \n\tboolean ignoreDirty = thresh > NUM00 && changes . size ( ) > thresh ; \n\tif ( ! ignoreDirty ) { \n\t\tIterator < mxUndoableChange > it = changes . iterator ( ) ; \n\t\twhile $F2921 ( it ) { \n\t\t\tif ( it . next ( ) instanceof mxRootChange ) $F3468 ( ignoreDirty , _BOOL ) } \n\t\t} \n\t$F37669 ( changedCells ) mxRectangle dirty = processChanges ( changes , _BOOL , ignoreDirty , changedCells ) ; \n\tif ( ! rv ) { \n\t\tif ( changedCells != null ) { \n\t\t\tfor ( Object changedCell : changedCells ) { \n\t\t\t\tmxCellState parentState = view . getState ( model . getParent ( changedCell ) , _BOOL ) ; \n\t\t\t\tview . validate ( parentState , changedCell , _BOOL ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse $F1954 ( view ) if ( ! ignoreDirty ) { \n\t\tmxRectangle tmp = processChanges ( changes , _BOOL , ignoreDirty ) ; \n\t\tif ( tmp != null ) { \n\t\t\tif ( dirty == null ) { \n\t\t\t\tdirty = tmp ; \n\t\t\t\t} \n\t\t\telse $F207 ( dirty , tmp ) } \n\t\t} \n\tremoveSelectionCells ( getRemovedCellsForChanges ( changes ) ) ; \n\treturn dirty ; \n\t} \n"}, {"code": "public void testSetBitException $F72 { \n\t$F123148 int aSign = NUM00 ; \n\tint number = - NUM00 ; \n\t$F3023 ( aNumber , aSign , aBytes ) try { \n\t\taNumber . setBit ( number ) ; \n\t\tfail ( NUM00 ) ; \n\t\t} \n\t$F174375 } \n"}, {"code": "public void guard ( final Guard r ) throws InterruptedException { \n\tincThread ( ) ; \n\ttry $F21688 ( r ) catch ( InterruptedException e ) { \n\t\tthrow e ; \n\t\t} \n\t$F12237 ( e ) $F49978 ( decThread ) } \n"}, {"code": "public void log ( Date time , String message ) { \n\ttry { \n\t\tPrintWriter w = new PrintWriter ( new FileWriter ( filename , _BOOL ) ) ; \n\t\tw . println ( NUM00 + format . format ( time ) + NUM00 + message ) ; \n\t\t$F59 ( w ) } \n\t$F29052 } \n"}, {"code": "protected ResourceInfo newElement ( int type ) { \n\tResourceInfo result = null ; \n\tswitch ( type ) { \n\t\tcase IResource . FILE : case IResource . FOLDER : result = new ResourceInfo ( type ) ; \n\t\t$F597 case IResource . PROJECT : result = new ResourceInfo ( type ) ; \n\t\t$F597 case IResource . ROOT : result = new ResourceInfo ( type ) ; \n\t\t$F597 } \n\treturn result ; \n\t} \n"}, {"code": "private boolean isModelUseful ( ContingencyMatrix cm ) { \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void registerPlayerObserver ( PlayerEventsObserver observer , boolean replyImmediately ) { \n\tif ( this . connection == null ) $F665 playerEventsObservers . add ( observer ) ; \n\tif ( replyImmediately ) replyWithLastResult ( observer ) ; \n\tif $F10471 ( playerEventsObservers ) { \n\t\tif ( connection . getProtocol ( ) == HostConnection . PROTOCOL_TCP ) { \n\t\t\tconnection . registerPlayerNotificationsObserver ( this , checkerHandler ) ; \n\t\t\tconnection . registerSystemNotificationsObserver ( this , checkerHandler ) ; \n\t\t\tconnection . registerInputNotificationsObserver ( this , checkerHandler ) ; \n\t\t\tcheckerHandler . post ( tcpCheckerRunnable ) ; \n\t\t\t} \n\t\telse $F95028 ( checkerHandler , httpCheckerRunnable ) } \n\t} \n"}, {"code": "$F1 public int numElements $F72 throws Exception { \n\tif ( m_zeroR != null ) $F1083 return m_Tree . numNodes ( ) ; \n\t} \n"}, {"code": "public boolean isHighlightable ( OMGraphic omg ) { \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void testVirtualDestinationsDinamicallyIncludedBehavior3 $F72 throws Exception { \n\tfinal String topic = NUM00 ; \n\tfinal String vq = NUM00 + topic ; \n\tstartAllBrokers ( ) ; \n\tfinal int msgs1 = NUM00 ; \n\tfinal int msgs2 = NUM00 ; \n\tDestination tDest = createDestination ( topic , _BOOL ) ; \n\tDestination vqDest = createDestination ( vq , _BOOL ) ; \n\tMessageConsumer clientB1t = createConsumer ( NUM00 , tDest ) ; \n\tMessageConsumer clientB2t = createConsumer ( NUM00 , tDest ) ; \n\tMessageConsumer clientB1vq = createConsumer ( NUM00 , vqDest ) ; \n\t$F165308 ( Thread ) sendMessages ( NUM00 , tDest , msgs1 ) ; \n\tsendMessages ( NUM00 , tDest , msgs2 ) ; \n\t$F9470 ( Thread ) MessageIdList msgsB1t = getConsumerMessages ( NUM00 , clientB1t ) ; \n\tmsgsB1t . waitForMessagesToArrive ( msgs1 + msgs2 ) ; \n\tassertEquals ( msgs1 + msgs2 , msgsB1t . getMessageCount ( ) ) ; \n\tMessageIdList msgsB2t = getConsumerMessages ( NUM00 , clientB2t ) ; \n\tmsgsB2t . waitForMessagesToArrive ( msgs1 + msgs2 ) ; \n\tassertEquals ( msgs1 + msgs2 , msgsB2t . getMessageCount ( ) ) ; \n\tMessageIdList msgsB1vq = getConsumerMessages ( NUM00 , clientB1vq ) ; \n\tmsgsB1vq . waitForMessagesToArrive ( msgs1 + msgs2 ) ; \n\tassertEquals ( msgs1 + msgs2 , msgsB1vq . getMessageCount ( ) ) ; \n\tassertEquals ( NUM00 , getQueueSize ( NUM00 , ( ActiveMQDestination ) vqDest ) ) ; \n\tassertEquals ( NUM00 , getQueueSize ( NUM00 , ( ActiveMQDestination ) vqDest ) ) ; \n\tdestroyAllBrokers ( ) ; \n\t} \n"}, {"code": "public RpcClient peerWith ( PeerInfo serverInfo , Bootstrap bootstrap , $F2100 ( attributes ) ) throws IOException { \n\tInetSocketAddress remoteAddress = new InetSocketAddress ( serverInfo . getHostName ( ) , serverInfo . getPort ( ) ) ; \n\treturn peerWith ( remoteAddress , bootstrap , attributes ) ; \n\t} \n"}, {"code": "public GridReversedLinesFileReader ( final File file , final int blockSize , final String encoding ) throws IOException { \n\tthis ( file , blockSize , Charset . forName ( encoding ) ) ; \n\t} \n"}, {"code": "private void beforeName $F72 throws IOException { \n\tint context = peek ( ) ; \n\tif ( context == NONEMPTY_OBJECT ) $F12032 ( out ) else if ( context != EMPTY_OBJECT ) $F4639 newline ( ) ; \n\treplaceTop ( DANGLING_NAME ) ; \n\t} \n"}, {"code": "protected String constName $F72 { \n\treturn NUM00 + name . toUpperCase ( ) ; \n\t} \n"}, {"code": "public boolean isTimestampWithinInterval ( DateTime timestamp , String intervalString ) throws IllegalArgumentException { \n\t$F23375 ( interval , Interval , intervalString ) $F297 ( interval , timestamp ) } \n"}, {"code": "private void processAnsiOsCommand $F72 { \n\tif ( $F4434 ( ansiOsCommand ) || $F4434 ( ansiOsCommand ) ) { \n\t\tLogger . log ( NUM00 + ansiOsCommand + NUM00 ) ; \n\t\t$F665 } \n\t} \n"}, {"code": "private void addToRenaming ( Renaming renaming , $F2690 prevDeclared , ExprNode expr ) { \n\tif ( ! ( expr instanceof OpApplNode ) ) $F932 $F2690 newDeclared = ( $F2690 ) prevDeclared . clone ( ) ; \n\tOpApplNode node = ( OpApplNode ) expr ; \n\tif ( node . getUnbdedQuantSymbols ( ) != null ) { \n\t\tfor ( int i = NUM00 ; \n\t\ti < node . getUnbdedQuantSymbols ( ) . length ; \n\t\ti ++ ) { \n\t\t\tFormalParamNode id = node . getUnbdedQuantSymbols ( ) [ i ] ; \n\t\t\tif ( newDeclared . contains ( getCurrentName ( id , renaming ) ) ) { \n\t\t\t\tString newname = getNewName ( id , newDeclared , renaming ) ; \n\t\t\t\tnewDeclared . add ( newname ) ; \n\t\t\t\taddCurrentName ( id , newname , renaming ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tif ( node . getBdedQuantSymbolLists ( ) != null ) { \n\t\tfor ( int i = NUM00 ; \n\t\ti < node . getBdedQuantSymbolLists ( ) . length ; \n\t\ti ++ ) { \n\t\t\taddToRenaming ( renaming , prevDeclared , node . getBdedQuantBounds ( ) [ i ] ) ; \n\t\t\tFormalParamNode [ ] nodeList = node . getBdedQuantSymbolLists ( ) [ i ] ; \n\t\t\tfor ( $F1139 ( j , nodeList ) ) { \n\t\t\t\tFormalParamNode id = nodeList [ j ] ; \n\t\t\t\tif ( newDeclared . contains ( getCurrentName ( id , renaming ) ) ) { \n\t\t\t\t\tString newname = getNewName ( id , newDeclared , renaming ) ; \n\t\t\t\t\tnewDeclared . add ( newname ) ; \n\t\t\t\t\taddCurrentName ( id , newname , renaming ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tfor ( int i = NUM00 ; \n\ti < node . getArgs ( ) . length ; \n\ti ++ ) { \n\t\tif ( node . getArgs ( ) [ i ] instanceof ExprNode ) { \n\t\t\taddToRenaming ( renaming , newDeclared , ( ExprNode ) node . getArgs ( ) [ i ] ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private $F16501 diff_lineMode $F9179 ( text1 , text2 , deadline ) { \n\tLinesToCharsResult b = diff_linesToChars ( text1 , text2 ) ; \n\ttext1 = b . chars1 ; \n\ttext2 = b . chars2 ; \n\t$F3803 linearray = b . lineArray ; \n\t$F40337 ( diffs , diff_main , text1 , text2 , _BOOL , deadline ) diff_charsToLines ( diffs , linearray ) ; \n\tdiff_cleanupSemantic ( diffs ) ; \n\t$F340181 ( diffs , Operation ) int count_delete = NUM00 ; \n\tint count_insert = NUM00 ; \n\tString text_delete = NUM00 ; \n\tString text_insert = NUM00 ; \n\t$F340184 ( pointer , diffs ) $F340186 ( thisDiff , pointer ) while ( thisDiff != null ) { \n\t\tswitch ( thisDiff . operation ) { \n\t\t\t$F357861 ( INSERT , count_insert , text_insert , thisDiff ) $F357861 ( DELETE , count_delete , text_delete , thisDiff ) case EQUAL : if ( count_delete >= NUM00 && count_insert >= NUM00 ) { \n\t\t\t\t$F45359 ( pointer ) for ( $F41842 ( j , count_delete , count_insert ) ) { \n\t\t\t\t\t$F45359 ( pointer ) $F7042 ( pointer ) } \n\t\t\t\tfor ( Diff newDiff : diff_main ( text_delete , text_insert , _BOOL , deadline ) ) $F207 ( pointer , newDiff ) } \n\t\t\tcount_insert = NUM00 ; \n\t\t\tcount_delete = NUM00 ; \n\t\t\ttext_delete = NUM00 ; \n\t\t\ttext_insert = NUM00 ; \n\t\t\t$F597 } \n\t\t$F335731 ( thisDiff , pointer ) } \n\tdiffs . removeLast ( ) ; \n\treturn diffs ; \n\t} \n"}, {"code": "public boolean removeTriggerGroupToNeverDelete ( String group ) { \n\tif ( group != null ) $F13237 ( triggerGroupsToNeverDelete , group ) return _BOOL ; \n\t} \n"}, {"code": "public void remove ( Rule rule ) $F106 ( rules , rule ) "}, {"code": "private boolean uploadAllTrackPoints ( Fusiontables fusiontables , String tableId , Track track ) throws IOException { \n\tint numberOfPoints = track . getNumberOfPoints ( ) ; \n\tList $F80423 locations = new ArrayList $F80423 ( MAX_POINTS_PER_UPLOAD ) ; \n\tLocation lastValidLocation = null ; \n\tboolean sentStartMarker = _BOOL ; \n\tint readCount = NUM00 ; \n\tLocationIterator locationIterator = null ; \n\ttry { \n\t\tlocationIterator = myTracksProviderUtils . getTrackPointLocationIterator ( trackId , - NUM00 , _BOOL , MyTracksProviderUtils . DEFAULT_LOCATION_FACTORY ) ; \n\t\twhile $F2921 ( locationIterator ) { \n\t\t\tLocation location = locationIterator . next ( ) ; \n\t\t\tlocations . add ( location ) ; \n\t\t\tif ( LocationUtils . isValidLocation ( location ) ) { \n\t\t\t\tlastValidLocation = location ; \n\t\t\t\t} \n\t\t\tif ( ! sentStartMarker && lastValidLocation != null ) { \n\t\t\t\tString name = context . getString ( R . string . marker_label_start , track . getName ( ) ) ; \n\t\t\t\tcreateNewPoint ( fusiontables , tableId , name , NUM00 , lastValidLocation , MARKER_TYPE_START ) ; \n\t\t\t\tsentStartMarker = _BOOL ; \n\t\t\t\t} \n\t\t\treadCount ++ ; \n\t\t\tif ( readCount % MAX_POINTS_PER_UPLOAD == NUM00 ) { \n\t\t\t\tif ( ! prepareAndUploadPoints ( fusiontables , tableId , track , locations , _BOOL ) ) $F35346 ( Log , TAG , _BOOL ) updateProgress ( readCount , numberOfPoints ) ; \n\t\t\t\t$F725 ( locations ) } \n\t\t\t} \n\t\tif ( ! prepareAndUploadPoints ( fusiontables , tableId , track , locations , _BOOL ) ) $F35346 ( Log , TAG , _BOOL ) if ( lastValidLocation != null ) { \n\t\t\tString name = context . getString ( R . string . marker_label_end , track . getName ( ) ) ; \n\t\t\tDescriptionGenerator descriptionGenerator = new DescriptionGeneratorImpl ( context ) ; \n\t\t\tString description = descriptionGenerator . generateTrackDescription ( track , null , null , _BOOL ) ; \n\t\t\tcreateNewPoint ( fusiontables , tableId , name , description , lastValidLocation , MARKER_TYPE_END ) ; \n\t\t\t} \n\t\treturn _BOOL ; \n\t\t} \n\t$F14364 ( locationIterator ) } \n"}, {"code": "$F153740 $F1309 $F2304 public static String join ( $F2304 $F806 s , $F2304 String delimiter ) { \n\t$F83 ( buffer ) for ( $F1139 ( i , s ) ) { \n\t\t$F6939 ( buffer , s , i ) $F262067 ( i , s , buffer , delimiter ) } \n\t$F92 ( buffer ) } \n"}, {"code": "private void initSelectPosition ( int position ) { \n\tif ( mSelectMode == ISelectable . SELECT_MODE_SINGLE ) { \n\t\tif ( mSelectedPosition == ISelectable . INVALID_POSITION ) { \n\t\t\tmSelectedPosition = position ; \n\t\t\t} \n\t\t} \n\telse if ( mSelectMode == ISelectable . SELECT_MODE_MULTI ) $F24128 ( mSelectedPositions , position ) else $F65782 } \n"}, {"code": "$F1 public PathImpl schemeWalk ( String userPath , $F2100 ( attributes ) , String filePath , int offset ) { \n\tif $F931 ( isWindows ) { \n\t\treturn super . schemeWalk ( userPath , attributes , filePath , offset ) ; \n\t\t} \n\tString canonicalPath ; \n\tif ( filePath . length ( ) < offset + NUM00 ) { \n\t\treturn super . schemeWalk ( userPath , attributes , filePath , offset ) ; \n\t\t} \n\t$F17494 ( ch1 , filePath , offset ) $F1280 ( ch2 , filePath , offset ) if ( ( ch2 == NUM00 || ch2 == _separatorChar ) && ( ch1 == NUM00 || ch1 == _separatorChar ) ) return super . schemeWalk ( userPath , attributes , convertFromWindowsPath ( filePath . substring ( offset ) ) , NUM00 ) ; \n\telse return super . schemeWalk ( userPath , attributes , filePath , offset ) ; \n\t} \n"}, {"code": "void initProperties $F19845 ( defaultLevel , defaultFilter , defaultFormatter , defaultEncoding ) { \n\tLogManager manager = LogManager . getLogManager ( ) ; \n\t$F498481 ( filterName , manager , prefix ) if ( filterName != null ) { \n\t\ttry { \n\t\t\t$F498482 ( filter , getCustomizeInstance , filterName ) } \n\t\tcatch ( Exception e1 ) { \n\t\t\tprintInvalidPropMessage ( NUM00 , filterName , e1 ) ; \n\t\t\t$F498482 ( filter , getDefaultInstance , defaultFilter ) } \n\t\t} \n\telse { \n\t\t$F498482 ( filter , getDefaultInstance , defaultFilter ) } \n\tString levelName = manager . getProperty ( prefix + NUM00 ) ; \n\tif ( levelName != null ) { \n\t\ttry $F49239 ( level , Level , levelName ) catch ( Exception e ) { \n\t\t\tprintInvalidPropMessage ( NUM00 , levelName , e ) ; \n\t\t\tlevel = Level . parse ( defaultLevel ) ; \n\t\t\t} \n\t\t} \n\telse $F49239 ( level , Level , defaultLevel ) $F498481 ( formatterName , manager , prefix ) if ( formatterName != null ) { \n\t\ttry { \n\t\t\t$F498496 ( formatter , getCustomizeInstance , formatterName ) } \n\t\tcatch ( Exception e ) { \n\t\t\tprintInvalidPropMessage ( NUM00 , formatterName , e ) ; \n\t\t\t$F498496 ( formatter , getDefaultInstance , defaultFormatter ) } \n\t\t} \n\telse { \n\t\t$F498496 ( formatter , getDefaultInstance , defaultFormatter ) } \n\t$F498481 ( encodingName , manager , prefix ) try { \n\t\tinternalSetEncoding ( encodingName ) ; \n\t\t} \n\tcatch ( UnsupportedEncodingException e ) $F228450 ( printInvalidPropMessage , encodingName , e ) } \n"}, {"code": "public static void writeUnsignedVL ( long data , DataOutput out ) throws IOException { \n\twhile ( _BOOL ) { \n\t\tif $F105378 ( data ) { \n\t\t\tout . writeByte ( ( int ) data ) ; \n\t\t\t$F665 } \n\t\telse { \n\t\t\tout . writeByte ( ( ( int ) data & NUM00 ) | NUM00 ) ; \n\t\t\tdata >>>= NUM00 ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public JSONArray names $F72 { \n\t$F19928 ( ja ) Iterator keys = keys ( ) ; \n\twhile $F2921 ( keys ) { \n\t\tja . put ( keys . next ( ) ) ; \n\t\t} \n\treturn $F1276 ( ja ) ? null : ja ; \n\t} \n"}, {"code": "public void addTableWithAlias ( String table , String alias ) { \n\tQueryTableData tableData = new QueryTableData $F72 ; \n\ttableData . setTableName ( table ) ; \n\ttableData . setTableAlias ( alias ) ; \n\ttableData . setTableIndex ( _tablesData . size ( ) ) ; \n\t_tablesData . add ( tableData ) ; \n\tif ( alias == null ) tables . put ( table , tableData ) ; \n\telse { \n\t\ttables . put ( alias , tableData ) ; \n\t\ttables . put ( table , tableData ) ; \n\t\t} \n\t} \n"}, {"code": "private int encryptBlock $F59451 ( in , inOff , out , outOff ) throws $F5278 { \n\t$F59453 ( inOff , blockSize , in ) for ( $F119 ( i , blockSize ) ) { \n\t\tcbcV [ i ] ^= in [ inOff + i ] ; \n\t\t} \n\tint length = cipher . processBlock ( cbcV , NUM00 , out , outOff ) ; \n\t$F198866 ( System , out , outOff , cbcV ) return length ; \n\t} \n"}, {"code": "$F291007 ( camera , glPushMatrix , glLoadIdentity , rotX , rotY , rotZ , glRotatef , glLineWidth , glBegin , GL_LINES , glColor3f , glVertex3f , glEnd , glPopMatrix ) "}, {"code": "$F1 public Object clone $F72 throws CloneNotSupportedException { \n\tPeriodAxisLabelInfo clone = ( PeriodAxisLabelInfo ) super . clone ( ) ; \n\treturn clone ; \n\t} \n"}, {"code": "public long skip ( long n ) throws IOException { \n\t$F6853 ( n ) ensureOpen ( ) ; \n\tint max = ( int ) Math . min ( n , Integer . MAX_VALUE ) ; \n\tint total = NUM00 ; \n\twhile ( total < max ) { \n\t\tint len = max - total ; \n\t\tif ( len > tmpbuf . length ) $F9454 ( len , tmpbuf ) len = read ( tmpbuf , NUM00 , len ) ; \n\t\tif ( len == - NUM00 ) $F3468 ( entryEOF , _BOOL ) total += len ; \n\t\t} \n\treturn total ; \n\t} \n"}, {"code": "private Path convertPath ( Path path ) throws Exception { \n\tif ( mode != PROXY ) return path ; \n\telse { \n\t\t$F149244 ( secondaryUri , SECONDARY_URI ) URI pathUri = path . toUri ( ) ; \n\t\treturn new Path ( new URI ( pathUri . getScheme ( ) != null ? secondaryUri . getScheme ( ) : null , pathUri . getAuthority ( ) != null ? secondaryUri . getAuthority ( ) : null , pathUri . getPath ( ) , null , null ) ) ; \n\t\t} \n\t} \n"}, {"code": "private static String joinArray $F28786 ( array , delimiter ) { \n\t$F280 ( buffer ) for ( $F1139 ( index , array ) ) { \n\t\t$F6939 ( buffer , array , index ) $F262067 ( index , array , buffer , delimiter ) } \n\t$F92 ( buffer ) } \n"}, {"code": "private void outputPartners ( Properties ctx , PrintWriter out , int partnerID , boolean includeAny ) { \n\t$F8438 ( out ) $F24502 ( includeAny , out , partnerID ) for ( MBPartner partner : getAllPartners ( ctx ) ) { \n\t\tout . print ( NUM00 + partner . get_ID ( ) + NUM00 ) ; \n\t\tif ( partnerID == partner . get_ID ( ) ) $F21384 ( out ) out . println ( NUM00 + Util . maskHTML ( partner . getName ( ) ) + NUM00 ) ; \n\t\t} \n\t$F8438 ( out ) } \n"}, {"code": "public void stop $F72 { \n\tmCancel = _BOOL ; \n\tif $F48405 ( mRunning , _BOOL ) { \n\t\tif ( mSampleDispatcherTask != null ) { \n\t\t\tmSampleDispatcherTask . cancel ( _BOOL ) ; \n\t\t\t$F725 ( mFilledBuffers ) } \n\t\t} \n\t} \n"}, {"code": "public ChessSquare ( Composite parent , ChessBoard chessBoard , int id , boolean isLight ) { \n\tsuper ( parent , SWT . DOUBLE_BUFFERED | SWT . NO_BACKGROUND ) ; \n\tboard = chessBoard ; \n\tthis . id = id ; \n\tthis . isLight = isLight ; \n\taddPaintListener ( paintListener ) ; \n\taddControlListener ( controlListener ) ; \n\taddMouseListener ( mouseListener ) ; \n\taddListener ( SWT . MouseWheel , mouseWheelListener ) ; \n\taddListener ( SWT . MouseDown , dndListener ) ; \n\taddListener ( SWT . MouseUp , dndListener ) ; \n\t} \n"}, {"code": "$F1 protected void stopService $F72 { \n\tThread t = keepAliveThread ; \n\tkeepAliveThread = null ; \n\t$F36258 ( t ) } \n"}, {"code": "public static int truncatedCompareTo ( final Calendar cal1 , final Calendar cal2 , final int field ) { \n\tfinal Calendar truncatedCal1 = truncate ( cal1 , field ) ; \n\tfinal Calendar truncatedCal2 = truncate ( cal2 , field ) ; \n\t$F12554 ( truncatedCal1 , truncatedCal2 ) } \n"}, {"code": "public boolean isPortUsable ( StoragePort storagePort ) $F8587 ( isPortUsable , storagePort , _BOOL ) "}, {"code": "$F14119 ( this , System ) "}, {"code": "$F1 public void actionPerformed ( ActionEvent event ) { \n\t$F35563 ( command , event ) if $F3057 ( command ) $F5795 ( attemptFontSelection ) else if $F3057 ( command ) $F5795 ( attemptPaintSelection ) else if $F3057 ( command ) $F5795 ( attemptModifyShowTitle ) } \n"}, {"code": "void removeAttributeValues ( String attrName , Set values ) throws SMSException { \n\tif ( attrName != null ) { \n\t\tMap attrs = getAttributes ( ) ; \n\t\t$F125374 ( origValues , attrs , attrName ) if $F1032 ( origValues ) { \n\t\t\t$F46709 ( newValues , origValues ) newValues . removeAll ( values ) ; \n\t\t\tif $F2979 ( newValues ) { \n\t\t\t\tremoveAttribute ( attrName ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\t$F28017 ( newAttrs ) newAttrs . put ( attrName , newValues ) ; \n\t\t\t\tsetAttributes ( newAttrs ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private static boolean checkContentCharacters ( String chars ) throws CharConversionException { \n\tboolean escape = _BOOL ; \n\tfor ( $F1088 ( i , chars ) ) { \n\t\t$F1280 ( ch , chars , i ) if ( ch <= NUM00 ) { \n\t\t\tswitch ( ch ) { \n\t\t\t\t$F3366 $F3366 $F3366 $F598 $F1262 $F19743 ( escape ) escape = ( i > NUM00 ) && $F198486 ( chars , i ) ; \n\t\t\t\t$F598 $F1262 $F1262 escape = _BOOL ; \n\t\t\t\t$F598 $F1267 if ( ch < NUM00 ) { \n\t\t\t\t\tthrow new CharConversionException ( NUM00 + $F1047 ( ch ) + NUM00 ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn escape == _BOOL ; \n\t} \n"}, {"code": "public void testFindAppDeployments $F72 throws Exception { \n\tWAR war = createWar ( ) ; \n\ttestConfigWar ( ) ; \n\t$F15369 l = deployer . selectAppDeployments ( war , domain ) ; \n\t$F70108 ( assertEquals , l ) deployer . removeDeployableFromDomain ( war , domain ) ; \n\tl = deployer . selectAppDeployments ( war , domain ) ; \n\t$F70108 ( assertEquals , l ) } \n"}, {"code": "$F1 public void drawTop ( final Graphics2D g2d ) { \n\tfinal Rectangle r = getArea ( ) ; \n\tif ( isContained ( ) ) { \n\t\t$F166805 ( r ) } \n\telse { \n\t\t$F82893 ( isOnScreen , g2d , r ) } \n\tfinal Composite oldComposite = g2d . getComposite ( ) ; \n\ttry { \n\t\tg2d . setComposite ( entityComposite ) ; \n\t\tdrawTop ( g2d , r . x , r . y , r . width , r . height ) ; \n\t\t} \n\tfinally { \n\t\tg2d . setComposite ( oldComposite ) ; \n\t\t} \n\t} \n"}, {"code": "protected void initDebug $F72 { \n\tsetDebug ( ( getInitParameter ( NUM00 ) == null ) ? _BOOL : Boolean . valueOf ( getInitParameter ( NUM00 ) ) ) ; \n\t} \n"}, {"code": "protected void indexNulls ( InputStream is , long ptr , $F14699 entries ) { \n\tboolean moreRecords = _BOOL ; \n\tbyte rHdr [ ] = new byte [ SHAPE_RECORD_HEADER_LENGTH ] ; \n\tint result ; \n\tint nRecords = NUM00 ; \n\tint recLengthWords , recLengthBytes ; \n\tlong recOffset ; \n\tint recBufSize = NUM00 ; \n\tbyte recBuf [ ] = new byte [ recBufSize ] ; \n\tdouble x ; \n\tdouble y ; \n\ttry { \n\t\twhile ( moreRecords ) { \n\t\t\t$F61539 ( result , is , rHdr , SHAPE_RECORD_HEADER_LENGTH ) if ( result < NUM00 ) { \n\t\t\t\tmoreRecords = _BOOL ; \n\t\t\t\tif $F6456 ( logger , Level ) { \n\t\t\t\t\t$F29117 ( logger , nRecords ) $F35577 ( logger , recBufSize ) } \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tnRecords ++ ; \n\t\t\t\trecOffset = ptr ; \n\t\t\t\treadBEInt ( rHdr , NUM00 ) ; \n\t\t\t\trecLengthWords = readBEInt ( rHdr , NUM00 ) ; \n\t\t\t\trecLengthBytes = recLengthWords * NUM00 ; \n\t\t\t\tif ( recLengthBytes > recBufSize ) { \n\t\t\t\t\t$F35579 ( logger , Level , recLengthBytes ) recBufSize = recLengthBytes ; \n\t\t\t\t\t$F1325 ( recBuf , recBufSize ) } \n\t\t\t\t$F61539 ( result , is , recBuf , recLengthBytes ) x = NUM00 ; \n\t\t\t\ty = NUM00 ; \n\t\t\t\tptr += recLengthBytes + NUM00 ; \n\t\t\t\tEntry entry = new Entry ( x , y , x , y , ( int ) recOffset ) ; \n\t\t\t\tentries . add ( entry ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F61572 ( e ) finally { \n\t\ttry $F881 ( is ) $F42485 } \n\t} \n"}, {"code": "protected static RpcPair resolveRpcPair ( ASTNode node , PeerTypeResolver peerResolver ) { \n\tMethodDeclaration methodDecl = ASTResolving . findParentMethodDeclaration ( node ) ; \n\tTypeDeclaration typeDecl = ( TypeDeclaration ) ASTResolving . findAncestor ( node , ASTNode . TYPE_DECLARATION ) ; \n\t$F83951 ( typeDecl ) IType dstType = peerResolver . getPeerType ( typeDecl ) ; \n\t$F1338 ( dstType ) CompilationUnit astRoot = ASTResolving . createQuickFixAST ( dstType . getCompilationUnit ( ) , null ) ; \n\tTypeDeclaration dstTypeDecl = JavaASTUtils . findTypeDeclaration ( astRoot , dstType . getFullyQualifiedName ( NUM00 ) ) ; \n\t$F1338 ( dstTypeDecl ) return new RpcPair ( typeDecl , methodDecl , dstTypeDecl ) ; \n\t} \n"}, {"code": "public static void assertEquals ( FieldMatrix < ? extends FieldElement $F1011 > expected , FieldMatrix < ? extends FieldElement $F1011 > observed ) { \n\tAssert . assertNotNull ( NUM00 , observed ) ; \n\tif ( expected . getColumnDimension ( ) != observed . getColumnDimension ( ) || expected . getRowDimension ( ) != observed . getRowDimension ( ) ) { \n\t\t$F83 ( messageBuffer ) $F84 ( messageBuffer ) messageBuffer . append ( $F314977 ( observed ) + observed . getColumnDimension ( ) ) ; \n\t\tmessageBuffer . append ( $F314977 ( expected ) + expected . getColumnDimension ( ) ) ; \n\t\tAssert . fail ( messageBuffer . toString ( ) ) ; \n\t\t} \n\tfor ( int i = NUM00 ; \n\ti < expected . getRowDimension ( ) ; \n\t++ i ) { \n\t\tfor ( int j = NUM00 ; \n\t\tj < expected . getColumnDimension ( ) ; \n\t\t++ j ) { \n\t\t\tFieldElement $F1011 eij = expected . getEntry ( i , j ) ; \n\t\t\tFieldElement $F1011 oij = observed . getEntry ( i , j ) ; \n\t\t\tAssert . assertEquals ( eij , oij ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void addAddition ( String addition ) $F207 ( additions , addition ) "}, {"code": "private void startNewTransition $F72 { \n\tif $F931 ( hasBounds ) { \n\t\tthrow new UnsupportedOperationException $F3487 ; \n\t\t} \n\tmCurrentTrans = mTransGen . generateNextTransition ( mDrawableRect , mViewportRect ) ; \n\tmElapsedTime = NUM00 ; \n\t$F3224 ( mLastFrameTime , System ) fireTransitionStart ( mCurrentTrans ) ; \n\t} \n"}, {"code": "protected void rotateOrthogonal $F72 { \n\tactive . setRotation ( active . getRotation ( ) + NUM00 , this ) ; \n\terror . setRotation ( error . getRotation ( ) + NUM00 , this ) ; \n\tdisplayState ( ) ; \n\trepaint ( ) ; \n\t} \n"}, {"code": "private String convertToElementName ( String attributeName ) $F11447 ( attributeName ) "}, {"code": "private boolean hasOtherMapAndReduceParentNode ( Lop tmpNode , $F180243 nodeList , Lop node ) { \n\tif ( tmpNode . getExecLocation ( ) == ExecLocation . MapAndReduce ) return _BOOL ; \n\tfor ( Lop n : tmpNode . getOutputs ( ) ) { \n\t\tif ( nodeList . contains ( n ) && isChild ( n , node , IDMap ) ) { \n\t\t\tif ( ! n . equals ( node ) && n . getExecLocation ( ) == ExecLocation . MapAndReduce ) return _BOOL ; \n\t\t\telse return hasOtherMapAndReduceParentNode ( n , nodeList , node ) ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public synchronized void add ( double value ) { \n\tadd ( $F37513 ( mCategories ) , value ) ; \n\t} \n"}, {"code": "$F5466 String findLongestNamePrefix ( Node name , $F2689 namespaces ) { \n\tif ( namespaces . contains ( name . getQualifiedName ( ) ) ) { \n\t\treturn name . getQualifiedName ( ) ; \n\t\t} \n\telse if ( name . isGetProp ( ) ) { \n\t\treturn findLongestNamePrefix ( name . getFirstChild ( ) , namespaces ) ; \n\t\t} \n\t$F1274 } \n"}, {"code": "public static LogWriter createLogWriter ( final Properties properties ) { \n\tProperties nonDefault = properties ; \n\tif ( nonDefault == null ) { \n\t\t$F65625 ( nonDefault ) } \n\tDistributedTestUtils . addHydraProperties ( nonDefault ) ; \n\tDistributionConfig dc = new DistributionConfigImpl ( nonDefault ) ; \n\tLogWriter logger = LogWriterFactory . createLogWriterLogger ( _BOOL , _BOOL , dc , _BOOL ) ; \n\tnonDefault . put ( DistributionConfig . LOG_WRITER_NAME , logger ) ; \n\treturn logger ; \n\t} \n"}, {"code": "public int session $F72 $F22645 ( Integer , fields ) "}, {"code": "public ReflectiveProperty ( $F20474 propertyHolder , $F197000 valueType , String name ) { \n\tsuper ( valueType , name ) ; \n\t$F226746 ( firstLetter , Character , name ) $F28924 ( theRest , name ) String capitalizedName = firstLetter + theRest ; \n\tString getterName = PREFIX_GET + capitalizedName ; \n\ttry $F226752 ( mGetter , propertyHolder , getterName ) catch ( NoSuchMethodException e ) { \n\t\ttry $F226756 ( mGetter , propertyHolder , getterName , _BOOL ) catch ( NoSuchMethodException e2 ) { \n\t\t\tgetterName = PREFIX_IS + capitalizedName ; \n\t\t\ttry $F226752 ( mGetter , propertyHolder , getterName ) catch ( NoSuchMethodException e3 ) { \n\t\t\t\ttry $F226756 ( mGetter , propertyHolder , getterName , _BOOL ) catch ( NoSuchMethodException e4 ) { \n\t\t\t\t\ttry { \n\t\t\t\t\t\tmField = propertyHolder . getField ( name ) ; \n\t\t\t\t\t\t$F42606 ( fieldType , mField ) $F226761 ( typesMatch , valueType , fieldType ) $F665 } \n\t\t\t\t\tcatch ( NoSuchFieldException e5 ) { \n\t\t\t\t\t\tthrow new NoSuchPropertyException ( NUM00 + NUM00 + name ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tClass getterType = mGetter . getReturnType ( ) ; \n\t$F226761 ( typesMatch , valueType , getterType ) String setterName = PREFIX_SET + capitalizedName ; \n\ttry { \n\t\tmSetter = propertyHolder . getDeclaredMethod ( setterName , getterType ) ; \n\t\tmSetter . setAccessible ( _BOOL ) ; \n\t\t} \n\t$F110500 } \n"}, {"code": "private void writePhotoOverlay ( String name , String category , String description , String styleName , Location location , String photoUrl , float heading ) { \n\tif ( location != null ) { \n\t\t$F8438 ( printWriter ) printWriter . println ( NUM00 + StringUtils . formatCData ( name ) + NUM00 ) ; \n\t\tprintWriter . println ( NUM00 + StringUtils . formatCData ( description ) + NUM00 ) ; \n\t\t$F21384 ( printWriter ) printWriter . print ( NUM00 + location . getLongitude ( ) + NUM00 ) ; \n\t\tprintWriter . print ( NUM00 + location . getLatitude ( ) + NUM00 ) ; \n\t\t$F21384 ( printWriter ) $F147974 ( printWriter , heading ) $F21384 ( printWriter ) $F8438 ( printWriter ) printWriter . println ( NUM00 + StringUtils . formatDateTimeIso8601 ( location . getTime ( ) ) + NUM00 ) ; \n\t\t$F24499 ( printWriter , styleName ) writeCategory ( category ) ; \n\t\tif ( playTrack ) { \n\t\t\tprintWriter . println ( NUM00 + Uri . decode ( photoUrl ) + NUM00 ) ; \n\t\t\t} \n\t\telse { \n\t\t\t$F23375 ( uri , Uri , photoUrl ) printWriter . println ( NUM00 + KmzTrackExporter . KMZ_IMAGES_DIR + File . separatorChar + uri . getLastPathSegment ( ) + NUM00 ) ; \n\t\t\t} \n\t\t$F21384 ( printWriter ) $F21384 ( printWriter ) $F21384 ( printWriter ) $F21384 ( printWriter ) $F21384 ( printWriter ) $F21384 ( printWriter ) $F8438 ( printWriter ) $F8438 ( printWriter ) printWriter . println ( NUM00 + getCoordinates ( location , NUM00 ) + NUM00 ) ; \n\t\t$F8438 ( printWriter ) $F8438 ( printWriter ) } \n\t} \n"}, {"code": "public boolean onBackPressed $F72 { \n\tif ( doesDrawerExist ( ) ) { \n\t\tif ( mDrawer . isDrawerVisible ( Gravity . START ) ) { \n\t\t\tmDrawer . closeDrawer ( Gravity . START ) ; \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\tif ( mContentView . onBackPressed ( ) ) return _BOOL ; \n\tif $F84882 ( mStateStack ) { \n\t\t$F34454 ( mStateStack ) if $F84882 ( mStateStack ) { \n\t\t\tsetState ( mStateStack . pop ( ) ) ; \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void simulateMethod $F5498 ( method , thisVar , returnVar ) { \n\t$F5500 ( subSignature , method ) if $F3057 ( subSignature ) $F5501 ( java_io_ObjectInputStream_latestUserDefinedLoader , method , thisVar , returnVar , params ) else if $F3057 ( subSignature ) $F5501 ( java_io_ObjectInputStream_allocateNewObject , method , thisVar , returnVar , params ) else if $F3057 ( subSignature ) $F5501 ( java_io_ObjectInputStream_allocateNewArray , method , thisVar , returnVar , params ) else $F5501 ( defaultMethod , method , thisVar , returnVar , params ) } \n"}, {"code": "public NodeSetDTM ( NodeIterator iterator , XPathContext xctxt ) { \n\tsuper ( ) ; \n\tNode node ; \n\tm_manager = xctxt . getDTMManager ( ) ; \n\twhile ( null != $F161934 ( node , iterator ) ) { \n\t\tint handle = xctxt . getDTMHandleFromNode ( node ) ; \n\t\taddNodeInDocOrder ( handle , xctxt ) ; \n\t\t} \n\t} \n"}, {"code": "public ShardIterator onlyNodeSelectorActiveInitializingShardsIt ( String nodeAttribute , DiscoveryNodes discoveryNodes ) { \n\tArrayList $F411430 ordered = new $F201 $F256270 ( activeShards , allInitializingShards ) ; \n\t$F2689 selectedNodes = Sets . newHashSet ( discoveryNodes . resolveNodesIds ( nodeAttribute ) ) ; \n\tfor ( ShardRouting shardRouting : activeShards ) { \n\t\tif ( selectedNodes . contains ( shardRouting . currentNodeId ( ) ) ) $F207 ( ordered , shardRouting ) } \n\tfor ( ShardRouting shardRouting : allInitializingShards ) { \n\t\tif ( selectedNodes . contains ( shardRouting . currentNodeId ( ) ) ) $F207 ( ordered , shardRouting ) } \n\tif $F2979 ( ordered ) $F29526 ( nodeAttribute ) return new PlainShardIterator ( shardId , ordered ) ; \n\t} \n"}, {"code": "private void checkChanges $F72 { \n\tsettings . clearMovieNfoFilenames ( ) ; \n\tif $F31483 ( cbMovieNfoFilename1 ) { \n\t\tsettings . addMovieNfoFilename ( MovieNfoNaming . FILENAME_NFO ) ; \n\t\t} \n\tif $F31483 ( cbMovieNfoFilename2 ) { \n\t\tsettings . addMovieNfoFilename ( MovieNfoNaming . MOVIE_NFO ) ; \n\t\t} \n\tif $F31483 ( cbMovieNfoFilename3 ) { \n\t\tsettings . addMovieNfoFilename ( MovieNfoNaming . DISC_NFO ) ; \n\t\t} \n\tCertificationStyleWrapper wrapper = ( CertificationStyleWrapper ) cbCertificationStyle . getSelectedItem ( ) ; \n\tif ( wrapper != null && settings . getMovieCertificationStyle ( ) != wrapper . style ) { \n\t\tsettings . setMovieCertificationStyle ( wrapper . style ) ; \n\t\t} \n\t} \n"}, {"code": "XMenuItemPeer [ ] copyItems $F72 { \n\tsynchronized ( getMenuTreeLock ( ) ) { \n\t\treturn ( XMenuItemPeer [ ] ) items . toArray ( new XMenuItemPeer $F10277 ) ; \n\t\t} \n\t} \n"}, {"code": "public byte receiveOneByte $F72 { \n\t$F13527 ( Log , TAG ) try { \n\t\tacquireLock ( ) ; \n\t\tmServerSocket . receive ( mReceivePacket ) ; \n\t\tLog . d ( TAG , NUM00 + ( NUM00 + $F94795 ( mReceivePacket ) ) ) ; \n\t\treturn $F94795 ( mReceivePacket ) ; \n\t\t} \n\t$F12241 ( e ) return Byte . MIN_VALUE ; \n\t} \n"}, {"code": "public static void connectionClosed $F72 { \n\tnumConnections . getAndDecrement ( ) ; \n\t} \n"}, {"code": "public static String buildChatSDP ( String ipAddress , int localPort , String protocol , String acceptTypes , String wrapperTypes , String setup , String path , String direction ) { \n\treturn buildSDP ( ipAddress , localPort , protocol , acceptTypes , wrapperTypes , null , null , null , setup , path , direction , null , NUM00 ) ; \n\t} \n"}, {"code": "$F2027 determineDimensions ( int sourceCodeWords , int errorCorrectionCodeWords ) throws WriterException { \n\tfloat ratio = NUM00 ; \n\t$F10498 ( dimension ) for ( int cols = minCols ; \n\tcols <= maxCols ; \n\tcols ++ ) { \n\t\tint rows = calculateNumberOfRows ( sourceCodeWords , errorCorrectionCodeWords , cols ) ; \n\t\tif ( rows < minRows ) $F5153 $F10500 ( rows , maxRows ) float newRatio = ( ( NUM00 * cols + NUM00 ) * DEFAULT_MODULE_WIDTH ) / ( rows * HEIGHT ) ; \n\t\tif ( dimension != null && Math . abs ( newRatio - PREFERRED_RATIO ) > Math . abs ( ratio - PREFERRED_RATIO ) ) $F1448 ratio = newRatio ; \n\t\tdimension = $F10511 ( cols , rows ) ; \n\t\t} \n\tif ( dimension == null ) { \n\t\tint rows = calculateNumberOfRows ( sourceCodeWords , errorCorrectionCodeWords , minCols ) ; \n\t\tif ( rows < minRows ) { \n\t\t\tdimension = $F10511 ( minCols , minRows ) ; \n\t\t\t} \n\t\t} \n\tif ( dimension == null ) { \n\t\tthrow new WriterException $F580 ; \n\t\t} \n\treturn dimension ; \n\t} \n"}, {"code": "private static void s_ucumm ( SparseBlock a , $F1986 agg , $F1986 c , int m , int n , int rl , int ru ) { \n\t$F1986 cprod = ( agg != null ) ? agg : new double [ n ] ; \n\tif ( agg == null ) $F9952 ( Arrays , cprod ) $F4120 ( cnt , n ) for ( $F305651 ( i , rl , ix , n , ru ) ) { \n\t\tif $F20899 ( a , i ) { \n\t\t\tint apos = a . pos ( i ) ; \n\t\t\t$F64142 ( alen , a , i ) $F2027 aix = a . indexes ( i ) ; \n\t\t\t$F1986 avals = a . values ( i ) ; \n\t\t\tproductAgg ( avals , cprod , aix , apos , NUM00 , alen ) ; \n\t\t\tcountAgg ( avals , cnt , aix , apos , alen ) ; \n\t\t\t} \n\t\tfor ( $F119 ( j , n ) ) if ( cnt [ j ] < i + NUM00 ) cprod [ j ] *= NUM00 ; \n\t\t$F6483 ( System , cprod , c , ix , n ) } \n\t} \n"}, {"code": "public static DataDisplayTable listFontMetrics ( Font font ) { \n\t$F64831 ( header ) $F218688 displayAlignment = { \n\t\tAlign . Left , Align . Left } \n\t; \n\t$F218697 ( table , Arrays , header ) $F218699 ( table , Arrays , displayAlignment ) FontHeaderTable headTable = ( FontHeaderTable ) FontUtils . getTable ( font , Tag . head ) ; \n\tHorizontalHeaderTable hheaTable = ( HorizontalHeaderTable ) FontUtils . getTable ( font , Tag . hhea ) ; \n\tOS2Table os2Table = ( OS2Table ) FontUtils . getTable ( font , Tag . OS_2 ) ; \n\ttable . add ( Arrays . asList ( new String [ ] { \n\t\tNUM00 , String . format ( NUM00 , headTable . unitsPerEm ( ) ) } \n\t) ) ; \n\ttable . add ( Arrays . asList ( new String [ ] { \n\t\tNUM00 , String . format ( NUM00 , headTable . xMin ( ) , headTable . xMax ( ) ) } \n\t) ) ; \n\ttable . add ( Arrays . asList ( new String [ ] { \n\t\tNUM00 , String . format ( NUM00 , headTable . yMin ( ) , headTable . yMax ( ) ) } \n\t) ) ; \n\ttable . add ( Arrays . asList ( new String [ ] { \n\t\tNUM00 , String . format ( NUM00 , headTable . lowestRecPPEM ( ) ) } \n\t) ) ; \n\ttable . add ( Arrays . asList ( new String [ ] { \n\t\tNUM00 , String . format ( NUM00 , hheaTable . ascender ( ) ) } \n\t) ) ; \n\ttable . add ( Arrays . asList ( new String [ ] { \n\t\tNUM00 , String . format ( NUM00 , hheaTable . descender ( ) ) } \n\t) ) ; \n\ttable . add ( Arrays . asList ( new String [ ] { \n\t\tNUM00 , String . format ( NUM00 , hheaTable . lineGap ( ) ) } \n\t) ) ; \n\ttable . add ( Arrays . asList ( new String [ ] { \n\t\tNUM00 , String . format ( NUM00 , os2Table . usWinAscent ( ) ) } \n\t) ) ; \n\ttable . add ( Arrays . asList ( new String [ ] { \n\t\tNUM00 , String . format ( NUM00 , os2Table . usWinDescent ( ) ) } \n\t) ) ; \n\ttable . add ( Arrays . asList ( new String [ ] { \n\t\tNUM00 , String . format ( NUM00 , os2Table . sTypoAscender ( ) ) } \n\t) ) ; \n\ttable . add ( Arrays . asList ( new String [ ] { \n\t\tNUM00 , String . format ( NUM00 , os2Table . sTypoDescender ( ) ) } \n\t) ) ; \n\ttable . add ( Arrays . asList ( new String [ ] { \n\t\tNUM00 , String . format ( NUM00 , os2Table . sTypoLineGap ( ) ) } \n\t) ) ; \n\treturn table ; \n\t} \n"}, {"code": "$F1 public $F987 listOptions $F72 { \n\t$F994 ( newVector ) $F9007 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F77737 ( newVector ) $F9010 ( newVector , Collections , super ) $F1007 ( newVector ) } \n"}, {"code": "public static ShoppingCartItem makeItem ( Integer cartLocation , String itemType , String itemDescription , String productCategoryId , BigDecimal basePrice , BigDecimal selectedAmount , BigDecimal quantity , $F2100 ( attributes ) , String prodCatalogId , ShoppingCart . ShoppingCartItemGroup itemGroup , LocalDispatcher dispatcher , ShoppingCart cart , Boolean triggerExternalOpsBool ) throws CartItemModifyException { \n\t$F6257 ( delegator , cart ) ShoppingCartItem newItem = new ShoppingCartItem ( delegator , itemType , itemDescription , productCategoryId , basePrice , attributes , prodCatalogId , cart . getLocale ( ) , itemGroup ) ; \n\tif ( cartLocation == null ) { \n\t\tcart . addItemToEnd ( newItem ) ; \n\t\t} \n\telse { \n\t\tcart . addItem ( cartLocation . intValue ( ) , newItem ) ; \n\t\t} \n\tboolean triggerExternalOps = triggerExternalOpsBool == null ? _BOOL : triggerExternalOpsBool . booleanValue ( ) ; \n\ttry { \n\t\tnewItem . setQuantity ( quantity , dispatcher , cart , triggerExternalOps ) ; \n\t\t} \n\tcatch ( CartItemModifyException e ) { \n\t\tcart . removeEmptyCartItems ( ) ; \n\t\tthrow e ; \n\t\t} \n\tif ( selectedAmount != null ) { \n\t\tnewItem . setSelectedAmount ( selectedAmount ) ; \n\t\t} \n\treturn newItem ; \n\t} \n"}, {"code": "private native synchronized static void hookMethodNative ( Member method , $F6969 declaringClass , int slot , Object additionalInfo ) ; \n"}, {"code": "final void runWorker ( Worker w ) { \n\tRunnable task = w . firstTask ; \n\tw . firstTask = null ; \n\tboolean completedAbruptly = _BOOL ; \n\ttry { \n\t\twhile ( task != null || ( task = getTask ( ) ) != null ) { \n\t\t\t$F8934 ( w ) clearInterruptsForTaskRun ( ) ; \n\t\t\ttry { \n\t\t\t\tbeforeExecute ( w . thread , task ) ; \n\t\t\t\tThrowable thrown = null ; \n\t\t\t\ttry $F21688 ( task ) catch ( RuntimeException x ) $F234985 ( thrown , x ) catch ( Error x ) $F234985 ( thrown , x ) catch ( Throwable x ) { \n\t\t\t\t\tthrown = x ; \n\t\t\t\t\tthrow new Error ( x ) ; \n\t\t\t\t\t} \n\t\t\t\t$F168670 ( afterExecute , task , thrown ) } \n\t\t\tfinally { \n\t\t\t\ttask = null ; \n\t\t\t\tw . completedTasks ++ ; \n\t\t\t\t$F704 ( w ) } \n\t\t\t} \n\t\tcompletedAbruptly = _BOOL ; \n\t\t} \n\t$F168670 ( processWorkerExit , w , completedAbruptly ) } \n"}, {"code": "private static ClusterProperties fromProperties ( Properties props ) { \n\tClusterProperties prop = new ClusterProperties $F72 ; \n\tprop . clusterName = getStringProperty ( IGNITE_CLUSTER_NAME , props , DEFAULT_CLUSTER_NAME ) ; \n\tprop . cpuPerNode = getDoubleProperty ( IGNITE_RUN_CPU_PER_NODE , props , DEFAULT_CPU_PER_NODE ) ; \n\tprop . memPerNode = getDoubleProperty ( IGNITE_MEMORY_PER_NODE , props , DEFAULT_MEM_PER_NODE ) ; \n\tprop . memOverHeadPerNode = getDoubleProperty ( IGNITE_MEMORY_OVERHEAD_PER_NODE , props , Math . max ( NUM00 * prop . memPerNode , DEFAULT_MINIMUM_MEM_OVERHEAD_PER_NODE ) ) ; \n\tprop . nodeCnt = getDoubleProperty ( IGNITE_NODE_COUNT , props , DEFAULT_IGNITE_NODE_COUNT ) ; \n\tprop . igniteUrl = getStringProperty ( IGNITE_URL , props , null ) ; \n\tprop . ignitePath = getStringProperty ( IGNITE_PATH , props , null ) ; \n\tprop . licencePath = getStringProperty ( LICENCE_PATH , props , null ) ; \n\tprop . jvmOpts = getStringProperty ( IGNITE_JVM_OPTS , props , null ) ; \n\tprop . igniteWorkDir = getStringProperty ( IGNITE_WORKING_DIR , props , DEFAULT_IGNITE_WORK_DIR ) ; \n\tprop . igniteLocalWorkDir = getStringProperty ( IGNITE_LOCAL_WORK_DIR , props , DEFAULT_IGNITE_LOCAL_WORK_DIR ) ; \n\tprop . igniteReleasesDir = getStringProperty ( IGNITE_RELEASES_DIR , props , DEFAULT_IGNITE_RELEASES_DIR ) ; \n\tprop . igniteCfg = getStringProperty ( IGNITE_CONFIG_XML , props , null ) ; \n\tprop . userLibs = getStringProperty ( IGNITE_USERS_LIBS , props , null ) ; \n\tString pattern = getStringProperty ( IGNITE_HOSTNAME_CONSTRAINT , props , null ) ; \n\tif ( pattern != null ) { \n\t\ttry { \n\t\t\tprop . hostnameConstraint = Pattern . compile ( pattern ) ; \n\t\t\t} \n\t\tcatch ( PatternSyntaxException e ) { \n\t\t\tlog . log ( Level . WARNING , NUM00 , e ) ; \n\t\t\t} \n\t\t} \n\treturn prop ; \n\t} \n"}, {"code": "public static String generateNativeGuid ( StorageSystem device ) { \n\treturn String . format ( NUM00 , $F131294 ( _deviceTypeMap , device ) , device . getSerialNumber ( ) ) ; \n\t} \n"}, {"code": "public CacheMetricsSnapshot ( CacheMetrics loc , Collection < CacheMetrics > metrics ) { \n\tcacheName = loc . name ( ) ; \n\t$F54171 ( isEmpty , loc ) $F54171 ( isWriteBehindEnabled , loc ) writeBehindFlushSize = loc . getWriteBehindFlushSize ( ) ; \n\twriteBehindFlushThreadCnt = loc . getWriteBehindFlushThreadCount ( ) ; \n\twriteBehindFlushFreq = loc . getWriteBehindFlushFrequency ( ) ; \n\twriteBehindStoreBatchSize = loc . getWriteBehindStoreBatchSize ( ) ; \n\twriteBehindBufSize = loc . getWriteBehindBufferSize ( ) ; \n\tsize = loc . getSize ( ) ; \n\tkeySize = loc . getKeySize ( ) ; \n\tkeyType = loc . getKeyType ( ) ; \n\tvalType = loc . getValueType ( ) ; \n\tisStoreByVal = loc . isStoreByValue ( ) ; \n\t$F54171 ( isStatisticsEnabled , loc ) $F54171 ( isManagementEnabled , loc ) $F54171 ( isReadThrough , loc ) $F54171 ( isWriteThrough , loc ) offHeapMaxSize = loc . getOffHeapMaxSize ( ) ; \n\tfor ( CacheMetrics e : metrics ) { \n\t\treads += e . getCacheGets ( ) ; \n\t\tputs += e . getCachePuts ( ) ; \n\t\thits += e . getCacheHits ( ) ; \n\t\tmisses += e . getCacheMisses ( ) ; \n\t\ttxCommits += e . getCacheTxCommits ( ) ; \n\t\ttxRollbacks += e . getCacheTxRollbacks ( ) ; \n\t\tevicts += e . getCacheEvictions ( ) ; \n\t\tremoves += e . getCacheRemovals ( ) ; \n\t\tputAvgTimeNanos += e . getAveragePutTime ( ) ; \n\t\tgetAvgTimeNanos += e . getAverageGetTime ( ) ; \n\t\trmvAvgTimeNanos += e . getAverageRemoveTime ( ) ; \n\t\tcommitAvgTimeNanos += e . getAverageTxCommitTime ( ) ; \n\t\trollbackAvgTimeNanos += e . getAverageTxRollbackTime ( ) ; \n\t\tif ( e . getOverflowSize ( ) > - NUM00 ) overflowSize += e . getOverflowSize ( ) ; \n\t\telse overflowSize = - NUM00 ; \n\t\toffHeapGets += e . getOffHeapGets ( ) ; \n\t\toffHeapPuts += e . getOffHeapPuts ( ) ; \n\t\toffHeapRemoves += e . getOffHeapRemovals ( ) ; \n\t\toffHeapEvicts += e . getOffHeapEvictions ( ) ; \n\t\toffHeapHits += e . getOffHeapHits ( ) ; \n\t\toffHeapMisses += e . getOffHeapMisses ( ) ; \n\t\toffHeapEntriesCnt += e . getOffHeapEntriesCount ( ) ; \n\t\toffHeapPrimaryEntriesCnt += e . getOffHeapPrimaryEntriesCount ( ) ; \n\t\toffHeapBackupEntriesCnt += e . getOffHeapBackupEntriesCount ( ) ; \n\t\toffHeapAllocatedSize += e . getOffHeapAllocatedSize ( ) ; \n\t\tswapGets += e . getSwapGets ( ) ; \n\t\tswapPuts += e . getSwapPuts ( ) ; \n\t\tswapRemoves += e . getSwapRemovals ( ) ; \n\t\tswapHits += e . getSwapHits ( ) ; \n\t\tswapMisses += e . getSwapMisses ( ) ; \n\t\tswapEntriesCnt += e . getSwapEntriesCount ( ) ; \n\t\tswapSize += e . getSwapSize ( ) ; \n\t\tif ( e . getDhtEvictQueueCurrentSize ( ) > - NUM00 ) dhtEvictQueueCurrSize += e . getDhtEvictQueueCurrentSize ( ) ; \n\t\telse dhtEvictQueueCurrSize = - NUM00 ; \n\t\ttxThreadMapSize += e . getTxThreadMapSize ( ) ; \n\t\ttxXidMapSize += e . getTxXidMapSize ( ) ; \n\t\ttxCommitQueueSize += e . getTxCommitQueueSize ( ) ; \n\t\ttxPrepareQueueSize += e . getTxPrepareQueueSize ( ) ; \n\t\ttxStartVerCountsSize += e . getTxStartVersionCountsSize ( ) ; \n\t\ttxCommittedVersionsSize += e . getTxCommittedVersionsSize ( ) ; \n\t\ttxRolledbackVersionsSize += e . getTxRolledbackVersionsSize ( ) ; \n\t\tif ( e . getTxDhtThreadMapSize ( ) > - NUM00 ) txDhtThreadMapSize += e . getTxDhtThreadMapSize ( ) ; \n\t\telse txDhtThreadMapSize = - NUM00 ; \n\t\tif ( e . getTxDhtXidMapSize ( ) > - NUM00 ) txDhtXidMapSize += e . getTxDhtXidMapSize ( ) ; \n\t\telse txDhtXidMapSize = - NUM00 ; \n\t\tif ( e . getTxDhtCommitQueueSize ( ) > - NUM00 ) txDhtCommitQueueSize += e . getTxDhtCommitQueueSize ( ) ; \n\t\telse txDhtCommitQueueSize = - NUM00 ; \n\t\tif ( e . getTxDhtPrepareQueueSize ( ) > - NUM00 ) txDhtPrepareQueueSize += e . getTxDhtPrepareQueueSize ( ) ; \n\t\telse txDhtPrepareQueueSize = - NUM00 ; \n\t\tif ( e . getTxDhtStartVersionCountsSize ( ) > - NUM00 ) txDhtStartVerCountsSize += e . getTxDhtStartVersionCountsSize ( ) ; \n\t\telse txDhtStartVerCountsSize = - NUM00 ; \n\t\tif ( e . getTxDhtCommittedVersionsSize ( ) > - NUM00 ) txDhtCommittedVersionsSize += e . getTxDhtCommittedVersionsSize ( ) ; \n\t\telse txDhtCommittedVersionsSize = - NUM00 ; \n\t\tif ( e . getTxDhtRolledbackVersionsSize ( ) > - NUM00 ) txDhtRolledbackVersionsSize += e . getTxDhtRolledbackVersionsSize ( ) ; \n\t\telse txDhtRolledbackVersionsSize = - NUM00 ; \n\t\tif ( e . getWriteBehindTotalCriticalOverflowCount ( ) > - NUM00 ) writeBehindTotalCriticalOverflowCnt += e . getWriteBehindTotalCriticalOverflowCount ( ) ; \n\t\telse writeBehindTotalCriticalOverflowCnt = - NUM00 ; \n\t\tif ( e . getWriteBehindCriticalOverflowCount ( ) > - NUM00 ) writeBehindCriticalOverflowCnt += e . getWriteBehindCriticalOverflowCount ( ) ; \n\t\telse writeBehindCriticalOverflowCnt = - NUM00 ; \n\t\tif ( e . getWriteBehindErrorRetryCount ( ) > - NUM00 ) writeBehindErrorRetryCnt += e . getWriteBehindErrorRetryCount ( ) ; \n\t\telse writeBehindErrorRetryCnt = - NUM00 ; \n\t\t} \n\t$F115 ( size , metrics ) if ( size > NUM00 ) { \n\t\tputAvgTimeNanos /= size ; \n\t\tgetAvgTimeNanos /= size ; \n\t\trmvAvgTimeNanos /= size ; \n\t\tcommitAvgTimeNanos /= size ; \n\t\trollbackAvgTimeNanos /= size ; \n\t\t} \n\t} \n"}, {"code": "$F32797 ( sourcePosition , referencePosition , srcAndRefPositions , referenceCount , a , System ) "}, {"code": "public void step3 ( $F2540 ( fileNameToPackageName ) , Map < String , List < FunDef > > fileNameToFunctions ) throws SyntaxException { \n\tfor ( STypeDef sTypeDef : typeDefSet ) { \n\t\tif ( sTypeDef instanceof SClassDef ) { \n\t\t\tList < STypeDef > $F204 ( circularRecorder ) ; \n\t\t\tSClassDef parent = ( ( SClassDef ) sTypeDef ) . parent ( ) ; \n\t\t\twhile ( parent != null ) { \n\t\t\t\tcircularRecorder . add ( parent ) ; \n\t\t\t\tif $F1238 ( parent , sTypeDef ) { \n\t\t\t\t\terr . SyntaxException ( NUM00 + circularRecorder , LineCol . SYNTHETIC ) ; \n\t\t\t\t\t$F665 } \n\t\t\t\tparent = parent . parent ( ) ; \n\t\t\t\t} \n\t\t\t$F725 ( circularRecorder ) } \n\t\telse if ( sTypeDef instanceof SInterfaceDef ) { \n\t\t\tSInterfaceDef i = ( SInterfaceDef ) sTypeDef ; \n\t\t\tcheckInterfaceCircularInheritance ( i , i . superInterfaces ( ) , $F203 ) ; \n\t\t\t} \n\t\telse { \n\t\t\tthrow new LtBug $F93485 ( sTypeDef ) ; \n\t\t\t} \n\t\t} \n\tfor ( STypeDef sTypeDef : typeDefSet ) { \n\t\tcheckOverrideAllMethods ( sTypeDef ) ; \n\t\t} \n\tfor ( $F3465 ( fileName , mapOfStatements ) ) { \n\t\tList < Import > imports = fileNameToImport . get ( fileName ) ; \n\t\t$F1729 ( pkg , fileNameToPackageName , fileName ) List < FunDef > functionDefs = fileNameToFunctions . get ( fileName ) ; \n\t\tfor ( FunDef fun : functionDefs ) { \n\t\t\tSTypeDef type = getTypeWithAccess ( fun . superType , imports ) ; \n\t\t\tif ( ! ( type instanceof SClassDef || type instanceof SInterfaceDef ) ) { \n\t\t\t\terr . SyntaxException ( NUM00 , fun . superType . line_col ( ) ) ; \n\t\t\t\t$F665 } \n\t\t\tSConstructorDef [ ] zeroParamConstructor = new SConstructorDef $F380 ; \n\t\t\tSMethodDef [ ] methodToOverride = new SMethodDef $F380 ; \n\t\t\tif ( ! getMethodForLambda ( type , zeroParamConstructor , methodToOverride ) ) { \n\t\t\t\terr . SyntaxException ( NUM00 , fun . superType . line_col ( ) ) ; \n\t\t\t\t$F665 } \n\t\t\tSClassDef sClassDef = ( SClassDef ) types . get ( pkg + fun . name ) ; \n\t\t\tparseAnnos ( fun . annos , sClassDef , imports , ElementType . TYPE , Arrays . asList ( ElementType . METHOD , ElementType . CONSTRUCTOR ) ) ; \n\t\t\tif ( zeroParamConstructor [ NUM00 ] == null ) { \n\t\t\t\tsClassDef . setParent ( getObject_Class ( ) ) ; \n\t\t\t\tassert type instanceof SInterfaceDef ; \n\t\t\t\tsClassDef . superInterfaces ( ) . add ( ( SInterfaceDef ) type ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tsClassDef . setParent ( ( SClassDef ) zeroParamConstructor [ NUM00 ] . declaringType ( ) ) ; \n\t\t\t\t} \n\t\t\tSConstructorDef cons = new SConstructorDef ( LineCol . SYNTHETIC ) ; \n\t\t\tparseAnnos ( fun . annos , cons , imports , ElementType . CONSTRUCTOR , Arrays . asList ( ElementType . TYPE , ElementType . METHOD ) ) ; \n\t\t\tcons . setDeclaringType ( sClassDef ) ; \n\t\t\tsClassDef . constructors ( ) . add ( cons ) ; \n\t\t\tif ( zeroParamConstructor [ NUM00 ] == null ) { \n\t\t\t\tzeroParamConstructor [ NUM00 ] = getObject_Class ( ) . constructors ( ) . get ( NUM00 ) ; \n\t\t\t\t} \n\t\t\tcons . statements ( ) . add ( new Ins . InvokeSpecial ( new Ins . This ( sClassDef ) , zeroParamConstructor [ NUM00 ] , LineCol . SYNTHETIC ) ) ; \n\t\t\tcons . modifiers ( ) . add ( SModifier . PUBLIC ) ; \n\t\t\tSMethodDef method = new SMethodDef ( LineCol . SYNTHETIC ) ; \n\t\t\tmethod . setDeclaringType ( sClassDef ) ; \n\t\t\tmethod . setReturnType ( getRealReturnType ( methodToOverride [ NUM00 ] . getReturnType ( ) , _BOOL ) ) ; \n\t\t\tmethod . setName ( methodToOverride [ NUM00 ] . name ( ) ) ; \n\t\t\tsClassDef . methods ( ) . add ( method ) ; \n\t\t\tparseAnnos ( fun . annos , method , imports , ElementType . METHOD , Arrays . asList ( ElementType . TYPE , ElementType . CONSTRUCTOR ) ) ; \n\t\t\tmethod . modifiers ( ) . add ( SModifier . PUBLIC ) ; \n\t\t\tparseParameters ( fun . params , fun . params . size ( ) , method , imports , _BOOL ) ; \n\t\t\tmethodToStatements . put ( method , fun . statements ) ; \n\t\t\tcheckOverrideAllMethods ( sClassDef ) ; \n\t\t\t} \n\t\t} \n\tfor ( STypeDef typeDef : typeDefSet ) { \n\t\tfor ( SAnno anno : typeDef . annos ( ) ) { \n\t\t\tif ( anno . type ( ) . fullName ( ) . equals ( NUM00 ) ) { \n\t\t\t\tfinal String msg = typeDef + NUM00 ; \n\t\t\t\tif ( typeDef instanceof SInterfaceDef ) { \n\t\t\t\t\tif ( ! getMethodForLambda ( typeDef , new SConstructorDef $F380 , new SMethodDef $F380 ) ) { \n\t\t\t\t\t\terr . SyntaxException ( msg , typeDef . line_col ( ) ) ; \n\t\t\t\t\t\t$F665 } \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\terr . SyntaxException ( msg , typeDef . line_col ( ) ) ; \n\t\t\t\t\t$F665 } \n\t\t\t\t} \n\t\t\telse if ( anno . type ( ) . fullName ( ) . equals ( NUM00 ) ) { \n\t\t\t\tfinal String msg = typeDef + NUM00 ; \n\t\t\t\tif ( typeDef instanceof SClassDef ) { \n\t\t\t\t\tif ( ! getMethodForLambda ( typeDef , new SConstructorDef $F380 , new SMethodDef $F380 ) ) { \n\t\t\t\t\t\terr . SyntaxException ( msg , typeDef . line_col ( ) ) ; \n\t\t\t\t\t\t$F665 } \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\terr . SyntaxException ( msg , typeDef . line_col ( ) ) ; \n\t\t\t\t\t$F665 } \n\t\t\t\t} \n\t\t\t} \n\t\tList < SMethodDef > methods ; \n\t\tif ( typeDef instanceof SClassDef ) methods = ( ( SClassDef ) typeDef ) . methods ( ) ; \n\t\telse methods = ( ( SInterfaceDef ) typeDef ) . methods ( ) ; \n\t\tfor ( SMethodDef method : methods ) { \n\t\t\tfor ( SAnno anno : method . annos ( ) ) { \n\t\t\t\tif ( anno . type ( ) . fullName ( ) . equals ( NUM00 ) ) { \n\t\t\t\t\tif ( method . overRide ( ) . isEmpty ( ) ) { \n\t\t\t\t\t\terr . SyntaxException ( method + NUM00 , method . line_col ( ) ) ; \n\t\t\t\t\t\t$F665 } \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tfor ( STypeDef typeDef : typeDefSet ) { \n\t\tif ( typeDef instanceof SClassDef ) { \n\t\t\tSClassDef cls = ( SClassDef ) typeDef ; \n\t\t\tif ( cls . isDataClass ( ) ) { \n\t\t\t\tfillMethodsIntoDataClass ( cls ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F27745 ( mUpdateListeners ) "}, {"code": "public Vector2 floor $F72 { \n\tx = ( float ) Math . floor ( x ) ; \n\tz = ( float ) Math . floor ( z ) ; \n\treturn this ; \n\t} \n"}, {"code": "public static Location createLocation ( final String rawJSON ) throws TwitterException $F27258 ( json , rawJSON , locationConstructor , e ) "}, {"code": "$F1 protected int calcAttackValue $F72 { \n\tint av = NUM00 ; \n\tif ( bDirect ) { \n\t\tav = Math . min ( av + ( toHit . getMoS ( ) / NUM00 ) , av * NUM00 ) ; \n\t\t} \n\tif ( bGlancing ) { \n\t\tav = $F71088 ( Math , av ) ; \n\t\t} \n\tav = ( int ) Math . floor ( getBracketingMultiplier ( ) * av ) ; \n\treturn av ; \n\t} \n"}, {"code": "public void test_writeImmutable $F72 { \n\t$F75329 ( store , getStore ) try { \n\t\tfinal int len = NUM00 ; \n\t\t$F4727 ( expected1 , len ) r . nextBytes ( expected1 ) ; \n\t\t$F17615 ( tmp , ByteBuffer , expected1 ) $F17617 ( addr1 , store , tmp ) $F59033 ( assertEquals , len , tmp ) $F37204 ( assertEquals , tmp ) $F37205 ( assertEquals , expected1 , store , addr1 ) final $F96 expected2 = expected1 . clone ( ) ; \n\t\tr . nextBytes ( expected1 ) ; \n\t\t$F37205 ( assertEquals , expected2 , store , addr1 ) } \n\t$F17625 ( store ) } \n"}, {"code": "$F1 public String queryToRetrieveData $F72 { \n\tString parameterizedQuery ; \n\tif $F3578 ( query ) { \n\t\tparameterizedQuery = query . replace ( NUM00 , startRow + NUM00 ) ; \n\t\t} \n\telse { \n\t\tparameterizedQuery = query ; \n\t\t} \n\treturn parameterizedQuery ; \n\t} \n"}, {"code": "public String toString $F72 { \n\tString classname = Util . getUnqualifiedName ( getClass ( ) ) ; \n\treturn ( ref == null ) ? classname : classname + NUM00 + ref . remoteToString ( ) + NUM00 ; \n\t} \n"}, {"code": "private static void initialise $F72 { \n\tHints hints = new Hints ( Hints . CRS , DefaultGeographicCRS . WGS84 ) ; \n\tPositionFactory positionFactory = GeometryFactoryFinder . getPositionFactory ( hints ) ; \n\tGeometryFactory geometryFactory = GeometryFactoryFinder . getGeometryFactory ( hints ) ; \n\tPrimitiveFactory primitiveFactory = GeometryFactoryFinder . getPrimitiveFactory ( hints ) ; \n\tAggregateFactory aggregateFactory = GeometryFactoryFinder . getAggregateFactory ( hints ) ; \n\twktParser = new WKTParser ( geometryFactory , primitiveFactory , positionFactory , aggregateFactory ) ; \n\twktTypeList . add ( new WKTType ( WKT_POINT , _BOOL , NUM00 , NUM00 , _BOOL ) ) ; \n\twktTypeList . add ( new WKTType ( WKT_MULTIPOINT , _BOOL , NUM00 , NUM00 , _BOOL ) ) ; \n\twktTypeList . add ( new WKTType ( WKT_LINE <missing ';'> NUM00 , $F190911 NUM00 , NUM00 , _BOOL ) ) ; \n\twktTypeList . add ( new WKTType ( NUM00 , _BOOL , NUM00 , NUM00 , _BOOL ) ) ; \n\twktTypeList . add ( new WKTType ( WKT_MULTILINE <missing ';'> NUM00 , $F190911 NUM00 , NUM00 , _BOOL ) ) ; \n\twktTypeList . add ( new WKTType ( WKT_POLYGON , _BOOL , - NUM00 , NUM00 , _BOOL ) ) ; \n\twktTypeList . add ( new WKTType ( WKT_MULTIPOLYGON , _BOOL , - NUM00 , NUM00 , _BOOL , _BOOL ) ) ; \n\tfor ( WKTType wkyType : wktTypeList ) $F64959 ( wktTypeMap , wkyType ) } \n"}, {"code": "public Instances pruneToK ( Instances neighbours , $F1986 distances , int k ) { \n\tif ( neighbours == null || distances == null || neighbours . numInstances ( ) == NUM00 ) $F1337 $F17370 ( k ) int currentK = NUM00 ; \n\tdouble currentDist ; \n\tfor ( $F208679 ( i , neighbours ) ) { \n\t\tcurrentK ++ ; \n\t\tcurrentDist = distances [ i ] ; \n\t\tif ( currentK > k && currentDist != distances [ i - NUM00 ] ) { \n\t\t\tcurrentK -- ; \n\t\t\tneighbours = new Instances ( neighbours , NUM00 , currentK ) ; \n\t\t\t$F597 } \n\t\t} \n\treturn neighbours ; \n\t} \n"}, {"code": "$F1 protected String doInBackground ( String ... f_url ) { \n\tint count ; \n\tInputStream input = null ; \n\tOutputStream output = null ; \n\ttry { \n\t\tURL url = new URL ( f_url [ NUM00 ] ) ; \n\t\t$F5858 ( connection , url ) $F2410 ( connection ) $F7983 ( lengthOfFile , connection ) input = new BufferedInputStream ( url . openStream ( ) , NUM00 ) ; \n\t\toutput = new FileOutputStream ( f_url [ NUM00 ] ) ; \n\t\tbyte $F19196 = $F10314 ; \n\t\tlong total = NUM00 ; \n\t\twhile $F18067 ( count , input , data ) { \n\t\t\ttotal += count ; \n\t\t\tpublishProgress ( Integer . toString ( ( int ) ( ( total * NUM00 ) / lengthOfFile ) ) ) ; \n\t\t\t$F11584 ( output , data , count ) } \n\t\t$F1206 ( output ) } \n\tcatch ( Exception e ) { \n\t\tLog . e ( $F10629 ( e ) ) ; \n\t\t} \n\tfinally { \n\t\ttry $F1823 ( output ) catch ( Exception e ) { \n\t\t\tLog . e ( $F10629 ( e ) ) ; \n\t\t\t} \n\t\ttry $F1823 ( input ) catch ( Exception e ) { \n\t\t\tLog . e ( $F10629 ( e ) ) ; \n\t\t\t} \n\t\t} \n\t$F1274 } \n"}, {"code": "public void error ( String msg ) { \n\tprint ( NUM00 + msg , out . err ) ; \n\t} \n"}, {"code": "public static void loadArmV7aLibrary ( ApplicationLike applicationLike , String libName ) { \n\tif ( $F20402 ( libName , applicationLike ) ) { \n\t\tthrow new TinkerRuntimeException $F580 ; \n\t\t} \n\tif ( TinkerApplicationHelper . isTinkerEnableForNativeLib ( applicationLike ) ) { \n\t\tif ( TinkerApplicationHelper . loadLibraryFromTinker ( applicationLike , NUM00 , libName ) ) $F932 } \n\tSystem . loadLibrary ( libName ) ; \n\t} \n"}, {"code": "AtomicSequence ( final long initialValue ) { \n\tUPDATER . lazySet ( this , initialValue ) ; \n\t} \n"}, {"code": "public void keyReleased ( KeyEvent e ) { \n\tif ( e . isShiftDown ( ) && e . getKeyCode ( ) == NEXT_THROTTLE_KEY ) $F5795 ( requestFocusForNextFrame ) else if ( e . isShiftDown ( ) && e . getKeyCode ( ) == PREV_THROTTLE_KEY ) $F5795 ( requestFocusForPreviousFrame ) } \n"}, {"code": "protected static Long convertStringToBuckectingLong ( String stringToBeConverted ) { \n\tif $F3581 ( stringToBeConverted ) $F1337 $F39526 ( byteString , stringToBeConverted ) if $F8830 ( byteString ) { \n\t\t$F12496 ( newByteString ) for ( $F1139 ( i , newByteString ) ) { \n\t\t\tif ( i < byteString . length ) $F15086 ( newByteString , i , byteString ) else $F5629 ( newByteString , i ) } \n\t\tbyteString = newByteString ; \n\t\t} \n\t$F23500 ( bb , ByteBuffer , byteString ) $F219374 ( byteMethod , bb ) $F15467 ( byteMethod , Math ) return byteMethod ; \n\t} \n"}, {"code": "$F1 public void closeInvoked $F72 $F845 "}, {"code": "private void pendingEvent ( EventReg reg , ServiceID sid , Item item , int transition , boolean copyItem ) { \n\tif ( item != null && copyItem ) item = copyItem ( item ) ; \n\tnewNotifies . add ( new EventTask ( reg , sid , item , transition ) ) ; \n\t} \n"}, {"code": "public static void writeln $F13180 ( fileName , objects ) { \n\tif ( writer == null ) { \n\t\tcreateWriter ( fileName ) ; \n\t\tfor ( Object obj : objects ) $F94311 ( writeln , obj ) closeWriter ( ) ; \n\t\t} \n\t} \n"}, {"code": "protected double regressionPrediction ( Instance transformedInstance , $F8748 selectedAttributes , $F1986 coefficients ) throws Exception { \n\tdouble result = NUM00 ; \n\tint column = NUM00 ; \n\tfor ( $F180066 ( j , transformedInstance ) ) { \n\t\tif ( ( m_ClassIndex != j ) && ( selectedAttributes [ j ] ) ) { \n\t\t\tresult += coefficients [ column ] * transformedInstance . value ( j ) ; \n\t\t\tcolumn ++ ; \n\t\t\t} \n\t\t} \n\tresult += coefficients [ column ] ; \n\treturn result ; \n\t} \n"}, {"code": "public QLFDocument ( List $F355799 list , String docno , $F2540 ( extraProps ) ) { \n\tfeatureList = new MemoryLocalFeatureList $F355799 ( list ) ; \n\t$F54171 ( iterator , list ) if ( extraProps != null ) props . putAll ( extraProps ) ; \n\t$F545 ( props , docno ) } \n"}, {"code": "$F1 protected TemplateModel invokeGenericGet ( Map keyMap , Class clazz , String key ) throws TemplateModelException { \n\tMap map = ( Map ) object ; \n\t$F16628 ( val , map , key ) if ( val == null ) { \n\t\tif $F1277 ( key ) { \n\t\t\tCharacter charKey = Character . valueOf ( key . charAt ( NUM00 ) ) ; \n\t\t\tval = map . get ( charKey ) ; \n\t\t\tif ( val == null && ! ( map . containsKey ( key ) || map . containsKey ( charKey ) ) ) { \n\t\t\t\treturn UNKNOWN ; \n\t\t\t\t} \n\t\t\t} \n\t\telse if $F15257 ( map , key ) { \n\t\t\treturn UNKNOWN ; \n\t\t\t} \n\t\t} \n\treturn wrap ( val ) ; \n\t} \n"}, {"code": "public $F96 toZOrderByteArray ( final BigInteger bigInt ) { \n\tfinal int numDimensions = datatypeConfig . getNumDimensions ( ) ; \n\t$F40695 ( bigIntAsByteArr , bigInt ) final int paddedArraySize = numDimensions * BASE_SIZE + NUM00 ; \n\t$F4727 ( bigIntAsByteArrPad , paddedArraySize ) int idx = NUM00 ; \n\tfor ( int i = NUM00 ; \n\ti < paddedArraySize - bigIntAsByteArr . length ; \n\ti ++ ) { \n\t\tbigIntAsByteArrPad [ idx ++ ] = NUM00 ; \n\t\t} \n\tfor ( $F1139 ( i , bigIntAsByteArr ) ) $F49219 ( bigIntAsByteArrPad , idx , bigIntAsByteArr , i ) $F172325 ( bigIntAsByteArrUnsigned , unpadLeadingZero , bigIntAsByteArrPad ) return bigIntAsByteArrUnsigned ; \n\t} \n"}, {"code": "public void clearLogcat ( $F1113 IDevice device , $F1113 Project project ) { \n\tsynchronized ( myLock ) { \n\t\tExecutorService executor = myExecutors . get ( device ) ; \n\t\tif ( executor != null ) { \n\t\t\tstopReceiving ( device ) ; \n\t\t\texecutor . submit ( null ) ; \n\t\t\tstartReceiving ( device ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void expand ( int level ) { \n\t$F17427 output = new $F17427 $F72 ; \n\tlong levelLsb = S2CellId . lowestOnBitForLevel ( level ) ; \n\t$F13124 ( i , size ) do { \n\t\tS2CellId id = cellId ( i ) ; \n\t\tif ( id . lowestOnBit ( ) < levelLsb ) { \n\t\t\tid = id . parent ( level ) ; \n\t\t\twhile ( i > NUM00 && id . contains ( cellId ( i - NUM00 ) ) ) { \n\t\t\t\t-- i ; \n\t\t\t\t} \n\t\t\t} \n\t\toutput . add ( id ) ; \n\t\tid . getAllNeighbors ( level , output ) ; \n\t\t} \n\twhile ( -- i >= NUM00 ) ; \n\tinitSwap ( output ) ; \n\t} \n"}, {"code": "private StringSet discoverVolumeSnaps ( StorageSystem system , List < Snap > snaps , String parentGUID , StringSet parentMatchedVPools , VNXeApiClient apiClient , DbClient dbClient , Map < String , List $F172366 > hostVolumesMap , VNXeLun lun , boolean isSnapInCG , String cgName ) throws Exception { \n\t$F69100 ( snapsets ) for ( Snap snapDetail : snaps ) { \n\t\tUnManagedVolume unManagedVolume = null ; \n\t\tString managedSnapNativeGuid = NativeGUIDGenerator . generateNativeGuidForVolumeOrBlockSnapShot ( system . getNativeGuid ( ) , snapDetail . getId ( ) ) ; \n\t\tBlockSnapshot viprSnap = DiscoveryUtils . checkBlockSnapshotExistsInDB ( dbClient , managedSnapNativeGuid ) ; \n\t\tif ( null != viprSnap ) { \n\t\t\t$F10635 ( log , managedSnapNativeGuid ) snapsets . add ( managedSnapNativeGuid ) ; \n\t\t\t$F598 } \n\t\tString unManagedVolumeNatvieGuid = NativeGUIDGenerator . generateNativeGuidForPreExistingVolume ( system . getNativeGuid ( ) , snapDetail . getId ( ) ) ; \n\t\tunManagedVolume = DiscoveryUtils . checkUnManagedVolumeExistsInDB ( dbClient , unManagedVolumeNatvieGuid ) ; \n\t\tunManagedVolume = createUnManagedVolumeForSnap ( unManagedVolume , unManagedVolumeNatvieGuid , lun , system , dbClient , hostVolumesMap , snapDetail ) ; \n\t\tpopulateSnapInfo ( unManagedVolume , snapDetail , parentGUID , parentMatchedVPools ) ; \n\t\tsnapsets . add ( unManagedVolumeNatvieGuid ) ; \n\t\t$F42096 ( unManagedVolumesReturnedFromProvider , unManagedVolume ) if ( isSnapInCG ) { \n\t\t\taddObjectToUnManagedConsistencyGroup ( apiClient , unManagedVolume , cgName , system , dbClient ) ; \n\t\t\t} \n\t\t} \n\treturn snapsets ; \n\t} \n"}, {"code": "public void receive ( final CallEvent event ) { \n\tif $F45040 ( event ) { \n\t\tif $F2200 ( mEvents , event ) { \n\t\t\t$F6965 ( mEvents , event ) fireTableRowsInserted ( NUM00 , NUM00 ) ; \n\t\t\tprune ( ) ; \n\t\t\t} \n\t\telse { \n\t\t\t$F12747 ( row , mEvents , event ) fireTableRowsUpdated ( row , row ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tif $F105 ( mEvents , event ) { \n\t\t\t$F12747 ( row , mEvents , event ) mEvents . remove ( event ) ; \n\t\t\tfireTableRowsDeleted ( row , row ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public Pet findOne ( String id ) { \n\t$F7028 ( log , id ) Pet pet = petRepository . findOne ( UUID . fromString ( id ) ) ; \n\treturn pet ; \n\t} \n"}, {"code": "public final $F40512 ( mActiveIssues ) "}, {"code": "public static void awaitDataReady $F72 { \n\tsynchronized ( mDbHelperLock ) { \n\t\tif ( mDbHelper == null ) { \n\t\t\ttry $F28646 ( mDbHelperLock ) $F3101 ( e ) } \n\t\t} \n\t} \n"}, {"code": "protected AbstractIoSession ( IoService service ) { \n\tthis . service = service ; \n\tthis . handler = service . getHandler ( ) ; \n\t$F657 ( currentTime , System ) creationTime = currentTime ; \n\tlastThroughputCalculationTime = currentTime ; \n\tlastReadTime = currentTime ; \n\tlastWriteTime = currentTime ; \n\tlastIdleTimeForBoth = currentTime ; \n\tlastIdleTimeForRead = currentTime ; \n\tlastIdleTimeForWrite = currentTime ; \n\tcloseFuture . addListener ( SCHEDULED_COUNTER_RESETTER ) ; \n\tsessionId = idGenerator . incrementAndGet ( ) ; \n\t} \n"}, {"code": "private String processFloatToken ( String token ) { \n\tString result = token . replaceAll ( groupSeparator , NUM00 ) ; \n\tif $F1264 ( decimalSeparator ) $F107746 ( result , decimalSeparator ) boolean isNegative = _BOOL ; \n\t$F1749 ( preLen , negativePrefix ) if ( ( preLen > NUM00 ) && result . startsWith ( negativePrefix ) ) { \n\t\tisNegative = _BOOL ; \n\t\t$F11978 ( result , preLen ) } \n\t$F1749 ( sufLen , negativeSuffix ) if ( ( sufLen > NUM00 ) && result . endsWith ( negativeSuffix ) ) { \n\t\tisNegative = _BOOL ; \n\t\tresult = result . substring ( result . length ( ) - sufLen , result . length ( ) ) ; \n\t\t} \n\tif $F1238 ( result , nanString ) result = NUM00 ; \n\tif $F1238 ( result , infinityString ) result = NUM00 ; \n\tif ( isNegative ) result = NUM00 + result ; \n\t$F1150 ( m , NON_ASCII_DIGIT , result ) if $F281 ( m ) { \n\t\t$F83 ( inASCII ) for ( $F1088 ( i , result ) ) { \n\t\t\t$F1280 ( nextChar , result , i ) if $F119844 ( Character , nextChar ) { \n\t\t\t\tint d = Character . digit ( nextChar , NUM00 ) ; \n\t\t\t\tif ( d != - NUM00 ) inASCII . append ( d ) ; \n\t\t\t\telse inASCII . append ( nextChar ) ; \n\t\t\t\t} \n\t\t\telse $F288 ( inASCII , nextChar ) } \n\t\t$F6947 ( result , inASCII ) } \n\treturn result ; \n\t} \n"}, {"code": "InternalWindow ( String title ) { \n\t$F9898 ( setLayout ) titleBar = new TitleBar $F72 ; \n\tadd ( titleBar , BorderLayout . NORTH ) ; \n\ttitleBar . setLayout ( new SBoxLayout ( SBoxLayout . HORIZONTAL , TITLEBAR_PADDING ) ) ; \n\t$F171121 ( titleLabel ) setTitle ( title ) ; \n\t$F167982 ( titleLabel ) titleBar . add ( titleLabel ) ; \n\tSBoxLayout . addSpring ( titleBar ) ; \n\t$F498117 ( minimizeButton , minimizeIcon ) minimizeButton . setMargin ( $F32450 ) ; \n\tminimizeButton . setBorder ( BorderFactory . createEmptyBorder ( ) ) ; \n\tminimizeButton . setFocusable ( _BOOL ) ; \n\tminimizeButton . addActionListener ( new MinimizeListener $F72 ) ; \n\ttitleBar . add ( minimizeButton ) ; \n\t$F498117 ( closeButton , closeIcon ) closeButton . setMargin ( $F32450 ) ; \n\tcloseButton . setBorder ( BorderFactory . createEmptyBorder ( ) ) ; \n\tcloseButton . setFocusable ( _BOOL ) ; \n\tcloseButton . addActionListener ( new CloseActionListener $F72 ) ; \n\ttitleBar . add ( closeButton ) ; \n\tcache = new ComponentPaintCache ( this ) ; \n\t} \n"}, {"code": "$F1431 public static $F529 loadStream ( InputStream inputStream ) { \n\t$F22806 ( LOG ) Yaml yaml = new Yaml $F72 ; \n\t$F276224 propsYaml = ( $F276224 ) yaml . load ( inputStream ) ; \n\t$F22806 ( LOG ) $F20530 ( typedMap ) for ( $F85 ( key , propsYaml ) ) { \n\t\ttypedMap . put ( key . toString ( ) , propsYaml . get ( key ) ) ; \n\t\t} \n\treturn typedMap ; \n\t} \n"}, {"code": "$F806 split ( final String stringToSplit ) { \n\tif $F16093 ( StringUtils , stringToSplit ) { \n\t\t$F1749 ( strLenght , stringToSplit ) int splitNum = strLenght / chunkSize ; \n\t\tif ( strLenght % chunkSize > NUM00 ) { \n\t\t\tsplitNum += NUM00 ; \n\t\t\t} \n\t\t$F12914 ( result , splitNum ) for ( $F119 ( i , splitNum ) ) { \n\t\t\tint startPos = i * chunkSize ; \n\t\t\tint endPos = startPos + chunkSize ; \n\t\t\t$F8789 ( endPos , strLenght ) result [ i ] = stringToSplit . substring ( startPos , endPos ) ; \n\t\t\t} \n\t\treturn result ; \n\t\t} \n\t$F1274 } \n"}, {"code": "public void logVelocityMessage ( int level , String message ) { \n\tsynchronized ( this ) { \n\t\t$F3300 ( data ) data [ NUM00 ] = new Integer ( level ) ; \n\t\tdata [ NUM00 ] = message ; \n\t\tpendingMessages . addElement ( data ) ; \n\t\t} \n\t} \n"}, {"code": "public void testShiftRightNegNonZeroes $F72 { \n\t$F156136 int aSign = - NUM00 ; \n\tint number = NUM00 ; \n\tbyte $F3018 = { \n\t\t- NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 } \n\t; \n\t$F3023 ( aNumber , aSign , aBytes ) $F86501 ( result , aNumber , number ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , result ) } \n"}, {"code": "public void removeAllAddresses $F72 $F9096 ( addresses ) "}, {"code": "public static boolean isShowTooltips $F72 { \n\treturn showTooltips ; \n\t} \n"}, {"code": "$F32797 ( sourcePosition , referencePosition , srcAndRefPositions , referenceCount , a , System ) "}, {"code": "$F9159 ( logDebug , mSetupDone , _BOOL , mServiceConn , mContext , mDisposed , mService , mPurchaseListener ) "}, {"code": "public static $F9737 toBinaryString ( int i ) $F4915 ( intToBinaryString , i ) "}, {"code": "public static boolean isPropertyField ( String fieldName ) { \n\treturn ! ID_FIELD_NAME . equals ( fieldName ) && ! URI_FIELD_NAME . equals ( fieldName ) && ! TEXT_FIELD_NAME . equals ( fieldName ) && ! CONTEXT_FIELD_NAME . equals ( fieldName ) && $F4434 ( fieldName ) ; \n\t} \n"}, {"code": "public static void checkAccess ( int modifiers ) { \n\tif ( System . getSecurityManager ( ) != null && ! Modifier . isPublic ( modifiers ) ) $F182689 } \n"}, {"code": "protected void printIndent ( StringBuilder ddl ) $F39640 ( ddl , getIndent ) "}, {"code": "public NType merge ( NType a , NType b ) throws MergeFailed { \n\tif ( a != null && b == null ) return a ; \n\tif ( a == null && b != null ) return b ; \n\tif ( a == null && b == null ) $F1274 if $F1238 ( a , b ) return a ; \n\ttry { \n\t\treturn Dispatcher . dispatch ( getClass ( ) , this , NUM00 , a , b ) ; \n\t\t} \n\tcatch ( NoSuchMethodException e ) { \n\t\tthrow new MergeFailed ( NUM00 , a , b ) ; \n\t\t} \n\t} \n"}, {"code": "public static String format ( String s , String col ) { \n\tString s1 = ( s + padd ) ; \n\treturn s1 . substring ( NUM00 , Math . min ( col . length ( ) , s1 . length ( ) ) ) ; \n\t} \n"}, {"code": "protected static void loadEnd ( MLookupInfo info , HashMap lookup ) { \n\tif ( info . IsValidated && $F3816 ( lookup ) ) s_loadedLookups . put ( getKey ( info ) , lookup ) ; \n\t} \n"}, {"code": "public static void info ( final String message ) $F17670 ( infoLogger , message ) "}, {"code": "private void rotateRight $F17573 ( root ) { \n\t$F17575 ( pivot , root ) $F17577 ( right , root ) $F17575 ( pivotLeft , pivot ) $F17579 ( pivotRight , pivot ) root . left = pivotRight ; \n\t$F17581 ( pivotRight , root ) replaceInParent ( root , pivot ) ; \n\tpivot . right = root ; \n\troot . parent = pivot ; \n\t$F17587 ( root , Math , right , pivotRight ) $F17592 ( pivot , Math , root , pivotLeft ) } \n"}, {"code": "private void checkNoCharactersMissing ( int totalLength , $F40119 tokens ) { \n\tif ( $F1030 ( tokens ) && $F7661 ( tokens ) . right != totalLength ) { \n\t\tString error = String . format ( NUM00 , $F7661 ( tokens ) . right , totalLength ) ; \n\t\t$F5301 ( error ) } \n\tint start = NUM00 ; \n\tfor ( $F2277 ( i , tokens ) ) { \n\t\tToken token = tokens . get ( i ) ; \n\t\tif ( token . left != start ) $F1666 ( start ) start = token . right ; \n\t\t} \n\t} \n"}, {"code": "public boolean validateServiceAttributes ( String token , String validatorClass , Set values ) throws SMSException , SSOException , RemoteException { \n\tinitialize ( ) ; \n\t$F21954 ( debug , validatorClass , values ) try { \n\t\t$F63290 ( clazz , Class , validatorClass ) ServiceAttributeValidator v = ( ServiceAttributeValidator ) clazz . newInstance ( ) ; \n\t\treturn v . validate ( values ) ; \n\t\t} \n\tcatch ( InstantiationException ex ) { \n\t\tthrow new SMSException $F580 ; \n\t\t} \n\tcatch ( IllegalAccessException ex ) { \n\t\tthrow new SMSException $F580 ; \n\t\t} \n\tcatch ( ClassNotFoundException ex ) { \n\t\tthrow new SMSException $F580 ; \n\t\t} \n\t} \n"}, {"code": "public synchronized void animatePanTo ( Point2D p , long duration ) { \n\t$F24099 ( pp ) m_itransform . transform ( p , pp ) ; \n\tanimatePanToAbs ( pp , duration ) ; \n\t} \n"}, {"code": "public static void assertEqualsWithRelativeErrorOrBothNaN $F21013 ( message , expected , actual ) { \n\t$F19899 ( expected , actual ) if ( Double . isNaN ( expected ) && ! Double . isNaN ( actual ) ) { \n\t\tthrow new AssertionFailedError ( message + NUM00 + expected + NUM00 + actual + NUM00 ) ; \n\t\t} \n\tif ( ! Double . isNaN ( expected ) && Double . isNaN ( actual ) ) { \n\t\tthrow new AssertionFailedError ( message + NUM00 + expected + NUM00 + actual + NUM00 ) ; \n\t\t} \n\tdouble relativeError ; \n\tif $F45017 ( Math , actual , expected ) { \n\t\trelativeError = Math . abs ( ( expected - actual ) / actual ) ; \n\t\t} \n\telse { \n\t\trelativeError = Math . abs ( ( expected - actual ) / expected ) ; \n\t\t} \n\tif ( relativeError > MAX_RELATIVE_ERROR ) { \n\t\tthrow new AssertionFailedError ( message + NUM00 + expected + NUM00 + actual + NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "protected void assertException ( final AbstractExceptionCase exceptionCase ) throws Throwable $F11707 ( assertException , exceptionCase ) "}, {"code": "$F1 public ServiceHost start $F72 throws Throwable { \n\t$F2346 ( super ) startDefaultCoreServicesSynchronously ( ) ; \n\tsuper . startService ( new RootNamespaceService $F72 ) ; \n\tsuper . startService ( new SampleServiceWithSharedCustomUi $F72 ) ; \n\tsuper . startService ( new SampleFactoryServiceWithCustomUi $F72 ) ; \n\tsuper . startFactory ( new SampleSimpleEchoService $F72 ) ; \n\tsuper . startFactory ( new SamplePreviousEchoService $F72 ) ; \n\tsuper . startFactory ( new ExampleService $F72 ) ; \n\tsuper . startFactory ( new ExampleTaskService $F72 ) ; \n\tsuper . startService ( new UiService $F72 ) ; \n\tstartSwaggerDescriptorService ( ) ; \n\treturn this ; \n\t} \n"}, {"code": "$F1 public void endOfStream $F72 throws AdeException { \n\tfor ( MsgData data : m_msgData . values ( ) ) { \n\t\tif ( data . m_totalLogCounts > NUM00 ) { \n\t\t\tdata . m_lambda = data . m_totalLogCounts / data . m_intervalCount ; \n\t\t\tm_minLambda = Math . min ( data . m_lambda , m_minLambda ) ; \n\t\t\tif ( locateMismatchingDistributions ( data ) ) { \n\t\t\t\tdata . m_badFit = _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tm_trained = _BOOL ; \n\t} \n"}, {"code": "static BinaryTree $F2305 buildComplete ( int n ) { \n\tBinaryTree $F2305 bt = new BinaryTree $F2305 $F72 ; \n\tint b = ( int ) $F89003 ( Math , n ) ; \n\tfor ( $F119 ( i , n ) ) { \n\t\tbt . insert ( b ) ; \n\t\tfor ( int j = NUM00 ; \n\t\tj <= Math . pow ( NUM00 , i ) - NUM00 ; \n\t\tj ++ ) { \n\t\t\tbt . insert ( b + NUM00 * b * j ) ; \n\t\t\t} \n\t\tb = b / NUM00 ; \n\t\t} \n\treturn bt ; \n\t} \n"}, {"code": "public void erase $F72 { \n\t$F5475 ( bytes ) for ( ByteBuffer buffer : buffers ) { \n\t\tif ( bytes == null || bytes . length < buffer . limit ( ) ) bytes = new byte $F386298 ( buffer ) ; \n\t\t$F16709 ( buffer ) buffer . put ( bytes , NUM00 , buffer . limit ( ) ) ; \n\t\t$F16709 ( buffer ) } \n\t} \n"}, {"code": "$F1 boolean resurrectSelection $F72 { \n\t$F3666 ( childCount , getChildCount ) $F18806 ( childCount , _BOOL ) int selectedTop = NUM00 ; \n\tint selectedPos ; \n\tint childrenTop = mListPadding . top ; \n\tint childrenBottom = getBottom ( ) - getTop ( ) - mListPadding . bottom ; \n\tfinal int firstPosition = mFirstPosition ; \n\tfinal int toPosition = mResurrectToPosition ; \n\tboolean down = _BOOL ; \n\tif ( toPosition >= firstPosition && toPosition < firstPosition + childCount ) { \n\t\tselectedPos = toPosition ; \n\t\tfinal View selected = getChildAt ( selectedPos - mFirstPosition ) ; \n\t\tselectedTop = selected . getTop ( ) ; \n\t\tint selectedBottom = selected . getBottom ( ) ; \n\t\tif ( selectedTop < childrenTop ) { \n\t\t\tselectedTop = childrenTop + getVerticalFadingEdgeLength ( ) ; \n\t\t\t} \n\t\telse if ( selectedBottom > childrenBottom ) { \n\t\t\tselectedTop = childrenBottom - selected . getMeasuredHeight ( ) - getVerticalFadingEdgeLength ( ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tif ( toPosition < firstPosition ) { \n\t\t\tselectedPos = firstPosition ; \n\t\t\tfor ( $F119 ( i , childCount ) ) { \n\t\t\t\tfinal View v = getChildAt ( i ) ; \n\t\t\t\tfinal int top = v . getTop ( ) ; \n\t\t\t\tif ( i == NUM00 ) { \n\t\t\t\t\tselectedTop = top ; \n\t\t\t\t\tif ( firstPosition > NUM00 || top < childrenTop ) { \n\t\t\t\t\t\tchildrenTop += getVerticalFadingEdgeLength ( ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\tif ( top >= childrenTop ) { \n\t\t\t\t\tselectedPos = firstPosition + i ; \n\t\t\t\t\tselectedTop = top ; \n\t\t\t\t\t$F597 } \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tfinal int itemCount = mItemCount ; \n\t\t\tdown = _BOOL ; \n\t\t\tselectedPos = firstPosition + childCount - NUM00 ; \n\t\t\tfor ( $F18298 ( i , childCount ) ) { \n\t\t\t\tfinal View v = getChildAt ( i ) ; \n\t\t\t\tfinal int top = v . getTop ( ) ; \n\t\t\t\tfinal int bottom = v . getBottom ( ) ; \n\t\t\t\tif ( i == childCount - NUM00 ) { \n\t\t\t\t\tselectedTop = top ; \n\t\t\t\t\tif ( firstPosition + childCount < itemCount || bottom > childrenBottom ) { \n\t\t\t\t\t\tchildrenBottom -= getVerticalFadingEdgeLength ( ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\tif ( bottom <= childrenBottom ) { \n\t\t\t\t\tselectedPos = firstPosition + i ; \n\t\t\t\t\tselectedTop = top ; \n\t\t\t\t\t$F597 } \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tmResurrectToPosition = INVALID_POSITION ; \n\tremoveCallbacks ( mFlingRunnable ) ; \n\tmTouchMode = TOUCH_MODE_REST ; \n\tclearScrollingCache ( ) ; \n\tmSpecificTop = selectedTop ; \n\tselectedPos = lookForSelectablePosition ( selectedPos , down ) ; \n\tif ( selectedPos >= firstPosition && selectedPos <= getLastVisiblePosition ( ) ) { \n\t\tmLayoutMode = LAYOUT_SPECIFIC ; \n\t\tsetSelectionInt ( selectedPos ) ; \n\t\tinvokeOnItemScrollListener ( ) ; \n\t\t} \n\telse { \n\t\tselectedPos = INVALID_POSITION ; \n\t\t} \n\treportScrollStateChange ( OnScrollListener . SCROLL_STATE_IDLE ) ; \n\treturn selectedPos >= NUM00 ; \n\t} \n"}, {"code": "public void logPurchase ( BigDecimal purchaseAmount , Currency currency , Bundle parameters ) { \n\tif ( purchaseAmount == null ) $F3602 ( notifyDeveloperError ) else $F25700 ( currency , notifyDeveloperError ) if ( parameters == null ) { \n\t\t$F53031 ( parameters ) ; \n\t\t} \n\tparameters . putString ( AppEventsConstants . EVENT_PARAM_CURRENCY , currency . getCurrencyCode ( ) ) ; \n\tlogEvent ( AppEventsConstants . EVENT_NAME_PURCHASED , purchaseAmount . doubleValue ( ) , parameters ) ; \n\teagerFlush ( ) ; \n\t} \n"}, {"code": "public static String padBetween $F16339 ( first , length , last ) { \n\tfinal int padlen = length - ( $F71221 ( first , last ) ) ; \n\treturn first + ( padlen > NUM00 ? getSpaceString ( padlen ) : NUM00 ) + last ; \n\t} \n"}, {"code": "public void applyFromResolveInfo ( PackageManager pm , ResolveInfo info , WidgetPreviewLoader loader ) { \n\tmInfo = info ; \n\tCharSequence label = info . loadLabel ( pm ) ; \n\tmWidgetName . setText ( label ) ; \n\tmWidgetDims . setText ( String . format ( mDimensionsFormatString , NUM00 , NUM00 ) ) ; \n\tmWidgetPreviewLoader = loader ; \n\t} \n"}, {"code": "private QueueConnectionImpl createNewPrimary ( Set excludedServers ) { \n\tQueueConnectionImpl primary = null ; \n\twhile ( primary == null && pool . getPoolOrCacheCancelInProgress ( ) == null ) { \n\t\tList servers = findQueueServers ( excludedServers , NUM00 , _BOOL , printPrimaryNotFoundError , LocalizedStrings . QueueManagerImpl_COULD_NOT_FIND_SERVER_TO_CREATE_PRIMARY_CLIENT_QUEUE ) ; \n\t\tprintPrimaryNotFoundError = _BOOL ; \n\t\tif $F4251 ( servers ) $F5153 Connection connection = null ; \n\t\ttry { \n\t\t\tconnection = factory . createClientToServerConnection ( ( ServerLocation ) servers . get ( NUM00 ) , _BOOL ) ; \n\t\t\t} \n\t\tcatch ( GemFireSecurityException e ) { \n\t\t\tthrow e ; \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\tif $F585 ( logger ) { \n\t\t\t\tlogger . debug ( NUM00 , servers . get ( NUM00 ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( connection != null ) { \n\t\t\tprimary = initializeQueueConnection ( connection , _BOOL , queueConnections . getFailedUpdater ( ) ) ; \n\t\t\t} \n\t\texcludedServers . addAll ( servers ) ; \n\t\t} \n\tif ( primary != null && sentClientReady && primary . sendClientReady ( ) ) { \n\t\treadyForEventsAfterFailover ( primary ) ; \n\t\t} \n\treturn primary ; \n\t} \n"}, {"code": "public static int readInt $F72 { \n\treturn scanner . nextInt ( ) ; \n\t} \n"}, {"code": "public CSVConfig guess $F72 { \n\ttry { \n\t\tBufferedReader bIn = new BufferedReader ( new InputStreamReader ( getInputStream ( ) , StandardCharsets . UTF_8 ) ) ; \n\t\t$F808 ( lines ) String line = null ; \n\t\tint counter = NUM00 ; \n\t\twhile ( ( line = bIn . readLine ( ) ) != null && counter <= NUM00 ) $F2319 ( lines , counter , line ) if ( counter < NUM00 ) { \n\t\t\t$F12914 ( newLines , counter ) $F135 ( System , lines , newLines , counter ) lines = newLines ; \n\t\t\t} \n\t\tanalyseLines ( lines ) ; \n\t\t} \n\t$F1516 ( e ) finally { \n\t\t$F111205 ( in ) } \n\tCSVConfig conf = config ; \n\tconfig = null ; \n\treturn conf ; \n\t} \n"}, {"code": "private void updateDesign ( DataSetDesign dataSetDesign , IConnection conn , String queryText ) throws OdaException { \n\tIQuery query = conn . newQuery ( null ) ; \n\tquery . prepare ( queryText ) ; \n\tquery . setProperty ( Query . PROP_SETUP_QUERY_TEXT , getSetupQueryText ( ) ) ; \n\ttry { \n\t\tIResultSetMetaData md = query . getMetaData ( ) ; \n\t\tupdateResultSetDesign ( md , dataSetDesign ) ; \n\t\t} \n\tcatch ( OdaException e ) { \n\t\tdataSetDesign . setResultSets ( null ) ; \n\t\t$F301 ( e ) } \n\ttry { \n\t\tIParameterMetaData paramMd = query . getParameterMetaData ( ) ; \n\t\tupdateParameterDesign ( paramMd , dataSetDesign ) ; \n\t\t} \n\tcatch ( OdaException ex ) { \n\t\tdataSetDesign . setParameters ( null ) ; \n\t\t$F301 ( ex ) } \n\t} \n"}, {"code": "$F1 public OutlierResult run ( Database db , $F42616 relation ) { \n\tDBIDs ids = relation . getDBIDs ( ) ; \n\tSimilarityQuery $F2193 sq = db . getSimilarityQuery ( relation , kernelFunction ) ; \n\tKernelMatrix kernelMatrix = new KernelMatrix ( sq , relation , ids ) ; \n\tWritableDoubleDataStore abodvalues = DataStoreUtil . makeDoubleStorage ( ids , DataStoreFactory . HINT_STATIC ) ; \n\tDoubleMinMax minmaxabod = new DoubleMinMax $F72 ; \n\tMeanVariance s = new MeanVariance $F72 ; \n\tKNNHeap nn = DBIDUtil . newHeap ( k ) ; \n\tfor ( $F60471 ( pA , ids ) ) { \n\t\tfinal double simAA = kernelMatrix . getSimilarity ( pA , pA ) ; \n\t\t$F725 ( nn ) for ( $F42632 ( nB , relation ) ) { \n\t\t\t$F95009 ( DBIDUtil , nB , pA ) double simBB = kernelMatrix . getSimilarity ( nB , nB ) ; \n\t\t\t$F243880 ( simAB , kernelMatrix , pA , nB ) double sqdAB = simAA + simBB - simAB - simAB ; \n\t\t\tif $F102905 ( sqdAB ) $F1448 nn . insert ( sqdAB , nB ) ; \n\t\t\t} \n\t\tKNNList nl = nn . toKNNList ( ) ; \n\t\t$F2268 ( s ) DoubleDBIDListIter iB = nl . iter ( ) , iC = nl . iter ( ) ; \n\t\tfor ( ; \n\t\tiB . valid ( ) ; \n\t\tiB . advance ( ) ) { \n\t\t\t$F50466 ( sqdAB , iB ) $F243880 ( simAB , kernelMatrix , pA , iB ) if $F102905 ( sqdAB ) $F1448 for ( iC . seek ( iB . getOffset ( ) + NUM00 ) ; \n\t\t\tiC . valid ( ) ; \n\t\t\tiC . advance ( ) ) { \n\t\t\t\t$F50466 ( sqdAC , iC ) $F243880 ( simAC , kernelMatrix , pA , iC ) if $F102905 ( sqdAC ) $F1448 $F243880 ( simBC , kernelMatrix , iB , iC ) double numerator = simBC - simAB - simAC + simAA ; \n\t\t\t\tdouble div = NUM00 / ( sqdAB * sqdAC ) ; \n\t\t\t\ts . put ( numerator * div , Math . sqrt ( div ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tfinal double abof = s . getNaiveVariance ( ) ; \n\t\tminmaxabod . put ( abof ) ; \n\t\tabodvalues . putDouble ( pA , abof ) ; \n\t\t} \n\tDoubleRelation scoreResult = new MaterializedDoubleRelation ( NUM00 , NUM00 , abodvalues , relation . getDBIDs ( ) ) ; \n\tOutlierScoreMeta scoreMeta = new InvertedOutlierScoreMeta ( minmaxabod . getMin ( ) , minmaxabod . getMax ( ) , NUM00 , Double . POSITIVE_INFINITY ) ; \n\treturn new OutlierResult ( scoreMeta , scoreResult ) ; \n\t} \n"}, {"code": "$F237470 ( doc , elementList , nameNode , child , badSubstring , load , _BOOL , success , ex , DOMException , assertTrue ) "}, {"code": "public static String toString ( JSONObject jo ) throws JSONException { \n\t$F280 ( sb ) $F189163 ( sb , escape , jo ) $F84 ( sb ) $F189163 ( sb , escape , jo ) if $F16934 ( jo ) { \n\t\t$F84 ( sb ) $F189165 ( sb , jo ) } \n\t$F189169 ( jo , sb , escape ) $F189169 ( jo , sb , escape ) if ( jo . optBoolean ( NUM00 ) ) $F86 ( sb ) $F92 ( sb ) } \n"}, {"code": "$F1 public boolean equals ( Object otherRule ) { \n\t$F3627 ( otherRule , this , _BOOL ) if ( otherRule instanceof ZoneOffsetTransitionRule ) { \n\t\tZoneOffsetTransitionRule other = ( ZoneOffsetTransitionRule ) otherRule ; \n\t\treturn month == other . month && dom == other . dom && dow == other . dow && timeDefinition == other . timeDefinition && $F12737 ( time , other ) && timeEndOfDay == other . timeEndOfDay && $F12737 ( standardOffset , other ) && $F12737 ( offsetBefore , other ) && $F12737 ( offsetAfter , other ) ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "private void initializeMembershipMatrix $F72 { \n\tfor ( $F2277 ( i , points ) ) { \n\t\tfor ( $F119 ( j , k ) ) { \n\t\t\tmembershipMatrix [ i ] [ j ] = random . nextDouble ( ) ; \n\t\t\t} \n\t\tmembershipMatrix [ i ] = MathArrays . normalizeArray ( membershipMatrix [ i ] , NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "public static void writeAll ( OutputStream stream , $F131 o ) throws Exception { \n\tObjectOutputStream oos ; \n\tint i ; \n\tif ( ! ( stream instanceof BufferedOutputStream ) ) { \n\t\tstream = new BufferedOutputStream ( stream ) ; \n\t\t} \n\t$F111162 ( oos , stream ) for ( $F6929 ( i , o ) ) { \n\t\t$F359966 ( oos , o , i ) } \n\t$F1206 ( oos ) $F59 ( oos ) } \n"}, {"code": "public synchronized void reset $F72 { \n\t$F16709 ( mBufVertices ) $F16709 ( mBufColors ) if ( DRAW_TEXTURE ) { \n\t\t$F16709 ( mBufTexCoords ) } \n\tfor ( $F809 ( i ) ) { \n\t\tVertex tmp = mArrTempVertices . get ( NUM00 ) ; \n\t\ttmp . set ( mRectangle [ i ] ) ; \n\t\tif ( mFlipTexture ) { \n\t\t\ttmp . mTexX *= mTextureRectBack . right ; \n\t\t\ttmp . mTexY *= mTextureRectBack . bottom ; \n\t\t\ttmp . mColor = mTexturePage . getColor ( CurlPage . SIDE_BACK ) ; \n\t\t\t} \n\t\telse { \n\t\t\ttmp . mTexX *= mTextureRectFront . right ; \n\t\t\ttmp . mTexY *= mTextureRectFront . bottom ; \n\t\t\ttmp . mColor = mTexturePage . getColor ( CurlPage . SIDE_FRONT ) ; \n\t\t\t} \n\t\taddVertex ( tmp ) ; \n\t\t} \n\tmVerticesCountFront = NUM00 ; \n\tmVerticesCountBack = NUM00 ; \n\t$F16709 ( mBufVertices ) $F16709 ( mBufColors ) if ( DRAW_TEXTURE ) { \n\t\t$F16709 ( mBufTexCoords ) } \n\tmDropShadowCount = mSelfShadowCount = NUM00 ; \n\t} \n"}, {"code": "public boolean deleteAttachmentPoint ( DatapathId sw , OFPort port ) { \n\tAttachmentPoint ap = new AttachmentPoint ( sw , port , $F6419 ) ; \n\tif ( this . oldAPs != null ) { \n\t\tArrayList < AttachmentPoint > apList = new ArrayList < AttachmentPoint > $F72 ; \n\t\tapList . addAll ( this . oldAPs ) ; \n\t\t$F12747 ( index , apList , ap ) if ( index > NUM00 ) { \n\t\t\tapList . remove ( index ) ; \n\t\t\tthis . oldAPs = apList ; \n\t\t\t} \n\t\t} \n\tif ( this . attachmentPoints != null ) { \n\t\tArrayList < AttachmentPoint > apList = new ArrayList < AttachmentPoint > $F72 ; \n\t\tapList . addAll ( this . attachmentPoints ) ; \n\t\t$F12747 ( index , apList , ap ) if ( index > NUM00 ) { \n\t\t\tapList . remove ( index ) ; \n\t\t\tthis . attachmentPoints = apList ; \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public B css ( $F157772 String classes ) $F13736 ( css , classes ) "}, {"code": "public static ArgumentException adaptPropertyException ( PropertyException e , AbstractManagedObjectDefinition $F5162 d ) { \n\treturn new ArgumentException ( e . getMessageObject ( ) ) ; \n\t} \n"}, {"code": "private Consumer < Operation > createNotificationTarget $F72 $F1337 "}, {"code": "public void write $F97 ( bytes ) throws IOException { \n\tdataOutput . write ( bytes ) ; \n\toffset += bytes . length ; \n\t} \n"}, {"code": "static synchronized boolean isShapingSupported $F72 { \n\tif ( isShapingSupported == null ) { \n\t\tXToolkit . awtLock ( ) ; \n\t\ttry { \n\t\t\tisShapingSupported = XlibWrapper . XShapeQueryExtension ( XToolkit . getDisplay ( ) , XlibWrapper . larg1 , XlibWrapper . larg2 ) ; \n\t\t\t} \n\t\tfinally { \n\t\t\tXToolkit . awtUnlock ( ) ; \n\t\t\t} \n\t\t} \n\t$F44652 ( isShapingSupported ) } \n"}, {"code": "private boolean isIdChar ( int ch ) { \n\treturn isAlpha ( ch ) || isDigit ( ch ) || ch == NUM00 || ch == NUM00 || ch == NUM00 || ch == NUM00 || Character . isLetter ( ch ) ; \n\t} \n"}, {"code": "protected String handleTimeseal ( String text ) throws IOException { \n\tString result = text ; \n\t$F51620 ( LOG , result ) while $F3578 ( result ) { \n\t\tsendAck ( ) ; \n\t\t$F56558 ( result ) $F51620 ( LOG , result ) } \n\t$F51620 ( LOG , result ) return result ; \n\t} \n"}, {"code": "public BerInputStream ( InputStream in , int initialSize ) throws IOException { \n\tthis . in = in ; \n\t$F1325 ( buffer , initialSize ) next ( ) ; \n\tif ( length != INDEFINIT_LENGTH ) { \n\t\tif ( buffer . length < ( length + offset ) ) { \n\t\t\t$F112445 ( newBuffer , length , offset ) $F135 ( System , buffer , newBuffer , offset ) buffer = newBuffer ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tisIndefinedLength = _BOOL ; \n\t\tthrow new ASN1Exception $F580 ; \n\t\t} \n\t} \n"}, {"code": "protected LocationHandler ( Location location , Option ... options ) { \n\tthis . location = location ; \n\tthis . options = options . length == NUM00 ? EnumSet . noneOf ( Option . class ) : EnumSet . copyOf ( Arrays . asList ( options ) ) ; \n\t} \n"}, {"code": "private void init $F72 { \n\t$F980 ( _logger ) list = new ConcurrentLinkedQueue < ArrivedIndication > $F72 ; \n\tIntermediateProcessor intermediateProcessor = new IntermediateProcessor ( list , _processor ) ; \n\tindicationProcessTimer = Executors . newSingleThreadScheduledExecutor ( ) ; \n\tindicationProcessTimer . scheduleWithFixedDelay ( intermediateProcessor , CIMConstants . INDICATION_PROCESS_INTERVAL , PERIODIC_DELAY , TimeUnit . SECONDS ) ; \n\t} \n"}, {"code": "public void testResultSetMetadate $F72 throws Exception { \n\tfinal int rows = NUM00 ; \n\tfinal int tables = NUM00 ; \n\tfinal int columns = NUM00 ; \n\t$F11282 ( st , con ) $F83 ( sb ) try { \n\t\tfor ( $F119 ( t , tables ) ) { \n\t\t\t$F4910 ( sb ) $F84 ( sb ) sb . append ( t ) ; \n\t\t\t$F84 ( sb ) for ( $F119 ( c , columns ) ) $F7227 ( sb , c ) $F84 ( sb ) st . execute ( sb . toString ( ) ) ; \n\t\t\t} \n\t\tfor ( $F119 ( t , tables ) ) { \n\t\t\t$F4910 ( sb ) $F84 ( sb ) sb . append ( t ) ; \n\t\t\t$F84 ( sb ) $F103815 ( c , columns , sb ) $F84 ( sb ) PreparedStatement pst = con . prepareStatement ( sb . toString ( ) ) ; \n\t\t\tfor ( $F119 ( r , rows ) ) { \n\t\t\t\tfor ( $F9993 ( c , columns ) ) { \n\t\t\t\t\tpst . setInt ( c + NUM00 , r ) ; \n\t\t\t\t\t} \n\t\t\t\t$F420497 ( pst ) } \n\t\t\tAssert . assertEquals ( rows , pst . executeBatch ( ) . length ) ; \n\t\t\t} \n\t\t$F4910 ( sb ) $F84 ( sb ) for ( $F119 ( t , tables ) ) { \n\t\t\tsb . append ( t > NUM00 ? NUM00 : NUM00 ) ; \n\t\t\t$F84 ( sb ) sb . append ( t ) ; \n\t\t\t} \n\t\tif ( tables > NUM00 ) { \n\t\t\t$F84 ( sb ) for ( $F119 ( t , tables ) ) { \n\t\t\t\tsb . append ( t > NUM00 ? NUM00 : NUM00 ) ; \n\t\t\t\t$F84 ( sb ) sb . append ( t ) ; \n\t\t\t\t$F84 ( sb ) $F84 ( sb ) sb . append ( t - NUM00 ) ; \n\t\t\t\t$F84 ( sb ) } \n\t\t\t} \n\t\tResultSet rs = st . executeQuery ( sb . toString ( ) ) ; \n\t\t$F19097 ( rsmd , rs ) $F16742 ( toalColumns , rsmd ) Assert . assertEquals ( tables * ( columns + NUM00 ) , toalColumns ) ; \n\t\tfor ( $F119 ( r , rows ) ) { \n\t\t\t$F7683 ( assertTrue , rs ) } \n\t\tint index = NUM00 ; \n\t\tfor ( $F119 ( t , tables ) ) { \n\t\t\tfor ( int c = NUM00 ; \n\t\t\tc <= columns + NUM00 ; \n\t\t\tc ++ ) { \n\t\t\t\tindex ++ ; \n\t\t\t\tAssert . assertEquals ( c > NUM00 ? ( NUM00 + ( c - NUM00 ) ) : NUM00 , rsmd . getColumnName ( index ) ) ; \n\t\t\t\tAssert . assertEquals ( Types . INTEGER , rsmd . getColumnType ( index ) ) ; \n\t\t\t\tAssert . assertEquals ( NUM00 + t , rsmd . getTableName ( index ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tfinally { \n\t\tfor ( $F119 ( t , tables ) ) $F1328 ( dropTable , t ) } \n\t} \n"}, {"code": "public static final String longToHexString ( long a ) { \n\t$F75240 ( sb ) for ( $F6268 ( i ) ) sb . append ( NIBBLE [ ( int ) ( a > > > ( NUM00 - NUM00 * i ) ) & NUM00 ] ) ; \n\t$F92 ( sb ) } \n"}, {"code": "private Date watchCoreStartAt ( SolrServer client , final long timeout , final Date min ) throws InterruptedException , IOException , SolrServerException { \n\tfinal long sleepInterval = NUM00 ; \n\tlong timeSlept = NUM00 ; \n\tSolrParams p = params ( $F61861 ) ; \n\twhile ( timeSlept < timeout ) { \n\t\tQueryRequest req = new QueryRequest ( p ) ; \n\t\t$F244296 ( req ) try { \n\t\t\tNamedList data = client . request ( req ) ; \n\t\t\tfor ( String k : $F78037 ) { \n\t\t\t\t$F16628 ( o , data , k ) assertNotNull ( NUM00 + k , o ) ; \n\t\t\t\tdata = ( NamedList ) o ; \n\t\t\t\t} \n\t\t\tDate startTime = ( Date ) data . get ( NUM00 ) ; \n\t\t\tassertNotNull ( NUM00 , startTime ) ; \n\t\t\tif ( null == min || startTime . after ( min ) ) { \n\t\t\t\treturn startTime ; \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( SolrException e ) { \n\t\t\tif ( NUM00 != e . code ( ) ) { \n\t\t\t\tthrow e ; \n\t\t\t\t} \n\t\t\t} \n\t\ttimeSlept += sleepInterval ; \n\t\tThread . sleep ( sleepInterval ) ; \n\t\t} \n\tfail ( NUM00 + min ) ; \n\treturn min ; \n\t} \n"}, {"code": "$F4058 ( doc , elementList , nameNode , child , childData , load , _BOOL , assertEquals ) "}, {"code": "$F1 public ParamsRequestCondition combine ( ParamsRequestCondition other ) { \n\tSet < ParamExpression > set = new $F22301 ( this . expressions ) ; \n\tset . addAll ( other . expressions ) ; \n\treturn new ParamsRequestCondition ( set ) ; \n\t} \n"}, {"code": "$F1 public boolean equals ( Object obj ) { \n\t$F3627 ( obj , this , _BOOL ) if ( ! ( obj instanceof TimeSeriesCollection ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tTimeSeriesCollection that = ( TimeSeriesCollection ) obj ; \n\tif ( this . xPosition != that . xPosition ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( this . domainIsPointsInTime != that . domainIsPointsInTime ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( ! ObjectUtilities . equal ( this . data , that . data ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "private void parseRules ( Attributes attributes ) { \n\tstartMode = getModeAttribute ( attributes , NUM00 ) ; \n\tif ( startMode == null ) { \n\t\tstartMode = lookupCreateMode ( IMPLICIT_MODE_NAME ) ; \n\t\tmd . currentMode = startMode ; \n\t\tstartMode . noteDefined ( null ) ; \n\t\t} \n\tstartMode . noteUsed ( locator ) ; \n\tif ( attributesSchema ) { \n\t\tMode wrapper = lookupCreateMode ( WRAPPER_MODE_NAME ) ; \n\t\tActionSet actions = new ActionSet $F72 ; \n\t\tactions . addNoResultAction ( new AllowAction ( new ModeUsage ( startMode , startMode ) ) ) ; \n\t\twrapper . bindElement ( NamespaceSpecification . ANY_NAMESPACE , NamespaceSpecification . DEFAULT_WILDCARD , actions ) ; \n\t\twrapper . noteDefined ( null ) ; \n\t\tstartMode = wrapper ; \n\t\t} \n\tdefaultSchemaType = getSchemaType ( attributes ) ; \n\t} \n"}, {"code": "public void fill ( byte value ) { \n\tvalue &= NUM00 ; \n\tArrays . fill ( data , ( byte ) ( value < < NUM00 | value ) ) ; \n\t} \n"}, {"code": "public void makeImmutable $F72 { \n\t$F4246 ( isMutable , _BOOL ) } \n"}, {"code": "private static void parse ( InputStream in , Encoding encoding , ContentHandler contentHandler ) throws $F35763 { \n\ttry { \n\t\tXMLReader reader = new ExpatReader $F72 ; \n\t\treader . setContentHandler ( contentHandler ) ; \n\t\t$F77995 ( source , in ) source . setEncoding ( encoding . expatName ) ; \n\t\treader . parse ( source ) ; \n\t\t} \n\tcatch ( IOException e ) $F27253 ( e ) } \n"}, {"code": "$F1 public $F38156 findByField2 ( boolean field2 ) { \n\treturn findByField2 ( field2 , QueryUtil . ALL_POS , QueryUtil . ALL_POS , null ) ; \n\t} \n"}, {"code": "public void addToAssociated ( Message asMessage ) $F207 ( associatedMessages , asMessage ) "}, {"code": "private static void parsePropertyAssignments ( Properties p , $F806 assignments ) { \n\tfor ( String assignment : assignments ) { \n\t\t$F1384 ( split , assignment ) $F11991 ( key , assignment , split ) $F36289 ( value , assignment , split ) p . put ( key , value ) ; \n\t\t} \n\t} \n"}, {"code": "protected boolean switchProfiles ( IProfile newSelection ) { \n\t$F1933 ( newSelection , _BOOL ) $F3627 ( mCurrentProfile , newSelection , _BOOL ) if ( mAlternativeProfileHeaderSwitching ) { \n\t\tint prevSelection = - NUM00 ; \n\t\tif ( mProfileFirst == newSelection ) { \n\t\t\tprevSelection = NUM00 ; \n\t\t\t} \n\t\telse if ( mProfileSecond == newSelection ) { \n\t\t\tprevSelection = NUM00 ; \n\t\t\t} \n\t\telse $F154378 ( mProfileThird , newSelection , prevSelection ) IProfile tmp = mCurrentProfile ; \n\t\tmCurrentProfile = newSelection ; \n\t\tif ( prevSelection == NUM00 ) { \n\t\t\tmProfileFirst = tmp ; \n\t\t\t} \n\t\telse if ( prevSelection == NUM00 ) { \n\t\t\tmProfileSecond = tmp ; \n\t\t\t} \n\t\telse $F126526 ( prevSelection , mProfileThird , tmp ) } \n\telse { \n\t\tif ( mProfiles != null ) { \n\t\t\tArrayList < IProfile > previousActiveProfiles = new $F201 ( Arrays . asList ( mCurrentProfile , mProfileFirst , mProfileSecond , mProfileThird ) ) ; \n\t\t\tif $F105 ( previousActiveProfiles , newSelection ) { \n\t\t\t\tint position = - NUM00 ; \n\t\t\t\tfor ( $F6268 ( i ) ) { \n\t\t\t\t\tif $F36973 ( previousActiveProfiles , i , newSelection ) $F3468 ( position , i ) } \n\t\t\t\tif ( position != - NUM00 ) { \n\t\t\t\t\tpreviousActiveProfiles . remove ( position ) ; \n\t\t\t\t\t$F6965 ( previousActiveProfiles , newSelection ) $F36986 ( mCurrentProfile , previousActiveProfiles ) $F36986 ( mProfileFirst , previousActiveProfiles ) $F36986 ( mProfileSecond , previousActiveProfiles ) $F36986 ( mProfileThird , previousActiveProfiles ) } \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tmProfileThird = mProfileSecond ; \n\t\t\t\tmProfileSecond = mProfileFirst ; \n\t\t\t\tmProfileFirst = mCurrentProfile ; \n\t\t\t\tmCurrentProfile = newSelection ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tif ( mOnlySmallProfileImagesVisible ) { \n\t\tmProfileThird = mProfileSecond ; \n\t\tmProfileSecond = mProfileFirst ; \n\t\tmProfileFirst = mCurrentProfile ; \n\t\t} \n\tbuildProfiles ( ) ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static SearchScope valueOf ( final int intValue ) { \n\tSearchScope result = null ; \n\tif ( NUM00 <= intValue && intValue < ELEMENTS . length ) { \n\t\tresult = ELEMENTS [ intValue ] ; \n\t\t} \n\tif ( result == null ) { \n\t\tresult = new SearchScope ( intValue , NUM00 + intValue + NUM00 , Enum . UNKNOWN ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static IPackageFragmentRoot addClassFolder ( IJavaProject jproject , String containerName , IPath sourceAttachPath , IPath sourceAttachRoot ) throws CoreException { \n\t$F18258 ( project , jproject ) IContainer container = null ; \n\tif $F6036 ( containerName ) { \n\t\tcontainer = project ; \n\t\t} \n\telse { \n\t\tIFolder folder = project . getFolder ( containerName ) ; \n\t\tif $F1906 ( folder ) { \n\t\t\tCoreUtility . createFolder ( folder , _BOOL , _BOOL , null ) ; \n\t\t\t} \n\t\tcontainer = folder ; \n\t\t} \n\tIClasspathEntry cpe = JavaCore . newLibraryEntry ( container . getFullPath ( ) , sourceAttachPath , sourceAttachRoot ) ; \n\taddToClasspath ( jproject , cpe ) ; \n\treturn jproject . getPackageFragmentRoot ( container ) ; \n\t} \n"}, {"code": "private void previousWindow ( Calendar startTime ) { \n\tif ( isDaily ( ) ) { \n\t\tstartTime . add ( Calendar . DAY_OF_MONTH , - NUM00 ) ; \n\t\t} \n\telse if ( isWeekly ( ) ) { \n\t\tstartTime . add ( Calendar . WEEK_OF_MONTH , - NUM00 ) ; \n\t\t} \n\telse if ( isMonthly ( ) ) { \n\t\tint month = $F21623 ( startTime , Calendar ) ; \n\t\tadjustDayOfMonth ( startTime , month + - NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "$F152357 ( a , head , tail , System , elements , size , headPortionLen ) "}, {"code": "abstract void executeOnHandlerTask ( Runnable task ) ; \n"}, {"code": "public static LatLng translatePoint ( LatLng point , double distance , double bearing ) { \n\tdistance = distance / NUM00 ; \n\t$F46307 ( lat , Math , point ) $F89861 ( lng , Math , point ) $F129283 ( bearing , Math ) double Lat2 = Math . asin ( ( Math . sin ( lat ) * Math . cos ( distance / EARTH ) ) + ( Math . cos ( lat ) * Math . sin ( distance / EARTH ) * Math . cos ( bearing ) ) ) ; \n\tdouble Long2 = lng + Math . atan2 ( Math . sin ( bearing ) * Math . sin ( distance / EARTH ) * Math . cos ( lat ) , Math . cos ( distance / EARTH ) - ( Math . sin ( lat ) * Math . sin ( Lat2 ) ) ) ; \n\tLat2 = Math . toDegrees ( Lat2 ) ; \n\tLong2 = Math . toDegrees ( Long2 ) ; \n\treturn new LatLng ( Lat2 , Long2 ) ; \n\t} \n"}, {"code": "public Instance calcPivot ( MyIdxList list1 , MyIdxList list2 , Instances insts ) { \n\tint classIdx = m_Instances . classIndex ( ) ; \n\t$F1986 attrVals = new double [ insts . numAttributes ( ) ] ; \n\tInstance temp ; \n\tfor ( $F1088 ( i , list1 ) ) { \n\t\ttemp = insts . instance ( list1 . get ( i ) . idx ) ; \n\t\tfor ( int k = NUM00 ; \n\t\tk < temp . numValues ( ) ; \n\t\tk ++ ) { \n\t\t\tif ( temp . index ( k ) == classIdx ) $F1448 attrVals [ k ] += temp . valueSparse ( k ) ; \n\t\t\t} \n\t\t} \n\tfor ( $F1088 ( j , list2 ) ) { \n\t\ttemp = insts . instance ( list2 . get ( j ) . idx ) ; \n\t\tfor ( int k = NUM00 ; \n\t\tk < temp . numValues ( ) ; \n\t\tk ++ ) { \n\t\t\tif ( temp . index ( k ) == classIdx ) $F1448 attrVals [ k ] += temp . valueSparse ( k ) ; \n\t\t\t} \n\t\t} \n\tfor ( int j = NUM00 , numInsts = $F71221 ( list1 , list2 ) ; \n\tj < attrVals . length ; \n\tj ++ ) { \n\t\tattrVals [ j ] /= numInsts ; \n\t\t} \n\t$F124374 ( temp , attrVals ) return temp ; \n\t} \n"}, {"code": "default Optional < $F5675 > parseOptional $F97 ( parseMessage ) { \n\treturn Optional . ofNullable ( parse ( parseMessage ) ) ; \n\t} \n"}, {"code": "public static void initializeForClientUse $F72 { \n\tEmbeddedUtils . initializeForClientUse ( ) ; \n\t} \n"}, {"code": "private void createUser ( SSOToken token , PersistentObject parentObj , Map attributes , String profileName ) throws UMSException , AMEntryExistsException , AMException { \n\tString orgDN = getOrganizationDN ( internalToken , parentObj . getDN ( ) ) ; \n\tString entryDN = getNamingAttribute ( AMObject . USER ) + NUM00 + profileName + NUM00 + parentObj . getDN ( ) ; \n\tattributes = callBackHelper . preProcess ( token , entryDN , orgDN , null , attributes , CallBackHelper . CREATE , AMObject . USER , _BOOL ) ; \n\tAttrSet attrSet = CommonUtils . mapToAttrSet ( attributes ) ; \n\tmakeNamingFirst ( attrSet , getNamingAttribute ( AMObject . USER ) , profileName ) ; \n\tUserPasswordValidationHelper pluginImpl = new UserPasswordValidationHelper ( token , orgDN ) ; \n\ttry { \n\t\tpluginImpl . validate ( CommonUtils . attrSetToMap ( attrSet ) ) ; \n\t\t} \n\tcatch ( AMException ame ) { \n\t\t$F66414 ( debug , ame ) throw ame ; \n\t\t} \n\tTemplateManager tempMgr = TemplateManager . getTemplateManager ( ) ; \n\tCreationTemplate creationTemp = tempMgr . getCreationTemplate ( NUM00 , new Guid ( orgDN ) , TemplateManager . SCOPE_ANCESTORS ) ; \n\tattrSet = combineOCs ( creationTemp , attrSet ) ; \n\tPersistentObject user = new PersistentObject ( creationTemp , attrSet ) ; \n\ttry $F87603 ( parentObj , user ) catch ( AccessRightsException e ) { \n\t\tif $F12866 ( debug ) { \n\t\t\tdebug . warning ( NUM00 + NUM00 , e ) ; \n\t\t\t} \n\t\t$F88429 ( token ) } \n\tcatch ( EntryAlreadyExistsException ee ) { \n\t\tif ( ComplianceServicesImpl . isComplianceUserDeletionEnabled ( ) ) { \n\t\t\tcomplianceImpl . checkIfDeletedUser ( token , user . getDN ( ) ) ; \n\t\t\t} \n\t\tif $F12866 ( debug ) { \n\t\t\tdebug . warning ( NUM00 + NUM00 , ee ) ; \n\t\t\t} \n\t\tthrow new AMEntryExistsException ( token , NUM00 , ee ) ; \n\t\t} \n\tcatch ( UMSException ue ) { \n\t\tif $F12866 ( debug ) { \n\t\t\tdebug . warning ( NUM00 + NUM00 , ue ) ; \n\t\t\t} \n\t\tprocessInternalException ( token , ue , NUM00 ) ; \n\t\t} \n\tcallBackHelper . postProcess ( token , user . getDN ( ) , orgDN , null , attributes , CallBackHelper . CREATE , AMObject . USER , _BOOL ) ; \n\tAMUserEntryProcessed postPlugin = getUserPostPlugin ( ) ; \n\tif ( postPlugin != null ) { \n\t\tMap attrMap = CommonUtils . attrSetToMap ( attrSet ) ; \n\t\tpostPlugin . processUserAdd ( token , user . getDN ( ) , attrMap ) ; \n\t\t} \n\tEmailNotificationHelper mailerObj = new EmailNotificationHelper ( user . getDN ( ) ) ; \n\tmailerObj . setUserCreateNotificationList ( ) ; \n\tmailerObj . sendUserCreateNotification ( attributes ) ; \n\t} \n"}, {"code": "public $F987 listOptions $F72 { \n\t$F994 ( newVector ) $F1000 ( newVector ) newVector . addElement ( new Option ( $F34354 + NUM00 + NUM00 , NUM00 , NUM00 , NUM00 ) ) ; \n\t$F9010 ( newVector , Collections , super ) $F1007 ( newVector ) } \n"}, {"code": "private static int byteCompaction ( int mode , $F2027 codewords , int codeIndex , StringBuilder result ) { \n\tif ( mode == BYTE_COMPACTION_MODE_LATCH ) { \n\t\tint count = NUM00 ; \n\t\tlong value = NUM00 ; \n\t\t$F11577 ( decodedData ) $F11844 ( byteCompactedCodewords ) boolean end = _BOOL ; \n\t\tint nextCode = codewords [ codeIndex ++ ] ; \n\t\twhile ( ( codeIndex < codewords [ NUM00 ] ) && ! end ) { \n\t\t\tbyteCompactedCodewords [ count ++ ] = nextCode ; \n\t\t\tvalue = NUM00 * value + nextCode ; \n\t\t\tnextCode = codewords [ codeIndex ++ ] ; \n\t\t\tif $F62764 ( nextCode , TEXT_COMPACTION_MODE_LATCH , BYTE_COMPACTION_MODE_LATCH , NUMERIC_COMPACTION_MODE_LATCH , BYTE_COMPACTION_MODE_LATCH_6 , BEGIN_MACRO_PDF417_CONTROL_BLOCK , BEGIN_MACRO_PDF417_OPTIONAL_FIELD , MACRO_PDF417_TERMINATOR ) { \n\t\t\t\tcodeIndex -- ; \n\t\t\t\tend = _BOOL ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tif ( ( count % NUM00 == NUM00 ) && ( count > NUM00 ) ) { \n\t\t\t\t\tfor ( $F809 ( j ) ) { \n\t\t\t\t\t\tdecodedData [ NUM00 - j ] = ( char ) ( value % NUM00 ) ; \n\t\t\t\t\t\tvalue >>= NUM00 ; \n\t\t\t\t\t\t} \n\t\t\t\t\tresult . append ( decodedData ) ; \n\t\t\t\t\tcount = NUM00 ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tif ( codeIndex == codewords [ NUM00 ] && nextCode < TEXT_COMPACTION_MODE_LATCH ) $F52339 ( byteCompactedCodewords , count , nextCode ) for ( $F119 ( i , count ) ) { \n\t\t\t$F3356 ( result , byteCompactedCodewords , i ) } \n\t\t} \n\telse if ( mode == BYTE_COMPACTION_MODE_LATCH_6 ) { \n\t\tint count = NUM00 ; \n\t\tlong value = NUM00 ; \n\t\tboolean end = _BOOL ; \n\t\twhile $F38554 ( codeIndex , codewords , end ) { \n\t\t\tint code = codewords [ codeIndex ++ ] ; \n\t\t\tif ( code < TEXT_COMPACTION_MODE_LATCH ) { \n\t\t\t\tcount ++ ; \n\t\t\t\tvalue = NUM00 * value + code ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tif $F62764 ( code , TEXT_COMPACTION_MODE_LATCH , BYTE_COMPACTION_MODE_LATCH , NUMERIC_COMPACTION_MODE_LATCH , BYTE_COMPACTION_MODE_LATCH_6 , BEGIN_MACRO_PDF417_CONTROL_BLOCK , BEGIN_MACRO_PDF417_OPTIONAL_FIELD , MACRO_PDF417_TERMINATOR ) { \n\t\t\t\t\tcodeIndex -- ; \n\t\t\t\t\tend = _BOOL ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tif ( ( count % NUM00 == NUM00 ) && ( count > NUM00 ) ) { \n\t\t\t\t$F11577 ( decodedData ) for ( $F809 ( j ) ) { \n\t\t\t\t\tdecodedData [ NUM00 - j ] = $F27723 ( value ) ; \n\t\t\t\t\tvalue >>= NUM00 ; \n\t\t\t\t\t} \n\t\t\t\tresult . append ( decodedData ) ; \n\t\t\t\tcount = NUM00 ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn codeIndex ; \n\t} \n"}, {"code": "public void addAll ( $F4170 $F5675 itemList ) { \n\tsynchronized ( lock ) { \n\t\t$F9406 ( items ) items . addAll ( itemList ) ; \n\t\t} \n\tif ( notifyOnChange ) { \n\t\tif ( items . size ( ) - itemList . size ( ) != NUM00 ) { \n\t\t\tnotifyItemRangeChanged ( items . size ( ) - itemList . size ( ) , itemList . size ( ) ) ; \n\t\t\t} \n\t\telse $F5795 ( notifyDataSetChanged ) } \n\t} \n"}, {"code": "public void write ( int a ) throws IOException $F164531 ( outs , a , position ) "}, {"code": "public void testInsert1 $F72 throws SQLException { \n\tDatabaseCreator . fillParentTable ( conn ) ; \n\tDatabaseCreator . fillFKStrictTable ( conn ) ; \n\tDatabaseCreator . fillFKCascadeTable ( conn ) ; \n\t$F283254 ( statement , DatabaseCreator ) statement . execute ( NUM00 + DatabaseCreator . FKCASCADE_TABLE + NUM00 ) ; \n\t} \n"}, {"code": "public boolean isStartsWithMode $F72 { \n\treturn startsWithMode ; \n\t} \n"}, {"code": "public Builder withThreads ( int threads ) { \n\tproperties . setProperty ( NettyOptions . THREADS , $F348031 ( String , Assert , threads ) ) ; \n\treturn this ; \n\t} \n"}, {"code": "public void paintTabbedPaneTabAreaBackground ( SynthContext context , Graphics g , int x , int y , int w , int h , int orientation ) { \n\tif ( orientation == JTabbedPane . LEFT ) { \n\t\t$F34721 ( transform ) transform . scale ( $F72322 ) ; \n\t\t$F72326 ( transform , Math ) paintBackground ( context , g , y , x , h , w , transform ) ; \n\t\t} \n\telse if ( orientation == JTabbedPane . RIGHT ) { \n\t\t$F34721 ( transform ) $F72326 ( transform , Math ) transform . translate ( NUM00 , - ( x + w ) ) ; \n\t\tpaintBackground ( context , g , y , NUM00 , h , w , transform ) ; \n\t\t} \n\telse if ( orientation == JTabbedPane . BOTTOM ) { \n\t\t$F34721 ( transform ) transform . translate ( x , y ) ; \n\t\tpaintBackground ( context , g , NUM00 , NUM00 , w , h , transform ) ; \n\t\t} \n\telse $F72336 ( paintBackground , context , g , x , y , w , h ) } \n"}, {"code": "$F1 public void endCDATA ( Augmentations augs ) throws XNIException { \n\ttry { \n\t\tif ( fLexicalHandler != null ) { \n\t\t\tfLexicalHandler . endCDATA ( ) ; \n\t\t\t} \n\t\t} \n\t$F122277 ( e ) } \n"}, {"code": "public static MediaLocator createMediaLocator ( String url ) { \n\tMediaLocator ml ; \n\tif ( url . indexOf ( NUM00 ) > NUM00 && ( ml = new MediaLocator ( url ) ) != null ) return ml ; \n\tif ( url . startsWith ( File . separator ) ) { \n\t\tif ( ( ml = new MediaLocator ( NUM00 + url ) ) != null ) return ml ; \n\t\t} \n\telse { \n\t\tString file = NUM00 + System . getProperty ( NUM00 ) + File . separator + url ; \n\t\tif ( ( ml = new MediaLocator ( file ) ) != null ) return ml ; \n\t\t} \n\t$F1274 } \n"}, {"code": "private static void invokeRemoteClearAndWait ( VM remoteVM , VM thisVM ) { \n\t$F188761 ( remoteVM ) try $F24081 ( clearLatch ) catch ( InterruptedException e ) $F1210 ( fail ) } \n"}, {"code": "$F23145 ( measureSpec , result , specMode , MeasureSpec , specSize , mRadius , getPaddingTop , getPaddingBottom , Math ) "}, {"code": "public void key ( String skey ) throws $F65177 { \n\tsynchronized ( this ) { \n\t\tbyte ekey [ ] = null ; \n\t\tif $F22 ( skey ) { \n\t\t\t$F65182 ( ekey , skey ) for ( $F1088 ( i , skey ) ) { \n\t\t\t\t$F1280 ( c , skey , i ) ekey [ i ] = ( byte ) ( ( c & NUM00 ) ^ ( c > > NUM00 ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t_key ( ekey ) ; \n\t\t} \n\t} \n"}, {"code": "public void testSharedTestData $F72 throws Exception { \n\t$F141086 ( assertEquals , testSqlDate , Date , testLocalDate ) $F141086 ( assertEquals , testSqlTime , Time , testLocalTime ) $F141086 ( assertEquals , testSqlTimeStamp , Timestamp , testLocalDateTime ) assertEquals ( testLocalDate , testSqlDate . toLocalDate ( ) ) ; \n\tassertEquals ( testLocalTime , testSqlTime . toLocalTime ( ) ) ; \n\tassertEquals ( testLocalDateTime , testSqlTimeStamp . toLocalDateTime ( ) ) ; \n\t} \n"}, {"code": "public static $F13096 makeRandomCacheEntry ( $F96 data , boolean isExpired , boolean needsRefresh ) { \n\t$F6822 ( random ) $F13096 entry = new $F13096 $F72 ; \n\tif ( data != null ) $F6988 ( entry , data ) else { \n\t\tentry . data = $F13106 ( random ) ; \n\t\t} \n\tentry . etag = $F13111 ( String , random ) ; \n\tentry . serverDate = random . nextLong ( ) ; \n\tentry . ttl = isExpired ? NUM00 : Long . MAX_VALUE ; \n\tentry . softTtl = needsRefresh ? NUM00 : Long . MAX_VALUE ; \n\treturn entry ; \n\t} \n"}, {"code": "public static final void isCDataWF ( DOMErrorHandler errorHandler , DOMErrorImpl error , DOMLocatorImpl locator , String datavalue , boolean isXML11Version ) { \n\tif ( datavalue == null || $F1277 ( datavalue ) ) $F932 $F7782 ( dataarray , datavalue ) int datalength = dataarray . length ; \n\tif ( isXML11Version ) { \n\t\tint i = NUM00 ; \n\t\twhile ( i < datalength ) { \n\t\t\tchar c = dataarray [ i ++ ] ; \n\t\t\tif ( XML11Char . isXML11Invalid ( c ) ) { \n\t\t\t\t$F121844 ( XMLChar , c , i , datalength , c2 , dataarray ) String msg = DOMMessageFormatter . formatMessage ( DOMMessageFormatter . XML_DOMAIN , NUM00 , $F236375 ( Integer , c ) ) ; \n\t\t\t\treportDOMError ( errorHandler , error , locator , msg , DOMError . SEVERITY_ERROR , NUM00 ) ; \n\t\t\t\t} \n\t\t\telse if ( c == NUM00 ) { \n\t\t\t\tint count = i ; \n\t\t\t\tif ( count < datalength && dataarray [ count ] == NUM00 ) { \n\t\t\t\t\twhile ( ++ count < datalength && dataarray [ count ] == NUM00 ) $F845 if ( count < datalength && dataarray [ count ] == NUM00 ) { \n\t\t\t\t\t\tString msg = DOMMessageFormatter . formatMessage ( DOMMessageFormatter . XML_DOMAIN , NUM00 , null ) ; \n\t\t\t\t\t\treportDOMError ( errorHandler , error , locator , msg , DOMError . SEVERITY_ERROR , NUM00 ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse { \n\t\tint i = NUM00 ; \n\t\twhile ( i < datalength ) { \n\t\t\tchar c = dataarray [ i ++ ] ; \n\t\t\tif ( XMLChar . isInvalid ( c ) ) { \n\t\t\t\t$F121844 ( XMLChar , c , i , datalength , c2 , dataarray ) String msg = DOMMessageFormatter . formatMessage ( DOMMessageFormatter . XML_DOMAIN , NUM00 , $F236375 ( Integer , c ) ) ; \n\t\t\t\treportDOMError ( errorHandler , error , locator , msg , DOMError . SEVERITY_ERROR , NUM00 ) ; \n\t\t\t\t} \n\t\t\telse if ( c == NUM00 ) { \n\t\t\t\tint count = i ; \n\t\t\t\tif ( count < datalength && dataarray [ count ] == NUM00 ) { \n\t\t\t\t\twhile ( ++ count < datalength && dataarray [ count ] == NUM00 ) $F845 if ( count < datalength && dataarray [ count ] == NUM00 ) { \n\t\t\t\t\t\tString msg = DOMMessageFormatter . formatMessage ( DOMMessageFormatter . XML_DOMAIN , NUM00 , null ) ; \n\t\t\t\t\t\treportDOMError ( errorHandler , error , locator , msg , DOMError . SEVERITY_ERROR , NUM00 ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void characters $F62353 ( start , length ) { \n\tif ( titlePending ) $F92922 ( title , ch , start , length ) else if ( descPending ) $F92922 ( desc , ch , start , length ) } \n"}, {"code": "$F1 public $F987 listOptions $F72 { \n\t$F994 ( newVector ) $F9007 ( newVector ) $F1007 ( newVector ) } \n"}, {"code": "private void closeInjectorResource ( ShardId shardId , Injector shardInjector , Class < ? extends Closeable > ... toClose ) { \n\tfor ( Class < ? extends Closeable > closeable : toClose ) { \n\t\tif ( closeInjectorOptionalResource ( shardId , shardInjector , closeable ) == _BOOL ) { \n\t\t\tlogger . warn ( NUM00 , shardId , closeable . getSimpleName ( ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public final void incrementIdCounterTo ( int id ) { \n\tint diff = id - mIdCounter . get ( ) ; \n\t$F61236 ( diff ) mIdCounter . addAndGet ( diff ) ; \n\tupdateSharedPreference ( ) ; \n\t} \n"}, {"code": "private static int clearBrandingResourceMapCache ( ContentResolver cr , long providerId ) { \n\t$F83 ( where ) where . append ( Imps . BrandingResourceMapCache . PROVIDER_ID ) ; \n\t$F84 ( where ) where . append ( providerId ) ; \n\treturn cr . delete ( Imps . BrandingResourceMapCache . CONTENT_URI , where . toString ( ) , null ) ; \n\t} \n"}, {"code": "protected int checkLastLogin $F72 { \n\t$F121432 ( formatter ) Date now = newDate ( ) ; \n\tDate loginTime = null ; \n\tString lastLoginEnc = null ; \n\tString lastLogin = null ; \n\tString savedUserName = null ; \n\tint retVal = NUM00 ; \n\tif ( timeSinceLastLoginAttribute != null ) { \n\t\tHttpServletRequest req = getHttpServletRequest ( ) ; \n\t\tif ( req != null ) { \n\t\t\tCookie cookie = CookieUtils . getCookieFromReq ( req , timeSinceLastLoginAttribute ) ; \n\t\t\tif ( cookie != null ) { \n\t\t\t\tif $F6299 ( debug ) { \n\t\t\t\t\tdebug . message ( NUM00 , ADAPTIVE , timeSinceLastLoginAttribute ) ; \n\t\t\t\t\t} \n\t\t\t\tlastLoginEnc = CookieUtils . getCookieValue ( cookie ) ; \n\t\t\t\tlastLogin = AccessController . doPrivileged ( new DecodeAction ( lastLoginEnc ) ) ; \n\t\t\t\t} \n\t\t\tif ( lastLogin != null ) { \n\t\t\t\t$F6542 ( tokens , lastLogin ) if $F9634 ( tokens ) { \n\t\t\t\t\tlastLogin = tokens [ NUM00 ] ; \n\t\t\t\t\tsavedUserName = tokens [ NUM00 ] ; \n\t\t\t\t\t} \n\t\t\t\tif $F28190 ( userName , savedUserName ) { \n\t\t\t\t\tlastLogin = null ; \n\t\t\t\t\t} \n\t\t\t\tif ( lastLogin != null ) { \n\t\t\t\t\ttry { \n\t\t\t\t\t\tloginTime = formatter . parse ( lastLogin ) ; \n\t\t\t\t\t\tif ( ( $F265 ( now , loginTime ) ) < timeSinceLastLoginValue * NUM00 * NUM00 * NUM00 * NUM00 ) { \n\t\t\t\t\t\t\tretVal = timeSinceLastLoginScore ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\tcatch ( ParseException pe ) { \n\t\t\t\t\t\tif $F6299 ( debug ) { \n\t\t\t\t\t\t\tdebug . message ( NUM00 , ADAPTIVE , lastLogin , pe ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tif ( timeSinceLastLoginSave ) { \n\t\t\t$F545 ( postAuthNMap , timeSinceLastLoginAttribute ) lastLogin = formatter . format ( now ) ; \n\t\t\tlastLogin = UUID . randomUUID ( ) + NUM00 + lastLogin + NUM00 + userName ; \n\t\t\tlastLoginEnc = AccessController . doPrivileged ( new EncodeAction ( lastLogin ) ) ; \n\t\t\t$F545 ( postAuthNMap , lastLoginEnc ) } \n\t\t} \n\tif ( ! timeSinceLastLoginInvert ) { \n\t\tretVal = timeSinceLastLoginScore - retVal ; \n\t\t} \n\treturn retVal ; \n\t} \n"}, {"code": "public $F96 toByteArray $F72 { \n\tfinal int outLen = nonce_ . length + ( Long . SIZE / Byte . SIZE ) ; \n\t$F14256 ( out , ByteBuffer , outLen ) out . put ( nonce_ ) ; \n\tout . putLong ( contentLength_ ) ; \n\t$F31057 ( out ) } \n"}, {"code": "public void addInterface ( CP ifc ) { \n\taddCPItem ( ifc ) ; \n\tinterfaces . addElement ( ifc ) ; \n\t} \n"}, {"code": "public Builder addConstraint ( @ JobConstraint int constraint ) { \n\t$F2027 newConstraints = new int [ mConstraints == null ? NUM00 : mConstraints . length + NUM00 ] ; \n\tif $F180527 ( mConstraints ) $F192661 ( System , mConstraints , newConstraints ) $F41606 ( newConstraints , constraint ) mConstraints = newConstraints ; \n\treturn this ; \n\t} \n"}, {"code": "void cleanupParameters ( String relayState ) { \n\t$F36310 ( debug , relayState ) relayStateMap . remove ( relayState ) ; \n\tuserSessionMap . remove ( relayState ) ; \n\tuserIDMap . remove ( relayState ) ; \n\tisSOAPInitiatedMap . remove ( relayState ) ; \n\tisSOAPInitiatedMap . remove ( relayState ) ; \n\tisIDPInitiatedMap . remove ( relayState ) ; \n\torigProtocolMap . remove ( relayState ) ; \n\tprotocolListMap . remove ( relayState ) ; \n\trealmMap . remove ( relayState ) ; \n\tidpEntityIDMap . remove ( relayState ) ; \n\tspEntityIDMap . remove ( relayState ) ; \n\tsloRequestXMLMap . remove ( relayState ) ; \n\tsloResponseXMLMap . remove ( relayState ) ; \n\tcurrentStatusMap . remove ( relayState ) ; \n\t} \n"}, {"code": "private boolean extraEntity ( String outputString , int charToMap ) { \n\tboolean extra = _BOOL ; \n\tif ( charToMap < ASCII_MAX ) { \n\t\tswitch ( charToMap ) { \n\t\t\t$F1266 ( outputString , extra , _BOOL ) $F1266 ( outputString , extra , _BOOL ) $F1266 ( outputString , extra , _BOOL ) $F1266 ( outputString , extra , _BOOL ) $F1267 extra = _BOOL ; \n\t\t\t} \n\t\t} \n\treturn extra ; \n\t} \n"}, {"code": "protected void drawPoint ( Graphics2D g , PointStyle pointStyle , double x , double y , Color color , Color borderColor ) { \n\tShape pointShape = pointStyle . createShape ( x , y ) ; \n\tg . setColor ( color ) ; \n\tg . fill ( pointShape ) ; \n\tg . setColor ( borderColor ) ; \n\tg . draw ( pointShape ) ; \n\t} \n"}, {"code": "public void testAndNotNegNegFirstLonger $F72 { \n\t$F37335 $F37339 int aSign = - NUM00 ; \n\tint bSign = - NUM00 ; \n\tbyte $F3018 = { \n\t\tNUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } \n\t; \n\t$F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F89728 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) } \n"}, {"code": "int retryTime $F72 { \n\treturn retryTime . decrementAndGet ( ) ; \n\t} \n"}, {"code": "public DatepickerCombo ( final Composite parent , final int style ) { \n\tthis ( parent , style , DateFormat . getDateTimeInstance ( ) ) ; \n\t} \n"}, {"code": "public void testPowPositiveNum $F72 { \n\t$F12762 int aSign = NUM00 ; \n\tint exp = NUM00 ; \n\tbyte $F3018 = { \n\t\tNUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 } \n\t; \n\t$F3023 ( aNumber , aSign , aBytes ) $F12767 ( result , aNumber , exp ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) } \n"}, {"code": "protected void drawMarkHilighted ( Graphics2D g2 , float x , float y ) { \n\t$F104030 ( bounds , mark ) float w = $F52896 ( bounds ) ; \n\tfloat h = $F52899 ( bounds ) ; \n\tx = x - ( w / NUM00 ) ; \n\ty = y - ( h / NUM00 ) ; \n\tg2 . translate ( x , y ) ; \n\tif ( hilightedMarkFillPaint != null ) { \n\t\tg2 . setPaint ( hilightedMarkFillPaint ) ; \n\t\tg2 . fill ( mark ) ; \n\t\t} \n\tg2 . setPaint ( hilightedMarkPaint ) ; \n\tg2 . setStroke ( hilightedMarkStroke ) ; \n\tg2 . draw ( mark ) ; \n\t$F86480 ( g2 , x , y ) Rectangle2D rect = new $F186398 ( x , y , w , h ) ; \n\tmarkBounds . add ( rect ) ; \n\t} \n"}, {"code": "public static String trimTrailingWhitespace ( String str ) { \n\t$F74602 ( hasLength , str ) $F7542 ( sb , str ) while ( $F20 ( sb ) && Character . isWhitespace ( $F7792 ( sb ) ) ) $F50866 ( sb ) $F92 ( sb ) } \n"}, {"code": "private static MksTicketResponse checkGetMksTicketResponse ( MksTicketResponse mksTicketResponse ) throws RpcException { \n\t$F10635 ( logger , mksTicketResponse ) switch $F52729 ( mksTicketResponse ) { \n\t\tcase OK : $F597 $F52738 ( SYSTEM_ERROR , mksTicketResponse ) case VM_NOT_FOUND : throw new VmNotFoundException $F52730 ( mksTicketResponse ) ; \n\t\tcase INVALID_VM_POWER_STATE : throw new InvalidVmPowerStateException $F52730 ( mksTicketResponse ) ; \n\t\t$F52745 ( String , mksTicketResponse ) } \n\treturn mksTicketResponse ; \n\t} \n"}, {"code": "$F1113 default B append ( double d , int decimalPlaces ) throws BufferOverflowException { \n\tif ( decimalPlaces < NUM00 ) { \n\t\tdouble d2 = d * Maths . tens ( decimalPlaces ) ; \n\t\tif ( d2 <= Long . MAX_VALUE && d2 >= Long . MIN_VALUE ) { \n\t\t\treturn appendDecimal ( Math . round ( d2 ) , decimalPlaces ) ; \n\t\t\t} \n\t\t} \n\treturn append ( d ) ; \n\t} \n"}, {"code": "public $F124768 completeAsync ( Supplier $F10049 supplier , Executor executor ) { \n\tif ( supplier == null || executor == null ) $F18043 executor . execute ( new AsyncSupply $F4203 ( this , supplier ) ) ; \n\treturn this ; \n\t} \n"}, {"code": "private MovieSubtitleChooserModel $F72 $F213842 ( name , BUNDLE ) "}, {"code": "protected SuballocatedIntVector findNamespaceContext ( int elementNodeIndex ) { \n\tif ( null != m_namespaceDeclSetElements ) { \n\t\tint wouldBeAt = findInSortedSuballocatedIntVector ( m_namespaceDeclSetElements , elementNodeIndex ) ; \n\t\tif ( wouldBeAt >= NUM00 ) return $F28383 ( m_namespaceDeclSets , wouldBeAt ) ; \n\t\t$F28386 ( wouldBeAt ) wouldBeAt = - NUM00 - wouldBeAt ; \n\t\tint candidate = m_namespaceDeclSetElements . elementAt ( -- wouldBeAt ) ; \n\t\tint ancestor = _parent ( elementNodeIndex ) ; \n\t\tif ( wouldBeAt == NUM00 && candidate < ancestor ) { \n\t\t\tint rootHandle = getDocumentRoot ( makeNodeHandle ( elementNodeIndex ) ) ; \n\t\t\tint rootID = makeNodeIdentity ( rootHandle ) ; \n\t\t\tint uppermostNSCandidateID ; \n\t\t\tif ( getNodeType ( rootHandle ) == DTM . DOCUMENT_NODE ) { \n\t\t\t\tint ch = _firstch ( rootID ) ; \n\t\t\t\tuppermostNSCandidateID = ( ch != DTM . NULL ) ? ch : rootID ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tuppermostNSCandidateID = rootID ; \n\t\t\t\t} \n\t\t\tif ( candidate == uppermostNSCandidateID ) { \n\t\t\t\treturn $F28383 ( m_namespaceDeclSets , wouldBeAt ) ; \n\t\t\t\t} \n\t\t\t} \n\t\twhile ( wouldBeAt >= NUM00 && ancestor > NUM00 ) { \n\t\t\tif ( candidate == ancestor ) { \n\t\t\t\treturn $F28383 ( m_namespaceDeclSets , wouldBeAt ) ; \n\t\t\t\t} \n\t\t\telse if ( candidate < ancestor ) { \n\t\t\t\tdo $F8576 ( ancestor , _parent ) while ( candidate < ancestor ) ; \n\t\t\t\t} \n\t\t\telse if ( wouldBeAt > NUM00 ) { \n\t\t\t\tcandidate = m_namespaceDeclSetElements . elementAt ( -- wouldBeAt ) ; \n\t\t\t\t} \n\t\t\telse $F597 } \n\t\t} \n\t$F1274 } \n"}, {"code": "public static $F65431 nowTimestamp $F72 { \n\treturn getTimestamp ( System . currentTimeMillis ( ) ) ; \n\t} \n"}, {"code": "public int diff_commonSuffix ( String text1 , String text2 ) { \n\t$F1749 ( text1_length , text1 ) $F1749 ( text2_length , text2 ) $F17565 ( n , Math , text1_length , text2_length ) for ( $F9993 ( i , n ) ) { \n\t\tif ( text1 . charAt ( text1_length - i ) != text2 . charAt ( text2_length - i ) ) $F143681 ( i ) } \n\treturn n ; \n\t} \n"}, {"code": "$F73303 ( axis , trans , prevImageSize , imageSize , prevViewSize , viewSize , drawableSize , m , Matrix , percentage , Math ) "}, {"code": "private void revokeEncryptPolicy ( org . wso2 . emm . agent . beans . Operation operation ) { \n\tboolean encryptStatus = ( devicePolicyManager . getStorageEncryptionStatus ( ) != devicePolicyManager . ENCRYPTION_STATUS_UNSUPPORTED && ( devicePolicyManager . getStorageEncryptionStatus ( ) == devicePolicyManager . ENCRYPTION_STATUS_ACTIVE || devicePolicyManager . getStorageEncryptionStatus ( ) == devicePolicyManager . ENCRYPTION_STATUS_ACTIVATING ) ) ; \n\tif ( operation . isEnabled ( ) && encryptStatus ) { \n\t\tdevicePolicyManager . setStorageEncryption ( deviceAdmin , _BOOL ) ; \n\t\t} \n\t} \n"}, {"code": "public JSONBuffer closeHash $F72 { \n\tif ( stack . empty ( ) || stack . peek ( ) != Operand . HASH ) $F19954 removeSeparator ( ) ; \n\t$F84 ( buffer ) $F34454 ( stack ) addSeparator ( ) ; \n\treturn this ; \n\t} \n"}, {"code": "private static $F96 generateSeed $F72 { \n\ttry { \n\t\t$F1538 ( seedBuffer ) $F1533 ( seedBufferOut , seedBuffer ) seedBufferOut . writeLong ( System . currentTimeMillis ( ) ) ; \n\t\tseedBufferOut . writeLong ( System . nanoTime ( ) ) ; \n\t\tseedBufferOut . write ( BUILD_FINGERPRINT_AND_DEVICE_SERIAL ) ; \n\t\t$F59 ( seedBufferOut ) $F11316 ( seedBuffer ) } \n\tcatch ( IOException e ) { \n\t\tthrow new SecurityException ( NUM00 , e ) ; \n\t\t} \n\t} \n"}, {"code": "private void init ( SnmpMib myMib ) { \n\tif ( debug == null ) { \n\t\tfinal Key < Debug > key = Key . get ( Debug . class , Names . named ( CoreTokenConstants . CTS_MONITOR_DEBUG ) ) ; \n\t\tdebug = InjectorHolder . getInstance ( key ) ; \n\t\t} \n\tfinal List < OperationEntry > operationEntries = new ArrayList < OperationEntry > $F72 ; \n\tfinal List < TokenEntry > tokenEntries = new ArrayList < TokenEntry > $F72 ; \n\tfor ( Enum e : crudItems ) { \n\t\tfinal OperationEntry entry = new OperationEntry ( myMib ) ; \n\t\tentry . OperationType = e . name ( ) ; \n\t\tentry . OperationTableIndex = ( long ) e . ordinal ( ) + NUM00 ; \n\t\toperationEntries . add ( entry ) ; \n\t\t} \n\tfor ( Enum e : tokenItems ) { \n\t\tfinal TokenEntry entry = new TokenEntry ( myMib ) ; \n\t\tentry . TokenType = e . name ( ) ; \n\t\tentry . TokenTableIndex = ( long ) e . ordinal ( ) + NUM00 ; \n\t\ttokenEntries . add ( entry ) ; \n\t\t} \n\ttry { \n\t\tfor ( OperationEntry ce : operationEntries ) { \n\t\t\tOperationTable . addEntry ( ce ) ; \n\t\t\t} \n\t\tfor ( TokenEntry te : tokenEntries ) { \n\t\t\tTokenTable . addEntry ( te ) ; \n\t\t\t} \n\t\tcreateCRUDOperationsPerTokenTypeTable ( myMib , CtsCRUDOperationsPerTokenTypeTable , operationEntries , tokenEntries ) ; \n\t\tcreateCRUDOperationsTable ( myMib , CtsCRUDOperationsTable , operationEntries ) ; \n\t\tcreateTokenOperationsTable ( myMib , CtsTokenOperationsTable , tokenEntries ) ; \n\t\t} \n\tcatch ( SnmpStatusException e ) { \n\t\tif $F6299 ( debug ) $F5198 ( debug , e ) } \n\t} \n"}, {"code": "$F1 public void disconnectionNotification ( String eventName , Object source ) { \n\tm_listenees . remove ( source ) ; \n\tif $F10471 ( m_listenees ) $F9096 ( m_listeneeTypes ) } \n"}, {"code": "public X509Name ( Vector oids , Vector values ) { \n\tthis ( oids , values , new X509DefaultEntryConverter $F72 ) ; \n\t} \n"}, {"code": "$F1 public ToDoubleFunction < Stream < Tuple2 < F , Double > > > dist ( Stream < Tuple2 < F , Double > > features1 ) { \n\tObject2DoubleMap $F355799 auxMap = new Object2DoubleOpenHashMap $F200 $F72 ; \n\tauxMap . defaultReturnValue ( NUM00 ) ; \n\tDoubleAdder norm1 = new DoubleAdder $F72 ; \n\t$F22620 ( features1 ) if ( norm1 . doubleValue ( ) == NUM00 ) $F1337 $F1274 } \n"}, {"code": "public LoadMetadataDetails [ ] readLoadMetadata ( String tableFolderPath ) { \n\t$F554 ( gsonObjectToRead ) DataInputStream dataInputStream = null ; \n\tBufferedReader buffReader = null ; \n\tInputStreamReader inStream = null ; \n\tString metadataFileName = tableFolderPath + CarbonCommonConstants . FILE_SEPARATOR + CarbonCommonConstants . LOADMETADATA_FILENAME ; \n\tLoadMetadataDetails [ ] listOfLoadFolderDetailsArray ; \n\tAtomicFileOperations fileOperation = new AtomicFileOperationsImpl ( metadataFileName , FileFactory . getFileType ( metadataFileName ) ) ; \n\ttry { \n\t\tif ( ! FileFactory . isFileExist ( metadataFileName , FileFactory . getFileType ( metadataFileName ) ) ) { \n\t\t\treturn new LoadMetadataDetails $F380 ; \n\t\t\t} \n\t\tdataInputStream = fileOperation . openForRead ( ) ; \n\t\tinStream = new InputStreamReader ( dataInputStream , Charset . forName ( CarbonCommonConstants . DEFAULT_CHARSET ) ) ; \n\t\t$F26608 ( buffReader , inStream ) listOfLoadFolderDetailsArray = gsonObjectToRead . fromJson ( buffReader , LoadMetadataDetails [ ] . class ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\treturn new LoadMetadataDetails $F380 ; \n\t\t} \n\tfinally { \n\t\tcloseStreams ( buffReader , inStream , dataInputStream ) ; \n\t\t} \n\treturn listOfLoadFolderDetailsArray ; \n\t} \n"}, {"code": "public String toInnerHtml ( Node node , Appendable appendable ) { \n\tNodeVisitor renderer = createRenderer ( appendable ) ; \n\tnode . visitChildren ( renderer ) ; \n\t$F92 ( appendable ) } \n"}, {"code": "private void updateStorageViewInfo ( VPlexStorageViewInfo storageViewInfo ) { \n\t$F48207 ( discoveryMgr , _vplexApiClient ) discoveryMgr . updateStorageViewInfo ( storageViewInfo ) ; \n\t} \n"}, {"code": "static $F3803 decodeAll $F34102 ( eventKeys ) { \n\t$F295581 ( eventIds , Lists ) for ( String eventKey : eventKeys ) { \n\t\tdecodeTo ( eventKey , eventIds ) ; \n\t\t} \n\treturn eventIds ; \n\t} \n"}, {"code": "$F238095 ( lock , this , a , count , k , p , first ) "}, {"code": "private void replaceTop ( Scope topOfStack ) $F233310 ( stack , topOfStack ) "}, {"code": "public void testZeroOne $F72 { \n\tBigInteger aNumber = BigInteger . ZERO ; \n\tBigInteger bNumber = BigInteger . ONE ; \n\t$F37344 ( result , aNumber , bNumber ) assertTrue ( result . equals ( BigInteger . ZERO ) ) ; \n\t$F3037 ( assertEquals , result ) } \n"}, {"code": "public $F96 toByteArray ( String ascii ) { \n\t$F1933 ( ascii , EMPTY_BYTE_ARRAY ) return fromAscii ( ascii . toCharArray ( ) ) ; \n\t} \n"}, {"code": "public static $F8748 copyOfRange ( $F8748 original , int start , int end ) { \n\tif ( start <= end ) { \n\t\tif $F237152 ( original , start ) { \n\t\t\tint length = end - start ; \n\t\t\t$F172265 ( copyLength , Math , length , original , start ) $F57515 ( copy , length ) $F21535 ( System , original , start , copy , copyLength ) return copy ; \n\t\t\t} \n\t\t$F38324 } \n\t$F10056 } \n"}, {"code": "private void onColumnSync $F72 { \n\tint syncPosition = $F125548 ( Math , mSyncPosition , getCount ) ; \n\tSparseArray $F12404 positionHeightRatios = new SparseArray $F12404 ( syncPosition ) ; \n\tfor ( $F119 ( pos , syncPosition ) ) { \n\t\tfinal GridItemRecord rec = mPositionData . get ( pos ) ; \n\t\t$F12576 ( rec ) Log . d ( TAG , NUM00 + pos + NUM00 + rec . heightRatio ) ; \n\t\tpositionHeightRatios . append ( pos , rec . heightRatio ) ; \n\t\t} \n\t$F725 ( mPositionData ) $F12259 ( DBG , Log , TAG , mColumnWidth ) for ( $F119 ( pos , syncPosition ) ) { \n\t\tfinal GridItemRecord rec = getOrCreateRecord ( pos ) ; \n\t\tfinal double heightRatio = positionHeightRatios . get ( pos ) ; \n\t\tfinal int height = $F2354 ( mColumnWidth , heightRatio ) ; \n\t\trec . heightRatio = heightRatio ; \n\t\tint top ; \n\t\tint bottom ; \n\t\tif ( isHeaderOrFooter ( pos ) ) { \n\t\t\ttop = getLowestPositionedBottom ( ) ; \n\t\t\tbottom = top + height ; \n\t\t\tfor ( $F119 ( i , mColumnCount ) ) { \n\t\t\t\tmColumnTops [ i ] = top ; \n\t\t\t\tmColumnBottoms [ i ] = bottom ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\t$F3666 ( column , getHighestPositionedBottomColumn ) top = mColumnBottoms [ column ] ; \n\t\t\tbottom = top + height + getChildTopMargin ( pos ) + getChildBottomMargin ( ) ; \n\t\t\tmColumnTops [ column ] = top ; \n\t\t\tmColumnBottoms [ column ] = bottom ; \n\t\t\trec . column = column ; \n\t\t\t} \n\t\tif ( DBG ) Log . d ( TAG , $F3906 ( pos , top , bottom , height , heightRatio ) ) ; \n\t\t} \n\t$F3666 ( syncColumn , getHighestPositionedBottomColumn ) setPositionColumn ( syncPosition , syncColumn ) ; \n\tint syncToBottom = mColumnBottoms [ syncColumn ] ; \n\tint offset = - syncToBottom + mSpecificTop ; \n\toffsetAllColumnsTopAndBottom ( offset ) ; \n\tmDistanceToTop = - syncToBottom ; \n\t$F135 ( System , mColumnBottoms , mColumnTops , mColumnCount ) } \n"}, {"code": "private static Map < Direction , Sprite [ ] > splitTiles ( SpriteStore st , Sprite orig ) { \n\tint twidth = NUM_ATTACK_FRAMES * TILE_SIZE ; \n\tint theight = NUM00 * TILE_SIZE ; \n\tMap < Direction , Sprite [ ] > map = new EnumMap < Direction , Sprite [ ] > ( Direction . class ) ; \n\tint y = NUM00 ; \n\tmap . put ( Direction . UP , st . getTiles ( orig , NUM00 , y , NUM_ATTACK_FRAMES , twidth , theight ) ) ; \n\ty += theight ; \n\tmap . put ( Direction . RIGHT , st . getTiles ( orig , NUM00 , y , NUM_ATTACK_FRAMES , twidth , theight ) ) ; \n\ty += theight ; \n\tmap . put ( Direction . DOWN , st . getTiles ( orig , NUM00 , y , NUM_ATTACK_FRAMES , twidth , theight ) ) ; \n\ty += theight ; \n\tmap . put ( Direction . LEFT , st . getTiles ( orig , NUM00 , y , NUM_ATTACK_FRAMES , twidth , theight ) ) ; \n\treturn map ; \n\t} \n"}, {"code": "void incrementSchema ( String schemaName ) { \n\tif ( schemaName != null ) { \n\t\t$F99426 ( count , dbMap , schemaName ) if ( count == null ) $F101820 ( dbMap , schemaName ) else dbMap . put ( schemaName , count . intValue ( ) + NUM00 ) ; \n\t\t} \n\tlastDb = schemaName ; \n\t} \n"}, {"code": "private String buildEventData $F72 throws JAXBException { \n\tif ( _eventParameters != null ) { \n\t\ttry { \n\t\t\tJAXBContext jaxbContext = JAXBContext . newInstance ( EventParameters . class ) ; \n\t\t\t$F142433 ( marshaller , jaxbContext ) marshaller . setProperty ( Marshaller . JAXB_FORMATTED_OUTPUT , _BOOL ) ; \n\t\t\t$F108916 ( outWriter ) $F94122 ( result , outWriter ) marshaller . marshal ( _eventParameters , result ) ; \n\t\t\t$F92 ( outWriter ) } \n\t\tcatch ( JAXBException e ) { \n\t\t\t$F45904 ( _log , e ) throw e ; \n\t\t\t} \n\t\t} \n\telse $F1337 } \n"}, {"code": "public boolean isProjected $F72 { \n\treturn projected ; \n\t} \n"}, {"code": "private boolean normalizeAttrValue ( XMLAttributes attributes , int index ) { \n\tboolean leadingSpace = _BOOL ; \n\tboolean spaceStart = _BOOL ; \n\tboolean readingNonSpace = _BOOL ; \n\tint count = NUM00 ; \n\tint eaten = NUM00 ; \n\t$F62203 ( attrValue , attributes , index ) $F1469 $F114317 ( attValue , attrValue ) ; \n\t$F4910 ( fBuffer ) attrValue . getChars ( NUM00 , attrValue . length ( ) , attValue , NUM00 ) ; \n\tfor ( $F1139 ( i , attValue ) ) { \n\t\tif ( attValue [ i ] == NUM00 ) { \n\t\t\tif ( readingNonSpace ) { \n\t\t\t\tspaceStart = _BOOL ; \n\t\t\t\treadingNonSpace = _BOOL ; \n\t\t\t\t} \n\t\t\tif ( spaceStart && ! leadingSpace ) { \n\t\t\t\tspaceStart = _BOOL ; \n\t\t\t\t$F6939 ( fBuffer , attValue , i ) count ++ ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tif ( leadingSpace || ! spaceStart ) { \n\t\t\t\t\teaten ++ ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\treadingNonSpace = _BOOL ; \n\t\t\tspaceStart = _BOOL ; \n\t\t\tleadingSpace = _BOOL ; \n\t\t\t$F6939 ( fBuffer , attValue , i ) count ++ ; \n\t\t\t} \n\t\t} \n\tif $F41319 ( count , fBuffer ) { \n\t\tfBuffer . setLength ( count - NUM00 ) ; \n\t\t} \n\t$F1822 ( newValue , fBuffer ) attributes . setValue ( index , newValue ) ; \n\t$F74867 ( attrValue , newValue ) } \n"}, {"code": "private Shape decodeMarkInterior ( int width , int height ) { \n\tdouble left = width / NUM00 - NUM00 ; \n\tdouble top = height / NUM00 - NUM00 ; \n\t$F2268 ( path ) path . moveTo ( left + NUM00 , top + NUM00 ) ; \n\tpath . lineTo ( left + NUM00 , top + NUM00 ) ; \n\tpath . lineTo ( left + NUM00 , top + NUM00 ) ; \n\t$F2272 ( path ) return path ; \n\t} \n"}, {"code": "public MonotoneSolver ( final ILatticeGraph $F36711 graph , final Lattice lattice , final IStateVector < GraphNode , LatticeElement > startVector , final ITransformationProvider < GraphNode , LatticeElement > transformationProvider , final IGraphWalker < GraphNode , ObjectType > walker ) { \n\t$F826 ( graph ) $F826 ( lattice ) $F826 ( startVector ) $F826 ( transformationProvider ) final List $F36711 nodes = graph . getNodes ( ) ; \n\tif $F15256 ( nodes , startVector ) { \n\t\tthrow new IllegalArgumentException ( String . format ( NUM00 , startVector . size ( ) , nodes . size ( ) ) ) ; \n\t\t} \n\tfor ( final GraphNode node : nodes ) { \n\t\tif ( ! startVector . hasState ( node ) ) $F29526 ( node ) } \n\tthis . graph = graph ; \n\tthis . lattice = lattice ; \n\tthis . state = startVector ; \n\tthis . transformationList = transformationProvider ; \n\tthis . walker = walker ; \n\t} \n"}, {"code": "private Stat preparePortStatInfo ( String nativeId , URI resourceId , long iops , long timeSample ) { \n\tStat ipPortStat = new Stat $F72 ; \n\tipPortStat . setServiceType ( Constants . _File ) ; \n\tipPortStat . setTimeCollected ( timeSample ) ; \n\tipPortStat . setResourceId ( resourceId ) ; \n\tipPortStat . setNativeGuid ( nativeId ) ; \n\tipPortStat . setTotalIOs ( iops ) ; \n\treturn ipPortStat ; \n\t} \n"}, {"code": "public void testInsert3 $F72 throws SQLException { \n\tDatabaseCreator . fillParentTable ( conn ) ; \n\tDatabaseCreator . fillFKStrictTable ( conn ) ; \n\tstatement . execute ( NUM00 + DatabaseCreator . TEST_TABLE5 + NUM00 + NUM00 + DatabaseCreator . FKSTRICT_TABLE + NUM00 ) ; \n\tResultSet r = statement . executeQuery ( NUM00 + DatabaseCreator . TEST_TABLE5 ) ; \n\t$F24630 ( r ) $F92911 ( assertEquals , r ) $F59 ( r ) } \n"}, {"code": "public int compareTo ( AppVersion other ) { \n\tint result = major - other . major ; \n\tif ( result == NUM00 ) { \n\t\tresult = minor - other . minor ; \n\t\t} \n\tif ( result == NUM00 ) { \n\t\tresult = patch - other . patch ; \n\t\t} \n\tif ( result == NUM00 && ( milestone > - NUM00 || other . milestone > - NUM00 ) ) { \n\t\tif ( milestone > - NUM00 ) { \n\t\t\tif ( other . milestone == - NUM00 ) $F44867 ( result ) else { \n\t\t\t\tresult = milestone - other . milestone ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tif ( other . milestone > - NUM00 ) { \n\t\t\t\tresult = NUM00 ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tif ( result == NUM00 && ! ObjectUtil . nullEquals ( modifier , other . modifier ) ) { \n\t\tif ( modifier == null ) { \n\t\t\tresult = NUM00 ; \n\t\t\t} \n\t\telse if ( other . modifier == null ) $F44867 ( result ) else { \n\t\t\tresult = modifier . compareToIgnoreCase ( other . modifier ) ; \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public StreamConsumer ( InputStream stream , String charset ) { \n\t$F189568 ( in , stream ) this . charset = charset ; \n\t$F2346 ( thread ) } \n"}, {"code": "public MediaSize $F14337 ( x , y , units ) { \n\tsuper ( x , y , units ) ; \n\t$F49689 ( x , y ) sizeVector . add ( this ) ; \n\t} \n"}, {"code": "private Peer constructPeerPojo ( final PeerData peerData ) throws PeerException { \n\t$F1832 ( Preconditions , peerData ) try { \n\t\tPeerInfo peerInfo = fromJson ( peerData . getInfo ( ) , PeerInfo . class ) ; \n\t\tif ( $F140091 ( localPeerId , peerData ) ) { \n\t\t\tlocalPeer . setPeerInfo ( peerInfo ) ; \n\t\t\treturn localPeer ; \n\t\t\t} \n\t\tRemotePeerImpl remotePeer = new RemotePeerImpl ( localPeerId , securityManager , peerInfo , messenger , commandResponseListener , messageResponseListener , provider , this ) ; \n\t\tRelationInfoMeta relationInfoMeta = new RelationInfoMeta $F72 ; \n\t\t$F2539 traits = relationInfoMeta . getRelationTraits ( ) ; \n\t\t$F16824 ( traits ) $F16824 ( traits ) $F16824 ( traits ) User peerOwner = identityManager . getUserByKeyId ( identityManager . getPeerOwnerId ( ) ) ; \n\t\tRelationMeta relationMeta = new RelationMeta ( peerOwner , localPeer , remotePeer , localPeer . getKeyId ( ) ) ; \n\t\tRelation relation = relationManager . buildRelation ( relationInfoMeta , relationMeta ) ; \n\t\trelation . setRelationStatus ( RelationStatus . VERIFIED ) ; \n\t\trelationManager . saveRelation ( relation ) ; \n\t\treturn remotePeer ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new PeerException ( NUM00 , e ) ; \n\t\t} \n\t} \n"}, {"code": "public void loadWorkspaceContents ( String xml ) throws BlocklyParserException { \n\tloadWorkspaceContents ( $F107841 ( xml ) ) ; \n\t} \n"}, {"code": "private boolean compareAndDecrementWorkerCount ( int expect ) { \n\treturn ctl . compareAndSet ( expect , expect - NUM00 ) ; \n\t} \n"}, {"code": "public boolean load ( String fileLocation , int type ) { \n\t$F9303 ( mHasLoaded , _BOOL ) String shaderCode ; \n\ttry { \n\t\tshaderCode = ShaderUtils . getStringFromFileInAssets ( mContext , fileLocation , _BOOL ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\t$F301 ( e ) mIsCompiled = _BOOL ; \n\t\treturn _BOOL ; \n\t\t} \n\tmHasLoaded = _BOOL ; \n\tmShaderId = GLES20 . glCreateShader ( type ) ; \n\tif ( mShaderId == NUM00 ) { \n\t\tString msg = ( type == GLES20 . GL_VERTEX_SHADER ? NUM00 : NUM00 ) ; \n\t\t$F110901 ( Log , TAG , msg ) return _BOOL ; \n\t\t} \n\tGLES20 . glShaderSource ( mShaderId , shaderCode ) ; \n\tGLES20 . glCompileShader ( mShaderId ) ; \n\t$F11844 ( compileStatus ) GLES20 . glGetShaderiv ( mShaderId , GLES20 . GL_COMPILE_STATUS , compileStatus , NUM00 ) ; \n\tmIsCompiled = ( compileStatus [ NUM00 ] == GLES20 . GL_TRUE ) ; \n\tif ( ! mIsCompiled ) { \n\t\tString compileError = GLES20 . glGetShaderInfoLog ( mShaderId ) ; \n\t\tLog . e ( TAG , compileError ) ; \n\t\tGLES20 . glDeleteShader ( mShaderId ) ; \n\t\t} \n\treturn mIsCompiled && mHasLoaded ; \n\t} \n"}, {"code": "public void addChild ( PdfLayer childLayer ) { \n\tif ( childLayer . parent != null ) $F824 childLayer . parent = this ; \n\t$F21432 ( children ) children . add ( childLayer ) ; \n\t} \n"}, {"code": "protected void moveRandomly ( OMPoint point , double factor , Projection proj ) { \n\tdouble hor = Math . random ( ) - NUM00 ; \n\tdouble vert = Math . random ( ) - NUM00 ; \n\tPoint2D mapPoint = proj . forward ( point . getLat ( ) , point . getLon ( ) ) ; \n\tmapPoint . setLocation ( mapPoint . getX ( ) + ( hor * factor ) , mapPoint . getY ( ) + ( vert * factor ) ) ; \n\tPoint2D llp = proj . inverse ( mapPoint ) ; \n\tpoint . setLat ( llp . getY ( ) ) ; \n\tpoint . setLon ( llp . getX ( ) ) ; \n\t} \n"}, {"code": "private void initializeContext $F72 throws IOException { \n\t$F27462 ( workingDir , System ) File dataset = FileUtils . getFile ( workingDir + NUM00 ) ; \n\tFile log4jFile = FileUtils . getFile ( workingDir + NUM00 ) ; \n\t$F94120 ( datasetFolder , destinationFolder ) $F94120 ( log4jFolder , destinationFolder ) $F1907 ( dataset ) $F1907 ( log4jFile ) FileUtils . copyFileToDirectory ( dataset , datasetFolder ) ; \n\tFileUtils . copyFileToDirectory ( log4jFile , log4jFolder ) ; \n\t} \n"}, {"code": "protected boolean isTokenChar ( char ch ) { \n\tif $F255966 ( Character , ch ) return _BOOL ; \n\tif ( Character . isISOControl ( ch ) ) return _BOOL ; \n\t$F7450 ( isHttpSeparator , ch , _BOOL ) return _BOOL ; \n\t} \n"}, {"code": "public static int parseInt ( FXGNode node , String value , String name ) { \n\ttry $F75349 ( Integer , value ) catch ( NumberFormatException e ) { \n\t\tthrow new FXGException ( node . getStartLine ( ) , node . getStartColumn ( ) , NUM00 , name , value ) ; \n\t\t} \n\t} \n"}, {"code": "public static double invSqrtQuick ( final double value ) { \n\tif ( USE_JDK_MATH ) { \n\t\treturn NUM00 / Math . sqrt ( value ) ; \n\t\t} \n\treturn Double . longBitsToDouble ( NUM00 - ( Double . doubleToRawLongBits ( value ) > > NUM00 ) ) ; \n\t} \n"}, {"code": "public void close $F72 throws IOException { \n\t$F59 ( articleIdxWriter ) $F59 ( chronoIdxWriter ) $F59 ( revisionIdxWriter ) } \n"}, {"code": "private final $F96 zeroExtend $F97 ( dataToPad ) { \n\tassert null != dataToPad ; \n\tfinal int targetLength = NUM00 ; \n\tif ( targetLength <= dataToPad . length ) return dataToPad ; \n\tbyte padded [ ] = new byte [ targetLength ] ; \n\tfor ( $F1139 ( i , dataToPad ) ) padded [ i ] = dataToPad [ i ] ; \n\tfor ( int i = dataToPad . length ; \n\ti < padded . length ; \n\ti ++ ) padded [ i ] = $F19905 ; \n\treturn padded ; \n\t} \n"}, {"code": "public void applyFromResolveInfo ( PackageManager pm , ResolveInfo info , WidgetPreviewLoader loader ) { \n\tmInfo = info ; \n\tCharSequence label = info . loadLabel ( pm ) ; \n\tmWidgetName . setText ( label ) ; \n\tmWidgetDims . setText ( String . format ( mDimensionsFormatString , NUM00 , NUM00 ) ) ; \n\tmWidgetPreviewLoader = loader ; \n\t} \n"}, {"code": "private static boolean isCertificateEntry ( String alias ) throws KeyStoreException { \n\treturn sKeyStore . isCertificateEntry ( alias ) ; \n\t} \n"}, {"code": "public void test_unwrap_06 $F72 { \n\tString host = NUM00 ; \n\tint port = NUM00 ; \n\t$F30907 ( bbA , ByteBuffer ) $F30909 ( bb , ByteBuffer ) SSLEngine sse = getEngine ( host , port ) ; \n\tsse . setUseClientMode ( _BOOL ) ; \n\ttry { \n\t\tSSLEngineResult res = sse . unwrap ( bb , bbA , NUM00 , bbA . length ) ; \n\t\t$F128468 ( assertEquals , res ) $F128471 ( assertEquals , res ) } \n\t$F17395 ( fail , ex ) } \n"}, {"code": "public static Window windowForWordInPosition ( int windowSize , int wordPos , $F3803 sentence ) { \n\t$F24645 ( window ) $F24645 ( onlyTokens ) int contextSize = ( int ) Math . floor ( ( windowSize - NUM00 ) / NUM00 ) ; \n\tfor ( int i = wordPos - contextSize ; \n\ti <= wordPos + contextSize ; \n\ti ++ ) { \n\t\tif ( i < NUM00 ) $F18793 ( window ) else if $F6389 ( i , sentence ) $F18793 ( window ) else { \n\t\t\t$F18208 ( onlyTokens , sentence , i ) $F18208 ( window , sentence , i ) } \n\t\t} \n\tString wholeSentence = StringUtils . join ( sentence ) ; \n\tString window2 = StringUtils . join ( onlyTokens ) ; \n\t$F12747 ( begin , wholeSentence , window2 ) $F12749 ( end , begin , window2 ) return new Window ( window , begin , end ) ; \n\t} \n"}, {"code": "private void fillIn ( ClassSymbol c ) { \n\tif ( completionFailureName == c . fullname ) { \n\t\tthrow new CompletionFailure ( c , NUM00 ) ; \n\t\t} \n\tcurrentOwner = c ; \n\t$F725 ( warnedAttrs ) JavaFileObject classfile = c . classfile ; \n\tif ( classfile != null ) { \n\t\tJavaFileObject previousClassFile = currentClassFile ; \n\t\ttry { \n\t\t\tif ( filling ) { \n\t\t\t\tAssert . error ( NUM00 + classfile . toUri ( ) + NUM00 + previousClassFile ) ; \n\t\t\t\t} \n\t\t\tcurrentClassFile = classfile ; \n\t\t\tif ( verbose ) { \n\t\t\t\tlog . printVerbose ( $F22435 ( currentClassFile ) ) ; \n\t\t\t\t} \n\t\t\tif ( classfile . getKind ( ) == JavaFileObject . Kind . CLASS ) { \n\t\t\t\tfilling = _BOOL ; \n\t\t\t\ttry { \n\t\t\t\t\tbp = NUM00 ; \n\t\t\t\t\tbuf = readInputStream ( buf , classfile . openInputStream ( ) ) ; \n\t\t\t\t\treadClassFile ( c ) ; \n\t\t\t\t\tif $F133343 ( missingTypeVariables , foundTypeVariables ) { \n\t\t\t\t\t\t$F17124 missing = missingTypeVariables ; \n\t\t\t\t\t\t$F17124 found = foundTypeVariables ; \n\t\t\t\t\t\tmissingTypeVariables = List . nil ( ) ; \n\t\t\t\t\t\tfoundTypeVariables = List . nil ( ) ; \n\t\t\t\t\t\tfilling = _BOOL ; \n\t\t\t\t\t\tClassType ct = ( ClassType ) currentOwner . type ; \n\t\t\t\t\t\tct . supertype_field = types . subst ( ct . supertype_field , missing , found ) ; \n\t\t\t\t\t\tct . interfaces_field = types . subst ( ct . interfaces_field , missing , found ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse if ( missingTypeVariables . isEmpty ( ) != foundTypeVariables . isEmpty ( ) ) { \n\t\t\t\t\t\tName name = missingTypeVariables . head . tsym . name ; \n\t\t\t\t\t\tthrow badClassFile ( NUM00 , name ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\tfinally { \n\t\t\t\t\tmissingTypeVariables = List . nil ( ) ; \n\t\t\t\t\tfoundTypeVariables = List . nil ( ) ; \n\t\t\t\t\tfilling = _BOOL ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tif ( sourceCompleter != null ) { \n\t\t\t\t\tsourceCompleter . complete ( c ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tthrow new IllegalStateException ( NUM00 + classfile . toUri ( ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F665 } \n\t\tcatch ( IOException ex ) { \n\t\t\tthrow badClassFile ( $F10629 ( ex ) ) ; \n\t\t\t} \n\t\tfinally { \n\t\t\tcurrentClassFile = previousClassFile ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tJCDiagnostic diag = diagFactory . fragment ( NUM00 , c . flatname ) ; \n\t\tthrow newCompletionFailure ( c , diag ) ; \n\t\t} \n\t} \n"}, {"code": "public void enable $F72 { \n\t$F14699 entries = removeIntersectedEntries ( tree . getSelectedEntries ( ) ) ; \n\tboolean enable = _BOOL ; \n\tfor ( Entry entry : entries ) { \n\t\tif ( entry == null ) $F3468 ( enable , _BOOL ) if $F78643 ( requiredSelectionType , entry ) $F3468 ( enable , _BOOL ) if ( needsWriteAccess && entry . isReadOnly ( ) ) $F3468 ( enable , _BOOL ) } \n\t$F159338 ( entries , enable , _BOOL ) setEnabled ( enable ) ; \n\t} \n"}, {"code": "public String toString $F72 { \n\t$F280 ( buffer ) if $F89491 ( getName ) $F39640 ( buffer , getName ) $F84 ( buffer ) if $F89491 ( getEnclosingTypeName ) $F39640 ( buffer , getEnclosingTypeName ) $F84 ( buffer ) if $F89491 ( getSourceName ) $F39640 ( buffer , getSourceName ) $F92 ( buffer ) } \n"}, {"code": "protected void mark $F72 throws CompilationFailedException { \n\tapplyToSourceUnits ( mark ) ; \n\t} \n"}, {"code": "private boolean labelToKeepRec ( Node v , $F11868 ids , NodeSet keep ) { \n\tboolean hasBelow = _BOOL ; \n\tint id = $F149624 ( v ) ; \n\tif ( $F10470 ( ids ) || ids . contains ( id ) ) hasBelow = _BOOL ; \n\tfor ( $F149631 ( e , v ) ) { \n\t\tNode w = e . getTarget ( ) ; \n\t\tif ( labelToKeepRec ( w , ids , keep ) ) hasBelow = _BOOL ; \n\t\t} \n\tif ( hasBelow ) keep . add ( v ) ; \n\treturn hasBelow ; \n\t} \n"}, {"code": "public void putExternalProperty ( SSOToken clientToken , String key , String value ) throws SessionException { \n\ttry { \n\t\tsessionUtilsWrapper . checkPermissionToSetProperty ( clientToken , key , value ) ; \n\t\t} \n\tcatch ( SessionException se ) { \n\t\tfireSessionEvent ( SessionEventType . PROTECTED_PROPERTY ) ; \n\t\tsessionLogging . logEvent ( toSessionInfo ( ) , SessionEventType . PROTECTED_PROPERTY ) ; \n\t\tthrow se ; \n\t\t} \n\tinternalPutProperty ( key , value ) ; \n\t$F18126 ( debug ) } \n"}, {"code": "void addEdge ( MethodParameter in , MethodParameter out ) { \n\tSet < MethodParameter > outs = graph . get ( in ) ; \n\tif ( outs == null ) $F327697 ( outs , graph , in ) outs . add ( out ) ; \n\t} \n"}, {"code": "public static $F2027 randomNumber ( int n ) { \n\t$F4120 ( num , n ) for ( $F1139 ( i , num ) ) { \n\t\tnum [ i ] = ( int ) ( $F32605 ( rGen ) ) ; \n\t\t} \n\treturn num ; \n\t} \n"}, {"code": "public boolean isDeviceTV ( Context context ) { \n\tif ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . LOLLIPOP ) { \n\t\tUiModeManager uiManager = ( UiModeManager ) context . getSystemService ( Context . UI_MODE_SERVICE ) ; \n\t\treturn uiManager != null && uiManager . getCurrentModeType ( ) == Configuration . UI_MODE_TYPE_TELEVISION ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "protected void rcptToAuthors ( final RecipientType rt ) { \n\tfor ( final Account . Id id : authors ) { \n\t\tadd ( rt , id ) ; \n\t\t} \n\t} \n"}, {"code": "public Object createShapeData ( Shape shape ) $F1337 "}, {"code": "private ProtectionSet createProtectionSet ( RecoverPointVolumeIngestionContext volumeContext ) { \n\tUnManagedProtectionSet umpset = volumeContext . getUnManagedProtectionSet ( ) ; \n\tProtectionSet pset = VolumeIngestionUtil . findOrCreateProtectionSet ( volumeContext , volumeContext . getUnmanagedVolume ( ) , umpset , _dbClient ) ; \n\tvolumeContext . setManagedProtectionSet ( pset ) ; \n\treturn pset ; \n\t} \n"}, {"code": "public synchronized void dispose $F72 { \n\t$F7254 ( isDisposed ) isDisposed = _BOOL ; \n\tArrayList < PooledConnection > list = recycledConnections ; \n\tfor ( $F12534 ( i , size , list ) ) $F80218 ( closeConnection , list , i ) } \n"}, {"code": "public static String appendParameter ( CtClass type , String descriptor ) { \n\t$F1384 ( i , descriptor ) if ( i < NUM00 ) return descriptor ; \n\telse { \n\t\t$F280 ( newdesc ) $F6937 ( newdesc , descriptor , i ) toDescriptor ( newdesc , type ) ; \n\t\t$F13047 ( newdesc , descriptor , i ) $F92 ( newdesc ) } \n\t} \n"}, {"code": "public void writeTo $F5474 ( bytes , offset ) throws IOException { \n\tflush ( ) ; \n\tfinal long end = file . length ; \n\tlong pos = NUM00 ; \n\tint buffer = NUM00 ; \n\tint bytesUpto = offset ; \n\twhile ( pos < end ) { \n\t\tint length = BUFFER_SIZE ; \n\t\tlong nextPos = pos + length ; \n\t\tif ( nextPos > end ) { \n\t\t\t$F443511 ( length , end , pos ) } \n\t\tSystem . arraycopy ( file . getBuffer ( buffer ++ ) , NUM00 , bytes , bytesUpto , length ) ; \n\t\tbytesUpto += length ; \n\t\tpos = nextPos ; \n\t\t} \n\t} \n"}, {"code": "protected int calcnCluster $F72 $F1083 "}, {"code": "public static void validateServiceName ( String serviceCode , String serviceName ) { \n\tif $F34844 ( serviceName , serviceCode ) { \n\t\tthrow new CodedException ( X_INCONSISTENT_HEADERS , NUM00 + NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "protected static void initCMYKColorspace $F72 { \n\tif ( ICCProfileForRGB == null ) { \n\t\trgbModel = new ComponentColorModel ( rgbCS , $F183429 , _BOOL , _BOOL , ColorModel . OPAQUE , DataBuffer . TYPE_BYTE ) ; \n\t\t} \n\telse { \n\t\tfinal int compCount = rgbCS . getNumComponents ( ) ; \n\t\t$F64664 ( values , compCount ) for ( $F119 ( i , compCount ) ) $F5629 ( values , i ) rgbModel = new ComponentColorModel ( rgbCS , values , _BOOL , _BOOL , ColorModel . OPAQUE , DataBuffer . TYPE_BYTE ) ; \n\t\t} \n\tfinal FastColorSpaceCMYK cmykCS = new FastColorSpaceCMYK $F72 ; \n\tCSToRGB = new ColorConvertOp ( cmykCS , rgbCS , ColorSpaces . hints ) ; \n\t} \n"}, {"code": "private void addNotificationCategorySeparator ( JPanel panel ) { \n\tJSeparator jsep = new JSeparator ( SwingConstants . HORIZONTAL ) ; \n\tjsep . setMaximumSize ( new Dimension ( Short . MAX_VALUE , NUM00 ) ) ; \n\tpanel . add ( jsep ) ; \n\t} \n"}, {"code": "public void clearDraggedOperators $F72 { \n\tthis . draggedOperators = Collections . unmodifiableList ( Collections . < Operator > $F9639 ) ; \n\t} \n"}, {"code": "public FakeClock resetTime $F72 { \n\tfakeNowMs . set ( baseTimeMs ) ; \n\treturn this ; \n\t} \n"}, {"code": "public void removeUpdateListener ( AnimatorUpdateListener listener ) $F49005 ( mUpdateListeners , listener ) "}, {"code": "public GSERParser ( CharSequence value ) { \n\tReject . checkNotNull ( value ) ; \n\tthis . gserValue = value . toString ( ) ; \n\tthis . pos = NUM00 ; \n\tthis . length = value . length ( ) ; \n\t} \n"}, {"code": "public Slice ( double start , double end , boolean visible ) $F9180 ( this , start , end , visible ) "}, {"code": "public static void injectToTarget ( Object target , Bundle data ) { \n\t$F57400 ( target , data ) ParcelInjector injector ; \n\ttry { \n\t\t$F5998 ( injector , getInjectorByClass , target ) ; \n\t\tinjector . injectDataToTarget ( target , data ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new RuntimeException ( String . format ( $F10629 ( e ) ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "public static boolean areBackendInitiators ( $F15661 initiators ) { \n\tboolean backend = _BOOL ; \n\tfor ( Initiator initiator : initiators ) { \n\t\tif ( ! NullColumnValueGetter . isNullURI ( initiator . getHost ( ) ) && URIUtil . isType ( initiator . getHost ( ) , $F2522 ) ) $F3468 ( backend , _BOOL ) } \n\treturn backend ; \n\t} \n"}, {"code": "public boolean containsValue ( Object value ) { \n\treturn map . containsValue ( value ) ; \n\t} \n"}, {"code": "$F9749 ( namespace , attName , attValue , xmlWriter , registerPrefix ) "}, {"code": "public boolean hasSkins $F72 { \n\treturn $F48836 ( System ) || $F48836 ( System ) ; \n\t} \n"}, {"code": "public String toString $F72 { \n\t$F83 ( builder ) if ( type != null ) $F86383 ( name , builder , attributes ) $F92 ( builder ) } \n"}, {"code": "public void makeImmutable $F72 { \n\tif ( ! isImmutable ) { \n\t\toverflowEntries = overflowEntries . isEmpty ( ) ? Collections . $F9340 $F100460 : Collections . unmodifiableMap ( overflowEntries ) ; \n\t\tisImmutable = _BOOL ; \n\t\t} \n\t} \n"}, {"code": "protected void parseNames $F72 { \n\twhile ( reader . hasNextCharacter ( ) ) { \n\t\tfinal char character = next ( ) ; \n\t\tif $F104645 ( Strings , character ) { \n\t\t\taddName ( ) ; \n\t\t\t$F598 } \n\t\telse if ( character == blockOpening ) $F151805 ( addName ) else $F288 ( builder , character ) } \n\tif $F4329 ( GdxArrays , tags ) $F1210 ( throwException ) } \n"}, {"code": "protected void writeZip64CentralDirectory $F72 throws IOException { \n\tif ( zip64Mode == Zip64Mode . Never ) $F932 if ( ! hasUsedZip64 && ( cdOffset >= ZIP64_MAGIC || cdLength >= ZIP64_MAGIC || entries . size ( ) >= ZIP64_MAGIC_SHORT ) ) { \n\t\thasUsedZip64 = _BOOL ; \n\t\t} \n\t$F24126 ( hasUsedZip64 ) long offset = written ; \n\twriteOut ( ZIP64_EOCD_SIG ) ; \n\twriteOut ( ZipEightByteInteger . getBytes ( SHORT + SHORT + WORD + WORD + DWORD + DWORD + DWORD + DWORD ) ) ; \n\twriteOut ( ZipShort . getBytes ( ZIP64_MIN_VERSION ) ) ; \n\twriteOut ( ZipShort . getBytes ( ZIP64_MIN_VERSION ) ) ; \n\twriteOut ( LZERO ) ; \n\twriteOut ( LZERO ) ; \n\t$F96 num = ZipEightByteInteger . getBytes ( entries . size ( ) ) ; \n\twriteOut ( num ) ; \n\twriteOut ( num ) ; \n\twriteOut ( ZipEightByteInteger . getBytes ( cdLength ) ) ; \n\twriteOut ( ZipEightByteInteger . getBytes ( cdOffset ) ) ; \n\twriteOut ( ZIP64_EOCD_LOC_SIG ) ; \n\twriteOut ( LZERO ) ; \n\twriteOut ( ZipEightByteInteger . getBytes ( offset ) ) ; \n\twriteOut ( ONE ) ; \n\t} \n"}, {"code": "public boolean isCacheValid ( int row ) $F8314 ( m_valid , row ) "}, {"code": "public void finish $F72 throws IOException $F9099 ( checkClosed , write ) "}, {"code": "public final void readFully $F24576 ( b , off , len ) throws $F3258 { \n\tif ( len < NUM00 ) $F81129 int n = NUM00 ; \n\twhile ( n < len ) { \n\t\tint count = read ( b , off + n , len - n ) ; \n\t\t$F5148 ( count ) n += count ; \n\t\t} \n\t} \n"}, {"code": "public SVGRasterizer ( InputStream istream ) { \n\tthis . input = new TranscoderInput ( istream ) ; \n\t} \n"}, {"code": "private static $F44535 directExecute ( Runnable runnable , int delay ) { \n\t$F44535 future = null ; \n\tif ( delay > NUM00 ) { \n\t\tif ( ! ( executor instanceof ScheduledExecutorService ) ) $F825 ScheduledExecutorService scheduledExecutorService = ( ScheduledExecutorService ) executor ; \n\t\t$F44542 ( future , scheduledExecutorService , runnable , delay , TimeUnit ) ; \n\t\t} \n\telse { \n\t\tif ( executor instanceof ExecutorService ) { \n\t\t\tExecutorService executorService = ( ExecutorService ) executor ; \n\t\t\tfuture = executorService . submit ( runnable ) ; \n\t\t\t} \n\t\telse $F44547 ( executor , runnable ) } \n\treturn future ; \n\t} \n"}, {"code": "$F1 public void onPatchVersionCheckFail ( File patchFile , SharePatchInfo oldPatchInfo , String patchFileVersion , boolean isUpgradePatch ) { \n\tTinkerLog . i ( TAG , NUM00 , patchFile . getAbsolutePath ( ) , patchFileVersion , isUpgradePatch ) ; \n\t} \n"}, {"code": "public void init ( boolean forEncryption , CipherParameters params ) throws IllegalArgumentException { \n\tif ( ! ( params instanceof ParametersWithIV ) ) $F825 $F5621 ( ivParams , params ) $F5623 ( iv , ivParams ) if ( iv == null || iv . length != NUM00 ) $F825 if ( ! ( ivParams . getParameters ( ) instanceof KeyParameter ) ) $F825 KeyParameter key = ( KeyParameter ) ivParams . getParameters ( ) ; \n\tworkingIV = new byte [ key . getKey ( ) . length ] ; \n\tworkingKey = new byte [ key . getKey ( ) . length ] ; \n\t$F3936 ( lfsr , STATE_SIZE ) $F3936 ( nfsr , STATE_SIZE ) $F46945 ( out ) $F7057 ( System , iv , workingIV ) System . arraycopy ( key . getKey ( ) , NUM00 , workingKey , NUM00 , key . getKey ( ) . length ) ; \n\treset ( ) ; \n\t} \n"}, {"code": "GridMemcachedMessage $F72 $F845 "}, {"code": "public ExtensionForcedUser $F72 $F9099 ( super , initialize ) "}, {"code": "private String replacePlaceholders $F5805 ( query , replacements ) { \n\tString resultQuery = query ; \n\tfor ( $F19318 ( entry , replacements ) ) { \n\t\tresultQuery = resultQuery . replace ( $F15245 ( entry ) ) ; \n\t\t} \n\treturn resultQuery ; \n\t} \n"}, {"code": "protected int readFully ( InputStream in , byte $F76061 ) throws $F3258 { \n\tfor ( $F1139 ( i , buffer ) ) { \n\t\t$F7468 ( q , in ) $F101463 ( q , i ) $F8214 ( buffer , i , q ) } \n\treturn buffer . length ; \n\t} \n"}, {"code": "public void destroyBucket ( AutoMixBucket bucket ) { \n\tSharedPreferences prefs = getPrefs ( ) ; \n\t$F37526 ( editor , prefs ) $F2689 set = new $F2611 ( prefs . getStringSet ( PREF_BUCKETS_IDS , new $F32030 $F72 ) ) ; \n\tset . remove ( bucket . getSessionId ( ) ) ; \n\teditor . putStringSet ( PREF_BUCKETS_IDS , set ) ; \n\t$F37527 ( editor ) mBuckets . remove ( bucket ) ; \n\t} \n"}, {"code": "public void clearChanged $F72 $F24242 ( changed , _BOOL ) "}, {"code": "public static $F131 convertParams ( $F131 source , $F63826 ( target ) ) { \n\t$F193824 ( converted , target ) for ( $F1139 ( i , target ) ) { \n\t\tconverted [ i ] = convert ( source [ i ] , target [ i ] ) ; \n\t\t} \n\treturn converted ; \n\t} \n"}, {"code": "private void rProbeAndAddHopsToCandidateSet ( Hop hop , HashSet < Hop > probeSet , HashSet < Pair < Hop , Hop > > candSet ) { \n\tif ( hop . getVisited ( ) == VisitStatus . DONE ) $F665 if ( hop . getInput ( ) != null ) for ( Hop c : hop . getInput ( ) ) { \n\t\tif $F2200 ( probeSet , c ) rProbeAndAddHopsToCandidateSet ( c , probeSet , candSet ) ; \n\t\telse { \n\t\t\tcandSet . add ( new Pair < Hop , Hop > ( hop , c ) ) ; \n\t\t\t} \n\t\t} \n\thop . setVisited ( VisitStatus . DONE ) ; \n\t} \n"}, {"code": "protected void parse ( DataInputStream stream ) throws Exception { \n\t$F5961 ( value , stream ) } \n"}, {"code": "$F3803 asList $F72 { \n\tif ( more ) { \n\t\tlist . set ( $F2281 ( list ) , NUM00 ) ; \n\t\t} \n\t$F26666 ( Collections , list ) } \n"}, {"code": "public void testNotNeg $F72 { \n\t$F53390 int aSign = - NUM00 ; \n\tbyte $F3018 = { \n\t\tNUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 } \n\t; \n\t$F3023 ( aNumber , aSign , aBytes ) BigInteger result = aNumber . not ( ) ; \n\t$F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) } \n"}, {"code": "public CacheStatResource ( String resourceIdentifier , CacheResource cacheResource ) { \n\tsuper ( resourceIdentifier ) ; \n\tthis . cacheResource = cacheResource ; \n\trelativeCacheStats = cacheResource . getCacheStats ( ) ; \n\t} \n"}, {"code": "public $F42106 addTargetVolumeFullCopies $F72 { \n\t$F28584 fullCopies = Lists . newArrayList ( ) ; \n\t$F42106 $F8690 ( fullCopiesMap ) ; \n\tURI targetCG = null ; \n\tfor ( URI volumeId : uris ( volumeIds ) ) { \n\t\t$F141871 ( targets , getTargets , volumeId ) for ( URI target : targets ) { \n\t\t\t$F5178 ( targetCG , getConsistencyGroup , target ) $F141871 ( volumeFullCopies , getFullCopies , target ) fullCopies . addAll ( volumeFullCopies ) ; \n\t\t\tfullCopiesMap . put ( target , volumeFullCopies ) ; \n\t\t\t} \n\t\t} \n\tif ( $F1030 ( fullCopies ) && targetCG != null ) { \n\t\tBlockStorageUtils . addVolumesToConsistencyGroup ( targetCG , fullCopies ) ; \n\t\t} \n\treturn fullCopiesMap ; \n\t} \n"}, {"code": "WeatherAttribute ( int max , String ... desc ) { \n\tmaxValue = max ; \n\tvalue = Rand . rand ( max + NUM00 ) ; \n\tthis . desc = desc ; \n\t} \n"}, {"code": "protected ClassLoader ( ClassLoader parentLoader ) { \n\t$F8108 ( sc , System ) if ( sc != null ) { \n\t\tsc . checkCreateClassLoader ( ) ; \n\t\t} \n\tparentClassLoader = parentLoader ; \n\tdefinedPackages = new HashMap < String , Package > $F72 ; \n\tloadedClasses = new HashMap < String , $F6969 > $F72 ; \n\tpackageCertificates = new Hashtable < String , $F65927 > $F72 ; \n\t} \n"}, {"code": "static public double log10 ( double inValue ) { \n\treturn $F49357 ( Math , inValue ) ; \n\t} \n"}, {"code": "void updateFeatureCounts ( $F2027 translationIds , List < List < RichTranslation $F57784 > > nbestLists ) { \n\tfor ( $F1139 ( i , translationIds ) ) { \n\t\t$F2695 ( features ) for ( RichTranslation $F57784 trans : nbestLists . get ( i ) ) { \n\t\t\tfor ( FeatureValue $F4 f : trans . features ) { \n\t\t\t\tfeatures . add ( f . name ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tsynchronized ( clippedFeatureIndex ) { \n\t\t\tfor ( String fName : features ) { \n\t\t\t\t$F86394 ( ids , clippedFeatureIndex , fName ) if ( ids == null ) { \n\t\t\t\t\t$F129524 ( ids ) ; \n\t\t\t\t\tclippedFeatureIndex . put ( fName , ids ) ; \n\t\t\t\t\t} \n\t\t\t\tif $F10255 ( ids , minFeatureCount ) $F24617 ( ids , translationIds , i ) } \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F3874 ( tag , msg , args , sLevel , LEVEL_DEBUG , String , Log ) "}, {"code": "private void addNativeExpressAds $F72 { \n\tfor ( int i = NUM00 ; \n\ti <= mRecyclerViewItems . size ( ) ; \n\ti += ITEMS_PER_AD ) { \n\t\tfinal NativeExpressAdView adView = new NativeExpressAdView ( MainActivity . this ) ; \n\t\tmRecyclerViewItems . add ( i , adView ) ; \n\t\t} \n\t} \n"}, {"code": "protected boolean accept ( final IChangeRecord record ) { \n\treturn _BOOL ; \n\t} \n"}, {"code": "public final T allocate $F72 { \n\tAtomicInteger topRef = _top ; \n\twhile ( _BOOL ) { \n\t\t$F87905 ( top , topRef ) if ( top <= NUM00 ) $F1337 else if ( topRef . compareAndSet ( top , top - NUM00 ) ) { \n\t\t\tT value = _freeStack . getAndSet ( top - NUM00 , null ) ; \n\t\t\t$F21525 ( value ) } \n\t\t} \n\t} \n"}, {"code": "$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel ) "}, {"code": "public void putResponseGetAllResources $F24643 ( resources ) { \n\t$F980 ( logger ) ResourceSet resourceSet = new ResourceSet $F72 ; \n\tfor ( String res : resources ) { \n\t\tRemoteResource resource = gson . fromJson ( res , RemoteResource . class ) ; \n\t\tresource . setResourcePoolConnector ( this ) ; \n\t\tresourceSet . add ( resource ) ; \n\t\t} \n\tsynchronized ( getAllResourceResponse ) { \n\t\tgetAllResourceResponse . add ( resourceSet ) ; \n\t\t$F8071 ( getAllResourceResponse ) } \n\t} \n"}, {"code": "public static $F10651 toAvPairMap ( $F11290 ( names ) , final String value ) { \n\tif ( value == null ) { \n\t\treturn Collections . EMPTY_MAP ; \n\t\t} \n\tif $F4251 ( names ) { \n\t\treturn new HashMap $F72 ; \n\t\t} \n\tfinal $F10651 map = new HashMap < String , $F2689 > $F716 ( names ) ; \n\tfinal $F2689 set = new $F2690 $F989 ; \n\tset . add ( value ) ; \n\tfor ( final String name : names ) $F1717 ( map , name , set ) return map ; \n\t} \n"}, {"code": "public PrefixTagger ( MaxentTagger maxentTagger ) { \n\tsuper ( maxentTagger ) ; \n\tthis . leftWindow = leftWindow ( ) ; \n\tthis . rightWindow = rightWindow ( ) ; \n\tthis . offset = leftWindow ( ) ; \n\t} \n"}, {"code": "$F1 public void performRequest ( String request ) { \n\t$F87844 ( request , stop ) } \n"}, {"code": "$F1 public $F987 listOptions $F72 { \n\t$F994 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F9010 ( newVector , Collections , super ) $F1007 ( newVector ) } \n"}, {"code": "public synchronized void kill $F72 { \n\trunning = _BOOL ; \n\tclosed = _BOOL ; \n\t$F29053 ( STDIN ) try $F17624 ( process ) $F3957 } \n"}, {"code": "private Iterable $F9183 splitArray $F23416 ( arr ) { \n\t$F30975 ( len1 , arr ) int len2 = len1 + arr . length % NUM00 ; \n\t$F4120 ( a1 , len1 ) $F4120 ( a2 , len2 ) $F135 ( System , arr , a1 , len1 ) $F21535 ( System , arr , len1 , a2 , len2 ) return Arrays . asList ( a1 , a2 ) ; \n\t} \n"}, {"code": "public void put ( E e ) throws InterruptedException { \n\tcheckNotNull ( e ) ; \n\t$F677 ( lock , this ) $F678 ( lock ) try { \n\t\twhile ( count == items . length ) $F681 ( notFull ) enqueue ( e ) ; \n\t\t} \n\t$F796 ( lock ) } \n"}, {"code": "$F122843 $F32043 public void shouldCaptureQueryEventData $F72 throws Exception { \n\tstartClient ( null ) ; \n\tcounters . consumeAll ( NUM00 , TimeUnit . SECONDS ) ; \n\tList < QueryEventData > allQueryEvents = recordedEventData ( QueryEventData . class , - NUM00 ) ; \n\t$F22620 ( allQueryEvents ) } \n"}, {"code": "private List < ValidationError > checkForNoRatesPresent $F72 { \n\tif $F171402 ( overheadRates ) return Arrays . asList ( new ValidationError $F6600 ) ; \n\telse $F1274 } \n"}, {"code": "public void modifyExport ( String id , String zoneName , IsilonExport exp ) throws IsilonException { \n\tString uriWithZoneName = getURIWithZoneName ( id , zoneName ) ; \n\tmodify ( _baseUrl . resolve ( URI_NFS_EXPORTS ) , uriWithZoneName , NUM00 , exp ) ; \n\t} \n"}, {"code": "public double measureNumIterations $F72 $F1652 ( m_Classifiers ) "}, {"code": "public void markPotentiallyUnknownBit ( LocalVariableBinding local ) { \n\tif ( this != DEAD_END ) { \n\t\tthis . tagBits |= NULL_FLAG_MASK ; \n\t\tint position ; \n\t\tlong mask ; \n\t\tif ( ( position = local . id + this . maxFieldCount ) < BitCacheSize ) { \n\t\t\tmask = NUM00 < < position ; \n\t\t\tisTrue ( ( this . nullBit1 & mask ) == NUM00 , NUM00 ) ; \n\t\t\tthis . nullBit4 |= mask ; \n\t\t\tif ( COVERAGE_TEST_FLAG ) { \n\t\t\t\tif ( CoverageTestId == NUM00 ) { \n\t\t\t\t\tthis . nullBit4 = ~ NUM00 ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tint vectorIndex = ( position / BitCacheSize ) - NUM00 ; \n\t\t\tif ( this . extra == null ) { \n\t\t\t\tint length = vectorIndex + NUM00 ; \n\t\t\t\tthis . extra = new long [ extraLength ] [ ] ; \n\t\t\t\tfor ( $F119 ( j , extraLength ) ) { \n\t\t\t\t\tthis . extra [ j ] = new long [ length ] ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tint oldLength ; \n\t\t\t\tif ( vectorIndex >= ( oldLength = $F239428 ( this ) ) ) { \n\t\t\t\t\tfor ( $F119 ( j , extraLength ) ) { \n\t\t\t\t\t\tSystem . arraycopy ( this . extra [ j ] , NUM00 , ( this . extra [ j ] = new long [ vectorIndex + NUM00 ] ) , NUM00 , oldLength ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tmask = NUM00 < < ( position % BitCacheSize ) ; \n\t\t\tisTrue ( ( $F239445 ( this , vectorIndex ) & mask ) == NUM00 , NUM00 ) ; \n\t\t\t$F239445 ( this , vectorIndex ) |= mask ; \n\t\t\tif ( COVERAGE_TEST_FLAG ) { \n\t\t\t\tif ( CoverageTestId == NUM00 ) { \n\t\t\t\t\t$F239445 ( this , vectorIndex ) = ~ NUM00 ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F96202 ( dict ) "}, {"code": "public static boolean aboveOrEqual ( int a , int b ) { \n\treturn Integer . compareUnsigned ( a , b ) >= NUM00 ; \n\t} \n"}, {"code": "protected void awaitCompletionComputeValuesAndShutdown $F72 { \n\t$F5795 ( runExecutorAndAwaitCompletion ) if $F585 ( logger ) printStats ( ) ; \n\t$F733 ( executor ) while ( ! executor . isTerminated ( ) ) { \n\t\t$F110998 ( Thread , e ) } \n\t} \n"}, {"code": "public Flags flagList $F72 throws DecodingException { \n\tFlags flags = new Flags $F72 ; \n\tnextWordChar ( ) ; \n\tconsumeChar ( NUM00 ) ; \n\tCharacterValidator validator = new NoopCharValidator $F72 ; \n\tString nextWord = consumeWord ( validator ) ; \n\twhile $F2364 ( nextWord ) { \n\t\tDecoderUtils . setFlag ( nextWord , flags ) ; \n\t\tnextWord = consumeWord ( validator ) ; \n\t\t} \n\tif $F4012 ( nextWord ) { \n\t\t$F1384 ( parenIndex , nextWord ) if ( parenIndex > NUM00 ) { \n\t\t\t$F66071 ( nextFlag , nextWord , parenIndex ) DecoderUtils . setFlag ( nextFlag , flags ) ; \n\t\t\t} \n\t\t} \n\treturn flags ; \n\t} \n"}, {"code": "protected RestClientItf createNewRestClient ( URI endpoint , String username , String password , String version , Client client ) { \n\tXtremIOClient xioClient = null ; \n\tif ( $F1031 ( version ) && Integer . valueOf ( version . split ( DOT_OPERATOR ) [ NUM00 ] ) >= XIO_MIN_4X_VERSION ) { \n\t\txioClient = new XtremIOV2Client ( endpoint , username , password , client ) ; \n\t\t} \n\telse { \n\t\txioClient = new XtremIOV1Client ( endpoint , username , password , client ) ; \n\t\t} \n\treturn xioClient ; \n\t} \n"}, {"code": "public String diff_text2 $F68061 ( diffs ) { \n\t$F83 ( text ) for ( Diff aDiff : diffs ) { \n\t\tif ( aDiff . operation != Operation . DELETE ) $F68065 ( text , aDiff ) } \n\t$F92 ( text ) } \n"}, {"code": "static private $F11685 $F57915 toJavaList ( $F57915 values , int rows , int columns ) { \n\t$F57915 $F719 ( result , values ) ; \n\tfor ( $F2277 ( i , values ) ) { \n\t\tint row = i / columns ; \n\t\tint column = i % columns ; \n\t\tE value = values . get ( ( column * rows ) + row ) ; \n\t\tresult . add ( value ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public void lineArrow ( final int x0 , final int y0 , final int x1 , final int y1 , final int sidelength , final int padding , final long lineColor , final long arrowColor ) { \n\tfinal double dx = x1 - x0 ; \n\tfinal double dy = y1 - y0 ; \n\tfinal double angle = Math . atan2 ( dy , dx ) ; \n\tfinal double d = Math . sqrt ( ( dx * dx + dy * dy ) ) ; \n\tfinal double arrowtip = d - padding ; \n\tfinal double arrowlength = TL * sidelength ; \n\tfinal double arrowbase = arrowtip - arrowlength ; \n\tfinal double xn = Math . cos ( angle ) ; \n\tfinal double yn = Math . sin ( angle ) ; \n\tfinal int xt = x0 + $F433831 ( arrowtip , xn ) ; \n\tfinal int yt = y0 + $F433831 ( arrowtip , yn ) ; \n\tfinal double xb = x0 + arrowbase * xn ; \n\tfinal double yb = y0 + arrowbase * yn ; \n\tfinal double sl2 = sidelength / NUM00 ; \n\tfinal double xk = sl2 * Math . cos ( angle + PI2 ) ; \n\tfinal double yk = sl2 * Math . sin ( angle + PI2 ) ; \n\t$F66967 ( x2 , xb , xk ) $F66967 ( y2 , yb , yk ) $F66963 ( x3 , xb , xk ) $F66963 ( y3 , yb , yk ) setColor ( lineColor ) ; \n\tline ( x0 , y0 , ( int ) xb , ( int ) yb , NUM00 ) ; \n\tsetColor ( arrowColor ) ; \n\tline ( x2 , y2 , x3 , y3 , NUM00 ) ; \n\tline ( x2 , y2 , xt , yt , NUM00 ) ; \n\tline ( x3 , y3 , xt , yt , NUM00 ) ; \n\t} \n"}, {"code": "public String toHtml ( Node node , Appendable appendable ) { \n\tNodeVisitor renderer = createRenderer ( appendable ) ; \n\tnode . visit ( renderer ) ; \n\t$F92 ( appendable ) } \n"}, {"code": "public static $F806 toCommaSeparatedArray ( String str ) throws IOException { \n\treturn str . split ( NUM00 ) ; \n\t} \n"}, {"code": "$F1 public final Object put ( String key , Object value ) $F8587 ( set , key , value ) "}, {"code": "private void appendFloatType $F94426 ( sb , fieldType , fieldWidth ) $F86 ( sb ) "}, {"code": "private HttpEntity paramsToEntity ( RequestParams params , ResponseHandlerInterface responseHandler ) { \n\tHttpEntity entity = null ; \n\ttry { \n\t\tif ( params != null ) { \n\t\t\tentity = params . getEntity ( responseHandler ) ; \n\t\t\t} \n\t\t} \n\tcatch ( Throwable t ) { \n\t\tif ( responseHandler != null ) responseHandler . sendFailureMessage ( NUM00 , null , null , t ) ; \n\t\telse $F301 ( t ) } \n\treturn entity ; \n\t} \n"}, {"code": "public static boolean isInstallableEditing ( EnumSet < EmbeddingFlags > flagSet ) $F18905 ( flagSet ) "}, {"code": "public void testMultiplyScalePosPos $F72 { \n\tString a = NUM00 ; \n\tint aScale = NUM00 ; \n\tString b = NUM00 ; \n\tint bScale = NUM00 ; \n\tString c = NUM00 ; \n\tint cScale = NUM00 ; \n\t$F1918 ( aNumber , a , aScale ) $F1918 ( bNumber , b , bScale ) $F168802 ( result , aNumber , bNumber ) $F1925 ( assertEquals , c , result ) $F1928 ( assertEquals , cScale , result ) } \n"}, {"code": "public Iterator $F25924 resourceIterator $F72 $F16048 ( resourceList ) "}, {"code": "public double nextUniform ( double lower , double upper ) { \n\tif ( upper <= lower ) { \n\t\tthrow new MathIllegalArgumentException ( LocalizedCoreFormats . LOWER_BOUND_NOT_BELOW_UPPER_BOUND , lower , upper ) ; \n\t\t} \n\tif ( Double . isInfinite ( lower ) || Double . isInfinite ( upper ) ) { \n\t\tthrow new MathIllegalArgumentException ( LocalizedCoreFormats . INFINITE_BOUND ) ; \n\t\t} \n\tif $F89880 ( Double , lower , upper ) { \n\t\tthrow new MathIllegalArgumentException ( LocalizedCoreFormats . NAN_NOT_ALLOWED ) ; \n\t\t} \n\tfinal double u = randomGenerator . nextDouble ( ) ; \n\treturn u * upper + ( NUM00 - u ) * lower ; \n\t} \n"}, {"code": "public ShapeTileBox bounding_box $F72 { \n\tPlaPointInt lower_left = new PlaPointInt ( Math . floor ( v_x ) , Math . floor ( v_y ) ) ; \n\tPlaPointInt upper_right = new PlaPointInt ( Math . ceil ( v_x ) , Math . ceil ( v_y ) ) ; \n\treturn new ShapeTileBox ( lower_left , upper_right ) ; \n\t} \n"}, {"code": "public void addInterface ( String name ) { \n\tcachedInterfaces = null ; \n\tint info = constPool . addClassInfo ( name ) ; \n\tif ( interfaces == null ) { \n\t\t$F4470 ( interfaces ) interfaces [ NUM00 ] = info ; \n\t\t} \n\telse { \n\t\tint n = interfaces . length ; \n\t\t$F65716 ( newarray , n ) $F135 ( System , interfaces , newarray , n ) newarray [ n ] = info ; \n\t\tinterfaces = newarray ; \n\t\t} \n\t} \n"}, {"code": "private void biomeFactor ( final int x , final int z , final double addHeight ) { \n\tfloat smoothVolatility = NUM00 ; \n\tfloat smoothHeight = NUM00 ; \n\tfloat biomeWeightSum = NUM00 ; \n\tfinal Biome centerBiomeConfig = getCenterBiome ( x , z ) ; \n\tfinal int lookRadius = this . maxSmoothRadius ; \n\tfor ( $F142929 ( nextX , lookRadius ) ) { \n\t\tfor ( $F142929 ( nextZ , lookRadius ) ) { \n\t\t\tfinal Biome biome = getOffsetBiome ( x , z , nextX , nextZ ) ; \n\t\t\tfinal float biomeHeight = biome . getBaseHeight ( ) ; \n\t\t\tfinal float biomeVolatility = biome . getHeightVariation ( ) ; \n\t\t\tdouble biomeWeight = calcBiomeWeight ( nextX , nextZ , biomeHeight ) ; \n\t\t\t$F15467 ( biomeWeight , Math ) if ( biomeHeight > centerBiomeConfig . getBaseHeight ( ) ) { \n\t\t\t\tbiomeWeight /= NUM00 ; \n\t\t\t\t} \n\t\t\tsmoothVolatility += biomeVolatility * biomeWeight ; \n\t\t\tsmoothHeight += biomeHeight * biomeWeight ; \n\t\t\tbiomeWeightSum += biomeWeight ; \n\t\t\t} \n\t\t} \n\tsmoothVolatility /= biomeWeightSum ; \n\tsmoothHeight /= biomeWeightSum ; \n\tthis . biomeVolatility = smoothVolatility * NUM00 + NUM00 ; \n\tthis . biomeVolatility *= NUM00 / NUM00 ; \n\tthis . biomeHeight = NUM00 / NUM00 ; \n\tthis . biomeHeight += smoothHeight * NUM00 / NUM00 ; \n\tthis . biomeHeight += NUM00 * addHeight * NUM00 / NUM00 ; \n\t} \n"}, {"code": "$F1431 public static MIssue create ( Properties ctx , String hexInput ) { \n\tHashMap hmIn = null ; \n\ttry { \n\t\t$F96 byteArray = Secure . convertHexString ( hexInput ) ; \n\t\t$F5950 ( bIn , byteArray ) $F67402 ( oIn , bIn ) hmIn = ( HashMap ) oIn . readObject ( ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F51338 ( s_log , Level , e ) $F1274 } \n\tMIssue issue = new MIssue ( ctx , ( $F12078 ) hmIn ) ; \n\treturn issue ; \n\t} \n"}, {"code": "void flushBuffer $F72 throws IOException { \n\tse . flushBuffer ( ) ; \n\t} \n"}, {"code": "public static void showUnknownError ( Context context , Throwable t , DialogInterface . OnCancelListener listener ) { \n\tshowError ( context , String . format ( context . getString ( R . string . afc_pmsg_unknown_error ) , t ) , listener ) ; \n\t} \n"}, {"code": "private static boolean makeConcavePolygon ( final PlanetModel planetModel , final GeoCompositePolygon rval , final MutableBoolean seenConcave , final EdgeBuffer edgeBuffer , final List < GeoPolygon > holes , final GeoPoint testPoint ) { \n\t$F19795 ( edgeBuffer , _BOOL ) if ( seenConcave . value ) $F825 seenConcave . value = _BOOL ; \n\tif $F6214 ( edgeBuffer ) $F825 final List < GeoPoint > points = new $F162971 $F716 ( edgeBuffer ) ; \n\tfinal BitSet internalEdges = new BitSet $F113103 ( edgeBuffer ) ; \n\tEdge edge = edgeBuffer . pickOne ( ) ; \n\tboolean isInternal = _BOOL ; \n\tfor ( $F2277 ( i , edgeBuffer ) ) { \n\t\tpoints . add ( edge . startPoint ) ; \n\t\tif $F18523 ( i , edgeBuffer ) { \n\t\t\tinternalEdges . set ( i , edge . isInternal ) ; \n\t\t\t} \n\t\telse $F145688 ( isInternal , edge ) edge = edgeBuffer . getNext ( edge ) ; \n\t\t} \n\tif ( testPoint != null && holes != null && $F3816 ( holes ) ) { \n\t\tfinal GeoPolygon testPolygon = new GeoConcavePolygon ( planetModel , points , null , internalEdges , isInternal ) ; \n\t\tif ( testPolygon . isWithin ( testPoint ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\tfinal GeoPolygon realPolygon = new GeoConcavePolygon ( planetModel , points , holes , internalEdges , isInternal ) ; \n\tif ( testPoint != null && $F45555 ( holes ) ) { \n\t\tif ( realPolygon . isWithin ( testPoint ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\trval . addShape ( realPolygon ) ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void addButton ( final JButton theButton ) $F207 ( customButtonPanel , theButton ) "}, {"code": "void swapCursor ( long monthMillis , $F5466 EventCursor cursor , ContentObserver contentObserver ) { \n\tfor ( $F2277 ( i , mMonths ) ) { \n\t\tif ( CalendarUtils . sameMonth ( monthMillis , mMonths . get ( i ) ) ) { \n\t\t\tswapCursor ( i , cursor , contentObserver ) ; \n\t\t\t$F597 } \n\t\t} \n\t} \n"}, {"code": "final boolean close $F72 { \n\treturn ! closed . getAndSet ( _BOOL ) ; \n\t} \n"}, {"code": "public $F96 encryptRaw ( $F96 baseKey , int usage , $F96 ivec , $F96 plaintext , int start , int len ) throws GeneralSecurityException , KrbCryptoException { \n\tif $F150622 ( KeyUsage , usage ) { \n\t\tthrow new GeneralSecurityException ( NUM00 + usage ) ; \n\t\t} \n\t$F96 output = encryptCTS ( baseKey , usage , ivec , null , plaintext , start , len , _BOOL ) ; \n\treturn output ; \n\t} \n"}, {"code": "private void fixbug ( Document doc ) { \n\t$F9029 ( element , doc ) $F25302 ( element , fixbug ) } \n"}, {"code": "private String toHexString $F97 ( block ) { \n\t$F280 ( buf ) int len = block . length ; \n\tfor ( $F119 ( i , len ) ) { \n\t\tbyte2hex ( block [ i ] , buf ) ; \n\t\t$F24364 ( i , len , buf ) } \n\t$F92 ( buf ) } \n"}, {"code": "public static String removeDeployUri ( String uri ) { \n\tif $F38892 ( uri ) { \n\t\treturn uri ; \n\t\t} \n\t$F129840 ( loc , uri ) if ( loc == - NUM00 ) $F1337 else $F61217 ( uri , loc ) } \n"}, {"code": "public static double loss ( double pred , double y ) { \n\t$F107213 ( Math , y , pred ) } \n"}, {"code": "public boolean needSignatureFileBytes $F72 { \n\treturn sfBytes == null ; \n\t} \n"}, {"code": "public void insert ( T object , int index ) { \n\tsynchronized ( mLock ) $F42308 ( mObjects , index , object ) if ( mNotifyOnChange ) notifyItemInserted ( index ) ; \n\t} \n"}, {"code": "private void loadTargetModules $F72 { \n\tfor ( final Module module : target . getModules ( ) ) { \n\t\tmodule . addListener ( moduleKeeperListener ) ; \n\t\tmodules . add ( module ) ; \n\t\tif ( ! module . isLoaded ( ) ) { \n\t\t\ttry { \n\t\t\t\t$F37249 ( module ) } \n\t\t\tcatch ( final CouldntLoadDataException e ) $F47994 ( errorLoadingModule , module , e ) } \n\t\t} \n\tstep ++ ; \n\t} \n"}, {"code": "public BloomFilter ( double falsePositiveProbability , int expectedNumberOfElements ) { \n\tthis ( Math . ceil ( - ( $F49357 ( Math , falsePositiveProbability ) ) ) / Math . log ( NUM00 ) , expectedNumberOfElements , ( int ) Math . ceil ( - ( $F49357 ( Math , falsePositiveProbability ) ) ) ) ; \n\t} \n"}, {"code": "public synchronized void notifyBand ( final int times , final int onTime , final int offTime , final int flashColour ) { \n\tfinal List < BLEAction > $F204 ( list ) ; \n\t$F12490 ( colors , convertRgb , flashColour ) list . add ( new WaitAction $F989 ) ; \n\tlist . add ( new WriteAction ( Profile . UUID_CHAR_CONTROL_POINT , Protocol . VIBRATION_WITHOUT_LED ) ) ; \n\tlist . add ( new WaitAction $F989 ) ; \n\tlist . add ( new WriteAction ( Profile . UUID_CHAR_CONTROL_POINT , colors ) ) ; \n\tqueue ( list ) ; \n\t} \n"}, {"code": "public void test_ConstructorLjava_security_cert_CertPathParameters $F72 { \n\ttry { \n\t\tCertPathParameters parameters = new MyCertPathParameters $F72 ; \n\t\tCertPathTrustManagerParameters p = new CertPathTrustManagerParameters ( parameters ) ; \n\t\tassertNotSame ( NUM00 , parameters , p . getParameters ( ) ) ; \n\t\t} \n\t$F53525 ( fail , e ) try { \n\t\tnew CertPathTrustManagerParameters $F8320 ; \n\t\tfail ( NUM00 ) ; \n\t\t} \n\t$F53531 } \n"}, {"code": "private static int buildRequestCode ( long threadId , int action ) { \n\taction ++ ; \n\treturn ( int ) ( action * NUM00 + threadId ) ; \n\t} \n"}, {"code": "public OuterJoinQualifier add ( String propertyLeft , String propertyRight ) { \n\tadditionalProperties . add ( new PropertyValueExpressionPair ( new PropertyValueExpression ( propertyLeft ) , new PropertyValueExpression ( propertyRight ) ) ) ; \n\treturn this ; \n\t} \n"}, {"code": "public void insertElementAt ( int value , int at ) { \n\tif ( null == m_map ) $F74814 ( m_map , m_blocksize , m_mapSize ) else $F11084 ( m_firstFree , m_mapSize , m_blocksize , System , m_map , newMap ) $F45575 ( at , m_firstFree , System , m_map ) m_map [ at ] = value ; \n\tm_firstFree ++ ; \n\t} \n"}, {"code": "protected static Dfp atanInternal ( final Dfp a ) { \n\tDfp y = new Dfp ( a ) ; \n\tDfp x = new Dfp ( y ) ; \n\tDfp py = new Dfp ( y ) ; \n\tfor ( $F5151 ( i ) ) { \n\t\tx = x . multiply ( a ) ; \n\t\tx = x . multiply ( a ) ; \n\t\t$F201387 ( x ) y = y . add ( x . divide ( i ) ) ; \n\t\tif $F1238 ( y , py ) $F5153 py = new Dfp ( y ) ; \n\t\t} \n\treturn y ; \n\t} \n"}, {"code": "public static String parseSegmentName ( String filename ) { \n\tint idx = indexOfSegmentName ( filename ) ; \n\t$F63871 ( idx , filename ) return filename ; \n\t} \n"}, {"code": "private static Tree generateSubTree ( HashMap < Integer , Pair < IndexedWord , $F3807 > > dependencies , int root ) { \n\t$F3807 children = dependencies . get ( root ) . second ; \n\tIndexedWord tw = dependencies . get ( root ) . first ; \n\tTree tree = new LabeledScoredTreeNode ( tw ) ; \n\tboolean addedHead = children . isEmpty ( ) ; \n\t$F3807 sortedChildren = CollectionUtils . sorted ( children ) ; \n\tfor ( Integer c : sortedChildren ) { \n\t\tif ( c > root && ! addedHead ) { \n\t\t\tTree child = new LabeledScoredTreeNode ( tw ) ; \n\t\t\ttree . addChild ( child ) ; \n\t\t\taddedHead = _BOOL ; \n\t\t\t} \n\t\tTree child = generateSubTree ( dependencies , c ) ; \n\t\ttree . addChild ( child ) ; \n\t\t} \n\tif ( ! addedHead ) { \n\t\tTree child = new LabeledScoredTreeNode ( tw ) ; \n\t\ttree . addChild ( child ) ; \n\t\t} \n\treturn tree ; \n\t} \n"}, {"code": "@ HLEFunction ( nid = NUM00 , version = NUM00 , checkInsideInterrupt = _BOOL ) public int __sceSasRevParam $F14337 ( sasCore , delay , feedback ) { \n\tcheckSasHandleGood ( sasCore ) ; \n\twaveformEffectDelay = delay ; \n\twaveformEffectFeedback = feedback ; \n\t$F1082 } \n"}, {"code": "static boolean isPossibleFP ( String val ) { \n\t$F11550 ( length , val ) for ( $F1316 ( i , length ) ) { \n\t\t$F1280 ( c , val , i ) if ( ! ( c >= NUM00 && c <= NUM00 || c == NUM00 || c == NUM00 || c == NUM00 || c == NUM00 || c == NUM00 ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public boolean deleteTrack ( Track track ) { \n\tsynchronized ( tracks ) { \n\t\treturn tracks . removeElement ( track ) ; \n\t\t} \n\t} \n"}, {"code": "protected static $F162971 parseKmlCoordinates ( String input ) { \n\tLinkedList < GeoPoint > tmpCoords = new LinkedList < GeoPoint > $F72 ; \n\tint i = NUM00 ; \n\tint tupleStart = NUM00 ; \n\t$F115 ( length , input ) boolean startReadingTuple = _BOOL ; \n\twhile ( i < length ) { \n\t\t$F1280 ( c , input , i ) if $F58237 ( c ) { \n\t\t\tif ( startReadingTuple ) { \n\t\t\t\t$F12715 ( tuple , input , tupleStart , i ) GeoPoint p = parseKmlCoord ( tuple ) ; \n\t\t\t\t$F67023 ( p , tmpCoords ) startReadingTuple = _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tif ( ! startReadingTuple ) { \n\t\t\t\tstartReadingTuple = _BOOL ; \n\t\t\t\ttupleStart = i ; \n\t\t\t\t} \n\t\t\tif ( i == length - NUM00 ) { \n\t\t\t\tString tuple = input . substring ( tupleStart , i + NUM00 ) ; \n\t\t\t\tGeoPoint p = parseKmlCoord ( tuple ) ; \n\t\t\t\t$F67023 ( p , tmpCoords ) } \n\t\t\t} \n\t\ti ++ ; \n\t\t} \n\t$F162971 coordinates = new $F162971 $F716 ( tmpCoords ) ; \n\tcoordinates . addAll ( tmpCoords ) ; \n\treturn coordinates ; \n\t} \n"}, {"code": "public void paint ( Graphics2D g ) { \n\tfor ( $F2277 ( i , m_nodes ) ) { \n\t\tWFNode node = m_nodes . get ( i ) ; \n\t\t$F5112 ( rect , node ) $F339 ( g , Color ) g . drawRect ( $F941 ( rect ) ) ; \n\t\tGraphics2D t = ( Graphics2D ) g . create ( $F941 ( rect ) ) ; \n\t\tnode . paint ( t ) ; \n\t\t$F355 ( t ) } \n\tcreateLines ( ) ; \n\tfor ( $F2277 ( i , m_lines ) ) { \n\t\tWFLine line = ( WFLine ) m_lines . get ( i ) ; \n\t\tline . paint ( g ) ; \n\t\t} \n\t} \n"}, {"code": "ServerSessionContext registerRequest ( long sequence , Runnable runnable ) $F67896 ( commands , sequence , runnable , this ) "}, {"code": "public void testConstructorSignBytesZeroNull2 $F72 { \n\tbyte $F3009 = $F845 ; \n\tint aSign = NUM00 ; \n\t$F15143 $F3023 ( aNumber , aSign , aBytes ) $F3030 ( rBytes ) $F3031 ( resBytes , aNumber ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , aNumber ) } \n"}, {"code": "public void addPreferencesButton $F72 { \n\t$F79691 ( prefsButton ) prefsButton . setHideActionText ( _BOOL ) ; \n\tprefsButton . setAction ( TimeSeriesPlotActions . getPropertiesDialogAction ( this ) ) ; \n\tbuttonPanel . add ( prefsButton ) ; \n\t} \n"}, {"code": "public static void findIndexMatches ( SearchPattern pattern , Index index , IndexQueryRequestor requestor , SearchParticipant participant , IJavaSearchScope scope , IProgressMonitor monitor ) throws IOException { \n\tpattern . findIndexMatches ( index , requestor , participant , scope , monitor ) ; \n\t} \n"}, {"code": "public static void logInfo $F4353 ( message , args ) { \n\t$F3869 ( message , MessageFormat , args ) log ( IStatus . INFO , IStatus . OK , message , null ) ; \n\t} \n"}, {"code": "public static boolean occupy ( int waitMs ) { \n\tif ( occupiedUntil != null && occupiedUntil . after ( $F4094 ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\toccupiedUntil = DateUtils . addMilliseconds ( $F4094 , waitMs ) ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "public boolean [ ] [ ] moralize ( BayesNet bayesNet ) { \n\tint nNodes = bayesNet . getNrOfNodes ( ) ; \n\tboolean [ ] [ ] bAdjacencyMatrix = new boolean [ nNodes ] [ nNodes ] ; \n\tfor ( $F119 ( iNode , nNodes ) ) { \n\t\tParentSet parents = bayesNet . getParentSets ( ) [ iNode ] ; \n\t\tmoralizeNode ( parents , iNode , bAdjacencyMatrix ) ; \n\t\t} \n\treturn bAdjacencyMatrix ; \n\t} \n"}, {"code": "public void addDivider ( ImageView v ) { \n\tRelativeLayout . LayoutParams dividerParams = new RelativeLayout . LayoutParams ( LayoutParams . FILL_PARENT , LayoutParams . WRAP_CONTENT ) ; \n\tif ( mImageView != null ) { \n\t\tdividerParams . addRule ( RelativeLayout . BELOW , mImageView . getId ( ) ) ; \n\t\t} \n\telse if ( mMissingImage != null ) { \n\t\tdividerParams . addRule ( RelativeLayout . BELOW , mMissingImage . getId ( ) ) ; \n\t\t} \n\telse if ( mVideoButton != null ) { \n\t\tdividerParams . addRule ( RelativeLayout . BELOW , mVideoButton . getId ( ) ) ; \n\t\t} \n\telse if ( mAudioButton != null ) { \n\t\tdividerParams . addRule ( RelativeLayout . BELOW , mAudioButton . getId ( ) ) ; \n\t\t} \n\telse if ( mView_Text != null ) { \n\t\tdividerParams . addRule ( RelativeLayout . BELOW , mView_Text . getId ( ) ) ; \n\t\t} \n\telse $F17931 ( Log , t ) addView ( v , dividerParams ) ; \n\t} \n"}, {"code": "private double findLength ( Point originPoint , Point targetPoint ) { \n\tint x1 = originPoint . x ; \n\tint y1 = originPoint . y ; \n\tint x2 = targetPoint . x ; \n\tint y2 = targetPoint . y ; \n\tdouble sideA = x2 - x1 ; \n\tdouble sideB = ( y1 > y2 ? ( y1 - y2 ) : ( y2 - y1 ) ) ; \n\t$F6482 ( sideB , sideA ) return Math . sqrt ( Math . pow ( sideA , NUM00 ) + Math . pow ( sideB , NUM00 ) ) ; \n\t} \n"}, {"code": "public void testCase4 $F72 { \n\t$F7829 $F10679 int aSign = NUM00 ; \n\tint bSign = - NUM00 ; \n\t$F10682 $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F10683 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F10686 ( assertEquals , result ) } \n"}, {"code": "public static Automaton determinizeSimple ( Automaton a , $F11868 initialset ) { \n\tif $F25441 ( a ) { \n\t\treturn a ; \n\t\t} \n\t$F2027 points = a . getStartPoints ( ) ; \n\tMap < $F11868 , $F11868 > $F8690 ( sets ) ; \n\tLinkedList < $F11868 > $F19827 ( worklist ) ; \n\tMap < $F11868 , Integer > $F8690 ( newstate ) ; \n\t$F22747 ( sets , initialset ) worklist . add ( initialset ) ; \n\tAutomaton . Builder result = new Automaton . Builder $F72 ; \n\t$F25451 ( result ) $F101820 ( newstate , initialset ) Transition t = new Transition $F72 ; \n\twhile $F3817 ( worklist ) { \n\t\t$F11868 s = worklist . removeFirst ( ) ; \n\t\t$F85651 ( r , newstate , s ) for ( int q : s ) { \n\t\t\tif ( a . isAccept ( q ) ) { \n\t\t\t\tresult . setAccept ( r , _BOOL ) ; \n\t\t\t\t$F597 } \n\t\t\t} \n\t\tfor ( $F1139 ( n , points ) ) { \n\t\t\t$F114818 ( p ) for ( int q : s ) { \n\t\t\t\tint count = a . initTransition ( q , t ) ; \n\t\t\t\tfor ( $F119 ( i , count ) ) { \n\t\t\t\t\ta . getNextTransition ( t ) ; \n\t\t\t\t\tif ( t . min <= points [ n ] && points [ n ] <= t . max ) { \n\t\t\t\t\t\tp . add ( t . dest ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tif $F15257 ( sets , p ) { \n\t\t\t\t$F22747 ( sets , p ) worklist . add ( p ) ; \n\t\t\t\tnewstate . put ( p , result . createState ( ) ) ; \n\t\t\t\t} \n\t\t\t$F85651 ( q , newstate , p ) int min = points [ n ] ; \n\t\t\tint max ; \n\t\t\tif ( n + NUM00 < points . length ) { \n\t\t\t\tmax = points [ n + NUM00 ] - NUM00 ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tmax = Character . MAX_CODE_POINT ; \n\t\t\t\t} \n\t\t\tresult . addTransition ( r , q , min , max ) ; \n\t\t\t} \n\t\t} \n\treturn Operations . removeDeadStates ( result . finish ( ) ) ; \n\t} \n"}, {"code": "public static void write ( InputStream in , OutputStream out , boolean closeBoth ) throws IOException { \n\t$F12496 ( buff ) int read = NUM00 ; \n\twhile ( $F29984 ( read , in , buff ) > NUM00 ) $F29756 ( out , buff , read ) $F1206 ( out ) $F308 ( closeBoth , safeCloseStreams , in , out ) } \n"}, {"code": "public static double distance ( CoordinateDD p1 , CoordinateDD p2 , UNITS units ) { \n\tfinal double latP1 = p1 . northSouth ; \n\tfinal double latP2 = p2 . northSouth ; \n\tfinal double lonP1 = p1 . eastWest ; \n\tfinal double lonP2 = p2 . eastWest ; \n\tif ( latP1 == latP2 && lonP1 == lonP2 ) $F1082 double distRad = Math . acos ( Math . sin ( toRadians ( latP1 ) ) * Math . sin ( toRadians ( latP2 ) ) + Math . cos ( toRadians ( latP1 ) ) * Math . cos ( toRadians ( latP2 ) ) * Math . cos ( toRadians ( lonP1 - lonP2 ) ) ) ; \n\tfinal double distAsDegree = toDegrees ( distRad ) ; \n\treturn metersToUnits ( distAsDegree * NUM00 * NUM00 * NUM00 , units ) ; \n\t} \n"}, {"code": "public static LiquidNetwork initNetwork $F72 { \n\tRandom random = new Random $F30 ( System ) ; \n\t$F8254 ( id , random ) while $F105 ( usedIds , id ) { \n\t\tid = random . nextInt ( ) ; \n\t\t} \n\t; \n\tLiquidNetwork net = new LiquidNetwork $F72 ; \n\tusedIds . add ( id ) ; \n\tnet . networkID = id ; \n\treturn net ; \n\t} \n"}, {"code": "public String exportXml $F72 throws IOException { \n\t$F1538 ( outputStream ) exportXml ( outputStream ) ; \n\t$F92 ( outputStream ) } \n"}, {"code": "public PatternReplaceFilter ( TokenStream in , Pattern p , String replacement , boolean all ) { \n\tsuper ( in ) ; \n\tthis . replacement = ( null == replacement ) ? NUM00 : replacement ; \n\tthis . all = all ; \n\tthis . m = p . matcher ( termAtt ) ; \n\t} \n"}, {"code": "public boolean isMutable $F72 { \n\treturn mutable ; \n\t} \n"}, {"code": "public static $F2027 stableSort $F9830 ( array ) { \n\t$F22974 ( index , array ) $F22974 ( newIndex , array ) $F2027 helpIndex ; \n\tint numEqual ; \n\tarray = ( $F1986 ) array . clone ( ) ; \n\tfor ( $F1139 ( i , index ) ) { \n\t\tindex [ i ] = i ; \n\t\tif $F1998 ( Double , array , i ) { \n\t\t\tarray [ i ] = Double . MAX_VALUE ; \n\t\t\t} \n\t\t} \n\tquickSort ( array , index , NUM00 , array . length - NUM00 ) ; \n\tint i = NUM00 ; \n\twhile ( i < index . length ) { \n\t\tnumEqual = NUM00 ; \n\t\tfor ( int j = i + NUM00 ; \n\t\t( ( j < index . length ) && Utils . eq ( array [ index [ i ] ] , array [ index [ j ] ] ) ) ; \n\t\tj ++ ) numEqual ++ ; \n\t\tif ( numEqual > NUM00 ) { \n\t\t\t$F3936 ( helpIndex , numEqual ) for ( $F119 ( j , numEqual ) ) helpIndex [ j ] = i + j ; \n\t\t\tquickSort ( index , helpIndex , NUM00 , numEqual - NUM00 ) ; \n\t\t\tfor ( $F119 ( j , numEqual ) ) newIndex [ i + j ] = index [ helpIndex [ j ] ] ; \n\t\t\ti += numEqual ; \n\t\t\t} \n\t\telse { \n\t\t\tnewIndex [ i ] = index [ i ] ; \n\t\t\ti ++ ; \n\t\t\t} \n\t\t} \n\treturn newIndex ; \n\t} \n"}, {"code": "public void reopenReadWrite $F72 { \n\tsynchronized ( mLock ) { \n\t\tthrowIfNotOpenLocked ( ) ; \n\t\t$F933 ( isReadOnlyLocked ) final int oldOpenFlags = mConfigurationLocked . openFlags ; \n\t\tmConfigurationLocked . openFlags = ( mConfigurationLocked . openFlags & ~ OPEN_READ_MASK ) | OPEN_READWRITE ; \n\t\ttry { \n\t\t\tmConnectionPoolLocked . reconfigure ( mConfigurationLocked ) ; \n\t\t\t} \n\t\tcatch ( RuntimeException ex ) { \n\t\t\tmConfigurationLocked . openFlags = oldOpenFlags ; \n\t\t\tthrow ex ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static int readChars ( Reader r , $F1469 charArray ) throws IOException { \n\tint totalCharsRead = NUM00 ; \n\t$F83249 ( charsRead , r , charArray ) while ( charsRead >= NUM00 ) { \n\t\ttotalCharsRead += charsRead ; \n\t\tif ( totalCharsRead == charArray . length ) $F5153 charsRead = r . read ( charArray , totalCharsRead , charArray . length - totalCharsRead ) ; \n\t\t} \n\treturn totalCharsRead ; \n\t} \n"}, {"code": "public void removeDirection ( final Direction dir , final boolean face ) { \n\tRPAction action ; \n\tint size ; \n\taction = new RPAction $F72 ; \n\t$F16824 ( action ) action . put ( NUM00 , - dir . get ( ) ) ; \n\tsend ( action ) ; \n\tdirections . remove ( dir ) ; \n\t$F54171 ( size , directions ) if ( size == NUM00 ) { \n\t\taction = new RPAction $F72 ; \n\t\t$F16824 ( action ) } \n\telse { \n\t\tif ( face ) { \n\t\t\taction = new FaceRPAction ( directions . get ( size - NUM00 ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\taction = new MoveRPAction ( directions . get ( size - NUM00 ) ) ; \n\t\t\t} \n\t\t} \n\tsend ( action ) ; \n\t} \n"}, {"code": "public static $F1986 ndary ( int n ) { \n\tdouble $F3234 = new double [ n ] ; \n\tfor ( $F119 ( i , n ) ) { \n\t\td [ i ] = R . nextGaussian ( ) ; \n\t\t} \n\treturn d ; \n\t} \n"}, {"code": "private float applyBounce $F2267 ( velocity , distOutOfBounds , simulationRate ) { \n\t$F46660 ( isZero , distOutOfBounds , velocity ) velocity *= - NUM00 ; \n\tfloat bounce = BOUNCE_MULTIPLIER * Math . abs ( distOutOfBounds / mIrisRadius ) ; \n\tif ( velocity > NUM00 ) { \n\t\tvelocity += bounce * simulationRate ; \n\t\t} \n\telse { \n\t\tvelocity -= bounce * simulationRate ; \n\t\t} \n\treturn velocity ; \n\t} \n"}, {"code": "private double dot ( final int k0 , final int k1 , final $F2027 assignment0 , final $F2027 assignment1 ) { \n\tdouble dot = NUM00 ; \n\t$F10162 ( N , X ) int a = NUM00 , b = NUM00 ; \n\tfor ( $F119 ( i , N ) ) { \n\t\tif ( assignment0 [ i ] != k0 ) $F598 a ++ ; \n\t\tfor ( $F119 ( j , N ) ) { \n\t\t\tif ( assignment1 [ j ] != k1 ) $F598 dot += kernel . eval ( i , j , X , accel ) ; \n\t\t\t} \n\t\t} \n\tfor ( $F119 ( j , N ) ) if ( assignment1 [ j ] == k1 ) b ++ ; \n\treturn dot / ( a * b ) ; \n\t} \n"}, {"code": "public void removeAllTextures $F72 { \n\tfor ( WeakReference < CCTexture2D > texSR : textures . values ( ) ) { \n\t\tCCTexture2D tex = texSR . get ( ) ; \n\t\tif ( tex != null ) tex . releaseTexture ( CCDirector . gl ) ; \n\t\t} \n\t$F725 ( textures ) } \n"}, {"code": "public synchronized void addToQueue ( final ImageResourceLoader imageResourceLoader , final String uri , final MutableFSImage mfsi , final int width , final int height ) { \n\tXRLog . general ( Level . FINE , NUM00 + uri ) ; \n\t_loadQueue . addLast ( new ImageLoadItem ( imageResourceLoader , uri , mfsi , width , height ) ) ; \n\tnotifyAll ( ) ; \n\t} \n"}, {"code": "private JNIWriter ( Context context ) { \n\tcontext . put ( jniWriterKey , this ) ; \n\tfileManager = context . get ( JavaFileManager . class ) ; \n\tlog = Log . instance ( context ) ; \n\tOptions options = Options . instance ( context ) ; \n\tverbose = options . isSet ( VERBOSE ) ; \n\t$F244456 ( checkAll , options ) this . context = context ; \n\tsyms = Symtab . instance ( context ) ; \n\t$F109927 ( lineSep , System ) } \n"}, {"code": "public JOSMTolerantFastXMLParser ( Sink sink , XMLStreamReader reader , boolean enableDateParsing ) { \n\tthis . sink = sink ; \n\tthis . enableDateParsing = enableDateParsing ; \n\tthis . reader = reader ; \n\tif ( enableDateParsing ) { \n\t\ttimestampFormat = new XmlTimestampFormat $F72 ; \n\t\t} \n\telse { \n\t\tCalendar calendar ; \n\t\t$F90333 ( calendar , Calendar ) $F104560 ( calendar , Calendar ) dummyTimestampContainer = new SimpleTimestampContainer $F16810 ( calendar ) ; \n\t\t} \n\tmemberTypeParser = new MemberTypeParser $F72 ; \n\t} \n"}, {"code": "public Hashtable ( int initialCapacity , float loadFactor ) { \n\t$F20450 ( initialCapacity ) if $F92586 ( loadFactor , Float ) $F18931 ( loadFactor ) $F211985 ( initialCapacity ) this . loadFactor = loadFactor ; \n\ttable = new Entry [ initialCapacity ] ; \n\t$F53239 ( threshold , initialCapacity , loadFactor ) } \n"}, {"code": "public static String extractReminder ( String publicURL , String accessURL ) { \n\t$F158275 ( publicURL , accessURL ) } \n"}, {"code": "public void createUnderlying $F72 { \n\tif ( options != null ) { \n\t\toptions . createUnderlying ( ) ; \n\t\tif ( Platform . isFxApplicationThread ( ) ) { \n\t\t\tline = new com . lynden . gmapsfx . shapes . Polyline ( options . convert ( ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void initRasterProgram $F72 { \n\t$F130812 ( props , BufferUtils ) $F130812 ( params , BufferUtils ) int uniformsResourceIndex = glGetProgramResourceIndex ( rasterProgram , GL_UNIFORM_BLOCK , NUM00 ) ; \n\t$F36986 ( computeUboBinding , params ) $F130813 ( props , GL_BUFFER_BINDING ) glGetProgramResourceiv ( rasterProgram , GL_UNIFORM_BLOCK , uniformsResourceIndex , props , null , params ) ; \n\t$F36986 ( rasterUboBinding , params ) } \n"}, {"code": "private void installVoiceData $F72 { \n\tif ( TextUtils . isEmpty ( getEngineName ( ) ) ) $F665 Intent intent = new Intent ( TextToSpeech . Engine . ACTION_INSTALL_TTS_DATA ) ; \n\t$F111932 ( intent , Intent ) intent . setPackage ( getEngineName ( ) ) ; \n\ttry { \n\t\tLog . v ( TAG , NUM00 + intent . toUri ( NUM00 ) ) ; \n\t\tstartActivity ( intent ) ; \n\t\t} \n\tcatch ( ActivityNotFoundException ex ) { \n\t\tLog . e ( TAG , NUM00 + intent + NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "$F1431 Symbol selectBest ( $F17111 env , Type site , $F17124 argtypes , $F17124 typeargtypes , Symbol sym , Symbol bestSoFar , boolean allowBoxing , boolean useVarargs , boolean operator ) { \n\tif ( sym . kind == ERR || ! sym . isInheritedIn ( site . tsym , types ) ) { \n\t\treturn bestSoFar ; \n\t\t} \n\telse if ( useVarargs && ( sym . flags ( ) & VARARGS ) == NUM00 ) { \n\t\treturn bestSoFar . kind >= ERRONEOUS ? new BadVarargsMethod ( ( ResolveError ) bestSoFar . baseSymbol ( ) ) : bestSoFar ; \n\t\t} \n\tAssert . check ( sym . kind < AMBIGUOUS ) ; \n\ttry { \n\t\tType mt = rawInstantiate ( env , site , sym , null , argtypes , typeargtypes , allowBoxing , useVarargs , types . noWarnings ) ; \n\t\tif ( ! operator || verboseResolutionMode . contains ( VerboseResolutionMode . PREDEF ) ) currentResolutionContext . addApplicableCandidate ( sym , mt ) ; \n\t\t} \n\tcatch ( InapplicableMethodException ex ) { \n\t\tif ( ! operator ) currentResolutionContext . addInapplicableCandidate ( sym , ex . getDiagnostic ( ) ) ; \n\t\tswitch ( bestSoFar . kind ) { \n\t\t\tcase ABSENT_MTH : return new InapplicableSymbolError ( currentResolutionContext ) ; \n\t\t\tcase WRONG_MTH : if ( operator ) return bestSoFar ; \n\t\t\tbestSoFar = new InapplicableSymbolsError ( currentResolutionContext ) ; \n\t\t\t$F1267 return bestSoFar ; \n\t\t\t} \n\t\t} \n\tif ( ! isAccessible ( env , site , sym ) ) { \n\t\treturn ( bestSoFar . kind == ABSENT_MTH ) ? new AccessError ( env , site , sym ) : bestSoFar ; \n\t\t} \n\treturn ( bestSoFar . kind > AMBIGUOUS ) ? sym : mostSpecific ( argtypes , sym , bestSoFar , env , site , allowBoxing && operator , useVarargs ) ; \n\t} \n"}, {"code": "public Bitmap loadBitmap $F36827 ( uri , reqWidth , reqHeight ) { \n\tBitmap bitmap = loadBitmapFromMemCache ( uri ) ; \n\tif ( bitmap != null ) { \n\t\t$F12258 ( Log , TAG , uri ) return bitmap ; \n\t\t} \n\ttry { \n\t\tbitmap = loadBitmapFromDiskCache ( uri , reqWidth , reqHeight ) ; \n\t\tif ( bitmap != null ) { \n\t\t\t$F12258 ( Log , TAG , uri ) return bitmap ; \n\t\t\t} \n\t\tbitmap = loadBitmapFromHttp ( uri , reqWidth , reqHeight ) ; \n\t\t$F12258 ( Log , TAG , uri ) } \n\t$F12241 ( e ) if ( bitmap == null && ! mIsDiskLruCacheCreated ) { \n\t\t$F6173 ( Log , TAG ) bitmap = downloadBitmapFromUrl ( uri ) ; \n\t\t} \n\treturn bitmap ; \n\t} \n"}, {"code": "public boolean isSafeToExecuteSUTCode $F72 { \n\t$F686 ( current , Thread ) if $F2200 ( privilegedThreads , current ) { \n\t\treturn _BOOL ; \n\t\t} \n\telse { \n\t\treturn privilegedThreadToIgnore == current ; \n\t\t} \n\t} \n"}, {"code": "public void testCase17 $F72 { \n\t$F45030 $F3017 $F3021 int aSign = NUM00 ; \n\tint bSign = NUM00 ; \n\t$F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F3024 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) } \n"}, {"code": "public $F806 readDirectory ( String dir ) { \n\t$F896 ( dir ) StringArrayOut listOut = new StringArrayOut $F72 ; \n\ttry { \n\t\tcheckResult ( LibIMobileDevice . afc_read_directory ( getRef ( ) , dir , listOut ) ) ; \n\t\tStringArray list = listOut . getValue ( ) ; \n\t\t$F8728 ( result ) if ( list != null ) { \n\t\t\tfor ( $F26577 ( i ) ) { \n\t\t\t\t$F1729 ( s , list , i ) $F32472 ( s ) result . add ( s ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F14862 ( result ) } \n\tfinally { \n\t\tLibIMobileDevice . delete_StringArray_values_z ( listOut . getValue ( ) ) ; \n\t\t$F1900 ( listOut ) } \n\t} \n"}, {"code": "public static String createArgsString $F24643 ( args ) { \n\t$F4158 ( args ) $F83 ( argsSb ) for ( String arg : args ) { \n\t\tif ( $F80721 ( arg ) && ! StringUtilities . isQuoted ( arg ) ) { \n\t\t\targsSb . append ( StringUtilities . quote ( arg ) ) ; \n\t\t\t} \n\t\telse $F288 ( argsSb , arg ) $F84 ( argsSb ) } \n\tif $F4012 ( argsSb ) { \n\t\t$F90455 ( argsSb ) } \n\t$F92 ( argsSb ) } \n"}, {"code": "public void addElement ( int value ) { \n\tint indexRelativeToCache = m_firstFree - m_buildCacheStartIndex ; \n\tif ( indexRelativeToCache >= NUM00 && indexRelativeToCache < m_blocksize ) { \n\t\tm_buildCache [ indexRelativeToCache ] = value ; \n\t\t++ m_firstFree ; \n\t\t} \n\telse { \n\t\tint index = m_firstFree > > > m_SHIFT ; \n\t\tint offset = m_firstFree & m_MASK ; \n\t\t$F166813 ( index , m_map , newsize , m_numblocks , newMap , System ) $F65714 ( block , m_map , index ) $F166816 ( block , m_map , index , m_blocksize ) block [ offset ] = value ; \n\t\tm_buildCache = block ; \n\t\tm_buildCacheStartIndex = m_firstFree - offset ; \n\t\t++ m_firstFree ; \n\t\t} \n\t} \n"}, {"code": "public static $F4203 $F98026 overlap ( $F98026 lists , int before , int after ) { \n\t$F6853 ( before ) $F6853 ( after ) ListIterator < $F5675 > iter = lists . listIterator ( ) ; \n\t$F98026 result = new ArrayList < $F5675 > $F72 ; \n\tfor ( ; \n\titer . hasNext ( ) ; \n\t) { \n\t\t$F5675 current = new $F5676 $F1682 ( iter ) ; \n\t\t$F5675 prev = before > NUM00 ? findPrevious ( iter ) : null ; \n\t\t$F5675 next = after > NUM00 ? findNext ( iter ) : null ; \n\t\tif ( prev != null ) { \n\t\t\t$F5675 overlap = prev . subList ( prev . size ( ) - before , prev . size ( ) ) ; \n\t\t\t$F177656 ( current , overlap ) } \n\t\tif ( next != null ) { \n\t\t\t$F5675 overlap = next . subList ( NUM00 , after ) ; \n\t\t\tcurrent . addAll ( overlap ) ; \n\t\t\t} \n\t\tresult . add ( current ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public $F3789 extractMainSetJacobian ( final ODEState state ) { \n\tfinal $F1986 p = state . getSecondaryState ( index ) ; \n\tfinal $F3789 dYdY0 = new double [ stateDim ] [ stateDim ] ; \n\tint j = NUM00 ; \n\tfor ( $F119 ( i , stateDim ) ) { \n\t\tSystem . arraycopy ( p , j , dYdY0 [ i ] , NUM00 , stateDim ) ; \n\t\tj += stateDim ; \n\t\t} \n\treturn dYdY0 ; \n\t} \n"}, {"code": "public static void init ( final AsyncContext context ) { \n\tfinal SecurityContext security = ( SecurityContext ) context . getAttribute ( AsyncContext . SECURITY_CTX ) ; \n\tfinal boolean forceSetSecurity = forceSetSecurityContext ( context ) ; \n\tif ( forceSetSecurity ) { \n\t\tSecurityContextHolder . setContext ( security ) ; \n\t\t} \n\tctx . set ( context ) ; \n\t} \n"}, {"code": "private void handleGetCandidateResult ( PlacementTask currentState , Operation postOperation , Map < String , ServerAddress > candidates , Stopwatch placementWatch ) { \n\tServiceUtils . logInfo ( this , NUM00 , placementWatch . elapsed ( TimeUnit . MILLISECONDS ) ) ; \n\tif $F2979 ( candidates ) { \n\t\tString msg = String . format ( NUM00 , currentState . resource ) ; \n\t\tPlacementTask patchState = buildPatch ( TaskState . TaskStage . FAILED , currentState . taskState . isDirect , null ) ; \n\t\tpatchState . resultCode = PlaceResultCode . NO_SUCH_RESOURCE ; \n\t\tpatchState . error = msg ; \n\t\tfailTask ( patchState , new Throwable ( msg ) , postOperation ) ; \n\t\t$F665 } \n\tServiceUtils . logInfo ( this , NUM00 , candidates , currentState . timeoutMs ) ; \n\tStopwatch scoreCandidatesStopwatch = Stopwatch . createStarted ( ) ; \n\tqueryHostsForScores ( currentState . resource , candidates , null ) ; \n\t} \n"}, {"code": "public boolean contains ( JsonElement element ) $F298 ( elements , element ) "}, {"code": "private void appendPath ( Path cp , final Path p ) { \n\tif $F8841 ( p ) $F288 ( cp , p ) } \n"}, {"code": "public static void doDefaultLayout ( Composite parent , DialogField [ ] editors , boolean labelOnTop ) { \n\tdoDefaultLayout ( parent , editors , labelOnTop , NUM00 , NUM00 ) ; \n\t} \n"}, {"code": "protected static final List < CView > processQueryResults ( final ResultSet resultSet , final INaviProject project , final Map < Integer , Set $F97882 > tags , final ITagManager nodeTagManager , final SQLProvider provider , final List < CView > views , final ViewType viewType , final GraphType graphType ) throws SQLException { \n\tfinal Map < Integer , Set $F97882 > nodeTagMap = getNodeTags ( provider . getConnection ( ) , project , nodeTagManager ) ; \n\ttry { \n\t\twhile $F1682 ( resultSet ) { \n\t\t\t$F10411 ( viewId , resultSet ) $F435445 ( name , PostgreSQLHelpers , resultSet ) $F435445 ( description , PostgreSQLHelpers , resultSet ) final Timestamp creationDate = resultSet . getTimestamp ( NUM00 ) ; \n\t\t\tfinal Timestamp modificationDate = resultSet . getTimestamp ( NUM00 ) ; \n\t\t\tfinal boolean starState = resultSet . getBoolean ( NUM00 ) ; \n\t\t\t$F10411 ( nodeCount , resultSet ) $F10411 ( edgeCount , resultSet ) final Set $F97882 viewTags = tags . containsKey ( viewId ) ? tags . get ( viewId ) : new HashSet $F97882 $F72 ; \n\t\t\tfinal Set $F97882 nodeTags = nodeTagMap . containsKey ( viewId ) ? nodeTagMap . get ( viewId ) : new HashSet $F97882 $F72 ; \n\t\t\tfinal CProjectViewGenerator generator = new CProjectViewGenerator ( provider , project ) ; \n\t\t\tviews . add ( generator . generate ( viewId , name , description , viewType , graphType , creationDate , modificationDate , nodeCount , edgeCount , viewTags , nodeTags , starState ) ) ; \n\t\t\t} \n\t\treturn views ; \n\t\t} \n\t$F3229 ( resultSet ) } \n"}, {"code": "private void drawString ( Object nativeFont , String str , int x , int y , int textDecoration , int fontHeight ) { \n\tif $F1277 ( str ) $F932 if ( textDecoration != NUM00 ) { \n\t\tboolean raised = ( textDecoration & Style . TEXT_DECORATION_3D ) != NUM00 ; \n\t\tboolean lowerd = ( textDecoration & Style . TEXT_DECORATION_3D_LOWERED ) != NUM00 ; \n\t\tboolean north = ( textDecoration & Style . TEXT_DECORATION_3D_SHADOW_NORTH ) != NUM00 ; \n\t\tif ( raised || lowerd || north ) { \n\t\t\ttextDecoration = textDecoration & ( ~ Style . TEXT_DECORATION_3D ) & ( ~ Style . TEXT_DECORATION_3D_LOWERED ) & ( ~ Style . TEXT_DECORATION_3D_SHADOW_NORTH ) ; \n\t\t\tint c = getColor ( ) ; \n\t\t\tint a = getAlpha ( ) ; \n\t\t\tint newColor = NUM00 ; \n\t\t\tint offset = - NUM00 ; \n\t\t\tif ( lowerd ) $F18712 ( offset , newColor ) else $F96068 ( north , offset ) setColor ( newColor ) ; \n\t\t\tif ( a == NUM00 ) $F73598 ( setAlpha ) drawString ( nativeFont , str , x , y + offset , textDecoration , fontHeight ) ; \n\t\t\tsetAlpha ( a ) ; \n\t\t\tsetColor ( c ) ; \n\t\t\tdrawString ( nativeFont , str , x , y , textDecoration , fontHeight ) ; \n\t\t\t$F665 } \n\t\tcanvas . drawText ( str , x , y - font . getFontAscent ( ) , font ) ; \n\t\tif ( ( textDecoration & Style . TEXT_DECORATION_UNDERLINE ) != NUM00 ) { \n\t\t\t$F22950 ( paint , Paint ) canvas . drawLine ( x , y + fontHeight - NUM00 , x + impl . stringWidth ( nativeFont , str ) , y + fontHeight - NUM00 , paint ) ; \n\t\t\t} \n\t\tif ( ( textDecoration & Style . TEXT_DECORATION_STRIKETHRU ) != NUM00 ) { \n\t\t\t$F22950 ( paint , Paint ) canvas . drawLine ( x , y + fontHeight / NUM00 , x + impl . stringWidth ( nativeFont , str ) , y + fontHeight / NUM00 , paint ) ; \n\t\t\t} \n\t\tif ( ( textDecoration & Style . TEXT_DECORATION_OVERLINE ) != NUM00 ) { \n\t\t\t$F22950 ( paint , Paint ) canvas . drawLine ( x , y , x + impl . stringWidth ( nativeFont , str ) , y , paint ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tcanvas . drawText ( str , x , y - font . getFontAscent ( ) , font ) ; \n\t\t} \n\t} \n"}, {"code": "protected void parse ( DataInputStream stream ) throws Exception { \n\t$F14539 ( value , stream ) } \n"}, {"code": "public void removeDragEventHandlers $F72 { \n\tnode . removeEventHandler ( TouchEvent . ANY , touchHandler ) ; \n\tnode . removeEventHandler ( MouseEvent . ANY , mouseHandler ) ; \n\t} \n"}, {"code": "protected void installListeners $F72 { \n\tsuper . installListeners ( ) ; \n\ttable . addPropertyChangeListener ( this ) ; \n\t} \n"}, {"code": "public void testCompareToZeroPos $F72 { \n\t$F79258 int bSign = NUM00 ; \n\tBigInteger aNumber = BigInteger . ZERO ; \n\t$F3023 ( bNumber , bSign , bBytes ) $F67217 ( assertEquals , aNumber , bNumber ) } \n"}, {"code": "public void shutdown $F72 throws ConnectionManagerException { \n\t$F973 ( s_logger ) $F8934 ( connectionLock ) try { \n\t\tcloseAllConnections ( ) ; \n\t\tif ( _listener != null ) { \n\t\t\t$F5191 ( _listener ) _listener = null ; \n\t\t\t} \n\t\t$F733 ( executorService ) } \n\tcatch ( Exception e ) { \n\t\tthrow new ConnectionManagerException ( NUM00 , e ) ; \n\t\t} \n\t$F796 ( connectionLock ) } \n"}, {"code": "private void closeWriterExecutionService ( ExecutorService service ) throws CarbonDataWriterException { \n\ttry { \n\t\t$F733 ( service ) service . awaitTermination ( NUM00 , TimeUnit . DAYS ) ; \n\t\t} \n\tcatch ( InterruptedException e ) { \n\t\tLOGGER . error ( e , e . getMessage ( ) ) ; \n\t\t$F33828 ( e ) } \n\t} \n"}, {"code": "public void removeJob ( String jobId ) { \n\t$F80306 ( jobs , jobId ) } \n"}, {"code": "public String formatTimeMillis ( long ts ) { \n\tsynchronized ( timeFormatter ) { \n\t\treturn $F121435 ( timeFormatter , ts ) ; \n\t\t} \n\t} \n"}, {"code": "protected static final int positionCoordinate2D ( float value ) { \n\treturn $F127087 ( value ) ; \n\t} \n"}, {"code": "$F1 public Object clone $F72 { \n\ttry { \n\t\t$F231356 cloneHashMap = ( $F231356 ) super . clone ( ) ; \n\t\tcloneHashMap . elementData = newElementArray ( elementData . length ) ; \n\t\t$F833 ( System , elementData , cloneHashMap ) return cloneHashMap ; \n\t\t} \n\tcatch ( CloneNotSupportedException e ) $F27253 ( e ) } \n"}, {"code": "public int trap $F23416 ( A ) { \n\tif $F12414 ( A ) $F1082 int l = NUM00 ; \n\t$F40997 ( r , A ) int level = NUM00 ; \n\tint all = NUM00 ; \n\tint block = NUM00 ; \n\twhile ( l <= r ) { \n\t\tint curLevel = Math . min ( A [ l ] , A [ r ] ) ; \n\t\tif ( curLevel > level ) { \n\t\t\tall += ( curLevel - level ) * ( r - l + NUM00 ) ; \n\t\t\tlevel = curLevel ; \n\t\t\t} \n\t\tif $F356102 ( A , l , r ) block += A [ l ++ ] ; \n\t\telse block += A [ r -- ] ; \n\t\t} \n\treturn all - block ; \n\t} \n"}, {"code": "public void search $F72 $F5795 ( performSearch ) "}, {"code": "public RemoteSession ( HttpSession session ) { \n\tsuper ( ) ; \n\t$F6161 ( debug , Debug ) this . session = ( HttpSession ) session ; \n\tcreationTime = session . getCreationTime ( ) ; \n\t$F126817 ( id , session ) lastAccessedTime = session . getLastAccessedTime ( ) ; \n\tmaxInactiveInterval = session . getMaxInactiveInterval ( ) ; \n\t$F54171 ( isNew , session ) $F12775 ( internalAttributes ) Enumeration aNames = getAttributeNames ( ) ; \n\twhile $F1444 ( aNames ) { \n\t\t$F14952 ( attributeName , aNames ) if ( isSerializable ( getAttribute ( attributeName ) ) && $F1263 ( attributeName ) && $F1263 ( attributeName ) ) { \n\t\t\tinternalAttributes . put ( attributeName , getAttribute ( attributeName ) ) ; \n\t\t\tinternalAttributeNames . add ( attributeName ) ; \n\t\t\tdebug . message ( NUM00 + attributeName + NUM00 + getAttribute ( attributeName ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F1 public SnmpMibHandler addMib ( SnmpMibAgent mib ) throws IllegalArgumentException { \n\t$F99586 ( mib ) if $F2200 ( mibs , mib ) mibs . addElement ( mib ) ; \n\troot . register ( mib ) ; \n\treturn this ; \n\t} \n"}, {"code": "public boolean exist $F72 $F40347 ( productionRun ) "}, {"code": "public static String numberToString ( Number number ) throws JSONException { \n\tif ( number == null ) $F19954 $F23206 ( doubleValue , number ) JSON . checkDouble ( doubleValue ) ; \n\tif $F1238 ( number , NEGATIVE_ZERO ) $F2455 $F14662 ( longValue , number ) if $F23208 ( doubleValue , longValue ) $F23210 ( Long , longValue ) $F92 ( number ) } \n"}, {"code": "public static SortClause create ( String item , String order ) { \n\treturn new SortClause ( item , ORDER . valueOf ( order ) ) ; \n\t} \n"}, {"code": "public long endTime $F72 { \n\treturn getTimestamp ( ) + calculateDuration ( ) ; \n\t} \n"}, {"code": "protected void buildLeavesMiddleOut ( BallNode node ) throws Exception { \n\tif ( node . m_Left != null && node . m_Right != null ) { \n\t\tbuildLeavesMiddleOut ( node . m_Left ) ; \n\t\tbuildLeavesMiddleOut ( node . m_Right ) ; \n\t\t} \n\telse if ( node . m_Left != null || node . m_Right != null ) $F9451 else { \n\t\tBallNode n2 = buildTreeMiddleOut ( node . m_Start , node . m_End ) ; \n\t\tif ( n2 . m_Left != null && n2 . m_Right != null ) { \n\t\t\tnode . m_Left = n2 . m_Left ; \n\t\t\tnode . m_Right = n2 . m_Right ; \n\t\t\tbuildLeavesMiddleOut ( node ) ; \n\t\t\t} \n\t\telse if ( n2 . m_Left != null || n2 . m_Right != null ) $F9451 } \n\t} \n"}, {"code": "$F1309 public static $F2027 decodeValue ( String a ) { \n\treturn toIntArray ( a . split ( NUM00 ) ) ; \n\t} \n"}, {"code": "public WeightVector ( WeightVector wv ) { \n\tfloat in [ ] = wv . getInternalArray ( ) ; \n\tu = new float [ in . length ] ; \n\t$F7057 ( System , in , u ) size = in . length ; \n\t} \n"}, {"code": "public void waitUntilDone $F72 { \n\t$F8934 ( countLock ) try $F24081 ( equalCountCv ) catch ( InterruptedException e ) $F11389 $F796 ( countLock ) } \n"}, {"code": "public $F14638 insert ( int offset , long l ) $F65298 ( insert , offset , Long , l ) "}, {"code": "public ProjectionPreferencesDialog ( Projector projector ) { \n\tthis . projector = projector ; \n\tString toleranceToolTip = NUM00 + NUM00 ; \n\t$F115588 ( toleranceLabel ) tolerance . setToolTipText ( toleranceToolTip ) ; \n\ttoleranceLabel . setToolTipText ( toleranceToolTip ) ; \n\tmainPanel . addItemLabel ( toleranceLabel , tolerance ) ; \n\tif ( projector . getProjectionMethod ( ) instanceof ProjectCoordinate ) { \n\t\t$F296661 ( mainPanel , autoFind ) } \n\tfillFieldValues ( ) ; \n\tsetContentPane ( mainPanel ) ; \n\t} \n"}, {"code": "private Element generateBranch ( TreeType treeType , RootedTree tree , Node node , String nodeName , double startLatitude , double finishLatitude , double startLongitude , double finishLongitude , double startAltitude , double finishAltitude , double peakPosition , double peakAltitude , double startDate , double finishDate , double ageCutOff , LineStyle startStyle , LineStyle finishStyle , int divisionCount , $F15369 styles ) { \n\tElement element ; \n\tDouble rate = ( Double ) node . getAttribute ( NUM00 ) ; \n\tDouble support = ( Double ) node . getAttribute ( NUM00 ) ; \n\tdouble height = tree . getHeight ( node ) ; \n\tboolean hasDivisionStyles = startStyle != null && finishStyle != null ; \n\tif ( divisionCount > NUM00 ) { \n\t\tdouble latDiff = finishLatitude - startLatitude ; \n\t\tdouble latDelta = latDiff / divisionCount ; \n\t\tdouble longDiff = finishLongitude - startLongitude ; \n\t\tdouble longDelta = longDiff / divisionCount ; \n\t\tdouble altDiff = finishAltitude - startAltitude ; \n\t\tdouble altDelta = altDiff / divisionCount ; \n\t\tdouble dateDiff = finishDate - startDate ; \n\t\tdouble dateDelta = dateDiff / divisionCount ; \n\t\tdouble lastLatitude = startLatitude ; \n\t\tdouble latitude = startLatitude + latDelta ; \n\t\tdouble lastLongitude = startLongitude ; \n\t\tdouble longitude = startLongitude + longDelta ; \n\t\tdouble x = - peakPosition ; \n\t\tdouble xDelta = NUM00 / divisionCount ; \n\t\tdouble a = peakAltitude - finishAltitude ; \n\t\tif ( peakPosition == NUM00 ) { \n\t\t\ta *= NUM00 ; \n\t\t\t} \n\t\tdouble altitude = peakAltitude - ( a * ( x * x ) ) ; \n\t\tdouble lastAltitude = altitude ; \n\t\tx += xDelta ; \n\t\tdouble date = startDate ; \n\t\tString styleName = null ; \n\t\tif ( ! hasDivisionStyles && startStyle != null ) { \n\t\t\tstyleName = nodeName + NUM00 ; \n\t\t\tstyles . add ( generateLineStyle ( styleName , startStyle . getWidth ( ) , startStyle . getColor ( ) ) ) ; \n\t\t\t} \n\t\telement = generateContainer ( NUM00 , nodeName , null , ( styleName != null ? NUM00 + styleName : null ) ) ; \n\t\tfor ( $F119 ( division , divisionCount ) ) { \n\t\t\tif ( ageCutOff == NUM00 || date > ageCutOff ) { \n\t\t\t\tString partName = nodeName + NUM00 + ( division + NUM00 ) ; \n\t\t\t\tstyleName = null ; \n\t\t\t\tif ( hasDivisionStyles ) { \n\t\t\t\t\tstyleName = partName + NUM00 ; \n\t\t\t\t\t} \n\t\t\t\tElement placeMark = generateContainer ( NUM00 , partName , null , ( styleName != null ? NUM00 + styleName : null ) ) ; \n\t\t\t\tannotateBranch ( placeMark , height , startDate , finishDate , rate , support ) ; \n\t\t\t\tif ( hasDivisionStyles ) { \n\t\t\t\t\t$F324 ( width , startStyle ) Color color = getBlendedColor ( $F61779 ( division ) / ( divisionCount - NUM00 ) , startStyle . getColor ( ) , finishStyle . getColor ( ) ) ; \n\t\t\t\t\t$F139397 ( styles , generateLineStyle , styleName , width , color ) } \n\t\t\t\tif ( dateDiff > NUM00 ) { \n\t\t\t\t\tElement timeSpan = new Element $F580 ; \n\t\t\t\t\ttimeSpan . addContent ( generateElement ( NUM00 , getKMLDate ( date ) ) ) ; \n\t\t\t\t\tplaceMark . addContent ( timeSpan ) ; \n\t\t\t\t\t} \n\t\t\t\tElement lineString = new Element $F580 ; \n\t\t\t\tElement coordinates = new Element $F580 ; \n\t\t\t\tif ( altDiff > NUM00 || peakAltitude > NUM00 ) { \n\t\t\t\t\tlineString . addContent ( generateElement ( NUM00 , altitudeMode ) ) ; \n\t\t\t\t\taltitude = peakAltitude - ( a * ( x * x ) ) ; \n\t\t\t\t\tcoordinates . addContent ( NUM00 + lastLongitude + NUM00 + lastLatitude + NUM00 + lastAltitude + NUM00 ) ; \n\t\t\t\t\tcoordinates . addContent ( NUM00 + longitude + NUM00 + latitude + NUM00 + altitude + NUM00 ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tlineString . addContent ( generateElement ( NUM00 , NUM00 ) ) ; \n\t\t\t\t\tlineString . addContent ( generateElement ( NUM00 , _BOOL ) ) ; \n\t\t\t\t\tcoordinates . addContent ( NUM00 + lastLongitude + NUM00 + lastLatitude + NUM00 ) ; \n\t\t\t\t\tcoordinates . addContent ( NUM00 + longitude + NUM00 + latitude + NUM00 ) ; \n\t\t\t\t\t} \n\t\t\t\tlastLatitude = latitude ; \n\t\t\t\tlatitude += latDelta ; \n\t\t\t\tlastLongitude = longitude ; \n\t\t\t\tlongitude += longDelta ; \n\t\t\t\tlastAltitude = altitude ; \n\t\t\t\tx += xDelta ; \n\t\t\t\tdate += dateDelta ; \n\t\t\t\tlineString . addContent ( coordinates ) ; \n\t\t\t\tplaceMark . addContent ( lineString ) ; \n\t\t\t\telement . addContent ( placeMark ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse { \n\t\tString styleName = null ; \n\t\tif ( startStyle != null ) { \n\t\t\tstyleName = nodeName + NUM00 ; \n\t\t\t$F324 ( width , startStyle ) styles . add ( generateLineStyle ( styleName , width , startStyle . getColor ( ) ) ) ; \n\t\t\t} \n\t\telement = generateContainer ( NUM00 , nodeName , null , ( styleName != null ? NUM00 + styleName : null ) ) ; \n\t\tannotateBranch ( element , height , startDate , finishDate , rate , support ) ; \n\t\tElement lineString = new Element $F580 ; \n\t\tlineString . addContent ( generateElement ( NUM00 , altitudeMode ) ) ; \n\t\tElement coordinates = new Element $F580 ; \n\t\tif ( treeType == TreeType . RECTANGLE_TREE ) { \n\t\t\tcoordinates . addContent ( NUM00 + finishLongitude + NUM00 + finishLatitude + NUM00 + finishAltitude + NUM00 ) ; \n\t\t\tcoordinates . addContent ( NUM00 + finishLongitude + NUM00 + finishLatitude + NUM00 + startAltitude + NUM00 ) ; \n\t\t\tcoordinates . addContent ( NUM00 + startLongitude + NUM00 + startLatitude + NUM00 + startAltitude + NUM00 ) ; \n\t\t\t} \n\t\telse { \n\t\t\tcoordinates . addContent ( NUM00 + finishLongitude + NUM00 + finishLatitude + NUM00 + finishAltitude + NUM00 ) ; \n\t\t\tcoordinates . addContent ( NUM00 + startLongitude + NUM00 + startLatitude + NUM00 + startAltitude + NUM00 ) ; \n\t\t\t} \n\t\tlineString . addContent ( coordinates ) ; \n\t\telement . addContent ( lineString ) ; \n\t\t} \n\treturn element ; \n\t} \n"}, {"code": "public void addTableValueChangeListener ( TableValueChangeListener listener ) $F38373 ( listener , m_listeners ) "}, {"code": "$F1 public int print ( Graphics g , PageFormat pageFormat , int pageIndex ) { \n\tif ( pageIndex > NUM00 ) $F3139 ( NO_SUCH_PAGE ) else { \n\t\t$F20230 ( g2d , g ) g2d . translate ( pageFormat . getImageableX ( ) , pageFormat . getImageableY ( ) ) ; \n\t\tdouble fHeight = pageFormat . getImageableHeight ( ) ; \n\t\tdouble fWidth = pageFormat . getImageableWidth ( ) ; \n\t\tint xMax = NUM00 ; \n\t\tint yMax = NUM00 ; \n\t\tfor ( int iNode = NUM00 ; \n\t\tiNode < m_BayesNet . getNrOfNodes ( ) ; \n\t\tiNode ++ ) { \n\t\t\tif ( xMax < m_BayesNet . getPositionX ( iNode ) ) { \n\t\t\t\txMax = m_BayesNet . getPositionX ( iNode ) ; \n\t\t\t\t} \n\t\t\tif ( yMax < m_BayesNet . getPositionY ( iNode ) ) { \n\t\t\t\tyMax = m_BayesNet . getPositionY ( iNode ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tdouble fCurrentScale = m_fScale ; \n\t\txMax += m_nPaddedNodeWidth + NUM00 ; \n\t\tif ( fWidth / xMax < fHeight / yMax ) { \n\t\t\tm_fScale = fWidth / xMax ; \n\t\t\t} \n\t\telse { \n\t\t\tm_fScale = fHeight / yMax ; \n\t\t\t} \n\t\tpaint ( g2d ) ; \n\t\tm_fScale = fCurrentScale ; \n\t\treturn ( PAGE_EXISTS ) ; \n\t\t} \n\t} \n"}, {"code": "public LinkedHashMap < Pokemon , NicknamePokemonResponse . Result > bulkRenameWithPattern ( final String pattern , final BiConsumer < NicknamePokemonResponse . Result , Pokemon > perPokeCallback ) { \n\tfinal LinkedHashMap < Pokemon , NicknamePokemonResponse . Result > $F161023 ( results ) ; \n\t$F22620 ( mons ) return results ; \n\t} \n"}, {"code": "protected static $F30974 parseDirectives ( $F96 buf , $F806 keyTable , $F4358 ( realmChoices ) , int realmIndex ) throws SaslException { \n\t$F30974 valueTable = new byte [ keyTable . length ] [ ] ; \n\t$F121388 ( key ) $F121388 ( value ) boolean gettingKey = _BOOL ; \n\tboolean gettingQuotedValue = _BOOL ; \n\tboolean expectSeparator = _BOOL ; \n\tbyte bch ; \n\tint i = skipLws ( buf , NUM00 ) ; \n\twhile ( i < buf . length ) { \n\t\tbch = buf [ i ] ; \n\t\tif ( gettingKey ) { \n\t\t\tif ( bch == NUM00 ) { \n\t\t\t\tif $F6887 ( key ) { \n\t\t\t\t\tthrow new SaslException ( NUM00 + key ) ; \n\t\t\t\t\t} \n\t\t\t\ti = skipLws ( buf , i + NUM00 ) ; \n\t\t\t\t} \n\t\t\telse if ( bch == NUM00 ) { \n\t\t\t\tif $F10471 ( key ) { \n\t\t\t\t\t$F180829 } \n\t\t\t\tgettingKey = _BOOL ; \n\t\t\t\ti = skipLws ( buf , i + NUM00 ) ; \n\t\t\t\tif ( i < buf . length ) { \n\t\t\t\t\tif ( buf [ i ] == NUM00 ) { \n\t\t\t\t\t\tgettingQuotedValue = _BOOL ; \n\t\t\t\t\t\t++ i ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tthrow new SaslException $F3943 ( key ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse if ( isLws ( bch ) ) { \n\t\t\t\ti = skipLws ( buf , i + NUM00 ) ; \n\t\t\t\tif ( i < buf . length ) { \n\t\t\t\t\tif ( buf [ i ] != NUM00 ) { \n\t\t\t\t\t\tthrow new SaslException $F3943 ( key ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tthrow new SaslException $F3943 ( key ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tkey . write ( bch ) ; \n\t\t\t\t++ i ; \n\t\t\t\t} \n\t\t\t} \n\t\telse if ( gettingQuotedValue ) { \n\t\t\tif ( bch == NUM00 ) { \n\t\t\t\t++ i ; \n\t\t\t\tif ( i < buf . length ) { \n\t\t\t\t\tvalue . write ( buf [ i ] ) ; \n\t\t\t\t\t++ i ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tthrow new SaslException ( $F148552 ( key , value ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse if ( bch == NUM00 ) { \n\t\t\t\t++ i ; \n\t\t\t\tgettingQuotedValue = _BOOL ; \n\t\t\t\texpectSeparator = _BOOL ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tvalue . write ( bch ) ; \n\t\t\t\t++ i ; \n\t\t\t\t} \n\t\t\t} \n\t\telse if ( isLws ( bch ) || bch == NUM00 ) { \n\t\t\textractDirective ( key . toString ( ) , value . toByteArray ( ) , keyTable , valueTable , realmChoices , realmIndex ) ; \n\t\t\t$F2268 ( key ) $F2268 ( value ) gettingKey = _BOOL ; \n\t\t\tgettingQuotedValue = expectSeparator = _BOOL ; \n\t\t\ti = skipLws ( buf , i + NUM00 ) ; \n\t\t\t} \n\t\telse if ( expectSeparator ) { \n\t\t\tthrow new SaslException $F134423 ( value ) ; \n\t\t\t} \n\t\telse { \n\t\t\tvalue . write ( bch ) ; \n\t\t\t++ i ; \n\t\t\t} \n\t\t} \n\tif ( gettingQuotedValue ) { \n\t\tthrow new SaslException ( $F148552 ( key , value ) ) ; \n\t\t} \n\tif $F3817 ( key ) { \n\t\textractDirective ( key . toString ( ) , value . toByteArray ( ) , keyTable , valueTable , realmChoices , realmIndex ) ; \n\t\t} \n\treturn valueTable ; \n\t} \n"}, {"code": "public static Assignment createDefault ( String ... variables ) $F28185 ( createDefault , Arrays , variables ) "}, {"code": "private void onStopAttack $F72 { \n\tattacking = null ; \n\t} \n"}, {"code": "$F32186 ( reader , this , _BOOL ) "}, {"code": "void calculatePressed ( ActionEvent e ) { \n\t$F84963 ( checkEditConditional ) if ( numConditionals > NUM00 ) { \n\t\tString cName = NUM00 ; \n\t\tConditional c = null ; \n\t\tfor ( $F119 ( i , numConditionals ) ) { \n\t\t\tcName = _curLogix . getConditionalByNumberOrder ( i ) ; \n\t\t\tif ( cName != null ) { \n\t\t\t\tc = _conditionalManager . getBySystemName ( cName ) ; \n\t\t\t\tif ( c == null ) $F17663 ( log , cName ) else { \n\t\t\t\t\tc . calculate ( _BOOL , null ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse $F21338 ( log ) } \n\t\t$F15362 ( conditionalTableModel ) } \n\t} \n"}, {"code": "public static FunctionAlias newInstance ( Schema schema , int id , String name , String javaClassMethod , boolean force , boolean bufferResultSetToLocalTemp ) { \n\tFunctionAlias alias = new FunctionAlias ( schema , id , name ) ; \n\t$F1384 ( paren , javaClassMethod ) int lastDot = javaClassMethod . lastIndexOf ( NUM00 , paren < NUM00 ? javaClassMethod . length ( ) : paren ) ; \n\tif ( lastDot < NUM00 ) { \n\t\tthrow DbException . get ( ErrorCode . SYNTAX_ERROR_1 , javaClassMethod ) ; \n\t\t} \n\talias . className = javaClassMethod . substring ( NUM00 , lastDot ) ; \n\talias . methodName = javaClassMethod . substring ( lastDot + NUM00 ) ; \n\talias . bufferResultSetToLocalTemp = bufferResultSetToLocalTemp ; \n\talias . init ( force ) ; \n\treturn alias ; \n\t} \n"}, {"code": "protected void updateMenu $F72 { \n\tboolean present ; \n\tboolean initializing ; \n\tboolean running ; \n\tboolean stopping ; \n\tboolean active ; \n\t$F8249 ( m_MenuBar ) present = ( m_Experiment != null ) ; \n\tinitializing = present && m_Experiment . isInitializing ( ) ; \n\trunning = present && m_Experiment . isRunning ( ) ; \n\tstopping = present && m_Experiment . isStopping ( ) ; \n\tactive = initializing || running || stopping ; \n\tm_MenuItemFileNew . setEnabled ( ! active ) ; \n\tm_MenuItemFileOpen . setEnabled ( ! active ) ; \n\tm_MenuItemFileSave . setEnabled ( present && $F89491 ( getCurrentFile ) ) ; \n\tm_MenuItemFileSaveAs . setEnabled ( present ) ; \n\tm_MenuItemFileClose . setEnabled ( ! active ) ; \n\tm_MenuItemExecutionStart . setEnabled ( present && ! active ) ; \n\tm_MenuItemExecutionStop . setEnabled ( present && running ) ; \n\tfor ( AbstractExperimenterMenuItem item : m_AdditionalMenuItems . keySet ( ) ) item . update ( this , m_AdditionalMenuItems . get ( item ) ) ; \n\t} \n"}, {"code": "$F1113 @ ObjectiveCName ( NUM00 ) public ConfigurationBuilder addAutoJoinGroup ( String groupTokenOrShortName ) $F18637 ( autoJoinGroups , groupTokenOrShortName , this ) "}, {"code": "public boolean hasValueInfo $F72 { \n\treturn $F1263 ( receiverValue ) || methodArgumentValues != null ; \n\t} \n"}, {"code": "public boolean nextIsSep $F72 { \n\tif ( $F15875 ( Character , str , currentPosition ) ) return _BOOL ; \n\telse return _BOOL ; \n\t} \n"}, {"code": "$F31396 ( str , retval , ch , i , s , Integer ) "}, {"code": "protected void dropCar ( PrintWriter file , Car car , boolean isManifest ) { \n\tif ( isManifest ) { \n\t\tStringBuffer buf = new StringBuffer ( padAndTruncateString ( Setup . getDropCarPrefix ( ) , Setup . getManifestPrefixLength ( ) ) ) ; \n\t\t$F806 format = Setup . getDropManifestMessageFormat ( ) ; \n\t\tboolean isLocal = isLocalMove ( car ) ; \n\t\tif ( isLocal ) { \n\t\t\tbuf = new StringBuffer ( padAndTruncateString ( Setup . getLocalPrefix ( ) , Setup . getManifestPrefixLength ( ) ) ) ; \n\t\t\tformat = Setup . getLocalManifestMessageFormat ( ) ; \n\t\t\t} \n\t\tdropCar ( file , car , buf , format , isLocal , isManifest ) ; \n\t\t} \n\telse { \n\t\tStringBuffer buf = new StringBuffer ( padAndTruncateString ( Setup . getSwitchListDropCarPrefix ( ) , Setup . getSwitchListPrefixLength ( ) ) ) ; \n\t\t$F806 format = Setup . getDropSwitchListMessageFormat ( ) ; \n\t\tboolean isLocal = isLocalMove ( car ) ; \n\t\tif ( isLocal ) { \n\t\t\tbuf = new StringBuffer ( padAndTruncateString ( Setup . getSwitchListLocalPrefix ( ) , Setup . getSwitchListPrefixLength ( ) ) ) ; \n\t\t\tformat = Setup . getLocalSwitchListMessageFormat ( ) ; \n\t\t\t} \n\t\tdropCar ( file , car , buf , format , isLocal , isManifest ) ; \n\t\t} \n\t} \n"}, {"code": "@ AfterMethod public void deleteStorage $F72 throws BusinessException , IOException , SerializationException { \n\tif ( null != storageData ) { \n\t\tif ( storageManager . getRecordingState ( ) == RecordingState . ON ) { \n\t\t\tstorageManager . stopRecording ( ) ; \n\t\t\t} \n\t\tif ( ! storageManager . isStorageClosed ( storageData ) ) { \n\t\t\tstorageManager . closeStorage ( storageData ) ; \n\t\t\t} \n\t\tstorageManager . deleteStorage ( storageData ) ; \n\t\tstorageData = null ; \n\t\t} \n\tassertThat ( storageManager . getExistingStorages ( ) , is ( empty ( ) ) ) ; \n\t} \n"}, {"code": "public final void removeElementAt ( int i ) { \n\tif ( i > m_firstFree ) $F173011 ( System , m_map , i , m_firstFree ) else $F7532 ( m_map , i , java ) m_firstFree -- ; \n\t} \n"}, {"code": "protected int keyOnList $F13322 ( key , list ) { \n\tint ret = - NUM00 ; \n\tint index = NUM00 ; \n\tif ( list != null ) { \n\t\tfor ( String listKey : list ) { \n\t\t\t$F236528 ( listKey , key , ret , index ) index ++ ; \n\t\t\t} \n\t\t} \n\treturn ret ; \n\t} \n"}, {"code": "private boolean incrementSentence $F72 throws IOException { \n\t$F116 ( length , _BOOL ) while ( _BOOL ) { \n\t\tint start = iterator . current ( ) ; \n\t\tif ( start == BreakIterator . DONE ) return _BOOL ; \n\t\t$F128162 ( end , iterator ) if ( end == BreakIterator . DONE ) return _BOOL ; \n\t\tsetNextSentence ( start , end ) ; \n\t\t$F58185 ( incrementWord , _BOOL ) } \n\t} \n"}, {"code": "Enumeration < CryptoPermissionEntry > permissionElements $F72 $F10806 ( permissionEntries ) "}, {"code": "$F52843 ( packed , map , i , j , count , value ) "}, {"code": "private static void populateAccessRequest ( AccessRequest accessRequest ) { \n\taccessRequest . setAccessLicenseNumber ( props . getProperty ( LICENSE1BER ) ) ; \n\taccessRequest . setUserId ( props . getProperty ( USER_NAME ) ) ; \n\taccessRequest . setPassword ( props . getProperty ( PASSWORD ) ) ; \n\t} \n"}, {"code": "public BinaryTable ( Header myHeader ) throws FitsException { \n\tlong heapSizeL = myHeader . getLongValue ( PCOUNT ) ; \n\tlong heapOffsetL = myHeader . getLongValue ( THEAP ) ; \n\tif ( heapOffsetL > MAX_INTEGER_VALUE ) { \n\t\tthrow new FitsException $F580 ; \n\t\t} \n\tif ( heapSizeL > MAX_INTEGER_VALUE ) { \n\t\tthrow new FitsException $F580 ; \n\t\t} \n\tif ( heapSizeL - heapOffsetL > MAX_INTEGER_VALUE ) { \n\t\tthrow new FitsException $F580 ; \n\t\t} \n\tthis . heapOffset = ( int ) heapOffsetL ; \n\t$F29204 ( heapSize , heapSizeL ) int rwsz = myHeader . getIntValue ( NAXIS1 ) ; \n\tthis . nRow = myHeader . getIntValue ( NAXIS2 ) ; \n\tif ( this . heapOffset > NUM00 ) { \n\t\tthis . heapOffset -= this . nRow * rwsz ; \n\t\t} \n\tif ( this . heapOffset < NUM00 || this . heapOffset > heapSize ) { \n\t\tthrow new FitsException $F580 ; \n\t\t} \n\tthis . heap = new FitsHeap ( heapSize - this . heapOffset ) ; \n\tint nCol = myHeader . getIntValue ( TFIELDS ) ; \n\tthis . rowLen = NUM00 ; \n\tfor ( $F119 ( col , nCol ) ) { \n\t\tthis . rowLen += processCol ( myHeader , col ) ; \n\t\t} \n\tHeaderCard card = myHeader . findCard ( NAXIS1 ) ; \n\tcard . setValue ( String . valueOf ( this . rowLen ) ) ; \n\tmyHeader . updateLine ( NAXIS1 , card ) ; \n\t} \n"}, {"code": "public static TaskContext current $F72 { \n\tfinal Deque < TaskContext > stack = contextStacks . get ( ) ; \n\t$F1338 ( stack ) return stack . peekLast ( ) ; \n\t} \n"}, {"code": "public static $F96 concat ( final $F96 ... arrays ) { \n\tint totalSize = NUM00 ; \n\tfor ( final $F96 array : arrays ) { \n\t\ttotalSize += array . length ; \n\t\t} \n\tint startIndex = NUM00 ; \n\t$F4727 ( result , totalSize ) for ( final $F96 array : arrays ) $F181805 ( System , array , result , startIndex ) return result ; \n\t} \n"}, {"code": "public JKNamespace $F2236 ( url , prefix ) { \n\t$F124174 ( logger , String , url , prefix ) this . url = url ; \n\tthis . prefix = prefix ; \n\t} \n"}, {"code": "public boolean isLifo $F72 $F94352 ( cm , getCostingMethod , COSTINGMETHOD_Lifo , COSTELEMENTTYPE_Material , getCostElementType ) "}, {"code": "public static void main $F4374 ( args ) throws Exception { \n\tfinal String cfg = NUM00 ; \n\tfinal Class < ? extends BenchmarkDriver > benchmark = IgniteSqlQueryBenchmark . class ; \n\tfinal int threads = NUM00 ; \n\tfinal boolean clientDriverNode = _BOOL ; \n\tfinal int extraNodes = NUM00 ; \n\tfinal int warmUp = NUM00 ; \n\tfinal int duration = NUM00 ; \n\tfinal int range = NUM00 ; \n\tfinal boolean throughputLatencyProbe = _BOOL ; \n\tfor ( $F119 ( i , extraNodes ) ) { \n\t\tIgniteConfiguration nodeCfg = Ignition . loadSpringBean ( cfg , NUM00 ) ; \n\t\tnodeCfg . setGridName ( NUM00 + i ) ; \n\t\tnodeCfg . setMetricsLogFrequency ( NUM00 ) ; \n\t\tIgnition . start ( nodeCfg ) ; \n\t\t} \n\t$F22547 ( args0 ) addArg ( args0 , NUM00 , threads ) ; \n\taddArg ( args0 , NUM00 , warmUp ) ; \n\taddArg ( args0 , NUM00 , duration ) ; \n\taddArg ( args0 , NUM00 , range ) ; \n\taddArg ( args0 , NUM00 , benchmark . getSimpleName ( ) ) ; \n\taddArg ( args0 , NUM00 , NUM00 ) ; \n\taddArg ( args0 , NUM00 , cfg ) ; \n\tif ( throughputLatencyProbe ) addArg ( args0 , NUM00 , NUM00 ) ; \n\tif ( clientDriverNode ) $F18793 ( args0 ) BenchmarkDriverStartUp . main ( $F10148 ( args0 ) ) ; \n\t} \n"}, {"code": "public static boolean safeNavigationOperatorDefined ( String nestedFieldName ) { \n\tif $F105 ( nestedFieldName , SAFE_NAVIGATION_OPERATOR ) if $F34844 ( nestedFieldName , SAFE_NAVIGATION_OPERATOR ) throw new MappingException $F580 ; \n\telse return _BOOL ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static boolean isEnabled $F72 { \n\t$F22771 ( sEnabled , detectEnabled ) $F44652 ( sEnabled ) } \n"}, {"code": "public boolean intersects ( GeoBounds other ) { \n\tboolean rv = _BOOL ; \n\tfor ( Rectangle2D r1 : rects ) { \n\t\tfor ( Rectangle2D r2 : other . rects ) { \n\t\t\trv = r1 . intersects ( r2 ) ; \n\t\t\t$F30711 ( rv ) } \n\t\t$F30711 ( rv ) } \n\treturn rv ; \n\t} \n"}, {"code": "public void dispose $F72 $F9096 ( mListeners ) "}, {"code": "public void openImageGallery ( final ActionListener response ) { \n\topenGallery ( response , Display . GALLERY_IMAGE ) ; \n\t} \n"}, {"code": "private void readObject ( final java . io . ObjectInputStream in ) throws $F6427 { \n\t$F128845 ( inequalitySymbol , in ) ; \n\t$F33039 ( timeStamp , in ) } \n"}, {"code": "String popBaseIndentifier $F72 $F283374 ( m_baseIdentifiers ) "}, {"code": "$F5466 public static File resolveDrawable ( $F1113 RenderResources resources , $F5466 ResourceValue drawable , $F1113 Project project ) { \n\tif ( drawable != null ) { \n\t\tdrawable = resources . resolveResValue ( drawable ) ; \n\t\t} \n\t$F1338 ( drawable ) $F840 ( result , drawable ) StateList stateList = resolveStateList ( resources , drawable , project ) ; \n\tif ( stateList != null ) { \n\t\tList < StateListState > states = stateList . getStates ( ) ; \n\t\tif $F5973 ( states ) { \n\t\t\tStateListState $F7662 ( state , states ) ; \n\t\t\t$F37891 ( result , state ) } \n\t\t} \n\t$F1338 ( result ) $F15885 ( file , result ) return file . isFile ( ) ? file : null ; \n\t} \n"}, {"code": "public static void delete ( String code , JDA jda ) { \n\tInvite invite = resolve ( code ) ; \n\tif ( invite == null ) throw new IllegalArgumentException ( NUM00 + NUM00 + code ) ; \n\tdelete ( invite , jda ) ; \n\t} \n"}, {"code": "private void updateHeaderSeparator $F72 { \n\tfinal String bestDateTimePattern = DateFormatUtils . getBestDateTimePattern ( mCurrentLocale , ( mIs24HourView ) ? NUM00 : NUM00 ) ; \n\tfinal String separatorText ; \n\tfinal $F1469 $F167305 ( hourFormats ) ; \n\tint hIndex = lastIndexOfAny ( bestDateTimePattern , hourFormats ) ; \n\tif ( hIndex == - NUM00 ) { \n\t\tseparatorText = NUM00 ; \n\t\t} \n\telse { \n\t\tseparatorText = Character . toString ( bestDateTimePattern . charAt ( hIndex + NUM00 ) ) ; \n\t\t} \n\tmSeparatorView . setText ( separatorText ) ; \n\t} \n"}, {"code": "protected void connectionFailed ( Channel failedChannel , IOException cause ) { \n\tfailureCause = IOExceptionSupport . create ( cause ) ; \n\tchannel = failedChannel ; \n\tconnected . set ( _BOOL ) ; \n\t$F38783 ( connectLatch ) } \n"}, {"code": "public void testMissingApplication $F72 throws Exception { \n\tmEnabled . add ( LauncherActivityDetector . ISSUE_MORE_THAN_ONE_LAUNCHER ) ; \n\tmEnabled . add ( LauncherActivityDetector . ISSUE_MISSING_LAUNCHER ) ; \n\tmEnabled . add ( LauncherActivityDetector . ISSUE_LAUNCHER_ACTIVITY_IN_LIBRARY ) ; \n\tString expected = NUM00 ; \n\tString result = lintProject ( xml ( FN_ANDROID_MANIFEST_XML , $F40 ) ) ; \n\tassertEquals ( expected , result ) ; \n\t} \n"}, {"code": "public String toString $F72 { \n\tArrayList fields = new ArrayList $F989 ; \n\tfields . add ( codebase ) ; \n\tfields . add ( policy ) ; \n\tfields . add ( classpath ) ; \n\tfields . add ( implClassName ) ; \n\tfields . add ( ( ( serverConfigArgs == null ) ? null : Arrays . asList ( serverConfigArgs ) ) ) ; \n\tfields . add ( lifeCycle ) ; \n\tfields . add ( servicePreparer ) ; \n\t$F92 ( fields ) } \n"}, {"code": "public Drawable createFromPath ( String pathName ) { \n\treturn Drawable . createFromPath ( pathName ) ; \n\t} \n"}, {"code": "$F1 public void parse ( Reader reader , String baseURI ) throws IOException , RDFParseException , RDFHandlerException { \n\t$F826 ( reader ) $F826 ( baseURI ) $F77995 ( inputSource , reader ) inputSource . setSystemId ( baseURI ) ; \n\tparse ( inputSource ) ; \n\t} \n"}, {"code": "final public void print ( double v ) { \n\ttry $F91838 ( _out , v ) $F53427 ( log , Level , e ) } \n"}, {"code": "public static boolean isEmpty ( String string ) $F215747 ( string ) "}, {"code": "public static boolean isXML11ValidName ( String name ) { \n\t$F115 ( length , name ) $F116 ( length , _BOOL ) int i = NUM00 ; \n\t$F12685 ( ch , name ) $F12693 ( isXML11NameStart , ch , length , isXML11NameHighSurrogate , ch2 , name , XMLChar , _BOOL , i ) $F12699 ( i , length , ch , name , isXML11Name , isXML11NameHighSurrogate , ch2 , XMLChar , _BOOL ) return _BOOL ; \n\t} \n"}, {"code": "public void reset $F72 { \n\t$F725 ( mExpectedEvents ) mExpectedInterrupt = _BOOL ; \n\tmReplaying = _BOOL ; \n\t} \n"}, {"code": "String generateDigest ( File fileDir , String fileName ) { \n\tfinal String algorithm = NUM00 ; \n\tInputStream fileStream = null ; \n\tDigestInputStream d = null ; \n\ttry { \n\t\tfileStream = getFileStream ( fileDir , fileName ) ; \n\t\t$F156 ( md , MessageDigest , algorithm ) d = new DigestInputStream ( fileStream , md ) ; \n\t\t$F12496 ( buffer ) while $F127801 ( d , buffer ) $F845 return toHexString ( md . digest ( ) ) ; \n\t\t} \n\tcatch ( NoSuchAlgorithmException e ) $F70142 ( algorithm ) catch ( IOException e ) $F25910 ( CLog , e ) finally { \n\t\tStreamUtil . closeStream ( d ) ; \n\t\tStreamUtil . closeStream ( fileStream ) ; \n\t\t} \n\t$F1278 } \n"}, {"code": "public AgentConfig environmentToConfiguration ( Environment environment , long platformId ) { \n\tAgentConfig agentConfiguration = new AgentConfig $F72 ; \n\tagentConfiguration . setPlatformId ( platformId ) ; \n\tif ( CollectionUtils . isNotEmpty ( environment . getPlatformSensorConfigs ( ) ) ) { \n\t\tCollection < PlatformSensorTypeConfig > $F204 ( platformSensorTypeConfigs ) ; \n\t\tfor ( IPlatformSensorConfig platformSensorConfig : environment . getPlatformSensorConfigs ( ) ) { \n\t\t\tif $F80957 ( platformSensorConfig ) $F18351 ( platformSensorTypeConfigs , getPlatformSensorTypeConfig , platformId , platformSensorConfig ) } \n\t\tagentConfiguration . setPlatformSensorTypeConfigs ( platformSensorTypeConfigs ) ; \n\t\t} \n\telse { \n\t\tagentConfiguration . setPlatformSensorTypeConfigs ( Collections . < PlatformSensorTypeConfig > $F9639 ) ; \n\t\t} \n\tif ( CollectionUtils . isNotEmpty ( environment . getMethodSensorConfigs ( ) ) ) { \n\t\tCollection < MethodSensorTypeConfig > $F204 ( methodSensorTypeConfigs ) ; \n\t\tfor ( IMethodSensorConfig methodSensorConfig : environment . getMethodSensorConfigs ( ) ) $F18351 ( methodSensorTypeConfigs , getMethodSensorTypeConfig , platformId , methodSensorConfig ) agentConfiguration . setMethodSensorTypeConfigs ( methodSensorTypeConfigs ) ; \n\t\t} \n\telse { \n\t\tagentConfiguration . setMethodSensorTypeConfigs ( Collections . < MethodSensorTypeConfig > $F9639 ) ; \n\t\t} \n\tIExceptionSensorConfig exceptionSensorConfig = environment . getExceptionSensorConfig ( ) ; \n\tif ( null != exceptionSensorConfig ) { \n\t\tagentConfiguration . setExceptionSensorTypeConfig ( getExceptionSensorTypeConfig ( platformId , exceptionSensorConfig ) ) ; \n\t\t} \n\tJmxSensorConfig jmxSensorConfig = environment . getJmxSensorConfig ( ) ; \n\tif ( null != jmxSensorConfig ) { \n\t\tagentConfiguration . setJmxSensorTypeConfig ( getJmxSensorTypeConfig ( platformId , jmxSensorConfig ) ) ; \n\t\t} \n\tIStrategyConfig bufferStrategyConfig = environment . getBufferStrategyConfig ( ) ; \n\tagentConfiguration . setBufferStrategyConfig ( new StrategyConfig ( bufferStrategyConfig . getClassName ( ) , bufferStrategyConfig . getSettings ( ) ) ) ; \n\tIStrategyConfig sendingStrategyConfig = environment . getSendingStrategyConfig ( ) ; \n\tagentConfiguration . setSendingStrategyConfig ( new StrategyConfig ( sendingStrategyConfig . getClassName ( ) , sendingStrategyConfig . getSettings ( ) ) ) ; \n\tCollection < ExcludeRule > excludeRules = configurationResolver . getAllExcludeRules ( environment ) ; \n\tif $F35028 ( CollectionUtils , excludeRules ) { \n\t\tCollection < IMatchPattern > $F204 ( excludeClassesPatterns ) ; \n\t\tfor ( ExcludeRule excludeRule : excludeRules ) { \n\t\t\texcludeClassesPatterns . add ( PatternFactory . getPattern ( excludeRule . getClassName ( ) ) ) ; \n\t\t\t} \n\t\tagentConfiguration . setExcludeClassesPatterns ( excludeClassesPatterns ) ; \n\t\t} \n\telse { \n\t\tagentConfiguration . setExcludeClassesPatterns ( Collections . < IMatchPattern > $F9639 ) ; \n\t\t} \n\tagentConfiguration . setConfigurationInfo ( configurationResolver . getConfigurationInfo ( environment ) ) ; \n\treturn agentConfiguration ; \n\t} \n"}, {"code": "private void initializeNameGoals ( Map < TestCase , Set < TestFitnessFunction > > testToGoals ) { \n\tfor ( Map . Entry < TestCase , Set < TestFitnessFunction > > entry : testToGoals . entrySet ( ) ) { \n\t\tSet < TestFitnessFunction > $F22304 ( goals ) ; \n\t\tList < TestFitnessFunction > $F224232 ( topGoals , getTopGoals , entry ) ; \n\t\tif $F2979 ( topGoals ) $F845 else if $F58405 ( topGoals , MAX_SIMILAR_GOALS ) { \n\t\t\tfor ( TestFitnessFunction goal : topGoals ) { \n\t\t\t\tgoals . add ( goal ) ; \n\t\t\t\tString goalName = getTestName ( entry . getKey ( ) , goals ) ; \n\t\t\t\tif $F62924 ( goalName , MAX_CHARS ) $F2676 ( goals , goal ) } \n\t\t\t} \n\t\telse { \n\t\t\tgoals . add ( chooseRepresentativeGoal ( entry . getKey ( ) , topGoals ) ) ; \n\t\t\t} \n\t\t$F15251 ( testToGoals , entry , goals ) } \n\t} \n"}, {"code": "public static java . lang . Double valueOf $F93065 ( s ) throws $F68605 { \n\treturn new Double ( parseDouble ( s ) ) ; \n\t} \n"}, {"code": "$F92274 ( s , lock , this , p , first ) "}, {"code": "public boolean isParseRobotsTxt $F72 { \n\treturn parseRobotsTxt ; \n\t} \n"}, {"code": "public String byteArrayToBase64 $F97 ( bytes ) { \n\treturn Base64 . encodeBase64String ( bytes ) ; \n\t} \n"}, {"code": "private void validateIndexStorage $F72 { \n\tCloseableIterator < IndexStoreEntry > iterator = null ; \n\ttry { \n\t\t$F12181 ( structureList ) iterator = indexDataStructure . iterator ( null ) ; \n\t\twhile $F2921 ( iterator ) { \n\t\t\tIndexStoreEntry ie = iterator . next ( ) ; \n\t\t\tif ( entriesContains ( ie ) ) $F207 ( structureList , ie ) else $F1328 ( fail , ie ) } \n\t\tassertEquals ( NUM00 , entries . size ( ) , structureList . size ( ) ) ; \n\t\t} \n\t$F14364 ( iterator ) } \n"}, {"code": "protected void onException ( final WroRuntimeException e ) { \n\tthrow e ; \n\t} \n"}, {"code": "private int quantize ( long x ) { \n\treturn NUM00 + ( int ) Math . floor ( Math . log ( x ) / Math . log ( quantizationBase ) ) ; \n\t} \n"}, {"code": "public static boolean validateOutputDirectory ( File directory ) { \n\tif $F3428 ( directory ) { \n\t\tDiagnostic . error ( ErrorType . DIRECTORY_EXISTS , directory . getPath ( ) ) ; \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "$F1 public void onWebSocketClose ( int statusCode , String reason ) { \n\tsuper . onWebSocketClose ( statusCode , reason ) ; \n\tlog . info ( NUM00 , peerID , Integer . toString ( statusCode ) + NUM00 + reason ) ; \n\tstore . unsubscribe ( handle ) ; \n\t} \n"}, {"code": "$F1 public double logDensity ( double value ) { \n\tupdateBoundariesAndOrWeights ( ) ; \n\tif ( m_Boundaries == null ) { \n\t\treturn Math . log ( Double . MIN_VALUE ) ; \n\t\t} \n\t$F8533 ( index , Arrays , m_Boundaries , value ) if ( ( index == - NUM00 ) || ( index == - m_Boundaries . length - NUM00 ) ) { \n\t\tdouble val = NUM00 ; \n\t\tif ( index == - NUM00 ) { \n\t\t\tval = m_TM . firstKey ( ) - value ; \n\t\t\t} \n\t\telse { \n\t\t\tval = value - m_TM . lastKey ( ) ; \n\t\t\t} \n\t\treturn ( CONST - Math . log ( m_Width ) - NUM00 * ( val * val / ( m_Width * m_Width ) ) ) - Math . log ( m_SumOfWeights + NUM00 ) ; \n\t\t} \n\tif $F74408 ( index , m_Boundaries ) { \n\t\tindex -- ; \n\t\t} \n\telse { \n\t\tif ( index < NUM00 ) { \n\t\t\tindex = - index - NUM00 ; \n\t\t\t} \n\t\t} \n\tdouble width = m_Boundaries [ index + NUM00 ] - m_Boundaries [ index ] ; \n\tdouble densSmearedOut = NUM00 / ( ( m_SumOfWeights + NUM00 ) * ( $F8528 ( m_Boundaries ) - m_Boundaries [ NUM00 ] ) ) ; \n\tif ( m_Weights [ index ] <= NUM00 ) { \n\t\treturn Math . log ( densSmearedOut ) ; \n\t\t} \n\telse { \n\t\treturn Math . log ( densSmearedOut + m_Weights [ index ] / ( ( m_SumOfWeights + NUM00 ) * width ) ) ; \n\t\t} \n\t} \n"}, {"code": "public void drawPoint ( Graphics sc , IPoint p ) { \n\t$F82242 ( x1 , p ) $F82240 ( y1 , p ) sc . drawOval ( ( int ) x1 - NUM00 , ( int ) y1 - NUM00 , NUM00 , NUM00 ) ; \n\t} \n"}, {"code": "private static int computeCapacity ( final int expectedSize ) { \n\t$F14826 ( expectedSize ) final int $F404182 ( capacity , FastMath , expectedSize , LOAD_FACTOR ) ; \n\tfinal int powerOfTwo = Integer . highestOneBit ( capacity ) ; \n\tif ( powerOfTwo == capacity ) { \n\t\treturn capacity ; \n\t\t} \n\treturn nextPowerOfTwo ( capacity ) ; \n\t} \n"}, {"code": "$F113898 ( buf , s , i , c , Integer ) "}, {"code": "protected void a_processJunction_nns ( String name , Continuation cont ) throws NamingException { \n\tif $F3057 ( name ) { \n\t\tNameNotFoundException e = new NameNotFoundException $F72 ; \n\t\tcont . setErrorNNS ( this , name ) ; \n\t\tthrow cont . fillInException ( e ) ; \n\t\t} \n\ttry { \n\t\tObject target = a_lookup ( name , cont ) ; \n\t\tif ( cont . isContinue ( ) ) cont . appendRemainingComponent ( NUM00 ) ; \n\t\telse { \n\t\t\tcont . setContinueNNS ( target , name , this ) ; \n\t\t\t} \n\t\t} \n\tcatch ( NamingException e ) { \n\t\te . appendRemainingComponent ( NUM00 ) ; \n\t\tthrow e ; \n\t\t} \n\t} \n"}, {"code": "public void addCallback ( Callback callback ) $F2202 ( mCallbacks , callback ) "}, {"code": "public JTidyDocumentBuilderFactory $F230110 ( settings ) throws DOMTestIncompatibleException { \n\tsuper ( settings ) ; \n\ttry { \n\t\t$F50403 ( classLoader , ClassLoader ) $F198604 ( tidyClass , classLoader ) tidyConstructor = tidyClass . getConstructor ( NO_CLASSES ) ; \n\t\tparseDOMMethod = tidyClass . getMethod ( NUM00 , new Class [ ] { \n\t\t\tjava . io . InputStream . class , java . io . OutputStream . class } \n\t\t) ; \n\t\tdomImpl = new JTidyDOMImplementation $F72 ; \n\t\t} \n\tcatch ( Exception ex ) $F349675 ( ex ) if ( settings != null ) { \n\t\tfor ( $F1139 ( i , settings ) ) $F845 } \n\t} \n"}, {"code": "$F9159 ( logDebug , mSetupDone , _BOOL , mServiceConn , mContext , mDisposed , mService , mPurchaseListener ) "}, {"code": "public void enqueue ( TerminatingRunnable r ) { \n\tsynchronized ( queue ) { \n\t\tqueue . add ( r ) ; \n\t\t$F165 ( queue ) } \n\t} \n"}, {"code": "protected void doProcessMessage ( DTLSMessage message ) throws HandshakeException , GeneralSecurityException $F845 "}, {"code": "public void addCertificatesAndCRLs ( CertStore certStore ) throws CertStoreException , CMSException { \n\tcerts . addAll ( CMSUtils . getCertificatesFromStore ( certStore ) ) ; \n\tcrls . addAll ( CMSUtils . getCRLsFromStore ( certStore ) ) ; \n\t} \n"}, {"code": "void disconnect $F72 { \n\t$F39755 ( lock , disconnected , _BOOL ) } \n"}, {"code": "public SimpleRateLimiter ( double mbPerSec ) { \n\tsetMBPerSec ( mbPerSec ) ; \n\t$F101251 ( lastNS , System ) } \n"}, {"code": "private long wc ( String text ) { \n\tlong wc = NUM00 ; \n\t$F6542 ( lines , text ) for ( String line : lines ) { \n\t\twc += $F28838 ( line ) ; \n\t\t} \n\treturn wc ; \n\t} \n"}, {"code": "public boolean unbind $F72 { \n\tboolean worked = _BOOL ; \n\tif ( m_rxThread == null ) worked = _BOOL ; \n\telse m_stopRx = _BOOL ; \n\treturn worked ; \n\t} \n"}, {"code": "public void register ( Schedule schedule ) { \n\t$F10192 ( oldSize , Integer , _scheduleHashTable ) $F33163 ( _scheduleHashTable , schedule ) $F252150 ( id , Integer , schedule ) $F12283 ( id , _id ) $F10197 ( setDirtyAndFirePropertyChange , LISTLENGTH_CHANGED_PROPERTY , oldSize , Integer , _scheduleHashTable ) } \n"}, {"code": "public final void writeMapleAsciiString ( final String s ) { \n\twriteShort ( ( short ) s . length ( ) ) ; \n\twriteAsciiString ( s ) ; \n\t} \n"}, {"code": "public static boolean hasUID ( String classname ) { \n\tboolean result ; \n\ttry { \n\t\tresult = hasUID ( Class . forName ( classname ) ) ; \n\t\t} \n\t$F28453 ( result , _BOOL ) return result ; \n\t} \n"}, {"code": "public static boolean removeDirectory ( String pathToDir ) { \n\t$F65260 ( deleteRecursive , pathToDir ) } \n"}, {"code": "public static final boolean validateGroupName ( String sGroupName ) { \n\t$F25111 ( sGroupName , _BOOL ) return sGroupName . matches ( NUM00 ) ; \n\t} \n"}, {"code": "private void _init ( Configuration conf ) { \n\ttry { \n\t\tif ( this . id > NUM00 ) { \n\t\t\tDefaultListener d = new DefaultListener $F72 ; \n\t\t\td . upgrade ( conf , this ) ; \n\t\t\t} \n\t\tif $F20899 ( X , listener ) { \n\t\t\tString name = listener ; \n\t\t\tif ( name != null ) { \n\t\t\t\ttry { \n\t\t\t\t\t$F6969 c = Class . forName ( name , _BOOL , classLoader ) ; \n\t\t\t\t\t$F71976 ( o , c ) if ( o instanceof IListener ) { \n\t\t\t\t\t\t$F556 ( log , name ) IListener l = ( IListener ) o ; \n\t\t\t\t\t\tl . upgrade ( conf , this ) ; \n\t\t\t\t\t\tl . onStart ( conf , this ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\tcatch ( Throwable e ) { \n\t\t\t\t\tlog . error ( this . name + NUM00 + name , e ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tcatch ( Throwable e ) $F14108 ( log , e ) } \n"}, {"code": "private boolean isScanRootAvailable ( URL url ) { \n\tfor ( ScanRoot scanRoot : _pendingScanRoots ) { \n\t\tif ( url . equals ( scanRoot . getUrl ( ) ) ) return _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public SequentialListenerManager addListenerExecutor ( int index , Listener listener , ListenerExecutor executor ) { \n\tif $F105 ( listeners , listener ) $F11416 ( listener ) listeners . add ( index , listener ) ; \n\tlistenerExecutors . add ( index , executor ) ; \n\treturn this ; \n\t} \n"}, {"code": "private boolean hasAsParent ( INode child , ICompositeNode directParent ) { \n\tINode parent = child ; \n\twhile ( parent != null ) { \n\t\tif ( parent == directParent ) return _BOOL ; \n\t\t$F10337 ( parent ) } \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void clearMarkers $F72 $F5122 ( mGoogleMap , markers ) "}, {"code": "$F1 public double cloudletSubmit ( Cloudlet cl ) $F41330 ( cloudletSubmit , cl ) "}, {"code": "public void verifyingToken $F72 { \n\tsetTokenInfo ( NUM00 ) ; \n\tverifyToken . setEnabled ( _BOOL ) ; \n\t} \n"}, {"code": "public Certificate buildCertificate ( String certString ) throws InvalidCertificate { \n\ttry { \n\t\tString base64Cert = formatCertificate ( certString ) ; \n\t\t$F217487 ( inBytes , base64Cert ) $F5348 ( cf , CertificateFactory ) assert inBytes . available ( ) > NUM00 ; \n\t\tCertificate certificate = cf . generateCertificate ( inBytes ) ; \n\t\t$F59 ( inBytes ) return certificate ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F630 ( log , e ) throw FaultUtil . InvalidCertificate ( NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "private PageLeafImpl compact ( TableKelp table ) { \n\tlong now = CurrentTime . currentTime ( ) / NUM00 ; \n\tSet < PageLeafEntry > entries = fillEntries ( table ) ; \n\tArrayList < BlockLeaf > $F204 ( blocks ) ; \n\tBlockLeaf block = new BlockLeaf ( getId ( ) ) ; \n\tblocks . add ( block ) ; \n\tRow row = table . row ( ) ; \n\tfor ( PageLeafEntry entry : entries ) { \n\t\tif ( entry . getCode ( ) != INSERT && entry . getExpires ( ) <= now ) $F1448 while ( ! block . addEntry ( row , entry ) ) { \n\t\t\tblock = new BlockLeaf ( getId ( ) ) ; \n\t\t\tblocks . add ( block ) ; \n\t\t\t} \n\t\t} \n\tPageLeafImpl newPage = new PageLeafImpl ( getId ( ) , getNextId ( ) , getSequence ( ) , _table , getMinKey ( ) , getMaxKey ( ) , blocks ) ; \n\tnewPage . validate ( table ) ; \n\tnewPage . toSorted ( table ) ; \n\tif ( isDirty ( ) ) { \n\t\tnewPage . setDirty ( ) ; \n\t\t} \n\tif ( _stub != null ) { \n\t\t_stub . copyToCompact ( newPage ) ; \n\t\t} \n\treturn newPage ; \n\t} \n"}, {"code": "public SabresQuery $F38789 ( clazz ) { \n\tthis . clazz = clazz ; \n\tname = clazz . getSimpleName ( ) ; \n\tinnerQueries = null ; \n\t} \n"}, {"code": "SNode awaitFulfill ( SNode s , boolean timed , long nanos ) { \n\t$F74107 ( deadline , timed , System , nanos ) $F686 ( w , Thread ) int spins = ( shouldSpin ( s ) ? ( timed ? maxTimedSpins : maxUntimedSpins ) : NUM00 ) ; \n\tfor ( $F589 ) { \n\t\tif $F84922 ( w ) s . tryCancel ( ) ; \n\t\tSNode m = s . match ; \n\t\t$F60730 ( m ) if ( timed ) { \n\t\t\t$F27353 ( nanos , deadline , System ) if ( nanos <= NUM00 ) { \n\t\t\t\ts . tryCancel ( ) ; \n\t\t\t\t$F598 } \n\t\t\t} \n\t\tif ( spins > NUM00 ) spins = shouldSpin ( s ) ? ( spins - NUM00 ) : NUM00 ; \n\t\telse if $F74129 ( s ) s . waiter = w ; \n\t\telse if ( ! timed ) LockSupport . park ( this ) ; \n\t\telse if ( nanos > spinForTimeoutThreshold ) LockSupport . parkNanos ( this , nanos ) ; \n\t\t} \n\t} \n"}, {"code": "public String backupNow ( String backupFilePrefix ) throws McException , IOException { \n\t$F980 ( _logger ) return Backup . backup ( backupFilePrefix ) ; \n\t} \n"}, {"code": "public static void CF7 $F50490 ( x , f , c , nx ) { \n\tdouble sum1 = NUM00 ; \n\tdouble sum2 = NUM00 ; \n\tdouble yj ; \n\tfor ( $F9993 ( j , nx ) ) { \n\t\tif ( j % NUM00 == NUM00 ) { \n\t\t\tyj = x [ j - NUM00 ] - Math . cos ( NUM00 * PI * x [ NUM00 ] + j * PI / nx ) ; \n\t\t\tsum1 += $F63533 ( yj , Math , PI ) ; \n\t\t\t} \n\t\telse { \n\t\t\t$F94025 ( yj , x , j , Math , PI , nx ) if $F2862 ( j ) { \n\t\t\t\tsum2 += yj * yj ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tsum2 += $F63533 ( yj , Math , PI ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tf [ NUM00 ] = x [ NUM00 ] + sum1 ; \n\tf [ NUM00 ] = $F247205 ( x ) * $F247205 ( x ) + sum2 ; \n\tc [ NUM00 ] = x [ NUM00 ] - Math . sin ( NUM00 * x [ NUM00 ] * PI + NUM00 * PI / nx ) - MYSIGN ( ( x [ NUM00 ] - NUM00 ) * $F247205 ( x ) ) * Math . sqrt ( Math . abs ( ( x [ NUM00 ] - NUM00 ) * $F247205 ( x ) ) ) ; \n\tc [ NUM00 ] = x [ NUM00 ] - Math . sin ( NUM00 * x [ NUM00 ] * PI + NUM00 * PI / nx ) - MYSIGN ( NUM00 * Math . sqrt ( NUM00 - x [ NUM00 ] ) - NUM00 * $F247205 ( x ) ) * Math . sqrt ( Math . abs ( NUM00 * Math . sqrt ( NUM00 - x [ NUM00 ] ) - NUM00 * $F247205 ( x ) ) ) ; \n\t} \n"}, {"code": "$F75659 ( takeLock , putLock ) "}, {"code": "public boolean isClusteredHost ( StorageSystem storage , $F15661 initiators ) $F25228 ( isClusteredHost , storage , initiators ) "}, {"code": "public static List < SubstringReplacerMatchRule > matchRulesFromInternal ( String matchReplaceDetails , Instances inputStructure , String statusMessagePrefix , Logger log , Environment env ) { \n\tList < SubstringReplacerMatchRule > matchRules = new ArrayList < SubstringReplacerMatchRule > $F72 ; \n\t$F6542 ( mrParts , matchReplaceDetails ) for ( String p : mrParts ) { \n\t\tSubstringReplacerMatchRule mr = new SubstringReplacerMatchRule ( p . trim ( ) ) ; \n\t\tmr . m_statusMessagePrefix = statusMessagePrefix ; \n\t\tmr . m_logger = log ; \n\t\tmr . init ( env , inputStructure ) ; \n\t\tmatchRules . add ( mr ) ; \n\t\t} \n\treturn matchRules ; \n\t} \n"}, {"code": "private static void time ( DateTimeFormatterBuilder bld , Collection < DateTimeFieldType > fields , boolean extended , boolean strictISO , boolean reducedPrec , boolean datePresent ) { \n\tboolean hour = fields . remove ( DateTimeFieldType . hourOfDay ( ) ) ; \n\tboolean minute = fields . remove ( DateTimeFieldType . minuteOfHour ( ) ) ; \n\tboolean second = fields . remove ( DateTimeFieldType . secondOfMinute ( ) ) ; \n\tboolean milli = fields . remove ( DateTimeFieldType . millisOfSecond ( ) ) ; \n\tif ( ! hour && ! minute && ! second && ! milli ) $F932 if ( hour || minute || second || milli ) { \n\t\tif ( strictISO && reducedPrec ) $F18931 ( fields ) if ( datePresent ) $F188367 ( bld ) } \n\tif ( hour && minute && second || ( hour && ! second && ! milli ) ) $F845 else { \n\t\tif ( strictISO && datePresent ) $F18931 ( fields ) if ( ! hour && ( minute && second || ( minute && ! milli ) || second ) ) $F845 else { \n\t\t\tif ( strictISO ) $F18931 ( fields ) } \n\t\t} \n\tif ( hour ) { \n\t\tbld . appendHourOfDay ( NUM00 ) ; \n\t\t} \n\telse if ( minute || second || milli ) $F188367 ( bld ) if ( extended && hour && minute ) $F188367 ( bld ) if ( minute ) { \n\t\tbld . appendMinuteOfHour ( NUM00 ) ; \n\t\t} \n\telse if ( second || milli ) $F188367 ( bld ) if ( extended && minute && second ) $F188367 ( bld ) if ( second ) { \n\t\tbld . appendSecondOfMinute ( NUM00 ) ; \n\t\t} \n\telse if ( milli ) $F188367 ( bld ) if ( milli ) { \n\t\t$F188366 ( bld ) bld . appendMillisOfSecond ( NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F131 mergeAndExtractParams ( $F42010 ( globalConfig ) , $F42010 ( localParams ) , $F6877 ignoreParams , Map < String , ExternalResourceDescription > resources ) { \n\t$F13750 ( uniqueParams ) $F70469 ( uniqueParams , localParams ) $F70469 ( uniqueParams , globalConfig ) if ( ignoreParams != null ) $F111938 ( uniqueParams , ignoreParams ) $F131 params = new Object [ $F62428 ( resources ) + $F62428 ( uniqueParams ) ] ; \n\tint i = NUM00 ; \n\tfor ( Entry < String , ExternalResourceDescription > entry : resources . entrySet ( ) ) { \n\t\tparams [ i ++ ] = entry . getKey ( ) ; \n\t\tparams [ i ++ ] = entry . getValue ( ) ; \n\t\t} \n\tfor ( String key : uniqueParams ) { \n\t\tparams [ i ++ ] = key ; \n\t\tif $F1710 ( localParams , key ) { \n\t\t\tparams [ i ++ ] = CpeBuilderUtils . convertToParameterValue ( localParams . get ( key ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tparams [ i ++ ] = CpeBuilderUtils . convertToParameterValue ( globalConfig . get ( key ) ) ; \n\t\t\t} \n\t\t} \n\treturn params ; \n\t} \n"}, {"code": "public void storeProperties ( String artifact , String version , Properties props ) throws IOException { \n\tPath propertiesFile = getPropertiesFile ( artifact , version ) ; \n\tPath dir = propertiesFile . getParent ( ) ; \n\tif $F33270 ( Files , dir ) { \n\t\tFiles . createDirectories ( dir ) ; \n\t\t} \n\ttry ( OutputStream out = new BufferedOutputStream ( newOutputStream ( propertiesFile ) ) ) { \n\t\t$F145993 ( props , out ) } \n\t} \n"}, {"code": "public static String makeDescriptor ( $F749 params , Class retType ) { \n\t$F280 ( sbuf ) $F84 ( sbuf ) for ( $F1139 ( i , params ) ) makeDesc ( sbuf , params [ i ] ) ; \n\t$F84 ( sbuf ) if ( retType != null ) makeDesc ( sbuf , retType ) ; \n\t$F92 ( sbuf ) } \n"}, {"code": "public boolean isLoggable ( Level lev ) { \n\treturn logger . isLoggable ( lev ) ; \n\t} \n"}, {"code": "int parseHour ( String source , char patternChar , int offset ) throws ParseException { \n\tint min = ( patternChar == HOUR_1_LETTER || patternChar == HOUR12_1_LETTER ) ? NUM00 : NUM00 ; \n\tint max = ( ( patternChar == HOUR_LETTER || patternChar == HOUR_1_LETTER ) ? NUM00 : NUM00 ) + min ; \n\treturn parseNumber ( source , offset , NUM00 , min , max ) - min ; \n\t} \n"}, {"code": "$F1 public boolean supportsKnowledge $F72 { \n\treturn _BOOL ; \n\t} \n"}, {"code": "$F1322 ( criteria , oredCriteria ) "}, {"code": "@ DataProvider public $F29684 invalidIdProvider $F72 { \n\treturn new Object [ ] [ ] { \n\t\tnew Object [ ] { \n\t\t\tNUM00 , NUM00 , HttpStatus . SC_NOT_FOUND } \n\t\t, new Object [ ] { \n\t\t\tNUM00 , NUM00 , HttpStatus . SC_NOT_FOUND } \n\t\t, new Object [ ] { \n\t\t\tNUM00 , NUM00 , HttpStatus . SC_INTERNAL_SERVER_ERROR } \n\t\t, new Object [ ] { \n\t\t\tNUM00 , NUM00 , HttpStatus . SC_INTERNAL_SERVER_ERROR } \n\t\t, new Object [ ] { \n\t\t\tNUM00 , NUM00 , HttpStatus . SC_INTERNAL_SERVER_ERROR } \n\t\t} \n\t; \n\t} \n"}, {"code": "public final static HeaderElement parseHeaderElement $F45528 ( value , parser ) throws ParseException { \n\t$F826 ( value ) $F45529 ( parser , BasicHeaderValueParser ) $F45535 ( buffer , value ) buffer . append ( value ) ; \n\t$F45541 ( cursor , value ) return parser . parseHeaderElement ( buffer , cursor ) ; \n\t} \n"}, {"code": "$F11730 ( logPrefix , request , exception , retryPolicy , oldTimeout , String , e ) "}, {"code": "public static String encodeString ( String s ) { \n\treturn new String ( encode ( s . getBytes ( ) ) ) ; \n\t} \n"}, {"code": "private void clearState $F72 $F154601 ( allocatedResources , requestsToCountMap , requestsQueue ) "}, {"code": "public static $F1986 vectorBoxCorner ( $F1986 center , $F1986 result , double distance , boolean upperRight ) { \n\tif ( result == null || result . length != center . length ) { \n\t\t$F14238 ( result , center ) } \n\tif ( upperRight == _BOOL ) $F52810 ( distance ) distance = SIN_PI_DIV_4 * distance ; \n\tfor ( $F1139 ( i , center ) ) { \n\t\tresult [ i ] = center [ i ] + distance ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public void toArray $F23416 ( array ) $F138343 ( System , data , array , size ) "}, {"code": "public FixedSecureRandom ( boolean intPad , $F31427 ( values ) ) { \n\t$F1538 ( bOut ) for ( $F15868 ( i , values ) ) { \n\t\ttry $F31431 ( bOut , values , i ) catch ( IOException e ) $F825 } \n\t$F3031 ( _data , bOut ) if ( intPad ) { \n\t\t_intPad = _data . length % NUM00 ; \n\t\t} \n\t} \n"}, {"code": "$F1 protected void ensureNumberOfColumns ( int numberOfColumns ) { \n\tif ( data . length >= numberOfColumns ) $F932 $F12300 ( newData , numberOfColumns ) $F7057 ( System , data , newData ) data = newData ; \n\t} \n"}, {"code": "$F13735 ( prefix , namespace , attName , attValue , xmlWriter ) "}, {"code": "public void invokeHookSpoutAck ( Object messageId , long completeLatencyNs ) { \n\tif $F6887 ( taskHooks ) { \n\t\tSpoutAckInfo ackInfo = new SpoutAckInfo ( messageId , getThisTaskId ( ) , completeLatencyNs / Constants . MILLISECONDS_TO_NANOSECONDS ) ; \n\t\tfor ( ITaskHook taskHook : taskHooks ) { \n\t\t\ttaskHook . spoutAck ( ackInfo ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static float wrap ( float value ) { \n\tif ( value >= NUM00 ) { \n\t\treturn value - ( int ) value ; \n\t\t} \n\tfloat wrappedValue = value - ( float ) Math . floor ( value ) ; \n\tif ( wrappedValue >= NUM00 ) { \n\t\twrappedValue -= NUM00 ; \n\t\t} \n\treturn wrappedValue ; \n\t} \n"}, {"code": "StubSkeletonWriter ( BatchEnvironment env , RemoteClass remoteClass , StubVersion version ) { \n\tthis . env = env ; \n\tthis . remoteClass = remoteClass ; \n\tthis . version = version ; \n\tstubClassName = Util . binaryNameOf ( remoteClass . classDoc ( ) ) + NUM00 ; \n\tskeletonClassName = Util . binaryNameOf ( remoteClass . classDoc ( ) ) + NUM00 ; \n\t$F24867 ( i , stubClassName ) packageName = ( i != - NUM00 ? stubClassName . substring ( NUM00 , i ) : NUM00 ) ; \n\t$F4571 ( stubClassSimpleName , stubClassName , i ) $F4571 ( skeletonClassSimpleName , skeletonClassName , i ) $F54171 ( remoteMethods , remoteClass ) methodFieldNames = nameMethodFields ( remoteMethods ) ; \n\t} \n"}, {"code": "$F92274 ( s , lock , this , p , first ) "}, {"code": "public void removeUpdateListener ( AnimatorUpdateListener listener ) $F49005 ( mUpdateListeners , listener ) "}, {"code": "public void put ( String key , Object value , boolean errorOnFail ) { \n\tif ( value == null ) { \n\t\tputNull ( key ) ; \n\t\t} \n\telse if ( value instanceof Boolean ) { \n\t\tput ( key , ( Boolean ) value ) ; \n\t\t} \n\telse if ( value instanceof Byte ) { \n\t\tput ( key , ( Byte ) value ) ; \n\t\t} \n\telse if ( value instanceof Double ) { \n\t\tput ( key , ( Double ) value ) ; \n\t\t} \n\telse if ( value instanceof Float ) { \n\t\tput ( key , ( Float ) value ) ; \n\t\t} \n\telse if ( value instanceof Integer ) { \n\t\tput ( key , ( Integer ) value ) ; \n\t\t} \n\telse if ( value instanceof Long ) { \n\t\tput ( key , ( Long ) value ) ; \n\t\t} \n\telse if ( value instanceof Short ) { \n\t\tput ( key , ( Short ) value ) ; \n\t\t} \n\telse if ( value instanceof String ) { \n\t\tput ( key , ( String ) value ) ; \n\t\t} \n\telse if $F2456 ( value ) { \n\t\tput ( key , $F2457 ( value ) ) ; \n\t\t} \n\telse if ( errorOnFail ) { \n\t\tthrow new UnsupportedOperationException $F93485 ( value ) ; \n\t\t} \n\t} \n"}, {"code": "private void step $F72 { \n\t$F22620 ( casings ) $F22620 ( casings ) $F22620 ( casings ) stepPipes ( ) ; \n\tstepForwarders ( ) ; \n\t} \n"}, {"code": "public static _Fields findByThriftId ( int fieldId ) { \n\tswitch ( fieldId ) { \n\t\t$F3366 return HOST ; \n\t\t$F3366 return PORT ; \n\t\t$F3366 return ID ; \n\t\t$F3366 return STATE ; \n\t\t$F3366 return TIMESTAMP ; \n\t\t$F3366 return VERSION ; \n\t\t$F20809 } \n\t} \n"}, {"code": "public static void CF7 $F50490 ( x , f , c , nx ) { \n\tdouble sum1 = NUM00 ; \n\tdouble sum2 = NUM00 ; \n\tdouble yj ; \n\tfor ( $F9993 ( j , nx ) ) { \n\t\tif ( j % NUM00 == NUM00 ) { \n\t\t\tyj = x [ j - NUM00 ] - Math . cos ( NUM00 * PI * x [ NUM00 ] + j * PI / nx ) ; \n\t\t\tsum1 += $F63533 ( yj , Math , PI ) ; \n\t\t\t} \n\t\telse { \n\t\t\t$F94025 ( yj , x , j , Math , PI , nx ) if $F2862 ( j ) { \n\t\t\t\tsum2 += yj * yj ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tsum2 += $F63533 ( yj , Math , PI ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tf [ NUM00 ] = x [ NUM00 ] + sum1 ; \n\tf [ NUM00 ] = $F247205 ( x ) * $F247205 ( x ) + sum2 ; \n\tc [ NUM00 ] = x [ NUM00 ] - Math . sin ( NUM00 * x [ NUM00 ] * PI + NUM00 * PI / nx ) - MYSIGN ( ( x [ NUM00 ] - NUM00 ) * $F247205 ( x ) ) * Math . sqrt ( Math . abs ( ( x [ NUM00 ] - NUM00 ) * $F247205 ( x ) ) ) ; \n\tc [ NUM00 ] = x [ NUM00 ] - Math . sin ( NUM00 * x [ NUM00 ] * PI + NUM00 * PI / nx ) - MYSIGN ( NUM00 * Math . sqrt ( NUM00 - x [ NUM00 ] ) - NUM00 * $F247205 ( x ) ) * Math . sqrt ( Math . abs ( NUM00 * Math . sqrt ( NUM00 - x [ NUM00 ] ) - NUM00 * $F247205 ( x ) ) ) ; \n\t} \n"}, {"code": "public static Number abs ( Number a ) { \n\tif ( isFloatingPoint ( a ) ) { \n\t\treturn Math . abs ( a . doubleValue ( ) ) ; \n\t\t} \n\telse { \n\t\treturn Math . abs ( a . longValue ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "private static DoubleMatrix2D xdistanceOld ( DoubleMatrix2D matrix , int norm ) $F1337 "}, {"code": "public $F2539 map $F72 $F2905 ( hashMap ) "}, {"code": "private String discoverTagName ( RSyntaxDocument doc , int dot ) { \n\t$F229316 ( stack ) $F48972 ( root , doc ) $F105097 ( curLine , root , dot ) for ( $F9993 ( i , curLine ) ) { \n\t\t$F48983 ( t , doc , i ) while ( t != null && t . isPaintable ( ) ) { \n\t\t\tif ( t . type == Token . MARKUP_TAG_DELIMITER ) { \n\t\t\t\tif ( t . isSingleChar ( NUM00 ) || t . isSingleChar ( NUM00 ) ) { \n\t\t\t\t\tt = t . getNextToken ( ) ; \n\t\t\t\t\twhile ( t != null && t . isPaintable ( ) ) { \n\t\t\t\t\t\tif ( t . type == Token . MARKUP_TAG_NAME || t . type == Token . MARKUP_TAG_ATTRIBUTE ) { \n\t\t\t\t\t\t\tstack . push ( t . getLexeme ( ) ) ; \n\t\t\t\t\t\t\t$F597 } \n\t\t\t\t\t\tt = t . getNextToken ( ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\telse if ( t . textCount == NUM00 && t . text [ t . textOffset ] == NUM00 && ( t . text [ t . textOffset + NUM00 ] == NUM00 || t . text [ t . textOffset + NUM00 ] == NUM00 ) ) { \n\t\t\t\t\tif $F5973 ( stack ) $F89427 ( stack ) } \n\t\t\t\telse if ( t . textCount == NUM00 && ( t . text [ t . textOffset ] == NUM00 || t . text [ t . textOffset ] == NUM00 ) && t . text [ t . textOffset + NUM00 ] == NUM00 ) { \n\t\t\t\t\tString tagName = null ; \n\t\t\t\t\tif $F5973 ( stack ) { \n\t\t\t\t\t\ttagName = ( String ) stack . pop ( ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\tif ( t . offset + t . textCount >= dot ) { \n\t\t\t\t\t\treturn tagName ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tt = t . getNextToken ( ) ; \n\t\t\t} \n\t\t} \n\t$F1274 } \n"}, {"code": "private static void addQueryFields ( Document doc , Node parent , Collection < PojoField > fields ) { \n\tif $F5973 ( fields ) { \n\t\tElement prop = addProperty ( doc , parent , NUM00 , null ) ; \n\t\tElement map = addElement ( doc , prop , NUM00 , NUM00 , NUM00 ) ; \n\t\tfor ( PojoField field : fields ) addElement ( doc , map , NUM00 , NUM00 , field . javaName ( ) , NUM00 , GeneratorUtils . boxPrimitiveType ( field . javaTypeName ( ) ) ) ; \n\t\t} \n\t} \n"}, {"code": "public void testSimpleValidString $F72 throws Exception { \n\tJsonFactory jsonF = new JsonFactory $F72 ; \n\tDataFormatDetector detector = new DataFormatDetector ( jsonF ) ; \n\tfinal String JSON = NUM00 ; \n\tDataFormatMatcher matcher = detector . findFormat ( $F18490 ( JSON ) ) ; \n\tassertTrue ( matcher . hasMatch ( ) ) ; \n\tassertEquals ( NUM00 , matcher . getMatchedFormatName ( ) ) ; \n\tassertSame ( jsonF , matcher . getMatch ( ) ) ; \n\tassertEquals ( MatchStrength . WEAK_MATCH , matcher . getMatchStrength ( ) ) ; \n\tJsonParser jp = matcher . createParserWithMatch ( ) ; \n\tassertToken ( JsonToken . VALUE_ <missing ';'> NUM00 , jp . nextToken ( ) ) ; \n\tassertEquals ( NUM00 , jp . getText ( ) ) ; \n\t$F67384 ( assertNull , jp ) ; \n\t$F59 ( jp ) } \n"}, {"code": "protected boolean doStart $F72 { \n\tif $F279276 ( _lifecycle ) { \n\t\treturn _BOOL ; \n\t\t} \n\t$F1485 ( isEnable , _BOOL ) $F109722 ( startingCount , _startingCount ) int threadCount = _threadCount . get ( ) + startingCount ; \n\tif ( _threadMax < threadCount ) { \n\t\t$F15856 ( _startingCount ) onThreadMax ( ) ; \n\t\treturn _BOOL ; \n\t\t} \n\telse if ( isIdleTooLow ( startingCount ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\telse { \n\t\t$F15856 ( _startingCount ) return _BOOL ; \n\t\t} \n\t} \n"}, {"code": "$F1 public String globalInfo $F72 $F11287 "}, {"code": "public static long streamSkip ( InputStream stream , long count ) throws IOException { \n\tlong skipped = stream . skip ( count ) ; \n\tif ( skipped < NUM00 ) { \n\t\t$F10317 ( temp ) skipped = stream . read ( temp , NUM00 , Math . min ( ( int ) count , NUM00 ) ) ; \n\t\t} \n\treturn skipped ; \n\t} \n"}, {"code": "public boolean managedObjectExists ( $F303831 ( path ) ) { \n\tDN targetDN = DNBuilder . create ( path ) ; \n\ttry { \n\t\treturn configRepository . getEntry ( targetDN ) != null ; \n\t\t} \n\tcatch ( ConfigException e ) { \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public Vector2 rotate ( double theta ) { \n\t$F55455 ( cos , Math , theta ) $F55455 ( sin , Math , theta ) double x = this . x ; \n\tdouble y = this . y ; \n\tthis . x = x * cos - y * sin ; \n\tthis . y = x * sin + y * cos ; \n\treturn this ; \n\t} \n"}, {"code": "private static $F26352 regroupHistogram ( $F26353 ( matrix ) , $F2027 groups ) { \n\tlong oldEntries = NUM00 ; \n\tfor ( $F1139 ( i , matrix ) ) { \n\t\toldEntries += matrix [ i ] . length - NUM00 ; \n\t\t} \n\tlong newEntries = NUM00 ; \n\tfor ( $F1139 ( ni , groups ) ) { \n\t\tnewEntries += groups [ ni ] ; \n\t\t} \n\tif ( newEntries > oldEntries ) { \n\t\tint newlen = groups . length ; \n\t\tlong ok = oldEntries ; \n\t\tfor ( $F1139 ( ni , groups ) ) { \n\t\t\tif ( ok < groups [ ni ] ) { \n\t\t\t\t$F65716 ( newGroups , ni ) $F10236 ( System , groups , newGroups , ni ) groups = newGroups ; \n\t\t\t\t$F22574 ( groups , ni , ok ) ok = NUM00 ; \n\t\t\t\t$F597 } \n\t\t\tok -= groups [ ni ] ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tlong excess = oldEntries - newEntries ; \n\t\t$F32792 ( newGroups , groups ) $F7057 ( System , groups , newGroups ) newGroups [ groups . length ] = ( int ) excess ; \n\t\tgroups = newGroups ; \n\t\t} \n\t$F26352 newMatrix = new int [ groups . length ] [ ] ; \n\tint i = NUM00 ; \n\tint jMin = NUM00 ; \n\tint jMax = matrix [ i ] . length ; \n\tfor ( $F1139 ( ni , groups ) ) { \n\t\tint groupLength = groups [ ni ] ; \n\t\t$F2027 group = new int [ NUM00 + groupLength ] ; \n\t\tlong groupWeight = NUM00 ; \n\t\tnewMatrix [ ni ] = group ; \n\t\tint njFill = NUM00 ; \n\t\twhile ( njFill < group . length ) { \n\t\t\tint len = group . length - njFill ; \n\t\t\twhile ( jMin == jMax ) { \n\t\t\t\tjMin = NUM00 ; \n\t\t\t\tjMax = matrix [ ++ i ] . length ; \n\t\t\t\t} \n\t\t\tif ( len > jMax - jMin ) len = jMax - jMin ; \n\t\t\tgroupWeight += ( long ) matrix [ i ] [ NUM00 ] * len ; \n\t\t\tSystem . arraycopy ( matrix [ i ] , jMax - len , group , njFill , len ) ; \n\t\t\tjMax -= len ; \n\t\t\tnjFill += len ; \n\t\t\t} \n\t\tArrays . sort ( group , NUM00 , group . length ) ; \n\t\tgroup [ NUM00 ] = ( int ) ( ( groupWeight + groupLength / NUM00 ) / groupLength ) ; \n\t\t} \n\tassert ( jMin == jMax ) ; \n\tassert $F74408 ( i , matrix ) ; \n\treturn newMatrix ; \n\t} \n"}, {"code": "public void removePermission ( PermissionType permission ) $F207 ( removedPermissions , permission ) "}, {"code": "static void exportPrefs ( Preferences prefs , OutputStream stream , boolean withSubTree ) throws IOException , BackingStoreException { \n\tindent = - NUM00 ; \n\tBufferedWriter out = new BufferedWriter $F18982 ( stream ) ; \n\tout . write ( HEADER ) ; \n\t$F1769 ( out ) $F1769 ( out ) out . write ( DOCTYPE ) ; \n\t$F3410 ( out ) out . write ( PREFS_DTD_NAME ) ; \n\t$F3410 ( out ) $F1769 ( out ) $F1769 ( out ) flushStartTag ( NUM00 , $F21904 , $F51969 ( String , XML_VERSION ) , out ) ; \n\tflushStartTag ( NUM00 , $F21904 , new String [ ] { \n\t\tprefs . isUserNode ( ) ? NUM00 : NUM00 } \n\t, out ) ; \n\tflushEmptyElement ( NUM00 , out ) ; \n\tStringTokenizer ancestors = new StringTokenizer ( prefs . absolutePath ( ) , NUM00 ) ; \n\texportNode ( ancestors , prefs , withSubTree , out ) ; \n\tflushEndTag ( NUM00 , out ) ; \n\tflushEndTag ( NUM00 , out ) ; \n\t$F1206 ( out ) out = null ; \n\t} \n"}, {"code": "protected void storeInProfilesMap ( Client client ) { \n\tSet parentSet = client . getProperties ( PARENT_ID ) ; \n\tString clientType = client . getClientType ( ) ; \n\tMap m = getStylesProfileMap ( clientType , parentSet ) ; \n\tif ( m != null ) $F1717 ( m , clientType , client ) $F665 } \n"}, {"code": "$F1654 ( data ) "}, {"code": "public void testBug4808 $F72 throws Exception { \n\tMysqlConnectionPoolDataSource ds = new MysqlConnectionPoolDataSource $F72 ; \n\tds . setURL ( BaseTestCase . dbUrl ) ; \n\tPooledConnection closeMeTwice = ds . getPooledConnection ( ) ; \n\t$F59 ( closeMeTwice ) $F59 ( closeMeTwice ) } \n"}, {"code": "public void testComputeZNaN $F72 { \n\tGeometry linearGeom = read ( NUM00 ) ; \n\tLengthIndexedLine indexedLine = new LengthIndexedLine ( linearGeom ) ; \n\tdouble projIndex = indexedLine . project ( new Coordinate $F32532 ) ; \n\tCoordinate projPt = indexedLine . extractPoint ( projIndex ) ; \n\tassertTrue ( Double . isNaN ( projPt . z ) ) ; \n\t} \n"}, {"code": "public static int optionLength ( String option ) { \n\tif $F3057 ( option ) $F1082 if $F3057 ( option ) $F1082 if $F3057 ( option ) $F1082 $F1082 } \n"}, {"code": "public final double cos $F72 { \n\treturn Math . cos ( this . radians ) ; \n\t} \n"}, {"code": "public static FloatBuffer createFloatBuffer $F74143 ( coords ) { \n\tByteBuffer bb = ByteBuffer . allocateDirect ( coords . length * SIZEOF_FLOAT ) ; \n\t$F16706 ( bb , ByteOrder ) $F16708 ( fb , bb ) fb . put ( coords ) ; \n\t$F16709 ( fb ) return fb ; \n\t} \n"}, {"code": "public IntStreamEx remove ( IntPredicate predicate ) { \n\treturn filter ( predicate . negate ( ) ) ; \n\t} \n"}, {"code": "static void sendRawLine ( PircBot bot , BufferedWriter bwriter , String line ) { \n\tif ( line . length ( ) > bot . getMaxLineLength ( ) - NUM00 ) { \n\t\tline = line . substring ( NUM00 , bot . getMaxLineLength ( ) - NUM00 ) ; \n\t\t} \n\tsynchronized ( bwriter ) { \n\t\ttry { \n\t\t\t$F5299 ( bwriter , line ) $F1206 ( bwriter ) } \n\t\t$F3957 } \n\t} \n"}, {"code": "Entry kill $F72 { \n\tEntry entry ; \n\tfor ( $F5373 ( i , entries ) ) { \n\t\tentry = entries . get ( i ) ; \n\t\tif ( ! entry . dead ) { \n\t\t\tentry . dead = _BOOL ; \n\t\t\treturn entry ; \n\t\t\t} \n\t\t} \n\t$F4638 } \n"}, {"code": "public void slotFromLocoAddress ( int i , SlotListener l ) { \n\t$F124940 ( mLocoAddrHash , Integer , i , l ) LocoNetMessage m = new LocoNetMessage $F989 ; \n\tm . setOpCode ( LnConstants . OPC_LOCO_ADR ) ; \n\tm . setElement ( NUM00 , ( i / NUM00 ) & NUM00 ) ; \n\tm . setElement ( NUM00 , i & NUM00 ) ; \n\ttc . sendLocoNetMessage ( m ) ; \n\t} \n"}, {"code": "protected void uninstallComponents $F72 { \n\tif ( scrollableTabLayoutEnabled ( ) ) { \n\t\ttabPane . remove ( tabScroller . viewport ) ; \n\t\ttabPane . remove ( tabScroller . scrollForwardButton ) ; \n\t\ttabPane . remove ( tabScroller . scrollBackwardButton ) ; \n\t\ttabScroller = null ; \n\t\t} \n\t} \n"}, {"code": "public void reset $F72 { \n\tforms = null ; \n\t} \n"}, {"code": "public static $F2539 populateRequestProperties ( $F2540 ( requestProperties ) , int bodyLength , MediaType contentType , MediaType acceptType ) { \n\t$F2540 ( properties ) ; \n\tif $F4251 ( requestProperties ) { \n\t\t$F23429 ( properties ) } \n\telse { \n\t\t$F26694 ( properties , requestProperties ) ; \n\t\t} \n\tif ( acceptType != null ) { \n\t\tproperties . put ( HeaderNames . ACCEPT , acceptType . toString ( ) ) ; \n\t\t} \n\tif ( contentType != null ) { \n\t\tproperties . put ( HeaderNames . CONTENT_TYPE , contentType . toString ( ) ) ; \n\t\t} \n\tif ( bodyLength > - NUM00 ) { \n\t\tproperties . put ( HeaderNames . CONTENT_LENGTH , String . valueOf ( bodyLength ) ) ; \n\t\t} \n\treturn properties ; \n\t} \n"}, {"code": "public static BlockSnapshotDeleteCompleter createCompleter ( DbClient dbClient , BlockSnapshot snapshot , String task ) { \n\tBlockSnapshotDeleteCompleter completer = new BlockSnapshotDeleteCompleter ( snapshot , task ) ; \n\tif ( snapshot . getConsistencyGroup ( ) != null ) { \n\t\t$F114980 ( snapIds ) List $F106744 snaps = ControllerUtils . getSnapshotsPartOfReplicationGroup ( snapshot , dbClient ) ; \n\t\tfor ( BlockSnapshot snap : snaps ) $F42097 ( snapIds , snap ) completer . addIds ( snapIds ) ; \n\t\t} \n\treturn completer ; \n\t} \n"}, {"code": "private void checkProtocolAlreadyExists $F73675 ( protocols , protocolType ) $F2202 ( protocols , protocolType ) "}, {"code": "private static char CallCharMethodV $F4272 ( env , objJREF , methodID , argAddress ) throws Exception { \n\t$F4274 ( traceJNI , VM ) $F4275 ( RuntimeEntrypoints ) try { \n\t\t$F4276 ( obj , env , objJREF ) Object returnObj = JNIHelpers . invokeWithVarArg ( obj , methodID , argAddress , TypeReference . Char , _BOOL ) ; \n\t\treturn Reflection . unwrapChar ( returnObj ) ; \n\t\t} \n\t$F4287 ( traceJNI , unexpected , System , env ) } \n"}, {"code": "public void testConstrStringWithExponentWithPoint3 $F72 $F114473 ( a , aScale , bA , aNumber , assertEquals ) "}, {"code": "public static boolean isCompositionPlaylist ( ResourceByteRangeProvider resourceByteRangeProvider ) throws IOException { \n\treturn IMFCompositionPlaylistType . isCompositionPlaylist ( resourceByteRangeProvider ) ; \n\t} \n"}, {"code": "public static MasterPrivateKey decrypt $F84589 ( passphrase , encrypted ) throws HyperLedgerException { \n\ttry { \n\t\t$F96 key = SCrypt . generate ( passphrase . getBytes ( NUM00 ) , BITCOIN_SEED , NUM00 , NUM00 , NUM00 , NUM00 ) ; \n\t\t$F89939 ( keyspec , key ) $F105480 ( cipher , Cipher ) $F96 iv = Arrays . copyOfRange ( encrypted , NUM00 , NUM00 ) ; \n\t\t$F96 data = Arrays . copyOfRange ( encrypted , NUM00 , encrypted . length ) ; \n\t\tcipher . init ( Cipher . DECRYPT_MODE , keyspec , new IvParameterSpec ( iv ) ) ; \n\t\treturn MasterPrivateKey . parse ( new String ( cipher . doFinal ( data ) ) ) ; \n\t\t} \n\tcatch ( UnsupportedEncodingException | InvalidAlgorithmParameterException | NoSuchPaddingException | NoSuchProviderException | NoSuchAlgorithmException | InvalidKeyException | BadPaddingException | IllegalBlockSizeException e ) { \n\t\tthrow new HyperLedgerException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "protected boolean beforeRelease $F72 { \n\treturn deque . size ( ) < maxSize ; \n\t} \n"}, {"code": "final boolean transferAfterCancelledWait ( Node node ) { \n\tif ( compareAndSetWaitStatus ( node , Node . CONDITION , NUM00 ) ) $F9278 ( enq , node , _BOOL ) while ( ! isOnSyncQueue ( node ) ) $F5756 ( Thread ) return _BOOL ; \n\t} \n"}, {"code": "public void reset $F72 { \n\t$F5634 ( System , initialState , chain ) ubiInit ( PARAM_TYPE_MESSAGE ) ; \n\t} \n"}, {"code": "public int updateWithOnConflict ( String table , ContentValues values , String whereClause , $F806 whereArgs , @ ConflictAlgorithm int conflictAlgorithm ) { \n\tif $F45555 ( values ) $F825 acquireReference ( ) ; \n\ttry { \n\t\t$F20818 ( sql ) $F84 ( sql ) $F6939 ( sql , CONFLICT_VALUES , conflictAlgorithm ) sql . append ( table ) ; \n\t\t$F84 ( sql ) $F2199 ( setValuesSize , values ) int bindArgsSize = ( whereArgs == null ) ? setValuesSize : ( setValuesSize + whereArgs . length ) ; \n\t\t$F133 ( bindArgs , bindArgsSize ) int i = NUM00 ; \n\t\tfor ( $F21130 entry : values . valueSet ( ) ) { \n\t\t\t$F122292 ( sql , i ) $F79971 ( sql , entry ) bindArgs [ i ++ ] = entry . getValue ( ) ; \n\t\t\t$F84 ( sql ) } \n\t\tif ( whereArgs != null ) { \n\t\t\tfor ( i = setValuesSize ; \n\t\t\ti < bindArgsSize ; \n\t\t\ti ++ ) { \n\t\t\t\tbindArgs [ i ] = whereArgs [ i - setValuesSize ] ; \n\t\t\t\t} \n\t\t\t} \n\t\tif $F20899 ( TextUtils , whereClause ) $F20352 ( sql , whereClause ) SQLiteStatement statement = new SQLiteStatement $F122301 ( this , sql , bindArgs ) ; \n\t\ttry { \n\t\t\treturn statement . executeUpdateDelete ( ) ; \n\t\t\t} \n\t\t$F3229 ( statement ) } \n\t$F49978 ( releaseReference ) } \n"}, {"code": "public synchronized void addURLs ( List $F100821 urls ) { \n\tfor ( URL url : urls ) super . addURL ( url ) ; \n\t$F12181 ( searchList ) searchList . addAll ( searchPath ) ; \n\tsearchList . addAll ( urls ) ; \n\t$F5939 ( searchPath , Collections ) } \n"}, {"code": "protected $F96 httpGet ( final String url ) { \n\tHttpGet httpRequest = null ; \n\tHttpResponse httpResponse = null ; \n\tCloseableHttpClient client = null ; \n\ttry { \n\t\tfinal URI uri = new URI ( url . trim ( ) ) ; \n\t\thttpRequest = new HttpGet ( uri ) ; \n\t\tif ( contentType != null ) { \n\t\t\thttpRequest . setHeader ( CONTENT_TYPE , contentType ) ; \n\t\t\t} \n\t\tclient = getHttpClient ( url ) ; \n\t\thttpResponse = getHttpResponse ( client , httpRequest , url ) ; \n\t\tfinal $F96 returnedBytes = readHttpResponse ( url , httpResponse ) ; \n\t\treturn returnedBytes ; \n\t\t} \n\tcatch ( URISyntaxException e ) $F36611 ( e ) finally { \n\t\ttry { \n\t\t\tif ( httpRequest != null ) { \n\t\t\t\thttpRequest . releaseConnection ( ) ; \n\t\t\t\t} \n\t\t\tif ( httpResponse != null ) { \n\t\t\t\tEntityUtils . consumeQuietly ( httpResponse . getEntity ( ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F18632 ( closeClient , client ) } \n\t} \n"}, {"code": "$F8370 ( asString ) "}, {"code": "public final int readChar $F72 throws IOException { \n\tif ( _readEncoding != null ) { \n\t\t$F7468 ( ch , _readEncoding ) return ch ; \n\t\t} \n\tif ( _readLength <= _readOffset ) { \n\t\tif $F931 ( readBuffer ) $F150 } \n\treturn _readBuffer [ _readOffset ++ ] & NUM00 ; \n\t} \n"}, {"code": "$F392700 ( jpegFileName , exifOutFileName , NULL_ARGUMENT_ , is , writeExif , closeSilently , e ) "}, {"code": "public void execNonQuery $F8306 ( sql , selectionArgs ) { \n\tfor ( $F151668 ( i , count , selectionArgs ) ) sql = sql . replaceFirst ( NUM00 , selectionArgs [ i ] ) ; \n\tLogUtils . d ( sql ) ; \n\tdatabase . execSQL ( sql ) ; \n\t} \n"}, {"code": "public DGeneralSubtreeChooser ( JFrame parent , String title , GeneralSubtree generalSubtree ) $F313840 ( super , parent , title , ModalityType , initComponents , generalSubtree ) "}, {"code": "public void insert ( UndoObjectStorable p_object ) { \n\tif ( p_object == null ) $F70401 ( classname ) disable_redo ( ) ; \n\tUndoObjectNode undoable_object = new UndoObjectNode ( p_object , stack_level ) ; \n\tobjects_map . put ( p_object , undoable_object ) ; \n\t} \n"}, {"code": "protected abstract SimpleEntry entryDataMatched ( EntryHierarchyData ehd ) ; \n"}, {"code": "$F1 public $F987 listOptions $F72 { \n\t$F46582 ( result , enumToVector , super ) result . add ( new Option ( NUM00 + defaultNoisePercent ( ) + NUM00 , NUM00 , NUM00 , NUM00 ) ) ; \n\t$F1007 ( result ) } \n"}, {"code": "$F9749 ( namespace , attName , attValue , xmlWriter , registerPrefix ) "}, {"code": "$F1431 protected void notifyPropertyChangeListener $F109214 ( property , oldValue , newValue ) { \n\tif ( $F1256 ( oldValue , newValue ) || oldValue == newValue ) $F21338 ( log ) Vector $F39994 v ; \n\tsynchronized ( this ) { \n\t\tv = ( Vector $F39994 ) listeners . clone ( ) ; \n\t\t} \n\tif $F585 ( log ) { \n\t\tlog . debug ( $F26062 ( v , property ) ) ; \n\t\t} \n\t$F2199 ( cnt , v ) for ( $F119 ( i , cnt ) ) { \n\t\tPropertyChangeListener client = v . elementAt ( i ) ; \n\t\tclient . propertyChange ( new PropertyChangeEvent ( this , property , oldValue , newValue ) ) ; \n\t\t} \n\t} \n"}, {"code": "$F120210 ( maximumPullScroll , getMaximumPullScroll , pLeft , getPaddingLeft , pTop , getPaddingTop , pRight , getPaddingRight , pBottom , getPaddingBottom , getPullToRefreshScrollDirection , HORIZONTAL , mMode , mHeaderLayout , mFooterLayout , VERTICAL , DEBUG , Log , LOG_TAG , String , setPadding ) "}, {"code": "public Element writeBeanVisual ( Element parent , Object o , String name ) throws Exception { \n\tElement node ; \n\tBeanVisual visual ; \n\tif ( DEBUG ) { \n\t\ttrace ( $F219728 , name ) ; \n\t\t} \n\tm_CurrentNode = parent ; \n\tvisual = ( BeanVisual ) o ; \n\tnode = writeToXML ( parent , o , name ) ; \n\tinvokeWriteToXML ( node , visual . getIconPath ( ) , VAL_ICONPATH ) ; \n\tinvokeWriteToXML ( node , visual . getAnimatedIconPath ( ) , VAL_ANIMATEDICONPATH ) ; \n\treturn node ; \n\t} \n"}, {"code": "private String displayNametoBackCompatName ( String queryName ) { \n\t$F55879 ( lastBackSlash , queryName ) if ( lastBackSlash > NUM00 && $F1093 ( lastBackSlash , queryName ) ) { \n\t\tqueryName = $F2858 + queryName ; \n\t\tqueryName = $F1399 ( queryName , lastBackSlash ) + $F2858 + NUM00 + queryName . substring ( lastBackSlash + NUM00 ) ; \n\t\tqueryName = queryName . replace ( NUM00 , $F2858 ) ; \n\t\t} \n\treturn queryName ; \n\t} \n"}, {"code": "public SQLiteDatabaseConfiguration ( String path , int openFlags ) { \n\t$F826 ( path ) this . path = path ; \n\tlabel = stripPathForLogs ( path ) ; \n\tthis . openFlags = openFlags ; \n\tmaxSqlCacheSize = NUM00 ; \n\t$F39044 ( locale , Locale ) } \n"}, {"code": "$F1 public void drawRangeGridline ( Graphics2D g2 , CategoryPlot plot , ValueAxis axis , Rectangle2D dataArea , double value ) { \n\t$F10706 ( range , axis ) $F10707 ( range , value ) $F10701 ( adjusted , dataArea , getYOffset , getXOffset ) Line2D line1 = null ; \n\tLine2D line2 = null ; \n\t$F10709 ( orientation , plot ) if ( orientation == PlotOrientation . HORIZONTAL ) { \n\t\t$F69926 ( x0 , axis , value , adjusted , plot ) double x1 = x0 + getXOffset ( ) ; \n\t\t$F69928 ( y0 , dataArea ) double y1 = y0 - getYOffset ( ) ; \n\t\t$F69930 ( y2 , dataArea ) $F69935 ( line1 , x0 , y0 , x1 , y1 ) $F69939 ( line2 , x1 , y1 , y2 ) } \n\telse if ( orientation == PlotOrientation . VERTICAL ) { \n\t\t$F69926 ( y0 , axis , value , adjusted , plot ) double y1 = y0 - getYOffset ( ) ; \n\t\t$F69942 ( x0 , dataArea ) double x1 = x0 + getXOffset ( ) ; \n\t\t$F69944 ( x2 , dataArea ) $F69935 ( line1 , x0 , y0 , x1 , y1 ) $F69948 ( line2 , x1 , y1 , x2 ) } \n\tPaint paint = plot . getRangeGridlinePaint ( ) ; \n\tStroke stroke = plot . getRangeGridlineStroke ( ) ; \n\tg2 . setPaint ( paint != null ? paint : Plot . DEFAULT_OUTLINE_PAINT ) ; \n\tg2 . setStroke ( stroke != null ? stroke : Plot . DEFAULT_OUTLINE_STROKE ) ; \n\tg2 . draw ( line1 ) ; \n\tg2 . draw ( line2 ) ; \n\t} \n"}, {"code": "public static String dump ( final EndpointDescriptor descriptor ) { \n\treturn String . format ( $F34354 + NUM00 + NUM00 + NUM00 , descriptor . bLength ( ) , descriptor . bDescriptorType ( ) , String . format ( NUM00 , descriptor . bEndpointAddress ( ) & NUM00 ) , descriptor . bEndpointAddress ( ) & NUM00 , getDirectionName ( descriptor . bEndpointAddress ( ) ) , descriptor . bmAttributes ( ) & NUM00 , getTransferTypeName ( descriptor . bmAttributes ( ) ) , getSynchTypeName ( descriptor . bmAttributes ( ) ) , getUsageTypeName ( descriptor . bmAttributes ( ) ) , descriptor . wMaxPacketSize ( ) & NUM00 , descriptor . bInterval ( ) & NUM00 ) ; \n\t} \n"}, {"code": "public $F987 listOptions $F72 { \n\t$F994 ( newVector ) $F1006 ( newVector ) $F9010 ( newVector , Collections , super ) $F1007 ( newVector ) } \n"}, {"code": "public static void printPadding ( PrintWriter out , int padding ) { \n\tfor ( $F1316 ( i , padding ) ) $F21410 ( out ) } \n"}, {"code": "protected void sneakyClear $F72 { \n\tList < EObject > collection = new UnmodifiableEList $F200 ( size , data ) ; \n\tsneakyDoClear ( ) ; \n\tfor ( Iterator < EObject > i = collection . iterator ( ) ; \n\ti . hasNext ( ) ; \n\t) { \n\t\tinverseRemove ( i . next ( ) , null ) ; \n\t\t} \n\t} \n"}, {"code": "$F137843 public static Bitmap createHomeScreenIconFromWebIcon ( Context context , Bitmap webIcon ) { \n\tActivityManager am = ( ActivityManager ) context . getSystemService ( Context . ACTIVITY_SERVICE ) ; \n\tint maxInnerSize = Math . round ( am . getLauncherLargeIconSize ( ) * MAX_INNER_SIZE_RATIO ) ; \n\tint innerSize = Math . min ( maxInnerSize , Math . max ( $F13695 ( webIcon ) ) ) ; \n\t$F383470 ( padding , Math , ICON_PADDING_RATIO , innerSize ) int outerSize = innerSize + NUM00 * padding ; \n\tBitmap bitmap = null ; \n\ttry { \n\t\tbitmap = Bitmap . createBitmap ( outerSize , outerSize , Bitmap . Config . ARGB_8888 ) ; \n\t\t} \n\tcatch ( OutOfMemoryError e ) $F35336 ( Log , TAG , webIcon ) $F107516 ( canvas , bitmap ) Rect innerBounds = new Rect ( padding , padding , outerSize - padding , outerSize - padding ) ; \n\tPaint paint = new Paint ( Paint . ANTI_ALIAS_FLAG ) ; \n\tpaint . setFilterBitmap ( _BOOL ) ; \n\tcanvas . drawBitmap ( webIcon , null , innerBounds , paint ) ; \n\t$F383470 ( cornerRadius , Math , ICON_CORNER_RADIUS_RATIO , outerSize ) $F6212 ( path ) path . setFillType ( Path . FillType . INVERSE_WINDING ) ; \n\tRectF innerBoundsF = new RectF ( innerBounds ) ; \n\tpath . addRoundRect ( innerBoundsF , cornerRadius , cornerRadius , Path . Direction . CW ) ; \n\tpaint . setXfermode ( new PorterDuffXfermode ( PorterDuff . Mode . CLEAR ) ) ; \n\tcanvas . drawPath ( path , paint ) ; \n\treturn bitmap ; \n\t} \n"}, {"code": "private static boolean isInOverflow ( MenuItem item ) { \n\treturn ! isActionButton ( item ) ; \n\t} \n"}, {"code": "private static int determineConsecutiveBinaryCount ( CharSequence msg , $F96 bytes , int startpos ) throws WriterException { \n\t$F1749 ( len , msg ) int idx = startpos ; \n\twhile ( idx < len ) { \n\t\t$F1280 ( ch , msg , idx ) int numericCount = NUM00 ; \n\t\twhile ( numericCount < NUM00 && isDigit ( ch ) ) { \n\t\t\tnumericCount ++ ; \n\t\t\tint i = idx + numericCount ; \n\t\t\t$F66497 ( i , len ) ch = msg . charAt ( i ) ; \n\t\t\t} \n\t\tif ( numericCount >= NUM00 ) { \n\t\t\treturn idx - startpos ; \n\t\t\t} \n\t\tint textCount = NUM00 ; \n\t\twhile ( textCount < NUM00 && isText ( ch ) ) { \n\t\t\ttextCount ++ ; \n\t\t\tint i = idx + textCount ; \n\t\t\t$F66497 ( i , len ) ch = msg . charAt ( i ) ; \n\t\t\t} \n\t\tif ( textCount >= NUM00 ) { \n\t\t\treturn idx - startpos ; \n\t\t\t} \n\t\tch = msg . charAt ( idx ) ; \n\t\tif ( bytes [ idx ] == NUM00 && ch != NUM00 ) { \n\t\t\tthrow new WriterException ( NUM00 + ch + NUM00 + ( int ) ch + NUM00 ) ; \n\t\t\t} \n\t\tidx ++ ; \n\t\t} \n\treturn idx - startpos ; \n\t} \n"}, {"code": "void pluginMessage ( Throwable ex ) { \n\tlog . printLines ( PrefixKind . JAVAC , NUM00 ) ; \n\t$F94360 ( ex , log , WriterKind ) } \n"}, {"code": "public Builder map ( String fullyQualifiedColumnNames , ColumnMapper mapper ) { \n\tPredicate < ColumnId > columnMatcher = Predicates . includes ( fullyQualifiedColumnNames , null ) ; \n\trules . add ( new MapperRule ( columnMatcher , mapper ) ) ; \n\treturn this ; \n\t} \n"}, {"code": "public double theta $F72 { \n\t$F31795 ( Math , y , x ) } \n"}, {"code": "public static int hash32 ( final String text , int from , int length ) { \n\treturn hash32 ( text . substring ( from , from + length ) ) ; \n\t} \n"}, {"code": "protected void sendClosingMessage $F72 { \n\ttry { \n\t\tsend ( ConnectionMessage . CLOSING , NetworkProtocol . TCP ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tlog . warning ( $F5351 ( e ) ) ; \n\t\t} \n\ttry { \n\t\tsend ( ConnectionMessage . CLOSING , NetworkProtocol . UDP ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tlog . warning ( $F5351 ( e ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static String parseNumberToString ( int aNumber ) { \n\tboolean temp = _BOOL , negative = _BOOL ; \n\tif ( aNumber < NUM00 ) { \n\t\taNumber *= - NUM00 ; \n\t\tnegative = _BOOL ; \n\t\t} \n\t$F83 ( tStringB ) for ( int i = NUM00 ; \n\ti > NUM00 ; \n\ti /= NUM00 ) { \n\t\tint tDigit = ( aNumber / i ) % NUM00 ; \n\t\tif ( temp && tDigit != NUM00 ) temp = _BOOL ; \n\t\tif ( ! temp ) { \n\t\t\ttStringB . append ( tDigit ) ; \n\t\t\tif ( i != NUM00 ) for ( int j = i ; \n\t\t\tj > NUM00 ; \n\t\t\tj /= NUM00 ) if ( j == NUM00 ) $F84 ( tStringB ) } \n\t\t} \n\t$F1822 ( tString , tStringB ) if $F1238 ( tString , E ) tString = NUM00 ; \n\treturn negative ? NUM00 + tString : tString ; \n\t} \n"}, {"code": "public void remove ( T graphic ) { \n\tsynchronized ( mLock ) { \n\t\tmGraphics . remove ( graphic ) ; \n\t\tif $F1256 ( mFirstGraphic , graphic ) { \n\t\t\tmFirstGraphic = null ; \n\t\t\t} \n\t\t} \n\tpostInvalidate ( ) ; \n\t} \n"}, {"code": "public boolean validSystemNameConfig ( String systemName ) $F3139 ( _BOOL ) "}, {"code": "public int read $F72 throws IOException { \n\tensureOpen ( ) ; \n\t$F55825 ( next , length ) return str . charAt ( next ++ ) ; \n\t} \n"}, {"code": "void addHiddenChannelListener ( HiddenChannelListener listener ) $F207 ( listeners , listener ) "}, {"code": "public boolean nextTo ( final Entity entity , final double step ) { \n\tfinal Rectangle2D thisArea = new $F1634 ( x - step , y - step , area . getWidth ( ) + NUM00 * step , area . getHeight ( ) + NUM00 * step ) ; \n\treturn thisArea . intersects ( entity . getArea ( ) ) ; \n\t} \n"}, {"code": "private long rebalance_nl ( final long nParent , final long n , LongArray unlinked ) { \n\tfinal long nL = unsharedLeft ( n , unlinked ) ; \n\tfinal long nR = unsharedRight ( n , unlinked ) ; \n\tif ( ( nL == NUM00 || nR == NUM00 ) && vOptIsNull ( n ) ) { \n\t\tif ( attemptUnlink_nl ( nParent , n , unlinked ) ) $F4915 ( fixHeight_nl , nParent ) else { \n\t\t\treturn n ; \n\t\t\t} \n\t\t} \n\tfinal int hN = height ( n ) ; \n\tfinal int hL0 = height ( nL ) ; \n\tfinal int hR0 = height ( nR ) ; \n\tfinal int hNRepl = NUM00 + Math . max ( hL0 , hR0 ) ; \n\tfinal int bal = hL0 - hR0 ; \n\tif ( bal > NUM00 ) $F16525 ( rebalanceToRight_nl , nParent , n , nL , hR0 , unlinked ) else if ( bal < - NUM00 ) $F16525 ( rebalanceToLeft_nl , nParent , n , nR , hL0 , unlinked ) else if ( hNRepl != hN ) { \n\t\theight ( n , hNRepl ) ; \n\t\treturn fixHeight_nl ( nParent ) ; \n\t\t} \n\telse $F1083 } \n"}, {"code": "$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel ) "}, {"code": "private void addConversations $F72 { \n\tTPP_Phase myphase = AWAITING ; \n\tmainNPC . add ( ConversationStates . ATTENDING , $F161002 ( Arrays ) , new TPPQuestInPhaseCondition ( myphase ) , ConversationStates . ATTENDING , $F38 , null ) ; \n\tmainNPC . add ( ConversationStates . ATTENDING , NUM00 , new TPPQuestInPhaseCondition ( myphase ) , ConversationStates . ATTENDING , null , new DetailsKillingsAction $F72 ) ; \n\tmainNPC . add ( ConversationStates . ATTENDING , NUM00 , new TPPQuestInPhaseCondition ( myphase ) , ConversationStates . ATTENDING , null , new RewardPlayerAction $F72 ) ; \n\t} \n"}, {"code": "public static void w $F3867 ( tag , s , args ) { \n\tif ( LOG . WARN >= LOGLEVEL ) Log . w ( tag , String . format ( s , args ) ) ; \n\t} \n"}, {"code": "@ edu . umd . cs . findbugs . annotations . SuppressWarnings ( $F3144 , justification = NUM00 ) public void handleNotification ( Notification notification , Object handback ) { \n\tif ( handback instanceof AgentImpl ) { \n\t\tAgentImpl agent = ( AgentImpl ) handback ; \n\t\tJMXConnectionNotification jmxNotifn = ( JMXConnectionNotification ) notification ; \n\t\tif $F585 ( logger ) { \n\t\t\tlogger . debug ( NUM00 , jmxNotifn . getConnectionId ( ) ) ; \n\t\t\t} \n\t\tagent . updateRmiClientsCount ( ) ; \n\t\t} \n\t} \n"}, {"code": "public static boolean isBlank ( String s ) { \n\t$F1933 ( s , _BOOL ) $F1749 ( sLen , s ) for ( $F119 ( i , sLen ) ) { \n\t\tif $F11994 ( Character , s , i ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public PlainTextDictionary ( Path path ) throws IOException { \n\tin = Files . newBufferedReader ( path , StandardCharsets . UTF_8 ) ; \n\t} \n"}, {"code": "public boolean addAliasByNumber ( String aliasName , String number ) { \n\tif $F3578 ( aliasName ) return _BOOL ; \n\tString contactName = ContactsManager . getContactNameOrNull ( ctx , number ) ; \n\taddOrUpdate ( aliasName , number , contactName ) ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "void splitData ( Node node , Node newNode , int offset ) { \n\tif ( ranges != null ) { \n\t\tnotifyRangesSplitData ( node , newNode , offset ) ; \n\t\t} \n\t} \n"}, {"code": "$F1113 @ ObjectiveCName ( NUM00 ) public ConfigurationBuilder addTrustedKey ( String trustedKey ) { \n\ttrustedKeys . add ( new TrustedKey ( trustedKey ) ) ; \n\treturn this ; \n\t} \n"}, {"code": "private void checkIsCorrectClass $F72 { \n\tif ( checkIsSubClass ( ACT_NAME ) ) { \n\t\ttype = ElementType . ACTTIVITY ; \n\t\t} \n\telse if $F71585 ( checkIsSubClass , FRAG_NAME , V4_FRAG_NAME ) { \n\t\ttype = ElementType . FRAGMENT ; \n\t\t} \n\telse { \n\t\tthrow new IllegalArgumentException ( String . format ( NUM00 , element . getQualifiedName ( ) , ACT_NAME , FRAG_NAME , V4_FRAG_NAME ) ) ; \n\t\t} \n\t} \n"}, {"code": "String transformResourceIdToFileName ( final String resourceName ) $F11447 ( resourceName ) "}, {"code": "public void disable ( RichFormatterFeature feature ) $F106 ( features , feature ) "}, {"code": "$F38752 ( _BOOL ) "}, {"code": "public final boolean isSecure ( Socket sock ) throws IllegalArgumentException { \n\t$F826 ( sock ) if ( sock . getClass ( ) != $F43259 ) $F825 $F43264 ( sock ) return _BOOL ; \n\t} \n"}, {"code": "$F58902 ( name , threadId , mFinished , mMarkers , SystemClock ) "}, {"code": "private void skipWhitespace $F72 { \n\tmatcher . usePattern ( WHITESPACE ) ; \n\tif $F54321 ( matcher ) { \n\t\tmatcher . region ( matcher . end ( ) , matcher . regionEnd ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "$F20813 ( fieldId , SUCCESS , MSG ) "}, {"code": "public void pushStylesheet ( Stylesheet s ) { \n\tif $F10471 ( m_stylesheets ) m_stylesheetRoot = ( StylesheetRoot ) s ; \n\tm_stylesheets . push ( s ) ; \n\t} \n"}, {"code": "private void fillNodesInContext ( SiteNode rootNode , List $F46963 nodesList ) { \n\t$F1431 Enumeration $F46963 en = rootNode . children ( ) ; \n\twhile $F1444 ( en ) { \n\t\tSiteNode sn = en . nextElement ( ) ; \n\t\t$F192176 ( isInContext , sn , nodesList ) fillNodesInContext ( sn , nodesList ) ; \n\t\t} \n\t} \n"}, {"code": "$F45923 public boolean matches ( InventoryCrafting p_77569_1_ , World p_77569_2_ ) { \n\tArrayList arraylist = new ArrayList ( this . recipeItems ) ; \n\tfor ( $F809 ( i ) ) { \n\t\tfor ( $F809 ( j ) ) { \n\t\t\tItemStack itemstack = p_77569_1_ . getStackInRowAndColumn ( j , i ) ; \n\t\t\tif ( itemstack != null ) { \n\t\t\t\tboolean flag = _BOOL ; \n\t\t\t\t$F19402 ( iterator , arraylist ) while $F2921 ( iterator ) { \n\t\t\t\t\tItemStack itemstack1 = ( ItemStack ) iterator . next ( ) ; \n\t\t\t\t\tif ( itemstack . getItem ( ) == itemstack1 . getItem ( ) && ( itemstack1 . getItemDamage ( ) == NUM00 || itemstack . getItemDamage ( ) == itemstack1 . getItemDamage ( ) ) ) { \n\t\t\t\t\t\tflag = _BOOL ; \n\t\t\t\t\t\tarraylist . remove ( itemstack1 ) ; \n\t\t\t\t\t\t$F597 } \n\t\t\t\t\t} \n\t\t\t\t$F42316 ( flag , _BOOL ) } \n\t\t\t} \n\t\t} \n\t$F18904 ( arraylist ) } \n"}, {"code": "public StringBuilder dumpStatements ( final IAccessPath < ISPO > accessPath ) { \n\t$F1121 ( sb ) final BigdataStatementIterator itr = $F15849 ( asStatementIterator , accessPath ) ; \n\ttry { \n\t\twhile $F2921 ( itr ) { \n\t\t\tsb . append ( NUM00 + itr . next ( ) ) ; \n\t\t\t} \n\t\treturn sb ; \n\t\t} \n\t$F3229 ( itr ) } \n"}, {"code": "public static Element svgWaitIcon ( Document document , double x , double y , double w , double h ) { \n\tElement g = SVGUtil . svgElement ( document , SVGConstants . SVG_G_TAG ) ; \n\tsetAtt ( g , SVGConstants . SVG_TRANSFORM_ATTRIBUTE , $F3905 ( x , y , w , h ) ) ; \n\tElement thro = SVGUtil . svgElement ( document , SVGConstants . SVG_PATH_TAG ) ; \n\tsetAtt ( thro , SVGConstants . SVG_D_ATTRIBUTE , THROBBER_PATH ) ; \n\tsetStyle ( thro , THROBBER_STYLE ) ; \n\tElement anim = SVGUtil . svgElement ( document , SVGConstants . SVG_ANIMATE_TRANSFORM_TAG ) ; \n\tsetAtt ( anim , SVGConstants . SVG_ATTRIBUTE_NAME_ATTRIBUTE , SVGConstants . SVG_TRANSFORM_ATTRIBUTE ) ; \n\tsetAtt ( anim , SVGConstants . SVG_ATTRIBUTE_TYPE_ATTRIBUTE , NUM00 ) ; \n\tsetAtt ( anim , SVGConstants . SVG_TYPE_ATTRIBUTE , SVGConstants . SVG_ROTATE_ATTRIBUTE ) ; \n\tsetAtt ( anim , SVGConstants . SVG_FROM_ATTRIBUTE , NUM00 ) ; \n\tsetAtt ( anim , SVGConstants . SVG_TO_ATTRIBUTE , NUM00 ) ; \n\tsetAtt ( anim , SVGConstants . SVG_BEGIN_ATTRIBUTE , fmt ( $F34938 ( Math ) ) + NUM00 ) ; \n\tsetAtt ( anim , SVGConstants . SVG_DUR_ATTRIBUTE , NUM00 ) ; \n\tsetAtt ( anim , SVGConstants . SVG_REPEAT_COUNT_ATTRIBUTE , NUM00 ) ; \n\tsetAtt ( anim , SVGConstants . SVG_FILL_ATTRIBUTE , NUM00 ) ; \n\tthro . appendChild ( anim ) ; \n\tg . appendChild ( thro ) ; \n\treturn g ; \n\t} \n"}, {"code": "protected void onEnd ( Pcap pcap ) { \n\tthis . end = _BOOL ; \n\t} \n"}, {"code": "public void cd ( String dir ) { \n\t$F83 ( buf ) String command = $F36702 ( String , ImageServerDialogProperties , dir ) ; \n\tsendWaitFor ( command , defaultTimeout , prompts , buf ) ; \n\t$F62755 ( log , buf ) } \n"}, {"code": "public void addRequestProperty ( String key , String value ) { \n\tjarFileURLConnection . addRequestProperty ( key , value ) ; \n\t} \n"}, {"code": "$F131106 ( number , testValidity , string ) "}, {"code": "public static void writeSpecInfoToFiles ( SecuritySpecModel securitySpecModel , String app_ROOT_DIR ) { \n\twriteInfoFlowSummaryToFile ( securitySpecModel , Config . v ( ) . APP_ROOT_DIR ) ; \n\twriteInfoFlowDetailsToFile ( securitySpecModel , Config . v ( ) . APP_ROOT_DIR ) ; \n\twriteValueInfoToFile ( securitySpecModel , Config . v ( ) . APP_ROOT_DIR ) ; \n\twritePointsToInfoToFile ( securitySpecModel , Config . v ( ) . APP_ROOT_DIR ) ; \n\t} \n"}, {"code": "$F23145 ( measureSpec , result , specMode , MeasureSpec , specSize , mRadius , getPaddingTop , getPaddingBottom , Math ) "}, {"code": "private void handleCommand $F103468 ( id , command , params ) { \n\t$F1729 ( originCommand , commandId , id ) $F23170 ( originCommand ) handler . handleCommand ( id , command , params , originCommand ) ; \n\tif $F3057 ( command ) $F37856 ( LOGGER , params ) } \n"}, {"code": "private void closeAllDumps $F72 { \n\t$F131 options = $F4582 ; \n\tint selectValue = JOptionPane . showOptionDialog ( null , NUM00 , NUM00 , JOptionPane . DEFAULT_OPTION , JOptionPane . QUESTION_MESSAGE , null , options , options [ NUM00 ] ) ; \n\tif ( selectValue == NUM00 ) { \n\t\t$F20637 ( topNodes ) resetMainPanel ( ) ; \n\t\t} \n\t} \n"}, {"code": "private void closeCounterDataInputStream $F72 throws DataFallbackException { \n\tif $F585 ( LOG ) $F74568 ( LOG , counterFile ) if ( dInput != null ) { \n\t\ttry $F881 ( dInput ) catch ( IOException e ) { \n\t\t\tthrow new DataFallbackException $F1783 ( e ) ; \n\t\t\t} \n\t\t$F14110 ( dInput ) } \n\t} \n"}, {"code": "private static String removeFileNameExtension ( String fileName ) { \n\tif ( fileName . lastIndexOf ( NUM00 ) == - NUM00 ) return fileName ; \n\treturn $F129389 ( fileName ) ; \n\t} \n"}, {"code": "public void clear $F72 { \n\tread = write = count = NUM00 ; \n\t$F17838 ( Arrays , buffer ) } \n"}, {"code": "$F98646 ( response , data , decodeOptions , bitmap , mMaxWidth , mMaxHeight , mDecodeConfig , BitmapFactory , _BOOL , actualWidth , actualHeight , desiredWidth , getResizedDimension , mScaleType , desiredHeight , findBestSampleSize , tempBitmap , Bitmap , Response , HttpHeaderParser ) "}, {"code": "private $F14699 reduceWithDouglasPeuker ( $F14699 entries , double epsilon ) { \n\tif ( epsilon <= NUM00 || $F6213 ( entries ) ) { \n\t\treturn entries ; \n\t\t} \n\tkeep [ NUM00 ] = _BOOL ; \n\tkeep [ $F2281 ( entries ) ] = _BOOL ; \n\talgorithmDouglasPeucker ( entries , epsilon , NUM00 , $F2281 ( entries ) ) ; \n\t$F14699 $F204 ( reducedEntries ) ; \n\tfor ( $F2277 ( i , entries ) ) { \n\t\tif ( keep [ i ] ) { \n\t\t\t$F14726 ( curEntry , entries , i ) reducedEntries . add ( new Entry ( curEntry . getVal ( ) , curEntry . getXIndex ( ) ) ) ; \n\t\t\t} \n\t\t} \n\treturn reducedEntries ; \n\t} \n"}, {"code": "static int hiBitPos ( long num ) { \n\treturn NUM00 - Long . numberOfLeadingZeros ( num ) ; \n\t} \n"}, {"code": "public AdaptiveGridArchive ( int capacity , Problem problem , int numberOfDivisions ) { \n\tthis . capacity = capacity ; \n\tthis . problem = problem ; \n\tthis . numberOfDivisions = numberOfDivisions ; \n\tminimum = new double [ problem . getNumberOfObjectives ( ) ] ; \n\tmaximum = new double [ problem . getNumberOfObjectives ( ) ] ; \n\tdensity = new int [ ( int ) Math . pow ( numberOfDivisions , problem . getNumberOfObjectives ( ) ) ] ; \n\tadaptGrid ( ) ; \n\t} \n"}, {"code": "BeginLineAction ( String nm , boolean select ) $F64660 ( super , nm , this , select ) "}, {"code": "public static boolean occupy ( int waitMs ) { \n\tif ( occupiedUntil != null && occupiedUntil . after ( $F4094 ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\toccupiedUntil = DateUtils . addMilliseconds ( $F4094 , waitMs ) ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "private void adjustWindowSize ( ContainerWrapper parent ) { \n\tBoundSize wBounds = lc . getPackWidth ( ) ; \n\tBoundSize hBounds = lc . getPackHeight ( ) ; \n\t$F2564 ( wBounds , hBounds ) Window win = ( ( Window ) SwingUtilities . getAncestorOfClass ( Window . class , ( Component ) parent . getComponent ( ) ) ) ; \n\t$F8249 ( win ) $F86864 ( prefSize , win ) int targW = constrain ( checkParent ( win ) , win . getWidth ( ) , prefSize . width , wBounds ) ; \n\tint targH = constrain ( checkParent ( win ) , win . getHeight ( ) , prefSize . height , hBounds ) ; \n\tint x = Math . round ( win . getX ( ) - ( ( targW - win . getWidth ( ) ) * ( NUM00 - lc . getPackWidthAlign ( ) ) ) ) ; \n\tint y = Math . round ( win . getY ( ) - ( ( targH - win . getHeight ( ) ) * ( NUM00 - lc . getPackHeightAlign ( ) ) ) ) ; \n\twin . setBounds ( x , y , targW , targH ) ; \n\t} \n"}, {"code": "$F1 public void write ( $F4358 ( valueList ) ) throws IOException { \n\t$F62355 ( isFirstTime , init , _BOOL ) for ( $F96 value : valueList ) { \n\t\toneDictionaryChunkList . add ( ByteBuffer . wrap ( value ) ) ; \n\t\ttotalRecordCount ++ ; \n\t\t} \n\t} \n"}, {"code": "public void proceed $F72 { \n\tidle . set ( _BOOL ) ; \n\tsubject . onNext ( null ) ; \n\t} \n"}, {"code": "private static boolean nsEquals ( String nsURI_1 , String nsURI_2 ) { \n\tif ( nsURI_1 == null ) $F314738 ( nsURI_2 ) else $F23588 ( nsURI_1 , nsURI_2 ) } \n"}, {"code": "$F65837 ( node , count , capacity , _BOOL , f , first , last , notEmpty ) "}, {"code": "public static void sleep ( long millis ) { \n\tif ( mockSleepQueue == null ) { \n\t\tsleepUninterruptibly ( millis , TimeUnit . MILLISECONDS ) ; \n\t\t} \n\telse { \n\t\ttry { \n\t\t\tboolean isMultiPass = mockSleepQueue . take ( ) ; \n\t\t\trollMockClockMillis ( millis ) ; \n\t\t\tif ( isMultiPass ) mockSleepQueue . offer ( _BOOL ) ; \n\t\t\t} \n\t\t$F887 } \n\t} \n"}, {"code": "public boolean isHandle ( String handle ) $F23588 ( clientHandle , handle ) "}, {"code": "public static void isGTE ( String argName , long i , long min ) { \n\tif ( i < min ) { \n\t\tthrow new IllegalArgumentException ( String . format ( NUM00 , argName , min , i ) ) ; \n\t\t} \n\t} \n"}, {"code": "int adjustTextOffset ( int offset ) { \n\t$F19410 ( maxTextOffset , Math , offset ) return maxTextOffset ; \n\t} \n"}, {"code": "public static Object valueFromClassConstant ( String key , Object defaultValue ) { \n\tConfiguration conf = instance ( ) ; \n\tString val = valueFor ( key ) ; \n\t$F1933 ( val , defaultValue ) $F24867 ( idx , val ) String klassname ; \n\tString cnst ; \n\ttry $F60269 ( klassname , val , idx , cnst ) catch ( IndexOutOfBoundsException e ) { \n\t\tconf . warning ( NUM00 + key + NUM00 + NUM00 + val ) ; \n\t\treturn defaultValue ; \n\t\t} \n\tClass klass ; \n\ttry { \n\t\tklass = Class . forName ( klassname ) ; \n\t\t} \n\tcatch ( ClassNotFoundException e ) { \n\t\t$F105918 ( conf , key , klassname ) return defaultValue ; \n\t\t} \n\tObject cnstVal ; \n\ttry { \n\t\t$F111040 ( fld , klass , cnst ) try $F6045 ( cnstVal , fld , klass ) catch ( IllegalAccessException e ) { \n\t\t\tconf . warning ( NUM00 + key + NUM00 + klassname + NUM00 + cnst ) ; \n\t\t\treturn defaultValue ; \n\t\t\t} \n\t\t} \n\tcatch ( NoSuchFieldException e ) { \n\t\t$F105918 ( conf , key , klassname ) return defaultValue ; \n\t\t} \n\treturn cnstVal ; \n\t} \n"}, {"code": "public static boolean isWifiConnected ( Context context ) { \n\t$F40395 ( connectivityManager , context , Context ) $F40397 ( networkInfo , connectivityManager ) return networkInfo != null && networkInfo . getType ( ) == ConnectivityManager . TYPE_WIFI ; \n\t} \n"}, {"code": "public StrBuilder insert ( final int index , final char value ) { \n\tvalidateIndex ( index ) ; \n\tensureCapacity ( size + NUM00 ) ; \n\t$F27096 ( System , buffer , index , size ) buffer [ index ] = value ; \n\tsize ++ ; \n\treturn this ; \n\t} \n"}, {"code": "public $F3510 tryDecode ( final String targetToken ) { \n\tfinal ByteBuffer payloadBuf = extractValidPayloadFields ( targetToken ) ; \n\t$F1338 ( payloadBuf ) final $F3510 $F204 ( fields ) ; \n\ttry { \n\t\t$F5475 ( field ) while ( ( field = tryReadPayloadNextField ( payloadBuf ) ) . length > NUM00 ) { \n\t\t\tfields . add ( field ) ; \n\t\t\tif $F60125 ( fields , MAX_FIELD_SIZE ) $F1337 } \n\t\treturn fields ; \n\t\t} \n\tcatch ( final BufferUnderflowException e ) $F1337 } \n"}, {"code": "@ NamespacePermission ( fields = NUM00 , permissions = NamespacePermissionEnum . WRITE ) $F1 public BusinessObjectDefinition createBusinessObjectDefinition ( BusinessObjectDefinitionCreateRequest request ) { \n\tvalidateBusinessObjectDefinitionCreateRequest ( request ) ; \n\tNamespaceEntity namespaceEntity = namespaceDaoHelper . getNamespaceEntity ( request . getNamespace ( ) ) ; \n\tDataProviderEntity dataProviderEntity = dataProviderDaoHelper . getDataProviderEntity ( request . getDataProviderName ( ) ) ; \n\tBusinessObjectDefinitionKey businessObjectDefinitionKey = new BusinessObjectDefinitionKey ( request . getNamespace ( ) , request . getBusinessObjectDefinitionName ( ) ) ; \n\tBusinessObjectDefinitionEntity businessObjectDefinitionEntity = businessObjectDefinitionDao . getBusinessObjectDefinitionByKey ( businessObjectDefinitionKey ) ; \n\tif ( businessObjectDefinitionEntity != null ) { \n\t\tthrow new AlreadyExistsException ( String . format ( NUM00 , businessObjectDefinitionKey . getBusinessObjectDefinitionName ( ) , businessObjectDefinitionKey . getNamespace ( ) ) ) ; \n\t\t} \n\tbusinessObjectDefinitionEntity = createBusinessObjectDefinitionEntity ( request , namespaceEntity , dataProviderEntity ) ; \n\treturn createBusinessObjectDefinitionFromEntity ( businessObjectDefinitionEntity ) ; \n\t} \n"}, {"code": "public void endBlock $F72 throws IOException { \n\tif $F71860 ( indent ) { \n\t\tindent = NUM00 ; \n\t\t} \n\telse if $F45145 ( indent ) $F3109 ( indent ) print ( NUM00 , null ) ; \n\t$F21416 ( printer ) } \n"}, {"code": "private void migrateBlockVolumes $F72 { \n\t$F973 ( log ) DbClient dbClient = getDbClient ( ) ; \n\t$F28584 volumeURIs = dbClient . queryByType ( $F8540 , _BOOL ) ; \n\t$F150928 volumes = dbClient . queryIterativeObjects ( $F8540 , volumeURIs , _BOOL ) ; \n\tList $F30635 blockObjects = new ArrayList $F30635 $F72 ; \n\t$F3536 ( volumes , blockObjects ) migrateBlockObjects ( blockObjects ) ; \n\t} \n"}, {"code": "public static String decode $F22381 ( s , enc , plusToSpace ) { \n\tboolean modified = _BOOL ; \n\tif $F6036 ( enc ) { \n\t\tenc = NUM00 ; \n\t\t} \n\t$F1749 ( numChars , s ) StringBuilder sb = new StringBuilder ( numChars > NUM00 ? numChars / NUM00 : numChars ) ; \n\tint i = NUM00 ; \n\tchar c ; \n\t$F5475 ( bytes ) while ( i < numChars ) { \n\t\tc = s . charAt ( i ) ; \n\t\tswitch ( c ) { \n\t\t\t$F1262 if ( plusToSpace ) $F86 ( sb ) else $F86 ( sb ) i ++ ; \n\t\t\tmodified = _BOOL ; \n\t\t\t$F597 $F1262 try { \n\t\t\t\tif ( bytes == null ) { \n\t\t\t\t\tbytes = new byte [ ( numChars - i ) / NUM00 ] ; \n\t\t\t\t\t} \n\t\t\t\tint pos = NUM00 ; \n\t\t\t\twhile ( $F7526 ( i , numChars ) && ( c == NUM00 ) ) { \n\t\t\t\t\tbytes [ pos ++ ] = ( byte ) $F105161 ( Integer , s , i ) ; \n\t\t\t\t\ti += NUM00 ; \n\t\t\t\t\tif ( i < numChars ) $F7458 ( c , s , i ) } \n\t\t\t\tif ( ( i < numChars ) && ( c == NUM00 ) ) $F18931 ( s ) try { \n\t\t\t\t\tsb . append ( new String ( bytes , NUM00 , pos , enc ) ) ; \n\t\t\t\t\t} \n\t\t\t\tcatch ( UnsupportedEncodingException e ) { \n\t\t\t\t\tthrow new RuntimeException $F3362 ( e ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tcatch ( NumberFormatException e ) $F18931 ( s ) modified = _BOOL ; \n\t\t\t$F597 $F1267 sb . append ( c ) ; \n\t\t\ti ++ ; \n\t\t\t$F597 } \n\t\t} \n\tif ( modified ) $F2495 ( sb ) return s ; \n\t} \n"}, {"code": "public ServerControllerTest ( String name ) { \n\tsuper ( name ) ; \n\tthis . baseDir = System . getProperty ( NUM00 ) ; \n\t} \n"}, {"code": "$F1 public String encode $F72 { \n\treturn value == intValue ( ) ? $F27055 ( Integer , intValue ) + unit . encode ( ) : Double . toString ( value ) + unit . encode ( ) ; \n\t} \n"}, {"code": "public HostNameParser ( LexerCore lexer ) { \n\tthis . lexer = lexer ; \n\tlexer . selectLexer ( NUM00 ) ; \n\tstripAddressScopeZones = Boolean . getBoolean ( NUM00 ) ; \n\t} \n"}, {"code": "private void loadText ( InputStream is ) { \n\tBufferedReader reader ; \n\tString line ; \n\tif ( is == null ) $F78453 $F105457 ( reader , is ) try { \n\t\t$F36243 ( line , reader ) lineCount ++ ; \n\t\twhile ( line != null ) { \n\t\t\tif $F14943 ( line ) { \n\t\t\t\tparseAndAdd ( line , reader ) ; \n\t\t\t\t} \n\t\t\t$F36243 ( line , reader ) } \n\t\t$F59 ( reader ) } \n\tcatch ( IOException e ) { \n\t\tthrow new Error ( e . getMessage ( ) + NUM00 + lineCount ) ; \n\t\t} \n\t$F4231 } \n"}, {"code": "public void addEmailAdress ( String anEmailAddress ) { \n\tif $F283026 ( mEmails , anEmailAddress ) $F207 ( mEmails , anEmailAddress ) } \n"}, {"code": "public static Instances loadDataset ( String options [ ] , char T ) throws Exception { \n\tInstances D = null ; \n\t$F142641 ( filename , Utils , T , options ) if $F4251 ( filename ) $F9450 $F1705 ( file , filename ) if $F1906 ( file ) throw new Exception ( NUM00 + filename ) ; \n\tif $F3444 ( file ) throw new Exception ( NUM00 + filename + NUM00 ) ; \n\ttry { \n\t\tDataSource source = new DataSource ( filename ) ; \n\t\tD = source . getDataSet ( ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F301 ( e ) throw new Exception ( NUM00 + filename + NUM00 ) ; \n\t\t} \n\treturn D ; \n\t} \n"}, {"code": "$F121562 ( mIs24HourMode , values , getEnteredTime , mTypedTimes , getAmOrPmKeyCode , AM , PM ) "}, {"code": "public void test_groupCommit $F72 throws Exception { \n\tfinal int writeServiceCorePoolSize = NUM00 ; \n\t$F17606 ( properties , getProperties ) properties . setProperty ( TestOptions . TIMEOUT , NUM00 ) ; \n\t$F154946 ( properties , TestOptions ) properties . setProperty ( Options . WRITE_SERVICE_CORE_POOL_SIZE , NUM00 + writeServiceCorePoolSize ) ; \n\tproperties . setProperty ( Options . WRITE_SERVICE_MAXIMUM_POOL_SIZE , NUM00 ) ; \n\tproperties . setProperty ( Options . WRITE_SERVICE_PRESTART_ALL_CORE_THREADS , NUM00 ) ; \n\tproperties . setProperty ( Options . WRITE_SERVICE_QUEUE_CAPACITY , NUM00 ) ; \n\tdoComparisonTest ( properties ) ; \n\t} \n"}, {"code": "$F1 public void operate ( Population pop ) throws Exception { \n\tList $F7504 newIndividuals = new LinkedList $F7504 $F72 ; \n\tfor ( int i = NUM00 ; \n\ti < pop . getNumberOfIndividuals ( ) ; \n\ti ++ ) { \n\t\tList $F7504 individuals = operate ( pop . get ( i ) ) ; \n\t\tnewIndividuals . addAll ( individuals ) ; \n\t\t} \n\t$F725 ( pop ) pop . addAllIndividuals ( newIndividuals ) ; \n\t} \n"}, {"code": "$F1654 ( encodedNames ) "}, {"code": "public static $F96 toSeed $F72133 ( words , passphrase ) { \n\treturn toSeed ( words , passphrase , Version . V0_6 ) ; \n\t} \n"}, {"code": "private ArrayList < Interval > findOrCreateIntervalSet ( Register r ) { \n\tArrayList < Interval > v = map . get ( r ) ; \n\tif ( v == null ) { \n\t\tv = new ArrayList < Interval > $F72 ; \n\t\tmap . put ( r , v ) ; \n\t\t} \n\treturn v ; \n\t} \n"}, {"code": "protected void removeColumns $F126719 ( removeColumnNames , tableName ) { \n\tif $F1032 ( removeColumnNames ) { \n\t\texecute ( getRemoveColumnSQLs ( removeColumnNames , tableName ) , mDb ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public $F3789 predictIntervals ( double conf ) { \n\tupdateBoundariesAndOrWeights ( ) ; \n\tdouble val = Statistics . normalInverse ( NUM00 - ( NUM00 - conf ) / NUM00 ) ; \n\tdouble min = m_TM . firstKey ( ) - val * m_Width ; \n\tdouble max = m_TM . lastKey ( ) + val * m_Width ; \n\tdouble delta = ( max - min ) / m_NumIntervals ; \n\t$F9662 ( probabilities , m_NumIntervals ) double leftVal = Math . exp ( logDensity ( min ) ) ; \n\tfor ( $F119 ( i , m_NumIntervals ) ) { \n\t\tdouble rightVal = Math . exp ( logDensity ( min + ( i + NUM00 ) * delta ) ) ; \n\t\tprobabilities [ i ] = NUM00 * ( leftVal + rightVal ) * delta ; \n\t\tleftVal = rightVal ; \n\t\t} \n\t$F2027 sortedIndices = Utils . sort ( probabilities ) ; \n\tdouble sum = NUM00 ; \n\t$F24314 ( toUse , probabilities ) int k = NUM00 ; \n\twhile ( ( sum < conf ) && ( k < toUse . length ) ) { \n\t\ttoUse [ sortedIndices [ toUse . length - ( k + NUM00 ) ] ] = _BOOL ; \n\t\tsum += probabilities [ sortedIndices [ toUse . length - ( k + NUM00 ) ] ] ; \n\t\tk ++ ; \n\t\t} \n\tprobabilities = null ; \n\t$F302683 intervals = new $F302683 $F72 ; \n\t$F69807 ( interval ) boolean haveStartedInterval = _BOOL ; \n\tfor ( $F119 ( i , m_NumIntervals ) ) { \n\t\tif ( toUse [ i ] ) { \n\t\t\tif ( haveStartedInterval == _BOOL ) { \n\t\t\t\thaveStartedInterval = _BOOL ; \n\t\t\t\t$F90860 ( interval ) interval [ NUM00 ] = min + i * delta ; \n\t\t\t\t} \n\t\t\tinterval [ NUM00 ] = min + ( i + NUM00 ) * delta ; \n\t\t\t} \n\t\telse { \n\t\t\tif ( haveStartedInterval ) { \n\t\t\t\thaveStartedInterval = _BOOL ; \n\t\t\t\tintervals . add ( interval ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F46023 ( haveStartedInterval , intervals , interval ) return intervals . toArray ( new double $F387 ) ; \n\t} \n"}, {"code": "public void registerAtmosphere ( IAtmosphere atmosphere ) { \n\tatmosphereRegistration . put ( atmosphere . getUnlocalizedName ( ) , atmosphere ) ; \n\tatmosphereList . add ( atmosphere ) ; \n\t} \n"}, {"code": "public JXSearchField $F72 $F1210 ( this ) "}, {"code": "private static void reply_Login2_Role ( body body , MobileSessionCtx wsc , String roleId ) { \n\tString form = null ; \n\tLogin login = new Login ( wsc . ctx ) ; \n\tKeyNamePair [ ] clients = login . getClients ( new KeyNamePair ( Integer . parseInt ( roleId ) , roleId ) ) ; \n\t$F8755 ( script ) for ( $F1139 ( i , clients ) ) { \n\t\t$F96530 ( i , script ) KeyNamePair p = clients [ i ] ; \n\t\t$F84 ( script ) $F167270 ( script , p ) $F84 ( script ) $F79971 ( script , p ) $F84 ( script ) } \n\t$F84 ( script ) } \n"}, {"code": "public void testCreateDocumentType1 $F72 throws Throwable { \n\tDocument doc ; \n\tDOMImplementation domImpl ; \n\tDocumentType newDocType ; \n\tDocument ownerDocument ; \n\tString qualifiedName = NUM00 ; \n\tString publicId ; \n\tString systemId ; \n\t$F10144 ( publicIds ) $F18793 ( publicIds ) $F18793 ( publicIds ) $F10144 ( systemIds ) $F18793 ( systemIds ) $F18793 ( systemIds ) $F236 ( doc , load , builder ) $F28589 ( domImpl , doc ) for ( $F2277 ( indexN1005D , publicIds ) ) { \n\t\t$F18988 ( publicId , publicIds , indexN1005D ) for ( $F2277 ( indexN10061 , systemIds ) ) { \n\t\t\t$F18988 ( systemId , systemIds , indexN10061 ) newDocType = domImpl . createDocumentType ( qualifiedName , publicId , systemId ) ; \n\t\t\tassertNotNull ( NUM00 , newDocType ) ; \n\t\t\townerDocument = newDocType . getOwnerDocument ( ) ; \n\t\t\tassertNull ( NUM00 , ownerDocument ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public final void run $F72 { \n\tif ( m_start == NUM00 ) $F3224 ( m_start , System ) m_canContinue = _BOOL ; \n\twhile ( m_canContinue ) { \n\t\t$F140642 ( isInterrupted ) $F3224 ( m_lastStart , System ) m_working = _BOOL ; \n\t\ttry { \n\t\t\tm_pollCount ++ ; \n\t\t\tif ( canDoWork ( ) ) { \n\t\t\t\tm_canContinue = doWork ( ) ; \n\t\t\t\tm_count ++ ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F209655 ( log , Level , e ) m_working = _BOOL ; \n\t\t$F657 ( end , System ) m_time += ( end - m_lastStart ) ; \n\t\t$F140642 ( isInterrupted ) try { \n\t\t\t$F35577 ( log , m_sleepSeconds ) sleep ( m_sleepSeconds * NUM00 ) ; \n\t\t\t} \n\t\tcatch ( InterruptedException e1 ) { \n\t\t\tlog . warning ( $F9309 ( e1 ) ) ; \n\t\t\t$F665 } \n\t\t} \n\t} \n"}, {"code": "public static SolrDocument assertSearchOneDoc ( SolrParams p ) throws Exception { \n\tSolrDocumentList docs = assertSearch ( p ) ; \n\tassertEquals ( $F148552 ( p , docs ) , NUM00 , docs . getNumFound ( ) ) ; \n\tassertEquals ( $F148552 ( p , docs ) , NUM00 , docs . size ( ) ) ; \n\t$F38159 ( docs ) } \n"}, {"code": "private static ValueSource buildSourceTree ( IndexSchema schema , String expression , int sourceType ) { \n\tint expressionType = getSourceType ( expression ) ; \n\tif ( sourceType != FIELD_TYPE && expressionType != FIELD_TYPE && expressionType != FILTER_TYPE && expressionType != sourceType ) $F1337 switch ( expressionType ) { \n\t\tcase NUMBER_TYPE : return buildNumericSource ( schema , expression ) ; \n\t\tcase DATE_TYPE : return buildDateSource ( schema , expression ) ; \n\t\tcase NUM00 <missing ';'> _TYPE : return buildStringSource ( schema , expression ) ; \n\t\tcase FIELD_TYPE : return buildFieldSource ( schema , expression , sourceType ) ; \n\t\tcase FILTER_TYPE : return buildFilterSource ( schema , expression . substring ( $F12707 ( expression ) , expression . lastIndexOf ( NUM00 ) ) , sourceType ) ; \n\t\tdefault : throw new SolrException ( ErrorCode . BAD_REQUEST , expression + NUM00 ) ; \n\t\t} \n\t"}, {"code": "public Value predecessor $F72 $F1522 ( predecessor ) "}, {"code": "public static double logPdf $F7635 ( x , m , sd ) { \n\tdouble a = NUM00 / ( $F172440 ( Math ) * sd ) ; \n\tdouble b = - ( x - m ) * ( x - m ) / ( NUM00 * sd * sd ) ; \n\treturn Math . log ( a ) + b ; \n\t} \n"}, {"code": "public int valueSparseInt ( int indexOfIndex ) throws Exception { \n\treturn Integer . parseInt ( actualValue ( indexOfIndex ) ) ; \n\t} \n"}, {"code": "public void testToEngineeringStringZeroPosExponent $F72 $F12820 ( a , aNumber , result , assertEquals ) "}, {"code": "public static int scan ( long v ) { \n\treturn NUM00 - Long . numberOfLeadingZeros ( v ) ; \n\t} \n"}, {"code": "public static boolean isAllUpperCase ( String str ) { \n\t$F397 ( str , _BOOL ) boolean hasLetters = _BOOL ; \n\tchar c ; \n\tfor ( $F186068 ( i , str ) ) { \n\t\tc = str . charAt ( i ) ; \n\t\tif ( Character . isLetter ( c ) ) { \n\t\t\tif ( ! Character . isUpperCase ( c ) ) return _BOOL ; \n\t\t\thasLetters = _BOOL ; \n\t\t\t} \n\t\t} \n\treturn hasLetters ; \n\t} \n"}, {"code": "public static ClassPath createClassPath $F1947 ( classPathString , sysClassPathString , extDirsString ) { \n\t$F6212 ( path ) if ( sysClassPathString == null ) $F185872 ( sysClassPathString , System ) if ( sysClassPathString != null ) { \n\t\tpath . addFiles ( sysClassPathString ) ; \n\t\t} \n\tpath . expandJarClassPaths ( _BOOL ) ; \n\tif ( extDirsString == null ) $F185872 ( extDirsString , System ) if ( extDirsString != null ) { \n\t\tpath . addDirectories ( extDirsString ) ; \n\t\t} \n\tpath . emptyPathDefault ( NUM00 ) ; \n\tif ( classPathString == null ) { \n\t\t$F109927 ( classPathString , System ) $F23170 ( classPathString ) } \n\tpath . addFiles ( classPathString ) ; \n\treturn new ClassPath ( $F10148 ( path ) ) ; \n\t} \n"}, {"code": "protected AbstractSpinedBuffer ( int initialCapacity ) { \n\t$F81428 ( initialCapacity ) this . initialChunkPower = Math . max ( MIN_CHUNK_POWER , Integer . SIZE - Integer . numberOfLeadingZeros ( initialCapacity - NUM00 ) ) ; \n\t} \n"}, {"code": "public static void UF9 $F93381 ( x , f , nx ) { \n\tint count1 = NUM00 ; \n\tint count2 = NUM00 ; \n\tint count3 = NUM00 ; \n\tdouble sum1 = NUM00 ; \n\tdouble sum2 = NUM00 ; \n\tdouble sum3 = NUM00 ; \n\tdouble yj ; \n\tdouble E = NUM00 ; \n\t$F68593 ( j , nx , yj , x , Math , PI , sum1 , count1 , sum2 , count2 , sum3 , count3 ) yj = ( NUM00 + E ) * ( NUM00 - NUM00 * ( NUM00 * x [ NUM00 ] - NUM00 ) * ( NUM00 * x [ NUM00 ] - NUM00 ) ) ; \n\t$F17370 ( yj ) f [ NUM00 ] = NUM00 * ( yj + NUM00 * x [ NUM00 ] ) * x [ NUM00 ] + NUM00 * sum1 / ( double ) count1 ; \n\tf [ NUM00 ] = NUM00 * ( yj - NUM00 * x [ NUM00 ] + NUM00 ) * x [ NUM00 ] + NUM00 * sum2 / ( double ) count2 ; \n\tf [ NUM00 ] = NUM00 - x [ NUM00 ] + NUM00 * sum3 / ( double ) count3 ; \n\t} \n"}, {"code": "private void cleaningText $F72 { \n\tint latinCount = NUM00 , nonLatinCount = NUM00 ; \n\tfor ( $F38840 ( i , text ) ) { \n\t\t$F1280 ( c , text , i ) if ( c <= NUM00 && c >= NUM00 ) { \n\t\t\t++ latinCount ; \n\t\t\t} \n\t\telse if ( c >= NUM00 && UnicodeBlock . of ( c ) != UnicodeBlock . LATIN_EXTENDED_ADDITIONAL ) { \n\t\t\t++ nonLatinCount ; \n\t\t\t} \n\t\t} \n\tif ( latinCount * NUM00 < nonLatinCount ) { \n\t\t$F280 ( textWithoutLatin ) for ( $F38840 ( i , text ) ) { \n\t\t\t$F1280 ( c , text , i ) if ( c > NUM00 || c < NUM00 ) textWithoutLatin . append ( c ) ; \n\t\t\t} \n\t\ttext = textWithoutLatin ; \n\t\t} \n\t} \n"}, {"code": "public void beginApplyInterval $F72 { \n\t$F3224 ( intervalStartMillis , System ) endMillis = intervalStartMillis ; \n\tstate = TaskState . apply ; \n\t} \n"}, {"code": "void handshake $F72 throws $F5690 { \n\t$F50717 ( log , handshakeStatus , ses ) lock ( ) ; \n\ttry { \n\t\tboolean loop = _BOOL ; \n\t\twhile ( loop ) { \n\t\t\tswitch ( handshakeStatus ) { \n\t\t\t\tcase NOT_HANDSHAKING : case FINISHED : { \n\t\t\t\t\t$F233242 ( sslSes , sslEngine ) if $F585 ( log ) log . debug ( NUM00 + sslSes . getProtocol ( ) + NUM00 + sslSes . getCipherSuite ( ) + NUM00 + ses + NUM00 ) ; \n\t\t\t\t\thandshakeFinished = _BOOL ; \n\t\t\t\t\tif ( ! initHandshakeComplete ) { \n\t\t\t\t\t\tinitHandshakeComplete = _BOOL ; \n\t\t\t\t\t\tGridNioFutureImpl $F1011 fut = ses . removeMeta ( HANDSHAKE_FUT_META_KEY ) ; \n\t\t\t\t\t\tif ( fut != null ) fut . onDone ( ) ; \n\t\t\t\t\t\tparent . proceedSessionOpened ( ses ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\tloop = _BOOL ; \n\t\t\t\t\t$F597 } \n\t\t\t\tcase NEED_TASK : { \n\t\t\t\t\t$F51620 ( log , ses ) handshakeStatus = runTasks ( ) ; \n\t\t\t\t\t$F597 } \n\t\t\t\tcase NEED_UNWRAP : { \n\t\t\t\t\t$F51620 ( log , ses ) Status status = unwrapHandshake ( ) ; \n\t\t\t\t\tif ( status == BUFFER_UNDERFLOW && handshakeStatus != FINISHED || sslEngine . isInboundDone ( ) ) loop = _BOOL ; \n\t\t\t\t\t$F597 } \n\t\t\t\tcase NEED_WRAP : { \n\t\t\t\t\tif $F5720 ( outNetBuf ) U . warn ( log , NUM00 + ses ) ; \n\t\t\t\t\t$F725 ( outNetBuf ) SSLEngineResult res = sslEngine . wrap ( handshakeBuf , outNetBuf ) ; \n\t\t\t\t\t$F14257 ( outNetBuf ) $F346875 ( handshakeStatus , res ) if $F585 ( log ) log . debug ( $F203080 ( res ) + handshakeStatus + NUM00 + ses + NUM00 ) ; \n\t\t\t\t\twriteNetBuffer ( ) ; \n\t\t\t\t\t$F597 } \n\t\t\t\t$F1267 { \n\t\t\t\t\tthrow new IllegalStateException $F6486 ( handshakeStatus , ses ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F49978 ( unlock ) $F50717 ( log , handshakeStatus , ses ) } \n"}, {"code": "public void sendMessages ( List < ProducerRecord $F2538 > records ) { \n\tProducer $F2538 producer = new KafkaProducer $F200 ( getProducerConfig ( ) ) ; \n\tfor ( ProducerRecord $F2538 rec : records ) producer . send ( rec ) ; \n\t$F1206 ( producer ) $F59 ( producer ) } \n"}, {"code": "private static JFreeChart createChart $F72 { \n\t$F38363 ( series1 ) $F38365 ( series1 ) $F38365 ( series1 ) $F38365 ( series1 ) XYDataset dataset = new XYSeriesCollection ( series1 ) ; \n\treturn ChartFactory . createXYStepChart ( NUM00 , NUM00 , NUM00 , dataset , PlotOrientation . VERTICAL , _BOOL , _BOOL , _BOOL ) ; \n\t} \n"}, {"code": "public void appendToNalUnit $F24576 ( data , offset , limit ) { \n\t$F24126 ( isFilling ) int readLength = limit - offset ; \n\tif ( nalData . length < nalLength + readLength ) { \n\t\tnalData = Arrays . copyOf ( nalData , ( nalLength + readLength ) * NUM00 ) ; \n\t\t} \n\tSystem . arraycopy ( data , offset , nalData , nalLength , readLength ) ; \n\tnalLength += readLength ; \n\t} \n"}, {"code": "public boolean isNumberGeographical ( PhoneNumber phoneNumber ) { \n\treturn isNumberGeographical ( getNumberType ( phoneNumber ) , phoneNumber . getCountryCode ( ) ) ; \n\t} \n"}, {"code": "$F120210 ( maximumPullScroll , getMaximumPullScroll , pLeft , getPaddingLeft , pTop , getPaddingTop , pRight , getPaddingRight , pBottom , getPaddingBottom , getPullToRefreshScrollDirection , HORIZONTAL , mMode , mHeaderLayout , mFooterLayout , VERTICAL , DEBUG , Log , LOG_TAG , String , setPadding ) "}, {"code": "protected int weightedDistribution $F23416 ( weights ) { \n\tint sum = NUM00 ; \n\tfor ( int weight : weights ) { \n\t\tsum += weight ; \n\t\t} \n\tint val = ( int ) Math . floor ( m_random . nextDouble ( ) * sum ) ; \n\tfor ( $F1139 ( i , weights ) ) { \n\t\tval -= weights [ i ] ; \n\t\t$F7879 ( val , i ) } \n\t$F150 } \n"}, {"code": "protected String cleanUp ( String classname ) { \n\tString result ; \n\tresult = classname ; \n\tif $F51171 ( result ) $F14301 ( result ) if $F51171 ( result ) $F14301 ( result ) $F8996 ( result ) return result ; \n\t} \n"}, {"code": "public static boolean isAssignable ( Class targetType , Class valueType ) { \n\t$F18062 ( Assert , targetType ) $F18062 ( Assert , valueType ) return ( targetType . isAssignableFrom ( valueType ) || $F115302 ( targetType , primitiveWrapperTypeMap , valueType ) ) ; \n\t} \n"}, {"code": "public DialogCheckBox addDialogCheckBox $F22381 ( description , labelText , initialState ) { \n\t$F808 ( args ) args [ NUM00 ] = NUM00 ; \n\targs [ NUM00 ] = description ; \n\targs [ NUM00 ] = labelText ; \n\targs [ NUM00 ] = Boolean . toString ( initialState ) ; \n\tDialogCheckBox dcb = new DialogCheckBox $F72 ; \n\tdcb . setArgs ( args ) ; \n\tcomponents . add ( dcb ) ; \n\tmainPanel . add ( dcb ) ; \n\treturn dcb ; \n\t} \n"}, {"code": "private void performRestore ( File memberDir , File backupDir ) throws Exception { \n\t$F11300 ifFiles = FileUtil . findAll ( memberDir , NUM00 ) ; \n\tfor ( File file : ifFiles ) $F19636 ( file ) $F11300 oplogs = FileUtil . findAll ( memberDir , OPLOG_REGEX ) ; \n\tfor ( File file : oplogs ) $F19636 ( file ) $F109797 ( restoreScript , backupDir ) if $F1906 ( restoreScript ) $F417464 ( restoreScript , backupDir ) assertTrue ( restoreScript . exists ( ) ) ; \n\tassertEquals ( NUM00 , $F40519 ( execute , restoreScript ) ) ; \n\t} \n"}, {"code": "public static boolean downloadUrlToStream ( String urlString , OutputStream outputStream ) { \n\tdisableConnectionReuseIfNecessary ( ) ; \n\tHttpURLConnection urlConnection = null ; \n\tBufferedOutputStream out = null ; \n\tBufferedInputStream in = null ; \n\ttry { \n\t\t$F23801 ( url , urlString ) $F23802 ( urlConnection , url ) $F23808 ( in , urlConnection , IO_BUFFER_SIZE ) ; \n\t\tout = new BufferedOutputStream ( outputStream , IO_BUFFER_SIZE ) ; \n\t\tint b ; \n\t\t$F254305 ( b , in , out ) return _BOOL ; \n\t\t} \n\t$F23817 ( Log , TAG , e ) finally { \n\t\t$F14106 ( urlConnection ) try $F23818 ( out , in ) $F158789 } \n\treturn _BOOL ; \n\t} \n"}, {"code": "public boolean isPaymentsAdequate $F72 { \n\treturn isPaymentsAdequate ( this . cart ) ; \n\t} \n"}, {"code": "$F1 public void transactionCommited ( final long commitTime ) { \n\tif $F2979 ( listeners ) $F8030 ( records ) else { \n\t\t$F1206 ( records ) $F22620 ( listeners ) } \n\t} \n"}, {"code": "public static MWarehousePrice [ ] find ( MBPartner bPartner , boolean IsSOTrx , Timestamp valid , int M_Warehouse_ID , String Value , String Name , String UPC , String SKU , String trxName ) { \n\tint M_PriceList_ID = IsSOTrx ? bPartner . getM_PriceList_ID ( ) : bPartner . getPO_PriceList_ID ( ) ; \n\tMPriceList pl = null ; \n\tif ( M_PriceList_ID == NUM00 ) pl = MPriceList . getDefault ( bPartner . getCtx ( ) , IsSOTrx ) ; \n\telse pl = MPriceList . get ( bPartner . getCtx ( ) , M_PriceList_ID , trxName ) ; \n\tif ( pl == null ) { \n\t\ts_log . severe ( NUM00 ) ; \n\t\t$F1274 } \n\tMPriceListVersion plv = pl . getPriceListVersion ( valid ) ; \n\tif ( plv == null ) { \n\t\ts_log . severe ( NUM00 + pl . getM_PriceList_ID ( ) ) ; \n\t\t$F1274 } \n\treturn find ( bPartner . getCtx ( ) , plv . getM_PriceList_Version_ID ( ) , M_Warehouse_ID , Value , Name , UPC , SKU , trxName ) ; \n\t} \n"}, {"code": "private void readObject ( ObjectInputStream in ) throws $F6427 { \n\t$F72840 ( COUNTER ) ; \n\tserializers = new HashMap < Class , SerializerWrapper > $F72 ; \n\tserializersArray = new Serializer $F380 ; \n\tdeserialize ( in , this ) ; \n\t} \n"}, {"code": "public static Date translateTime ( Date date , TimeZone src , TimeZone dest ) { \n\t$F6357 ( newDate ) int offset = ( dest . getOffset ( date . getTime ( ) ) - src . getOffset ( date . getTime ( ) ) ) ; \n\tnewDate . setTime ( date . getTime ( ) - offset ) ; \n\treturn newDate ; \n\t} \n"}, {"code": "private void showPopupMenu ( final MouseEvent event ) { \n\tfinal CTracesTableFilterMenu menu = new CTracesTableFilterMenu ( getFilterField ( ) ) ; \n\t$F121507 ( menu , event ) } \n"}, {"code": "private TaskResourceRep finishDeactivateTask ( BlockConsistencyGroup consistencyGroup , String task ) { \n\t$F58492 ( id , consistencyGroup ) Operation op = new Operation $F72 ; \n\top . ready ( ) ; \n\top . setProgress ( NUM00 ) ; \n\top . setResourceType ( ResourceOperationTypeEnum . DELETE_CONSISTENCY_GROUP ) ; \n\tOperation status = _dbClient . createTaskOpStatus ( BlockConsistencyGroup . class , id , task , op ) ; \n\treturn toTask ( consistencyGroup , task , status ) ; \n\t} \n"}, {"code": "public static Severity parseSeverity ( String str ) throws IllegalSeverityException { \n\tif ( str . equalsIgnoreCase ( Messages . ERROR ) ) { \n\t\treturn ERROR ; \n\t\t} \n\telse if ( str . equalsIgnoreCase ( Messages . WARNING ) ) { \n\t\treturn WARNING ; \n\t\t} \n\telse { \n\t\tthrow new IllegalSeverityException $F72 ; \n\t\t} \n\t} \n"}, {"code": "private void restoreFromKeypress ( final KeyEvent keyEvent , final int keyNumber ) { \n\tif ( keyEvent . isAltDown ( ) ) { \n\t\tfinal int arrayIndex = ( keyNumber > NUM00 ? keyNumber : MAX_RECENT_MESSAGES ) - NUM00 ; \n\t\tif $F1765 ( arrayIndex , recentMessages ) $F80218 ( displayMessage , recentMessages , arrayIndex ) $F60335 ( keyEvent ) } \n\t} \n"}, {"code": "$F115149 ( listener , scrollingListeners ) "}, {"code": "public void fire ( Session session , int type , boolean beforeAction ) { \n\tif ( rowBased || before != beforeAction || ( typeMask & type ) == NUM00 ) $F932 load ( ) ; \n\tConnection c2 = session . createConnection ( _BOOL ) ; \n\tboolean old = _BOOL ; \n\tif ( type != Trigger . SELECT ) { \n\t\told = session . setCommitOrRollbackDisabled ( _BOOL ) ; \n\t\t} \n\tValue identity = session . getLastScopeIdentity ( ) ; \n\ttry { \n\t\ttriggerCallback . fire ( c2 , null , null ) ; \n\t\t} \n\tcatch ( Throwable e ) { \n\t\tthrow DbException . get ( ErrorCode . ERROR_EXECUTING_TRIGGER_3 , e , getName ( ) , triggerClassName != null ? triggerClassName : NUM00 , e . toString ( ) ) ; \n\t\t} \n\tfinally { \n\t\tif ( session . getLastTriggerIdentity ( ) != null ) { \n\t\t\tsession . setLastScopeIdentity ( session . getLastTriggerIdentity ( ) ) ; \n\t\t\tsession . setLastTriggerIdentity ( null ) ; \n\t\t\t} \n\t\telse { \n\t\t\tsession . setLastScopeIdentity ( identity ) ; \n\t\t\t} \n\t\tif ( type != Trigger . SELECT ) { \n\t\t\tsession . setCommitOrRollbackDisabled ( old ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F141880 ( closeable , rethrown ) "}, {"code": "public MqttDevice mqttDevice $F72 { \n\treturn mqttDevice ; \n\t} \n"}, {"code": "public boolean skipsLocation ( String locationId ) $F298 ( _skipLocationsList , locationId ) "}, {"code": "private List < Race > parseRaces ( String json ) { \n\tList < Race > $F204 ( result ) ; \n\t$F1338 ( json ) $F16165 ( parser ) try { \n\t\tJSONObject root = ( JSONObject ) parser . parse ( json . trim ( ) ) ; \n\t\t$F49149 ( races , root ) for ( Object o : races ) { \n\t\t\tif ( o instanceof JSONObject ) { \n\t\t\t\tRace race = parseRace ( ( JSONObject ) o ) ; \n\t\t\t\t$F1140 ( race , result ) } \n\t\t\t} \n\t\t} \n\tcatch ( ParseException | ClassCastException | NullPointerException ex ) { \n\t\t$F37855 ( LOGGER , ex ) $F1274 } \n\treturn result ; \n\t} \n"}, {"code": "public boolean isConnected ( short nodeId ) { \n\tNodeConnection nc = connections . get ( nodeId ) ; \n\treturn ( nc != null && nc . state == NodeConnectionState . CONNECTED ) ; \n\t} \n"}, {"code": "public ObjectName manageSystemMember ( DistributedMember distributedMember ) throws AdminException , MalformedObjectNameException { \n\ttry { \n\t\tSystemMember member = lookupSystemMember ( distributedMember ) ; \n\t\t$F1275 ( member ) SystemMemberJmxImpl jmx = ( SystemMemberJmxImpl ) member ; \n\t\tObjectName oname = new ObjectName ( jmx . getMBeanName ( ) ) ; \n\t\treturn oname ; \n\t\t} \n\tcatch ( AdminException e ) { \n\t\tlogger . warn ( $F1573 ( e ) ) ; \n\t\tthrow e ; \n\t\t} \n\tcatch ( RuntimeException e ) { \n\t\tlogger . warn ( $F1573 ( e ) ) ; \n\t\tthrow e ; \n\t\t} \n\t$F79506 ( SystemFailure , err ) catch ( Error e ) { \n\t\t$F79507 ( SystemFailure ) $F1575 ( logger , e ) throw e ; \n\t\t} \n\t} \n"}, {"code": "private void connect $F72 throws IOException { \n\tJMXServiceURL jmxUrl = new JMXServiceURL ( String . format ( fmtUrl , host , port ) ) ; \n\tjmxc = JMXConnectorFactory . connect ( jmxUrl , null ) ; \n\tMBeanServerConnection mbeanServerConn = jmxc . getMBeanServerConnection ( ) ; \n\ttry { \n\t\tObjectName name = new ObjectName ( DOMAINLIST_OBJECT_NAME ) ; \n\t\tdomainListProxy = MBeanServerInvocationHandler . newProxyInstance ( mbeanServerConn , name , DomainListManagementMBean . class , _BOOL ) ; \n\t\tname = new ObjectName ( VIRTUALUSERTABLE_OBJECT_NAME ) ; \n\t\tvirtualUserTableProxy = MBeanServerInvocationHandler . newProxyInstance ( mbeanServerConn , name , RecipientRewriteTableManagementMBean . class , _BOOL ) ; \n\t\tname = new ObjectName ( USERSREPOSITORY_OBJECT_NAME ) ; \n\t\tusersRepositoryProxy = MBeanServerInvocationHandler . newProxyInstance ( mbeanServerConn , name , UsersRepositoryManagementMBean . class , _BOOL ) ; \n\t\tname = new ObjectName ( MAILBOXCOPIER_OBJECT_NAME ) ; \n\t\tmailboxCopierManagement = MBeanServerInvocationHandler . newProxyInstance ( mbeanServerConn , name , MailboxCopierManagementMBean . class , _BOOL ) ; \n\t\tname = new ObjectName ( MAILBOXMANAGER_OBJECT_NAME ) ; \n\t\tmailboxManagerManagement = MBeanServerInvocationHandler . newProxyInstance ( mbeanServerConn , name , MailboxManagerManagementMBean . class , _BOOL ) ; \n\t\tname = new ObjectName ( QUOTAMANAGER_OBJECT_NAME ) ; \n\t\tquotaManagement = MBeanServerInvocationHandler . newProxyInstance ( mbeanServerConn , name , QuotaManagementMBean . class , _BOOL ) ; \n\t\tname = new ObjectName ( REINDEXER_OBJECT_NAME ) ; \n\t\treIndexerManagement = MBeanServerInvocationHandler . newProxyInstance ( mbeanServerConn , name , ReIndexerManagementMBean . class , _BOOL ) ; \n\t\tname = new ObjectName ( SIEVEMANAGER_OBJECT_NAME ) ; \n\t\tsieveRepositoryManagement = MBeanServerInvocationHandler . newProxyInstance ( mbeanServerConn , name , SieveRepositoryManagementMBean . class , _BOOL ) ; \n\t\t} \n\tcatch ( MalformedObjectNameException e ) $F7077 ( e ) } \n"}, {"code": "public static void show ( $F1113 final JComponent dataComponent , $F5466 final JComponent actionListenerComponent , $F1113 final String title , $F1113 final Project project , $F5466 final Collection $F24548 closeListeners , $F1113 final AnAction ... customActions ) { \n\tfinal ToolWindowApi api = new ToolWindowApi ( project , title ) ; \n\tfinal Collection $F24548 closeListenersToAdd = new ArrayList $F24548 ( Collections . singleton ( new MyToolWindowCloser ( api ) ) ) ; \n\t$F36447 ( closeListeners , closeListenersToAdd ) api . add ( PanelWithActions . wrap ( dataComponent , closeListenersToAdd , actionListenerComponent , customActions ) ) ; \n\t} \n"}, {"code": "public IntentBuilder addEmailCc ( String address ) { \n\t$F30647 ( mCcAddresses ) mCcAddresses . add ( address ) ; \n\treturn this ; \n\t} \n"}, {"code": "private $F5 extractNGrams $F72 { \n\t$F8728 ( list ) NGram ngram = new NGram $F72 ; \n\tfor ( $F38840 ( i , text ) ) { \n\t\tngram . addChar ( text . charAt ( i ) ) ; \n\t\tfor ( int n = NUM00 ; \n\t\tn <= NGram . N_GRAM ; \n\t\t++ n ) { \n\t\t\t$F1729 ( w , ngram , n ) if ( w != null && wordLangProbMap . containsKey ( w ) ) list . add ( w ) ; \n\t\t\t} \n\t\t} \n\treturn list ; \n\t} \n"}, {"code": "protected void updateKeys $F72 { \n\tButtonInfo [ ] buttons = NavigationButtons . loadButtonMap ( mContext ) ; \n\tint visibleCount = NUM00 ; \n\tfor ( $F1139 ( i , buttons ) ) { \n\t\tint id = BUTTON_IDS [ i ] ; \n\t\tButtonInfo info = buttons [ mVertical ? buttons . length - i - NUM00 : i ] ; \n\t\tKeyButtonView button = ( KeyButtonView ) mParent . findViewById ( id ) ; \n\t\tboolean isSmallButton = NavigationButtons . IS_SLOT_SMALL [ i ] ; \n\t\tbutton . setInfo ( info , mVertical , isSmallButton ) ; \n\t\tif ( ! info . equals ( NavigationButtons . EMPTY ) && ! isSmallButton ) { \n\t\t\tvisibleCount ++ ; \n\t\t\t} \n\t\tbutton . setTranslationX ( NUM00 ) ; \n\t\tmButtonViews . set ( i , button ) ; \n\t\t} \n\tif ( isDevicePhone ( mContext ) ) { \n\t\tadjustPadding ( visibleCount ) ; \n\t\t} \n\tupdateLowLights ( visibleCount ) ; \n\t} \n"}, {"code": "public static final String readString $F27539 ( bytes , charset ) throws IOException { \n\treturn readString ( bytes , NUM00 , bytes . length , Charset . forName ( charset ) ) ; \n\t} \n"}, {"code": "private void updateCommandCache $F22381 ( group , command , needNotify ) { \n\t$F1729 ( oldCommand , commandCache , group ) if $F2137 ( command , oldCommand ) { \n\t\tcommandCache . put ( group , command ) ; \n\t\tif ( needNotify ) { \n\t\t\tnotifyExecutor . execute ( new NotifyCommand ( group , command ) ) ; \n\t\t\t$F124174 ( LoggerUtil , String , group , command ) } \n\t\t} \n\telse { \n\t\t$F124174 ( LoggerUtil , String , group , command ) } \n\t} \n"}, {"code": "public void updateLanguage $F72 { \n\tcreateLegendPanel ( legendPanel ) ; \n\tdirectoryTreeModel . changeRootText ( I18n . tr ( NUM00 ) ) ; \n\t} \n"}, {"code": "$F3441 ( journalWriter , writer , journalFileTmp , Util , MAGIC , VERSION_1 , Integer , appVersion , valueCount , entry , lruEntries , DIRTY , CLEAN , journalFile , renameTo , journalFileBackup , _BOOL ) "}, {"code": "public static $F96 decompressForZlib $F97 ( bytesToDecompress ) { \n\t$F5475 ( returnValues ) Inflater inflater = new Inflater $F72 ; \n\tint numberOfBytesToDecompress = bytesToDecompress . length ; \n\t$F81138 ( inflater , bytesToDecompress , numberOfBytesToDecompress ) int bufferSizeInBytes = numberOfBytesToDecompress ; \n\tint numberOfBytesDecompressedSoFar = NUM00 ; \n\t$F29252 bytesDecompressedSoFar = $F113696 ; \n\ttry { \n\t\twhile ( inflater . needsInput ( ) == _BOOL ) { \n\t\t\t$F2175 ( bytesDecompressedBuffer , bufferSizeInBytes ) int numberOfBytesDecompressedThisTime = inflater . inflate ( bytesDecompressedBuffer ) ; \n\t\t\tnumberOfBytesDecompressedSoFar += numberOfBytesDecompressedThisTime ; \n\t\t\t$F117265 ( b , numberOfBytesDecompressedThisTime , bytesDecompressedSoFar , bytesDecompressedBuffer ) } \n\t\t$F71700 ( returnValues , bytesDecompressedSoFar ) ; \n\t\tfor ( $F1139 ( b , returnValues ) ) { \n\t\t\treturnValues [ b ] = ( byte ) $F73204 ( bytesDecompressedSoFar , b ) ; \n\t\t\t} \n\t\t} \n\tcatch ( DataFormatException dfe ) $F302 ( dfe ) $F87417 ( inflater ) return returnValues ; \n\t} \n"}, {"code": "protected boolean acceptChunk ( final IChunkMessage < IBindingSet > msg ) { \n\t$F10057 ( msg ) if ( ! msg . isMaterialized ( ) ) $F8675 final AbstractRunningQuery q = getRunningQuery ( msg . getQueryId ( ) ) ; \n\tif ( q == null ) $F10763 if ( ! q . acceptChunk ( msg ) ) { \n\t\t$F33833 ( msg ) return _BOOL ; \n\t\t} \n\tif $F931 ( isRunning ) { \n\t\t$F33833 ( msg ) return _BOOL ; \n\t\t} \n\tpriorityQueue . add ( q ) ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "public String format ( Object obj , StringBuffer toAppendTo ) throws IllegalArgumentException { \n\treturn format ( ( Date ) obj , toAppendTo ) ; \n\t} \n"}, {"code": "void addMember ( final TypeMember member ) { \n\t$F1832 ( Preconditions , member ) Preconditions . checkArgument ( member . getParentType ( ) == this , NUM00 ) ; \n\tmembers . add ( member ) ; \n\t} \n"}, {"code": "public synchronized void removeIncrementalClassifierListener ( IncrementalClassifierListener cl ) $F106 ( m_incrementalClassifierListeners , cl ) "}, {"code": "$F87136 ( data , imageView , bitmapWorkerTask , getBitmapWorkerTask , bitmapData , _BOOL , BuildConfig , Log , TAG ) "}, {"code": "public static Number asinh ( Number a ) { \n\treturn FastMath . asinh ( a . doubleValue ( ) ) ; \n\t} \n"}, {"code": "private String formatNames $F10142 ( names , startIndex ) { \n\t$F83 ( sb ) if ( names != null ) { \n\t\tfor ( String name : names ) { \n\t\t\t$F13047 ( sb , name , startIndex ) $F84 ( sb ) } \n\t\t} \n\t$F92 ( sb ) } \n"}, {"code": "public String lookupPrefix ( String uri ) { \n\tString foundPrefix = null ; \n\t$F10529 ( prefixes , m_namespaces ) while $F1444 ( prefixes ) { \n\t\t$F14952 ( prefix , prefixes ) String uri2 = lookupNamespace ( prefix ) ; \n\t\tif $F1256 ( uri2 , uri ) $F3468 ( foundPrefix , prefix ) } \n\treturn foundPrefix ; \n\t} \n"}, {"code": "public void removeAllTrailers $F72 { \n\t$F725 ( trailer ) firePropertyChange ( TRAILER , null , trailer ) ; \n\t} \n"}, {"code": "public Builder clear $F72 $F68437 ( localeBuilder , this ) "}, {"code": "private static boolean versionMatches ( Integer v1 , Integer v2 ) { \n\tif ( v1 == null || v1 == NUM00 || v2 == null || v2 == NUM00 ) { \n\t\treturn _BOOL ; \n\t\t} \n\t$F1964 ( v1 , v2 ) } \n"}, {"code": "public static $F65632 packageName ( String longName ) { \n\tif $F105 ( longName , DOT ) { \n\t\treturn Optional . of ( longName . substring ( NUM00 , longName . lastIndexOf ( DOT ) ) ) ; \n\t\t} \n\telse $F21170 ( Optional ) } \n"}, {"code": "public $F26352 e2f $F72 { \n\tint eDim = tgtEndExclusive - tgtStartInclusive ; \n\t$F26352 e2f = new int [ eDim ] [ ] ; \n\tfor ( int i = tgtStartInclusive ; \n\ti < tgtEndExclusive ; \n\t++ i ) { \n\t\tint localIdx = i - tgtStartInclusive ; \n\t\t$F2027 e2fI = sentencePair . e2f ( i ) ; \n\t\tint srcAlignDim = e2fI . length ; \n\t\t$F134093 ( e2f , localIdx , srcAlignDim ) if ( srcAlignDim > NUM00 ) { \n\t\t\tSystem . arraycopy ( e2fI , NUM00 , e2f [ localIdx ] , NUM00 , srcAlignDim ) ; \n\t\t\tfor ( $F1316 ( j , srcAlignDim ) ) { \n\t\t\t\te2f [ localIdx ] [ j ] -= srcStartInclusive ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn e2f ; \n\t} \n"}, {"code": "public void readExif ( String inFileName ) throws $F27136 { \n\t$F27609 ( inFileName , NULL_ARGUMENT_ ) InputStream is = null ; \n\ttry { \n\t\tis = ( InputStream ) $F20276 ( inFileName ) ; \n\t\treadExif ( is ) ; \n\t\t} \n\t$F27615 ( closeSilently , is , e ) $F59 ( is ) } \n"}, {"code": "private void assertWriteResult ( int size ) throws IOException { \n\tByteBuffer buf = ByteBuffer . allocate ( size + NUM00 ) ; \n\tint count = NUM00 ; \n\tint total = NUM00 ; \n\t$F657 ( beginTime , System ) while $F18067 ( count , clientChannel , buf ) { \n\t\ttotal = total + count ; \n\t\tif ( System . currentTimeMillis ( ) - beginTime > NUM00 ) $F5153 } \n\tassertEquals ( total , size ) ; \n\t$F14257 ( buf ) for ( $F119 ( i , count ) ) { \n\t\tassertEquals ( ( byte ) i , buf . get ( i ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static boolean isFileUploadAvailable ( final boolean needsCorrectMimeType ) { \n\tif ( Build . VERSION . SDK_INT == NUM00 ) { \n\t\tfinal String platformVersion = ( Build . VERSION . RELEASE == null ) ? NUM00 : Build . VERSION . RELEASE ; \n\t\treturn ! needsCorrectMimeType && $F418 ( platformVersion ) ; \n\t\t} \n\telse { \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "$F1 public String toString $F72 { \n\tif ( m_bGenerateNet ) $F2905 ( toXMLBIF03 ) $F92 ( m_Instances ) } \n"}, {"code": "private boolean menuItemAction $F14337 ( screenX , screenY , action ) { \n\tListView listView = mAppMenu . getPopup ( ) . getListView ( ) ; \n\t$F30929 $F266741 ( itemViews ) ; \n\tfor ( int i = NUM00 ; \n\ti < listView . getChildCount ( ) ; \n\t++ i ) { \n\t\tboolean hasImageButtons = _BOOL ; \n\t\tif ( listView . getChildAt ( i ) instanceof LinearLayout ) { \n\t\t\tLinearLayout layout = ( LinearLayout ) listView . getChildAt ( i ) ; \n\t\t\tfor ( int j = NUM00 ; \n\t\t\tj < layout . getChildCount ( ) ; \n\t\t\t++ j ) { \n\t\t\t\titemViews . add ( layout . getChildAt ( j ) ) ; \n\t\t\t\tif ( layout . getChildAt ( j ) instanceof ImageButton ) hasImageButtons = _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( ! hasImageButtons ) itemViews . add ( listView . getChildAt ( i ) ) ; \n\t\t} \n\tboolean didPerformClick = _BOOL ; \n\tfor ( $F3836 ( i , itemViews ) ) { \n\t\tView itemView = itemViews . get ( i ) ; \n\t\tboolean shouldPerform = itemView . isEnabled ( ) && itemView . isShown ( ) && getScreenVisibleRect ( itemView ) . contains ( screenX , screenY ) ; \n\t\tswitch ( action ) { \n\t\t\tcase ITEM_ACTION_HIGHLIGHT : itemView . setPressed ( shouldPerform ) ; \n\t\t\t$F597 case ITEM_ACTION_PERFORM : if ( shouldPerform ) { \n\t\t\t\titemView . performClick ( ) ; \n\t\t\t\tdidPerformClick = _BOOL ; \n\t\t\t\t} \n\t\t\t$F597 case ITEM_ACTION_CLEAR_HIGHLIGHT_ALL : itemView . setPressed ( _BOOL ) ; \n\t\t\t$F597 $F1267 assert _BOOL ; \n\t\t\t$F597 } \n\t\t} \n\treturn didPerformClick ; \n\t} \n"}, {"code": "public void toggle ( JFXDrawer drawer ) { \n\tif $F2200 ( drawers , drawer ) addDrawer ( drawer ) ; \n\tif ( drawer . isShown ( ) || drawer . isShowing ( ) ) $F59 ( drawer ) else { \n\t\tupdateDrawerPosition ( drawer ) ; \n\t\t$F5837 ( drawer ) } \n\t} \n"}, {"code": "public static boolean isVMwareVapp $F72 { \n\tif ( isVMwareVapp != null ) { \n\t\tlog . info ( NUM00 , isVMwareVapp . booleanValue ( ) ) ; \n\t\t$F44652 ( isVMwareVapp ) } \n\tfinal $F806 cmd = { \n\t\tGET_OVF_PROPERTY_CMD , IS_VAPP } \n\t; \n\tExec . Result result = Exec . sudo ( CMD_TIMEOUT , cmd ) ; \n\tif ( ! result . exitedNormally ( ) ) { \n\t\tlog . error ( NUM00 , result . getStdError ( ) ) ; \n\t\t$F4638 } \n\tif ( result . getExitValue ( ) == NUM00 ) { \n\t\t$F973 ( log ) isVMwareVapp = Boolean . TRUE ; \n\t\t$F44652 ( isVMwareVapp ) } \n\tlog . info ( NUM00 , result . getExitValue ( ) ) ; \n\tisVMwareVapp = Boolean . FALSE ; \n\t$F44652 ( isVMwareVapp ) } \n"}, {"code": "protected String toBase64 $F97 ( data ) { \n\treturn Base64 . encodeToString ( data , Base64 . DEFAULT ) ; \n\t} \n"}, {"code": "$F1 public String toVerboseString $F72 { \n\t$F1121 ( sb ) print ( sb , NUM00 , Verbosity . LOG_WITH_STACKTRACE ) ; \n\t$F92 ( sb ) } \n"}, {"code": "public static long quantile ( $F2469 values , double quantile ) { \n\t$F19273 ( values ) if $F19274 ( quantile ) $F824 $F19280 ( copy , values ) $F5634 ( System , values , copy ) Arrays . sort ( copy ) ; \n\tint index = ( int ) ( copy . length * quantile ) ; \n\treturn copy [ index ] ; \n\t} \n"}, {"code": "public void addTreeUpdate ( SLDTreeUpdatedInterface sldTree ) $F207 ( treeUpdateList , sldTree ) "}, {"code": "public static double distance ( VisualItem vi1 , VisualItem vi2 ) { \n\t$F152048 ( dx , vi1 , vi2 ) $F152051 ( dy , vi1 , vi2 ) $F126355 ( Math , dx , dy ) } \n"}, {"code": "$F1 public void validateRequest ( GenericAttributeResolveRequest request ) throws BadAttributeResolveRequestException { \n\t$F51622 ( LOG ) String siteId = request . getSite ( ) ; \n\tif ( null == siteId ) throw new BadAttributeResolveRequestException ( HDFSResourceConstants . HDFS_RESOURCE_RESOLVE_FORMAT_HINT ) ; \n\tString filePath = request . getQuery ( ) ; \n\tif ( null == filePath || $F14942 ( filePath ) ) throw new BadAttributeResolveRequestException ( HDFSResourceConstants . HDFS_RESOURCE_RESOLVE_FORMAT_HINT ) ; \n\t$F51622 ( LOG ) } \n"}, {"code": "$F3594 ( oredCriteria , orderByClause , distinct , _BOOL ) "}, {"code": "public Trigger when ( Criterion criterion ) { \n\t$F1140 ( criterion , criterions ) return this ; \n\t} \n"}, {"code": "private static $F7329 offsetROR $F68514 ( offset , environment , instructions , registerNodeValue1 , registerNodeValue2 , immediateNodeValue ) { \n\t$F7336 ( address , environment ) $F7336 ( index , environment ) $F7336 ( tmpVar , environment ) $F7336 ( tmpVar1 , environment ) $F7336 ( tmpVar2 , environment ) $F7336 ( tmpVar3 , environment ) long baseOffset = offset ; \n\tinstructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dw , registerNodeValue2 , dw , NUM00 + Integer . decode ( immediateNodeValue ) , dw , tmpVar1 ) ) ; \n\tinstructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dw , registerNodeValue2 , dw , String . valueOf ( NUM00 - Integer . decode ( immediateNodeValue ) ) , dw , tmpVar2 ) ) ; \n\t$F43825 ( instructions , ReilHelpers , baseOffset , dw , tmpVar1 , tmpVar2 , tmpVar3 ) $F7341 ( instructions , ReilHelpers , baseOffset , dw , tmpVar3 , dWordBitMask , index ) $F43828 ( instructions , ReilHelpers , baseOffset , dw , registerNodeValue1 , index , tmpVar ) $F7341 ( instructions , ReilHelpers , baseOffset , dw , tmpVar , dWordBitMask , address ) $F7348 ( address , registerNodeValue1 ) } \n"}, {"code": "public void clear $F72 { \n\t$F725 ( m_ReadMethods ) $F725 ( m_WriteMethods ) try $F5795 ( addMethods ) $F1516 ( e ) } \n"}, {"code": "public static String join ( CharSequence delimiter , $F131 tokens ) { \n\t$F83 ( sb ) boolean firstTime = _BOOL ; \n\tfor ( Object token : tokens ) $F98972 ( firstTime , _BOOL , sb , delimiter , token ) $F92 ( sb ) } \n"}, {"code": "private void fillIn ( ClassSymbol c ) { \n\tif ( completionFailureName == c . fullname ) { \n\t\tthrow new CompletionFailure ( c , NUM00 ) ; \n\t\t} \n\tcurrentOwner = c ; \n\t$F725 ( warnedAttrs ) JavaFileObject classfile = c . classfile ; \n\tif ( classfile != null ) { \n\t\tJavaFileObject previousClassFile = currentClassFile ; \n\t\ttry { \n\t\t\tif ( filling ) { \n\t\t\t\tAssert . error ( NUM00 + classfile . toUri ( ) + NUM00 + previousClassFile ) ; \n\t\t\t\t} \n\t\t\tcurrentClassFile = classfile ; \n\t\t\tif ( verbose ) { \n\t\t\t\tlog . printVerbose ( $F22435 ( currentClassFile ) ) ; \n\t\t\t\t} \n\t\t\tif ( classfile . getKind ( ) == JavaFileObject . Kind . CLASS ) { \n\t\t\t\tfilling = _BOOL ; \n\t\t\t\ttry { \n\t\t\t\t\tbp = NUM00 ; \n\t\t\t\t\tbuf = readInputStream ( buf , classfile . openInputStream ( ) ) ; \n\t\t\t\t\treadClassFile ( c ) ; \n\t\t\t\t\tif $F133343 ( missingTypeVariables , foundTypeVariables ) { \n\t\t\t\t\t\t$F17124 missing = missingTypeVariables ; \n\t\t\t\t\t\t$F17124 found = foundTypeVariables ; \n\t\t\t\t\t\tmissingTypeVariables = List . nil ( ) ; \n\t\t\t\t\t\tfoundTypeVariables = List . nil ( ) ; \n\t\t\t\t\t\tfilling = _BOOL ; \n\t\t\t\t\t\tClassType ct = ( ClassType ) currentOwner . type ; \n\t\t\t\t\t\tct . supertype_field = types . subst ( ct . supertype_field , missing , found ) ; \n\t\t\t\t\t\tct . interfaces_field = types . subst ( ct . interfaces_field , missing , found ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse if ( missingTypeVariables . isEmpty ( ) != foundTypeVariables . isEmpty ( ) ) { \n\t\t\t\t\t\tName name = missingTypeVariables . head . tsym . name ; \n\t\t\t\t\t\tthrow badClassFile ( NUM00 , name ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\tfinally { \n\t\t\t\t\tmissingTypeVariables = List . nil ( ) ; \n\t\t\t\t\tfoundTypeVariables = List . nil ( ) ; \n\t\t\t\t\tfilling = _BOOL ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tif ( sourceCompleter != null ) { \n\t\t\t\t\tsourceCompleter . complete ( c ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tthrow new IllegalStateException ( NUM00 + classfile . toUri ( ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F665 } \n\t\tcatch ( IOException ex ) { \n\t\t\tthrow badClassFile ( $F10629 ( ex ) ) ; \n\t\t\t} \n\t\tfinally { \n\t\t\tcurrentClassFile = previousClassFile ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tJCDiagnostic diag = diagFactory . fragment ( NUM00 , c . flatname ) ; \n\t\tthrow newCompletionFailure ( c , diag ) ; \n\t\t} \n\t} \n"}, {"code": "public static Packet toPacket ( ByteBuffer data ) { \n\tfinal byte code = data . get ( ) ; \n\tfinal short id = ( short ) ( $F27748 ( data ) & NUM00 ) ; \n\tfinal short datalen = data . getShort ( ) ; \n\t$F10317 ( authData ) data . get ( authData ) ; \n\tfinal PacketType type = PacketType . getPacketType ( code ) ; \n\tPacket pkt = null ; \n\tswitch ( type ) { \n\t\tcase ACCESS_ACCEPT : pkt = new AccessAccept $F72 ; \n\t\tpkt . setAuthenticator ( new ResponseAuthenticator ( authData ) ) ; \n\t\t$F597 case ACCESS_CHALLENGE : pkt = new AccessChallenge $F72 ; \n\t\tpkt . setAuthenticator ( new ResponseAuthenticator ( authData ) ) ; \n\t\t$F597 case ACCESS_REJECT : pkt = new AccessReject $F72 ; \n\t\tpkt . setAuthenticator ( new ResponseAuthenticator ( authData ) ) ; \n\t\t$F597 case ACCESS_REQUEST : pkt = new AccessRequest $F72 ; \n\t\tpkt . setAuthenticator ( new RequestAuthenticator ( authData ) ) ; \n\t\t$F597 case UNKNOWN : $F1267 LOG . log ( Level . WARNING , NUM00 + code + NUM00 ) ; \n\t\t$F1274 } \n\tpkt . setIdentifier ( id ) ; \n\tAttribute a = null ; \n\twhile ( ( a = PacketFactory . nextAttribute ( data ) ) != null ) { \n\t\tpkt . addAttribute ( a ) ; \n\t\t} \n\treturn pkt ; \n\t} \n"}, {"code": "public void unlockReadLocks $F72 { \n\tif ( database . isMultiVersion ( ) ) $F932 for ( $F2277 ( i , locks ) ) { \n\t\tTable t = locks . get ( i ) ; \n\t\tif ( ! t . isLockedExclusively ( ) ) { \n\t\t\tsynchronized ( database ) { \n\t\t\t\tt . unlock ( this ) ; \n\t\t\t\tlocks . remove ( i ) ; \n\t\t\t\t} \n\t\t\ti -- ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "protected void processAttributes $F72 { \n\tfor ( final String tag : tags ) { \n\t\tfor ( final String inherit : inherits ) { \n\t\t\tstyleSheet . addStyles ( tag , styleSheet . getStyles ( inherit ) ) ; \n\t\t\t} \n\t\tstyleSheet . addStyles ( tag , attributes ) ; \n\t\t} \n\t} \n"}, {"code": "private boolean isImage ( String url ) { \n\treturn url . matches ( Regex . IMAGE_PATTERN ) ; \n\t} \n"}, {"code": "public void addAttribute ( $F128895 attribute , Object value , int start , int end ) { \n\t$F896 ( attribute ) if ( $F128898 ( start , end , text ) || start >= end ) $F26853 $F2329 ( value ) $F128903 ranges = attributeMap . get ( attribute ) ; \n\tif ( ranges == null ) { \n\t\tranges = new ArrayList $F128902 $F989 ; \n\t\t$F128912 ( ranges , start , end , value ) attributeMap . put ( attribute , ranges ) ; \n\t\t$F665 } \n\tListIterator $F128902 it = ranges . listIterator ( ) ; \n\twhile $F2921 ( it ) { \n\t\tRange range = it . next ( ) ; \n\t\tif ( end <= range . start ) { \n\t\t\t$F45359 ( it ) $F597 } \n\t\telse if ( start < range . end || ( start == range . end && $F12737 ( value , range ) ) ) { \n\t\t\tRange r1 = null , r3 ; \n\t\t\t$F7042 ( it ) r1 = new Range ( range . start , start , range . value ) ; \n\t\t\tr3 = new Range ( end , range . end , range . value ) ; \n\t\t\twhile ( end > range . end && it . hasNext ( ) ) { \n\t\t\t\t$F45366 ( range , it ) if ( end <= range . end ) { \n\t\t\t\t\tif ( end > range . start || ( end == range . start && $F12737 ( value , range ) ) ) { \n\t\t\t\t\t\t$F7042 ( it ) r3 = new Range ( end , range . end , range . value ) ; \n\t\t\t\t\t\t$F597 } \n\t\t\t\t\t} \n\t\t\t\telse $F38599 ( it ) } \n\t\t\tif $F52920 ( value , r1 ) { \n\t\t\t\tif $F52920 ( value , r3 ) { \n\t\t\t\t\tit . add ( new Range ( r1 . start < start ? r1 . start : start , r3 . end > end ? r3 . end : end , r1 . value ) ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tit . add ( new Range ( r1 . start < start ? r1 . start : start , end , r1 . value ) ) ; \n\t\t\t\t\t$F128966 ( r3 , it ) } \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tif $F52920 ( value , r3 ) { \n\t\t\t\t\t$F128966 ( r1 , it ) it . add ( new Range ( start , r3 . end > end ? r3 . end : end , r3 . value ) ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\t$F128966 ( r1 , it ) $F128912 ( it , start , end , value ) $F128966 ( r3 , it ) } \n\t\t\t\t} \n\t\t\t$F665 } \n\t\t} \n\t$F128912 ( it , start , end , value ) } \n"}, {"code": "public static boolean pointInRotatedRect ( $F5415 point , RectF bound , float rot ) { \n\t$F28837 ( m ) $F5415 p = Arrays . copyOf ( point , NUM00 ) ; \n\tm . setRotate ( rot , bound . centerX ( ) , bound . centerY ( ) ) ; \n\t$F28837 ( m0 ) if ( ! m . invert ( m0 ) ) return _BOOL ; \n\tm0 . mapPoints ( p ) ; \n\treturn inclusiveContains ( $F156480 ( bound , p ) ) ; \n\t} \n"}, {"code": "$F1 public void warning ( String domain , String key , XMLParseException exception ) throws XNIException { \n\tif ( fErrorHandler != null ) { \n\t\tSAXParseException saxException = createSAXParseException ( exception ) ; \n\t\ttry { \n\t\t\tfErrorHandler . warning ( saxException ) ; \n\t\t\t} \n\t\tcatch ( SAXParseException e ) $F34850 ( createXMLParseException , e ) catch ( SAXException e ) $F34850 ( createXNIException , e ) } \n\t} \n"}, {"code": "public void modifyAll ( Map < String , Collection < DynamicModification > > modifications , Collection $F81247 problems ) throws CannotCompileException { \n\tfor ( $F3465 ( className , modifications ) ) { \n\t\ttry { \n\t\t\t$F299378 ( modify , className , modifications ) } \n\t\tcatch ( NotFoundException e ) { \n\t\t\tlog . warn ( NUM00 + className , e ) ; \n\t\t\tproblems . add ( e ) ; \n\t\t\t} \n\t\tcatch ( ClassNotFoundException e ) { \n\t\t\tlog . warn ( NUM00 + className , e ) ; \n\t\t\tproblems . add ( e ) ; \n\t\t\t} \n\t\tcatch ( IOException e ) { \n\t\t\tlog . warn ( NUM00 + className , e ) ; \n\t\t\tproblems . add ( e ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public MutableLocation toMutableLocation ( World w ) { \n\treturn new MutableLocation ( x , y , z , w ) ; \n\t} \n"}, {"code": "public boolean verify ( GeneralNameInterface name ) throws IOException { \n\t$F31068 ( name ) if $F8841 ( excluded ) { \n\t\tfor ( $F2277 ( i , excluded ) ) { \n\t\t\tGeneralSubtree gs = excluded . get ( i ) ; \n\t\t\t$F45557 ( gs ) GeneralName gn = gs . getName ( ) ; \n\t\t\t$F45557 ( gn ) GeneralNameInterface exName = gn . getName ( ) ; \n\t\t\t$F45557 ( exName ) switch ( exName . constrains ( name ) ) { \n\t\t\t\tcase GeneralNameInterface . NAME_DIFF_TYPE : case GeneralNameInterface . NAME_WIDENS : case GeneralNameInterface . NAME_SAME_TYPE : $F597 case GeneralNameInterface . NAME_MATCH : case GeneralNameInterface . NAME_NARROWS : return _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tif $F8841 ( permitted ) { \n\t\tboolean sameType = _BOOL ; \n\t\tfor ( $F2277 ( i , permitted ) ) { \n\t\t\tGeneralSubtree gs = permitted . get ( i ) ; \n\t\t\t$F45557 ( gs ) GeneralName gn = gs . getName ( ) ; \n\t\t\t$F45557 ( gn ) GeneralNameInterface perName = gn . getName ( ) ; \n\t\t\t$F45557 ( perName ) switch ( perName . constrains ( name ) ) { \n\t\t\t\tcase GeneralNameInterface . NAME_DIFF_TYPE : $F598 case GeneralNameInterface . NAME_WIDENS : case GeneralNameInterface . NAME_SAME_TYPE : sameType = _BOOL ; \n\t\t\t\t$F598 case GeneralNameInterface . NAME_MATCH : case GeneralNameInterface . NAME_NARROWS : return _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F9303 ( sameType , _BOOL ) } \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void readGraphics ( ObjectInputStream objstream ) throws IOException { \n\t$F36253 ( Debug ) try { \n\t\twhile ( _BOOL ) { \n\t\t\ttry { \n\t\t\t\tOMGraphic omg = ( OMGraphic ) objstream . readObject ( ) ; \n\t\t\t\tgraphics . add ( omg ) ; \n\t\t\t\t} \n\t\t\tcatch ( ClassNotFoundException e ) $F302 ( e ) catch ( OptionalDataException ode ) $F302 ( ode ) } \n\t\t} \n\t$F214817 } \n"}, {"code": "public void createTopics ( int numPartitions , int replicationFactor , $F2689 topics ) { \n\tcreateTopics ( numPartitions , replicationFactor , $F10148 ( topics ) ) ; \n\t} \n"}, {"code": "public synchronized void removeListener ( Listener l ) $F106 ( listeners , l ) "}, {"code": "public CommandLine add ( String ... args ) { \n\tif $F22195 ( args ) $F122380 ( Collections , arguments , args ) return this ; \n\t} \n"}, {"code": "private void restoreIcon ( BackupProtos . Key key , $F96 buffer , int dataSize ) throws IOException { \n\tif ( VERBOSE ) Log . v ( TAG , NUM00 + key . id ) ; \n\tif ( DEBUG ) Log . d ( TAG , NUM00 + buffer . length + NUM00 + Base64 . encodeToString ( buffer , NUM00 , dataSize , Base64 . NO_WRAP ) ) ; \n\tBackupProtos . Resource res = unpackProto ( new BackupProtos . Resource $F72 , buffer , dataSize ) ; \n\tif ( DEBUG ) { \n\t\tLog . d ( TAG , NUM00 + res . dpi + NUM00 ) ; \n\t\t} \n\tBitmap icon = BitmapFactory . decodeByteArray ( res . data , NUM00 , res . data . length ) ; \n\tif ( icon == null ) { \n\t\tLog . w ( TAG , NUM00 + key . name ) ; \n\t\t} \n\telse { \n\t\tif ( VERBOSE ) Log . v ( TAG , NUM00 + key . name ) ; \n\t\tmIconCache . preloadIcon ( ComponentName . unflattenFromString ( key . name ) , icon , res . dpi , NUM00 , mUserSerial , mIdp ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F7465 ( msg , startpos , count , len , idx , ch , isDigit ) "}, {"code": "public EventStoreBuilder useSslConnection ( String certificateCommonName ) { \n\tsettingsBuilder . sslSettings ( SslSettings . trustCertificateCN ( certificateCommonName ) ) ; \n\treturn this ; \n\t} \n"}, {"code": "ActionMap createActionMap $F72 { \n\tActionMap map = new ActionMapUIResource $F72 ; \n\tmap . put ( NUM00 , new ShowSystemMenuAction ( _BOOL ) ) ; \n\tmap . put ( NUM00 , new ShowSystemMenuAction ( _BOOL ) ) ; \n\treturn map ; \n\t} \n"}, {"code": "protected void paintContentBorderLeftEdge ( Graphics g , int x , int y , int w , int h , boolean drawBroken , Rectangle selRect , boolean isContentBorderPainted ) { \n\tif ( isContentBorderPainted ) { \n\t\tg . setColor ( selectHighlight ) ; \n\t\tg . fillRect ( x , y , NUM00 , h - NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "private String fieldParamComment ( Field field , String paramComment ) { \n\tString commentType = fieldTypeCardinalityComment ( field ) ; \n\tString comment = String . format ( NUM00 , wrapIfKeywordOrBuiltIn ( field . getSimpleName ( ) ) , commentType ) ; \n\tif ( paramComment == null ) { \n\t\tparamComment = DocumentationUtil . getScopedDescription ( field ) ; \n\t\t} \n\tif $F48189 ( Strings , paramComment ) { \n\t\tparamComment = RDocCommentFixer . rdocify ( paramComment ) ; \n\t\tcomment += $F37742 ( paramComment ) ; \n\t\t} \n\treturn comment + NUM00 ; \n\t} \n"}, {"code": "public static long periodEnd ( long now , long period ) { \n\tLocalDateTime time = LocalDateTime . ofEpochSecond ( now / NUM00 , NUM00 , ZoneOffset . UTC ) ; \n\tlong endTime = periodEnd ( now , period , time ) ; \n\treturn endTime ; \n\t} \n"}, {"code": "public void testThenCombine_sourceCancelled $F72 throws Throwable { \n\tfor ( $F40424 ( m , ExecutionMode ) ) for ( $F2703 ( mayInterruptIfRunning , _BOOL ) ) for ( $F2703 ( fFirst , _BOOL ) ) for ( $F2703 ( failFirst , _BOOL ) ) for ( $F127409 ( v1 ) ) { \n\t\t$F127411 ( f ) $F127411 ( g ) final SubtractFunction r1 = new SubtractFunction ( m ) ; \n\t\tfinal SubtractFunction r2 = new SubtractFunction ( m ) ; \n\t\tfinal SubtractFunction r3 = new SubtractFunction ( m ) ; \n\t\tfinal $F70219 fst = fFirst ? f : g ; \n\t\tfinal $F70219 snd = ! fFirst ? f : g ; \n\t\t$F159507 ( complete1 , failFirst ) $F159507 ( complete2 , failFirst ) final $F70219 h1 = m . thenCombine ( f , g , r1 ) ; \n\t\t$F159512 ( assertTrue , complete1 ) final $F70219 h2 = m . thenCombine ( f , g , r2 ) ; \n\t\tcheckIncomplete ( h1 ) ; \n\t\tcheckIncomplete ( h2 ) ; \n\t\t$F159512 ( assertTrue , complete2 ) final $F70219 h3 = m . thenCombine ( f , g , r3 ) ; \n\t\tcheckCompletedWithWrappedCancellationException ( h1 ) ; \n\t\tcheckCompletedWithWrappedCancellationException ( h2 ) ; \n\t\tcheckCompletedWithWrappedCancellationException ( h3 ) ; \n\t\t$F159513 ( r1 ) $F159513 ( r2 ) $F159513 ( r3 ) checkCompletedNormally ( failFirst ? snd : fst , v1 ) ; \n\t\tcheckCancelled ( failFirst ? fst : snd ) ; \n\t\t} \n\t} \n"}, {"code": "public static String generateChatId $F2236 ( receiverId , senderId ) { \n\tString combined = null ; \n\tif $F25292 ( receiverId , senderId ) { \n\t\tcombined = String . format ( Locale . US , AppConstants . CHAT_ID_FORMAT , receiverId , senderId ) ; \n\t\t} \n\telse { \n\t\tcombined = String . format ( Locale . US , AppConstants . CHAT_ID_FORMAT , senderId , receiverId ) ; \n\t\t} \n\tString hashed = null ; \n\ttry { \n\t\thashed = Utils . sha1 ( combined ) ; \n\t\t} \n\tcatch ( final NoSuchAlgorithmException e ) { \n\t\thashed = combined ; \n\t\t} \n\treturn hashed ; \n\t} \n"}, {"code": "void extract ( String fname , String files [ ] ) throws IOException { \n\t$F170751 ( zf , fname ) Set < ZipEntry > dirs = newDirSet ( ) ; \n\t$F223878 ( zes , zf ) ; \n\twhile $F1444 ( zes ) { \n\t\t$F223881 ( e , zes ) if ( files == null ) { \n\t\t\tdirs . add ( extractFile ( zf . getInputStream ( e ) , e ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\t$F20605 ( name , e ) for ( String file : files ) { \n\t\t\t\tif $F7311 ( name , file ) { \n\t\t\t\t\tdirs . add ( extractFile ( zf . getInputStream ( e ) , e ) ) ; \n\t\t\t\t\t$F597 } \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F59 ( zf ) updateLastModifiedTime ( dirs ) ; \n\t} \n"}, {"code": "public void remove ( MenuComponent m ) { \n\tsynchronized ( getTreeLock ( ) ) { \n\t\t$F12747 ( index , menus , m ) $F308891 ( index , remove ) } \n\t} \n"}, {"code": "public void testIdentity $F72 { \n\tassertNotNull ( new IdentityStub $F72 ) ; \n\t} \n"}, {"code": "public void keyReleased ( final KeyEvent k ) $F845 "}, {"code": "public XMLImporter ( ProgressListener listener ) { \n\tprogressListener = listener ; \n\t} \n"}, {"code": "private static TreeMap < Integer , Long > loadWorkspaceScreensDb ( Context context ) { \n\tfinal ContentResolver contentResolver = context . getContentResolver ( ) ; \n\tfinal Uri screensUri = LauncherSettings . WorkspaceScreens . CONTENT_URI ; \n\tfinal Cursor sc = contentResolver . query ( screensUri , null , null , null , null ) ; \n\tTreeMap < Integer , Long > orderedScreens = new TreeMap < Integer , Long > $F72 ; \n\ttry { \n\t\tfinal int idIndex = sc . getColumnIndexOrThrow ( LauncherSettings . WorkspaceScreens . _ID ) ; \n\t\tfinal int rankIndex = sc . getColumnIndexOrThrow ( LauncherSettings . WorkspaceScreens . SCREEN_RANK ) ; \n\t\twhile $F12260 ( sc ) { \n\t\t\ttry { \n\t\t\t\tlong screenId = sc . getLong ( idIndex ) ; \n\t\t\t\t$F41834 ( rank , sc , rankIndex ) orderedScreens . put ( rank , screenId ) ; \n\t\t\t\t} \n\t\t\tcatch ( Exception e ) { \n\t\t\t\tLauncher . addDumpLog ( TAG , NUM00 + e , _BOOL ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F3229 ( sc ) Launcher . addDumpLog ( TAG , NUM00 , _BOOL ) ; \n\t$F8728 ( orderedScreensPairs ) for ( $F61448 ( i , orderedScreens ) ) { \n\t\torderedScreensPairs . add ( NUM00 + i + NUM00 + orderedScreens . get ( i ) + NUM00 ) ; \n\t\t} \n\tLauncher . addDumpLog ( TAG , NUM00 + TextUtils . join ( NUM00 , orderedScreensPairs ) , _BOOL ) ; \n\treturn orderedScreens ; \n\t} \n"}, {"code": "public Observable < DriveId > createFile ( DriveFolder folder , final File file ) { \n\treturn createFile ( folder , file , file . getName ( ) ) ; \n\t} \n"}, {"code": "public static void validateContext ( AccelSurface srcData , AccelSurface dstData , Region clip , Composite comp , AffineTransform xform , Paint paint , SunGraphics2D sg2d , int flags ) { \n\tBufferedContext context = dstData . getContext ( ) ; \n\tcontext . validate ( srcData , dstData , clip , comp , xform , paint , sg2d , flags ) ; \n\t} \n"}, {"code": "public void addCertificatesAndCRLs ( CertStore certStore ) throws CertStoreException , CMSException { \n\tcerts . addAll ( CMSUtils . getCertificatesFromStore ( certStore ) ) ; \n\tcrls . addAll ( CMSUtils . getCRLsFromStore ( certStore ) ) ; \n\t} \n"}, {"code": "public void changeDefaultNames ( String type ) { \n\t$F6542 ( convert , CONVERT_TYPES ) $F6542 ( types , TYPES ) if $F11279 ( convert , types ) { \n\t\tlog . error ( NUM00 , types . length , convert . length ) ; \n\t\t$F665 } \n\tif ( type . equals ( Setup . DESCRIPTIVE ) ) { \n\t\tfor ( $F1139 ( i , convert ) ) $F66563 ( replaceName , convert , i , types ) $F6542 ( aarTypes , ARR_TYPES ) for ( $F1139 ( i , aarTypes ) ) { \n\t\t\tlist . remove ( aarTypes [ i ] ) ; \n\t\t\t} \n\t\tfor ( $F1139 ( i , types ) ) { \n\t\t\tif $F22209 ( list , types , i ) $F24617 ( list , types , i ) } \n\t\t} \n\telse { \n\t\tfor ( $F1139 ( i , convert ) ) $F66563 ( replaceName , types , i , convert ) for ( $F1139 ( i , types ) ) { \n\t\t\tlist . remove ( types [ i ] ) ; \n\t\t\t} \n\t\t$F10128 ( types , ARR_TYPES ) for ( $F1139 ( i , types ) ) { \n\t\t\tif $F22209 ( list , types , i ) $F24617 ( list , types , i ) } \n\t\t} \n\t} \n"}, {"code": "public LabelValueComparator ( final Locale locale ) $F25343 ( c , Collator , locale ) "}, {"code": "public Refresher ( GLScene scene ) { \n\tPreconditions . checkNotNull ( scene ) ; \n\tthis . scene = scene ; \n\t} \n"}, {"code": "public Rect updateFastScrollerBounds ( int lastTouchY ) { \n\tmInvalidateRect . set ( mBgBounds ) ; \n\tif ( isVisible ( ) ) { \n\t\tint edgePadding = mRv . getMaxScrollbarWidth ( ) ; \n\t\tint bgPadding = ( mBgOriginalSize - mTextBounds . height ( ) ) / NUM00 ; \n\t\tint bgHeight = mBgOriginalSize ; \n\t\tint bgWidth = Math . max ( mBgOriginalSize , mTextBounds . width ( ) + ( NUM00 * bgPadding ) ) ; \n\t\tif ( Utilities . isRtl ( mRes ) ) { \n\t\t\tmBgBounds . left = mRv . getBackgroundPadding ( ) . left + ( NUM00 * mRv . getMaxScrollbarWidth ( ) ) ; \n\t\t\t$F68813 ( mBgBounds , bgWidth ) } \n\t\telse { \n\t\t\tmBgBounds . right = mRv . getWidth ( ) - mRv . getBackgroundPadding ( ) . right - ( NUM00 * mRv . getMaxScrollbarWidth ( ) ) ; \n\t\t\tmBgBounds . left = mBgBounds . right - bgWidth ; \n\t\t\t} \n\t\tmBgBounds . top = lastTouchY - $F2354 ( FAST_SCROLL_OVERLAY_Y_OFFSET_FACTOR , bgHeight ) ; \n\t\tmBgBounds . top = Math . max ( edgePadding , Math . min ( mBgBounds . top , mRv . getHeight ( ) - edgePadding - bgHeight ) ) ; \n\t\tmBgBounds . bottom = mBgBounds . top + bgHeight ; \n\t\t} \n\telse $F406864 ( mBgBounds ) mInvalidateRect . union ( mBgBounds ) ; \n\treturn mInvalidateRect ; \n\t} \n"}, {"code": "public void buildUniqueId $F72 throws VPlexApiException { \n\tString name = getName ( ) ; \n\tif $F2200 ( name , VPLEX_NAME_DELIM ) { \n\t\t$F34419 ( s_logger , name ) uniqueId = name ; \n\t\t$F665 } \n\t$F162792 ( lastDelimIndex , name , VPLEX_NAME_DELIM ) $F36289 ( suffix , name , lastDelimIndex ) $F21153 ( s_logger , name , suffix ) uniqueId = suffix ; \n\t} \n"}, {"code": "public static String createBase64 ( Bitmap mBitmap ) { \n\t$F1538 ( baos1 ) $F26834 ( mBitmap , Bitmap , baos1 ) $F1208 ( b1 , baos1 ) return Base64 . encodeToString ( b1 , Base64 . DEFAULT ) ; \n\t} \n"}, {"code": "public DiceServerEditor ( final IRemoteDiceServer diceServer ) { \n\tm_bean = diceServer ; \n\tfinal int bottomSpace = NUM00 ; \n\tfinal int labelSpace = NUM00 ; \n\tint row = NUM00 ; \n\tif ( m_bean . sendsEmail ( ) ) { \n\t\tadd ( m_toLabel , new GridBagConstraints ( NUM00 , row , NUM00 , NUM00 , NUM00 , NUM00 , GridBagConstraints . WEST , GridBagConstraints . NONE , new Insets ( NUM00 , NUM00 , bottomSpace , labelSpace ) , NUM00 , NUM00 ) ) ; \n\t\t$F34065 ( add , m_toAddress , row , GridBagConstraints , bottomSpace ) m_toAddress . setText ( m_bean . getToAddress ( ) ) ; \n\t\trow ++ ; \n\t\tadd ( m_ccLabel , new GridBagConstraints ( NUM00 , row , NUM00 , NUM00 , NUM00 , NUM00 , GridBagConstraints . WEST , GridBagConstraints . NONE , new Insets ( NUM00 , NUM00 , bottomSpace , labelSpace ) , NUM00 , NUM00 ) ) ; \n\t\t$F34065 ( add , m_ccAddress , row , GridBagConstraints , bottomSpace ) m_ccAddress . setText ( m_bean . getCcAddress ( ) ) ; \n\t\trow ++ ; \n\t\t} \n\tif ( m_bean . supportsGameId ( ) ) { \n\t\tfinal JLabel m_gameIdLabel = $F34046 ; \n\t\tadd ( m_gameIdLabel , new GridBagConstraints ( NUM00 , row , NUM00 , NUM00 , NUM00 , NUM00 , GridBagConstraints . WEST , GridBagConstraints . NONE , new Insets ( NUM00 , NUM00 , bottomSpace , labelSpace ) , NUM00 , NUM00 ) ) ; \n\t\t$F34065 ( add , m_gameId , row , GridBagConstraints , bottomSpace ) m_gameId . setText ( m_bean . getGameId ( ) ) ; \n\t\trow ++ ; \n\t\t} \n\tadd ( m_testDiceyButton , new GridBagConstraints ( NUM00 , row , NUM00 , NUM00 , NUM00 , NUM00 , GridBagConstraints . EAST , GridBagConstraints . NONE , new Insets ( NUM00 , NUM00 , bottomSpace , NUM00 ) , NUM00 , NUM00 ) ) ; \n\tsetupListeners ( ) ; \n\t} \n"}, {"code": "$F1 public boolean equals ( Object obj ) { \n\t$F3627 ( obj , this , _BOOL ) if ( ! ( obj instanceof CandlestickRenderer ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tCandlestickRenderer that = ( CandlestickRenderer ) obj ; \n\tif ( this . candleWidth != that . candleWidth ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( ! PaintUtilities . equal ( this . upPaint , that . upPaint ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( ! PaintUtilities . equal ( this . downPaint , that . downPaint ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( this . drawVolume != that . drawVolume ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( this . maxCandleWidthInMilliseconds != that . maxCandleWidthInMilliseconds ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( this . autoWidthMethod != that . autoWidthMethod ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( this . autoWidthFactor != that . autoWidthFactor ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( this . autoWidthGap != that . autoWidthGap ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( this . useOutlinePaint != that . useOutlinePaint ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( ! PaintUtilities . equal ( this . volumePaint , that . volumePaint ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\t$F1964 ( super , obj ) } \n"}, {"code": "public HeaderIterator iterator $F72 { \n\treturn new BasicListHeaderIterator ( this . headers , null ) ; \n\t} \n"}, {"code": "$F52428 ( tag , msg , args , sLevel , LEVEL_WARNING , String , Log ) "}, {"code": "$F1431 $F20664 $F1 public boolean onTouchEvent ( MotionEvent event ) { \n\tPointF vCenterEnd ; \n\tfloat vDistEnd ; \n\tif ( anim != null && ! anim . interruptible ) { \n\t\treturn _BOOL ; \n\t\t} \n\telse { \n\t\tanim = null ; \n\t\t} \n\t$F1933 ( vTranslate , _BOOL ) if ( detector == null || detector . onTouchEvent ( event ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tint touchCount = event . getPointerCount ( ) ; \n\tswitch $F166723 ( event ) { \n\t\tcase MotionEvent . ACTION_DOWN : case MotionEvent . ACTION_POINTER_1_DOWN : case MotionEvent . ACTION_POINTER_2_DOWN : anim = null ; \n\t\t$F19410 ( maxTouchCount , Math , touchCount ) if ( touchCount >= NUM00 ) { \n\t\t\tif ( zoomEnabled ) { \n\t\t\t\tfloat distance = distance ( event . getX ( NUM00 ) , event . getX ( NUM00 ) , event . getY ( NUM00 ) , event . getY ( NUM00 ) ) ; \n\t\t\t\tscaleStart = scale ; \n\t\t\t\tvDistStart = distance ; \n\t\t\t\tvTranslateStart = new PointF $F47158 ( vTranslate ) ; \n\t\t\t\tvCenterStart = new PointF ( ( event . getX ( NUM00 ) + event . getX ( NUM00 ) ) / NUM00 , ( event . getY ( NUM00 ) + event . getY ( NUM00 ) ) / NUM00 ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tmaxTouchCount = NUM00 ; \n\t\t\t\t} \n\t\t\thandler . removeMessages ( MESSAGE_LONG_CLICK ) ; \n\t\t\t} \n\t\telse { \n\t\t\tvTranslateStart = new PointF $F47158 ( vTranslate ) ; \n\t\t\tvCenterStart = new PointF ( $F5048 ( event ) ) ; \n\t\t\thandler . sendEmptyMessageDelayed ( MESSAGE_LONG_CLICK , NUM00 ) ; \n\t\t\t} \n\t\treturn _BOOL ; \n\t\tcase MotionEvent . ACTION_MOVE : boolean consumed = _BOOL ; \n\t\tif ( maxTouchCount > NUM00 ) { \n\t\t\tif ( touchCount >= NUM00 ) { \n\t\t\t\tvDistEnd = distance ( event . getX ( NUM00 ) , event . getX ( NUM00 ) , event . getY ( NUM00 ) , event . getY ( NUM00 ) ) ; \n\t\t\t\tvCenterEnd = new PointF ( ( event . getX ( NUM00 ) + event . getX ( NUM00 ) ) / NUM00 , ( event . getY ( NUM00 ) + event . getY ( NUM00 ) ) / NUM00 ) ; \n\t\t\t\tif ( zoomEnabled && ( distance ( vCenterStart . x , vCenterEnd . x , vCenterStart . y , vCenterEnd . y ) > NUM00 || Math . abs ( vDistEnd - vDistStart ) > NUM00 || isPanning ) ) { \n\t\t\t\t\tisZooming = _BOOL ; \n\t\t\t\t\tisPanning = _BOOL ; \n\t\t\t\t\tconsumed = _BOOL ; \n\t\t\t\t\tscale = Math . min ( maxScale , ( vDistEnd / vDistStart ) * scaleStart ) ; \n\t\t\t\t\tif ( scale <= minScale ( ) ) { \n\t\t\t\t\t\tvDistStart = vDistEnd ; \n\t\t\t\t\t\tscaleStart = minScale ( ) ; \n\t\t\t\t\t\tvCenterStart = vCenterEnd ; \n\t\t\t\t\t\tvTranslateStart = vTranslate ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse if ( panEnabled ) { \n\t\t\t\t\t\tfloat vLeftStart = vCenterStart . x - vTranslateStart . x ; \n\t\t\t\t\t\tfloat vTopStart = vCenterStart . y - vTranslateStart . y ; \n\t\t\t\t\t\tfloat vLeftNow = vLeftStart * ( scale / scaleStart ) ; \n\t\t\t\t\t\tfloat vTopNow = vTopStart * ( scale / scaleStart ) ; \n\t\t\t\t\t\tvTranslate . x = vCenterEnd . x - vLeftNow ; \n\t\t\t\t\t\tvTranslate . y = vCenterEnd . y - vTopNow ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse if ( sRequestedCenter != null ) { \n\t\t\t\t\t\tvTranslate . x = ( getWidth ( ) / NUM00 ) - ( scale * sRequestedCenter . x ) ; \n\t\t\t\t\t\tvTranslate . y = ( getHeight ( ) / NUM00 ) - ( scale * sRequestedCenter . y ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse { \n\t\t\t\t\t\tvTranslate . x = ( getWidth ( ) / NUM00 ) - ( scale * ( sWidth ( ) / NUM00 ) ) ; \n\t\t\t\t\t\tvTranslate . y = ( getHeight ( ) / NUM00 ) - ( scale * ( sHeight ( ) / NUM00 ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\tfitToBounds ( _BOOL ) ; \n\t\t\t\t\trefreshRequiredTiles ( _BOOL ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse if ( ! isZooming ) { \n\t\t\t\tfloat dx = Math . abs ( event . getX ( ) - vCenterStart . x ) ; \n\t\t\t\tfloat dy = Math . abs ( event . getY ( ) - vCenterStart . y ) ; \n\t\t\t\tif ( dx > NUM00 || dy > NUM00 || isPanning ) { \n\t\t\t\t\tconsumed = _BOOL ; \n\t\t\t\t\tvTranslate . x = vTranslateStart . x + ( event . getX ( ) - vCenterStart . x ) ; \n\t\t\t\t\tvTranslate . y = vTranslateStart . y + ( event . getY ( ) - vCenterStart . y ) ; \n\t\t\t\t\tfloat lastX = vTranslate . x ; \n\t\t\t\t\tfloat lastY = vTranslate . y ; \n\t\t\t\t\tfitToBounds ( _BOOL ) ; \n\t\t\t\t\tif ( lastX == vTranslate . x || ( lastY == vTranslate . y && dy > NUM00 ) || isPanning ) { \n\t\t\t\t\t\tisPanning = _BOOL ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse if ( dx > NUM00 ) { \n\t\t\t\t\t\tmaxTouchCount = NUM00 ; \n\t\t\t\t\t\thandler . removeMessages ( MESSAGE_LONG_CLICK ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\tif ( ! panEnabled ) { \n\t\t\t\t\t\t$F33664 ( vTranslate , vTranslateStart ) $F33649 ( vTranslate , vTranslateStart ) } \n\t\t\t\t\trefreshRequiredTiles ( _BOOL ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tif ( consumed ) { \n\t\t\thandler . removeMessages ( MESSAGE_LONG_CLICK ) ; \n\t\t\tinvalidate ( ) ; \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t$F597 case MotionEvent . ACTION_UP : case MotionEvent . ACTION_POINTER_UP : case MotionEvent . ACTION_POINTER_2_UP : handler . removeMessages ( MESSAGE_LONG_CLICK ) ; \n\t\tif ( maxTouchCount > NUM00 && ( isZooming || isPanning ) ) { \n\t\t\tif ( isZooming && touchCount == NUM00 ) { \n\t\t\t\tisPanning = _BOOL ; \n\t\t\t\tvTranslateStart = new PointF $F47158 ( vTranslate ) ; \n\t\t\t\tif ( event . getActionIndex ( ) == NUM00 ) { \n\t\t\t\t\tvCenterStart = new PointF ( event . getX ( NUM00 ) , event . getY ( NUM00 ) ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tvCenterStart = new PointF ( event . getX ( NUM00 ) , event . getY ( NUM00 ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tif ( touchCount < NUM00 ) { \n\t\t\t\tisZooming = _BOOL ; \n\t\t\t\t} \n\t\t\tif ( touchCount < NUM00 ) { \n\t\t\t\tisPanning = _BOOL ; \n\t\t\t\tmaxTouchCount = NUM00 ; \n\t\t\t\t} \n\t\t\trefreshRequiredTiles ( _BOOL ) ; \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\tif ( touchCount == NUM00 ) { \n\t\t\tisZooming = _BOOL ; \n\t\t\tisPanning = _BOOL ; \n\t\t\tmaxTouchCount = NUM00 ; \n\t\t\t} \n\t\treturn _BOOL ; \n\t\t} \n\t$F19497 ( super , event ) } \n"}, {"code": "public static < T1 , T2 > void transform ( Collection < T1 > from , Collection < T2 > to , Transformer < T1 , T2 > transformer ) { \n\tfor ( T1 instance : from ) { \n\t\tto . add ( transformer . transform ( instance ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static String generateCode $F72 $F4915 ( generateCode , CODESIZE ) "}, {"code": "$F9105 ( url ) "}, {"code": "public void flush $F72 throws $F3258 $F29882 ( m_os ) "}, {"code": "private void combineEntries ( ArrayList < $F2469 > list , int total ) { \n\tCollections . sort ( list , this ) ; \n\tfor ( int minGap = NUM00 ; \n\tminGap < total ; \n\tminGap += minGap / NUM00 ) { \n\t\tfor ( $F2665 ( i , list ) ) { \n\t\t\t$F2469 current = list . get ( i ) ; \n\t\t\t$F2469 next = list . get ( i + NUM00 ) ; \n\t\t\tif ( current [ NUM00 ] + minGap >= next [ NUM00 ] ) { \n\t\t\t\t$F603 ( current , next ) list . remove ( i + NUM00 ) ; \n\t\t\t\ti -- ; \n\t\t\t\t} \n\t\t\t} \n\t\tint searched = NUM00 ; \n\t\tfor ( $F2469 range : list ) { \n\t\t\tsearched += $F50510 ( range ) + NUM00 ; \n\t\t\t} \n\t\tif ( searched > NUM00 * total || $F6213 ( list ) ) $F5153 } \n\t} \n"}, {"code": "$F1 public void writeString $F24576 ( str , offset , length ) throws IOException { \n\tif ( str == null ) writeInt ( NUM00 ) ; \n\telse { \n\t\tif ( useCompression && length >= Compressor . MIN_SIZE_FOR_DEFLATION ) { \n\t\t\tif ( byteBuffer . length < length ) byteBuffer = new byte [ NUM00 * length ] ; \n\t\t\tint numberOfBytes = compressor . deflateString2ByteArray ( str , offset , length , byteBuffer ) ; \n\t\t\twriteInt ( numberOfBytes ) ; \n\t\t\tio . write ( byteBuffer , NUM00 , Math . abs ( numberOfBytes ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\twriteInt ( length ) ; \n\t\t\tio . write ( str , offset , length ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void testGenerateDomainLimit $F72 throws Exception { \n\t$F109649 list = new $F109649 $F72 ; \n\t$F109657 ( list , createURLCrawlDatum ) $F109657 ( list , createURLCrawlDatum ) $F109657 ( list , createURLCrawlDatum ) createCrawlDB ( list ) ; \n\tConfiguration myConfiguration = new Configuration ( conf ) ; \n\tmyConfiguration . setInt ( Generator . GENERATOR_MAX_COUNT , NUM00 ) ; \n\tmyConfiguration . set ( Generator . GENERATOR_COUNT_MODE , Generator . GENERATOR_COUNT_VALUE_DOMAIN ) ; \n\tPath generatedSegment = generateFetchlist ( Integer . MAX_VALUE , myConfiguration , _BOOL ) ; \n\tPath fetchlistPath = new Path ( new Path ( generatedSegment , CrawlDatum . GENERATE_DIR_NAME ) , NUM00 ) ; \n\t$F109649 fetchList = readContents ( fetchlistPath ) ; \n\t$F70108 ( assertEquals , fetchList ) myConfiguration = new Configuration ( myConfiguration ) ; \n\tmyConfiguration . setInt ( Generator . GENERATOR_MAX_COUNT , NUM00 ) ; \n\tgeneratedSegment = generateFetchlist ( Integer . MAX_VALUE , myConfiguration , _BOOL ) ; \n\tfetchlistPath = new Path ( new Path ( generatedSegment , CrawlDatum . GENERATE_DIR_NAME ) , NUM00 ) ; \n\tfetchList = readContents ( fetchlistPath ) ; \n\t$F70108 ( assertEquals , fetchList ) myConfiguration = new Configuration ( myConfiguration ) ; \n\tmyConfiguration . setInt ( Generator . GENERATOR_MAX_COUNT , NUM00 ) ; \n\tgeneratedSegment = generateFetchlist ( Integer . MAX_VALUE , myConfiguration , _BOOL ) ; \n\tfetchlistPath = new Path ( new Path ( generatedSegment , CrawlDatum . GENERATE_DIR_NAME ) , NUM00 ) ; \n\tfetchList = readContents ( fetchlistPath ) ; \n\t$F70108 ( assertEquals , fetchList ) } \n"}, {"code": "protected void writeColumnNotNullableStmt ( StringBuilder ddl ) $F86 ( ddl ) "}, {"code": "private static OutputStream wrapOutputStream ( final OutputStream stream ) { \n\t$F27462 ( os , System ) if $F3106 ( os ) { \n\t\ttry { \n\t\t\treturn new WindowsAnsiOutputStream ( stream ) ; \n\t\t\t} \n\t\tcatch ( Throwable ignore ) $F845 return new AnsiOutputStream ( stream ) ; \n\t\t} \n\treturn stream ; \n\t} \n"}, {"code": "$F1 public Set $F80423 unmarshal ( LocationsType locationsType ) { \n\tSet $F80423 locations = new LinkedHashSet $F80423 $F72 ; \n\tlocations . addAll ( locationsType . getRpsBlastLocations ( ) ) ; \n\tlocations . addAll ( locationsType . getHmmer2Locations ( ) ) ; \n\tlocations . addAll ( locationsType . getHmmer3Locations ( ) ) ; \n\tlocations . addAll ( locationsType . getSuperFamilyHmmer3Locations ( ) ) ; \n\tlocations . addAll ( locationsType . getFingerPrintsLocations ( ) ) ; \n\tlocations . addAll ( locationsType . getBlastProDomLocations ( ) ) ; \n\tlocations . addAll ( locationsType . getPatternScanLocations ( ) ) ; \n\tlocations . addAll ( locationsType . getProfileScanLocations ( ) ) ; \n\tlocations . addAll ( locationsType . getPhobiusLocations ( ) ) ; \n\tlocations . addAll ( locationsType . getCoilsLocations ( ) ) ; \n\tlocations . addAll ( locationsType . getPantherLocations ( ) ) ; \n\tlocations . addAll ( locationsType . getSignalPLocations ( ) ) ; \n\tlocations . addAll ( locationsType . getTMHMMLocations ( ) ) ; \n\treturn locations ; \n\t} \n"}, {"code": "public int writeKey ( OutputStream out ) throws IOException { \n\tout . write ( blockBuffer , keyOffset , klen ) ; \n\treturn klen ; \n\t} \n"}, {"code": "boolean descendsFrom ( ClassFile cf ) { \n\t$F17718 ( descendsFrom , cf ) } \n"}, {"code": "protected Object writePreProcess ( Object o ) throws Exception { \n\treturn o ; \n\t} \n"}, {"code": "public $F987 listOptions $F72 { \n\t$F994 ( newVector ) $F1006 ( newVector ) $F9010 ( newVector , Collections , super ) $F1007 ( newVector ) } \n"}, {"code": "public ExpressionParserBuilder withDynamics ( Resolver resolver ) $F18637 ( dynamicsResolvers , resolver , this ) "}, {"code": "void warnMissingNames ( File file ) { \n\tString result = checkMissingNames ( file ) ; \n\tif $F3057 ( result ) { \n\t\tJOptionPane . showMessageDialog ( _who , NUM00 ) ; \n\t\t} \n\telse { \n\t\tJOptionPane . showMessageDialog ( _who , result ) ; \n\t\t} \n\t} \n"}, {"code": "public void add ( int position , WishlistItem wishlistItem ) { \n\tnotifyItemInserted ( position ) ; \n\twishlistItems . add ( position , wishlistItem ) ; \n\t} \n"}, {"code": "protected void printBand ( $F96 bgrData , int x , int y , int width , int height ) throws PrinterException { \n\tmPSStream . println ( IMAGE_SAVE ) ; \n\tint psBytesPerRow = NUM00 * width ; \n\twhile ( psBytesPerRow > MAX_PSSTR ) { \n\t\tpsBytesPerRow /= NUM00 ; \n\t\t} \n\tmPSStream . println ( psBytesPerRow + IMAGE_STR ) ; \n\tmPSStream . println ( NUM00 + width + NUM00 + NUM00 + height + NUM00 + x + NUM00 + y + NUM00 ) ; \n\tmPSStream . println ( width + NUM00 + height + NUM00 + NUM00 + NUM00 + width + NUM00 + NUM00 + - height + NUM00 + height + NUM00 + NUM00 ) ; \n\tint index = NUM00 ; \n\t$F171903 ( rgbData , width ) try { \n\t\tfor ( $F119 ( i , height ) ) { \n\t\t\tindex = swapBGRtoRGB ( bgrData , index , rgbData ) ; \n\t\t\t$F12490 ( encodedData , rlEncode , rgbData ) $F12490 ( asciiData , ascii85Encode , encodedData ) mPSStream . write ( asciiData ) ; \n\t\t\t$F8438 ( mPSStream ) } \n\t\t} \n\tcatch ( IOException e ) { \n\t\tthrow new PrinterIOException ( e ) ; \n\t\t} \n\tmPSStream . println ( IMAGE_RESTORE ) ; \n\t} \n"}, {"code": "private void initPanel ( final ITreeNode $F97882 rootTag ) { \n\t$F40881 ( mainPanel ) $F40871 ( mainPanel ) createTree ( rootTag ) ; \n\tfinal JScrollPane pane = new JScrollPane ( m_tagTree ) ; \n\tpane . setVerticalScrollBarPolicy ( ScrollPaneConstants . VERTICAL_SCROLLBAR_AS_NEEDED ) ; \n\tpane . setHorizontalScrollBarPolicy ( ScrollPaneConstants . HORIZONTAL_SCROLLBAR_AS_NEEDED ) ; \n\t$F40873 ( anyTagPanel ) anyTagPanel . add ( m_anyTagBox ) ; \n\t$F30063 ( mainPanel , pane , BorderLayout ) $F30069 ( mainPanel , m_anyTagBox , BorderLayout ) add ( mainPanel , BorderLayout . CENTER ) ; \n\t} \n"}, {"code": "public final void append ( String value ) { \n\t$F8249 ( value ) $F1749 ( strlen , value ) $F163790 ( strlen ) int copyfrom = NUM00 ; \n\t$F16051 ( chunk , m_array , m_lastChunk ) int available = m_chunkSize - m_firstFree ; \n\twhile ( strlen > NUM00 ) { \n\t\t$F46170 ( available , strlen ) value . getChars ( copyfrom , copyfrom + available , m_array [ m_lastChunk ] , m_firstFree ) ; \n\t\tstrlen -= available ; \n\t\tcopyfrom += available ; \n\t\t$F163794 ( strlen , i , m_array , m_lastChunk , newarray , System , chunk , m_rebundleBits , m_chunkBits , m_maxChunkBits , m_innerFSB , this , m_chunkSize , available , m_firstFree ) } \n\tm_firstFree += available ; \n\t} \n"}, {"code": "protected void addPrefixMatch ( StringBuilder sb , String surface , String analyzed , String prefixToken ) { \n\tif ( $F231224 ( prefixToken , surface ) ) $F55644 ( addWholeMatch , sb , surface , analyzed ) $F84 ( sb ) sb . append ( surface . substring ( $F34024 ( prefixToken ) ) ) ; \n\t$F84 ( sb ) sb . append ( $F8182 ( surface , prefixToken ) ) ; \n\t} \n"}, {"code": "public WalletData addWallet ( final BitcoinController bitcoinController , Wallet wallet , String walletFilename ) { \n\t$F1338 ( walletFilename ) for ( WalletData loopModelData : perWalletModelDataList ) { \n\t\tif ( walletFilename . equals ( loopModelData . getWalletFilename ( ) ) ) { \n\t\t\treturn loopModelData ; \n\t\t\t} \n\t\t} \n\tWalletData newPerWalletModelData = new WalletData $F72 ; \n\tnewPerWalletModelData . setWallet ( wallet ) ; \n\tnewPerWalletModelData . setWalletFilename ( walletFilename ) ; \n\tnewPerWalletModelData . setWalletTableDataList ( new ArrayList < WalletTableData > $F72 ) ; \n\tif ( thereIsNoActiveWallet ( ) ) { \n\t\tperWalletModelDataList . remove ( activeWalletModelData ) ; \n\t\tactiveWalletModelData = newPerWalletModelData ; \n\t\t} \n\tperWalletModelDataList . add ( newPerWalletModelData ) ; \n\tif ( wallet != null ) { \n\t\twallet . addEventListener ( bitcoinController ) ; \n\t\t} \n\tcreateWalletTableData ( bitcoinController , walletFilename ) ; \n\tcreateAddressBookReceivingAddresses ( walletFilename ) ; \n\treturn newPerWalletModelData ; \n\t} \n"}, {"code": "public E push ( E object ) { \n\taddElement ( object ) ; \n\treturn object ; \n\t} \n"}, {"code": "public void add ( T object ) { \n\tsynchronized ( mLock ) { \n\t\tif ( mOriginalValues != null ) $F207 ( mOriginalValues , object ) else $F207 ( mObjects , object ) } \n\t$F32367 ( mNotifyOnChange , notifyDataSetChanged ) } \n"}, {"code": "public static String toHumanSize ( long bytesValue ) { \n\tif ( NUM00 == bytesValue ) $F2455 boolean powerOfTwo = _BOOL ; \n\tif ( $F37373 ( bytesValue ) == NUM00 ) { \n\t\tpowerOfTwo = _BOOL ; \n\t\t} \n\tlong multiple = ( long ) ( bytesValue / NUM00 ) ; \n\tif ( $F37373 ( multiple ) == NUM00 ) { \n\t\tpowerOfTwo = _BOOL ; \n\t\t} \n\tUnit unit = Unit . B ; \n\tif ( powerOfTwo ) { \n\t\tif ( bytesValue >= Unit . EiB . value ) { \n\t\t\tunit = Unit . EiB ; \n\t\t\t} \n\t\telse if ( bytesValue >= Unit . PiB . value ) { \n\t\t\tunit = Unit . PiB ; \n\t\t\t} \n\t\telse if ( bytesValue >= Unit . TiB . value ) { \n\t\t\tunit = Unit . TiB ; \n\t\t\t} \n\t\telse if ( bytesValue >= Unit . GiB . value ) { \n\t\t\tunit = Unit . GiB ; \n\t\t\t} \n\t\telse if ( bytesValue >= Unit . MiB . value ) { \n\t\t\tunit = Unit . MiB ; \n\t\t\t} \n\t\telse if ( bytesValue >= Unit . KiB . value ) { \n\t\t\tunit = Unit . KiB ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tif ( bytesValue >= Unit . EB . value ) { \n\t\t\tunit = Unit . EB ; \n\t\t\t} \n\t\telse if ( bytesValue >= Unit . PB . value ) { \n\t\t\tunit = Unit . PB ; \n\t\t\t} \n\t\telse if ( bytesValue >= Unit . TB . value ) { \n\t\t\tunit = Unit . TB ; \n\t\t\t} \n\t\telse if ( bytesValue >= Unit . GB . value ) { \n\t\t\tunit = Unit . GB ; \n\t\t\t} \n\t\telse if ( bytesValue >= Unit . MB . value ) { \n\t\t\tunit = Unit . MB ; \n\t\t\t} \n\t\telse if ( bytesValue >= Unit . KB . value ) { \n\t\t\tunit = Unit . KB ; \n\t\t\t} \n\t\t} \n\tdouble val = ( bytesValue / unit . getValue ( ) ) ; \n\tdouble roundedValue = $F37424 ( Math , val ) ; \n\t$F2544 ( myDecimal , BigDecimal , roundedValue ) BigDecimal updated = myDecimal . stripTrailingZeros ( ) ; \n\treturn updated . toPlainString ( ) + unit . name ( ) ; \n\t} \n"}, {"code": "public boolean equals ( Object another ) { \n\tif ( another instanceof Permission ) { \n\t\tPermission p = ( Permission ) another ; \n\t\treturn permission . equals ( p . toString ( ) ) ; \n\t\t} \n\telse { \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public static Intent buildStartInTerminalIntent ( File script ) { \n\tfinal ComponentName componentName = Constants . SL4A_SERVICE_LAUNCHER_COMPONENT_NAME ; \n\tIntent $F192736 ( intent ) ; \n\tintent . setComponent ( componentName ) ; \n\tintent . setAction ( Constants . ACTION_LAUNCH_FOREGROUND_SCRIPT ) ; \n\tintent . putExtra ( Constants . EXTRA_SCRIPT_PATH , script . getAbsolutePath ( ) ) ; \n\treturn intent ; \n\t} \n"}, {"code": "public Document loadDocument ( Resource file ) throws $F55616 { \n\tDOMParser parser = new DOMParser $F72 ; \n\tInputStream in = null ; \n\ttry { \n\t\t$F7981 ( in , file ) $F77995 ( source , in ) parser . parse ( source ) ; \n\t\t} \n\tfinally { \n\t\tIOUtil . closeEL ( in ) ; \n\t\t} \n\treturn parser . getDocument ( ) ; \n\t} \n"}, {"code": "public void resetFilters ( Boolean enabled ) { \n\t$F35579 ( logger , Level , enabled ) $F304893 ( keys , filters ) for ( $F2774 ( it , keys ) ) { \n\t\t$F2778 ( title , it ) setFilterValue ( title , enabled ) ; \n\t\t} \n\tupdateInterface ( ) ; \n\t} \n"}, {"code": "private $F806 diff_halfMatchI $F68141 ( longtext , shorttext , i ) { \n\tString seed = longtext . substring ( i , i + $F8196 ( longtext ) ) ; \n\tint j = - NUM00 ; \n\tString best_common = NUM00 ; \n\tString best_longtext_a = NUM00 , best_longtext_b = NUM00 ; \n\tString best_shorttext_a = NUM00 , best_shorttext_b = NUM00 ; \n\twhile $F96196 ( j , shorttext , seed ) { \n\t\tint prefixLength = diff_commonPrefix ( longtext . substring ( i ) , shorttext . substring ( j ) ) ; \n\t\tint suffixLength = diff_commonSuffix ( longtext . substring ( NUM00 , i ) , shorttext . substring ( NUM00 , j ) ) ; \n\t\tif $F143803 ( best_common , suffixLength , prefixLength ) { \n\t\t\tbest_common = shorttext . substring ( j - suffixLength , j ) + shorttext . substring ( j , j + prefixLength ) ; \n\t\t\t$F550209 ( best_longtext_a , longtext , i , suffixLength ) best_longtext_b = longtext . substring ( i + prefixLength ) ; \n\t\t\t$F550209 ( best_shorttext_a , shorttext , j , suffixLength ) best_shorttext_b = shorttext . substring ( j + prefixLength ) ; \n\t\t\t} \n\t\t} \n\tif ( $F9483 ( best_common ) >= longtext . length ( ) ) { \n\t\treturn new String [ ] { \n\t\t\tbest_longtext_a , best_longtext_b , best_shorttext_a , best_shorttext_b , best_common } \n\t\t; \n\t\t} \n\telse $F1337 } \n"}, {"code": "$F1 public boolean generateEventID $F72 { \n\treturn _BOOL ; \n\t} \n"}, {"code": "private void updateUtility $F72 { \n\tfor ( Individual individual : population ) { \n\t\tdouble oldFitness = individual . getFitness ( ) ; \n\t\tdouble newFitness = fitness ( individual . getSolution ( ) , idealPoint ) ; \n\t\tdouble relativeDecrease = oldFitness - newFitness ; \n\t\tif ( relativeDecrease > NUM00 ) { \n\t\t\tindividual . setUtility ( NUM00 ) ; \n\t\t\t} \n\t\telse { \n\t\t\tdouble utility = Math . min ( NUM00 , NUM00 * ( NUM00 + delta / NUM00 ) * individual . getUtility ( ) ) ; \n\t\t\tindividual . setUtility ( utility ) ; \n\t\t\t} \n\t\tindividual . setFitness ( newFitness ) ; \n\t\t} \n\t} \n"}, {"code": "private void writeKeysWithPrefix ( String prefix ) { \n\tfor ( String key : keys ) { \n\t\tif $F7311 ( key , prefix ) { \n\t\t\tps . println ( key + NUM00 + prop . getProperty ( key ) ) ; \n\t\t\t} \n\t\t} \n\t$F21416 ( ps ) } \n"}, {"code": "public List < Operation > sendAndWait ( List < Operation > ops ) $F8587 ( sendAndWait , ops , _BOOL ) "}, {"code": "public static void copy $F251959 ( in , out ) throws IOException { \n\t$F18062 ( Assert , in ) $F18062 ( Assert , out ) try $F4050 ( out , in ) $F211028 ( out ) } \n"}, {"code": "public Action mapToXACMLAction ( String nativeActionName , String serviceName ) throws XACMLException $F1337 "}, {"code": "private int nextInt ( StringTokenizer tok , String errorMsg ) throws SAXException { \n\tif $F49874 ( tok ) { \n\t\t$F6287 ( errorMsg ) } \n\ttry { \n\t\treturn Integer . parseInt ( tok . nextToken ( ) ) ; \n\t\t} \n\tcatch ( NumberFormatException nfe ) { \n\t\t$F6287 ( errorMsg ) } \n\t} \n"}, {"code": "public Calculable ( String id , double value ) { \n\tsetId ( id ) ; \n\tsetValue ( value ) ; \n\t$F153821 ( setWhen , System ) } \n"}, {"code": "public static boolean bookmarkNodeExists ( Context context , long nodeId ) { \n\tBoolean result = chromeBrowserProviderCall ( $F61970 , ChromeBrowserProvider . CLIENT_API_BOOKMARK_NODE_EXISTS , context , argsToBundle ( nodeId ) ) ; \n\treturn result != null ? result . booleanValue ( ) : _BOOL ; \n\t} \n"}, {"code": "private void executeTasksSimultaneouslyWithBarrier ( Runnable ... tasks ) throws InterruptedException { \n\tCountDownLatch latch = new CountDownLatch ( tasks . length ) ; \n\tfor ( Runnable task : tasks ) $F62337 ( executor ) $F681 ( latch ) } \n"}, {"code": "private boolean isOperator ( char tok ) { \n\tif $F85013 ( OPERATORS , tok ) { \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "protected String formatIterable ( JCDiagnostic d , $F247465 it , Locale l ) { \n\t$F83 ( sbuf ) String sep = NUM00 ; \n\tfor ( Object o : it ) { \n\t\tsbuf . append ( sep ) ; \n\t\tsbuf . append ( formatArgument ( d , o , l ) ) ; \n\t\tsep = NUM00 ; \n\t\t} \n\t$F92 ( sbuf ) } \n"}, {"code": "public void endRepresentation $F72 { \n\tif ( ! representationProtectionsSet ) { \n\t\tif ( currentRepresentationProtections != null ) $F57005 ( Collections , currentRepresentationProtections , this ) representationProtections = currentRepresentationProtections ; \n\t\trepresentationProtectionsSet = _BOOL ; \n\t\t} \n\telse { \n\t\tif ( currentRepresentationProtections == null ) { \n\t\t\tAssertions . checkState ( representationProtections == null ) ; \n\t\t\t} \n\t\telse { \n\t\t\tCollections . sort ( currentRepresentationProtections , this ) ; \n\t\t\tAssertions . checkState ( currentRepresentationProtections . equals ( representationProtections ) ) ; \n\t\t\t} \n\t\t} \n\tcurrentRepresentationProtections = null ; \n\t} \n"}, {"code": "$F52843 ( packed , map , i , j , count , value ) "}, {"code": "public static ModuleVersion valueOf ( String string ) $F4915 ( parseVersion , string ) "}, {"code": "static void checkTypeRefAndPath ( int typeRef , TypePath typePath ) { \n\tint mask = NUM00 ; \n\tswitch $F14870 ( typeRef ) { \n\t\tcase TypeReference . CLASS_TYPE_PARAMETER : case TypeReference . METHOD_TYPE_PARAMETER : case TypeReference . METHOD_FORMAL_PARAMETER : mask = NUM00 ; \n\t\t$F597 case TypeReference . FIELD : case TypeReference . METHOD_RETURN : case TypeReference . METHOD_RECEIVER : case TypeReference . LOCAL_VARIABLE : case TypeReference . RESOURCE_VARIABLE : case TypeReference . INSTANCEOF : case TypeReference . NEW : case TypeReference . CONSTRUCTOR_REFERENCE : case TypeReference . METHOD_REFERENCE : mask = NUM00 ; \n\t\t$F597 case TypeReference . CLASS_EXTENDS : case TypeReference . CLASS_TYPE_PARAMETER_BOUND : case TypeReference . METHOD_TYPE_PARAMETER_BOUND : case TypeReference . THROWS : case TypeReference . EXCEPTION_PARAMETER : mask = NUM00 ; \n\t\t$F597 case TypeReference . CAST : case TypeReference . CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT : case TypeReference . METHOD_INVOCATION_TYPE_ARGUMENT : case TypeReference . CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT : case TypeReference . METHOD_REFERENCE_TYPE_ARGUMENT : mask = NUM00 ; \n\t\t$F597 $F1267 throw new IllegalArgumentException ( NUM00 + Integer . toHexString ( typeRef > > > NUM00 ) ) ; \n\t\t} \n\tif ( ( typeRef & ~ mask ) != NUM00 ) { \n\t\tthrow new IllegalArgumentException $F184522 ( Integer , typeRef ) ; \n\t\t} \n\tif ( typePath != null ) { \n\t\tfor ( $F184528 ( i , typePath ) ) { \n\t\t\tint step = typePath . getStep ( i ) ; \n\t\t\tif ( step != TypePath . ARRAY_ELEMENT && step != TypePath . INNER_TYPE && step != TypePath . TYPE_ARGUMENT && step != TypePath . WILDCARD_BOUND ) $F20855 ( i , typePath ) if ( step != TypePath . TYPE_ARGUMENT && typePath . getStepArgument ( i ) != NUM00 ) $F20855 ( i , typePath ) } \n\t\t} \n\t} \n"}, {"code": "$F1 public boolean equals ( Object otherObj ) { \n\tif ( otherObj instanceof P2Model ) { \n\t\treturn content . equals ( ( ( P2Model ) otherObj ) . content ) ; \n\t\t} \n\telse { \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public boolean showIcons $F72 { \n\treturn preferences . getBoolean ( resources . getString ( R . string . key_show_icons ) , Boolean . parseBoolean ( resources . getString ( R . string . default_show_icons ) ) ) ; \n\t} \n"}, {"code": "$F173551 ( sourceList , value , _BOOL ) "}, {"code": "private boolean checkForKey $F72 throws Exception { \n\tString query = m_query ; \n\t$F2899 ( query ) if $F14943 ( query ) { \n\t\treturn _BOOL ; \n\t\t} \n\t$F725 ( m_orderBy ) if ( $F192001 ( m_DataBaseConnection ) ) { \n\t\tm_DataBaseConnection . connectToDatabase ( ) ; \n\t\t} \n\t$F9236 ( dmd , m_DataBaseConnection ) String table = endOfQuery ( _BOOL ) ; \n\tResultSet rs = dmd . getPrimaryKeys ( null , null , table ) ; \n\twhile $F1682 ( rs ) { \n\t\tm_orderBy . add ( rs . getString ( NUM00 ) ) ; \n\t\t} \n\t$F59 ( rs ) if $F6887 ( m_orderBy ) { \n\t\treturn _BOOL ; \n\t\t} \n\trs = dmd . getBestRowIdentifier ( null , null , table , DatabaseMetaData . bestRowSession , _BOOL ) ; \n\t$F19097 ( rmd , rs ) int help = NUM00 ; \n\twhile $F1682 ( rs ) { \n\t\tm_orderBy . add ( rs . getString ( NUM00 ) ) ; \n\t\thelp ++ ; \n\t\t} \n\t$F59 ( rs ) if ( help == rmd . getColumnCount ( ) ) $F9096 ( m_orderBy ) if $F6887 ( m_orderBy ) { \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public IgniteStripedThreadPoolExecutor $F103468 ( concurrentLvl , gridName , threadNamePrefix ) { \n\texecs = new ExecutorService [ concurrentLvl ] ; \n\tThreadFactory factory = new IgniteThreadFactory ( gridName , threadNamePrefix ) ; \n\tfor ( $F119 ( i , concurrentLvl ) ) execs [ i ] = Executors . newSingleThreadExecutor ( factory ) ; \n\t} \n"}, {"code": "public static boolean isZip ( BufferedInputStream in ) { \n\t$F46282 ( in ) $F12496 ( b ) $F12496 ( zipSig ) zipSig [ NUM00 ] = NUM00 ; \n\tzipSig [ NUM00 ] = NUM00 ; \n\tzipSig [ NUM00 ] = NUM00 ; \n\tzipSig [ NUM00 ] = NUM00 ; \n\ttry { \n\t\t$F3259 ( in , b ) ; \n\t\t} \n\t$F270358 ( ex ) try $F8030 ( in ) $F270358 ( ex ) return Arrays . equals ( b , zipSig ) ; \n\t} \n"}, {"code": "public $F3803 extract ( Configuration config ) { \n\t$F10144 ( features ) for ( Extractor fe : extractors ) { \n\t\tfeatures . add ( fe . extract ( config ) ) ; \n\t\t} \n\treturn features ; \n\t} \n"}, {"code": "public String toString $F72 { \n\t$F280 ( path ) $F19006 ( absolute , path ) for ( $F2277 ( i , elements ) ) { \n\t\t$F96530 ( i , path ) $F89 ( path , elements , i ) } \n\t$F92 ( path ) } \n"}, {"code": "public void handleTblDataActionHrefRequest ( RequestInvocationEvent event ) { \n\tAgentsModel model = ( AgentsModel ) getModel ( ) ; \n\tString agentType = getDisplayIDType ( ) ; \n\tString universalId = hexToString ( ( String ) getDisplayFieldValue ( TBL_DATA_ACTION_HREF ) ) ; \n\tsetPageSessionAttribute ( AgentProfileViewBean . UNIVERSAL_ID , universalId ) ; \n\tSSOToken ssoToken = model . getUserSSOToken ( ) ; \n\tString realm = ( String ) getPageSessionAttribute ( AMAdminConstants . CURRENT_REALM ) ; \n\t$F17727 ( st , universalId ) $F89223 ( st ) $F8095 ( agentName , st ) try { \n\t\tAMIdentity amid = new AMIdentity ( ssoToken , agentName , IdType . AGENTONLY , realm , null ) ; \n\t\tif ( agentType . equals ( AgentsViewBean . AGENT_WEB ) || ( agentType . equals ( AgentsViewBean . DEFAULT_ID_TYPE ) ) ) { \n\t\t\tif ( isPropertiesLocallyStored ( amid ) ) { \n\t\t\t\tsetPageSessionAttribute ( LOCAL_OR_NOT , PROP_LOCAL ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tsetPageSessionAttribute ( LOCAL_OR_NOT , PROP_CENTRAL ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tClass clazz = getAgentCustomizedViewBean ( model . getAgentType ( amid ) ) ; \n\t\tAMViewBeanBase vb = ( AMViewBeanBase ) getViewBean ( clazz ) ; \n\t\tsetPageSessionAttribute ( PG_SESSION_SUPERCEDE_AGENT_TYPE , model . getAgentType ( amid ) ) ; \n\t\tremovePageSessionAttribute ( GenericAgentProfileViewBean . PS_TABNAME ) ; \n\t\tpassPgSessionMap ( vb ) ; \n\t\t$F50333 ( vb , getRequestContext ) } \n\tcatch ( IdRepoException e ) { \n\t\tsetInlineAlertMessage ( CCAlert . TYPE_ERROR , NUM00 , model . getErrorString ( e ) ) ; \n\t\tforwardTo ( ) ; \n\t\t} \n\tcatch ( SSOException e ) { \n\t\tsetInlineAlertMessage ( CCAlert . TYPE_ERROR , NUM00 , model . getErrorString ( e ) ) ; \n\t\tforwardTo ( ) ; \n\t\t} \n\tcatch ( AMConsoleException e ) { \n\t\tsetInlineAlertMessage ( CCAlert . TYPE_ERROR , NUM00 , model . getErrorString ( e ) ) ; \n\t\tforwardTo ( ) ; \n\t\t} \n\tcatch ( ClassNotFoundException e ) { \n\t\tsetInlineAlertMessage ( CCAlert . TYPE_ERROR , NUM00 , model . getErrorString ( e ) ) ; \n\t\tforwardTo ( ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 protected boolean check ( File item ) $F2949 ( item ) "}, {"code": "public PropertyValueEditor ( ConsoleApplication app , ManagementContext context ) $F20755 ( this , app , context ) "}, {"code": "$F1 public void toData ( DataOutput out ) throws IOException { \n\tout . writeInt ( maxInactiveInterval ) ; \n\tout . writeLong ( lastAccessedTime ) ; \n\tsynchronized ( attributes ) { \n\t\t$F27636 ( out , attributes ) for ( $F150315 ( entry , attributes ) ) { \n\t\t\tDeltaEvent delta = new DeltaEvent ( _BOOL , entry . getKey ( ) , entry . getValue ( ) ) ; \n\t\t\tDataSerializer . writeObject ( delta , out ) ; \n\t\t\t} \n\t\t} \n\tout . writeUTF ( jvmOwnerId ) ; \n\t} \n"}, {"code": "public void createVictoryConditions $F72 { \n\tvictory = vf . createVictory ( NUM00 ) ; \n\t} \n"}, {"code": "public static IStatus validateQualifiedModuleName ( String qualifiedName ) { \n\tString pckg = Signature . getQualifier ( qualifiedName ) ; \n\tif ( ! Util . isValidPackageName ( pckg ) ) { \n\t\treturn Util . newErrorStatus ( NUM00 ) ; \n\t\t} \n\treturn validateSimpleModuleName ( Signature . getSimpleName ( qualifiedName ) ) ; \n\t} \n"}, {"code": "public static < T1 , T2 > Map < T1 , T2 > synchronizedMap $F72 { \n\treturn Collections . synchronizedMap ( new HashMap < T1 , T2 > $F72 ) ; \n\t} \n"}, {"code": "private final int filterStatusBytes ( $F96 src , $F96 dest , int totalBytesRead , int maxPacketSize ) { \n\tfinal int packetsCount = totalBytesRead / maxPacketSize + ( totalBytesRead % maxPacketSize == NUM00 ? NUM00 : NUM00 ) ; \n\tfor ( $F1316 ( packetIdx , packetsCount ) ) { \n\t\tfinal int count = $F126005 ( packetIdx , packetsCount ) ? ( totalBytesRead % maxPacketSize ) - MODEM_STATUS_HEADER_LENGTH : maxPacketSize - MODEM_STATUS_HEADER_LENGTH ; \n\t\tif ( count > NUM00 ) { \n\t\t\tSystem . arraycopy ( src , packetIdx * maxPacketSize + MODEM_STATUS_HEADER_LENGTH , dest , packetIdx * ( maxPacketSize - MODEM_STATUS_HEADER_LENGTH ) , count ) ; \n\t\t\t} \n\t\t} \n\treturn totalBytesRead - ( packetsCount * NUM00 ) ; \n\t} \n"}, {"code": "public boolean contains ( String key ) $F298 ( mSharedPreferences , key ) "}, {"code": "int registerMiss $F72 $F208283 ( misses ) "}, {"code": "$F30789 ( d , imageView , getImageView , viewWidth , viewHeight , drawableWidth , drawableHeight , mBaseMatrix , widthScale , heightScale , mScaleType , ScaleType , scale , Math , mTempSrc , mTempDst , FIT_CENTER , ScaleToFit , FIT_START , FIT_END , FIT_XY , resetMatrix ) "}, {"code": "public static CharSequence partialEscape ( CharSequence s ) { \n\t$F83 ( sb ) for ( $F1088 ( i , s ) ) { \n\t\t$F1280 ( c , s , i ) if ( c == NUM00 || c == NUM00 || c == NUM00 || c == NUM00 || c == NUM00 || c == NUM00 || c == NUM00 || c == NUM00 || c == NUM00 || c == NUM00 || c == NUM00 || c == NUM00 || c == NUM00 || c == NUM00 ) $F86 ( sb ) sb . append ( c ) ; \n\t\t} \n\treturn sb ; \n\t} \n"}, {"code": "public void finished ( long work , long latency ) { \n\tfinishedUpdater . getAndIncrement ( this ) ; \n\ttotalWorkUpdater . getAndAdd ( this , work ) ; \n\ttotalWorkSquaredUpdater . getAndAdd ( this , work * work ) ; \n\ttotalLatencyUpdater . getAndAdd ( this , latency ) ; \n\ttotalLatencySquaredUpdater . getAndAdd ( this , latency * latency ) ; \n\t} \n"}, {"code": "public void close $F72 throws IOException { \n\tif ( mInputStream != null ) $F881 ( mInputStream ) else $F14525 mInputStream = null ; \n\t} \n"}, {"code": "private WindowsSecurityDescriptor $F72 { \n\tthis . sidList = null ; \n\tthis . aclBuffer = null ; \n\tthis . sdBuffer = null ; \n\t} \n"}, {"code": "public void printUsage ( OutputStream os ) { \n\tint count = NUM00 ; \n\tPrintStream out = UTF8 . printStream ( os ) ; \n\tfor ( String option : optionList ) { \n\t\tif $F1710 ( optionGroups , count ) { \n\t\t\tout . println ( NUM00 + optionGroups . get ( count ) ) ; \n\t\t\t} \n\t\tcount ++ ; \n\t\t$F36399 ( unlistedOptions , option ) $F21384 ( out ) $F83 ( buf ) buf . append ( option ) ; \n\t\tif $F26935 ( optionExtraPartSynopsisMap , option ) { \n\t\t\t$F1729 ( optionExtraPartSynopsis , optionExtraPartSynopsisMap , option ) $F84 ( buf ) buf . append ( optionExtraPartSynopsis ) ; \n\t\t\t$F84 ( buf ) } \n\t\tif $F105 ( requiresArgumentSet , option ) { \n\t\t\t$F84 ( buf ) $F89 ( buf , argumentDescriptionMap , option ) $F84 ( buf ) } \n\t\tprintField ( out , buf . toString ( ) , maxWidth + NUM00 ) ; \n\t\tout . println ( optionDescriptionMap . get ( option ) ) ; \n\t\t} \n\t$F1206 ( out ) } \n"}, {"code": "public void clearSharedVariables $F72 $F13478 ( sharedVariables , loadBuiltInSharedVariables ) "}, {"code": "public void remove ( Video video ) $F15777 ( videoList , video , notifyDataSetChanged ) "}, {"code": "public final void sendPacket ( LsServerPacket bp ) { \n\tsynchronized ( guard ) { \n\t\t$F84963 ( isWriteDisabled ) $F586 ( log , bp ) sendMsgQueue . addLast ( bp ) ; \n\t\tenableWriteInterest ( ) ; \n\t\t} \n\t} \n"}, {"code": "private static $F529 processSection ( String section , Collection < $F529 > hosts , $F2100 ( dflts ) , $F2100 ( props ) ) throws IgniteCheckedException { \n\tif ( section == null || props == null ) $F1274 if $F8397 ( DFLT_SECTION , section ) { \n\t\tif ( dflts != null ) throw new IgniteCheckedException ( NUM00 + DFLT_SECTION + NUM00 ) ; \n\t\treturn props ; \n\t\t} \n\telse { \n\t\thosts . add ( props ) ; \n\t\t$F1274 } \n\t} \n"}, {"code": "public boolean isSet ( final OPTION option ) { \n\treturn options == null ? _BOOL : options . contains ( option ) ; \n\t} \n"}, {"code": "public void handleButton1Request ( RequestInvocationEvent event ) throws ModelControlException { \n\tList optionData = restoreOptionsData ( ) ; \n\tCCCheckBox cbForceResetPwd = ( CCCheckBox ) getChild ( CB_FORCE_RESET_PWD ) ; \n\tboolean forceResetPwd = cbForceResetPwd . isChecked ( ) ; \n\tUMUserPasswordResetOptionsModel model = ( UMUserPasswordResetOptionsModel ) getModel ( ) ; \n\tString userId = ( String ) getPageSessionAttribute ( EntityEditViewBean . UNIVERSAL_ID ) ; \n\ttry { \n\t\tmodel . modifyUserOption ( optionData , userId , forceResetPwd ) ; \n\t\tsetInlineAlertMessage ( CCAlert . TYPE_INFO , NUM00 , model . getLocalizedString ( NUM00 ) ) ; \n\t\t} \n\t$F50339 ( setInlineAlertMessage , CCAlert , e ) forwardTo ( ) ; \n\t} \n"}, {"code": "NumberStrategy ( final int field ) $F6988 ( this , field ) "}, {"code": "$F1 public $F987 listOptions $F72 { \n\t$F994 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F9007 ( newVector ) $F9010 ( newVector , Collections , super ) $F1007 ( newVector ) } \n"}, {"code": "$F1 public boolean queueRequest ( Operation op ) { \n\tAuthorizationContext ctx = op . getAuthorizationContext ( ) ; \n\tif ( ctx == null ) { \n\t\top . fail ( new IllegalArgumentException $F580 ) ; \n\t\treturn _BOOL ; \n\t\t} \n\tClaims claims = ctx . getClaims ( ) ; \n\tif ( claims == null ) { \n\t\top . fail ( new IllegalArgumentException $F580 ) ; \n\t\treturn _BOOL ; \n\t\t} \n\tString subject = claims . getSubject ( ) ; \n\tif ( subject == null ) { \n\t\top . fail ( new IllegalArgumentException $F580 ) ; \n\t\treturn _BOOL ; \n\t\t} \n\tif ( op . hasPragmaDirective ( Operation . PRAGMA_DIRECTIVE_CLEAR_AUTH_CACHE ) ) $F8587 ( handleCacheClearRequest , op , subject ) if ( subject . equals ( SystemUserService . SELF_LINK ) ) { \n\t\t$F168274 ( op ) return _BOOL ; \n\t\t} \n\tif ( ctx . getResourceQueryFilter ( op . getAction ( ) ) != null ) { \n\t\t$F168274 ( op ) return _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public SpannableStringBuilder ( CharSequence text ) $F109834 ( this , text ) "}, {"code": "public boolean hasExtraFields ( PdxType other ) { \n\tfor ( PdxField ft : this . fields ) { \n\t\tif ( ! ft . isDeleted ( ) && other . getPdxField ( ft . getFieldName ( ) ) == null ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void put ( String id , String str ) { \n\ttab . put ( id , str ) ; \n\tif $F8991 ( str ) { \n\t\tint i = $F23703 ( str , File ) ; \n\t\tif ( i >= NUM00 ) { \n\t\t\ttab . put ( str . substring ( i + NUM00 , $F1092 ( str ) ) , str ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void assertReadVarint $F31474 ( data , value ) throws Exception { \n\t$F2237 ( input , CodedInputStream , data ) assertEquals ( ( int ) value , input . readRawVarint32 ( ) ) ; \n\tassertDataConsumed ( data , input ) ; \n\tinput = CodedInputStream . newInstance ( data ) ; \n\tassertEquals ( value , input . readRawVarint64 ( ) ) ; \n\tassertDataConsumed ( data , input ) ; \n\tinput = CodedInputStream . newInstance ( data ) ; \n\tassertEquals ( value , input . readRawVarint64SlowPath ( ) ) ; \n\tassertDataConsumed ( data , input ) ; \n\tinput = CodedInputStream . newInstance ( data ) ; \n\tassertTrue ( input . skipField ( WireFormat . WIRETYPE_VARINT ) ) ; \n\tassertDataConsumed ( data , input ) ; \n\tfor ( $F31477 ( blockSize ) ) { \n\t\tinput = CodedInputStream . newInstance ( new SmallBlockInputStream ( data , blockSize ) ) ; \n\t\tassertEquals ( ( int ) value , input . readRawVarint32 ( ) ) ; \n\t\tassertDataConsumed ( data , input ) ; \n\t\tinput = CodedInputStream . newInstance ( new SmallBlockInputStream ( data , blockSize ) ) ; \n\t\tassertEquals ( value , input . readRawVarint64 ( ) ) ; \n\t\tassertDataConsumed ( data , input ) ; \n\t\tinput = CodedInputStream . newInstance ( new SmallBlockInputStream ( data , blockSize ) ) ; \n\t\tassertEquals ( value , input . readRawVarint64SlowPath ( ) ) ; \n\t\tassertDataConsumed ( data , input ) ; \n\t\tinput = CodedInputStream . newInstance ( new SmallBlockInputStream ( data , blockSize ) ) ; \n\t\tassertTrue ( input . skipField ( WireFormat . WIRETYPE_VARINT ) ) ; \n\t\tassertDataConsumed ( data , input ) ; \n\t\t} \n\t$F64222 ( longerData , data ) $F7057 ( System , data , longerData ) InputStream rawInput = new ByteArrayInputStream ( longerData ) ; \n\tassertEquals ( ( int ) value , CodedInputStream . readRawVarint32 ( rawInput ) ) ; \n\tassertEquals ( NUM00 , rawInput . available ( ) ) ; \n\t} \n"}, {"code": "public void reportOccurences ( List < Map < Id < Vehicle > , Integer > > maps ) { \n\tfor ( $F2277 ( m , maps ) ) { \n\t\tMap < Id < Vehicle > , Integer > theMap = maps . get ( m ) ; \n\t\tlog . info ( $F37978 ( m ) + theMap . size ( ) + NUM00 ) ; \n\t\tInteger min = Integer . MAX_VALUE ; \n\t\tInteger max = Integer . MIN_VALUE ; \n\t\tfor ( Id < Vehicle > id : theMap . keySet ( ) ) { \n\t\t\tmin = Math . min ( min , theMap . get ( id ) ) ; \n\t\t\tmax = Math . max ( max , theMap . get ( id ) ) ; \n\t\t\t} \n\t\t$F21448 ( log , min , max ) List < $F147537 > $F204 ( histList ) ; \n\t\tMap < $F147537 , Integer > histMap = new HashMap < $F147537 , Integer > $F72 ; \n\t\tfor ( long h = min ; \n\t\th <= max ; \n\t\th ++ ) { \n\t\t\t$F147537 id = Id . create ( h , Link . class ) ; \n\t\t\thistList . add ( id ) ; \n\t\t\thistMap . put ( id , $F13791 ) ; \n\t\t\t} \n\t\tfor ( Id < Vehicle > id : theMap . keySet ( ) ) { \n\t\t\t$F85651 ( value , theMap , id ) histMap . put ( Id . create ( value , Link . class ) , new Integer ( histMap . get ( Id . create ( value , Link . class ) ) + NUM00 ) ) ; \n\t\t\t} \n\t\tString s = NUM00 ; \n\t\tfor ( $F147537 id : histList ) { \n\t\t\ts += $F5528 ( id ) + histMap . get ( id ) + NUM00 ; \n\t\t\t} \n\t\t$F973 ( log ) $F556 ( log , s ) } \n\t} \n"}, {"code": "public static $F28584 refIds ( Collection < ? extends RelatedResourceRep > refs ) { \n\t$F114980 ( ids ) if ( refs != null ) { \n\t\tfor ( RelatedResourceRep ref : refs ) $F42097 ( ids , ref ) } \n\treturn ids ; \n\t} \n"}, {"code": "public static boolean hasTopCategory ( HttpServletRequest request , String categoryId , $F3803 pathElements ) { \n\tif ( CategoryWorker . isCategoryTop ( request , categoryId ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tString topCategoryId = CategoryWorker . getTopCategoryFromTrail ( request , pathElements ) ; \n\t$F20092 ( topCategoryId , _BOOL ) $F3803 trail = CategoryWorker . getTrail ( request ) ; \n\ttopCategoryId = CategoryWorker . getTopCategoryFromTrail ( request , trail ) ; \n\t$F1933 ( topCategoryId , _BOOL ) return _BOOL ; \n\t} \n"}, {"code": "$F1 public String append ( String path , InputStream is ) throws MalformedURLException , IOException , AuthenticationException { \n\tString resp = null ; \n\tensureValidToken ( ) ; \n\tString redirectUrl = null ; \n\tHttpURLConnection conn = authenticatedURL . openConnection ( new URL ( new URL ( httpfsUrl ) , MessageFormat . format ( NUM00 , path ) ) , token ) ; \n\t$F2407 ( conn ) conn . setInstanceFollowRedirects ( _BOOL ) ; \n\t$F2410 ( conn ) logger . info ( NUM00 + conn . getHeaderField ( NUM00 ) ) ; \n\tresp = result ( conn , _BOOL ) ; \n\tif ( conn . getResponseCode ( ) == NUM00 ) redirectUrl = conn . getHeaderField ( NUM00 ) ; \n\t$F8074 ( conn ) if ( redirectUrl != null ) { \n\t\tconn = authenticatedURL . openConnection ( new URL ( redirectUrl ) , token ) ; \n\t\t$F2407 ( conn ) conn . setDoOutput ( _BOOL ) ; \n\t\tconn . setDoInput ( _BOOL ) ; \n\t\tconn . setUseCaches ( _BOOL ) ; \n\t\t$F7965 ( conn ) final int _SIZE = is . available ( ) ; \n\t\tconn . setRequestProperty ( NUM00 , NUM00 + _SIZE ) ; \n\t\tconn . setFixedLengthStreamingMode ( _SIZE ) ; \n\t\t$F2410 ( conn ) $F147972 ( os , conn ) copy ( is , os ) ; \n\t\t$F59 ( is ) $F59 ( os ) resp = result ( conn , _BOOL ) ; \n\t\t$F8074 ( conn ) } \n\treturn resp ; \n\t} \n"}, {"code": "public static void cacheImgs ( String skinImgDir , $F46406 baseImageURLs ) { \n\tString skinDir = getSkinDir ( ) ; \n\tfor ( String img : baseImageURLs ) { \n\t\timg = img . replace ( NUM00 , skinDir + NUM00 ) ; \n\t\timg = img . replace ( NUM00 , skinDir + skinImgDir ) ; \n\t\tImage . prefetch ( img ) ; \n\t\t} \n\t} \n"}, {"code": "$F42603 ( path , WINDOWS_SEPARATOR , UNIX_SEPARATOR ) "}, {"code": "public void clearBuffer $F72 $F9096 ( buffer ) "}, {"code": "$F1 public final void perform ( IR ir ) { \n\tjava . util . HashMap < Register , Register > newMap = new java . util . HashMap < Register , Register > $F989 ; \n\tfor ( $F32409 be = ir . getBasicBlocks ( ) ; \n\tbe . hasMoreElements ( ) ; \n\t) { \n\t\t$F32413 ( bb , be ) for ( $F12039 ie = bb . forwardInstrEnumerator ( ) ; \n\t\tie . hasMoreElements ( ) ; \n\t\t) { \n\t\t\t$F12043 ( s , ie ) ; \n\t\t\t$F725 ( newMap ) if ( s . isPEI ( ) && s . operator ( ) != IR_PROLOGUE ) { \n\t\t\t\tif ( bb . hasApplicableExceptionalOut ( s ) || ! RegisterRestrictions . SCRATCH_IN_PEI ) { \n\t\t\t\t\tsplitAllLiveRanges ( s , newMap , ir , _BOOL ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tswitch ( s . getOpcode ( ) ) { \n\t\t\t\tcase MIR_LOWTABLESWITCH_opcode : { \n\t\t\t\t\tRegisterOperand rOp = MIR_LowTableSwitch . getIndex ( s ) ; \n\t\t\t\t\tRegisterOperand temp = findOrCreateTemp ( rOp , newMap , ir ) ; \n\t\t\t\t\tinsertMoveBefore ( temp , rOp . copyRO ( ) , s ) ; \n\t\t\t\t\trOp . setRegister ( temp . getRegister ( ) ) ; \n\t\t\t\t\t} \n\t\t\t\t$F597 } \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "protected void appendString ( final String text ) { \n\tfinal HTMLDocument doc = ( HTMLDocument ) textPane . getDocument ( ) ; \n\ttry { \n\t\tfinal Element root = doc . getParagraphElement ( NUM00 ) ; \n\t\tdoc . insertBeforeEnd ( root , text ) ; \n\t\t} \n\tcatch ( final BadLocationException e ) $F98543 ( logger , e ) catch ( final IOException e ) $F98543 ( logger , e ) } \n"}, {"code": "public void scaleToSamples ( int usrSamples ) { \n\tdouble ratio ; \n\tratio = ( double ) usrSamples / count ; \n\tcount = NUM00 ; \n\tfor ( int i = NUM00 ; \n\ti <= limits . length ; \n\t++ i ) { \n\t\tresults [ i ] = ( int ) Math . round ( results [ i ] * ratio ) ; \n\t\tcount += results [ i ] ; \n\t\t} \n\t} \n"}, {"code": "private void refreshSelected ( int offsetX ) { \n\tint offset = $F66964 ( offsetX , mMaxOverScrollDistance ) ; \n\tint tempIndex = Math . round ( offset / mIntervalDis ) ; \n\ttempIndex = clampSelectedIndex ( tempIndex ) ; \n\t$F19899 ( mSelectedIndex , tempIndex ) mSelectedIndex = tempIndex ; \n\tif ( null != onValueChangeListener ) { \n\t\tonValueChangeListener . onChange ( this , mSelectedIndex , Float . parseFloat ( format ( mSelectedIndex * mIntervalValue + mMinValue ) ) ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 $F1431 public void resetFrame $F72 { \n\tsynchronized ( lock ) { \n\t\tsysName . setText ( NUM00 + counter ++ ) ; \n\t\t} \n\tuserName . setText ( null ) ; \n\turl . setText ( null ) ; \n\tstream . setSelected ( _BOOL ) ; \n\tstream . setEnabled ( _BOOL ) ; \n\tloopStart . setValue ( Long . valueOf ( NUM00 ) ) ; \n\tloopEnd . setValue ( Long . valueOf ( NUM00 ) ) ; \n\tthis . newBuffer = _BOOL ; \n\t} \n"}, {"code": "public ExpectedRecords $F4203 repeatAll ( int times ) { \n\t$F98037 ( toAppend ) for ( $F119 ( i , times ) ) $F21926 ( toAppend , expectedRecords ) expectedRecords . addAll ( toAppend ) ; \n\treturn this ; \n\t} \n"}, {"code": "public void addAttributes ( Attributes atts ) throws SAXException { \n\t$F19322 ( nAtts , atts ) for ( $F119 ( i , nAtts ) ) { \n\t\tString uri = atts . getURI ( i ) ; \n\t\tif ( null == uri ) uri = NUM00 ; \n\t\taddAttributeAlways ( uri , atts . getLocalName ( i ) , atts . getQName ( i ) , atts . getType ( i ) , atts . getValue ( i ) , _BOOL ) ; \n\t\t} \n\t} \n"}, {"code": "protected static GeoPoint parseKmlCoord ( String input ) { \n\t$F1384 ( end1 , input ) $F50298 ( end2 , input , end1 ) try { \n\t\tif ( end2 == - NUM00 ) { \n\t\t\tdouble lon = Double . parseDouble ( input . substring ( NUM00 , end1 ) ) ; \n\t\t\tdouble lat = Double . parseDouble ( $F13885 ( input , end1 ) ) ; \n\t\t\treturn new GeoPoint ( lat , lon ) ; \n\t\t\t} \n\t\telse { \n\t\t\tdouble lon = Double . parseDouble ( input . substring ( NUM00 , end1 ) ) ; \n\t\t\tdouble lat = Double . parseDouble ( input . substring ( end1 + NUM00 , end2 ) ) ; \n\t\t\tdouble alt = Double . parseDouble ( $F13885 ( input , end2 ) ) ; \n\t\t\treturn new GeoPoint ( lat , lon , alt ) ; \n\t\t\t} \n\t\t} \n\t$F62108 catch ( IndexOutOfBoundsException e ) $F1337 } \n"}, {"code": "$F5466 public Calendar detectDate ( String input ) { \n\tcheckNotNull ( input ) ; \n\tTime . setTimeZone ( getTimeZone ( ) ) ; \n\tOptions opt = new com . sk89q . jchronic . Options $F72 ; \n\topt . setNow ( Calendar . getInstance ( getTimeZone ( ) ) ) ; \n\tSpan date = Chronic . parse ( input , opt ) ; \n\tif ( date == null ) $F1337 else { \n\t\treturn date . getBeginCalendar ( ) ; \n\t\t} \n\t} \n"}, {"code": "public synchronized void saveCommitPoint ( Long indexCommitGen ) { \n\t$F101373 ( reserveCount , savedCommits , indexCommitGen ) if ( reserveCount == null ) $F72840 ( reserveCount ) ; \n\t$F5224 ( reserveCount ) savedCommits . put ( indexCommitGen , reserveCount ) ; \n\t} \n"}, {"code": "public void removeSearchable ( SearchResult searchable ) { \n\tif $F105 ( searchables , searchable ) searchables . remove ( search ) ; \n\t} \n"}, {"code": "public static boolean is64bit $F72 { \n\tboolean is64bit = _BOOL ; \n\tif ( isWindows ( ) ) { \n\t\tis64bit = ( System . getenv ( NUM00 ) != null ) ; \n\t\t} \n\telse { \n\t\tis64bit = $F3578 ( OS_ARCH ) ; \n\t\t} \n\treturn is64bit ; \n\t} \n"}, {"code": "private int resolveSizeAndStateRespectingMinSize $F14337 ( minSize , measuredSize , measureSpec ) { \n\tif ( minSize != SIZE_UNSPECIFIED ) { \n\t\t$F211129 ( desiredWidth , Math , minSize , measuredSize ) return resolveSizeAndState ( desiredWidth , measureSpec , NUM00 ) ; \n\t\t} \n\telse { \n\t\treturn measuredSize ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void onSongUpdate ( ProviderIdentifier provider , final Song s ) throws RemoteException { \n\tif ( s == null ) { \n\t\tLog . w ( TAG , NUM00 + provider . mName + NUM00 ) ; \n\t\t$F665 } \n\ttry { \n\t\tSong cached = mCache . getSong ( s . getRef ( ) ) ; \n\t\tboolean wasLoaded = _BOOL ; \n\t\tboolean changed = _BOOL ; \n\t\tif ( cached == null ) { \n\t\t\tmCache . putSong ( provider , s ) ; \n\t\t\tchanged = _BOOL ; \n\t\t\tcached = s ; \n\t\t\t} \n\t\telse { \n\t\t\twasLoaded = cached . isLoaded ( ) ; \n\t\t\tif ( s . isLoaded ( ) && ! cached . isIdentical ( s ) ) { \n\t\t\t\tcached . setAlbum ( s . getAlbum ( ) ) ; \n\t\t\t\tcached . setArtist ( s . getArtist ( ) ) ; \n\t\t\t\tcached . setSourceLogo ( s . getLogo ( ) ) ; \n\t\t\t\tcached . setDuration ( s . getDuration ( ) ) ; \n\t\t\t\tcached . setTitle ( s . getTitle ( ) ) ; \n\t\t\t\tcached . setYear ( s . getYear ( ) ) ; \n\t\t\t\tcached . setOfflineStatus ( s . getOfflineStatus ( ) ) ; \n\t\t\t\tcached . setAvailable ( s . isAvailable ( ) ) ; \n\t\t\t\tcached . setIsLoaded ( s . isLoaded ( ) ) ; \n\t\t\t\tchanged = _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( ! wasLoaded && cached . isLoaded ( ) ) { \n\t\t\tArtist artist = mCache . getArtist ( s . getArtist ( ) ) ; \n\t\t\tif ( artist == null && s . getArtist ( ) != null ) { \n\t\t\t\tartist = retrieveArtist ( s . getArtist ( ) , provider ) ; \n\t\t\t\t} \n\t\t\tif ( artist != null ) { \n\t\t\t\tAlbum album = mCache . getAlbum ( s . getAlbum ( ) ) ; \n\t\t\t\tif ( album == null && s . getAlbum ( ) != null ) { \n\t\t\t\t\talbum = retrieveAlbum ( s . getAlbum ( ) , provider ) ; \n\t\t\t\t\t} \n\t\t\t\tif ( album != null ) { \n\t\t\t\t\tartist . addAlbum ( album . getRef ( ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t$F72524 ( changed , postSongForUpdate , cached ) } \n\t$F102303 ( Log , TAG , e ) } \n"}, {"code": "public static boolean deleteDirectoryAndContents ( File rootDirectory ) { \n\tif ( ( rootDirectory == null ) || $F4925 ( rootDirectory ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\ttry { \n\t\t$F1894 ( directoryContents , rootDirectory ) for ( $F1139 ( i , directoryContents ) ) { \n\t\t\tboolean success = deleteDirectoryAndContents ( $F170886 ( rootDirectory , directoryContents , i ) ) ; \n\t\t\t$F42316 ( success , _BOOL ) } \n\t\t$F16252 ( rootDirectory ) } \n\tcatch ( Exception e ) { \n\t\t$F246959 ( logger , e , System , StackTrace ) return _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public static void nanosleep ( long nanos ) throws InterruptedException { \n\t$F2758 ( Thread ) $F36109 ( nanos ) if ( nanos >= NUM00 ) { \n\t\tThread . sleep ( nanos / NUM00 , ( int ) ( nanos % NUM00 ) ) ; \n\t\t} \n\telse { \n\t\tif ( pureMode ) { \n\t\t\t$F5756 ( Thread ) } \n\t\telse { \n\t\t\t_nanosleep ( ( int ) nanos ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F6802 ( esd , connectionAllowed ) "}, {"code": "int pureLength $F72 { \n\treturn length - delimiter . length ( ) ; \n\t} \n"}, {"code": "protected void drawArrow $F159951 ( g , x1 , y1 , x2 , y2 ) { \n\tif ( x1 == x2 ) { \n\t\tif ( y1 < y2 ) { \n\t\t\tg . drawLine ( x2 , y2 , x2 + NUM00 , y2 - NUM00 ) ; \n\t\t\tg . drawLine ( x2 , y2 , x2 - NUM00 , y2 - NUM00 ) ; \n\t\t\t} \n\t\telse { \n\t\t\tg . drawLine ( x2 , y2 , x2 + NUM00 , y2 + NUM00 ) ; \n\t\t\tg . drawLine ( x2 , y2 , x2 - NUM00 , y2 + NUM00 ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tdouble hyp = NUM00 , base = NUM00 , perp = NUM00 , theta , beta ; \n\t\tint x3 = NUM00 , y3 = NUM00 ; \n\t\tif ( x2 < x1 ) { \n\t\t\tbase = x1 - x2 ; \n\t\t\thyp = $F127640 ( Math , x2 , x1 , y2 , y1 ) ; \n\t\t\ttheta = Math . acos ( base / hyp ) ; \n\t\t\t} \n\t\telse { \n\t\t\tbase = x1 - x2 ; \n\t\t\thyp = $F127640 ( Math , x2 , x1 , y2 , y1 ) ; \n\t\t\ttheta = Math . acos ( base / hyp ) ; \n\t\t\t} \n\t\tbeta = NUM00 * Math . PI / NUM00 ; \n\t\thyp = NUM00 ; \n\t\tbase = Math . cos ( theta - beta ) * hyp ; \n\t\tperp = Math . sin ( theta - beta ) * hyp ; \n\t\tx3 = $F66964 ( x2 , base ) ; \n\t\tif ( y1 < y2 ) { \n\t\t\t$F443511 ( y3 , y2 , perp ) } \n\t\telse { \n\t\t\ty3 = $F66964 ( y2 , perp ) ; \n\t\t\t} \n\t\tg . drawLine ( x2 , y2 , x3 , y3 ) ; \n\t\tbase = Math . cos ( theta + beta ) * hyp ; \n\t\tperp = Math . sin ( theta + beta ) * hyp ; \n\t\tx3 = $F66964 ( x2 , base ) ; \n\t\tif ( y1 < y2 ) { \n\t\t\t$F443511 ( y3 , y2 , perp ) } \n\t\telse { \n\t\t\ty3 = $F66964 ( y2 , perp ) ; \n\t\t\t} \n\t\tg . drawLine ( x2 , y2 , x3 , y3 ) ; \n\t\t} \n\t} \n"}, {"code": "private void addElements ( int value , int numberOfElements ) { \n\tif ( m_firstFree + numberOfElements < m_blocksize ) for ( $F119 ( i , numberOfElements ) ) $F52339 ( m_map0 , m_firstFree , value ) else { \n\t\tint index = m_firstFree > > > m_SHIFT ; \n\t\tint offset = m_firstFree & m_MASK ; \n\t\tm_firstFree += numberOfElements ; \n\t\twhile ( numberOfElements > NUM00 ) { \n\t\t\t$F166813 ( index , m_map , newsize , m_numblocks , newMap , System ) $F65714 ( block , m_map , index ) $F166816 ( block , m_map , index , m_blocksize ) int copied = ( m_blocksize - offset < numberOfElements ) ? m_blocksize - offset : numberOfElements ; \n\t\t\tnumberOfElements -= copied ; \n\t\t\twhile ( copied -- > NUM00 ) block [ offset ++ ] = value ; \n\t\t\t++ index ; \n\t\t\toffset = NUM00 ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel ) "}, {"code": "public static StringBuilder formatTo ( StringBuilder buf , $F1986 d , String sep ) { \n\t$F50085 ( d , buf ) $F50086 ( d , buf ) $F13031 ( buf , d ) for ( $F1139 ( i , d ) ) { \n\t\tbuf . append ( sep ) ; \n\t\t$F6939 ( buf , d , i ) } \n\treturn buf ; \n\t} \n"}, {"code": "$F1431 private static void mergeSort ( $F131 in , $F131 out , int start , int end , Comparator c ) { \n\tint len = end - start ; \n\tif ( len <= SIMPLE_LENGTH ) { \n\t\tfor ( $F2634 ( i , start , end ) ) { \n\t\t\tObject current = out [ i ] ; \n\t\t\tObject prev = out [ i - NUM00 ] ; \n\t\t\tif $F230914 ( c , prev , current ) { \n\t\t\t\tint j = i ; \n\t\t\t\tdo $F230915 ( out , j , prev ) while ( j > start && ( c . compare ( prev = out [ j - NUM00 ] , current ) > NUM00 ) ) ; \n\t\t\t\tout [ j ] = current ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F665 } \n\t$F41176 ( med , end , start ) mergeSort ( out , in , start , med , c ) ; \n\tmergeSort ( out , in , med , end , c ) ; \n\tif ( c . compare ( in [ med - NUM00 ] , in [ med ] ) <= NUM00 ) { \n\t\tSystem . arraycopy ( in , start , out , start , len ) ; \n\t\t$F665 } \n\tint r = med , i = start ; \n\tdo { \n\t\tObject fromVal = in [ start ] ; \n\t\tObject rVal = in [ r ] ; \n\t\tif $F150035 ( c , fromVal , rVal ) { \n\t\t\tint l_1 = find ( in , rVal , - NUM00 , start + NUM00 , med - NUM00 , c ) ; \n\t\t\tint toCopy = l_1 - start + NUM00 ; \n\t\t\tSystem . arraycopy ( in , start , out , i , toCopy ) ; \n\t\t\ti += toCopy ; \n\t\t\tout [ i ++ ] = rVal ; \n\t\t\tr ++ ; \n\t\t\tstart = l_1 + NUM00 ; \n\t\t\t} \n\t\telse { \n\t\t\tint r_1 = find ( in , fromVal , NUM00 , r + NUM00 , end - NUM00 , c ) ; \n\t\t\tint toCopy = r_1 - r + NUM00 ; \n\t\t\tSystem . arraycopy ( in , r , out , i , toCopy ) ; \n\t\t\ti += toCopy ; \n\t\t\tout [ i ++ ] = fromVal ; \n\t\t\tstart ++ ; \n\t\t\tr = r_1 + NUM00 ; \n\t\t\t} \n\t\t} \n\twhile ( ( end - r ) > NUM00 && ( med - start ) > NUM00 ) ; \n\tif ( ( end - r ) <= NUM00 ) { \n\t\t$F55840 ( System , in , start , out , i , med ) } \n\telse { \n\t\t$F55840 ( System , in , r , out , i , end ) } \n\t} \n"}, {"code": "private View fillFromLeft ( int nextLeft ) { \n\t$F16700 ( mFirstPosition , Math , mSelectedPosition ) $F72086 ( mFirstPosition , Math , mItemCount ) $F17370 ( mFirstPosition ) return fillRight ( mFirstPosition , nextLeft ) ; \n\t} \n"}, {"code": "public TomcatSlf4jLogbackFactoryAccessor ( ClassLoader cl ) throws ClassNotFoundException , IllegalAccessException , IllegalArgumentException , InvocationTargetException { \n\t$F198604 ( clazz , cl ) Method getSingleton = MethodUtils . getAccessibleMethod ( clazz , NUM00 , $F33934 ) ; \n\tObject singleton = getSingleton . invoke ( null ) ; \n\tMethod getLoggerFactory = MethodUtils . getAccessibleMethod ( clazz , NUM00 , $F33934 ) ; \n\tObject loggerFactory = getLoggerFactory . invoke ( singleton ) ; \n\t$F198604 ( loggerFactoryClass , cl ) if $F78643 ( loggerFactoryClass , loggerFactory ) $F11389 setTarget ( loggerFactory ) ; \n\t} \n"}, {"code": "public QuarterDateFormat ( TimeZone zone , $F806 quarterSymbols , boolean quarterFirst ) { \n\t$F19400 ( ParamChecks , zone ) this . calendar = new GregorianCalendar ( zone ) ; \n\tthis . quarters = quarterSymbols ; \n\tthis . quarterFirst = quarterFirst ; \n\tthis . numberFormat = NumberFormat . getNumberInstance ( ) ; \n\t} \n"}, {"code": "public long restart $F72 { \n\tlong start = _startTimeNanos ; \n\t$F101251 ( _startTimeNanos , System ) return _startTimeNanos - start ; \n\t} \n"}, {"code": "private static $F96 stringToByteArray ( String str ) { \n\t$F96 result = new byte [ $F1285 ( str ) ] ; \n\tfor ( $F1088 ( i , str ) ) $F31790 ( result , i , str ) result [ str . length ( ) ] = NUM00 ; \n\treturn result ; \n\t} \n"}, {"code": "$F1 public void actionPerformed ( ActionEvent e ) { \n\tObject o ; \n\to = e . getSource ( ) ; \n\tif ( o == menuFileOpen ) $F5795 ( loadFile ) else if ( o == menuFileSave ) $F5795 ( saveFile ) else if ( o == menuFileSaveAs ) $F5795 ( saveFileAs ) else if ( o == menuFileClose ) $F5795 ( closeFile ) else if ( o == menuFileCloseAll ) $F5795 ( closeAllFiles ) else if ( o == menuFileProperties ) $F5795 ( showProperties ) else if ( o == menuFileExit ) $F5795 ( close ) else if ( o == menuEditUndo ) $F5795 ( undo ) else if ( o == menuEditCopy ) $F5795 ( copyContent ) else if ( o == menuEditSearch ) $F5795 ( search ) else if ( o == menuEditClearSearch ) $F5795 ( clearSearch ) else if ( o == menuEditDeleteAttribute ) { \n\t\tdeleteAttribute ( _BOOL ) ; \n\t\t} \n\telse if ( o == menuEditDeleteAttributes ) { \n\t\tdeleteAttribute ( _BOOL ) ; \n\t\t} \n\telse if ( o == menuEditRenameAttribute ) $F5795 ( renameAttribute ) else if ( o == menuEditAttributeAsClass ) $F5795 ( attributeAsClass ) else if ( o == menuEditDeleteInstance ) { \n\t\tdeleteInstance ( _BOOL ) ; \n\t\t} \n\telse if ( o == menuEditDeleteInstances ) { \n\t\tdeleteInstance ( _BOOL ) ; \n\t\t} \n\telse if ( o == menuEditSortInstances ) $F5795 ( sortInstances ) else if ( o == menuViewAttributes ) $F5795 ( showAttributes ) else if ( o == menuViewValues ) $F5795 ( showValues ) else $F83461 ( o , menuViewOptimalColWidths , setOptimalColWidths ) updateMenu ( ) ; \n\t} \n"}, {"code": "public static boolean hasJoda $F72 { \n\ttry { \n\t\t$F32352 ( Class ) return _BOOL ; \n\t\t} \n\t$F17063 ( _BOOL ) } \n"}, {"code": "public RemoteServiceDescriptor ( String baseUrl , HttpJsonRequestFactory requestFactory ) throws IllegalArgumentException { \n\tthis . baseUrl = baseUrl ; \n\ttry { \n\t\t$F105456 ( baseUrlURL , baseUrl ) final String protocol = baseUrlURL . getProtocol ( ) ; \n\t\tif ( ! $F40270 ( protocol ) ) $F74022 ( String , baseUrl ) } \n\tcatch ( MalformedURLException e ) $F74022 ( String , baseUrl ) this . requestFactory = requestFactory ; \n\t} \n"}, {"code": "private int findActivityElement ( int activityIndex ) { \n\tfor ( $F2277 ( elementIndex , mActivityList ) ) { \n\t\tif ( mActivityList . get ( elementIndex ) . mActivityIndex == activityIndex ) { \n\t\t\treturn elementIndex ; \n\t\t\t} \n\t\t} \n\t$F150 } \n"}, {"code": "$F32569 ( panel , cols , rows , filler , filled_cell_11 , _BOOL , cc , Box , index ) "}, {"code": "public void mapVolumeToSDC ( String volumeId , String sdcId ) throws Exception { \n\t$F973 ( log ) String uri = ScaleIOConstants . getMapVolumeToSDCURI ( volumeId ) ; \n\tScaleIOMapVolumeToSDC mapParm = new ScaleIOMapVolumeToSDC $F72 ; \n\tmapParm . setSdcId ( sdcId ) ; \n\tmapParm . setAllowMultipleMappings ( NUM00 ) ; \n\tpost ( URI . create ( uri ) , getJsonForEntity ( mapParm ) ) ; \n\t} \n"}, {"code": "public void addObscuredRecipient ( String playerName ) $F6659 ( obscuredRecipients , playerName ) "}, {"code": "private static void replaceCollapsedByEclipseSourceRoots ( Element libElement , Library . ModifiableModel modifiableModel ) { \n\t$F806 srcUrlsFromClasspath = modifiableModel . getUrls ( OrderRootType . SOURCES ) ; \n\tLOG . assertTrue ( srcUrlsFromClasspath . length <= NUM00 ) ; \n\tfinal String eclipseUrl = srcUrlsFromClasspath . length > NUM00 ? srcUrlsFromClasspath [ NUM00 ] : null ; \n\tfor ( Element r : libElement . getChildren ( SRCROOT_ATTR ) ) { \n\t\tfinal String url = r . getAttributeValue ( NUM00 ) ; \n\t\tfinal String bindAttr = r . getAttributeValue ( SRCROOT_BIND_ATTR ) ; \n\t\tboolean notBind = bindAttr != null && ! Boolean . parseBoolean ( bindAttr ) ; \n\t\tif ( notBind ) { \n\t\t\tmodifiableModel . addRoot ( url , OrderRootType . SOURCES ) ; \n\t\t\t} \n\t\telse if ( eclipseUrl != null && areUrlsPointTheSame ( url , eclipseUrl ) && ! Comparing . strEqual ( url , eclipseUrl ) ) { \n\t\t\tmodifiableModel . addRoot ( url , OrderRootType . SOURCES ) ; \n\t\t\tif $F7301 ( srcUrlsFromClasspath ) { \n\t\t\t\tmodifiableModel . removeRoot ( eclipseUrl , OrderRootType . SOURCES ) ; \n\t\t\t\tsrcUrlsFromClasspath = null ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static $F96 hexToBytes ( String hexString ) { \n\t$F19710 ( result , hexString ) for ( $F9808 ( i , result ) ) { \n\t\tint offset = i * NUM00 ; \n\t\tresult [ i ] = ( byte ) $F138426 ( Integer , hexString , offset ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public void testSetBitNegativeOutside1 $F72 $F117925 ( aSign , number , aNumber , aBytes , result , rBytes , resBytes , i , assertTrue , assertEquals ) "}, {"code": "private static String replaceLast ( String str , char from , char to ) { \n\t$F162792 ( index , str , from ) $F101463 ( index , str ) return str . substring ( NUM00 , index ) + to + str . substring ( index + NUM00 ) ; \n\t} \n"}, {"code": "public static String valueOf ( long value ) $F23210 ( Long , value ) "}, {"code": "private static void cleanStaleInitiatorReferences ( ExportGroup exportGroup , DbClient dbClient ) { \n\tStringSet exportGroupInitiators = exportGroup . getInitiators ( ) ; \n\tif ( ! CollectionUtils . isEmpty ( exportGroupInitiators ) && ! CollectionUtils . isEmpty ( exportGroup . getExportMasks ( ) ) ) { \n\t\t$F13750 ( allMaskInitiators ) for ( String mask : exportGroup . getExportMasks ( ) ) { \n\t\t\tExportMask maskObj = dbClient . queryObject ( ExportMask . class , URI . create ( mask ) ) ; \n\t\t\tif ( maskObj != null && ! CollectionUtils . isEmpty ( maskObj . getInitiators ( ) ) ) { \n\t\t\t\tallMaskInitiators . addAll ( maskObj . getInitiators ( ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F2689 staleInitiators = Sets . difference ( exportGroupInitiators , allMaskInitiators ) ; \n\t\tif $F20899 ( CollectionUtils , staleInitiators ) { \n\t\t\tCollection < URI > staleInitiatorURIS = Collections2 . transform ( staleInitiators , CommonTransformerFunctions . FCTN_ <missing ';'> NUM00 <missing ';'> _TO_URI ) ; \n\t\t\texportGroup . removeInitiators ( $F7044 ( staleInitiatorURIS ) ) ; \n\t\t\t_log . info ( NUM00 , staleInitiatorURIS , exportGroup . getId ( ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static $F4203 T findResourceByName ( Iterable < HasMetadata > entities , $F20474 clazz , String name ) { \n\tif ( entities != null ) { \n\t\tfor ( HasMetadata entity : entities ) { \n\t\t\tif ( clazz . isInstance ( entity ) && Objects . equals ( name , getName ( entity ) ) ) { \n\t\t\t\t$F123138 ( clazz , entity ) } \n\t\t\t} \n\t\t} \n\t$F1274 } \n"}, {"code": "public static Map ordinalMap ( Iterator tuples , String field , Comparator cmp ) { \n\t$F131 o = ordinalArray ( tuples , field , cmp ) ; \n\t$F246343 ( map ) for ( $F9808 ( i , o ) ) map . put ( o [ i ] , new Integer ( i ) ) ; \n\treturn map ; \n\t} \n"}, {"code": "void addLineMonitor ( LineMonitor lm ) { \n\tif ( Printer . trace ) $F248936 ( Printer , lm ) synchronized ( lineMonitors ) { \n\t\tif $F358955 ( lineMonitors , lm ) { \n\t\t\tif ( Printer . trace ) $F1932 ( Printer ) $F665 } \n\t\tif ( Printer . debug ) $F586 ( Printer , lm ) lineMonitors . add ( lm ) ; \n\t\t} \n\t$F59357 ( this , notifyAll ) if ( Printer . debug ) $F25390 ( Printer , lineMonitors ) } \n"}, {"code": "public static String toChar ( byte b ) { \n\tif ( b >= NUM00 ) { \n\t\treturn Character . toString ( ( char ) b ) ; \n\t\t} \n\telse $F23891 ( String , b ) } \n"}, {"code": "public void addNodes ( NodeIterator iterator ) { \n\t$F132452 ( m_mutable , XSLMessages , XPATHErrorResources ) if ( null != iterator ) { \n\t\tNode obj ; \n\t\twhile ( null != $F161934 ( obj , iterator ) ) { \n\t\t\taddElement ( obj ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static double ptSegDist $F130908 ( x1 , y1 , x2 , y2 , px , py ) { \n\treturn Math . sqrt ( ptSegDistSq ( x1 , y1 , x2 , y2 , px , py ) ) ; \n\t} \n"}, {"code": "MethodType asSpreaderType ( $F6969 arrayType , int arrayLength ) { \n\tassert ( parameterCount ( ) >= arrayLength ) ; \n\tint spreadPos = ptypes . length - arrayLength ; \n\t$F116 ( arrayLength , this ) if ( arrayType == $F22453 ) { \n\t\tif ( isGeneric ( ) ) return this ; \n\t\tif ( spreadPos == NUM00 ) { \n\t\t\tMethodType res = genericMethodType ( arrayLength ) ; \n\t\t\tif ( rtype != $F12222 ) { \n\t\t\t\tres = res . changeReturnType ( rtype ) ; \n\t\t\t\t} \n\t\t\treturn res ; \n\t\t\t} \n\t\t} \n\t$F114155 ( elemType , arrayType ) $F83951 ( elemType ) for ( $F9958 ( i , spreadPos , ptypes ) ) { \n\t\tif ( ptypes [ i ] != elemType ) { \n\t\t\t$F18547 fixedPtypes = ptypes . clone ( ) ; \n\t\t\tArrays . fill ( fixedPtypes , i , ptypes . length , elemType ) ; \n\t\t\treturn methodType ( rtype , fixedPtypes ) ; \n\t\t\t} \n\t\t} \n\treturn this ; \n\t} \n"}, {"code": "public void put ( E e ) throws InterruptedException { \n\t$F61745 ( e ) int c = - NUM00 ; \n\t$F13430 node = $F201035 ( e ) ; \n\t$F677 ( putLock , this ) $F201031 ( count , this ) $F678 ( putLock ) try { \n\t\twhile $F33770 ( count , capacity ) $F24081 ( notFull ) enqueue ( node ) ; \n\t\t$F201038 ( c , count ) $F201039 ( c , capacity , notFull ) } \n\t$F796 ( putLock ) $F42886 ( c , signalNotEmpty ) } \n"}, {"code": "public static mxICell resolve ( mxICell root , String path ) { \n\tmxICell parent = root ; \n\t$F806 tokens = path . split ( Pattern . quote ( PATH_SEPARATOR ) ) ; \n\tfor ( $F1139 ( i , tokens ) ) { \n\t\tparent = parent . getChildAt ( Integer . parseInt ( tokens [ i ] ) ) ; \n\t\t} \n\treturn parent ; \n\t} \n"}, {"code": "private static int nextNonQuoteIndex $F123257 ( trimmed , i , forward ) { \n\twhile ( trimmed . charAt ( i ) == NUM00 || trimmed . charAt ( i ) == NUM00 || trimmed . charAt ( i ) == NUM00 || trimmed . charAt ( i ) == NUM00 || trimmed . charAt ( i ) == NUM00 || trimmed . charAt ( i ) == NUM00 || trimmed . charAt ( i ) == NUM00 || trimmed . charAt ( i ) == NUM00 ) { \n\t\tif ( forward ) i ++ ; \n\t\telse i -- ; \n\t\t} \n\treturn i ; \n\t} \n"}, {"code": "public static void reset $F72 { \n\t$F7042 ( traceState ) $F725 ( suspendedState ) } \n"}, {"code": "private String inclusiveSlice $F72 { \n\tif ( mark >= pos ) $F2455 return sign . substring ( mark , pos + NUM00 ) ; \n\t} \n"}, {"code": "public $F96 toBytecode $F72 throws IOException , CannotCompileException { \n\t$F1538 ( barray ) $F1533 ( out , barray ) try { \n\t\ttoBytecode ( out ) ; \n\t\t} \n\t$F3229 ( out ) $F11316 ( barray ) } \n"}, {"code": "public static void serializePath ( final ObjectOutput os , final PathIterator pi ) throws IOException { \n\tos . writeObject ( pi . getWindingRule ( ) ) ; \n\tfinal List < java . io . Serializable > list = new ArrayList < java . io . Serializable > $F72 ; \n\twhile $F38402 ( pi ) { \n\t\tfinal $F5415 array = $F12454 ; \n\t\tfinal int type = pi . currentSegment ( array ) ; \n\t\tlist . add ( type ) ; \n\t\tlist . add ( array ) ; \n\t\t$F24630 ( pi ) } \n\tos . writeObject ( list ) ; \n\t} \n"}, {"code": "public double calculateLocalSwapTotalCapacity ( int hostcount , int hostlocalswapsize ) { \n\tdouble d = ( double ) ( hostcount * hostlocalswapsize ) / NUM00 ; \n\td *= - NUM00 ; \n\td = ( double ) Math . round ( d * NUM00 ) / NUM00 ; \n\treturn d ; \n\t} \n"}, {"code": "boolean findMarker $F72 throws IOException { \n\tif ( markerIndex == marker . length ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif $F585 ( log ) log . debug ( $F36004 ( BytesUtil , marker ) + nreads ) ; \n\twhile ( markerIndex < marker . length ) { \n\t\tfinal int remtok = marker . length - markerIndex ; \n\t\tmarkerBB . limit ( remtok ) ; \n\t\t$F16709 ( markerBB ) $F117439 ( rdLen , client , markerBB ) if ( rdLen == - NUM00 ) { \n\t\t\t$F132377 ( nreads , bytesRead ) } \n\t\tnreads ++ ; \n\t\tbytesRead += rdLen ; \n\t\tfor ( $F119 ( i , rdLen ) ) { \n\t\t\tif ( markerBuffer [ i ] != marker [ markerIndex ] ) { \n\t\t\t\tif ( foundMarkerInInitialPosition ) { \n\t\t\t\t\tfoundMarkerInInitialPosition = _BOOL ; \n\t\t\t\t\t$F9464 ( log ) } \n\t\t\t\tmarkerIndex = NUM00 ; \n\t\t\t\tif ( markerBuffer [ i ] == marker [ markerIndex ] ) { \n\t\t\t\t\tmarkerIndex ++ ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse $F1097 ( markerIndex , nmarkerbytematches ) } \n\t\tif ( nreads % NUM00 == NUM00 ) { \n\t\t\tif $F585 ( log ) $F8922 ( log , nreads , bytesRead ) } \n\t\t} \n\tif ( markerIndex != marker . length ) { \n\t\t$F51622 ( log ) return _BOOL ; \n\t\t} \n\telse { \n\t\t$F50717 ( log , nreads , nmarkerbytematches ) return _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public void parseLoggcFile ( InputStream loggcFileStream , DefaultMutableTreeNode root ) { \n\t$F58550 ( bis , loggcFileStream ) $F6518 ( histograms ) try { \n\t\twhile ( bis . ready ( ) ) { \n\t\t\tbis . mark ( getMarkSize ( ) ) ; \n\t\t\t$F27015 ( nextLine , bis ) if $F3106 ( nextLine ) { \n\t\t\t\t$F2268 ( bis ) $F3761 ( histograms , parseNextClassHistogram , bis ) } \n\t\t\t} \n\t\tfor ( $F5373 ( i , histograms ) ) { \n\t\t\tDefaultMutableTreeNode dump = getNextDumpForHistogram ( root ) ; \n\t\t\tif ( dump != null ) { \n\t\t\t\taddHistogramToDump ( dump , ( HistogramTableModel ) histograms . get ( i ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F12241 ( ex ) } \n"}, {"code": "private void resolveTimeMacro ( StringBuffer result ) { \n\tCalendar $F13062 ( calendar ) ; \n\tresult . append ( $F21621 ( calendar , Calendar ) + NUM00 ) ; \n\tString month = $F21623 ( calendar , Calendar ) + NUM00 + NUM00 ; \n\tif $F3599 ( month ) $F21679 ( month ) $F86403 ( result , month ) String day = $F21625 ( calendar , Calendar ) + NUM00 ; \n\tif $F3599 ( day ) $F21679 ( day ) $F86403 ( result , day ) int amPm = calendar . get ( Calendar . AM_PM ) ; \n\tString amPmString = amPm == Calendar . AM ? NUM00 : NUM00 ; \n\t$F86403 ( result , amPmString ) String hour = calendar . get ( Calendar . HOUR ) + NUM00 ; \n\tif $F3599 ( hour ) $F21679 ( hour ) $F86403 ( result , hour ) String minute = $F21629 ( calendar , Calendar ) + NUM00 ; \n\tif $F3599 ( minute ) $F21679 ( minute ) $F86403 ( result , minute ) String second = $F21631 ( calendar , Calendar ) + NUM00 ; \n\tif $F3599 ( second ) $F21679 ( second ) result . append ( second ) ; \n\t} \n"}, {"code": "public boolean isEmpty $F72 { \n\tsynchronized ( lock ) $F18905 ( annotationsDrawOrder ) } \n"}, {"code": "default B append8bit ( $F1113 CharSequence cs , int start , int end ) throws IllegalArgumentException , BufferOverflowException , BufferUnderflowException , IndexOutOfBoundsException { \n\tif ( cs instanceof BytesStore ) { \n\t\treturn write ( ( BytesStore ) cs , ( long ) start , end ) ; \n\t\t} \n\tfor ( int i = start ; \n\ti < end ; \n\ti ++ ) { \n\t\t$F1280 ( c , cs , i ) if ( c > NUM00 ) c = NUM00 ; \n\t\twriteByte ( ( byte ) c ) ; \n\t\t} \n\treturn ( B ) this ; \n\t} \n"}, {"code": "static void zero ( $F101632 array ) { \n\tfor ( $F5415 aFloat : array ) { \n\t\t$F99493 ( Arrays , aFloat ) } \n\t} \n"}, {"code": "$F1 public boolean contains $F85239 ( p ) { \n\tRoundRectangle2D . Double r = ( RoundRectangle2D . Double ) roundrect . clone ( ) ; \n\tdouble grow = AttributeKeys . getPerpendicularHitGrowth ( this ) ; \n\tr . x -= grow ; \n\tr . y -= grow ; \n\tr . width += grow * NUM00 ; \n\tr . height += grow * NUM00 ; \n\tr . arcwidth += grow * NUM00 ; \n\tr . archeight += grow * NUM00 ; \n\t$F297 ( r , p ) } \n"}, {"code": "private void downloadUpdateProp ( final boolean initialDownload ) { \n\tif ( bootProp != null ) { \n\t\tserverFolder = bootProp . getProperty ( $F28500 ( ClientGameConfiguration ) ) + NUM00 ; \n\t\tString updatePropertiesFile = bootProp . getProperty ( NUM00 , serverFolder + NUM00 ) ; \n\t\tfinal HttpClient httpClient = new HttpClient ( updatePropertiesFile , initialDownload ) ; \n\t\tupdateProp = httpClient . fetchProperties ( ) ; \n\t\tif ( updateProp != null && updateProp . containsKey ( NUM00 ) ) $F932 } \n\tString updatePropertiesFile = ClientGameConfiguration . get ( NUM00 ) + NUM00 ; \n\tHttpClient httpClient = new HttpClient ( updatePropertiesFile , initialDownload ) ; \n\tupdateProp = httpClient . fetchProperties ( ) ; \n\tif ( updateProp != null && updateProp . containsKey ( NUM00 ) ) $F932 updatePropertiesFile = ClientGameConfiguration . get ( NUM00 ) + NUM00 ; \n\thttpClient = new HttpClient ( updatePropertiesFile , initialDownload ) ; \n\tupdateProp = httpClient . fetchProperties ( ) ; \n\t} \n"}, {"code": "private void mergeMethodHandleStore ( final int index , final MethodHandle methodHandle ) { \n\tlocalVariables . merge ( index , new MethodHandle ( methodHandle ) , null ) ; \n\t} \n"}, {"code": "public final int read ( $F68528 , int off , int len ) throws IOException $F48842 ( is , ba , off , len ) "}, {"code": "public ContextSuggestField ( String name , String value , int weight , CharSequence ... contexts ) { \n\tsuper ( name , value , weight ) ; \n\tvalidate ( value ) ; \n\tthis . contexts = new $F9623 ( ( contexts != null ) ? contexts . length : NUM00 ) ; \n\tif ( contexts != null ) { \n\t\tCollections . addAll ( this . contexts , contexts ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 protected $F96 decrypt $F154001 ( type , fragment , offset , len ) { \n\t$F96 data = decCipher . update ( fragment , offset , len ) ; \n\t$F96 content ; \n\tif ( block_size != NUM00 ) { \n\t\tint padding_length = $F154004 ( data ) ; \n\t\tfor ( $F119 ( i , padding_length ) ) { \n\t\t\tif ( ( $F154008 ( data , i ) & NUM00 ) != padding_length ) { \n\t\t\t\tthrow new AlertException ( AlertProtocol . DECRYPTION_FAILED , new SSLProtocolException $F580 ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tcontent = new byte [ data . length - hash_size - padding_length - NUM00 ] ; \n\t\t} \n\telse { \n\t\t$F154032 ( content , data , hash_size ) ; \n\t\t} \n\t$F96 mac_value ; \n\tmac_material_part [ NUM00 ] = type ; \n\tmac_material_part [ NUM00 ] = ( byte ) ( ( NUM00 & content . length ) > > NUM00 ) ; \n\tmac_material_part [ NUM00 ] = ( byte ) ( NUM00 & content . length ) ; \n\tmessageDigest . update ( mac_read_secret ) ; \n\tmessageDigest . update ( pad_1 ) ; \n\tmessageDigest . update ( read_seq_num ) ; \n\tmessageDigest . update ( mac_material_part ) ; \n\tmessageDigest . update ( data , NUM00 , content . length ) ; \n\t$F14611 ( mac_value , messageDigest ) messageDigest . update ( mac_read_secret ) ; \n\tmessageDigest . update ( pad_2 ) ; \n\tmessageDigest . update ( mac_value ) ; \n\t$F14611 ( mac_value , messageDigest ) if ( logger != null ) { \n\t\t$F8438 ( logger ) logger . print ( data ) ; \n\t\t$F8438 ( logger ) logger . print ( mac_value ) ; \n\t\t} \n\tfor ( $F119 ( i , hash_size ) ) { \n\t\tif ( mac_value [ i ] != data [ i + content . length ] ) { \n\t\t\tthrow new AlertException ( AlertProtocol . BAD_RECORD_MAC , new SSLProtocolException $F580 ) ; \n\t\t\t} \n\t\t} \n\t$F5634 ( System , data , content ) incSequenceNumber ( read_seq_num ) ; \n\treturn content ; \n\t} \n"}, {"code": "public Activity put ( String key , Activity activity ) { \n\treturn ( Activity ) m_map . put ( key , activity ) ; \n\t} \n"}, {"code": "public boolean isAbstract $F72 { \n\treturn Modifier . isAbstract ( getAccessFlags ( ) ) ; \n\t} \n"}, {"code": "$F25527 ( redundantOpCompactThreshold , redundantOpCount , lruEntries ) "}, {"code": "public void clearCurrentRequestTimedOut $F72 { \n\t$F10834 ( currentRequestTimedOut ) currentRequestTimedOut = null ; \n\t} \n"}, {"code": "protected void showPage ( int page ) { \n\tboolean isEmpty = page == PAGE_EMPTY ; \n\tControl control = isEmpty ? ( Control ) fEmptyPageLabel : getControl ( ) ; \n\tif ( isEmpty ) { \n\t\tsetContentDescription ( NUM00 ) ; \n\t\tclearViewer ( ) ; \n\t\t} \n\tfPagebook . showPage ( control ) ; \n\t} \n"}, {"code": "$F1 public boolean equals ( Object o ) { \n\tif ( this == o ) return _BOOL ; \n\t$F82512 ( o , getClass , _BOOL ) Insets insets = ( Insets ) o ; \n\t$F9906 ( bottom , insets , _BOOL ) $F9906 ( left , insets , _BOOL ) $F9906 ( right , insets , _BOOL ) $F9906 ( top , insets , _BOOL ) return _BOOL ; \n\t} \n"}, {"code": "public void removeDocuments ( List < Query > queries ) { \n\tIndexWriter writer = getWriter ( ) ; \n\tfor ( Query query : queries ) { \n\t\ttry { \n\t\t\twriter . deleteDocuments ( query ) ; \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\t$F301 ( e ) closeWriter ( writer ) ; \n\t\t\t$F5301 ( e ) } \n\t\t} \n\tcloseWriter ( writer ) ; \n\t} \n"}, {"code": "protected String toString ( Object parameter ) { \n\t$F1933 ( parameter , NULL_STR ) try { \n\t\tString result = Misc . getAsString ( parameter ) ; \n\t\tif ( result . length ( ) > DEFAULT_ARG_ <missing ')'> NUM00 <missing ';'> _MAX_LENGTH ) { \n\t\t\tresult = result . substring ( NUM00 , DEFAULT_ARG_ <missing ';'> NUM00 <missing ';'> _MAX_LENGTH ) + DEFAULT_MAX_ <missing ';'> NUM00 _ENDING ; \n\t\t\t} \n\t\treturn result ; \n\t\t} \n\tcatch ( Throwable e ) { \n\t\treturn UNKNOWN ; \n\t\t} \n\t} \n"}, {"code": "public static SecretKey generateSecretKey ( SecretKeyType secretKeyType , int keySize ) throws CryptoException { \n\ttry { \n\t\tKeyGenerator keyGenerator = KeyGenerator . getInstance ( secretKeyType . jce ( ) , BOUNCY_CASTLE . jce ( ) ) ; \n\t\tkeyGenerator . init ( keySize , SecureRandom . getInstance ( NUM00 ) ) ; \n\t\treturn keyGenerator . generateKey ( ) ; \n\t\t} \n\tcatch ( GeneralSecurityException ex ) { \n\t\tthrow new CryptoException ( $F36702 ( MessageFormat , res , secretKeyType ) , ex ) ; \n\t\t} \n\t} \n"}, {"code": "public CML deleteCML ( ISicresAbstractDocumentVO document ) { \n\t$F134526 ( id , document ) Reference reference = new Reference ( STORE , id , null ) ; \n\tPredicate predicate = new Predicate ( new Reference [ ] { \n\t\treference } \n\t, null , null ) ; \n\tCMLDelete delete = new CMLDelete ( predicate ) ; \n\tCML cml = new CML $F72 ; \n\tcml . setDelete ( new CMLDelete [ ] { \n\t\tdelete } \n\t) ; \n\treturn cml ; \n\t} \n"}, {"code": "private synchronized void eval $F72 throws MetadataEvaluationException { \n\tif ( cacheStrategy == CacheStrategy . NEVER_CACHE || $F61922 ( internalValue ) ) { \n\t\ttry { \n\t\t\tObject value = lazyValue . call ( ) ; \n\t\t\t$F13265 ( value , ACTUALLY_NULL ) internalValue = new SoftReference $F1432 ( value ) ; \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\tthrow new MetadataEvaluationException ( e ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void addEdgeToBounds ( S2Point from , S2Point to ) { \n\tif ( ! boundSet ) { \n\t\tboundSet = _BOOL ; \n\t\txmin = xmax = from . x ; \n\t\tymin = ymax = from . y ; \n\t\tzmin = zmax = from . z ; \n\t\t} \n\txmin = Math . min ( xmin , $F150934 ( Math , to , from ) ) ; \n\tymin = Math . min ( ymin , $F250296 ( Math , to , from ) ) ; \n\tzmin = Math . min ( zmin , Math . min ( to . z , from . z ) ) ; \n\txmax = Math . max ( xmax , $F103491 ( Math , to , from ) ) ; \n\tymax = Math . max ( ymax , Math . max ( to . y , from . y ) ) ; \n\tzmax = Math . max ( zmax , Math . max ( to . z , from . z ) ) ; \n\tdouble approxArcLen = Math . abs ( from . x - to . x ) + Math . abs ( from . y - to . y ) + Math . abs ( from . z - to . z ) ; \n\tif ( approxArcLen < NUM00 ) { \n\t\tmaxDeformation = Math . max ( maxDeformation , approxArcLen * NUM00 ) ; \n\t\t} \n\telse if ( approxArcLen < NUM00 ) { \n\t\tmaxDeformation = Math . max ( maxDeformation , approxArcLen * NUM00 ) ; \n\t\t} \n\telse { \n\t\tmaxDeformation = approxArcLen * NUM00 ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void write $F24576 ( buffer , offset , length ) throws IOException { \n\twhile $F73749 ( mByteToSkip , mByteToCopy , mState , STATE_JPEG_DATA , length ) { \n\t\t$F73751 ( mByteToSkip , byteToProcess , length , offset ) if ( mByteToCopy > NUM00 ) { \n\t\t\tint byteToProcess = length > mByteToCopy ? mByteToCopy : length ; \n\t\t\tout . write ( buffer , offset , byteToProcess ) ; \n\t\t\tlength -= byteToProcess ; \n\t\t\tmByteToCopy -= byteToProcess ; \n\t\t\toffset += byteToProcess ; \n\t\t\t} \n\t\t$F32905 ( length ) switch ( mState ) { \n\t\t\tcase STATE_SOI : int byteRead = requestByteToBuffer ( NUM00 , buffer , offset , length ) ; \n\t\t\toffset += byteRead ; \n\t\t\tlength -= byteRead ; \n\t\t\t$F73756 ( mBuffer ) $F23501 ( mBuffer ) $F73759 ( mBuffer , JpegHeader ) $F73762 ( out , mBuffer ) mState = STATE_FRAME_HEADER ; \n\t\t\t$F23501 ( mBuffer ) writeExifData ( ) ; \n\t\t\t$F597 case STATE_FRAME_HEADER : byteRead = requestByteToBuffer ( NUM00 , buffer , offset , length ) ; \n\t\t\toffset += byteRead ; \n\t\t\tlength -= byteRead ; \n\t\t\tif $F73765 ( mBuffer ) { \n\t\t\t\t$F73767 ( tag , mBuffer ) if ( tag == JpegHeader . EOI ) { \n\t\t\t\t\t$F73762 ( out , mBuffer ) $F23501 ( mBuffer ) } \n\t\t\t\t} \n\t\t\t$F73756 ( mBuffer ) $F23501 ( mBuffer ) $F73767 ( marker , mBuffer ) if ( marker == JpegHeader . APP1 ) $F125654 ( mByteToSkip , mBuffer , mState , STATE_JPEG_DATA ) else if $F125655 ( JpegHeader , marker ) { \n\t\t\t\t$F73762 ( out , mBuffer ) $F73777 ( mByteToCopy , mBuffer ) } \n\t\t\telse { \n\t\t\t\t$F73762 ( out , mBuffer ) mState = STATE_JPEG_DATA ; \n\t\t\t\t} \n\t\t\t$F23501 ( mBuffer ) } \n\t\t} \n\tif ( length > NUM00 ) $F21537 ( out , buffer , offset , length ) } \n"}, {"code": "public static String hash ( String string ) { \n\ttry { \n\t\t$F5348 ( sha1 , MessageDigest ) sha1 . update ( string . getBytes ( NUM00 ) ) ; \n\t\treturn Base64 . encode ( sha1 . digest ( ) ) ; \n\t\t} \n\tcatch ( Exception ex ) { \n\t\t$F5348 ( debug , Debug ) if $F12866 ( debug ) $F36502 ( debug , ex ) $F1274 } \n\t} \n"}, {"code": "static $F3803 readExtensions ( final SubstringReader reader ) throws DecodeException { \n\tint length = NUM00 ; \n\t$F101494 ( values ) reader . skipWhitespaces ( ) ; \n\t$F115573 ( reader ) try { \n\t\t$F277866 ( c , reader ) if ( c == NUM00 ) { \n\t\t\t$F115573 ( reader ) while ( reader . read ( ) != NUM00 ) { \n\t\t\t\tlength ++ ; \n\t\t\t\t} \n\t\t\t$F2268 ( reader ) values = Collections . singletonList ( reader . read ( length ) ) ; \n\t\t\t$F61262 ( reader ) } \n\t\telse if ( c == NUM00 ) { \n\t\t\treader . skipWhitespaces ( ) ; \n\t\t\t$F115573 ( reader ) $F10201 ( c , reader ) if ( c == NUM00 ) $F254727 ( values , Collections ) else { \n\t\t\t\t$F9404 ( values ) do { \n\t\t\t\t\t$F2268 ( reader ) $F3761 ( values , readQuotedString , reader ) reader . skipWhitespaces ( ) ; \n\t\t\t\t\t$F115573 ( reader ) } \n\t\t\t\twhile ( reader . read ( ) != NUM00 ) ; \n\t\t\t\t$F5939 ( values , Collections ) } \n\t\t\t} \n\t\telse { \n\t\t\tdo { \n\t\t\t\tlength ++ ; \n\t\t\t\t} \n\t\t\twhile ( reader . read ( ) != NUM00 ) ; \n\t\t\t$F2268 ( reader ) values = Collections . singletonList ( reader . read ( length ) ) ; \n\t\t\t} \n\t\treturn values ; \n\t\t} \n\tcatch ( final StringIndexOutOfBoundsException e ) { \n\t\tthrow DecodeException . error ( ERR_ATTR_SYNTAX_TRUNCATED_VALUE1 . get ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "private void NV21toI420SemiPlanar ( $F96 nv21bytes , $F96 i420bytes , int width , int height ) { \n\tSystem . arraycopy ( nv21bytes , NUM00 , i420bytes , NUM00 , width * height ) ; \n\tfor ( int i = width * height ; \n\ti < nv21bytes . length ; \n\ti += NUM00 ) { \n\t\ti420bytes [ i ] = nv21bytes [ i + NUM00 ] ; \n\t\t$F65884 ( i420bytes , i , nv21bytes ) } \n\t} \n"}, {"code": "public int read ( ByteBuffer dst ) throws IOException { \n\tif $F116620 ( dst ) $F1082 if $F931 ( isHandShakeComplete ) { \n\t\tif ( isBlocking ( ) ) { \n\t\t\twhile $F931 ( isHandShakeComplete ) $F5795 ( processHandshake ) } \n\t\telse { \n\t\t\tprocessHandshake ( ) ; \n\t\t\tif $F931 ( isHandShakeComplete ) $F1083 } \n\t\t} \n\tint purged = readRemaining ( dst ) ; \n\t$F74336 ( purged ) assert $F73765 ( inData ) ; \n\t$F725 ( inData ) if $F116620 ( inCrypt ) $F725 ( inCrypt ) else $F116630 ( inCrypt ) if ( isBlocking ( ) || readEngineResult . getStatus ( ) == Status . BUFFER_UNDERFLOW ) if ( socketChannel . read ( inCrypt ) == - NUM00 ) $F7629 $F14257 ( inCrypt ) unwrap ( ) ; \n\tint transfered = transfereTo ( inData , dst ) ; \n\tif $F116639 ( transfered , isBlocking ) $F4915 ( read , dst ) return transfered ; \n\t} \n"}, {"code": "private $F422085 search $F72 throws IOException { \n\tDirectoryReader indexReader = DirectoryReader . open ( indexDir ) ; \n\tIndexSearcher searcher = new IndexSearcher ( indexReader ) ; \n\tSortedSetDocValuesReaderState state = new DefaultSortedSetDocValuesReaderState ( indexReader ) ; \n\tFacetsCollector fc = new FacetsCollector $F72 ; \n\tFacetsCollector . search ( searcher , new MatchAllDocsQuery $F72 , NUM00 , fc ) ; \n\tFacets facets = new SortedSetDocValuesFacetCounts ( state , fc ) ; \n\t$F422085 $F204 ( results ) ; \n\t$F422106 ( results , facets ) $F422106 ( results , facets ) $F59 ( indexReader ) return results ; \n\t} \n"}, {"code": "public Resource mapRelations ( Resource object , JSONObject jsonObject , $F77302 included ) throws Exception { \n\t$F12078 $F5998 ( relationshipNames , getRelationshipNames , object ) ; \n\tfor ( $F3465 ( relationship , relationshipNames ) ) { \n\t\tJSONObject relationJsonObject = null ; \n\t\ttry { \n\t\t\trelationJsonObject = jsonObject . getJSONObject ( relationship ) ; \n\t\t\t} \n\t\tcatch ( JSONException e ) { \n\t\t\t$F630 ( Logger , relationship ) $F598 } \n\t\tJSONObject relationDataObject = null ; \n\t\ttry { \n\t\t\trelationDataObject = relationJsonObject . getJSONObject ( NUM00 ) ; \n\t\t\tResource relationObject = Factory . newObjectFromJSONObject ( relationDataObject , null ) ; \n\t\t\trelationObject = matchIncludedToRelation ( relationObject , included ) ; \n\t\t\tmDeserializer . setField ( object , relationshipNames . get ( relationship ) , relationObject ) ; \n\t\t\t} \n\t\tcatch ( JSONException e ) $F981 ( Logger ) JSONArray relationDataArray = null ; \n\t\ttry { \n\t\t\trelationDataArray = relationJsonObject . getJSONArray ( NUM00 ) ; \n\t\t\t$F77302 relationArray = Factory . newObjectFromJSONArray ( relationDataArray , null ) ; \n\t\t\trelationArray = matchIncludedToRelation ( relationArray , included ) ; \n\t\t\tmDeserializer . setField ( object , relationshipNames . get ( relationship ) , relationArray ) ; \n\t\t\t} \n\t\tcatch ( JSONException e ) $F981 ( Logger ) } \n\treturn object ; \n\t} \n"}, {"code": "$F1654 ( rdns ) "}, {"code": "$F1 public void doInitialize ( UimaContext aContext ) throws ResourceInitializationException { \n\tDB db = mongoResource . getDB ( ) ; \n\tcollection = db . getCollection ( collectionName ) ; \n\tcollection . createIndex ( new BasicDBObject ( FIELD_UNIQUE_ID , NUM00 ) ) ; \n\tcollection . createIndex ( new BasicDBObject ( FIELD_PUBLISHEDIDS , NUM00 ) ) ; \n\t$F21884 ( stopFeatures ) $F18793 ( stopFeatures ) $F18793 ( stopFeatures ) maxContentLength = ConfigUtils . stringToInteger ( maxContentLengthString , NUM00 ) ; \n\t} \n"}, {"code": "protected void drawHighFarOut ( double aRadius , Graphics2D g2 , double xx , double m ) { \n\tdouble side = aRadius * NUM00 ; \n\tg2 . draw ( new $F69931 ( xx - side , m + side , xx + side , m + side ) ) ; \n\tg2 . draw ( new $F69931 ( xx - side , m + side , xx , m ) ) ; \n\tg2 . draw ( new $F69931 ( xx + side , m + side , xx , m ) ) ; \n\t} \n"}, {"code": "private void findLargeItemSets $F72 throws Exception { \n\t$F3523 kMinusOneSets , kSets ; \n\tHashtable < ItemSet , Integer > hashtable ; \n\tint necSupport , i = NUM00 ; \n\tnecSupport = ( int ) ( m_minSupport * m_instances . numInstances ( ) + NUM00 ) ; \n\tkSets = AprioriItemSet . singletons ( m_instances , m_treatZeroAsMissing ) ; \n\tif ( m_treatZeroAsMissing ) { \n\t\tAprioriItemSet . upDateCountersTreatZeroAsMissing ( kSets , m_instances ) ; \n\t\t} \n\telse { \n\t\tAprioriItemSet . upDateCounters ( kSets , m_instances ) ; \n\t\t} \n\tkSets = AprioriItemSet . deleteItemSets ( kSets , necSupport , m_instances . numInstances ( ) ) ; \n\t$F110977 ( kSets ) do { \n\t\tm_Ls . add ( kSets ) ; \n\t\tkMinusOneSets = kSets ; \n\t\tkSets = AprioriItemSet . mergeAllItemSets ( kMinusOneSets , i , m_instances . numInstances ( ) ) ; \n\t\thashtable = AprioriItemSet . getHashtable ( kMinusOneSets , kMinusOneSets . size ( ) ) ; \n\t\tm_hashtables . add ( hashtable ) ; \n\t\tkSets = AprioriItemSet . pruneItemSets ( kSets , hashtable ) ; \n\t\tif ( m_treatZeroAsMissing ) { \n\t\t\tAprioriItemSet . upDateCountersTreatZeroAsMissing ( kSets , m_instances ) ; \n\t\t\t} \n\t\telse { \n\t\t\tAprioriItemSet . upDateCounters ( kSets , m_instances ) ; \n\t\t\t} \n\t\tkSets = AprioriItemSet . deleteItemSets ( kSets , necSupport , m_instances . numInstances ( ) ) ; \n\t\ti ++ ; \n\t\t} \n\twhile $F3817 ( kSets ) ; \n\t} \n"}, {"code": "public boolean isInAllowed ( int x , int y ) { \n\tfor ( Shape r : arrivingBarriers ) { \n\t\tif $F26905 ( r , x , y ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void removePluginInterface ( String interfacename ) throws $F16995 { \n\tSMSEntry . validateToken ( token ) ; \n\tvalidateServiceSchemaManagerImpl ( ) ; \n\tDocument schemaDoc = ssm . getDocumentCopy ( ) ; \n\tNode schemaNode = XMLUtils . getRootNode ( schemaDoc , SMSUtils . SCHEMA ) ; \n\tNode pluginNode = XMLUtils . getNamedChildNode ( schemaNode , SMSUtils . PLUGIN_INTERFACE , SMSUtils . NAME , interfacename ) ; \n\tif ( pluginNode != null ) { \n\t\tschemaNode . removeChild ( pluginNode ) ; \n\t\treplaceSchema ( schemaDoc ) ; \n\t\t} \n\t} \n"}, {"code": "public IPAddressName ( String name ) throws IOException { \n\tif $F6036 ( name ) $F14525 if $F50863 ( name ) $F3496 ( name ) if $F48846 ( name ) { \n\t\tparseIPv6 ( name ) ; \n\t\tisIPv4 = _BOOL ; \n\t\t} \n\telse if $F48846 ( name ) { \n\t\tparseIPv4 ( name ) ; \n\t\tisIPv4 = _BOOL ; \n\t\t} \n\telse $F3496 ( name ) } \n"}, {"code": "private boolean isSameFile ( Path first , Path second ) throws IOException { \n\tboolean sameFileSize = Files . size ( first ) == Files . size ( second ) ; \n\t$F42316 ( sameFileSize , _BOOL ) $F96 firstBytes = Files . readAllBytes ( first ) ; \n\t$F96 secondBytes = Files . readAllBytes ( second ) ; \n\treturn Arrays . equals ( firstBytes , secondBytes ) ; \n\t} \n"}, {"code": "public static org . opcfoundation . ua . transport . security . KeyPair loadKeyPairFromProtectedStore $F19845 ( storeLocation , alias , storePW , privatePW ) throws KeyStoreException , IOException , NoSuchAlgorithmException , CertificateException , UnrecoverableKeyException { \n\tKeyStore store = null ; \n\t$F6161 ( store , KeyStore ) $F1705 ( keystoreFile , storeLocation ) $F4647 ( in , keystoreFile ) store . load ( in , storePW . toCharArray ( ) ) ; \n\t$F59 ( in ) X509Certificate cert = ( X509Certificate ) store . getCertificate ( alias ) ; \n\tRSAPrivateKey key = ( RSAPrivateKey ) store . getKey ( alias , privatePW . toCharArray ( ) ) ; \n\treturn new org . opcfoundation . ua . transport . security . KeyPair ( new Cert ( cert ) , new PrivKey ( key ) ) ; \n\t} \n"}, {"code": "$F1 public GraphQuery hasNot ( final String key , final Object value ) { \n\tcriteria . add ( new HasNot ( key , value ) ) ; \n\treturn this ; \n\t} \n"}, {"code": "private void initComputeProgram $F72 { \n\t$F130812 ( workGroupSize , BufferUtils ) glGetProgramiv ( computeProgram , GL_COMPUTE_WORK_GROUP_SIZE , workGroupSize ) ; \n\t$F36986 ( workGroupSizeX , workGroupSize ) $F36986 ( workGroupSizeY , workGroupSize ) int boxesResourceIndex = glGetProgramResourceIndex ( computeProgram , GL_SHADER_STORAGE_BLOCK , NUM00 ) ; \n\t$F130812 ( props , BufferUtils ) $F130812 ( params , BufferUtils ) $F130813 ( props , GL_BUFFER_BINDING ) glGetProgramResourceiv ( computeProgram , GL_SHADER_STORAGE_BLOCK , boxesResourceIndex , props , null , params ) ; \n\t$F36986 ( boxesSsboBinding , params ) int uniformsResourceIndex = glGetProgramResourceIndex ( computeProgram , GL_UNIFORM_BLOCK , NUM00 ) ; \n\tglGetProgramResourceiv ( computeProgram , GL_UNIFORM_BLOCK , uniformsResourceIndex , props , null , params ) ; \n\t$F36986 ( computeUboBinding , params ) int loc = glGetUniformLocation ( computeProgram , NUM00 ) ; \n\tglGetUniformiv ( computeProgram , loc , params ) ; \n\t$F36986 ( framebufferImageBinding , params ) loc = glGetUniformLocation ( computeProgram , NUM00 ) ; \n\tglGetUniformiv ( computeProgram , loc , params ) ; \n\t$F36986 ( worldPositionImageBinding , params ) loc = glGetUniformLocation ( computeProgram , NUM00 ) ; \n\tglGetUniformiv ( computeProgram , loc , params ) ; \n\t$F36986 ( worldNormalImageBinding , params ) } \n"}, {"code": "TSResponse $F97 ( tsReply ) throws IOException { \n\tparse ( tsReply ) ; \n\t} \n"}, {"code": "public static void executeCommand ( ProcessBuilder p ) throws IOException { \n\t$F111135 ( proc , p ) try ( $F114263 ( stdInput , proc ) ; \n\tBufferedReader stdError = new BufferedReader ( new InputStreamReader ( proc . getErrorStream ( ) ) ) ) { \n\t\t$F973 ( logger ) String s ; \n\t\twhile $F443 ( s , stdInput ) { \n\t\t\tlogger . info ( s ) ; \n\t\t\t} \n\t\t$F973 ( logger ) while $F443 ( s , stdError ) { \n\t\t\tlogger . info ( s ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public boolean pageSetupDialog ( PrinterJob job ) { \n\tPrintRequestAttributeSet prats = getPrintRequestAttributeSet ( ) ; \n\tPageFormat pf = job . pageDialog ( prats ) ; \n\tsetPrintRequestAttributeSet ( prats ) ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static void assertNotEquals ( BufferedImage image1 , BufferedImage image2 ) $F228450 ( assertNotEquals , image1 , image2 ) "}, {"code": "public Depend ( PathImpl source , long digest , boolean requireSource ) { \n\tthis ( source ) ; \n\tlong newDigest = source . getCrc64 ( ) ; \n\t_requireSource = requireSource ; \n\tif ( newDigest == digest ) $F845 else if ( ! requireSource && newDigest == NUM00 ) $F845 else if ( newDigest == NUM00 ) { \n\t\tif $F6456 ( log , Level ) log . fine ( $F6457 ( _source ) ) ; \n\t\t_isDigestModified = _BOOL ; \n\t\t} \n\telse { \n\t\t_isDigestModified = _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public static boolean stringToFile ( final String data , final File targetFile , final boolean doAppend ) { \n\tif ( targetFile == null || ! isWritable ( targetFile , _BOOL ) ) $F277465 ( Log , _BOOL ) boolean isSucceed = _BOOL ; \n\ttry { \n\t\tfinal FileWriter out = new FileWriter ( targetFile , doAppend ) ; \n\t\tout . write ( data ) ; \n\t\t$F1206 ( out ) $F59 ( out ) } \n\t$F25100 ( isSucceed , _BOOL ) return isSucceed ; \n\t} \n"}, {"code": "$F1 public void cascadeRegisterNewIfRequired ( Object object , UnitOfWorkImpl uow , Map visitedObjects ) { \n\tcascadeRegisterNewIfRequired ( object , uow , visitedObjects , _BOOL ) ; \n\t} \n"}, {"code": "public void initialize ( Map configParams ) throws PolicyException { \n\tif ( configParams == null ) { \n\t\tthrow ( new PolicyException $F278179 ( ResBundleUtils ) ) ; \n\t\t} \n\tString configuredLdapServer = ( String ) configParams . get ( PolicyConfig . LDAP_SERVER ) ; \n\tif ( configuredLdapServer == null ) { \n\t\tdebug . error ( $F40 ) ; \n\t\tthrow ( new PolicyException $F278179 ( ResBundleUtils ) ) ; \n\t\t} \n\t$F21936 ( ldapServer , configuredLdapServer ) localDS = PolicyUtils . isLocalDS ( ldapServer ) ; \n\taliasEnabled = Boolean . valueOf ( ( String ) configParams . get ( PolicyConfig . USER_ALIAS_ENABLED ) ) ; \n\tString authid = ( String ) configParams . get ( PolicyConfig . LDAP_BIND_DN ) ; \n\tString authpw = ( String ) configParams . get ( PolicyConfig . LDAP_BIND_PASSWORD ) ; \n\tif ( authpw != null ) { \n\t\tauthpw = PolicyUtils . decrypt ( authpw ) ; \n\t\t} \n\tbaseDN = ( String ) configParams . get ( PolicyConfig . LDAP_USERS_BASE_DN ) ; \n\tuserSearchFilter = ( String ) configParams . get ( PolicyConfig . LDAP_USERS_SEARCH_FILTER ) ; \n\tString scope = ( String ) configParams . get ( PolicyConfig . LDAP_USERS_SEARCH_SCOPE ) ; \n\tif $F8397 ( scope , LDAP_SCOPE_BASE ) { \n\t\tuserSearchScope = SearchScope . BASE_OBJECT ; \n\t\t} \n\telse if $F8397 ( scope , LDAP_SCOPE_ONE ) { \n\t\tuserSearchScope = SearchScope . SINGLE_LEVEL ; \n\t\t} \n\telse { \n\t\tuserSearchScope = SearchScope . WHOLE_SUBTREE ; \n\t\t} \n\tuserRDNAttrName = ( String ) configParams . get ( PolicyConfig . LDAP_USER_SEARCH_ATTRIBUTE ) ; \n\tint minPoolSize ; \n\tint maxPoolSize ; \n\ttry { \n\t\ttimeLimit = Integer . parseInt ( ( String ) configParams . get ( PolicyConfig . LDAP_SEARCH_TIME_OUT ) ) ; \n\t\tmaxResults = Integer . parseInt ( ( String ) configParams . get ( PolicyConfig . LDAP_SEARCH_LIMIT ) ) ; \n\t\tminPoolSize = Integer . parseInt ( ( String ) configParams . get ( PolicyConfig . LDAP_CONNECTION_POOL_MIN_SIZE ) ) ; \n\t\tmaxPoolSize = Integer . parseInt ( ( String ) configParams . get ( PolicyConfig . LDAP_CONNECTION_POOL_MAX_SIZE ) ) ; \n\t\t} \n\tcatch ( NumberFormatException nfe ) { \n\t\tthrow ( new PolicyException ( nfe ) ) ; \n\t\t} \n\tboolean sslEnabled = Boolean . valueOf ( ( String ) configParams . get ( PolicyConfig . LDAP_SSL_ENABLED ) ) ; \n\tSet orgNameSet = ( Set ) configParams . get ( PolicyManager . ORGANIZATION_NAME ) ; \n\tif $F13709 ( orgNameSet ) { \n\t\t$F10531 ( items , orgNameSet ) $F103384 ( orgName , items ) } \n\tif $F6299 ( debug ) { \n\t\tdebug . message ( $F263731 ( ldapServer , authid , baseDN ) + userSearchFilter + NUM00 + userRDNAttrName + NUM00 + timeLimit + NUM00 + maxResults + NUM00 + minPoolSize + NUM00 + maxPoolSize + NUM00 + sslEnabled + NUM00 + orgName ) ; \n\t\t} \n\tLDAPConnectionPools . initConnectionPool ( ldapServer , authid , authpw , sslEnabled , minPoolSize , maxPoolSize ) ; \n\tconnPool = LDAPConnectionPools . getConnectionPool ( ldapServer ) ; \n\tinitialized = _BOOL ; \n\t} \n"}, {"code": "public static boolean parseBool ( String s ) { \n\tif ( s != null ) { \n\t\tif ( $F132104 ( s ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\tif ( s . startsWith ( NUM00 ) || s . startsWith ( NUM00 ) || s . equals ( NUM00 ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\tthrow new SolrException ( SolrException . ErrorCode . BAD_REQUEST , NUM00 + s ) ; \n\t} \n"}, {"code": "private static void readDNA ( String filename ) { \n\ttry { \n\t\tLineNumberReader in = new LineNumberReader $F434 ( filename ) ; \n\t\tprocessOneLine ( in , NUM00 , compilationRates ) ; \n\t\tprocessOneLine ( in , NUM00 , speedupRates ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F301 ( e ) VM . sysFail ( NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "public void test_Of_EEEE $F72 { \n\tEnumSet < EnumWithInnerClass > enumSet = EnumSet . of ( EnumWithInnerClass . a , EnumWithInnerClass . b , EnumWithInnerClass . c , EnumWithInnerClass . d ) ; \n\t$F153255 ( assertEquals , enumSet ) assertTrue ( NUM00 , $F257441 ( enumSet , EnumWithInnerClass ) ) ; \n\tassertTrue ( NUM00 , enumSet . contains ( EnumWithInnerClass . d ) ) ; \n\ttry { \n\t\tEnumSet . of ( ( EnumWithInnerClass ) null , null , null , null ) ; \n\t\tfail ( NUM00 ) ; \n\t\t} \n\t$F53531 EnumSet < HugeEnumWithInnerClass > hugeEnumSet = EnumSet . of ( HugeEnumWithInnerClass . a , HugeEnumWithInnerClass . b , HugeEnumWithInnerClass . c , HugeEnumWithInnerClass . d ) ; \n\t$F70108 ( assertEquals , hugeEnumSet ) assertTrue ( $F257441 ( hugeEnumSet , HugeEnumWithInnerClass ) ) ; \n\tassertTrue ( hugeEnumSet . contains ( HugeEnumWithInnerClass . d ) ) ; \n\ttry { \n\t\tEnumSet . of ( ( HugeEnumWithInnerClass ) null , null , null , null ) ; \n\t\tfail ( NUM00 ) ; \n\t\t} \n\t$F53531 } \n"}, {"code": "Builder ( URL swaggerUrl ) { \n\ttry { \n\t\tthis . swaggerLocation = swaggerUrl . toURI ( ) ; \n\t\t} \n\tcatch ( URISyntaxException e ) $F78550 ( e ) this . swagger = $F17717 ( readSwagger , swaggerUrl ) ; \n\t} \n"}, {"code": "$F1 public void onSaveInstanceState ( $F4170 Bundle savedInstanceState ) { \n\tsavedInstanceState . putParcelable ( LOCATION_KEY , currentLocation ) ; \n\tif ( lastLocationUpdateTime != null ) { \n\t\tsavedInstanceState . putLong ( LAST_LOCATION_UPDATE_TIME_ <missing ';'> NUM00 <missing ';'> _KEY , lastLocationUpdateTime . getTime ( ) ) ; \n\t\t} \n\tif ( lastWifiScanTime != null ) { \n\t\tsavedInstanceState . putLong ( LAST_WIFI_SCAN_TIME_ <missing ';'> NUM00 <missing ';'> _KEY , lastWifiScanTime . getTime ( ) ) ; \n\t\t} \n\tsavedInstanceState . putBoolean ( LOGGING_ENABLED_KEY , loggingEnabled ) ; \n\tsuper . onSaveInstanceState ( savedInstanceState ) ; \n\t} \n"}, {"code": "public static String removeEmptyLines ( String text ) { \n\ttext = text . replaceAll ( NUM00 + ChineseLanguageConstants . SPACE [ NUM00 ] + NUM00 , NUM00 ) ; \n\ttext = text . replaceAll ( NUM00 + ChineseLanguageConstants . SPACE [ NUM00 ] + NUM00 , NUM00 ) ; \n\treturn text ; \n\t} \n"}, {"code": "public void keepOnly ( Set < IVarAbstraction > usefulPointers ) { \n\tSet < IVarAbstraction > reps = new HashSet < IVarAbstraction > $F72 ; \n\tfor ( IVarAbstraction pn : usefulPointers ) { \n\t\treps . add ( pn . getRepresentative ( ) ) ; \n\t\t} \n\tusefulPointers . addAll ( reps ) ; \n\treps = null ; \n\tfor ( IVarAbstraction pn : pointers ) { \n\t\tif $F2200 ( usefulPointers , pn ) pn . deleteAll ( ) ; \n\t\t} \n\t$F58463 ( System ) } \n"}, {"code": "public static String encryptCFB ( final $F96 concatenatedHashValue , final Long turnoverCounter , final SecretKey symmetricKey , int turnOverCounterLengthInBytes ) throws NoSuchAlgorithmException , NoSuchProviderException , NoSuchPaddingException , InvalidKeyException , InvalidAlgorithmParameterException , IllegalBlockSizeException , BadPaddingException { \n\t$F120018 ( byteBufferIV , ByteBuffer ) byteBufferIV . put ( concatenatedHashValue ) ; \n\t$F45857 ( IV , byteBufferIV ) $F120018 ( byteBufferData , ByteBuffer ) byteBufferData . putLong ( turnoverCounter ) ; \n\t$F45857 ( data , byteBufferData ) $F33012 ( turnOverCounterByteRep , get2ComplementRepForLong , turnoverCounter , turnOverCounterLengthInBytes ) $F7057 ( System , turnOverCounterByteRep , data ) final IvParameterSpec ivSpec = new IvParameterSpec ( IV ) ; \n\tfinal Cipher cipher = Cipher . getInstance ( NUM00 , NUM00 ) ; \n\t$F20431 ( cipher , Cipher , symmetricKey , ivSpec ) $F120024 ( encryptedTurnOverValueComplete , cipher , data ) $F4727 ( encryptedTurnOverValue , turnOverCounterLengthInBytes ) $F135 ( System , encryptedTurnOverValueComplete , encryptedTurnOverValue , turnOverCounterLengthInBytes ) final String base64EncryptedTurnOverValue = CashBoxUtils . base64Encode ( encryptedTurnOverValue , _BOOL ) ; \n\treturn base64EncryptedTurnOverValue ; \n\t} \n"}, {"code": "public void resetLockoutAttempts ( String userDN , AMIdentity amIdentity , AccountLockoutInfo acInfo , boolean resetDuration ) { \n\t$F18126 ( debug ) $F36310 ( debug , resetDuration ) int fail_count = NUM00 ; \n\tlong lastFailTime = NUM00 ; \n\tlong locked_out_at = NUM00 ; \n\tlong actualLockoutDuration = failureLockoutDuration ; \n\tlong currentLockoutDuration = acInfo . getActualLockoutDuration ( ) ; \n\tif ( acInfo != null ) { \n\t\tfail_count = acInfo . getFailCount ( ) ; \n\t\tlastFailTime = acInfo . getLastFailTime ( ) ; \n\t\tlocked_out_at = acInfo . getLockoutAt ( ) ; \n\t\tlong now = currentTimeMillis ( ) ; \n\t\tif ( ! resetDuration ) { \n\t\t\tactualLockoutDuration = currentLockoutDuration ; \n\t\t\t$F36310 ( debug , locked_out_at ) if ( locked_out_at > NUM00 ) { \n\t\t\t\t$F19243 ( debug ) actualLockoutDuration = failureLockoutMultiplier * ( currentLockoutDuration ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tif ( storeInvalidAttemptsInDS ) { \n\t\ttry { \n\t\t\tif ( ( fail_count != NUM00 ) || ( lastFailTime != NUM00 ) || ( locked_out_at != NUM00 ) || ( actualLockoutDuration != currentLockoutDuration ) ) { \n\t\t\t\t$F28017 ( attrMap ) $F19850 ( invalidAttempts ) String invalidXML = createInvalidAttemptsXML ( NUM00 , NUM00 , NUM00 , actualLockoutDuration ) ; \n\t\t\t\tinvalidAttempts . add ( invalidXML ) ; \n\t\t\t\tattrMap . put ( invalidAttemptsDataAttrName , invalidAttempts ) ; \n\t\t\t\tsetLockoutObjectClass ( amIdentity ) ; \n\t\t\t\tamIdentity . setAttributes ( attrMap ) ; \n\t\t\t\t$F18127 ( debug , invalidXML ) $F13765 ( amIdentity ) } \n\t\t\t$F18126 ( debug ) } \n\t\tcatch ( Exception exp ) { \n\t\t\t$F18126 ( debug ) } \n\t\t} \n\tacInfo . setFailCount ( NUM00 ) ; \n\tacInfo . setLastFailTime ( NUM00 ) ; \n\tacInfo . setLockoutAt ( NUM00 ) ; \n\tacInfo . setLockout ( _BOOL ) ; \n\tacInfo . setActualLockoutDuration ( actualLockoutDuration ) ; \n\t} \n"}, {"code": "String publicNameFromDiskName ( String diskName ) { \n\tif ( ! shouldDiskNameBeVisible ( diskName ) ) $F18931 ( diskName ) return diskName . substring ( mFilePrefix . length ( ) , diskName . length ( ) ) ; \n\t} \n"}, {"code": "public $F1986 predict ( FVec feat ) $F8587 ( predict , feat , _BOOL ) "}, {"code": "public static $F20163 $F99842 append ( final $F99842 a , final $F99842 b ) { \n\t$F18832 ( alen , a ) $F18832 ( blen , b ) final $F99842 res = Arrays . copyOf ( a , alen + blen ) ; \n\t$F6483 ( System , b , res , alen , blen ) return res ; \n\t} \n"}, {"code": "public boolean addListener ( $F1113 SoftWrapAwareDocumentParsingListener listener ) $F31974 ( myListeners , listener ) "}, {"code": "private void assertArrayEquals ( $F1986 expected , $F1986 actual , double delta , boolean checkNaN ) { \n\tAssert . assertEquals ( expected . length , actual . length ) ; \n\tfor ( $F1139 ( index , actual ) ) { \n\t\tdouble d1 = expected [ index ] ; \n\t\tdouble d2 = actual [ index ] ; \n\t\tif $F89880 ( Double , d1 , d2 ) { \n\t\t\tif ( checkNaN ) { \n\t\t\t\tAssert . assertTrue ( Double . isNaN ( d1 ) == Double . isNaN ( d2 ) ) ; \n\t\t\t\t} \n\t\t\tAssert . assertTrue ( _BOOL ) ; \n\t\t\t} \n\t\telse { \n\t\t\tAssert . assertEquals ( d1 , d2 , delta ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "protected void addToPopulation ( Solution newSolution ) { \n\t$F67791 ( dominates ) boolean dominated = _BOOL ; \n\tfor ( $F2277 ( i , population ) ) { \n\t\tint flag = dominanceComparator . compare ( newSolution , population . get ( i ) ) ; \n\t\tif ( flag < NUM00 ) $F207 ( dominates , i ) else $F158341 ( flag , dominated , _BOOL ) } \n\tif $F5973 ( dominates ) { \n\t\tpopulation . remove ( dominates . get ( PRNG . nextInt ( dominates . size ( ) ) ) ) ; \n\t\tpopulation . add ( newSolution ) ; \n\t\t} \n\telse if ( ! dominated ) { \n\t\tpopulation . remove ( PRNG . nextInt ( population . size ( ) ) ) ; \n\t\tpopulation . add ( newSolution ) ; \n\t\t} \n\t} \n"}, {"code": "public void updateMaxTextWidths ( float requiredWidth , float matchContentsWidth ) { \n\t$F19410 ( mMaxRequiredWidth , Math , requiredWidth ) $F19410 ( mMaxMatchContentsWidth , Math , matchContentsWidth ) } \n"}, {"code": "private String generateBlendModeImport ( BlendMode blendMode ) { \n\tif ( blendMode == BlendMode . COLOR ) $F1278 else if ( blendMode == BlendMode . COLORBURN ) $F1278 else if ( blendMode == BlendMode . COLORDODGE ) $F1278 else if ( blendMode == BlendMode . EXCLUSION ) $F1278 else if ( blendMode == BlendMode . HUE ) $F1278 else if ( blendMode == BlendMode . LUMINOSITY ) $F1278 else if ( blendMode == BlendMode . SATURATION ) $F1278 else if ( blendMode == BlendMode . SOFTLIGHT ) $F1278 else $F1274 } \n"}, {"code": "public static String parseIntToMetricSuffix ( int x ) { \n\t$F2544 ( xint , String , x ) if $F8991 ( xint ) { \n\t\t$F2899 ( xint ) } \n\telse if $F8991 ( xint ) { \n\t\t$F2899 ( xint ) } \n\treturn xint ; \n\t} \n"}, {"code": "public SmAuthStatus query ( String parameter , String secret , SmAuthQueryCode request , SmAuthQueryResponse response ) { \n\tif ( null == response ) { \n\t\treturn SmAuthStatus . SMAUTH_FAILURE ; \n\t\t} \n\tif ( SmAuthQueryCode . SMAUTH_QUERY_DESCRIPTION == request ) { \n\t\tresponse . setResponseBuffer ( SCHEME_DESCRIPTION ) ; \n\t\tresponse . setResponseCode ( SCHEME_VERSION ) ; \n\t\t} \n\telse if ( SmAuthQueryCode . SMAUTH_QUERY_CREDENTIALS_REQ == request ) { \n\t\tresponse . setResponseCode ( SmAuthQueryResponse . SMAUTH_CRED_BASIC ) ; \n\t\t} \n\telse { \n\t\treturn SmAuthStatus . SMAUTH_FAILURE ; \n\t\t} \n\treturn SmAuthStatus . SMAUTH_SUCCESS ; \n\t} \n"}, {"code": "protected void addAllTransitiveJars ( WarArchiveMerger wam ) throws MojoExecutionException { \n\tDependencyCalculator dc = new DependencyCalculator ( artifactFactory , resolver , localRepository , remoteRepositories , mavenProject , mavenProjectBuilder , installer , container ) ; \n\ttry { \n\t\tfor ( File f : dc . execute ( ) ) { \n\t\t\twam . addMergeItem ( f ) ; \n\t\t\t} \n\t\t} \n\tcatch ( Exception ex ) { \n\t\tthrow new MojoExecutionException ( NUM00 , ex ) ; \n\t\t} \n\t} \n"}, {"code": "private void add ( int col , GraphicalNode graphicalNode ) { \n\tmyGraphicalNodes . remove ( graphicalNode ) ; \n\tif ( nbCols - NUM00 < col ) { \n\t\tnbCols = col + NUM00 ; \n\t\t} \n\tint row = NUM00 ; \n\twhile ( isOccupied ( row , col ) ) { \n\t\trow ++ ; \n\t\t} \n\tgraphicalNode . row = row ; \n\tgraphicalNode . col = col ; \n\tmyGraphicalNodes . add ( graphicalNode ) ; \n\t} \n"}, {"code": "private int addTonalComponents ( $F5415 spectrum , int numComponents , TonalComponent [ ] components ) { \n\tint lastPos = - NUM00 ; \n\tfor ( $F119 ( i , numComponents ) ) { \n\t\tlastPos = Math . max ( components [ i ] . pos + components [ i ] . numCoefs , lastPos ) ; \n\t\tfor ( int j = NUM00 ; \n\t\tj < components [ i ] . numCoefs ; \n\t\tj ++ ) { \n\t\t\tspectrum [ components [ i ] . pos + j ] += components [ i ] . coef [ j ] ; \n\t\t\t} \n\t\t} \n\treturn lastPos ; \n\t} \n"}, {"code": "public static List < UserLayer > extractUserLayers ( StyledLayerDescriptor sld ) { \n\tList < UserLayer > userLayerList = new ArrayList < UserLayer > $F72 ; \n\tif ( sld != null ) { \n\t\tfor ( StyledLayer layer : sld . layers ( ) ) { \n\t\t\tif ( layer instanceof UserLayer ) { \n\t\t\t\tUserLayer userLayer = ( UserLayer ) layer ; \n\t\t\t\tuserLayerList . add ( userLayer ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn userLayerList ; \n\t} \n"}, {"code": "public static void closeQuiet ( $F5466 Selector rsrc ) { \n\tif ( rsrc != null ) try { \n\t\tif $F23014 ( rsrc ) $F59 ( rsrc ) } \n\t$F20287 } \n"}, {"code": "private $F16501 diff_main $F35621 ( text1 , text2 , checklines , deadline ) { \n\t$F3541 ( text1 , text2 ) $F16501 diffs ; \n\tif $F1238 ( text1 , text2 ) { \n\t\tdiffs = new $F16501 $F72 ; \n\t\tif $F35625 ( text1 ) $F35630 ( diffs , Operation , text1 ) return diffs ; \n\t\t} \n\tint commonlength = diff_commonPrefix ( text1 , text2 ) ; \n\t$F11991 ( commonprefix , text1 , commonlength ) $F11978 ( text1 , commonlength ) $F11978 ( text2 , commonlength ) commonlength = diff_commonSuffix ( text1 , text2 ) ; \n\tString commonsuffix = $F35634 ( text1 , commonlength ) ; \n\t$F35641 ( text1 , commonlength ) $F35641 ( text2 , commonlength ) diffs = diff_compute ( text1 , text2 , checklines , deadline ) ; \n\tif $F35625 ( commonprefix ) { \n\t\tdiffs . addFirst ( $F35627 ( Operation , commonprefix ) ) ; \n\t\t} \n\tif $F35625 ( commonsuffix ) { \n\t\tdiffs . addLast ( $F35627 ( Operation , commonsuffix ) ) ; \n\t\t} \n\tdiff_cleanupMerge ( diffs ) ; \n\treturn diffs ; \n\t} \n"}, {"code": "public static boolean createCompactionRequiredFile ( String metaFolderPath , CompactionType compactionType ) { \n\tString statusFile ; \n\tif ( compactionType . equals ( CompactionType . MINOR_COMPACTION ) ) { \n\t\tstatusFile = metaFolderPath + CarbonCommonConstants . FILE_SEPARATOR + CarbonCommonConstants . minorCompactionRequiredFile ; \n\t\t} \n\telse { \n\t\tstatusFile = metaFolderPath + CarbonCommonConstants . FILE_SEPARATOR + CarbonCommonConstants . majorCompactionRequiredFile ; \n\t\t} \n\ttry { \n\t\tif ( ! FileFactory . isFileExist ( statusFile , FileFactory . getFileType ( statusFile ) ) ) { \n\t\t\tif ( FileFactory . createNewFile ( statusFile , FileFactory . getFileType ( statusFile ) ) ) { \n\t\t\t\t$F556 ( LOGGER , statusFile ) return _BOOL ; \n\t\t\t\t} \n\t\t\telse $F124420 ( LOGGER , statusFile , _BOOL ) } \n\t\telse $F68974 ( LOGGER , statusFile ) } \n\tcatch ( IOException e ) $F50614 ( LOGGER , e ) return _BOOL ; \n\t} \n"}, {"code": "private boolean allowNotificationEmission ( ObjectName name , TargetedNotification tn ) { \n\ttry { \n\t\tif ( checkNotificationEmission ) $F28986 ( checkMBeanPermission , name ) if ( notificationAccessController != null ) { \n\t\t\tnotificationAccessController . fetchNotification ( connectionId , name , tn . getNotification ( ) , getSubject ( ) ) ; \n\t\t\t} \n\t\treturn _BOOL ; \n\t\t} \n\tcatch ( SecurityException e ) { \n\t\tif ( logger . debugOn ( ) ) { \n\t\t\tlogger . debug ( NUM00 , NUM00 + tn . getNotification ( ) + NUM00 + NUM00 ) ; \n\t\t\t} \n\t\treturn _BOOL ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tif ( logger . debugOn ( ) ) { \n\t\t\tlogger . debug ( NUM00 , NUM00 + tn . getNotification ( ) + NUM00 + NUM00 + e ) ; \n\t\t\t} \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public void updateThroughput ( long currentTime ) { \n\t$F8934 ( throughputCalculationLock ) try { \n\t\t$F82462 ( interval , currentTime , lastThroughputCalculationTime ) long minInterval = getThroughputCalculationIntervalInMillis ( ) ; \n\t\tif ( ( minInterval == NUM00 ) || ( interval < minInterval ) ) $F932 long readBytes = this . readBytes ; \n\t\tlong writtenBytes = this . writtenBytes ; \n\t\tlong readMessages = this . readMessages ; \n\t\tlong writtenMessages = this . writtenMessages ; \n\t\treadBytesThroughput = ( readBytes - lastReadBytes ) * NUM00 / interval ; \n\t\twrittenBytesThroughput = ( writtenBytes - lastWrittenBytes ) * NUM00 / interval ; \n\t\treadMessagesThroughput = ( readMessages - lastReadMessages ) * NUM00 / interval ; \n\t\twrittenMessagesThroughput = ( writtenMessages - lastWrittenMessages ) * NUM00 / interval ; \n\t\t$F12283 ( readBytesThroughput , largestReadBytesThroughput ) $F12283 ( writtenBytesThroughput , largestWrittenBytesThroughput ) $F12283 ( readMessagesThroughput , largestReadMessagesThroughput ) $F12283 ( writtenMessagesThroughput , largestWrittenMessagesThroughput ) lastReadBytes = readBytes ; \n\t\tlastWrittenBytes = writtenBytes ; \n\t\tlastReadMessages = readMessages ; \n\t\tlastWrittenMessages = writtenMessages ; \n\t\tlastThroughputCalculationTime = currentTime ; \n\t\t} \n\t$F796 ( throughputCalculationLock ) } \n"}, {"code": "public List < VerificationOK > verify ( X509Certificate signCert , X509Certificate issuerCert , Date signDate ) throws GeneralSecurityException , IOException { \n\tRootStoreVerifier rootStoreVerifier = new RootStoreVerifier ( verifier ) ; \n\trootStoreVerifier . setRootStore ( rootStore ) ; \n\tCRLVerifier crlVerifier = new CRLVerifier ( rootStoreVerifier , getCRLsFromDSS ( ) ) ; \n\tcrlVerifier . setRootStore ( rootStore ) ; \n\tcrlVerifier . setOnlineCheckingAllowed ( latestRevision || onlineCheckingAllowed ) ; \n\tOCSPVerifier ocspVerifier = new OCSPVerifier ( crlVerifier , getOCSPResponsesFromDSS ( ) ) ; \n\tocspVerifier . setRootStore ( rootStore ) ; \n\tocspVerifier . setOnlineCheckingAllowed ( latestRevision || onlineCheckingAllowed ) ; \n\treturn ocspVerifier . verify ( signCert , issuerCert , signDate ) ; \n\t} \n"}, {"code": "protected $F8748 testWRTZeroR ( Classifier classifier , Evaluation evaluation , Instances train , Instances test ) throws Exception { \n\t$F125783 ( result ) evaluation . evaluateModel ( classifier , test ) ; \n\ttry { \n\t\tClassifier zeroR = new weka . classifiers . rules . ZeroR $F72 ; \n\t\tzeroR . buildClassifier ( train ) ; \n\t\tEvaluation zeroREval = new Evaluation ( train ) ; \n\t\tzeroREval . evaluateModel ( zeroR , test ) ; \n\t\tresult [ NUM00 ] = Utils . grOrEq ( zeroREval . errorRate ( ) , evaluation . errorRate ( ) ) ; \n\t\t} \n\tcatch ( Exception ex ) $F220112 ( ex ) return result ; \n\t} \n"}, {"code": "public void println $F72 { \n\tif ( addNewlines ) { \n\t\ttry $F12032 ( out ) catch ( IOException ioe ) { \n\t\t\tthrow new GroovyRuntimeException ( ioe ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F4058 ( doc , elementList , nameNode , child , childData , load , _BOOL , assertEquals ) "}, {"code": "public void deliveryComplete ( final IMqttDeliveryToken token ) { \n\tlogger . trace ( NUM00 , token . getMessageId ( ) ) ; \n\t} \n"}, {"code": "public DExportPublicKeyOpenSsl ( JFrame parent , String entryAlias ) { \n\t$F36748 ( super , parent , Dialog ) this . entryAlias = entryAlias ; \n\tinitComponents ( ) ; \n\t} \n"}, {"code": "public static String escapeUnicode ( String s ) { \n\t$F1749 ( len , s ) int i = NUM00 ; \n\twhile ( i < len ) { \n\t\t$F1280 ( ch , s , i ) if ( ch > NUM00 ) { \n\t\t\t$F83 ( buf ) $F6937 ( buf , s , i ) while ( i < len ) { \n\t\t\t\tch = s . charAt ( i ) ; \n\t\t\t\tif ( ch > NUM00 ) { \n\t\t\t\t\t$F84 ( buf ) buf . append ( Character . forDigit ( ( ch > > NUM00 ) % NUM00 , NUM00 ) ) ; \n\t\t\t\t\tbuf . append ( Character . forDigit ( ( ch > > NUM00 ) % NUM00 , NUM00 ) ) ; \n\t\t\t\t\tbuf . append ( Character . forDigit ( ( ch > > NUM00 ) % NUM00 , NUM00 ) ) ; \n\t\t\t\t\tbuf . append ( Character . forDigit ( ( ch ) % NUM00 , NUM00 ) ) ; \n\t\t\t\t\t} \n\t\t\t\telse $F288 ( buf , ch ) i ++ ; \n\t\t\t\t} \n\t\t\t$F6947 ( s , buf ) } \n\t\telse { \n\t\t\ti ++ ; \n\t\t\t} \n\t\t} \n\treturn s ; \n\t} \n"}, {"code": "public void keyPressed ( final int keyCode ) { \n\tif ( impl . getCurrentForm ( ) == null ) $F932 addSingleArgumentEvent ( KEY_PRESSED , keyCode ) ; \n\tlastInteractionWasKeypad = lastInteractionWasKeypad || ( keyCode != MenuBar . leftSK && keyCode != MenuBar . clearSK && keyCode != MenuBar . backSK ) ; \n\tkeyRepeatCharged = ( keyCode >= NUM00 || getGameAction ( keyCode ) > NUM00 ) || keyCode == impl . getClearKeyCode ( ) ; \n\tlongPressCharged = keyRepeatCharged ; \n\t$F3224 ( longKeyPressTime , System ) keyRepeatValue = keyCode ; \n\tnextKeyRepeatEvent = System . currentTimeMillis ( ) + keyRepeatInitialIntervalTime ; \n\tpreviousKeyPressed = lastKeyPressed ; \n\tlastKeyPressed = keyCode ; \n\t} \n"}, {"code": "public boolean isEmpty $F72 { \n\treturn $F38237 ( filter , query , sort ) ; \n\t} \n"}, {"code": "public $F806 readDirectory ( String dir ) { \n\t$F896 ( dir ) StringArrayOut listOut = new StringArrayOut $F72 ; \n\ttry { \n\t\tcheckResult ( LibIMobileDevice . afc_read_directory ( getRef ( ) , dir , listOut ) ) ; \n\t\tStringArray list = listOut . getValue ( ) ; \n\t\t$F8728 ( result ) if ( list != null ) { \n\t\t\tfor ( $F26577 ( i ) ) { \n\t\t\t\t$F1729 ( s , list , i ) $F32472 ( s ) result . add ( s ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F14862 ( result ) } \n\tfinally { \n\t\tLibIMobileDevice . delete_StringArray_values_z ( listOut . getValue ( ) ) ; \n\t\t$F1900 ( listOut ) } \n\t} \n"}, {"code": "public void registerInput ( String varName , JavaRDD $F4 rddIn , String format , long rlen , long clen , FileFormatProperties props , List < ValueType > schema ) throws DMLRuntimeException { \n\tif ( ! ( DMLScript . rtplatform == RUNTIME_PLATFORM . SPARK || DMLScript . rtplatform == RUNTIME_PLATFORM . HYBRID_SPARK ) ) { \n\t\t$F84329 } \n\tlong nnz = - NUM00 ; \n\tif ( _variables == null ) _variables = new LocalVariableMap $F72 ; \n\t$F185359 ( _inVarnames ) JavaPairRDD < LongWritable , Text > rddText = rddIn . mapToPair ( new ConvertStringToLongTextPair $F72 ) ; \n\tint blksz = ConfigurationManager . getBlocksize ( ) ; \n\tMatrixCharacteristics mc = new MatrixCharacteristics ( rlen , clen , blksz , blksz , nnz ) ; \n\tFrameObject fo = null ; \n\tif $F3057 ( format ) { \n\t\tCSVFileFormatProperties csvprops = ( props != null ) ? ( CSVFileFormatProperties ) props : new CSVFileFormatProperties $F72 ; \n\t\tfo = new FrameObject ( OptimizerUtils . getUniqueTempFileName ( ) , new MatrixFormatMetaData ( mc , OutputInfo . CSVOutputInfo , InputInfo . CSVInputInfo ) ) ; \n\t\tfo . setFileFormatProperties ( csvprops ) ; \n\t\t} \n\telse if $F3057 ( format ) { \n\t\tif $F44600 ( rlen , clen ) { \n\t\t\tthrow new DMLRuntimeException ( NUM00 + format ) ; \n\t\t\t} \n\t\tfo = new FrameObject ( null , new MatrixFormatMetaData ( mc , OutputInfo . TextCellOutputInfo , InputInfo . TextCellInputInfo ) ) ; \n\t\t} \n\telse { \n\t\tthrow new DMLRuntimeException ( NUM00 + format ) ; \n\t\t} \n\tif ( props != null ) fo . setFileFormatProperties ( props ) ; \n\tfo . setRDDHandle ( new RDDObject ( rddText , varName ) ) ; \n\tfo . setSchema ( NUM00 ) ; \n\t_variables . put ( varName , fo ) ; \n\t_inVarnames . add ( varName ) ; \n\tcheckIfRegisteringInputAllowed ( ) ; \n\t} \n"}, {"code": "public void checkNumberArgs ( int argNum ) throws WrongNumberArgsException { \n\tif ( argNum < NUM00 ) reportWrongNumberArgs ( ) ; \n\t} \n"}, {"code": "public static String fixLineFeeds ( String sql ) { \n\tif $F8908 ( sql ) { \n\t\treturn sql ; \n\t\t} \n\tboolean hasFixes = _BOOL ; \n\t$F7782 ( fixed , sql ) for ( $F1139 ( i , fixed ) ) { \n\t\tif ( fixed [ i ] == NUM00 && ( i == fixed . length - NUM00 || fixed [ i + NUM00 ] != NUM00 ) ) { \n\t\t\tfixed [ i ] = NUM00 ; \n\t\t\thasFixes = _BOOL ; \n\t\t\t} \n\t\t} \n\treturn hasFixes ? String . valueOf ( fixed ) : sql ; \n\t} \n"}, {"code": "public int compareTo ( Object obj ) { \n\tint diff = - NUM00 ; \n\tif ( obj instanceof ParserNotice ) { \n\t\tParserNotice p2 = ( ParserNotice ) obj ; \n\t\tdiff = level - p2 . getLevel ( ) ; \n\t\tif ( diff == NUM00 ) { \n\t\t\tdiff = line - p2 . getLine ( ) ; \n\t\t\tif ( diff == NUM00 ) { \n\t\t\t\tdiff = message . compareTo ( p2 . getMessage ( ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn diff ; \n\t} \n"}, {"code": "public static String mergePath ( String current , String realPath ) throws MalformedURLException { \n\tString currDir ; \n\tif ( current == null || $F8907 ( current ) ) currDir = NUM00 ; \n\telse if $F8991 ( current ) currDir = current ; \n\telse currDir = current . substring ( NUM00 , $F31603 ( current ) ) ; \n\tString path ; \n\tif $F3106 ( realPath ) path = currDir + realPath . substring ( NUM00 ) ; \n\telse if $F3106 ( realPath ) path = realPath ; \n\telse if $F14943 ( realPath ) path = currDir + realPath ; \n\telse { \n\t\twhile ( realPath . startsWith ( NUM00 ) || $F1276 ( currDir ) ) { \n\t\t\t$F3108 ( realPath ) $F8993 ( currDir ) $F24867 ( index , currDir ) if ( index == - NUM00 ) throw new MalformedURLException $F580 ; \n\t\t\tcurrDir = $F1399 ( currDir , index ) ; \n\t\t\t} \n\t\tpath = currDir + realPath ; \n\t\t} \n\treturn path ; \n\t} \n"}, {"code": "public void rollback $F72 throws SQLException { \n\tif ( useConnection == null ) $F23406 ( LOG ) try $F21746 ( useConnection ) catch ( SQLException e ) { \n\t\tLOG . warning ( $F5351 ( e ) ) ; \n\t\tthrow e ; \n\t\t} \n\t} \n"}, {"code": "public $F96 toByteArray $F72 { \n\tif ( headerNonce_ == null || headerTag_ == null ) { \n\t\tthrow new AwsCryptoException $F580 ; \n\t\t} \n\tfinal $F96 serializedFields = serializeAuthenticatedFields ( ) ; \n\tfinal int outLen = $F118127 ( serializedFields , headerNonce_ , headerTag_ ) ; \n\t$F14256 ( serializedBytes , ByteBuffer , outLen ) serializedBytes . put ( serializedFields ) ; \n\tserializedBytes . put ( headerNonce_ ) ; \n\tserializedBytes . put ( headerTag_ ) ; \n\t$F31057 ( serializedBytes ) } \n"}, {"code": "public boolean containsKey ( Object key ) { \n\treturn context . getAttribute ( ( String ) key ) != null ; \n\t} \n"}, {"code": "private void updateLimit ( int limit ) { \n\tcurrentCycle . setLimit ( limit ) ; \n\tupdatePlanCycles ( ) ; \n\tconfirmUpdate . setTextColor ( resources . getColor ( R . color . light_gray ) ) ; \n\t} \n"}, {"code": "$F1431 public Set $F50398 descendants $F72 { \n\tSet $F50398 $F9626 ( perms ) ; \n\tfor ( S child : children ) { \n\t\tperms . add ( child ) ; \n\t\tperms . addAll ( child . descendants ( ) ) ; \n\t\t} \n\treturn perms ; \n\t} \n"}, {"code": "private String extractUrl ( String sharedUrl ) { \n\tString finalUrl ; \n\t$F206094 ( finalUrl , sharedUrl ) $F6542 ( possible_urls , finalUrl ) for ( String url : possible_urls ) { \n\t\tif ( NetworkManager . isUrl ( url ) ) $F3468 ( finalUrl , url ) } \n\tfinalUrl = $F31604 ( finalUrl ) ; \n\tfinalUrl = $F31604 ( finalUrl ) ; \n\tif ( NetworkManager . isUrl ( NUM00 + finalUrl ) && ! NetworkManager . isUrl ( finalUrl ) ) $F21679 ( finalUrl ) if $F3578 ( finalUrl ) { \n\t\t$F31601 ( finalUrl ) } \n\tif $F3578 ( finalUrl ) { \n\t\t$F31601 ( finalUrl ) } \n\tif $F3578 ( finalUrl ) { \n\t\t$F31601 ( finalUrl ) } \n\treturn finalUrl ; \n\t} \n"}, {"code": "public Set entrySet $F72 { \n\treturn map . entrySet ( ) ; \n\t} \n"}, {"code": "public static String encode ( String input ) { \n\treturn Base64 . encodeBase64String ( $F43004 ( input , StandardCharsets ) ) ; \n\t} \n"}, {"code": "$F31396 ( str , retval , ch , i , s , Integer ) "}, {"code": "public void addSplit ( String splitLabel ) { \n\t$F5453 ( mDisabled ) $F68120 ( now , SystemClock ) mSplits . add ( now ) ; \n\tmSplitLabels . add ( splitLabel ) ; \n\t} \n"}, {"code": "protected String encode ( final String value ) { \n\ttry $F31978 ( URLEncoder , value ) catch ( Exception exp ) { \n\t\treturn value ; \n\t\t} \n\t} \n"}, {"code": "private void checkConnectPermission $F72 throws SecurityException { \n\t$F8108 ( security , System ) $F8249 ( security ) if ( security != cacheSecurityManager ) { \n\t\tokContext = null ; \n\t\tauthcache = new WeakHashMap < AccessControlContext , Reference < AccessControlContext > > $F72 ; \n\t\tcacheSecurityManager = security ; \n\t\t} \n\tAccessControlContext ctx = AccessController . getContext ( ) ; \n\tif ( okContext == null || ! ( okContext . equals ( ctx ) || authcache . containsKey ( ctx ) ) ) { \n\t\tsecurity . checkConnect ( ep . getHost ( ) , ep . getPort ( ) ) ; \n\t\tauthcache . put ( ctx , new SoftReference < AccessControlContext > ( ctx ) ) ; \n\t\t} \n\tokContext = ctx ; \n\t} \n"}, {"code": "private boolean conditionL0 ( String value , int index ) { \n\tif ( $F19341 ( index , value ) && contains ( value , index - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\telse if ( ( contains ( value , index - NUM00 , NUM00 , NUM00 , NUM00 ) || contains ( value , $F1092 ( value ) , NUM00 , NUM00 , NUM00 ) ) && contains ( value , index - NUM00 , NUM00 , NUM00 ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\telse { \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public static PaginationContext fromContext ( RoutingContext context ) { \n\tHttpServerRequest request = context . request ( ) ; \n\tString pageStr = request . getParam ( PaginationContext . CURRENT_PAGE_QUERY_PARAM ) ; \n\tString perPageStr = request . getParam ( PaginationContext . PER_PAGE_QUERY_PARAM ) ; \n\tInteger page = null ; \n\tInteger perPage = null ; \n\ttry { \n\t\tif ( pageStr != null ) $F37473 ( page , Integer , pageStr ) if ( perPageStr != null ) $F37473 ( perPage , Integer , perPageStr ) } \n\tcatch ( NumberFormatException e ) { \n\t\tDefaultErrorHandler . badRequest ( context , NUM00 ) ; \n\t\t} \n\tif ( perPage != null && perPage > PaginationContext . MAX_PER_PAGE ) { \n\t\tDefaultErrorHandler . badRequest ( context , NUM00 + PaginationContext . PER_PAGE_QUERY_PARAM + NUM00 + PaginationContext . MAX_PER_PAGE ) ; \n\t\t} \n\treturn new PaginationContext ( page , perPage ) ; \n\t} \n"}, {"code": "private void updateDataTypeState $F72 { \n\tboolean isSyncEnabled = mSyncSwitchPreference . isChecked ( ) ; \n\tboolean syncEverything = mSyncEverything . isChecked ( ) ; \n\tboolean passwordSyncConfigurable = mProfileSyncService . isBackendInitialized ( ) && mProfileSyncService . isCryptographerReady ( ) ; \n\tfor ( CheckBoxPreference pref : mAllTypes ) { \n\t\tboolean canSyncType = pref != mSyncPasswords || passwordSyncConfigurable ; \n\t\tif ( ! isSyncEnabled ) { \n\t\t\tpref . setChecked ( _BOOL ) ; \n\t\t\t} \n\t\telse if ( syncEverything ) { \n\t\t\tpref . setChecked ( canSyncType ) ; \n\t\t\t} \n\t\tpref . setEnabled ( isSyncEnabled && ! syncEverything && canSyncType ) ; \n\t\t} \n\tif ( isSyncEnabled && ! syncEverything ) { \n\t\t$F11868 syncTypes = mProfileSyncService . getPreferredDataTypes ( ) ; \n\t\tmSyncAutofill . setChecked ( syncTypes . contains ( ModelType . AUTOFILL ) ) ; \n\t\tmSyncBookmarks . setChecked ( syncTypes . contains ( ModelType . BOOKMARKS ) ) ; \n\t\tmSyncOmnibox . setChecked ( syncTypes . contains ( ModelType . TYPED_URLS ) ) ; \n\t\tmSyncPasswords . setChecked ( passwordSyncConfigurable && syncTypes . contains ( ModelType . PASSWORDS ) ) ; \n\t\tmSyncRecentTabs . setChecked ( syncTypes . contains ( ModelType . PROXY_TABS ) ) ; \n\t\tmSyncSettings . setChecked ( syncTypes . contains ( ModelType . PRIORITY_PREFERENCES ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static void writeProteinBestMatchesToFile ( String filePath , Map $F186135 proteinIdBestMatchMap ) throws IOException { \n\tBufferedWriter writer = null ; \n\ttry { \n\t\tFile file = createTmpFile ( filePath ) ; \n\t\tif $F1906 ( file ) $F1155 ( filePath ) $F92873 ( writer , file ) for ( $F3465 ( proteinId , proteinIdBestMatchMap ) ) { \n\t\t\tPIRSFHmmer2RawMatch bestMatch = proteinIdBestMatchMap . get ( proteinId ) ; \n\t\t\tif ( bestMatch != null ) { \n\t\t\t\twriter . write ( proteinId ) ; \n\t\t\t\t$F3410 ( writer ) writer . write ( bestMatch . getModelId ( ) ) ; \n\t\t\t\t$F3410 ( writer ) writer . write ( bestMatch . getSignatureLibraryRelease ( ) ) ; \n\t\t\t\t$F3410 ( writer ) writer . write ( String . valueOf ( bestMatch . getLocationStart ( ) ) ) ; \n\t\t\t\t$F3410 ( writer ) writer . write ( String . valueOf ( bestMatch . getLocationEnd ( ) ) ) ; \n\t\t\t\t$F3410 ( writer ) writer . write ( String . valueOf ( bestMatch . getEvalue ( ) ) ) ; \n\t\t\t\t$F3410 ( writer ) writer . write ( String . valueOf ( bestMatch . getScore ( ) ) ) ; \n\t\t\t\t$F3410 ( writer ) writer . write ( String . valueOf ( bestMatch . getHmmStart ( ) ) ) ; \n\t\t\t\t$F3410 ( writer ) writer . write ( String . valueOf ( bestMatch . getHmmEnd ( ) ) ) ; \n\t\t\t\t$F3410 ( writer ) writer . write ( bestMatch . getHmmBounds ( ) ) ; \n\t\t\t\t$F3410 ( writer ) writer . write ( String . valueOf ( bestMatch . getLocationEvalue ( ) ) ) ; \n\t\t\t\t$F3410 ( writer ) writer . write ( String . valueOf ( bestMatch . getLocationScore ( ) ) ) ; \n\t\t\t\t$F3410 ( writer ) } \n\t\t\t} \n\t\t} \n\t$F14364 ( writer ) } \n"}, {"code": "$F22713 ( newVector , Collections , super ) "}, {"code": "void refreshUI ( String xml , DOMTree m_tree ) { \n\tif ( $F130157 ( xml ) ) { \n\t\tsetErrorMessage ( NUM00 , NUM00 ) ; \n\t\t$F665 } \n\tfinal Document newRoot = getRoot ( xml ) ; \n\tif ( newRoot == null ) { \n\t\tsetErrorMessage ( NUM00 , NUM00 ) ; \n\t\t$F665 } \n\tm_tree . setDocument ( newRoot ) ; \n\t} \n"}, {"code": "private void cleanupProtectionSetVolumes ( ProtectionSet protectionSet , $F3803 volumeIDs , boolean markProtectionSetForDeletion ) { \n\tif ( protectionSet != null ) { \n\t\t_log . info ( NUM00 , protectionSet . getLabel ( ) , volumeIDs . toString ( ) ) ; \n\t\tStringSet psetVolumes = protectionSet . getVolumes ( ) ; \n\t\tpsetVolumes . removeAll ( volumeIDs ) ; \n\t\tprotectionSet . setVolumes ( psetVolumes ) ; \n\t\tif ( markProtectionSetForDeletion ) { \n\t\t\tprotectionSet . setInactive ( _BOOL ) ; \n\t\t\t} \n\t\t_dbClient . updateObject ( protectionSet ) ; \n\t\t} \n\t} \n"}, {"code": "private static Normalization determineNormalization ( Element model ) { \n\tNormalization normMethod = Normalization . NONE ; \n\t$F9031 ( normName , model ) if $F3057 ( normName ) { \n\t\tnormMethod = Normalization . SIMPLEMAX ; \n\t\t} \n\telse if $F3057 ( normName ) { \n\t\tnormMethod = Normalization . SOFTMAX ; \n\t\t} \n\telse if $F3057 ( normName ) { \n\t\tnormMethod = Normalization . LOGIT ; \n\t\t} \n\telse if $F3057 ( normName ) { \n\t\tnormMethod = Normalization . PROBIT ; \n\t\t} \n\telse if $F3057 ( normName ) { \n\t\tnormMethod = Normalization . CLOGLOG ; \n\t\t} \n\telse if $F3057 ( normName ) { \n\t\tnormMethod = Normalization . EXP ; \n\t\t} \n\telse if $F3057 ( normName ) { \n\t\tnormMethod = Normalization . LOGLOG ; \n\t\t} \n\telse if $F3057 ( normName ) { \n\t\tnormMethod = Normalization . CAUCHIT ; \n\t\t} \n\treturn normMethod ; \n\t} \n"}, {"code": "Operand pop ( Register s ) { \n\tStack < Operand > stack = get ( s ) ; \n\tif ( stack == null ) { \n\t\tthrow new OptimizingCompilerException $F580 ; \n\t\t} \n\telse { \n\t\treturn stack . pop ( ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void startElement $F42838 ( uri , localName , qName , attributes ) throws SAXException { \n\telementValue = new StringBuilder $F580 ; \n\telementOn = _BOOL ; \n\tif $F1238 ( localName , ITEM_TITLE ) { \n\t\tepisode = new Episode $F72 ; \n\t\tisItem = _BOOL ; \n\t\t} \n\tif ( localName . equalsIgnoreCase ( MP3_1 ) && isItem ) { \n\t\tepisode . setLength ( attributes . getValue ( LENGTH ) ) ; \n\t\tepisode . setAudeoUrl ( attributes . getValue ( MP3_3 ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static void backAndForth ( HGSearchResult $F1011 rs , int windowSize , int iteration ) { \n\tboolean advance = _BOOL ; \n\tfor ( $F119 ( i , iteration ) ) { \n\t\tObject x = rs . current ( ) ; \n\t\tint steps = random ( windowSize ) ; \n\t\tsteps = forward ( rs , steps ) ; \n\t\tif ( back ( rs , steps ) != steps ) throw new RuntimeException ( NUM00 + steps + NUM00 ) ; \n\t\tif ( ! x . equals ( rs . current ( ) ) ) throw new RuntimeException ( NUM00 + steps + NUM00 + x ) ; \n\t\tif ( advance ) { \n\t\t\tforward ( rs , random ( windowSize ) ) ; \n\t\t\tif $F87568 ( rs ) { \n\t\t\t\tback ( rs , random ( windowSize ) ) ; \n\t\t\t\tadvance = _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tback ( rs , random ( windowSize ) ) ; \n\t\t\tif ( ! rs . hasPrev ( ) ) { \n\t\t\t\tforward ( rs , random ( windowSize ) ) ; \n\t\t\t\tadvance = _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F1 public void close $F72 throws IOException { \n\tsynchronized ( lock ) { \n\t\t$F195699 ( decoder ) decoder = null ; \n\t\t$F39863 ( in ) } \n\t} \n"}, {"code": "public $F3803 provideWhiteList $F72 { \n\t$F127233 ( whiteList ) $F18793 ( whiteList ) return whiteList ; \n\t} \n"}, {"code": "public boolean hasName ( final String name ) { \n\tfor ( final String n : names ) $F72434 ( n , name , _BOOL ) return _BOOL ; \n\t} \n"}, {"code": "$F1 public Double zincrby ( final String key , final double score , final String member ) { \n\tcheckIsInMultiOrPipeline ( ) ; \n\tclient . zincrby ( key , score , member ) ; \n\tString newscore = client . getBulkReply ( ) ; \n\t$F33236 ( Double , newscore ) } \n"}, {"code": "private StringBuffer _toPattern ( StringBuffer result , boolean escapeUnprintable ) { \n\tif ( pat != null ) { \n\t\tint i ; \n\t\tint backslashCount = NUM00 ; \n\t\tfor ( i = NUM00 ; \n\t\ti < pat . length ( ) ; \n\t\t) { \n\t\t\tint c = UTF16 . charAt ( pat , i ) ; \n\t\t\ti += UTF16 . getCharCount ( c ) ; \n\t\t\tif ( escapeUnprintable && Utility . isUnprintable ( c ) ) { \n\t\t\t\tif $F91889 ( backslashCount ) { \n\t\t\t\t\t$F90455 ( result ) } \n\t\t\t\tUtility . escapeUnprintable ( result , c ) ; \n\t\t\t\tbackslashCount = NUM00 ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tUTF16 . append ( result , c ) ; \n\t\t\t\tif ( c == NUM00 ) { \n\t\t\t\t\t++ backslashCount ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tbackslashCount = NUM00 ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\treturn result ; \n\t\t} \n\treturn _generatePattern ( result , escapeUnprintable , _BOOL ) ; \n\t} \n"}, {"code": "private static Version readWorkspaceVersion ( final URL workspace ) { \n\tfinal File versionFile = getVersionFile ( workspace , _BOOL ) ; \n\tif $F7108 ( versionFile ) $F1337 try { \n\t\t$F859 ( props ) $F197755 ( is , versionFile ) try $F46567 ( props , is ) $F3229 ( is ) $F7601 ( versionString , props , WORKSPACE_CHECK_REFERENCE_BUNDLE_NAME ) if ( versionString != null ) { \n\t\t\treturn Version . parseVersion ( versionString ) ; \n\t\t\t} \n\t\tversionString = props . getProperty ( WORKSPACE_CHECK_REFERENCE_BUNDLE_NAME_LEGACY ) ; \n\t\tif ( versionString != null ) { \n\t\t\treturn Version . parseVersion ( versionString ) ; \n\t\t\t} \n\t\t$F1274 } \n\tcatch ( final IOException e ) { \n\t\tIDEWorkbenchPlugin . log ( NUM00 + versionFile , new Status ( IStatus . ERROR , IDEWorkbenchPlugin . IDE_WORKBENCH , IStatus . ERROR , e . getMessage ( ) == null ? NUM00 : e . getMessage ( ) , e ) ) ; \n\t\t$F1274 } \n\tcatch ( final IllegalArgumentException e ) { \n\t\tIDEWorkbenchPlugin . log ( NUM00 + versionFile , new Status ( IStatus . ERROR , IDEWorkbenchPlugin . IDE_WORKBENCH , IStatus . ERROR , e . getMessage ( ) == null ? NUM00 : e . getMessage ( ) , e ) ) ; \n\t\t$F1274 } \n\t} \n"}, {"code": "public VectorApproximation calculateApproximation ( DBID id , V dv ) { \n\t$F2027 approximation = new int [ dv . getDimensionality ( ) ] ; \n\tfor ( $F1139 ( d , splitPositions ) ) { \n\t\t$F42661 ( val , dv , d ) final int lastBorderIndex = splitPositions [ d ] . length - NUM00 ; \n\t\tif ( val < splitPositions [ d ] [ NUM00 ] ) { \n\t\t\tapproximation [ d ] = NUM00 ; \n\t\t\tif ( id != null ) $F18144 ( LOG ) } \n\t\telse if ( val > splitPositions [ d ] [ lastBorderIndex ] ) { \n\t\t\tapproximation [ d ] = lastBorderIndex - NUM00 ; \n\t\t\tif ( id != null ) $F18144 ( LOG ) } \n\t\telse { \n\t\t\tint pos = Arrays . binarySearch ( splitPositions [ d ] , val ) ; \n\t\t\tpos = ( pos >= NUM00 ) ? pos : ( ( - pos ) - NUM00 ) ; \n\t\t\tapproximation [ d ] = pos ; \n\t\t\t} \n\t\t} \n\treturn new VectorApproximation ( id , approximation ) ; \n\t} \n"}, {"code": "private boolean checkIfVolumeSizeExceedingPoolSize ( $F50603 inArgs , $F50603 outArgs ) { \n\tif ( getVolumeSize ( inArgs ) > getVolumeSize ( outArgs ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "$F1431 private void log ( String label , ByteBuffer buffer ) { \n\t$F83 ( sb ) sb . append ( label ) ; \n\t$F84 ( sb ) $F189697 ( sb , buffer ) $F84 ( sb ) for ( $F6268 ( x ) ) { \n\t\tsb . append ( String . format ( NUM00 , ( int ) ( buffer . get ( x ) & NUM00 ) ) ) ; \n\t\t$F84 ( sb ) } \n\t$F62755 ( mLog , sb ) } \n"}, {"code": "private void readObject ( ObjectInputStream ois ) throws $F125668 { \n\t$F6428 ( ois ) $F6622 ( hasFont , ois ) if ( hasFont ) { \n\t\tString $F128845 ( name , ois ) ; \n\t\t$F5952 ( size , ois ) $F5952 ( style , ois ) font = new Font ( name , style , size ) ; \n\t\t} \n\telse { \n\t\tfont = OMText . DEFAULT_FONT ; \n\t\t} \n\t} \n"}, {"code": "public void addFile ( String filename ) { \n\tif ( filename != null ) $F1250 ( addFile , filename ) ; \n\t} \n"}, {"code": "public String format ( TemporalAccessor temporal ) { \n\t$F20818 ( buf ) formatTo ( temporal , buf ) ; \n\t$F92 ( buf ) } \n"}, {"code": "public void paintToggleButtonBackground $F147434 ( context , g , x , y , w , h ) $F72336 ( paintBackground , context , g , x , y , w , h ) "}, {"code": "void saveDeviceProfile ( $F2304 String user , $F2304 String realm , $F2304 OathDeviceSettings deviceSettings ) throws AuthLoginException { \n\tReject . ifNull ( user , realm , deviceSettings ) ; \n\ttry { \n\t\tdevicesDao . saveDeviceProfiles ( user , realm , jsonUtils . toJsonValues ( Collections . singletonList ( deviceSettings ) ) ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\tdebug . error ( NUM00 , user , realm , e ) ; \n\t\tthrow new AuthLoginException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "protected $F3803 parametersToStringList ( $F292037 parameters ) { \n\t$F24645 ( list ) for ( Parameter parameter : parameters ) { \n\t\tlist . add ( String . format ( NUM00 , parameter . getName ( ) , parameter . getValue ( ) ) ) ; \n\t\t} \n\treturn list ; \n\t} \n"}, {"code": "public static boolean isMatchingName ( String nameA , String nameB ) { \n\t$F1749 ( a , nameA ) $F1749 ( b , nameB ) if ( a == b ) $F23588 ( nameA , nameB ) else if ( a < b - NUM00 ) { \n\t\treturn nameB . endsWith ( nameA ) && nameB . charAt ( b - a - NUM00 ) == NUM00 ; \n\t\t} \n\telse if ( b < a - NUM00 ) { \n\t\treturn nameA . endsWith ( nameB ) && nameA . charAt ( a - b - NUM00 ) == NUM00 ; \n\t\t} \n\telse { \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "private void validateWill ( String dest , Object payload ) { \n\tif $F54923 ( dest , payload ) $F26853 MqttAsyncClient . validateTopic ( dest ) ; \n\t} \n"}, {"code": "public static float ccpCalcRotate ( final CGPoint from , final CGPoint to ) { \n\tfloat o = to . x - from . x ; \n\tfloat a = to . y - from . y ; \n\tfloat at = ccMacros . CC_RADIANS_TO_DEGREES ( ( float ) Math . atan ( o / a ) ) ; \n\tif ( a < NUM00 ) { \n\t\tif ( o < NUM00 ) at = NUM00 + Math . abs ( at ) ; \n\t\telse at = NUM00 - Math . abs ( at ) ; \n\t\t} \n\treturn at ; \n\t} \n"}, {"code": "public static String cleanTabs ( String yaml ) { \n\tif $F3578 ( yaml ) { \n\t\tLOGGER . warn ( $F38 , TAB_AS_SPACES . length ( ) ) ; \n\t\t$F3803 lines = NEWLINE_SPLITTER . splitToList ( yaml ) ; \n\t\t$F83 ( sb ) for ( String line : lines ) { \n\t\t\tString cleanLine = replaceStartingTabsWithSpaces ( line ) ; \n\t\t\tsb . append ( cleanLine ) ; \n\t\t\t$F84 ( sb ) } \n\t\t$F92 ( sb ) } \n\telse { \n\t\treturn yaml ; \n\t\t} \n\t} \n"}, {"code": "private static Paint darkerRadialGradientPaint ( RadialGradientPaint paint ) { \n\tfinal $F197086 paintColors = paint . getColors ( ) ; \n\tfor ( $F1139 ( i , paintColors ) ) { \n\t\tpaintColors [ i ] = darker ( paintColors [ i ] ) ; \n\t\t} \n\treturn new RadialGradientPaint ( paint . getCenterPoint ( ) , paint . getRadius ( ) , paint . getFocusPoint ( ) , paint . getFractions ( ) , paintColors , paint . getCycleMethod ( ) , paint . getColorSpace ( ) , paint . getTransform ( ) ) ; \n\t} \n"}, {"code": "private void checkAndSetFastPathStatus $F72 { \n\tboolean fastPathWasOn = isFastPath ; \n\tif ( ( roundingMode == RoundingMode . HALF_EVEN ) && ( isGroupingUsed ( ) ) && ( groupingSize == NUM00 ) && ( multiplier == NUM00 ) && ( ! decimalSeparatorAlwaysShown ) && ( ! useExponentialNotation ) ) { \n\t\tisFastPath = ( ( minimumIntegerDigits == NUM00 ) && ( maximumIntegerDigits >= NUM00 ) ) ; \n\t\tif ( isFastPath ) { \n\t\t\tif ( isCurrencyFormat ) { \n\t\t\t\tif $F264250 ( minimumFractionDigits , maximumFractionDigits ) isFastPath = _BOOL ; \n\t\t\t\t} \n\t\t\telse if $F264250 ( minimumFractionDigits , maximumFractionDigits ) isFastPath = _BOOL ; \n\t\t\t} \n\t\t} \n\telse isFastPath = _BOOL ; \n\tif ( isFastPath ) { \n\t\tif ( fastPathData == null ) fastPathData = new FastPathData $F72 ; \n\t\tfastPathData . zeroDelta = symbols . getZeroDigit ( ) - NUM00 ; \n\t\tfastPathData . groupingChar = symbols . getGroupingSeparator ( ) ; \n\t\tfastPathData . fractionalMaxIntBound = ( isCurrencyFormat ) ? NUM00 : NUM00 ; \n\t\tfastPathData . fractionalScaleFactor = ( isCurrencyFormat ) ? NUM00 : NUM00 ; \n\t\tfastPathData . positiveAffixesRequired = $F35625 ( positivePrefix ) || $F35625 ( positiveSuffix ) ; \n\t\tfastPathData . negativeAffixesRequired = $F35625 ( negativePrefix ) || $F35625 ( negativeSuffix ) ; \n\t\tint maxNbIntegralDigits = NUM00 ; \n\t\tint maxNbGroups = NUM00 ; \n\t\tint containerSize = Math . max ( positivePrefix . length ( ) , negativePrefix . length ( ) ) + maxNbIntegralDigits + maxNbGroups + NUM00 + maximumFractionDigits + Math . max ( positiveSuffix . length ( ) , negativeSuffix . length ( ) ) ; \n\t\tfastPathData . fastPathContainer = new char [ containerSize ] ; \n\t\tfastPathData . charsPositiveSuffix = positiveSuffix . toCharArray ( ) ; \n\t\tfastPathData . charsNegativeSuffix = negativeSuffix . toCharArray ( ) ; \n\t\tfastPathData . charsPositivePrefix = positivePrefix . toCharArray ( ) ; \n\t\tfastPathData . charsNegativePrefix = negativePrefix . toCharArray ( ) ; \n\t\tint longestPrefixLength = Math . max ( positivePrefix . length ( ) , negativePrefix . length ( ) ) ; \n\t\tint decimalPointIndex = maxNbIntegralDigits + maxNbGroups + longestPrefixLength ; \n\t\tfastPathData . integralLastIndex = decimalPointIndex - NUM00 ; \n\t\tfastPathData . fractionalFirstIndex = decimalPointIndex + NUM00 ; \n\t\tfastPathData . fastPathContainer [ decimalPointIndex ] = isCurrencyFormat ? symbols . getMonetaryDecimalSeparator ( ) : symbols . getDecimalSeparator ( ) ; \n\t\t} \n\telse if ( fastPathWasOn ) { \n\t\tfastPathData . fastPathContainer = null ; \n\t\tfastPathData . charsPositiveSuffix = null ; \n\t\tfastPathData . charsNegativeSuffix = null ; \n\t\tfastPathData . charsPositivePrefix = null ; \n\t\tfastPathData . charsNegativePrefix = null ; \n\t\t} \n\tfastPathCheckNeeded = _BOOL ; \n\t} \n"}, {"code": "public void test_keyBuilder_ascii_order $F72 { \n\tKeyBuilder keyBuilder = ( KeyBuilder ) KeyBuilder . newInstance ( ) ; \n\tKVO $F4 [ ] a = new KVO [ ] { \n\t\tnew KVO $F4 ( TestKeyBuilder . asSortKey ( NUM00 ) , null , NUM00 ) , new KVO $F4 ( TestKeyBuilder . asSortKey ( NUM00 ) , null , NUM00 ) , new KVO $F4 ( TestKeyBuilder . asSortKey ( NUM00 ) , null , NUM00 ) , new KVO $F4 ( TestKeyBuilder . asSortKey ( NUM00 ) , null , NUM00 ) } \n\t; \n\tArrays . sort ( a ) ; \n\tassertEquals ( NUM00 , a [ NUM00 ] . obj ) ; \n\tassertEquals ( NUM00 , a [ NUM00 ] . obj ) ; \n\tassertEquals ( NUM00 , a [ NUM00 ] . obj ) ; \n\tassertEquals ( NUM00 , a [ NUM00 ] . obj ) ; \n\t} \n"}, {"code": "public boolean isClickTouchScreen $F72 { \n\tString s = DeviceInfo . getSoftwareVersion ( ) ; \n\tif $F4012 ( s ) { \n\t\t$F215024 ( v , Integer , s ) return v <= NUM00 ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public DOMTestDocumentBuilderFactory newInstance $F230110 ( newSettings ) throws DOMTestIncompatibleException { \n\t$F1933 ( newSettings , this ) $F230109 mergedSettings = mergeSettings ( newSettings ) ; \n\treturn new LSDocumentBuilderFactory ( mergedSettings ) ; \n\t} \n"}, {"code": "public void reset $F72 { \n\tindex = NUM00 ; \n\tif ( file != null ) { \n\t\tlistIndex = NUM00 ; \n\t\tif ( ! written ) $F62354 ( writeAllRows , written , _BOOL ) $F725 ( list ) file . seek ( FileStore . HEADER_LENGTH ) ; \n\t\t} \n\t} \n"}, {"code": "public void add ( GeometryFunction func ) { \n\tfunctions . add ( func ) ; \n\t$F20063 ( sortedFunctions , func ) categorizedFunctions . put ( func . getCategory ( ) , func . getName ( ) , func ) ; \n\tif ( hasGeometryResult ( func ) ) categorizedGeometryFunctions . put ( func . getCategory ( ) , func . getName ( ) , func ) ; \n\t} \n"}, {"code": "public void fireStateChanged $F72 { \n\tChangeEvent e = new ChangeEvent ( this ) ; \n\tfor ( ChangeListener listener : listeners ) { \n\t\tlistener . stateChanged ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public static Clusters convertToClusters ( Graph clusterGraph , $F27878 measuredVariables ) { \n\t$F24645 ( latents ) Clusters clusters = new Clusters $F72 ; \n\tclusterGraph = GraphUtils . replaceNodes ( clusterGraph , measuredVariables ) ; \n\tfor ( $F23283 ( node , clusterGraph ) ) { \n\t\tif $F2200 ( measuredVariables , node ) $F29791 ( latents , node ) } \n\tCollections . sort ( latents ) ; \n\tfor ( $F2277 ( i , latents ) ) { \n\t\t$F1729 ( name , latents , i ) clusters . setClusterName ( i , name ) ; \n\t\tNode latent = clusterGraph . getNode ( name ) ; \n\t\t$F27878 measured = clusterGraph . getNodesOutTo ( latent , Endpoint . ARROW ) ; \n\t\tfor ( Node _node : measured ) { \n\t\t\tif $F105 ( measuredVariables , _node ) { \n\t\t\t\tclusters . addToCluster ( i , _node . getName ( ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn clusters ; \n\t} \n"}, {"code": "final short rlshort ( DataInputStream dis ) throws IOException { \n\tshort s = NUM00 ; \n\tshort high , low ; \n\t$F11214 ( s , dis ) high = ( short ) $F74254 ( s ) ; \n\tlow = ( short ) ( ( s & NUM00 ) > > > NUM00 ) ; \n\ts = ( short ) ( high | low ) ; \n\treturn s ; \n\t} \n"}, {"code": "public void encodeCell ( mxICell cell , Node node , boolean includeChildren ) { \n\tnode . appendChild ( encode ( cell ) ) ; \n\tif ( includeChildren ) { \n\t\t$F192758 ( childCount , cell ) for ( $F119 ( i , childCount ) ) { \n\t\t\tencodeCell ( cell . getChildAt ( i ) , node , includeChildren ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public DateTimeFormatter withLocale ( Locale locale ) { \n\tif ( locale == getLocale ( ) || ( locale != null && $F19068 ( locale , getLocale ) ) ) { \n\t\treturn this ; \n\t\t} \n\treturn new DateTimeFormatter ( iPrinter , iParser , locale , iOffsetParsed , iChrono , iZone , iPivotYear , iDefaultYear ) ; \n\t} \n"}, {"code": "public void testIterate $F72 { \n\t$F271415 ( range , createRange ) int next = NUM00 ; \n\t$F242733 ( iter , range ) while $F2921 ( iter ) { \n\t\tfinal Object value = iter . next ( ) ; \n\t\tassertEquals ( NUM00 , createValue ( next ++ ) , value ) ; \n\t\t} \n\tassertEquals ( NUM00 , NUM00 , next ) ; \n\ttry { \n\t\t$F24630 ( iter ) fail ( NUM00 ) ; \n\t\t} \n\tcatch ( NoSuchElementException ignore ) $F845 } \n"}, {"code": "public String nextString ( char quote ) throws JSONException { \n\tchar c ; \n\t$F83 ( sb ) for ( $F589 ) { \n\t\tc = next ( ) ; \n\t\tswitch ( c ) { \n\t\t\t$F3366 $F1262 $F1262 throw syntaxError ( NUM00 ) ; \n\t\t\t$F1262 c = next ( ) ; \n\t\t\tswitch ( c ) { \n\t\t\t\t$F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F1262 sb . append ( ( char ) Integer . parseInt ( next ( NUM00 ) , NUM00 ) ) ; \n\t\t\t\t$F597 $F1262 $F1262 $F1262 $F1262 sb . append ( c ) ; \n\t\t\t\t$F597 $F248192 ( syntaxError ) } \n\t\t\t$F597 $F1267 if ( c == quote ) $F2495 ( sb ) sb . append ( c ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static Response parseXML ( String xml ) throws SAMLException { \n\tDocument doc = XMLUtils . toDOMDocument ( xml , SAMLUtils . debug ) ; \n\t$F9029 ( root , doc ) return new Response ( root ) ; \n\t} \n"}, {"code": "$F3874 ( tag , msg , args , sLevel , LEVEL_DEBUG , String , Log ) "}, {"code": "public CompiledSQL registerParamType ( String paramName , String dataType ) { \n\t$F12777 ( paramTypes ) paramTypes . put ( paramName , dataType ) ; \n\treturn this ; \n\t} \n"}, {"code": "public void beginStep ( int step , String stepTitle , Logging logger ) { \n\tsetProcessed ( step - NUM00 ) ; \n\tthis . stepTitle = stepTitle ; \n\tlogger . progress ( this ) ; \n\t} \n"}, {"code": "public boolean equals ( Object obj ) { \n\tif ( this == obj ) { \n\t\treturn _BOOL ; \n\t\t} \n\telse if ( ! ( obj instanceof MethodDesc ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tMethodDesc od = ( MethodDesc ) obj ; \n\treturn ( $F389590 ( name , od ) && $F3629 ( Arrays , types , od ) && $F389590 ( constraints , od ) ) ; \n\t} \n"}, {"code": "public $F2689 addContent ( DialogueState newState ) { \n\tif ( ! paused ) { \n\t\tcurState . addToState ( newState ) ; \n\t\treturn update ( ) ; \n\t\t} \n\telse $F31719 ( log , newState , Collections ) } \n"}, {"code": "public long removeIndex ( int index ) { \n\tif ( index >= size ) throw new IndexOutOfBoundsException $F45942 ( String , index ) ; \n\t$F2469 items = this . items ; \n\tlong value = items [ index ] ; \n\tsize -- ; \n\tif ( ordered ) $F108014 ( System , items , index , size ) else items [ index ] = items [ size ] ; \n\treturn value ; \n\t} \n"}, {"code": "public FDModel loadModel ( String filename , String cwd ) { \n\tString fn = filename ; \n\t$F1275 ( fn ) if ( ! fn . endsWith ( NUM00 + fileExtension ) ) { \n\t\tfn += NUM00 + fileExtension ; \n\t\t} \n\tModelPersistenceHandler persistenceHandler = $F47063 ( createModelPersistenceHandler , resourceSetProvider ) ; \n\treturn ( FDModel ) persistenceHandler . loadModel ( fn , cwd ) ; \n\t} \n"}, {"code": "public boolean saveCurrentConfiguration $F72 { \n\tif ( currentConfig . toString ( ) == null ) $F3139 ( _BOOL ) int answer = JOptionPane . showConfirmDialog ( null , NUM00 , NUM00 , JOptionPane . YES_NO_CANCEL_OPTION , JOptionPane . QUESTION_MESSAGE , Icons . getImageIcon ( NUM00 ) ) ; \n\tif ( answer == JOptionPane . CANCEL_OPTION ) $F3139 ( _BOOL ) else if ( answer == JOptionPane . NO_OPTION ) $F3139 ( _BOOL ) return ( saveCurrentConfigurationAs ( _BOOL ) ) ; \n\t} \n"}, {"code": "public static $F1986 normalise $F9830 ( initProbs ) { \n\tfor ( $F1139 ( i , initProbs ) ) { \n\t\tif ( initProbs [ i ] < NUM00 ) $F5629 ( initProbs , i ) } \n\tdouble sum = NUM00 ; \n\tfor ( double prob : initProbs ) { \n\t\tsum += prob ; \n\t\t} \n\t$F40939 ( result , initProbs ) if ( sum > NUM00 ) { \n\t\tfor ( $F1139 ( i , initProbs ) ) { \n\t\t\tresult [ i ] = initProbs [ i ] / sum ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tfor ( $F1139 ( i , initProbs ) ) { \n\t\t\tresult [ i ] = NUM00 / initProbs . length ; \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public void track ( File file , Object marker , FileDeleteStrategy deleteStrategy ) { \n\t$F896 ( file ) addTracker ( file . getPath ( ) , marker , deleteStrategy ) ; \n\t} \n"}, {"code": "protected StringBuilder appendSearchStringParamIfNecessary ( StringBuilder sb ) { \n\tString searchStringParam = getEncodedSearchStringParam ( ) ; \n\tif ( searchStringParam != null ) { \n\t\tif $F8908 ( sb ) $F86 ( sb ) else $F86 ( sb ) sb . append ( searchStringParam ) ; \n\t\t} \n\treturn sb ; \n\t} \n"}, {"code": "public static ClassInfo findOrCreateClass ( String fullName ) { \n\tClassInfo u = findClass ( fullName ) ; \n\tif ( u == null ) { \n\t\tu = new ClassInfo ( fullName ) ; \n\t\tif $F6974 ( u ) { \n\t\t\tfindOrCreateClass ( fullName . substring ( NUM00 ) ) ; \n\t\t\t} \n\t\t} \n\treturn u ; \n\t} \n"}, {"code": "PlaPointRational ( BigInteger p_x , BigInteger p_y , BigInteger p_z ) { \n\trp_x = p_x ; \n\trp_y = p_y ; \n\trp_z = p_z ; \n\tis_nan = p_z . signum ( ) <= NUM00 ; \n\t} \n"}, {"code": "public boolean isNullValue $F72 { \n\treturn StringUtils . trimToNull ( value ) == null && StringUtils . trimToNull ( comment ) == null ; \n\t} \n"}, {"code": "private Map < Long , Pair $F12294 > recoverPendingLargeMessages $F72 throws Exception { \n\tMap < Long , Pair $F12294 > $F8690 ( largeMessages ) ; \n\t$F3803 filenames = largeMessagesFactory . listFiles ( NUM00 ) ; \n\t$F27145 $F204 ( idList ) ; \n\tfor ( String filename : filenames ) { \n\t\tLong id = getLargeMessageIdFromFilename ( filename ) ; \n\t\tif $F2200 ( largeMessagesToDelete , id ) { \n\t\t\tidList . add ( id ) ; \n\t\t\tSequentialFile seqFile = largeMessagesFactory . createSequentialFile ( filename ) ; \n\t\t\t$F14662 ( size , seqFile ) largeMessages . put ( id , $F24652 ( filename , size ) ) ; \n\t\t\t} \n\t\t} \n\treturn largeMessages ; \n\t} \n"}, {"code": "private void checkForFragmentID ( Attributes attributes ) { \n\tif ( ! m_shouldProcess ) { \n\t\tif ( $F272757 ( attributes , m_fragmentIDString ) ) { \n\t\t\t$F19322 ( n , attributes ) for ( $F119 ( i , n ) ) { \n\t\t\t\tString name = attributes . getQName ( i ) ; \n\t\t\t\tif ( name . equals ( Constants . ATTRNAME_ID ) ) { \n\t\t\t\t\t$F62203 ( val , attributes , i ) if $F8397 ( val , m_fragmentIDString ) { \n\t\t\t\t\t\tm_shouldProcess = _BOOL ; \n\t\t\t\t\t\tm_fragmentID = m_elementID ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void unparsedEntityDecl ( String name , XMLResourceIdentifier identifier , String notation , Augmentations augs ) throws XNIException { \n\ttry { \n\t\tif ( fDTDHandler != null ) { \n\t\t\tString publicId = identifier . getPublicId ( ) ; \n\t\t\tString systemId = fResolveDTDURIs ? identifier . getExpandedSystemId ( ) : identifier . getLiteralSystemId ( ) ; \n\t\t\tfDTDHandler . unparsedEntityDecl ( name , publicId , systemId , notation ) ; \n\t\t\t} \n\t\t} \n\t$F122277 ( e ) } \n"}, {"code": "public void waitForPaxosToFinish $F72 { \n\t$F8934 ( proposeLock ) canPropose . awaitUninterruptibly ( ) ; \n\t$F704 ( proposeLock ) } \n"}, {"code": "public static ResponseData parse ( String responseData ) { \n\t$F1384 ( index , responseData ) String mainData , extraData ; \n\t$F151471 ( index , mainData , responseData , extraData ) $F151475 ( fields , TextUtils , mainData , Pattern ) if $F8830 ( fields ) $F825 $F151481 ( data ) data . extra = extraData ; \n\t$F151483 ( data , Integer , fields ) $F151485 ( data , Integer , fields ) $F151486 ( data , fields ) $F151487 ( data , fields ) $F151488 ( data , fields ) $F151490 ( data , Long , fields ) return data ; \n\t} \n"}, {"code": "public static $F1986 vectorBoxCorner ( $F1986 center , $F1986 result , double distance , boolean upperRight ) { \n\tif ( result == null || result . length != center . length ) { \n\t\t$F14238 ( result , center ) } \n\tif ( upperRight == _BOOL ) $F52810 ( distance ) distance = SIN_PI_DIV_4 * distance ; \n\tfor ( $F1139 ( i , center ) ) { \n\t\tresult [ i ] = center [ i ] + distance ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public void testSetLoginConfigAdding $F72 throws Exception { \n\tString xml = WEBAPP_TEST_HEADER + NUM00 ; \n\t$F168856 ( webXml , WebXmlIo , xml , getEntityResolver ) WebXmlUtils . setLoginConfig ( webXml , NUM00 , NUM00 ) ; \n\tassertTrue ( WebXmlUtils . hasLoginConfig ( webXml ) ) ; \n\tassertEquals ( NUM00 , WebXmlUtils . getLoginConfigAuthMethod ( webXml ) ) ; \n\t} \n"}, {"code": "public void validate $F72 throws AMConsoleException { \n\tif ( isSelected ( ) ) { \n\t\tif ( isPersonalQuestion ( ) ) { \n\t\t\tif ( $F1277 ( question ) || $F1277 ( answer ) ) $F21549 } \n\t\telse { \n\t\t\tif $F1277 ( answer ) $F21549 } \n\t\t} \n\t} \n"}, {"code": "public static void assertTrue ( boolean b , Object message ) { \n\t$F42258 ( b , throwError , message ) } \n"}, {"code": "private $F806 spliterator ( String phrase ) { \n\t$F83044 ( split , phrase ) $F112797 ( out , split ) for ( $F1139 ( ix , split ) ) { \n\t\tString temp = split [ ix - NUM00 ] ; \n\t\ttemp += NUM00 + split [ ix ] ; \n\t\tout [ ix - NUM00 ] = temp ; \n\t\t} \n\treturn out ; \n\t} \n"}, {"code": "protected Signature ( String algorithm ) $F6988 ( this , algorithm ) "}, {"code": "private final void augmentTokenList $F72 { \n\tToken [ ] temp = new Token [ size + increment ] ; \n\t$F135 ( System , tokenList , temp , size ) size += increment ; \n\ttokenList = temp ; \n\tfor ( $F119 ( i , increment ) ) { \n\t\ttokenList [ size - i - NUM00 ] = createInternalUseOnlyToken ( ) ; \n\t\t} \n\t} \n"}, {"code": "public String calculateFromString ( String data ) throws Exception { \n\t$F55588 ( log , algoURI , data ) return $F197037 ( calculateFromBytes , data , StandardCharsets ) ; \n\t} \n"}, {"code": "public void addChannels ( $F447755 channels ) { \n\tfor ( Channel channel : channels ) { \n\t\taddChannel ( channel ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F806 mergeStringArrays $F159246 ( array1 , array2 ) { \n\t$F46019 ( ObjectUtils , array1 , array2 ) $F46019 ( ObjectUtils , array2 , array1 ) $F10144 ( result ) $F9629 ( result , Arrays , array1 ) for ( String str : array2 ) $F2202 ( result , str ) return toStringArray ( result ) ; \n\t} \n"}, {"code": "public void testRunAfterBoth_exceptionalCompletion $F72 throws Throwable { \n\tfor ( $F40424 ( m , ExecutionMode ) ) for ( $F2703 ( fFirst , _BOOL ) ) for ( $F2703 ( failFirst , _BOOL ) ) for ( $F127409 ( v1 ) ) { \n\t\t$F127411 ( f ) $F127411 ( g ) $F181556 ( ex ) final Noop r1 = new Noop ( m ) ; \n\t\tfinal Noop r2 = new Noop ( m ) ; \n\t\tfinal Noop r3 = new Noop ( m ) ; \n\t\tfinal $F70219 fst = fFirst ? f : g ; \n\t\tfinal $F70219 snd = ! fFirst ? f : g ; \n\t\t$F159507 ( complete1 , failFirst ) $F159507 ( complete2 , failFirst ) final $F159508 h1 = m . runAfterBoth ( f , g , r1 ) ; \n\t\t$F159512 ( assertTrue , complete1 ) final $F159508 h2 = m . runAfterBoth ( f , g , r2 ) ; \n\t\tcheckIncomplete ( h1 ) ; \n\t\tcheckIncomplete ( h2 ) ; \n\t\t$F159512 ( assertTrue , complete2 ) final $F159508 h3 = m . runAfterBoth ( f , g , r3 ) ; \n\t\tcheckCompletedWithWrappedException ( h1 , ex ) ; \n\t\tcheckCompletedWithWrappedException ( h2 , ex ) ; \n\t\tcheckCompletedWithWrappedException ( h3 , ex ) ; \n\t\t$F159513 ( r1 ) $F159513 ( r2 ) $F159513 ( r3 ) checkCompletedNormally ( failFirst ? snd : fst , v1 ) ; \n\t\tcheckCompletedExceptionally ( failFirst ? fst : snd , ex ) ; \n\t\t} \n\t} \n"}, {"code": "private double damp ( double value ) { \n\t$F41531 ( Math , value ) } \n"}, {"code": "public void addMeasurement ( double measurement ) { \n\tdouble keepConstant = NUM00 - mDecayConstant ; \n\tif ( mCount > mCutover ) { \n\t\tmValue = Math . exp ( keepConstant * Math . log ( mValue ) + mDecayConstant * Math . log ( measurement ) ) ; \n\t\t} \n\telse if ( mCount > NUM00 ) { \n\t\tdouble retained = keepConstant * mCount / ( mCount + NUM00 ) ; \n\t\tdouble newcomer = NUM00 - retained ; \n\t\tmValue = Math . exp ( retained * Math . log ( mValue ) + newcomer * Math . log ( measurement ) ) ; \n\t\t} \n\telse { \n\t\tmValue = measurement ; \n\t\t} \n\tmCount ++ ; \n\t} \n"}, {"code": "$F1431 private String nextUnquotedValue $F72 throws IOException { \n\tStringBuilder builder = null ; \n\tint i = NUM00 ; \n\tfindNonLiteralCharacter : while ( _BOOL ) { \n\t\tfor ( ; \n\t\tpos + i < limit ; \n\t\ti ++ ) { \n\t\t\tswitch ( buffer [ pos + i ] ) { \n\t\t\t\t$F1262 $F1262 $F1262 $F1262 $F1262 checkLenient ( ) ; \n\t\t\t\t$F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 break findNonLiteralCharacter ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( i < buffer . length ) { \n\t\t\tif ( fillBuffer ( i + NUM00 ) ) $F1448 else $F5153 } \n\t\t$F39896 ( builder ) builder . append ( buffer , pos , i ) ; \n\t\tpos += i ; \n\t\ti = NUM00 ; \n\t\tif $F39897 ( fillBuffer ) $F5153 } \n\tString result ; \n\tif ( builder == null ) { \n\t\tresult = new String ( buffer , pos , i ) ; \n\t\t} \n\telse { \n\t\tbuilder . append ( buffer , pos , i ) ; \n\t\t$F6947 ( result , builder ) } \n\tpos += i ; \n\treturn result ; \n\t} \n"}, {"code": "public long arg_end $F72 $F12907 ( Long , fields ) "}, {"code": "static List < IRuntimeClasspathEntry > computeClasspath ( IJavaProject javaProject ) throws CoreException { \n\tIRuntimeClasspathEntry [ ] unresolvedRuntimeClasspath = JavaRuntime . computeUnresolvedRuntimeClasspath ( javaProject ) ; \n\tList < IRuntimeClasspathEntry > resolvedRuntimeClasspath = new ArrayList < IRuntimeClasspathEntry > $F72 ; \n\tfor ( IRuntimeClasspathEntry unresolvedClasspathEntry : unresolvedRuntimeClasspath ) { \n\t\tif ( JavaRuntime . isVMInstallReference ( unresolvedClasspathEntry ) ) $F1448 resolvedRuntimeClasspath . addAll ( Arrays . asList ( JavaRuntime . resolveRuntimeClasspathEntry ( unresolvedClasspathEntry , javaProject ) ) ) ; \n\t\t} \n\ttry { \n\t\tresolvedRuntimeClasspath . addAll ( NUM00 , GWTProjectUtilities . getGWTSourceFolderPathsFromProjectAndDependencies ( javaProject , _BOOL ) ) ; \n\t\t} \n\tcatch ( SdkException e ) { \n\t\tthrow new CoreException ( new Status ( IStatus . ERROR , GWTPlugin . PLUGIN_ID , e . getLocalizedMessage ( ) , e ) ) ; \n\t\t} \n\tGwtSdk gwtRuntime = GwtSdk . findSdkFor ( javaProject ) ; \n\tif ( gwtRuntime == null ) { \n\t\tGWTPluginLog . logWarning ( NUM00 + javaProject . getElementName ( ) + NUM00 ) ; \n\t\treturn resolvedRuntimeClasspath ; \n\t\t} \n\tIStatus validationStatus = gwtRuntime . validate ( ) ; \n\tif ( ! validationStatus . isOK ( ) ) { \n\t\tGWTPluginLog . logWarning ( NUM00 + javaProject . getElementName ( ) + NUM00 + validationStatus . getMessage ( ) + NUM00 ) ; \n\t\treturn resolvedRuntimeClasspath ; \n\t\t} \n\ttry { \n\t\tFile gwtDevJar = gwtRuntime . getDevJar ( ) ; \n\t\tresolvedRuntimeClasspath . add ( JavaRuntime . newArchiveRuntimeClasspathEntry ( Path . fromOSString ( gwtDevJar . getAbsolutePath ( ) ) ) ) ; \n\t\t} \n\tcatch ( SdkException e ) { \n\t\tGWTPluginLog . logWarning ( e , NUM00 ) ; \n\t\t} \n\treturn resolvedRuntimeClasspath ; \n\t} \n"}, {"code": "$F1431 public ThrowingMockTokenFilterFactory $F3501 ( args ) { \n\tsuper ( args ) ; \n\t$F170151 ( exceptionClassName , args ) $F28724 ( exceptionClassName ) try { \n\t\texceptionClass = ( Class < ? extends RuntimeException > ) Class . forName ( exceptionClassName ) ; \n\t\t} \n\t$F170159 ( e ) } \n"}, {"code": "$F60342 ( mSmallestWidthDp , mInPortrait ) "}, {"code": "public PatternGuardExpr ( String namespace , String name , $F240647 parameters , PatternExpr guardedPattern ) { \n\tsuper ( namespace , name , parameters ) ; \n\tthis . guarded = new ArrayList < PatternExpr > $F72 ; \n\tguarded . add ( guardedPattern ) ; \n\t} \n"}, {"code": "private long startNewTrack $F72 { \n\tif ( isRecording ( ) ) { \n\t\t$F13527 ( Log , TAG ) $F150 } \n\t$F657 ( now , System ) trackTripStatisticsUpdater = new TripStatisticsUpdater ( now ) ; \n\tmarkerTripStatisticsUpdater = new TripStatisticsUpdater ( now ) ; \n\tTrack track = new Track $F72 ; \n\tUri uri = myTracksProviderUtils . insertTrack ( track ) ; \n\tlong trackId = Long . parseLong ( uri . getLastPathSegment ( ) ) ; \n\tupdateRecordingState ( trackId , _BOOL ) ; \n\tPreferencesUtils . setInt ( this , R . string . auto_resume_track_current_retry_key , NUM00 ) ; \n\tPreferencesUtils . setInt ( this , R . string . activity_recognition_type_key , PreferencesUtils . ACTIVITY_RECOGNITION_TYPE_DEFAULT ) ; \n\ttrack . setId ( trackId ) ; \n\ttrack . setName ( TrackNameUtils . getTrackName ( this , trackId , now , null ) ) ; \n\tString category = PreferencesUtils . getString ( this , R . string . default_activity_key , PreferencesUtils . DEFAULT_ACTIVITY_DEFAULT ) ; \n\ttrack . setCategory ( category ) ; \n\ttrack . setIcon ( TrackIconUtils . getIconValue ( this , category ) ) ; \n\ttrack . setTripStatistics ( trackTripStatisticsUpdater . getTripStatistics ( ) ) ; \n\tmyTracksProviderUtils . updateTrack ( track ) ; \n\tinsertWaypoint ( WaypointCreationRequest . DEFAULT_START_TRACK ) ; \n\tstartRecording ( _BOOL ) ; \n\treturn trackId ; \n\t} \n"}, {"code": "protected AbstractMRMessage pollMessage $F72 { \n\t$F5972 ( disablePoll ) if $F5973 ( pollQueue ) { \n\t\tPollMessage pm = pollQueue . peek ( ) ; \n\t\tif ( pm != null ) { \n\t\t\treturn pm . getMessage ( ) ; \n\t\t\t} \n\t\t} \n\t$F1274 } \n"}, {"code": "public static $F96 readFully ( InputStream in ) throws IOException { \n\t$F11452 ( readFullyNoClose , in ) } \n"}, {"code": "private boolean isSuppressWarningsTest ( String baseName ) { \n\t$F786 ( baseName ) } \n"}, {"code": "protected static String applyLimitClause ( final String query , int limit , final int queryResultSetLimit ) { \n\t$F275 ( matcher , SELECT_EXPR_PATTERN , query ) if $F24133 ( matcher ) { \n\t\t$F1150 ( limit_matcher , SELECT_WITH_LIMIT_EXPR_PATTERN , query ) boolean queryAlreadyHasLimitClause = limit_matcher . matches ( ) ; \n\t\tif ( ! queryAlreadyHasLimitClause ) { \n\t\t\t$F153178 ( limit , queryResultSetLimit ) String result = query ; \n\t\t\tresult += NUM00 + limit ; \n\t\t\treturn result ; \n\t\t\t} \n\t\t} \n\treturn query ; \n\t} \n"}, {"code": "public void unmaximiseComponent $F72 { \n\t$F2329 ( maximisedComponent ) container . remove ( maximisedComponent ) ; \n\tcontainer . add ( containerChild ) ; \n\tparentMaximisedComponent . add ( maximisedComponent ) ; \n\t$F1954 ( container ) containerChild = null ; \n\tparentMaximisedComponent = null ; \n\tmaximisedComponent = null ; \n\t} \n"}, {"code": "default CharSeq join ( CharSequence delimiter , CharSequence prefix , CharSequence suffix ) { \n\t$F7542 ( stringBuilder , prefix ) forEach ( null ) ; \n\tstringBuilder . append ( suffix ) ; \n\treturn CharSeq . of ( stringBuilder . toString ( ) ) ; \n\t} \n"}, {"code": "public void removeListener ( T listener ) { \n\tif ( listeners != null ) { \n\t\t$F237846 ( newlisteners ) newlisteners . addAll ( listeners ) ; \n\t\tnewlisteners . remove ( listener ) ; \n\t\tlisteners = newlisteners ; \n\t\t} \n\t} \n"}, {"code": "public static void saveAsASCII ( NSArray root , File out ) throws IOException { \n\t$F15938 ( w , out ) w . write ( root . toASCIIPropertyList ( ) ) ; \n\t$F59 ( w ) } \n"}, {"code": "public XSWildcardDecl performIntersectionWith ( XSWildcardDecl wildcard , short processContents ) { \n\t$F1275 ( wildcard ) XSWildcardDecl intersectWildcard = new XSWildcardDecl $F72 ; \n\tintersectWildcard . fProcessContents = processContents ; \n\tif ( areSame ( wildcard ) ) $F20755 ( intersectWildcard , fType , fNamespaceList ) else if ( ( fType == NSCONSTRAINT_ANY ) || ( wildcard . fType == NSCONSTRAINT_ANY ) ) { \n\t\tXSWildcardDecl other = this ; \n\t\tif ( fType == NSCONSTRAINT_ANY ) other = wildcard ; \n\t\tintersectWildcard . fType = other . fType ; \n\t\tintersectWildcard . fNamespaceList = other . fNamespaceList ; \n\t\t} \n\telse if ( ( ( fType == NSCONSTRAINT_NOT ) && ( wildcard . fType == NSCONSTRAINT_LIST ) ) || ( ( fType == NSCONSTRAINT_LIST ) && ( wildcard . fType == NSCONSTRAINT_NOT ) ) ) { \n\t\t$F10127 ( list ) $F10127 ( other ) if ( fType == NSCONSTRAINT_NOT ) { \n\t\t\tother = fNamespaceList ; \n\t\t\tlist = wildcard . fNamespaceList ; \n\t\t\t} \n\t\telse { \n\t\t\tother = wildcard . fNamespaceList ; \n\t\t\tlist = fNamespaceList ; \n\t\t\t} \n\t\tint listSize = list . length ; \n\t\t$F12914 ( intersect , listSize ) int newSize = NUM00 ; \n\t\tfor ( $F119 ( i , listSize ) ) { \n\t\t\tif ( list [ i ] != other [ NUM00 ] && list [ i ] != ABSENT ) intersect [ newSize ++ ] = list [ i ] ; \n\t\t\t} \n\t\tintersectWildcard . fType = NSCONSTRAINT_LIST ; \n\t\tintersectWildcard . fNamespaceList = new String [ newSize ] ; \n\t\tSystem . arraycopy ( intersect , NUM00 , intersectWildcard . fNamespaceList , NUM00 , newSize ) ; \n\t\t} \n\telse if ( ( fType == NSCONSTRAINT_LIST ) && ( wildcard . fType == NSCONSTRAINT_LIST ) ) { \n\t\tintersectWildcard . fType = NSCONSTRAINT_LIST ; \n\t\tintersectWildcard . fNamespaceList = intersect2sets ( fNamespaceList , wildcard . fNamespaceList ) ; \n\t\t} \n\telse if ( fType == NSCONSTRAINT_NOT && wildcard . fType == NSCONSTRAINT_NOT ) { \n\t\tif ( fNamespaceList [ NUM00 ] != ABSENT && wildcard . fNamespaceList [ NUM00 ] != ABSENT ) $F1274 XSWildcardDecl other = this ; \n\t\tif ( fNamespaceList [ NUM00 ] == ABSENT ) other = wildcard ; \n\t\tintersectWildcard . fType = other . fType ; \n\t\tintersectWildcard . fNamespaceList = other . fNamespaceList ; \n\t\t} \n\treturn intersectWildcard ; \n\t} \n"}, {"code": "public static void filterOutbound ( StringBuilder message ) { \n\tfor ( $F1088 ( i , message ) ) { \n\t\t$F1280 ( currentChar , message , i ) if $F85013 ( LEGAL_CHARACTERS , currentChar ) { \n\t\t\tif ( currentChar > NUM00 ) { \n\t\t\t\tint charAsInt = currentChar ; \n\t\t\t\tString stringVersion = Integer . toString ( charAsInt , NUM00 ) ; \n\t\t\t\tString replacement = NUM00 + stringVersion + NUM00 ; \n\t\t\t\tmessage . replace ( i , i + NUM00 , replacement ) ; \n\t\t\t\ti += $F1092 ( replacement ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tmessage . deleteCharAt ( i ) ; \n\t\t\t\ti -- ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void drawDays ( Canvas canvas ) { \n\tfinal TextPaint p = mDayPaint ; \n\tfinal int headerHeight = mMonthHeight + mDayOfWeekHeight ; \n\tfinal int rowHeight = mDayHeight ; \n\tfinal int colWidth = mCellWidth ; \n\tfinal float halfLineHeight = ( p . ascent ( ) + p . descent ( ) ) / NUM00 ; \n\tint rowCenter = headerHeight + rowHeight / NUM00 ; \n\tfor ( int day = NUM00 , col = findDayOffset ( ) ; \n\tday <= mDaysInMonth ; \n\tday ++ ) { \n\t\tfinal int colCenter = colWidth * col + colWidth / NUM00 ; \n\t\tfinal int colCenterRtl ; \n\t\tif ( ViewCompatUtils . isLayoutRtl ( this ) ) { \n\t\t\tcolCenterRtl = mPaddedWidth - colCenter ; \n\t\t\t} \n\t\telse { \n\t\t\tcolCenterRtl = colCenter ; \n\t\t\t} \n\t\tint state = NUM00 ; \n\t\tfinal boolean isDayEnabled = isDayEnabled ( day ) ; \n\t\tfinal boolean isDayActivated = mActivatedDay == day ; \n\t\tif ( isDayActivated ) { \n\t\t\tstate = VIEW_STATE_SELECTED ; \n\t\t\tcanvas . drawCircle ( colCenterRtl , rowCenter , mDaySelectorRadius , mDaySelectorPaint ) ; \n\t\t\t} \n\t\telse if ( mTouchedItem == day ) { \n\t\t\tstate = VIEW_STATE_PRESSED ; \n\t\t\tif ( isDayEnabled ) { \n\t\t\t\tcanvas . drawCircle ( colCenterRtl , rowCenter , mDaySelectorRadius , mDayHighlightPaint ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tfinal boolean isDayToday = mToday == day ; \n\t\tfinal int dayTextColor ; \n\t\tif ( isDayToday && ! isDayActivated ) { \n\t\t\tdayTextColor = mDaySelectorPaint . getColor ( ) ; \n\t\t\t} \n\t\telse { \n\t\t\tfinal $F2027 stateSet = buildState ( isDayEnabled , state ) ; \n\t\t\tdayTextColor = mDayTextColor . getColorForState ( stateSet , NUM00 ) ; \n\t\t\t} \n\t\tp . setColor ( dayTextColor ) ; \n\t\tcanvas . drawText ( mDayFormatter . format ( day ) , colCenterRtl , rowCenter - halfLineHeight , p ) ; \n\t\tcol ++ ; \n\t\tif ( col == DAYS_IN_WEEK ) { \n\t\t\tcol = NUM00 ; \n\t\t\trowCenter += rowHeight ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void comment $F62353 ( start , length ) throws $F2253 { \n\tif ( ch == null || start < NUM00 || length >= ( ch . length - start ) || length < NUM00 ) $F665 $F150650 ( append , m_doc , ch , start , length ) } \n"}, {"code": "$F18907 ( arrayList ) "}, {"code": "public ArbitraryLengthPathNode ( final TermNode left , final TermNode right , final VarNode tVarLeft , final VarNode tVarRight , final PathMod mod ) { \n\tthis ( new BOp [ ] { \n\t\tnew JoinGroupNode $F72 } \n\t, NV . asMap ( new NV ( Annotations . LEFT_TERM , left ) , new NV ( Annotations . RIGHT_TERM , right ) , new NV ( Annotations . TRANSITIVITY_VAR_LEFT , tVarLeft ) , new NV ( Annotations . TRANSITIVITY_VAR_RIGHT , tVarRight ) , new NV ( Annotations . LOWER_BOUND , mod == PathMod . ONE_OR_MORE ? NUM00 : NUM00 ) , new NV ( Annotations . UPPER_BOUND , mod == PathMod . ZERO_OR_ONE ? NUM00 : Long . MAX_VALUE ) ) ) ; \n\tfinal Set < VarNode > $F22304 ( dropVars ) ; \n\tdropVars . add ( tVarLeft ) ; \n\tdropVars . add ( tVarRight ) ; \n\tsetProperty ( Annotations . DROP_VARS , dropVars ) ; \n\t} \n"}, {"code": "static void checkFlags ( int flags ) { \n\tint allowedFlags = READ_ONLY_FLAG_MASK | EMPTY_FLAG_MASK | COMPACT_FLAG_MASK | ORDERED_FLAG_MASK ; \n\tint flagsMask = ~ allowedFlags ; \n\tif ( ( flags & flagsMask ) > NUM00 ) { \n\t\tthrow new SketchesArgumentException ( NUM00 + Integer . toBinaryString ( flags ) ) ; \n\t\t} \n\t} \n"}, {"code": "public boolean canGetInt $F72 { \n\treturn canGet ( $F37010 ) ; \n\t} \n"}, {"code": "public static $F3523 deleteItemSets ( $F3523 itemSets , int minSupport , int maxSupport ) { \n\t$F3523 newVector = new $F3523 $F716 ( itemSets ) ; \n\tfor ( $F2277 ( i , itemSets ) ) { \n\t\tLabeledItemSet current = ( LabeledItemSet ) itemSets . get ( i ) ; \n\t\tif ( ( current . m_ruleSupCounter >= minSupport ) && ( current . m_ruleSupCounter <= maxSupport ) ) $F207 ( newVector , current ) } \n\treturn newVector ; \n\t} \n"}, {"code": "private static synchronized String makeDateString ( Date date ) $F35907 ( sdfDefault , date ) "}, {"code": "public static String generateNativeGuid ( DbClient dbClient , FileShare fileShare ) throws IOException { \n\tStorageSystem device = dbClient . queryObject ( $F41797 , fileShare . getStorageDevice ( ) ) ; \n\treturn String . format ( NUM00 + FILESYSTEM + NUM00 , $F131294 ( _deviceTypeMap , device ) , device . getSerialNumber ( ) , fileShare . getNativeId ( ) ) ; \n\t} \n"}, {"code": "public String toString $F72 { \n\t$F280 ( result ) int temp ; \n\ttemp = ipAddress & NUM00 ; \n\tresult . append ( temp ) ; \n\t$F84 ( result ) temp = $F11786 ( ipAddress ) ; \n\tresult . append ( temp ) ; \n\t$F84 ( result ) temp = $F11786 ( ipAddress ) ; \n\tresult . append ( temp ) ; \n\t$F84 ( result ) temp = $F11786 ( ipAddress ) ; \n\tresult . append ( temp ) ; \n\t$F92 ( result ) } \n"}, {"code": "public void logPurchase ( BigDecimal purchaseAmount , Currency currency , Bundle parameters ) { \n\tif ( purchaseAmount == null ) $F3602 ( notifyDeveloperError ) else $F25700 ( currency , notifyDeveloperError ) if ( parameters == null ) { \n\t\t$F53031 ( parameters ) ; \n\t\t} \n\tparameters . putString ( AppEventsConstants . EVENT_PARAM_CURRENCY , currency . getCurrencyCode ( ) ) ; \n\tlogEvent ( AppEventsConstants . EVENT_NAME_PURCHASED , purchaseAmount . doubleValue ( ) , parameters ) ; \n\teagerFlush ( ) ; \n\t} \n"}, {"code": "private static double distance ( Point p1 , Point p2 ) { \n\tdouble x = p1 . x - p2 . x ; \n\tdouble y = p1 . y - p2 . y ; \n\t$F126355 ( Math , x , y ) } \n"}, {"code": "public void addHyperedgeInNode ( HyperEdge hyperEdge ) { \n\tif ( hyperEdge != null ) { \n\t\tif ( null == hyperedges ) $F9404 ( hyperedges ) hyperedges . add ( hyperEdge ) ; \n\t\tsemiringPlus ( hyperEdge ) ; \n\t\t} \n\t} \n"}, {"code": "public RotatedProblems $F72 $F5795 ( super ) "}, {"code": "public DockerPortMapping withHostPort ( int hostPort ) { \n\tDockerPortMapping newMapping = new DockerPortMapping $F72 ; \n\tnewMapping . protocol = protocol ; \n\tnewMapping . containerPort = containerPort ; \n\tnewMapping . hostIp = hostIp ; \n\tnewMapping . hostPort = String . valueOf ( hostPort ) ; \n\treturn newMapping ; \n\t} \n"}, {"code": "$F20813 ( fieldId , ID1 , ID2 ) "}, {"code": "$F1 public int length $F72 $F55827 ( str ) "}, {"code": "public void clearAllHaptics $F72 $F9096 ( mHaptics ) "}, {"code": "public void encode ( final ActiveMQBuffer buffer ) { \n\tbuffer . writeString ( name ) ; \n\tbuffer . writeString ( factoryClassName ) ; \n\tbuffer . writeInt ( $F2908 ( params ) ) ; \n\t$F12099 ( params , encodeMap , buffer ) $F12099 ( extraProps , encodeMap , buffer ) } \n"}, {"code": "$F1 public void write $F24576 ( b , off , len ) throws IOException { \n\tflushBits ( ) ; \n\tout . write ( b , off , len ) ; \n\t} \n"}, {"code": "public static double log2 ( double x ) { \n\treturn Math . log ( x ) / LOG2 ; \n\t} \n"}, {"code": "boolean isNameUsed ( String name ) { \n\t$F3807 columnsWithName = columnNames . get ( name ) ; \n\t$F6441 ( columnsWithName ) } \n"}, {"code": "public StateInteractive complete $F72 { \n\tif ( return_state != this && actlog != null ) { \n\t\tactlog . start_scope ( LogfileScope . COMPLETE_SCOPE ) ; \n\t\t} \n\treturn return_state ; \n\t} \n"}, {"code": "private WorkQueue findNonEmptyStealQueue $F72 { \n\t$F17861 ws ; \n\tint wl ; \n\tint r = TLRandom . nextSecondarySeed ( ) ; \n\tif ( ( ws = workQueues ) != null && $F192564 ( wl , ws ) ) { \n\t\tint m = wl - NUM00 , origin = r & m ; \n\t\tfor ( int k = origin , oldSum = NUM00 , checkSum = NUM00 ; \n\t\t; \n\t\t) { \n\t\t\tWorkQueue q ; \n\t\t\tint b ; \n\t\t\tif ( ( q = ws [ k ] ) != null ) { \n\t\t\t\tif ( ( b = q . base ) - q . top < NUM00 ) return q ; \n\t\t\t\tcheckSum += b ; \n\t\t\t\t} \n\t\t\tif ( ( k = ( k + NUM00 ) & m ) == origin ) { \n\t\t\t\tif ( oldSum == ( oldSum = checkSum ) ) $F597 checkSum = NUM00 ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F1274 } \n"}, {"code": "public void testPseudoLegalMoves $F72 throws ChessParseError { \n\tString fen = NUM00 ; \n\tPosition pos = TextIO . readFEN ( fen ) ; \n\tassertEquals ( fen , TextIO . toFEN ( pos ) ) ; \n\t$F13406 ( strMoves , getMoveList , pos , _BOOL ) $F196452 ( assertTrue , strMoves ) assertTrue ( $F49413 ( strMoves ) ) ; \n\tassertTrue ( $F49413 ( strMoves ) ) ; \n\t$F196452 ( assertTrue , strMoves ) $F196452 ( assertTrue , strMoves ) assertTrue ( $F49413 ( strMoves ) ) ; \n\t$F196452 ( assertTrue , strMoves ) assertTrue ( $F49413 ( strMoves ) ) ; \n\t$F196452 ( assertTrue , strMoves ) $F196452 ( assertTrue , strMoves ) $F70108 ( assertEquals , strMoves ) pos . setPiece ( Position . getSquare ( NUM00 , NUM00 ) , Piece . BROOK ) ; \n\tstrMoves = getMoveList ( pos , _BOOL ) ; \n\tassertTrue ( $F49413 ( strMoves ) ) ; \n\tassertTrue ( $F49413 ( strMoves ) ) ; \n\tpos . setPiece ( Position . getSquare ( NUM00 , NUM00 ) , Piece . EMPTY ) ; \n\tpos . setPiece ( Position . getSquare ( NUM00 , NUM00 ) , Piece . BROOK ) ; \n\tstrMoves = getMoveList ( pos , _BOOL ) ; \n\tassertTrue ( $F49413 ( strMoves ) ) ; \n\t$F196452 ( assertTrue , strMoves ) pos . setPiece ( Position . getSquare ( NUM00 , NUM00 ) , Piece . EMPTY ) ; \n\tpos . setPiece ( Position . getSquare ( NUM00 , NUM00 ) , Piece . BBISHOP ) ; \n\tstrMoves = getMoveList ( pos , _BOOL ) ; \n\t$F196452 ( assertTrue , strMoves ) assertTrue ( $F49413 ( strMoves ) ) ; \n\tpos . setPiece ( Position . getSquare ( NUM00 , NUM00 ) , Piece . EMPTY ) ; \n\tpos . setCastleMask ( NUM00 < < Position . A1_CASTLE ) ; \n\tstrMoves = getMoveList ( pos , _BOOL ) ; \n\tassertTrue ( $F49413 ( strMoves ) ) ; \n\t$F196452 ( assertTrue , strMoves ) } \n"}, {"code": "private void doDdpOrientation ( Node d , Node a , Node b , Node c , Graph graph ) { \n\t$F27878 sepset = getSepset ( d , c ) ; \n\t$F2329 ( sepset ) if $F105 ( sepset , b ) { \n\t\tgraph . setEndpoint ( c , b , Endpoint . TAIL ) ; \n\t\tif ( verbose ) { \n\t\t\tlogger . log ( NUM00 , SearchLogUtils . edgeOrientedMsg ( NUM00 + d , graph . getEdge ( b , c ) ) ) ; \n\t\t\tout . println ( SearchLogUtils . edgeOrientedMsg ( NUM00 + d , graph . getEdge ( b , c ) ) ) ; \n\t\t\t} \n\t\tchangeFlag = _BOOL ; \n\t\t} \n\telse { \n\t\tif ( ! isArrowpointAllowed ( a , b , graph ) ) $F932 if ( ! isArrowpointAllowed ( c , b , graph ) ) $F932 graph . setEndpoint ( a , b , Endpoint . ARROW ) ; \n\t\tgraph . setEndpoint ( c , b , Endpoint . ARROW ) ; \n\t\tlogger . log ( NUM00 , SearchLogUtils . colliderOrientedMsg ( NUM00 + d , a , b , c ) ) ; \n\t\tchangeFlag = _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public void handleTblBootstrapResOffHrefActionRequest ( RequestInvocationEvent event ) throws ModelControlException { \n\ttry { \n\t\tMap values = getValues ( ) ; \n\t\tonBeforeSaveProfile ( values ) ; \n\t\t$F50322 ( setPageSessionAttribute , PROPERTY_ATTRIBUTE , values ) SMDiscoveryBootstrapRefOffEditViewBean vb = ( SMDiscoveryBootstrapRefOffEditViewBean ) getViewBean ( SMDiscoveryBootstrapRefOffEditViewBean . class ) ; \n\t\tunlockPageTrail ( ) ; \n\t\tpassPgSessionMap ( vb ) ; \n\t\tvb . populateValues ( ( String ) getDisplayFieldValue ( TBL_BOOTSTRAP_RES_OFF_HREF_ACTION ) ) ; \n\t\t$F50333 ( vb , getRequestContext ) } \n\t$F50339 ( setInlineAlertMessage , CCAlert , e ) } \n"}, {"code": "$F1219 String postRequest ( long timestamp , String xml ) throws RequestFailureException { \n\tString response = null ; \n\tHttpURLConnection urlConnection = null ; \n\ttry { \n\t\turlConnection = createConnection ( ) ; \n\t\tsetUpPostRequest ( timestamp , urlConnection , xml ) ; \n\t\tsendRequestToServer ( urlConnection , xml ) ; \n\t\tresponse = readResponseFromServer ( urlConnection ) ; \n\t\t} \n\tfinally $F14107 ( urlConnection ) return response ; \n\t} \n"}, {"code": "private void generateKey $F72 throws Exception { \n\t$F156 ( keygen , KeyGenerator , ALGO ) $F43927 ( key , keygen ) persistKey ( key ) ; \n\t} \n"}, {"code": "public HttpRequestEvent fireHttpRequestEvent ( String request , OutputStream output ) throws IOException { \n\tHttpRequestEvent event = new HttpRequestEvent ( this , request , output ) ; \n\tHttpRequestListener listener ; \n\tVector list = ( Vector ) listeners . clone ( ) ; \n\t$F8484 ( e , list ) while $F1444 ( e ) { \n\t\tlistener = ( HttpRequestListener ) e . nextElement ( ) ; \n\t\tlistener . httpRequest ( event ) ; \n\t\t} \n\treturn event ; \n\t} \n"}, {"code": "private void parseRecord ( Element unitNode ) { \n\t$F9040 ( nl , unitNode ) for ( $F85554 ( i , nl ) ) { \n\t\t$F61359 ( currNode , nl , i ) if ( currNode . getParentNode ( ) != unitNode ) $F1448 $F49528 ( nodeType , currNode ) if ( nodeType == Node . ELEMENT_NODE ) { \n\t\t\t$F48115 ( nodeName , currNode ) if $F8397 ( nodeName , UNIT ) { \n\t\t\t\tparseUnit ( ( Element ) currNode , entities ) ; \n\t\t\t\t} \n\t\t\telse if $F8397 ( nodeName , SURVIVORS ) { \n\t\t\t\tparseUnit ( ( Element ) currNode , survivors ) ; \n\t\t\t\t} \n\t\t\telse if $F8397 ( nodeName , ALLIES ) { \n\t\t\t\tparseUnit ( ( Element ) currNode , allies ) ; \n\t\t\t\t} \n\t\t\telse if $F8397 ( nodeName , SALVAGE ) { \n\t\t\t\tparseUnit ( ( Element ) currNode , salvage ) ; \n\t\t\t\t} \n\t\t\telse if $F8397 ( nodeName , DEVASTATED ) { \n\t\t\t\tparseUnit ( ( Element ) currNode , devastated ) ; \n\t\t\t\t} \n\t\t\telse if $F8397 ( nodeName , KILLS ) { \n\t\t\t\tparseKills ( ( Element ) currNode ) ; \n\t\t\t\t} \n\t\t\telse if $F8397 ( nodeName , ENTITY ) { \n\t\t\t\tparseUnit ( ( Element ) currNode , entities ) ; \n\t\t\t\t} \n\t\t\telse if $F8397 ( nodeName , PILOT ) { \n\t\t\t\tparsePilot ( ( Element ) currNode ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse $F1448 } \n\t} \n"}, {"code": "public void cancel $F72 { \n\tsynchronized ( lock ) { \n\t\tif ( this . latency == NO_TARGET ) { \n\t\t\t$F50706 } \n\t\tif $F40971 ( requests , this ) { \n\t\t\tthrow new InternalError ( NUM00 + this + NUM00 ) ; \n\t\t\t} \n\t\tif $F2979 ( requests ) requests = null ; \n\t\tthis . latency = NO_TARGET ; \n\t\tadjustLatencyIfNeeded ( ) ; \n\t\t} \n\t} \n"}, {"code": "void mergeSuccess ( MergePolicy . OneMerge merge ) $F845 "}, {"code": "void startEventTracker $F72 { \n\tList < EventTrackingService > services = getEnabledServicesForType ( EventTrackingService . class ) ; \n\tif $F1032 ( services ) { \n\t\tif ( eventTracker == null ) { \n\t\t\teventTracker = new EventTracker ( context , services , foamApiKeys . wifiOnly ( ) ) ; \n\t\t\t} \n\t\tif $F28174 ( eventTracker ) $F28175 ( eventTracker ) } \n\t} \n"}, {"code": "$F1 public int preceding ( int offset ) { \n\tCharacterIterator text = getText ( ) ; \n\tcheckOffset ( offset , text ) ; \n\tif ( cachedBreakPositions == null || offset <= cachedBreakPositions [ NUM00 ] || offset > $F8528 ( cachedBreakPositions ) ) { \n\t\tcachedBreakPositions = null ; \n\t\treturn super . preceding ( offset ) ; \n\t\t} \n\telse { \n\t\tpositionInCache = NUM00 ; \n\t\twhile ( positionInCache < cachedBreakPositions . length && offset > cachedBreakPositions [ positionInCache ] ) { \n\t\t\t++ positionInCache ; \n\t\t\t} \n\t\t-- positionInCache ; \n\t\ttext . setIndex ( cachedBreakPositions [ positionInCache ] ) ; \n\t\treturn text . getIndex ( ) ; \n\t\t} \n\t} \n"}, {"code": "protected static boolean signedFitsInNibble ( int value ) { \n\treturn ( value >= - NUM00 ) && ( value <= NUM00 ) ; \n\t} \n"}, {"code": "$F1 public void mousePressed ( MouseEvent e ) { \n\t$F725 ( events ) if ( mapDragOperationFromModifiers ( e ) != DnDConstants . ACTION_NONE ) { \n\t\ttry { \n\t\t\tmotionThreshold = DragSource . getDragThreshold ( ) ; \n\t\t\t} \n\t\tcatch ( Exception exc ) { \n\t\t\tmotionThreshold = NUM00 ; \n\t\t\t} \n\t\tappendEvent ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public void simpleElement ( String name , String value ) throws IOException { \n\tsimpleElement ( null , name , null , value ) ; \n\t} \n"}, {"code": "public static boolean isValidIPv4 ( String address ) { \n\t$F25111 ( address , _BOOL ) int octet ; \n\tint octets = NUM00 ; \n\tString temp = address + NUM00 ; \n\tint pos ; \n\tint start = NUM00 ; \n\twhile ( start < temp . length ( ) && $F64354 ( pos , temp , start ) > start ) { \n\t\t$F6482 ( octets , _BOOL ) try { \n\t\t\t$F64359 ( octet , Integer , temp , start , pos ) ; \n\t\t\t} \n\t\tcatch ( NumberFormatException ex ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\tif $F19274 ( octet ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\tstart = pos + NUM00 ; \n\t\toctets ++ ; \n\t\t} \n\treturn octets == NUM00 ; \n\t} \n"}, {"code": "private void validateDimensionCSV ( SchemaInfo schemaInfo , String factTableName , String dimTableName , CarbonFile dimFile , String partitionId , CarbonDataLoadSchema schema , String delimiter ) throws DataLoadingException { \n\t$F806 columnNames = getDimColumnNames ( schemaInfo , factTableName , dimTableName , partitionId , schema ) ; \n\tif ( null == columnNames || columnNames . length < NUM00 ) $F932 if ( ! checkAllColumnsPresent ( columnNames , dimFile . getAbsolutePath ( ) , delimiter ) ) { \n\t\tLOGGER . error ( NUM00 + NUM00 + dimFile . getName ( ) ) ; \n\t\tthrow new DataLoadingException ( DataProcessorConstants . CSV_VALIDATION_ERRROR_CODE , NUM00 + NUM00 + dimFile . getName ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "private DataPoint isUnique ( Node from , DataPoint point , double tolerance ) { \n\tif $F585 ( logger ) $F8922 ( logger , tolerance , point ) while ( from . type == Type . branch ) { \n\t\tBranch branch = ( Branch ) from ; \n\t\tdouble d = point . get ( branch . splitDimension ) ; \n\t\tif ( Math . abs ( d - branch . midPoint ) < tolerance ) { \n\t\t\t$F130378 ( logger , branch ) DataPoint leftCheck = isUnique ( branch . left , point , tolerance ) ; \n\t\t\tDataPoint rightCheck = isUnique ( branch . right , point , tolerance ) ; \n\t\t\tif $F151516 ( leftCheck , rightCheck ) $F1337 else { \n\t\t\t\tif ( leftCheck != null ) { \n\t\t\t\t\treturn leftCheck ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\treturn rightCheck ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\telse if ( point . getVector ( ) [ branch . splitDimension ] < branch . midPoint ) { \n\t\t\t$F130378 ( logger , branch ) from = branch . left ; \n\t\t\t} \n\t\telse { \n\t\t\t$F130378 ( logger , branch ) from = branch . right ; \n\t\t\t} \n\t\t} \n\tLeaf leaf = ( Leaf ) from ; \n\tfor ( DataPoint p : leaf . points ) { \n\t\tfor ( int i = NUM00 ; \n\t\ti < p . getDimension ( ) ; \n\t\ti ++ ) { \n\t\t\tif ( Math . abs ( p . get ( i ) - point . get ( i ) ) >= tolerance ) $F5153 } \n\t\tif ( getDistance ( p , point ) < tolerance ) { \n\t\t\treturn p ; \n\t\t\t} \n\t\t} \n\t$F1274 } \n"}, {"code": "public boolean removeTuple ( Tuple t ) { \n\tTable table = t . getTable ( ) ; \n\tif $F105 ( m_sets , table ) { \n\t\treturn table . removeTuple ( t ) ; \n\t\t} \n\telse { \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "private boolean isDarkThemeSet $F72 { \n\tSharedPreferences sharedPreferences = PreferenceManager . getDefaultSharedPreferences ( getActivity ( ) ) ; \n\tString key = getString ( R . string . theme_preference_key ) ; \n\tString defaultValue = getString ( R . string . theme_preference_default_value ) ; \n\treturn Integer . valueOf ( sharedPreferences . getString ( key , defaultValue ) ) != NUM00 ; \n\t} \n"}, {"code": "public String visit ( Type t , Locale locale ) { \n\treturn t . accept ( this , locale ) ; \n\t} \n"}, {"code": "$F58902 ( name , threadId , mFinished , mMarkers , SystemClock ) "}, {"code": "$F1309 public void addPrefixNSMapping ( String prefix , String nsURI ) { \n\tif $F1277 ( nsURI ) $F825 if $F1277 ( prefix ) $F825 if $F1238 ( prefix , NO_NS_PREFIX ) $F29526 ( prefix ) $F29527 ( prefixToNamespaceURILookup , prefix ) $F29527 ( namespaceURIToPrefixLookup , nsURI ) if $F1238 ( prefix , DEFAULT_NAMESPACE_PREFIX ) { \n\t\tthis . defaultNS = nsURI ; \n\t\t} \n\telse { \n\t\tprefixToNamespaceURILookup . put ( prefix , nsURI ) ; \n\t\tnamespaceURIToPrefixLookup . put ( nsURI , prefix ) ; \n\t\t} \n\t} \n"}, {"code": "protected Message createResponseMessage $F72 { \n\treturn new Message ( NUM00 , Version . CURRENT ) ; \n\t} \n"}, {"code": "public static void o ( double a ) { \n\to ( a , Parameters . OutputFieldWidth , Parameters . OutputFracPlaces ) ; \n\t} \n"}, {"code": "public void writeField ( String name , String value ) throws IOException { \n\t$F826 ( name ) out . writeBytes ( PREFIX ) ; \n\tout . writeBytes ( boundary ) ; \n\tout . writeBytes ( NEWLINE ) ; \n\tout . writeBytes ( NUM00 + name + NUM00 ) ; \n\tout . writeBytes ( NEWLINE ) ; \n\tout . writeBytes ( NEWLINE ) ; \n\tif ( value != null ) { \n\t\tout . writeBytes ( value ) ; \n\t\t} \n\tout . writeBytes ( NEWLINE ) ; \n\t$F1206 ( out ) } \n"}, {"code": "public int drainTo ( Collection < ? super E > c ) { \n\tint result = buffer . drainTo ( c ) ; \n\tif ( producer != null ) { \n\t\tproducer . wakeUp ( ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "protected void grow $F72 { \n\tif ( dists == EMPTY_DISTS ) { \n\t\t$F10254 ( dists , INITIAL_SIZE ) $F3936 ( ids , INITIAL_SIZE ) $F665 } \n\t$F18832 ( len , dists ) final int newlength = $F28993 ( len ) ; \n\t$F1986 odists = dists ; \n\t$F10254 ( dists , newlength ) $F7057 ( System , odists , dists ) $F2027 oids = ids ; \n\t$F3936 ( ids , newlength ) $F7057 ( System , oids , ids ) } \n"}, {"code": "IgfsInputStreamImpl ( IgfsContext igfsCtx , IgfsPath path , $F5466 IgfsEntryInfo fileInfo , int prefetchBlocks , int seqReadsBeforePrefetch , $F5466 IgfsSecondaryFileSystemPositionedReadable secReader , long len , int blockSize , long blocksCnt , boolean proxy ) { \n\tassert igfsCtx != null ; \n\tassert path != null ; \n\tthis . igfsCtx = igfsCtx ; \n\tthis . path = path ; \n\tthis . fileInfo = fileInfo ; \n\tthis . prefetchBlocks = prefetchBlocks ; \n\tthis . seqReadsBeforePrefetch = seqReadsBeforePrefetch ; \n\tthis . secReader = secReader ; \n\tthis . len = len ; \n\tthis . blockSize = blockSize ; \n\tthis . blocksCnt = blocksCnt ; \n\tthis . proxy = proxy ; \n\tlog = igfsCtx . kernalContext ( ) . log ( IgfsInputStream . class ) ; \n\tmaxLocCacheSize = ( prefetchBlocks > NUM00 ? prefetchBlocks : NUM00 ) * NUM00 / NUM00 ; \n\tlocCache = new LinkedHashMap $F200 ( maxLocCacheSize , NUM00 ) ; \n\tpendingFuts = new GridConcurrentHashSet $F200 ( prefetchBlocks > NUM00 ? prefetchBlocks : NUM00 ) ; \n\tigfsCtx . metrics ( ) . incrementFilesOpenedForRead ( ) ; \n\t} \n"}, {"code": "public AbstractScaleOutClientIndexView ( final AbstractScaleOutFederation fed , final String name , final long timestamp , final IMetadataIndex metadataIndex ) { \n\t$F10057 ( fed ) $F10057 ( name ) $F10057 ( metadataIndex ) this . fed = fed ; \n\tthis . name = name ; \n\tthis . timestamp = timestamp ; \n\tthis . metadataIndex = metadataIndex ; \n\tthis . metadataIndexMetadata = metadataIndex . getIndexMetadata ( ) ; \n\tfinal AbstractClient $F1011 client = fed . getClient ( ) ; \n\tthis . capacity = client . getDefaultRangeQueryCapacity ( ) ; \n\tthis . batchOnly = client . getBatchApiOnly ( ) ; \n\tthis . taskTimeout = client . getTaskTimeout ( ) ; \n\tthis . readConsistent = client . isReadConsistent ( ) ; \n\t} \n"}, {"code": "public boolean canSendEvent $F72 { \n\ttry $F27427 ( validateSendEvent , _BOOL ) $F7474 ( _BOOL ) } \n"}, {"code": "public static final String capitalize ( String str , char ... delimiters ) { \n\tfinal int delimLen = delimiters == null ? - NUM00 : delimiters . length ; \n\tif ( TextUtils . isEmpty ( str ) || delimLen == NUM00 ) { \n\t\treturn str ; \n\t\t} \n\t$F9609 ( buffer , str ) boolean capitalizeNext = _BOOL ; \n\tfor ( $F1139 ( i , buffer ) ) { \n\t\tchar ch = buffer [ i ] ; \n\t\tif ( isDelimiter ( ch , delimiters ) ) { \n\t\t\tcapitalizeNext = _BOOL ; \n\t\t\t} \n\t\telse if ( capitalizeNext ) { \n\t\t\tbuffer [ i ] = Character . toTitleCase ( ch ) ; \n\t\t\tcapitalizeNext = _BOOL ; \n\t\t\t} \n\t\t} \n\t$F22269 ( buffer ) } \n"}, {"code": "public void testCompareToNegZero $F72 { \n\t$F67214 int aSign = - NUM00 ; \n\t$F3023 ( aNumber , aSign , aBytes ) BigInteger bNumber = BigInteger . ZERO ; \n\t$F67217 ( assertEquals , aNumber , bNumber ) } \n"}, {"code": "public void write ( OutputStream out ) throws SocksException , IOException { \n\tif ( data == null ) { \n\t\tSocks5Message msg ; \n\t\tif ( addrType == SOCKS_ATYP_DOMAINNAME ) msg = new Socks5Message ( command , host , port ) ; \n\t\telse { \n\t\t\tif ( ip == null ) { \n\t\t\t\ttry { \n\t\t\t\t\tip = InetAddress . getByName ( host ) ; \n\t\t\t\t\t} \n\t\t\t\tcatch ( UnknownHostException uh_ex ) { \n\t\t\t\t\tthrow new SocksException ( SocksConstants . SOCKS_JUST_ERROR ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tmsg = new Socks5Message ( command , ip , port ) ; \n\t\t\t} \n\t\tdata = msg . data ; \n\t\t} \n\tout . write ( data ) ; \n\t} \n"}, {"code": "public boolean isConnected ( short nodeId ) { \n\tNodeConnection nc = connections . get ( nodeId ) ; \n\treturn ( nc != null && nc . state == NodeConnectionState . CONNECTED ) ; \n\t} \n"}, {"code": "TemplateSubPatternAssociation ( ElemTemplate template , StepPattern pattern , String pat ) { \n\tm_pattern = pat ; \n\tm_template = template ; \n\tm_stepPattern = pattern ; \n\tm_targetString = m_stepPattern . getTargetString ( ) ; \n\tm_wild = m_targetString . equals ( NUM00 ) ; \n\t} \n"}, {"code": "public static $F96 compressForZlib $F97 ( bytesToCompress ) { \n\tDeflater deflater = new Deflater $F72 ; \n\tdeflater . setInput ( bytesToCompress ) ; \n\t$F1571 ( deflater ) $F96 bytesCompressed = new byte [ Short . MAX_VALUE ] ; \n\tint numberOfBytesAfterCompression = deflater . deflate ( bytesCompressed ) ; \n\t$F2175 ( returnValues , numberOfBytesAfterCompression ) $F135 ( System , bytesCompressed , returnValues , numberOfBytesAfterCompression ) return returnValues ; \n\t} \n"}, {"code": "private static ByteBuffer generateWavData ( int sampleCount , int freqHz ) { \n\tfinal int numDataBytes = sampleCount * NUM_CHANNELS * BITS_PER_SAMPLE / NUM00 ; \n\tfinal double freq = freqHz ; \n\t$F87627 ( buf , ByteBuffer , numDataBytes ) $F31290 ( buf , ByteOrder ) if ( BITS_PER_SAMPLE == NUM00 ) { \n\t\tfinal double peak = NUM00 ; \n\t\tfor ( $F119 ( i , sampleCount ) ) { \n\t\t\tdouble timeSec = i / ( double ) SAMPLE_RATE ; \n\t\t\tdouble sinValue = Math . sin ( NUM00 * Math . PI * freq * timeSec ) ; \n\t\t\tif ( GameSurfaceRenderer . EXTRA_CHECK ) { \n\t\t\t\tint output = ( int ) ( peak * sinValue + NUM00 ) ; \n\t\t\t\tif $F44635 ( output ) $F11389 } \n\t\t\tbuf . put ( ( byte ) ( peak * sinValue + NUM00 ) ) ; \n\t\t\t} \n\t\t} \n\telse if ( BITS_PER_SAMPLE == NUM00 ) { \n\t\tfinal double peak = NUM00 ; \n\t\tShortBuffer sbuf = buf . asShortBuffer ( ) ; \n\t\tfor ( $F119 ( i , sampleCount ) ) { \n\t\t\tdouble timeSec = i / ( double ) SAMPLE_RATE ; \n\t\t\tdouble sinValue = Math . sin ( NUM00 * Math . PI * freq * timeSec ) ; \n\t\t\tsbuf . put ( ( short ) ( peak * sinValue ) ) ; \n\t\t\t} \n\t\t} \n\t$F16709 ( buf ) return buf ; \n\t} \n"}, {"code": "protected static String h2c ( String hyphenated , boolean studly ) { \n\t$F80469 ( b , hyphenated ) boolean capNext = studly ; \n\tfor ( $F38840 ( i , hyphenated ) ) { \n\t\t$F1280 ( c , hyphenated , i ) if ( c == NUM00 ) capNext = _BOOL ; \n\t\telse { \n\t\t\tb . append ( capNext ? Character . toUpperCase ( c ) : c ) ; \n\t\t\tcapNext = _BOOL ; \n\t\t\t} \n\t\t} \n\t$F92 ( b ) } \n"}, {"code": "public synchronized void onWriteEvent $F72 throws IOException { \n\tLRMIInvocationTrace trace = null ; \n\ttry { \n\t\twhile $F5973 ( _contexts ) { \n\t\t\tContext current = _contexts . peek ( ) ; \n\t\t\ttrace = current . getTrace ( ) ; \n\t\t\tif ( trace != null ) LRMIInvocationContext . updateContext ( trace , null , null , null , null , _BOOL , null , null ) ; \n\t\t\tnoneBlockingWrite ( current ) ; \n\t\t\tif ( current . getPhase ( ) != Context . Phase . FINISH ) $F151805 ( setWriteInterest ) else { \n\t\t\t\ttraceContextTotalWriteTime ( current ) ; \n\t\t\t\t$F56193 ( _contexts ) pendingWrites . decrement ( ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tif $F2979 ( _contexts ) { \n\t\t\tremoveWriteInterest ( _BOOL ) ; \n\t\t\t} \n\t\t} \n\tfinally { \n\t\tif ( trace != null ) LRMIInvocationContext . resetContext ( ) ; \n\t\t} \n\t} \n"}, {"code": "public static void add ( Object spy ) $F207 ( SPIES , spy ) "}, {"code": "void initLeafCalc $F97 ( seed0 ) { \n\tthis . i = NUM00 ; \n\tthis . j = NUM00 ; \n\t$F2175 ( dummy , mdsize ) System . arraycopy ( seed0 , NUM00 , dummy , NUM00 , seed . length ) ; \n\tthis . seed = gmssRandom . nextSeed ( dummy ) ; \n\t} \n"}, {"code": "$F1 public boolean downloadFile ( String path , String dest ) { \n\ttry { \n\t\tFileOutputStream fos = new FileOutputStream $F15780 ( dest ) ; \n\t\tmDBApi . getFile ( path , null , fos , null ) ; \n\t\t$F59 ( fos ) return _BOOL ; \n\t\t} \n\tcatch ( DropboxException e ) $F37158 ( e , _BOOL ) catch ( FileNotFoundException e ) $F37158 ( e , _BOOL ) $F132878 ( e , _BOOL ) } \n"}, {"code": "boolean doesOccur ( QName refName ) $F298 ( m_refs , refName ) "}, {"code": "public long loop $F72 { \n\t$F42358 ( currentTimestamp , System ) final long timeDiff = currentTimestamp - lastRunTimestamp ; \n\tfinal int shutdownDiff = ( int ) $F32707 ( System , gameShutdownRequestTimestamp ) ; \n\tfinal float shutdownProgress = shutdownDiff >= FLYING_SUPERMAN_DELAY && gameState . equals ( GameState . SHUTDOWN_REQUESTED ) ? ( shutdownDiff - FLYING_SUPERMAN_DELAY ) / $F64550 ( GAME_SHUTDOWN_DELAY , FLYING_SUPERMAN_DELAY ) : NUM00 ; \n\tsnowflakesCollection . onTimePassed ( timeDiff ) ; \n\tpresentsCollection . onTimePassed ( timeDiff ) ; \n\tif ( gameState . equals ( GameState . SHUTDOWN_REQUESTED ) ) { \n\t\tplayer . setyPos ( getDefaultPlayerHeight ( ) * ( NUM00 - shutdownProgress ) - $F43072 ( player , shutdownProgress ) ) ; \n\t\tsupermanClouds . setyPos ( supermanClouds . getHeight ( ) * ( NUM00 - shutdownProgress ) - ( ( supermanClouds . getHeight ( ) - fieldHeight ) * shutdownProgress ) ) ; \n\t\tif ( shutdownProgress >= NUM00 ) { \n\t\t\tgameState = GameState . STOPPED ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tif ( player . isInState ( PlayerState . CHEWING ) && player . getChewingDuration ( ) >= PLAYER_CHEWING_DURATION_IN_MS ) { \n\t\t\tplayer . setState ( PlayerState . DEFAULT ) ; \n\t\t\t} \n\t\tif ( player . isInState ( PlayerState . HIT ) && player . getHitDuration ( ) >= PLAYER_HIT_DURATION_IN_MS ) { \n\t\t\tplayer . setState ( PlayerState . DEFAULT ) ; \n\t\t\t} \n\t\tif ( newPlayerLocation != null ) { \n\t\t\tplayer . setxPos ( newPlayerLocation . x ) ; \n\t\t\tplayer . setyPos ( newPlayerLocation . y ) ; \n\t\t\tnewPlayerLocation = null ; \n\t\t\t} \n\t\t} \n\tboolean playerBelowObject = updateFallingObjects ( timeDiff , shutdownProgress , snowflakesCollection , _BOOL , _BOOL ) | updateFallingObjects ( timeDiff , shutdownProgress , presentsCollection , _BOOL , _BOOL ) ; \n\tif ( player . isInState ( PlayerState . DEFAULT ) || player . isInState ( PlayerState . LOOKING_UP ) ) { \n\t\tif ( playerBelowObject ) { \n\t\t\tplayer . setState ( PlayerState . LOOKING_UP ) ; \n\t\t\t} \n\t\telse { \n\t\t\tplayer . setState ( PlayerState . DEFAULT ) ; \n\t\t\t} \n\t\t} \n\tlastRunTimestamp = currentTimestamp ; \n\treturn timeDiff ; \n\t} \n"}, {"code": "public static DateFormat toDateFormat ( String dateFormat , TimeZone tz , Locale locale ) { \n\tDateFormat df = null ; \n\tif $F4329 ( UtilValidate , dateFormat ) { \n\t\tdf = DateFormat . getDateInstance ( DateFormat . SHORT , locale ) ; \n\t\t} \n\telse { \n\t\tdf = new SimpleDateFormat ( dateFormat , locale == null ? Locale . getDefault ( ) : locale ) ; \n\t\t} \n\tdf . setTimeZone ( tz ) ; \n\treturn df ; \n\t} \n"}, {"code": "public Integer loadIdNameValues ( DbOutputStatement statement , Integer idx ) throws Exception { \n\t$F79839 ( index , idx ) $F51622 ( _logger ) _id = statement . getLongInteger ( index ++ ) ; \n\t_name = statement . getShortText ( index ++ ) ; \n\treturn new Integer ( index ) ; \n\t} \n"}, {"code": "private $F96 padPassword $F97 ( password ) { \n\tif ( password == null ) $F46946 ( password ) $F12496 ( padded ) final int numContributingPasswordBytes = password . length > padded . length ? padded . length : password . length ; \n\t$F135 ( System , password , padded , numContributingPasswordBytes ) if $F5624 ( password , padded ) { \n\t\tSystem . arraycopy ( PW_PADDING , NUM00 , padded , password . length , padded . length - password . length ) ; \n\t\t} \n\treturn padded ; \n\t} \n"}, {"code": "private double maxDistLevel ( DBID id , int level ) { \n\tfinal NumberVector obj = relation . get ( id ) ; \n\tfinal double r = NUM00 / ( NUM00 < < ( level - NUM00 ) ) ; \n\tdouble dist ; \n\tif ( t == NUM00 ) { \n\t\tdist = NUM00 ; \n\t\tfor ( $F119 ( dim , d ) ) { \n\t\t\tfinal double p_m_r = getDimForObject ( obj , dim ) % r ; \n\t\t\tdist += Math . max ( p_m_r , r - p_m_r ) ; \n\t\t\t} \n\t\t} \n\telse if ( t == NUM00 ) { \n\t\tdist = NUM00 ; \n\t\tfor ( $F119 ( dim , d ) ) { \n\t\t\tfinal double p_m_r = getDimForObject ( obj , dim ) % r ; \n\t\t\tdouble a = Math . max ( p_m_r , r - p_m_r ) ; \n\t\t\tdist += a * a ; \n\t\t\t} \n\t\t$F84202 ( dist , Math ) } \n\telse if ( ! Double . isInfinite ( t ) ) { \n\t\tdist = NUM00 ; \n\t\tfor ( $F119 ( dim , d ) ) { \n\t\t\tfinal double p_m_r = getDimForObject ( obj , dim ) % r ; \n\t\t\tdist += Math . pow ( Math . max ( p_m_r , r - p_m_r ) , t ) ; \n\t\t\t} \n\t\tdist = Math . pow ( dist , NUM00 / t ) ; \n\t\t} \n\telse { \n\t\tdist = Double . NEGATIVE_INFINITY ; \n\t\tfor ( $F119 ( dim , d ) ) { \n\t\t\tfinal double p_m_r = getDimForObject ( obj , dim ) % r ; \n\t\t\tdist = Math . max ( dist , Math . max ( p_m_r , r - p_m_r ) ) ; \n\t\t\t} \n\t\t} \n\treturn dist * diameter ; \n\t} \n"}, {"code": "public final int moveMade ( long now , boolean useIncrement ) { \n\tstopTimer ( now ) ; \n\tArrayList < TimeControlField > tc = tcData . getTC ( whiteToMove ) ; \n\t$F121644 tcInfo = getCurrentTC ( whiteToMove ) ; \n\tint tcIdx = tcInfo . first ; \n\tint movesToTc = tcInfo . second ; \n\tint remaining = getRemainingTime ( whiteToMove , now ) ; \n\tif ( useIncrement ) { \n\t\tremaining += tc . get ( tcIdx ) . increment ; \n\t\tif ( movesToTc == NUM00 ) { \n\t\t\tif ( tcIdx + NUM00 < tc . size ( ) ) tcIdx ++ ; \n\t\t\tremaining += tc . get ( tcIdx ) . timeControl ; \n\t\t\t} \n\t\t} \n\telapsed = NUM00 ; \n\treturn remaining ; \n\t} \n"}, {"code": "public static Properties prefixProperties ( Properties props , String prefix ) { \n\t$F2697 ( prefixProps ) for ( $F49930 ( key , props ) ) { \n\t\tif $F7311 ( key , prefix ) { \n\t\t\t$F130950 ( keyWithoutPrefix , key , prefix ) prefixProps . setProperty ( keyWithoutPrefix , props . getProperty ( key ) ) ; \n\t\t\t} \n\t\t} \n\treturn prefixProps ; \n\t} \n"}, {"code": "public final void testSetRegex $F72 { \n\tRegexConstraint regexConstraint = new RegexConstraint ( Pattern . compile ( NUM00 ) ) ; \n\tregexConstraint . setRegex ( REGEX ) ; \n\tassertEquals ( REGEX , regexConstraint . getRegex ( ) ) ; \n\t} \n"}, {"code": "public synchronized void start $F72 { \n\t$F7254 ( isStarted ) $F4640 ( isStopped ) logger . info ( NUM00 + Tor . getFullVersion ( ) + NUM00 ) ; \n\tverifyUnlimitedStrengthPolicyInstalled ( ) ; \n\tdirectoryDownloader . start ( directory ) ; \n\tcircuitManager . startBuildingCircuits ( ) ; \n\tif ( dashboard . isEnabledByProperty ( ) ) { \n\t\tdashboard . startListening ( ) ; \n\t\t} \n\tisStarted = _BOOL ; \n\t} \n"}, {"code": "public static CipherParameters makePBEParameters ( PBEKeySpec keySpec , int type , int hash , int keySize , int ivSize ) { \n\tPBEParametersGenerator generator = makePBEGenerator ( type , hash ) ; \n\t$F96 key ; \n\tCipherParameters param ; \n\tkey = convertPassword ( type , keySpec ) ; \n\tgenerator . init ( key , keySpec . getSalt ( ) , keySpec . getIterationCount ( ) ) ; \n\tif ( ivSize != NUM00 ) { \n\t\tparam = generator . generateDerivedParameters ( keySize , ivSize ) ; \n\t\t} \n\telse { \n\t\tparam = generator . generateDerivedParameters ( keySize ) ; \n\t\t} \n\tfor ( $F15868 ( i , key ) ) $F5629 ( key , i ) return param ; \n\t} \n"}, {"code": "$F1 public double value ( int attIndex ) { \n\tint index = locateIndex ( attIndex ) ; \n\tif ( ( index >= NUM00 ) && ( m_Indices [ index ] == attIndex ) ) $F1083 else $F1083 } \n"}, {"code": "private void fetchFilterSeeds $F72 { \n\t$F48075 ( seedList ) for ( Iterator < URI > it = seedList . iterator ( ) ; \n\tit . hasNext ( ) ; \n\t) { \n\t\tURI seed = it . next ( ) ; \n\t\tfor ( FetchFilter filter : controller . getFetchFilters ( ) ) { \n\t\t\tFetchStatus filterReason = filter . checkFilter ( seed ) ; \n\t\t\tif ( filterReason != FetchStatus . VALID ) { \n\t\t\t\t$F197555 ( log , seed , filterReason ) $F7042 ( it ) $F597 } \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public XYAreaRenderer2 ( XYToolTipGenerator labelGenerator , XYURLGenerator urlGenerator ) { \n\tsuper ( ) ; \n\tthis . showOutline = _BOOL ; \n\tsetBaseToolTipGenerator ( labelGenerator ) ; \n\tsetURLGenerator ( urlGenerator ) ; \n\t$F13609 ( area ) area . moveTo ( $F29083 ) ; \n\tarea . lineTo ( $F29083 ) ; \n\tarea . lineTo ( NUM00 , NUM00 ) ; \n\tarea . lineTo ( $F72322 ) ; \n\tarea . lineTo ( $F64496 ) ; \n\t$F2272 ( area ) this . legendArea = area ; \n\t} \n"}, {"code": "public static boolean isPrimitiveOrWrapper $F60993 ( clazz ) { \n\t$F18062 ( Assert , clazz ) return ( clazz . isPrimitive ( ) || isPrimitiveWrapper ( clazz ) ) ; \n\t} \n"}, {"code": "private void assertFileContains $F72133 ( expected , filename ) throws Exception { \n\ttry ( BufferedReader reader = new BufferedReader $F434 ( filename ) ) { \n\t\t$F24645 ( actual ) for ( $F589 ) { \n\t\t\t$F27015 ( line , reader ) $F32472 ( line ) actual . add ( line ) ; \n\t\t\t} \n\t\tassertEquals ( expected , actual ) ; \n\t\t} \n\t} \n"}, {"code": "private void reportException ( Kind kind , Element element , Throwable t ) { \n\t$F29429 ( buf ) $F24477 ( t , buf ) buf . toString ( ) ; \n\tmessage ( kind , element , NUM00 , buf . toString ( ) ) ; \n\t} \n"}, {"code": "public void add ( $F806 titles , $F1986 values ) { \n\tadd ( $F37513 ( mCategories ) , titles , values ) ; \n\t} \n"}, {"code": "static String parseAuthority ( String uriString , int ssi ) { \n\t$F115 ( length , uriString ) if ( length > ssi + NUM00 && $F10825 ( uriString , ssi ) && $F10825 ( uriString , ssi ) ) { \n\t\tint end = ssi + NUM00 ; \n\t\tLOOP : while ( end < length ) { \n\t\t\tswitch $F31372 ( uriString , end ) { \n\t\t\t\t$F1262 $F1262 $F1262 break LOOP ; \n\t\t\t\t} \n\t\t\tend ++ ; \n\t\t\t} \n\t\treturn uriString . substring ( ssi + NUM00 , end ) ; \n\t\t} \n\telse $F1337 } \n"}, {"code": "public static void sort ( $F11654 list ) { \n\tif $F3817 ( list ) $F57005 ( Collections , list , INSTANCE ) } \n"}, {"code": "$F1 public $F987 listOptions $F72 { \n\t$F994 ( newVector ) $F1000 ( newVector ) $F9007 ( newVector ) $F9007 ( newVector ) $F9007 ( newVector ) $F1000 ( newVector ) $F1007 ( newVector ) } \n"}, {"code": "public void addDatatransferProgressListener ( OnDatatransferProgressListener listener , OCUpload ocUpload ) { \n\t$F57400 ( ocUpload , listener ) String targetKey = buildRemoteName ( ocUpload . getAccountName ( ) , ocUpload . getRemotePath ( ) ) ; \n\tmBoundListeners . put ( targetKey , listener ) ; \n\t} \n"}, {"code": "$F52843 ( packed , map , i , j , count , value ) "}, {"code": "protected $F806 readNext ( LineNumberReader reader ) throws IOException { \n\t$F10127 ( rowDef ) do { \n\t\t$F27015 ( nextLine , reader ) if ( nextLine == null ) { \n\t\t\thasNext = _BOOL ; \n\t\t\treturn rowDef ; \n\t\t\t} \n\t\t$F806 r = parser . parseLineMulti ( nextLine ) ; \n\t\tif $F3305 ( r ) { \n\t\t\tif ( rowDef == null ) { \n\t\t\t\trowDef = r ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\t$F806 t = new String $F12348 ( rowDef , r ) ; \n\t\t\t\t$F7057 ( System , rowDef , t ) $F11244 ( System , r , t , rowDef ) rowDef = t ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\twhile ( parser . isPending ( ) ) ; \n\treturn rowDef ; \n\t} \n"}, {"code": "public $F6969 type $F72 { \n\tif ( isClass ) { \n\t\treturn $F146471 ( object ) ; \n\t\t} \n\telse { \n\t\treturn object . getClass ( ) ; \n\t\t} \n\t} \n"}, {"code": "private void verifyPropertySourceValue ( ReloadablePropertySource reloadablePropertySource , String expectedValue ) { \n\t$F8922 ( logger , TEST_KEY , expectedValue ) logger . debug ( $F3846 ( properties , TEST_KEY ) + reloadablePropertySource . getProperty ( TEST_KEY ) ) ; \n\tString value = ( String ) reloadablePropertySource . getProperty ( TEST_KEY ) ; \n\tassertEquals ( expectedValue , value ) ; \n\t} \n"}, {"code": "private void updateCenterPanel $F72 { \n\t$F657 ( now , System ) if ( _nextUpdateTime > now ) $F665 _nextUpdateTime = now + NUM00 * NUM00 ; \n\t$F7600 ( _centerPanel ) $F171121 ( _centerComponent ) $F45960 ( gbc ) gbc . gridx = NUM00 ; \n\tgbc . gridy = NUM00 ; \n\tgbc . weightx = NUM00 ; \n\t$F76546 ( gbc , GridBagConstraints ) $F76547 ( gbc , GridBagConstraints ) _centerPanel . add ( _centerComponent , gbc ) ; \n\trefresh ( ) ; \n\t} \n"}, {"code": "public void serviceRequestQueue $F72 throws CLIException { \n\tif ( isVerbose ( ) ) { \n\t\toutputWriter . printlnMessage ( rbMessages . getString ( NUM00 ) ) ; \n\t\t} \n\ttry { \n\t\twhile $F5973 ( requestQueue ) { \n\t\t\tCLIRequest req = ( CLIRequest ) requestQueue . remove ( NUM00 ) ; \n\t\t\ttry { \n\t\t\t\treq . process ( this ) ; \n\t\t\t\tif ( statusOS != null ) { \n\t\t\t\t\tString status = formatStatus ( req . getOptions ( ) , NUM00 ) ; \n\t\t\t\t\t$F60813 ( statusOS , status ) } \n\t\t\t\t} \n\t\t\tcatch ( CLIException e ) { \n\t\t\t\tif ( isVerbose ( ) ) { \n\t\t\t\t\t$F156149 ( e , System ) } \n\t\t\t\tif ( statusOS != null ) { \n\t\t\t\t\tString status = formatStatus ( req . getOptions ( ) , e . getExitCode ( ) ) ; \n\t\t\t\t\t$F60813 ( statusOS , status ) } \n\t\t\t\tif ( bContinue ) { \n\t\t\t\t\toutputWriter . printlnError ( e . getMessage ( ) ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tthrow e ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tcatch ( IOException e ) { \n\t\t$F145379 ( e , ExitCodes ) } \n\tfinally { \n\t\tif ( statusOS != null ) { \n\t\t\t$F18072 ( statusOS ) statusOS = null ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "AlwaysIdenticalKeyStoreState $F72 $F5795 ( super ) "}, {"code": "public static $F96 packByteBufferIntoSingleByteArray ( $F30903 byteBufferArr ) { \n\tif ( null == byteBufferArr || byteBufferArr . length == NUM00 ) $F1337 int noOfCol = byteBufferArr . length ; \n\tshort offsetLen = ( short ) ( noOfCol * NUM00 ) ; \n\tint totalBytes = calculateTotalBytes ( byteBufferArr ) + offsetLen ; \n\t$F87627 ( buffer , ByteBuffer , totalBytes ) buffer . putShort ( offsetLen ) ; \n\tfor ( $F21583 ( index , byteBufferArr ) ) { \n\t\tByteBuffer individualCol = byteBufferArr [ index ] ; \n\t\t$F85980 ( noOfBytes , individualCol ) buffer . putShort ( $F15066 ( offsetLen , noOfBytes ) ) ; \n\t\toffsetLen += noOfBytes ; \n\t\t$F23501 ( individualCol ) } \n\tfor ( $F1139 ( index , byteBufferArr ) ) { \n\t\tByteBuffer individualCol = byteBufferArr [ index ] ; \n\t\tbuffer . put ( individualCol . array ( ) ) ; \n\t\t} \n\t$F23501 ( buffer ) $F31057 ( buffer ) } \n"}, {"code": "public void stop $F72 { \n\tmCancel = _BOOL ; \n\tif $F48405 ( mRunning , _BOOL ) { \n\t\tif ( mSampleDispatcherTask != null ) { \n\t\t\tmThreadPoolManager . cancel ( mSampleDispatcherTask ) ; \n\t\t\tmSampleDispatcherTask = null ; \n\t\t\t$F725 ( mFilledBuffers ) } \n\t\t} \n\t} \n"}, {"code": "public void add ( SimpleName ref ) { \n\tString typeName = ref . getIdentifier ( ) ; \n\t$F13678 ( fImportsAdded , typeName ) IBinding binding = ref . resolveBinding ( ) ; \n\tif ( binding != null ) { \n\t\tif ( binding . getKind ( ) != IBinding . TYPE ) $F932 ITypeBinding typeBinding = ( ITypeBinding ) binding ; \n\t\tif $F6974 ( typeBinding ) { \n\t\t\ttypeBinding = typeBinding . getElementType ( ) ; \n\t\t\t} \n\t\ttypeBinding = typeBinding . getTypeDeclaration ( ) ; \n\t\tif ( ! typeBinding . isRecovered ( ) ) { \n\t\t\tif ( needsImport ( typeBinding , ref ) ) { \n\t\t\t\tfImpStructure . addImport ( typeBinding ) ; \n\t\t\t\tfImportsAdded . add ( typeName ) ; \n\t\t\t\t} \n\t\t\t$F665 } \n\t\t} \n\telse { \n\t\tif $F316063 ( fDoIgnoreLowerCaseNames , typeName ) { \n\t\t\t$F12685 ( ch , typeName ) if ( Strings . isLowerCase ( ch ) && Character . isLetter ( ch ) ) $F932 } \n\t\t} \n\tfImportsAdded . add ( typeName ) ; \n\tfUnresolvedTypes . put ( typeName , new UnresolvedTypeData ( ref ) ) ; \n\t} \n"}, {"code": "private static boolean checkFont $F106000 ( fontName , newName , testString , force ) { \n\tboolean displayable = _BOOL ; \n\tFont f = UIManager . getFont ( fontName ) ; \n\tif ( f != null && ! newName . equalsIgnoreCase ( f . getName ( ) ) ) { \n\t\tif ( ! GUIUtils . canDisplay ( f , testString ) || force ) { \n\t\t\tf = new Font ( newName , f . getStyle ( ) , f . getSize ( ) ) ; \n\t\t\tif ( GUIUtils . canDisplay ( f , testString ) ) UIManager . put ( fontName , f ) ; \n\t\t\telse displayable = _BOOL ; \n\t\t\t} \n\t\t} \n\telse if ( f != null ) { \n\t\tdisplayable = GUIUtils . canDisplay ( f , testString ) ; \n\t\t} \n\telse { \n\t\tdisplayable = _BOOL ; \n\t\t} \n\treturn displayable ; \n\t} \n"}, {"code": "public void addAllSearchables ( ArrayList < ? extends SearchResult > searchable ) $F21926 ( mSearchableList , searchable ) "}, {"code": "public $F229682 addArgumentHotspots ( String signature , int arg ) { \n\t$F229682 sigSpots = StringAnalysis . getArgumentExpressions ( signature , arg ) ; \n\treturn addArgumentHotspots ( signature , arg , sigSpots ) ; \n\t} \n"}, {"code": "public boolean isFull $F72 { \n\treturn counter . get ( ) == qSize ; \n\t} \n"}, {"code": "public static String JQ ( String request ) throws Exception { \n\t$F1384 ( queryStartPos , request ) String query ; \n\tString path ; \n\tif ( - NUM00 == queryStartPos ) { \n\t\tquery = NUM00 ; \n\t\tpath = request ; \n\t\t} \n\telse $F181085 ( query , request , queryStartPos , path ) $F373826 ( query , setParam ) request = path + NUM00 + setParam ( query , NUM00 , NUM00 ) ; \n\tString response ; \n\tboolean failed = _BOOL ; \n\ttry { \n\t\tresponse = restTestHarness . query ( request ) ; \n\t\tfailed = _BOOL ; \n\t\t} \n\tfinally { \n\t\tif ( failed ) $F17663 ( log , request ) } \n\treturn response ; \n\t} \n"}, {"code": "static void sort ( $F2027 a , int left , int right , $F2027 work , int workBase , int workLen ) { \n\t$F68994 ( right , left , QUICKSORT_THRESHOLD , sort , a , _BOOL ) $F65716 ( run , MAX_RUN_COUNT ) int count = NUM00 ; \n\trun [ NUM00 ] = left ; \n\tfor ( int k = left ; \n\tk < right ; \n\trun [ count ] = k ) { \n\t\t$F164508 ( k , right , a ) $F67767 ( k , right ) if $F68996 ( a , k ) $F69000 ( k , right , a ) else if $F56227 ( a , k ) { \n\t\t\t$F69004 ( k , right , a ) for ( $F69005 ( lo , run , count , hi , k ) ) { \n\t\t\t\tint t = a [ lo ] ; \n\t\t\t\ta [ lo ] = a [ hi ] ; \n\t\t\t\ta [ hi ] = t ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( run [ count ] > left && a [ run [ count ] ] >= a [ run [ count ] - NUM00 ] ) { \n\t\t\tcount -- ; \n\t\t\t} \n\t\t$F69018 ( count , MAX_RUN_COUNT , sort , a , left , right , _BOOL ) } \n\tif ( count == NUM00 ) $F932 else if ( count == NUM00 && run [ count ] > right ) $F932 right ++ ; \n\tif ( run [ count ] < right ) { \n\t\trun [ ++ count ] = right ; \n\t\t} \n\tbyte odd = NUM00 ; \n\t$F69024 ( n , count , odd ) $F2027 b ; \n\tint ao , bo ; \n\tint blen = right - left ; \n\tif $F69026 ( work , workLen , blen , workBase ) { \n\t\t$F3936 ( work , blen ) workBase = NUM00 ; \n\t\t} \n\t$F69031 ( odd , System , a , left , work , workBase , blen , b , bo , ao ) for ( int last ; \n\tcount > NUM00 ; \n\tcount = last ) { \n\t\t$F69046 ( k , last , count , hi , run , mi , i , p , q , a , ao , b , bo ) $F69051 ( count , i , right , lo , run , b , bo , a , ao , last ) $F2027 t = a ; \n\t\ta = b ; \n\t\tb = t ; \n\t\tint o = ao ; \n\t\tao = bo ; \n\t\tbo = o ; \n\t\t} \n\t} \n"}, {"code": "protected void shiftEnd ( int newSize ) { \n\tint oldSize = getArrayLength ( ) ; \n\tint oldGapEnd = g1 ; \n\tint upperSize = oldSize - oldGapEnd ; \n\tint arrayLength = getNewArraySize ( newSize ) ; \n\tint newGapEnd = arrayLength - upperSize ; \n\tresize ( arrayLength ) ; \n\tg1 = newGapEnd ; \n\tif ( upperSize != NUM00 ) { \n\t\t$F69282 ( System , array , oldGapEnd , newGapEnd , upperSize ) } \n\t} \n"}, {"code": "protected void processStyle12ExamineAndSetupAdjustment ( Game game , Style12Message message , GameService service , String entireMessage ) { \n\t$F35060 ( LOG ) if ( game . isInState ( Game . OBSERVING_EXAMINED_STATE ) && message . relation == Style12Message . EXAMINING_GAME_RELATION ) { \n\t\t$F35060 ( LOG ) $F36239 ( examineGamesWaitingOnMoves , game , message ) connector . sendMessage ( NUM00 + message . gameId , _BOOL , ChatType . MOVES ) ; \n\t\t} \n\telse if $F80721 ( entireMessage ) { \n\t\t$F35060 ( LOG ) Game examineGame = IcsUtils . createGame ( message , entireMessage ) ; \n\t\tif ( message . relation == Style12Message . EXAMINING_GAME_RELATION && ! examineGame . isInState ( Game . SETUP_STATE ) ) { \n\t\t\t$F36239 ( examineGamesWaitingOnMoves , game , message ) connector . sendMessage ( NUM00 + message . gameId , _BOOL , ChatType . MOVES ) ; \n\t\t\t} \n\t\t} \n\telse if ( game . isInState ( Game . EXAMINING_STATE ) && $F80721 ( entireMessage ) ) { \n\t\t$F35060 ( LOG ) processExaminedGameBecameSetup ( ) ; \n\t\t} \n\telse if $F80721 ( entireMessage ) { \n\t\t$F36239 ( examineGamesWaitingOnMoves , game , message ) connector . sendMessage ( NUM00 + message . gameId , _BOOL , ChatType . MOVES ) ; \n\t\t} \n\telse { \n\t\tIcsUtils . resetGame ( game , message ) ; \n\t\tservice . fireGameStateChanged ( message . gameId , _BOOL ) ; \n\t\tconnector . sendMessage ( NUM00 + message . gameId , _BOOL , ChatType . MOVES ) ; \n\t\t} \n\t} \n"}, {"code": "public SamFilterChain ( Collection < SamFilter > filters ) { \n\tmFilters = filters . toArray ( new SamFilter $F2313 ( filters ) ) ; \n\t} \n"}, {"code": "PreviousWordAction ( String nm , boolean select ) $F64660 ( super , nm , this , select ) "}, {"code": "static UnixStream $F4 cat ( final String filePath ) throws IOException { \n\t$F10578 ( Objects , filePath ) return new UnixStreamImpl $F200 $F26285 ( lines , Paths , filePath ) ; \n\t} \n"}, {"code": "private static String encode_base64 ( byte $F3234 , int len ) throws IllegalArgumentException { \n\tint off = NUM00 ; \n\t$F280 ( rs ) int c1 , c2 ; \n\tif ( len <= NUM00 || len > d . length ) $F825 while ( off < len ) { \n\t\tc1 = d [ off ++ ] & NUM00 ; \n\t\trs . append ( $F138727 ( base64_code , c1 ) ) ; \n\t\tc1 = ( c1 & NUM00 ) < < NUM00 ; \n\t\t$F3250 ( off , len , rs , base64_code , c1 ) c2 = d [ off ++ ] & NUM00 ; \n\t\tc1 |= $F11786 ( c2 ) ; \n\t\t$F3248 ( rs , base64_code , c1 ) $F3252 ( c1 , c2 ) $F3250 ( off , len , rs , base64_code , c1 ) c2 = d [ off ++ ] & NUM00 ; \n\t\tc1 |= $F11786 ( c2 ) ; \n\t\t$F3248 ( rs , base64_code , c1 ) $F3248 ( rs , base64_code , c2 ) } \n\t$F92 ( rs ) } \n"}, {"code": "protected void eleminateRedundent ( ElemTemplateElement psuedoVarRecipient , Vector paths ) { \n\t$F2199 ( n , paths ) int numPathsEliminated = NUM00 ; \n\tint numUniquePathsEliminated = NUM00 ; \n\tfor ( $F119 ( i , n ) ) { \n\t\t$F55733 ( owner , paths , i ) if ( null != owner ) { \n\t\t\tint found = findAndEliminateRedundant ( i + NUM00 , i , owner , psuedoVarRecipient , paths ) ; \n\t\t\tif ( found > NUM00 ) numUniquePathsEliminated ++ ; \n\t\t\tnumPathsEliminated += found ; \n\t\t\t} \n\t\t} \n\teleminateSharedPartialPaths ( psuedoVarRecipient , paths ) ; \n\tif ( DIAGNOSE1_PATHS_REDUCED ) diagnoseNumPaths ( paths , numPathsEliminated , numUniquePathsEliminated ) ; \n\t} \n"}, {"code": "public void commercialResult ( String stream , String resultText , RequestResult result ) { \n\tsetCommercialResult ( DateTime . currentTime ( ) + NUM00 + resultText ) ; \n\t$F3224 ( lastCommercialRunAttempt , System ) setLoadingCommercial ( _BOOL ) ; \n\tif ( result == TwitchApi . RequestResult . RUNNING_COMMERCIAL ) { \n\t\tlastCommercial . put ( stream , System . currentTimeMillis ( ) ) ; \n\t\tif $F1256 ( stream , currentChannel ) $F22067 ( lastCommercialRun , System ) } \n\t} \n"}, {"code": "$F32569 ( panel , cols , rows , filler , filled_cell_11 , _BOOL , cc , Box , index ) "}, {"code": "public void done $F72 throws IOException { \n\tif ( ! initialStyles ) $F62354 ( writeInitialStyles , initialStyles , _BOOL ) $F256031 ( out ) out . flushBits ( ) ; \n\tif ( bout != null && glyphCount > NUM00 ) { \n\t\t$F1208 ( glyphBytes , bout ) glyphByteArrays . add ( glyphBytes ) ; \n\t\t} \n\tif ( glyphCount > NUM00 ) { \n\t\t$F1659 ( bout ) out = new OutStream ( bout ) ; \n\t\tglyphCount -- ; \n\t\tfill1Index = NUM00 ; \n\t\tlineIndex = NUM00 ; \n\t\toutstandingChanges = _BOOL ; \n\t\tinitialStyles = _BOOL ; \n\t\t} \n\telse { \n\t\t$F60488 ( bout , finishFont ) writer . completeTag ( ) ; \n\t\t} \n\t} \n"}, {"code": "private static DetachISOResponse checkDetachISOResponse ( DetachISOResponse detachISOResponse ) throws RpcException { \n\t$F10635 ( logger , detachISOResponse ) switch $F52729 ( detachISOResponse ) { \n\t\tcase OK : $F597 case ISO_NOT_ATTACHED : $F18942 ( logger , detachISOResponse ) throw new IsoNotAttachedException $F52730 ( detachISOResponse ) ; \n\t\tcase SYSTEM_ERROR : $F18942 ( logger , detachISOResponse ) throw new SystemErrorException $F52730 ( detachISOResponse ) ; \n\t\tcase VM_NOT_FOUND : $F18942 ( logger , detachISOResponse ) throw new VmNotFoundException $F52730 ( detachISOResponse ) ; \n\t\t$F52745 ( String , detachISOResponse ) } \n\treturn detachISOResponse ; \n\t} \n"}, {"code": "public boolean is_terminal ( MethodOrMethodContext mc ) { \n\tStack $F69372 sys_stack = new Stack $F69372 $F72 ; \n\tboolean result ; \n\tif ( ! is_system ( mc . method ( ) ) ) result = _BOOL ; \n\telse { \n\t\tif ( ! process_callbacks ) result = _BOOL ; \n\t\telse { \n\t\t\tif ( $F3817 ( stack ) && is_system ( stack . peek ( ) ) ) result = ! calls_app_method ( mc , sys_stack ) ; \n\t\t\telse { \n\t\t\t\tif ( can_have_callbacks ( mc . method ( ) ) ) result = ! calls_app_method ( mc , sys_stack ) ; \n\t\t\t\telse result = _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tlogger . info ( NUM00 , mc . method ( ) , result ) ; \n\treturn result ; \n\t} \n"}, {"code": "boolean tryMatch ( SNode s ) { \n\tif ( match == null && UNSAFE . compareAndSwapObject ( this , matchOffset , null , s ) ) { \n\t\tThread w = waiter ; \n\t\tif ( w != null ) { \n\t\t\twaiter = null ; \n\t\t\tLockSupport . unpark ( w ) ; \n\t\t\t} \n\t\treturn _BOOL ; \n\t\t} \n\treturn match == s ; \n\t} \n"}, {"code": "public void addItem ( int position , M model ) $F94473 ( mDatas , position , model , notifyItemInserted ) "}, {"code": "public final $F2689 aliases $F72 { \n\treturn Collections . unmodifiableSet ( this . aliasesSet ) ; \n\t} \n"}, {"code": "public void encode ( OutputStream out ) throws IOException { \n\t$F19904 ( tmp ) if $F73719 ( this ) { \n\t\tthis . extensionId = PKIXExtensions . IssuingDistributionPoint_Id ; \n\t\tthis . critical = _BOOL ; \n\t\tencodeThis ( ) ; \n\t\t} \n\tsuper . encode ( tmp ) ; \n\t$F1569 ( out , tmp ) } \n"}, {"code": "public final void readChildren ( ObjectInputStream ois ) throws $F6427 { \n\tint count = serializable ; \n\twhile ( count -- > NUM00 ) { \n\t\tObject child = null ; \n\t\tBeanContextSupport . BCSChild bscc = null ; \n\t\ttry { \n\t\t\t$F215455 ( child , ois ) bscc = ( BeanContextSupport . BCSChild ) ois . readObject ( ) ; \n\t\t\t} \n\t\tcatch ( IOException ioe ) $F1448 catch ( ClassNotFoundException cnfe ) $F1448 synchronized ( child ) { \n\t\t\tBeanContextChild bcc = null ; \n\t\t\ttry { \n\t\t\t\tbcc = ( BeanContextChild ) child ; \n\t\t\t\t} \n\t\t\tcatch ( ClassCastException cce ) $F845 if ( bcc != null ) { \n\t\t\t\ttry { \n\t\t\t\t\tbcc . setBeanContext ( getBeanContextPeer ( ) ) ; \n\t\t\t\t\t$F146695 ( bcc , childPCL ) bcc . addVetoableChangeListener ( NUM00 , childVCL ) ; \n\t\t\t\t\t} \n\t\t\t\tcatch ( PropertyVetoException pve ) $F1448 } \n\t\t\tchildDeserializedHook ( child , bscc ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F37100 ( fieldId , SUCCESS ) "}, {"code": "static boolean isChristmasTime ( Calendar cal ) { \n\tint month = $F21623 ( cal , Calendar ) ; \n\t$F187609 ( day , cal , Calendar ) if $F152867 ( month ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( month == NUM00 ) { \n\t\treturn day <= NUM00 ; \n\t\t} \n\tif ( month == NUM00 ) { \n\t\treturn day >= NUM00 ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "$F1 public void zoomRangeAxes ( double factor , PlotRenderingInfo info , Point2D source ) { \n\tzoomRangeAxes ( factor , info , source , _BOOL ) ; \n\t} \n"}, {"code": "$F6802 ( esd , connectionAllowed ) "}, {"code": "private void boardSaveImage $F72 { \n\tif ( curfileImage == null ) $F10990 ( boardSaveAsImage ) JDialog waitD = new JDialog ( frame , Messages . getString ( NUM00 ) ) ; \n\twaitD . add ( new JLabel $F16961 ( Messages ) ) ; \n\t$F267778 ( waitD ) waitD . setLocation ( ( frame . getSize ( ) . width / NUM00 ) - ( waitD . getSize ( ) . width / NUM00 ) , ( frame . getSize ( ) . height / NUM00 ) - ( waitD . getSize ( ) . height / NUM00 ) ) ; \n\twaitD . setVisible ( _BOOL ) ; \n\tframe . setCursor ( $F92769 ( Cursor ) ) ; \n\twaitD . setCursor ( $F92769 ( Cursor ) ) ; \n\ttry { \n\t\tImageIO . write ( bv . getEntireBoardImage ( ) , NUM00 , curfileImage ) ; \n\t\t} \n\t$F12241 ( e ) waitD . setVisible ( _BOOL ) ; \n\tframe . setCursor ( Cursor . getDefaultCursor ( ) ) ; \n\t} \n"}, {"code": "public boolean containsName ( String type , String name ) { \n\t$F43655 ( names , getNames , type ) $F297 ( names , name ) } \n"}, {"code": "$F1431 public static < C extends Result > ArrayList $F37574 filterResults ( ResultHierarchy hier , Result r , Class < ? super C > restrictionClass ) { \n\tArrayList $F37574 $F204 ( res ) ; \n\tif $F38790 ( restrictionClass , r ) { \n\t\tres . add ( ( C ) restrictionClass . cast ( r ) ) ; \n\t\t} \n\tfor ( Hierarchy . Iter $F89732 iter = hier . iterDescendants ( r ) ; \n\titer . valid ( ) ; \n\titer . advance ( ) ) { \n\t\tResult result = iter . get ( ) ; \n\t\tif $F38790 ( restrictionClass , result ) { \n\t\t\tres . add ( ( C ) restrictionClass . cast ( result ) ) ; \n\t\t\t} \n\t\t} \n\treturn res ; \n\t} \n"}, {"code": "private boolean hasNextProxy $F72 $F231867 ( nextProxyIndex , proxies ) "}, {"code": "$F21175 @ CausesError ( { \n\tIncorrectPure4JImmutableCallException . class , PureMethodParameterNotImmutableException . class } \n) public String testParam1Bad ( Object in1 , Object in2 ) { \n\tObject in3 = in2 ; \n\tPure4J . immutable ( in1 , in2 ) ; \n\t$F92 ( in3 ) } \n"}, {"code": "protected $F8748 canHandleMissing ( boolean nominalPredictor , boolean numericPredictor , boolean stringPredictor , boolean datePredictor , boolean relationalPredictor , boolean multiInstance , int classType , boolean predictorMissing , boolean classMissing , int missingLevel ) { \n\tif ( missingLevel == NUM00 ) $F1210 ( print ) print ( NUM00 ) ; \n\tif ( predictorMissing ) { \n\t\tprint ( NUM00 ) ; \n\t\t$F29727 ( classMissing , print ) } \n\t$F29727 ( classMissing , print ) print ( NUM00 ) ; \n\tprintAttributeSummary ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType ) ; \n\tprint ( NUM00 ) ; \n\t$F8728 ( accepts ) $F18793 ( accepts ) $F18793 ( accepts ) $F18793 ( accepts ) $F18793 ( accepts ) $F51573 ( numTrain , getNumInstances , numClasses ) return runBasicTest ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType , missingLevel , predictorMissing , classMissing , numTrain , numClasses , accepts ) ; \n\t} \n"}, {"code": "public $F155343 pick_items ( PlaPoint p_location , int p_layer , ItemSelectionFilter p_filter ) { \n\t$F155343 result = new $F155359 $F72 ; \n\tShapeTileBox point_shape = p_location . to_box ( ) ; \n\tCollection < AwtreeObject > overlaps = overlapping_objects ( point_shape , p_layer ) ; \n\tfor ( AwtreeObject curr_object : overlaps ) { \n\t\tif ( ! ( curr_object instanceof BrdItem ) ) $F598 BrdItem curr_item = ( BrdItem ) curr_object ; \n\t\tif ( ! curr_item . is_selected_by_filter ( p_filter ) ) $F598 result . add ( curr_item ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public boolean isCollinearWith ( Vector other ) { \n\tif ( x == NUM00 && y == NUM00 && z == NUM00 ) { \n\t\treturn _BOOL ; \n\t\t} \n\tfinal double otherX = other . x ; \n\tfinal double otherY = other . y ; \n\tfinal double otherZ = other . z ; \n\tif ( otherX == NUM00 && otherY == NUM00 && otherZ == NUM00 ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( ( x == NUM00 ) != ( otherX == NUM00 ) ) return _BOOL ; \n\tif ( ( y == NUM00 ) != ( otherY == NUM00 ) ) return _BOOL ; \n\tif ( ( z == NUM00 ) != ( otherZ == NUM00 ) ) return _BOOL ; \n\tfinal double quotientX = otherX / x ; \n\tif $F2292 ( Double , quotientX ) $F139962 ( other , multiply , quotientX ) final double quotientY = otherY / y ; \n\tif $F2292 ( Double , quotientY ) $F139962 ( other , multiply , quotientY ) final double quotientZ = otherZ / z ; \n\tif $F2292 ( Double , quotientZ ) $F139962 ( other , multiply , quotientZ ) $F11388 } \n"}, {"code": "public void receive $F74143 ( currentFFTBins ) { \n\tif ( Float . isInfinite ( currentFFTBins [ NUM00 ] ) || Float . isNaN ( currentFFTBins [ NUM00 ] ) ) { \n\t\tcurrentFFTBins = new float [ currentFFTBins . length ] ; \n\t\t} \n\tif ( mDisplayFFTBins == null || mDisplayFFTBins . length != currentFFTBins . length ) { \n\t\tmDisplayFFTBins = currentFFTBins ; \n\t\t} \n\t$F5415 smoothedBins = mSmoothingFilter . filter ( currentFFTBins ) ; \n\tif ( mAveraging > NUM00 ) { \n\t\tfloat gain = NUM00 / ( float ) mAveraging ; \n\t\tfor ( $F1139 ( x , mDisplayFFTBins ) ) { \n\t\t\tmDisplayFFTBins [ x ] += $F17318 ( smoothedBins , x , mDisplayFFTBins ) * gain ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tmDisplayFFTBins = smoothedBins ; \n\t\t} \n\trepaint ( ) ; \n\t} \n"}, {"code": "$F1 public void executionUnitImported ( final ExecutionUnit process , final Element element ) { \n\t$F9040 ( children , element ) children = element . getChildNodes ( ) ; \n\tfor ( $F85554 ( i , children ) ) { \n\t\t$F61359 ( child , children , i ) if ( child instanceof Element ) { \n\t\t\t$F6721 ( backgroundElement , child ) if ( XML_TAG_BACKGROUND . equals ( backgroundElement . getTagName ( ) ) ) { \n\t\t\t\t$F57219 ( xStr , backgroundElement , XML_ATTRIBUTE_X_POSITION ) $F57219 ( yStr , backgroundElement , XML_ATTRIBUTE_Y_POSITION ) $F57219 ( wStr , backgroundElement , XML_ATTRIBUTE_WIDTH ) $F57219 ( hStr , backgroundElement , XML_ATTRIBUTE_HEIGHT ) $F57219 ( imgLocStr , backgroundElement , XML_ATTRIBUTE_LOCATION ) try { \n\t\t\t\t\t$F27213 ( xLoc , Integer , xStr ) $F27213 ( yLoc , Integer , yStr ) $F27213 ( wLoc , Integer , wStr ) $F27213 ( hLoc , Integer , hStr ) ProcessBackgroundImage bgImg = new ProcessBackgroundImage ( xLoc , yLoc , wLoc , hLoc , imgLocStr , process ) ; \n\t\t\t\t\tsetBackgroundImage ( bgImg ) ; \n\t\t\t\t\t} \n\t\t\t\tcatch ( NullPointerException | IllegalArgumentException e ) $F845 } \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void sendMailToQueue ( String to , String subject , String content , boolean isMultipart , boolean isHtml ) { \n\tEmailParams emailParams = new EmailParams ( to , subject , content , isMultipart , isHtml ) ; \n\trabbitTemplate . convertAndSend ( RabbitmqConfiguration . QUEUE_SEND_EMAIL , emailParams ) ; \n\t} \n"}, {"code": "public MersenneTwisterRNG $F3295 ( seed ) { \n\tif $F36221 ( seed , SEED_SIZE_BYTES ) $F825 $F256750 ( this , seed ) final $F2027 seedInts = convertBytesToInts ( this . seed ) ; \n\tmt [ NUM00 ] = BOOTSTRAP_SEED ; \n\tfor ( mtIndex = NUM00 ; \n\tmtIndex < N ; \n\tmtIndex ++ ) { \n\t\tmt [ mtIndex ] = BOOTSTRAP_FACTOR * ( mt [ mtIndex - NUM00 ] ^ mt [ mtIndex - NUM00 ] > > > NUM00 ) + mtIndex ; \n\t\t} \n\tint i = NUM00 ; \n\tint j = NUM00 ; \n\tfor ( int k = Math . max ( N , seedInts . length ) ; \n\tk > NUM00 ; \n\tk -- ) { \n\t\tmt [ i ] = ( mt [ i ] ^ ( mt [ i - NUM00 ] ^ mt [ i - NUM00 ] > > > NUM00 ) * SEED_FACTOR1 ) + seedInts [ j ] + j ; \n\t\ti ++ ; \n\t\tj ++ ; \n\t\tif ( i >= N ) { \n\t\t\tmt [ NUM00 ] = mt [ N - NUM00 ] ; \n\t\t\ti = NUM00 ; \n\t\t\t} \n\t\tif ( j >= seedInts . length ) { \n\t\t\tj = NUM00 ; \n\t\t\t} \n\t\t} \n\tfor ( $F96625 ( k , N ) ) { \n\t\tmt [ i ] = ( mt [ i ] ^ ( mt [ i - NUM00 ] ^ mt [ i - NUM00 ] > > > NUM00 ) * SEED_FACTOR2 ) - i ; \n\t\ti ++ ; \n\t\tif ( i >= N ) { \n\t\t\tmt [ NUM00 ] = mt [ N - NUM00 ] ; \n\t\t\ti = NUM00 ; \n\t\t\t} \n\t\t} \n\tmt [ NUM00 ] = UPPER_MASK ; \n\t} \n"}, {"code": "private Set < ObjectInstance > filterListOfObjectInstances ( Set < ObjectInstance > list , QueryExp query ) { \n\tif ( query == null ) { \n\t\treturn list ; \n\t\t} \n\telse { \n\t\tSet < ObjectInstance > result = new HashSet < ObjectInstance > $F72 ; \n\t\tfor ( ObjectInstance oi : list ) { \n\t\t\tboolean res = _BOOL ; \n\t\t\tMBeanServer oldServer = QueryEval . getMBeanServer ( ) ; \n\t\t\tquery . setMBeanServer ( server ) ; \n\t\t\ttry { \n\t\t\t\tres = query . apply ( oi . getObjectName ( ) ) ; \n\t\t\t\t} \n\t\t\t$F28453 ( res , _BOOL ) finally { \n\t\t\t\tquery . setMBeanServer ( oldServer ) ; \n\t\t\t\t} \n\t\t\t$F46023 ( res , result , oi ) } \n\t\treturn result ; \n\t\t} \n\t} \n"}, {"code": "$F73303 ( axis , trans , prevImageSize , imageSize , prevViewSize , viewSize , drawableSize , m , Matrix , percentage , Math ) "}, {"code": "$F2513 @ Timed @ ExceptionMetered @ GET public AutomationSecretResponse readSecretById ( @ Auth AutomationClient automationClient , @ PathParam ( NUM00 ) LongParam secretId ) { \n\tOptional < Secret > secret = secretController . getSecretById ( secretId . get ( ) ) ; \n\tif $F16476 ( secret ) { \n\t\tthrow new NotFoundException $F580 ; \n\t\t} \n\tImmutableList < Group > groups = ImmutableList . copyOf ( aclDAO . getGroupsFor ( secret . get ( ) ) ) ; \n\treturn AutomationSecretResponse . fromSecret ( secret . get ( ) , groups ) ; \n\t} \n"}, {"code": "protected void addActionExceptionWarning ( Exception e ) { \n\t$F105671 ( msg , e ) $F1140 ( msg , warnings ) } \n"}, {"code": "private void generateFieldInfos ( IType type , IBinaryType typeInfo , HashMap newElements , ArrayList childrenHandles ) { \n\tIBinaryField [ ] fields = typeInfo . getFields ( ) ; \n\t$F2329 ( fields ) JavaModelManager manager = ( ( JavaElement ) type ) . manager ; \n\tfor ( $F151668 ( i , fieldCount , fields ) ) { \n\t\tIBinaryField fieldInfo = fields [ i ] ; \n\t\tBinaryField field = new BinaryField ( ( JavaElement ) type , manager , manager . intern ( new String $F27949 ( fieldInfo ) ) ) ; \n\t\tnewElements . put ( field , fieldInfo ) ; \n\t\tchildrenHandles . add ( field ) ; \n\t\tgenerateAnnotationsInfos ( field , fieldInfo . getAnnotations ( ) , fieldInfo . getTagBits ( ) , newElements ) ; \n\t\t} \n\t} \n"}, {"code": "public void testFormattingYear $F72 { \n\tFormatTester test = new FormatTester $F72 ; \n\tCalendar cal = new GregorianCalendar ( NUM00 , Calendar . JUNE , NUM00 , NUM00 , NUM00 , NUM00 ) ; \n\ttest . test ( NUM00 , cal , NUM00 , DateFormat . YEAR_FIELD ) ; \n\ttest . test ( NUM00 , cal , NUM00 , DateFormat . YEAR_FIELD ) ; \n\ttest . test ( NUM00 , new GregorianCalendar ( NUM00 , Calendar . JUNE , NUM00 ) , NUM00 , DateFormat . YEAR_FIELD ) ; \n\ttest . test ( NUM00 , new GregorianCalendar ( NUM00 , Calendar . JUNE , NUM00 ) , NUM00 , DateFormat . YEAR_FIELD ) ; \n\ttest . test ( NUM00 , new GregorianCalendar ( NUM00 , Calendar . JUNE , NUM00 ) , NUM00 , DateFormat . YEAR_FIELD ) ; \n\ttest . test ( NUM00 , cal , NUM00 , DateFormat . YEAR_FIELD ) ; \n\ttest . test ( NUM00 , cal , NUM00 , DateFormat . YEAR_FIELD ) ; \n\ttest . test ( NUM00 , cal , NUM00 , DateFormat . YEAR_FIELD ) ; \n\tassertFalse ( test . testsFailed ) ; \n\t} \n"}, {"code": "public $F3803 generateModel ( String schema , String table , String packageName , boolean annotateSchema , boolean trimStrings ) { \n\ttry { \n\t\t$F3803 models = New . arrayList ( ) ; \n\t\tList < TableInspector > tables = getTables ( schema , table ) ; \n\t\tfor ( TableInspector t : tables ) { \n\t\t\tt . read ( metaData ) ; \n\t\t\tString model = t . generateModel ( packageName , annotateSchema , trimStrings ) ; \n\t\t\tmodels . add ( model ) ; \n\t\t\t} \n\t\treturn models ; \n\t\t} \n\tcatch ( SQLException s ) $F9491 ( s ) } \n"}, {"code": "public static Ed25519EncodedFieldElement toEncodedFieldElement ( final BigInteger b ) { \n\treturn new Ed25519EncodedFieldElement ( toByteArray ( b ) ) ; \n\t} \n"}, {"code": "private void mergeCollapse $F72 { \n\twhile ( stackSize > NUM00 ) { \n\t\tint n = stackSize - NUM00 ; \n\t\tif ( n > NUM00 && runLen [ n - NUM00 ] <= runLen [ n ] + runLen [ n + NUM00 ] ) { \n\t\t\tif ( runLen [ n - NUM00 ] < runLen [ n + NUM00 ] ) n -- ; \n\t\t\tmergeAt ( n ) ; \n\t\t\t} \n\t\telse if ( runLen [ n ] <= runLen [ n + NUM00 ] ) { \n\t\t\tmergeAt ( n ) ; \n\t\t\t} \n\t\telse $F5153 } \n\t} \n"}, {"code": "protected $F104317 loadRMAData ( int C_BPartner_ID ) { \n\t$F104317 list = new $F104317 $F72 ; \n\t$F44 ( sqlStmt ) PreparedStatement pstmt = null ; \n\ttry { \n\t\t$F47577 ( pstmt , DB , sqlStmt ) $F47 ( pstmt , C_BPartner_ID ) $F49 ( rs , pstmt ) while $F1682 ( rs ) { \n\t\t\tlist . add ( new KeyNamePair ( rs . getInt ( NUM00 ) , rs . getString ( NUM00 ) ) ) ; \n\t\t\t} \n\t\t$F59 ( rs ) } \n\tcatch ( SQLException e ) { \n\t\tlog . log ( Level . SEVERE , sqlStmt . toString ( ) , e ) ; \n\t\t} \n\tfinally { \n\t\tif ( pstmt != null ) { \n\t\t\ttry $F881 ( pstmt ) catch ( Exception ex ) { \n\t\t\t\tlog . severe ( NUM00 ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn list ; \n\t} \n"}, {"code": "private void checkSendTrackToGoogle $F72 { \n\tif ( ! sendToGoogle ( activityMyTracks . getString ( R . string . export_google_maps ) ) || ! sendToGoogle ( activityMyTracks . getString ( R . string . export_google_fusion_tables ) ) || ! sendToGoogle ( activityMyTracks . getString ( R . string . export_google_spreadsheets ) ) ) $F932 assertTrue ( GoogleUtils . deleteMaps ( activityMyTracks . getApplicationContext ( ) , GoogleUtils . ACCOUNT_1 , EndToEndTestUtils . trackName ) ) ; \n\tassertTrue ( GoogleUtils . deleteFusionTables ( activityMyTracks . getApplicationContext ( ) , GoogleUtils . ACCOUNT_1 , EndToEndTestUtils . trackName ) ) ; \n\tassertTrue ( GoogleUtils . deleteSpreadsheetsRow ( activityMyTracks . getApplicationContext ( ) , GoogleUtils . ACCOUNT_1 , EndToEndTestUtils . trackName ) ) ; \n\t} \n"}, {"code": "private void checkBoundedTypeParameter ( Method method ) { \n\t$F91854 ( typeParameter , getTypeParameter , method ) $F64976 ( assertEquals , typeParameter ) $F91862 ( assertEquals , method , typeParameter ) $F24901 bounds = typeParameter . getBounds ( ) ; \n\tassertLenghtOne ( bounds ) ; \n\tType bound = bounds [ NUM00 ] ; \n\tassertEquals ( BoundedWildcardsGenericMethods . class , bound ) ; \n\t} \n"}, {"code": "$F29770 ( entity , bytes , mPool , buffer , in , count , VolleyLog ) "}, {"code": "public void onDependencyChanged ( Preference dependency , boolean disableDependent ) { \n\tif ( mDependencyMet == disableDependent ) { \n\t\tmDependencyMet = ! disableDependent ; \n\t\tnotifyDependencyChange ( shouldDisableDependents ( ) ) ; \n\t\tnotifyChanged ( ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public Double analyse $F9830 ( frame ) { \n\tif ( frame . length != getFrameLengthSamples ( ) ) throw new IllegalArgumentException ( NUM00 + getFrameLengthSamples ( ) + NUM00 + frame . length ) ; \n\tdouble totalEnergy = NUM00 ; \n\tfor ( $F1139 ( i , frame ) ) { \n\t\t$F60596 ( totalEnergy , frame , i ) } \n\trememberFrameEnergy ( totalEnergy ) ; \n\treturn new Double ( totalEnergy ) ; \n\t} \n"}, {"code": "public static Element firstChildElement ( Element element ) { \n\t$F1275 ( element ) $F15376 ( node , element ) if ( node != null ) { \n\t\tdo { \n\t\t\tif $F61358 ( node , Node ) { \n\t\t\t\t$F6721 ( childElement , node ) return childElement ; \n\t\t\t\t} \n\t\t\t} \n\t\twhile $F15388 ( node ) ; \n\t\t} \n\t$F1274 } \n"}, {"code": "private static void partialMatch ( DimensionalNode node , $F8748 relevant , $F1986 keys , ArrayList < IMultiPoint > results ) { \n\tIMultiPoint pt = node . point ; \n\tboolean match = _BOOL ; \n\tfor ( $F1139 ( i , relevant ) ) { \n\t\tif ( ! relevant [ i ] ) $F598 if ( ! FloatingPoint . same ( pt . getCoordinate ( i + NUM00 ) , keys [ i ] ) ) $F3468 ( match , _BOOL ) } \n\t$F46023 ( match , results , pt ) int d = node . dimension ; \n\tif ( relevant [ d - NUM00 ] ) { \n\t\tif ( FloatingPoint . lesserEquals ( keys [ d - NUM00 ] , pt . getCoordinate ( d ) ) ) { \n\t\t\tDimensionalNode below = node . getBelow ( ) ; \n\t\t\tif ( below != null ) { \n\t\t\t\tpartialMatch ( below , relevant , keys , results ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( FloatingPoint . greaterEquals ( keys [ d - NUM00 ] , pt . getCoordinate ( d ) ) ) { \n\t\t\tDimensionalNode above = node . getAbove ( ) ; \n\t\t\tif ( above != null ) { \n\t\t\t\tpartialMatch ( above , relevant , keys , results ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse { \n\t\tDimensionalNode below = node . getBelow ( ) ; \n\t\tif ( below != null ) { \n\t\t\tpartialMatch ( below , relevant , keys , results ) ; \n\t\t\t} \n\t\tDimensionalNode above = node . getAbove ( ) ; \n\t\tif ( above != null ) { \n\t\t\tpartialMatch ( above , relevant , keys , results ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public int decryptBlock $F59451 ( in , inOff , out , outOff ) throws $F5278 { \n\t$F59453 ( inOff , blockSize , in ) $F59453 ( outOff , blockSize , out ) $F59455 ( cipher , cfbV , cfbOutV ) $F59464 ( System , cfbV , blockSize ) System . arraycopy ( in , inOff , cfbV , cfbV . length - blockSize , blockSize ) ; \n\t$F59461 ( i , blockSize , out , outOff , cfbOutV , in , inOff ) return blockSize ; \n\t} \n"}, {"code": "public static String encodeForRedirect ( final String str ) { \n\tString classMethod = NUM00 ; \n\t$F96 input ; \n\ttry { \n\t\t$F103791 ( input , str ) } \n\tcatch ( UnsupportedEncodingException uee ) { \n\t\t$F69255 ( debug , classMethod , uee ) $F1274 } \n\tDeflater deflater = new Deflater ( Deflater . DEFAULT_COMPRESSION , _BOOL ) ; \n\t$F1538 ( out ) DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream ( out , deflater ) ; \n\ttry $F4050 ( deflaterOutputStream , input ) catch ( IOException e ) { \n\t\t$F69255 ( debug , classMethod , e ) $F1274 } \n\tfinally { \n\t\tIOUtils . closeIfNotNull ( deflaterOutputStream ) ; \n\t\t} \n\tString encoded = URLEncDec . encode ( Base64 . encode ( out . toByteArray ( ) ) ) ; \n\tif $F6299 ( debug ) { \n\t\tdebug . message ( classMethod + NUM00 + encoded . length ( ) ) ; \n\t\tdebug . message ( classMethod + NUM00 + encoded + NUM00 ) ; \n\t\t} \n\treturn encoded ; \n\t} \n"}, {"code": "private void saveTouchStart ( MotionEvent event ) { \n\tmSavedMatrix . set ( mMatrix ) ; \n\tmTouchStartPoint . set ( $F5048 ( event ) ) ; \n\tmClosestDataSetToTouch = mChart . getDataSetByTouchPoint ( $F5048 ( event ) ) ; \n\t} \n"}, {"code": "public static boolean isNestedMapping ( String regex ) { \n\treturn regex . startsWith ( NESTED_MAPPING_STARTS_SYMBOL ) && regex . endsWith ( NESTED_MAPPING_ENDS_SYMBOL ) ; \n\t} \n"}, {"code": "$F31780 ( value , builder , this ) "}, {"code": "public static boolean nullEquals ( String s1 , String s2 ) $F66007 ( s1 , s2 ) "}, {"code": "public String toString $F72 { \n\treturn $F5528 ( super ) + String . valueOf ( date ) ; \n\t} \n"}, {"code": "private boolean hasImages ( IAction actionToCheck ) { \n\treturn actionToCheck . getImageDescriptor ( ) != null || actionToCheck . getHoverImageDescriptor ( ) != null || actionToCheck . getDisabledImageDescriptor ( ) != null ; \n\t} \n"}, {"code": "public double calcAngleBetweenLines ( Entry start1 , Entry end1 , Entry start2 , Entry end2 ) { \n\tdouble angle1 = calcAngleWithRatios ( start1 , end1 ) ; \n\tdouble angle2 = calcAngleWithRatios ( start2 , end2 ) ; \n\t$F107213 ( Math , angle1 , angle2 ) } \n"}, {"code": "$F69921 ( b , off , len , length , data , enlarge , System , this ) "}, {"code": "public double convertToAttribX ( double scx ) { \n\tdouble temp = m_XaxisEnd - m_XaxisStart ; \n\tdouble temp2 = $F89524 ( scx , m_XaxisStart , m_maxX , m_minX ) / temp ; \n\ttemp2 = temp2 + m_minX ; \n\treturn temp2 ; \n\t} \n"}, {"code": "public void completeExecutorTask $F72 { \n\tExecutorQueueItem item = null ; \n\tsynchronized ( _executorLock ) { \n\t\t_executorTaskCount -- ; \n\t\tassert ( _executorTaskCount >= NUM00 ) ; \n\t\tif ( _executorQueueHead != null ) { \n\t\t\titem = _executorQueueHead ; \n\t\t\t_executorQueueHead = item . _next ; \n\t\t\tif ( _executorQueueHead == null ) _executorQueueTail = null ; \n\t\t\t} \n\t\t} \n\tif ( item != null ) { \n\t\tRunnable task = item . getRunnable ( ) ; \n\t\tClassLoader loader = item . getLoader ( ) ; \n\t\tboolean isPriority = _BOOL ; \n\t\tboolean isQueue = _BOOL ; \n\t\tboolean isWake = _BOOL ; \n\t\tscheduleImpl ( task , loader , MAX_EXPIRE , isPriority , isQueue , isWake ) ; \n\t\t} \n\t} \n"}, {"code": "public static void forceMkdir ( File directory ) throws IOException { \n\tif $F3428 ( directory ) { \n\t\tif $F4926 ( directory ) { \n\t\t\tString message = NUM00 + directory + NUM00 + NUM00 ; \n\t\t\t$F5614 ( message ) } \n\t\t} \n\telse { \n\t\tif $F4928 ( directory ) { \n\t\t\tif $F4926 ( directory ) { \n\t\t\t\tString message = NUM00 + directory ; \n\t\t\t\t$F5614 ( message ) } \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private $F4203 int countClearedRefs ( List < WeakReference $F4203 > refs ) { \n\tfinal Iterator < WeakReference $F4203 > itr = refs . iterator ( ) ; \n\tint n = NUM00 ; \n\twhile $F2921 ( itr ) { \n\t\tfinal WeakReference $F4203 ref = itr . next ( ) ; \n\t\tif $F61923 ( ref ) n ++ ; \n\t\t} \n\treturn n ; \n\t} \n"}, {"code": "protected void readImage $F72 { \n\tix = readShort ( ) ; \n\tiy = readShort ( ) ; \n\tiw = readShort ( ) ; \n\tih = readShort ( ) ; \n\tint packed = read ( ) ; \n\t$F161486 ( lctFlag , packed ) $F161486 ( interlace , packed ) lctSize = NUM00 < < ( packed & NUM00 ) ; \n\tif ( lctFlag ) { \n\t\tlct = readColorTable ( lctSize ) ; \n\t\tact = lct ; \n\t\t} \n\telse { \n\t\tact = gct ; \n\t\tif ( bgIndex == transIndex ) bgColor = NUM00 ; \n\t\t} \n\tint save = NUM00 ; \n\tif ( transparency ) { \n\t\tsave = act [ transIndex ] ; \n\t\tact [ transIndex ] = NUM00 ; \n\t\t} \n\t$F20614 ( act , status , STATUS_FORMAT_ERROR ) $F140642 ( err ) decodeImageData ( ) ; \n\tskip ( ) ; \n\t$F140642 ( err ) frameCount ++ ; \n\timage = new BufferedImage ( width , height , BufferedImage . TYPE_INT_ARGB_PRE ) ; \n\tsetPixels ( ) ; \n\tframes . add ( new GifFrame ( image , delay ) ) ; \n\tif ( transparency ) { \n\t\tact [ transIndex ] = save ; \n\t\t} \n\tresetFrame ( ) ; \n\t} \n"}, {"code": "protected void addProjectedField ( String s ) { \n\ttry { \n\t\t$F111040 ( f , inClazz , s ) TypeInfo t = new TypeInfo ( f . getName ( ) , ClassUtils . primitiveToWrapper ( f . getType ( ) ) ) ; \n\t\tt . getter = PojoUtils . createGetter ( inClazz , t . name , t . type ) ; \n\t\tt . setter = PojoUtils . createSetter ( projectedClazz , t . name , t . type ) ; \n\t\tprojectedFields . add ( t ) ; \n\t\t} \n\tcatch ( NoSuchFieldException e ) { \n\t\tthrow new RuntimeException ( NUM00 + s + NUM00 + inClazz , e ) ; \n\t\t} \n\t} \n"}, {"code": "protected Object evaluateLeftGreaterRight ( List elements , String lvalue , String rvalue ) { \n\tList array ; \n\tif ( elements instanceof $F11420 ) { \n\t\tarray = new $F11420 $F72 ; \n\t\t} \n\telse $F13242 ( array ) for ( $F2774 ( e , elements ) ) { \n\t\t$F8877 ( o , e ) if ( o instanceof StructuredContent ) { \n\t\t\tif ( ( o = evaluateLeftGreaterRight ( ( StructuredContent ) o , lvalue , rvalue ) ) != null ) $F207 ( array , o ) } \n\t\t} \n\tif $F10471 ( array ) { \n\t\treturn ( StructuredContent ) array . get ( NUM00 ) ; \n\t\t} \n\treturn array ; \n\t} \n"}, {"code": "public Optional $F12404 avg $F72 { \n\tif ( isEmpty ( ) ) $F21169 ( Optional ) return Optional . of ( sum ( ) / getEventCount ( ) ) ; \n\t} \n"}, {"code": "public static boolean isSU ( String shell ) { \n\t$F1384 ( pos , shell ) $F384188 ( pos , shell ) $F96095 ( pos , shell ) if ( pos >= NUM00 ) $F31399 ( shell , pos ) $F786 ( shell ) } \n"}, {"code": "private boolean isValid ( int type , String value ) { \n\t$F1933 ( value , _BOOL ) if ( ALLOWED_ <missing ')'> NUM00 <missing ';'> S [ type ] != null ) { \n\t\treturn verifyStringGroup ( value , ALLOWED_ <missing ';'> NUM00 <missing ';'> S [ type ] ) ; \n\t\t} \n\tswitch ( type ) { \n\t\tcase TYPE1BER : return verify ( value , DIGITS , null ) ; \n\t\tcase TYPE_PIXELS_OR_PERCENTAGE : if $F8991 ( value ) $F8994 ( value ) else $F8996 ( value ) return verify ( value , DIGITS , null ) ; \n\t\tcase TYPE_CHAR : return verify ( value , DIGITS | ABC , null , NUM00 , NUM00 ) ; \n\t\tcase TYPE_COLOR : $F25111 ( value , _BOOL ) if $F4435 ( value ) { \n\t\t\treturn verifyStringGroup ( value , COLOR_ <missing ';'> NUM00 <missing ';'> S ) ; \n\t\t\t} \n\t\telse { \n\t\t\treturn verify ( value . substring ( NUM00 ) , HEX , null , NUM00 , NUM00 ) ; \n\t\t\t} \n\t\t$F1267 return _BOOL ; \n\t\t} \n\t} \n"}, {"code": "protected synchronized Class loadClass ( String name , boolean resolve ) throws ClassNotFoundException { \n\tClass c = findLoadedClass ( name ) ; \n\t$F192589 ( c , findClass , name ) if ( c == null ) $F102970 ( name ) if ( resolve ) resolveClass ( c ) ; \n\treturn c ; \n\t} \n"}, {"code": "private int parseStreams ( String json , Set < StreamInfo > streamInfos ) { \n\ttry { \n\t\t$F16165 ( parser ) JSONArray streamsArray ; \n\t\ttry { \n\t\t\t$F16169 ( root , parser , json ) streamsArray = ( JSONArray ) root . get ( NUM00 ) ; \n\t\t\t} \n\t\tcatch ( ClassCastException ex ) { \n\t\t\t$F18143 ( LOGGER ) streamsRequestError ( streamInfos ) ; \n\t\t\t$F150 } \n\t\tif ( streamsArray == null ) { \n\t\t\t$F18143 ( LOGGER ) streamsRequestError ( streamInfos ) ; \n\t\t\t$F150 } \n\t\tfor ( Object obj : streamsArray ) { \n\t\t\tif ( obj instanceof JSONObject ) { \n\t\t\t\tStreamInfo parsedInfo = parseStream ( ( JSONObject ) obj , streamInfos == null ) ; \n\t\t\t\tif ( parsedInfo == null ) { \n\t\t\t\t\tLOGGER . warning ( NUM00 + ( JSONObject ) obj ) ; \n\t\t\t\t\t} \n\t\t\t\t$F4578 ( streamInfos , parsedInfo ) } \n\t\t\telse $F37856 ( LOGGER , obj ) } \n\t\tif ( streamInfos != null ) { \n\t\t\tfor ( StreamInfo info : streamInfos ) { \n\t\t\t\tinfo . setOffline ( ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F1651 ( streamsArray ) } \n\tcatch ( ParseException ex ) { \n\t\tLOGGER . warning ( $F9309 ( ex ) ) ; \n\t\tstreamsRequestError ( streamInfos ) ; \n\t\t$F150 } \n\t} \n"}, {"code": "public StrTokenizer reset ( String input ) { \n\treset ( ) ; \n\tif ( input != null ) { \n\t\tthis . chars = input . toCharArray ( ) ; \n\t\t} \n\telse { \n\t\tthis . chars = null ; \n\t\t} \n\treturn this ; \n\t} \n"}, {"code": "public void runTest $F72 throws Throwable { \n\tDocument doc ; \n\tEntityReference entRef ; \n\tCharacterData entText ; \n\t$F236 ( doc , load , _BOOL ) entRef = doc . createEntityReference ( NUM00 ) ; \n\tassertNotNull ( NUM00 , entRef ) ; \n\t$F241 ( entText , entRef ) assertNotNull ( NUM00 , entText ) ; \n\t{ \n\t\tboolean success = _BOOL ; \n\t\ttry { \n\t\t\tentText . setNodeValue ( NUM00 ) ; \n\t\t\t} \n\t\tcatch ( DOMException ex ) { \n\t\t\tsuccess = ( ex . code == DOMException . NO_MODIFICATION_ALLOWED_ERR ) ; \n\t\t\t} \n\t\tassertTrue ( NUM00 , success ) ; \n\t\t} \n\t} \n"}, {"code": "public void removeListener ( final IVisualCoverageListener listener ) $F106 ( listeners , listener ) "}, {"code": "@ ObjectiveCName ( NUM00 ) public boolean isLargeDialogMessage ( ContentType contentType ) { \n\tswitch ( contentType ) { \n\t\tcase SERVICE : case SERVICE_AVATAR : case SERVICE_AVATAR_REMOVED : case SERVICE_CREATED : case SERVICE_TITLE : case SERVICE_LEAVE : case SERVICE_REGISTERED : case SERVICE_KICK : case SERVICE_ADD : case SERVICE_JOINED : case SERVICE_CALL_ENDED : case SERVICE_CALL_MISSED : case SERVICE_ABOUT : case SERVICE_TOPIC : return _BOOL ; \n\t\t$F1267 return _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public static boolean isLoggingBehaviorEnabled ( LoggingBehavior behavior ) { \n\tsynchronized ( loggingBehaviors ) { \n\t\treturn FacebookSdk . isDebugEnabled ( ) && loggingBehaviors . contains ( behavior ) ; \n\t\t} \n\t} \n"}, {"code": "private void onAttacked ( final Entity attacker ) { \n\tattackers . remove ( attacker ) ; \n\tattackers . add ( attacker ) ; \n\t} \n"}, {"code": "private void handleDisallow ( ParseState state , RobotToken token ) { \n\tif ( state . isSkipAgents ( ) ) $F932 state . setFinishedAgentFields ( _BOOL ) ; \n\tif ( ! state . isAddingRules ( ) ) $F932 $F136712 ( path , token ) try { \n\t\tpath = URLDecoder . decode ( path , NUM00 ) ; \n\t\tif $F1277 ( path ) { \n\t\t\tstate . clearRules ( ) ; \n\t\t\t} \n\t\telse { \n\t\t\tstate . addRule ( path , _BOOL ) ; \n\t\t\t} \n\t\t} \n\tcatch ( Exception e ) { \n\t\treportWarning ( NUM00 + path , state . getUrl ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "public void hideColumn ( Object columnName ) { \n\t$F2329 ( columnName ) for ( $F90183 ( i , columnModel ) ) { \n\t\tTableColumn column = columnModel . getColumn ( i ) ; \n\t\tif ( columnName . equals ( column . getHeaderValue ( ) ) ) $F87181 ( hideColumn , column ) } \n\t} \n"}, {"code": "public static $F4203 $F28904 toSet ( T obj1 , T obj2 , T obj3 , T obj4 , T obj5 , T obj6 ) { \n\t$F78907 ( theSet ) theSet . add ( obj1 ) ; \n\ttheSet . add ( obj2 ) ; \n\ttheSet . add ( obj3 ) ; \n\ttheSet . add ( obj4 ) ; \n\ttheSet . add ( obj5 ) ; \n\ttheSet . add ( obj6 ) ; \n\treturn theSet ; \n\t} \n"}, {"code": "private boolean isASCIIDigit ( char c ) { \n\treturn $F19295 ( c ) ; \n\t} \n"}, {"code": "$F79402 ( path , UNIX_SEPARATOR , WINDOWS_SEPARATOR ) "}, {"code": "public void accumulateAll ( List < TaggedLogAPIEntity > entities ) throws Exception { \n\tfor ( TaggedLogAPIEntity entity : entities ) { \n\t\taccumulate ( entity ) ; \n\t\t} \n\t} \n"}, {"code": "protected void printIdentifier ( String identifier , StringBuilder ddl ) $F9821 ( ddl , getDelimitedIdentifier , identifier ) "}, {"code": "public static int darker ( int c ) { \n\treturn rgba ( Math . max ( NUM00 , ( int ) ( scale * red ( c ) ) ) , Math . max ( NUM00 , ( int ) ( scale * green ( c ) ) ) , Math . max ( NUM00 , ( int ) ( scale * blue ( c ) ) ) , alpha ( c ) ) ; \n\t} \n"}, {"code": "private String toString ( final int size ) { \n\tif ( size < NUM00 ) $F23891 ( String , size ) else if ( size < NUM00 * NUM00 ) { \n\t\treturn String . format ( Locale . ENGLISH , NUM00 , NUM00 * size / NUM00 ) ; \n\t\t} \n\telse { \n\t\treturn String . format ( Locale . ENGLISH , NUM00 , NUM00 * size / NUM00 / NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "$F61852 public void test_getColumnsArbitrary $F72 throws SQLException { \n\tResultSet setAllNull = null ; \n\tResultSet setMixed = null ; \n\tResultSet allArbitrary = null ; \n\t$F806 tablesName = { \n\t\tDatabaseCreator . TEST_TABLE1 , DatabaseCreator . TEST_TABLE3 } \n\t; \n\tArrays . sort ( tablesName ) ; \n\tint setSize = NUM00 ; \n\ttry { \n\t\tallArbitrary = meta . getColumns ( $F61861 ) ; \n\t\tassertNotNull ( allArbitrary ) ; \n\t\tcheckColumnsShape ( allArbitrary ) ; \n\t\tsetSize = crossCheckGetColumnsAndResultSetMetaData ( allArbitrary , _BOOL ) ; \n\t\tassertEquals ( NUM00 , setSize ) ; \n\t\tsetMixed = meta . getColumns ( null , null , NUM00 , NUM00 ) ; \n\t\tassertNotNull ( setMixed ) ; \n\t\tcheckColumnsShape ( setMixed ) ; \n\t\tsetSize = crossCheckGetColumnsAndResultSetMetaData ( setMixed , _BOOL ) ; \n\t\tassertEquals ( NUM00 , setSize ) ; \n\t\t} \n\t$F32310 ( fail , e ) $F59 ( conn ) try { \n\t\tmeta . getColumns ( null , null , DatabaseCreator . TEST_TABLE1 , NUM00 ) ; \n\t\tfail ( NUM00 ) ; \n\t\t} \n\t$F31184 } \n"}, {"code": "static public SdfMacro decodeInstruction ( SdfBuffer buff ) { \n\tSdfMacro m ; \n\tif ( ( m = ChannelStart . match ( buff ) ) != null ) { \n\t\treturn m ; \n\t\t} \n\telse if ( ( m = SdlVersion . match ( buff ) ) != null ) { \n\t\treturn m ; \n\t\t} \n\telse if ( ( m = SkemeStart . match ( buff ) ) != null ) { \n\t\treturn m ; \n\t\t} \n\telse if ( ( m = GenerateTrigger . match ( buff ) ) != null ) { \n\t\treturn m ; \n\t\t} \n\telse if ( ( m = EndSound . match ( buff ) ) != null ) { \n\t\treturn m ; \n\t\t} \n\telse if ( ( m = DelaySound . match ( buff ) ) != null ) { \n\t\treturn m ; \n\t\t} \n\telse if ( ( m = SkipOnTrigger . match ( buff ) ) != null ) { \n\t\treturn m ; \n\t\t} \n\telse if ( ( m = InitiateSound . match ( buff ) ) != null ) { \n\t\treturn m ; \n\t\t} \n\telse if ( ( m = MaskCompare . match ( buff ) ) != null ) { \n\t\treturn m ; \n\t\t} \n\telse if ( ( m = LoadModifier . match ( buff ) ) != null ) { \n\t\treturn m ; \n\t\t} \n\telse if ( ( m = BranchTo . match ( buff ) ) != null ) { \n\t\treturn m ; \n\t\t} \n\telse if ( ( m = Play . match ( buff ) ) != null ) { \n\t\treturn m ; \n\t\t} \n\telse if ( ( m = FourByteMacro . match ( buff ) ) != null ) { \n\t\treturn m ; \n\t\t} \n\telse if ( ( m = TwoByteMacro . match ( buff ) ) != null ) { \n\t\treturn m ; \n\t\t} \n\t$F10910 ( log ) $F1274 } \n"}, {"code": "public SIPDate ( long timeMillis ) { \n\tjavaCal = new GregorianCalendar ( TimeZone . getTimeZone ( NUM00 ) , Locale . getDefault ( ) ) ; \n\t$F22273 date = new $F22273 ( timeMillis ) ; \n\tjavaCal . setTime ( date ) ; \n\twkday = javaCal . get ( Calendar . DAY_OF_WEEK ) ; \n\tswitch ( wkday ) { \n\t\tcase Calendar . MONDAY : sipWkDay = MON ; \n\t\t$F597 case Calendar . TUESDAY : sipWkDay = TUE ; \n\t\t$F597 case Calendar . WEDNESDAY : sipWkDay = WED ; \n\t\t$F597 case Calendar . THURSDAY : sipWkDay = THU ; \n\t\t$F597 case Calendar . FRIDAY : sipWkDay = FRI ; \n\t\t$F597 case Calendar . SATURDAY : sipWkDay = SAT ; \n\t\t$F597 case Calendar . SUNDAY : sipWkDay = SUN ; \n\t\t$F597 $F1267 InternalErrorHandler . handleException ( NUM00 + wkday ) ; \n\t\t} \n\t$F232861 ( day , javaCal , Calendar ) $F36853 ( month , javaCal , Calendar ) switch ( month ) { \n\t\tcase Calendar . JANUARY : sipMonth = JAN ; \n\t\t$F597 case Calendar . FEBRUARY : sipMonth = FEB ; \n\t\t$F597 case Calendar . MARCH : sipMonth = MAR ; \n\t\t$F597 case Calendar . APRIL : sipMonth = APR ; \n\t\t$F597 case Calendar . MAY : sipMonth = MAY ; \n\t\t$F597 case Calendar . JUNE : sipMonth = JUN ; \n\t\t$F597 case Calendar . JULY : sipMonth = JUL ; \n\t\t$F597 case Calendar . AUGUST : sipMonth = AUG ; \n\t\t$F597 case Calendar . SEPTEMBER : sipMonth = SEP ; \n\t\t$F597 case Calendar . OCTOBER : sipMonth = OCT ; \n\t\t$F597 case Calendar . NOVEMBER : sipMonth = NOV ; \n\t\t$F597 case Calendar . DECEMBER : sipMonth = DEC ; \n\t\t$F597 $F1267 InternalErrorHandler . handleException ( NUM00 + month ) ; \n\t\t} \n\t$F36851 ( year , javaCal , Calendar ) $F36857 ( hour , javaCal , Calendar ) $F36859 ( minute , javaCal , Calendar ) $F36861 ( second , javaCal , Calendar ) } \n"}, {"code": "public static TypeMirror upperBound ( TypeMirror type ) { \n\tdo { \n\t\tif ( type instanceof TypeVariable ) { \n\t\t\tTypeVariable tvar = ( TypeVariable ) type ; \n\t\t\tif ( tvar . getUpperBound ( ) != null ) { \n\t\t\t\ttype = tvar . getUpperBound ( ) ; \n\t\t\t\t} \n\t\t\telse $F5153 } \n\t\telse if ( type instanceof WildcardType ) { \n\t\t\tWildcardType wc = ( WildcardType ) type ; \n\t\t\tif ( wc . getExtendsBound ( ) != null ) { \n\t\t\t\ttype = wc . getExtendsBound ( ) ; \n\t\t\t\t} \n\t\t\telse $F5153 } \n\t\telse $F5153 } \n\twhile ( _BOOL ) ; \n\treturn type ; \n\t} \n"}, {"code": "public synchronized Object remove ( Object key ) { \n\tremoveBlanks ( ) ; \n\tWeakKeyReference keyRef = new WeakKeyReference ( key ) ; \n\tWeakReference ref = ( WeakReference ) table . remove ( keyRef ) ; \n\t$F1275 ( ref ) $F1521 ( ref ) } \n"}, {"code": "public boolean removeElement ( Node s ) { \n\t$F132452 ( m_mutable , XSLMessages , XPATHErrorResources ) $F161848 ( m_map , _BOOL ) for ( $F119 ( i , m_firstFree ) ) { \n\t\tNode node = m_map [ i ] ; \n\t\tif ( ( null != node ) && node . equals ( s ) ) { \n\t\t\tif ( i < m_firstFree - NUM00 ) $F15773 ( System , m_map , i , m_firstFree ) m_firstFree -- ; \n\t\t\tm_map [ m_firstFree ] = null ; \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "$F1 public InetAddress addressLocal $F72 { \n\tSocket s = getSocket ( ) ; \n\tif ( s != null ) { \n\t\treturn s . getLocalAddress ( ) ; \n\t\t} \n\telse $F1337 } \n"}, {"code": "public boolean startConnection $F72 { \n\tState state = _state . get ( ) ; \n\tif $F80957 ( state ) { \n\t\t$F5224 ( _connectionCount ) return _BOOL ; \n\t\t} \n\t$F80733 ( now , CurrentTime ) long lastFailTime = _lastFailTime ; \n\t$F106670 ( recoverTimeout , _dynamicRecoverTimeout ) if ( now < lastFailTime + recoverTimeout ) { \n\t\treturn _BOOL ; \n\t\t} \n\tint count ; \n\tdo { \n\t\t$F16478 ( count , _connectionCount ) $F53954 ( count , _BOOL ) } \n\twhile ( ! $F26080 ( _connectionCount , count ) ) ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "public AbstractNaryOperator ( final Expr ... args ) $F81861 ( this , Arrays , args ) "}, {"code": "static boolean isRegistered ( ObjectName objectName ) { \n\treturn mbeanServer != null && mbeanServer . isRegistered ( objectName ) ; \n\t} \n"}, {"code": "public static int findBestSampleSize $F2026 ( actualWidth , actualHeight , desiredWidth , desiredHeight ) { \n\t$F67468 ( wr , actualWidth , desiredWidth ) $F67468 ( hr , actualHeight , desiredHeight ) $F59772 ( ratio , Math , wr , hr ) float n = NUM00 ; \n\twhile ( ( n * NUM00 ) <= ratio ) { \n\t\tn *= NUM00 ; \n\t\t} \n\t$F23219 ( n ) } \n"}, {"code": "public SocketReader ( final Socket socket ) throws IOException { \n\t$F1832 ( Preconditions , socket ) $F64193 ( m_InputStream , socket ) ; \n\t} \n"}, {"code": "private boolean moveToFinalScrollerPosition ( Scroller scroller ) { \n\tscroller . forceFinished ( _BOOL ) ; \n\tif ( isHorizontalMode ( ) ) { \n\t\tint amountToScroll = scroller . getFinalX ( ) - scroller . getCurrX ( ) ; \n\t\tint futureScrollOffset = ( mCurrentScrollOffset + amountToScroll ) % mSelectorElementSize ; \n\t\tint overshootAdjustment = mInitialScrollOffset - futureScrollOffset ; \n\t\tif ( overshootAdjustment != NUM00 ) { \n\t\t\tif $F41056 ( Math , overshootAdjustment , mSelectorElementSize ) { \n\t\t\t\tif ( overshootAdjustment > NUM00 ) { \n\t\t\t\t\tovershootAdjustment -= mSelectorElementSize ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tovershootAdjustment += mSelectorElementSize ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tamountToScroll += overshootAdjustment ; \n\t\t\tscrollBy ( amountToScroll , NUM00 ) ; \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tint amountToScroll = scroller . getFinalY ( ) - scroller . getCurrY ( ) ; \n\t\tint futureScrollOffset = ( mCurrentScrollOffset + amountToScroll ) % mSelectorElementSize ; \n\t\tint overshootAdjustment = mInitialScrollOffset - futureScrollOffset ; \n\t\tif ( overshootAdjustment != NUM00 ) { \n\t\t\tif $F41056 ( Math , overshootAdjustment , mSelectorElementSize ) { \n\t\t\t\tif ( overshootAdjustment > NUM00 ) { \n\t\t\t\t\tovershootAdjustment -= mSelectorElementSize ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tovershootAdjustment += mSelectorElementSize ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tamountToScroll += overshootAdjustment ; \n\t\t\tscrollBy ( NUM00 , amountToScroll ) ; \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void addLonLine $F7635 ( minLat , maxLat , lon ) { \n\tString name = NUM00 + nextShape ; \n\tnextShape ++ ; \n\t$F286 ( b , name ) double lat ; \n\tint steps = getStepCount ( minLat , lon , maxLat , lon ) ; \n\tfor ( lat = minLat ; \n\tlat <= maxLat ; \n\tlat += ( maxLat - minLat ) / steps ) $F57713 ( b , lat , lon ) $F45293 ( b , maxLat , lon ) lat -= ( maxLat - minLat ) / NUM00 ; \n\tfor ( ; \n\tlat >= minLat ; \n\tlat -= ( maxLat - minLat ) / steps ) $F57713 ( b , lat , lon ) $F84 ( b ) $F286 ( b , name ) } \n"}, {"code": "$F1 public double calculate_K ( $F2027 x_index , $F1986 x_att , $F2027 y_index , $F1986 y_att ) { \n\tdouble result = NUM00 ; \n\tdouble tmp ; \n\t$F40997 ( xpos , x_index ) $F40997 ( ypos , y_index ) int zeros = dim ; \n\twhile ( ( xpos >= NUM00 ) && ( ypos >= NUM00 ) ) { \n\t\tif ( x_index [ xpos ] == y_index [ ypos ] ) { \n\t\t\ttmp = x_att [ xpos ] - y_att [ ypos ] ; \n\t\t\tresult += Math . exp ( - sigma * tmp * tmp ) ; \n\t\t\txpos -- ; \n\t\t\typos -- ; \n\t\t\t} \n\t\telse if ( x_index [ xpos ] > y_index [ ypos ] ) { \n\t\t\ttmp = x_att [ xpos ] ; \n\t\t\tresult += Math . exp ( - sigma * tmp * tmp ) ; \n\t\t\txpos -- ; \n\t\t\t} \n\t\telse { \n\t\t\ttmp = y_att [ ypos ] ; \n\t\t\tresult += Math . exp ( - sigma * tmp * tmp ) ; \n\t\t\typos -- ; \n\t\t\t} \n\t\tzeros -- ; \n\t\t} \n\twhile ( xpos >= NUM00 ) { \n\t\ttmp = x_att [ xpos ] ; \n\t\tresult += Math . exp ( - sigma * tmp * tmp ) ; \n\t\txpos -- ; \n\t\tzeros -- ; \n\t\t} \n\twhile ( ypos >= NUM00 ) { \n\t\ttmp = y_att [ ypos ] ; \n\t\tresult += Math . exp ( - sigma * tmp * tmp ) ; \n\t\typos -- ; \n\t\tzeros -- ; \n\t\t} \n\tresult += zeros ; \n\t$F133936 ( Math , result , degree ) } \n"}, {"code": "private float sweep $F9302 ( tan1X , tan1Y , tan2X , tan2Y ) { \n\tfinal float minorSweep = ( float ) Math . toDegrees ( NUM00 * ( Math . asin ( NUM00 * Geometry . distance ( tan1X , tan1Y , tan2X , tan2Y ) / mScaledTouchSlop ) ) ) ; \n\treturn NUM00 - minorSweep ; \n\t} \n"}, {"code": "SunCertPathBuilderResult ( CertPath certPath , TrustAnchor trustAnchor , PolicyNode policyTree , PublicKey subjectPublicKey , AdjacencyList adjList ) { \n\tsuper ( certPath , trustAnchor , policyTree , subjectPublicKey ) ; \n\tthis . adjList = adjList ; \n\t} \n"}, {"code": "public static void attach ( final JFrame parent , final IDebugger debugger , final CDebugEventNotifier notifier ) { \n\ttry { \n\t\t$F2346 ( notifier ) $F2410 ( debugger ) } \n\tcatch ( final DebugExceptionWrapper exception ) { \n\t\t$F5191 ( notifier ) CUtilityFunctions . logException ( exception ) ; \n\t\t$F21899 ( innerMessage ) final String innerDescription = CUtilityFunctions . createDescription ( NUM00 , $F21904 , new String [ ] { \n\t\t\tNUM00 + NUM00 } \n\t\t) ; \n\t\tNaviErrorDialog . show ( parent , innerMessage , innerDescription , exception ) ; \n\t\t} \n\t} \n"}, {"code": "public boolean checkAddrPattern ( final String theAddrPattern ) { \n\treturn $F19068 ( theAddrPattern , addrPattern ) ; \n\t} \n"}, {"code": "@ MediumTest public void testStabilityInSpace $F72 { \n\t$F657 ( t , System ) VelocityTracker vt = VelocityTracker . obtain ( ) ; \n\tdrag ( vt , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , t , NUM00 ) ; \n\t$F163812 ( vt ) float firstX = vt . getXVelocity ( ) ; \n\tfloat firstY = vt . getYVelocity ( ) ; \n\t$F725 ( vt ) drag ( vt , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , t , NUM00 ) ; \n\t$F163812 ( vt ) float secondX = vt . getXVelocity ( ) ; \n\tfloat secondY = vt . getYVelocity ( ) ; \n\tassertEqualFuzzy ( firstX , secondX , NUM00 ) ; \n\tassertEqualFuzzy ( firstY , secondY , NUM00 ) ; \n\t$F17551 ( vt ) } \n"}, {"code": "private View fillFromTop ( int nextTop ) { \n\tif ( DEBUG ) Log . i ( TAG , NUM00 + nextTop + M_FIRST_POSITION + mFirstPosition ) ; \n\t$F16700 ( mFirstPosition , Math , mSelectedPosition ) $F72086 ( mFirstPosition , Math , mItemCount ) $F17370 ( mFirstPosition ) mFirstPosition -= mFirstPosition % mNumColumns ; \n\treturn fillDown ( mFirstPosition , nextTop ) ; \n\t} \n"}, {"code": "public static String SITInfo ( EnumMap < SIT , EnumMap < CIT , Boolean > > shp ) { \n\t$F83 ( result ) for ( SIT key : shp . keySet ( ) ) { \n\t\tresult . append ( $F369 ( key ) + CITInfo ( shp . get ( key ) ) + NUM00 ) ; \n\t\t} \n\t$F92 ( result ) } \n"}, {"code": "public static $F529 updateBinaryFile $F71242 ( dctx , context ) { \n\t$F67631 ( result ) try { \n\t\tresult = updateBinaryFileMethod ( dctx , context ) ; \n\t\t} \n\tcatch ( GenericServiceException e ) $F34760 ( ServiceUtil , e ) return result ; \n\t} \n"}, {"code": "public $F3510 write ( List < InternalLog > logs ) throws IOException { \n\tfinal List < Put > puts = new ArrayList < Put > $F716 ( logs ) ; \n\tfinal $F3510 result = new $F3511 $F716 ( logs ) ; \n\tfor ( InternalLog log : logs ) { \n\t\tfinal $F96 rowkey = RowkeyBuilder . buildRowkey ( log ) ; \n\t\tfinal Put p = new Put ( rowkey ) ; \n\t\tpopulateColumnValues ( p , log ) ; \n\t\tputs . add ( p ) ; \n\t\tfinal $F3510 indexRowkeys = log . getIndexRowkeys ( ) ; \n\t\t$F189158 ( indexRowkeys , writeIndexes , rowkey , puts ) result . add ( rowkey ) ; \n\t\t} \n\ttbl . put ( puts ) ; \n\treturn result ; \n\t} \n"}, {"code": "public int read $F139836 ( fileOffset , buffer , offset , length ) throws IOException { \n\tlog . info ( $F36004 ( Long , fileOffset ) + length + NUM00 ) ; \n\treturn _file . read ( fileOffset , buffer , offset , length ) ; \n\t} \n"}, {"code": "public boolean validateCurrentStep ( int currentStep , int newStep ) { \n\treturn _BOOL ; \n\t} \n"}, {"code": "$F4170 protected static $F147826 mustBeTrue ( boolean input , $F4170 ValidationContext validationContext ) { \n\treturn input ? Collections . < RaveError > $F9639 : createNewList ( new RaveError ( validationContext , RaveErrorStrings . MUST_BE_TRUE_ERROR ) ) ; \n\t} \n"}, {"code": "$F121106 ( putLock , this , notFull ) "}, {"code": "@ LogMessageDoc ( $F85045 , $F100217 , $F85047 , recommendation = LogMessageDoc . REPORT_CONTROLLER_BUG ) public void queueHint ( String storeName , ByteArray key , $F100220 value ) { \n\ttry { \n\t\tHintKey hk = new HintKey ( storeName , key ) ; \n\t\t$F8934 ( hintLock ) try { \n\t\t\tboolean needed = ! hints . containsKey ( hk ) ; \n\t\t\tneeded &= hints . doput ( hk , value ) ; \n\t\t\tif ( needed ) { \n\t\t\t\thintQueue . add ( hk ) ; \n\t\t\t\t$F702 ( hintsAvailable ) } \n\t\t\t} \n\t\t$F796 ( hintLock ) } \n\tcatch ( SyncException e ) $F30203 ( logger , storeName , e ) } \n"}, {"code": "public static DBIDVar randomSample ( DBIDs ids , RandomFactory random ) { \n\treturn randomSample ( ids , random . getSingleThreadedRandom ( ) ) ; \n\t} \n"}, {"code": "public void testAddListener $F72 { \n\tSimpleListener listener1 = createMockSimpleListener ( NUM00 ) ; \n\tSimpleListener listener2 = createMockSimpleListener ( NUM00 ) ; \n\tassertEquals ( NUM00 , adaptor . getNumListeners ( ) ) ; \n\tadaptor . addListener ( listener1 ) ; \n\tassertEquals ( NUM00 , adaptor . getNumListeners ( ) ) ; \n\tadaptor . addListener ( listener2 ) ; \n\tassertEquals ( NUM00 , adaptor . getNumListeners ( ) ) ; \n\tadaptor . addListener ( listener1 ) ; \n\tassertEquals ( NUM00 , adaptor . getNumListeners ( ) ) ; \n\tList < SimpleListener > listeners = Lists . asList ( adaptor . getListeners ( ) ) ; \n\t$F70108 ( assertEquals , listeners ) $F195871 ( assertTrue , listeners , listener1 ) $F195871 ( assertTrue , listeners , listener2 ) EasyMock . verify ( listener1 , listener2 ) ; \n\t} \n"}, {"code": "public void onResponse ( DiscoveryNode node ) { \n\t$F12396 ( found , pendingNodes , node ) assert found : NUM00 + node + NUM00 ; \n\t$F38783 ( latch ) } \n"}, {"code": "$F1 public synchronized boolean add ( E object ) { \n\tif ( elementCount == elementData . length ) $F5795 ( growByOne ) elementData [ elementCount ++ ] = object ; \n\tmodCount ++ ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "private static long copy ( InputStream from , OutputStream to ) throws IOException { \n\t$F96 buf = new byte [ Settings . BUFFER_SIZE ] ; \n\tlong total = NUM00 ; \n\twhile ( _BOOL ) { \n\t\t$F83249 ( r , from , buf ) $F76065 ( r ) $F11584 ( to , buf , r ) total += r ; \n\t\t} \n\treturn total ; \n\t} \n"}, {"code": "$F69921 ( b , off , len , length , data , enlarge , System , this ) "}, {"code": "public void addValue ( String value ) { \n\t$F113304 ( _stringValues , setupStringValues ) $F2201 ( _stringValues , value ) } \n"}, {"code": "public void writeRawLittleEndian32 ( final int value ) throws IOException { \n\tif $F8338 ( buffer ) { \n\t\tthrow new OutOfSpaceException ( buffer . position ( ) , buffer . limit ( ) ) ; \n\t\t} \n\tbuffer . putInt ( value ) ; \n\t} \n"}, {"code": "private static $F52326 pathToURLs ( String path ) throws MalformedURLException { \n\t$F1338 ( path ) synchronized ( pathToURLsCache ) { \n\t\t$F131 v = ( $F131 ) pathToURLsCache . get ( path ) ; \n\t\tif ( v != null ) { \n\t\t\treturn ( ( $F52326 ) v [ NUM00 ] ) ; \n\t\t\t} \n\t\t} \n\t$F70316 ( st , path ) $F52326 urls = new URL $F49889 ( st ) ; \n\tfor ( int i = NUM00 ; \n\tst . hasMoreTokens ( ) ; \n\ti ++ ) { \n\t\turls [ i ] = new URL $F52332 ( st ) ; \n\t\t} \n\tsynchronized ( pathToURLsCache ) { \n\t\tpathToURLsCache . put ( path , new Object [ ] { \n\t\t\turls , new SoftReference ( path ) } \n\t\t) ; \n\t\t} \n\treturn urls ; \n\t} \n"}, {"code": "public static int hash4 ( int hash , Object x , Object y , Object z , Object w ) { \n\treturn NUM00 | ( hash + NUM00 * System . identityHashCode ( x ) + NUM00 * System . identityHashCode ( y ) + NUM00 * System . identityHashCode ( z ) + NUM00 * System . identityHashCode ( w ) ) ; \n\t} \n"}, {"code": "public long skip ( long n ) throws IOException { \n\t$F6853 ( n ) ensureOpen ( ) ; \n\tint max = ( int ) Math . min ( n , Integer . MAX_VALUE ) ; \n\tint total = NUM00 ; \n\twhile ( total < max ) { \n\t\tint len = max - total ; \n\t\tif ( len > b . length ) $F9454 ( len , b ) len = read ( b , NUM00 , len ) ; \n\t\tif ( len == - NUM00 ) $F3468 ( reachEOF , _BOOL ) total += len ; \n\t\t} \n\treturn total ; \n\t} \n"}, {"code": "private V doPut ( K kkey , V value , boolean onlyIfAbsent ) { \n\t$F45430 ( key , comparable , kkey ) for ( $F589 ) { \n\t\t$F45432 ( b , findPredecessor , key ) $F35175 ( n , b ) for ( $F589 ) { \n\t\t\tif ( n != null ) { \n\t\t\t\t$F35175 ( f , n ) $F45438 ( n , b ) Object v = n . value ; \n\t\t\t\t$F45440 ( v , n , b , f ) $F45442 ( v , n , b ) $F45446 ( c , key , n ) $F94836 ( c , b , n , f ) if ( c == NUM00 ) { \n\t\t\t\t\tif ( onlyIfAbsent || n . casValue ( v , value ) ) $F94847 ( v ) else $F597 } \n\t\t\t\t} \n\t\t\t$F9341 z = new $F9341 ( kkey , value , n ) ; \n\t\t\t$F397125 ( b , n , z ) int level = randomLevel ( ) ; \n\t\t\tif ( level > NUM00 ) insertIndex ( z , level ) ; \n\t\t\t$F1274 } \n\t\t} \n\t} \n"}, {"code": "public void addFillOutsideLine ( FillOutsideLine fill ) $F207 ( mFillBelowLine , fill ) "}, {"code": "public void add ( final PositionChangeListener listener ) $F207 ( listeners , listener ) "}, {"code": "public void choose ( boolean enable , String what ) ; \n"}, {"code": "public void testDuplicateEntries $F72 throws Exception { \n\tString name1 = NUM00 ; \n\tString name2 = NUM00 ; \n\t$F1538 ( baos ) $F65023 ( out , baos ) out . putNextEntry ( new ZipEntry ( name2 ) ) ; \n\t$F22108 ( out ) out . putNextEntry ( new ZipEntry ( name1 ) ) ; \n\t$F22108 ( out ) $F59 ( out ) $F1208 ( buffer , baos ) replaceBytes ( buffer , name2 . getBytes ( ) , name1 . getBytes ( ) ) ; \n\tFile badZip = createTemporaryZipFile ( ) ; \n\twriteBytes ( badZip , buffer ) ; \n\ttry { \n\t\t$F170751 ( bad , badZip ) fail ( ) ; \n\t\t} \n\tcatch ( ZipException expected ) $F845 } \n"}, {"code": "private void rehash $F72 { \n\tint size = _symbols . length ; \n\tint newSize = size + size ; \n\tif ( newSize > MAX_TABLE_SIZE ) { \n\t\t_size = NUM00 ; \n\t\t$F17838 ( Arrays , _symbols ) $F17838 ( Arrays , _buckets ) _dirty = _BOOL ; \n\t\t$F665 } \n\t$F806 oldSyms = _symbols ; \n\tBucket [ ] oldBuckets = _buckets ; \n\t$F58180 ( _symbols , newSize ) _buckets = new Bucket [ newSize > > NUM00 ] ; \n\t_indexMask = newSize - NUM00 ; \n\t_sizeThreshold = _thresholdSize ( newSize ) ; \n\tint count = NUM00 ; \n\tint maxColl = NUM00 ; \n\tfor ( $F1316 ( i , size ) ) { \n\t\tString symbol = oldSyms [ i ] ; \n\t\tif ( symbol != null ) { \n\t\t\t++ count ; \n\t\t\tint index = _hashToIndex ( calcHash ( symbol ) ) ; \n\t\t\tif ( _symbols [ index ] == null ) { \n\t\t\t\t_symbols [ index ] = symbol ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tint bix = ( index > > NUM00 ) ; \n\t\t\t\tBucket newB = new Bucket ( symbol , _buckets [ bix ] ) ; \n\t\t\t\t_buckets [ bix ] = newB ; \n\t\t\t\tmaxColl = Math . max ( maxColl , newB . length ( ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tsize >>= NUM00 ; \n\tfor ( $F1316 ( i , size ) ) { \n\t\tBucket b = oldBuckets [ i ] ; \n\t\twhile ( b != null ) { \n\t\t\t++ count ; \n\t\t\tString symbol = b . getSymbol ( ) ; \n\t\t\tint index = _hashToIndex ( calcHash ( symbol ) ) ; \n\t\t\tif ( _symbols [ index ] == null ) { \n\t\t\t\t_symbols [ index ] = symbol ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tint bix = ( index > > NUM00 ) ; \n\t\t\t\tBucket newB = new Bucket ( symbol , _buckets [ bix ] ) ; \n\t\t\t\t_buckets [ bix ] = newB ; \n\t\t\t\tmaxColl = Math . max ( maxColl , newB . length ( ) ) ; \n\t\t\t\t} \n\t\t\t$F224746 ( b ) } \n\t\t} \n\t_longestCollisionList = maxColl ; \n\tif ( count != _size ) { \n\t\tthrow new Error $F6486 ( _size , count ) ; \n\t\t} \n\t} \n"}, {"code": "private void checkSize ( final int i ) { \n\tif ( i >= max_size ) { \n\t\tfinal int old_size = max_size ; \n\t\tmax_size += increment_size ; \n\t\tif ( max_size <= i ) { \n\t\t\tmax_size = i + increment_size + NUM00 ; \n\t\t\t} \n\t\t$F92861 ( temp , items ) $F3936 ( items , max_size ) $F135 ( System , temp , items , old_size ) increment_size = incrementSize ( increment_size ) ; \n\t\t} \n\t} \n"}, {"code": "public ComponentPrintService ( Component c , PageFormat format ) { \n\tsetPageFormat ( format ) ; \n\tsetPrintable ( this ) ; \n\tsetComponent ( c ) ; \n\tRectangle componentBounds = c . getBounds ( null ) ; \n\tsetSize ( $F44316 ( componentBounds ) ) ; \n\tsetScale ( NUM00 , NUM00 ) ; \n\t} \n"}, {"code": "$F1 public void reconcileFlow ( OFMatchReconcile ofmRcIn , EventPriority priority ) { \n\t$F8249 ( ofmRcIn ) OFMatchReconcile myOfmRc = new OFMatchReconcile ( ofmRcIn ) ; \n\tflowQueue . offer ( myOfmRc , priority ) ; \n\t$F72375 ( ctrFlowReconcileRequest ) $F6357 ( currTime ) long delay = NUM00 ; \n\tif ( currTime . after ( new Date ( lastReconcileTime . getTime ( ) + NUM00 ) ) ) { \n\t\tdelay = NUM00 ; \n\t\t} \n\telse { \n\t\tdelay = FLOW_RECONCILE_DELAY_MILLISEC ; \n\t\t} \n\tflowReconcileTask . reschedule ( delay , TimeUnit . MILLISECONDS ) ; \n\tif $F8415 ( logger ) { \n\t\tlogger . trace ( NUM00 , myOfmRc . toString ( ) , flowQueue . size ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F65632 createInputDialog ( final Window owner , final String title , final String label ) { \n\tfinal TextInputDialog dialog = new TextInputDialog $F72 ; \n\tdialog . setTitle ( title ) ; \n\tdialog . setHeaderText ( null ) ; \n\tdialog . setContentText ( label ) ; \n\tdialog . initOwner ( owner ) ; \n\treturn dialog . showAndWait ( ) ; \n\t} \n"}, {"code": "public void flush $F72 throws IOException { \n\t$F165012 ( writer ) $F1206 ( outstr ) } \n"}, {"code": "$F1431 protected synchronized V removeInternal ( Object key , boolean countRemove ) { \n\tif ( key == null ) { \n\t\tif $F2907 ( Debug ) Debug . logVerbose ( NUM00 + this . name , module ) ; \n\t\t} \n\tObject nulledKey = fromKey ( key ) ; \n\tCacheLine $F2193 oldCacheLine ; \n\tV oldValue ; \n\tif ( fileTable != null ) { \n\t\ttry { \n\t\t\tsynchronized ( this ) { \n\t\t\t\ttry $F6045 ( oldValue , fileTable , nulledKey ) catch ( IOException e ) { \n\t\t\t\t\toldValue = null ; \n\t\t\t\t\tthrow e ; \n\t\t\t\t\t} \n\t\t\t\tfileTable . remove ( nulledKey ) ; \n\t\t\t\t$F17621 ( jdbmMgr ) } \n\t\t\t} \n\t\tcatch ( IOException e ) { \n\t\t\toldValue = null ; \n\t\t\tDebug . logError ( e , module ) ; \n\t\t\t} \n\t\toldCacheLine = memoryTable . remove ( nulledKey ) ; \n\t\t} \n\telse { \n\t\toldCacheLine = memoryTable . remove ( nulledKey ) ; \n\t\toldValue = oldCacheLine != null ? oldCacheLine . getValue ( ) : null ; \n\t\t} \n\t$F25302 ( oldCacheLine , cancel ) if ( oldValue != null ) { \n\t\tnoteRemoval ( ( K ) key , oldValue ) ; \n\t\tif ( countRemove ) $F5224 ( removeHitCount ) return oldValue ; \n\t\t} \n\telse { \n\t\tif ( countRemove ) $F5224 ( removeMissCount ) $F1274 } \n\t} \n"}, {"code": "public void remove ( double value ) { \n\tif $F35707 ( Double , value ) $F932 int index = findInsertIndex ( value ) ; \n\tif ( index == - NUM00 ) $F4639 $F47318 ( valueAtIndex , values , index ) if ( ( valueAtIndex != null ) && $F2137 ( valueAtIndex , value ) ) $F4639 values . remove ( index ) ; \n\t} \n"}, {"code": "public void childrenRemoved ( BeanContextMembershipEvent bcme ) { \n\t$F33242 ( it , bcme ) $F7685 ( it , findAndUndo ) } \n"}, {"code": "void lightweightPaint ( Graphics g ) { \n\tsuper . lightweightPaint ( g ) ; \n\tpaintHeavyweightComponents ( g ) ; \n\t} \n"}, {"code": "public JSONArray names $F72 { \n\t$F19928 ( ja ) Iterator keys = keys ( ) ; \n\twhile $F2921 ( keys ) { \n\t\tja . put ( keys . next ( ) ) ; \n\t\t} \n\treturn $F1276 ( ja ) ? null : ja ; \n\t} \n"}, {"code": "private final void removeChannel ( String channel ) { \n\t$F37156 ( channel ) $F23074 ( _channels , channel ) } \n"}, {"code": "public void addChangeListener ( ChangeListener cl ) $F24128 ( listeners , cl ) "}, {"code": "public static void expandNumber ( String numberString , WordRelation wordRelation , Item tokenItem ) { \n\t$F1749 ( numDigits , numberString ) if ( numDigits == NUM00 ) $F845 else if ( numDigits == NUM00 ) { \n\t\texpandDigits ( numberString , wordRelation , tokenItem ) ; \n\t\t} \n\telse if ( numDigits == NUM00 ) { \n\t\texpand2DigitNumber ( numberString , wordRelation , tokenItem ) ; \n\t\t} \n\telse if ( numDigits == NUM00 ) { \n\t\texpand3DigitNumber ( numberString , wordRelation , tokenItem ) ; \n\t\t} \n\telse if ( numDigits < NUM00 ) { \n\t\texpandBelow7DigitNumber ( numberString , wordRelation , tokenItem ) ; \n\t\t} \n\telse if ( numDigits < NUM00 ) { \n\t\texpandBelow10DigitNumber ( numberString , wordRelation , tokenItem ) ; \n\t\t} \n\telse if ( numDigits < NUM00 ) { \n\t\texpandBelow13DigitNumber ( numberString , wordRelation , tokenItem ) ; \n\t\t} \n\telse { \n\t\texpandDigits ( numberString , wordRelation , tokenItem ) ; \n\t\t} \n\t} \n"}, {"code": "$F73303 ( axis , trans , prevImageSize , imageSize , prevViewSize , viewSize , drawableSize , m , Matrix , percentage , Math ) "}, {"code": "private int measureShort ( int measureSpec ) { \n\tint result = NUM00 ; \n\t$F20444 ( specMode , MeasureSpec , measureSpec ) $F23132 ( specSize , MeasureSpec , measureSpec ) if ( specMode == MeasureSpec . EXACTLY ) { \n\t\tresult = specSize ; \n\t\t} \n\telse { \n\t\tresult = ( int ) ( NUM00 * mRadius + getPaddingTop ( ) + getPaddingBottom ( ) + NUM00 ) ; \n\t\t$F23140 ( specMode , MeasureSpec , result , Math , specSize ) } \n\treturn result ; \n\t} \n"}, {"code": "protected boolean canTriggerWalking $F72 { \n\treturn _BOOL ; \n\t} \n"}, {"code": "$F13735 ( prefix , namespace , attName , attValue , xmlWriter ) "}, {"code": "public static String encryptECB ( final $F96 concatenatedHashValue , final Long turnoverCounter , final SecretKey symmetricKey , int turnOverCounterLengthInBytes ) throws NoSuchAlgorithmException , NoSuchProviderException , NoSuchPaddingException , InvalidKeyException , IllegalBlockSizeException , BadPaddingException { \n\t$F120018 ( byteBufferIV , ByteBuffer ) byteBufferIV . put ( concatenatedHashValue ) ; \n\t$F45857 ( IV , byteBufferIV ) $F120018 ( byteBufferData , ByteBuffer ) byteBufferData . putLong ( turnoverCounter ) ; \n\t$F45857 ( data , byteBufferData ) $F33012 ( turnOverCounterByteRep , get2ComplementRepForLong , turnoverCounter , turnOverCounterLengthInBytes ) $F7057 ( System , turnOverCounterByteRep , data ) final Cipher cipher = Cipher . getInstance ( NUM00 , NUM00 ) ; \n\t$F43929 ( cipher , Cipher , symmetricKey ) $F120024 ( intermediateResult , cipher , IV ) final $F96 $F14612 ( result , data ) ; \n\tfor ( $F1139 ( i , data ) ) { \n\t\tresult [ i ] = ( byte ) ( ( data [ i ] ) ^ ( intermediateResult [ i ] ) ) ; \n\t\t} \n\t$F4727 ( encryptedTurnOverValue , turnOverCounterLengthInBytes ) $F135 ( System , result , encryptedTurnOverValue , turnOverCounterLengthInBytes ) return CashBoxUtils . base64Encode ( encryptedTurnOverValue , _BOOL ) ; \n\t} \n"}, {"code": "private static boolean isFrostWireOld ( String messageVersion ) { \n\t$F397 ( messageVersion , _BOOL ) String currentVersion = FrostWireUtils . getFrostWireVersion ( ) ; \n\t$F12418 ( currentVersion , messageVersion , _BOOL ) try { \n\t\t$F6542 ( fwVersionParts , currentVersion ) $F167151 ( fw_major , Integer , fwVersionParts ) $F167151 ( fw_release , Integer , fwVersionParts ) $F167151 ( fw_service , Integer , fwVersionParts ) $F6542 ( msgVersionParts , messageVersion ) $F167151 ( msg_major , Integer , msgVersionParts ) $F167151 ( msg_release , Integer , msgVersionParts ) $F167151 ( msg_service , Integer , msgVersionParts ) $F88060 ( fw_major , msg_major , _BOOL ) if ( fw_major == msg_major && fw_release < msg_release ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\tif ( fw_major == msg_major && fw_release == msg_release && fw_service < msg_service ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\t$F7474 ( _BOOL ) return _BOOL ; \n\t} \n"}, {"code": "public synchronized void drawMap $F72 { \n\t$F3224 ( lastDrawMapReq , System ) SwingUtilities . invokeLater ( drawMapable ) ; \n\t} \n"}, {"code": "public void selectTable2Column ( Index column ) $F207 ( table2Columns , column ) "}, {"code": "public $F3803 extractURLs ( final String text ) { \n\tif $F6036 ( text ) $F12522 ( Collections ) final $F5 $F8726 ( urls ) ; \n\tfor ( final Entity entity : extractURLsWithIndices ( text ) ) { \n\t\turls . add ( entity . value ) ; \n\t\t} \n\treturn urls ; \n\t} \n"}, {"code": "public void findAndUndo ( Iterator it ) $F7686 ( it , findAndUndo ) "}, {"code": "public static $F2027 scaleDownInside $F2026 ( inWidth , inHeight , maxWidth , maxHeight ) { \n\tint scaledWidth ; \n\tint scaledHeight ; \n\tif ( inWidth <= maxWidth && inHeight <= maxHeight ) { \n\t\tscaledWidth = inWidth ; \n\t\tscaledHeight = inHeight ; \n\t\t} \n\telse { \n\t\tdouble widthRatio = $F10425 ( inWidth , maxWidth ) ; \n\t\tdouble heightRatio = $F10425 ( inHeight , maxHeight ) ; \n\t\tif ( widthRatio > heightRatio ) { \n\t\t\tscaledWidth = maxWidth ; \n\t\t\tscaledHeight = ( int ) Math . round ( ( double ) inHeight / widthRatio ) ; \n\t\t\t} \n\t\telse { \n\t\t\tscaledHeight = maxHeight ; \n\t\t\tscaledWidth = ( int ) Math . round ( ( double ) inWidth / heightRatio ) ; \n\t\t\t} \n\t\t} \n\treturn $F10511 ( scaledWidth , scaledHeight ) ; \n\t} \n"}, {"code": "public void rm ( String fileOrDir ) { \n\t$F83 ( buf ) String command = $F36702 ( String , ImageServerDialogProperties , fileOrDir ) ; \n\tsendWaitFor ( command , defaultTimeout , prompts , buf ) ; \n\t$F62755 ( log , buf ) } \n"}, {"code": "private MGRSComponents breakMGRSString ( String MGRSString ) { \n\tint num_digits ; \n\tint num_letters ; \n\tint i = NUM00 ; \n\tint j = NUM00 ; \n\tlong error_code = MGRS_NO_ERROR ; \n\tint zone = NUM00 ; \n\t$F11844 ( letters ) long easting = NUM00 ; \n\tlong northing = NUM00 ; \n\tint precision = NUM00 ; \n\twhile $F61616 ( i , MGRSString ) { \n\t\ti ++ ; \n\t\t} \n\tj = i ; \n\twhile ( i < MGRSString . length ( ) && $F69553 ( Character , MGRSString , i ) ) { \n\t\ti ++ ; \n\t\t} \n\tnum_digits = i - j ; \n\tif ( num_digits <= NUM00 ) if ( num_digits > NUM00 ) { \n\t\t$F64359 ( zone , Integer , MGRSString , j , i ) ; \n\t\tif $F61157 ( zone ) error_code |= MGRS_ <missing ';'> $F83088 } \n\telse error_code |= MGRS_ <missing ';'> $F83088 j = i ; \n\twhile ( i < MGRSString . length ( ) && $F154919 ( Character , MGRSString , i ) ) { \n\t\ti ++ ; \n\t\t} \n\tnum_letters = i - j ; \n\tif ( num_letters == NUM00 ) { \n\t\tletters [ NUM00 ] = alphabet . indexOf ( $F29169 ( Character , MGRSString , j ) ) ; \n\t\tif ( ( letters [ NUM00 ] == LETTER_I ) || ( letters [ NUM00 ] == LETTER_O ) ) error_code |= MGRS_ <missing ';'> $F83088 letters [ NUM00 ] = alphabet . indexOf ( Character . toUpperCase ( MGRSString . charAt ( j + NUM00 ) ) ) ; \n\t\tif ( ( letters [ NUM00 ] == LETTER_I ) || ( letters [ NUM00 ] == LETTER_O ) ) error_code |= MGRS_ <missing ';'> $F83088 letters [ NUM00 ] = alphabet . indexOf ( Character . toUpperCase ( MGRSString . charAt ( j + NUM00 ) ) ) ; \n\t\tif ( ( letters [ NUM00 ] == LETTER_I ) || ( letters [ NUM00 ] == LETTER_O ) ) error_code |= MGRS_ <missing ';'> $F83088 } \n\telse error_code |= MGRS_ <missing ';'> $F83088 j = i ; \n\twhile ( i < MGRSString . length ( ) && $F69553 ( Character , MGRSString , i ) ) { \n\t\ti ++ ; \n\t\t} \n\tnum_digits = i - j ; \n\tif ( ( num_digits <= NUM00 ) && ( num_digits % NUM00 == NUM00 ) ) { \n\t\tint n ; \n\t\tdouble multiplier ; \n\t\tn = num_digits / NUM00 ; \n\t\tprecision = n ; \n\t\tif ( n > NUM00 ) { \n\t\t\teasting = Integer . parseInt ( MGRSString . substring ( j , j + n ) ) ; \n\t\t\tnorthing = Integer . parseInt ( MGRSString . substring ( j + n , j + n + n ) ) ; \n\t\t\tmultiplier = Math . pow ( NUM00 , NUM00 - n ) ; \n\t\t\teasting *= multiplier ; \n\t\t\tnorthing *= multiplier ; \n\t\t\t} \n\t\telse $F18712 ( easting , northing ) } \n\telse error_code |= MGRS_ <missing ';'> $F83088 last_error = error_code ; \n\tif ( error_code == MGRS_NO_ERROR ) return new MGRSComponents ( zone , letters [ NUM00 ] , letters [ NUM00 ] , letters [ NUM00 ] , easting , northing , precision ) ; \n\t$F1274 } \n"}, {"code": "public void putMap ( $F224310 ( m ) ) { \n\tfor ( $F3465 ( key , m ) ) { \n\t\t$F44293 vals = get ( key ) ; \n\t\tif ( vals == null ) { \n\t\t\tvals = new $F32030 $F72 ; \n\t\t\tput ( key , vals ) ; \n\t\t\t} \n\t\t$F103980 ( vals , m , key ) } \n\t} \n"}, {"code": "protected void throwParseException ( ParseException e ) throws ParseException { \n\tif ( locator != null ) { \n\t\tString elementLocation = NUM00 ; \n\t\tif ( curHandler != null ) { \n\t\t\telementLocation += NUM00 + curHandler . qName ; \n\t\t\t} \n\t\tString location = NUM00 + String . valueOf ( locator . getLineNumber ( ) ) + NUM00 + String . valueOf ( locator . getColumnNumber ( ) ) + elementLocation + NUM00 ; \n\t\tLogUtils . logException ( logger , Level . FINE , location , e ) ; \n\t\tthrow new ParseException ( location + e . getMessage ( ) , e ) ; \n\t\t} \n\telse { \n\t\tLogUtils . logException ( logger , Level . FINE , null , e ) ; \n\t\tthrow e ; \n\t\t} \n\t} \n"}, {"code": "public void addAssetListener ( $F1113 ActionListener listener ) $F207 ( myAssetListeners , listener ) "}, {"code": "public UndoableEdit insertString ( int where , String str ) throws BadLocationException { \n\tif ( where > length ( ) || where < NUM00 ) { \n\t\tthrow new BadLocationException $F59470 ( length ) ; \n\t\t} \n\t$F7782 ( chars , str ) replace ( where , NUM00 , chars , chars . length ) ; \n\treturn new InsertUndo ( where , str . length ( ) ) ; \n\t} \n"}, {"code": "public static JavaPairRDD < MatrixIndexes , MatrixBlock > toMatrixJavaPairRDD ( JavaSparkContext sc , MatrixBlock src , int brlen , int bclen ) throws DMLRuntimeException { \n\t$F133040 ( t0 , DMLScript , System ) LinkedList < Tuple2 < MatrixIndexes , MatrixBlock > > list = new LinkedList < Tuple2 < MatrixIndexes , MatrixBlock > > $F72 ; \n\tif ( src . getNumRows ( ) <= brlen && src . getNumColumns ( ) <= bclen ) { \n\t\tlist . addLast ( new Tuple2 < MatrixIndexes , MatrixBlock > ( new MatrixIndexes $F32532 , src ) ) ; \n\t\t} \n\telse { \n\t\tboolean sparse = src . isInSparseFormat ( ) ; \n\t\tfor ( int blockRow = NUM00 ; \n\t\tblockRow < ( int ) Math . ceil ( src . getNumRows ( ) / ( double ) brlen ) ; \n\t\tblockRow ++ ) for ( int blockCol = NUM00 ; \n\t\tblockCol < ( int ) Math . ceil ( src . getNumColumns ( ) / ( double ) bclen ) ; \n\t\tblockCol ++ ) { \n\t\t\tint maxRow = ( blockRow * brlen + brlen < src . getNumRows ( ) ) ? brlen : src . getNumRows ( ) - blockRow * brlen ; \n\t\t\tint maxCol = ( blockCol * bclen + bclen < src . getNumColumns ( ) ) ? bclen : src . getNumColumns ( ) - blockCol * bclen ; \n\t\t\tMatrixBlock block = new MatrixBlock ( maxRow , maxCol , sparse ) ; \n\t\t\tint row_offset = blockRow * brlen ; \n\t\t\tint col_offset = blockCol * bclen ; \n\t\t\tsrc . sliceOperations ( row_offset , row_offset + maxRow - NUM00 , col_offset , col_offset + maxCol - NUM00 , block ) ; \n\t\t\tMatrixIndexes indexes = new MatrixIndexes ( blockRow + NUM00 , blockCol + NUM00 ) ; \n\t\t\tlist . addLast ( new Tuple2 < MatrixIndexes , MatrixBlock > ( indexes , block ) ) ; \n\t\t\t} \n\t\t} \n\tJavaPairRDD < MatrixIndexes , MatrixBlock > result = sc . parallelizePairs ( list ) ; \n\tif ( DMLScript . STATISTICS ) { \n\t\tStatistics . accSparkParallelizeTime ( System . nanoTime ( ) - t0 ) ; \n\t\tStatistics . incSparkParallelizeCount ( NUM00 ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static boolean isYouTubeUrl ( String url ) { \n\t$F46019 ( TextUtils , url , _BOOL ) $F23375 ( uri , Uri , url ) String authority = uri . getAuthority ( ) ; \n\tif ( ! TextUtils . isEmpty ( authority ) && authority . contains ( NUM00 ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\telse { \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public List < NamespaceVO > findNamespaces ( String appId , Env env , String clusterName ) { \n\tList < NamespaceDTO > namespaces = namespaceAPI . findNamespaceByCluster ( appId , env , clusterName ) ; \n\tif $F45555 ( namespaces ) { \n\t\tthrow new BadRequestException $F580 ; \n\t\t} \n\tList < NamespaceVO > $F19827 ( namespaceVOs ) ; \n\tfor ( NamespaceDTO namespace : namespaces ) { \n\t\tNamespaceVO namespaceVO = null ; \n\t\ttry { \n\t\t\tnamespaceVO = parseNamespace ( appId , env , clusterName , namespace ) ; \n\t\t\tnamespaceVOs . add ( namespaceVO ) ; \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\tlogger . error ( NUM00 , appId , env , clusterName , namespace . getNamespaceName ( ) , e ) ; \n\t\t\tthrow e ; \n\t\t\t} \n\t\t} \n\treturn namespaceVOs ; \n\t} \n"}, {"code": "void unlink $F75141 ( p , trail ) { \n\tp . item = null ; \n\t$F33910 ( trail , p ) if ( last == p ) last = trail ; \n\t$F75143 ( count , capacity , notFull ) } \n"}, {"code": "public static void openShareDialog ( Context context , String title , $F1431 String uri , String shareText , String shareSubject ) { \n\tIntent share = new Intent ( Intent . ACTION_SEND ) ; \n\t$F146148 ( share ) share . putExtra ( Intent . EXTRA_TEXT , shareText ) ; \n\tshare . putExtra ( Intent . EXTRA_SUBJECT , shareSubject ) ; \n\tif $F20899 ( TextUtils , uri ) { \n\t\t$F146148 ( share ) share . putExtra ( Intent . EXTRA_STREAM , Uri . parse ( uri ) ) ; \n\t\t} \n\tcontext . startActivity ( Intent . createChooser ( share , title ) ) ; \n\t} \n"}, {"code": "public void addMatching ( final ConversationStates state , final String triggerString , final ExpressionMatcher matcher , final ChatCondition condition , boolean secondary , final ConversationStates nextState , final String reply , final ChatAction action ) { \n\t$F296121 triggerExpressions = createUniqueTriggerExpressions ( state , Arrays . asList ( triggerString ) , matcher , condition , reply , action ) ; \n\tadd ( triggerExpressions , state , condition , secondary , nextState , reply , action ) ; \n\t} \n"}, {"code": "boolean dropItems ( final Player player , int itemCount ) { \n\tboolean result = _BOOL ; \n\tfinal ItemCollection itemsTodo = new ItemCollection $F72 ; \n\titemsTodo . addFromQuestStateString ( player . getQuest ( questSlot ) ) ; \n\tif ( player . drop ( itemName , itemCount ) ) { \n\t\tif ( itemsTodo . removeItem ( itemName , itemCount ) ) { \n\t\t\tresult = _BOOL ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tfinal $F291208 items = player . getAllEquipped ( itemName ) ; \n\t\tif ( items != null ) { \n\t\t\tfor ( final Item item : items ) { \n\t\t\t\tfinal int quantity = item . getQuantity ( ) ; \n\t\t\t\t$F50166 ( n , Math , itemCount , quantity ) if ( player . drop ( itemName , n ) ) { \n\t\t\t\t\titemCount -= n ; \n\t\t\t\t\tif ( itemsTodo . removeItem ( itemName , n ) ) { \n\t\t\t\t\t\tresult = _BOOL ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\tif ( itemCount == NUM00 ) $F3468 ( result , _BOOL ) } \n\t\t\t} \n\t\t} \n\tif ( result ) { \n\t\tplayer . setQuest ( questSlot , itemsTodo . toStringForQuestState ( ) ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public void encodeOctetString ( byte tb [ ] , int tag , int tboffset , int length ) throws EncodeException { \n\tencodeByte ( tag ) ; \n\tencodeLength ( length ) ; \n\tif ( length > NUM00 ) { \n\t\tensureFreeBytes ( length ) ; \n\t\tSystem . arraycopy ( tb , tboffset , buf , offset , length ) ; \n\t\toffset += length ; \n\t\t} \n\t} \n"}, {"code": "private void swapBlocks $F14337 ( from , second , to ) { \n\tint len1 = second - from , len2 = to - second + NUM00 ; \n\tif ( len1 == NUM00 || len2 == NUM00 ) $F932 if ( len1 < temp . length ) { \n\t\t$F21535 ( System , data , from , temp , len1 ) $F69282 ( System , data , second , from , len2 ) System . arraycopy ( temp , NUM00 , data , from + len2 , len1 ) ; \n\t\t$F665 } \n\telse if ( len2 < temp . length ) { \n\t\t$F21535 ( System , data , second , temp , len2 ) $F271181 ( System , data , from , len2 , len1 ) $F6483 ( System , temp , data , from , len2 ) $F665 } \n\treverseBlock ( from , second - NUM00 ) ; \n\treverseBlock ( second , to ) ; \n\treverseBlock ( from , to ) ; \n\t} \n"}, {"code": "private static long totalSize ( $F12295 relPathToSize ) { \n\tlong total = NUM00 ; \n\tfor ( Long l : relPathToSize . values ( ) ) { \n\t\ttotal += l ; \n\t\t} \n\treturn total ; \n\t} \n"}, {"code": "public boolean hasNext $F72 { \n\treturn iterator . hasNext ( ) ; \n\t} \n"}, {"code": "public static boolean isValid ( Timestamp validFrom , Timestamp validTo , Timestamp testDate ) { \n\t$F397 ( testDate , _BOOL ) $F91730 ( validFrom , validTo , _BOOL ) if ( validFrom != null && validFrom . after ( testDate ) ) return _BOOL ; \n\tif ( validTo != null && validTo . before ( testDate ) ) return _BOOL ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "public PatternTokenizer ( AttributeFactory factory , Pattern pattern , int group ) { \n\tsuper ( factory ) ; \n\tthis . group = group ; \n\tmatcher = pattern . matcher ( NUM00 ) ; \n\tif ( group >= NUM00 && group > matcher . groupCount ( ) ) { \n\t\tthrow new IllegalArgumentException ( NUM00 + matcher . groupCount ( ) + NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public double totalEstimatedQuantityForPreviousREs ( final Long woActivityId , Long estimateId , final Long activityId , final WorkOrder workOrder ) { \n\tif ( estimateId == null ) estimateId = - NUM00 ; \n\t$F68541 ( params ) Double estQuantity = null ; \n\tparams = new Object [ ] { \n\t\testimateId , workOrder , workOrder , woActivityId , activityId } \n\t; \n\testQuantity = ( Double ) genericService . findByNamedQuery ( NUM00 , params ) ; \n\tDouble estQuantityRE = null ; \n\tparams = new Object [ ] { \n\t\testimateId , workOrder , workOrder , activityId } \n\t; \n\testQuantityRE = ( Double ) genericService . findByNamedQuery ( NUM00 , params ) ; \n\tif ( estQuantity != null && estQuantityRE != null ) estQuantity = estQuantity + estQuantityRE ; \n\tif ( estQuantity == null && estQuantityRE != null ) estQuantity = estQuantityRE ; \n\tif ( estQuantity == null ) $F1082 else $F12165 ( estQuantity ) } \n"}, {"code": "protected long writeDataToFile ( NodeHolder nodeHolder , FileChannel channel ) throws CarbonDataWriterException { \n\t$F30974 compressedIndex = nodeHolder . getCompressedIndex ( ) ; \n\t$F30974 compressedIndexMap = nodeHolder . getCompressedIndexMap ( ) ; \n\t$F30974 compressedDataIndex = nodeHolder . getCompressedDataIndex ( ) ; \n\tint indexBlockSize = NUM00 ; \n\tint index = NUM00 ; \n\tfor ( int i = NUM00 ; \n\ti < nodeHolder . getKeyBlockIndexLength ( ) . length ; \n\ti ++ ) { \n\t\tindexBlockSize += nodeHolder . getKeyBlockIndexLength ( ) [ index ++ ] + CarbonCommonConstants . INT_SIZE_IN_BYTE ; \n\t\t} \n\tfor ( int i = NUM00 ; \n\ti < nodeHolder . getDataIndexMapLength ( ) . length ; \n\ti ++ ) { \n\t\tindexBlockSize += nodeHolder . getDataIndexMapLength ( ) [ i ] ; \n\t\t} \n\tByteBuffer byteBuffer = ByteBuffer . allocate ( nodeHolder . getKeyArray ( ) . length + nodeHolder . getDataArray ( ) . length + indexBlockSize ) ; \n\tlong offset = NUM00 ; \n\ttry { \n\t\t$F8935 ( offset , channel ) byteBuffer . put ( nodeHolder . getKeyArray ( ) ) ; \n\t\tbyteBuffer . put ( nodeHolder . getDataArray ( ) ) ; \n\t\tByteBuffer buffer1 = null ; \n\t\tfor ( $F1139 ( i , compressedIndex ) ) { \n\t\t\tbuffer1 = ByteBuffer . allocate ( nodeHolder . getKeyBlockIndexLength ( ) [ i ] ) ; \n\t\t\tbuffer1 . putInt ( compressedIndex [ i ] . length ) ; \n\t\t\tbuffer1 . put ( compressedIndex [ i ] ) ; \n\t\t\tif ( compressedIndexMap [ i ] . length > NUM00 ) $F30132 ( buffer1 , compressedIndexMap , i ) $F23501 ( buffer1 ) byteBuffer . put ( buffer1 . array ( ) ) ; \n\t\t\t} \n\t\tfor ( $F1139 ( i , compressedDataIndex ) ) $F30132 ( byteBuffer , compressedDataIndex , i ) $F14257 ( byteBuffer ) channel . write ( byteBuffer ) ; \n\t\t} \n\tcatch ( IOException exception ) $F85378 ( exception ) return offset ; \n\t} \n"}, {"code": "public boolean eval $F72 { \n\tif ( $F10470 ( sourceFileSets ) && $F10470 ( sourceResources ) && sourceFile == null ) { \n\t\tthrow new BuildException $F580 ; \n\t\t} \n\tif ( ( $F3816 ( sourceFileSets ) || $F3816 ( sourceResources ) ) && sourceFile != null ) { \n\t\tthrow new BuildException $F580 ; \n\t\t} \n\tif ( urlbase == null ) { \n\t\tthrow new BuildException $F580 ; \n\t\t} \n\tif $F271542 ( sourceFile ) { \n\t\tthrow new BuildException $F3885 ( sourceFile ) ; \n\t\t} \n\tboolean upToDate = _BOOL ; \n\tif ( sourceFile != null ) { \n\t\tResource fileResource = new FileResource ( sourceFile ) ; \n\t\tupToDate = isUpToDate ( fileResource ) ; \n\t\t} \n\tif ( upToDate ) { \n\t\t$F8484 ( e , sourceFileSets ) while ( upToDate && e . hasMoreElements ( ) ) { \n\t\t\tFileSet fs = ( FileSet ) e . nextElement ( ) ; \n\t\t\t$F10531 ( it , fs ) while ( upToDate && it . hasNext ( ) ) { \n\t\t\t\tResource r = ( Resource ) it . next ( ) ; \n\t\t\t\tupToDate = isUpToDate ( r ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tif ( upToDate ) { \n\t\t$F83495 r = sourceResources . listResources ( ) ; \n\t\tfor ( int i = NUM00 ; \n\t\tupToDate && i < r . length ; \n\t\ti ++ ) { \n\t\t\tupToDate = isUpToDate ( r [ i ] ) ; \n\t\t\t} \n\t\t} \n\treturn upToDate ; \n\t} \n"}, {"code": "private int handleAggregationPacket ( Buffer input , Buffer output ) { \n\t$F96 bufferData = ( $F96 ) input . getData ( ) ; \n\tif ( aggregationPositon + NUM00 >= bufferData . length ) { \n\t\taggregationPositon = NUM00 ; \n\t\toutput . setDiscard ( _BOOL ) ; \n\t\treturn BUFFER_PROCESSED_OK ; \n\t\t} \n\tint nalu_size = ( $F528005 ( bufferData , aggregationPositon ) | $F21296 ( bufferData , aggregationPositon ) ) ; \n\taggregationPositon += NUM00 ; \n\tif ( aggregationPositon + nalu_size > bufferData . length ) $F139432 ( aggregationPositon , BUFFER_PROCESSED_FAILED ) extractNalUnitHeader ( aggregationPositon , input ) ; \n\tif ( mNalUnitHeader . isSingleNalUnitPacket ( ) ) { \n\t\t$F2175 ( data , nalu_size ) $F21535 ( System , bufferData , aggregationPositon , data , nalu_size ) aggregationPositon += nalu_size ; \n\t\toutput . setData ( data ) ; \n\t\t$F5660 ( output , data ) $F5661 ( output ) output . setTimestamp ( input . getTimestamp ( ) ) ; \n\t\toutput . setSequenceNumber ( input . getSequenceNumber ( ) ) ; \n\t\toutput . setVideoOrientation ( input . getVideoOrientation ( ) ) ; \n\t\toutput . setFormat ( input . getFormat ( ) ) ; \n\t\toutput . setFlags ( input . getFlags ( ) ) ; \n\t\treturn INPUT_BUFFER_NOT_CONSUMED ; \n\t\t} \n\taggregationPositon = NUM00 ; \n\treturn BUFFER_PROCESSED_FAILED ; \n\t} \n"}, {"code": "public double calculateCostForStringAVM ( RegexGraph graph ) { \n\tfinal int ROWS = graph . getNumberOfRows ( ) ; \n\tfinal int COLUMNS = graph . getNumberOfColumns ( ) ; \n\tfinal double [ ] [ ] [ ] matrix = new double [ ROWS ] [ COLUMNS ] [ NUM00 ] ; \n\tcalculateInsertionCostOnFirstRow ( graph , matrix ) ; \n\tfor ( $F119 ( i , ROWS ) ) { \n\t\tfor ( $F119 ( col , COLUMNS ) ) { \n\t\t\tmatrix [ i ] [ col ] [ DEL ] = Double . MAX_VALUE ; \n\t\t\tmatrix [ i ] [ col ] [ REP ] = Double . MAX_VALUE ; \n\t\t\tmatrix [ i ] [ col ] [ INS ] = Double . MAX_VALUE ; \n\t\t\tfor ( GraphTransition t : graph . getIncomingTransitions ( i , col ) ) { \n\t\t\t\tint otherCol = graph . getColumn ( t . fromState ) ; \n\t\t\t\tint otherRow = t . fromRow ; \n\t\t\t\tif ( t . type . equals ( GraphTransition . TransitionType . INSERTION ) ) { \n\t\t\t\t\tassert otherRow == i ; \n\t\t\t\t\tmatrix [ i ] [ col ] [ INS ] = Math . min ( matrix [ i ] [ col ] [ INS ] , getSubPathCost ( matrix [ otherRow ] [ otherCol ] [ DEL ] , t . cost ) ) ; \n\t\t\t\t\tmatrix [ i ] [ col ] [ INS ] = Math . min ( matrix [ i ] [ col ] [ INS ] , getSubPathCost ( matrix [ otherRow ] [ otherCol ] [ REP ] , t . cost ) ) ; \n\t\t\t\t\tmatrix [ i ] [ col ] [ INS ] = Math . min ( matrix [ i ] [ col ] [ INS ] , getSubPathCost ( matrix [ otherRow ] [ otherCol ] [ INS ] , t . cost ) ) ; \n\t\t\t\t\t} \n\t\t\t\telse if ( t . type . equals ( GraphTransition . TransitionType . REPLACEMENT ) ) { \n\t\t\t\t\tmatrix [ i ] [ col ] [ REP ] = Math . min ( matrix [ i ] [ col ] [ REP ] , getSubPathCost ( matrix [ otherRow ] [ otherCol ] [ DEL ] , t . cost ) ) ; \n\t\t\t\t\tmatrix [ i ] [ col ] [ REP ] = Math . min ( matrix [ i ] [ col ] [ REP ] , getSubPathCost ( matrix [ otherRow ] [ otherCol ] [ REP ] , t . cost ) ) ; \n\t\t\t\t\tmatrix [ i ] [ col ] [ INS ] = Math . min ( matrix [ i ] [ col ] [ INS ] , getSubPathCost ( matrix [ otherRow ] [ otherCol ] [ DEL ] , t . cost ) ) ; \n\t\t\t\t\tmatrix [ i ] [ col ] [ INS ] = Math . min ( matrix [ i ] [ col ] [ INS ] , getSubPathCost ( matrix [ otherRow ] [ otherCol ] [ REP ] , t . cost ) ) ; \n\t\t\t\t\t} \n\t\t\t\telse if ( t . type . equals ( GraphTransition . TransitionType . DELETION ) ) { \n\t\t\t\t\tmatrix [ i ] [ col ] [ DEL ] = Math . min ( matrix [ i ] [ col ] [ DEL ] , getSubPathCost ( matrix [ otherRow ] [ otherCol ] [ DEL ] , t . cost ) ) ; \n\t\t\t\t\tmatrix [ i ] [ col ] [ REP ] = Math . min ( matrix [ i ] [ col ] [ REP ] , getSubPathCost ( matrix [ otherRow ] [ otherCol ] [ DEL ] , t . cost ) ) ; \n\t\t\t\t\tmatrix [ i ] [ col ] [ INS ] = Math . min ( matrix [ i ] [ col ] [ INS ] , getSubPathCost ( matrix [ otherRow ] [ otherCol ] [ DEL ] , t . cost ) ) ; \n\t\t\t\t\t} \n\t\t\t\telse if ( t . type . equals ( GraphTransition . TransitionType . PHANTOM ) ) { \n\t\t\t\t\tassert t . cost == NUM00 ; \n\t\t\t\t\tmatrix [ i ] [ col ] [ DEL ] = Math . min ( matrix [ i ] [ col ] [ DEL ] , matrix [ otherRow ] [ otherCol ] [ DEL ] ) ; \n\t\t\t\t\tmatrix [ i ] [ col ] [ REP ] = Math . min ( matrix [ i ] [ col ] [ REP ] , matrix [ otherRow ] [ otherCol ] [ REP ] ) ; \n\t\t\t\t\tmatrix [ i ] [ col ] [ INS ] = Math . min ( matrix [ i ] [ col ] [ INS ] , matrix [ otherRow ] [ otherCol ] [ INS ] ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tdouble min = Double . MAX_VALUE ; \n\tfor ( double value : matrix [ ROWS - NUM00 ] [ COLUMNS - NUM00 ] ) { \n\t\t$F45132 ( value , min ) } \n\treturn min ; \n\t} \n"}, {"code": "protected int decodeLinePrefix ( PushbackInputStream inStream , OutputStream outStream ) throws IOException { \n\tint i ; \n\tint nLen , nSeq ; \n\tbyte xtmp [ ] ; \n\tint c ; \n\tcrc . value = NUM00 ; \n\twhile ( _BOOL ) { \n\t\t$F3261 ( c , inStream , tmp ) if ( c == - NUM00 ) { \n\t\t\tthrow new CEStreamExhausted $F72 ; \n\t\t\t} \n\t\tif ( tmp [ NUM00 ] == NUM00 ) $F5153 } \n\t$F2268 ( lineAndSeq ) decodeAtom ( inStream , lineAndSeq , NUM00 ) ; \n\t$F3031 ( xtmp , lineAndSeq ) nLen = xtmp [ NUM00 ] & NUM00 ; \n\tnSeq = xtmp [ NUM00 ] & NUM00 ; \n\tif ( nSeq != sequence ) $F241990 sequence = ( sequence + NUM00 ) & NUM00 ; \n\treturn ( nLen ) ; \n\t} \n"}, {"code": "public void appendNodes ( NodeSet nodes ) { \n\t$F2199 ( nNodes , nodes ) if ( null == m_map ) { \n\t\tm_mapSize = nNodes + m_blocksize ; \n\t\tm_map = new Node [ m_mapSize ] ; \n\t\t} \n\telse if ( ( m_firstFree + nNodes ) >= m_mapSize ) { \n\t\tm_mapSize += ( nNodes + m_blocksize ) ; \n\t\tNode newMap [ ] = new Node [ m_mapSize ] ; \n\t\tSystem . arraycopy ( m_map , NUM00 , newMap , NUM00 , m_firstFree + nNodes ) ; \n\t\tm_map = newMap ; \n\t\t} \n\t$F197780 ( System , nodes , m_map , m_firstFree , nNodes ) m_firstFree += nNodes ; \n\t} \n"}, {"code": "protected void updateCachedAWTSizes ( final Dimension min , final Dimension pref , final Dimension max ) { \n\tassert EventQueue . isDispatchThread ( ) ; \n\tif ( verboseSizeLayout ) { \n\t\tSystem . err . println ( NUM00 + min + NUM00 + pref + NUM00 + max ) ; \n\t\t} \n\tlastValidatedAWTTime = ++ currentAWTTime ; \n\tboolean mustNotify ; \n\tsynchronized ( this ) { \n\t\tmustNotify = cachedSizesInitialized == NUM00 ; \n\t\tif ( ! mustNotify ) { \n\t\t\tmustNotify = ! ( min . equals ( cachedMinSize ) && pref . equals ( cachedPrefSize ) && max . equals ( cachedMaxSize ) ) ; \n\t\t\t} \n\t\t$F85331 ( cachedSizesInitialized ) cachedMinSize = min ; \n\t\tcachedPrefSize = pref ; \n\t\tcachedMaxSize = max ; \n\t\tif ( INITIAL_CLIENT_AREA_WORKAROUND && initialClientArea != null ) { \n\t\t\tinitialClientArea . width = cachedPrefSize . width ; \n\t\t\tinitialClientArea . height = cachedPrefSize . height ; \n\t\t\t} \n\t\t} \n\tif ( mustNotify ) { \n\t\tfinal int onBehalfAWTTime = lastValidatedAWTTime ; \n\t\tThreadingHandler . getInstance ( ) . asyncExec ( display , null ) ; \n\t\t} \n\t} \n"}, {"code": "public boolean isDecimalPoint $F72 { \n\tif ( m_decimalPoint == null ) { \n\t\tDecimalFormatSymbols dfs = new DecimalFormatSymbols ( m_locale ) ; \n\t\tm_decimalPoint = new Boolean ( dfs . getDecimalSeparator ( ) == NUM00 ) ; \n\t\t} \n\t$F44652 ( m_decimalPoint ) } \n"}, {"code": "public void removeLayer ( Layer layer ) { \n\tif ( layer != null && layer . isRemovable ( ) ) { \n\t\t$F108970 currentLayers = getLayerList ( ) ; \n\t\tcurrentLayers . remove ( layer ) ; \n\t\tsetLayerList ( currentLayers ) ; \n\t\t} \n\telse { \n\t\tif ( layer != null ) { \n\t\t\tlogger . warning ( $F2990 ( layer ) ) ; \n\t\t\tthrow new com . bbn . openmap . util . HandleError $F18563 ( layer ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public Option [ ] findAllOptionTypes ( final Class optionClass ) { \n\t$F18062 ( Check , optionClass ) return findAllOptionTypes ( $F139647 ( optionClass ) ) ; \n\t} \n"}, {"code": "public int via_padstack_count $F72 $F1652 ( via_padstacks ) "}, {"code": "public static boolean isEarlierTransaction ( MCostDetail cd , int C_AcctSchema_ID , int M_CostType_ID , int M_CostElement_ID , String costingLevel ) { \n\tMTransaction trx = new MTransaction ( cd . getCtx ( ) , cd . getM_Transaction_ID ( ) , cd . get_TrxName ( ) ) ; \n\tMCostDetail last_cd = getLastTransaction ( trx , C_AcctSchema_ID , M_CostType_ID , M_CostElement_ID , costingLevel ) ; \n\t$F397 ( last_cd , _BOOL ) if ( cd . getSeqNo ( ) <= last_cd . getSeqNo ( ) && cd . getM_Transaction_ID ( ) != last_cd . getM_Transaction_ID ( ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "private void drawTranslatedRenderedImage ( RenderedImage img , Rectangle region , int i2uTransX , int i2uTransY ) { \n\tint tileGridXOffset = img . getTileGridXOffset ( ) ; \n\tint tileGridYOffset = img . getTileGridYOffset ( ) ; \n\tint tileWidth = img . getTileWidth ( ) ; \n\tint tileHeight = img . getTileHeight ( ) ; \n\tint minTileX = getTileIndex ( region . x , tileGridXOffset , tileWidth ) ; \n\tint minTileY = getTileIndex ( region . y , tileGridYOffset , tileHeight ) ; \n\tint maxTileX = getTileIndex ( $F6108 ( region ) - NUM00 , tileGridXOffset , tileWidth ) ; \n\tint maxTileY = getTileIndex ( $F6118 ( region ) - NUM00 , tileGridYOffset , tileHeight ) ; \n\tColorModel colorModel = img . getColorModel ( ) ; \n\t$F47146 ( tileRect ) for ( int ty = minTileY ; \n\tty <= maxTileY ; \n\tty ++ ) { \n\t\tfor ( int tx = minTileX ; \n\t\ttx <= maxTileX ; \n\t\ttx ++ ) { \n\t\t\tRaster raster = img . getTile ( tx , ty ) ; \n\t\t\ttileRect . x = tx * tileWidth + tileGridXOffset ; \n\t\t\ttileRect . y = ty * tileHeight + tileGridYOffset ; \n\t\t\ttileRect . width = tileWidth ; \n\t\t\ttileRect . height = tileHeight ; \n\t\t\tclipTo ( tileRect , region ) ; \n\t\t\tWritableRaster wRaster = null ; \n\t\t\tif ( raster instanceof WritableRaster ) { \n\t\t\t\twRaster = ( WritableRaster ) raster ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\twRaster = Raster . createWritableRaster ( raster . getSampleModel ( ) , raster . getDataBuffer ( ) , null ) ; \n\t\t\t\t} \n\t\t\twRaster = wRaster . createWritableChild ( tileRect . x , tileRect . y , tileRect . width , tileRect . height , NUM00 , NUM00 , null ) ; \n\t\t\tBufferedImage bufImg = new BufferedImage ( colorModel , wRaster , colorModel . isAlphaPremultiplied ( ) , null ) ; \n\t\t\tcopyImage ( bufImg , tileRect . x + i2uTransX , tileRect . y + i2uTransY , NUM00 , NUM00 , tileRect . width , tileRect . height , null , null ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void addOutOfContextMessage ( ConsensusMessage m ) { \n\t$F8934 ( outOfContextLock ) if ( m . getType ( ) == MessageFactory . PROPOSE ) { \n\t\t$F7957 ( Logger , m ) outOfContextProposes . put ( m . getNumber ( ) , m ) ; \n\t\t} \n\telse { \n\t\tList < ConsensusMessage > messages = outOfContext . get ( m . getNumber ( ) ) ; \n\t\tif ( messages == null ) { \n\t\t\tmessages = new LinkedList < ConsensusMessage > $F72 ; \n\t\t\toutOfContext . put ( m . getNumber ( ) , messages ) ; \n\t\t\t} \n\t\t$F7957 ( Logger , m ) messages . add ( m ) ; \n\t\t} \n\t$F704 ( outOfContextLock ) } \n"}, {"code": "private long calculateCapacity ( long minimumCapacity ) { \n\tlong newCapacity = Math . min ( Math . max ( capacity , NUM00 ) , minimumCapacity ) ; \n\twhile ( newCapacity < Math . min ( minimumCapacity , maxCapacity ) ) { \n\t\tnewCapacity <<= NUM00 ; \n\t\t} \n\t$F95700 ( Math , newCapacity , maxCapacity ) } \n"}, {"code": "protected Object createResource $F72 throws ResourceUnavailableException { \n\tObject resource = create ( ) ; \n\tfreed . add ( resource ) ; \n\tnumCreated ++ ; \n\treturn ( resource ) ; \n\t} \n"}, {"code": "public void upgrade $F72 throws Exception { \n\t$F933 ( checkUpgradePreconditions ) backupManager . createOpenDJBackup ( ) ; \n\ttry ( BufferedWriter out = new BufferedWriter ( new FileWriter ( upgradeMarker ) ) ) { \n\t\t$F9826 ( out , currentVersion ) $F3410 ( out ) } \n\tif ( currentVersion . isOlderThan ( DJ_245_VERSION ) ) { \n\t\tbackupFile ( NUM00 ) ; \n\t\tbackupFile ( NUM00 ) ; \n\t\tbackupFile ( NUM00 ) ; \n\t\tunpackZipFile ( _BOOL ) ; \n\t\tcallOldDJUpgrade ( ) ; \n\t\t} \n\telse { \n\t\tunpackZipFile ( _BOOL ) ; \n\t\tif $F1238 ( currentVersion , DJ_246_VERSION ) { \n\t\t\ttry { \n\t\t\t\tFile badSchema = new File ( $F157313 ( installRoot , File ) + NUM00 + File . separator + NUM00 ) ; \n\t\t\t\tdelete ( badSchema ) ; \n\t\t\t\t} \n\t\t\tcatch ( RuntimeException e ) $F845 File goodSchema = new File ( servletCtx . getRealPath ( File . separator + NUM00 + File . separator + NUM00 + File . separator + NUM00 + File . separator + NUM00 + File . separator + NUM00 ) ) ; \n\t\t\tFile moveTo = new File ( $F157313 ( installRoot , File ) + NUM00 + File . separator + NUM00 ) ; \n\t\t\tcopy ( goodSchema . toPath ( ) , moveTo . toPath ( ) ) ; \n\t\t\t} \n\t\tint ret = callDJUpgradeMechanism ( ) ; \n\t\tif ( ret == NUM00 ) { \n\t\t\tmessage ( NUM00 ) ; \n\t\t\tdelete ( upgradeMarker ) ; \n\t\t\tfinal String lockFile = LockFileManager . getServerLockFileName ( ) ; \n\t\t\tLockFileManager . releaseLock ( lockFile , new StringBuilder $F72 ) ; \n\t\t\t} \n\t\telse { \n\t\t\tthrow new UpgradeException ( NUM00 + ret ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static final Optional $F11299 findSteamVRManifest ( final $F14386 indexedSteamFolders ) { \n\tfor ( final File f : indexedSteamFolders ) { \n\t\tfinal File currentFile = new File ( f . getAbsolutePath ( ) + SteamConstants . STEAM_VR_APPS_MANIFEST_FILE_LOCATION ) ; \n\t\tif $F3428 ( currentFile ) $F65633 ( Optional , currentFile ) } \n\t$F21169 ( Optional ) } \n"}, {"code": "private static boolean isClose ( float value , float targetValue ) { \n\treturn Math . abs ( value - targetValue ) < NUM00 ; \n\t} \n"}, {"code": "$F1654 ( _myTcpClients ) "}, {"code": "public static MMovementCartBean addToMovementCart ( Properties ctx , StockMovementBean bean , MMovementCartBean cartBean , boolean isSales , boolean ifAdd ) throws OperationException , ProductNotFoundException , ProductNotOnPriceListException { \n\tArrayList < ItemBean > oldItems ; \n\tif ( cartBean == null ) { \n\t\tcartBean = new MMovementCartBean $F72 ; \n\t\toldItems = new ArrayList < ItemBean > $F72 ; \n\t\t} \n\telse { \n\t\toldItems = cartBean . getItems ( ) ; \n\t\t} \n\tArrayList < ItemBean > oldItemsClone = ( ArrayList ) oldItems . clone ( ) ; \n\tArrayList itemsToBeAdded = getMMovementItems ( ctx , bean ) ; \n\toldItems = addToMMovementList ( ctx , oldItemsClone , itemsToBeAdded , ifAdd ) ; \n\tInteger priceListId = POSTerminalManager . getPriceListId ( ctx , isSales ) ; \n\toldItems = setMMovementItemCosts ( ctx , priceListId , oldItems , isSales ) ; \n\tcartBean . setItems ( oldItems ) ; \n\tcartBean . setPricelistId ( priceListId ) ; \n\treturn cartBean ; \n\t} \n"}, {"code": "private static $F221457 filterFieldList ( $F221457 fields , $F6969 filterClass ) { \n\t$F221457 $F19827 ( filteredFields ) ; \n\tfor ( Field f : fields ) { \n\t\tif ( ( filterClass == null ) || filterClass . isAssignableFrom ( f . getType ( ) ) ) $F207 ( filteredFields , f ) } \n\treturn filteredFields ; \n\t} \n"}, {"code": "public static void renderPairwiseOrthogonal ( ComplexVector vec1 , ComplexVector vec2 ) { \n\tIncompatibleVectorsException . checkVectorsCompatible ( vec1 , vec2 ) ; \n\tif ( vec1 . getOpMode ( ) != ComplexVector . Mode . CARTESIAN ) vec1 . toCartesian ( ) ; \n\tif ( vec2 . getOpMode ( ) != ComplexVector . Mode . CARTESIAN ) vec2 . toCartesian ( ) ; \n\t$F5415 coordinates1 = vec1 . getCoordinates ( ) ; \n\t$F5415 coordinates2 = vec2 . getCoordinates ( ) ; \n\tfor ( int i = NUM00 ; \n\ti < vec1 . getDimension ( ) * NUM00 ; \n\ti += NUM00 ) { \n\t\tdouble resultThisPair = coordinates1 [ i ] * coordinates2 [ i ] ; \n\t\tresultThisPair += coordinates1 [ i + NUM00 ] * coordinates2 [ i + NUM00 ] ; \n\t\tdouble norm1 = coordinates1 [ i ] * coordinates1 [ i ] ; \n\t\tnorm1 += coordinates1 [ i + NUM00 ] * coordinates1 [ i + NUM00 ] ; \n\t\tdouble norm2 = coordinates2 [ i ] * coordinates2 [ i ] ; \n\t\tnorm2 += coordinates2 [ i + NUM00 ] * coordinates2 [ i + NUM00 ] ; \n\t\t$F84202 ( norm1 , Math ) $F84202 ( norm2 , Math ) double cosine = NUM00 ; \n\t\tif ( norm1 > NUM00 && norm2 > NUM00 ) cosine = resultThisPair / ( norm1 * norm2 ) ; \n\t\tcoordinates1 [ i ] = ( float ) ( coordinates1 [ i ] - cosine * coordinates2 [ i ] ) ; \n\t\tcoordinates1 [ i + NUM00 ] = ( float ) ( coordinates1 [ i + NUM00 ] - cosine * coordinates2 [ i + NUM00 ] ) ; \n\t\t} \n\t} \n"}, {"code": "protected SimpleJavaFileObject ( URI uri , Kind kind ) { \n\turi . getClass ( ) ; \n\tkind . getClass ( ) ; \n\tif ( $F101354 ( uri ) ) $F11416 ( uri ) this . uri = uri ; \n\tthis . kind = kind ; \n\t} \n"}, {"code": "public int increment ( int val ) { \n\tif ( val < NUM00 ) { \n\t\treturn decrement ( - val ) ; \n\t\t} \n\t$F790 ( lock ) int newValue = ( value += val ) ; \n\t$F704 ( lock ) return newValue ; \n\t} \n"}, {"code": "protected void releaseInternal $F72 { \n\tContextTranslator . pts_1cfa_map = null ; \n\tContextTranslator . objs_1cfa_map = null ; \n\t} \n"}, {"code": "public static void addConstraintViolationsRDF ( List < ConstraintViolation > cvs , Model result , boolean createSource ) { \n\tfor ( ConstraintViolation cv : cvs ) { \n\t\tResource r = result . createResource ( SPIN . ConstraintViolation ) ; \n\t\t$F105671 ( message , cv ) if $F22 ( message ) { \n\t\t\tr . addProperty ( RDFS . label , message ) ; \n\t\t\t} \n\t\tif ( cv . getRoot ( ) != null ) { \n\t\t\tr . addProperty ( SPIN . violationRoot , cv . getRoot ( ) ) ; \n\t\t\t} \n\t\tr . addProperty ( SPIN . violationLevel , cv . getLevel ( ) ) ; \n\t\tfor ( SimplePropertyPath path : cv . getPaths ( ) ) { \n\t\t\tif ( path instanceof ObjectPropertyPath ) { \n\t\t\t\tr . addProperty ( SPIN . violationPath , path . getPredicate ( ) ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tResource p = result . createResource ( SP . ReversePath ) ; \n\t\t\t\tp . addProperty ( SP . path , path . getPredicate ( ) ) ; \n\t\t\t\tr . addProperty ( SPIN . violationPath , p ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( createSource && cv . getSource ( ) != null ) { \n\t\t\tr . addProperty ( SPIN . violationSource , cv . getSource ( ) ) ; \n\t\t\t} \n\t\tif ( $F61599 ( cv ) ) { \n\t\t\tr . addProperty ( SPIN . violationValue , cv . getValue ( ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public Page copy ( long version ) { \n\tPage newPage = create ( map , version , keys , values , children , totalCount , getMemory ( ) ) ; \n\tremovePage ( ) ; \n\tnewPage . cachedCompare = cachedCompare ; \n\treturn newPage ; \n\t} \n"}, {"code": "public boolean startBusytone ( final String busytoneUriType ) { \n\t$F4975 ( busytoneUriType , _BOOL ) try { \n\t\t$F12258 ( Log , TAG , busytoneUriType ) if ( mBusytone != null ) { \n\t\t\tif ( mBusytone . isPlaying ( ) ) $F35346 ( Log , TAG , _BOOL ) else $F5795 ( stopBusytone ) } \n\t\tUri busytoneUri ; \n\t\tMap data = $F532 ; \n\t\t$F16824 ( data ) if $F3057 ( busytoneUriType ) { \n\t\t\tmBusytone = new myToneGenerator ( myToneGenerator . BUSY ) ; \n\t\t\tmBusytone . startPlay ( data ) ; \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\telse { \n\t\t\tbusytoneUri = getBusytoneUri ( busytoneUriType ) ; \n\t\t\tif ( busytoneUri == null ) $F35346 ( Log , TAG , _BOOL ) } \n\t\tmBusytone = new myMediaPlayer $F72 ; \n\t\t$F545 ( data , busytoneUri ) $F545 ( data , _BOOL ) data . put ( NUM00 , AudioManager . STREAM_VOICE_CALL ) ; \n\t\tsetMediaPlayerEvents ( ( MediaPlayer ) mBusytone , NUM00 ) ; \n\t\tmBusytone . startPlay ( data ) ; \n\t\treturn _BOOL ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F13527 ( Log , TAG ) Log . d ( TAG , e . getMessage ( ) ) ; \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "private String moveToFolder $F2236 ( file , folder ) { \n\t$F15885 ( source , file ) final File destination = new File ( folder + File . separator + source . getName ( ) ) ; \n\tLog . i ( TAG , file + NUM00 + destination . getAbsolutePath ( ) ) ; \n\ttry { \n\t\tFileUtils . moveFile ( source , destination ) ; \n\t\t} \n\tcatch ( final IOException e ) $F13955 ( Log , TAG ) $F33744 ( destination ) } \n"}, {"code": "public void putAll ( Map m ) { \n\t$F304893 ( keys , m ) for ( $F2774 ( iter , keys ) ) { \n\t\t$F8877 ( key , iter ) $F299378 ( put , key , m ) } \n\t} \n"}, {"code": "public void readOldFormat ( Reader reader ) throws Exception { \n\tStreamTokenizer tokenizer ; \n\tint currentToken ; \n\tdouble firstIndex , secondIndex , weight ; \n\ttokenizer = new StreamTokenizer ( reader ) ; \n\tinitialize ( ) ; \n\ttokenizer . commentChar ( NUM00 ) ; \n\ttokenizer . eolIsSignificant ( _BOOL ) ; \n\twhile ( StreamTokenizer . TT_EOF != ( currentToken = tokenizer . nextToken ( ) ) ) { \n\t\tif ( currentToken == StreamTokenizer . TT_EOL ) $F1448 if ( currentToken != StreamTokenizer . TT1BER ) { \n\t\t\tthrow new Exception $F3487 ; \n\t\t\t} \n\t\tfirstIndex = tokenizer . nval ; \n\t\tif ( ! Utils . eq ( ( int ) firstIndex , firstIndex ) ) { \n\t\t\tthrow new Exception $F3487 ; \n\t\t\t} \n\t\tif ( ( int ) firstIndex >= size ( ) ) $F9451 if ( StreamTokenizer . TT_EOF == ( currentToken = tokenizer . nextToken ( ) ) ) $F9451 if ( currentToken == StreamTokenizer . TT_EOL ) $F9451 if ( currentToken != StreamTokenizer . TT1BER ) { \n\t\t\tthrow new Exception $F3487 ; \n\t\t\t} \n\t\tsecondIndex = tokenizer . nval ; \n\t\tif ( ! Utils . eq ( ( int ) secondIndex , secondIndex ) ) { \n\t\t\tthrow new Exception $F3487 ; \n\t\t\t} \n\t\tif ( ( int ) secondIndex >= size ( ) ) $F9451 if ( ( int ) secondIndex == ( int ) firstIndex ) $F9451 if ( StreamTokenizer . TT_EOF == ( currentToken = tokenizer . nextToken ( ) ) ) $F9451 if ( currentToken == StreamTokenizer . TT_EOL ) $F9451 if ( currentToken != StreamTokenizer . TT1BER ) { \n\t\t\tthrow new Exception $F3487 ; \n\t\t\t} \n\t\tweight = tokenizer . nval ; \n\t\tif ( ! Utils . gr ( weight , NUM00 ) ) $F9451 setCell ( ( int ) firstIndex , ( int ) secondIndex , new Double ( weight ) ) ; \n\t\t} \n\t} \n"}, {"code": "protected String handleDate ( ResultSet rs , int columnIndex , String dateFormatString ) throws SQLException { \n\t$F212479 date = rs . getDate ( columnIndex ) ; \n\tString value = null ; \n\tif ( date != null ) { \n\t\t$F13438 ( dateFormat , dateFormatString ) value = dateFormat . format ( date ) ; \n\t\t} \n\treturn value ; \n\t} \n"}, {"code": "$F1 public RandomAccessStream openFileRandomAccess $F72 throws IOException { \n\tif ( _isWindows && isAux ( ) ) throw new FileNotFoundException $F3362 ( _file ) ; \n\treturn new FileRandomAccessStream ( new RandomAccessFile $F111492 ( getFile ) ) ; \n\t} \n"}, {"code": "public QDate ( TimeZone zone , long now ) { \n\t_timeZone = zone ; \n\tif ( zone == _gmtTimeZone ) { \n\t\t_stdName = _gmtStdName ; \n\t\t_dstName = _gmtDstName ; \n\t\t} \n\telse if ( zone == _localTimeZone ) { \n\t\t_stdName = _localStdName ; \n\t\t_dstName = _localDstName ; \n\t\t} \n\telse { \n\t\t_stdName = _timeZone . getDisplayName ( _BOOL , TimeZone . SHORT ) ; \n\t\t_dstName = _timeZone . getDisplayName ( _BOOL , TimeZone . SHORT ) ; \n\t\t} \n\t_calendar = new GregorianCalendar ( _timeZone ) ; \n\tif ( zone == _gmtTimeZone ) setGMTTime ( now ) ; \n\telse setLocalTime ( now ) ; \n\t} \n"}, {"code": "public static void serialize ( Serializable obj , ByteArrayOutputStream bout ) { \n\ttry { \n\t\t$F7054 ( out , bout ) out . writeObject ( obj ) ; \n\t\t$F59 ( out ) } \n\tcatch ( IOException e ) { \n\t\tthrow new IllegalStateException ( NUM00 + obj , e ) ; \n\t\t} \n\t} \n"}, {"code": "$F117302 ( bits , result , i , edifactValue , bitsLeft ) "}, {"code": "public static Stream $F4 wordsOf ( String text ) { \n\trequireNonNull ( text ) ; \n\treturn WORDS . splitAsStream ( text ) ; \n\t} \n"}, {"code": "public static String upper ( String s ) { \n\treturn $F65405 ( s , Locale ) ; \n\t} \n"}, {"code": "private void accept ( Socket socket ) { \n\tlog . info ( NUM00 , socket . getInetAddress ( ) ) ; \n\ttry { \n\t\tInetAddress serverAddress = dns . getAddress ( NUM00 ) ; \n\t\ttry ( Connection clientConnection = new Connection ( socket ) ; \n\t\tConnection serverConnection = new Connection ( new Socket ( serverAddress , CLASH_PORT ) ) ) { \n\t\t\tProxySession session = ProxySession . newSession ( services . getMessageFactory ( ) , clientConnection , serverConnection , filterChain ) ; \n\t\t\t$F10635 ( log , socket ) VillageAnalyzer . logSession ( session ) ; \n\t\t\t} \n\t\t} \n\tcatch ( IOException e ) { \n\t\tlog . info ( NUM00 , socket . getInetAddress ( ) , e . toString ( ) ) ; \n\t\t} \n\t$F53155 ( socket ) } \n"}, {"code": "public void removeProcessListener ( ProcessListener l ) $F106 ( listenerList , l ) "}, {"code": "public final static boolean isValidJavaIdentifier ( String s ) { \n\t$F32021 ( s , _BOOL ) $F7782 ( c , s ) if ( ! Character . isJavaIdentifierStart ( c [ NUM00 ] ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tfor ( $F1139 ( i , c ) ) { \n\t\tif ( ! Character . isJavaIdentifierPart ( c [ i ] ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "final void sendHelp $F72 { \n\t$F5 help = help ( ) ; \n\t$F19233 ( help ) XmppMsg msg = new XmppMsg $F72 ; \n\tmsg . addStringArray ( $F10148 ( help ) ) ; \n\tsend ( msg ) ; \n\t} \n"}, {"code": "protected void init $F72 { \n\t$F973 ( LOG ) $F657 ( startTime , System ) bughouseSoundKeys = getSoundsKeys ( NUM00 ) ; \n\tsoundKeys = getSoundsKeys ( NUM00 ) ; \n\tinitSoundPlayer ( ) ; \n\tinitSpeech ( ) ; \n\tLOG . info ( $F81482 ( System , startTime ) ) ; \n\t} \n"}, {"code": "private static void runConfClient ( final ProcessBuilder pb ) throws Exception { \n\tint exitCode = - NUM00 ; \n\ttry { \n\t\t$F111135 ( process , pb ) exitCode = process . waitFor ( ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\t$F5197 ( log , e ) exitCode = NUM00 ; \n\t\tthrow e ; \n\t\t} \n\tcatch ( Exception e ) $F526539 ( log , e ) switch ( exitCode ) { \n\t\tcase SUCCESS : $F597 case ERROR_CODE_CANNOT_DOWNLOAD_CONF : throw new Exception ( NUM00 + exitCode + NUM00 ) ; \n\t\tcase ERROR_CODE_EXPIRED_CONF : throw new Exception ( NUM00 + exitCode + NUM00 ) ; \n\t\tcase ERROR_CODE_INVALID_SIGNATURE_VALUE : throw new Exception ( NUM00 + exitCode + NUM00 ) ; \n\t\tcase ERROR_CODE_INTERNAL : throw new Exception ( NUM00 + exitCode + NUM00 ) ; \n\t\t$F1267 throw new Exception ( NUM00 + NUM00 + exitCode + NUM00 + NUM00 + NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "$F169786 ( mv , n , visibleTypeAnnotations , i , an , _BOOL , invisibleTypeAnnotations ) "}, {"code": "public boolean doCheckSiteStatus ( URL url ) { \n\t$F19232 ( debug , url ) URLChecker checker = getURLChecker ( url ) ; \n\tif ( checker != null && ( checker . getStatus ( ) == URLStatus . STATUS_UNKNOWN ) ) { \n\t\tsynchronized ( checker ) { \n\t\t\t$F65148 ( checker ) $F8071 ( checker ) } \n\t\tsynchronized ( urlCheckers ) { \n\t\t\turlCheckers . remove ( getThreadName ( url ) ) ; \n\t\t\t} \n\t\tdebug . error ( NUM00 + NUM00 + getThreadName ( url ) ) ; \n\t\treturn _BOOL ; \n\t\t} \n\telse if ( ( checker != null ) && ( checker . getStatus ( ) == URLStatus . STATUS_AVAILABLE ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\telse { \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "protected void fill $F72 throws IOException { \n\tensureOpen ( ) ; \n\t$F81136 ( len , in , buf ) if ( len == - NUM00 ) { \n\t\tthrow new EOFException $F580 ; \n\t\t} \n\t$F81138 ( inf , buf , len ) } \n"}, {"code": "@ Ignore ( NUM00 ) $F32043 public void testP2PViewChangeReject $F72 throws Exception { \n\tfinal Host host = Host . getHost ( NUM00 ) ; \n\tfinal VM peer2 = host . getVM ( NUM00 ) ; \n\tfinal VM peer3 = host . getVM ( NUM00 ) ; \n\tCredentialGenerator gen = new LdapUserCredentialGenerator $F72 ; \n\t$F10089 ( gen ) Properties extraProps = gen . getSystemProperties ( ) ; \n\tString authenticator = gen . getAuthenticator ( ) ; \n\tString authInit = gen . getAuthInit ( ) ; \n\tif ( extraProps == null ) { \n\t\t$F65625 ( extraProps ) } \n\tCredentialGenerator gen2 = new DummyCredentialGenerator $F72 ; \n\t$F10089 ( gen2 ) Properties extraProps2 = gen2 . getSystemProperties ( ) ; \n\tString authenticator2 = gen2 . getAuthenticator ( ) ; \n\tif ( extraProps2 == null ) { \n\t\t$F65625 ( extraProps2 ) } \n\t$F2697 ( props ) int port = getRandomAvailablePort ( SOCKET ) ; \n\tfinal String locators = getIPLiteral ( ) + NUM00 + port + NUM00 ; \n\tprops . setProperty ( SECURITY_PEER_AUTH_INIT , authInit ) ; \n\tprops . setProperty ( SECURITY_PEER_AUTHENTICATOR , authenticator ) ; \n\tProperties credentials = gen . getValidCredentials ( NUM00 ) ; \n\tProperties javaProps = gen . getJavaProperties ( ) ; \n\tprops . putAll ( credentials ) ; \n\tprops . putAll ( extraProps ) ; \n\tstartTheLocator ( props , javaProps , port ) ; \n\ttry { \n\t\t$F65625 ( props ) $F9266 ( props , MCAST_PORT ) props . setProperty ( LOCATORS , locators ) ; \n\t\tprops . setProperty ( SECURITY_PEER_AUTH_INIT , authInit ) ; \n\t\tprops . setProperty ( SECURITY_PEER_AUTHENTICATOR , authenticator2 ) ; \n\t\tcredentials = gen . getValidCredentials ( NUM00 ) ; \n\t\tProperties javaProps2 = gen2 . getJavaProperties ( ) ; \n\t\tprops . putAll ( credentials ) ; \n\t\tprops . putAll ( extraProps2 ) ; \n\t\tcreateDS ( props , javaProps2 ) ; \n\t\t$F65625 ( props ) $F9266 ( props , MCAST_PORT ) props . setProperty ( LOCATORS , locators ) ; \n\t\tprops . setProperty ( SECURITY_PEER_AUTH_INIT , authInit ) ; \n\t\tprops . setProperty ( SECURITY_PEER_AUTHENTICATOR , authenticator ) ; \n\t\tcredentials = gen . getValidCredentials ( NUM00 ) ; \n\t\tjavaProps = gen . getJavaProperties ( ) ; \n\t\tprops . putAll ( credentials ) ; \n\t\tprops . putAll ( extraProps ) ; \n\t\tcreateDS ( peer2 , props , javaProps ) ; \n\t\tcreateDS ( peer3 , props , javaProps ) ; \n\t\tpause ( NUM00 ) ; \n\t\t$F188761 ( locatorVM ) verifyMembers ( NUM00 ) ; \n\t\t$F188761 ( peer2 ) $F188761 ( peer3 ) disconnectFromDS ( ) ; \n\t\tpause ( NUM00 ) ; \n\t\t$F188761 ( locatorVM ) $F188761 ( peer2 ) $F188761 ( peer3 ) $F188761 ( peer2 ) pause ( NUM00 ) ; \n\t\t$F188761 ( locatorVM ) $F188761 ( peer3 ) $F188761 ( peer3 ) pause ( NUM00 ) ; \n\t\t$F188761 ( locatorVM ) } \n\tfinally { \n\t\t$F188761 ( locatorVM ) } \n\t} \n"}, {"code": "private boolean overrides ( ExecutableElement e , $F6969 clazz , String method ) { \n\tTypeElement clazzElt = elements . getTypeElement ( clazz . getCanonicalName ( ) ) ; \n\tassert clazzElt != null ; \n\tfor ( ExecutableElement elt : ElementFilter . methodsIn ( clazzElt . getEnclosedElements ( ) ) ) { \n\t\tif ( elt . getSimpleName ( ) . contentEquals ( method ) && elements . overrides ( e , elt , clazzElt ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public Element signXML ( Document doc , String certAlias , String algorithm , String idAttrName , String id , boolean includeCert , String xpath ) throws XMLSignatureException { \n\treturn signXMLUsingKeyPass ( doc , certAlias , null , algorithm , idAttrName , id , includeCert , xpath ) ; \n\t} \n"}, {"code": "$F1654 ( attrs ) "}, {"code": "protected Socket __openPassiveDataConnection ( int command , String arg ) throws IOException , FtpExceptionCanNotHaveDataConnection { \n\tSocket socket ; \n\tif ( pasv ( ) != FTPReply . ENTERING_PASSIVE_MODE ) throw new FtpExceptionCanNotHaveDataConnection ( NUM00 + getReplyString ( ) ) ; \n\ttry { \n\t\t__parsePassiveModeReply ( getReplyStrings ( ) [ NUM00 ] ) ; \n\t\t} \n\tcatch ( MalformedServerReplyException e ) { \n\t\tthrow new FtpExceptionCanNotHaveDataConnection $F1783 ( e ) ; \n\t\t} \n\tsocket = _socketFactory_ . createSocket ( __passiveHost , __passivePort ) ; \n\tif ( ! FTPReply . isPositivePreliminary ( sendCommand ( command , arg ) ) ) { \n\t\t$F59 ( socket ) $F1274 } \n\tif ( __remoteVerificationEnabled && ! verifyRemote ( socket ) ) { \n\t\tInetAddress host1 , host2 ; \n\t\thost1 = socket . getInetAddress ( ) ; \n\t\thost2 = getRemoteAddress ( ) ; \n\t\t$F59 ( socket ) throw new FtpExceptionCanNotHaveDataConnection ( NUM00 + host1 . getHostAddress ( ) + NUM00 + host2 . getHostAddress ( ) + NUM00 ) ; \n\t\t} \n\tif ( __dataTimeout >= NUM00 ) socket . setSoTimeout ( __dataTimeout ) ; \n\treturn socket ; \n\t} \n"}, {"code": "public Object invoke ( Object proxy , Method method , $F131 args ) throws Throwable { \n\tMonitor mon = null ; \n\tif ( params . isInterfaceEnabled && params . isEnabled ) { \n\t\tmon = MonitorFactory . start ( labelerInt . getSummaryLabel ( method ) ) ; \n\t\t} \n\ttry { \n\t\tif $F1238 ( method , EQUALS_METHOD ) return Boolean . valueOf ( equals ( args [ NUM00 ] ) ) ; \n\t\telse $F89561 ( method , monitoredObj , args ) } \n\tcatch ( InvocationTargetException e ) { \n\t\tif ( params . isEnabled ) { \n\t\t\tString sqlMessage = NUM00 ; \n\t\t\tString detailStackTrace = null ; \n\t\t\t$F31570 ( rootCause , e ) if ( rootCause instanceof SQLException ) { \n\t\t\t\tSQLException sqlException = ( SQLException ) rootCause ; \n\t\t\t\tsqlMessage = NUM00 + sqlException . getErrorCode ( ) + NUM00 + sqlException . getSQLState ( ) ; \n\t\t\t\t} \n\t\t\ttrackException ( rootCause , method , sqlMessage ) ; \n\t\t\t} \n\t\tthrow e . getCause ( ) ; \n\t\t} \n\tfinally { \n\t\tif ( mon != null ) $F5191 ( mon ) } \n\t} \n"}, {"code": "public static void copyStream ( final InputStream fromStream , final OutputStream toStream ) throws IOException { \n\t$F12496 ( buffer ) int bytesRead ; \n\t$F29757 ( bytesRead , fromStream , buffer , toStream ) } \n"}, {"code": "public static int probRound ( double value , Random rand ) { \n\tif ( value >= NUM00 ) { \n\t\tdouble lower = Math . floor ( value ) ; \n\t\tdouble prob = value - lower ; \n\t\tif ( rand . nextDouble ( ) < prob ) { \n\t\t\treturn ( int ) lower + NUM00 ; \n\t\t\t} \n\t\telse $F23220 ( lower ) } \n\telse { \n\t\tdouble lower = Math . floor ( Math . abs ( value ) ) ; \n\t\tdouble prob = Math . abs ( value ) - lower ; \n\t\tif ( rand . nextDouble ( ) < prob ) { \n\t\t\treturn - ( ( int ) lower + NUM00 ) ; \n\t\t\t} \n\t\telse { \n\t\t\treturn - ( int ) lower ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void loadStringValue ( JTextField comp , final String elementName ) { \n\t$F62203 ( propValue , properties , elementName ) if $F1032 ( propValue ) $F59925 ( comp , propValue ) } \n"}, {"code": "public static Ed25519GroupElement toRepresentation ( final Ed25519GroupElement g , final CoordinateSystem newCoordinateSystem ) { \n\tfinal BigInteger x ; \n\tfinal BigInteger y ; \n\tfinal BigInteger gX = toBigInteger ( g . getX ( ) . encode ( ) ) ; \n\tfinal BigInteger gY = toBigInteger ( g . getY ( ) . encode ( ) ) ; \n\tfinal BigInteger gZ = toBigInteger ( g . getZ ( ) . encode ( ) ) ; \n\tfinal BigInteger gT = null == g . getT ( ) ? null : toBigInteger ( g . getT ( ) . encode ( ) ) ; \n\tswitch ( g . getCoordinateSystem ( ) ) { \n\t\tcase AFFINE : x = gX ; \n\t\ty = gY ; \n\t\t$F597 case P2 : case P3 : x = gX . multiply ( gZ . modInverse ( Ed25519Field . P ) ) . mod ( Ed25519Field . P ) ; \n\t\ty = gY . multiply ( gZ . modInverse ( Ed25519Field . P ) ) . mod ( Ed25519Field . P ) ; \n\t\t$F597 case P1xP1 : x = gX . multiply ( gZ . modInverse ( Ed25519Field . P ) ) . mod ( Ed25519Field . P ) ; \n\t\tassert gT != null ; \n\t\ty = gY . multiply ( gT . modInverse ( Ed25519Field . P ) ) . mod ( Ed25519Field . P ) ; \n\t\t$F597 case CACHED : x = gX . subtract ( gY ) . multiply ( gZ . multiply ( new BigInteger $F580 ) . modInverse ( Ed25519Field . P ) ) . mod ( Ed25519Field . P ) ; \n\t\ty = gX . add ( gY ) . multiply ( gZ . multiply ( new BigInteger $F580 ) . modInverse ( Ed25519Field . P ) ) . mod ( Ed25519Field . P ) ; \n\t\t$F597 case PRECOMPUTED : x = gX . subtract ( gY ) . multiply ( new BigInteger $F580 . modInverse ( Ed25519Field . P ) ) . mod ( Ed25519Field . P ) ; \n\t\ty = gX . add ( gY ) . multiply ( new BigInteger $F580 . modInverse ( Ed25519Field . P ) ) . mod ( Ed25519Field . P ) ; \n\t\t$F597 $F1267 $F53552 } \n\tswitch ( newCoordinateSystem ) { \n\t\tcase AFFINE : return Ed25519GroupElement . affine ( toFieldElement ( x ) , toFieldElement ( y ) , Ed25519Field . ONE ) ; \n\t\tcase P2 : return Ed25519GroupElement . p2 ( toFieldElement ( x ) , toFieldElement ( y ) , Ed25519Field . ONE ) ; \n\t\tcase P3 : return Ed25519GroupElement . p3 ( toFieldElement ( x ) , toFieldElement ( y ) , Ed25519Field . ONE , toFieldElement ( x . multiply ( y ) . mod ( Ed25519Field . P ) ) ) ; \n\t\tcase P1xP1 : return Ed25519GroupElement . p1xp1 ( toFieldElement ( x ) , toFieldElement ( y ) , Ed25519Field . ONE , Ed25519Field . ONE ) ; \n\t\tcase CACHED : return Ed25519GroupElement . cached ( toFieldElement ( y . add ( x ) . mod ( Ed25519Field . P ) ) , toFieldElement ( y . subtract ( x ) . mod ( Ed25519Field . P ) ) , Ed25519Field . ONE , toFieldElement ( D . multiply ( new BigInteger $F580 ) . multiply ( x ) . multiply ( y ) . mod ( Ed25519Field . P ) ) ) ; \n\t\tcase PRECOMPUTED : return Ed25519GroupElement . precomputed ( toFieldElement ( y . add ( x ) . mod ( Ed25519Field . P ) ) , toFieldElement ( y . subtract ( x ) . mod ( Ed25519Field . P ) ) , toFieldElement ( D . multiply ( new BigInteger $F580 ) . multiply ( x ) . multiply ( y ) . mod ( Ed25519Field . P ) ) ) ; \n\t\t$F1267 $F53552 } \n\t} \n"}, {"code": "private void endFormals $F72 { \n\t$F430955 ( hasFormals , _BOOL , buf ) } \n"}, {"code": "public Builder label ( char label ) { \n\tthis . label = Character . toUpperCase ( label ) ; \n\treturn this ; \n\t} \n"}, {"code": "public static boolean isLetterOrDigit ( char c ) { \n\treturn Character . isLetterOrDigit ( c ) ; \n\t} \n"}, {"code": "public static int putLong ( $F96 bytes , int offset , long val ) { \n\tif ( littleEndian ) { \n\t\t$F410031 ( val , Long ) } \n\ttheUnsafe . putLong ( bytes , offset + BYTE_ARRAY_BASE_OFFSET , val ) ; \n\treturn offset + Bytes . SIZEOF_LONG ; \n\t} \n"}, {"code": "private Instruction scheduleScalarDefsEarly ( $F75495 e , Instruction earlyPos , Instruction inst ) { \n\twhile $F1444 ( e ) { \n\t\t$F75499 ( op , e ) Instruction def = definingInstruction ( op ) ; \n\t\tscheduleEarly ( def ) ; \n\t\tif ( def . isBranch ( ) ) def = dominanceSuccessor ( def , inst ) ; \n\t\tearlyPos = maxDominatorDepth ( def , earlyPos ) ; \n\t\t} \n\treturn earlyPos ; \n\t} \n"}, {"code": "public void makeUnique $F28786 ( columns , conflictPolicy ) { \n\tuniques . add ( CONSTRAINT_UNIQUE_ + TextUtils . join ( NUM00 , columns ) + _UNIQUE__ + TextUtils . join ( NUM00 , columns ) + __ON_CONFLICT_ + conflictPolicy + COMMA ) ; \n\t} \n"}, {"code": "default $F4203 void forEachMatchingFieldNameWithBoolean ( String regex , BiConsumer $F91737 function ) { \n\tforEachMatchingFieldNameWithBoolean ( Pattern . compile ( regex ) , NUM00 , function ) ; \n\t} \n"}, {"code": "protected boolean isValidDomain ( String domain ) { \n\t$F1150 ( ipDomainMatcher , IP_DOMAIN_PATTERN , domain ) if $F24133 ( ipDomainMatcher ) { \n\t\t$F4377 ( inetAddressValidator , InetAddressValidator ) return inetAddressValidator . isValid ( ipDomainMatcher . group ( NUM00 ) ) ; \n\t\t} \n\t$F156 ( domainValidator , DomainValidator , allowLocal ) return domainValidator . isValid ( domain ) || domainValidator . isValidTld ( domain ) ; \n\t} \n"}, {"code": "public void exit $F72 { \n\tcancel ( ) ; \n\tfinal float radius = lerp ( NUM00 , mOuterRadius , mTweenRadius ) ; \n\tfinal float remaining ; \n\tif ( mAnimRadius != null && mAnimRadius . isRunning ( ) ) { \n\t\tremaining = mOuterRadius - radius ; \n\t\t} \n\telse { \n\t\tremaining = mOuterRadius ; \n\t\t} \n\tfinal int radiusDuration = ( int ) ( NUM00 * Math . sqrt ( remaining / ( WAVE_TOUCH_UP_ACCELERATION + WAVE_TOUCH_DOWN_ACCELERATION ) * mDensity ) + NUM00 ) ; \n\tfinal int opacityDuration = ( int ) ( NUM00 * mOpacity / WAVE_OPACITY_DECAY_VELOCITY + NUM00 ) ; \n\texitSoftware ( radiusDuration , opacityDuration ) ; \n\t} \n"}, {"code": "public void testSealedObject2 $F72 throws Exception { \n\ttry { \n\t\tnew SealedObject $F8320 $F845 ; \n\t\tfail ( NUM00 + NUM00 ) ; \n\t\t} \n\t$F1214 String secret = NUM00 ; \n\tCipher $F83645 ( cipher ) ; \n\tSealedObject so1 = new SealedObject ( secret , cipher ) ; \n\tSealedObject so2 = new SealedObject ( so1 ) $F845 ; \n\tassertEquals ( NUM00 + NUM00 , secret , so2 . getObject ( cipher ) ) ; \n\tassertEquals ( $F38 , so1 . getAlgorithm ( ) , so2 . getAlgorithm ( ) ) ; \n\t} \n"}, {"code": "$F1 public void handleRequestBody ( SolrQueryRequest req , SolrQueryResponse rsp ) throws ParseException , IOException , SyntaxError { \n\tString deletionQuery = getDeletionQuery ( ) ; \n\t$F10635 ( LOGGER , deletionQuery ) if ( olderDocumentsExists ( deletionQuery , req , rsp ) ) { \n\t\tUpdateRequestProcessor processor = getProcessor ( req , rsp ) ; \n\t\tdeleteOldDocuments ( deletionQuery , processor , req ) ; \n\t\tcommitDeletions ( processor , req ) ; \n\t\t} \n\t} \n"}, {"code": "public < V extends Comparable $F42625 > OptionalLong maxBy ( LongFunction $F2193 keyExtractor ) { \n\tObjLongBox $F2193 result = collect ( $F32718 ) ; \n\treturn result . a == null ? OptionalLong . empty ( ) : OptionalLong . of ( result . b ) ; \n\t} \n"}, {"code": "public void queryAndCompareShards ( SolrParams params ) throws Exception { \n\tupdateMappingsFromZk ( jettys , clients ) ; \n\t$F72154 ( shards , shardToJetty ) for ( String shard : shards ) { \n\t\tqueryAndCompareReplicas ( params , shard ) ; \n\t\t} \n\t} \n"}, {"code": "public int indexOf ( int ch ) $F41330 ( indexOf , ch ) "}, {"code": "private Watcher initWatcher ( SolrZkClient zkClient ) { \n\twrappedWatcher = new BufferStateWatcher $F72 ; \n\treturn zkClient . wrapWatcher ( wrappedWatcher ) ; \n\t} \n"}, {"code": "public Configuration $F72 $F5795 ( super ) "}, {"code": "public static $F9340 $F15228 of ( K k1 , V v1 , K k2 , V v2 , K k3 , V v3 , K k4 , V v4 , K k5 , V v5 , K k6 , V v6 , K k7 , V v7 ) { \n\tMap map = of ( ) ; \n\tmap . put ( k1 , v1 ) ; \n\tmap . put ( k2 , v2 ) ; \n\tmap . put ( k3 , v3 ) ; \n\tmap . put ( k4 , v4 ) ; \n\tmap . put ( k5 , v5 ) ; \n\tmap . put ( k6 , v6 ) ; \n\tmap . put ( k7 , v7 ) ; \n\treturn map ; \n\t} \n"}, {"code": "public long longAt ( int index ) { \n\tlb . position ( index ) ; \n\t$F1521 ( lb ) } \n"}, {"code": "private String startSetToString $F72 { \n\t$F280 ( FString ) boolean didPrint ; \n\t$F318890 ( m_starting , getStartSet ) for ( $F1139 ( i , m_starting ) ) { \n\t\tdidPrint = _BOOL ; \n\t\tif ( ( m_hasClass == _BOOL ) || ( m_hasClass == _BOOL && i != m_classIndex ) ) { \n\t\t\tFString . append ( ( m_starting [ i ] + NUM00 ) ) ; \n\t\t\tdidPrint = _BOOL ; \n\t\t\t} \n\t\tif ( i == $F33765 ( m_starting ) ) $F86 ( FString ) else { \n\t\t\t$F12290 ( didPrint , FString ) } \n\t\t} \n\t$F92 ( FString ) } \n"}, {"code": "public static String makeTagClassName ( String componentFamily , String rendererType ) { \n\t$F1338 ( componentFamily ) String tagClassName = componentFamily ; \n\tif ( rendererType != null ) { \n\t\tif $F2137 ( componentFamily , rendererType ) { \n\t\t\ttagClassName = tagClassName + rendererType ; \n\t\t\t} \n\t\t} \n\treturn tagClassName + NUM00 ; \n\t} \n"}, {"code": "public void registerService $F71526 ( serviceName , createTemplate , activate ) throws $F52710 { \n\tif $F6299 ( debug ) { \n\t\tdebug . message ( NUM00 + serviceName + NUM00 + createTemplate + NUM00 + activate + NUM00 ) ; \n\t\t} \n\tdsServices . registerService ( super . token , super . entryDN , serviceName ) ; \n\tSet serviceStatus = getAttribute ( SERVICE_STATUS_ATTRIBUTE ) ; \n\tif ( ! serviceStatus . equals ( Collections . EMPTY_SET ) ) { \n\t\t$F10531 ( iter , serviceStatus ) while $F2921 ( iter ) { \n\t\t\t$F2778 ( status , iter ) if $F8397 ( status , serviceName ) { \n\t\t\t\tObject $F1868 = { \n\t\t\t\t\tserviceName } \n\t\t\t\t; \n\t\t\t\tthrow new AMException ( AMSDKBundle . getString ( NUM00 , args , super . locale ) , NUM00 , args ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse { \n\t\t$F266988 ( serviceStatus ) } \n\tserviceStatus . add ( serviceName ) ; \n\tsetAttribute ( SERVICE_STATUS_ATTRIBUTE , serviceStatus ) ; \n\ttry $F5795 ( store ) catch ( AMException le ) { \n\t\ttry { \n\t\t\tSet objectClass = getAttribute ( NUM00 ) ; \n\t\t\t$F19232 ( debug , objectClass ) if $F94439 ( objectClass ) { \n\t\t\t\t$F18793 ( objectClass ) setAttribute ( NUM00 , objectClass ) ; \n\t\t\t\tsetAttribute ( SERVICE_STATUS_ATTRIBUTE , serviceStatus ) ; \n\t\t\t\tstore ( ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tthrow le ; \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\tif $F6299 ( debug ) $F218635 ( debug , e ) throw le ; \n\t\t\t} \n\t\t} \n\tif ( createTemplate ) { \n\t\ttry { \n\t\t\tif ( AMServiceUtils . serviceHasSubSchema ( super . token , serviceName , SchemaType . POLICY ) ) { \n\t\t\t\tcreateTemplate ( AMTemplate . POLICY_TEMPLATE , serviceName , null ) ; \n\t\t\t\t} \n\t\t\tif ( AMServiceUtils . serviceHasSubSchema ( super . token , serviceName , SchemaType . DYNAMIC ) ) { \n\t\t\t\tcreateTemplate ( AMTemplate . DYNAMIC_TEMPLATE , serviceName , null ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( SMSException smsex ) { \n\t\t\tthrow new AMException ( AMSDKBundle . getString ( NUM00 , super . locale ) , NUM00 ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static void assertAlmostEquals ( double expected , double actual , int decimals ) { \n\tassertAlmostEquals ( null , new Double ( expected ) , new Double ( actual ) , decimals ) ; \n\t} \n"}, {"code": "private static int snapVertical ( Collection < ConstraintWidget > widgets , ConstraintWidget widget , ConstraintAnchor anchor , int position , ArrayList < SnapCandidate > snapCandidates ) { \n\tSnapCandidate candidate = new SnapCandidate $F72 ; \n\tConstraintHandle handle = WidgetInteractionTargets . constraintHandle ( anchor ) ; \n\t$F1933 ( handle , position ) handle . setDrawY ( position ) ; \n\tSnapPlacement . snapAnchor ( widgets , widget , anchor , candidate ) ; \n\tif ( candidate . target != null ) { \n\t\tConstraintHandle targetHandle = WidgetInteractionTargets . constraintHandle ( candidate . target ) ; \n\t\tint ty = candidate . y ; \n\t\tif ( targetHandle != null ) { \n\t\t\tty = targetHandle . getDrawY ( ) ; \n\t\t\t} \n\t\tposition = ty + candidate . margin ; \n\t\tsnapCandidates . add ( candidate ) ; \n\t\t} \n\treturn position ; \n\t} \n"}, {"code": "public int send ( OutputStream out ) throws IOException { \n\tout . write ( this . fileBuff , this . offset , this . length ) ; \n\t$F1082 } \n"}, {"code": "private double sin ( double angle ) { \n\twhile ( angle >= NUM00 ) { \n\t\tangle -= NUM00 ; \n\t\t} \n\tdouble value = ( angle / NUM00 * Math . PI ) ; \n\treturn Math . sin ( value ) ; \n\t} \n"}, {"code": "public static String last $F22381 ( list , delimiter , ignoreEmpty ) { \n\tif $F4329 ( StringUtil , list ) $F1278 $F1749 ( len , list ) $F1469 del ; \n\tif $F4329 ( StringUtil , delimiter ) { \n\t\tdel = new char $F21902 ; \n\t\t} \n\telse del = delimiter . toCharArray ( ) ; \n\tint index ; \n\tint x ; \n\twhile ( _BOOL ) { \n\t\tindex = - NUM00 ; \n\t\tfor ( $F1139 ( i , del ) ) { \n\t\t\tx = list . lastIndexOf ( del [ i ] ) ; \n\t\t\t$F15468 ( x , index ) } \n\t\tif ( index == - NUM00 ) { \n\t\t\treturn list ; \n\t\t\t} \n\t\telse if ( index + NUM00 == len ) { \n\t\t\tif ( ! ignoreEmpty ) $F1278 $F198483 ( list , len ) len -- ; \n\t\t\t} \n\t\telse $F26088 ( list , index ) } \n\t} \n"}, {"code": "private void tryParseTypeAttribute ( IDOMElement element ) { \n\tIDOMAttr typeAttr = ( IDOMAttr ) UiBinderXmlModelUtilities . getTypeAttribute ( element ) ; \n\t$F2329 ( typeAttr ) IRegion valueRegion = XmlUtilities . getAttributeValueRegion ( typeAttr ) ; \n\t$F2329 ( valueRegion ) $F61361 ( fqType , typeAttr ) $F2329 ( fqType ) final IType type = JavaModelSearch . findType ( javaProject , fqType ) ; \n\tif ( ! JavaModelSearch . isValidElement ( type ) ) { \n\t\tproblemMarkerManager . setTypeUndefinedError ( valueRegion , fqType ) ; \n\t\t} \n\telse { \n\t\tif ( UiBinderXmlModelUtilities . isStyleElement ( element ) ) { \n\t\t\tIType cssResourceType = ClientBundleUtilities . findCssResourceType ( javaProject ) ; \n\t\t\tif ( cssResourceType != null ) { \n\t\t\t\ttry { \n\t\t\t\t\tif ( ! JavaUtilities . isSubtype ( cssResourceType , type ) ) { \n\t\t\t\t\t\tproblemMarkerManager . setNotCssResourceSubtypeError ( valueRegion , fqType ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\tcatch ( JavaModelException e ) { \n\t\t\t\t\tGWTPluginLog . logWarning ( e , NUM00 ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tjavaTypeReferences . add ( fqType ) ; \n\t} \n"}, {"code": "private void clearDictionaryCache $F72 { \n\tMap < String , Dictionary > dictionaryCaches = surrogateKeyGen . getDictionaryCaches ( ) ; \n\tList < Dictionary > $F159472 ( reverseDictionaries , dictionaryCaches ) ; \n\tfor ( $F2277 ( i , reverseDictionaries ) ) { \n\t\tDictionary dictionary = reverseDictionaries . get ( i ) ; \n\t\t$F725 ( dictionary ) } \n\t} \n"}, {"code": "$F35762 ( newScrollValue , itemDimension , initialMotionValue , lastMotionValue , getPullToRefreshScrollDirection , HORIZONTAL , mInitialMotionX , mLastMotionX , VERTICAL , mInitialMotionY , mLastMotionY , mCurrentMode , PULL_FROM_END , Math , FRICTION , getFooterSize , PULL_FROM_START , getHeaderSize , setHeaderScroll , isRefreshing , scale , mFooterLayout , mHeaderLayout , mState , State , setState ) "}, {"code": "public static List < MRelationType > retrieveTypes ( final PO po , final int windowId ) { \n\tif ( po . get_KeyColumns ( ) . length != NUM00 ) { \n\t\tlogger . severe ( po + NUM00 + po . get_KeyColumns ( ) . length + NUM00 ) ; \n\t\tPORelationException . throwWrongKeyColumnCount ( po ) ; \n\t\t} \n\tfinal String keyColumn = po . get_KeyColumns ( ) [ NUM00 ] ; \n\tfinal int colId = MColumn . getColumn_ID ( po . get_TableName ( ) , keyColumn ) ; \n\tfinal PreparedStatement pstmt = DB . prepareStatement ( SQL , po . get_TrxName ( ) ) ; \n\tResultSet rs = null ; \n\ttry { \n\t\tpstmt . setInt ( NUM00 , po . get_Table_ID ( ) ) ; \n\t\t$F47 ( pstmt , colId ) $F47578 ( rs , pstmt ) final List < MRelationType > result = evalResultSet ( po , windowId , rs ) ; \n\t\tlogger . info ( $F26062 ( result , po ) ) ; \n\t\treturn result ; \n\t\t} \n\tcatch ( SQLException e ) { \n\t\tlogger . severe ( e . getMessage ( ) ) ; \n\t\tthrow new AdempiereException ( e ) ; \n\t\t} \n\tfinally $F161384 ( DB , rs , pstmt ) } \n"}, {"code": "public JdpJmxPacket $F97 ( data ) throws JdpException { \n\tJdpPacketReader reader ; \n\treader = new JdpPacketReader ( data ) ; \n\t$F2539 p = reader . getDiscoveryDataAsMap ( ) ; \n\t$F1729 ( sId , p , UUID_KEY ) this . id = ( sId == null ) ? null : UUID . fromString ( sId ) ; \n\tthis . jmxServiceUrl = p . get ( JMX_SERVICE_URL_KEY ) ; \n\tthis . mainClass = p . get ( MAIN_CLASS_KEY ) ; \n\tthis . instanceName = p . get ( INSTANCE_NAME_KEY ) ; \n\tthis . processId = p . get ( PROCESS_ID_KEY ) ; \n\tthis . rmiHostname = p . get ( RMI_HOSTNAME_KEY ) ; \n\tthis . broadcastInterval = p . get ( BROADCAST_INTERVAL_KEY ) ; \n\t} \n"}, {"code": "private UidRange parseUidRange ( String range ) throws DecodingException { \n\t$F1384 ( pos , range ) try { \n\t\tif ( pos == - NUM00 ) { \n\t\t\tif ( $F1276 ( range ) && $F4431 ( range ) ) { \n\t\t\t\treturn new UidRange ( MessageUid . MAX_VALUE ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tlong value = parseUnsignedInteger ( range ) ; \n\t\t\t\treturn new UidRange ( MessageUid . of ( value ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tlong val1 = $F12723 ( parseUnsignedInteger , range , pos ) ; \n\t\t\tlong $F172609 ( val2 , parseUnsignedInteger , range , pos ) ; \n\t\t\tif ( val1 == Long . MAX_VALUE && val2 == Long . MAX_VALUE ) { \n\t\t\t\treturn new UidRange ( MessageUid . MAX_VALUE ) ; \n\t\t\t\t} \n\t\t\telse if ( val1 <= val2 ) { \n\t\t\t\treturn new UidRange ( MessageUid . of ( val1 ) , MessageUid . of ( val2 ) ) ; \n\t\t\t\t} \n\t\t\telse if ( val1 == Long . MAX_VALUE ) { \n\t\t\t\treturn new UidRange ( MessageUid . of ( val2 ) , MessageUid . MAX_VALUE ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\treturn new UidRange ( MessageUid . of ( val2 ) , MessageUid . of ( val1 ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tcatch ( NumberFormatException e ) { \n\t\tthrow new DecodingException ( HumanReadableText . INVALID_MESSAGESET , NUM00 , e ) ; \n\t\t} \n\t} \n"}, {"code": "public void addFXGLListener ( FXGLListener listener ) $F207 ( systemListeners , listener ) "}, {"code": "public void addDefinition ( String definition ) { \n\tif $F20899 ( StringUtils , definition ) $F207 ( definitions , definition ) } \n"}, {"code": "$F1 public void receiveEvent ( ClientStateInformation information ) { \n\tif ( information . getState ( ) != currentState ) { \n\t\t$F556 ( logger , information ) if ( information . getState ( ) == ClientState . SEARCH ) { \n\t\t\t$F3224 ( searchStartTime , System ) for ( SequenceOutputVariableFactory $F1011 factory : sequenceOutputVariableFactories . values ( ) ) { \n\t\t\t\tfactory . setStartTime ( searchStartTime ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tOutputVariable $F17803 time = new OutputVariable $F17803 ( $F2989 ( currentState ) , System . currentTimeMillis ( ) - currentStateStarted ) ; \n\t\t$F20063 ( outputVariables , time ) currentState = information . getState ( ) ; \n\t\t$F3224 ( currentStateStarted , System ) } \n\t} \n"}, {"code": "public void testCase11 $F72 { \n\t$F70249 $F10679 int aSign = NUM00 ; \n\tint bSign = - NUM00 ; \n\t$F161334 $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F10683 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F10686 ( assertEquals , result ) } \n"}, {"code": "public void addBugCode ( BugCode bugCode ) $F207 ( bugCodeList , bugCode ) "}, {"code": "$F1 public final void write ( int b ) { \n\tif ( this . ignoreWrites ) $F665 checkIfWritable ( ) ; \n\tensureCapacity ( NUM00 ) ; \n\t$F180945 ( buffer , b ) } \n"}, {"code": "public void testNestedAllocationContexts $F72 { \n\tfinal IAllocationContext context = manager . newAllocationContext ( _BOOL ) ; \n\tfinal String test = NUM00 ; \n\tfinal long addr1 = allocate ( manager , context , test ) ; \n\tfinal long addr2 = allocate ( manager , context , test ) ; \n\tassertTrue ( addr1 != addr2 ) ; \n\tfinal String res = getString ( addr1 ) ; \n\t$F28249 ( assertTrue , res , test ) manager . free ( addr1 , context ) ; \n\tfinal long addr3 = allocate ( manager , context , test ) ; \n\tassertTrue ( addr1 != addr3 ) ; \n\tmanager . detachContext ( context ) ; \n\tfinal IAllocationContext context2 = manager . newAllocationContext ( _BOOL ) ; \n\tfinal long addr4 = allocate ( manager , context2 , test ) ; \n\tassertTrue ( addr1 == addr4 ) ; \n\t} \n"}, {"code": "public static String underlinesToCamelCase ( String string ) { \n\t$F80469 ( sb , string ) $F1749 ( n , string ) int i = NUM00 ; \n\tboolean upcaseNext = _BOOL ; \n\tfor ( ; \n\ti < n ; \n\ti ++ ) { \n\t\t$F1280 ( c , string , i ) if ( c == NUM00 ) { \n\t\t\tupcaseNext = _BOOL ; \n\t\t\t} \n\t\telse { \n\t\t\tif ( upcaseNext ) { \n\t\t\t\t$F186161 ( c , Character ) } \n\t\t\tupcaseNext = _BOOL ; \n\t\t\tsb . append ( c ) ; \n\t\t\t} \n\t\t} \n\t$F92 ( sb ) } \n"}, {"code": "protected BestMatchFinder ( String pattern ) { \n\t$F21936 ( searchPattern , pattern ) } \n"}, {"code": "public int indexOf ( Object key ) { \n\treturn key == null ? indexOfNull ( ) : indexOf ( key , key . hashCode ( ) ) ; \n\t} \n"}, {"code": "public long nextActionMillis ( long now , long nextRetryTimeMillis ) { \n\tfor ( FileDownloadInfo info : downloads ) { \n\t\tlong individualRetryTimeMillis = getNextActionMillisFor ( now , info ) ; \n\t\t$F106734 ( nextRetryTimeMillis , Math , individualRetryTimeMillis ) } \n\treturn nextRetryTimeMillis ; \n\t} \n"}, {"code": "$F73603 ( desc , c , pop , Type ) "}, {"code": "public Integer countPagesContainingTemplateNames $F24643 ( templateNames ) throws WikiApiException $F8587 ( countFilteredPages , templateNames , _BOOL ) "}, {"code": "static URL fixPureQueryTargets ( URL base , String target ) throws MalformedURLException { \n\tif $F14943 ( target ) $F260311 ( base , target ) $F14393 ( basePath , base ) String baseRightMost = NUM00 ; \n\t$F24867 ( baseRightMostIdx , basePath ) if ( baseRightMostIdx != - NUM00 ) $F78003 ( baseRightMost , basePath , baseRightMostIdx ) if $F3106 ( target ) target = baseRightMost + target ; \n\t$F260311 ( base , target ) } \n"}, {"code": "synchronized void add ( Object obj ) { \n\t$F73441 ( objList , obj ) } \n"}, {"code": "public void sort $F72 $F57005 ( Collections , individuals , PERFORMANCE_COMPARATOR ) "}, {"code": "void freeInterval ( SpillLocationInterval i ) $F207 ( freeIntervals , i ) "}, {"code": "private void checkAndWriteDictionaryChunkToFile $F72 throws IOException { \n\tif $F29395 ( oneDictionaryChunkList , dictionary_one_chunk_size ) $F9099 ( writeDictionaryFile , createChunkList ) } \n"}, {"code": "private void ctrlSelect ( D nodeData ) { \n\tint insertionIndex = getInsertionIndex ( nodeData ) ; \n\tinsertAndSelectNode ( nodeData , insertionIndex , ! $F115302 ( nodeData , selectedNodes , insertionIndex ) ) ; \n\t} \n"}, {"code": "private void readObject ( ObjectInputStream ois ) throws $F6427 { \n\t$F96 asn1EncPrincipal = ( $F96 ) ois . readObject ( ) ; \n\t$F96 encRealm = ( $F96 ) ois . readObject ( ) ; \n\ttry { \n\t\tRealm realmObject = new Realm ( new DerValue ( encRealm ) ) ; \n\t\tPrincipalName krb5Principal = new PrincipalName ( new DerValue ( asn1EncPrincipal ) , realmObject ) ; \n\t\t$F6947 ( realm , realmObject ) $F6947 ( fullName , krb5Principal ) nameType = krb5Principal . getNameType ( ) ; \n\t\t} \n\tcatch ( Exception e ) $F5615 ( e ) } \n"}, {"code": "private static int readSwappedInteger ( final DataInputStream input ) throws IOException { \n\tfinal int value1 = input . readByte ( ) ; \n\tfinal int value2 = input . readByte ( ) ; \n\tfinal int value3 = input . readByte ( ) ; \n\tfinal int value4 = input . readByte ( ) ; \n\treturn $F74254 ( value1 ) + $F74254 ( value2 ) + $F74254 ( value3 ) + $F74254 ( value4 ) ; \n\t} \n"}, {"code": "private void consumePreNestedScroll ( int dx , int dy , $F2027 consumed ) { \n\tif ( mOverScrollEffect == OverScrollEffect . BOUNCE && mUnconsumedOverScrollOffset != NUM00 ) { \n\t\tint destOffset = mUnconsumedOverScrollOffset - dy ; \n\t\tif ( ! MathUtils . sameSign ( destOffset , mUnconsumedOverScrollOffset ) ) { \n\t\t\tdestOffset = NUM00 ; \n\t\t\t} \n\t\telse if $F45017 ( Math , destOffset , mUnconsumedOverScrollOffset ) { \n\t\t\tdestOffset = mUnconsumedOverScrollOffset ; \n\t\t\t} \n\t\tconsumed [ NUM00 ] = NUM00 ; \n\t\tconsumed [ NUM00 ] = mUnconsumedOverScrollOffset - destOffset ; \n\t\tmUnconsumedOverScrollOffset = destOffset ; \n\t\tsetScrollingOffset ( getUnconsumedScrollingOffset ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "$F91084 "}, {"code": "public StrBuilder replace ( final int startIndex , int endIndex , final String replaceStr ) { \n\tendIndex = validateRange ( startIndex , endIndex ) ; \n\tfinal int insertLen = ( replaceStr == null ? NUM00 : replaceStr . length ( ) ) ; \n\treplaceImpl ( startIndex , endIndex , endIndex - startIndex , replaceStr , insertLen ) ; \n\treturn this ; \n\t} \n"}, {"code": "$F172853 ( closeFile , _BOOL ) "}, {"code": "public boolean isValid ( int value ) { \n\treturn min <= value && value <= max ; \n\t} \n"}, {"code": "public PluginsInfo info $F72 { \n\treturn info ; \n\t} \n"}, {"code": "public void firePropertyChange $F36827 ( propertyName , oldValue , newValue ) $F71527 ( firePropertyChange , propertyName , Integer , oldValue , newValue ) "}, {"code": "static ArrayList < Field > allFields $F45488 ( clazz ) { \n\tfinal ArrayList < Field > $F204 ( res ) ; \n\t$F16270 ( cl , clazz ) while ( cl != null ) { \n\t\tfinal $F16271 fields = cl . getDeclaredFields ( ) ; \n\t\tCollections . addAll ( res , fields ) ; \n\t\t$F7852 ( cl ) } \n\treturn res ; \n\t} \n"}, {"code": "private void updateWeatherStates $F72 { \n\tboolean changed = temperature . update ( ) ; \n\tchanged |= rain . update ( ) ; \n\tchanged |= fog . update ( ) ; \n\tchanged |= thunder . update ( ) ; \n\t$F8801 ( changed , updateZones ) } \n"}, {"code": "public static RenderLoops makeRenderLoops ( SurfaceType src , CompositeType comp , SurfaceType dst ) { \n\tRenderLoops loops = new RenderLoops $F72 ; \n\tloops . drawLineLoop = DrawLine . locate ( src , comp , dst ) ; \n\tloops . fillRectLoop = FillRect . locate ( src , comp , dst ) ; \n\tloops . drawRectLoop = DrawRect . locate ( src , comp , dst ) ; \n\tloops . drawPolygonsLoop = DrawPolygons . locate ( src , comp , dst ) ; \n\tloops . drawPathLoop = DrawPath . locate ( src , comp , dst ) ; \n\tloops . fillPathLoop = FillPath . locate ( src , comp , dst ) ; \n\tloops . fillSpansLoop = FillSpans . locate ( src , comp , dst ) ; \n\tloops . fillParallelogramLoop = FillParallelogram . locate ( src , comp , dst ) ; \n\tloops . drawParallelogramLoop = DrawParallelogram . locate ( src , comp , dst ) ; \n\tloops . drawGlyphListLoop = DrawGlyphList . locate ( src , comp , dst ) ; \n\tloops . drawGlyphListAALoop = DrawGlyphListAA . locate ( src , comp , dst ) ; \n\tloops . drawGlyphListLCDLoop = DrawGlyphListLCD . locate ( src , comp , dst ) ; \n\treturn loops ; \n\t} \n"}, {"code": "public void edit ( Object plotCanvas ) { \n\tString _label = JOptionPane . showInputDialog ( ( PlotCanvas ) plotCanvas , NUM00 , label ) ; \n\t$F25302 ( _label , setLegend ) } \n"}, {"code": "protected boolean excludeFile ( String file ) { \n\t$F397 ( excluded , _BOOL ) $F13712 ( iter , excluded ) while $F2921 ( iter ) if ( file . endsWith ( iter . next ( ) ) ) return _BOOL ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "public Builder deleteUserType $F72 $F18794 ( deleteFields , this ) "}, {"code": "public final static boolean endsWithIgnoreCase ( String str , String end ) { \n\t$F80928 ( strLength , str ) $F80928 ( endLength , end ) if ( endLength > strLength ) return _BOOL ; \n\tfor ( $F9993 ( i , endLength ) ) { \n\t\tif ( ScannerHelper . toLowerCase ( end . charAt ( endLength - i ) ) != ScannerHelper . toLowerCase ( str . charAt ( strLength - i ) ) ) return _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "$F73303 ( axis , trans , prevImageSize , imageSize , prevViewSize , viewSize , drawableSize , m , Matrix , percentage , Math ) "}, {"code": "$F130385 ( c , internalOut ) "}, {"code": "private < T extends ClientRequestResult > $F9884 executeRequest ( final Collection $F17803 ids , $F98259 ( clazz ) , final ClientRequestReportListener reportListener , final String requestQueue ) { \n\t$F980 ( LOGGER ) ClientRequestImpl $F4203 clientRequest = new ClientRequestImpl $F4203 ( clazz ) ; \n\tIterator $F17803 it = ids . iterator ( ) ; \n\tCollection < Future < $F9884 > > results = new ArrayList < Future < $F9884 > > $F72 ; \n\tint counter = NUM00 ; \n\twhile $F2921 ( it ) { \n\t\twhile ( it . hasNext ( ) && counter < maxRequestSize ) { \n\t\t\tclientRequest . addTagId ( it . next ( ) ) ; \n\t\t\tcounter ++ ; \n\t\t\t} \n\t\tRequestValuesTask $F4203 task = new RequestValuesTask $F4203 ( clientRequest , reportListener , requestQueue ) ; \n\t\tresults . add ( executor . submit ( task ) ) ; \n\t\tclientRequest = new ClientRequestImpl $F4203 ( clazz ) ; \n\t\tcounter = NUM00 ; \n\t\t} \n\t$F9884 finalCollection = new $F5676 $F72 ; \n\tfor ( Future < $F9884 > result : results ) { \n\t\ttry { \n\t\t\tfinalCollection . addAll ( result . get ( ) ) ; \n\t\t\t} \n\t\tcatch ( InterruptedException e ) $F202031 ( LOGGER , e ) catch ( ExecutionException e ) $F202031 ( LOGGER , e ) } \n\t$F980 ( LOGGER ) return finalCollection ; \n\t} \n"}, {"code": "public static $F8435 classNamesToMapping $F24643 ( labels ) { \n\t$F139284 ( mapping ) for ( $F2277 ( i , labels ) ) { \n\t\tmapping . put ( labels . get ( i ) , i ) ; \n\t\t} \n\treturn mapping ; \n\t} \n"}, {"code": "public static String shortNumber ( int number ) { \n\tif ( number >= NUM00 ) { \n\t\tint hundred = number % NUM00 / NUM00 ; \n\t\tif ( hundred != NUM00 ) return String . format ( NUM00 , number / NUM00 ) + NUM00 ; \n\t\telse return ( number / NUM00 ) + NUM00 ; \n\t\t} \n\telse return number + NUM00 ; \n\t} \n"}, {"code": "public static void putUnsignedShort ( ByteBuffer bb , int v ) { \n\tbb . putShort ( ( short ) ( v & NUM00 ) ) ; \n\t} \n"}, {"code": "public static String readFileToString ( File f ) throws IOException { \n\t$F29429 ( sw ) IO . copyAndCloseBoth ( Common . asReaderUTF8Lenient ( new FileInputStream ( f ) ) , sw ) ; \n\t$F92 ( sw ) } \n"}, {"code": "public void test_wrap_ByteBuffer$ByteBuffer_05 $F72 { \n\tString host = NUM00 ; \n\tint port = NUM00 ; \n\t$F30909 ( bb , ByteBuffer ) $F30907 ( bbA , ByteBuffer ) SSLEngine sse = getEngine ( host , port ) ; \n\tsse . setUseClientMode ( _BOOL ) ; \n\ttry { \n\t\tSSLEngineResult res = sse . wrap ( bbA , bb ) ; \n\t\t$F128468 ( assertEquals , res ) $F128471 ( assertEquals , res ) } \n\t$F17395 ( fail , ex ) } \n"}, {"code": "$F13436 ( node , count , capacity , _BOOL , l , last , first , notEmpty ) "}, {"code": "public void testTopicDinamicallyIncludedBehavior $F72 throws Exception { \n\tstartAllBrokers ( ) ; \n\tDestination dest = createDestination ( NUM00 , _BOOL ) ; \n\tMessageConsumer clientA = createConsumer ( NUM00 , dest ) ; \n\tMessageConsumer clientB = createConsumer ( NUM00 , dest ) ; \n\t$F165308 ( Thread ) sendMessages ( NUM00 , dest , MESSAGE_COUNT ) ; \n\tMessageIdList msgsA = getConsumerMessages ( NUM00 , clientA ) ; \n\tmsgsA . waitForMessagesToArrive ( MESSAGE_COUNT ) ; \n\t$F165310 ( assertEquals , MESSAGE_COUNT , msgsA ) MessageIdList msgsB = getConsumerMessages ( NUM00 , clientB ) ; \n\tmsgsB . waitForMessagesToArrive ( MESSAGE_COUNT ) ; \n\tassertEquals ( NUM00 , msgsB . getMessageCount ( ) ) ; \n\t} \n"}, {"code": "private File createCaptureFile ( int encodingType , String fileName ) { \n\tif $F2979 ( fileName ) { \n\t\tfileName = NUM00 ; \n\t\t} \n\tif ( encodingType == JPEG ) $F2365 ( fileName ) else if ( encodingType == PNG ) $F2365 ( fileName ) else $F18931 ( encodingType ) return new File ( getTempDirectoryPath ( ) , fileName ) ; \n\t} \n"}, {"code": "$F1 public void actionPerformed ( ActionEvent e ) { \n\tObject o ; \n\to = e . getSource ( ) ; \n\tif ( o == m_MenuFileOpen ) $F5795 ( loadFile ) else if ( o == m_MenuFileSave ) $F5795 ( saveFile ) else if ( o == m_MenuFileSaveAs ) $F5795 ( saveFileAs ) else if ( o == m_MenuFileClose ) $F5795 ( closeFile ) else if ( o == m_MenuFileCloseAll ) $F5795 ( closeAllFiles ) else if ( o == m_MenuFileProperties ) $F5795 ( showProperties ) else if ( o == m_MenuFileExit ) $F5795 ( close ) else if ( o == m_MenuEditUndo ) $F5795 ( undo ) else if ( o == m_MenuEditCopy ) $F5795 ( copyContent ) else if ( o == m_MenuEditSearch ) $F5795 ( search ) else if ( o == m_MenuEditClearSearch ) $F5795 ( clearSearch ) else if ( o == m_MenuEditDeleteAttribute ) { \n\t\tdeleteAttribute ( _BOOL ) ; \n\t\t} \n\telse if ( o == m_MenuEditDeleteAttributes ) { \n\t\tdeleteAttribute ( _BOOL ) ; \n\t\t} \n\telse if ( o == m_MenuEditRenameAttribute ) $F5795 ( renameAttribute ) else if ( o == m_MenuEditAttributeAsClass ) $F5795 ( attributeAsClass ) else if ( o == m_MenuEditDeleteInstance ) { \n\t\tdeleteInstance ( _BOOL ) ; \n\t\t} \n\telse if ( o == m_MenuEditDeleteInstances ) { \n\t\tdeleteInstance ( _BOOL ) ; \n\t\t} \n\telse if ( o == m_MenuEditSortInstances ) $F5795 ( sortInstances ) else if ( o == m_MenuViewAttributes ) $F5795 ( showAttributes ) else if ( o == m_MenuViewValues ) $F5795 ( showValues ) else $F83461 ( o , m_MenuViewOptimalColWidths , setOptimalColWidths ) updateMenu ( ) ; \n\t} \n"}, {"code": "public boolean validateToken ( EndpointSpecification endpointSpecification , SecurityToken toBeValidatedToken ) throws SoapSTSConsumerException { \n\tSTSClient client = getSTSClient ( stsInstanceWsdlUrl , endpointSpecification . serviceQName , endpointSpecification . portQName ) ; \n\tclient . setTokenType ( STSConstants . STATUS ) ; \n\ttry { \n\t\tclient . validateSecurityToken ( toBeValidatedToken ) ; \n\t\treturn _BOOL ; \n\t\t} \n\tcatch ( TrustException e ) { \n\t\treturn _BOOL ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new SoapSTSConsumerException $F2808 ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public static String stripFunctionTags ( String label ) { \n\tif $F56559 ( label ) return $F31599 ( label ) ; \n\telse return label ; \n\t} \n"}, {"code": "$F1 public void playNewVideo ( MetaData currentItemMetaData , VideoPlayerView videoPlayerView , String videoUrl ) { \n\tif ( SHOW_LOGS ) Logger . v ( TAG , NUM00 + videoPlayerView + NUM00 + mCurrentPlayer + NUM00 + videoPlayerView ) ; \n\tmPlayerHandler . pauseQueueProcessing ( TAG ) ; \n\tboolean currentPlayerIsActive = mCurrentPlayer == videoPlayerView ; \n\tboolean isAlreadyPlayingTheFile = mCurrentPlayer != null && videoUrl . equals ( mCurrentPlayer . getVideoUrlDataSource ( ) ) ; \n\t$F12265 ( SHOW_LOGS , Logger , TAG , isAlreadyPlayingTheFile ) $F12265 ( SHOW_LOGS , Logger , TAG , currentPlayerIsActive ) if ( currentPlayerIsActive ) { \n\t\tif ( isInPlaybackState ( ) && isAlreadyPlayingTheFile ) { \n\t\t\tif ( SHOW_LOGS ) Logger . v ( TAG , NUM00 + videoPlayerView + NUM00 + mCurrentPlayerState ) ; \n\t\t\t} \n\t\telse { \n\t\t\tstartNewPlayback ( currentItemMetaData , videoPlayerView , videoUrl ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tstartNewPlayback ( currentItemMetaData , videoPlayerView , videoUrl ) ; \n\t\t} \n\tmPlayerHandler . resumeQueueProcessing ( TAG ) ; \n\tif ( SHOW_LOGS ) Logger . v ( TAG , NUM00 + videoPlayerView + NUM00 + videoUrl ) ; \n\t} \n"}, {"code": "private void addTraceAndType ( String name ) { \n\tif $F4257 ( tracesType , name ) { \n\t\ttraces . add ( createTrace ( name , TraceType . REAL ) ) ; \n\t\ttracesType . put ( name , TraceType . REAL ) ; \n\t\t} \n\telse { \n\t\ttraces . add ( createTrace ( name , tracesType . get ( name ) ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static boolean isReservedStreamName ( String name ) $F75994 ( name ) "}, {"code": "public static VolumeMount [ ] formatOriginalContainerVolumeMount ( LogDraft logDraft ) { \n\tList < VolumeMount > $F204 ( volumeMounts ) ; \n\tint idxSuffix = NUM00 ; \n\tfor ( LogItemDraft logItemDraft : logDraft . getLogItemDrafts ( ) ) { \n\t\tif ( logItemDraft . isAutoCollect ( ) || logItemDraft . isAutoDelete ( ) ) { \n\t\t\tVolumeMount volumeMount = new VolumeMount $F72 ; \n\t\t\t$F145048 ( volumeMount , idxSuffix ) volumeMount . setMountPath ( LogItemDraft . getLogParentPath ( logItemDraft . getLogPath ( ) ) ) ; \n\t\t\tvolumeMounts . add ( volumeMount ) ; \n\t\t\tidxSuffix ++ ; \n\t\t\t} \n\t\t} \n\treturn volumeMounts . toArray ( new VolumeMount $F10277 ) ; \n\t} \n"}, {"code": "public static double dnorm ( double x ) { \n\treturn Math . exp ( - x * x / NUM00 ) * PSI ; \n\t} \n"}, {"code": "public static long checksumCRC32 ( File file ) throws IOException { \n\t$F64750 ( crc ) checksum ( file , crc ) ; \n\t$F233317 ( crc ) } \n"}, {"code": "private void cmd_annotateDifference $F72 { \n\tBigDecimal previousValue , actualValue , difference ; \n\tpreviousValue = ( BigDecimal ) v_previousBalance . getValue ( ) ; \n\tactualValue = ( BigDecimal ) v_ActualBalance . getValue ( ) ; \n\tdifference = actualValue . subtract ( previousValue ) ; \n\tMCashBook cashBook = new MCashBook ( p_ctx , p_pos . getC_CashBook_ID ( ) , null ) ; \n\tTimestamp today = TimeUtil . getDay ( System . currentTimeMillis ( ) ) ; \n\tMCash cash = MCash . get ( p_ctx , cashBook . getC_CashBook_ID ( ) , today , null ) ; \n\tif ( cash != null && cash . get_ID ( ) != NUM00 && difference . compareTo ( cash . getStatementDifference ( ) ) != NUM00 ) { \n\t\tMCashLine cl = new MCashLine ( cash ) ; \n\t\tcl . setCashType ( MCashLine . CASHTYPE_Difference ) ; \n\t\tcl . setAmount ( difference ) ; \n\t\tcl . setDescription ( $F9206 ( Msg , p_pos ) + previousValue + NUM00 + actualValue ) ; \n\t\t$F45240 ( cl ) } \n\tcash = MCash . get ( p_pos . getCtx ( ) , p_pos . getC_CashBook_ID ( ) , today , null ) ; \n\tv_previousBalance . setValue ( cash . getEndingBalance ( ) ) ; \n\tv_ActualBalance . setValue ( Env . ZERO ) ; \n\tv_difference . setValue ( Env . ZERO ) ; \n\t} \n"}, {"code": "public void write ( OutputStream out , java . util . List < Figure > figures ) throws IOException { \n\t$F1634 drawingRect = null ; \n\tfor ( Figure f : figures ) { \n\t\tif ( drawingRect == null ) { \n\t\t\tdrawingRect = f . getBounds ( ) ; \n\t\t\t} \n\t\telse { \n\t\t\tdrawingRect . add ( f . getBounds ( ) ) ; \n\t\t\t} \n\t\t} \n\t$F34721 ( tx ) tx . translate ( - Math . min ( NUM00 , drawingRect . x ) , - Math . min ( NUM00 , drawingRect . y ) ) ; \n\twrite ( out , figures , tx , new Dimension ( ( int ) ( $F67900 ( Math , drawingRect ) + drawingRect . width ) , ( int ) ( Math . abs ( drawingRect . y ) + drawingRect . height ) ) ) ; \n\t} \n"}, {"code": "FixedAllocator ( final RWStore store , final int size ) { \n\tm_diskAddr = NUM00 ; \n\tm_store = store ; \n\tm_size = size ; \n\tm_bitSize = calcBitSize ( _BOOL , size , cMinAllocation , cModAllocation ) ; \n\tallocBlockRange = NUM00 * m_bitSize ; \n\tfinal int numBlocks = NUM00 / ( m_bitSize + NUM00 ) ; \n\tm_allocBlocks = new ArrayList < AllocBlock > ( numBlocks ) ; \n\tfor ( $F119 ( i , numBlocks ) ) { \n\t\tm_allocBlocks . add ( new AllocBlock ( NUM00 , m_bitSize , this ) ) ; \n\t\t} \n\tm_freeTransients = NUM00 ; \n\tm_freeBits = NUM00 * m_bitSize * numBlocks ; \n\t} \n"}, {"code": "private void buildGetStorageResponse ( MockCloseableHttpResponse response , URI uri ) throws JAXBException { \n\t$F26605 ( pattern , Pattern ) Matcher matcher = pattern . matcher ( uri . getPath ( ) ) ; \n\tif $F281 ( matcher ) { \n\t\tStorage storage = getNewStorage ( matcher . group ( NUM00 ) ) ; \n\t\tresponse . setEntity ( getHttpEntity ( storage ) ) ; \n\t\t} \n\t} \n"}, {"code": "public void assertEquals $F1947 ( assertID , expected , actual ) { \n\tframework . assertEquals ( this , assertID , expected , actual ) ; \n\t} \n"}, {"code": "public boolean onPreferenceChange ( Preference preference , Object newValue ) { \n\tif ( Boolean . parseBoolean ( SystemProperties . get ( TelephonyProperties . PROPERTY_INECM_MODE ) ) ) $F845 else { \n\t\tsetAirplaneModeOn ( ( Boolean ) newValue ) ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static int estimateBandPassOrder ( int sampleRate , int passBandStart , int passBandEnd , double passBandRippleDb , double stopBandRippleDb ) { \n\tdouble df = ( double ) Math . abs ( passBandEnd - passBandStart ) / ( double ) sampleRate ; \n\tdouble ddp = ( double ) Math . log10 ( passBandRippleDb ) ; \n\tdouble dds = ( double ) Math . log10 ( stopBandRippleDb ) ; \n\tdouble a1 = NUM00 ; \n\tdouble a2 = NUM00 ; \n\tdouble a3 = - NUM00 ; \n\tdouble a4 = NUM00 ; \n\tdouble a5 = - NUM00 ; \n\tdouble a6 = - NUM00 ; \n\tdouble t1 = a1 * ddp * ddp ; \n\tdouble t2 = a2 * ddp ; \n\tdouble t3 = a4 * ddp * ddp ; \n\tdouble t4 = a5 * ddp ; \n\tdouble cinf = dds * ( t1 + t2 + a3 ) + t3 + t4 + a6 ; \n\tdouble ginf = - NUM00 * ( double ) Math . log10 ( passBandRippleDb / stopBandRippleDb ) - NUM00 ; \n\tdouble n = cinf / df + ginf * df + NUM00 ; \n\treturn $F63596 ( Math , n ) ; \n\t} \n"}, {"code": "static public Object stringToValue ( String s ) { \n\t$F29942 ( s ) $F29944 ( s , Boolean ) $F29946 ( s , Boolean ) $F29948 ( s , JSONObject ) $F12685 ( b , s ) if ( $F19295 ( b ) || b == NUM00 || b == NUM00 || b == NUM00 ) { \n\t\tif ( b == NUM00 && $F20 ( s ) && $F66132 ( s ) ) { \n\t\t\ttry { \n\t\t\t\treturn new Integer ( $F30886 ( Integer , s ) ) ; \n\t\t\t\t} \n\t\t\t$F29977 } \n\t\ttry { \n\t\t\tif $F29954 ( s ) $F62107 ( Double , s ) else { \n\t\t\t\t$F29962 ( myLong , s ) if ( myLong . longValue ( ) == myLong . intValue ( ) ) { \n\t\t\t\t\t$F29969 ( myLong ) } \n\t\t\t\telse { \n\t\t\t\t\treturn myLong ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t$F29977 } \n\treturn s ; \n\t} \n"}, {"code": "$F49924 ( out , b , buffer ) "}, {"code": "private $F5415 calcBorderValues $F72 { \n\tfloat max = Integer . MIN_VALUE ; \n\tfloat min = Integer . MAX_VALUE ; \n\tfor ( ChartSet set : chartView . data ) { \n\t\tfor ( ChartEntry e : set . getEntries ( ) ) { \n\t\t\tif ( e . getValue ( ) >= max ) $F37891 ( max , e ) if ( e . getValue ( ) <= min ) $F37891 ( min , e ) } \n\t\t} \n\treturn new float [ ] { \n\t\tmin , max } \n\t; \n\t} \n"}, {"code": "private void parseName ( StringTokenizer st , boolean peer ) { \n\tList vals = new ArrayList $F989 ; \n\touter : while ( _BOOL ) { \n\t\tString cls ; \n\t\tdo { \n\t\t\tif $F49874 ( st ) { \n\t\t\t\t$F59811 } \n\t\t\t$F39710 ( cls , st ) } \n\t\twhile $F3057 ( cls ) ; \n\t\tif ( ! peer && cls . equalsIgnoreCase ( NUM00 ) ) $F144211 ( parseName , st , _BOOL ) if $F3057 ( cls ) { \n\t\t\tif ( peer ) $F825 cls = null ; \n\t\t\tvals = null ; \n\t\t\t} \n\t\tString nm ; \n\t\tdo { \n\t\t\tif $F49874 ( st ) $F825 $F39710 ( nm , st ) } \n\t\twhile $F3057 ( nm ) ; \n\t\tif $F14943 ( nm ) $F825 while $F2364 ( nm ) { \n\t\t\tif $F49874 ( st ) $F825 nm = nm + st . nextToken ( ) ; \n\t\t\t} \n\t\tif $F3057 ( nm ) { \n\t\t\tif ( peer ) $F825 $F4322 ( cls ) nm = null ; \n\t\t\t} \n\t\telse if ( cls == null ) $F825 else $F8994 ( nm ) if ( vals != null ) { \n\t\t\tfor ( $F2198 ( i , vals ) ; \n\t\t\ti > NUM00 ; \n\t\t\t) { \n\t\t\t\tString onm = ( String ) vals . get ( -- i ) ; \n\t\t\t\tString ocls = ( String ) vals . get ( -- i ) ; \n\t\t\t\tif $F1238 ( cls , ocls ) { \n\t\t\t\t\tif ( onm == null || $F1256 ( onm , nm ) ) $F81010 else if ( nm == null ) { \n\t\t\t\t\t\tvals . remove ( i ) ; \n\t\t\t\t\t\tvals . remove ( i ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tvals . add ( cls ) ; \n\t\t\tvals . add ( nm ) ; \n\t\t\t} \n\t\t} \n\t$F10127 ( res ) if ( vals != null ) { \n\t\t$F27731 ( vals ) res = $F10149 ( vals ) ; \n\t\t} \n\tif ( peer ) { \n\t\tthis . peer = res ; \n\t\t} \n\telse { \n\t\tthis . me = res ; \n\t\t} \n\t} \n"}, {"code": "public static Object applyOrCall ( boolean isApply , Context cx , Scriptable scope , Scriptable thisObj , $F131 args ) { \n\tint L = args . length ; \n\tCallable function = getCallable ( thisObj ) ; \n\tScriptable callThis = null ; \n\tif ( L != NUM00 ) { \n\t\tcallThis = toObjectOrNull ( cx , args [ NUM00 ] ) ; \n\t\t} \n\t$F5178 ( callThis , getTopCallScope , cx ) $F131 callArgs ; \n\tif ( isApply ) { \n\t\tcallArgs = L <= NUM00 ? ScriptRuntime . emptyArgs : getApplyArguments ( cx , args [ NUM00 ] ) ; \n\t\t} \n\telse { \n\t\tif ( L <= NUM00 ) { \n\t\t\tcallArgs = ScriptRuntime . emptyArgs ; \n\t\t\t} \n\t\telse { \n\t\t\tcallArgs = new Object [ L - NUM00 ] ; \n\t\t\tSystem . arraycopy ( args , NUM00 , callArgs , NUM00 , L - NUM00 ) ; \n\t\t\t} \n\t\t} \n\treturn function . call ( cx , scope , callThis , callArgs ) ; \n\t} \n"}, {"code": "public void increment $F72 $F26160 ( counter ) "}, {"code": "public static void removeAllChildren ( Node node ) { \n\t$F9040 ( children , node ) for ( int i = NUM00 , length = children . getLength ( ) ; \n\ti < length ; \n\ti ++ ) { \n\t\tnode . removeChild ( children . item ( i ) ) ; \n\t\t} \n\t} \n"}, {"code": "$F32357 ( Class , _BOOL ) "}, {"code": "$F65837 ( node , count , capacity , _BOOL , f , first , last , notEmpty ) "}, {"code": "protected void deploy ( HttpServletResponse response , String contextPath , String warURL ) throws IOException { \n\tString context = contextPath ; \n\tboolean error = _BOOL ; \n\tif ( context == null ) { \n\t\t$F1705 ( file , warURL ) $F20605 ( fileName , file ) if $F8991 ( fileName ) { \n\t\t\tfileName = $F129389 ( fileName ) ; \n\t\t\t} \n\t\tcontext = NUM00 + fileName ; \n\t\t} \n\tif ( getContextHandler ( context ) != null ) { \n\t\tsendError ( response , NUM00 + context ) ; \n\t\terror = _BOOL ; \n\t\t} \n\telse if $F14943 ( context ) { \n\t\tsendError ( response , NUM00 ) ; \n\t\terror = _BOOL ; \n\t\t} \n\tif ( error ) $F932 else { \n\t\t$F57201 ( webappDest , webAppDirectory , context ) URI uri = null ; \n\t\ttry { \n\t\t\turi = new URI ( warURL ) ; \n\t\t\t} \n\t\tcatch ( URISyntaxException e ) { \n\t\t\tsendError ( response , NUM00 + warURL ) ; \n\t\t\tLog . warn ( e ) ; \n\t\t\t$F665 } \n\t\t$F1705 ( webappSource , uri ) $F4647 ( fileInputStream , webappSource ) $F4649 ( fileOutputStream , webappDest ) $F7468 ( i , fileInputStream ) while ( i != - NUM00 ) { \n\t\t\tfileOutputStream . write ( i ) ; \n\t\t\t$F10201 ( i , fileInputStream ) } \n\t\t$F59 ( fileInputStream ) $F1206 ( fileOutputStream ) $F59 ( fileOutputStream ) WebAppContext webappcontext = new WebAppContext $F72 ; \n\t\twebappcontext . setContextPath ( context ) ; \n\t\twebappcontext . setWar ( webappDest . getPath ( ) ) ; \n\t\tchc . addHandler ( webappcontext ) ; \n\t\ttry $F28175 ( webappcontext ) catch ( Exception e ) { \n\t\t\tsendError ( response , NUM00 ) ; \n\t\t\tLog . warn ( e ) ; \n\t\t\t$F665 } \n\t\t} \n\tsendMessage ( response , NUM00 + contextPath ) ; \n\t} \n"}, {"code": "public OutlierResult run ( $F42616 relation ) { \n\tfinal DBIDs ids = relation . getDBIDs ( ) ; \n\tArrayList $F2596 subspaceIndex = buildOneDimIndexes ( relation ) ; \n\tSet $F2590 subspaces = calculateSubspaces ( relation , subspaceIndex , rnd . getSingleThreadedRandom ( ) ) ; \n\tif ( LOG . isVerbose ( ) ) { \n\t\tLOG . verbose ( $F10532 ( subspaces ) ) ; \n\t\t} \n\tList < DoubleRelation > $F204 ( results ) ; \n\tFiniteProgress $F192797 ( prog , LOG , subspaces ) ; \n\tfor ( HiCSSubspace dimset : subspaces ) { \n\t\tif ( LOG . isVerbose ( ) ) { \n\t\t\tLOG . verbose ( NUM00 + dimset ) ; \n\t\t\t} \n\t\tProxyDatabase pdb = new ProxyDatabase ( ids ) ; \n\t\tpdb . addRelation ( new ProjectedView $F200 ( relation , new NumericalFeatureSelection $F2193 ( dimset ) ) ) ; \n\t\tOutlierResult result = outlierAlgorithm . run ( pdb ) ; \n\t\tresults . add ( result . getScores ( ) ) ; \n\t\tLOG . incrementProcessed ( prog ) ; \n\t\t} \n\tLOG . ensureCompleted ( prog ) ; \n\tWritableDoubleDataStore scores = DataStoreUtil . makeDoubleStorage ( relation . getDBIDs ( ) , DataStoreFactory . HINT_STATIC ) ; \n\tDoubleMinMax minmax = new DoubleMinMax $F72 ; \n\tfor ( $F42632 ( iditer , relation ) ) { \n\t\tdouble sum = NUM00 ; \n\t\tfor ( DoubleRelation r : results ) { \n\t\t\t$F42661 ( s , r , iditer ) if $F2292 ( Double , s ) { \n\t\t\t\tsum += s ; \n\t\t\t\t} \n\t\t\t} \n\t\tscores . putDouble ( iditer , sum ) ; \n\t\tminmax . put ( sum ) ; \n\t\t} \n\tOutlierScoreMeta meta = new BasicOutlierScoreMeta ( minmax . getMin ( ) , minmax . getMax ( ) ) ; \n\tDoubleRelation scoreres = new MaterializedDoubleRelation ( NUM00 , NUM00 , scores , relation . getDBIDs ( ) ) ; \n\treturn new OutlierResult ( meta , scoreres ) ; \n\t} \n"}, {"code": "private void addUnitToExternalQualMap ( final $F26425 annoClass ) { \n\tAnnotationMirror mirror = UnitsRelationsTools . buildAnnoMirrorWithNoPrefix ( processingEnv , annoClass ) ; \n\tif ( ! isAliasedAnnotation ( mirror ) ) { \n\t\tString unitClassName = annoClass . getCanonicalName ( ) ; \n\t\tif $F15257 ( externalQualsMap , unitClassName ) $F1717 ( externalQualsMap , unitClassName , annoClass ) } \n\telse { \n\t\t$F26425 baseUnitClass = getBaseUnitAnnoClass ( mirror ) ; \n\t\tif ( baseUnitClass != null ) { \n\t\t\tString baseUnitClassName = baseUnitClass . getCanonicalName ( ) ; \n\t\t\tif $F15257 ( externalQualsMap , baseUnitClassName ) { \n\t\t\t\tloadExternalUnit ( baseUnitClassName ) ; \n\t\t\t\t} \n\t\t\taliasedAnnotation ( mirror ) ; \n\t\t\t} \n\t\telse $F845 } \n\taddUnitsRelations ( annoClass ) ; \n\t} \n"}, {"code": "$F1 protected void onProgressUpdate ( Integer ... values ) { \n\tif ( parent != null ) { \n\t\tif ( values [ NUM00 ] == ON_CACHE_END ) { \n\t\t\tparent . onCacheEnd ( ) ; \n\t\t\t} \n\t\telse if ( values [ NUM00 ] == ON_CACHE_INTERRUPTED ) { \n\t\t\t$F1594 ( Log , TAG ) shouldBeStopped = _BOOL ; \n\t\t\tparent . onCacheInterrupted ( ) ; \n\t\t\t} \n\t\telse { \n\t\t\tparent . onCacheProgress ( taskCount , values [ NUM00 ] ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void checkNumberArgs ( int argNum ) throws WrongNumberArgsException { \n\tif ( argNum < NUM00 ) reportWrongNumberArgs ( ) ; \n\t} \n"}, {"code": "public double dotProduct ( DoubleVector v ) { \n\treturn x * v . x + y * v . y + z * v . z ; \n\t} \n"}, {"code": "public TemporalOMScalingIcon ( Object id , int renderType , boolean interpolate , ImageIcon ii ) { \n\tthis ( id , renderType , interpolate , ii . getImage ( ) , NUM00 ) ; \n\tsetMaxScale ( NUM00 ) ; \n\tsetMinScale ( NUM00 ) ; \n\t} \n"}, {"code": "$F1 public void characters $F21196 ( ch , start , length ) throws SAXException $F92922 ( mStringBuilder , ch , start , length ) "}, {"code": "public int maxLength $F72 { \n\tif ( mIsPaired ) { \n\t\treturn ( int ) Math . max ( mLeft . maxLength ( ) , mRight . maxLength ( ) ) ; \n\t\t} \n\telse { \n\t\treturn ( int ) mSingle . maxLength ( ) ; \n\t\t} \n\t} \n"}, {"code": "public boolean equalsIgnoreCase ( StrBuilder other ) { \n\t$F3627 ( this , other , _BOOL ) if ( this . size != other . size ) { \n\t\treturn _BOOL ; \n\t\t} \n\tchar thisBuf [ ] = this . buffer ; \n\tchar otherBuf [ ] = other . buffer ; \n\tfor ( $F18298 ( i , size ) ) { \n\t\tchar c1 = thisBuf [ i ] ; \n\t\tchar c2 = otherBuf [ i ] ; \n\t\tif ( c1 != c2 && Character . toUpperCase ( c1 ) != Character . toUpperCase ( c2 ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public PathParser ( String pathString ) { \n\tthis . pathString = pathString . toCharArray ( ) ; \n\t} \n"}, {"code": "public LuaTable ( Varargs varargs , int firstarg ) { \n\tint nskip = firstarg - NUM00 ; \n\tint n = Math . max ( varargs . narg ( ) - nskip , NUM00 ) ; \n\tpresize ( n , NUM00 ) ; \n\tset ( N , valueOf ( n ) ) ; \n\tfor ( $F9993 ( i , n ) ) set ( i , varargs . arg ( i + nskip ) ) ; \n\t} \n"}, {"code": "public ID3v24Frame ( ByteBuffer byteBuffer , String loggingFilename ) throws InvalidFrameException , InvalidDataTypeException $F19517 ( setLoggingFilename , loggingFilename , read , byteBuffer ) "}, {"code": "public void disablePan ( BluetoothAdapter adapter ) { \n\tif ( mPan == null ) mPan = ( BluetoothPan ) connectProxy ( adapter , BluetoothProfile . PAN ) ; \n\tassertNotNull ( mPan ) ; \n\t$F657 ( start , System ) mPan . setBluetoothTethering ( _BOOL ) ; \n\t$F657 ( stop , System ) assertFalse ( mPan . isTetheringOn ( ) ) ; \n\twriteOutput ( String . format ( NUM00 , ( stop - start ) ) ) ; \n\t} \n"}, {"code": "$F189955 ( src , returnValue , System , values , top , this ) "}, {"code": "public boolean ready $F72 throws IOException { \n\t$F3576 ( _input ) $F437528 ( _index , _input , _BOOL ) return _BOOL ; \n\t} \n"}, {"code": "private $F16501 diff_compute $F35621 ( text1 , text2 , checklines , deadline ) { \n\t$F16553 ( diffs ) if $F1277 ( text1 ) { \n\t\t$F16561 ( diffs , Operation , text2 ) return diffs ; \n\t\t} \n\tif $F1277 ( text2 ) { \n\t\t$F16557 ( diffs , Operation , text1 ) return diffs ; \n\t\t} \n\tString longtext = $F40307 ( text1 , text2 ) ? text1 : text2 ; \n\tString shorttext = $F40307 ( text1 , text2 ) ? text2 : text1 ; \n\t$F12747 ( i , longtext , shorttext ) if ( i != - NUM00 ) { \n\t\tOperation op = $F40316 ( text1 , text2 ) ? Operation . DELETE : Operation . INSERT ; \n\t\tdiffs . add ( new Diff ( op , longtext . substring ( NUM00 , i ) ) ) ; \n\t\t$F35629 ( diffs , Operation , shorttext ) diffs . add ( new Diff ( op , $F29991 ( longtext , i , shorttext ) ) ) ; \n\t\treturn diffs ; \n\t\t} \n\tif $F1277 ( shorttext ) { \n\t\t$F16557 ( diffs , Operation , text1 ) $F16561 ( diffs , Operation , text2 ) return diffs ; \n\t\t} \n\t$F31405 ( hm , diff_halfMatch , text1 , text2 ) if ( hm != null ) { \n\t\tString text1_a = hm [ NUM00 ] ; \n\t\tString text1_b = hm [ NUM00 ] ; \n\t\tString text2_a = hm [ NUM00 ] ; \n\t\tString text2_b = hm [ NUM00 ] ; \n\t\tString mid_common = hm [ NUM00 ] ; \n\t\t$F40337 ( diffs_a , diff_main , text1_a , text2_a , checklines , deadline ) $F40337 ( diffs_b , diff_main , text1_b , text2_b , checklines , deadline ) diffs = diffs_a ; \n\t\t$F35629 ( diffs , Operation , mid_common ) diffs . addAll ( diffs_b ) ; \n\t\treturn diffs ; \n\t\t} \n\tif ( $F40340 ( checklines , text1 ) && $F20 ( text2 ) ) $F19580 ( diff_lineMode , text1 , text2 , deadline ) return diff_bisect ( text1 , text2 , deadline ) ; \n\t} \n"}, {"code": "public static long sizeOfDirectory ( File directory ) { \n\tcheckDirectory ( directory ) ; \n\t$F44946 ( files , directory ) $F1084 ( files ) long size = NUM00 ; \n\tfor ( final File file : files ) { \n\t\ttry { \n\t\t\tif ( ! isSymlink ( file ) ) { \n\t\t\t\tsize += sizeOf ( file ) ; \n\t\t\t\t$F29432 ( size ) } \n\t\t\t} \n\t\t$F62612 } \n\treturn size ; \n\t} \n"}, {"code": "protected void handleMatch ( T mapping , String lookupPath , ServerWebExchange exchange ) $F845 "}, {"code": "public boolean isUseSSL $F72 { \n\treturn useSSL ; \n\t} \n"}, {"code": "public void start $F72 { \n\tif ( ( mProxSensor == null ) || mIsActive ) $F932 mIsActive = _BOOL ; \n\tmShouldDropEvents = _BOOL ; \n\tmSensorManager . registerListener ( mListener , mProxSensor , SensorManager . SENSOR_DELAY_UI ) ; \n\tLogUtils . log ( this , Log . VERBOSE , NUM00 , System . currentTimeMillis ( ) ) ; \n\tmHandler . postDelayed ( mFilterRunnable , REGISTRATION_EVENT_FILTER_TIMEOUT ) ; \n\t} \n"}, {"code": "public void testEntityDeclarations $F72 $F1941 ( assertNotNull , sp ) "}, {"code": "private Vector applyCSS ( HTMLElement element , HTMLComponent htmlC , CSSElement [ ] css , Vector nestedSelectors , Vector siblingSelectors ) { \n\tString id = element . getAttributeById ( HTMLElement . ATTR_ID ) ; \n\tString className = element . getAttributeById ( HTMLElement . ATTR_CLASS ) ; \n\t$F6518 ( nextNestedSelectors ) Vector nextSiblingSelectors = null ; \n\tif ( ! HTMLComponent . PROCESS_HTML_MP1_ONLY ) { \n\t\t$F20637 ( nextSiblingSelectors ) } \n\tfor ( $F1139 ( e , css ) ) { \n\t\tCSSElement currentSelector = css [ e ] ; \n\t\tcheckSelector ( currentSelector , element , htmlC , className , id , nextNestedSelectors , nextSiblingSelectors ) ; \n\t\t} \n\tif ( nestedSelectors != null ) { \n\t\tfor ( $F44696 ( e , nestedSelectors ) ) { \n\t\t\tCSSElement currentSelector = ( CSSElement ) e . nextElement ( ) ; \n\t\t\tcheckSelector ( currentSelector , element , htmlC , className , id , nextNestedSelectors , nextSiblingSelectors ) ; \n\t\t\t} \n\t\t} \n\tif ( ( ! HTMLComponent . PROCESS_HTML_MP1_ONLY ) && ( siblingSelectors != null ) ) { \n\t\tfor ( $F44696 ( e , siblingSelectors ) ) { \n\t\t\tCSSElement currentSelector = ( CSSElement ) e . nextElement ( ) ; \n\t\t\tcheckSelector ( currentSelector , element , htmlC , className , id , nextNestedSelectors , nextSiblingSelectors ) ; \n\t\t\t} \n\t\t} \n\tif $F10471 ( nextNestedSelectors ) { \n\t\tnextNestedSelectors = null ; \n\t\t} \n\tif ( ( ! HTMLComponent . PROCESS_HTML_MP1_ONLY ) && $F10471 ( nextSiblingSelectors ) ) { \n\t\tnextSiblingSelectors = null ; \n\t\t} \n\tapplyStyleAttribute ( element , htmlC ) ; \n\tVector curSiblingSelectors = null ; \n\tfor ( int i = NUM00 ; \n\ti < element . getNumChildren ( ) ; \n\ti ++ ) { \n\t\tHTMLElement child = ( HTMLElement ) element . getChildAt ( i ) ; \n\t\tVector v = applyCSS ( child , htmlC , css , nextNestedSelectors , curSiblingSelectors ) ; \n\t\tif ( ! child . isTextElement ( ) ) { \n\t\t\tcurSiblingSelectors = v ; \n\t\t\t} \n\t\t} \n\treturn nextSiblingSelectors ; \n\t} \n"}, {"code": "$F5466 private TcpDiscoveryNode resolveCoordinator ( $F5466 Collection < TcpDiscoveryNode > filter ) { \n\tsynchronized ( mux ) { \n\t\tCollection < TcpDiscoveryNode > excluded = F . concat ( _BOOL , failedNodes . keySet ( ) , leavingNodes ) ; \n\t\tif $F20899 ( F , filter ) excluded = F . concat ( _BOOL , excluded , filter ) ; \n\t\treturn ring . coordinator ( excluded ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F806 splitc ( String src , String d ) { \n\tif ( $F1277 ( d ) || $F1277 ( src ) ) { \n\t\t$F80149 ( src ) } \n\treturn splitc ( src , d . toCharArray ( ) ) ; \n\t} \n"}, {"code": "public int deflateString2ByteArray ( $F96 input , int inputOffset , int inputLength , $F96 bytes ) { \n\tif ( inputLength >= MIN_SIZE_FOR_DEFLATION ) { \n\t\tdeflater . setInput ( input , inputOffset , inputLength ) ; \n\t\t$F1571 ( deflater ) int compressedDataLength = deflater . deflate ( bytes ) ; \n\t\t$F2268 ( deflater ) return - compressedDataLength ; \n\t\t} \n\telse { \n\t\t$F21535 ( System , input , inputOffset , bytes , inputLength ) return inputLength ; \n\t\t} \n\t} \n"}, {"code": "private void doubleCapacity $F72 { \n\tint p = head ; \n\tint n = elements . length ; \n\tint r = n - p ; \n\tint newCapacity = n < < NUM00 ; \n\tif ( newCapacity < NUM00 ) $F4638 $F133 ( a , newCapacity ) $F21535 ( System , elements , p , a , r ) $F6483 ( System , elements , a , r , p ) elements = a ; \n\thead = NUM00 ; \n\ttail = n ; \n\t} \n"}, {"code": "public Marker backTo ( int idx ) throws AMConsoleException { \n\t$F115 ( size , trail ) if ( idx >= size ) $F21549 for ( int i = size - NUM00 ; \n\ti > idx ; \n\t-- i ) $F106 ( trail , i ) return ( Marker ) trail . get ( idx ) ; \n\t} \n"}, {"code": "private static long copy ( InputStream source , OutputStream sink ) throws IOException { \n\tlong nread = NUM00 ; \n\t$F2175 ( buf , BUFFER_SIZE ) int n ; \n\twhile $F87061 ( n , source , buf ) $F18068 ( sink , buf , n , nread ) return nread ; \n\t} \n"}, {"code": "public $F96 pack $F72 { \n\tif $F10471 ( entries ) $F1274 int entryLength = owner . getType ( ) . NODES_ENTRY_LENGTH ; \n\t$F96 buffer = new byte [ entries . size ( ) * entryLength ] ; \n\t$F30975 ( max_items , buffer ) int j = NUM00 ; \n\tfor ( KBucketEntry e : entries ) { \n\t\t$F66497 ( j , max_items ) PackUtil . PackBucketEntry ( e , buffer , j * entryLength , owner . getType ( ) ) ; \n\t\tj ++ ; \n\t\t} \n\treturn buffer ; \n\t} \n"}, {"code": "public String toString $F72 { \n\t$F8755 ( sb ) for ( $F1139 ( i , permissions ) ) $F70285 ( i , sb , permissions ) $F84 ( sb ) $F92 ( sb ) } \n"}, {"code": "public void testInvalidAfterClose $F72 throws IOException { \n\tPath tempPath = createTempDir ( ) ; \n\tDirectory dir = getDirectory ( tempPath ) ; \n\tLock l = dir . obtainLock ( NUM00 ) ; \n\t$F59 ( l ) expectThrows ( AlreadyClosedException . class , null ) ; \n\t$F59 ( dir ) } \n"}, {"code": "public static GdsTypeRule excludes ( String ... excludedTypes ) { \n\tfinal $F2689 excludedTypesSet = $F202502 ( Arrays , excludedTypes ) ; \n\treturn new GdsTypeRule ( not ( isIn ( excludedTypesSet ) ) ) ; \n\t} \n"}, {"code": "public final $F2689 aliases $F72 { \n\t$F60730 ( aliasSet ) int n = aliases . length ; \n\t$F2690 $F45084 ( hs , n ) ; \n\tfor ( $F119 ( i , n ) ) $F24616 ( hs , aliases , i ) aliasSet = Collections . unmodifiableSet ( hs ) ; \n\treturn aliasSet ; \n\t} \n"}, {"code": "public synchronized void unweave ( ByteString id ) { \n\tif $F1710 ( woven , id ) { \n\t\tremoved . add ( woven . remove ( id ) ) ; \n\t\t} \n\t} \n"}, {"code": "private static Map < String , VirtualFile > findSiblings ( $F5466 VirtualFile directory , Project project , Set $F85423 seen ) { \n\tif ( directory == null ) $F83145 ( Collections ) else { \n\t\tif $F105 ( seen , directory ) { \n\t\t\treturn findSiblings ( null , project , seen ) ; \n\t\t\t} \n\t\tseen . add ( directory ) ; \n\t\tVirtualFile settings = directory . findChild ( SdkConstants . FN_SETTINGS_GRADLE ) ; \n\t\tif ( settings == null ) { \n\t\t\treturn findSiblings ( directory . getParent ( ) , project , seen ) ; \n\t\t\t} \n\t\telse { \n\t\t\treturn GradleModuleImporter . getSubProjects ( settings , project ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public AuthorityKeyIdentifierStructure ( X509Certificate certificate ) throws CertificateParsingException $F14373 ( super , fromCertificate , certificate ) "}, {"code": "$F1 public int hashCode $F72 { \n\treturn Arrays . hashCode ( new ImmutablePair [ ] { \n\t\t( ImmutablePair ) first , ( ImmutablePair ) second } \n\t) ; \n\t} \n"}, {"code": "$F52843 ( packed , map , i , j , count , value ) "}, {"code": "$F20664 public static String replaceUnicodeDigits ( String number ) { \n\t$F80469 ( normalizedDigits , number ) for ( $F2998 ( c , number ) ) { \n\t\t$F338099 ( digit , Character , c ) if ( digit != - NUM00 ) $F288 ( normalizedDigits , digit ) else $F288 ( normalizedDigits , c ) } \n\t$F92 ( normalizedDigits ) } \n"}, {"code": "public String Frie_Name ( String value ) { \n\tif $F6036 ( value ) $F1278 String retValue = value ; \n\tString SQL = NUM00 ; \n\ttry { \n\t\t$F46 ( pstmt , DB , SQL ) $F3916 ( pstmt , value ) $F49 ( rs , pstmt ) if $F1682 ( rs ) $F68584 ( retValue , rs ) $F59 ( rs ) $F59 ( pstmt ) } \n\t$F64 ( log , Level , SQL , e ) return retValue ; \n\t} \n"}, {"code": "public static boolean isCompressed ( File file ) { \n\tInputStream fis = null ; \n\ttry { \n\t\tif $F3428 ( file ) { \n\t\t\t$F5335 ( fis , file ) $F7468 ( mag1 , fis ) $F7468 ( mag2 , fis ) $F59 ( fis ) return selectCompressionProvider ( mag1 , mag2 ) != null ; \n\t\t\t} \n\t\t} \n\tcatch ( IOException e ) { \n\t\tLOG . log ( Level . FINEST , NUM00 + file + NUM00 , e ) ; \n\t\treturn _BOOL ; \n\t\t} \n\t$F19458 ( SafeClose , fis ) return _BOOL ; \n\t} \n"}, {"code": "$F1 public int readInt ( String filePath ) { \n\tFileChannel fileChannel = updateCache ( filePath ) ; \n\tByteBuffer byteBffer = read ( fileChannel , CarbonCommonConstants . INT_SIZE_IN_BYTE ) ; \n\treturn byteBffer . getInt ( ) ; \n\t} \n"}, {"code": "private synchronized void closeOutputStreamQuietly $F72 { \n\tif ( ! mClosed ) { \n\t\ttry { \n\t\t\t$F59 ( mOutputStream ) reportDecodedSizeIfApplicable ( ) ; \n\t\t\t} \n\t\tcatch ( IOException e ) { \n\t\t\tCLog . writeToConsole ( mNetworkPeerManager , Console . MessageLevel . ERROR , Console . MessageSource . NETWORK , NUM00 + e ) ; \n\t\t\t} \n\t\tfinally { \n\t\t\tmClosed = _BOOL ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void bind ( String address , ServiceRefAmp linkService ) { \n\t_linkServiceMap . put ( address , linkService ) ; \n\t_serviceCloseList . add ( linkService ) ; \n\t} \n"}, {"code": "public boolean mightHaveMultiFontMetrics $F72 $F40347 ( fontConfig ) "}, {"code": "private static boolean checkOffset $F41200 ( value , offset , expected ) { \n\treturn $F7007 ( offset , value ) && $F44927 ( value , offset , expected ) ; \n\t} \n"}, {"code": "void addSplit ( String splitPath ) { \n\t$F6542 ( splits , splitPath ) for ( String split : splits ) { \n\t\t$F1382 ( split ) if $F3106 ( split ) $F1665 ( split ) if $F1277 ( split ) $F598 addField ( split , split , _BOOL , _BOOL ) ; \n\t\t} \n\t} \n"}, {"code": "public void toLatLon ( double v0 , double h0 ) { \n\tfinal double GX = NUM00 ; \n\t$F175803 ( GY ) final double A = NUM00 ; \n\t$F175803 ( Q ) final double Q2 = NUM00 ; \n\tfinal double EPSILON = NUM00 ; \n\tdouble v = ( double ) v0 ; \n\tdouble h = ( double ) h0 ; \n\tdouble t1 = ( v - TRANSV ) / RADIUS ; \n\tdouble t2 = ( h - TRANSH ) / RADIUS ; \n\tdouble vhat = ROTC * t2 - ROTS * t1 ; \n\tdouble hhat = ROTS * t2 + ROTC * t1 ; \n\tdouble e = Math . cos ( $F25556 ( Math , vhat , hhat ) ) ; \n\tdouble w = Math . cos ( Math . sqrt ( vhat * vhat + $F94029 ( hhat ) ) ) ; \n\tdouble fx = EY * w - WY * e ; \n\tdouble fy = EX * w - WX * e ; \n\tdouble b = fx * GX + fy * GY ; \n\tdouble c = fx * fx + fy * fy - Q2 ; \n\tdouble disc = b * b - A * c ; \n\tdouble x , y , z , delta ; \n\tif $F7637 ( Math , disc , EPSILON ) { \n\t\tz = b / A ; \n\t\tx = ( GX * z - fx ) / Q ; \n\t\ty = ( fy - GY * z ) / Q ; \n\t\t} \n\telse { \n\t\tdelta = Math . sqrt ( disc ) ; \n\t\tz = ( b + delta ) / A ; \n\t\tx = ( GX * z - fx ) / Q ; \n\t\ty = ( fy - GY * z ) / Q ; \n\t\tif ( vhat * ( PX * x + PY * y + PZ * z ) < NUM00 ) { \n\t\t\tz = ( b - delta ) / A ; \n\t\t\tx = ( GX * z - fx ) / Q ; \n\t\t\ty = ( fy - GY * z ) / Q ; \n\t\t\t} \n\t\t} \n\tdouble lat = Math . asin ( z ) ; \n\tfinal $F1986 bi = { \n\t\tNUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 } \n\t; \n\tdouble lat2 = lat * lat ; \n\tdouble earthlat = lat * ( bi [ NUM00 ] + lat2 * ( bi [ NUM00 ] + lat2 * ( bi [ NUM00 ] + lat2 * ( bi [ NUM00 ] + lat2 * ( bi [ NUM00 ] + lat2 * ( bi [ NUM00 ] + lat2 * ( bi [ NUM00 ] ) ) ) ) ) ) ) ; \n\tearthlat = Math . toDegrees ( earthlat ) ; \n\tdouble lon = Math . toDegrees ( Math . atan2 ( x , y ) ) ; \n\tdouble earthlon = lon + NUM00 ; \n\tthis . resultLat = earthlat ; \n\tthis . resultLon = - earthlon ; \n\t} \n"}, {"code": "public void sortArray ( $F10809 d , $F96239 c ) { \n\tthis . data = d ; \n\tthis . comp = c ; \n\tint len = Math . max ( ( int ) ( NUM00 * Math . log ( d . length ) ) , TEMP_SIZE ) ; \n\tlen = Math . min ( d . length , len ) ; \n\t$F1431 $F10809 t = ( $F10809 ) new Object [ len ] ; \n\tthis . temp = t ; \n\tmergeSort ( NUM00 , d . length - NUM00 ) ; \n\t} \n"}, {"code": "$F141880 ( closeable , rethrown ) "}, {"code": "public void cacheUnit ( UnitInterface unit ) $F207 ( allUnits , unit ) "}, {"code": "public Component findByName ( String name , Component rootComponent ) { \n\tComponent c = ( Component ) rootComponent . getClientProperty ( NUM00 + name + NUM00 ) ; \n\tif ( c == null ) { \n\t\tContainer newRoot = getRootAncestor ( rootComponent ) ; \n\t\tif ( newRoot != null && rootComponent != newRoot ) $F8587 ( findByName , name , newRoot ) } \n\treturn c ; \n\t} \n"}, {"code": "protected void fetchMetadata $F72 throws IOException { \n\tremaining = period ; \n\t$F7468 ( size , in ) $F61236 ( size ) size <<= NUM00 ; \n\tif ( mbuffer . length < size ) { \n\t\tmbuffer = null ; \n\t\t$F1325 ( mbuffer , size ) $F63425 ( Log , LOG , size ) } \n\tsize = readFully ( mbuffer , NUM00 , size ) ; \n\tfor ( $F119 ( i , size ) ) { \n\t\tif ( mbuffer [ i ] == NUM00 ) $F3468 ( size , i ) } \n\tString s ; \n\ttry { \n\t\ts = new String ( mbuffer , NUM00 , size , characterEncoding ) ; \n\t\t} \n\tcatch ( Exception e ) $F17931 ( Log , LOG ) $F12258 ( Log , LOG , s ) parseMetadata ( s ) ; \n\t} \n"}, {"code": "public void startElement $F72 { \n\tnss . pushContext ( ) ; \n\tinCollectingMode = _BOOL ; \n\t} \n"}, {"code": "private V replaceNode ( Object key , V value , Object cv ) { \n\tint hash = hash ( ( K ) key ) ; \n\tfor ( $F35154 ( tab , table ) ) { \n\t\t$F35155 ( f ) int n , i , fh ; \n\t\tif ( $F35157 ( tab , n ) || $F35160 ( f , tabAt , tab , i , n , hash ) ) $F5153 else if $F35162 ( fh , f , MOVED ) $F176272 ( tab , helpTransfer , f ) else { \n\t\t\tV oldVal = null ; \n\t\t\tboolean validated = _BOOL ; \n\t\t\tsynchronized ( f ) { \n\t\t\t\tif ( tabAt ( tab , i ) == f ) { \n\t\t\t\t\tif ( fh >= NUM00 ) { \n\t\t\t\t\t\tvalidated = _BOOL ; \n\t\t\t\t\t\tfor ( $F35163 ( e , f , pred ) ; \n\t\t\t\t\t\t; \n\t\t\t\t\t\t) { \n\t\t\t\t\t\t\tif ( e . hash == hash && isEqual ( ( K ) key , e . key ) ) { \n\t\t\t\t\t\t\t\tV ev = e . val ; \n\t\t\t\t\t\t\t\tif $F125165 ( cv , ev ) { \n\t\t\t\t\t\t\t\t\toldVal = ev ; \n\t\t\t\t\t\t\t\t\tif ( value != null ) { \n\t\t\t\t\t\t\t\t\t\te . val = value ; \n\t\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t\telse if ( pred != null ) { \n\t\t\t\t\t\t\t\t\t\t$F33910 ( pred , e ) } \n\t\t\t\t\t\t\t\t\telse { \n\t\t\t\t\t\t\t\t\t\tsetTabAt ( tab , i , e . next ) ; \n\t\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t$F597 } \n\t\t\t\t\t\t\tpred = e ; \n\t\t\t\t\t\t\tif ( ( e = e . next ) == null ) $F5153 } \n\t\t\t\t\t\t} \n\t\t\t\t\telse if ( f instanceof TreeBin ) { \n\t\t\t\t\t\tvalidated = _BOOL ; \n\t\t\t\t\t\t$F35192 ( t , f ) $F35195 ( r , p ) if $F35200 ( r , t , p , hash , key ) { \n\t\t\t\t\t\t\tV pv = p . val ; \n\t\t\t\t\t\t\tif $F125165 ( cv , pv ) { \n\t\t\t\t\t\t\t\toldVal = pv ; \n\t\t\t\t\t\t\t\tif ( value != null ) { \n\t\t\t\t\t\t\t\t\tp . val = value ; \n\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\telse if ( t . removeTreeNode ( p ) ) { \n\t\t\t\t\t\t\t\t\tsetTabAt ( tab , i , untreeify ( t . first ) ) ; \n\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tif ( validated ) { \n\t\t\t\tif ( oldVal != null ) { \n\t\t\t\t\tif ( value == null ) { \n\t\t\t\t\t\taddCount ( $F64496 ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\treturn oldVal ; \n\t\t\t\t\t} \n\t\t\t\t$F597 } \n\t\t\t} \n\t\t} \n\t$F1274 } \n"}, {"code": "public final void removeHelperText $F134304 ( helperText ) { \n\tensureNotNull ( helperText , NUM00 ) ; \n\tensureNotEmpty ( helperText , NUM00 ) ; \n\thelperTexts . remove ( helperText ) ; \n\tverifyPasswordStrength ( ) ; \n\t} \n"}, {"code": "public final synchronized int maxPV $F72 { \n\t$F74334 ( computerPlayer ) return computerPlayer . getMaxPV ( ) ; \n\t} \n"}, {"code": "private void displaySimple ( PrintStream output ) { \n\t$F8438 ( output ) for ( $F119 ( j , P ) ) { \n\t\t$F9662 ( a0 , N ) $F9662 ( a1 , N ) $F9662 ( a2 , N ) for ( $F119 ( i , N ) ) { \n\t\t\ta0 [ i ] = A [ i ] ; \n\t\t\ta1 [ i ] = C_A [ i ] [ j ] ; \n\t\t\ta2 [ i ] = B [ i ] ; \n\t\t\t} \n\t\tdouble value = computeFirstOrder ( a0 , a1 , a2 , N ) ; \n\t\toutput . print ( value < NUM00 ? NUM00 : value ) ; \n\t\tif ( j < P - NUM00 ) $F21410 ( output ) } \n\t$F21416 ( output ) $F8438 ( output ) for ( $F119 ( j , P ) ) { \n\t\t$F9662 ( a0 , N ) $F9662 ( a1 , N ) $F9662 ( a2 , N ) for ( $F119 ( i , N ) ) { \n\t\t\ta0 [ i ] = A [ i ] ; \n\t\t\ta1 [ i ] = C_A [ i ] [ j ] ; \n\t\t\ta2 [ i ] = B [ i ] ; \n\t\t\t} \n\t\tdouble value = computeTotalOrder ( a0 , a1 , a2 , N ) ; \n\t\toutput . print ( value < NUM00 ? NUM00 : value ) ; \n\t\tif ( j < P - NUM00 ) $F21410 ( output ) } \n\t$F21416 ( output ) } \n"}, {"code": "public Object remove ( int index ) { \n\tRangeCheck ( index ) ; \n\tmodCount ++ ; \n\tObject oldValue = elementData [ index ] ; \n\tint numMoved = size - index - NUM00 ; \n\tif ( numMoved > NUM00 ) $F173011 ( System , elementData , index , numMoved ) elementData [ -- size ] = null ; \n\treturn oldValue ; \n\t} \n"}, {"code": "public String readMatchingFlags ( String text ) { \n\tclear ( ) ; \n\tif $F7311 ( text , PM_SEPARATOR ) { \n\t\tfinal StringTokenizer tok = new StringTokenizer ( text , PM_SEPARATOR ) ; \n\t\twhile $F14498 ( tok ) { \n\t\t\t$F49878 ( flag , tok ) if $F1238 ( flag , PM_TYPE_MATCH ) { \n\t\t\t\ttypeMatching = _BOOL ; \n\t\t\t\t} \n\t\t\telse if $F1238 ( flag , PM_EXACT_MATCH ) { \n\t\t\t\texactMatching = _BOOL ; \n\t\t\t\t} \n\t\t\telse if $F1238 ( flag , PM_SIMILAR_MATCH ) { \n\t\t\t\tsimilarMatching = _BOOL ; \n\t\t\t\t} \n\t\t\telse if $F1238 ( flag , PM_ICASE_MATCH ) { \n\t\t\t\tcaseInsensitive = _BOOL ; \n\t\t\t\t} \n\t\t\telse if $F1238 ( flag , PM_JOKER_MATCH ) { \n\t\t\t\tjokerMatching = _BOOL ; \n\t\t\t\t} \n\t\t\telse $F5153 text = text . substring ( $F1285 ( flag ) ) ; \n\t\t\t} \n\t\tif ( isAnyFlagSet ( ) ) $F3109 ( text ) } \n\treturn text ; \n\t} \n"}, {"code": "private TinyPlanetImage createFinalTinyPlanet $F72 { \n\t$F8934 ( mResultLock ) try { \n\t\t$F17551 ( mResultBitmap ) mResultBitmap = null ; \n\t\t$F17551 ( mSourceBitmap ) mSourceBitmap = null ; \n\t\t} \n\t$F796 ( mResultLock ) Bitmap sourceBitmap = createPaddedSourceImage ( mSourceImageUri , _BOOL ) ; \n\t$F2049 ( width , sourceBitmap ) $F2047 ( height , sourceBitmap ) int outputSize = width / NUM00 ; \n\tBitmap resultBitmap = Bitmap . createBitmap ( outputSize , outputSize , Bitmap . Config . ARGB_8888 ) ; \n\tTinyPlanetNative . process ( sourceBitmap , width , height , resultBitmap , outputSize , mCurrentZoom , mCurrentAngle ) ; \n\t$F17551 ( sourceBitmap ) sourceBitmap = null ; \n\t$F1538 ( jpeg ) resultBitmap . compress ( CompressFormat . JPEG , NUM00 , jpeg ) ; \n\treturn new TinyPlanetImage ( addExif ( jpeg . toByteArray ( ) ) , outputSize ) ; \n\t} \n"}, {"code": "private static int NewFloatArray ( JNIEnvironment env , int length ) { \n\t$F4274 ( traceJNI , VM ) $F4275 ( RuntimeEntrypoints ) try { \n\t\t$F25850 ( newArray , length ) $F79069 ( env , newArray ) } \n\t$F4287 ( traceJNI , unexpected , System , env ) } \n"}, {"code": "static int createShader ( String resource , int type ) throws IOException $F25228 ( createShader , resource , type ) "}, {"code": "public Model validateNodeAgainstShape ( Dataset dataset , URI shapesGraphURI , Node focusNode , Node shape , Resource minSeverity , Predicate < SHConstraint > constraintFilter , Function < RDFNode , String > labelFunction , ProgressMonitor monitor ) { \n\tModel results = JenaUtil . createMemoryModel ( ) ; \n\tModel oldResults = getCurrentResultsModel ( ) ; \n\tsetCurrentResultsModel ( results ) ; \n\taddResourceViolations ( dataset , shapesGraphURI , focusNode , shape , SHACLUtil . getAllConstraintProperties ( _BOOL ) , minSeverity , constraintFilter , results , labelFunction , monitor ) ; \n\tsetCurrentResultsModel ( oldResults ) ; \n\treturn results ; \n\t} \n"}, {"code": "$F1 public VolatileImage createBackBuffer ( WComponentPeer peer ) { \n\tComponent target = ( Component ) peer . getTarget ( ) ; \n\treturn new SunVolatileImage ( target , target . getWidth ( ) , target . getHeight ( ) , Boolean . TRUE ) ; \n\t} \n"}, {"code": "public void test_singleResourceLocking_highConcurrency100 $F72 throws Exception { \n\t$F2697 ( properties ) $F154944 ( properties , TestOptions ) $F154946 ( properties , TestOptions ) $F130263 ( properties , TestOptions ) $F130265 ( properties , TestOptions ) $F130267 ( properties , TestOptions ) $F130271 ( properties , TestOptions ) $F130273 ( properties , TestOptions ) doComparisonTest ( properties ) ; \n\t} \n"}, {"code": "public void push ( final double value ) { \n\t$F39428 ( bits , Double , value ) if $F2862 ( bits ) $F39432 ( mv , Opcodes , value ) else $F31345 ( mv , value ) } \n"}, {"code": "protected abstract void assignResourceRequests $F72 ; \n"}, {"code": "public synchronized void add ( int position , AbstractOption option ) { \n\tAbstractOption $F31993 ( search , getByName , option ) ; \n\tif ( search != null ) $F10911 ( LOG ) else { \n\t\tList < AbstractOption > oldOptions = new ArrayList < AbstractOption > ( options ) ; \n\t\toptions . add ( position , option ) ; \n\t\toption . setCollection ( this ) ; \n\t\tList < AbstractOption > newOptions = getOptions ( ) ; \n\t\tfireIndexedPropertyChange ( PROP_OPTIONS , position , oldOptions , newOptions ) ; \n\t\t} \n\t} \n"}, {"code": "$F99425 ( os , writeInt , CACHE_MAGIC , writeString , key , etag , writeLong , serverDate , lastModified , ttl , softTtl , writeStringStringMap , responseHeaders , _BOOL , VolleyLog , e ) "}, {"code": "$F125330 ( visitingMethod ) "}, {"code": "protected ByteArrayOutputStream parseBytes ( ByteArrayOutputStream bos ) throws IOException { \n\tint ch ; \n\tfor ( ch = read ( ) ; \n\tch >= NUM00 && ch != NUM00 ; \n\tch = read ( ) ) { \n\t\tint b1 = ch ; \n\t\tint b2 = read ( ) ; \n\t\tint b3 = read ( ) ; \n\t\tint b4 = read ( ) ; \n\t\tif ( b4 != NUM00 ) { \n\t\t\tint chunk = ( ( base64Decode [ b1 ] < < NUM00 ) + ( base64Decode [ b2 ] < < NUM00 ) + ( base64Decode [ b3 ] < < NUM00 ) + ( base64Decode [ b4 ] ) ) ; \n\t\t\t$F34529 ( bos , chunk ) $F34529 ( bos , chunk ) bos . write ( chunk ) ; \n\t\t\t} \n\t\telse if ( b3 != NUM00 ) { \n\t\t\tint chunk = ( ( base64Decode [ b1 ] < < NUM00 ) + ( base64Decode [ b2 ] < < NUM00 ) + ( base64Decode [ b3 ] ) ) ; \n\t\t\t$F34529 ( bos , chunk ) bos . write ( chunk ) ; \n\t\t\t} \n\t\telse { \n\t\t\tint chunk = ( ( base64Decode [ b1 ] < < NUM00 ) + ( base64Decode [ b2 ] ) ) ; \n\t\t\tbos . write ( chunk ) ; \n\t\t\t} \n\t\t} \n\tif ( ch == NUM00 ) peek = ch ; \n\treturn bos ; \n\t} \n"}, {"code": "$F13735 ( prefix , namespace , attName , attValue , xmlWriter ) "}, {"code": "public static void startUploadActivityForResult ( Activity activity , Account account , int requestCode ) { \n\tIntent action = new Intent ( activity , UploadFilesActivity . class ) ; \n\taction . putExtra ( EXTRA_ACCOUNT , ( account ) ) ; \n\tactivity . startActivityForResult ( action , requestCode ) ; \n\t} \n"}, {"code": "public void addGenericAttr ( GenericAttr g ) $F6659 ( generic , g ) "}, {"code": "public void stopTraceSession ( int traceSessionId ) throws SQLException { \n\ttry ( FbService service = attachServiceManager ( ) ) { \n\t\tservice . startServiceAction ( getTraceSPB ( service , isc_action_svc_trace_stop , traceSessionId ) ) ; \n\t\tqueueService ( service ) ; \n\t\t} \n\tcatch ( IOException ioe ) { \n\t\tthrow new SQLException ( ioe ) ; \n\t\t} \n\t} \n"}, {"code": "String readSubstring ( String source , int ofs ) { \n\treturn readSubstring ( $F180345 ( source , ofs ) ) ; \n\t} \n"}, {"code": "private synchronized boolean expungeStaleEntries $F72 { \n\tif ( this . size == NUM00 ) return _BOOL ; \n\tObject r ; \n\tboolean result = _BOOL ; \n\twhile $F22655 ( r , queue ) { \n\t\tresult = _BOOL ; \n\t\tSingleEntry e = ( SingleEntry ) r ; \n\t\tthis . size -= e . cleanupPkTable ( this . table ) ; \n\t\tthis . nonDatedEntryCount -= e . cleanupSemiUniqueTable ( this . nonDatedTable ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public void removeListener ( AbstractSerialTransportListener listener ) $F275325 ( listener , listeners ) "}, {"code": "private String restoreNBTTags ( String str , $F5 nbttags ) { \n\tint nbtidx = NUM00 ; \n\tfor ( String capture : nbttags ) { \n\t\tstr = str . replace ( NUM00 + nbtidx ++ , capture ) ; \n\t\t} \n\treturn str ; \n\t} \n"}, {"code": "private void drawOffsets ( final Graphics g ) { \n\tif ( isEnabled ( ) ) $F158293 ( g , m_fontColorOffsets ) else { \n\t\tg . setColor ( m_disabledColor != m_bgColorOffset ? m_disabledColor : Color . WHITE ) ; \n\t\t} \n\tfinal int x = ( - m_firstColumn * m_charWidth ) + NUM00 ; \n\t$F3666 ( bytesToDraw , getMaximumVisibleBytes ) final String formatString = m_addressMode == AddressMode . BIT32 ? NUM00 : NUM00 ; \n\tfor ( int i = NUM00 ; \n\ti < bytesToDraw ; \n\ti += m_bytesPerRow ) { \n\t\tfinal long address = m_baseAddress + ( m_firstRow * m_bytesPerRow ) + i ; \n\t\tfinal String offsetString = String . format ( formatString , address ) ; \n\t\tfinal int currentRow = i / m_bytesPerRow ; \n\t\tg . drawString ( offsetString , x , m_paddingTop + ( currentRow * m_rowHeight ) ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void writeExternal ( ObjectOutput out ) throws IOException { \n\tsuper . writeExternal ( out ) ; \n\tout . writeDouble ( knnDistance ) ; \n\t} \n"}, {"code": "public void touch ( Date date ) { \n\tlastSeen = ( Date ) date . clone ( ) ; \n\t} \n"}, {"code": "public void testPolyline $F72 throws Exception { \n\tEsriLayer layer = new EsriLayer ( NUM00 , SHAPE_TYPE_POLYLINE , NUM00 ) ; \n\tDbfTableModel model = layer . getModel ( ) ; \n\t$F383003 ( model ) $F382996 ( model ) model . setColumnName ( NUM00 , NUM00 ) ; \n\tmodel . setType ( NUM00 , ( byte ) DbfTableModel . TYPE_CHARACTER ) ; \n\t$F383003 ( model ) $F382996 ( model ) model . setColumnName ( NUM00 , NUM00 ) ; \n\tmodel . setType ( NUM00 , ( byte ) DbfTableModel . TYPE1ERIC ) ; \n\taddPolylineRecord1 ( layer ) ; \n\taddPolylineRecord2 ( layer ) ; \n\taddPolylineRecord3 ( layer ) ; \n\tEsriGraphicList list = layer . getEsriGraphicList ( ) ; \n\tShpOutputStream pos = new ShpOutputStream ( new FileOutputStream $F580 ) ; \n\t$F26352 indexData = pos . writeGeometry ( list ) ; \n\tShxOutputStream xos = new ShxOutputStream ( new FileOutputStream $F580 ) ; \n\txos . writeIndex ( indexData , list . getType ( ) , list . getExtents ( ) ) ; \n\tDbfOutputStream dos = new DbfOutputStream ( new FileOutputStream $F580 ) ; \n\tdos . writeModel ( model ) ; \n\t} \n"}, {"code": "public static int random ( int i , int j ) { \n\treturn i + ( int ) ( Math . random ( ) * ( j - i ) ) ; \n\t} \n"}, {"code": "public void remove ( String name ) $F106 ( featureMap , name ) "}, {"code": "private List < ColumnModel > findColumnsToAdd $F72 { \n\tList < ColumnModel > columnsToAdd = new ArrayList < ColumnModel > $F72 ; \n\tfor ( ColumnModel columnModel : mTableModel . getColumnModels ( ) ) { \n\t\tString columnName = columnModel . getColumnName ( ) ; \n\t\tif ( ! mTableModelDB . containsColumn ( columnName ) ) $F207 ( columnsToAdd , columnModel ) } \n\treturn columnsToAdd ; \n\t} \n"}, {"code": "$F1 public Loader < Cursor > onCreateLoader ( int id , Bundle args ) { \n\tUri uri = FmRadioStation . Station . CONTENT_URI ; \n\tString select = FmRadioStation . Station . COLUMN_STATION_TYPE + NUM00 ; \n\tString order = FmRadioStation . Station . COLUMN_STATION_TYPE + NUM00 + FmRadioStation . Station . COLUMN_STATION_FREQ ; \n\tCursorLoader cursorLoader = new CursorLoader ( this , uri , FmRadioStation . COLUMNS , select , new String [ ] { \n\t\tString . valueOf ( FmRadioStation . STATION_TYPE_FAVORITE ) , String . valueOf ( FmRadioStation . STATION_TYPE_SEARCHED ) } \n\t, order ) ; \n\treturn cursorLoader ; \n\t} \n"}, {"code": "protected $F529 convertNamedListToMap ( NamedList $F1011 args ) { \n\t$F529 $F161023 ( argsMap ) ; \n\tif ( args != null ) { \n\t\tfor ( Map . Entry $F6251 entry : args ) { \n\t\t\t$F53096 ( argsMap , entry ) } \n\t\t} \n\treturn argsMap ; \n\t} \n"}, {"code": "$F1 public boolean equals ( final Object other ) { \n\tif ( this == other ) { \n\t\treturn _BOOL ; \n\t\t} \n\telse if ( other == null ) { \n\t\treturn _BOOL ; \n\t\t} \n\telse if ( other instanceof ExpressionMatcher ) { \n\t\tfinal ExpressionMatcher o = ( ExpressionMatcher ) other ; \n\t\tif ( typeMatching != o . typeMatching ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\telse if ( exactMatching != o . exactMatching ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\telse if ( similarMatching != o . similarMatching ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\telse if ( caseInsensitive != o . caseInsensitive ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\telse { \n\t\t\treturn ( jokerMatching == o . jokerMatching ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public boolean hasCapabilities $F24643 ( capabilities ) { \n\t$F5442 ( arr , capabilities ) capabilities . toArray ( arr ) ; \n\treturn hasCapabilities ( arr ) ; \n\t} \n"}, {"code": "private static double euclideanNorm ( double vector [ ] ) { \n\tint n = vector . length ; \n\t$F96078 ( n ) if ( n == NUM00 ) { \n\t\treturn Math . abs ( vector [ NUM00 ] ) ; \n\t\t} \n\tdouble scale = NUM00 ; \n\tdouble sum = NUM00 ; \n\tfor ( $F119 ( i , n ) ) { \n\t\tif ( vector [ i ] != NUM00 ) { \n\t\t\tdouble abs = Math . abs ( vector [ i ] ) ; \n\t\t\tif ( scale < abs ) { \n\t\t\t\tdouble t = scale / abs ; \n\t\t\t\tsum = NUM00 + sum * ( t * t ) ; \n\t\t\t\tscale = abs ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tdouble t = abs / scale ; \n\t\t\t\tsum += t * t ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn scale * Math . sqrt ( sum ) ; \n\t} \n"}, {"code": "public static void assignBucketsToPartitions ( Region $F5162 region ) { \n\tPartitionedRegion pr = isPartitionedCheck ( region ) ; \n\tRecoveryLock lock = null ; \n\ttry { \n\t\tlock = pr . getRecoveryLock ( ) ; \n\t\t$F790 ( lock ) for ( int i = NUM00 ; \n\t\ti < getNumberOfBuckets ( pr ) ; \n\t\ti ++ ) { \n\t\t\tpr . createBucket ( i , NUM00 , null ) ; \n\t\t\t} \n\t\t} \n\tfinally { \n\t\tif ( lock != null ) $F795 ( lock ) } \n\t} \n"}, {"code": "public synchronized void addListener ( Listener l ) $F207 ( listeners , l ) "}, {"code": "public boolean endsWith ( final String str ) { \n\t$F1933 ( str , _BOOL ) $F22998 ( len , str ) $F6482 ( len , _BOOL ) $F8670 ( len , size , _BOOL ) int pos = size - len ; \n\tfor ( $F116983 ( i , len , pos ) ) { \n\t\tif ( buffer [ pos ] != str . charAt ( i ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public boolean find ( int start ) { \n\tif ( start < NUM00 || start > input . length ( ) ) { \n\t\tthrow new IndexOutOfBoundsException ( NUM00 + start + NUM00 + input . length ( ) ) ; \n\t\t} \n\tsynchronized ( this ) { \n\t\tmatchFound = findImpl ( address , input , start , matchOffsets ) ; \n\t\t} \n\treturn matchFound ; \n\t} \n"}, {"code": "public void applyPattern ( String pattern ) { \n\tthis . pattern = pattern ; \n\t$F263153 ( patternTokens ) } \n"}, {"code": "public int numberOfReplies ( final Resource comment ) { \n\tfinal Iterator $F25924 children = comment . listChildren ( ) ; \n\tint size = NUM00 ; \n\twhile $F2921 ( children ) { \n\t\t$F24630 ( children ) size ++ ; \n\t\t} \n\treturn size ; \n\t} \n"}, {"code": "public static $F4203 String toString ( TreeDef $F4203 treeDef , T root , Function < $F11631 , String > toString , String indent ) { \n\t$F83 ( builder ) builder . append ( toString . apply ( root ) ) ; \n\t$F84 ( builder ) toStringHelper ( treeDef , root , toString , indent , builder , indent ) ; \n\t$F92 ( builder ) } \n"}, {"code": "public void cleanUpRemoteSessions $F72 { \n\tsynchronized ( remoteSessionSet ) { \n\t\tfor ( $F2774 ( iter , remoteSessionSet ) ) { \n\t\t\tSessionID sessionID = ( SessionID ) iter . next ( ) ; \n\t\t\tString hostServer = null ; \n\t\t\ttry { \n\t\t\t\thostServer = getCurrentHostServer ( sessionID ) ; \n\t\t\t\t} \n\t\t\t$F15720 if ( ! serverConfig . isLocalServer ( hostServer ) ) $F38599 ( iter ) } \n\t\t} \n\t} \n"}, {"code": "public boolean columnExistsCaseSensitive ( DatabaseMetaData dbMetaData , String tableName , String columnName ) throws SQLException { \n\tResultSet rsTables = dbMetaData . getColumns ( null , null , tableName , columnName ) ; \n\ttry $F43105 ( rsTables ) $F18632 ( closeJDBCResultSet , rsTables ) } \n"}, {"code": "public void actionPerformed ( ActionEvent e ) { \n\t$F185684 ( c , textArea ) if ( c . getDot ( ) != c . getMark ( ) ) $F932 RSyntaxDocument doc = ( RSyntaxDocument ) textArea . getDocument ( ) ; \n\tdoc . readLock ( ) ; \n\ttry { \n\t\tremoveHighlights ( ) ; \n\t\tint line = textArea . getCaretLineNumber ( ) ; \n\t\t$F48983 ( tokenList , textArea , line ) int dot = c . getDot ( ) ; \n\t\tToken t = RSyntaxUtilities . getTokenAtOffset ( tokenList , dot ) ; \n\t\tif ( t == null || ! isValidType ( t ) || isNonWordChar ( t ) ) { \n\t\t\tdot -- ; \n\t\t\ttry { \n\t\t\t\tif ( dot >= textArea . getLineStartOffset ( line ) ) { \n\t\t\t\t\tt = RSyntaxUtilities . getTokenAtOffset ( tokenList , dot ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F203264 ( ble ) } \n\t\tif ( t != null && isValidType ( t ) && ! isNonWordChar ( t ) ) { \n\t\t\tRSyntaxTextAreaHighlighter h = ( RSyntaxTextAreaHighlighter ) textArea . getHighlighter ( ) ; \n\t\t\tString lexeme = t . getLexeme ( ) ; \n\t\t\tint type = t . type ; \n\t\t\tfor ( int i = NUM00 ; \n\t\t\ti < textArea . getLineCount ( ) ; \n\t\t\ti ++ ) { \n\t\t\t\t$F48983 ( temp , textArea , i ) while ( temp != null && temp . isPaintable ( ) ) { \n\t\t\t\t\tif ( temp . is ( type , lexeme ) ) { \n\t\t\t\t\t\ttry { \n\t\t\t\t\t\t\tint end = temp . offset + temp . textCount ; \n\t\t\t\t\t\t\tObject tag = h . addMarkedOccurrenceHighlight ( temp . offset , end , p ) ; \n\t\t\t\t\t\t\ttags . add ( tag ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t$F203264 ( ble ) } \n\t\t\t\t\ttemp = temp . getNextToken ( ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tfinally { \n\t\tdoc . readUnlock ( ) ; \n\t\t} \n\ttextArea . fireMarkedOccurrencesChanged ( ) ; \n\t} \n"}, {"code": "public int read $F72 throws IOException { \n\tif $F116620 ( buf ) $F7629 return buf . get ( ) & NUM00 ; \n\t} \n"}, {"code": "public void charactersRaw $F62353 ( start , length ) throws $F2253 { \n\tif ( isOutsideDocElem ( ) && XMLCharacterRecognizer . isWhiteSpace ( ch , start , length ) ) $F665 String s = new String ( ch , start , length ) ; \n\tappend ( m_doc . createProcessingInstruction ( NUM00 , NUM00 ) ) ; \n\tappend ( m_doc . createTextNode ( s ) ) ; \n\t} \n"}, {"code": "private void handleRelease $F72 { \n\tfloat speed = Math . max ( dragHelper . getDragSpeed ( ) , animationSpeed ) ; \n\tif ( getTopMargin ( ) > initialMargin || ( dragHelper . getDragSpeed ( ) > animationSpeed && dragHelper . getDistance ( ) > NUM00 ) || ( getDeviceType ( getContext ( ) ) == DeviceType . TABLET && isMaximized ( ) && getTopMargin ( ) > minMargin ) ) { \n\t\tanimateHideView ( parentHeight - getTopMargin ( ) , speed , new DecelerateInterpolator $F72 , _BOOL ) ; \n\t\t} \n\telse { \n\t\tanimateShowView ( - ( getTopMargin ( ) - minMargin ) , speed , new DecelerateInterpolator $F72 ) ; \n\t\t} \n\t} \n"}, {"code": "private String normalizeTypeValue ( String type ) { \n\tif $F1238 ( INSERT , type ) return INSERT ; \n\tif $F1238 ( REMOVE , type ) return REMOVE ; \n\t$F1274 } \n"}, {"code": "$F1 public LogSeqNum writeToLog $F72 { \n\tList < Constant > rec = buildRecord ( ) ; \n\treturn logMgr . append ( rec . toArray ( new Constant $F2313 ( rec ) ) ) ; \n\t} \n"}, {"code": "public static double gaussian $F72 { \n\tdouble r , x , y ; \n\tdo { \n\t\tx = uniform ( $F72322 ) ; \n\t\ty = uniform ( $F72322 ) ; \n\t\tr = x * x + y * y ; \n\t\t} \n\twhile ( r >= NUM00 || r == NUM00 ) ; \n\treturn x * Math . sqrt ( $F130364 ( Math , r ) / r ) ; \n\t} \n"}, {"code": "public void doneWithParameters $F72 { \n\tif ( info . parameterCount == VAR_ARGS ) { \n\t\t$F2199 ( len , varArgs ) checkParameterCount ( len ) ; \n\t\targs = new Expression [ len ] ; \n\t\tvarArgs . toArray ( args ) ; \n\t\tvarArgs = null ; \n\t\t} \n\telse { \n\t\tint len = args . length ; \n\t\tif ( len > NUM00 && args [ len - NUM00 ] == null ) { \n\t\t\tthrow DbException . get ( ErrorCode . INVALID_PARAMETER_COUNT_2 , info . name , NUM00 + len ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void removeAllX509Certificates $F72 $F9096 ( x509Certificates ) "}, {"code": "public void updateCurrentState ( String whatHappened ) { \n\tUndoEvent undoEvent = createUndoEventForCurrentState ( whatHappened ) ; \n\tif ( undoEvent != null && undoStack != null ) { \n\t\tundoStack . setTheWayThingsAre ( undoEvent ) ; \n\t\t} \n\t} \n"}, {"code": "$F26827 ( w , h , oldw , oldh , super , setupBounds , setupPaints , invalidate ) "}, {"code": "protected void extendElement ( Element e ) $F845 "}, {"code": "$F238095 ( lock , this , a , count , k , p , first ) "}, {"code": "public DTMAxisIterator cloneIterator $F72 { \n\t_isRestartable = _BOOL ; \n\ttry { \n\t\tfinal PrecedingIterator clone = ( PrecedingIterator ) super . clone ( ) ; \n\t\t$F49896 ( stackCopy , _stack ) $F7057 ( System , _stack , stackCopy ) clone . _stack = stackCopy ; \n\t\treturn clone ; \n\t\t} \n\tcatch ( CloneNotSupportedException e ) { \n\t\tthrow new DTMException ( XMLMessages . createXMLMessage ( XMLErrorResources . ER_ITERATOR_CLONE_NOT_SUPPORTED , null ) ) ; \n\t\t} \n\t} \n"}, {"code": "private String readResponseFromServer ( HttpURLConnection urlConnection ) throws RequestFailureException { \n\ttry { \n\t\tInputStreamReader reader = new InputStreamReader ( urlConnection . getInputStream ( ) ) ; \n\t\t$F20481 ( in , reader ) try { \n\t\t\t$F83 ( response ) for ( String line = in . readLine ( ) ; \n\t\t\tline != null ; \n\t\t\tline = in . readLine ( ) ) $F288 ( response , line ) checkServerResponseCode ( urlConnection ) ; \n\t\t\t$F92 ( response ) } \n\t\t$F3229 ( in ) } \n\tcatch ( IOException e ) $F49482 ( e ) } \n"}, {"code": "private void readObject ( ObjectInputStream s ) throws $F6427 { \n\t$F6428 ( s ) $F18045 ( name ) $F18045 ( nodeType ) } \n"}, {"code": "public int contains ( ValueStoreBase vsb ) { \n\tfinal Vector values = vsb . fValues ; \n\t$F10162 ( size1 , values ) if ( fFieldCount <= NUM00 ) { \n\t\tfor ( $F1316 ( i , size1 ) ) { \n\t\t\tshort val = vsb . getValueTypeAt ( i ) ; \n\t\t\tif ( ! valueTypeContains ( val ) || ! fValues . contains ( values . elementAt ( i ) ) ) { \n\t\t\t\treturn i ; \n\t\t\t\t} \n\t\t\telse if ( val == XSConstants . LIST_DT || val == XSConstants . LISTOFUNION_DT ) { \n\t\t\t\tShortList list1 = vsb . getItemValueTypeAt ( i ) ; \n\t\t\t\t$F38676 ( itemValueTypeContains , list1 , i ) } \n\t\t\t} \n\t\t} \n\telse { \n\t\t$F10162 ( size2 , fValues ) OUTER : for ( int i = NUM00 ; \n\t\ti < size1 ; \n\t\ti += fFieldCount ) { \n\t\t\tINNER : for ( int j = NUM00 ; \n\t\t\tj < size2 ; \n\t\t\tj += fFieldCount ) { \n\t\t\t\tfor ( $F1316 ( k , fFieldCount ) ) { \n\t\t\t\t\tfinal Object value1 = values . elementAt ( i + k ) ; \n\t\t\t\t\tfinal Object value2 = fValues . elementAt ( j + k ) ; \n\t\t\t\t\tfinal short valueType1 = vsb . getValueTypeAt ( i + k ) ; \n\t\t\t\t\tfinal short valueType2 = getValueTypeAt ( j + k ) ; \n\t\t\t\t\tif ( value1 != value2 && ( valueType1 != valueType2 || value1 == null || ! value1 . equals ( value2 ) ) ) { \n\t\t\t\t\t\tcontinue INNER ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse if ( valueType1 == XSConstants . LIST_DT || valueType1 == XSConstants . LISTOFUNION_DT ) { \n\t\t\t\t\t\tShortList list1 = vsb . getItemValueTypeAt ( i + k ) ; \n\t\t\t\t\t\tShortList list2 = getItemValueTypeAt ( j + k ) ; \n\t\t\t\t\t\tif ( list1 == null || list2 == null || ! list1 . equals ( list2 ) ) { \n\t\t\t\t\t\t\tcontinue INNER ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\tcontinue OUTER ; \n\t\t\t\t} \n\t\t\treturn i ; \n\t\t\t} \n\t\t} \n\t$F150 } \n"}, {"code": "public boolean isSupportedOption ( String name ) { \n\tboolean isSupported = _BOOL ; \n\tfor ( Iterator i = mandatoryOptions . iterator ( ) ; \n\ti . hasNext ( ) && ! isSupported ; \n\t) { \n\t\t$F2778 ( opt , i ) isSupported = opt . equals ( name ) ; \n\t\t} \n\tfor ( Iterator i = optionalOptions . iterator ( ) ; \n\ti . hasNext ( ) && ! isSupported ; \n\t) { \n\t\t$F2778 ( opt , i ) isSupported = opt . equals ( name ) ; \n\t\t} \n\treturn isSupported ; \n\t} \n"}, {"code": "private boolean areAllNodeEnded $F72 { \n\tif ( protocol != null && protocol . hasProtocol ( ) ) { \n\t\tfinal Collection < ProtocolNode > protocolNodes = protocolNodeParticipantMap . values ( ) ; \n\t\t$F4975 ( protocolNodes , _BOOL ) for ( final ProtocolNode node : protocolNodes ) { \n\t\t\tif ( ! ( node != null && node . isTerminal ( ) ) ) { \n\t\t\t\treturn _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\treturn _BOOL ; \n\t\t} \n\tfinal Collection < FIPAMessage > finalMsgs = noProtocolNodeParticipantMap . values ( ) ; \n\t$F4975 ( finalMsgs , _BOOL ) for ( final FIPAMessage finalMsg : finalMsgs ) { \n\t\tif ( finalMsg . getPerformative ( ) != FIPAConstants . Performatives . END_CONVERSATION ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "$F77358 ( retval , optionTag ) "}, {"code": "public void addLiteralResultAttribute ( AVT avt ) { \n\tif ( null == m_avts ) $F13241 ( m_avts ) m_avts . add ( avt ) ; \n\t} \n"}, {"code": "protected void moveSelectionToFirstPosition $F72 { \n\tif ( selectionTable . getSelectionCount ( ) == NUM00 ) $F932 int index = NUM00 ; \n\tfor ( final TableItem tableItem : selectionTable . getSelection ( ) ) { \n\t\tfinal DLItem item = ( DLItem ) tableItem . getData ( ) ; \n\t\tselection . remove ( item ) ; \n\t\tselection . add ( index ++ , item ) ; \n\t\t} \n\tredrawTables ( ) ; \n\tselectionTable . select ( NUM00 , index - NUM00 ) ; \n\tselectionTable . forceFocus ( ) ; \n\t} \n"}, {"code": "private void itemsArrayToCombinedBuffer $F10810 ( itemsArray ) { \n\tfinal int extra = NUM00 ; \n\tminValue_ = itemsArray [ NUM00 ] ; \n\tmaxValue_ = itemsArray [ NUM00 ] ; \n\t$F21535 ( System , itemsArray , extra , combinedBuffer_ , baseBufferCount_ ) long bits = bitPattern_ ; \n\tif ( bits > NUM00 ) { \n\t\tint index = extra + baseBufferCount_ ; \n\t\tfor ( int level = NUM00 ; \n\t\tbits != NUM00 ; \n\t\tlevel ++ , bits >>>= NUM00 ) { \n\t\t\tif ( ( bits & NUM00 ) > NUM00 ) { \n\t\t\t\tSystem . arraycopy ( itemsArray , index , combinedBuffer_ , ( NUM00 + level ) * k_ , k_ ) ; \n\t\t\t\tindex += k_ ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public SQLQuery ( $F20474 type , String sqlExpression , QueryResultType queryResultType , Object ... parameters ) { \n\tthis ( sqlExpression , type . getName ( ) , null , queryResultType , parameters ) ; \n\t} \n"}, {"code": "public void bob ( MowzieModelRenderer box , float speed , float degree , boolean bounce , float f , float f1 ) { \n\tfloat bob = ( float ) ( Math . sin ( f * speed ) * f1 * degree - f1 * degree ) ; \n\tif ( bounce ) bob = ( float ) - Math . abs ( ( Math . sin ( f * speed ) * f1 * degree ) ) ; \n\tbox . rotationPointY += bob ; \n\t} \n"}, {"code": "private static void rejectUnsupportedOptions ( Properties p ) throws SQLFeatureNotSupportedException { \n\tif ( p . containsKey ( DataSourceFactory . JDBC_ROLE_NAME ) ) { \n\t\tthrow new SQLFeatureNotSupportedException ( NUM00 + DataSourceFactory . JDBC_ROLE_NAME + NUM00 ) ; \n\t\t} \n\tif ( p . containsKey ( DataSourceFactory . JDBC_DATASOURCE_NAME ) ) { \n\t\tthrow new SQLFeatureNotSupportedException ( NUM00 + DataSourceFactory . JDBC_DATASOURCE_NAME + NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "public IOUtils $F72 $F5795 ( super ) "}, {"code": "$F184647 ( v , buf , name , av , i , b , readAnnotationValues , _BOOL , readConst , readUnsignedShort , readInt , items , Boolean , readUTF8 , Type , size , this , bv , zv , sv , cv , iv , lv , readLong , fv , Float , dv , Double ) "}, {"code": "private void decrementWorkerCount $F72 { \n\tdo $F845 while ( ! $F47063 ( compareAndDecrementWorkerCount , ctl ) ) ; \n\t} \n"}, {"code": "public static float buildFloat ( int mant , int exp ) { \n\tif ( exp < - NUM00 || mant == NUM00 ) $F1083 if ( exp >= NUM00 ) { \n\t\treturn ( mant > NUM00 ) ? Float . POSITIVE_INFINITY : Float . NEGATIVE_INFINITY ; \n\t\t} \n\t$F6482 ( exp , mant ) if ( mant >= $F152872 ) { \n\t\tmant ++ ; \n\t\t} \n\treturn ( float ) ( ( exp > NUM00 ) ? mant * pow10 [ exp ] : mant / pow10 [ - exp ] ) ; \n\t} \n"}, {"code": "public void clearValues $F72 $F13478 ( mDataSets , notifyDataChanged ) "}, {"code": "public boolean hasModeSupport $F72 { \n\treturn isAvailable ( ) && mCapabilities . intersects ( mAllModes ) ; \n\t} \n"}, {"code": "public void runTest $F72 throws Throwable { \n\tDocument doc ; \n\tNodeList genderList ; \n\tNode genderNode ; \n\tEntityReference entRef ; \n\tElement entElement ; \n\tCharacterData entElementText ; \n\tint nodeType ; \n\t$F236 ( doc , load , _BOOL ) $F237 ( genderList , doc ) $F238 ( genderNode , genderList ) entRef = ( EntityReference ) genderNode . getFirstChild ( ) ; \n\tassertNotNull ( NUM00 , entRef ) ; \n\tnodeType = ( int ) entRef . getNodeType ( ) ; \n\tif ( equals ( NUM00 , nodeType ) ) { \n\t\tentRef = doc . createEntityReference ( NUM00 ) ; \n\t\tassertNotNull ( NUM00 , entRef ) ; \n\t\t} \n\tentElement = ( Element ) entRef . getFirstChild ( ) ; \n\tassertNotNull ( NUM00 , entElement ) ; \n\t$F241 ( entElementText , entElement ) assertNotNull ( NUM00 , entElementText ) ; \n\t{ \n\t\tboolean success = _BOOL ; \n\t\ttry { \n\t\t\tentElementText . setNodeValue ( NUM00 ) ; \n\t\t\t} \n\t\tcatch ( DOMException ex ) { \n\t\t\tsuccess = ( ex . code == DOMException . NO_MODIFICATION_ALLOWED_ERR ) ; \n\t\t\t} \n\t\tassertTrue ( NUM00 , success ) ; \n\t\t} \n\t} \n"}, {"code": "public void testConstrStringWithExponentWithPoint2 $F72 $F114473 ( a , aScale , bA , aNumber , assertEquals ) "}, {"code": "public static void updateItemInDatabase $F137071 ( context , item ) { \n\t$F248400 ( values ) item . onAddToDatabase ( context , values ) ; \n\tupdateItemInDatabaseHelper ( context , values , item , NUM00 ) ; \n\t} \n"}, {"code": "$F1 public String graph $F72 throws Exception { \n\t$F280 ( text ) $F84 ( text ) m_cobwebTree . graphTree ( text ) ; \n\t$F84 ( text ) $F92 ( text ) } \n"}, {"code": "$F1 public $F987 listOptions $F72 { \n\t$F46582 ( result , enumToVector , super ) $F46588 ( result , defaultNumAttributes ) $F1000 ( result ) $F1000 ( result ) $F1000 ( result ) $F1007 ( result ) } \n"}, {"code": "public synchronized $F152376 remove ( long timeoutMillis ) throws InterruptedException { \n\t$F20450 ( timeoutMillis ) if ( head != null ) $F2905 ( poll ) if ( timeoutMillis == NUM00 || ( timeoutMillis > Long . MAX_VALUE / NANOS_PER_MILLI ) ) { \n\t\tdo $F73598 ( wait ) while ( head == null ) ; \n\t\treturn poll ( ) ; \n\t\t} \n\tlong nanosToWait = timeoutMillis * NANOS_PER_MILLI ; \n\tint timeoutNanos = NUM00 ; \n\t$F25238 ( startTime , System ) while ( _BOOL ) { \n\t\twait ( timeoutMillis , timeoutNanos ) ; \n\t\t$F111836 ( head ) long nanosElapsed = System . nanoTime ( ) - startTime ; \n\t\tlong nanosRemaining = nanosToWait - nanosElapsed ; \n\t\t$F65649 ( nanosRemaining ) timeoutMillis = nanosRemaining / NANOS_PER_MILLI ; \n\t\t$F210313 ( timeoutNanos , nanosRemaining , timeoutMillis , NANOS_PER_MILLI ) } \n\treturn poll ( ) ; \n\t} \n"}, {"code": "public PathImpl lookupImpl ( String userPath , $F2100 ( newAttributes ) , boolean isAllowRoot ) { \n\tif ( userPath == null ) { \n\t\treturn lookupImpl ( getPath ( ) , newAttributes , isAllowRoot ) ; \n\t\t} \n\tif ( ! isAllowRoot ) { \n\t\treturn schemeWalk ( userPath , newAttributes , userPath , NUM00 ) ; \n\t\t} \n\tString scheme = scanScheme ( userPath ) ; \n\tif ( scheme == null ) { \n\t\treturn schemeWalk ( userPath , newAttributes , userPath , NUM00 ) ; \n\t\t} \n\tPathImpl path ; \n\tSchemeMap schemeMap = _schemeMap ; \n\tif ( isWindows ( ) ) { \n\t\t$F115 ( length , scheme ) char ch ; \n\t\tif ( length == NUM00 && ( NUM00 <= $F64777 ( ch , scheme ) && ch <= NUM00 || NUM00 <= ch && ch <= NUM00 ) ) { \n\t\t\tuserPath = Character . toLowerCase ( ch ) + userPath . substring ( NUM00 ) ; \n\t\t\tif ( _isTestWindows ) return schemeWalk ( userPath , newAttributes , NUM00 + userPath , NUM00 ) ; \n\t\t\t$F178035 ( path , schemeMap ) if ( path != null ) return path . schemeWalk ( userPath , newAttributes , NUM00 + userPath , NUM00 ) ; \n\t\t\telse return schemeWalk ( userPath , newAttributes , NUM00 + userPath , NUM00 ) ; \n\t\t\t} \n\t\t} \n\tpath = schemeMap . get ( scheme ) ; \n\tif ( path == null ) { \n\t\treturn schemeWalk ( userPath , newAttributes , userPath , NUM00 ) ; \n\t\t} \n\telse { \n\t\treturn path . schemeWalk ( userPath , newAttributes , userPath , $F1285 ( scheme ) ) ; \n\t\t} \n\t} \n"}, {"code": "public void addColor ( int color ) { \n\tif ( mColors == null ) $F117818 ( mColors ) mColors . add ( color ) ; \n\t} \n"}, {"code": "static Integer readRuleID ( final SubstringReader reader ) throws DecodeException { \n\tint length = NUM00 ; \n\treader . skipWhitespaces ( ) ; \n\t$F115573 ( reader ) try { \n\t\twhile ( reader . read ( ) != NUM00 ) { \n\t\t\tlength ++ ; \n\t\t\t} \n\t\tif ( length == NUM00 ) { \n\t\t\tthrow DecodeException . error ( ERR_ATTR_SYNTAX_RULE_ID_NO_VALUE1 . get ( reader . pos ( ) - NUM00 ) ) ; \n\t\t\t} \n\t\t$F2268 ( reader ) final String ruleID = reader . read ( length ) ; \n\t\ttry $F62107 ( Integer , ruleID ) catch ( final NumberFormatException e ) { \n\t\t\tthrow DecodeException . error ( ERR_ATTR_SYNTAX_RULE_ID_INVALID1 . get ( ruleID ) ) ; \n\t\t\t} \n\t\t} \n\tcatch ( final StringIndexOutOfBoundsException e ) { \n\t\tthrow DecodeException . error ( ERR_ATTR_SYNTAX_TRUNCATED_VALUE1 . get ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "public void removeIndex ( IIndex index ) $F275325 ( index , indices ) "}, {"code": "private AttributeActionSet processAttributeSection ( ModeUsage modeUsage , String ns , IntSet indexSet , Attributes attributes ) throws SAXException { \n\tMode mode = modeUsage . getMode ( currentSection . context ) ; \n\tAttributeActionSet actions = mode . getAttributeActions ( ns ) ; \n\tif ( actions . getReject ( ) && ! attributeNamespaceRejected ) { \n\t\tattributeNamespaceRejected = _BOOL ; \n\t\tif ( eh != null ) eh . error ( new SAXParseException ( localizer . message ( NUM00 , ns ) , locator ) ) ; \n\t\t} \n\tSchema [ ] schemas = actions . getSchemas ( ) ; \n\tfor ( $F1139 ( j , schemas ) ) { \n\t\tif $F152313 ( attributeSchemas , schemas , j ) $F598 $F24616 ( attributeSchemas , schemas , j ) if ( filteredAttributes == null ) filteredAttributes = filterAttributes ( indexSet , attributes ) ; \n\t\tvalidateAttributes ( schemas [ j ] , filteredAttributes ) ; \n\t\t} \n\treturn actions ; \n\t} \n"}, {"code": "public void initialize ( Context context , HapticFeedbackController hapticFeedbackController , int initialHoursOfDay , int initialMinutes , boolean is24HourMode ) { \n\t$F17932 ( mTimeInitialized , Log , TAG ) mHapticFeedbackController = hapticFeedbackController ; \n\tmIs24HourMode = is24HourMode ; \n\tmHideAmPm = mAccessibilityManager . isTouchExplorationEnabled ( ) ? _BOOL : mIs24HourMode ; \n\tmCircleView . initialize ( context , mHideAmPm ) ; \n\t$F5217 ( mCircleView ) if ( ! mHideAmPm ) { \n\t\tmAmPmCirclesView . initialize ( context , initialHoursOfDay < NUM00 ? AM : PM ) ; \n\t\t$F5217 ( mAmPmCirclesView ) } \n\t$F17934 ( res , context ) $F134655 ( hours ) $F134655 ( hours_24 ) $F134655 ( minutes ) $F808 ( hoursTexts ) $F808 ( innerHoursTexts ) $F808 ( minutesTexts ) for ( $F6268 ( i ) ) { \n\t\thoursTexts [ i ] = is24HourMode ? $F134656 ( String , hours_24 , i ) : $F134656 ( String , hours , i ) ; \n\t\tinnerHoursTexts [ i ] = $F134656 ( String , hours , i ) ; \n\t\tminutesTexts [ i ] = $F134656 ( String , minutes , i ) ; \n\t\t} \n\tmHourRadialTextsView . initialize ( res , hoursTexts , ( is24HourMode ? innerHoursTexts : null ) , mHideAmPm , _BOOL ) ; \n\t$F5217 ( mHourRadialTextsView ) mMinuteRadialTextsView . initialize ( res , minutesTexts , null , mHideAmPm , _BOOL ) ; \n\t$F5217 ( mMinuteRadialTextsView ) setValueForItem ( HOUR_INDEX , initialHoursOfDay ) ; \n\tsetValueForItem ( MINUTE_INDEX , initialMinutes ) ; \n\tint hourDegrees = ( initialHoursOfDay % NUM00 ) * HOUR_VALUE_TO_DEGREES_STEP_SIZE ; \n\tmHourRadialSelectorView . initialize ( context , mHideAmPm , is24HourMode , _BOOL , hourDegrees , isHourInnerCircle ( initialHoursOfDay ) ) ; \n\tint minuteDegrees = initialMinutes * MINUTE_VALUE_TO_DEGREES_STEP_SIZE ; \n\tmMinuteRadialSelectorView . initialize ( context , mHideAmPm , _BOOL , _BOOL , minuteDegrees , _BOOL ) ; \n\tmTimeInitialized = _BOOL ; \n\t} \n"}, {"code": "$F1 public double conf ( double totalWeight , double delta ) { \n\treturn inverseNormal ( NUM00 - delta / NUM00 ) / ( NUM00 * Math . sqrt ( totalWeight ) ) ; \n\t} \n"}, {"code": "$F1 public final int readUnsignedByte $F72 throws IOException { \n\treturn dis . readUnsignedByte ( ) ; \n\t} \n"}, {"code": "public synchronized static void ensureSecurityManager ( $F1431 $F806 args ) { \n\tSecurityPolicyLoader . load ( SystemBoot . class , NUM00 ) ; \n\tSystem . setSecurityManager ( new RMISecurityManager $F72 ) ; \n\t} \n"}, {"code": "$F58470 ( super ) "}, {"code": "public String ridgeTipText $F72 $F2455 "}, {"code": "public void updateEnableStateSwingItems $F72 { \n\tif ( SwingUtilities . isEventDispatchThread ( ) ) super . updateEnableState ( ) ; \n\t} \n"}, {"code": "public void reset $F72 { \n\t$F7057 ( System , IV , cbcV ) $F26770 ( Arrays , cbcNextV ) $F2268 ( cipher ) } \n"}, {"code": "protected final boolean _loadToHaveAtLeast ( int minAvailable ) throws IOException { \n\t$F1933 ( _inputStream , _BOOL ) int amount = _inputEnd - _inputPtr ; \n\tif ( amount > NUM00 && _inputPtr > NUM00 ) { \n\t\t_currInputProcessed += _inputPtr ; \n\t\t$F51886 ( System , _inputBuffer , _inputPtr , amount ) _inputEnd = amount ; \n\t\t} \n\telse { \n\t\t_inputEnd = NUM00 ; \n\t\t} \n\t_inputPtr = NUM00 ; \n\twhile ( _inputEnd < minAvailable ) { \n\t\t$F7994 ( count , _inputStream , _inputBuffer , _inputEnd ) if ( count < NUM00 ) { \n\t\t\t_closeInput ( ) ; \n\t\t\tif ( count == NUM00 ) $F5244 ( amount ) return _BOOL ; \n\t\t\t} \n\t\t_inputEnd += count ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public DataTypeParser register ( int jdbcType , String grammar ) { \n\t$F10578 ( Objects , grammar ) DataTypePattern pattern = parser . parse ( jdbcType , grammar ) ; \n\tpattern . forEachFirstToken ( null ) ; \n\treturn this ; \n\t} \n"}, {"code": "public void close $F72 throws GenericDataSourceException { \n\tif ( _manualTX ) { \n\t\t$F37492 ( Debug , _manualTX , module ) commit ( ) ; \n\t\t} \n\t_sql = null ; \n\tif ( _rs != null ) { \n\t\ttry { \n\t\t\t$F59 ( _rs ) $F37492 ( Debug , _manualTX , module ) } \n\t\tcatch ( SQLException sqle ) { \n\t\t\t$F102466 ( Debug , sqle , module ) } \n\t\t_rs = null ; \n\t\t} \n\tif ( _ps != null ) { \n\t\ttry { \n\t\t\t$F59 ( _ps ) $F37492 ( Debug , _manualTX , module ) } \n\t\tcatch ( SQLException sqle ) { \n\t\t\t$F102466 ( Debug , sqle , module ) } \n\t\t_ps = null ; \n\t\t} \n\tif ( ( _connection != null ) && _bDeleteConnection ) { \n\t\ttry { \n\t\t\t$F59 ( _connection ) $F37492 ( Debug , _manualTX , module ) } \n\t\tcatch ( SQLException sqle ) { \n\t\t\t$F102466 ( Debug , sqle , module ) } \n\t\t_connection = null ; \n\t\t} \n\t} \n"}, {"code": "private DefaultMutableTreeNode copy ( TreeNode node ) { \n\treturn new DefaultMutableTreeNode ( node ) ; \n\t} \n"}, {"code": "public static void agentmain ( String args , Instrumentation inst ) throws Exception { \n\t$F973 ( logger ) checkTransformerState ( ) ; \n\tinst . addTransformer ( transformer , _BOOL ) ; \n\tinstrumentation = inst ; \n\t} \n"}, {"code": "public $F96 data $F72 { \n\t$F1538 ( bos ) try { \n\t\ttoData ( bos ) ; \n\t\t} \n\t$F12153 ( e ) $F11316 ( bos ) } \n"}, {"code": "$F28183 public static $F4203 ReactiveSeq $F4203 of ( final T ... elements ) { \n\tfinal ReversingArraySpliterator $F4203 array = new ReversingArraySpliterator $F4203 ( elements , _BOOL , NUM00 ) ; \n\treturn StreamUtils . reactiveSeq ( StreamSupport . stream ( array , _BOOL ) , Optional . ofNullable ( array ) ) ; \n\t} \n"}, {"code": "private void decodeLtp ( LongTermPrediction ltp , int maxSfb ) { \n\tltp . lag = br . read ( NUM00 ) ; \n\tltp . coef = ltp_coef [ br . read ( NUM00 ) ] ; \n\tfor ( int sfb = NUM00 ; \n\tsfb < Math . min ( maxSfb , MAX_LTP_LONG_SFB ) ; \n\tsfb ++ ) { \n\t\tltp . used [ sfb ] = br . readBool ( ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F4203 $F5675 instantiateAll ( $F806 classes , ClassLoader classLoader ) { \n\t$F237846 ( clazzes ) for ( String clazz : classes ) { \n\t\tif ( StringUtils . hasLength ( clazz ) ) { \n\t\t\ttry { \n\t\t\t\tclazzes . add ( ClassUtils . $F4203 instantiate ( clazz , classLoader ) ) ; \n\t\t\t\t} \n\t\t\tcatch ( Exception e ) { \n\t\t\t\tthrow new CassandraMigrationException ( NUM00 + clazz , e ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn clazzes ; \n\t} \n"}, {"code": "static void clearInstanceCache $F72 { \n\t$F54044 ( INSTANCE_CACHE ) } \n"}, {"code": "public static < E extends Enum $F11685 & BitmapableEnum > $F62484 toEnumSet ( $F48880 type , int bitmap ) { \n\t$F1149 ( type ) $F62484 s = EnumSet . noneOf ( type ) ; \n\tint allSetBitmap = NUM00 ; \n\tfor ( E element : type . getEnumConstants ( ) ) { \n\t\tif ( Integer . bitCount ( element . getValue ( ) ) != NUM00 ) { \n\t\t\tString msg = String . format ( $F38 , element . toString ( ) , element . getValue ( ) , type . getName ( ) ) ; \n\t\t\t$F29415 ( msg ) } \n\t\tallSetBitmap |= element . getValue ( ) ; \n\t\tif ( ( bitmap & element . getValue ( ) ) != NUM00 ) s . add ( element ) ; \n\t\t} \n\tif ( ( ( ~ allSetBitmap ) & bitmap ) != NUM00 ) { \n\t\tString msg = String . format ( NUM00 + NUM00 , bitmap , type . getName ( ) ) ; \n\t\t$F29415 ( msg ) } \n\treturn s ; \n\t} \n"}, {"code": "public UndirectedGraphNode cloneGraphB ( UndirectedGraphNode node ) { \n\tMap < Integer , UndirectedGraphNode > $F8690 ( map ) ; \n\treturn dfs ( node , map ) ; \n\t} \n"}, {"code": "public synchronized void notifySessionBorrowed $F72 { \n\tif $F8415 ( LOGGER ) LOGGER . logTrace ( this + NUM00 ) ; \n\tcurrentContext = new TransactionContext ( resource , xaResource ) ; \n\tallContexts . add ( currentContext ) ; \n\tclosed = _BOOL ; \n\t} \n"}, {"code": "$F1 public synchronized void close $F72 throws SQLException { \n\ttry { \n\t\tdebugCodeCall ( NUM00 ) ; \n\t\t$F2329 ( session ) CloseWatcher . unregister ( watcher ) ; \n\t\t$F65148 ( session ) if ( executingStatement != null ) { \n\t\t\ttry $F65149 ( executingStatement ) $F1214 } \n\t\tsynchronized ( session ) { \n\t\t\ttry { \n\t\t\t\tif $F81110 ( session ) { \n\t\t\t\t\ttry { \n\t\t\t\t\t\tif ( session . hasPendingTransaction ( ) ) { \n\t\t\t\t\t\t\tif ( ! session . isReconnectNeeded ( _BOOL ) ) { \n\t\t\t\t\t\t\t\ttry $F5795 ( rollbackInternal ) catch ( DbException e ) { \n\t\t\t\t\t\t\t\t\tif ( e . getErrorCode ( ) != ErrorCode . CONNECTION_BROKEN_1 ) { \n\t\t\t\t\t\t\t\t\t\tthrow e ; \n\t\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\tsession . afterWriting ( ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\tclosePreparedCommands ( ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t$F3229 ( session ) } \n\t\t\t\t} \n\t\t\t$F14110 ( session ) } \n\t\t} \n\tcatch ( Exception e ) $F34850 ( logAndConvert , e ) } \n"}, {"code": "public void testPlusMathContextNegative $F72 { \n\tString a = NUM00 ; \n\tint aScale = NUM00 ; \n\tint precision = NUM00 ; \n\tRoundingMode rm = RoundingMode . CEILING ; \n\t$F9512 ( mc , precision , rm ) String c = NUM00 ; \n\tint cScale = NUM00 ; \n\t$F1918 ( aNumber , a , aScale ) BigDecimal res = aNumber . plus ( mc ) ; \n\t$F1925 ( assertEquals , c , res ) $F1928 ( assertEquals , cScale , res ) } \n"}, {"code": "public static WKTGeometry createEmpty ( WKTType wktType ) { \n\tWKTGeometry wktGeometry = new WKTGeometry $F72 ; \n\twktGeometry . setGeometryType ( wktType ) ; \n\treturn wktGeometry ; \n\t} \n"}, {"code": "public PeerLookupTask createPeerLookup $F97 ( info_hash ) { \n\tif $F931 ( isRunning ) $F1337 Key id = new Key ( info_hash ) ; \n\tRPCServer srv = serverManager . getRandomActiveServer ( _BOOL ) ; \n\t$F1275 ( srv ) PeerLookupTask lookupTask = new PeerLookupTask ( srv , node , id ) ; \n\treturn lookupTask ; \n\t} \n"}, {"code": "public void addChild ( Node ... nodes ) { \n\tfor ( Node node : nodes ) { \n\t\tnode . detachFromParent ( ) ; \n\t\tnode . parentNode = this ; \n\t\tinitChildNodes ( node ) ; \n\t\tchildNodes . add ( node ) ; \n\t\t} \n\treindexChildrenOnAdd ( nodes . length ) ; \n\t} \n"}, {"code": "public static void writeStringASCII ( ByteBuf stream , String str ) throws UnsupportedEncodingException { \n\tfinal $F96 bytes = str . getBytes ( NUM00 ) ; \n\t$F284247 ( stream , str ) stream . writeBytes ( bytes ) ; \n\t} \n"}, {"code": "$F18534 ( newcount , currentBufferIndex , buffers , filledBufferSum , currentBuffer , newBufferSize , Math ) "}, {"code": "public void testWrite3 $F72 throws Exception { \n\t$F1191 ( data ) $F1196 ( tos ) CipherOutputStream cos = new CipherOutputStream $F1200 ( tos ) ; \n\tfor ( $F1139 ( i , data ) ) { \n\t\tcos . write ( data , i , NUM00 ) ; \n\t\t} \n\t$F1206 ( cos ) $F1208 ( result , tos ) $F1211 ( Arrays , result , data , fail ) } \n"}, {"code": "public void addListener ( UpdateManagerListener listener ) $F207 ( listeners , listener ) "}, {"code": "$F1 public void onDetach $F72 { \n\tsynchronized ( mThread ) { \n\t\tmProgressBar = null ; \n\t\tmReady = _BOOL ; \n\t\t$F8071 ( mThread ) } \n\tsuper . onDetach ( ) ; \n\t} \n"}, {"code": "public void outputSource $F120580 ( module , line , s ) { \n\t$F83 ( sb ) appendSource ( sb , module , line , s , _BOOL ) ; \n\t$F31458 ( out , sb ) } \n"}, {"code": "SortedMap $F2538 properties $F72 ; \n"}, {"code": "public static String suppressWhiteSpace ( String str ) { \n\t$F1749 ( len , str ) $F7542 ( sb , len ) char c ; \n\tchar buffer = NUM00 ; \n\tfor ( $F119 ( i , len ) ) { \n\t\tc = str . charAt ( i ) ; \n\t\tif $F37111 ( c ) buffer = NUM00 ; \n\t\telse if ( isWhiteSpace ( c ) ) { \n\t\t\tif ( buffer == NUM00 ) buffer = c ; \n\t\t\t} \n\t\telse { \n\t\t\tif ( buffer != NUM00 ) { \n\t\t\t\tsb . append ( buffer ) ; \n\t\t\t\tbuffer = NUM00 ; \n\t\t\t\t} \n\t\t\tsb . append ( c ) ; \n\t\t\t} \n\t\t} \n\tif ( buffer != NUM00 ) sb . append ( buffer ) ; \n\t$F92 ( sb ) } \n"}, {"code": "private $F9341 findPredecessor $F154318 ( key ) { \n\t$F61745 ( key ) for ( $F589 ) { \n\t\t$F154321 ( q , head ) $F154323 ( r , q ) for ( $F589 ) { \n\t\t\tif ( r != null ) { \n\t\t\t\t$F154325 ( n , r ) K k = n . key ; \n\t\t\t\t$F61755 ( n , q , r ) if $F9032 ( key , k ) $F61756 ( q , r ) } \n\t\t\t$F154319 d = q . down ; \n\t\t\tif ( d != null ) { \n\t\t\t\tq = d ; \n\t\t\t\tr = d . right ; \n\t\t\t\t} \n\t\t\telse return q . node ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F47733 ( reader , writer , buffer , count ) "}, {"code": "protected ConnectionStateSSLv3 ( SSLSessionImpl session ) { \n\ttry { \n\t\tCipherSuite cipherSuite = session . cipherSuite ; \n\t\tboolean is_exportabe = cipherSuite . isExportable ( ) ; \n\t\thash_size = cipherSuite . getMACLength ( ) ; \n\t\tint key_size = ( is_exportabe ) ? cipherSuite . keyMaterial : cipherSuite . expandedKeyMaterial ; \n\t\tint iv_size = cipherSuite . ivSize ; \n\t\tblock_size = cipherSuite . getBlockSize ( ) ; \n\t\tString algName = cipherSuite . getBulkEncryptionAlgorithm ( ) ; \n\t\tString hashName = cipherSuite . getHashName ( ) ; \n\t\tif ( logger != null ) { \n\t\t\t$F8438 ( logger ) logger . println ( NUM00 + session . getCipherSuite ( ) ) ; \n\t\t\t$F7957 ( logger , algName ) $F7957 ( logger , hashName ) $F7957 ( logger , hash_size ) $F7957 ( logger , block_size ) $F7957 ( logger , iv_size ) $F7957 ( logger , key_size ) } \n\t\t$F56524 ( clientRandom , session ) $F56524 ( serverRandom , session ) $F96 key_block = new byte [ NUM00 * hash_size + NUM00 * key_size + NUM00 * iv_size ] ; \n\t\t$F148496 ( seed , clientRandom , serverRandom ) $F7057 ( System , serverRandom , seed ) $F11244 ( System , clientRandom , seed , serverRandom ) PRF . computePRF_SSLv3 ( key_block , session . master_secret , seed ) ; \n\t\t$F2175 ( client_mac_secret , hash_size ) $F2175 ( server_mac_secret , hash_size ) $F2175 ( client_key , key_size ) $F2175 ( server_key , key_size ) boolean is_client = ! session . isServer ; \n\t\t$F135 ( System , key_block , client_mac_secret , hash_size ) $F30985 ( System , key_block , hash_size , server_mac_secret ) System . arraycopy ( key_block , NUM00 * hash_size , client_key , NUM00 , key_size ) ; \n\t\tSystem . arraycopy ( key_block , NUM00 * hash_size + key_size , server_key , NUM00 , key_size ) ; \n\t\tIvParameterSpec clientIV = null ; \n\t\tIvParameterSpec serverIV = null ; \n\t\tif ( is_exportabe ) { \n\t\t\tif ( logger != null ) $F12204 ( logger ) $F5348 ( md5 , MessageDigest ) md5 . update ( client_key ) ; \n\t\t\tmd5 . update ( clientRandom ) ; \n\t\t\tmd5 . update ( serverRandom ) ; \n\t\t\t$F14611 ( client_key , md5 ) md5 . update ( server_key ) ; \n\t\t\tmd5 . update ( serverRandom ) ; \n\t\t\tmd5 . update ( clientRandom ) ; \n\t\t\t$F14611 ( server_key , md5 ) key_size = cipherSuite . expandedKeyMaterial ; \n\t\t\tif ( block_size != NUM00 ) { \n\t\t\t\tmd5 . update ( clientRandom ) ; \n\t\t\t\tmd5 . update ( serverRandom ) ; \n\t\t\t\tclientIV = new IvParameterSpec ( md5 . digest ( ) , NUM00 , iv_size ) ; \n\t\t\t\tmd5 . update ( serverRandom ) ; \n\t\t\t\tmd5 . update ( clientRandom ) ; \n\t\t\t\tserverIV = new IvParameterSpec ( md5 . digest ( ) , NUM00 , iv_size ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse if ( block_size != NUM00 ) { \n\t\t\tclientIV = new IvParameterSpec ( key_block , NUM00 * hash_size + NUM00 * key_size , iv_size ) ; \n\t\t\tserverIV = new IvParameterSpec ( key_block , NUM00 * hash_size + NUM00 * key_size + iv_size , iv_size ) ; \n\t\t\t} \n\t\tif ( logger != null ) { \n\t\t\t$F7957 ( logger , is_exportabe ) $F8438 ( logger ) logger . print ( session . master_secret ) ; \n\t\t\t$F8438 ( logger ) logger . print ( clientRandom ) ; \n\t\t\t$F8438 ( logger ) logger . print ( serverRandom ) ; \n\t\t\t$F8438 ( logger ) logger . print ( client_mac_secret ) ; \n\t\t\t$F8438 ( logger ) logger . print ( server_mac_secret ) ; \n\t\t\t$F8438 ( logger ) logger . print ( client_key , NUM00 , key_size ) ; \n\t\t\t$F8438 ( logger ) logger . print ( server_key , NUM00 , key_size ) ; \n\t\t\tif ( clientIV != null ) { \n\t\t\t\t$F8438 ( logger ) logger . print ( clientIV . getIV ( ) ) ; \n\t\t\t\t$F8438 ( logger ) logger . print ( serverIV . getIV ( ) ) ; \n\t\t\t\t} \n\t\t\telse $F12204 ( logger ) } \n\t\tif ( algName == null ) { \n\t\t\t$F83645 ( encCipher ) ; \n\t\t\t$F83645 ( decCipher ) ; \n\t\t\t} \n\t\telse { \n\t\t\tencCipher = Cipher . getInstance ( algName ) ; \n\t\t\tdecCipher = Cipher . getInstance ( algName ) ; \n\t\t\tif ( is_client ) { \n\t\t\t\tencCipher . init ( Cipher . ENCRYPT_MODE , new SecretKeySpec ( client_key , NUM00 , key_size , algName ) , clientIV ) ; \n\t\t\t\tdecCipher . init ( Cipher . DECRYPT_MODE , new SecretKeySpec ( server_key , NUM00 , key_size , algName ) , serverIV ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tencCipher . init ( Cipher . ENCRYPT_MODE , new SecretKeySpec ( server_key , NUM00 , key_size , algName ) , serverIV ) ; \n\t\t\t\tdecCipher . init ( Cipher . DECRYPT_MODE , new SecretKeySpec ( client_key , NUM00 , key_size , algName ) , clientIV ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tmessageDigest = MessageDigest . getInstance ( hashName ) ; \n\t\tif ( is_client ) { \n\t\t\tmac_write_secret = client_mac_secret ; \n\t\t\tmac_read_secret = server_mac_secret ; \n\t\t\t} \n\t\telse { \n\t\t\tmac_write_secret = server_mac_secret ; \n\t\t\tmac_read_secret = client_mac_secret ; \n\t\t\t} \n\t\tif $F3057 ( hashName ) { \n\t\t\tpad_1 = SSLv3Constants . MD5pad1 ; \n\t\t\tpad_2 = SSLv3Constants . MD5pad2 ; \n\t\t\t} \n\t\telse { \n\t\t\tpad_1 = SSLv3Constants . SHApad1 ; \n\t\t\tpad_2 = SSLv3Constants . SHApad2 ; \n\t\t\t} \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F301 ( e ) throw new AlertException ( AlertProtocol . INTERNAL_ERROR , new SSLProtocolException $F580 ) ; \n\t\t} \n\t} \n"}, {"code": "public static void cleanDirectory ( File directory ) throws IOException $F189472 ( directory , message , files , exception , file , forceDelete , ioe ) "}, {"code": "public void notIdle $F72 { \n\tif $F15855 ( idleTimeoutMsec ) lastActionMsec . set ( System . currentTimeMillis ( ) ) ; \n\t} \n"}, {"code": "public static $F96 gzip ( final String input ) { \n\tfinal ByteArrayOutputStream baos = new FastByteArrayOutputStream $F72 ; \n\tGZIPOutputStream gzos = null ; \n\ttry $F42214 ( gzos , baos , input ) catch ( final IOException e ) { \n\t\tMainUtil . handleError ( e ) ; \n\t\t} \n\tfinally { \n\t\tif ( gzos != null ) { \n\t\t\ttry $F881 ( gzos ) catch ( final IOException ignore ) $F845 } \n\t\t} \n\t$F11316 ( baos ) } \n"}, {"code": "protected AbstractCompositeServiceBuilder $F72 $F845 "}, {"code": "$F1 public void endDocument $F72 throws SAXException { \n\tif ( resource != null ) { \n\t\tresource . addAllResource ( jsVector ) ; \n\t\tfor ( Object object : resource . getResourceSet ( ) ) { \n\t\t\tResource r = ( Resource ) object ; \n\t\t\tif ( r . getResource ( ) != null ) { \n\t\t\t\tparser . setResource ( ( Resource ) r ) ; \n\t\t\t\t$F21687 ( parser ) jsSet . add ( parser . getResult ( ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void addMethodToDisplay ( MethodIdent methodIdent ) $F207 ( methods , methodIdent ) "}, {"code": "$F174198 ( result , Collections , super ) "}, {"code": "private void selectConnectingEdges ( List < DisplayNode > displayNodes ) { \n\t$F933 ( isAllowNodeEdgeSelection ) $F252345 components = getComponents ( ) ; \n\tfor ( Component comp : components ) { \n\t\tif ( comp instanceof IDisplayEdge ) { \n\t\t\tIDisplayEdge graphEdge = ( IDisplayEdge ) comp ; \n\t\t\tDisplayNode node1 = graphEdge . getComp1 ( ) ; \n\t\t\tDisplayNode node2 = graphEdge . getComp2 ( ) ; \n\t\t\tif ( node1 instanceof GraphNodeError ) $F1448 if ( node2 instanceof GraphNodeError ) $F1448 if ( node2 != null ) { \n\t\t\t\tboolean selected = displayNodes . contains ( node1 ) && displayNodes . contains ( node2 ) ; \n\t\t\t\tgraphEdge . setSelected ( selected ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static String classNameOnly ( String typeName ) { \n\tString dotted = descriptorToDot ( typeName ) ; \n\t$F24867 ( start , dotted ) if ( start < NUM00 ) { \n\t\treturn dotted ; \n\t\t} \n\telse $F26088 ( dotted , start ) } \n"}, {"code": "public HyperGraph search $F72 { \n\t$F657 ( startTime , System ) Future future = new Future ( chart ) ; \n\t$F9404 ( stacks ) $F722 ( stacks ) ComputeNodeResult result = new ComputeNodeResult ( this . featureFunctions , Hypothesis . BEGIN_RULE , null , - NUM00 , NUM00 , null , this . sentence ) ; \n\tStack firstStack = new Stack ( sentence , config ) ; \n\tfirstStack . add ( new Hypothesis ( result . getDPStates ( ) , future . Full ( ) ) ) ; \n\tstacks . add ( firstStack ) ; \n\tfor ( int source_words = NUM00 ; \n\tsource_words <= sentence . length ( ) ; \n\t++ source_words ) { \n\t\tStack targetStack = new Stack ( sentence , config ) ; \n\t\tstacks . add ( targetStack ) ; \n\t\tfor ( int phrase_length = NUM00 ; \n\t\tphrase_length <= Math . min ( source_words - NUM00 , chart . MaxSourcePhraseLength ( ) ) ; \n\t\tphrase_length ++ ) { \n\t\t\tint from_stack = source_words - phrase_length ; \n\t\t\tStack tailStack = stacks . get ( from_stack ) ; \n\t\t\tLOG . debug ( NUM00 , source_words , chart . MaxSourcePhraseLength ( ) , from_stack , phrase_length ) ; \n\t\t\tfor ( Coverage coverage : tailStack . getCoverages ( ) ) { \n\t\t\t\tArrayList < Hypothesis > hypotheses = tailStack . get ( coverage ) ; \n\t\t\t\tint begin = coverage . firstZero ( ) ; \n\t\t\t\tint last_end = Math . min ( coverage . firstZero ( ) + config . reordering_limit , chart . SentenceLength ( ) ) ; \n\t\t\t\tint last_begin = ( last_end > phrase_length ) ? ( last_end - phrase_length ) : NUM00 ; \n\t\t\t\tfor ( begin = coverage . firstZero ( ) ; \n\t\t\t\tbegin <= last_begin ; \n\t\t\t\tbegin ++ ) { \n\t\t\t\t\tif ( ! coverage . compatible ( begin , begin + phrase_length ) || ! permissible ( coverage , begin , begin + phrase_length ) ) $F1448 if ( $F19341 ( begin , sentence ) && source_words != sentence . length ( ) ) $F598 PhraseNodes phrases = chart . getRange ( begin , begin + phrase_length ) ; \n\t\t\t\t\t$F45557 ( phrases ) LOG . debug ( NUM00 , phrases . size ( ) , begin , begin + phrase_length ) ; \n\t\t\t\t\tfloat future_delta = future . Change ( coverage , begin , begin + phrase_length ) ; \n\t\t\t\t\tCandidate cand = new Candidate ( featureFunctions , sentence , hypotheses , phrases , future_delta , new int $F227065 ) ; \n\t\t\t\t\ttargetStack . addCandidate ( cand ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\ttargetStack . search ( ) ; \n\t\t} \n\tLOG . info ( NUM00 , sentence . id ( ) , $F32708 ( System , startTime ) ) ; \n\treturn createGoalNode ( ) ; \n\t} \n"}, {"code": "$F1 public synchronized String toString $F72 { \n\t$F3239 ( sbResult ) $F84 ( sbResult ) $F6407 ( sbResult , getCredentialsStringRepresentation , proxyCred ) $F84 ( sbResult ) $F6407 ( sbResult , getCredentialsStringRepresentation , credMap ) $F84 ( sbResult ) $F6407 ( sbResult , getCookiesStringRepresentation , cookies ) $F84 ( sbResult ) $F52199 ( strResult , sbResult ) return strResult ; \n\t} \n"}, {"code": "public static List < LibraryLocation > gatherAllLibraries $F4374 ( dirPaths ) { \n\tList < LibraryLocation > libraries = new ArrayList < LibraryLocation > $F72 ; \n\tfor ( $F1139 ( i , dirPaths ) ) { \n\t\tFile $F170883 ( extDir , dirPaths , i ) ; \n\t\tif $F3444 ( extDir ) { \n\t\t\t$F806 names = extDir . list ( fgArchiveFilter ) ; \n\t\t\tif ( names != null ) { \n\t\t\t\tfor ( $F1139 ( j , names ) ) { \n\t\t\t\t\tFile $F170887 ( jar , extDir , names , j ) ; \n\t\t\t\t\tif $F7110 ( jar ) { \n\t\t\t\t\t\ttry { \n\t\t\t\t\t\t\tIPath libPath = new Path ( jar . getCanonicalPath ( ) ) ; \n\t\t\t\t\t\t\tIPath sourcePath = Path . EMPTY ; \n\t\t\t\t\t\t\tIPath packageRoot = Path . EMPTY ; \n\t\t\t\t\t\t\tURL javadocLocation = null ; \n\t\t\t\t\t\t\tURL indexLocation = null ; \n\t\t\t\t\t\t\tLibraryLocation library = new LibraryLocation ( libPath , sourcePath , packageRoot , javadocLocation , indexLocation ) ; \n\t\t\t\t\t\t\tlibraries . add ( library ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\tcatch ( IOException e ) { \n\t\t\t\t\t\t\tLaunching . log ( e ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn libraries ; \n\t} \n"}, {"code": "public void requestClose $F72 { \n\t$F8934 ( mLock ) try { \n\t\t$F7254 ( mIsShutdown ) mTargetState = TargetState . CLOSED ; \n\t\tupdate ( ) ; \n\t\t} \n\t$F796 ( mLock ) } \n"}, {"code": "private void reserveOneDoc $F72 { \n\tif ( pendingNumDocs . incrementAndGet ( ) > IndexWriter . getActualMaxDocs ( ) ) { \n\t\t$F15856 ( pendingNumDocs ) throw new IllegalArgumentException ( NUM00 + IndexWriter . getActualMaxDocs ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static void streamContentToBrowser ( HttpServletResponse response , InputStream in , int length , String contentType , String fileName ) throws IOException { \n\tsetResponseBrowserProxyNoCache ( response ) ; \n\tresponse . setContentLength ( length ) ; \n\tif ( contentType != null ) { \n\t\tresponse . setContentType ( contentType ) ; \n\t\t} \n\tif ( fileName != null ) { \n\t\tresponse . setHeader ( NUM00 , NUM00 + fileName + NUM00 ) ; \n\t\t} \n\t$F147972 ( out , response ) try { \n\t\tstreamContent ( out , in , length ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\t$F59 ( out ) throw e ; \n\t\t} \n\t$F1206 ( out ) $F59 ( out ) } \n"}, {"code": "$F1 public String toString $F72 $F4915 ( toString , _BOOL ) "}, {"code": "private static boolean isValidMethodName ( String methodName ) { \n\treturn methodName . matches ( NUM00 ) ; \n\t} \n"}, {"code": "public static $F96 toUTF8 ( String s ) { \n\t$F96 result = new byte [ utfLength ( s ) ] ; \n\tint result_index = NUM00 ; \n\tfor ( $F133333 ( i , n , s ) ) { \n\t\t$F1280 ( c , s , i ) if ( ( ( ! WRITE_PSEUDO_UTF8 ) || ( c >= NUM00 ) ) && ( c <= NUM00 ) ) { \n\t\t\t$F11740 ( result , result_index , c ) } \n\t\telse if ( c > NUM00 ) { \n\t\t\tresult [ result_index ++ ] = ( byte ) ( NUM00 | $F8043 ( c ) ) ; \n\t\t\tresult [ result_index ++ ] = ( byte ) ( NUM00 | $F84702 ( c ) ) ; \n\t\t\t$F152865 ( result , result_index , c ) } \n\t\telse { \n\t\t\tresult [ result_index ++ ] = ( byte ) ( NUM00 | $F8043 ( c ) ) ; \n\t\t\t$F152865 ( result , result_index , c ) } \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public void pln ( Object o ) throws IOException { \n\t$F31458 ( p , o ) pln ( ) ; \n\t} \n"}, {"code": "public void testReduceTask $F72 throws Exception { \n\tHadoopJob gridJob = getHadoopJob ( igfsScheme ( ) + PATH_INPUT , igfsScheme ( ) + PATH_OUTPUT ) ; \n\trunTaskWithInput ( gridJob , HadoopTaskType . REDUCE , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 ) ; \n\trunTaskWithInput ( gridJob , HadoopTaskType . REDUCE , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 ) ; \n\tassertEquals ( NUM00 + NUM00 , readAndSortFile ( PATH_OUTPUT + NUM00 + getOutputFileNamePrefix ( ) + NUM00 ) ) ; \n\tassertEquals ( NUM00 + NUM00 , readAndSortFile ( PATH_OUTPUT + NUM00 + getOutputFileNamePrefix ( ) + NUM00 ) ) ; \n\t} \n"}, {"code": "public static double expm1 ( double value ) { \n\tif ( USE_JDK_MATH ) { \n\t\treturn STRICT_MATH ? StrictMath . expm1 ( value ) : Math . expm1 ( value ) ; \n\t\t} \n\tif $F7637 ( Math , value , EXP_LO_DISTANCE_TO_ZERO ) { \n\t\t$F43289 ( i , value , EXP_LO_INDEXING ) double delta = value - i * ( NUM00 / EXP_LO_INDEXING ) ; \n\t\treturn expLoPosTab [ i + EXP_LO_TAB_MID_INDEX ] * ( expLoNegTab [ i + EXP_LO_TAB_MID_INDEX ] + delta * ( NUM00 + delta * ( NUM00 / NUM00 + delta * ( NUM00 / NUM00 + delta * ( NUM00 / NUM00 + delta * $F52906 ) ) ) ) ) ; \n\t\t} \n\telse { \n\t\treturn FastMath . exp ( value ) - NUM00 ; \n\t\t} \n\t} \n"}, {"code": "public void deleteConditional ( Conditional c ) { \n\tderegister ( c ) ; \n\t} \n"}, {"code": "public static void parseModelToContentValues ( Object model , ContentValues contentValues ) { \n\tif $F3817 ( contentValues ) $F725 ( contentValues ) $F20850 ( clazz , model ) $F16273 ( fields , clazz ) $F20126 ( fieldType ) Object fieldVal = null ; \n\tfor ( Field field : fields ) { \n\t\ttry { \n\t\t\tif ( field . isAccessible ( ) == _BOOL ) field . setAccessible ( _BOOL ) ; \n\t\t\tColumn column = field . getAnnotation ( Column . class ) ; \n\t\t\t$F86218 ( fieldType , field ) fieldVal = field . get ( model ) ; \n\t\t\tif ( column == null || fieldVal == null ) $F598 if ( fieldType . equals ( $F37010 ) ) { \n\t\t\t\tcontentValues . put ( column . name ( ) , field . getInt ( model ) ) ; \n\t\t\t\t} \n\t\t\telse if ( $F58949 ( fieldType ) ) { \n\t\t\t\tcontentValues . put ( column . name ( ) , ( Integer ) field . get ( model ) ) ; \n\t\t\t\t} \n\t\t\telse if ( fieldType . equals ( $F41260 ) ) { \n\t\t\t\tcontentValues . put ( column . name ( ) , field . getShort ( model ) ) ; \n\t\t\t\t} \n\t\t\telse if ( $F326853 ( fieldType ) ) { \n\t\t\t\tcontentValues . put ( column . name ( ) , ( Short ) field . get ( model ) ) ; \n\t\t\t\t} \n\t\t\telse if ( fieldType . equals ( $F41237 ) ) { \n\t\t\t\tcontentValues . put ( column . name ( ) , field . getLong ( model ) ) ; \n\t\t\t\t} \n\t\t\telse if ( $F58953 ( fieldType ) ) { \n\t\t\t\tcontentValues . put ( column . name ( ) , ( Long ) field . get ( model ) ) ; \n\t\t\t\t} \n\t\t\telse if ( fieldType . equals ( $F41248 ) ) { \n\t\t\t\tcontentValues . put ( column . name ( ) , field . getFloat ( model ) ) ; \n\t\t\t\t} \n\t\t\telse if ( $F58951 ( fieldType ) ) { \n\t\t\t\tcontentValues . put ( column . name ( ) , ( Float ) field . get ( model ) ) ; \n\t\t\t\t} \n\t\t\telse if ( fieldType . equals ( $F41242 ) ) { \n\t\t\t\tcontentValues . put ( column . name ( ) , field . getDouble ( model ) ) ; \n\t\t\t\t} \n\t\t\telse if ( $F326890 ( fieldType ) ) { \n\t\t\t\tcontentValues . put ( column . name ( ) , ( Double ) field . get ( model ) ) ; \n\t\t\t\t} \n\t\t\telse if ( fieldType . equals ( $F41254 ) ) { \n\t\t\t\tif ( field . getBoolean ( model ) == _BOOL ) { \n\t\t\t\t\tcontentValues . put ( column . name ( ) , NUM00 ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tcontentValues . put ( column . name ( ) , NUM00 ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse if ( $F326900 ( fieldType ) ) { \n\t\t\t\tif ( $F120097 ( field , model ) == _BOOL ) { \n\t\t\t\t\tcontentValues . put ( column . name ( ) , NUM00 ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tcontentValues . put ( column . name ( ) , NUM00 ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse if $F253730 ( fieldType ) { \n\t\t\t\tcontentValues . put ( column . name ( ) , $F120 ( field , model ) ) ; \n\t\t\t\t} \n\t\t\telse if ( fieldType . equals ( $F144055 ) ) { \n\t\t\t\tcontentValues . put ( column . name ( ) , ( $F96 ) field . get ( model ) ) ; \n\t\t\t\t} \n\t\t\telse if ( fieldType . equals ( $F271637 ) ) { \n\t\t\t\tDate date = ( Date ) field . get ( model ) ; \n\t\t\t\tcontentValues . put ( column . name ( ) , DateUtils . formatDate2Str ( date ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( IllegalArgumentException e ) $F302 ( e ) $F153656 ( e ) } \n\t} \n"}, {"code": "private void addBlockToWorklist ( SsaBasicBlock ssaBlock ) { \n\tif ( ! executableBlocks . get ( ssaBlock . getIndex ( ) ) ) { \n\t\tcfgWorklist . add ( ssaBlock ) ; \n\t\texecutableBlocks . set ( ssaBlock . getIndex ( ) ) ; \n\t\t} \n\telse $F207 ( cfgPhiWorklist , ssaBlock ) } \n"}, {"code": "private static boolean is32BitJvm $F72 { \n\tInteger bits = Integer . getInteger ( NUM00 ) ; \n\treturn bits != null && bits == NUM00 ; \n\t} \n"}, {"code": "public float angle $F72 { \n\treturn ( float ) Math . atan2 ( y ( ) , x ( ) ) ; \n\t} \n"}, {"code": "public static String formatNumber ( double value , int numberOfDigits , boolean groupingCharacters ) { \n\tif $F35707 ( Double , value ) $F2455 int numberDigits = numberOfDigits ; \n\tif ( numberDigits < NUM00 ) { \n\t\tnumberDigits = numberOfFractionDigits ; \n\t\t} \n\tNUMBER_FORMAT . setMinimumFractionDigits ( numberDigits ) ; \n\tNUMBER_FORMAT . setMaximumFractionDigits ( numberDigits ) ; \n\tNUMBER_FORMAT . setGroupingUsed ( groupingCharacters ) ; \n\t$F5330 ( NUMBER_FORMAT , value ) } \n"}, {"code": "private JPanel createLegendPanel ( JPanel basePanel ) { \n\tfinal JPanel panel ; \n\tif ( basePanel != null ) { \n\t\t$F7600 ( basePanel ) basePanel . setLayout ( $F78335 ) ; \n\t\tpanel = basePanel ; \n\t\t} \n\telse { \n\t\tpanel = new JPanel ( $F78335 ) ; \n\t\t} \n\tpanel . setBorder ( BorderFactory . createTitledBorder ( I18n . tr ( NUM00 ) ) ) ; \n\t$F45960 ( gbc ) $F98084 ( gbc , GridBagConstraints ) $F184708 ( gbc ) JCheckBox checkBox = new JCheckBox $F72 ; \n\tcheckBox . setSelected ( _BOOL ) ; \n\tpanel . add ( createIconLabel ( checkBox ) , gbc ) ; \n\tMultiLineLabel label = new MultiLineLabel ( I18n . tr ( NUM00 ) , _BOOL ) ; \n\t$F45960 ( labelGbc ) $F98084 ( labelGbc , GridBagConstraints ) $F45961 ( labelGbc , GridBagConstraints ) labelGbc . gridwidth = GridBagConstraints . REMAINDER ; \n\tlabelGbc . gridx = NUM00 ; \n\tlabelGbc . weightx = NUM00 ; \n\tpanel . add ( label , labelGbc ) ; \n\tcheckBox . setSelected ( _BOOL ) ; \n\tgbc . gridy = NUM00 ; \n\tpanel . add ( createIconLabel ( checkBox ) , gbc ) ; \n\tlabel = new MultiLineLabel ( I18n . tr ( NUM00 ) , _BOOL ) ; \n\tlabelGbc . gridy = NUM00 ; \n\tpanel . add ( label , labelGbc ) ; \n\tcheckBox . setIcon ( partiallyIncludedIcon ) ; \n\tgbc . gridy = NUM00 ; \n\t$F184708 ( gbc ) panel . add ( createIconLabel ( checkBox ) , gbc ) ; \n\tlabel = new MultiLineLabel ( I18n . tr ( NUM00 ) , _BOOL ) ; \n\tlabelGbc . gridy = NUM00 ; \n\tgbc . insets = null ; \n\tpanel . add ( label , labelGbc ) ; \n\treturn panel ; \n\t} \n"}, {"code": "private static boolean isTrashId ( IgniteUuid id ) { \n\t$F397 ( id , _BOOL ) UUID gid = id . globalId ( ) ; \n\treturn id . localId ( ) == NUM00 && gid . getMostSignificantBits ( ) == NUM00 && gid . getLeastSignificantBits ( ) > NUM00 && gid . getLeastSignificantBits ( ) <= TRASH_CONCURRENCY ; \n\t} \n"}, {"code": "private void onTimeElementEnd $F72 throws SAXException { \n\ttry { \n\t\ttimeMs = XML_DATE_TIME_FORMAT . parseMillis ( content . trim ( ) ) ; \n\t\t} \n\tcatch ( IllegalArgumentException e ) { \n\t\tthrow new SAXException ( createErrorMessage ( NUM00 + content ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "public void addChangeListener ( ChangeListener l ) $F207 ( m_ChangeListeners , l ) "}, {"code": "public static boolean isClassPresent ( String fullyQualifiedClassName ) { \n\ttry { \n\t\tClass . forName ( fullyQualifiedClassName ) ; \n\t\treturn _BOOL ; \n\t\t} \n\t$F17063 ( _BOOL ) } \n"}, {"code": "void unlink $F75141 ( p , trail ) { \n\tp . setValue ( null ) ; \n\t$F33910 ( trail , p ) if ( last == p ) last = trail ; \n\t$F75143 ( count , capacity , notFull ) } \n"}, {"code": "@ TargetApi ( Build . VERSION_CODES . JELLY_BEAN ) private int queueInputBuffer ( MediaCodec codec , $F30903 inputBuffers , int index , SpeechRecord speechRecord ) { \n\tif ( speechRecord == null || speechRecord . getRecordingState ( ) != SpeechRecord . RECORDSTATE_RECORDING ) $F7629 if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . JELLY_BEAN ) { \n\t\tByteBuffer inputBuffer = inputBuffers [ index ] ; \n\t\t$F725 ( inputBuffer ) $F29501 ( size , inputBuffer ) $F2175 ( buffer , size ) int status = read ( speechRecord , buffer ) ; \n\t\tif ( status < NUM00 ) { \n\t\t\thandleError ( NUM00 + status ) ; \n\t\t\t$F150 } \n\t\tinputBuffer . put ( buffer ) ; \n\t\tcodec . queueInputBuffer ( index , NUM00 , size , NUM00 , NUM00 ) ; \n\t\treturn size ; \n\t\t} \n\t$F150 } \n"}, {"code": "$F1 public final void sample $F72 { \n\tlong count = _count . getAndSet ( NUM00 ) ; \n\tlong time = _time . getAndSet ( NUM00 ) ; \n\tif ( count == NUM00 ) _value = NUM00 ; \n\telse _value = time / ( double ) count ; \n\t} \n"}, {"code": "protected void validateProperties ( final Object entity , final EntityDataModel edm ) throws ODataException { \n\tfinal Type type = edm . getType ( entity . getClass ( ) ) ; \n\tif ( ! ( type instanceof StructuredType ) ) $F932 visitProperties ( edm , ( StructuredType ) type , null ) ; \n\t} \n"}, {"code": "public static String formatNumber ( float number , int digitCount , boolean separateThousands , char separateChar ) { \n\t$F11577 ( out ) boolean neg = _BOOL ; \n\t$F40722 ( number ) boolean zero = _BOOL ; \n\tif ( number < NUM00 && number > - NUM00 ) { \n\t\tzero = _BOOL ; \n\t\t} \n\tif ( number < NUM00 ) $F385538 ( neg , _BOOL , number ) if ( digitCount > POW_10 . length ) $F65461 ( digitCount , POW_10 ) number *= POW_10 [ digitCount ] ; \n\t$F385541 ( lval , Math , number ) $F40997 ( ind , out ) int charCount = NUM00 ; \n\tboolean decimalPointAdded = _BOOL ; \n\twhile ( lval != NUM00 || charCount < ( digitCount + NUM00 ) ) { \n\t\t$F273037 ( digit , lval ) lval = lval / NUM00 ; \n\t\tout [ ind -- ] = ( char ) ( digit + NUM00 ) ; \n\t\tcharCount ++ ; \n\t\tif ( charCount == digitCount ) { \n\t\t\tout [ ind -- ] = NUM00 ; \n\t\t\tcharCount ++ ; \n\t\t\tdecimalPointAdded = _BOOL ; \n\t\t\t} \n\t\telse if ( separateThousands && lval != NUM00 && charCount > digitCount ) { \n\t\t\tif ( decimalPointAdded ) { \n\t\t\t\tif $F385546 ( charCount , digitCount ) { \n\t\t\t\t\tout [ ind -- ] = separateChar ; \n\t\t\t\t\tcharCount ++ ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tif $F385546 ( charCount , digitCount ) { \n\t\t\t\t\tout [ ind -- ] = separateChar ; \n\t\t\t\t\tcharCount ++ ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F385557 ( zero , out , ind , charCount ) $F385557 ( neg , out , ind , charCount ) int start = out . length - charCount ; \n\treturn String . valueOf ( out , start , out . length - start ) ; \n\t} \n"}, {"code": "static AdbResponse readAdbResponse ( SocketChannel chan , boolean readDiagString ) throws TimeoutException , IOException { \n\tAdbResponse resp = new AdbResponse $F72 ; \n\t$F12496 ( reply ) read ( chan , reply ) ; \n\tif ( isOkay ( reply ) ) { \n\t\tresp . okay = _BOOL ; \n\t\t} \n\telse { \n\t\treadDiagString = _BOOL ; \n\t\tresp . okay = _BOOL ; \n\t\t} \n\ttry { \n\t\twhile ( readDiagString ) { \n\t\t\t$F12496 ( lenBuf ) read ( chan , lenBuf ) ; \n\t\t\tString lenStr = replyToString ( lenBuf ) ; \n\t\t\tint len ; \n\t\t\ttry $F123126 ( len , Integer , lenStr ) catch ( NumberFormatException nfe ) { \n\t\t\t\tLog . w ( NUM00 , NUM00 + lenStr + NUM00 + lenBuf [ NUM00 ] + NUM00 + lenBuf [ NUM00 ] + NUM00 + lenBuf [ NUM00 ] + NUM00 + lenBuf [ NUM00 ] ) ; \n\t\t\t\tLog . w ( NUM00 , NUM00 + replyToString ( reply ) ) ; \n\t\t\t\t$F597 } \n\t\t\t$F2175 ( msg , len ) read ( chan , msg ) ; \n\t\t\tresp . message = replyToString ( msg ) ; \n\t\t\tLog . v ( NUM00 , NUM00 + replyToString ( reply ) + NUM00 + resp . message + NUM00 ) ; \n\t\t\t$F597 } \n\t\t} \n\t$F3957 return resp ; \n\t} \n"}, {"code": "public void removeMouseMode ( String id ) { \n\tfor ( MapMouseMode med : mouseModes ) { \n\t\tif ( id . equals ( med . getID ( ) ) ) $F87181 ( removeMouseMode , med ) } \n\t} \n"}, {"code": "private Boolean filterExistingItems ( List < PostItem > postItems , PostItem item ) { \n\tif $F105 ( postItems , item ) { \n\t\t$F12747 ( i , postItems , item ) postItems . remove ( i ) ; \n\t\tpostItems . add ( i , item ) ; \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "DateRange buildShiftedRange ( DateRange rawRange , long cadence , long now ) { \n\tif ( rawRange . getStart ( ) > now ) $F825 final DateRange rounded = rawRange . rounded ( cadence ) ; \n\tfinal long nowDelta = now - rounded . getEnd ( ) ; \n\t$F8670 ( nowDelta , SHIFT_TOLERANCE , rounded ) final long diff = Math . abs ( Math . min ( nowDelta , NUM00 ) ) + SHIFT_TOLERANCE ; \n\treturn rounded . shift ( - toleranceShiftPeriod ( diff , cadence ) ) ; \n\t} \n"}, {"code": "public static void upto ( Date self , Date to , Closure closure ) { \n\tif $F348512 ( self , to ) { \n\t\tfor ( Date i = ( Date ) self . clone ( ) ; \n\t\ti . compareTo ( to ) <= NUM00 ; \n\t\ti = next ( i ) ) $F50467 ( closure , i ) } \n\telse $F50472 ( to , self ) } \n"}, {"code": "public void runTest $F72 throws Throwable { \n\tDocument doc ; \n\tNodeList elementList ; \n\tElement testEmployee ; \n\tNode firstC ; \n\tString childName ; \n\tint nodeType ; \n\tCharacterData employeeIDNode ; \n\tString employeeID ; \n\t$F236 ( doc , load , _BOOL ) $F237 ( elementList , doc ) $F90846 ( testEmployee , elementList ) firstC = testEmployee . getFirstChild ( ) ; \n\tnodeType = ( int ) firstC . getNodeType ( ) ; \n\twhile ( equals ( NUM00 , nodeType ) ) { \n\t\t$F21003 ( firstC ) nodeType = ( int ) firstC . getNodeType ( ) ; \n\t\t} \n\t$F89257 ( childName , firstC ) assertEqualsAutoCase ( NUM00 , NUM00 , NUM00 , childName ) ; \n\t$F241 ( employeeIDNode , firstC ) $F5900 ( employeeID , employeeIDNode ) assertEquals ( NUM00 , NUM00 , employeeID ) ; \n\t} \n"}, {"code": "public InferenceContext ( N4JSTypeSystem ts , TypeSystemHelper tsh , CancelIndicator cancelIndicator , RuleEnvironment G , InferenceVariable ... inferenceVariables ) { \n\tObjects . requireNonNull ( ts ) ; \n\tObjects . requireNonNull ( tsh ) ; \n\tObjects . requireNonNull ( cancelIndicator ) ; \n\tObjects . requireNonNull ( G ) ; \n\tthis . ts = ts ; \n\tthis . tsh = tsh ; \n\tthis . cancelIndicator = cancelIndicator ; \n\tthis . G = G ; \n\taddInferenceVariables ( _BOOL , inferenceVariables ) ; \n\tthis . reducer = new Reducer ( this , G , ts , tsh ) ; \n\tthis . currentBounds = new BoundSet ( this , G , ts ) ; \n\t} \n"}, {"code": "$F1 public void run $F72 throws InterruptedException , CameraAccessException , CameraCaptureSessionClosedException , ResourceAcquisitionFailedException { \n\tFrameServer . Session session = mFrameServer . tryCreateExclusiveSession ( ) ; \n\t$F2329 ( session ) try { \n\t\tAFTriggerResult afScanResult = new AFTriggerResult $F72 ; \n\t\tRequestBuilder idleBuilder = createAFIdleRequest ( null ) ; \n\t\tsession . submitRequest ( Arrays . asList ( idleBuilder . build ( ) ) , FrameServer . RequestType . REPEATING ) ; \n\t\tRequestBuilder cancelBuilder = createAFCancelRequest ( null ) ; \n\t\tsession . submitRequest ( Arrays . asList ( cancelBuilder . build ( ) ) , FrameServer . RequestType . NON_REPEATING ) ; \n\t\tidleBuilder = createAFIdleRequest ( afScanResult ) ; \n\t\tsession . submitRequest ( Arrays . asList ( idleBuilder . build ( ) ) , FrameServer . RequestType . REPEATING ) ; \n\t\tRequestBuilder triggerBuilder = createAFTriggerRequest ( afScanResult ) ; \n\t\tsession . submitRequest ( Arrays . asList ( triggerBuilder . build ( ) ) , FrameServer . RequestType . NON_REPEATING ) ; \n\t\t$F217726 ( afScanResult ) } \n\t$F3229 ( session ) } \n"}, {"code": "protected $F27878 createDiscreteVariableList ( DiscreteVariableAnalysis variableAnalysis ) { \n\t$F27878 nodes = new $F201 ( variableAnalysis . getNumOfCols ( ) ) ; \n\tDiscreteVarInfo [ ] variables = variableAnalysis . getDiscreteVarInfos ( ) ; \n\tfor ( DiscreteVarInfo variable : variables ) { \n\t\tif ( variable != null ) { \n\t\t\tnodes . add ( new DiscreteVariable ( variable . getName ( ) , variable . getCategories ( ) ) ) ; \n\t\t\t} \n\t\t} \n\treturn nodes ; \n\t} \n"}, {"code": "$F35762 ( newScrollValue , itemDimension , initialMotionValue , lastMotionValue , getPullToRefreshScrollDirection , HORIZONTAL , mInitialMotionX , mLastMotionX , VERTICAL , mInitialMotionY , mLastMotionY , mCurrentMode , PULL_FROM_END , Math , FRICTION , getFooterSize , PULL_FROM_START , getHeaderSize , setHeaderScroll , isRefreshing , scale , mFooterLayout , mHeaderLayout , mState , State , setState ) "}, {"code": "public synchronized void removeSeries ( XYSeries series ) $F106 ( mSeries , series ) "}, {"code": "private void synchronizeTables $F72 { \n\tresetDBObjects ( DBObject_Table . class ) ; \n\ts_logger . log ( Level . CONFIG , NUM00 ) ; \n\ts_logger . log ( Level . CONFIG , NUM00 , $F40356 ( m_objectTypes , m_direction ) ) ; \n\t$F110223 ( m_counterDrp ) $F110223 ( m_counterAdd ) $F110223 ( m_counterUpd ) $F110223 ( m_totalDrp ) $F110223 ( m_totalAdd ) $F110223 ( m_totalUpd ) for ( $F43656 ( tableIterator , m_objectList ) ) { \n\t\t$F13714 ( key , tableIterator ) DBObject sourceObj = m_sourceMap . get ( key ) ; \n\t\tDBObject targetObj = m_targetMap . get ( key ) ; \n\t\tif ( targetObj != null && sourceObj == null ) { \n\t\t\tif ( targetObj . getCustomizationLevel ( ) == s_parameters . CUSTOMNONE ) { \n\t\t\t\tif ( targetObj . drop ( ) ) m_counterDrp = new Integer ( m_counterDrp . intValue ( ) + NUM00 ) ; \n\t\t\t\tm_totalDrp = new Integer ( m_totalDrp . intValue ( ) + NUM00 ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\ts_logger . log ( Level . WARNING , NUM00 , new Object [ ] { \n\t\t\t\t\tm_objectType , targetObj . getName ( ) } \n\t\t\t\t) ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( targetObj != null && sourceObj != null ) { \n\t\t\tif ( targetObj . update ( sourceObj ) ) m_counterUpd = new Integer ( m_counterUpd . intValue ( ) + NUM00 ) ; \n\t\t\tm_totalUpd = new Integer ( m_totalUpd . intValue ( ) + NUM00 ) ; \n\t\t\t} \n\t\tif ( targetObj == null && sourceObj != null ) { \n\t\t\tif ( sourceObj . create ( m_target ) ) m_counterAdd = new Integer ( m_counterAdd . intValue ( ) + NUM00 ) ; \n\t\t\tm_totalAdd = new Integer ( m_totalAdd . intValue ( ) + NUM00 ) ; \n\t\t\t} \n\t\t} \n\tlogResults ( ) ; \n\t} \n"}, {"code": "public void remoteRestartCoordinator ( String nodeId , String type ) throws LocalRepositoryException { \n\tfinal String prefix = String . format ( NUM00 , type , nodeId ) ; \n\t_log . debug ( prefix ) ; \n\tfinal $F806 cmd = { \n\t\t_SYSTOOL_CMD , _SYSTOOL_REMOTE_SYSTOOL , nodeId , _SYSTOOL_RESTART_COORDINATOR , type } \n\t; \n\t$F57430 ( result , Exec , _SYSTOOL_TIMEOUT , cmd ) checkFailure ( result , prefix ) ; \n\t} \n"}, {"code": "private static String intToString ( int value , int digit ) { \n\t$F7542 ( stringBuilder , digit ) $F42779 ( stringBuilder , Integer , value ) while $F80353 ( stringBuilder , digit ) { \n\t\t$F2864 ( stringBuilder ) } \n\t$F92 ( stringBuilder ) } \n"}, {"code": "void add ( int n ) { \n\tif ( v == null ) { \n\t\t$F3936 ( v , INIT_SIZE ) v [ NUM00 ] = n ; \n\t\tlen = NUM00 ; \n\t\t$F665 } \n\tif ( len == v . length ) { \n\t\t$F69133 ( newv , len ) $F135 ( System , v , newv , len ) v = newv ; \n\t\t} \n\tif ( n > v [ len - NUM00 ] ) { \n\t\tv [ len ++ ] = n ; \n\t\t$F665 } \n\tint i = NUM00 ; \n\tfor ( ; \n\ti < len ; \n\ti ++ ) { \n\t\tif ( n <= v [ i ] ) { \n\t\t\tif ( n == v [ i ] ) $F665 $F597 } \n\t\t} \n\tfor ( int j = len ; \n\tj >= i ; \n\tj -- ) v [ j + NUM00 ] = v [ j ] ; \n\tv [ i ] = n ; \n\t++ len ; \n\t} \n"}, {"code": "public static String replace $F1947 ( source , target , replacement ) { \n\t$F280 ( output ) int n = NUM00 ; \n\twhile ( _BOOL ) { \n\t\t$F204924 ( off , source , target , n ) if ( off == - NUM00 ) { \n\t\t\t$F13047 ( output , source , n ) $F597 } \n\t\t$F13037 ( output , source , n , off ) output . append ( replacement ) ; \n\t\t$F46880 ( n , off , target ) } \n\t$F92 ( output ) } \n"}, {"code": "public void correctNullReceiver $F72 { \n\tif $F215333 ( args ) $F665 handle = handle . bindTo ( NullObject . getNullObject ( ) ) ; \n\thandle = MethodHandles . dropArguments ( handle , NUM00 , targetType . parameterType ( NUM00 ) ) ; \n\tif ( LOG_ENABLED ) $F973 ( LOG ) } \n"}, {"code": "$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel ) "}, {"code": "$F131106 ( number , testValidity , string ) "}, {"code": "public static boolean isPairedEndDirectory ( final File dir ) { \n\tif ( $F7107 ( dir ) || $F4925 ( dir ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tfinal File lDir = $F109794 ( dir ) ; \n\tfinal File rDir = $F109794 ( dir ) ; \n\treturn lDir . exists ( ) && rDir . exists ( ) && lDir . isDirectory ( ) && rDir . isDirectory ( ) ; \n\t} \n"}, {"code": "$F1431 private void checkClassNotFound $F72 throws Exception { \n\tinitGar = _BOOL ; \n\ttry { \n\t\tIgnite ignite1 = startGrid ( NUM00 ) ; \n\t\tIgnite ignite2 = startGrid ( NUM00 ) ; \n\t\tClass task = extLdr . loadClass ( TASK_NAME ) ; \n\t\ttry { \n\t\t\tignite1 . compute ( ) . execute ( task , ignite2 . cluster ( ) . localNode ( ) . id ( ) ) ; \n\t\t\tassert _BOOL ; \n\t\t\t} \n\t\tcatch ( IgniteException e ) $F1328 ( info , e ) } \n\tfinally { \n\t\tstopGrid ( NUM00 ) ; \n\t\tstopGrid ( NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "public String dropEngine ( Engine engine ) { \n\t$F83 ( builder ) for ( String attribute : Setup . getDropEngineMessageFormat ( ) ) { \n\t\tbuilder . append ( getEngineAttribute ( engine , attribute , ! PICKUP ) ) ; \n\t\t} \n\t$F92 ( builder ) } \n"}, {"code": "public Iterator $F115413 iterator $F72 $F16048 ( elements ) "}, {"code": "protected void popWriteContext $F72 { \n\t$F72676 ( writeContext_ , writeContextStack_ ) } \n"}, {"code": "public long calculateEndTime $F72 { \n\tif ( endTime == NUM00 ) { \n\t\t$F21879 ( System ) } \n\telse if ( endTime < NUM00 ) { \n\t\treturn System . currentTimeMillis ( ) - endTime ; \n\t\t} \n\treturn endTime ; \n\t} \n"}, {"code": "protected String extractAlternateOpenQuote ( String token ) $F1337 "}, {"code": "private boolean removeIndexEntry ( ServiceType resourceType , String resourceName , String policyName ) throws PolicyException { \n\tResourceIndex resourceIndex = ( ResourceIndex ) $F22754 ( resourceIndices , resourceType ) ; \n\t$F5178 ( resourceIndex , refreshResourceIndexFromDataStore , resourceType ) return resourceIndex . removeIndexEntry ( resourceName , policyName ) ; \n\t} \n"}, {"code": "public static TextBlock parseTextBlock ( ParseContext parseContext ) { \n\treturn TextBlockSectionParser . parseTextBlock ( parseContext ) ; \n\t} \n"}, {"code": "public final static boolean inLongRange ( $F1469 digitChars , int offset , int len , boolean negative ) { \n\tString cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR ; \n\t$F1749 ( cmpLen , cmpStr ) if ( len < cmpLen ) return _BOOL ; \n\tif ( len > cmpLen ) return _BOOL ; \n\tfor ( $F1316 ( i , cmpLen ) ) { \n\t\tif ( digitChars [ offset + i ] > cmpStr . charAt ( i ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static Collection < DebuggerException > mergeExceptionsSettings ( final DebugTargetSettings target , final Collection < DebuggerException > exceptions , final int debuggerId ) throws CouldntLoadDataException { \n\tfinal Map < Long , DebuggerException > exceptionsMap = getExceptionsMap ( exceptions ) ; \n\tfor ( final DebuggerException dbgException : exceptions ) { \n\t\tfinal String setting = target . readSetting ( DebuggerException . getSettingKey ( dbgException , debuggerId ) ) ; \n\t\tif ( setting != null ) { \n\t\t\tfinal DebuggerExceptionHandlingAction handlingAction = DebuggerExceptionHandlingAction . convertToHandlingAction ( Integer . valueOf ( setting ) ) ; \n\t\t\tfinal DebuggerException newException = new DebuggerException ( dbgException . getExceptionName ( ) , dbgException . getExceptionCode ( ) , handlingAction ) ; \n\t\t\texceptionsMap . put ( dbgException . getExceptionCode ( ) , newException ) ; \n\t\t\t} \n\t\t} \n\t$F214800 ( exceptionsMap ) } \n"}, {"code": "public void verifyAnnotation ( String methodName , String annotationName ) throws Exception { \n\t$F63290 ( clazz , Class , className ) Method method = clazz . getDeclaredMethod ( methodName ) ; \n\t$F63290 ( annotationClazz , Class , annotationName ) java . lang . annotation . Annotation annotation = method . getAnnotation ( annotationClazz ) ; \n\tAssert . assertNotNull ( annotation ) ; \n\t} \n"}, {"code": "$F2208 ( sourceList , entryList , isEmpty , sourceCount , entry ) "}, {"code": "public PublisherAmb $F4203 ambAdditionalSource ( $F40799 ( source ) ) { \n\tif ( array != null ) { \n\t\tint n = array . length ; \n\t\t$F1431 $F40798 [ ] $F48543 ( newArray , n ) ; \n\t\t$F135 ( System , array , newArray , n ) newArray [ n ] = source ; \n\t\treturn new PublisherAmb $F200 ( newArray ) ; \n\t\t} \n\t$F1274 } \n"}, {"code": "public void beginDisplay ( DisplayEvent event ) throws ModelControlException { \n\tsuper . beginDisplay ( event ) ; \n\t$F59547 ( siteName , getPageSessionAttribute , PG_ATTR_SITE_NAME ) $F59551 ( model , getModel ) ptModel . setPageTitleText ( model . getEditSitePageTitle ( siteName ) ) ; \n\ttry { \n\t\tsetDisplayFieldValue ( TF_URL , model . getSitePrimaryURL ( siteName ) ) ; \n\t\tgetFailoverURLs ( siteName , model ) ; \n\t\tgetServers ( siteName , model ) ; \n\t\t} \n\t$F50339 ( setInlineAlertMessage , CCAlert , e ) } \n"}, {"code": "public boolean add ( AccessibleState state ) { \n\tif ( states == null ) { \n\t\t$F20637 ( states ) } \n\tif $F2200 ( states , state ) $F20644 ( states , state , _BOOL ) else { \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public static final String readFile ( File file ) throws IOException { \n\tBufferedInputStream in = null ; \n\ttry { \n\t\t$F20278 ( in , file ) SimpleByteBuffer buffer = new SimpleByteBuffer $F72 ; \n\t\t$F12496 ( buf ) int len ; \n\t\twhile $F18067 ( len , in , buf ) $F1717 ( buffer , buf , len ) return new String ( buffer . buffer , NUM00 , buffer . write ) ; \n\t\t} \n\tfinally { \n\t\t$F162760 ( in ) } \n\t} \n"}, {"code": "void addDecimalPoint $F72 { \n\tthis . displayMode = DISPLAY_MODE . INPUT ; \n\tif ( this . clearOnNextDigit ) { \n\t\tsetDisplayString ( EMPTY_ \"STRING\" ) ; \n\t\t} \n\t$F61105 ( inputString , getDisplayString ) if $F283026 ( inputString , DOT_CHARACTER ) { \n\t\tsetDisplayString ( inputString + DOT_CHARACTER ) ; \n\t\t} \n\t} \n"}, {"code": "public void close $F72 throws $F3258 $F881 ( m_os ) "}, {"code": "void show $F72 { \n\t$F5453 ( mIsVisible ) mIsVisible = _BOOL ; \n\tmHeightPx = Math . round ( mDefaultHeightPx ) ; \n\tinvalidate ( ) ; \n\t} \n"}, {"code": "public void recordMirrorOperation ( DbClient dbClient , OperationTypeEnum opType , Operation . Status status , Object ... extParam ) { \n\ttry { \n\t\tboolean opStatus = ( Operation . Status . ready == status ) ? _BOOL : _BOOL ; \n\t\tString evType ; \n\t\tevType = opType . getEvType ( opStatus ) ; \n\t\t$F137633 ( evDesc , opType ) String opStage = AuditLogManager . AUDITOP_END ; \n\t\t_logger . info ( NUM00 , opType . toString ( ) , $F5528 ( evType ) + evDesc ) ; \n\t\trecordBourneMirrorEvent ( dbClient , getId ( ) , evType , status , evDesc ) ; \n\t\tswitch ( opType ) { \n\t\t\tcase CREATE_FILE_MIRROR : case START_FILE_MIRROR : case SUSPEND_FILE_MIRROR : case DETACH_FILE_MIRROR : case PAUSE_FILE_MIRROR : case RESUME_FILE_MIRROR : case FAILOVER_FILE_MIRROR : case STOP_FILE_MIRROR : case FAILBACK_FILE_MIRROR : case RESYNC_FILE_MIRROR : case REFRESH_FILE_MIRROR : case MODIFY_FILE_MIRROR_RPO : auditFile ( dbClient , opType , opStatus , opStage , extParam ) ; \n\t\t\t$F597 $F37651 ( _logger ) } \n\t\t} \n\tcatch ( Exception e ) { \n\t\t_logger . error ( $F89018 ( opType , e ) ) ; \n\t\t} \n\t} \n"}, {"code": "private void cancelTakeImage $F72 { \n\tmShootedPicturePath = null ; \n\t$F725 ( mSelectedGalleryItemsList ) VectorApp . setSavedCameraImagePreview ( null ) ; \n\tstartCameraPreview ( ) ; \n\tupdateUiConfiguration ( UI_SHOW_CAMERA_PREVIEW , IMAGE_ORIGIN_CAMERA ) ; \n\t} \n"}, {"code": "protected int nextGridToRestart $F72 { \n\tif ( currRestartGridId == serverCount ( ) ) currRestartGridId = NUM00 ; \n\treturn ++ currRestartGridId ; \n\t} \n"}, {"code": "public void charactersRaw $F62353 ( start , length ) throws $F2253 { \n\tif ( isOutsideDocElem ( ) && XMLCharacterRecognizer . isWhiteSpace ( ch , start , length ) ) $F665 String s = new String ( ch , start , length ) ; \n\tappend ( m_doc . createProcessingInstruction ( NUM00 , NUM00 ) ) ; \n\tappend ( m_doc . createTextNode ( s ) ) ; \n\t} \n"}, {"code": "private void removeStaleIteratorReferences $F72 { \n\tremoveStaleReferences ( iteratorReferenceQueue , iterators ) ; \n\t} \n"}, {"code": "boolean destroyIGroup ( boolean force ) { \n\tNaElement $F89079 ( elem ) ; \n\t$F89084 ( elem , name ) $F89083 ( elem , Boolean , force ) try { \n\t\tserver . invokeElem ( elem ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tString msg = NUM00 + name ; \n\t\tlog . error ( msg , e ) ; \n\t\tthrow new NetAppException ( msg , e ) ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "$F1 public double finiteDifferenceEpsilon $F72 $F1083 "}, {"code": "public void remove ( final HttpConnection connection ) { \n\tlog . debug ( NUM00 + connection . getID ( ) ) ; \n\tconnectionToAdded . remove ( connection ) ; \n\t} \n"}, {"code": "public void putByte ( long pos , byte val ) { \n\tunsafe . putByte ( pos + addr , val ) ; \n\t} \n"}, {"code": "public void addReference ( MessagePart reference ) $F207 ( references , reference ) "}, {"code": "protected $F8748 datasetIntegrity ( AttrTypes attrTypes , int classType , boolean attributeMissing , boolean classMissing ) { \n\tEstimator estimator = null ; \n\tprint ( NUM00 ) ; \n\tprintAttributeSummary ( attrTypes , classType ) ; \n\tprint ( NUM00 ) ; \n\tint numTrain = getNumInstances ( ) ; \n\tgetNumInstances ( ) ; \n\tint numClasses = NUM00 , missingLevel = NUM00 ; \n\t$F125783 ( result ) Instances train = null ; \n\tboolean built = _BOOL ; \n\ttry { \n\t\ttrain = makeTestDataset ( NUM00 , numTrain , NUM00 , attrTypes , numClasses , classType ) ; \n\t\tint attrIndex = NUM00 ; \n\t\tif ( missingLevel > NUM00 ) { \n\t\t\taddMissing ( train , missingLevel , attributeMissing , classMissing , attrIndex ) ; \n\t\t\t} \n\t\testimator = Estimator . makeCopies ( getEstimator ( ) , NUM00 ) [ NUM00 ] ; \n\t\t} \n\tcatch ( Exception ex ) $F220112 ( ex ) try { \n\t\tInstances trainCopy = new Instances ( train ) ; \n\t\tint attrIndex = NUM00 ; \n\t\testimator . addValues ( trainCopy , attrIndex ) ; \n\t\tcompareDatasets ( train , trainCopy ) ; \n\t\tbuilt = _BOOL ; \n\t\tprintln ( NUM00 ) ; \n\t\tresult [ NUM00 ] = _BOOL ; \n\t\t} \n\tcatch ( Exception ex ) { \n\t\tprintln ( NUM00 ) ; \n\t\tresult [ NUM00 ] = _BOOL ; \n\t\tif ( m_Debug ) { \n\t\t\tprintln ( NUM00 ) ; \n\t\t\tprint ( NUM00 ) ; \n\t\t\tif ( built ) $F1210 ( print ) else $F1210 ( print ) $F5354 ( println , ex ) println ( NUM00 ) ; \n\t\t\tprintln ( $F369 ( train ) ) ; \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "$F129060 ( views , direction , focusableMode , focusableCount , descendantFocusability , getDescendantFocusability , FOCUS_BLOCK_DESCENDANTS , i , getChildCount , child , getChildAt , VISIBLE , ii , infoForChild , mCurItem , FOCUS_AFTER_DESCENDANTS , isFocusable , FOCUSABLES_TOUCH_MODE , isInTouchMode , isFocusableInTouchMode , this ) "}, {"code": "protected DateTimeData parse ( String str ) throws SchemaDateTimeException { \n\tDateTimeData date = new DateTimeData ( str , this ) ; \n\t$F1749 ( len , str ) if ( $F4434 ( str ) || $F4434 ( str ) || $F4434 ( str ) ) { \n\t\tthrow new SchemaDateTimeException $F580 ; \n\t\t} \n\tdate . year = YEAR ; \n\tdate . month = MONTH ; \n\tdate . day = parseInt ( str , NUM00 , NUM00 ) ; \n\tif ( DAY_SIZE < len ) { \n\t\tif ( ! isNextCharUTCSign ( str , DAY_SIZE , len ) ) { \n\t\t\tthrow new SchemaDateTimeException $F580 ; \n\t\t\t} \n\t\telse { \n\t\t\tgetTimeZone ( str , date , DAY_SIZE , len ) ; \n\t\t\t} \n\t\t} \n\tvalidateDateTime ( date ) ; \n\tsaveUnnormalized ( date ) ; \n\tif ( date . utc != NUM00 && date . utc != NUM00 ) { \n\t\tnormalize ( date ) ; \n\t\t} \n\tdate . position = NUM00 ; \n\treturn date ; \n\t} \n"}, {"code": "public static $F10651 parse ( final URI uri , boolean decodeQueryParam ) { \n\t$F10651 result = Collections . emptyMap ( ) ; \n\tfinal String query = uri . getRawQuery ( ) ; \n\tif $F22 ( query ) { \n\t\t$F23429 ( result ) parse ( result , new Scanner ( query ) , null , decodeQueryParam ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "private void updatePeriod $F72 { \n\tfor ( $F2277 ( i , mConversion ) ) { \n\t\tint dateType = mConversion . keyAt ( i ) ; \n\t\tTimePeriodSlider slider = mTimePeriodSliders . get ( dateType ) ; \n\t\tslider . setValue ( mPeriod . get ( mConversion . valueAt ( i ) ) ) ; \n\t\t} \n\tmTime . setText ( getFormattedPeriod ( ) ) ; \n\tmDuration = mPeriod . toStandardDuration ( ) ; \n\tdoValidation ( ) ; \n\t} \n"}, {"code": "public long start_brk $F72 $F12907 ( Long , fields ) "}, {"code": "public static void validateParticipantIdsEqual ( String expectedParticipantId , String actualParticipantId ) throws CryptoException { \n\tif $F2137 ( expectedParticipantId , actualParticipantId ) { \n\t\tthrow new CryptoException $F6486 ( actualParticipantId , expectedParticipantId ) ; \n\t\t} \n\t} \n"}, {"code": "protected void encodeFields ( mxCodec enc , Object obj , Node node ) { \n\t$F121108 ( type , obj ) while ( type != null ) { \n\t\t$F16273 ( fields , type ) for ( $F1139 ( i , fields ) ) { \n\t\t\tField f = fields [ i ] ; \n\t\t\tif ( ( f . getModifiers ( ) & Modifier . TRANSIENT ) != Modifier . TRANSIENT ) { \n\t\t\t\t$F20605 ( fieldname , f ) Object value = getFieldValue ( obj , fieldname ) ; \n\t\t\t\tencodeValue ( enc , obj , fieldname , value , node ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F7852 ( type ) } \n\t} \n"}, {"code": "$F36042 ( propertyName , in_vcl , beanContextChildSupport ) "}, {"code": "private void logMissingResource ( FacesContext ctx , String resourceId , Throwable t ) { \n\tLevel level ; \n\tif ( ! ctx . isProjectStage ( ProjectStage . Production ) ) { \n\t\tlevel = Level . WARNING ; \n\t\t} \n\telse { \n\t\tlevel = ( ( t != null ) ? Level . WARNING : Level . FINE ) ; \n\t\t} \n\tif $F155449 ( LOGGER , level ) { \n\t\tLOGGER . log ( $F157217 ( level , resourceId ) ) ; \n\t\tif ( t != null ) { \n\t\t\tLOGGER . log ( level , NUM00 , t ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void appendAliasedColumn $F43574 ( sb , colName , tAlias ) { \n\t$F43191 ( tAlias , sb ) $F84 ( sb ) sb . append ( colName ) ; \n\t$F84 ( sb ) } \n"}, {"code": "private MidiEvent createScheduledEvent ( $F96 msg , int offset , int count , long timestamp ) { \n\tMidiEvent event ; \n\tif ( count > POOL_EVENT_SIZE ) { \n\t\tevent = new MidiEvent ( msg , offset , count , timestamp ) ; \n\t\t} \n\telse { \n\t\tevent = ( MidiEvent ) removeEventfromPool ( ) ; \n\t\tif ( event == null ) { \n\t\t\tevent = new MidiEvent ( POOL_EVENT_SIZE ) ; \n\t\t\t} \n\t\tSystem . arraycopy ( msg , offset , event . data , NUM00 , count ) ; \n\t\tevent . count = count ; \n\t\tevent . setTimestamp ( timestamp ) ; \n\t\t} \n\treturn event ; \n\t} \n"}, {"code": "public void startElement $F42838 ( namespaceURI , localName , qName , atts ) throws SAXException { \n\ttry { \n\t\telemType = ( $F156857 ) elementTypes . get ( localName ) ; \n\t\tif ( gatherMode ) { \n\t\t\tif ( gatheringElement . gatherElement ( localName , atts ) ) { \n\t\t\t\tgatherBuffer . add ( new Object [ ] { \n\t\t\t\t\telemType , new AttributesImpl ( atts ) } \n\t\t\t\t) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\t$F2329 ( elemType ) elemType . startElement ( atts ) ; \n\t\t\t} \n\t\telems . add ( elemType ) ; \n\t\t} \n\tcatch ( SAXException saxex ) { \n\t\tthrow saxex ; \n\t\t} \n\tcatch ( Exception ex ) { \n\t\t$F6287 ( ex ) } \n\t} \n"}, {"code": "public static $F96 gzip ( String input ) { \n\t$F1538 ( baos ) GZIPOutputStream gzos = null ; \n\ttry $F42214 ( gzos , baos , input ) $F12241 ( e ) $F42219 ( gzos ) $F11316 ( baos ) } \n"}, {"code": "public static double logPdf $F7635 ( x , m , shape ) { \n\tdouble a = Math . sqrt ( shape / ( NUM00 * Math . PI * x * x * x ) ) ; \n\tdouble b = ( ( - shape ) * ( x - m ) * ( x - m ) ) / ( NUM00 * m * m * x ) ; \n\treturn Math . log ( a ) + b ; \n\t} \n"}, {"code": "public void addEdgeConnector $F72 { \n\tnumEdgeConnectors ++ ; \n\tString name = NUM00 ; \n\tboolean duplicate = _BOOL ; \n\twhile ( duplicate ) { \n\t\tname = NUM00 + numEdgeConnectors ; \n\t\tif ( finder . findPositionablePointByName ( name ) == null ) { \n\t\t\tduplicate = _BOOL ; \n\t\t\t} \n\t\t$F19814 ( duplicate , numEdgeConnectors ) } \n\tPositionablePoint o = new PositionablePoint ( name , PositionablePoint . EDGE_CONNECTOR , currentPoint , this ) ; \n\tpointList . add ( o ) ; \n\tsetDirty ( _BOOL ) ; \n\t} \n"}, {"code": "$F4585 ( RequestMethod ) $F4586 public RestWrapper list ( $F188477 ( startPage ) , $F188477 ( pageSize ) , Principal principal ) { \n\tRestWrapper restWrapper = null ; \n\ttry { \n\t\tInteger counter = workflowTypeDAO . totalRecordCount ( ) ; \n\t\tList < WorkflowType > workflowTypes = new ArrayList < WorkflowType > $F72 ; \n\t\tList < com . wipro . ats . bdre . md . dao . jpa . WorkflowType > jpaWorkflowTypes = workflowTypeDAO . list ( startPage , pageSize ) ; \n\t\tfor ( com . wipro . ats . bdre . md . dao . jpa . WorkflowType wfType : jpaWorkflowTypes ) { \n\t\t\tWorkflowType workflowType = new WorkflowType $F72 ; \n\t\t\tworkflowType . setWorkflowId ( wfType . getWorkflowId ( ) ) ; \n\t\t\tworkflowType . setWorkflowTypeName ( wfType . getWorkflowTypeName ( ) ) ; \n\t\t\tworkflowType . setCounter ( counter ) ; \n\t\t\tworkflowTypes . add ( workflowType ) ; \n\t\t\t} \n\t\t$F4608 ( restWrapper , workflowTypes , RestWrapper ) $F170638 ( LOGGER , principal ) } \n\t$F20495 ( LOGGER , e , restWrapper , RestWrapper ) return restWrapper ; \n\t} \n"}, {"code": "$F95779 ( out , remaining , count , buf , buffers , c , Math ) "}, {"code": "public void parseForClass ( GenericDeclaration genericDecl , String signature ) { \n\tsetInput ( genericDecl , signature ) ; \n\tif ( ! eof ) $F5795 ( parseClassSignature ) else { \n\t\tif ( genericDecl instanceof Class ) { \n\t\t\tClass c = ( Class ) genericDecl ; \n\t\t\t$F272049 ( this , EmptyArray ) this . superclassType = c . getSuperclass ( ) ; \n\t\t\t$F18547 interfaces = c . getInterfaces ( ) ; \n\t\t\tif $F9634 ( interfaces ) { \n\t\t\t\tthis . interfaceTypes = ListOfTypes . EMPTY ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tthis . interfaceTypes = new ListOfTypes ( interfaces ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\t$F272049 ( this , EmptyArray ) this . superclassType = $F12222 ; \n\t\t\tthis . interfaceTypes = ListOfTypes . EMPTY ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "static boolean tryExternalUnpush $F103299 ( t ) { \n\tForkJoinPool p ; \n\t$F17861 ws ; \n\tWorkQueue q ; \n\tSubmitter z ; \n\t$F103302 ( a ) int m , s ; \n\tif ( t != null && $F17863 ( z , submitters ) && ( p = commonPool ) != null && $F17865 ( ws , p ) && $F17868 ( m , ws ) && $F103310 ( q , ws , m , z , SQMASK ) && $F155476 ( s , q ) && $F103318 ( a , q ) ) { \n\t\tlong j = ( ( $F33765 ( a ) & ( s - NUM00 ) ) < < ASHIFT ) + ABASE ; \n\t\tif ( U . getObject ( a , j ) == t && $F103312 ( U , q , QLOCK ) ) { \n\t\t\tif ( q . array == a && q . top == s && U . compareAndSwapObject ( a , j , t , null ) ) { \n\t\t\t\tq . top = s - NUM00 ; \n\t\t\t\tq . qlock = NUM00 ; \n\t\t\t\treturn _BOOL ; \n\t\t\t\t} \n\t\t\tq . qlock = NUM00 ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static $F1986 quantiles ( int n , $F1986 values ) { \n\tvalues = ( $F1986 ) values . clone ( ) ; \n\tArrays . sort ( values ) ; \n\t$F107812 ( qtls , n ) for ( $F50176 ( i , n ) ) { \n\t\tqtls [ i ] = values [ ( $F33765 ( values ) * i ) / n ] ; \n\t\t} \n\treturn qtls ; \n\t} \n"}, {"code": "$F237470 ( doc , elementList , nameNode , child , badSubstring , load , _BOOL , success , ex , DOMException , assertTrue ) "}, {"code": "public QueryException ( String message , int errorCode , SqlStates sqlState , Throwable cause ) { \n\tsuper ( message , cause ) ; \n\tthis . message = message ; \n\tthis . errorCode = errorCode ; \n\tthis . sqlState = sqlState . getSqlState ( ) ; \n\t} \n"}, {"code": "$F13735 ( prefix , namespace , attName , attValue , xmlWriter ) "}, {"code": "public void testConstructorStringRadix16 $F72 { \n\tString value = NUM00 ; \n\tint radix = NUM00 ; \n\tbyte $F3018 = { \n\t\tNUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 } \n\t; \n\t$F3023 ( aNumber , value , radix ) $F3030 ( rBytes ) $F3031 ( resBytes , aNumber ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , aNumber ) } \n"}, {"code": "private CSVData ( List < CSVRecord > records ) $F36568 ( this , Objects , records ) "}, {"code": "private $F28319 untagVolumesMethod ( URI systemURI , $F28584 volumeURIs ) $F28323 ( systemURI , volumeURIs ) "}, {"code": "private $F96 SHA256hash $F97 ( tobeHashed ) { \n\tSHA256Digest digester = new SHA256Digest $F72 ; \n\t$F216093 ( retValue , digester ) $F6163 ( digester , tobeHashed ) $F137382 ( digester , retValue ) return retValue ; \n\t} \n"}, {"code": "@ DataProvider private static $F29684 okResourceResponses $F72 { \n\treturn new Object [ ] [ ] { \n\t\t{ \n\t\t\tnew Response ( OK ) } \n\t\t, { \n\t\t\tnew Response ( FOUND ) } \n\t\t, { \n\t\t\tnew Response ( MOVED_PERMANENTLY ) } \n\t\t, { \n\t\t\tnew Response ( CREATED ) } \n\t\t} \n\t; \n\t} \n"}, {"code": "public synchronized void connect $F72 { \n\tif ( ! _zkConnection . isStarted ( ) ) $F28175 ( _zkConnection ) if $F4329 ( StringUtils , siteId ) $F5795 ( generateSiteId ) } \n"}, {"code": "static Object convertJavaTimeToJavaSql ( Object x ) { \n\tif ( x instanceof LocalDate ) { \n\t\treturn Date . valueOf ( ( LocalDate ) x ) ; \n\t\t} \n\telse if ( x instanceof LocalDateTime ) { \n\t\treturn Timestamp . valueOf ( ( LocalDateTime ) x ) ; \n\t\t} \n\telse if ( x instanceof LocalTime ) { \n\t\treturn Time . valueOf ( ( LocalTime ) x ) ; \n\t\t} \n\treturn x ; \n\t} \n"}, {"code": "$F1113 private static DefaultMutableTreeNode updateTreeStructure ( $F1113 DefaultMutableTreeNode treeNode , $F1113 ZipFile compressedApk ) { \n\tlong compressedSize = NUM00 ; \n\tApkEntry entry = ApkEntry . fromNode ( treeNode ) ; \n\tassert entry != null ; \n\tif ( $F162517 ( treeNode ) ) { \n\t\tfor ( $F140290 ( i , treeNode ) ) { \n\t\t\tDefaultMutableTreeNode childNode = updateTreeStructure ( ( DefaultMutableTreeNode ) treeNode . getChildAt ( i ) , compressedApk ) ; \n\t\t\tcompressedSize += ( ( ApkEntry ) childNode . getUserObject ( ) ) . getCompressedSize ( ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tZipEntry ze = compressedApk . getEntry ( ApkFileSystem . getInstance ( ) . getRelativePath ( entry . getFile ( ) ) ) ; \n\t\tif ( ze == null ) $F44867 ( compressedSize ) else { \n\t\t\tcompressedSize = ze . getCompressedSize ( ) ; \n\t\t\t} \n\t\t} \n\tentry . setCompressedSize ( compressedSize ) ; \n\treturn treeNode ; \n\t} \n"}, {"code": "public long totalMemory $F72 $F2905 ( totalMemoryImpl ) "}, {"code": "public static void enableSync ( String accountName ) $F845 "}, {"code": "public static void scan $F72 { \n\tList < ScannerRegistration > scanners = getScannersToRun ( ) ; \n\tif $F3817 ( scanners ) { \n\t\t$F52326 urls = getSearchURLs ( ) ; \n\t\tif ( urls == null ) { \n\t\t\turls = fiterLibs ( ScannerURLS . getURLsForSearch ( ) ) ; \n\t\t\tscan ( scanners , urls ) ; \n\t\t\t} \n\t\telse { \n\t\t\tscan ( scanners , urls ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public final void turnTo ( double angle ) { \n\tangle = Geometric . clampAngleDegree ( angle ) ; \n\torientation = Geometric . clampAngleDegree ( angle ) ; \n\tGeometric . rotateTo ( velocity , Math . toRadians ( orientation ) ) ; \n\t} \n"}, {"code": "$F30954 ( putLock , takeLock ) "}, {"code": "protected int startBridgeServer ( int port , boolean notifyBySubscription ) throws IOException { \n\tCache cache = getCache ( ) ; \n\tCacheServer bridge = cache . addCacheServer ( ) ; \n\tbridge . setPort ( port ) ; \n\tbridge . setNotifyBySubscription ( notifyBySubscription ) ; \n\t$F2346 ( bridge ) bridgeServerPort = bridge . getPort ( ) ; \n\treturn bridge . getPort ( ) ; \n\t} \n"}, {"code": "public void addAction ( String action ) { \n\t$F131 args = $F382 ; \n\tSimpleDateFormat sdf = new SimpleDateFormat ( context . getString ( R . string . dateFormat ) ) ; \n\targs [ NUM00 ] = $F52170 ( sdf ) ; \n\tString timestamp = context . getString ( R . string . timestamp , args ) ; \n\thistory . add ( action + timestamp ) ; \n\tnotifyListeners ( new PropertyChangeEvent ( this , ActivityConstants . historyProperty , null , null ) ) ; \n\t} \n"}, {"code": "$F410840 ( value ) "}, {"code": "protected F restoreLastFilter ( int dialogType ) { \n\tF result ; \n\tList $F355799 list ; \n\tint i ; \n\tresult = null ; \n\tif ( dialogType == OPEN_DIALOG ) list = getOpenFileFilters ( ) ; \n\telse list = getSaveFileFilters ( ) ; \n\tif $F3817 ( list ) { \n\t\tresult = getDefaultFileFilter ( dialogType ) ; \n\t\tsetFileFilter ( result ) ; \n\t\tif ( m_LastFilter != null ) { \n\t\t\tfor ( $F12002 ( i , list ) ) { \n\t\t\t\tif ( m_Comparator . compare ( list . get ( i ) , m_LastFilter ) == NUM00 ) { \n\t\t\t\t\tresult = ( F ) m_LastFilter ; \n\t\t\t\t\tsetFileFilter ( m_LastFilter ) ; \n\t\t\t\t\t$F597 } \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public void testCharBasedCollisions $F72 { \n\tCharsToNameCanonicalizer sym = CharsToNameCanonicalizer . createRoot ( ) ; \n\ttry { \n\t\tint firstHash = NUM00 ; \n\t\tfor ( String str : CHAR_COLLISIONS ) { \n\t\t\tint hash = sym . calcHash ( str ) ; \n\t\t\tif ( firstHash == NUM00 ) { \n\t\t\t\tfirstHash = hash ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tassertEquals ( firstHash , hash ) ; \n\t\t\t\t} \n\t\t\tsym . findSymbol ( str . toCharArray ( ) , NUM00 , str . length ( ) , hash ) ; \n\t\t\t} \n\t\tfail ( NUM00 ) ; \n\t\t} \n\tcatch ( IllegalStateException e ) { \n\t\tverifyException ( e , NUM00 ) ; \n\t\tassertEquals ( CharsToNameCanonicalizer . MAX_COLL_CHAIN_LENGTH + NUM00 , sym . maxCollisionLength ( ) ) ; \n\t\tassertEquals ( CharsToNameCanonicalizer . MAX_COLL_CHAIN_LENGTH + NUM00 , sym . collisionCount ( ) ) ; \n\t\tassertEquals ( CharsToNameCanonicalizer . MAX_COLL_CHAIN_LENGTH + NUM00 , sym . size ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "public void handleTblDataSiteActionHrefRequest ( RequestInvocationEvent event ) throws ModelControlException { \n\tString siteName = hexToString ( ( String ) getDisplayFieldValue ( TBL_DATA_SITE_ACTION_HREF ) ) ; \n\tsetPageSessionAttribute ( SiteEditViewBean . PG_ATTR_SITE_NAME , siteName ) ; \n\tSiteEditViewBean vb = ( SiteEditViewBean ) getViewBean ( SiteEditViewBean . class ) ; \n\tunlockPageTrail ( ) ; \n\tpassPgSessionMap ( vb ) ; \n\t$F50333 ( vb , getRequestContext ) } \n"}, {"code": "public static void normalize $F280936 ( doubles , sum ) { \n\tif $F35707 ( Double , sum ) $F825 $F256058 ( sum ) for ( $F1139 ( i , doubles ) ) { \n\t\tdoubles [ i ] /= sum ; \n\t\t} \n\t} \n"}, {"code": "private void expandArray ( int shardId ) { \n\tint newNumShards = Math . max ( $F29907 ( Math , numShards , SHARD_GROWTH_FACTOR ) , shardId + NUM00 ) ; \n\tPreconditions . checkArgument ( newNumShards * shardLength < Integer . MAX_VALUE , NUM00 ) ; \n\t$F26352 newArray = new int [ newNumShards ] [ ] ; \n\tSystem . arraycopy ( readerAccessibleInfo . array , NUM00 , newArray , NUM00 , readerAccessibleInfo . array . length ) ; \n\treaderAccessibleInfo = new ReaderAccessibleInfo ( newArray ) ; \n\tnumShards = newNumShards ; \n\t} \n"}, {"code": "protected $F4203 T waitForPropertyValue ( String documentSelfLink , $F20474 type , String propName , Object propValue , boolean shouldMatch , AtomicInteger count ) throws Throwable { \n\t$F1431 $F6689 prop = propValue instanceof List ? $F128538 ( propValue ) : Arrays . asList ( propValue ) ; \n\treturn waitForPropertyValue ( documentSelfLink , type , propName , prop , shouldMatch , count ) ; \n\t} \n"}, {"code": "public static String fromIPv4AddressCollection ( $F2306 ipAddresses ) { \n\t$F1747 ( ipAddresses ) $F280 ( sb ) $F84 ( sb ) for ( Integer ip : ipAddresses ) { \n\t\t$F6407 ( sb , fromIPv4Address , ip ) $F84 ( sb ) } \n\tsb . replace ( $F1092 ( sb ) , sb . length ( ) , NUM00 ) ; \n\t$F92 ( sb ) } \n"}, {"code": "public static final String makeJavaIdentifier ( String identifier ) { \n\t$F80469 ( modifiedIdentifier , identifier ) if ( ! Character . isJavaIdentifierStart ( identifier . charAt ( NUM00 ) ) ) $F86 ( modifiedIdentifier ) for ( $F1088 ( i , identifier ) ) { \n\t\t$F1280 ( ch , identifier , i ) if ( Character . isJavaIdentifierPart ( ch ) && ch != NUM00 ) $F288 ( modifiedIdentifier , ch ) else if ( ch == NUM00 ) $F86 ( modifiedIdentifier ) else $F9821 ( modifiedIdentifier , mangleChar , ch ) } \n\tif ( $F17717 ( isJavaKeyword , modifiedIdentifier ) ) $F86 ( modifiedIdentifier ) $F92 ( modifiedIdentifier ) } \n"}, {"code": "public static String encrypt ( String input ) { \n\tif $F25900 ( encryptionService , input ) { \n\t\treturn input ; \n\t\t} \n\treturn ENCRYPTION_PREFIX + encryptionService . encrypt ( input ) ; \n\t} \n"}, {"code": "public static void createFederatedNamespace ( URI namespace , ZooKeeperClient zkc ) throws InterruptedException , ZooKeeperClient . ZooKeeperConnectionException , KeeperException { \n\tString zkSubNamespacesPath = namespace . getPath ( ) + NUM00 + ZNODE_SUB_NAMESPACES ; \n\tUtils . zkCreateFullPathOptimistic ( zkc , zkSubNamespacesPath , $F10314 , zkc . getDefaultACL ( ) , CreateMode . PERSISTENT ) ; \n\t} \n"}, {"code": "public static Executor createTaskDistributor $F72 { \n\treturn Executors . newCachedThreadPool ( createThreadFactory ( Thread . NORM_PRIORITY , NUM00 ) ) ; \n\t} \n"}, {"code": "public String process $F72 { \n\twhile ( off < count ) { \n\t\twhile ( off < count ) { \n\t\t\tchar ch = text [ off ] ; \n\t\t\tif ( ! isSpecial ( ch ) ) $F5153 off ++ ; \n\t\t\t} \n\t\tif $F931 ( acronym ) $F9099 ( token , number ) } \n\t$F92 ( builder ) } \n"}, {"code": "public static String bytesToBinHex $F24576 ( data , nStartPos , nNumOfBytes ) { \n\t$F83 ( sbuf ) sbuf . setLength ( nNumOfBytes < < NUM00 ) ; \n\tint nPos = NUM00 ; \n\tfor ( $F119 ( nI , nNumOfBytes ) ) { \n\t\tsbuf . setCharAt ( nPos ++ , HEXTAB [ ( data [ nI + nStartPos ] > > NUM00 ) & NUM00 ] ) ; \n\t\tsbuf . setCharAt ( nPos ++ , HEXTAB [ data [ nI + nStartPos ] & NUM00 ] ) ; \n\t\t} \n\t$F92 ( sbuf ) } \n"}, {"code": "private static $F2027 mult128 $F22564 ( a , b ) { \n\t$F11844 ( result ) $F11844 ( a0 ) System . arraycopy ( a , NUM00 , a0 , NUM00 , $F121399 ( Math , a ) ) ; \n\t$F11844 ( a1 ) if $F3305 ( a ) { \n\t\tSystem . arraycopy ( a , NUM00 , a1 , NUM00 , Math . min ( NUM00 , a . length - NUM00 ) ) ; \n\t\t} \n\t$F11844 ( b0 ) System . arraycopy ( b , NUM00 , b0 , NUM00 , $F121399 ( Math , b ) ) ; \n\t$F11844 ( b1 ) if $F3305 ( b ) { \n\t\tSystem . arraycopy ( b , NUM00 , b1 , NUM00 , Math . min ( NUM00 , b . length - NUM00 ) ) ; \n\t\t} \n\tif ( a1 [ NUM00 ] == NUM00 && b1 [ NUM00 ] == NUM00 ) { \n\t\tif ( a1 [ NUM00 ] != NUM00 || b1 [ NUM00 ] != NUM00 ) { \n\t\t\t$F2027 c = mult32 ( a1 [ NUM00 ] , b1 [ NUM00 ] ) ; \n\t\t\t$F166091 ( result , c ) $F166091 ( result , c ) $F166091 ( result , c ) $F166091 ( result , c ) } \n\t\t} \n\telse { \n\t\t$F36803 ( c , mult64 , a1 , b1 ) $F166091 ( result , c ) $F166091 ( result , c ) $F166100 ( result , c ) $F166100 ( result , c ) $F166091 ( result , c ) $F166091 ( result , c ) } \n\t$F166091 ( a1 , a0 ) $F166091 ( a1 , a0 ) $F166091 ( b1 , b0 ) $F166091 ( b1 , b0 ) if ( a1 [ NUM00 ] == NUM00 && b1 [ NUM00 ] == NUM00 ) { \n\t\t$F2027 d = mult32 ( a1 [ NUM00 ] , b1 [ NUM00 ] ) ; \n\t\t$F166091 ( result , d ) $F166091 ( result , d ) } \n\telse { \n\t\t$F36803 ( d , mult64 , a1 , b1 ) $F166091 ( result , d ) $F166091 ( result , d ) $F166091 ( result , d ) $F166091 ( result , d ) } \n\tif ( a0 [ NUM00 ] == NUM00 && b0 [ NUM00 ] == NUM00 ) { \n\t\t$F2027 e = mult32 ( a0 [ NUM00 ] , b0 [ NUM00 ] ) ; \n\t\t$F166091 ( result , e ) $F166091 ( result , e ) $F166091 ( result , e ) $F166091 ( result , e ) } \n\telse { \n\t\t$F36803 ( e , mult64 , a0 , b0 ) $F166091 ( result , e ) $F166091 ( result , e ) $F166100 ( result , e ) $F166100 ( result , e ) $F166091 ( result , e ) $F166091 ( result , e ) } \n\treturn result ; \n\t} \n"}, {"code": "public static void updateLast $F72 { \n\tClientUtils . lastUpdate = System . currentTimeMillis ( ) ; \n\t} \n"}, {"code": "public ReplicaSets ( Collection < ReplicaSet > rsSpecs ) { \n\tif ( rsSpecs != null ) $F115274 ( rsSpecs ) Collections . sort ( nonReplicaSets ) ; \n\t} \n"}, {"code": "static private String BYTE_Max $F72 { \n\tbyte tempValue = Byte . MAX_VALUE ; \n\t$F33236 ( String , tempValue ) } \n"}, {"code": "public static Executor createTaskDistributor $F72 { \n\treturn Executors . newCachedThreadPool ( createThreadFactory ( Thread . NORM_PRIORITY , NUM00 ) ) ; \n\t} \n"}, {"code": "protected PathNode pathNode ( String pattern ) { \n\tfinal String seq [ ] = pattern . split ( NUM00 ) ; \n\tfinal PathElt elements [ ] = new PathElt [ seq . length ] ; \n\tPathMod mod = null ; \n\tfor ( $F1139 ( i , seq ) ) { \n\t\tfinal String s = seq [ i ] ; \n\t\tboolean inverse = $F4431 ( s ) ; \n\t\tswitch ( $F7792 ( s ) ) { \n\t\t\t$F1262 mod = PathMod . ZERO_OR_MORE ; \n\t\t\t$F597 $F1262 mod = PathMod . ONE_OR_MORE ; \n\t\t\t$F597 $F1262 mod = PathMod . ZERO_OR_ONE ; \n\t\t\t$F597 } \n\t\tString c = s . substring ( inverse ? NUM00 : NUM00 , s . length ( ) - ( mod != null ? NUM00 : NUM00 ) ) ; \n\t\telements [ i ] = new PathElt ( constantNode ( c ) , inverse , mod ) ; \n\t\t} \n\treturn new PathNode ( new PathAlternative ( new PathSequence ( elements ) ) ) ; \n\t} \n"}, {"code": "$F1 public int startupNewWorker ( int priority ) { \n\tint actualWorkersStarted = startupNewWorker ( priority , null , null ) ; \n\treturn actualWorkersStarted ; \n\t} \n"}, {"code": "public void addImplInterface ( String iname ) $F207 ( implInterfaces , iname ) "}, {"code": "private static synchronized boolean checkFolderPermissions ( StringBuilder aStringBuilder , String aDirectory ) { \n\t$F1705 ( directory , aDirectory ) $F1909 ( directory ) if $F70404 ( directory ) { \n\t\taStringBuilder . append ( NUM00 + directory + NUM00 + NUM00 ) ; \n\t\treturn _BOOL ; \n\t\t} \n\tif $F14326 ( directory ) { \n\t\taStringBuilder . append ( NUM00 + directory + NUM00 + NUM00 ) ; \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "protected QualifiedItem [ ] parseQualifiedItems ( final $F806 arguments , final VersionSpec defaultVersion , final boolean allowVersionRange , final int startIndex ) { \n\t$F18062 ( Check , arguments ) final List < QualifiedItem > items = new ArrayList < QualifiedItem > ( arguments . length ) ; \n\tfor ( $F9958 ( i , startIndex , arguments ) ) { \n\t\tfinal String arg = arguments [ i ] ; \n\t\tif $F48189 ( StringUtil , arg ) { \n\t\t\ttry { \n\t\t\t\tfinal QualifiedItem qi = new QualifiedItem ( arg , VersionControlConstants . AUTHENTICATED_USER , defaultVersion , allowVersionRange ) ; \n\t\t\t\titems . add ( qi ) ; \n\t\t\t\t} \n\t\t\tcatch ( final VersionSpecParseException e ) { \n\t\t\t\treportWrongArgument ( arg , e ) ; \n\t\t\t\t} \n\t\t\tcatch ( final LabelSpecParseException e ) { \n\t\t\t\treportWrongArgument ( arg , e ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn items . toArray ( new QualifiedItem $F2313 ( items ) ) ; \n\t} \n"}, {"code": "public EipEditor $F72 $F9099 ( super , initializeEditingDomain ) "}, {"code": "public boolean deleteEntry ( BasicPoolEntry entry ) { \n\tfinal boolean found = freeEntries . remove ( entry ) ; \n\tif ( found ) numEntries -- ; \n\treturn found ; \n\t} \n"}, {"code": "$F1309 public void requestContactCapabilities ( ContactId contact ) throws RcsServiceNotRegisteredException , RcsServiceNotAvailableException , RcsGenericException { \n\t$F161627 ( mApi ) try { \n\t\tList < ContactId > $F204 ( listOfContacts ) ; \n\t\tlistOfContacts . add ( contact ) ; \n\t\tmApi . requestContactCapabilities2 ( listOfContacts ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tRcsIllegalArgumentException . assertException ( e ) ; \n\t\tRcsServiceNotRegisteredException . assertException ( e ) ; \n\t\tthrow new RcsGenericException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public ConversationService ( final String versionDate , String username , String password ) { \n\tthis ( versionDate ) ; \n\tsetUsernameAndPassword ( username , password ) ; \n\t} \n"}, {"code": "public CustomOptional < KinesisRecord > next $F72 throws TransientKinesisException { \n\treadMoreIfNecessary ( ) ; \n\tif $F2979 ( data ) { \n\t\treturn CustomOptional . absent ( ) ; \n\t\t} \n\telse { \n\t\tKinesisRecord record = data . removeFirst ( ) ; \n\t\tcheckpoint = checkpoint . moveAfter ( record ) ; \n\t\t$F122628 ( CustomOptional , record ) } \n\t} \n"}, {"code": "$F1 public final synchronized void addRemoveStatements ( Collection $F12621 added , Collection $F12621 removed ) throws IOException { \n\tMapOfListMaps < Resource , String , Statement > rsAdded = new MapOfListMaps < Resource , String , Statement > $F72 ; \n\tMapOfListMaps < Resource , String , Statement > rsRemoved = new MapOfListMaps < Resource , String , Statement > $F72 ; \n\tHashSet $F25924 resources = new HashSet $F25924 $F72 ; \n\tfor ( Statement s : added ) { \n\t\trsAdded . add ( s . getSubject ( ) , SearchFields . getContextID ( s . getContext ( ) ) , s ) ; \n\t\tresources . add ( s . getSubject ( ) ) ; \n\t\t} \n\tfor ( Statement s : removed ) { \n\t\trsRemoved . add ( s . getSubject ( ) , SearchFields . getContextID ( s . getContext ( ) ) , s ) ; \n\t\tresources . add ( s . getSubject ( ) ) ; \n\t\t} \n\tlogger . debug ( $F78807 ( removed , added ) ) ; \n\tBulkUpdater updater = newBulkUpdate ( ) ; \n\tfor ( Resource resource : resources ) { \n\t\tMap < String , $F373359 > stmtsToRemove = rsRemoved . get ( resource ) ; \n\t\tMap < String , $F373359 > stmtsToAdd = rsAdded . get ( resource ) ; \n\t\t$F2689 contextsToUpdate = new $F2690 $F57797 ( stmtsToAdd ) ; \n\t\t$F70469 ( contextsToUpdate , stmtsToRemove ) Map < String , SearchDocument > docsByContext = new HashMap < String , SearchDocument > $F72 ; \n\t\tString resourceId = SearchFields . getResourceID ( resource ) ; \n\t\tIterable < ? extends SearchDocument > documents = getDocuments ( resourceId ) ; \n\t\tfor ( SearchDocument doc : documents ) { \n\t\t\tdocsByContext . put ( doc . getContext ( ) , doc ) ; \n\t\t\t} \n\t\tfor ( String contextId : contextsToUpdate ) { \n\t\t\tString id = SearchFields . formIdString ( resourceId , contextId ) ; \n\t\t\tSearchDocument document = docsByContext . get ( contextId ) ; \n\t\t\tif ( document == null ) { \n\t\t\t\tdocument = newDocument ( id , resourceId , contextId ) ; \n\t\t\t\t$F373359 list = stmtsToAdd . get ( contextId ) ; \n\t\t\t\tif ( list != null ) { \n\t\t\t\t\tfor ( Statement s : list ) { \n\t\t\t\t\t\taddProperty ( s , document ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\tupdater . add ( document ) ; \n\t\t\t\tif $F1710 ( stmtsToRemove , contextId ) $F21153 ( logger , resource , contextId ) } \n\t\t\telse { \n\t\t\t\t$F10651 removedOfResource = null ; \n\t\t\t\t{ \n\t\t\t\t\t$F373359 removedStatements = stmtsToRemove . get ( contextId ) ; \n\t\t\t\t\tif $F1032 ( removedStatements ) { \n\t\t\t\t\t\t$F122365 ( removedOfResource ) ; \n\t\t\t\t\t\tfor ( Statement r : removedStatements ) { \n\t\t\t\t\t\t\tString val = SearchFields . getLiteralPropertyValueAsString ( r ) ; \n\t\t\t\t\t\t\tif ( val != null ) { \n\t\t\t\t\t\t\t\tString field = SearchFields . getPropertyField ( r . getPredicate ( ) ) ; \n\t\t\t\t\t\t\t\t$F48768 ( removedValues , removedOfResource , field ) if ( removedValues == null ) { \n\t\t\t\t\t\t\t\t\t$F21884 ( removedValues ) removedOfResource . put ( field , removedValues ) ; \n\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\tremovedValues . add ( val ) ; \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\tSearchDocument newDocument = newDocument ( id , resourceId , contextId ) ; \n\t\t\t\tboolean mutated = copyDocument ( newDocument , document , removedOfResource ) ; \n\t\t\t\t{ \n\t\t\t\t\t$F373359 addedToResource = stmtsToAdd . get ( contextId ) ; \n\t\t\t\t\tString val ; \n\t\t\t\t\tif $F1032 ( addedToResource ) { \n\t\t\t\t\t\tPropertyCache propertyCache = new PropertyCache ( newDocument ) ; \n\t\t\t\t\t\tfor ( Statement s : addedToResource ) { \n\t\t\t\t\t\t\tval = SearchFields . getLiteralPropertyValueAsString ( s ) ; \n\t\t\t\t\t\t\tif ( val != null ) { \n\t\t\t\t\t\t\t\tString field = SearchFields . getPropertyField ( s . getPredicate ( ) ) ; \n\t\t\t\t\t\t\t\tif ( ! propertyCache . hasProperty ( field , val ) ) { \n\t\t\t\t\t\t\t\t\taddProperty ( s , newDocument ) ; \n\t\t\t\t\t\t\t\t\tmutated = _BOOL ; \n\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\tint nrProperties = countPropertyValues ( newDocument ) ; \n\t\t\t\tif ( nrProperties > NUM00 ) { \n\t\t\t\t\tif ( mutated ) $F7469 ( updater , newDocument ) } \n\t\t\t\telse $F11331 ( updater , document ) } \n\t\t\t} \n\t\t} \n\t$F87417 ( updater ) } \n"}, {"code": "Object toType $F97551 ( value , pattern , locale ) { \n\tCalendar calendar = toCalendar ( value , pattern , locale ) ; \n\treturn toType ( calendar ) ; \n\t} \n"}, {"code": "private SnmpPduPacket executeSubRequest ( SnmpPduPacket req , Object userData ) { \n\tint errorStatus = SnmpDefinitions . snmpRspNoError ; \n\tint i ; \n\tif ( req . type == pduSetRequestPdu ) { \n\t\ti = NUM00 ; \n\t\tfor ( Enumeration < SnmpSubRequestHandler > e = subs . elements ( ) ; \n\t\te . hasMoreElements ( ) ; \n\t\ti ++ ) { \n\t\t\tSnmpSubRequestHandler sub = e . nextElement ( ) ; \n\t\t\tsub . setUserData ( userData ) ; \n\t\t\tsub . type = pduWalkRequest ; \n\t\t\t$F21687 ( sub ) sub . type = pduSetRequestPdu ; \n\t\t\tif ( sub . getErrorStatus ( ) != SnmpDefinitions . snmpRspNoError ) { \n\t\t\t\tif $F14148 ( SNMP_ADAPTOR_LOGGER , Level ) { \n\t\t\t\t\tSNMP_ADAPTOR_LOGGER . logp ( Level . FINEST , dbgTag , NUM00 , NUM00 ) ; \n\t\t\t\t\t} \n\t\t\t\treturn newErrorResponsePdu ( req , errorStatus , sub . getErrorIndex ( ) + NUM00 ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\ti = NUM00 ; \n\tfor ( Enumeration < SnmpSubRequestHandler > e = subs . elements ( ) ; \n\te . hasMoreElements ( ) ; \n\ti ++ ) { \n\t\tSnmpSubRequestHandler sub = e . nextElement ( ) ; \n\t\tsub . setUserData ( userData ) ; \n\t\t$F21687 ( sub ) if ( sub . getErrorStatus ( ) != SnmpDefinitions . snmpRspNoError ) { \n\t\t\tif $F14148 ( SNMP_ADAPTOR_LOGGER , Level ) { \n\t\t\t\tSNMP_ADAPTOR_LOGGER . logp ( Level . FINEST , dbgTag , NUM00 , NUM00 ) ; \n\t\t\t\t} \n\t\t\treturn newErrorResponsePdu ( req , errorStatus , sub . getErrorIndex ( ) + NUM00 ) ; \n\t\t\t} \n\t\t} \n\t$F1274 } \n"}, {"code": "Method ( MethodDoc methodDoc ) { \n\tthis . methodDoc = methodDoc ; \n\texceptionTypes = methodDoc . thrownExceptions ( ) ; \n\tArrays . sort ( exceptionTypes , new ClassDocComparator $F72 ) ; \n\toperationString = computeOperationString ( ) ; \n\tnameAndDescriptor = methodDoc . name ( ) + Util . methodDescriptorOf ( methodDoc ) ; \n\tmethodHash = computeMethodHash ( ) ; \n\t} \n"}, {"code": "public DeterministicKey ( ImmutableList < ChildNumber > childNumberPath , $F96 chainCode , LazyECPoint publicAsPoint , $F5466 BigInteger priv , $F5466 DeterministicKey parent ) { \n\tsuper ( priv , compressPoint ( checkNotNull ( publicAsPoint ) ) ) ; \n\tcheckArgument ( chainCode . length == NUM00 ) ; \n\tthis . parent = parent ; \n\tthis . childNumberPath = checkNotNull ( childNumberPath ) ; \n\t$F17879 ( this , Arrays , chainCode ) this . depth = parent == null ? NUM00 : parent . depth + NUM00 ; \n\tthis . parentFingerprint = ( parent != null ) ? parent . getFingerprint ( ) : NUM00 ; \n\t} \n"}, {"code": "private static void s_uaColSumLtGe ( MatrixBlock in , MatrixBlock out , $F1986 bv , BinaryOperator bOp ) throws DMLRuntimeException { \n\tint agg0 = sumRowSumGtLeColSumLtGe ( NUM00 , bv , bOp ) ; \n\tout . allocateDenseBlock ( _BOOL ) ; \n\tArrays . fill ( out . getDenseBlock ( ) , NUM00 , out . getNumColumns ( ) , agg0 ) ; \n\tif ( agg0 != NUM00 ) out . setNonZeros ( out . getNumColumns ( ) ) ; \n\tif ( in . isEmptyBlock ( _BOOL ) ) $F665 SparseBlock sblock = in . getSparseBlock ( ) ; \n\tfor ( int j = NUM00 ; \n\tj < sblock . numRows ( ) ; \n\tj ++ ) if $F20899 ( sblock , j ) { \n\t\tint apos = sblock . pos ( j ) ; \n\t\t$F64142 ( alen , sblock , j ) $F2027 aix = sblock . indexes ( j ) ; \n\t\t$F1986 avals = sblock . values ( j ) ; \n\t\tfor ( $F5883 ( i , apos , alen ) ) { \n\t\t\tint cnt = sumRowSumGtLeColSumLtGe ( avals [ i ] , bv , bOp ) ; \n\t\t\tout . quickSetValue ( NUM00 , aix [ i ] , cnt ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public HeldLocksGrant ( BigInteger grantId ) { \n\tthis . grantId = Preconditions . checkNotNull ( grantId ) ; \n\t$F3224 ( creationDateMs , System ) expirationDateMs = - NUM00 ; \n\tlockMap = LockCollections . of ( ) ; \n\tlockTimeout = null ; \n\tversionId = null ; \n\t} \n"}, {"code": "public void testPosNegFirstShorter $F72 { \n\t$F50446 $F92469 int aSign = NUM00 ; \n\tint bSign = - NUM00 ; \n\tbyte $F3018 = { \n\t\tNUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } \n\t; \n\t$F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F37344 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) } \n"}, {"code": "public void removeFromAllListeners ( MapBean mapBean ) { \n\tif ( mapBean != null ) { \n\t\tremoveZoomListener ( ( ZoomListener ) mapBean ) ; \n\t\tmapBean . removeProjectionListener ( this ) ; \n\t\t$F15121 ( scaleField ) } \n\t} \n"}, {"code": "public void testBug19169 $F72 throws Exception { \n\tMysqlDataSource toSerialize = new MysqlDataSource $F72 ; \n\ttoSerialize . setZeroDateTimeBehavior ( NUM00 ) ; \n\tboolean testBooleanFlag = ! toSerialize . getAllowLoadLocalInfile ( ) ; \n\ttoSerialize . setAllowLoadLocalInfile ( testBooleanFlag ) ; \n\tint testIntFlag = toSerialize . getBlobSendChunkSize ( ) + NUM00 ; \n\ttoSerialize . setBlobSendChunkSize ( String . valueOf ( testIntFlag ) ) ; \n\t$F1538 ( bOut ) $F7054 ( objOut , bOut ) objOut . writeObject ( toSerialize ) ; \n\t$F1206 ( objOut ) $F164856 ( objIn , bOut ) MysqlDataSource thawedDs = ( MysqlDataSource ) objIn . readObject ( ) ; \n\tassertEquals ( NUM00 , thawedDs . getZeroDateTimeBehavior ( ) ) ; \n\tassertEquals ( testBooleanFlag , thawedDs . getAllowLoadLocalInfile ( ) ) ; \n\tassertEquals ( testIntFlag , thawedDs . getBlobSendChunkSize ( ) ) ; \n\t} \n"}, {"code": "public static $F4203 FutureW $F4203 ofSupplier ( final $F33802 s ) { \n\treturn FutureW . of ( CompletableFuture . supplyAsync ( s ) ) ; \n\t} \n"}, {"code": "$F1 public void toData ( DataOutput out ) throws IOException { \n\tsuper . toData ( out ) ; \n\tout . writeLong ( refreshInterval ) ; \n\tDataSerializer . writeObjectArray ( alertDefs , out ) ; \n\t} \n"}, {"code": "public static boolean isString ( String str ) { \n\treturn null != stringHashTable . get ( str ) ; \n\t} \n"}, {"code": "$F34537 ( listener , changingListeners ) "}, {"code": "$F1 public boolean equals ( Object obj ) { \n\t$F3627 ( this , obj , _BOOL ) $F1933 ( obj , _BOOL ) $F34838 ( getClass , obj , _BOOL ) Diff other = ( Diff ) obj ; \n\t$F12734 ( operation , other , _BOOL ) $F56936 ( text , other , _BOOL ) return _BOOL ; \n\t} \n"}, {"code": "protected abstract void performDeployerActionOnSingleDeployable ( org . codehaus . cargo . container . deployer . Deployer deployer , org . codehaus . cargo . container . deployable . Deployable deployable , org . codehaus . cargo . container . deployer . DeployableMonitor monitor ) ; \n"}, {"code": "$F1 public Tree $F4 extractBestMaxRuleParse ( int start , int end , $F3803 sentence ) { \n\treturn extractBestMaxRuleParse1 ( start , end , NUM00 , sentence ) ; \n\t} \n"}, {"code": "$F1 public int hashCode $F72 { \n\tif ( hash == NUM00 ) { \n\t\tint result = NUM00 ; \n\t\t$F26525 ( result , range ) $F39428 ( bitsWeight , Double , weight ) $F14881 ( result , bitsWeight ) hash = result ; \n\t\t} \n\treturn hash ; \n\t} \n"}, {"code": "private Instances voteDataset ( Instances dataset ) throws Exception { \n\tfor ( $F208679 ( i , dataset ) ) { \n\t\tInstance inst = dataset . firstInstance ( ) ; \n\t\tinst = votedReclassifyExample ( inst ) ; \n\t\tdataset . add ( inst ) ; \n\t\tdataset . delete ( NUM00 ) ; \n\t\t} \n\treturn dataset ; \n\t} \n"}, {"code": "public void testCompareToPosPos1 $F72 { \n\t$F67214 $F10679 int aSign = NUM00 ; \n\tint bSign = NUM00 ; \n\t$F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F79260 ( assertEquals , aNumber , bNumber ) } \n"}, {"code": "$F1 public String chooseClientAlias ( final $F806 keyType , final Principal [ ] issuers , final Socket socket ) { \n\tif ( keyManager != null ) { \n\t\treturn keyManager . chooseClientAlias ( keyType , issuers , socket ) ; \n\t\t} \n\t$F1274 } \n"}, {"code": "CSSElement parseCSS ( InputStreamReader r , HTMLComponent htmlC ) throws IOException { \n\tExtInputStreamReader er = new ExtInputStreamReader ( r ) ; \n\t$F37759 ( parseCSS , er , htmlC ) } \n"}, {"code": "protected PooledConnection create ( boolean incrementCounter ) { \n\tif ( incrementCounter ) $F5224 ( size ) PooledConnection con = new PooledConnection ( getPoolProperties ( ) , this ) ; \n\treturn con ; \n\t} \n"}, {"code": "void release $F72 { \n\tif ( sdBuffer != null ) $F33833 ( sdBuffer ) if ( aclBuffer != null ) $F33833 ( aclBuffer ) if ( sidList != null ) { \n\t\tfor ( Long sid : sidList ) { \n\t\t\tLocalFree ( sid ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static void write ( File file , CharSequence data , Charset encoding , boolean append ) throws IOException { \n\tString str = $F48364 ( data ) ; \n\twriteStringToFile ( file , str , encoding , append ) ; \n\t} \n"}, {"code": "private void parseSessionExpirationTimeInfo ( Element sess ) { \n\tString sid = null ; \n\tLong expTime = null ; \n\t$F9031 ( temp , sess ) $F57733 ( temp , sid ) $F321395 ( temp , sess ) if ( temp != null ) { \n\t\texpTime = new Long ( temp ) ; \n\t\t} \n\tsessionResponse . addSessionForGivenUUID ( sid , expTime ) ; \n\t} \n"}, {"code": "public static long generate ( String value ) { \n\t$F1749 ( len , value ) long crc = NUM00 ; \n\tfor ( $F119 ( i , len ) ) crc = next ( crc , value . charAt ( i ) ) ; \n\treturn crc ; \n\t} \n"}, {"code": "public ReplaceDialog ( JTextComponent text , FindReplaceActions finderActions ) { \n\tsuper ( ActionUtils . getFrameFor ( text ) , _BOOL ) ; \n\tinitComponents ( ) ; \n\tregisterKeyAction ( this ) ; \n\ttextComponent = text ; \n\tfinder = finderActions ; \n\ttextComponent . addCaretListener ( this ) ; \n\tsetLocationRelativeTo ( text . getRootPane ( ) ) ; \n\t} \n"}, {"code": "public String dump ( X509Certificate certificate ) throws $F31549 { \n\ttry { \n\t\treturn $F196480 ( dump , certificate ) ; \n\t\t} \n\tcatch ( IOException ex ) { \n\t\tthrow new Asn1Exception ( res . getString ( NUM00 ) , ex ) ; \n\t\t} \n\tcatch ( CertificateEncodingException ex ) { \n\t\tthrow new Asn1Exception ( res . getString ( NUM00 ) , ex ) ; \n\t\t} \n\t} \n"}, {"code": "$F3803 findInPackage ( Test test , String packageName ) { \n\t$F10144 ( localClsssOrPkgs ) $F2936 ( packageName ) $F104855 urls ; \n\ttry { \n\t\turls = classloader . getResources ( packageName ) ; \n\t\tif ( ! urls . hasMoreElements ( ) ) $F115541 ( log , packageName ) } \n\tcatch ( IOException ioe ) { \n\t\t$F34419 ( log , packageName ) return localClsssOrPkgs ; \n\t\t} \n\treturn findInPackageWithUrls ( test , packageName , urls ) ; \n\t} \n"}, {"code": "protected abstract Element makeTooltip ( DBIDRef id , double x , double y , double dotsize ) ; \n"}, {"code": "public CloudObject ( String type , int permissions ) { \n\taccessPermissions = permissions ; \n\tvalues . put ( CloudStorage . TYPE_FIELD , type ) ; \n\t} \n"}, {"code": "private static DecoderResult createDecoderResultFromAmbiguousValues ( int ecLevel , $F2027 codewords , $F2027 erasureArray , $F2027 ambiguousIndexes , $F26353 ( ambiguousIndexValues ) ) throws FormatException , ChecksumException { \n\t$F22974 ( ambiguousIndexCount , ambiguousIndexes ) int tries = NUM00 ; \n\twhile ( tries -- > NUM00 ) { \n\t\tfor ( $F1139 ( i , ambiguousIndexCount ) ) { \n\t\t\tcodewords [ ambiguousIndexes [ i ] ] = ambiguousIndexValues [ i ] [ ambiguousIndexCount [ i ] ] ; \n\t\t\t} \n\t\ttry $F19580 ( decodeCodewords , codewords , ecLevel , erasureArray ) catch ( ChecksumException ignored ) $F845 if $F9634 ( ambiguousIndexCount ) $F159373 ( ChecksumException ) for ( $F1139 ( i , ambiguousIndexCount ) ) { \n\t\t\tif ( ambiguousIndexCount [ i ] < ambiguousIndexValues [ i ] . length - NUM00 ) { \n\t\t\t\tambiguousIndexCount [ i ] ++ ; \n\t\t\t\t$F597 } \n\t\t\telse { \n\t\t\t\tambiguousIndexCount [ i ] = NUM00 ; \n\t\t\t\tif $F74408 ( i , ambiguousIndexCount ) $F159373 ( ChecksumException ) } \n\t\t\t} \n\t\t} \n\tthrow ChecksumException . getChecksumInstance ( ) ; \n\t} \n"}, {"code": "public double distance ( DoubleVector v ) { \n\tdouble deltaX = v . x - x , deltaY = v . y - y , deltaZ = v . z - z ; \n\t$F100238 ( Math , deltaX , deltaY , deltaZ ) } \n"}, {"code": "$F1 public $F987 listOptions $F72 { \n\t$F20795 ( newVector ) $F77737 ( newVector ) $F77737 ( newVector ) $F77737 ( newVector ) newVector . add ( new Option ( $F39 , NUM00 , NUM00 , NUM00 ) ) ; \n\tnewVector . add ( new Option ( $F41 , NUM00 , NUM00 , NUM00 ) ) ; \n\t$F424068 ( newVector ) $F1000 ( newVector ) $F77735 ( newVector ) $F1007 ( newVector ) } \n"}, {"code": "$F1 public void dropUser ( User user , boolean ignore ) throws SQLException { \n\tString sql = String . format ( NUM00 , user . getLogin ( ) ) ; \n\ttry { \n\t\texecute ( sql ) ; \n\t\t} \n\tcatch ( SQLException e ) { \n\t\tif ( ! ignore ) { \n\t\t\tthrow e ; \n\t\t\t} \n\t\telse if $F585 ( logger ) { \n\t\t\tlogger . debug ( NUM00 + sql , e ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F1 public boolean eIsSet ( int featureID ) { \n\tswitch ( featureID ) { \n\t\tcase InformationModelPackage . FUNCTIONBLOCK_PROPERTY__NAME : $F6439 ( NAME_EDEFAULT , name ) case InformationModelPackage . FUNCTIONBLOCK_PROPERTY__DESCRIPTION : $F6439 ( DESCRIPTION_EDEFAULT , description ) case InformationModelPackage . FUNCTIONBLOCK_PROPERTY__TYPE : return type != null ; \n\t\t} \n\t$F6444 ( super , featureID ) } \n"}, {"code": "public double normalizedDistance $F6762 ( point1 , point2 ) throws Exception { \n\treturn Math . sqrt ( distance2 ( point1 , point2 ) ) / point1 . length ; \n\t} \n"}, {"code": "public static $F4203 void onNextDropped ( T t ) { \n\tif ( t != null ) { \n\t\tConsumer $F1432 hook = Hooks . onNextDroppedHook ; \n\t\tif ( hook == null ) { \n\t\t\tthrow Exceptions . failWithCancel ( ) ; \n\t\t\t} \n\t\thook . accept ( t ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F2027 randomInts ( int max , int count ) { \n\t$F4120 ( vals , count ) for ( $F119 ( i , count ) ) vals [ i ] = SEEDED_RANDOM . nextInt ( max ) ; \n\treturn vals ; \n\t} \n"}, {"code": "void loadStrings $F72 throws IOException { \n\tint count = mHeaderItem . stringIdsSize ; \n\tint stringOffsets [ ] = new int [ count ] ; \n\tseek ( mHeaderItem . stringIdsOff ) ; \n\t$F58179 ( i , count , stringOffsets , readInt ) $F58180 ( mStrings , count ) seek ( stringOffsets [ NUM00 ] ) ; \n\tfor ( $F119 ( i , count ) ) { \n\t\tseek ( stringOffsets [ i ] ) ; \n\t\tmStrings [ i ] = readString ( ) ; \n\t\t} \n\t} \n"}, {"code": "$F25635 ( timestamp , t , buildTag , TAG_GPS_DATE_STAMP , mGPSDateStampFormat , _BOOL , setTag , mGPSTimeStampCalendar , TAG_GPS_TIME_STAMP , Calendar ) "}, {"code": "public void addArea ( final TimeSection AREA ) { \n\t$F77681 ( AREA ) areas . add ( AREA ) ; \n\tCollections . sort ( areas , new TimeSectionComparator $F72 ) ; \n\tfireUpdateEvent ( SECTION_EVENT ) ; \n\t} \n"}, {"code": "public String toString $F72 { \n\treturn Descriptor . toClassName ( Character . toString ( descriptor ) ) ; \n\t} \n"}, {"code": "private void raiseIOException $F18289 ( host , port , protocol ) { \n\tIOExceptionEvent ioError = new IOExceptionEvent ( this , host , port , protocol ) ; \n\tsipProvider . handleEvent ( ioError , null ) ; \n\tsetState ( SIPDialog . TERMINATED_STATE ) ; \n\t} \n"}, {"code": "public static double incompleteGammaComplement ( double a , double x ) { \n\tdouble ans , ax , c , yc , r , t , y , z ; \n\tdouble pk , pkm1 , pkm2 , qk , qkm1 , qkm2 ; \n\tif ( x <= NUM00 || a <= NUM00 ) $F1082 if ( x < NUM00 || x < a ) return NUM00 - incompleteGamma ( a , x ) ; \n\tax = a * Math . log ( x ) - x - lnGamma ( a ) ; \n\tif ( ax < - MAXLOG ) $F1082 ax = Math . exp ( ax ) ; \n\ty = NUM00 - a ; \n\tz = x + y + NUM00 ; \n\tc = NUM00 ; \n\tpkm2 = NUM00 ; \n\tqkm2 = x ; \n\tpkm1 = x + NUM00 ; \n\tqkm1 = z * x ; \n\tans = pkm1 / qkm1 ; \n\tdo { \n\t\tc += NUM00 ; \n\t\ty += NUM00 ; \n\t\tz += NUM00 ; \n\t\tyc = y * c ; \n\t\tpk = pkm1 * z - pkm2 * yc ; \n\t\tqk = qkm1 * z - qkm2 * yc ; \n\t\tif ( qk != NUM00 ) { \n\t\t\tr = pk / qk ; \n\t\t\tt = Math . abs ( ( ans - r ) / r ) ; \n\t\t\tans = r ; \n\t\t\t} \n\t\telse t = NUM00 ; \n\t\tpkm2 = pkm1 ; \n\t\tpkm1 = pk ; \n\t\tqkm2 = qkm1 ; \n\t\tqkm1 = qk ; \n\t\tif $F34222 ( Math , pk , big ) $F149602 ( pkm2 , biginv , pkm1 , qkm2 , qkm1 ) } \n\twhile ( t > MACHEP ) ; \n\treturn ans * ax ; \n\t} \n"}, {"code": "$F1 public Object deserializeTypedFromObject ( JsonParser jp , DeserializationContext ctxt ) throws IOException , JsonProcessingException { \n\tJsonToken t = jp . getCurrentToken ( ) ; \n\tif ( t == JsonToken . START_OBJECT ) { \n\t\t$F39710 ( t , jp ) } \n\telse if ( t == JsonToken . START_ARRAY ) $F25228 ( _deserializeTypedUsingDefaultImpl , jp , ctxt ) else if ( t != JsonToken . FIELD_NAME ) $F25228 ( _deserializeTypedUsingDefaultImpl , jp , ctxt ) TokenBuffer tb = null ; \n\tfor ( ; \n\tt == JsonToken . FIELD_NAME ; \n\tt = jp . nextToken ( ) ) { \n\t\tString name = jp . getCurrentName ( ) ; \n\t\t$F89223 ( jp ) if $F1238 ( _typePropertyName , name ) { \n\t\t\t$F45667 ( typeId , jp ) $F80651 deser = _findDeserializer ( ctxt , typeId ) ; \n\t\t\tif ( tb != null ) { \n\t\t\t\tjp = JsonParserSequence . createFlattened ( tb . asParser ( jp ) , jp ) ; \n\t\t\t\t} \n\t\t\t$F89223 ( jp ) return deser . deserialize ( jp , ctxt ) ; \n\t\t\t} \n\t\tif ( tb == null ) { \n\t\t\ttb = new TokenBuffer $F8320 ; \n\t\t\t} \n\t\ttb . writeFieldName ( name ) ; \n\t\ttb . copyCurrentStructure ( jp ) ; \n\t\t} \n\treturn _deserializeTypedUsingDefaultImpl ( jp , ctxt , tb ) ; \n\t} \n"}, {"code": "$F60342 ( mSmallestWidthDp , mInPortrait ) "}, {"code": "protected int layoutRow ( FlowView fv , int rowIndex , int p0 ) { \n\tint p1 = super . layoutRow ( fv , rowIndex , p0 ) ; \n\tView row = fv . getView ( rowIndex ) ; \n\t$F47177 ( doc , fv ) Object i18nFlag = doc . getProperty ( AbstractDocument . I18NProperty ) ; \n\tif ( ( i18nFlag != null ) && i18nFlag . equals ( Boolean . TRUE ) ) { \n\t\tint n = row . getViewCount ( ) ; \n\t\tif ( n > NUM00 ) { \n\t\t\tAbstractDocument d = ( AbstractDocument ) fv . getDocument ( ) ; \n\t\t\tElement bidiRoot = d . getBidiRootElement ( ) ; \n\t\t\t$F2175 ( levels , n ) $F52429 reorder = new View [ n ] ; \n\t\t\tfor ( $F119 ( i , n ) ) { \n\t\t\t\tView v = row . getView ( i ) ; \n\t\t\t\tint bidiIndex = bidiRoot . getElementIndex ( v . getStartOffset ( ) ) ; \n\t\t\t\t$F20231 ( bidiElem , bidiRoot , bidiIndex ) levels [ i ] = ( byte ) StyleConstants . getBidiLevel ( bidiElem . getAttributes ( ) ) ; \n\t\t\t\treorder [ i ] = v ; \n\t\t\t\t} \n\t\t\tBidiUtils . reorderVisually ( levels , reorder ) ; \n\t\t\trow . replace ( NUM00 , n , reorder ) ; \n\t\t\t} \n\t\t} \n\treturn p1 ; \n\t} \n"}, {"code": "public Generator ( String propFile ) { \n\ttry { \n\t\tBufferedInputStream bi = null ; \n\t\ttry { \n\t\t\t$F20278 ( bi , propFile ) props . load ( bi ) ; \n\t\t\t} \n\t\t$F14364 ( bi ) } \n\tcatch ( Exception e ) $F5795 ( setDefaultProps ) } \n"}, {"code": "public static void clearLoggingBehaviors $F72 { \n\t$F54044 ( loggingBehaviors ) } \n"}, {"code": "protected void auditOp ( URI tenantId , URI userId , OperationTypeEnum opType , boolean operationalStatus , String operationStage , Object ... descparams ) { \n\t_auditMgr . recordAuditLog ( tenantId , userId , EVENT_SERVICE_TYPE , opType , System . currentTimeMillis ( ) , operationalStatus ? AuditLogManager . AUDITLOG_SUCCESS : AuditLogManager . AUDITLOG_FAILURE , operationStage , descparams ) ; \n\t} \n"}, {"code": "$F1219 protected Process startExecutorProcess ( int container ) { \n\treturn ShellUtils . runASyncProcess ( getExecutorCommand ( container ) , new File ( LocalContext . workingDirectory ( config ) ) , Integer . toString ( container ) ) ; \n\t} \n"}, {"code": "private boolean isItemAtPositionSelectable ( int position ) { \n\t$F78369 ( mUnselectableItems , position ) } \n"}, {"code": "public Builder addEngineSettings ( final String engineName , $F20109 ( imports ) , $F20109 ( staticImports ) , $F20109 ( scripts ) , $F87266 ( config ) ) { \n\tif ( null == imports ) $F824 if ( null == staticImports ) $F824 if ( null == scripts ) $F824 final $F529 m = null == config ? Collections . emptyMap ( ) : config ; \n\tsettings . put ( engineName , new EngineSettings ( imports , staticImports , scripts , m ) ) ; \n\treturn this ; \n\t} \n"}, {"code": "private void displayPopupMenu ( final MouseEvent event ) { \n\tfinal int selectedIndex = getSelectionIndex ( event ) ; \n\tif ( selectedIndex != - NUM00 ) { \n\t\tfinal JPopupMenu popupMenu = getPopupMenu ( event . getX ( ) , event . getY ( ) , selectedIndex ) ; \n\t\tif ( popupMenu != null ) $F268505 ( popupMenu , this , event ) } \n\t} \n"}, {"code": "protected void handleSelected ( StructuredSelection selection ) { \n\tIStatus status = new Status ( IStatus . OK , PlatformUI . PLUGIN_ID , IStatus . OK , EMPTY_ <missing ';'> NUM00 , null ) ; \n\t$F131 lastSelection = currentSelection ; \n\tcurrentSelection = selection . toArray ( ) ; \n\tif $F10471 ( selection ) { \n\t\tstatus = new Status ( IStatus . ERROR , PlatformUI . PLUGIN_ID , IStatus . ERROR , EMPTY_ <missing ';'> NUM00 , null ) ; \n\t\tif ( lastSelection != null && getListSelectionLabelDecorator ( ) != null ) { \n\t\t\tlist . update ( lastSelection , null ) ; \n\t\t\t} \n\t\tcurrentSelection = null ; \n\t\t} \n\telse { \n\t\tstatus = new Status ( IStatus . ERROR , PlatformUI . PLUGIN_ID , IStatus . ERROR , EMPTY_ <missing ';'> NUM00 , null ) ; \n\t\tList items = selection . toList ( ) ; \n\t\tObject item = null ; \n\t\tIStatus tempStatus = null ; \n\t\tfor ( $F2774 ( it , items ) ) { \n\t\t\t$F8877 ( o , it ) if ( o instanceof ItemsListSeparator ) $F1448 item = o ; \n\t\t\ttempStatus = validateItem ( item ) ; \n\t\t\tif ( tempStatus . isOK ( ) ) { \n\t\t\t\tstatus = new Status ( IStatus . OK , PlatformUI . PLUGIN_ID , IStatus . OK , EMPTY_ <missing ';'> NUM00 , null ) ; \n\t\t\t\t} \n\t\t\telse $F3468 ( status , tempStatus ) } \n\t\tif ( lastSelection != null && getListSelectionLabelDecorator ( ) != null ) { \n\t\t\tlist . update ( lastSelection , null ) ; \n\t\t\t} \n\t\tif $F89491 ( getListSelectionLabelDecorator ) { \n\t\t\tlist . update ( currentSelection , null ) ; \n\t\t\t} \n\t\t} \n\trefreshDetails ( ) ; \n\tupdateStatus ( status ) ; \n\t} \n"}, {"code": "public $F16501 diff_main $F22381 ( text1 , text2 , checklines ) { \n\tlong deadline ; \n\tif ( Diff_Timeout <= NUM00 ) $F7984 ( deadline , Long ) else { \n\t\tdeadline = System . currentTimeMillis ( ) + $F139814 ( Diff_Timeout ) ; \n\t\t} \n\treturn diff_main ( text1 , text2 , checklines , deadline ) ; \n\t} \n"}, {"code": "private void updateAltDeviceid ( NetworkFCZoneInfo fabricInfo , String fabricId , String fabricWWN , String key , Map < String , NetworkLite > fabricId2Network ) { \n\tif ( fabricInfo != null && fabricInfo . getAltNetworkDeviceId ( ) == null ) { \n\t\tif $F4257 ( fabricId2Network , key ) { \n\t\t\tNetworkLite network = NetworkUtil . getNetworkLiteByFabricId ( fabricId , fabricWWN , _dbClient ) ; \n\t\t\tif ( network != null ) { \n\t\t\t\tfabricId2Network . put ( key , network ) ; \n\t\t\t\tURI id = fabricInfo . getNetworkDeviceId ( ) ; \n\t\t\t\tfor ( String strUri : network . getNetworkSystems ( ) ) { \n\t\t\t\t\tif ( ! strUri . equals ( id . toString ( ) ) ) { \n\t\t\t\t\t\tid = URI . create ( strUri ) ; \n\t\t\t\t\t\t$F597 } \n\t\t\t\t\t} \n\t\t\t\tfabricInfo . setAltNetworkDeviceId ( id ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static NetworkInfo fromVersion ( final byte version ) { \n\tfor ( final NetworkInfo info : KNOWN_NETWORKS ) { \n\t\tif ( version == info . getVersion ( ) ) { \n\t\t\treturn info ; \n\t\t\t} \n\t\t} \n\tthrow new IllegalArgumentException $F10797 ( String , version ) ; \n\t} \n"}, {"code": "public static String lcfirst ( String input ) $F13736 ( withFirst , input ) "}, {"code": "public void write ( ByteCodeWriter out ) throws IOException { \n\tout . writeUTF8Const ( getName ( ) ) ; \n\tTempOutputStream ts = new TempOutputStream $F72 ; \n\tByteCodeWriter o2 = new ByteCodeWriter ( ts , out . getJavaClass ( ) ) ; \n\t$F137196 ( o2 , _exceptions ) for ( $F2277 ( i , _exceptions ) ) { \n\t\t$F1729 ( exn , _exceptions , i ) o2 . writeClass ( exn ) ; \n\t\t} \n\t$F59 ( ts ) out . writeInt ( ts . getLength ( ) ) ; \n\tTempBuffer ptr = ts . getHead ( ) ; \n\tfor ( ; \n\tptr != null ; \n\tptr = ptr . next ( ) ) out . write ( ptr . buffer ( ) , NUM00 , ptr . length ( ) ) ; \n\t$F17623 ( ts ) } \n"}, {"code": "public synchronized AddressbookEntry remove $F205115 ( name , categoriesToRemove ) { \n\t$F33289 ( name , StringUtil ) AddressbookEntry currentEntry = entries . get ( name ) ; \n\tif ( currentEntry != null ) { \n\t\t$F2689 currentCategories = currentEntry . getCategories ( ) ; \n\t\t$F96731 ( category , categoriesToRemove , currentCategories ) AddressbookEntry changedEntry = new AddressbookEntry ( name , currentCategories ) ; \n\t\tentries . put ( name , changedEntry ) ; \n\t\tif ( ! currentEntry . equalsFully ( changedEntry ) ) $F5795 ( saveOnChange ) return changedEntry ; \n\t\t} \n\t$F1274 } \n"}, {"code": "$F48363 ( input , offset , len , flags , decoder , _BOOL , temp , System ) "}, {"code": "public String shortestMatch ( String input ) { \n\tTrieNode node = root ; \n\tfor ( $F186068 ( i , input ) ) { \n\t\t$F93781 ( node , input , i ) $F1275 ( node ) if $F93782 ( node ) $F32744 ( input , i ) } \n\t$F1274 } \n"}, {"code": "public static boolean isWindows95 $F72 $F98764 ( osName , osVersion ) "}, {"code": "public static RHExtension hasRHExtensions ( ConfigImpl config , ExtensionDefintion ed ) throws PageException , SAXException , IOException { \n\tXMLConfigAdmin admin = new XMLConfigAdmin ( config , null ) ; \n\treturn admin . _hasRHExtensions ( config , ed ) ; \n\t} \n"}, {"code": "public void addQueryToHistory ( String sql ) { \n\tqueryHistory . remove ( sql ) ; \n\tqueryHistory . addFirst ( sql ) ; \n\twhile ( historySize >= NUM00 && queryHistory . size ( ) > historySize ) $F165684 ( queryHistory ) } \n"}, {"code": "public StringBuilder encodeBody ( StringBuilder retval ) { \n\tretval . append ( LESS_THAN ) ; \n\terrorInfo . encode ( retval ) ; \n\tretval . append ( GREATER_THAN ) ; \n\t$F122474 ( parameters , retval , SEMICOLON ) return retval ; \n\t} \n"}, {"code": "public final $F23350 ParallelFlux $F23350 reduce ( Supplier $F23350 initialSupplier , BiFunction < R , T , R > reducer ) { \n\t$F10578 ( Objects , initialSupplier ) $F10578 ( Objects , reducer ) return onAssembly ( new ParallelReduce $F200 ( this , initialSupplier , reducer ) ) ; \n\t} \n"}, {"code": "private void handleButtonEvent ( final Event event ) { \n\tswitch ( event . type ) { \n\t\tcase SWT . FocusIn : { \n\t\t\thandleFocusEvents ( SWT . FocusIn ) ; \n\t\t\t$F597 } \n\t\tcase SWT . Selection : { \n\t\t\tchangeVisibilityOfPopupWindow ( ! isDropped ( ) ) ; \n\t\t\t$F597 } \n\t\t} \n\t} \n"}, {"code": "private void performUpdateOperations ( Context context , Request request , JsonValue afterValue , JsonValue beforeValue ) throws ResourceException { \n\tfinal String managedId = getManagedObjectId ( context ) ; \n\tactivityLogger . log ( context , request , NUM00 , getManagedObjectPath ( context ) , beforeValue , afterValue , Status . SUCCESS ) ; \n\tmanagedObjectSetService . update ( context , newUpdateRequest ( managedId , afterValue ) , managedId , null , beforeValue , afterValue , $F202502 ( Arrays , propertyPtr ) , $F202502 ( Arrays , propertyPtr ) ) ; \n\t} \n"}, {"code": "private boolean hasNextInetSocketAddress $F72 $F231867 ( nextInetSocketAddressIndex , inetSocketAddresses ) "}, {"code": "public static Boolean canStringBeInlineEncoded ( String skey ) { \n\tif ( skey . length ( ) > getMaxInlineStringKey ( MAX_LONGS_USED_FOR_ <missing ')'> NUM00 <missing ';'> _KEY , _BOOL ) ) $F1337 if ( isByteEncodingOk ( skey ) ) $F29943 ( Boolean ) else { \n\t\tif ( skey . length ( ) > getMaxInlineStringKey ( MAX_LONGS_USED_FOR_ <missing ')'> NUM00 <missing ';'> _KEY , _BOOL ) ) $F1337 else { \n\t\t\treturn Boolean . FALSE ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public Builder ( Date created , Date lastModified ) { \n\tthis . created = created != null ? $F207437 ( created ) : null ; \n\tthis . lastModified = lastModified != null ? $F207437 ( lastModified ) : null ; \n\t} \n"}, {"code": "$F1 public void writeByteStream ( InputStream is ) throws IOException { \n\twhile ( _BOOL ) { \n\t\tint len = SIZE - _offset - NUM00 ; \n\t\tif ( len < NUM00 ) { \n\t\t\tflushBuffer ( ) ; \n\t\t\tlen = SIZE - _offset - NUM00 ; \n\t\t\t} \n\t\tlen = is . read ( _buffer , _offset + NUM00 , len ) ; \n\t\tif ( len <= NUM00 ) { \n\t\t\t_buffer [ _offset ++ ] = BC_BINARY_DIRECT ; \n\t\t\t$F665 } \n\t\t_buffer [ _offset + NUM00 ] = ( byte ) BC_BINARY_CHUNK ; \n\t\t_buffer [ _offset + NUM00 ] = $F8043 ( len ) ; \n\t\t$F76528 ( _buffer , _offset , len ) _offset += len + NUM00 ; \n\t\t} \n\t} \n"}, {"code": "public void removeSelectionChangeListener ( final SelectionChangeListener listener ) { \n\tcheckWidget ( ) ; \n\t$F234144 ( listener , SWT ) $F2329 ( selectionChangeListeners ) selectionChangeListeners . remove ( listener ) ; \n\t} \n"}, {"code": "$F120210 ( maximumPullScroll , getMaximumPullScroll , pLeft , getPaddingLeft , pTop , getPaddingTop , pRight , getPaddingRight , pBottom , getPaddingBottom , getPullToRefreshScrollDirection , HORIZONTAL , mMode , mHeaderLayout , mFooterLayout , VERTICAL , DEBUG , Log , LOG_TAG , String , setPadding ) "}, {"code": "public Track addTrack ( String name , String type ) { \n\tTrack track = getTrackByName ( name , type ) ; \n\tif ( track == null ) { \n\t\t_IdNumber ++ ; \n\t\tString id = _id + NUM00 + Integer . toString ( _IdNumber ) ; \n\t\tlog . debug ( NUM00 , type , getName ( ) , name , id ) ; \n\t\ttrack = new Track ( id , name , type , this ) ; \n\t\tregister ( track ) ; \n\t\t} \n\tresetMoves ( ) ; \n\treturn track ; \n\t} \n"}, {"code": "SQLiteLoaderObserver registerLoader ( final SQLiteLoader loader , final String table ) { \n\t$F96563 ( Logger , TAG , table ) final SQLiteLoaderObserver entry = new SQLiteLoaderObserver ( loader , table ) ; \n\tmActiveLoaders . add ( entry ) ; \n\treturn entry ; \n\t} \n"}, {"code": "public void unbindTree ( Container ui ) { \n\t$F60281 ( componentCount , ui ) for ( $F119 ( iter , componentCount ) ) { \n\t\tComponent c = ui . getComponentAt ( iter ) ; \n\t\tif ( c instanceof Container ) { \n\t\t\tunbindTree ( ( Container ) c ) ; \n\t\t\t$F598 } \n\t\tString bind = c . getCloudBoundProperty ( ) ; \n\t\tif $F22 ( bind ) { \n\t\t\tString attributeName = c . getCloudDestinationProperty ( ) ; \n\t\t\tif ( attributeName != null ) { \n\t\t\t\tunbindProperty ( c , bind ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "protected $F291208 toItems ( List < Model > models ) { \n\t$F79983 ( models , Collections ) $F115 ( size , models ) $F291208 $F10252 ( items , size ) ; \n\tfor ( $F119 ( i , size ) ) { \n\t\titems . add ( toItem ( models . get ( i ) ) ) ; \n\t\t} \n\treturn items ; \n\t} \n"}, {"code": "public void apply ( FilterSet filterSet , FilterServiceGranularLockFactory lockFactory ) { \n\tfor ( FilterSetEntry entry : filterSet . getFilters ( ) ) { \n\t\tadd ( entry . getFilterValueSet ( ) , entry . getHandle ( ) , lockFactory ) ; \n\t\t} \n\t} \n"}, {"code": "public void addConstraintCommand ( DefineCommand command ) { \n\tif ( command instanceof CreateIndex ) $F207 ( constraintCommands , command ) else { \n\t\tAlterTableAddConstraint con = ( AlterTableAddConstraint ) command ; \n\t\tboolean alreadySet ; \n\t\tif ( con . getType ( ) == CommandInterface . ALTER_TABLE_ADD_CONSTRAINT_PRIMARY_KEY ) { \n\t\t\talreadySet = setPrimaryKeyColumns ( con . getIndexColumns ( ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\talreadySet = _BOOL ; \n\t\t\t} \n\t\t$F45123 ( alreadySet , constraintCommands , command ) } \n\t} \n"}, {"code": "public void testInviteCancel $F72 { \n\tdoCancelTest ( _BOOL ) ; \n\t} \n"}, {"code": "private static $F96 lmv2Response ( final $F96 hash , final $F96 challenge , final $F96 clientData ) throws AuthenticationException { \n\tfinal HMACMD5 hmacMD5 = new HMACMD5 ( hash ) ; \n\thmacMD5 . update ( challenge ) ; \n\thmacMD5 . update ( clientData ) ; \n\tfinal $F96 mac = hmacMD5 . getOutput ( ) ; \n\tfinal $F96 lmv2Response = new byte $F12348 ( mac , clientData ) ; \n\t$F7057 ( System , mac , lmv2Response ) $F11244 ( System , clientData , lmv2Response , mac ) return lmv2Response ; \n\t} \n"}, {"code": "static $F11685 E checkType ( E obj , Class $F22448 type ) { \n\tif ( obj != null && ! type . isInstance ( obj ) ) { \n\t\tthrow new ClassCastException ( $F29695 ( obj ) + type ) ; \n\t\t} \n\treturn obj ; \n\t} \n"}, {"code": "public void testValueOfLongPositive1 $F72 { \n\tlong longVal = NUM00 ; \n\t$F2544 ( aNumber , BigInteger , longVal ) byte $F3018 = { \n\t\tNUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 } \n\t; \n\t$F3030 ( rBytes ) $F3031 ( resBytes , aNumber ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , aNumber ) } \n"}, {"code": "public void destroy $F72 { \n\tm_filterConfig = null ; \n\t} \n"}, {"code": "$F1 public Parcelable onSaveInstanceState $F72 { \n\tString path = mPhotoFilePath . get ( ) ; \n\t$F1275 ( path ) $F53033 ( bundle ) $F186974 ( bundle , path ) return bundle ; \n\t} \n"}, {"code": "public static boolean createFolder ( String folderPath ) { \n\tif $F20899 ( TextUtils , folderPath ) { \n\t\t$F1705 ( folder , folderPath ) return createFolder ( folder ) ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void test_emptyJournal $F72 throws IOException , InterruptedException , ExecutionException { \n\tfinal File out = File . createTempFile ( getName ( ) , Options . JNL ) ; \n\ttry { \n\t\tfinal Journal src = getStore ( getProperties ( ) ) ; \n\t\ttry { \n\t\t\tfinal Future < Map $F498804 > f = src . warmUp ( null ) ; \n\t\t\tfinal Map $F498804 map = f . get ( ) ; \n\t\t\t$F70108 ( assertEquals , map ) } \n\t\t$F17625 ( src ) } \n\t$F105993 ( out ) } \n"}, {"code": "$F1 public void keyReleased ( KeyEvent e ) { \n\t$F94141 ( password1 ) $F94141 ( password2 ) if ( passwordField != null ) { \n\t\t$F100094 ( password1 , passwordField ) } \n\tif ( repeatPasswordField != null ) { \n\t\t$F100094 ( password2 , repeatPasswordField ) } \n\tboolean tickLabelVisible = _BOOL ; \n\tif ( password1 != null && password2 != null ) { \n\t\t$F169223 ( Arrays , password1 , password2 , tickLabelVisible , _BOOL ) } \n\ttickLabel . setVisible ( tickLabelVisible ) ; \n\tclearMessages ( ) ; \n\t$F169226 ( i , password1 ) $F169226 ( i , password2 ) } \n"}, {"code": "private static PeriodFormatterAndValue selectFormatter ( Period daysPeriod ) { \n\tint days = daysPeriod . getDays ( ) ; \n\tif ( days > NUM00 ) $F8587 ( pav , DAY_FORMATTER , days ) int hours = daysPeriod . getHours ( ) ; \n\tif ( hours > NUM00 ) $F8587 ( pav , HOUR_FORMATTER , hours ) int minutes = daysPeriod . getMinutes ( ) ; \n\tif ( minutes > NUM00 ) $F8587 ( pav , MINUTE_FORMATTER , minutes ) int seconds = daysPeriod . getSeconds ( ) ; \n\tif ( seconds > NUM00 ) $F8587 ( pav , SECOND_FORMATTER , seconds ) $F1274 } \n"}, {"code": "void addArg ( String arg ) $F207 ( args , arg ) "}, {"code": "public $F21637 insert ( int offset , float f ) { \n\tinternal . insert ( offset , f ) ; \n\treturn this ; \n\t} \n"}, {"code": "private void updateGwt27On ( IJavaProject javaProject , $F3803 programArgs , int indexDisabled , int indexEnabled , boolean superDevModeEnabled ) { \n\tif ( indexEnabled > - NUM00 ) $F106 ( programArgs , indexEnabled ) if ( indexDisabled > - NUM00 ) $F106 ( programArgs , indexDisabled ) if ( ! superDevModeEnabled ) $F6966 ( programArgs , SUPERDEVMODE_DISABLED_ARG ) } \n"}, {"code": "default boolean smashBlock ( EntityPlayer player , World world , BlockPos pos , IBlockState state , ToolTier tier ) { \n\tToolTier required = getRequiredTier ( state ) ; \n\tif ( required != null && tier . isGreaterThanOrEqualTo ( required ) ) { \n\t\tfloat luck = tier . ordinal ( ) * NUM00 ; \n\t\tList $F13970 drops = getDrops ( player , world , pos , state , luck ) ; \n\t\tif $F3817 ( drops ) { \n\t\t\tif ( ! world . isRemote ) { \n\t\t\t\tworld . setBlockToAir ( pos ) ; \n\t\t\t\tfor ( ItemStack drop : drops ) { \n\t\t\t\t\tspawnAsEntity ( world , pos , drop ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "protected String fetchNativeId ( String nativeGuid ) { \n\t$F806 token = nativeGuid . split ( VNXFileConstants . PLUS_SEPERATOR ) ; \n\treturn $F8528 ( token ) ; \n\t} \n"}, {"code": "public static String toString ( final double value ) $F23210 ( Double , value ) "}, {"code": "public long rss $F72 $F12907 ( Long , fields ) "}, {"code": "public static void init ( Context context , boolean is_top ) { \n\tcameraManager = new CameraManager ( context , is_top ) ; \n\t} \n"}, {"code": "public static PlainText plain ( float text ) $F21034 ( plain , Float , text ) "}, {"code": "public final void append ( char value ) { \n\t$F1469 chunk ; \n\tif ( m_firstFree < m_chunkSize ) chunk = m_array [ m_lastChunk ] ; \n\telse { \n\t\tint i = m_array . length ; \n\t\tif ( m_lastChunk + NUM00 == i ) { \n\t\t\t$F10849 newarray = new char $F10850 ( i ) ; \n\t\t\t$F135 ( System , m_array , newarray , i ) m_array = newarray ; \n\t\t\t} \n\t\tchunk = m_array [ ++ m_lastChunk ] ; \n\t\tif ( chunk == null ) { \n\t\t\tif ( m_lastChunk == NUM00 < < m_rebundleBits && m_chunkBits < m_maxChunkBits ) { \n\t\t\t\tm_innerFSB = new FastStringBuffer ( this ) ; \n\t\t\t\t} \n\t\t\tchunk = m_array [ m_lastChunk ] = new char [ m_chunkSize ] ; \n\t\t\t} \n\t\tm_firstFree = NUM00 ; \n\t\t} \n\tchunk [ m_firstFree ++ ] = value ; \n\t} \n"}, {"code": "public Socket createSocket ( InetAddress address , int port , InetAddress myAddress , int myPort ) throws IOException { \n\tif ( myAddress != null ) { \n\t\t$F12832 ( sock ) sock . bind ( new InetSocketAddress ( myAddress , NUM00 ) ) ; \n\t\ttry { \n\t\t\tsock . connect ( new InetSocketAddress ( address , port ) , NUM00 ) ; \n\t\t\t} \n\t\tcatch ( SocketTimeoutException e ) { \n\t\t\tthrow new ConnectException ( NUM00 + address + NUM00 + port ) ; \n\t\t\t} \n\t\treturn sock ; \n\t\t} \n\telse { \n\t\t$F12832 ( sock ) if ( myPort != NUM00 ) { \n\t\t\tsock . bind ( new InetSocketAddress ( port ) ) ; \n\t\t\t} \n\t\ttry { \n\t\t\tsock . connect ( new InetSocketAddress ( address , port ) , NUM00 ) ; \n\t\t\t} \n\t\tcatch ( SocketTimeoutException e ) { \n\t\t\tthrow new ConnectException ( NUM00 + address + NUM00 + port ) ; \n\t\t\t} \n\t\treturn sock ; \n\t\t} \n\t} \n"}, {"code": "private static void updateClusterTenant ( DbClient dbClient , URI dataCenterId , URI tenantId ) { \n\tList < NamedElement > clustersUris = listChildren ( dbClient , dataCenterId , Cluster . class , NUM00 , NUM00 ) ; \n\tfor ( NamedElement clusterUri : clustersUris ) { \n\t\tCluster cluster = dbClient . queryObject ( Cluster . class , clusterUri . getId ( ) ) ; \n\t\tif ( cluster != null ) { \n\t\t\tcluster . setTenant ( tenantId ) ; \n\t\t\tdbClient . persistObject ( cluster ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static int prefixLength $F17564 ( s1 , s2 ) { \n\tint len = NUM00 ; \n\t$F31444 ( max , Math , s1 , s2 ) for ( int i = NUM00 ; \n\ti < max && s1 [ i ] == s2 [ i ] ; \n\t++ i ) ++ len ; \n\treturn len ; \n\t} \n"}, {"code": "private static boolean isLessThanOneWeek ( Date date ) { \n\t$F4377 ( calendar , Calendar ) calendar . add ( Calendar . DAY_OF_MONTH , - NUM00 ) ; \n\treturn date . after ( calendar . getTime ( ) ) ; \n\t} \n"}, {"code": "private int colToLoc ( int col , Vector < MappingPair > vec ) { \n\tint loc = col ; \n\tfor ( int i = NUM00 ; \n\t$F1765 ( i , vec ) && ( vec . elementAt ( i ) . col <= col ) ; \n\ti ++ ) { \n\t\tloc = loc + vec . elementAt ( i ) . inc ; \n\t\t} \n\treturn loc ; \n\t} \n"}, {"code": "protected $F8748 canHandleNClasses ( AttrTypes attrTypes , int numClasses ) { \n\tprint ( NUM00 ) ; \n\tprintAttributeSummary ( attrTypes , Attribute . NOMINAL ) ; \n\tprint ( NUM00 ) ; \n\t$F8728 ( accepts ) $F18793 ( accepts ) $F18793 ( accepts ) int numTrain = getNumInstances ( ) , numTest = getNumInstances ( ) , missingLevel = NUM00 ; \n\tboolean attributeMissing = _BOOL , classMissing = _BOOL ; \n\tint numAttr = NUM00 , attrIndex = NUM00 ; \n\treturn runBasicTest ( attrTypes , numAttr , attrIndex , Attribute . NOMINAL , missingLevel , attributeMissing , classMissing , numTrain , numTest , numClasses , accepts ) ; \n\t} \n"}, {"code": "public TypeVariable typeVariable $F72 { \n\t$F2199 ( id , typeVariableList ) $F722 ( typeVariableList ) TypeVariable result = new TypeVariable ( id , this ) ; \n\ttypeVariableList . set ( id , result ) ; \n\treturn result ; \n\t} \n"}, {"code": "public static $F1469 createTypeParameterSignature ( $F1469 typeParameterName , $F28330 ( boundSignatures ) ) { \n\tint length = boundSignatures . length ; \n\tif ( length == NUM00 ) { \n\t\treturn CharOperation . append ( typeParameterName , C_COLON ) ; \n\t\t} \n\tint boundsSize = NUM00 ; \n\tfor ( $F119 ( i , length ) ) { \n\t\tboundsSize += boundSignatures [ i ] . length + NUM00 ; \n\t\t} \n\tint nameLength = typeParameterName . length ; \n\t$F1469 result = new char [ nameLength + boundsSize ] ; \n\t$F135 ( System , typeParameterName , result , nameLength ) int index = nameLength ; \n\tfor ( $F119 ( i , length ) ) { \n\t\tresult [ index ++ ] = C_COLON ; \n\t\tint boundLength = boundSignatures [ i ] . length ; \n\t\tSystem . arraycopy ( boundSignatures [ i ] , NUM00 , result , index , boundLength ) ; \n\t\tindex += boundLength ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "void cancelStatement ( String sessionId , int statementId ) { \n\tfor ( TcpServerThread c : New . arrayList ( running ) ) { \n\t\tif ( c != null ) { \n\t\t\tc . cancelStatement ( sessionId , statementId ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static double parseDouble ( String s ) { \n\tif $F1238 ( POSITIVE_INFINITY , s ) $F90685 ( Double ) else if $F1238 ( NEGATIVE_INFINITY , s ) $F86429 ( Double ) else if $F1238 ( NaN , s ) $F6623 ( Double ) else { \n\t\ts = trimPlusSign ( s ) ; \n\t\treturn Double . parseDouble ( s ) ; \n\t\t} \n\t} \n"}, {"code": "public void finishZombieTasksWithError $F72 { \n\tList < PollableTask > zombiePollableTasks ; \n\tdo { \n\t\t$F980 ( logger ) PageRequest pageable = new PageRequest $F32532 ; \n\t\tzombiePollableTasks = pollableTaskRepository . findZombiePollableTasks ( pageable ) ; \n\t\tfor ( PollableTask zombiePollableTask : zombiePollableTasks ) { \n\t\t\tmarkAsFinishedWithError ( zombiePollableTask ) ; \n\t\t\t} \n\t\t} \n\twhile $F5973 ( zombiePollableTasks ) ; \n\t} \n"}, {"code": "public CookieEntity ( URI uri , HttpCookie cookie ) { \n\tthis . uri = $F48364 ( uri ) ; \n\tthis . name = cookie . getName ( ) ; \n\tthis . value = cookie . getValue ( ) ; \n\tthis . comment = cookie . getComment ( ) ; \n\tthis . commentURL = cookie . getCommentURL ( ) ; \n\tthis . discard = cookie . getDiscard ( ) ; \n\tthis . domain = cookie . getDomain ( ) ; \n\tlong maxAge = cookie . getMaxAge ( ) ; \n\tif ( maxAge != - NUM00 && maxAge > NUM00 ) { \n\t\tthis . expiry = ( maxAge * NUM00 ) + System . currentTimeMillis ( ) ; \n\t\tif ( this . expiry < NUM00 ) this . expiry = HeaderUtil . getMaxExpiryMillis ( ) ; \n\t\t} \n\telse this . expiry = - NUM00 ; \n\tthis . path = cookie . getPath ( ) ; \n\tif ( ! TextUtils . isEmpty ( path ) && $F20 ( path ) && path . endsWith ( NUM00 ) ) { \n\t\tthis . path = $F4019 ( path ) ; \n\t\t} \n\tthis . portList = cookie . getPortlist ( ) ; \n\tthis . secure = cookie . getSecure ( ) ; \n\tthis . version = cookie . getVersion ( ) ; \n\t} \n"}, {"code": "public void addValue ( T value ) { \n\tlist . addFirst ( value ) ; \n\ttotal += $F173338 ( Double , value ) ; \n\ttrim ( ) ; \n\t} \n"}, {"code": "private void updateTrafficMask $F72 { \n\t$F2199 ( queueSize , trafficControllingSessions ) while ( queueSize > NUM00 ) { \n\t\tS session = trafficControllingSessions . poll ( ) ; \n\t\t$F2329 ( session ) SessionState state = getState ( session ) ; \n\t\tswitch ( state ) { \n\t\t\t$F20998 ( OPENED , updateTrafficControl , session ) case CLOSING : $F597 case OPENING : trafficControllingSessions . add ( session ) ; \n\t\t\t$F597 $F1267 throw new IllegalStateException $F45942 ( String , state ) ; \n\t\t\t} \n\t\tqueueSize -- ; \n\t\t} \n\t} \n"}, {"code": "public Object createSoftWeakRef ( Object o ) { \n\treturn new WeakReference ( o ) ; \n\t} \n"}, {"code": "public boolean hasEntries $F72 $F3387 ( fEntries ) "}, {"code": "protected String convertToString ( Object value ) throws Throwable { \n\tString result = null ; \n\tif ( useLocaleFormat && value instanceof Number ) { \n\t\tNumberFormat format = getFormat ( ) ; \n\t\tformat . setGroupingUsed ( _BOOL ) ; \n\t\tresult = format . format ( value ) ; \n\t\t} \n\telse $F84156 ( result , value ) return result ; \n\t} \n"}, {"code": "$F46370 ( bits , result , upperShift , _BOOL , cValues , shift , firstByte , parseTwoBytes , i , cValue , C40_BASIC_SET_CHARS , c40char , FormatException , C40_SHIFT2_SET_CHARS ) "}, {"code": "public EsriShapeExport ( OMGraphicList list , Projection proj , String pathToFile ) { \n\tsetGraphicList ( list ) ; \n\tprojection = proj ; \n\tfilePath = pathToFile ; \n\tDEBUG = $F5288 ( logger , Level ) ; \n\t} \n"}, {"code": "$F3594 ( oredCriteria , orderByClause , distinct , _BOOL ) "}, {"code": "private void checkLogFolder $F72 { \n\t$F1705 ( folder , folderPath ) $F1909 ( folder ) } \n"}, {"code": "private void testCompleteOnTimeout_timesOut ( Integer v ) { \n\tlong timeoutMillis = timeoutMillis ( ) ; \n\t$F70225 ( f ) $F25238 ( startTime , System ) assertSame ( f , f . completeOnTimeout ( v , timeoutMillis , MILLISECONDS ) ) ; \n\tassertSame ( v , f . join ( ) ) ; \n\tassertTrue ( millisElapsedSince ( startTime ) >= timeoutMillis ) ; \n\tf . complete ( NUM00 ) ; \n\tcheckCompletedNormally ( f , v ) ; \n\t} \n"}, {"code": "private synchronized void reschedule ( long millis ) { \n\tcurrentFut = null ; \n\tif ( ! closed ) { \n\t\tSCHEDULER . schedule ( null , millis , TimeUnit . MILLISECONDS ) ; \n\t\t} \n\telse { \n\t\ttry $F881 ( underlying ) catch ( Exception ex ) { \n\t\t\tLOG . log ( Level . WARNING , NUM00 + underlying . configString ( ) , ex ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static ContentVerifierProvider createDefaultContentVerifier ( PublicKey key ) throws OperatorCreationException { \n\tif ( NUM00 == key . getAlgorithm ( ) ) { \n\t\treturn SUN_VERIFICATION_BUILDER . build ( key ) ; \n\t\t} \n\telse { \n\t\treturn BC_VERIFICATION_BUILDER . build ( key ) ; \n\t\t} \n\t} \n"}, {"code": "public static Uri fromFile ( File file ) { \n\t$F896 ( file ) PathPart path = PathPart . fromDecoded ( file . getAbsolutePath ( ) ) ; \n\treturn new HierarchicalUri ( NUM00 , Part . EMPTY , path , Part . NULL , Part . NULL ) ; \n\t} \n"}, {"code": "public void addRule ( final Rule rule ) { \n\trule . setId ( ruleIdCounter ++ ) ; \n\trules . add ( rule ) ; \n\t} \n"}, {"code": "public static Object serializeClone ( final Object obj ) throws $F6427 { \n\t$F1538 ( memOut ) $F7054 ( objOut , memOut ) objOut . writeObject ( obj ) ; \n\t$F59 ( objOut ) $F153946 ( src , memOut ) $F67402 ( objIs , src ) $F287819 ( objIs ) } \n"}, {"code": "private static String linkForClassName ( String name ) { \n\treturn $F2934 ( name ) + NUM00 ; \n\t} \n"}, {"code": "protected void handleElementDeleted ( IEditorInput fileEditorInput ) { \n\tfireElementDeleted ( fileEditorInput ) ; \n\t} \n"}, {"code": "public void assertTextPresent ( String expected , String actual ) { \n\tif ( ( actual == null ) || $F2200 ( actual , expected ) ) { \n\t\tthrow new AssertionFailedError $F6486 ( expected , actual ) ; \n\t\t} \n\t} \n"}, {"code": "public void testUsingProxySelector $F72 throws Exception { \n\t$F14426 ( server ) $F14426 ( proxy ) URL url = new URL ( NUM00 + server . port ( ) ) ; \n\t$F24457 ( defPS , ProxySelector ) ProxySelector . setDefault ( new TestProxySelector ( server . port ( ) , proxy . port ( ) ) ) ; \n\ttry { \n\t\t$F7963 ( connection , url ) $F14447 ( connection ) $F14448 ( connection ) $F2346 ( server ) $F14453 ( bound , server ) $F2346 ( proxy ) $F14453 ( bound , proxy ) $F2410 ( connection ) $F14454 ( server ) $F14454 ( proxy ) assertTrue ( NUM00 , connection . usingProxy ( ) ) ; \n\t\tassertTrue ( NUM00 , proxy . accepted ) ; \n\t\t$F8074 ( connection ) assertTrue ( NUM00 , connection . usingProxy ( ) ) ; \n\t\t} \n\tfinally $F24465 ( ProxySelector , defPS ) } \n"}, {"code": "public String codeCleanPipeline ( String contents ) { \n\tif ( contents == null ) { \n\t\treturn Values . EMPTY \"STRING\" ; \n\t\t} \n\t$F83 ( indexContents ) $F1469 firstReplacements = { \n\t\tNUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } \n\t; \n\tfor ( char c : firstReplacements ) { \n\t\tcontents = contents . replace ( c , NUM00 ) ; \n\t\t} \n\t$F84 ( indexContents ) indexContents . append ( contents ) ; \n\t$F1469 $F167305 ( secondReplacements ) ; \n\tfor ( char c : secondReplacements ) { \n\t\tcontents = contents . replace ( c , NUM00 ) ; \n\t\t} \n\t$F84 ( indexContents ) indexContents . append ( contents ) ; \n\t$F1469 forthReplacements = $F4582 ; \n\tfor ( char c : forthReplacements ) { \n\t\tcontents = contents . replace ( c , NUM00 ) ; \n\t\t} \n\t$F84 ( indexContents ) indexContents . append ( contents ) ; \n\t$F1469 replacements = { \n\t\tNUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } \n\t; \n\tfor ( char c : replacements ) { \n\t\tcontents = contents . replace ( c , NUM00 ) ; \n\t\t} \n\t$F84 ( indexContents ) indexContents . append ( contents ) ; \n\t$F1469 thirdReplacements = $F21901 ; \n\tfor ( char c : thirdReplacements ) { \n\t\tcontents = contents . replace ( c , NUM00 ) ; \n\t\t} \n\t$F84 ( indexContents ) indexContents . append ( contents ) ; \n\t$F92 ( indexContents ) } \n"}, {"code": "public static String mrpa2sampa ( String voicePhoneme ) { \n\tif $F1710 ( mrpa2sampa , voicePhoneme ) $F8313 ( mrpa2sampa , voicePhoneme ) else return voicePhoneme ; \n\t} \n"}, {"code": "public static XPath2FilterContainer newInstanceIntersect ( Document doc , String xpath2filter ) { \n\treturn new XPath2FilterContainer ( doc , xpath2filter , XPath2FilterContainer . _ATT_FILTER_VALUE_INTERSECT ) ; \n\t} \n"}, {"code": "public int lineToY ( int line ) { \n\t$F319 ( fm , painter ) return ( line - firstLine ) * fm . getHeight ( ) - ( fm . getLeading ( ) + fm . getMaxDescent ( ) ) ; \n\t} \n"}, {"code": "public void removeItemChangedListener ( ItemChangedListener listener ) $F106 ( itemChangedListeners , listener ) "}, {"code": "public boolean hasAmbigPrefix $F72 { \n\treturn $F7311 ( name , ambigPrefix ) ; \n\t} \n"}, {"code": "public OrderedThreadPoolExecutor ( int maximumPoolSize ) { \n\tthis ( DEFAULT_INITIAL_THREAD_POOL_SIZE , maximumPoolSize , DEFAULT_KEEP_ALIVE , TimeUnit . SECONDS , Executors . defaultThreadFactory ( ) , null ) ; \n\t} \n"}, {"code": "private String parseMalformed ( String urlString ) { \n\tif $F1032 ( parts ) { \n\t\tString ret ; \n\t\tfor ( URLPart part : parts ) { \n\t\t\tswitch ( part ) { \n\t\t\t\tcase PROTOCOL : ret = applyPattern ( REGEX_PROTOCOL , urlString ) ; \n\t\t\t\t$F597 case PORT : ret = applyPattern ( REGEX_PORT , urlString ) ; \n\t\t\t\t$F597 case QUERY : ret = applyPattern ( REGEX_QUERY , urlString ) ; \n\t\t\t\t$F597 case WHOLE : ret = urlString ; \n\t\t\t\t$F597 $F1267 ret = urlString ; \n\t\t\t\t} \n\t\t\tif $F48189 ( Strings , ret ) { \n\t\t\t\treturn ret ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn urlString ; \n\t} \n"}, {"code": "private boolean relocate $F72 { \n\tboolean finished = _BOOL ; \n\tfor ( Relocatable relocatable : this . relocatables ) { \n\t\tfinished &= relocatable . relocate ( ) ; \n\t\t} \n\treturn finished ; \n\t} \n"}, {"code": "$F45923 private Map < K , EntryProcessorResult > updateWithBatch ( GridCacheOperation op , Collection < $F13144 > keys , $F5466 $F247465 vals , $F5466 $F131 invokeArgs , $F5466 ExpiryPolicy expiryPlc , GridCacheVersion ver , $F5466 CacheEntryPredicate [ ] filter , boolean keepBinary , UUID subjId , String taskName ) throws IgniteCheckedException { \n\tList < GridCacheEntryEx > locked = lockEntries ( keys ) ; \n\ttry { \n\t\t$F115 ( size , locked ) $F276224 putMap = null ; \n\t\t$F5363 rmvKeys = null ; \n\t\tList < CacheObject > writeVals = null ; \n\t\tMap < K , EntryProcessorResult > invokeResMap = op == TRANSFORM ? U . < K , EntryProcessorResult > newHashMap ( size ) : null ; \n\t\tList < GridCacheEntryEx > $F10252 ( filtered , size ) ; \n\t\tCachePartialUpdateCheckedException err = null ; \n\t\t$F33240 valsIter = vals != null ? vals . iterator ( ) : null ; \n\t\tboolean intercept = ctx . config ( ) . getInterceptor ( ) != null ; \n\t\tfor ( $F119 ( i , size ) ) { \n\t\t\tGridCacheEntryEx entry = locked . get ( i ) ; \n\t\t\tObject val = valsIter != null ? valsIter . next ( ) : null ; \n\t\t\tif ( val == null && op != DELETE ) $F894 try { \n\t\t\t\ttry { \n\t\t\t\t\tif ( ! ctx . isAllLocked ( entry , filter ) ) { \n\t\t\t\t\t\tif $F585 ( log ) log . debug ( $F87168 ( entry , Arrays , filter ) ) ; \n\t\t\t\t\t\t$F598 } \n\t\t\t\t\t} \n\t\t\t\tcatch ( IgniteCheckedException e ) { \n\t\t\t\t\tif ( err == null ) err = partialUpdateException ( ) ; \n\t\t\t\t\terr . add ( F . asList ( entry . key ( ) ) , e ) ; \n\t\t\t\t\t$F598 } \n\t\t\t\tif ( op == TRANSFORM ) { \n\t\t\t\t\tctx . kernalContext ( ) . resource ( ) . inject ( val , GridResourceIoc . AnnotationSet . ENTRY_PROCESSOR , ctx . name ( ) ) ; \n\t\t\t\t\tEntryProcessor < Object , Object , Object > entryProcessor = ( EntryProcessor < Object , Object , Object > ) val ; \n\t\t\t\t\tCacheObject old = entry . innerGet ( null , null , _BOOL , _BOOL , _BOOL , _BOOL , _BOOL , subjId , entryProcessor , taskName , null , keepBinary ) ; \n\t\t\t\t\tObject oldVal = null ; \n\t\t\t\t\tCacheInvokeEntry $F75026 invokeEntry = new CacheInvokeEntry $F200 ( entry . key ( ) , old , entry . version ( ) , keepBinary , entry ) ; \n\t\t\t\t\tCacheObject updated ; \n\t\t\t\t\tObject updatedVal = null ; \n\t\t\t\t\tCacheInvokeResult invokeRes = null ; \n\t\t\t\t\ttry { \n\t\t\t\t\t\tObject computed = entryProcessor . process ( invokeEntry , invokeArgs ) ; \n\t\t\t\t\t\tupdatedVal = ctx . unwrapTemporary ( invokeEntry . getValue ( ) ) ; \n\t\t\t\t\t\tupdated = ctx . toCacheObject ( updatedVal ) ; \n\t\t\t\t\t\tif ( computed != null ) invokeRes = CacheInvokeResult . fromResult ( ctx . unwrapTemporary ( computed ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\tcatch ( Exception e ) { \n\t\t\t\t\t\tinvokeRes = CacheInvokeResult . fromError ( e ) ; \n\t\t\t\t\t\tupdated = old ; \n\t\t\t\t\t\t} \n\t\t\t\t\tif ( invokeRes != null ) invokeResMap . put ( ( K ) entry . key ( ) . value ( ctx . cacheObjectContext ( ) , _BOOL ) , invokeRes ) ; \n\t\t\t\t\tif ( updated == null ) { \n\t\t\t\t\t\tif ( intercept ) { \n\t\t\t\t\t\t\tIgniteBiTuple < Boolean , ? > interceptorRes = ctx . config ( ) . getInterceptor ( ) . onBeforeRemove ( new CacheLazyEntry ( ctx , entry . key ( ) , invokeEntry . key ( ) , old , oldVal , keepBinary ) ) ; \n\t\t\t\t\t\t\tif ( ctx . cancelRemove ( interceptorRes ) ) $F598 } \n\t\t\t\t\t\tif ( putMap != null ) { \n\t\t\t\t\t\t\terr = updatePartialBatch ( filtered , ver , writeVals , putMap , null , expiryPlc , keepBinary , err , subjId , taskName ) ; \n\t\t\t\t\t\t\tputMap = null ; \n\t\t\t\t\t\t\twriteVals = null ; \n\t\t\t\t\t\t\t$F9404 ( filtered ) } \n\t\t\t\t\t\tif ( rmvKeys == null ) $F10253 ( rmvKeys , size ) rmvKeys . add ( entry . key ( ) . value ( ctx . cacheObjectContext ( ) , _BOOL ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse { \n\t\t\t\t\t\tif ( intercept ) { \n\t\t\t\t\t\t\tObject interceptorVal = ctx . config ( ) . getInterceptor ( ) . onBeforePut ( new CacheLazyEntry ( ctx , entry . key ( ) , invokeEntry . getKey ( ) , old , oldVal , keepBinary ) , updatedVal ) ; \n\t\t\t\t\t\t\t$F45557 ( interceptorVal ) updated = ctx . toCacheObject ( ctx . unwrapTemporary ( interceptorVal ) ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\tif ( rmvKeys != null ) { \n\t\t\t\t\t\t\terr = updatePartialBatch ( filtered , ver , null , null , rmvKeys , expiryPlc , keepBinary , err , subjId , taskName ) ; \n\t\t\t\t\t\t\trmvKeys = null ; \n\t\t\t\t\t\t\t$F9404 ( filtered ) } \n\t\t\t\t\t\tif ( putMap == null ) { \n\t\t\t\t\t\t\tputMap = new LinkedHashMap $F200 ( size , NUM00 ) ; \n\t\t\t\t\t\t\t$F10253 ( writeVals , size ) } \n\t\t\t\t\t\tputMap . put ( CU . value ( entry . key ( ) , ctx , _BOOL ) , CU . value ( updated , ctx , _BOOL ) ) ; \n\t\t\t\t\t\twriteVals . add ( updated ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\telse if ( op == UPDATE ) { \n\t\t\t\t\tCacheObject cacheVal = ctx . toCacheObject ( val ) ; \n\t\t\t\t\tif ( intercept ) { \n\t\t\t\t\t\tCacheObject old = entry . innerGet ( null , null , _BOOL , ctx . loadPreviousValue ( ) , _BOOL , _BOOL , _BOOL , subjId , null , taskName , null , keepBinary ) ; \n\t\t\t\t\t\tObject interceptorVal = ctx . config ( ) . getInterceptor ( ) . onBeforePut ( new CacheLazyEntry ( ctx , entry . key ( ) , old , keepBinary ) , val ) ; \n\t\t\t\t\t\t$F45557 ( interceptorVal ) cacheVal = ctx . toCacheObject ( ctx . unwrapTemporary ( interceptorVal ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\tif ( putMap == null ) { \n\t\t\t\t\t\tputMap = new LinkedHashMap $F200 ( size , NUM00 ) ; \n\t\t\t\t\t\t$F10253 ( writeVals , size ) } \n\t\t\t\t\tputMap . put ( CU . value ( entry . key ( ) , ctx , _BOOL ) , CU . value ( cacheVal , ctx , _BOOL ) ) ; \n\t\t\t\t\twriteVals . add ( cacheVal ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tassert op == DELETE ; \n\t\t\t\t\tif ( intercept ) { \n\t\t\t\t\t\tCacheObject old = entry . innerGet ( null , null , _BOOL , ctx . loadPreviousValue ( ) , _BOOL , _BOOL , _BOOL , subjId , null , taskName , null , keepBinary ) ; \n\t\t\t\t\t\tIgniteBiTuple < Boolean , ? > interceptorRes = ctx . config ( ) . getInterceptor ( ) . onBeforeRemove ( new CacheLazyEntry ( ctx , entry . key ( ) , old , keepBinary ) ) ; \n\t\t\t\t\t\tif ( ctx . cancelRemove ( interceptorRes ) ) $F598 } \n\t\t\t\t\tif ( rmvKeys == null ) $F10253 ( rmvKeys , size ) rmvKeys . add ( entry . key ( ) . value ( ctx . cacheObjectContext ( ) , _BOOL ) ) ; \n\t\t\t\t\t} \n\t\t\t\tfiltered . add ( entry ) ; \n\t\t\t\t} \n\t\t\tcatch ( IgniteCheckedException e ) { \n\t\t\t\tif ( err == null ) err = partialUpdateException ( ) ; \n\t\t\t\terr . add ( F . asList ( entry . key ( ) ) , e ) ; \n\t\t\t\t} \n\t\t\tcatch ( GridCacheEntryRemovedException ignore ) { \n\t\t\t\tassert _BOOL : NUM00 ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( putMap != null || rmvKeys != null ) { \n\t\t\terr = updatePartialBatch ( filtered , ver , writeVals , putMap , rmvKeys , expiryPlc , keepBinary , err , subjId , taskName ) ; \n\t\t\t} \n\t\telse assert filtered . isEmpty ( ) ; \n\t\t$F84834 ( err ) return invokeResMap ; \n\t\t} \n\t$F18632 ( unlockEntries , locked ) } \n"}, {"code": "private static Set < TypeElement > findAllMembersInjectorsRecursively ( Collection < TypeElement > membersInjectors ) { \n\tSet < TypeElement > $F9626 ( result ) ; \n\tfor ( TypeElement element : membersInjectors ) $F42502 ( result , findAllMembersInjectorsRecursively , element ) return result ; \n\t} \n"}, {"code": "public Builder addSubButton ( Context context , int drawable , $F2027 twoColors , String string ) { \n\t$F21432 ( drawables ) drawables . add ( ContextCompat . getDrawable ( context , drawable ) ) ; \n\t$F21432 ( colors ) colors . add ( twoColors ) ; \n\t$F21432 ( strings ) strings . add ( string ) ; \n\treturn this ; \n\t} \n"}, {"code": "private void initComponents $F72 { \n\tlabelValue = new Label $F72 ; \n\tlabelValue . setValue ( Util . cleanAmp ( $F9206 ( Msg , Env ) ) ) ; \n\tlabelName = new Label $F72 ; \n\tlabelName . setValue ( Util . cleanAmp ( $F9206 ( Msg , Env ) ) ) ; \n\tlabelContact = new Label $F72 ; \n\tlabelContact . setValue ( $F9206 ( Msg , Env ) ) ; \n\tlabelEMail = new Label $F72 ; \n\tlabelEMail . setValue ( $F83894 ( Msg , Env ) ) ; \n\tlabelPostal = new Label $F72 ; \n\tlabelPostal . setValue ( $F83894 ( Msg , Env ) ) ; \n\tlabelPhone = new Label $F72 ; \n\tlabelPhone . setValue ( $F9206 ( Msg , Env ) ) ; \n\tfieldID = NUM00 ; \n\tfieldValue = new Textbox $F72 ; \n\tfieldValue . setMaxlength ( NUM00 ) ; \n\t$F106626 ( fieldValue ) fieldValue . addEventListener ( Events . ON_CHANGE , this ) ; \n\tfieldName = new Textbox $F72 ; \n\tfieldName . setMaxlength ( NUM00 ) ; \n\t$F106626 ( fieldName ) fieldName . addEventListener ( Events . ON_CHANGE , this ) ; \n\tfieldContact = new Textbox $F72 ; \n\tfieldContact . setMaxlength ( NUM00 ) ; \n\t$F106626 ( fieldContact ) fieldContact . addEventListener ( Events . ON_CHANGE , this ) ; \n\tfieldEMail = new Textbox $F72 ; \n\tfieldEMail . setMaxlength ( NUM00 ) ; \n\t$F106626 ( fieldEMail ) fieldEMail . addEventListener ( Events . ON_CHANGE , this ) ; \n\tfieldPostal = new Textbox $F72 ; \n\tfieldPostal . setMaxlength ( NUM00 ) ; \n\t$F106626 ( fieldPostal ) fieldPostal . addEventListener ( Events . ON_CHANGE , this ) ; \n\tfieldPhone = new Textbox $F72 ; \n\tfieldPhone . setMaxlength ( NUM00 ) ; \n\t$F106626 ( fieldPhone ) fieldPhone . addEventListener ( Events . ON_CHANGE , this ) ; \n\tcheckAND = new Checkbox $F72 ; \n\t$F405059 ( checkAND , Msg , Env ) $F87453 ( checkAND ) checkAND . setTooltiptext ( $F83894 ( Msg , Env ) ) ; \n\tcheckAND . setSelected ( _BOOL ) ; \n\tcheckAND . addActionListener ( this ) ; \n\t$F106626 ( checkAND ) checkCustomer = new Checkbox $F72 ; \n\tcheckCustomer . addActionListener ( this ) ; \n\t$F106626 ( checkCustomer ) $F87453 ( checkCustomer ) if ( m_isSOTrx ) checkCustomer . setLabel ( $F83894 ( Msg , Env ) ) ; \n\telse checkCustomer . setLabel ( $F83894 ( Msg , Env ) ) ; \n\tcheckCustomer . setSelected ( m_isSOMatch ) ; \n\t} \n"}, {"code": "public static boolean isFMInstance $F72 { \n\tif ( instanceType == null ) { \n\t\t$F68570 ( instanceType , configTags ) } \n\treturn $F153572 ( instanceType ) ; \n\t} \n"}, {"code": "private boolean tryRelease ( long c , WorkQueue v , long inc ) { \n\tint sp = ( int ) c , ns = sp & ~ UNSIGNALLED ; \n\tif ( v != null ) { \n\t\tint vs = v . scanState ; \n\t\tlong nc = ( v . stackPred & SP_MASK ) | ( UC_MASK & ( c + inc ) ) ; \n\t\tif ( sp == vs && U . compareAndSwapLong ( this , CTL , c , nc ) ) { \n\t\t\tv . scanState = ns ; \n\t\t\tLockSupport . unpark ( v . parker ) ; \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public boolean execute ( String sqlStatements , Connection conn ) { \n\tif ( conn == null ) $F4638 $F91090 ( sql , convert , sqlStatements ) m_exception = null ; \n\tif ( m_conversionError != null || sql == null ) return _BOOL ; \n\tboolean ok = _BOOL ; \n\tint i = NUM00 ; \n\tString statement = null ; \n\ttry { \n\t\tif ( m_stmt == null ) $F2715 ( m_stmt , conn ) for ( i = NUM00 ; \n\t\tok && i < sql . length ; \n\t\ti ++ ) { \n\t\t\tstatement = sql [ i ] ; \n\t\t\tif $F1277 ( statement ) { \n\t\t\t\tif ( m_verbose ) log . finer ( NUM00 + i + NUM00 ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tif ( m_verbose ) $F8817 ( log , i , statement ) else $F556 ( log , i ) try { \n\t\t\t\t\tm_stmt . clearWarnings ( ) ; \n\t\t\t\t\t$F32305 ( no , m_stmt , statement ) SQLWarning warn = m_stmt . getWarnings ( ) ; \n\t\t\t\t\tif ( warn != null ) { \n\t\t\t\t\t\tif ( m_verbose ) $F556 ( log , warn ) else { \n\t\t\t\t\t\t\t$F8817 ( log , i , statement ) $F556 ( log , warn ) } \n\t\t\t\t\t\t} \n\t\t\t\t\tif ( m_verbose ) $F35577 ( log , no ) } \n\t\t\t\tcatch ( SQLException ex ) { \n\t\t\t\t\tif $F14943 ( statement ) { \n\t\t\t\t\t\tok = _BOOL ; \n\t\t\t\t\t\tm_exception = ex ; \n\t\t\t\t\t\t} \n\t\t\t\t\tif ( ! m_verbose ) $F8817 ( log , i , statement ) log . info ( $F15594 ( i , sql ) + ex ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tcatch ( SQLException e ) { \n\t\tm_exception = e ; \n\t\tif ( ! m_verbose ) $F8817 ( log , i , statement ) log . info ( $F15594 ( i , sql ) + e ) ; \n\t\treturn _BOOL ; \n\t\t} \n\treturn ok ; \n\t} \n"}, {"code": "$F1 public Value sample ( Assignment condition ) { \n\tdouble prob = getProb ( condition ) ; \n\tif ( sampler . nextDouble ( ) < prob ) { \n\t\treturn ValueFactory . create ( _BOOL ) ; \n\t\t} \n\telse { \n\t\treturn ValueFactory . create ( _BOOL ) ; \n\t\t} \n\t} \n"}, {"code": "private void initStyle ( AttributeSet attributeSet , int defStyleAttribute ) { \n\tTypedArray typedArray = mContext . obtainStyledAttributes ( attributeSet , R . styleable . MaterialSearchView , defStyleAttribute , NUM00 ) ; \n\tif ( typedArray != null ) { \n\t\tif ( typedArray . hasValue ( R . styleable . MaterialSearchView_searchBackground ) ) { \n\t\t\tsetBackground ( typedArray . getDrawable ( R . styleable . MaterialSearchView_searchBackground ) ) ; \n\t\t\t} \n\t\tif ( typedArray . hasValue ( R . styleable . MaterialSearchView_android_textColor ) ) { \n\t\t\tsetTextColor ( typedArray . getColor ( R . styleable . MaterialSearchView_android_textColor , ContextCompat . getColor ( mContext , R . color . black ) ) ) ; \n\t\t\t} \n\t\tif ( typedArray . hasValue ( R . styleable . MaterialSearchView_android_textColorHint ) ) { \n\t\t\tsetHintTextColor ( typedArray . getColor ( R . styleable . MaterialSearchView_android_textColorHint , ContextCompat . getColor ( mContext , R . color . gray_50 ) ) ) ; \n\t\t\t} \n\t\tif ( typedArray . hasValue ( R . styleable . MaterialSearchView_android_hint ) ) { \n\t\t\tsetHint ( typedArray . getString ( R . styleable . MaterialSearchView_android_hint ) ) ; \n\t\t\t} \n\t\tif ( typedArray . hasValue ( R . styleable . MaterialSearchView_searchVoiceIcon ) ) { \n\t\t\tsetVoiceIcon ( typedArray . getDrawable ( R . styleable . MaterialSearchView_searchVoiceIcon ) ) ; \n\t\t\t} \n\t\tif ( typedArray . hasValue ( R . styleable . MaterialSearchView_searchCloseIcon ) ) { \n\t\t\tsetClearIcon ( typedArray . getDrawable ( R . styleable . MaterialSearchView_searchCloseIcon ) ) ; \n\t\t\t} \n\t\tif ( typedArray . hasValue ( R . styleable . MaterialSearchView_searchBackIcon ) ) { \n\t\t\tsetBackIcon ( typedArray . getDrawable ( R . styleable . MaterialSearchView_searchBackIcon ) ) ; \n\t\t\t} \n\t\tif ( typedArray . hasValue ( R . styleable . MaterialSearchView_searchSuggestionBackground ) ) { \n\t\t\tsetSuggestionBackground ( typedArray . getResourceId ( R . styleable . MaterialSearchView_searchSuggestionBackground , R . color . search_layover_bg ) ) ; \n\t\t\t} \n\t\tif ( typedArray . hasValue ( R . styleable . MaterialSearchView_android_inputType ) ) { \n\t\t\tsetInputType ( typedArray . getInteger ( R . styleable . MaterialSearchView_android_inputType , InputType . TYPE_CLASS_TEXT ) ) ; \n\t\t\t} \n\t\tif ( typedArray . hasValue ( R . styleable . MaterialSearchView_searchBarHeight ) ) { \n\t\t\tsetSearchBarHeight ( typedArray . getDimensionPixelSize ( R . styleable . MaterialSearchView_searchBarHeight , getAppCompatActionBarHeight ( ) ) ) ; \n\t\t\t} \n\t\telse $F7429 ( setSearchBarHeight , getAppCompatActionBarHeight ) ViewCompat . setFitsSystemWindows ( this , typedArray . getBoolean ( R . styleable . MaterialSearchView_android_fitsSystemWindows , _BOOL ) ) ; \n\t\t$F17551 ( typedArray ) } \n\t} \n"}, {"code": "boolean validate ( Set attrVals , String i18nFileName , boolean encodePassword ) throws SMSException { \n\treturn validate ( attrVals , i18nFileName , encodePassword , Collections . EMPTY_MAP ) ; \n\t} \n"}, {"code": "protected static void appendBigDecimalNumericType ( StringBuilder sb ) $F86 ( sb ) "}, {"code": "void removeAt ( final int removeIndex ) { \n\t$F48385 ( items , this ) if ( removeIndex == takeIndex ) { \n\t\titems [ takeIndex ] = null ; \n\t\ttakeIndex = inc ( takeIndex ) ; \n\t\tcount -- ; \n\t\tif ( itrs != null ) itrs . elementDequeued ( ) ; \n\t\t} \n\telse { \n\t\t$F4711 ( putIndex , this ) for ( int i = removeIndex ; \n\t\t; \n\t\t) { \n\t\t\tint next = inc ( i ) ; \n\t\t\tif ( next != putIndex ) { \n\t\t\t\titems [ i ] = items [ next ] ; \n\t\t\t\ti = next ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\titems [ i ] = null ; \n\t\t\t\tthis . putIndex = i ; \n\t\t\t\t$F597 } \n\t\t\t} \n\t\tcount -- ; \n\t\tif ( itrs != null ) itrs . removedAt ( removeIndex ) ; \n\t\t} \n\t$F702 ( notFull ) } \n"}, {"code": "private AccessGrant createAccessGrant $F3501 ( params ) { \n\tAccessGrant accessGrant = new AccessGrant $F72 ; \n\tif $F139289 ( params ) { \n\t\t$F170151 ( accessToken , params ) Integer expires = null ; \n\t\tif $F139289 ( params ) { \n\t\t\texpires = Integer . valueOf ( params . get ( NUM00 ) ) ; \n\t\t\t} \n\t\taccessGrant . setKey ( accessToken ) ; \n\t\t$F34765 ( accessGrant , expires ) } \n\taccessGrant . setProviderId ( mProviderName . toString ( ) ) ; \n\treturn accessGrant ; \n\t} \n"}, {"code": "public double distance ( Vector other ) { \n\treturn Math . sqrt ( Math . pow ( other . x - x , NUM00 ) + Math . pow ( other . y - y , NUM00 ) + Math . pow ( other . z - z , NUM00 ) ) ; \n\t} \n"}, {"code": "private void parse ( File tmd ) throws IOException { \n\t$F18800 ( f , tmd ) $F927 ( f ) this . signatureType = f . readInt ( ) ; \n\t$F3259 ( f , signature ) ; \n\t$F927 ( f ) $F3259 ( f , issuer ) ; \n\t$F927 ( f ) this . version = f . readByte ( ) ; \n\tthis . CACRLVersion = f . readByte ( ) ; \n\tthis . signerCRLVersion = f . readByte ( ) ; \n\t$F927 ( f ) this . systemVersion = f . readLong ( ) ; \n\tthis . titleID = f . readLong ( ) ; \n\tthis . titleType = f . readInt ( ) ; \n\tthis . groupID = f . readShort ( ) ; \n\t$F927 ( f ) $F3259 ( f , reserved ) ; \n\t$F927 ( f ) this . accessRights = f . readInt ( ) ; \n\tthis . titleVersion = f . readShort ( ) ; \n\tthis . contentCount = f . readShort ( ) ; \n\tthis . bootIndex = f . readShort ( ) ; \n\t$F927 ( f ) $F3259 ( f , SHA2 ) ; \n\t$F927 ( f ) short indexOffset ; \n\tshort commandCount ; \n\tfor ( $F6268 ( i ) ) { \n\t\tf . seek ( NUM00 + ( NUM00 * i ) ) ; \n\t\t$F11214 ( indexOffset , f ) $F11214 ( commandCount , f ) $F12496 ( buffer ) $F3259 ( f , buffer ) ; \n\t\tthis . contentInfos [ i ] = new ContentInfo ( indexOffset , commandCount , buffer ) ; \n\t\t} \n\tthis . contents = new Content [ contentCount ] ; \n\tint ID ; \n\tshort index ; \n\tshort type ; \n\tlong size ; \n\tfor ( $F119 ( i , contentCount ) ) { \n\t\tf . seek ( NUM00 + ( NUM00 * i ) ) ; \n\t\t$F5961 ( ID , f ) $F11214 ( index , f ) $F11214 ( type , f ) $F33039 ( size , f ) $F12496 ( buffer ) $F3259 ( f , buffer ) ; \n\t\tthis . contents [ i ] = new Content ( ID , index , type , size , buffer , this ) ; \n\t\t} \n\tif ( $F3259 ( f , cert2 ) != NUM00 ) { \n\t\t$F138169 ( Logger ) } \n\tif ( $F3259 ( f , cert1 ) != NUM00 ) { \n\t\t$F138169 ( Logger ) } \n\t$F59 ( f ) } \n"}, {"code": "$F166447 ( propertyName , in_vcl , beanContextChildSupport ) "}, {"code": "public static void takeScreenshot ( final String tag ) { \n\tif ( scenario == null ) { \n\t\tthrow new ScreenshotException $F580 ; \n\t\t} \n\tSpoonScreenshotAction . perform ( tag ) ; \n\tfinal File screenshot = SpoonScreenshotAction . getLastScreenshot ( ) ; \n\tif ( screenshot == null ) { \n\t\tthrow new ScreenshotException $F580 ; \n\t\t} \n\tFileInputStream screenshotStream = null ; \n\ttry { \n\t\t$F5335 ( screenshotStream , screenshot ) final byte fileContent [ ] = new byte [ $F5338 ( screenshot ) ] ; \n\t\t$F117439 ( readImageBytes , screenshotStream , fileContent ) if ( readImageBytes != - NUM00 ) { \n\t\t\tscenario . embed ( fileContent , NUM00 ) ; \n\t\t\t} \n\t\t} \n\tcatch ( final IOException ioe ) { \n\t\tthrow new ScreenshotException ( NUM00 + ioe ) ; \n\t\t} \n\tfinally { \n\t\ttry $F6399 ( screenshotStream ) catch ( final IOException ioe ) { \n\t\t\tthrow new ScreenshotException ( NUM00 + ioe ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void importRunnerEnvironment ( ImportProject importProject , FolderEntry baseProjectFolder ) throws ForbiddenException , ServerException , ConflictException , IOException $F16625 ( importRunnerEnvironment , importProject , baseProjectFolder ) "}, {"code": "$F1 public void doNotify $F72 throws Exception { \n\t$F973 ( log ) ScheduledExecutorService svc = service ; \n\tif ( svc != null ) { \n\t\ttry { \n\t\t\tsvc . schedule ( ( Callable $F1432 ) this , NUM00 , TimeUnit . MICROSECONDS ) ; \n\t\t\t} \n\t\tcatch ( RejectedExecutionException ex ) { \n\t\t\tif $F155759 ( svc ) $F22715 ( log ) else { \n\t\t\t\tthrow ex ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse $F22715 ( log ) } \n"}, {"code": "public boolean checkRootByBuildTags $F72 { \n\tString buildTags = android . os . Build . TAGS ; \n\tif $F5914 ( buildTags , SU_TAG ) { \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public boolean isUserActive ( String realm ) { \n\tboolean active = _BOOL ; \n\ttry { \n\t\t$F21551 ( user , IdUtils , ssoToken , userId ) boolean isUserActive = user . isActive ( ) ; \n\t\tString loginStatus = getUserAttributeValue ( user , USER_SERVICE_LOGIN_STATUS , ACTIVE ) ; \n\t\tString lockout = getUserAttributeValue ( user , USER_SERVICE_NS_LOCKOUT , NUM00 _FALSE ) ; \n\t\tif ( ! isUserActive || ! loginStatus . equalsIgnoreCase ( ACTIVE ) || ! lockout . equalsIgnoreCase ( NUM00 _FALSE ) ) { \n\t\t\terrorMsg = getLocalizedString ( NUM00 ) ; \n\t\t\twriteLog ( NUM00 , userId ) ; \n\t\t\t} \n\t\telse if ( isAccountExpired ( user ) ) { \n\t\t\terrorMsg = getLocalizedString ( NUM00 ) ; \n\t\t\twriteLog ( NUM00 , userId ) ; \n\t\t\t} \n\t\telse if ( isUserLockout ( userId , realm ) ) { \n\t\t\tString obj [ ] = { \n\t\t\t\tuserId } \n\t\t\t; \n\t\t\tinformationMsg = getLocalizedString ( NUM00 ) ; \n\t\t\twriteLog ( NUM00 , userId ) ; \n\t\t\t} \n\t\telse { \n\t\t\tactive = _BOOL ; \n\t\t\t} \n\t\t} \n\tcatch ( SSOException e ) { \n\t\t$F21557 ( debug , e ) errorMsg = getErrorString ( e ) ; \n\t\t} \n\tcatch ( IdRepoException e ) { \n\t\t$F21557 ( debug , e ) errorMsg = getErrorString ( e ) ; \n\t\t} \n\treturn active ; \n\t} \n"}, {"code": "$F1 public $F30939 CompletableFuture $F30939 foldRight ( final U seed , final BiFunction < $F11631 , U , U > function ) $F19292 ( CompletableFuture , exec ) "}, {"code": "private void algorithmDouglasPeucker ( $F14699 entries , double epsilon , int start , int end ) { \n\tif ( end <= start + NUM00 ) $F932 int maxDistIndex = NUM00 ; \n\tdouble distMax = NUM00 ; \n\t$F14726 ( firstEntry , entries , start ) $F14726 ( lastEntry , entries , end ) for ( $F2634 ( i , start , end ) ) { \n\t\tdouble dist = calcAngleBetweenLines ( firstEntry , lastEntry , firstEntry , entries . get ( i ) ) ; \n\t\t$F8399 ( dist , distMax , maxDistIndex , i ) } \n\tif ( distMax > epsilon ) { \n\t\tkeep [ maxDistIndex ] = _BOOL ; \n\t\talgorithmDouglasPeucker ( entries , epsilon , start , maxDistIndex ) ; \n\t\talgorithmDouglasPeucker ( entries , epsilon , maxDistIndex , end ) ; \n\t\t} \n\t} \n"}, {"code": "private void calcIntervalDis $F72 { \n\t$F2329 ( mMarkTextPaint ) String defaultText = NUM00 ; \n\t$F28883 ( temp ) int max = NUM00 ; \n\tif $F8841 ( mItems ) { \n\t\tfor ( String i : mItems ) { \n\t\t\t$F77589 ( mMarkTextPaint , i , temp ) if ( temp . width ( ) > max ) { \n\t\t\t\tmax = temp . width ( ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse { \n\t\t$F77589 ( mMarkTextPaint , defaultText , temp ) max = temp . width ( ) ; \n\t\t} \n\tif $F20899 ( TextUtils , mAdditionCenterMark ) { \n\t\tmMarkTextPaint . setTextSize ( mNormalTextSize ) ; \n\t\t$F77589 ( mMarkTextPaint , mAdditionCenterMark , temp ) mAdditionCenterMarkWidth = temp . width ( ) ; \n\t\tmax += temp . width ( ) ; \n\t\t} \n\tmIntervalDis = max * mIntervalFactor ; \n\t} \n"}, {"code": "public static void sort ( AbstractList array , $F2027 indices ) { \n\tfor ( $F1139 ( i , indices ) ) $F14245 ( indices , i ) int temp ; \n\tint j , n = array . size ( ) ; \n\tfor ( j = n / NUM00 ; \n\tj > NUM00 ; \n\tj -- ) { \n\t\tadjust ( array , indices , j , n ) ; \n\t\t} \n\tfor ( j = n - NUM00 ; \n\tj > NUM00 ; \n\tj -- ) { \n\t\ttemp = indices [ NUM00 ] ; \n\t\tindices [ NUM00 ] = indices [ j ] ; \n\t\tindices [ j ] = temp ; \n\t\tadjust ( array , indices , NUM00 , j ) ; \n\t\t} \n\t} \n"}, {"code": "$F41720 ( value , absMin , absMax , absValue , Math ) "}, {"code": "public static boolean saveStringToFile ( String dataInput , String path ) { \n\tString filename = path ; \n\t$F1705 ( file , filename ) FileOutputStream fos ; \n\t$F39526 ( data , dataInput ) try { \n\t\t$F10893 ( fos , file ) fos . write ( data ) ; \n\t\t$F1206 ( fos ) $F59 ( fos ) return _BOOL ; \n\t\t} \n\t$F35546 ( e ) $F12241 ( e ) return _BOOL ; \n\t} \n"}, {"code": "public static String quote ( String input ) { \n\tif $F3578 ( input ) $F34654 ( input ) else { \n\t\treturn input ; \n\t\t} \n\t} \n"}, {"code": "$F43277 ( listener , mListeners ) "}, {"code": "public static void assertThrowsCompletionException ( final Consumer $F8317 consumer , $F6970 ( exceptionClass ) ) { \n\ttry { \n\t\tconsumer . accept ( null ) ; \n\t\t} \n\tcatch ( final CompletionException completionEx ) { \n\t\tfinal Throwable ex = completionEx . getCause ( ) ; \n\t\tif ( ex . getClass ( ) == exceptionClass ) $F932 Assert . fail ( String . format ( NUM00 , ex . getClass ( ) ) ) ; \n\t\t} \n\tAssert . fail ( String . format ( NUM00 , exceptionClass ) ) ; \n\t} \n"}, {"code": "public Object put ( Object key , Object value ) { \n\tObject oldValue = null ; \n\tsynchronized ( map ) { \n\t\toldValue = map . put ( key , value ) ; \n\t\t$F40608 ( oldValue , removeElement , key ) addElement ( key ) ; \n\t\t} \n\treturn oldValue ; \n\t} \n"}, {"code": "public double run $F72 { \n\ttry { \n\t\tAudioInputStream inInput = AudioSystem . getAudioInputStream ( files [ NUM00 ] ) ; \n\t\tAudioFeature audioFeatureInput = ( AudioFeature ) featureExtractorInput . calculate ( inInput ) ; \n\t\t} \n\t$F3957 double avgDistance = NUM00 ; \n\tfor ( $F2277 ( i , arrayFeatureExtractorTrainSet ) ) { \n\t\tdouble distance2DB = audioThreadDistance ( featureExtractorInput . getMFCC ( ) , arrayFeatureExtractorTrainSet . get ( i ) ) ; \n\t\tLog . i ( NUM00 , NUM00 + distance2DB ) ; \n\t\tavgDistance += distance2DB ; \n\t\t} \n\tLog . i ( NUM00 , NUM00 + ( avgDistance / arrayFeatureExtractorTrainSet . size ( ) ) ) ; \n\treturn avgDistance / arrayFeatureExtractorTrainSet . size ( ) ; \n\t} \n"}, {"code": "$F26827 ( w , h , oldw , oldh , super , setupBounds , setupPaints , invalidate ) "}, {"code": "public Predicate ( Term t ) $F207 ( terms , t ) "}, {"code": "private void addOperations $F32029 ( methodSignatures ) throws OperationParseException { \n\tfor ( String sig : methodSignatures ) { \n\t\tTypedOperation operation = OperationParser . parse ( sig ) ; \n\t\toperations . add ( operation ) ; \n\t\t} \n\t} \n"}, {"code": "private void writeLog ( String log ) { \n\tFile file = new File ( CrashHandlerDefault . Log_Default_Path + NUM00 + $F52170 ( formatter ) + NUM00 ) ; \n\ttry { \n\t\t$F4649 ( fileOutputStream , file ) $F39526 ( bytes , log ) fileOutputStream . write ( bytes ) ; \n\t\t$F59 ( fileOutputStream ) } \n\t$F12241 ( e ) } \n"}, {"code": "public Rule ( String pattern , Object tokenType , String nextState ) { \n\tthis . pattern = Pattern . compile ( pattern ) ; \n\tthis . tokenType = tokenType ; \n\tthis . nextState = nextState ; \n\t} \n"}, {"code": "private void showPopup ( final MouseEvent event ) { \n\t$F2027 rows = getSelectedRows ( ) ; \n\tif ( $F9634 ( rows ) || $F9634 ( rows ) ) { \n\t\tfinal int row = $F32863 ( rowAtPoint , event ) ; \n\t\tfinal int column = $F32863 ( columnAtPoint , event ) ; \n\t\tif ( ( row == - NUM00 ) || ( column == - NUM00 ) ) $F932 changeSelection ( row , column , _BOOL , _BOOL ) ; \n\t\trows = getSelectedRows ( ) ; \n\t\t} \n\tfinal JPopupMenu menu = new JPopupMenu $F72 ; \n\tmenu . add ( new JMenuItem ( CActionProxy . proxy ( new CDeleteBookmarkAction ( m_bookmarkManager , rows ) ) ) ) ; \n\t$F121507 ( menu , event ) } \n"}, {"code": "public int lineToY ( int line ) { \n\t$F319 ( fm , painter ) return ( line - firstLine ) * fm . getHeight ( ) - ( fm . getLeading ( ) + fm . getMaxDescent ( ) ) ; \n\t} \n"}, {"code": "public static boolean hasSpecialChars ( final String str ) { \n\t$F37142 ( matcher , SPL_CHAR_PATRN , str ) $F89398 ( matcher ) } \n"}, {"code": "$F1 public int read $F1313 ( off , len ) throws IOException { \n\t$F31068 ( bb ) if ( b == null ) $F18044 else if ( off < NUM00 || len < NUM00 || len > b . length - off ) $F81129 else $F14826 ( len ) int length = Math . min ( bb . remaining ( ) , len ) ; \n\t$F7630 ( length ) bb . get ( b , off , length ) ; \n\treturn length ; \n\t} \n"}, {"code": "public void removeEventListener ( MultimediaMessagingSessionListener listener ) throws $F161622 { \n\t$F161627 ( mApi ) try { \n\t\tWeakReference < IMultimediaMessagingSessionListener > weakRef = mMultimediaMessagingSessionListeners . remove ( listener ) ; \n\t\t$F2329 ( weakRef ) IMultimediaMessagingSessionListener multimediaMessagingSessionListener = weakRef . get ( ) ; \n\t\tif ( multimediaMessagingSessionListener != null ) { \n\t\t\tmApi . removeEventListener2 ( multimediaMessagingSessionListener ) ; \n\t\t\t} \n\t\t} \n\t$F228550 ( RcsIllegalArgumentException , e ) } \n"}, {"code": "private static boolean dateByMonth ( DateTimeFormatterBuilder bld , Collection < DateTimeFieldType > fields , boolean extended , boolean strictISO ) { \n\tboolean reducedPrec = _BOOL ; \n\tif ( fields . remove ( DateTimeFieldType . year ( ) ) ) { \n\t\tbld . append ( Constants . ye ) ; \n\t\tif ( fields . remove ( DateTimeFieldType . monthOfYear ( ) ) ) { \n\t\t\tif ( fields . remove ( DateTimeFieldType . dayOfMonth ( ) ) ) { \n\t\t\t\tappendSeparator ( bld , extended ) ; \n\t\t\t\tbld . appendMonthOfYear ( NUM00 ) ; \n\t\t\t\tappendSeparator ( bld , extended ) ; \n\t\t\t\tbld . appendDayOfMonth ( NUM00 ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\t$F188366 ( bld ) bld . appendMonthOfYear ( NUM00 ) ; \n\t\t\t\treducedPrec = _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tif ( fields . remove ( DateTimeFieldType . dayOfMonth ( ) ) ) { \n\t\t\t\tcheckNotStrictISO ( fields , strictISO ) ; \n\t\t\t\t$F188366 ( bld ) $F188366 ( bld ) bld . appendDayOfMonth ( NUM00 ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\treducedPrec = _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse if ( fields . remove ( DateTimeFieldType . monthOfYear ( ) ) ) { \n\t\t$F188366 ( bld ) $F188366 ( bld ) bld . appendMonthOfYear ( NUM00 ) ; \n\t\tif ( fields . remove ( DateTimeFieldType . dayOfMonth ( ) ) ) { \n\t\t\tappendSeparator ( bld , extended ) ; \n\t\t\tbld . appendDayOfMonth ( NUM00 ) ; \n\t\t\t} \n\t\telse { \n\t\t\treducedPrec = _BOOL ; \n\t\t\t} \n\t\t} \n\telse if ( fields . remove ( DateTimeFieldType . dayOfMonth ( ) ) ) { \n\t\t$F188366 ( bld ) $F188366 ( bld ) $F188366 ( bld ) bld . appendDayOfMonth ( NUM00 ) ; \n\t\t} \n\treturn reducedPrec ; \n\t} \n"}, {"code": "public $F806 parseLine ( String line , boolean withLabel , boolean trace , boolean ignoreEmpty ) { \n\tif ( trace ) $F81293 ( log , line ) $F8728 ( list ) for ( $F2277 ( i , m_rows ) ) { \n\t\tImpFormatRow row = ( ImpFormatRow ) m_rows . get ( i ) ; \n\t\t$F280 ( entry ) if ( withLabel ) { \n\t\t\tentry . append ( row . getColumnName ( ) ) ; \n\t\t\t$F84 ( entry ) if ( row . isString ( ) ) $F84 ( entry ) else if ( row . isDate ( ) ) $F84 ( entry ) } \n\t\tString info = null ; \n\t\tif ( row . isConstant ( ) ) info = NUM00 ; \n\t\telse if ( m_formatType . equals ( X_AD_ImpFormat . FORMATTYPE_FixedPosition ) ) { \n\t\t\tif ( row . getStartNo ( ) > NUM00 && row . getEndNo ( ) <= line . length ( ) ) info = line . substring ( row . getStartNo ( ) - NUM00 , row . getEndNo ( ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tinfo = parseFlexFormat ( line , m_formatType , row . getStartNo ( ) ) ; \n\t\t\t} \n\t\tif ( Util . isEmpty ( info , _BOOL ) ) { \n\t\t\tif ( row . getDefaultValue ( ) != null ) info = row . getDefaultValue ( ) ; \n\t\t\telse info = NUM00 ; \n\t\t\t} \n\t\tentry . append ( row . parse ( info ) ) ; \n\t\tif ( withLabel ) { \n\t\t\tif ( row . isString ( ) ) $F84 ( entry ) else if ( row . isDate ( ) ) $F84 ( entry ) } \n\t\tif ( ! ignoreEmpty || ( ignoreEmpty && $F35624 ( info ) ) ) $F40018 ( list , entry ) if ( trace ) log . fine ( $F31144 ( info , entry ) + NUM00 + info . length ( ) + NUM00 ) ; \n\t\t} \n\t$F5442 ( retValue , list ) list . toArray ( retValue ) ; \n\treturn retValue ; \n\t} \n"}, {"code": "public WidgetProposalComputer ( String text , int offset , Element rootElement , Element parentElement , IJavaProject javaProject ) throws JavaModelException , UiBinderException { \n\tsuper ( javaProject , text , offset , text . length ( ) ) ; \n\tthis . rootElement = rootElement ; \n\tthis . parentElement = parentElement ; \n\tpackageManager . readFromElement ( rootElement ) ; \n\t} \n"}, {"code": "public List < $F54596 > parse $F20110 ( queries ) throws QueryParseException { \n\tList < $F54596 > $F719 ( predicates , queries ) ; \n\t$F34103 ( query , queries , predicates , parse ) return predicates ; \n\t} \n"}, {"code": "public static Object deserializeStream ( final String witness ) throws Exception { \n\t$F4647 ( fileIs , witness ) $F67402 ( objIs , fileIs ) $F287819 ( objIs ) } \n"}, {"code": "public static void rollback ( boolean beganTransaction , String causeMessage , Throwable causeThrowable ) throws GenericTransactionException { \n\tif ( beganTransaction ) { \n\t\tTransactionUtil . rollback ( causeThrowable ) ; \n\t\t} \n\telse { \n\t\tTransactionUtil . setRollbackOnly ( causeMessage , causeThrowable ) ; \n\t\t} \n\t} \n"}, {"code": "public LongArray ( LongArray array ) { \n\tthis . ordered = array . ordered ; \n\tsize = array . size ; \n\t$F11125 ( items , size ) System . arraycopy ( array . items , NUM00 , items , NUM00 , size ) ; \n\t} \n"}, {"code": "private static $F4203 T reportGet ( Object r ) throws $F38232 { \n\tif ( r == null ) $F2757 if ( r instanceof AltResult ) { \n\t\tThrowable x , cause ; \n\t\tif ( ( x = ( ( AltResult ) r ) . ex ) == null ) $F1274 if ( x instanceof CancellationException ) throw ( CancellationException ) x ; \n\t\tif ( ( x instanceof CompletionException ) && ( cause = x . getCause ( ) ) != null ) x = cause ; \n\t\tthrow new ExecutionException ( x ) ; \n\t\t} \n\t$F1431 T t = ( T ) r ; \n\treturn t ; \n\t} \n"}, {"code": "protected void garbageCollect ( VisualTable labels ) { \n\tIterator iter = labels . tuples ( ) ; \n\twhile $F2921 ( iter ) { \n\t\t$F163591 ( item , iter ) if ( ! item . isStartVisible ( ) && ! item . isEndVisible ( ) ) { \n\t\t\tlabels . removeTuple ( item ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public boolean sharesVariableWith ( DefUse du ) $F12739 ( varName , du ) "}, {"code": "private void populateNavDrawer $F72 { \n\t$F725 ( mNavDrawerItems ) mNavDrawerItems . add ( NAVDRAWER_ITEM_ACTIVITY1 ) ; \n\tmNavDrawerItems . add ( NAVDRAWER_ITEM_SEPARATOR ) ; \n\tmNavDrawerItems . add ( NAVDRAWER_ITEM_ACTIVITY2 ) ; \n\tmNavDrawerItems . add ( NAVDRAWER_ITEM_SEPARATOR_SPECIAL ) ; \n\tmNavDrawerItems . add ( NAVDRAWER_ITEM_ACTIVITY3 ) ; \n\tcreateNavDrawerItems ( ) ; \n\t} \n"}, {"code": "public ArtifactCoordinates ( final String groupId , final String artifactId , final String version , final String classifier ) $F90398 ( this , groupId , artifactId , version , classifier ) "}, {"code": "private CarbonIterator < BatchResult > executeBlockList ( $F8688 blockList ) throws QueryExecutionException { \n\tqueryModel . setTableBlockInfos ( blockList ) ; \n\tthis . queryExecutor = QueryExecutorFactory . getQueryExecutor ( ) ; \n\tCarbonIterator < BatchResult > iter = null ; \n\ttry { \n\t\titer = queryExecutor . execute ( queryModel ) ; \n\t\t} \n\tcatch ( QueryExecutionException e ) { \n\t\t$F16391 ( LOGGER , e ) throw e ; \n\t\t} \n\treturn iter ; \n\t} \n"}, {"code": "public static boolean isJavaScriptEnabled ( HttpServletRequest request ) { \n\t$F27836 ( session , request ) Boolean javaScriptEnabled = ( Boolean ) session . getAttribute ( NUM00 ) ; \n\tif ( javaScriptEnabled != null ) { \n\t\t$F44652 ( javaScriptEnabled ) } \n\treturn _BOOL ; \n\t} \n"}, {"code": "protected Link createLink ( final String relation , final URI href ) { \n\treturn new Link ( relation , href ) ; \n\t} \n"}, {"code": "public void testFlipBitPositiveInside2 $F72 { \n\t$F17888 int aSign = NUM00 ; \n\tint number = NUM00 ; \n\tbyte $F3018 = { \n\t\tNUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 } \n\t; \n\t$F3023 ( aNumber , aSign , aBytes ) $F103435 ( result , aNumber , number ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) } \n"}, {"code": "public static Spannable createSpannableFromTextWithTemplate ( String text , CharSequence innerTemplate ) { \n\tSpannableString result = new SpannableString ( text ) ; \n\tif ( innerTemplate instanceof Spanned ) { \n\t\tint index = text . indexOf ( innerTemplate . toString ( ) ) ; \n\t\tif ( index >= NUM00 ) { \n\t\t\tcopySpans ( result , ( Spanned ) innerTemplate , index ) ; \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "$F1 public String toString $F72 { \n\treturn xmlFile . getName ( ) ; \n\t} \n"}, {"code": "public String toString $F72 { \n\treturn String . valueOf ( stopTimeMillis - startTimeMillis ) + NUM00 ; \n\t} \n"}, {"code": "public ObjectGraph plusGraph $F11546 ( activityScopeModules ) { \n\t$F826 ( activityScopeModules ) return graph . plus ( activityScopeModules . toArray ( ) ) ; \n\t} \n"}, {"code": "public GroupCategorySet ( GroupCategory [ ] categories ) { \n\tAssert . isNotNull ( categories ) ; \n\tfContent = new ArrayList ( categories . length ) ; \n\tfor ( $F1139 ( i , categories ) ) { \n\t\tif $F22209 ( fContent , categories , i ) $F24616 ( fContent , categories , i ) } \n\t} \n"}, {"code": "private boolean inSamePackage $F140796 ( c1 , c2 ) { \n\t$F20605 ( nameC1 , c1 ) $F20605 ( nameC2 , c2 ) $F24867 ( indexDotC1 , nameC1 ) $F24867 ( indexDotC2 , nameC2 ) $F35938 ( indexDotC1 , indexDotC2 , _BOOL ) $F5881 ( indexDotC1 , _BOOL ) return nameC1 . regionMatches ( NUM00 , nameC2 , NUM00 , indexDotC1 ) ; \n\t} \n"}, {"code": "private void writeConstraintsToXml ( XmlSerializer out , JobStatus jobStatus ) throws IOException { \n\tout . startTag ( null , XML_TAG_PARAMS_CONSTRAINTS ) ; \n\tif ( jobStatus . hasUnmeteredConstraint ( ) ) { \n\t\t$F18835 ( out , Boolean , _BOOL ) } \n\tif ( jobStatus . hasConnectivityConstraint ( ) ) { \n\t\t$F18835 ( out , Boolean , _BOOL ) } \n\tif ( jobStatus . hasIdleConstraint ( ) ) { \n\t\t$F18835 ( out , Boolean , _BOOL ) } \n\tif ( jobStatus . hasChargingConstraint ( ) ) { \n\t\t$F18835 ( out , Boolean , _BOOL ) } \n\tout . endTag ( null , XML_TAG_PARAMS_CONSTRAINTS ) ; \n\t} \n"}, {"code": "public void fillConditionalHoles $F72 { \n\tValueRange possibleCondPairs = new ValueRange $F57797 ( table ) ; \n\tif ( possibleCondPairs . getNbCombinations ( ) < NUM00 ) { \n\t\tSet $F2791 possibleCondAssignments = possibleCondPairs . linearise ( ) ; \n\t\tpossibleCondAssignments . remove ( new Assignment $F72 ) ; \n\t\tfor ( Assignment possibleCond : possibleCondAssignments ) { \n\t\t\tif $F15257 ( table , possibleCond ) { \n\t\t\t\taddRow ( possibleCond , ValueFactory . none ( ) , NUM00 ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private boolean showAppMenu ( View view , boolean startDragging ) { \n\tif ( ! mMenuHandler . isAppMenuShowing ( ) && mMenuHandler . showAppMenu ( view , startDragging ) ) { \n\t\tif ( ! startDragging ) RecordUserAction . record ( NUM00 ) ; \n\t\t$F21689 ( mOnAppMenuShownListener ) return _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "protected void writeNodeText ( Node node ) throws IOException { \n\t$F45667 ( text , node ) if $F23754 ( text ) { \n\t\t$F8577 ( escapeText , text , escapeElementEntities ) lastOutputNodeType = Node . TEXT_NODE ; \n\t\twriter . write ( text ) ; \n\t\t} \n\t} \n"}, {"code": "public void insertRadians ( $F1986 latlons , int coordPairIndex , boolean replaceEndsOfInsertedAtJoin ) { \n\tint minPntsNeededForInsertion = NUM00 ; \n\tboolean atEnd = _BOOL ; \n\tboolean isClosed = isGeometryClosed ( ) ; \n\tint insertionPoint = coordPairIndex * NUM00 ; \n\tif ( insertionPoint >= rawllpts . length ) { \n\t\tif ( isClosed ) $F65461 ( insertionPoint , rawllpts ) else { \n\t\t\tinsertionPoint = rawllpts . length ; \n\t\t\tatEnd = _BOOL ; \n\t\t\t} \n\t\t} \n\telse if ( insertionPoint <= NUM00 ) { \n\t\tif ( isClosed ) { \n\t\t\tinsertionPoint = NUM00 ; \n\t\t\t} \n\t\telse { \n\t\t\tinsertionPoint = NUM00 ; \n\t\t\tatEnd = _BOOL ; \n\t\t\t} \n\t\t} \n\tint newCoordStart = NUM00 ; \n\tint newCoordLength = latlons . length ; \n\tif ( replaceEndsOfInsertedAtJoin ) { \n\t\tnewCoordStart = NUM00 ; \n\t\tminPntsNeededForInsertion = NUM00 ; \n\t\tif ( atEnd ) { \n\t\t\tminPntsNeededForInsertion -= NUM00 ; \n\t\t\tnewCoordLength -= NUM00 ; \n\t\t\t$F78418 ( insertionPoint , newCoordStart ) } \n\t\telse { \n\t\t\tnewCoordLength -= NUM00 ; \n\t\t\t} \n\t\t} \n\tif ( renderType == OMGraphic . RENDERTYPE_LATLON && latlons . length >= minPntsNeededForInsertion && latlons . length % NUM00 == NUM00 ) { \n\t\t$F1986 oldrawllpnts = rawllpts ; \n\t\tint oldCoordsRemaining = oldrawllpnts . length - insertionPoint ; \n\t\trawllpts = new double [ oldrawllpnts . length + newCoordLength ] ; \n\t\t$F135 ( System , oldrawllpnts , rawllpts , insertionPoint ) System . arraycopy ( latlons , newCoordStart , rawllpts , insertionPoint , newCoordLength ) ; \n\t\tSystem . arraycopy ( oldrawllpnts , insertionPoint , rawllpts , insertionPoint + newCoordLength , oldCoordsRemaining ) ; \n\t\tsetNeedToRegenerate ( _BOOL ) ; \n\t\t} \n\t} \n"}, {"code": "public static boolean cancelPotentialWork ( Object data , ImageView imageView ) { \n\tfinal BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask ( imageView ) ; \n\tif ( bitmapWorkerTask != null ) { \n\t\tfinal Object bitmapData = bitmapWorkerTask . data ; \n\t\tif $F87129 ( bitmapData , data ) { \n\t\t\tbitmapWorkerTask . cancel ( _BOOL ) ; \n\t\t\tif ( BuildConfig . DEBUG ) $F29023 ( Log , TAG , data ) } \n\t\telse { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "protected $F529 convertNamedListToMap ( NamedList $F1011 args ) { \n\t$F529 $F161023 ( argsMap ) ; \n\tif ( args != null ) { \n\t\tfor ( Map . Entry $F6251 entry : args ) { \n\t\t\t$F53096 ( argsMap , entry ) } \n\t\t} \n\treturn argsMap ; \n\t} \n"}, {"code": "private T3 < Integer , Integer , $F96 > randomKey ( Random rnd ) { \n\treturn $F342958 ( keys , rnd ) ; \n\t} \n"}, {"code": "public String toString $F72 { \n\t$F280 ( buffer ) if ( override > NUM00 ) { \n\t\t$F286 ( buffer , override ) if ( lineno > NUM00 ) $F286 ( buffer , lineno ) } \n\telse { \n\t\tif ( locationName == null && lineno > NUM00 ) $F287 ( buffer , lineno ) else if ( locationName != null ) { \n\t\t\t$F86403 ( buffer , locationName ) if ( lineno > NUM00 ) $F86403 ( buffer , lineno ) } \n\t\t} \n\tbuffer . append ( description ) ; \n\t$F92 ( buffer ) } \n"}, {"code": "public void testSearchablesListReal $F72 { \n\tMyMockPackageManager mockPM = new MyMockPackageManager ( mContext . getPackageManager ( ) ) ; \n\tMyMockContext mockContext = new MyMockContext ( mContext , mockPM ) ; \n\tmockPM . setSearchablesMode ( MyMockPackageManager . SEARCHABLES_PASSTHROUGH ) ; \n\tSearchables searchables = new Searchables ( mockContext , NUM00 ) ; \n\tsearchables . buildSearchableList ( ) ; \n\tArrayList < SearchableInfo > searchablesList = searchables . getSearchablesList ( ) ; \n\t$F2199 ( count , searchablesList ) assertTrue ( count >= NUM00 ) ; \n\tcheckSearchables ( searchablesList ) ; \n\tArrayList < SearchableInfo > global = searchables . getSearchablesInGlobalSearchList ( ) ; \n\tcheckSearchables ( global ) ; \n\t} \n"}, {"code": "private void fillExampleTable ( DataSet dataSet , ProgressListener listener , $F2027 attributeColumns , MemoryExampleTable exampleTable ) throws DataSetException , ProcessStoppedException , ParseException { \n\t$F46131 attributes = exampleTable . getAttributes ( ) ; \n\t$F2268 ( dataSet ) int numberOfRows = dataSet . getNumberOfRows ( ) ; \n\tDataRowFactory factory = new DataRowFactory ( dataManagementType , DataRowFactory . POINT_AS_DECIMAL_CHARACTER ) ; \n\tboolean isRunningInProcess = isOperatorRunning ( ) ; \n\twhile $F2921 ( dataSet ) { \n\t\tif ( isRunningInProcess ) { \n\t\t\toperator . checkForStop ( ) ; \n\t\t\t} \n\t\tif ( shouldStop ) { \n\t\t\tthrow new ProcessStoppedException $F72 ; \n\t\t\t} \n\t\tDataSetRow currentRow = dataSet . nextRow ( ) ; \n\t\tif ( listener != null ) { \n\t\t\tupdateProcess ( listener , dataSet . getCurrentRowIndex ( ) , numberOfRows ) ; \n\t\t\t} \n\t\tDataRow row = factory . create ( attributes . length ) ; \n\t\texampleTable . addDataRow ( row ) ; \n\t\tint attributeIndex = NUM00 ; \n\t\tfor ( Attribute attribute : attributes ) { \n\t\t\tif ( currentRow . isMissing ( attributeColumns [ attributeIndex ] ) ) { \n\t\t\t\trow . set ( attribute , Double . NaN ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tswitch ( attribute . getValueType ( ) ) { \n\t\t\t\t\tcase Ontology . INTEGER : case Ontology . NUMERICAL : case Ontology . REAL : row . set ( attribute , getNumber ( currentRow , attributeColumns [ attributeIndex ] ) ) ; \n\t\t\t\t\t$F597 case Ontology . DATE_TIME : case Ontology . TIME : case Ontology . DATE : row . set ( attribute , getDate ( currentRow , attributeColumns [ attributeIndex ] ) ) ; \n\t\t\t\t\t$F597 $F1267 row . set ( attribute , getStringIndex ( attribute , currentRow , attributeColumns [ attributeIndex ] ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tattributeIndex ++ ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public boolean isSpurious ( int minClSize ) { \n\treturn children . isEmpty ( ) && members . size ( ) < minClSize ; \n\t} \n"}, {"code": "public AesDecryptor $F24576 ( key , off , len ) { \n\tthis . key = new byte [ len ] ; \n\t$F76118 ( System , key , off , this , len ) } \n"}, {"code": "static String extractNumberFromUriWithoutFormatting ( String uri ) { \n\t$F1338 ( uri ) $F12747 ( index0 , uri , URI_START_DELIMITER ) if ( index0 != - NUM00 ) { \n\t\turi = uri . substring ( index0 + URI_START_DELIMITER . length ( ) , uri . indexOf ( URI_END_DELIMITER , index0 ) ) ; \n\t\t} \n\t$F12747 ( index1 , uri , TEL_URI_HEADER ) if ( index1 != - NUM00 ) { \n\t\t$F29993 ( uri , index1 , TEL_URI_HEADER ) } \n\tindex1 = uri . indexOf ( SIP_URI_HEADER ) ; \n\tif ( index1 != - NUM00 ) { \n\t\t$F12712 ( index2 , uri , index1 ) uri = uri . substring ( index1 + SIP_URI_HEADER . length ( ) , index2 ) ; \n\t\t} \n\t$F1384 ( index2 , uri ) $F63871 ( index2 , uri ) $F49897 ( index2 , uri ) $F63871 ( index2 , uri ) return uri ; \n\t} \n"}, {"code": "public RemoteMethodCallResults invokeAndWait ( final String endPointName , final RemoteMethodCall remoteCall ) { \n\tEndPoint local ; \n\tsynchronized ( m_endPointMutex ) $F6045 ( local , m_localEndPoints , endPointName ) if ( local == null ) $F4915 ( invokeAndWaitRemote , remoteCall ) else { \n\t\tfinal long number = local . takeANumber ( ) ; \n\t\tfinal List < RemoteMethodCallResults > results = local . invokeLocal ( remoteCall , number , getLocalNode ( ) ) ; \n\t\tif $F10471 ( results ) { \n\t\t\tthrow new RemoteNotFoundException ( NUM00 + endPointName ) ; \n\t\t\t} \n\t\tif $F3817 ( results ) $F1155 ( results ) $F38159 ( results ) } \n\t} \n"}, {"code": "private void restoreFromKeypress ( final KeyEvent keyEvent , final int keyNumber ) { \n\tif ( keyEvent . isAltDown ( ) ) { \n\t\tfinal int arrayIndex = ( keyNumber > NUM00 ? keyNumber : MAX_RECENT_MESSAGES ) - NUM00 ; \n\t\tif $F1765 ( arrayIndex , recentMessages ) $F80218 ( displayMessage , recentMessages , arrayIndex ) $F60335 ( keyEvent ) } \n\t} \n"}, {"code": "private void createElement ( Document doc , Element parentElement , String elementName , boolean value ) { \n\t$F16570 ( element , doc , elementName ) element . appendChild ( doc . createTextNode ( Boolean . toString ( value ) ) ) ; \n\tparentElement . appendChild ( element ) ; \n\t} \n"}, {"code": "protected void annotationValueToString ( final StringBuilder sb , final BOp val , final int indent ) $F221418 ( sb , val ) "}, {"code": "public void runTest $F72 throws Throwable { \n\tDocument doc ; \n\tNodeList emList ; \n\tNode emNode ; \n\tCharacterData emText ; \n\tNode nullChild ; \n\t$F236 ( doc , load , _BOOL ) $F237 ( emList , doc ) $F238 ( emNode , emList ) $F241 ( emText , emNode ) nullChild = emText . getLastChild ( ) ; \n\tassertNull ( NUM00 , nullChild ) ; \n\t} \n"}, {"code": "$F140745 ( ordering ) "}, {"code": "$F1 $F529 extractFields ( String line ) { \n\tif ( ! initialized ) $F62354 ( init , initialized , _BOOL ) $F806 values = fixedWidthParser . parseLine ( line ) ; \n\tif ( hasHeader && Arrays . deepEquals ( values , header ) ) $F1337 $F529 map = Maps . newHashMap ( ) ; \n\tint i = NUM00 ; \n\tfor ( FixedWidthField field : fields ) { \n\t\tmap . put ( field . getName ( ) , getValue ( field , values [ i ++ ] ) ) ; \n\t\t} \n\treturn map ; \n\t} \n"}, {"code": "protected double ScalingFunction ( int iDistance ) { \n\treturn Math . exp ( - Math . pow ( ( iDistance ) , NUM00 ) / ( $F124737 ( Math , CorrelationWindow ) ) ) ; \n\t} \n"}, {"code": "protected void updateIdealPoint $F72 { \n\tfor ( Solution solution : this ) { \n\t\tif ( solution . getNumberOfObjectives ( ) != numberOfObjectives ) { \n\t\t\tthrow new FrameworkException $F580 ; \n\t\t\t} \n\t\tfor ( $F119 ( i , numberOfObjectives ) ) { \n\t\t\t$F163952 ( idealPoint , i , Math , solution ) } \n\t\t} \n\t} \n"}, {"code": "public SearchBuilder sort ( SortFieldBuilder ... builders ) $F73474 ( sort , Arrays , builders , this ) "}, {"code": "$F1 public final BufferedImage dataToRGB ( $F96 data , final int width , final int height ) { \n\tBufferedImage image ; \n\tdata = dataToRGBByteArray ( data , width , height ) ; \n\tfinal DataBuffer db = new DataBufferByte ( data , data . length ) ; \n\tfinal $F2027 bands = $F79696 ; \n\t$F98898 ( image , width , height , BufferedImage ) ; \n\tfinal Raster raster = Raster . createInterleavedRaster ( db , width , height , width * NUM00 , NUM00 , bands , null ) ; \n\timage . setData ( raster ) ; \n\treturn image ; \n\t} \n"}, {"code": "protected void createFileChooser $F72 { \n\tm_FileChooser = new JFileChooser ( $F8450 ( System ) ) ; \n\t$F159615 ( m_FileChooser , JFileChooser ) } \n"}, {"code": "private boolean isNoun ( String word ) { \n\t$F397 ( nouns , _BOOL ) return $F101864 ( nouns , word ) ; \n\t} \n"}, {"code": "public static void writeDocument ( Document document , String encoding , OutputStream out , Writer writer , boolean omitXMLDeclaration ) throws IOException , XMLException { \n\tif ( writer == null ) { \n\t\twriter = new OutputStreamWriter ( out , encoding ) ; \n\t\t} \n\ttransformer . setOutputProperty ( OutputKeys . ENCODING , encoding ) ; \n\ttransformer . setOutputProperty ( OutputKeys . OMIT_XML_DECLARATION , omitXMLDeclaration ? NUM00 : NUM00 ) ; \n\tSource source = new DOMSource ( document ) ; \n\tResult result = new StreamResult ( writer ) ; \n\ttry { \n\t\ttransformer . transform ( source , result ) ; \n\t\t} \n\tcatch ( TransformerException e ) { \n\t\t$F301 ( e ) throw new XMLException ( NUM00 , e ) ; \n\t\t} \n\t$F1206 ( writer ) } \n"}, {"code": "public static String intToString ( int value , int nChars ) { \n\t$F4074 ( strValue , Integer , value ) $F7542 ( strBuf , nChars ) for ( $F1748 ( i , strValue ) ; \n\ti < nChars ; \n\ti ++ ) $F86 ( strBuf ) strBuf . append ( strValue ) ; \n\t$F92 ( strBuf ) } \n"}, {"code": "public boolean isQuestCompleted ( final String name ) { \n\treturn quests . isQuestCompleted ( name ) ; \n\t} \n"}, {"code": "private void updateButtonState ( boolean dataChanged ) $F7715 ( btnApply , dataChanged , btnRevert ) "}, {"code": "private void buildMenu $F72 { \n\tsetVisible ( _BOOL ) ; \n\tremoveAll ( ) ; \n\tif $F171772 ( recentSearches ) { \n\t\tJMenuItem noRecent = new JMenuItem $F16961 ( UIManager ) ; \n\t\tnoRecent . setEnabled ( _BOOL ) ; \n\t\tadd ( noRecent ) ; \n\t\t} \n\telse { \n\t\tJMenuItem recent = new JMenuItem $F16961 ( UIManager ) ; \n\t\trecent . setEnabled ( _BOOL ) ; \n\t\tadd ( recent ) ; \n\t\tfor ( String searchString : recentSearches . getRecentSearches ( ) ) { \n\t\t\tJMenuItem mi = new JMenuItem ( searchString ) ; \n\t\t\tmi . addActionListener ( this ) ; \n\t\t\tadd ( mi ) ; \n\t\t\t} \n\t\taddSeparator ( ) ; \n\t\tclear = new JMenuItem $F16961 ( UIManager ) ; \n\t\tclear . addActionListener ( this ) ; \n\t\tadd ( clear ) ; \n\t\t} \n\t} \n"}, {"code": "$F176524 ( u8 , Integer ) "}, {"code": "protected void Predicate $F72 throws $F1872 { \n\tif ( tokenIs ( NUM00 ) ) { \n\t\tnextToken ( ) ; \n\t\tPredicateExpr ( ) ; \n\t\tconsumeExpected ( NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F96 join ( $F96 arrayA , byte ... arrayB ) { \n\t$F118578 ( arrayB , arrayA ) $F118578 ( arrayA , arrayB ) $F148496 ( array , arrayA , arrayB ) $F7057 ( System , arrayA , array ) $F11244 ( System , arrayB , array , arrayA ) return array ; \n\t} \n"}, {"code": "public void removeListener ( Listener listener ) $F106 ( mListeners , listener ) "}, {"code": "protected double constrictionCoefficient ( double c1 , double c2 ) { \n\tdouble rho = c1 + c2 ; \n\tif ( rho <= NUM00 ) $F1083 else { \n\t\treturn NUM00 / ( NUM00 - rho - Math . sqrt ( Math . pow ( rho , NUM00 ) - NUM00 * rho ) ) ; \n\t\t} \n\t} \n"}, {"code": "public ReplicatorCapabilities ( TungstenProperties props ) throws Exception { \n\t$F2689 keys = props . keyNames ( ) ; \n\tfor ( String key : keys ) { \n\t\tif $F1238 ( key , ROLES ) { \n\t\t\t$F3803 tags = props . getStringList ( key ) ; \n\t\t\tfor ( String tag : tags ) { \n\t\t\t\tif $F8397 ( tag , ROLE_MASTER ) { \n\t\t\t\t\taddRole ( ReplicatorCapabilities . ROLE_MASTER ) ; \n\t\t\t\t\t} \n\t\t\t\telse if $F8397 ( tag , ROLE_SLAVE ) { \n\t\t\t\t\taddRole ( ReplicatorCapabilities . ROLE_SLAVE ) ; \n\t\t\t\t\t} \n\t\t\t\telse if $F8397 ( tag , ROLE_RELAY ) { \n\t\t\t\t\taddRole ( ReplicatorCapabilities . ROLE_RELAY ) ; \n\t\t\t\t\t} \n\t\t\t\telse $F216876 ( tag ) } \n\t\t\t} \n\t\telse if $F1238 ( key , MODEL ) { \n\t\t\t$F19101 ( tag , props , key ) if $F8397 ( tag , MODEL_PUSH ) { \n\t\t\t\tsetModel ( MODEL_PUSH ) ; \n\t\t\t\t} \n\t\t\telse if $F8397 ( tag , MODEL_PULL ) { \n\t\t\t\tsetModel ( MODEL_PULL ) ; \n\t\t\t\t} \n\t\t\telse if $F8397 ( tag , MODEL_PEER ) { \n\t\t\t\tsetModel ( MODEL_PEER ) ; \n\t\t\t\t} \n\t\t\telse if $F8397 ( tag , UNKNOWN ) { \n\t\t\t\tsetModel ( UNKNOWN ) ; \n\t\t\t\t} \n\t\t\telse $F216876 ( tag ) } \n\t\telse if $F1238 ( key , CAP_CONSISTENCY ) { \n\t\t\tsetConsistencyCheck ( props . getBoolean ( CAP_CONSISTENCY ) ) ; \n\t\t\t} \n\t\telse if $F1238 ( key , CAP_HEARTBEAT ) { \n\t\t\tsetHeartbeat ( props . getBoolean ( CAP_HEARTBEAT ) ) ; \n\t\t\t} \n\t\telse if $F1238 ( key , CAP_FLUSH ) { \n\t\t\tsetFlush ( props . getBoolean ( CAP_FLUSH ) ) ; \n\t\t\t} \n\t\telse if $F1238 ( key , PROVISION ) { \n\t\t\t$F19101 ( tag , props , key ) if $F8397 ( tag , PROVISION_DONOR ) { \n\t\t\t\tsetProvisionDriver ( PROVISION_DONOR ) ; \n\t\t\t\t} \n\t\t\telse if $F8397 ( tag , PROVISION_JOINER ) { \n\t\t\t\tsetProvisionDriver ( PROVISION_JOINER ) ; \n\t\t\t\t} \n\t\t\telse if $F8397 ( tag , UNKNOWN ) { \n\t\t\t\tsetProvisionDriver ( UNKNOWN ) ; \n\t\t\t\t} \n\t\t\telse $F216876 ( tag ) } \n\t\telse $F216876 ( key ) } \n\t} \n"}, {"code": "private void fitImageToView $F72 { \n\tDrawable drawable = getDrawable ( ) ; \n\tif ( drawable == null || drawable . getIntrinsicWidth ( ) == NUM00 || drawable . getIntrinsicHeight ( ) == NUM00 ) $F932 $F5768 ( matrix , prevMatrix ) int drawableWidth = drawable . getIntrinsicWidth ( ) ; \n\tint drawableHeight = drawable . getIntrinsicHeight ( ) ; \n\t$F5773 ( scaleX , viewWidth , drawableWidth ) $F5773 ( scaleY , viewHeight , drawableHeight ) switch ( mScaleType ) { \n\t\tcase CENTER : scaleX = scaleY = NUM00 ; \n\t\t$F597 case CENTER_CROP : scaleX = scaleY = Math . max ( scaleX , scaleY ) ; \n\t\t$F597 case CENTER_INSIDE : scaleX = scaleY = Math . min ( NUM00 , Math . min ( scaleX , scaleY ) ) ; \n\t\tcase FIT_CENTER : scaleX = scaleY = Math . min ( scaleX , scaleY ) ; \n\t\t$F597 case FIT_XY : $F597 $F5789 } \n\tfloat redundantXSpace = viewWidth - ( scaleX * drawableWidth ) ; \n\tfloat redundantYSpace = viewHeight - ( scaleY * drawableHeight ) ; \n\tmatchViewWidth = viewWidth - redundantXSpace ; \n\tmatchViewHeight = viewHeight - redundantYSpace ; \n\tif $F931 ( isZoomed ) { \n\t\tmatrix . setScale ( scaleX , scaleY ) ; \n\t\tmatrix . postTranslate ( redundantXSpace / NUM00 , redundantYSpace / NUM00 ) ; \n\t\tnormalizedScale = NUM00 ; \n\t\t} \n\telse { \n\t\tprevMatrix . getValues ( m ) ; \n\t\tm [ Matrix . MSCALE_X ] = matchViewWidth / drawableWidth * normalizedScale ; \n\t\tm [ Matrix . MSCALE_Y ] = matchViewHeight / drawableHeight * normalizedScale ; \n\t\t$F5797 ( transX , m , Matrix ) float transY = m [ Matrix . MTRANS_Y ] ; \n\t\tfloat prevActualWidth = prevMatchViewWidth * normalizedScale ; \n\t\tfloat actualWidth = getImageWidth ( ) ; \n\t\ttranslateMatrixAfterRotate ( Matrix . MTRANS_X , transX , prevActualWidth , actualWidth , prevViewWidth , viewWidth , drawableWidth ) ; \n\t\tfloat prevActualHeight = prevMatchViewHeight * normalizedScale ; \n\t\tfloat actualHeight = getImageHeight ( ) ; \n\t\ttranslateMatrixAfterRotate ( Matrix . MTRANS_Y , transY , prevActualHeight , actualHeight , prevViewHeight , viewHeight , drawableHeight ) ; \n\t\tmatrix . setValues ( m ) ; \n\t\t} \n\tfixTrans ( ) ; \n\tsetImageMatrix ( matrix ) ; \n\t} \n"}, {"code": "public synchronized void close $F72 { \n\tif ( isAlive ) { \n\t\tisAlive = _BOOL ; \n\t\t$F725 ( taskQueue ) interrupt ( ) ; \n\t\t} \n\t} \n"}, {"code": "public String removeAfter ( String original , String marker ) { \n\t$F12747 ( index , original , marker ) if ( index != - NUM00 ) $F35299 ( original , index ) return original ; \n\t} \n"}, {"code": "public Address __sub__ ( final Object rhs ) { \n\treturn new Address ( m_value . subtract ( getBigInteger ( rhs ) ) ) ; \n\t} \n"}, {"code": "public static TestConfiguration buildDefaultConfiguration ( String testSourcePath , File testFile , String checkerName , $F3803 options , boolean shouldEmitDebugInfo ) { \n\t$F11300 javaFiles = Arrays . asList ( testFile ) ; \n\t$F140158 ( processors , Arrays , checkerName ) return buildDefaultConfiguration ( testSourcePath , javaFiles , processors , options , shouldEmitDebugInfo ) ; \n\t} \n"}, {"code": "private static boolean eq ( Object o1 , Object o2 ) $F66007 ( o1 , o2 ) "}, {"code": "public void roll ( int field , int value ) { \n\tboolean increment = value >= NUM00 ; \n\tint count = increment ? value : - value ; \n\tfor ( $F119 ( i , count ) ) { \n\t\troll ( field , increment ) ; \n\t\t} \n\t} \n"}, {"code": "public String clusterResultsToString $F72 $F2495 ( m_clusteringResults ) "}, {"code": "private void generateGetModuleMethod ( NewBindingKey key , NewDependencyInfo dependencyInfo ) { \n\tTypeElement scope = scopeCalculator . calculate ( key ) ; \n\tgenerateGetModuleMethod ( scope , dependencyInfo ) ; \n\t} \n"}, {"code": "$F146169 ( summary , start , allDay , end , location , description , attendees , intent , Intent , startMilliseconds , _BOOL , endMilliseconds , rawLaunchIntent , Log , TAG , launchIntent ) "}, {"code": "private $F806 separatorAndEnclosuresToArray $F72 { \n\t$F6542 ( parts , m_Enclosures ) $F51228 ( result , parts ) result [ NUM00 ] = m_FieldSeparator ; \n\tint index = NUM00 ; \n\tfor ( String e : parts ) { \n\t\tif ( $F20 ( e ) || $F1276 ( e ) ) $F825 result [ index ++ ] = e ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "private static void ReleaseStringChars $F61479 ( env , objJREF , bufAddress ) { \n\t$F4274 ( traceJNI , VM ) $F4275 ( RuntimeEntrypoints ) try { \n\t\tsysCall . sysFree ( bufAddress ) ; \n\t\t} \n\t$F61482 ( traceJNI , unexpected , System , env ) } \n"}, {"code": "private BusinessObjectDataNotificationRegistrationEntity createBusinessObjectDataNotificationEntity ( NamespaceEntity namespaceEntity , NotificationEventTypeEntity notificationEventTypeEntity , BusinessObjectDefinitionEntity businessObjectDefinitionEntity , FileTypeEntity fileTypeEntity , StorageEntity storageEntity , BusinessObjectDataStatusEntity newBusinessObjectDataStatusEntity , BusinessObjectDataStatusEntity oldBusinessObjectDataStatusEntity , NotificationRegistrationKey key , BusinessObjectDataNotificationFilter businessObjectDataNotificationFilter , List < JobAction > jobActions , NotificationRegistrationStatusEntity notificationRegistrationStatusEntity ) { \n\tBusinessObjectDataNotificationRegistrationEntity businessObjectDataNotificationRegistrationEntity = new BusinessObjectDataNotificationRegistrationEntity $F72 ; \n\tbusinessObjectDataNotificationRegistrationEntity . setNamespace ( namespaceEntity ) ; \n\tbusinessObjectDataNotificationRegistrationEntity . setName ( key . getNotificationName ( ) ) ; \n\tbusinessObjectDataNotificationRegistrationEntity . setNotificationEventType ( notificationEventTypeEntity ) ; \n\tbusinessObjectDataNotificationRegistrationEntity . setBusinessObjectDefinition ( businessObjectDefinitionEntity ) ; \n\tif ( StringUtils . isNotBlank ( businessObjectDataNotificationFilter . getBusinessObjectFormatUsage ( ) ) ) { \n\t\tbusinessObjectDataNotificationRegistrationEntity . setUsage ( businessObjectDataNotificationFilter . getBusinessObjectFormatUsage ( ) ) ; \n\t\t} \n\tbusinessObjectDataNotificationRegistrationEntity . setFileType ( fileTypeEntity ) ; \n\tbusinessObjectDataNotificationRegistrationEntity . setBusinessObjectFormatVersion ( businessObjectDataNotificationFilter . getBusinessObjectFormatVersion ( ) ) ; \n\tbusinessObjectDataNotificationRegistrationEntity . setStorage ( storageEntity ) ; \n\tbusinessObjectDataNotificationRegistrationEntity . setNewBusinessObjectDataStatus ( newBusinessObjectDataStatusEntity ) ; \n\tbusinessObjectDataNotificationRegistrationEntity . setOldBusinessObjectDataStatus ( oldBusinessObjectDataStatusEntity ) ; \n\tbusinessObjectDataNotificationRegistrationEntity . setNotificationRegistrationStatus ( notificationRegistrationStatusEntity ) ; \n\tList < NotificationActionEntity > $F204 ( notificationActionEntities ) ; \n\tbusinessObjectDataNotificationRegistrationEntity . setNotificationActions ( notificationActionEntities ) ; \n\tfor ( JobAction jobAction : jobActions ) { \n\t\tJobDefinitionEntity jobDefinitionEntity = jobDefinitionDaoHelper . getJobDefinitionEntity ( jobAction . getNamespace ( ) , jobAction . getJobName ( ) ) ; \n\t\tNotificationJobActionEntity notificationJobActionEntity = new NotificationJobActionEntity $F72 ; \n\t\tnotificationActionEntities . add ( notificationJobActionEntity ) ; \n\t\tnotificationJobActionEntity . setJobDefinition ( jobDefinitionEntity ) ; \n\t\tnotificationJobActionEntity . setCorrelationData ( jobAction . getCorrelationData ( ) ) ; \n\t\tnotificationJobActionEntity . setNotificationRegistration ( businessObjectDataNotificationRegistrationEntity ) ; \n\t\t} \n\treturn businessObjectDataNotificationRegistrationEntity ; \n\t} \n"}, {"code": "void bind ( String jndiUrl , Hashtable $F5162 attributes , RMIServer rmiServer , boolean rebind ) throws NamingException , MalformedURLException { \n\tInitialContext ctx = new InitialContext ( attributes ) ; \n\tif ( rebind ) ctx . rebind ( jndiUrl , rmiServer ) ; \n\telse ctx . bind ( jndiUrl , rmiServer ) ; \n\t$F59 ( ctx ) } \n"}, {"code": "public String toString $F72 { \n\tif $F154085 ( info , algId , signature ) $F1278 $F83 ( sb ) $F84 ( sb ) sb . append ( $F5528 ( info ) ) ; \n\t$F38468 ( sb , algId ) HexDumpEncoder encoder = new HexDumpEncoder $F72 ; \n\tsb . append ( NUM00 + encoder . encodeBuffer ( signature ) ) ; \n\t$F84 ( sb ) $F92 ( sb ) } \n"}, {"code": "public void testObsoleteDstZoneName $F72 throws Exception { \n\t$F261 ( format , Locale ) Date normal = format . parse ( NUM00 ) ; \n\tDate dst = format . parse ( NUM00 ) ; \n\tassertEquals ( $F264 , $F265 ( normal , dst ) ) ; \n\t} \n"}, {"code": "public final void XprintLatin1NoLf ( String string ) throws IOException { \n\t$F2329 ( _source ) $F23170 ( string ) $F96 writeBuffer = _writeBuffer ; \n\tint writeLength = _writeLength ; \n\t$F115 ( length , string ) int offset = NUM00 ; \n\tint charsLength = CHARS_LENGTH ; \n\t$F1469 chars = _chars ; \n\twhile ( length > NUM00 ) { \n\t\tint sublen = Math . min ( charsLength , writeBuffer . length - writeLength ) ; \n\t\tif ( sublen <= NUM00 ) { \n\t\t\t$F71896 ( _source , writeBuffer , writeLength , _BOOL ) _position += writeLength ; \n\t\t\t_isFlushRequired = _BOOL ; \n\t\t\twriteLength = NUM00 ; \n\t\t\tsublen = Math . min ( charsLength , writeBuffer . length - writeLength ) ; \n\t\t\t} \n\t\t$F106734 ( sublen , Math , length ) string . getChars ( offset , sublen , chars , NUM00 ) ; \n\t\tfor ( $F119 ( i , sublen ) ) { \n\t\t\tbyte value = ( byte ) chars [ i ] ; \n\t\t\tif $F37111 ( value ) { \n\t\t\t\tlength = NUM00 ; \n\t\t\t\t$F597 } \n\t\t\twriteBuffer [ writeLength ++ ] = value ; \n\t\t\t} \n\t\toffset += sublen ; \n\t\tlength -= sublen ; \n\t\t} \n\t_writeLength = writeLength ; \n\t} \n"}, {"code": "private int calculateStrokeWeight $F72 { \n\tint strokeWeight = ( int ) ( getStrokeWidth ( ) * NUM00 ) ; \n\t$F55609 ( LOGGER , strokeWidth ) return strokeWeight ; \n\t} \n"}, {"code": "private static List $F247778 flattenResults ( List < List $F247778 > allResults ) { \n\tList $F247778 results = new ArrayList $F247778 $F72 ; \n\tresults . addAll ( allResults . remove ( NUM00 ) ) ; \n\tfor ( List $F247778 relResults : allResults ) { \n\t\tList $F247778 newResults = new ArrayList $F247778 $F72 ; \n\t\tfor ( MatchResult curResult : results ) { \n\t\t\tfor ( MatchResult relResult : relResults ) { \n\t\t\t\tMatchResult newResult = curResult . copy ( ) ; \n\t\t\t\tnewResult . addAssignment ( relResult ) ; \n\t\t\t\tnewResults . add ( newResult ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tresults = newResults ; \n\t\t} \n\treturn results ; \n\t} \n"}, {"code": "$F1 public void visit ( Mapping m , int line , int col , int nextLine , int nextCol ) throws IOException { \n\tif ( previousLine != line ) { \n\t\tpreviousColumn = NUM00 ; \n\t\t} \n\tif ( line != nextLine || col != nextCol ) { \n\t\tif ( line < maxLine ) { \n\t\t\tif ( previousLine == line ) $F86 ( out ) writeEntry ( m , col ) ; \n\t\t\tpreviousLine = line ; \n\t\t\tpreviousColumn = col ; \n\t\t\t} \n\t\telse { \n\t\t\tPreconditions . checkState ( m == null ) ; \n\t\t\t} \n\t\t} \n\tfor ( int i = line ; \n\ti <= nextLine && i < maxLine ; \n\ti ++ ) { \n\t\t$F15290 ( i , nextLine ) closeLine ( _BOOL ) ; \n\t\topenLine ( _BOOL ) ; \n\t\t} \n\t} \n"}, {"code": "public boolean onClick ( int position ) { \n\tif ( mMode == MODE_MULTIPLE_SELECT ) { \n\t\tif $F105 ( mSelectedItems , position ) { \n\t\t\tmSelectedItems . remove ( position ) ; \n\t\t\tif $F2979 ( mSelectedItems ) { \n\t\t\t\tsetMode ( MODE_SINGLE_SELECT ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse $F207 ( mSelectedItems , position ) notifySelectionChanged ( position ) ; \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void addSessionEventURL ( String url , SessionID sid ) { \n\tSet < SessionID > sids = sessionEventURLs . get ( url ) ; \n\tif ( sids == null ) { \n\t\tsids = Collections . newSetFromMap ( new ConcurrentHashMap < SessionID , Boolean > $F72 ) ; \n\t\tSet < SessionID > previousValue = sessionEventURLs . putIfAbsent ( url , sids ) ; \n\t\t$F57733 ( previousValue , sids ) } \n\tif $F9793 ( sids , sid ) $F5795 ( notifyPersistenceManager ) } \n"}, {"code": "abstract public long rangeCount $F72 ; \n"}, {"code": "public final void addInstWithUnknown ( Instances source , int attIndex ) throws Exception { \n\t$F1986 probs ; \n\tdouble weight , newWeight ; \n\tint classIndex ; \n\tInstance instance ; \n\tint j ; \n\t$F14238 ( probs , m_perBag ) for ( $F6929 ( j , m_perBag ) ) { \n\t\tif ( Utils . eq ( totaL , NUM00 ) ) { \n\t\t\tprobs [ j ] = NUM00 / probs . length ; \n\t\t\t} \n\t\telse { \n\t\t\tprobs [ j ] = m_perBag [ j ] / totaL ; \n\t\t\t} \n\t\t} \n\tEnumeration $F90868 enu = source . enumerateInstances ( ) ; \n\twhile $F1444 ( enu ) { \n\t\t$F1445 ( instance , enu ) if $F350681 ( instance , attIndex ) { \n\t\t\tclassIndex = $F86158 ( instance ) ; \n\t\t\t$F54171 ( weight , instance ) $F183936 ( m_perClass , classIndex , weight ) totaL = totaL + weight ; \n\t\t\tfor ( $F6929 ( j , m_perBag ) ) { \n\t\t\t\tnewWeight = probs [ j ] * weight ; \n\t\t\t\tm_perClassPerBag [ j ] [ classIndex ] = m_perClassPerBag [ j ] [ classIndex ] + newWeight ; \n\t\t\t\t$F183936 ( m_perBag , j , newWeight ) } \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F1 public void onItemClick ( AdapterView $F1011 parent , View view , int position , long id ) { \n\tsetSelection ( position ) ; \n\t} \n"}, {"code": "public void traverseFragment ( Node pos ) throws $F2253 { \n\tNode top = pos ; \n\twhile ( null != pos ) { \n\t\tstartNode ( pos ) ; \n\t\t$F15376 ( nextNode , pos ) while ( null == nextNode ) { \n\t\t\tendNode ( pos ) ; \n\t\t\tif $F1238 ( top , pos ) $F597 $F5901 ( nextNode , pos ) if ( null == nextNode ) { \n\t\t\t\t$F49512 ( pos ) ; \n\t\t\t\tif ( ( null == pos ) || $F1238 ( top , pos ) ) { \n\t\t\t\t\tif ( null != pos ) endNode ( pos ) ; \n\t\t\t\t\tnextNode = null ; \n\t\t\t\t\t$F597 } \n\t\t\t\t} \n\t\t\t} \n\t\tpos = nextNode ; \n\t\t} \n\t} \n"}, {"code": "public void updateProcessorDuration ( Duration duration ) { \n\tprocessor_duration_ = Optional . of ( duration ) ; \n\t} \n"}, {"code": "static Object invokeOrDie $F78752 ( method , object , params ) { \n\ttry { \n\t\t$F89561 ( method , object , params ) } \n\tcatch ( IllegalAccessException e ) { \n\t\tthrow new RuntimeException ( NUM00 + NUM00 , e ) ; \n\t\t} \n\tcatch ( InvocationTargetException e ) { \n\t\tfinal Throwable cause = e . getCause ( ) ; \n\t\tif ( cause instanceof RuntimeException ) $F220831 ( cause ) else if ( cause instanceof Error ) { \n\t\t\t$F106249 ( cause ) } \n\t\telse $F7077 ( cause ) } \n\t} \n"}, {"code": "public void startElement $F42838 ( uri , localName , qName , atts ) throws SAXException { \n\telementLevel ++ ; \n\tnsSupport . pushContext ( ) ; \n\tif ( forceDTD && ! hasOutputDTD ) startDTD ( localName == null ? qName : localName , NUM00 , NUM00 ) ; \n\twrite ( NUM00 ) ; \n\twriteName ( uri , localName , qName , _BOOL ) ; \n\twriteAttributes ( atts ) ; \n\tif ( elementLevel == NUM00 ) $F5795 ( forceNSDecls ) writeNSDecls ( ) ; \n\twrite ( NUM00 ) ; \n\tif ( htmlMode && $F40270 ( qName ) ) { \n\t\tcdataElement = _BOOL ; \n\t\t} \n\tsuper . startElement ( uri , localName , qName , atts ) ; \n\t} \n"}, {"code": "void initProgram $F72 { \n\tglUseProgram ( this . program ) ; \n\tviewMatrixUniform = glGetUniformLocation ( this . program , NUM00 ) ; \n\tprojMatrixUniform = glGetUniformLocation ( this . program , NUM00 ) ; \n\tviewportSizeUniform = glGetUniformLocation ( this . program , NUM00 ) ; \n\tglUseProgram ( NUM00 ) ; \n\t} \n"}, {"code": "public static $F806 sortCopy $F4374 ( objects ) { \n\tint len = objects . length ; \n\t$F12914 ( copy , len ) $F135 ( System , objects , copy , len ) sort ( copy ) ; \n\treturn copy ; \n\t} \n"}, {"code": "public $F92426 iterator $F72 $F16048 ( list ) "}, {"code": "private static boolean accepts ( String accept_header , String to_accept ) { \n\t$F6542 ( acceptValues , accept_header ) Arrays . sort ( acceptValues ) ; \n\treturn Arrays . binarySearch ( acceptValues , to_accept ) > - NUM00 || Arrays . binarySearch ( acceptValues , $F2897 ( to_accept ) ) > - NUM00 || Arrays . binarySearch ( acceptValues , NUM00 ) > - NUM00 ; \n\t} \n"}, {"code": "public $F806 tokenize ( String rawString ) { \n\t$F11973 ( result ) $F14497 ( tk , rawString , m_Seperator ) while $F14498 ( tk ) { \n\t\tresult . addElement ( tk . nextToken ( ) ) ; \n\t\t} \n\t$F5442 ( newStrings , result ) for ( $F2277 ( i , result ) ) { \n\t\tnewStrings [ i ] = result . elementAt ( i ) ; \n\t\t} \n\treturn newStrings ; \n\t} \n"}, {"code": "public synchronized void returnLogCursor ( LogCursor logCursor ) { \n\tlogCursor . setLoaned ( _BOOL ) ; \n\t} \n"}, {"code": "void unassignPolicies ( String serviceName , Set policyDNs , boolean toVerify ) throws $F52710 { \n\tif $F10122 ( policyDNs ) $F932 AMTemplate template = getTemplate ( serviceName , AMTemplate . POLICY_TEMPLATE ) ; \n\tunassignPolicies ( template , policyDNs , toVerify ) ; \n\t} \n"}, {"code": "public boolean releaseLock ( String lockName ) { \n\tif $F4251 ( lockName ) $F53787 ( s_logger , _BOOL ) try { \n\t\tInterProcessLock lock = s_acquiredLocks . get ( lockName ) ; \n\t\tif ( lock != null ) { \n\t\t\ts_acquiredLocks . remove ( lockName ) ; \n\t\t\t$F33833 ( lock ) $F556 ( s_logger , lockName ) } \n\t\telse { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\treturn _BOOL ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F59427 ( s_logger , lockName , e ) return _BOOL ; \n\t\t} \n\t} \n"}, {"code": "@ Parameterized . Parameters ( $F72755 ) public static Collection < PaymentChannelClient . VersionSelector > data $F72 { \n\treturn Arrays . asList ( PaymentChannelClient . VersionSelector . VERSION_1 , PaymentChannelClient . VersionSelector . VERSION_2_ALLOW_1 ) ; \n\t} \n"}, {"code": "private View findInterceptingView ( float pos , View v ) { \n\tfor ( KeyButtonView otherView : mButtonViews ) { \n\t\t$F83608 ( otherView , v ) if ( ArrayUtils . contains ( SMALL_BUTTON_IDS , otherView . getId ( ) ) ) $F1448 otherView . getLocationOnScreen ( sLocation ) ; \n\t\tfloat otherPos = sLocation [ mVertical ? NUM00 : NUM00 ] ; \n\t\tfloat otherDimension = mVertical ? v . getHeight ( ) : v . getWidth ( ) ; \n\t\tif ( pos > ( otherPos + otherDimension / NUM00 ) && pos < ( otherPos + otherDimension ) ) { \n\t\t\treturn otherView ; \n\t\t\t} \n\t\t} \n\t$F1274 } \n"}, {"code": "public void detachDiskAsync ( final String vmId , VmDiskOperation vmDiskOperation , $F67201 ( responseCallback ) ) throws IOException { \n\t$F67207 ( path , String , getBasePath , vmId ) createObjectAsync ( path , serializeObjectAsJson ( vmDiskOperation ) , responseCallback ) ; \n\t} \n"}, {"code": "public static void main $F4374 ( args ) { \n\t$F4375 ( Log ) try { \n\t\tint num_user = NUM00 ; \n\t\t$F4377 ( calendar , Calendar ) boolean trace_flag = _BOOL ; \n\t\tCloudSim . init ( num_user , calendar , trace_flag ) ; \n\t\t$F15317 ( datacenter0 , createDatacenter ) $F15317 ( datacenter1 , createDatacenter ) DatacenterBroker broker1 = createBroker ( NUM00 ) ; \n\t\t$F4379 ( brokerId1 , broker1 ) DatacenterBroker broker2 = createBroker ( NUM00 ) ; \n\t\t$F4379 ( brokerId2 , broker2 ) $F4385 ( vmlist1 ) $F4385 ( vmlist2 ) int vmid = NUM00 ; \n\t\tint mips = NUM00 ; \n\t\tlong size = NUM00 ; \n\t\tint ram = NUM00 ; \n\t\tlong bw = NUM00 ; \n\t\tint pesNumber = NUM00 ; \n\t\tString vmm = NUM00 ; \n\t\t$F4394 ( vm1 , vmid , brokerId1 , mips , pesNumber , ram , bw , size , vmm ) $F4394 ( vm2 , vmid , brokerId2 , mips , pesNumber , ram , bw , size , vmm ) vmlist1 . add ( vm1 ) ; \n\t\tvmlist2 . add ( vm2 ) ; \n\t\tbroker1 . submitVmList ( vmlist1 ) ; \n\t\tbroker2 . submitVmList ( vmlist2 ) ; \n\t\t$F4400 ( cloudletList1 ) $F4400 ( cloudletList2 ) int id = NUM00 ; \n\t\tlong length = NUM00 ; \n\t\tlong fileSize = NUM00 ; \n\t\tlong outputSize = NUM00 ; \n\t\t$F4405 ( utilizationModel ) $F4410 ( cloudlet1 , id , length , pesNumber , fileSize , outputSize , utilizationModel ) cloudlet1 . setUserId ( brokerId1 ) ; \n\t\t$F4410 ( cloudlet2 , id , length , pesNumber , fileSize , outputSize , utilizationModel ) cloudlet2 . setUserId ( brokerId2 ) ; \n\t\tcloudletList1 . add ( cloudlet1 ) ; \n\t\tcloudletList2 . add ( cloudlet2 ) ; \n\t\tbroker1 . submitCloudletList ( cloudletList1 ) ; \n\t\tbroker2 . submitCloudletList ( cloudletList2 ) ; \n\t\t$F4417 ( CloudSim ) $F4420 ( newList1 , broker1 ) $F4420 ( newList2 , broker2 ) $F4421 ( CloudSim ) $F147974 ( Log , brokerId1 ) printCloudletList ( newList1 ) ; \n\t\t$F147974 ( Log , brokerId2 ) printCloudletList ( newList2 ) ; \n\t\t$F4375 ( Log ) } \n\t$F4424 ( e , Log ) } \n"}, {"code": "public static boolean isFPZero ( $F1113 final String text ) { \n\tfor ( $F1088 ( i , text ) ) { \n\t\t$F1090 ( c , text , i ) if ( Character . isDigit ( c ) && c != NUM00 ) return _BOOL ; \n\t\tfinal char d = Character . toUpperCase ( c ) ; \n\t\tif $F37111 ( d ) $F597 } \n\treturn _BOOL ; \n\t} \n"}, {"code": "public ConcurrentHashMapPro $F15182 ( m ) $F334729 ( this , Math , m , DEFAULT_LOAD_FACTOR , DEFAULT_INITIAL_CAPACITY , DEFAULT_CONCURRENCY_LEVEL , putAll ) "}, {"code": "static $F22664 void generate ( $F215316 list , UniversalHash $F22664 hash , int level , int seed , ByteArrayOutputStream out ) { \n\t$F115 ( size , list ) if ( size <= NUM00 ) { \n\t\tout . write ( size ) ; \n\t\t$F665 } \n\tif ( level > NUM00 ) { \n\t\t$F50706 } \n\tif ( size <= MAX_SIZE ) { \n\t\tint maxOffset = MAX_OFFSETS [ size ] ; \n\t\t$F4120 ( hashes , size ) for ( $F119 ( i , size ) ) { \n\t\t\thashes [ i ] = hash . hashCode ( list . get ( i ) , level , seed ) ; \n\t\t\t} \n\t\tint testSize = size ; \n\t\tif ( size >= SPEEDUP ) { \n\t\t\ttestSize ++ ; \n\t\t\tmaxOffset /= testSize ; \n\t\t\t} \n\t\tnextOffset : for ( $F119 ( offset , maxOffset ) ) { \n\t\t\tint bits = NUM00 ; \n\t\t\tfor ( $F119 ( i , size ) ) { \n\t\t\t\tint x = hashes [ i ] ; \n\t\t\t\tint h = hash ( x , level , offset , testSize ) ; \n\t\t\t\tif ( ( bits & ( NUM00 < < h ) ) != NUM00 ) { \n\t\t\t\t\tcontinue nextOffset ; \n\t\t\t\t\t} \n\t\t\t\tbits |= NUM00 < < h ; \n\t\t\t\t} \n\t\t\tif ( size >= SPEEDUP ) { \n\t\t\t\tint pos = Integer . numberOfTrailingZeros ( ~ bits ) ; \n\t\t\t\twriteSizeOffset ( out , size , offset * ( size + NUM00 ) + pos ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\twriteSizeOffset ( out , size , offset ) ; \n\t\t\t\t} \n\t\t\t$F665 } \n\t\t} \n\tint split ; \n\tif ( size > NUM00 * DIVIDE ) { \n\t\tsplit = size / ( NUM00 * DIVIDE ) ; \n\t\t} \n\telse { \n\t\tsplit = ( size - NUM00 ) / DIVIDE ; \n\t\t} \n\t$F34970 ( split , Math ) boolean isRoot = level == NUM00 ; \n\tArrayList < $F215316 > lists ; \n\tdo { \n\t\tlists = new ArrayList < $F215316 > ( split ) ; \n\t\tfor ( $F119 ( i , split ) ) { \n\t\t\tlists . add ( new $F215316 ( size / split ) ) ; \n\t\t\t} \n\t\tfor ( $F119 ( i , size ) ) { \n\t\t\tK x = list . get ( i ) ; \n\t\t\t$F215316 l = lists . get ( hash ( x , hash , level , seed , NUM00 , split ) ) ; \n\t\t\tl . add ( x ) ; \n\t\t\tif ( isRoot && split >= SPLIT_MANY && l . size ( ) > NUM00 * DIVIDE * NUM00 ) { \n\t\t\t\tlevel ++ ; \n\t\t\t\tlists = null ; \n\t\t\t\t$F597 } \n\t\t\t} \n\t\t} \n\twhile ( lists == null ) ; \n\tif ( split >= SPLIT_MANY ) $F4050 ( out , SPLIT_MANY ) writeVarInt ( out , split ) ; \n\tboolean multiThreaded = $F173700 ( isRoot , list ) ; \n\t$F725 ( list ) $F51919 ( list ) if ( multiThreaded ) { \n\t\tgenerateMultiThreaded ( lists , hash , level , seed , out ) ; \n\t\t} \n\telse { \n\t\tfor ( $F215316 s2 : lists ) { \n\t\t\tgenerate ( s2 , hash , level + NUM00 , seed , out ) ; \n\t\t\t} \n\t\t} \n\tif ( isRoot && split >= SPLIT_MANY ) $F4050 ( out , level ) } \n"}, {"code": "private void initialiseCommands $F72 { \n\treward = new AchievementRewards ( this ) ; \n\tachievementDisplay = new AchievementDisplay ( this ) ; \n\tgiveCommand = new GiveCommand ( this ) ; \n\tbookCommand = new BookCommand ( this ) ; \n\ttopCommand = new TopCommand ( this ) ; \n\tstatsCommand = new StatsCommand ( this ) ; \n\tinfoCommand = new InfoCommand ( this ) ; \n\tlistCommand = new ListCommand ( this ) ; \n\thelpCommand = new HelpCommand ( this ) ; \n\tcheckCommand = new CheckCommand ( this ) ; \n\tdeleteCommand = new DeleteCommand ( this ) ; \n\t} \n"}, {"code": "public CreateCustomMetric ( Monitoring monitoringService , String projectResource ) { \n\tthis . monitoringService = monitoringService ; \n\tthis . projectResource = projectResource ; \n\tthis . metricType = CUSTOM_METRIC_DOMAIN + NUM00 + DEFAULT_METRIC_TYPE ; \n\tthis . metricName = projectResource + NUM00 + metricType ; \n\t} \n"}, {"code": "$F25527 ( REDUNDANT_OP_COMPACT_THRESHOLD , redundantOpCount , lruEntries ) "}, {"code": "public static boolean deleteFilesInADirectory ( String directoryPath ) { \n\tif $F21545 ( directoryPath ) { \n\t\treturn _BOOL ; \n\t\t} \n\tboolean isSuccessfulDelete = _BOOL ; \n\t$F11300 files = getListOfFilesInADirectory ( directoryPath ) ; \n\t$F1933 ( files , _BOOL ) try { \n\t\tfor ( File file : files ) { \n\t\t\tboolean fileDeleteSuccess = $F142678 ( deleteFile , directoryPath , file ) ; \n\t\t\tif ( ! fileDeleteSuccess ) { \n\t\t\t\tisSuccessfulDelete = _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F246959 ( logger , e , System , StackTrace ) isSuccessfulDelete = _BOOL ; \n\t\t} \n\treturn isSuccessfulDelete ; \n\t} \n"}, {"code": "public AnnotationFS add ( AnnotationFS aOriginFs , AnnotationFS aTargetFs , JCas aJCas , int aStart , int aEnd , AnnotationFeature aFeature , Object aLabelValue ) throws BratAnnotationException { \n\tif ( crossMultipleSentence || isSameSentence ( aJCas , aOriginFs . getBegin ( ) , aTargetFs . getEnd ( ) ) ) { \n\t\treturn interalAddToCas ( aJCas , aStart , aEnd , aOriginFs , aTargetFs , aLabelValue , aFeature ) ; \n\t\t} \n\telse { \n\t\tthrow new ArcCrossedMultipleSentenceException $F580 ; \n\t\t} \n\t} \n"}, {"code": "public void testEqualsNull $F72 { \n\tString a = NUM00 ; \n\tint aScale = - NUM00 ; \n\t$F1918 ( aNumber , a , aScale ) assertFalse ( aNumber . equals ( null ) ) ; \n\t} \n"}, {"code": "private String readLine $F72 { \n\t$F280 ( sb ) while $F45853 ( buf ) { \n\t\tchar c = ( char ) buf . get ( ) ; \n\t\tif ( c == NUM00 ) { \n\t\t\tif $F45853 ( buf ) { \n\t\t\t\tchar n = ( char ) buf . get ( buf . position ( ) ) ; \n\t\t\t\tif ( n == NUM00 ) $F217730 ( buf ) } \n\t\t\t$F597 } \n\t\telse $F41314 ( c ) sb . append ( c ) ; \n\t\t} \n\t$F92 ( sb ) } \n"}, {"code": "protected void write ( DataOutputStream stream ) throws Exception $F33583 ( stream , value ) "}, {"code": "$F1 public int showOpenDialog ( Component parent ) { \n\tFile selFile ; \n\tint result ; \n\tm_DialogType = OPEN_DIALOG ; \n\tinitGUI ( OPEN_DIALOG ) ; \n\tresult = super . showOpenDialog ( parent ) ; \n\tm_DialogType = UNHANDLED_DIALOG ; \n\tremovePropertyChangeListener ( m_Listener ) ; \n\tselFile = getSelectedFile ( ) ; \n\tif ( ( result == APPROVE_OPTION ) && ( getFileMustExist ( ) ) && ( selFile == null ) ) { \n\t\tresult = showOpenDialog ( parent ) ; \n\t\t} \n\telse if ( ( result == APPROVE_OPTION ) && ( getFileMustExist ( ) ) && ( selFile != null ) && $F7110 ( selFile ) && $F1906 ( selFile ) ) { \n\t\tint retVal = JOptionPane . showConfirmDialog ( parent , NUM00 + selFile + NUM00 ) ; \n\t\tif ( retVal == JOptionPane . OK_OPTION ) result = showOpenDialog ( parent ) ; \n\t\telse result = CANCEL_OPTION ; \n\t\t} \n\tif ( result == APPROVE_OPTION ) { \n\t\tif ( getFileFilter ( ) instanceof ExtensionFileFilter ) m_LastFilter = ( ExtensionFileFilter ) getFileFilter ( ) ; \n\t\telse m_LastFilter = null ; \n\t\tif $F89491 ( getSelectedFile ) configureCurrentHandlerHook ( OPEN_DIALOG ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public boolean isNearlyEqualTo ( DoubleVector v , double tolerance ) { \n\treturn $F46899 ( Math , v , x , tolerance ) && $F46899 ( Math , v , y , tolerance ) && $F46899 ( Math , v , z , tolerance ) ; \n\t} \n"}, {"code": "private float colorToAngle ( int color ) { \n\t$F12457 ( colors ) Color . colorToHSV ( color , colors ) ; \n\treturn ( float ) Math . toRadians ( - colors [ NUM00 ] ) ; \n\t} \n"}, {"code": "void createVerticalSnapAnimation ( boolean visible ) { \n\tfloat translationY = visible ? NUM00 : mTotalHeight ; \n\tfloat yDifference = Math . abs ( translationY - getTranslationY ( ) ) / mTotalHeight ; \n\tlong duration = $F109225 ( MS_ANIMATION_DURATION , yDifference ) ; \n\tcreateAnimation ( NUM00 , NUM00 , translationY , duration ) ; \n\t} \n"}, {"code": "$F1 public int update $F107623 ( input , inputOffset , inputLen , output , outputOffset ) throws ShortBufferException { \n\treturn cipher . update ( input , inputOffset , inputLen , output , outputOffset ) ; \n\t} \n"}, {"code": "private String validateInputs $F72 { \n\tif ( jarRadio . getSelection ( ) ) { \n\t\tFile f = new File ( jarPath . getText ( ) ) ; \n\t\tif $F1906 ( f ) $F2455 if $F70404 ( f ) $F2455 } \n\telse { \n\t\tFile f = new File ( dirPath . getText ( ) ) ; \n\t\tif $F1906 ( f ) $F2455 if $F70404 ( f ) $F2455 } \n\t$F1274 } \n"}, {"code": "public static double parseDoubleString ( String st , TExecutionContext context ) { \n\tdouble ret = NUM00 ; \n\t$F1150 ( m , DOUBLE_PATTERN , st ) if $F54321 ( m ) { \n\t\tString truncated = st . substring ( NUM00 , m . end ( ) ) ; \n\t\tif $F2137 ( truncated , st ) { \n\t\t\tcontext . reportTruncate ( st , truncated ) ; \n\t\t\t} \n\t\ttry $F97478 ( ret , Double , truncated ) catch ( NumberFormatException e ) { \n\t\t\tcontext . reportBadValue ( e . getMessage ( ) ) ; \n\t\t\t} \n\t\t} \n\telse context . reportBadValue ( st ) ; \n\treturn ret ; \n\t} \n"}, {"code": "public ClassPath ( DexFile ... classPath ) throws IOException { \n\tthis ( Lists . newArrayList ( classPath ) , NUM00 ) ; \n\t} \n"}, {"code": "public double greatCircleAzimuth ( Location location ) { \n\t$F89853 ( location , Logger ) $F46307 ( lat1 , Math , this ) $F89861 ( lon1 , Math , this ) $F46307 ( lat2 , Math , location ) $F89861 ( lon2 , Math , location ) if ( lat1 == lat2 && lon1 == lon2 ) $F1083 if ( lon1 == lon2 ) { \n\t\treturn lat1 > lat2 ? NUM00 : NUM00 ; \n\t\t} \n\tdouble y = Math . cos ( lat2 ) * Math . sin ( lon2 - lon1 ) ; \n\tdouble x = Math . cos ( lat1 ) * Math . sin ( lat2 ) - Math . sin ( lat1 ) * Math . cos ( lat2 ) * Math . cos ( lon2 - lon1 ) ; \n\t$F3567 ( azimuthRadians , Math , y , x ) return Double . isNaN ( azimuthRadians ) ? NUM00 : Math . toDegrees ( azimuthRadians ) ; \n\t} \n"}, {"code": "private $F8748 defineIrrelevant ( Random random ) { \n\t$F8748 irr = new boolean [ getNumAttributes ( ) ] ; \n\tfor ( $F1139 ( i , irr ) ) { \n\t\tirr [ i ] = _BOOL ; \n\t\t} \n\tint numIrr = NUM00 ; \n\tfor ( int i = NUM00 ; \n\t( numIrr < getNumIrrelevant ( ) ) && ( i < getNumAttributes ( ) * NUM00 ) ; \n\ti ++ ) { \n\t\tint maybeNext = ( int ) ( random . nextDouble ( ) * irr . length ) ; \n\t\tif ( irr [ maybeNext ] == _BOOL ) { \n\t\t\tirr [ maybeNext ] = _BOOL ; \n\t\t\tnumIrr ++ ; \n\t\t\t} \n\t\t} \n\treturn irr ; \n\t} \n"}, {"code": "public void addDropItem ( final String name , final double probability , final int amount ) { \n\tdropsItems . add ( new DropItem ( name , probability , amount ) ) ; \n\t} \n"}, {"code": "protected void unparsedEntDecl $F19845 ( name , pubid , sysid , notation ) throws SAXException { \n\tmHandDtd . unparsedEntityDecl ( name , pubid , sysid , notation ) ; \n\t} \n"}, {"code": "public $F8110 elements $F72 { \n\tsynchronized ( this ) { \n\t\treturn Collections . enumeration ( permsMap . values ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "private static String formatList $F142640 ( stringList , listPattern , listCompositionPattern ) { \n\tif ( listPattern == null || listCompositionPattern == null ) { \n\t\t$F83 ( result ) for ( $F9808 ( i , stringList ) ) $F70285 ( i , result , stringList ) $F92 ( result ) } \n\tif $F3305 ( stringList ) { \n\t\tMessageFormat format = new MessageFormat ( listCompositionPattern ) ; \n\t\tstringList = composeList ( format , stringList ) ; \n\t\t} \n\t$F224767 ( args , stringList ) $F7057 ( System , stringList , args ) args [ NUM00 ] = $F59092 ( stringList ) ; \n\tMessageFormat format = new MessageFormat ( listPattern ) ; \n\t$F137119 ( format , args ) } \n"}, {"code": "public JsonArray add ( Object value ) $F18637 ( list , value , this ) "}, {"code": "public String comment $F72 throws ParseException { \n\t$F280 ( retval ) if ( lookAhead ( NUM00 ) != NUM00 ) $F1274 consume ( NUM00 ) ; \n\twhile ( _BOOL ) { \n\t\tchar next = getNextChar ( ) ; \n\t\tif ( next == NUM00 ) $F5153 else if ( next == NUM00 ) { \n\t\t\tthrow new ParseException ( this . buffer + NUM00 , this . ptr ) ; \n\t\t\t} \n\t\telse if ( next == NUM00 ) { \n\t\t\tretval . append ( next ) ; \n\t\t\tnext = getNextChar ( ) ; \n\t\t\tif ( next == NUM00 ) throw new ParseException ( this . buffer + NUM00 , this . ptr ) ; \n\t\t\tretval . append ( next ) ; \n\t\t\t} \n\t\telse $F288 ( retval , next ) } \n\t$F92 ( retval ) } \n"}, {"code": "public static boolean ignorableWhitespace ( String value ) { \n\tMatcher m ; \n\tm = whitespacePattern . matcher ( value ) ; \n\tif $F24133 ( m ) return _BOOL ; \n\telse return _BOOL ; \n\t} \n"}, {"code": "public DelphiWorkgroup ( File xmlFile ) throws IOException { \n\tif ( xmlFile == null ) $F825 else if $F1906 ( xmlFile ) $F144276 ( xmlFile ) parseFile ( xmlFile ) ; \n\t} \n"}, {"code": "public BufferedBlockCipher ( BlockCipher cipher ) { \n\tthis . cipher = cipher ; \n\tbuf = new byte [ cipher . getBlockSize ( ) ] ; \n\tbufOff = NUM00 ; \n\tString name = cipher . getAlgorithmName ( ) ; \n\t$F12710 ( idx , name ) pgpCFB = ( idx > NUM00 && name . startsWith ( NUM00 , idx ) ) ; \n\tif ( pgpCFB || cipher instanceof StreamCipher ) { \n\t\tpartialBlockOkay = _BOOL ; \n\t\t} \n\telse { \n\t\tpartialBlockOkay = ( idx > NUM00 && ( name . startsWith ( NUM00 , idx ) ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static int readInts ( final File f , final LongIndex a , final long offset , final long addend ) throws IOException { \n\treturn readInts ( f , NUM00 , $F5338 ( f ) / NUM00 , a , offset , addend ) ; \n\t} \n"}, {"code": "public void waitAllSitesDbStable $F72 { \n\tString prefix = NUM00 ; \n\tlog . info ( prefix ) ; \n\tDbJmxClient geoInstance = getJmxClient ( LOCALHOST ) ; \n\t$F28584 vdcIdIter = queryByType ( VirtualDataCenter . class , _BOOL ) ; \n\tfor ( URI vdcId : vdcIdIter ) { \n\t\t$F279664 ( log , vdcId ) VirtualDataCenter vdc = queryObject ( VirtualDataCenter . class , vdcId ) ; \n\t\tif ( ! shouldCheckDbStatus ( vdc ) ) { \n\t\t\t$F5197 ( log , vdcId ) $F598 } \n\t\tif ( vdc . getConnectionStatus ( ) != ConnectionStatus . DISCONNECTED ) { \n\t\t\tSite activeSite = drUtil . getActiveSite ( vdc . getShortId ( ) ) ; \n\t\t\twaitDbNodesStable ( geoInstance , vdc . getShortId ( ) , activeSite . getNodeCount ( ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void saveHierarchyState ( Bundle container ) { \n\tdispatchSaveInstanceState ( container ) ; \n\t} \n"}, {"code": "private static void pipe ( InputStream source , OutputStream dest ) throws IOException { \n\t$F12496 ( buf ) int read = NUM00 ; \n\twhile ( $F29984 ( read , source , buf ) >= NUM00 ) { \n\t\tif ( null != dest ) $F11584 ( dest , buf , read ) } \n\tif ( null != dest ) $F1206 ( dest ) } \n"}, {"code": "$F1 public void init ( FilterConfig config ) throws ServletException { \n\ttry { \n\t\texpiry = Math . min ( Math . max ( MIN_EXPIRY , Long . parseLong ( config . getInitParameter ( CACHE_CONTROL ) ) ) , MAX_EXPIRY ) ; \n\t\t} \n\tcatch ( NumberFormatException nfe ) { \n\t\tLOGGER . warn ( NUM00 + CACHE_CONTROL + NUM00 , nfe ) ; \n\t\texpiry = null ; \n\t\t} \n\t} \n"}, {"code": "$F1 public int hashCode $F72 { \n\tint code = NUM00 ; \n\t$F156574 ( name , code ) $F156574 ( applicationName , code ) $F156574 ( resourceNames , code ) $F156574 ( actionValues , code ) $F156574 ( advices , code ) $F156574 ( attributes , code ) return code ; \n\t} \n"}, {"code": "public static boolean substractTradingFee ( Player player , int price ) { \n\tBigDecimal fee = calculateFee ( player , price ) ; \n\treturn player . drop ( NUM00 , fee . intValue ( ) ) ; \n\t} \n"}, {"code": "public ComplexParameter ( MathExpression expression ) $F6988 ( this , expression ) "}, {"code": "$F1 public $F14937 enumerateMeasures $F72 { \n\t$F75150 ( newVector ) $F6519 ( newVector ) $F1007 ( newVector ) } \n"}, {"code": "public SampleDriver $F72 { \n\thandlers = new ArrayList < SampleHandler > $F72 ; \n\thandlers . add ( new CertificateSampleHandler $F72 ) ; \n\thandlers . add ( new GroupSampleHandler $F72 ) ; \n\thandlers . add ( new SolutionUserSampleHandler $F72 ) ; \n\thandlers . add ( new UserSampleHandler $F72 ) ; \n\t} \n"}, {"code": "public $F2469 readLongArray ( final int items , final JBBPByteOrder byteOrder ) throws IOException { \n\tint pos = NUM00 ; \n\tif ( items < NUM00 ) { \n\t\t$F12300 ( buffer , INITIAL_ARRAY_BUFFER_SIZE ) while ( hasAvailableData ( ) ) { \n\t\t\tfinal long next = readLong ( byteOrder ) ; \n\t\t\tif ( buffer . length == pos ) { \n\t\t\t\tfinal $F2469 newbuffer = new long [ buffer . length < < NUM00 ] ; \n\t\t\t\t$F7057 ( System , buffer , newbuffer ) buffer = newbuffer ; \n\t\t\t\t} \n\t\t\tbuffer [ pos ++ ] = next ; \n\t\t\t} \n\t\tif ( buffer . length == pos ) { \n\t\t\treturn buffer ; \n\t\t\t} \n\t\tfinal $F2469 result = new long [ pos ] ; \n\t\t$F135 ( System , buffer , result , pos ) return result ; \n\t\t} \n\telse { \n\t\tfinal $F2469 buffer = new long [ items ] ; \n\t\tfor ( $F119 ( i , items ) ) $F202520 ( buffer , i , readLong , byteOrder ) return buffer ; \n\t\t} \n\t} \n"}, {"code": "private void logGraphicalBufferOccupancy ( float bufferOccupancy ) { \n\tString title = NUM00 ; \n\t$F43289 ( used , bufferOccupancy , WIDTH ) $F83 ( sb ) sb . append ( START_END_CHAR ) ; \n\t$F84 ( sb ) sb . append ( title ) ; \n\tfor ( int i = $F1285 ( title ) ; \n\ti < WIDTH ; \n\ti ++ ) $F86 ( sb ) sb . append ( START_END_CHAR ) ; \n\t$F17749 ( log , sb ) $F6932 ( sb ) sb . append ( START_END_CHAR ) ; \n\t$F103815 ( i , used , sb ) for ( int j = used ; \n\tj < WIDTH ; \n\tj ++ ) $F86 ( sb ) sb . append ( START_END_CHAR ) ; \n\t$F17749 ( log , sb ) $F6932 ( sb ) sb . append ( START_END_CHAR ) ; \n\t$F103815 ( i , WIDTH , sb ) sb . append ( START_END_CHAR ) ; \n\t$F17749 ( log , sb ) } \n"}, {"code": "public boolean isTerminated $F72 { \n\treturn threadPool . isTerminated ( ) ; \n\t} \n"}, {"code": "public boolean isMatch ( String domain , List < UserMappingAttribute > attributes , $F3803 groups ) { \n\treturn _domain . equalsIgnoreCase ( domain ) && attributesMatch ( attributes ) && groupsMatch ( groups ) ; \n\t} \n"}, {"code": "public static void writeSpatialGridTable ( SpatialGrid grid , String fileName ) { \n\t$F9472 ( log , fileName ) SpatialGridTableWriter sgTableWriter = new SpatialGridTableWriter $F72 ; \n\ttry { \n\t\tsgTableWriter . write ( grid , fileName ) ; \n\t\t$F973 ( log ) } \n\t$F12241 ( e ) } \n"}, {"code": "$F1431 public OutputSocket linkedOutputSocket ( String hintIdentifier ) { \n\tfinal OutputSocket outSocket = outputSocketFactory . create ( new IdentiferOverridingSocketHintDecorator ( this , hintIdentifier ) ) ; \n\tcontrolledOutputSockets . add ( outSocket ) ; \n\treturn outSocket ; \n\t} \n"}, {"code": "public void cancel $F72 { \n\tcancelled = _BOOL ; \n\tThread thread = this . thread ; \n\t$F36258 ( thread ) } \n"}, {"code": "void _setText $F97 ( text ) { \n\tthis . _text = text ; \n\tthis . _props = null ; \n\t} \n"}, {"code": "private String prepareURL $F72 { \n\tString str = NUM00 ; \n\tstr += NUM00 ; \n\tfor ( $F2277 ( i , symbolList ) ) { \n\t\tif ( i != NUM00 ) { \n\t\t\tstr += NUM00 ; \n\t\t\t} \n\t\tstr += symbolList . get ( i ) ; \n\t\t} \n\tstr += NUM00 ; \n\tfor ( String format : parameterList ) { \n\t\tstr += format ; \n\t\t} \n\tstr += NUM00 ; \n\treturn str ; \n\t} \n"}, {"code": "public void initialize $F72 { \n\tTextureState ts = new TextureState $F72 ; \n\tts . setEnabled ( _BOOL ) ; \n\tsetRenderState ( ts ) ; \n\tfor ( $F3836 ( i , toolList ) ) { \n\t\tToolState state = toolList . get ( i ) ; \n\t\taddTool ( state , _BOOL ) ; \n\t\t} \n\tzBufferState = new ZBufferState $F72 ; \n\tzBufferState . setFunction ( ZBufferState . TestFunction . LessThanOrEqualTo ) ; \n\tzBufferState . setEnabled ( _BOOL ) ; \n\tsetRenderState ( zBufferState ) ; \n\t} \n"}, {"code": "private static void init $F72 { \n\t$F12775 ( encoders ) $F16824 ( encoders ) $F16824 ( encoders ) } \n"}, {"code": "public static boolean checkImageSize ( final InputStream stream , final IConfiguration conf ) throws IOException { \n\t$F31067 ( bi , ImageIO , stream ) $F59 ( stream ) $F1933 ( bi , _BOOL ) if ( bi . getHeight ( ) > conf . getImgHeight ( ) || bi . getWidth ( ) > conf . getImgWidth ( ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "private static boolean compareArrayCase ( final String value , final int comparator , final $F131 array ) { \n\tfor ( $F1139 ( i , array ) ) { \n\t\tfinal Object obj = array [ i ] ; \n\t\tif ( obj instanceof String ) { \n\t\t\tif ( compareStringCase ( value , comparator , ( String ) obj ) ) { \n\t\t\t\treturn _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\telse if ( obj instanceof Number ) { \n\t\t\tif ( compareNumber ( value . trim ( ) , comparator , ( Number ) obj ) ) { \n\t\t\t\treturn _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\t$F24922 ( compareReflective , value , comparator , obj , _BOOL ) } \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public double valueAt ( double x ) { \n\treturn constant * Math . pow ( NUM00 - x * x , outsideExp ) ; \n\t} \n"}, {"code": "protected double generateWaitTime $F72 { \n\tif ( state == STATE_WALKING_ELSEWHERE ) { \n\t\t$F67935 ( location , latestBusStop , state , STATE_WAITING_FOR_BUS ) } \n\tif ( state == STATE_TRAVELLING_ON_BUS ) { \n\t\tstate = STATE_WAITING_FOR_BUS ; \n\t\t} \n\t$F1082 } \n"}, {"code": "$F1 public $F104855 findResources ( final String name ) throws IOException { \n\t$F1338 ( name ) $F188804 result = new $F188804 $F72 ; \n\tint n = NUM00 ; \n\twhile ( _BOOL ) { \n\t\tURLHandler handler = getHandler ( n ++ ) ; \n\t\t$F32472 ( handler ) handler . findResources ( name , result ) ; \n\t\t} \n\treturn Collections . enumeration ( result ) ; \n\t} \n"}, {"code": "protected void writeGraphicCtrlExt $F72 throws IOException { \n\t$F25097 ( out ) $F25097 ( out ) $F25097 ( out ) int transp , disp ; \n\tif ( transparent == null ) $F18712 ( transp , disp ) else $F18712 ( transp , disp ) if ( dispose >= NUM00 ) { \n\t\tdisp = dispose & NUM00 ; \n\t\t} \n\tdisp <<= NUM00 ; \n\tout . write ( NUM00 | disp | NUM00 | transp ) ; \n\twriteShort ( delay ) ; \n\tout . write ( transIndex ) ; \n\t$F25097 ( out ) } \n"}, {"code": "public static void writeElementList ( XMLOutput xmlOutput , String tagName , $F46406 listValues ) throws IOException { \n\twriteElementList ( xmlOutput , tagName , listValues . iterator ( ) ) ; \n\t} \n"}, {"code": "public static Date stringToDate ( String dateAsString ) { \n\ttry { \n\t\tDateFormat df = new SimpleDateFormat ( dateFormat ) ; \n\t\tdf . setTimeZone ( utc ) ; \n\t\t$F5651 ( df , dateAsString ) } \n\tcatch ( ParseException e ) $F1337 catch ( NullPointerException e ) $F1337 } \n"}, {"code": "public SimpleHttpRequestBuilder content ( String chars , Charset charset ) { \n\treturn content ( chars . getBytes ( charset ) ) ; \n\t} \n"}, {"code": "private double adjustTransform $F72 { \n\tdouble xMin = Double . POSITIVE_INFINITY ; \n\tdouble xMax = Double . NEGATIVE_INFINITY ; \n\tdouble yMin = Double . POSITIVE_INFINITY ; \n\tdouble yMax = Double . NEGATIVE_INFINITY ; \n\tfor ( Variable var : csp . getVariables ( ) ) { \n\t\tPoint2D point = getPosition ( var ) ; \n\t\txMin = Math . min ( xMin , point . getX ( ) ) ; \n\t\txMax = Math . max ( xMax , point . getX ( ) ) ; \n\t\tyMin = Math . min ( yMin , point . getY ( ) ) ; \n\t\tyMax = Math . max ( yMax , point . getY ( ) ) ; \n\t\t} \n\tdouble scale = Math . min ( pane . getWidth ( ) / ( xMax - xMin + NUM00 ) , pane . getHeight ( ) / ( yMax - yMin + NUM00 ) ) ; \n\tpane . setTranslateX ( ( scale * ( pane . getWidth ( ) - xMin - xMax ) / NUM00 ) ) ; \n\tpane . setTranslateY ( ( scale * ( pane . getHeight ( ) - yMin - yMax ) / NUM00 ) ) ; \n\tpane . setScaleX ( scale ) ; \n\tpane . setScaleY ( scale ) ; \n\treturn scale ; \n\t} \n"}, {"code": "public void addTableModelListener ( WTableModelListener listener ) { \n\t$F2329 ( listener ) $F2201 ( m_listeners , listener ) $F665 } \n"}, {"code": "public boolean canTraverseOutsideSubtree $F72 { \n\tif ( null != m_parts ) { \n\t\t$F2199 ( n , m_parts ) for ( $F119 ( i , n ) ) { \n\t\t\t$F97670 ( part , m_parts , i ) if ( part . canTraverseOutsideSubtree ( ) ) return _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static CipherParameters makePBEParameters ( PBEKeySpec keySpec , int type , int hash , int keySize , int ivSize ) { \n\tPBEParametersGenerator generator = makePBEGenerator ( type , hash ) ; \n\t$F96 key ; \n\tCipherParameters param ; \n\tkey = convertPassword ( type , keySpec ) ; \n\tgenerator . init ( key , keySpec . getSalt ( ) , keySpec . getIterationCount ( ) ) ; \n\tif ( ivSize != NUM00 ) { \n\t\tparam = generator . generateDerivedParameters ( keySize , ivSize ) ; \n\t\t} \n\telse { \n\t\tparam = generator . generateDerivedParameters ( keySize ) ; \n\t\t} \n\tfor ( $F15868 ( i , key ) ) $F5629 ( key , i ) return param ; \n\t} \n"}, {"code": "private $F2027 parseYMD ( String string ) { \n\t$F1382 ( string ) try { \n\t\tif ( $F4434 ( string ) || $F4434 ( string ) ) $F825 $F11844 ( ymd ) ymd [ NUM00 ] = Integer . valueOf ( $F606 ( string ) ) ; \n\t\tymd [ NUM00 ] = Integer . valueOf ( $F606 ( string ) ) ; \n\t\tymd [ NUM00 ] = Integer . valueOf ( $F606 ( string ) ) ; \n\t\treturn ymd ; \n\t\t} \n\tcatch ( NumberFormatException ex ) $F78550 ( ex ) } \n"}, {"code": "public AbstractPointRenderer $F72 { \n\tshape = new $F1634 $F89166 ; \n\tcolor = new SingleColor ( Color . BLACK ) ; \n\tvalueVisible = _BOOL ; \n\tvalueColumn = NUM00 ; \n\tvalueLocation = Location . CENTER ; \n\tvalueAlignmentX = NUM00 ; \n\tvalueAlignmentY = NUM00 ; \n\tvalueRotation = NUM00 ; \n\tvalueDistance = NUM00 ; \n\tvalueColor = new SingleColor ( Color . BLACK ) ; \n\tvalueFont = Font . decode ( null ) ; \n\terrorVisible = _BOOL ; \n\terrorColumnTop = NUM00 ; \n\terrorColumnBottom = NUM00 ; \n\terrorColor = new SingleColor ( Color . BLACK ) ; \n\terrorShape = new $F69931 ( - NUM00 , NUM00 , NUM00 , NUM00 ) ; \n\terrorStroke = new BasicStroke $F989 ; \n\t} \n"}, {"code": "public Object put ( String key , Object value ) { \n\tObject oldValue = context . getAttribute ( key , ENGINE_SCOPE ) ; \n\tcontext . setAttribute ( key , value , ENGINE_SCOPE ) ; \n\treturn oldValue ; \n\t} \n"}, {"code": "public void test_getLowestSetBitPos $F72 { \n\t$F123148 int aSign = NUM00 ; \n\tint iNumber = NUM00 ; \n\t$F3023 ( aNumber , aSign , aBytes ) int result = aNumber . getLowestSetBit ( ) ; \n\tassertTrue ( NUM00 , result == iNumber ) ; \n\t$F96 aBytes_ = $F79696 ; \n\tiNumber = NUM00 ; \n\taNumber = new BigInteger ( aSign , aBytes_ ) ; \n\tresult = aNumber . getLowestSetBit ( ) ; \n\tassertTrue ( NUM00 , result == iNumber ) ; \n\t$F96 aBytes__ = $F101798 ; \n\tiNumber = NUM00 ; \n\taNumber = new BigInteger ( aSign , aBytes__ ) ; \n\tresult = aNumber . getLowestSetBit ( ) ; \n\tassertTrue ( NUM00 , result == iNumber ) ; \n\t} \n"}, {"code": "private void executeAnotherRequest $F72 throws SQLException { \n\t$F6822 ( random ) $F8254 ( value , random ) PreparedStatement preparedStatement = sharedConnection . prepareStatement ( NUM00 + value ) ; \n\t$F49 ( rs , preparedStatement ) $F24630 ( rs ) assertEquals ( value , rs . getInt ( NUM00 ) ) ; \n\t} \n"}, {"code": "private void statInit $F72 { \n\t$F405059 ( labelValue , Msg , Env ) $F405061 ( fieldValue , AdempierePLAF ) fieldValue . addActionListener ( this ) ; \n\t$F405059 ( labelName , Msg , Env ) $F405061 ( fieldName , AdempierePLAF ) fieldName . addActionListener ( this ) ; \n\tfBPartner_ID = new VLookup ( NUM00 , _BOOL , _BOOL , _BOOL , MLookupFactory . get ( Env . getCtx ( ) , p_WindowNo , NUM00 , MColumn . getColumn_ID ( I_A_Asset . Table_Name , I_A_Asset . COLUMNNAME_C_BPartner_ID ) , DisplayType . Search ) ) ; \n\tlBPartner_ID . setLabelFor ( fBPartner_ID ) ; \n\t$F405061 ( fBPartner_ID , AdempierePLAF ) fBPartner_ID . addActionListener ( this ) ; \n\tfProduct_ID = new VLookup ( NUM00 , _BOOL , _BOOL , _BOOL , MLookupFactory . get ( Env . getCtx ( ) , p_WindowNo , NUM00 , MColumn . getColumn_ID ( I_A_Asset . Table_Name , I_A_Asset . COLUMNNAME_M_Product_ID ) , DisplayType . Search ) ) ; \n\tlProduct_ID . setLabelFor ( fProduct_ID ) ; \n\t$F405061 ( fProduct_ID , AdempierePLAF ) fProduct_ID . addActionListener ( this ) ; \n\t$F405134 ( p_criteriaGrid , labelValue ) $F103711 ( p_criteriaGrid , fieldValue ) $F103711 ( p_criteriaGrid , lBPartner_ID ) $F103711 ( p_criteriaGrid , fBPartner_ID ) $F405134 ( p_criteriaGrid , labelName ) $F103711 ( p_criteriaGrid , fieldName ) $F103711 ( p_criteriaGrid , lProduct_ID ) $F103711 ( p_criteriaGrid , fProduct_ID ) } \n"}, {"code": "public static int hash $F5474 ( data , seed ) { \n\treturn hash ( ByteBuffer . wrap ( data ) , seed ) ; \n\t} \n"}, {"code": "public int parse ( char c , $F1469 ia , int ip , int il ) { \n\tassert ( ia [ ip ] == c ) ; \n\tif ( Surrogate . isHigh ( c ) ) { \n\t\tif ( il - ip < NUM00 ) { \n\t\t\terror = CoderResult . UNDERFLOW ; \n\t\t\t$F150 } \n\t\tchar d = ia [ ip + NUM00 ] ; \n\t\tif ( Surrogate . isLow ( d ) ) { \n\t\t\tcharacter = toUCS4 ( c , d ) ; \n\t\t\tisPair = _BOOL ; \n\t\t\terror = null ; \n\t\t\treturn character ; \n\t\t\t} \n\t\t$F42589 ( error , CoderResult ) $F150 } \n\tif ( Surrogate . isLow ( c ) ) { \n\t\t$F42589 ( error , CoderResult ) $F150 } \n\tcharacter = c ; \n\tisPair = _BOOL ; \n\terror = null ; \n\treturn character ; \n\t} \n"}, {"code": "public void performStartOperationAsync $F110257 ( vmId , responseCallback ) throws IOException { \n\t$F67207 ( path , String , getBasePath , vmId ) createObjectAsync ( path , null , responseCallback ) ; \n\t} \n"}, {"code": "private RtpPacket parseRtpPacket $F97 ( data ) { \n\tRtpPacket packet = new RtpPacket $F72 ; \n\tpacket . mLength = data . length ; \n\tpacket . mReceivedAt = System . currentTimeMillis ( ) ; \n\tpacket . extension = $F18896 ( data ) > NUM00 ; \n\tif ( ( byte ) ( $F18896 ( data ) & NUM00 ) == $F19905 ) { \n\t\tpacket . marker = NUM00 ; \n\t\t} \n\telse { \n\t\tpacket . marker = NUM00 ; \n\t\t} \n\tpacket . payloadType = ( byte ) ( $F18896 ( data ) & NUM00 ) ; \n\tpacket . seqnum = ( char ) ( $F42449 ( data ) | $F18896 ( data ) ) ; \n\tpacket . timestamp = ( $F257717 ( data ) | $F18896 ( data ) ) ; \n\tpacket . ssrc = ( $F257717 ( data ) | $F18896 ( data ) ) ; \n\tif ( packet . extension ) { \n\t\tint dataId = NUM00 ; \n\t\tint extensionHeaderId = ( ( data [ ++ dataId ] & NUM00 ) < < NUM00 ) | ( data [ ++ dataId ] & NUM00 ) ; \n\t\tint length = ( ( data [ ++ dataId ] & NUM00 ) < < NUM00 ) | ( data [ ++ dataId ] & NUM00 ) ; \n\t\tif ( extensionHeaderId == RtpExtensionHeader . RTP_EXTENSION_HEADER_ID ) { \n\t\t\textractExtensionHeader ( data , length , dataId , packet ) ; \n\t\t\t} \n\t\tpacket . payloadoffset = NUM00 + length * NUM00 ; \n\t\t} \n\telse { \n\t\tpacket . payloadoffset = NUM00 ; \n\t\t} \n\tpacket . payloadlength = packet . mLength - packet . payloadoffset ; \n\tpacket . mData = new byte [ packet . payloadlength ] ; \n\tSystem . arraycopy ( data , packet . payloadoffset , packet . mData , NUM00 , packet . payloadlength ) ; \n\treturn packet ; \n\t} \n"}, {"code": "public String product $F83882 ( ctx , WindowNo , mTab , mField , value ) { \n\t$F179073 ( M_Product_ID , value ) if ( M_Product_ID == null || $F179074 ( M_Product_ID ) ) $F1278 BigDecimal priceActual = null ; \n\tTimestamp DateExpense = Env . getContextAsDate ( ctx , WindowNo , NUM00 ) ; \n\t$F35 ( DateExpense , System ) String sql = null ; \n\tPreparedStatement pstmt = null ; \n\tResultSet rs = null ; \n\ttry { \n\t\tboolean noPrice = _BOOL ; \n\t\tsql = $F40645 + NUM00 ; \n\t\t$F47577 ( pstmt , DB , sql ) $F179090 ( pstmt , M_Product_ID ) pstmt . setInt ( NUM00 , Env . getContextAsInt ( ctx , WindowNo , NUM00 ) ) ; \n\t\t$F47578 ( rs , pstmt ) while ( rs . next ( ) && noPrice ) { \n\t\t\t$F212479 plDate = rs . getDate ( NUM00 ) ; \n\t\t\tif ( plDate == null || ! DateExpense . before ( plDate ) ) { \n\t\t\t\tnoPrice = _BOOL ; \n\t\t\t\tpriceActual = rs . getBigDecimal ( NUM00 ) ; \n\t\t\t\tif ( priceActual == null ) priceActual = rs . getBigDecimal ( NUM00 ) ; \n\t\t\t\tif ( priceActual == null ) priceActual = rs . getBigDecimal ( NUM00 ) ; \n\t\t\t\tInteger ii = new Integer ( rs . getInt ( NUM00 ) ) ; \n\t\t\t\tif ( ! rs . wasNull ( ) ) $F275044 ( mTab , ii ) } \n\t\t\t} \n\t\tif ( noPrice ) { \n\t\t\tsql = $F40645 + NUM00 + NUM00 ; \n\t\t\tDB . close ( rs , pstmt ) ; \n\t\t\t$F47577 ( pstmt , DB , sql ) $F179090 ( pstmt , M_Product_ID ) pstmt . setInt ( NUM00 , Env . getContextAsInt ( ctx , WindowNo , NUM00 ) ) ; \n\t\t\t$F47578 ( rs , pstmt ) while ( rs . next ( ) && noPrice ) { \n\t\t\t\t$F212479 plDate = rs . getDate ( NUM00 ) ; \n\t\t\t\tif ( plDate == null || ! DateExpense . before ( plDate ) ) { \n\t\t\t\t\tnoPrice = _BOOL ; \n\t\t\t\t\tpriceActual = rs . getBigDecimal ( NUM00 ) ; \n\t\t\t\t\tif ( priceActual == null ) priceActual = rs . getBigDecimal ( NUM00 ) ; \n\t\t\t\t\tif ( priceActual == null ) priceActual = rs . getBigDecimal ( NUM00 ) ; \n\t\t\t\t\tInteger ii = new Integer ( rs . getInt ( NUM00 ) ) ; \n\t\t\t\t\tif ( ! rs . wasNull ( ) ) $F275044 ( mTab , ii ) } \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tcatch ( SQLException e ) { \n\t\t$F62 ( log , Level , sql , e ) $F179099 ( e ) } \n\t$F47585 ( DB , rs , pstmt ) $F307246 ( priceActual , Env ) $F275044 ( mTab , priceActual ) $F1278 } \n"}, {"code": "public boolean thisDeviceSpeaksTo ( BluetoothDevice other ) throws NoSuchAlgorithmException , UnsupportedEncodingException { \n\tif ( MurmurService . USE_BACKOFF ) return _BOOL ; \n\tif ( other == null ) $F53787 ( log , _BOOL ) String otherAddr = other . getAddress ( ) ; \n\tif ( otherAddr == null ) { \n\t\t$F9472 ( log , other ) return _BOOL ; \n\t\t} \n\tString myAddr = mBluetoothSpeaker . getAddress ( ) ; \n\tif ( myAddr . equals ( whichInitiates ( myAddr , otherAddr ) ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\telse { \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public static $F9340 List < KeyValue $F9340 > waitUntilMinKeyValueRecordsReceived ( Properties consumerConfig , String topic , int expectedNumRecords , long waitTime ) throws InterruptedException { \n\tList < KeyValue $F9340 > $F204 ( accumData ) ; \n\t$F657 ( startTime , System ) while ( _BOOL ) { \n\t\tList < KeyValue $F9340 > readData = readKeyValues ( topic , consumerConfig ) ; \n\t\taccumData . addAll ( readData ) ; \n\t\tif $F29395 ( accumData , expectedNumRecords ) return accumData ; \n\t\tif ( System . currentTimeMillis ( ) > startTime + waitTime ) throw new AssertionError ( $F57676 ( expectedNumRecords , accumData ) + waitTime + NUM00 ) ; \n\t\tThread . sleep ( Math . min ( waitTime , NUM00 ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F4203 CombinedDownloadTask $F4203 single ( DownloadTask $F4203 task ) { \n\tObjects . requireNonNull ( task ) ; \n\treturn new SingleCombinedTask $F4203 ( task ) ; \n\t} \n"}, {"code": "public void addHexListener ( final IHexPanelListener listener ) { \n\t$F1832 ( Preconditions , listener ) $F2201 ( m_listeners , listener ) } \n"}, {"code": "public static < T extends SerializableEntity > Deserializer roundtripSerializableEntityWithBinarySerializer ( final T originalEntity , final AccountLookup accountLookup ) { \n\tfinal BinarySerializer binarySerializer = new BinarySerializer $F72 ; \n\toriginalEntity . serialize ( binarySerializer ) ; \n\treturn new BinaryDeserializer ( binarySerializer . getBytes ( ) , new DeserializationContext ( accountLookup ) ) ; \n\t} \n"}, {"code": "$F1309 public static String encode ( final String s , final String encoding , BitSet safeOctets , boolean plusForSpace ) throws UnsupportedEncodingException { \n\tStringBuilder out = new StringBuilder $F9484 ( s ) ; \n\tboolean needsEncoding ; \n\ttry { \n\t\tneedsEncoding = encode ( s , encoding , safeOctets , plusForSpace , out ) ; \n\t\t} \n\tcatch ( UnsupportedEncodingException e ) { \n\t\tthrow e ; \n\t\t} \n\tcatch ( IOException e ) $F27253 ( e ) if ( needsEncoding ) $F2495 ( out ) else { \n\t\treturn s ; \n\t\t} \n\t} \n"}, {"code": "public static void fireClipboardChanged $F72 { \n\tfor ( $F2774 ( i , listenerList ) ) { \n\t\tClipboardListener listener = ( ClipboardListener ) i . next ( ) ; \n\t\tlistener . clipboardChanged ( ) ; \n\t\t} \n\t} \n"}, {"code": "$F18907 ( window ) "}, {"code": "public boolean contains ( T listener ) { \n\tif ( mListeners != null ) $F298 ( mListeners , listener ) else { \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public SimpleDictionary ( String ... aWords ) { \n\t$F21884 ( words ) for ( String word : aWords ) $F9632 ( words , word ) } \n"}, {"code": "public long readLongLE $F72 throws IOException { \n\t$F52634 ( inputStream , workSpace ) return $F342689 ( workSpace ) | $F342689 ( workSpace ) | $F342689 ( workSpace ) | $F342689 ( workSpace ) | $F342689 ( workSpace ) | $F342689 ( workSpace ) | $F342689 ( workSpace ) | ( ( long ) $F18896 ( workSpace ) ) ; \n\t} \n"}, {"code": "public void testSetPublicKey2 $F72 throws Exception { \n\tIdentity i2 = new IdentityStub ( NUM00 , IdentityScope . getSystemScope ( ) ) ; \n\tnew PublicKeyStub ( NUM00 , NUM00 , new byte [ ] { \n\t\tNUM00 , NUM00 , NUM00 , NUM00 , NUM00 } \n\t) ; \n\ttry { \n\t\ti2 . setPublicKey ( null ) ; \n\t\t} \n\tcatch ( KeyManagementException ok ) $F845 } \n"}, {"code": "$F160927 static long elapsedRealtime $F72 { \n\treturn System . currentTimeMillis ( ) - sBootTime ; \n\t} \n"}, {"code": "$F1 public void fillAssignedKeys $F32029 ( keys ) { \n\tkeys . add ( _keyColumn . name ( ) ) ; \n\t} \n"}, {"code": "$F1 public void removeInstanceListener ( InstanceListener dsl ) $F106 ( m_instanceListeners , dsl ) "}, {"code": "public double eccentricity $F72 { \n\treturn Math . sqrt ( NUM00 - ( semiMinorAxis ( ) * semiMinorAxis ( ) ) / ( semiMajorAxis ( ) * semiMajorAxis ( ) ) ) ; \n\t} \n"}, {"code": "private void simpleApply ( IDocument document , String string , ConfigurableCompletionProposal proposal ) throws BadLocationException { \n\tproposal . setCursorPosition ( string . length ( ) ) ; \n\tdocument . replace ( proposal . getReplacementOffset ( ) , proposal . getReplacementLength ( ) , string ) ; \n\t} \n"}, {"code": "public String pullDump2PC $F72 { \n\tString serial = device . getSerialNumber ( ) ; \n\tFile dest = new File ( FileUtils . getTempDirectory ( ) , serial + NUM00 ) ; \n\t$F14393 ( path , dest ) $F7028 ( log , path ) CommandLine commandpull = adbCommand ( NUM00 , NUM00 , path ) ; \n\tString out = executeCommandQuietly ( commandpull ) ; \n\t$F7028 ( log , out ) return path ; \n\t} \n"}, {"code": "$F92397 public void executeTest $F72 throws Throwable { \n\ttry { \n\t\ttestEnv . executeTest ( ) ; \n\t\t} \n\tcatch ( AssertionError assertionError ) { \n\t\tif ( testEnv . hasBeenStopped ( ) ) { \n\t\t\tthrow new AssertionError $F16296 ( assertionError ) ; \n\t\t\t} \n\t\tthrow assertionError ; \n\t\t} \n\t} \n"}, {"code": "public void init $F72 { \n\t$F30057 ( pubPanel ) topic = new JComboBox $F72 ; \n\ttopic . setEditable ( _BOOL ) ; \n\ttopic . setMaximumSize ( MQTTFrame . TEXT_FIELD_DIMENSION ) ; \n\ttopic . setMaximumRowCount ( NUM00 ) ; \n\tqosList = new JComboBox ( qos ) ; \n\t$F53383 ( qosList ) qosList . setMaximumSize ( MQTTFrame . DROP_DOWN_DIMENSION ) ; \n\tpubData = new JTextArea $F32532 ; \n\tpubData . setBorder ( new BevelBorder ( BevelBorder . LOWERED ) ) ; \n\tpubData . setMargin ( MQTTFrame . TEXT_MARGINS ) ; \n\t$F58090 ( retained ) retained . setSelected ( _BOOL ) ; \n\tpubLabel = new JLabel ( PANEL_TITLE + NUM00 ) ; \n\t$F58112 ( f , pubLabel ) pubLabel . setFont ( new Font ( f . getName ( ) , Font . BOLD , f . getSize ( ) + NUM00 ) ) ; \n\t$F58099 ( topicBox ) $F58103 ( topicBox , BoxLayout ) $F58105 ( topicBox ) topicBox . add ( topic ) ; \n\t$F58105 ( topicBox ) topicBox . add ( qosList ) ; \n\t$F58105 ( topicBox ) topicBox . add ( retained ) ; \n\t$F58099 ( titleAndTopic ) $F58107 ( titleAndTopic ) titleAndTopic . add ( pubLabel ) ; \n\ttitleAndTopic . add ( topicBox ) ; \n\thexDisplay = _BOOL ; \n\t$F58123 ( hexButton ) hexButton . addActionListener ( this ) ; \n\t$F58123 ( fileButton ) fileButton . setEnabled ( _BOOL ) ; \n\tfileButton . addActionListener ( this ) ; \n\t$F58123 ( pubButton ) pubButton . setEnabled ( _BOOL ) ; \n\tpubButton . addActionListener ( this ) ; \n\t$F58099 ( buttons ) $F58107 ( buttons ) buttons . add ( pubButton ) ; \n\tbuttons . add ( fileButton ) ; \n\tbuttons . add ( hexButton ) ; \n\t$F58099 ( buttonLayout ) buttonLayout . add ( buttons ) ; \n\t$F58125 ( pubPanel , titleAndTopic , BorderLayout ) pubPanel . add ( new JScrollPane ( pubData ) , BorderLayout . CENTER ) ; \n\t$F40903 ( pubPanel , buttonLayout , BorderLayout ) } \n"}, {"code": "public void validateEmrClusterDefinitionKey ( EmrClusterDefinitionKey key ) throws IllegalArgumentException { \n\t$F18062 ( Assert , key ) key . setNamespace ( alternateKeyHelper . validateStringParameter ( NUM00 , key . getNamespace ( ) ) ) ; \n\tkey . setEmrClusterDefinitionName ( alternateKeyHelper . validateStringParameter ( NUM00 , NUM00 , key . getEmrClusterDefinitionName ( ) ) ) ; \n\t} \n"}, {"code": "$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel ) "}, {"code": "@ TargetApi ( VERSION_CODES . KITKAT ) private void handleSmsReceived ( Intent intent ) { \n\tif ( BuildConfig . DEBUG ) Log . v ( NUM00 ) ; \n\tBundle bundle = intent . getExtras ( ) ; \n\tif ( bundle != null ) { \n\t\tSmsMessage [ ] messages = null ; \n\t\tif ( SmsPopupUtils . hasKitKat ( ) ) { \n\t\t\tmessages = Intents . getMessagesFromIntent ( intent ) ; \n\t\t\t} \n\t\telse { \n\t\t\tmessages = SmsPopupUtils . getMessagesFromIntent ( intent ) ; \n\t\t\t} \n\t\tif ( messages != null ) { \n\t\t\tnotifyMessageReceived ( new SmsMmsMessage ( context , messages , System . currentTimeMillis ( ) ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static long installAge ( long currentTimestamp , long installTimestamp , boolean sendInstallEvent ) { \n\tif ( sendInstallEvent ) { \n\t\treturn INSTALL_AGE_IMMEDIATELY_AFTER_INSTALLING ; \n\t\t} \n\telse { \n\t\treturn Math . max ( NUM00 , ( currentTimestamp - installTimestamp ) / MS_PER_DAY ) ; \n\t\t} \n\t} \n"}, {"code": "public boolean isDistributed $F72 { \n\treturn ! isLocal ( ) ; \n\t} \n"}, {"code": "public void testValueOfLongNegative1 $F72 { \n\tlong longVal = - NUM00 ; \n\t$F2544 ( aNumber , BigInteger , longVal ) byte $F3018 = { \n\t\t- NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 } \n\t; \n\t$F3030 ( rBytes ) $F3031 ( resBytes , aNumber ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , aNumber ) } \n"}, {"code": "$F100892 ( zzStartRead , System , zzBuffer , zzEndRead , zzCurrentPos , zzMarkedPos , newBuffer , numRead , zzReader , _BOOL , c ) "}, {"code": "public synchronized boolean isConsumer ( ImageConsumer ic ) $F298 ( theConsumers , ic ) "}, {"code": "public static boolean verifySignature ( Signature initializedSignatureEngine , $F96 message , $F96 signature ) throws SignatureException { \n\tinitializedSignatureEngine . update ( message ) ; \n\treturn initializedSignatureEngine . verify ( signature ) ; \n\t} \n"}, {"code": "public static void writeVarInt ( OutputStream out , int x ) throws IOException { \n\twhile $F220175 ( x ) { \n\t\tout . write ( ( byte ) ( NUM00 | ( x & NUM00 ) ) ) ; \n\t\tx >>>= NUM00 ; \n\t\t} \n\t$F220182 ( out , x ) } \n"}, {"code": "$F31396 ( str , retval , ch , i , s , Integer ) "}, {"code": "public SegmentPath complete ( EndType etype ) { \n\tSegmentPath result ; \n\tif ( data == null || w < NUM00 ) $F1337 if ( w == data . length ) { \n\t\tresult = new SegmentPath ( data , etype ) ; \n\t\treset ( NUM00 ) ; \n\t\t} \n\telse { \n\t\t$F9662 ( dataToAdopt , w ) $F135 ( System , data , dataToAdopt , w ) result = new SegmentPath ( dataToAdopt , etype ) ; \n\t\treset ( NUM00 ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "$F25635 ( timestamp , t , buildTag , TAG_GPS_DATE_STAMP , mGPSDateStampFormat , _BOOL , setTag , mGPSTimeStampCalendar , TAG_GPS_TIME_STAMP , Calendar ) "}, {"code": "$F5466 public Bitmap cropImage $F72 { \n\tBitmap viewBitmap = getViewBitmap ( ) ; \n\tif ( viewBitmap == null || viewBitmap . isRecycled ( ) ) $F1337 cancelAllAnimations ( ) ; \n\tsetImageToWrapCropBounds ( _BOOL ) ; \n\t$F85496 ( currentImageRect , RectUtils , mCurrentImageCorners ) $F4892 ( currentImageRect ) float currentScale = getCurrentScale ( ) ; \n\tfloat currentAngle = getCurrentAngle ( ) ; \n\tif ( mMaxResultImageSizeX > NUM00 && mMaxResultImageSizeY > NUM00 ) { \n\t\tfloat cropWidth = mCropRect . width ( ) / currentScale ; \n\t\tfloat cropHeight = mCropRect . height ( ) / currentScale ; \n\t\tif ( cropWidth > mMaxResultImageSizeX || cropHeight > mMaxResultImageSizeY ) { \n\t\t\tfloat scaleX = mMaxResultImageSizeX / cropWidth ; \n\t\t\tfloat scaleY = mMaxResultImageSizeY / cropHeight ; \n\t\t\t$F77838 ( resizeScale , Math , scaleX , scaleY ) Bitmap resizedBitmap = Bitmap . createScaledBitmap ( viewBitmap , $F85502 ( viewBitmap , resizeScale ) , $F85503 ( viewBitmap , resizeScale ) , _BOOL ) ; \n\t\t\t$F85509 ( viewBitmap , resizedBitmap ) viewBitmap = resizedBitmap ; \n\t\t\tcurrentScale /= resizeScale ; \n\t\t\t} \n\t\t} \n\tif ( currentAngle != NUM00 ) { \n\t\t$F2268 ( mTempMatrix ) mTempMatrix . setRotate ( currentAngle , $F77576 ( viewBitmap ) , $F63370 ( viewBitmap ) ) ; \n\t\tBitmap $F74324 ( rotatedBitmap , Bitmap , viewBitmap , mTempMatrix , _BOOL ) ; \n\t\t$F85509 ( viewBitmap , rotatedBitmap ) viewBitmap = rotatedBitmap ; \n\t\t} \n\t$F85525 ( top , mCropRect , currentImageRect , currentScale ) $F85525 ( left , mCropRect , currentImageRect , currentScale ) $F85534 ( width , mCropRect , currentScale ) $F85534 ( height , mCropRect , currentScale ) return Bitmap . createBitmap ( viewBitmap , left , top , width , height ) ; \n\t} \n"}, {"code": "$F1309 public static Bundle parseUrl ( String url ) { \n\t$F2936 ( url ) try { \n\t\t$F9518 ( u , url ) Bundle b = decodeUrl ( u . getQuery ( ) ) ; \n\t\tb . putAll ( decodeUrl ( u . getRef ( ) ) ) ; \n\t\treturn b ; \n\t\t} \n\tcatch ( MalformedURLException e ) { \n\t\treturn new Bundle $F72 ; \n\t\t} \n\t} \n"}, {"code": "private static void createTmpFile ( CompletableFuture < NewFile > fileCreation , Path destDir , List < TSData > files ) { \n\t$F105262 ( LOG , Level ) try { \n\t\tCollections . sort ( files , Comparator . comparing ( null ) ) ; \n\t\tfinal FileChannel fd = FileUtil . createTempFile ( destDir , NUM00 , NUM00 ) ; \n\t\ttry { \n\t\t\tfinal DateTime begin ; \n\t\t\ttry ( ToXdrTables output = new ToXdrTables ( fd , Compression . DEFAULT_OPTIMIZED ) ) { \n\t\t\t\twhile $F5973 ( files ) { \n\t\t\t\t\tTSData tsdata = files . remove ( NUM00 ) ; \n\t\t\t\t\tif ( fileCreation . isCancelled ( ) ) $F3575 output . addAll ( tsdata ) ; \n\t\t\t\t\t} \n\t\t\t\tbegin = new DateTime ( output . getHdrBegin ( ) , DateTimeZone . UTC ) ; \n\t\t\t\tif ( fileCreation . isCancelled ( ) ) $F3575 } \n\t\t\tif ( fileCreation . isCancelled ( ) ) $F3575 $F62331 ( INSTALL_POOL ) } \n\t\tcatch ( Error | RuntimeException | IOException ex ) { \n\t\t\ttry $F881 ( fd ) catch ( Error | RuntimeException | IOException ex1 ) $F47950 ( ex , ex1 ) throw ex ; \n\t\t\t} \n\t\t} \n\tcatch ( Error | RuntimeException | IOException ex ) { \n\t\tLOG . log ( Level . WARNING , NUM00 , ex ) ; \n\t\t$F23074 ( OUTSTANDING , fileCreation ) fileCreation . completeExceptionally ( ex ) ; \n\t\t} \n\t} \n"}, {"code": "public void contentTag $F19845 ( tag , name , value , content ) { \n\tspacing ( ) ; \n\t$F21384 ( m_out ) m_out . print ( tag ) ; \n\t$F21384 ( m_out ) m_out . print ( name ) ; \n\t$F21384 ( m_out ) $F21384 ( m_out ) escapeString ( value ) ; \n\t$F21384 ( m_out ) $F21384 ( m_out ) escapeString ( content ) ; \n\t$F21384 ( m_out ) $F21384 ( m_out ) m_out . print ( tag ) ; \n\t$F21384 ( m_out ) println ( ) ; \n\t} \n"}, {"code": "public static void closeOutputStream ( OutputStream stream , String tag ) $F144343 ( stream , Log , tag , e ) "}, {"code": "public void addChild ( Component child ) { \n\tcomponents . add ( child ) ; \n\tchild . setParent ( this ) ; \n\t} \n"}, {"code": "public boolean open ( int maxRows ) { \n\t$F556 ( log , maxRows ) m_maxRows = maxRows ; \n\tif ( m_open ) { \n\t\t$F22806 ( log ) dataRefreshAll ( ) ; \n\t\treturn _BOOL ; \n\t\t} \n\t$F8801 ( m_virtual , verifyVirtual ) createSelectSql ( ) ; \n\tif $F3581 ( m_SQL ) { \n\t\t$F81302 ( log , Level ) return _BOOL ; \n\t\t} \n\tm_loader = new Loader $F72 ; \n\tm_rowCount = m_loader . open ( maxRows ) ; \n\tif ( m_virtual ) { \n\t\tm_buffer = null ; \n\t\tm_virtualBuffer = new HashMap < Integer , $F131 > $F989 ; \n\t\t} \n\telse { \n\t\tm_buffer = new ArrayList $F60673 ( m_rowCount + NUM00 ) ; \n\t\t} \n\tm_sort = new ArrayList < MSort > ( m_rowCount + NUM00 ) ; \n\tif ( m_rowCount > NUM00 ) { \n\t\tif ( m_rowCount < NUM00 ) $F21687 ( m_loader ) else { \n\t\t\t$F40963 ( m_loaderThread , m_loader ) ; \n\t\t\t$F2346 ( m_loaderThread ) } \n\t\t} \n\telse $F59 ( m_loader ) m_open = _BOOL ; \n\tm_changed = _BOOL ; \n\tm_rowChanged = - NUM00 ; \n\tm_inserting = _BOOL ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void addMessageListener ( IMessageListener listener ) $F207 ( listeners , listener ) "}, {"code": "protected void syncFlushVdcConfigToLocal $F72 throws Exception { \n\tif ( vdcPropBarrier == null ) { \n\t\tvdcPropBarrier = new VdcPropertyBarrier ( targetSiteInfo , VDC_OP_BARRIER_TIMEOUT ) ; \n\t\t} \n\t$F14811 ( vdcPropBarrier ) try $F5795 ( flushVdcConfigToLocal ) finally { \n\t\tboolean allLeft = vdcPropBarrier . leave ( ) ; \n\t\tif ( ! allLeft ) { \n\t\t\t$F973 ( log ) Thread . sleep ( IPSEC_RESTART_DELAY ) ; \n\t\t\t} \n\t\t} \n\tvdcPropBarrier = null ; \n\t} \n"}, {"code": "public CorruptIndexException ( String message , DataInput input , Throwable cause ) { \n\tthis ( message , Objects . toString ( input ) , cause ) ; \n\t} \n"}, {"code": "protected void removeFromQuarantineQueue ( NodePortTuple npt ) { \n\twhile $F16914 ( quarantineQueue , npt ) ; \n\t} \n"}, {"code": "public boolean hasExpired $F72 { \n\t$F116 ( maxAge , _BOOL ) if ( maxAge == MAX_AGE_UNSPECIFIED ) return _BOOL ; \n\tlong deltaSecond = $F32708 ( System , whenCreated ) ; \n\tif ( deltaSecond > maxAge ) return _BOOL ; \n\telse return _BOOL ; \n\t} \n"}, {"code": "public static String repeatCharacter ( char c , int repetitions ) { \n\t$F7542 ( s , repetitions ) $F48485 ( i , repetitions , s , c ) $F92 ( s ) } \n"}, {"code": "public static String checkAndReplaceLiterals ( String instStr ) { \n\tString tmp = instStr ; \n\tif $F105 ( tmp , COMPONENTS_DELIM ) { \n\t\t$F107746 ( tmp , COMPONENTS_DELIM ) $F28293 ( LOG , COMPONENTS_DELIM ) } \n\tif $F105 ( tmp , ELEMENT_DELIM ) { \n\t\t$F107746 ( tmp , ELEMENT_DELIM ) $F28293 ( LOG , ELEMENT_DELIM ) } \n\tif $F105 ( tmp , LEVELIN ) { \n\t\t$F107746 ( tmp , LEVELIN ) $F28293 ( LOG , LEVELIN ) } \n\tif $F105 ( tmp , LEVELOUT ) { \n\t\t$F107746 ( tmp , LEVELOUT ) $F28293 ( LOG , LEVELOUT ) } \n\tif $F105 ( tmp , PARFOR_CDATA_END ) { \n\t\t$F107746 ( tmp , PARFOR_CDATA_END ) $F28293 ( LOG , PARFOR_CDATA_END ) } \n\treturn tmp ; \n\t} \n"}, {"code": "protected void notifyHistoryChangedListeners $F72 { \n\tIterator < HistoryChangedListener > iter ; \n\tHistoryChangedListener l ; \n\t$F18058 ( iter , m_HistoryChangedListeners ) while $F2921 ( iter ) { \n\t\t$F45366 ( l , iter ) l . historyChanged ( new HistoryChangedEvent ( this , HISTORY_NAME , getHistory ( ) ) ) ; \n\t\t} \n\t} \n"}, {"code": "public final static $F10849 splitTypeLevelsSignature ( String typeSignature ) { \n\t$F1469 source = Signature . removeCapture ( typeSignature . toCharArray ( ) ) ; \n\t$F127812 ( CharOperation , source ) ; \n\t$F10849 signatures = new char $F57748 ; \n\tint signaturesCount = NUM00 ; \n\tint paramOpening = NUM00 ; \n\tfor ( $F151668 ( idx , ln , source ) ) { \n\t\tswitch ( source [ idx ] ) { \n\t\t\t$F1262 paramOpening -- ; \n\t\t\tif ( paramOpening == NUM00 ) { \n\t\t\t\tif ( signaturesCount == signatures . length ) { \n\t\t\t\t\tSystem . arraycopy ( signatures , NUM00 , signatures = new char $F10850 ( signaturesCount ) , NUM00 , signaturesCount ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F597 $F188943 ( paramOpening ) $F1262 if ( paramOpening == NUM00 ) { \n\t\t\t\tif ( signaturesCount == signatures . length ) { \n\t\t\t\t\tSystem . arraycopy ( signatures , NUM00 , signatures = new char $F10850 ( signaturesCount ) , NUM00 , signaturesCount ) ; \n\t\t\t\t\t} \n\t\t\t\tsignatures [ signaturesCount ] = new char [ idx + NUM00 ] ; \n\t\t\t\tSystem . arraycopy ( source , NUM00 , signatures [ signaturesCount ] , NUM00 , idx ) ; \n\t\t\t\tsignatures [ signaturesCount ] [ idx ] = Signature . C_SEMICOLON ; \n\t\t\t\tsignaturesCount ++ ; \n\t\t\t\t} \n\t\t\t$F597 $F1262 source [ idx ] = NUM00 ; \n\t\t\t$F597 } \n\t\t} \n\t$F10849 typeSignatures = new char $F10850 ( signaturesCount ) ; \n\ttypeSignatures [ NUM00 ] = source ; \n\tfor ( int i = NUM00 , j = signaturesCount - NUM00 ; \n\ti <= signaturesCount ; \n\ti ++ , j -- ) $F20651 ( typeSignatures , i , signatures , j ) return typeSignatures ; \n\t} \n"}, {"code": "public static $F4203 T withWriter ( Writer writer , @ ClosureParams ( FirstParam . class ) $F158697 closure ) throws IOException { \n\ttry { \n\t\tT result = closure . call ( writer ) ; \n\t\ttry $F29882 ( writer ) $F29052 Writer temp = writer ; \n\t\twriter = null ; \n\t\t$F59 ( temp ) return result ; \n\t\t} \n\t$F18632 ( closeWithWarning , writer ) } \n"}, {"code": "public static int round ( double value ) { \n\tint roundedValue = value > NUM00 ? $F127087 ( value ) : - ( int ) ( Math . abs ( value ) + NUM00 ) ; \n\treturn roundedValue ; \n\t} \n"}, {"code": "private ServiceRegistrar [ ] buildServiceRegistrar $F72 { \n\tint k = NUM00 ; \n\tServiceRegistrar [ ] proxys = new ServiceRegistrar $F2313 ( discoveredLocators ) ; \n\t$F10531 ( iter , discoveredLocators ) while $F2921 ( iter ) { \n\t\tLocatorReg reg = ( LocatorReg ) iter . next ( ) ; \n\t\tproxys [ k ++ ] = reg . proxy ; \n\t\t} \n\treturn proxys ; \n\t} \n"}, {"code": "$F52843 ( packed , map , i , j , count , value ) "}, {"code": "public void rewindToWS $F72 { \n\t$F32905 ( nextOffset ) nextOffset -- ; \n\twhile ( nextOffset > NUM00 && ! $F1750 ( Character , s , nextOffset ) ) { \n\t\tnextOffset -- ; \n\t\t} \n\tthis . offset = nextOffset - NUM00 ; \n\t} \n"}, {"code": "private static Permission [ ] flatten ( Permission [ ] pa ) { \n\tList l = new ArrayList ( pa . length ) ; \n\tfor ( $F1139 ( i , pa ) ) { \n\t\tPermission p = pa [ i ] ; \n\t\tif ( p instanceof GrantPermission ) { \n\t\t\tl . addAll ( Arrays . asList ( ( ( GrantPermission ) p ) . grants ) ) ; \n\t\t\t} \n\t\telse $F207 ( l , p ) } \n\treturn ( Permission [ ] ) l . toArray ( new Permission $F2313 ( l ) ) ; \n\t} \n"}, {"code": "$F238095 ( lock , this , a , count , k , p , first ) "}, {"code": "protected void startDocumentInternal $F72 throws SAXException { \n\tif ( m_needToCallStartDocument ) { \n\t\tsuper . startDocumentInternal ( ) ; \n\t\tm_saxHandler . startDocument ( ) ; \n\t\tm_needToCallStartDocument = _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public static boolean isAnonymous ( String className ) { \n\t$F24867 ( i , className ) if ( i >= NUM00 && ++ i < className . length ( ) ) { \n\t\twhile $F7007 ( i , className ) { \n\t\t\tif $F118383 ( Character , className , i ) { \n\t\t\t\treturn _BOOL ; \n\t\t\t\t} \n\t\t\ti ++ ; \n\t\t\t} \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "String descriptor ( boolean includeThis ) { \n\t$F83 ( result ) $F84 ( result ) if ( includeThis ) { \n\t\tresult . append ( declaringType . name ) ; \n\t\t} \n\tfor ( TypeId t : parameters . types ) { \n\t\tresult . append ( t . name ) ; \n\t\t} \n\t$F84 ( result ) result . append ( returnType . name ) ; \n\t$F92 ( result ) } \n"}, {"code": "public void testSingleFile $F72 throws Exception { \n\tJFlexMojo mojo = newMojo ( NUM00 ) ; \n\t$F1699 ( mojo ) File produced = getExpectedOutputFile ( mojo ) ; \n\tassertTrue ( NUM00 + produced , produced . isFile ( ) ) ; \n\t$F6466 ( size , produced ) boolean correctSize = ( size > NUM00 ) && ( size < NUM00 ) ; \n\tassertTrue ( NUM00 + size , correctSize ) ; \n\t} \n"}, {"code": "public final static boolean isPotentialZipArchive ( String name ) { \n\t$F24867 ( lastDot , name ) $F5881 ( lastDot , _BOOL ) if ( name . lastIndexOf ( File . separatorChar ) > lastDot ) { \n\t\treturn _BOOL ; \n\t\t} \n\t$F115 ( length , name ) int extensionLength = length - lastDot - NUM00 ; \n\tif $F9615 ( extensionLength , EXTENSION_java ) { \n\t\tfor ( $F18298 ( i , extensionLength ) ) { \n\t\t\tif ( Character . toLowerCase ( name . charAt ( length - extensionLength + i ) ) != EXTENSION_java . charAt ( i ) ) $F5153 $F6482 ( i , _BOOL ) } \n\t\t} \n\tif $F9615 ( extensionLength , EXTENSION_class ) { \n\t\tfor ( $F18298 ( i , extensionLength ) ) { \n\t\t\tif ( Character . toLowerCase ( name . charAt ( length - extensionLength + i ) ) != EXTENSION_class . charAt ( i ) ) { \n\t\t\t\treturn _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "void addTerm ( MapBuilderTermType type , JClass jclass , String alias ) { \n\tMapBuilderTerm newTerm = new MapBuilderTerm $F72 ; \n\tnewTerm . type = type ; \n\tnewTerm . jclass = jclass ; \n\tnewTerm . alias = alias ; \n\tterms . add ( newTerm ) ; \n\t} \n"}, {"code": "public Collection engineGenerateCertificates ( InputStream inStream ) throws CertificateException { \n\t$F132633 cert ; \n\t$F19151 ( certs ) while $F2108 ( cert , engineGenerateCertificate , inStream ) $F207 ( certs , cert ) return certs ; \n\t} \n"}, {"code": "$F1431 protected void writePath ( Shape s ) { \n\t$F38394 ( segments , s ) ; \n\t$F1993 ( coords ) for ( int i = NUM00 ; \n\t! segments . isDone ( ) ; \n\ti ++ , segments . next ( ) ) { \n\t\tif ( i > NUM00 ) $F1210 ( write ) $F38403 ( segmentType , segments , coords ) switch ( segmentType ) { \n\t\t\tcase PathIterator . SEG_MOVETO : write ( NUM00 , coords [ NUM00 ] , NUM00 , coords [ NUM00 ] ) ; \n\t\t\t$F597 case PathIterator . SEG_LINETO : write ( NUM00 , coords [ NUM00 ] , NUM00 , coords [ NUM00 ] ) ; \n\t\t\t$F597 case PathIterator . SEG_CUBICTO : write ( NUM00 , coords [ NUM00 ] , NUM00 , coords [ NUM00 ] , NUM00 , coords [ NUM00 ] , NUM00 , coords [ NUM00 ] , NUM00 , coords [ NUM00 ] , NUM00 , coords [ NUM00 ] ) ; \n\t\t\t$F597 case PathIterator . SEG_QUADTO : write ( NUM00 , coords [ NUM00 ] , NUM00 , coords [ NUM00 ] , NUM00 , coords [ NUM00 ] , NUM00 , coords [ NUM00 ] ) ; \n\t\t\t$F597 case PathIterator . SEG_CLOSE : write ( NUM00 ) ; \n\t\t\t$F597 $F1267 $F4638 } \n\t\t} \n\t} \n"}, {"code": "$F82267 ( expression , errorMessage , String ) "}, {"code": "$F128244 ( LockSupport , this , Thread ) "}, {"code": "$F1 public int portRemote $F72 { \n\tif ( _channel != null ) { \n\t\ttry { \n\t\t\tSocketAddress addr = _channel . getRemoteAddress ( ) ; \n\t\t\t$F1082 } \n\t\tcatch ( Exception e ) { \n\t\t\t$F301 ( e ) $F1082 } \n\t\t} \n\telse $F1082 } \n"}, {"code": "public void addDropTarget ( DropTarget target ) $F207 ( mDropTargets , target ) "}, {"code": "$F1 public void startElement ( final String namespaceURI , final String localName , final String qName , final Attributes atts ) throws SAXException { \n\tObject objectToLoad = null ; \n\tif $F10471 ( openNodes ) objectToLoad = rootObject ; \n\telse objectToLoad = createChild ( qName , atts ) ; \n\tif ( objectToLoad != null ) { \n\t\tif ( atts . getIndex ( NUM00 ) < NUM00 ) ObjectGetSetter . set ( objectToLoad , NUM00 , qName ) ; \n\t\tObjectGetSetter . setAll ( objectToLoad , atts ) ; \n\t\t} \n\topenNodes . push ( new StackedObject ( objectToLoad ) ) ; \n\t} \n"}, {"code": "public final int put ( Object key , int value , boolean isReplace ) { \n\tint prime = _prime ; \n\tint hash = Math . abs ( System . identityHashCode ( key ) % prime ) ; \n\t$F131 keys = _keys ; \n\twhile ( _BOOL ) { \n\t\tObject testKey = keys [ hash ] ; \n\t\tif ( testKey == null ) { \n\t\t\tkeys [ hash ] = key ; \n\t\t\t_values [ hash ] = value ; \n\t\t\t_size ++ ; \n\t\t\tif ( keys . length <= NUM00 * _size ) resize ( NUM00 * keys . length ) ; \n\t\t\treturn value ; \n\t\t\t} \n\t\telse if ( key != testKey ) { \n\t\t\t$F271125 ( hash , prime ) $F598 } \n\t\telse if ( isReplace ) { \n\t\t\tint old = _values [ hash ] ; \n\t\t\t_values [ hash ] = value ; \n\t\t\treturn old ; \n\t\t\t} \n\t\telse $F269670 ( _values , hash ) } \n\t} \n"}, {"code": "public int addAllAbsent ( Collection c ) { \n\t$F2199 ( numNew , c ) $F94561 ( numNew ) synchronized ( this ) { \n\t\t$F8867 ( elements , getArray ) int len = elements . length ; \n\t\t$F133 ( temp , numNew ) int added = NUM00 ; \n\t\tfor ( $F2774 ( itr , c ) ) { \n\t\t\t$F8877 ( e , itr ) if ( indexOf ( e , elements , NUM00 , len ) < NUM00 && indexOf ( e , temp , NUM00 , added ) < NUM00 ) temp [ added ++ ] = e ; \n\t\t\t} \n\t\tif ( added != NUM00 ) { \n\t\t\t$F131 newElements = new Object [ len + added ] ; \n\t\t\t$F135 ( System , elements , newElements , len ) $F6483 ( System , temp , newElements , len , added ) setArray ( newElements ) ; \n\t\t\t} \n\t\treturn added ; \n\t\t} \n\t} \n"}, {"code": "private static final synchronized int nextPoolId $F72 $F124417 ( poolNumberSequence ) "}, {"code": "$F1 public void close $F72 throws IOException { \n\tif ( logger != null ) $F7958 ( logger , socket_was_closed ) if ( ! socket_was_closed ) { \n\t\tif ( handshake_started ) { \n\t\t\talertProtocol . alert ( AlertProtocol . WARNING , AlertProtocol . CLOSE_NOTIFY ) ; \n\t\t\ttry { \n\t\t\t\toutput . write ( alertProtocol . wrap ( ) ) ; \n\t\t\t\t} \n\t\t\t$F18071 alertProtocol . setProcessed ( ) ; \n\t\t\t} \n\t\tshutdown ( ) ; \n\t\tcloseTransportLayer ( ) ; \n\t\tsocket_was_closed = _BOOL ; \n\t\t} \n\t} \n"}, {"code": "protected static void registerLibrary ( ILibraryManager externalLibraryManager , String dataverse , String libraryName ) throws Exception { \n\tClassLoader classLoader = getLibraryClassLoader ( dataverse , libraryName ) ; \n\texternalLibraryManager . registerLibraryClassLoader ( dataverse , libraryName , classLoader ) ; \n\t} \n"}, {"code": "public void autoSize $F72 { \n\t$F18748 ( autoResize ) } \n"}, {"code": "public void testCase9 $F72 { \n\t$F15139 int aSign = NUM00 ; \n\tbyte $F3018 = { \n\t\tNUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } \n\t; \n\t$F3023 ( aNumber , aSign , aBytes ) BigInteger bNumber = BigInteger . ONE ; \n\t$F7838 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) } \n"}, {"code": "public static String rawMD5 ( String s ) { \n\treturn binl2rstr ( binl2md5 ( rstr2binl ( s ) , $F9483 ( s ) ) ) ; \n\t} \n"}, {"code": "public boolean isQuestCompleted ( final String name ) { \n\tfinal String info = getQuest ( name , NUM00 ) ; \n\t$F1933 ( info , _BOOL ) $F786 ( info ) } \n"}, {"code": "$F52843 ( packed , map , i , j , count , value ) "}, {"code": "public void testZeroZero $F72 $F9149 ( numA , numB , res , aNumber , bNumber , result , assertTrue ) "}, {"code": "$F160927 static float ceil ( float value ) { \n\treturn ( float ) Math . ceil ( value ) ; \n\t} \n"}, {"code": "private final User removeUser ( String channel , String nick ) { \n\t$F37156 ( channel ) User user = new User ( NUM00 , nick ) ; \n\tsynchronized ( _channels ) { \n\t\tHashtable < User , User > users = _channels . get ( channel ) ; \n\t\tif ( users != null ) $F20067 ( users , user ) } \n\t$F1274 } \n"}, {"code": "public static void translatePos ( $F36712 moveNodes , Map < GraphNode , Point2D > positions , Translater intoRegion ) { \n\tfor ( GraphNode node : moveNodes ) { \n\t\tPoint2D location = translateNode ( node , positions , intoRegion ) ; \n\t\tif ( null == location ) $F1448 positions . put ( node , location ) ; \n\t\t} \n\t} \n"}, {"code": "public void ifPresentOrElse ( LongConsumer action , Runnable emptyAction ) { \n\tif ( isPresent ) $F17670 ( action , value ) else $F21688 ( emptyAction ) } \n"}, {"code": "public void testToBigIntegerPos2 $F72 $F114431 ( a , bNumber , aNumber , result , assertTrue ) "}, {"code": "private String cleanupPath ( String fileName ) { \n\t$F1338 ( fileName ) $F2936 ( fileName ) $F2936 ( fileName ) if $F3106 ( fileName ) { \n\t\treturn fileName ; \n\t\t} \n\tif $F3106 ( fileName ) $F1948 ( fileName ) return NUM00 + fileName ; \n\t} \n"}, {"code": "public static $F6969 invocationHandlerReturnType $F60993 ( type ) { \n\tif $F41267 ( type ) return $F94727 ; \n\tif $F94715 ( type ) return $F62127 ; \n\tif $F41243 ( type ) return $F20774 ; \n\tif $F41249 ( type ) return $F58950 ; \n\tif $F41233 ( type ) return $F58948 ; \n\tif $F41238 ( type ) return $F10063 ; \n\tif $F41261 ( type ) return $F94724 ; \n\tif $F41255 ( type ) return $F61970 ; \n\treturn type ; \n\t} \n"}, {"code": "private $F9341 findNode $F154318 ( key ) { \n\tfor ( $F589 ) { \n\t\t$F45432 ( b , findPredecessor , key ) $F35175 ( n , b ) for ( $F589 ) { \n\t\t\t$F1275 ( n ) $F35175 ( f , n ) $F45438 ( n , b ) Object v = n . value ; \n\t\t\t$F45440 ( v , n , b , f ) $F45442 ( v , n , b ) $F45446 ( c , key , n ) $F116 ( c , n ) $F94834 ( c ) b = n ; \n\t\t\tn = f ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private static Script scriptFromString ( String scriptString , ScriptType scriptType ) { \n\treturn new Script ( scriptString , scriptType ) ; \n\t} \n"}, {"code": "private void finishNestedMode $F72 throws SAXException { \n\tmd = ( ModeData ) modeDataStack . pop ( ) ; \n\t} \n"}, {"code": "public void addPropertyChangeListener ( final PropertyChangeListener listener ) { \n\tpropertyChangeSupport . addPropertyChangeListener ( listener ) ; \n\t} \n"}, {"code": "protected int skipWhitespace ( int c ) throws IOException { \n\twhile $F37111 ( c ) $F145798 ( c , reader ) return c ; \n\t} \n"}, {"code": "public Builder noCache $F72 { \n\tthis . noCache = _BOOL ; \n\treturn this ; \n\t} \n"}, {"code": "$F1431 public void computeClosestPoints $F72 { \n\tfloat centerX = contentRect . centerX ( ) ; \n\tfloat closestDistance = Float . MAX_VALUE ; \n\tfor ( int i = NUM00 ; \n\ti < pointsCountWithinXRange * NUM00 ; \n\ti += NUM00 ) { \n\t\tfloat x = getDrawX ( xRangePoints [ i ] ) ; \n\t\t$F40429 ( distance , Math , x , centerX ) if ( distance <= closestDistance ) { \n\t\t\tif ( distance == closestDistance ) { \n\t\t\t\tclosestPointsCount ++ ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tclosestPointsCount = NUM00 ; \n\t\t\t\t} \n\t\t\tclosestDistance = distance ; \n\t\t\tif ( closestPointsBuffer . length < ( closestPointsCount * NUM00 + NUM00 ) ) { \n\t\t\t\tclosestPointsBuffer = new float $F10562 ( closestPointsBuffer ) ; \n\t\t\t\t} \n\t\t\tclosestPointsBuffer [ closestPointsCount * NUM00 + NUM00 ] = xRangePoints [ i ] ; \n\t\t\tclosestPointsBuffer [ closestPointsCount * NUM00 + NUM00 ] = xRangePoints [ i + NUM00 ] ; \n\t\t\t} \n\t\t} \n\tif ( pointsCountWithinXRange > NUM00 ) { \n\t\tclosestPointsCount ++ ; \n\t\t} \n\t} \n"}, {"code": "protected TransformedString stem ( String words ) { \n\t$F83 ( builder ) $F26691 $F8690 ( indexMap ) ; \n\tInteger index = NUM00 ; \n\t$F7876 ( content , words ) while $F5973 ( content ) { \n\t\tindexMap . put ( builder . length ( ) , index ) ; \n\t\tif ( Character . isAlphabetic ( content . charAt ( NUM00 ) ) ) { \n\t\t\t$F1150 ( m , WORD_PATTERN , content ) m . find ( ) ; \n\t\t\t$F45144 ( match , m ) CharSequence stemmedMatch = stemmer . stem ( match ) ; \n\t\t\tbuilder . append ( stemmedMatch ) ; \n\t\t\t$F90433 ( index , match ) $F11255 ( content , match ) } \n\t\telse { \n\t\t\tbuilder . append ( $F606 ( content ) ) ; \n\t\t\t$F3108 ( content ) index ++ ; \n\t\t\t} \n\t\t} \n\tindexMap . put ( builder . length ( ) , index ) ; \n\treturn new TransformedString $F122301 ( words , builder , indexMap ) ; \n\t} \n"}, {"code": "$F1 public void onLayoutChildren ( $F40828 recycler , RecyclerView . State state ) { \n\tif ( state . getItemCount ( ) == NUM00 ) $F14411 ( detachAndScrapAttachedViews , recycler ) if ( state . isPreLayout ( ) ) { \n\t\tif $F37713 ( getChildCount ) $F665 $F3666 ( childCount , getChildCount ) for ( $F119 ( i , childCount ) ) { \n\t\t\tView child = getChildAt ( i ) ; \n\t\t\tRecyclerView . LayoutParams lp = ( RecyclerView . LayoutParams ) child . getLayoutParams ( ) ; \n\t\t\tif ( lp . isItemRemoved ( ) ) { \n\t\t\t\tremovedTopAndBoundPositionCount ++ ; \n\t\t\t\tif ( firstChangedPosition == - NUM00 || firstAttachedItemPosition + i < firstChangedPosition ) { \n\t\t\t\t\tfirstChangedPosition = firstAttachedItemPosition + i ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tif ( removedTopAndBoundPositionCount != NUM00 ) { \n\t\t\tlayoutAttachedAndAppearingViews ( recycler , state ) ; \n\t\t\t} \n\t\tisBeforePreLayout = _BOOL ; \n\t\t$F665 } \n\tif $F37713 ( getChildCount ) { \n\t\tinitializeLayoutParameters ( ) ; \n\t\tfillGrid ( recycler , state , _BOOL ) ; \n\t\t$F665 } \n\tif ( isNotifyDataSetChanged ) { \n\t\tdetachAndScrapAttachedViews ( recycler ) ; \n\t\tinitializeLayoutParameters ( ) ; \n\t\tfillGrid ( recycler , state , _BOOL ) ; \n\t\tisNotifyDataSetChanged = _BOOL ; \n\t\t$F665 } \n\tif ( firstChangedPosition == - NUM00 ) { \n\t\tmCurrentPosition = firstAttachedItemPosition ; \n\t\tlastAttachedItemPosition = firstAttachedItemPosition ; \n\t\ttopBorder = getPaddingTop ( ) ; \n\t\tbottomBorder = getHeight ( ) - getPaddingBottom ( ) ; \n\t\tspanBottom = Arrays . copyOf ( spanTop , mSpanCount ) ; \n\t\tupdateSpanBottomParameters ( ) ; \n\t\tdetachAndScrapAttachedViews ( recycler ) ; \n\t\tfillGrid ( recycler , state , _BOOL ) ; \n\t\tisBeforePreLayout = _BOOL ; \n\t\t$F665 } \n\tfor ( int i = firstChangedPosition ; \n\ti < state . getItemCount ( ) ; \n\ti ++ ) { \n\t\tif ( itemLayoutWidthCache . get ( i , NUM00 ) != NUM00 ) { \n\t\t\titemLayoutWidthCache . delete ( i ) ; \n\t\t\titemLayoutHeightCache . delete ( i ) ; \n\t\t\titemOccupiedStartSpan . delete ( i ) ; \n\t\t\t} \n\t\tif ( fakeItemLayoutWidthCache . get ( i , NUM00 ) != NUM00 ) { \n\t\t\titemLayoutWidthCache . put ( i , fakeItemLayoutWidthCache . get ( i ) ) ; \n\t\t\titemLayoutHeightCache . put ( i , fakeItemLayoutHeightCache . get ( i ) ) ; \n\t\t\titemOccupiedStartSpan . put ( i , fakeItemOccupiedStartSpan . get ( i ) ) ; \n\t\t\t} \n\t\t} \n\t$F725 ( fakeItemLayoutWidthCache ) $F725 ( fakeItemLayoutHeightCache ) $F725 ( fakeItemOccupiedStartSpan ) detachAndScrapAttachedViews ( recycler ) ; \n\tif ( firstChangedPosition < firstAttachedItemPosition ) { \n\t\tmCurrentPosition = firstAttachedItemPosition ; \n\t\tlastAttachedItemPosition = firstAttachedItemPosition ; \n\t\ttopBorder = getPaddingTop ( ) ; \n\t\tbottomBorder = getHeight ( ) - getPaddingBottom ( ) ; \n\t\tspanBottom = Arrays . copyOf ( spanTop , mSpanCount ) ; \n\t\tupdateSpanBottomParameters ( ) ; \n\t\tfillGrid ( recycler , state , _BOOL ) ; \n\t\tif ( spanBottomMax < bottomBorder ) { \n\t\t\tscrollBy ( spanBottomMax - bottomBorder , recycler , state ) ; \n\t\t\t} \n\t\tlayoutDisappearingViews ( recycler , state ) ; \n\t\t} \n\telse { \n\t\tmCurrentPosition = firstAttachedItemPosition ; \n\t\tlastAttachedItemPosition = firstAttachedItemPosition ; \n\t\ttopBorder = getPaddingTop ( ) ; \n\t\tbottomBorder = getHeight ( ) - getPaddingBottom ( ) ; \n\t\tspanBottom = Arrays . copyOf ( spanTop , mSpanCount ) ; \n\t\tupdateSpanBottomParameters ( ) ; \n\t\tfillGrid ( recycler , state , _BOOL ) ; \n\t\tif ( spanBottomMax - bottomBorder < NUM00 ) { \n\t\t\tscrollBy ( spanBottomMax - bottomBorder , recycler , state ) ; \n\t\t\t} \n\t\t} \n\tisBeforePreLayout = _BOOL ; \n\tfirstChangedPosition = - NUM00 ; \n\tremovedTopAndBoundPositionCount = NUM00 ; \n\t$F725 ( disappearingViewCache ) } \n"}, {"code": "void clear $F72 $F5122 ( valueNumbersUnconditionallyDereferenced , derefLocationSetMap ) "}, {"code": "$F31980 ( text , URLEncoder ) "}, {"code": "public $F806 list $F72 throws RemoteException { \n\t$F806 names ; \n\tsynchronized ( bindings ) { \n\t\t$F2199 ( i , bindings ) $F58180 ( names , i ) $F42745 ( enum_ , bindings ) while ( ( -- i ) >= NUM00 ) names [ i ] = enum_ . nextElement ( ) ; \n\t\t} \n\treturn names ; \n\t} \n"}, {"code": "public static void assertQEx ( String message , SolrQueryRequest req , int code ) { \n\ttry { \n\t\tignoreException ( NUM00 ) ; \n\t\th . query ( req ) ; \n\t\tfail ( message ) ; \n\t\t} \n\tcatch ( SolrException sex ) { \n\t\tassertEquals ( code , sex . code ( ) ) ; \n\t\t} \n\t$F270358 ( e2 ) finally $F1210 ( unIgnoreException ) } \n"}, {"code": "public static void copyFile ( String fromFile , String toFile ) throws IOException { \n\tcopyFile ( new File ( fromFile ) , new File ( toFile ) ) ; \n\t} \n"}, {"code": "protected synchronized void readAndVerify $F72 throws InvalidKeyException , IOException , FileEncryptionException , IllegalBlockSizeException , BadPaddingException , FileIntegrityException { \n\tif ( backingRandomAccessFile . length ( ) < headerSize ( ) ) $F112401 if ( shareKey == null || shareKey . getEncoded ( ) . length == NUM00 ) $F112401 else { \n\t\t$F2268 ( headerAuthHMac ) KeyParameter keyParameter = new KeyParameter $F4697 ( shareKey ) ; \n\t\theaderAuthHMac . init ( keyParameter ) ; \n\t\t} \n\tlong oldpos = backingRandomAccessFile . getFilePointer ( ) ; \n\t$F927 ( backingRandomAccessFile ) $F96 header_data = new byte [ headerSize ( ) - FileHeader . AUTH_TAG_SIZE ] ; \n\tbackingRandomAccessFile . read ( header_data ) ; \n\tbackingRandomAccessFile . read ( headerAuthTag ) ; \n\tbackingRandomAccessFile . seek ( oldpos ) ; \n\t$F6163 ( headerAuthHMac , header_data ) $F2175 ( hmacRef , AUTH_TAG_SIZE ) $F137382 ( headerAuthHMac , hmacRef ) if $F1209 ( Arrays , hmacRef , headerAuthTag ) { \n\t\tthrow new FileIntegrityException $F580 ; \n\t\t} \n\telse { \n\t\tDataInputStream istream = new DataInputStream $F24702 ( header_data ) ; \n\t\t$F82619 ( tmpmagic , PANBOX_FILE_MAGIC ) istream . read ( tmpmagic ) ; \n\t\tif $F1209 ( Arrays , tmpmagic , PANBOX_FILE_MAGIC ) $F112401 $F82619 ( tmpversion , PANBOX_FILE_VERSION ) istream . read ( tmpversion ) ; \n\t\tif $F1209 ( Arrays , tmpversion , PANBOX_FILE_VERSION ) { \n\t\t\tthrow new FileEncryptionException $F3943 ( PANBOX_FILE_VERSION ) ; \n\t\t\t} \n\t\tthis . shareKeyVersion = istream . readInt ( ) ; \n\t\t$F96 tmpencryptedFileKey = new byte [ KeyConstants . SYMMETRIC_FILE_KEY_SIZE_BYTES ] ; \n\t\tistream . read ( tmpencryptedFileKey ) ; \n\t\t$F116470 ( filekeyCipher , Cipher , shareKey ) this . decryptedFileKey = new SecretKeySpec ( filekeyCipher . doFinal ( tmpencryptedFileKey ) , getAlgorithmIdentifier ( ) ) ; \n\t\tif ( implementsAuthentication ( ) ) { \n\t\t\t$F96 tmpFileAuthBuf = new byte [ AuthTagVerifier . AUTH_TAG_SIZE ] ; \n\t\t\tistream . read ( tmpFileAuthBuf ) ; \n\t\t\t$F96 zeroBuf = new byte [ AuthTagVerifier . AUTH_TAG_SIZE ] ; \n\t\t\t$F26770 ( Arrays , zeroBuf ) if $F12512 ( Arrays , zeroBuf , tmpFileAuthBuf ) $F82623 ( setFileAuthTag ) else { \n\t\t\t\tsetFileAuthTag ( tmpFileAuthBuf ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F59 ( istream ) } \n\t} \n"}, {"code": "public void mouseReleased ( MouseEvent e ) { \n\t$F128225 vv = ( $F128225 ) e . getSource ( ) ; \n\tdown = null ; \n\tvv . setCursor ( $F88367 ( Cursor ) ) ; \n\t} \n"}, {"code": "$F3594 ( oredCriteria , orderByClause , distinct , _BOOL ) "}, {"code": "$F179160 public void changeLocoSpeed ( DccThrottle t , Section sec , float speed ) { \n\tif ( sec == referenced && speed == desiredSpeedStep ) { \n\t\t$F35060 ( log ) $F665 } \n\tfloat sectionLength = sec . getActualLength ( ) ; \n\tif $F585 ( log ) { \n\t\tlog . debug ( $F16018 ( sec ) ) ; \n\t\t} \n\tif ( sec == referenced ) { \n\t\tdistanceRemaining = distanceRemaining - getDistanceTravelled ( _throttle . getIsForward ( ) , _throttle . getSpeedSetting ( ) , ( ( float ) ( System . nanoTime ( ) - lastTimeTimerStarted ) / NUM00 ) ) ; \n\t\tsectionLength = distanceRemaining ; \n\t\t} \n\telse { \n\t\treferenced = sec ; \n\t\t} \n\tchangeLocoSpeed ( t , sectionLength , speed ) ; \n\t} \n"}, {"code": "private void drawOffsets ( final Graphics g ) { \n\t$F3666 ( linesToDraw , getNumberOfVisibleRows ) final String formatString = m_addressMode == AddressMode . BIT32 ? NUM00 : NUM00 ; \n\tfinal long elementSize = getElementSize ( ) ; \n\tfinal long baseAddress = m_model . getStartAddress ( ) == - NUM00 ? NUM00 : m_model . getStartAddress ( ) ; \n\tfor ( $F119 ( i , linesToDraw ) ) { \n\t\tfinal int elementIndex = m_firstRow + i ; \n\t\tfinal long elementAddress = baseAddress + ( elementIndex * elementSize ) ; \n\t\tfinal String offsetString = String . format ( formatString , elementAddress ) ; \n\t\tif ( elementAddress == m_model . getStackPointer ( ) ) { \n\t\t\thighlightStackPointer ( g , i ) ; \n\t\t\t} \n\t\tif ( isEnabled ( ) ) $F158293 ( g , m_fontColorOffsets ) else { \n\t\t\tg . setColor ( m_disabledColor != m_bgColorOffset ? m_disabledColor : Color . WHITE ) ; \n\t\t\t} \n\t\tg . drawString ( offsetString , PADDING_LEFT - ( m_charWidth * m_firstColumn ) , m_paddingTop + ( i * m_rowHeight ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static final String crypt ( String salt , String original ) { \n\twhile $F3599 ( salt ) salt += NUM00 ; \n\t$F4000 ( buffer ) $F12685 ( charZero , salt ) $F12685 ( charOne , salt ) buffer . setCharAt ( NUM00 , charZero ) ; \n\tbuffer . setCharAt ( NUM00 , charOne ) ; \n\tint Eswap0 = con_salt [ charZero ] ; \n\tint Eswap1 = con_salt [ charOne ] < < NUM00 ; \n\tbyte key [ ] = $F10314 ; \n\tfor ( $F1139 ( i , key ) ) key [ i ] = $F19905 ; \n\tfor ( int i = NUM00 ; \n\ti < key . length && i < original . length ( ) ; \n\ti ++ ) { \n\t\t$F8205 ( iChar , original , i ) key [ i ] = ( byte ) ( iChar < < NUM00 ) ; \n\t\t} \n\tint schedule [ ] = des_set_key ( key ) ; \n\tint out [ ] = body ( schedule , Eswap0 , Eswap1 ) ; \n\tbyte $F1310 = $F10314 ; \n\tintToFourBytes ( out [ NUM00 ] , b , NUM00 ) ; \n\tintToFourBytes ( out [ NUM00 ] , b , NUM00 ) ; \n\tb [ NUM00 ] = NUM00 ; \n\tfor ( int i = NUM00 , y = NUM00 , u = NUM00 ; \n\ti < NUM00 ; \n\ti ++ ) { \n\t\tfor ( int j = NUM00 , c = NUM00 ; \n\t\tj < NUM00 ; \n\t\tj ++ ) { \n\t\t\tc <<= NUM00 ; \n\t\t\tif ( ( b [ y ] & u ) != NUM00 ) c |= NUM00 ; \n\t\t\tu >>>= NUM00 ; \n\t\t\tif ( u == NUM00 ) { \n\t\t\t\ty ++ ; \n\t\t\t\tu = NUM00 ; \n\t\t\t\t} \n\t\t\tbuffer . setCharAt ( i , ( char ) cov_2char [ c ] ) ; \n\t\t\t} \n\t\t} \n\t$F27059 ( buffer ) } \n"}, {"code": "public static boolean prefixedWith ( String a , String b ) { \n\t$F12418 ( a , b , _BOOL ) $F112225 ( a , b ) } \n"}, {"code": "public static String readStream ( InputStream inputStream ) throws IOException { \n\t$F1338 ( inputStream ) $F1538 ( bout ) $F12496 ( buf ) int r ; \n\t$F29757 ( r , inputStream , buf , bout ) $F1662 ( bout ) } \n"}, {"code": "private Instances makeHeader $F72 { \n\t$F53630 ( fv ) fv . add ( $F84263 ) ; \n\tfv . add ( $F84263 ) ; \n\tfv . add ( $F84263 ) ; \n\treturn new Instances ( NUM00 , fv , NUM00 ) ; \n\t} \n"}, {"code": "private static ICloseableIterator < IBindingSet > iterator ( final IRunningQuery runningQuery ) { \n\tfinal ICloseableIterator < IBindingSet [ ] > it1 = runningQuery . iterator ( ) ; \n\tfinal ICloseableIterator < IBindingSet > it2 = new Dechunkerator < IBindingSet > ( it1 ) ; \n\tfinal ICloseableIterator < IBindingSet > it3 = new RunningQueryCloseableIterator < IBindingSet > ( runningQuery , it2 ) ; \n\treturn it3 ; \n\t} \n"}, {"code": "public void makeImmutable $F72 { \n\t$F4246 ( isMutable , _BOOL ) } \n"}, {"code": "public final double doOperation $F72 throws OperatorFailedException { \n\t$F62063 ( dim , parameter ) final int dim1 = MathUtils . nextInt ( dim ) ; \n\tint dim2 = dim1 ; \n\twhile ( dim1 == dim2 ) { \n\t\tdim2 = MathUtils . nextInt ( dim ) ; \n\t\t} \n\t$F62068 ( scalar1 , parameter , dim1 ) $F62068 ( scalar2 , parameter , dim2 ) final double d = MathUtils . nextDouble ( ) * delta * scalar1 ; \n\tscalar1 -= d ; \n\tif ( parameterWeights [ dim1 ] != parameterWeights [ dim2 ] ) { \n\t\tscalar2 += d * ( double ) parameterWeights [ dim1 ] / ( double ) parameterWeights [ dim2 ] ; \n\t\t} \n\telse { \n\t\tscalar2 += d ; \n\t\t} \n\tparameter . setParameterValue ( dim1 , scalar1 ) ; \n\tparameter . setParameterValue ( dim2 , scalar2 ) ; \n\treturn Math . log ( scalar2 / ( scalar1 + d ) ) ; \n\t} \n"}, {"code": "$F1 public final boolean isOpen $F72 $F1522 ( isOpen ) "}, {"code": "private static StreamTokenizer createTokenizer ( String s ) { \n\tStreamTokenizer st = new StreamTokenizer $F33896 ( s ) ; \n\t$F61733 ( st ) $F33902 ( st ) $F33902 ( st ) $F33902 ( st ) $F33902 ( st ) $F33902 ( st ) $F33902 ( st ) st . wordChars ( NUM00 + NUM00 , NUM00 ) ; \n\tst . whitespaceChars ( NUM00 , NUM00 ) ; \n\tst . lowerCaseMode ( _BOOL ) ; \n\t$F33903 ( st ) st . slashSlashComments ( _BOOL ) ; \n\tst . slashStarComments ( _BOOL ) ; \n\treturn st ; \n\t} \n"}, {"code": "public static String removeChars ( String str , String oldchars ) { \n\tint pos = indexOfChars ( str , oldchars ) ; \n\t$F5881 ( pos , str ) $F83 ( buf ) int start = NUM00 ; \n\tdo { \n\t\t$F13037 ( buf , str , start , pos ) start = pos + NUM00 ; \n\t\tpos = indexOfChars ( str , oldchars , start ) ; \n\t\t} \n\twhile ( pos != - NUM00 ) ; \n\tif $F7007 ( start , str ) { \n\t\t$F13047 ( buf , str , start ) } \n\t$F92 ( buf ) } \n"}, {"code": "private void sortUnitsToMove ( final $F336297 units , final Route route ) { \n\tif $F4251 ( units ) $F932 else if ( route == null ) { \n\t\tfinal Exception nullRouteError = ( new IllegalArgumentException $F580 ) ; \n\t\tClientLogger . logQuietly ( NUM00 , nullRouteError ) ; \n\t\t} \n\tfinal Comparator $F101 unitComparator ; \n\tif ( route . isUnload ( ) && Match . someMatch ( units , Matches . UnitIsLand ) ) { \n\t\tunitComparator = UnitComparator . getUnloadableUnitsComparator ( units , route , getUnitOwner ( units ) ) ; \n\t\t} \n\telse { \n\t\tunitComparator = UnitComparator . getMovableUnitsComparator ( units , route ) ; \n\t\t} \n\tCollections . sort ( units , unitComparator ) ; \n\t} \n"}, {"code": "public boolean implementsInterface ( ReferenceBinding anInterface , boolean searchHierarchy ) { \n\tif ( this == anInterface ) return _BOOL ; \n\t$F262544 interfacesToVisit = null ; \n\tint nextPosition = NUM00 ; \n\tReferenceBinding currentType = this ; \n\tdo { \n\t\t$F262544 itsInterfaces = currentType . superInterfaces ( ) ; \n\t\tif ( itsInterfaces != null && itsInterfaces != Binding . NO_SUPERINTERFACES ) { \n\t\t\tif ( interfacesToVisit == null ) { \n\t\t\t\tinterfacesToVisit = itsInterfaces ; \n\t\t\t\tnextPosition = interfacesToVisit . length ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tint itsLength = itsInterfaces . length ; \n\t\t\t\tif ( nextPosition + itsLength >= interfacesToVisit . length ) System . arraycopy ( interfacesToVisit , NUM00 , interfacesToVisit = new ReferenceBinding [ nextPosition + itsLength + NUM00 ] , NUM00 , nextPosition ) ; \n\t\t\t\tnextInterface : for ( $F119 ( a , itsLength ) ) { \n\t\t\t\t\tReferenceBinding next = itsInterfaces [ a ] ; \n\t\t\t\t\tfor ( $F119 ( b , nextPosition ) ) if ( next == interfacesToVisit [ b ] ) continue nextInterface ; \n\t\t\t\t\tinterfacesToVisit [ nextPosition ++ ] = next ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\twhile ( searchHierarchy && ( currentType = currentType . superclass ( ) ) != null ) ; \n\tfor ( $F119 ( i , nextPosition ) ) { \n\t\tcurrentType = interfacesToVisit [ i ] ; \n\t\tif ( currentType . isEquivalentTo ( anInterface ) ) return _BOOL ; \n\t\t$F262544 itsInterfaces = currentType . superInterfaces ( ) ; \n\t\tif ( itsInterfaces != null && itsInterfaces != Binding . NO_SUPERINTERFACES ) { \n\t\t\tint itsLength = itsInterfaces . length ; \n\t\t\tif ( nextPosition + itsLength >= interfacesToVisit . length ) System . arraycopy ( interfacesToVisit , NUM00 , interfacesToVisit = new ReferenceBinding [ nextPosition + itsLength + NUM00 ] , NUM00 , nextPosition ) ; \n\t\t\tnextInterface : for ( $F119 ( a , itsLength ) ) { \n\t\t\t\tReferenceBinding next = itsInterfaces [ a ] ; \n\t\t\t\tfor ( $F119 ( b , nextPosition ) ) if ( next == interfacesToVisit [ b ] ) continue nextInterface ; \n\t\t\t\tinterfacesToVisit [ nextPosition ++ ] = next ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public Road ( int id , String name , Intersection from , Intersection to , RoadClass roadClass , RoadLayer roadLayer ) { \n\tthis . id = id ; \n\tthis . name = name ; \n\tthis . roadLayer = roadLayer ; \n\tpoints = new Waypoint $F380 ; \n\tsetIntersections ( from , to ) ; \n\tthis . roadClass = roadClass ; \n\tcreateLines ( ) ; \n\tmodified = _BOOL ; \n\t} \n"}, {"code": "$F1 public void process ( WatchedEvent event ) { \n\tKeeperState eventState = event . getState ( ) ; \n\tEventType eventType = event . getType ( ) ; \n\t$F21153 ( log , eventState , eventType ) if ( eventState == KeeperState . SyncConnected ) { \n\t\t$F38783 ( connectedSignal ) $F10635 ( log , connectionString ) } \n\t} \n"}, {"code": "private void initProperties ( String filePropertiesName ) { \n\treadFromClassPath ( filePropertiesName ) ; \n\tPath curDirPath = getFileInCurrentDir ( filePropertiesName ) ; \n\tif $F97092 ( Files , curDirPath ) { \n\t\ttry ( InputStream curFolder = Files . newInputStream ( curDirPath ) ) { \n\t\t\t$F25302 ( curFolder , load ) } \n\t\tcatch ( Exception e ) $F72290 ( filePropertiesName , e ) } \n\t} \n"}, {"code": "private void resetBounds $F72 $F39233 ( bottomProteinId , topProteinId ) "}, {"code": "private String property $F1947 ( classId , key , instanceId ) { \n\treturn PREFIX_OVF_PROP + makePropertyKey ( classId , key , instanceId ) ; \n\t} \n"}, {"code": "public String list ( String dir ) throws IOException { \n\tpassive ( ) ; \n\tsend ( NUM00 + dir ) ; \n\treadCode ( NUM00 ) ; \n\t$F1538 ( out ) IOUtils . copyAndClose ( inData , out ) ; \n\treadCode ( NUM00 ) ; \n\t$F1208 ( data , out ) $F22269 ( data ) } \n"}, {"code": "public static int convertPxToSp ( int pxSize ) { \n\treturn Math . round ( ( float ) pxSize * getDisplayDensity4Fonts ( ) ) ; \n\t} \n"}, {"code": "private void persistConsistencyGroups ( Collection < BlockConsistencyGroup > cgsToPersist ) { \n\tif $F45081 ( cgsToPersist ) { \n\t\tList < BlockConsistencyGroup > cgsToCreate = new ArrayList < BlockConsistencyGroup > $F72 ; \n\t\tList < BlockConsistencyGroup > cgsToUpdate = new ArrayList < BlockConsistencyGroup > $F72 ; \n\t\tfor ( BlockConsistencyGroup cg : cgsToPersist ) { \n\t\t\tif ( null == cg . getCreationTime ( ) ) $F207 ( cgsToCreate , cg ) else $F207 ( cgsToUpdate , cg ) } \n\t\tif $F5973 ( cgsToCreate ) { \n\t\t\t_dbClient . createObject ( cgsToCreate ) ; \n\t\t\t} \n\t\tif $F5973 ( cgsToUpdate ) { \n\t\t\t_dbClient . updateObject ( cgsToUpdate ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void requestPasswordChangedTime $F72 { \n\toperations . add ( PasswordPolicyStateOperationType . GET_PASSWORD_CHANGED_TIME ) ; \n\t} \n"}, {"code": "public static $F96 encodeRegionName ( String regionName ) { \n\t$F96 metadata ; \n\ttry { \n\t\t$F60661 ( jsonObject ) jsonObject . put ( JSON_FIELD_TAG , regionName ) ; \n\t\t$F1822 ( json , jsonObject ) metadata = json . getBytes ( JSON_CHARSET ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F56767 ( Log , TAG , e ) metadata = null ; \n\t\t} \n\treturn metadata ; \n\t} \n"}, {"code": "public boolean isValid $F72 { \n\tboolean valid = _BOOL ; \n\tif ( endtime . getTime ( ) < System . currentTimeMillis ( ) ) { \n\t\tvalid = _BOOL ; \n\t\t} \n\telse if ( starttime != null ) { \n\t\tif ( starttime . getTime ( ) > System . currentTimeMillis ( ) ) { \n\t\t\tvalid = _BOOL ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tif ( authtime . getTime ( ) > System . currentTimeMillis ( ) ) { \n\t\t\tvalid = _BOOL ; \n\t\t\t} \n\t\t} \n\treturn valid ; \n\t} \n"}, {"code": "public void testGetElementsByTagNameNS1 $F72 throws Throwable { \n\tDocument doc ; \n\tDocument newDoc ; \n\tDocumentType docType = null ; \n\tDOMImplementation domImpl ; \n\tNodeList childList ; \n\tString nullNS = null ; \n\t$F236 ( doc , load , builder ) $F28589 ( domImpl , doc ) newDoc = domImpl . createDocument ( nullNS , NUM00 , docType ) ; \n\t$F103343 ( childList , newDoc ) assertEquals ( NUM00 , NUM00 , childList . getLength ( ) ) ; \n\t} \n"}, {"code": "public static boolean addSeparatorIfNeeded ( JPopupMenu popupMenu ) { \n\tfinal int menuComponentCount = popupMenu . getComponentCount ( ) ; \n\t$F6482 ( menuComponentCount , _BOOL ) final Component lastMenuComponent = popupMenu . getComponent ( menuComponentCount - NUM00 ) ; \n\t$F46660 ( isPopupMenuSeparator , lastMenuComponent , _BOOL ) $F55657 ( popupMenu ) return _BOOL ; \n\t} \n"}, {"code": "public int groupSize ( String grpName ) { \n\tint res = NUM00 ; \n\tfor ( HadoopCounter counter : cntrs . values ( ) ) { \n\t\tif ( grpName . equals ( counter . group ( ) ) ) res ++ ; \n\t\t} \n\treturn res ; \n\t} \n"}, {"code": "public ResourceBundleEnumeration ( $F2689 set , $F14937 enumeration ) { \n\tthis . set = set ; \n\tthis . iterator = set . iterator ( ) ; \n\tthis . enumeration = enumeration ; \n\t} \n"}, {"code": "public static int toRGB ( ColorSpace colorSpace , float ... components ) { \n\t$F5415 rgb = colorSpace . toRGB ( components ) ; \n\tif ( rgb [ NUM00 ] < NUM00 || rgb [ NUM00 ] < NUM00 || rgb [ NUM00 ] < NUM00 || rgb [ NUM00 ] > NUM00 || rgb [ NUM00 ] > NUM00 || rgb [ NUM00 ] > NUM00 ) $F1083 return NUM00 | ( ( int ) ( rgb [ NUM00 ] * NUM00 ) < < NUM00 ) | ( ( int ) ( rgb [ NUM00 ] * NUM00 ) < < NUM00 ) | ( int ) ( rgb [ NUM00 ] * NUM00 ) ; \n\t} \n"}, {"code": "private static void skipNames ( ByteBuffer tableBuffer , int count ) { \n\tfor ( $F1316 ( i , count ) ) { \n\t\tByteUtil . forward ( tableBuffer , tableBuffer . getShort ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "private LogSource $F72 $F845 "}, {"code": "public Object2IntOpenHashMap $F9183 supportMap $F72 { \n\tList < ItemSet > itemSets = learn ( ) ; \n\tObject2IntOpenHashMap $F9183 confidenceMap = new Object2IntOpenHashMap $F200 $F716 ( itemSets ) ; \n\tfor ( ItemSet itemSet : itemSets ) { \n\t\tconfidenceMap . put ( itemSet . items , itemSet . support ) ; \n\t\t} \n\treturn confidenceMap ; \n\t} \n"}, {"code": "public static $F3803 makeFeatureIdListFromPrefixed $F4673 ( parameters ) { \n\t$F3803 featureIdList = FastList . newInstance ( ) ; \n\t$F397 ( parameters , featureIdList ) for ( $F150315 ( entry , parameters ) ) { \n\t\t$F3477 ( parameterName , entry ) if $F3106 ( parameterName ) { \n\t\t\t$F189249 ( productFeatureId , entry ) if $F35028 ( UtilValidate , productFeatureId ) $F207 ( featureIdList , productFeatureId ) } \n\t\t} \n\treturn featureIdList ; \n\t} \n"}, {"code": "private void updateOverscrollAnimation ( final int scrolledOffset ) { \n\t$F57400 ( mEdgeGlowLeft , mEdgeGlowRight ) int nextScrollPosition = mCurrentX + scrolledOffset ; \n\tif $F123959 ( mFlingTracker ) { \n\t\tif ( nextScrollPosition < NUM00 ) $F123967 ( overscroll , Math , scrolledOffset , mEdgeGlowLeft , getRenderWidth , mEdgeGlowRight ) else if ( nextScrollPosition > mMaxX ) $F123967 ( overscroll , Math , scrolledOffset , mEdgeGlowRight , getRenderWidth , mEdgeGlowLeft ) } \n\t} \n"}, {"code": "public void addLongSelectionListener ( SelectionListener listener ) { \n\t$F10057 ( listener ) $F24127 ( longSelectionListeners , listener ) } \n"}, {"code": "public void validate $F72 { \n\tfinal List < ValidationException > exceptionList = new ArrayList < ValidationException > $F72 ; \n\tvalidate ( exceptionList ) ; \n\tif $F5973 ( exceptionList ) throw exceptionList . get ( NUM00 ) ; \n\t} \n"}, {"code": "protected void installComponents $F72 { \n\tif $F120134 ( rendererPane , createCellRendererPane ) $F207 ( tree , rendererPane ) } \n"}, {"code": "private void runPendingRequests $F72 { \n\tint maxStartId = - NUM00 ; \n\tBillingRequest request ; \n\twhile ( ( request = mPendingRequests . peek ( ) ) != null ) { \n\t\tif ( request . runIfConnected ( ) ) { \n\t\t\t$F7042 ( mPendingRequests ) if ( maxStartId < request . getStartId ( ) ) { \n\t\t\t\tmaxStartId = request . getStartId ( ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse $F10990 ( bindToMarketBillingService ) } \n\tif ( maxStartId >= NUM00 ) { \n\t\tif ( Consts . DEBUG ) { \n\t\t\t$F26334 ( Log , TAG , maxStartId ) } \n\t\tstopSelf ( maxStartId ) ; \n\t\t} \n\t} \n"}, {"code": "public CActionDifferenceTraces ( final JFrame parent , final ITraceListProvider traceProvider , final TraceList trace1 , final TraceList trace2 ) { \n\tsuper ( String . format ( NUM00 , trace1 . getName ( ) , trace2 . getName ( ) ) ) ; \n\tm_parent = parent ; \n\tm_traceProvider = traceProvider ; \n\tm_trace1 = trace1 ; \n\tm_trace2 = trace2 ; \n\t} \n"}, {"code": "public static void copyFile ( File fromFile , File toFile ) throws IOException { \n\t$F4647 ( fileInputStream , fromFile ) $F4649 ( fileOutputStream , toFile ) int i ; \n\tbyte $F75368 = $F10314 ; \n\t$F29757 ( i , fileInputStream , bytes , fileOutputStream ) $F59 ( fileInputStream ) $F59 ( fileOutputStream ) } \n"}, {"code": "public final void updateTimeControlTitle $F72 { \n\t$F2027 tmpInfo = ctrl . getTimeLimit ( ) ; \n\t$F83 ( sb ) int tc = tmpInfo [ NUM00 ] ; \n\tint mps = tmpInfo [ NUM00 ] ; \n\tint inc = tmpInfo [ NUM00 ] ; \n\tif ( mps > NUM00 ) $F444 ( sb , mps ) $F6407 ( sb , timeToString , tc ) if ( ( inc > NUM00 ) || ( mps <= NUM00 ) ) { \n\t\t$F84 ( sb ) sb . append ( tmpInfo [ NUM00 ] / NUM00 ) ; \n\t\t} \n\t$F39858 ( summaryTitleText , sb ) } \n"}, {"code": "public static boolean isInstalled ( PackageManager packageManager , String packageName ) { \n\tList < PackageInfo > packs = packageManager . getInstalledPackages ( NUM00 ) ; \n\tfor ( $F2277 ( i , packs ) ) { \n\t\tif ( TextUtils . equals ( packs . get ( i ) . packageName , packageName ) ) return _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "$F92397 public void after $F72 throws SQLException { \n\tConnection connection = null ; \n\tStatement statement = null ; \n\ttry { \n\t\tconnection = getNewConnection ( _BOOL ) ; \n\t\t$F2715 ( statement , connection ) statement . executeQuery ( NUM00 ) ; \n\t\t} \n\t$F85840 ( statement , connection ) } \n"}, {"code": "private void attachHeader ( SIPHeader h ) { \n\t$F19273 ( h ) try { \n\t\tif ( h instanceof SIPHeaderList ) { \n\t\t\tSIPHeaderList $F1011 hl = ( SIPHeaderList $F1011 ) h ; \n\t\t\t$F19233 ( hl ) } \n\t\tattachHeader ( h , _BOOL , _BOOL ) ; \n\t\t} \n\tcatch ( SIPDuplicateHeaderException ex ) $F845 } \n"}, {"code": "@ Action ( $F3144 ) public String listWorkflow $F72 { \n\tif ( wfAction != null && wfAction . equals ( CollectionConstants . WF_ACTION_APPROVE ) ) fetchReceipts ( CollectionConstants . WF_ACTION_APPROVE ) ; \n\telse fetchReceipts ( CollectionConstants . WF_ACTION_SUBMIT ) ; \n\treturn INDEX ; \n\t} \n"}, {"code": "public static final List < Geo > polyNearPoly ( GeoArray s , GeoArray r , double near ) { \n\t$F17900 ( rlen , r ) $F17900 ( slen , s ) Geo pl0 = r . get ( rlen - NUM00 ) ; \n\tGeo pl1 = new Geo $F72 ; \n\tGeo sl0 = s . get ( slen - NUM00 ) ; \n\tGeo sl1 = new Geo $F72 ; \n\tList < Geo > list = null ; \n\tfor ( $F119 ( j , rlen ) ) { \n\t\tpl1 = r . get ( j , pl1 ) ; \n\t\tfor ( $F119 ( i , slen ) ) { \n\t\t\tsl1 = s . get ( i , sl1 ) ; \n\t\t\tGeo ret = segmentsIntersectOrNear ( sl0 , sl1 , pl0 , pl1 , near ) ; \n\t\t\tif ( ret != null ) { \n\t\t\t\tif ( list == null ) { \n\t\t\t\t\tlist = new LinkedList < Geo > $F72 ; \n\t\t\t\t\t} \n\t\t\t\tlist . add ( ret ) ; \n\t\t\t\t} \n\t\t\tsl0 = sl1 ; \n\t\t\t} \n\t\tpl0 = pl1 ; \n\t\t} \n\treturn list ; \n\t} \n"}, {"code": "public void initParam ( Object obj ) { \n\tparamObject = obj ; \n\tEnumeration < AbstractParamPanel > en = tablePanel . elements ( ) ; \n\tAbstractParamPanel panel = null ; \n\twhile $F1444 ( en ) { \n\t\t$F1445 ( panel , en ) panel . initParam ( obj ) ; \n\t\t} \n\t} \n"}, {"code": "public void updateTopic ( String topic , DbContextRule rule ) { \n\ttopic = StringUtils . toLowerEnglish ( topic ) ; \n\tRuleHead head = ruleMap . get ( topic ) ; \n\tif ( head == null ) { \n\t\thead = new RuleHead ( NUM00 , topic , rule ) ; \n\t\truleMap . put ( topic , head ) ; \n\t\tstatements . add ( head ) ; \n\t\t} \n\telse { \n\t\thead . setRule ( rule ) ; \n\t\t} \n\t} \n"}, {"code": "public static double log10 ( double x ) { \n\treturn Math . log ( x ) / LOG10 ; \n\t} \n"}, {"code": "public static int isButtonOnScreen ( final String buttonKey ) { \n\tComponent onScreen ; \n\ttry { \n\t\tonScreen = BubbleWindow . findButton ( buttonKey , RapidMinerGUI . getMainFrame ( ) ) ; \n\t\t} \n\tcatch ( NullPointerException e ) { \n\t\treturn OBJECT_NOT_ON_SCREEN ; \n\t\t} \n\t$F1933 ( onScreen , OBJECT_NOT_ON_SCREEN ) int xposition = onScreen . getLocationOnScreen ( ) . x ; \n\tint yposition = onScreen . getLocationOnScreen ( ) . y ; \n\tint otherXposition = xposition + onScreen . getWidth ( ) ; \n\tint otherYposition = yposition + onScreen . getHeight ( ) ; \n\tWindow frame = RapidMinerGUI . getMainFrame ( ) ; \n\tif ( otherXposition <= frame . getWidth ( ) && otherYposition <= frame . getHeight ( ) && xposition > NUM00 && yposition > NUM00 ) { \n\t\treturn OBJECT_SHOWING_ON_SCREEN ; \n\t\t} \n\telse { \n\t\treturn OBJECT_NOT_SHOWING ; \n\t\t} \n\t} \n"}, {"code": "$F129060 ( views , direction , focusableMode , focusableCount , descendantFocusability , getDescendantFocusability , FOCUS_BLOCK_DESCENDANTS , i , getChildCount , child , getChildAt , VISIBLE , ii , infoForChild , mCurItem , FOCUS_AFTER_DESCENDANTS , isFocusable , FOCUSABLES_TOUCH_MODE , isInTouchMode , isFocusableInTouchMode , this ) "}, {"code": "public static boolean reachable ( InetAddress addr , int reachTimeout ) { \n\ttry { \n\t\treturn addr . isReachable ( reachTimeout ) ; \n\t\t} \n\tcatch ( IOException ignore ) { \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "protected static String timestr ( long time_val , long total_time ) { \n\tboolean neg ; \n\tlong ms = NUM00 ; \n\tlong sec = NUM00 ; \n\tlong percent10 ; \n\tString pad ; \n\tneg = time_val < NUM00 ; \n\tif ( neg ) time_val = - time_val ; \n\tms = time_val % NUM00 ; \n\tsec = time_val / NUM00 ; \n\tif ( sec < NUM00 ) pad = NUM00 ; \n\telse if ( sec < NUM00 ) pad = NUM00 ; \n\telse if ( sec < NUM00 ) pad = NUM00 ; \n\telse pad = NUM00 ; \n\tpercent10 = ( time_val * NUM00 ) / total_time ; \n\treturn ( neg ? NUM00 : NUM00 ) + pad + sec + NUM00 + ( ( ms % NUM00 ) / NUM00 ) + ( ( ms % NUM00 ) / NUM00 ) + ( ms % NUM00 ) + NUM00 + NUM00 + percent10 / NUM00 + NUM00 + percent10 % NUM00 + NUM00 ; \n\t} \n"}, {"code": "public static Tree rotateByName ( Tree tree ) { \n\treturn new SimpleTree ( rotateNodeByName ( tree , tree . getRoot ( ) ) ) ; \n\t} \n"}, {"code": "@ Subscribe public void onEvent ( SearchInPosition event ) { \n\tList < LatLng > list = MapHelper . getSearchArea ( event . getSteps ( ) , new LatLng ( event . getPosition ( ) . latitude , event . getPosition ( ) . longitude ) ) ; \n\tsnackMe ( getString ( R . string . toast_searching ) ) ; \n\tnianticManager . getGyms ( event . getPosition ( ) . latitude , event . getPosition ( ) . longitude , NUM00 ) ; \n\tnianticManager . getPokeStops ( event . getPosition ( ) . latitude , event . getPosition ( ) . longitude , NUM00 ) ; \n\tnianticManager . getLuredPokemon ( event . getPosition ( ) . latitude , event . getPosition ( ) . longitude , NUM00 ) ; \n\tfor ( LatLng p : list ) { \n\t\tnianticManager . getCatchablePokemon ( p . latitude , p . longitude , NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "public void save ( OnSaveLogListener listener ) { \n\tFile dir = getLogDir ( ) ; \n\tif ( dir == null ) { \n\t\tlistener . onError ( NUM00 + NUM00 ) ; \n\t\t$F665 } \n\tFileWriter fileWriter = null ; \n\ttry { \n\t\tFile output = new File ( dir , getLogFileName ( ) ) ; \n\t\tfileWriter = new FileWriter ( output , _BOOL ) ; \n\t\tList < LogEntry > entries = bufferedLogs ( ) ; \n\t\tfor ( LogEntry entry : entries ) { \n\t\t\tfileWriter . write ( entry . prettyPrint ( ) + NUM00 ) ; \n\t\t\t} \n\t\tlistener . onSave ( output ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\tlistener . onError ( e . getMessage ( ) ) ; \n\t\t$F301 ( e ) } \n\tfinally { \n\t\tif ( fileWriter != null ) { \n\t\t\ttry $F881 ( fileWriter ) catch ( IOException e ) { \n\t\t\t\tlistener . onError ( e . getMessage ( ) ) ; \n\t\t\t\t$F301 ( e ) } \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "protected StorageHADomain checkAdapterExistsInDB ( String nativeGuid ) throws IOException { \n\tStorageHADomain adapter = null ; \n\tList < StorageHADomain > adapterInDB = CustomQueryUtility . getActiveStorageHADomainByNativeGuid ( _dbClient , nativeGuid ) ; \n\tif $F1032 ( adapterInDB ) $F36987 ( adapter , adapterInDB ) return adapter ; \n\t} \n"}, {"code": "public static Executor createTaskDistributor $F72 { \n\treturn Executors . newCachedThreadPool ( createThreadFactory ( Thread . NORM_PRIORITY , NUM00 ) ) ; \n\t} \n"}, {"code": "protected $F19578 toCoordinateArray ( Stack stack ) { \n\t$F19578 coordinates = new Coordinate $F2313 ( stack ) ; \n\tfor ( $F2277 ( i , stack ) ) { \n\t\tCoordinate coordinate = ( Coordinate ) stack . get ( i ) ; \n\t\tcoordinates [ i ] = coordinate ; \n\t\t} \n\treturn coordinates ; \n\t} \n"}, {"code": "private static void onEntityOpened ( KeyEvent event ) throws BadLocationException { \n\tJEditorPane editor = ( JEditorPane ) event . getSource ( ) ; \n\t$F47177 ( doc , editor ) int pos = editor . getCaretPosition ( ) ; \n\tString tag = getCurrentTag ( doc . getText ( NUM00 , pos ) ) ; \n\t$F59924 ( tag ) String remainder = doc . getText ( pos , doc . getLength ( ) - pos ) ; \n\tfor ( $F1088 ( i , remainder ) ) { \n\t\t$F1280 ( c , remainder , i ) if ( c == NUM00 ) $F5153 else if $F32022 ( Character , c ) $F932 } \n\t$F280 ( buffer ) int newPosition = pos ; \n\tString indent = getIndent ( doc , pos ) ; \n\tif $F3057 ( tag ) { \n\t\t$F84 ( buffer ) newPosition += NUM00 ; \n\t\t} \n\telse if $F3057 ( tag ) { \n\t\t$F84 ( buffer ) newPosition += NUM00 ; \n\t\t} \n\telse if $F3057 ( tag ) { \n\t\t$F84 ( buffer ) newPosition += NUM00 ; \n\t\t} \n\telse if $F3057 ( tag ) { \n\t\t$F84 ( buffer ) $F86403 ( buffer , indent ) $F86403 ( buffer , indent ) newPosition += NUM00 ; \n\t\t} \n\telse if $F3057 ( tag ) { \n\t\t$F84 ( buffer ) $F86403 ( buffer , indent ) newPosition += NUM00 ; \n\t\t} \n\telse if $F3057 ( tag ) { \n\t\t$F84 ( buffer ) $F86403 ( buffer , indent ) $F86403 ( buffer , indent ) newPosition += $F63757 ( indent ) ; \n\t\t} \n\telse $F932 doc . insertString ( pos , buffer . toString ( ) , null ) ; \n\teditor . setCaretPosition ( newPosition ) ; \n\t$F60335 ( event ) } \n"}, {"code": "$F1431 private String checkForWellKnownNamespacePrefix ( final String prefix ) { \n\tfinal String namespace ; \n\tif $F3057 ( prefix ) { \n\t\tprefixMap . put ( NUM00 , namespace = BD . NAMESPACE ) ; \n\t\t} \n\telse if $F3057 ( prefix ) { \n\t\tprefixMap . put ( NUM00 , namespace = BDS . NAMESPACE ) ; \n\t\t} \n\telse if $F3057 ( prefix ) { \n\t\tprefixMap . put ( NUM00 , namespace = QueryHints . NAMESPACE ) ; \n\t\t} \n\telse if $F3057 ( prefix ) { \n\t\tprefixMap . put ( NUM00 , namespace = RDF . NAMESPACE ) ; \n\t\t} \n\telse if $F3057 ( prefix ) { \n\t\tprefixMap . put ( NUM00 , namespace = RDFS . NAMESPACE ) ; \n\t\t} \n\telse if $F3057 ( prefix ) { \n\t\tprefixMap . put ( NUM00 , namespace = XSD . NAMESPACE ) ; \n\t\t} \n\telse if $F3057 ( prefix ) { \n\t\tprefixMap . put ( NUM00 , namespace = FOAFVocabularyDecl . NAMESPACE ) ; \n\t\t} \n\telse if $F3057 ( prefix ) { \n\t\tprefixMap . put ( NUM00 , namespace = FN . NAMESPACE ) ; \n\t\t} \n\telse if $F3057 ( prefix ) { \n\t\tprefixMap . put ( NUM00 , namespace = OWL . NAMESPACE ) ; \n\t\t} \n\telse if $F3057 ( prefix ) { \n\t\tprefixMap . put ( NUM00 , namespace = SESAME . NAMESPACE ) ; \n\t\t} \n\telse if $F3057 ( prefix ) { \n\t\tprefixMap . put ( NUM00 , namespace = GASService . Options . NAMESPACE ) ; \n\t\t} \n\telse { \n\t\tnamespace = null ; \n\t\t} \n\treturn namespace ; \n\t} \n"}, {"code": "private void prepareUserForRanking ( User user ) { \n\tUser updatedUser = userRepository . findOne ( user . getId ( ) , NUM00 ) ; \n\tif ( updatedUser . getImported ( ) == null || ! updatedUser . getImported ( ) ) { \n\t\tupdatedUser . setImported ( _BOOL ) ; \n\t\tupdatedUser . setPagerank ( null ) ; \n\t\tupdatedUser . setLastPageRank ( null ) ; \n\t\tupdatedUser . setCurrentRank ( null ) ; \n\t\tupdatedUser . setPreviousRank ( null ) ; \n\t\tuserRepository . save ( updatedUser , NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "private static List < Comment > orderComments ( List < Comment > comments ) { \n\tMap < String , List < Comment > > $F8690 ( parentMap ) ; \n\tList < Comment > $F204 ( rootComments ) ; \n\tfor ( Comment c : comments ) { \n\t\tString parentUuid = c . parentUuid ; \n\t\tList < Comment > l = parentMap . get ( parentUuid ) ; \n\t\t$F64950 ( l , parentMap , parentUuid ) l . add ( c ) ; \n\t\tif ( parentUuid == null ) $F207 ( rootComments , c ) } \n\tList < Comment > $F204 ( result ) ; \n\taddChildren ( parentMap , rootComments , result ) ; \n\treturn result ; \n\t} \n"}, {"code": "protected static final void logRawDiagnostic ( String msg ) { \n\tif ( diagnosticsStream != null ) { \n\t\tdiagnosticsStream . println ( msg ) ; \n\t\t$F1206 ( diagnosticsStream ) } \n\t} \n"}, {"code": "public void initialize ( Subject subject , CallbackHandler callbackHandler , $F6253 ( sharedState ) , $F6253 ( options ) ) { \n\t$F68570 ( unauthenticatedIdentity , options ) handler = callbackHandler ; \n\tthis . subject = subject ; \n\t} \n"}, {"code": "public Macro ( File file ) throws EOFException , FileNotFoundException , IOException { \n\t$F2218 ( dbf , DocumentBuilderFactory ) DocumentBuilder db = null ; \n\tDocument doc = null ; \n\ttry { \n\t\t$F6281 ( db , dbf ) InputSource is = new InputSource ( new UnicodeReader $F113801 ( file , FILE_ENCODING ) ) ; \n\t\tis . setEncoding ( FILE_ENCODING ) ; \n\t\tdoc = db . parse ( is ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F301 ( e ) $F105671 ( desc , e ) if ( desc == null ) $F84156 ( desc , e ) $F3495 ( desc ) } \n\t$F13241 ( macroRecords ) boolean parsedOK = initializeFromXMLFile ( doc . getDocumentElement ( ) ) ; \n\tif ( parsedOK == _BOOL ) { \n\t\tname = null ; \n\t\t$F725 ( macroRecords ) macroRecords = null ; \n\t\t$F3575 } \n\t} \n"}, {"code": "public boolean contains ( symbol sym ) { \n\treturn _all . containsKey ( sym . name ( ) ) ; \n\t} \n"}, {"code": "private PieData generateDataPie ( int cnt ) { \n\t$F60075 entries = new $F60075 $F72 ; \n\tfor ( $F6268 ( i ) ) { \n\t\tentries . add ( new Entry ( $F34940 ( Math ) + NUM00 , i ) ) ; \n\t\t} \n\tPieDataSet d = new PieDataSet ( entries , NUM00 ) ; \n\td . setSliceSpace ( NUM00 ) ; \n\td . setColors ( ColorTemplate . VORDIPLOM_COLORS ) ; \n\tPieData cd = new PieData ( getQuarters ( ) , d ) ; \n\treturn cd ; \n\t} \n"}, {"code": "public void sendUserDeleteNotification ( Map attributes ) { \n\ttry { \n\t\tif $F1032 ( deleteNotifyList ) { \n\t\t\tsendEmail ( deleteNotifyList , attributes , NUM00 , NUM00 , NUM00 ) ; \n\t\t\t} \n\t\t} \n\tcatch ( MessagingException e ) { \n\t\tif $F12866 ( debug ) { \n\t\t\tdebug . warning ( $F38 + entryDN , e ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void addMapsIdMapping ( DatabaseMapping mapping ) $F207 ( mapsIdMappings , mapping ) "}, {"code": "$F1 public final char readChar $F72 throws IOException { \n\t$F52634 ( dis , work ) return ( char ) ( $F169749 ( work ) | $F18896 ( work ) ) ; \n\t} \n"}, {"code": "public int taskSize $F72 $F1652 ( tasks ) "}, {"code": "public void addMutedIp ( final String ip , final Date muteTill ) { \n\tif ( isIpMuted ( ip ) ) { \n\t\tremoveMutedIp ( ip ) ; \n\t\t} \n\tTimestamp muteTillTs = null ; \n\tif ( muteTill != null ) { \n\t\tmuteTillTs = $F16812 ( muteTill ) ; \n\t\t} \n\t$F35577 ( s_logger , ip ) final Connection con = Database . getConnection ( ) ; \n\ttry { \n\t\t$F500803 ( ps , con ) $F3916 ( ps , ip ) ps . setTimestamp ( NUM00 , muteTillTs ) ; \n\t\t$F1699 ( ps ) $F59 ( ps ) $F17621 ( con ) } \n\tcatch ( final SQLException sqle ) { \n\t\tif ( sqle . getErrorCode ( ) == NUM00 ) { \n\t\t\ts_logger . info ( $F6165 ( ip , sqle ) ) ; \n\t\t\t$F665 } \n\t\ts_logger . log ( Level . SEVERE , NUM00 + ip , sqle ) ; \n\t\tthrow new IllegalStateException $F1783 ( sqle ) ; \n\t\t} \n\tfinally { \n\t\tDbUtil . closeConnection ( con ) ; \n\t\t} \n\t} \n"}, {"code": "public boolean isRslUrlSigned ( String url ) { \n\t$F1933 ( url , _BOOL ) return url . endsWith ( SIGNED_RSL_URL_DOT_EXTENSION ) ; \n\t} \n"}, {"code": "public void removeUserLockoutEntry ( String userDN ) { \n\tpwResetFailHash . remove ( userDN ) ; \n\tuserWarningCount = NUM00 ; \n\t} \n"}, {"code": "public void createDatabaseEntitiesForBusinessObjectDataSearchTesting $F72 { \n\tbusinessObjectDataDaoTestHelper . createBusinessObjectDataEntity ( AbstractServiceTest . NAMESPACE , AbstractServiceTest . BDEF_NAME , AbstractServiceTest . FORMAT_USAGE_CODE , AbstractServiceTest . FORMAT_FILE_TYPE_CODE , AbstractServiceTest . FORMAT_VERSION , AbstractServiceTest . PARTITION_VALUE , AbstractServiceTest . NO_SUBPARTITION_VALUES , AbstractServiceTest . DATA_VERSION , AbstractServiceTest . LATEST_VERSION_FLAG_SET , BusinessObjectDataStatusEntity . VALID ) ; \n\tbusinessObjectDataDaoTestHelper . createBusinessObjectDataEntity ( AbstractServiceTest . NAMESPACE , AbstractServiceTest . BDEF_NAME , AbstractServiceTest . FORMAT_USAGE_CODE_2 , AbstractServiceTest . FORMAT_FILE_TYPE_CODE , AbstractServiceTest . FORMAT_VERSION , AbstractServiceTest . PARTITION_VALUE , AbstractServiceTest . NO_SUBPARTITION_VALUES , AbstractServiceTest . DATA_VERSION , AbstractServiceTest . LATEST_VERSION_FLAG_SET , BusinessObjectDataStatusEntity . INVALID ) ; \n\tbusinessObjectDataDaoTestHelper . createBusinessObjectDataEntity ( AbstractServiceTest . NAMESPACE_2 , AbstractServiceTest . BDEF_NAME_2 , AbstractServiceTest . FORMAT_USAGE_CODE_2 , AbstractServiceTest . FORMAT_FILE_TYPE_CODE , AbstractServiceTest . FORMAT_VERSION_2 , AbstractServiceTest . PARTITION_VALUE , AbstractServiceTest . NO_SUBPARTITION_VALUES , AbstractServiceTest . DATA_VERSION , AbstractServiceTest . LATEST_VERSION_FLAG_SET , BusinessObjectDataStatusEntity . INVALID ) ; \n\tbusinessObjectDataDaoTestHelper . createBusinessObjectDataEntity ( AbstractServiceTest . NAMESPACE_2 , AbstractServiceTest . BDEF_NAME_2 , AbstractServiceTest . FORMAT_USAGE_CODE_2 , AbstractServiceTest . FORMAT_FILE_TYPE_CODE_2 , AbstractServiceTest . FORMAT_VERSION_2 , AbstractServiceTest . PARTITION_VALUE , AbstractServiceTest . NO_SUBPARTITION_VALUES , AbstractServiceTest . DATA_VERSION , AbstractServiceTest . LATEST_VERSION_FLAG_SET , BusinessObjectDataStatusEntity . VALID ) ; \n\t} \n"}, {"code": "@ SkipValidation @ Action ( $F3144 ) public String reset $F72 { \n\tif $F585 ( LOGGER ) LOGGER . debug ( $F3911 ( ownerName , zoneId , wardId , propertyType , noticeType , noticeNumber , noticeFromDate ) + noticeToDate + NUM00 + indexNumber + NUM00 + houseNumber ) ; \n\townerName = NUM00 ; \n\tzoneId = - NUM00 ; \n\twardId = - NUM00 ; \n\tpropertyType = NUM00 ; \n\tnoticeType = NUM00 ; \n\tnoticeNumber = NUM00 ; \n\tnoticeFromDate = null ; \n\tnoticeToDate = null ; \n\tindexNumber = NUM00 ; \n\thouseNumber = NUM00 ; \n\t$F51622 ( LOGGER ) return INDEX ; \n\t} \n"}, {"code": "public void checkOptionsValid $F72 { \n\tif $F19274 ( alias_ratio ) $F11389 if $F19274 ( null_ratio ) $F11389 if ( maxsize <= NUM00 ) $F1666 ( maxsize ) if ( $F1030 ( literals_file ) && literals_level == ClassLiteralsMode . NONE ) $F11389 } \n"}, {"code": "$F1 public UUID sessionId $F72 { \n\tif ( sessionId == null ) sessionId = UUID . randomUUID ( ) ; \n\treturn sessionId ; \n\t} \n"}, {"code": "private void readObject ( final ObjectInputStream in ) throws $F6427 { \n\t$F6428 ( in ) $F292347 ( definingCalendar , Calendar , timeZone , locale ) init ( definingCalendar ) ; \n\t} \n"}, {"code": "$F1 public MemChunkHolder < BigDataPMemAllocator > createChunk ( long size , boolean autoreclaim ) { \n\tMemChunkHolder < BigDataPMemAllocator > ret = null ; \n\tLong addr = m_nvmasvc . allocate ( m_nid , size , _BOOL ) ; \n\tif ( ( null == addr || NUM00 == addr ) && m_activegc ) { \n\t\tforceGC ( ) ; \n\t\taddr = m_nvmasvc . allocate ( m_nid , size , _BOOL ) ; \n\t\t} \n\tif ( null != addr && NUM00 != addr ) { \n\t\tret = new MemChunkHolder < BigDataPMemAllocator > ( this , addr , size ) ; \n\t\tret . setCollector ( m_chunkcollector ) ; \n\t\t$F160288 ( autoreclaim , m_chunkcollector , ret ) } \n\treturn ret ; \n\t} \n"}, {"code": "public int hashCode $F72 { \n\tint result = NUM00 ; \n\tif ( tableName != null ) { \n\t\tresult = NUM00 * tableName . hashCode ( ) ; \n\t\t} \n\tif ( repositoryName != null ) { \n\t\tresult = NUM00 * repositoryName . hashCode ( ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "$F58902 ( name , threadId , mFinished , mMarkers , SystemClock ) "}, {"code": "private void toString ( StringBuilder acc , int prec , boolean expand ) { \n\tif ( this . meta != null && ! expand ) { \n\t\tacc . append ( this . meta ) ; \n\t\t$F665 } \n\tboolean paren = op . getPrec ( ) < prec ; \n\t$F19006 ( paren , acc ) toString ( acc , expand ) ; \n\t$F19006 ( paren , acc ) } \n"}, {"code": "public static boolean isNotNullValue ( String s ) { \n\treturn ( $F2771 ( s ) && ! s . equals ( NullColumnValueGetter . getNullStr ( ) ) ) ; \n\t} \n"}, {"code": "$F108235 ( f , first , n , item , last , count , notFull ) "}, {"code": "public static String removeAll ( String source , char toRemove ) { \n\t$F12747 ( toRemoveIndex , source , toRemove ) if ( toRemoveIndex != - NUM00 ) { \n\t\t$F80469 ( result , source ) int sourceIndex = NUM00 ; \n\t\twhile ( toRemoveIndex != - NUM00 ) { \n\t\t\t$F13037 ( result , source , sourceIndex , toRemoveIndex ) sourceIndex = toRemoveIndex + NUM00 ; \n\t\t\ttoRemoveIndex = source . indexOf ( toRemove , sourceIndex ) ; \n\t\t\tif ( toRemoveIndex == - NUM00 ) { \n\t\t\t\tresult . append ( $F83851 ( source , sourceIndex ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F92 ( result ) } \n\telse { \n\t\treturn source ; \n\t\t} \n\t} \n"}, {"code": "public List < Entry $F11685 > asList $F72 { \n\tif ( nonNullList == null ) { \n\t\tif $F6036 ( array ) $F254727 ( nonNullList , Collections ) else { \n\t\t\tList < Entry $F11685 > list = new $F201 $F45530 ( array ) ; \n\t\t\tfor ( $F1088 ( i , array ) ) { \n\t\t\t\tE e = array . get ( i ) ; \n\t\t\t\tif ( e != null ) { \n\t\t\t\t\tlist . add ( new Entry $F200 ( i , e ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tnonNullList = list ; \n\t\t\t} \n\t\t} \n\treturn nonNullList ; \n\t} \n"}, {"code": "public static Range findCumulativeRangeBounds ( CategoryDataset dataset ) { \n\t$F19400 ( ParamChecks , dataset ) boolean allItemsNull = _BOOL ; \n\tdouble minimum = NUM00 ; \n\tdouble maximum = NUM00 ; \n\tfor ( $F84968 ( row , dataset ) ) { \n\t\tdouble runningTotal = NUM00 ; \n\t\tfor ( int column = NUM00 ; \n\t\tcolumn <= dataset . getColumnCount ( ) - NUM00 ; \n\t\tcolumn ++ ) { \n\t\t\t$F98564 ( n , dataset , row , column ) if ( n != null ) { \n\t\t\t\tallItemsNull = _BOOL ; \n\t\t\t\t$F50466 ( value , n ) if $F2292 ( Double , value ) { \n\t\t\t\t\trunningTotal = runningTotal + value ; \n\t\t\t\t\t$F16700 ( minimum , Math , runningTotal ) $F19410 ( maximum , Math , runningTotal ) } \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tif ( ! allItemsNull ) $F19420 ( minimum , maximum ) else $F1337 } \n"}, {"code": "private void addHotkeys ( JRootPane pane ) { \n\tfor ( Hotkey hotkey : hotkeys ) { \n\t\tif ( doesHotkeyHaveAction ( hotkey ) && hotkey . type == Type . REGULAR ) { \n\t\t\tif ( pane == null ) { \n\t\t\t\taddHotkey ( hotkey , main . getRootPane ( ) ) ; \n\t\t\t\tfor ( JDialog popout : popouts . keySet ( ) ) { \n\t\t\t\t\taddHotkey ( hotkey , popout . getRootPane ( ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\taddHotkey ( hotkey , pane ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "static $F4203 ReplayPromise $F8317 allReplay ( final Duration timeout , final List < Promise $F4203 > promises ) { \n\treturn allReplay ( timeout , System . currentTimeMillis ( ) , promises . toArray ( new Promise $F2313 ( promises ) ) ) ; \n\t} \n"}, {"code": "public void checkAndSetupBootStrapInfo ( DbClient dbClient ) { \n\tif ( onStandby ) $F23406 ( _log ) if $F8841 ( _vdcList ) { \n\t\t$F11057 ( _log , _vdcList ) $F665 } \n\tint retryIntervalSecs = DBINIT_RETRY_INTERVAL ; \n\tboolean done = _BOOL ; \n\tboolean wait ; \n\twhile ( ! done ) { \n\t\twait = _BOOL ; \n\t\tInterProcessLock lock = null ; \n\t\ttry { \n\t\t\tlock = _coordinator . getLock ( getBootstrapLockName ( ) ) ; \n\t\t\t$F973 ( _log ) $F90610 ( lock ) if ( isGeoDbsvc ( ) ) { \n\t\t\t\tinsertDefaultRootTenant ( dbClient ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tinsertMyVdcInfo ( dbClient ) ; \n\t\t\t\tinsertVdcVersion ( dbClient ) ; \n\t\t\t\tinsertPasswordHistory ( dbClient ) ; \n\t\t\t\t} \n\t\t\tdone = _BOOL ; \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\tif ( e instanceof IllegalStateException ) { \n\t\t\t\tthrow ( IllegalStateException ) e ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\t$F66731 ( _log , retryIntervalSecs , e ) wait = _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\tfinally { \n\t\t\tif ( lock != null ) { \n\t\t\t\ttry $F33834 ( lock ) $F9877 ( _log , e ) } \n\t\t\t} \n\t\tif ( wait ) { \n\t\t\ttry { \n\t\t\t\t$F28300 ( Thread , retryIntervalSecs ) } \n\t\t\t$F45916 ( _log , ex ) } \n\t\t} \n\t} \n"}, {"code": "Object processEXPR $F40351 ( handler , uri , name , rawName , value , owner ) throws $F2253 { \n\ttry { \n\t\tXPath expr = handler . createXPath ( value , owner ) ; \n\t\treturn expr ; \n\t\t} \n\t$F2262 ( te ) } \n"}, {"code": "private void checkAccess ( UnixPath file , boolean checkRead , boolean checkWrite ) { \n\t$F8108 ( sm , System ) if ( sm != null ) { \n\t\tif ( checkRead ) file . checkRead ( ) ; \n\t\tif ( checkWrite ) file . checkWrite ( ) ; \n\t\tsm . checkPermission ( new RuntimePermission $F580 ) ; \n\t\t} \n\t} \n"}, {"code": "private static Spanned removeImageSpanObjects ( Spanned spanned ) { \n\tSpannableStringBuilder builder = ( SpannableStringBuilder ) spanned ; \n\t$F131 spannedObjects = builder . getSpans ( NUM00 , builder . length ( ) , $F12222 ) ; \n\tfor ( $F1139 ( i , spannedObjects ) ) { \n\t\tif ( spannedObjects [ i ] instanceof ImageSpan ) { \n\t\t\tImageSpan imageSpan = ( ImageSpan ) spannedObjects [ i ] ; \n\t\t\tbuilder . replace ( spanned . getSpanStart ( imageSpan ) , builder . getSpanEnd ( imageSpan ) , NUM00 ) ; \n\t\t\t} \n\t\t} \n\treturn spanned ; \n\t} \n"}, {"code": "public $F171452 classify ( String snippet ) { \n\tfinal ExecutorService service = Executors . newSingleThreadExecutor ( ) ; \n\treturn service . submit ( new ClassifyingTask ( snippet ) ) ; \n\t} \n"}, {"code": "public abstract $F96 embedData ( $F96 msg , String msgFileName , $F96 cover , String coverFileName , String stegoFileName ) throws OpenStegoException ; \n"}, {"code": "public void addSetter ( int i ) { \n\tfor ( ScatterPlotSetter setter : setterList ) { \n\t\tif ( setter . getIndex ( ) == i ) $F932 } \n\tsetterList . add ( new ScatterPlotSetter ( i ) ) ; \n\t} \n"}, {"code": "$F1 public synchronized void initialize $F72 { \n\tif $F1906 ( mRootDirectory ) { \n\t\tif $F4928 ( mRootDirectory ) { \n\t\t\tLoger . debug ( String . format ( $F20268 ( mRootDirectory ) ) ) ; \n\t\t\t} \n\t\t$F665 } \n\t$F5459 ( files , mRootDirectory ) $F2329 ( files ) for ( File file : files ) { \n\t\tBufferedInputStream fis = null ; \n\t\ttry { \n\t\t\t$F20278 ( fis , file ) CacheHeader entry = CacheHeader . readHeader ( fis ) ; \n\t\t\tentry . size = file . length ( ) ; \n\t\t\tputEntry ( entry . key , entry ) ; \n\t\t\t} \n\t\tcatch ( IOException e ) $F19636 ( file ) finally { \n\t\t\tFileUtils . closeIO ( fis ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public Client ( final ServerSocketChannel server ) throws IOException { \n\ttry { \n\t\tclient = server . accept ( ) ; \n\t\tclient . configureBlocking ( _BOOL ) ; \n\t\tif ( ! client . finishConnect ( ) ) $F3575 $F81052 ( clientSelector , Selector ) clientKey = client . register ( clientSelector , SelectionKey . OP_READ ) ; \n\t\t$F140706 ( log ) } \n\tcatch ( IOException ex ) $F124189 ( close , ex ) } \n"}, {"code": "public Transfer writeBytes $F97 ( data ) throws IOException { \n\tif ( data == null ) { \n\t\twriteInt ( - NUM00 ) ; \n\t\t} \n\telse { \n\t\twriteInt ( data . length ) ; \n\t\tout . write ( data ) ; \n\t\t} \n\treturn this ; \n\t} \n"}, {"code": "public static void stop $F4374 ( args ) { \n\t$F973 ( LOG ) $F5194 ( System ) } \n"}, {"code": "public boolean add ( Object o ) { \n\tif $F2200 ( list , o ) $F18637 ( list , o , _BOOL ) return _BOOL ; \n\t} \n"}, {"code": "private XYPlot initializeLowerPlot $F72 { \n\t$F89138 ( nonHeapMemory ) YIntervalSeriesCollection yIntervalSeriesCollection = new YIntervalSeriesCollection $F72 ; \n\tyIntervalSeriesCollection . addSeries ( nonHeapMemory ) ; \n\tDeviationRenderer renderer = new DeviationRenderer ( _BOOL , _BOOL ) ; \n\trenderer . setBaseShapesVisible ( _BOOL ) ; \n\trenderer . setSeriesStroke ( $F89162 ) ; \n\trenderer . setSeriesOutlineStroke ( $F89162 ) ; \n\trenderer . setSeriesShape ( NUM00 , new $F35359 $F89166 ) ; \n\trenderer . setBaseToolTipGenerator ( new StandardXYToolTipGenerator ( StandardXYToolTipGenerator . DEFAULT_TOOL_TIP_FORMAT , DateFormat . getDateTimeInstance ( ) , NumberFormat . getNumberInstance ( ) ) ) ; \n\tfinal NumberAxis rangeAxis = new NumberAxis $F580 ; \n\trangeAxis . setRangeType ( RangeType . POSITIVE ) ; \n\tSystemInformationData systemData = ( SystemInformationData ) dataAccessService . getLastDataObject ( systemTemplate ) ; \n\tif ( systemData != null ) { \n\t\tdouble maxNonHeapUpperRange ; \n\t\tif ( systemData . getMaxNonHeapMemorySize ( ) != - NUM00 ) { \n\t\t\tmaxNonHeapUpperRange = systemData . getMaxNonHeapMemorySize ( ) / NUM00 ; \n\t\t\t} \n\t\telse if ( systemData . getInitNonHeapMemorySize ( ) != - NUM00 ) { \n\t\t\tmaxNonHeapUpperRange = ( systemData . getInitNonHeapMemorySize ( ) * NUM00 ) / NUM00 ; \n\t\t\t} \n\t\telse { \n\t\t\tmaxNonHeapUpperRange = $F264 ; \n\t\t\t} \n\t\tif ( maxNonHeapUpperRange > NUM00 ) { \n\t\t\trangeAxis . setRange ( NUM00 , maxNonHeapUpperRange ) ; \n\t\t\trangeAxis . setAutoRangeMinimumSize ( maxNonHeapUpperRange ) ; \n\t\t\t} \n\t\t} \n\tfinal XYPlot subplot = new XYPlot ( yIntervalSeriesCollection , null , rangeAxis , renderer ) ; \n\tsubplot . setAxisOffset ( new RectangleInsets $F13777 ) ; \n\tsubplot . setRangeAxisLocation ( AxisLocation . TOP_OR_LEFT ) ; \n\tsubplot . setRangeCrosshairVisible ( _BOOL ) ; \n\treturn subplot ; \n\t} \n"}, {"code": "public static void logError ( Throwable exception , String message , Object ... args ) { \n\t$F3869 ( message , MessageFormat , args ) log ( IStatus . ERROR , IStatus . OK , message , exception ) ; \n\t} \n"}, {"code": "public void add ( Row r ) { \n\tlist . add ( r ) ; \n\tmemory += r . getMemory ( ) + Constants . MEMORY_POINTER ; \n\tif ( maxMemory > NUM00 && memory > maxMemory ) $F5795 ( writeAllRows ) size ++ ; \n\t} \n"}, {"code": "private MessageListView renderConversation ( ConversationInfo convInfo , View parent ) { \n\tMessageListView list = new MessageListView ( parent . getContext ( ) ) ; \n\tconvInfo . view = list ; \n\tlist . setOnItemClickListener ( MessageClickListener . getInstance ( ) ) ; \n\tMessageListAdapter adapter = convInfo . adapter ; \n\tif ( adapter == null ) { \n\t\tadapter = new MessageListAdapter ( convInfo . conv , parent . getContext ( ) ) ; \n\t\tconvInfo . adapter = adapter ; \n\t\t} \n\tlist . setAdapter ( adapter ) ; \n\tlist . setSelection ( adapter . getCount ( ) - NUM00 ) ; \n\treturn list ; \n\t} \n"}, {"code": "$F100044 ( ifdId , tagId ) "}, {"code": "public ApplicationIdVerifier $F32029 ( supportedApplicationIds ) { \n\tthis . supportedApplicationIds = Collections . unmodifiableSet ( new $F2690 ( supportedApplicationIds ) ) ; \n\t} \n"}, {"code": "public QueryResponse search ( Resource resource , SolrQuery query ) throws SolrServerException , IOException { \n\tString idQuery = termQuery ( SearchFields . URI_FIELD_NAME , SearchFields . getResourceID ( resource ) ) ; \n\tquery . setQuery ( query . getQuery ( ) + NUM00 + idQuery ) ; \n\treturn search ( query ) ; \n\t} \n"}, {"code": "public static LocalDate toDate ( String data , String modelo ) { \n\treturn LocalDate . parse ( data , formatter ( modelo ) ) ; \n\t} \n"}, {"code": "public boolean isMutable $F72 { \n\treturn mutable ; \n\t} \n"}, {"code": "public static final Criterion all $F72 { \n\treturn AllCriterion . all ( ) ; \n\t} \n"}, {"code": "public static void transform ( InputStream srcStream , OutputStream destStream , InputStream stylesheetStream , String outputFormat ) throws FOPException { \n\tStreamSource src = new StreamSource ( srcStream ) ; \n\tStreamSource stylesheet = stylesheetStream == null ? null : new StreamSource ( stylesheetStream ) ; \n\tFop fop = createFopInstance ( destStream , outputFormat ) ; \n\ttransform ( src , stylesheet , fop ) ; \n\t} \n"}, {"code": "public boolean InsertSym ( int type , String id , String context , String cType , int line , int col ) { \n\tint i ; \n\tif ( type == PROCEDUREVAR || type == PROCESSVAR || type == PARAMETER ) { \n\t\ti = FindSym ( GLOBAL , id , NUM00 ) ; \n\t\tif $F1765 ( i , symtab ) return _BOOL ; \n\t\ti = FindSym ( id , context ) ; \n\t\tif $F1765 ( i , symtab ) return _BOOL ; \n\t\t} \n\telse { \n\t\ti = FindSym ( type , id , context ) ; \n\t\tif $F1765 ( i , symtab ) return _BOOL ; \n\t\t} \n\tSymTabEntry se = new SymTabEntry ( type , id , context , cType , line , col ) ; \n\tsymtab . addElement ( se ) ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static Schema schemaForStructType ( StructType structType ) { \n\t$F295581 ( fieldNames , Lists ) $F295581 ( fieldTypes , Lists ) for ( StructField field : structType . fields ( ) ) { \n\t\tfieldNames . add ( field . name ( ) ) ; \n\t\tDataType fieldType = field . dataType ( ) ; \n\t\tif ( fieldType . equals ( DataTypes . StringType ) ) $F71145 ( fieldTypes ) else if ( fieldType . equals ( DataTypes . FloatType ) ) $F71145 ( fieldTypes ) else if ( fieldType . equals ( DataTypes . DoubleType ) ) $F71145 ( fieldTypes ) else if ( fieldType . equals ( DataTypes . IntegerType ) ) $F71145 ( fieldTypes ) else if ( fieldType . equals ( DataTypes . LongType ) ) $F71145 ( fieldTypes ) else if ( fieldType . equals ( DataTypes . BooleanType ) ) $F71145 ( fieldTypes ) else $F1666 ( fieldType ) } \n\treturn RecordUtils . schemaFor ( fieldNames , fieldTypes ) ; \n\t} \n"}, {"code": "public JettySolrRunner startJettySolrRunner ( JettySolrRunner jetty ) throws Exception { \n\tjetty . start ( _BOOL ) ; \n\tjettys . add ( jetty ) ; \n\treturn jetty ; \n\t} \n"}, {"code": "public Map < CIMObjectPath , $F2689 > findAnySLOStorageGroupsCanBeReUsed ( StorageSystem forProvider , StorageSystem storage , String policyName , boolean associatedToView ) throws WBEMException { \n\tCloseableIterator $F271595 groupInstanceItr = null ; \n\tCloseableIterator $F87269 volumePathItr = null ; \n\tMap < CIMObjectPath , $F2689 > groupPaths = new ConcurrentHashMap < CIMObjectPath , $F2689 > $F72 ; \n\ttry { \n\t\tCIMObjectPath controllerConfigSvcPath = _cimPath . getControllerConfigSvcPath ( storage ) ; \n\t\t$F973 ( _log ) groupInstanceItr = getAssociatorInstances ( forProvider , controllerConfigSvcPath , null , SE_DEVICE_MASKING_GROUP , null , null , PS_V3_STORAGE_GROUP_PROPERTIES ) ; \n\t\twhile $F2921 ( groupInstanceItr ) { \n\t\t\tCIMInstance groupInstance = groupInstanceItr . next ( ) ; \n\t\t\tCIMObjectPath groupPath = groupInstance . getObjectPath ( ) ; \n\t\t\tString groupName = CIMPropertyFactory . getPropertyValue ( groupInstance , CP_ELEMENT_NAME ) ; \n\t\t\tString fastSetting = CIMPropertyFactory . getPropertyValue ( groupInstance , CP_FAST_SETTING ) ; \n\t\t\tString groupAssociatedToView = CIMPropertyFactory . getPropertyValue ( groupInstance , CP_ASSOCIATED_TO_VIEW ) ; \n\t\t\t$F2695 ( returnedNativeGuids ) if ( fastSetting . equals ( policyName ) && associatedToView == Boolean . parseBoolean ( groupAssociatedToView ) && groupName . startsWith ( Constants . STORAGE_GROUP_PREFIX ) ) { \n\t\t\t\t$F7028 ( _log , groupName ) volumePathItr = getAssociatorNames ( forProvider , groupPath , null , CIM_STORAGE_VOLUME , null , null ) ; \n\t\t\t\twhile $F2921 ( volumePathItr ) { \n\t\t\t\t\treturnedNativeGuids . add ( $F4337 ( getVolumeNativeGuid , volumePathItr ) ) ; \n\t\t\t\t\t} \n\t\t\t\tgroupPaths . put ( groupPath , returnedNativeGuids ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F15722 ( closeCIMIterator , groupInstanceItr , volumePathItr ) return groupPaths ; \n\t} \n"}, {"code": "Remover add ( T listener ) ; \n"}, {"code": "protected void updateDamage ( DocumentEvent changes , Shape a , ViewFactory f ) { \n\tcheckMetrics ( ) ; \n\tComponent host = getContainer ( ) ; \n\tElement elem = getElement ( ) ; \n\tDocumentEvent . ElementChange ec = changes . getChange ( elem ) ; \n\t$F47796 added = ( ec != null ) ? ec . getChildrenAdded ( ) : null ; \n\t$F47796 removed = ( ec != null ) ? ec . getChildrenRemoved ( ) : null ; \n\tif ( $F144478 ( added ) || $F144478 ( removed ) ) { \n\t\tif ( added != null && longestLine != null ) { \n\t\t\tint currentMaxWidth = getLineWidth ( longestLine ) ; \n\t\t\tfor ( $F1139 ( i , added ) ) { \n\t\t\t\tint width = getLineWidth ( added [ i ] ) ; \n\t\t\t\tif ( width > currentMaxWidth ) { \n\t\t\t\t\tcurrentMaxWidth = width ; \n\t\t\t\t\tlongestLine = added [ i ] ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tif ( removed != null ) { \n\t\t\tfor ( $F1139 ( i , removed ) ) { \n\t\t\t\tif ( removed [ i ] == longestLine ) $F103997 ( longestLine ) } \n\t\t\t} \n\t\tpreferenceChanged ( null , _BOOL , _BOOL ) ; \n\t\t$F8798 ( host ) } \n\telse { \n\t\tElement map = getElement ( ) ; \n\t\tint line = map . getElementIndex ( changes . getOffset ( ) ) ; \n\t\tint endLine = map . getElementIndex ( changes . getOffset ( ) + changes . getLength ( ) ) ; \n\t\tdamageLineRange ( line , endLine , a , host ) ; \n\t\tgetLongestLine ( ) ; \n\t\tif ( changes . getType ( ) == DocumentEvent . EventType . INSERT ) { \n\t\t\tint w = getLineWidth ( longestLine ) ; \n\t\t\t$F20231 ( e , map , line ) if ( e == longestLine ) { \n\t\t\t\tpreferenceChanged ( null , _BOOL , _BOOL ) ; \n\t\t\t\t} \n\t\t\telse if ( getLineWidth ( e ) > w ) { \n\t\t\t\tlongestLine = e ; \n\t\t\t\tpreferenceChanged ( null , _BOOL , _BOOL ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse if ( changes . getType ( ) == DocumentEvent . EventType . REMOVE ) { \n\t\t\tif ( map . getElement ( line ) == longestLine ) { \n\t\t\t\tdetermineLongestLine ( ) ; \n\t\t\t\tpreferenceChanged ( null , _BOOL , _BOOL ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public JClassDependency ( JClass cl , String digest ) { \n\t$F32928 ( _className , cl ) String newDigest = getDigest ( ) ; \n\tif $F2137 ( newDigest , digest ) { \n\t\tif $F6456 ( log , Level ) log . fine ( _className + NUM00 ) ; \n\t\t_isDigestModified = _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public void dump ( Object data , Writer output ) { \n\t$F6689 list = new $F3523 $F989 ; \n\tlist . add ( data ) ; \n\tdumpAll ( list . iterator ( ) , output , null ) ; \n\t} \n"}, {"code": "public void clear $F72 { \n\t$F677 ( lock , this ) $F790 ( lock ) try { \n\t\t$F131 array = queue ; \n\t\tint n = size ; \n\t\tsize = NUM00 ; \n\t\tfor ( $F119 ( i , n ) ) array [ i ] = null ; \n\t\t} \n\t$F796 ( lock ) } \n"}, {"code": "public void reset $F72 { \n\t$F7057 ( System , IV , cbcV ) $F26770 ( Arrays , cbcNextV ) $F2268 ( cipher ) } \n"}, {"code": "public void addInsnToHead ( Insn insn ) { \n\tSsaInsn newInsn = SsaInsn . makeFromRop ( insn , this ) ; \n\tinsns . add ( getCountPhiInsns ( ) , newInsn ) ; \n\tparent . onInsnAdded ( newInsn ) ; \n\t} \n"}, {"code": "public static String encodeForURL ( String str ) { \n\t$F280 ( result ) for ( $F1088 ( i , str ) ) { \n\t\t$F1280 ( ch , str , i ) if ( $F91222 ( ch ) || ch >= NUM00 && ch <= NUM00 ) result . append ( ch ) ; \n\t\telse { \n\t\t\tswitch ( ch ) { \n\t\t\t\t$F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 result . append ( ch ) ; \n\t\t\t\t$F597 $F1267 $F84 ( result ) result . append ( hexchars [ $F84701 ( ch ) ] ) ; \n\t\t\t\t$F3248 ( result , hexchars , ch ) $F597 } \n\t\t\t} \n\t\t} \n\t$F92 ( result ) } \n"}, {"code": "public void selectObject ( MultiTouchObject multiTouchObject , PointInfo touchPoint ) { \n\tcurrTouchPoint . set ( touchPoint ) ; \n\tif ( multiTouchObject != null ) { \n\t\tmImages . remove ( multiTouchObject ) ; \n\t\tmImages . add ( multiTouchObject ) ; \n\t\tif ( listener != null ) { \n\t\t\tlistener . onImageObjectSelected ( multiTouchObject ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tif ( listener != null ) { \n\t\t\tlistener . onImageObjectDropped ( ) ; \n\t\t\t} \n\t\t} \n\tinvalidate ( ) ; \n\t} \n"}, {"code": "void verify $F72 { \n\t$F96 d = digest . digest ( ) ; \n\tif ( ! MessageDigest . isEqual ( d , Base64 . decode ( hash , Base64 . DEFAULT ) ) ) { \n\t\tthrow invalidDigest ( JarFile . MANIFEST_NAME , name , jarName ) ; \n\t\t} \n\tverifiedEntries . put ( name , certificates ) ; \n\t} \n"}, {"code": "public void randomizeIncomingWeights $F72 { \n\tfor ( Neuron n : getNeuronList ( ) ) { \n\t\tfor ( Synapse s : n . getFanIn ( ) ) { \n\t\t\ts . setLowerBound ( NUM00 ) ; \n\t\t\ts . setStrength ( s . getUpperBound ( ) * Math . random ( ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void remove ( QueueEvent event ) throws $F80658 { \n\tTimerContext time = stats . time ( dir + NUM00 ) ; \n\ttry { \n\t\t$F134526 ( path , event ) String responsePath = dir + NUM00 + response_prefix + $F31604 ( path ) ; \n\t\tif ( zookeeper . exists ( responsePath , _BOOL ) ) { \n\t\t\tzookeeper . setData ( responsePath , event . getBytes ( ) , _BOOL ) ; \n\t\t\t} \n\t\telse { \n\t\t\tLOG . info ( NUM00 + responsePath + NUM00 + NUM00 ) ; \n\t\t\t} \n\t\ttry { \n\t\t\tzookeeper . delete ( path , - NUM00 , _BOOL ) ; \n\t\t\t} \n\t\tcatch ( KeeperException . NoNodeException ignored ) $F845 } \n\tfinally $F5196 ( time ) } \n"}, {"code": "public $F72964 readPoints ( String shapefile ) { \n\t$F72964 list = new ArrayList $F67121 $F72 ; \n\tfor ( SimpleFeature feature : ShapeFileReader . getAllFeatures ( shapefile ) ) { \n\t\tGeometry geo = ( Geometry ) feature . getDefaultGeometry ( ) ; \n\t\tif ( geo instanceof Point ) { \n\t\t\tPoint ps = ( Point ) geo ; \n\t\t\tfor ( int i = NUM00 ; \n\t\t\ti < ps . getNumGeometries ( ) ; \n\t\t\ti ++ ) { \n\t\t\t\tPoint p = ( Point ) ps . getGeometryN ( i ) ; \n\t\t\t\tlist . add ( p ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse $F11389 } \n\treturn list ; \n\t} \n"}, {"code": "public String rate $F83882 ( ctx , WindowNo , mTab , mField , value ) { \n\t$F1747 ( value ) Integer Currency_ID = ( Integer ) mTab . getValue ( NUM00 ) ; \n\t$F79839 ( C_Currency_ID , Currency_ID ) Integer ConversionType_ID = ( Integer ) mTab . getValue ( NUM00 ) ; \n\t$F79839 ( C_ConversionType_ID , ConversionType_ID ) Timestamp DateAcct = ( Timestamp ) mTab . getValue ( NUM00 ) ; \n\t$F35 ( DateAcct , System ) int C_AcctSchema_ID = Env . getContextAsInt ( ctx , WindowNo , NUM00 ) ; \n\t$F88919 ( as , MAcctSchema , ctx , C_AcctSchema_ID ) int AD_Client_ID = Env . getContextAsInt ( ctx , WindowNo , NUM00 ) ; \n\tint AD_Org_ID = Env . getContextAsInt ( ctx , WindowNo , NUM00 ) ; \n\tBigDecimal CurrencyRate = MConversionRate . getRate ( C_Currency_ID , as . getC_Currency_ID ( ) , DateAcct , C_ConversionType_ID , AD_Client_ID , AD_Org_ID ) ; \n\t$F35577 ( log , CurrencyRate ) $F307246 ( CurrencyRate , Env ) $F275044 ( mTab , CurrencyRate ) $F1278 } \n"}, {"code": "public boolean hasAlphaChangedFrom ( float v ) { \n\treturn ( Float . compare ( alpha , v ) != NUM00 ) ; \n\t} \n"}, {"code": "public $F159508 destroy $F72 { \n\t$F159508 ret ; \n\tif ( controllerProxy != null ) { \n\t\tret = controllerProxy . destroy ( ) ; \n\t\tcontrollerProxy = null ; \n\t\t} \n\telse { \n\t\t$F70223 ( ret ) ; \n\t\tret . complete ( null ) ; \n\t\t} \n\treturn ret ; \n\t} \n"}, {"code": "$F1 public Request $F4 logs ( ProjectReference projectReference , long taskId ) { \n\t$F106011 $F197 ( statuses , availableRunnerStatuses , projectReference ) ; \n\tif $F1032 ( statuses ) { \n\t\tfor ( DummyRunnerStatus runnerStatus : statuses ) { \n\t\t\tif ( taskId == runnerStatus . processId ( ) ) { \n\t\t\t\treturn new $F211 ( runnerStatus . getLog ( ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn new $F211 $F8320 ; \n\t} \n"}, {"code": "protected static ActionResultInfo performAction ( GenericValue productPromoAction , ShoppingCart cart , Delegator delegator , LocalDispatcher dispatcher , Timestamp nowTimestamp ) throws GenericEntityException , CartItemModifyException { \n\tActionResultInfo actionResultInfo = new ActionResultInfo $F72 ; \n\tperformAction ( actionResultInfo , productPromoAction , cart , delegator , dispatcher , nowTimestamp ) ; \n\treturn actionResultInfo ; \n\t} \n"}, {"code": "private boolean containsExpression ( String toSearch , String expression ) { \n\t$F1933 ( toSearch , _BOOL ) return toSearch . equals ( expression ) || toSearch . indexOf ( expression ) >= NUM00 ; \n\t} \n"}, {"code": "public void clearListeners $F72 $F9096 ( listeners ) "}, {"code": "private Var addProperty ( VarProperty property ) { \n\tif ( property . isUnique ( ) ) { \n\t\ttestUniqueProperty ( ( UniqueVarProperty ) property ) ; \n\t\t} \n\tproperties . add ( property ) ; \n\treturn this ; \n\t} \n"}, {"code": "public boolean isOpen $F72 $F1522 ( open ) "}, {"code": "public void free ( long pos , int length ) { \n\tint start = getBlock ( pos ) ; \n\tint blocks = getBlockCount ( length ) ; \n\tset . clear ( start , start + blocks ) ; \n\t} \n"}, {"code": "private void onConnectionStatusChanged ( int oldStatus , int status ) { \n\tif ( sSettingsMgr . showStatusIcon ) { \n\t\tNotificationCompat . Builder builder = new NotificationCompat . Builder ( this ) ; \n\t\tbuilder . setWhen ( System . currentTimeMillis ( ) ) ; \n\t\tswitch ( status ) { \n\t\t\tcase XmppManager . CONNECTED : builder . setContentText ( getString ( R . string . main_service_connected , getConnectionStatusAction ( ) ) ) ; \n\t\t\tbuilder . setSmallIcon ( getImageStatus ( STATUS_ICON_GREEN ) ) ; \n\t\t\t$F597 case XmppManager . CONNECTING : builder . setContentText ( getString ( R . string . main_service_connecting ) ) ; \n\t\t\tbuilder . setSmallIcon ( getImageStatus ( STATUS_ICON_ORANGE ) ) ; \n\t\t\t$F597 case XmppManager . DISCONNECTED : builder . setContentText ( getString ( R . string . main_service_disconnected ) ) ; \n\t\t\tbuilder . setSmallIcon ( getImageStatus ( STATUS_ICON_RED ) ) ; \n\t\t\t$F597 case XmppManager . DISCONNECTING : builder . setContentText ( getString ( R . string . main_service_disconnecting ) ) ; \n\t\t\tbuilder . setSmallIcon ( getImageStatus ( STATUS_ICON_ORANGE ) ) ; \n\t\t\t$F597 case XmppManager . WAITING_TO_CONNECT : case XmppManager . WAITING_FOR_NETWORK : builder . setContentText ( getString ( R . string . main_service_waiting_to_connect ) + NUM00 + getConnectionStatusAction ( ) ) ; \n\t\t\tbuilder . setSmallIcon ( getImageStatus ( STATUS_ICON_BLUE ) ) ; \n\t\t\t$F597 $F1267 $F665 } \n\t\tbuilder . setContentIntent ( sPendingIntentLaunchApplication ) ; \n\t\tbuilder . setContentTitle ( Tools . APP_NAME ) ; \n\t\tstartForeground ( NOTIFICATION_CONNECTION , builder . getNotification ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "private static File findGuacamoleHome $F72 { \n\tFile guacHome ; \n\t$F27462 ( desiredDir , System ) if ( desiredDir == null ) desiredDir = System . getenv ( NUM00 ) ; \n\tif ( desiredDir != null ) $F24661 ( guacHome , desiredDir ) else guacHome = new File ( System . getProperty ( NUM00 ) , NUM00 ) ; \n\treturn guacHome ; \n\t} \n"}, {"code": "void waitForServerStart $F72 throws InterruptedException { \n\tstarted . await ( getTestTimeout ( ) , TimeUnit . MILLISECONDS ) ; \n\t} \n"}, {"code": "private static void drawLeftTab ( int x , int y , int w , int h , Graphics2D g2 , ColorUIResource color ) { \n\tdouble rTop = RapidLookAndFeel . CORNER_TAB_RADIUS * NUM00 ; \n\tg2 . setColor ( color ) ; \n\tg2 . fill ( createLeftTabShape ( x + NUM00 , y + NUM00 , w - NUM00 , h , rTop , _BOOL ) ) ; \n\tg2 . setColor ( Colors . TAB_BORDER ) ; \n\tg2 . draw ( createLeftTabShape ( x , y , w - NUM00 , h , rTop , _BOOL ) ) ; \n\t} \n"}, {"code": "private $F9184 prepareExpectedData $F72 { \n\t$F9184 $F9187 ( indexList ) ; \n\t$F2027 $F9191 ( sortIndex ) ; \n\t$F2027 $F9191 ( sortIndexInverted ) ; \n\t$F6965 ( indexList , sortIndex ) $F6965 ( indexList , sortIndexInverted ) return indexList ; \n\t} \n"}, {"code": "public $F96 readBytes ( final int count ) { \n\tint bytesToRead = count ; \n\tif ( bytesToRead < NUM00 ) bytesToRead = byteStream . available ( ) ; \n\t$F2175 ( bytes , bytesToRead ) if ( currentBitIndex >= NUM00 ) { \n\t\tfor ( $F119 ( i , bytesToRead ) ) { \n\t\t\tbytes [ i ] = ( byte ) read ( Byte . SIZE ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\t$F11578 ( byteStream , bytes ) ; \n\t\t} \n\treturn bytes ; \n\t} \n"}, {"code": "public SSLTestConfig $F72 $F47309 ( this , _BOOL ) "}, {"code": "$F1 public int hashCode $F72 { \n\treturn NUM00 + Arrays . hashCode ( fields ) ; \n\t} \n"}, {"code": "public static String formatPath ( List < ChildNumber > path ) { \n\treturn PATH_JOINER . join ( Iterables . concat ( Collections . singleton ( NUM00 ) , path ) ) ; \n\t} \n"}, {"code": "$F13735 ( prefix , namespace , attName , attValue , xmlWriter ) "}, {"code": "public static Object readInvocationResult ( PlatformContext ctx , BinaryRawReaderEx reader ) throws IgniteCheckedException { \n\t$F6622 ( success , reader ) if ( success ) return reader . readObjectDetached ( ) ; \n\telse { \n\t\t$F6622 ( hasException , reader ) if ( hasException ) { \n\t\t\tObject nativeErr = reader . readObjectDetached ( ) ; \n\t\t\tassert nativeErr != null ; \n\t\t\tthrow ctx . createNativeException ( nativeErr ) ; \n\t\t\t} \n\t\telse { \n\t\t\tString errMsg = reader . readString ( ) ; \n\t\t\tassert errMsg != null ; \n\t\t\tthrow new IgniteCheckedException ( errMsg ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public final void testGenerateSeedint02 $F72 { \n\tfor ( $F119 ( i , LENGTH ) ) { \n\t\t$F96 myBytes = sr . generateSeed ( i ) ; \n\t\tassertFalse ( NUM00 + i + NUM00 + myBytes . length , myBytes . length != i ) ; \n\t\t} \n\t} \n"}, {"code": "public static _Fields findByThriftId ( int fieldId ) { \n\tswitch ( fieldId ) { \n\t\t$F3366 return NUM00 _THING ; \n\t\t$F3366 return BYTE_THING ; \n\t\t$F3366 return I32_THING ; \n\t\t$F3366 return I64_THING ; \n\t\t$F20809 } \n\t} \n"}, {"code": "private $F3803 replaceDotInMustacheKeys $F20110 ( mustacheKeys ) { \n\t$F67013 ( fixedMustacheKeys ) for ( String mustacheKey : mustacheKeys ) { \n\t\tfixedMustacheKeys . add ( $F2934 ( mustacheKey ) ) ; \n\t\t} \n\treturn fixedMustacheKeys ; \n\t} \n"}, {"code": "public static IFitsHeader create ( String key ) { \n\tIFitsHeader result = STANDARD_KEYS . get ( key ) ; \n\tif ( result == null ) { \n\t\tresult = new FitsHeaderImpl ( key , SOURCE . UNKNOWN , HDU . ANY , VALUE . ANY , NUM00 ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "protected String parsePayload ( String payload ) { \n\tString json = null ; \n\tif ( payload != null ) { \n\t\ttry { \n\t\t\tjson = $F8908 ( payload ) ? new String ( Files . readAllBytes ( Paths . get ( payload ) ) ) : payload ; \n\t\t\t} \n\t\tcatch ( IOException e ) { \n\t\t\tlog . fatal ( NUM00 + payload , e ) ; \n\t\t\t$F5194 ( System ) } \n\t\t} \n\treturn json ; \n\t} \n"}, {"code": "boolean addEntry ( PolicyEntry pe , int index ) { \n\tif ( index < NUM00 ) { \n\t\tpolicyEntries . addElement ( pe ) ; \n\t\tparser . add ( pe . getGrantEntry ( ) ) ; \n\t\t} \n\telse { \n\t\tPolicyEntry origPe = policyEntries . elementAt ( index ) ; \n\t\tparser . replace ( origPe . getGrantEntry ( ) , pe . getGrantEntry ( ) ) ; \n\t\tpolicyEntries . setElementAt ( pe , index ) ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public WritableRaster createCompatibleWritableRaster ( int w , int h ) { \n\tif ( w <= NUM00 || h <= NUM00 ) { \n\t\tthrow new RasterFormatException ( NUM00 + ( ( w <= NUM00 ) ? NUM00 : NUM00 ) ) ; \n\t\t} \n\tSampleModel sm = sampleModel . createCompatibleSampleModel ( w , h ) ; \n\treturn new IntegerComponentRaster ( sm , $F69159 ) ; \n\t} \n"}, {"code": "public void testCase1 $F72 { \n\t$F7829 $F10679 int aSign = NUM00 ; \n\tint bSign = NUM00 ; \n\t$F10682 $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F10683 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F10686 ( assertEquals , result ) } \n"}, {"code": "public static void createOrClearDestinationFolder ( String path ) { \n\t$F1705 ( fpath , path ) $F1907 ( fpath ) deleteDirectoryContents ( path , _BOOL ) ; \n\t} \n"}, {"code": "static synchronized JmriUserInterfaceConfigurationProvider findProvider ( Profile project ) { \n\tif $F4257 ( providers , project ) { \n\t\tproviders . put ( project , new JmriUserInterfaceConfigurationProvider ( project ) ) ; \n\t\t} \n\t$F8313 ( providers , project ) } \n"}, {"code": "protected static $F2469 insert ( $F2469 old , int oldSize , int pos , long x ) { \n\t$F2469 result ; \n\tif ( old != null && old . length > oldSize ) { \n\t\tresult = old ; \n\t\t} \n\telse { \n\t\tresult = new long [ oldSize + NUM00 + COPY_THRESHOLD ] ; \n\t\t$F263472 ( pos , System , old , result ) } \n\tif ( old != null && oldSize - pos > NUM00 ) { \n\t\tSystem . arraycopy ( old , pos , result , pos + NUM00 , oldSize - pos ) ; \n\t\t} \n\tresult [ pos ] = x ; \n\treturn result ; \n\t} \n"}, {"code": "private void registerObjectRead ( Object obj , int handle , boolean unshared ) throws IOException { \n\t$F65989 ( unshared , obj , UNSHARED_OBJ ) int index = handle - ObjectStreamConstants . baseWireHandle ; \n\t$F115 ( size , objectsRead ) while ( index > size ) { \n\t\t$F722 ( objectsRead ) ++ size ; \n\t\t} \n\tif ( index == size ) $F207 ( objectsRead , obj ) else $F65992 ( objectsRead , index , obj ) } \n"}, {"code": "private boolean discardUpstreamMediaChunks ( int queueLength ) { \n\tif $F58405 ( mediaChunks , queueLength ) { \n\t\treturn _BOOL ; \n\t\t} \n\tlong startTimeUs = NUM00 ; \n\tlong endTimeUs = mediaChunks . getLast ( ) . endTimeUs ; \n\tBaseMediaChunk removed = null ; \n\twhile $F60125 ( mediaChunks , queueLength ) { \n\t\tremoved = mediaChunks . removeLast ( ) ; \n\t\tstartTimeUs = removed . startTimeUs ; \n\t\tloadingFinished = _BOOL ; \n\t\t} \n\tsampleQueue . discardUpstreamSamples ( removed . getFirstSampleIndex ( ) ) ; \n\tnotifyUpstreamDiscarded ( startTimeUs , endTimeUs ) ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void close $F72 { \n\tanimation . setRate ( - NUM00 ) ; \n\t$F6193 ( animation ) animation . setOnFinished ( null ) ; \n\t} \n"}, {"code": "Map < String , Set < CallLocationModel > > computeFilteredTaintSourcesMap ( Set < CallLocationModel > sources ) { \n\tif $F5973 ( sources ) { \n\t\tif $F1032 ( fFilteredTaintSourcesMap ) { \n\t\t\tMap < String , Set < CallLocationModel > > result = new TreeMap < String , Set < CallLocationModel > > $F72 ; \n\t\t\tfor ( Entry < String , Set < CallLocationModel > > entry : fFilteredTaintSourcesMap . entrySet ( ) ) { \n\t\t\t\tSet < CallLocationModel > filteredSources = new TreeSet < CallLocationModel > $F72 ; \n\t\t\t\tfor ( CallLocationModel source : entry . getValue ( ) ) $F45100 ( sources , source , filteredSources ) if $F5973 ( filteredSources ) { \n\t\t\t\t\t$F3477 ( taintKind , entry ) result . put ( taintKind , filteredSources ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\treturn result ; \n\t\t\t} \n\t\t} \n\treturn Collections . EMPTY_MAP ; \n\t} \n"}, {"code": "public static boolean contains ( String s , Property expected ) { \n\t$F32021 ( s , _BOOL ) int i = NUM00 ; \n\twhile $F7007 ( i , s ) { \n\t\tint codepoint = Character . codePointAt ( s , i ) ; \n\t\tEmoji e = map . get ( codepoint ) ; \n\t\t$F1933 ( e , _BOOL ) if ( ! e . is ( expected ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\ti += codepoint >= NUM00 ? NUM00 : NUM00 ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public Class toClass ( String codebase ) throws $F6427 { \n\tif $F4435 ( name ) { \n\t\treturn ClassLoading . loadClass ( codebase , name , null , integrity , null ) ; \n\t\t} \n\t$F17727 ( st , name ) $F806 ifs = new String $F49889 ( st ) ; \n\tfor ( $F1139 ( i , ifs ) ) { \n\t\tifs [ i ] = st . nextToken ( ) ; \n\t\t} \n\treturn ClassLoading . loadProxyClass ( codebase , ifs , null , integrity , null ) ; \n\t} \n"}, {"code": "private synchronized IMqttToken removeMqttToken ( Bundle data ) { \n\tString activityToken = data . getString ( MqttServiceConstants . CALLBACK_ACTIVITY_TOKEN ) ; \n\tif ( activityToken != null ) { \n\t\t$F27213 ( tokenNumber , Integer , activityToken ) IMqttToken token = tokenMap . get ( tokenNumber ) ; \n\t\ttokenMap . delete ( tokenNumber ) ; \n\t\treturn token ; \n\t\t} \n\t$F1274 } \n"}, {"code": "public static $F4203 $F19288 lowestCommonAncestor ( TreeDef . Parented $F4203 treeDef , $F5675 nodes ) { \n\tif $F10471 ( nodes ) $F21170 ( Optional ) else { \n\t\t$F19288 soFar = Optional . of ( nodes . get ( NUM00 ) ) ; \n\t\tfor ( int i = NUM00 ; \n\t\ti < nodes . size ( ) && soFar . isPresent ( ) ; \n\t\t++ i ) { \n\t\t\tsoFar = lowestCommonAncestor ( treeDef , soFar . get ( ) , nodes . get ( i ) ) ; \n\t\t\t} \n\t\treturn soFar ; \n\t\t} \n\t} \n"}, {"code": "public void copyValueNodesToMe ( Entity from ) { \n\tfor ( ValueNode fromChild : from . getChildren ( ValueNode . class ) ) { \n\t\tValueNode toChild = getChild ( fromChild . getName ( ) , ValueNode . class ) ; \n\t\ttoChild . setValue ( fromChild . getValue ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static WorldIconImage fromPixelTransparency ( BufferedImage image ) { \n\tint imageMarginTop = findFirstSolidPixelFromTop ( image ) ; \n\tint imageMarginBottom = findFirstSolidPixelFromBottom ( image ) ; \n\tint frameHeight = Math . max ( NUM00 , image . getHeight ( ) - imageMarginTop - imageMarginBottom ) ; \n\treturn new WorldIconImage ( image , NUM00 , imageMarginTop , image . getWidth ( ) , frameHeight ) ; \n\t} \n"}, {"code": "private $F2539 checkVipDiff ( PropertyInfoExt localProps , PropertyInfoRestRep rep ) { \n\t$F27462 ( vipAddrV4 , rep ) $F27462 ( vipAddrV6 , rep ) $F13404 ( diffProps ) if ( ! vipAddrV4 . equals ( localProps . getProperty ( NUM00 ) ) ) { \n\t\t$F545 ( diffProps , vipAddrV4 ) _log . warn ( NUM00 , vipAddrV4 , localProps . getProperty ( NUM00 ) ) ; \n\t\t} \n\tif ( ! vipAddrV6 . equals ( localProps . getProperty ( NUM00 ) ) ) { \n\t\t$F545 ( diffProps , vipAddrV6 ) _log . warn ( NUM00 , vipAddrV6 , localProps . getProperty ( NUM00 ) ) ; \n\t\t} \n\treturn diffProps ; \n\t} \n"}, {"code": "private static double distanceSq ( Color a , Color b ) { \n\tdouble rMean = ( a . getRed ( ) + b . getRed ( ) ) / NUM00 / NUM00 ; \n\tdouble dr = ( a . getRed ( ) - b . getRed ( ) ) / NUM00 ; \n\tdouble dg = ( a . getGreen ( ) - b . getGreen ( ) ) / NUM00 ; \n\tdouble db = ( a . getBlue ( ) - b . getBlue ( ) ) / NUM00 ; \n\tdouble d = ( NUM00 + rMean ) * dr * dr + NUM00 * dg * dg + ( NUM00 + NUM00 - rMean ) * db * db ; \n\treturn d / NUM00 ; \n\t} \n"}, {"code": "$F1 public boolean eIsSet ( int featureID ) { \n\tswitch ( featureID ) { \n\t\tcase SGraphPackage . SPECIFICATION_ELEMENT__SPECIFICATION : $F6439 ( SPECIFICATION_EDEFAULT , specification ) } \n\t$F6444 ( super , featureID ) } \n"}, {"code": "private static ApplicationType newType ( final String name ) throws IllegalAccessException , InstantiationException { \n\treturn new ApplicationType ( name , new HashMap $F91737 ( TYPE_ACTIONS ) , DumbSearchIndex . class , DumbSaveIndex . class , DumbResourceName . class ) ; \n\t} \n"}, {"code": "private void readObject ( ObjectInputStream s ) throws $F6427 { \n\t$F6428 ( s ) $F18045 ( bayesIm ) } \n"}, {"code": "public int compare ( SourceFile o1 , SourceFile o2 ) { \n\t$F20605 ( n1 , o1 ) $F20605 ( n2 , o2 ) $F12554 ( n1 , n2 ) } \n"}, {"code": "protected boolean processDynamicPropertyNodes ( Node parent , DynamicProperty property , Model model ) { \n\tCollection nodes = parent . getChildren ( ) ; \n\t$F20605 ( name , property ) String state = property . getStateName ( ) ; \n\tCDATANode cdata = getTextContent ( nodes , _BOOL ) ; \n\tif ( cdata != null ) { \n\t\treturn processDynamicPropertyText ( name , cdata . image , TextOrigin . fromChild ( cdata . inCDATA ) , cdata . beginLine , model , state ) ; \n\t\t} \n\telse { \n\t\tif ( ( state == null ) && model . hasProperty ( name ) ) { \n\t\t\tlog ( parent , new MultiplePropertyInitializerError ( name ) ) ; \n\t\t\t} \n\t\tObject rvalue = processRValueNodes ( property , nodes , model ) ; \n\t\tif ( rvalue != null ) { \n\t\t\tmodel . setDynamicProperty ( typeTable . objectType , name , rvalue , state , parent . beginLine ) ; \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\telse { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private static < T extends PsiElement > boolean processChildrenOfType ( PsiElement element , Processor $F4203 processor , $F20474 psiClass , boolean reverseOrder ) { \n\tPsiElement child = reverseOrder ? element . getLastChild ( ) : element . getFirstChild ( ) ; \n\twhile ( child != null ) { \n\t\tif $F38790 ( psiClass , child ) { \n\t\t\tif ( ! processor . process ( ( T ) child ) ) { \n\t\t\t\treturn _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( processChildrenOfType ( child , processor , psiClass , reverseOrder ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\tchild = reverseOrder ? child . getPrevSibling ( ) : child . getNextSibling ( ) ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public Instances generate $F72 throws Exception $F148106 ( generate ) "}, {"code": "protected void loadChars ( AbstractMRReply msg , DataInputStream istream ) throws IOException { \n\tint i ; \n\tfor ( i = NUM00 ; \n\ti < msg . maxSize ( ) ; \n\ti ++ ) { \n\t\tbyte char1 = readByteProtected ( istream ) ; \n\t\tif ( flushReceiveChars ) { \n\t\t\tlog . warn ( $F22435 ( msg ) ) ; \n\t\t\t$F1206 ( msg ) i = NUM00 ; \n\t\t\tflushReceiveChars = _BOOL ; \n\t\t\t} \n\t\tif ( canReceive ( ) ) { \n\t\t\tmsg . setElement ( i , char1 ) ; \n\t\t\t$F47216 ( endOfMessage , msg ) } \n\t\telse { \n\t\t\ti -- ; \n\t\t\tlog . error ( NUM00 , Integer . toHexString ( char1 ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public String evaluate ( Associator associator , Instances data ) throws Exception { \n\tlong startTime ; \n\tlong endTime ; \n\t$F3224 ( startTime , System ) associator . buildAssociations ( data ) ; \n\t$F3224 ( endTime , System ) m_Result = $F80120 ( associator ) ; \n\t$F84 ( m_Result ) m_Result . append ( NUM00 + ( ( $F250385 ( endTime , startTime ) ) / NUM00 ) + NUM00 ) ; \n\t$F84 ( m_Result ) $F92 ( m_Result ) } \n"}, {"code": "public static Integer intValue ( String propName , Integer dflt ) { \n\tString sysProp = getProperty ( propName ) ; \n\treturn $F1032 ( sysProp ) ? Integer . getInteger ( sysProp ) : dflt ; \n\t} \n"}, {"code": "public NSNumber ( int i ) { \n\tdoubleValue = longValue = i ; \n\ttype = INTEGER ; \n\t} \n"}, {"code": "$F49286 ( value , absMin , absMax , absValue , Math ) "}, {"code": "private int compareVersionParts ( String version1 , String version2 ) { \n\tint compare = NUM00 ; \n\tInteger v1 ; \n\tInteger v2 ; \n\ttry { \n\t\tv1 = version1 != null ? Integer . parseInt ( version1 ) : NUM00 ; \n\t\t} \n\tcatch ( NumberFormatException e ) { \n\t\tv1 = NUM00 ; \n\t\t} \n\ttry { \n\t\tv2 = version2 != null ? Integer . parseInt ( version2 ) : NUM00 ; \n\t\t} \n\tcatch ( NumberFormatException e ) { \n\t\tv2 = NUM00 ; \n\t\t} \n\tif ( v1 > v2 ) { \n\t\tcompare = NUM00 ; \n\t\t} \n\telse if ( v1 < v2 ) $F44867 ( compare ) else { \n\t\tcompare = NUM00 ; \n\t\t} \n\treturn compare ; \n\t} \n"}, {"code": "public void preSaveInit $F72 { \n\t$F725 ( persistentData ) for ( $F50810 ( i , getNumPoints ) ) $F3762 ( persistentData , getPoint , i ) } \n"}, {"code": "public void essential ( final Consumer < OnComplete > fn ) { \n\tthis . essential = fn ; \n\tif ( done ) { \n\t\t$F114302 ( fn , buildOnComplete ) } \n\t} \n"}, {"code": "public void addListener ( IMessageListener newListener ) $F9232 ( listeners , newListener ) "}, {"code": "public void testGetType $F72 { \n\tassertEquals ( NUM00 , tbt_crl . getType ( ) , NUM00 ) ; \n\t} \n"}, {"code": "public void addWords ( String phrase ) { \n\tif $F40270 ( phrase ) $F665 $F91090 ( words , spliterator , phrase ) if $F8830 ( words ) $F665 for ( $F1139 ( i , words ) ) { \n\t\tif ( i == NUM00 ) { \n\t\t\t$F11968 startWords = chain . get ( NUM00 ) ; \n\t\t\t$F24616 ( startWords , words , i ) $F11968 suffix = chain . get ( words [ i ] ) ; \n\t\t\tif ( suffix == null ) { \n\t\t\t\t$F15051 ( suffix ) suffix . add ( words [ i + NUM00 ] ) ; \n\t\t\t\tchain . put ( words [ i ] , suffix ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse if $F74408 ( i , words ) { \n\t\t\t$F11968 endWords = chain . get ( NUM00 ) ; \n\t\t\t$F24616 ( endWords , words , i ) } \n\t\telse { \n\t\t\t$F11968 suffix = chain . get ( words [ i ] ) ; \n\t\t\tif ( suffix == null ) { \n\t\t\t\t$F15051 ( suffix ) suffix . add ( words [ i + NUM00 ] ) ; \n\t\t\t\tchain . put ( words [ i ] , suffix ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tsuffix . add ( words [ i + NUM00 ] ) ; \n\t\t\t\tchain . put ( words [ i ] , suffix ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "@ HLEUnimplemented $F79740 public int sceNetAdhocMatchingAbortSendData ( @ CheckArgument ( NUM00 ) int matchingId , pspNetMacAddress macAddress ) $F1083 "}, {"code": "public ShortBuffer put $F186338 ( src , srcOffset , shortCount ) $F11682 ( Arrays , src , srcOffset , shortCount , remaining , i , put , this ) "}, {"code": "public boolean handleDirectory ( File directory ) { \n\tif ( DEBUG ) { \n\t\tlogger . fine ( $F4929 ( directory ) ) ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static void choose $F97618 ( n , results ) { \n\tint k = results . length ; \n\tfor ( $F119 ( i , k ) ) { \n\t\tboolean done = _BOOL ; \n\t\twhile ( ! done ) { \n\t\t\tresults [ i ] = RANDOM . nextInt ( n ) ; \n\t\t\tdone = _BOOL ; \n\t\t\tfor ( $F119 ( j , i ) ) { \n\t\t\t\tif ( results [ j ] == results [ i ] ) { \n\t\t\t\t\tdone = _BOOL ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public String printLeafModelsTipText $F72 $F2455 "}, {"code": "public void runTest $F72 throws Throwable { \n\tDocument doc ; \n\tNodeList elementList ; \n\tNode nameNode ; \n\tCharacterData child ; \n\tString childValue ; \n\tint childLength ; \n\t$F236 ( doc , load , _BOOL ) $F237 ( elementList , doc ) $F238 ( nameNode , elementList ) $F241 ( child , nameNode ) $F4055 ( childValue , child ) $F3935 ( childLength , childValue ) assertEquals ( NUM00 , NUM00 , childLength ) ; \n\t} \n"}, {"code": "public Set registerClientInterestList ( Object inputClientID , List keys , boolean updatesAsInvalidates ) { \n\tLong clientID = getClientIDForMaps ( inputClientID ) ; \n\t$F46709 ( keysRegistered , keys ) synchronized ( interestListLock ) { \n\t\tMap < Object , Set > koi = updatesAsInvalidates ? getKeysOfInterestInv ( ) : getKeysOfInterest ( ) ; \n\t\tCopyOnWriteHashSet interestList = ( CopyOnWriteHashSet ) koi . get ( clientID ) ; \n\t\tif ( interestList == null ) { \n\t\t\tinterestList = new CopyOnWriteHashSet $F72 ; \n\t\t\tkoi . put ( clientID , interestList ) ; \n\t\t\t} \n\t\telse { \n\t\t\tkeysRegistered . removeAll ( interestList . getSnapshot ( ) ) ; \n\t\t\t} \n\t\tinterestList . addAll ( keys ) ; \n\t\tif ( this . region != null && this . isLocalProfile ) { \n\t\t\tsendProfileOperation ( clientID , operationType . REGISTER_KEYS , keys , updatesAsInvalidates ) ; \n\t\t\t} \n\t\t} \n\treturn keysRegistered ; \n\t} \n"}, {"code": "public static String replace $F1947 ( inString , oldPattern , newPattern ) { \n\tif ( ! hasLength ( inString ) || ! hasLength ( oldPattern ) || newPattern == null ) { \n\t\treturn inString ; \n\t\t} \n\t$F83 ( sb ) int pos = NUM00 ; \n\t$F12747 ( index , inString , oldPattern ) $F1749 ( patLen , oldPattern ) while ( index >= NUM00 ) { \n\t\t$F13037 ( sb , inString , pos , index ) sb . append ( newPattern ) ; \n\t\tpos = index + patLen ; \n\t\tindex = inString . indexOf ( oldPattern , pos ) ; \n\t\t} \n\t$F13047 ( sb , inString , pos ) $F92 ( sb ) } \n"}, {"code": "public static $F3803 toPathParts ( String encodedPath ) { \n\t$F26918 ( encodedPath ) $F10144 ( result ) int cur = NUM00 ; \n\tboolean notDone = _BOOL ; \n\twhile ( notDone ) { \n\t\t$F12712 ( slash , encodedPath , cur ) notDone = slash != - NUM00 ; \n\t\tString sub ; \n\t\tif ( notDone ) { \n\t\t\tsub = encodedPath . substring ( cur , slash ) ; \n\t\t\t} \n\t\telse { \n\t\t\tsub = encodedPath . substring ( cur ) ; \n\t\t\t} \n\t\tresult . add ( CharEscapers . decodeUri ( sub ) ) ; \n\t\tcur = slash + NUM00 ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "$F1431 public < T extends Point2D > T inverse ( double x , double y , T ret_val ) { \n\tif ( ret_val == null ) { \n\t\tret_val = ( T ) $F54840 ; \n\t\t} \n\tdouble px = x + ul . x ; \n\tdouble py = - y + ul . y + oy ; \n\tif ( px > ProjMath . roundAdjust ( world . x / NUM00 ) ) { \n\t\tpx = ProjMath . roundAdjust ( world . x / NUM00 ) ; \n\t\t} \n\telse if ( px < ProjMath . roundAdjust ( - world . x / NUM00 ) ) { \n\t\tpx = ProjMath . roundAdjust ( - world . x / NUM00 ) ; \n\t\t} \n\tif ( py > ProjMath . roundAdjust ( world . y / NUM00 ) ) { \n\t\tpy = ProjMath . roundAdjust ( world . y / NUM00 ) ; \n\t\t} \n\telse if ( py < ProjMath . roundAdjust ( - world . y / NUM00 ) ) { \n\t\tpy = ProjMath . roundAdjust ( - world . y / NUM00 ) ; \n\t\t} \n\tdouble lat_ = normalizeLatitude ( py / spps_y ) ; \n\tdouble lon_ = wrapLongitude ( ( px / spps_x ) + centerX ) ; \n\tret_val . setLocation ( Math . toDegrees ( lon_ ) , Math . toDegrees ( lat_ ) ) ; \n\treturn ret_val ; \n\t} \n"}, {"code": "public void install ( JEditorPane c ) { \n\tc . addCaretListener ( inputAttributeUpdater ) ; \n\tc . addPropertyChangeListener ( inputAttributeUpdater ) ; \n\t$F185684 ( caret , c ) if ( caret != null ) { \n\t\tinputAttributeUpdater . updateInputAttributes ( caret . getDot ( ) , caret . getMark ( ) , c ) ; \n\t\t} \n\t} \n"}, {"code": "static public MPrintFormat createFromReportView ( Properties ctx , int AD_ReportView_ID , String ReportName ) { \n\tint AD_Client_ID = Env . getAD_Client_ID ( ctx ) ; \n\t$F67496 ( s_log , AD_ReportView_ID , AD_Client_ID , ReportName ) MPrintFormat pf = new MPrintFormat ( ctx , NUM00 , null ) ; \n\tpf . setAD_ReportView_ID ( AD_ReportView_ID ) ; \n\tString sql = $F40645 + NUM00 + NUM00 + NUM00 + NUM00 ; \n\tPreparedStatement pstmt = null ; \n\tResultSet rs = null ; \n\tboolean error = _BOOL ; \n\ttry { \n\t\t$F47577 ( pstmt , DB , sql ) $F47 ( pstmt , AD_ReportView_ID ) $F47 ( pstmt , AD_Client_ID ) $F47578 ( rs , pstmt ) if $F1682 ( rs ) { \n\t\t\tString name = ReportName ; \n\t\t\tif $F6036 ( name ) $F68584 ( name , rs ) $F24632 ( count , rs ) if ( count > NUM00 ) name += NUM00 + count ; \n\t\t\tpf . setName ( name ) ; \n\t\t\tpf . setAD_PrintColor_ID ( rs . getInt ( NUM00 ) ) ; \n\t\t\tpf . setAD_PrintFont_ID ( rs . getInt ( NUM00 ) ) ; \n\t\t\tpf . setAD_PrintPaper_ID ( rs . getInt ( NUM00 ) ) ; \n\t\t\tpf . setAD_Table_ID ( rs . getInt ( NUM00 ) ) ; \n\t\t\terror = _BOOL ; \n\t\t\t} \n\t\telse $F68676 ( s_log , Level , AD_ReportView_ID ) } \n\tcatch ( SQLException e ) { \n\t\ts_log . log ( Level . SEVERE , sql , e ) ; \n\t\t} \n\t$F47585 ( DB , rs , pstmt ) if ( error ) $F1274 if $F142838 ( pf ) $F1274 pf . setItems ( createItems ( ctx , pf ) ) ; \n\treturn pf ; \n\t} \n"}, {"code": "private boolean compareAndIncrementWorkerCount ( int expect ) { \n\treturn $F26080 ( ctl , expect ) ; \n\t} \n"}, {"code": "$F1 public $F987 listOptions $F72 { \n\t$F20795 ( result ) $F987 enm = super . listOptions ( ) ; \n\twhile $F1444 ( enm ) $F99853 ( result , enm ) result . addElement ( new Option ( $F36190 ( stopwordsTipText ) , NUM00 , NUM00 , NUM00 ) ) ; \n\t$F1007 ( result ) } \n"}, {"code": "private void enableOperationButtons $F72 $F7710 ( btnOr , _BOOL , btnAnd , btnRightParen ) "}, {"code": "private double computeModifierUnbounded ( final double x ) { \n\treturn expMultiplier * Math . exp ( - x * x / expMember ) ; \n\t} \n"}, {"code": "$F1 public boolean onUnit $F159951 ( g , x , y , w , h ) { \n\t$F319 ( fm , g ) int l = $F2354 ( m_x , w ) - fm . stringWidth ( m_id ) / NUM00 ; \n\tint t = $F2354 ( m_y , h ) - $F63370 ( fm ) ; \n\tif ( x < l || x > l + fm . stringWidth ( m_id ) + NUM00 || y < t || y > t + fm . getHeight ( ) + fm . getDescent ( ) + NUM00 ) { \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static Integer toInteger ( String str ) { \n\ttry $F62107 ( Integer , str ) catch ( Exception ex ) $F1337 } \n"}, {"code": "private static void fillWithEmptyRows ( DataTable data , int count ) { \n\twhile ( data . getRowCount ( ) < count ) { \n\t\t$F31489 emptyRow = new Double [ data . getColumnCount ( ) ] ; \n\t\t$F9952 ( Arrays , emptyRow ) data . add ( emptyRow ) ; \n\t\t} \n\t} \n"}, {"code": "public void testDivisionKnuth1 $F72 { \n\tbyte $F3009 = { \n\t\t- NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } \n\t; \n\tbyte $F3014 = $F201340 ; \n\tint aSign = NUM00 ; \n\tint bSign = NUM00 ; \n\tbyte $F3018 = { \n\t\tNUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 } \n\t; \n\t$F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F88893 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) } \n"}, {"code": "public FragmentedHandshakeMessage ( $F96 fragmentedBytes , HandshakeType type , int fragmentOffset , int messageLength , InetSocketAddress peerAddress ) { \n\tsuper ( peerAddress ) ; \n\tthis . type = type ; \n\tthis . messageLength = messageLength ; \n\t$F17879 ( this , Arrays , fragmentedBytes ) setFragmentOffset ( fragmentOffset ) ; \n\tsetFragmentLength ( fragmentedBytes . length ) ; \n\t} \n"}, {"code": "private static void deleteRetryCounter ( $F142817 weakContext , String filename , int maxRetryAttempts ) { \n\tContext context = null ; \n\tif ( weakContext != null ) { \n\t\t$F16478 ( context , weakContext ) if ( context != null ) { \n\t\t\tSharedPreferences preferences = context . getSharedPreferences ( ARTISAN_SDK , Context . MODE_PRIVATE ) ; \n\t\t\t$F37526 ( editor , preferences ) editor . remove ( NUM00 + filename ) ; \n\t\t\t$F37527 ( editor ) } \n\t\t} \n\t} \n"}, {"code": "private void initializeSparseSlider $F72 { \n\tconnectionDensitySlider . setMajorTickSpacing ( NUM00 ) ; \n\tconnectionDensitySlider . setMinorTickSpacing ( NUM00 ) ; \n\tconnectionDensitySlider . setPaintTicks ( _BOOL ) ; \n\tHashtable < Integer , JLabel > labelTable2 = new Hashtable < Integer , JLabel > $F72 ; \n\tlabelTable2 . put ( $F13791 , $F34046 ) ; \n\tlabelTable2 . put ( $F13791 , $F34046 ) ; \n\tconnectionDensitySlider . setLabelTable ( labelTable2 ) ; \n\tconnectionDensitySlider . setPaintLabels ( _BOOL ) ; \n\t} \n"}, {"code": "protected void updateTree ( DocumentEvent event ) { \n\tupdatingSelection = _BOOL ; \n\ttry { \n\t\tTreeModel model = getTreeModel ( ) ; \n\t\tObject root = model . getRoot ( ) ; \n\t\tfor ( int counter = model . getChildCount ( root ) - NUM00 ; \n\t\tcounter >= NUM00 ; \n\t\tcounter -- ) { \n\t\t\tupdateTree ( event , ( Element ) model . getChild ( root , counter ) ) ; \n\t\t\t} \n\t\t} \n\tfinally { \n\t\tupdatingSelection = _BOOL ; \n\t\t} \n\t} \n"}, {"code": "private static Shape bottomEdge ( BufferedImage image , GeneralPath path , int start ) { \n\tint lastj = NUM00 ; \n\tPoint2D p1 = path . getCurrentPoint ( ) ; \n\tPoint2D p2 = null ; \n\tLine2D line = new $F13610 $F72 ; \n\tfor ( int i = start ; \n\ti < image . getWidth ( ) ; \n\ti += sample ) { \n\t\tboolean aPointExistsOnThisLine = _BOOL ; \n\t\tfor ( int j = image . getHeight ( ) - NUM00 ; \n\t\tj >= NUM00 ; \n\t\tj -= sample ) { \n\t\t\tif ( ( image . getRGB ( i , j ) & NUM00 ) != NUM00 ) { \n\t\t\t\tPoint2D p = $F181599 ( i , j ) ; \n\t\t\t\taPointExistsOnThisLine = _BOOL ; \n\t\t\t\tp2 = detectLine ( p1 , p2 , p , line , path ) ; \n\t\t\t\tlastj = j ; \n\t\t\t\t$F597 } \n\t\t\t} \n\t\t$F15290 ( aPointExistsOnThisLine , _BOOL ) } \n\treturn rightEdge ( image , path , lastj ) ; \n\t} \n"}, {"code": "$F1 public void close $F72 throws IOException { \n\tif ( logger != null ) $F7958 ( logger , socket_was_closed ) if ( ! socket_was_closed ) { \n\t\tif ( handshake_started ) { \n\t\t\talertProtocol . alert ( AlertProtocol . WARNING , AlertProtocol . CLOSE_NOTIFY ) ; \n\t\t\ttry { \n\t\t\t\toutput . write ( alertProtocol . wrap ( ) ) ; \n\t\t\t\t} \n\t\t\t$F18071 alertProtocol . setProcessed ( ) ; \n\t\t\t} \n\t\tshutdown ( ) ; \n\t\tcloseTransportLayer ( ) ; \n\t\tsocket_was_closed = _BOOL ; \n\t\t} \n\t} \n"}, {"code": "@ FormUrlEncoded @ POST ( NUM00 ) Call < AuthenticationResponse > authorize ( @ FieldMap $F2539 authMap ) ; \n"}, {"code": "private boolean repeatingPreview ( Object tag ) { \n\ttry { \n\t\tCaptureRequest . Builder builder = mDevice . createCaptureRequest ( CameraDevice . TEMPLATE_PREVIEW ) ; \n\t\tbuilder . addTarget ( mPreviewSurface ) ; \n\t\tbuilder . set ( CaptureRequest . CONTROL_MODE , CameraMetadata . CONTROL_MODE_AUTO ) ; \n\t\taddBaselineCaptureKeysToRequest ( builder ) ; \n\t\tmCaptureSession . setRepeatingRequest ( builder . build ( ) , mCaptureCallback , mCameraHandler ) ; \n\t\tLog . v ( TAG , String . format ( NUM00 , mZoomValue ) ) ; \n\t\treturn _BOOL ; \n\t\t} \n\tcatch ( CameraAccessException ex ) { \n\t\tLog . e ( TAG , NUM00 , ex ) ; \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "private XMLElement newElement ( String name , String value , ArrayList attributes ) throws Exception $F33971 ( newElement , name , value , attributes , _BOOL ) "}, {"code": "public void mousePressed ( MouseEvent e ) { \n\tif $F585 ( log ) { \n\t\tlog . debug ( NUM00 + ( e . getModifiers ( ) & MouseEvent . BUTTON1_MASK ) + NUM00 + e . isPopupTrigger ( ) + NUM00 + ( e . getModifiers ( ) & ( MouseEvent . ALT_MASK + MouseEvent . META_MASK + MouseEvent . CTRL_MASK ) ) + ( NUM00 + MouseEvent . ALT_MASK + NUM00 + MouseEvent . META_MASK + NUM00 + MouseEvent . CTRL_MASK ) ) ; \n\t\t} \n\tif ( e . isPopupTrigger ( ) && parentFrame . isSelected ( ) ) { \n\t\ttry { \n\t\t\t$F121507 ( _menu , e ) } \n\t\tcatch ( java . awt . IllegalComponentStateException cs ) $F845 $F60335 ( e ) } \n\t} \n"}, {"code": "public void defineFillStyle ( $F197086 colors , $F2027 ratios , Transform matrix , boolean radial ) { \n\tGradientFill fill = new GradientFill ( colors , ratios , matrix , radial ) ; \n\telements . add ( fill ) ; \n\tfor ( $F1139 ( i , colors ) ) { \n\t\tif ( colors [ i ] == null ) $F1448 if ( colors [ i ] instanceof AlphaColor ) { \n\t\t\thasAlpha = _BOOL ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public boolean isOrphan ( Sha256Hash block ) { \n\t$F790 ( lock ) try $F69736 ( orphanBlocks , block ) $F796 ( lock ) } \n"}, {"code": "protected BooleanVal ( boolean b ) $F6988 ( this , b ) "}, {"code": "private void relocateFromHeaders ( ByteBuffer f , SceModule module , int baseAddress , Elf32 elf , int elfOffset ) throws IOException { \n\tint i = NUM00 ; \n\tfor ( Elf32ProgramHeader phdr : elf . getProgramHeaderList ( ) ) { \n\t\tif ( phdr . getP_type ( ) == NUM00 ) { \n\t\t\tint RelCount = phdr . getP_filesz ( ) / Elf32Relocate . sizeof ( ) ; \n\t\t\tif $F585 ( log ) { \n\t\t\t\tlog . debug ( String . format ( NUM00 , i , RelCount ) ) ; \n\t\t\t\t} \n\t\t\tf . position ( elfOffset + phdr . getP_offset ( ) ) ; \n\t\t\trelocateFromBuffer ( f , module , baseAddress , elf , RelCount , _BOOL ) ; \n\t\t\t$F665 } \n\t\telse if ( phdr . getP_type ( ) == NUM00 ) { \n\t\t\tif $F585 ( log ) { \n\t\t\t\tlog . debug ( String . format ( NUM00 , i , phdr . getP_filesz ( ) ) ) ; \n\t\t\t\t} \n\t\t\tf . position ( elfOffset + phdr . getP_offset ( ) ) ; \n\t\t\trelocateFromBufferA1 ( f , elf , baseAddress , i , phdr . getP_filesz ( ) ) ; \n\t\t\t$F665 } \n\t\ti ++ ; \n\t\t} \n\tfor ( Elf32SectionHeader shdr : elf . getSectionHeaderList ( ) ) { \n\t\tif ( mustRelocate ( elf , shdr ) ) { \n\t\t\tint RelCount = shdr . getSh_size ( ) / Elf32Relocate . sizeof ( ) ; \n\t\t\tif $F585 ( log ) { \n\t\t\t\tlog . debug ( shdr . getSh_namez ( ) + NUM00 + RelCount + NUM00 ) ; \n\t\t\t\t} \n\t\t\tf . position ( elfOffset + shdr . getSh_offset ( ) ) ; \n\t\t\trelocateFromBuffer ( f , module , baseAddress , elf , RelCount , shdr . getSh_type ( ) != Elf32SectionHeader . SHT_REL ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public $F47942 validateVolumes ( StorageSystem storageSystem , $F47942 volumes , boolean delete , boolean remediate , ValCk ... checks ) { \n\ttry { \n\t\tclient = VPlexControllerUtils . getVPlexAPIClient ( VPlexApiFactory . getInstance ( ) , storageSystem , getDbClient ( ) ) ; \n\t\tfor ( Volume volume : volumes ) { \n\t\t\ttry { \n\t\t\t\tlog . info ( String . format ( NUM00 , volume . getLabel ( ) , volume . getNativeId ( ) , volume . getId ( ) , checks . toString ( ) ) ) ; \n\t\t\t\tvalidateVolume ( volume , delete , remediate , checks ) ; \n\t\t\t\t} \n\t\t\tcatch ( Exception ex ) { \n\t\t\t\tlog . error ( $F73839 ( volume ) , ex ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tcatch ( Exception ex ) { \n\t\tlog . error ( $F73839 ( storageSystem ) , ex ) ; \n\t\t} \n\treturn remediatedVolumes ; \n\t} \n"}, {"code": "private void drawXAxisMarker ( Canvas canvas , double value , NumberFormat numberFormat , int spacing ) { \n\tString marker = chartByDistance ? numberFormat . format ( value ) : StringUtils . formatElapsedTime ( ( long ) value ) ; \n\tRect rect = getRect ( xAxisMarkerPaint , marker ) ; \n\tcanvas . drawText ( marker , getX ( value ) , topBorder + effectiveHeight + spacing + rect . height ( ) , xAxisMarkerPaint ) ; \n\t} \n"}, {"code": "public static $F11685 $F84864 list ( E ... elements ) { \n\t$F91915 ( list ) for ( E element : elements ) list . add ( element ) ; \n\treturn list ; \n\t} \n"}, {"code": "public static String encode ( $F162971 polyline , int precision ) { \n\t$F83 ( encodedPoints ) int prev_lat = NUM00 , prev_lng = NUM00 ; \n\tfor ( GeoPoint trackpoint : polyline ) { \n\t\tint lat = trackpoint . getLatitudeE6 ( ) / precision ; \n\t\tint lng = trackpoint . getLongitudeE6 ( ) / precision ; \n\t\tencodedPoints . append ( encodeSignedNumber ( lat - prev_lat ) ) ; \n\t\tencodedPoints . append ( encodeSignedNumber ( lng - prev_lng ) ) ; \n\t\tprev_lat = lat ; \n\t\tprev_lng = lng ; \n\t\t} \n\t$F92 ( encodedPoints ) } \n"}, {"code": "private static boolean isTextObscured ( JComponent c , String s ) { \n\t$F27516 ( g , c ) FontMetrics fm = g . getFontMetrics ( c . getFont ( ) ) ; \n\tint sw = fm . stringWidth ( s ) ; \n\treturn ( sw > c . getWidth ( ) ) ; \n\t} \n"}, {"code": "public void add ( Permission permission ) $F48801 ( perms , permission ) "}, {"code": "$F1 public $F12622 sum ( $F12625 ( state ) , final $F12622 left , final $F12622 right ) { \n\tfinal $F12622 tmp = new LinkedHashSet $F12621 ( left ) ; \n\ttmp . addAll ( right ) ; \n\treturn tmp ; \n\t} \n"}, {"code": "public static int prefixLength $F17564 ( s1 , s2 ) { \n\tint len = NUM00 ; \n\t$F31444 ( max , Math , s1 , s2 ) for ( int i = NUM00 ; \n\ti < max && s1 [ i ] == s2 [ i ] ; \n\t++ i ) ++ len ; \n\treturn len ; \n\t} \n"}, {"code": "public void testAllConnectedBrokerNetwork $F72 throws Exception { \n\tbridgeBrokers ( NUM00 , NUM00 ) ; \n\tbridgeBrokers ( NUM00 , NUM00 ) ; \n\tbridgeBrokers ( NUM00 , NUM00 ) ; \n\tbridgeBrokers ( NUM00 , NUM00 ) ; \n\tbridgeBrokers ( NUM00 , NUM00 ) ; \n\tbridgeBrokers ( NUM00 , NUM00 ) ; \n\tstartAllBrokers ( ) ; \n\tDestination dest = createDestination ( NUM00 , _BOOL ) ; \n\tMessageConsumer clientA = createConsumer ( NUM00 , dest ) ; \n\tMessageConsumer clientB = createConsumer ( NUM00 , dest ) ; \n\tMessageConsumer clientC = createConsumer ( NUM00 , dest ) ; \n\t$F9470 ( Thread ) sendMessages ( NUM00 , dest , MESSAGE_COUNT ) ; \n\tsendMessages ( NUM00 , dest , MESSAGE_COUNT ) ; \n\tsendMessages ( NUM00 , dest , MESSAGE_COUNT ) ; \n\tMessageIdList msgsA = getConsumerMessages ( NUM00 , clientA ) ; \n\tMessageIdList msgsB = getConsumerMessages ( NUM00 , clientB ) ; \n\tMessageIdList msgsC = getConsumerMessages ( NUM00 , clientC ) ; \n\t$F394993 ( msgsA , MESSAGE_COUNT ) $F394993 ( msgsB , MESSAGE_COUNT ) $F394993 ( msgsC , MESSAGE_COUNT ) $F394996 ( assertEquals , MESSAGE_COUNT , msgsA ) $F394996 ( assertEquals , MESSAGE_COUNT , msgsB ) $F394996 ( assertEquals , MESSAGE_COUNT , msgsC ) } \n"}, {"code": "private int encryptedColumnLength ( int colLength ) { \n\tString str = NUM00 ; \n\tfor ( $F119 ( i , colLength ) ) { \n\t\tstr += NUM00 ; \n\t\t} \n\tstr = SecureEngine . encrypt ( str ) ; \n\t$F55826 ( str ) } \n"}, {"code": "private CnATreeElement unifyLinks ( CnATreeElement sourceElement , CnATreeElement destinationElement ) throws CommandException { \n\tfor ( CnALink linkDown : sourceElement . getLinksDown ( ) ) { \n\t\tcreateLink ( destinationElement , linkDown . getDependency ( ) , linkDown . getRelationId ( ) ) ; \n\t\t} \n\tfor ( CnALink linkUp : sourceElement . getLinksUp ( ) ) { \n\t\tcreateLink ( linkUp . getDependant ( ) , destinationElement , linkUp . getRelationId ( ) ) ; \n\t\t} \n\treturn destinationElement ; \n\t} \n"}, {"code": "private boolean flushAccumulatedRegion $F72 { \n\tboolean success = _BOOL ; \n\tif ( accumulatedX != Integer . MAX_VALUE ) { \n\t\tSubRegionShowable bsSubRegion = ( SubRegionShowable ) bufferStrategy ; \n\t\t$F36356 ( contentsLost , bufferStrategy ) if ( ! contentsLost ) { \n\t\t\tbsSubRegion . show ( accumulatedX , accumulatedY , accumulatedMaxX , accumulatedMaxY ) ; \n\t\t\t$F54171 ( contentsLost , bufferStrategy ) } \n\t\tif ( contentsLost ) { \n\t\t\tif $F935 ( LOGGER , PlatformLogger ) $F102497 ( LOGGER ) bufferInfo . setInSync ( _BOOL ) ; \n\t\t\tsuccess = _BOOL ; \n\t\t\t} \n\t\t} \n\tresetAccumulated ( ) ; \n\treturn success ; \n\t} \n"}, {"code": "public void testBitLengthPositive1 $F72 { \n\t$F67214 int aSign = NUM00 ; \n\t$F3023 ( aNumber , aSign , aBytes ) $F6961 ( assertEquals , aNumber ) } \n"}, {"code": "public void clearPieSegments $F72 $F9096 ( mPieSegmentList ) "}, {"code": "$F1 public PatchResult applyPatch ( PatchData patchData ) { \n\tString typeName = patchData . getTypeName ( ) ; \n\tString applyVersion = patchData . getApplyToVersion ( ) ; \n\tTypesDef updatedTypeDef ; \n\tPatchResult result ; \n\ttry { \n\t\tif ( checkIfTypeExists ( typeName , metadataService ) ) { \n\t\t\tTypesDef typesDef = getTypeDef ( typeName ) ; \n\t\t\tString currentVersion = getTypeVersion ( typeName ) ; \n\t\t\tif ( currentVersion == null || currentVersion . equalsIgnoreCase ( applyVersion ) || currentVersion . startsWith ( applyVersion + NUM00 ) ) { \n\t\t\t\tupdatedTypeDef = updateTypesDef ( typesDef , patchData ) ; \n\t\t\t\tif ( updatedTypeDef != null ) { \n\t\t\t\t\tmetadataService . updateType ( TypesSerialization . toJson ( updatedTypeDef ) ) ; \n\t\t\t\t\tLOG . info ( NUM00 + patchData . getTypeName ( ) + NUM00 + patchData . getApplyToVersion ( ) + NUM00 + patchData . getUpdateToVersion ( ) ) ; \n\t\t\t\t\tresult = new PatchResult ( NUM00 , PatchStatus . SUCCESS ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tLOG . error ( NUM00 + typeName + NUM00 + applyVersion + NUM00 + patchData . getUpdateToVersion ( ) ) ; \n\t\t\t\t\tresult = new PatchResult ( NUM00 , PatchStatus . FAILED ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tLOG . info ( NUM00 + patchData . getTypeName ( ) ) ; \n\t\t\t\tresult = new PatchResult ( NUM00 , PatchStatus . SKIPPED ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tLOG . error ( NUM00 + typeName + NUM00 + applyVersion + NUM00 + patchData . getUpdateToVersion ( ) + NUM00 ) ; \n\t\t\tresult = new PatchResult ( NUM00 , PatchStatus . FAILED ) ; \n\t\t\t} \n\t\t} \n\tcatch ( AtlasException e ) { \n\t\tLOG . error ( NUM00 + patchData . getTypeName ( ) ) ; \n\t\tresult = new PatchResult ( NUM00 , PatchStatus . FAILED ) ; \n\t\t} \n\tcatch ( JSONException e ) { \n\t\tLOG . error ( NUM00 + patchData . getTypeName ( ) ) ; \n\t\tresult = new PatchResult ( NUM00 , PatchStatus . FAILED ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static String randomAlphanumerical ( final int len ) { \n\t$F94214 ( sb , len ) for ( $F119 ( i , len ) ) { \n\t\t$F37726 ( sb , AB , random ) } \n\t$F92 ( sb ) } \n"}, {"code": "static int svd_imax ( int a , int b ) { \n\t$F85710 ( Math , a , b ) } \n"}, {"code": "public void actionPerformed ( ActionEvent e ) { \n\t$F185684 ( c , textArea ) if ( c . getDot ( ) != c . getMark ( ) ) $F932 RSyntaxDocument doc = ( RSyntaxDocument ) textArea . getDocument ( ) ; \n\tdoc . readLock ( ) ; \n\ttry { \n\t\tremoveHighlights ( ) ; \n\t\tint line = textArea . getCaretLineNumber ( ) ; \n\t\t$F48983 ( tokenList , textArea , line ) int dot = c . getDot ( ) ; \n\t\tToken t = RSyntaxUtilities . getTokenAtOffset ( tokenList , dot ) ; \n\t\tif ( t == null || ! isValidType ( t ) || isNonWordChar ( t ) ) { \n\t\t\tdot -- ; \n\t\t\ttry { \n\t\t\t\tif ( dot >= textArea . getLineStartOffset ( line ) ) { \n\t\t\t\t\tt = RSyntaxUtilities . getTokenAtOffset ( tokenList , dot ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F203264 ( ble ) } \n\t\tif ( t != null && isValidType ( t ) && ! isNonWordChar ( t ) ) { \n\t\t\tRSyntaxTextAreaHighlighter h = ( RSyntaxTextAreaHighlighter ) textArea . getHighlighter ( ) ; \n\t\t\tString lexeme = t . getLexeme ( ) ; \n\t\t\tint type = t . type ; \n\t\t\tfor ( int i = NUM00 ; \n\t\t\ti < textArea . getLineCount ( ) ; \n\t\t\ti ++ ) { \n\t\t\t\t$F48983 ( temp , textArea , i ) while ( temp != null && temp . isPaintable ( ) ) { \n\t\t\t\t\tif ( temp . is ( type , lexeme ) ) { \n\t\t\t\t\t\ttry { \n\t\t\t\t\t\t\tint end = temp . offset + temp . textCount ; \n\t\t\t\t\t\t\tObject tag = h . addMarkedOccurrenceHighlight ( temp . offset , end , p ) ; \n\t\t\t\t\t\t\ttags . add ( tag ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t$F203264 ( ble ) } \n\t\t\t\t\ttemp = temp . getNextToken ( ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tfinally { \n\t\tdoc . readUnlock ( ) ; \n\t\t} \n\ttextArea . fireMarkedOccurrencesChanged ( ) ; \n\t} \n"}, {"code": "public boolean restoreAccessibilityFocus ( CalendarDay day ) { \n\tif ( ( day . year != mYear ) || ( day . month != mMonth ) || ( day . day > mNumCells ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tmTouchHelper . setFocusedVirtualView ( day . day ) ; \n\treturn _BOOL ; \n\t} \n"}, {"code": "private boolean isMimeFormat ( long format , String primaryType ) { \n\tString nat = getNativeForFormat ( format ) ; \n\t$F1933 ( nat , _BOOL ) try { \n\t\tDataFlavor df = new DataFlavor ( nat ) ; \n\t\tif ( primaryType . equals ( df . getPrimaryType ( ) ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\t$F3957 return _BOOL ; \n\t} \n"}, {"code": "private static String convertRelevance ( int relevance ) { \n\t$F83 ( sb ) while ( relevance > NUM00 ) { \n\t\tsb . insert ( NUM00 , REVERSE_CHAR_MAP [ relevance % NUM00 ] ) ; \n\t\trelevance = relevance / NUM00 ; \n\t\t} \n\t$F92 ( sb ) } \n"}, {"code": "public synchronized AlphabeticIndex addLabels ( Locale locale ) { \n\t$F10665 ( addLabels , peer , locale ) return this ; \n\t} \n"}, {"code": "public void sort $F72 $F57005 ( Collections , individuals , PERFORMANCE_COMPARATOR ) "}, {"code": "int extractVersionFromFilename ( final File file ) { \n\tfinal Matcher matcher = versionedPattern . matcher ( file . getAbsolutePath ( ) ) ; \n\tmatcher . find ( ) ; \n\treturn $F13289 ( Integer , matcher ) ; \n\t} \n"}, {"code": "static int measureChildForCells $F19021 ( child , cellSize , cellsRemaining , parentHeightMeasureSpec , parentHeightPadding ) { \n\t$F3670 ( lp , child ) final int childHeightSize = MeasureSpec . getSize ( parentHeightMeasureSpec ) - parentHeightPadding ; \n\t$F19025 ( childHeightMode , MeasureSpec , parentHeightMeasureSpec ) final int childHeightSpec = MeasureSpec . makeMeasureSpec ( childHeightSize , childHeightMode ) ; \n\tint cellsUsed = NUM00 ; \n\tif ( cellsRemaining > NUM00 ) { \n\t\tfinal int childWidthSpec = MeasureSpec . makeMeasureSpec ( cellSize * cellsRemaining , MeasureSpec . AT_MOST ) ; \n\t\tchild . measure ( childWidthSpec , childHeightSpec ) ; \n\t\tfinal int measuredWidth = child . getMeasuredWidth ( ) ; \n\t\tcellsUsed = measuredWidth / cellSize ; \n\t\tif ( measuredWidth % cellSize != NUM00 ) cellsUsed ++ ; \n\t\t} \n\tfinal ActionMenuItemView itemView = child instanceof ActionMenuItemView ? ( ActionMenuItemView ) child : null ; \n\tfinal boolean expandable = ! lp . isOverflowButton && itemView != null && itemView . hasText ( ) ; \n\tlp . expandable = expandable ; \n\tlp . cellsUsed = cellsUsed ; \n\tfinal int targetWidth = cellsUsed * cellSize ; \n\tchild . measure ( $F19050 ( MeasureSpec , targetWidth ) , childHeightSpec ) ; \n\treturn cellsUsed ; \n\t} \n"}, {"code": "public void runTest $F72 throws Throwable { \n\tDocument doc ; \n\tNodeList elementList ; \n\tNode nameNode ; \n\tCharacterData child ; \n\tString badString ; \n\t$F236 ( doc , load , _BOOL ) $F237 ( elementList , doc ) $F238 ( nameNode , elementList ) $F241 ( child , nameNode ) { \n\t\tboolean success = _BOOL ; \n\t\ttry { \n\t\t\tbadString = child . substringData ( $F72322 ) ; \n\t\t\t} \n\t\t$F250 ( success , ex , DOMException ) assertTrue ( NUM00 , success ) ; \n\t\t} \n\t} \n"}, {"code": "private boolean isSpecializedHandlerAvailable ( Intent intent ) { \n\t$F45547 ( pm , mActivity ) $F45549 handlers = pm . queryIntentActivities ( intent , PackageManager . GET_RESOLVED_FILTER ) ; \n\t$F45556 ( handlers , _BOOL ) for ( ResolveInfo resolveInfo : handlers ) { \n\t\tIntentFilter filter = resolveInfo . filter ; \n\t\t$F4322 ( filter ) if ( filter . countDataAuthorities ( ) == NUM00 && filter . countDataPaths ( ) == NUM00 ) $F1448 return _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "private void convertError ( CharBuffer buf , int line ) { \n\tString srcFilename = null ; \n\tint destLine = NUM00 ; \n\tint srcLine = NUM00 ; \n\tint srcTailLine = Integer . MAX_VALUE ; \n\tfor ( $F2277 ( i , _lines ) ) { \n\t\tLine map = ( Line ) _lines . get ( i ) ; \n\t\tif ( map . _dstLine <= line && line <= map . getLastDestinationLine ( ) ) { \n\t\t\tsrcFilename = map . _srcFilename ; \n\t\t\tdestLine = map . _dstLine ; \n\t\t\tsrcLine = map . getSourceLine ( line ) ; \n\t\t\t$F597 } \n\t\t} \n\tif ( srcFilename != null ) $F845 else if $F3817 ( _lines ) srcFilename = ( ( Line ) _lines . get ( NUM00 ) ) . _srcFilename ; \n\telse srcFilename = NUM00 ; \n\tbuf . append ( srcFilename ) ; \n\tif ( line >= NUM00 ) { \n\t\t$F84 ( buf ) buf . append ( srcLine + ( line - destLine ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static String slurpGBURLNoExceptions ( URL u ) { \n\ttry $F4915 ( slurpGBURL , u ) $F84580 ( e ) } \n"}, {"code": "public void undo $F72 { \n\tif $F5973 ( undoStack ) { \n\t\tUndoableAction lastEvent = undoStack . pop ( ) ; \n\t\tlastEvent . undo ( ) ; \n\t\tredoStack . push ( lastEvent ) ; \n\t\t} \n\t} \n"}, {"code": "private void emitListAdd $F6406 ( method , fieldName , builder ) { \n\t$F84 ( builder ) $F6407 ( builder , getListAdderName , fieldName ) $F84 ( builder ) builder . append ( getTypeArgumentImplName ( ( ParameterizedType ) method . getGenericReturnType ( ) , NUM00 ) ) ; \n\t$F84 ( builder ) $F6407 ( builder , getEnsureName , fieldName ) $F84 ( builder ) builder . append ( fieldName ) ; \n\t$F84 ( builder ) $F84 ( builder ) } \n"}, {"code": "public Pair < SolrCore , SolrCore > replicateToDestination ( SolrCore bestsrcCore , SolrCore destinationCore ) throws Exception { \n\tPair < SolrCore , SolrCore > replicationRequestPair = null ; \n\ttry { \n\t\tSolrInteractionUtils . replicateIndex ( destinationCore . host , destinationCore . name , bestsrcCore . host , bestsrcCore . name ) ; \n\t\tString fullReplication = NUM00 ; \n\t\tString replicator = String . format ( fullReplication , destinationCore . host , SolrInteractionUtils . DEFAULT_SOLR_PORT , destinationCore . name , bestsrcCore . host , SolrInteractionUtils . DEFAULT_SOLR_PORT , bestsrcCore . name ) ; \n\t\t$F556 ( logger , replicator ) replicationRequestPair = new Pair < SolrCore , SolrCore > ( destinationCore , bestsrcCore ) ; \n\t\tlogger . info ( NUM00 + destinationCore . host + NUM00 + destinationCore . name + NUM00 + bestsrcCore . host + NUM00 + bestsrcCore . name ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tlogger . info ( NUM00 + destinationCore . host + NUM00 + bestsrcCore . host ) ; \n\t\tif ( ! replicatorConfig . shouldSkipReplicationFailures ( ) ) { \n\t\t\tthrow new ReplicationFailureException ( NUM00 + destinationCore . host + NUM00 + bestsrcCore . host ) ; \n\t\t\t} \n\t\t} \n\treturn replicationRequestPair ; \n\t} \n"}, {"code": "public static OSType calculateOS $F72 { \n\t$F27462 ( osName , System ) osName = $F91593 ( osName , Locale ) ; \n\tif $F3106 ( osName ) { \n\t\treturn OSType . APPLE ; \n\t\t} \n\tif $F3106 ( osName ) { \n\t\treturn OSType . WINDOWS ; \n\t\t} \n\tif $F3106 ( osName ) { \n\t\treturn OSType . LINUX ; \n\t\t} \n\tif $F3106 ( osName ) { \n\t\treturn OSType . SUN ; \n\t\t} \n\treturn OSType . UNKNOWN ; \n\t} \n"}, {"code": "private static int countDuplicates ( $F11340 currentStack , $F11340 parentStack ) { \n\tint duplicates = NUM00 ; \n\tint parentIndex = parentStack . length ; \n\tfor ( int i = currentStack . length ; \n\t-- i >= NUM00 && -- parentIndex >= NUM00 ; \n\t) { \n\t\tStackTraceElement parentFrame = parentStack [ parentIndex ] ; \n\t\tif $F145 ( parentFrame , currentStack , i ) { \n\t\t\tduplicates ++ ; \n\t\t\t} \n\t\telse $F5153 } \n\treturn duplicates ; \n\t} \n"}, {"code": "public void recycle $F72 { \n\tsynchronized ( sPool ) { \n\t\tif $F10255 ( sPool , MAX_POOL_SIZE ) $F207 ( sPool , this ) } \n\t} \n"}, {"code": "private String buildInsert ( boolean disableReturning ) { \n\t$F4910 ( sb ) $F84 ( sb ) appendTable ( sb ) ; \n\t$F84 ( sb ) sb . append ( options . keyColumnName ) ; \n\t$F84 ( sb ) if ( options . doctypeColumnName != null ) { \n\t\tsb . append ( options . doctypeColumnName ) ; \n\t\t$F84 ( sb ) } \n\tsb . append ( options . contentColumnName ) ; \n\t$F84 ( sb ) if ( options . timestampColumnName != null ) { \n\t\t$F84 ( sb ) sb . append ( options . timestampColumnName ) ; \n\t\t$F84 ( sb ) } \n\tif ( options . creationColumnName != null ) { \n\t\t$F84 ( sb ) sb . append ( options . creationColumnName ) ; \n\t\t$F84 ( sb ) } \n\tif ( ( options . versionColumnName != null ) && ( options . versioningMethod ) != CollectionDescriptor . VERSION_NONE ) { \n\t\t$F84 ( sb ) sb . append ( options . versionColumnName ) ; \n\t\t$F84 ( sb ) } \n\t$F84 ( sb ) if ( ( options . keySequenceName != null ) && ( ! disableReturning ) ) { \n\t\tswitch ( options . keyDataType ) { \n\t\t\tcase CollectionDescriptor . INTEGER_KEY : $F84 ( sb ) sb . append ( options . keySequenceName ) ; \n\t\t\t$F84 ( sb ) $F597 case CollectionDescriptor . RAW_KEY : $F84 ( sb ) sb . append ( options . keySequenceName ) ; \n\t\t\t$F84 ( sb ) $F597 case CollectionDescriptor . NUM00 <missing ';'> _KEY : case CollectionDescriptor . NCHAR_KEY : default : $F84 ( sb ) sb . append ( options . keySequenceName ) ; \n\t\t\t$F84 ( sb ) $F597 } \n\t\t} \n\telse if ( ( options . keyAssignmentMethod == CollectionDescriptor . KEY_ASSIGN_GUID ) && ( ! disableReturning ) ) { \n\t\tswitch ( options . keyDataType ) { \n\t\t\tcase CollectionDescriptor . INTEGER_KEY : $F84 ( sb ) $F84 ( sb ) $F84 ( sb ) $F597 case CollectionDescriptor . RAW_KEY : $F84 ( sb ) $F597 case CollectionDescriptor . NUM00 <missing ';'> _KEY : case CollectionDescriptor . NCHAR_KEY : default : $F84 ( sb ) $F597 } \n\t\t"}, {"code": "public final boolean exists $F72 $F40347 ( config ) "}, {"code": "$F1 public synchronized void removeTestSetListener ( TestSetListener tsl ) $F130709 ( m_testListeners , tsl ) "}, {"code": "private boolean has_colinear ( ArrayList $F137739 corners_list , PlaPointInt a_point ) { \n\t$F2199 ( count , corners_list ) $F12655 ( count , _BOOL ) for ( $F4864 ( index , count ) ) { \n\t\tPlaPointInt start = corners_list . get ( index ) ; \n\t\tPlaPointInt end = corners_list . get ( index + NUM00 ) ; \n\t\tif ( a_point . side_of ( start , end ) != PlaSide . COLLINEAR ) $F598 $F12662 ( d_start_p , start , a_point ) $F12662 ( d_p_end , a_point , end ) $F12662 ( d_start_end , start , end ) if ( d_start_end >= d_start_p ) { \n\t\t\tif ( d_start_end >= d_p_end ) { \n\t\t\t\treturn _BOOL ; \n\t\t\t\t} \n\t\t\telse $F12663 ( corners_list , index , a_point , _BOOL ) } \n\t\telse { \n\t\t\tif ( d_start_end >= d_p_end ) { \n\t\t\t\t$F12666 ( corners_list , index , a_point ) return _BOOL ; \n\t\t\t\t} \n\t\t\telse $F12663 ( corners_list , index , a_point , _BOOL ) } \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public boolean contains ( String key ) $F69736 ( myProperties , key ) "}, {"code": "protected SnmpCachedData updateCachedDatas ( Object userData ) { \n\tfinal $F806 path = JvmRuntimeImpl . getLibraryPath ( userData ) ; \n\t$F42358 ( time , System ) $F18832 ( len , path ) SnmpOid indexes [ ] = new SnmpOid [ len ] ; \n\tfor ( $F119 ( i , len ) ) { \n\t\tindexes [ i ] = new SnmpOid ( i + NUM00 ) ; \n\t\t} \n\treturn new SnmpCachedData ( time , indexes , path ) ; \n\t} \n"}, {"code": "public static $F96 decodeHex ( String hexString ) { \n\t$F115 ( length , hexString ) if $F69047 ( length ) $F825 boolean badHex = _BOOL ; \n\t$F96 out = new byte [ length > > NUM00 ] ; \n\tfor ( int i = NUM00 , j = NUM00 ; \n\tj < length ; \n\ti ++ ) { \n\t\t$F52835 ( c1 , hexString , j ) if ( c1 > NUM00 ) $F3468 ( badHex , _BOOL ) final byte d1 = DIGITS [ c1 ] ; \n\t\tif ( d1 == - NUM00 ) $F3468 ( badHex , _BOOL ) $F52835 ( c2 , hexString , j ) if ( c2 > NUM00 ) $F3468 ( badHex , _BOOL ) final byte d2 = DIGITS [ c2 ] ; \n\t\tif ( d2 == - NUM00 ) $F3468 ( badHex , _BOOL ) out [ i ] = $F112580 ( d1 , d2 ) ; \n\t\t} \n\tif ( badHex ) $F18931 ( hexString ) return out ; \n\t} \n"}, {"code": "public static void deletePlayer ( PlayerAccountData accData ) { \n\tif ( accData . getDeletionDate ( ) != null ) $F932 accData . setDeletionDate ( new Timestamp ( System . currentTimeMillis ( ) + $F264 ) ) ; \n\tstoreDeletionTime ( accData ) ; \n\t} \n"}, {"code": "public int eval ( INode state ) { \n\tEightPuzzleNode node = ( EightPuzzleNode ) state ; \n\tint Pn = NUM00 ; \n\tfor ( int r = NUM00 ; \n\tr <= EightPuzzleNode . MaxR ; \n\tr ++ ) { \n\t\tfor ( int c = NUM00 ; \n\t\tc <= EightPuzzleNode . MaxC ; \n\t\tc ++ ) { \n\t\t\tif ( node . isEmpty ( r , c ) ) $F1448 int digit = node . cell ( r , c ) ; \n\t\t\tPn += Math . abs ( diffs [ digit ] [ NUM00 ] - r ) ; \n\t\t\tPn += Math . abs ( diffs [ digit ] [ NUM00 ] - c ) ; \n\t\t\t} \n\t\t} \n\tint Sn = NUM00 ; \n\tif ( ! node . isEmpty ( NUM00 , NUM00 ) ) { \n\t\tSn = NUM00 ; \n\t\t} \n\tfor ( int r = NUM00 ; \n\tr <= EightPuzzleNode . MaxR ; \n\tr ++ ) { \n\t\tfor ( int c = NUM00 ; \n\t\tc <= EightPuzzleNode . MaxC ; \n\t\tc ++ ) { \n\t\t\tint idx = r * NUM00 + c ; \n\t\t\tif ( r == NUM00 && c == NUM00 ) $F1448 if ( node . cell ( r , c ) == EightPuzzleNode . EmptyMark ) $F1448 if ( succ [ node . cell ( r , c ) ] != node . cell ( succs [ idx ] [ NUM00 ] , succs [ idx ] [ NUM00 ] ) ) { \n\t\t\t\tSn += NUM00 ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tint gn = NUM00 ; \n\tDepthTransition t = ( DepthTransition ) state . storedData ( ) ; \n\tif ( t != null ) { \n\t\tgn = t . depth ; \n\t\t} \n\treturn gn + Pn + NUM00 * Sn ; \n\t} \n"}, {"code": "public void testBuffered $F72 { \n\tInstances icopy = new Instances ( m_Instances ) ; \n\tInstances result = null ; \n\ttry { \n\t\tm_Filter . setInputFormat ( icopy ) ; \n\t\t} \n\tcatch ( Exception ex ) { \n\t\t$F301 ( ex ) $F13951 ( fail , ex ) } \n\ttry { \n\t\tresult = Filter . useFilter ( icopy , m_Filter ) ; \n\t\tassertNotNull ( result ) ; \n\t\t} \n\tcatch ( Exception ex ) { \n\t\t$F301 ( ex ) $F13951 ( fail , ex ) } \n\tStringWriter sw = new StringWriter $F989 ; \n\t$F9826 ( sw , result ) assertTrue ( icopy . equalHeaders ( m_Instances ) ) ; \n\tassertEquals ( icopy . numInstances ( ) , m_Instances . numInstances ( ) ) ; \n\tInstances result2 = null ; \n\ttry { \n\t\tm_Filter . setInputFormat ( icopy ) ; \n\t\t} \n\tcatch ( Exception ex ) { \n\t\t$F301 ( ex ) $F13951 ( fail , ex ) } \n\ttry { \n\t\tresult2 = Filter . useFilter ( icopy , m_Filter ) ; \n\t\tassertNotNull ( result2 ) ; \n\t\t} \n\tcatch ( Exception ex ) { \n\t\t$F301 ( ex ) $F13951 ( fail , ex ) } \n\tassertTrue ( icopy . equalHeaders ( m_Instances ) ) ; \n\tassertEquals ( icopy . numInstances ( ) , m_Instances . numInstances ( ) ) ; \n\tassertTrue ( result . equalHeaders ( result2 ) ) ; \n\tassertEquals ( result . numInstances ( ) , result2 . numInstances ( ) ) ; \n\t} \n"}, {"code": "private String parseCss ( final String css ) { \n\tfinal $F2539 map = $F12080 ; \n\t$F3239 ( sb ) $F66059 ( m , PATTERN_VARIABLES_DEFINITION , css ) while $F281 ( m ) { \n\t\t$F356510 ( variablesBody , m ) map . putAll ( extractVariables ( variablesBody ) ) ; \n\t\tm . appendReplacement ( sb , NUM00 ) ; \n\t\t} \n\tm . appendTail ( sb ) ; \n\t$F38747 ( replaceVariables , sb , map ) } \n"}, {"code": "private void shutdown $F72 { \n\tif ( execSvc != null ) execSvc . shutdown ( NUM00 ) ; \n\tif ( msgExecSvc != null ) $F5832 ( msgExecSvc ) try { \n\t\tjob . dispose ( _BOOL ) ; \n\t\t} \n\tcatch ( IgniteCheckedException e ) { \n\t\tU . error ( log , NUM00 , e ) ; \n\t\t} \n\t} \n"}, {"code": "$F130716 ( m_inCData , _BOOL , append , m_doc ) "}, {"code": "public void addAll ( List < Fragment > aSplits ) $F21926 ( splits , aSplits ) "}, {"code": "protected synchronized int currentchunkoffset $F72 throws IOException { \n\tlong fp = backingRandomAccessFile . getFilePointer ( ) ; \n\tif ( fp < fHeader . headerSize ( ) ) $F7629 else { \n\t\tfp -= fHeader . headerSize ( ) ; \n\t\tif ( fp == NUM00 ) $F1083 else { \n\t\t\treturn ( int ) ( ( fp % CHUNK_ENC_SIZE ) - CHUNK_IV_SIZE ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private int parseIntValue ( String input ) throws NumberFormatException { \n\tint value = NUM00 ; \n\tif $F3106 ( input ) { \n\t\t$F28924 ( temp , input ) $F15516 ( Integer , temp ) } \n\telse if $F3106 ( input ) { \n\t\t$F28924 ( temp , input ) $F7782 ( chars , temp ) if $F3305 ( chars ) { \n\t\t\t$F21291 } \n\t\telse { \n\t\t\tfor ( $F1139 ( i , chars ) ) { \n\t\t\t\tint index = chars . length - i - NUM00 ; \n\t\t\t\tswitch ( chars [ i ] ) { \n\t\t\t\t\t$F1262 value += NUM00 ; \n\t\t\t\t\t$F597 $F1262 value += NUM00 * getBase ( index ) ; \n\t\t\t\t\t$F597 $F1262 value += NUM00 * getBase ( index ) ; \n\t\t\t\t\t$F597 $F1262 value += NUM00 * getBase ( index ) ; \n\t\t\t\t\t$F597 $F1262 value += NUM00 * getBase ( index ) ; \n\t\t\t\t\t$F597 $F1262 value += NUM00 * getBase ( index ) ; \n\t\t\t\t\t$F597 $F1262 value += NUM00 * getBase ( index ) ; \n\t\t\t\t\t$F597 $F1262 value += NUM00 * getBase ( index ) ; \n\t\t\t\t\t$F597 $F1262 value += NUM00 * getBase ( index ) ; \n\t\t\t\t\t$F597 $F1262 value += NUM00 * getBase ( index ) ; \n\t\t\t\t\t$F597 $F1262 $F1262 value += NUM00 * getBase ( index ) ; \n\t\t\t\t\t$F597 $F1262 $F1262 value += NUM00 * getBase ( index ) ; \n\t\t\t\t\t$F597 $F1262 $F1262 value += NUM00 * getBase ( index ) ; \n\t\t\t\t\t$F597 $F1262 $F1262 value += NUM00 * getBase ( index ) ; \n\t\t\t\t\t$F597 $F1262 $F1262 value += NUM00 * getBase ( index ) ; \n\t\t\t\t\t$F597 $F1262 $F1262 value += NUM00 * getBase ( index ) ; \n\t\t\t\t\t$F597 $F1267 throw new NumberFormatException $F580 ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tif ( value < NUM00 ) $F101477 } \n\telse $F37473 ( value , Integer , input ) return value ; \n\t} \n"}, {"code": "protected int decodeLinePrefix ( PushbackInputStream aStream , OutputStream bStream ) throws IOException { \n\treturn ( bytesPerLine ( ) ) ; \n\t} \n"}, {"code": "private static LookupLocator [ ] unmarshalLocators ( ObjectInputStream in ) throws $F6427 { \n\t$F19151 ( l ) MarshalledInstance mi ; \n\twhile ( ( mi = ( MarshalledInstance ) in . readObject ( ) ) != null ) { \n\t\ttry { \n\t\t\tl . add ( ( LookupLocator ) mi . get ( _BOOL ) ) ; \n\t\t\t} \n\t\tcatch ( Throwable e ) { \n\t\t\tif ( e instanceof Error && ThrowableConstants . retryable ( e ) == ThrowableConstants . BAD_OBJECT ) { \n\t\t\t\t$F106249 ( e ) } \n\t\t\tlogger . log ( Level . WARNING , NUM00 , e ) ; \n\t\t\t} \n\t\t} \n\treturn ( LookupLocator [ ] ) l . toArray ( new LookupLocator $F2313 ( l ) ) ; \n\t} \n"}, {"code": "public void accept ( final AnnotationVisitor av ) { \n\tif ( av != null ) { \n\t\tif ( values != null ) { \n\t\t\tfor ( $F48125 ( i , values ) ) { \n\t\t\t\t$F123 ( name , values , i ) Object value = values . get ( i + NUM00 ) ; \n\t\t\t\taccept ( av , name , value ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F110334 ( av ) } \n\t} \n"}, {"code": "static public String numberToString ( Number n ) throws JSONException { \n\tif ( n == null ) $F19954 testValidity ( n ) ; \n\t$F1822 ( s , n ) if ( s . indexOf ( NUM00 ) > NUM00 && $F1730 ( s ) && $F1730 ( s ) ) { \n\t\twhile $F8991 ( s ) $F8994 ( s ) $F8996 ( s ) } \n\treturn s ; \n\t} \n"}, {"code": "public int children $F72 $F1652 ( children ) "}, {"code": "public void createVVset ( String displayName ) throws Exception { \n\t$F973 ( _log ) ClientResponse clientResp = null ; \n\tString payload = NUM00 + displayName + NUM00 ; \n\t_log . info ( $F89018 ( URI_CREATE_CG , payload ) ) ; \n\ttry { \n\t\tclientResp = post ( URI_CREATE_CG , payload ) ; \n\t\tif ( clientResp == null ) { \n\t\t\t$F9464 ( _log ) throw new HP3PARException $F580 ; \n\t\t\t} \n\t\telse if ( clientResp . getStatus ( ) != NUM00 ) { \n\t\t\tString errResp = getResponseDetails ( clientResp ) ; \n\t\t\t$F5197 ( _log , errResp ) throw new HP3PARException ( errResp ) ; \n\t\t\t} \n\t\telse $F22715 ( _log ) } \n\t$F91522 ( e ) finally { \n\t\t$F2727 ( clientResp ) $F973 ( _log ) } \n\t} \n"}, {"code": "protected void connectionFailed ( Channel failedChannel , IOException cause ) { \n\tfailureCause = IOExceptionSupport . create ( cause ) ; \n\tchannel = failedChannel ; \n\tconnected . set ( _BOOL ) ; \n\thandshakeFuture . setFailure ( cause ) ; \n\t} \n"}, {"code": "$F195241 ( uint8 , hexString , Integer , low , high , result ) "}, {"code": "$F130385 ( c , internalOut ) "}, {"code": "$F35402 ( context , cameraManager ) "}, {"code": "public void addAttribute ( String uri , String localName , String rawName , String type , String value , boolean XSLAttribute ) throws SAXException { \n\tif ( m_elemContext . m_startTagOpen ) { \n\t\tensurePrefixIsDeclared ( uri , rawName ) ; \n\t\taddAttributeAlways ( uri , localName , rawName , type , value , _BOOL ) ; \n\t\t} \n\t} \n"}, {"code": "private String markdownBlockquote ( String value ) { \n\treturn NUM00 + $F2934 ( value ) ; \n\t} \n"}, {"code": "protected String hash ( String key ) { \n\ttry { \n\t\tMessageDigest gen = HASH_GENERATOR . get ( ) ; \n\t\t$F151317 ( keyBytes , key ) $F6163 ( gen , keyBytes ) $F294889 ( binaryhash , gen ) return ENCODER . encodeToString ( binaryhash ) ; \n\t\t} \n\tcatch ( Exception e ) $F66732 ( LOG , key , e ) $F1274 } \n"}, {"code": "public static boolean isInputType ( String typeString ) $F298 ( INPUT_TYPES , typeString ) "}, {"code": "public static Point destination ( Point point1 , double distance , double bearing , String units ) throws TurfException { \n\tdouble degrees2radians = Math . PI / NUM00 ; \n\tdouble radians2degrees = NUM00 / Math . PI ; \n\tPosition coordinates1 = point1 . getCoordinates ( ) ; \n\tdouble longitude1 = degrees2radians * coordinates1 . getLongitude ( ) ; \n\tdouble latitude1 = degrees2radians * coordinates1 . getLatitude ( ) ; \n\tdouble bearingRad = degrees2radians * bearing ; \n\tdouble radians = TurfHelpers . distanceToRadians ( distance , units ) ; \n\tdouble latitude2 = Math . asin ( Math . sin ( latitude1 ) * Math . cos ( radians ) + Math . cos ( latitude1 ) * Math . sin ( radians ) * Math . cos ( bearingRad ) ) ; \n\tdouble longitude2 = longitude1 + Math . atan2 ( Math . sin ( bearingRad ) * Math . sin ( radians ) * Math . cos ( latitude1 ) , Math . cos ( radians ) - Math . sin ( latitude1 ) * Math . sin ( latitude2 ) ) ; \n\treturn Point . fromCoordinates ( Position . fromCoordinates ( radians2degrees * longitude2 , radians2degrees * latitude2 ) ) ; \n\t} \n"}, {"code": "public void clear $F72 { \n\tsynchronized ( mLock ) { \n\t\t$F725 ( mGraphics ) mFirstGraphic = null ; \n\t\t} \n\tpostInvalidate ( ) ; \n\t} \n"}, {"code": "$F1431 public NodePanel ( ShaderNodeVariable singleOut , NodePanel . NodeType type ) { \n\tsuper ( ) ; \n\tList < ShaderNodeVariable > outputs = new ArrayList < ShaderNodeVariable > $F72 ; \n\toutputs . add ( singleOut ) ; \n\tthis . type = type ; \n\tinit ( new ArrayList < ShaderNodeVariable > $F72 , outputs ) ; \n\taddKeyListener ( this ) ; \n\ttoolBar = new NodeToolBar ( this ) ; \n\t} \n"}, {"code": "public static String stringifyException ( Throwable e ) { \n\t$F29429 ( stm ) $F80496 ( wrt , stm ) e . printStackTrace ( wrt ) ; \n\t$F59 ( wrt ) $F92 ( stm ) } \n"}, {"code": "private HeronReefUtils $F72 $F845 "}, {"code": "public static boolean isSolaris $F72 $F48848 ( OS ) "}, {"code": "public double SumInlinkHubScore ( Page page ) { \n\t$F3803 inLinks = page . getInlinks ( ) ; \n\tdouble hubScore = NUM00 ; \n\tfor ( $F2277 ( i , inLinks ) ) { \n\t\tPage inLink = $F67701 ( pTable , inLinks , i ) ; \n\t\tif ( inLink != null ) { \n\t\t\thubScore += inLink . hub ; \n\t\t\t} \n\t\telse $F1448 } \n\treturn hubScore ; \n\t} \n"}, {"code": "$F1 public void addUndoPoint $F72 { \n\tFile tempFile ; \n\tObjectOutputStream oos ; \n\t$F933 ( isUndoEnabled ) if $F89491 ( getInstances ) { \n\t\ttry { \n\t\t\ttempFile = File . createTempFile ( NUM00 , null ) ; \n\t\t\t$F60829 ( tempFile ) oos = $F20341 ( tempFile ) ; \n\t\t\toos . writeObject ( getInstances ( ) ) ; \n\t\t\t$F1206 ( oos ) $F59 ( oos ) m_UndoList . add ( tempFile ) ; \n\t\t\t} \n\t\t$F1516 ( e ) } \n\t} \n"}, {"code": "$F73354 ( curViewBound , curViewWidth , right , mClipPadding ) "}, {"code": "private void preserveParentLink ( String brokenTableName , String brokenColumnName , String brokenDefaultValue , $F5 brokenCompareColumns , String hintTableName , String hintColumnName , $F5 hintCompareColumns ) { \n\tString vendorName = m_target . getVendor ( ) ; \n\tString catalogName = m_target . getCatalog ( ) ; \n\tString schemaName = m_target . getSchema ( ) ; \n\tif ( m_source . isObjectExists ( brokenTableName , m_source . getTables ( ) ) ) { \n\t\tboolean columnToPreserveLinkExists = _BOOL ; \n\t\tDBObject tableToPreserveLink = m_source . getObjectByName ( brokenTableName , m_source . getTables ( ) ) ; \n\t\tHashMap < Integer , DBObjectDefinition > columns = tableToPreserveLink . getContents ( ) ; \n\t\t$F24610 vc = new $F24610 $F57797 ( columns ) ; \n\t\tfor ( Iterator $F2305 ic = vc . iterator ( ) ; \n\t\tic . hasNext ( ) ; \n\t\t) { \n\t\t\t$F128162 ( kc , ic ) DBObject_Table_Column columnDetail = ( DBObject_Table_Column ) columns . get ( kc ) ; \n\t\t\t$F20605 ( columnName , columnDetail ) if $F8397 ( columnName , brokenColumnName ) columnToPreserveLinkExists = _BOOL ; \n\t\t\t} \n\t\tif ( columnToPreserveLinkExists ) { \n\t\t\ts_logger . log ( Level . FINE , NUM00 , $F42238 ( m_objectType , brokenTableName , m_direction ) ) ; \n\t\t\tString sqlCommand = s_dbEngine . sqlAction_preserveParentLinks ( vendorName , catalogName , schemaName , brokenTableName , brokenColumnName , brokenDefaultValue , brokenCompareColumns , hintTableName , hintColumnName , hintCompareColumns ) ; \n\t\t\tif ( sqlCommand != null ) { \n\t\t\t\tSavepoint sp = m_target . setSavepoint ( NUM00 ) ; \n\t\t\t\tStatement stmt = m_target . setStatement ( ) ; \n\t\t\t\tInteger sqlResult = m_target . executeUpdate ( stmt , sqlCommand , _BOOL , _BOOL ) ; \n\t\t\t\tif ( sqlResult != null ) { \n\t\t\t\t\tlogUpdateDetail ( sqlResult , null ) ; \n\t\t\t\t\tm_counterUpd = new Integer ( m_counterUpd . intValue ( ) + NUM00 ) ; \n\t\t\t\t\t} \n\t\t\t\tm_target . releaseStatement ( stmt ) ; \n\t\t\t\tm_totalUpd = new Integer ( m_totalUpd . intValue ( ) + NUM00 ) ; \n\t\t\t\tm_target . releaseSavepoint ( sp ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public ShortBandedRaster $F235065 ( sampleModel , dataBuffer , origin ) $F235073 ( this , sampleModel , dataBuffer , origin ) "}, {"code": "public void remapMappedTypes $F72 $F19529 ( clearMappedTypes , mapPossibleTypes , mItems ) "}, {"code": "public void initialize $F72 throws ExecutionException $F845 "}, {"code": "public int numChildren ( int row ) { \n\tint count = NUM00 ; \n\t$F725 ( nextValidRowPositions ) for ( $F119 ( i , n ) ) { \n\t\tboard [ row ] [ i ] = _BOOL ; \n\t\tif ( valid ( row , i ) ) { \n\t\t\tcount ++ ; \n\t\t\tnextValidRowPositions . add ( i ) ; \n\t\t\t} \n\t\tboard [ row ] [ i ] = _BOOL ; \n\t\t} \n\treturn count ; \n\t} \n"}, {"code": "public void testNegNegSameLength $F72 $F9149 ( numA , numB , res , aNumber , bNumber , result , assertTrue ) "}, {"code": "public static IJavaSearchScope createRelatedProjectsScope ( IJavaProject project , int includeMask ) throws CoreException { \n\tIJavaProject [ ] projects = getRelatedProjects ( project ) ; \n\treturn SearchEngine . createJavaSearchScope ( projects , includeMask ) ; \n\t} \n"}, {"code": "public Confirmation $F72 { \n\tthis ( null , null ) ; \n\t} \n"}, {"code": "public VcsRevisionNumber originalRevision ( int lineNumber ) $F4915 ( getLineRevisionNumber , lineNumber ) "}, {"code": "private void checkPausedOrCanceled ( State state ) throws StopRequest { \n\tif ( mService . getControl ( ) == DownloaderService . CONTROL_PAUSED ) { \n\t\tint status = mService . getStatus ( ) ; \n\t\tswitch ( status ) { \n\t\t\tcase DownloaderService . STATUS_PAUSED_BY_APP : throw new StopRequest ( mService . getStatus ( ) , NUM00 ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "void trace $F72 { \n\tglUseProgram ( computeProgram ) ; \n\tinvProjMatrix . transformProject ( tmpVector . set ( - NUM00 , - NUM00 , NUM00 ) ) ; \n\tglUniform3f ( ray00Uniform , tmpVector . x , tmpVector . y , tmpVector . z ) ; \n\tinvProjMatrix . transformProject ( tmpVector . set ( - NUM00 , NUM00 , NUM00 ) ) ; \n\tglUniform3f ( ray01Uniform , tmpVector . x , tmpVector . y , tmpVector . z ) ; \n\tinvProjMatrix . transformProject ( tmpVector . set ( NUM00 , - NUM00 , NUM00 ) ) ; \n\tglUniform3f ( ray10Uniform , tmpVector . x , tmpVector . y , tmpVector . z ) ; \n\tinvProjMatrix . transformProject ( tmpVector . set ( $F25460 ) ) ; \n\tglUniform3f ( ray11Uniform , tmpVector . x , tmpVector . y , tmpVector . z ) ; \n\tglBindBufferBase ( GL_SHADER_STORAGE_BUFFER , trianglesSsboBinding , ssbo ) ; \n\tglBindImageTexture ( framebufferImageBinding , raytraceTexture , NUM00 , _BOOL , NUM00 , GL_WRITE_ONLY , GL_RGBA8 ) ; \n\tint worksizeX = mathRoundPoT ( width ) ; \n\tint worksizeY = mathRoundPoT ( height ) ; \n\tglDispatchCompute ( worksizeX / workGroupSizeX , worksizeY / workGroupSizeY , NUM00 ) ; \n\tglMemoryBarrier ( GL_SHADER_IMAGE_ACCESS_BARRIER_BIT ) ; \n\t$F224834 ( glBindImageTexture , framebufferImageBinding , _BOOL , GL_WRITE_ONLY , GL_RGBA8 ) glBindBufferBase ( GL_SHADER_STORAGE_BUFFER , trianglesSsboBinding , NUM00 ) ; \n\tglUseProgram ( NUM00 ) ; \n\t} \n"}, {"code": "public void removeAllActionFireListeners $F72 $F9096 ( mActionFiredListeners ) "}, {"code": "public static String millisToString ( long millis ) { \n\tboolean negative = millis < NUM00 ; \n\t$F15467 ( millis , Math ) millis /= NUM00 ; \n\t$F273037 ( sec , millis ) millis /= NUM00 ; \n\t$F273037 ( min , millis ) millis /= NUM00 ; \n\t$F29204 ( hours , millis ) String time ; \n\tDecimalFormat format = ( DecimalFormat ) NumberFormat . getInstance ( Locale . US ) ; \n\t$F125027 ( format ) if ( millis > NUM00 ) { \n\t\ttime = ( negative ? NUM00 : NUM00 ) + hours + NUM00 + format . format ( min ) + NUM00 + format . format ( sec ) ; \n\t\t} \n\telse { \n\t\ttime = ( negative ? NUM00 : NUM00 ) + min + NUM00 + format . format ( sec ) ; \n\t\t} \n\treturn time ; \n\t} \n"}, {"code": "@ Inline public static void toUTF8 ( String s , ByteBuffer b ) { \n\tint result_index = NUM00 ; \n\tfor ( $F133333 ( i , n , s ) ) { \n\t\t$F1280 ( c , s , i ) if ( ( ( ! WRITE_PSEUDO_UTF8 ) || ( c >= NUM00 ) ) && ( c <= NUM00 ) ) $F180946 ( b , c ) else if ( c > NUM00 ) { \n\t\t\tb . put ( ( byte ) ( NUM00 | $F8043 ( c ) ) ) ; \n\t\t\tb . put ( ( byte ) ( NUM00 | $F84702 ( c ) ) ) ; \n\t\t\tb . put ( ( byte ) ( NUM00 | ( c & NUM00 ) ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tb . put ( ( byte ) ( NUM00 | $F8043 ( c ) ) ) ; \n\t\t\tb . put ( ( byte ) ( NUM00 | ( c & NUM00 ) ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public CopyOnWriteArrayList $F102871 ( toCopyIn ) { \n\tsetArray ( Arrays . copyOf ( toCopyIn , toCopyIn . length , $F22453 ) ) ; \n\t} \n"}, {"code": "$F1 public StringBuffer format ( long number , StringBuffer toAppendTo , FieldPosition pos ) { \n\treturn toAppendTo . append ( getDirectionCode ( number ) ) ; \n\t} \n"}, {"code": "public static void main $F4374 ( args ) throws Exception { \n\tdigestCommandLineArguments ( args ) ; \n\tboolean inHeadlessMode = GraphicsEnvironment . isHeadless ( ) ; \n\tboolean inConvertMode = isinConvertMode ( ) ; \n\tSCXMLGraphEditor editor = startEditor ( inConvertMode || inHeadlessMode ) ; \n\tif ( isinConvertMode ( ) ) { \n\t\tSCXMLEditorActions . convertNoGUI ( editor ) ; \n\t\t} \n\telse if ( ! inHeadlessMode ) { \n\t\tString input = getPresetInput ( ) ; \n\t\tif ( ! StringUtils . isEmptyString ( input ) ) { \n\t\t\tOpenAction open = new OpenAction $F15780 ( input ) ; \n\t\t\topen . actionPerformed ( new ActionEvent ( editor , NUM00 , NUM00 ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void testEqualsUnequal2 $F72 { \n\tString a = NUM00 ; \n\tint aScale = - NUM00 ; \n\tString b = NUM00 ; \n\tint bScale = NUM00 ; \n\t$F1918 ( aNumber , a , aScale ) $F1918 ( bNumber , b , bScale ) $F28249 ( assertFalse , aNumber , bNumber ) } \n"}, {"code": "protected void enableRetransmissionTimer ( int tickCount ) { \n\tif ( isInviteTransaction ( ) && ( this instanceof SIPClientTransaction ) ) { \n\t\tretransmissionTimerTicksLeft = tickCount ; \n\t\t} \n\telse { \n\t\tretransmissionTimerTicksLeft = $F102434 ( Math , tickCount , getTimerT2 ) ; \n\t\t} \n\tretransmissionTimerLastTickCount = retransmissionTimerTicksLeft ; \n\t} \n"}, {"code": "private void scheduleMsgForAllConsumers ( JetstreamMessage msg ) { \n\tif $F585 ( LOGGER ) $F101275 ( LOGGER , msg ) EventConsumerInfo info = null ; \n\tArrayList < LinkedList < Selection > > weightedList = m_eventTopicRegistry . get ( msg . getTopic ( ) ) ; \n\tif ( weightedList != null ) { \n\t\tIterator < LinkedList < Selection > > weightedItr = weightedList . iterator ( ) ; \n\t\twhile $F2921 ( weightedItr ) { \n\t\t\tLinkedList < Selection > consumerList = weightedItr . next ( ) ; \n\t\t\tIterator < Selection > itr = consumerList . iterator ( ) ; \n\t\t\twhile $F2921 ( itr ) { \n\t\t\t\tinfo = ( EventConsumerInfo ) itr . next ( ) ; \n\t\t\t\t$F45557 ( info ) dispatch ( info , msg ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse { \n\t\tif ( m_advisoryListener != null ) { \n\t\t\tpostResendAdvisory ( msg ) ; \n\t\t\t$F72375 ( m_noConsumerAdvisories ) } \n\t\telse { \n\t\t\t$F72375 ( m_totalMsgsDropped ) $F72375 ( m_dropsForNoConsumer ) } \n\t\t} \n\t} \n"}, {"code": "$F1 public Void visitDeclared ( AnnotatedDeclaredType declaredType , Void aVoid ) { \n\t$F5972 ( pause ) parents . push ( declaredType ) ; \n\tsuper . visitDeclared ( declaredType , aVoid ) ; \n\t$F34454 ( parents ) $F1274 } \n"}, {"code": "public Class create $F72 { \n\tsetUseCache ( _BOOL ) ; \n\treturn ( Class ) super . create ( this ) ; \n\t} \n"}, {"code": "public static $F4203 $F5675 tuple ( T ... objects ) { \n\treturn Collections . unmodifiableList ( list ( objects ) ) ; \n\t} \n"}, {"code": "protected static Set stringArrayToSet $F4374 ( strs ) { \n\tint count = strs . length ; \n\tSet set = ( ( count > NUM00 ) ? new HashSet ( count ) : new HashSet $F72 ) ; \n\t$F117265 ( i , count , set , strs ) return set ; \n\t} \n"}, {"code": "public boolean authenticate ( final OddCallback < AuthToken > callback ) { \n\tsynchronized ( syncLock ) { \n\t\t$F58185 ( isExpired , _BOOL ) if ( ! authenticating ) { \n\t\t\tauthenticating = _BOOL ; \n\t\t\ttimer = new Timer $F72 ; \n\t\t\tTimerTask task = getPollTask ( callback ) ; \n\t\t\ttimer . schedule ( task , $F4094 , interval ) ; \n\t\t\tTimerTask expiredTask = getExpiredTask ( callback ) ; \n\t\t\ttimer . schedule ( expiredTask , expirationDate ) ; \n\t\t\t} \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public static void cancelNotificationsForRoomId ( String accountId , String roomId ) { \n\t$F17544 ( Log , LOG_TAG , accountId , roomId ) if ( null != mActiveEventStreamService ) { \n\t\tmActiveEventStreamService . cancelNotifications ( accountId , roomId ) ; \n\t\t} \n\t} \n"}, {"code": "public static Optional < PlayerProfile > lookup ( UUID id ) { \n\tif ( Bukkit . getPlayer ( id ) != null ) { \n\t\treturn Optional . of ( fromPlayer ( Bukkit . getPlayer ( id ) ) ) ; \n\t\t} \n\treturn lookupProperties ( id ) ; \n\t} \n"}, {"code": "static double svd_dmin ( double a , double b ) { \n\t$F95700 ( Math , a , b ) } \n"}, {"code": "private StoragePort selectStoragePort ( $F42521 spList ) { \n\tCollections . shuffle ( spList ) ; \n\t$F38159 ( spList ) } \n"}, {"code": "private void assimilateContext ( NestingException nestingException ) { \n\tEnumeration < ExceptionContext > enumExeptions = nestingException . getExceptionContexts ( ) ; \n\tif $F1444 ( enumExeptions ) { \n\t\twhile $F1444 ( enumExeptions ) { \n\t\t\taddExceptionContext ( enumExeptions . nextElement ( ) ) ; \n\t\t\t} \n\t\tnestingException . clearContexts ( ) ; \n\t\t} \n\t} \n"}, {"code": "public boolean equals ( Object o ) { \n\tif ( o instanceof AMIdentitySubject ) { \n\t\tAMIdentitySubject subject = ( AMIdentitySubject ) o ; \n\t\treturn $F52920 ( subjectValues , subject ) ; \n\t\t} \n\treturn ( _BOOL ) ; \n\t} \n"}, {"code": "public void updateKeyinfo ( String realm , String entityName , $F24190 ( extValues ) , $F24190 ( stdValues ) , boolean isIDP ) throws AMConsoleException { \n\tString keysize = getResult ( stdValues , TF_KEY_NAME ) ; \n\tString algorithm = getResult ( stdValues , TF_ALGORITHM ) ; \n\t$F42356 ( signingCertAliases ) $F42356 ( encryptionCertAliases ) if ( isIDP ) { \n\t\tencryptionCertAliases = extValues . get ( IDP_ENCRYPT_CERT_ALIAS ) ; \n\t\tsigningCertAliases = extValues . get ( IDP_SIGN_CERT_ALIAS ) ; \n\t\t} \n\telse { \n\t\tencryptionCertAliases = extValues . get ( SP_ENCRYPT_CERT_ALIAS ) ; \n\t\tsigningCertAliases = extValues . get ( SP_SIGN_CERT_ALIAS ) ; \n\t\t} \n\tint keysi = ! StringUtils . isEmpty ( keysize ) ? Integer . parseInt ( keysize ) : NUM00 ; \n\tString alg = StringUtils . isEmpty ( algorithm ) ? XMLCipher . AES_128 : algorithm ; \n\ttry { \n\t\tSAML2MetaSecurityUtils . updateProviderKeyInfo ( realm , entityName , signingCertAliases , _BOOL , isIDP , alg , keysi ) ; \n\t\tSAML2MetaSecurityUtils . updateProviderKeyInfo ( realm , entityName , encryptionCertAliases , _BOOL , isIDP , alg , keysi ) ; \n\t\t} \n\tcatch ( SAML2MetaException e ) { \n\t\t$F21557 ( debug , e ) $F21559 ( getErrorString , e ) } \n\t} \n"}, {"code": "public void updateSlider ( final double p , final boolean n ) { \n\tcheckWidget ( ) ; \n\tdouble percentage = p ; \n\tif ( step != null ) { \n\t\tpercentage = Math . round ( percentage / step ) * step ; \n\t\t} \n\tthis . notify = n ; \n\tif ( percentage < NUM00 ) { \n\t\tpercentage = NUM00 ; \n\t\t} \n\telse $F127479 ( percentage ) final int usefulWidth = getClientArea ( ) . width - thumbWidth ; \n\tfinal int $F22510 ( width , Math , usefulWidth , percentage ) ; \n\tmoveThumbHorizontally ( width ) ; \n\tpreviousPosition = percentage ; \n\tthis . notify = _BOOL ; \n\t} \n"}, {"code": "$F1 public boolean contains ( String identifier ) $F298 ( whitelist , identifier ) "}, {"code": "public static final Action [ ] augmentList ( Action [ ] list1 , Action [ ] list2 ) { \n\tHashtable < String , Action > h = new Hashtable < String , Action > $F72 ; \n\tfor ( Action a : list1 ) { \n\t\tString value = ( String ) a . getValue ( Action . NAME ) ; \n\t\th . put ( $F134738 ( value ) , a ) ; \n\t\t} \n\tfor ( Action a : list2 ) { \n\t\tString value = ( String ) a . getValue ( Action . NAME ) ; \n\t\th . put ( $F134738 ( value ) , a ) ; \n\t\t} \n\tAction [ ] actions = new Action $F2313 ( h ) ; \n\tint index = NUM00 ; \n\tfor ( $F44696 ( e , h ) ) { \n\t\tactions [ index ++ ] = ( Action ) e . nextElement ( ) ; \n\t\t} \n\treturn actions ; \n\t} \n"}, {"code": "public MVMap $F9340 openVersion ( long version ) { \n\tif ( readOnly ) { \n\t\tthrow DataUtils . newUnsupportedOperationException ( NUM00 + NUM00 ) ; \n\t\t} \n\tDataUtils . checkArgument ( version >= createVersion , NUM00 , version , createVersion ) ; \n\tPage newest = null ; \n\tPage r = root ; \n\tif ( version >= r . getVersion ( ) && ( version == writeVersion || r . getVersion ( ) >= NUM00 || version <= createVersion || store . getFileStore ( ) == null ) ) { \n\t\tnewest = r ; \n\t\t} \n\telse { \n\t\tPage last = oldRoots . peekFirst ( ) ; \n\t\tif ( last == null || version < last . getVersion ( ) ) { \n\t\t\treturn store . openMapVersion ( version , id , this ) ; \n\t\t\t} \n\t\tIterator < Page > it = oldRoots . iterator ( ) ; \n\t\twhile $F2921 ( it ) { \n\t\t\tPage p = it . next ( ) ; \n\t\t\tif ( p . getVersion ( ) > version ) $F5153 last = p ; \n\t\t\t} \n\t\tnewest = last ; \n\t\t} \n\tMVMap $F9340 m = openReadOnly ( ) ; \n\tm . root = newest ; \n\treturn m ; \n\t} \n"}, {"code": "public DTMDefaultBase ( DTMManager mgr , Source source , int dtmIdentity , DTMWSFilter whiteSpaceFilter , XMLStringFactory xstringfactory , boolean doIndexing , int blocksize , boolean usePrevsib , boolean newNameTable ) { \n\tint numblocks ; \n\tif ( blocksize <= NUM00 ) { \n\t\tnumblocks = DEFAULT1BLOCKS_SMALL ; \n\t\tm_dtmIdent = new SuballocatedIntVector $F32532 ; \n\t\t} \n\telse { \n\t\tnumblocks = DEFAULT1BLOCKS ; \n\t\t$F78588 ( m_dtmIdent ) } \n\t$F521423 ( m_exptype , blocksize , numblocks ) $F521423 ( m_firstch , blocksize , numblocks ) $F521423 ( m_nextsib , blocksize , numblocks ) $F521423 ( m_parent , blocksize , numblocks ) if ( usePrevsib ) $F521423 ( m_prevsib , blocksize , numblocks ) m_mgr = mgr ; \n\tif ( mgr instanceof DTMManagerDefault ) m_mgrDefault = ( DTMManagerDefault ) mgr ; \n\tm_documentBaseURI = ( null != source ) ? source . getSystemId ( ) : null ; \n\tm_dtmIdent . setElementAt ( dtmIdentity , NUM00 ) ; \n\tm_wsfilter = whiteSpaceFilter ; \n\tm_xstrf = xstringfactory ; \n\tm_indexing = doIndexing ; \n\tif ( doIndexing ) { \n\t\tm_expandedNameTable = new ExpandedNameTable $F72 ; \n\t\t} \n\telse { \n\t\tm_expandedNameTable = m_mgrDefault . getExpandedNameTable ( this ) ; \n\t\t} \n\tif ( null != whiteSpaceFilter ) { \n\t\tm_shouldStripWhitespaceStack = new BoolStack $F72 ; \n\t\tpushShouldStripWhitespace ( _BOOL ) ; \n\t\t} \n\t} \n"}, {"code": "private boolean lessThanOrEqual $F7233 ( a , b ) { \n\t$F31444 ( len , Math , a , b ) for ( $F31445 ( i , len ) ) { \n\t\tif $F14614 ( a , i , b ) { \n\t\t\treturn ( a [ i ] & NUM00 ) < ( b [ i ] & NUM00 ) ; \n\t\t\t} \n\t\t} \n\treturn len == a . length ; \n\t} \n"}, {"code": "protected $F40512 ( parts_ ) "}, {"code": "public static boolean isNumber ( String s ) { \n\ttry { \n\t\tInteger . valueOf ( s ) ; \n\t\treturn _BOOL ; \n\t\t} \n\t$F7474 ( _BOOL ) } \n"}, {"code": "private boolean isOuterGState $F72 { \n\t$F214965 ( mGStateStack ) } \n"}, {"code": "public void testCase24 $F72 { \n\t$F15143 BigInteger aNumber = BigInteger . ONE ; \n\tBigInteger bNumber = BigInteger . ONE ; \n\t$F10683 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F10686 ( assertEquals , result ) } \n"}, {"code": "void add ( SuperCardToast superCardToast ) $F207 ( mList , superCardToast ) "}, {"code": "static public Tasker create $F72 { \n\treturn new Tasker $F72 ; \n\t} \n"}, {"code": "public static String concernStackString ( BlockInfo blockInfo ) { \n\tString result = NUM00 ; \n\tfor ( String stackEntry : blockInfo . threadStackEntries ) { \n\t\tif ( $F22878 ( Character , stackEntry ) ) { \n\t\t\t$F806 lines = stackEntry . split ( BlockInfo . SEPARATOR ) ; \n\t\t\tfor ( String line : lines ) { \n\t\t\t\tString keyStackString = concernStackString ( line ) ; \n\t\t\t\t$F21525 ( keyStackString ) } \n\t\t\treturn classSimpleName ( lines [ NUM00 ] ) ; \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "static String gravityToString ( @ EdgeGravity int gravity ) { \n\tif ( ( gravity & Gravity . LEFT ) == Gravity . LEFT ) $F2455 if ( ( gravity & Gravity . RIGHT ) == Gravity . RIGHT ) $F2455 if ( ( gravity & Gravity . BOTTOM ) == Gravity . BOTTOM ) $F2455 return Integer . toHexString ( gravity ) ; \n\t} \n"}, {"code": "public void removeAllRenderers $F72 $F9096 ( mRenderers ) "}, {"code": "public static int writeSpeexHeader ( $F96 buf , int offset , int sampleRate , int mode , int channels , boolean vbr , int nframes , int packetlength ) { \n\twriteString ( buf , offset , NUM00 ) ; \n\twriteString ( buf , offset + NUM00 , NUM00 ) ; \n\tSystem . arraycopy ( $F10314 , NUM00 , buf , offset + NUM00 , NUM00 ) ; \n\twriteInt ( buf , offset + NUM00 , NUM00 ) ; \n\twriteInt ( buf , offset + NUM00 , NUM00 ) ; \n\twriteInt ( buf , offset + NUM00 , sampleRate ) ; \n\twriteInt ( buf , offset + NUM00 , mode ) ; \n\twriteInt ( buf , offset + NUM00 , NUM00 ) ; \n\twriteInt ( buf , offset + NUM00 , channels ) ; \n\twriteInt ( buf , offset + NUM00 , - NUM00 ) ; \n\twriteInt ( buf , offset + NUM00 , NUM00 < < mode ) ; \n\twriteInt ( buf , offset + NUM00 , vbr ? NUM00 : NUM00 ) ; \n\twriteInt ( buf , offset + NUM00 , nframes ) ; \n\twriteInt ( buf , offset + NUM00 , NUM00 ) ; \n\twriteInt ( buf , offset + NUM00 , packetlength ) ; \n\twriteInt ( buf , offset + NUM00 , NUM00 ) ; \n\t$F1082 } \n"}, {"code": "private static File igniteHadoopConfig ( String igniteHome ) { \n\tPath path = Paths . get ( igniteHome , NUM00 , NUM00 , NUM00 ) ; \n\tif $F33270 ( Files , path ) path = Paths . get ( igniteHome , NUM00 , NUM00 ) ; \n\tif $F97092 ( Files , path ) return path . toFile ( ) ; \n\telse return $F109794 ( igniteHome ) ; \n\t} \n"}, {"code": "$F11730 ( logPrefix , request , exception , retryPolicy , oldTimeout , String , e ) "}, {"code": "protected ApproximationLine conservativeKnnDistanceApproximation ( int k_max ) { \n\tint k_0 = k_max ; \n\tdouble y_1 = Double . NEGATIVE_INFINITY ; \n\tdouble y_kmax = Double . NEGATIVE_INFINITY ; \n\tfor ( $F50810 ( i , getNumEntries ) ) { \n\t\tMkCoPEntry entry = getEntry ( i ) ; \n\t\tApproximationLine approx = entry . getConservativeKnnDistanceApproximation ( ) ; \n\t\tk_0 = Math . min ( approx . getK_0 ( ) , k_0 ) ; \n\t\t} \n\tfor ( $F50810 ( i , getNumEntries ) ) { \n\t\tMkCoPEntry entry = getEntry ( i ) ; \n\t\tApproximationLine approx = entry . getConservativeKnnDistanceApproximation ( ) ; \n\t\tdouble entry_y_1 = approx . getValueAt ( k_0 ) ; \n\t\tdouble entry_y_kmax = approx . getValueAt ( k_max ) ; \n\t\tif ( ! Double . isInfinite ( entry_y_1 ) ) { \n\t\t\t$F28619 ( y_1 , Math , entry_y_1 ) } \n\t\tif ( ! Double . isInfinite ( entry_y_kmax ) ) { \n\t\t\t$F28619 ( y_kmax , Math , entry_y_kmax ) } \n\t\t} \n\tdouble m = ( y_kmax - y_1 ) / ( Math . log ( k_max ) - Math . log ( k_0 ) ) ; \n\tdouble t = y_1 - m * Math . log ( k_0 ) ; \n\treturn new ApproximationLine ( k_0 , m , t ) ; \n\t} \n"}, {"code": "public final boolean shares_layer ( BrdItem p_other ) { \n\tint max_first_layer = Math . max ( $F120503 ( first_layer , p_other ) ) ; \n\tint min_last_layer = $F203679 ( Math , last_layer , p_other ) ; \n\treturn max_first_layer <= min_last_layer ; \n\t} \n"}, {"code": "$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel ) "}, {"code": "$F16994 ( buf ) "}, {"code": "public CoapClient ( URI uri ) $F94311 ( this , uri ) "}, {"code": "private void zero $F72 throws JSONException { \n\tif ( probe ) $F73598 ( log ) write ( NUM00 , NUM00 ) ; \n\t} \n"}, {"code": "public static boolean beenDone ( TimeUnit timeUnit , long amount , String tag , CountChecker numberOfTimes ) { \n\tlong timeInMillis = timeUnit . toMillis ( amount ) ; \n\treturn beenDone ( timeInMillis , tag , numberOfTimes ) ; \n\t} \n"}, {"code": "public static String normalize ( String oid ) { \n\treturn $F3390 ( oid ) ; \n\t} \n"}, {"code": "public RtcpPacket parseRtcpPacket ( Packet packet ) { \n\tRtcpCompoundPacket compoundPacket = new RtcpCompoundPacket ( packet ) ; \n\tVector < RtcpPacket > subpackets = new Vector < RtcpPacket > $F72 ; \n\tDataInputStream in = new DataInputStream ( new ByteArrayInputStream ( compoundPacket . data , compoundPacket . offset , compoundPacket . length ) ) ; \n\ttry { \n\t\trtcpSession . updateavgrtcpsize ( compoundPacket . length ) ; \n\t\tint length = NUM00 ; \n\t\tfor ( int offset = NUM00 ; \n\t\toffset < compoundPacket . length ; \n\t\toffset += length ) { \n\t\t\t$F34181 ( firstbyte , in ) if $F69047 ( firstbyte ) $F1337 $F34181 ( type , in ) $F89921 ( length , in ) length = length + NUM00 < < NUM00 ; \n\t\t\tint padlen = NUM00 ; \n\t\t\tif ( offset + length > compoundPacket . length ) $F1337 if ( offset + length == compoundPacket . length ) { \n\t\t\t\tif $F69047 ( firstbyte ) { \n\t\t\t\t\tpadlen = compoundPacket . data [ $F24941 ( compoundPacket ) - NUM00 ] & NUM00 ; \n\t\t\t\t\t$F38155 ( padlen ) } \n\t\t\t\t} \n\t\t\telse if $F69047 ( firstbyte ) $F1337 int inlength = length - padlen ; \n\t\t\tfirstbyte &= NUM00 ; \n\t\t\tRtcpPacket subpacket ; \n\t\t\tswitch ( type ) { \n\t\t\t\tcase RtcpPacket . RTCP_SR : stats . numSrPkts ++ ; \n\t\t\t\tif ( inlength != NUM00 + NUM00 * firstbyte ) { \n\t\t\t\t\tstats . numMalformedRtcpPkts ++ ; \n\t\t\t\t\t$F1274 } \n\t\t\t\tRtcpSenderReportPacket srp = new RtcpSenderReportPacket ( compoundPacket ) ; \n\t\t\t\tsubpacket = srp ; \n\t\t\t\tsrp . ssrc = in . readInt ( ) ; \n\t\t\t\tsrp . ntptimestampmsw = $F247606 ( in ) & NUM00 ; \n\t\t\t\tsrp . ntptimestamplsw = $F247606 ( in ) & NUM00 ; \n\t\t\t\tsrp . rtptimestamp = $F247606 ( in ) & NUM00 ; \n\t\t\t\tsrp . packetcount = $F247606 ( in ) & NUM00 ; \n\t\t\t\tsrp . octetcount = $F247606 ( in ) & NUM00 ; \n\t\t\t\tsrp . reports = new RtcpReport [ firstbyte ] ; \n\t\t\t\tRtpSource sourceSR = rtcpSession . getMySource ( ) ; \n\t\t\t\tif ( sourceSR != null ) { \n\t\t\t\t\tsourceSR . receivedSenderReport ( srp ) ; \n\t\t\t\t\t} \n\t\t\t\tfor ( int i = NUM00 ; \n\t\t\t\ti < srp . reports . length ; \n\t\t\t\ti ++ ) { \n\t\t\t\t\tRtcpReport report = new RtcpReport $F72 ; \n\t\t\t\t\tsrp . reports [ i ] = report ; \n\t\t\t\t\treport . ssrc = in . readInt ( ) ; \n\t\t\t\t\tlong val = in . readInt ( ) ; \n\t\t\t\t\tval &= NUM00 ; \n\t\t\t\t\treport . fractionlost = $F13506 ( val ) ; \n\t\t\t\t\treport . packetslost = $F76474 ( val ) ; \n\t\t\t\t\treport . lastseq = $F247606 ( in ) & NUM00 ; \n\t\t\t\t\treport . jitter = in . readInt ( ) ; \n\t\t\t\t\treport . lsr = $F247606 ( in ) & NUM00 ; \n\t\t\t\t\treport . dlsr = $F247606 ( in ) & NUM00 ; \n\t\t\t\t\t} \n\t\t\t\tnotifyRtcpListeners ( new RtcpSenderReportEvent ( srp ) ) ; \n\t\t\t\t$F597 case RtcpPacket . RTCP_RR : if ( inlength != NUM00 + NUM00 * firstbyte ) { \n\t\t\t\t\tstats . numMalformedRtcpPkts ++ ; \n\t\t\t\t\t$F1274 } \n\t\t\t\tRtcpReceiverReportPacket rrp = new RtcpReceiverReportPacket ( compoundPacket ) ; \n\t\t\t\tsubpacket = rrp ; \n\t\t\t\trrp . ssrc = in . readInt ( ) ; \n\t\t\t\trrp . reports = new RtcpReport [ firstbyte ] ; \n\t\t\t\tfor ( int i = NUM00 ; \n\t\t\t\ti < rrp . reports . length ; \n\t\t\t\ti ++ ) { \n\t\t\t\t\tRtcpReport report = new RtcpReport $F72 ; \n\t\t\t\t\trrp . reports [ i ] = report ; \n\t\t\t\t\treport . ssrc = in . readInt ( ) ; \n\t\t\t\t\tlong val = in . readInt ( ) ; \n\t\t\t\t\tval &= NUM00 ; \n\t\t\t\t\treport . fractionlost = $F13506 ( val ) ; \n\t\t\t\t\treport . packetslost = $F76474 ( val ) ; \n\t\t\t\t\treport . lastseq = $F247606 ( in ) & NUM00 ; \n\t\t\t\t\treport . jitter = in . readInt ( ) ; \n\t\t\t\t\treport . lsr = $F247606 ( in ) & NUM00 ; \n\t\t\t\t\treport . dlsr = $F247606 ( in ) & NUM00 ; \n\t\t\t\t\t} \n\t\t\t\tnotifyRtcpListeners ( new RtcpReceiverReportEvent ( rrp ) ) ; \n\t\t\t\t$F597 case RtcpPacket . RTCP_SDES : RtcpSdesPacket sdesp = new RtcpSdesPacket ( compoundPacket ) ; \n\t\t\t\tsubpacket = sdesp ; \n\t\t\t\tsdesp . sdes = new RtcpSdesBlock [ firstbyte ] ; \n\t\t\t\tint sdesoff = NUM00 ; \n\t\t\t\tfor ( int i = NUM00 ; \n\t\t\t\ti < sdesp . sdes . length ; \n\t\t\t\ti ++ ) { \n\t\t\t\t\tRtcpSdesBlock chunk = new RtcpSdesBlock $F72 ; \n\t\t\t\t\tsdesp . sdes [ i ] = chunk ; \n\t\t\t\t\tchunk . ssrc = in . readInt ( ) ; \n\t\t\t\t\tsdesoff += NUM00 ; \n\t\t\t\t\tVector < RtcpSdesItem > items = new Vector < RtcpSdesItem > $F72 ; \n\t\t\t\t\tboolean gotcname = _BOOL ; \n\t\t\t\t\tint j ; \n\t\t\t\t\twhile ( ( j = in . readUnsignedByte ( ) ) != NUM00 ) { \n\t\t\t\t\t\tif $F19274 ( j ) { \n\t\t\t\t\t\t\tstats . numMalformedRtcpPkts ++ ; \n\t\t\t\t\t\t\t$F1274 } \n\t\t\t\t\t\t$F126526 ( j , gotcname , _BOOL ) RtcpSdesItem item = new RtcpSdesItem $F72 ; \n\t\t\t\t\t\titems . addElement ( item ) ; \n\t\t\t\t\t\titem . type = j ; \n\t\t\t\t\t\t$F34181 ( sdeslen , in ) item . data = new byte [ sdeslen ] ; \n\t\t\t\t\t\tin . readFully ( item . data ) ; \n\t\t\t\t\t\tsdesoff += NUM00 + sdeslen ; \n\t\t\t\t\t\t} \n\t\t\t\t\tif ( ! gotcname ) { \n\t\t\t\t\t\tstats . numMalformedRtcpPkts ++ ; \n\t\t\t\t\t\t$F1274 } \n\t\t\t\t\tchunk . items = new RtcpSdesItem $F2313 ( items ) ; \n\t\t\t\t\titems . copyInto ( chunk . items ) ; \n\t\t\t\t\tif $F69047 ( sdesoff ) { \n\t\t\t\t\t\tif ( in . skip ( NUM00 - ( sdesoff & NUM00 ) ) != NUM00 - ( sdesoff & NUM00 ) ) $F1337 sdesoff = sdesoff + NUM00 & - NUM00 ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\tif ( inlength != sdesoff ) { \n\t\t\t\t\tstats . numMalformedRtcpPkts ++ ; \n\t\t\t\t\t$F1274 } \n\t\t\t\tnotifyRtcpListeners ( new RtcpSdesEvent ( sdesp ) ) ; \n\t\t\t\t$F597 case RtcpPacket . RTCP_BYE : RtcpByePacket byep = new RtcpByePacket ( compoundPacket ) ; \n\t\t\t\tsubpacket = byep ; \n\t\t\t\tbyep . ssrc = new int [ firstbyte ] ; \n\t\t\t\tfor ( int i = NUM00 ; \n\t\t\t\ti < byep . ssrc . length ; \n\t\t\t\ti ++ ) { \n\t\t\t\t\tbyep . ssrc [ i ] = in . readInt ( ) ; \n\t\t\t\t\t} \n\t\t\t\tint reasonlen ; \n\t\t\t\tif ( inlength > NUM00 + NUM00 * firstbyte ) { \n\t\t\t\t\t$F269619 ( reasonlen , in ) byep . reason = new byte [ reasonlen ] ; \n\t\t\t\t\treasonlen ++ ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\treasonlen = NUM00 ; \n\t\t\t\t\tbyep . reason = $F10314 ; \n\t\t\t\t\t} \n\t\t\t\treasonlen = reasonlen + NUM00 & - NUM00 ; \n\t\t\t\tif ( inlength != NUM00 + NUM00 * firstbyte + reasonlen ) { \n\t\t\t\t\tstats . numMalformedRtcpPkts ++ ; \n\t\t\t\t\t$F1274 } \n\t\t\t\tin . readFully ( byep . reason ) ; \n\t\t\t\tint skipBye = reasonlen - byep . reason . length ; \n\t\t\t\tif ( in . skip ( skipBye ) != skipBye ) $F1337 notifyRtcpListeners ( new RtcpByeEvent ( byep ) ) ; \n\t\t\t\t$F597 case RtcpPacket . RTCP_APP : $F6664 ( inlength ) RtcpAppPacket appp = new RtcpAppPacket ( compoundPacket ) ; \n\t\t\t\tsubpacket = appp ; \n\t\t\t\tappp . ssrc = in . readInt ( ) ; \n\t\t\t\tappp . name = in . readInt ( ) ; \n\t\t\t\tappp . subtype = firstbyte ; \n\t\t\t\tappp . data = new byte [ inlength - NUM00 ] ; \n\t\t\t\tin . readFully ( appp . data ) ; \n\t\t\t\tint skipApp = inlength - NUM00 - appp . data . length ; \n\t\t\t\tif ( in . skip ( skipApp ) != skipApp ) $F1337 notifyRtcpListeners ( new RtcpApplicationEvent ( appp ) ) ; \n\t\t\t\t$F597 $F1267 stats . numUnknownTypes ++ ; \n\t\t\t\t$F1274 } \n\t\t\tsubpacket . offset = offset ; \n\t\t\tsubpacket . length = length ; \n\t\t\tsubpackets . addElement ( subpacket ) ; \n\t\t\tif ( in . skipBytes ( padlen ) != padlen ) $F1337 } \n\t\t} \n\t$F34300 compoundPacket . packets = new RtcpPacket $F2313 ( subpackets ) ; \n\tsubpackets . copyInto ( compoundPacket . packets ) ; \n\treturn compoundPacket ; \n\t} \n"}, {"code": "public void reset $F72 $F5795 ( initialize ) "}, {"code": "private static void addListenersForReal ( final Service service , final Set < Listener > existingListeners , final Listener listener , final Executor executor ) { \n\tif $F2200 ( existingListeners , listener ) { \n\t\texistingListeners . add ( listener ) ; \n\t\tservice . addListener ( listener , executor ) ; \n\t\t} \n\t} \n"}, {"code": "public void prepend ( CharSequence s ) { \n\t$F34005 ( text , s ) } \n"}, {"code": "public static void sendResponseWithStatus ( HttpServletRequest request , HttpServletResponse response , PrintWriter out , String idpMetaAlias , String idpEntityID , String realm , AuthnRequest authnReq , String relayState , String spEntityID , String firstlevelStatusCodeValue , String secondlevelStatusCodeValue ) throws SAML2Exception { \n\tResponse res = SAML2Utils . getErrorResponse ( authnReq , firstlevelStatusCodeValue , secondlevelStatusCodeValue , null , idpEntityID ) ; \n\t$F280 ( returnedBinding ) String acsURL = IDPSSOUtil . getACSurl ( spEntityID , realm , authnReq , request , returnedBinding ) ; \n\t$F1822 ( acsBinding , returnedBinding ) sendResponse ( request , response , out , acsBinding , spEntityID , idpEntityID , idpMetaAlias , realm , relayState , acsURL , res , null ) ; \n\t} \n"}, {"code": "protected void validateDTDattribute ( QName element , String attValue , XMLAttributeDecl attributeDecl ) throws XNIException { \n\tswitch ( attributeDecl . simpleType . type ) { \n\t\tcase XMLSimpleType . TYPE_ENTITY : { \n\t\t\tboolean isAlistAttribute = attributeDecl . simpleType . list ; \n\t\t\ttry { \n\t\t\t\tif ( isAlistAttribute ) { \n\t\t\t\t\tfValENTITIES . validate ( attValue , fValidationState ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tfValENTITY . validate ( attValue , fValidationState ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tcatch ( InvalidDatatypeValueException ex ) { \n\t\t\t\tfErrorReporter . reportError ( XMLMessageFormatter . XML_DOMAIN , ex . getKey ( ) , ex . getArgs ( ) , XMLErrorReporter . SEVERITY_ERROR ) ; \n\t\t\t\t} \n\t\t\t$F597 } \n\t\tcase XMLSimpleType . TYPE_NOTATION : case XMLSimpleType . TYPE_ENUMERATION : { \n\t\t\tboolean found = _BOOL ; \n\t\t\t$F806 enumVals = attributeDecl . simpleType . enumeration ; \n\t\t\tif ( enumVals == null ) { \n\t\t\t\tfound = _BOOL ; \n\t\t\t\t} \n\t\t\telse for ( $F1139 ( i , enumVals ) ) { \n\t\t\t\tif ( attValue == enumVals [ i ] || attValue . equals ( enumVals [ i ] ) ) $F3468 ( found , _BOOL ) } \n\t\t\tif ( ! found ) { \n\t\t\t\t$F280 ( enumValueString ) if ( enumVals != null ) for ( $F1139 ( i , enumVals ) ) { \n\t\t\t\t\tenumValueString . append ( enumVals [ i ] + NUM00 ) ; \n\t\t\t\t\t} \n\t\t\t\tfErrorReporter . reportError ( XMLMessageFormatter . XML_DOMAIN , NUM00 , new Object [ ] { \n\t\t\t\t\tattributeDecl . name . rawname , attValue , enumValueString } \n\t\t\t\t, XMLErrorReporter . SEVERITY_ERROR ) ; \n\t\t\t\t} \n\t\t\t$F597 } \n\t\tcase XMLSimpleType . TYPE_ID : { \n\t\t\ttry { \n\t\t\t\tfValID . validate ( attValue , fValidationState ) ; \n\t\t\t\t} \n\t\t\tcatch ( InvalidDatatypeValueException ex ) { \n\t\t\t\tfErrorReporter . reportError ( XMLMessageFormatter . XML_DOMAIN , ex . getKey ( ) , ex . getArgs ( ) , XMLErrorReporter . SEVERITY_ERROR ) ; \n\t\t\t\t} \n\t\t\t$F597 } \n\t\tcase XMLSimpleType . TYPE_IDREF : { \n\t\t\tboolean isAlistAttribute = attributeDecl . simpleType . list ; \n\t\t\ttry { \n\t\t\t\tif ( isAlistAttribute ) { \n\t\t\t\t\tfValIDRefs . validate ( attValue , fValidationState ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tfValIDRef . validate ( attValue , fValidationState ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tcatch ( InvalidDatatypeValueException ex ) { \n\t\t\t\tif ( isAlistAttribute ) { \n\t\t\t\t\tfErrorReporter . reportError ( XMLMessageFormatter . XML_DOMAIN , NUM00 , $F8844 ( attValue ) , XMLErrorReporter . SEVERITY_ERROR ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tfErrorReporter . reportError ( XMLMessageFormatter . XML_DOMAIN , ex . getKey ( ) , ex . getArgs ( ) , XMLErrorReporter . SEVERITY_ERROR ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F597 } \n\t\tcase XMLSimpleType . TYPE_NMTOKEN : { \n\t\t\tboolean isAlistAttribute = attributeDecl . simpleType . list ; \n\t\t\ttry { \n\t\t\t\tif ( isAlistAttribute ) { \n\t\t\t\t\tfValNMTOKENS . validate ( attValue , fValidationState ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tfValNMTOKEN . validate ( attValue , fValidationState ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tcatch ( InvalidDatatypeValueException ex ) { \n\t\t\t\tif ( isAlistAttribute ) { \n\t\t\t\t\tfErrorReporter . reportError ( XMLMessageFormatter . XML_DOMAIN , NUM00 , $F8844 ( attValue ) , XMLErrorReporter . SEVERITY_ERROR ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tfErrorReporter . reportError ( XMLMessageFormatter . XML_DOMAIN , NUM00 , $F8844 ( attValue ) , XMLErrorReporter . SEVERITY_ERROR ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F597 } \n\t\t} \n\t} \n"}, {"code": "public static double mean2 ( Connection conn , double ... values ) { \n\tconn . getClass ( ) ; \n\tdouble sum = NUM00 ; \n\tfor ( double x : values ) { \n\t\tsum += x ; \n\t\t} \n\treturn sum / values . length ; \n\t} \n"}, {"code": "public boolean hasLongColumnInfo $F72 { \n\treturn this . hasLongColumnInfo ; \n\t} \n"}, {"code": "public static String domToString ( Document domDoc ) { \n\treturn domToString ( domDoc . getDocumentElement ( ) , _BOOL ) ; \n\t} \n"}, {"code": "public static $F4203 T assertAndCast ( $F10050 clazz , Object o ) { \n\tassertNotNull ( clazz ) ; \n\tassertNotNull ( o ) ; \n\tassertTrue ( clazz . isInstance ( o ) ) ; \n\t$F123138 ( clazz , o ) } \n"}, {"code": "private String createMismatchMessage ( String mismatch , MigrationVersion version , Object applied , Object resolved ) { \n\treturn String . format ( NUM00 + mismatch + NUM00 + NUM00 + NUM00 , version , applied , resolved ) ; \n\t} \n"}, {"code": "$F37100 ( fieldId , IDS ) "}, {"code": "public int compareTo ( Object o ) { \n\tSplit split = ( Split ) o ; \n\tBitSet P = getFirstPart ( ) ; \n\tBitSet Q = split . getFirstPart ( ) ; \n\t$F304395 ( a , P ) ; \n\t$F304395 ( b , Q ) ; \n\twhile ( a > - NUM00 && b > - NUM00 ) { \n\t\tif ( a < b ) $F150 else if ( a > b ) $F1082 $F304396 ( a , P ) ; \n\t\t$F304396 ( b , Q ) ; \n\t\t} \n\tif ( a < b ) $F150 else if ( a > b ) $F1082 P = getSecondPart ( ) ; \n\tQ = split . getSecondPart ( ) ; \n\ta = P . nextSetBit ( NUM00 ) ; \n\tb = Q . nextSetBit ( NUM00 ) ; \n\twhile ( a > - NUM00 && b > - NUM00 ) { \n\t\tif ( a < b ) $F150 else if ( a > b ) $F1082 $F304396 ( a , P ) ; \n\t\t$F304396 ( b , Q ) ; \n\t\t} \n\tif ( a < b ) $F150 else if ( a > b ) $F1082 else $F1082 } \n"}, {"code": "public boolean isMatchingTalkgroup ( LTRNetMessage message ) { \n\tString talkgroup = message . getTalkgroupID ( ) ; \n\tif ( talkgroup != null && getToID ( ) != null && talkgroup . contentEquals ( getToID ( ) ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\treturn isMatchingTalkgroup ( message . getTalkgroupID ( ) ) ; \n\t} \n"}, {"code": "public void put $F24576 ( source , index , length ) { \n\tif ( mBuffer . capacity ( ) < ( mLength + length ) ) { \n\t\texpandBuffer ( mLength + length + ADDITIONAL_BUFFER_SIZE ) ; \n\t\t} \n\tmBuffer . put ( source , index , length ) ; \n\tmLength += length ; \n\t} \n"}, {"code": "public void testSetBitNegativeInside4 $F72 { \n\tString as = NUM00 ; \n\tint number = NUM00 ; \n\t$F9144 ( aNumber , as ) $F43462 ( result , aNumber , number ) $F10665 ( assertEquals , as , result ) } \n"}, {"code": "public Shape modelToView ( int pos , Shape a , $F48960 b ) throws BadLocationException { \n\treturn m_view . modelToView ( pos , a , b ) ; \n\t} \n"}, {"code": "private static int applyPrecision ( int decExp , $F1469 digits , int nDigits , int prec ) { \n\tif ( prec >= nDigits || prec < NUM00 ) { \n\t\treturn decExp ; \n\t\t} \n\tif ( prec == NUM00 ) { \n\t\tif ( digits [ NUM00 ] >= NUM00 ) { \n\t\t\tdigits [ NUM00 ] = NUM00 ; \n\t\t\tArrays . fill ( digits , NUM00 , nDigits , NUM00 ) ; \n\t\t\treturn decExp + NUM00 ; \n\t\t\t} \n\t\telse { \n\t\t\tArrays . fill ( digits , NUM00 , nDigits , NUM00 ) ; \n\t\t\treturn decExp ; \n\t\t\t} \n\t\t} \n\tint q = digits [ prec ] ; \n\tif ( q >= NUM00 ) { \n\t\tint i = prec ; \n\t\tq = digits [ -- i ] ; \n\t\tif ( q == NUM00 ) { \n\t\t\twhile ( q == NUM00 && i > NUM00 ) { \n\t\t\t\tq = digits [ -- i ] ; \n\t\t\t\t} \n\t\t\tif ( q == NUM00 ) { \n\t\t\t\tdigits [ NUM00 ] = NUM00 ; \n\t\t\t\tArrays . fill ( digits , NUM00 , nDigits , NUM00 ) ; \n\t\t\t\treturn decExp + NUM00 ; \n\t\t\t\t} \n\t\t\t} \n\t\tdigits [ i ] = $F46343 ( q ) ; \n\t\tArrays . fill ( digits , i + NUM00 , nDigits , NUM00 ) ; \n\t\t} \n\telse { \n\t\tArrays . fill ( digits , prec , nDigits , NUM00 ) ; \n\t\t} \n\treturn decExp ; \n\t} \n"}, {"code": "protected void drawCubic ( Canvas c , LineDataSet dataSet , $F14699 entries ) { \n\tTransformer trans = mChart . getTransformer ( dataSet . getAxisDependency ( ) ) ; \n\tEntry entryFrom = dataSet . getEntryForXIndex ( mMinX ) ; \n\tEntry entryTo = dataSet . getEntryForXIndex ( mMaxX ) ; \n\tint diff = ( entryFrom == entryTo ) ? NUM00 : NUM00 ; \n\tint minx = Math . max ( dataSet . getEntryPosition ( entryFrom ) - diff , NUM00 ) ; \n\tint maxx = Math . min ( Math . max ( minx + NUM00 , dataSet . getEntryPosition ( entryTo ) + NUM00 ) , entries . size ( ) ) ; \n\tfloat phaseX = mAnimator . getPhaseX ( ) ; \n\tfloat phaseY = mAnimator . getPhaseY ( ) ; \n\tfloat intensity = dataSet . getCubicIntensity ( ) ; \n\t$F2268 ( cubicPath ) int size = ( int ) Math . ceil ( ( maxx - minx ) * phaseX + minx ) ; \n\tif ( size - minx >= NUM00 ) { \n\t\tfloat prevDx = NUM00 ; \n\t\tfloat prevDy = NUM00 ; \n\t\tfloat curDx = NUM00 ; \n\t\tfloat curDy = NUM00 ; \n\t\t$F14726 ( prevPrev , entries , minx ) $F14726 ( prev , entries , minx ) $F14726 ( cur , entries , minx ) Entry next = entries . get ( minx + NUM00 ) ; \n\t\tcubicPath . moveTo ( cur . getXIndex ( ) , cur . getVal ( ) * phaseY ) ; \n\t\t$F14736 ( prevDx , cur , prev , intensity ) $F14741 ( prevDy , cur , prev , intensity ) $F14736 ( curDx , next , cur , intensity ) $F14741 ( curDy , next , cur , intensity ) $F14748 ( cubicPath , prev , prevDx , prevDy , phaseY , cur , curDx , curDy ) for ( int j = minx + NUM00 , count = Math . min ( size , $F2281 ( entries ) ) ; \n\t\tj < count ; \n\t\tj ++ ) { \n\t\t\tprevPrev = entries . get ( j == NUM00 ? NUM00 : j - NUM00 ) ; \n\t\t\t$F14758 ( prev , entries , j ) cur = entries . get ( j ) ; \n\t\t\t$F14759 ( next , entries , j ) $F14736 ( prevDx , cur , prevPrev , intensity ) $F14741 ( prevDy , cur , prevPrev , intensity ) $F14736 ( curDx , next , prev , intensity ) $F14741 ( curDy , next , prev , intensity ) $F14748 ( cubicPath , prev , prevDx , prevDy , phaseY , cur , curDx , curDy ) } \n\t\tif ( size > $F2281 ( entries ) ) { \n\t\t\tprevPrev = entries . get ( $F14765 ( entries ) ? $F2281 ( entries ) : $F2281 ( entries ) ) ; \n\t\t\t$F14770 ( prev , entries ) $F14770 ( cur , entries ) next = cur ; \n\t\t\t$F14736 ( prevDx , cur , prevPrev , intensity ) $F14741 ( prevDy , cur , prevPrev , intensity ) $F14736 ( curDx , next , prev , intensity ) $F14741 ( curDy , next , prev , intensity ) $F14748 ( cubicPath , prev , prevDx , prevDy , phaseY , cur , curDx , curDy ) } \n\t\t} \n\tif ( dataSet . isDrawFilledEnabled ( ) ) { \n\t\t$F2268 ( cubicFillPath ) cubicFillPath . addPath ( cubicPath ) ; \n\t\tdrawCubicFill ( mBitmapCanvas , dataSet , cubicFillPath , trans , entryFrom . getXIndex ( ) , entryFrom . getXIndex ( ) + size ) ; \n\t\t} \n\t$F14782 ( mRenderPaint , dataSet ) mRenderPaint . setStyle ( Paint . Style . STROKE ) ; \n\ttrans . pathValueToPixel ( cubicPath ) ; \n\tmBitmapCanvas . drawPath ( cubicPath , mRenderPaint ) ; \n\tmRenderPaint . setPathEffect ( null ) ; \n\t} \n"}, {"code": "public void delete ( $F4170 Key key ) { \n\tfinal ReentrantReadWriteLock . WriteLock lock = guard . writeLock ( ) ; \n\t$F790 ( lock ) try { \n\t\tif $F40971 ( readKeys , key ) $F824 Files . delete ( key . getFile ( ) ) ; \n\t\t} \n\tcatch ( IOException ex ) { \n\t\tLOG . log ( Level . WARNING , NUM00 + key . getFile ( ) , ex ) ; \n\t\t} \n\t$F796 ( lock ) } \n"}, {"code": "$F410840 ( value ) "}, {"code": "public boolean onTouchEvent ( MotionEvent event ) { \n\ttry { \n\t\tint pointerCount = multiTouchSupported ? ( Integer ) m_getPointerCount . invoke ( event ) : NUM00 ; \n\t\tif ( DEBUG ) Log . i ( NUM00 , NUM00 + multiTouchSupported + NUM00 + mMode + NUM00 + handleSingleTouchEvents + NUM00 + pointerCount ) ; \n\t\tif ( mMode == MODE_NOTHING && ! handleSingleTouchEvents && pointerCount == NUM00 ) return _BOOL ; \n\t\tif ( DEBUG ) $F16229 ( Log ) int action = event . getAction ( ) ; \n\t\tint histLen = event . getHistorySize ( ) / pointerCount ; \n\t\tfor ( $F9993 ( histIdx , histLen ) ) { \n\t\t\tboolean processingHist = histIdx < histLen ; \n\t\t\tif ( ! multiTouchSupported || pointerCount == NUM00 ) { \n\t\t\t\tif ( DEBUG ) $F16229 ( Log ) xVals [ NUM00 ] = processingHist ? event . getHistoricalX ( histIdx ) : event . getX ( ) ; \n\t\t\t\tyVals [ NUM00 ] = processingHist ? event . getHistoricalY ( histIdx ) : event . getY ( ) ; \n\t\t\t\tpressureVals [ NUM00 ] = processingHist ? event . getHistoricalPressure ( histIdx ) : event . getPressure ( ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tif ( DEBUG ) $F16229 ( Log ) $F17565 ( numPointers , Math , pointerCount , MAX_TOUCH_POINTS ) if ( DEBUG && pointerCount > MAX_TOUCH_POINTS ) $F16229 ( Log ) for ( $F119 ( ptrIdx , numPointers ) ) { \n\t\t\t\t\tint ptrId = ( Integer ) m_getPointerId . invoke ( event , ptrIdx ) ; \n\t\t\t\t\tpointerIds [ ptrIdx ] = ptrId ; \n\t\t\t\t\txVals [ ptrIdx ] = ( Float ) ( processingHist ? m_getHistoricalX . invoke ( event , ptrIdx , histIdx ) : m_getX . invoke ( event , ptrIdx ) ) ; \n\t\t\t\t\tyVals [ ptrIdx ] = ( Float ) ( processingHist ? m_getHistoricalY . invoke ( event , ptrIdx , histIdx ) : m_getY . invoke ( event , ptrIdx ) ) ; \n\t\t\t\t\tpressureVals [ ptrIdx ] = ( Float ) ( processingHist ? m_getHistoricalPressure . invoke ( event , ptrIdx , histIdx ) : m_getPressure . invoke ( event , ptrIdx ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tdecodeTouchEvent ( pointerCount , xVals , yVals , pressureVals , pointerIds , processingHist ? MotionEvent . ACTION_MOVE : action , processingHist ? _BOOL : action != MotionEvent . ACTION_UP && ( action & ( $F76927 ( ACTION_POINTER_INDEX_SHIFT ) ) ) != ACTION_POINTER_UP && action != MotionEvent . ACTION_CANCEL , processingHist ? event . getHistoricalEventTime ( histIdx ) : event . getEventTime ( ) ) ; \n\t\t\t} \n\t\treturn _BOOL ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tLog . e ( NUM00 , NUM00 , e ) ; \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public static void storeLocation ( Context context , LatLng location ) { \n\t$F111887 ( prefs , PreferenceManager , context ) $F37526 ( editor , prefs ) editor . putLong ( PREFERENCES_LAT , Double . doubleToRawLongBits ( location . latitude ) ) ; \n\teditor . putLong ( PREFERENCES_LNG , Double . doubleToRawLongBits ( location . longitude ) ) ; \n\t$F37527 ( editor ) } \n"}, {"code": "public void writeToFile ( String fileName ) throws IOException { \n\tPrintWriter outfile = new PrintWriter $F4443 ( fileName ) ; \n\t$F8438 ( outfile ) $F8438 ( outfile ) $F7957 ( outfile , m_nbins ) $F7957 ( outfile , m_min ) $F7957 ( outfile , m_max ) $F7957 ( outfile , m_entries ) $F7957 ( outfile , m_underflow ) $F7957 ( outfile , m_overflow ) $F8438 ( outfile ) for ( $F119 ( i , m_nbins ) ) { \n\t\toutfile . println ( i + NUM00 + m_binCenters [ i ] + NUM00 + m_hist [ i ] ) ; \n\t\t} \n\t$F8438 ( outfile ) $F59 ( outfile ) } \n"}, {"code": "public void outdent $F72 { \n\t$F11550 ( length , indent ) $F256058 ( length ) indent . delete ( length - NUM00 , length ) ; \n\t} \n"}, {"code": "public static String extractFromDataMatrix ( String code ) { \n\tif $F3599 ( code ) $F1337 if $F3106 ( code ) { \n\t\treturn $F606 ( code ) ; \n\t\t} \n\t$F1274 } \n"}, {"code": "public void paintCurrentValue ( Graphics g , Rectangle bounds , boolean hasFocus ) { \n\tXPStyle xp = XPStyle . getXP ( ) ; \n\tif ( xp != null ) { \n\t\tbounds . x += NUM00 ; \n\t\tbounds . y += NUM00 ; \n\t\tbounds . width -= NUM00 ; \n\t\tbounds . height -= NUM00 ; \n\t\t} \n\telse { \n\t\tbounds . x += NUM00 ; \n\t\tbounds . y += NUM00 ; \n\t\tbounds . width -= NUM00 ; \n\t\tbounds . height -= NUM00 ; \n\t\t} \n\tif ( ! comboBox . isEditable ( ) && xp != null && xp . isSkinDefined ( comboBox , Part . CP_READONLY ) ) { \n\t\tListCellRenderer renderer = comboBox . getRenderer ( ) ; \n\t\tComponent c ; \n\t\tif ( hasFocus && ! isPopupVisible ( comboBox ) ) { \n\t\t\tc = renderer . getListCellRendererComponent ( listBox , comboBox . getSelectedItem ( ) , - NUM00 , _BOOL , _BOOL ) ; \n\t\t\t} \n\t\telse { \n\t\t\tc = renderer . getListCellRendererComponent ( listBox , comboBox . getSelectedItem ( ) , - NUM00 , _BOOL , _BOOL ) ; \n\t\t\t} \n\t\t$F252172 ( c , comboBox ) if $F34496 ( comboBox ) { \n\t\t\tc . setForeground ( comboBox . getForeground ( ) ) ; \n\t\t\tc . setBackground ( comboBox . getBackground ( ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tc . setForeground ( DefaultLookup . getColor ( comboBox , this , NUM00 , null ) ) ; \n\t\t\tc . setBackground ( DefaultLookup . getColor ( comboBox , this , NUM00 , null ) ) ; \n\t\t\t} \n\t\tboolean shouldValidate = _BOOL ; \n\t\tif ( c instanceof JPanel ) { \n\t\t\tshouldValidate = _BOOL ; \n\t\t\t} \n\t\tcurrentValuePane . paintComponent ( g , c , comboBox , bounds . x , bounds . y , bounds . width , bounds . height , shouldValidate ) ; \n\t\t} \n\telse { \n\t\tsuper . paintCurrentValue ( g , bounds , hasFocus ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public AudioInputStream synthesiseOneSection ( String festivalUtt , Voice voice ) throws IOException { \n\twriteRelationFiles ( festivalUtt ) ; \n\tFile audioFile = new File ( festivalDir . getPath ( ) + File . separator + NUM00 ) ; \n\tString festivalVoiceCmd = $F2990 ( voice ) ; \n\tAudioInputStream sound = festivalSynthesise ( audioFile , festivalVoiceCmd ) ; \n\treturn sound ; \n\t} \n"}, {"code": "JSONStringer close ( Scope empty , Scope nonempty , String closeBracket ) throws JSONException { \n\tScope context = peek ( ) ; \n\tif ( context != nonempty && context != empty ) $F19954 $F30606 ( stack ) $F83461 ( context , nonempty , newline ) out . append ( closeBracket ) ; \n\treturn this ; \n\t} \n"}, {"code": "public int read $F24576 ( buffer , offset , length ) throws IOException { \n\tlog . finest ( NUM00 + $F26213 ( Long , getFilePointer ) + NUM00 + length + NUM00 ) ; \n\treturn _file . read ( buffer , offset , length ) ; \n\t} \n"}, {"code": "public static Pattern createPattern ( $F806 patterns , boolean isCaseSensitive , boolean isRegexSearch ) throws PatternSyntaxException { \n\t$F280 ( pattern ) for ( $F1139 ( i , patterns ) ) { \n\t\t$F34674 ( i , pattern ) if ( isRegexSearch ) $F40727 ( pattern , patterns , i ) else $F218373 ( asRegEx , patterns , i , pattern ) } \n\treturn createPattern ( pattern . toString ( ) , isCaseSensitive , _BOOL ) ; \n\t} \n"}, {"code": "public void addArc ( float latPoint , float lonPoint , int w , int h , float s , float e , LinkProperties properties ) throws IOException { \n\tLinkArc . write ( latPoint , lonPoint , NUM00 , NUM00 , w , h , s , e , properties , link . dos ) ; \n\t} \n"}, {"code": "public void onUndeploy ( ClassLoader ldr ) { \n\tfor ( $F6969 cls : descByCls . keySet ( ) ) { \n\t\tif ( ldr . equals ( cls . getClassLoader ( ) ) ) descByCls . remove ( cls ) ; \n\t\t} \n\tU . clearClassCache ( ldr ) ; \n\t} \n"}, {"code": "$F1 public boolean containsClass ( String className ) throws IOException { \n\tboolean containsClass = _BOOL ; \n\tString resourceName = $F139654 ( className ) ; \n\tif ( getResource ( resourceName ) != null ) { \n\t\tcontainsClass = _BOOL ; \n\t\t} \n\tfor ( String resource : getResources ( NUM00 ) ) { \n\t\tJarArchive jar = new DefaultJarArchive ( getResource ( resource ) ) ; \n\t\tif ( jar . containsClass ( className ) ) { \n\t\t\tcontainsClass = _BOOL ; \n\t\t\t} \n\t\t} \n\treturn containsClass ; \n\t} \n"}, {"code": "public $F416167 clearInternal $F72 { \n\t$F416167 t = new Tuple [ getTupleCount ( ) ] ; \n\tIterator iter = tuples ( ) ; \n\tfor ( int i = NUM00 ; \n\titer . hasNext ( ) ; \n\t++ i ) { \n\t\tt [ i ] = ( Tuple ) iter . next ( ) ; \n\t\t} \n\t$F725 ( m_tuples ) return t ; \n\t} \n"}, {"code": "public synchronized void removeTextListener ( TextListener cl ) $F106 ( m_textListeners , cl ) "}, {"code": "private void ensureCapacity ( int desiredLongCount ) { \n\tif ( desiredLongCount <= bits . length ) $F932 int newLength = Math . max ( desiredLongCount , bits . length * NUM00 ) ; \n\t$F12300 ( newBits , newLength ) $F135 ( System , bits , newBits , longCount ) this . bits = newBits ; \n\t} \n"}, {"code": "public boolean matches ( String query , String text ) $F298 ( text , query ) "}, {"code": "private void findCollapsesFromExistingVertices ( List collapsedVertexIndexes ) { \n\tfor ( $F2665 ( i , edge ) ) { \n\t\tCoordinate p0 = edge . getCoordinate ( i ) ; \n\t\tCoordinate p1 = edge . getCoordinate ( i + NUM00 ) ; \n\t\tCoordinate p2 = edge . getCoordinate ( i + NUM00 ) ; \n\t\tif ( p0 . equals2D ( p2 ) ) { \n\t\t\tcollapsedVertexIndexes . add ( new Integer ( i + NUM00 ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void close $F72 throws IOException { \n\t$F254545 ( Debug ) try $F1823 ( inputFile ) $F1516 ( e ) inputFile = null ; \n\t} \n"}, {"code": "public static boolean checkPoolPropertiesChanged ( $F2689 existingValue , $F2689 newValue ) { \n\tboolean propertyChanged = _BOOL ; \n\tif ( existingValue == null && $F1032 ( newValue ) ) { \n\t\tpropertyChanged = _BOOL ; \n\t\t} \n\telse if ( newValue == null && $F1032 ( existingValue ) ) { \n\t\tpropertyChanged = _BOOL ; \n\t\t} \n\telse if ( existingValue != null && newValue != null ) { \n\t\tif ( $F15255 ( existingValue , newValue ) || ! ( existingValue . containsAll ( newValue ) ) ) { \n\t\t\tpropertyChanged = _BOOL ; \n\t\t\t} \n\t\t} \n\treturn propertyChanged ; \n\t} \n"}, {"code": "public static OutputStream leftShift ( OutputStream self , InputStream in ) throws IOException { \n\t$F12496 ( buf ) while ( _BOOL ) { \n\t\tint $F18803 ( count , in , buf ) ; \n\t\t$F167039 ( count ) if ( count == NUM00 ) { \n\t\t\t$F5756 ( Thread ) $F598 } \n\t\t$F11584 ( self , buf , count ) } \n\t$F1206 ( self ) return self ; \n\t} \n"}, {"code": "public static boolean gitLocalConfig ( final AtomicReference $F4 path ) throws IOException { \n\treturn gitLocalConfig ( Environment . getCurrentDirectory ( ) , path ) ; \n\t} \n"}, {"code": "public void verify $F72 { \n\tsuper . verify ( ) ; \n\tassertEquals ( NUM00 , confirmed , collection ) ; \n\tassertEquals ( NUM00 , confirmed . hashCode ( ) , collection . hashCode ( ) ) ; \n\tCollection set = makeConfirmedCollection ( ) ; \n\t$F19402 ( iterator , collection ) while $F2921 ( iterator ) { \n\t\tassertTrue ( NUM00 , set . add ( iterator . next ( ) ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static CGPoint ccpRotateByAngle ( CGPoint v , CGPoint pivot , float angle ) { \n\tCGPoint r = ccpSub ( v , pivot ) ; \n\tfloat t = r . x ; \n\tfloat cosa = $F148722 ( Math , angle ) ; \n\tfloat sina = $F148723 ( Math , angle ) ; \n\tr . x = t * cosa - r . y * sina ; \n\tr . y = t * sina + r . y * cosa ; \n\tr = ccpAdd ( r , pivot ) ; \n\treturn r ; \n\t} \n"}, {"code": "private void openContextMenu ( MouseEvent e ) { \n\tif $F264788 ( e ) { \n\t\t$F6877 $F9626 ( streams ) ; \n\t\t$F2027 selectedRows = table . getSelectedRows ( ) ; \n\t\tfor ( int selectedRow : selectedRows ) { \n\t\t\tFollower selected = followers . get ( selectedRow ) ; \n\t\t\tstreams . add ( StringUtil . toLowerCase ( selected . name ) ) ; \n\t\t\t} \n\t\tif $F5973 ( streams ) { \n\t\t\tStreamsContextMenu m = new StreamsContextMenu ( streams , contextMenuListener ) ; \n\t\t\t$F255135 ( m , table , e ) } \n\t\t} \n\t} \n"}, {"code": "public static $F28319 expandVolumesMethod ( URI storage , URI pool , URI volume , Long size ) { \n\treturn new $F28319 ( NUM00 , storage , pool , volume , size ) ; \n\t} \n"}, {"code": "void closeSilently ( Socket socket ) $F87767 ( socket ) "}, {"code": "public static boolean equals $F7233 ( array1 , array2 ) { \n\tif ( array1 == array2 ) return _BOOL ; \n\tif ( array1 == null || array2 == null || array1 . length != array2 . length ) return _BOOL ; \n\tfor ( $F1139 ( i , array1 ) ) { \n\t\t$F35941 ( array1 , i , array2 , _BOOL ) } \n\treturn _BOOL ; \n\t} \n"}, {"code": "private static String createIdFromJndiLocationIfNotNull ( String jndiLocation ) { \n\tString id = null ; \n\tif ( jndiLocation != null ) { \n\t\tid = createIdFromJndiLocation ( jndiLocation ) ; \n\t\t} \n\treturn id ; \n\t} \n"}, {"code": "protected $F6870 closure ( DependencyKind ... depKinds ) { \n\tboolean progress = _BOOL ; \n\t$F6870 closure = new $F6871 $F72 ; \n\tclosure . add ( this ) ; \n\twhile ( progress ) { \n\t\tprogress = _BOOL ; \n\t\tfor ( Node n1 : new $F6871 ( closure ) ) { \n\t\t\tprogress = closure . addAll ( n1 . getDependencies ( depKinds ) ) ; \n\t\t\t} \n\t\t} \n\treturn closure ; \n\t} \n"}, {"code": "public Vector ( Collection c ) { \n\t$F8935 ( elementCount , c ) elementData = new Object [ ( int ) Math . min ( ( elementCount * NUM00 ) / NUM00 , Integer . MAX_VALUE ) ] ; \n\tc . toArray ( elementData ) ; \n\t} \n"}, {"code": "$F25545 ( i , count , buf , newbuf , mPool , System ) "}, {"code": "public static $F67888 A createAnnotation ( $F26426 ( annotationType ) , AnnotationMember [ ] elements ) { \n\tAnnotationFactory factory = new AnnotationFactory ( annotationType , elements ) ; \n\treturn ( A ) Proxy . newProxyInstance ( annotationType . getClassLoader ( ) , $F139647 ( annotationType ) , factory ) ; \n\t} \n"}, {"code": "public LinkingMorphemes ( String ... aMorphemes ) { \n\t$F30598 ( morphemes ) $F42002 ( string , aMorphemes , morphemes ) } \n"}, {"code": "$F1 public void execute ( MetricTimeSeries timeSeries , FunctionValueMap functionValueMap ) { \n\tif $F119130 ( timeSeries ) { \n\t\tfunctionValueMap . add ( this , Double . NaN ) ; \n\t\t$F665 } \n\t$F112999 ( timeSeries ) double firstValue = timeSeries . getValue ( NUM00 ) ; \n\tdouble lastValue = timeSeries . getValue ( $F2281 ( timeSeries ) ) ; \n\tfunctionValueMap . add ( this , Math . abs ( firstValue - lastValue ) ) ; \n\t} \n"}, {"code": "public static $F52326 findResourceBases ( String baseResource , ClassLoader loader ) { \n\t$F188804 list = new $F188804 $F72 ; \n\ttry { \n\t\t$F104855 urls = loader . getResources ( baseResource ) ; \n\t\twhile $F1444 ( urls ) { \n\t\t\tURL url = urls . nextElement ( ) ; \n\t\t\t$F12366 ( list , findResourceBase , url , baseResource ) } \n\t\t} \n\t$F12153 ( e ) return list . toArray ( new URL $F2313 ( list ) ) ; \n\t} \n"}, {"code": "public WritableRaster createWritableChild ( int x , int y , int width , int height , int x0 , int y0 , int bandList [ ] ) { \n\t$F238725 ( x , this ) $F238726 ( y , this ) if ( ( x + width < x ) || ( x + width > this . width + this . minX ) ) { \n\t\tthrow new RasterFormatException $F580 ; \n\t\t} \n\tif ( ( y + height < y ) || ( y + height > this . height + this . minY ) ) { \n\t\tthrow new RasterFormatException $F580 ; \n\t\t} \n\tSampleModel sm ; \n\t$F238739 ( bandList , sm , sampleModel ) int deltaX = x0 - x ; \n\tint deltaY = y0 - y ; \n\treturn new ByteBandedRaster $F238741 ( sm , dataBuffer , x0 , y0 , width , height , sampleModelTranslateX , deltaX , sampleModelTranslateY , deltaY , this ) ; \n\t} \n"}, {"code": "protected void moveUpItem $F72 { \n\tif ( selectionTable . getSelectionCount ( ) == NUM00 ) $F932 for ( final int index : selectionTable . getSelectionIndices ( ) ) { \n\t\tif ( index == NUM00 ) { \n\t\t\tselectionTable . forceFocus ( ) ; \n\t\t\t$F665 } \n\t\t} \n\tfinal $F2027 newSelection = new int [ selectionTable . getSelectionCount ( ) ] ; \n\tint newSelectionIndex = NUM00 ; \n\tfor ( final TableItem tableItem : selectionTable . getSelection ( ) ) { \n\t\tfinal int position = selection . indexOf ( tableItem . getData ( ) ) ; \n\t\tswap ( position , position - NUM00 ) ; \n\t\tnewSelection [ newSelectionIndex ++ ] = position - NUM00 ; \n\t\t} \n\tredrawTables ( ) ; \n\tselectionTable . select ( newSelection ) ; \n\tselectionTable . forceFocus ( ) ; \n\t} \n"}, {"code": "protected void maybeFireBoundsInvalidated ( Rectangle invalidatedArea ) { \n\tDrawing d = getDrawing ( ) ; \n\t$F1634 canvasBounds = new $F1634 $F13777 ; \n\tif $F26935 ( d , CANVAS_WIDTH ) { \n\t\tcanvasBounds . width += d . get ( CANVAS_WIDTH ) ; \n\t\t} \n\tif $F26935 ( d , CANVAS_HEIGHT ) { \n\t\tcanvasBounds . height += d . get ( CANVAS_HEIGHT ) ; \n\t\t} \n\tif $F2200 ( canvasBounds , invalidatedArea ) { \n\t\tfireBoundsInvalidated ( invalidatedArea ) ; \n\t\t} \n\t} \n"}, {"code": "public DatagramPacket responseReceive $F72 throws IOException { \n\t$F12496 ( buf ) $F135794 ( dp , buf ) datagramSocket . receive ( dp ) ; \n\treturn dp ; \n\t} \n"}, {"code": "public void suspend ( String id ) { \n\tTraceState ts = traceState . get ( ) ; \n\tif $F14148 ( log , Level ) $F224661 ( log , ts , id ) if ( ts != null ) { \n\t\tsetExpire ( ts ) ; \n\t\ttry { \n\t\t\t$F8934 ( suspendedStateLock ) if ( suspendedState . containsKey ( id ) && log . isLoggable ( Level . FINEST ) ) { \n\t\t\t\tlog . finest ( $F3846 ( suspendedState , id ) + id ) ; \n\t\t\t\t} \n\t\t\tsuspendedState . put ( id , ts ) ; \n\t\t\t$F7042 ( traceState ) } \n\t\t$F796 ( suspendedStateLock ) } \n\t} \n"}, {"code": "public static int hashCode ( final Object obj ) { \n\treturn $F50584 ( obj ) ; \n\t} \n"}, {"code": "public static int maxLevel $F72 $F143681 ( LEVELS ) "}, {"code": "public void propertyChange ( PropertyChangeEvent evt ) $F5795 ( repaint ) "}, {"code": "public static boolean removeBeanOrFolder ( String path ) { \n\treturn removePath ( path . split ( PATH_SEPARATOR ) , s_directory , NUM00 ) > NUM00 ; \n\t} \n"}, {"code": "private void updateSelection ( Mode mode , Projection2D proj , SVGPoint p1 , SVGPoint p2 ) { \n\tDBIDSelection selContext = context . getSelection ( ) ; \n\tHashSetModifiableDBIDs selection ; \n\tif ( selContext == null || mode == Mode . REPLACE ) { \n\t\tselection = DBIDUtil . newHashSet ( ) ; \n\t\t} \n\telse { \n\t\tselection = DBIDUtil . newHashSet ( selContext . getSelectedIds ( ) ) ; \n\t\t} \n\tfor ( $F42632 ( iditer , rel ) ) { \n\t\t$F1986 vec = proj . fastProjectDataToRenderSpace ( rel . get ( iditer ) ) ; \n\t\tif ( vec [ NUM00 ] >= Math . min ( p1 . getX ( ) , p2 . getX ( ) ) && vec [ NUM00 ] <= Math . max ( p1 . getX ( ) , p2 . getX ( ) ) && vec [ NUM00 ] >= Math . min ( p1 . getY ( ) , p2 . getY ( ) ) && vec [ NUM00 ] <= Math . max ( p1 . getY ( ) , p2 . getY ( ) ) ) { \n\t\t\tif ( mode == Mode . INVERT ) { \n\t\t\t\tif $F2200 ( selection , iditer ) $F207 ( selection , iditer ) else $F106 ( selection , iditer ) } \n\t\t\telse $F207 ( selection , iditer ) } \n\t\t} \n\tcontext . setSelection ( new DBIDSelection ( selection ) ) ; \n\t} \n"}, {"code": "public EclipseIniLauncher ( File installationRoot ) throws $F27136 { \n\tFileMisc . assertMacApp ( installationRoot ) ; \n\tObjects . requireNonNull ( installationRoot ) ; \n\teclipseIni = EclipseIni . parseFrom ( new File ( installationRoot , FileMisc . macContentsEclipse ( ) + NUM00 ) ) ; \n\t} \n"}, {"code": "public boolean canAddMember $F1947 ( realmName , idType , containerIDType ) throws AMConsoleException { \n\tboolean can = _BOOL ; \n\ttry { \n\t\tIdType type = IdUtils . getType ( idType ) ; \n\t\tSet canAdd = type . canAddMembers ( ) ; \n\t\tIdType ctype = IdUtils . getType ( containerIDType ) ; \n\t\tcan = canAdd . contains ( ctype ) ; \n\t\t} \n\tcatch ( IdRepoException e ) { \n\t\t$F21557 ( debug , e ) $F21559 ( getErrorString , e ) } \n\treturn can ; \n\t} \n"}, {"code": "private static Node locateAttrParent ( Element elem , Node attr ) { \n\tNode parent = null ; \n\tAttr check = elem . getAttributeNode ( attr . getNodeName ( ) ) ; \n\tif ( check == attr ) parent = elem ; \n\tif ( null == parent ) { \n\t\tfor ( Node node = elem . getFirstChild ( ) ; \n\t\tnull != node ; \n\t\tnode = node . getNextSibling ( ) ) { \n\t\t\tif ( Node . ELEMENT_NODE == node . getNodeType ( ) ) { \n\t\t\t\tparent = locateAttrParent ( ( Element ) node , attr ) ; \n\t\t\t\tif ( null != parent ) $F597 } \n\t\t\t} \n\t\t} \n\treturn parent ; \n\t} \n"}, {"code": "private void defineInternalFrames ( UIDefaults d ) { \n\t$F91114 ( d ) d . put ( NUM00 , new DimensionUIResource $F32532 ) ; \n\t$F91114 ( d ) $F91114 ( d ) $F16824 ( d ) $F91114 ( d ) $F91114 ( d ) $F91114 ( d ) $F91114 ( d ) if ( PlatformUtils . isMac ( ) ) { \n\t\t$F82500 ( d ) } \n\telse { \n\t\t$F82500 ( d ) } \n\t$F82500 ( d ) $F82500 ( d ) $F91121 ( d , _BOOL ) $F91121 ( d , _BOOL ) $F91121 ( d , _BOOL ) $F91121 ( d , _BOOL ) $F91121 ( d , _BOOL ) $F91121 ( d , _BOOL ) $F91121 ( d , _BOOL ) $F82500 ( d ) $F91121 ( d , _BOOL ) $F91121 ( d , _BOOL ) $F82500 ( d ) String p = NUM00 ; \n\tString c = PAINTER_PREFIX + NUM00 ; \n\td . put ( p + NUM00 , new DerivedFont ( NUM00 , NUM00 , _BOOL , null ) ) ; \n\t$F70531 ( d , p ) d . put ( p + NUM00 , new TitlePaneWindowFocusedState $F72 ) ; \n\td . put ( p + NUM00 , new InternalFrameWindowFocusedState $F72 ) ; \n\t$F13870 ( d , p , c , FrameAndRootPainter ) d . put ( p + NUM00 , new LazyPainter ( c , FrameAndRootPainter . Which . BACKGROUND_ENABLED_WINDOWFOCUSED ) ) ; \n\tp = NUM00 ; \n\td . put ( p + NUM00 , NUM00 ) ; \n\tp = NUM00 ; \n\t$F13787 ( d , p ) d . put ( p + NUM00 , Color . BLACK ) ; \n\t} \n"}, {"code": "public static double cosQuick ( double angle ) { \n\tif ( USE_JDK_MATH ) { \n\t\treturn STRICT_MATH ? StrictMath . cos ( angle ) : Math . cos ( angle ) ; \n\t\t} \n\treturn cosTab [ ( ( int ) ( Math . abs ( angle ) * SIN_COS_INDEXER + NUM00 ) ) & ( SIN_COS_TABS_SIZE - NUM00 ) ] ; \n\t} \n"}, {"code": "$F52428 ( tag , msg , args , sLevel , LEVEL_WARNING , String , Log ) "}, {"code": "public void readSecurityHeader ( SipResponse response ) throws PayloadException { \n\t$F38126 ( wwwHeader , response , WWWAuthenticateHeader ) $F38126 ( infoHeader , response , AuthenticationInfoHeader ) if ( wwwHeader != null ) { \n\t\tmDigest . setRealm ( wwwHeader . getRealm ( ) ) ; \n\t\tmDigest . setOpaque ( wwwHeader . getOpaque ( ) ) ; \n\t\tmDigest . setQop ( wwwHeader . getQop ( ) ) ; \n\t\tmDigest . setNextnonce ( wwwHeader . getNonce ( ) ) ; \n\t\t} \n\telse if ( infoHeader != null ) { \n\t\tif ( infoHeader . getNextNonce ( ) != null ) { \n\t\t\tmDigest . setNextnonce ( infoHeader . getNextNonce ( ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void layoutPanel $F72 { \n\tsetBorder ( $F171654 ( BorderFactory ) ) ; \n\t$F9898 ( setLayout ) add ( new LabelledItem ( NUM00 , cbDistribution ) , BorderLayout . NORTH ) ; \n\tadd ( cardPanel , BorderLayout . CENTER ) ; \n\tcbItemListener . itemStateChanged ( new ItemEvent ( cbDistribution , ItemEvent . SELECTED , cardPanel , ItemEvent . ITEM_STATE_CHANGED ) ) ; \n\trepaint ( ) ; \n\trevalidate ( ) ; \n\t} \n"}, {"code": "$F1 public int compareTo ( DoubleDoublePair other ) { \n\tint fdiff = Double . compare ( this . first , other . first ) ; \n\t$F73569 ( fdiff ) return Double . compare ( this . second , other . second ) ; \n\t} \n"}, {"code": "private static boolean fileExists ( String filePath ) { \n\t$F1705 ( file , filePath ) $F2948 ( file ) } \n"}, {"code": "public static String classVersionToJdk ( int version ) { \n\treturn NUM00 + Integer . toString ( version - NUM00 ) ; \n\t} \n"}, {"code": "private BitSet createBitSet ( final String binaryString ) { \n\tfinal BitSet bset = new BitSet $F45530 ( binaryString ) ; \n\tboolean bitTrue = _BOOL ; \n\tfor ( $F1088 ( i , binaryString ) ) { \n\t\tif $F11983 ( binaryString , i ) { \n\t\t\tbitTrue = _BOOL ; \n\t\t\t} \n\t\telse { \n\t\t\tbitTrue = _BOOL ; \n\t\t\t} \n\t\tbset . set ( i , bitTrue ) ; \n\t\t} \n\treturn bset ; \n\t} \n"}, {"code": "public void flush $F72 { \n\tbuffer . force ( ) ; \n\t} \n"}, {"code": "public void remove ( Product product ) { \n\ttry { \n\t\t$F10194 ( solrDao , product ) } \n\tcatch ( IOException | SolrServerException ex ) { \n\t\tLOGGER . error ( NUM00 + product . getIdentifier ( ) + NUM00 , ex ) ; \n\t\t} \n\t} \n"}, {"code": "public void startBackgroundFetchService $F72 { \n\tLocalNotification n = new LocalNotification $F72 ; \n\tn . setId ( BACKGROUND_FETCH_NOTIFICATION_ID ) ; \n\tcancelLocalNotification ( BACKGROUND_FETCH_NOTIFICATION_ID ) ; \n\tscheduleLocalNotification ( n , System . currentTimeMillis ( ) + getPreferredBackgroundFetchInterval ( ) * NUM00 , NUM00 ) ; \n\t} \n"}, {"code": "protected void showModels ( boolean show , EpoxyModel $F1011 ... models ) { \n\tshowModels ( Arrays . asList ( models ) , show ) ; \n\t} \n"}, {"code": "static void check ( PublicKey key , X509CRL crl ) throws CertPathValidatorException { \n\tX509CRLImpl x509CRLImpl = null ; \n\ttry { \n\t\tx509CRLImpl = X509CRLImpl . toImpl ( crl ) ; \n\t\t} \n\tcatch ( CRLException ce ) { \n\t\t$F8021 ( ce ) } \n\tAlgorithmId algorithmId = x509CRLImpl . getSigAlgId ( ) ; \n\tcheck ( key , algorithmId ) ; \n\t} \n"}, {"code": "public void testUserDataHandlerNotifiedOfOnlyShallowAdoptions $F72 throws Exception { \n\tdomToString ( document ) ; \n\tRecordingHandler handler = new RecordingHandler $F72 ; \n\t$F104177 ( name , handler ) $F104177 ( name , handler ) $F104177 ( standard , handler ) $F104177 ( waffles , handler ) Document newDocument = builder . newDocument ( ) ; \n\tassertSame ( name , newDocument . adoptNode ( name ) ) ; \n\tassertSame ( newDocument , name . getOwnerDocument ( ) ) ; \n\tassertSame ( newDocument , standard . getOwnerDocument ( ) ) ; \n\tassertSame ( newDocument , waffles . getOwnerDocument ( ) ) ; \n\t$F2695 ( expected ) expected . add ( notification ( NODE_ADOPTED , NUM00 , NUM00 , name , null ) ) ; \n\texpected . add ( notification ( NODE_ADOPTED , NUM00 , NUM00 , name , null ) ) ; \n\tassertEquals ( expected , handler . calls ) ; \n\t} \n"}, {"code": "public void reset $F72 $F9096 ( node_list ) "}, {"code": "public String nameList ( String dir ) throws IOException { \n\tpassive ( ) ; \n\tsend ( NUM00 + dir ) ; \n\treadCode ( NUM00 ) ; \n\t$F1538 ( out ) IOUtils . copyAndClose ( inData , out ) ; \n\treadCode ( NUM00 ) ; \n\t$F1208 ( data , out ) $F22269 ( data ) } \n"}, {"code": "public VNXeCommandResult addLunsToLunGroup $F13322 ( lunGroupId , luns ) { \n\tLunGroupModifyParam param = new LunGroupModifyParam $F72 ; \n\tList $F42136 lunAdds = new ArrayList $F42136 $F72 ; \n\tfor ( String lunId : luns ) { \n\t\tVNXeBase lun = new VNXeBase ( lunId ) ; \n\t\tLunAddParam lunAdd = new LunAddParam $F72 ; \n\t\tlunAdd . setLun ( lun ) ; \n\t\tlunAdds . add ( lunAdd ) ; \n\t\t} \n\tparam . setLunAdd ( lunAdds ) ; \n\tLunGroupRequests req = new LunGroupRequests ( _khClient ) ; \n\treturn req . modifyLunGroupSync ( lunGroupId , param ) ; \n\t} \n"}, {"code": "$F38750 ( input , encoding , toInputStream ) "}, {"code": "public static ConstantExpression constant ( Object value , Class constantType ) { \n\treturn new ConstantExpression ( value , constantType . getName ( ) ) ; \n\t} \n"}, {"code": "public static final String toFEN ( Position pos ) { \n\t$F83 ( ret ) for ( $F183017 ( r ) ) { \n\t\tint numEmpty = NUM00 ; \n\t\tfor ( $F6268 ( c ) ) { \n\t\t\tint p = pos . getPiece ( Position . getSquare ( c , r ) ) ; \n\t\t\tif ( p == Piece . EMPTY ) { \n\t\t\t\tnumEmpty ++ ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tif ( numEmpty > NUM00 ) { \n\t\t\t\t\tret . append ( numEmpty ) ; \n\t\t\t\t\tnumEmpty = NUM00 ; \n\t\t\t\t\t} \n\t\t\t\tswitch ( p ) { \n\t\t\t\t\tcase Piece . WKING : $F84 ( ret ) $F597 case Piece . WQUEEN : $F84 ( ret ) $F597 case Piece . WROOK : $F84 ( ret ) $F597 case Piece . WBISHOP : $F84 ( ret ) $F597 case Piece . WKNIGHT : $F84 ( ret ) $F597 case Piece . WPAWN : $F84 ( ret ) $F597 case Piece . BKING : $F84 ( ret ) $F597 case Piece . BQUEEN : $F84 ( ret ) $F597 case Piece . BROOK : $F84 ( ret ) $F597 case Piece . BBISHOP : $F84 ( ret ) $F597 case Piece . BKNIGHT : $F84 ( ret ) $F597 case Piece . BPAWN : $F84 ( ret ) $F597 $F1267 $F62078 } \n\t\t\t\t} \n\t\t\t} \n\t\tif ( numEmpty > NUM00 ) $F288 ( ret , numEmpty ) $F34674 ( r , ret ) } \n\tret . append ( pos . whiteMove ? NUM00 : NUM00 ) ; \n\tboolean anyCastle = _BOOL ; \n\tif ( pos . h1Castle ( ) ) $F19003 ( ret , anyCastle , _BOOL ) if ( pos . a1Castle ( ) ) $F19003 ( ret , anyCastle , _BOOL ) if ( pos . h8Castle ( ) ) $F19003 ( ret , anyCastle , _BOOL ) if ( pos . a8Castle ( ) ) $F19003 ( ret , anyCastle , _BOOL ) $F48750 ( anyCastle , ret ) { \n\t\t$F84 ( ret ) if ( pos . getEpSquare ( ) >= NUM00 ) { \n\t\t\tint x = Position . getX ( pos . getEpSquare ( ) ) ; \n\t\t\tint y = Position . getY ( pos . getEpSquare ( ) ) ; \n\t\t\t$F159538 ( ret , x ) $F159538 ( ret , y ) } \n\t\telse $F86 ( ret ) } \n\t$F84 ( ret ) ret . append ( pos . halfMoveClock ) ; \n\t$F84 ( ret ) ret . append ( pos . fullMoveCounter ) ; \n\t$F92 ( ret ) } \n"}, {"code": "public void endElement $F1947 ( uri , localName , qName ) throws SAXException { \n\tif ( ! ( htmlMode && $F40270 ( uri ) && ( $F154247 ( qName ) || qName . equals ( NUM00 ) || qName . equals ( NUM00 ) || qName . equals ( NUM00 ) || qName . equals ( NUM00 ) ) ) ) { \n\t\twrite ( NUM00 ) ; \n\t\twriteName ( uri , localName , qName , _BOOL ) ; \n\t\twrite ( NUM00 ) ; \n\t\t} \n\tif ( elementLevel == NUM00 ) $F1210 ( write ) cdataElement = _BOOL ; \n\tsuper . endElement ( uri , localName , qName ) ; \n\tnsSupport . popContext ( ) ; \n\telementLevel -- ; \n\t} \n"}, {"code": "static void findAllVisibleChilds ( final ViewGroup viewGroup , final $F183286 ordoredChilds ) { \n\tfor ( $F140290 ( childViewIndex , viewGroup ) ) { \n\t\tfinal View childView = viewGroup . getChildAt ( childViewIndex ) ; \n\t\tif ( childView instanceof ViewGroup ) { \n\t\t\tfindAllVisibleChilds ( ( ViewGroup ) childView , ordoredChilds ) ; \n\t\t\t$F598 } \n\t\tif ( childView . getVisibility ( ) == View . VISIBLE ) $F207 ( ordoredChilds , childView ) } \n\t} \n"}, {"code": "public boolean logModified ( Logger log ) { \n\tif ( isModified ( ) ) { \n\t\t$F60651 ( log , _className ) return _BOOL ; \n\t\t} \n\telse return _BOOL ; \n\t} \n"}, {"code": "public final void push ( Node value ) { \n\tint ff = m_firstFree ; \n\tif $F11078 ( ff , m_mapSize ) { \n\t\tif ( null == m_map ) $F132454 ( m_map , m_blocksize , m_mapSize ) else $F132458 ( m_mapSize , m_blocksize , System , m_map , newMap , ff ) } \n\tm_map [ ff ] = value ; \n\tff ++ ; \n\tm_firstFree = ff ; \n\t} \n"}, {"code": "public String serialize ( Object obj ) throws ApiException { \n\ttry { \n\t\tif ( obj != null ) return mapper . writeValueAsString ( obj ) ; \n\t\telse $F1274 } \n\tcatch ( Exception e ) { \n\t\tthrow new ApiException ( NUM00 , e . getMessage ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "private void initializeSparseSlider $F72 { \n\tsparsitySlider . setMajorTickSpacing ( NUM00 ) ; \n\tsparsitySlider . setMinorTickSpacing ( NUM00 ) ; \n\tsparsitySlider . setPaintTicks ( _BOOL ) ; \n\tHashtable < Integer , JLabel > labelTable2 = new Hashtable < Integer , JLabel > $F72 ; \n\tlabelTable2 . put ( $F13791 , $F34046 ) ; \n\tlabelTable2 . put ( $F13791 , $F34046 ) ; \n\tsparsitySlider . setLabelTable ( labelTable2 ) ; \n\tsparsitySlider . setPaintLabels ( _BOOL ) ; \n\t} \n"}, {"code": "$F1 protected void autoAdjustRange $F72 { \n\tPlot plot = getPlot ( ) ; \n\t$F2329 ( plot ) if ( plot instanceof ValueAxisPlot ) { \n\t\tValueAxisPlot vap = ( ValueAxisPlot ) plot ; \n\t\tRange r = vap . getDataRange ( this ) ; \n\t\t$F22771 ( r , getDefaultAutoRange ) $F35253 ( upper , r ) double lower = Math . max ( r . getLowerBound ( ) , this . smallestValue ) ; \n\t\tdouble range = upper - lower ; \n\t\tdouble fixedAutoRange = getFixedAutoRange ( ) ; \n\t\tif ( fixedAutoRange > NUM00 ) { \n\t\t\tlower = Math . max ( upper - fixedAutoRange , this . smallestValue ) ; \n\t\t\t} \n\t\telse { \n\t\t\tdouble minRange = getAutoRangeMinimumSize ( ) ; \n\t\t\tif ( range < minRange ) { \n\t\t\t\t$F67927 ( expand , minRange , range ) upper = upper + expand ; \n\t\t\t\tlower = lower - expand ; \n\t\t\t\t} \n\t\t\tdouble logUpper = calculateLog ( upper ) ; \n\t\t\tdouble logLower = calculateLog ( lower ) ; \n\t\t\tdouble logRange = logUpper - logLower ; \n\t\t\tlogUpper = logUpper + getUpperMargin ( ) * logRange ; \n\t\t\tlogLower = logLower - getLowerMargin ( ) * logRange ; \n\t\t\tupper = calculateValueNoINF ( logUpper ) ; \n\t\t\tlower = calculateValueNoINF ( logLower ) ; \n\t\t\t} \n\t\tsetRange ( new Range ( lower , upper ) , _BOOL , _BOOL ) ; \n\t\t} \n\t} \n"}, {"code": "public synchronized void add ( long value ) { \n\tlong res = get ( ) + value ; \n\t$F130813 ( lb , res ) } \n"}, {"code": "public void addIVCombination $F14337 ( attackIV , defenseIV , staminaIV ) { \n\tint sumIV = attackIV + defenseIV + staminaIV ; \n\tint percentPerfect = Math . round ( sumIV / NUM00 * NUM00 ) ; \n\tif ( ( percentPerfect < lowPercent ) || ( percentPerfect == lowPercent ) && ( attackIV < lowAttack ) ) { \n\t\tlowPercent = percentPerfect ; \n\t\tlowAttack = attackIV ; \n\t\tlowDefense = defenseIV ; \n\t\tlowStamina = staminaIV ; \n\t\t} \n\tif ( ( percentPerfect > highPercent ) || ( percentPerfect == highPercent ) && ( attackIV > highAttack ) ) { \n\t\thighPercent = percentPerfect ; \n\t\thighAttack = attackIV ; \n\t\thighDefense = defenseIV ; \n\t\thighStamina = staminaIV ; \n\t\t} \n\tiVCombinations . add ( new IVCombination ( attackIV , defenseIV , staminaIV ) ) ; \n\t} \n"}, {"code": "$F806 qualify ( String cppName ) { \n\tif $F6036 ( cppName ) { \n\t\treturn $F382 ; \n\t\t} \n\t$F8728 ( names ) $F299414 ( ns , namespace ) while ( ns != null ) { \n\t\tString name = $F20 ( ns ) ? ns + NUM00 + cppName : cppName ; \n\t\tTemplateMap map = templateMap ; \n\t\twhile ( map != null ) { \n\t\t\tif $F3175 ( name , map ) { \n\t\t\t\tString args = NUM00 , separator = NUM00 ; \n\t\t\t\tfor ( String s : map . values ( ) ) { \n\t\t\t\t\targs += separator + s ; \n\t\t\t\t\tseparator = NUM00 ; \n\t\t\t\t\t} \n\t\t\t\tnames . add ( name + args + ( args . endsWith ( NUM00 ) ? NUM00 : NUM00 ) ) ; \n\t\t\t\t$F597 } \n\t\t\tmap = map . parent ; \n\t\t\t} \n\t\tnames . add ( name ) ; \n\t\tns = InfoMap . normalize ( ns , _BOOL , _BOOL ) ; \n\t\t$F24867 ( i , ns ) ns = i >= NUM00 ? ns . substring ( NUM00 , i ) : $F20 ( ns ) ? NUM00 : null ; \n\t\t} \n\tfor ( String s : usingList ) { \n\t\tString prefix = InfoMap . normalize ( cppName , _BOOL , _BOOL ) ; \n\t\tint i = $F31603 ( s ) ; \n\t\t$F14493 ( ns , s , i ) $F12716 ( suffix , s , i ) if ( $F1276 ( suffix ) || prefix . equals ( suffix ) ) $F128607 ( names , ns , cppName ) } \n\t$F14862 ( names ) } \n"}, {"code": "$F5466 public Bitmap generateIconForUrl ( String url , boolean includePrivateRegistries ) { \n\t$F190062 ( TextUtils , url ) String text = getIconTextForUrl ( url , includePrivateRegistries ) ; \n\t$F190062 ( TextUtils , text ) return generateIconForText ( text ) ; \n\t} \n"}, {"code": "public boolean containsPrefix ( final CharSequence prefix ) $F127468 ( containsPrefix , prefix ) "}, {"code": "public int compareTo ( Object p_other ) { \n\t$F74334 ( p_other ) if ( p_other instanceof BrdComponent ) { \n\t\treturn name . compareToIgnoreCase ( ( ( BrdComponent ) p_other ) . name ) ; \n\t\t} \n\t$F1082 } \n"}, {"code": "public void fatal ( String message ) throws SAXException { \n\tSAXParseException spe = new SAXParseException ( message , this ) ; \n\tif ( errorHandler != null ) { \n\t\terrorHandler . fatalError ( spe ) ; \n\t\t} \n\tthrow spe ; \n\t} \n"}, {"code": "$F1 public void close $F72 throws IOException { \n\tclosed = _BOOL ; \n\t$F87417 ( def ) $F59 ( in ) } \n"}, {"code": "protected final void firePropertyChange $F71526 ( propertyName , oldValue , newValue ) { \n\tPropertyChangeSupport aChangeSupport = this . changeSupport ; \n\t$F2329 ( aChangeSupport ) aChangeSupport . firePropertyChange ( propertyName , oldValue , newValue ) ; \n\t} \n"}, {"code": "$F115149 ( listener , scrollingListeners ) "}, {"code": "private Iterator $F143607 joinBindingSetEntry ( Map . Entry < String , BindingSet > entry ) { \n\tList < Collection $F143607 > $F204 ( matches ) ; \n\tif ( type == HashJoinType . CONSTANT_JOIN_VAR ) { \n\t\tif ( bindingJoinVarHash . containsKey ( entry . getKey ( ) ) ) { \n\t\t\tmatches . add ( $F22339 ( bindingJoinVarHash , entry ) ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\t$F3803 valOrders = getValueOrders ( entry . getKey ( ) ) ; \n\t\tfor ( String s : valOrders ) { \n\t\t\tif $F1710 ( bindingJoinVarHash , s ) $F62006 ( matches , bindingJoinVarHash , s ) } \n\t\t} \n\tif $F10471 ( matches ) { \n\t\treturn Collections . emptyIterator ( ) ; \n\t\t} \n\telse { \n\t\treturn new BindingSetCollectionsJoinIterator ( entry . getValue ( ) , matches ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void test ( Number t ) throws ParameterException { \n\tif ( t . doubleValue ( ) >= constraintValue . doubleValue ( ) ) { \n\t\tthrow new WrongParameterValueException ( $F153865 ( constraintValue ) + t . doubleValue ( ) + NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "public void testFindUsersActiveDirectory $F72 throws Exception { \n\tLdapManager mgr = getLdapAD ( ) ; \n\tList ret = null ; \n\t$F209855 ( filter ) filter . and ( new LikeFilter ( mgr . getUsersReturningAttribute ( LdapUserAttributeConstants . LDAP_USER_ATTRIBUTE_GIVEN_NAME ) , NUM00 ) ) ; \n\ttry { \n\t\t$F209867 ( searchMgrVO ) searchMgrVO . setFilter ( filter ) ; \n\t\tsearchMgrVO . setAddUserClasses ( _BOOL ) ; \n\t\tret = mgr . findUsers ( searchMgrVO ) ; \n\t\t} \n\t$F3957 $F70108 ( assertEquals , ret ) } \n"}, {"code": "public boolean reserve ( Object object ) { \n\t$F8934 ( reservedIdsLock ) if $F105 ( reservedObjects , object ) { \n\t\t$F704 ( reservedIdsLock ) return _BOOL ; \n\t\t} \n\treservedObjects . add ( object ) ; \n\t$F704 ( reservedIdsLock ) return _BOOL ; \n\t} \n"}, {"code": "private boolean saveStoredJPEGImage ( String file_name , final BufferedImage image , final boolean file_name_is_path ) { \n\tif ( ! file_name_is_path ) { \n\t\tfile_name = temp_dir + key + file_name ; \n\t\t} \n\tfinal String s = file_name . toLowerCase ( ) ; \n\tif ( $F2363 ( s ) && $F2363 ( s ) ) { \n\t\tfile_name += NUM00 ; \n\t\t} \n\ttry { \n\t\t$F107416 ( DefaultImageHelper , image , file_name ) $F111652 ( tempFileNames , file_name ) } \n\tcatch ( final Exception e ) { \n\t\tLogWriter . writeLog ( NUM00 + e + NUM00 + image + NUM00 + file_name ) ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static ScheduledExecutorService createScheduler $F72 { \n\tfinal ScheduledExecutorService scheduler = Executors . newScheduledThreadPool ( NUM00 , new DaemonThreadFactory ( DEFAULT_SCHEDULER_NAME ) ) ; \n\tSCHEDULERS . add ( scheduler ) ; \n\treturn scheduler ; \n\t} \n"}, {"code": "public LinkedList $F89473 patch_make ( String text1 , String text2 ) { \n\t$F3541 ( text1 , text2 ) $F16501 diffs = diff_main ( text1 , text2 , _BOOL ) ; \n\tif $F3817 ( diffs ) $F86383 ( diff_cleanupSemantic , diffs , diff_cleanupEfficiency ) return patch_make ( text1 , diffs ) ; \n\t} \n"}, {"code": "protected static void fail $F72 $F63967 ( System ) "}, {"code": "$F28896 ( index , paint , bounds , title , getTitle ) "}, {"code": "private void printArguments ( $F240647 args , Object arg ) { \n\t$F21384 ( printer ) if ( args != null ) { \n\t\tfor ( Iterator $F185096 i = args . iterator ( ) ; \n\t\ti . hasNext ( ) ; \n\t\t) { \n\t\t\tExpression e = i . next ( ) ; \n\t\t\te . accept ( this , arg ) ; \n\t\t\tif $F2921 ( i ) $F21410 ( printer ) } \n\t\t} \n\t$F21384 ( printer ) } \n"}, {"code": "private void calculateDelta $F9830 ( b ) { \n\tdouble numerator = NUM00 ; \n\tdouble denominator = NUM00 ; \n\tdouble sign = NUM00 ; \n\tfor ( $F1139 ( k , b ) ) { \n\t\tif $F1765 ( k , mExtremalIndices ) { \n\t\t\t$F85651 ( extremalIndex , mExtremalIndices , k ) numerator += ( b [ k ] * mGrid . getDesiredResponse ( ) [ extremalIndex ] ) ; \n\t\t\tdenominator += b [ k ] * sign / mGrid . getWeight ( ) [ extremalIndex ] ; \n\t\t\tsign = - sign ; \n\t\t\t} \n\t\telse $F21338 ( mLog ) } \n\tmDelta = numerator / denominator ; \n\t} \n"}, {"code": "public static float buildFloat ( int mant , int exp ) { \n\tif ( exp < - NUM00 || mant == NUM00 ) $F1083 if ( exp >= NUM00 ) { \n\t\treturn ( mant > NUM00 ) ? Float . POSITIVE_INFINITY : Float . NEGATIVE_INFINITY ; \n\t\t} \n\t$F6482 ( exp , mant ) if ( mant >= $F152872 ) { \n\t\tmant ++ ; \n\t\t} \n\treturn ( float ) ( ( exp > NUM00 ) ? mant * pow10 [ exp ] : mant / pow10 [ - exp ] ) ; \n\t} \n"}, {"code": "private void addFallbackSelector ( Properties settings , ProtocolDispatchSelector ps ) { \n\t$F27462 ( proxy , settings ) if ( proxy != null ) { \n\t\tps . setFallbackSelector ( ProxyUtil . parseProxySettings ( proxy ) ) ; \n\t\t} \n\t} \n"}, {"code": "private void readData $F72 throws IOException { \n\twhile ( ! isClosed ) { \n\t\t$F7468 ( code , is ) switch ( code ) { \n\t\t\t$F1262 $F1262 $F1262 $F1262 $F597 $F1262 { \n\t\t\t\tint channel = $F82091 ( is ) + is . read ( ) ; \n\t\t\t\tinputReady [ channel ] = _BOOL ; \n\t\t\t\t$F665 } \n\t\t\t$F1262 { \n\t\t\t\tint channel = $F82091 ( is ) + is . read ( ) ; \n\t\t\t\tint status = $F82091 ( is ) + is . read ( ) ; \n\t\t\t\tinputReady [ channel ] = _BOOL ; \n\t\t\t\t$F665 } \n\t\t\t$F52533 close ( ) ; \n\t\t\t$F665 $F1267 close ( ) ; \n\t\t\t$F665 } \n\t\t} \n\t$F665 } \n"}, {"code": "$F1 protected boolean validateConnection ( Connection conn ) { \n\ttry { \n\t\treturn $F81110 ( conn ) ; \n\t\t} \n\tcatch ( SQLException e ) { \n\t\treturn _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public static $F96 decode ( String s ) $F36684 ( decode , s ) "}, {"code": "public PacProxySelector ( String pacUrl ) { \n\t$F18045 ( pacUrl ) this . pacUrl = pacUrl ; \n\t} \n"}, {"code": "public void deleteAlertingDefinition ( AlertingDefinition alertingDefinition ) throws IOException { \n\t$F134526 ( id , alertingDefinition ) AlertingDefinition local = existingAlertingDefinitions . remove ( id ) ; \n\tif ( local != null ) { \n\t\tFiles . deleteIfExists ( pathResolver . getAlertingDefinitionFilePath ( local ) ) ; \n\t\teventPublisher . publishEvent ( new AbstractAlertingDefinitionEvent . AlertingDefinitionDeletedEvent ( this , local ) ) ; \n\t\t} \n\t} \n"}, {"code": "public void addFile ( File file ) { \n\tfileList . addFirst ( file ) ; \n\t} \n"}, {"code": "private void pullEvent $F72 { \n\tfinal int newScrollValue ; \n\tfinal int itemDimension ; \n\tfinal float initialMotionValue , lastMotionValue ; \n\tswitch ( getPullToRefreshScrollDirection ( ) ) { \n\t\tcase HORIZONTAL : initialMotionValue = mInitialMotionX ; \n\t\tlastMotionValue = mLastMotionX ; \n\t\t$F597 case VERTICAL : $F1267 initialMotionValue = mInitialMotionY ; \n\t\tlastMotionValue = mLastMotionY ; \n\t\t$F597 } \n\tswitch ( mCurrentMode ) { \n\t\tcase PULL_FROM_END : newScrollValue = Math . round ( Math . max ( initialMotionValue - lastMotionValue , NUM00 ) / FRICTION ) ; \n\t\titemDimension = getFooterSize ( ) ; \n\t\t$F597 case PULL_FROM_START : $F1267 newScrollValue = Math . round ( Math . min ( initialMotionValue - lastMotionValue , NUM00 ) / FRICTION ) ; \n\t\titemDimension = getHeaderSize ( ) ; \n\t\t$F597 } \n\tsetHeaderScroll ( newScrollValue ) ; \n\tif ( newScrollValue != NUM00 && ! isRefreshing ( ) ) { \n\t\tfloat scale = Math . abs ( newScrollValue ) / ( float ) itemDimension ; \n\t\tswitch ( mCurrentMode ) { \n\t\t\tcase PULL_FROM_END : mFooterLayout . onPull ( scale ) ; \n\t\t\t$F597 case PULL_FROM_START : $F1267 mHeaderLayout . onPull ( scale ) ; \n\t\t\t$F597 } \n\t\tif ( mState != State . PULL_TO_REFRESH && itemDimension >= Math . abs ( newScrollValue ) ) { \n\t\t\tsetState ( State . PULL_TO_REFRESH ) ; \n\t\t\t} \n\t\telse if ( mState != State . RELEASE_TO_REFRESH && itemDimension < Math . abs ( newScrollValue ) ) { \n\t\t\tsetState ( State . RELEASE_TO_REFRESH ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public boolean requiresConnection $F72 { \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static double tile2lat ( int y , int z ) { \n\tdouble n = Math . PI - ( NUM00 * Math . PI * y ) / Math . pow ( NUM00 , z ) ; \n\treturn Math . toDegrees ( Math . atan ( Math . sinh ( n ) ) ) ; \n\t} \n"}, {"code": "$F1 public synchronized TimeSeriesCollection updateCollection $F72 { \n\treturn super . updateCollection ( ) ; \n\t} \n"}, {"code": "public char skip ( int n ) { \n\t_pos += n ; \n\tif ( _length <= _pos ) { \n\t\t$F3935 ( _pos , _string ) return DONE ; \n\t\t} \n\telse return _string . charAt ( _pos ) ; \n\t} \n"}, {"code": "public void writeToObject ( Object object ) { \n\ttry { \n\t\tMethod method = BeanUtils . getWriteMethod ( object . getClass ( ) , getName ( ) , getType ( ) ) ; \n\t\tif ( method != null ) { \n\t\t\tmethod . invoke ( object , new Object $F57620 ( getValue ) ) ; \n\t\t\t} \n\t\t} \n\t$F12237 ( e ) } \n"}, {"code": "private boolean shouldInform ( LocalClientInfo info ) { \n\t$F657 ( now , System ) if ( now < _nextAllowedTime ) return _BOOL ; \n\tLong allowed = BUG_TIMES . get ( info . getParsedBug ( ) ) ; \n\treturn allowed == null || now >= allowed . longValue ( ) ; \n\t} \n"}, {"code": "public void post ( Runnable runnable ) { \n\tsynchronized ( mQueue ) { \n\t\tmQueue . add ( runnable ) ; \n\t\t$F355523 ( mQueue , scheduleNextLocked ) } \n\t} \n"}, {"code": "public static void clear $F72 { \n\t_clearCount ++ ; \n\t_stateCount = NUM00 ; \n\t_state = NUM00 ; \n\t$F725 ( _featureMap ) } \n"}, {"code": "public static String toStringPretty ( JsonObject jsonObj , int level ) { \n\t$F280 ( buf ) $F84 ( buf ) buf . append ( fieldsToStringPretty ( jsonObj , level + NUM00 ) ) ; \n\t$F84 ( buf ) $F92 ( buf ) } \n"}, {"code": "public boolean isLaunchedFromJar $F72 { \n\t$F46495 ( lstJarFile ) } \n"}, {"code": "protected void savePassCodeAndExit $F72 { \n\tIntent $F192736 ( resultIntent ) ; \n\tresultIntent . putExtra ( KEY_PASSCODE , $F2065 ( mPassCodeDigits ) + mPassCodeDigits [ NUM00 ] + mPassCodeDigits [ NUM00 ] ) ; \n\tsetResult ( RESULT_OK , resultIntent ) ; \n\tfinish ( ) ; \n\t} \n"}, {"code": "public LogStream print ( double d ) { \n\tif ( ps != null ) { \n\t\tindent ( ) ; \n\t\tlineBuffer . append ( d ) ; \n\t\t} \n\treturn this ; \n\t} \n"}, {"code": "public static void deleteDirectoryRecursively ( Context context , File f , Boolean onlyContent ) throws IOException { \n\tif $F3444 ( f ) { \n\t\tfor ( $F3445 ( c , f ) ) { \n\t\t\tdeleteDirectoryRecursively ( context , c , _BOOL ) ; \n\t\t\t} \n\t\t} \n\tif ( ! onlyContent ) { \n\t\tif $F7119 ( f ) $F3496 ( f ) context . sendBroadcast ( new Intent ( Intent . ACTION_MEDIA_SCANNER_SCAN_FILE , Uri . parse ( $F4929 ( f ) ) ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static String nodeSubTypeToString ( int subType ) { \n\tString val = NUM00 ; \n\tswitch ( subType ) { \n\t\tcase NodeRepresentation . AND_TYPE : val = NUM00 ; \n\t\t$F597 case NodeRepresentation . OR_TYPE : val = NUM00 ; \n\t\t$F597 case NodeRepresentation . IMPLIES_TYPE : val = NUM00 ; \n\t\t$F597 case NodeRepresentation . FORALL_TYPE : val = NUM00 ; \n\t\t$F597 case NodeRepresentation . EXISTS_TYPE : val = NUM00 ; \n\t\t$F597 case NodeRepresentation . SQSUB_TYPE : val = NUM00 ; \n\t\t$F597 case NodeRepresentation . OTHER_TYPE : val = NUM00 ; \n\t\t$F597 } \n\treturn val ; \n\t} \n"}, {"code": "public static void disposeGraphicsConfig ( long pConfigInfo ) { \n\tOGLRenderQueue rq = getInstance ( ) ; \n\t$F8934 ( rq ) try { \n\t\tOGLContext . setScratchSurface ( pConfigInfo ) ; \n\t\tRenderBuffer buf = rq . getBuffer ( ) ; \n\t\trq . ensureCapacityAndAlignment ( NUM00 , NUM00 ) ; \n\t\tbuf . putInt ( DISPOSE_CONFIG ) ; \n\t\tbuf . putLong ( pConfigInfo ) ; \n\t\trq . flushNow ( ) ; \n\t\t} \n\t$F796 ( rq ) } \n"}, {"code": "private void addTerm ( String term ) { \n\t$F99426 ( index , termToIndex , term ) if ( index == null ) { \n\t\tsynchronized ( this ) { \n\t\t\tindex = termToIndex . get ( term ) ; \n\t\t\tif ( index == null ) { \n\t\t\t\tindex = Integer . valueOf ( termIndexCounter . getAndIncrement ( ) ) ; \n\t\t\t\ttermToIndex . put ( term , index ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void safeBottomView $F72 { \n\tStatus status = getOpenStatus ( ) ; \n\tViewGroup bottom = getBottomView ( ) ; \n\tif ( status == Status . Close ) $F141296 ( bottom , INVISIBLE ) else $F141296 ( bottom , VISIBLE ) } \n"}, {"code": "public static String revertNewLines ( String string ) { \n\tint index ; \n\t$F280 ( newStringBuffer ) while $F48458 ( index , string ) { \n\t\t$F52803 ( index , newStringBuffer , string ) $F84 ( newStringBuffer ) $F52804 ( index , string ) } \n\tnewStringBuffer . append ( string ) ; \n\t$F6947 ( string , newStringBuffer ) $F7398 ( newStringBuffer ) while $F48458 ( index , string ) { \n\t\t$F52803 ( index , newStringBuffer , string ) $F84 ( newStringBuffer ) $F52804 ( index , string ) } \n\tnewStringBuffer . append ( string ) ; \n\t$F92 ( newStringBuffer ) } \n"}, {"code": "$F1 public $F37278 generatePeriods ( DateTimeUnit dateTimeUnit ) { \n\tCalendar cal = getCalendar ( ) ; \n\tboolean past = dateTimeUnit . getMonth ( ) >= $F106703 ( getBaseMonth ) ; \n\t$F37282 ( periods , Lists ) dateTimeUnit = cal . minusYears ( dateTimeUnit , past ? NUM00 : NUM00 ) ; \n\tdateTimeUnit . setMonth ( getBaseMonth ( ) + NUM00 ) ; \n\t$F37280 ( dateTimeUnit ) Calendar calendar = getCalendar ( ) ; \n\tfor ( $F6268 ( i ) ) { \n\t\t$F12366 ( periods , createPeriod , dateTimeUnit , cal ) dateTimeUnit = calendar . plusYears ( dateTimeUnit , NUM00 ) ; \n\t\t} \n\treturn periods ; \n\t} \n"}, {"code": "public final boolean isDragging $F72 { \n\treturn dragging ; \n\t} \n"}, {"code": "$F1 public void escape ( $F1469 buffer , int start , int length , boolean isAttributeValue , Writer outputWriter ) throws IOException { \n\tfor ( $F5883 ( i , start , length ) ) { \n\t\tchar ch = buffer [ i ] ; \n\t\tif ( ch == NUM00 ) { \n\t\t\t$F3410 ( outputWriter ) $F598 } \n\t\tif ( ch == NUM00 ) { \n\t\t\t$F3410 ( outputWriter ) $F598 } \n\t\tif ( ch == NUM00 ) { \n\t\t\t$F3410 ( outputWriter ) $F598 } \n\t\tif ( ch == NUM00 && isAttributeValue ) { \n\t\t\t$F3410 ( outputWriter ) $F598 } \n\t\tif ( ch == NUM00 && isAttributeValue ) { \n\t\t\t$F3410 ( outputWriter ) $F598 } \n\t\tif ( isXml11RestrictedCharacter ( ch ) ) { \n\t\t\t$F3410 ( outputWriter ) outputWriter . write ( Integer . toHexString ( ch ) ) ; \n\t\t\t$F3410 ( outputWriter ) $F598 } \n\t\toutputWriter . write ( ch ) ; \n\t\t} \n\t} \n"}, {"code": "void encrypt ( ByteBuffer src ) throws SSLException { \n\t$F56572 ( handshakeComplete ) if $F116620 ( src ) { \n\t\t$F13265 ( outNetBuffer , emptyBuffer ) $F665 } \n\tcreateOutNetBuffer ( src . remaining ( ) ) ; \n\twhile $F5720 ( src ) { \n\t\tSSLEngineResult result = sslEngine . wrap ( src , outNetBuffer . buf ( ) ) ; \n\t\tif ( result . getStatus ( ) == SSLEngineResult . Status . OK ) { \n\t\t\tif ( result . getHandshakeStatus ( ) == SSLEngineResult . HandshakeStatus . NEED_TASK ) $F5795 ( doTasks ) } \n\t\telse if ( result . getStatus ( ) == SSLEngineResult . Status . BUFFER_OVERFLOW ) { \n\t\t\toutNetBuffer . capacity ( $F238996 ( outNetBuffer ) ) ; \n\t\t\t$F239000 ( outNetBuffer ) } \n\t\telse { \n\t\t\tthrow new SSLException ( $F203080 ( result ) + src + NUM00 + outNetBuffer ) ; \n\t\t\t} \n\t\t} \n\t$F14257 ( outNetBuffer ) } \n"}, {"code": "public boolean codeMatches ( String queryCode ) { \n\t$F115 ( length , id ) if $F22503 ( Debug ) { \n\t\tDebug . output ( NUM00 + queryCode + NUM00 + id + NUM00 + startIndex + NUM00 + length ) ; \n\t\t} \n\treturn queryCode . regionMatches ( _BOOL , startIndex , id , NUM00 , length ) ; \n\t} \n"}, {"code": "private static int parseNotificationId ( String id ) { \n\ttry $F75349 ( Integer , id ) catch ( NumberFormatException nfe ) { \n\t\t$F248237 ( Log , TAG , id ) $F150 } \n\t} \n"}, {"code": "private $F4203 Property $F4203 prepare ( String key , Property $F4203 property , T initialValue ) { \n\tfinal ChangeListener $F4203 change = null ; \n\tproperty . setValue ( initialValue ) ; \n\tproperty . addListener ( change ) ; \n\tchange . changed ( property , null , initialValue ) ; \n\treturn property ; \n\t} \n"}, {"code": "protected void readTillEOL $F72 throws IOException { \n\twhile ( m_Tokenizer . nextToken ( ) != StreamTokenizer . TT_EOL ) $F845 m_Tokenizer . pushBack ( ) ; \n\t} \n"}, {"code": "$F1 public void clearAnswer $F72 { \n\tDateTime ldt = new DateTime $F72 ; \n\tmTimePicker . setCurrentHour ( ldt . getHourOfDay ( ) ) ; \n\tmTimePicker . setCurrentMinute ( ldt . getMinuteOfHour ( ) ) ; \n\t} \n"}, {"code": "public String readLine $F72 throws IOException { \n\treturn keepCarriageReturns ? readUntilNewline ( ) : reader . readLine ( ) ; \n\t} \n"}, {"code": "$F1 public void doWork $F72 throws OperatorException { \n\tsuper . doWork ( ) ; \n\trunVectorOutput . deliver ( runVector ) ; \n\t} \n"}, {"code": "public Shape createArrowUp $F22855 ( x , y , w , h ) { \n\t$F2268 ( path ) path . moveTo ( x , y + h ) ; \n\tpath . lineTo ( x + w / NUM00 , y ) ; \n\tpath . lineTo ( x + w , y + h ) ; \n\t$F2272 ( path ) return path ; \n\t} \n"}, {"code": "protected int generateBinomial ( int n , double p ) { \n\tfinal double C1_3 = NUM00 ; \n\tfinal double C5_8 = NUM00 ; \n\tfinal double C1_6 = NUM00 ; \n\tfinal int DMAX_KM = NUM00 ; \n\tint bh , i , K , Km , nK ; \n\tdouble f , rm , U , V , X , T , E ; \n\tif ( n != n_last || p != p_last ) { \n\t\tn_last = n ; \n\t\tp_last = p ; \n\t\tpar = Math . min ( p , NUM00 - p ) ; \n\t\tq = NUM00 - par ; \n\t\tnp = n * par ; \n\t\tif ( np <= NUM00 ) $F150 rm = np + par ; \n\t\tm = ( int ) rm ; \n\t\tif ( np < NUM00 ) { \n\t\t\tp0 = Math . exp ( n * Math . log ( q ) ) ; \n\t\t\tbh = ( int ) ( np + NUM00 * Math . sqrt ( np * q ) ) ; \n\t\t\tb = Math . min ( n , bh ) ; \n\t\t\t} \n\t\telse { \n\t\t\trc = ( n + NUM00 ) * ( pq = par / q ) ; \n\t\t\tss = np * q ; \n\t\t\ti = ( int ) ( NUM00 * Math . sqrt ( ss ) - NUM00 * q ) ; \n\t\t\txm = m + NUM00 ; \n\t\t\txl = $F250385 ( m , i ) ; \n\t\t\txr = ( double ) ( m + i + NUM00 ) ; \n\t\t\tf = ( rm - xl ) / ( rm - xl * par ) ; \n\t\t\tll = f * ( NUM00 + NUM00 * f ) ; \n\t\t\tf = ( xr - rm ) / ( xr * q ) ; \n\t\t\tlr = f * ( NUM00 + NUM00 * f ) ; \n\t\t\tc = NUM00 + NUM00 / ( NUM00 + ( double ) m ) ; \n\t\t\tp1 = i + NUM00 ; \n\t\t\tp2 = p1 * ( NUM00 + c + c ) ; \n\t\t\tp3 = p2 + c / ll ; \n\t\t\tp4 = p3 + c / lr ; \n\t\t\t} \n\t\t} \n\tif ( np < NUM00 ) { \n\t\tdouble pk ; \n\t\tK = NUM00 ; \n\t\tpk = p0 ; \n\t\t$F76340 ( U , randomGenerator ) while ( U > pk ) { \n\t\t\t++ K ; \n\t\t\tif ( K > b ) { \n\t\t\t\t$F76340 ( U , randomGenerator ) K = NUM00 ; \n\t\t\t\tpk = p0 ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tU -= pk ; \n\t\t\t\tpk = ( double ) ( ( ( n - K + NUM00 ) * par * pk ) / ( K * q ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\treturn ( ( p > NUM00 ) ? ( n - K ) : K ) ; \n\t\t} \n\tfor ( $F589 ) { \n\t\t$F76340 ( V , randomGenerator ) if ( ( U = randomGenerator . raw ( ) * p4 ) <= p1 ) { \n\t\t\tK = ( int ) ( xm - U + p1 * V ) ; \n\t\t\treturn ( p > NUM00 ) ? ( n - K ) : K ; \n\t\t\t} \n\t\tif ( U <= p2 ) { \n\t\t\tX = xl + ( U - p1 ) / c ; \n\t\t\tif ( ( V = V * c + NUM00 - Math . abs ( xm - X ) / p1 ) >= NUM00 ) $F598 K = ( int ) X ; \n\t\t\t} \n\t\telse if ( U <= p3 ) { \n\t\t\tif ( ( X = xl + Math . log ( V ) / ll ) < NUM00 ) $F598 K = ( int ) X ; \n\t\t\tV *= ( U - p2 ) * ll ; \n\t\t\t} \n\t\telse { \n\t\t\tif ( ( K = ( int ) ( xr - Math . log ( V ) / lr ) ) > n ) $F598 V *= ( U - p3 ) * lr ; \n\t\t\t} \n\t\tif ( ( Km = Math . abs ( K - m ) ) <= DMAX_KM || Km + Km + NUM00 >= ss ) { \n\t\t\tf = NUM00 ; \n\t\t\tif ( m < K ) { \n\t\t\t\tfor ( i = m ; \n\t\t\t\ti < K ; \n\t\t\t\t) { \n\t\t\t\t\tif ( ( f *= ( rc / ++ i - pq ) ) < V ) $F597 } \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tfor ( i = K ; \n\t\t\t\ti < m ; \n\t\t\t\t) { \n\t\t\t\t\tif ( ( V *= ( rc / ++ i - pq ) ) > f ) $F597 } \n\t\t\t\t} \n\t\t\tif ( V <= f ) $F597 } \n\t\telse { \n\t\t\tV = Math . log ( V ) ; \n\t\t\tT = - Km * Km / ( ss + ss ) ; \n\t\t\tE = ( Km / ss ) * ( ( Km * ( Km * C1_3 + C5_8 ) + C1_6 ) / ss + NUM00 ) ; \n\t\t\tif ( V <= T - E ) $F597 if ( V <= T + E ) { \n\t\t\t\tif ( n != n_prev || par != p_prev ) { \n\t\t\t\t\tn_prev = n ; \n\t\t\t\t\tp_prev = par ; \n\t\t\t\t\tnm = n - m + NUM00 ; \n\t\t\t\t\tch = xm * Math . log ( ( m + NUM00 ) / ( pq * nm ) ) + Arithmetic . stirlingCorrection ( m + NUM00 ) + Arithmetic . stirlingCorrection ( nm ) ; \n\t\t\t\t\t} \n\t\t\t\tnK = n - K + NUM00 ; \n\t\t\t\tif ( V <= ch + ( n + NUM00 ) * Math . log ( $F10425 ( nm , nK ) ) + ( K + NUM00 ) * Math . log ( nK * pq / ( K + NUM00 ) ) - Arithmetic . stirlingCorrection ( K + NUM00 ) - Arithmetic . stirlingCorrection ( nK ) ) $F597 } \n\t\t\t} \n\t\t} \n\treturn ( p > NUM00 ) ? ( n - K ) : K ; \n\t} \n"}, {"code": "public SimpleUserContext ( AuthenticationProvider authProvider , String username , Map < String , GuacamoleConfiguration > configs ) { \n\t$F6877 $F37973 ( connectionIdentifiers , configs ) ; \n\t$F6877 connectionGroupIdentifiers = Collections . singleton ( ROOT_IDENTIFIER ) ; \n\tCollection $F238202 connections = new $F279444 $F716 ( configs ) ; \n\tfor ( Map . Entry < String , GuacamoleConfiguration > configEntry : configs . entrySet ( ) ) { \n\t\t$F3477 ( identifier , configEntry ) GuacamoleConfiguration config = configEntry . getValue ( ) ; \n\t\tConnection connection = new SimpleConnection ( identifier , identifier , config ) ; \n\t\tconnection . setParentIdentifier ( ROOT_IDENTIFIER ) ; \n\t\tconnections . add ( connection ) ; \n\t\tconnectionIdentifiers . add ( identifier ) ; \n\t\t} \n\tthis . rootGroup = new SimpleConnectionGroup ( ROOT_IDENTIFIER , ROOT_IDENTIFIER , connectionIdentifiers , $F70465 ( Collections ) ) ; \n\tthis . self = new SimpleUser ( username , connectionIdentifiers , connectionGroupIdentifiers ) ; \n\tthis . userDirectory = new SimpleUserDirectory ( self ) ; \n\tthis . connectionDirectory = new SimpleConnectionDirectory ( connections ) ; \n\tthis . connectionGroupDirectory = new SimpleConnectionGroupDirectory ( Collections . singleton ( this . rootGroup ) ) ; \n\tthis . authProvider = authProvider ; \n\t} \n"}, {"code": "public void reset $F72 { \n\t$F725 ( visitedGet ) $F725 ( visitedPost ) for ( SpiderParser parser : parsers ) { \n\t\tparser . removeSpiderParserListener ( this ) ; \n\t\t} \n\t} \n"}, {"code": "private static float CallStaticFloatMethodV $F4272 ( env , classJREF , methodID , argAddress ) throws Exception { \n\t$F4274 ( traceJNI , VM ) $F4275 ( RuntimeEntrypoints ) try { \n\t\tObject returnObj = JNIHelpers . invokeWithVarArg ( methodID , argAddress , TypeReference . Float ) ; \n\t\treturn Reflection . unwrapFloat ( returnObj ) ; \n\t\t} \n\t$F4287 ( traceJNI , unexpected , System , env ) } \n"}, {"code": "public $F40262 toNamedList $F72 { \n\tfinal SimpleOrderedMap $F1432 result = new SimpleOrderedMap $F200 $F72 ; \n\tfor ( $F13710 it = getParameterNamesIterator ( ) ; \n\tit . hasNext ( ) ; \n\t) { \n\t\t$F206353 ( name , it ) final $F806 values = getParams ( name ) ; \n\t\tif $F9634 ( values ) { \n\t\t\tresult . add ( name , values [ NUM00 ] ) ; \n\t\t\t} \n\t\telse $F42308 ( result , name , values ) } \n\treturn result ; \n\t} \n"}, {"code": "private boolean isRepresentingTab ( String text ) { \n\t$F397 ( text , _BOOL ) if ( isInsertingSpacesForTab ( ) ) { \n\t\tif ( $F1276 ( text ) || text . length ( ) > getVisualTabLengthPreference ( ) ) return _BOOL ; \n\t\tfor ( $F1088 ( i , text ) ) { \n\t\t\tif $F20317 ( text , i ) return _BOOL ; \n\t\t\t} \n\t\treturn _BOOL ; \n\t\t} \n\telse return $F1276 ( text ) && $F4431 ( text ) ; \n\t} \n"}, {"code": "public MonitorThread ( String name ) { \n\tsuper ( name ) ; \n\t} \n"}, {"code": "public void removeDragListener ( DragListener l ) $F106 ( mListeners , l ) "}, {"code": "$F1 public UnitsRelations init ( ProcessingEnvironment env ) { \n\telements = env . getElementUtils ( ) ; \n\tm = UnitsRelationsTools . buildAnnoMirrorWithDefaultPrefix ( env , m . class ) ; \n\tkm = UnitsRelationsTools . buildAnnoMirrorWithSpecificPrefix ( env , m . class , Prefix . kilo ) ; \n\tmm = UnitsRelationsTools . buildAnnoMirrorWithSpecificPrefix ( env , m . class , Prefix . milli ) ; \n\tm2 = UnitsRelationsTools . buildAnnoMirrorWithNoPrefix ( env , m2 . class ) ; \n\tkm2 = UnitsRelationsTools . buildAnnoMirrorWithNoPrefix ( env , km2 . class ) ; \n\tmm2 = UnitsRelationsTools . buildAnnoMirrorWithNoPrefix ( env , mm2 . class ) ; \n\ts = UnitsRelationsTools . buildAnnoMirrorWithDefaultPrefix ( env , s . class ) ; \n\th = UnitsRelationsTools . buildAnnoMirrorWithNoPrefix ( env , h . class ) ; \n\tmPERs = UnitsRelationsTools . buildAnnoMirrorWithNoPrefix ( env , mPERs . class ) ; \n\tkmPERh = UnitsRelationsTools . buildAnnoMirrorWithNoPrefix ( env , kmPERh . class ) ; \n\tmPERs2 = UnitsRelationsTools . buildAnnoMirrorWithNoPrefix ( env , mPERs2 . class ) ; \n\treturn this ; \n\t} \n"}, {"code": "public static $F806 toStringArray $F34102 ( collection ) { \n\t$F1338 ( collection ) $F14862 ( collection ) } \n"}, {"code": "public void persist ( RepositoryProxyCache proxyCache ) { \n\tpersist ( proxyCache , proxyCache . getFileName ( ) ) ; \n\t} \n"}, {"code": "public $F130209 prepareAnimation ( ChartView chartView , $F243564 start , $F243564 end ) { \n\t$F10162 ( nSets , start ) final int nEntries = start . get ( NUM00 ) . length ; \n\tmChartView = chartView ; \n\t$F11125 ( mCurrentDuration , nEntries ) if ( mOrder == null ) { \n\t\t$F3936 ( mOrder , nEntries ) for ( $F1139 ( i , mOrder ) ) mOrder [ i ] = i ; \n\t\t} \n\tfloat noOverlapDuration = mGlobalDuration / nEntries ; \n\tmDuration = ( int ) ( noOverlapDuration + ( mGlobalDuration - noOverlapDuration ) * mOverlapingFactor ) ; \n\tPath path ; \n\tmPathMeasures = new PathMeasure [ nSets ] [ nEntries ] ; \n\tfor ( $F119 ( i , nSets ) ) { \n\t\tfor ( $F119 ( j , nEntries ) ) { \n\t\t\tpath = new Path $F72 ; \n\t\t\tpath . moveTo ( start . get ( i ) [ j ] [ NUM00 ] , start . get ( i ) [ j ] [ NUM00 ] ) ; \n\t\t\tpath . lineTo ( end . get ( i ) [ j ] [ NUM00 ] , end . get ( i ) [ j ] [ NUM00 ] ) ; \n\t\t\tmPathMeasures [ i ] [ j ] = new PathMeasure ( path , _BOOL ) ; \n\t\t\t} \n\t\t} \n\t$F11125 ( mInitTime , nEntries ) $F3224 ( mGlobalInitTime , System ) long noOverlapInitTime ; \n\tfor ( $F119 ( i , nEntries ) ) { \n\t\tnoOverlapInitTime = mGlobalInitTime + ( i * ( mGlobalDuration / nEntries ) ) ; \n\t\tmInitTime [ mOrder [ i ] ] = ( noOverlapInitTime - ( ( long ) ( mOverlapingFactor * ( noOverlapInitTime - mGlobalInitTime ) ) ) ) ; \n\t\t} \n\tmPlaying = _BOOL ; \n\treturn $F119303 ( getUpdate , mChartView ) ; \n\t} \n"}, {"code": "public IOUtils $F72 $F5795 ( super ) "}, {"code": "public String formatDeleteNfsExportCmd ( String dataMover , String path ) { \n\t$F83 ( cmd ) $F84 ( cmd ) cmd . append ( dataMover ) ; \n\t$F84 ( cmd ) $F84 ( cmd ) cmd . append ( path ) ; \n\t$F92 ( cmd ) } \n"}, {"code": "public final String matchCategories $F32029 ( categories ) { \n\t$F1338 ( categories ) $F13712 ( it , categories ) if ( mCategories == null ) { \n\t\treturn $F81711 ( it ) ; \n\t\t} \n\twhile $F2921 ( it ) { \n\t\t$F206353 ( category , it ) if $F2200 ( mCategories , category ) { \n\t\t\treturn category ; \n\t\t\t} \n\t\t} \n\t$F1274 } \n"}, {"code": "$F1 public void run $F72 { \n\ttry { \n\t\tClassReader reader = new ClassReader ( new FileInputStream ( this . classFile ) ) ; \n\t\tAsmClassVisitor visitor = new AsmClassVisitor ( this . dataProvider , this . config ) ; \n\t\treader . accept ( visitor , ClassReader . SKIP_DEBUG ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tLOGGER . log ( Level . SEVERE , e . getMessage ( ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "private void addLocationAndTrackPropertyChange $F72 { \n\tfor ( Location loc : locationManager . getList ( ) ) { \n\t\tloc . addPropertyChangeListener ( this ) ; \n\t\tfor ( Track track : loc . getTrackList ( ) ) { \n\t\t\ttrack . addPropertyChangeListener ( this ) ; \n\t\t\tSchedule schedule = track . getSchedule ( ) ; \n\t\t\tif ( schedule != null ) { \n\t\t\t\tschedule . addPropertyChangeListener ( this ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void handleJsonSignIn ( RequestAndResponse requestAndResponse ) throws $F47978 { \n\trequestAndResponse . setResponseContentTypeJson ( ) ; \n\tString userName ; \n\tString password ; \n\tString csrft ; \n\ttry { \n\t\tfinal JsonNodeHelper json = getJsonNode ( requestAndResponse ) ; \n\t\t$F35515 ( userName , json ) $F35515 ( password , json ) $F35515 ( csrft , json ) } \n\tcatch ( final IOException e ) { \n\t\treturnJson400 ( requestAndResponse , servletText . errorJson ( ) ) ; \n\t\t$F665 } \n\tif ( userName != null ) { \n\t\t$F37156 ( userName ) } \n\tif ( isTheCsrftWrong ( requestAndResponse , csrft ) ) { \n\t\treturnJson400 ( requestAndResponse , servletText . errorWrongCsrft ( ) ) ; \n\t\t$F665 } \n\tif $F4251 ( userName ) { \n\t\treturnJson400 ( requestAndResponse , servletText . errorUsernameMustNotBeBlank ( ) ) ; \n\t\t$F665 } \n\tif $F4251 ( password ) { \n\t\treturnJson400 ( requestAndResponse , servletText . errorPasswordMustNotBeBlank ( ) ) ; \n\t\t$F665 } \n\tif ( ! AccountAttributeValidator . isUserNameValid ( userName ) ) { \n\t\treturnJson400 ( requestAndResponse , servletText . errorUserNameIsNotValid ( ) ) ; \n\t\t$F665 } \n\tif ( ! AccountAttributeValidator . isPasswordValid ( password ) ) { \n\t\treturnJson400 ( requestAndResponse , servletText . errorPasswordIsNotValid ( ) ) ; \n\t\t$F665 } \n\ttry { \n\t\tfinal User user = dbLogic . getUserByUserName ( userName ) ; \n\t\tif ( user == null ) { \n\t\t\treturnJson400 ( requestAndResponse , servletText . errorNoAccountFound ( ) ) ; \n\t\t\t$F665 } \n\t\tif ( user . getIsAccountClosed ( ) ) { \n\t\t\treturnJson400 ( requestAndResponse , servletText . errorAccountIsClosed ( ) ) ; \n\t\t\t$F665 } \n\t\tfinal String realPassword = user . getPassword ( ) ; \n\t\tif ( realPassword == null || ! realPassword . equals ( DigestUtils . sha1Hex ( password ) ) ) { \n\t\t\treturnJson400 ( requestAndResponse , servletText . errorPasswordIsIncorrect ( ) ) ; \n\t\t\t$F665 } \n\t\tmapSessionToUser ( requestAndResponse , user . getId ( ) ) ; \n\t\t$F17621 ( dbLogic ) returnJson200 ( requestAndResponse ) ; \n\t\t} \n\tcatch ( final PersistenceException e ) { \n\t\tlogger . log ( Level . INFO , NUM00 , e ) ; \n\t\treturnJson500 ( requestAndResponse , servletText . errorInternalDatabase ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "private void _schedule ( Activity a , long startTime ) { \n\tif ( a . isScheduled ( ) ) { \n\t\ttry $F5795 ( notifyAll ) $F3957 $F665 } \n\ta . setStartTime ( startTime ) ; \n\tsynchronized ( this ) { \n\t\tm_activities . add ( a ) ; \n\t\ta . setScheduled ( _BOOL ) ; \n\t\tif ( startTime < m_nextTime ) $F21847 ( m_nextTime , startTime , notify ) } \n\t} \n"}, {"code": "void unregisterCallback ( BluetoothCallback callback ) $F23075 ( mCallbacks , callback ) "}, {"code": "public void testHashCodeUnequal $F72 { \n\tString a = NUM00 ; \n\tint aScale = NUM00 ; \n\tString b = NUM00 ; \n\tint bScale = - NUM00 ; \n\t$F1918 ( aNumber , a , aScale ) $F1918 ( bNumber , b , bScale ) assertTrue ( NUM00 , aNumber . hashCode ( ) != bNumber . hashCode ( ) ) ; \n\t} \n"}, {"code": "$F120210 ( maximumPullScroll , getMaximumPullScroll , pLeft , getPaddingLeft , pTop , getPaddingTop , pRight , getPaddingRight , pBottom , getPaddingBottom , getPullToRefreshScrollDirection , HORIZONTAL , mMode , mHeaderLayout , mFooterLayout , VERTICAL , DEBUG , Log , LOG_TAG , String , setPadding ) "}, {"code": "$F1219 static String escapeSqlString ( String string ) $F8480 ( string ) "}, {"code": "public static $F806 toArray ( String arg ) { \n\tif ( arg == null ) { \n\t\treturn $F382 ; \n\t\t} \n\t$F17727 ( tok , arg ) $F806 array = new String $F49889 ( tok ) ; \n\tint i = NUM00 ; \n\twhile $F14498 ( tok ) { \n\t\tarray [ i ] = tok . nextToken ( ) ; \n\t\ti ++ ; \n\t\t} \n\treturn ( array ) ; \n\t} \n"}, {"code": "private void appendUploadedEntryToLog ( String id ) throws IOException { \n\tFileWriter writer = new FileWriter ( mLogfile , _BOOL ) ; \n\t$F83 ( sb ) sb . append ( $F165576 ( System ) ) ; \n\t$F84 ( sb ) sb . append ( id ) ; \n\t$F84 ( sb ) try { \n\t\t$F9826 ( writer , sb ) } \n\t$F3229 ( writer ) } \n"}, {"code": "private void renderLeafNode ( final CNodeNode treeNode ) { \n\tfinal NaviNode graphNode = treeNode . getNode ( ) ; \n\tif ( graphNode . isSelected ( ) && graphNode . isVisible ( ) ) { \n\t\tsetForeground ( SELECTED_FONT_COLOR ) ; \n\t\t} \n\telse if ( $F181253 ( graphNode ) ) { \n\t\tsetForeground ( INVISIBLE_FONT_COLOR ) ; \n\t\t} \n\tsetToolTipText ( buildToolTip ( graphNode ) ) ; \n\t} \n"}, {"code": "public static final void writeValueXml ( Object v , String name , XmlSerializer out ) throws $F18821 { \n\tString typeStr ; \n\tif ( v == null ) { \n\t\t$F18823 ( out ) $F18831 ( name , out ) $F18825 ( out ) $F665 } \n\telse if ( v instanceof String ) $F154622 ( out , name , v ) else if ( v instanceof Integer ) { \n\t\ttypeStr = NUM00 ; \n\t\t} \n\telse if ( v instanceof Long ) { \n\t\ttypeStr = NUM00 ; \n\t\t} \n\telse if ( v instanceof Float ) { \n\t\ttypeStr = NUM00 ; \n\t\t} \n\telse if ( v instanceof Double ) { \n\t\ttypeStr = NUM00 ; \n\t\t} \n\telse if ( v instanceof Boolean ) { \n\t\ttypeStr = NUM00 ; \n\t\t} \n\telse if $F2456 ( v ) { \n\t\twriteByteArrayXml ( $F2457 ( v ) , name , out ) ; \n\t\t$F665 } \n\telse if $F25705 ( v ) { \n\t\twriteIntArrayXml ( $F25706 ( v ) , name , out ) ; \n\t\t$F665 } \n\telse if ( v instanceof Map ) { \n\t\twriteMapXml ( ( Map ) v , name , out ) ; \n\t\t$F665 } \n\telse if ( v instanceof List ) { \n\t\twriteListXml ( ( List ) v , name , out ) ; \n\t\t$F665 } \n\telse if ( v instanceof Set ) { \n\t\twriteSetXml ( ( Set ) v , name , out ) ; \n\t\t$F665 } \n\telse if ( v instanceof CharSequence ) $F154622 ( out , name , v ) else $F1666 ( v ) out . startTag ( null , typeStr ) ; \n\t$F18831 ( name , out ) out . attribute ( null , NUM00 , v . toString ( ) ) ; \n\tout . endTag ( null , typeStr ) ; \n\t} \n"}, {"code": "public Sector union ( double latitude , double longitude ) { \n\tif ( this . minLatitude < this . maxLatitude && this . minLongitude < this . maxLongitude ) { \n\t\tthis . maxLatitude = Math . max ( this . maxLatitude , latitude ) ; \n\t\tthis . minLatitude = Math . min ( this . minLatitude , latitude ) ; \n\t\tthis . maxLongitude = Math . max ( this . maxLongitude , longitude ) ; \n\t\tthis . minLongitude = Math . min ( this . minLongitude , longitude ) ; \n\t\t} \n\telse if ( ! Double . isNaN ( this . minLatitude ) && ! Double . isNaN ( this . minLongitude ) ) { \n\t\tthis . maxLatitude = Math . max ( this . minLatitude , latitude ) ; \n\t\tthis . maxLongitude = Math . max ( this . minLongitude , longitude ) ; \n\t\tthis . minLatitude = Math . min ( this . minLatitude , latitude ) ; \n\t\tthis . minLongitude = Math . min ( this . minLongitude , longitude ) ; \n\t\t} \n\telse { \n\t\tthis . minLatitude = latitude ; \n\t\tthis . minLongitude = longitude ; \n\t\tthis . maxLatitude = Double . NaN ; \n\t\tthis . maxLongitude = Double . NaN ; \n\t\t} \n\treturn this ; \n\t} \n"}, {"code": "public DAuthorityKeyIdentifier ( JDialog parent , PublicKey authorityPublicKey , X500Name authorityCertName , BigInteger authorityCertSerialNumber ) { \n\tsuper ( parent ) ; \n\t$F15426 ( setTitle , res ) this . authorityPublicKey = authorityPublicKey ; \n\tinitComponents ( ) ; \n\tprepopulateWithAuthorityCertDetails ( authorityCertName , authorityCertSerialNumber ) ; \n\t} \n"}, {"code": "static void writeUTF ( OutputStream out , String str ) throws IOException { \n\tfor ( $F51284 ( i , len , str ) ) { \n\t\t$F8205 ( c , str , i ) if ( ( c >= NUM00 ) && ( c <= NUM00 ) ) $F4050 ( out , c ) else { \n\t\t\tif ( c > NUM00 ) { \n\t\t\t\tout . write ( NUM00 | $F11787 ( c ) ) ; \n\t\t\t\tout . write ( NUM00 | $F11787 ( c ) ) ; \n\t\t\t\tout . write ( NUM00 | $F11787 ( c ) ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tout . write ( NUM00 | $F11787 ( c ) ) ; \n\t\t\t\tout . write ( NUM00 | $F11787 ( c ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void test_getIterator $F72 { \n\tString test = NUM00 ; \n\ttry { \n\t\tAttributedString attrString = new AttributedString ( test ) ; \n\t\tAttributedCharacterIterator it = attrString . getIterator ( ) ; \n\t\tassertEquals ( NUM00 , it . first ( ) , test . charAt ( NUM00 ) ) ; \n\t\t} \n\t$F53525 ( fail , e ) } \n"}, {"code": "private void handleNormalUnassociated $F72 { \n\tint szSsaRegs = ssaMeth . getRegCount ( ) ; \n\tfor ( $F119 ( ssaReg , szSsaRegs ) ) { \n\t\tif $F73204 ( ssaRegsMapped , ssaReg ) $F1448 RegisterSpec ssaSpec = getDefinitionSpecForSsaReg ( ssaReg ) ; \n\t\t$F45557 ( ssaSpec ) int category = ssaSpec . getCategory ( ) ; \n\t\tint ropReg = findNextUnreservedRopReg ( paramRangeEnd , category ) ; \n\t\twhile ( ! canMapReg ( ssaSpec , ropReg ) ) { \n\t\t\tropReg = findNextUnreservedRopReg ( ropReg + NUM00 , category ) ; \n\t\t\t} \n\t\taddMapping ( ssaSpec , ropReg ) ; \n\t\t} \n\t} \n"}, {"code": "public void addSeriesRenderer ( int index , SimpleSeriesRenderer renderer ) $F42308 ( mRenderers , index , renderer ) "}, {"code": "$F108235 ( f , first , n , item , last , count , notFull ) "}, {"code": "public void createUnderlying $F72 { \n\tif ( Platform . isFxApplicationThread ( ) ) { \n\t\toptions . createUnderlying ( ) ; \n\t\tthis . marker = new com . lynden . gmapsfx . javascript . object . Marker ( options . convert ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "private void onActionUp ( MotionEvent event ) { \n\tif ( isDown ) { \n\t\tthis . startX = NUM00 ; \n\t\tthis . startY = NUM00 ; \n\t\tthis . isDown = _BOOL ; \n\t\t} \n\t} \n"}, {"code": "private Rectangle2D createAlignedRectangle2D ( Size2D dimensions , Rectangle2D frame , HorizontalAlignment hAlign , VerticalAlignment vAlign ) { \n\tdouble x = Double . NaN ; \n\tdouble y = Double . NaN ; \n\tif ( hAlign == HorizontalAlignment . LEFT ) { \n\t\t$F25145 ( x , frame ) } \n\telse if ( hAlign == HorizontalAlignment . CENTER ) { \n\t\tx = frame . getCenterX ( ) - $F511692 ( dimensions ) ; \n\t\t} \n\telse if ( hAlign == HorizontalAlignment . RIGHT ) { \n\t\tx = frame . getMaxX ( ) - dimensions . width ; \n\t\t} \n\tif ( vAlign == VerticalAlignment . TOP ) { \n\t\t$F130222 ( y , frame ) } \n\telse if ( vAlign == VerticalAlignment . CENTER ) { \n\t\ty = frame . getCenterY ( ) - $F130196 ( dimensions ) ; \n\t\t} \n\telse if ( vAlign == VerticalAlignment . BOTTOM ) { \n\t\ty = frame . getMaxY ( ) - dimensions . height ; \n\t\t} \n\treturn new $F1634 ( x , y , dimensions . width , dimensions . height ) ; \n\t} \n"}, {"code": "public MailAddress ( InternetAddress address ) throws AddressException { \n\tthis ( address . getAddress ( ) ) ; \n\t} \n"}, {"code": "public $F3789 confusionMatrix $F72 { \n\t$F3789 newMatrix = new double [ m_ConfusionMatrix . length ] [ NUM00 ] ; \n\tfor ( $F1139 ( i , m_ConfusionMatrix ) ) { \n\t\tnewMatrix [ i ] = new double [ m_ConfusionMatrix [ i ] . length ] ; \n\t\tSystem . arraycopy ( m_ConfusionMatrix [ i ] , NUM00 , newMatrix [ i ] , NUM00 , m_ConfusionMatrix [ i ] . length ) ; \n\t\t} \n\treturn newMatrix ; \n\t} \n"}, {"code": "public void print ( int x ) $F7523 ( out , x ) "}, {"code": "public static void beginStartingService ( Context context , Intent intent ) { \n\tsynchronized ( mStartingServiceSync ) { \n\t\tif ( mStartingService == null ) { \n\t\t\tPowerManager pm = ( PowerManager ) context . getSystemService ( Context . POWER_SERVICE ) ; \n\t\t\tmStartingService = pm . newWakeLock ( PowerManager . PARTIAL_WAKE_LOCK , NUM00 ) ; \n\t\t\tmStartingService . setReferenceCounted ( _BOOL ) ; \n\t\t\t} \n\t\t$F90610 ( mStartingService ) context . startService ( intent ) ; \n\t\t} \n\t} \n"}, {"code": "public ScannerException ( ErrorMessages message , int line ) { \n\tthis ( null , ErrorMessages . get ( message ) , message , line , - NUM00 ) ; \n\t} \n"}, {"code": "$F11730 ( logPrefix , request , exception , retryPolicy , oldTimeout , String , e ) "}, {"code": "private void informUponSimilarName ( final StringBuffer messageBuffer , final String name , final String candidate ) { \n\t$F7224 ( name , candidate ) if ( name . regionMatches ( _BOOL , NUM00 , candidate , NUM00 , PKG_LEN + NUM00 ) ) $F7227 ( messageBuffer , candidate ) } \n"}, {"code": "public synchronized void co_exit ( int thisCoroutine ) { \n\tm_activeIDs . clear ( thisCoroutine ) ; \n\tm_nextCoroutine = NOBODY ; \n\tnotify ( ) ; \n\t} \n"}, {"code": "private int findSchemeSeparator $F72 { \n\treturn cachedSsi == NOT_CALCULATED ? cachedSsi = uriString . indexOf ( NUM00 ) : cachedSsi ; \n\t} \n"}, {"code": "$F1 public boolean test ( Object receiver , String property , $F131 args , Object expectedValue ) { \n\tif $F1238 ( IS_ANGULAR_CLI_PROJECT_PROPERTY , property ) $F4915 ( testIsAngularCLIProject , receiver ) return _BOOL ; \n\t} \n"}, {"code": "public void refresh $F72 { \n\tlabel . setText ( String . valueOf ( MathHelper . round ( val , NUM00 ) ) ) ; \n\tif ( val == min ) minus . setEnabled ( _BOOL ) ; \n\telse minus . setEnabled ( _BOOL ) ; \n\tif ( val == max ) plus . setEnabled ( _BOOL ) ; \n\telse plus . setEnabled ( _BOOL ) ; \n\tif ( cb != null ) cb . callback ( val ) ; \n\t$F8798 ( plus ) $F8798 ( minus ) if ( progress != null ) { \n\t\tprogress . setValue ( val / max ) ; \n\t\t} \n\t} \n"}, {"code": "public $F806 readAllLines $F72 { \n\t$F8728 ( lines ) while ( hasNextLine ( ) ) $F33452 ( lines , readLine ) $F16105 ( lines ) } \n"}, {"code": "public void removeCallback ( Callback callback ) $F106 ( mCallbacks , callback ) "}, {"code": "public void error ( SourceLocator srcLctr , String msg ) throws TransformerException { \n\terror ( srcLctr , null , null , msg , null ) ; \n\t} \n"}, {"code": "private boolean expectVlvResponse $F72 { \n\tBoolean expected = Boolean . FALSE ; \n\ttry { \n\t\texpected = ( Boolean ) get ( EXPECT_VLV_RESPONSE ) ; \n\t\t} \n\t$F3957 return expected == null ? _BOOL : expected . booleanValue ( ) ; \n\t} \n"}, {"code": "public void layoutContainer ( final Container parent ) { \n\tcheckLayout ( getModel ( ) ) ; \n\tfinal Insets insets = parent . getInsets ( ) ; \n\tfinal Dimension size = parent . getSize ( ) ; \n\tfinal int width = size . width - $F151527 ( insets ) ; \n\tfinal int height = size . height - $F151531 ( insets ) ; \n\tfinal Rectangle bounds = new Rectangle ( insets . left , insets . top , width , height ) ; \n\tlayout1 ( getModel ( ) , bounds ) ; \n\tlayout2 ( getModel ( ) , bounds ) ; \n\t} \n"}, {"code": "private String readUntil ( $F1469 delimiter , boolean returnText ) throws $F139192 { \n\tint start = position ; \n\tStringBuilder result = null ; \n\tif ( returnText && text != null ) { \n\t\t$F6932 ( result ) result . append ( text ) ; \n\t\t} \n\tsearch : while ( _BOOL ) { \n\t\tif ( position + delimiter . length > limit ) { \n\t\t\tif ( start < position && returnText ) { \n\t\t\t\t$F39896 ( result ) $F14090 ( result , buffer , start , position ) } \n\t\t\tif ( ! fillBuffer ( delimiter . length ) ) { \n\t\t\t\tcheckRelaxed ( UNEXPECTED_EOF ) ; \n\t\t\t\ttype = COMMENT ; \n\t\t\t\t$F1274 } \n\t\t\tstart = position ; \n\t\t\t} \n\t\tfor ( $F1139 ( i , delimiter ) ) { \n\t\t\tif $F219258 ( buffer , position , i , delimiter ) { \n\t\t\t\tposition ++ ; \n\t\t\t\tcontinue search ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F597 } \n\tint end = position ; \n\tposition += delimiter . length ; \n\tif ( ! returnText ) $F1337 else $F139251 ( result , stringPool , buffer , start , end ) } \n"}, {"code": "$F1 public Invocation . Builder accept ( String ... mediaTypes ) { \n\tclientRequestContext . setAcceptResponseTypesStr ( Arrays . asList ( mediaTypes ) ) ; \n\treturn this ; \n\t} \n"}, {"code": "public StreamConsumer ( InputStream stream ) { \n\t$F189568 ( in , stream ) $F2346 ( thread ) } \n"}, {"code": "public static String subString $F36827 ( string , beginIndex , length ) { \n\t$F1338 ( string ) final int endIndex = beginIndex + length ; \n\tif $F11984 ( beginIndex , string ) { \n\t\treturn EMPTY ; \n\t\t} \n\tif $F9605 ( endIndex , string ) { \n\t\treturn $F83851 ( string , beginIndex ) ; \n\t\t} \n\t$F6669 ( string , beginIndex , endIndex ) } \n"}, {"code": "private static SocketImpl createSocketImpl $F72 { \n\ttry $F171631 ( socketImplCtor ) catch ( InstantiationException x ) $F27253 ( x ) $F180169 ( x ) catch ( InvocationTargetException x ) $F27253 ( x ) } \n"}, {"code": "$F1 public String encode $F72 { \n\treturn $F606 ( name ) ; \n\t} \n"}, {"code": "private $F97251 ( d , imageView , getImageView , viewWidth , getImageViewWidth , viewHeight , getImageViewHeight , drawableWidth , drawableHeight , mBaseMatrix , widthScale , heightScale , mScaleType , ScaleType , scale , Math , mTempSrc , mTempDst , mBaseRotation , FIT_CENTER , ScaleToFit , FIT_START , FIT_END , FIT_XY , resetMatrix ) "}, {"code": "void cancelAll $F72 { \n\tsynchronized ( currentRequests ) { \n\t\tfor ( DownloadRequest request : currentRequests ) $F65149 ( request ) } \n\t$F725 ( currentRequests ) } \n"}, {"code": "protected void addDocs $F68141 ( index , type , number ) throws JsonProcessingException { \n\t$F44214 ( mapper ) for ( $F119 ( i , number ) ) { \n\t\tindex ( index , type , NUM00 + i , mapper . writeValueAsString ( TestDocument . createSimpleDoc ( i ) ) ) ; \n\t\t} \n\tflush ( ) ; \n\t} \n"}, {"code": "public void testPowNegativeNumToZeroExp $F72 { \n\t$F12762 int aSign = - NUM00 ; \n\tint exp = NUM00 ; \n\t$F15143 $F3023 ( aNumber , aSign , aBytes ) $F12767 ( result , aNumber , exp ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) } \n"}, {"code": "public final $F69963 doOnError ( Consumer < $F3204 > onError ) { \n\t$F10578 ( Objects , onError ) return doOnSignal ( this , null , null , onError , null , null , null , null , null ) ; \n\t} \n"}, {"code": "public void simulateMethod $F5498 ( method , thisVar , returnVar ) { \n\t$F5500 ( subSignature , method ) if $F3057 ( subSignature ) $F5501 ( java_lang_System_arraycopy , method , thisVar , returnVar , params ) else if $F3057 ( subSignature ) $F5501 ( java_lang_System_setIn0 , method , thisVar , returnVar , params ) else if $F3057 ( subSignature ) $F5501 ( java_lang_System_setOut0 , method , thisVar , returnVar , params ) else $F166632 ( subSignature , java_lang_System_setErr0 , method , thisVar , returnVar , params , java_lang_System_initProperties , java_lang_System_mapLibraryName , java_lang_System_getCallerClass , defaultMethod ) } \n"}, {"code": "protected void loadValue ( String sValue ) { \n\ttry { \n\t\tvalue = Long . parseLong ( sValue . trim ( ) ) ; \n\t\t} \n\tcatch ( NumberFormatException nfe ) $F5795 ( revertToDefault ) } \n"}, {"code": "public void checkBounds $F72 { \n\t$F84694 ( tfLowBound , tsClipping ) $F84694 ( tfUpBound , tsClipping ) } \n"}, {"code": "public void remove ( int index ) $F27228 ( mCategories , index , mTitles , mValues ) "}, {"code": "public static boolean deleteFilesAndDirsRecursive ( final File directory ) { \n\tif ( directory == null || $F4925 ( directory ) ) $F277465 ( Log , _BOOL ) return deleteFilesAndDirs ( directory ) ; \n\t} \n"}, {"code": "void render ( GraphicsContext g , Point2D viewportOrigin ) { \n\tg . setGlobalAlpha ( life ) ; \n\tg . setGlobalBlendMode ( blendMode ) ; \n\tif ( image != null ) { \n\t\t$F72208 ( g ) g . translate ( x - viewportOrigin . getX ( ) , y - viewportOrigin . getY ( ) ) ; \n\t\tg . scale ( radiusX * NUM00 / image . getWidth ( ) , radiusY * NUM00 / image . getHeight ( ) ) ; \n\t\tg . drawImage ( image , NUM00 , NUM00 ) ; \n\t\t$F72213 ( g ) } \n\telse { \n\t\tg . setFill ( color ) ; \n\t\tg . fillOval ( x - viewportOrigin . getX ( ) , y - viewportOrigin . getY ( ) , radiusX * NUM00 , radiusY * NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "public int position $F72 { \n\treturn buff . position ( ) ; \n\t} \n"}, {"code": "$F1 public void write $F36827 ( str , off , len ) throws IOException { \n\tfinal int off_plus_len = off + len ; \n\tfor ( int i = off ; \n\ti < off_plus_len ; \n\t) { \n\t\t$F52837 ( c , str , i ) if ( c < NUM00 ) { \n\t\t\t$F8214 ( _bytes , _index , c ) if ( ++ _index >= _bytes . length ) $F5795 ( flushBuffer ) } \n\t\telse { \n\t\t\twrite ( c ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void writeToNBT ( final NBTTagCompound nbt ) { \n\tfinal NBTTagList modulesNbt = new NBTTagList $F72 ; \n\tfor ( final Module module : modules ) { \n\t\tfinal NBTTagCompound moduleNbt = new NBTTagCompound $F72 ; \n\t\tif ( module != null ) { \n\t\t\tmodule . writeToNBT ( moduleNbt ) ; \n\t\t\t} \n\t\tmodulesNbt . appendTag ( moduleNbt ) ; \n\t\t} \n\tnbt . setTag ( TAG_MODULES , modulesNbt ) ; \n\tlock . ifPresent ( null ) ; \n\tlock . ifPresent ( null ) ; \n\t} \n"}, {"code": "void sendBufferIfNotEmpty $F72 throws IOException { \n\tif ( buf != null && buf . position ( ) > NUM00 ) sendBuffer ( ) ; \n\t} \n"}, {"code": "public void onSharedPreferenceChanged ( SharedPreferences sharedPreferences , String key ) { \n\tif ( key . equals ( getString ( R . string . pref_key_notification ) ) ) { \n\t\tsetNotification ( sharedPreferences . getBoolean ( key , _BOOL ) ) ; \n\t\t} \n\telse if ( key . equals ( getString ( R . string . pref_key_gmail_signature ) ) ) { \n\t\tsetGmailSignaturePrefDescription ( sharedPreferences . getBoolean ( key , _BOOL ) ) ; \n\t\t} \n\telse if ( key . equals ( getString ( R . string . pref_key_sms_signature ) ) ) { \n\t\tsetSmsSignaturePrefDescription ( sharedPreferences . getBoolean ( key , _BOOL ) ) ; \n\t\t} \n\t} \n"}, {"code": "public void initPortParameters ( SerialPort port ) { \n\tinitialized = _BOOL ; \n\tif ( port != null ) { \n\t\tcbPort . setSelectedItem ( port . getName ( ) ) ; \n\t\tcbBaudrate . setSelectedItem ( String . valueOf ( port . getBaudRate ( ) ) ) ; \n\t\tcbParity . setSelectedIndex ( port . getParity ( ) ) ; \n\t\tcbDataBits . setSelectedIndex ( port . getDataBits ( ) - NUM00 ) ; \n\t\tcbStopBits . setSelectedIndex ( port . getStopBits ( ) - NUM00 ) ; \n\t\tint prt = port . getFlowControlMode ( ) ; \n\t\tcbProtocolRx . setSelectedIndex ( ( prt & SerialPort . FLOWCONTROL_RTSCTS_IN ) != NUM00 ? NUM00 : ( prt & SerialPort . FLOWCONTROL_XONXOFF_IN ) != NUM00 ? NUM00 : NUM00 ) ; \n\t\tcbProtocolTx . setSelectedIndex ( ( prt & SerialPort . FLOWCONTROL_RTSCTS_OUT ) != NUM00 ? NUM00 : ( prt & SerialPort . FLOWCONTROL_XONXOFF_OUT ) != NUM00 ? NUM00 : NUM00 ) ; \n\t\tbtnDSR . setSelected ( port . isDSR ( ) ) ; \n\t\tbtnCTS . setSelected ( port . isCTS ( ) ) ; \n\t\tbtnCD . setSelected ( port . isCD ( ) ) ; \n\t\tbtnDTR . setSelected ( port . isDTR ( ) ) ; \n\t\tbtnRTS . setSelected ( port . isRTS ( ) ) ; \n\t\t} \n\tinitialized = _BOOL ; \n\t} \n"}, {"code": "public void addPreloadEntry ( GridCacheEntryInfo info ) { \n\t$F21432 ( preloadEntries ) preloadEntries . add ( info ) ; \n\t} \n"}, {"code": "private void putOffUniform ( final Player player ) { \n\tif ( UNIFORM . isPartOf ( player . getOutfit ( ) ) ) { \n\t\tplayer . returnToOriginalOutfit ( ) ; \n\t\t} \n\t} \n"}, {"code": "public static void moveFile $F46288 ( srcFile , destFile ) throws IOException { \n\t$F896 ( srcFile ) $F896 ( destFile ) $F130782 ( srcFile ) $F130783 ( srcFile ) if $F3428 ( destFile ) $F5244 ( destFile ) $F130783 ( destFile ) final boolean rename = srcFile . renameTo ( destFile ) ; \n\tif ( ! rename ) { \n\t\tcopyFile ( srcFile , destFile ) ; \n\t\tif $F7119 ( srcFile ) { \n\t\t\tParseFileUtils . deleteQuietly ( destFile ) ; \n\t\t\t$F42873 ( srcFile , destFile ) } \n\t\t} \n\t} \n"}, {"code": "public synchronized ScanManagerConfig readFromFile $F72 throws IOException { \n\t$F15885 ( f , file ) if $F1906 ( f ) $F3495 ( file ) if $F70404 ( f ) $F3495 ( file ) try $F4915 ( read , f ) catch ( JAXBException x ) { \n\t\tfinal IOException io = new IOException ( NUM00 + file + NUM00 + x , x ) ; \n\t\tthrow io ; \n\t\t} \n\t} \n"}, {"code": "public void delete ( String name ) throws IOException { \n\t$F219378 ( name , ISSUER , names ) encodeThis ( ) ; \n\t} \n"}, {"code": "$F41720 ( value , absMin , absMax , absValue , Math ) "}, {"code": "public CompileClassNotFound ( Exception cause ) { \n\t$F3270 ( super , cause ) _cause = cause ; \n\t} \n"}, {"code": "public SymGraph ( Motif motif ) { \n\tthis . motif = motif ; \n\t$F87077 ( colorsToRecheck ) ; \n\ttopMotifnodeToColor = new int [ motif . getNrMotifNodes ( ) ] ; \n\tcolorToBottomMotifnode = new HashMap < Integer , $F3807 > $F72 ; \n\tcolorToTopMotifnode = new HashMap < Integer , $F3807 > $F72 ; \n\t$F15277 ( list1 ) $F15277 ( list2 ) for ( $F1139 ( i , topMotifnodeToColor ) ) $F437553 ( list1 , i , list2 ) $F130813 ( colorToBottomMotifnode , list2 ) $F130813 ( colorToTopMotifnode , list1 ) } \n"}, {"code": "public static boolean anyDimensionHasItems ( Collection < DimensionalObject > dimensions ) { \n\t$F34929 ( dimensions , _BOOL ) for ( DimensionalObject dim : dimensions ) { \n\t\tif ( dim . hasItems ( ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "private void openCurrentAndMaybeNext ( final boolean openNext ) { \n\t$F973 ( LOG ) synchronized ( this ) { \n\t\t$F973 ( LOG ) closeCursor ( ) ; \n\t\tif ( mPlayListLen == NUM00 || mPlayList == null ) $F932 stop ( _BOOL ) ; \n\t\tmPlayPos = Math . min ( mPlayPos , mPlayList . length - NUM00 ) ; \n\t\tupdateCursor ( mPlayList [ mPlayPos ] ) ; \n\t\twhile ( _BOOL ) { \n\t\t\tif ( $F31240 ( mCursor ) && openFile ( MediaStore . Audio . Media . EXTERNAL_CONTENT_URI + NUM00 + mCursor . getLong ( IDCOLIDX ) ) ) $F5153 closeCursor ( ) ; \n\t\t\tif ( mOpenFailedCounter ++ < NUM00 && mPlayListLen > NUM00 ) { \n\t\t\t\tfinal int pos = getNextPosition ( _BOOL ) ; \n\t\t\t\tif ( scheduleShutdownAndNotifyPlayStateChange ( pos ) ) $F665 mPlayPos = pos ; \n\t\t\t\tstop ( _BOOL ) ; \n\t\t\t\tmPlayPos = pos ; \n\t\t\t\tupdateCursor ( mPlayList [ mPlayPos ] ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tmOpenFailedCounter = NUM00 ; \n\t\t\t\t$F10910 ( LOG ) scheduleDelayedShutdown ( ) ; \n\t\t\t\tif ( mIsSupposedToBePlaying ) { \n\t\t\t\t\tmIsSupposedToBePlaying = _BOOL ; \n\t\t\t\t\tnotifyChange ( PLAYSTATE_CHANGED ) ; \n\t\t\t\t\t} \n\t\t\t\t$F665 } \n\t\t\t} \n\t\t$F8801 ( openNext , setNextTrack ) } \n\t} \n"}, {"code": "protected OMNode createDTD $F72 throws OMException { \n\tthrow new OMException $F580 ; \n\t} \n"}, {"code": "private IVGenerator $F72 $F845 "}, {"code": "private void createOverviewPage $F72 { \n\tRemapOverview overview = new RemapOverview ( migrationTask , getContainer ( ) ) ; \n\tint index = addPage ( overview . getControl ( ) ) ; \n\tsetPageText ( index , NUM00 ) ; \n\ttaskListeners . add ( overview ) ; \n\t} \n"}, {"code": "public void warning2 ( final String filename , int ln , int col , Object msg , String source ) { \n\twarning ( filename , ln , col , msg . toString ( ) , source ) ; \n\t} \n"}, {"code": "public SOAPConnection openSOAPConnection $F72 throws SOAPException { \n\treturn soapConnectionFactory . createConnection ( ) ; \n\t} \n"}, {"code": "public static < U , V > String printMap ( final Map < U , V > map , final Converter $F30939 keyConverter , final Converter $F2193 valueConverter ) { \n\t$F64605 ( sb ) String separator = NUM00 ; \n\tfor ( final Entry < U , V > entry : map . entrySet ( ) ) { \n\t\tsb . append ( separator ) ; \n\t\tsb . append ( keyConverter . convert ( entry . getKey ( ) ) ) ; \n\t\t$F84 ( sb ) sb . append ( valueConverter . convert ( entry . getValue ( ) ) ) ; \n\t\tseparator = NUM00 ; \n\t\t} \n\t$F84 ( sb ) $F92 ( sb ) } \n"}, {"code": "public void findAndInit ( Object someObj ) { \n\tif ( someObj instanceof com . bbn . openmap . MapBean ) { \n\t\t$F36253 ( Debug ) setSourceMap ( ( MapBean ) someObj ) ; \n\t\t} \n\t} \n"}, {"code": "public static double cdf $F7635 ( x , mu , shape ) { \n\tif $F102905 ( x ) $F1083 final double v0 = x / mu ; \n\tfinal double v1 = Math . sqrt ( shape / x ) ; \n\tif ( v1 == NUM00 ) { \n\t\treturn v0 > NUM00 ? NUM00 : NUM00 ; \n\t\t} \n\tdouble c1 = NormalDistribution . standardNormalCDF ( v1 * ( v0 - NUM00 ) ) ; \n\tdouble c2 = NormalDistribution . standardNormalCDF ( - v1 * ( v0 + NUM00 ) ) ; \n\treturn ( c2 > NUM00 ) ? c1 + Math . exp ( NUM00 * shape / mu ) * c2 : c1 ; \n\t} \n"}, {"code": "public void handleRequest ( RequestContext rc ) throws CLIException { \n\tsuper . handleRequest ( rc ) ; \n\tldapLogin ( ) ; \n\tSSOToken adminSSOToken = getAdminSSOToken ( ) ; \n\tString serviceName = getStringOptionValue ( IArgument . SERVICE_NAME ) ; \n\tString interfaceName = getStringOptionValue ( ARGUMENT_INTERFACE_NAME ) ; \n\tString pluginName = getStringOptionValue ( ARGUMENT_PLUGIN_NAME ) ; \n\tString i18nKey = getStringOptionValue ( ARGUMENT_I18N_KEY ) ; \n\tString i18nName = getStringOptionValue ( ARGUMENT_I18N_NAME ) ; \n\tString className = getStringOptionValue ( ARGUMENT_CLASS_NAME ) ; \n\tServiceManager sm = null ; \n\ttry { \n\t\tsm = new ServiceManager ( adminSSOToken ) ; \n\t\t} \n\tcatch ( SMSException smse ) { \n\t\t$F145379 ( smse , ExitCodes ) } \n\tcatch ( SSOException ssoe ) { \n\t\t$F145379 ( ssoe , ExitCodes ) } \n\tIOutput outputWriter = getOutputWriter ( ) ; \n\ttry { \n\t\t$F806 params = { \n\t\t\tserviceName , interfaceName , pluginName , i18nKey , i18nName , className } \n\t\t; \n\t\t$F28013 ( writeLog , LogWriter , Level , params ) Document pluginDoc = createPluginSchemaXML ( serviceName , interfaceName , pluginName , i18nKey , i18nName , className ) ; \n\t\tif ( pluginDoc != null ) { \n\t\t\tsm . addPluginSchema ( pluginDoc ) ; \n\t\t\t$F105633 ( params2 , serviceName , pluginName ) $F28013 ( writeLog , LogWriter , Level , params2 ) outputWriter . printlnMessage ( MessageFormat . format ( getResourceString ( NUM00 ) , $F2486 ( params ) ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\t$F806 args = { \n\t\t\t\tserviceName , pluginName , NUM00 } \n\t\t\t; \n\t\t\tdebugError ( NUM00 ) ; \n\t\t\t$F28035 ( writeLog , LogWriter , Level , args ) throw new CLIException ( NUM00 , ExitCodes . REQUEST_CANNOT_BE_PROCESSED ) ; \n\t\t\t} \n\t\t} \n\tcatch ( SSOException ssoe ) { \n\t\t$F806 args = { \n\t\t\tserviceName , pluginName , ssoe . getMessage ( ) } \n\t\t; \n\t\tdebugError ( NUM00 , ssoe ) ; \n\t\t$F28035 ( writeLog , LogWriter , Level , args ) outputWriter . printlnMessage ( MessageFormat . format ( getResourceString ( NUM00 ) , $F2486 ( args ) ) ) ; \n\t\t$F145379 ( ssoe , ExitCodes ) } \n\tcatch ( SMSException smse ) { \n\t\t$F806 args = { \n\t\t\tserviceName , pluginName , smse . getMessage ( ) } \n\t\t; \n\t\tdebugError ( NUM00 , smse ) ; \n\t\t$F28035 ( writeLog , LogWriter , Level , args ) outputWriter . printlnMessage ( MessageFormat . format ( getResourceString ( NUM00 ) , $F2486 ( args ) ) ) ; \n\t\t$F145379 ( smse , ExitCodes ) } \n\t} \n"}, {"code": "protected void bflash $F72 throws SAXException { \n\tif ( mBuffIdx >= NUM00 ) { \n\t\tmHandCont . characters ( mBuff , NUM00 , ( mBuffIdx + NUM00 ) ) ; \n\t\tmBuffIdx = - NUM00 ; \n\t\t} \n\t} \n"}, {"code": "protected Mac ( MacSpi macSpi , Provider provider , String algorithm ) { \n\tthis . spi = macSpi ; \n\tthis . provider = provider ; \n\tthis . algorithm = algorithm ; \n\tserviceIterator = null ; \n\tlock = null ; \n\t} \n"}, {"code": "public static String pathToString $F8306 ( dim , path ) { \n\t$F806 fullPath = new String [ NUM00 + path . length ] ; \n\tfullPath [ NUM00 ] = dim ; \n\t$F7057 ( System , path , fullPath ) $F135820 ( pathToString , fullPath ) } \n"}, {"code": "public static boolean isValidIfd ( int ifdId ) { \n\treturn ifdId == IfdId . TYPE_IFD_0 || ifdId == IfdId . TYPE_IFD_1 || ifdId == IfdId . TYPE_IFD_EXIF || ifdId == IfdId . TYPE_IFD_INTEROPERABILITY || ifdId == IfdId . TYPE_IFD_GPS ; \n\t} \n"}, {"code": "public static CdcSession createCdcSessionViaDomainAuth $F1947 ( serverName , userName , userPassword ) { \n\t$F20313 ( serverName ) $F20313 ( userName ) return new CdcSession ( serverName , userName , userPassword ) ; \n\t} \n"}, {"code": "protected static Dfp expInternal ( final Dfp a ) { \n\tDfp y = a . getOne ( ) ; \n\tDfp x = a . getOne ( ) ; \n\tDfp fact = a . getOne ( ) ; \n\tDfp py = new Dfp ( y ) ; \n\tfor ( $F6268 ( i ) ) { \n\t\tx = x . multiply ( a ) ; \n\t\tfact = fact . divide ( i ) ; \n\t\ty = y . add ( x . multiply ( fact ) ) ; \n\t\tif $F1238 ( y , py ) $F5153 py = new Dfp ( y ) ; \n\t\t} \n\treturn y ; \n\t} \n"}, {"code": "public URLConnection openConnection $F72 throws IOException { \n\treturn streamHandler . openConnection ( this ) ; \n\t} \n"}, {"code": "public static $F99006 linesToArray $F39268 ( inLine ) { \n\t$F99006 $F204 ( framesEnTab ) ; \n\tfor ( $F2277 ( i , inLine ) ) { \n\t\tframesEnTab . add ( lineToArray ( inLine . get ( i ) ) ) ; \n\t\t} \n\treturn framesEnTab ; \n\t} \n"}, {"code": "$F1 public int LA ( int i ) { \n\tint la = super . LA ( i ) ; \n\treturn Character . toLowerCase ( la ) ; \n\t} \n"}, {"code": "public void deselect_all $F72 { \n\tArrays . fill ( sel_array , _BOOL ) ; \n\t} \n"}, {"code": "$F1 public boolean canTransferCriticals ( int loc ) { \n\treturn _BOOL ; \n\t} \n"}, {"code": "private void calculateSizes ( final Graphics g ) { \n\tm_rowHeight = getRowHeight ( g ) ; \n\tm_charHeight = getCharHeight ( g ) ; \n\tm_charWidth = getCharacterWidth ( g ) ; \n\t} \n"}, {"code": "public static Iterable < GatewayMetaState . IndexMetaWriteInfo > resolveStatesToBeWritten ( ImmutableSet $F4 previouslyWrittenIndices , $F2689 potentiallyUnwrittenIndices , MetaData previousMetaData , MetaData newMetaData ) { \n\tList < GatewayMetaState . IndexMetaWriteInfo > $F204 ( indicesToWrite ) ; \n\tfor ( String index : potentiallyUnwrittenIndices ) { \n\t\tIndexMetaData newIndexMetaData = newMetaData . index ( index ) ; \n\t\tIndexMetaData previousIndexMetaData = previousMetaData == null ? null : previousMetaData . index ( index ) ; \n\t\tString writeReason = null ; \n\t\tif ( previouslyWrittenIndices . contains ( index ) == _BOOL || previousIndexMetaData == null ) { \n\t\t\twriteReason = NUM00 ; \n\t\t\t} \n\t\telse if ( previousIndexMetaData . getVersion ( ) != newIndexMetaData . getVersion ( ) ) { \n\t\t\twriteReason = NUM00 + previousIndexMetaData . getVersion ( ) + NUM00 + newIndexMetaData . getVersion ( ) + NUM00 ; \n\t\t\t} \n\t\tif ( writeReason != null ) { \n\t\t\tindicesToWrite . add ( new GatewayMetaState . IndexMetaWriteInfo ( newIndexMetaData , previousIndexMetaData , writeReason ) ) ; \n\t\t\t} \n\t\t} \n\treturn indicesToWrite ; \n\t} \n"}, {"code": "protected double applyFunction ( double value ) { \n\tswitch ( m_operator ) { \n\t\t$F1262 return Math . log ( value ) ; \n\t\t$F1262 $F12286 ( Math , value ) $F1262 return Math . cos ( value ) ; \n\t\t$F1262 return Math . exp ( value ) ; \n\t\t$F1262 $F41531 ( Math , value ) $F1262 return Math . floor ( value ) ; \n\t\t$F1262 return Math . ceil ( value ) ; \n\t\t$F1262 return Math . rint ( value ) ; \n\t\t$F1262 return Math . tan ( value ) ; \n\t\t$F1262 return Math . sin ( value ) ; \n\t\t} \n\treturn Double . NaN ; \n\t} \n"}, {"code": "private Object _deserializeStruct ( Element elStruct ) throws ConverterException { \n\t$F9031 ( type , elStruct ) Struct struct = new StructImpl $F72 ; \n\t$F9040 ( list , elStruct ) $F19322 ( len , list ) for ( $F119 ( i , len ) ) { \n\t\t$F61359 ( node , list , i ) if ( node instanceof Element ) { \n\t\t\t$F6721 ( var , node ) Element value = getChildElement ( ( Element ) node ) ; \n\t\t\tif ( value != null ) { \n\t\t\t\tstruct . setEL ( var . getAttribute ( NUM00 ) , _deserialize ( value ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tif ( $F10470 ( struct ) && type != null && $F20 ( type ) ) $F2455 return struct ; \n\t} \n"}, {"code": "public RemoteEvent dequeue $F72 { \n\tUuid uuid = _readyEvents . poll ( ) ; \n\t$F1275 ( uuid ) SingleProducer producer = getProducer ( uuid ) ; \n\treturn producer . popNextReadyEvent ( ) ; \n\t} \n"}, {"code": "public TcpDiscoveryVmIpFinder $F72 $F845 "}, {"code": "public InvalidPropertiesFormatException ( String message ) { \n\tsuper ( message ) ; \n\t} \n"}, {"code": "public SubCommand ( IDefinition definition , ResourceBundle rb , String name , List mandatoryOptions , List optionalOptions , List optionAliases , String implClassName , boolean webSupport , String deprecationWarning ) throws CLIException { \n\tthis . definition = definition ; \n\tthis . name = name ; \n\tthis . rb = rb ; \n\tthis . implClassName = implClassName ; \n\tthis . webSupport = webSupport ; \n\tthis . deprecationWarning = deprecationWarning ; \n\t$F19850 ( shortOptions ) parseOptions ( mandatoryOptions , this . mandatoryOptions , shortOptions ) ; \n\tparseOptions ( optionalOptions , this . optionalOptions , shortOptions ) ; \n\tparseAliases ( optionAliases ) ; \n\t} \n"}, {"code": "public static boolean canAddClassInPackageOf $F60993 ( cls ) { \n\tfinal Package beanPackage = cls . getPackage ( ) ; \n\tif ( beanPackage != null ) { \n\t\tif ( beanPackage . isSealed ( ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t$F20605 ( pname , beanPackage ) if $F418 ( pname ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public static JsonToken deserialize ( final String jwt ) throws Exception { \n\tJsonTokenParser parser = new JsonTokenParser ( verifierProviders , new AbelanaTokenAudienceChecker ( BackendConstants . TOKEN_ISSUER ) ) ; \n\treturn parser . deserialize ( jwt ) ; \n\t} \n"}, {"code": "public void swapSuggestions ( final List < ? extends SearchSuggestion > newSearchSuggestions ) { \n\tCollections . reverse ( newSearchSuggestions ) ; \n\tswapSuggestions ( newSearchSuggestions , _BOOL ) ; \n\t} \n"}, {"code": "boolean shouldAnimateSearchProviderIcon ( SelectionType selectionType , boolean isShowing ) { \n\tif ( isShowing || ContextualSearchFieldTrial . areExtraSearchBarAnimationsDisabled ( ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( selectionType == SelectionType . TAP ) { \n\t\t$F14662 ( currentTimeMillis , System ) long lastAnimatedTimeMillis = mPreferenceManager . getContextualSearchLastAnimationTime ( ) ; \n\t\tif $F19505 ( Math , currentTimeMillis , lastAnimatedTimeMillis , ONE_DAY_IN_MILLIS ) { \n\t\t\tmPreferenceManager . setContextualSearchLastAnimationTime ( currentTimeMillis ) ; \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\telse { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\telse if ( selectionType == SelectionType . LONG_PRESS ) { \n\t\treturn getPromoOpenCount ( ) == NUM00 ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void waitFor $F72 { \n\tcheckStarted ( ) ; \n\ttry { \n\t\tif ( myInputProcessor != null && myProcess != null ) { \n\t\t\tmyInputProcessor . process ( myProcess . getOutputStream ( ) ) ; \n\t\t\t} \n\t\t} \n\t$F49978 ( waitForProcess ) } \n"}, {"code": "public static String extractUriFromAddress ( String addr ) { \n\tString uri = addr ; \n\t$F1384 ( index , addr ) if ( index != - NUM00 ) { \n\t\turi = addr . substring ( index + NUM00 , addr . indexOf ( NUM00 , index ) ) ; \n\t\t} \n\treturn uri ; \n\t} \n"}, {"code": "PBKDF2KeyImpl ( PBEKeySpec keySpec , String prfAlgo ) throws InvalidKeySpecException { \n\t$F1469 passwd = keySpec . getPassword ( ) ; \n\tif ( passwd == null ) { \n\t\tthis . passwd = $F11574 ; \n\t\t} \n\telse { \n\t\t$F256750 ( this , passwd ) } \n\t$F96 passwdBytes = getPasswordBytes ( this . passwd ) ; \n\tthis . salt = keySpec . getSalt ( ) ; \n\tif ( salt == null ) { \n\t\t$F109061 } \n\tthis . iterCount = keySpec . getIterationCount ( ) ; \n\tif ( iterCount == NUM00 ) { \n\t\t$F109061 } \n\telse if ( iterCount < NUM00 ) { \n\t\t$F109061 } \n\tint keyLength = keySpec . getKeyLength ( ) ; \n\tif ( keyLength == NUM00 ) { \n\t\t$F109061 } \n\telse if ( keyLength < NUM00 ) { \n\t\t$F109061 } \n\ttry { \n\t\tthis . prf = Mac . getInstance ( prfAlgo , SunJCE . getInstance ( ) ) ; \n\t\t} \n\tcatch ( NoSuchAlgorithmException nsae ) { \n\t\tInvalidKeySpecException ike = new InvalidKeySpecException $F72 ; \n\t\tike . initCause ( nsae ) ; \n\t\tthrow ike ; \n\t\t} \n\tthis . key = deriveKey ( prf , passwdBytes , salt , iterCount , keyLength ) ; \n\t} \n"}, {"code": "private static void showDirectoryCreationError ( final String directory ) { \n\t$F21899 ( message ) final String description = CUtilityFunctions . createDescription ( String . format ( NUM00 , directory ) , $F21904 , $F78037 ) ; \n\tNaviErrorDialog . show ( null , message , description ) ; \n\t} \n"}, {"code": "static $F96 pad $F97 ( data ) { \n\tint len ; \n\tif $F8830 ( data ) len = data . length ; \n\telse len = data . length % NUM00 ; \n\tif ( len == NUM00 ) return data ; \n\telse { \n\t\t$F96 padding = new byte [ NUM00 - len + data . length ] ; \n\t\tfor ( int i = padding . length - NUM00 ; \n\t\ti > data . length - NUM00 ; \n\t\ti -- ) $F5629 ( padding , i ) $F7057 ( System , data , padding ) return padding ; \n\t\t} \n\t} \n"}, {"code": "public void serialize ( DataOutput out ) throws IOException { \n\tout . writeUTF ( id ) ; \n\tout . writeUTF ( version ) ; \n\t$F27636 ( out , sourceFiles ) for ( Entry < String , List < RevisionFile > > e : sourceFiles . entrySet ( ) ) { \n\t\tout . writeUTF ( e . getKey ( ) ) ; \n\t\tList < RevisionFile > files = e . getValue ( ) ; \n\t\t$F27636 ( out , files ) for ( RevisionFile file : files ) { \n\t\t\tout . writeUTF ( file . fileName ) ; \n\t\t\tout . writeLong ( file . size ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public NamedColumnProjection $F9816 ( names , include ) { \n\t$F266988 ( m_names ) for ( $F9808 ( i , names ) ) $F24616 ( m_names , names , i ) m_include = include ; \n\t} \n"}, {"code": "public static TimeSeriesData serializableInstance $F72 { \n\t$F24645 ( varNames ) $F18793 ( varNames ) $F18793 ( varNames ) return new TimeSeriesData ( new TetradMatrix $F32532 , varNames ) ; \n\t} \n"}, {"code": "$F1 public void writeVertices ( final OutputStream outputStream , final Iterator $F130408 vertexIterator , final Direction direction ) throws IOException { \n\tfinal BufferedWriter writer = new BufferedWriter ( new OutputStreamWriter ( outputStream ) ) ; \n\ttry ( final ByteArrayOutputStream baos = $F1535 ) { \n\t\tif ( wrapAdjacencyList ) writer . write ( NUM00 + GraphSONTokens . VERTICES + NUM00 ) ; \n\t\twhile $F2921 ( vertexIterator ) { \n\t\t\twriteVertex ( baos , vertexIterator . next ( ) , direction ) ; \n\t\t\twriter . write ( new String $F87573 ( baos ) ) ; \n\t\t\tif ( wrapAdjacencyList ) { \n\t\t\t\tif $F2921 ( vertexIterator ) $F3410 ( writer ) } \n\t\t\telse { \n\t\t\t\t$F1769 ( writer ) } \n\t\t\t$F2268 ( baos ) } \n\t\tif ( wrapAdjacencyList ) $F3410 ( writer ) } \n\t$F1206 ( writer ) } \n"}, {"code": "Collection < ? extends ClientRequestResult > handleRetrieveConfigurationsRequest ( final ClientRequest configurationRequest , final Session session , final Destination replyDestination ) { \n\tif ( configurationRequest . getRequestParameter ( ) != null ) { \n\t\treturn configurationLoader . getConfigurationReports ( configurationRequest . getRequestParameter ( ) ) ; \n\t\t} \n\telse { \n\t\treturn configurationLoader . getConfigurationReports ( ) ; \n\t\t} \n\t} \n"}, {"code": "public static boolean containsClass ( $F1113 File file , String className ) { \n\t$F182960 ( entryPath , className ) return containsEntry ( file , entryPath ) ; \n\t} \n"}, {"code": "private double sin ( double angle ) { \n\twhile ( angle >= NUM00 ) { \n\t\tangle -= NUM00 ; \n\t\t} \n\tdouble value = angle / NUM00 * Math . PI ; \n\treturn Math . sin ( value ) ; \n\t} \n"}, {"code": "public void remove ( T graphic ) $F15768 ( mLock , mGraphics , graphic , postInvalidate ) "}, {"code": "private static void launchDebugger ( String dmlScriptStr , String fnameOptConfig , $F2540 ( argVals ) , boolean parsePyDML ) throws ParseException , IOException , DMLRuntimeException , DMLDebuggerException , LanguageException , HopsException , LopsException { \n\tDMLDebuggerProgramInfo dbprog = new DMLDebuggerProgramInfo $F72 ; \n\tDMLConfig conf = DMLConfig . readConfigurationFile ( fnameOptConfig ) ; \n\tConfigurationManager . setGlobalConfig ( conf ) ; \n\tAParserWrapper parser = AParserWrapper . createParser ( parsePyDML ) ; \n\tDMLProgram prog = parser . parse ( DML_FILE_PATH_ANTLR_PARSER , dmlScriptStr , argVals ) ; \n\tDMLTranslator dmlt = new DMLTranslator ( prog ) ; \n\tdmlt . liveVariableAnalysis ( prog ) ; \n\tdmlt . validateParseTree ( prog ) ; \n\tdmlt . constructHops ( prog ) ; \n\tdmlt . rewriteHopsDAG ( prog ) ; \n\tdmlt . constructLops ( prog ) ; \n\tdbprog . rtprog = prog . getRuntimeProgram ( conf ) ; \n\ttry { \n\t\tinitHadoopExecution ( conf ) ; \n\t\tDMLDebugger SystemMLdb = new DMLDebugger ( dbprog , dmlScriptStr ) ; \n\t\tSystemMLdb . runSystemMLDebugger ( ) ; \n\t\t} \n\t$F18632 ( cleanupHadoopExecution , conf ) } \n"}, {"code": "public static final Index createTestBankIndexApprovedOn $F72 { \n\t$F176225 ( lastname ) lastname . isUnique ( _BOOL ) ; \n\tArrayList < IndexField > $F9187 ( fields ) ; \n\tfields . add ( new IndexField ( NUM00 , FieldDataType . DATE_TIME ) ) ; \n\tlastname . setFields ( fields ) ; \n\tlastname . setTable ( Fixtures . createTestWorldBankTable ( ) ) ; \n\treturn lastname ; \n\t} \n"}, {"code": "$F112611 ( encoded , base64Data , len , removeWhiteSpace , FOURBYTE , numberQuadruple , b1 , b2 , b3 , b4 , d1 , d2 , d3 , d4 , i , encodedIndex , dataIndex , decodedData , isData , base64Alphabet , isPad , tmp , System ) "}, {"code": "public synchronized void accessed ( Object object ) { \n\thistoryList . remove ( object ) ; \n\thistoryList . add ( object ) ; \n\t} \n"}, {"code": "public static boolean isEmpty ( String string ) { \n\treturn string == null || $F41726 ( string ) ; \n\t} \n"}, {"code": "$F1 $F1431 protected void heapifyUpComparable ( int pos , Object elem ) { \n\tfinal $F62936 cur = ( $F62936 ) elem ; \n\twhile ( pos > NUM00 ) { \n\t\tfinal int parent = $F62939 ( pos ) ; \n\t\tObject par = queue [ parent ] ; \n\t\tif $F62945 ( cur , par ) $F5153 queue [ pos ] = par ; \n\t\tindex . put ( par , pos ) ; \n\t\tpos = parent ; \n\t\t} \n\tqueue [ pos ] = cur ; \n\tindex . put ( cur , pos ) ; \n\t} \n"}, {"code": "private void updateReleaseLocks $F72 throws CacheException { \n\tif ( numLocks . addAndGet ( - NUM00 ) < NUM00 ) { \n\t\tthrow new CacheException $F580 ; \n\t\t} \n\tif ( evictionPolicy == EvictionPolicy . LRU ) { \n\t\ttimestamp . set ( System . nanoTime ( ) ) ; \n\t\t} \n\telse if ( evictionPolicy == EvictionPolicy . LFU ) { \n\t\ttimestamp . addAndGet ( NUM00 ) ; \n\t\t} \n\telse if ( evictionPolicy == EvictionPolicy . MIN_EVICT ) $F845 else { \n\t\tthrow new CacheException ( NUM00 + evictionPolicy . name ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static Short toShort ( char c ) $F18816 ( Short , toShortValue , c ) "}, {"code": "protected $F316817 findCrossings ( final PlanetModel planetModel , final Plane q , final Membership [ ] bounds , final Membership [ ] moreBounds ) { \n\t$F140850 ( lineVectorX , y , q , z ) $F140850 ( lineVectorY , z , q , x ) $F140850 ( lineVectorZ , x , q , y ) if ( $F140851 ( Math , lineVectorX , MINIMUM_RESOLUTION , lineVectorY ) && Math . abs ( lineVectorZ ) < MINIMUM_RESOLUTION ) { \n\t\treturn NO_POINTS ; \n\t\t} \n\tdouble x0 ; \n\tdouble y0 ; \n\tdouble z0 ; \n\tfinal double denomYZ = this . y * q . z - this . z * q . y ; \n\tfinal double denomXZ = this . x * q . z - this . z * q . x ; \n\tfinal double denomXY = this . x * q . y - this . y * q . x ; \n\tif ( $F140867 ( Math , denomYZ , denomXZ ) && $F140867 ( Math , denomYZ , denomXY ) ) { \n\t\tif $F7637 ( Math , denomYZ , MINIMUM_RESOLUTION_SQUARED ) { \n\t\t\treturn NO_POINTS ; \n\t\t\t} \n\t\tfinal double denom = NUM00 / denomYZ ; \n\t\tx0 = NUM00 ; \n\t\ty0 = ( - this . D * q . z - this . z * - q . D ) * denom ; \n\t\tz0 = ( this . y * - q . D + this . D * q . y ) * denom ; \n\t\t} \n\telse if ( $F140867 ( Math , denomXZ , denomXY ) && $F140867 ( Math , denomXZ , denomYZ ) ) { \n\t\tif $F7637 ( Math , denomXZ , MINIMUM_RESOLUTION_SQUARED ) { \n\t\t\treturn NO_POINTS ; \n\t\t\t} \n\t\tfinal double denom = NUM00 / denomXZ ; \n\t\tx0 = ( - this . D * q . z - this . z * - q . D ) * denom ; \n\t\ty0 = NUM00 ; \n\t\tz0 = ( this . x * - q . D + this . D * q . x ) * denom ; \n\t\t} \n\telse { \n\t\tif $F7637 ( Math , denomXY , MINIMUM_RESOLUTION_SQUARED ) { \n\t\t\treturn NO_POINTS ; \n\t\t\t} \n\t\tfinal double denom = NUM00 / denomXY ; \n\t\tx0 = ( - this . D * q . y - this . y * - q . D ) * denom ; \n\t\ty0 = ( this . x * - q . D + this . D * q . x ) * denom ; \n\t\tz0 = NUM00 ; \n\t\t} \n\tfinal double A = lineVectorX * lineVectorX * planetModel . inverseAbSquared + lineVectorY * lineVectorY * planetModel . inverseAbSquared + lineVectorZ * lineVectorZ * planetModel . inverseCSquared ; \n\tfinal double B = NUM00 * ( lineVectorX * x0 * planetModel . inverseAbSquared + lineVectorY * y0 * planetModel . inverseAbSquared + lineVectorZ * z0 * planetModel . inverseCSquared ) ; \n\tfinal double C = x0 * x0 * planetModel . inverseAbSquared + y0 * y0 * planetModel . inverseAbSquared + z0 * z0 * planetModel . inverseCSquared - NUM00 ; \n\tfinal double BsquaredMinus = B * B - NUM00 * A * C ; \n\tif $F7637 ( Math , BsquaredMinus , MINIMUM_RESOLUTION_SQUARED ) { \n\t\treturn NO_POINTS ; \n\t\t} \n\telse if ( BsquaredMinus > NUM00 ) { \n\t\tfinal double inverse2A = NUM00 / ( NUM00 * A ) ; \n\t\tfinal double sqrtTerm = Math . sqrt ( BsquaredMinus ) ; \n\t\tfinal double t1 = ( - B + sqrtTerm ) * inverse2A ; \n\t\tfinal double t2 = ( - B - sqrtTerm ) * inverse2A ; \n\t\tfinal double point1X = lineVectorX * t1 + x0 ; \n\t\tfinal double point1Y = lineVectorY * t1 + y0 ; \n\t\tfinal double point1Z = lineVectorZ * t1 + z0 ; \n\t\tfinal double point2X = lineVectorX * t2 + x0 ; \n\t\tfinal double point2Y = lineVectorY * t2 + y0 ; \n\t\tfinal double point2Z = lineVectorZ * t2 + z0 ; \n\t\tboolean point1Valid = _BOOL ; \n\t\tboolean point2Valid = _BOOL ; \n\t\tfor ( final Membership bound : bounds ) { \n\t\t\tif $F416704 ( bound , point1X , point1Y , point1Z ) $F3468 ( point1Valid , _BOOL ) } \n\t\tif ( point1Valid ) { \n\t\t\tfor ( final Membership bound : moreBounds ) { \n\t\t\t\tif $F416704 ( bound , point1X , point1Y , point1Z ) $F3468 ( point1Valid , _BOOL ) } \n\t\t\t} \n\t\tfor ( final Membership bound : bounds ) { \n\t\t\tif $F416704 ( bound , point2X , point2Y , point2Z ) $F3468 ( point2Valid , _BOOL ) } \n\t\tif ( point2Valid ) { \n\t\t\tfor ( final Membership bound : moreBounds ) { \n\t\t\t\tif $F416704 ( bound , point2X , point2Y , point2Z ) $F3468 ( point2Valid , _BOOL ) } \n\t\t\t} \n\t\tif ( point1Valid && point2Valid ) { \n\t\t\treturn new GeoPoint [ ] { \n\t\t\t\tnew GeoPoint ( point1X , point1Y , point1Z ) , new GeoPoint ( point2X , point2Y , point2Z ) } \n\t\t\t; \n\t\t\t} \n\t\tif ( point1Valid ) { \n\t\t\treturn new GeoPoint [ ] { \n\t\t\t\tnew GeoPoint ( point1X , point1Y , point1Z ) } \n\t\t\t; \n\t\t\t} \n\t\tif ( point2Valid ) { \n\t\t\treturn new GeoPoint [ ] { \n\t\t\t\tnew GeoPoint ( point2X , point2Y , point2Z ) } \n\t\t\t; \n\t\t\t} \n\t\treturn NO_POINTS ; \n\t\t} \n\telse { \n\t\treturn NO_POINTS ; \n\t\t} \n\t} \n"}, {"code": "public static void encodeDimension ( float value , byte $F341876 , int offset ) { \n\tNumericUtils . intToSortableBytes ( NumericUtils . floatToSortableInt ( value ) , dest , offset ) ; \n\t} \n"}, {"code": "public long minflt $F72 $F12907 ( Long , fields ) "}, {"code": "public static String toString ( final float value ) $F23210 ( Float , value ) "}, {"code": "public void endFilterInterval $F72 { \n\t$F3224 ( endMillis , System ) totalFilterMillis += ( endMillis - intervalStartMillis ) ; \n\tstate = TaskState . other ; \n\t} \n"}, {"code": "public String process ( String to_process ) { \n\tif $F6036 ( to_process ) $F1278 String tmp = NUM00 ; \n\t$F8093 ( st , to_process , _BOOL ) StringBuffer $F1289 ( newValue , to_process ) ; \n\twhile $F14498 ( st ) { \n\t\t$F39710 ( tmp , st ) if ( hasAttribute ( tmp ) ) newValue . append ( ( String ) get ( tmp ) ) ; \n\t\telse newValue . append ( tmp ) ; \n\t\t} \n\t$F92 ( newValue ) } \n"}, {"code": "@ Benchmark public long test2_UsingForEachAndMapEntry $F72 throws IOException { \n\tlong i = NUM00 ; \n\tfor ( Map . Entry $F15329 pair : map . entrySet ( ) ) { \n\t\ti += pair . getKey ( ) + pair . getValue ( ) ; \n\t\t} \n\treturn i ; \n\t} \n"}, {"code": "public static final void writeListXml ( List val , String name , XmlSerializer out ) throws $F52182 { \n\t$F18827 ( val , out ) $F18823 ( out ) $F18831 ( name , out ) $F2199 ( n , val ) int i = NUM00 ; \n\twhile ( i < n ) { \n\t\twriteValueXml ( val . get ( i ) , null , out ) ; \n\t\ti ++ ; \n\t\t} \n\t$F18825 ( out ) } \n"}, {"code": "public static String convertToRGB ( int color ) { \n\t$F21676 ( red , Integer , Color , color ) $F21676 ( green , Integer , Color , color ) $F21676 ( blue , Integer , Color , color ) $F21680 ( red ) $F21680 ( green ) $F21680 ( blue ) return NUM00 + red + green + blue ; \n\t} \n"}, {"code": "$F76441 ( key , cacheKey , mDigest , MessageDigest , bytesToHexString , String ) "}, {"code": "private void changePassword $F1947 ( userType , oldPassword , newPassword ) throws Exception { \n\tString fileEncPassword = getUserPassword ( userType ) ; \n\tString userDN = getUserDN ( userType ) ; \n\tif ( $F29136 ( fileEncPassword ) || ( userDN == null ) || $F1277 ( userDN ) ) { \n\t\t$F88360 ( debug , userType , configFile ) throw new XMLException $F16961 ( i18n ) ; \n\t\t} \n\tif ( ! oldPassword . equals ( AccessController . doPrivileged ( new DecodeAction ( fileEncPassword ) ) ) ) $F65933 ( i18n ) if ( isAMSDKConfigured ) { \n\t\ttry { \n\t\t\tnew AuthContext ( new AuthPrincipal ( userDN ) , newPassword . toCharArray ( ) ) ; \n\t\t\tif $F6299 ( debug ) $F235771 ( debug , userDN ) } \n\t\tcatch ( LoginException lee ) { \n\t\t\ttry { \n\t\t\t\tAuthContext ac = new AuthContext ( new AuthPrincipal ( userDN ) , oldPassword . toCharArray ( ) ) ; \n\t\t\t\tPersistentObject user = UMSObject . getObject ( ac . getSSOToken ( ) , new Guid ( userDN ) ) ; \n\t\t\t\tif $F6299 ( debug ) $F235771 ( debug , userDN ) user . setAttribute ( new Attr ( NUM00 , newPassword ) ) ; \n\t\t\t\t$F72208 ( user ) } \n\t\t\tcatch ( LoginException le ) { \n\t\t\t\tif $F12866 ( debug ) { \n\t\t\t\t\t$F30524 ( debug , userDN ) } \n\t\t\t\tthrow new Exception ( $F241237 ( i18n ) + le . getMessage ( ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tsetUserPassword ( userType , newPassword ) ; \n\t} \n"}, {"code": "public int hashCode ( Object key ) { \n\treturn ( key . hashCode ( ) & NUM00 ) % this . keyTable . length ; \n\t} \n"}, {"code": "public AtomicArrayBase $F102871 ( array ) { \n\tthis . array = Arrays . copyOf ( array , array . length , $F22453 ) ; \n\t} \n"}, {"code": "public void apply $F72 $F9099 ( setSpeedMap , setNXdata ) "}, {"code": "$F108235 ( f , first , n , item , last , count , notFull ) "}, {"code": "public void push ( final String value ) { \n\tif ( value == null ) { \n\t\tmv . visitInsn ( Opcodes . ACONST_NULL ) ; \n\t\t} \n\telse $F31345 ( mv , value ) } \n"}, {"code": "public void init $F72 { \n\tm_projectTree . setSelectionPath ( new TreePath ( m_projectTree . getRootNode ( ) ) ) ; \n\t} \n"}, {"code": "public $F267501 ( is ) "}, {"code": "private void displayCalendar $F72 { \n\tKeyNamePair pp = ( KeyNamePair ) fieldResource . getSelectedItem ( ) ; \n\t$F8249 ( pp ) int S_Resource_ID = pp . getKey ( ) ; \n\tm_mAssignment . setS_Resource_ID ( S_Resource_ID ) ; \n\tTimestamp date = fieldDate . getTimestamp ( ) ; \n\t$F89756 ( index , timePane ) log . config ( NUM00 + index + NUM00 + S_Resource_ID + NUM00 + date ) ; \n\tm_loading = _BOOL ; \n\tif ( index == NUM00 ) daySchedule . recreate ( S_Resource_ID , date ) ; \n\telse if ( index == NUM00 ) weekSchedule . recreate ( S_Resource_ID , date ) ; \n\telse monthSchedule . recreate ( S_Resource_ID , date ) ; \n\tm_loading = _BOOL ; \n\trepaint ( ) ; \n\t} \n"}, {"code": "public static void assertException ( RuntimeException exception , Runnable expression , String errorMessage ) { \n\tif ( verbose ) { \n\t\tlog ( NUM00 + exception + NUM00 + expression + NUM00 + errorMessage + NUM00 ) ; \n\t\t} \n\ttry $F21688 ( expression ) catch ( RuntimeException failure ) { \n\t\tif ( exception . getClass ( ) != failure . getClass ( ) ) { \n\t\t\tTestUtils . fail ( errorMessage ) ; \n\t\t\t} \n\t\t$F665 } \n\tTestUtils . fail ( errorMessage ) ; \n\t} \n"}, {"code": "public boolean isParityCorrect ( $F31427 ( shards ) , int firstByte , int byteCount ) { \n\tcheckBuffersAndSizes ( shards , firstByte , byteCount ) ; \n\t$F57503 ( toCheck , parityShardCount ) $F21535 ( System , shards , dataShardCount , toCheck , parityShardCount ) return codingLoop . checkSomeShards ( parityRows , shards , dataShardCount , toCheck , parityShardCount , firstByte , byteCount , null ) ; \n\t} \n"}, {"code": "protected void onSendSuccess ( $F228084 buffer ) { \n\t$F5224 ( sendSuccess ) logger . trace ( NUM00 , name ( ) , buffer ) ; \n\ttry { \n\t\tcheckpointer . saveCheckpoint ( buffer ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tlogger . error ( NUM00 , name ( ) , buffer , e ) ; \n\t\t} \n\t} \n"}, {"code": "$F95779 ( out , remaining , count , buf , buffers , c , Math ) "}, {"code": "public void test_service_004 $F72 throws Exception { \n\t$F195929 ( serviceURI , valueFactory ) $F195934 ( groupNode ) $F195943 ( groupNode ) $F14136 ( exprImage , serviceURI ) $F195948 ( prefixDecls , PrefixDeclProcessor ) $F195956 ( serviceNode , makeIV , serviceURI , groupNode ) $F195968 ( projectedVars , Var , serviceNode , exprImage , prefixDecls ) $F195974 ( bindingSets ) { \n\t\t$F195979 ( bset ) bset . addBinding ( NUM00 , $F195981 ) ; \n\t\tbindingSets . add ( bset ) ; \n\t\t} \n\t$F195992 ( a , bindingSets ) final IRemoteSparqlQueryBuilder fixture = newFixture ( serviceNode , a ) ; \n\t$F195994 ( queryStr , fixture , a ) $F195999 ( expected , QueryType ) { \n\t\texpected . setPrefixDecls ( prefixDecls ) ; \n\t\t$F196004 ( projection ) $F196006 ( projection ) $F196006 ( projection ) $F196006 ( projection ) expected . setProjection ( projection ) ; \n\t\t$F196008 ( whereClause ) $F196014 ( whereClause , Scope ) expected . setWhereClause ( whereClause ) ; \n\t\t{ \n\t\t\tfinal $F195959 vars = new $F195959 $F72 ; \n\t\t\t$F73066 ( solutionsIn ) final BindingsClause bindingsClause = new BindingsClause ( vars , solutionsIn ) ; \n\t\t\texpected . setBindingsClause ( bindingsClause ) ; \n\t\t\t{ \n\t\t\t\t$F195966 ( vars , Var ) } \n\t\t\t$F221451 ( bset , solutionsIn ) } \n\t\t} \n\tfinal QueryRoot actual = parse ( queryStr , baseURI ) ; \n\tassertSameAST ( queryStr , expected , actual ) ; \n\t} \n"}, {"code": "private boolean isDirty $F72 { \n\treturn ! Objects . equals ( inputList . keySet ( ) , cmrRepositoryManager . getCmrRepositoryDefinitions ( ) ) ; \n\t} \n"}, {"code": "public void write $F36827 ( s , off , len ) { \n\tif ( text != null ) { \n\t\t$F36829 ( text , s , off , len ) if ( ( col += len ) > wrap ) println ( ) ; \n\t\t} \n\telse { \n\t\tsuper . write ( s , off , len ) ; \n\t\tflush ( ) ; \n\t\t} \n\t} \n"}, {"code": "public Zoneset showActiveZoneset ( Integer vsanId ) throws NetworkDeviceControllerException { \n\tList < Zoneset > zonesets = showZoneset ( vsanId , _BOOL , null , _BOOL , _BOOL ) ; \n\treturn zonesets . isEmpty ( ) ? null : zonesets . get ( NUM00 ) ; \n\t} \n"}, {"code": "private final short validatePermSplitFactor ( String splitFactor ) throws AdeFlowException { \n\tshort permSplitFactor = Short . parseShort ( splitFactor ) ; \n\tif ( permSplitFactor <= NUM00 || ( ( m_outerFramingFlow . getDuration ( ) / permSplitFactor ) < MILLISECONDS_IN_ONE_MINUTE ) ) { \n\t\tthrow new AdeFlowException $F580 ; \n\t\t} \n\treturn permSplitFactor ; \n\t} \n"}, {"code": "public static Calendar toCalendar ( String datestring , String format ) { \n\tDate d = parse ( datestring , format ) ; \n\t$F4377 ( cal , Calendar ) $F176384 ( cal , d ) return cal ; \n\t} \n"}, {"code": "public void testCompareToDiffSigns2 $F72 { \n\t$F67214 $F10679 int aSign = - NUM00 ; \n\tint bSign = NUM00 ; \n\t$F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F67217 ( assertEquals , aNumber , bNumber ) } \n"}, {"code": "private static void translateCompatibilityToPaths ( RPAction action ) { \n\tif ( action . has ( EquipActionConsts . BASE_OBJECT ) ) { \n\t\t$F3803 path = Arrays . asList ( action . get ( EquipActionConsts . BASE_OBJECT ) , action . get ( EquipActionConsts . BASE_SLOT ) , action . get ( EquipActionConsts . BASE_ITEM ) ) ; \n\t\taction . put ( EquipActionConsts . SOURCE_PATH , path ) ; \n\t\t} \n\telse { \n\t\t$F3803 path = Arrays . asList ( action . get ( EquipActionConsts . BASE_ITEM ) ) ; \n\t\taction . put ( EquipActionConsts . SOURCE_PATH , path ) ; \n\t\t} \n\t} \n"}, {"code": "public Builder addMenuItem ( $F4170 String label , $F4170 PendingIntent pendingIntent ) { \n\t$F21432 ( mMenuItems ) $F53033 ( bundle ) bundle . putString ( KEY_MENU_ITEM_TITLE , label ) ; \n\tbundle . putParcelable ( KEY_PENDING_INTENT , pendingIntent ) ; \n\tmMenuItems . add ( bundle ) ; \n\treturn this ; \n\t} \n"}, {"code": "public SparseFloatVector ( TIntFloatMap values , int dimensionality ) throws IllegalArgumentException { \n\tif $F60125 ( values , dimensionality ) $F825 this . indexes = $F2315 ( values ) ; \n\tthis . values = new float $F2313 ( values ) ; \n\t{ \n\t\tTIntFloatIterator iter = values . iterator ( ) ; \n\t\tfor ( $F60135 ( i , iter ) ) { \n\t\t\t$F60136 ( iter ) this . indexes [ i ] = iter . key ( ) ; \n\t\t\t} \n\t\tArrays . sort ( this . indexes ) ; \n\t\t} \n\t{ \n\t\tfor ( $F2277 ( i , values ) ) { \n\t\t\tthis . values [ i ] = values . get ( this . indexes [ i ] ) ; \n\t\t\t} \n\t\t} \n\tthis . dimensionality = dimensionality ; \n\t$F3666 ( maxdim , getMaxDim ) if ( maxdim > dimensionality ) $F60154 ( dimensionality , maxdim ) } \n"}, {"code": "public $F96 canonSerializeToByteArray ( Node node ) throws Exception { \n\t$F1538 ( baos ) canon . setWriter ( baos ) ; \n\tcanon . notReset ( ) ; \n\tcanon . canonicalizeSubtree ( node ) ; \n\t$F11316 ( baos ) } \n"}, {"code": "public DefinedMethod addDescription ( String description ) { \n\tthis . description = Optional . of ( description ) ; \n\treturn this ; \n\t} \n"}, {"code": "public int addFlattenedColumn ( Object o , $F2027 dims ) throws FitsException $F19580 ( addFlattenedColumn , o , dims , _BOOL ) "}, {"code": "public final void writeToStream ( DataOutputStream dos ) throws IOException { \n\tdos . writeUTF ( event ) ; \n\tdos . writeUTF ( site ) ; \n\tdos . writeUTF ( date ) ; \n\tdos . writeUTF ( round ) ; \n\tdos . writeUTF ( white ) ; \n\tdos . writeUTF ( black ) ; \n\tdos . writeUTF ( TextIO . toFEN ( startPos ) ) ; \n\tdos . writeUTF ( timeControl ) ; \n\tdos . writeUTF ( whiteTimeControl ) ; \n\tdos . writeUTF ( blackTimeControl ) ; \n\t$F2199 ( nTags , tagPairs ) dos . writeInt ( nTags ) ; \n\tfor ( $F119 ( i , nTags ) ) { \n\t\tdos . writeUTF ( tagPairs . get ( i ) . tagName ) ; \n\t\tdos . writeUTF ( tagPairs . get ( i ) . tagValue ) ; \n\t\t} \n\tNode . writeToStream ( dos , rootNode ) ; \n\t$F15272 pathFromRoot = currentNode . getPathFromRoot ( ) ; \n\t$F2199 ( pathLen , pathFromRoot ) dos . writeInt ( pathLen ) ; \n\tfor ( $F119 ( i , pathLen ) ) dos . writeInt ( pathFromRoot . get ( i ) ) ; \n\t} \n"}, {"code": "public void registerSource ( ProgressSource pi ) { \n\tsynchronized ( progressSourceList ) { \n\t\t$F153626 ( progressSourceList , pi ) progressSourceList . add ( pi ) ; \n\t\t} \n\tif $F3817 ( progressListenerList ) { \n\t\tArrayList $F314324 listeners = new ArrayList $F314324 $F72 ; \n\t\tsynchronized ( progressListenerList ) { \n\t\t\tfor ( Iterator $F314324 iter = progressListenerList . iterator ( ) ; \n\t\t\titer . hasNext ( ) ; \n\t\t\t) { \n\t\t\t\tlisteners . add ( iter . next ( ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tfor ( Iterator $F314324 iter = listeners . iterator ( ) ; \n\t\titer . hasNext ( ) ; \n\t\t) { \n\t\t\tProgressListener pl = iter . next ( ) ; \n\t\t\tProgressEvent pe = new ProgressEvent ( pi , pi . getURL ( ) , pi . getMethod ( ) , pi . getContentType ( ) , pi . getState ( ) , pi . getProgress ( ) , pi . getExpected ( ) ) ; \n\t\t\tpl . progressStart ( pe ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private static $F2539 extractKeyValuePairs ( String props , ObjectName mbean ) { \n\t$F2539 map = new LinkedHashMap $F2538 $F72 ; \n\t$F1384 ( eq , props ) while ( eq != - NUM00 ) { \n\t\t$F11991 ( key , props , eq ) String value = mbean . getKeyProperty ( key ) ; \n\t\tmap . put ( key , value ) ; \n\t\tprops = props . substring ( $F1285 ( key ) + value . length ( ) ) ; \n\t\t$F3110 ( props ) $F49897 ( eq , props ) } \n\treturn map ; \n\t} \n"}, {"code": "protected void paintContentBorderLeftEdge ( Graphics g , int tabPlacement , int selectedIndex , int x , int y , int w , int h ) { \n\tRectangle selRect = selectedIndex < NUM00 ? null : getTabBounds ( selectedIndex , calcRect ) ; \n\tg . setColor ( selectHighlight ) ; \n\tif ( tabPlacement != LEFT || selectedIndex < NUM00 || ( $F6108 ( selRect ) + NUM00 < x ) || ( selRect . y < y || selRect . y > y + h ) ) { \n\t\tg . drawLine ( x , y , x , y + h - NUM00 ) ; \n\t\t} \n\telse { \n\t\tg . drawLine ( x , y , x , selRect . y + NUM00 ) ; \n\t\tif ( $F6118 ( selRect ) < y + h - NUM00 ) g . drawLine ( x , $F6118 ( selRect ) + NUM00 , x , y + h - NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "public final Flux $F4203 sample ( Duration timespan ) { \n\treturn sampleMillis ( timespan . toMillis ( ) ) ; \n\t} \n"}, {"code": "$F1 public boolean hasValuesDescription $F72 { \n\treturn restrictionClass != null && restrictionClass != $F12222 ; \n\t} \n"}, {"code": "public SmbFile ( String url ) throws MalformedURLException { \n\tthis ( new URL ( null , url , Handler . SMB_HANDLER ) ) ; \n\t} \n"}, {"code": "public static boolean isAudio ( String mimeType ) { \n\tif ( mimeType != null ) { \n\t\tif $F3106 ( mimeType ) return _BOOL ; \n\t\telse return _BOOL ; \n\t\t} \n\telse return _BOOL ; \n\t} \n"}, {"code": "private void restoreWidget ( Key key , $F96 buffer , int dataSize ) throws IOException { \n\tif ( VERBOSE ) Log . v ( TAG , NUM00 + key . id ) ; \n\tif ( DEBUG ) Log . d ( TAG , NUM00 + buffer . length + NUM00 + Base64 . encodeToString ( buffer , NUM00 , dataSize , Base64 . NO_WRAP ) ) ; \n\tWidget widget = unpackProto ( new Widget $F72 , buffer , dataSize ) ; \n\tif ( DEBUG ) Log . d ( TAG , NUM00 + widget . provider ) ; \n\tif ( widget . icon . data != null ) { \n\t\tBitmap icon = BitmapFactory . decodeByteArray ( widget . icon . data , NUM00 , widget . icon . data . length ) ; \n\t\tif ( icon == null ) { \n\t\t\tLog . w ( TAG , NUM00 + key . name ) ; \n\t\t\t} \n\t\telse { \n\t\t\tIconCache . preloadIcon ( mContext , ComponentName . unflattenFromString ( widget . provider ) , icon , widget . icon . dpi ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "protected int assertLineTerminates ( int c ) throws IOException , RDFParseException { \n\t$F10201 ( c , reader ) c = skipWhitespace ( c ) ; \n\tif ( c != - NUM00 && c != NUM00 && c != NUM00 ) $F1210 ( reportFatalError ) return c ; \n\t} \n"}, {"code": "static private XMLEvent constructEvent ( int eventType , WbXmlStreamReader stream ) throws XMLStreamException { \n\t$F37599 ( log , Level ) XMLEvent event ; \n\tswitch ( eventType ) { \n\t\tcase XMLStreamConstants . START_DOCUMENT : event = new WbXmlStartDocumentEvent ( stream ) ; \n\t\t$F597 case XMLStreamConstants . END_DOCUMENT : event = new WbXmlEndDocumentEvent ( stream ) ; \n\t\t$F597 case XMLStreamConstants . START_ELEMENT : event = new WbXmlStartElementEvent ( stream ) ; \n\t\t$F597 case XMLStreamConstants . END_ELEMENT : event = new WbXmlEndElementEvent ( stream ) ; \n\t\t$F597 case XMLStreamConstants . CHARACTERS : case XMLStreamConstants . CDATA : event = new WbXmlCharactersEvent ( stream ) ; \n\t\t$F597 $F1267 throw new UnsupportedOperationException $F10797 ( String , eventType ) ; \n\t\t} \n\tlog . log ( Level . FINE , NUM00 , event ) ; \n\treturn event ; \n\t} \n"}, {"code": "private void verifyGridState $F72 { \n\tInteger rowLength = null ; \n\tint rowPos = NUM00 ; \n\tfor ( $F6689 row : grid ) { \n\t\tif ( rowLength != null && rowLength != row . size ( ) ) { \n\t\t\tthrow new IllegalStateException ( $F57676 ( rowLength , row ) + rowPos ) ; \n\t\t\t} \n\t\trowPos ++ ; \n\t\t$F8935 ( rowLength , row ) } \n\t} \n"}, {"code": "public static String readStringAndClose ( Reader in , int length ) throws IOException { \n\ttry { \n\t\tif ( length <= NUM00 ) $F7984 ( length , Integer ) int block = Math . min ( Constants . IO_BUFFER_SIZE , length ) ; \n\t\tStringWriter out = new StringWriter ( block ) ; \n\t\tcopyAndCloseInput ( in , out , length ) ; \n\t\t$F92 ( out ) } \n\t$F3229 ( in ) } \n"}, {"code": "protected void beginPath $F72 { \n\tprepDrawing ( ) ; \n\tmPSStream . println ( NEWPATH_STR ) ; \n\tmPenX = NUM00 ; \n\tmPenY = NUM00 ; \n\t} \n"}, {"code": "private boolean inSamePackage $F140796 ( c1 , c2 ) { \n\t$F20605 ( nameC1 , c1 ) $F20605 ( nameC2 , c2 ) $F24867 ( indexDotC1 , nameC1 ) $F24867 ( indexDotC2 , nameC2 ) $F35938 ( indexDotC1 , indexDotC2 , _BOOL ) $F5881 ( indexDotC1 , _BOOL ) return nameC1 . regionMatches ( NUM00 , nameC2 , NUM00 , indexDotC1 ) ; \n\t} \n"}, {"code": "private void sendTcpRequest ( Socket socket , String request ) throws ApiException { \n\ttry { \n\t\tLogUtils . LOGD ( TAG , NUM00 + request ) ; \n\t\tBufferedWriter writer = new BufferedWriter ( new OutputStreamWriter ( socket . getOutputStream ( ) ) ) ; \n\t\twriter . write ( request ) ; \n\t\t$F1206 ( writer ) } \n\tcatch ( Exception e ) { \n\t\tLogUtils . LOGW ( TAG , NUM00 , e ) ; \n\t\tdisconnect ( ) ; \n\t\tthrow new ApiException ( ApiException . IO_EXCEPTION_WHILE_SENDING_REQUEST , e ) ; \n\t\t} \n\t} \n"}, {"code": "public static String cleanString ( String src ) { \n\t$F1338 ( src ) boolean foundBad = _BOOL ; \n\tfinal CharacterIterator it = new StringCharacterIterator ( src ) ; \n\tfor ( char c = it . first ( ) ; \n\tc != CharacterIterator . DONE ; \n\tc = it . next ( ) ) { \n\t\tif ( c < ASCII_PRINTABLE_LOW || c >= ASCII_PRINTABLE_HI ) $F3468 ( foundBad , _BOOL ) } \n\t$F42316 ( foundBad , src ) $F1121 ( res ) for ( char c = it . first ( ) ; \n\tc != CharacterIterator . DONE ; \n\tc = it . next ( ) ) { \n\t\tif ( c < ASCII_PRINTABLE_LOW || c >= ASCII_PRINTABLE_HI ) $F288 ( res , ASCII_SPACE ) else $F288 ( res , c ) } \n\t$F92 ( res ) } \n"}, {"code": "public static ManualLagGraph serializableInstance $F72 { \n\treturn new ManualLagGraph ( ManualLagGraphParams . serializableInstance ( ) ) ; \n\t} \n"}, {"code": "public void updateActions $F72 { \n\tString text ; \n\tAction a = RTextArea . getAction ( RTextArea . UNDO_ACTION ) ; \n\tif ( canUndo ( ) ) { \n\t\ta . setEnabled ( _BOOL ) ; \n\t\ttext = getUndoPresentationName ( ) ; \n\t\t$F59297 ( a , Action , text ) a . putValue ( Action . SHORT_DESCRIPTION , text ) ; \n\t\t} \n\telse { \n\t\tif $F34496 ( a ) { \n\t\t\ta . setEnabled ( _BOOL ) ; \n\t\t\ttext = cantUndoText ; \n\t\t\t$F59297 ( a , Action , text ) a . putValue ( Action . SHORT_DESCRIPTION , text ) ; \n\t\t\t} \n\t\t} \n\ta = RTextArea . getAction ( RTextArea . REDO_ACTION ) ; \n\tif ( canRedo ( ) ) { \n\t\ta . setEnabled ( _BOOL ) ; \n\t\ttext = getRedoPresentationName ( ) ; \n\t\t$F59297 ( a , Action , text ) a . putValue ( Action . SHORT_DESCRIPTION , text ) ; \n\t\t} \n\telse { \n\t\tif $F34496 ( a ) { \n\t\t\ta . setEnabled ( _BOOL ) ; \n\t\t\ttext = cantRedoText ; \n\t\t\t$F59297 ( a , Action , text ) a . putValue ( Action . SHORT_DESCRIPTION , text ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void elementType $F21324 ( name , model , memberOf , flags ) { \n\tElementType e = new ElementType ( name , model , memberOf , flags , this ) ; \n\ttheElementTypes . put ( name . toLowerCase ( ) , e ) ; \n\tif ( memberOf == M_ROOT ) theRoot = e ; \n\t} \n"}, {"code": "private static $F39277 generateValidPreviewSizeList ( Camera camera ) { \n\t$F39278 parameters = camera . getParameters ( ) ; \n\t$F39283 supportedPreviewSizes = parameters . getSupportedPreviewSizes ( ) ; \n\t$F39283 supportedPictureSizes = parameters . getSupportedPictureSizes ( ) ; \n\t$F39277 $F204 ( validPreviewSizes ) ; \n\tfor ( $F39290 ( previewSize , supportedPreviewSizes ) ) { \n\t\t$F39296 ( previewAspectRatio , previewSize ) for ( $F39290 ( pictureSize , supportedPictureSizes ) ) { \n\t\t\t$F39296 ( pictureAspectRatio , pictureSize ) if $F39297 ( Math , previewAspectRatio , pictureAspectRatio , ASPECT_RATIO_TOLERANCE ) { \n\t\t\t\tvalidPreviewSizes . add ( new SizePair ( previewSize , pictureSize ) ) ; \n\t\t\t\t$F597 } \n\t\t\t} \n\t\t} \n\tif $F10471 ( validPreviewSizes ) { \n\t\t$F6173 ( Log , TAG ) for ( $F39290 ( previewSize , supportedPreviewSizes ) ) { \n\t\t\tvalidPreviewSizes . add ( new SizePair ( previewSize , null ) ) ; \n\t\t\t} \n\t\t} \n\treturn validPreviewSizes ; \n\t} \n"}, {"code": "$F7480 ( listener , scrollingListeners ) "}, {"code": "public static boolean hasDependency ( MavenProject project , String groupId ) { \n\tSet < Artifact > artifacts = project . getArtifacts ( ) ; \n\tif ( artifacts != null ) { \n\t\tfor ( Artifact artifact : artifacts ) { \n\t\t\tString scope = artifact . getScope ( ) ; \n\t\t\tif ( Objects . equal ( NUM00 , scope ) ) $F1448 if ( Objects . equal ( groupId , artifact . getGroupId ( ) ) ) { \n\t\t\t\treturn _BOOL ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public ContourGenerator ( URL url , float modelMean , float modelStddev ) throws IOException { \n\tthis . modelMean = modelMean ; \n\tthis . modelStddev = modelStddev ; \n\t$F19151 ( termsList ) String line ; \n\tBufferedReader $F275615 ( reader , url ) ; \n\t$F36243 ( line , reader ) while ( line != null ) { \n\t\tif $F14943 ( line ) { \n\t\t\tparseAndAdd ( termsList , line ) ; \n\t\t\t} \n\t\t$F36243 ( line , reader ) } \n\tterms = ( F0ModelTerm [ ] ) termsList . toArray ( terms ) ; \n\t$F59 ( reader ) } \n"}, {"code": "public void addComment ( String comment ) { \n\tif ( frame != null ) { \n\t\tchatTab . addComment ( comment ) ; \n\t\t} \n\tif ( tabbedPane . getSelectedIndex ( ) == NUM00 ) { \n\t\teditorTab . displayComment ( comment ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F96 hexStringToBytes ( String hexString ) { \n\tif $F3581 ( hexString ) $F1337 $F47567 ( hexString ) int length = $F8196 ( hexString ) ; \n\t$F7782 ( hexChars , hexString ) $F2175 ( d , length ) for ( $F119 ( i , length ) ) { \n\t\tint pos = i * NUM00 ; \n\t\td [ i ] = ( byte ) ( charToByte ( hexChars [ pos ] ) < < NUM00 | charToByte ( hexChars [ pos + NUM00 ] ) ) ; \n\t\t} \n\treturn d ; \n\t} \n"}, {"code": "private void decompose ( $F6689 elementPairs , $F6689 printerList , $F6689 parserList ) { \n\t$F115 ( size , elementPairs ) for ( $F6225 ( i , size ) ) { \n\t\t$F16628 ( element , elementPairs , i ) if ( element instanceof DateTimePrinter ) { \n\t\t\tif ( element instanceof Composite ) { \n\t\t\t\taddArrayToList ( printerList , ( ( Composite ) element ) . iPrinters ) ; \n\t\t\t\t} \n\t\t\telse $F207 ( printerList , element ) } \n\t\t$F14759 ( element , elementPairs , i ) if ( element instanceof DateTimeParser ) { \n\t\t\tif ( element instanceof Composite ) { \n\t\t\t\taddArrayToList ( parserList , ( ( Composite ) element ) . iParsers ) ; \n\t\t\t\t} \n\t\t\telse $F207 ( parserList , element ) } \n\t\t} \n\t} \n"}, {"code": "private String processIntegerToken ( String token ) { \n\tString result = token . replaceAll ( NUM00 + groupSeparator , NUM00 ) ; \n\tboolean isNegative = _BOOL ; \n\t$F1749 ( preLen , negativePrefix ) if ( ( preLen > NUM00 ) && result . startsWith ( negativePrefix ) ) { \n\t\tisNegative = _BOOL ; \n\t\t$F11978 ( result , preLen ) } \n\t$F1749 ( sufLen , negativeSuffix ) if ( ( sufLen > NUM00 ) && result . endsWith ( negativeSuffix ) ) { \n\t\tisNegative = _BOOL ; \n\t\tresult = result . substring ( result . length ( ) - sufLen , result . length ( ) ) ; \n\t\t} \n\tif ( isNegative ) result = NUM00 + result ; \n\treturn result ; \n\t} \n"}, {"code": "public void writeGraphics ( String graphicsSaveFile ) throws IOException { \n\t$F4649 ( ostream , graphicsSaveFile ) $F7054 ( objectstream , ostream ) writeGraphics ( objectstream ) ; \n\t$F59 ( objectstream ) } \n"}, {"code": "$F1 public void addInputNode ( BNode inputNode ) { \n\tsuper . addInputNode ( inputNode ) ; \n\t} \n"}, {"code": "public void removeDependency ( TaskDependency dep ) { \n\tNode srcNode = myNodeMap . get ( dep . getDependee ( ) ) ; \n\tNode dstNode = myNodeMap . get ( dep . getDependant ( ) ) ; \n\tif ( srcNode == null && dstNode == null ) $F932 assert ( srcNode != null && dstNode != null ) : NUM00 + dep + NUM00 ; \n\tDependencyEdge diedEdge = findExplicitDependency ( dep , srcNode , dstNode ) ; \n\t$F2329 ( diedEdge ) removeEdge ( diedEdge ) ; \n\tfor ( DependencyEdge edge : Lists . newArrayList ( srcNode . getOutgoing ( ) ) ) { \n\t\tif ( edge instanceof ImplicitInheritedDependency ) { \n\t\t\tif ( ( ( ImplicitInheritedDependency ) edge ) . myExplicitDep == diedEdge ) { \n\t\t\t\tremoveEdge ( edge ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tfireGraphChanged ( ) ; \n\t} \n"}, {"code": "$F13429 ( criteria , createCriteriaInternal , oredCriteria ) "}, {"code": "$F227258 ( filename , extensions , _BOOL , indexOfExtension , fileExt , getExtension , extension ) "}, {"code": "public VNXeCommandJob modifyConsistencyGroupAsync ( String id , LunGroupModifyParam param ) { \n\t$F7542 ( urlBld , URL_MODIFY1 ) urlBld . append ( id ) ; \n\turlBld . append ( URL_MODIFY2 ) ; \n\t$F6947 ( _url , urlBld ) return postRequestAsync ( param ) ; \n\t} \n"}, {"code": "public Object readRemote $F72 throws IOException { \n\tString type = readType ( ) ; \n\tString url = readString ( ) ; \n\treturn resolveRemote ( type , url ) ; \n\t} \n"}, {"code": "private static JFreeChart createChart $F72 { \n\t$F38363 ( series1 ) $F38365 ( series1 ) $F38365 ( series1 ) $F38365 ( series1 ) XYDataset dataset = new XYSeriesCollection ( series1 ) ; \n\treturn ChartFactory . createTimeSeriesChart ( NUM00 , NUM00 , NUM00 , dataset , _BOOL , _BOOL , _BOOL ) ; \n\t} \n"}, {"code": "private void DTDprolog $F72 throws $F55616 { \n\t$F42851 ( writer , m_writer ) if ( m_needToOutputDocTypeDecl ) { \n\t\toutputDocTypeDecl ( m_elemContext . m_elementName , _BOOL ) ; \n\t\tm_needToOutputDocTypeDecl = _BOOL ; \n\t\t} \n\tif ( m_inDoctype ) { \n\t\t$F3410 ( writer ) $F11584 ( writer , m_lineSep , m_lineSepLen ) m_inDoctype = _BOOL ; \n\t\t} \n\t} \n"}, {"code": "public CacheSet querySequential ( Predicate ... selectors ) { \n\tcheckNotNull ( selectors ) ; \n\t$F5363 $F10252 ( resultCollection , items ) ; \n\t$F5363 $F19827 ( filterCollection ) ; \n\t$F5363 tempCollection ; \n\tint i = NUM00 ; \n\twhile ( ( i < selectors . length ) && $F3817 ( resultCollection ) ) { \n\t\tCollectionUtils . select ( resultCollection , selectors [ i ] , filterCollection ) ; \n\t\ttempCollection = resultCollection ; \n\t\tresultCollection = filterCollection ; \n\t\tfilterCollection = tempCollection ; \n\t\t$F725 ( filterCollection ) i ++ ; \n\t\t} \n\treturn new CacheSet ( resultCollection ) ; \n\t} \n"}, {"code": "$F1 public boolean isErrorEnabled $F72 { \n\treturn logger . isLoggable ( Level . SEVERE ) ; \n\t} \n"}, {"code": "public static $F20163 SetTValue $F20163 fromStream ( final AnyMValue < Stream $F20163 > monads ) { \n\treturn of ( monads . map ( null ) ) ; \n\t} \n"}, {"code": "public static CCBitmapFontConfiguration FNTConfigLoadFile ( String fntFile ) { \n\tCCBitmapFontConfiguration ret = null ; \n\tif ( configurations == null ) configurations = new HashMap < String , CCBitmapFontConfiguration > $F72 ; \n\tret = configurations . get ( fntFile ) ; \n\tif ( ret == null ) { \n\t\tret = CCBitmapFontConfiguration . configuration ( fntFile ) ; \n\t\tconfigurations . put ( fntFile , ret ) ; \n\t\t} \n\treturn ret ; \n\t} \n"}, {"code": "public void addCriteria ( Criteria otherCriteria ) { \n\tif ( otherCriteria instanceof AdvancedCriteria || otherCriteria instanceof Criterion ) $F11813 Map otherMap = otherCriteria . getValues ( ) ; \n\t$F304893 ( otherKeys , otherMap ) for ( $F2774 ( i , otherKeys ) ) { \n\t\t$F2778 ( field , i ) $F16628 ( value , otherMap , field ) JSOHelper . setAttribute ( jsObj , field , value ) ; \n\t\t} \n\t} \n"}, {"code": "public DNetscapeSslServerName $F157465 ( parent , value ) throws IOException $F157466 ( super , parent , setTitle , res , initComponents , prepopulateWithValue , value ) "}, {"code": "public static $F80820 resizeArray ( $F80820 oldArray , int newSize ) { \n\t$F1338 ( oldArray ) if ( oldArray . length == newSize ) { \n\t\treturn oldArray ; \n\t\t} \n\t$F80820 newArray = new EventBean [ newSize ] ; \n\tint preserveLength = Math . min ( oldArray . length , newSize ) ; \n\t$F263472 ( preserveLength , System , oldArray , newArray ) return newArray ; \n\t} \n"}, {"code": "public static SpannableString spanText ( CharSequence text , Object ... spans ) { \n\tSpannableString spannableString = new SpannableString ( text ) ; \n\tfor ( Object span : spans ) { \n\t\tspannableString . setSpan ( span , NUM00 , text . length ( ) , Spanned . SPAN_EXCLUSIVE_EXCLUSIVE ) ; \n\t\t} \n\treturn spannableString ; \n\t} \n"}, {"code": "$F1431 protected $F4203 $F5675 query ( $F20474 modelClass , $F806 columns , String selection , $F806 selectionArgs , String groupBy , String having , String orderBy , String limit , List < AssociationsInfo > foreignKeyAssociations ) { \n\t$F237846 ( dataList ) Cursor cursor = null ; \n\ttry { \n\t\t$F221457 $F31993 ( supportedFields , getSupportedFields , modelClass ) ; \n\t\tString tableName = getTableName ( modelClass ) ; \n\t\t$F31405 ( customizedColumns , getCustomizedColumns , columns , foreignKeyAssociations ) cursor = mDatabase . query ( tableName , customizedColumns , selection , selectionArgs , groupBy , having , orderBy , limit ) ; \n\t\tif $F17816 ( cursor ) { \n\t\t\tSparseArray < QueryInfoCache > queryInfoCacheSparseArray = new SparseArray < QueryInfoCache > $F72 ; \n\t\t\tdo { \n\t\t\t\tT modelInstance = ( T ) createInstanceFromClass ( modelClass ) ; \n\t\t\t\tgiveBaseObjIdValue ( ( DataSupport ) modelInstance , cursor . getLong ( cursor . getColumnIndexOrThrow ( NUM00 ) ) ) ; \n\t\t\t\tsetValueToModel ( modelInstance , supportedFields , foreignKeyAssociations , cursor , queryInfoCacheSparseArray ) ; \n\t\t\t\tif ( foreignKeyAssociations != null ) { \n\t\t\t\t\tsetAssociatedModel ( ( DataSupport ) modelInstance ) ; \n\t\t\t\t\t} \n\t\t\t\tdataList . add ( modelInstance ) ; \n\t\t\t\t} \n\t\t\twhile $F12260 ( cursor ) ; \n\t\t\t$F725 ( queryInfoCacheSparseArray ) } \n\t\treturn dataList ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F301 ( e ) throw new DataSupportException $F1783 ( e ) ; \n\t\t} \n\t$F14364 ( cursor ) } \n"}, {"code": "private MLTResult buildQueryForField ( String fieldName , PriorityQueue < MLTTerm > q , BooleanQuery query , boolean contentStreamQuery ) { \n\tList < MLTTerm > interestingTerms = new ArrayList < MLTTerm > $F72 ; \n\tint qterms = NUM00 ; \n\tint maxTerms = maxQueryTermsPerField ; \n\tif ( maxTerms <= NUM00 ) $F7984 ( maxTerms , Integer ) BooleanQuery tmpQuery = new BooleanQuery $F72 ; \n\tdouble sumQuaredBoost = NUM00 ; \n\tMLTTerm cur ; \n\twhile ( ( cur = q . pop ( ) ) != null ) { \n\t\tQuery tq = null ; \n\t\tfinal Term term = new Term ( cur . getFieldName ( ) , cur . getWord ( ) ) ; \n\t\tif ( isPayloadField ( cur . getFieldName ( ) ) ) { \n\t\t\ttq = new PayloadTermQuery ( term , new AveragePayloadFunction $F72 , _BOOL ) ; \n\t\t\t} \n\t\telse { \n\t\t\ttq = new TermQuery ( term ) ; \n\t\t\t} \n\t\tif ( boost ) { \n\t\t\tfloat boost = cur . getScore ( ) ; \n\t\t\ttq . setBoost ( boost ) ; \n\t\t\tsumQuaredBoost += boost * boost ; \n\t\t\t} \n\t\telse { \n\t\t\tsumQuaredBoost += NUM00 ; \n\t\t\t} \n\t\ttry { \n\t\t\ttmpQuery . add ( tq , BooleanClause . Occur . SHOULD ) ; \n\t\t\tinterestingTerms . add ( cur ) ; \n\t\t\tqterms ++ ; \n\t\t\t} \n\t\tcatch ( BooleanQuery . TooManyClauses ignore ) $F5153 $F66497 ( qterms , maxTerms ) } \n\t$F96817 ( vectorLength , Math , sumQuaredBoost ) if ( vectorLength <= NUM00 ) { \n\t\treturn new MLTResult ( interestingTerms , query ) ; \n\t\t} \n\tbuildBoostedNormalizedQuery ( fieldName , tmpQuery , query , vectorLength , contentStreamQuery ) ; \n\treturn new MLTResult ( interestingTerms , query ) ; \n\t} \n"}, {"code": "$F1431 protected void sequentially ( Consumer < Marker > ... functions ) { \n\tif $F12414 ( functions ) $F665 Collection < ParsingException > $F204 ( errors ) ; \n\tMarker marker = tokens . mark ( ) ; \n\tfor ( Consumer < Marker > function : functions ) { \n\t\ttry { \n\t\t\tfunction . accept ( marker ) ; \n\t\t\t$F665 } \n\t\tcatch ( ParsingException e ) { \n\t\t\terrors . add ( e ) ; \n\t\t\ttokens . rewind ( marker ) ; \n\t\t\t} \n\t\t} \n\tparsingFailed ( marker . position ( ) , errors , NUM00 ) ; \n\t} \n"}, {"code": "public PidFile ( final File file ) throws FileNotFoundException { \n\tif $F170765 ( file ) { \n\t\tthrow new FileNotFoundException ( NUM00 + file + NUM00 ) ; \n\t\t} \n\tthis . pidFile = file ; \n\t} \n"}, {"code": "public void addChildNode ( ExecNode childNode ) $F207 ( childNodes , childNode ) "}, {"code": "static private double quickSelect ( IDoubleVector x , int k , int start , int end ) { \n\tif ( k < start || k > end ) { \n\t\tthrow new AdeCoreIllegalArgumentException $F580 ; \n\t\t} \n\tfinal int pivotIndex = ( ( int ) Math . random ( ) * ( end - start + NUM00 ) ) + start ; \n\tfinal int pivotPosition = partition ( x , start , end , pivotIndex ) ; \n\tif ( pivotPosition == k ) $F8314 ( x , k ) else if ( pivotPosition < k ) { \n\t\treturn quickSelect ( x , k , pivotPosition + NUM00 , end ) ; \n\t\t} \n\telse { \n\t\treturn quickSelect ( x , k , start , pivotPosition - NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "public BayesImEditorObs ( BayesImWrapperObs bayesImWrapperObs ) { \n\tthis ( bayesImWrapperObs , bayesImWrapperObs . getBayesIm ( ) ) ; \n\t} \n"}, {"code": "private $F3803 convertByteArrayListToStringValueList ( $F4358 ( dictionaryByteArrayList ) ) { \n\t$F4361 ( valueList , dictionaryByteArrayList ) for ( $F96 value : dictionaryByteArrayList ) { \n\t\tvalueList . add ( new String ( value , Charset . forName ( CarbonCommonConstants . DEFAULT_CHARSET ) ) ) ; \n\t\t} \n\treturn valueList ; \n\t} \n"}, {"code": "public FileTreeNode ( File parent , String name ) throws SecurityException , FileNotFoundException { \n\tthis ( parent . toPath ( ) , name ) ; \n\t} \n"}, {"code": "private $F27878 possibleParents ( Node x , $F27878 adjx , IKnowledge knowledge ) { \n\t$F27878 $F19827 ( possibleParents ) ; \n\t$F20605 ( _x , x ) for ( Node z : adjx ) { \n\t\t$F20605 ( _z , z ) if ( possibleParentOf ( _z , _x , knowledge ) ) $F207 ( possibleParents , z ) } \n\treturn possibleParents ; \n\t} \n"}, {"code": "public synchronized void remove ( AbstractOption option ) { \n\tif $F105 ( options , option ) { \n\t\tint position = indexOf ( option ) ; \n\t\tList < AbstractOption > oldOptions = new ArrayList < AbstractOption > ( options ) ; \n\t\toptions . remove ( option ) ; \n\t\tList < AbstractOption > newOptions = getOptions ( ) ; \n\t\toption . setCollection ( null ) ; \n\t\tfireIndexedPropertyChange ( PROP_OPTIONS , position , oldOptions , newOptions ) ; \n\t\t} \n\t} \n"}, {"code": "private $F5415 calculatePointerPosition ( float angle ) { \n\tfloat x = ( float ) $F68927 ( mColorWheelRadius , Math , angle ) ; \n\tfloat y = ( float ) $F68922 ( mColorWheelRadius , Math , angle ) ; \n\treturn new float [ ] { \n\t\tx , y } \n\t; \n\t} \n"}, {"code": "public ResourceNode locate ( String sessionID , String path , ResourceNode startNode ) throws DirectoryNotFoundException { \n\tif ( path == null ) $F4915 ( getCurrentNode , sessionID ) else if $F7311 ( path , PROTOCOL ) $F262837 ( path , PROTOCOL ) else if ( path . startsWith ( ROOT_ELEMENT ) && $F40307 ( path , ROOT_ELEMENT ) ) { \n\t\tstartNode = getRootNode ( ) ; \n\t\t$F11255 ( path , ROOT_ELEMENT ) } \n\tif $F1238 ( path , CURRENT_ELEMENT ) return getCurrentNode ( sessionID ) ; \n\telse if $F1238 ( path , ROOT_ELEMENT ) return getRootNode ( ) ; \n\tResourceNode foundNode = null ; \n\tResourceNode nodeToSearch = startNode ; \n\tString pathElements [ ] = path . split ( PATH_SEPARATOR ) ; \n\tif $F9634 ( pathElements ) $F2905 ( getRootNode ) for ( String element : pathElements ) { \n\t\tif $F1277 ( element ) $F598 if $F1238 ( element , PARENT_ELEMENT ) { \n\t\t\tif ( ( foundNode = nodeToSearch . getParent ( ) ) != null ) $F10338 ( nodeToSearch ) else { \n\t\t\t\tthrow new DirectoryNotFoundException $F10797 ( String , path ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tMap < String , ResourceNode > children = nodeToSearch . getChildren ( ) ; \n\t\t\tif $F1238 ( element , ANY_ELEMENT ) { \n\t\t\t\tif ( nodeToSearch . getType ( ) == ResourceType . CLUSTER ) $F6045 ( foundNode , children , memberName ) else if $F3817 ( children ) { \n\t\t\t\t\tfoundNode = getFirst ( children ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tthrow new DirectoryNotFoundException $F4456 ( String , element , path ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse $F6045 ( foundNode , children , element ) if ( foundNode == null ) { \n\t\t\t\tthrow new DirectoryNotFoundException ( String . format ( NUM00 , element , formatPath ( getAbsolutePath ( getRootNode ( ) , nodeToSearch , _BOOL ) , _BOOL ) , path ) ) ; \n\t\t\t\t} \n\t\t\tnodeToSearch = foundNode ; \n\t\t\t} \n\t\t} \n\treturn foundNode ; \n\t} \n"}, {"code": "private void handleProcessError ( JobDefinition job , Process process ) throws IOException { \n\t$F280 ( sb ) $F114263 ( in , process ) ; \n\tint data = NUM00 ; \n\twhile ( data != - NUM00 && ! isInterrupted ( ) ) { \n\t\t$F10201 ( data , in ) if ( data != - NUM00 ) $F46352 ( sb , data ) } \n\tlogger . warn ( NUM00 + job . cut + NUM00 + sb . toString ( ) ) ; \n\t} \n"}, {"code": "$F5761 ( clazz , registeredClasses , isCurrentlySendingSemaphor , Thread , _BOOL ) "}, {"code": "$F9749 ( namespace , attName , attValue , xmlWriter , registerPrefix ) "}, {"code": "private static int calculateDisplayedWidth ( String string ) { \n\tfinal int tabWidth = DEFAULT_TAB_WIDTH ; \n\tint column = NUM00 ; \n\tfor ( $F1088 ( i , string ) ) { \n\t\tif ( NUM00 == string . charAt ( i ) ) { \n\t\t\tcolumn += tabWidth - ( column % tabWidth ) ; \n\t\t\t} \n\t\telse { \n\t\t\tcolumn ++ ; \n\t\t\t} \n\t\t} \n\treturn column ; \n\t} \n"}, {"code": "private static GeneralizedTime finishDecodingFraction ( final String value , final int startPos , final int year , final int month , final int day , final int hour , final int minute , final int second , final int multiplier ) { \n\t$F11550 ( length , value ) final StringBuilder fractionBuffer = new StringBuilder ( ( NUM00 + length ) - startPos ) ; \n\t$F84 ( fractionBuffer ) TimeZone timeZone = null ; \n\touterLoop : for ( int i = startPos ; \n\ti < length ; \n\ti ++ ) { \n\t\t$F1090 ( c , value , i ) switch ( c ) { \n\t\t\t$F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 fractionBuffer . append ( c ) ; \n\t\t\t$F597 $F1262 $F1262 if ( i != $F45793 ( value ) ) { \n\t\t\t\tfinal LocalizableMessage message = WARN_ATTR_SYNTAX_GENERALIZED_TIME_ILLEGAL_FRACTION_CHAR . get ( value , String . valueOf ( c ) ) ; \n\t\t\t\tthrow new LocalizedIllegalArgumentException ( message ) ; \n\t\t\t\t} \n\t\t\ttimeZone = TIME_ZONE_UTC_OBJ ; \n\t\t\tbreak outerLoop ; \n\t\t\t$F1262 $F1262 timeZone = getTimeZoneForOffset ( value , i ) ; \n\t\t\tbreak outerLoop ; \n\t\t\t$F1267 final LocalizableMessage message = WARN_ATTR_SYNTAX_GENERALIZED_TIME_ILLEGAL_FRACTION_CHAR . get ( value , String . valueOf ( c ) ) ; \n\t\t\tthrow new LocalizedIllegalArgumentException ( message ) ; \n\t\t\t} \n\t\t} \n\tif $F1277 ( fractionBuffer ) { \n\t\t$F206930 ( message , WARN_ATTR_SYNTAX_GENERALIZED_TIME_EMPTY_FRACTION , value ) throw new LocalizedIllegalArgumentException ( message ) ; \n\t\t} \n\tif ( timeZone == null ) { \n\t\t$F206930 ( message , WARN_ATTR_SYNTAX_GENERALIZED_TIME_NO_TIME_ZONE_INFO , value ) throw new LocalizedIllegalArgumentException ( message ) ; \n\t\t} \n\tfinal Double fractionValue = Double . parseDouble ( fractionBuffer . toString ( ) ) ; \n\tfinal int $F22510 ( additionalMilliseconds , Math , fractionValue , multiplier ) ; \n\ttry { \n\t\tfinal GregorianCalendar $F13062 ( calendar ) ; \n\t\tcalendar . setLenient ( _BOOL ) ; \n\t\tcalendar . setTimeZone ( timeZone ) ; \n\t\tcalendar . set ( year , month , day , hour , minute , second ) ; \n\t\tcalendar . set ( Calendar . MILLISECOND , additionalMilliseconds ) ; \n\t\treturn new GeneralizedTime ( calendar , null , Long . MIN_VALUE , value ) ; \n\t\t} \n\tcatch ( final Exception e ) { \n\t\tfinal LocalizableMessage message = WARN_ATTR_SYNTAX_GENERALIZED_TIME_ILLEGAL_TIME . get ( value , String . valueOf ( e ) ) ; \n\t\tthrow new LocalizedIllegalArgumentException ( message , e ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public int read $F72 { \n\tif $F11984 ( idx , charSequence ) $F7629 else $F7626 ( charSequence , idx ) } \n"}, {"code": "public void test_getClientAliases $F72 { \n\tinit ( CLIENT ) ; \n\tassertNull ( manager . getClientAliases ( null , null ) ) ; \n\tassertNull ( manager . getClientAliases ( NUM00 , null ) ) ; \n\t$F806 resArray = manager . getClientAliases ( TYPE_RSA , null ) ; \n\tassertNotNull ( resArray ) ; \n\t$F351896 ( assertEquals , resArray ) assertKnownAliases ( resArray ) ; \n\t} \n"}, {"code": "$F27745 ( mUpdateListeners ) "}, {"code": "$F1431 E transfer ( E e , boolean timed , long nanos ) { \n\tQNode s = null ; \n\tboolean isData = ( e != null ) ; \n\tfor ( $F589 ) { \n\t\tQNode t = tail ; \n\t\tQNode h = head ; \n\t\tif ( t == null || h == null ) $F598 if ( h == t || t . isData == isData ) { \n\t\t\tQNode tn = t . next ; \n\t\t\tif ( t != tail ) $F598 if ( tn != null ) $F171537 ( advanceTail , t , tn ) if ( timed && nanos <= NUM00 ) $F1274 if ( s == null ) s = new QNode ( e , isData ) ; \n\t\t\tif ( ! t . casNext ( null , s ) ) $F598 advanceTail ( t , s ) ; \n\t\t\tObject x = awaitFulfill ( s , e , timed , nanos ) ; \n\t\t\tif ( x == s ) { \n\t\t\t\tclean ( t , s ) ; \n\t\t\t\t$F1274 } \n\t\t\tif ( ! s . isOffList ( ) ) { \n\t\t\t\tadvanceHead ( t , s ) ; \n\t\t\t\tif ( x != null ) s . item = s ; \n\t\t\t\ts . waiter = null ; \n\t\t\t\t} \n\t\t\treturn ( x != null ) ? ( E ) x : e ; \n\t\t\t} \n\t\telse { \n\t\t\tQNode m = h . next ; \n\t\t\tif ( t != tail || m == null || h != head ) $F598 Object x = m . item ; \n\t\t\tif ( isData == ( x != null ) || x == m || ! m . casItem ( x , e ) ) $F171537 ( advanceHead , h , m ) advanceHead ( h , m ) ; \n\t\t\t$F139937 ( LockSupport , m ) return ( x != null ) ? ( E ) x : e ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static void println ( char x ) $F18992 ( out , x ) "}, {"code": "private boolean shouldPositionAvatarOnRight $F72 { \n\tfinal boolean isRtl = Build . VERSION . SDK_INT >= Build . VERSION_CODES . JELLY_BEAN_MR1 ? getLayoutDirection ( ) == LAYOUT_DIRECTION_RTL : _BOOL ; \n\tfinal boolean assignedPosition = mAvatarPosition == AVATAR_POSITION_END ; \n\treturn isRtl ? ! assignedPosition : assignedPosition ; \n\t} \n"}, {"code": "$F127810 ( charset , Charset ) "}, {"code": "public static void fail ( String message ) { \n\tthrow new IllegalStateException $F81465 ( message ) ; \n\t} \n"}, {"code": "public void memsetBuffer ( ByteBuffer buffer ) { \n\tmemsetBuffer ( buffer , buffer . limit ( ) ) ; \n\t} \n"}, {"code": "static double fabs ( double a ) $F170694 ( Math , a ) "}, {"code": "protected List < ITEM_TYPE > selectFoldTestItems ( List < ITEM_TYPE > items , int nFolds , int fold ) { \n\tList < ITEM_TYPE > testItems = new ArrayList < ITEM_TYPE > $F72 ; \n\tfor ( $F3836 ( i , items ) ) { \n\t\tif ( i % nFolds == fold ) $F62006 ( testItems , items , i ) } \n\treturn testItems ; \n\t} \n"}, {"code": "private void endFormals $F72 { \n\t$F430955 ( hasFormals , _BOOL , buf ) } \n"}, {"code": "public final CharSequenceTranslator with ( final CharSequenceTranslator ... translators ) { \n\tfinal $F126041 $F126044 ( newArray , translators ) ; \n\tnewArray [ NUM00 ] = this ; \n\t$F7057 ( System , translators , newArray ) $F126047 ( newArray ) } \n"}, {"code": "$F1 public boolean equals ( Object other ) { \n\tif ( ! ( other instanceof Sha256Hash ) ) return _BOOL ; \n\treturn Arrays . equals ( bytes , ( ( Sha256Hash ) other ) . bytes ) ; \n\t} \n"}, {"code": "$F73303 ( axis , trans , prevImageSize , imageSize , prevViewSize , viewSize , drawableSize , m , Matrix , percentage , Math ) "}, {"code": "public Config ( SolrResourceLoader loader , String name ) throws ParserConfigurationException , IOException , SAXException { \n\tthis ( loader , name , null , null ) ; \n\t} \n"}, {"code": "private static HashMap < String , Field > buildFieldCache $F60993 ( cls ) { \n\tfinal HashMap < String , Field > $F8690 ( cache ) ; \n\tfinal $F221457 fields = getAllFields ( cls ) ; \n\tfor ( Field fld : fields ) { \n\t\tString name = null ; \n\t\tfinal Reference refAnn = fld . getAnnotation ( Reference . class ) ; \n\t\tif ( refAnn != null ) name = selectColumnName ( refAnn , fld ) ; \n\t\tif ( name == null ) { \n\t\t\tfinal Column colAnn = fld . getAnnotation ( Column . class ) ; \n\t\t\tif ( colAnn != null ) name = selectColumnName ( colAnn , fld ) ; \n\t\t\t} \n\t\t$F45557 ( name ) cache . put ( name , fld ) ; \n\t\t} \n\treturn cache ; \n\t} \n"}, {"code": "public static long convertDuration ( final String fromUnit , final String toUnit , long value ) { \n\tTimeUnit fromTimeUnit = toTimeUnit ( fromUnit ) ; \n\tTimeUnit toTimeUnit = toTimeUnit ( toUnit ) ; \n\tif ( fromTimeUnit != null && toTimeUnit != null ) { \n\t\treturn toTimeUnit . convert ( value , fromTimeUnit ) ; \n\t\t} \n\telse { \n\t\tthrow new DSSException $F212372 ( fromUnit , toUnit , value ) ; \n\t\t} \n\t} \n"}, {"code": "public static File searchForGroovyScriptFile ( String input ) { \n\t$F9652 ( scriptFileName , input ) $F1705 ( scriptFile , scriptFileName ) $F806 $F167305 ( standardExtensions ) ; \n\tint i = NUM00 ; \n\twhile ( i < standardExtensions . length && $F1905 ( scriptFile ) ) { \n\t\tscriptFile = new File ( scriptFileName + standardExtensions [ i ] ) ; \n\t\ti ++ ; \n\t\t} \n\tif $F1906 ( scriptFile ) $F94463 ( scriptFile , scriptFileName ) return scriptFile ; \n\t} \n"}, {"code": "public XObject execute ( XPathContext xctxt ) throws $F1872 { \n\tif ( xctxt . isSecureProcessing ( ) ) throw new $F1872 ( XPATHMessages . createXPATHMessage ( XPATHErrorResources . ER_EXTENSION_FUNCTION_CANNOT_BE_INVOKED , new Object $F57620 ( toString ) ) ) ; \n\tXObject result ; \n\t$F6518 ( argVec ) $F2199 ( nArgs , m_argVec ) for ( $F119 ( i , nArgs ) ) { \n\t\t$F11427 ( arg , m_argVec , i ) XObject xobj = arg . execute ( xctxt ) ; \n\t\txobj . allowDetachToRelease ( _BOOL ) ; \n\t\targVec . addElement ( xobj ) ; \n\t\t} \n\tExtensionsProvider extProvider = ( ExtensionsProvider ) xctxt . getOwnerObject ( ) ; \n\tObject val = extProvider . extFunction ( this , argVec ) ; \n\tif ( null != val ) { \n\t\tresult = XObject . create ( val , xctxt ) ; \n\t\t} \n\telse { \n\t\tresult = new XNull $F72 ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "private Header createSecurityHeader $F72 { \n\treturn new BasicHeader ( NUM00 , NUM00 + createAuth ( ) ) ; \n\t} \n"}, {"code": "public Picture ( File file ) { \n\ttry $F616 ( image , ImageIO , file ) catch ( IOException e ) { \n\t\t$F301 ( e ) $F1665 ( file ) } \n\t$F268943 ( image , file ) width = image . getWidth ( null ) ; \n\theight = image . getHeight ( null ) ; \n\t$F32928 ( filename , file ) } \n"}, {"code": "static AnnotationStrategy strategyFor ( Annotation annotation ) { \n\tcheckNotNull ( annotation , NUM00 ) ; \n\t$F26425 annotationType = annotation . annotationType ( ) ; \n\tensureRetainedAtRuntime ( annotationType ) ; \n\tensureIsBindingAnnotation ( annotationType ) ; \n\tif ( annotationType . getDeclaredMethods ( ) . length == NUM00 ) { \n\t\treturn new AnnotationTypeStrategy ( annotationType , annotation ) ; \n\t\t} \n\treturn new AnnotationInstanceStrategy ( annotation ) ; \n\t} \n"}, {"code": "public static String encode $F97 ( input ) { \n\t$F193057 ( input ) int zeros = NUM00 ; \n\t$F107776 ( zeros , input ) input = $F17877 ( Arrays , input ) ; \n\t$F10567 ( encoded , input ) int outputStart = encoded . length ; \n\tfor ( $F107777 ( inputStart , zeros , input ) ) { \n\t\tencoded [ -- outputStart ] = ALPHABET [ divmod ( input , inputStart , NUM00 , NUM00 ) ] ; \n\t\t$F107780 ( input , inputStart ) } \n\twhile $F304435 ( outputStart , encoded , ENCODED_ZERO ) { \n\t\t++ outputStart ; \n\t\t} \n\twhile ( -- zeros >= NUM00 ) { \n\t\tencoded [ -- outputStart ] = ENCODED_ZERO ; \n\t\t} \n\treturn new String $F218 ( encoded , outputStart ) ; \n\t} \n"}, {"code": "private void addVolumeToBlockConsistencyGroup ( URI cgUri , Volume volume ) { \n\tvolume . addConsistencyGroup ( cgUri . toString ( ) ) ; \n\t_dbClient . persistObject ( volume ) ; \n\t} \n"}, {"code": "public static boolean lazyGaussianElimination ( final int var2Eq [ ] [ ] , final $F2469 c , final $F2027 variable , final $F2469 solution ) { \n\treturn lazyGaussianElimination ( null , var2Eq , c , variable , solution ) ; \n\t} \n"}, {"code": "private static int analyze ( Compiler compiler , int stepOpCodePos , int stepIndex ) throws $F1872 { \n\tint stepType ; \n\tint stepCount = NUM00 ; \n\tint analysisResult = NUM00 ; \n\twhile ( OpCodes . ENDOP != ( stepType = compiler . getOp ( stepOpCodePos ) ) ) { \n\t\tstepCount ++ ; \n\t\tboolean predAnalysis = analyzePredicate ( compiler , stepOpCodePos , stepType ) ; \n\t\tif ( predAnalysis ) analysisResult |= BIT_PREDICATE ; \n\t\tswitch ( stepType ) { \n\t\t\tcase OpCodes . OP_VARIABLE : case OpCodes . OP_EXTFUNCTION : case OpCodes . OP_FUNCTION : case OpCodes . OP_GROUP : analysisResult |= BIT_FILTER ; \n\t\t\t$F597 case OpCodes . FROM_ROOT : analysisResult |= BIT_ROOT ; \n\t\t\t$F597 case OpCodes . FROM_ANCESTORS : analysisResult |= BIT_ANCESTOR ; \n\t\t\t$F597 case OpCodes . FROM_ANCESTORS_OR_SELF : analysisResult |= BIT_ANCESTOR_OR_SELF ; \n\t\t\t$F597 case OpCodes . FROM_ATTRIBUTES : analysisResult |= BIT_ATTRIBUTE ; \n\t\t\t$F597 case OpCodes . FROM_NAMESPACE : analysisResult |= BIT_NAMESPACE ; \n\t\t\t$F597 case OpCodes . FROM_CHILDREN : analysisResult |= BIT_CHILD ; \n\t\t\t$F597 case OpCodes . FROM_DESCENDANTS : analysisResult |= BIT_DESCENDANT ; \n\t\t\t$F597 case OpCodes . FROM_DESCENDANTS_OR_SELF : if ( NUM00 == stepCount && BIT_ROOT == analysisResult ) { \n\t\t\t\tanalysisResult |= BIT_ANY_DESCENDANT_FROM_ROOT ; \n\t\t\t\t} \n\t\t\tanalysisResult |= BIT_DESCENDANT_OR_SELF ; \n\t\t\t$F597 case OpCodes . FROM_FOLLOWING : analysisResult |= BIT_FOLLOWING ; \n\t\t\t$F597 case OpCodes . FROM_FOLLOWING_SIBLINGS : analysisResult |= BIT_FOLLOWING_SIBLING ; \n\t\t\t$F597 case OpCodes . FROM_PRECEDING : analysisResult |= BIT_PRECEDING ; \n\t\t\t$F597 case OpCodes . FROM_PRECEDING_SIBLINGS : analysisResult |= BIT_PRECEDING_SIBLING ; \n\t\t\t$F597 case OpCodes . FROM_PARENT : analysisResult |= BIT_PARENT ; \n\t\t\t$F597 case OpCodes . FROM_SELF : analysisResult |= BIT_SELF ; \n\t\t\t$F597 case OpCodes . MATCH_ATTRIBUTE : analysisResult |= ( BIT_MATCH_PATTERN | BIT_ATTRIBUTE ) ; \n\t\t\t$F597 case OpCodes . MATCH_ANY_ANCESTOR : analysisResult |= ( BIT_MATCH_PATTERN | BIT_ANCESTOR ) ; \n\t\t\t$F597 case OpCodes . MATCH_IMMEDIATE_ANCESTOR : analysisResult |= ( BIT_MATCH_PATTERN | BIT_PARENT ) ; \n\t\t\t$F597 $F1267 throw new RuntimeException ( XSLMessages . createXPATHMessage ( XPATHErrorResources . ER_NULL_ERROR_HANDLER , $F19685 ( Integer , stepType ) ) ) ; \n\t\t\t} \n\t\tif ( OpCodes . NODETYPE_NODE == compiler . getOp ( stepOpCodePos + NUM00 ) ) { \n\t\t\tanalysisResult |= BIT_NODETEST_ANY ; \n\t\t\t} \n\t\tstepOpCodePos = compiler . getNextStepPos ( stepOpCodePos ) ; \n\t\t$F7995 ( stepOpCodePos ) } \n\tanalysisResult |= ( stepCount & BITS_COUNT ) ; \n\treturn analysisResult ; \n\t} \n"}, {"code": "public void compressMyOwnWay $F23416 ( indexes ) { \n\t$F3807 list = new $F15272 ( CarbonCommonConstants . CONSTANT_SIZE_TEN ) ; \n\t$F3807 map = new $F15272 ( CarbonCommonConstants . CONSTANT_SIZE_TEN ) ; \n\tint k = NUM00 ; \n\tint i = NUM00 ; \n\tfor ( $F255681 ( i , indexes ) ) { \n\t\tif ( $F52395 ( indexes , i ) == NUM00 ) { \n\t\t\tk ++ ; \n\t\t\t} \n\t\telse { \n\t\t\tif ( k > NUM00 ) { \n\t\t\t\tmap . add ( $F716 ( list ) ) ; \n\t\t\t\tlist . add ( indexes [ i - k - NUM00 ] ) ; \n\t\t\t\tlist . add ( indexes [ i - NUM00 ] ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tlist . add ( indexes [ i - NUM00 ] ) ; \n\t\t\t\t} \n\t\t\tk = NUM00 ; \n\t\t\t} \n\t\t} \n\tif ( k > NUM00 ) { \n\t\tmap . add ( $F716 ( list ) ) ; \n\t\tlist . add ( indexes [ i - k - NUM00 ] ) ; \n\t\tlist . add ( indexes [ i - NUM00 ] ) ; \n\t\t} \n\telse { \n\t\tlist . add ( indexes [ i - NUM00 ] ) ; \n\t\t} \n\tdataAfterComp = convertToArray ( list ) ; \n\tif $F6763 ( indexes , dataAfterComp ) { \n\t\t$F4470 ( indexMap ) } \n\telse { \n\t\tindexMap = convertToArray ( map ) ; \n\t\t} \n\tif ( dataAfterComp . length == NUM00 && indexMap . length == NUM00 ) { \n\t\talreadySorted = _BOOL ; \n\t\t} \n\t} \n"}, {"code": "private void prependDecrement ( BasicBlock bb , IR ir ) { \n\tif ( DEBUG ) VM . sysWrite ( NUM00 + bb + NUM00 ) ; \n\tRegisterOperand use = cbsReg . copyRO ( ) ; \n\tRegisterOperand def = use . copyU2D ( ) ; \n\tInstruction inc = Binary . create ( INT_ADD , def , use , IRTools . IC ( - NUM00 ) ) ; \n\tbb . prependInstruction ( inc ) ; \n\t} \n"}, {"code": "public void addListener ( ConnectableDeviceListener listener ) $F2202 ( listeners , listener ) "}, {"code": "private static final String toHexString $F3295 ( bs ) { \n\tString hex = NUM00 ; \n\t$F83 ( res ) for ( byte b : bs ) { \n\t\tres . append ( hex . charAt ( $F97528 ( b ) ) ) ; \n\t\tres . append ( hex . charAt ( ( b & NUM00 ) ) ) ; \n\t\t} \n\t$F92 ( res ) } \n"}, {"code": "$F46593 ( checkNotClosed , trimToSize , journalWriter ) "}, {"code": "public double distance_to_the_left ( PlaLineInt p_line ) { \n\tdouble result = Integer . MAX_VALUE ; \n\tfor ( $F2010 ( index , border_line_count ) ) { \n\t\tPlaPointFloat curr_corner = corner_approx ( index ) ; \n\t\tPlaSide line_side = p_line . side_of ( curr_corner , NUM00 ) ; \n\t\tif ( line_side == PlaSide . COLLINEAR ) { \n\t\t\tline_side = p_line . side_of ( corner ( index ) ) ; \n\t\t\t} \n\t\tif ( line_side == PlaSide . ON_THE_RIGHT ) $F150 result = Math . min ( result , p_line . distance_signed ( curr_corner ) ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "$F192509 ( is , close , b , len , _BOOL , n , c , System , last ) "}, {"code": "public boolean displayTopicFromNames $F4374 ( names ) { \n\tif $F9634 ( names ) return displayTopic ( DEFAULT ) ; \n\telse { \n\t\t$F280 ( helpName ) for ( String name : names ) { \n\t\t\t$F275070 ( helpName ) helpName . append ( name ) ; \n\t\t\t} \n\t\t$F17718 ( displayTopic , helpName ) } \n\t} \n"}, {"code": "public boolean acceptIdentical ( String filePath , String fileName ) { \n\t$F397 ( fileNameGlob , _BOOL ) if $F45007 ( fileName , fileNameGlob ) return _BOOL ; \n\tif ( filePath != null ) { \n\t\t$F24867 ( lastUnixPos , filePath ) $F24867 ( lastWindowsPos , filePath ) $F17432 ( index , Math , lastUnixPos , lastWindowsPos ) $F36289 ( filename , filePath , index ) return filename != null && filename . equalsIgnoreCase ( fileNameGlob ) ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "private void validateNumCoresBlockSort $F72 { \n\tString numCoresStr = carbonProperties . getProperty ( CarbonCommonConstants . NUM_CORES_BLOCK_SORT , CarbonCommonConstants . NUM_CORES_BLOCK_SORT_DEFAULT_VAL ) ; \n\ttry { \n\t\t$F27213 ( numCores , Integer , numCoresStr ) if ( numCores < CarbonCommonConstants . NUM_CORES_BLOCK_SORT_MIN_VAL || numCores > CarbonCommonConstants . NUM_CORES_BLOCK_SORT_MAX_VAL ) { \n\t\t\tLOGGER . info ( NUM00 + numCoresStr + NUM00 + CarbonCommonConstants . NUM_CORES_BLOCK_SORT_DEFAULT_VAL ) ; \n\t\t\tcarbonProperties . setProperty ( CarbonCommonConstants . NUM_CORES_BLOCK_SORT , CarbonCommonConstants . NUM_CORES_BLOCK_SORT_DEFAULT_VAL ) ; \n\t\t\t} \n\t\t} \n\tcatch ( NumberFormatException e ) { \n\t\tLOGGER . info ( NUM00 + numCoresStr + NUM00 + CarbonCommonConstants . NUM_CORES_BLOCK_SORT_DEFAULT_VAL ) ; \n\t\tcarbonProperties . setProperty ( CarbonCommonConstants . NUM_CORES_BLOCK_SORT , CarbonCommonConstants . NUM_CORES_BLOCK_SORT_DEFAULT_VAL ) ; \n\t\t} \n\t} \n"}, {"code": "public static MemoryMatchFragment newInstance $F72 { \n\treturn new MemoryMatchFragment $F72 ; \n\t} \n"}, {"code": "static void createFileFromResource ( String resource , Resource file ) throws IOException $F16625 ( createFileFromResource , resource , file ) "}, {"code": "public int endObject $F72 { \n\tif ( vtable == null || ! nested ) $F38997 addInt ( NUM00 ) ; \n\tint vtableloc = offset ( ) ; \n\tfor ( $F18298 ( i , vtable_in_use ) ) { \n\t\tshort off = ( short ) ( vtable [ i ] != NUM00 ? vtableloc - vtable [ i ] : NUM00 ) ; \n\t\taddShort ( off ) ; \n\t\t} \n\tfinal int standard_fields = NUM00 ; \n\taddShort ( ( short ) ( vtableloc - object_start ) ) ; \n\taddShort ( ( short ) ( ( vtable_in_use + standard_fields ) * SIZEOF_SHORT ) ) ; \n\tint existing_vtable = NUM00 ; \n\touter_loop : for ( $F119 ( i , num_vtables ) ) { \n\t\tint vt1 = bb . capacity ( ) - vtables [ i ] ; \n\t\tint vt2 = space ; \n\t\tshort len = bb . getShort ( vt1 ) ; \n\t\tif ( len == bb . getShort ( vt2 ) ) { \n\t\t\tfor ( int j = SIZEOF_SHORT ; \n\t\t\tj < len ; \n\t\t\tj += SIZEOF_SHORT ) { \n\t\t\t\tif ( bb . getShort ( vt1 + j ) != bb . getShort ( vt2 + j ) ) { \n\t\t\t\t\tcontinue outer_loop ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\texisting_vtable = vtables [ i ] ; \n\t\t\tbreak outer_loop ; \n\t\t\t} \n\t\t} \n\tif ( existing_vtable != NUM00 ) { \n\t\tspace = bb . capacity ( ) - vtableloc ; \n\t\tbb . putInt ( space , existing_vtable - vtableloc ) ; \n\t\t} \n\telse { \n\t\tif ( num_vtables == vtables . length ) vtables = Arrays . copyOf ( vtables , num_vtables * NUM00 ) ; \n\t\tvtables [ num_vtables ++ ] = offset ( ) ; \n\t\tbb . putInt ( bb . capacity ( ) - vtableloc , offset ( ) - vtableloc ) ; \n\t\t} \n\tnested = _BOOL ; \n\treturn vtableloc ; \n\t} \n"}, {"code": "private void endList ( boolean orderedList ) { \n\tif $F5973 ( mParagraphStyles ) { \n\t\tAccumulatedParagraphStyle style = mParagraphStyles . peek ( ) ; \n\t\tParagraphType type = style . getType ( ) ; \n\t\tif ( ( orderedList && ( type . isNumbering ( ) || type == ParagraphType . INDENTATION_OL ) ) || ( ! orderedList && ( type . isBullet ( ) || type == ParagraphType . INDENTATION_UL ) ) ) { \n\t\t\tint indent = style . getRelativeIndent ( ) ; \n\t\t\tif ( indent > NUM00 ) { \n\t\t\t\tstyle . setRelativeIndent ( indent - NUM00 ) ; \n\t\t\t\tstyle . setAbsoluteIndent ( style . getAbsoluteIndent ( ) - NUM00 ) ; \n\t\t\t\t} \n\t\t\telse $F89427 ( mParagraphStyles ) } \n\t\telse { \n\t\t\t$F34454 ( mParagraphStyles ) endList ( orderedList ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static void perspectiveM ( $F1986 m , int offset , double fovy , double aspect , double zNear , double zFar ) { \n\tdouble f = NUM00 / $F122199 ( Math , fovy ) ; \n\tdouble rangeReciprocal = NUM00 / ( zNear - zFar ) ; \n\tm [ offset + NUM00 ] = f / aspect ; \n\tm [ offset + NUM00 ] = NUM00 ; \n\tm [ offset + NUM00 ] = NUM00 ; \n\tm [ offset + NUM00 ] = NUM00 ; \n\tm [ offset + NUM00 ] = NUM00 ; \n\tm [ offset + NUM00 ] = f ; \n\tm [ offset + NUM00 ] = NUM00 ; \n\tm [ offset + NUM00 ] = NUM00 ; \n\tm [ offset + NUM00 ] = NUM00 ; \n\tm [ offset + NUM00 ] = NUM00 ; \n\tm [ offset + NUM00 ] = ( zFar + zNear ) * rangeReciprocal ; \n\tm [ offset + NUM00 ] = - NUM00 ; \n\tm [ offset + NUM00 ] = NUM00 ; \n\tm [ offset + NUM00 ] = NUM00 ; \n\tm [ offset + NUM00 ] = NUM00 * zFar * zNear * rangeReciprocal ; \n\tm [ offset + NUM00 ] = NUM00 ; \n\t} \n"}, {"code": "protected double compute ( String value ) { \n\tif ( value != null ) { \n\t\ttry $F2404 ( Double , value ) catch ( NumberFormatException e ) { \n\t\t\tif ( POSITIVE_INFINITY_ <missing ')'> $F94540 ( value ) ) $F90685 ( Double ) <missing '}'> else if ( NEGATIVE_INFINITY_ <missing ')'> $F94540 ( value ) ) $F86429 ( Double ) return Double . NaN ; \n\t\t\t} \n\t\t"}, {"code": "protected int readBlock $F72 { \n\tblockSize = read ( ) ; \n\tint n = NUM00 ; \n\tif ( blockSize > NUM00 ) { \n\t\ttry { \n\t\t\tint count = NUM00 ; \n\t\t\twhile ( n < blockSize ) { \n\t\t\t\tcount = in . read ( block , n , blockSize - n ) ; \n\t\t\t\t$F167039 ( count ) n += count ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F29052 if ( n < blockSize ) { \n\t\t\tstatus = STATUS_FORMAT_ERROR ; \n\t\t\t} \n\t\t} \n\treturn n ; \n\t} \n"}, {"code": "boolean isDuplicateRoleColumn ( int column ) $F298 ( duplicateRoleColumn , column ) "}, {"code": "public TimestampSpeechletRequestVerifier ( long tolerance , TimeUnit unit ) { \n\t$F6853 ( tolerance ) toleranceInMilliseconds = unit . toMillis ( tolerance ) ; \n\t} \n"}, {"code": "private boolean isOutsideDocElem $F72 { \n\treturn ( null == m_docFrag ) && $F10470 ( m_elemStack ) && ( null == m_currentNode || m_currentNode . getNodeType ( ) == Node . DOCUMENT_NODE ) ; \n\t} \n"}, {"code": "public void shutdown $F72 { \n\tCountDownLatch wait_l ; \n\t$F37039 ( this , wait_l , waitShutdown ) Shutdown_ind = _BOOL ; \n\ttry { \n\t\tif ( wait_l != null ) { \n\t\t\tif ( wait_l . await ( NUM00 , TimeUnit . MILLISECONDS ) ) $F973 ( LOG ) else $F10910 ( LOG ) } \n\t\telse $F22715 ( LOG ) } \n\tcatch ( InterruptedException int_exc ) $F10911 ( LOG ) } \n"}, {"code": "void paintStrokes ( Rectangle r , Graphics g , int axis , $F2027 lengthPattern , $F197086 colorPattern ) { \n\tboolean xAxis = ( axis == View . X_AXIS ) ; \n\tint start = NUM00 ; \n\tint end = ( xAxis ? r . width : r . height ) ; \n\twhile ( start < end ) { \n\t\tfor ( $F1139 ( i , lengthPattern ) ) { \n\t\t\t$F66497 ( start , end ) int length = lengthPattern [ i ] ; \n\t\t\tColor c = colorPattern [ i ] ; \n\t\t\tif ( c != null ) { \n\t\t\t\tint x = r . x + ( xAxis ? start : NUM00 ) ; \n\t\t\t\tint y = r . y + ( xAxis ? NUM00 : start ) ; \n\t\t\t\tint width = xAxis ? length : r . width ; \n\t\t\t\tint height = xAxis ? r . height : length ; \n\t\t\t\tg . setColor ( c ) ; \n\t\t\t\tg . fillRect ( x , y , width , height ) ; \n\t\t\t\t} \n\t\t\tstart += length ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void deleteChildren ( Element container ) { \n\twhile $F49521 ( container ) { \n\t\tcontainer . removeChild ( container . getLastChild ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "public String fillParamWithEventAttrib ( String paramData , Event event ) { \n\tif $F57476 ( database ) { \n\t\tthrow new IllegalStateException ( TAG + NUM00 ) ; \n\t\t} \n\t$F83 ( retVal ) int cursor = NUM00 ; \n\twhile $F7007 ( cursor , paramData ) { \n\t\t$F12712 ( openBracketIdx , paramData , cursor ) $F12712 ( closeBracketIdx , paramData , cursor ) if ( openBracketIdx == - NUM00 || closeBracketIdx == - NUM00 || openBracketIdx + NUM00 >= closeBracketIdx ) { \n\t\t\t$F13047 ( retVal , paramData , cursor ) $F597 } \n\t\t$F129846 ( attr , paramData , openBracketIdx , closeBracketIdx ) String param = paramData . substring ( openBracketIdx , closeBracketIdx + NUM00 ) ; \n\t\tString paramAttr ; \n\t\ttry { \n\t\t\tparamAttr = event . getAttribute ( attr ) ; \n\t\t\t} \n\t\tcatch ( IllegalArgumentException e ) { \n\t\t\tparamAttr = param ; \n\t\t\t} \n\t\t$F13037 ( retVal , paramData , cursor , openBracketIdx ) retVal . append ( paramAttr ) ; \n\t\tcursor = closeBracketIdx + NUM00 ; \n\t\t} \n\tLog . d ( NUM00 , $F31144 ( paramData , retVal ) ) ; \n\t$F92 ( retVal ) } \n"}, {"code": "public static double twoPow ( int power ) { \n\tif ( power <= - MAX_DOUBLE_EXPONENT ) { \n\t\tif ( power >= MIN_DOUBLE_EXPONENT ) { \n\t\t\treturn Double . longBitsToDouble ( NUM00 > > ( - ( power + MAX_DOUBLE_EXPONENT ) ) ) ; \n\t\t\t} \n\t\telse $F1083 } \n\telse if ( power > MAX_DOUBLE_EXPONENT ) $F90685 ( Double ) else { \n\t\treturn Double . longBitsToDouble ( ( ( long ) ( power + MAX_DOUBLE_EXPONENT ) ) < < NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "$F1431 public static Type resolveTypeVariable ( TypeVariable name , Class declaringClass , Class topClass ) { \n\tType type = resolveTypeVariable ( name , declaringClass , $F4190 , topClass ) ; \n\tif ( type == null ) { \n\t\ttype = $F12222 ; \n\t\t} \n\treturn type ; \n\t} \n"}, {"code": "private ResourceImpl aggregate ( ResourceImpl resourceA , ResourceImpl resourceB ) throws NotFoundException { \n\tfinal String typeId = resourceA . getType ( ) ; \n\tfinal ResourceType resourceType = getResourceType ( typeId ) ; \n\treturn resourceType . aggregate ( resourceA , resourceB ) ; \n\t} \n"}, {"code": "public static boolean renameFile $F1947 ( filePath , oldFilename , newFilename ) { \n\tif ( ( filePath == null ) || filePath . isEmpty ( ) || ( oldFilename == null ) || oldFilename . isEmpty ( ) || ( newFilename == null ) || newFilename . isEmpty ( ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tFile oldFile = new File ( filePath + File . separator + oldFilename ) ; \n\tFile newFile = new File ( filePath + File . separator + newFilename ) ; \n\tboolean isSuccessfulRename ; \n\ttry { \n\t\tisSuccessfulRename = oldFile . renameTo ( newFile ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F246959 ( logger , e , System , StackTrace ) isSuccessfulRename = _BOOL ; \n\t\t} \n\treturn isSuccessfulRename ; \n\t} \n"}, {"code": "$F22609 public void startImageScan ( String dataStore , Long scanRate , Long timeout , AsyncMethodCallback < Host . AsyncClient . start_image_scan_call > handler ) throws RpcException { \n\tensureClient ( ) ; \n\tStartImageScanRequest request = new StartImageScanRequest ( dataStore ) ; \n\tif ( null != scanRate ) { \n\t\trequest . setScan_rate ( scanRate ) ; \n\t\t} \n\tif ( null != timeout ) { \n\t\trequest . setTimeout ( timeout ) ; \n\t\t} \n\ttry { \n\t\t$F22629 ( logger , getHostIp , request ) clientProxy . setTimeout ( START_IMAGE_SCAN_TIMEOUT_MS ) ; \n\t\tclientProxy . start_image_scan ( request , handler ) ; \n\t\t} \n\t$F22635 ( e ) } \n"}, {"code": "public static String format ( int n , String col ) { \n\tString res = padd + n ; \n\treturn res . substring ( $F15171 ( res , col ) ) ; \n\t} \n"}, {"code": "public GitConflictException ( String message ) { \n\tsuper ( message ) ; \n\t} \n"}, {"code": "private void trace $F72 { \n\tglUseProgram ( photonTraceProgram ) ; \n\t$F25238 ( thisTime , System ) $F188873 ( elapsedSeconds , thisTime , firstTime ) glUniform1f ( timeUniform , elapsedSeconds ) ; \n\tglBindBufferBase ( GL_SHADER_STORAGE_BUFFER , boxesSsboBinding , ssbo ) ; \n\tglBindBufferBase ( GL_UNIFORM_BUFFER , imagesUboBinding , imageHandlesUbo ) ; \n\tint invocationsPerDimension = photonsPerFrame ; \n\tint worksizeX = mathRoundPoT ( invocationsPerDimension ) ; \n\tint worksizeY = mathRoundPoT ( invocationsPerDimension ) ; \n\tif ( variableGroupSize ) { \n\t\tARBComputeVariableGroupSize . glDispatchComputeGroupSizeARB ( worksizeX / workGroupSizeX , worksizeY / workGroupSizeY , NUM00 , workGroupSizeX , workGroupSizeY , NUM00 ) ; \n\t\t} \n\telse { \n\t\tglDispatchCompute ( worksizeX / workGroupSizeX , worksizeY / workGroupSizeY , NUM00 ) ; \n\t\t} \n\tglMemoryBarrier ( GL_SHADER_IMAGE_ACCESS_BARRIER_BIT ) ; \n\tglBindBufferBase ( GL_SHADER_STORAGE_BUFFER , boxesSsboBinding , NUM00 ) ; \n\tglBindBufferBase ( GL_UNIFORM_BUFFER , imagesUboBinding , NUM00 ) ; \n\tglUseProgram ( NUM00 ) ; \n\t} \n"}, {"code": "public caption addElement ( String element ) { \n\taddElementToRegistry ( Integer . toString ( element . hashCode ( ) ) , element ) ; \n\treturn ( this ) ; \n\t} \n"}, {"code": "protected void doResetCurrentPosition $F72 { \n\tthis . currentPosition = this . position ; \n\t} \n"}, {"code": "public FloatBuffer put $F11671 ( src , srcOffset , floatCount ) $F11682 ( JTranscArrays , src , srcOffset , floatCount , remaining , i , put , this ) "}, {"code": "public String readLine $F72 { \n\tString line ; \n\ttry { \n\t\tline = scanner . nextLine ( ) ; \n\t\t} \n\tcatch ( NoSuchElementException e ) { \n\t\tline = null ; \n\t\t} \n\treturn line ; \n\t} \n"}, {"code": "private boolean messageChanged ( String oldMessage , String newMessage ) { \n\treturn ( ( newMessage == null ) && ( oldMessage != null ) ) || ( ( newMessage != null ) && ! newMessage . equals ( oldMessage ) ) ; \n\t} \n"}, {"code": "public static int copy ( InputStream in , OutputStream out ) throws IOException { \n\t$F18062 ( Assert , in ) $F18062 ( Assert , out ) try { \n\t\treturn StreamUtils . copy ( in , out ) ; \n\t\t} \n\tfinally { \n\t\t$F18072 ( in ) $F18072 ( out ) } \n\t} \n"}, {"code": "private MultiLineString readMultiLine ( OraGeom oraGeom ) { \n\tint nElem = oraGeom . numElements ( ) ; \n\t$F19151 ( geoms ) for ( $F119 ( i , nElem ) ) { \n\t\tint etype = oraGeom . eType ( i ) ; \n\t\tif ( etype != OraGeom . ETYPE . LINE ) $F597 $F12366 ( geoms , readLine , oraGeom , i ) } \n\tMultiLineString lines = geometryFactory . createMultiLineString ( GeometryFactory . toLineStringArray ( geoms ) ) ; \n\treturn lines ; \n\t} \n"}, {"code": "public boolean isCalledMethod ( String className , String methodName ) { \n\tif $F2979 ( toTestMethods ) computeInterestingClasses ( graph ) ; \n\tif ( toTestMethods . contains ( className + methodName ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public Explanation idfExplain ( CollectionStatistics collectionStats , TermStatistics termStats [ ] ) { \n\tfinal long docCount = collectionStats . docCount ( ) == - NUM00 ? collectionStats . maxDoc ( ) : collectionStats . docCount ( ) ; \n\tfloat idf = NUM00 ; \n\tList < Explanation > $F204 ( details ) ; \n\tfor ( final TermStatistics stat : termStats ) { \n\t\tfinal long df = stat . docFreq ( ) ; \n\t\tfinal float termIdf = idf ( df , docCount ) ; \n\t\tdetails . add ( Explanation . match ( termIdf , NUM00 + df + NUM00 + docCount + NUM00 ) ) ; \n\t\tidf += termIdf ; \n\t\t} \n\treturn Explanation . match ( idf , NUM00 , details ) ; \n\t} \n"}, {"code": "public void removeArea ( final Section AREA ) { \n\t$F77681 ( AREA ) areas . remove ( AREA ) ; \n\tCollections . sort ( areas , new SectionComparator $F72 ) ; \n\tfireUpdateEvent ( SECTION_EVENT ) ; \n\t} \n"}, {"code": "public void testEmptyRunIndex $F72 { \n\tString rs = NUM00 ; \n\tSettings s = new Settings $F580 ; \n\ts . setSecondaryNamespace ( NUM00 ) ; \n\tassertEquals ( s . getInt ( rs ) , NUM00 ) ; \n\tSettings . setRunIndex ( NUM00 ) ; \n\tassertEquals ( s . getInt ( rs ) , NUM00 ) ; \n\tSettings . setRunIndex ( NUM00 ) ; \n\tassertEquals ( s . getInt ( rs ) , NUM00 ) ; \n\tSettings . setRunIndex ( NUM00 ) ; \n\tassertEquals ( s . getInt ( rs ) , NUM00 ) ; \n\t} \n"}, {"code": "public void clear $F72 { \n\t$F101536 ( mLock , mGraphics ) postInvalidate ( ) ; \n\t} \n"}, {"code": "$F1431 public void connect ( final BluetoothDevice device , final ILogSession session ) { \n\t$F153626 ( mManagedDevices , device ) mManagedDevices . add ( device ) ; \n\tBleManager < BleManagerCallbacks > manager = mBleManagers . get ( device ) ; \n\tif ( manager != null ) { \n\t\tif ( session != null ) manager . setLogger ( session ) ; \n\t\tmanager . connect ( device ) ; \n\t\t} \n\telse { \n\t\tmBleManagers . put ( device , manager = initializeManager ( ) ) ; \n\t\tmanager . setGattCallbacks ( BleMulticonnectProfileService . this ) ; \n\t\tmanager . setLogger ( session ) ; \n\t\tmanager . connect ( device ) ; \n\t\t} \n\t} \n"}, {"code": "public void testCase19 $F72 { \n\t$F221347 $F221350 int aSign = NUM00 ; \n\tint bSign = - NUM00 ; \n\tbyte $F3018 = { \n\t\tNUM00 , - NUM00 , NUM00 , NUM00 , NUM00 } \n\t; \n\t$F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F221355 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) } \n"}, {"code": "public ScannerException ( ErrorMessages message ) { \n\tthis ( null , ErrorMessages . get ( message ) , message , - NUM00 , - NUM00 ) ; \n\t} \n"}, {"code": "$F60342 ( mSmallestWidthDp , mInPortrait ) "}, {"code": "$F49286 ( value , absMin , absMax , absValue , Math ) "}, {"code": "private static void formatTimeZone ( Calendar cal , StringBuilder buf ) { \n\tTimeZone tz = cal . getTimeZone ( ) ; \n\t$F8249 ( tz ) int offset ; \n\tif ( tz . inDaylightTime ( cal . getTime ( ) ) ) { \n\t\toffset = tz . getRawOffset ( ) + ( tz . useDaylightTime ( ) ? NUM00 : NUM00 ) ; \n\t\t} \n\telse { \n\t\toffset = tz . getRawOffset ( ) ; \n\t\t} \n\tif ( offset == NUM00 ) { \n\t\t$F84 ( buf ) $F665 } \n\tif ( offset >= NUM00 ) $F84 ( buf ) else { \n\t\t$F84 ( buf ) offset *= - NUM00 ; \n\t\t} \n\toffset /= NUM00 * NUM00 ; \n\tformatTwoDigits ( offset / NUM00 , buf ) ; \n\t$F84 ( buf ) formatTwoDigits ( offset % NUM00 , buf ) ; \n\t} \n"}, {"code": "$F21351 ( l , last , p , item , first , count , notFull ) "}, {"code": "public MutableString ( final MutableString s ) { \n\t$F43187 ( makeCompactMutableString , s ) System . arraycopy ( s . array , NUM00 , array , NUM00 , array . length ) ; \n\t} \n"}, {"code": "private void request $F72 { \n\tif ( isVisible ( ) && stream != null && $F1030 ( stream ) ) { \n\t\tloading = _BOOL ; \n\t\tif ( type == Type . FOLLOWERS ) { \n\t\t\tapi . getFollowers ( stream ) ; \n\t\t\t} \n\t\telse if ( type == Type . SUBSCRIBERS ) { \n\t\t\tapi . getSubscribers ( stream ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public $F373359 mungedStyle $F72 { \n\t$F373359 st = built ( ) ; \n\tif ( includeBasicEntityForSubject ) { \n\t\tst . remove ( entityDataAboutDecl ) ; \n\t\tst . remove ( entityDataVersionDecl ) ; \n\t\tst . remove ( entityDataDateModifiedDecl ) ; \n\t\tstatement ( st , uris . entity ( ) + entity , SchemaDotOrg . VERSION , version ) ; \n\t\tstatement ( st , uris . entity ( ) + entity , SchemaDotOrg . DATE_MODIFIED , dateModified ) ; \n\t\t} \n\tst . remove ( statementTypeDecl ) ; \n\tfor ( ExtraInfo e : extraInfo ) { \n\t\te . munge ( st ) ; \n\t\t} \n\treturn st ; \n\t} \n"}, {"code": "private void writeRequest ( final NextFilter nextFilter , final SocksProxyRequest request , int step ) { \n\ttry { \n\t\tIoBuffer buf = null ; \n\t\tif ( step == SocksProxyConstants . SOCKS5_GREETING_STEP ) { \n\t\t\tbuf = encodeInitialGreetingPacket ( request ) ; \n\t\t\t} \n\t\telse if ( step == SocksProxyConstants . SOCKS5_AUTH_STEP ) { \n\t\t\tbuf = encodeAuthenticationPacket ( request ) ; \n\t\t\tif ( buf == null ) { \n\t\t\t\tstep = SocksProxyConstants . SOCKS5_REQUEST_STEP ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( step == SocksProxyConstants . SOCKS5_REQUEST_STEP ) { \n\t\t\tbuf = encodeProxyRequestPacket ( request ) ; \n\t\t\t} \n\t\t$F14257 ( buf ) writeData ( nextFilter , buf ) ; \n\t\t} \n\t$F19456 ( closeSession , ex ) } \n"}, {"code": "public synchronized void putAsInt ( Object key , int value ) { \n\tput ( key , new Integer ( value ) ) ; \n\t} \n"}, {"code": "public void close $F72 throws IOException { \n\tif ( writer != null ) $F881 ( writer ) else { \n\t\tcb = null ; \n\t\tclosed = _BOOL ; \n\t\t} \n\t} \n"}, {"code": "private CertPath buildCertPath ( X509Certificate endCert ) throws CertificatePathBuildingException { \n\tCertPathBuilder cpb = null ; \n\ttry $F14527 ( cpb , CertPathBuilder ) catch ( NoSuchAlgorithmException e ) { \n\t\tthrow new CertificatePathBuildingException $F11592 ( e ) ; \n\t\t} \n\tPKIXBuilderParameters params = CreatePKIXBuilderParameters ( endCert ) ; \n\tCertPathBuilderResult cpbResult ; \n\ttry { \n\t\tcpbResult = cpb . build ( params ) ; \n\t\t} \n\tcatch ( CertPathBuilderException e ) { \n\t\tthrow new CertificatePathBuildingException ( e . getMessage ( ) , e . getCause ( ) ) ; \n\t\t} \n\tcatch ( InvalidAlgorithmParameterException e ) { \n\t\tthrow new CertificatePathBuildingException $F2808 ( e ) ; \n\t\t} \n\tCertPath cp = cpbResult . getCertPath ( ) ; \n\treturn cp ; \n\t} \n"}, {"code": "public void addConfiguration ( InputStream in ) throws $F16995 { \n\tServiceManager sm = new ServiceManager ( token ) ; \n\tDocument doc = SMSSchema . getXMLDocument ( in ) ; \n\tNodeList nodes = doc . getElementsByTagName ( SMSUtils . SERVICE ) ; \n\tfor ( int i = NUM00 ; \n\t( nodes != null ) && ( i < nodes . getLength ( ) ) ; \n\ti ++ ) { \n\t\t$F61359 ( serviceNode , nodes , i ) String sName = XMLUtils . getNodeAttributeValue ( serviceNode , SMSUtils . NAME ) ; \n\t\tString sVersion = XMLUtils . getNodeAttributeValue ( serviceNode , SMSUtils . VERSION ) ; \n\t\tNode configNode ; \n\t\tif ( sName . equals ( serviceName ) && $F1238 ( sVersion , version ) && ( ( configNode = XMLUtils . getChildNode ( serviceNode , SMSUtils . CONFIGURATION ) ) != null ) ) { \n\t\t\tCreateServiceConfig . createService ( sm , sName , sVersion , configNode , null ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static int stringToDictId ( String str ) { \n\ttry { \n\t\t$F151317 ( bytes , str ) return BytesUtil . readUnsigned ( bytes , NUM00 , bytes . length ) ; \n\t\t} \n\tcatch ( UnsupportedEncodingException e ) $F1083 } \n"}, {"code": "public void start $F72 throws IOException , MqttException { \n\tfinal String methodName = NUM00 ; \n\ttry { \n\t\tlog . fine ( CLASS_NAME , methodName , NUM00 , new Object [ ] { \n\t\t\thost , new Integer ( port ) , new Long ( conTimeout * NUM00 ) } \n\t\t) ; \n\t\tSocketAddress sockaddr = new InetSocketAddress ( host , port ) ; \n\t\tsocket = factory . createSocket ( ) ; \n\t\tsocket . connect ( sockaddr , conTimeout * NUM00 ) ; \n\t\t} \n\tcatch ( ConnectException ex ) { \n\t\tlog . fine ( CLASS_NAME , methodName , NUM00 , null , ex ) ; \n\t\tthrow new MqttException ( MqttException . REASON_CODE_SERVER_CONNECT_ERROR , ex ) ; \n\t\t} \n\t} \n"}, {"code": "public void callSeriallyAndWait ( Runnable r ) { \n\tif ( isEdt ( ) ) $F11389 RunnableWrapper c = new RunnableWrapper ( r , NUM00 ) ; \n\tcallSerially ( c ) ; \n\tflushEdt ( ) ; \n\tsynchronized ( lock ) { \n\t\twhile $F38402 ( c ) { \n\t\t\ttry $F34522 ( lock ) catch ( InterruptedException err ) $F845 } \n\t\t} \n\t} \n"}, {"code": "public List $F249696 find $F72 { \n\t$F27145 $F204 ( ids ) ; \n\tif ( innerQueries != null ) { \n\t\tfor ( Query query : innerQueries ) { \n\t\t\tids . addAll ( query . findInner ( ) ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tif $F2979 ( mimeWhere ) $F15127 ( find ) for ( Map . Entry < String , Where > entry : mimeWhere . entrySet ( ) ) { \n\t\t\tids = findIds ( ids , entry . getKey ( ) , entry . getValue ( ) ) ; \n\t\t\t} \n\t\t} \n\treturn find ( ids ) ; \n\t} \n"}, {"code": "public void persistBeanData ( Object bean , boolean printOnly ) $F19517 ( persistBeanTryCatch , bean , callPersistEmittedKeyValue , printOnly ) "}, {"code": "private void refill $F72 throws IOException { \n\toffset += usableLength ; \n\tint leftover = length - usableLength ; \n\t$F51886 ( System , buffer , usableLength , leftover ) int requested = buffer . length - leftover ; \n\tint returned = read ( input , buffer , leftover , requested ) ; \n\tlength = returned < NUM00 ? leftover : returned + leftover ; \n\tif ( returned < requested ) usableLength = length ; \n\telse { \n\t\tusableLength = findSafeEnd ( ) ; \n\t\tif ( usableLength < NUM00 ) usableLength = length ; \n\t\t} \n\twrapper . setText ( buffer , NUM00 , Math . max ( NUM00 , usableLength ) ) ; \n\titerator . setText ( wrapper ) ; \n\t} \n"}, {"code": "protected void fireInsertUpdate ( DocumentEvent evt ) { \n\tif ( tokenMarker != null ) { \n\t\tDocumentEvent . ElementChange ch = evt . getChange ( getDefaultRootElement ( ) ) ; \n\t\tif ( ch != null ) { \n\t\t\ttokenMarker . insertLines ( ch . getIndex ( ) + NUM00 , ch . getChildrenAdded ( ) . length - ch . getChildrenRemoved ( ) . length ) ; \n\t\t\t} \n\t\t} \n\tsuper . fireInsertUpdate ( evt ) ; \n\t} \n"}, {"code": "final void push ( final Object object ) $F207 ( stack , object ) "}, {"code": "int pending $F72 $F1522 ( pending ) "}, {"code": "private boolean isIncluded ( final HttpServletRequest request ) { \n\tString uri = ( String ) request . getAttribute ( NUM00 ) ; \n\tboolean includeRequest = ! ( uri == null ) ; \n\tif $F7383 ( includeRequest , log ) { \n\t\tlog . debug ( NUM00 + NUM00 , request . getRequestURL ( ) ) ; \n\t\t} \n\treturn includeRequest ; \n\t} \n"}, {"code": "public void drawDomainMarker ( Graphics2D g2 , ContourPlot plot , ValueAxis domainAxis , Marker marker , Rectangle2D dataArea ) { \n\tif ( marker instanceof ValueMarker ) { \n\t\tValueMarker vm = ( ValueMarker ) marker ; \n\t\t$F10704 ( value , vm ) $F10706 ( range , domainAxis ) $F10707 ( range , value ) double x = domainAxis . valueToJava2D ( value , dataArea , RectangleEdge . BOTTOM ) ; \n\t\tLine2D line = new $F69931 ( x , dataArea . getMinY ( ) , x , dataArea . getMaxY ( ) ) ; \n\t\tPaint paint = marker . getOutlinePaint ( ) ; \n\t\tStroke stroke = marker . getOutlineStroke ( ) ; \n\t\tg2 . setPaint ( paint != null ? paint : Plot . DEFAULT_OUTLINE_PAINT ) ; \n\t\tg2 . setStroke ( stroke != null ? stroke : Plot . DEFAULT_OUTLINE_STROKE ) ; \n\t\tg2 . draw ( line ) ; \n\t\t} \n\t} \n"}, {"code": "$F66520 ( msg , startpos , count , sb , initialSubmode , tmp , submode , idx , _BOOL , ch , SUBMODE_ALPHA , isAlphaUpper , isAlphaLower , SUBMODE_LOWER , isMixed , SUBMODE_MIXED , PUNCTUATION , MIXED , next , isPunctuation , SUBMODE_PUNCTUATION , h , len , i , odd ) "}, {"code": "public void remove ( String attrName , String delValue ) { \n\tint index = indexOf ( attrName ) ; \n\tif ( index != - NUM00 ) { \n\t\tAttr attr = ( Attr ) _attrs . get ( index ) ; \n\t\tattr . removeValue ( delValue ) ; \n\t\tif $F10471 ( attr ) $F106 ( _attrs , index ) } \n\t} \n"}, {"code": "private AppliedMigration createAppliedSchemaMigration $F72 { \n\treturn new AppliedMigration ( NUM00 , NUM00 , MigrationVersion . fromVersion ( Integer . toString ( NUM00 ) ) , NUM00 , MigrationType . SCHEMA , NUM00 , null , $F4094 , NUM00 , NUM00 , _BOOL ) ; \n\t} \n"}, {"code": "public static String makeSigAlg ( String digAlg , String encAlg ) { \n\t$F2936 ( digAlg ) if $F21935 ( encAlg ) encAlg = NUM00 ; \n\treturn digAlg + NUM00 + encAlg ; \n\t} \n"}, {"code": "public Table sample ( double proportion ) { \n\tint tableCount = ( int ) Math . round ( rowCount ( ) * proportion ) ; \n\t$F290678 ( table1Selection ) $F2027 selectedRecords = generateUniformBitmap ( tableCount , rowCount ( ) ) ; \n\tfor ( int selectedRecord : selectedRecords ) $F207 ( table1Selection , selectedRecord ) return selectWhere ( table1Selection ) ; \n\t} \n"}, {"code": "public static int indexOf $F214410 ( src , target , fromIdx ) { \n\tfinal int to = src . length - target . length + NUM00 ; \n\tfor ( int i = fromIdx ; \n\ti < to ; \n\ti ++ ) { \n\t\tif ( src [ i ] == target [ NUM00 ] ) { \n\t\t\tboolean equals = _BOOL ; \n\t\t\tfor ( int j = NUM00 , k = i + NUM00 ; \n\t\t\tj < target . length && equals ; \n\t\t\tj ++ , k ++ ) { \n\t\t\t\tif ( src [ k ] != target [ j ] ) { \n\t\t\t\t\tequals = _BOOL ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F9303 ( equals , i ) } \n\t\t} \n\t$F150 } \n"}, {"code": "$F1 public int read $F24576 ( buf , offset , length ) throws IOException { \n\ttry { \n\t\t$F14469 ( _channel ) $F115 ( remaining , _readBuffer ) if ( remaining > NUM00 ) { \n\t\t\t_readBuffer . get ( buf , offset , remaining ) ; \n\t\t\treturn remaining ; \n\t\t\t} \n\t\t$F725 ( _readBuffer ) $F83249 ( channelRead , _channel , _readBuffer ) $F14257 ( _readBuffer ) $F125151 ( channelRead ) _readBuffer . get ( buf , offset , channelRead ) ; \n\t\treturn channelRead ; \n\t\t} \n\tcatch ( InterruptedIOException e ) { \n\t\tif ( _throwReadInterrupts ) throw e ; \n\t\t$F120634 ( log , Level , e ) } \n\tcatch ( IOException e ) { \n\t\tif ( _throwReadInterrupts ) throw e ; \n\t\tlog . log ( Level . FINER , e . toString ( ) , e ) ; \n\t\t} \n\t$F150 } \n"}, {"code": "String readUTF ( $F97523 , int off , int len ) { \n\tint offset = off ; \n\t$F280 ( buf ) for ( int end = offset + len ; \n\toffset < end ; \n\t) { \n\t\t$F1473 ( ch , data , offset ) switch ( ch > > NUM00 ) { \n\t\t\t$F3366 $F3366 $F3366 $F3366 $F3366 $F3366 $F3366 $F3366 $F597 $F3366 $F3366 if ( offset >= len ) $F1337 ch = $F74254 ( ch ) | $F44579 ( data , offset ) ; \n\t\t\t$F597 $F3366 if ( offset + NUM00 >= len ) $F1337 ch = $F74254 ( ch ) | $F196796 ( data , offset ) | $F44579 ( data , offset ) ; \n\t\t\t$F597 $F1267 if ( offset + NUM00 >= len ) $F1337 ch = $F74254 ( ch ) | $F44579 ( data , offset ) ; \n\t\t\t$F597 } \n\t\t$F36813 ( buf , ch ) } \n\t$F92 ( buf ) } \n"}, {"code": "public TurtleWriter ( OutputStream out ) { \n\tthis ( new OutputStreamWriter $F28311 ( out , Charset ) ) ; \n\t} \n"}, {"code": "private char lookahead $F72 { \n\treturn $F1093 ( curCharIndex , pattern ) ? pattern . charAt ( curCharIndex + NUM00 ) : EOF ; \n\t} \n"}, {"code": "public static boolean isNumber ( String s ) { \n\t$F25111 ( s , _BOOL ) for ( $F2998 ( c , s ) ) { \n\t\tif ( ! Character . isDigit ( c ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "private State ( CircuitState circuitState , Duration timeoutDuration , EventCounter counter ) { \n\tthis . circuitState = circuitState ; \n\tthis . counter = counter ; \n\tif ( timeoutDuration . isZero ( ) || timeoutDuration . isNegative ( ) ) { \n\t\ttimedOutTimeNanos = NUM00 ; \n\t\t} \n\telse { \n\t\ttimedOutTimeNanos = ticker . read ( ) + timeoutDuration . toNanos ( ) ; \n\t\t} \n\t} \n"}, {"code": "public void cleanup ( ButtonGroup bg ) { \n\t$F4578 ( bg , layerName ) cleanup ( ) ; \n\t} \n"}, {"code": "public static Map < MetaKey , String > union ( final Map < MetaKey , String > providedMetaData , final Map < MetaKey , String > extractedMetaData ) { \n\tfinal int size1 = providedMetaData != null ? providedMetaData . size ( ) : NUM00 ; \n\tfinal int size2 = extractedMetaData != null ? extractedMetaData . size ( ) : NUM00 ; \n\tif ( size1 + size2 == NUM00 ) $F83145 ( Collections ) final Map < MetaKey , String > result = new $F4188 ( size1 + size2 ) ; \n\tif ( extractedMetaData != null ) $F96492 ( result , extractedMetaData ) if ( providedMetaData != null ) $F96492 ( result , providedMetaData ) $F20711 ( Collections , result ) } \n"}, {"code": "public static $F1469 fix83600 $F53421 ( signature ) { \n\tif ( signature == null || signature . length < NUM00 ) return signature ; \n\treturn Signature . removeCapture ( signature ) ; \n\t} \n"}, {"code": "public static void formatDouble ( double source , int decimals , int precision , StringBuffer target ) { \n\tint scale = ( Math . abs ( source ) >= NUM00 ) ? decimals : precision ; \n\tif ( tooManyDigitsUsed ( source , scale ) || tooCloseToRound ( source , scale ) ) { \n\t\tformatDoublePrecise ( source , decimals , precision , target ) ; \n\t\t} \n\telse { \n\t\tformatDoubleFast ( source , decimals , precision , target ) ; \n\t\t} \n\t} \n"}, {"code": "$F48363 ( input , offset , len , flags , decoder , _BOOL , temp , System ) "}, {"code": "protected View createChild ( String name ) { \n\tView view = null ; \n\tif $F22081 ( name , TF_PARENTID , TF_CLIENT_TYPE ) { \n\t\tview = new CCTextField ( this , name , NUM00 ) ; \n\t\t} \n\telse if $F1238 ( name , SEC_MH_COMMON ) { \n\t\tview = new CCSecondaryMasthead ( this , name ) ; \n\t\t} \n\telse if $F1238 ( name , PGTITLE ) { \n\t\tview = new CCPageTitle ( this , ptModel , name ) ; \n\t\t} \n\telse if $F55391 ( ptModel , name ) $F55392 ( view , ptModel , this , name ) else if $F1238 ( name , PROPERTY_ATTRIBUTE ) { \n\t\tview = new AMPropertySheet ( this , propertySheetModel , name ) ; \n\t\t} \n\telse if $F55391 ( propertySheetModel , name ) { \n\t\tview = propertySheetModel . createChild ( this , name , getModel ( ) ) ; \n\t\t} \n\telse { \n\t\tview = super . createChild ( name ) ; \n\t\t} \n\treturn view ; \n\t} \n"}, {"code": "public synchronized void draw ( final Graphics2D gfx , final float x , final float y ) { \n\tif $F931 ( isEmpty ) { \n\t\tm_textLayout . draw ( gfx , x , y ) ; \n\t\tfor ( final CHighlighting highlighting : new ArrayList < CHighlighting > ( m_highlighting ) ) { \n\t\t\tfinal double bpX = ( x + highlighting . getStart ( ) ) - NUM00 ; \n\t\t\tfinal double bpY = ( y - m_charHeight ) + NUM00 ; \n\t\t\tfinal double bpW = highlighting . getEnd ( ) + NUM00 ; \n\t\t\tfinal double bpH = m_charHeight - NUM00 ; \n\t\t\tdrawHighlighting ( gfx , bpX , bpY , bpW , bpH , highlighting . getColor ( ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void writeMapEnd $F72 throws IOException $F12032 ( os ) "}, {"code": "public boolean isAbstract $F72 { \n\treturn Modifier . isAbstract ( flags ) ; \n\t} \n"}, {"code": "public static File relativeFile ( File f ) { \n\tif ( f . isAbsolute ( ) ) { \n\t\tf = relativeFile ( $F8806 , f ) ; \n\t\t} \n\treturn f ; \n\t} \n"}, {"code": "public XMLParser $F41327 ( namespace , schemas ) throws XMLException $F2248 ( jc , JAXBContext , namespace , marshaller , XMLSchemaUtils , schemas , unmarshaller , e ) "}, {"code": "private ArrayList < SpinnerLanguageElement > createSpinnerLanguages ( int avoidLanguage ) { \n\tArrayList < SpinnerLanguageElement > result = new ArrayList < SpinnerLanguageElement > $F72 ; \n\t$F3803 languages = mSessionOptions . allLanguages ( ) ; \n\tfor ( $F3836 ( i , languages ) ) { \n\t\tif ( i != avoidLanguage ) { \n\t\t\tresult . add ( new SpinnerLanguageElement ( languages . get ( i ) , i ) ) ; \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public $F806 splitResourceName ( String serviceTypeName , String resourceName ) throws NameNotFoundException , SSOException , PolicyException { \n\tServiceType st = getServiceType ( serviceTypeName ) ; \n\tSet prefixes = getManagedResourceNames ( serviceTypeName ) ; \n\t$F808 ( retVal ) if $F2979 ( prefixes ) { \n\t\tretVal [ NUM00 ] = NUM00 ; \n\t\tretVal [ NUM00 ] = resourceName ; \n\t\treturn retVal ; \n\t\t} \n\t$F10531 ( iter , prefixes ) String tmp = null ; \n\tResourceMatch matchResult = null ; \n\tboolean foundSuperMatch = _BOOL ; \n\tboolean foundExactMatch = _BOOL ; \n\twhile $F2921 ( iter ) { \n\t\t$F103384 ( tmp , iter ) matchResult = st . compare ( resourceName , tmp ) ; \n\t\tif ( matchResult . equals ( ResourceMatch . SUPER_RESOURCE_MATCH ) ) $F3468 ( foundSuperMatch , _BOOL ) if ( matchResult . equals ( ResourceMatch . EXACT_MATCH ) ) $F3468 ( foundExactMatch , _BOOL ) } \n\tif ( foundSuperMatch ) { \n\t\tretVal [ NUM00 ] = tmp ; \n\t\tretVal [ NUM00 ] = st . getSubResource ( resourceName , tmp ) ; \n\t\treturn retVal ; \n\t\t} \n\tif ( foundExactMatch ) { \n\t\tretVal [ NUM00 ] = tmp ; \n\t\tretVal [ NUM00 ] = NUM00 ; \n\t\treturn retVal ; \n\t\t} \n\tretVal [ NUM00 ] = NUM00 ; \n\tretVal [ NUM00 ] = resourceName ; \n\treturn retVal ; \n\t} \n"}, {"code": "void materialize $F72 { \n\t$F44858 ( cachefill ) double min = Double . MAX_VALUE , max = Double . MIN_VALUE ; \n\tfor ( $F119 ( i , cachefill ) ) { \n\t\t$F37717 ( min , Math , cachec , i ) $F37717 ( max , Math , cachec , i ) } \n\tLinearScale scale = new LinearScale ( min , max ) ; \n\tmin = scale . getMin ( ) ; \n\t$F268954 ( max , scale ) this . base = min ; \n\tthis . max = max ; \n\tthis . binsize = ( max - min ) / this . destsize ; \n\tthis . data = new long [ this . destsize < < NUM00 ] ; \n\tsize = destsize ; \n\tfinal int end = cachefill ; \n\tcachefill = - NUM00 ; \n\tfor ( $F119 ( i , end ) ) $F66563 ( increment , cachec , i , cachev ) cachec = null ; \n\tcachev = null ; \n\t} \n"}, {"code": "$F32632 ( criteria , createCriteriaInternal , oredCriteria ) "}, {"code": "public ArrayFieldVector ( Field $F4203 field , $F10809 v1 , $F10809 v2 ) throws MathIllegalArgumentException , NullArgumentException { \n\tMathUtils . checkNotNull ( v1 ) ; \n\tMathUtils . checkNotNull ( v2 ) ; \n\tif ( v1 . length + v2 . length == NUM00 ) { \n\t\tthrow new MathIllegalArgumentException ( LocalizedCoreFormats . VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT ) ; \n\t\t} \n\tdata = MathArrays . buildArray ( field , v1 . length + v2 . length ) ; \n\t$F7057 ( System , v1 , data ) $F11244 ( System , v2 , data , v1 ) this . field = field ; \n\t} \n"}, {"code": "private void verifyTargetSessionIsLocalOrStateless ( SessionRequest req , SessionID sid ) throws SessionException , SessionRequestException , ForwardSessionRequestException { \n\tif ( statelessSessionManager . containsJwt ( sid ) ) $F932 String hostServerID = foreignSessionHandler . getCurrentHostServer ( sid ) ; \n\tif ( ! serverConfig . isLocalServer ( hostServerID ) ) { \n\t\ttry { \n\t\t\tthrow new ForwardSessionRequestException ( forward ( SESSION_SERVICE_URL_SERVICE . getSessionServiceURL ( hostServerID ) , req ) ) ; \n\t\t\t} \n\t\tcatch ( SessionException se ) { \n\t\t\tif ( ! sessionService . checkServerUp ( hostServerID ) ) { \n\t\t\t\tString retryHostServerID = foreignSessionHandler . getCurrentHostServer ( sid ) ; \n\t\t\t\tif $F1238 ( retryHostServerID , hostServerID ) { \n\t\t\t\t\tthrow se ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tif ( ! serverConfig . isLocalServer ( retryHostServerID ) ) { \n\t\t\t\t\t\tthrow new ForwardSessionRequestException ( forward ( SESSION_SERVICE_URL_SERVICE . getSessionServiceURL ( hostServerID ) , req ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tthrow se ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tif ( ! sessionService . checkSessionLocal ( sid ) ) { \n\t\tthrow new SessionRequestException ( sid , SessionBundle . getString ( NUM00 ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static boolean isJavaBuiltinDataType ( Class clazz ) { \n\t$F1933 ( clazz , _BOOL ) Class clazzBoxed = getBoxedType ( clazz ) ; \n\t$F46660 ( isNumeric , clazzBoxed , _BOOL ) $F46660 ( isBoolean , clazzBoxed , _BOOL ) if $F253730 ( clazzBoxed ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( ( clazzBoxed . equals ( $F94714 ) ) || ( clazzBoxed . equals ( $F62127 ) ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tif ( clazzBoxed . equals ( $F78753 ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "protected boolean isControlChar ( char ch ) { \n\treturn Character . isISOControl ( ch ) && ! Character . isWhitespace ( ch ) ; \n\t} \n"}, {"code": "public void encode ( OutputStream out ) throws IOException { \n\t$F19904 ( tmp ) if ( extensionValue == null ) { \n\t\textensionId = PKIXExtensions . PolicyConstraints_Id ; \n\t\tcritical = _BOOL ; \n\t\tencodeThis ( ) ; \n\t\t} \n\tsuper . encode ( tmp ) ; \n\t$F1569 ( out , tmp ) } \n"}, {"code": "$F4203 $F5675 onFindAll ( $F20474 modelClass , boolean isEager , long ... ids ) { \n\t$F5675 dataList ; \n\tif ( isAffectAllLines ( ids ) ) { \n\t\tdataList = query ( modelClass , null , null , null , null , null , NUM00 , null , $F19610 ( getForeignKeyAssociations , modelClass , isEager ) ) ; \n\t\t} \n\telse { \n\t\tdataList = query ( modelClass , null , getWhereOfIdsWithOr ( ids ) , null , null , null , NUM00 , null , $F19610 ( getForeignKeyAssociations , modelClass , isEager ) ) ; \n\t\t} \n\treturn dataList ; \n\t} \n"}, {"code": "public boolean isCached $F36827 ( requestUrl , maxWidth , maxHeight ) { \n\treturn isCached ( requestUrl , maxWidth , maxHeight , ScaleType . CENTER_INSIDE ) ; \n\t} \n"}, {"code": "public Style addStyle ( String nm , Style parent ) { \n\tStyleContext styles = ( StyleContext ) getAttributeContext ( ) ; \n\treturn styles . addStyle ( nm , parent ) ; \n\t} \n"}, {"code": "public static TextWithMnemonic parseText ( final String textWithMnemonic ) { \n\t$F826 ( textWithMnemonic ) int index = - NUM00 ; \n\t$F3239 ( plainText ) for ( $F1088 ( i , textWithMnemonic ) ) { \n\t\t$F1280 ( ch , textWithMnemonic , i ) if ( ch == NUM00 ) { \n\t\t\ti ++ ; \n\t\t\tif $F11984 ( i , textWithMnemonic ) $F5153 ch = textWithMnemonic . charAt ( i ) ; \n\t\t\tif ( ch != NUM00 ) $F12713 ( index , plainText ) } \n\t\tplainText . append ( ch ) ; \n\t\t} \n\treturn new TextWithMnemonic ( plainText . toString ( ) , index ) ; \n\t} \n"}, {"code": "public void checkPermissions ( NamespaceEntity namespaceEntity , String ... requestedIamRoleNames ) $F254297 ( checkPermissions , namespaceEntity , Arrays , requestedIamRoleNames ) "}, {"code": "private static AnnotatedTypeMirror asOuterSuper ( Types types , AnnotatedTypeFactory atypeFactory , AnnotatedTypeMirror type , AnnotatedTypeMirror superType ) { \n\tif ( type . getKind ( ) == TypeKind . DECLARED ) { \n\t\tAnnotatedDeclaredType dt = ( AnnotatedDeclaredType ) type ; \n\t\tAnnotatedDeclaredType enclosingType = dt ; \n\t\tTypeMirror superTypeMirror = types . erasure ( superType . getUnderlyingType ( ) ) ; \n\t\twhile ( enclosingType != null ) { \n\t\t\tTypeMirror enclosingTypeMirror = types . erasure ( enclosingType . getUnderlyingType ( ) ) ; \n\t\t\tif ( types . isSubtype ( enclosingTypeMirror , superTypeMirror ) ) $F3468 ( dt , enclosingType ) enclosingType = enclosingType . getEnclosingType ( ) ; \n\t\t\t} \n\t\t$F1933 ( enclosingType , superType ) return asSuper ( atypeFactory , dt , superType ) ; \n\t\t} \n\treturn asSuper ( atypeFactory , type , superType ) ; \n\t} \n"}, {"code": "public void reload ( SolrCore core , SolrIndexSearcher searcher ) throws IOException { \n\t$F973 ( LOG ) if ( dictionary == null && storeDir != null ) { \n\t\tFileInputStream is = new FileInputStream ( new File ( storeDir , factory . storeFileName ( ) ) ) ; \n\t\ttry { \n\t\t\tif ( lookup . load ( is ) ) $F932 } \n\t\tfinally { \n\t\t\tIOUtils . closeWhileHandlingException ( is ) ; \n\t\t\t} \n\t\t$F980 ( LOG ) } \n\tbuild ( core , searcher ) ; \n\t} \n"}, {"code": "public static String asString $F77499 ( jsonPath , json ) { \n\treturn pathAs ( $F10062 , jsonPath , json ) ; \n\t} \n"}, {"code": "$F1 public ServerHeartbeat serverDyn ( String address , int port , boolean isSSL , String clusterId , String displayName ) { \n\tObjects . requireNonNull ( address ) ; \n\tObjects . requireNonNull ( clusterId ) ; \n\tClusterHeartbeat cluster = createCluster ( clusterId ) ; \n\tServerHeartbeat server = cluster . createServer ( address , port , isSSL ) ; \n\tif ( displayName != null ) { \n\t\tserver . setDisplayName ( displayName ) ; \n\t\t} \n\tcluster . addDynamicServer ( server ) ; \n\treturn server ; \n\t} \n"}, {"code": "public void paintComponentBackground ( Object nativeGraphics , int x , int y , int width , int height , Style s ) { \n\tif ( width <= NUM00 || height <= NUM00 ) $F932 Image bgImageOrig = s . getBgImage ( ) ; \n\tif ( bgImageOrig == null ) { \n\t\tif ( s . getBackgroundType ( ) >= Style . BACKGROUND_GRADIENT_LINEAR_VERTICAL ) { \n\t\t\tdrawGradientBackground ( s , nativeGraphics , x , y , width , height ) ; \n\t\t\t$F665 } \n\t\tsetColor ( nativeGraphics , s . getBgColor ( ) ) ; \n\t\tfillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; \n\t\t} \n\telse { \n\t\t$F2049 ( iW , bgImageOrig ) $F2047 ( iH , bgImageOrig ) Object bgImage = bgImageOrig . getImage ( ) ; \n\t\tswitch ( s . getBackgroundType ( ) ) { \n\t\t\tcase Style . BACKGROUND_NONE : if ( s . getBgTransparency ( ) != NUM00 ) { \n\t\t\t\tsetColor ( nativeGraphics , s . getBgColor ( ) ) ; \n\t\t\t\tfillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; \n\t\t\t\t} \n\t\t\t$F665 case Style . BACKGROUND_IMAGE_SCALED : if ( isScaledImageDrawingSupported ( ) ) { \n\t\t\t\tdrawImage ( nativeGraphics , bgImage , x , y , width , height ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tif ( iW != width || iH != height ) { \n\t\t\t\t\tbgImageOrig = bgImageOrig . scaled ( width , height ) ; \n\t\t\t\t\ts . setBgImage ( bgImageOrig , _BOOL ) ; \n\t\t\t\t\tbgImage = bgImageOrig . getImage ( ) ; \n\t\t\t\t\t} \n\t\t\t\tdrawImage ( nativeGraphics , bgImage , x , y ) ; \n\t\t\t\t} \n\t\t\t$F665 case Style . BACKGROUND_IMAGE_SCALED_FILL : float r = Math . max ( $F61779 ( width ) / $F61779 ( iW ) , $F61779 ( height ) / $F61779 ( iH ) ) ; \n\t\t\tint bwidth = ( int ) ( $F61779 ( iW ) * r ) ; \n\t\t\tint bheight = ( int ) ( $F61779 ( iH ) * r ) ; \n\t\t\tif ( isScaledImageDrawingSupported ( ) ) { \n\t\t\t\tdrawImage ( nativeGraphics , bgImage , x + ( width - bwidth ) / NUM00 , y + ( height - bheight ) / NUM00 , bwidth , bheight ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tif ( iW != bwidth || iH != bheight ) { \n\t\t\t\t\tbgImageOrig = bgImageOrig . scaled ( bwidth , bheight ) ; \n\t\t\t\t\ts . setBgImage ( bgImageOrig , _BOOL ) ; \n\t\t\t\t\tbgImage = bgImageOrig . getImage ( ) ; \n\t\t\t\t\t} \n\t\t\t\tdrawImage ( nativeGraphics , bgImage , x + ( width - bwidth ) / NUM00 , y + ( height - bheight ) / NUM00 ) ; \n\t\t\t\t} \n\t\t\t$F665 case Style . BACKGROUND_IMAGE_SCALED_FIT : if ( s . getBgTransparency ( ) != NUM00 ) { \n\t\t\t\tsetColor ( nativeGraphics , s . getBgColor ( ) ) ; \n\t\t\t\tfillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; \n\t\t\t\t} \n\t\t\tfloat r2 = Math . min ( $F61779 ( width ) / $F61779 ( iW ) , $F61779 ( height ) / $F61779 ( iH ) ) ; \n\t\t\tint awidth = ( int ) ( $F61779 ( iW ) * r2 ) ; \n\t\t\tint aheight = ( int ) ( $F61779 ( iH ) * r2 ) ; \n\t\t\tif ( isScaledImageDrawingSupported ( ) ) { \n\t\t\t\tdrawImage ( nativeGraphics , bgImage , x + ( width - awidth ) / NUM00 , y + ( height - aheight ) / NUM00 , awidth , aheight ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tif ( iW != awidth || iH != aheight ) { \n\t\t\t\t\tbgImageOrig = bgImageOrig . scaled ( awidth , aheight ) ; \n\t\t\t\t\ts . setBgImage ( bgImageOrig , _BOOL ) ; \n\t\t\t\t\tbgImage = bgImageOrig . getImage ( ) ; \n\t\t\t\t\t} \n\t\t\t\tdrawImage ( nativeGraphics , bgImage , x + ( width - awidth ) / NUM00 , y + ( height - aheight ) / NUM00 , awidth , aheight ) ; \n\t\t\t\t} \n\t\t\t$F665 case Style . BACKGROUND_IMAGE_TILE_BOTH : tileImage ( nativeGraphics , bgImage , x , y , width , height ) ; \n\t\t\t$F665 case Style . BACKGROUND_IMAGE_TILE_HORIZONTAL_ALIGN_TOP : setColor ( nativeGraphics , s . getBgColor ( ) ) ; \n\t\t\tfillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; \n\t\t\ttileImage ( nativeGraphics , bgImage , x , y , width , iH ) ; \n\t\t\t$F665 case Style . BACKGROUND_IMAGE_TILE_HORIZONTAL_ALIGN_CENTER : setColor ( nativeGraphics , s . getBgColor ( ) ) ; \n\t\t\tfillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; \n\t\t\ttileImage ( nativeGraphics , bgImage , x , y + ( height / NUM00 - iH / NUM00 ) , width , iH ) ; \n\t\t\t$F665 case Style . BACKGROUND_IMAGE_TILE_HORIZONTAL_ALIGN_BOTTOM : setColor ( nativeGraphics , s . getBgColor ( ) ) ; \n\t\t\tfillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; \n\t\t\ttileImage ( nativeGraphics , bgImage , x , y + ( height - iH ) , width , iH ) ; \n\t\t\t$F665 case Style . BACKGROUND_IMAGE_TILE_VERTICAL_ALIGN_LEFT : setColor ( nativeGraphics , s . getBgColor ( ) ) ; \n\t\t\tfillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; \n\t\t\tfor ( int yPos = NUM00 ; \n\t\t\tyPos <= height ; \n\t\t\tyPos += iH ) { \n\t\t\t\tdrawImage ( nativeGraphics , bgImage , x , y + yPos ) ; \n\t\t\t\t} \n\t\t\t$F665 case Style . BACKGROUND_IMAGE_TILE_VERTICAL_ALIGN_CENTER : setColor ( nativeGraphics , s . getBgColor ( ) ) ; \n\t\t\tfillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; \n\t\t\tfor ( int yPos = NUM00 ; \n\t\t\tyPos <= height ; \n\t\t\tyPos += iH ) { \n\t\t\t\tdrawImage ( nativeGraphics , bgImage , x + ( width / NUM00 - iW / NUM00 ) , y + yPos ) ; \n\t\t\t\t} \n\t\t\t$F665 case Style . BACKGROUND_IMAGE_TILE_VERTICAL_ALIGN_RIGHT : setColor ( nativeGraphics , s . getBgColor ( ) ) ; \n\t\t\tfillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; \n\t\t\tfor ( int yPos = NUM00 ; \n\t\t\tyPos <= height ; \n\t\t\tyPos += iH ) { \n\t\t\t\tdrawImage ( nativeGraphics , bgImage , x + width - iW , y + yPos ) ; \n\t\t\t\t} \n\t\t\t$F665 case Style . BACKGROUND_IMAGE_ALIGNED_TOP : setColor ( nativeGraphics , s . getBgColor ( ) ) ; \n\t\t\tfillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; \n\t\t\tdrawImage ( nativeGraphics , bgImage , x + ( width / NUM00 - iW / NUM00 ) , y ) ; \n\t\t\t$F665 case Style . BACKGROUND_IMAGE_ALIGNED_BOTTOM : setColor ( nativeGraphics , s . getBgColor ( ) ) ; \n\t\t\tfillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; \n\t\t\tdrawImage ( nativeGraphics , bgImage , x + ( width / NUM00 - iW / NUM00 ) , y + ( height - iH ) ) ; \n\t\t\t$F665 case Style . BACKGROUND_IMAGE_ALIGNED_LEFT : setColor ( nativeGraphics , s . getBgColor ( ) ) ; \n\t\t\tfillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; \n\t\t\tdrawImage ( nativeGraphics , bgImage , x , y + ( height / NUM00 - iH / NUM00 ) ) ; \n\t\t\t$F665 case Style . BACKGROUND_IMAGE_ALIGNED_RIGHT : setColor ( nativeGraphics , s . getBgColor ( ) ) ; \n\t\t\tfillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; \n\t\t\tdrawImage ( nativeGraphics , bgImage , x + width - iW , y + ( height / NUM00 - iH / NUM00 ) ) ; \n\t\t\t$F665 case Style . BACKGROUND_IMAGE_ALIGNED_CENTER : setColor ( nativeGraphics , s . getBgColor ( ) ) ; \n\t\t\tfillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; \n\t\t\tdrawImage ( nativeGraphics , bgImage , x + ( width / NUM00 - iW / NUM00 ) , y + ( height / NUM00 - iH / NUM00 ) ) ; \n\t\t\t$F665 case Style . BACKGROUND_IMAGE_ALIGNED_TOP_LEFT : setColor ( nativeGraphics , s . getBgColor ( ) ) ; \n\t\t\tfillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; \n\t\t\tdrawImage ( nativeGraphics , bgImage , x , y ) ; \n\t\t\t$F665 case Style . BACKGROUND_IMAGE_ALIGNED_TOP_RIGHT : setColor ( nativeGraphics , s . getBgColor ( ) ) ; \n\t\t\tfillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; \n\t\t\tdrawImage ( nativeGraphics , bgImage , x + width - iW , y ) ; \n\t\t\t$F665 case Style . BACKGROUND_IMAGE_ALIGNED_BOTTOM_LEFT : setColor ( nativeGraphics , s . getBgColor ( ) ) ; \n\t\t\tfillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; \n\t\t\tdrawImage ( nativeGraphics , bgImage , x , y + ( height - iH ) ) ; \n\t\t\t$F665 case Style . BACKGROUND_IMAGE_ALIGNED_BOTTOM_RIGHT : setColor ( nativeGraphics , s . getBgColor ( ) ) ; \n\t\t\tfillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; \n\t\t\tdrawImage ( nativeGraphics , bgImage , x + width - iW , y + ( height - iH ) ) ; \n\t\t\t$F665 case Style . BACKGROUND_GRADIENT_LINEAR_HORIZONTAL : case Style . BACKGROUND_GRADIENT_LINEAR_VERTICAL : case Style . BACKGROUND_GRADIENT_RADIAL : drawGradientBackground ( s , nativeGraphics , x , y , width , height ) ; \n\t\t\t$F665 } \n\t\t} \n\t} \n"}, {"code": "public void runTest $F72 throws Throwable { \n\tDocument doc ; \n\tNodeList genderList ; \n\tNode genderNode ; \n\tCharacterData entText ; \n\tEntityReference entReference ; \n\tNode appendedNode ; \n\t$F236 ( doc , load , _BOOL ) $F237 ( genderList , doc ) $F238 ( genderNode , genderList ) entReference = doc . createEntityReference ( NUM00 ) ; \n\tassertNotNull ( NUM00 , entReference ) ; \n\tappendedNode = genderNode . appendChild ( entReference ) ; \n\t$F241 ( entText , entReference ) assertNotNull ( NUM00 , entText ) ; \n\t{ \n\t\tboolean success = _BOOL ; \n\t\ttry { \n\t\t\tentText . replaceData ( $F21567 ) ; \n\t\t\t} \n\t\tcatch ( DOMException ex ) { \n\t\t\tsuccess = ( ex . code == DOMException . NO_MODIFICATION_ALLOWED_ERR ) ; \n\t\t\t} \n\t\tassertTrue ( NUM00 , success ) ; \n\t\t} \n\t} \n"}, {"code": "public void removeAll $F72 $F9096 ( mParts ) "}, {"code": "protected abstract void handleLostEntry ( HttpRoute route ) ; \n"}, {"code": "$F13735 ( prefix , namespace , attName , attValue , xmlWriter ) "}, {"code": "public static boolean executableExists ( String executable ) { \n\t$F1705 ( directFile , executable ) if ( directFile . exists ( ) && directFile . canExecute ( ) ) { \n\t\treturn _BOOL ; \n\t\t} \n\tfor ( String pathString : getSystemPath ( ) ) { \n\t\t$F77510 ( path , Paths , pathString ) if ( Files . exists ( path . resolve ( executable ) ) && Files . isExecutable ( path . resolve ( executable ) ) ) { \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "$F1 public String toString $F72 { \n\t$F83 ( buf ) int i = NUM00 ; \n\tfor ( PseudoOp op : contents ) { \n\t\tbuf . append ( String . format ( NUM00 , i ++ , op ) ) ; \n\t\t} \n\t$F92 ( buf ) } \n"}, {"code": "private $F11300 combine ( $F11300 listA , $F11300 listB ) { \n\tLinkedHashSet $F11299 combinedProjects = Sets . newLinkedHashSet ( listA ) ; \n\tcombinedProjects . addAll ( listB ) ; \n\treturn $F7044 ( combinedProjects ) ; \n\t} \n"}, {"code": "public long generateNewPingId $F72 { \n\tPreferenceStore prefs = getPreferenceStore ( ) ; \n\t$F6822 ( rnd ) $F167119 ( id , rnd ) synchronized ( DdmsPreferenceStore . class ) { \n\t\tprefs . setValue ( PING_ID , id ) ; \n\t\ttry { \n\t\t\t$F72208 ( prefs ) } \n\t\t$F29052 } \n\treturn id ; \n\t} \n"}, {"code": "public boolean isValid $F72 { \n\treturn System . currentTimeMillis ( ) < creationTime + lifetime + ( lifetime / NUM00 ) ; \n\t} \n"}, {"code": "public static Model readFrom ( VirtualFile file ) throws ServerException , ForbiddenException , IOException { \n\trequireNonNull ( file , NUM00 ) ; \n\treturn fetchModel ( XMLTree . from ( file . getContent ( ) ) ) ; \n\t} \n"}, {"code": "public boolean isValueExistForKey ( String key ) { \n\tboolean isValueExists ; \n\ttry { \n\t\tString string = getString ( key , NUM00 ) ; \n\t\tisValueExists = $F14071 ( string ) ; \n\t\t} \n\tcatch ( ClassCastException e ) { \n\t\ttry { \n\t\t\tint anInt = getInt ( key , NUM00 ) ; \n\t\t\tisValueExists = anInt != NUM00 ; \n\t\t\t} \n\t\tcatch ( ClassCastException e1 ) { \n\t\t\ttry { \n\t\t\t\tlong aLong = getLong ( key , NUM00 ) ; \n\t\t\t\tisValueExists = aLong != NUM00 ; \n\t\t\t\t} \n\t\t\tcatch ( ClassCastException e2 ) { \n\t\t\t\ttry { \n\t\t\t\t\tfloat aFloat = getFloat ( key , NUM00 ) ; \n\t\t\t\t\tisValueExists = aFloat != NUM00 ; \n\t\t\t\t\t} \n\t\t\t\tcatch ( ClassCastException e3 ) { \n\t\t\t\t\ttry { \n\t\t\t\t\t\tboolean aBoolean = getBoolean ( key , _BOOL ) ; \n\t\t\t\t\t\tisValueExists = ! aBoolean ; \n\t\t\t\t\t\t} \n\t\t\t\t\tcatch ( Exception e4 ) { \n\t\t\t\t\t\tisValueExists = _BOOL ; \n\t\t\t\t\t\t$F301 ( e ) } \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F28453 ( isValueExists , _BOOL ) return isValueExists ; \n\t} \n"}, {"code": "public void updateViewport $F72 { \n\tsetToOrtho ( _BOOL , virtualViewport . getWidth ( ) , virtualViewport . getHeight ( ) ) ; \n\t} \n"}, {"code": "public String toString $F72 { \n\t$F1747 ( keyUsages ) String usage = NUM00 ; \n\tboolean first = _BOOL ; \n\tfor ( ObjectIdentifier oid : keyUsages ) { \n\t\tif ( ! first ) { \n\t\t\tusage += NUM00 ; \n\t\t\t} \n\t\t$F1729 ( result , map , oid ) if ( result != null ) { \n\t\t\tusage += result ; \n\t\t\t} \n\t\telse { \n\t\t\tusage += oid . toString ( ) ; \n\t\t\t} \n\t\tfirst = _BOOL ; \n\t\t} \n\treturn $F5528 ( super ) + usage + NUM00 ; \n\t} \n"}, {"code": "public static void writeBoxplot ( TDoubleObjectHashMap $F42619 table , String file ) throws IOException { \n\tint maxSize = NUM00 ; \n\tTDoubleObjectIterator $F42619 it = table . iterator ( ) ; \n\tfor ( $F2277 ( i , table ) ) { \n\t\t$F60136 ( it ) maxSize = Math . max ( maxSize , it . value ( ) . length ) ; \n\t\t} \n\tdouble keys [ ] = table . keys ( ) ; \n\tArrays . sort ( keys ) ; \n\t$F1764 ( writer , file ) for ( $F1139 ( k , keys ) ) { \n\t\twriter . write ( String . valueOf ( keys [ k ] ) ) ; \n\t\tif ( k + NUM00 < keys . length ) writer . write ( TAB ) ; \n\t\t} \n\t$F1769 ( writer ) for ( $F119 ( i , maxSize ) ) { \n\t\tfor ( $F1139 ( k , keys ) ) { \n\t\t\t$F1986 list = table . get ( keys [ k ] ) ; \n\t\t\tif ( i < list . length ) { \n\t\t\t\twriter . write ( String . valueOf ( list [ i ] ) ) ; \n\t\t\t\t} \n\t\t\telse $F4050 ( writer , NA ) if ( k + NUM00 < keys . length ) writer . write ( TAB ) ; \n\t\t\t} \n\t\t$F1769 ( writer ) } \n\t$F59 ( writer ) } \n"}, {"code": "public void testClearBitNegativeInside3 $F72 { \n\tString as = NUM00 ; \n\tint number = NUM00 ; \n\t$F9144 ( aNumber , as ) $F32957 ( result , aNumber , number ) $F10665 ( assertEquals , as , result ) } \n"}, {"code": "@ Theory public void logEntriesHaveSameOrderAsIndexes $F22194 ( dataPoint ) { \n\t$F43606 ( index1 , dataPoint ) $F43606 ( index2 , dataPoint ) LogEntry first = logEntries [ index1 ] ; \n\tLogEntry second = logEntries [ index2 ] ; \n\t$F39971 ( LOG , index1 , index2 ) $F21645 ( result , tested , first , second ) $F21645 ( expected , Integer , index1 , index2 ) assertThatHaveSameSignum ( expected , result ) ; \n\t} \n"}, {"code": "public static void copyAll ( File root , File dest ) throws IOException { \n\tif $F3444 ( root ) { \n\t\tfor ( $F3445 ( child , root ) ) { \n\t\t\t$F5259 ( childDest , dest , child ) if $F3444 ( child ) { \n\t\t\t\tif ( $F1905 ( childDest ) && ! mkdirs ( childDest ) ) $F314650 ( childDest ) copyAll ( child , childDest ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tFiles . copy ( child . toPath ( ) , childDest . toPath ( ) , StandardCopyOption . COPY_ATTRIBUTES ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse { \n\t\t$F5259 ( childDest , dest , root ) if ( $F1905 ( dest ) && ! mkdirs ( dest ) ) $F314650 ( dest ) Files . copy ( root . toPath ( ) , childDest . toPath ( ) , StandardCopyOption . COPY_ATTRIBUTES ) ; \n\t\t} \n\t} \n"}, {"code": "public void paintLine ( Point2D pt1 , Point2D pt2 ) { \n\tif ( pt1 != null && pt2 != null ) { \n\t\tOMLine cLine = new OMLine ( pt1 . getY ( ) , pt1 . getX ( ) , pt2 . getY ( ) , pt2 . getX ( ) , OMGraphic . LINETYPE_GREATCIRCLE ) ; \n\t\tProjection proj = theMap . getProjection ( ) ; \n\t\tcLine . generate ( proj ) ; \n\t\tdistanceList . add ( cLine ) ; \n\t\t} \n\t} \n"}, {"code": "public static boolean hasExportMaskForStorageAndVArray ( DbClient dbClient , ExportGroup exportGroup , URI storageURI ) { \n\t$F2689 storagePortURIsAssociatedWithVArrayAndStorageArray = ExportMaskUtils . getStoragePortUrisAssociatedWithVarrayAndStorageArray ( storageURI , exportGroup . getVirtualArray ( ) , dbClient ) ; \n\tStringSet maskUriSet = exportGroup . getExportMasks ( ) ; \n\tif ( maskUriSet != null ) { \n\t\tfor ( String maskUriString : maskUriSet ) { \n\t\t\tExportMask mask = dbClient . queryObject ( ExportMask . class , URI . create ( maskUriString ) ) ; \n\t\t\tURI maskStorageURI = mask . getStorageDevice ( ) ; \n\t\t\tif $F1238 ( maskStorageURI , storageURI ) { \n\t\t\t\tfor ( String storagePort : mask . getStoragePorts ( ) ) { \n\t\t\t\t\t$F12651 ( storagePortURIsAssociatedWithVArrayAndStorageArray , storagePort , _BOOL ) } \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "private void preload ( int first , boolean increasing ) { \n\tfinal int start ; \n\tfinal int end ; \n\tif ( increasing ) { \n\t\tstart = Math . max ( first , mLastEnd ) ; \n\t\tend = Math . min ( first + mLoadAheadItems , mItemSource . getCount ( ) ) ; \n\t\t} \n\telse { \n\t\tstart = Math . max ( NUM00 , first - mLoadAheadItems ) ; \n\t\tend = Math . min ( first , mLastStart ) ; \n\t\t} \n\tLog . v ( TAG , NUM00 + first + NUM00 + increasing + NUM00 + start + NUM00 + end ) ; \n\tmLastEnd = end ; \n\tmLastStart = start ; \n\tif ( start == NUM00 && end == NUM00 ) $F932 final $F5675 items = mItemSource . getItemsInRange ( start , end ) ; \n\tif ( ! increasing ) { \n\t\tCollections . reverse ( items ) ; \n\t\t} \n\tregisterLoadTokens ( mItemLoader . preloadItems ( items ) ) ; \n\t} \n"}, {"code": "Builder addLenient ( String line ) { \n\t$F129840 ( index , line ) if ( index != - NUM00 ) { \n\t\treturn addLenient ( line . substring ( NUM00 , index ) , line . substring ( index + NUM00 ) ) ; \n\t\t} \n\telse if $F3106 ( line ) { \n\t\treturn addLenient ( NUM00 , line . substring ( NUM00 ) ) ; \n\t\t} \n\telse $F195829 ( addLenient , line ) } \n"}, {"code": "private void initRMIParameters $F72 throws Exception { \n\tif ( rmiHostMaster == null || rmiPortMaster == null ) { \n\t\tFile confDir = ReplicatorRuntimeConf . locateReplicatorConfDir ( ) ; \n\t\tFile propsFile = new File ( confDir , ReplicationServiceManager . CONFIG_SERVICES ) ; \n\t\t$F14354 ( println , String , propsFile ) TungstenProperties serviceProps = PropertiesManager . loadProperties ( propsFile ) ; \n\t\tif ( rmiPortMaster == null ) rmiPortMaster = serviceProps . getString ( ReplicatorConf . RMI_PORT , ReplicatorConf . RMI_DEFAULT_PORT , _BOOL ) ; \n\t\tif ( rmiHostMaster == null ) rmiHostMaster = ReplicationServiceManager . getHostName ( serviceProps ) ; \n\t\t} \n\t} \n"}, {"code": "public String encodeKey ( final String key ) { \n\tif $F4329 ( StringUtils , key ) $F825 try { \n\t\treturn Hex . encodeHexString ( key . getBytes ( NUM00 ) ) ; \n\t\t} \n\tcatch ( UnsupportedEncodingException uee ) $F48927 ( uee ) } \n"}, {"code": "private static void globalUnionTest ( final ISchemaVersion schemaVersion ) throws IOException { \n\tfinal Writer output = openOutput ( schemaVersion , NUM00 , TestType . UNION ) ; \n\t$F23769 ( hll , newHLL , HLLType ) $F23769 ( emptyHLL , newHLL , HLLType ) cumulativeUnionLine ( output , hll , emptyHLL , schemaVersion ) ; \n\tfor ( $F6268 ( i ) ) { \n\t\tfinal HLL randomHLL = generateRandomHLL ( ) ; \n\t\tcumulativeUnionLine ( output , hll , randomHLL , schemaVersion ) ; \n\t\t} \n\t$F1206 ( output ) $F59 ( output ) } \n"}, {"code": "public static boolean restore $F72 { \n\t$F1705 ( restoreConfig , RESTORATION_PROPERTIES ) if $F60822 ( restoreConfig ) { \n\t\t$F973 ( logger ) try $F31304 ( stream , restoreConfig ) { \n\t\t\t$F2697 ( properties ) properties . load ( stream ) ; \n\t\t\trestoreDatabase ( properties ) ; \n\t\t\trestoreSolrIndex ( properties ) ; \n\t\t\t} \n\t\tcatch ( UnsupportedOperationException e ) { \n\t\t\t$F5197 ( logger , e ) $F2699 ( System ) } \n\t\tcatch ( Exception e ) { \n\t\t\tlogger . fatal ( NUM00 , e ) ; \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t$F105993 ( restoreConfig ) } \n\treturn _BOOL ; \n\t} \n"}, {"code": "public void testSetBitPositiveInside4 $F72 $F105940 ( aSign , number , aNumber , aBytes , result , rBytes , resBytes , i , assertTrue , assertEquals ) "}, {"code": "$F1 public void writeComment ( String data ) throws XMLStreamException { \n\tlog . log ( Level . FINE , NUM00 , data ) ; \n\t} \n"}, {"code": "public static File fromDataURI ( String dataURI , String fileName ) { \n\treturn File . createIfSupported ( fromDataURI ( dataURI ) , fileName ) ; \n\t} \n"}, {"code": "protected List extractDiscoveryInformation ( XRDS xrds , XriIdentifier identifier , Resolver xriResolver ) throws DiscoveryException { \n\t$F12181 ( endpoints ) XRD xrd = xrds . getFinalXRD ( ) ; \n\textractDiscoveryInformationOpenID ( xriResolver , endpoints , xrd , identifier , DiscoveryInformation . OPENID2_OP , _BOOL ) ; \n\textractDiscoveryInformationOpenID ( xriResolver , endpoints , xrd , identifier , DiscoveryInformation . OPENID2 , _BOOL ) ; \n\textractDiscoveryInformationOpenID ( xriResolver , endpoints , xrd , identifier , DiscoveryInformation . OPENID11 , _BOOL ) ; \n\textractDiscoveryInformationOpenID ( xriResolver , endpoints , xrd , identifier , DiscoveryInformation . OPENID10 , _BOOL ) ; \n\tif $F10471 ( endpoints ) $F973 ( _log ) return endpoints ; \n\t} \n"}, {"code": "public static void clearRecentFiles $F72 { \n\tString str = ProgramProperties . get ( RECENTFILES , NUM00 ) ; \n\tif $F35625 ( str ) { \n\t\t$F111652 ( ProgramProperties , RECENTFILES ) notifyListChange ( RECENTFILES ) ; \n\t\t} \n\t} \n"}, {"code": "public static boolean areEquivalent ( final TypeReference a , final TypeReference b ) $F19580 ( areEquivalent , a , b , _BOOL ) "}, {"code": "private static char CallStaticCharMethodV $F4272 ( env , classJREF , methodID , argAddress ) throws Exception { \n\t$F4274 ( traceJNI , VM ) $F4275 ( RuntimeEntrypoints ) try { \n\t\tObject returnObj = JNIHelpers . invokeWithVarArg ( methodID , argAddress , TypeReference . Char ) ; \n\t\treturn Reflection . unwrapChar ( returnObj ) ; \n\t\t} \n\t$F4287 ( traceJNI , unexpected , System , env ) } \n"}, {"code": "private boolean initXSettingsIfNeeded ( final String propName ) { \n\tif ( ! loadedXSettings && ( propName . startsWith ( NUM00 ) || propName . equals ( SunToolkit . DESKTOPFONTHINTS ) || propName . startsWith ( dndPrefix ) ) ) { \n\t\tloadedXSettings = _BOOL ; \n\t\tif ( ! GraphicsEnvironment . isHeadless ( ) ) { \n\t\t\tloadXSettings ( ) ; \n\t\t\tif ( desktopProperties . get ( SunToolkit . DESKTOPFONTHINTS ) == null ) { \n\t\t\t\tif ( XWM . isKDE2 ( ) ) { \n\t\t\t\t\tObject hint = fcManager . getFontConfigAAHint ( ) ; \n\t\t\t\t\tif ( hint != null ) { \n\t\t\t\t\t\tdesktopProperties . put ( UNIXToolkit . FONTCONFIGAAHINT , hint ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\tdesktopProperties . put ( SunToolkit . DESKTOPFONTHINTS , SunToolkit . getDesktopFontHints ( ) ) ; \n\t\t\t\t} \n\t\t\treturn _BOOL ; \n\t\t\t} \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "private void updateSortingIcons $F72 { \n\tfor ( $F40424 ( type , SortingType ) ) { \n\t\tSortingDirection direction = model . getSortingDirection ( type ) ; \n\t\tImageIcon icon ; \n\t\tswitch ( direction ) { \n\t\t\tcase DESCENDING : icon = ICON_ARROW_DOWN ; \n\t\t\t$F597 case ASCENDING : icon = ICON_ARROW_UP ; \n\t\t\t$F597 case UNDEFINED : icon = null ; \n\t\t\t$F597 $F1267 icon = null ; \n\t\t\t} \n\t\tswitch ( type ) { \n\t\t\tcase NAME : sortingLabelAttName . setIcon ( icon ) ; \n\t\t\t$F597 case TYPE : sortingLabelAttType . setIcon ( icon ) ; \n\t\t\t$F597 case MISSING : sortingLabelAttMissings . setIcon ( icon ) ; \n\t\t\t$F597 $F1267 sortingLabelAttName . setIcon ( null ) ; \n\t\t\tsortingLabelAttType . setIcon ( null ) ; \n\t\t\tsortingLabelAttMissings . setIcon ( null ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F66632 ( files , mRootDirectory , file , mEntries , mTotalSize , VolleyLog ) "}, {"code": "private void restoreIcon ( Key key , $F96 buffer , int dataSize ) throws IOException { \n\tif ( VERBOSE ) Log . v ( TAG , NUM00 + key . id ) ; \n\tif ( DEBUG ) Log . d ( TAG , NUM00 + buffer . length + NUM00 + Base64 . encodeToString ( buffer , NUM00 , dataSize , Base64 . NO_WRAP ) ) ; \n\tResource res = unpackProto ( $F6325 , buffer , dataSize ) ; \n\tif ( DEBUG ) { \n\t\tLog . d ( TAG , NUM00 + res . dpi + NUM00 ) ; \n\t\t} \n\tBitmap icon = BitmapFactory . decodeByteArray ( res . data , NUM00 , res . data . length ) ; \n\tif ( icon == null ) { \n\t\tLog . w ( TAG , NUM00 + key . name ) ; \n\t\t} \n\tif ( VERBOSE ) Log . v ( TAG , NUM00 + key . name ) ; \n\tIconCache . preloadIcon ( mContext , ComponentName . unflattenFromString ( key . name ) , icon , res . dpi ) ; \n\t} \n"}, {"code": "public boolean isExpired $F72 { \n\treturn paymentDetails . hasExpires ( ) && $F165576 ( System ) > paymentDetails . getExpires ( ) ; \n\t} \n"}, {"code": "private void endFormals $F72 { \n\t$F430955 ( hasFormals , _BOOL , buf ) } \n"}, {"code": "public static void readBytes ( InputStream is , $F96 b , int offset , int len ) { \n\t$F7546 ( len ) try { \n\t\tint read = NUM00 ; \n\t\twhile ( read < len ) { \n\t\t\tint n = is . read ( b , offset + read , len - read ) ; \n\t\t\tif ( n < NUM00 ) throw new PngjInputException ( NUM00 + n + NUM00 + len ) ; \n\t\t\tread += n ; \n\t\t\t} \n\t\t} \n\tcatch ( IOException e ) { \n\t\tthrow new PngjInputException ( NUM00 , e ) ; \n\t\t} \n\t} \n"}, {"code": "public CharacterMatch $F53421 ( chars ) { \n\tAssert . isNotNull ( chars ) ; \n\tAssert . isTrue ( chars . length > NUM00 ) ; \n\tfChars = chars ; \n\tArrays . sort ( chars ) ; \n\t} \n"}, {"code": "public void addActionListener ( ActionListener newA ) $F207 ( m_Listeners , newA ) "}, {"code": "$F74047 ( container , mContainers , mRequest , _BOOL ) "}, {"code": "public static $F96 encode $F24576 ( data , off , length ) { \n\t$F1538 ( bOut ) $F39025 ( encoder , data , off , length , bOut , e ) $F11316 ( bOut ) } \n"}, {"code": "public double distanceToLineSegment ( LatLong A , LatLong B ) { \n\tdouble Ax = ( A . lng - lng ) * Math . cos ( NUM00 * radians * ( A . lat + lat ) ) ; \n\tdouble Ay = ( A . lat - lat ) ; \n\tdouble Bx = ( B . lng - lng ) * Math . cos ( NUM00 * radians * ( B . lat + lat ) ) ; \n\tdouble By = ( B . lat - lat ) ; \n\tif ( Ay == By ) { \n\t\tif ( ( Ax < NUM00 && Bx < NUM00 ) || ( Ax > NUM00 && Bx > NUM00 ) ) return Math . sqrt ( Math . min ( Ax * Ax + Ay * Ay , Bx * Bx + By * By ) ) * EarthRadius * radians ; \n\t\tif ( Ax == Bx ) return $F25556 ( Math , Ax , Ay ) * EarthRadius * radians ; \n\t\t} \n\telse { \n\t\tdouble Ix = ( ( By - Ay ) * ( Ax * By - Ay * Bx ) ) / ( $F127638 ( Ax , Bx ) + $F127638 ( Ay , By ) ) ; \n\t\tif ( ( Ix < Ax && Ix < Bx ) || ( Ix > Ax && Ix > Bx ) ) { \n\t\t\treturn Math . sqrt ( Math . min ( Ax * Ax + Ay * Ay , Bx * Bx + By * By ) ) * EarthRadius * radians ; \n\t\t\t} \n\t\t} \n\treturn Math . abs ( ( Bx - Ax ) * Ay - Ax * ( By - Ay ) ) / $F127640 ( Math , Bx , Ax , By , Ay ) * EarthRadius * radians ; \n\t} \n"}, {"code": "$F1113 public List < PlayerNbt > createMultiplayerPlayerNbts $F72 { \n\tList < PlayerNbt > result = new ArrayList < PlayerNbt > $F72 ; \n\tfor ( File playerdataFile : getPlayerdataFiles ( ) ) { \n\t\tif $F7110 ( playerdataFile ) { \n\t\t\tresult . add ( createPlayerdataPlayerNbt ( getPlayerUUIDFromPlayerdataFile ( playerdataFile ) ) ) ; \n\t\t\t} \n\t\t} \n\tif $F5973 ( result ) { \n\t\t$F2980 ( Log ) return result ; \n\t\t} \n\tfor ( File playersFile : getPlayersFiles ( ) ) { \n\t\tif $F7110 ( playersFile ) { \n\t\t\tresult . add ( createPlayersPlayerNbt ( getPlayerNameFromPlayersFile ( playersFile ) ) ) ; \n\t\t\t} \n\t\t} \n\tif $F5973 ( result ) { \n\t\t$F2980 ( Log ) return result ; \n\t\t} \n\t$F2980 ( Log ) return result ; \n\t} \n"}, {"code": "$F74047 ( container , mContainers , mRequest , _BOOL ) "}, {"code": "private void show ( SetupWindow window ) { \n\twindow . handleWindowOpeningEvent ( ) ; \n\t_setupWindowHolder . show ( window . getKey ( ) ) ; \n\t_currentWindow = window ; \n\t} \n"}, {"code": "public $F21637 append $F93065 ( str ) $F21638 ( internal , str , this ) "}, {"code": "private static String replaceStars ( String init ) { \n\t$F83 ( builder ) $F7782 ( chars , init ) for ( $F1139 ( i , chars ) ) { \n\t\tif ( chars [ i ] == NUM00 && i == NUM00 && chars . length > NUM00 && chars [ i + NUM00 ] == NUM00 ) $F312159 ( builder , i ) else if ( chars [ i ] == NUM00 && i < $F33765 ( chars ) && i > NUM00 && chars [ i + NUM00 ] == NUM00 && chars [ i - NUM00 ] == NUM00 ) { \n\t\t\t$F50865 ( builder ) $F84 ( builder ) } \n\t\telse if ( chars [ i ] == NUM00 && i == $F33765 ( chars ) && i > NUM00 && chars [ i - NUM00 ] == NUM00 ) { \n\t\t\t$F50865 ( builder ) $F84 ( builder ) } \n\t\telse if ( chars [ i ] == NUM00 ) $F86 ( builder ) else $F40727 ( builder , chars , i ) } \n\t$F92 ( builder ) } \n"}, {"code": "public void startOptionGroup ( String description ) { \n\toptionGroups . put ( optionList . size ( ) , description ) ; \n\t} \n"}, {"code": "private $F96 encrypt ( $F96 m , NTRUEncryptionPublicKeyParameters pubKey ) { \n\tIntegerPolynomial pub = pubKey . h ; \n\tint N = params . N ; \n\tint q = params . q ; \n\tint maxLenBytes = params . maxMsgLenBytes ; \n\tint db = params . db ; \n\tint bufferLenBits = params . bufferLenBits ; \n\tint dm0 = params . dm0 ; \n\tint pkLen = params . pkLen ; \n\tint minCallsMask = params . minCallsMask ; \n\tboolean hashSeed = params . hashSeed ; \n\t$F56524 ( oid , params ) int l = m . length ; \n\tif ( maxLenBytes > NUM00 ) $F825 if ( l > maxLenBytes ) { \n\t\tthrow new DataLengthException ( NUM00 + l + NUM00 + maxLenBytes ) ; \n\t\t} \n\twhile ( _BOOL ) { \n\t\t$F96 b = new byte [ db / NUM00 ] ; \n\t\trandom . nextBytes ( b ) ; \n\t\t$F96 p0 = new byte [ maxLenBytes + NUM00 - l ] ; \n\t\t$F96 M = new byte [ bufferLenBits / NUM00 ] ; \n\t\t$F7057 ( System , b , M ) M [ b . length ] = ( byte ) l ; \n\t\tSystem . arraycopy ( m , NUM00 , M , b . length + NUM00 , m . length ) ; \n\t\tSystem . arraycopy ( p0 , NUM00 , M , b . length + NUM00 + m . length , p0 . length ) ; \n\t\tIntegerPolynomial mTrin = IntegerPolynomial . fromBinary3Sves ( M , N ) ; \n\t\t$F96 bh = pub . toBinary ( q ) ; \n\t\t$F96 hTrunc = copyOf ( bh , pkLen / NUM00 ) ; \n\t\t$F96 sData = buildSData ( oid , m , l , b , hTrunc ) ; \n\t\tPolynomial r = generateBlindingPoly ( sData , M ) ; \n\t\tIntegerPolynomial R = r . mult ( pub , q ) ; \n\t\tIntegerPolynomial R4 = ( IntegerPolynomial ) R . clone ( ) ; \n\t\tR4 . modPositive ( NUM00 ) ; \n\t\t$F96 oR4 = R4 . toBinary ( NUM00 ) ; \n\t\tIntegerPolynomial mask = MGF ( oR4 , N , minCallsMask , hashSeed ) ; \n\t\tmTrin . add ( mask ) ; \n\t\tmTrin . mod3 ( ) ; \n\t\tif ( mTrin . count ( - NUM00 ) < dm0 ) $F1448 if ( mTrin . count ( NUM00 ) < dm0 ) $F1448 if ( mTrin . count ( NUM00 ) < dm0 ) $F1448 R . add ( mTrin , q ) ; \n\t\tR . ensurePositive ( q ) ; \n\t\treturn R . toBinary ( q ) ; \n\t\t} \n\t} \n"}, {"code": "public final void expectAtLeastOneResult ( ResultSet rs ) throws AdeInternalException , SQLException { \n\tif $F17350 ( rs ) { \n\t\tthrow new AdeInternalException ( NUM00 + m_sql ) ; \n\t\t} \n\t} \n"}, {"code": "public Sequence $F72 { \n\tthis ( INITIAL_VALUE ) ; \n\t} \n"}, {"code": "public static Optional < MongoCredential > createCredentials $F1947 ( username , password , database ) { \n\tif ( ! Strings . isNullOrEmpty ( username ) && ! Strings . isNullOrEmpty ( password ) && ! Strings . isNullOrEmpty ( database ) ) { \n\t\treturn Optional . of ( MongoCredential . createMongoCRCredential ( username , database , password . toCharArray ( ) ) ) ; \n\t\t} \n\telse { \n\t\treturn Optional . absent ( ) ; \n\t\t} \n\t} \n"}, {"code": "$F41325 ( in , result , _BOOL , c , length ) "}, {"code": "$F1 public void stop $F72 { \n\t$F21333 ( executorService ) restTemplate = null ; \n\t} \n"}, {"code": "public void writeExif ( InputStream jpegStream , String exifOutFileName ) throws $F27136 { \n\t$F26831 ( jpegStream , exifOutFileName , NULL_ARGUMENT_ ) OutputStream s = null ; \n\ttry { \n\t\ts = getExifWriterStream ( exifOutFileName ) ; \n\t\tdoExifStreamIO ( jpegStream , s ) ; \n\t\t$F1206 ( s ) } \n\t$F27615 ( closeSilently , s , e ) $F59 ( s ) } \n"}, {"code": "public ResultRecord ( DirectoryScannerConfig scan , Action [ ] actions , File f ) { \n\t$F32928 ( directoryScanner , scan ) this . actions = actions ; \n\t$F68535 ( date ) $F24536 ( filename , f ) } \n"}, {"code": "private MethodDoc findImplMethod ( MethodDoc interfaceMethod ) { \n\tString name = interfaceMethod . name ( ) ; \n\tString desc = Util . methodDescriptorOf ( interfaceMethod ) ; \n\tfor ( MethodDoc implMethod : implClass . methods ( ) ) { \n\t\tif ( name . equals ( implMethod . name ( ) ) && desc . equals ( Util . methodDescriptorOf ( implMethod ) ) ) { \n\t\t\treturn implMethod ; \n\t\t\t} \n\t\t} \n\t$F1274 } \n"}, {"code": "protected static $F3803 extractBootClassPath $F20110 ( args ) $F19580 ( extractOptWithPattern , BOOT_CLASS_PATH_REGEX , _BOOL , args ) "}, {"code": "public abstract Object fromOpenValue ( Object openValue ) throws InvalidObjectException ; \n"}, {"code": "public ContourPath ( ContourAttrib attr , int levelIndex , $F1986 x , $F1986 y ) { \n\txArr = x ; \n\tyArr = y ; \n\tthis . levelIndex = levelIndex ; \n\tattributes = attr ; \n\tint np = xArr . length ; \n\tif ( Math . abs ( x [ NUM00 ] - x [ np - NUM00 ] ) < kSmallX && Math . abs ( y [ NUM00 ] - y [ np - NUM00 ] ) < kSmallY ) { \n\t\tclosed = _BOOL ; \n\t\tx [ np - NUM00 ] = x [ NUM00 ] ; \n\t\ty [ np - NUM00 ] = y [ NUM00 ] ; \n\t\t} \n\telse closed = _BOOL ; \n\t} \n"}, {"code": "$F49286 ( value , absMin , absMax , absValue , Math ) "}, {"code": "protected void print $F8306 ( mnemonic , args ) { \n\tprinter . print ( indent + NUM00 ) ; \n\twritePaddedString ( mnemonic + NUM00 , NUM00 ) ; \n\tif ( args != null ) { \n\t\tfor ( $F1139 ( i , args ) ) { \n\t\t\tif ( i > NUM00 ) $F21410 ( printer ) printer . print ( args [ i ] ) ; \n\t\t\t} \n\t\t} \n\t$F21416 ( printer ) } \n"}, {"code": "$F1 public void removeConnectionEventListener ( ConnectionEventListener listener ) { \n\tdebugCode ( NUM00 ) ; \n\tlisteners . remove ( listener ) ; \n\t} \n"}, {"code": "public boolean isDownloadable $F72 { \n\t$F53443 ( topics , getExactTopics ) for ( String xt : topics ) if $F3106 ( xt ) return _BOOL ; \n\tif ( getDefaultURLs ( ) . length > NUM00 ) { \n\t\treturn _BOOL ; \n\t\t} \n\treturn _BOOL ; \n\t} \n"}, {"code": "public boolean isSatisfiedBy ( Date date ) { \n\tCalendar $F85420 ( testDateCal , Calendar , getTimeZone ) ; \n\ttestDateCal . setTime ( date ) ; \n\t$F104560 ( testDateCal , Calendar ) $F9110 ( originalDate , testDateCal ) testDateCal . add ( Calendar . SECOND , - NUM00 ) ; \n\tDate timeAfter = $F62627 ( getTimeAfter , testDateCal ) ; \n\treturn ( ( timeAfter != null ) && $F1238 ( timeAfter , originalDate ) ) ; \n\t} \n"}, {"code": "public static $F11968 scanForDirLogs ( final String currentPath ) { \n\tif ( Cfg . DEBUG ) { \n\t\tCheck . requires ( currentPath != null , NUM00 ) ; \n\t\t} \n\tFile fc ; \n\tfinal $F11968 vector = new $F11968 $F72 ; \n\ttry { \n\t\t$F24661 ( fc , currentPath ) if $F3444 ( fc ) { \n\t\t\tfinal $F806 fileLogs = fc . list ( ) ; \n\t\t\tfor ( final String dir : fileLogs ) { \n\t\t\t\tfinal File fdir = new File ( currentPath + dir ) ; \n\t\t\t\tif $F3444 ( fdir ) { \n\t\t\t\t\tvector . addElement ( dir + NUM00 ) ; \n\t\t\t\t\t$F44970 ( Cfg , Check , TAG , dir ) } \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tcatch ( final Exception e ) { \n\t\t$F44960 ( Cfg , Check , e ) $F44970 ( Cfg , Check , TAG , e ) } \n\tif ( Cfg . DEBUG ) { \n\t\tCheck . log ( TAG + NUM00 + vector . size ( ) ) ; \n\t\t} \n\treturn vector ; \n\t} \n"}, {"code": "private static $F5 flattenRows ( Cursor cursor , int limit ) { \n\tUtil . throwIfNot ( limit >= NUM00 ) ; \n\t$F22547 ( flatList ) final int numColumns = cursor . getColumnCount ( ) ; \n\tfor ( int row = NUM00 ; \n\trow < limit && cursor . moveToNext ( ) ; \n\trow ++ ) { \n\t\tfor ( $F119 ( column , numColumns ) ) { \n\t\t\tswitch ( cursor . getType ( column ) ) { \n\t\t\t\tcase Cursor . FIELD_TYPE_NULL : $F722 ( flatList ) $F597 case Cursor . FIELD_TYPE_INTEGER : flatList . add ( String . valueOf ( cursor . getLong ( column ) ) ) ; \n\t\t\t\t$F597 case Cursor . FIELD_TYPE_FLOAT : flatList . add ( String . valueOf ( cursor . getDouble ( column ) ) ) ; \n\t\t\t\t$F597 case Cursor . FIELD_TYPE_BLOB : flatList . add ( blobToString ( cursor . getBlob ( column ) ) ) ; \n\t\t\t\t$F597 case Cursor . FIELD_TYPE_ NUM00 : default : flatList . add ( cursor . getString ( column ) ) ; \n\t\t\t\t$F597 } \n\t\t\t} \n\t\t} \n\tif ( ! cursor . isAfterLast $F72 ) { \n\t\tfor ( $F119 ( column , numColumns ) ) $F71145 ( flatList ) } \n\treturn flatList ; \n\t"}, {"code": "$F4562 ( view , deltaX , scrollX , deltaY , scrollY , scrollRange , fuzzyThreshold , scaleFactor , isTouchEvent , deltaValue , currentScrollValue , scrollValue , HORIZONTAL , VERTICAL , mode , newScrollValue , PullToRefreshBase , Log , LOG_TAG , State , Math ) "}, {"code": "private Process executeCompiler ( $F5 argList , $F5 envList , boolean chdir ) throws IOException { \n\t$F806 args ; \n\tif ( chdir ) { \n\t\t$F110602 ( cb ) $F84 ( cb ) cb . append ( _compiler . getSourceDirName ( ) ) ; \n\t\t$F84 ( cb ) for ( $F2277 ( i , argList ) ) { \n\t\t\t$F84 ( cb ) $F89 ( cb , argList , i ) } \n\t\t$F384 ( args ) args [ NUM00 ] = NUM00 ; \n\t\targs [ NUM00 ] = NUM00 ; \n\t\targs [ NUM00 ] = cb . toString ( ) ; \n\t\t} \n\telse { \n\t\t$F252761 ( args , argList ) argList . toArray ( args ) ; \n\t\t} \n\t$F5442 ( envp , envList ) envList . toArray ( envp ) ; \n\tif $F6456 ( log , Level ) { \n\t\tCharBuffer cb = CharBuffer . allocate ( ) ; \n\t\tfor ( $F1139 ( i , args ) ) { \n\t\t\t$F28333 ( i , cb ) $F6939 ( cb , args , i ) } \n\t\tlog . fine ( cb . close ( ) ) ; \n\t\t} \n\t$F43316 ( runtime , Runtime ) try { \n\t\treturn runtime . exec ( args ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new JavaCompileException ( L . l ( NUM00 , args [ NUM00 ] , String . valueOf ( e ) ) ) ; \n\t\t} \n\t} \n"}, {"code": "public void collapseAllParents $F72 { \n\tif $F1032 ( mDataList ) { \n\t\t$F3523 expandableListItems = getParents ( _BOOL ) ; \n\t\tif $F1032 ( expandableListItems ) { \n\t\t\t$F10162 ( expandedItemSize , expandableListItems ) if ( expandedItemSize > NUM00 ) { \n\t\t\t\tfor ( $F119 ( i , expandedItemSize ) ) { \n\t\t\t\t\t$F16628 ( o , expandableListItems , i ) $F59912 ( indexOf , mDataList , o ) if ( indexOf >= NUM00 ) collapseListItem ( indexOf , ( BaseExpandableObservable ) o , _BOOL ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F1309 protected PdfFormXObject drawPushButtonAppearance ( float width , float height , String text , PdfFont font , int fontSize ) { \n\treturn drawPushButtonAppearance ( width , height , text , font , ( float ) fontSize ) ; \n\t} \n"}, {"code": "public NBTTagCompound loadFile ( File saveDirectory , String filename ) { \n\treturn loadFile ( new File ( saveDirectory , filename + NUM00 ) ) ; \n\t} \n"}, {"code": "public boolean dnsDomainIs ( String host , String domain ) { \n\treturn host . endsWith ( domain ) ; \n\t} \n"}, {"code": "$F1431 public SelectionBuilder reset $F72 { \n\tmTable = null ; \n\t$F44159 ( mProjectionMap ) if ( mSelection != null ) $F357905 ( mSelection ) $F44159 ( mSelectionArgs ) return this ; \n\t} \n"}, {"code": "private final synchronized Enumeration < PolicyEntry > elements $F72 $F10806 ( policyEntries ) "}, {"code": "public String format ( Calendar calendar , Calendar smscCalendar ) { \n\t$F13264 ( calendar , smscCalendar ) long diffTimeInMillis = calendar . getTimeInMillis ( ) - smscCalendar . getTimeInMillis ( ) ; \n\t$F6853 ( diffTimeInMillis ) $F156 ( offsetEpoch , Calendar , utcTimeZone ) offsetEpoch . setTimeInMillis ( diffTimeInMillis ) ; \n\tint years = $F21621 ( offsetEpoch , Calendar ) - NUM00 ; \n\tint months = $F21623 ( offsetEpoch , Calendar ) ; \n\tint days = $F21625 ( offsetEpoch , Calendar ) - NUM00 ; \n\tint hours = $F13065 ( offsetEpoch , Calendar ) ; \n\tint minutes = $F21629 ( offsetEpoch , Calendar ) ; \n\tint seconds = $F21631 ( offsetEpoch , Calendar ) ; \n\tif ( years >= NUM00 ) $F29526 ( years ) return format ( years , months , days , hours , minutes , seconds ) ; \n\t} \n"}, {"code": "private void calculateEntropy ( double scale , KStarWrapper params ) { \n\tint i , j , k ; \n\tdouble actent = NUM00 , randent = NUM00 ; \n\tdouble pstar , tprob , avgprob = NUM00 , minprob = NUM00 ; \n\tdouble actClassProb , randClassProb ; \n\t$F3789 pseudoClassProbs = new double [ NUM_RAND_COLS + NUM00 ] [ m_NumClasses ] ; \n\tfor ( j = NUM00 ; \n\tj <= NUM_RAND_COLS ; \n\tj ++ ) { \n\t\tfor ( i = NUM00 ; \n\t\ti < m_NumClasses ; \n\t\ti ++ ) $F211213 ( pseudoClassProbs , j , i ) } \n\tfor ( i = NUM00 ; \n\ti < m_NumInstances ; \n\ti ++ ) { \n\t\tif ( m_Distances [ i ] < NUM00 ) $F1448 else { \n\t\t\tpstar = PStar ( m_Distances [ i ] , scale ) ; \n\t\t\ttprob = pstar / m_ActualCount ; \n\t\t\tavgprob += tprob ; \n\t\t\t$F45132 ( pstar , minprob ) for ( k = NUM00 ; \n\t\t\tk <= NUM_RAND_COLS ; \n\t\t\tk ++ ) { \n\t\t\t\tpseudoClassProbs [ k ] [ m_RandClassCols [ k ] [ i ] ] += tprob ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tfor ( $F157662 ( j , m_NumClasses ) ) { \n\t\tactClassProb = pseudoClassProbs [ NUM_RAND_COLS ] [ j ] / avgprob ; \n\t\tif ( actClassProb > NUM00 ) { \n\t\t\tactent -= actClassProb * Math . log ( actClassProb ) / LOG2 ; \n\t\t\t} \n\t\t} \n\tfor ( k = NUM00 ; \n\tk < NUM_RAND_COLS ; \n\tk ++ ) { \n\t\tfor ( $F157662 ( i , m_NumClasses ) ) { \n\t\t\trandClassProb = pseudoClassProbs [ k ] [ i ] / avgprob ; \n\t\t\tif ( randClassProb > NUM00 ) { \n\t\t\t\trandent -= randClassProb * Math . log ( randClassProb ) / LOG2 ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\trandent /= NUM_RAND_COLS ; \n\tparams . actEntropy = actent ; \n\tparams . randEntropy = randent ; \n\tparams . avgProb = avgprob ; \n\tparams . minProb = minprob ; \n\t} \n"}, {"code": "public static void initCause ( Throwable throwable , Throwable cause ) { \n\tif ( INIT_CAUSE_METHOD != null ) { \n\t\ttry { \n\t\t\t$F226025 ( INIT_CAUSE_METHOD , throwable , cause ) } \n\t\t$F3957 } \n\t} \n"}, {"code": "public void testBug20685022 $F72 throws Exception { \n\t$F933 ( isCommunityEdition ) $F859 ( props ) $F725 ( props ) $F2699 ( props ) $F2699 ( props ) $F2699 ( props ) getConnectionWithProps ( props ) ; \n\t$F725 ( props ) $F2699 ( props ) $F2699 ( props ) $F2699 ( props ) $F2699 ( props ) $F2699 ( props ) $F2699 ( props ) getConnectionWithProps ( props ) ; \n\t$F725 ( props ) $F2699 ( props ) $F2699 ( props ) $F2699 ( props ) String trustStorePath = NUM00 ; \n\t$F48491 ( System , trustStorePath ) $F2699 ( System ) $F48491 ( System , trustStorePath ) $F2699 ( System ) getConnectionWithProps ( props ) ; \n\t} \n"}, {"code": "public static boolean canRun ( final File file ) { \n\treturn manager . getEngineByExtension ( FileUtils . getFileExtension ( file ) ) != null ; \n\t} \n"}, {"code": "public void parseElement $F77499 ( tagName , attrs ) { \n\tif ( canvas == null && tagName . equalsIgnoreCase ( NUM00 ) ) { \n\t\tscale = mxUtils . getDouble ( attrs , NUM00 , NUM00 ) ; \n\t\tcanvas = createCanvas ( attrs ) ; \n\t\tif ( canvas != null ) { \n\t\t\tcanvas . setScale ( scale ) ; \n\t\t\t} \n\t\t} \n\telse if ( canvas != null ) { \n\t\tboolean drawLabel = _BOOL ; \n\t\tif $F141797 ( tagName ) { \n\t\t\tdrawVertex ( attrs ) ; \n\t\t\tdrawLabel = _BOOL ; \n\t\t\t} \n\t\telse if $F21935 ( tagName ) { \n\t\t\tdrawEdge ( attrs ) ; \n\t\t\tdrawLabel = _BOOL ; \n\t\t\t} \n\t\tif ( drawLabel ) { \n\t\t\tdrawLabel ( tagName . equalsIgnoreCase ( NUM00 ) , attrs ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void startPrecaching $F72 { \n\t$F27746 ( Log , TAG ) prepareNativeLibraries ( ) ; \n\tsIsPrecaching = _BOOL ; \n\tacquirePrecachingWakeLock ( ) ; \n\t$F2346 ( mPrecacheLauncher ) } \n"}, {"code": "$F1 public $F987 listOptions $F72 { \n\t$F994 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F1007 ( newVector ) } \n"}, {"code": "public WordAlignmentState ( final Rule rule , final int start ) { \n\t$F19919 ( trgPoints ) srcLength = rule . getFrench ( ) . length ; \n\tnumNT = rule . getArity ( ) ; \n\tsrcStart = start ; \n\tfinal Map < Integer , $F3807 > alignmentMap = rule . getAlignmentMap ( ) ; \n\tfinal $F2027 nonTerminalSourcePositions = rule . getNonTerminalSourcePositions ( ) ; \n\tfinal $F2027 trg = rule . getEnglish ( ) ; \n\tfor ( $F1139 ( trgIndex , trg ) ) { \n\t\tfinal AlignedSourceTokens trgPoint = new AlignedSourceTokens $F72 ; \n\t\tif ( trg [ trgIndex ] >= NUM00 ) { \n\t\t\tif $F1710 ( alignmentMap , trgIndex ) { \n\t\t\t\tfor ( int srcIdx : alignmentMap . get ( trgIndex ) ) $F128607 ( trgPoint , srcStart , srcIdx ) } \n\t\t\telse { \n\t\t\t\ttrgPoint . setNull ( ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\ttrgPoint . setNonTerminal ( ) ; \n\t\t\tfinal int absoluteNonTerminalSourcePosition = srcStart + nonTerminalSourcePositions [ Math . abs ( trg [ trgIndex ] ) - NUM00 ] ; \n\t\t\ttrgPoint . add ( absoluteNonTerminalSourcePosition ) ; \n\t\t\t} \n\t\ttrgPoints . add ( trgPoint ) ; \n\t\t} \n\t} \n"}, {"code": "protected void configureImageReaderLoaders $F72 { \n\timageReaderLoaders = new Vector < ImageReaderLoader > $F72 ; \n\tImageReaderLoader idl = ( ImageReaderLoader ) ComponentFactory . create ( NUM00 ) ; \n\tif ( idl != null ) $F207 ( imageReaderLoaders , idl ) else $F18144 ( logger ) idl = ( ImageReaderLoader ) ComponentFactory . create ( NUM00 ) ; \n\tif ( idl != null ) $F207 ( imageReaderLoaders , idl ) else $F18144 ( logger ) } \n"}, {"code": "protected void handleSpecialSubstitution ( String replace , String replaceWith , int startPos , String description ) { \n\tif $F3057 ( replace ) { \n\t\tif $F4432 ( replaceWith ) $F228450 ( error , startPos , description ) ignoreChars = CharSet . parseString ( replaceWith ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void countExample ( Example example ) { \n\tdouble plabel ; \n\tdouble label = example . getValue ( labelAttribute ) ; \n\tif ( ! predictedAttribute . isNominal ( ) ) { \n\t\tplabel = example . getValue ( predictedAttribute ) ; \n\t\t} \n\telse { \n\t\tString labelS = example . getValueAsString ( labelAttribute ) ; \n\t\tplabel = example . getConfidence ( labelS ) ; \n\t\tlabel = NUM00 ; \n\t\t} \n\tdouble weight = NUM00 ; \n\tif ( weightAttribute != null ) { \n\t\tweight = example . getValue ( weightAttribute ) ; \n\t\t} \n\tdouble diff = weight * Math . abs ( label - plabel ) ; \n\tdeviationSum += diff ; \n\tdouble relDiff = Math . abs ( weight * label - ( trueLabelSum / exampleCounter ) ) ; \n\trelativeSum += relDiff ; \n\t} \n"}, {"code": "public static void unzip ( String zipFile , String location ) throws IOException { \n\tfinal int BUFFER_SIZE = NUM00 ; \n\tint size ; \n\t$F2175 ( buffer , BUFFER_SIZE ) try { \n\t\tif $F2364 ( location ) { \n\t\t\tlocation += NUM00 ; \n\t\t\t} \n\t\t$F1705 ( f , location ) if $F4926 ( f ) $F1908 ( f ) ZipInputStream zin = new ZipInputStream ( new BufferedInputStream $F113801 ( zipFile , BUFFER_SIZE ) ) ; \n\t\ttry { \n\t\t\tZipEntry ze = null ; \n\t\t\twhile $F78823 ( ze , zin ) { \n\t\t\t\tString path = location + ze . getName ( ) ; \n\t\t\t\t$F1705 ( unzipFile , path ) if $F3444 ( ze ) { \n\t\t\t\t\tif $F4926 ( unzipFile ) $F1908 ( unzipFile ) } \n\t\t\t\telse { \n\t\t\t\t\t$F4924 ( parentDir , unzipFile ) if ( null != parentDir ) { \n\t\t\t\t\t\tif $F4926 ( parentDir ) $F1908 ( parentDir ) } \n\t\t\t\t\t$F46293 ( out , unzipFile , _BOOL ) ; \n\t\t\t\t\tBufferedOutputStream fout = new BufferedOutputStream ( out , BUFFER_SIZE ) ; \n\t\t\t\t\ttry { \n\t\t\t\t\t\twhile ( ( size = zin . read ( buffer , NUM00 , BUFFER_SIZE ) ) != - NUM00 ) $F29756 ( fout , buffer , size ) $F22108 ( zin ) } \n\t\t\t\t\tfinally $F12238 ( fout ) } \n\t\t\t\t} \n\t\t\t} \n\t\t$F3229 ( zin ) } \n\t$F102303 ( Log , TAG , e ) } \n"}, {"code": "private void addDeclAnnotations ( Map < String , $F77231 > declAnnos , Element elt ) { \n\tif ( fromStubFile != null ) { \n\t\t$F77231 annos = declAnnos . get ( ElementUtils . getVerboseName ( elt ) ) ; \n\t\tif ( annos == null ) { \n\t\t\tannos = AnnotationUtils . createAnnotationSet ( ) ; \n\t\t\tputOrAddToMap ( declAnnos , ElementUtils . getVerboseName ( elt ) , annos ) ; \n\t\t\t} \n\t\tannos . add ( fromStubFile ) ; \n\t\t} \n\t} \n"}, {"code": "private void inspectConditionsWithBooleans ( LinkedList $F265759 objBranchConditions ) { \n\tfor ( PsiElement objExpression : objBranchConditions ) { \n\t\tif ( ! ( objExpression instanceof ConstantReference ) ) $F1448 if ( ExpressionSemanticUtil . isBoolean ( ( ConstantReference ) objExpression ) ) { \n\t\t\tholder . registerProblem ( objExpression , strProblemDescriptionBooleans , ProblemHighlightType . GENERIC_ERROR_OR_WARNING ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static XContentType xContentType ( CharSequence content ) { \n\tint length = content . length ( ) < GUESS_HEADER_LENGTH ? content . length ( ) : GUESS_HEADER_LENGTH ; \n\t$F38155 ( length ) $F12685 ( first , content ) if ( first == NUM00 ) { \n\t\treturn XContentType . JSON ; \n\t\t} \n\tif ( length > NUM00 && first == SmileConstants . HEADER_BYTE_1 && content . charAt ( NUM00 ) == SmileConstants . HEADER_BYTE_2 && content . charAt ( NUM00 ) == SmileConstants . HEADER_BYTE_3 ) { \n\t\treturn XContentType . SMILE ; \n\t\t} \n\tif ( length > NUM00 && first == NUM00 && $F4431 ( content ) && $F4431 ( content ) ) { \n\t\treturn XContentType . YAML ; \n\t\t} \n\tfor ( $F119 ( i , length ) ) { \n\t\t$F1280 ( c , content , i ) if ( c == NUM00 ) { \n\t\t\treturn XContentType . JSON ; \n\t\t\t} \n\t\tif ( Character . isWhitespace ( c ) == _BOOL ) $F5153 } \n\t$F1274 } \n"}, {"code": "$F13914 ( RequestMethod ) public ResponseEntity < Bookmark > deleteBookmark ( @ PathVariable ( $F3144 ) String username , @ PathVariable ( $F3144 ) int bookmarkId ) throws BookmarkNotFoundException { \n\tOptional < Bookmark > optional = bookmarksRepository . findByIdAndUserUsername ( bookmarkId , username ) ; \n\tif $F16464 ( optional ) { \n\t\tbookmarksRepository . delete ( optional . get ( ) ) ; \n\t\treturn new $F151149 ( optional . get ( ) , HttpStatus . OK ) ; \n\t\t} \n\telse { \n\t\tthrow new BookmarkNotFoundException ( NUM00 + bookmarkId ) ; \n\t\t} \n\t} \n"}, {"code": "public static Object loadInstance ( Class clazz , Object defaultValue ) { \n\ttry $F171631 ( clazz ) catch ( Throwable t ) { \n\t\treturn defaultValue ; \n\t\t} \n\t} \n"}, {"code": "public static String toJSONString ( Object value ) $F82771 ( writer , writeJSONString , value , e ) "}, {"code": "public static final $F20163 CollectionX $F20163 toLazyCollection ( final Stream $F20163 stream ) { \n\treturn SeqUtils . toLazyCollection ( stream . iterator ( ) ) ; \n\t} \n"}, {"code": "$F32186 ( reader , this , _BOOL ) "}, {"code": "static Unit valueOf ( String name , boolean horizontal ) { \n\tif $F1277 ( name ) { \n\t\tUnit defaultUnit = Sizes . getDefaultUnit ( ) ; \n\t\t$F21525 ( defaultUnit ) return horizontal ? DIALOG_UNITS_X : DIALOG_UNITS_Y ; \n\t\t} \n\telse if $F3057 ( name ) { \n\t\treturn PIXEL ; \n\t\t} \n\telse if $F3057 ( name ) { \n\t\treturn horizontal ? DIALOG_UNITS_X : DIALOG_UNITS_Y ; \n\t\t} \n\telse if $F3057 ( name ) { \n\t\treturn POINT ; \n\t\t} \n\telse if $F3057 ( name ) { \n\t\treturn INCH ; \n\t\t} \n\telse if $F3057 ( name ) { \n\t\treturn MILLIMETER ; \n\t\t} \n\telse if $F3057 ( name ) { \n\t\treturn CENTIMETER ; \n\t\t} \n\telse { \n\t\tthrow new IllegalArgumentException $F70412 ( name ) ; \n\t\t} \n\t} \n"}, {"code": "public void checkNumberArgs ( int argNum ) throws WrongNumberArgsException { \n\tif $F61157 ( argNum ) reportWrongNumberArgs ( ) ; \n\t} \n"}]